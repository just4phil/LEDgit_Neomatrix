
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c3       	rjmp	.+1898   	; 0x76c <__dtors_end>
       2:	00 00       	nop
       4:	dd c3       	rjmp	.+1978   	; 0x7c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	db c3       	rjmp	.+1974   	; 0x7c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c3       	rjmp	.+1970   	; 0x7c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c3       	rjmp	.+1966   	; 0x7c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c3       	rjmp	.+1962   	; 0x7c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c3       	rjmp	.+1958   	; 0x7c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d1 c3       	rjmp	.+1954   	; 0x7c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	cf c3       	rjmp	.+1950   	; 0x7c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c3       	rjmp	.+1946   	; 0x7c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 9b 2a 	jmp	0x5536	; 0x5536 <__vector_10>
      2c:	0c 94 18 2b 	jmp	0x5630	; 0x5630 <__vector_11>
      30:	c7 c3       	rjmp	.+1934   	; 0x7c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c3       	rjmp	.+1930   	; 0x7c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	c3 c3       	rjmp	.+1926   	; 0x7c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c1 c3       	rjmp	.+1922   	; 0x7c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c3       	rjmp	.+1918   	; 0x7c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c3       	rjmp	.+1914   	; 0x7c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bb c3       	rjmp	.+1910   	; 0x7c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c3       	rjmp	.+1906   	; 0x7c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b7 c3       	rjmp	.+1902   	; 0x7c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c3       	rjmp	.+1898   	; 0x7c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c3       	rjmp	.+1894   	; 0x7c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 fa 29 	jmp	0x53f4	; 0x53f4 <__vector_23>
      60:	af c3       	rjmp	.+1886   	; 0x7c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 56 2d 	jmp	0x5aac	; 0x5aac <__vector_25>
      68:	0c 94 81 2d 	jmp	0x5b02	; 0x5b02 <__vector_26>
      6c:	0c 94 b2 2d 	jmp	0x5b64	; 0x5b64 <__vector_27>
      70:	a7 c3       	rjmp	.+1870   	; 0x7c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	a5 c3       	rjmp	.+1866   	; 0x7c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	a3 c3       	rjmp	.+1862   	; 0x7c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a1 c3       	rjmp	.+1858   	; 0x7c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 63 0f 	jmp	0x1ec6	; 0x1ec6 <__vector_32>
      84:	9d c3       	rjmp	.+1850   	; 0x7c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	9b c3       	rjmp	.+1846   	; 0x7c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	99 c3       	rjmp	.+1842   	; 0x7c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	97 c3       	rjmp	.+1838   	; 0x7c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	95 c3       	rjmp	.+1834   	; 0x7c0 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__heap_start+0x6d74>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	55 00       	.word	0x0055	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	55 aa       	std	Z+53, r5	; 0x35
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	ff 55       	subi	r31, 0x5F	; 95
     414:	ff 55       	subi	r31, 0x5F	; 95
     416:	ff 00       	.word	0x00ff	; ????
     418:	00 00       	nop
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	10 10       	cpse	r1, r0
     41e:	10 ff       	sbrs	r17, 0
     420:	00 14       	cp	r0, r0
     422:	14 14       	cp	r1, r4
     424:	ff 00       	.word	0x00ff	; ????
     426:	10 10       	cpse	r1, r0
     428:	ff 00       	.word	0x00ff	; ????
     42a:	ff 10       	cpse	r15, r15
     42c:	10 f0       	brcs	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	10 f0       	brcs	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	14 14       	cp	r1, r4
     432:	14 fc       	sbrc	r1, 4
     434:	00 14       	cp	r0, r0
     436:	14 f7       	brge	.-60     	; 0x3fc <__trampolines_end+0x364>
     438:	00 ff       	sbrs	r16, 0
     43a:	00 00       	nop
     43c:	ff 00       	.word	0x00ff	; ????
     43e:	ff 14       	cp	r15, r15
     440:	14 f4       	brge	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     442:	04 fc       	sbrc	r0, 4
     444:	14 14       	cp	r1, r4
     446:	17 10       	cpse	r1, r7
     448:	1f 10       	cpse	r1, r15
     44a:	10 1f       	adc	r17, r16
     44c:	10 1f       	adc	r17, r16
     44e:	14 14       	cp	r1, r4
     450:	14 1f       	adc	r17, r20
     452:	00 10       	cpse	r0, r0
     454:	10 10       	cpse	r1, r0
     456:	f0 00       	.word	0x00f0	; ????
     458:	00 00       	nop
     45a:	00 1f       	adc	r16, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	1f 10       	cpse	r1, r15
     462:	10 10       	cpse	r1, r0
     464:	10 f0       	brcs	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     466:	10 00       	.word	0x0010	; ????
     468:	00 00       	nop
     46a:	ff 10       	cpse	r15, r15
     46c:	10 10       	cpse	r1, r0
     46e:	10 10       	cpse	r1, r0
     470:	10 10       	cpse	r1, r0
     472:	10 10       	cpse	r1, r0
     474:	ff 10       	cpse	r15, r15
     476:	00 00       	nop
     478:	00 ff       	sbrs	r16, 0
     47a:	14 00       	.word	0x0014	; ????
     47c:	00 ff       	sbrs	r16, 0
     47e:	00 ff       	sbrs	r16, 0
     480:	00 00       	nop
     482:	1f 10       	cpse	r1, r15
     484:	17 00       	.word	0x0017	; ????
     486:	00 fc       	sbrc	r0, 0
     488:	04 f4       	brge	.+0      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     48a:	14 14       	cp	r1, r4
     48c:	17 10       	cpse	r1, r7
     48e:	17 14       	cp	r1, r7
     490:	14 f4       	brge	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	04 f4       	brge	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	00 00       	nop
     496:	ff 00       	.word	0x00ff	; ????
     498:	f7 14       	cp	r15, r7
     49a:	14 14       	cp	r1, r4
     49c:	14 14       	cp	r1, r4
     49e:	14 14       	cp	r1, r4
     4a0:	f7 00       	.word	0x00f7	; ????
     4a2:	f7 14       	cp	r15, r7
     4a4:	14 14       	cp	r1, r4
     4a6:	17 14       	cp	r1, r7
     4a8:	10 10       	cpse	r1, r0
     4aa:	1f 10       	cpse	r1, r15
     4ac:	1f 14       	cp	r1, r15
     4ae:	14 14       	cp	r1, r4
     4b0:	f4 14       	cp	r15, r4
     4b2:	10 10       	cpse	r1, r0
     4b4:	f0 10       	cpse	r15, r0
     4b6:	f0 00       	.word	0x00f0	; ????
     4b8:	00 1f       	adc	r16, r16
     4ba:	10 1f       	adc	r17, r16
     4bc:	00 00       	nop
     4be:	00 1f       	adc	r16, r16
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 00       	nop
     4c4:	fc 14       	cp	r15, r12
     4c6:	00 00       	nop
     4c8:	f0 10       	cpse	r15, r0
     4ca:	f0 10       	cpse	r15, r0
     4cc:	10 ff       	sbrs	r17, 0
     4ce:	10 ff       	sbrs	r17, 0
     4d0:	14 14       	cp	r1, r4
     4d2:	14 ff       	sbrs	r17, 4
     4d4:	14 10       	cpse	r1, r4
     4d6:	10 10       	cpse	r1, r0
     4d8:	1f 00       	.word	0x001f	; ????
     4da:	00 00       	nop
     4dc:	00 f0       	brcs	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4de:	10 ff       	sbrs	r17, 0
     4e0:	ff ff       	.word	0xffff	; ????
     4e2:	ff ff       	.word	0xffff	; ????
     4e4:	f0 f0       	brcs	.+60     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     4e6:	f0 f0       	brcs	.+60     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     4e8:	f0 ff       	sbrs	r31, 0
     4ea:	ff ff       	.word	0xffff	; ????
     4ec:	00 00       	nop
     4ee:	00 00       	nop
     4f0:	00 ff       	sbrs	r16, 0
     4f2:	ff 0f       	add	r31, r31
     4f4:	0f 0f       	add	r16, r31
     4f6:	0f 0f       	add	r16, r31
     4f8:	38 44       	sbci	r19, 0x48	; 72
     4fa:	44 38       	cpi	r20, 0x84	; 132
     4fc:	44 fc       	sbrc	r4, 4
     4fe:	4a 4a       	sbci	r20, 0xAA	; 170
     500:	4a 34       	cpi	r20, 0x4A	; 74
     502:	7e 02       	muls	r23, r30
     504:	02 06       	cpc	r0, r18
     506:	06 02       	muls	r16, r22
     508:	7e 02       	muls	r23, r30
     50a:	7e 02       	muls	r23, r30
     50c:	63 55       	subi	r22, 0x53	; 83
     50e:	49 41       	sbci	r20, 0x19	; 25
     510:	63 38       	cpi	r22, 0x83	; 131
     512:	44 44       	sbci	r20, 0x44	; 68
     514:	3c 04       	cpc	r3, r12
     516:	40 7e       	andi	r20, 0xE0	; 224
     518:	20 1e       	adc	r2, r16
     51a:	20 06       	cpc	r2, r16
     51c:	02 7e       	andi	r16, 0xE2	; 226
     51e:	02 02       	muls	r16, r18
     520:	99 a5       	ldd	r25, Y+41	; 0x29
     522:	e7 a5       	ldd	r30, Z+47	; 0x2f
     524:	99 1c       	adc	r9, r9
     526:	2a 49       	sbci	r18, 0x9A	; 154
     528:	2a 1c       	adc	r2, r10
     52a:	4c 72       	andi	r20, 0x2C	; 44
     52c:	01 72       	andi	r16, 0x21	; 33
     52e:	4c 30       	cpi	r20, 0x0C	; 12
     530:	4a 4d       	sbci	r20, 0xDA	; 218
     532:	4d 30       	cpi	r20, 0x0D	; 13
     534:	30 48       	sbci	r19, 0x80	; 128
     536:	78 48       	sbci	r23, 0x88	; 136
     538:	30 bc       	out	0x20, r3	; 32
     53a:	62 5a       	subi	r22, 0xA2	; 162
     53c:	46 3d       	cpi	r20, 0xD6	; 214
     53e:	3e 49       	sbci	r19, 0x9E	; 158
     540:	49 49       	sbci	r20, 0x99	; 153
     542:	00 7e       	andi	r16, 0xE0	; 224
     544:	01 01       	movw	r0, r2
     546:	01 7e       	andi	r16, 0xE1	; 225
     548:	2a 2a       	or	r2, r26
     54a:	2a 2a       	or	r2, r26
     54c:	2a 44       	sbci	r18, 0x4A	; 74
     54e:	44 5f       	subi	r20, 0xF4	; 244
     550:	44 44       	sbci	r20, 0x44	; 68
     552:	40 51       	subi	r20, 0x10	; 16
     554:	4a 44       	sbci	r20, 0x4A	; 74
     556:	40 40       	sbci	r20, 0x00	; 0
     558:	44 4a       	sbci	r20, 0xA4	; 164
     55a:	51 40       	sbci	r21, 0x01	; 1
     55c:	00 00       	nop
     55e:	ff 01       	movw	r30, r30
     560:	03 e0       	ldi	r16, 0x03	; 3
     562:	80 ff       	sbrs	r24, 0
     564:	00 00       	nop
     566:	08 08       	sbc	r0, r8
     568:	6b 6b       	ori	r22, 0xBB	; 187
     56a:	08 36       	cpi	r16, 0x68	; 104
     56c:	12 36       	cpi	r17, 0x62	; 98
     56e:	24 36       	cpi	r18, 0x64	; 100
     570:	06 0f       	add	r16, r22
     572:	09 0f       	add	r16, r25
     574:	06 00       	.word	0x0006	; ????
     576:	00 18       	sub	r0, r0
     578:	18 00       	.word	0x0018	; ????
     57a:	00 00       	nop
     57c:	10 10       	cpse	r1, r0
     57e:	00 30       	cpi	r16, 0x00	; 0
     580:	40 ff       	sbrs	r20, 0
     582:	01 01       	movw	r0, r2
     584:	00 1f       	adc	r16, r16
     586:	01 01       	movw	r0, r2
     588:	1e 00       	.word	0x001e	; ????
     58a:	19 1d       	adc	r17, r9
     58c:	17 12       	cpse	r1, r23
     58e:	00 3c       	cpi	r16, 0xC0	; 192
     590:	3c 3c       	cpi	r19, 0xCC	; 204
     592:	3c 00       	.word	0x003c	; ????
     594:	00 00       	nop
	...

00000598 <gamma6>:
     598:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5a8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5b8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     5c8:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

000005d8 <gamma5>:
     5d8:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     5e8:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

000005f8 <RainbowColors_p>:
     5f8:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     608:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     618:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     628:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

00000638 <digital_pin_table_PGM>:
     638:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     648:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     658:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     668:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     678:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     688:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000694 <descriptor_list>:
     694:	00 01 00 00 45 07 12 00 02 00 00 02 07 43 00 03     ....E........C..
     6a4:	00 00 fe 06 04 01 03 09 04 e4 06 18 02 03 09 04     ................
     6b4:	cc 06 16 03 03 09 04 be 06 0c                       ..........

000006be <string3>:
     6be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000006cc <string2>:
     6cc:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     6dc:	69 00 61 00 6c 00 00 00                             i.a.l...

000006e4 <string1>:
     6e4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     6f4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000006fe <string0>:
     6fe:	04 03 09 04                                         ....

00000702 <config1_descriptor>:
     702:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     712:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     722:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     732:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     742:	40 00 00                                            @..

00000745 <device_descriptor>:
     745:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     755:	03 01                                               ..

00000757 <endpoint_config_table>:
     757:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000762 <__ctors_start>:
     762:	d9 17       	cp	r29, r25
     764:	4d 26       	eor	r4, r29
     766:	d0 2d       	mov	r29, r0
     768:	95 30       	cpi	r25, 0x05	; 5

0000076a <__ctors_end>:
     76a:	54 18       	sub	r5, r4

0000076c <__dtors_end>:
     76c:	11 24       	eor	r1, r1
     76e:	1f be       	out	0x3f, r1	; 63
     770:	cf ef       	ldi	r28, 0xFF	; 255
     772:	d0 e2       	ldi	r29, 0x20	; 32
     774:	de bf       	out	0x3e, r29	; 62
     776:	cd bf       	out	0x3d, r28	; 61

00000778 <__do_copy_data>:
     778:	17 e0       	ldi	r17, 0x07	; 7
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b1 e0       	ldi	r27, 0x01	; 1
     77e:	e6 e7       	ldi	r30, 0x76	; 118
     780:	f9 e6       	ldi	r31, 0x69	; 105
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	0b bf       	out	0x3b, r16	; 59
     786:	02 c0       	rjmp	.+4      	; 0x78c <__do_copy_data+0x14>
     788:	07 90       	elpm	r0, Z+
     78a:	0d 92       	st	X+, r0
     78c:	a8 39       	cpi	r26, 0x98	; 152
     78e:	b1 07       	cpc	r27, r17
     790:	d9 f7       	brne	.-10     	; 0x788 <__do_copy_data+0x10>

00000792 <__do_clear_bss>:
     792:	2f e0       	ldi	r18, 0x0F	; 15
     794:	a8 e9       	ldi	r26, 0x98	; 152
     796:	b7 e0       	ldi	r27, 0x07	; 7
     798:	01 c0       	rjmp	.+2      	; 0x79c <.do_clear_bss_start>

0000079a <.do_clear_bss_loop>:
     79a:	1d 92       	st	X+, r1

0000079c <.do_clear_bss_start>:
     79c:	a9 31       	cpi	r26, 0x19	; 25
     79e:	b2 07       	cpc	r27, r18
     7a0:	e1 f7       	brne	.-8      	; 0x79a <.do_clear_bss_loop>

000007a2 <__do_global_ctors>:
     7a2:	13 e0       	ldi	r17, 0x03	; 3
     7a4:	c5 eb       	ldi	r28, 0xB5	; 181
     7a6:	d3 e0       	ldi	r29, 0x03	; 3
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <__do_global_ctors+0x10>
     7aa:	21 97       	sbiw	r28, 0x01	; 1
     7ac:	fe 01       	movw	r30, r28
     7ae:	0e 94 c4 33 	call	0x6788	; 0x6788 <__tablejump2__>
     7b2:	c1 3b       	cpi	r28, 0xB1	; 177
     7b4:	d1 07       	cpc	r29, r17
     7b6:	c9 f7       	brne	.-14     	; 0x7aa <__do_global_ctors+0x8>
     7b8:	0e 94 e1 2d 	call	0x5bc2	; 0x5bc2 <main>
     7bc:	0c 94 af 34 	jmp	0x695e	; 0x695e <__do_global_dtors>

000007c0 <__bad_interrupt>:
     7c0:	1f cc       	rjmp	.-1986   	; 0x0 <__vectors>

000007c2 <CLEDController::size()>:
        if (secondHand == 15) { currentPalette = RainbowStripeColors_p;   currentBlending = LINEARBLEND; }
        if (secondHand == 20) { SetupPurpleAndGreenPalette();             currentBlending = LINEARBLEND; }
        if (secondHand == 25) { SetupTotallyRandomPalette();              currentBlending = LINEARBLEND; }
        if (secondHand == 30) { SetupBlackAndWhiteStripedPalette();       currentBlending = NOBLEND; }
        if (secondHand == 35) { SetupBlackAndWhiteStripedPalette();       currentBlending = LINEARBLEND; }
        if (secondHand == 40) { currentPalette = CloudColors_p;           currentBlending = LINEARBLEND; }
     7c2:	fc 01       	movw	r30, r24
     7c4:	85 85       	ldd	r24, Z+13	; 0x0d
     7c6:	96 85       	ldd	r25, Z+14	; 0x0e
     7c8:	08 95       	ret

000007ca <CLEDController::clearLeds(int)>:
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <CLEDController::clearLeds(int)+0x6>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <CLEDController::clearLeds(int)+0x8>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <CLEDController::clearLeds(int)+0xa>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	ab 01       	movw	r20, r22
     7da:	1c 82       	std	Y+4, r1	; 0x04
     7dc:	1d 82       	std	Y+5, r1	; 0x05
     7de:	1e 82       	std	Y+6, r1	; 0x06
     7e0:	dc 01       	movw	r26, r24
     7e2:	ed 91       	ld	r30, X+
     7e4:	fc 91       	ld	r31, X
     7e6:	01 90       	ld	r0, Z+
     7e8:	f0 81       	ld	r31, Z
     7ea:	e0 2d       	mov	r30, r0
     7ec:	19 82       	std	Y+1, r1	; 0x01
     7ee:	1a 82       	std	Y+2, r1	; 0x02
     7f0:	1b 82       	std	Y+3, r1	; 0x03
     7f2:	9e 01       	movw	r18, r28
     7f4:	2f 5f       	subi	r18, 0xFF	; 255
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
     7f8:	be 01       	movw	r22, r28
     7fa:	6c 5f       	subi	r22, 0xFC	; 252
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	09 95       	icall
     800:	26 96       	adiw	r28, 0x06	; 6
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <myRemapFn(unsigned int, unsigned int)>:
     812:	67 31       	cpi	r22, 0x17	; 23
     814:	71 05       	cpc	r23, r1
     816:	08 f0       	brcs	.+2      	; 0x81a <myRemapFn(unsigned int, unsigned int)+0x8>
     818:	ef c0       	rjmp	.+478    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     81a:	fb 01       	movw	r30, r22
     81c:	ee 5e       	subi	r30, 0xEE	; 238
     81e:	fb 4f       	sbci	r31, 0xFB	; 251
     820:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__tablejump2__>
     824:	29 04       	cpc	r2, r9
     826:	34 04       	cpc	r3, r4
     828:	3c 04       	cpc	r3, r12
     82a:	49 04       	cpc	r4, r9
     82c:	54 04       	cpc	r5, r4
     82e:	5b 04       	cpc	r5, r11
     830:	62 04       	cpc	r6, r2
     832:	69 04       	cpc	r6, r9
     834:	73 04       	cpc	r7, r3
     836:	7d 04       	cpc	r7, r13
     838:	87 04       	cpc	r8, r7
     83a:	91 04       	cpc	r9, r1
     83c:	9b 04       	cpc	r9, r11
     83e:	a5 04       	cpc	r10, r5
     840:	af 04       	cpc	r10, r15
     842:	b7 04       	cpc	r11, r7
     844:	bf 04       	cpc	r11, r15
     846:	c6 04       	cpc	r12, r6
     848:	cd 04       	cpc	r12, r13
     84a:	d4 04       	cpc	r13, r4
     84c:	de 04       	cpc	r13, r14
     84e:	e8 04       	cpc	r14, r8
     850:	f2 04       	cpc	r15, r2
     852:	04 97       	sbiw	r24, 0x04	; 4
     854:	83 30       	cpi	r24, 0x03	; 3
     856:	91 05       	cpc	r25, r1
     858:	08 f0       	brcs	.+2      	; 0x85c <myRemapFn(unsigned int, unsigned int)+0x4a>
     85a:	ce c0       	rjmp	.+412    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     85c:	80 5a       	subi	r24, 0xA0	; 160
     85e:	9c 4f       	sbci	r25, 0xFC	; 252
     860:	fc 01       	movw	r30, r24
     862:	80 81       	ld	r24, Z
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret
     868:	02 97       	sbiw	r24, 0x02	; 2
     86a:	86 30       	cpi	r24, 0x06	; 6
     86c:	91 05       	cpc	r25, r1
     86e:	08 f0       	brcs	.+2      	; 0x872 <myRemapFn(unsigned int, unsigned int)+0x60>
     870:	c3 c0       	rjmp	.+390    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     872:	86 5a       	subi	r24, 0xA6	; 166
     874:	9c 4f       	sbci	r25, 0xFC	; 252
     876:	f4 cf       	rjmp	.-24     	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	83 31       	cpi	r24, 0x13	; 19
     87c:	91 05       	cpc	r25, r1
     87e:	08 f0       	brcs	.+2      	; 0x882 <myRemapFn(unsigned int, unsigned int)+0x70>
     880:	bb c0       	rjmp	.+374    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	fc 01       	movw	r30, r24
     888:	ec 5c       	subi	r30, 0xCC	; 204
     88a:	fc 4f       	sbci	r31, 0xFC	; 252
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	08 95       	ret
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	85 31       	cpi	r24, 0x15	; 21
     896:	91 05       	cpc	r25, r1
     898:	08 f0       	brcs	.+2      	; 0x89c <myRemapFn(unsigned int, unsigned int)+0x8a>
     89a:	ae c0       	rjmp	.+348    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	fc 01       	movw	r30, r24
     8a2:	e6 5f       	subi	r30, 0xF6	; 246
     8a4:	fc 4f       	sbci	r31, 0xFC	; 252
     8a6:	f2 cf       	rjmp	.-28     	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     8a8:	84 31       	cpi	r24, 0x14	; 20
     8aa:	91 05       	cpc	r25, r1
     8ac:	08 f0       	brcs	.+2      	; 0x8b0 <myRemapFn(unsigned int, unsigned int)+0x9e>
     8ae:	a4 c0       	rjmp	.+328    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8b0:	8a 50       	subi	r24, 0x0A	; 10
     8b2:	9d 4f       	sbci	r25, 0xFD	; 253
     8b4:	d5 cf       	rjmp	.-86     	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     8b6:	84 31       	cpi	r24, 0x14	; 20
     8b8:	91 05       	cpc	r25, r1
     8ba:	08 f0       	brcs	.+2      	; 0x8be <myRemapFn(unsigned int, unsigned int)+0xac>
     8bc:	9d c0       	rjmp	.+314    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8be:	8e 51       	subi	r24, 0x1E	; 30
     8c0:	9d 4f       	sbci	r25, 0xFD	; 253
     8c2:	ce cf       	rjmp	.-100    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     8c4:	8f 30       	cpi	r24, 0x0F	; 15
     8c6:	91 05       	cpc	r25, r1
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <myRemapFn(unsigned int, unsigned int)+0xba>
     8ca:	96 c0       	rjmp	.+300    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8cc:	8d 52       	subi	r24, 0x2D	; 45
     8ce:	9d 4f       	sbci	r25, 0xFD	; 253
     8d0:	c7 cf       	rjmp	.-114    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     8d2:	8f 30       	cpi	r24, 0x0F	; 15
     8d4:	91 05       	cpc	r25, r1
     8d6:	08 f0       	brcs	.+2      	; 0x8da <myRemapFn(unsigned int, unsigned int)+0xc8>
     8d8:	8f c0       	rjmp	.+286    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	fc 01       	movw	r30, r24
     8e0:	eb 54       	subi	r30, 0x4B	; 75
     8e2:	fd 4f       	sbci	r31, 0xFD	; 253
     8e4:	d3 cf       	rjmp	.-90     	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     8e6:	8f 30       	cpi	r24, 0x0F	; 15
     8e8:	91 05       	cpc	r25, r1
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <myRemapFn(unsigned int, unsigned int)+0xdc>
     8ec:	85 c0       	rjmp	.+266    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	fc 01       	movw	r30, r24
     8f4:	e9 56       	subi	r30, 0x69	; 105
     8f6:	fd 4f       	sbci	r31, 0xFD	; 253
     8f8:	c9 cf       	rjmp	.-110    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     8fa:	8f 30       	cpi	r24, 0x0F	; 15
     8fc:	91 05       	cpc	r25, r1
     8fe:	08 f0       	brcs	.+2      	; 0x902 <myRemapFn(unsigned int, unsigned int)+0xf0>
     900:	7b c0       	rjmp	.+246    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	fc 01       	movw	r30, r24
     908:	e7 58       	subi	r30, 0x87	; 135
     90a:	fd 4f       	sbci	r31, 0xFD	; 253
     90c:	bf cf       	rjmp	.-130    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     90e:	8f 30       	cpi	r24, 0x0F	; 15
     910:	91 05       	cpc	r25, r1
     912:	08 f0       	brcs	.+2      	; 0x916 <myRemapFn(unsigned int, unsigned int)+0x104>
     914:	71 c0       	rjmp	.+226    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	fc 01       	movw	r30, r24
     91c:	e5 5a       	subi	r30, 0xA5	; 165
     91e:	fd 4f       	sbci	r31, 0xFD	; 253
     920:	b5 cf       	rjmp	.-150    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     922:	8f 30       	cpi	r24, 0x0F	; 15
     924:	91 05       	cpc	r25, r1
     926:	08 f0       	brcs	.+2      	; 0x92a <myRemapFn(unsigned int, unsigned int)+0x118>
     928:	67 c0       	rjmp	.+206    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	fc 01       	movw	r30, r24
     930:	e3 5c       	subi	r30, 0xC3	; 195
     932:	fd 4f       	sbci	r31, 0xFD	; 253
     934:	ab cf       	rjmp	.-170    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     936:	8f 30       	cpi	r24, 0x0F	; 15
     938:	91 05       	cpc	r25, r1
     93a:	08 f0       	brcs	.+2      	; 0x93e <myRemapFn(unsigned int, unsigned int)+0x12c>
     93c:	5d c0       	rjmp	.+186    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	fc 01       	movw	r30, r24
     944:	e1 5e       	subi	r30, 0xE1	; 225
     946:	fd 4f       	sbci	r31, 0xFD	; 253
     948:	a1 cf       	rjmp	.-190    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     94a:	8f 30       	cpi	r24, 0x0F	; 15
     94c:	91 05       	cpc	r25, r1
     94e:	08 f0       	brcs	.+2      	; 0x952 <myRemapFn(unsigned int, unsigned int)+0x140>
     950:	53 c0       	rjmp	.+166    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	fc 01       	movw	r30, r24
     958:	ef 5f       	subi	r30, 0xFF	; 255
     95a:	fd 4f       	sbci	r31, 0xFD	; 253
     95c:	97 cf       	rjmp	.-210    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	8e 30       	cpi	r24, 0x0E	; 14
     962:	91 05       	cpc	r25, r1
     964:	08 f0       	brcs	.+2      	; 0x968 <myRemapFn(unsigned int, unsigned int)+0x156>
     966:	48 c0       	rjmp	.+144    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     968:	8d 50       	subi	r24, 0x0D	; 13
     96a:	9e 4f       	sbci	r25, 0xFE	; 254
     96c:	79 cf       	rjmp	.-270    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     96e:	02 97       	sbiw	r24, 0x02	; 2
     970:	81 31       	cpi	r24, 0x11	; 17
     972:	91 05       	cpc	r25, r1
     974:	08 f0       	brcs	.+2      	; 0x978 <myRemapFn(unsigned int, unsigned int)+0x166>
     976:	40 c0       	rjmp	.+128    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     978:	8e 51       	subi	r24, 0x1E	; 30
     97a:	9e 4f       	sbci	r25, 0xFE	; 254
     97c:	71 cf       	rjmp	.-286    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	82 31       	cpi	r24, 0x12	; 18
     982:	91 05       	cpc	r25, r1
     984:	c8 f5       	brcc	.+114    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     986:	80 53       	subi	r24, 0x30	; 48
     988:	9e 4f       	sbci	r25, 0xFE	; 254
     98a:	6a cf       	rjmp	.-300    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	83 31       	cpi	r24, 0x13	; 19
     990:	91 05       	cpc	r25, r1
     992:	90 f5       	brcc	.+100    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     994:	83 54       	subi	r24, 0x43	; 67
     996:	9e 4f       	sbci	r25, 0xFE	; 254
     998:	63 cf       	rjmp	.-314    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	84 31       	cpi	r24, 0x14	; 20
     99e:	91 05       	cpc	r25, r1
     9a0:	58 f5       	brcc	.+86     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9a2:	87 55       	subi	r24, 0x57	; 87
     9a4:	9e 4f       	sbci	r25, 0xFE	; 254
     9a6:	5c cf       	rjmp	.-328    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	83 31       	cpi	r24, 0x13	; 19
     9ac:	91 05       	cpc	r25, r1
     9ae:	20 f5       	brcc	.+72     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	fc 01       	movw	r30, r24
     9b6:	ed 57       	subi	r30, 0x7D	; 125
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	68 cf       	rjmp	.-304    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9bc:	02 97       	sbiw	r24, 0x02	; 2
     9be:	87 30       	cpi	r24, 0x07	; 7
     9c0:	91 05       	cpc	r25, r1
     9c2:	d0 f4       	brcc	.+52     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	fc 01       	movw	r30, r24
     9ca:	eb 58       	subi	r30, 0x8B	; 139
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	5e cf       	rjmp	.-324    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9d0:	03 97       	sbiw	r24, 0x03	; 3
     9d2:	85 30       	cpi	r24, 0x05	; 5
     9d4:	91 05       	cpc	r25, r1
     9d6:	80 f4       	brcc	.+32     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	fc 01       	movw	r30, r24
     9de:	e5 59       	subi	r30, 0x95	; 149
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	54 cf       	rjmp	.-344    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e4:	04 97       	sbiw	r24, 0x04	; 4
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	91 05       	cpc	r25, r1
     9ea:	30 f4       	brcc	.+12     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	fc 01       	movw	r30, r24
     9f2:	eb 59       	subi	r30, 0x9B	; 155
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	4a cf       	rjmp	.-364    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9f8:	8c e2       	ldi	r24, 0x2C	; 44
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	08 95       	ret

000009fe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     9fe:	80 e9       	ldi	r24, 0x90	; 144
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	08 95       	ret

00000a04 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     a04:	3a 9a       	sbi	0x07, 2	; 7
     a06:	08 95       	ret

00000a08 <Print::write(char const*)>:
     a08:	fb 01       	movw	r30, r22
     a0a:	01 90       	ld	r0, Z+
     a0c:	00 20       	and	r0, r0
     a0e:	e9 f7       	brne	.-6      	; 0xa0a <Print::write(char const*)+0x2>
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	af 01       	movw	r20, r30
     a14:	46 1b       	sub	r20, r22
     a16:	57 0b       	sbc	r21, r23
     a18:	dc 01       	movw	r26, r24
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	02 80       	ldd	r0, Z+2	; 0x02
     a20:	f3 81       	ldd	r31, Z+3	; 0x03
     a22:	e0 2d       	mov	r30, r0
     a24:	09 94       	ijmp

00000a26 <Print::print(char const*)>:
     a26:	f0 cf       	rjmp	.-32     	; 0xa08 <Print::write(char const*)>

00000a28 <Print::print(unsigned char)>:
     a28:	46 2f       	mov	r20, r22
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	0c 94 8d 2e 	jmp	0x5d1a	; 0x5d1a <Print::printNumberDec(unsigned long, unsigned char)>

00000a36 <Print::println(unsigned char)>:
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
     a40:	f3 df       	rcall	.-26     	; 0xa28 <Print::print(unsigned char)>
     a42:	8c 01       	movw	r16, r24
     a44:	ce 01       	movw	r24, r28
     a46:	0e 94 73 2e 	call	0x5ce6	; 0x5ce6 <Print::println()>
     a4a:	80 0f       	add	r24, r16
     a4c:	91 1f       	adc	r25, r17
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	dc 01       	movw	r26, r24
     a5e:	ac 01       	movw	r20, r24
     a60:	40 5d       	subi	r20, 0xD0	; 208
     a62:	5f 4f       	sbci	r21, 0xFF	; 255
     a64:	fb 01       	movw	r30, r22
     a66:	05 91       	lpm	r16, Z+
     a68:	15 91       	lpm	r17, Z+
     a6a:	25 91       	lpm	r18, Z+
     a6c:	34 91       	lpm	r19, Z
     a6e:	2c 93       	st	X, r18
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	1c 93       	st	X, r17
     a74:	11 97       	sbiw	r26, 0x01	; 1
     a76:	12 96       	adiw	r26, 0x02	; 2
     a78:	0c 93       	st	X, r16
     a7a:	12 97       	sbiw	r26, 0x02	; 2
     a7c:	6c 5f       	subi	r22, 0xFC	; 252
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	13 96       	adiw	r26, 0x03	; 3
     a82:	a4 17       	cp	r26, r20
     a84:	b5 07       	cpc	r27, r21
     a86:	71 f7       	brne	.-36     	; 0xa64 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <CFastLED::show()>:
     a8e:	fc 01       	movw	r30, r24
     a90:	60 81       	ld	r22, Z
     a92:	0c 94 95 24 	jmp	0x492a	; 0x492a <CFastLED::show(unsigned char)>

00000a96 <CFastLED::showColor(CRGB const&)>:
     a96:	fc 01       	movw	r30, r24
     a98:	40 81       	ld	r20, Z
     a9a:	0c 94 25 25 	jmp	0x4a4a	; 0x4a4a <CFastLED::showColor(CRGB const&, unsigned char)>

00000a9e <Framebuffer_GFX::clear()>:
     a9e:	dc 01       	movw	r26, r24
     aa0:	ed 91       	ld	r30, X+
     aa2:	fc 91       	ld	r31, X
     aa4:	02 a0       	ldd	r0, Z+34	; 0x22
     aa6:	f3 a1       	ldd	r31, Z+35	; 0x23
     aa8:	e0 2d       	mov	r30, r0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	09 94       	ijmp

00000ab0 <getRandomColorValue()>:
     ab0:	24 e0       	ldi	r18, 0x04	; 4
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
     ac4:	62 30       	cpi	r22, 0x02	; 2
     ac6:	71 05       	cpc	r23, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <getRandomColorValue()+0x26>
     aca:	63 30       	cpi	r22, 0x03	; 3
     acc:	71 05       	cpc	r23, r1
     ace:	31 f0       	breq	.+12     	; 0xadc <getRandomColorValue()+0x2c>
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	08 95       	ret
     ad6:	8f e7       	ldi	r24, 0x7F	; 127
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	08 95       	ret
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	08 95       	ret

00000ae2 <getRandomColor()>:
     ae2:	27 e0       	ldi	r18, 0x07	; 7
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
     af6:	61 50       	subi	r22, 0x01	; 1
     af8:	71 09       	sbc	r23, r1
     afa:	67 30       	cpi	r22, 0x07	; 7
     afc:	71 05       	cpc	r23, r1
     afe:	40 f4       	brcc	.+16     	; 0xb10 <getRandomColor()+0x2e>
     b00:	66 0f       	add	r22, r22
     b02:	77 1f       	adc	r23, r23
     b04:	fb 01       	movw	r30, r22
     b06:	e9 5a       	subi	r30, 0xA9	; 169
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	08 95       	ret
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	08 95       	ret

00000b16 <getRandomColorIncludingBlack()>:
     b16:	29 e0       	ldi	r18, 0x09	; 9
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
     b2a:	61 50       	subi	r22, 0x01	; 1
     b2c:	71 09       	sbc	r23, r1
     b2e:	67 30       	cpi	r22, 0x07	; 7
     b30:	71 05       	cpc	r23, r1
     b32:	40 f4       	brcc	.+16     	; 0xb44 <getRandomColorIncludingBlack()+0x2e>
     b34:	66 0f       	add	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	fb 01       	movw	r30, r22
     b3a:	e7 5b       	subi	r30, 0xB7	; 183
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	08 95       	ret
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	08 95       	ret

00000b4a <progBlingBlingColoring(unsigned int, unsigned char)>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	8c 01       	movw	r16, r24
     b54:	c6 2f       	mov	r28, r22
     b56:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
     b5a:	81 11       	cpse	r24, r1
     b5c:	0e c0       	rjmp	.+28     	; 0xb7a <progBlingBlingColoring(unsigned int, unsigned char)+0x30>
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	8d e7       	ldi	r24, 0x7D	; 125
     b62:	9e e0       	ldi	r25, 0x0E	; 14
     b64:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
     b68:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     b6c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     b70:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <nextSongPart>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
     b7a:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <progBlingBlingColoring_rounds>
     b7e:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <progBlingBlingColoring_rounds+0x1>
     b82:	89 2b       	or	r24, r25
     b84:	49 f4       	brne	.+18     	; 0xb98 <progBlingBlingColoring(unsigned int, unsigned char)+0x4e>
     b86:	94 df       	rcall	.-216    	; 0xab0 <getRandomColorValue()>
     b88:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <r>
     b8c:	91 df       	rcall	.-222    	; 0xab0 <getRandomColorValue()>
     b8e:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <g>
     b92:	8e df       	rcall	.-228    	; 0xab0 <getRandomColorValue()>
     b94:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <b>
     b98:	c0 91 29 08 	lds	r28, 0x0829	; 0x800829 <b>
     b9c:	d0 91 2a 08 	lds	r29, 0x082A	; 0x80082a <g>
     ba0:	10 91 2b 08 	lds	r17, 0x082B	; 0x80082b <r>
     ba4:	26 e1       	ldi	r18, 0x16	; 22
     ba6:	31 e0       	ldi	r19, 0x01	; 1
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	cb 01       	movw	r24, r22
     bb2:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
     bb6:	fb 01       	movw	r30, r22
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	e6 0f       	add	r30, r22
     bbe:	f7 1f       	adc	r31, r23
     bc0:	e2 58       	subi	r30, 0x82	; 130
     bc2:	f7 4f       	sbci	r31, 0xF7	; 247
     bc4:	10 83       	st	Z, r17
     bc6:	d1 83       	std	Z+1, r29	; 0x01
     bc8:	c2 83       	std	Z+2, r28	; 0x02
     bca:	23 e0       	ldi	r18, 0x03	; 3
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	cb 01       	movw	r24, r22
     bd8:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
     bdc:	61 30       	cpi	r22, 0x01	; 1
     bde:	71 05       	cpc	r23, r1
     be0:	81 05       	cpc	r24, r1
     be2:	91 05       	cpc	r25, r1
     be4:	99 f4       	brne	.+38     	; 0xc0c <progBlingBlingColoring(unsigned int, unsigned char)+0xc2>
     be6:	26 e1       	ldi	r18, 0x16	; 22
     be8:	31 e0       	ldi	r19, 0x01	; 1
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	cb 01       	movw	r24, r22
     bf4:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
     bf8:	fb 01       	movw	r30, r22
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	e6 0f       	add	r30, r22
     c00:	f7 1f       	adc	r31, r23
     c02:	e2 58       	subi	r30, 0x82	; 130
     c04:	f7 4f       	sbci	r31, 0xF7	; 247
     c06:	10 82       	st	Z, r1
     c08:	11 82       	std	Z+1, r1	; 0x01
     c0a:	12 82       	std	Z+2, r1	; 0x02
     c0c:	8d e7       	ldi	r24, 0x7D	; 125
     c0e:	9e e0       	ldi	r25, 0x0E	; 14
     c10:	3e df       	rcall	.-388    	; 0xa8e <CFastLED::show()>
     c12:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
     c16:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
     c1a:	88 39       	cpi	r24, 0x98	; 152
     c1c:	9a 43       	sbci	r25, 0x3A	; 58
     c1e:	f0 f0       	brcs	.+60     	; 0xc5c <progBlingBlingColoring(unsigned int, unsigned char)+0x112>
     c20:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
     c24:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	0e 94 a2 28 	call	0x5144	; 0x5144 <analogRead>
     c2e:	0e 94 a8 30 	call	0x6150	; 0x6150 <randomSeed(unsigned int)>
     c32:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <progBlingBlingColoring_rounds>
     c36:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <progBlingBlingColoring_rounds+0x1>
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	91 05       	cpc	r25, r1
     c40:	91 f0       	breq	.+36     	; 0xc66 <progBlingBlingColoring(unsigned int, unsigned char)+0x11c>
     c42:	90 93 28 08 	sts	0x0828, r25	; 0x800828 <progBlingBlingColoring_rounds+0x1>
     c46:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <progBlingBlingColoring_rounds>
     c4a:	32 df       	rcall	.-412    	; 0xab0 <getRandomColorValue()>
     c4c:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <r>
     c50:	2f df       	rcall	.-418    	; 0xab0 <getRandomColorValue()>
     c52:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <g>
     c56:	2c df       	rcall	.-424    	; 0xab0 <getRandomColorValue()>
     c58:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <b>
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	eb cf       	rjmp	.-42     	; 0xc42 <progBlingBlingColoring(unsigned int, unsigned char)+0xf8>

00000c6c <progFastBlingBling(unsigned int, unsigned char)>:
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	8c 01       	movw	r16, r24
     c76:	c6 2f       	mov	r28, r22
     c78:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
     c7c:	81 11       	cpse	r24, r1
     c7e:	0e c0       	rjmp	.+28     	; 0xc9c <progFastBlingBling(unsigned int, unsigned char)+0x30>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	8d e7       	ldi	r24, 0x7D	; 125
     c84:	9e e0       	ldi	r25, 0x0E	; 14
     c86:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
     c8a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     c8e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     c92:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <nextSongPart>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	8d e7       	ldi	r24, 0x7D	; 125
     ca0:	9e e0       	ldi	r25, 0x0E	; 14
     ca2:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <FastLED>
     cac:	01 df       	rcall	.-510    	; 0xab0 <getRandomColorValue()>
     cae:	c8 2f       	mov	r28, r24
     cb0:	ff de       	rcall	.-514    	; 0xab0 <getRandomColorValue()>
     cb2:	d8 2f       	mov	r29, r24
     cb4:	fd de       	rcall	.-518    	; 0xab0 <getRandomColorValue()>
     cb6:	18 2f       	mov	r17, r24
     cb8:	26 e1       	ldi	r18, 0x16	; 22
     cba:	31 e0       	ldi	r19, 0x01	; 1
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	cb 01       	movw	r24, r22
     cc6:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
     cca:	fb 01       	movw	r30, r22
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	e6 0f       	add	r30, r22
     cd2:	f7 1f       	adc	r31, r23
     cd4:	e2 58       	subi	r30, 0x82	; 130
     cd6:	f7 4f       	sbci	r31, 0xF7	; 247
     cd8:	10 83       	st	Z, r17
     cda:	d1 83       	std	Z+1, r29	; 0x01
     cdc:	c2 83       	std	Z+2, r28	; 0x02
     cde:	8d e7       	ldi	r24, 0x7D	; 125
     ce0:	9e e0       	ldi	r25, 0x0E	; 14
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	d1 ce       	rjmp	.-606    	; 0xa8e <CFastLED::show()>

00000cec <progFullColors(unsigned int, unsigned char, unsigned int)>:
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	6c 01       	movw	r12, r24
     d04:	f6 2e       	mov	r15, r22
     d06:	8a 01       	movw	r16, r20
     d08:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
     d0c:	81 11       	cpse	r24, r1
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	8d e7       	ldi	r24, 0x7D	; 125
     d14:	9e e0       	ldi	r25, 0x0E	; 14
     d16:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
     d1a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     d1e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     d22:	f0 92 69 08 	sts	0x0869, r15	; 0x800869 <nextSongPart>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
     d2c:	10 93 71 08 	sts	0x0871, r17	; 0x800871 <millisCounterTimer+0x1>
     d30:	00 93 70 08 	sts	0x0870, r16	; 0x800870 <millisCounterTimer>
     d34:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
     d38:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
     d3c:	80 17       	cp	r24, r16
     d3e:	91 07       	cpc	r25, r17
     d40:	78 f1       	brcs	.+94     	; 0xda0 <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     d42:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
     d46:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
     d4a:	b2 de       	rcall	.-668    	; 0xab0 <getRandomColorValue()>
     d4c:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <r>
     d50:	af de       	rcall	.-674    	; 0xab0 <getRandomColorValue()>
     d52:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <g>
     d56:	ac de       	rcall	.-680    	; 0xab0 <getRandomColorValue()>
     d58:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <b>
     d5c:	90 91 2b 08 	lds	r25, 0x082B	; 0x80082b <r>
     d60:	91 11       	cpse	r25, r1
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     d64:	90 91 2a 08 	lds	r25, 0x082A	; 0x80082a <g>
     d68:	91 11       	cpse	r25, r1
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     d6c:	81 11       	cpse	r24, r1
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     d70:	9f de       	rcall	.-706    	; 0xab0 <getRandomColorValue()>
     d72:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <r>
     d76:	9c de       	rcall	.-712    	; 0xab0 <getRandomColorValue()>
     d78:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <g>
     d7c:	99 de       	rcall	.-718    	; 0xab0 <getRandomColorValue()>
     d7e:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <b>
     d82:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <b>
     d86:	90 91 2a 08 	lds	r25, 0x082A	; 0x80082a <g>
     d8a:	20 91 2b 08 	lds	r18, 0x082B	; 0x80082b <r>
     d8e:	29 83       	std	Y+1, r18	; 0x01
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	be 01       	movw	r22, r28
     d96:	6f 5f       	subi	r22, 0xFF	; 255
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	8d e7       	ldi	r24, 0x7D	; 125
     d9c:	9e e0       	ldi	r25, 0x0E	; 14
     d9e:	7b de       	rcall	.-778    	; 0xa96 <CFastLED::showColor(CRGB const&)>
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	08 95       	ret

00000db6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	5c 01       	movw	r10, r24
     dd4:	f6 2e       	mov	r15, r22
     dd6:	6a 01       	movw	r12, r20
     dd8:	12 2f       	mov	r17, r18
     dda:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
     dde:	81 11       	cpse	r24, r1
     de0:	12 c0       	rjmp	.+36     	; 0xe06 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	8d e7       	ldi	r24, 0x7D	; 125
     de6:	9e e0       	ldi	r25, 0x0E	; 14
     de8:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
     dec:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     df0:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     df4:	f0 92 69 08 	sts	0x0869, r15	; 0x800869 <nextSongPart>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
     dfe:	d0 92 71 08 	sts	0x0871, r13	; 0x800871 <millisCounterTimer+0x1>
     e02:	c0 92 70 08 	sts	0x0870, r12	; 0x800870 <millisCounterTimer>
     e06:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
     e0a:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
     e0e:	8c 15       	cp	r24, r12
     e10:	9d 05       	cpc	r25, r13
     e12:	98 f0       	brcs	.+38     	; 0xe3a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     e14:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
     e18:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
     e1c:	80 91 73 08 	lds	r24, 0x0873	; 0x800873 <progStroboIsBlack>
     e20:	88 23       	and	r24, r24
     e22:	c9 f0       	breq	.+50     	; 0xe56 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     e24:	19 83       	std	Y+1, r17	; 0x01
     e26:	0a 83       	std	Y+2, r16	; 0x02
     e28:	eb 82       	std	Y+3, r14	; 0x03
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8d e7       	ldi	r24, 0x7D	; 125
     e32:	9e e0       	ldi	r25, 0x0E	; 14
     e34:	30 de       	rcall	.-928    	; 0xa96 <CFastLED::showColor(CRGB const&)>
     e36:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <progStroboIsBlack>
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	af 90       	pop	r10
     e54:	08 95       	ret
     e56:	19 82       	std	Y+1, r1	; 0x01
     e58:	1a 82       	std	Y+2, r1	; 0x02
     e5a:	1b 82       	std	Y+3, r1	; 0x03
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	8d e7       	ldi	r24, 0x7D	; 125
     e64:	9e e0       	ldi	r25, 0x0E	; 14
     e66:	17 de       	rcall	.-978    	; 0xa96 <CFastLED::showColor(CRGB const&)>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 73 08 	sts	0x0873, r24	; 0x800873 <progStroboIsBlack>
     e6e:	e5 cf       	rjmp	.-54     	; 0xe3a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

00000e70 <progMatrixScanner(unsigned int, unsigned char)>:
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	8c 01       	movw	r16, r24
     e7c:	c6 2f       	mov	r28, r22
     e7e:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
     e82:	81 11       	cpse	r24, r1
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <progMatrixScanner(unsigned int, unsigned char)+0x32>
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	8d e7       	ldi	r24, 0x7D	; 125
     e8a:	9e e0       	ldi	r25, 0x0E	; 14
     e8c:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
     e90:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     e94:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     e98:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <nextSongPart>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
     ea2:	60 91 61 08 	lds	r22, 0x0861	; 0x800861 <zaehler>
     ea6:	70 91 62 08 	lds	r23, 0x0862	; 0x800862 <zaehler+0x1>
     eaa:	9b 01       	movw	r18, r22
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	40 91 60 08 	lds	r20, 0x0860	; 0x800860 <scannerGoesBack>
     eb4:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
     eb8:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
     ebc:	41 11       	cpse	r20, r1
     ebe:	52 c0       	rjmp	.+164    	; 0xf64 <progMatrixScanner(unsigned int, unsigned char)+0xf4>
     ec0:	30 93 62 08 	sts	0x0862, r19	; 0x800862 <zaehler+0x1>
     ec4:	20 93 61 08 	sts	0x0861, r18	; 0x800861 <zaehler>
     ec8:	27 31       	cpi	r18, 0x17	; 23
     eca:	31 05       	cpc	r19, r1
     ecc:	1c f0       	brlt	.+6      	; 0xed4 <progMatrixScanner(unsigned int, unsigned char)+0x64>
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	20 93 60 08 	sts	0x0860, r18	; 0x800860 <scannerGoesBack>
     ed4:	9b 01       	movw	r18, r22
     ed6:	2d 5f       	subi	r18, 0xFD	; 253
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	dc 01       	movw	r26, r24
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	00 a0       	ldd	r0, Z+32	; 0x20
     ee2:	f1 a1       	ldd	r31, Z+33	; 0x21
     ee4:	e0 2d       	mov	r30, r0
     ee6:	e1 2c       	mov	r14, r1
     ee8:	58 ef       	ldi	r21, 0xF8	; 248
     eea:	f5 2e       	mov	r15, r21
     eec:	07 e1       	ldi	r16, 0x17	; 23
     eee:	10 e0       	ldi	r17, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	09 95       	icall
     ef6:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
     efa:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
     efe:	60 91 61 08 	lds	r22, 0x0861	; 0x800861 <zaehler>
     f02:	70 91 62 08 	lds	r23, 0x0862	; 0x800862 <zaehler+0x1>
     f06:	9b 01       	movw	r18, r22
     f08:	2f 5f       	subi	r18, 0xFF	; 255
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	dc 01       	movw	r26, r24
     f0e:	ed 91       	ld	r30, X+
     f10:	fc 91       	ld	r31, X
     f12:	00 a0       	ldd	r0, Z+32	; 0x20
     f14:	f1 a1       	ldd	r31, Z+33	; 0x21
     f16:	e0 2d       	mov	r30, r0
     f18:	ee 24       	eor	r14, r14
     f1a:	ea 94       	dec	r14
     f1c:	fe 2c       	mov	r15, r14
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	09 95       	icall
     f24:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
     f28:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
     f2c:	60 91 61 08 	lds	r22, 0x0861	; 0x800861 <zaehler>
     f30:	70 91 62 08 	lds	r23, 0x0862	; 0x800862 <zaehler+0x1>
     f34:	9b 01       	movw	r18, r22
     f36:	22 50       	subi	r18, 0x02	; 2
     f38:	31 09       	sbc	r19, r1
     f3a:	65 50       	subi	r22, 0x05	; 5
     f3c:	71 09       	sbc	r23, r1
     f3e:	dc 01       	movw	r26, r24
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	00 a0       	ldd	r0, Z+32	; 0x20
     f46:	f1 a1       	ldd	r31, Z+33	; 0x21
     f48:	e0 2d       	mov	r30, r0
     f4a:	f1 2c       	mov	r15, r1
     f4c:	e1 2c       	mov	r14, r1
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	09 95       	icall
     f54:	8d e7       	ldi	r24, 0x7D	; 125
     f56:	9e e0       	ldi	r25, 0x0E	; 14
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	95 cd       	rjmp	.-1238   	; 0xa8e <CFastLED::show()>
     f64:	61 50       	subi	r22, 0x01	; 1
     f66:	71 09       	sbc	r23, r1
     f68:	70 93 62 08 	sts	0x0862, r23	; 0x800862 <zaehler+0x1>
     f6c:	60 93 61 08 	sts	0x0861, r22	; 0x800861 <zaehler>
     f70:	6e 3f       	cpi	r22, 0xFE	; 254
     f72:	bf ef       	ldi	r27, 0xFF	; 255
     f74:	7b 07       	cpc	r23, r27
     f76:	14 f4       	brge	.+4      	; 0xf7c <progMatrixScanner(unsigned int, unsigned char)+0x10c>
     f78:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <scannerGoesBack>
     f7c:	dc 01       	movw	r26, r24
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	00 a0       	ldd	r0, Z+32	; 0x20
     f84:	f1 a1       	ldd	r31, Z+33	; 0x21
     f86:	e0 2d       	mov	r30, r0
     f88:	e1 2c       	mov	r14, r1
     f8a:	48 ef       	ldi	r20, 0xF8	; 248
     f8c:	f4 2e       	mov	r15, r20
     f8e:	07 e1       	ldi	r16, 0x17	; 23
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	09 95       	icall
     f98:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
     f9c:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
     fa0:	60 91 61 08 	lds	r22, 0x0861	; 0x800861 <zaehler>
     fa4:	70 91 62 08 	lds	r23, 0x0862	; 0x800862 <zaehler+0x1>
     fa8:	9b 01       	movw	r18, r22
     faa:	2c 5f       	subi	r18, 0xFC	; 252
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	6e 5f       	subi	r22, 0xFE	; 254
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	c5 cf       	rjmp	.-118    	; 0xf3e <progMatrixScanner(unsigned int, unsigned char)+0xce>

00000fb4 <progStern(unsigned int, int, unsigned char)>:
     fb4:	8f 92       	push	r8
     fb6:	9f 92       	push	r9
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	7c 01       	movw	r14, r24
     fce:	eb 01       	movw	r28, r22
     fd0:	14 2f       	mov	r17, r20
     fd2:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
     fd6:	81 11       	cpse	r24, r1
     fd8:	18 c0       	rjmp	.+48     	; 0x100a <progStern(unsigned int, int, unsigned char)+0x56>
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	8d e7       	ldi	r24, 0x7D	; 125
     fde:	9e e0       	ldi	r25, 0x0E	; 14
     fe0:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
     fe4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
     fe8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
     fec:	10 93 69 08 	sts	0x0869, r17	; 0x800869 <nextSongPart>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
     ff6:	75 dd       	rcall	.-1302   	; 0xae2 <getRandomColor()>
     ff8:	90 93 7c 08 	sts	0x087C, r25	; 0x80087c <col1+0x1>
     ffc:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <col1>
    1000:	70 dd       	rcall	.-1312   	; 0xae2 <getRandomColor()>
    1002:	90 93 7a 08 	sts	0x087A, r25	; 0x80087a <col2+0x1>
    1006:	80 93 79 08 	sts	0x0879, r24	; 0x800879 <col2>
    100a:	1c 16       	cp	r1, r28
    100c:	1d 06       	cpc	r1, r29
    100e:	ac f4       	brge	.+42     	; 0x103a <progStern(unsigned int, int, unsigned char)+0x86>
    1010:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
    1014:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
    1018:	8c 17       	cp	r24, r28
    101a:	9d 07       	cpc	r25, r29
    101c:	70 f0       	brcs	.+28     	; 0x103a <progStern(unsigned int, int, unsigned char)+0x86>
    101e:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
    1022:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
    1026:	5d dd       	rcall	.-1350   	; 0xae2 <getRandomColor()>
    1028:	90 93 7c 08 	sts	0x087C, r25	; 0x80087c <col1+0x1>
    102c:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <col1>
    1030:	58 dd       	rcall	.-1360   	; 0xae2 <getRandomColor()>
    1032:	90 93 7a 08 	sts	0x087A, r25	; 0x80087a <col2+0x1>
    1036:	80 93 79 08 	sts	0x0879, r24	; 0x800879 <col2>
    103a:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    103e:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	8a 30       	cpi	r24, 0x0A	; 10
    1046:	91 05       	cpc	r25, r1
    1048:	0c f0       	brlt	.+2      	; 0x104c <progStern(unsigned int, int, unsigned char)+0x98>
    104a:	fc c0       	rjmp	.+504    	; 0x1244 <progStern(unsigned int, int, unsigned char)+0x290>
    104c:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    1050:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	8d e7       	ldi	r24, 0x7D	; 125
    1058:	9e e0       	ldi	r25, 0x0E	; 14
    105a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    105e:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1062:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1066:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    106a:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    106e:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col1>
    1072:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col1+0x1>
    1076:	9a 01       	movw	r18, r20
    1078:	26 5f       	subi	r18, 0xF6	; 246
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	a6 2e       	mov	r10, r22
    1080:	b1 2c       	mov	r11, r1
    1082:	b5 01       	movw	r22, r10
    1084:	64 1b       	sub	r22, r20
    1086:	75 0b       	sbc	r23, r21
    1088:	dc 01       	movw	r26, r24
    108a:	ed 91       	ld	r30, X+
    108c:	fc 91       	ld	r31, X
    108e:	04 a0       	ldd	r0, Z+36	; 0x24
    1090:	f5 a1       	ldd	r31, Z+37	; 0x25
    1092:	e0 2d       	mov	r30, r0
    1094:	06 e1       	ldi	r16, 0x16	; 22
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	09 95       	icall
    109e:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    10a2:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    10a6:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    10aa:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    10ae:	e0 90 79 08 	lds	r14, 0x0879	; 0x800879 <col2>
    10b2:	f0 90 7a 08 	lds	r15, 0x087A	; 0x80087a <col2+0x1>
    10b6:	9a 01       	movw	r18, r20
    10b8:	25 5f       	subi	r18, 0xF5	; 245
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	7b e0       	ldi	r23, 0x0B	; 11
    10be:	87 2e       	mov	r8, r23
    10c0:	91 2c       	mov	r9, r1
    10c2:	b4 01       	movw	r22, r8
    10c4:	64 1b       	sub	r22, r20
    10c6:	75 0b       	sbc	r23, r21
    10c8:	dc 01       	movw	r26, r24
    10ca:	ed 91       	ld	r30, X+
    10cc:	fc 91       	ld	r31, X
    10ce:	04 a0       	ldd	r0, Z+36	; 0x24
    10d0:	f5 a1       	ldd	r31, Z+37	; 0x25
    10d2:	e0 2d       	mov	r30, r0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	09 95       	icall
    10da:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    10de:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    10e2:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    10e6:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    10ea:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col1>
    10ee:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col1+0x1>
    10f2:	e6 e1       	ldi	r30, 0x16	; 22
    10f4:	ce 2e       	mov	r12, r30
    10f6:	d1 2c       	mov	r13, r1
    10f8:	04 1b       	sub	r16, r20
    10fa:	15 0b       	sbc	r17, r21
    10fc:	4f 5f       	subi	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	dc 01       	movw	r26, r24
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	04 a0       	ldd	r0, Z+36	; 0x24
    1108:	f5 a1       	ldd	r31, Z+37	; 0x25
    110a:	e0 2d       	mov	r30, r0
    110c:	25 e1       	ldi	r18, 0x15	; 21
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	09 95       	icall
    1116:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    111a:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    111e:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    1122:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    1126:	e0 90 79 08 	lds	r14, 0x0879	; 0x800879 <col2>
    112a:	f0 90 7a 08 	lds	r15, 0x087A	; 0x80087a <col2+0x1>
    112e:	c5 e1       	ldi	r28, 0x15	; 21
    1130:	d0 e0       	ldi	r29, 0x00	; 0
    1132:	8e 01       	movw	r16, r28
    1134:	04 1b       	sub	r16, r20
    1136:	15 0b       	sbc	r17, r21
    1138:	dc 01       	movw	r26, r24
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	04 a0       	ldd	r0, Z+36	; 0x24
    1140:	f5 a1       	ldd	r31, Z+37	; 0x25
    1142:	e0 2d       	mov	r30, r0
    1144:	25 e1       	ldi	r18, 0x15	; 21
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	09 95       	icall
    114e:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1152:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1156:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    115a:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    115e:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col1>
    1162:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col1+0x1>
    1166:	84 01       	movw	r16, r8
    1168:	04 1b       	sub	r16, r20
    116a:	15 0b       	sbc	r17, r21
    116c:	45 5f       	subi	r20, 0xF5	; 245
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	dc 01       	movw	r26, r24
    1172:	ed 91       	ld	r30, X+
    1174:	fc 91       	ld	r31, X
    1176:	04 a0       	ldd	r0, Z+36	; 0x24
    1178:	f5 a1       	ldd	r31, Z+37	; 0x25
    117a:	e0 2d       	mov	r30, r0
    117c:	25 e1       	ldi	r18, 0x15	; 21
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	09 95       	icall
    1186:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    118a:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    118e:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    1192:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    1196:	e0 90 79 08 	lds	r14, 0x0879	; 0x800879 <col2>
    119a:	f0 90 7a 08 	lds	r15, 0x087A	; 0x80087a <col2+0x1>
    119e:	85 01       	movw	r16, r10
    11a0:	04 1b       	sub	r16, r20
    11a2:	15 0b       	sbc	r17, r21
    11a4:	46 5f       	subi	r20, 0xF6	; 246
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	dc 01       	movw	r26, r24
    11aa:	ed 91       	ld	r30, X+
    11ac:	fc 91       	ld	r31, X
    11ae:	04 a0       	ldd	r0, Z+36	; 0x24
    11b0:	f5 a1       	ldd	r31, Z+37	; 0x25
    11b2:	e0 2d       	mov	r30, r0
    11b4:	25 e1       	ldi	r18, 0x15	; 21
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	09 95       	icall
    11be:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    11c2:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    11c6:	60 91 61 08 	lds	r22, 0x0861	; 0x800861 <zaehler>
    11ca:	70 91 62 08 	lds	r23, 0x0862	; 0x800862 <zaehler+0x1>
    11ce:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col1>
    11d2:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col1+0x1>
    11d6:	96 01       	movw	r18, r12
    11d8:	26 1b       	sub	r18, r22
    11da:	37 0b       	sbc	r19, r23
    11dc:	dc 01       	movw	r26, r24
    11de:	ed 91       	ld	r30, X+
    11e0:	fc 91       	ld	r31, X
    11e2:	04 a0       	ldd	r0, Z+36	; 0x24
    11e4:	f5 a1       	ldd	r31, Z+37	; 0x25
    11e6:	e0 2d       	mov	r30, r0
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	46 e1       	ldi	r20, 0x16	; 22
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	09 95       	icall
    11f2:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    11f6:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    11fa:	60 91 61 08 	lds	r22, 0x0861	; 0x800861 <zaehler>
    11fe:	70 91 62 08 	lds	r23, 0x0862	; 0x800862 <zaehler+0x1>
    1202:	e0 90 79 08 	lds	r14, 0x0879	; 0x800879 <col2>
    1206:	f0 90 7a 08 	lds	r15, 0x087A	; 0x80087a <col2+0x1>
    120a:	9e 01       	movw	r18, r28
    120c:	26 1b       	sub	r18, r22
    120e:	37 0b       	sbc	r19, r23
    1210:	61 50       	subi	r22, 0x01	; 1
    1212:	71 09       	sbc	r23, r1
    1214:	dc 01       	movw	r26, r24
    1216:	ed 91       	ld	r30, X+
    1218:	fc 91       	ld	r31, X
    121a:	04 a0       	ldd	r0, Z+36	; 0x24
    121c:	f5 a1       	ldd	r31, Z+37	; 0x25
    121e:	e0 2d       	mov	r30, r0
    1220:	46 e1       	ldi	r20, 0x16	; 22
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	09 95       	icall
    1226:	8d e7       	ldi	r24, 0x7D	; 125
    1228:	9e e0       	ldi	r25, 0x0E	; 14
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	9f 90       	pop	r9
    1240:	8f 90       	pop	r8
    1242:	25 cc       	rjmp	.-1974   	; 0xa8e <CFastLED::show()>
    1244:	10 92 62 08 	sts	0x0862, r1	; 0x800862 <zaehler+0x1>
    1248:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <zaehler>
    124c:	03 cf       	rjmp	.-506    	; 0x1054 <progStern(unsigned int, int, unsigned char)+0xa0>

0000124e <progStern(unsigned int, unsigned char)>:
    124e:	46 2f       	mov	r20, r22
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	af ce       	rjmp	.-674    	; 0xfb4 <progStern(unsigned int, int, unsigned char)>

00001256 <progBlack(unsigned int, unsigned char)>:
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	8c 01       	movw	r16, r24
    125e:	c6 2f       	mov	r28, r22
    1260:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1264:	81 11       	cpse	r24, r1
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <progBlack(unsigned int, unsigned char)+0x2e>
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	8d e7       	ldi	r24, 0x7D	; 125
    126c:	9e e0       	ldi	r25, 0x0E	; 14
    126e:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    1272:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1276:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    127a:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <nextSongPart>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	8d e7       	ldi	r24, 0x7D	; 125
    1288:	9e e0       	ldi	r25, 0x0E	; 14
    128a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    128e:	8d e7       	ldi	r24, 0x7D	; 125
    1290:	9e e0       	ldi	r25, 0x0E	; 14
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	fa cb       	rjmp	.-2060   	; 0xa8e <CFastLED::show()>

0000129a <progCircles(unsigned int, unsigned char, unsigned int)>:
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	7c 01       	movw	r14, r24
    12b4:	16 2f       	mov	r17, r22
    12b6:	ea 01       	movw	r28, r20
    12b8:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    12bc:	81 11       	cpse	r24, r1
    12be:	12 c0       	rjmp	.+36     	; 0x12e4 <progCircles(unsigned int, unsigned char, unsigned int)+0x4a>
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	8d e7       	ldi	r24, 0x7D	; 125
    12c4:	9e e0       	ldi	r25, 0x0E	; 14
    12c6:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    12ca:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    12ce:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    12d2:	10 93 69 08 	sts	0x0869, r17	; 0x800869 <nextSongPart>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    12dc:	d0 93 71 08 	sts	0x0871, r29	; 0x800871 <millisCounterTimer+0x1>
    12e0:	c0 93 70 08 	sts	0x0870, r28	; 0x800870 <millisCounterTimer>
    12e4:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
    12e8:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
    12ec:	8c 17       	cp	r24, r28
    12ee:	9d 07       	cpc	r25, r29
    12f0:	e0 f1       	brcs	.+120    	; 0x136a <progCircles(unsigned int, unsigned char, unsigned int)+0xd0>
    12f2:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
    12f6:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
    12fa:	c0 91 6c 0e 	lds	r28, 0x0E6C	; 0x800e6c <matrix>
    12fe:	d0 91 6d 0e 	lds	r29, 0x0E6D	; 0x800e6d <matrix+0x1>
    1302:	09 dc       	rcall	.-2030   	; 0xb16 <getRandomColorIncludingBlack()>
    1304:	8c 01       	movw	r16, r24
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
    131a:	4b 01       	movw	r8, r22
    131c:	26 e1       	ldi	r18, 0x16	; 22
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	cb 01       	movw	r24, r22
    132a:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
    132e:	6b 01       	movw	r12, r22
    1330:	25 e1       	ldi	r18, 0x15	; 21
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	cb 01       	movw	r24, r22
    133e:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
    1342:	94 01       	movw	r18, r8
    1344:	a6 01       	movw	r20, r12
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 56 1d 	call	0x3aac	; 0x3aac <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    134c:	8d e7       	ldi	r24, 0x7D	; 125
    134e:	9e e0       	ldi	r25, 0x0E	; 14
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	8f 90       	pop	r8
    1368:	92 cb       	rjmp	.-2268   	; 0xa8e <CFastLED::show()>
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	08 95       	ret

00001384 <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	6c 01       	movw	r12, r24
    1396:	f6 2e       	mov	r15, r22
    1398:	ea 01       	movw	r28, r20
    139a:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    139e:	81 11       	cpse	r24, r1
    13a0:	12 c0       	rjmp	.+36     	; 0x13c6 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x42>
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	8d e7       	ldi	r24, 0x7D	; 125
    13a6:	9e e0       	ldi	r25, 0x0E	; 14
    13a8:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    13ac:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    13b0:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    13b4:	f0 92 69 08 	sts	0x0869, r15	; 0x800869 <nextSongPart>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    13be:	d0 93 71 08 	sts	0x0871, r29	; 0x800871 <millisCounterTimer+0x1>
    13c2:	c0 93 70 08 	sts	0x0870, r28	; 0x800870 <millisCounterTimer>
    13c6:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
    13ca:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
    13ce:	8c 17       	cp	r24, r28
    13d0:	9d 07       	cpc	r25, r29
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x52>
    13d4:	72 c0       	rjmp	.+228    	; 0x14ba <progRandomLines(unsigned int, unsigned char, unsigned int)+0x136>
    13d6:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
    13da:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
    13de:	25 e1       	ldi	r18, 0x15	; 21
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	cb 01       	movw	r24, r22
    13ec:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
    13f0:	c6 2f       	mov	r28, r22
    13f2:	25 e1       	ldi	r18, 0x15	; 21
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	cb 01       	movw	r24, r22
    1400:	0e 94 c7 30 	call	0x618e	; 0x618e <random(long, long)>
    1404:	c6 2e       	mov	r12, r22
    1406:	6d db       	rcall	.-2342   	; 0xae2 <getRandomColor()>
    1408:	90 93 7c 08 	sts	0x087C, r25	; 0x80087c <col1+0x1>
    140c:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <col1>
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	8d e7       	ldi	r24, 0x7D	; 125
    1414:	9e e0       	ldi	r25, 0x0E	; 14
    1416:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    141a:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    141e:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1422:	d1 2c       	mov	r13, r1
    1424:	d0 e0       	ldi	r29, 0x00	; 0
    1426:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col1>
    142a:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col1+0x1>
    142e:	96 01       	movw	r18, r12
    1430:	21 50       	subi	r18, 0x01	; 1
    1432:	31 09       	sbc	r19, r1
    1434:	be 01       	movw	r22, r28
    1436:	61 50       	subi	r22, 0x01	; 1
    1438:	71 09       	sbc	r23, r1
    143a:	dc 01       	movw	r26, r24
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	04 a0       	ldd	r0, Z+36	; 0x24
    1442:	f5 a1       	ldd	r31, Z+37	; 0x25
    1444:	e0 2d       	mov	r30, r0
    1446:	06 e1       	ldi	r16, 0x16	; 22
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	09 95       	icall
    1450:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1454:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1458:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col1>
    145c:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col1+0x1>
    1460:	dc 01       	movw	r26, r24
    1462:	ed 91       	ld	r30, X+
    1464:	fc 91       	ld	r31, X
    1466:	04 a0       	ldd	r0, Z+36	; 0x24
    1468:	f5 a1       	ldd	r31, Z+37	; 0x25
    146a:	e0 2d       	mov	r30, r0
    146c:	96 01       	movw	r18, r12
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	be 01       	movw	r22, r28
    1474:	09 95       	icall
    1476:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    147a:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    147e:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col1>
    1482:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col1+0x1>
    1486:	96 01       	movw	r18, r12
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	dc 01       	movw	r26, r24
    1494:	ed 91       	ld	r30, X+
    1496:	fc 91       	ld	r31, X
    1498:	04 a0       	ldd	r0, Z+36	; 0x24
    149a:	f5 a1       	ldd	r31, Z+37	; 0x25
    149c:	e0 2d       	mov	r30, r0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	09 95       	icall
    14a4:	8d e7       	ldi	r24, 0x7D	; 125
    14a6:	9e e0       	ldi	r25, 0x0E	; 14
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	ea ca       	rjmp	.-2604   	; 0xa8e <CFastLED::show()>
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	08 95       	ret

000014cc <progMovingLines(unsigned int, unsigned char)>:
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	8c 01       	movw	r16, r24
    14de:	c6 2f       	mov	r28, r22
    14e0:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    14e4:	81 11       	cpse	r24, r1
    14e6:	0e c0       	rjmp	.+28     	; 0x1504 <progMovingLines(unsigned int, unsigned char)+0x38>
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	8d e7       	ldi	r24, 0x7D	; 125
    14ec:	9e e0       	ldi	r25, 0x0E	; 14
    14ee:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    14f2:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    14f6:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    14fa:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <nextSongPart>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	8d e7       	ldi	r24, 0x7D	; 125
    1508:	9e e0       	ldi	r25, 0x0E	; 14
    150a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    150e:	80 91 5e 08 	lds	r24, 0x085E	; 0x80085e <stage>
    1512:	90 91 5f 08 	lds	r25, 0x085F	; 0x80085f <stage+0x1>
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <progMovingLines(unsigned int, unsigned char)+0x52>
    151c:	59 c0       	rjmp	.+178    	; 0x15d0 <progMovingLines(unsigned int, unsigned char)+0x104>
    151e:	7c f4       	brge	.+30     	; 0x153e <progMovingLines(unsigned int, unsigned char)+0x72>
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	39 f1       	breq	.+78     	; 0x1572 <progMovingLines(unsigned int, unsigned char)+0xa6>
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	e1 f1       	breq	.+120    	; 0x15a0 <progMovingLines(unsigned int, unsigned char)+0xd4>
    1528:	8d e7       	ldi	r24, 0x7D	; 125
    152a:	9e e0       	ldi	r25, 0x0E	; 14
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	a8 ca       	rjmp	.-2736   	; 0xa8e <CFastLED::show()>
    153e:	84 30       	cpi	r24, 0x04	; 4
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <progMovingLines(unsigned int, unsigned char)+0x7a>
    1544:	9a c0       	rjmp	.+308    	; 0x167a <progMovingLines(unsigned int, unsigned char)+0x1ae>
    1546:	0c f4       	brge	.+2      	; 0x154a <progMovingLines(unsigned int, unsigned char)+0x7e>
    1548:	72 c0       	rjmp	.+228    	; 0x162e <progMovingLines(unsigned int, unsigned char)+0x162>
    154a:	05 97       	sbiw	r24, 0x05	; 5
    154c:	69 f7       	brne	.-38     	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    154e:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    1552:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    155c:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    1560:	18 16       	cp	r1, r24
    1562:	19 06       	cpc	r1, r25
    1564:	0c f4       	brge	.+2      	; 0x1568 <progMovingLines(unsigned int, unsigned char)+0x9c>
    1566:	9d c0       	rjmp	.+314    	; 0x16a2 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1568:	10 92 5f 08 	sts	0x085F, r1	; 0x80085f <stage+0x1>
    156c:	10 92 5e 08 	sts	0x085E, r1	; 0x80085e <stage>
    1570:	12 c0       	rjmp	.+36     	; 0x1596 <progMovingLines(unsigned int, unsigned char)+0xca>
    1572:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    1576:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    1580:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    1584:	4a 97       	sbiw	r24, 0x1a	; 26
    1586:	0c f4       	brge	.+2      	; 0x158a <progMovingLines(unsigned int, unsigned char)+0xbe>
    1588:	61 c0       	rjmp	.+194    	; 0x164c <progMovingLines(unsigned int, unsigned char)+0x180>
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <stage+0x1>
    1592:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <stage>
    1596:	10 92 62 08 	sts	0x0862, r1	; 0x800862 <zaehler+0x1>
    159a:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <zaehler>
    159e:	c4 cf       	rjmp	.-120    	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    15a0:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    15a4:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    15ae:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    15b2:	0c 97       	sbiw	r24, 0x0c	; 12
    15b4:	14 f1       	brlt	.+68     	; 0x15fa <progMovingLines(unsigned int, unsigned char)+0x12e>
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <stage+0x1>
    15be:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <stage>
    15c2:	8c e0       	ldi	r24, 0x0C	; 12
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    15ca:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    15ce:	ac cf       	rjmp	.-168    	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    15d0:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    15d4:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    15de:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    15e2:	18 16       	cp	r1, r24
    15e4:	19 06       	cpc	r1, r25
    15e6:	4c f0       	brlt	.+18     	; 0x15fa <progMovingLines(unsigned int, unsigned char)+0x12e>
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <stage+0x1>
    15f0:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <stage>
    15f4:	89 e1       	ldi	r24, 0x19	; 25
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	e6 cf       	rjmp	.-52     	; 0x15c6 <progMovingLines(unsigned int, unsigned char)+0xfa>
    15fa:	c0 91 6c 0e 	lds	r28, 0x0E6C	; 0x800e6c <matrix>
    15fe:	d0 91 6d 0e 	lds	r29, 0x0E6D	; 0x800e6d <matrix+0x1>
    1602:	e8 81       	ld	r30, Y
    1604:	f9 81       	ldd	r31, Y+1	; 0x01
    1606:	c4 a0       	ldd	r12, Z+36	; 0x24
    1608:	d5 a0       	ldd	r13, Z+37	; 0x25
    160a:	6b da       	rcall	.-2858   	; 0xae2 <getRandomColor()>
    160c:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    1610:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    1614:	06 e1       	ldi	r16, 0x16	; 22
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	04 1b       	sub	r16, r20
    161a:	15 0b       	sbc	r17, r21
    161c:	7c 01       	movw	r14, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	69 e1       	ldi	r22, 0x19	; 25
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	ce 01       	movw	r24, r28
    1628:	f6 01       	movw	r30, r12
    162a:	09 95       	icall
    162c:	7d cf       	rjmp	.-262    	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    162e:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    1632:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    163c:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    1640:	18 16       	cp	r1, r24
    1642:	19 06       	cpc	r1, r25
    1644:	1c f0       	brlt	.+6      	; 0x164c <progMovingLines(unsigned int, unsigned char)+0x180>
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a1 cf       	rjmp	.-190    	; 0x158e <progMovingLines(unsigned int, unsigned char)+0xc2>
    164c:	c0 91 6c 0e 	lds	r28, 0x0E6C	; 0x800e6c <matrix>
    1650:	d0 91 6d 0e 	lds	r29, 0x0E6D	; 0x800e6d <matrix+0x1>
    1654:	e8 81       	ld	r30, Y
    1656:	f9 81       	ldd	r31, Y+1	; 0x01
    1658:	c4 a0       	ldd	r12, Z+36	; 0x24
    165a:	d5 a0       	ldd	r13, Z+37	; 0x25
    165c:	42 da       	rcall	.-2940   	; 0xae2 <getRandomColor()>
    165e:	60 91 61 08 	lds	r22, 0x0861	; 0x800861 <zaehler>
    1662:	70 91 62 08 	lds	r23, 0x0862	; 0x800862 <zaehler+0x1>
    1666:	29 e1       	ldi	r18, 0x19	; 25
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	26 1b       	sub	r18, r22
    166c:	37 0b       	sbc	r19, r23
    166e:	7c 01       	movw	r14, r24
    1670:	06 e1       	ldi	r16, 0x16	; 22
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	d6 cf       	rjmp	.-84     	; 0x1626 <progMovingLines(unsigned int, unsigned char)+0x15a>
    167a:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    167e:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    1688:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    168c:	0b 97       	sbiw	r24, 0x0b	; 11
    168e:	4c f0       	brlt	.+18     	; 0x16a2 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1690:	85 e0       	ldi	r24, 0x05	; 5
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	90 93 5f 08 	sts	0x085F, r25	; 0x80085f <stage+0x1>
    1698:	80 93 5e 08 	sts	0x085E, r24	; 0x80085e <stage>
    169c:	8a e0       	ldi	r24, 0x0A	; 10
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	92 cf       	rjmp	.-220    	; 0x15c6 <progMovingLines(unsigned int, unsigned char)+0xfa>
    16a2:	c0 91 6c 0e 	lds	r28, 0x0E6C	; 0x800e6c <matrix>
    16a6:	d0 91 6d 0e 	lds	r29, 0x0E6D	; 0x800e6d <matrix+0x1>
    16aa:	e8 81       	ld	r30, Y
    16ac:	f9 81       	ldd	r31, Y+1	; 0x01
    16ae:	c4 a0       	ldd	r12, Z+36	; 0x24
    16b0:	d5 a0       	ldd	r13, Z+37	; 0x25
    16b2:	17 da       	rcall	.-3026   	; 0xae2 <getRandomColor()>
    16b4:	40 91 61 08 	lds	r20, 0x0861	; 0x800861 <zaehler>
    16b8:	50 91 62 08 	lds	r21, 0x0862	; 0x800862 <zaehler+0x1>
    16bc:	06 e1       	ldi	r16, 0x16	; 22
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	04 1b       	sub	r16, r20
    16c2:	15 0b       	sbc	r17, r21
    16c4:	7c 01       	movw	r14, r24
    16c6:	29 e1       	ldi	r18, 0x19	; 25
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	ab cf       	rjmp	.-170    	; 0x1626 <progMovingLines(unsigned int, unsigned char)+0x15a>

000016d0 <progOutline(unsigned int, unsigned char)>:
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	8c 01       	movw	r16, r24
    16e2:	c6 2f       	mov	r28, r22
    16e4:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    16e8:	81 11       	cpse	r24, r1
    16ea:	0e c0       	rjmp	.+28     	; 0x1708 <progOutline(unsigned int, unsigned char)+0x38>
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	8d e7       	ldi	r24, 0x7D	; 125
    16f0:	9e e0       	ldi	r25, 0x0E	; 14
    16f2:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    16f6:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    16fa:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    16fe:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <nextSongPart>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	8d e7       	ldi	r24, 0x7D	; 125
    170c:	9e e0       	ldi	r25, 0x0E	; 14
    170e:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    1712:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <scannerGoesBack>
    1716:	e0 91 61 08 	lds	r30, 0x0861	; 0x800861 <zaehler>
    171a:	f0 91 62 08 	lds	r31, 0x0862	; 0x800862 <zaehler+0x1>
    171e:	81 11       	cpse	r24, r1
    1720:	08 c1       	rjmp	.+528    	; 0x1932 <progOutline(unsigned int, unsigned char)+0x262>
    1722:	e9 30       	cpi	r30, 0x09	; 9
    1724:	f1 05       	cpc	r31, r1
    1726:	28 f5       	brcc	.+74     	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    1728:	e8 56       	subi	r30, 0x68	; 104
    172a:	f4 4f       	sbci	r31, 0xF4	; 244
    172c:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__tablejump2__>
    1730:	a1 0b       	sbc	r26, r17
    1732:	d3 0b       	sbc	r29, r19
    1734:	ec 0b       	sbc	r30, r28
    1736:	05 0c       	add	r0, r5
    1738:	1e 0c       	add	r1, r14
    173a:	37 0c       	add	r3, r7
    173c:	4f 0c       	add	r4, r15
    173e:	68 0c       	add	r6, r8
    1740:	81 0c       	add	r8, r1
    1742:	cd e1       	ldi	r28, 0x1D	; 29
    1744:	d6 e0       	ldi	r29, 0x06	; 6
    1746:	09 eb       	ldi	r16, 0xB9	; 185
    1748:	16 e0       	ldi	r17, 0x06	; 6
    174a:	e9 90       	ld	r14, Y+
    174c:	f9 90       	ld	r15, Y+
    174e:	b0 d9       	rcall	.-3232   	; 0xab0 <getRandomColorValue()>
    1750:	d8 2e       	mov	r13, r24
    1752:	ae d9       	rcall	.-3236   	; 0xab0 <getRandomColorValue()>
    1754:	c8 2e       	mov	r12, r24
    1756:	ac d9       	rcall	.-3240   	; 0xab0 <getRandomColorValue()>
    1758:	f7 01       	movw	r30, r14
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	ee 0d       	add	r30, r14
    1760:	ff 1d       	adc	r31, r15
    1762:	e2 58       	subi	r30, 0x82	; 130
    1764:	f7 4f       	sbci	r31, 0xF7	; 247
    1766:	80 83       	st	Z, r24
    1768:	c1 82       	std	Z+1, r12	; 0x01
    176a:	d2 82       	std	Z+2, r13	; 0x02
    176c:	0c 17       	cp	r16, r28
    176e:	1d 07       	cpc	r17, r29
    1770:	61 f7       	brne	.-40     	; 0x174a <progOutline(unsigned int, unsigned char)+0x7a>
    1772:	8d e7       	ldi	r24, 0x7D	; 125
    1774:	9e e0       	ldi	r25, 0x0E	; 14
    1776:	8b d9       	rcall	.-3306   	; 0xa8e <CFastLED::show()>
    1778:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    177c:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    1786:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    178a:	09 97       	sbiw	r24, 0x09	; 9
    178c:	1c f0       	brlt	.+6      	; 0x1794 <progOutline(unsigned int, unsigned char)+0xc4>
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <scannerGoesBack>
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	08 95       	ret
    17a6:	c1 e9       	ldi	r28, 0x91	; 145
    17a8:	d5 e0       	ldi	r29, 0x05	; 5
    17aa:	0d e1       	ldi	r16, 0x1D	; 29
    17ac:	16 e0       	ldi	r17, 0x06	; 6
    17ae:	e9 90       	ld	r14, Y+
    17b0:	f9 90       	ld	r15, Y+
    17b2:	7e d9       	rcall	.-3332   	; 0xab0 <getRandomColorValue()>
    17b4:	d8 2e       	mov	r13, r24
    17b6:	7c d9       	rcall	.-3336   	; 0xab0 <getRandomColorValue()>
    17b8:	c8 2e       	mov	r12, r24
    17ba:	7a d9       	rcall	.-3340   	; 0xab0 <getRandomColorValue()>
    17bc:	f7 01       	movw	r30, r14
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0d       	add	r30, r14
    17c4:	ff 1d       	adc	r31, r15
    17c6:	e2 58       	subi	r30, 0x82	; 130
    17c8:	f7 4f       	sbci	r31, 0xF7	; 247
    17ca:	80 83       	st	Z, r24
    17cc:	c1 82       	std	Z+1, r12	; 0x01
    17ce:	d2 82       	std	Z+2, r13	; 0x02
    17d0:	0c 17       	cp	r16, r28
    17d2:	1d 07       	cpc	r17, r29
    17d4:	61 f7       	brne	.-40     	; 0x17ae <progOutline(unsigned int, unsigned char)+0xde>
    17d6:	cd cf       	rjmp	.-102    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    17d8:	c5 e2       	ldi	r28, 0x25	; 37
    17da:	d5 e0       	ldi	r29, 0x05	; 5
    17dc:	01 e9       	ldi	r16, 0x91	; 145
    17de:	15 e0       	ldi	r17, 0x05	; 5
    17e0:	e9 90       	ld	r14, Y+
    17e2:	f9 90       	ld	r15, Y+
    17e4:	65 d9       	rcall	.-3382   	; 0xab0 <getRandomColorValue()>
    17e6:	d8 2e       	mov	r13, r24
    17e8:	63 d9       	rcall	.-3386   	; 0xab0 <getRandomColorValue()>
    17ea:	c8 2e       	mov	r12, r24
    17ec:	61 d9       	rcall	.-3390   	; 0xab0 <getRandomColorValue()>
    17ee:	f7 01       	movw	r30, r14
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	ee 0d       	add	r30, r14
    17f6:	ff 1d       	adc	r31, r15
    17f8:	e2 58       	subi	r30, 0x82	; 130
    17fa:	f7 4f       	sbci	r31, 0xF7	; 247
    17fc:	80 83       	st	Z, r24
    17fe:	c1 82       	std	Z+1, r12	; 0x01
    1800:	d2 82       	std	Z+2, r13	; 0x02
    1802:	0c 17       	cp	r16, r28
    1804:	1d 07       	cpc	r17, r29
    1806:	61 f7       	brne	.-40     	; 0x17e0 <progOutline(unsigned int, unsigned char)+0x110>
    1808:	b4 cf       	rjmp	.-152    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    180a:	cb ed       	ldi	r28, 0xDB	; 219
    180c:	d4 e0       	ldi	r29, 0x04	; 4
    180e:	05 e2       	ldi	r16, 0x25	; 37
    1810:	15 e0       	ldi	r17, 0x05	; 5
    1812:	e9 90       	ld	r14, Y+
    1814:	f9 90       	ld	r15, Y+
    1816:	4c d9       	rcall	.-3432   	; 0xab0 <getRandomColorValue()>
    1818:	d8 2e       	mov	r13, r24
    181a:	4a d9       	rcall	.-3436   	; 0xab0 <getRandomColorValue()>
    181c:	c8 2e       	mov	r12, r24
    181e:	48 d9       	rcall	.-3440   	; 0xab0 <getRandomColorValue()>
    1820:	f7 01       	movw	r30, r14
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	ee 0d       	add	r30, r14
    1828:	ff 1d       	adc	r31, r15
    182a:	e2 58       	subi	r30, 0x82	; 130
    182c:	f7 4f       	sbci	r31, 0xF7	; 247
    182e:	80 83       	st	Z, r24
    1830:	c1 82       	std	Z+1, r12	; 0x01
    1832:	d2 82       	std	Z+2, r13	; 0x02
    1834:	0c 17       	cp	r16, r28
    1836:	1d 07       	cpc	r17, r29
    1838:	61 f7       	brne	.-40     	; 0x1812 <progOutline(unsigned int, unsigned char)+0x142>
    183a:	9b cf       	rjmp	.-202    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    183c:	cb e9       	ldi	r28, 0x9B	; 155
    183e:	d4 e0       	ldi	r29, 0x04	; 4
    1840:	0b ed       	ldi	r16, 0xDB	; 219
    1842:	14 e0       	ldi	r17, 0x04	; 4
    1844:	e9 90       	ld	r14, Y+
    1846:	f9 90       	ld	r15, Y+
    1848:	33 d9       	rcall	.-3482   	; 0xab0 <getRandomColorValue()>
    184a:	d8 2e       	mov	r13, r24
    184c:	31 d9       	rcall	.-3486   	; 0xab0 <getRandomColorValue()>
    184e:	c8 2e       	mov	r12, r24
    1850:	2f d9       	rcall	.-3490   	; 0xab0 <getRandomColorValue()>
    1852:	f7 01       	movw	r30, r14
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ee 0d       	add	r30, r14
    185a:	ff 1d       	adc	r31, r15
    185c:	e2 58       	subi	r30, 0x82	; 130
    185e:	f7 4f       	sbci	r31, 0xF7	; 247
    1860:	80 83       	st	Z, r24
    1862:	c1 82       	std	Z+1, r12	; 0x01
    1864:	d2 82       	std	Z+2, r13	; 0x02
    1866:	0c 17       	cp	r16, r28
    1868:	1d 07       	cpc	r17, r29
    186a:	61 f7       	brne	.-40     	; 0x1844 <progOutline(unsigned int, unsigned char)+0x174>
    186c:	82 cf       	rjmp	.-252    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    186e:	cf e5       	ldi	r28, 0x5F	; 95
    1870:	d4 e0       	ldi	r29, 0x04	; 4
    1872:	09 91       	ld	r16, Y+
    1874:	19 91       	ld	r17, Y+
    1876:	1c d9       	rcall	.-3528   	; 0xab0 <getRandomColorValue()>
    1878:	f8 2e       	mov	r15, r24
    187a:	1a d9       	rcall	.-3532   	; 0xab0 <getRandomColorValue()>
    187c:	e8 2e       	mov	r14, r24
    187e:	18 d9       	rcall	.-3536   	; 0xab0 <getRandomColorValue()>
    1880:	f8 01       	movw	r30, r16
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	e0 0f       	add	r30, r16
    1888:	f1 1f       	adc	r31, r17
    188a:	e2 58       	subi	r30, 0x82	; 130
    188c:	f7 4f       	sbci	r31, 0xF7	; 247
    188e:	80 83       	st	Z, r24
    1890:	e1 82       	std	Z+1, r14	; 0x01
    1892:	f2 82       	std	Z+2, r15	; 0x02
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	cb 39       	cpi	r28, 0x9B	; 155
    1898:	d8 07       	cpc	r29, r24
    189a:	59 f7       	brne	.-42     	; 0x1872 <progOutline(unsigned int, unsigned char)+0x1a2>
    189c:	6a cf       	rjmp	.-300    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    189e:	c9 e2       	ldi	r28, 0x29	; 41
    18a0:	d4 e0       	ldi	r29, 0x04	; 4
    18a2:	0f e5       	ldi	r16, 0x5F	; 95
    18a4:	14 e0       	ldi	r17, 0x04	; 4
    18a6:	e9 90       	ld	r14, Y+
    18a8:	f9 90       	ld	r15, Y+
    18aa:	02 d9       	rcall	.-3580   	; 0xab0 <getRandomColorValue()>
    18ac:	d8 2e       	mov	r13, r24
    18ae:	00 d9       	rcall	.-3584   	; 0xab0 <getRandomColorValue()>
    18b0:	c8 2e       	mov	r12, r24
    18b2:	fe d8       	rcall	.-3588   	; 0xab0 <getRandomColorValue()>
    18b4:	f7 01       	movw	r30, r14
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	ee 0d       	add	r30, r14
    18bc:	ff 1d       	adc	r31, r15
    18be:	e2 58       	subi	r30, 0x82	; 130
    18c0:	f7 4f       	sbci	r31, 0xF7	; 247
    18c2:	80 83       	st	Z, r24
    18c4:	c1 82       	std	Z+1, r12	; 0x01
    18c6:	d2 82       	std	Z+2, r13	; 0x02
    18c8:	0c 17       	cp	r16, r28
    18ca:	1d 07       	cpc	r17, r29
    18cc:	61 f7       	brne	.-40     	; 0x18a6 <progOutline(unsigned int, unsigned char)+0x1d6>
    18ce:	51 cf       	rjmp	.-350    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    18d0:	c5 ef       	ldi	r28, 0xF5	; 245
    18d2:	d3 e0       	ldi	r29, 0x03	; 3
    18d4:	09 e2       	ldi	r16, 0x29	; 41
    18d6:	14 e0       	ldi	r17, 0x04	; 4
    18d8:	e9 90       	ld	r14, Y+
    18da:	f9 90       	ld	r15, Y+
    18dc:	e9 d8       	rcall	.-3630   	; 0xab0 <getRandomColorValue()>
    18de:	d8 2e       	mov	r13, r24
    18e0:	e7 d8       	rcall	.-3634   	; 0xab0 <getRandomColorValue()>
    18e2:	c8 2e       	mov	r12, r24
    18e4:	e5 d8       	rcall	.-3638   	; 0xab0 <getRandomColorValue()>
    18e6:	f7 01       	movw	r30, r14
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	ee 0d       	add	r30, r14
    18ee:	ff 1d       	adc	r31, r15
    18f0:	e2 58       	subi	r30, 0x82	; 130
    18f2:	f7 4f       	sbci	r31, 0xF7	; 247
    18f4:	80 83       	st	Z, r24
    18f6:	c1 82       	std	Z+1, r12	; 0x01
    18f8:	d2 82       	std	Z+2, r13	; 0x02
    18fa:	0c 17       	cp	r16, r28
    18fc:	1d 07       	cpc	r17, r29
    18fe:	61 f7       	brne	.-40     	; 0x18d8 <progOutline(unsigned int, unsigned char)+0x208>
    1900:	38 cf       	rjmp	.-400    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    1902:	c5 ec       	ldi	r28, 0xC5	; 197
    1904:	d3 e0       	ldi	r29, 0x03	; 3
    1906:	09 91       	ld	r16, Y+
    1908:	19 91       	ld	r17, Y+
    190a:	d2 d8       	rcall	.-3676   	; 0xab0 <getRandomColorValue()>
    190c:	f8 2e       	mov	r15, r24
    190e:	d0 d8       	rcall	.-3680   	; 0xab0 <getRandomColorValue()>
    1910:	e8 2e       	mov	r14, r24
    1912:	ce d8       	rcall	.-3684   	; 0xab0 <getRandomColorValue()>
    1914:	f8 01       	movw	r30, r16
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	e0 0f       	add	r30, r16
    191c:	f1 1f       	adc	r31, r17
    191e:	e2 58       	subi	r30, 0x82	; 130
    1920:	f7 4f       	sbci	r31, 0xF7	; 247
    1922:	80 83       	st	Z, r24
    1924:	e1 82       	std	Z+1, r14	; 0x01
    1926:	f2 82       	std	Z+2, r15	; 0x02
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	c5 3f       	cpi	r28, 0xF5	; 245
    192c:	d8 07       	cpc	r29, r24
    192e:	59 f7       	brne	.-42     	; 0x1906 <progOutline(unsigned int, unsigned char)+0x236>
    1930:	20 cf       	rjmp	.-448    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    1932:	e9 30       	cpi	r30, 0x09	; 9
    1934:	f1 05       	cpc	r31, r1
    1936:	20 f5       	brcc	.+72     	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1938:	e0 56       	subi	r30, 0x60	; 96
    193a:	f3 4f       	sbci	r31, 0xF3	; 243
    193c:	0c 94 c4 33 	jmp	0x6788	; 0x6788 <__tablejump2__>
    1940:	a9 0c       	add	r10, r9
    1942:	d3 0c       	add	r13, r3
    1944:	eb 0c       	add	r14, r11
    1946:	03 0d       	add	r16, r3
    1948:	1b 0d       	add	r17, r11
    194a:	33 0d       	add	r19, r3
    194c:	4b 0d       	add	r20, r11
    194e:	63 0d       	add	r22, r3
    1950:	7e 0d       	add	r23, r14
    1952:	cd e1       	ldi	r28, 0x1D	; 29
    1954:	d6 e0       	ldi	r29, 0x06	; 6
    1956:	09 91       	ld	r16, Y+
    1958:	19 91       	ld	r17, Y+
    195a:	aa d8       	rcall	.-3756   	; 0xab0 <getRandomColorValue()>
    195c:	f8 2e       	mov	r15, r24
    195e:	a8 d8       	rcall	.-3760   	; 0xab0 <getRandomColorValue()>
    1960:	e8 2e       	mov	r14, r24
    1962:	a6 d8       	rcall	.-3764   	; 0xab0 <getRandomColorValue()>
    1964:	f8 01       	movw	r30, r16
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	e0 0f       	add	r30, r16
    196c:	f1 1f       	adc	r31, r17
    196e:	e2 58       	subi	r30, 0x82	; 130
    1970:	f7 4f       	sbci	r31, 0xF7	; 247
    1972:	80 83       	st	Z, r24
    1974:	e1 82       	std	Z+1, r14	; 0x01
    1976:	f2 82       	std	Z+2, r15	; 0x02
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	c9 3b       	cpi	r28, 0xB9	; 185
    197c:	d8 07       	cpc	r29, r24
    197e:	59 f7       	brne	.-42     	; 0x1956 <progOutline(unsigned int, unsigned char)+0x286>
    1980:	8d e7       	ldi	r24, 0x7D	; 125
    1982:	9e e0       	ldi	r25, 0x0E	; 14
    1984:	84 d8       	rcall	.-3832   	; 0xa8e <CFastLED::show()>
    1986:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    198a:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    1994:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    1998:	18 16       	cp	r1, r24
    199a:	19 06       	cpc	r1, r25
    199c:	0c f4       	brge	.+2      	; 0x19a0 <progOutline(unsigned int, unsigned char)+0x2d0>
    199e:	fa ce       	rjmp	.-524    	; 0x1794 <progOutline(unsigned int, unsigned char)+0xc4>
    19a0:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <scannerGoesBack>
    19a4:	f7 ce       	rjmp	.-530    	; 0x1794 <progOutline(unsigned int, unsigned char)+0xc4>
    19a6:	c1 e9       	ldi	r28, 0x91	; 145
    19a8:	d5 e0       	ldi	r29, 0x05	; 5
    19aa:	09 91       	ld	r16, Y+
    19ac:	19 91       	ld	r17, Y+
    19ae:	80 d8       	rcall	.-3840   	; 0xab0 <getRandomColorValue()>
    19b0:	f8 2e       	mov	r15, r24
    19b2:	7e d8       	rcall	.-3844   	; 0xab0 <getRandomColorValue()>
    19b4:	e8 2e       	mov	r14, r24
    19b6:	7c d8       	rcall	.-3848   	; 0xab0 <getRandomColorValue()>
    19b8:	f8 01       	movw	r30, r16
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	e0 0f       	add	r30, r16
    19c0:	f1 1f       	adc	r31, r17
    19c2:	e2 58       	subi	r30, 0x82	; 130
    19c4:	f7 4f       	sbci	r31, 0xF7	; 247
    19c6:	80 83       	st	Z, r24
    19c8:	e1 82       	std	Z+1, r14	; 0x01
    19ca:	f2 82       	std	Z+2, r15	; 0x02
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	cd 31       	cpi	r28, 0x1D	; 29
    19d0:	d8 07       	cpc	r29, r24
    19d2:	59 f7       	brne	.-42     	; 0x19aa <progOutline(unsigned int, unsigned char)+0x2da>
    19d4:	d5 cf       	rjmp	.-86     	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    19d6:	c5 e2       	ldi	r28, 0x25	; 37
    19d8:	d5 e0       	ldi	r29, 0x05	; 5
    19da:	09 91       	ld	r16, Y+
    19dc:	19 91       	ld	r17, Y+
    19de:	68 d8       	rcall	.-3888   	; 0xab0 <getRandomColorValue()>
    19e0:	f8 2e       	mov	r15, r24
    19e2:	66 d8       	rcall	.-3892   	; 0xab0 <getRandomColorValue()>
    19e4:	e8 2e       	mov	r14, r24
    19e6:	64 d8       	rcall	.-3896   	; 0xab0 <getRandomColorValue()>
    19e8:	f8 01       	movw	r30, r16
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	e0 0f       	add	r30, r16
    19f0:	f1 1f       	adc	r31, r17
    19f2:	e2 58       	subi	r30, 0x82	; 130
    19f4:	f7 4f       	sbci	r31, 0xF7	; 247
    19f6:	80 83       	st	Z, r24
    19f8:	e1 82       	std	Z+1, r14	; 0x01
    19fa:	f2 82       	std	Z+2, r15	; 0x02
    19fc:	85 e0       	ldi	r24, 0x05	; 5
    19fe:	c1 39       	cpi	r28, 0x91	; 145
    1a00:	d8 07       	cpc	r29, r24
    1a02:	59 f7       	brne	.-42     	; 0x19da <progOutline(unsigned int, unsigned char)+0x30a>
    1a04:	bd cf       	rjmp	.-134    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a06:	cb ed       	ldi	r28, 0xDB	; 219
    1a08:	d4 e0       	ldi	r29, 0x04	; 4
    1a0a:	09 91       	ld	r16, Y+
    1a0c:	19 91       	ld	r17, Y+
    1a0e:	50 d8       	rcall	.-3936   	; 0xab0 <getRandomColorValue()>
    1a10:	f8 2e       	mov	r15, r24
    1a12:	4e d8       	rcall	.-3940   	; 0xab0 <getRandomColorValue()>
    1a14:	e8 2e       	mov	r14, r24
    1a16:	4c d8       	rcall	.-3944   	; 0xab0 <getRandomColorValue()>
    1a18:	f8 01       	movw	r30, r16
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	e0 0f       	add	r30, r16
    1a20:	f1 1f       	adc	r31, r17
    1a22:	e2 58       	subi	r30, 0x82	; 130
    1a24:	f7 4f       	sbci	r31, 0xF7	; 247
    1a26:	80 83       	st	Z, r24
    1a28:	e1 82       	std	Z+1, r14	; 0x01
    1a2a:	f2 82       	std	Z+2, r15	; 0x02
    1a2c:	85 e0       	ldi	r24, 0x05	; 5
    1a2e:	c5 32       	cpi	r28, 0x25	; 37
    1a30:	d8 07       	cpc	r29, r24
    1a32:	59 f7       	brne	.-42     	; 0x1a0a <progOutline(unsigned int, unsigned char)+0x33a>
    1a34:	a5 cf       	rjmp	.-182    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a36:	cb e9       	ldi	r28, 0x9B	; 155
    1a38:	d4 e0       	ldi	r29, 0x04	; 4
    1a3a:	09 91       	ld	r16, Y+
    1a3c:	19 91       	ld	r17, Y+
    1a3e:	38 d8       	rcall	.-3984   	; 0xab0 <getRandomColorValue()>
    1a40:	f8 2e       	mov	r15, r24
    1a42:	36 d8       	rcall	.-3988   	; 0xab0 <getRandomColorValue()>
    1a44:	e8 2e       	mov	r14, r24
    1a46:	34 d8       	rcall	.-3992   	; 0xab0 <getRandomColorValue()>
    1a48:	f8 01       	movw	r30, r16
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	e0 0f       	add	r30, r16
    1a50:	f1 1f       	adc	r31, r17
    1a52:	e2 58       	subi	r30, 0x82	; 130
    1a54:	f7 4f       	sbci	r31, 0xF7	; 247
    1a56:	80 83       	st	Z, r24
    1a58:	e1 82       	std	Z+1, r14	; 0x01
    1a5a:	f2 82       	std	Z+2, r15	; 0x02
    1a5c:	84 e0       	ldi	r24, 0x04	; 4
    1a5e:	cb 3d       	cpi	r28, 0xDB	; 219
    1a60:	d8 07       	cpc	r29, r24
    1a62:	59 f7       	brne	.-42     	; 0x1a3a <progOutline(unsigned int, unsigned char)+0x36a>
    1a64:	8d cf       	rjmp	.-230    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a66:	cf e5       	ldi	r28, 0x5F	; 95
    1a68:	d4 e0       	ldi	r29, 0x04	; 4
    1a6a:	09 91       	ld	r16, Y+
    1a6c:	19 91       	ld	r17, Y+
    1a6e:	20 d8       	rcall	.-4032   	; 0xab0 <getRandomColorValue()>
    1a70:	f8 2e       	mov	r15, r24
    1a72:	1e d8       	rcall	.-4036   	; 0xab0 <getRandomColorValue()>
    1a74:	e8 2e       	mov	r14, r24
    1a76:	1c d8       	rcall	.-4040   	; 0xab0 <getRandomColorValue()>
    1a78:	f8 01       	movw	r30, r16
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	e0 0f       	add	r30, r16
    1a80:	f1 1f       	adc	r31, r17
    1a82:	e2 58       	subi	r30, 0x82	; 130
    1a84:	f7 4f       	sbci	r31, 0xF7	; 247
    1a86:	80 83       	st	Z, r24
    1a88:	e1 82       	std	Z+1, r14	; 0x01
    1a8a:	f2 82       	std	Z+2, r15	; 0x02
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	cb 39       	cpi	r28, 0x9B	; 155
    1a90:	d8 07       	cpc	r29, r24
    1a92:	59 f7       	brne	.-42     	; 0x1a6a <progOutline(unsigned int, unsigned char)+0x39a>
    1a94:	75 cf       	rjmp	.-278    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a96:	c9 e2       	ldi	r28, 0x29	; 41
    1a98:	d4 e0       	ldi	r29, 0x04	; 4
    1a9a:	09 91       	ld	r16, Y+
    1a9c:	19 91       	ld	r17, Y+
    1a9e:	08 d8       	rcall	.-4080   	; 0xab0 <getRandomColorValue()>
    1aa0:	f8 2e       	mov	r15, r24
    1aa2:	06 d8       	rcall	.-4084   	; 0xab0 <getRandomColorValue()>
    1aa4:	e8 2e       	mov	r14, r24
    1aa6:	04 d8       	rcall	.-4088   	; 0xab0 <getRandomColorValue()>
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	e0 0f       	add	r30, r16
    1ab0:	f1 1f       	adc	r31, r17
    1ab2:	e2 58       	subi	r30, 0x82	; 130
    1ab4:	f7 4f       	sbci	r31, 0xF7	; 247
    1ab6:	80 83       	st	Z, r24
    1ab8:	e1 82       	std	Z+1, r14	; 0x01
    1aba:	f2 82       	std	Z+2, r15	; 0x02
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	cf 35       	cpi	r28, 0x5F	; 95
    1ac0:	d8 07       	cpc	r29, r24
    1ac2:	59 f7       	brne	.-42     	; 0x1a9a <progOutline(unsigned int, unsigned char)+0x3ca>
    1ac4:	5d cf       	rjmp	.-326    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1ac6:	c5 ef       	ldi	r28, 0xF5	; 245
    1ac8:	d3 e0       	ldi	r29, 0x03	; 3
    1aca:	09 91       	ld	r16, Y+
    1acc:	19 91       	ld	r17, Y+
    1ace:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1ad2:	f8 2e       	mov	r15, r24
    1ad4:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1ad8:	e8 2e       	mov	r14, r24
    1ada:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1ade:	f8 01       	movw	r30, r16
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	e0 0f       	add	r30, r16
    1ae6:	f1 1f       	adc	r31, r17
    1ae8:	e2 58       	subi	r30, 0x82	; 130
    1aea:	f7 4f       	sbci	r31, 0xF7	; 247
    1aec:	80 83       	st	Z, r24
    1aee:	e1 82       	std	Z+1, r14	; 0x01
    1af0:	f2 82       	std	Z+2, r15	; 0x02
    1af2:	84 e0       	ldi	r24, 0x04	; 4
    1af4:	c9 32       	cpi	r28, 0x29	; 41
    1af6:	d8 07       	cpc	r29, r24
    1af8:	41 f7       	brne	.-48     	; 0x1aca <progOutline(unsigned int, unsigned char)+0x3fa>
    1afa:	42 cf       	rjmp	.-380    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1afc:	c5 ec       	ldi	r28, 0xC5	; 197
    1afe:	d3 e0       	ldi	r29, 0x03	; 3
    1b00:	09 91       	ld	r16, Y+
    1b02:	19 91       	ld	r17, Y+
    1b04:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1b08:	f8 2e       	mov	r15, r24
    1b0a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1b0e:	e8 2e       	mov	r14, r24
    1b10:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1b14:	f8 01       	movw	r30, r16
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	e0 0f       	add	r30, r16
    1b1c:	f1 1f       	adc	r31, r17
    1b1e:	e2 58       	subi	r30, 0x82	; 130
    1b20:	f7 4f       	sbci	r31, 0xF7	; 247
    1b22:	80 83       	st	Z, r24
    1b24:	e1 82       	std	Z+1, r14	; 0x01
    1b26:	f2 82       	std	Z+2, r15	; 0x02
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	c5 3f       	cpi	r28, 0xF5	; 245
    1b2c:	d8 07       	cpc	r29, r24
    1b2e:	41 f7       	brne	.-48     	; 0x1b00 <progOutline(unsigned int, unsigned char)+0x430>
    1b30:	27 cf       	rjmp	.-434    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>

00001b32 <progScrollText(String, unsigned int, int, unsigned char)>:
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ff 92       	push	r15
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	8c 01       	movw	r16, r24
    1b42:	6b 01       	movw	r12, r22
    1b44:	ea 01       	movw	r28, r20
    1b46:	f2 2e       	mov	r15, r18
    1b48:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	1a c0       	rjmp	.+52     	; 0x1b84 <progScrollText(String, unsigned int, int, unsigned char)+0x52>
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	8d e7       	ldi	r24, 0x7D	; 125
    1b54:	9e e0       	ldi	r25, 0x0E	; 14
    1b56:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    1b5a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    1b5e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    1b62:	f0 92 69 08 	sts	0x0869, r15	; 0x800869 <nextSongPart>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1b6c:	84 e6       	ldi	r24, 0x64	; 100
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <millisCounterTimer+0x1>
    1b74:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <millisCounterTimer>
    1b78:	87 e1       	ldi	r24, 0x17	; 23
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1b80:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1b84:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
    1b88:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
    1b8c:	84 36       	cpi	r24, 0x64	; 100
    1b8e:	91 05       	cpc	r25, r1
    1b90:	08 f4       	brcc	.+2      	; 0x1b94 <progScrollText(String, unsigned int, int, unsigned char)+0x62>
    1b92:	5e c0       	rjmp	.+188    	; 0x1c50 <progScrollText(String, unsigned int, int, unsigned char)+0x11e>
    1b94:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
    1b98:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
    1b9c:	85 e0       	ldi	r24, 0x05	; 5
    1b9e:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <FastLED>
    1ba2:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1ba6:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1baa:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Framebuffer_GFX::clear()>
    1bae:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1bb2:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	56 96       	adiw	r26, 0x16	; 22
    1bba:	1c 92       	st	X, r1
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	0e 94 9c 20 	call	0x4138	; 0x4138 <Adafruit_GFX::setTextSize(unsigned char)>
    1bc2:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1bc6:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	ed 91       	ld	r30, X+
    1bce:	fc 91       	ld	r31, X
    1bd0:	00 8c       	ldd	r0, Z+24	; 0x18
    1bd2:	f1 8d       	ldd	r31, Z+25	; 0x19
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	09 95       	icall
    1bda:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1bde:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	86 3a       	cpi	r24, 0xA6	; 166
    1be6:	bf ef       	ldi	r27, 0xFF	; 255
    1be8:	9b 07       	cpc	r25, r27
    1bea:	7c f1       	brlt	.+94     	; 0x1c4a <progScrollText(String, unsigned int, int, unsigned char)+0x118>
    1bec:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1bf0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1bf4:	0e 94 cd 31 	call	0x639a	; 0x639a <yield>
    1bf8:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1bfc:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1c00:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Framebuffer_GFX::clear()>
    1c04:	e0 91 6c 0e 	lds	r30, 0x0E6C	; 0x800e6c <matrix>
    1c08:	f0 91 6d 0e 	lds	r31, 0x0E6D	; 0x800e6d <matrix+0x1>
    1c0c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1c10:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1c14:	94 87       	std	Z+12, r25	; 0x0c
    1c16:	83 87       	std	Z+11, r24	; 0x0b
    1c18:	8d e0       	ldi	r24, 0x0D	; 13
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	96 87       	std	Z+14, r25	; 0x0e
    1c1e:	85 87       	std	Z+13, r24	; 0x0d
    1c20:	d2 8b       	std	Z+18, r29	; 0x12
    1c22:	c1 8b       	std	Z+17, r28	; 0x11
    1c24:	d0 8b       	std	Z+16, r29	; 0x10
    1c26:	c7 87       	std	Z+15, r28	; 0x0f
    1c28:	b8 01       	movw	r22, r16
    1c2a:	cf 01       	movw	r24, r30
    1c2c:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <Print::print(String const&)>
    1c30:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1c34:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	df 90       	pop	r13
    1c44:	cf 90       	pop	r12
    1c46:	0c 94 bb 20 	jmp	0x4176	; 0x4176 <FastLED_NeoMatrix::show()>
    1c4a:	87 e1       	ldi	r24, 0x17	; 23
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	ce cf       	rjmp	.-100    	; 0x1bec <progScrollText(String, unsigned int, int, unsigned char)+0xba>
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	ff 90       	pop	r15
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	08 95       	ret

00001c60 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    1c60:	8f 92       	push	r8
    1c62:	9f 92       	push	r9
    1c64:	af 92       	push	r10
    1c66:	bf 92       	push	r11
    1c68:	cf 92       	push	r12
    1c6a:	df 92       	push	r13
    1c6c:	ef 92       	push	r14
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ec 01       	movw	r28, r24
    1c78:	5b 01       	movw	r10, r22
    1c7a:	6a 01       	movw	r12, r20
    1c7c:	49 01       	movw	r8, r18
    1c7e:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1c82:	81 11       	cpse	r24, r1
    1c84:	16 c0       	rjmp	.+44     	; 0x1cb2 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	8d e7       	ldi	r24, 0x7D	; 125
    1c8a:	9e e0       	ldi	r25, 0x0E	; 14
    1c8c:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    1c90:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1c94:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1c98:	e0 92 69 08 	sts	0x0869, r14	; 0x800869 <nextSongPart>
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1ca2:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <zaehlerWortArray+0x1>
    1ca6:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <zaehlerWortArray>
    1caa:	d0 92 71 08 	sts	0x0871, r13	; 0x800871 <millisCounterTimer+0x1>
    1cae:	c0 92 70 08 	sts	0x0870, r12	; 0x800870 <millisCounterTimer>
    1cb2:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
    1cb6:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
    1cba:	8c 15       	cp	r24, r12
    1cbc:	9d 05       	cpc	r25, r13
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    1cc0:	5b c0       	rjmp	.+182    	; 0x1d78 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1cc2:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
    1cc6:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
    1cca:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <zaehlerWortArray>
    1cce:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <zaehlerWortArray+0x1>
    1cd2:	a8 16       	cp	r10, r24
    1cd4:	b9 06       	cpc	r11, r25
    1cd6:	0c f4       	brge	.+2      	; 0x1cda <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    1cd8:	4f c0       	rjmp	.+158    	; 0x1d78 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1cda:	85 e0       	ldi	r24, 0x05	; 5
    1cdc:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <FastLED>
    1ce0:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1ce4:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1ce8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Framebuffer_GFX::clear()>
    1cec:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1cf0:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	56 96       	adiw	r26, 0x16	; 22
    1cf8:	1c 92       	st	X, r1
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 9c 20 	call	0x4138	; 0x4138 <Adafruit_GFX::setTextSize(unsigned char)>
    1d00:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1d04:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	00 8c       	ldd	r0, Z+24	; 0x18
    1d10:	f1 8d       	ldd	r31, Z+25	; 0x19
    1d12:	e0 2d       	mov	r30, r0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	09 95       	icall
    1d18:	0e 94 cd 31 	call	0x639a	; 0x639a <yield>
    1d1c:	e0 91 6c 0e 	lds	r30, 0x0E6C	; 0x800e6c <matrix>
    1d20:	f0 91 6d 0e 	lds	r31, 0x0E6D	; 0x800e6d <matrix+0x1>
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	94 87       	std	Z+12, r25	; 0x0c
    1d2a:	83 87       	std	Z+11, r24	; 0x0b
    1d2c:	8d e0       	ldi	r24, 0x0D	; 13
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	96 87       	std	Z+14, r25	; 0x0e
    1d32:	85 87       	std	Z+13, r24	; 0x0d
    1d34:	12 8b       	std	Z+18, r17	; 0x12
    1d36:	01 8b       	std	Z+17, r16	; 0x11
    1d38:	10 8b       	std	Z+16, r17	; 0x10
    1d3a:	07 87       	std	Z+15, r16	; 0x0f
    1d3c:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <zaehlerWortArray>
    1d40:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <zaehlerWortArray+0x1>
    1d44:	27 e0       	ldi	r18, 0x07	; 7
    1d46:	28 9f       	mul	r18, r24
    1d48:	b0 01       	movw	r22, r0
    1d4a:	29 9f       	mul	r18, r25
    1d4c:	70 0d       	add	r23, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	6c 0f       	add	r22, r28
    1d52:	7d 1f       	adc	r23, r29
    1d54:	cf 01       	movw	r24, r30
    1d56:	0e 94 1e 2e 	call	0x5c3c	; 0x5c3c <Print::print(String const&)>
    1d5a:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    1d5e:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    1d62:	0e 94 bb 20 	call	0x4176	; 0x4176 <FastLED_NeoMatrix::show()>
    1d66:	80 91 25 08 	lds	r24, 0x0825	; 0x800825 <zaehlerWortArray>
    1d6a:	90 91 26 08 	lds	r25, 0x0826	; 0x800826 <zaehlerWortArray+0x1>
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	90 93 26 08 	sts	0x0826, r25	; 0x800826 <zaehlerWortArray+0x1>
    1d74:	80 93 25 08 	sts	0x0825, r24	; 0x800825 <zaehlerWortArray>
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	08 95       	ret

00001d90 <FillLEDsFromPaletteColors(unsigned char)>:
    1d90:	df 92       	push	r13
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <FillLEDsFromPaletteColors(unsigned char)+0x10>
    1da0:	1f 92       	push	r1
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	d8 2e       	mov	r13, r24
    1da8:	8e e7       	ldi	r24, 0x7E	; 126
    1daa:	e8 2e       	mov	r14, r24
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	f8 2e       	mov	r15, r24
    1db0:	00 91 2c 08 	lds	r16, 0x082C	; 0x80082c <currentBlending>
    1db4:	10 91 2d 08 	lds	r17, 0x082D	; 0x80082d <currentBlending+0x1>
    1db8:	25 e0       	ldi	r18, 0x05	; 5
    1dba:	4d 2d       	mov	r20, r13
    1dbc:	6e e2       	ldi	r22, 0x2E	; 46
    1dbe:	78 e0       	ldi	r23, 0x08	; 8
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	0e 94 44 23 	call	0x4688	; 0x4688 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	f7 01       	movw	r30, r14
    1dcc:	80 83       	st	Z, r24
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	81 83       	std	Z+1, r24	; 0x01
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	82 83       	std	Z+2, r24	; 0x02
    1dd6:	f3 e0       	ldi	r31, 0x03	; 3
    1dd8:	df 0e       	add	r13, r31
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	e8 0e       	add	r14, r24
    1dde:	f1 1c       	adc	r15, r1
    1de0:	e0 ec       	ldi	r30, 0xC0	; 192
    1de2:	ee 16       	cp	r14, r30
    1de4:	eb e0       	ldi	r30, 0x0B	; 11
    1de6:	fe 06       	cpc	r15, r30
    1de8:	19 f7       	brne	.-58     	; 0x1db0 <FillLEDsFromPaletteColors(unsigned char)+0x20>
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	08 95       	ret

00001e00 <SetupBlackAndWhiteStripedPalette()>:
    1e00:	cf 93       	push	r28
    1e02:	df 93       	push	r29
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <SetupBlackAndWhiteStripedPalette()+0x6>
    1e06:	1f 92       	push	r1
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	19 82       	std	Y+1, r1	; 0x01
    1e0e:	1a 82       	std	Y+2, r1	; 0x02
    1e10:	1b 82       	std	Y+3, r1	; 0x03
    1e12:	ae 01       	movw	r20, r28
    1e14:	4f 5f       	subi	r20, 0xFF	; 255
    1e16:	5f 4f       	sbci	r21, 0xFF	; 255
    1e18:	60 e1       	ldi	r22, 0x10	; 16
    1e1a:	70 e0       	ldi	r23, 0x00	; 0
    1e1c:	8e e2       	ldi	r24, 0x2E	; 46
    1e1e:	98 e0       	ldi	r25, 0x08	; 8
    1e20:	0e 94 2f 23 	call	0x465e	; 0x465e <fill_solid(CRGB*, int, CRGB const&)>
    1e24:	ee e2       	ldi	r30, 0x2E	; 46
    1e26:	f8 e0       	ldi	r31, 0x08	; 8
    1e28:	8f ef       	ldi	r24, 0xFF	; 255
    1e2a:	80 83       	st	Z, r24
    1e2c:	81 83       	std	Z+1, r24	; 0x01
    1e2e:	82 83       	std	Z+2, r24	; 0x02
    1e30:	84 87       	std	Z+12, r24	; 0x0c
    1e32:	85 87       	std	Z+13, r24	; 0x0d
    1e34:	86 87       	std	Z+14, r24	; 0x0e
    1e36:	80 8f       	std	Z+24, r24	; 0x18
    1e38:	81 8f       	std	Z+25, r24	; 0x19
    1e3a:	82 8f       	std	Z+26, r24	; 0x1a
    1e3c:	84 a3       	std	Z+36, r24	; 0x24
    1e3e:	85 a3       	std	Z+37, r24	; 0x25
    1e40:	86 a3       	std	Z+38, r24	; 0x26
    1e42:	0f 90       	pop	r0
    1e44:	0f 90       	pop	r0
    1e46:	0f 90       	pop	r0
    1e48:	df 91       	pop	r29
    1e4a:	cf 91       	pop	r28
    1e4c:	08 95       	ret

00001e4e <progPalette(unsigned int, unsigned char, unsigned char)>:
    1e4e:	0f 93       	push	r16
    1e50:	1f 93       	push	r17
    1e52:	cf 93       	push	r28
    1e54:	8c 01       	movw	r16, r24
    1e56:	c4 2f       	mov	r28, r20
    1e58:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1e5c:	81 11       	cpse	r24, r1
    1e5e:	13 c0       	rjmp	.+38     	; 0x1e86 <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    1e60:	61 e0       	ldi	r22, 0x01	; 1
    1e62:	8d e7       	ldi	r24, 0x7D	; 125
    1e64:	9e e0       	ldi	r25, 0x0E	; 14
    1e66:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    1e6a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1e6e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1e72:	c0 93 69 08 	sts	0x0869, r28	; 0x800869 <nextSongPart>
    1e76:	81 e0       	ldi	r24, 0x01	; 1
    1e78:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1e7c:	c1 df       	rcall	.-126    	; 0x1e00 <SetupBlackAndWhiteStripedPalette()>
    1e7e:	10 92 2d 08 	sts	0x082D, r1	; 0x80082d <currentBlending+0x1>
    1e82:	10 92 2c 08 	sts	0x082C, r1	; 0x80082c <currentBlending>
    1e86:	80 91 61 08 	lds	r24, 0x0861	; 0x800861 <zaehler>
    1e8a:	90 91 62 08 	lds	r25, 0x0862	; 0x800862 <zaehler+0x1>
    1e8e:	01 96       	adiw	r24, 0x01	; 1
    1e90:	90 93 62 08 	sts	0x0862, r25	; 0x800862 <zaehler+0x1>
    1e94:	80 93 61 08 	sts	0x0861, r24	; 0x800861 <zaehler>
    1e98:	7b df       	rcall	.-266    	; 0x1d90 <FillLEDsFromPaletteColors(unsigned char)>
    1e9a:	8d e7       	ldi	r24, 0x7D	; 125
    1e9c:	9e e0       	ldi	r25, 0x0E	; 14
    1e9e:	cf 91       	pop	r28
    1ea0:	1f 91       	pop	r17
    1ea2:	0f 91       	pop	r16
    1ea4:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <CFastLED::show()>

00001ea8 <setupInterrupt()>:
    1ea8:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1eac:	8b e0       	ldi	r24, 0x0B	; 11
    1eae:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    1eb2:	8a e6       	ldi	r24, 0x6A	; 106
    1eb4:	98 e1       	ldi	r25, 0x18	; 24
    1eb6:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1eba:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1ebe:	82 e0       	ldi	r24, 0x02	; 2
    1ec0:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1ec4:	08 95       	ret

00001ec6 <__vector_32>:
    1ec6:	1f 92       	push	r1
    1ec8:	0f 92       	push	r0
    1eca:	0f b6       	in	r0, 0x3f	; 63
    1ecc:	0f 92       	push	r0
    1ece:	11 24       	eor	r1, r1
    1ed0:	2f 93       	push	r18
    1ed2:	3f 93       	push	r19
    1ed4:	8f 93       	push	r24
    1ed6:	9f 93       	push	r25
    1ed8:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterTimer>
    1edc:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterTimer+0x1>
    1ee0:	49 96       	adiw	r24, 0x19	; 25
    1ee2:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <millisCounterTimer+0x1>
    1ee6:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <millisCounterTimer>
    1eea:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <millisCounterForSeconds>
    1eee:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <millisCounterForSeconds+0x1>
    1ef2:	49 96       	adiw	r24, 0x19	; 25
    1ef4:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <millisCounterForSeconds+0x1>
    1ef8:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <millisCounterForSeconds>
    1efc:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <millisCounterForProgChange>
    1f00:	90 91 6f 08 	lds	r25, 0x086F	; 0x80086f <millisCounterForProgChange+0x1>
    1f04:	49 96       	adiw	r24, 0x19	; 25
    1f06:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <millisCounterForProgChange+0x1>
    1f0a:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <millisCounterForProgChange>
    1f0e:	91 e0       	ldi	r25, 0x01	; 1
    1f10:	90 93 6b 08 	sts	0x086B, r25	; 0x80086b <flag_processFastLED>
    1f14:	8b b1       	in	r24, 0x0b	; 11
    1f16:	20 e4       	ldi	r18, 0x40	; 64
    1f18:	82 27       	eor	r24, r18
    1f1a:	8b b9       	out	0x0b, r24	; 11
    1f1c:	20 91 6c 08 	lds	r18, 0x086C	; 0x80086c <millisCounterForSeconds>
    1f20:	30 91 6d 08 	lds	r19, 0x086D	; 0x80086d <millisCounterForSeconds+0x1>
    1f24:	28 3e       	cpi	r18, 0xE8	; 232
    1f26:	33 40       	sbci	r19, 0x03	; 3
    1f28:	30 f0       	brcs	.+12     	; 0x1f36 <__vector_32+0x70>
    1f2a:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <millisCounterForSeconds+0x1>
    1f2e:	10 92 6c 08 	sts	0x086C, r1	; 0x80086c <millisCounterForSeconds>
    1f32:	90 93 67 08 	sts	0x0867, r25	; 0x800867 <OneSecondHasPast>
    1f36:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <millisCounterForProgChange>
    1f3a:	30 91 6f 08 	lds	r19, 0x086F	; 0x80086f <millisCounterForProgChange+0x1>
    1f3e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    1f42:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    1f46:	28 17       	cp	r18, r24
    1f48:	39 07       	cpc	r19, r25
    1f4a:	c0 f0       	brcs	.+48     	; 0x1f7c <__vector_32+0xb6>
    1f4c:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <nextSongPart>
    1f50:	80 93 68 08 	sts	0x0868, r24	; 0x800868 <prog>
    1f54:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
    1f58:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
    1f5c:	10 92 6f 08 	sts	0x086F, r1	; 0x80086f <millisCounterForProgChange+0x1>
    1f60:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <millisCounterForProgChange>
    1f64:	10 92 62 08 	sts	0x0862, r1	; 0x800862 <zaehler+0x1>
    1f68:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <zaehler>
    1f6c:	87 e1       	ldi	r24, 0x17	; 23
    1f6e:	90 e0       	ldi	r25, 0x00	; 0
    1f70:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1f74:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1f78:	10 92 6a 08 	sts	0x086A, r1	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1f7c:	9f 91       	pop	r25
    1f7e:	8f 91       	pop	r24
    1f80:	3f 91       	pop	r19
    1f82:	2f 91       	pop	r18
    1f84:	0f 90       	pop	r0
    1f86:	0f be       	out	0x3f, r0	; 63
    1f88:	0f 90       	pop	r0
    1f8a:	1f 90       	pop	r1
    1f8c:	18 95       	reti

00001f8e <switchToSong(unsigned char)>:
    1f8e:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterTimer+0x1>
    1f92:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterTimer>
    1f96:	10 92 6f 08 	sts	0x086F, r1	; 0x80086f <millisCounterForProgChange+0x1>
    1f9a:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <millisCounterForProgChange>
    1f9e:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <progBlingBlingColoring_rounds+0x1>
    1fa2:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <progBlingBlingColoring_rounds>
    1fa6:	10 92 24 08 	sts	0x0824, r1	; 0x800824 <progCLED_hue>
    1faa:	10 92 23 08 	sts	0x0823, r1	; 0x800823 <progCLED_counter+0x1>
    1fae:	10 92 22 08 	sts	0x0822, r1	; 0x800822 <progCLED_counter>
    1fb2:	10 92 62 08 	sts	0x0862, r1	; 0x800862 <zaehler+0x1>
    1fb6:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <zaehler>
    1fba:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <songID>
    1fbe:	10 92 68 08 	sts	0x0868, r1	; 0x800868 <prog>
    1fc2:	10 92 6a 08 	sts	0x086A, r1	; 0x80086a <nextChangeMillisAlreadyCalculated>
    1fc6:	67 e1       	ldi	r22, 0x17	; 23
    1fc8:	71 e0       	ldi	r23, 0x01	; 1
    1fca:	8d e0       	ldi	r24, 0x0D	; 13
    1fcc:	9f e0       	ldi	r25, 0x0F	; 15
    1fce:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    1fd2:	8d e0       	ldi	r24, 0x0D	; 13
    1fd4:	9f e0       	ldi	r25, 0x0F	; 15
    1fd6:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <Print::println()>

00001fda <setup>:
    1fda:	af 92       	push	r10
    1fdc:	bf 92       	push	r11
    1fde:	cf 92       	push	r12
    1fe0:	df 92       	push	r13
    1fe2:	ef 92       	push	r14
    1fe4:	ff 92       	push	r15
    1fe6:	0f 93       	push	r16
    1fe8:	1f 93       	push	r17
    1fea:	cf 93       	push	r28
    1fec:	df 93       	push	r29
    1fee:	68 ee       	ldi	r22, 0xE8	; 232
    1ff0:	73 e0       	ldi	r23, 0x03	; 3
    1ff2:	80 e0       	ldi	r24, 0x00	; 0
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	0e 94 3a 2a 	call	0x5474	; 0x5474 <delay>
    1ffa:	4f ef       	ldi	r20, 0xFF	; 255
    1ffc:	60 e4       	ldi	r22, 0x40	; 64
    1ffe:	70 e0       	ldi	r23, 0x00	; 0
    2000:	88 e9       	ldi	r24, 0x98	; 152
    2002:	9e e0       	ldi	r25, 0x0E	; 14
    2004:	0e 94 1d 2d 	call	0x5a3a	; 0x5a3a <HardwareSerial::_begin(unsigned int, unsigned char)>
    2008:	56 9a       	sbi	0x0a, 6	; 10
    200a:	88 e2       	ldi	r24, 0x28	; 40
    200c:	0e 94 a2 28 	call	0x5144	; 0x5144 <analogRead>
    2010:	bc 01       	movw	r22, r24
    2012:	99 0f       	add	r25, r25
    2014:	88 0b       	sbc	r24, r24
    2016:	99 0b       	sbc	r25, r25
    2018:	1f 92       	push	r1
    201a:	1f 92       	push	r1
    201c:	1f 92       	push	r1
    201e:	28 e7       	ldi	r18, 0x78	; 120
    2020:	2f 93       	push	r18
    2022:	a1 2c       	mov	r10, r1
    2024:	b1 2c       	mov	r11, r1
    2026:	65 01       	movw	r12, r10
    2028:	ee 24       	eor	r14, r14
    202a:	ea 94       	dec	r14
    202c:	13 e0       	ldi	r17, 0x03	; 3
    202e:	f1 2e       	mov	r15, r17
    2030:	00 e0       	ldi	r16, 0x00	; 0
    2032:	10 e0       	ldi	r17, 0x00	; 0
    2034:	20 e0       	ldi	r18, 0x00	; 0
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	a9 01       	movw	r20, r18
    203a:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <map(long, long, long, long, long)>
    203e:	60 93 74 08 	sts	0x0874, r22	; 0x800874 <voltageSmooth>
    2042:	82 e3       	ldi	r24, 0x32	; 50
    2044:	91 e0       	ldi	r25, 0x01	; 1
    2046:	0e 94 e7 2d 	call	0x5bce	; 0x5bce <operator new(unsigned int)>
    204a:	ec 01       	movw	r28, r24
    204c:	0a e0       	ldi	r16, 0x0A	; 10
    204e:	27 e1       	ldi	r18, 0x17	; 23
    2050:	30 e0       	ldi	r19, 0x00	; 0
    2052:	46 e1       	ldi	r20, 0x16	; 22
    2054:	50 e0       	ldi	r21, 0x00	; 0
    2056:	6e e7       	ldi	r22, 0x7E	; 126
    2058:	78 e0       	ldi	r23, 0x08	; 8
    205a:	0e 94 9e 20 	call	0x413c	; 0x413c <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    205e:	d0 93 6d 0e 	sts	0x0E6D, r29	; 0x800e6d <matrix+0x1>
    2062:	c0 93 6c 0e 	sts	0x0E6C, r28	; 0x800e6c <matrix>
    2066:	80 91 99 07 	lds	r24, 0x0799	; 0x800799 <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    206a:	0f 90       	pop	r0
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	81 11       	cpse	r24, r1
    2074:	4d c0       	rjmp	.+154    	; 0x2110 <__stack+0x11>
    2076:	89 e9       	ldi	r24, 0x99	; 153
    2078:	97 e0       	ldi	r25, 0x07	; 7
    207a:	0e 94 e8 2d 	call	0x5bd0	; 0x5bd0 <__cxa_guard_acquire>
    207e:	89 2b       	or	r24, r25
    2080:	09 f4       	brne	.+2      	; 0x2084 <setup+0xaa>
    2082:	46 c0       	rjmp	.+140    	; 0x2110 <__stack+0x11>
    2084:	10 92 a4 07 	sts	0x07A4, r1	; 0x8007a4 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    2088:	10 92 a3 07 	sts	0x07A3, r1	; 0x8007a3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    208c:	8f ef       	ldi	r24, 0xFF	; 255
    208e:	80 93 a7 07 	sts	0x07A7, r24	; 0x8007a7 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    2092:	80 93 a8 07 	sts	0x07A8, r24	; 0x8007a8 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    2096:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    209a:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    209e:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    20a2:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    20a6:	81 e0       	ldi	r24, 0x01	; 1
    20a8:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    20ac:	10 92 af 07 	sts	0x07AF, r1	; 0x8007af <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    20b0:	10 92 ae 07 	sts	0x07AE, r1	; 0x8007ae <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    20b4:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    20b8:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    20bc:	80 91 7b 0e 	lds	r24, 0x0E7B	; 0x800e7b <CLEDController::m_pHead>
    20c0:	90 91 7c 0e 	lds	r25, 0x0E7C	; 0x800e7c <CLEDController::m_pHead+0x1>
    20c4:	89 2b       	or	r24, r25
    20c6:	31 f4       	brne	.+12     	; 0x20d4 <setup+0xfa>
    20c8:	81 ea       	ldi	r24, 0xA1	; 161
    20ca:	97 e0       	ldi	r25, 0x07	; 7
    20cc:	90 93 7c 0e 	sts	0x0E7C, r25	; 0x800e7c <CLEDController::m_pHead+0x1>
    20d0:	80 93 7b 0e 	sts	0x0E7B, r24	; 0x800e7b <CLEDController::m_pHead>
    20d4:	e0 91 79 0e 	lds	r30, 0x0E79	; 0x800e79 <CLEDController::m_pTail>
    20d8:	f0 91 7a 0e 	lds	r31, 0x0E7A	; 0x800e7a <CLEDController::m_pTail+0x1>
    20dc:	30 97       	sbiw	r30, 0x00	; 0
    20de:	21 f0       	breq	.+8      	; 0x20e8 <setup+0x10e>
    20e0:	81 ea       	ldi	r24, 0xA1	; 161
    20e2:	97 e0       	ldi	r25, 0x07	; 7
    20e4:	95 83       	std	Z+5, r25	; 0x05
    20e6:	84 83       	std	Z+4, r24	; 0x04
    20e8:	81 ea       	ldi	r24, 0xA1	; 161
    20ea:	97 e0       	ldi	r25, 0x07	; 7
    20ec:	90 93 7a 0e 	sts	0x0E7A, r25	; 0x800e7a <CLEDController::m_pTail+0x1>
    20f0:	80 93 79 0e 	sts	0x0E79, r24	; 0x800e79 <CLEDController::m_pTail>
    20f4:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    20f8:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    20fc:	87 e6       	ldi	r24, 0x67	; 103
    20fe:	93 e0       	ldi	r25, 0x03	; 3
    2100:	90 93 a2 07 	sts	0x07A2, r25	; 0x8007a2 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    2104:	80 93 a1 07 	sts	0x07A1, r24	; 0x8007a1 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    2108:	89 e9       	ldi	r24, 0x99	; 153
    210a:	97 e0       	ldi	r25, 0x07	; 7
    210c:	0e 94 f1 2d 	call	0x5be2	; 0x5be2 <__cxa_guard_release>
    2110:	30 e0       	ldi	r19, 0x00	; 0
    2112:	20 e0       	ldi	r18, 0x00	; 0
    2114:	4a ef       	ldi	r20, 0xFA	; 250
    2116:	51 e0       	ldi	r21, 0x01	; 1
    2118:	6e e7       	ldi	r22, 0x7E	; 126
    211a:	78 e0       	ldi	r23, 0x08	; 8
    211c:	81 ea       	ldi	r24, 0xA1	; 161
    211e:	97 e0       	ldi	r25, 0x07	; 7
    2120:	0e 94 13 26 	call	0x4c26	; 0x4c26 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    2124:	fc 01       	movw	r30, r24
    2126:	8f ef       	ldi	r24, 0xFF	; 255
    2128:	86 83       	std	Z+6, r24	; 0x06
    212a:	80 eb       	ldi	r24, 0xB0	; 176
    212c:	87 83       	std	Z+7, r24	; 0x07
    212e:	80 ef       	ldi	r24, 0xF0	; 240
    2130:	80 87       	std	Z+8, r24	; 0x08
    2132:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    2136:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    213a:	0e 94 15 21 	call	0x422a	; 0x422a <Framebuffer_GFX::begin()>
    213e:	80 91 6c 0e 	lds	r24, 0x0E6C	; 0x800e6c <matrix>
    2142:	90 91 6d 0e 	lds	r25, 0x0E6D	; 0x800e6d <matrix+0x1>
    2146:	25 e0       	ldi	r18, 0x05	; 5
    2148:	20 93 7d 0e 	sts	0x0E7D, r18	; 0x800e7d <FastLED>
    214c:	fc 01       	movw	r30, r24
    214e:	16 8a       	std	Z+22, r1	; 0x16
    2150:	69 e0       	ldi	r22, 0x09	; 9
    2152:	74 e0       	ldi	r23, 0x04	; 4
    2154:	0e 94 29 23 	call	0x4652	; 0x4652 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    2158:	f8 94       	cli
    215a:	a6 de       	rcall	.-692    	; 0x1ea8 <setupInterrupt()>
    215c:	78 94       	sei
    215e:	68 ef       	ldi	r22, 0xF8	; 248
    2160:	75 e0       	ldi	r23, 0x05	; 5
    2162:	8e e2       	ldi	r24, 0x2E	; 46
    2164:	98 e0       	ldi	r25, 0x08	; 8
    2166:	0e 94 2c 05 	call	0xa58	; 0xa58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	90 93 2d 08 	sts	0x082D, r25	; 0x80082d <currentBlending+0x1>
    2172:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <currentBlending>
    2176:	80 e0       	ldi	r24, 0x00	; 0
    2178:	df 91       	pop	r29
    217a:	cf 91       	pop	r28
    217c:	1f 91       	pop	r17
    217e:	0f 91       	pop	r16
    2180:	ff 90       	pop	r15
    2182:	ef 90       	pop	r14
    2184:	df 90       	pop	r13
    2186:	cf 90       	pop	r12
    2188:	bf 90       	pop	r11
    218a:	af 90       	pop	r10
    218c:	00 cf       	rjmp	.-512    	; 0x1f8e <switchToSong(unsigned char)>

0000218e <defaultLoop()>:
    218e:	ef 92       	push	r14
    2190:	ff 92       	push	r15
    2192:	0f 93       	push	r16
    2194:	1f 93       	push	r17
    2196:	cf 93       	push	r28
    2198:	df 93       	push	r29
    219a:	00 d0       	rcall	.+0      	; 0x219c <defaultLoop()+0xe>
    219c:	00 d0       	rcall	.+0      	; 0x219e <defaultLoop()+0x10>
    219e:	00 d0       	rcall	.+0      	; 0x21a0 <defaultLoop()+0x12>
    21a0:	1f 92       	push	r1
    21a2:	cd b7       	in	r28, 0x3d	; 61
    21a4:	de b7       	in	r29, 0x3e	; 62
    21a6:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <prog>
    21aa:	86 30       	cpi	r24, 0x06	; 6
    21ac:	09 f4       	brne	.+2      	; 0x21b0 <defaultLoop()+0x22>
    21ae:	7c c0       	rjmp	.+248    	; 0x22a8 <defaultLoop()+0x11a>
    21b0:	18 f5       	brcc	.+70     	; 0x21f8 <defaultLoop()+0x6a>
    21b2:	82 30       	cpi	r24, 0x02	; 2
    21b4:	09 f4       	brne	.+2      	; 0x21b8 <defaultLoop()+0x2a>
    21b6:	4c c0       	rjmp	.+152    	; 0x2250 <defaultLoop()+0xc2>
    21b8:	90 f4       	brcc	.+36     	; 0x21de <defaultLoop()+0x50>
    21ba:	88 23       	and	r24, r24
    21bc:	d9 f1       	breq	.+118    	; 0x2234 <defaultLoop()+0xa6>
    21be:	81 30       	cpi	r24, 0x01	; 1
    21c0:	09 f4       	brne	.+2      	; 0x21c4 <defaultLoop()+0x36>
    21c2:	3e c0       	rjmp	.+124    	; 0x2240 <defaultLoop()+0xb2>
    21c4:	27 96       	adiw	r28, 0x07	; 7
    21c6:	0f b6       	in	r0, 0x3f	; 63
    21c8:	f8 94       	cli
    21ca:	de bf       	out	0x3e, r29	; 62
    21cc:	0f be       	out	0x3f, r0	; 63
    21ce:	cd bf       	out	0x3d, r28	; 61
    21d0:	df 91       	pop	r29
    21d2:	cf 91       	pop	r28
    21d4:	1f 91       	pop	r17
    21d6:	0f 91       	pop	r16
    21d8:	ff 90       	pop	r15
    21da:	ef 90       	pop	r14
    21dc:	08 95       	ret
    21de:	84 30       	cpi	r24, 0x04	; 4
    21e0:	09 f4       	brne	.+2      	; 0x21e4 <defaultLoop()+0x56>
    21e2:	5c c0       	rjmp	.+184    	; 0x229c <defaultLoop()+0x10e>
    21e4:	08 f4       	brcc	.+2      	; 0x21e8 <defaultLoop()+0x5a>
    21e6:	45 c0       	rjmp	.+138    	; 0x2272 <defaultLoop()+0xe4>
    21e8:	40 ed       	ldi	r20, 0xD0	; 208
    21ea:	57 e0       	ldi	r21, 0x07	; 7
    21ec:	66 e0       	ldi	r22, 0x06	; 6
    21ee:	88 e9       	ldi	r24, 0x98	; 152
    21f0:	9a e3       	ldi	r25, 0x3A	; 58
    21f2:	0e 94 76 06 	call	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    21f6:	e6 cf       	rjmp	.-52     	; 0x21c4 <defaultLoop()+0x36>
    21f8:	89 30       	cpi	r24, 0x09	; 9
    21fa:	09 f4       	brne	.+2      	; 0x21fe <defaultLoop()+0x70>
    21fc:	68 c0       	rjmp	.+208    	; 0x22ce <defaultLoop()+0x140>
    21fe:	58 f4       	brcc	.+22     	; 0x2216 <defaultLoop()+0x88>
    2200:	87 30       	cpi	r24, 0x07	; 7
    2202:	09 f4       	brne	.+2      	; 0x2206 <defaultLoop()+0x78>
    2204:	5c c0       	rjmp	.+184    	; 0x22be <defaultLoop()+0x130>
    2206:	88 30       	cpi	r24, 0x08	; 8
    2208:	e9 f6       	brne	.-70     	; 0x21c4 <defaultLoop()+0x36>
    220a:	69 e0       	ldi	r22, 0x09	; 9
    220c:	88 e9       	ldi	r24, 0x98	; 152
    220e:	9a e3       	ldi	r25, 0x3A	; 58
    2210:	0e 94 36 06 	call	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    2214:	d7 cf       	rjmp	.-82     	; 0x21c4 <defaultLoop()+0x36>
    2216:	8b 30       	cpi	r24, 0x0B	; 11
    2218:	09 f4       	brne	.+2      	; 0x221c <defaultLoop()+0x8e>
    221a:	63 c0       	rjmp	.+198    	; 0x22e2 <defaultLoop()+0x154>
    221c:	08 f4       	brcc	.+2      	; 0x2220 <defaultLoop()+0x92>
    221e:	5c c0       	rjmp	.+184    	; 0x22d8 <defaultLoop()+0x14a>
    2220:	84 36       	cpi	r24, 0x64	; 100
    2222:	81 f6       	brne	.-96     	; 0x21c4 <defaultLoop()+0x36>
    2224:	60 e0       	ldi	r22, 0x00	; 0
    2226:	8d e7       	ldi	r24, 0x7D	; 125
    2228:	9e e0       	ldi	r25, 0x0E	; 14
    222a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    222e:	80 e0       	ldi	r24, 0x00	; 0
    2230:	ae de       	rcall	.-676    	; 0x1f8e <switchToSong(unsigned char)>
    2232:	c8 cf       	rjmp	.-112    	; 0x21c4 <defaultLoop()+0x36>
    2234:	42 e0       	ldi	r20, 0x02	; 2
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	88 e8       	ldi	r24, 0x88	; 136
    223a:	93 e1       	ldi	r25, 0x13	; 19
    223c:	08 de       	rcall	.-1008   	; 0x1e4e <progPalette(unsigned int, unsigned char, unsigned char)>
    223e:	c2 cf       	rjmp	.-124    	; 0x21c4 <defaultLoop()+0x36>
    2240:	42 e0       	ldi	r20, 0x02	; 2
    2242:	60 ea       	ldi	r22, 0xA0	; 160
    2244:	7f e0       	ldi	r23, 0x0F	; 15
    2246:	88 e9       	ldi	r24, 0x98	; 152
    2248:	9a e3       	ldi	r25, 0x3A	; 58
    224a:	0e 94 da 07 	call	0xfb4	; 0xfb4 <progStern(unsigned int, int, unsigned char)>
    224e:	ba cf       	rjmp	.-140    	; 0x21c4 <defaultLoop()+0x36>
    2250:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2254:	7c 01       	movw	r14, r24
    2256:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    225a:	8c 01       	movw	r16, r24
    225c:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2260:	9c 01       	movw	r18, r24
    2262:	42 e3       	ldi	r20, 0x32	; 50
    2264:	50 e0       	ldi	r21, 0x00	; 0
    2266:	63 e0       	ldi	r22, 0x03	; 3
    2268:	88 e8       	ldi	r24, 0x88	; 136
    226a:	93 e1       	ldi	r25, 0x13	; 19
    226c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2270:	a9 cf       	rjmp	.-174    	; 0x21c4 <defaultLoop()+0x36>
    2272:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    2276:	8c 01       	movw	r16, r24
    2278:	68 e2       	ldi	r22, 0x28	; 40
    227a:	71 e0       	ldi	r23, 0x01	; 1
    227c:	ce 01       	movw	r24, r28
    227e:	01 96       	adiw	r24, 0x01	; 1
    2280:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    2284:	24 e0       	ldi	r18, 0x04	; 4
    2286:	a8 01       	movw	r20, r16
    2288:	60 e3       	ldi	r22, 0x30	; 48
    228a:	75 e7       	ldi	r23, 0x75	; 117
    228c:	ce 01       	movw	r24, r28
    228e:	01 96       	adiw	r24, 0x01	; 1
    2290:	50 dc       	rcall	.-1888   	; 0x1b32 <progScrollText(String, unsigned int, int, unsigned char)>
    2292:	ce 01       	movw	r24, r28
    2294:	01 96       	adiw	r24, 0x01	; 1
    2296:	0e 94 23 31 	call	0x6246	; 0x6246 <String::~String()>
    229a:	94 cf       	rjmp	.-216    	; 0x21c4 <defaultLoop()+0x36>
    229c:	65 e0       	ldi	r22, 0x05	; 5
    229e:	88 e9       	ldi	r24, 0x98	; 152
    22a0:	9a e3       	ldi	r25, 0x3A	; 58
    22a2:	0e 94 38 07 	call	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    22a6:	8e cf       	rjmp	.-228    	; 0x21c4 <defaultLoop()+0x36>
    22a8:	ee 24       	eor	r14, r14
    22aa:	ea 94       	dec	r14
    22ac:	f1 2c       	mov	r15, r1
    22ae:	0f ef       	ldi	r16, 0xFF	; 255
    22b0:	10 e0       	ldi	r17, 0x00	; 0
    22b2:	2f ef       	ldi	r18, 0xFF	; 255
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	42 e3       	ldi	r20, 0x32	; 50
    22b8:	50 e0       	ldi	r21, 0x00	; 0
    22ba:	67 e0       	ldi	r22, 0x07	; 7
    22bc:	d5 cf       	rjmp	.-86     	; 0x2268 <defaultLoop()+0xda>
    22be:	48 ee       	ldi	r20, 0xE8	; 232
    22c0:	53 e0       	ldi	r21, 0x03	; 3
    22c2:	68 e0       	ldi	r22, 0x08	; 8
    22c4:	88 e9       	ldi	r24, 0x98	; 152
    22c6:	9a e3       	ldi	r25, 0x3A	; 58
    22c8:	0e 94 4d 09 	call	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    22cc:	7b cf       	rjmp	.-266    	; 0x21c4 <defaultLoop()+0x36>
    22ce:	6a e0       	ldi	r22, 0x0A	; 10
    22d0:	80 e1       	ldi	r24, 0x10	; 16
    22d2:	97 e2       	ldi	r25, 0x27	; 39
    22d4:	fd d9       	rcall	.-3078   	; 0x16d0 <progOutline(unsigned int, unsigned char)>
    22d6:	76 cf       	rjmp	.-276    	; 0x21c4 <defaultLoop()+0x36>
    22d8:	6b e0       	ldi	r22, 0x0B	; 11
    22da:	80 e1       	ldi	r24, 0x10	; 16
    22dc:	97 e2       	ldi	r25, 0x27	; 39
    22de:	f6 d8       	rcall	.-3604   	; 0x14cc <progMovingLines(unsigned int, unsigned char)>
    22e0:	71 cf       	rjmp	.-286    	; 0x21c4 <defaultLoop()+0x36>
    22e2:	44 ef       	ldi	r20, 0xF4	; 244
    22e4:	51 e0       	ldi	r21, 0x01	; 1
    22e6:	64 e6       	ldi	r22, 0x64	; 100
    22e8:	88 e9       	ldi	r24, 0x98	; 152
    22ea:	9a e3       	ldi	r25, 0x3A	; 58
    22ec:	4b d8       	rcall	.-3946   	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    22ee:	6a cf       	rjmp	.-300    	; 0x21c4 <defaultLoop()+0x36>

000022f0 <LearnToFly()>:
    22f0:	ef 92       	push	r14
    22f2:	ff 92       	push	r15
    22f4:	0f 93       	push	r16
    22f6:	1f 93       	push	r17
    22f8:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <prog>
    22fc:	86 30       	cpi	r24, 0x06	; 6
    22fe:	09 f4       	brne	.+2      	; 0x2302 <LearnToFly()+0x12>
    2300:	65 c0       	rjmp	.+202    	; 0x23cc <LearnToFly()+0xdc>
    2302:	e8 f4       	brcc	.+58     	; 0x233e <LearnToFly()+0x4e>
    2304:	82 30       	cpi	r24, 0x02	; 2
    2306:	09 f4       	brne	.+2      	; 0x230a <LearnToFly()+0x1a>
    2308:	52 c0       	rjmp	.+164    	; 0x23ae <LearnToFly()+0xbe>
    230a:	50 f4       	brcc	.+20     	; 0x2320 <LearnToFly()+0x30>
    230c:	88 23       	and	r24, r24
    230e:	e9 f1       	breq	.+122    	; 0x238a <LearnToFly()+0x9a>
    2310:	81 30       	cpi	r24, 0x01	; 1
    2312:	09 f4       	brne	.+2      	; 0x2316 <LearnToFly()+0x26>
    2314:	43 c0       	rjmp	.+134    	; 0x239c <LearnToFly()+0xac>
    2316:	1f 91       	pop	r17
    2318:	0f 91       	pop	r16
    231a:	ff 90       	pop	r15
    231c:	ef 90       	pop	r14
    231e:	08 95       	ret
    2320:	84 30       	cpi	r24, 0x04	; 4
    2322:	09 f4       	brne	.+2      	; 0x2326 <LearnToFly()+0x36>
    2324:	48 c0       	rjmp	.+144    	; 0x23b6 <LearnToFly()+0xc6>
    2326:	64 e0       	ldi	r22, 0x04	; 4
    2328:	85 30       	cpi	r24, 0x05	; 5
    232a:	80 f1       	brcs	.+96     	; 0x238c <LearnToFly()+0x9c>
    232c:	66 e0       	ldi	r22, 0x06	; 6
    232e:	80 e3       	ldi	r24, 0x30	; 48
    2330:	95 e7       	ldi	r25, 0x75	; 117
    2332:	1f 91       	pop	r17
    2334:	0f 91       	pop	r16
    2336:	ff 90       	pop	r15
    2338:	ef 90       	pop	r14
    233a:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    233e:	89 30       	cpi	r24, 0x09	; 9
    2340:	09 f4       	brne	.+2      	; 0x2344 <LearnToFly()+0x54>
    2342:	5c c0       	rjmp	.+184    	; 0x23fc <LearnToFly()+0x10c>
    2344:	80 f4       	brcc	.+32     	; 0x2366 <LearnToFly()+0x76>
    2346:	87 30       	cpi	r24, 0x07	; 7
    2348:	09 f4       	brne	.+2      	; 0x234c <LearnToFly()+0x5c>
    234a:	49 c0       	rjmp	.+146    	; 0x23de <LearnToFly()+0xee>
    234c:	49 ea       	ldi	r20, 0xA9	; 169
    234e:	51 e0       	ldi	r21, 0x01	; 1
    2350:	69 e0       	ldi	r22, 0x09	; 9
    2352:	88 30       	cpi	r24, 0x08	; 8
    2354:	01 f7       	brne	.-64     	; 0x2316 <LearnToFly()+0x26>
    2356:	82 e8       	ldi	r24, 0x82	; 130
    2358:	90 e6       	ldi	r25, 0x60	; 96
    235a:	1f 91       	pop	r17
    235c:	0f 91       	pop	r16
    235e:	ff 90       	pop	r15
    2360:	ef 90       	pop	r14
    2362:	0c 94 76 06 	jmp	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    2366:	8b 30       	cpi	r24, 0x0B	; 11
    2368:	09 f4       	brne	.+2      	; 0x236c <LearnToFly()+0x7c>
    236a:	5b c0       	rjmp	.+182    	; 0x2422 <LearnToFly()+0x132>
    236c:	08 f4       	brcc	.+2      	; 0x2370 <LearnToFly()+0x80>
    236e:	4a c0       	rjmp	.+148    	; 0x2404 <LearnToFly()+0x114>
    2370:	84 36       	cpi	r24, 0x64	; 100
    2372:	89 f6       	brne	.-94     	; 0x2316 <LearnToFly()+0x26>
    2374:	60 e0       	ldi	r22, 0x00	; 0
    2376:	8d e7       	ldi	r24, 0x7D	; 125
    2378:	9e e0       	ldi	r25, 0x0E	; 14
    237a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	1f 91       	pop	r17
    2382:	0f 91       	pop	r16
    2384:	ff 90       	pop	r15
    2386:	ef 90       	pop	r14
    2388:	02 ce       	rjmp	.-1020   	; 0x1f8e <switchToSong(unsigned char)>
    238a:	61 e0       	ldi	r22, 0x01	; 1
    238c:	86 e2       	ldi	r24, 0x26	; 38
    238e:	97 e3       	ldi	r25, 0x37	; 55
    2390:	1f 91       	pop	r17
    2392:	0f 91       	pop	r16
    2394:	ff 90       	pop	r15
    2396:	ef 90       	pop	r14
    2398:	0c 94 27 09 	jmp	0x124e	; 0x124e <progStern(unsigned int, unsigned char)>
    239c:	62 e0       	ldi	r22, 0x02	; 2
    239e:	8b e4       	ldi	r24, 0x4B	; 75
    23a0:	9e e6       	ldi	r25, 0x6E	; 110
    23a2:	1f 91       	pop	r17
    23a4:	0f 91       	pop	r16
    23a6:	ff 90       	pop	r15
    23a8:	ef 90       	pop	r14
    23aa:	0c 94 38 07 	jmp	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    23ae:	49 ea       	ldi	r20, 0xA9	; 169
    23b0:	51 e0       	ldi	r21, 0x01	; 1
    23b2:	63 e0       	ldi	r22, 0x03	; 3
    23b4:	d0 cf       	rjmp	.-96     	; 0x2356 <LearnToFly()+0x66>
    23b6:	49 ea       	ldi	r20, 0xA9	; 169
    23b8:	51 e0       	ldi	r21, 0x01	; 1
    23ba:	65 e0       	ldi	r22, 0x05	; 5
    23bc:	8b e4       	ldi	r24, 0x4B	; 75
    23be:	9e e6       	ldi	r25, 0x6E	; 110
    23c0:	1f 91       	pop	r17
    23c2:	0f 91       	pop	r16
    23c4:	ff 90       	pop	r15
    23c6:	ef 90       	pop	r14
    23c8:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    23cc:	67 e0       	ldi	r22, 0x07	; 7
    23ce:	8b e4       	ldi	r24, 0x4B	; 75
    23d0:	9e e6       	ldi	r25, 0x6E	; 110
    23d2:	1f 91       	pop	r17
    23d4:	0f 91       	pop	r16
    23d6:	ff 90       	pop	r15
    23d8:	ef 90       	pop	r14
    23da:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <progBlingBlingColoring(unsigned int, unsigned char)>
    23de:	ee 24       	eor	r14, r14
    23e0:	ea 94       	dec	r14
    23e2:	f1 2c       	mov	r15, r1
    23e4:	0f ef       	ldi	r16, 0xFF	; 255
    23e6:	10 e0       	ldi	r17, 0x00	; 0
    23e8:	2f ef       	ldi	r18, 0xFF	; 255
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	4b e4       	ldi	r20, 0x4B	; 75
    23ee:	50 e0       	ldi	r21, 0x00	; 0
    23f0:	68 e0       	ldi	r22, 0x08	; 8
    23f2:	89 ec       	ldi	r24, 0xC9	; 201
    23f4:	9d e0       	ldi	r25, 0x0D	; 13
    23f6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    23fa:	8d cf       	rjmp	.-230    	; 0x2316 <LearnToFly()+0x26>
    23fc:	6a e0       	ldi	r22, 0x0A	; 10
    23fe:	88 eb       	ldi	r24, 0xB8	; 184
    2400:	92 e5       	ldi	r25, 0x52	; 82
    2402:	97 cf       	rjmp	.-210    	; 0x2332 <LearnToFly()+0x42>
    2404:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2408:	7c 01       	movw	r14, r24
    240a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    240e:	8c 01       	movw	r16, r24
    2410:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2414:	9c 01       	movw	r18, r24
    2416:	4b e4       	ldi	r20, 0x4B	; 75
    2418:	50 e0       	ldi	r21, 0x00	; 0
    241a:	6b e0       	ldi	r22, 0x0B	; 11
    241c:	86 e2       	ldi	r24, 0x26	; 38
    241e:	97 e3       	ldi	r25, 0x37	; 55
    2420:	ea cf       	rjmp	.-44     	; 0x23f6 <LearnToFly()+0x106>
    2422:	64 e6       	ldi	r22, 0x64	; 100
    2424:	8f ef       	ldi	r24, 0xFF	; 255
    2426:	9f ef       	ldi	r25, 0xFF	; 255
    2428:	d4 cf       	rjmp	.-88     	; 0x23d2 <LearnToFly()+0xe2>

0000242a <Castle()>:
    242a:	ef 92       	push	r14
    242c:	ff 92       	push	r15
    242e:	0f 93       	push	r16
    2430:	1f 93       	push	r17
    2432:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <prog>
    2436:	87 33       	cpi	r24, 0x37	; 55
    2438:	09 f4       	brne	.+2      	; 0x243c <Castle()+0x12>
    243a:	d2 c0       	rjmp	.+420    	; 0x25e0 <Castle()+0x1b6>
    243c:	08 f0       	brcs	.+2      	; 0x2440 <Castle()+0x16>
    243e:	40 c0       	rjmp	.+128    	; 0x24c0 <Castle()+0x96>
    2440:	89 31       	cpi	r24, 0x19	; 25
    2442:	09 f4       	brne	.+2      	; 0x2446 <Castle()+0x1c>
    2444:	b0 c0       	rjmp	.+352    	; 0x25a6 <Castle()+0x17c>
    2446:	18 f5       	brcc	.+70     	; 0x248e <Castle()+0x64>
    2448:	8a 30       	cpi	r24, 0x0A	; 10
    244a:	09 f4       	brne	.+2      	; 0x244e <Castle()+0x24>
    244c:	9a c0       	rjmp	.+308    	; 0x2582 <Castle()+0x158>
    244e:	58 f4       	brcc	.+22     	; 0x2466 <Castle()+0x3c>
    2450:	88 23       	and	r24, r24
    2452:	09 f4       	brne	.+2      	; 0x2456 <Castle()+0x2c>
    2454:	82 c0       	rjmp	.+260    	; 0x255a <Castle()+0x130>
    2456:	85 30       	cpi	r24, 0x05	; 5
    2458:	09 f4       	brne	.+2      	; 0x245c <Castle()+0x32>
    245a:	88 c0       	rjmp	.+272    	; 0x256c <Castle()+0x142>
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	ff 90       	pop	r15
    2462:	ef 90       	pop	r14
    2464:	08 95       	ret
    2466:	8f 30       	cpi	r24, 0x0F	; 15
    2468:	09 f4       	brne	.+2      	; 0x246c <Castle()+0x42>
    246a:	94 c0       	rjmp	.+296    	; 0x2594 <Castle()+0x16a>
    246c:	84 31       	cpi	r24, 0x14	; 20
    246e:	b1 f7       	brne	.-20     	; 0x245c <Castle()+0x32>
    2470:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    2474:	59 e1       	ldi	r21, 0x19	; 25
    2476:	e5 2e       	mov	r14, r21
    2478:	8c 01       	movw	r16, r24
    247a:	26 e3       	ldi	r18, 0x36	; 54
    247c:	37 e0       	ldi	r19, 0x07	; 7
    247e:	45 e4       	ldi	r20, 0x45	; 69
    2480:	51 e0       	ldi	r21, 0x01	; 1
    2482:	66 e0       	ldi	r22, 0x06	; 6
    2484:	70 e0       	ldi	r23, 0x00	; 0
    2486:	82 eb       	ldi	r24, 0xB2	; 178
    2488:	97 e0       	ldi	r25, 0x07	; 7
    248a:	ea db       	rcall	.-2092   	; 0x1c60 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    248c:	e7 cf       	rjmp	.-50     	; 0x245c <Castle()+0x32>
    248e:	88 32       	cpi	r24, 0x28	; 40
    2490:	09 f4       	brne	.+2      	; 0x2494 <Castle()+0x6a>
    2492:	a0 c0       	rjmp	.+320    	; 0x25d4 <Castle()+0x1aa>
    2494:	58 f4       	brcc	.+22     	; 0x24ac <Castle()+0x82>
    2496:	8e 31       	cpi	r24, 0x1E	; 30
    2498:	09 f4       	brne	.+2      	; 0x249c <Castle()+0x72>
    249a:	8b c0       	rjmp	.+278    	; 0x25b2 <Castle()+0x188>
    249c:	83 32       	cpi	r24, 0x23	; 35
    249e:	f1 f6       	brne	.-68     	; 0x245c <Castle()+0x32>
    24a0:	42 ec       	ldi	r20, 0xC2	; 194
    24a2:	51 e0       	ldi	r21, 0x01	; 1
    24a4:	68 e2       	ldi	r22, 0x28	; 40
    24a6:	81 eb       	ldi	r24, 0xB1	; 177
    24a8:	99 e3       	ldi	r25, 0x39	; 57
    24aa:	65 c0       	rjmp	.+202    	; 0x2576 <Castle()+0x14c>
    24ac:	8d 32       	cpi	r24, 0x2D	; 45
    24ae:	09 f4       	brne	.+2      	; 0x24b2 <Castle()+0x88>
    24b0:	93 c0       	rjmp	.+294    	; 0x25d8 <Castle()+0x1ae>
    24b2:	82 33       	cpi	r24, 0x32	; 50
    24b4:	99 f6       	brne	.-90     	; 0x245c <Castle()+0x32>
    24b6:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    24ba:	47 e3       	ldi	r20, 0x37	; 55
    24bc:	e4 2e       	mov	r14, r20
    24be:	dc cf       	rjmp	.-72     	; 0x2478 <Castle()+0x4e>
    24c0:	8b 34       	cpi	r24, 0x4B	; 75
    24c2:	09 f4       	brne	.+2      	; 0x24c6 <Castle()+0x9c>
    24c4:	bd c0       	rjmp	.+378    	; 0x2640 <Castle()+0x216>
    24c6:	28 f5       	brcc	.+74     	; 0x2512 <Castle()+0xe8>
    24c8:	8c 33       	cpi	r24, 0x3C	; 60
    24ca:	09 f4       	brne	.+2      	; 0x24ce <Castle()+0xa4>
    24cc:	a1 c0       	rjmp	.+322    	; 0x2610 <Castle()+0x1e6>
    24ce:	60 f4       	brcc	.+24     	; 0x24e8 <Castle()+0xbe>
    24d0:	88 33       	cpi	r24, 0x38	; 56
    24d2:	09 f4       	brne	.+2      	; 0x24d6 <Castle()+0xac>
    24d4:	90 c0       	rjmp	.+288    	; 0x25f6 <Castle()+0x1cc>
    24d6:	8a 33       	cpi	r24, 0x3A	; 58
    24d8:	09 f0       	breq	.+2      	; 0x24dc <Castle()+0xb2>
    24da:	c0 cf       	rjmp	.-128    	; 0x245c <Castle()+0x32>
    24dc:	42 ec       	ldi	r20, 0xC2	; 194
    24de:	51 e0       	ldi	r21, 0x01	; 1
    24e0:	6c e3       	ldi	r22, 0x3C	; 60
    24e2:	81 eb       	ldi	r24, 0xB1	; 177
    24e4:	99 e3       	ldi	r25, 0x39	; 57
    24e6:	81 c0       	rjmp	.+258    	; 0x25ea <Castle()+0x1c0>
    24e8:	81 34       	cpi	r24, 0x41	; 65
    24ea:	09 f4       	brne	.+2      	; 0x24ee <Castle()+0xc4>
    24ec:	9c c0       	rjmp	.+312    	; 0x2626 <Castle()+0x1fc>
    24ee:	86 34       	cpi	r24, 0x46	; 70
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <Castle()+0xca>
    24f2:	b4 cf       	rjmp	.-152    	; 0x245c <Castle()+0x32>
    24f4:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    24f8:	7c 01       	movw	r14, r24
    24fa:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    24fe:	8c 01       	movw	r16, r24
    2500:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2504:	9c 01       	movw	r18, r24
    2506:	42 e3       	ldi	r20, 0x32	; 50
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	6b e4       	ldi	r22, 0x4B	; 75
    250c:	80 e7       	ldi	r24, 0x70	; 112
    250e:	97 e1       	ldi	r25, 0x17	; 23
    2510:	5e c0       	rjmp	.+188    	; 0x25ce <Castle()+0x1a4>
    2512:	8a 35       	cpi	r24, 0x5A	; 90
    2514:	09 f4       	brne	.+2      	; 0x2518 <Castle()+0xee>
    2516:	a7 c0       	rjmp	.+334    	; 0x2666 <Castle()+0x23c>
    2518:	78 f4       	brcc	.+30     	; 0x2538 <Castle()+0x10e>
    251a:	80 35       	cpi	r24, 0x50	; 80
    251c:	09 f4       	brne	.+2      	; 0x2520 <Castle()+0xf6>
    251e:	96 c0       	rjmp	.+300    	; 0x264c <Castle()+0x222>
    2520:	85 35       	cpi	r24, 0x55	; 85
    2522:	09 f0       	breq	.+2      	; 0x2526 <Castle()+0xfc>
    2524:	9b cf       	rjmp	.-202    	; 0x245c <Castle()+0x32>
    2526:	6a e5       	ldi	r22, 0x5A	; 90
    2528:	82 e6       	ldi	r24, 0x62	; 98
    252a:	93 e7       	ldi	r25, 0x73	; 115
    252c:	1f 91       	pop	r17
    252e:	0f 91       	pop	r16
    2530:	ff 90       	pop	r15
    2532:	ef 90       	pop	r14
    2534:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    2538:	8f 35       	cpi	r24, 0x5F	; 95
    253a:	09 f4       	brne	.+2      	; 0x253e <Castle()+0x114>
    253c:	9a c0       	rjmp	.+308    	; 0x2672 <Castle()+0x248>
    253e:	84 36       	cpi	r24, 0x64	; 100
    2540:	09 f0       	breq	.+2      	; 0x2544 <Castle()+0x11a>
    2542:	8c cf       	rjmp	.-232    	; 0x245c <Castle()+0x32>
    2544:	60 e0       	ldi	r22, 0x00	; 0
    2546:	8d e7       	ldi	r24, 0x7D	; 125
    2548:	9e e0       	ldi	r25, 0x0E	; 14
    254a:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    254e:	80 e0       	ldi	r24, 0x00	; 0
    2550:	1f 91       	pop	r17
    2552:	0f 91       	pop	r16
    2554:	ff 90       	pop	r15
    2556:	ef 90       	pop	r14
    2558:	1a cd       	rjmp	.-1484   	; 0x1f8e <switchToSong(unsigned char)>
    255a:	65 e0       	ldi	r22, 0x05	; 5
    255c:	84 e5       	ldi	r24, 0x54	; 84
    255e:	9f e4       	ldi	r25, 0x4F	; 79
    2560:	1f 91       	pop	r17
    2562:	0f 91       	pop	r16
    2564:	ff 90       	pop	r15
    2566:	ef 90       	pop	r14
    2568:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <progBlingBlingColoring(unsigned int, unsigned char)>
    256c:	4d e9       	ldi	r20, 0x9D	; 157
    256e:	53 e0       	ldi	r21, 0x03	; 3
    2570:	6a e0       	ldi	r22, 0x0A	; 10
    2572:	89 ed       	ldi	r24, 0xD9	; 217
    2574:	9c e1       	ldi	r25, 0x1C	; 28
    2576:	1f 91       	pop	r17
    2578:	0f 91       	pop	r16
    257a:	ff 90       	pop	r15
    257c:	ef 90       	pop	r14
    257e:	0c 94 4d 09 	jmp	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    2582:	6f e0       	ldi	r22, 0x0F	; 15
    2584:	82 e6       	ldi	r24, 0x62	; 98
    2586:	93 e7       	ldi	r25, 0x73	; 115
    2588:	1f 91       	pop	r17
    258a:	0f 91       	pop	r16
    258c:	ff 90       	pop	r15
    258e:	ef 90       	pop	r14
    2590:	0c 94 38 07 	jmp	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    2594:	64 e1       	ldi	r22, 0x14	; 20
    2596:	87 ee       	ldi	r24, 0xE7	; 231
    2598:	90 e4       	ldi	r25, 0x40	; 64
    259a:	1f 91       	pop	r17
    259c:	0f 91       	pop	r16
    259e:	ff 90       	pop	r15
    25a0:	ef 90       	pop	r14
    25a2:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <progBlack(unsigned int, unsigned char)>
    25a6:	42 ec       	ldi	r20, 0xC2	; 194
    25a8:	51 e0       	ldi	r21, 0x01	; 1
    25aa:	6e e1       	ldi	r22, 0x1E	; 30
    25ac:	8b e7       	ldi	r24, 0x7B	; 123
    25ae:	92 e3       	ldi	r25, 0x32	; 50
    25b0:	e2 cf       	rjmp	.-60     	; 0x2576 <Castle()+0x14c>
    25b2:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    25b6:	7c 01       	movw	r14, r24
    25b8:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    25bc:	8c 01       	movw	r16, r24
    25be:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    25c2:	9c 01       	movw	r18, r24
    25c4:	42 e3       	ldi	r20, 0x32	; 50
    25c6:	50 e0       	ldi	r21, 0x00	; 0
    25c8:	63 e2       	ldi	r22, 0x23	; 35
    25ca:	86 e3       	ldi	r24, 0x36	; 54
    25cc:	97 e0       	ldi	r25, 0x07	; 7
    25ce:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    25d2:	44 cf       	rjmp	.-376    	; 0x245c <Castle()+0x32>
    25d4:	6d e2       	ldi	r22, 0x2D	; 45
    25d6:	d6 cf       	rjmp	.-84     	; 0x2584 <Castle()+0x15a>
    25d8:	62 e3       	ldi	r22, 0x32	; 50
    25da:	8b e7       	ldi	r24, 0x7B	; 123
    25dc:	92 e3       	ldi	r25, 0x32	; 50
    25de:	dd cf       	rjmp	.-70     	; 0x259a <Castle()+0x170>
    25e0:	42 ec       	ldi	r20, 0xC2	; 194
    25e2:	51 e0       	ldi	r21, 0x01	; 1
    25e4:	68 e3       	ldi	r22, 0x38	; 56
    25e6:	8b e7       	ldi	r24, 0x7B	; 123
    25e8:	92 e3       	ldi	r25, 0x32	; 50
    25ea:	1f 91       	pop	r17
    25ec:	0f 91       	pop	r16
    25ee:	ff 90       	pop	r15
    25f0:	ef 90       	pop	r14
    25f2:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    25f6:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    25fa:	7c 01       	movw	r14, r24
    25fc:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2600:	8c 01       	movw	r16, r24
    2602:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2606:	9c 01       	movw	r18, r24
    2608:	42 e3       	ldi	r20, 0x32	; 50
    260a:	50 e0       	ldi	r21, 0x00	; 0
    260c:	6a e3       	ldi	r22, 0x3A	; 58
    260e:	dd cf       	rjmp	.-70     	; 0x25ca <Castle()+0x1a0>
    2610:	41 e4       	ldi	r20, 0x41	; 65
    2612:	6a e3       	ldi	r22, 0x3A	; 58
    2614:	77 e0       	ldi	r23, 0x07	; 7
    2616:	86 e8       	ldi	r24, 0x86	; 134
    2618:	9d e4       	ldi	r25, 0x4D	; 77
    261a:	1f 91       	pop	r17
    261c:	0f 91       	pop	r16
    261e:	ff 90       	pop	r15
    2620:	ef 90       	pop	r14
    2622:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <progStern(unsigned int, int, unsigned char)>
    2626:	ee 24       	eor	r14, r14
    2628:	ea 94       	dec	r14
    262a:	f1 2c       	mov	r15, r1
    262c:	0f ef       	ldi	r16, 0xFF	; 255
    262e:	10 e0       	ldi	r17, 0x00	; 0
    2630:	2f ef       	ldi	r18, 0xFF	; 255
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	42 e3       	ldi	r20, 0x32	; 50
    2636:	50 e0       	ldi	r21, 0x00	; 0
    2638:	66 e4       	ldi	r22, 0x46	; 70
    263a:	8c e6       	ldi	r24, 0x6C	; 108
    263c:	9e e0       	ldi	r25, 0x0E	; 14
    263e:	c7 cf       	rjmp	.-114    	; 0x25ce <Castle()+0x1a4>
    2640:	40 e5       	ldi	r20, 0x50	; 80
    2642:	6a e3       	ldi	r22, 0x3A	; 58
    2644:	77 e0       	ldi	r23, 0x07	; 7
    2646:	81 eb       	ldi	r24, 0xB1	; 177
    2648:	99 e3       	ldi	r25, 0x39	; 57
    264a:	e7 cf       	rjmp	.-50     	; 0x261a <Castle()+0x1f0>
    264c:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2650:	7c 01       	movw	r14, r24
    2652:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2656:	8c 01       	movw	r16, r24
    2658:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    265c:	9c 01       	movw	r18, r24
    265e:	42 e3       	ldi	r20, 0x32	; 50
    2660:	50 e0       	ldi	r21, 0x00	; 0
    2662:	65 e5       	ldi	r22, 0x55	; 85
    2664:	ea cf       	rjmp	.-44     	; 0x263a <Castle()+0x210>
    2666:	42 ec       	ldi	r20, 0xC2	; 194
    2668:	51 e0       	ldi	r21, 0x01	; 1
    266a:	6f e5       	ldi	r22, 0x5F	; 95
    266c:	87 ec       	ldi	r24, 0xC7	; 199
    266e:	9f e6       	ldi	r25, 0x6F	; 111
    2670:	82 cf       	rjmp	.-252    	; 0x2576 <Castle()+0x14c>
    2672:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    2676:	29 e0       	ldi	r18, 0x09	; 9
    2678:	e2 2e       	mov	r14, r18
    267a:	8c 01       	movw	r16, r24
    267c:	20 e6       	ldi	r18, 0x60	; 96
    267e:	3a ee       	ldi	r19, 0xEA	; 234
    2680:	45 e4       	ldi	r20, 0x45	; 69
    2682:	51 e0       	ldi	r21, 0x01	; 1
    2684:	64 e6       	ldi	r22, 0x64	; 100
    2686:	70 e0       	ldi	r23, 0x00	; 0
    2688:	fe ce       	rjmp	.-516    	; 0x2486 <Castle()+0x5c>

0000268a <TooClose()>:
    268a:	ef 92       	push	r14
    268c:	ff 92       	push	r15
    268e:	0f 93       	push	r16
    2690:	1f 93       	push	r17
    2692:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <prog>
    2696:	86 30       	cpi	r24, 0x06	; 6
    2698:	09 f4       	brne	.+2      	; 0x269c <TooClose()+0x12>
    269a:	75 c0       	rjmp	.+234    	; 0x2786 <TooClose()+0xfc>
    269c:	18 f5       	brcc	.+70     	; 0x26e4 <TooClose()+0x5a>
    269e:	82 30       	cpi	r24, 0x02	; 2
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <TooClose()+0x1a>
    26a2:	5a c0       	rjmp	.+180    	; 0x2758 <TooClose()+0xce>
    26a4:	58 f4       	brcc	.+22     	; 0x26bc <TooClose()+0x32>
    26a6:	88 23       	and	r24, r24
    26a8:	09 f4       	brne	.+2      	; 0x26ac <TooClose()+0x22>
    26aa:	40 c0       	rjmp	.+128    	; 0x272c <TooClose()+0xa2>
    26ac:	81 30       	cpi	r24, 0x01	; 1
    26ae:	09 f4       	brne	.+2      	; 0x26b2 <TooClose()+0x28>
    26b0:	48 c0       	rjmp	.+144    	; 0x2742 <TooClose()+0xb8>
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	08 95       	ret
    26bc:	84 30       	cpi	r24, 0x04	; 4
    26be:	09 f4       	brne	.+2      	; 0x26c2 <TooClose()+0x38>
    26c0:	5c c0       	rjmp	.+184    	; 0x277a <TooClose()+0xf0>
    26c2:	08 f4       	brcc	.+2      	; 0x26c6 <TooClose()+0x3c>
    26c4:	54 c0       	rjmp	.+168    	; 0x276e <TooClose()+0xe4>
    26c6:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    26ca:	26 e0       	ldi	r18, 0x06	; 6
    26cc:	e2 2e       	mov	r14, r18
    26ce:	8c 01       	movw	r16, r24
    26d0:	2b e2       	ldi	r18, 0x2B	; 43
    26d2:	36 e1       	ldi	r19, 0x16	; 22
    26d4:	4b ed       	ldi	r20, 0xDB	; 219
    26d6:	51 e0       	ldi	r21, 0x01	; 1
    26d8:	6a e0       	ldi	r22, 0x0A	; 10
    26da:	70 e0       	ldi	r23, 0x00	; 0
    26dc:	8c ed       	ldi	r24, 0xDC	; 220
    26de:	97 e0       	ldi	r25, 0x07	; 7
    26e0:	bf da       	rcall	.-2690   	; 0x1c60 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    26e2:	e7 cf       	rjmp	.-50     	; 0x26b2 <TooClose()+0x28>
    26e4:	8a 30       	cpi	r24, 0x0A	; 10
    26e6:	09 f4       	brne	.+2      	; 0x26ea <TooClose()+0x60>
    26e8:	6e c0       	rjmp	.+220    	; 0x27c6 <TooClose()+0x13c>
    26ea:	70 f4       	brcc	.+28     	; 0x2708 <TooClose()+0x7e>
    26ec:	88 30       	cpi	r24, 0x08	; 8
    26ee:	09 f4       	brne	.+2      	; 0x26f2 <TooClose()+0x68>
    26f0:	64 c0       	rjmp	.+200    	; 0x27ba <TooClose()+0x130>
    26f2:	08 f4       	brcc	.+2      	; 0x26f6 <TooClose()+0x6c>
    26f4:	53 c0       	rjmp	.+166    	; 0x279c <TooClose()+0x112>
    26f6:	6a e0       	ldi	r22, 0x0A	; 10
    26f8:	80 eb       	ldi	r24, 0xB0	; 176
    26fa:	9d e1       	ldi	r25, 0x1D	; 29
    26fc:	1f 91       	pop	r17
    26fe:	0f 91       	pop	r16
    2700:	ff 90       	pop	r15
    2702:	ef 90       	pop	r14
    2704:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    2708:	8c 30       	cpi	r24, 0x0C	; 12
    270a:	09 f4       	brne	.+2      	; 0x270e <TooClose()+0x84>
    270c:	71 c0       	rjmp	.+226    	; 0x27f0 <TooClose()+0x166>
    270e:	08 f4       	brcc	.+2      	; 0x2712 <TooClose()+0x88>
    2710:	60 c0       	rjmp	.+192    	; 0x27d2 <TooClose()+0x148>
    2712:	84 36       	cpi	r24, 0x64	; 100
    2714:	71 f6       	brne	.-100    	; 0x26b2 <TooClose()+0x28>
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	8d e7       	ldi	r24, 0x7D	; 125
    271a:	9e e0       	ldi	r25, 0x0E	; 14
    271c:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    2720:	80 e0       	ldi	r24, 0x00	; 0
    2722:	1f 91       	pop	r17
    2724:	0f 91       	pop	r16
    2726:	ff 90       	pop	r15
    2728:	ef 90       	pop	r14
    272a:	31 cc       	rjmp	.-1950   	; 0x1f8e <switchToSong(unsigned char)>
    272c:	46 eb       	ldi	r20, 0xB6	; 182
    272e:	53 e0       	ldi	r21, 0x03	; 3
    2730:	61 e0       	ldi	r22, 0x01	; 1
    2732:	8b e0       	ldi	r24, 0x0B	; 11
    2734:	97 e7       	ldi	r25, 0x77	; 119
    2736:	1f 91       	pop	r17
    2738:	0f 91       	pop	r16
    273a:	ff 90       	pop	r15
    273c:	ef 90       	pop	r14
    273e:	0c 94 4d 09 	jmp	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    2742:	4b ed       	ldi	r20, 0xDB	; 219
    2744:	51 e0       	ldi	r21, 0x01	; 1
    2746:	62 e0       	ldi	r22, 0x02	; 2
    2748:	84 e8       	ldi	r24, 0x84	; 132
    274a:	92 eb       	ldi	r25, 0xB2	; 178
    274c:	1f 91       	pop	r17
    274e:	0f 91       	pop	r16
    2750:	ff 90       	pop	r15
    2752:	ef 90       	pop	r14
    2754:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    2758:	46 eb       	ldi	r20, 0xB6	; 182
    275a:	53 e0       	ldi	r21, 0x03	; 3
    275c:	63 e0       	ldi	r22, 0x03	; 3
    275e:	8b e0       	ldi	r24, 0x0B	; 11
    2760:	97 e7       	ldi	r25, 0x77	; 119
    2762:	1f 91       	pop	r17
    2764:	0f 91       	pop	r16
    2766:	ff 90       	pop	r15
    2768:	ef 90       	pop	r14
    276a:	0c 94 76 06 	jmp	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    276e:	46 eb       	ldi	r20, 0xB6	; 182
    2770:	53 e0       	ldi	r21, 0x03	; 3
    2772:	64 e0       	ldi	r22, 0x04	; 4
    2774:	89 e7       	ldi	r24, 0x79	; 121
    2776:	9b e3       	ldi	r25, 0x3B	; 59
    2778:	de cf       	rjmp	.-68     	; 0x2736 <TooClose()+0xac>
    277a:	4b ed       	ldi	r20, 0xDB	; 219
    277c:	51 e0       	ldi	r21, 0x01	; 1
    277e:	65 e0       	ldi	r22, 0x05	; 5
    2780:	8b e0       	ldi	r24, 0x0B	; 11
    2782:	97 e7       	ldi	r25, 0x77	; 119
    2784:	e3 cf       	rjmp	.-58     	; 0x274c <TooClose()+0xc2>
    2786:	47 e0       	ldi	r20, 0x07	; 7
    2788:	6c e6       	ldi	r22, 0x6C	; 108
    278a:	77 e0       	ldi	r23, 0x07	; 7
    278c:	87 ec       	ldi	r24, 0xC7	; 199
    278e:	90 e6       	ldi	r25, 0x60	; 96
    2790:	1f 91       	pop	r17
    2792:	0f 91       	pop	r16
    2794:	ff 90       	pop	r15
    2796:	ef 90       	pop	r14
    2798:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <progStern(unsigned int, int, unsigned char)>
    279c:	ee 24       	eor	r14, r14
    279e:	ea 94       	dec	r14
    27a0:	f1 2c       	mov	r15, r1
    27a2:	0f ef       	ldi	r16, 0xFF	; 255
    27a4:	10 e0       	ldi	r17, 0x00	; 0
    27a6:	2f ef       	ldi	r18, 0xFF	; 255
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4b e4       	ldi	r20, 0x4B	; 75
    27ac:	50 e0       	ldi	r21, 0x00	; 0
    27ae:	68 e0       	ldi	r22, 0x08	; 8
    27b0:	89 e7       	ldi	r24, 0x79	; 121
    27b2:	9b e3       	ldi	r25, 0x3B	; 59
    27b4:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    27b8:	7c cf       	rjmp	.-264    	; 0x26b2 <TooClose()+0x28>
    27ba:	48 eb       	ldi	r20, 0xB8	; 184
    27bc:	53 e0       	ldi	r21, 0x03	; 3
    27be:	69 e0       	ldi	r22, 0x09	; 9
    27c0:	89 e7       	ldi	r24, 0x79	; 121
    27c2:	9b e3       	ldi	r25, 0x3B	; 59
    27c4:	ce cf       	rjmp	.-100    	; 0x2762 <TooClose()+0xd8>
    27c6:	46 eb       	ldi	r20, 0xB6	; 182
    27c8:	53 e0       	ldi	r21, 0x03	; 3
    27ca:	6b e0       	ldi	r22, 0x0B	; 11
    27cc:	80 eb       	ldi	r24, 0xB0	; 176
    27ce:	9d e1       	ldi	r25, 0x1D	; 29
    27d0:	c8 cf       	rjmp	.-112    	; 0x2762 <TooClose()+0xd8>
    27d2:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    27d6:	7c 01       	movw	r14, r24
    27d8:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    27dc:	8c 01       	movw	r16, r24
    27de:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    27e2:	9c 01       	movw	r18, r24
    27e4:	4b e4       	ldi	r20, 0x4B	; 75
    27e6:	50 e0       	ldi	r21, 0x00	; 0
    27e8:	6c e0       	ldi	r22, 0x0C	; 12
    27ea:	80 eb       	ldi	r24, 0xB0	; 176
    27ec:	9d e1       	ldi	r25, 0x1D	; 29
    27ee:	e2 cf       	rjmp	.-60     	; 0x27b4 <TooClose()+0x12a>
    27f0:	64 e6       	ldi	r22, 0x64	; 100
    27f2:	8f ef       	ldi	r24, 0xFF	; 255
    27f4:	9f ef       	ldi	r25, 0xFF	; 255
    27f6:	1f 91       	pop	r17
    27f8:	0f 91       	pop	r16
    27fa:	ff 90       	pop	r15
    27fc:	ef 90       	pop	r14
    27fe:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <progBlingBlingColoring(unsigned int, unsigned char)>

00002802 <Pokerface()>:
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	0f 93       	push	r16
    2808:	1f 93       	push	r17
    280a:	80 91 68 08 	lds	r24, 0x0868	; 0x800868 <prog>
    280e:	83 32       	cpi	r24, 0x23	; 35
    2810:	09 f4       	brne	.+2      	; 0x2814 <Pokerface()+0x12>
    2812:	86 c0       	rjmp	.+268    	; 0x2920 <Pokerface()+0x11e>
    2814:	90 f5       	brcc	.+100    	; 0x287a <Pokerface()+0x78>
    2816:	8f 30       	cpi	r24, 0x0F	; 15
    2818:	09 f4       	brne	.+2      	; 0x281c <Pokerface()+0x1a>
    281a:	71 c0       	rjmp	.+226    	; 0x28fe <Pokerface()+0xfc>
    281c:	88 f4       	brcc	.+34     	; 0x2840 <Pokerface()+0x3e>
    281e:	85 30       	cpi	r24, 0x05	; 5
    2820:	09 f4       	brne	.+2      	; 0x2824 <Pokerface()+0x22>
    2822:	59 c0       	rjmp	.+178    	; 0x28d6 <Pokerface()+0xd4>
    2824:	8a 30       	cpi	r24, 0x0A	; 10
    2826:	09 f4       	brne	.+2      	; 0x282a <Pokerface()+0x28>
    2828:	61 c0       	rjmp	.+194    	; 0x28ec <Pokerface()+0xea>
    282a:	81 11       	cpse	r24, r1
    282c:	21 c0       	rjmp	.+66     	; 0x2870 <Pokerface()+0x6e>
    282e:	65 e0       	ldi	r22, 0x05	; 5
    2830:	8a e8       	ldi	r24, 0x8A	; 138
    2832:	9e e5       	ldi	r25, 0x5E	; 94
    2834:	1f 91       	pop	r17
    2836:	0f 91       	pop	r16
    2838:	ff 90       	pop	r15
    283a:	ef 90       	pop	r14
    283c:	0c 94 38 07 	jmp	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    2840:	89 31       	cpi	r24, 0x19	; 25
    2842:	09 f4       	brne	.+2      	; 0x2846 <Pokerface()+0x44>
    2844:	67 c0       	rjmp	.+206    	; 0x2914 <Pokerface()+0x112>
    2846:	8e 31       	cpi	r24, 0x1E	; 30
    2848:	09 f4       	brne	.+2      	; 0x284c <Pokerface()+0x4a>
    284a:	68 c0       	rjmp	.+208    	; 0x291c <Pokerface()+0x11a>
    284c:	84 31       	cpi	r24, 0x14	; 20
    284e:	81 f4       	brne	.+32     	; 0x2870 <Pokerface()+0x6e>
    2850:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2854:	7c 01       	movw	r14, r24
    2856:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    285a:	8c 01       	movw	r16, r24
    285c:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2860:	9c 01       	movw	r18, r24
    2862:	4b e4       	ldi	r20, 0x4B	; 75
    2864:	50 e0       	ldi	r21, 0x00	; 0
    2866:	69 e1       	ldi	r22, 0x19	; 25
    2868:	86 e0       	ldi	r24, 0x06	; 6
    286a:	9f e3       	ldi	r25, 0x3F	; 63
    286c:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2870:	1f 91       	pop	r17
    2872:	0f 91       	pop	r16
    2874:	ff 90       	pop	r15
    2876:	ef 90       	pop	r14
    2878:	08 95       	ret
    287a:	87 33       	cpi	r24, 0x37	; 55
    287c:	09 f4       	brne	.+2      	; 0x2880 <Pokerface()+0x7e>
    287e:	61 c0       	rjmp	.+194    	; 0x2942 <Pokerface()+0x140>
    2880:	a8 f4       	brcc	.+42     	; 0x28ac <Pokerface()+0xaa>
    2882:	8d 32       	cpi	r24, 0x2D	; 45
    2884:	09 f4       	brne	.+2      	; 0x2888 <Pokerface()+0x86>
    2886:	50 c0       	rjmp	.+160    	; 0x2928 <Pokerface()+0x126>
    2888:	82 33       	cpi	r24, 0x32	; 50
    288a:	09 f4       	brne	.+2      	; 0x288e <Pokerface()+0x8c>
    288c:	51 c0       	rjmp	.+162    	; 0x2930 <Pokerface()+0x12e>
    288e:	88 32       	cpi	r24, 0x28	; 40
    2890:	79 f7       	brne	.-34     	; 0x2870 <Pokerface()+0x6e>
    2892:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2896:	7c 01       	movw	r14, r24
    2898:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    289c:	8c 01       	movw	r16, r24
    289e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    28a2:	9c 01       	movw	r18, r24
    28a4:	4b e4       	ldi	r20, 0x4B	; 75
    28a6:	50 e0       	ldi	r21, 0x00	; 0
    28a8:	6d e2       	ldi	r22, 0x2D	; 45
    28aa:	de cf       	rjmp	.-68     	; 0x2868 <Pokerface()+0x66>
    28ac:	86 34       	cpi	r24, 0x46	; 70
    28ae:	09 f4       	brne	.+2      	; 0x28b2 <Pokerface()+0xb0>
    28b0:	4c c0       	rjmp	.+152    	; 0x294a <Pokerface()+0x148>
    28b2:	84 36       	cpi	r24, 0x64	; 100
    28b4:	09 f4       	brne	.+2      	; 0x28b8 <Pokerface()+0xb6>
    28b6:	52 c0       	rjmp	.+164    	; 0x295c <Pokerface()+0x15a>
    28b8:	8c 33       	cpi	r24, 0x3C	; 60
    28ba:	d1 f6       	brne	.-76     	; 0x2870 <Pokerface()+0x6e>
    28bc:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    28c0:	7c 01       	movw	r14, r24
    28c2:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    28c6:	8c 01       	movw	r16, r24
    28c8:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    28cc:	9c 01       	movw	r18, r24
    28ce:	4b e4       	ldi	r20, 0x4B	; 75
    28d0:	50 e0       	ldi	r21, 0x00	; 0
    28d2:	66 e4       	ldi	r22, 0x46	; 70
    28d4:	c9 cf       	rjmp	.-110    	; 0x2868 <Pokerface()+0x66>
    28d6:	44 ef       	ldi	r20, 0xF4	; 244
    28d8:	51 e0       	ldi	r21, 0x01	; 1
    28da:	6a e0       	ldi	r22, 0x0A	; 10
    28dc:	86 e0       	ldi	r24, 0x06	; 6
    28de:	9f e3       	ldi	r25, 0x3F	; 63
    28e0:	1f 91       	pop	r17
    28e2:	0f 91       	pop	r16
    28e4:	ff 90       	pop	r15
    28e6:	ef 90       	pop	r14
    28e8:	0c 94 4d 09 	jmp	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    28ec:	6f e0       	ldi	r22, 0x0F	; 15
    28ee:	86 e0       	ldi	r24, 0x06	; 6
    28f0:	9f e3       	ldi	r25, 0x3F	; 63
    28f2:	1f 91       	pop	r17
    28f4:	0f 91       	pop	r16
    28f6:	ff 90       	pop	r15
    28f8:	ef 90       	pop	r14
    28fa:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <progMovingLines(unsigned int, unsigned char)>
    28fe:	44 ef       	ldi	r20, 0xF4	; 244
    2900:	51 e0       	ldi	r21, 0x01	; 1
    2902:	64 e1       	ldi	r22, 0x14	; 20
    2904:	86 e0       	ldi	r24, 0x06	; 6
    2906:	9f e3       	ldi	r25, 0x3F	; 63
    2908:	1f 91       	pop	r17
    290a:	0f 91       	pop	r16
    290c:	ff 90       	pop	r15
    290e:	ef 90       	pop	r14
    2910:	0c 94 76 06 	jmp	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    2914:	44 ef       	ldi	r20, 0xF4	; 244
    2916:	51 e0       	ldi	r21, 0x01	; 1
    2918:	6e e1       	ldi	r22, 0x1E	; 30
    291a:	e0 cf       	rjmp	.-64     	; 0x28dc <Pokerface()+0xda>
    291c:	63 e2       	ldi	r22, 0x23	; 35
    291e:	e7 cf       	rjmp	.-50     	; 0x28ee <Pokerface()+0xec>
    2920:	44 ef       	ldi	r20, 0xF4	; 244
    2922:	51 e0       	ldi	r21, 0x01	; 1
    2924:	68 e2       	ldi	r22, 0x28	; 40
    2926:	ee cf       	rjmp	.-36     	; 0x2904 <Pokerface()+0x102>
    2928:	62 e3       	ldi	r22, 0x32	; 50
    292a:	83 e8       	ldi	r24, 0x83	; 131
    292c:	9f e1       	ldi	r25, 0x1F	; 31
    292e:	82 cf       	rjmp	.-252    	; 0x2834 <Pokerface()+0x32>
    2930:	67 e3       	ldi	r22, 0x37	; 55
    2932:	86 e0       	ldi	r24, 0x06	; 6
    2934:	9f e3       	ldi	r25, 0x3F	; 63
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    2942:	44 ef       	ldi	r20, 0xF4	; 244
    2944:	51 e0       	ldi	r21, 0x01	; 1
    2946:	6c e3       	ldi	r22, 0x3C	; 60
    2948:	dd cf       	rjmp	.-70     	; 0x2904 <Pokerface()+0x102>
    294a:	64 e6       	ldi	r22, 0x64	; 100
    294c:	80 e1       	ldi	r24, 0x10	; 16
    294e:	97 e2       	ldi	r25, 0x27	; 39
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	ff 90       	pop	r15
    2956:	ef 90       	pop	r14
    2958:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <progBlack(unsigned int, unsigned char)>
    295c:	60 e0       	ldi	r22, 0x00	; 0
    295e:	8d e7       	ldi	r24, 0x7D	; 125
    2960:	9e e0       	ldi	r25, 0x0E	; 14
    2962:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    2966:	80 e0       	ldi	r24, 0x00	; 0
    2968:	1f 91       	pop	r17
    296a:	0f 91       	pop	r16
    296c:	ff 90       	pop	r15
    296e:	ef 90       	pop	r14
    2970:	0e cb       	rjmp	.-2532   	; 0x1f8e <switchToSong(unsigned char)>

00002972 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
#define DADVANCE 3
#define DUSE (0xFF - (DADVANCE-1))

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static void /*__attribute__((optimize("O0")))*/  /*__attribute__ ((always_inline))*/  showRGBInternal(PixelController<RGB_ORDER> & pixels)  {
    2972:	9f 92       	push	r9
    2974:	af 92       	push	r10
    2976:	bf 92       	push	r11
    2978:	cf 92       	push	r12
    297a:	df 92       	push	r13
    297c:	ef 92       	push	r14
    297e:	ff 92       	push	r15
    2980:	0f 93       	push	r16
    2982:	1f 93       	push	r17
    2984:	cf 93       	push	r28
    2986:	df 93       	push	r29
    2988:	fc 01       	movw	r30, r24
		uint8_t *data = (uint8_t*)pixels.mData;
    298a:	c0 80       	ld	r12, Z
    298c:	d1 80       	ldd	r13, Z+1	; 0x01
		data_ptr_t port = FastPin<DATA_PIN>::port();
		data_t mask = FastPin<DATA_PIN>::mask();
		uint8_t scale_base = 0;

		// register uint8_t *end = data + nLeds;
		data_t hi = *port | mask;
    298e:	28 b1       	in	r18, 0x08	; 8
    2990:	b2 2e       	mov	r11, r18
    2992:	68 94       	set
    2994:	b2 f8       	bld	r11, 2
		data_t lo = *port & ~mask;
    2996:	98 b1       	in	r25, 0x08	; 8
    2998:	9b 7f       	andi	r25, 0xFB	; 251
		*port = lo;
    299a:	98 b9       	out	0x08, r25	; 8
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    299c:	62 85       	ldd	r22, Z+10	; 0x0a
    299e:	87 81       	ldd	r24, Z+7	; 0x07
    29a0:	06 2f       	mov	r16, r22
    29a2:	08 1b       	sub	r16, r24
    29a4:	80 2f       	mov	r24, r16
    29a6:	07 83       	std	Z+7, r16	; 0x07

		// Setup the pixel controller
		pixels.preStepFirstByteDithering();

		// pull the dithering/adjustment values out of the pixels object for direct asm access
		uint8_t advanceBy = pixels.advanceBy();
    29a8:	77 85       	ldd	r23, Z+15	; 0x0f
		uint16_t count = pixels.mLen;
    29aa:	a2 81       	ldd	r26, Z+2	; 0x02
    29ac:	b3 81       	ldd	r27, Z+3	; 0x03

		uint8_t s0 = pixels.mScale.raw[RO(0)];
    29ae:	35 85       	ldd	r19, Z+13	; 0x0d
		uint8_t s1 = pixels.mScale.raw[RO(1)];
    29b0:	44 85       	ldd	r20, Z+12	; 0x0c
		uint8_t s2 = pixels.mScale.raw[RO(2)];
    29b2:	56 85       	ldd	r21, Z+14	; 0x0e
#if (FASTLED_SCALE8_FIXED==1)
		s0++; s1++; s2++;
    29b4:	99 24       	eor	r9, r9
    29b6:	93 94       	inc	r9
    29b8:	93 0e       	add	r9, r19
    29ba:	4f 5f       	subi	r20, 0xFF	; 255
    29bc:	5f 5f       	subi	r21, 0xFF	; 255
#endif
		uint8_t d0 = pixels.d[RO(0)];
		uint8_t d1 = pixels.d[RO(1)];
    29be:	f6 80       	ldd	r15, Z+6	; 0x06
		uint8_t d2 = pixels.d[RO(2)];
    29c0:	e0 84       	ldd	r14, Z+8	; 0x08
		uint8_t e0 = pixels.e[RO(0)];
		uint8_t e1 = pixels.e[RO(1)];
    29c2:	c1 85       	ldd	r28, Z+9	; 0x09
		uint8_t e2 = pixels.e[RO(2)];
    29c4:	d3 85       	ldd	r29, Z+11	; 0x0b

		uint8_t loopvar=0;

		// This has to be done in asm to keep gcc from messing up the asm code further down
		b0 = data[RO(0)];
    29c6:	f6 01       	movw	r30, r12
    29c8:	11 81       	ldd	r17, Z+1	; 0x01
		{
			LDSCL4(b0,O0) 	PRESCALEA2(d0)
    29ca:	a1 2c       	mov	r10, r1
    29cc:	0a 2d       	mov	r16, r10
    29ce:	2a 2d       	mov	r18, r10
    29d0:	3a 2d       	mov	r19, r10
    29d2:	31 81       	ldd	r19, Z+1	; 0x01
    29d4:	11 27       	eor	r17, r17
    29d6:	88 94       	clc
    29d8:	31 11       	cpse	r19, r1
    29da:	38 0f       	add	r19, r24
			PRESCALEB4(d0)	SCALE02(b0,0)
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <L_9743>
    29de:	3f ef       	ldi	r19, 0xFF	; 255

000029e0 <L_9743>:
    29e0:	81 95       	neg	r24
    29e2:	88 94       	clc
    29e4:	90 fc       	sbrc	r9, 0
    29e6:	13 0f       	add	r17, r19
			RORSC04(b0,1) 	ROR1(b0) CLC1
    29e8:	17 95       	ror	r17
    29ea:	88 94       	clc
    29ec:	91 fc       	sbrc	r9, 1
    29ee:	13 0f       	add	r17, r19
    29f0:	17 95       	ror	r17
    29f2:	88 94       	clc
			SCROR04(b0,2)		SCALE02(b0,3)
    29f4:	92 fc       	sbrc	r9, 2
    29f6:	13 0f       	add	r17, r19
    29f8:	17 95       	ror	r17
    29fa:	88 94       	clc
    29fc:	93 fc       	sbrc	r9, 3
    29fe:	13 0f       	add	r17, r19
			RORSC04(b0,4) 	ROR1(b0) CLC1
    2a00:	17 95       	ror	r17
    2a02:	88 94       	clc
    2a04:	94 fc       	sbrc	r9, 4
    2a06:	13 0f       	add	r17, r19
    2a08:	17 95       	ror	r17
    2a0a:	88 94       	clc
			SCROR04(b0,5) 	SCALE02(b0,6)
    2a0c:	95 fc       	sbrc	r9, 5
    2a0e:	13 0f       	add	r17, r19
    2a10:	17 95       	ror	r17
    2a12:	88 94       	clc
    2a14:	96 fc       	sbrc	r9, 6
    2a16:	13 0f       	add	r17, r19
			RORSC04(b0,7) 	ROR1(b0) CLC1
    2a18:	17 95       	ror	r17
    2a1a:	88 94       	clc
    2a1c:	97 fc       	sbrc	r9, 7
    2a1e:	13 0f       	add	r17, r19
    2a20:	17 95       	ror	r17
    2a22:	88 94       	clc
			MOV_ADDDE04(b1,b0,d0,e0)
    2a24:	03 2f       	mov	r16, r19
    2a26:	91 10       	cpse	r9, r1
    2a28:	01 2f       	mov	r16, r17
    2a2a:	86 0f       	add	r24, r22
			MOV1(b0,b1)
    2a2c:	10 2f       	mov	r17, r16

		{
			// while(--count)
			{
				// Loop beginning
				DNOP;
    2a2e:	00 2c       	mov	r0, r0
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
    2a30:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a32:	00 c0       	rjmp	.+0      	; 0x2a34 <L_9743+0x54>
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
    2a34:	17 ff       	sbrs	r17, 7
    2a36:	98 b9       	out	0x08, r25	; 8
    2a38:	30 81       	ld	r19, Z
    2a3a:	00 27       	eor	r16, r16
    2a3c:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a3e:	00 c0       	rjmp	.+0      	; 0x2a40 <L_9743+0x60>
    2a40:	00 c0       	rjmp	.+0      	; 0x2a42 <L_9743+0x62>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a42:	00 2c       	mov	r0, r0
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
    2a44:	98 b9       	out	0x08, r25	; 8
    2a46:	31 11       	cpse	r19, r1
    2a48:	3f 0d       	add	r19, r15
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a4a:	00 c0       	rjmp	.+0      	; 0x2a4c <L_9743+0x6c>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a4c:	00 2c       	mov	r0, r0
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
    2a4e:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a50:	00 c0       	rjmp	.+0      	; 0x2a52 <L_9743+0x72>
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
    2a52:	16 ff       	sbrs	r17, 6
    2a54:	98 b9       	out	0x08, r25	; 8
    2a56:	08 f4       	brcc	.+2      	; 0x2a5a <L_10276>
    2a58:	3f ef       	ldi	r19, 0xFF	; 255

00002a5a <L_10276>:
    2a5a:	f1 94       	neg	r15
    2a5c:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a5e:	00 c0       	rjmp	.+0      	; 0x2a60 <L_10276+0x6>
    2a60:	00 c0       	rjmp	.+0      	; 0x2a62 <L_10276+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a62:	00 2c       	mov	r0, r0
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
    2a64:	98 b9       	out	0x08, r25	; 8
    2a66:	40 fd       	sbrc	r20, 0
    2a68:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a6a:	00 c0       	rjmp	.+0      	; 0x2a6c <L_10276+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a6c:	00 2c       	mov	r0, r0

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
    2a6e:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a70:	00 c0       	rjmp	.+0      	; 0x2a72 <L_10276+0x18>

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
    2a72:	15 ff       	sbrs	r17, 5
    2a74:	98 b9       	out	0x08, r25	; 8
    2a76:	07 95       	ror	r16
    2a78:	88 94       	clc
    2a7a:	41 fd       	sbrc	r20, 1
    2a7c:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a7e:	00 c0       	rjmp	.+0      	; 0x2a80 <L_10276+0x26>
    2a80:	00 c0       	rjmp	.+0      	; 0x2a82 <L_10276+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a82:	00 2c       	mov	r0, r0

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
    2a84:	98 b9       	out	0x08, r25	; 8
    2a86:	07 95       	ror	r16
    2a88:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a8a:	00 c0       	rjmp	.+0      	; 0x2a8c <L_10276+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a8c:	00 2c       	mov	r0, r0
				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
    2a8e:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a90:	00 c0       	rjmp	.+0      	; 0x2a92 <L_10276+0x38>
				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
    2a92:	14 ff       	sbrs	r17, 4
    2a94:	98 b9       	out	0x08, r25	; 8
    2a96:	42 fd       	sbrc	r20, 2
    2a98:	03 0f       	add	r16, r19
    2a9a:	07 95       	ror	r16
    2a9c:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a9e:	00 c0       	rjmp	.+0      	; 0x2aa0 <L_10276+0x46>
    2aa0:	00 c0       	rjmp	.+0      	; 0x2aa2 <L_10276+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2aa2:	00 2c       	mov	r0, r0
				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
    2aa4:	98 b9       	out	0x08, r25	; 8
    2aa6:	43 fd       	sbrc	r20, 3
    2aa8:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2aaa:	00 c0       	rjmp	.+0      	; 0x2aac <L_10276+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2aac:	00 2c       	mov	r0, r0
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2aae:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ab0:	00 c0       	rjmp	.+0      	; 0x2ab2 <L_10276+0x58>
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ab2:	13 ff       	sbrs	r17, 3
    2ab4:	98 b9       	out	0x08, r25	; 8
    2ab6:	07 95       	ror	r16
    2ab8:	88 94       	clc
    2aba:	44 fd       	sbrc	r20, 4
    2abc:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2abe:	00 c0       	rjmp	.+0      	; 0x2ac0 <L_10276+0x66>
    2ac0:	00 c0       	rjmp	.+0      	; 0x2ac2 <L_10276+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ac2:	00 2c       	mov	r0, r0
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ac4:	98 b9       	out	0x08, r25	; 8
    2ac6:	07 95       	ror	r16
    2ac8:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2aca:	00 c0       	rjmp	.+0      	; 0x2acc <L_10276+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2acc:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
    2ace:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ad0:	00 c0       	rjmp	.+0      	; 0x2ad2 <L_10276+0x78>
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
    2ad2:	12 ff       	sbrs	r17, 2
    2ad4:	98 b9       	out	0x08, r25	; 8
    2ad6:	45 fd       	sbrc	r20, 5
    2ad8:	03 0f       	add	r16, r19
    2ada:	07 95       	ror	r16
    2adc:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ade:	00 c0       	rjmp	.+0      	; 0x2ae0 <L_10276+0x86>
    2ae0:	00 c0       	rjmp	.+0      	; 0x2ae2 <L_10276+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ae2:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
    2ae4:	98 b9       	out	0x08, r25	; 8
    2ae6:	46 fd       	sbrc	r20, 6
    2ae8:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2aea:	00 c0       	rjmp	.+0      	; 0x2aec <L_10276+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2aec:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2aee:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2af0:	00 c0       	rjmp	.+0      	; 0x2af2 <L_10276+0x98>
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2af2:	11 ff       	sbrs	r17, 1
    2af4:	98 b9       	out	0x08, r25	; 8
    2af6:	07 95       	ror	r16
    2af8:	88 94       	clc
    2afa:	47 fd       	sbrc	r20, 7
    2afc:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2afe:	00 c0       	rjmp	.+0      	; 0x2b00 <L_10276+0xa6>
    2b00:	00 c0       	rjmp	.+0      	; 0x2b02 <L_10276+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b02:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2b04:	98 b9       	out	0x08, r25	; 8
    2b06:	07 95       	ror	r16
    2b08:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b0a:	00 c0       	rjmp	.+0      	; 0x2b0c <L_10276+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b0c:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2b0e:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b10:	00 c0       	rjmp	.+0      	; 0x2b12 <L_10276+0xb8>
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2b12:	10 ff       	sbrs	r17, 0
    2b14:	98 b9       	out	0x08, r25	; 8
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)
    2b16:	13 2f       	mov	r17, r19
    2b18:	41 11       	cpse	r20, r1
    2b1a:	10 2f       	mov	r17, r16
    2b1c:	fc 0e       	add	r15, r28
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b1e:	00 c0       	rjmp	.+0      	; 0x2b20 <L_10276+0xc6>
    2b20:	00 c0       	rjmp	.+0      	; 0x2b22 <L_10276+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b22:	00 2c       	mov	r0, r0
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)
    2b24:	98 b9       	out	0x08, r25	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b26:	00 c0       	rjmp	.+0      	; 0x2b28 <L_10276+0xce>
    2b28:	00 c0       	rjmp	.+0      	; 0x2b2a <L_10276+0xd0>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b2a:	00 2c       	mov	r0, r0
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
    2b2c:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b2e:	00 c0       	rjmp	.+0      	; 0x2b30 <L_10276+0xd6>
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
    2b30:	17 ff       	sbrs	r17, 7
    2b32:	98 b9       	out	0x08, r25	; 8
    2b34:	32 81       	ldd	r19, Z+2	; 0x02
    2b36:	00 27       	eor	r16, r16
    2b38:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b3a:	00 c0       	rjmp	.+0      	; 0x2b3c <L_10276+0xe2>
    2b3c:	00 c0       	rjmp	.+0      	; 0x2b3e <L_10276+0xe4>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b3e:	00 2c       	mov	r0, r0
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
    2b40:	98 b9       	out	0x08, r25	; 8
    2b42:	31 11       	cpse	r19, r1
    2b44:	3e 0d       	add	r19, r14
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b46:	00 c0       	rjmp	.+0      	; 0x2b48 <L_10276+0xee>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b48:	00 2c       	mov	r0, r0
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
    2b4a:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b4c:	00 c0       	rjmp	.+0      	; 0x2b4e <L_10276+0xf4>
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
    2b4e:	16 ff       	sbrs	r17, 6
    2b50:	98 b9       	out	0x08, r25	; 8
    2b52:	08 f4       	brcc	.+2      	; 0x2b56 <L_11494>
    2b54:	3f ef       	ldi	r19, 0xFF	; 255

00002b56 <L_11494>:
    2b56:	e7 0f       	add	r30, r23
    2b58:	f1 1d       	adc	r31, r1
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b5a:	00 c0       	rjmp	.+0      	; 0x2b5c <L_11494+0x6>
    2b5c:	00 c0       	rjmp	.+0      	; 0x2b5e <L_11494+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b5e:	00 2c       	mov	r0, r0
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
    2b60:	98 b9       	out	0x08, r25	; 8
    2b62:	50 fd       	sbrc	r21, 0
    2b64:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b66:	00 c0       	rjmp	.+0      	; 0x2b68 <L_11494+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b68:	00 2c       	mov	r0, r0
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2b6a:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b6c:	00 c0       	rjmp	.+0      	; 0x2b6e <L_11494+0x18>
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2b6e:	15 ff       	sbrs	r17, 5
    2b70:	98 b9       	out	0x08, r25	; 8
    2b72:	07 95       	ror	r16
    2b74:	88 94       	clc
    2b76:	51 fd       	sbrc	r21, 1
    2b78:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b7a:	00 c0       	rjmp	.+0      	; 0x2b7c <L_11494+0x26>
    2b7c:	00 c0       	rjmp	.+0      	; 0x2b7e <L_11494+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b7e:	00 2c       	mov	r0, r0
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2b80:	98 b9       	out	0x08, r25	; 8
    2b82:	07 95       	ror	r16
    2b84:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b86:	00 c0       	rjmp	.+0      	; 0x2b88 <L_11494+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b88:	00 2c       	mov	r0, r0
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
    2b8a:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b8c:	00 c0       	rjmp	.+0      	; 0x2b8e <L_11494+0x38>
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
    2b8e:	14 ff       	sbrs	r17, 4
    2b90:	98 b9       	out	0x08, r25	; 8
    2b92:	52 fd       	sbrc	r21, 2
    2b94:	03 0f       	add	r16, r19
    2b96:	07 95       	ror	r16
    2b98:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b9a:	00 c0       	rjmp	.+0      	; 0x2b9c <L_11494+0x46>
    2b9c:	00 c0       	rjmp	.+0      	; 0x2b9e <L_11494+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b9e:	00 2c       	mov	r0, r0
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
    2ba0:	98 b9       	out	0x08, r25	; 8
    2ba2:	53 fd       	sbrc	r21, 3
    2ba4:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ba6:	00 c0       	rjmp	.+0      	; 0x2ba8 <L_11494+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ba8:	00 2c       	mov	r0, r0

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2baa:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bac:	00 c0       	rjmp	.+0      	; 0x2bae <L_11494+0x58>

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2bae:	13 ff       	sbrs	r17, 3
    2bb0:	98 b9       	out	0x08, r25	; 8
    2bb2:	07 95       	ror	r16
    2bb4:	88 94       	clc
    2bb6:	54 fd       	sbrc	r21, 4
    2bb8:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bba:	00 c0       	rjmp	.+0      	; 0x2bbc <L_11494+0x66>
    2bbc:	00 c0       	rjmp	.+0      	; 0x2bbe <L_11494+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bbe:	00 2c       	mov	r0, r0

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2bc0:	98 b9       	out	0x08, r25	; 8
    2bc2:	07 95       	ror	r16
    2bc4:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bc6:	00 c0       	rjmp	.+0      	; 0x2bc8 <L_11494+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bc8:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
    2bca:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bcc:	00 c0       	rjmp	.+0      	; 0x2bce <L_11494+0x78>
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
    2bce:	12 ff       	sbrs	r17, 2
    2bd0:	98 b9       	out	0x08, r25	; 8
    2bd2:	55 fd       	sbrc	r21, 5
    2bd4:	03 0f       	add	r16, r19
    2bd6:	07 95       	ror	r16
    2bd8:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bda:	00 c0       	rjmp	.+0      	; 0x2bdc <L_11494+0x86>
    2bdc:	00 c0       	rjmp	.+0      	; 0x2bde <L_11494+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bde:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
    2be0:	98 b9       	out	0x08, r25	; 8
    2be2:	56 fd       	sbrc	r21, 6
    2be4:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2be6:	00 c0       	rjmp	.+0      	; 0x2be8 <L_11494+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2be8:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2bea:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bec:	00 c0       	rjmp	.+0      	; 0x2bee <L_11494+0x98>
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2bee:	11 ff       	sbrs	r17, 1
    2bf0:	98 b9       	out	0x08, r25	; 8
    2bf2:	07 95       	ror	r16
    2bf4:	88 94       	clc
    2bf6:	57 fd       	sbrc	r21, 7
    2bf8:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bfa:	00 c0       	rjmp	.+0      	; 0x2bfc <L_11494+0xa6>
    2bfc:	00 c0       	rjmp	.+0      	; 0x2bfe <L_11494+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bfe:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2c00:	98 b9       	out	0x08, r25	; 8
    2c02:	07 95       	ror	r16
    2c04:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c06:	00 c0       	rjmp	.+0      	; 0x2c08 <L_11494+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c08:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2c0a:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c0c:	00 c0       	rjmp	.+0      	; 0x2c0e <L_11494+0xb8>
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2c0e:	10 ff       	sbrs	r17, 0
    2c10:	98 b9       	out	0x08, r25	; 8
				}

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
    2c12:	13 2f       	mov	r17, r19
    2c14:	51 11       	cpse	r21, r1
    2c16:	10 2f       	mov	r17, r16
    2c18:	e1 94       	neg	r14
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c1a:	00 c0       	rjmp	.+0      	; 0x2c1c <L_11494+0xc6>
    2c1c:	00 c0       	rjmp	.+0      	; 0x2c1e <L_11494+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c1e:	00 2c       	mov	r0, r0
				}

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
    2c20:	98 b9       	out	0x08, r25	; 8
    2c22:	ed 0e       	add	r14, r29
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c24:	00 c0       	rjmp	.+0      	; 0x2c26 <L_11494+0xd0>
    2c26:	00 c0       	rjmp	.+0      	; 0x2c28 <L_11494+0xd2>

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
    2c28:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c2a:	00 c0       	rjmp	.+0      	; 0x2c2c <L_11494+0xd6>

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
    2c2c:	17 ff       	sbrs	r17, 7
    2c2e:	98 b9       	out	0x08, r25	; 8
    2c30:	31 81       	ldd	r19, Z+1	; 0x01
    2c32:	00 27       	eor	r16, r16
    2c34:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c36:	00 c0       	rjmp	.+0      	; 0x2c38 <L_11494+0xe2>
    2c38:	00 c0       	rjmp	.+0      	; 0x2c3a <L_11494+0xe4>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c3a:	00 2c       	mov	r0, r0

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
    2c3c:	98 b9       	out	0x08, r25	; 8
    2c3e:	31 11       	cpse	r19, r1
    2c40:	38 0f       	add	r19, r24
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c42:	00 c0       	rjmp	.+0      	; 0x2c44 <L_11494+0xee>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c44:	00 2c       	mov	r0, r0
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
    2c46:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c48:	00 c0       	rjmp	.+0      	; 0x2c4a <L_11494+0xf4>
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
    2c4a:	16 ff       	sbrs	r17, 6
    2c4c:	98 b9       	out	0x08, r25	; 8
    2c4e:	08 f4       	brcc	.+2      	; 0x2c52 <L_12718>
    2c50:	3f ef       	ldi	r19, 0xFF	; 255

00002c52 <L_12718>:
    2c52:	81 95       	neg	r24
    2c54:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c56:	00 c0       	rjmp	.+0      	; 0x2c58 <L_12718+0x6>
    2c58:	00 c0       	rjmp	.+0      	; 0x2c5a <L_12718+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c5a:	00 2c       	mov	r0, r0
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
    2c5c:	98 b9       	out	0x08, r25	; 8
    2c5e:	90 fc       	sbrc	r9, 0
    2c60:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c62:	00 c0       	rjmp	.+0      	; 0x2c64 <L_12718+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c64:	00 2c       	mov	r0, r0
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2c66:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c68:	00 c0       	rjmp	.+0      	; 0x2c6a <L_12718+0x18>
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2c6a:	15 ff       	sbrs	r17, 5
    2c6c:	98 b9       	out	0x08, r25	; 8
    2c6e:	07 95       	ror	r16
    2c70:	88 94       	clc
    2c72:	91 fc       	sbrc	r9, 1
    2c74:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c76:	00 c0       	rjmp	.+0      	; 0x2c78 <L_12718+0x26>
    2c78:	00 c0       	rjmp	.+0      	; 0x2c7a <L_12718+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c7a:	00 2c       	mov	r0, r0
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2c7c:	98 b9       	out	0x08, r25	; 8
    2c7e:	07 95       	ror	r16
    2c80:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c82:	00 c0       	rjmp	.+0      	; 0x2c84 <L_12718+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c84:	00 2c       	mov	r0, r0
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
    2c86:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c88:	00 c0       	rjmp	.+0      	; 0x2c8a <L_12718+0x38>
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
    2c8a:	14 ff       	sbrs	r17, 4
    2c8c:	98 b9       	out	0x08, r25	; 8
    2c8e:	92 fc       	sbrc	r9, 2
    2c90:	03 0f       	add	r16, r19
    2c92:	07 95       	ror	r16
    2c94:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c96:	00 c0       	rjmp	.+0      	; 0x2c98 <L_12718+0x46>
    2c98:	00 c0       	rjmp	.+0      	; 0x2c9a <L_12718+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c9a:	00 2c       	mov	r0, r0
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
    2c9c:	98 b9       	out	0x08, r25	; 8
    2c9e:	93 fc       	sbrc	r9, 3
    2ca0:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ca2:	00 c0       	rjmp	.+0      	; 0x2ca4 <L_12718+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ca4:	00 2c       	mov	r0, r0
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
    2ca6:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ca8:	00 c0       	rjmp	.+0      	; 0x2caa <L_12718+0x58>
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
    2caa:	13 ff       	sbrs	r17, 3
    2cac:	98 b9       	out	0x08, r25	; 8
    2cae:	07 95       	ror	r16
    2cb0:	88 94       	clc
    2cb2:	94 fc       	sbrc	r9, 4
    2cb4:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cb6:	00 c0       	rjmp	.+0      	; 0x2cb8 <L_12718+0x66>
    2cb8:	00 c0       	rjmp	.+0      	; 0x2cba <L_12718+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cba:	00 2c       	mov	r0, r0
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
    2cbc:	98 b9       	out	0x08, r25	; 8
    2cbe:	07 95       	ror	r16
    2cc0:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cc2:	00 c0       	rjmp	.+0      	; 0x2cc4 <L_12718+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cc4:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
    2cc6:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cc8:	00 c0       	rjmp	.+0      	; 0x2cca <L_12718+0x78>
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
    2cca:	12 ff       	sbrs	r17, 2
    2ccc:	98 b9       	out	0x08, r25	; 8
    2cce:	95 fc       	sbrc	r9, 5
    2cd0:	03 0f       	add	r16, r19
    2cd2:	07 95       	ror	r16
    2cd4:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cd6:	00 c0       	rjmp	.+0      	; 0x2cd8 <L_12718+0x86>
    2cd8:	00 c0       	rjmp	.+0      	; 0x2cda <L_12718+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cda:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
    2cdc:	98 b9       	out	0x08, r25	; 8
    2cde:	96 fc       	sbrc	r9, 6
    2ce0:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ce2:	00 c0       	rjmp	.+0      	; 0x2ce4 <L_12718+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ce4:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ce6:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ce8:	00 c0       	rjmp	.+0      	; 0x2cea <L_12718+0x98>
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2cea:	11 ff       	sbrs	r17, 1
    2cec:	98 b9       	out	0x08, r25	; 8
    2cee:	07 95       	ror	r16
    2cf0:	88 94       	clc
    2cf2:	97 fc       	sbrc	r9, 7
    2cf4:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cf6:	00 c0       	rjmp	.+0      	; 0x2cf8 <L_12718+0xa6>
    2cf8:	00 c0       	rjmp	.+0      	; 0x2cfa <L_12718+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cfa:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2cfc:	98 b9       	out	0x08, r25	; 8
    2cfe:	07 95       	ror	r16
    2d00:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d02:	00 c0       	rjmp	.+0      	; 0x2d04 <L_12718+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2d04:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2d06:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d08:	00 c0       	rjmp	.+0      	; 0x2d0a <L_12718+0xb8>
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2d0a:	10 ff       	sbrs	r17, 0
    2d0c:	98 b9       	out	0x08, r25	; 8
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE04(b0,b1,d0,e0) _D2(4) LO1 _D3(5)
    2d0e:	13 2f       	mov	r17, r19
    2d10:	91 10       	cpse	r9, r1
    2d12:	10 2f       	mov	r17, r16
    2d14:	86 0f       	add	r24, r22
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d16:	00 c0       	rjmp	.+0      	; 0x2d18 <L_12718+0xc6>
    2d18:	00 c0       	rjmp	.+0      	; 0x2d1a <L_12718+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2d1a:	00 2c       	mov	r0, r0
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE04(b0,b1,d0,e0) _D2(4) LO1 _D3(5)
    2d1c:	98 b9       	out	0x08, r25	; 8
				ENDLOOP5
    2d1e:	11 97       	sbiw	r26, 0x01	; 1
    2d20:	09 f0       	breq	.+2      	; 0x2d24 <L_13698>
    2d22:	86 ce       	rjmp	.-756    	; 0x2a30 <L_9743+0x50>

00002d24 <L_13698>:

		#if (FASTLED_ALLOW_INTERRUPTS == 1)
		// stop using the clock juggler
		TCCR0A &= ~0x30;
		#endif
	}
    2d24:	df 91       	pop	r29
    2d26:	cf 91       	pop	r28
    2d28:	1f 91       	pop	r17
    2d2a:	0f 91       	pop	r16
    2d2c:	ff 90       	pop	r15
    2d2e:	ef 90       	pop	r14
    2d30:	df 90       	pop	r13
    2d32:	cf 90       	pop	r12
    2d34:	bf 90       	pop	r11
    2d36:	af 90       	pop	r10
    2d38:	9f 90       	pop	r9
    2d3a:	08 95       	ret

00002d3c <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    2d3c:	0f 93       	push	r16
    2d3e:	1f 93       	push	r17
    2d40:	cf 93       	push	r28
    2d42:	df 93       	push	r29
    2d44:	ec 01       	movw	r28, r24
    2d46:	8b 01       	movw	r16, r22
    2d48:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_micros>
    2d4c:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d4e:	38 89       	ldd	r19, Y+16	; 0x10
    2d50:	62 1b       	sub	r22, r18
    2d52:	73 0b       	sbc	r23, r19
    2d54:	6a 30       	cpi	r22, 0x0A	; 10
    2d56:	71 05       	cpc	r23, r1
    2d58:	b8 f3       	brcs	.-18     	; 0x2d48 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    2d5a:	f8 94       	cli
    2d5c:	c8 01       	movw	r24, r16
    2d5e:	09 de       	rcall	.-1006   	; 0x2972 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    2d60:	f8 01       	movw	r30, r16
    2d62:	42 81       	ldd	r20, Z+2	; 0x02
    2d64:	53 81       	ldd	r21, Z+3	; 0x03
    2d66:	20 ee       	ldi	r18, 0xE0	; 224
    2d68:	31 e0       	ldi	r19, 0x01	; 1
    2d6a:	da 01       	movw	r26, r20
    2d6c:	0e 94 dc 33 	call	0x67b8	; 0x67b8 <__usmulhisi3>
    2d70:	dc 01       	movw	r26, r24
    2d72:	cb 01       	movw	r24, r22
    2d74:	f4 e0       	ldi	r31, 0x04	; 4
    2d76:	b6 95       	lsr	r27
    2d78:	a7 95       	ror	r26
    2d7a:	97 95       	ror	r25
    2d7c:	87 95       	ror	r24
    2d7e:	fa 95       	dec	r31
    2d80:	d1 f7       	brne	.-12     	; 0x2d76 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	20 e0       	ldi	r18, 0x00	; 0
    2d86:	b9 01       	movw	r22, r18
    2d88:	ea e9       	ldi	r30, 0x9A	; 154
    2d8a:	4e 9f       	mul	r20, r30
    2d8c:	04 0e       	add	r0, r20
    2d8e:	61 1d       	adc	r22, r1
    2d90:	5e 9f       	mul	r21, r30
    2d92:	60 0d       	add	r22, r0
    2d94:	71 1d       	adc	r23, r1
    2d96:	11 24       	eor	r1, r1
    2d98:	65 0f       	add	r22, r21
    2d9a:	71 1d       	adc	r23, r1
    2d9c:	86 0f       	add	r24, r22
    2d9e:	97 1f       	adc	r25, r23
    2da0:	a1 1d       	adc	r26, r1
    2da2:	b1 1d       	adc	r27, r1
    2da4:	89 3e       	cpi	r24, 0xE9	; 233
    2da6:	f3 e0       	ldi	r31, 0x03	; 3
    2da8:	9f 07       	cpc	r25, r31
    2daa:	a1 05       	cpc	r26, r1
    2dac:	b1 05       	cpc	r27, r1
    2dae:	08 f4       	brcc	.+2      	; 0x2db2 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    2db0:	34 c0       	rjmp	.+104    	; 0x2e1a <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    2db2:	88 5e       	subi	r24, 0xE8	; 232
    2db4:	93 40       	sbci	r25, 0x03	; 3
    2db6:	a1 09       	sbc	r26, r1
    2db8:	b1 09       	sbc	r27, r1
    2dba:	42 e0       	ldi	r20, 0x02	; 2
    2dbc:	b6 95       	lsr	r27
    2dbe:	a7 95       	ror	r26
    2dc0:	97 95       	ror	r25
    2dc2:	87 95       	ror	r24
    2dc4:	4a 95       	dec	r20
    2dc6:	d1 f7       	brne	.-12     	; 0x2dbc <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    2dc8:	47 e0       	ldi	r20, 0x07	; 7
    2dca:	84 9f       	mul	r24, r20
    2dcc:	08 0e       	add	r0, r24
    2dce:	21 1d       	adc	r18, r1
    2dd0:	94 9f       	mul	r25, r20
    2dd2:	20 0d       	add	r18, r0
    2dd4:	31 1d       	adc	r19, r1
    2dd6:	11 24       	eor	r1, r1
    2dd8:	29 0f       	add	r18, r25
    2dda:	31 1d       	adc	r19, r1
    2ddc:	60 91 6e 0e 	lds	r22, 0x0E6E	; 0x800e6e <gTimeErrorAccum256ths>
    2de0:	70 e0       	ldi	r23, 0x00	; 0
    2de2:	86 0f       	add	r24, r22
    2de4:	97 1f       	adc	r25, r23
    2de6:	82 0f       	add	r24, r18
    2de8:	93 1f       	adc	r25, r19
    2dea:	40 91 8d 0e 	lds	r20, 0x0E8D	; 0x800e8d <timer0_millis_count>
    2dee:	50 91 8e 0e 	lds	r21, 0x0E8E	; 0x800e8e <timer0_millis_count+0x1>
    2df2:	60 91 8f 0e 	lds	r22, 0x0E8F	; 0x800e8f <timer0_millis_count+0x2>
    2df6:	70 91 90 0e 	lds	r23, 0x0E90	; 0x800e90 <timer0_millis_count+0x3>
    2dfa:	29 2f       	mov	r18, r25
    2dfc:	33 27       	eor	r19, r19
    2dfe:	42 0f       	add	r20, r18
    2e00:	53 1f       	adc	r21, r19
    2e02:	61 1d       	adc	r22, r1
    2e04:	71 1d       	adc	r23, r1
    2e06:	40 93 8d 0e 	sts	0x0E8D, r20	; 0x800e8d <timer0_millis_count>
    2e0a:	50 93 8e 0e 	sts	0x0E8E, r21	; 0x800e8e <timer0_millis_count+0x1>
    2e0e:	60 93 8f 0e 	sts	0x0E8F, r22	; 0x800e8f <timer0_millis_count+0x2>
    2e12:	70 93 90 0e 	sts	0x0E90, r23	; 0x800e90 <timer0_millis_count+0x3>
    2e16:	80 93 6e 0e 	sts	0x0E6E, r24	; 0x800e6e <gTimeErrorAccum256ths>
    2e1a:	78 94       	sei
    2e1c:	0e 94 5a 2a 	call	0x54b4	; 0x54b4 <_micros>
    2e20:	78 8b       	std	Y+16, r23	; 0x10
    2e22:	6f 87       	std	Y+15, r22	; 0x0f
    2e24:	df 91       	pop	r29
    2e26:	cf 91       	pop	r28
    2e28:	1f 91       	pop	r17
    2e2a:	0f 91       	pop	r16
    2e2c:	08 95       	ret

00002e2e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    2e2e:	0f 93       	push	r16
    2e30:	1f 93       	push	r17
    2e32:	cf 93       	push	r28
    2e34:	df 93       	push	r29
    2e36:	20 91 98 07 	lds	r18, 0x0798	; 0x800798 <__data_end>
    2e3a:	2f 5f       	subi	r18, 0xFF	; 255
    2e3c:	32 2f       	mov	r19, r18
    2e3e:	37 70       	andi	r19, 0x07	; 7
    2e40:	30 93 98 07 	sts	0x0798, r19	; 0x800798 <__data_end>
    2e44:	20 ff       	sbrs	r18, 0
    2e46:	2b c0       	rjmp	.+86     	; 0x2e9e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    2e48:	20 e8       	ldi	r18, 0x80	; 128
    2e4a:	31 fd       	sbrc	r19, 1
    2e4c:	20 64       	ori	r18, 0x40	; 64
    2e4e:	34 70       	andi	r19, 0x04	; 4
    2e50:	09 f0       	breq	.+2      	; 0x2e54 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    2e52:	20 62       	ori	r18, 0x20	; 32
    2e54:	20 5f       	subi	r18, 0xF0	; 240
    2e56:	fc 01       	movw	r30, r24
    2e58:	ec 01       	movw	r28, r24
    2e5a:	23 96       	adiw	r28, 0x03	; 3
    2e5c:	00 e0       	ldi	r16, 0x00	; 0
    2e5e:	11 e0       	ldi	r17, 0x01	; 1
    2e60:	64 85       	ldd	r22, Z+12	; 0x0c
    2e62:	66 23       	and	r22, r22
    2e64:	29 f0       	breq	.+10     	; 0x2e70 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    2e66:	70 e0       	ldi	r23, 0x00	; 0
    2e68:	c8 01       	movw	r24, r16
    2e6a:	0e 94 73 33 	call	0x66e6	; 0x66e6 <__divmodhi4>
    2e6e:	6f 5f       	subi	r22, 0xFF	; 255
    2e70:	61 87       	std	Z+9, r22	; 0x09
    2e72:	32 2f       	mov	r19, r18
    2e74:	36 9f       	mul	r19, r22
    2e76:	03 0e       	add	r0, r19
    2e78:	30 e0       	ldi	r19, 0x00	; 0
    2e7a:	31 1d       	adc	r19, r1
    2e7c:	11 24       	eor	r1, r1
    2e7e:	31 11       	cpse	r19, r1
    2e80:	10 c0       	rjmp	.+32     	; 0x2ea2 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    2e82:	16 82       	std	Z+6, r1	; 0x06
    2e84:	66 23       	and	r22, r22
    2e86:	11 f0       	breq	.+4      	; 0x2e8c <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    2e88:	61 50       	subi	r22, 0x01	; 1
    2e8a:	61 87       	std	Z+9, r22	; 0x09
    2e8c:	31 96       	adiw	r30, 0x01	; 1
    2e8e:	ec 17       	cp	r30, r28
    2e90:	fd 07       	cpc	r31, r29
    2e92:	31 f7       	brne	.-52     	; 0x2e60 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    2e94:	df 91       	pop	r29
    2e96:	cf 91       	pop	r28
    2e98:	1f 91       	pop	r17
    2e9a:	0f 91       	pop	r16
    2e9c:	08 95       	ret
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	d4 cf       	rjmp	.-88     	; 0x2e4a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    2ea2:	31 50       	subi	r19, 0x01	; 1
    2ea4:	36 83       	std	Z+6, r19	; 0x06
    2ea6:	ee cf       	rjmp	.-36     	; 0x2e84 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

00002ea8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    2ea8:	0f 93       	push	r16
    2eaa:	1f 93       	push	r17
    2eac:	cf 93       	push	r28
    2eae:	df 93       	push	r29
    2eb0:	cd b7       	in	r28, 0x3d	; 61
    2eb2:	de b7       	in	r29, 0x3e	; 62
    2eb4:	62 97       	sbiw	r28, 0x12	; 18
    2eb6:	0f b6       	in	r0, 0x3f	; 63
    2eb8:	f8 94       	cli
    2eba:	de bf       	out	0x3e, r29	; 62
    2ebc:	0f be       	out	0x3f, r0	; 63
    2ebe:	cd bf       	out	0x3d, r28	; 61
    2ec0:	8c 01       	movw	r16, r24
    2ec2:	f9 01       	movw	r30, r18
    2ec4:	dc 01       	movw	r26, r24
    2ec6:	1c 96       	adiw	r26, 0x0c	; 12
    2ec8:	8c 91       	ld	r24, X
    2eca:	7a 83       	std	Y+2, r23	; 0x02
    2ecc:	69 83       	std	Y+1, r22	; 0x01
    2ece:	5c 83       	std	Y+4, r21	; 0x04
    2ed0:	4b 83       	std	Y+3, r20	; 0x03
    2ed2:	5e 83       	std	Y+6, r21	; 0x06
    2ed4:	4d 83       	std	Y+5, r20	; 0x05
    2ed6:	90 81       	ld	r25, Z
    2ed8:	9d 87       	std	Y+13, r25	; 0x0d
    2eda:	91 81       	ldd	r25, Z+1	; 0x01
    2edc:	9e 87       	std	Y+14, r25	; 0x0e
    2ede:	92 81       	ldd	r25, Z+2	; 0x02
    2ee0:	9f 87       	std	Y+15, r25	; 0x0f
    2ee2:	81 30       	cpi	r24, 0x01	; 1
    2ee4:	e1 f4       	brne	.+56     	; 0x2f1e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    2ee6:	ce 01       	movw	r24, r28
    2ee8:	01 96       	adiw	r24, 0x01	; 1
    2eea:	a1 df       	rcall	.-190    	; 0x2e2e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    2eec:	18 8a       	std	Y+16, r1	; 0x10
    2eee:	1a 8a       	std	Y+18, r1	; 0x12
    2ef0:	19 8a       	std	Y+17, r1	; 0x11
    2ef2:	d8 01       	movw	r26, r16
    2ef4:	ed 91       	ld	r30, X+
    2ef6:	fc 91       	ld	r31, X
    2ef8:	04 84       	ldd	r0, Z+12	; 0x0c
    2efa:	f5 85       	ldd	r31, Z+13	; 0x0d
    2efc:	e0 2d       	mov	r30, r0
    2efe:	be 01       	movw	r22, r28
    2f00:	6f 5f       	subi	r22, 0xFF	; 255
    2f02:	7f 4f       	sbci	r23, 0xFF	; 255
    2f04:	c8 01       	movw	r24, r16
    2f06:	09 95       	icall
    2f08:	62 96       	adiw	r28, 0x12	; 18
    2f0a:	0f b6       	in	r0, 0x3f	; 63
    2f0c:	f8 94       	cli
    2f0e:	de bf       	out	0x3e, r29	; 62
    2f10:	0f be       	out	0x3f, r0	; 63
    2f12:	cd bf       	out	0x3d, r28	; 61
    2f14:	df 91       	pop	r29
    2f16:	cf 91       	pop	r28
    2f18:	1f 91       	pop	r17
    2f1a:	0f 91       	pop	r16
    2f1c:	08 95       	ret
    2f1e:	1c 86       	std	Y+12, r1	; 0x0c
    2f20:	1b 86       	std	Y+11, r1	; 0x0b
    2f22:	1a 86       	std	Y+10, r1	; 0x0a
    2f24:	19 86       	std	Y+9, r1	; 0x09
    2f26:	18 86       	std	Y+8, r1	; 0x08
    2f28:	1f 82       	std	Y+7, r1	; 0x07
    2f2a:	e0 cf       	rjmp	.-64     	; 0x2eec <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

00002f2c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    2f2c:	0f 93       	push	r16
    2f2e:	1f 93       	push	r17
    2f30:	cf 93       	push	r28
    2f32:	df 93       	push	r29
    2f34:	cd b7       	in	r28, 0x3d	; 61
    2f36:	de b7       	in	r29, 0x3e	; 62
    2f38:	62 97       	sbiw	r28, 0x12	; 18
    2f3a:	0f b6       	in	r0, 0x3f	; 63
    2f3c:	f8 94       	cli
    2f3e:	de bf       	out	0x3e, r29	; 62
    2f40:	0f be       	out	0x3f, r0	; 63
    2f42:	cd bf       	out	0x3d, r28	; 61
    2f44:	8c 01       	movw	r16, r24
    2f46:	f9 01       	movw	r30, r18
    2f48:	dc 01       	movw	r26, r24
    2f4a:	1c 96       	adiw	r26, 0x0c	; 12
    2f4c:	8c 91       	ld	r24, X
    2f4e:	7a 83       	std	Y+2, r23	; 0x02
    2f50:	69 83       	std	Y+1, r22	; 0x01
    2f52:	5c 83       	std	Y+4, r21	; 0x04
    2f54:	4b 83       	std	Y+3, r20	; 0x03
    2f56:	5e 83       	std	Y+6, r21	; 0x06
    2f58:	4d 83       	std	Y+5, r20	; 0x05
    2f5a:	90 81       	ld	r25, Z
    2f5c:	9d 87       	std	Y+13, r25	; 0x0d
    2f5e:	91 81       	ldd	r25, Z+1	; 0x01
    2f60:	9e 87       	std	Y+14, r25	; 0x0e
    2f62:	92 81       	ldd	r25, Z+2	; 0x02
    2f64:	9f 87       	std	Y+15, r25	; 0x0f
    2f66:	81 30       	cpi	r24, 0x01	; 1
    2f68:	e9 f4       	brne	.+58     	; 0x2fa4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    2f6a:	ce 01       	movw	r24, r28
    2f6c:	01 96       	adiw	r24, 0x01	; 1
    2f6e:	5f df       	rcall	.-322    	; 0x2e2e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    2f70:	83 e0       	ldi	r24, 0x03	; 3
    2f72:	88 8b       	std	Y+16, r24	; 0x10
    2f74:	1a 8a       	std	Y+18, r1	; 0x12
    2f76:	19 8a       	std	Y+17, r1	; 0x11
    2f78:	d8 01       	movw	r26, r16
    2f7a:	ed 91       	ld	r30, X+
    2f7c:	fc 91       	ld	r31, X
    2f7e:	04 84       	ldd	r0, Z+12	; 0x0c
    2f80:	f5 85       	ldd	r31, Z+13	; 0x0d
    2f82:	e0 2d       	mov	r30, r0
    2f84:	be 01       	movw	r22, r28
    2f86:	6f 5f       	subi	r22, 0xFF	; 255
    2f88:	7f 4f       	sbci	r23, 0xFF	; 255
    2f8a:	c8 01       	movw	r24, r16
    2f8c:	09 95       	icall
    2f8e:	62 96       	adiw	r28, 0x12	; 18
    2f90:	0f b6       	in	r0, 0x3f	; 63
    2f92:	f8 94       	cli
    2f94:	de bf       	out	0x3e, r29	; 62
    2f96:	0f be       	out	0x3f, r0	; 63
    2f98:	cd bf       	out	0x3d, r28	; 61
    2f9a:	df 91       	pop	r29
    2f9c:	cf 91       	pop	r28
    2f9e:	1f 91       	pop	r17
    2fa0:	0f 91       	pop	r16
    2fa2:	08 95       	ret
    2fa4:	1c 86       	std	Y+12, r1	; 0x0c
    2fa6:	1b 86       	std	Y+11, r1	; 0x0b
    2fa8:	1a 86       	std	Y+10, r1	; 0x0a
    2faa:	19 86       	std	Y+9, r1	; 0x09
    2fac:	18 86       	std	Y+8, r1	; 0x08
    2fae:	1f 82       	std	Y+7, r1	; 0x07
    2fb0:	df cf       	rjmp	.-66     	; 0x2f70 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

00002fb2 <_GLOBAL__sub_I_matrix>:
    2fb2:	0f b6       	in	r0, 0x3f	; 63
    2fb4:	f8 94       	cli
    2fb6:	80 91 8d 0e 	lds	r24, 0x0E8D	; 0x800e8d <timer0_millis_count>
    2fba:	90 91 8e 0e 	lds	r25, 0x0E8E	; 0x800e8e <timer0_millis_count+0x1>
    2fbe:	a0 91 8f 0e 	lds	r26, 0x0E8F	; 0x800e8f <timer0_millis_count+0x2>
    2fc2:	b0 91 90 0e 	lds	r27, 0x0E90	; 0x800e90 <timer0_millis_count+0x3>
    2fc6:	0f be       	out	0x3f, r0	; 63
    2fc8:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <lastLEDchange+0x1>
    2fcc:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <lastLEDchange>
    2fd0:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2fd4:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <r>
    2fd8:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2fdc:	80 93 2a 08 	sts	0x082A, r24	; 0x80082a <g>
    2fe0:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2fe4:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <b>
    2fe8:	6f eb       	ldi	r22, 0xBF	; 191
    2fea:	73 e0       	ldi	r23, 0x03	; 3
    2fec:	8c ed       	ldi	r24, 0xDC	; 220
    2fee:	97 e0       	ldi	r25, 0x07	; 7
    2ff0:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    2ff4:	6a eb       	ldi	r22, 0xBA	; 186
    2ff6:	73 e0       	ldi	r23, 0x03	; 3
    2ff8:	83 ee       	ldi	r24, 0xE3	; 227
    2ffa:	97 e0       	ldi	r25, 0x07	; 7
    2ffc:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3000:	68 eb       	ldi	r22, 0xB8	; 184
    3002:	73 e0       	ldi	r23, 0x03	; 3
    3004:	8a ee       	ldi	r24, 0xEA	; 234
    3006:	97 e0       	ldi	r25, 0x07	; 7
    3008:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    300c:	65 eb       	ldi	r22, 0xB5	; 181
    300e:	73 e0       	ldi	r23, 0x03	; 3
    3010:	81 ef       	ldi	r24, 0xF1	; 241
    3012:	97 e0       	ldi	r25, 0x07	; 7
    3014:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3018:	60 eb       	ldi	r22, 0xB0	; 176
    301a:	73 e0       	ldi	r23, 0x03	; 3
    301c:	88 ef       	ldi	r24, 0xF8	; 248
    301e:	97 e0       	ldi	r25, 0x07	; 7
    3020:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3024:	6c ea       	ldi	r22, 0xAC	; 172
    3026:	73 e0       	ldi	r23, 0x03	; 3
    3028:	8f ef       	ldi	r24, 0xFF	; 255
    302a:	97 e0       	ldi	r25, 0x07	; 7
    302c:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3030:	66 ea       	ldi	r22, 0xA6	; 166
    3032:	73 e0       	ldi	r23, 0x03	; 3
    3034:	86 e0       	ldi	r24, 0x06	; 6
    3036:	98 e0       	ldi	r25, 0x08	; 8
    3038:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    303c:	63 ea       	ldi	r22, 0xA3	; 163
    303e:	73 e0       	ldi	r23, 0x03	; 3
    3040:	8d e0       	ldi	r24, 0x0D	; 13
    3042:	98 e0       	ldi	r25, 0x08	; 8
    3044:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3048:	6e e9       	ldi	r22, 0x9E	; 158
    304a:	73 e0       	ldi	r23, 0x03	; 3
    304c:	84 e1       	ldi	r24, 0x14	; 20
    304e:	98 e0       	ldi	r25, 0x08	; 8
    3050:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3054:	69 e9       	ldi	r22, 0x99	; 153
    3056:	73 e0       	ldi	r23, 0x03	; 3
    3058:	8b e1       	ldi	r24, 0x1B	; 27
    305a:	98 e0       	ldi	r25, 0x08	; 8
    305c:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3060:	64 e9       	ldi	r22, 0x94	; 148
    3062:	73 e0       	ldi	r23, 0x03	; 3
    3064:	82 eb       	ldi	r24, 0xB2	; 178
    3066:	97 e0       	ldi	r25, 0x07	; 7
    3068:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    306c:	6d e8       	ldi	r22, 0x8D	; 141
    306e:	73 e0       	ldi	r23, 0x03	; 3
    3070:	89 eb       	ldi	r24, 0xB9	; 185
    3072:	97 e0       	ldi	r25, 0x07	; 7
    3074:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3078:	64 e8       	ldi	r22, 0x84	; 132
    307a:	73 e0       	ldi	r23, 0x03	; 3
    307c:	80 ec       	ldi	r24, 0xC0	; 192
    307e:	97 e0       	ldi	r25, 0x07	; 7
    3080:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3084:	60 e8       	ldi	r22, 0x80	; 128
    3086:	73 e0       	ldi	r23, 0x03	; 3
    3088:	87 ec       	ldi	r24, 0xC7	; 199
    308a:	97 e0       	ldi	r25, 0x07	; 7
    308c:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    3090:	6c e7       	ldi	r22, 0x7C	; 124
    3092:	73 e0       	ldi	r23, 0x03	; 3
    3094:	8e ec       	ldi	r24, 0xCE	; 206
    3096:	97 e0       	ldi	r25, 0x07	; 7
    3098:	0e 94 8c 31 	call	0x6318	; 0x6318 <String::String(char const*)>
    309c:	65 e7       	ldi	r22, 0x75	; 117
    309e:	73 e0       	ldi	r23, 0x03	; 3
    30a0:	85 ed       	ldi	r24, 0xD5	; 213
    30a2:	97 e0       	ldi	r25, 0x07	; 7
    30a4:	0c 94 8c 31 	jmp	0x6318	; 0x6318 <String::String(char const*)>

000030a8 <_GLOBAL__sub_D_matrix>:
    30a8:	cf 93       	push	r28
    30aa:	df 93       	push	r29
    30ac:	cc ed       	ldi	r28, 0xDC	; 220
    30ae:	d7 e0       	ldi	r29, 0x07	; 7
    30b0:	27 97       	sbiw	r28, 0x07	; 7
    30b2:	ce 01       	movw	r24, r28
    30b4:	0e 94 23 31 	call	0x6246	; 0x6246 <String::~String()>
    30b8:	87 e0       	ldi	r24, 0x07	; 7
    30ba:	c2 3b       	cpi	r28, 0xB2	; 178
    30bc:	d8 07       	cpc	r29, r24
    30be:	c1 f7       	brne	.-16     	; 0x30b0 <_GLOBAL__sub_D_matrix+0x8>
    30c0:	c2 e2       	ldi	r28, 0x22	; 34
    30c2:	d8 e0       	ldi	r29, 0x08	; 8
    30c4:	27 97       	sbiw	r28, 0x07	; 7
    30c6:	ce 01       	movw	r24, r28
    30c8:	0e 94 23 31 	call	0x6246	; 0x6246 <String::~String()>
    30cc:	87 e0       	ldi	r24, 0x07	; 7
    30ce:	cc 3d       	cpi	r28, 0xDC	; 220
    30d0:	d8 07       	cpc	r29, r24
    30d2:	c1 f7       	brne	.-16     	; 0x30c4 <_GLOBAL__sub_D_matrix+0x1c>
    30d4:	df 91       	pop	r29
    30d6:	cf 91       	pop	r28
    30d8:	08 95       	ret

000030da <checkIncomingMIDI()>:
    30da:	88 e9       	ldi	r24, 0x98	; 152
    30dc:	9e e0       	ldi	r25, 0x0E	; 14
    30de:	0e 94 87 2c 	call	0x590e	; 0x590e <HardwareSerial::available()>
    30e2:	89 2b       	or	r24, r25
    30e4:	d9 f0       	breq	.+54     	; 0x311c <checkIncomingMIDI()+0x42>
    30e6:	88 e9       	ldi	r24, 0x98	; 152
    30e8:	9e e0       	ldi	r25, 0x0E	; 14
    30ea:	0e 94 ba 2c 	call	0x5974	; 0x5974 <HardwareSerial::read()>
    30ee:	80 93 78 08 	sts	0x0878, r24	; 0x800878 <incomingMidiByte>
    30f2:	68 2f       	mov	r22, r24
    30f4:	8d e0       	ldi	r24, 0x0D	; 13
    30f6:	9f e0       	ldi	r25, 0x0F	; 15
    30f8:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    30fc:	60 91 78 08 	lds	r22, 0x0878	; 0x800878 <incomingMidiByte>
    3100:	6f 3f       	cpi	r22, 0xFF	; 255
    3102:	61 f0       	breq	.+24     	; 0x311c <checkIncomingMIDI()+0x42>
    3104:	67 ff       	sbrs	r22, 7
    3106:	11 c0       	rjmp	.+34     	; 0x312a <checkIncomingMIDI()+0x50>
    3108:	60 93 77 08 	sts	0x0877, r22	; 0x800877 <midiStatusByte>
    310c:	10 92 76 08 	sts	0x0876, r1	; 0x800876 <midiDataByte1>
    3110:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <midiDataByte2>
    3114:	8d e0       	ldi	r24, 0x0D	; 13
    3116:	9f e0       	ldi	r25, 0x0F	; 15
    3118:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    311c:	88 e9       	ldi	r24, 0x98	; 152
    311e:	9e e0       	ldi	r25, 0x0E	; 14
    3120:	0e 94 87 2c 	call	0x590e	; 0x590e <HardwareSerial::available()>
    3124:	89 2b       	or	r24, r25
    3126:	c9 f6       	brne	.-78     	; 0x30da <checkIncomingMIDI()>
    3128:	08 95       	ret
    312a:	80 91 76 08 	lds	r24, 0x0876	; 0x800876 <midiDataByte1>
    312e:	81 11       	cpse	r24, r1
    3130:	37 c0       	rjmp	.+110    	; 0x31a0 <checkIncomingMIDI()+0xc6>
    3132:	60 93 76 08 	sts	0x0876, r22	; 0x800876 <midiDataByte1>
    3136:	60 91 77 08 	lds	r22, 0x0877	; 0x800877 <midiStatusByte>
    313a:	8d e0       	ldi	r24, 0x0D	; 13
    313c:	9f e0       	ldi	r25, 0x0F	; 15
    313e:	0e 94 14 05 	call	0xa28	; 0xa28 <Print::print(unsigned char)>
    3142:	66 e3       	ldi	r22, 0x36	; 54
    3144:	71 e0       	ldi	r23, 0x01	; 1
    3146:	8d e0       	ldi	r24, 0x0D	; 13
    3148:	9f e0       	ldi	r25, 0x0F	; 15
    314a:	0e 94 13 05 	call	0xa26	; 0xa26 <Print::print(char const*)>
    314e:	60 91 76 08 	lds	r22, 0x0876	; 0x800876 <midiDataByte1>
    3152:	8d e0       	ldi	r24, 0x0D	; 13
    3154:	9f e0       	ldi	r25, 0x0F	; 15
    3156:	0e 94 14 05 	call	0xa28	; 0xa28 <Print::print(unsigned char)>
    315a:	66 e3       	ldi	r22, 0x36	; 54
    315c:	71 e0       	ldi	r23, 0x01	; 1
    315e:	8d e0       	ldi	r24, 0x0D	; 13
    3160:	9f e0       	ldi	r25, 0x0F	; 15
    3162:	0e 94 13 05 	call	0xa26	; 0xa26 <Print::print(char const*)>
    3166:	60 91 75 08 	lds	r22, 0x0875	; 0x800875 <midiDataByte2>
    316a:	8d e0       	ldi	r24, 0x0D	; 13
    316c:	9f e0       	ldi	r25, 0x0F	; 15
    316e:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    3172:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <midiStatusByte>
    3176:	89 3b       	cpi	r24, 0xB9	; 185
    3178:	89 f6       	brne	.-94     	; 0x311c <checkIncomingMIDI()+0x42>
    317a:	80 91 76 08 	lds	r24, 0x0876	; 0x800876 <midiDataByte1>
    317e:	86 31       	cpi	r24, 0x16	; 22
    3180:	69 f6       	brne	.-102    	; 0x311c <checkIncomingMIDI()+0x42>
    3182:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <midiDataByte2>
    3186:	88 23       	and	r24, r24
    3188:	49 f2       	breq	.-110    	; 0x311c <checkIncomingMIDI()+0x42>
    318a:	0e 94 c7 0f 	call	0x1f8e	; 0x1f8e <switchToSong(unsigned char)>
    318e:	68 e3       	ldi	r22, 0x38	; 56
    3190:	71 e0       	ldi	r23, 0x01	; 1
    3192:	8d e0       	ldi	r24, 0x0D	; 13
    3194:	9f e0       	ldi	r25, 0x0F	; 15
    3196:	0e 94 13 05 	call	0xa26	; 0xa26 <Print::print(char const*)>
    319a:	60 91 75 08 	lds	r22, 0x0875	; 0x800875 <midiDataByte2>
    319e:	ba cf       	rjmp	.-140    	; 0x3114 <checkIncomingMIDI()+0x3a>
    31a0:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <midiDataByte2>
    31a4:	81 11       	cpse	r24, r1
    31a6:	c7 cf       	rjmp	.-114    	; 0x3136 <checkIncomingMIDI()+0x5c>
    31a8:	60 93 75 08 	sts	0x0875, r22	; 0x800875 <midiDataByte2>
    31ac:	c4 cf       	rjmp	.-120    	; 0x3136 <checkIncomingMIDI()+0x5c>

000031ae <loop>:
    31ae:	8f 92       	push	r8
    31b0:	9f 92       	push	r9
    31b2:	af 92       	push	r10
    31b4:	bf 92       	push	r11
    31b6:	cf 92       	push	r12
    31b8:	df 92       	push	r13
    31ba:	ef 92       	push	r14
    31bc:	ff 92       	push	r15
    31be:	0f 93       	push	r16
    31c0:	1f 93       	push	r17
    31c2:	cf 93       	push	r28
    31c4:	80 91 65 08 	lds	r24, 0x0865	; 0x800865 <ISR_USART_got_a_byte>
    31c8:	88 23       	and	r24, r24
    31ca:	41 f0       	breq	.+16     	; 0x31dc <loop+0x2e>
    31cc:	60 91 66 08 	lds	r22, 0x0866	; 0x800866 <ISR_received_USART_byte>
    31d0:	8d e0       	ldi	r24, 0x0D	; 13
    31d2:	9f e0       	ldi	r25, 0x0F	; 15
    31d4:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    31d8:	10 92 65 08 	sts	0x0865, r1	; 0x800865 <ISR_USART_got_a_byte>
    31dc:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <OneSecondHasPast>
    31e0:	88 23       	and	r24, r24
    31e2:	39 f0       	breq	.+14     	; 0x31f2 <loop+0x44>
    31e4:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <secondsForVoltage>
    31e8:	8f 5f       	subi	r24, 0xFF	; 255
    31ea:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <secondsForVoltage>
    31ee:	10 92 67 08 	sts	0x0867, r1	; 0x800867 <OneSecondHasPast>
    31f2:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <secondsForVoltage>
    31f6:	88 23       	and	r24, r24
    31f8:	09 f4       	brne	.+2      	; 0x31fc <loop+0x4e>
    31fa:	46 c0       	rjmp	.+140    	; 0x3288 <loop+0xda>
    31fc:	c0 91 74 08 	lds	r28, 0x0874	; 0x800874 <voltageSmooth>
    3200:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <secondsForVoltage>
    3204:	88 e2       	ldi	r24, 0x28	; 40
    3206:	0e 94 a2 28 	call	0x5144	; 0x5144 <analogRead>
    320a:	bc 01       	movw	r22, r24
    320c:	99 0f       	add	r25, r25
    320e:	88 0b       	sbc	r24, r24
    3210:	99 0b       	sbc	r25, r25
    3212:	1f 92       	push	r1
    3214:	1f 92       	push	r1
    3216:	1f 92       	push	r1
    3218:	28 e7       	ldi	r18, 0x78	; 120
    321a:	2f 93       	push	r18
    321c:	a1 2c       	mov	r10, r1
    321e:	b1 2c       	mov	r11, r1
    3220:	65 01       	movw	r12, r10
    3222:	ee 24       	eor	r14, r14
    3224:	ea 94       	dec	r14
    3226:	13 e0       	ldi	r17, 0x03	; 3
    3228:	f1 2e       	mov	r15, r17
    322a:	00 e0       	ldi	r16, 0x00	; 0
    322c:	10 e0       	ldi	r17, 0x00	; 0
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	30 e0       	ldi	r19, 0x00	; 0
    3232:	a9 01       	movw	r20, r18
    3234:	0e 94 e4 30 	call	0x61c8	; 0x61c8 <map(long, long, long, long, long)>
    3238:	4b 01       	movw	r8, r22
    323a:	5c 01       	movw	r10, r24
    323c:	6c 2f       	mov	r22, r28
    323e:	70 e0       	ldi	r23, 0x00	; 0
    3240:	90 e0       	ldi	r25, 0x00	; 0
    3242:	80 e0       	ldi	r24, 0x00	; 0
    3244:	0e 94 61 32 	call	0x64c2	; 0x64c2 <__floatsisf>
    3248:	23 e3       	ldi	r18, 0x33	; 51
    324a:	33 e3       	ldi	r19, 0x33	; 51
    324c:	43 e3       	ldi	r20, 0x33	; 51
    324e:	5f e3       	ldi	r21, 0x3F	; 63
    3250:	0e 94 ed 32 	call	0x65da	; 0x65da <__mulsf3>
    3254:	6b 01       	movw	r12, r22
    3256:	7c 01       	movw	r14, r24
    3258:	c5 01       	movw	r24, r10
    325a:	b4 01       	movw	r22, r8
    325c:	0e 94 61 32 	call	0x64c2	; 0x64c2 <__floatsisf>
    3260:	2a e9       	ldi	r18, 0x9A	; 154
    3262:	39 e9       	ldi	r19, 0x99	; 153
    3264:	49 e9       	ldi	r20, 0x99	; 153
    3266:	5e e3       	ldi	r21, 0x3E	; 62
    3268:	0e 94 ed 32 	call	0x65da	; 0x65da <__mulsf3>
    326c:	9b 01       	movw	r18, r22
    326e:	ac 01       	movw	r20, r24
    3270:	c7 01       	movw	r24, r14
    3272:	b6 01       	movw	r22, r12
    3274:	0e 94 cf 31 	call	0x639e	; 0x639e <__addsf3>
    3278:	0e 94 33 32 	call	0x6466	; 0x6466 <__fixunssfsi>
    327c:	60 93 74 08 	sts	0x0874, r22	; 0x800874 <voltageSmooth>
    3280:	0f 90       	pop	r0
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <voltageSmooth>
    328c:	87 36       	cpi	r24, 0x67	; 103
    328e:	70 f1       	brcs	.+92     	; 0x32ec <loop+0x13e>
    3290:	24 df       	rcall	.-440    	; 0x30da <checkIncomingMIDI()>
    3292:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <flag_processFastLED>
    3296:	88 23       	and	r24, r24
    3298:	71 f0       	breq	.+28     	; 0x32b6 <loop+0x108>
    329a:	85 e0       	ldi	r24, 0x05	; 5
    329c:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <FastLED>
    32a0:	80 91 7d 08 	lds	r24, 0x087D	; 0x80087d <songID>
    32a4:	82 30       	cpi	r24, 0x02	; 2
    32a6:	f1 f0       	breq	.+60     	; 0x32e4 <loop+0x136>
    32a8:	90 f4       	brcc	.+36     	; 0x32ce <loop+0x120>
    32aa:	88 23       	and	r24, r24
    32ac:	b1 f0       	breq	.+44     	; 0x32da <loop+0x12c>
    32ae:	81 30       	cpi	r24, 0x01	; 1
    32b0:	b9 f0       	breq	.+46     	; 0x32e0 <loop+0x132>
    32b2:	10 92 6b 08 	sts	0x086B, r1	; 0x80086b <flag_processFastLED>
    32b6:	cf 91       	pop	r28
    32b8:	1f 91       	pop	r17
    32ba:	0f 91       	pop	r16
    32bc:	ff 90       	pop	r15
    32be:	ef 90       	pop	r14
    32c0:	df 90       	pop	r13
    32c2:	cf 90       	pop	r12
    32c4:	bf 90       	pop	r11
    32c6:	af 90       	pop	r10
    32c8:	9f 90       	pop	r9
    32ca:	8f 90       	pop	r8
    32cc:	08 95       	ret
    32ce:	83 30       	cpi	r24, 0x03	; 3
    32d0:	59 f0       	breq	.+22     	; 0x32e8 <loop+0x13a>
    32d2:	84 30       	cpi	r24, 0x04	; 4
    32d4:	71 f7       	brne	.-36     	; 0x32b2 <loop+0x104>
    32d6:	95 da       	rcall	.-2774   	; 0x2802 <Pokerface()>
    32d8:	ec cf       	rjmp	.-40     	; 0x32b2 <loop+0x104>
    32da:	0e 94 c7 10 	call	0x218e	; 0x218e <defaultLoop()>
    32de:	e9 cf       	rjmp	.-46     	; 0x32b2 <loop+0x104>
    32e0:	07 d8       	rcall	.-4082   	; 0x22f0 <LearnToFly()>
    32e2:	e7 cf       	rjmp	.-50     	; 0x32b2 <loop+0x104>
    32e4:	a2 d8       	rcall	.-3772   	; 0x242a <Castle()>
    32e6:	e5 cf       	rjmp	.-54     	; 0x32b2 <loop+0x104>
    32e8:	d0 d9       	rcall	.-3168   	; 0x268a <TooClose()>
    32ea:	e3 cf       	rjmp	.-58     	; 0x32b2 <loop+0x104>
    32ec:	60 e0       	ldi	r22, 0x00	; 0
    32ee:	8d e7       	ldi	r24, 0x7D	; 125
    32f0:	9e e0       	ldi	r25, 0x0E	; 14
    32f2:	0e 94 bd 25 	call	0x4b7a	; 0x4b7a <CFastLED::clear(bool)>
    32f6:	8d e7       	ldi	r24, 0x7D	; 125
    32f8:	9e e0       	ldi	r25, 0x0E	; 14
    32fa:	0e 94 47 05 	call	0xa8e	; 0xa8e <CFastLED::show()>
    32fe:	64 ef       	ldi	r22, 0xF4	; 244
    3300:	71 e0       	ldi	r23, 0x01	; 1
    3302:	80 e0       	ldi	r24, 0x00	; 0
    3304:	90 e0       	ldi	r25, 0x00	; 0
    3306:	0e 94 3a 2a 	call	0x5474	; 0x5474 <delay>
    330a:	85 e0       	ldi	r24, 0x05	; 5
    330c:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <FastLED>
    3310:	8f ef       	ldi	r24, 0xFF	; 255
    3312:	80 93 7e 08 	sts	0x087E, r24	; 0x80087e <leds>
    3316:	10 92 7f 08 	sts	0x087F, r1	; 0x80087f <leds+0x1>
    331a:	10 92 80 08 	sts	0x0880, r1	; 0x800880 <leds+0x2>
    331e:	8d e7       	ldi	r24, 0x7D	; 125
    3320:	9e e0       	ldi	r25, 0x0E	; 14
    3322:	0e 94 47 05 	call	0xa8e	; 0xa8e <CFastLED::show()>
    3326:	64 ef       	ldi	r22, 0xF4	; 244
    3328:	71 e0       	ldi	r23, 0x01	; 1
    332a:	80 e0       	ldi	r24, 0x00	; 0
    332c:	90 e0       	ldi	r25, 0x00	; 0
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	0f 91       	pop	r16
    3334:	ff 90       	pop	r15
    3336:	ef 90       	pop	r14
    3338:	df 90       	pop	r13
    333a:	cf 90       	pop	r12
    333c:	bf 90       	pop	r11
    333e:	af 90       	pop	r10
    3340:	9f 90       	pop	r9
    3342:	8f 90       	pop	r8
    3344:	0c 94 3a 2a 	jmp	0x5474	; 0x5474 <delay>

00003348 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    3348:	90 e0       	ldi	r25, 0x00	; 0
    334a:	80 e0       	ldi	r24, 0x00	; 0
    334c:	08 95       	ret

0000334e <Print::flush()>:
    334e:	08 95       	ret

00003350 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    3350:	2f 92       	push	r2
    3352:	3f 92       	push	r3
    3354:	4f 92       	push	r4
    3356:	5f 92       	push	r5
    3358:	6f 92       	push	r6
    335a:	7f 92       	push	r7
    335c:	8f 92       	push	r8
    335e:	9f 92       	push	r9
    3360:	af 92       	push	r10
    3362:	bf 92       	push	r11
    3364:	cf 92       	push	r12
    3366:	df 92       	push	r13
    3368:	ef 92       	push	r14
    336a:	ff 92       	push	r15
    336c:	0f 93       	push	r16
    336e:	1f 93       	push	r17
    3370:	cf 93       	push	r28
    3372:	df 93       	push	r29
    3374:	00 d0       	rcall	.+0      	; 0x3376 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    3376:	00 d0       	rcall	.+0      	; 0x3378 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    3378:	00 d0       	rcall	.+0      	; 0x337a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    337a:	cd b7       	in	r28, 0x3d	; 61
    337c:	de b7       	in	r29, 0x3e	; 62
    337e:	3c 01       	movw	r6, r24
    3380:	6a 01       	movw	r12, r20
    3382:	3e 83       	std	Y+6, r19	; 0x06
    3384:	2d 83       	std	Y+5, r18	; 0x05
    3386:	fc 82       	std	Y+4, r15	; 0x04
    3388:	eb 82       	std	Y+3, r14	; 0x03
    338a:	58 01       	movw	r10, r16
    338c:	a4 1a       	sub	r10, r20
    338e:	b5 0a       	sbc	r11, r21
    3390:	b7 fe       	sbrs	r11, 7
    3392:	03 c0       	rjmp	.+6      	; 0x339a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    3394:	b1 94       	neg	r11
    3396:	a1 94       	neg	r10
    3398:	b1 08       	sbc	r11, r1
    339a:	8d 80       	ldd	r8, Y+5	; 0x05
    339c:	9e 80       	ldd	r9, Y+6	; 0x06
    339e:	86 1a       	sub	r8, r22
    33a0:	97 0a       	sbc	r9, r23
    33a2:	97 fe       	sbrs	r9, 7
    33a4:	03 c0       	rjmp	.+6      	; 0x33ac <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    33a6:	91 94       	neg	r9
    33a8:	81 94       	neg	r8
    33aa:	91 08       	sbc	r9, r1
    33ac:	8a 14       	cp	r8, r10
    33ae:	9b 04       	cpc	r9, r11
    33b0:	5c f0       	brlt	.+22     	; 0x33c8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    33b2:	90 2f       	mov	r25, r16
    33b4:	81 2f       	mov	r24, r17
    33b6:	0d 81       	ldd	r16, Y+5	; 0x05
    33b8:	1e 81       	ldd	r17, Y+6	; 0x06
    33ba:	9d 83       	std	Y+5, r25	; 0x05
    33bc:	8e 83       	std	Y+6, r24	; 0x06
    33be:	9c 2d       	mov	r25, r12
    33c0:	8d 2d       	mov	r24, r13
    33c2:	6b 01       	movw	r12, r22
    33c4:	69 2f       	mov	r22, r25
    33c6:	78 2f       	mov	r23, r24
    33c8:	0c 15       	cp	r16, r12
    33ca:	1d 05       	cpc	r17, r13
    33cc:	5c f0       	brlt	.+22     	; 0x33e4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    33ce:	9d 81       	ldd	r25, Y+5	; 0x05
    33d0:	8e 81       	ldd	r24, Y+6	; 0x06
    33d2:	7e 83       	std	Y+6, r23	; 0x06
    33d4:	6d 83       	std	Y+5, r22	; 0x05
    33d6:	69 2f       	mov	r22, r25
    33d8:	78 2f       	mov	r23, r24
    33da:	90 2f       	mov	r25, r16
    33dc:	81 2f       	mov	r24, r17
    33de:	86 01       	movw	r16, r12
    33e0:	c9 2e       	mov	r12, r25
    33e2:	d8 2e       	mov	r13, r24
    33e4:	16 01       	movw	r2, r12
    33e6:	20 1a       	sub	r2, r16
    33e8:	31 0a       	sbc	r3, r17
    33ea:	2b 01       	movw	r4, r22
    33ec:	2d 81       	ldd	r18, Y+5	; 0x05
    33ee:	3e 81       	ldd	r19, Y+6	; 0x06
    33f0:	42 1a       	sub	r4, r18
    33f2:	53 0a       	sbc	r5, r19
    33f4:	57 fe       	sbrs	r5, 7
    33f6:	03 c0       	rjmp	.+6      	; 0x33fe <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    33f8:	51 94       	neg	r5
    33fa:	41 94       	neg	r4
    33fc:	51 08       	sbc	r5, r1
    33fe:	71 01       	movw	r14, r2
    3400:	37 fe       	sbrs	r3, 7
    3402:	03 c0       	rjmp	.+6      	; 0x340a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    3404:	3f ef       	ldi	r19, 0xFF	; 255
    3406:	e3 1a       	sub	r14, r19
    3408:	f3 0a       	sbc	r15, r19
    340a:	f5 94       	asr	r15
    340c:	e7 94       	ror	r14
    340e:	8d 81       	ldd	r24, Y+5	; 0x05
    3410:	9e 81       	ldd	r25, Y+6	; 0x06
    3412:	86 17       	cp	r24, r22
    3414:	97 07       	cpc	r25, r23
    3416:	5c f5       	brge	.+86     	; 0x346e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    3418:	a1 e0       	ldi	r26, 0x01	; 1
    341a:	b0 e0       	ldi	r27, 0x00	; 0
    341c:	ba 83       	std	Y+2, r27	; 0x02
    341e:	a9 83       	std	Y+1, r26	; 0x01
    3420:	c0 16       	cp	r12, r16
    3422:	d1 06       	cpc	r13, r17
    3424:	4c f1       	brlt	.+82     	; 0x3478 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    3426:	d3 01       	movw	r26, r6
    3428:	ed 91       	ld	r30, X+
    342a:	fc 91       	ld	r31, X
    342c:	04 84       	ldd	r0, Z+12	; 0x0c
    342e:	f5 85       	ldd	r31, Z+13	; 0x0d
    3430:	e0 2d       	mov	r30, r0
    3432:	2b 81       	ldd	r18, Y+3	; 0x03
    3434:	3c 81       	ldd	r19, Y+4	; 0x04
    3436:	a8 01       	movw	r20, r16
    3438:	6d 81       	ldd	r22, Y+5	; 0x05
    343a:	7e 81       	ldd	r23, Y+6	; 0x06
    343c:	8a 14       	cp	r8, r10
    343e:	9b 04       	cpc	r9, r11
    3440:	1c f0       	brlt	.+6      	; 0x3448 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    3442:	4d 81       	ldd	r20, Y+5	; 0x05
    3444:	5e 81       	ldd	r21, Y+6	; 0x06
    3446:	b8 01       	movw	r22, r16
    3448:	c3 01       	movw	r24, r6
    344a:	09 95       	icall
    344c:	e4 18       	sub	r14, r4
    344e:	f5 08       	sbc	r15, r5
    3450:	f7 fe       	sbrs	r15, 7
    3452:	0a c0       	rjmp	.+20     	; 0x3468 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    3454:	2d 81       	ldd	r18, Y+5	; 0x05
    3456:	3e 81       	ldd	r19, Y+6	; 0x06
    3458:	89 81       	ldd	r24, Y+1	; 0x01
    345a:	9a 81       	ldd	r25, Y+2	; 0x02
    345c:	28 0f       	add	r18, r24
    345e:	39 1f       	adc	r19, r25
    3460:	3e 83       	std	Y+6, r19	; 0x06
    3462:	2d 83       	std	Y+5, r18	; 0x05
    3464:	e2 0c       	add	r14, r2
    3466:	f3 1c       	adc	r15, r3
    3468:	0f 5f       	subi	r16, 0xFF	; 255
    346a:	1f 4f       	sbci	r17, 0xFF	; 255
    346c:	d9 cf       	rjmp	.-78     	; 0x3420 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    346e:	2f ef       	ldi	r18, 0xFF	; 255
    3470:	3f ef       	ldi	r19, 0xFF	; 255
    3472:	3a 83       	std	Y+2, r19	; 0x02
    3474:	29 83       	std	Y+1, r18	; 0x01
    3476:	d4 cf       	rjmp	.-88     	; 0x3420 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    3478:	26 96       	adiw	r28, 0x06	; 6
    347a:	0f b6       	in	r0, 0x3f	; 63
    347c:	f8 94       	cli
    347e:	de bf       	out	0x3e, r29	; 62
    3480:	0f be       	out	0x3f, r0	; 63
    3482:	cd bf       	out	0x3d, r28	; 61
    3484:	df 91       	pop	r29
    3486:	cf 91       	pop	r28
    3488:	1f 91       	pop	r17
    348a:	0f 91       	pop	r16
    348c:	ff 90       	pop	r15
    348e:	ef 90       	pop	r14
    3490:	df 90       	pop	r13
    3492:	cf 90       	pop	r12
    3494:	bf 90       	pop	r11
    3496:	af 90       	pop	r10
    3498:	9f 90       	pop	r9
    349a:	8f 90       	pop	r8
    349c:	7f 90       	pop	r7
    349e:	6f 90       	pop	r6
    34a0:	5f 90       	pop	r5
    34a2:	4f 90       	pop	r4
    34a4:	3f 90       	pop	r3
    34a6:	2f 90       	pop	r2
    34a8:	08 95       	ret

000034aa <Adafruit_GFX::startWrite()>:
    34aa:	08 95       	ret

000034ac <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    34ac:	dc 01       	movw	r26, r24
    34ae:	ed 91       	ld	r30, X+
    34b0:	fc 91       	ld	r31, X
    34b2:	00 84       	ldd	r0, Z+8	; 0x08
    34b4:	f1 85       	ldd	r31, Z+9	; 0x09
    34b6:	e0 2d       	mov	r30, r0
    34b8:	09 94       	ijmp

000034ba <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    34ba:	0f 93       	push	r16
    34bc:	1f 93       	push	r17
    34be:	dc 01       	movw	r26, r24
    34c0:	ed 91       	ld	r30, X+
    34c2:	fc 91       	ld	r31, X
    34c4:	04 8c       	ldd	r0, Z+28	; 0x1c
    34c6:	f5 8d       	ldd	r31, Z+29	; 0x1d
    34c8:	e0 2d       	mov	r30, r0
    34ca:	09 95       	icall
    34cc:	1f 91       	pop	r17
    34ce:	0f 91       	pop	r16
    34d0:	08 95       	ret

000034d2 <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    34d2:	0f 93       	push	r16
    34d4:	1f 93       	push	r17
    34d6:	dc 01       	movw	r26, r24
    34d8:	ed 91       	ld	r30, X+
    34da:	fc 91       	ld	r31, X
    34dc:	06 8c       	ldd	r0, Z+30	; 0x1e
    34de:	f7 8d       	ldd	r31, Z+31	; 0x1f
    34e0:	e0 2d       	mov	r30, r0
    34e2:	09 95       	icall
    34e4:	1f 91       	pop	r17
    34e6:	0f 91       	pop	r16
    34e8:	08 95       	ret

000034ea <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    34ea:	ef 92       	push	r14
    34ec:	ff 92       	push	r15
    34ee:	0f 93       	push	r16
    34f0:	1f 93       	push	r17
    34f2:	dc 01       	movw	r26, r24
    34f4:	ed 91       	ld	r30, X+
    34f6:	fc 91       	ld	r31, X
    34f8:	00 a0       	ldd	r0, Z+32	; 0x20
    34fa:	f1 a1       	ldd	r31, Z+33	; 0x21
    34fc:	e0 2d       	mov	r30, r0
    34fe:	09 95       	icall
    3500:	1f 91       	pop	r17
    3502:	0f 91       	pop	r16
    3504:	ff 90       	pop	r15
    3506:	ef 90       	pop	r14
    3508:	08 95       	ret

0000350a <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    350a:	8f 92       	push	r8
    350c:	9f 92       	push	r9
    350e:	af 92       	push	r10
    3510:	bf 92       	push	r11
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	cf 93       	push	r28
    3520:	df 93       	push	r29
    3522:	ec 01       	movw	r28, r24
    3524:	5b 01       	movw	r10, r22
    3526:	4a 01       	movw	r8, r20
    3528:	69 01       	movw	r12, r18
    352a:	78 01       	movw	r14, r16
    352c:	e8 81       	ld	r30, Y
    352e:	f9 81       	ldd	r31, Y+1	; 0x01
    3530:	02 84       	ldd	r0, Z+10	; 0x0a
    3532:	f3 85       	ldd	r31, Z+11	; 0x0b
    3534:	e0 2d       	mov	r30, r0
    3536:	09 95       	icall
    3538:	c8 0c       	add	r12, r8
    353a:	d9 1c       	adc	r13, r9
    353c:	86 01       	movw	r16, r12
    353e:	01 50       	subi	r16, 0x01	; 1
    3540:	11 09       	sbc	r17, r1
    3542:	e8 81       	ld	r30, Y
    3544:	f9 81       	ldd	r31, Y+1	; 0x01
    3546:	04 88       	ldd	r0, Z+20	; 0x14
    3548:	f5 89       	ldd	r31, Z+21	; 0x15
    354a:	e0 2d       	mov	r30, r0
    354c:	95 01       	movw	r18, r10
    354e:	a4 01       	movw	r20, r8
    3550:	b5 01       	movw	r22, r10
    3552:	ce 01       	movw	r24, r28
    3554:	09 95       	icall
    3556:	e8 81       	ld	r30, Y
    3558:	f9 81       	ldd	r31, Y+1	; 0x01
    355a:	06 88       	ldd	r0, Z+22	; 0x16
    355c:	f7 89       	ldd	r31, Z+23	; 0x17
    355e:	e0 2d       	mov	r30, r0
    3560:	ce 01       	movw	r24, r28
    3562:	df 91       	pop	r29
    3564:	cf 91       	pop	r28
    3566:	1f 91       	pop	r17
    3568:	0f 91       	pop	r16
    356a:	ff 90       	pop	r15
    356c:	ef 90       	pop	r14
    356e:	df 90       	pop	r13
    3570:	cf 90       	pop	r12
    3572:	bf 90       	pop	r11
    3574:	af 90       	pop	r10
    3576:	9f 90       	pop	r9
    3578:	8f 90       	pop	r8
    357a:	09 94       	ijmp

0000357c <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    357c:	8f 92       	push	r8
    357e:	9f 92       	push	r9
    3580:	af 92       	push	r10
    3582:	bf 92       	push	r11
    3584:	cf 92       	push	r12
    3586:	df 92       	push	r13
    3588:	ef 92       	push	r14
    358a:	ff 92       	push	r15
    358c:	0f 93       	push	r16
    358e:	1f 93       	push	r17
    3590:	cf 93       	push	r28
    3592:	df 93       	push	r29
    3594:	ec 01       	movw	r28, r24
    3596:	5b 01       	movw	r10, r22
    3598:	4a 01       	movw	r8, r20
    359a:	69 01       	movw	r12, r18
    359c:	e8 81       	ld	r30, Y
    359e:	f9 81       	ldd	r31, Y+1	; 0x01
    35a0:	02 84       	ldd	r0, Z+10	; 0x0a
    35a2:	f3 85       	ldd	r31, Z+11	; 0x0b
    35a4:	e0 2d       	mov	r30, r0
    35a6:	09 95       	icall
    35a8:	95 01       	movw	r18, r10
    35aa:	2c 0d       	add	r18, r12
    35ac:	3d 1d       	adc	r19, r13
    35ae:	21 50       	subi	r18, 0x01	; 1
    35b0:	31 09       	sbc	r19, r1
    35b2:	e8 81       	ld	r30, Y
    35b4:	f9 81       	ldd	r31, Y+1	; 0x01
    35b6:	04 88       	ldd	r0, Z+20	; 0x14
    35b8:	f5 89       	ldd	r31, Z+21	; 0x15
    35ba:	e0 2d       	mov	r30, r0
    35bc:	78 01       	movw	r14, r16
    35be:	84 01       	movw	r16, r8
    35c0:	a4 01       	movw	r20, r8
    35c2:	b5 01       	movw	r22, r10
    35c4:	ce 01       	movw	r24, r28
    35c6:	09 95       	icall
    35c8:	e8 81       	ld	r30, Y
    35ca:	f9 81       	ldd	r31, Y+1	; 0x01
    35cc:	06 88       	ldd	r0, Z+22	; 0x16
    35ce:	f7 89       	ldd	r31, Z+23	; 0x17
    35d0:	e0 2d       	mov	r30, r0
    35d2:	ce 01       	movw	r24, r28
    35d4:	df 91       	pop	r29
    35d6:	cf 91       	pop	r28
    35d8:	1f 91       	pop	r17
    35da:	0f 91       	pop	r16
    35dc:	ff 90       	pop	r15
    35de:	ef 90       	pop	r14
    35e0:	df 90       	pop	r13
    35e2:	cf 90       	pop	r12
    35e4:	bf 90       	pop	r11
    35e6:	af 90       	pop	r10
    35e8:	9f 90       	pop	r9
    35ea:	8f 90       	pop	r8
    35ec:	09 94       	ijmp

000035ee <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    35ee:	4f 92       	push	r4
    35f0:	5f 92       	push	r5
    35f2:	6f 92       	push	r6
    35f4:	7f 92       	push	r7
    35f6:	8f 92       	push	r8
    35f8:	9f 92       	push	r9
    35fa:	af 92       	push	r10
    35fc:	bf 92       	push	r11
    35fe:	cf 92       	push	r12
    3600:	df 92       	push	r13
    3602:	ef 92       	push	r14
    3604:	ff 92       	push	r15
    3606:	0f 93       	push	r16
    3608:	1f 93       	push	r17
    360a:	cf 93       	push	r28
    360c:	df 93       	push	r29
    360e:	6c 01       	movw	r12, r24
    3610:	2b 01       	movw	r4, r22
    3612:	5a 01       	movw	r10, r20
    3614:	39 01       	movw	r6, r18
    3616:	48 01       	movw	r8, r16
    3618:	dc 01       	movw	r26, r24
    361a:	ed 91       	ld	r30, X+
    361c:	fc 91       	ld	r31, X
    361e:	02 84       	ldd	r0, Z+10	; 0x0a
    3620:	f3 85       	ldd	r31, Z+11	; 0x0b
    3622:	e0 2d       	mov	r30, r0
    3624:	09 95       	icall
    3626:	e2 01       	movw	r28, r4
    3628:	64 0c       	add	r6, r4
    362a:	75 1c       	adc	r7, r5
    362c:	d6 01       	movw	r26, r12
    362e:	ed 91       	ld	r30, X+
    3630:	fc 91       	ld	r31, X
    3632:	c6 15       	cp	r28, r6
    3634:	d7 05       	cpc	r29, r7
    3636:	5c f4       	brge	.+22     	; 0x364e <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    3638:	00 88       	ldd	r0, Z+16	; 0x10
    363a:	f1 89       	ldd	r31, Z+17	; 0x11
    363c:	e0 2d       	mov	r30, r0
    363e:	87 01       	movw	r16, r14
    3640:	94 01       	movw	r18, r8
    3642:	a5 01       	movw	r20, r10
    3644:	be 01       	movw	r22, r28
    3646:	c6 01       	movw	r24, r12
    3648:	09 95       	icall
    364a:	21 96       	adiw	r28, 0x01	; 1
    364c:	ef cf       	rjmp	.-34     	; 0x362c <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    364e:	06 88       	ldd	r0, Z+22	; 0x16
    3650:	f7 89       	ldd	r31, Z+23	; 0x17
    3652:	e0 2d       	mov	r30, r0
    3654:	c6 01       	movw	r24, r12
    3656:	df 91       	pop	r29
    3658:	cf 91       	pop	r28
    365a:	1f 91       	pop	r17
    365c:	0f 91       	pop	r16
    365e:	ff 90       	pop	r15
    3660:	ef 90       	pop	r14
    3662:	df 90       	pop	r13
    3664:	cf 90       	pop	r12
    3666:	bf 90       	pop	r11
    3668:	af 90       	pop	r10
    366a:	9f 90       	pop	r9
    366c:	8f 90       	pop	r8
    366e:	7f 90       	pop	r7
    3670:	6f 90       	pop	r6
    3672:	5f 90       	pop	r5
    3674:	4f 90       	pop	r4
    3676:	09 94       	ijmp

00003678 <Adafruit_GFX::fillScreen(unsigned int)>:
    3678:	ef 92       	push	r14
    367a:	ff 92       	push	r15
    367c:	0f 93       	push	r16
    367e:	1f 93       	push	r17
    3680:	dc 01       	movw	r26, r24
    3682:	19 96       	adiw	r26, 0x09	; 9
    3684:	0d 91       	ld	r16, X+
    3686:	1c 91       	ld	r17, X
    3688:	1a 97       	sbiw	r26, 0x0a	; 10
    368a:	17 96       	adiw	r26, 0x07	; 7
    368c:	2d 91       	ld	r18, X+
    368e:	3c 91       	ld	r19, X
    3690:	18 97       	sbiw	r26, 0x08	; 8
    3692:	ed 91       	ld	r30, X+
    3694:	fc 91       	ld	r31, X
    3696:	00 a0       	ldd	r0, Z+32	; 0x20
    3698:	f1 a1       	ldd	r31, Z+33	; 0x21
    369a:	e0 2d       	mov	r30, r0
    369c:	7b 01       	movw	r14, r22
    369e:	50 e0       	ldi	r21, 0x00	; 0
    36a0:	40 e0       	ldi	r20, 0x00	; 0
    36a2:	70 e0       	ldi	r23, 0x00	; 0
    36a4:	60 e0       	ldi	r22, 0x00	; 0
    36a6:	09 95       	icall
    36a8:	1f 91       	pop	r17
    36aa:	0f 91       	pop	r16
    36ac:	ff 90       	pop	r15
    36ae:	ef 90       	pop	r14
    36b0:	08 95       	ret

000036b2 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    36b2:	6f 92       	push	r6
    36b4:	7f 92       	push	r7
    36b6:	8f 92       	push	r8
    36b8:	9f 92       	push	r9
    36ba:	af 92       	push	r10
    36bc:	bf 92       	push	r11
    36be:	cf 92       	push	r12
    36c0:	df 92       	push	r13
    36c2:	ef 92       	push	r14
    36c4:	ff 92       	push	r15
    36c6:	0f 93       	push	r16
    36c8:	1f 93       	push	r17
    36ca:	cf 93       	push	r28
    36cc:	df 93       	push	r29
    36ce:	ec 01       	movw	r28, r24
    36d0:	6b 01       	movw	r12, r22
    36d2:	5a 01       	movw	r10, r20
    36d4:	39 01       	movw	r6, r18
    36d6:	48 01       	movw	r8, r16
    36d8:	e8 81       	ld	r30, Y
    36da:	f9 81       	ldd	r31, Y+1	; 0x01
    36dc:	02 84       	ldd	r0, Z+10	; 0x0a
    36de:	f3 85       	ldd	r31, Z+11	; 0x0b
    36e0:	e0 2d       	mov	r30, r0
    36e2:	09 95       	icall
    36e4:	e8 81       	ld	r30, Y
    36e6:	f9 81       	ldd	r31, Y+1	; 0x01
    36e8:	02 88       	ldd	r0, Z+18	; 0x12
    36ea:	f3 89       	ldd	r31, Z+19	; 0x13
    36ec:	e0 2d       	mov	r30, r0
    36ee:	87 01       	movw	r16, r14
    36f0:	93 01       	movw	r18, r6
    36f2:	a5 01       	movw	r20, r10
    36f4:	b6 01       	movw	r22, r12
    36f6:	ce 01       	movw	r24, r28
    36f8:	09 95       	icall
    36fa:	a5 01       	movw	r20, r10
    36fc:	48 0d       	add	r20, r8
    36fe:	59 1d       	adc	r21, r9
    3700:	41 50       	subi	r20, 0x01	; 1
    3702:	51 09       	sbc	r21, r1
    3704:	e8 81       	ld	r30, Y
    3706:	f9 81       	ldd	r31, Y+1	; 0x01
    3708:	02 88       	ldd	r0, Z+18	; 0x12
    370a:	f3 89       	ldd	r31, Z+19	; 0x13
    370c:	e0 2d       	mov	r30, r0
    370e:	93 01       	movw	r18, r6
    3710:	b6 01       	movw	r22, r12
    3712:	ce 01       	movw	r24, r28
    3714:	09 95       	icall
    3716:	e8 81       	ld	r30, Y
    3718:	f9 81       	ldd	r31, Y+1	; 0x01
    371a:	00 88       	ldd	r0, Z+16	; 0x10
    371c:	f1 89       	ldd	r31, Z+17	; 0x11
    371e:	e0 2d       	mov	r30, r0
    3720:	94 01       	movw	r18, r8
    3722:	a5 01       	movw	r20, r10
    3724:	b6 01       	movw	r22, r12
    3726:	ce 01       	movw	r24, r28
    3728:	09 95       	icall
    372a:	c6 0c       	add	r12, r6
    372c:	d7 1c       	adc	r13, r7
    372e:	b6 01       	movw	r22, r12
    3730:	61 50       	subi	r22, 0x01	; 1
    3732:	71 09       	sbc	r23, r1
    3734:	e8 81       	ld	r30, Y
    3736:	f9 81       	ldd	r31, Y+1	; 0x01
    3738:	00 88       	ldd	r0, Z+16	; 0x10
    373a:	f1 89       	ldd	r31, Z+17	; 0x11
    373c:	e0 2d       	mov	r30, r0
    373e:	94 01       	movw	r18, r8
    3740:	a5 01       	movw	r20, r10
    3742:	ce 01       	movw	r24, r28
    3744:	09 95       	icall
    3746:	e8 81       	ld	r30, Y
    3748:	f9 81       	ldd	r31, Y+1	; 0x01
    374a:	06 88       	ldd	r0, Z+22	; 0x16
    374c:	f7 89       	ldd	r31, Z+23	; 0x17
    374e:	e0 2d       	mov	r30, r0
    3750:	ce 01       	movw	r24, r28
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	ff 90       	pop	r15
    375c:	ef 90       	pop	r14
    375e:	df 90       	pop	r13
    3760:	cf 90       	pop	r12
    3762:	bf 90       	pop	r11
    3764:	af 90       	pop	r10
    3766:	9f 90       	pop	r9
    3768:	8f 90       	pop	r8
    376a:	7f 90       	pop	r7
    376c:	6f 90       	pop	r6
    376e:	09 94       	ijmp

00003770 <Adafruit_GFX::invertDisplay(bool)>:
    3770:	08 95       	ret

00003772 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    3772:	6f 92       	push	r6
    3774:	7f 92       	push	r7
    3776:	8f 92       	push	r8
    3778:	9f 92       	push	r9
    377a:	af 92       	push	r10
    377c:	bf 92       	push	r11
    377e:	cf 92       	push	r12
    3780:	df 92       	push	r13
    3782:	ef 92       	push	r14
    3784:	ff 92       	push	r15
    3786:	0f 93       	push	r16
    3788:	1f 93       	push	r17
    378a:	cf 93       	push	r28
    378c:	df 93       	push	r29
    378e:	5c 01       	movw	r10, r24
    3790:	eb 01       	movw	r28, r22
    3792:	6a 01       	movw	r12, r20
    3794:	49 01       	movw	r8, r18
    3796:	38 01       	movw	r6, r16
    3798:	87 01       	movw	r16, r14
    379a:	dc 01       	movw	r26, r24
    379c:	ed 91       	ld	r30, X+
    379e:	fc 91       	ld	r31, X
    37a0:	62 17       	cp	r22, r18
    37a2:	73 07       	cpc	r23, r19
    37a4:	19 f5       	brne	.+70     	; 0x37ec <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    37a6:	64 16       	cp	r6, r20
    37a8:	75 06       	cpc	r7, r21
    37aa:	2c f0       	brlt	.+10     	; 0x37b6 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    37ac:	96 2d       	mov	r25, r6
    37ae:	87 2d       	mov	r24, r7
    37b0:	3a 01       	movw	r6, r20
    37b2:	c9 2e       	mov	r12, r25
    37b4:	d8 2e       	mov	r13, r24
    37b6:	96 01       	movw	r18, r12
    37b8:	26 19       	sub	r18, r6
    37ba:	37 09       	sbc	r19, r7
    37bc:	2f 5f       	subi	r18, 0xFF	; 255
    37be:	3f 4f       	sbci	r19, 0xFF	; 255
    37c0:	04 8c       	ldd	r0, Z+28	; 0x1c
    37c2:	f5 8d       	ldd	r31, Z+29	; 0x1d
    37c4:	e0 2d       	mov	r30, r0
    37c6:	a3 01       	movw	r20, r6
    37c8:	be 01       	movw	r22, r28
    37ca:	c5 01       	movw	r24, r10
    37cc:	09 95       	icall
    37ce:	df 91       	pop	r29
    37d0:	cf 91       	pop	r28
    37d2:	1f 91       	pop	r17
    37d4:	0f 91       	pop	r16
    37d6:	ff 90       	pop	r15
    37d8:	ef 90       	pop	r14
    37da:	df 90       	pop	r13
    37dc:	cf 90       	pop	r12
    37de:	bf 90       	pop	r11
    37e0:	af 90       	pop	r10
    37e2:	9f 90       	pop	r9
    37e4:	8f 90       	pop	r8
    37e6:	7f 90       	pop	r7
    37e8:	6f 90       	pop	r6
    37ea:	08 95       	ret
    37ec:	46 15       	cp	r20, r6
    37ee:	57 05       	cpc	r21, r7
    37f0:	91 f4       	brne	.+36     	; 0x3816 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    37f2:	26 17       	cp	r18, r22
    37f4:	37 07       	cpc	r19, r23
    37f6:	24 f0       	brlt	.+8      	; 0x3800 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    37f8:	89 2d       	mov	r24, r9
    37fa:	4b 01       	movw	r8, r22
    37fc:	c2 2f       	mov	r28, r18
    37fe:	d8 2f       	mov	r29, r24
    3800:	9e 01       	movw	r18, r28
    3802:	28 19       	sub	r18, r8
    3804:	39 09       	sbc	r19, r9
    3806:	2f 5f       	subi	r18, 0xFF	; 255
    3808:	3f 4f       	sbci	r19, 0xFF	; 255
    380a:	06 8c       	ldd	r0, Z+30	; 0x1e
    380c:	f7 8d       	ldd	r31, Z+31	; 0x1f
    380e:	e0 2d       	mov	r30, r0
    3810:	a6 01       	movw	r20, r12
    3812:	b4 01       	movw	r22, r8
    3814:	da cf       	rjmp	.-76     	; 0x37ca <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    3816:	02 84       	ldd	r0, Z+10	; 0x0a
    3818:	f3 85       	ldd	r31, Z+11	; 0x0b
    381a:	e0 2d       	mov	r30, r0
    381c:	09 95       	icall
    381e:	d5 01       	movw	r26, r10
    3820:	ed 91       	ld	r30, X+
    3822:	fc 91       	ld	r31, X
    3824:	04 88       	ldd	r0, Z+20	; 0x14
    3826:	f5 89       	ldd	r31, Z+21	; 0x15
    3828:	e0 2d       	mov	r30, r0
    382a:	83 01       	movw	r16, r6
    382c:	94 01       	movw	r18, r8
    382e:	a6 01       	movw	r20, r12
    3830:	be 01       	movw	r22, r28
    3832:	c5 01       	movw	r24, r10
    3834:	09 95       	icall
    3836:	d5 01       	movw	r26, r10
    3838:	ed 91       	ld	r30, X+
    383a:	fc 91       	ld	r31, X
    383c:	06 88       	ldd	r0, Z+22	; 0x16
    383e:	f7 89       	ldd	r31, Z+23	; 0x17
    3840:	e0 2d       	mov	r30, r0
    3842:	c5 01       	movw	r24, r10
    3844:	df 91       	pop	r29
    3846:	cf 91       	pop	r28
    3848:	1f 91       	pop	r17
    384a:	0f 91       	pop	r16
    384c:	ff 90       	pop	r15
    384e:	ef 90       	pop	r14
    3850:	df 90       	pop	r13
    3852:	cf 90       	pop	r12
    3854:	bf 90       	pop	r11
    3856:	af 90       	pop	r10
    3858:	9f 90       	pop	r9
    385a:	8f 90       	pop	r8
    385c:	7f 90       	pop	r7
    385e:	6f 90       	pop	r6
    3860:	09 94       	ijmp

00003862 <Adafruit_GFX::setRotation(unsigned char)>:
    3862:	fc 01       	movw	r30, r24
    3864:	63 70       	andi	r22, 0x03	; 3
    3866:	65 8b       	std	Z+21, r22	; 0x15
    3868:	83 81       	ldd	r24, Z+3	; 0x03
    386a:	94 81       	ldd	r25, Z+4	; 0x04
    386c:	25 81       	ldd	r18, Z+5	; 0x05
    386e:	36 81       	ldd	r19, Z+6	; 0x06
    3870:	61 30       	cpi	r22, 0x01	; 1
    3872:	39 f0       	breq	.+14     	; 0x3882 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    3874:	63 30       	cpi	r22, 0x03	; 3
    3876:	29 f0       	breq	.+10     	; 0x3882 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    3878:	90 87       	std	Z+8, r25	; 0x08
    387a:	87 83       	std	Z+7, r24	; 0x07
    387c:	32 87       	std	Z+10, r19	; 0x0a
    387e:	21 87       	std	Z+9, r18	; 0x09
    3880:	08 95       	ret
    3882:	30 87       	std	Z+8, r19	; 0x08
    3884:	27 83       	std	Z+7, r18	; 0x07
    3886:	92 87       	std	Z+10, r25	; 0x0a
    3888:	81 87       	std	Z+9, r24	; 0x09
    388a:	08 95       	ret

0000388c <Adafruit_GFX::Adafruit_GFX(int, int)>:
    388c:	fc 01       	movw	r30, r24
    388e:	12 82       	std	Z+2, r1	; 0x02
    3890:	8d eb       	ldi	r24, 0xBD	; 189
    3892:	96 e0       	ldi	r25, 0x06	; 6
    3894:	91 83       	std	Z+1, r25	; 0x01
    3896:	80 83       	st	Z, r24
    3898:	74 83       	std	Z+4, r23	; 0x04
    389a:	63 83       	std	Z+3, r22	; 0x03
    389c:	56 83       	std	Z+6, r21	; 0x06
    389e:	45 83       	std	Z+5, r20	; 0x05
    38a0:	70 87       	std	Z+8, r23	; 0x08
    38a2:	67 83       	std	Z+7, r22	; 0x07
    38a4:	52 87       	std	Z+10, r21	; 0x0a
    38a6:	41 87       	std	Z+9, r20	; 0x09
    38a8:	15 8a       	std	Z+21, r1	; 0x15
    38aa:	14 86       	std	Z+12, r1	; 0x0c
    38ac:	13 86       	std	Z+11, r1	; 0x0b
    38ae:	16 86       	std	Z+14, r1	; 0x0e
    38b0:	15 86       	std	Z+13, r1	; 0x0d
    38b2:	81 e0       	ldi	r24, 0x01	; 1
    38b4:	84 8b       	std	Z+20, r24	; 0x14
    38b6:	83 8b       	std	Z+19, r24	; 0x13
    38b8:	2f ef       	ldi	r18, 0xFF	; 255
    38ba:	3f ef       	ldi	r19, 0xFF	; 255
    38bc:	32 8b       	std	Z+18, r19	; 0x12
    38be:	21 8b       	std	Z+17, r18	; 0x11
    38c0:	30 8b       	std	Z+16, r19	; 0x10
    38c2:	27 87       	std	Z+15, r18	; 0x0f
    38c4:	86 8b       	std	Z+22, r24	; 0x16
    38c6:	17 8a       	std	Z+23, r1	; 0x17
    38c8:	11 8e       	std	Z+25, r1	; 0x19
    38ca:	10 8e       	std	Z+24, r1	; 0x18
    38cc:	08 95       	ret

000038ce <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    38ce:	2f 92       	push	r2
    38d0:	3f 92       	push	r3
    38d2:	4f 92       	push	r4
    38d4:	5f 92       	push	r5
    38d6:	6f 92       	push	r6
    38d8:	7f 92       	push	r7
    38da:	8f 92       	push	r8
    38dc:	9f 92       	push	r9
    38de:	af 92       	push	r10
    38e0:	bf 92       	push	r11
    38e2:	cf 92       	push	r12
    38e4:	df 92       	push	r13
    38e6:	ef 92       	push	r14
    38e8:	ff 92       	push	r15
    38ea:	0f 93       	push	r16
    38ec:	1f 93       	push	r17
    38ee:	cf 93       	push	r28
    38f0:	df 93       	push	r29
    38f2:	cd b7       	in	r28, 0x3d	; 61
    38f4:	de b7       	in	r29, 0x3e	; 62
    38f6:	2e 97       	sbiw	r28, 0x0e	; 14
    38f8:	0f b6       	in	r0, 0x3f	; 63
    38fa:	f8 94       	cli
    38fc:	de bf       	out	0x3e, r29	; 62
    38fe:	0f be       	out	0x3f, r0	; 63
    3900:	cd bf       	out	0x3d, r28	; 61
    3902:	5c 01       	movw	r10, r24
    3904:	2b 01       	movw	r4, r22
    3906:	5c 83       	std	Y+4, r21	; 0x04
    3908:	4b 83       	std	Y+3, r20	; 0x03
    390a:	3e 87       	std	Y+14, r19	; 0x0e
    390c:	2d 87       	std	Y+13, r18	; 0x0d
    390e:	fe 82       	std	Y+6, r15	; 0x06
    3910:	ed 82       	std	Y+5, r14	; 0x05
    3912:	16 01       	movw	r2, r12
    3914:	81 e0       	ldi	r24, 0x01	; 1
    3916:	90 e0       	ldi	r25, 0x00	; 0
    3918:	4c 01       	movw	r8, r24
    391a:	82 1a       	sub	r8, r18
    391c:	93 0a       	sbc	r9, r19
    391e:	c9 01       	movw	r24, r18
    3920:	91 95       	neg	r25
    3922:	81 95       	neg	r24
    3924:	91 09       	sbc	r25, r1
    3926:	9c 01       	movw	r18, r24
    3928:	22 0f       	add	r18, r18
    392a:	33 1f       	adc	r19, r19
    392c:	3a 83       	std	Y+2, r19	; 0x02
    392e:	29 83       	std	Y+1, r18	; 0x01
    3930:	c7 01       	movw	r24, r14
    3932:	01 96       	adiw	r24, 0x01	; 1
    3934:	98 87       	std	Y+8, r25	; 0x08
    3936:	8f 83       	std	Y+7, r24	; 0x07
    3938:	f1 2c       	mov	r15, r1
    393a:	e1 2c       	mov	r14, r1
    393c:	66 24       	eor	r6, r6
    393e:	63 94       	inc	r6
    3940:	71 2c       	mov	r7, r1
    3942:	90 2f       	mov	r25, r16
    3944:	91 70       	andi	r25, 0x01	; 1
    3946:	99 87       	std	Y+9, r25	; 0x09
    3948:	02 70       	andi	r16, 0x02	; 2
    394a:	0a 87       	std	Y+10, r16	; 0x0a
    394c:	da 01       	movw	r26, r20
    394e:	11 96       	adiw	r26, 0x01	; 1
    3950:	bc 87       	std	Y+12, r27	; 0x0c
    3952:	ab 87       	std	Y+11, r26	; 0x0b
    3954:	2d 85       	ldd	r18, Y+13	; 0x0d
    3956:	3e 85       	ldd	r19, Y+14	; 0x0e
    3958:	e2 16       	cp	r14, r18
    395a:	f3 06       	cpc	r15, r19
    395c:	0c f0       	brlt	.+2      	; 0x3960 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    395e:	8d c0       	rjmp	.+282    	; 0x3a7a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    3960:	cd 84       	ldd	r12, Y+13	; 0x0d
    3962:	de 84       	ldd	r13, Y+14	; 0x0e
    3964:	97 fc       	sbrc	r9, 7
    3966:	0b c0       	rjmp	.+22     	; 0x397e <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    3968:	69 01       	movw	r12, r18
    396a:	31 e0       	ldi	r19, 0x01	; 1
    396c:	c3 1a       	sub	r12, r19
    396e:	d1 08       	sbc	r13, r1
    3970:	89 81       	ldd	r24, Y+1	; 0x01
    3972:	9a 81       	ldd	r25, Y+2	; 0x02
    3974:	02 96       	adiw	r24, 0x02	; 2
    3976:	9a 83       	std	Y+2, r25	; 0x02
    3978:	89 83       	std	Y+1, r24	; 0x01
    397a:	88 0e       	add	r8, r24
    397c:	99 1e       	adc	r9, r25
    397e:	9f ef       	ldi	r25, 0xFF	; 255
    3980:	e9 1a       	sub	r14, r25
    3982:	f9 0a       	sbc	r15, r25
    3984:	a2 e0       	ldi	r26, 0x02	; 2
    3986:	6a 0e       	add	r6, r26
    3988:	71 1c       	adc	r7, r1
    398a:	86 0c       	add	r8, r6
    398c:	97 1c       	adc	r9, r7
    398e:	ce 14       	cp	r12, r14
    3990:	df 04       	cpc	r13, r15
    3992:	a4 f1       	brlt	.+104    	; 0x39fc <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    3994:	b9 85       	ldd	r27, Y+9	; 0x09
    3996:	bb 23       	and	r27, r27
    3998:	b9 f0       	breq	.+46     	; 0x39c8 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    399a:	96 01       	movw	r18, r12
    399c:	22 0f       	add	r18, r18
    399e:	33 1f       	adc	r19, r19
    39a0:	8f 81       	ldd	r24, Y+7	; 0x07
    39a2:	98 85       	ldd	r25, Y+8	; 0x08
    39a4:	28 0f       	add	r18, r24
    39a6:	39 1f       	adc	r19, r25
    39a8:	d5 01       	movw	r26, r10
    39aa:	ed 91       	ld	r30, X+
    39ac:	fc 91       	ld	r31, X
    39ae:	00 88       	ldd	r0, Z+16	; 0x10
    39b0:	f1 89       	ldd	r31, Z+17	; 0x11
    39b2:	e0 2d       	mov	r30, r0
    39b4:	81 01       	movw	r16, r2
    39b6:	4b 81       	ldd	r20, Y+3	; 0x03
    39b8:	5c 81       	ldd	r21, Y+4	; 0x04
    39ba:	4c 19       	sub	r20, r12
    39bc:	5d 09       	sbc	r21, r13
    39be:	b2 01       	movw	r22, r4
    39c0:	6e 0d       	add	r22, r14
    39c2:	7f 1d       	adc	r23, r15
    39c4:	c5 01       	movw	r24, r10
    39c6:	09 95       	icall
    39c8:	ba 85       	ldd	r27, Y+10	; 0x0a
    39ca:	bb 23       	and	r27, r27
    39cc:	b9 f0       	breq	.+46     	; 0x39fc <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    39ce:	96 01       	movw	r18, r12
    39d0:	22 0f       	add	r18, r18
    39d2:	33 1f       	adc	r19, r19
    39d4:	8f 81       	ldd	r24, Y+7	; 0x07
    39d6:	98 85       	ldd	r25, Y+8	; 0x08
    39d8:	28 0f       	add	r18, r24
    39da:	39 1f       	adc	r19, r25
    39dc:	d5 01       	movw	r26, r10
    39de:	ed 91       	ld	r30, X+
    39e0:	fc 91       	ld	r31, X
    39e2:	00 88       	ldd	r0, Z+16	; 0x10
    39e4:	f1 89       	ldd	r31, Z+17	; 0x11
    39e6:	e0 2d       	mov	r30, r0
    39e8:	81 01       	movw	r16, r2
    39ea:	4b 81       	ldd	r20, Y+3	; 0x03
    39ec:	5c 81       	ldd	r21, Y+4	; 0x04
    39ee:	4c 19       	sub	r20, r12
    39f0:	5d 09       	sbc	r21, r13
    39f2:	b2 01       	movw	r22, r4
    39f4:	6e 19       	sub	r22, r14
    39f6:	7f 09       	sbc	r23, r15
    39f8:	c5 01       	movw	r24, r10
    39fa:	09 95       	icall
    39fc:	2d 85       	ldd	r18, Y+13	; 0x0d
    39fe:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a00:	2c 15       	cp	r18, r12
    3a02:	3d 05       	cpc	r19, r13
    3a04:	b9 f1       	breq	.+110    	; 0x3a74 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    3a06:	39 85       	ldd	r19, Y+9	; 0x09
    3a08:	33 23       	and	r19, r19
    3a0a:	c1 f0       	breq	.+48     	; 0x3a3c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    3a0c:	93 01       	movw	r18, r6
    3a0e:	22 50       	subi	r18, 0x02	; 2
    3a10:	31 09       	sbc	r19, r1
    3a12:	8d 81       	ldd	r24, Y+5	; 0x05
    3a14:	9e 81       	ldd	r25, Y+6	; 0x06
    3a16:	28 0f       	add	r18, r24
    3a18:	39 1f       	adc	r19, r25
    3a1a:	d5 01       	movw	r26, r10
    3a1c:	ed 91       	ld	r30, X+
    3a1e:	fc 91       	ld	r31, X
    3a20:	00 88       	ldd	r0, Z+16	; 0x10
    3a22:	f1 89       	ldd	r31, Z+17	; 0x11
    3a24:	e0 2d       	mov	r30, r0
    3a26:	81 01       	movw	r16, r2
    3a28:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a2a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a2c:	4e 19       	sub	r20, r14
    3a2e:	5f 09       	sbc	r21, r15
    3a30:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a32:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a34:	64 0d       	add	r22, r4
    3a36:	75 1d       	adc	r23, r5
    3a38:	c5 01       	movw	r24, r10
    3a3a:	09 95       	icall
    3a3c:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a3e:	bb 23       	and	r27, r27
    3a40:	c9 f0       	breq	.+50     	; 0x3a74 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    3a42:	93 01       	movw	r18, r6
    3a44:	22 50       	subi	r18, 0x02	; 2
    3a46:	31 09       	sbc	r19, r1
    3a48:	8d 81       	ldd	r24, Y+5	; 0x05
    3a4a:	9e 81       	ldd	r25, Y+6	; 0x06
    3a4c:	28 0f       	add	r18, r24
    3a4e:	39 1f       	adc	r19, r25
    3a50:	b2 01       	movw	r22, r4
    3a52:	ad 85       	ldd	r26, Y+13	; 0x0d
    3a54:	be 85       	ldd	r27, Y+14	; 0x0e
    3a56:	6a 1b       	sub	r22, r26
    3a58:	7b 0b       	sbc	r23, r27
    3a5a:	d5 01       	movw	r26, r10
    3a5c:	ed 91       	ld	r30, X+
    3a5e:	fc 91       	ld	r31, X
    3a60:	00 88       	ldd	r0, Z+16	; 0x10
    3a62:	f1 89       	ldd	r31, Z+17	; 0x11
    3a64:	e0 2d       	mov	r30, r0
    3a66:	81 01       	movw	r16, r2
    3a68:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a6a:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a6c:	4e 19       	sub	r20, r14
    3a6e:	5f 09       	sbc	r21, r15
    3a70:	c5 01       	movw	r24, r10
    3a72:	09 95       	icall
    3a74:	de 86       	std	Y+14, r13	; 0x0e
    3a76:	cd 86       	std	Y+13, r12	; 0x0d
    3a78:	6d cf       	rjmp	.-294    	; 0x3954 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    3a7a:	2e 96       	adiw	r28, 0x0e	; 14
    3a7c:	0f b6       	in	r0, 0x3f	; 63
    3a7e:	f8 94       	cli
    3a80:	de bf       	out	0x3e, r29	; 62
    3a82:	0f be       	out	0x3f, r0	; 63
    3a84:	cd bf       	out	0x3d, r28	; 61
    3a86:	df 91       	pop	r29
    3a88:	cf 91       	pop	r28
    3a8a:	1f 91       	pop	r17
    3a8c:	0f 91       	pop	r16
    3a8e:	ff 90       	pop	r15
    3a90:	ef 90       	pop	r14
    3a92:	df 90       	pop	r13
    3a94:	cf 90       	pop	r12
    3a96:	bf 90       	pop	r11
    3a98:	af 90       	pop	r10
    3a9a:	9f 90       	pop	r9
    3a9c:	8f 90       	pop	r8
    3a9e:	7f 90       	pop	r7
    3aa0:	6f 90       	pop	r6
    3aa2:	5f 90       	pop	r5
    3aa4:	4f 90       	pop	r4
    3aa6:	3f 90       	pop	r3
    3aa8:	2f 90       	pop	r2
    3aaa:	08 95       	ret

00003aac <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    3aac:	6f 92       	push	r6
    3aae:	7f 92       	push	r7
    3ab0:	8f 92       	push	r8
    3ab2:	9f 92       	push	r9
    3ab4:	af 92       	push	r10
    3ab6:	bf 92       	push	r11
    3ab8:	cf 92       	push	r12
    3aba:	df 92       	push	r13
    3abc:	ef 92       	push	r14
    3abe:	ff 92       	push	r15
    3ac0:	0f 93       	push	r16
    3ac2:	1f 93       	push	r17
    3ac4:	cf 93       	push	r28
    3ac6:	df 93       	push	r29
    3ac8:	ec 01       	movw	r28, r24
    3aca:	4b 01       	movw	r8, r22
    3acc:	3a 01       	movw	r6, r20
    3ace:	59 01       	movw	r10, r18
    3ad0:	68 01       	movw	r12, r16
    3ad2:	e8 81       	ld	r30, Y
    3ad4:	f9 81       	ldd	r31, Y+1	; 0x01
    3ad6:	02 84       	ldd	r0, Z+10	; 0x0a
    3ad8:	f3 85       	ldd	r31, Z+11	; 0x0b
    3ada:	e0 2d       	mov	r30, r0
    3adc:	09 95       	icall
    3ade:	95 01       	movw	r18, r10
    3ae0:	22 0f       	add	r18, r18
    3ae2:	33 1f       	adc	r19, r19
    3ae4:	2f 5f       	subi	r18, 0xFF	; 255
    3ae6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ae8:	a3 01       	movw	r20, r6
    3aea:	4a 19       	sub	r20, r10
    3aec:	5b 09       	sbc	r21, r11
    3aee:	e8 81       	ld	r30, Y
    3af0:	f9 81       	ldd	r31, Y+1	; 0x01
    3af2:	00 88       	ldd	r0, Z+16	; 0x10
    3af4:	f1 89       	ldd	r31, Z+17	; 0x11
    3af6:	e0 2d       	mov	r30, r0
    3af8:	b4 01       	movw	r22, r8
    3afa:	ce 01       	movw	r24, r28
    3afc:	09 95       	icall
    3afe:	f1 2c       	mov	r15, r1
    3b00:	e1 2c       	mov	r14, r1
    3b02:	03 e0       	ldi	r16, 0x03	; 3
    3b04:	95 01       	movw	r18, r10
    3b06:	a3 01       	movw	r20, r6
    3b08:	b4 01       	movw	r22, r8
    3b0a:	ce 01       	movw	r24, r28
    3b0c:	e0 de       	rcall	.-576    	; 0x38ce <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    3b0e:	e8 81       	ld	r30, Y
    3b10:	f9 81       	ldd	r31, Y+1	; 0x01
    3b12:	06 88       	ldd	r0, Z+22	; 0x16
    3b14:	f7 89       	ldd	r31, Z+23	; 0x17
    3b16:	e0 2d       	mov	r30, r0
    3b18:	ce 01       	movw	r24, r28
    3b1a:	df 91       	pop	r29
    3b1c:	cf 91       	pop	r28
    3b1e:	1f 91       	pop	r17
    3b20:	0f 91       	pop	r16
    3b22:	ff 90       	pop	r15
    3b24:	ef 90       	pop	r14
    3b26:	df 90       	pop	r13
    3b28:	cf 90       	pop	r12
    3b2a:	bf 90       	pop	r11
    3b2c:	af 90       	pop	r10
    3b2e:	9f 90       	pop	r9
    3b30:	8f 90       	pop	r8
    3b32:	7f 90       	pop	r7
    3b34:	6f 90       	pop	r6
    3b36:	09 94       	ijmp

00003b38 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    3b38:	2f 92       	push	r2
    3b3a:	3f 92       	push	r3
    3b3c:	4f 92       	push	r4
    3b3e:	5f 92       	push	r5
    3b40:	6f 92       	push	r6
    3b42:	7f 92       	push	r7
    3b44:	8f 92       	push	r8
    3b46:	9f 92       	push	r9
    3b48:	af 92       	push	r10
    3b4a:	bf 92       	push	r11
    3b4c:	cf 92       	push	r12
    3b4e:	df 92       	push	r13
    3b50:	ef 92       	push	r14
    3b52:	ff 92       	push	r15
    3b54:	0f 93       	push	r16
    3b56:	1f 93       	push	r17
    3b58:	cf 93       	push	r28
    3b5a:	df 93       	push	r29
    3b5c:	cd b7       	in	r28, 0x3d	; 61
    3b5e:	de b7       	in	r29, 0x3e	; 62
    3b60:	6a 97       	sbiw	r28, 0x1a	; 26
    3b62:	0f b6       	in	r0, 0x3f	; 63
    3b64:	f8 94       	cli
    3b66:	de bf       	out	0x3e, r29	; 62
    3b68:	0f be       	out	0x3f, r0	; 63
    3b6a:	cd bf       	out	0x3d, r28	; 61
    3b6c:	9a 8f       	std	Y+26, r25	; 0x1a
    3b6e:	89 8f       	std	Y+25, r24	; 0x19
    3b70:	7a 83       	std	Y+2, r23	; 0x02
    3b72:	69 83       	std	Y+1, r22	; 0x01
    3b74:	4a 01       	movw	r8, r20
    3b76:	d2 2e       	mov	r13, r18
    3b78:	18 87       	std	Y+8, r17	; 0x08
    3b7a:	0f 83       	std	Y+7, r16	; 0x07
    3b7c:	37 01       	movw	r6, r14
    3b7e:	bc 2c       	mov	r11, r12
    3b80:	dc 01       	movw	r26, r24
    3b82:	58 96       	adiw	r26, 0x18	; 24
    3b84:	2d 91       	ld	r18, X+
    3b86:	3c 91       	ld	r19, X
    3b88:	59 97       	sbiw	r26, 0x19	; 25
    3b8a:	21 15       	cp	r18, r1
    3b8c:	31 05       	cpc	r19, r1
    3b8e:	09 f0       	breq	.+2      	; 0x3b92 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    3b90:	15 c1       	rjmp	.+554    	; 0x3dbc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    3b92:	17 96       	adiw	r26, 0x07	; 7
    3b94:	8d 91       	ld	r24, X+
    3b96:	9c 91       	ld	r25, X
    3b98:	18 97       	sbiw	r26, 0x08	; 8
    3b9a:	68 17       	cp	r22, r24
    3b9c:	79 07       	cpc	r23, r25
    3b9e:	0c f0       	brlt	.+2      	; 0x3ba2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    3ba0:	d7 c1       	rjmp	.+942    	; 0x3f50 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3ba2:	19 96       	adiw	r26, 0x09	; 9
    3ba4:	8d 91       	ld	r24, X+
    3ba6:	9c 91       	ld	r25, X
    3ba8:	48 17       	cp	r20, r24
    3baa:	59 07       	cpc	r21, r25
    3bac:	0c f0       	brlt	.+2      	; 0x3bb0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    3bae:	d0 c1       	rjmp	.+928    	; 0x3f50 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3bb0:	4c 2c       	mov	r4, r12
    3bb2:	51 2c       	mov	r5, r1
    3bb4:	b6 e0       	ldi	r27, 0x06	; 6
    3bb6:	cb 9e       	mul	r12, r27
    3bb8:	60 0d       	add	r22, r0
    3bba:	71 1d       	adc	r23, r1
    3bbc:	11 24       	eor	r1, r1
    3bbe:	7c 87       	std	Y+12, r23	; 0x0c
    3bc0:	6b 87       	std	Y+11, r22	; 0x0b
    3bc2:	16 16       	cp	r1, r22
    3bc4:	17 06       	cpc	r1, r23
    3bc6:	0c f0       	brlt	.+2      	; 0x3bca <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    3bc8:	c3 c1       	rjmp	.+902    	; 0x3f50 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3bca:	ea 2d       	mov	r30, r10
    3bcc:	f0 e0       	ldi	r31, 0x00	; 0
    3bce:	fa 87       	std	Y+10, r31	; 0x0a
    3bd0:	e9 87       	std	Y+9, r30	; 0x09
    3bd2:	93 e0       	ldi	r25, 0x03	; 3
    3bd4:	ee 0f       	add	r30, r30
    3bd6:	ff 1f       	adc	r31, r31
    3bd8:	9a 95       	dec	r25
    3bda:	e1 f7       	brne	.-8      	; 0x3bd4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    3bdc:	f8 8b       	std	Y+16, r31	; 0x10
    3bde:	ef 87       	std	Y+15, r30	; 0x0f
    3be0:	cf 01       	movw	r24, r30
    3be2:	84 0f       	add	r24, r20
    3be4:	95 1f       	adc	r25, r21
    3be6:	18 16       	cp	r1, r24
    3be8:	19 06       	cpc	r1, r25
    3bea:	0c f0       	brlt	.+2      	; 0x3bee <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    3bec:	b1 c1       	rjmp	.+866    	; 0x3f50 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3bee:	a9 8d       	ldd	r26, Y+25	; 0x19
    3bf0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3bf2:	57 96       	adiw	r26, 0x17	; 23
    3bf4:	8c 91       	ld	r24, X
    3bf6:	81 11       	cpse	r24, r1
    3bf8:	04 c0       	rjmp	.+8      	; 0x3c02 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    3bfa:	bf ea       	ldi	r27, 0xAF	; 175
    3bfc:	bd 15       	cp	r27, r13
    3bfe:	08 f4       	brcc	.+2      	; 0x3c02 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    3c00:	d3 94       	inc	r13
    3c02:	a9 8d       	ldd	r26, Y+25	; 0x19
    3c04:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3c06:	ed 91       	ld	r30, X+
    3c08:	fc 91       	ld	r31, X
    3c0a:	11 97       	sbiw	r26, 0x01	; 1
    3c0c:	02 84       	ldd	r0, Z+10	; 0x0a
    3c0e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3c10:	e0 2d       	mov	r30, r0
    3c12:	cd 01       	movw	r24, r26
    3c14:	09 95       	icall
    3c16:	b5 e0       	ldi	r27, 0x05	; 5
    3c18:	db 9e       	mul	r13, r27
    3c1a:	c0 01       	movw	r24, r0
    3c1c:	11 24       	eor	r1, r1
    3c1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3c20:	fa 81       	ldd	r31, Y+2	; 0x02
    3c22:	fc 83       	std	Y+4, r31	; 0x04
    3c24:	eb 83       	std	Y+3, r30	; 0x03
    3c26:	31 2c       	mov	r3, r1
    3c28:	21 2c       	mov	r2, r1
    3c2a:	9c 01       	movw	r18, r24
    3c2c:	28 56       	subi	r18, 0x68	; 104
    3c2e:	3f 4f       	sbci	r19, 0xFF	; 255
    3c30:	38 8f       	std	Y+24, r19	; 0x18
    3c32:	2f 8b       	std	Y+23, r18	; 0x17
    3c34:	4a 2d       	mov	r20, r10
    3c36:	50 e0       	ldi	r21, 0x00	; 0
    3c38:	5e 8b       	std	Y+22, r21	; 0x16
    3c3a:	4d 8b       	std	Y+21, r20	; 0x15
    3c3c:	ef 89       	ldd	r30, Y+23	; 0x17
    3c3e:	f8 8d       	ldd	r31, Y+24	; 0x18
    3c40:	e2 0d       	add	r30, r2
    3c42:	f3 1d       	adc	r31, r3
    3c44:	44 91       	lpm	r20, Z
    3c46:	9e 82       	std	Y+6, r9	; 0x06
    3c48:	8d 82       	std	Y+5, r8	; 0x05
    3c4a:	d1 2c       	mov	r13, r1
    3c4c:	c1 2c       	mov	r12, r1
    3c4e:	69 81       	ldd	r22, Y+1	; 0x01
    3c50:	7a 81       	ldd	r23, Y+2	; 0x02
    3c52:	62 0d       	add	r22, r2
    3c54:	73 1d       	adc	r23, r3
    3c56:	7a 8b       	std	Y+18, r23	; 0x12
    3c58:	69 8b       	std	Y+17, r22	; 0x11
    3c5a:	84 2f       	mov	r24, r20
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
    3c5e:	9c 8b       	std	Y+20, r25	; 0x14
    3c60:	8b 8b       	std	Y+19, r24	; 0x13
    3c62:	e9 8d       	ldd	r30, Y+25	; 0x19
    3c64:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3c66:	a0 81       	ld	r26, Z
    3c68:	b1 81       	ldd	r27, Z+1	; 0x01
    3c6a:	40 ff       	sbrs	r20, 0
    3c6c:	82 c0       	rjmp	.+260    	; 0x3d72 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    3c6e:	f1 e0       	ldi	r31, 0x01	; 1
    3c70:	bf 12       	cpse	r11, r31
    3c72:	6f c0       	rjmp	.+222    	; 0x3d52 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    3c74:	af 12       	cpse	r10, r31
    3c76:	6d c0       	rjmp	.+218    	; 0x3d52 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    3c78:	1c 96       	adiw	r26, 0x0c	; 12
    3c7a:	ed 91       	ld	r30, X+
    3c7c:	fc 91       	ld	r31, X
    3c7e:	2f 81       	ldd	r18, Y+7	; 0x07
    3c80:	38 85       	ldd	r19, Y+8	; 0x08
    3c82:	a4 01       	movw	r20, r8
    3c84:	4c 0d       	add	r20, r12
    3c86:	5d 1d       	adc	r21, r13
    3c88:	69 89       	ldd	r22, Y+17	; 0x11
    3c8a:	7a 89       	ldd	r23, Y+18	; 0x12
    3c8c:	89 8d       	ldd	r24, Y+25	; 0x19
    3c8e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3c90:	09 95       	icall
    3c92:	eb 89       	ldd	r30, Y+19	; 0x13
    3c94:	fc 89       	ldd	r31, Y+20	; 0x14
    3c96:	f5 95       	asr	r31
    3c98:	e7 95       	ror	r30
    3c9a:	4e 2f       	mov	r20, r30
    3c9c:	5f ef       	ldi	r21, 0xFF	; 255
    3c9e:	c5 1a       	sub	r12, r21
    3ca0:	d5 0a       	sbc	r13, r21
    3ca2:	6d 81       	ldd	r22, Y+5	; 0x05
    3ca4:	7e 81       	ldd	r23, Y+6	; 0x06
    3ca6:	8d 89       	ldd	r24, Y+21	; 0x15
    3ca8:	9e 89       	ldd	r25, Y+22	; 0x16
    3caa:	68 0f       	add	r22, r24
    3cac:	79 1f       	adc	r23, r25
    3cae:	7e 83       	std	Y+6, r23	; 0x06
    3cb0:	6d 83       	std	Y+5, r22	; 0x05
    3cb2:	98 e0       	ldi	r25, 0x08	; 8
    3cb4:	c9 16       	cp	r12, r25
    3cb6:	d1 04       	cpc	r13, r1
    3cb8:	81 f6       	brne	.-96     	; 0x3c5a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    3cba:	af ef       	ldi	r26, 0xFF	; 255
    3cbc:	2a 1a       	sub	r2, r26
    3cbe:	3a 0a       	sbc	r3, r26
    3cc0:	eb 81       	ldd	r30, Y+3	; 0x03
    3cc2:	fc 81       	ldd	r31, Y+4	; 0x04
    3cc4:	e4 0d       	add	r30, r4
    3cc6:	f5 1d       	adc	r31, r5
    3cc8:	fc 83       	std	Y+4, r31	; 0x04
    3cca:	eb 83       	std	Y+3, r30	; 0x03
    3ccc:	f5 e0       	ldi	r31, 0x05	; 5
    3cce:	2f 16       	cp	r2, r31
    3cd0:	31 04       	cpc	r3, r1
    3cd2:	09 f0       	breq	.+2      	; 0x3cd6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    3cd4:	b3 cf       	rjmp	.-154    	; 0x3c3c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    3cd6:	2f 81       	ldd	r18, Y+7	; 0x07
    3cd8:	38 85       	ldd	r19, Y+8	; 0x08
    3cda:	26 15       	cp	r18, r6
    3cdc:	37 05       	cpc	r19, r7
    3cde:	b9 f0       	breq	.+46     	; 0x3d0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    3ce0:	a9 8d       	ldd	r26, Y+25	; 0x19
    3ce2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3ce4:	ed 91       	ld	r30, X+
    3ce6:	fc 91       	ld	r31, X
    3ce8:	b1 e0       	ldi	r27, 0x01	; 1
    3cea:	bb 12       	cpse	r11, r27
    3cec:	57 c0       	rjmp	.+174    	; 0x3d9c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    3cee:	ab 12       	cpse	r10, r27
    3cf0:	55 c0       	rjmp	.+170    	; 0x3d9c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    3cf2:	69 81       	ldd	r22, Y+1	; 0x01
    3cf4:	7a 81       	ldd	r23, Y+2	; 0x02
    3cf6:	6b 5f       	subi	r22, 0xFB	; 251
    3cf8:	7f 4f       	sbci	r23, 0xFF	; 255
    3cfa:	00 88       	ldd	r0, Z+16	; 0x10
    3cfc:	f1 89       	ldd	r31, Z+17	; 0x11
    3cfe:	e0 2d       	mov	r30, r0
    3d00:	83 01       	movw	r16, r6
    3d02:	28 e0       	ldi	r18, 0x08	; 8
    3d04:	30 e0       	ldi	r19, 0x00	; 0
    3d06:	a4 01       	movw	r20, r8
    3d08:	89 8d       	ldd	r24, Y+25	; 0x19
    3d0a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d0c:	09 95       	icall
    3d0e:	a9 8d       	ldd	r26, Y+25	; 0x19
    3d10:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3d12:	ed 91       	ld	r30, X+
    3d14:	fc 91       	ld	r31, X
    3d16:	11 97       	sbiw	r26, 0x01	; 1
    3d18:	06 88       	ldd	r0, Z+22	; 0x16
    3d1a:	f7 89       	ldd	r31, Z+23	; 0x17
    3d1c:	e0 2d       	mov	r30, r0
    3d1e:	cd 01       	movw	r24, r26
    3d20:	6a 96       	adiw	r28, 0x1a	; 26
    3d22:	0f b6       	in	r0, 0x3f	; 63
    3d24:	f8 94       	cli
    3d26:	de bf       	out	0x3e, r29	; 62
    3d28:	0f be       	out	0x3f, r0	; 63
    3d2a:	cd bf       	out	0x3d, r28	; 61
    3d2c:	df 91       	pop	r29
    3d2e:	cf 91       	pop	r28
    3d30:	1f 91       	pop	r17
    3d32:	0f 91       	pop	r16
    3d34:	ff 90       	pop	r15
    3d36:	ef 90       	pop	r14
    3d38:	df 90       	pop	r13
    3d3a:	cf 90       	pop	r12
    3d3c:	bf 90       	pop	r11
    3d3e:	af 90       	pop	r10
    3d40:	9f 90       	pop	r9
    3d42:	8f 90       	pop	r8
    3d44:	7f 90       	pop	r7
    3d46:	6f 90       	pop	r6
    3d48:	5f 90       	pop	r5
    3d4a:	4f 90       	pop	r4
    3d4c:	3f 90       	pop	r3
    3d4e:	2f 90       	pop	r2
    3d50:	09 94       	ijmp
    3d52:	1e 96       	adiw	r26, 0x0e	; 14
    3d54:	ed 91       	ld	r30, X+
    3d56:	fc 91       	ld	r31, X
    3d58:	ef 80       	ldd	r14, Y+7	; 0x07
    3d5a:	f8 84       	ldd	r15, Y+8	; 0x08
    3d5c:	09 85       	ldd	r16, Y+9	; 0x09
    3d5e:	1a 85       	ldd	r17, Y+10	; 0x0a
    3d60:	92 01       	movw	r18, r4
    3d62:	4d 81       	ldd	r20, Y+5	; 0x05
    3d64:	5e 81       	ldd	r21, Y+6	; 0x06
    3d66:	6b 81       	ldd	r22, Y+3	; 0x03
    3d68:	7c 81       	ldd	r23, Y+4	; 0x04
    3d6a:	89 8d       	ldd	r24, Y+25	; 0x19
    3d6c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d6e:	09 95       	icall
    3d70:	90 cf       	rjmp	.-224    	; 0x3c92 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    3d72:	2f 81       	ldd	r18, Y+7	; 0x07
    3d74:	38 85       	ldd	r19, Y+8	; 0x08
    3d76:	26 15       	cp	r18, r6
    3d78:	37 05       	cpc	r19, r7
    3d7a:	09 f4       	brne	.+2      	; 0x3d7e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    3d7c:	8a cf       	rjmp	.-236    	; 0x3c92 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    3d7e:	31 e0       	ldi	r19, 0x01	; 1
    3d80:	b3 12       	cpse	r11, r19
    3d82:	07 c0       	rjmp	.+14     	; 0x3d92 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    3d84:	a3 12       	cpse	r10, r19
    3d86:	05 c0       	rjmp	.+10     	; 0x3d92 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    3d88:	1c 96       	adiw	r26, 0x0c	; 12
    3d8a:	ed 91       	ld	r30, X+
    3d8c:	fc 91       	ld	r31, X
    3d8e:	93 01       	movw	r18, r6
    3d90:	78 cf       	rjmp	.-272    	; 0x3c82 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    3d92:	1e 96       	adiw	r26, 0x0e	; 14
    3d94:	ed 91       	ld	r30, X+
    3d96:	fc 91       	ld	r31, X
    3d98:	73 01       	movw	r14, r6
    3d9a:	e0 cf       	rjmp	.-64     	; 0x3d5c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    3d9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    3d9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3da0:	64 19       	sub	r22, r4
    3da2:	75 09       	sbc	r23, r5
    3da4:	06 84       	ldd	r0, Z+14	; 0x0e
    3da6:	f7 85       	ldd	r31, Z+15	; 0x0f
    3da8:	e0 2d       	mov	r30, r0
    3daa:	73 01       	movw	r14, r6
    3dac:	0f 85       	ldd	r16, Y+15	; 0x0f
    3dae:	18 89       	ldd	r17, Y+16	; 0x10
    3db0:	92 01       	movw	r18, r4
    3db2:	a4 01       	movw	r20, r8
    3db4:	89 8d       	ldd	r24, Y+25	; 0x19
    3db6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3db8:	09 95       	icall
    3dba:	a9 cf       	rjmp	.-174    	; 0x3d0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    3dbc:	f9 01       	movw	r30, r18
    3dbe:	34 96       	adiw	r30, 0x04	; 4
    3dc0:	94 91       	lpm	r25, Z
    3dc2:	32 97       	sbiw	r30, 0x02	; 2
    3dc4:	45 91       	lpm	r20, Z+
    3dc6:	54 91       	lpm	r21, Z
    3dc8:	d9 1a       	sub	r13, r25
    3dca:	b7 e0       	ldi	r27, 0x07	; 7
    3dcc:	db 9e       	mul	r13, r27
    3dce:	40 0d       	add	r20, r0
    3dd0:	51 1d       	adc	r21, r1
    3dd2:	11 24       	eor	r1, r1
    3dd4:	f9 01       	movw	r30, r18
    3dd6:	25 91       	lpm	r18, Z+
    3dd8:	34 91       	lpm	r19, Z
    3dda:	3c 8b       	std	Y+20, r19	; 0x14
    3ddc:	2b 8b       	std	Y+19, r18	; 0x13
    3dde:	fa 01       	movw	r30, r20
    3de0:	25 90       	lpm	r2, Z+
    3de2:	34 90       	lpm	r3, Z
    3de4:	fa 01       	movw	r30, r20
    3de6:	32 96       	adiw	r30, 0x02	; 2
    3de8:	74 90       	lpm	r7, Z
    3dea:	31 96       	adiw	r30, 0x01	; 1
    3dec:	34 91       	lpm	r19, Z
    3dee:	39 8b       	std	Y+17, r19	; 0x11
    3df0:	32 96       	adiw	r30, 0x02	; 2
    3df2:	64 90       	lpm	r6, Z
    3df4:	31 96       	adiw	r30, 0x01	; 1
    3df6:	44 90       	lpm	r4, Z
    3df8:	41 e0       	ldi	r20, 0x01	; 1
    3dfa:	4c 15       	cp	r20, r12
    3dfc:	18 f0       	brcs	.+6      	; 0x3e04 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    3dfe:	4a 15       	cp	r20, r10
    3e00:	08 f0       	brcs	.+2      	; 0x3e04 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    3e02:	7f c0       	rjmp	.+254    	; 0x3f02 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    3e04:	66 2d       	mov	r22, r6
    3e06:	06 2c       	mov	r0, r6
    3e08:	00 0c       	add	r0, r0
    3e0a:	77 0b       	sbc	r23, r23
    3e0c:	7c 83       	std	Y+4, r23	; 0x04
    3e0e:	6b 83       	std	Y+3, r22	; 0x03
    3e10:	84 2d       	mov	r24, r4
    3e12:	04 2c       	mov	r0, r4
    3e14:	00 0c       	add	r0, r0
    3e16:	99 0b       	sbc	r25, r25
    3e18:	9e 83       	std	Y+6, r25	; 0x06
    3e1a:	8d 83       	std	Y+5, r24	; 0x05
    3e1c:	a9 8d       	ldd	r26, Y+25	; 0x19
    3e1e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3e20:	ed 91       	ld	r30, X+
    3e22:	fc 91       	ld	r31, X
    3e24:	11 97       	sbiw	r26, 0x01	; 1
    3e26:	02 84       	ldd	r0, Z+10	; 0x0a
    3e28:	f3 85       	ldd	r31, Z+11	; 0x0b
    3e2a:	e0 2d       	mov	r30, r0
    3e2c:	cd 01       	movw	r24, r26
    3e2e:	09 95       	icall
    3e30:	51 2c       	mov	r5, r1
    3e32:	d1 2c       	mov	r13, r1
    3e34:	c1 2c       	mov	r12, r1
    3e36:	ea 2d       	mov	r30, r10
    3e38:	f0 e0       	ldi	r31, 0x00	; 0
    3e3a:	fa 87       	std	Y+10, r31	; 0x0a
    3e3c:	e9 87       	std	Y+9, r30	; 0x09
    3e3e:	2b 2d       	mov	r18, r11
    3e40:	30 e0       	ldi	r19, 0x00	; 0
    3e42:	3c 87       	std	Y+12, r19	; 0x0c
    3e44:	2b 87       	std	Y+11, r18	; 0x0b
    3e46:	a4 01       	movw	r20, r8
    3e48:	44 0d       	add	r20, r4
    3e4a:	51 1d       	adc	r21, r1
    3e4c:	47 fc       	sbrc	r4, 7
    3e4e:	5a 95       	dec	r21
    3e50:	58 8f       	std	Y+24, r21	; 0x18
    3e52:	4f 8b       	std	Y+23, r20	; 0x17
    3e54:	69 81       	ldd	r22, Y+1	; 0x01
    3e56:	7a 81       	ldd	r23, Y+2	; 0x02
    3e58:	66 0d       	add	r22, r6
    3e5a:	71 1d       	adc	r23, r1
    3e5c:	67 fc       	sbrc	r6, 7
    3e5e:	7a 95       	dec	r23
    3e60:	7e 87       	std	Y+14, r23	; 0x0e
    3e62:	6d 87       	std	Y+13, r22	; 0x0d
    3e64:	79 89       	ldd	r23, Y+17	; 0x11
    3e66:	c7 16       	cp	r12, r23
    3e68:	08 f0       	brcs	.+2      	; 0x3e6c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    3e6a:	51 cf       	rjmp	.-350    	; 0x3d0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    3e6c:	2c 2d       	mov	r18, r12
    3e6e:	30 e0       	ldi	r19, 0x00	; 0
    3e70:	4d 81       	ldd	r20, Y+5	; 0x05
    3e72:	5e 81       	ldd	r21, Y+6	; 0x06
    3e74:	42 0f       	add	r20, r18
    3e76:	53 1f       	adc	r21, r19
    3e78:	a9 85       	ldd	r26, Y+9	; 0x09
    3e7a:	ba 85       	ldd	r27, Y+10	; 0x0a
    3e7c:	4a 9f       	mul	r20, r26
    3e7e:	c0 01       	movw	r24, r0
    3e80:	4b 9f       	mul	r20, r27
    3e82:	90 0d       	add	r25, r0
    3e84:	5a 9f       	mul	r21, r26
    3e86:	90 0d       	add	r25, r0
    3e88:	11 24       	eor	r1, r1
    3e8a:	fc 01       	movw	r30, r24
    3e8c:	e8 0d       	add	r30, r8
    3e8e:	f9 1d       	adc	r31, r9
    3e90:	f8 8b       	std	Y+16, r31	; 0x10
    3e92:	ef 87       	std	Y+15, r30	; 0x0f
    3e94:	85 2d       	mov	r24, r5
    3e96:	61 2c       	mov	r6, r1
    3e98:	4f 89       	ldd	r20, Y+23	; 0x17
    3e9a:	58 8d       	ldd	r21, Y+24	; 0x18
    3e9c:	42 0f       	add	r20, r18
    3e9e:	53 1f       	adc	r21, r19
    3ea0:	5e 8b       	std	Y+22, r21	; 0x16
    3ea2:	4d 8b       	std	Y+21, r20	; 0x15
    3ea4:	67 14       	cp	r6, r7
    3ea6:	08 f0       	brcs	.+2      	; 0x3eaa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    3ea8:	50 c0       	rjmp	.+160    	; 0x3f4a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    3eaa:	44 24       	eor	r4, r4
    3eac:	43 94       	inc	r4
    3eae:	48 0e       	add	r4, r24
    3eb0:	87 70       	andi	r24, 0x07	; 7
    3eb2:	41 f4       	brne	.+16     	; 0x3ec4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    3eb4:	c1 01       	movw	r24, r2
    3eb6:	01 96       	adiw	r24, 0x01	; 1
    3eb8:	eb 89       	ldd	r30, Y+19	; 0x13
    3eba:	fc 89       	ldd	r31, Y+20	; 0x14
    3ebc:	e2 0d       	add	r30, r2
    3ebe:	f3 1d       	adc	r31, r3
    3ec0:	d4 90       	lpm	r13, Z
    3ec2:	1c 01       	movw	r2, r24
    3ec4:	d7 fe       	sbrs	r13, 7
    3ec6:	19 c0       	rjmp	.+50     	; 0x3efa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    3ec8:	a9 8d       	ldd	r26, Y+25	; 0x19
    3eca:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3ecc:	ed 91       	ld	r30, X+
    3ece:	fc 91       	ld	r31, X
    3ed0:	66 2d       	mov	r22, r6
    3ed2:	70 e0       	ldi	r23, 0x00	; 0
    3ed4:	b1 e0       	ldi	r27, 0x01	; 1
    3ed6:	bb 12       	cpse	r11, r27
    3ed8:	19 c0       	rjmp	.+50     	; 0x3f0c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    3eda:	ab 12       	cpse	r10, r27
    3edc:	17 c0       	rjmp	.+46     	; 0x3f0c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    3ede:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ee0:	3e 85       	ldd	r19, Y+14	; 0x0e
    3ee2:	62 0f       	add	r22, r18
    3ee4:	73 1f       	adc	r23, r19
    3ee6:	04 84       	ldd	r0, Z+12	; 0x0c
    3ee8:	f5 85       	ldd	r31, Z+13	; 0x0d
    3eea:	e0 2d       	mov	r30, r0
    3eec:	2f 81       	ldd	r18, Y+7	; 0x07
    3eee:	38 85       	ldd	r19, Y+8	; 0x08
    3ef0:	4d 89       	ldd	r20, Y+21	; 0x15
    3ef2:	5e 89       	ldd	r21, Y+22	; 0x16
    3ef4:	89 8d       	ldd	r24, Y+25	; 0x19
    3ef6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ef8:	09 95       	icall
    3efa:	dd 0c       	add	r13, r13
    3efc:	63 94       	inc	r6
    3efe:	84 2d       	mov	r24, r4
    3f00:	d1 cf       	rjmp	.-94     	; 0x3ea4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    3f02:	1e 82       	std	Y+6, r1	; 0x06
    3f04:	1d 82       	std	Y+5, r1	; 0x05
    3f06:	1c 82       	std	Y+4, r1	; 0x04
    3f08:	1b 82       	std	Y+3, r1	; 0x03
    3f0a:	88 cf       	rjmp	.-240    	; 0x3e1c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    3f0c:	4b 81       	ldd	r20, Y+3	; 0x03
    3f0e:	5c 81       	ldd	r21, Y+4	; 0x04
    3f10:	64 0f       	add	r22, r20
    3f12:	75 1f       	adc	r23, r21
    3f14:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f16:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f18:	6a 9f       	mul	r22, r26
    3f1a:	c0 01       	movw	r24, r0
    3f1c:	6b 9f       	mul	r22, r27
    3f1e:	90 0d       	add	r25, r0
    3f20:	7a 9f       	mul	r23, r26
    3f22:	90 0d       	add	r25, r0
    3f24:	11 24       	eor	r1, r1
    3f26:	69 81       	ldd	r22, Y+1	; 0x01
    3f28:	7a 81       	ldd	r23, Y+2	; 0x02
    3f2a:	68 0f       	add	r22, r24
    3f2c:	79 1f       	adc	r23, r25
    3f2e:	06 84       	ldd	r0, Z+14	; 0x0e
    3f30:	f7 85       	ldd	r31, Z+15	; 0x0f
    3f32:	e0 2d       	mov	r30, r0
    3f34:	ef 80       	ldd	r14, Y+7	; 0x07
    3f36:	f8 84       	ldd	r15, Y+8	; 0x08
    3f38:	09 85       	ldd	r16, Y+9	; 0x09
    3f3a:	1a 85       	ldd	r17, Y+10	; 0x0a
    3f3c:	9d 01       	movw	r18, r26
    3f3e:	4f 85       	ldd	r20, Y+15	; 0x0f
    3f40:	58 89       	ldd	r21, Y+16	; 0x10
    3f42:	89 8d       	ldd	r24, Y+25	; 0x19
    3f44:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f46:	09 95       	icall
    3f48:	d8 cf       	rjmp	.-80     	; 0x3efa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    3f4a:	57 0c       	add	r5, r7
    3f4c:	c3 94       	inc	r12
    3f4e:	8a cf       	rjmp	.-236    	; 0x3e64 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    3f50:	6a 96       	adiw	r28, 0x1a	; 26
    3f52:	0f b6       	in	r0, 0x3f	; 63
    3f54:	f8 94       	cli
    3f56:	de bf       	out	0x3e, r29	; 62
    3f58:	0f be       	out	0x3f, r0	; 63
    3f5a:	cd bf       	out	0x3d, r28	; 61
    3f5c:	df 91       	pop	r29
    3f5e:	cf 91       	pop	r28
    3f60:	1f 91       	pop	r17
    3f62:	0f 91       	pop	r16
    3f64:	ff 90       	pop	r15
    3f66:	ef 90       	pop	r14
    3f68:	df 90       	pop	r13
    3f6a:	cf 90       	pop	r12
    3f6c:	bf 90       	pop	r11
    3f6e:	af 90       	pop	r10
    3f70:	9f 90       	pop	r9
    3f72:	8f 90       	pop	r8
    3f74:	7f 90       	pop	r7
    3f76:	6f 90       	pop	r6
    3f78:	5f 90       	pop	r5
    3f7a:	4f 90       	pop	r4
    3f7c:	3f 90       	pop	r3
    3f7e:	2f 90       	pop	r2
    3f80:	08 95       	ret

00003f82 <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    3f82:	8f 92       	push	r8
    3f84:	9f 92       	push	r9
    3f86:	af 92       	push	r10
    3f88:	cf 92       	push	r12
    3f8a:	ef 92       	push	r14
    3f8c:	ff 92       	push	r15
    3f8e:	0f 93       	push	r16
    3f90:	1f 93       	push	r17
    3f92:	cf 93       	push	r28
    3f94:	df 93       	push	r29
    3f96:	ec 01       	movw	r28, r24
    3f98:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    3f9a:	88 8d       	ldd	r24, Y+24	; 0x18
    3f9c:	99 8d       	ldd	r25, Y+25	; 0x19
    3f9e:	00 97       	sbiw	r24, 0x00	; 0
    3fa0:	09 f0       	breq	.+2      	; 0x3fa4 <Adafruit_GFX::write(unsigned char)+0x22>
    3fa2:	50 c0       	rjmp	.+160    	; 0x4044 <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    3fa4:	6a 30       	cpi	r22, 0x0A	; 10
    3fa6:	d1 f4       	brne	.+52     	; 0x3fdc <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    3fa8:	1c 86       	std	Y+12, r1	; 0x0c
    3faa:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    3fac:	8c 89       	ldd	r24, Y+20	; 0x14
    3fae:	48 e0       	ldi	r20, 0x08	; 8
    3fb0:	84 9f       	mul	r24, r20
    3fb2:	90 01       	movw	r18, r0
    3fb4:	11 24       	eor	r1, r1
    3fb6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fb8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fba:	82 0f       	add	r24, r18
    3fbc:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    3fbe:	9e 87       	std	Y+14, r25	; 0x0e
    3fc0:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    3fc2:	81 e0       	ldi	r24, 0x01	; 1
    3fc4:	90 e0       	ldi	r25, 0x00	; 0
    3fc6:	df 91       	pop	r29
    3fc8:	cf 91       	pop	r28
    3fca:	1f 91       	pop	r17
    3fcc:	0f 91       	pop	r16
    3fce:	ff 90       	pop	r15
    3fd0:	ef 90       	pop	r14
    3fd2:	cf 90       	pop	r12
    3fd4:	af 90       	pop	r10
    3fd6:	9f 90       	pop	r9
    3fd8:	8f 90       	pop	r8
    3fda:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    3fdc:	6d 30       	cpi	r22, 0x0D	; 13
    3fde:	89 f3       	breq	.-30     	; 0x3fc2 <Adafruit_GFX::write(unsigned char)+0x40>
    3fe0:	cb 88       	ldd	r12, Y+19	; 0x13
    3fe2:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    3fe4:	8e 89       	ldd	r24, Y+22	; 0x16
    3fe6:	88 23       	and	r24, r24
    3fe8:	c1 f0       	breq	.+48     	; 0x401a <Adafruit_GFX::write(unsigned char)+0x98>
    3fea:	8b 85       	ldd	r24, Y+11	; 0x0b
    3fec:	9c 85       	ldd	r25, Y+12	; 0x0c
    3fee:	36 e0       	ldi	r19, 0x06	; 6
    3ff0:	c3 9e       	mul	r12, r19
    3ff2:	80 0d       	add	r24, r0
    3ff4:	91 1d       	adc	r25, r1
    3ff6:	11 24       	eor	r1, r1
    3ff8:	4f 81       	ldd	r20, Y+7	; 0x07
    3ffa:	58 85       	ldd	r21, Y+8	; 0x08
    3ffc:	48 17       	cp	r20, r24
    3ffe:	59 07       	cpc	r21, r25
    4000:	64 f4       	brge	.+24     	; 0x401a <Adafruit_GFX::write(unsigned char)+0x98>
    4002:	4d 85       	ldd	r20, Y+13	; 0x0d
    4004:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    4006:	1c 86       	std	Y+12, r1	; 0x0c
    4008:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    400a:	38 e0       	ldi	r19, 0x08	; 8
    400c:	a3 9e       	mul	r10, r19
    400e:	c0 01       	movw	r24, r0
    4010:	11 24       	eor	r1, r1
    4012:	84 0f       	add	r24, r20
    4014:	95 1f       	adc	r25, r21
    4016:	9e 87       	std	Y+14, r25	; 0x0e
    4018:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    401a:	e9 88       	ldd	r14, Y+17	; 0x11
    401c:	fa 88       	ldd	r15, Y+18	; 0x12
    401e:	0f 85       	ldd	r16, Y+15	; 0x0f
    4020:	18 89       	ldd	r17, Y+16	; 0x10
    4022:	4d 85       	ldd	r20, Y+13	; 0x0d
    4024:	5e 85       	ldd	r21, Y+14	; 0x0e
    4026:	6b 85       	ldd	r22, Y+11	; 0x0b
    4028:	7c 85       	ldd	r23, Y+12	; 0x0c
    402a:	ce 01       	movw	r24, r28
    402c:	85 dd       	rcall	.-1270   	; 0x3b38 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    402e:	2b 89       	ldd	r18, Y+19	; 0x13
    4030:	8b 85       	ldd	r24, Y+11	; 0x0b
    4032:	9c 85       	ldd	r25, Y+12	; 0x0c
    4034:	46 e0       	ldi	r20, 0x06	; 6
    4036:	24 9f       	mul	r18, r20
    4038:	80 0d       	add	r24, r0
    403a:	91 1d       	adc	r25, r1
    403c:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    403e:	9c 87       	std	Y+12, r25	; 0x0c
    4040:	8b 87       	std	Y+11, r24	; 0x0b
    4042:	bf cf       	rjmp	.-130    	; 0x3fc2 <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    4044:	6a 30       	cpi	r22, 0x0A	; 10
    4046:	69 f4       	brne	.+26     	; 0x4062 <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    4048:	1c 86       	std	Y+12, r1	; 0x0c
    404a:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    404c:	fc 01       	movw	r30, r24
    404e:	36 96       	adiw	r30, 0x06	; 6
    4050:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    4052:	2c 89       	ldd	r18, Y+20	; 0x14
    4054:	8d 85       	ldd	r24, Y+13	; 0x0d
    4056:	9e 85       	ldd	r25, Y+14	; 0x0e
    4058:	e2 9f       	mul	r30, r18
    405a:	80 0d       	add	r24, r0
    405c:	91 1d       	adc	r25, r1
    405e:	11 24       	eor	r1, r1
    4060:	ae cf       	rjmp	.-164    	; 0x3fbe <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    4062:	6d 30       	cpi	r22, 0x0D	; 13
    4064:	09 f4       	brne	.+2      	; 0x4068 <Adafruit_GFX::write(unsigned char)+0xe6>
    4066:	ad cf       	rjmp	.-166    	; 0x3fc2 <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    4068:	fc 01       	movw	r30, r24
    406a:	34 96       	adiw	r30, 0x04	; 4
    406c:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    406e:	63 17       	cp	r22, r19
    4070:	08 f4       	brcc	.+2      	; 0x4074 <Adafruit_GFX::write(unsigned char)+0xf2>
    4072:	a7 cf       	rjmp	.-178    	; 0x3fc2 <Adafruit_GFX::write(unsigned char)+0x40>
    4074:	31 96       	adiw	r30, 0x01	; 1
    4076:	e4 91       	lpm	r30, Z
    4078:	e6 17       	cp	r30, r22
    407a:	08 f4       	brcc	.+2      	; 0x407e <Adafruit_GFX::write(unsigned char)+0xfc>
    407c:	a2 cf       	rjmp	.-188    	; 0x3fc2 <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    407e:	fc 01       	movw	r30, r24
    4080:	32 96       	adiw	r30, 0x02	; 2
    4082:	85 90       	lpm	r8, Z+
    4084:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    4086:	46 2f       	mov	r20, r22
    4088:	43 1b       	sub	r20, r19
    408a:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    408c:	47 e0       	ldi	r20, 0x07	; 7
    408e:	34 9f       	mul	r19, r20
    4090:	80 0c       	add	r8, r0
    4092:	91 1c       	adc	r9, r1
    4094:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    4096:	f4 01       	movw	r30, r8
    4098:	32 96       	adiw	r30, 0x02	; 2
    409a:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    409c:	31 96       	adiw	r30, 0x01	; 1
    409e:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    40a0:	33 23       	and	r19, r19
    40a2:	a1 f1       	breq	.+104    	; 0x410c <Adafruit_GFX::write(unsigned char)+0x18a>
    40a4:	ee 23       	and	r30, r30
    40a6:	91 f1       	breq	.+100    	; 0x410c <Adafruit_GFX::write(unsigned char)+0x18a>
    40a8:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    40aa:	f4 01       	movw	r30, r8
    40ac:	35 96       	adiw	r30, 0x05	; 5
    40ae:	e4 91       	lpm	r30, Z
    40b0:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    40b2:	4e 89       	ldd	r20, Y+22	; 0x16
    40b4:	44 23       	and	r20, r20
    40b6:	01 f1       	breq	.+64     	; 0x40f8 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    40b8:	0e 2e       	mov	r0, r30
    40ba:	00 0c       	add	r0, r0
    40bc:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    40be:	e3 0f       	add	r30, r19
    40c0:	f1 1d       	adc	r31, r1
    40c2:	ce 9e       	mul	r12, r30
    40c4:	a0 01       	movw	r20, r0
    40c6:	cf 9e       	mul	r12, r31
    40c8:	50 0d       	add	r21, r0
    40ca:	11 24       	eor	r1, r1
    40cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    40ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    40d0:	46 0f       	add	r20, r22
    40d2:	57 1f       	adc	r21, r23
    40d4:	6f 81       	ldd	r22, Y+7	; 0x07
    40d6:	78 85       	ldd	r23, Y+8	; 0x08
    40d8:	64 17       	cp	r22, r20
    40da:	75 07       	cpc	r23, r21
    40dc:	6c f4       	brge	.+26     	; 0x40f8 <Adafruit_GFX::write(unsigned char)+0x176>
    40de:	4d 85       	ldd	r20, Y+13	; 0x0d
    40e0:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    40e2:	1c 86       	std	Y+12, r1	; 0x0c
    40e4:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    40e6:	fc 01       	movw	r30, r24
    40e8:	36 96       	adiw	r30, 0x06	; 6
    40ea:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    40ec:	ae 9e       	mul	r10, r30
    40ee:	40 0d       	add	r20, r0
    40f0:	51 1d       	adc	r21, r1
    40f2:	11 24       	eor	r1, r1
    40f4:	5e 87       	std	Y+14, r21	; 0x0e
    40f6:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    40f8:	e9 88       	ldd	r14, Y+17	; 0x11
    40fa:	fa 88       	ldd	r15, Y+18	; 0x12
    40fc:	0f 85       	ldd	r16, Y+15	; 0x0f
    40fe:	18 89       	ldd	r17, Y+16	; 0x10
    4100:	4d 85       	ldd	r20, Y+13	; 0x0d
    4102:	5e 85       	ldd	r21, Y+14	; 0x0e
    4104:	6b 85       	ldd	r22, Y+11	; 0x0b
    4106:	7c 85       	ldd	r23, Y+12	; 0x0c
    4108:	ce 01       	movw	r24, r28
    410a:	16 dd       	rcall	.-1492   	; 0x3b38 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    410c:	f4 01       	movw	r30, r8
    410e:	34 96       	adiw	r30, 0x04	; 4
    4110:	e4 91       	lpm	r30, Z
    4112:	2b 89       	ldd	r18, Y+19	; 0x13
    4114:	8b 85       	ldd	r24, Y+11	; 0x0b
    4116:	9c 85       	ldd	r25, Y+12	; 0x0c
    4118:	e2 9f       	mul	r30, r18
    411a:	80 0d       	add	r24, r0
    411c:	91 1d       	adc	r25, r1
    411e:	11 24       	eor	r1, r1
    4120:	8e cf       	rjmp	.-228    	; 0x403e <Adafruit_GFX::write(unsigned char)+0xbc>

00004122 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    4122:	61 11       	cpse	r22, r1
    4124:	01 c0       	rjmp	.+2      	; 0x4128 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    4126:	61 e0       	ldi	r22, 0x01	; 1
    4128:	fc 01       	movw	r30, r24
    412a:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    412c:	41 11       	cpse	r20, r1
    412e:	01 c0       	rjmp	.+2      	; 0x4132 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    4130:	41 e0       	ldi	r20, 0x01	; 1
    4132:	fc 01       	movw	r30, r24
    4134:	44 8b       	std	Z+20, r20	; 0x14
}
    4136:	08 95       	ret

00004138 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    4138:	46 2f       	mov	r20, r22
    413a:	f3 cf       	rjmp	.-26     	; 0x4122 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

0000413c <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    413c:	ff 92       	push	r15
    413e:	0f 93       	push	r16
    4140:	1f 93       	push	r17
    4142:	cf 93       	push	r28
    4144:	df 93       	push	r29
    4146:	ec 01       	movw	r28, r24
    4148:	f0 2e       	mov	r15, r16
    414a:	10 e0       	ldi	r17, 0x00	; 0
    414c:	00 e0       	ldi	r16, 0x00	; 0
    414e:	20 d0       	rcall	.+64     	; 0x4190 <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    4150:	89 ee       	ldi	r24, 0xE9	; 233
    4152:	96 e0       	ldi	r25, 0x06	; 6
    4154:	99 83       	std	Y+1, r25	; 0x01
    4156:	88 83       	st	Y, r24
    4158:	fe 01       	movw	r30, r28
    415a:	e6 5e       	subi	r30, 0xE6	; 230
    415c:	fe 4f       	sbci	r31, 0xFE	; 254
    415e:	f0 82       	st	Z, r15
    4160:	31 96       	adiw	r30, 0x01	; 1
    4162:	10 82       	st	Z, r1
    4164:	c4 5e       	subi	r28, 0xE4	; 228
    4166:	de 4f       	sbci	r29, 0xFE	; 254
    4168:	18 82       	st	Y, r1
    416a:	df 91       	pop	r29
    416c:	cf 91       	pop	r28
    416e:	1f 91       	pop	r17
    4170:	0f 91       	pop	r16
    4172:	ff 90       	pop	r15
    4174:	08 95       	ret

00004176 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    4176:	8d 5d       	subi	r24, 0xDD	; 221
    4178:	9e 4f       	sbci	r25, 0xFE	; 254
    417a:	dc 01       	movw	r26, r24
    417c:	ed 91       	ld	r30, X+
    417e:	fc 91       	ld	r31, X
    4180:	30 97       	sbiw	r30, 0x00	; 0
    4182:	09 f0       	breq	.+2      	; 0x4186 <FastLED_NeoMatrix::show()+0x10>
    4184:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    4186:	60 91 7d 0e 	lds	r22, 0x0E7D	; 0x800e7d <FastLED>
    418a:	8d e7       	ldi	r24, 0x7D	; 125
    418c:	9e e0       	ldi	r25, 0x0E	; 14
    418e:	cd c3       	rjmp	.+1946   	; 0x492a <CFastLED::show(unsigned char)>

00004190 <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
  _fb[XY(x,y)] = color;
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
  drawPixel(x, y, CRGBtoint32(c));
}
    4190:	af 92       	push	r10
    4192:	bf 92       	push	r11
    4194:	cf 92       	push	r12
    4196:	df 92       	push	r13
    4198:	ef 92       	push	r14
    419a:	ff 92       	push	r15
    419c:	0f 93       	push	r16
    419e:	1f 93       	push	r17
    41a0:	cf 93       	push	r28
    41a2:	df 93       	push	r29
    41a4:	ec 01       	movw	r28, r24
    41a6:	5b 01       	movw	r10, r22
    41a8:	7a 01       	movw	r14, r20
    41aa:	69 01       	movw	r12, r18
    41ac:	a9 01       	movw	r20, r18
    41ae:	b7 01       	movw	r22, r14
    41b0:	6d db       	rcall	.-2342   	; 0x388c <Adafruit_GFX::Adafruit_GFX(int, int)>
    41b2:	8c e4       	ldi	r24, 0x4C	; 76
    41b4:	97 e0       	ldi	r25, 0x07	; 7
    41b6:	99 83       	std	Y+1, r25	; 0x01
    41b8:	88 83       	st	Y, r24
    41ba:	fe 01       	movw	r30, r28
    41bc:	e3 5e       	subi	r30, 0xE3	; 227
    41be:	fe 4f       	sbci	r31, 0xFE	; 254
    41c0:	f1 82       	std	Z+1, r15	; 0x01
    41c2:	e0 82       	st	Z, r14
    41c4:	32 96       	adiw	r30, 0x02	; 2
    41c6:	d1 82       	std	Z+1, r13	; 0x01
    41c8:	c0 82       	st	Z, r12
    41ca:	32 96       	adiw	r30, 0x02	; 2
    41cc:	80 e1       	ldi	r24, 0x10	; 16
    41ce:	97 e2       	ldi	r25, 0x27	; 39
    41d0:	91 83       	std	Z+1, r25	; 0x01
    41d2:	80 83       	st	Z, r24
    41d4:	36 96       	adiw	r30, 0x06	; 6
    41d6:	11 82       	std	Z+1, r1	; 0x01
    41d8:	10 82       	st	Z, r1
    41da:	3a 96       	adiw	r30, 0x0a	; 10
    41dc:	10 82       	st	Z, r1
    41de:	3c 97       	sbiw	r30, 0x0c	; 12
    41e0:	b1 82       	std	Z+1, r11	; 0x01
    41e2:	a0 82       	st	Z, r10
    41e4:	32 97       	sbiw	r30, 0x02	; 2
    41e6:	11 83       	std	Z+1, r17	; 0x01
    41e8:	00 83       	st	Z, r16
    41ea:	39 97       	sbiw	r30, 0x09	; 9
    41ec:	10 82       	st	Z, r1
    41ee:	31 96       	adiw	r30, 0x01	; 1
    41f0:	10 82       	st	Z, r1
    41f2:	31 96       	adiw	r30, 0x01	; 1
    41f4:	10 82       	st	Z, r1
    41f6:	c7 5d       	subi	r28, 0xD7	; 215
    41f8:	de 4f       	sbci	r29, 0xFE	; 254
    41fa:	ce 9c       	mul	r12, r14
    41fc:	c0 01       	movw	r24, r0
    41fe:	cf 9c       	mul	r12, r15
    4200:	90 0d       	add	r25, r0
    4202:	de 9c       	mul	r13, r14
    4204:	90 0d       	add	r25, r0
    4206:	11 24       	eor	r1, r1
    4208:	b0 e0       	ldi	r27, 0x00	; 0
    420a:	a0 e0       	ldi	r26, 0x00	; 0
    420c:	88 83       	st	Y, r24
    420e:	99 83       	std	Y+1, r25	; 0x01
    4210:	aa 83       	std	Y+2, r26	; 0x02
    4212:	bb 83       	std	Y+3, r27	; 0x03
    4214:	df 91       	pop	r29
    4216:	cf 91       	pop	r28
    4218:	1f 91       	pop	r17
    421a:	0f 91       	pop	r16
    421c:	ff 90       	pop	r15
    421e:	ef 90       	pop	r14
    4220:	df 90       	pop	r13
    4222:	cf 90       	pop	r12
    4224:	bf 90       	pop	r11
    4226:	af 90       	pop	r10
    4228:	08 95       	ret

0000422a <Framebuffer_GFX::begin()>:
    422a:	cf 93       	push	r28
    422c:	df 93       	push	r29
    422e:	ec 01       	movw	r28, r24
    4230:	61 e1       	ldi	r22, 0x11	; 17
    4232:	77 e0       	ldi	r23, 0x07	; 7
    4234:	8d e0       	ldi	r24, 0x0D	; 13
    4236:	9f e0       	ldi	r25, 0x0F	; 15
    4238:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    423c:	fe 01       	movw	r30, r28
    423e:	e3 5e       	subi	r30, 0xE3	; 227
    4240:	fe 4f       	sbci	r31, 0xFE	; 254
    4242:	40 81       	ld	r20, Z
    4244:	51 81       	ldd	r21, Z+1	; 0x01
    4246:	70 e0       	ldi	r23, 0x00	; 0
    4248:	60 e0       	ldi	r22, 0x00	; 0
    424a:	20 e0       	ldi	r18, 0x00	; 0
    424c:	8d e0       	ldi	r24, 0x0D	; 13
    424e:	9f e0       	ldi	r25, 0x0F	; 15
    4250:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <Print::printNumberDec(unsigned long, unsigned char)>
    4254:	60 e3       	ldi	r22, 0x30	; 48
    4256:	77 e0       	ldi	r23, 0x07	; 7
    4258:	8d e0       	ldi	r24, 0x0D	; 13
    425a:	9f e0       	ldi	r25, 0x0F	; 15
    425c:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    4260:	fe 01       	movw	r30, r28
    4262:	e1 5e       	subi	r30, 0xE1	; 225
    4264:	fe 4f       	sbci	r31, 0xFE	; 254
    4266:	40 81       	ld	r20, Z
    4268:	51 81       	ldd	r21, Z+1	; 0x01
    426a:	70 e0       	ldi	r23, 0x00	; 0
    426c:	60 e0       	ldi	r22, 0x00	; 0
    426e:	20 e0       	ldi	r18, 0x00	; 0
    4270:	8d e0       	ldi	r24, 0x0D	; 13
    4272:	9f e0       	ldi	r25, 0x0F	; 15
    4274:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <Print::printNumberDec(unsigned long, unsigned char)>
    4278:	6a e3       	ldi	r22, 0x3A	; 58
    427a:	77 e0       	ldi	r23, 0x07	; 7
    427c:	8d e0       	ldi	r24, 0x0D	; 13
    427e:	9f e0       	ldi	r25, 0x0F	; 15
    4280:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    4284:	c7 5d       	subi	r28, 0xD7	; 215
    4286:	de 4f       	sbci	r29, 0xFE	; 254
    4288:	48 81       	ld	r20, Y
    428a:	59 81       	ldd	r21, Y+1	; 0x01
    428c:	6a 81       	ldd	r22, Y+2	; 0x02
    428e:	7b 81       	ldd	r23, Y+3	; 0x03
    4290:	20 e0       	ldi	r18, 0x00	; 0
    4292:	8d e0       	ldi	r24, 0x0D	; 13
    4294:	9f e0       	ldi	r25, 0x0F	; 15
    4296:	0e 94 8d 2e 	call	0x5d1a	; 0x5d1a <Print::printNumberDec(unsigned long, unsigned char)>
    429a:	8d e0       	ldi	r24, 0x0D	; 13
    429c:	9f e0       	ldi	r25, 0x0F	; 15
    429e:	df 91       	pop	r29
    42a0:	cf 91       	pop	r28
    42a2:	0c 94 73 2e 	jmp	0x5ce6	; 0x5ce6 <Print::println()>

000042a6 <Framebuffer_GFX::expandColor(unsigned int)>:
    42a6:	fc 01       	movw	r30, r24
    42a8:	ef 2f       	mov	r30, r31
    42aa:	ff 27       	eor	r31, r31
    42ac:	e6 95       	lsr	r30
    42ae:	e6 95       	lsr	r30
    42b0:	e6 95       	lsr	r30
    42b2:	e8 52       	subi	r30, 0x28	; 40
    42b4:	fa 4f       	sbci	r31, 0xFA	; 250
    42b6:	24 91       	lpm	r18, Z
    42b8:	fc 01       	movw	r30, r24
    42ba:	35 e0       	ldi	r19, 0x05	; 5
    42bc:	f6 95       	lsr	r31
    42be:	e7 95       	ror	r30
    42c0:	3a 95       	dec	r19
    42c2:	e1 f7       	brne	.-8      	; 0x42bc <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    42c4:	ef 73       	andi	r30, 0x3F	; 63
    42c6:	ff 27       	eor	r31, r31
    42c8:	e8 56       	subi	r30, 0x68	; 104
    42ca:	fa 4f       	sbci	r31, 0xFA	; 250
    42cc:	64 91       	lpm	r22, Z
    42ce:	8f 71       	andi	r24, 0x1F	; 31
    42d0:	99 27       	eor	r25, r25
    42d2:	fc 01       	movw	r30, r24
    42d4:	e8 52       	subi	r30, 0x28	; 40
    42d6:	fa 4f       	sbci	r31, 0xFA	; 250
    42d8:	e4 91       	lpm	r30, Z
    42da:	70 e0       	ldi	r23, 0x00	; 0
    42dc:	90 e0       	ldi	r25, 0x00	; 0
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	98 2f       	mov	r25, r24
    42e2:	87 2f       	mov	r24, r23
    42e4:	76 2f       	mov	r23, r22
    42e6:	66 27       	eor	r22, r22
    42e8:	82 2b       	or	r24, r18
    42ea:	6e 2b       	or	r22, r30
    42ec:	08 95       	ret

000042ee <Framebuffer_GFX::fillScreen(unsigned int)>:
    42ee:	8f 92       	push	r8
    42f0:	9f 92       	push	r9
    42f2:	af 92       	push	r10
    42f4:	bf 92       	push	r11
    42f6:	cf 92       	push	r12
    42f8:	df 92       	push	r13
    42fa:	ef 92       	push	r14
    42fc:	ff 92       	push	r15
    42fe:	cf 93       	push	r28
    4300:	df 93       	push	r29
    4302:	ec 01       	movw	r28, r24
    4304:	cb 01       	movw	r24, r22
    4306:	fe 01       	movw	r30, r28
    4308:	ef 5c       	subi	r30, 0xCF	; 207
    430a:	fe 4f       	sbci	r31, 0xFE	; 254
    430c:	20 81       	ld	r18, Z
    430e:	22 23       	and	r18, r18
    4310:	39 f1       	breq	.+78     	; 0x4360 <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    4312:	34 97       	sbiw	r30, 0x04	; 4
    4314:	60 81       	ld	r22, Z
    4316:	71 81       	ldd	r23, Z+1	; 0x01
    4318:	82 81       	ldd	r24, Z+2	; 0x02
    431a:	30 e0       	ldi	r19, 0x00	; 0
    431c:	20 e0       	ldi	r18, 0x00	; 0
    431e:	c1 2c       	mov	r12, r1
    4320:	d1 2c       	mov	r13, r1
    4322:	76 01       	movw	r14, r12
    4324:	de 01       	movw	r26, r28
    4326:	a7 5d       	subi	r26, 0xD7	; 215
    4328:	be 4f       	sbci	r27, 0xFE	; 254
    432a:	cb 5d       	subi	r28, 0xDB	; 219
    432c:	de 4f       	sbci	r29, 0xFE	; 254
    432e:	8d 90       	ld	r8, X+
    4330:	9d 90       	ld	r9, X+
    4332:	ad 90       	ld	r10, X+
    4334:	bc 90       	ld	r11, X
    4336:	13 97       	sbiw	r26, 0x03	; 3
    4338:	c8 14       	cp	r12, r8
    433a:	d9 04       	cpc	r13, r9
    433c:	ea 04       	cpc	r14, r10
    433e:	fb 04       	cpc	r15, r11
    4340:	88 f4       	brcc	.+34     	; 0x4364 <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    4342:	e8 81       	ld	r30, Y
    4344:	f9 81       	ldd	r31, Y+1	; 0x01
    4346:	e2 0f       	add	r30, r18
    4348:	f3 1f       	adc	r31, r19
    434a:	80 83       	st	Z, r24
    434c:	71 83       	std	Z+1, r23	; 0x01
    434e:	62 83       	std	Z+2, r22	; 0x02
    4350:	9f ef       	ldi	r25, 0xFF	; 255
    4352:	c9 1a       	sub	r12, r25
    4354:	d9 0a       	sbc	r13, r25
    4356:	e9 0a       	sbc	r14, r25
    4358:	f9 0a       	sbc	r15, r25
    435a:	2d 5f       	subi	r18, 0xFD	; 253
    435c:	3f 4f       	sbci	r19, 0xFF	; 255
    435e:	e7 cf       	rjmp	.-50     	; 0x432e <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    4360:	a2 df       	rcall	.-188    	; 0x42a6 <Framebuffer_GFX::expandColor(unsigned int)>
    4362:	db cf       	rjmp	.-74     	; 0x431a <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    4364:	df 91       	pop	r29
    4366:	cf 91       	pop	r28
    4368:	ff 90       	pop	r15
    436a:	ef 90       	pop	r14
    436c:	df 90       	pop	r13
    436e:	cf 90       	pop	r12
    4370:	bf 90       	pop	r11
    4372:	af 90       	pop	r10
    4374:	9f 90       	pop	r9
    4376:	8f 90       	pop	r8
    4378:	08 95       	ret

0000437a <Framebuffer_GFX::XY(int, int)>:
    437a:	6f 92       	push	r6
    437c:	7f 92       	push	r7
    437e:	9f 92       	push	r9
    4380:	af 92       	push	r10
    4382:	bf 92       	push	r11
    4384:	cf 92       	push	r12
    4386:	df 92       	push	r13
    4388:	ef 92       	push	r14
    438a:	ff 92       	push	r15
    438c:	0f 93       	push	r16
    438e:	1f 93       	push	r17
    4390:	cf 93       	push	r28
    4392:	df 93       	push	r29
    4394:	ec 01       	movw	r28, r24
    4396:	cb 01       	movw	r24, r22
    4398:	8a 01       	movw	r16, r20
    439a:	77 fd       	sbrc	r23, 7
    439c:	0c c0       	rjmp	.+24     	; 0x43b6 <Framebuffer_GFX::XY(int, int)+0x3c>
    439e:	57 fd       	sbrc	r21, 7
    43a0:	0a c0       	rjmp	.+20     	; 0x43b6 <Framebuffer_GFX::XY(int, int)+0x3c>
    43a2:	2f 81       	ldd	r18, Y+7	; 0x07
    43a4:	38 85       	ldd	r19, Y+8	; 0x08
    43a6:	62 17       	cp	r22, r18
    43a8:	73 07       	cpc	r23, r19
    43aa:	2c f4       	brge	.+10     	; 0x43b6 <Framebuffer_GFX::XY(int, int)+0x3c>
    43ac:	29 85       	ldd	r18, Y+9	; 0x09
    43ae:	3a 85       	ldd	r19, Y+10	; 0x0a
    43b0:	42 17       	cp	r20, r18
    43b2:	53 07       	cpc	r21, r19
    43b4:	9c f0       	brlt	.+38     	; 0x43dc <Framebuffer_GFX::XY(int, int)+0x62>
    43b6:	c7 5d       	subi	r28, 0xD7	; 215
    43b8:	de 4f       	sbci	r29, 0xFE	; 254
    43ba:	88 81       	ld	r24, Y
    43bc:	99 81       	ldd	r25, Y+1	; 0x01
    43be:	01 97       	sbiw	r24, 0x01	; 1
    43c0:	df 91       	pop	r29
    43c2:	cf 91       	pop	r28
    43c4:	1f 91       	pop	r17
    43c6:	0f 91       	pop	r16
    43c8:	ff 90       	pop	r15
    43ca:	ef 90       	pop	r14
    43cc:	df 90       	pop	r13
    43ce:	cf 90       	pop	r12
    43d0:	bf 90       	pop	r11
    43d2:	af 90       	pop	r10
    43d4:	9f 90       	pop	r9
    43d6:	7f 90       	pop	r7
    43d8:	6f 90       	pop	r6
    43da:	08 95       	ret
    43dc:	2d 89       	ldd	r18, Y+21	; 0x15
    43de:	22 30       	cpi	r18, 0x02	; 2
    43e0:	d9 f0       	breq	.+54     	; 0x4418 <Framebuffer_GFX::XY(int, int)+0x9e>
    43e2:	23 30       	cpi	r18, 0x03	; 3
    43e4:	51 f1       	breq	.+84     	; 0x443a <Framebuffer_GFX::XY(int, int)+0xc0>
    43e6:	21 30       	cpi	r18, 0x01	; 1
    43e8:	41 f4       	brne	.+16     	; 0x43fa <Framebuffer_GFX::XY(int, int)+0x80>
    43ea:	2b 81       	ldd	r18, Y+3	; 0x03
    43ec:	3c 81       	ldd	r19, Y+4	; 0x04
    43ee:	21 50       	subi	r18, 0x01	; 1
    43f0:	31 09       	sbc	r19, r1
    43f2:	24 1b       	sub	r18, r20
    43f4:	35 0b       	sbc	r19, r21
    43f6:	8b 01       	movw	r16, r22
    43f8:	c9 01       	movw	r24, r18
    43fa:	fe 01       	movw	r30, r28
    43fc:	e9 5d       	subi	r30, 0xD9	; 217
    43fe:	fe 4f       	sbci	r31, 0xFE	; 254
    4400:	01 90       	ld	r0, Z+
    4402:	f0 81       	ld	r31, Z
    4404:	e0 2d       	mov	r30, r0
    4406:	30 97       	sbiw	r30, 0x00	; 0
    4408:	09 f1       	breq	.+66     	; 0x444c <Framebuffer_GFX::XY(int, int)+0xd2>
    440a:	b8 01       	movw	r22, r16
    440c:	09 95       	icall
    440e:	50 e0       	ldi	r21, 0x00	; 0
    4410:	40 e0       	ldi	r20, 0x00	; 0
    4412:	84 0f       	add	r24, r20
    4414:	95 1f       	adc	r25, r21
    4416:	d4 cf       	rjmp	.-88     	; 0x43c0 <Framebuffer_GFX::XY(int, int)+0x46>
    4418:	2b 81       	ldd	r18, Y+3	; 0x03
    441a:	3c 81       	ldd	r19, Y+4	; 0x04
    441c:	21 50       	subi	r18, 0x01	; 1
    441e:	31 09       	sbc	r19, r1
    4420:	a9 01       	movw	r20, r18
    4422:	46 1b       	sub	r20, r22
    4424:	57 0b       	sbc	r21, r23
    4426:	ca 01       	movw	r24, r20
    4428:	2d 81       	ldd	r18, Y+5	; 0x05
    442a:	3e 81       	ldd	r19, Y+6	; 0x06
    442c:	21 50       	subi	r18, 0x01	; 1
    442e:	31 09       	sbc	r19, r1
    4430:	f9 01       	movw	r30, r18
    4432:	e0 1b       	sub	r30, r16
    4434:	f1 0b       	sbc	r31, r17
    4436:	8f 01       	movw	r16, r30
    4438:	e0 cf       	rjmp	.-64     	; 0x43fa <Framebuffer_GFX::XY(int, int)+0x80>
    443a:	2d 81       	ldd	r18, Y+5	; 0x05
    443c:	3e 81       	ldd	r19, Y+6	; 0x06
    443e:	21 50       	subi	r18, 0x01	; 1
    4440:	31 09       	sbc	r19, r1
    4442:	26 1b       	sub	r18, r22
    4444:	37 0b       	sbc	r19, r23
    4446:	ca 01       	movw	r24, r20
    4448:	89 01       	movw	r16, r18
    444a:	d7 cf       	rjmp	.-82     	; 0x43fa <Framebuffer_GFX::XY(int, int)+0x80>
    444c:	fe 01       	movw	r30, r28
    444e:	e6 5e       	subi	r30, 0xE6	; 230
    4450:	fe 4f       	sbci	r31, 0xFE	; 254
    4452:	d0 80       	ld	r13, Z
    4454:	fd 2d       	mov	r31, r13
    4456:	f3 70       	andi	r31, 0x03	; 3
    4458:	cf 2e       	mov	r12, r31
    445a:	fe 01       	movw	r30, r28
    445c:	e5 5e       	subi	r30, 0xE5	; 229
    445e:	fe 4f       	sbci	r31, 0xFE	; 254
    4460:	b0 80       	ld	r11, Z
    4462:	50 e0       	ldi	r21, 0x00	; 0
    4464:	40 e0       	ldi	r20, 0x00	; 0
    4466:	bb 20       	and	r11, r11
    4468:	09 f4       	brne	.+2      	; 0x446c <Framebuffer_GFX::XY(int, int)+0xf2>
    446a:	64 c0       	rjmp	.+200    	; 0x4534 <Framebuffer_GFX::XY(int, int)+0x1ba>
    446c:	32 96       	adiw	r30, 0x02	; 2
    446e:	e0 80       	ld	r14, Z
    4470:	f1 80       	ldd	r15, Z+1	; 0x01
    4472:	b7 01       	movw	r22, r14
    4474:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodhi4>
    4478:	9b 01       	movw	r18, r22
    447a:	98 2e       	mov	r9, r24
    447c:	a9 2e       	mov	r10, r25
    447e:	32 96       	adiw	r30, 0x02	; 2
    4480:	60 80       	ld	r6, Z
    4482:	71 80       	ldd	r7, Z+1	; 0x01
    4484:	c8 01       	movw	r24, r16
    4486:	b3 01       	movw	r22, r6
    4488:	0e 94 5f 33 	call	0x66be	; 0x66be <__udivmodhi4>
    448c:	db 01       	movw	r26, r22
    448e:	58 2f       	mov	r21, r24
    4490:	49 2f       	mov	r20, r25
    4492:	89 2d       	mov	r24, r9
    4494:	9a 2d       	mov	r25, r10
    4496:	05 2f       	mov	r16, r21
    4498:	14 2f       	mov	r17, r20
    449a:	d5 fe       	sbrs	r13, 5
    449c:	06 c0       	rjmp	.+12     	; 0x44aa <Framebuffer_GFX::XY(int, int)+0x130>
    449e:	4b 2d       	mov	r20, r11
    44a0:	41 50       	subi	r20, 0x01	; 1
    44a2:	55 0b       	sbc	r21, r21
    44a4:	42 1b       	sub	r20, r18
    44a6:	53 0b       	sbc	r21, r19
    44a8:	9a 01       	movw	r18, r20
    44aa:	d4 fe       	sbrs	r13, 4
    44ac:	09 c0       	rjmp	.+18     	; 0x44c0 <Framebuffer_GFX::XY(int, int)+0x146>
    44ae:	ae 01       	movw	r20, r28
    44b0:	44 5e       	subi	r20, 0xE4	; 228
    44b2:	5e 4f       	sbci	r21, 0xFE	; 254
    44b4:	fa 01       	movw	r30, r20
    44b6:	60 81       	ld	r22, Z
    44b8:	61 50       	subi	r22, 0x01	; 1
    44ba:	77 0b       	sbc	r23, r23
    44bc:	6a 1b       	sub	r22, r26
    44be:	7b 0b       	sbc	r23, r27
    44c0:	d6 fc       	sbrc	r13, 6
    44c2:	11 c0       	rjmp	.+34     	; 0x44e6 <Framebuffer_GFX::XY(int, int)+0x16c>
    44c4:	4b 2d       	mov	r20, r11
    44c6:	50 e0       	ldi	r21, 0x00	; 0
    44c8:	b6 2f       	mov	r27, r22
    44ca:	a7 2f       	mov	r26, r23
    44cc:	b9 01       	movw	r22, r18
    44ce:	2b 2f       	mov	r18, r27
    44d0:	3a 2f       	mov	r19, r26
    44d2:	d7 fc       	sbrc	r13, 7
    44d4:	0e c0       	rjmp	.+28     	; 0x44f2 <Framebuffer_GFX::XY(int, int)+0x178>
    44d6:	24 9f       	mul	r18, r20
    44d8:	d0 01       	movw	r26, r0
    44da:	25 9f       	mul	r18, r21
    44dc:	b0 0d       	add	r27, r0
    44de:	34 9f       	mul	r19, r20
    44e0:	b0 0d       	add	r27, r0
    44e2:	11 24       	eor	r1, r1
    44e4:	17 c0       	rjmp	.+46     	; 0x4514 <Framebuffer_GFX::XY(int, int)+0x19a>
    44e6:	de 01       	movw	r26, r28
    44e8:	a4 5e       	subi	r26, 0xE4	; 228
    44ea:	be 4f       	sbci	r27, 0xFE	; 254
    44ec:	4c 91       	ld	r20, X
    44ee:	50 e0       	ldi	r21, 0x00	; 0
    44f0:	f0 cf       	rjmp	.-32     	; 0x44d2 <Framebuffer_GFX::XY(int, int)+0x158>
    44f2:	20 ff       	sbrs	r18, 0
    44f4:	f0 cf       	rjmp	.-32     	; 0x44d6 <Framebuffer_GFX::XY(int, int)+0x15c>
    44f6:	ad 2d       	mov	r26, r13
    44f8:	a0 95       	com	r26
    44fa:	a3 70       	andi	r26, 0x03	; 3
    44fc:	ca 2e       	mov	r12, r26
    44fe:	2f 5f       	subi	r18, 0xFF	; 255
    4500:	3f 4f       	sbci	r19, 0xFF	; 255
    4502:	24 9f       	mul	r18, r20
    4504:	d0 01       	movw	r26, r0
    4506:	25 9f       	mul	r18, r21
    4508:	b0 0d       	add	r27, r0
    450a:	34 9f       	mul	r19, r20
    450c:	b0 0d       	add	r27, r0
    450e:	11 24       	eor	r1, r1
    4510:	60 95       	com	r22
    4512:	70 95       	com	r23
    4514:	6a 0f       	add	r22, r26
    4516:	7b 1f       	adc	r23, r27
    4518:	e6 9c       	mul	r14, r6
    451a:	90 01       	movw	r18, r0
    451c:	e7 9c       	mul	r14, r7
    451e:	30 0d       	add	r19, r0
    4520:	f6 9c       	mul	r15, r6
    4522:	30 0d       	add	r19, r0
    4524:	11 24       	eor	r1, r1
    4526:	26 9f       	mul	r18, r22
    4528:	a0 01       	movw	r20, r0
    452a:	27 9f       	mul	r18, r23
    452c:	50 0d       	add	r21, r0
    452e:	36 9f       	mul	r19, r22
    4530:	50 0d       	add	r21, r0
    4532:	11 24       	eor	r1, r1
    4534:	98 01       	movw	r18, r16
    4536:	6c 2d       	mov	r22, r12
    4538:	62 70       	andi	r22, 0x02	; 2
    453a:	59 f0       	breq	.+22     	; 0x4552 <Framebuffer_GFX::XY(int, int)+0x1d8>
    453c:	fe 01       	movw	r30, r28
    453e:	e3 5e       	subi	r30, 0xE3	; 227
    4540:	fe 4f       	sbci	r31, 0xFE	; 254
    4542:	60 81       	ld	r22, Z
    4544:	71 81       	ldd	r23, Z+1	; 0x01
    4546:	61 50       	subi	r22, 0x01	; 1
    4548:	71 09       	sbc	r23, r1
    454a:	fb 01       	movw	r30, r22
    454c:	e8 1b       	sub	r30, r24
    454e:	f9 0b       	sbc	r31, r25
    4550:	cf 01       	movw	r24, r30
    4552:	c0 fe       	sbrs	r12, 0
    4554:	09 c0       	rjmp	.+18     	; 0x4568 <Framebuffer_GFX::XY(int, int)+0x1ee>
    4556:	fe 01       	movw	r30, r28
    4558:	e1 5e       	subi	r30, 0xE1	; 225
    455a:	fe 4f       	sbci	r31, 0xFE	; 254
    455c:	20 81       	ld	r18, Z
    455e:	31 81       	ldd	r19, Z+1	; 0x01
    4560:	21 50       	subi	r18, 0x01	; 1
    4562:	31 09       	sbc	r19, r1
    4564:	20 1b       	sub	r18, r16
    4566:	31 0b       	sbc	r19, r17
    4568:	d2 fc       	sbrc	r13, 2
    456a:	13 c0       	rjmp	.+38     	; 0x4592 <Framebuffer_GFX::XY(int, int)+0x218>
    456c:	c3 5e       	subi	r28, 0xE3	; 227
    456e:	de 4f       	sbci	r29, 0xFE	; 254
    4570:	68 81       	ld	r22, Y
    4572:	79 81       	ldd	r23, Y+1	; 0x01
    4574:	f2 2f       	mov	r31, r18
    4576:	e3 2f       	mov	r30, r19
    4578:	9c 01       	movw	r18, r24
    457a:	8f 2f       	mov	r24, r31
    457c:	9e 2f       	mov	r25, r30
    457e:	d3 fc       	sbrc	r13, 3
    4580:	0d c0       	rjmp	.+26     	; 0x459c <Framebuffer_GFX::XY(int, int)+0x222>
    4582:	86 9f       	mul	r24, r22
    4584:	f0 01       	movw	r30, r0
    4586:	87 9f       	mul	r24, r23
    4588:	f0 0d       	add	r31, r0
    458a:	96 9f       	mul	r25, r22
    458c:	f0 0d       	add	r31, r0
    458e:	11 24       	eor	r1, r1
    4590:	11 c0       	rjmp	.+34     	; 0x45b4 <Framebuffer_GFX::XY(int, int)+0x23a>
    4592:	c1 5e       	subi	r28, 0xE1	; 225
    4594:	de 4f       	sbci	r29, 0xFE	; 254
    4596:	68 81       	ld	r22, Y
    4598:	79 81       	ldd	r23, Y+1	; 0x01
    459a:	f1 cf       	rjmp	.-30     	; 0x457e <Framebuffer_GFX::XY(int, int)+0x204>
    459c:	80 ff       	sbrs	r24, 0
    459e:	f1 cf       	rjmp	.-30     	; 0x4582 <Framebuffer_GFX::XY(int, int)+0x208>
    45a0:	01 96       	adiw	r24, 0x01	; 1
    45a2:	86 9f       	mul	r24, r22
    45a4:	f0 01       	movw	r30, r0
    45a6:	87 9f       	mul	r24, r23
    45a8:	f0 0d       	add	r31, r0
    45aa:	96 9f       	mul	r25, r22
    45ac:	f0 0d       	add	r31, r0
    45ae:	11 24       	eor	r1, r1
    45b0:	20 95       	com	r18
    45b2:	30 95       	com	r19
    45b4:	cf 01       	movw	r24, r30
    45b6:	82 0f       	add	r24, r18
    45b8:	93 1f       	adc	r25, r19
    45ba:	2b cf       	rjmp	.-426    	; 0x4412 <Framebuffer_GFX::XY(int, int)+0x98>

000045bc <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
    45bc:	9f 92       	push	r9
    45be:	af 92       	push	r10
    45c0:	bf 92       	push	r11
    45c2:	cf 92       	push	r12
    45c4:	df 92       	push	r13
    45c6:	ef 92       	push	r14
    45c8:	ff 92       	push	r15
    45ca:	0f 93       	push	r16
    45cc:	1f 93       	push	r17
    45ce:	cf 93       	push	r28
    45d0:	df 93       	push	r29
    45d2:	ec 01       	movw	r28, r24
    45d4:	77 fd       	sbrc	r23, 7
    45d6:	2b c0       	rjmp	.+86     	; 0x462e <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    45d8:	57 fd       	sbrc	r21, 7
    45da:	29 c0       	rjmp	.+82     	; 0x462e <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    45dc:	8f 81       	ldd	r24, Y+7	; 0x07
    45de:	98 85       	ldd	r25, Y+8	; 0x08
    45e0:	68 17       	cp	r22, r24
    45e2:	79 07       	cpc	r23, r25
    45e4:	24 f5       	brge	.+72     	; 0x462e <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    45e6:	89 85       	ldd	r24, Y+9	; 0x09
    45e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    45ea:	48 17       	cp	r20, r24
    45ec:	59 07       	cpc	r21, r25
    45ee:	fc f4       	brge	.+62     	; 0x462e <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    45f0:	6a 01       	movw	r12, r20
    45f2:	7b 01       	movw	r14, r22
    45f4:	fe 01       	movw	r30, r28
    45f6:	ef 5c       	subi	r30, 0xCF	; 207
    45f8:	fe 4f       	sbci	r31, 0xFE	; 254
    45fa:	80 81       	ld	r24, Z
    45fc:	88 23       	and	r24, r24
    45fe:	19 f1       	breq	.+70     	; 0x4646 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    4600:	34 97       	sbiw	r30, 0x04	; 4
    4602:	b0 80       	ld	r11, Z
    4604:	a1 80       	ldd	r10, Z+1	; 0x01
    4606:	92 80       	ldd	r9, Z+2	; 0x02
    4608:	fe 01       	movw	r30, r28
    460a:	eb 5d       	subi	r30, 0xDB	; 219
    460c:	fe 4f       	sbci	r31, 0xFE	; 254
    460e:	00 81       	ld	r16, Z
    4610:	11 81       	ldd	r17, Z+1	; 0x01
    4612:	a6 01       	movw	r20, r12
    4614:	b7 01       	movw	r22, r14
    4616:	ce 01       	movw	r24, r28
    4618:	b0 de       	rcall	.-672    	; 0x437a <Framebuffer_GFX::XY(int, int)>
    461a:	fc 01       	movw	r30, r24
    461c:	ee 0f       	add	r30, r30
    461e:	ff 1f       	adc	r31, r31
    4620:	e8 0f       	add	r30, r24
    4622:	f9 1f       	adc	r31, r25
    4624:	e0 0f       	add	r30, r16
    4626:	f1 1f       	adc	r31, r17
    4628:	90 82       	st	Z, r9
    462a:	a1 82       	std	Z+1, r10	; 0x01
    462c:	b2 82       	std	Z+2, r11	; 0x02
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	ff 90       	pop	r15
    4638:	ef 90       	pop	r14
    463a:	df 90       	pop	r13
    463c:	cf 90       	pop	r12
    463e:	bf 90       	pop	r11
    4640:	af 90       	pop	r10
    4642:	9f 90       	pop	r9
    4644:	08 95       	ret
    4646:	c9 01       	movw	r24, r18
    4648:	2e de       	rcall	.-932    	; 0x42a6 <Framebuffer_GFX::expandColor(unsigned int)>
    464a:	b6 2e       	mov	r11, r22
    464c:	a7 2e       	mov	r10, r23
    464e:	98 2e       	mov	r9, r24
    4650:	db cf       	rjmp	.-74     	; 0x4608 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

00004652 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    4652:	89 5d       	subi	r24, 0xD9	; 217
    4654:	9e 4f       	sbci	r25, 0xFE	; 254
    4656:	fc 01       	movw	r30, r24
    4658:	71 83       	std	Z+1, r23	; 0x01
    465a:	60 83       	st	Z, r22
}
    465c:	08 95       	ret

0000465e <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    465e:	da 01       	movw	r26, r20
    4660:	fc 01       	movw	r30, r24
    4662:	90 e0       	ldi	r25, 0x00	; 0
    4664:	80 e0       	ldi	r24, 0x00	; 0
    4666:	86 17       	cp	r24, r22
    4668:	97 07       	cpc	r25, r23
    466a:	6c f4       	brge	.+26     	; 0x4686 <fill_solid(CRGB*, int, CRGB const&)+0x28>
    466c:	2c 91       	ld	r18, X
    466e:	20 83       	st	Z, r18
    4670:	11 96       	adiw	r26, 0x01	; 1
    4672:	2c 91       	ld	r18, X
    4674:	11 97       	sbiw	r26, 0x01	; 1
    4676:	21 83       	std	Z+1, r18	; 0x01
    4678:	12 96       	adiw	r26, 0x02	; 2
    467a:	2c 91       	ld	r18, X
    467c:	12 97       	sbiw	r26, 0x02	; 2
    467e:	22 83       	std	Z+2, r18	; 0x02
    4680:	01 96       	adiw	r24, 0x01	; 1
    4682:	33 96       	adiw	r30, 0x03	; 3
    4684:	f0 cf       	rjmp	.-32     	; 0x4666 <fill_solid(CRGB*, int, CRGB const&)+0x8>
    4686:	08 95       	ret

00004688 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    4688:	0f 93       	push	r16
    468a:	1f 93       	push	r17
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    4692:	84 2f       	mov	r24, r20
    4694:	82 95       	swap	r24
    4696:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    4698:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    469a:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    469c:	a8 2f       	mov	r26, r24
    469e:	aa 0f       	add	r26, r26
    46a0:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    46a2:	a6 0f       	add	r26, r22
    46a4:	b7 2f       	mov	r27, r23
    46a6:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    46a8:	44 23       	and	r20, r20
    46aa:	19 f0       	breq	.+6      	; 0x46b2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    46ac:	31 e0       	ldi	r19, 0x01	; 1
    46ae:	01 2b       	or	r16, r17
    46b0:	09 f4       	brne	.+2      	; 0x46b4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    46b2:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    46b4:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    46b6:	11 96       	adiw	r26, 0x01	; 1
    46b8:	5c 91       	ld	r21, X
    46ba:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    46bc:	12 96       	adiw	r26, 0x02	; 2
    46be:	9c 91       	ld	r25, X
    46c0:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    46c2:	33 23       	and	r19, r19
    46c4:	09 f4       	brne	.+2      	; 0x46c8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    46c6:	2a c0       	rjmp	.+84     	; 0x471c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    46c8:	8f 30       	cpi	r24, 0x0F	; 15
    46ca:	11 f0       	breq	.+4      	; 0x46d0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    46cc:	ed 01       	movw	r28, r26
    46ce:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    46d0:	42 95       	swap	r20
    46d2:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    46d4:	74 2f       	mov	r23, r20
    46d6:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    46d8:	67 9f       	mul	r22, r23
    46da:	06 0e       	add	r0, r22
    46dc:	60 e0       	ldi	r22, 0x00	; 0
    46de:	61 1d       	adc	r22, r1
    46e0:	38 81       	ld	r19, Y
    46e2:	34 9f       	mul	r19, r20
    46e4:	03 0e       	add	r0, r19
    46e6:	30 e0       	ldi	r19, 0x00	; 0
    46e8:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    46ea:	63 0f       	add	r22, r19
    46ec:	57 9f       	mul	r21, r23
    46ee:	05 0e       	add	r0, r21
    46f0:	50 e0       	ldi	r21, 0x00	; 0
    46f2:	51 1d       	adc	r21, r1
    46f4:	39 81       	ldd	r19, Y+1	; 0x01
    46f6:	34 9f       	mul	r19, r20
    46f8:	03 0e       	add	r0, r19
    46fa:	30 e0       	ldi	r19, 0x00	; 0
    46fc:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    46fe:	53 0f       	add	r21, r19
    4700:	39 2f       	mov	r19, r25
    4702:	37 9f       	mul	r19, r23
    4704:	03 0e       	add	r0, r19
    4706:	30 e0       	ldi	r19, 0x00	; 0
    4708:	31 1d       	adc	r19, r1
    470a:	9a 81       	ldd	r25, Y+2	; 0x02
    470c:	79 2f       	mov	r23, r25
    470e:	74 9f       	mul	r23, r20
    4710:	07 0e       	add	r0, r23
    4712:	70 e0       	ldi	r23, 0x00	; 0
    4714:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4716:	93 2f       	mov	r25, r19
    4718:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    471a:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    471c:	2f 3f       	cpi	r18, 0xFF	; 255
    471e:	c1 f0       	breq	.+48     	; 0x4750 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    4720:	22 23       	and	r18, r18
    4722:	f9 f0       	breq	.+62     	; 0x4762 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    4724:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    4726:	66 23       	and	r22, r22
    4728:	21 f0       	breq	.+8      	; 0x4732 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    472a:	62 9f       	mul	r22, r18
    472c:	06 0e       	add	r0, r22
    472e:	60 e0       	ldi	r22, 0x00	; 0
    4730:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    4732:	55 23       	and	r21, r21
    4734:	21 f0       	breq	.+8      	; 0x473e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    4736:	52 9f       	mul	r21, r18
    4738:	05 0e       	add	r0, r21
    473a:	50 e0       	ldi	r21, 0x00	; 0
    473c:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    473e:	99 23       	and	r25, r25
    4740:	31 f0       	breq	.+12     	; 0x474e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    4742:	39 2f       	mov	r19, r25
    4744:	32 9f       	mul	r19, r18
    4746:	03 0e       	add	r0, r19
    4748:	30 e0       	ldi	r19, 0x00	; 0
    474a:	31 1d       	adc	r19, r1
    474c:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    474e:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    4750:	60 83       	st	Z, r22
    4752:	51 83       	std	Z+1, r21	; 0x01
    4754:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4756:	cf 01       	movw	r24, r30
    4758:	df 91       	pop	r29
    475a:	cf 91       	pop	r28
    475c:	1f 91       	pop	r17
    475e:	0f 91       	pop	r16
    4760:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    4762:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    4764:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    4766:	60 e0       	ldi	r22, 0x00	; 0
    4768:	f3 cf       	rjmp	.-26     	; 0x4750 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

0000476a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    476a:	7f 92       	push	r7
    476c:	8f 92       	push	r8
    476e:	9f 92       	push	r9
    4770:	af 92       	push	r10
    4772:	bf 92       	push	r11
    4774:	cf 92       	push	r12
    4776:	df 92       	push	r13
    4778:	ef 92       	push	r14
    477a:	ff 92       	push	r15
    477c:	0f 93       	push	r16
    477e:	1f 93       	push	r17
    4780:	cf 93       	push	r28
    4782:	df 93       	push	r29
    4784:	fc 01       	movw	r30, r24
    4786:	69 01       	movw	r12, r18
    4788:	10 82       	st	Z, r1
    478a:	11 82       	std	Z+1, r1	; 0x01
    478c:	12 82       	std	Z+2, r1	; 0x02
    478e:	66 23       	and	r22, r22
    4790:	b9 f1       	breq	.+110    	; 0x4800 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    4792:	8a 01       	movw	r16, r20
    4794:	c1 e0       	ldi	r28, 0x01	; 1
    4796:	d0 e0       	ldi	r29, 0x00	; 0
    4798:	86 2e       	mov	r8, r22
    479a:	91 2c       	mov	r9, r1
    479c:	b1 2c       	mov	r11, r1
    479e:	a1 2c       	mov	r10, r1
    47a0:	d8 01       	movw	r26, r16
    47a2:	2d 91       	ld	r18, X+
    47a4:	8d 01       	movw	r16, r26
    47a6:	22 23       	and	r18, r18
    47a8:	39 f1       	breq	.+78     	; 0x47f8 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    47aa:	7e 01       	movw	r14, r28
    47ac:	b1 e0       	ldi	r27, 0x01	; 1
    47ae:	eb 1a       	sub	r14, r27
    47b0:	f1 08       	sbc	r15, r1
    47b2:	d6 01       	movw	r26, r12
    47b4:	ae 0d       	add	r26, r14
    47b6:	bf 1d       	adc	r27, r15
    47b8:	7c 90       	ld	r7, X
    47ba:	77 20       	and	r7, r7
    47bc:	e9 f0       	breq	.+58     	; 0x47f8 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    47be:	30 e0       	ldi	r19, 0x00	; 0
    47c0:	50 e0       	ldi	r21, 0x00	; 0
    47c2:	40 e0       	ldi	r20, 0x00	; 0
    47c4:	2f 5f       	subi	r18, 0xFF	; 255
    47c6:	3f 4f       	sbci	r19, 0xFF	; 255
    47c8:	4f 4f       	sbci	r20, 0xFF	; 255
    47ca:	5f 4f       	sbci	r21, 0xFF	; 255
    47cc:	c5 01       	movw	r24, r10
    47ce:	b4 01       	movw	r22, r8
    47d0:	0e 94 50 33 	call	0x66a0	; 0x66a0 <__mulsi3>
    47d4:	9b 01       	movw	r18, r22
    47d6:	ac 01       	movw	r20, r24
    47d8:	87 2d       	mov	r24, r7
    47da:	90 e0       	ldi	r25, 0x00	; 0
    47dc:	b0 e0       	ldi	r27, 0x00	; 0
    47de:	a0 e0       	ldi	r26, 0x00	; 0
    47e0:	bc 01       	movw	r22, r24
    47e2:	cd 01       	movw	r24, r26
    47e4:	6f 5f       	subi	r22, 0xFF	; 255
    47e6:	7f 4f       	sbci	r23, 0xFF	; 255
    47e8:	8f 4f       	sbci	r24, 0xFF	; 255
    47ea:	9f 4f       	sbci	r25, 0xFF	; 255
    47ec:	0e 94 50 33 	call	0x66a0	; 0x66a0 <__mulsi3>
    47f0:	df 01       	movw	r26, r30
    47f2:	ae 0d       	add	r26, r14
    47f4:	bf 1d       	adc	r27, r15
    47f6:	8c 93       	st	X, r24
    47f8:	21 96       	adiw	r28, 0x01	; 1
    47fa:	c4 30       	cpi	r28, 0x04	; 4
    47fc:	d1 05       	cpc	r29, r1
    47fe:	81 f6       	brne	.-96     	; 0x47a0 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    4800:	cf 01       	movw	r24, r30
    4802:	df 91       	pop	r29
    4804:	cf 91       	pop	r28
    4806:	1f 91       	pop	r17
    4808:	0f 91       	pop	r16
    480a:	ff 90       	pop	r15
    480c:	ef 90       	pop	r14
    480e:	df 90       	pop	r13
    4810:	cf 90       	pop	r12
    4812:	bf 90       	pop	r11
    4814:	af 90       	pop	r10
    4816:	9f 90       	pop	r9
    4818:	8f 90       	pop	r8
    481a:	7f 90       	pop	r7
    481c:	08 95       	ret

0000481e <CFastLED::CFastLED()>:
    481e:	fc 01       	movw	r30, r24
    4820:	8f ef       	ldi	r24, 0xFF	; 255
    4822:	80 83       	st	Z, r24
    4824:	12 82       	std	Z+2, r1	; 0x02
    4826:	11 82       	std	Z+1, r1	; 0x01
    4828:	14 86       	std	Z+12, r1	; 0x0c
    482a:	13 86       	std	Z+11, r1	; 0x0b
    482c:	8f ef       	ldi	r24, 0xFF	; 255
    482e:	9f ef       	ldi	r25, 0xFF	; 255
    4830:	dc 01       	movw	r26, r24
    4832:	87 83       	std	Z+7, r24	; 0x07
    4834:	90 87       	std	Z+8, r25	; 0x08
    4836:	a1 87       	std	Z+9, r26	; 0x09
    4838:	b2 87       	std	Z+10, r27	; 0x0a
    483a:	08 95       	ret

0000483c <CFastLED::clearData()>:
    483c:	cf 93       	push	r28
    483e:	df 93       	push	r29
    4840:	c0 91 7b 0e 	lds	r28, 0x0E7B	; 0x800e7b <CLEDController::m_pHead>
    4844:	d0 91 7c 0e 	lds	r29, 0x0E7C	; 0x800e7c <CLEDController::m_pHead+0x1>
    4848:	20 97       	sbiw	r28, 0x00	; 0
    484a:	89 f0       	breq	.+34     	; 0x486e <CFastLED::clearData()+0x32>
    484c:	8a 81       	ldd	r24, Y+2	; 0x02
    484e:	9b 81       	ldd	r25, Y+3	; 0x03
    4850:	00 97       	sbiw	r24, 0x00	; 0
    4852:	49 f0       	breq	.+18     	; 0x4866 <CFastLED::clearData()+0x2a>
    4854:	2d 85       	ldd	r18, Y+13	; 0x0d
    4856:	3e 85       	ldd	r19, Y+14	; 0x0e
    4858:	a9 01       	movw	r20, r18
    485a:	44 0f       	add	r20, r20
    485c:	55 1f       	adc	r21, r21
    485e:	42 0f       	add	r20, r18
    4860:	53 1f       	adc	r21, r19
    4862:	60 e0       	ldi	r22, 0x00	; 0
    4864:	1d d2       	rcall	.+1082   	; 0x4ca0 <memset8>
    4866:	0c 80       	ldd	r0, Y+4	; 0x04
    4868:	dd 81       	ldd	r29, Y+5	; 0x05
    486a:	c0 2d       	mov	r28, r0
    486c:	ed cf       	rjmp	.-38     	; 0x4848 <CFastLED::clearData()+0xc>
    486e:	df 91       	pop	r29
    4870:	cf 91       	pop	r28
    4872:	08 95       	ret

00004874 <CFastLED::countFPS(int)>:
    4874:	cf 92       	push	r12
    4876:	df 92       	push	r13
    4878:	ef 92       	push	r14
    487a:	ff 92       	push	r15
    487c:	cf 93       	push	r28
    487e:	df 93       	push	r29
    4880:	ec 01       	movw	r28, r24
    4882:	20 91 73 0e 	lds	r18, 0x0E73	; 0x800e73 <CFastLED::countFPS(int)::br>
    4886:	30 91 74 0e 	lds	r19, 0x0E74	; 0x800e74 <CFastLED::countFPS(int)::br+0x1>
    488a:	c9 01       	movw	r24, r18
    488c:	01 96       	adiw	r24, 0x01	; 1
    488e:	90 93 74 0e 	sts	0x0E74, r25	; 0x800e74 <CFastLED::countFPS(int)::br+0x1>
    4892:	80 93 73 0e 	sts	0x0E73, r24	; 0x800e73 <CFastLED::countFPS(int)::br>
    4896:	26 17       	cp	r18, r22
    4898:	37 07       	cpc	r19, r23
    489a:	0c f4       	brge	.+2      	; 0x489e <CFastLED::countFPS(int)+0x2a>
    489c:	3f c0       	rjmp	.+126    	; 0x491c <CFastLED::countFPS(int)+0xa8>
    489e:	0f b6       	in	r0, 0x3f	; 63
    48a0:	f8 94       	cli
    48a2:	20 91 8d 0e 	lds	r18, 0x0E8D	; 0x800e8d <timer0_millis_count>
    48a6:	30 91 8e 0e 	lds	r19, 0x0E8E	; 0x800e8e <timer0_millis_count+0x1>
    48aa:	40 91 8f 0e 	lds	r20, 0x0E8F	; 0x800e8f <timer0_millis_count+0x2>
    48ae:	50 91 90 0e 	lds	r21, 0x0E90	; 0x800e90 <timer0_millis_count+0x3>
    48b2:	0f be       	out	0x3f, r0	; 63
    48b4:	e8 ee       	ldi	r30, 0xE8	; 232
    48b6:	f3 e0       	ldi	r31, 0x03	; 3
    48b8:	8e 9f       	mul	r24, r30
    48ba:	b0 01       	movw	r22, r0
    48bc:	8f 9f       	mul	r24, r31
    48be:	70 0d       	add	r23, r0
    48c0:	9e 9f       	mul	r25, r30
    48c2:	70 0d       	add	r23, r0
    48c4:	11 24       	eor	r1, r1
    48c6:	07 2e       	mov	r0, r23
    48c8:	00 0c       	add	r0, r0
    48ca:	88 0b       	sbc	r24, r24
    48cc:	99 0b       	sbc	r25, r25
    48ce:	c0 90 6f 0e 	lds	r12, 0x0E6F	; 0x800e6f <CFastLED::countFPS(int)::lastframe>
    48d2:	d0 90 70 0e 	lds	r13, 0x0E70	; 0x800e70 <CFastLED::countFPS(int)::lastframe+0x1>
    48d6:	e0 90 71 0e 	lds	r14, 0x0E71	; 0x800e71 <CFastLED::countFPS(int)::lastframe+0x2>
    48da:	f0 90 72 0e 	lds	r15, 0x0E72	; 0x800e72 <CFastLED::countFPS(int)::lastframe+0x3>
    48de:	2c 19       	sub	r18, r12
    48e0:	3d 09       	sbc	r19, r13
    48e2:	4e 09       	sbc	r20, r14
    48e4:	5f 09       	sbc	r21, r15
    48e6:	0e 94 86 33 	call	0x670c	; 0x670c <__udivmodsi4>
    48ea:	3a 83       	std	Y+2, r19	; 0x02
    48ec:	29 83       	std	Y+1, r18	; 0x01
    48ee:	10 92 74 0e 	sts	0x0E74, r1	; 0x800e74 <CFastLED::countFPS(int)::br+0x1>
    48f2:	10 92 73 0e 	sts	0x0E73, r1	; 0x800e73 <CFastLED::countFPS(int)::br>
    48f6:	0f b6       	in	r0, 0x3f	; 63
    48f8:	f8 94       	cli
    48fa:	80 91 8d 0e 	lds	r24, 0x0E8D	; 0x800e8d <timer0_millis_count>
    48fe:	90 91 8e 0e 	lds	r25, 0x0E8E	; 0x800e8e <timer0_millis_count+0x1>
    4902:	a0 91 8f 0e 	lds	r26, 0x0E8F	; 0x800e8f <timer0_millis_count+0x2>
    4906:	b0 91 90 0e 	lds	r27, 0x0E90	; 0x800e90 <timer0_millis_count+0x3>
    490a:	0f be       	out	0x3f, r0	; 63
    490c:	80 93 6f 0e 	sts	0x0E6F, r24	; 0x800e6f <CFastLED::countFPS(int)::lastframe>
    4910:	90 93 70 0e 	sts	0x0E70, r25	; 0x800e70 <CFastLED::countFPS(int)::lastframe+0x1>
    4914:	a0 93 71 0e 	sts	0x0E71, r26	; 0x800e71 <CFastLED::countFPS(int)::lastframe+0x2>
    4918:	b0 93 72 0e 	sts	0x0E72, r27	; 0x800e72 <CFastLED::countFPS(int)::lastframe+0x3>
    491c:	df 91       	pop	r29
    491e:	cf 91       	pop	r28
    4920:	ff 90       	pop	r15
    4922:	ef 90       	pop	r14
    4924:	df 90       	pop	r13
    4926:	cf 90       	pop	r12
    4928:	08 95       	ret

0000492a <CFastLED::show(unsigned char)>:
    492a:	8f 92       	push	r8
    492c:	9f 92       	push	r9
    492e:	af 92       	push	r10
    4930:	bf 92       	push	r11
    4932:	cf 92       	push	r12
    4934:	df 92       	push	r13
    4936:	ef 92       	push	r14
    4938:	ff 92       	push	r15
    493a:	0f 93       	push	r16
    493c:	1f 93       	push	r17
    493e:	cf 93       	push	r28
    4940:	df 93       	push	r29
    4942:	00 d0       	rcall	.+0      	; 0x4944 <CFastLED::show(unsigned char)+0x1a>
    4944:	1f 92       	push	r1
    4946:	cd b7       	in	r28, 0x3d	; 61
    4948:	de b7       	in	r29, 0x3e	; 62
    494a:	7c 01       	movw	r14, r24
    494c:	d6 2e       	mov	r13, r22
    494e:	d7 01       	movw	r26, r14
    4950:	13 96       	adiw	r26, 0x03	; 3
    4952:	0d 91       	ld	r16, X+
    4954:	1d 91       	ld	r17, X+
    4956:	2d 91       	ld	r18, X+
    4958:	3c 91       	ld	r19, X
    495a:	16 97       	sbiw	r26, 0x06	; 6
    495c:	01 15       	cp	r16, r1
    495e:	11 05       	cpc	r17, r1
    4960:	21 05       	cpc	r18, r1
    4962:	31 05       	cpc	r19, r1
    4964:	91 f0       	breq	.+36     	; 0x498a <CFastLED::show(unsigned char)+0x60>
    4966:	a6 d5       	rcall	.+2892   	; 0x54b4 <_micros>
    4968:	80 90 75 0e 	lds	r8, 0x0E75	; 0x800e75 <lastshow>
    496c:	90 90 76 0e 	lds	r9, 0x0E76	; 0x800e76 <lastshow+0x1>
    4970:	a0 90 77 0e 	lds	r10, 0x0E77	; 0x800e77 <lastshow+0x2>
    4974:	b0 90 78 0e 	lds	r11, 0x0E78	; 0x800e78 <lastshow+0x3>
    4978:	68 19       	sub	r22, r8
    497a:	79 09       	sbc	r23, r9
    497c:	8a 09       	sbc	r24, r10
    497e:	9b 09       	sbc	r25, r11
    4980:	60 17       	cp	r22, r16
    4982:	71 07       	cpc	r23, r17
    4984:	82 07       	cpc	r24, r18
    4986:	93 07       	cpc	r25, r19
    4988:	10 f3       	brcs	.-60     	; 0x494e <CFastLED::show(unsigned char)+0x24>
    498a:	94 d5       	rcall	.+2856   	; 0x54b4 <_micros>
    498c:	60 93 75 0e 	sts	0x0E75, r22	; 0x800e75 <lastshow>
    4990:	70 93 76 0e 	sts	0x0E76, r23	; 0x800e76 <lastshow+0x1>
    4994:	80 93 77 0e 	sts	0x0E77, r24	; 0x800e77 <lastshow+0x2>
    4998:	90 93 78 0e 	sts	0x0E78, r25	; 0x800e78 <lastshow+0x3>
    499c:	d7 01       	movw	r26, r14
    499e:	1b 96       	adiw	r26, 0x0b	; 11
    49a0:	ed 91       	ld	r30, X+
    49a2:	fc 91       	ld	r31, X
    49a4:	1c 97       	sbiw	r26, 0x0c	; 12
    49a6:	30 97       	sbiw	r30, 0x00	; 0
    49a8:	49 f0       	breq	.+18     	; 0x49bc <CFastLED::show(unsigned char)+0x92>
    49aa:	17 96       	adiw	r26, 0x07	; 7
    49ac:	4d 91       	ld	r20, X+
    49ae:	5d 91       	ld	r21, X+
    49b0:	6d 91       	ld	r22, X+
    49b2:	7c 91       	ld	r23, X
    49b4:	1a 97       	sbiw	r26, 0x0a	; 10
    49b6:	8d 2d       	mov	r24, r13
    49b8:	09 95       	icall
    49ba:	d8 2e       	mov	r13, r24
    49bc:	00 91 7b 0e 	lds	r16, 0x0E7B	; 0x800e7b <CLEDController::m_pHead>
    49c0:	10 91 7c 0e 	lds	r17, 0x0E7C	; 0x800e7c <CLEDController::m_pHead+0x1>
    49c4:	01 15       	cp	r16, r1
    49c6:	11 05       	cpc	r17, r1
    49c8:	61 f1       	breq	.+88     	; 0x4a22 <CFastLED::show(unsigned char)+0xf8>
    49ca:	f8 01       	movw	r30, r16
    49cc:	c4 84       	ldd	r12, Z+12	; 0x0c
    49ce:	d7 01       	movw	r26, r14
    49d0:	11 96       	adiw	r26, 0x01	; 1
    49d2:	8d 91       	ld	r24, X+
    49d4:	9c 91       	ld	r25, X
    49d6:	84 36       	cpi	r24, 0x64	; 100
    49d8:	91 05       	cpc	r25, r1
    49da:	08 f4       	brcc	.+2      	; 0x49de <CFastLED::show(unsigned char)+0xb4>
    49dc:	14 86       	std	Z+12, r1	; 0x0c
    49de:	d8 01       	movw	r26, r16
    49e0:	ed 91       	ld	r30, X+
    49e2:	fc 91       	ld	r31, X
    49e4:	a2 80       	ldd	r10, Z+2	; 0x02
    49e6:	b3 80       	ldd	r11, Z+3	; 0x03
    49e8:	98 01       	movw	r18, r16
    49ea:	27 5f       	subi	r18, 0xF7	; 247
    49ec:	3f 4f       	sbci	r19, 0xFF	; 255
    49ee:	a8 01       	movw	r20, r16
    49f0:	4a 5f       	subi	r20, 0xFA	; 250
    49f2:	5f 4f       	sbci	r21, 0xFF	; 255
    49f4:	6d 2d       	mov	r22, r13
    49f6:	ce 01       	movw	r24, r28
    49f8:	01 96       	adiw	r24, 0x01	; 1
    49fa:	b7 de       	rcall	.-658    	; 0x476a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    49fc:	f8 01       	movw	r30, r16
    49fe:	45 85       	ldd	r20, Z+13	; 0x0d
    4a00:	56 85       	ldd	r21, Z+14	; 0x0e
    4a02:	62 81       	ldd	r22, Z+2	; 0x02
    4a04:	73 81       	ldd	r23, Z+3	; 0x03
    4a06:	9e 01       	movw	r18, r28
    4a08:	2f 5f       	subi	r18, 0xFF	; 255
    4a0a:	3f 4f       	sbci	r19, 0xFF	; 255
    4a0c:	c8 01       	movw	r24, r16
    4a0e:	f5 01       	movw	r30, r10
    4a10:	09 95       	icall
    4a12:	d8 01       	movw	r26, r16
    4a14:	1c 96       	adiw	r26, 0x0c	; 12
    4a16:	cc 92       	st	X, r12
    4a18:	1c 97       	sbiw	r26, 0x0c	; 12
    4a1a:	14 96       	adiw	r26, 0x04	; 4
    4a1c:	0d 91       	ld	r16, X+
    4a1e:	1c 91       	ld	r17, X
    4a20:	d1 cf       	rjmp	.-94     	; 0x49c4 <CFastLED::show(unsigned char)+0x9a>
    4a22:	69 e1       	ldi	r22, 0x19	; 25
    4a24:	70 e0       	ldi	r23, 0x00	; 0
    4a26:	c7 01       	movw	r24, r14
    4a28:	25 df       	rcall	.-438    	; 0x4874 <CFastLED::countFPS(int)>
    4a2a:	0f 90       	pop	r0
    4a2c:	0f 90       	pop	r0
    4a2e:	0f 90       	pop	r0
    4a30:	df 91       	pop	r29
    4a32:	cf 91       	pop	r28
    4a34:	1f 91       	pop	r17
    4a36:	0f 91       	pop	r16
    4a38:	ff 90       	pop	r15
    4a3a:	ef 90       	pop	r14
    4a3c:	df 90       	pop	r13
    4a3e:	cf 90       	pop	r12
    4a40:	bf 90       	pop	r11
    4a42:	af 90       	pop	r10
    4a44:	9f 90       	pop	r9
    4a46:	8f 90       	pop	r8
    4a48:	08 95       	ret

00004a4a <CFastLED::showColor(CRGB const&, unsigned char)>:
    4a4a:	4f 92       	push	r4
    4a4c:	5f 92       	push	r5
    4a4e:	6f 92       	push	r6
    4a50:	7f 92       	push	r7
    4a52:	8f 92       	push	r8
    4a54:	9f 92       	push	r9
    4a56:	af 92       	push	r10
    4a58:	bf 92       	push	r11
    4a5a:	cf 92       	push	r12
    4a5c:	df 92       	push	r13
    4a5e:	ef 92       	push	r14
    4a60:	ff 92       	push	r15
    4a62:	0f 93       	push	r16
    4a64:	1f 93       	push	r17
    4a66:	cf 93       	push	r28
    4a68:	df 93       	push	r29
    4a6a:	00 d0       	rcall	.+0      	; 0x4a6c <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    4a6c:	1f 92       	push	r1
    4a6e:	cd b7       	in	r28, 0x3d	; 61
    4a70:	de b7       	in	r29, 0x3e	; 62
    4a72:	7c 01       	movw	r14, r24
    4a74:	5b 01       	movw	r10, r22
    4a76:	d4 2e       	mov	r13, r20
    4a78:	d7 01       	movw	r26, r14
    4a7a:	13 96       	adiw	r26, 0x03	; 3
    4a7c:	0d 91       	ld	r16, X+
    4a7e:	1d 91       	ld	r17, X+
    4a80:	2d 91       	ld	r18, X+
    4a82:	3c 91       	ld	r19, X
    4a84:	16 97       	sbiw	r26, 0x06	; 6
    4a86:	01 15       	cp	r16, r1
    4a88:	11 05       	cpc	r17, r1
    4a8a:	21 05       	cpc	r18, r1
    4a8c:	31 05       	cpc	r19, r1
    4a8e:	91 f0       	breq	.+36     	; 0x4ab4 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    4a90:	11 d5       	rcall	.+2594   	; 0x54b4 <_micros>
    4a92:	40 90 75 0e 	lds	r4, 0x0E75	; 0x800e75 <lastshow>
    4a96:	50 90 76 0e 	lds	r5, 0x0E76	; 0x800e76 <lastshow+0x1>
    4a9a:	60 90 77 0e 	lds	r6, 0x0E77	; 0x800e77 <lastshow+0x2>
    4a9e:	70 90 78 0e 	lds	r7, 0x0E78	; 0x800e78 <lastshow+0x3>
    4aa2:	64 19       	sub	r22, r4
    4aa4:	75 09       	sbc	r23, r5
    4aa6:	86 09       	sbc	r24, r6
    4aa8:	97 09       	sbc	r25, r7
    4aaa:	60 17       	cp	r22, r16
    4aac:	71 07       	cpc	r23, r17
    4aae:	82 07       	cpc	r24, r18
    4ab0:	93 07       	cpc	r25, r19
    4ab2:	10 f3       	brcs	.-60     	; 0x4a78 <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    4ab4:	ff d4       	rcall	.+2558   	; 0x54b4 <_micros>
    4ab6:	60 93 75 0e 	sts	0x0E75, r22	; 0x800e75 <lastshow>
    4aba:	70 93 76 0e 	sts	0x0E76, r23	; 0x800e76 <lastshow+0x1>
    4abe:	80 93 77 0e 	sts	0x0E77, r24	; 0x800e77 <lastshow+0x2>
    4ac2:	90 93 78 0e 	sts	0x0E78, r25	; 0x800e78 <lastshow+0x3>
    4ac6:	d7 01       	movw	r26, r14
    4ac8:	1b 96       	adiw	r26, 0x0b	; 11
    4aca:	ed 91       	ld	r30, X+
    4acc:	fc 91       	ld	r31, X
    4ace:	1c 97       	sbiw	r26, 0x0c	; 12
    4ad0:	30 97       	sbiw	r30, 0x00	; 0
    4ad2:	49 f0       	breq	.+18     	; 0x4ae6 <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    4ad4:	17 96       	adiw	r26, 0x07	; 7
    4ad6:	4d 91       	ld	r20, X+
    4ad8:	5d 91       	ld	r21, X+
    4ada:	6d 91       	ld	r22, X+
    4adc:	7c 91       	ld	r23, X
    4ade:	1a 97       	sbiw	r26, 0x0a	; 10
    4ae0:	8d 2d       	mov	r24, r13
    4ae2:	09 95       	icall
    4ae4:	d8 2e       	mov	r13, r24
    4ae6:	00 91 7b 0e 	lds	r16, 0x0E7B	; 0x800e7b <CLEDController::m_pHead>
    4aea:	10 91 7c 0e 	lds	r17, 0x0E7C	; 0x800e7c <CLEDController::m_pHead+0x1>
    4aee:	01 15       	cp	r16, r1
    4af0:	11 05       	cpc	r17, r1
    4af2:	59 f1       	breq	.+86     	; 0x4b4a <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    4af4:	f8 01       	movw	r30, r16
    4af6:	c4 84       	ldd	r12, Z+12	; 0x0c
    4af8:	d7 01       	movw	r26, r14
    4afa:	11 96       	adiw	r26, 0x01	; 1
    4afc:	8d 91       	ld	r24, X+
    4afe:	9c 91       	ld	r25, X
    4b00:	84 36       	cpi	r24, 0x64	; 100
    4b02:	91 05       	cpc	r25, r1
    4b04:	08 f4       	brcc	.+2      	; 0x4b08 <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    4b06:	14 86       	std	Z+12, r1	; 0x0c
    4b08:	d8 01       	movw	r26, r16
    4b0a:	ed 91       	ld	r30, X+
    4b0c:	fc 91       	ld	r31, X
    4b0e:	80 80       	ld	r8, Z
    4b10:	91 80       	ldd	r9, Z+1	; 0x01
    4b12:	98 01       	movw	r18, r16
    4b14:	27 5f       	subi	r18, 0xF7	; 247
    4b16:	3f 4f       	sbci	r19, 0xFF	; 255
    4b18:	a8 01       	movw	r20, r16
    4b1a:	4a 5f       	subi	r20, 0xFA	; 250
    4b1c:	5f 4f       	sbci	r21, 0xFF	; 255
    4b1e:	6d 2d       	mov	r22, r13
    4b20:	ce 01       	movw	r24, r28
    4b22:	01 96       	adiw	r24, 0x01	; 1
    4b24:	22 de       	rcall	.-956    	; 0x476a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    4b26:	f8 01       	movw	r30, r16
    4b28:	45 85       	ldd	r20, Z+13	; 0x0d
    4b2a:	56 85       	ldd	r21, Z+14	; 0x0e
    4b2c:	9e 01       	movw	r18, r28
    4b2e:	2f 5f       	subi	r18, 0xFF	; 255
    4b30:	3f 4f       	sbci	r19, 0xFF	; 255
    4b32:	b5 01       	movw	r22, r10
    4b34:	c8 01       	movw	r24, r16
    4b36:	f4 01       	movw	r30, r8
    4b38:	09 95       	icall
    4b3a:	d8 01       	movw	r26, r16
    4b3c:	1c 96       	adiw	r26, 0x0c	; 12
    4b3e:	cc 92       	st	X, r12
    4b40:	1c 97       	sbiw	r26, 0x0c	; 12
    4b42:	14 96       	adiw	r26, 0x04	; 4
    4b44:	0d 91       	ld	r16, X+
    4b46:	1c 91       	ld	r17, X
    4b48:	d2 cf       	rjmp	.-92     	; 0x4aee <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    4b4a:	69 e1       	ldi	r22, 0x19	; 25
    4b4c:	70 e0       	ldi	r23, 0x00	; 0
    4b4e:	c7 01       	movw	r24, r14
    4b50:	91 de       	rcall	.-734    	; 0x4874 <CFastLED::countFPS(int)>
    4b52:	0f 90       	pop	r0
    4b54:	0f 90       	pop	r0
    4b56:	0f 90       	pop	r0
    4b58:	df 91       	pop	r29
    4b5a:	cf 91       	pop	r28
    4b5c:	1f 91       	pop	r17
    4b5e:	0f 91       	pop	r16
    4b60:	ff 90       	pop	r15
    4b62:	ef 90       	pop	r14
    4b64:	df 90       	pop	r13
    4b66:	cf 90       	pop	r12
    4b68:	bf 90       	pop	r11
    4b6a:	af 90       	pop	r10
    4b6c:	9f 90       	pop	r9
    4b6e:	8f 90       	pop	r8
    4b70:	7f 90       	pop	r7
    4b72:	6f 90       	pop	r6
    4b74:	5f 90       	pop	r5
    4b76:	4f 90       	pop	r4
    4b78:	08 95       	ret

00004b7a <CFastLED::clear(bool)>:
    4b7a:	0f 93       	push	r16
    4b7c:	1f 93       	push	r17
    4b7e:	cf 93       	push	r28
    4b80:	df 93       	push	r29
    4b82:	00 d0       	rcall	.+0      	; 0x4b84 <CFastLED::clear(bool)+0xa>
    4b84:	1f 92       	push	r1
    4b86:	cd b7       	in	r28, 0x3d	; 61
    4b88:	de b7       	in	r29, 0x3e	; 62
    4b8a:	8c 01       	movw	r16, r24
    4b8c:	66 23       	and	r22, r22
    4b8e:	41 f0       	breq	.+16     	; 0x4ba0 <CFastLED::clear(bool)+0x26>
    4b90:	19 82       	std	Y+1, r1	; 0x01
    4b92:	1a 82       	std	Y+2, r1	; 0x02
    4b94:	1b 82       	std	Y+3, r1	; 0x03
    4b96:	40 e0       	ldi	r20, 0x00	; 0
    4b98:	be 01       	movw	r22, r28
    4b9a:	6f 5f       	subi	r22, 0xFF	; 255
    4b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    4b9e:	55 df       	rcall	.-342    	; 0x4a4a <CFastLED::showColor(CRGB const&, unsigned char)>
    4ba0:	c8 01       	movw	r24, r16
    4ba2:	4c de       	rcall	.-872    	; 0x483c <CFastLED::clearData()>
    4ba4:	0f 90       	pop	r0
    4ba6:	0f 90       	pop	r0
    4ba8:	0f 90       	pop	r0
    4baa:	df 91       	pop	r29
    4bac:	cf 91       	pop	r28
    4bae:	1f 91       	pop	r17
    4bb0:	0f 91       	pop	r16
    4bb2:	08 95       	ret

00004bb4 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    4bb4:	cf 93       	push	r28
    4bb6:	df 93       	push	r29
    4bb8:	ec 01       	movw	r28, r24
    4bba:	44 23       	and	r20, r20
    4bbc:	f1 f0       	breq	.+60     	; 0x4bfa <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    4bbe:	61 15       	cp	r22, r1
    4bc0:	71 05       	cpc	r23, r1
    4bc2:	c1 f0       	breq	.+48     	; 0x4bf4 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    4bc4:	9b 01       	movw	r18, r22
    4bc6:	50 e0       	ldi	r21, 0x00	; 0
    4bc8:	40 e0       	ldi	r20, 0x00	; 0
    4bca:	60 e4       	ldi	r22, 0x40	; 64
    4bcc:	72 e4       	ldi	r23, 0x42	; 66
    4bce:	8f e0       	ldi	r24, 0x0F	; 15
    4bd0:	90 e0       	ldi	r25, 0x00	; 0
    4bd2:	0e 94 a8 33 	call	0x6750	; 0x6750 <__divmodsi4>
    4bd6:	8b 81       	ldd	r24, Y+3	; 0x03
    4bd8:	9c 81       	ldd	r25, Y+4	; 0x04
    4bda:	ad 81       	ldd	r26, Y+5	; 0x05
    4bdc:	be 81       	ldd	r27, Y+6	; 0x06
    4bde:	82 17       	cp	r24, r18
    4be0:	93 07       	cpc	r25, r19
    4be2:	a4 07       	cpc	r26, r20
    4be4:	b5 07       	cpc	r27, r21
    4be6:	10 f4       	brcc	.+4      	; 0x4bec <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    4be8:	da 01       	movw	r26, r20
    4bea:	c9 01       	movw	r24, r18
    4bec:	8b 83       	std	Y+3, r24	; 0x03
    4bee:	9c 83       	std	Y+4, r25	; 0x04
    4bf0:	ad 83       	std	Y+5, r26	; 0x05
    4bf2:	be 83       	std	Y+6, r27	; 0x06
    4bf4:	df 91       	pop	r29
    4bf6:	cf 91       	pop	r28
    4bf8:	08 95       	ret
    4bfa:	61 15       	cp	r22, r1
    4bfc:	71 05       	cpc	r23, r1
    4bfe:	71 f0       	breq	.+28     	; 0x4c1c <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    4c00:	9b 01       	movw	r18, r22
    4c02:	50 e0       	ldi	r21, 0x00	; 0
    4c04:	40 e0       	ldi	r20, 0x00	; 0
    4c06:	60 e4       	ldi	r22, 0x40	; 64
    4c08:	72 e4       	ldi	r23, 0x42	; 66
    4c0a:	8f e0       	ldi	r24, 0x0F	; 15
    4c0c:	90 e0       	ldi	r25, 0x00	; 0
    4c0e:	0e 94 a8 33 	call	0x6750	; 0x6750 <__divmodsi4>
    4c12:	2b 83       	std	Y+3, r18	; 0x03
    4c14:	3c 83       	std	Y+4, r19	; 0x04
    4c16:	4d 83       	std	Y+5, r20	; 0x05
    4c18:	5e 83       	std	Y+6, r21	; 0x06
    4c1a:	ec cf       	rjmp	.-40     	; 0x4bf4 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    4c1c:	1b 82       	std	Y+3, r1	; 0x03
    4c1e:	1c 82       	std	Y+4, r1	; 0x04
    4c20:	1d 82       	std	Y+5, r1	; 0x05
    4c22:	1e 82       	std	Y+6, r1	; 0x06
    4c24:	e7 cf       	rjmp	.-50     	; 0x4bf4 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

00004c26 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    4c26:	cf 92       	push	r12
    4c28:	df 92       	push	r13
    4c2a:	ef 92       	push	r14
    4c2c:	ff 92       	push	r15
    4c2e:	0f 93       	push	r16
    4c30:	1f 93       	push	r17
    4c32:	cf 93       	push	r28
    4c34:	df 93       	push	r29
    4c36:	ec 01       	movw	r28, r24
    4c38:	6b 01       	movw	r12, r22
    4c3a:	7a 01       	movw	r14, r20
    4c3c:	10 e0       	ldi	r17, 0x00	; 0
    4c3e:	00 e0       	ldi	r16, 0x00	; 0
    4c40:	12 16       	cp	r1, r18
    4c42:	13 06       	cpc	r1, r19
    4c44:	14 f4       	brge	.+4      	; 0x4c4a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    4c46:	8a 01       	movw	r16, r20
    4c48:	79 01       	movw	r14, r18
    4c4a:	e8 81       	ld	r30, Y
    4c4c:	f9 81       	ldd	r31, Y+1	; 0x01
    4c4e:	04 80       	ldd	r0, Z+4	; 0x04
    4c50:	f5 81       	ldd	r31, Z+5	; 0x05
    4c52:	e0 2d       	mov	r30, r0
    4c54:	ce 01       	movw	r24, r28
    4c56:	09 95       	icall
    4c58:	c8 01       	movw	r24, r16
    4c5a:	88 0f       	add	r24, r24
    4c5c:	99 1f       	adc	r25, r25
    4c5e:	08 0f       	add	r16, r24
    4c60:	19 1f       	adc	r17, r25
    4c62:	c0 0e       	add	r12, r16
    4c64:	d1 1e       	adc	r13, r17
    4c66:	db 82       	std	Y+3, r13	; 0x03
    4c68:	ca 82       	std	Y+2, r12	; 0x02
    4c6a:	ed 86       	std	Y+13, r14	; 0x0d
    4c6c:	fe 86       	std	Y+14, r15	; 0x0e
    4c6e:	e8 81       	ld	r30, Y
    4c70:	f9 81       	ldd	r31, Y+1	; 0x01
    4c72:	02 84       	ldd	r0, Z+10	; 0x0a
    4c74:	f3 85       	ldd	r31, Z+11	; 0x0b
    4c76:	e0 2d       	mov	r30, r0
    4c78:	ce 01       	movw	r24, r28
    4c7a:	09 95       	icall
    4c7c:	41 e0       	ldi	r20, 0x01	; 1
    4c7e:	bc 01       	movw	r22, r24
    4c80:	8d e7       	ldi	r24, 0x7D	; 125
    4c82:	9e e0       	ldi	r25, 0x0E	; 14
    4c84:	97 df       	rcall	.-210    	; 0x4bb4 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    4c86:	ce 01       	movw	r24, r28
    4c88:	df 91       	pop	r29
    4c8a:	cf 91       	pop	r28
    4c8c:	1f 91       	pop	r17
    4c8e:	0f 91       	pop	r16
    4c90:	ff 90       	pop	r15
    4c92:	ef 90       	pop	r14
    4c94:	df 90       	pop	r13
    4c96:	cf 90       	pop	r12
    4c98:	08 95       	ret

00004c9a <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    4c9a:	8d e7       	ldi	r24, 0x7D	; 125
    4c9c:	9e e0       	ldi	r25, 0x0E	; 14
    4c9e:	bf cd       	rjmp	.-1154   	; 0x481e <CFastLED::CFastLED()>

00004ca0 <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    4ca0:	dc 01       	movw	r26, r24
    4ca2:	40 ff       	sbrs	r20, 0
    4ca4:	03 c0       	rjmp	.+6      	; 0x4cac <Lseteven_8>
    4ca6:	01 c0       	rjmp	.+2      	; 0x4caa <Lsetodd_8>

00004ca8 <Lsetloop_8>:
    4ca8:	6d 93       	st	X+, r22

00004caa <Lsetodd_8>:
    4caa:	6d 93       	st	X+, r22

00004cac <Lseteven_8>:
    4cac:	42 50       	subi	r20, 0x02	; 2
    4cae:	e0 f7       	brcc	.-8      	; 0x4ca8 <Lsetloop_8>
    4cb0:	50 40       	sbci	r21, 0x00	; 0
    4cb2:	d0 f7       	brcc	.-12     	; 0x4ca8 <Lsetloop_8>
    return ptr;
}
    4cb4:	08 95       	ret

00004cb6 <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    4cb6:	0f 93       	push	r16
    4cb8:	1f 93       	push	r17
    4cba:	cf 93       	push	r28
    4cbc:	df 93       	push	r29
    4cbe:	82 30       	cpi	r24, 0x02	; 2
    4cc0:	91 05       	cpc	r25, r1
    4cc2:	10 f4       	brcc	.+4      	; 0x4cc8 <malloc+0x12>
    4cc4:	82 e0       	ldi	r24, 0x02	; 2
    4cc6:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    4cc8:	e0 91 17 0f 	lds	r30, 0x0F17	; 0x800f17 <__flp>
    4ccc:	f0 91 18 0f 	lds	r31, 0x0F18	; 0x800f18 <__flp+0x1>
    4cd0:	30 e0       	ldi	r19, 0x00	; 0
    4cd2:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    4cd4:	70 e0       	ldi	r23, 0x00	; 0
    4cd6:	60 e0       	ldi	r22, 0x00	; 0
    4cd8:	d0 e0       	ldi	r29, 0x00	; 0
    4cda:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    4cdc:	b0 e0       	ldi	r27, 0x00	; 0
    4cde:	a0 e0       	ldi	r26, 0x00	; 0
    4ce0:	30 97       	sbiw	r30, 0x00	; 0
    4ce2:	99 f4       	brne	.+38     	; 0x4d0a <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    4ce4:	21 15       	cp	r18, r1
    4ce6:	31 05       	cpc	r19, r1
    4ce8:	09 f4       	brne	.+2      	; 0x4cec <malloc+0x36>
    4cea:	4a c0       	rjmp	.+148    	; 0x4d80 <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    4cec:	28 1b       	sub	r18, r24
    4cee:	39 0b       	sbc	r19, r25
    4cf0:	24 30       	cpi	r18, 0x04	; 4
    4cf2:	31 05       	cpc	r19, r1
    4cf4:	d8 f5       	brcc	.+118    	; 0x4d6c <malloc+0xb6>
    4cf6:	8a 81       	ldd	r24, Y+2	; 0x02
    4cf8:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    4cfa:	61 15       	cp	r22, r1
    4cfc:	71 05       	cpc	r23, r1
    4cfe:	89 f1       	breq	.+98     	; 0x4d62 <malloc+0xac>
				sfp2->nx = sfp1->nx;
    4d00:	fb 01       	movw	r30, r22
    4d02:	93 83       	std	Z+3, r25	; 0x03
    4d04:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    4d06:	fe 01       	movw	r30, r28
    4d08:	11 c0       	rjmp	.+34     	; 0x4d2c <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    4d0a:	40 81       	ld	r20, Z
    4d0c:	51 81       	ldd	r21, Z+1	; 0x01
    4d0e:	02 81       	ldd	r16, Z+2	; 0x02
    4d10:	13 81       	ldd	r17, Z+3	; 0x03
    4d12:	48 17       	cp	r20, r24
    4d14:	59 07       	cpc	r21, r25
    4d16:	e0 f0       	brcs	.+56     	; 0x4d50 <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    4d18:	48 17       	cp	r20, r24
    4d1a:	59 07       	cpc	r21, r25
    4d1c:	99 f4       	brne	.+38     	; 0x4d44 <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    4d1e:	10 97       	sbiw	r26, 0x00	; 0
    4d20:	61 f0       	breq	.+24     	; 0x4d3a <malloc+0x84>
				fp2->nx = fp1->nx;
    4d22:	12 96       	adiw	r26, 0x02	; 2
    4d24:	0c 93       	st	X, r16
    4d26:	12 97       	sbiw	r26, 0x02	; 2
    4d28:	13 96       	adiw	r26, 0x03	; 3
    4d2a:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    4d2c:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    4d2e:	cf 01       	movw	r24, r30
    4d30:	df 91       	pop	r29
    4d32:	cf 91       	pop	r28
    4d34:	1f 91       	pop	r17
    4d36:	0f 91       	pop	r16
    4d38:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    4d3a:	00 93 17 0f 	sts	0x0F17, r16	; 0x800f17 <__flp>
    4d3e:	10 93 18 0f 	sts	0x0F18, r17	; 0x800f18 <__flp+0x1>
    4d42:	f4 cf       	rjmp	.-24     	; 0x4d2c <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    4d44:	21 15       	cp	r18, r1
    4d46:	31 05       	cpc	r19, r1
    4d48:	51 f0       	breq	.+20     	; 0x4d5e <malloc+0xa8>
    4d4a:	42 17       	cp	r20, r18
    4d4c:	53 07       	cpc	r21, r19
    4d4e:	38 f0       	brcs	.+14     	; 0x4d5e <malloc+0xa8>
    4d50:	a9 01       	movw	r20, r18
    4d52:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    4d54:	9a 01       	movw	r18, r20
    4d56:	bd 01       	movw	r22, r26
    4d58:	df 01       	movw	r26, r30
    4d5a:	f8 01       	movw	r30, r16
    4d5c:	c1 cf       	rjmp	.-126    	; 0x4ce0 <malloc+0x2a>
    4d5e:	ef 01       	movw	r28, r30
    4d60:	f9 cf       	rjmp	.-14     	; 0x4d54 <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    4d62:	90 93 18 0f 	sts	0x0F18, r25	; 0x800f18 <__flp+0x1>
    4d66:	80 93 17 0f 	sts	0x0F17, r24	; 0x800f17 <__flp>
    4d6a:	cd cf       	rjmp	.-102    	; 0x4d06 <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    4d6c:	fe 01       	movw	r30, r28
    4d6e:	e2 0f       	add	r30, r18
    4d70:	f3 1f       	adc	r31, r19
    4d72:	81 93       	st	Z+, r24
    4d74:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    4d76:	22 50       	subi	r18, 0x02	; 2
    4d78:	31 09       	sbc	r19, r1
    4d7a:	39 83       	std	Y+1, r19	; 0x01
    4d7c:	28 83       	st	Y, r18
		return &(sfp2->nx);
    4d7e:	d7 cf       	rjmp	.-82     	; 0x4d2e <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    4d80:	20 91 8a 0e 	lds	r18, 0x0E8A	; 0x800e8a <__brkval>
    4d84:	30 91 8b 0e 	lds	r19, 0x0E8B	; 0x800e8b <__brkval+0x1>
    4d88:	23 2b       	or	r18, r19
    4d8a:	41 f4       	brne	.+16     	; 0x4d9c <malloc+0xe6>
		__brkval = __malloc_heap_start;
    4d8c:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_start>
    4d90:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_start+0x1>
    4d94:	30 93 8b 0e 	sts	0x0E8B, r19	; 0x800e8b <__brkval+0x1>
    4d98:	20 93 8a 0e 	sts	0x0E8A, r18	; 0x800e8a <__brkval>
	cp = __malloc_heap_end;
    4d9c:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <__malloc_heap_end>
    4da0:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <__malloc_heap_end+0x1>
	if (cp == 0)
    4da4:	21 15       	cp	r18, r1
    4da6:	31 05       	cpc	r19, r1
    4da8:	41 f4       	brne	.+16     	; 0x4dba <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    4daa:	2d b7       	in	r18, 0x3d	; 61
    4dac:	3e b7       	in	r19, 0x3e	; 62
    4dae:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <__malloc_margin>
    4db2:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__malloc_margin+0x1>
    4db6:	24 1b       	sub	r18, r20
    4db8:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    4dba:	e0 91 8a 0e 	lds	r30, 0x0E8A	; 0x800e8a <__brkval>
    4dbe:	f0 91 8b 0e 	lds	r31, 0x0E8B	; 0x800e8b <__brkval+0x1>
    4dc2:	e2 17       	cp	r30, r18
    4dc4:	f3 07       	cpc	r31, r19
    4dc6:	a0 f4       	brcc	.+40     	; 0x4df0 <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    4dc8:	2e 1b       	sub	r18, r30
    4dca:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    4dcc:	28 17       	cp	r18, r24
    4dce:	39 07       	cpc	r19, r25
    4dd0:	78 f0       	brcs	.+30     	; 0x4df0 <malloc+0x13a>
    4dd2:	ac 01       	movw	r20, r24
    4dd4:	4e 5f       	subi	r20, 0xFE	; 254
    4dd6:	5f 4f       	sbci	r21, 0xFF	; 255
    4dd8:	24 17       	cp	r18, r20
    4dda:	35 07       	cpc	r19, r21
    4ddc:	48 f0       	brcs	.+18     	; 0x4df0 <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    4dde:	4e 0f       	add	r20, r30
    4de0:	5f 1f       	adc	r21, r31
    4de2:	50 93 8b 0e 	sts	0x0E8B, r21	; 0x800e8b <__brkval+0x1>
    4de6:	40 93 8a 0e 	sts	0x0E8A, r20	; 0x800e8a <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    4dea:	81 93       	st	Z+, r24
    4dec:	91 93       	st	Z+, r25
		return &(fp1->nx);
    4dee:	9f cf       	rjmp	.-194    	; 0x4d2e <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    4df0:	f0 e0       	ldi	r31, 0x00	; 0
    4df2:	e0 e0       	ldi	r30, 0x00	; 0
    4df4:	9c cf       	rjmp	.-200    	; 0x4d2e <malloc+0x78>

00004df6 <free>:
}


void
free(void *p)
{
    4df6:	cf 93       	push	r28
    4df8:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    4dfa:	00 97       	sbiw	r24, 0x00	; 0
    4dfc:	e9 f0       	breq	.+58     	; 0x4e38 <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    4dfe:	fc 01       	movw	r30, r24
    4e00:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    4e02:	13 82       	std	Z+3, r1	; 0x03
    4e04:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    4e06:	a0 91 17 0f 	lds	r26, 0x0F17	; 0x800f17 <__flp>
    4e0a:	b0 91 18 0f 	lds	r27, 0x0F18	; 0x800f18 <__flp+0x1>
    4e0e:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    4e10:	30 e0       	ldi	r19, 0x00	; 0
    4e12:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    4e14:	10 97       	sbiw	r26, 0x00	; 0
    4e16:	a1 f4       	brne	.+40     	; 0x4e40 <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    4e18:	20 81       	ld	r18, Z
    4e1a:	31 81       	ldd	r19, Z+1	; 0x01
    4e1c:	82 0f       	add	r24, r18
    4e1e:	93 1f       	adc	r25, r19
    4e20:	20 91 8a 0e 	lds	r18, 0x0E8A	; 0x800e8a <__brkval>
    4e24:	30 91 8b 0e 	lds	r19, 0x0E8B	; 0x800e8b <__brkval+0x1>
    4e28:	28 17       	cp	r18, r24
    4e2a:	39 07       	cpc	r19, r25
    4e2c:	09 f0       	breq	.+2      	; 0x4e30 <free+0x3a>
    4e2e:	61 c0       	rjmp	.+194    	; 0x4ef2 <free+0xfc>
			__brkval = cpnew;
    4e30:	f0 93 8b 0e 	sts	0x0E8B, r31	; 0x800e8b <__brkval+0x1>
    4e34:	e0 93 8a 0e 	sts	0x0E8A, r30	; 0x800e8a <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    4e38:	df 91       	pop	r29
    4e3a:	cf 91       	pop	r28
    4e3c:	08 95       	ret
    4e3e:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    4e40:	ce 17       	cp	r28, r30
    4e42:	df 07       	cpc	r29, r31
    4e44:	e8 f5       	brcc	.+122    	; 0x4ec0 <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    4e46:	4a 81       	ldd	r20, Y+2	; 0x02
    4e48:	5b 81       	ldd	r21, Y+3	; 0x03
    4e4a:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    4e4c:	41 15       	cp	r20, r1
    4e4e:	51 05       	cpc	r21, r1
    4e50:	b1 f7       	brne	.-20     	; 0x4e3e <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    4e52:	e9 01       	movw	r28, r18
    4e54:	fb 83       	std	Y+3, r31	; 0x03
    4e56:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    4e58:	49 91       	ld	r20, Y+
    4e5a:	59 91       	ld	r21, Y+
    4e5c:	c4 0f       	add	r28, r20
    4e5e:	d5 1f       	adc	r29, r21
    4e60:	ec 17       	cp	r30, r28
    4e62:	fd 07       	cpc	r31, r29
    4e64:	61 f4       	brne	.+24     	; 0x4e7e <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    4e66:	80 81       	ld	r24, Z
    4e68:	91 81       	ldd	r25, Z+1	; 0x01
    4e6a:	02 96       	adiw	r24, 0x02	; 2
    4e6c:	84 0f       	add	r24, r20
    4e6e:	95 1f       	adc	r25, r21
    4e70:	e9 01       	movw	r28, r18
    4e72:	99 83       	std	Y+1, r25	; 0x01
    4e74:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    4e76:	82 81       	ldd	r24, Z+2	; 0x02
    4e78:	93 81       	ldd	r25, Z+3	; 0x03
    4e7a:	9b 83       	std	Y+3, r25	; 0x03
    4e7c:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    4e7e:	f0 e0       	ldi	r31, 0x00	; 0
    4e80:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    4e82:	12 96       	adiw	r26, 0x02	; 2
    4e84:	8d 91       	ld	r24, X+
    4e86:	9c 91       	ld	r25, X
    4e88:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    4e8a:	00 97       	sbiw	r24, 0x00	; 0
    4e8c:	b9 f5       	brne	.+110    	; 0x4efc <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    4e8e:	2d 91       	ld	r18, X+
    4e90:	3c 91       	ld	r19, X
    4e92:	11 97       	sbiw	r26, 0x01	; 1
    4e94:	cd 01       	movw	r24, r26
    4e96:	02 96       	adiw	r24, 0x02	; 2
    4e98:	82 0f       	add	r24, r18
    4e9a:	93 1f       	adc	r25, r19
    4e9c:	20 91 8a 0e 	lds	r18, 0x0E8A	; 0x800e8a <__brkval>
    4ea0:	30 91 8b 0e 	lds	r19, 0x0E8B	; 0x800e8b <__brkval+0x1>
    4ea4:	28 17       	cp	r18, r24
    4ea6:	39 07       	cpc	r19, r25
    4ea8:	39 f6       	brne	.-114    	; 0x4e38 <free+0x42>
		if (fp2 == NULL)
    4eaa:	30 97       	sbiw	r30, 0x00	; 0
    4eac:	51 f5       	brne	.+84     	; 0x4f02 <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    4eae:	10 92 18 0f 	sts	0x0F18, r1	; 0x800f18 <__flp+0x1>
    4eb2:	10 92 17 0f 	sts	0x0F17, r1	; 0x800f17 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    4eb6:	b0 93 8b 0e 	sts	0x0E8B, r27	; 0x800e8b <__brkval+0x1>
    4eba:	a0 93 8a 0e 	sts	0x0E8A, r26	; 0x800e8a <__brkval>
    4ebe:	bc cf       	rjmp	.-136    	; 0x4e38 <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    4ec0:	d3 83       	std	Z+3, r29	; 0x03
    4ec2:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    4ec4:	40 81       	ld	r20, Z
    4ec6:	51 81       	ldd	r21, Z+1	; 0x01
    4ec8:	84 0f       	add	r24, r20
    4eca:	95 1f       	adc	r25, r21
    4ecc:	c8 17       	cp	r28, r24
    4ece:	d9 07       	cpc	r29, r25
    4ed0:	61 f4       	brne	.+24     	; 0x4eea <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    4ed2:	4e 5f       	subi	r20, 0xFE	; 254
    4ed4:	5f 4f       	sbci	r21, 0xFF	; 255
    4ed6:	88 81       	ld	r24, Y
    4ed8:	99 81       	ldd	r25, Y+1	; 0x01
    4eda:	48 0f       	add	r20, r24
    4edc:	59 1f       	adc	r21, r25
    4ede:	51 83       	std	Z+1, r21	; 0x01
    4ee0:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    4ee2:	8a 81       	ldd	r24, Y+2	; 0x02
    4ee4:	9b 81       	ldd	r25, Y+3	; 0x03
    4ee6:	93 83       	std	Z+3, r25	; 0x03
    4ee8:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    4eea:	21 15       	cp	r18, r1
    4eec:	31 05       	cpc	r19, r1
    4eee:	09 f0       	breq	.+2      	; 0x4ef2 <free+0xfc>
    4ef0:	b0 cf       	rjmp	.-160    	; 0x4e52 <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    4ef2:	f0 93 18 0f 	sts	0x0F18, r31	; 0x800f18 <__flp+0x1>
    4ef6:	e0 93 17 0f 	sts	0x0F17, r30	; 0x800f17 <__flp>
			return;
    4efa:	9e cf       	rjmp	.-196    	; 0x4e38 <free+0x42>
    4efc:	fd 01       	movw	r30, r26
    4efe:	dc 01       	movw	r26, r24
    4f00:	c0 cf       	rjmp	.-128    	; 0x4e82 <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    4f02:	13 82       	std	Z+3, r1	; 0x03
    4f04:	12 82       	std	Z+2, r1	; 0x02
    4f06:	d7 cf       	rjmp	.-82     	; 0x4eb6 <free+0xc0>

00004f08 <realloc>:



void *
realloc(void *ptr, size_t len)
{
    4f08:	4f 92       	push	r4
    4f0a:	5f 92       	push	r5
    4f0c:	6f 92       	push	r6
    4f0e:	7f 92       	push	r7
    4f10:	8f 92       	push	r8
    4f12:	9f 92       	push	r9
    4f14:	af 92       	push	r10
    4f16:	bf 92       	push	r11
    4f18:	cf 92       	push	r12
    4f1a:	df 92       	push	r13
    4f1c:	ef 92       	push	r14
    4f1e:	ff 92       	push	r15
    4f20:	0f 93       	push	r16
    4f22:	1f 93       	push	r17
    4f24:	cf 93       	push	r28
    4f26:	df 93       	push	r29
    4f28:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    4f2a:	00 97       	sbiw	r24, 0x00	; 0
    4f2c:	91 f4       	brne	.+36     	; 0x4f52 <realloc+0x4a>
		return malloc(len);
    4f2e:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    4f30:	df 91       	pop	r29
    4f32:	cf 91       	pop	r28
    4f34:	1f 91       	pop	r17
    4f36:	0f 91       	pop	r16
    4f38:	ff 90       	pop	r15
    4f3a:	ef 90       	pop	r14
    4f3c:	df 90       	pop	r13
    4f3e:	cf 90       	pop	r12
    4f40:	bf 90       	pop	r11
    4f42:	af 90       	pop	r10
    4f44:	9f 90       	pop	r9
    4f46:	8f 90       	pop	r8
    4f48:	7f 90       	pop	r7
    4f4a:	6f 90       	pop	r6
    4f4c:	5f 90       	pop	r5
    4f4e:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    4f50:	b2 ce       	rjmp	.-668    	; 0x4cb6 <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    4f52:	fc 01       	movw	r30, r24
    4f54:	e6 0f       	add	r30, r22
    4f56:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    4f58:	9c 01       	movw	r18, r24
    4f5a:	22 50       	subi	r18, 0x02	; 2
    4f5c:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    4f5e:	e2 17       	cp	r30, r18
    4f60:	f3 07       	cpc	r31, r19
    4f62:	08 f4       	brcc	.+2      	; 0x4f66 <realloc+0x5e>
    4f64:	a5 c0       	rjmp	.+330    	; 0x50b0 <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    4f66:	d9 01       	movw	r26, r18
    4f68:	cd 91       	ld	r28, X+
    4f6a:	dc 91       	ld	r29, X
    4f6c:	11 97       	sbiw	r26, 0x01	; 1
    4f6e:	c6 17       	cp	r28, r22
    4f70:	d7 07       	cpc	r29, r23
    4f72:	18 f1       	brcs	.+70     	; 0x4fba <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    4f74:	c5 30       	cpi	r28, 0x05	; 5
    4f76:	d1 05       	cpc	r29, r1
    4f78:	70 f0       	brcs	.+28     	; 0x4f96 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    4f7a:	ce 01       	movw	r24, r28
    4f7c:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    4f7e:	86 17       	cp	r24, r22
    4f80:	97 07       	cpc	r25, r23
    4f82:	48 f0       	brcs	.+18     	; 0x4f96 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    4f84:	c6 1b       	sub	r28, r22
    4f86:	d7 0b       	sbc	r29, r23
    4f88:	22 97       	sbiw	r28, 0x02	; 2
    4f8a:	c1 93       	st	Z+, r28
    4f8c:	d1 93       	st	Z+, r29
		fp1->sz = len;
    4f8e:	6d 93       	st	X+, r22
    4f90:	7c 93       	st	X, r23
		free(&(fp2->nx));
    4f92:	cf 01       	movw	r24, r30
    4f94:	30 df       	rcall	.-416    	; 0x4df6 <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    4f96:	c8 01       	movw	r24, r16
    4f98:	df 91       	pop	r29
    4f9a:	cf 91       	pop	r28
    4f9c:	1f 91       	pop	r17
    4f9e:	0f 91       	pop	r16
    4fa0:	ff 90       	pop	r15
    4fa2:	ef 90       	pop	r14
    4fa4:	df 90       	pop	r13
    4fa6:	cf 90       	pop	r12
    4fa8:	bf 90       	pop	r11
    4faa:	af 90       	pop	r10
    4fac:	9f 90       	pop	r9
    4fae:	8f 90       	pop	r8
    4fb0:	7f 90       	pop	r7
    4fb2:	6f 90       	pop	r6
    4fb4:	5f 90       	pop	r5
    4fb6:	4f 90       	pop	r4
    4fb8:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    4fba:	5b 01       	movw	r10, r22
    4fbc:	ac 1a       	sub	r10, r28
    4fbe:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    4fc0:	4c 01       	movw	r8, r24
    4fc2:	8c 0e       	add	r8, r28
    4fc4:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    4fc6:	a0 91 17 0f 	lds	r26, 0x0F17	; 0x800f17 <__flp>
    4fca:	b0 91 18 0f 	lds	r27, 0x0F18	; 0x800f18 <__flp+0x1>
    4fce:	51 2c       	mov	r5, r1
    4fd0:	41 2c       	mov	r4, r1
    4fd2:	f1 2c       	mov	r15, r1
    4fd4:	e1 2c       	mov	r14, r1
    4fd6:	10 97       	sbiw	r26, 0x00	; 0
    4fd8:	01 f5       	brne	.+64     	; 0x501a <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    4fda:	80 91 8a 0e 	lds	r24, 0x0E8A	; 0x800e8a <__brkval>
    4fde:	90 91 8b 0e 	lds	r25, 0x0E8B	; 0x800e8b <__brkval+0x1>
    4fe2:	88 15       	cp	r24, r8
    4fe4:	99 05       	cpc	r25, r9
    4fe6:	09 f0       	breq	.+2      	; 0x4fea <realloc+0xe2>
    4fe8:	56 c0       	rjmp	.+172    	; 0x5096 <realloc+0x18e>
    4fea:	46 16       	cp	r4, r22
    4fec:	57 06       	cpc	r5, r23
    4fee:	08 f0       	brcs	.+2      	; 0x4ff2 <realloc+0xea>
    4ff0:	52 c0       	rjmp	.+164    	; 0x5096 <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    4ff2:	8d b7       	in	r24, 0x3d	; 61
    4ff4:	9e b7       	in	r25, 0x3e	; 62
    4ff6:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <__malloc_margin>
    4ffa:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <__malloc_margin+0x1>
    4ffe:	84 1b       	sub	r24, r20
    5000:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    5002:	e8 17       	cp	r30, r24
    5004:	f9 07       	cpc	r31, r25
    5006:	08 f0       	brcs	.+2      	; 0x500a <realloc+0x102>
    5008:	53 c0       	rjmp	.+166    	; 0x50b0 <realloc+0x1a8>
			__brkval = cp;
    500a:	f0 93 8b 0e 	sts	0x0E8B, r31	; 0x800e8b <__brkval+0x1>
    500e:	e0 93 8a 0e 	sts	0x0E8A, r30	; 0x800e8a <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    5012:	f9 01       	movw	r30, r18
    5014:	71 83       	std	Z+1, r23	; 0x01
    5016:	60 83       	st	Z, r22
			return ptr;
    5018:	be cf       	rjmp	.-132    	; 0x4f96 <realloc+0x8e>
    501a:	8d 91       	ld	r24, X+
    501c:	9c 91       	ld	r25, X
    501e:	11 97       	sbiw	r26, 0x01	; 1
    5020:	12 96       	adiw	r26, 0x02	; 2
    5022:	6c 90       	ld	r6, X
    5024:	12 97       	sbiw	r26, 0x02	; 2
    5026:	13 96       	adiw	r26, 0x03	; 3
    5028:	7c 90       	ld	r7, X
    502a:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    502c:	a8 15       	cp	r26, r8
    502e:	b9 05       	cpc	r27, r9
    5030:	59 f5       	brne	.+86     	; 0x5088 <realloc+0x180>
    5032:	6c 01       	movw	r12, r24
    5034:	42 e0       	ldi	r20, 0x02	; 2
    5036:	c4 0e       	add	r12, r20
    5038:	d1 1c       	adc	r13, r1
    503a:	ca 14       	cp	r12, r10
    503c:	db 04       	cpc	r13, r11
    503e:	20 f1       	brcs	.+72     	; 0x5088 <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    5040:	ac 01       	movw	r20, r24
    5042:	4a 19       	sub	r20, r10
    5044:	5b 09       	sbc	r21, r11
    5046:	da 01       	movw	r26, r20
    5048:	12 96       	adiw	r26, 0x02	; 2
    504a:	15 97       	sbiw	r26, 0x05	; 5
    504c:	80 f0       	brcs	.+32     	; 0x506e <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    504e:	62 82       	std	Z+2, r6	; 0x02
    5050:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    5052:	51 83       	std	Z+1, r21	; 0x01
    5054:	40 83       	st	Z, r20
				fp1->sz = len;
    5056:	d9 01       	movw	r26, r18
    5058:	6d 93       	st	X+, r22
    505a:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    505c:	e1 14       	cp	r14, r1
    505e:	f1 04       	cpc	r15, r1
    5060:	71 f0       	breq	.+28     	; 0x507e <realloc+0x176>
				ofp3->nx = fp2;
    5062:	d7 01       	movw	r26, r14
    5064:	13 96       	adiw	r26, 0x03	; 3
    5066:	fc 93       	st	X, r31
    5068:	ee 93       	st	-X, r30
    506a:	12 97       	sbiw	r26, 0x02	; 2
    506c:	94 cf       	rjmp	.-216    	; 0x4f96 <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    506e:	22 96       	adiw	r28, 0x02	; 2
    5070:	8c 0f       	add	r24, r28
    5072:	9d 1f       	adc	r25, r29
    5074:	f9 01       	movw	r30, r18
    5076:	91 83       	std	Z+1, r25	; 0x01
    5078:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    507a:	f3 01       	movw	r30, r6
    507c:	ef cf       	rjmp	.-34     	; 0x505c <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    507e:	f0 93 18 0f 	sts	0x0F18, r31	; 0x800f18 <__flp+0x1>
    5082:	e0 93 17 0f 	sts	0x0F17, r30	; 0x800f17 <__flp>
    5086:	87 cf       	rjmp	.-242    	; 0x4f96 <realloc+0x8e>
    5088:	48 16       	cp	r4, r24
    508a:	59 06       	cpc	r5, r25
    508c:	08 f4       	brcc	.+2      	; 0x5090 <realloc+0x188>
    508e:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    5090:	7d 01       	movw	r14, r26
    5092:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    5094:	a0 cf       	rjmp	.-192    	; 0x4fd6 <realloc+0xce>
    5096:	cb 01       	movw	r24, r22
    5098:	0e de       	rcall	.-996    	; 0x4cb6 <malloc>
    509a:	7c 01       	movw	r14, r24
    509c:	00 97       	sbiw	r24, 0x00	; 0
    509e:	41 f0       	breq	.+16     	; 0x50b0 <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    50a0:	ae 01       	movw	r20, r28
    50a2:	b8 01       	movw	r22, r16
    50a4:	0e 94 8a 34 	call	0x6914	; 0x6914 <memcpy>
	free(ptr);
    50a8:	c8 01       	movw	r24, r16
    50aa:	a5 de       	rcall	.-694    	; 0x4df6 <free>
	return memp;
    50ac:	87 01       	movw	r16, r14
    50ae:	73 cf       	rjmp	.-282    	; 0x4f96 <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    50b0:	10 e0       	ldi	r17, 0x00	; 0
    50b2:	00 e0       	ldi	r16, 0x00	; 0
    50b4:	70 cf       	rjmp	.-288    	; 0x4f96 <realloc+0x8e>

000050b6 <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    50b6:	1d ba       	out	0x1d, r1	; 29
    50b8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    50bc:	1c bc       	out	0x2c, r1	; 44
    50be:	10 be       	out	0x30, r1	; 48
    50c0:	1f ba       	out	0x1f, r1	; 31
    50c2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    50c6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    50ca:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    50ce:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    50d2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    50d6:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    50da:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    50de:	11 b8       	out	0x01, r1	; 1
    50e0:	14 b8       	out	0x04, r1	; 4
    50e2:	17 b8       	out	0x07, r1	; 7
    50e4:	1a b8       	out	0x0a, r1	; 10
    50e6:	1d b8       	out	0x0d, r1	; 13
    50e8:	10 ba       	out	0x10, r1	; 16
    50ea:	12 b8       	out	0x02, r1	; 2
    50ec:	15 b8       	out	0x05, r1	; 5
    50ee:	18 b8       	out	0x08, r1	; 8
    50f0:	1b b8       	out	0x0b, r1	; 11
    50f2:	1e b8       	out	0x0e, r1	; 14
    50f4:	11 ba       	out	0x11, r1	; 17
    50f6:	08 95       	ret

000050f8 <_init_Teensyduino_internal_>:
    50f8:	f8 94       	cli
    50fa:	e1 e6       	ldi	r30, 0x61	; 97
    50fc:	f0 e0       	ldi	r31, 0x00	; 0
    50fe:	20 e8       	ldi	r18, 0x80	; 128
    5100:	20 83       	st	Z, r18
    5102:	10 82       	st	Z, r1
    5104:	83 e0       	ldi	r24, 0x03	; 3
    5106:	84 bd       	out	0x24, r24	; 36
    5108:	85 bd       	out	0x25, r24	; 37
    510a:	ee e6       	ldi	r30, 0x6E	; 110
    510c:	f0 e0       	ldi	r31, 0x00	; 0
    510e:	80 81       	ld	r24, Z
    5110:	81 60       	ori	r24, 0x01	; 1
    5112:	80 83       	st	Z, r24
    5114:	91 e0       	ldi	r25, 0x01	; 1
    5116:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    511a:	82 e0       	ldi	r24, 0x02	; 2
    511c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    5120:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5124:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    5128:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    512c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    5130:	86 e8       	ldi	r24, 0x86	; 134
    5132:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5136:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    513a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    513e:	d9 d1       	rcall	.+946    	; 0x54f2 <usb_init>
    5140:	78 94       	sei
    5142:	08 95       	ret

00005144 <analogRead>:
    5144:	9a ed       	ldi	r25, 0xDA	; 218
    5146:	98 0f       	add	r25, r24
    5148:	98 30       	cpi	r25, 0x08	; 8
    514a:	10 f1       	brcs	.+68     	; 0x5190 <analogRead+0x4c>
    514c:	88 30       	cpi	r24, 0x08	; 8
    514e:	60 f4       	brcc	.+24     	; 0x5168 <analogRead+0x24>
    5150:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    5154:	21 e0       	ldi	r18, 0x01	; 1
    5156:	30 e0       	ldi	r19, 0x00	; 0
    5158:	08 2e       	mov	r0, r24
    515a:	01 c0       	rjmp	.+2      	; 0x515e <analogRead+0x1a>
    515c:	22 0f       	add	r18, r18
    515e:	0a 94       	dec	r0
    5160:	ea f7       	brpl	.-6      	; 0x515c <analogRead+0x18>
    5162:	92 2b       	or	r25, r18
    5164:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    5168:	8f 71       	andi	r24, 0x1F	; 31
    516a:	90 91 0e 01 	lds	r25, 0x010E	; 0x80010e <w_analog_reference>
    516e:	89 2b       	or	r24, r25
    5170:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    5174:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5178:	80 64       	ori	r24, 0x40	; 64
    517a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    517e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5182:	86 fd       	sbrc	r24, 6
    5184:	fc cf       	rjmp	.-8      	; 0x517e <analogRead+0x3a>
    5186:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    518a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    518e:	08 95       	ret
    5190:	89 2f       	mov	r24, r25
    5192:	de cf       	rjmp	.-68     	; 0x5150 <analogRead+0xc>

00005194 <_pinMode_output>:
    5194:	8e 32       	cpi	r24, 0x2E	; 46
    5196:	70 f4       	brcc	.+28     	; 0x51b4 <_pinMode_output+0x20>
    5198:	e8 e3       	ldi	r30, 0x38	; 56
    519a:	f6 e0       	ldi	r31, 0x06	; 6
    519c:	88 0f       	add	r24, r24
    519e:	e8 0f       	add	r30, r24
    51a0:	f1 1d       	adc	r31, r1
    51a2:	25 91       	lpm	r18, Z+
    51a4:	e4 91       	lpm	r30, Z
    51a6:	f0 e0       	ldi	r31, 0x00	; 0
    51a8:	9f b7       	in	r25, 0x3f	; 63
    51aa:	f8 94       	cli
    51ac:	81 81       	ldd	r24, Z+1	; 0x01
    51ae:	82 2b       	or	r24, r18
    51b0:	81 83       	std	Z+1, r24	; 0x01
    51b2:	9f bf       	out	0x3f, r25	; 63
    51b4:	08 95       	ret

000051b6 <_digitalWrite_HIGH>:
    51b6:	ee 32       	cpi	r30, 0x2E	; 46
    51b8:	50 f4       	brcc	.+20     	; 0x51ce <_digitalWrite_bailout>
    51ba:	ee 0f       	add	r30, r30
    51bc:	e8 51       	subi	r30, 0x18	; 24
    51be:	f7 4d       	sbci	r31, 0xD7	; 215
    51c0:	09 94       	ijmp

000051c2 <_digitalWrite_LOW>:
    51c2:	ee 32       	cpi	r30, 0x2E	; 46
    51c4:	20 f4       	brcc	.+8      	; 0x51ce <_digitalWrite_bailout>
    51c6:	ee 0f       	add	r30, r30
    51c8:	ec 5b       	subi	r30, 0xBC	; 188
    51ca:	f6 4d       	sbci	r31, 0xD6	; 214
    51cc:	09 94       	ijmp

000051ce <_digitalWrite_bailout>:
    51ce:	08 95       	ret

000051d0 <_digitalWrite_HIGH_TABLE>:
    51d0:	58 9a       	sbi	0x0b, 0	; 11
    51d2:	b6 c0       	rjmp	.+364    	; 0x5340 <_digitalWrite_OC0B>
    51d4:	59 9a       	sbi	0x0b, 1	; 11
    51d6:	d0 c0       	rjmp	.+416    	; 0x5378 <_digitalWrite_OC2B>
    51d8:	5a 9a       	sbi	0x0b, 2	; 11
    51da:	08 95       	ret
    51dc:	5b 9a       	sbi	0x0b, 3	; 11
    51de:	08 95       	ret
    51e0:	5c 9a       	sbi	0x0b, 4	; 11
    51e2:	08 95       	ret
    51e4:	5d 9a       	sbi	0x0b, 5	; 11
    51e6:	08 95       	ret
    51e8:	5e 9a       	sbi	0x0b, 6	; 11
    51ea:	08 95       	ret
    51ec:	5f 9a       	sbi	0x0b, 7	; 11
    51ee:	08 95       	ret
    51f0:	70 9a       	sbi	0x0e, 0	; 14
    51f2:	08 95       	ret
    51f4:	71 9a       	sbi	0x0e, 1	; 14
    51f6:	08 95       	ret
    51f8:	40 9a       	sbi	0x08, 0	; 8
    51fa:	08 95       	ret
    51fc:	41 9a       	sbi	0x08, 1	; 8
    51fe:	08 95       	ret
    5200:	42 9a       	sbi	0x08, 2	; 8
    5202:	08 95       	ret
    5204:	43 9a       	sbi	0x08, 3	; 8
    5206:	08 95       	ret
    5208:	44 9a       	sbi	0x08, 4	; 8
    520a:	c8 c0       	rjmp	.+400    	; 0x539c <_digitalWrite_OC3C>
    520c:	45 9a       	sbi	0x08, 5	; 8
    520e:	c0 c0       	rjmp	.+384    	; 0x5390 <_digitalWrite_OC3B>
    5210:	46 9a       	sbi	0x08, 6	; 8
    5212:	b8 c0       	rjmp	.+368    	; 0x5384 <_digitalWrite_OC3A>
    5214:	47 9a       	sbi	0x08, 7	; 8
    5216:	08 95       	ret
    5218:	76 9a       	sbi	0x0e, 6	; 14
    521a:	08 95       	ret
    521c:	77 9a       	sbi	0x0e, 7	; 14
    521e:	08 95       	ret
    5220:	28 9a       	sbi	0x05, 0	; 5
    5222:	08 95       	ret
    5224:	29 9a       	sbi	0x05, 1	; 5
    5226:	08 95       	ret
    5228:	2a 9a       	sbi	0x05, 2	; 5
    522a:	08 95       	ret
    522c:	2b 9a       	sbi	0x05, 3	; 5
    522e:	08 95       	ret
    5230:	2c 9a       	sbi	0x05, 4	; 5
    5232:	9c c0       	rjmp	.+312    	; 0x536c <_digitalWrite_OC2A>
    5234:	2d 9a       	sbi	0x05, 5	; 5
    5236:	88 c0       	rjmp	.+272    	; 0x5348 <_digitalWrite_OC1A>
    5238:	2e 9a       	sbi	0x05, 6	; 5
    523a:	8c c0       	rjmp	.+280    	; 0x5354 <_digitalWrite_OC1B>
    523c:	2f 9a       	sbi	0x05, 7	; 5
    523e:	90 c0       	rjmp	.+288    	; 0x5360 <_digitalWrite_OC1C>
    5240:	10 9a       	sbi	0x02, 0	; 2
    5242:	08 95       	ret
    5244:	11 9a       	sbi	0x02, 1	; 2
    5246:	08 95       	ret
    5248:	12 9a       	sbi	0x02, 2	; 2
    524a:	08 95       	ret
    524c:	13 9a       	sbi	0x02, 3	; 2
    524e:	08 95       	ret
    5250:	14 9a       	sbi	0x02, 4	; 2
    5252:	08 95       	ret
    5254:	15 9a       	sbi	0x02, 5	; 2
    5256:	08 95       	ret
    5258:	16 9a       	sbi	0x02, 6	; 2
    525a:	08 95       	ret
    525c:	17 9a       	sbi	0x02, 7	; 2
    525e:	08 95       	ret
    5260:	74 9a       	sbi	0x0e, 4	; 14
    5262:	08 95       	ret
    5264:	75 9a       	sbi	0x0e, 5	; 14
    5266:	08 95       	ret
    5268:	88 9a       	sbi	0x11, 0	; 17
    526a:	08 95       	ret
    526c:	89 9a       	sbi	0x11, 1	; 17
    526e:	08 95       	ret
    5270:	8a 9a       	sbi	0x11, 2	; 17
    5272:	08 95       	ret
    5274:	8b 9a       	sbi	0x11, 3	; 17
    5276:	08 95       	ret
    5278:	8c 9a       	sbi	0x11, 4	; 17
    527a:	08 95       	ret
    527c:	8d 9a       	sbi	0x11, 5	; 17
    527e:	08 95       	ret
    5280:	8e 9a       	sbi	0x11, 6	; 17
    5282:	08 95       	ret
    5284:	8f 9a       	sbi	0x11, 7	; 17
    5286:	08 95       	ret

00005288 <_digitalWrite_LOW_TABLE>:
    5288:	58 98       	cbi	0x0b, 0	; 11
    528a:	5a c0       	rjmp	.+180    	; 0x5340 <_digitalWrite_OC0B>
    528c:	59 98       	cbi	0x0b, 1	; 11
    528e:	74 c0       	rjmp	.+232    	; 0x5378 <_digitalWrite_OC2B>
    5290:	5a 98       	cbi	0x0b, 2	; 11
    5292:	08 95       	ret
    5294:	5b 98       	cbi	0x0b, 3	; 11
    5296:	08 95       	ret
    5298:	5c 98       	cbi	0x0b, 4	; 11
    529a:	08 95       	ret
    529c:	5d 98       	cbi	0x0b, 5	; 11
    529e:	08 95       	ret
    52a0:	5e 98       	cbi	0x0b, 6	; 11
    52a2:	08 95       	ret
    52a4:	5f 98       	cbi	0x0b, 7	; 11
    52a6:	08 95       	ret
    52a8:	70 98       	cbi	0x0e, 0	; 14
    52aa:	08 95       	ret
    52ac:	71 98       	cbi	0x0e, 1	; 14
    52ae:	08 95       	ret
    52b0:	40 98       	cbi	0x08, 0	; 8
    52b2:	08 95       	ret
    52b4:	41 98       	cbi	0x08, 1	; 8
    52b6:	08 95       	ret
    52b8:	42 98       	cbi	0x08, 2	; 8
    52ba:	08 95       	ret
    52bc:	43 98       	cbi	0x08, 3	; 8
    52be:	08 95       	ret
    52c0:	44 98       	cbi	0x08, 4	; 8
    52c2:	6c c0       	rjmp	.+216    	; 0x539c <_digitalWrite_OC3C>
    52c4:	45 98       	cbi	0x08, 5	; 8
    52c6:	64 c0       	rjmp	.+200    	; 0x5390 <_digitalWrite_OC3B>
    52c8:	46 98       	cbi	0x08, 6	; 8
    52ca:	5c c0       	rjmp	.+184    	; 0x5384 <_digitalWrite_OC3A>
    52cc:	47 98       	cbi	0x08, 7	; 8
    52ce:	08 95       	ret
    52d0:	76 98       	cbi	0x0e, 6	; 14
    52d2:	08 95       	ret
    52d4:	77 98       	cbi	0x0e, 7	; 14
    52d6:	08 95       	ret
    52d8:	28 98       	cbi	0x05, 0	; 5
    52da:	08 95       	ret
    52dc:	29 98       	cbi	0x05, 1	; 5
    52de:	08 95       	ret
    52e0:	2a 98       	cbi	0x05, 2	; 5
    52e2:	08 95       	ret
    52e4:	2b 98       	cbi	0x05, 3	; 5
    52e6:	08 95       	ret
    52e8:	2c 98       	cbi	0x05, 4	; 5
    52ea:	40 c0       	rjmp	.+128    	; 0x536c <_digitalWrite_OC2A>
    52ec:	2d 98       	cbi	0x05, 5	; 5
    52ee:	2c c0       	rjmp	.+88     	; 0x5348 <_digitalWrite_OC1A>
    52f0:	2e 98       	cbi	0x05, 6	; 5
    52f2:	30 c0       	rjmp	.+96     	; 0x5354 <_digitalWrite_OC1B>
    52f4:	2f 98       	cbi	0x05, 7	; 5
    52f6:	34 c0       	rjmp	.+104    	; 0x5360 <_digitalWrite_OC1C>
    52f8:	10 98       	cbi	0x02, 0	; 2
    52fa:	08 95       	ret
    52fc:	11 98       	cbi	0x02, 1	; 2
    52fe:	08 95       	ret
    5300:	12 98       	cbi	0x02, 2	; 2
    5302:	08 95       	ret
    5304:	13 98       	cbi	0x02, 3	; 2
    5306:	08 95       	ret
    5308:	14 98       	cbi	0x02, 4	; 2
    530a:	08 95       	ret
    530c:	15 98       	cbi	0x02, 5	; 2
    530e:	08 95       	ret
    5310:	16 98       	cbi	0x02, 6	; 2
    5312:	08 95       	ret
    5314:	17 98       	cbi	0x02, 7	; 2
    5316:	08 95       	ret
    5318:	74 98       	cbi	0x0e, 4	; 14
    531a:	08 95       	ret
    531c:	75 98       	cbi	0x0e, 5	; 14
    531e:	08 95       	ret
    5320:	88 98       	cbi	0x11, 0	; 17
    5322:	08 95       	ret
    5324:	89 98       	cbi	0x11, 1	; 17
    5326:	08 95       	ret
    5328:	8a 98       	cbi	0x11, 2	; 17
    532a:	08 95       	ret
    532c:	8b 98       	cbi	0x11, 3	; 17
    532e:	08 95       	ret
    5330:	8c 98       	cbi	0x11, 4	; 17
    5332:	08 95       	ret
    5334:	8d 98       	cbi	0x11, 5	; 17
    5336:	08 95       	ret
    5338:	8e 98       	cbi	0x11, 6	; 17
    533a:	08 95       	ret
    533c:	8f 98       	cbi	0x11, 7	; 17
    533e:	08 95       	ret

00005340 <_digitalWrite_OC0B>:
    5340:	e4 b5       	in	r30, 0x24	; 36
    5342:	ef 7d       	andi	r30, 0xDF	; 223
    5344:	e4 bd       	out	0x24, r30	; 36
    5346:	08 95       	ret

00005348 <_digitalWrite_OC1A>:
    5348:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    534c:	ef 77       	andi	r30, 0x7F	; 127
    534e:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5352:	08 95       	ret

00005354 <_digitalWrite_OC1B>:
    5354:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5358:	ef 7d       	andi	r30, 0xDF	; 223
    535a:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    535e:	08 95       	ret

00005360 <_digitalWrite_OC1C>:
    5360:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5364:	e7 7f       	andi	r30, 0xF7	; 247
    5366:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    536a:	08 95       	ret

0000536c <_digitalWrite_OC2A>:
    536c:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5370:	ef 77       	andi	r30, 0x7F	; 127
    5372:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5376:	08 95       	ret

00005378 <_digitalWrite_OC2B>:
    5378:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    537c:	ef 7d       	andi	r30, 0xDF	; 223
    537e:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    5382:	08 95       	ret

00005384 <_digitalWrite_OC3A>:
    5384:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5388:	ef 77       	andi	r30, 0x7F	; 127
    538a:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    538e:	08 95       	ret

00005390 <_digitalWrite_OC3B>:
    5390:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5394:	ef 7d       	andi	r30, 0xDF	; 223
    5396:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    539a:	08 95       	ret

0000539c <_digitalWrite_OC3C>:
    539c:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    53a0:	e7 7f       	andi	r30, 0xF7	; 247
    53a2:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    53a6:	08 95       	ret

000053a8 <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    53a8:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    53aa:	84 b7       	in	r24, 0x34	; 52
    53ac:	87 7f       	andi	r24, 0xF7	; 247
    53ae:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    53b0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    53b4:	80 61       	ori	r24, 0x10	; 16
    53b6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    53ba:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    53be:	80 e2       	ldi	r24, 0x20	; 32
    53c0:	9e e4       	ldi	r25, 0x4E	; 78

000053c2 <L_1164_loop>:
    53c2:	01 97       	sbiw	r24, 0x01	; 1
    53c4:	f1 f7       	brne	.-4      	; 0x53c2 <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    53c6:	81 e0       	ldi	r24, 0x01	; 1
    53c8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    53cc:	80 e2       	ldi	r24, 0x20	; 32
    53ce:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    53d2:	80 e6       	ldi	r24, 0x60	; 96
    53d4:	9a ee       	ldi	r25, 0xEA	; 234

000053d6 <L_1178_loop>:
    53d6:	01 97       	sbiw	r24, 0x01	; 1
    53d8:	f1 f7       	brne	.-4      	; 0x53d6 <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    53da:	6d de       	rcall	.-806    	; 0x50b6 <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    53dc:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    53e0:	ff cf       	rjmp	.-2      	; 0x53e0 <L_1178_loop+0xa>

000053e2 <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    53e2:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    53e4:	68 de       	rcall	.-816    	; 0x50b6 <disable_peripherals>
    53e6:	80 e6       	ldi	r24, 0x60	; 96
    53e8:	9a ee       	ldi	r25, 0xEA	; 234

000053ea <L_1203_loop>:
    53ea:	01 97       	sbiw	r24, 0x01	; 1
    53ec:	f1 f7       	brne	.-4      	; 0x53ea <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    53ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    53f2:	ff cf       	rjmp	.-2      	; 0x53f2 <L_1203_loop+0x8>

000053f4 <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    53f4:	8f 93       	push	r24
    53f6:	8f b7       	in	r24, 0x3f	; 63
    53f8:	8f 93       	push	r24
    53fa:	80 91 8c 0e 	lds	r24, 0x0E8C	; 0x800e8c <timer0_fract_count>
    53fe:	8d 5f       	subi	r24, 0xFD	; 253
    5400:	8d 37       	cpi	r24, 0x7D	; 125
    5402:	d0 f4       	brcc	.+52     	; 0x5438 <L_1218_fract_roll>

00005404 <L_1218_fract_noroll>:
    5404:	80 93 8c 0e 	sts	0x0E8C, r24	; 0x800e8c <timer0_fract_count>
    5408:	80 91 8d 0e 	lds	r24, 0x0E8D	; 0x800e8d <timer0_millis_count>
    540c:	8f 5f       	subi	r24, 0xFF	; 255
    540e:	80 93 8d 0e 	sts	0x0E8D, r24	; 0x800e8d <timer0_millis_count>
    5412:	d8 f0       	brcs	.+54     	; 0x544a <L_1218_ovcount>

00005414 <L_1218_millis_inc_sext>:
    5414:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <timer0_millis_count+0x1>
    5418:	8f 4f       	sbci	r24, 0xFF	; 255
    541a:	80 93 8e 0e 	sts	0x0E8E, r24	; 0x800e8e <timer0_millis_count+0x1>
    541e:	a8 f0       	brcs	.+42     	; 0x544a <L_1218_ovcount>
    5420:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <timer0_millis_count+0x2>
    5424:	8f 4f       	sbci	r24, 0xFF	; 255
    5426:	80 93 8f 0e 	sts	0x0E8F, r24	; 0x800e8f <timer0_millis_count+0x2>
    542a:	78 f0       	brcs	.+30     	; 0x544a <L_1218_ovcount>
    542c:	80 91 90 0e 	lds	r24, 0x0E90	; 0x800e90 <timer0_millis_count+0x3>
    5430:	8f 4f       	sbci	r24, 0xFF	; 255
    5432:	80 93 90 0e 	sts	0x0E90, r24	; 0x800e90 <timer0_millis_count+0x3>
    5436:	09 c0       	rjmp	.+18     	; 0x544a <L_1218_ovcount>

00005438 <L_1218_fract_roll>:
    5438:	8d 57       	subi	r24, 0x7D	; 125
    543a:	80 93 8c 0e 	sts	0x0E8C, r24	; 0x800e8c <timer0_fract_count>
    543e:	80 91 8d 0e 	lds	r24, 0x0E8D	; 0x800e8d <timer0_millis_count>
    5442:	8e 5f       	subi	r24, 0xFE	; 254
    5444:	80 93 8d 0e 	sts	0x0E8D, r24	; 0x800e8d <timer0_millis_count>
    5448:	28 f7       	brcc	.-54     	; 0x5414 <L_1218_millis_inc_sext>

0000544a <L_1218_ovcount>:
    544a:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timer0_micros_count>
    544e:	8c 5f       	subi	r24, 0xFC	; 252
    5450:	80 93 91 0e 	sts	0x0E91, r24	; 0x800e91 <timer0_micros_count>
    5454:	58 f0       	brcs	.+22     	; 0x546c <L_1218_end>
    5456:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <timer0_micros_count+0x1>
    545a:	8f 4f       	sbci	r24, 0xFF	; 255
    545c:	80 93 92 0e 	sts	0x0E92, r24	; 0x800e92 <timer0_micros_count+0x1>
    5460:	28 f0       	brcs	.+10     	; 0x546c <L_1218_end>
    5462:	80 91 93 0e 	lds	r24, 0x0E93	; 0x800e93 <timer0_micros_count+0x2>
    5466:	8f 4f       	sbci	r24, 0xFF	; 255
    5468:	80 93 93 0e 	sts	0x0E93, r24	; 0x800e93 <timer0_micros_count+0x2>

0000546c <L_1218_end>:
    546c:	8f 91       	pop	r24
    546e:	8f bf       	out	0x3f, r24	; 63
    5470:	8f 91       	pop	r24
    5472:	18 95       	reti

00005474 <delay>:
	);
}


void delay(uint32_t ms)
{
    5474:	cf 92       	push	r12
    5476:	df 92       	push	r13
    5478:	ef 92       	push	r14
    547a:	ff 92       	push	r15
    547c:	6b 01       	movw	r12, r22
    547e:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    5480:	19 d0       	rcall	.+50     	; 0x54b4 <_micros>
	uint16_t start = (uint16_t)micros();
    5482:	9b 01       	movw	r18, r22

	while (ms > 0) {
    5484:	c1 14       	cp	r12, r1
    5486:	d1 04       	cpc	r13, r1
    5488:	e1 04       	cpc	r14, r1
    548a:	f1 04       	cpc	r15, r1
    548c:	29 f4       	brne	.+10     	; 0x5498 <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    548e:	ff 90       	pop	r15
    5490:	ef 90       	pop	r14
    5492:	df 90       	pop	r13
    5494:	cf 90       	pop	r12
    5496:	08 95       	ret
    5498:	0d d0       	rcall	.+26     	; 0x54b4 <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    549a:	62 1b       	sub	r22, r18
    549c:	73 0b       	sbc	r23, r19
    549e:	68 3e       	cpi	r22, 0xE8	; 232
    54a0:	73 40       	sbci	r23, 0x03	; 3
    54a2:	80 f3       	brcs	.-32     	; 0x5484 <delay+0x10>
			ms--;
    54a4:	81 e0       	ldi	r24, 0x01	; 1
    54a6:	c8 1a       	sub	r12, r24
    54a8:	d1 08       	sbc	r13, r1
    54aa:	e1 08       	sbc	r14, r1
    54ac:	f1 08       	sbc	r15, r1
			start += 1000;
    54ae:	28 51       	subi	r18, 0x18	; 24
    54b0:	3c 4f       	sbci	r19, 0xFC	; 252
    54b2:	e8 cf       	rjmp	.-48     	; 0x5484 <delay+0x10>

000054b4 <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    54b4:	0f b6       	in	r0, 0x3f	; 63
    54b6:	f8 94       	cli
    54b8:	66 b5       	in	r22, 0x26	; 38
    54ba:	15 b2       	in	r1, 0x15	; 21
    54bc:	70 91 91 0e 	lds	r23, 0x0E91	; 0x800e91 <timer0_micros_count>
    54c0:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <timer0_micros_count+0x1>
    54c4:	90 91 93 0e 	lds	r25, 0x0E93	; 0x800e93 <timer0_micros_count+0x2>
    54c8:	0f be       	out	0x3f, r0	; 63
    54ca:	10 fe       	sbrs	r1, 0
    54cc:	05 c0       	rjmp	.+10     	; 0x54d8 <L_1296_skip>
    54ce:	6f 3f       	cpi	r22, 0xFF	; 255
    54d0:	19 f0       	breq	.+6      	; 0x54d8 <L_1296_skip>
    54d2:	7c 5f       	subi	r23, 0xFC	; 252
    54d4:	8f 4f       	sbci	r24, 0xFF	; 255
    54d6:	9f 4f       	sbci	r25, 0xFF	; 255

000054d8 <L_1296_skip>:
    54d8:	11 24       	eor	r1, r1
    54da:	00 24       	eor	r0, r0
    54dc:	66 0f       	add	r22, r22
    54de:	00 1c       	adc	r0, r0
    54e0:	66 0f       	add	r22, r22
    54e2:	00 1c       	adc	r0, r0
    54e4:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    54e6:	08 95       	ret

000054e8 <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    54e8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    54ec:	80 ff       	sbrs	r24, 0
    54ee:	fc cf       	rjmp	.-8      	; 0x54e8 <usb_wait_in_ready>
    54f0:	08 95       	ret

000054f2 <usb_init>:
    54f2:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    54f6:	87 ff       	sbrs	r24, 7
    54f8:	02 c0       	rjmp	.+4      	; 0x54fe <usb_init+0xc>
    54fa:	85 ff       	sbrs	r24, 5
    54fc:	1b c0       	rjmp	.+54     	; 0x5534 <usb_init+0x42>
    54fe:	81 e8       	ldi	r24, 0x81	; 129
    5500:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    5504:	80 ea       	ldi	r24, 0xA0	; 160
    5506:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    550a:	86 e1       	ldi	r24, 0x16	; 22
    550c:	89 bd       	out	0x29, r24	; 41
    550e:	09 b4       	in	r0, 0x29	; 41
    5510:	00 fe       	sbrs	r0, 0
    5512:	fd cf       	rjmp	.-6      	; 0x550e <usb_init+0x1c>
    5514:	80 e9       	ldi	r24, 0x90	; 144
    5516:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    551a:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    551e:	10 92 1b 0f 	sts	0x0F1B, r1	; 0x800f1b <usb_configuration>
    5522:	10 92 1a 0f 	sts	0x0F1A, r1	; 0x800f1a <usb_suspended>
    5526:	10 92 19 0f 	sts	0x0F19, r1	; 0x800f19 <__bss_end>
    552a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    552e:	8d e0       	ldi	r24, 0x0D	; 13
    5530:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    5534:	08 95       	ret

00005536 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    5536:	1f 92       	push	r1
    5538:	0f 92       	push	r0
    553a:	0f b6       	in	r0, 0x3f	; 63
    553c:	0f 92       	push	r0
    553e:	11 24       	eor	r1, r1
    5540:	0b b6       	in	r0, 0x3b	; 59
    5542:	0f 92       	push	r0
    5544:	2f 93       	push	r18
    5546:	3f 93       	push	r19
    5548:	4f 93       	push	r20
    554a:	5f 93       	push	r21
    554c:	6f 93       	push	r22
    554e:	7f 93       	push	r23
    5550:	8f 93       	push	r24
    5552:	9f 93       	push	r25
    5554:	af 93       	push	r26
    5556:	bf 93       	push	r27
    5558:	ef 93       	push	r30
    555a:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    555c:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    5560:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    5564:	93 ff       	sbrs	r25, 3
    5566:	11 c0       	rjmp	.+34     	; 0x558a <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    5568:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    556c:	81 e0       	ldi	r24, 0x01	; 1
    556e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    5572:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    5576:	82 e2       	ldi	r24, 0x22	; 34
    5578:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    557c:	88 e0       	ldi	r24, 0x08	; 8
    557e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    5582:	10 92 1b 0f 	sts	0x0F1B, r1	; 0x800f1b <usb_configuration>
		cdc_line_rtsdtr = 0;
    5586:	10 92 19 0f 	sts	0x0F19, r1	; 0x800f19 <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    558a:	92 ff       	sbrs	r25, 2
    558c:	1d c0       	rjmp	.+58     	; 0x55c8 <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    558e:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <usb_configuration>
    5592:	88 23       	and	r24, r24
    5594:	c9 f0       	breq	.+50     	; 0x55c8 <__vector_10+0x92>
			t = transmit_flush_timer;
    5596:	80 91 97 0e 	lds	r24, 0x0E97	; 0x800e97 <transmit_flush_timer>
			if (t) {
    559a:	88 23       	and	r24, r24
    559c:	59 f0       	breq	.+22     	; 0x55b4 <__vector_10+0x7e>
				transmit_flush_timer = --t;
    559e:	81 50       	subi	r24, 0x01	; 1
    55a0:	80 93 97 0e 	sts	0x0E97, r24	; 0x800e97 <transmit_flush_timer>
				if (!t) {
    55a4:	81 11       	cpse	r24, r1
    55a6:	06 c0       	rjmp	.+12     	; 0x55b4 <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    55a8:	84 e0       	ldi	r24, 0x04	; 4
    55aa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    55ae:	8a e3       	ldi	r24, 0x3A	; 58
    55b0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    55b4:	80 91 96 0e 	lds	r24, 0x0E96	; 0x800e96 <reboot_timer>
			if (t) {
    55b8:	88 23       	and	r24, r24
    55ba:	31 f0       	breq	.+12     	; 0x55c8 <__vector_10+0x92>
				reboot_timer = --t;
    55bc:	81 50       	subi	r24, 0x01	; 1
    55be:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    55c2:	81 11       	cpse	r24, r1
    55c4:	01 c0       	rjmp	.+2      	; 0x55c8 <__vector_10+0x92>
    55c6:	f0 de       	rcall	.-544    	; 0x53a8 <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    55c8:	90 ff       	sbrs	r25, 0
    55ca:	0c c0       	rjmp	.+24     	; 0x55e4 <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    55cc:	80 e1       	ldi	r24, 0x10	; 16
    55ce:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    55d2:	10 92 1b 0f 	sts	0x0F1B, r1	; 0x800f1b <usb_configuration>
		usb_suspended = 1;
    55d6:	81 e0       	ldi	r24, 0x01	; 1
    55d8:	80 93 1a 0f 	sts	0x0F1A, r24	; 0x800f1a <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    55dc:	80 ea       	ldi	r24, 0xA0	; 160
    55de:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    55e2:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    55e4:	80 91 1a 0f 	lds	r24, 0x0F1A	; 0x800f1a <usb_suspended>
    55e8:	88 23       	and	r24, r24
    55ea:	79 f0       	breq	.+30     	; 0x560a <__vector_10+0xd4>
    55ec:	94 ff       	sbrs	r25, 4
    55ee:	0d c0       	rjmp	.+26     	; 0x560a <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    55f0:	86 e1       	ldi	r24, 0x16	; 22
    55f2:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    55f4:	09 b4       	in	r0, 0x29	; 41
    55f6:	00 fe       	sbrs	r0, 0
    55f8:	fd cf       	rjmp	.-6      	; 0x55f4 <__vector_10+0xbe>
		USB_CONFIG();
    55fa:	80 e9       	ldi	r24, 0x90	; 144
    55fc:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    5600:	8d e0       	ldi	r24, 0x0D	; 13
    5602:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    5606:	10 92 1a 0f 	sts	0x0F1A, r1	; 0x800f1a <usb_suspended>
		return;
	}
}
    560a:	ff 91       	pop	r31
    560c:	ef 91       	pop	r30
    560e:	bf 91       	pop	r27
    5610:	af 91       	pop	r26
    5612:	9f 91       	pop	r25
    5614:	8f 91       	pop	r24
    5616:	7f 91       	pop	r23
    5618:	6f 91       	pop	r22
    561a:	5f 91       	pop	r21
    561c:	4f 91       	pop	r20
    561e:	3f 91       	pop	r19
    5620:	2f 91       	pop	r18
    5622:	0f 90       	pop	r0
    5624:	0b be       	out	0x3b, r0	; 59
    5626:	0f 90       	pop	r0
    5628:	0f be       	out	0x3f, r0	; 63
    562a:	0f 90       	pop	r0
    562c:	1f 90       	pop	r1
    562e:	18 95       	reti

00005630 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    5630:	1f 92       	push	r1
    5632:	0f 92       	push	r0
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	0f 92       	push	r0
    5638:	11 24       	eor	r1, r1
    563a:	0b b6       	in	r0, 0x3b	; 59
    563c:	0f 92       	push	r0
    563e:	ef 92       	push	r14
    5640:	ff 92       	push	r15
    5642:	0f 93       	push	r16
    5644:	1f 93       	push	r17
    5646:	2f 93       	push	r18
    5648:	3f 93       	push	r19
    564a:	4f 93       	push	r20
    564c:	5f 93       	push	r21
    564e:	6f 93       	push	r22
    5650:	7f 93       	push	r23
    5652:	8f 93       	push	r24
    5654:	9f 93       	push	r25
    5656:	af 93       	push	r26
    5658:	bf 93       	push	r27
    565a:	cf 93       	push	r28
    565c:	df 93       	push	r29
    565e:	ef 93       	push	r30
    5660:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    5662:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    5666:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    566a:	83 ff       	sbrs	r24, 3
    566c:	20 c0       	rjmp	.+64     	; 0x56ae <__vector_11+0x7e>
		bmRequestType = UEDATX;
    566e:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    5672:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    5676:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    567a:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    567e:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5682:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    5686:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    568a:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    568e:	82 ef       	ldi	r24, 0xF2	; 242
    5690:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    5694:	c6 30       	cpi	r28, 0x06	; 6
    5696:	09 f0       	breq	.+2      	; 0x569a <__vector_11+0x6a>
    5698:	5b c0       	rjmp	.+182    	; 0x5750 <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    569a:	e4 e9       	ldi	r30, 0x94	; 148
    569c:	f6 e0       	ldi	r31, 0x06	; 6
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    569e:	85 91       	lpm	r24, Z+
    56a0:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    56a2:	e8 16       	cp	r14, r24
    56a4:	f9 06       	cpc	r15, r25
    56a6:	39 f0       	breq	.+14     	; 0x56b6 <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    56a8:	35 96       	adiw	r30, 0x05	; 5
    56aa:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    56ac:	c1 f7       	brne	.-16     	; 0x569e <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    56ae:	81 e2       	ldi	r24, 0x21	; 33
    56b0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    56b4:	2b c0       	rjmp	.+86     	; 0x570c <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    56b6:	85 91       	lpm	r24, Z+
    56b8:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    56ba:	08 17       	cp	r16, r24
    56bc:	19 07       	cpc	r17, r25
    56be:	11 f0       	breq	.+4      	; 0x56c4 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    56c0:	33 96       	adiw	r30, 0x03	; 3
					continue;
    56c2:	f3 cf       	rjmp	.-26     	; 0x56aa <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    56c4:	45 91       	lpm	r20, Z+
    56c6:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    56c8:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    56ca:	2f 3f       	cpi	r18, 0xFF	; 255
    56cc:	31 05       	cpc	r19, r1
    56ce:	19 f0       	breq	.+6      	; 0x56d6 <__vector_11+0xa6>
    56d0:	10 f0       	brcs	.+4      	; 0x56d6 <__vector_11+0xa6>
    56d2:	2f ef       	ldi	r18, 0xFF	; 255
    56d4:	30 e0       	ldi	r19, 0x00	; 0
    56d6:	82 17       	cp	r24, r18
    56d8:	08 f4       	brcc	.+2      	; 0x56dc <__vector_11+0xac>
    56da:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    56dc:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    56de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    56e2:	98 2f       	mov	r25, r24
    56e4:	95 70       	andi	r25, 0x05	; 5
    56e6:	d9 f3       	breq	.-10     	; 0x56de <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    56e8:	82 fd       	sbrc	r24, 2
    56ea:	10 c0       	rjmp	.+32     	; 0x570c <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    56ec:	82 2f       	mov	r24, r18
    56ee:	21 32       	cpi	r18, 0x21	; 33
    56f0:	08 f0       	brcs	.+2      	; 0x56f4 <__vector_11+0xc4>
    56f2:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    56f4:	98 2f       	mov	r25, r24
    56f6:	91 11       	cpse	r25, r1
    56f8:	24 c0       	rjmp	.+72     	; 0x5742 <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    56fa:	92 2f       	mov	r25, r18
    56fc:	98 1b       	sub	r25, r24
    56fe:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5700:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    5704:	91 11       	cpse	r25, r1
    5706:	1b c0       	rjmp	.+54     	; 0x573e <__vector_11+0x10e>
    5708:	20 32       	cpi	r18, 0x20	; 32
    570a:	c8 f4       	brcc	.+50     	; 0x573e <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    570c:	ff 91       	pop	r31
    570e:	ef 91       	pop	r30
    5710:	df 91       	pop	r29
    5712:	cf 91       	pop	r28
    5714:	bf 91       	pop	r27
    5716:	af 91       	pop	r26
    5718:	9f 91       	pop	r25
    571a:	8f 91       	pop	r24
    571c:	7f 91       	pop	r23
    571e:	6f 91       	pop	r22
    5720:	5f 91       	pop	r21
    5722:	4f 91       	pop	r20
    5724:	3f 91       	pop	r19
    5726:	2f 91       	pop	r18
    5728:	1f 91       	pop	r17
    572a:	0f 91       	pop	r16
    572c:	ff 90       	pop	r15
    572e:	ef 90       	pop	r14
    5730:	0f 90       	pop	r0
    5732:	0b be       	out	0x3b, r0	; 59
    5734:	0f 90       	pop	r0
    5736:	0f be       	out	0x3f, r0	; 63
    5738:	0f 90       	pop	r0
    573a:	1f 90       	pop	r1
    573c:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    573e:	28 2f       	mov	r18, r24
    5740:	ce cf       	rjmp	.-100    	; 0x56de <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    5742:	fa 01       	movw	r30, r20
    5744:	45 91       	lpm	r20, Z+
    5746:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    574a:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    574c:	91 50       	subi	r25, 0x01	; 1
    574e:	d3 cf       	rjmp	.-90     	; 0x56f6 <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    5750:	c5 30       	cpi	r28, 0x05	; 5
    5752:	49 f4       	brne	.+18     	; 0x5766 <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5754:	8e ef       	ldi	r24, 0xFE	; 254
    5756:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    575a:	c6 de       	rcall	.-628    	; 0x54e8 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    575c:	8e 2d       	mov	r24, r14
    575e:	80 68       	ori	r24, 0x80	; 128
    5760:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    5764:	d3 cf       	rjmp	.-90     	; 0x570c <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    5766:	c9 30       	cpi	r28, 0x09	; 9
    5768:	21 f5       	brne	.+72     	; 0x57b2 <__vector_11+0x182>
    576a:	d1 11       	cpse	r29, r1
    576c:	a0 cf       	rjmp	.-192    	; 0x56ae <__vector_11+0x7e>
			usb_configuration = wValue;
    576e:	e0 92 1b 0f 	sts	0x0F1B, r14	; 0x800f1b <usb_configuration>
			cdc_line_rtsdtr = 0;
    5772:	10 92 19 0f 	sts	0x0F19, r1	; 0x800f19 <__bss_end>
			transmit_flush_timer = 0;
    5776:	10 92 97 0e 	sts	0x0E97, r1	; 0x800e97 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    577a:	8e ef       	ldi	r24, 0xFE	; 254
    577c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    5780:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    5782:	e7 e5       	ldi	r30, 0x57	; 87
    5784:	f7 e0       	ldi	r31, 0x07	; 7
			for (i=1; i<5; i++) {
				UENUM = i;
    5786:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    578a:	95 91       	lpm	r25, Z+
				UECONX = en;
    578c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    5790:	99 23       	and	r25, r25
    5792:	31 f0       	breq	.+12     	; 0x57a0 <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    5794:	95 91       	lpm	r25, Z+
    5796:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    579a:	95 91       	lpm	r25, Z+
    579c:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    57a0:	8f 5f       	subi	r24, 0xFF	; 255
    57a2:	85 30       	cpi	r24, 0x05	; 5
    57a4:	81 f7       	brne	.-32     	; 0x5786 <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    57a6:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    57a8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    57ac:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    57b0:	ad cf       	rjmp	.-166    	; 0x570c <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    57b2:	c8 30       	cpi	r28, 0x08	; 8
    57b4:	61 f4       	brne	.+24     	; 0x57ce <__vector_11+0x19e>
    57b6:	d0 38       	cpi	r29, 0x80	; 128
    57b8:	09 f0       	breq	.+2      	; 0x57bc <__vector_11+0x18c>
			usb_wait_in_ready();
    57ba:	79 cf       	rjmp	.-270    	; 0x56ae <__vector_11+0x7e>
    57bc:	95 de       	rcall	.-726    	; 0x54e8 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    57be:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <usb_configuration>
    57c2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    57c6:	8e ef       	ldi	r24, 0xFE	; 254
    57c8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    57cc:	9f cf       	rjmp	.-194    	; 0x570c <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    57ce:	c1 32       	cpi	r28, 0x21	; 33
    57d0:	79 f4       	brne	.+30     	; 0x57f0 <__vector_11+0x1c0>
    57d2:	d1 3a       	cpi	r29, 0xA1	; 161
    57d4:	09 f0       	breq	.+2      	; 0x57d8 <__vector_11+0x1a8>
			usb_wait_in_ready();
    57d6:	6b cf       	rjmp	.-298    	; 0x56ae <__vector_11+0x7e>
    57d8:	87 de       	rcall	.-754    	; 0x54e8 <usb_wait_in_ready>
			p = cdc_line_coding;
    57da:	ef e0       	ldi	r30, 0x0F	; 15
    57dc:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    57de:	80 81       	ld	r24, Z
    57e0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    57e4:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    57e6:	81 e0       	ldi	r24, 0x01	; 1
    57e8:	e6 31       	cpi	r30, 0x16	; 22
    57ea:	f8 07       	cpc	r31, r24
    57ec:	c1 f7       	brne	.-16     	; 0x57de <__vector_11+0x1ae>
    57ee:	eb cf       	rjmp	.-42     	; 0x57c6 <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    57f0:	c0 32       	cpi	r28, 0x20	; 32
    57f2:	09 f0       	breq	.+2      	; 0x57f6 <__vector_11+0x1c6>
    57f4:	47 c0       	rjmp	.+142    	; 0x5884 <__vector_11+0x254>
    57f6:	d1 32       	cpi	r29, 0x21	; 33
    57f8:	09 f0       	breq	.+2      	; 0x57fc <__vector_11+0x1cc>
    57fa:	59 cf       	rjmp	.-334    	; 0x56ae <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    57fc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5800:	82 ff       	sbrs	r24, 2
    5802:	fc cf       	rjmp	.-8      	; 0x57fc <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    5804:	ef e0       	ldi	r30, 0x0F	; 15
    5806:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    5808:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    580c:	80 83       	st	Z, r24
    580e:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    5810:	91 e0       	ldi	r25, 0x01	; 1
    5812:	e6 31       	cpi	r30, 0x16	; 22
    5814:	f9 07       	cpc	r31, r25
    5816:	c1 f7       	brne	.-16     	; 0x5808 <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    5818:	8b ef       	ldi	r24, 0xFB	; 251
    581a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    581e:	8e ef       	ldi	r24, 0xFE	; 254
    5820:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    5824:	30 91 0f 01 	lds	r19, 0x010F	; 0x80010f <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    5828:	40 91 10 01 	lds	r20, 0x0110	; 0x800110 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    582c:	80 91 11 01 	lds	r24, 0x0111	; 0x800111 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    5830:	20 91 12 01 	lds	r18, 0x0112	; 0x800112 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    5834:	90 e0       	ldi	r25, 0x00	; 0
    5836:	b0 e0       	ldi	r27, 0x00	; 0
    5838:	a0 e0       	ldi	r26, 0x00	; 0
    583a:	dc 01       	movw	r26, r24
    583c:	99 27       	eor	r25, r25
    583e:	88 27       	eor	r24, r24
    5840:	94 2b       	or	r25, r20
    5842:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    5844:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    5846:	86 38       	cpi	r24, 0x86	; 134
    5848:	91 05       	cpc	r25, r1
    584a:	a1 05       	cpc	r26, r1
    584c:	b1 05       	cpc	r27, r1
    584e:	21 f4       	brne	.+8      	; 0x5858 <__vector_11+0x228>
    5850:	8f e0       	ldi	r24, 0x0F	; 15
    5852:	80 93 96 0e 	sts	0x0E96, r24	; 0x800e96 <reboot_timer>
    5856:	5a cf       	rjmp	.-332    	; 0x570c <__vector_11+0xdc>
			if (baud == 150UL) {
    5858:	86 39       	cpi	r24, 0x96	; 150
    585a:	91 05       	cpc	r25, r1
    585c:	a1 05       	cpc	r26, r1
    585e:	b1 05       	cpc	r27, r1
    5860:	09 f0       	breq	.+2      	; 0x5864 <__vector_11+0x234>
    5862:	54 cf       	rjmp	.-344    	; 0x570c <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    5864:	84 e0       	ldi	r24, 0x04	; 4
    5866:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    586a:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    586c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    5870:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    5872:	09 f4       	brne	.+2      	; 0x5876 <__vector_11+0x246>
    5874:	b6 dd       	rcall	.-1172   	; 0x53e2 <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    5876:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    587a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    587e:	82 fd       	sbrc	r24, 2
    5880:	fc cf       	rjmp	.-8      	; 0x587a <__vector_11+0x24a>
    5882:	f4 cf       	rjmp	.-24     	; 0x586c <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    5884:	c2 32       	cpi	r28, 0x22	; 34
    5886:	39 f4       	brne	.+14     	; 0x5896 <__vector_11+0x266>
    5888:	d1 32       	cpi	r29, 0x21	; 33
    588a:	09 f0       	breq	.+2      	; 0x588e <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    588c:	10 cf       	rjmp	.-480    	; 0x56ae <__vector_11+0x7e>
    588e:	e0 92 19 0f 	sts	0x0F19, r14	; 0x800f19 <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    5892:	2a de       	rcall	.-940    	; 0x54e8 <usb_wait_in_ready>
    5894:	98 cf       	rjmp	.-208    	; 0x57c6 <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    5896:	c3 32       	cpi	r28, 0x23	; 35
    5898:	21 f4       	brne	.+8      	; 0x58a2 <__vector_11+0x272>
    589a:	d1 32       	cpi	r29, 0x21	; 33
    589c:	09 f0       	breq	.+2      	; 0x58a0 <__vector_11+0x270>
    589e:	07 cf       	rjmp	.-498    	; 0x56ae <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    58a0:	f8 cf       	rjmp	.-16     	; 0x5892 <__vector_11+0x262>
    58a2:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    58a4:	11 c0       	rjmp	.+34     	; 0x58c8 <__vector_11+0x298>
    58a6:	20 de       	rcall	.-960    	; 0x54e8 <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    58a8:	d2 38       	cpi	r29, 0x82	; 130
    58aa:	49 f4       	brne	.+18     	; 0x58be <__vector_11+0x28e>
				UENUM = wIndex;
    58ac:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    58b0:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    58b4:	c5 fb       	bst	r28, 5
    58b6:	cc 27       	eor	r28, r28
    58b8:	c0 f9       	bld	r28, 0
				UENUM = 0;
    58ba:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    58be:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    58c2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    58c6:	7f cf       	rjmp	.-258    	; 0x57c6 <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    58c8:	8c 2f       	mov	r24, r28
    58ca:	8d 7f       	andi	r24, 0xFD	; 253
    58cc:	81 30       	cpi	r24, 0x01	; 1
    58ce:	09 f0       	breq	.+2      	; 0x58d2 <__vector_11+0x2a2>
    58d0:	ee ce       	rjmp	.-548    	; 0x56ae <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    58d2:	d2 30       	cpi	r29, 0x02	; 2
    58d4:	09 f0       	breq	.+2      	; 0x58d8 <__vector_11+0x2a8>
    58d6:	eb ce       	rjmp	.-554    	; 0x56ae <__vector_11+0x7e>
    58d8:	ef 28       	or	r14, r15
    58da:	09 f0       	breq	.+2      	; 0x58de <__vector_11+0x2ae>
    58dc:	e8 ce       	rjmp	.-560    	; 0x56ae <__vector_11+0x7e>
			i = wIndex & 0x7F;
    58de:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    58e0:	8f ef       	ldi	r24, 0xFF	; 255
    58e2:	80 0f       	add	r24, r16
    58e4:	86 30       	cpi	r24, 0x06	; 6
    58e6:	08 f0       	brcs	.+2      	; 0x58ea <__vector_11+0x2ba>
    58e8:	e2 ce       	rjmp	.-572    	; 0x56ae <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    58ea:	8e ef       	ldi	r24, 0xFE	; 254
    58ec:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    58f0:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    58f4:	c3 30       	cpi	r28, 0x03	; 3
    58f6:	09 f4       	brne	.+2      	; 0x58fa <__vector_11+0x2ca>
    58f8:	da ce       	rjmp	.-588    	; 0x56ae <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    58fa:	89 e1       	ldi	r24, 0x19	; 25
    58fc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    5900:	81 e0       	ldi	r24, 0x01	; 1
    5902:	90 e0       	ldi	r25, 0x00	; 0
    5904:	01 c0       	rjmp	.+2      	; 0x5908 <__vector_11+0x2d8>
    5906:	88 0f       	add	r24, r24
    5908:	0a 95       	dec	r16
    590a:	ea f7       	brpl	.-6      	; 0x5906 <__vector_11+0x2d6>
    590c:	4d cf       	rjmp	.-358    	; 0x57a8 <__vector_11+0x178>

0000590e <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    590e:	50 91 cc 0e 	lds	r21, 0x0ECC	; 0x800ecc <rx_buffer_head>
    5912:	40 91 cb 0e 	lds	r20, 0x0ECB	; 0x800ecb <rx_buffer_tail>
    5916:	85 2f       	mov	r24, r21
    5918:	90 e0       	ldi	r25, 0x00	; 0
    591a:	24 2f       	mov	r18, r20
    591c:	30 e0       	ldi	r19, 0x00	; 0
    591e:	54 17       	cp	r21, r20
    5920:	18 f0       	brcs	.+6      	; 0x5928 <HardwareSerial::available()+0x1a>
    5922:	82 1b       	sub	r24, r18
    5924:	93 0b       	sbc	r25, r19
    5926:	08 95       	ret
    5928:	80 5c       	subi	r24, 0xC0	; 192
    592a:	9f 4f       	sbci	r25, 0xFF	; 255
    592c:	fa cf       	rjmp	.-12     	; 0x5922 <HardwareSerial::available()+0x14>

0000592e <HardwareSerial::availableForWrite()>:
    592e:	50 91 cc 0e 	lds	r21, 0x0ECC	; 0x800ecc <rx_buffer_head>
    5932:	40 91 cb 0e 	lds	r20, 0x0ECB	; 0x800ecb <rx_buffer_tail>
    5936:	25 2f       	mov	r18, r21
    5938:	30 e0       	ldi	r19, 0x00	; 0
    593a:	84 2f       	mov	r24, r20
    593c:	90 e0       	ldi	r25, 0x00	; 0
    593e:	82 1b       	sub	r24, r18
    5940:	93 0b       	sbc	r25, r19
    5942:	54 17       	cp	r21, r20
    5944:	10 f0       	brcs	.+4      	; 0x594a <HardwareSerial::availableForWrite()+0x1c>
    5946:	87 96       	adiw	r24, 0x27	; 39
    5948:	08 95       	ret
    594a:	01 97       	sbiw	r24, 0x01	; 1
    594c:	08 95       	ret

0000594e <HardwareSerial::peek()>:
    594e:	80 91 cc 0e 	lds	r24, 0x0ECC	; 0x800ecc <rx_buffer_head>
    5952:	e0 91 cb 0e 	lds	r30, 0x0ECB	; 0x800ecb <rx_buffer_tail>
    5956:	8e 17       	cp	r24, r30
    5958:	51 f0       	breq	.+20     	; 0x596e <HardwareSerial::peek()+0x20>
    595a:	ef 5f       	subi	r30, 0xFF	; 255
    595c:	e0 34       	cpi	r30, 0x40	; 64
    595e:	08 f0       	brcs	.+2      	; 0x5962 <HardwareSerial::peek()+0x14>
    5960:	e0 e0       	ldi	r30, 0x00	; 0
    5962:	f0 e0       	ldi	r31, 0x00	; 0
    5964:	e3 53       	subi	r30, 0x33	; 51
    5966:	f1 4f       	sbci	r31, 0xF1	; 241
    5968:	80 81       	ld	r24, Z
    596a:	90 e0       	ldi	r25, 0x00	; 0
    596c:	08 95       	ret
    596e:	8f ef       	ldi	r24, 0xFF	; 255
    5970:	9f ef       	ldi	r25, 0xFF	; 255
    5972:	08 95       	ret

00005974 <HardwareSerial::read()>:
    5974:	90 91 cc 0e 	lds	r25, 0x0ECC	; 0x800ecc <rx_buffer_head>
    5978:	80 91 cb 0e 	lds	r24, 0x0ECB	; 0x800ecb <rx_buffer_tail>
    597c:	98 17       	cp	r25, r24
    597e:	79 f0       	breq	.+30     	; 0x599e <HardwareSerial::read()+0x2a>
    5980:	90 91 cb 0e 	lds	r25, 0x0ECB	; 0x800ecb <rx_buffer_tail>
    5984:	9f 5f       	subi	r25, 0xFF	; 255
    5986:	90 34       	cpi	r25, 0x40	; 64
    5988:	08 f0       	brcs	.+2      	; 0x598c <HardwareSerial::read()+0x18>
    598a:	90 e0       	ldi	r25, 0x00	; 0
    598c:	e9 2f       	mov	r30, r25
    598e:	f0 e0       	ldi	r31, 0x00	; 0
    5990:	e3 53       	subi	r30, 0x33	; 51
    5992:	f1 4f       	sbci	r31, 0xF1	; 241
    5994:	80 81       	ld	r24, Z
    5996:	90 93 cb 0e 	sts	0x0ECB, r25	; 0x800ecb <rx_buffer_tail>
    599a:	90 e0       	ldi	r25, 0x00	; 0
    599c:	08 95       	ret
    599e:	8f ef       	ldi	r24, 0xFF	; 255
    59a0:	9f ef       	ldi	r25, 0xFF	; 255
    59a2:	08 95       	ret

000059a4 <HardwareSerial::flush()>:
    59a4:	80 91 a0 0e 	lds	r24, 0x0EA0	; 0x800ea0 <transmitting>
    59a8:	81 11       	cpse	r24, r1
    59aa:	fc cf       	rjmp	.-8      	; 0x59a4 <HardwareSerial::flush()>
    59ac:	08 95       	ret

000059ae <HardwareSerial::write(unsigned char)>:
    59ae:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    59b2:	23 fd       	sbrc	r18, 3
    59b4:	06 c0       	rjmp	.+12     	; 0x59c2 <HardwareSerial::write(unsigned char)+0x14>
    59b6:	21 e0       	ldi	r18, 0x01	; 1
    59b8:	fc 01       	movw	r30, r24
    59ba:	22 83       	std	Z+2, r18	; 0x02
    59bc:	90 e0       	ldi	r25, 0x00	; 0
    59be:	80 e0       	ldi	r24, 0x00	; 0
    59c0:	08 95       	ret
    59c2:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tx_enable_pin>
    59c6:	8f 3f       	cpi	r24, 0xFF	; 255
    59c8:	41 f0       	breq	.+16     	; 0x59da <HardwareSerial::write(unsigned char)+0x2c>
    59ca:	80 91 a0 0e 	lds	r24, 0x0EA0	; 0x800ea0 <transmitting>
    59ce:	81 11       	cpse	r24, r1
    59d0:	04 c0       	rjmp	.+8      	; 0x59da <HardwareSerial::write(unsigned char)+0x2c>
    59d2:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <tx_enable_pin>
    59d6:	f0 e0       	ldi	r31, 0x00	; 0
    59d8:	ee db       	rcall	.-2084   	; 0x51b6 <_digitalWrite_HIGH>
    59da:	90 91 a2 0e 	lds	r25, 0x0EA2	; 0x800ea2 <tx_buffer_head>
    59de:	80 91 a1 0e 	lds	r24, 0x0EA1	; 0x800ea1 <tx_buffer_tail>
    59e2:	98 13       	cpse	r25, r24
    59e4:	04 c0       	rjmp	.+8      	; 0x59ee <HardwareSerial::write(unsigned char)+0x40>
    59e6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    59ea:	85 fd       	sbrc	r24, 5
    59ec:	19 c0       	rjmp	.+50     	; 0x5a20 <HardwareSerial::write(unsigned char)+0x72>
    59ee:	80 91 a2 0e 	lds	r24, 0x0EA2	; 0x800ea2 <tx_buffer_head>
    59f2:	8f 5f       	subi	r24, 0xFF	; 255
    59f4:	88 32       	cpi	r24, 0x28	; 40
    59f6:	f8 f4       	brcc	.+62     	; 0x5a36 <HardwareSerial::write(unsigned char)+0x88>
    59f8:	90 91 a1 0e 	lds	r25, 0x0EA1	; 0x800ea1 <tx_buffer_tail>
    59fc:	98 17       	cp	r25, r24
    59fe:	e1 f3       	breq	.-8      	; 0x59f8 <HardwareSerial::write(unsigned char)+0x4a>
    5a00:	e8 2f       	mov	r30, r24
    5a02:	f0 e0       	ldi	r31, 0x00	; 0
    5a04:	ed 55       	subi	r30, 0x5D	; 93
    5a06:	f1 4f       	sbci	r31, 0xF1	; 241
    5a08:	60 83       	st	Z, r22
    5a0a:	91 e0       	ldi	r25, 0x01	; 1
    5a0c:	90 93 a0 0e 	sts	0x0EA0, r25	; 0x800ea0 <transmitting>
    5a10:	80 93 a2 0e 	sts	0x0EA2, r24	; 0x800ea2 <tx_buffer_head>
    5a14:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5a18:	80 62       	ori	r24, 0x20	; 32
    5a1a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5a1e:	08 c0       	rjmp	.+16     	; 0x5a30 <HardwareSerial::write(unsigned char)+0x82>
    5a20:	8f b7       	in	r24, 0x3f	; 63
    5a22:	f8 94       	cli
    5a24:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5a28:	91 e0       	ldi	r25, 0x01	; 1
    5a2a:	90 93 a0 0e 	sts	0x0EA0, r25	; 0x800ea0 <transmitting>
    5a2e:	8f bf       	out	0x3f, r24	; 63
    5a30:	81 e0       	ldi	r24, 0x01	; 1
    5a32:	90 e0       	ldi	r25, 0x00	; 0
    5a34:	08 95       	ret
    5a36:	80 e0       	ldi	r24, 0x00	; 0
    5a38:	df cf       	rjmp	.-66     	; 0x59f8 <HardwareSerial::write(unsigned char)+0x4a>

00005a3a <HardwareSerial::_begin(unsigned int, unsigned char)>:
    5a3a:	1f 93       	push	r17
    5a3c:	cf 93       	push	r28
    5a3e:	df 93       	push	r29
    5a40:	eb 01       	movw	r28, r22
    5a42:	14 2f       	mov	r17, r20
    5a44:	40 93 16 01 	sts	0x0116, r20	; 0x800116 <tx_enable_pin>
    5a48:	4f 3f       	cpi	r20, 0xFF	; 255
    5a4a:	29 f0       	breq	.+10     	; 0x5a56 <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    5a4c:	84 2f       	mov	r24, r20
    5a4e:	a2 db       	rcall	.-2236   	; 0x5194 <_pinMode_output>
    5a50:	e1 2f       	mov	r30, r17
    5a52:	f0 e0       	ldi	r31, 0x00	; 0
    5a54:	b6 db       	rcall	.-2196   	; 0x51c2 <_digitalWrite_LOW>
    5a56:	c0 ff       	sbrs	r28, 0
    5a58:	24 c0       	rjmp	.+72     	; 0x5aa2 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    5a5a:	c1 30       	cpi	r28, 0x01	; 1
    5a5c:	80 e1       	ldi	r24, 0x10	; 16
    5a5e:	d8 07       	cpc	r29, r24
    5a60:	00 f5       	brcc	.+64     	; 0x5aa2 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    5a62:	82 e0       	ldi	r24, 0x02	; 2
    5a64:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5a68:	21 97       	sbiw	r28, 0x01	; 1
    5a6a:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    5a6e:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    5a72:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5a76:	83 fd       	sbrc	r24, 3
    5a78:	10 c0       	rjmp	.+32     	; 0x5a9a <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    5a7a:	10 92 cc 0e 	sts	0x0ECC, r1	; 0x800ecc <rx_buffer_head>
    5a7e:	10 92 cb 0e 	sts	0x0ECB, r1	; 0x800ecb <rx_buffer_tail>
    5a82:	10 92 a2 0e 	sts	0x0EA2, r1	; 0x800ea2 <tx_buffer_head>
    5a86:	10 92 a1 0e 	sts	0x0EA1, r1	; 0x800ea1 <tx_buffer_tail>
    5a8a:	10 92 a0 0e 	sts	0x0EA0, r1	; 0x800ea0 <transmitting>
    5a8e:	86 e0       	ldi	r24, 0x06	; 6
    5a90:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    5a94:	88 ed       	ldi	r24, 0xD8	; 216
    5a96:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5a9a:	df 91       	pop	r29
    5a9c:	cf 91       	pop	r28
    5a9e:	1f 91       	pop	r17
    5aa0:	08 95       	ret
    5aa2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5aa6:	d6 95       	lsr	r29
    5aa8:	c7 95       	ror	r28
    5aaa:	de cf       	rjmp	.-68     	; 0x5a68 <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

00005aac <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    5aac:	1f 92       	push	r1
    5aae:	0f 92       	push	r0
    5ab0:	0f b6       	in	r0, 0x3f	; 63
    5ab2:	0f 92       	push	r0
    5ab4:	11 24       	eor	r1, r1
    5ab6:	0b b6       	in	r0, 0x3b	; 59
    5ab8:	0f 92       	push	r0
    5aba:	2f 93       	push	r18
    5abc:	8f 93       	push	r24
    5abe:	9f 93       	push	r25
    5ac0:	ef 93       	push	r30
    5ac2:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    5ac4:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    5ac8:	80 91 cc 0e 	lds	r24, 0x0ECC	; 0x800ecc <rx_buffer_head>
    5acc:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    5ace:	80 34       	cpi	r24, 0x40	; 64
    5ad0:	08 f0       	brcs	.+2      	; 0x5ad4 <__vector_25+0x28>
    5ad2:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    5ad4:	20 91 cb 0e 	lds	r18, 0x0ECB	; 0x800ecb <rx_buffer_tail>
    5ad8:	28 17       	cp	r18, r24
    5ada:	39 f0       	breq	.+14     	; 0x5aea <__vector_25+0x3e>
		rx_buffer[i] = c;
    5adc:	e8 2f       	mov	r30, r24
    5ade:	f0 e0       	ldi	r31, 0x00	; 0
    5ae0:	e3 53       	subi	r30, 0x33	; 51
    5ae2:	f1 4f       	sbci	r31, 0xF1	; 241
    5ae4:	90 83       	st	Z, r25
		rx_buffer_head = i;
    5ae6:	80 93 cc 0e 	sts	0x0ECC, r24	; 0x800ecc <rx_buffer_head>
	}
}
    5aea:	ff 91       	pop	r31
    5aec:	ef 91       	pop	r30
    5aee:	9f 91       	pop	r25
    5af0:	8f 91       	pop	r24
    5af2:	2f 91       	pop	r18
    5af4:	0f 90       	pop	r0
    5af6:	0b be       	out	0x3b, r0	; 59
    5af8:	0f 90       	pop	r0
    5afa:	0f be       	out	0x3f, r0	; 63
    5afc:	0f 90       	pop	r0
    5afe:	1f 90       	pop	r1
    5b00:	18 95       	reti

00005b02 <__vector_26>:

ISR(USART1_UDRE_vect)
{
    5b02:	1f 92       	push	r1
    5b04:	0f 92       	push	r0
    5b06:	0f b6       	in	r0, 0x3f	; 63
    5b08:	0f 92       	push	r0
    5b0a:	11 24       	eor	r1, r1
    5b0c:	0b b6       	in	r0, 0x3b	; 59
    5b0e:	0f 92       	push	r0
    5b10:	8f 93       	push	r24
    5b12:	9f 93       	push	r25
    5b14:	ef 93       	push	r30
    5b16:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    5b18:	90 91 a2 0e 	lds	r25, 0x0EA2	; 0x800ea2 <tx_buffer_head>
    5b1c:	80 91 a1 0e 	lds	r24, 0x0EA1	; 0x800ea1 <tx_buffer_tail>
    5b20:	98 13       	cpse	r25, r24
    5b22:	10 c0       	rjmp	.+32     	; 0x5b44 <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    5b24:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5b28:	8f 7d       	andi	r24, 0xDF	; 223
    5b2a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    5b2e:	ff 91       	pop	r31
    5b30:	ef 91       	pop	r30
    5b32:	9f 91       	pop	r25
    5b34:	8f 91       	pop	r24
    5b36:	0f 90       	pop	r0
    5b38:	0b be       	out	0x3b, r0	; 59
    5b3a:	0f 90       	pop	r0
    5b3c:	0f be       	out	0x3f, r0	; 63
    5b3e:	0f 90       	pop	r0
    5b40:	1f 90       	pop	r1
    5b42:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    5b44:	80 91 a1 0e 	lds	r24, 0x0EA1	; 0x800ea1 <tx_buffer_tail>
    5b48:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    5b4a:	88 32       	cpi	r24, 0x28	; 40
    5b4c:	08 f0       	brcs	.+2      	; 0x5b50 <__vector_26+0x4e>
    5b4e:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    5b50:	e8 2f       	mov	r30, r24
    5b52:	f0 e0       	ldi	r31, 0x00	; 0
    5b54:	ed 55       	subi	r30, 0x5D	; 93
    5b56:	f1 4f       	sbci	r31, 0xF1	; 241
    5b58:	90 81       	ld	r25, Z
    5b5a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    5b5e:	80 93 a1 0e 	sts	0x0EA1, r24	; 0x800ea1 <tx_buffer_tail>
	}
}
    5b62:	e5 cf       	rjmp	.-54     	; 0x5b2e <__vector_26+0x2c>

00005b64 <__vector_27>:

ISR(USART1_TX_vect)
{
    5b64:	1f 92       	push	r1
    5b66:	0f 92       	push	r0
    5b68:	0f b6       	in	r0, 0x3f	; 63
    5b6a:	0f 92       	push	r0
    5b6c:	11 24       	eor	r1, r1
    5b6e:	0b b6       	in	r0, 0x3b	; 59
    5b70:	0f 92       	push	r0
    5b72:	8f 93       	push	r24
    5b74:	ef 93       	push	r30
    5b76:	ff 93       	push	r31
	transmitting = 0;
    5b78:	10 92 a0 0e 	sts	0x0EA0, r1	; 0x800ea0 <transmitting>
	if (tx_enable_pin < 255) {
    5b7c:	80 91 16 01 	lds	r24, 0x0116	; 0x800116 <tx_enable_pin>
    5b80:	8f 3f       	cpi	r24, 0xFF	; 255
    5b82:	21 f0       	breq	.+8      	; 0x5b8c <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    5b84:	e0 91 16 01 	lds	r30, 0x0116	; 0x800116 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    5b88:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    5b8a:	1b db       	rcall	.-2506   	; 0x51c2 <_digitalWrite_LOW>
	}
}
    5b8c:	ff 91       	pop	r31
    5b8e:	ef 91       	pop	r30
    5b90:	8f 91       	pop	r24
    5b92:	0f 90       	pop	r0
    5b94:	0b be       	out	0x3b, r0	; 59
    5b96:	0f 90       	pop	r0
    5b98:	0f be       	out	0x3f, r0	; 63
    5b9a:	0f 90       	pop	r0
    5b9c:	1f 90       	pop	r1
    5b9e:	18 95       	reti

00005ba0 <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    5ba0:	e8 e9       	ldi	r30, 0x98	; 152
    5ba2:	fe e0       	ldi	r31, 0x0E	; 14
    5ba4:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    5ba6:	88 ee       	ldi	r24, 0xE8	; 232
    5ba8:	93 e0       	ldi	r25, 0x03	; 3
    5baa:	a0 e0       	ldi	r26, 0x00	; 0
    5bac:	b0 e0       	ldi	r27, 0x00	; 0
    5bae:	83 83       	std	Z+3, r24	; 0x03
    5bb0:	94 83       	std	Z+4, r25	; 0x04
    5bb2:	a5 83       	std	Z+5, r26	; 0x05
    5bb4:	b6 83       	std	Z+6, r27	; 0x06
    5bb6:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    5bb8:	88 e7       	ldi	r24, 0x78	; 120
    5bba:	97 e0       	ldi	r25, 0x07	; 7
    5bbc:	91 83       	std	Z+1, r25	; 0x01
    5bbe:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    5bc0:	08 95       	ret

00005bc2 <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    5bc2:	9a da       	rcall	.-2764   	; 0x50f8 <_init_Teensyduino_internal_>

	setup();
    5bc4:	0e 94 ed 0f 	call	0x1fda	; 0x1fda <setup>
    
	while (1) {
		loop();
    5bc8:	0e 94 d7 18 	call	0x31ae	; 0x31ae <loop>
    5bcc:	fd cf       	rjmp	.-6      	; 0x5bc8 <main+0x6>

00005bce <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    5bce:	73 c8       	rjmp	.-3866   	; 0x4cb6 <malloc>

00005bd0 <__cxa_guard_acquire>:
    5bd0:	fc 01       	movw	r30, r24
    5bd2:	81 e0       	ldi	r24, 0x01	; 1
    5bd4:	90 e0       	ldi	r25, 0x00	; 0
    5bd6:	20 81       	ld	r18, Z
    5bd8:	22 23       	and	r18, r18
    5bda:	11 f0       	breq	.+4      	; 0x5be0 <__cxa_guard_acquire+0x10>
    5bdc:	90 e0       	ldi	r25, 0x00	; 0
    5bde:	80 e0       	ldi	r24, 0x00	; 0
    5be0:	08 95       	ret

00005be2 <__cxa_guard_release>:
    5be2:	21 e0       	ldi	r18, 0x01	; 1
    5be4:	fc 01       	movw	r30, r24
    5be6:	20 83       	st	Z, r18
    5be8:	08 95       	ret

00005bea <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    5bea:	08 95       	ret

00005bec <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    5bec:	cf 92       	push	r12
    5bee:	df 92       	push	r13
    5bf0:	ef 92       	push	r14
    5bf2:	ff 92       	push	r15
    5bf4:	0f 93       	push	r16
    5bf6:	1f 93       	push	r17
    5bf8:	cf 93       	push	r28
    5bfa:	df 93       	push	r29
    5bfc:	6c 01       	movw	r12, r24
    5bfe:	eb 01       	movw	r28, r22
    5c00:	7b 01       	movw	r14, r22
    5c02:	e4 0e       	add	r14, r20
    5c04:	f5 1e       	adc	r15, r21
    5c06:	10 e0       	ldi	r17, 0x00	; 0
    5c08:	00 e0       	ldi	r16, 0x00	; 0
    5c0a:	ce 15       	cp	r28, r14
    5c0c:	df 05       	cpc	r29, r15
    5c0e:	61 f0       	breq	.+24     	; 0x5c28 <Print::write(unsigned char const*, unsigned int)+0x3c>
    5c10:	69 91       	ld	r22, Y+
    5c12:	d6 01       	movw	r26, r12
    5c14:	ed 91       	ld	r30, X+
    5c16:	fc 91       	ld	r31, X
    5c18:	01 90       	ld	r0, Z+
    5c1a:	f0 81       	ld	r31, Z
    5c1c:	e0 2d       	mov	r30, r0
    5c1e:	c6 01       	movw	r24, r12
    5c20:	09 95       	icall
    5c22:	08 0f       	add	r16, r24
    5c24:	19 1f       	adc	r17, r25
    5c26:	f1 cf       	rjmp	.-30     	; 0x5c0a <Print::write(unsigned char const*, unsigned int)+0x1e>
    5c28:	c8 01       	movw	r24, r16
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	1f 91       	pop	r17
    5c30:	0f 91       	pop	r16
    5c32:	ff 90       	pop	r15
    5c34:	ef 90       	pop	r14
    5c36:	df 90       	pop	r13
    5c38:	cf 90       	pop	r12
    5c3a:	08 95       	ret

00005c3c <Print::print(String const&)>:
    5c3c:	8f 92       	push	r8
    5c3e:	9f 92       	push	r9
    5c40:	af 92       	push	r10
    5c42:	bf 92       	push	r11
    5c44:	cf 92       	push	r12
    5c46:	df 92       	push	r13
    5c48:	ef 92       	push	r14
    5c4a:	ff 92       	push	r15
    5c4c:	0f 93       	push	r16
    5c4e:	1f 93       	push	r17
    5c50:	cf 93       	push	r28
    5c52:	df 93       	push	r29
    5c54:	cd b7       	in	r28, 0x3d	; 61
    5c56:	de b7       	in	r29, 0x3e	; 62
    5c58:	a1 97       	sbiw	r28, 0x21	; 33
    5c5a:	0f b6       	in	r0, 0x3f	; 63
    5c5c:	f8 94       	cli
    5c5e:	de bf       	out	0x3e, r29	; 62
    5c60:	0f be       	out	0x3f, r0	; 63
    5c62:	cd bf       	out	0x3d, r28	; 61
    5c64:	5c 01       	movw	r10, r24
    5c66:	4b 01       	movw	r8, r22
    5c68:	db 01       	movw	r26, r22
    5c6a:	14 96       	adiw	r26, 0x04	; 4
    5c6c:	0d 91       	ld	r16, X+
    5c6e:	1c 91       	ld	r17, X
    5c70:	d1 2c       	mov	r13, r1
    5c72:	c1 2c       	mov	r12, r1
    5c74:	f1 2c       	mov	r15, r1
    5c76:	e1 2c       	mov	r14, r1
    5c78:	01 15       	cp	r16, r1
    5c7a:	11 05       	cpc	r17, r1
    5c7c:	01 f1       	breq	.+64     	; 0x5cbe <Print::print(String const&)+0x82>
    5c7e:	96 01       	movw	r18, r12
    5c80:	41 e2       	ldi	r20, 0x21	; 33
    5c82:	50 e0       	ldi	r21, 0x00	; 0
    5c84:	be 01       	movw	r22, r28
    5c86:	6f 5f       	subi	r22, 0xFF	; 255
    5c88:	7f 4f       	sbci	r23, 0xFF	; 255
    5c8a:	c4 01       	movw	r24, r8
    5c8c:	5a d3       	rcall	.+1716   	; 0x6342 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    5c8e:	a8 01       	movw	r20, r16
    5c90:	01 32       	cpi	r16, 0x21	; 33
    5c92:	11 05       	cpc	r17, r1
    5c94:	10 f0       	brcs	.+4      	; 0x5c9a <Print::print(String const&)+0x5e>
    5c96:	40 e2       	ldi	r20, 0x20	; 32
    5c98:	50 e0       	ldi	r21, 0x00	; 0
    5c9a:	c4 0e       	add	r12, r20
    5c9c:	d5 1e       	adc	r13, r21
    5c9e:	04 1b       	sub	r16, r20
    5ca0:	15 0b       	sbc	r17, r21
    5ca2:	d5 01       	movw	r26, r10
    5ca4:	ed 91       	ld	r30, X+
    5ca6:	fc 91       	ld	r31, X
    5ca8:	02 80       	ldd	r0, Z+2	; 0x02
    5caa:	f3 81       	ldd	r31, Z+3	; 0x03
    5cac:	e0 2d       	mov	r30, r0
    5cae:	be 01       	movw	r22, r28
    5cb0:	6f 5f       	subi	r22, 0xFF	; 255
    5cb2:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb4:	c5 01       	movw	r24, r10
    5cb6:	09 95       	icall
    5cb8:	e8 0e       	add	r14, r24
    5cba:	f9 1e       	adc	r15, r25
    5cbc:	dd cf       	rjmp	.-70     	; 0x5c78 <Print::print(String const&)+0x3c>
    5cbe:	c7 01       	movw	r24, r14
    5cc0:	a1 96       	adiw	r28, 0x21	; 33
    5cc2:	0f b6       	in	r0, 0x3f	; 63
    5cc4:	f8 94       	cli
    5cc6:	de bf       	out	0x3e, r29	; 62
    5cc8:	0f be       	out	0x3f, r0	; 63
    5cca:	cd bf       	out	0x3d, r28	; 61
    5ccc:	df 91       	pop	r29
    5cce:	cf 91       	pop	r28
    5cd0:	1f 91       	pop	r17
    5cd2:	0f 91       	pop	r16
    5cd4:	ff 90       	pop	r15
    5cd6:	ef 90       	pop	r14
    5cd8:	df 90       	pop	r13
    5cda:	cf 90       	pop	r12
    5cdc:	bf 90       	pop	r11
    5cde:	af 90       	pop	r10
    5ce0:	9f 90       	pop	r9
    5ce2:	8f 90       	pop	r8
    5ce4:	08 95       	ret

00005ce6 <Print::println()>:
    5ce6:	cf 93       	push	r28
    5ce8:	df 93       	push	r29
    5cea:	00 d0       	rcall	.+0      	; 0x5cec <Print::println()+0x6>
    5cec:	cd b7       	in	r28, 0x3d	; 61
    5cee:	de b7       	in	r29, 0x3e	; 62
    5cf0:	2d e0       	ldi	r18, 0x0D	; 13
    5cf2:	29 83       	std	Y+1, r18	; 0x01
    5cf4:	2a e0       	ldi	r18, 0x0A	; 10
    5cf6:	2a 83       	std	Y+2, r18	; 0x02
    5cf8:	dc 01       	movw	r26, r24
    5cfa:	ed 91       	ld	r30, X+
    5cfc:	fc 91       	ld	r31, X
    5cfe:	02 80       	ldd	r0, Z+2	; 0x02
    5d00:	f3 81       	ldd	r31, Z+3	; 0x03
    5d02:	e0 2d       	mov	r30, r0
    5d04:	42 e0       	ldi	r20, 0x02	; 2
    5d06:	50 e0       	ldi	r21, 0x00	; 0
    5d08:	be 01       	movw	r22, r28
    5d0a:	6f 5f       	subi	r22, 0xFF	; 255
    5d0c:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0e:	09 95       	icall
    5d10:	0f 90       	pop	r0
    5d12:	0f 90       	pop	r0
    5d14:	df 91       	pop	r29
    5d16:	cf 91       	pop	r28
    5d18:	08 95       	ret

00005d1a <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    5d1a:	cf 93       	push	r28
    5d1c:	df 93       	push	r29
    5d1e:	cd b7       	in	r28, 0x3d	; 61
    5d20:	de b7       	in	r29, 0x3e	; 62
    5d22:	2b 97       	sbiw	r28, 0x0b	; 11
    5d24:	0f b6       	in	r0, 0x3f	; 63
    5d26:	f8 94       	cli
    5d28:	de bf       	out	0x3e, r29	; 62
    5d2a:	0f be       	out	0x3f, r0	; 63
    5d2c:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    5d2e:	fe 01       	movw	r30, r28
    5d30:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    5d32:	a3 e3       	ldi	r26, 0x33	; 51
    5d34:	4a 9f       	mul	r20, r26
    5d36:	44 27       	eor	r20, r20
    5d38:	0a 0e       	add	r0, r26
    5d3a:	41 1d       	adc	r20, r1
    5d3c:	30 2d       	mov	r19, r0
    5d3e:	5a 9f       	mul	r21, r26
    5d40:	55 27       	eor	r21, r21
    5d42:	40 0d       	add	r20, r0
    5d44:	51 1d       	adc	r21, r1
    5d46:	6a 9f       	mul	r22, r26
    5d48:	66 27       	eor	r22, r22
    5d4a:	50 0d       	add	r21, r0
    5d4c:	61 1d       	adc	r22, r1
    5d4e:	7a 9f       	mul	r23, r26
    5d50:	77 27       	eor	r23, r23
    5d52:	60 0d       	add	r22, r0
    5d54:	71 1d       	adc	r23, r1
    5d56:	11 24       	eor	r1, r1
    5d58:	34 0f       	add	r19, r20
    5d5a:	45 1f       	adc	r20, r21
    5d5c:	56 1f       	adc	r21, r22
    5d5e:	67 1f       	adc	r22, r23
    5d60:	71 1d       	adc	r23, r1
    5d62:	35 0f       	add	r19, r21
    5d64:	46 1f       	adc	r20, r22
    5d66:	57 1f       	adc	r21, r23
    5d68:	61 1d       	adc	r22, r1
    5d6a:	71 1d       	adc	r23, r1
    5d6c:	37 0f       	add	r19, r23
    5d6e:	41 1d       	adc	r20, r1
    5d70:	51 1d       	adc	r21, r1
    5d72:	61 1d       	adc	r22, r1
    5d74:	71 1d       	adc	r23, r1
    5d76:	76 95       	lsr	r23
    5d78:	67 95       	ror	r22
    5d7a:	57 95       	ror	r21
    5d7c:	47 95       	ror	r20
    5d7e:	37 95       	ror	r19
    5d80:	aa e0       	ldi	r26, 0x0A	; 10
    5d82:	3a 9f       	mul	r19, r26
    5d84:	31 2d       	mov	r19, r1
    5d86:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    5d88:	df 01       	movw	r26, r30
    5d8a:	30 5d       	subi	r19, 0xD0	; 208
    5d8c:	3e 93       	st	-X, r19
	} while (n);
    5d8e:	41 15       	cp	r20, r1
    5d90:	51 05       	cpc	r21, r1
    5d92:	61 05       	cpc	r22, r1
    5d94:	71 05       	cpc	r23, r1
    5d96:	09 f5       	brne	.+66     	; 0x5dda <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    5d98:	22 23       	and	r18, r18
    5d9a:	41 f0       	breq	.+16     	; 0x5dac <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    5d9c:	bd 01       	movw	r22, r26
    5d9e:	61 50       	subi	r22, 0x01	; 1
    5da0:	71 09       	sbc	r23, r1
    5da2:	2d e2       	ldi	r18, 0x2D	; 45
    5da4:	db 01       	movw	r26, r22
    5da6:	2c 93       	st	X, r18
    5da8:	df 01       	movw	r26, r30
    5daa:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    5dac:	ae 01       	movw	r20, r28
    5dae:	4a 1b       	sub	r20, r26
    5db0:	5b 0b       	sbc	r21, r27
    5db2:	44 5f       	subi	r20, 0xF4	; 244
    5db4:	5f 4f       	sbci	r21, 0xFF	; 255
    5db6:	fc 01       	movw	r30, r24
    5db8:	20 81       	ld	r18, Z
    5dba:	31 81       	ldd	r19, Z+1	; 0x01
    5dbc:	f9 01       	movw	r30, r18
    5dbe:	22 81       	ldd	r18, Z+2	; 0x02
    5dc0:	33 81       	ldd	r19, Z+3	; 0x03
    5dc2:	bd 01       	movw	r22, r26
    5dc4:	f9 01       	movw	r30, r18
    5dc6:	09 95       	icall
}
    5dc8:	2b 96       	adiw	r28, 0x0b	; 11
    5dca:	0f b6       	in	r0, 0x3f	; 63
    5dcc:	f8 94       	cli
    5dce:	de bf       	out	0x3e, r29	; 62
    5dd0:	0f be       	out	0x3f, r0	; 63
    5dd2:	cd bf       	out	0x3d, r28	; 61
    5dd4:	df 91       	pop	r29
    5dd6:	cf 91       	pop	r28
    5dd8:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    5dda:	fd 01       	movw	r30, r26
    5ddc:	aa cf       	rjmp	.-172    	; 0x5d32 <Print::printNumberDec(unsigned long, unsigned char)+0x18>

00005dde <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    5dde:	cf 93       	push	r28
    5de0:	df 93       	push	r29
    5de2:	1f 92       	push	r1
    5de4:	cd b7       	in	r28, 0x3d	; 61
    5de6:	de b7       	in	r29, 0x3e	; 62
    5de8:	69 83       	std	Y+1, r22	; 0x01
    5dea:	dc 01       	movw	r26, r24
    5dec:	ed 91       	ld	r30, X+
    5dee:	fc 91       	ld	r31, X
    5df0:	02 80       	ldd	r0, Z+2	; 0x02
    5df2:	f3 81       	ldd	r31, Z+3	; 0x03
    5df4:	e0 2d       	mov	r30, r0
    5df6:	41 e0       	ldi	r20, 0x01	; 1
    5df8:	50 e0       	ldi	r21, 0x00	; 0
    5dfa:	be 01       	movw	r22, r28
    5dfc:	6f 5f       	subi	r22, 0xFF	; 255
    5dfe:	7f 4f       	sbci	r23, 0xFF	; 255
    5e00:	09 95       	icall
    5e02:	0f 90       	pop	r0
    5e04:	df 91       	pop	r29
    5e06:	cf 91       	pop	r28
    5e08:	08 95       	ret

00005e0a <usb_serial_class::available()>:
    5e0a:	fc 01       	movw	r30, r24
    5e0c:	8f b7       	in	r24, 0x3f	; 63
    5e0e:	f8 94       	cli
    5e10:	90 91 1b 0f 	lds	r25, 0x0F1B	; 0x800f1b <usb_configuration>
    5e14:	91 11       	cpse	r25, r1
    5e16:	0c c0       	rjmp	.+24     	; 0x5e30 <usb_serial_class::available()+0x26>
    5e18:	90 e0       	ldi	r25, 0x00	; 0
    5e1a:	8f bf       	out	0x3f, r24	; 63
    5e1c:	20 85       	ldd	r18, Z+8	; 0x08
    5e1e:	31 85       	ldd	r19, Z+9	; 0x09
    5e20:	37 fd       	sbrc	r19, 7
    5e22:	03 c0       	rjmp	.+6      	; 0x5e2a <usb_serial_class::available()+0x20>
    5e24:	9f 3f       	cpi	r25, 0xFF	; 255
    5e26:	09 f0       	breq	.+2      	; 0x5e2a <usb_serial_class::available()+0x20>
    5e28:	9f 5f       	subi	r25, 0xFF	; 255
    5e2a:	89 2f       	mov	r24, r25
    5e2c:	90 e0       	ldi	r25, 0x00	; 0
    5e2e:	08 95       	ret
    5e30:	93 e0       	ldi	r25, 0x03	; 3
    5e32:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5e36:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    5e3a:	91 11       	cpse	r25, r1
    5e3c:	ee cf       	rjmp	.-36     	; 0x5e1a <usb_serial_class::available()+0x10>
    5e3e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5e42:	22 ff       	sbrs	r18, 2
    5e44:	e9 cf       	rjmp	.-46     	; 0x5e18 <usb_serial_class::available()+0xe>
    5e46:	25 fd       	sbrc	r18, 5
    5e48:	e7 cf       	rjmp	.-50     	; 0x5e18 <usb_serial_class::available()+0xe>
    5e4a:	2b e6       	ldi	r18, 0x6B	; 107
    5e4c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5e50:	e4 cf       	rjmp	.-56     	; 0x5e1a <usb_serial_class::available()+0x10>

00005e52 <usb_serial_class::peek()>:
    5e52:	cf 93       	push	r28
    5e54:	df 93       	push	r29
    5e56:	ec 01       	movw	r28, r24
    5e58:	88 85       	ldd	r24, Y+8	; 0x08
    5e5a:	99 85       	ldd	r25, Y+9	; 0x09
    5e5c:	97 ff       	sbrs	r25, 7
    5e5e:	09 c0       	rjmp	.+18     	; 0x5e72 <usb_serial_class::peek()+0x20>
    5e60:	e8 81       	ld	r30, Y
    5e62:	f9 81       	ldd	r31, Y+1	; 0x01
    5e64:	02 84       	ldd	r0, Z+10	; 0x0a
    5e66:	f3 85       	ldd	r31, Z+11	; 0x0b
    5e68:	e0 2d       	mov	r30, r0
    5e6a:	ce 01       	movw	r24, r28
    5e6c:	09 95       	icall
    5e6e:	99 87       	std	Y+9, r25	; 0x09
    5e70:	88 87       	std	Y+8, r24	; 0x08
    5e72:	88 85       	ldd	r24, Y+8	; 0x08
    5e74:	99 85       	ldd	r25, Y+9	; 0x09
    5e76:	df 91       	pop	r29
    5e78:	cf 91       	pop	r28
    5e7a:	08 95       	ret

00005e7c <usb_serial_class::read()>:
    5e7c:	fc 01       	movw	r30, r24
    5e7e:	20 85       	ldd	r18, Z+8	; 0x08
    5e80:	31 85       	ldd	r19, Z+9	; 0x09
    5e82:	37 fd       	sbrc	r19, 7
    5e84:	07 c0       	rjmp	.+14     	; 0x5e94 <usb_serial_class::read()+0x18>
    5e86:	4f ef       	ldi	r20, 0xFF	; 255
    5e88:	5f ef       	ldi	r21, 0xFF	; 255
    5e8a:	51 87       	std	Z+9, r21	; 0x09
    5e8c:	40 87       	std	Z+8, r20	; 0x08
    5e8e:	c9 01       	movw	r24, r18
    5e90:	99 27       	eor	r25, r25
    5e92:	08 95       	ret
    5e94:	9f b7       	in	r25, 0x3f	; 63
    5e96:	f8 94       	cli
    5e98:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <usb_configuration>
    5e9c:	81 11       	cpse	r24, r1
    5e9e:	04 c0       	rjmp	.+8      	; 0x5ea8 <usb_serial_class::read()+0x2c>
    5ea0:	9f bf       	out	0x3f, r25	; 63
    5ea2:	8f ef       	ldi	r24, 0xFF	; 255
    5ea4:	9f ef       	ldi	r25, 0xFF	; 255
    5ea6:	08 95       	ret
    5ea8:	83 e0       	ldi	r24, 0x03	; 3
    5eaa:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5eae:	2b e6       	ldi	r18, 0x6B	; 107
    5eb0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5eb4:	85 fd       	sbrc	r24, 5
    5eb6:	05 c0       	rjmp	.+10     	; 0x5ec2 <usb_serial_class::read()+0x46>
    5eb8:	82 ff       	sbrs	r24, 2
    5eba:	f2 cf       	rjmp	.-28     	; 0x5ea0 <usb_serial_class::read()+0x24>
    5ebc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5ec0:	f7 cf       	rjmp	.-18     	; 0x5eb0 <usb_serial_class::read()+0x34>
    5ec2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5ec6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5eca:	25 fd       	sbrc	r18, 5
    5ecc:	03 c0       	rjmp	.+6      	; 0x5ed4 <usb_serial_class::read()+0x58>
    5ece:	2b e6       	ldi	r18, 0x6B	; 107
    5ed0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5ed4:	9f bf       	out	0x3f, r25	; 63
    5ed6:	90 e0       	ldi	r25, 0x00	; 0
    5ed8:	08 95       	ret

00005eda <usb_serial_class::availableForWrite()>:
    5eda:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <usb_configuration>
    5ede:	88 23       	and	r24, r24
    5ee0:	61 f0       	breq	.+24     	; 0x5efa <usb_serial_class::availableForWrite()+0x20>
    5ee2:	8f b7       	in	r24, 0x3f	; 63
    5ee4:	f8 94       	cli
    5ee6:	94 e0       	ldi	r25, 0x04	; 4
    5ee8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5eec:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    5ef0:	8f bf       	out	0x3f, r24	; 63
    5ef2:	80 e4       	ldi	r24, 0x40	; 64
    5ef4:	89 1b       	sub	r24, r25
    5ef6:	90 e0       	ldi	r25, 0x00	; 0
    5ef8:	08 95       	ret
    5efa:	90 e0       	ldi	r25, 0x00	; 0
    5efc:	80 e0       	ldi	r24, 0x00	; 0
    5efe:	08 95       	ret

00005f00 <usb_serial_class::write(unsigned char const*, unsigned int)>:
    5f00:	bf 92       	push	r11
    5f02:	cf 92       	push	r12
    5f04:	df 92       	push	r13
    5f06:	ef 92       	push	r14
    5f08:	ff 92       	push	r15
    5f0a:	0f 93       	push	r16
    5f0c:	1f 93       	push	r17
    5f0e:	cf 93       	push	r28
    5f10:	df 93       	push	r29
    5f12:	7c 01       	movw	r14, r24
    5f14:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <usb_configuration>
    5f18:	81 11       	cpse	r24, r1
    5f1a:	10 c0       	rjmp	.+32     	; 0x5f3c <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	f7 01       	movw	r30, r14
    5f20:	82 83       	std	Z+2, r24	; 0x02
    5f22:	10 e0       	ldi	r17, 0x00	; 0
    5f24:	00 e0       	ldi	r16, 0x00	; 0
    5f26:	c8 01       	movw	r24, r16
    5f28:	df 91       	pop	r29
    5f2a:	cf 91       	pop	r28
    5f2c:	1f 91       	pop	r17
    5f2e:	0f 91       	pop	r16
    5f30:	ff 90       	pop	r15
    5f32:	ef 90       	pop	r14
    5f34:	df 90       	pop	r13
    5f36:	cf 90       	pop	r12
    5f38:	bf 90       	pop	r11
    5f3a:	08 95       	ret
    5f3c:	2f b7       	in	r18, 0x3f	; 63
    5f3e:	f8 94       	cli
    5f40:	84 e0       	ldi	r24, 0x04	; 4
    5f42:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5f46:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <transmit_previous_timeout>
    5f4a:	88 23       	and	r24, r24
    5f4c:	41 f0       	breq	.+16     	; 0x5f5e <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    5f4e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5f52:	85 fd       	sbrc	r24, 5
    5f54:	02 c0       	rjmp	.+4      	; 0x5f5a <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    5f56:	2f bf       	out	0x3f, r18	; 63
    5f58:	e1 cf       	rjmp	.-62     	; 0x5f1c <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    5f5a:	10 92 95 0e 	sts	0x0E95, r1	; 0x800e95 <transmit_previous_timeout>
    5f5e:	10 e0       	ldi	r17, 0x00	; 0
    5f60:	00 e0       	ldi	r16, 0x00	; 0
    5f62:	84 e0       	ldi	r24, 0x04	; 4
    5f64:	d8 2e       	mov	r13, r24
    5f66:	90 e4       	ldi	r25, 0x40	; 64
    5f68:	c9 2e       	mov	r12, r25
    5f6a:	a1 ef       	ldi	r26, 0xF1	; 241
    5f6c:	b0 e0       	ldi	r27, 0x00	; 0
    5f6e:	3a e3       	ldi	r19, 0x3A	; 58
    5f70:	b3 2e       	mov	r11, r19
    5f72:	33 e0       	ldi	r19, 0x03	; 3
    5f74:	41 15       	cp	r20, r1
    5f76:	51 05       	cpc	r21, r1
    5f78:	09 f4       	brne	.+2      	; 0x5f7c <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    5f7a:	c0 c0       	rjmp	.+384    	; 0x60fc <L548end+0x12>
    5f7c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    5f80:	81 5f       	subi	r24, 0xF1	; 241
    5f82:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5f86:	95 fd       	sbrc	r25, 5
    5f88:	16 c0       	rjmp	.+44     	; 0x5fb6 <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    5f8a:	2f bf       	out	0x3f, r18	; 63
    5f8c:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    5f90:	89 13       	cpse	r24, r25
    5f92:	06 c0       	rjmp	.+12     	; 0x5fa0 <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    5f94:	81 e0       	ldi	r24, 0x01	; 1
    5f96:	80 93 95 0e 	sts	0x0E95, r24	; 0x800e95 <transmit_previous_timeout>
    5f9a:	f7 01       	movw	r30, r14
    5f9c:	82 83       	std	Z+2, r24	; 0x02
    5f9e:	c3 cf       	rjmp	.-122    	; 0x5f26 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    5fa0:	90 91 1b 0f 	lds	r25, 0x0F1B	; 0x800f1b <usb_configuration>
    5fa4:	91 11       	cpse	r25, r1
    5fa6:	02 c0       	rjmp	.+4      	; 0x5fac <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    5fa8:	81 e0       	ldi	r24, 0x01	; 1
    5faa:	f7 cf       	rjmp	.-18     	; 0x5f9a <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    5fac:	2f b7       	in	r18, 0x3f	; 63
    5fae:	f8 94       	cli
    5fb0:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5fb4:	e6 cf       	rjmp	.-52     	; 0x5f82 <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    5fb6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    5fba:	9c 2d       	mov	r25, r12
    5fbc:	98 1b       	sub	r25, r24
    5fbe:	94 17       	cp	r25, r20
    5fc0:	15 06       	cpc	r1, r21
    5fc2:	11 f0       	breq	.+4      	; 0x5fc8 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    5fc4:	08 f0       	brcs	.+2      	; 0x5fc8 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    5fc6:	94 2f       	mov	r25, r20
    5fc8:	e9 2f       	mov	r30, r25
    5fca:	f0 e0       	ldi	r31, 0x00	; 0
    5fcc:	4e 1b       	sub	r20, r30
    5fce:	5f 0b       	sbc	r21, r31
    5fd0:	0e 0f       	add	r16, r30
    5fd2:	1f 1f       	adc	r17, r31
    5fd4:	eb 01       	movw	r28, r22

00005fd6 <L548begin>:
    5fd6:	e0 e4       	ldi	r30, 0x40	; 64
    5fd8:	e9 1b       	sub	r30, r25
    5fda:	e0 34       	cpi	r30, 0x40	; 64
    5fdc:	28 f4       	brcc	.+10     	; 0x5fe8 <L548err>
    5fde:	ee 0f       	add	r30, r30
    5fe0:	ff 27       	eor	r31, r31
    5fe2:	eb 50       	subi	r30, 0x0B	; 11
    5fe4:	f0 4d       	sbci	r31, 0xD0	; 208
    5fe6:	09 94       	ijmp

00005fe8 <L548err>:
    5fe8:	80 c0       	rjmp	.+256    	; 0x60ea <L548end>

00005fea <L548table>:
    5fea:	99 91       	ld	r25, Y+
    5fec:	9c 93       	st	X, r25
    5fee:	99 91       	ld	r25, Y+
    5ff0:	9c 93       	st	X, r25
    5ff2:	99 91       	ld	r25, Y+
    5ff4:	9c 93       	st	X, r25
    5ff6:	99 91       	ld	r25, Y+
    5ff8:	9c 93       	st	X, r25
    5ffa:	99 91       	ld	r25, Y+
    5ffc:	9c 93       	st	X, r25
    5ffe:	99 91       	ld	r25, Y+
    6000:	9c 93       	st	X, r25
    6002:	99 91       	ld	r25, Y+
    6004:	9c 93       	st	X, r25
    6006:	99 91       	ld	r25, Y+
    6008:	9c 93       	st	X, r25
    600a:	99 91       	ld	r25, Y+
    600c:	9c 93       	st	X, r25
    600e:	99 91       	ld	r25, Y+
    6010:	9c 93       	st	X, r25
    6012:	99 91       	ld	r25, Y+
    6014:	9c 93       	st	X, r25
    6016:	99 91       	ld	r25, Y+
    6018:	9c 93       	st	X, r25
    601a:	99 91       	ld	r25, Y+
    601c:	9c 93       	st	X, r25
    601e:	99 91       	ld	r25, Y+
    6020:	9c 93       	st	X, r25
    6022:	99 91       	ld	r25, Y+
    6024:	9c 93       	st	X, r25
    6026:	99 91       	ld	r25, Y+
    6028:	9c 93       	st	X, r25
    602a:	99 91       	ld	r25, Y+
    602c:	9c 93       	st	X, r25
    602e:	99 91       	ld	r25, Y+
    6030:	9c 93       	st	X, r25
    6032:	99 91       	ld	r25, Y+
    6034:	9c 93       	st	X, r25
    6036:	99 91       	ld	r25, Y+
    6038:	9c 93       	st	X, r25
    603a:	99 91       	ld	r25, Y+
    603c:	9c 93       	st	X, r25
    603e:	99 91       	ld	r25, Y+
    6040:	9c 93       	st	X, r25
    6042:	99 91       	ld	r25, Y+
    6044:	9c 93       	st	X, r25
    6046:	99 91       	ld	r25, Y+
    6048:	9c 93       	st	X, r25
    604a:	99 91       	ld	r25, Y+
    604c:	9c 93       	st	X, r25
    604e:	99 91       	ld	r25, Y+
    6050:	9c 93       	st	X, r25
    6052:	99 91       	ld	r25, Y+
    6054:	9c 93       	st	X, r25
    6056:	99 91       	ld	r25, Y+
    6058:	9c 93       	st	X, r25
    605a:	99 91       	ld	r25, Y+
    605c:	9c 93       	st	X, r25
    605e:	99 91       	ld	r25, Y+
    6060:	9c 93       	st	X, r25
    6062:	99 91       	ld	r25, Y+
    6064:	9c 93       	st	X, r25
    6066:	99 91       	ld	r25, Y+
    6068:	9c 93       	st	X, r25
    606a:	99 91       	ld	r25, Y+
    606c:	9c 93       	st	X, r25
    606e:	99 91       	ld	r25, Y+
    6070:	9c 93       	st	X, r25
    6072:	99 91       	ld	r25, Y+
    6074:	9c 93       	st	X, r25
    6076:	99 91       	ld	r25, Y+
    6078:	9c 93       	st	X, r25
    607a:	99 91       	ld	r25, Y+
    607c:	9c 93       	st	X, r25
    607e:	99 91       	ld	r25, Y+
    6080:	9c 93       	st	X, r25
    6082:	99 91       	ld	r25, Y+
    6084:	9c 93       	st	X, r25
    6086:	99 91       	ld	r25, Y+
    6088:	9c 93       	st	X, r25
    608a:	99 91       	ld	r25, Y+
    608c:	9c 93       	st	X, r25
    608e:	99 91       	ld	r25, Y+
    6090:	9c 93       	st	X, r25
    6092:	99 91       	ld	r25, Y+
    6094:	9c 93       	st	X, r25
    6096:	99 91       	ld	r25, Y+
    6098:	9c 93       	st	X, r25
    609a:	99 91       	ld	r25, Y+
    609c:	9c 93       	st	X, r25
    609e:	99 91       	ld	r25, Y+
    60a0:	9c 93       	st	X, r25
    60a2:	99 91       	ld	r25, Y+
    60a4:	9c 93       	st	X, r25
    60a6:	99 91       	ld	r25, Y+
    60a8:	9c 93       	st	X, r25
    60aa:	99 91       	ld	r25, Y+
    60ac:	9c 93       	st	X, r25
    60ae:	99 91       	ld	r25, Y+
    60b0:	9c 93       	st	X, r25
    60b2:	99 91       	ld	r25, Y+
    60b4:	9c 93       	st	X, r25
    60b6:	99 91       	ld	r25, Y+
    60b8:	9c 93       	st	X, r25
    60ba:	99 91       	ld	r25, Y+
    60bc:	9c 93       	st	X, r25
    60be:	99 91       	ld	r25, Y+
    60c0:	9c 93       	st	X, r25
    60c2:	99 91       	ld	r25, Y+
    60c4:	9c 93       	st	X, r25
    60c6:	99 91       	ld	r25, Y+
    60c8:	9c 93       	st	X, r25
    60ca:	99 91       	ld	r25, Y+
    60cc:	9c 93       	st	X, r25
    60ce:	99 91       	ld	r25, Y+
    60d0:	9c 93       	st	X, r25
    60d2:	99 91       	ld	r25, Y+
    60d4:	9c 93       	st	X, r25
    60d6:	99 91       	ld	r25, Y+
    60d8:	9c 93       	st	X, r25
    60da:	99 91       	ld	r25, Y+
    60dc:	9c 93       	st	X, r25
    60de:	99 91       	ld	r25, Y+
    60e0:	9c 93       	st	X, r25
    60e2:	99 91       	ld	r25, Y+
    60e4:	9c 93       	st	X, r25
    60e6:	99 91       	ld	r25, Y+
    60e8:	9c 93       	st	X, r25

000060ea <L548end>:
    60ea:	be 01       	movw	r22, r28
    60ec:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    60f0:	85 ff       	sbrs	r24, 5
    60f2:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    60f6:	30 93 97 0e 	sts	0x0E97, r19	; 0x800e97 <transmit_flush_timer>
    60fa:	3c cf       	rjmp	.-392    	; 0x5f74 <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    60fc:	2f bf       	out	0x3f, r18	; 63
    60fe:	13 cf       	rjmp	.-474    	; 0x5f26 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00006100 <usb_serial_class::send_now()>:
    6100:	8f b7       	in	r24, 0x3f	; 63
    6102:	f8 94       	cli
    6104:	90 91 1b 0f 	lds	r25, 0x0F1B	; 0x800f1b <usb_configuration>
    6108:	99 23       	and	r25, r25
    610a:	61 f0       	breq	.+24     	; 0x6124 <usb_serial_class::send_now()+0x24>
    610c:	90 91 97 0e 	lds	r25, 0x0E97	; 0x800e97 <transmit_flush_timer>
    6110:	99 23       	and	r25, r25
    6112:	41 f0       	breq	.+16     	; 0x6124 <usb_serial_class::send_now()+0x24>
    6114:	94 e0       	ldi	r25, 0x04	; 4
    6116:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    611a:	9a e3       	ldi	r25, 0x3A	; 58
    611c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6120:	10 92 97 0e 	sts	0x0E97, r1	; 0x800e97 <transmit_flush_timer>
    6124:	8f bf       	out	0x3f, r24	; 63
    6126:	08 95       	ret

00006128 <usb_serial_class::flush()>:
    6128:	eb cf       	rjmp	.-42     	; 0x6100 <usb_serial_class::send_now()>

0000612a <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    612a:	ed e0       	ldi	r30, 0x0D	; 13
    612c:	ff e0       	ldi	r31, 0x0F	; 15
    612e:	11 86       	std	Z+9, r1	; 0x09
    6130:	10 86       	std	Z+8, r1	; 0x08
    6132:	12 82       	std	Z+2, r1	; 0x02
    6134:	88 ee       	ldi	r24, 0xE8	; 232
    6136:	93 e0       	ldi	r25, 0x03	; 3
    6138:	a0 e0       	ldi	r26, 0x00	; 0
    613a:	b0 e0       	ldi	r27, 0x00	; 0
    613c:	83 83       	std	Z+3, r24	; 0x03
    613e:	94 83       	std	Z+4, r25	; 0x04
    6140:	a5 83       	std	Z+5, r26	; 0x05
    6142:	b6 83       	std	Z+6, r27	; 0x06
    6144:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    6146:	8a e8       	ldi	r24, 0x8A	; 138
    6148:	97 e0       	ldi	r25, 0x07	; 7
    614a:	91 83       	std	Z+1, r25	; 0x01
    614c:	80 83       	st	Z, r24
    614e:	08 95       	ret

00006150 <randomSeed(unsigned int)>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    6150:	00 97       	sbiw	r24, 0x00	; 0
    6152:	21 f0       	breq	.+8      	; 0x615c <randomSeed(unsigned int)+0xc>
    srandom(seed);
    6154:	bc 01       	movw	r22, r24
    6156:	90 e0       	ldi	r25, 0x00	; 0
    6158:	80 e0       	ldi	r24, 0x00	; 0
    615a:	d3 c3       	rjmp	.+1958   	; 0x6902 <srandom>
  }
}
    615c:	08 95       	ret

0000615e <random(long)>:

long random(long howbig)
{
    615e:	cf 92       	push	r12
    6160:	df 92       	push	r13
    6162:	ef 92       	push	r14
    6164:	ff 92       	push	r15
    6166:	6b 01       	movw	r12, r22
    6168:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    616a:	c1 14       	cp	r12, r1
    616c:	d1 04       	cpc	r13, r1
    616e:	e1 04       	cpc	r14, r1
    6170:	f1 04       	cpc	r15, r1
    6172:	31 f0       	breq	.+12     	; 0x6180 <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    6174:	7a d3       	rcall	.+1780   	; 0x686a <random>
    6176:	a7 01       	movw	r20, r14
    6178:	96 01       	movw	r18, r12
    617a:	ea d2       	rcall	.+1492   	; 0x6750 <__divmodsi4>
    617c:	6b 01       	movw	r12, r22
    617e:	7c 01       	movw	r14, r24
}
    6180:	c7 01       	movw	r24, r14
    6182:	b6 01       	movw	r22, r12
    6184:	ff 90       	pop	r15
    6186:	ef 90       	pop	r14
    6188:	df 90       	pop	r13
    618a:	cf 90       	pop	r12
    618c:	08 95       	ret

0000618e <random(long, long)>:

long random(long howsmall, long howbig)
{
    618e:	cf 92       	push	r12
    6190:	df 92       	push	r13
    6192:	ef 92       	push	r14
    6194:	ff 92       	push	r15
    6196:	6b 01       	movw	r12, r22
    6198:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    619a:	c2 16       	cp	r12, r18
    619c:	d3 06       	cpc	r13, r19
    619e:	e4 06       	cpc	r14, r20
    61a0:	f5 06       	cpc	r15, r21
    61a2:	5c f4       	brge	.+22     	; 0x61ba <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    61a4:	ca 01       	movw	r24, r20
    61a6:	b9 01       	movw	r22, r18
    61a8:	6c 19       	sub	r22, r12
    61aa:	7d 09       	sbc	r23, r13
    61ac:	8e 09       	sbc	r24, r14
    61ae:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    61b0:	d6 df       	rcall	.-84     	; 0x615e <random(long)>
    61b2:	c6 0e       	add	r12, r22
    61b4:	d7 1e       	adc	r13, r23
    61b6:	e8 1e       	adc	r14, r24
    61b8:	f9 1e       	adc	r15, r25
}
    61ba:	c7 01       	movw	r24, r14
    61bc:	b6 01       	movw	r22, r12
    61be:	ff 90       	pop	r15
    61c0:	ef 90       	pop	r14
    61c2:	df 90       	pop	r13
    61c4:	cf 90       	pop	r12
    61c6:	08 95       	ret

000061c8 <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    61c8:	4f 92       	push	r4
    61ca:	5f 92       	push	r5
    61cc:	6f 92       	push	r6
    61ce:	7f 92       	push	r7
    61d0:	af 92       	push	r10
    61d2:	bf 92       	push	r11
    61d4:	cf 92       	push	r12
    61d6:	df 92       	push	r13
    61d8:	ef 92       	push	r14
    61da:	ff 92       	push	r15
    61dc:	0f 93       	push	r16
    61de:	1f 93       	push	r17
    61e0:	cf 93       	push	r28
    61e2:	df 93       	push	r29
    61e4:	cd b7       	in	r28, 0x3d	; 61
    61e6:	de b7       	in	r29, 0x3e	; 62
    61e8:	29 01       	movw	r4, r18
    61ea:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    61ec:	9b 01       	movw	r18, r22
    61ee:	ac 01       	movw	r20, r24
    61f0:	24 19       	sub	r18, r4
    61f2:	35 09       	sbc	r19, r5
    61f4:	46 09       	sbc	r20, r6
    61f6:	57 09       	sbc	r21, r7
    61f8:	89 89       	ldd	r24, Y+17	; 0x11
    61fa:	9a 89       	ldd	r25, Y+18	; 0x12
    61fc:	ab 89       	ldd	r26, Y+19	; 0x13
    61fe:	bc 89       	ldd	r27, Y+20	; 0x14
    6200:	bc 01       	movw	r22, r24
    6202:	cd 01       	movw	r24, r26
    6204:	6a 19       	sub	r22, r10
    6206:	7b 09       	sbc	r23, r11
    6208:	8c 09       	sbc	r24, r12
    620a:	9d 09       	sbc	r25, r13
    620c:	49 d2       	rcall	.+1170   	; 0x66a0 <__mulsi3>
    620e:	a8 01       	movw	r20, r16
    6210:	97 01       	movw	r18, r14
    6212:	24 19       	sub	r18, r4
    6214:	35 09       	sbc	r19, r5
    6216:	46 09       	sbc	r20, r6
    6218:	57 09       	sbc	r21, r7
    621a:	9a d2       	rcall	.+1332   	; 0x6750 <__divmodsi4>
    621c:	ca 01       	movw	r24, r20
    621e:	b9 01       	movw	r22, r18
    6220:	6a 0d       	add	r22, r10
    6222:	7b 1d       	adc	r23, r11
    6224:	8c 1d       	adc	r24, r12
    6226:	9d 1d       	adc	r25, r13
}
    6228:	df 91       	pop	r29
    622a:	cf 91       	pop	r28
    622c:	1f 91       	pop	r17
    622e:	0f 91       	pop	r16
    6230:	ff 90       	pop	r15
    6232:	ef 90       	pop	r14
    6234:	df 90       	pop	r13
    6236:	cf 90       	pop	r12
    6238:	bf 90       	pop	r11
    623a:	af 90       	pop	r10
    623c:	7f 90       	pop	r7
    623e:	6f 90       	pop	r6
    6240:	5f 90       	pop	r5
    6242:	4f 90       	pop	r4
    6244:	08 95       	ret

00006246 <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    6246:	fc 01       	movw	r30, r24
    6248:	80 81       	ld	r24, Z
    624a:	91 81       	ldd	r25, Z+1	; 0x01
    624c:	0c 94 fb 26 	jmp	0x4df6	; 0x4df6 <free>

00006250 <String::changeBuffer(unsigned int)>:
    6250:	0f 93       	push	r16
    6252:	1f 93       	push	r17
    6254:	cf 93       	push	r28
    6256:	df 93       	push	r29
    6258:	ec 01       	movw	r28, r24
    625a:	8b 01       	movw	r16, r22
    625c:	6f 5f       	subi	r22, 0xFF	; 255
    625e:	7f 4f       	sbci	r23, 0xFF	; 255
    6260:	88 81       	ld	r24, Y
    6262:	99 81       	ldd	r25, Y+1	; 0x01
    6264:	0e 94 84 27 	call	0x4f08	; 0x4f08 <realloc>
    6268:	00 97       	sbiw	r24, 0x00	; 0
    626a:	51 f0       	breq	.+20     	; 0x6280 <String::changeBuffer(unsigned int)+0x30>
    626c:	99 83       	std	Y+1, r25	; 0x01
    626e:	88 83       	st	Y, r24
    6270:	1b 83       	std	Y+3, r17	; 0x03
    6272:	0a 83       	std	Y+2, r16	; 0x02
    6274:	81 e0       	ldi	r24, 0x01	; 1
    6276:	df 91       	pop	r29
    6278:	cf 91       	pop	r28
    627a:	1f 91       	pop	r17
    627c:	0f 91       	pop	r16
    627e:	08 95       	ret
    6280:	80 e0       	ldi	r24, 0x00	; 0
    6282:	f9 cf       	rjmp	.-14     	; 0x6276 <String::changeBuffer(unsigned int)+0x26>

00006284 <String::reserve(unsigned int)>:
    6284:	cf 93       	push	r28
    6286:	df 93       	push	r29
    6288:	fc 01       	movw	r30, r24
    628a:	22 81       	ldd	r18, Z+2	; 0x02
    628c:	33 81       	ldd	r19, Z+3	; 0x03
    628e:	26 17       	cp	r18, r22
    6290:	37 07       	cpc	r19, r23
    6292:	20 f0       	brcs	.+8      	; 0x629c <String::reserve(unsigned int)+0x18>
    6294:	81 e0       	ldi	r24, 0x01	; 1
    6296:	df 91       	pop	r29
    6298:	cf 91       	pop	r28
    629a:	08 95       	ret
    629c:	ec 01       	movw	r28, r24
    629e:	d8 df       	rcall	.-80     	; 0x6250 <String::changeBuffer(unsigned int)>
    62a0:	88 23       	and	r24, r24
    62a2:	c9 f3       	breq	.-14     	; 0x6296 <String::reserve(unsigned int)+0x12>
    62a4:	8c 81       	ldd	r24, Y+4	; 0x04
    62a6:	9d 81       	ldd	r25, Y+5	; 0x05
    62a8:	89 2b       	or	r24, r25
    62aa:	a1 f7       	brne	.-24     	; 0x6294 <String::reserve(unsigned int)+0x10>
    62ac:	e8 81       	ld	r30, Y
    62ae:	f9 81       	ldd	r31, Y+1	; 0x01
    62b0:	10 82       	st	Z, r1
    62b2:	f0 cf       	rjmp	.-32     	; 0x6294 <String::reserve(unsigned int)+0x10>

000062b4 <String::copy(char const*, unsigned int)>:
    62b4:	ef 92       	push	r14
    62b6:	ff 92       	push	r15
    62b8:	0f 93       	push	r16
    62ba:	1f 93       	push	r17
    62bc:	cf 93       	push	r28
    62be:	df 93       	push	r29
    62c0:	ec 01       	movw	r28, r24
    62c2:	7b 01       	movw	r14, r22
    62c4:	8a 01       	movw	r16, r20
    62c6:	41 15       	cp	r20, r1
    62c8:	51 05       	cpc	r21, r1
    62ca:	79 f4       	brne	.+30     	; 0x62ea <String::copy(char const*, unsigned int)+0x36>
    62cc:	e8 81       	ld	r30, Y
    62ce:	f9 81       	ldd	r31, Y+1	; 0x01
    62d0:	30 97       	sbiw	r30, 0x00	; 0
    62d2:	09 f0       	breq	.+2      	; 0x62d6 <String::copy(char const*, unsigned int)+0x22>
    62d4:	10 82       	st	Z, r1
    62d6:	1d 82       	std	Y+5, r1	; 0x05
    62d8:	1c 82       	std	Y+4, r1	; 0x04
    62da:	ce 01       	movw	r24, r28
    62dc:	df 91       	pop	r29
    62de:	cf 91       	pop	r28
    62e0:	1f 91       	pop	r17
    62e2:	0f 91       	pop	r16
    62e4:	ff 90       	pop	r15
    62e6:	ef 90       	pop	r14
    62e8:	08 95       	ret
    62ea:	ba 01       	movw	r22, r20
    62ec:	cb df       	rcall	.-106    	; 0x6284 <String::reserve(unsigned int)>
    62ee:	28 81       	ld	r18, Y
    62f0:	39 81       	ldd	r19, Y+1	; 0x01
    62f2:	81 11       	cpse	r24, r1
    62f4:	0b c0       	rjmp	.+22     	; 0x630c <String::copy(char const*, unsigned int)+0x58>
    62f6:	21 15       	cp	r18, r1
    62f8:	31 05       	cpc	r19, r1
    62fa:	29 f0       	breq	.+10     	; 0x6306 <String::copy(char const*, unsigned int)+0x52>
    62fc:	c9 01       	movw	r24, r18
    62fe:	0e 94 fb 26 	call	0x4df6	; 0x4df6 <free>
    6302:	19 82       	std	Y+1, r1	; 0x01
    6304:	18 82       	st	Y, r1
    6306:	1b 82       	std	Y+3, r1	; 0x03
    6308:	1a 82       	std	Y+2, r1	; 0x02
    630a:	e5 cf       	rjmp	.-54     	; 0x62d6 <String::copy(char const*, unsigned int)+0x22>
    630c:	1d 83       	std	Y+5, r17	; 0x05
    630e:	0c 83       	std	Y+4, r16	; 0x04
    6310:	b7 01       	movw	r22, r14
    6312:	c9 01       	movw	r24, r18
    6314:	08 d3       	rcall	.+1552   	; 0x6926 <strcpy>
    6316:	e1 cf       	rjmp	.-62     	; 0x62da <String::copy(char const*, unsigned int)+0x26>

00006318 <String::String(char const*)>:
    6318:	fc 01       	movw	r30, r24
    631a:	11 82       	std	Z+1, r1	; 0x01
    631c:	10 82       	st	Z, r1
    631e:	13 82       	std	Z+3, r1	; 0x03
    6320:	12 82       	std	Z+2, r1	; 0x02
    6322:	15 82       	std	Z+5, r1	; 0x05
    6324:	14 82       	std	Z+4, r1	; 0x04
    6326:	16 82       	std	Z+6, r1	; 0x06
    6328:	61 15       	cp	r22, r1
    632a:	71 05       	cpc	r23, r1
    632c:	49 f0       	breq	.+18     	; 0x6340 <String::String(char const*)+0x28>
    632e:	fb 01       	movw	r30, r22
    6330:	01 90       	ld	r0, Z+
    6332:	00 20       	and	r0, r0
    6334:	e9 f7       	brne	.-6      	; 0x6330 <String::String(char const*)+0x18>
    6336:	31 97       	sbiw	r30, 0x01	; 1
    6338:	af 01       	movw	r20, r30
    633a:	46 1b       	sub	r20, r22
    633c:	57 0b       	sbc	r21, r23
    633e:	ba cf       	rjmp	.-140    	; 0x62b4 <String::copy(char const*, unsigned int)>
    6340:	08 95       	ret

00006342 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    6342:	0f 93       	push	r16
    6344:	1f 93       	push	r17
    6346:	cf 93       	push	r28
    6348:	df 93       	push	r29
	if (!bufsize || !buf) return;
    634a:	41 15       	cp	r20, r1
    634c:	51 05       	cpc	r21, r1
    634e:	59 f0       	breq	.+22     	; 0x6366 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    6350:	61 15       	cp	r22, r1
    6352:	71 05       	cpc	r23, r1
    6354:	41 f0       	breq	.+16     	; 0x6366 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    6356:	fc 01       	movw	r30, r24
    6358:	04 81       	ldd	r16, Z+4	; 0x04
    635a:	15 81       	ldd	r17, Z+5	; 0x05
    635c:	20 17       	cp	r18, r16
    635e:	31 07       	cpc	r19, r17
    6360:	38 f0       	brcs	.+14     	; 0x6370 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    6362:	fb 01       	movw	r30, r22
    6364:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    6366:	df 91       	pop	r29
    6368:	cf 91       	pop	r28
    636a:	1f 91       	pop	r17
    636c:	0f 91       	pop	r16
    636e:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    6370:	41 50       	subi	r20, 0x01	; 1
    6372:	51 09       	sbc	r21, r1
    6374:	02 1b       	sub	r16, r18
    6376:	13 0b       	sbc	r17, r19
    6378:	40 17       	cp	r20, r16
    637a:	51 07       	cpc	r21, r17
    637c:	08 f4       	brcc	.+2      	; 0x6380 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    637e:	8a 01       	movw	r16, r20
    6380:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    6382:	fc 01       	movw	r30, r24
    6384:	60 81       	ld	r22, Z
    6386:	71 81       	ldd	r23, Z+1	; 0x01
    6388:	62 0f       	add	r22, r18
    638a:	73 1f       	adc	r23, r19
    638c:	a8 01       	movw	r20, r16
    638e:	ce 01       	movw	r24, r28
    6390:	d1 d2       	rcall	.+1442   	; 0x6934 <strncpy>
	buf[n] = 0;
    6392:	c0 0f       	add	r28, r16
    6394:	d1 1f       	adc	r29, r17
    6396:	18 82       	st	Y, r1
    6398:	e6 cf       	rjmp	.-52     	; 0x6366 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

0000639a <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    639a:	08 95       	ret

0000639c <__subsf3>:
    639c:	50 58       	subi	r21, 0x80	; 128

0000639e <__addsf3>:
    639e:	bb 27       	eor	r27, r27
    63a0:	aa 27       	eor	r26, r26
    63a2:	0e d0       	rcall	.+28     	; 0x63c0 <__addsf3x>
    63a4:	e0 c0       	rjmp	.+448    	; 0x6566 <__fp_round>
    63a6:	d1 d0       	rcall	.+418    	; 0x654a <__fp_pscA>
    63a8:	30 f0       	brcs	.+12     	; 0x63b6 <__addsf3+0x18>
    63aa:	d6 d0       	rcall	.+428    	; 0x6558 <__fp_pscB>
    63ac:	20 f0       	brcs	.+8      	; 0x63b6 <__addsf3+0x18>
    63ae:	31 f4       	brne	.+12     	; 0x63bc <__addsf3+0x1e>
    63b0:	9f 3f       	cpi	r25, 0xFF	; 255
    63b2:	11 f4       	brne	.+4      	; 0x63b8 <__addsf3+0x1a>
    63b4:	1e f4       	brtc	.+6      	; 0x63bc <__addsf3+0x1e>
    63b6:	c6 c0       	rjmp	.+396    	; 0x6544 <__fp_nan>
    63b8:	0e f4       	brtc	.+2      	; 0x63bc <__addsf3+0x1e>
    63ba:	e0 95       	com	r30
    63bc:	e7 fb       	bst	r30, 7
    63be:	bc c0       	rjmp	.+376    	; 0x6538 <__fp_inf>

000063c0 <__addsf3x>:
    63c0:	e9 2f       	mov	r30, r25
    63c2:	e2 d0       	rcall	.+452    	; 0x6588 <__fp_split3>
    63c4:	80 f3       	brcs	.-32     	; 0x63a6 <__addsf3+0x8>
    63c6:	ba 17       	cp	r27, r26
    63c8:	62 07       	cpc	r22, r18
    63ca:	73 07       	cpc	r23, r19
    63cc:	84 07       	cpc	r24, r20
    63ce:	95 07       	cpc	r25, r21
    63d0:	18 f0       	brcs	.+6      	; 0x63d8 <__addsf3x+0x18>
    63d2:	71 f4       	brne	.+28     	; 0x63f0 <__addsf3x+0x30>
    63d4:	9e f5       	brtc	.+102    	; 0x643c <__addsf3x+0x7c>
    63d6:	fa c0       	rjmp	.+500    	; 0x65cc <__fp_zero>
    63d8:	0e f4       	brtc	.+2      	; 0x63dc <__addsf3x+0x1c>
    63da:	e0 95       	com	r30
    63dc:	0b 2e       	mov	r0, r27
    63de:	ba 2f       	mov	r27, r26
    63e0:	a0 2d       	mov	r26, r0
    63e2:	0b 01       	movw	r0, r22
    63e4:	b9 01       	movw	r22, r18
    63e6:	90 01       	movw	r18, r0
    63e8:	0c 01       	movw	r0, r24
    63ea:	ca 01       	movw	r24, r20
    63ec:	a0 01       	movw	r20, r0
    63ee:	11 24       	eor	r1, r1
    63f0:	ff 27       	eor	r31, r31
    63f2:	59 1b       	sub	r21, r25
    63f4:	99 f0       	breq	.+38     	; 0x641c <__addsf3x+0x5c>
    63f6:	59 3f       	cpi	r21, 0xF9	; 249
    63f8:	50 f4       	brcc	.+20     	; 0x640e <__addsf3x+0x4e>
    63fa:	50 3e       	cpi	r21, 0xE0	; 224
    63fc:	68 f1       	brcs	.+90     	; 0x6458 <__addsf3x+0x98>
    63fe:	1a 16       	cp	r1, r26
    6400:	f0 40       	sbci	r31, 0x00	; 0
    6402:	a2 2f       	mov	r26, r18
    6404:	23 2f       	mov	r18, r19
    6406:	34 2f       	mov	r19, r20
    6408:	44 27       	eor	r20, r20
    640a:	58 5f       	subi	r21, 0xF8	; 248
    640c:	f3 cf       	rjmp	.-26     	; 0x63f4 <__addsf3x+0x34>
    640e:	46 95       	lsr	r20
    6410:	37 95       	ror	r19
    6412:	27 95       	ror	r18
    6414:	a7 95       	ror	r26
    6416:	f0 40       	sbci	r31, 0x00	; 0
    6418:	53 95       	inc	r21
    641a:	c9 f7       	brne	.-14     	; 0x640e <__addsf3x+0x4e>
    641c:	7e f4       	brtc	.+30     	; 0x643c <__addsf3x+0x7c>
    641e:	1f 16       	cp	r1, r31
    6420:	ba 0b       	sbc	r27, r26
    6422:	62 0b       	sbc	r22, r18
    6424:	73 0b       	sbc	r23, r19
    6426:	84 0b       	sbc	r24, r20
    6428:	ba f0       	brmi	.+46     	; 0x6458 <__addsf3x+0x98>
    642a:	91 50       	subi	r25, 0x01	; 1
    642c:	a1 f0       	breq	.+40     	; 0x6456 <__addsf3x+0x96>
    642e:	ff 0f       	add	r31, r31
    6430:	bb 1f       	adc	r27, r27
    6432:	66 1f       	adc	r22, r22
    6434:	77 1f       	adc	r23, r23
    6436:	88 1f       	adc	r24, r24
    6438:	c2 f7       	brpl	.-16     	; 0x642a <__addsf3x+0x6a>
    643a:	0e c0       	rjmp	.+28     	; 0x6458 <__addsf3x+0x98>
    643c:	ba 0f       	add	r27, r26
    643e:	62 1f       	adc	r22, r18
    6440:	73 1f       	adc	r23, r19
    6442:	84 1f       	adc	r24, r20
    6444:	48 f4       	brcc	.+18     	; 0x6458 <__addsf3x+0x98>
    6446:	87 95       	ror	r24
    6448:	77 95       	ror	r23
    644a:	67 95       	ror	r22
    644c:	b7 95       	ror	r27
    644e:	f7 95       	ror	r31
    6450:	9e 3f       	cpi	r25, 0xFE	; 254
    6452:	08 f0       	brcs	.+2      	; 0x6456 <__addsf3x+0x96>
    6454:	b3 cf       	rjmp	.-154    	; 0x63bc <__addsf3+0x1e>
    6456:	93 95       	inc	r25
    6458:	88 0f       	add	r24, r24
    645a:	08 f0       	brcs	.+2      	; 0x645e <__addsf3x+0x9e>
    645c:	99 27       	eor	r25, r25
    645e:	ee 0f       	add	r30, r30
    6460:	97 95       	ror	r25
    6462:	87 95       	ror	r24
    6464:	08 95       	ret

00006466 <__fixunssfsi>:
    6466:	98 d0       	rcall	.+304    	; 0x6598 <__fp_splitA>
    6468:	88 f0       	brcs	.+34     	; 0x648c <__fixunssfsi+0x26>
    646a:	9f 57       	subi	r25, 0x7F	; 127
    646c:	90 f0       	brcs	.+36     	; 0x6492 <__fixunssfsi+0x2c>
    646e:	b9 2f       	mov	r27, r25
    6470:	99 27       	eor	r25, r25
    6472:	b7 51       	subi	r27, 0x17	; 23
    6474:	a0 f0       	brcs	.+40     	; 0x649e <__fixunssfsi+0x38>
    6476:	d1 f0       	breq	.+52     	; 0x64ac <__fixunssfsi+0x46>
    6478:	66 0f       	add	r22, r22
    647a:	77 1f       	adc	r23, r23
    647c:	88 1f       	adc	r24, r24
    647e:	99 1f       	adc	r25, r25
    6480:	1a f0       	brmi	.+6      	; 0x6488 <__fixunssfsi+0x22>
    6482:	ba 95       	dec	r27
    6484:	c9 f7       	brne	.-14     	; 0x6478 <__fixunssfsi+0x12>
    6486:	12 c0       	rjmp	.+36     	; 0x64ac <__fixunssfsi+0x46>
    6488:	b1 30       	cpi	r27, 0x01	; 1
    648a:	81 f0       	breq	.+32     	; 0x64ac <__fixunssfsi+0x46>
    648c:	9f d0       	rcall	.+318    	; 0x65cc <__fp_zero>
    648e:	b1 e0       	ldi	r27, 0x01	; 1
    6490:	08 95       	ret
    6492:	9c c0       	rjmp	.+312    	; 0x65cc <__fp_zero>
    6494:	67 2f       	mov	r22, r23
    6496:	78 2f       	mov	r23, r24
    6498:	88 27       	eor	r24, r24
    649a:	b8 5f       	subi	r27, 0xF8	; 248
    649c:	39 f0       	breq	.+14     	; 0x64ac <__fixunssfsi+0x46>
    649e:	b9 3f       	cpi	r27, 0xF9	; 249
    64a0:	cc f3       	brlt	.-14     	; 0x6494 <__fixunssfsi+0x2e>
    64a2:	86 95       	lsr	r24
    64a4:	77 95       	ror	r23
    64a6:	67 95       	ror	r22
    64a8:	b3 95       	inc	r27
    64aa:	d9 f7       	brne	.-10     	; 0x64a2 <__fixunssfsi+0x3c>
    64ac:	3e f4       	brtc	.+14     	; 0x64bc <__fixunssfsi+0x56>
    64ae:	90 95       	com	r25
    64b0:	80 95       	com	r24
    64b2:	70 95       	com	r23
    64b4:	61 95       	neg	r22
    64b6:	7f 4f       	sbci	r23, 0xFF	; 255
    64b8:	8f 4f       	sbci	r24, 0xFF	; 255
    64ba:	9f 4f       	sbci	r25, 0xFF	; 255
    64bc:	08 95       	ret

000064be <__floatunsisf>:
    64be:	e8 94       	clt
    64c0:	09 c0       	rjmp	.+18     	; 0x64d4 <__floatsisf+0x12>

000064c2 <__floatsisf>:
    64c2:	97 fb       	bst	r25, 7
    64c4:	3e f4       	brtc	.+14     	; 0x64d4 <__floatsisf+0x12>
    64c6:	90 95       	com	r25
    64c8:	80 95       	com	r24
    64ca:	70 95       	com	r23
    64cc:	61 95       	neg	r22
    64ce:	7f 4f       	sbci	r23, 0xFF	; 255
    64d0:	8f 4f       	sbci	r24, 0xFF	; 255
    64d2:	9f 4f       	sbci	r25, 0xFF	; 255
    64d4:	99 23       	and	r25, r25
    64d6:	a9 f0       	breq	.+42     	; 0x6502 <__floatsisf+0x40>
    64d8:	f9 2f       	mov	r31, r25
    64da:	96 e9       	ldi	r25, 0x96	; 150
    64dc:	bb 27       	eor	r27, r27
    64de:	93 95       	inc	r25
    64e0:	f6 95       	lsr	r31
    64e2:	87 95       	ror	r24
    64e4:	77 95       	ror	r23
    64e6:	67 95       	ror	r22
    64e8:	b7 95       	ror	r27
    64ea:	f1 11       	cpse	r31, r1
    64ec:	f8 cf       	rjmp	.-16     	; 0x64de <__floatsisf+0x1c>
    64ee:	fa f4       	brpl	.+62     	; 0x652e <__floatsisf+0x6c>
    64f0:	bb 0f       	add	r27, r27
    64f2:	11 f4       	brne	.+4      	; 0x64f8 <__floatsisf+0x36>
    64f4:	60 ff       	sbrs	r22, 0
    64f6:	1b c0       	rjmp	.+54     	; 0x652e <__floatsisf+0x6c>
    64f8:	6f 5f       	subi	r22, 0xFF	; 255
    64fa:	7f 4f       	sbci	r23, 0xFF	; 255
    64fc:	8f 4f       	sbci	r24, 0xFF	; 255
    64fe:	9f 4f       	sbci	r25, 0xFF	; 255
    6500:	16 c0       	rjmp	.+44     	; 0x652e <__floatsisf+0x6c>
    6502:	88 23       	and	r24, r24
    6504:	11 f0       	breq	.+4      	; 0x650a <__floatsisf+0x48>
    6506:	96 e9       	ldi	r25, 0x96	; 150
    6508:	11 c0       	rjmp	.+34     	; 0x652c <__floatsisf+0x6a>
    650a:	77 23       	and	r23, r23
    650c:	21 f0       	breq	.+8      	; 0x6516 <__floatsisf+0x54>
    650e:	9e e8       	ldi	r25, 0x8E	; 142
    6510:	87 2f       	mov	r24, r23
    6512:	76 2f       	mov	r23, r22
    6514:	05 c0       	rjmp	.+10     	; 0x6520 <__floatsisf+0x5e>
    6516:	66 23       	and	r22, r22
    6518:	71 f0       	breq	.+28     	; 0x6536 <__floatsisf+0x74>
    651a:	96 e8       	ldi	r25, 0x86	; 134
    651c:	86 2f       	mov	r24, r22
    651e:	70 e0       	ldi	r23, 0x00	; 0
    6520:	60 e0       	ldi	r22, 0x00	; 0
    6522:	2a f0       	brmi	.+10     	; 0x652e <__floatsisf+0x6c>
    6524:	9a 95       	dec	r25
    6526:	66 0f       	add	r22, r22
    6528:	77 1f       	adc	r23, r23
    652a:	88 1f       	adc	r24, r24
    652c:	da f7       	brpl	.-10     	; 0x6524 <__floatsisf+0x62>
    652e:	88 0f       	add	r24, r24
    6530:	96 95       	lsr	r25
    6532:	87 95       	ror	r24
    6534:	97 f9       	bld	r25, 7
    6536:	08 95       	ret

00006538 <__fp_inf>:
    6538:	97 f9       	bld	r25, 7
    653a:	9f 67       	ori	r25, 0x7F	; 127
    653c:	80 e8       	ldi	r24, 0x80	; 128
    653e:	70 e0       	ldi	r23, 0x00	; 0
    6540:	60 e0       	ldi	r22, 0x00	; 0
    6542:	08 95       	ret

00006544 <__fp_nan>:
    6544:	9f ef       	ldi	r25, 0xFF	; 255
    6546:	80 ec       	ldi	r24, 0xC0	; 192
    6548:	08 95       	ret

0000654a <__fp_pscA>:
    654a:	00 24       	eor	r0, r0
    654c:	0a 94       	dec	r0
    654e:	16 16       	cp	r1, r22
    6550:	17 06       	cpc	r1, r23
    6552:	18 06       	cpc	r1, r24
    6554:	09 06       	cpc	r0, r25
    6556:	08 95       	ret

00006558 <__fp_pscB>:
    6558:	00 24       	eor	r0, r0
    655a:	0a 94       	dec	r0
    655c:	12 16       	cp	r1, r18
    655e:	13 06       	cpc	r1, r19
    6560:	14 06       	cpc	r1, r20
    6562:	05 06       	cpc	r0, r21
    6564:	08 95       	ret

00006566 <__fp_round>:
    6566:	09 2e       	mov	r0, r25
    6568:	03 94       	inc	r0
    656a:	00 0c       	add	r0, r0
    656c:	11 f4       	brne	.+4      	; 0x6572 <__fp_round+0xc>
    656e:	88 23       	and	r24, r24
    6570:	52 f0       	brmi	.+20     	; 0x6586 <__fp_round+0x20>
    6572:	bb 0f       	add	r27, r27
    6574:	40 f4       	brcc	.+16     	; 0x6586 <__fp_round+0x20>
    6576:	bf 2b       	or	r27, r31
    6578:	11 f4       	brne	.+4      	; 0x657e <__fp_round+0x18>
    657a:	60 ff       	sbrs	r22, 0
    657c:	04 c0       	rjmp	.+8      	; 0x6586 <__fp_round+0x20>
    657e:	6f 5f       	subi	r22, 0xFF	; 255
    6580:	7f 4f       	sbci	r23, 0xFF	; 255
    6582:	8f 4f       	sbci	r24, 0xFF	; 255
    6584:	9f 4f       	sbci	r25, 0xFF	; 255
    6586:	08 95       	ret

00006588 <__fp_split3>:
    6588:	57 fd       	sbrc	r21, 7
    658a:	90 58       	subi	r25, 0x80	; 128
    658c:	44 0f       	add	r20, r20
    658e:	55 1f       	adc	r21, r21
    6590:	59 f0       	breq	.+22     	; 0x65a8 <__fp_splitA+0x10>
    6592:	5f 3f       	cpi	r21, 0xFF	; 255
    6594:	71 f0       	breq	.+28     	; 0x65b2 <__fp_splitA+0x1a>
    6596:	47 95       	ror	r20

00006598 <__fp_splitA>:
    6598:	88 0f       	add	r24, r24
    659a:	97 fb       	bst	r25, 7
    659c:	99 1f       	adc	r25, r25
    659e:	61 f0       	breq	.+24     	; 0x65b8 <__fp_splitA+0x20>
    65a0:	9f 3f       	cpi	r25, 0xFF	; 255
    65a2:	79 f0       	breq	.+30     	; 0x65c2 <__fp_splitA+0x2a>
    65a4:	87 95       	ror	r24
    65a6:	08 95       	ret
    65a8:	12 16       	cp	r1, r18
    65aa:	13 06       	cpc	r1, r19
    65ac:	14 06       	cpc	r1, r20
    65ae:	55 1f       	adc	r21, r21
    65b0:	f2 cf       	rjmp	.-28     	; 0x6596 <__fp_split3+0xe>
    65b2:	46 95       	lsr	r20
    65b4:	f1 df       	rcall	.-30     	; 0x6598 <__fp_splitA>
    65b6:	08 c0       	rjmp	.+16     	; 0x65c8 <__fp_splitA+0x30>
    65b8:	16 16       	cp	r1, r22
    65ba:	17 06       	cpc	r1, r23
    65bc:	18 06       	cpc	r1, r24
    65be:	99 1f       	adc	r25, r25
    65c0:	f1 cf       	rjmp	.-30     	; 0x65a4 <__fp_splitA+0xc>
    65c2:	86 95       	lsr	r24
    65c4:	71 05       	cpc	r23, r1
    65c6:	61 05       	cpc	r22, r1
    65c8:	08 94       	sec
    65ca:	08 95       	ret

000065cc <__fp_zero>:
    65cc:	e8 94       	clt

000065ce <__fp_szero>:
    65ce:	bb 27       	eor	r27, r27
    65d0:	66 27       	eor	r22, r22
    65d2:	77 27       	eor	r23, r23
    65d4:	cb 01       	movw	r24, r22
    65d6:	97 f9       	bld	r25, 7
    65d8:	08 95       	ret

000065da <__mulsf3>:
    65da:	0b d0       	rcall	.+22     	; 0x65f2 <__mulsf3x>
    65dc:	c4 cf       	rjmp	.-120    	; 0x6566 <__fp_round>
    65de:	b5 df       	rcall	.-150    	; 0x654a <__fp_pscA>
    65e0:	28 f0       	brcs	.+10     	; 0x65ec <__mulsf3+0x12>
    65e2:	ba df       	rcall	.-140    	; 0x6558 <__fp_pscB>
    65e4:	18 f0       	brcs	.+6      	; 0x65ec <__mulsf3+0x12>
    65e6:	95 23       	and	r25, r21
    65e8:	09 f0       	breq	.+2      	; 0x65ec <__mulsf3+0x12>
    65ea:	a6 cf       	rjmp	.-180    	; 0x6538 <__fp_inf>
    65ec:	ab cf       	rjmp	.-170    	; 0x6544 <__fp_nan>
    65ee:	11 24       	eor	r1, r1
    65f0:	ee cf       	rjmp	.-36     	; 0x65ce <__fp_szero>

000065f2 <__mulsf3x>:
    65f2:	ca df       	rcall	.-108    	; 0x6588 <__fp_split3>
    65f4:	a0 f3       	brcs	.-24     	; 0x65de <__mulsf3+0x4>

000065f6 <__mulsf3_pse>:
    65f6:	95 9f       	mul	r25, r21
    65f8:	d1 f3       	breq	.-12     	; 0x65ee <__mulsf3+0x14>
    65fa:	95 0f       	add	r25, r21
    65fc:	50 e0       	ldi	r21, 0x00	; 0
    65fe:	55 1f       	adc	r21, r21
    6600:	62 9f       	mul	r22, r18
    6602:	f0 01       	movw	r30, r0
    6604:	72 9f       	mul	r23, r18
    6606:	bb 27       	eor	r27, r27
    6608:	f0 0d       	add	r31, r0
    660a:	b1 1d       	adc	r27, r1
    660c:	63 9f       	mul	r22, r19
    660e:	aa 27       	eor	r26, r26
    6610:	f0 0d       	add	r31, r0
    6612:	b1 1d       	adc	r27, r1
    6614:	aa 1f       	adc	r26, r26
    6616:	64 9f       	mul	r22, r20
    6618:	66 27       	eor	r22, r22
    661a:	b0 0d       	add	r27, r0
    661c:	a1 1d       	adc	r26, r1
    661e:	66 1f       	adc	r22, r22
    6620:	82 9f       	mul	r24, r18
    6622:	22 27       	eor	r18, r18
    6624:	b0 0d       	add	r27, r0
    6626:	a1 1d       	adc	r26, r1
    6628:	62 1f       	adc	r22, r18
    662a:	73 9f       	mul	r23, r19
    662c:	b0 0d       	add	r27, r0
    662e:	a1 1d       	adc	r26, r1
    6630:	62 1f       	adc	r22, r18
    6632:	83 9f       	mul	r24, r19
    6634:	a0 0d       	add	r26, r0
    6636:	61 1d       	adc	r22, r1
    6638:	22 1f       	adc	r18, r18
    663a:	74 9f       	mul	r23, r20
    663c:	33 27       	eor	r19, r19
    663e:	a0 0d       	add	r26, r0
    6640:	61 1d       	adc	r22, r1
    6642:	23 1f       	adc	r18, r19
    6644:	84 9f       	mul	r24, r20
    6646:	60 0d       	add	r22, r0
    6648:	21 1d       	adc	r18, r1
    664a:	82 2f       	mov	r24, r18
    664c:	76 2f       	mov	r23, r22
    664e:	6a 2f       	mov	r22, r26
    6650:	11 24       	eor	r1, r1
    6652:	9f 57       	subi	r25, 0x7F	; 127
    6654:	50 40       	sbci	r21, 0x00	; 0
    6656:	8a f0       	brmi	.+34     	; 0x667a <__mulsf3_pse+0x84>
    6658:	e1 f0       	breq	.+56     	; 0x6692 <__mulsf3_pse+0x9c>
    665a:	88 23       	and	r24, r24
    665c:	4a f0       	brmi	.+18     	; 0x6670 <__mulsf3_pse+0x7a>
    665e:	ee 0f       	add	r30, r30
    6660:	ff 1f       	adc	r31, r31
    6662:	bb 1f       	adc	r27, r27
    6664:	66 1f       	adc	r22, r22
    6666:	77 1f       	adc	r23, r23
    6668:	88 1f       	adc	r24, r24
    666a:	91 50       	subi	r25, 0x01	; 1
    666c:	50 40       	sbci	r21, 0x00	; 0
    666e:	a9 f7       	brne	.-22     	; 0x665a <__mulsf3_pse+0x64>
    6670:	9e 3f       	cpi	r25, 0xFE	; 254
    6672:	51 05       	cpc	r21, r1
    6674:	70 f0       	brcs	.+28     	; 0x6692 <__mulsf3_pse+0x9c>
    6676:	60 cf       	rjmp	.-320    	; 0x6538 <__fp_inf>
    6678:	aa cf       	rjmp	.-172    	; 0x65ce <__fp_szero>
    667a:	5f 3f       	cpi	r21, 0xFF	; 255
    667c:	ec f3       	brlt	.-6      	; 0x6678 <__mulsf3_pse+0x82>
    667e:	98 3e       	cpi	r25, 0xE8	; 232
    6680:	dc f3       	brlt	.-10     	; 0x6678 <__mulsf3_pse+0x82>
    6682:	86 95       	lsr	r24
    6684:	77 95       	ror	r23
    6686:	67 95       	ror	r22
    6688:	b7 95       	ror	r27
    668a:	f7 95       	ror	r31
    668c:	e7 95       	ror	r30
    668e:	9f 5f       	subi	r25, 0xFF	; 255
    6690:	c1 f7       	brne	.-16     	; 0x6682 <__mulsf3_pse+0x8c>
    6692:	fe 2b       	or	r31, r30
    6694:	88 0f       	add	r24, r24
    6696:	91 1d       	adc	r25, r1
    6698:	96 95       	lsr	r25
    669a:	87 95       	ror	r24
    669c:	97 f9       	bld	r25, 7
    669e:	08 95       	ret

000066a0 <__mulsi3>:
    66a0:	db 01       	movw	r26, r22
    66a2:	8f 93       	push	r24
    66a4:	9f 93       	push	r25
    66a6:	8e d0       	rcall	.+284    	; 0x67c4 <__muluhisi3>
    66a8:	bf 91       	pop	r27
    66aa:	af 91       	pop	r26
    66ac:	a2 9f       	mul	r26, r18
    66ae:	80 0d       	add	r24, r0
    66b0:	91 1d       	adc	r25, r1
    66b2:	a3 9f       	mul	r26, r19
    66b4:	90 0d       	add	r25, r0
    66b6:	b2 9f       	mul	r27, r18
    66b8:	90 0d       	add	r25, r0
    66ba:	11 24       	eor	r1, r1
    66bc:	08 95       	ret

000066be <__udivmodhi4>:
    66be:	aa 1b       	sub	r26, r26
    66c0:	bb 1b       	sub	r27, r27
    66c2:	51 e1       	ldi	r21, 0x11	; 17
    66c4:	07 c0       	rjmp	.+14     	; 0x66d4 <__udivmodhi4_ep>

000066c6 <__udivmodhi4_loop>:
    66c6:	aa 1f       	adc	r26, r26
    66c8:	bb 1f       	adc	r27, r27
    66ca:	a6 17       	cp	r26, r22
    66cc:	b7 07       	cpc	r27, r23
    66ce:	10 f0       	brcs	.+4      	; 0x66d4 <__udivmodhi4_ep>
    66d0:	a6 1b       	sub	r26, r22
    66d2:	b7 0b       	sbc	r27, r23

000066d4 <__udivmodhi4_ep>:
    66d4:	88 1f       	adc	r24, r24
    66d6:	99 1f       	adc	r25, r25
    66d8:	5a 95       	dec	r21
    66da:	a9 f7       	brne	.-22     	; 0x66c6 <__udivmodhi4_loop>
    66dc:	80 95       	com	r24
    66de:	90 95       	com	r25
    66e0:	bc 01       	movw	r22, r24
    66e2:	cd 01       	movw	r24, r26
    66e4:	08 95       	ret

000066e6 <__divmodhi4>:
    66e6:	97 fb       	bst	r25, 7
    66e8:	07 2e       	mov	r0, r23
    66ea:	16 f4       	brtc	.+4      	; 0x66f0 <__divmodhi4+0xa>
    66ec:	00 94       	com	r0
    66ee:	06 d0       	rcall	.+12     	; 0x66fc <__divmodhi4_neg1>
    66f0:	77 fd       	sbrc	r23, 7
    66f2:	08 d0       	rcall	.+16     	; 0x6704 <__divmodhi4_neg2>
    66f4:	e4 df       	rcall	.-56     	; 0x66be <__udivmodhi4>
    66f6:	07 fc       	sbrc	r0, 7
    66f8:	05 d0       	rcall	.+10     	; 0x6704 <__divmodhi4_neg2>
    66fa:	3e f4       	brtc	.+14     	; 0x670a <__divmodhi4_exit>

000066fc <__divmodhi4_neg1>:
    66fc:	90 95       	com	r25
    66fe:	81 95       	neg	r24
    6700:	9f 4f       	sbci	r25, 0xFF	; 255
    6702:	08 95       	ret

00006704 <__divmodhi4_neg2>:
    6704:	70 95       	com	r23
    6706:	61 95       	neg	r22
    6708:	7f 4f       	sbci	r23, 0xFF	; 255

0000670a <__divmodhi4_exit>:
    670a:	08 95       	ret

0000670c <__udivmodsi4>:
    670c:	a1 e2       	ldi	r26, 0x21	; 33
    670e:	1a 2e       	mov	r1, r26
    6710:	aa 1b       	sub	r26, r26
    6712:	bb 1b       	sub	r27, r27
    6714:	fd 01       	movw	r30, r26
    6716:	0d c0       	rjmp	.+26     	; 0x6732 <__udivmodsi4_ep>

00006718 <__udivmodsi4_loop>:
    6718:	aa 1f       	adc	r26, r26
    671a:	bb 1f       	adc	r27, r27
    671c:	ee 1f       	adc	r30, r30
    671e:	ff 1f       	adc	r31, r31
    6720:	a2 17       	cp	r26, r18
    6722:	b3 07       	cpc	r27, r19
    6724:	e4 07       	cpc	r30, r20
    6726:	f5 07       	cpc	r31, r21
    6728:	20 f0       	brcs	.+8      	; 0x6732 <__udivmodsi4_ep>
    672a:	a2 1b       	sub	r26, r18
    672c:	b3 0b       	sbc	r27, r19
    672e:	e4 0b       	sbc	r30, r20
    6730:	f5 0b       	sbc	r31, r21

00006732 <__udivmodsi4_ep>:
    6732:	66 1f       	adc	r22, r22
    6734:	77 1f       	adc	r23, r23
    6736:	88 1f       	adc	r24, r24
    6738:	99 1f       	adc	r25, r25
    673a:	1a 94       	dec	r1
    673c:	69 f7       	brne	.-38     	; 0x6718 <__udivmodsi4_loop>
    673e:	60 95       	com	r22
    6740:	70 95       	com	r23
    6742:	80 95       	com	r24
    6744:	90 95       	com	r25
    6746:	9b 01       	movw	r18, r22
    6748:	ac 01       	movw	r20, r24
    674a:	bd 01       	movw	r22, r26
    674c:	cf 01       	movw	r24, r30
    674e:	08 95       	ret

00006750 <__divmodsi4>:
    6750:	05 2e       	mov	r0, r21
    6752:	97 fb       	bst	r25, 7
    6754:	16 f4       	brtc	.+4      	; 0x675a <__divmodsi4+0xa>
    6756:	00 94       	com	r0
    6758:	0f d0       	rcall	.+30     	; 0x6778 <__negsi2>
    675a:	57 fd       	sbrc	r21, 7
    675c:	05 d0       	rcall	.+10     	; 0x6768 <__divmodsi4_neg2>
    675e:	d6 df       	rcall	.-84     	; 0x670c <__udivmodsi4>
    6760:	07 fc       	sbrc	r0, 7
    6762:	02 d0       	rcall	.+4      	; 0x6768 <__divmodsi4_neg2>
    6764:	46 f4       	brtc	.+16     	; 0x6776 <__divmodsi4_exit>
    6766:	08 c0       	rjmp	.+16     	; 0x6778 <__negsi2>

00006768 <__divmodsi4_neg2>:
    6768:	50 95       	com	r21
    676a:	40 95       	com	r20
    676c:	30 95       	com	r19
    676e:	21 95       	neg	r18
    6770:	3f 4f       	sbci	r19, 0xFF	; 255
    6772:	4f 4f       	sbci	r20, 0xFF	; 255
    6774:	5f 4f       	sbci	r21, 0xFF	; 255

00006776 <__divmodsi4_exit>:
    6776:	08 95       	ret

00006778 <__negsi2>:
    6778:	90 95       	com	r25
    677a:	80 95       	com	r24
    677c:	70 95       	com	r23
    677e:	61 95       	neg	r22
    6780:	7f 4f       	sbci	r23, 0xFF	; 255
    6782:	8f 4f       	sbci	r24, 0xFF	; 255
    6784:	9f 4f       	sbci	r25, 0xFF	; 255
    6786:	08 95       	ret

00006788 <__tablejump2__>:
    6788:	ee 0f       	add	r30, r30
    678a:	ff 1f       	adc	r31, r31
    678c:	00 24       	eor	r0, r0
    678e:	00 1c       	adc	r0, r0
    6790:	0b be       	out	0x3b, r0	; 59
    6792:	07 90       	elpm	r0, Z+
    6794:	f6 91       	elpm	r31, Z
    6796:	e0 2d       	mov	r30, r0
    6798:	09 94       	ijmp

0000679a <__umulhisi3>:
    679a:	a2 9f       	mul	r26, r18
    679c:	b0 01       	movw	r22, r0
    679e:	b3 9f       	mul	r27, r19
    67a0:	c0 01       	movw	r24, r0
    67a2:	a3 9f       	mul	r26, r19
    67a4:	70 0d       	add	r23, r0
    67a6:	81 1d       	adc	r24, r1
    67a8:	11 24       	eor	r1, r1
    67aa:	91 1d       	adc	r25, r1
    67ac:	b2 9f       	mul	r27, r18
    67ae:	70 0d       	add	r23, r0
    67b0:	81 1d       	adc	r24, r1
    67b2:	11 24       	eor	r1, r1
    67b4:	91 1d       	adc	r25, r1
    67b6:	08 95       	ret

000067b8 <__usmulhisi3>:
    67b8:	f0 df       	rcall	.-32     	; 0x679a <__umulhisi3>

000067ba <__usmulhisi3_tail>:
    67ba:	b7 ff       	sbrs	r27, 7
    67bc:	08 95       	ret
    67be:	82 1b       	sub	r24, r18
    67c0:	93 0b       	sbc	r25, r19
    67c2:	08 95       	ret

000067c4 <__muluhisi3>:
    67c4:	ea df       	rcall	.-44     	; 0x679a <__umulhisi3>
    67c6:	a5 9f       	mul	r26, r21
    67c8:	90 0d       	add	r25, r0
    67ca:	b4 9f       	mul	r27, r20
    67cc:	90 0d       	add	r25, r0
    67ce:	a4 9f       	mul	r26, r20
    67d0:	80 0d       	add	r24, r0
    67d2:	91 1d       	adc	r25, r1
    67d4:	11 24       	eor	r1, r1
    67d6:	08 95       	ret

000067d8 <random_r>:
    67d8:	8f 92       	push	r8
    67da:	9f 92       	push	r9
    67dc:	af 92       	push	r10
    67de:	bf 92       	push	r11
    67e0:	cf 92       	push	r12
    67e2:	df 92       	push	r13
    67e4:	ef 92       	push	r14
    67e6:	ff 92       	push	r15
    67e8:	cf 93       	push	r28
    67ea:	df 93       	push	r29
    67ec:	ec 01       	movw	r28, r24
    67ee:	68 81       	ld	r22, Y
    67f0:	79 81       	ldd	r23, Y+1	; 0x01
    67f2:	8a 81       	ldd	r24, Y+2	; 0x02
    67f4:	9b 81       	ldd	r25, Y+3	; 0x03
    67f6:	61 15       	cp	r22, r1
    67f8:	71 05       	cpc	r23, r1
    67fa:	81 05       	cpc	r24, r1
    67fc:	91 05       	cpc	r25, r1
    67fe:	21 f4       	brne	.+8      	; 0x6808 <random_r+0x30>
    6800:	64 e2       	ldi	r22, 0x24	; 36
    6802:	79 ed       	ldi	r23, 0xD9	; 217
    6804:	8b e5       	ldi	r24, 0x5B	; 91
    6806:	97 e0       	ldi	r25, 0x07	; 7
    6808:	2d e1       	ldi	r18, 0x1D	; 29
    680a:	33 ef       	ldi	r19, 0xF3	; 243
    680c:	41 e0       	ldi	r20, 0x01	; 1
    680e:	50 e0       	ldi	r21, 0x00	; 0
    6810:	9f df       	rcall	.-194    	; 0x6750 <__divmodsi4>
    6812:	49 01       	movw	r8, r18
    6814:	5a 01       	movw	r10, r20
    6816:	9b 01       	movw	r18, r22
    6818:	ac 01       	movw	r20, r24
    681a:	a7 ea       	ldi	r26, 0xA7	; 167
    681c:	b1 e4       	ldi	r27, 0x41	; 65
    681e:	d2 df       	rcall	.-92     	; 0x67c4 <__muluhisi3>
    6820:	6b 01       	movw	r12, r22
    6822:	7c 01       	movw	r14, r24
    6824:	ac ee       	ldi	r26, 0xEC	; 236
    6826:	b4 ef       	ldi	r27, 0xF4	; 244
    6828:	a5 01       	movw	r20, r10
    682a:	94 01       	movw	r18, r8
    682c:	94 d0       	rcall	.+296    	; 0x6956 <__mulohisi3>
    682e:	c6 0e       	add	r12, r22
    6830:	d7 1e       	adc	r13, r23
    6832:	e8 1e       	adc	r14, r24
    6834:	f9 1e       	adc	r15, r25
    6836:	f7 fe       	sbrs	r15, 7
    6838:	06 c0       	rjmp	.+12     	; 0x6846 <random_r+0x6e>
    683a:	81 e0       	ldi	r24, 0x01	; 1
    683c:	c8 1a       	sub	r12, r24
    683e:	d1 08       	sbc	r13, r1
    6840:	e1 08       	sbc	r14, r1
    6842:	80 e8       	ldi	r24, 0x80	; 128
    6844:	f8 0a       	sbc	r15, r24
    6846:	c8 82       	st	Y, r12
    6848:	d9 82       	std	Y+1, r13	; 0x01
    684a:	ea 82       	std	Y+2, r14	; 0x02
    684c:	fb 82       	std	Y+3, r15	; 0x03
    684e:	c7 01       	movw	r24, r14
    6850:	b6 01       	movw	r22, r12
    6852:	9f 77       	andi	r25, 0x7F	; 127
    6854:	df 91       	pop	r29
    6856:	cf 91       	pop	r28
    6858:	ff 90       	pop	r15
    685a:	ef 90       	pop	r14
    685c:	df 90       	pop	r13
    685e:	cf 90       	pop	r12
    6860:	bf 90       	pop	r11
    6862:	af 90       	pop	r10
    6864:	9f 90       	pop	r9
    6866:	8f 90       	pop	r8
    6868:	08 95       	ret

0000686a <random>:
    686a:	8f 92       	push	r8
    686c:	9f 92       	push	r9
    686e:	af 92       	push	r10
    6870:	bf 92       	push	r11
    6872:	cf 92       	push	r12
    6874:	df 92       	push	r13
    6876:	ef 92       	push	r14
    6878:	ff 92       	push	r15
    687a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    687e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    6882:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    6886:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    688a:	61 15       	cp	r22, r1
    688c:	71 05       	cpc	r23, r1
    688e:	81 05       	cpc	r24, r1
    6890:	91 05       	cpc	r25, r1
    6892:	21 f4       	brne	.+8      	; 0x689c <random+0x32>
    6894:	64 e2       	ldi	r22, 0x24	; 36
    6896:	79 ed       	ldi	r23, 0xD9	; 217
    6898:	8b e5       	ldi	r24, 0x5B	; 91
    689a:	97 e0       	ldi	r25, 0x07	; 7
    689c:	2d e1       	ldi	r18, 0x1D	; 29
    689e:	33 ef       	ldi	r19, 0xF3	; 243
    68a0:	41 e0       	ldi	r20, 0x01	; 1
    68a2:	50 e0       	ldi	r21, 0x00	; 0
    68a4:	55 df       	rcall	.-342    	; 0x6750 <__divmodsi4>
    68a6:	49 01       	movw	r8, r18
    68a8:	5a 01       	movw	r10, r20
    68aa:	9b 01       	movw	r18, r22
    68ac:	ac 01       	movw	r20, r24
    68ae:	a7 ea       	ldi	r26, 0xA7	; 167
    68b0:	b1 e4       	ldi	r27, 0x41	; 65
    68b2:	88 df       	rcall	.-240    	; 0x67c4 <__muluhisi3>
    68b4:	6b 01       	movw	r12, r22
    68b6:	7c 01       	movw	r14, r24
    68b8:	ac ee       	ldi	r26, 0xEC	; 236
    68ba:	b4 ef       	ldi	r27, 0xF4	; 244
    68bc:	a5 01       	movw	r20, r10
    68be:	94 01       	movw	r18, r8
    68c0:	4a d0       	rcall	.+148    	; 0x6956 <__mulohisi3>
    68c2:	c6 0e       	add	r12, r22
    68c4:	d7 1e       	adc	r13, r23
    68c6:	e8 1e       	adc	r14, r24
    68c8:	f9 1e       	adc	r15, r25
    68ca:	f7 fe       	sbrs	r15, 7
    68cc:	06 c0       	rjmp	.+12     	; 0x68da <random+0x70>
    68ce:	81 e0       	ldi	r24, 0x01	; 1
    68d0:	c8 1a       	sub	r12, r24
    68d2:	d1 08       	sbc	r13, r1
    68d4:	e1 08       	sbc	r14, r1
    68d6:	80 e8       	ldi	r24, 0x80	; 128
    68d8:	f8 0a       	sbc	r15, r24
    68da:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    68de:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    68e2:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    68e6:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    68ea:	c7 01       	movw	r24, r14
    68ec:	b6 01       	movw	r22, r12
    68ee:	9f 77       	andi	r25, 0x7F	; 127
    68f0:	ff 90       	pop	r15
    68f2:	ef 90       	pop	r14
    68f4:	df 90       	pop	r13
    68f6:	cf 90       	pop	r12
    68f8:	bf 90       	pop	r11
    68fa:	af 90       	pop	r10
    68fc:	9f 90       	pop	r9
    68fe:	8f 90       	pop	r8
    6900:	08 95       	ret

00006902 <srandom>:
    6902:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    6906:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    690a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    690e:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    6912:	08 95       	ret

00006914 <memcpy>:
    6914:	fb 01       	movw	r30, r22
    6916:	dc 01       	movw	r26, r24
    6918:	02 c0       	rjmp	.+4      	; 0x691e <memcpy+0xa>
    691a:	01 90       	ld	r0, Z+
    691c:	0d 92       	st	X+, r0
    691e:	41 50       	subi	r20, 0x01	; 1
    6920:	50 40       	sbci	r21, 0x00	; 0
    6922:	d8 f7       	brcc	.-10     	; 0x691a <memcpy+0x6>
    6924:	08 95       	ret

00006926 <strcpy>:
    6926:	fb 01       	movw	r30, r22
    6928:	dc 01       	movw	r26, r24
    692a:	01 90       	ld	r0, Z+
    692c:	0d 92       	st	X+, r0
    692e:	00 20       	and	r0, r0
    6930:	e1 f7       	brne	.-8      	; 0x692a <strcpy+0x4>
    6932:	08 95       	ret

00006934 <strncpy>:
    6934:	fb 01       	movw	r30, r22
    6936:	dc 01       	movw	r26, r24
    6938:	41 50       	subi	r20, 0x01	; 1
    693a:	50 40       	sbci	r21, 0x00	; 0
    693c:	48 f0       	brcs	.+18     	; 0x6950 <strncpy+0x1c>
    693e:	01 90       	ld	r0, Z+
    6940:	0d 92       	st	X+, r0
    6942:	00 20       	and	r0, r0
    6944:	c9 f7       	brne	.-14     	; 0x6938 <strncpy+0x4>
    6946:	01 c0       	rjmp	.+2      	; 0x694a <strncpy+0x16>
    6948:	1d 92       	st	X+, r1
    694a:	41 50       	subi	r20, 0x01	; 1
    694c:	50 40       	sbci	r21, 0x00	; 0
    694e:	e0 f7       	brcc	.-8      	; 0x6948 <strncpy+0x14>
    6950:	08 95       	ret

00006952 <__mulshisi3>:
    6952:	b7 ff       	sbrs	r27, 7
    6954:	37 cf       	rjmp	.-402    	; 0x67c4 <__muluhisi3>

00006956 <__mulohisi3>:
    6956:	36 df       	rcall	.-404    	; 0x67c4 <__muluhisi3>
    6958:	82 1b       	sub	r24, r18
    695a:	93 0b       	sbc	r25, r19
    695c:	08 95       	ret

0000695e <__do_global_dtors>:
    695e:	13 e0       	ldi	r17, 0x03	; 3
    6960:	c5 eb       	ldi	r28, 0xB5	; 181
    6962:	d3 e0       	ldi	r29, 0x03	; 3
    6964:	03 c0       	rjmp	.+6      	; 0x696c <__do_global_dtors+0xe>
    6966:	fe 01       	movw	r30, r28
    6968:	0f df       	rcall	.-482    	; 0x6788 <__tablejump2__>
    696a:	21 96       	adiw	r28, 0x01	; 1
    696c:	c6 3b       	cpi	r28, 0xB6	; 182
    696e:	d1 07       	cpc	r29, r17
    6970:	d1 f7       	brne	.-12     	; 0x6966 <__do_global_dtors+0x8>
    6972:	f8 94       	cli

00006974 <__stop_program>:
    6974:	ff cf       	rjmp	.-2      	; 0x6974 <__stop_program>
