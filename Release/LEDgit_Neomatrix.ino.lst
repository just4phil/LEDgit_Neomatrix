
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c4       	rjmp	.+2154   	; 0x86c <__dtors_end>
       2:	00 00       	nop
       4:	5d c4       	rjmp	.+2234   	; 0x8c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c4       	rjmp	.+2230   	; 0x8c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c4       	rjmp	.+2226   	; 0x8c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c4       	rjmp	.+2222   	; 0x8c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c4       	rjmp	.+2218   	; 0x8c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c4       	rjmp	.+2214   	; 0x8c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c4       	rjmp	.+2210   	; 0x8c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c4       	rjmp	.+2206   	; 0x8c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c4       	rjmp	.+2202   	; 0x8c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 3e 45 	jmp	0x8a7c	; 0x8a7c <__vector_10>
      2c:	0c 94 bb 45 	jmp	0x8b76	; 0x8b76 <__vector_11>
      30:	47 c4       	rjmp	.+2190   	; 0x8c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c4       	rjmp	.+2186   	; 0x8c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c4       	rjmp	.+2182   	; 0x8c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c4       	rjmp	.+2178   	; 0x8c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c4       	rjmp	.+2174   	; 0x8c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c4       	rjmp	.+2170   	; 0x8c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c4       	rjmp	.+2166   	; 0x8c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c4       	rjmp	.+2162   	; 0x8c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c4       	rjmp	.+2158   	; 0x8c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c4       	rjmp	.+2154   	; 0x8c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c4       	rjmp	.+2150   	; 0x8c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 9d 44 	jmp	0x893a	; 0x893a <__vector_23>
      60:	2f c4       	rjmp	.+2142   	; 0x8c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 f9 47 	jmp	0x8ff2	; 0x8ff2 <__vector_25>
      68:	0c 94 24 48 	jmp	0x9048	; 0x9048 <__vector_26>
      6c:	0c 94 55 48 	jmp	0x90aa	; 0x90aa <__vector_27>
      70:	27 c4       	rjmp	.+2126   	; 0x8c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c4       	rjmp	.+2122   	; 0x8c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c4       	rjmp	.+2118   	; 0x8c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c4       	rjmp	.+2114   	; 0x8c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 d1 17 	jmp	0x2fa2	; 0x2fa2 <__vector_32>
      84:	1d c4       	rjmp	.+2106   	; 0x8c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c4       	rjmp	.+2102   	; 0x8c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 c4       	rjmp	.+2098   	; 0x8c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	17 c4       	rjmp	.+2094   	; 0x8c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c4       	rjmp	.+2090   	; 0x8c0 <__bad_interrupt>
	...

00000098 <MatrixColors_p>:
      98:	00 10 00 00 00 30 00 00 00 50 00 00 00 70 00 00     .....0...P...p..
      a8:	00 80 00 00 00 80 00 00 00 80 00 00 19 8d 19 00     ................
      b8:	33 99 33 00 4d a6 4d 00 66 b3 66 00 80 c0 80 00     3.3.M.M.f.f.....
      c8:	99 cc 99 00 b3 d9 b3 00 cc e6 cc 00 e6 f2 e6 00     ................

000000d8 <font>:
      d8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      e8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      f8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     108:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     118:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     128:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     138:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     148:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     158:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     168:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     178:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     188:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     198:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1a8:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1b8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1c8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     1d8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1e8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1f8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     208:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     218:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     228:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     238:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     248:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     258:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     268:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     278:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     288:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     298:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2a8:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2b8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2c8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2d8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2e8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2f8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     308:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     318:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     328:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     338:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     348:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     358:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     368:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     378:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     388:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     398:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3a8:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3b8:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3c8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     3d8:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     3e8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3f8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     408:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     418:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     428:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     438:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     448:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     458:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     468:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     478:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     488:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     498:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4a8:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4b8:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4c8:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     4d8:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     4e8:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4f8:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     508:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     518:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     528:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     538:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     548:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     558:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     568:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     578:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     588:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     598:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5a8:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5b8:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5c8:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000005d8 <gamma6>:
     5d8:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5e8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5f8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     608:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

00000618 <gamma5>:
     618:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     628:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

00000638 <PartyColors_p>:
     638:	ab 00 55 00 7c 00 84 00 4b 00 b5 00 1b 00 e5 00     ..U.|...K.......
     648:	00 17 e8 00 00 47 b8 00 00 77 ab 00 00 ab ab 00     .....G...w......
     658:	00 55 ab 00 00 22 dd 00 0e 00 f2 00 3e 00 c2 00     .U..."......>...
     668:	71 00 8f 00 a1 00 5f 00 d0 00 2f 00 f9 07 00 00     q....._.../.....

00000678 <RainbowStripeColors_p>:
     678:	00 00 ff 00 00 00 00 00 00 55 ab 00 00 00 00 00     .........U......
     688:	00 ab ab 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     698:	55 ab 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     U...............
     6a8:	ab 00 55 00 00 00 00 00 55 00 ab 00 00 00 00 00     ..U.....U.......

000006b8 <RainbowColors_p>:
     6b8:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     6c8:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     6d8:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     6e8:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

000006f8 <CloudColors_p>:
     6f8:	ff 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     708:	8b 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     718:	ff 00 00 00 8b 00 00 00 eb ce 87 00 eb ce 87 00     ................
     728:	e6 d8 ad 00 ff ff ff 00 e6 d8 ad 00 eb ce 87 00     ................

00000738 <digital_pin_table_PGM>:
     738:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     748:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     758:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     768:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     778:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     788:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000794 <descriptor_list>:
     794:	00 01 00 00 45 08 12 00 02 00 00 02 08 43 00 03     ....E........C..
     7a4:	00 00 fe 07 04 01 03 09 04 e4 07 18 02 03 09 04     ................
     7b4:	cc 07 16 03 03 09 04 be 07 0c                       ..........

000007be <string3>:
     7be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000007cc <string2>:
     7cc:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     7dc:	69 00 61 00 6c 00 00 00                             i.a.l...

000007e4 <string1>:
     7e4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     7f4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000007fe <string0>:
     7fe:	04 03 09 04                                         ....

00000802 <config1_descriptor>:
     802:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     812:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     822:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     832:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     842:	40 00 00                                            @..

00000845 <device_descriptor>:
     845:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     855:	03 01                                               ..

00000857 <endpoint_config_table>:
     857:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000862 <__ctors_start>:
     862:	17 31       	cpi	r17, 0x17	; 23
     864:	19 40       	sbci	r17, 0x09	; 9
     866:	73 48       	sbci	r23, 0x83	; 131
     868:	38 4b       	sbci	r19, 0xB8	; 184

0000086a <__ctors_end>:
     86a:	92 31       	cpi	r25, 0x12	; 18

0000086c <__dtors_end>:
     86c:	11 24       	eor	r1, r1
     86e:	1f be       	out	0x3f, r1	; 63
     870:	cf ef       	ldi	r28, 0xFF	; 255
     872:	d0 e2       	ldi	r29, 0x20	; 32
     874:	de bf       	out	0x3e, r29	; 62
     876:	cd bf       	out	0x3d, r28	; 61

00000878 <__do_copy_data>:
     878:	19 e0       	ldi	r17, 0x09	; 9
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b1 e0       	ldi	r27, 0x01	; 1
     87e:	ee ea       	ldi	r30, 0xAE	; 174
     880:	fe e9       	ldi	r31, 0x9E	; 158
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	0b bf       	out	0x3b, r16	; 59
     886:	02 c0       	rjmp	.+4      	; 0x88c <__do_copy_data+0x14>
     888:	07 90       	elpm	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	a2 3e       	cpi	r26, 0xE2	; 226
     88e:	b1 07       	cpc	r27, r17
     890:	d9 f7       	brne	.-10     	; 0x888 <__do_copy_data+0x10>

00000892 <__do_clear_bss>:
     892:	21 e1       	ldi	r18, 0x11	; 17
     894:	a2 ee       	ldi	r26, 0xE2	; 226
     896:	b9 e0       	ldi	r27, 0x09	; 9
     898:	01 c0       	rjmp	.+2      	; 0x89c <.do_clear_bss_start>

0000089a <.do_clear_bss_loop>:
     89a:	1d 92       	st	X+, r1

0000089c <.do_clear_bss_start>:
     89c:	a8 36       	cpi	r26, 0x68	; 104
     89e:	b2 07       	cpc	r27, r18
     8a0:	e1 f7       	brne	.-8      	; 0x89a <.do_clear_bss_loop>

000008a2 <__do_global_ctors>:
     8a2:	14 e0       	ldi	r17, 0x04	; 4
     8a4:	c5 e3       	ldi	r28, 0x35	; 53
     8a6:	d4 e0       	ldi	r29, 0x04	; 4
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__do_global_ctors+0x10>
     8aa:	21 97       	sbiw	r28, 0x01	; 1
     8ac:	fe 01       	movw	r30, r28
     8ae:	0e 94 60 4e 	call	0x9cc0	; 0x9cc0 <__tablejump2__>
     8b2:	c1 33       	cpi	r28, 0x31	; 49
     8b4:	d1 07       	cpc	r29, r17
     8b6:	c9 f7       	brne	.-14     	; 0x8aa <__do_global_ctors+0x8>
     8b8:	0e 94 84 48 	call	0x9108	; 0x9108 <main>
     8bc:	0c 94 4b 4f 	jmp	0x9e96	; 0x9e96 <__do_global_dtors>

000008c0 <__bad_interrupt>:
     8c0:	9f cb       	rjmp	.-2242   	; 0x0 <__vectors>

000008c2 <CLEDController::size()>:
	//--- standard-part um dauer und naechstes programm zu speichern ----
	if (!nextChangeMillisAlreadyCalculated) {
		nextChangeMillis = 0;
		nextSongPart = nextPart;
		nextChangeMillisAlreadyCalculated = true;
	}
     8c2:	fc 01       	movw	r30, r24
     8c4:	85 85       	ldd	r24, Z+13	; 0x0d
     8c6:	96 85       	ldd	r25, Z+14	; 0x0e
     8c8:	08 95       	ret

000008ca <CLEDController::clearLeds(int)>:
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <CLEDController::clearLeds(int)+0x6>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <CLEDController::clearLeds(int)+0x8>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <CLEDController::clearLeds(int)+0xa>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	ab 01       	movw	r20, r22
     8da:	1c 82       	std	Y+4, r1	; 0x04
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	1e 82       	std	Y+6, r1	; 0x06
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	1a 82       	std	Y+2, r1	; 0x02
     8f0:	1b 82       	std	Y+3, r1	; 0x03
     8f2:	9e 01       	movw	r18, r28
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	be 01       	movw	r22, r28
     8fa:	6c 5f       	subi	r22, 0xFC	; 252
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	09 95       	icall
     900:	26 96       	adiw	r28, 0x06	; 6
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <myRemapFn(unsigned int, unsigned int)>:
     912:	67 31       	cpi	r22, 0x17	; 23
     914:	71 05       	cpc	r23, r1
     916:	08 f0       	brcs	.+2      	; 0x91a <myRemapFn(unsigned int, unsigned int)+0x8>
     918:	ef c0       	rjmp	.+478    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     91a:	fb 01       	movw	r30, r22
     91c:	ee 56       	subi	r30, 0x6E	; 110
     91e:	fb 4f       	sbci	r31, 0xFB	; 251
     920:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
     924:	a9 04       	cpc	r10, r9
     926:	b4 04       	cpc	r11, r4
     928:	bc 04       	cpc	r11, r12
     92a:	c9 04       	cpc	r12, r9
     92c:	d4 04       	cpc	r13, r4
     92e:	db 04       	cpc	r13, r11
     930:	e2 04       	cpc	r14, r2
     932:	e9 04       	cpc	r14, r9
     934:	f3 04       	cpc	r15, r3
     936:	fd 04       	cpc	r15, r13
     938:	07 05       	cpc	r16, r7
     93a:	11 05       	cpc	r17, r1
     93c:	1b 05       	cpc	r17, r11
     93e:	25 05       	cpc	r18, r5
     940:	2f 05       	cpc	r18, r15
     942:	37 05       	cpc	r19, r7
     944:	3f 05       	cpc	r19, r15
     946:	46 05       	cpc	r20, r6
     948:	4d 05       	cpc	r20, r13
     94a:	54 05       	cpc	r21, r4
     94c:	5e 05       	cpc	r21, r14
     94e:	68 05       	cpc	r22, r8
     950:	72 05       	cpc	r23, r2
     952:	04 97       	sbiw	r24, 0x04	; 4
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	08 f0       	brcs	.+2      	; 0x95c <myRemapFn(unsigned int, unsigned int)+0x4a>
     95a:	ce c0       	rjmp	.+412    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     95c:	86 59       	subi	r24, 0x96	; 150
     95e:	9a 4f       	sbci	r25, 0xFA	; 250
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	08 95       	ret
     968:	02 97       	sbiw	r24, 0x02	; 2
     96a:	86 30       	cpi	r24, 0x06	; 6
     96c:	91 05       	cpc	r25, r1
     96e:	08 f0       	brcs	.+2      	; 0x972 <myRemapFn(unsigned int, unsigned int)+0x60>
     970:	c3 c0       	rjmp	.+390    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     972:	8c 59       	subi	r24, 0x9C	; 156
     974:	9a 4f       	sbci	r25, 0xFA	; 250
     976:	f4 cf       	rjmp	.-24     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	83 31       	cpi	r24, 0x13	; 19
     97c:	91 05       	cpc	r25, r1
     97e:	08 f0       	brcs	.+2      	; 0x982 <myRemapFn(unsigned int, unsigned int)+0x70>
     980:	bb c0       	rjmp	.+374    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	fc 01       	movw	r30, r24
     988:	e2 5c       	subi	r30, 0xC2	; 194
     98a:	fa 4f       	sbci	r31, 0xFA	; 250
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	08 95       	ret
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	85 31       	cpi	r24, 0x15	; 21
     996:	91 05       	cpc	r25, r1
     998:	08 f0       	brcs	.+2      	; 0x99c <myRemapFn(unsigned int, unsigned int)+0x8a>
     99a:	ae c0       	rjmp	.+348    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	fc 01       	movw	r30, r24
     9a2:	ec 5e       	subi	r30, 0xEC	; 236
     9a4:	fa 4f       	sbci	r31, 0xFA	; 250
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9a8:	84 31       	cpi	r24, 0x14	; 20
     9aa:	91 05       	cpc	r25, r1
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <myRemapFn(unsigned int, unsigned int)+0x9e>
     9ae:	a4 c0       	rjmp	.+328    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9b0:	80 50       	subi	r24, 0x00	; 0
     9b2:	9b 4f       	sbci	r25, 0xFB	; 251
     9b4:	d5 cf       	rjmp	.-86     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9b6:	84 31       	cpi	r24, 0x14	; 20
     9b8:	91 05       	cpc	r25, r1
     9ba:	08 f0       	brcs	.+2      	; 0x9be <myRemapFn(unsigned int, unsigned int)+0xac>
     9bc:	9d c0       	rjmp	.+314    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9be:	84 51       	subi	r24, 0x14	; 20
     9c0:	9b 4f       	sbci	r25, 0xFB	; 251
     9c2:	ce cf       	rjmp	.-100    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9c4:	8f 30       	cpi	r24, 0x0F	; 15
     9c6:	91 05       	cpc	r25, r1
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <myRemapFn(unsigned int, unsigned int)+0xba>
     9ca:	96 c0       	rjmp	.+300    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9cc:	83 52       	subi	r24, 0x23	; 35
     9ce:	9b 4f       	sbci	r25, 0xFB	; 251
     9d0:	c7 cf       	rjmp	.-114    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9d2:	8f 30       	cpi	r24, 0x0F	; 15
     9d4:	91 05       	cpc	r25, r1
     9d6:	08 f0       	brcs	.+2      	; 0x9da <myRemapFn(unsigned int, unsigned int)+0xc8>
     9d8:	8f c0       	rjmp	.+286    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	fc 01       	movw	r30, r24
     9e0:	e1 54       	subi	r30, 0x41	; 65
     9e2:	fb 4f       	sbci	r31, 0xFB	; 251
     9e4:	d3 cf       	rjmp	.-90     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e6:	8f 30       	cpi	r24, 0x0F	; 15
     9e8:	91 05       	cpc	r25, r1
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <myRemapFn(unsigned int, unsigned int)+0xdc>
     9ec:	85 c0       	rjmp	.+266    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	ef 55       	subi	r30, 0x5F	; 95
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	c9 cf       	rjmp	.-110    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9fa:	8f 30       	cpi	r24, 0x0F	; 15
     9fc:	91 05       	cpc	r25, r1
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <myRemapFn(unsigned int, unsigned int)+0xf0>
     a00:	7b c0       	rjmp	.+246    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	fc 01       	movw	r30, r24
     a08:	ed 57       	subi	r30, 0x7D	; 125
     a0a:	fb 4f       	sbci	r31, 0xFB	; 251
     a0c:	bf cf       	rjmp	.-130    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a0e:	8f 30       	cpi	r24, 0x0F	; 15
     a10:	91 05       	cpc	r25, r1
     a12:	08 f0       	brcs	.+2      	; 0xa16 <myRemapFn(unsigned int, unsigned int)+0x104>
     a14:	71 c0       	rjmp	.+226    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	fc 01       	movw	r30, r24
     a1c:	eb 59       	subi	r30, 0x9B	; 155
     a1e:	fb 4f       	sbci	r31, 0xFB	; 251
     a20:	b5 cf       	rjmp	.-150    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a22:	8f 30       	cpi	r24, 0x0F	; 15
     a24:	91 05       	cpc	r25, r1
     a26:	08 f0       	brcs	.+2      	; 0xa2a <myRemapFn(unsigned int, unsigned int)+0x118>
     a28:	67 c0       	rjmp	.+206    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	fc 01       	movw	r30, r24
     a30:	e9 5b       	subi	r30, 0xB9	; 185
     a32:	fb 4f       	sbci	r31, 0xFB	; 251
     a34:	ab cf       	rjmp	.-170    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a36:	8f 30       	cpi	r24, 0x0F	; 15
     a38:	91 05       	cpc	r25, r1
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <myRemapFn(unsigned int, unsigned int)+0x12c>
     a3c:	5d c0       	rjmp	.+186    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	fc 01       	movw	r30, r24
     a44:	e7 5d       	subi	r30, 0xD7	; 215
     a46:	fb 4f       	sbci	r31, 0xFB	; 251
     a48:	a1 cf       	rjmp	.-190    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a4a:	8f 30       	cpi	r24, 0x0F	; 15
     a4c:	91 05       	cpc	r25, r1
     a4e:	08 f0       	brcs	.+2      	; 0xa52 <myRemapFn(unsigned int, unsigned int)+0x140>
     a50:	53 c0       	rjmp	.+166    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	e5 5f       	subi	r30, 0xF5	; 245
     a5a:	fb 4f       	sbci	r31, 0xFB	; 251
     a5c:	97 cf       	rjmp	.-210    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	8e 30       	cpi	r24, 0x0E	; 14
     a62:	91 05       	cpc	r25, r1
     a64:	08 f0       	brcs	.+2      	; 0xa68 <myRemapFn(unsigned int, unsigned int)+0x156>
     a66:	48 c0       	rjmp	.+144    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a68:	83 50       	subi	r24, 0x03	; 3
     a6a:	9c 4f       	sbci	r25, 0xFC	; 252
     a6c:	79 cf       	rjmp	.-270    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a6e:	02 97       	sbiw	r24, 0x02	; 2
     a70:	81 31       	cpi	r24, 0x11	; 17
     a72:	91 05       	cpc	r25, r1
     a74:	08 f0       	brcs	.+2      	; 0xa78 <myRemapFn(unsigned int, unsigned int)+0x166>
     a76:	40 c0       	rjmp	.+128    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a78:	84 51       	subi	r24, 0x14	; 20
     a7a:	9c 4f       	sbci	r25, 0xFC	; 252
     a7c:	71 cf       	rjmp	.-286    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	82 31       	cpi	r24, 0x12	; 18
     a82:	91 05       	cpc	r25, r1
     a84:	c8 f5       	brcc	.+114    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a86:	86 52       	subi	r24, 0x26	; 38
     a88:	9c 4f       	sbci	r25, 0xFC	; 252
     a8a:	6a cf       	rjmp	.-300    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	83 31       	cpi	r24, 0x13	; 19
     a90:	91 05       	cpc	r25, r1
     a92:	90 f5       	brcc	.+100    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a94:	89 53       	subi	r24, 0x39	; 57
     a96:	9c 4f       	sbci	r25, 0xFC	; 252
     a98:	63 cf       	rjmp	.-314    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	84 31       	cpi	r24, 0x14	; 20
     a9e:	91 05       	cpc	r25, r1
     aa0:	58 f5       	brcc	.+86     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aa2:	8d 54       	subi	r24, 0x4D	; 77
     aa4:	9c 4f       	sbci	r25, 0xFC	; 252
     aa6:	5c cf       	rjmp	.-328    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	83 31       	cpi	r24, 0x13	; 19
     aac:	91 05       	cpc	r25, r1
     aae:	20 f5       	brcc	.+72     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fc 01       	movw	r30, r24
     ab6:	e3 57       	subi	r30, 0x73	; 115
     ab8:	fc 4f       	sbci	r31, 0xFC	; 252
     aba:	68 cf       	rjmp	.-304    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     abc:	02 97       	sbiw	r24, 0x02	; 2
     abe:	87 30       	cpi	r24, 0x07	; 7
     ac0:	91 05       	cpc	r25, r1
     ac2:	d0 f4       	brcc	.+52     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	fc 01       	movw	r30, r24
     aca:	e1 58       	subi	r30, 0x81	; 129
     acc:	fc 4f       	sbci	r31, 0xFC	; 252
     ace:	5e cf       	rjmp	.-324    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ad0:	03 97       	sbiw	r24, 0x03	; 3
     ad2:	85 30       	cpi	r24, 0x05	; 5
     ad4:	91 05       	cpc	r25, r1
     ad6:	80 f4       	brcc	.+32     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	fc 01       	movw	r30, r24
     ade:	eb 58       	subi	r30, 0x8B	; 139
     ae0:	fc 4f       	sbci	r31, 0xFC	; 252
     ae2:	54 cf       	rjmp	.-344    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ae4:	04 97       	sbiw	r24, 0x04	; 4
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	91 05       	cpc	r25, r1
     aea:	30 f4       	brcc	.+12     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	fc 01       	movw	r30, r24
     af2:	e1 59       	subi	r30, 0x91	; 145
     af4:	fc 4f       	sbci	r31, 0xFC	; 252
     af6:	4a cf       	rjmp	.-364    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     af8:	8c e2       	ldi	r24, 0x2C	; 44
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	08 95       	ret

00000afe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     afe:	80 e9       	ldi	r24, 0x90	; 144
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	08 95       	ret

00000b04 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     b04:	3a 9a       	sbi	0x07, 2	; 7
     b06:	08 95       	ret

00000b08 <Print::write(char const*)>:
     b08:	fb 01       	movw	r30, r22
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <Print::write(char const*)+0x2>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	af 01       	movw	r20, r30
     b14:	46 1b       	sub	r20, r22
     b16:	57 0b       	sbc	r21, r23
     b18:	dc 01       	movw	r26, r24
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	02 80       	ldd	r0, Z+2	; 0x02
     b20:	f3 81       	ldd	r31, Z+3	; 0x03
     b22:	e0 2d       	mov	r30, r0
     b24:	09 94       	ijmp

00000b26 <Print::print(char const*)>:
     b26:	f0 cf       	rjmp	.-32     	; 0xb08 <Print::write(char const*)>

00000b28 <Print::println(char const*)>:
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	ec 01       	movw	r28, r24
     b32:	ea df       	rcall	.-44     	; 0xb08 <Print::write(char const*)>
     b34:	8c 01       	movw	r16, r24
     b36:	ce 01       	movw	r24, r28
     b38:	0e 94 16 49 	call	0x922c	; 0x922c <Print::println()>
     b3c:	80 0f       	add	r24, r16
     b3e:	91 1f       	adc	r25, r17
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <Print::println(unsigned char)>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
     b54:	46 2f       	mov	r20, r22
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	0e 94 30 49 	call	0x9260	; 0x9260 <Print::printNumberDec(unsigned long, unsigned char)>
     b62:	8c 01       	movw	r16, r24
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 16 49 	call	0x922c	; 0x922c <Print::println()>
     b6a:	80 0f       	add	r24, r16
     b6c:	91 1f       	adc	r25, r17
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	dc 01       	movw	r26, r24
     b7e:	ac 01       	movw	r20, r24
     b80:	40 5d       	subi	r20, 0xD0	; 208
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	fb 01       	movw	r30, r22
     b86:	05 91       	lpm	r16, Z+
     b88:	15 91       	lpm	r17, Z+
     b8a:	25 91       	lpm	r18, Z+
     b8c:	34 91       	lpm	r19, Z
     b8e:	2c 93       	st	X, r18
     b90:	11 96       	adiw	r26, 0x01	; 1
     b92:	1c 93       	st	X, r17
     b94:	11 97       	sbiw	r26, 0x01	; 1
     b96:	12 96       	adiw	r26, 0x02	; 2
     b98:	0c 93       	st	X, r16
     b9a:	12 97       	sbiw	r26, 0x02	; 2
     b9c:	6c 5f       	subi	r22, 0xFC	; 252
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	13 96       	adiw	r26, 0x03	; 3
     ba2:	a4 17       	cp	r26, r20
     ba4:	b5 07       	cpc	r27, r21
     ba6:	71 f7       	brne	.-36     	; 0xb84 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	08 95       	ret

00000bae <CFastLED::show()>:
     bae:	fc 01       	movw	r30, r24
     bb0:	60 81       	ld	r22, Z
     bb2:	0c 94 61 3e 	jmp	0x7cc2	; 0x7cc2 <CFastLED::show(unsigned char)>

00000bb6 <CFastLED::showColor(CRGB const&)>:
     bb6:	fc 01       	movw	r30, r24
     bb8:	40 81       	ld	r20, Z
     bba:	0c 94 f1 3e 	jmp	0x7de2	; 0x7de2 <CFastLED::showColor(CRGB const&, unsigned char)>

00000bbe <Framebuffer_GFX::clear()>:
     bbe:	dc 01       	movw	r26, r24
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	02 a0       	ldd	r0, Z+34	; 0x22
     bc6:	f3 a1       	ldd	r31, Z+35	; 0x23
     bc8:	e0 2d       	mov	r30, r0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	09 94       	ijmp

00000bd0 <getRandomColorValue()>:
     bd0:	24 e0       	ldi	r18, 0x04	; 4
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
     be4:	62 30       	cpi	r22, 0x02	; 2
     be6:	71 05       	cpc	r23, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <getRandomColorValue()+0x26>
     bea:	63 30       	cpi	r22, 0x03	; 3
     bec:	71 05       	cpc	r23, r1
     bee:	31 f0       	breq	.+12     	; 0xbfc <getRandomColorValue()+0x2c>
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	08 95       	ret
     bf6:	8f e7       	ldi	r24, 0x7F	; 127
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	08 95       	ret
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	08 95       	ret

00000c02 <getRandomColor()>:
     c02:	27 e0       	ldi	r18, 0x07	; 7
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
     c16:	61 50       	subi	r22, 0x01	; 1
     c18:	71 09       	sbc	r23, r1
     c1a:	67 30       	cpi	r22, 0x07	; 7
     c1c:	71 05       	cpc	r23, r1
     c1e:	40 f4       	brcc	.+16     	; 0xc30 <getRandomColor()+0x2e>
     c20:	66 0f       	add	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	fb 01       	movw	r30, r22
     c26:	ef 59       	subi	r30, 0x9F	; 159
     c28:	fc 4f       	sbci	r31, 0xFC	; 252
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	08 95       	ret
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	08 95       	ret

00000c36 <getRandomColorIncludingBlack()>:
     c36:	29 e0       	ldi	r18, 0x09	; 9
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
     c4a:	61 50       	subi	r22, 0x01	; 1
     c4c:	71 09       	sbc	r23, r1
     c4e:	67 30       	cpi	r22, 0x07	; 7
     c50:	71 05       	cpc	r23, r1
     c52:	40 f4       	brcc	.+16     	; 0xc64 <getRandomColorIncludingBlack()+0x2e>
     c54:	66 0f       	add	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	fb 01       	movw	r30, r22
     c5a:	ed 5a       	subi	r30, 0xAD	; 173
     c5c:	fc 4f       	sbci	r31, 0xFC	; 252
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	08 95       	ret
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	08 95       	ret

00000c6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>:
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	7c 01       	movw	r14, r24
     c78:	16 2f       	mov	r17, r22
     c7a:	ea 01       	movw	r28, r20
     c7c:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     c80:	81 11       	cpse	r24, r1
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x3e>
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	8c ec       	ldi	r24, 0xCC	; 204
     c88:	90 e1       	ldi	r25, 0x10	; 16
     c8a:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
     c8e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
     c92:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
     c96:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     ca0:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     ca4:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <progBlingBlingColoring_rounds>
     ca8:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
     cac:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     cb0:	89 2b       	or	r24, r25
     cb2:	49 f4       	brne	.+18     	; 0xcc6 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x5c>
     cb4:	8d df       	rcall	.-230    	; 0xbd0 <getRandomColorValue()>
     cb6:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     cba:	8a df       	rcall	.-236    	; 0xbd0 <getRandomColorValue()>
     cbc:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     cc0:	87 df       	rcall	.-242    	; 0xbd0 <getRandomColorValue()>
     cc2:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     cc6:	10 91 73 0a 	lds	r17, 0x0A73	; 0x800a73 <b>
     cca:	00 91 74 0a 	lds	r16, 0x0A74	; 0x800a74 <g>
     cce:	f0 90 75 0a 	lds	r15, 0x0A75	; 0x800a75 <r>
     cd2:	26 e1       	ldi	r18, 0x16	; 22
     cd4:	31 e0       	ldi	r19, 0x01	; 1
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	cb 01       	movw	r24, r22
     ce0:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
     ce4:	fb 01       	movw	r30, r22
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	e6 0f       	add	r30, r22
     cec:	f7 1f       	adc	r31, r23
     cee:	e3 53       	subi	r30, 0x33	; 51
     cf0:	f5 4f       	sbci	r31, 0xF5	; 245
     cf2:	f0 82       	st	Z, r15
     cf4:	01 83       	std	Z+1, r16	; 0x01
     cf6:	12 83       	std	Z+2, r17	; 0x02
     cf8:	23 e0       	ldi	r18, 0x03	; 3
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	cb 01       	movw	r24, r22
     d06:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
     d0a:	61 30       	cpi	r22, 0x01	; 1
     d0c:	71 05       	cpc	r23, r1
     d0e:	81 05       	cpc	r24, r1
     d10:	91 05       	cpc	r25, r1
     d12:	99 f4       	brne	.+38     	; 0xd3a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0xd0>
     d14:	26 e1       	ldi	r18, 0x16	; 22
     d16:	31 e0       	ldi	r19, 0x01	; 1
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	cb 01       	movw	r24, r22
     d22:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
     d26:	fb 01       	movw	r30, r22
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e6 0f       	add	r30, r22
     d2e:	f7 1f       	adc	r31, r23
     d30:	e3 53       	subi	r30, 0x33	; 51
     d32:	f5 4f       	sbci	r31, 0xF5	; 245
     d34:	10 82       	st	Z, r1
     d36:	11 82       	std	Z+1, r1	; 0x01
     d38:	12 82       	std	Z+2, r1	; 0x02
     d3a:	8c ec       	ldi	r24, 0xCC	; 204
     d3c:	90 e1       	ldi	r25, 0x10	; 16
     d3e:	37 df       	rcall	.-402    	; 0xbae <CFastLED::show()>
     d40:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     d44:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     d48:	8c 17       	cp	r24, r28
     d4a:	9d 07       	cpc	r25, r29
     d4c:	d0 f0       	brcs	.+52     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
     d4e:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     d52:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     d56:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
     d5a:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	91 05       	cpc	r25, r1
     d64:	a9 f0       	breq	.+42     	; 0xd90 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x126>
     d66:	90 93 72 0a 	sts	0x0A72, r25	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     d6a:	80 93 71 0a 	sts	0x0A71, r24	; 0x800a71 <progBlingBlingColoring_rounds>
     d6e:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
     d72:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	69 f4       	brne	.+26     	; 0xd96 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x12c>
     d7c:	29 df       	rcall	.-430    	; 0xbd0 <getRandomColorValue()>
     d7e:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	08 95       	ret
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	e8 cf       	rjmp	.-48     	; 0xd66 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0xfc>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	91 05       	cpc	r25, r1
     d9a:	21 f4       	brne	.+8      	; 0xda4 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x13a>
     d9c:	19 df       	rcall	.-462    	; 0xbd0 <getRandomColorValue()>
     d9e:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     da2:	ef cf       	rjmp	.-34     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
     da4:	03 97       	sbiw	r24, 0x03	; 3
     da6:	69 f7       	brne	.-38     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
     da8:	13 df       	rcall	.-474    	; 0xbd0 <getRandomColorValue()>
     daa:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     dae:	e9 cf       	rjmp	.-46     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>

00000db0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>:
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	6c 01       	movw	r12, r24
     dc2:	d6 2f       	mov	r29, r22
     dc4:	14 2f       	mov	r17, r20
     dc6:	c2 2f       	mov	r28, r18
     dc8:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     dcc:	81 11       	cpse	r24, r1
     dce:	10 c0       	rjmp	.+32     	; 0xdf0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x40>
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	8c ec       	ldi	r24, 0xCC	; 204
     dd4:	90 e1       	ldi	r25, 0x10	; 16
     dd6:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
     dda:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     dde:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     de2:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     dec:	d0 93 a8 0a 	sts	0x0AA8, r29	; 0x800aa8 <actualAnzahlLEDs>
     df0:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     df4:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     df8:	8e 15       	cp	r24, r14
     dfa:	9f 05       	cpc	r25, r15
     dfc:	90 f0       	brcs	.+36     	; 0xe22 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
     dfe:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     e02:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     e06:	cc 23       	and	r28, r28
     e08:	61 f0       	breq	.+24     	; 0xe22 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
     e0a:	20 91 a8 0a 	lds	r18, 0x0AA8	; 0x800aa8 <actualAnzahlLEDs>
     e0e:	42 2f       	mov	r20, r18
     e10:	4c 0f       	add	r20, r28
     e12:	55 27       	eor	r21, r21
     e14:	55 1f       	adc	r21, r21
     e16:	04 17       	cp	r16, r20
     e18:	15 06       	cpc	r1, r21
     e1a:	1c f0       	brlt	.+6      	; 0xe22 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
     e1c:	2c 0f       	add	r18, r28
     e1e:	20 93 a8 0a 	sts	0x0AA8, r18	; 0x800aa8 <actualAnzahlLEDs>
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	8c ec       	ldi	r24, 0xCC	; 204
     e26:	90 e1       	ldi	r25, 0x10	; 16
     e28:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
     e32:	d0 e0       	ldi	r29, 0x00	; 0
     e34:	c0 e0       	ldi	r28, 0x00	; 0
     e36:	80 91 a8 0a 	lds	r24, 0x0AA8	; 0x800aa8 <actualAnzahlLEDs>
     e3a:	8c 17       	cp	r24, r28
     e3c:	1d 06       	cpc	r1, r29
     e3e:	e1 f0       	breq	.+56     	; 0xe78 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0xc8>
     e40:	dc f0       	brlt	.+54     	; 0xe78 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0xc8>
     e42:	c6 de       	rcall	.-628    	; 0xbd0 <getRandomColorValue()>
     e44:	18 2f       	mov	r17, r24
     e46:	c4 de       	rcall	.-632    	; 0xbd0 <getRandomColorValue()>
     e48:	08 2f       	mov	r16, r24
     e4a:	c2 de       	rcall	.-636    	; 0xbd0 <getRandomColorValue()>
     e4c:	f8 2e       	mov	r15, r24
     e4e:	26 e1       	ldi	r18, 0x16	; 22
     e50:	31 e0       	ldi	r19, 0x01	; 1
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	cb 01       	movw	r24, r22
     e5c:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
     e60:	fb 01       	movw	r30, r22
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	e6 0f       	add	r30, r22
     e68:	f7 1f       	adc	r31, r23
     e6a:	e3 53       	subi	r30, 0x33	; 51
     e6c:	f5 4f       	sbci	r31, 0xF5	; 245
     e6e:	f0 82       	st	Z, r15
     e70:	01 83       	std	Z+1, r16	; 0x01
     e72:	12 83       	std	Z+2, r17	; 0x02
     e74:	21 96       	adiw	r28, 0x01	; 1
     e76:	df cf       	rjmp	.-66     	; 0xe36 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x86>
     e78:	8c ec       	ldi	r24, 0xCC	; 204
     e7a:	90 e1       	ldi	r25, 0x10	; 16
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	90 ce       	rjmp	.-736    	; 0xbae <CFastLED::show()>

00000e8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>:
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	f1 2c       	mov	r15, r1
     e96:	e1 2c       	mov	r14, r1
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	89 df       	rcall	.-238    	; 0xdb0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	08 95       	ret

00000ea6 <progFullColors(unsigned int, unsigned char, unsigned int)>:
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     eb6:	1f 92       	push	r1
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	6c 01       	movw	r12, r24
     ebe:	f6 2e       	mov	r15, r22
     ec0:	8a 01       	movw	r16, r20
     ec2:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     ec6:	81 11       	cpse	r24, r1
     ec8:	12 c0       	rjmp	.+36     	; 0xeee <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	8c ec       	ldi	r24, 0xCC	; 204
     ece:	90 e1       	ldi	r25, 0x10	; 16
     ed0:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
     ed4:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     ed8:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     edc:	f0 92 b8 0a 	sts	0x0AB8, r15	; 0x800ab8 <nextSongPart>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     ee6:	10 93 c0 0a 	sts	0x0AC0, r17	; 0x800ac0 <millisCounterTimer+0x1>
     eea:	00 93 bf 0a 	sts	0x0ABF, r16	; 0x800abf <millisCounterTimer>
     eee:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     ef2:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     ef6:	80 17       	cp	r24, r16
     ef8:	91 07       	cpc	r25, r17
     efa:	78 f1       	brcs	.+94     	; 0xf5a <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     efc:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     f00:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     f04:	65 de       	rcall	.-822    	; 0xbd0 <getRandomColorValue()>
     f06:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     f0a:	62 de       	rcall	.-828    	; 0xbd0 <getRandomColorValue()>
     f0c:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     f10:	5f de       	rcall	.-834    	; 0xbd0 <getRandomColorValue()>
     f12:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     f16:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <r>
     f1a:	91 11       	cpse	r25, r1
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     f1e:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <g>
     f22:	91 11       	cpse	r25, r1
     f24:	0b c0       	rjmp	.+22     	; 0xf3c <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     f26:	81 11       	cpse	r24, r1
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     f2a:	52 de       	rcall	.-860    	; 0xbd0 <getRandomColorValue()>
     f2c:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     f30:	4f de       	rcall	.-866    	; 0xbd0 <getRandomColorValue()>
     f32:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     f36:	4c de       	rcall	.-872    	; 0xbd0 <getRandomColorValue()>
     f38:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     f3c:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <b>
     f40:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <g>
     f44:	20 91 75 0a 	lds	r18, 0x0A75	; 0x800a75 <r>
     f48:	29 83       	std	Y+1, r18	; 0x01
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8c ec       	ldi	r24, 0xCC	; 204
     f56:	90 e1       	ldi	r25, 0x10	; 16
     f58:	2e de       	rcall	.-932    	; 0xbb6 <CFastLED::showColor(CRGB const&)>
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	08 95       	ret

00000f70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	00 d0       	rcall	.+0      	; 0xf86 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     f86:	1f 92       	push	r1
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	5c 01       	movw	r10, r24
     f8e:	f6 2e       	mov	r15, r22
     f90:	6a 01       	movw	r12, r20
     f92:	12 2f       	mov	r17, r18
     f94:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     f98:	81 11       	cpse	r24, r1
     f9a:	12 c0       	rjmp	.+36     	; 0xfc0 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	8c ec       	ldi	r24, 0xCC	; 204
     fa0:	90 e1       	ldi	r25, 0x10	; 16
     fa2:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
     fa6:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     faa:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     fae:	f0 92 b8 0a 	sts	0x0AB8, r15	; 0x800ab8 <nextSongPart>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     fb8:	d0 92 c0 0a 	sts	0x0AC0, r13	; 0x800ac0 <millisCounterTimer+0x1>
     fbc:	c0 92 bf 0a 	sts	0x0ABF, r12	; 0x800abf <millisCounterTimer>
     fc0:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     fc4:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     fc8:	8c 15       	cp	r24, r12
     fca:	9d 05       	cpc	r25, r13
     fcc:	98 f0       	brcs	.+38     	; 0xff4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     fce:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     fd2:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     fd6:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <progStroboIsBlack>
     fda:	88 23       	and	r24, r24
     fdc:	c9 f0       	breq	.+50     	; 0x1010 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     fde:	19 83       	std	Y+1, r17	; 0x01
     fe0:	0a 83       	std	Y+2, r16	; 0x02
     fe2:	eb 82       	std	Y+3, r14	; 0x03
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8c ec       	ldi	r24, 0xCC	; 204
     fec:	90 e1       	ldi	r25, 0x10	; 16
     fee:	e3 dd       	rcall	.-1082   	; 0xbb6 <CFastLED::showColor(CRGB const&)>
     ff0:	10 92 c2 0a 	sts	0x0AC2, r1	; 0x800ac2 <progStroboIsBlack>
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	08 95       	ret
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	1a 82       	std	Y+2, r1	; 0x02
    1014:	1b 82       	std	Y+3, r1	; 0x03
    1016:	be 01       	movw	r22, r28
    1018:	6f 5f       	subi	r22, 0xFF	; 255
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8c ec       	ldi	r24, 0xCC	; 204
    101e:	90 e1       	ldi	r25, 0x10	; 16
    1020:	ca dd       	rcall	.-1132   	; 0xbb6 <CFastLED::showColor(CRGB const&)>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <progStroboIsBlack>
    1028:	e5 cf       	rjmp	.-54     	; 0xff4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

0000102a <progMatrixScanner(unsigned int, unsigned char, unsigned int)>:
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	7c 01       	movw	r14, r24
    1038:	16 2f       	mov	r17, r22
    103a:	ea 01       	movw	r28, r20
    103c:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1040:	81 11       	cpse	r24, r1
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x36>
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	8c ec       	ldi	r24, 0xCC	; 204
    1048:	90 e1       	ldi	r25, 0x10	; 16
    104a:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    104e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1052:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1056:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1060:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1064:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1068:	8c 17       	cp	r24, r28
    106a:	9d 07       	cpc	r25, r29
    106c:	08 f4       	brcc	.+2      	; 0x1070 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x46>
    106e:	ad c0       	rjmp	.+346    	; 0x11ca <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x1a0>
    1070:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1074:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	8c ec       	ldi	r24, 0xCC	; 204
    107c:	90 e1       	ldi	r25, 0x10	; 16
    107e:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1082:	20 91 ab 0a 	lds	r18, 0x0AAB	; 0x800aab <scannerGoesBack>
    1086:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    108a:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    108e:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1092:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1096:	21 11       	cpse	r18, r1
    1098:	52 c0       	rjmp	.+164    	; 0x113e <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x114>
    109a:	6f 5f       	subi	r22, 0xFF	; 255
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	70 93 b1 0a 	sts	0x0AB1, r23	; 0x800ab1 <zaehler+0x1>
    10a2:	60 93 b0 0a 	sts	0x0AB0, r22	; 0x800ab0 <zaehler>
    10a6:	6c 31       	cpi	r22, 0x1C	; 28
    10a8:	71 05       	cpc	r23, r1
    10aa:	1c f0       	brlt	.+6      	; 0x10b2 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x88>
    10ac:	21 e0       	ldi	r18, 0x01	; 1
    10ae:	20 93 ab 0a 	sts	0x0AAB, r18	; 0x800aab <scannerGoesBack>
    10b2:	dc 01       	movw	r26, r24
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	04 a0       	ldd	r0, Z+36	; 0x24
    10ba:	f5 a1       	ldd	r31, Z+37	; 0x25
    10bc:	e0 2d       	mov	r30, r0
    10be:	e1 2c       	mov	r14, r1
    10c0:	58 ef       	ldi	r21, 0xF8	; 248
    10c2:	f5 2e       	mov	r15, r21
    10c4:	07 e1       	ldi	r16, 0x17	; 23
    10c6:	10 e0       	ldi	r17, 0x00	; 0
    10c8:	9b 01       	movw	r18, r22
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	09 95       	icall
    10d0:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    10d4:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    10d8:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    10dc:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    10e0:	61 50       	subi	r22, 0x01	; 1
    10e2:	71 09       	sbc	r23, r1
    10e4:	dc 01       	movw	r26, r24
    10e6:	ed 91       	ld	r30, X+
    10e8:	fc 91       	ld	r31, X
    10ea:	04 a0       	ldd	r0, Z+36	; 0x24
    10ec:	f5 a1       	ldd	r31, Z+37	; 0x25
    10ee:	e0 2d       	mov	r30, r0
    10f0:	ee 24       	eor	r14, r14
    10f2:	ea 94       	dec	r14
    10f4:	fe 2c       	mov	r15, r14
    10f6:	9b 01       	movw	r18, r22
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	09 95       	icall
    10fe:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1102:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1106:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    110a:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    110e:	62 50       	subi	r22, 0x02	; 2
    1110:	71 09       	sbc	r23, r1
    1112:	dc 01       	movw	r26, r24
    1114:	ed 91       	ld	r30, X+
    1116:	fc 91       	ld	r31, X
    1118:	04 a0       	ldd	r0, Z+36	; 0x24
    111a:	f5 a1       	ldd	r31, Z+37	; 0x25
    111c:	e0 2d       	mov	r30, r0
    111e:	e1 2c       	mov	r14, r1
    1120:	b8 ef       	ldi	r27, 0xF8	; 248
    1122:	fb 2e       	mov	r15, r27
    1124:	9b 01       	movw	r18, r22
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	09 95       	icall
    112c:	8c ec       	ldi	r24, 0xCC	; 204
    112e:	90 e1       	ldi	r25, 0x10	; 16
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	38 cd       	rjmp	.-1424   	; 0xbae <CFastLED::show()>
    113e:	61 50       	subi	r22, 0x01	; 1
    1140:	71 09       	sbc	r23, r1
    1142:	70 93 b1 0a 	sts	0x0AB1, r23	; 0x800ab1 <zaehler+0x1>
    1146:	60 93 b0 0a 	sts	0x0AB0, r22	; 0x800ab0 <zaehler>
    114a:	6b 3f       	cpi	r22, 0xFB	; 251
    114c:	bf ef       	ldi	r27, 0xFF	; 255
    114e:	7b 07       	cpc	r23, r27
    1150:	14 f4       	brge	.+4      	; 0x1156 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x12c>
    1152:	10 92 ab 0a 	sts	0x0AAB, r1	; 0x800aab <scannerGoesBack>
    1156:	dc 01       	movw	r26, r24
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	04 a0       	ldd	r0, Z+36	; 0x24
    115e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1160:	e0 2d       	mov	r30, r0
    1162:	ee 24       	eor	r14, r14
    1164:	ea 94       	dec	r14
    1166:	fe 2c       	mov	r15, r14
    1168:	07 e1       	ldi	r16, 0x17	; 23
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	9b 01       	movw	r18, r22
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	09 95       	icall
    1174:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1178:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    117c:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    1180:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1184:	61 50       	subi	r22, 0x01	; 1
    1186:	71 09       	sbc	r23, r1
    1188:	dc 01       	movw	r26, r24
    118a:	ed 91       	ld	r30, X+
    118c:	fc 91       	ld	r31, X
    118e:	04 a0       	ldd	r0, Z+36	; 0x24
    1190:	f5 a1       	ldd	r31, Z+37	; 0x25
    1192:	e0 2d       	mov	r30, r0
    1194:	e1 2c       	mov	r14, r1
    1196:	38 ef       	ldi	r19, 0xF8	; 248
    1198:	f3 2e       	mov	r15, r19
    119a:	9b 01       	movw	r18, r22
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	09 95       	icall
    11a2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    11a6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    11aa:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    11ae:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    11b2:	62 50       	subi	r22, 0x02	; 2
    11b4:	71 09       	sbc	r23, r1
    11b6:	dc 01       	movw	r26, r24
    11b8:	ed 91       	ld	r30, X+
    11ba:	fc 91       	ld	r31, X
    11bc:	04 a0       	ldd	r0, Z+36	; 0x24
    11be:	f5 a1       	ldd	r31, Z+37	; 0x25
    11c0:	e0 2d       	mov	r30, r0
    11c2:	ee 24       	eor	r14, r14
    11c4:	ea 94       	dec	r14
    11c6:	fe 2c       	mov	r15, r14
    11c8:	ad cf       	rjmp	.-166    	; 0x1124 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0xfa>
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <progMatrixScanner(unsigned int, unsigned char)>:
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	26 cf       	rjmp	.-436    	; 0x102a <progMatrixScanner(unsigned int, unsigned char, unsigned int)>

000011de <progStern(unsigned int, int, unsigned char)>:
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	7c 01       	movw	r14, r24
    11f8:	eb 01       	movw	r28, r22
    11fa:	14 2f       	mov	r17, r20
    11fc:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1200:	81 11       	cpse	r24, r1
    1202:	18 c0       	rjmp	.+48     	; 0x1234 <progStern(unsigned int, int, unsigned char)+0x56>
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	8c ec       	ldi	r24, 0xCC	; 204
    1208:	90 e1       	ldi	r25, 0x10	; 16
    120a:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    120e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1212:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1216:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1220:	f0 dc       	rcall	.-1568   	; 0xc02 <getRandomColor()>
    1222:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    1226:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    122a:	eb dc       	rcall	.-1578   	; 0xc02 <getRandomColor()>
    122c:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <col2+0x1>
    1230:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <col2>
    1234:	1c 16       	cp	r1, r28
    1236:	1d 06       	cpc	r1, r29
    1238:	ac f4       	brge	.+42     	; 0x1264 <progStern(unsigned int, int, unsigned char)+0x86>
    123a:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    123e:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1242:	8c 17       	cp	r24, r28
    1244:	9d 07       	cpc	r25, r29
    1246:	70 f0       	brcs	.+28     	; 0x1264 <progStern(unsigned int, int, unsigned char)+0x86>
    1248:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    124c:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1250:	d8 dc       	rcall	.-1616   	; 0xc02 <getRandomColor()>
    1252:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    1256:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    125a:	d3 dc       	rcall	.-1626   	; 0xc02 <getRandomColor()>
    125c:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <col2+0x1>
    1260:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <col2>
    1264:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1268:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	8a 30       	cpi	r24, 0x0A	; 10
    1270:	91 05       	cpc	r25, r1
    1272:	0c f0       	brlt	.+2      	; 0x1276 <progStern(unsigned int, int, unsigned char)+0x98>
    1274:	fc c0       	rjmp	.+504    	; 0x146e <progStern(unsigned int, int, unsigned char)+0x290>
    1276:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    127a:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	8c ec       	ldi	r24, 0xCC	; 204
    1282:	90 e1       	ldi	r25, 0x10	; 16
    1284:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1288:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    128c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1290:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1294:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1298:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    129c:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    12a0:	9a 01       	movw	r18, r20
    12a2:	26 5f       	subi	r18, 0xF6	; 246
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	6a e0       	ldi	r22, 0x0A	; 10
    12a8:	a6 2e       	mov	r10, r22
    12aa:	b1 2c       	mov	r11, r1
    12ac:	b5 01       	movw	r22, r10
    12ae:	64 1b       	sub	r22, r20
    12b0:	75 0b       	sbc	r23, r21
    12b2:	dc 01       	movw	r26, r24
    12b4:	ed 91       	ld	r30, X+
    12b6:	fc 91       	ld	r31, X
    12b8:	04 a0       	ldd	r0, Z+36	; 0x24
    12ba:	f5 a1       	ldd	r31, Z+37	; 0x25
    12bc:	e0 2d       	mov	r30, r0
    12be:	06 e1       	ldi	r16, 0x16	; 22
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	09 95       	icall
    12c8:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    12cc:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    12d0:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    12d4:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    12d8:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    12dc:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    12e0:	9a 01       	movw	r18, r20
    12e2:	25 5f       	subi	r18, 0xF5	; 245
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	7b e0       	ldi	r23, 0x0B	; 11
    12e8:	87 2e       	mov	r8, r23
    12ea:	91 2c       	mov	r9, r1
    12ec:	b4 01       	movw	r22, r8
    12ee:	64 1b       	sub	r22, r20
    12f0:	75 0b       	sbc	r23, r21
    12f2:	dc 01       	movw	r26, r24
    12f4:	ed 91       	ld	r30, X+
    12f6:	fc 91       	ld	r31, X
    12f8:	04 a0       	ldd	r0, Z+36	; 0x24
    12fa:	f5 a1       	ldd	r31, Z+37	; 0x25
    12fc:	e0 2d       	mov	r30, r0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	09 95       	icall
    1304:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1308:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    130c:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1310:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1314:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    1318:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    131c:	e6 e1       	ldi	r30, 0x16	; 22
    131e:	ce 2e       	mov	r12, r30
    1320:	d1 2c       	mov	r13, r1
    1322:	04 1b       	sub	r16, r20
    1324:	15 0b       	sbc	r17, r21
    1326:	4f 5f       	subi	r20, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	dc 01       	movw	r26, r24
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	04 a0       	ldd	r0, Z+36	; 0x24
    1332:	f5 a1       	ldd	r31, Z+37	; 0x25
    1334:	e0 2d       	mov	r30, r0
    1336:	25 e1       	ldi	r18, 0x15	; 21
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	09 95       	icall
    1340:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1344:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1348:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    134c:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1350:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    1354:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    1358:	c5 e1       	ldi	r28, 0x15	; 21
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	8e 01       	movw	r16, r28
    135e:	04 1b       	sub	r16, r20
    1360:	15 0b       	sbc	r17, r21
    1362:	dc 01       	movw	r26, r24
    1364:	ed 91       	ld	r30, X+
    1366:	fc 91       	ld	r31, X
    1368:	04 a0       	ldd	r0, Z+36	; 0x24
    136a:	f5 a1       	ldd	r31, Z+37	; 0x25
    136c:	e0 2d       	mov	r30, r0
    136e:	25 e1       	ldi	r18, 0x15	; 21
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	09 95       	icall
    1378:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    137c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1380:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1384:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1388:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    138c:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    1390:	84 01       	movw	r16, r8
    1392:	04 1b       	sub	r16, r20
    1394:	15 0b       	sbc	r17, r21
    1396:	45 5f       	subi	r20, 0xF5	; 245
    1398:	5f 4f       	sbci	r21, 0xFF	; 255
    139a:	dc 01       	movw	r26, r24
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	04 a0       	ldd	r0, Z+36	; 0x24
    13a2:	f5 a1       	ldd	r31, Z+37	; 0x25
    13a4:	e0 2d       	mov	r30, r0
    13a6:	25 e1       	ldi	r18, 0x15	; 21
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	09 95       	icall
    13b0:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    13b4:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    13b8:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    13bc:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    13c0:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    13c4:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    13c8:	85 01       	movw	r16, r10
    13ca:	04 1b       	sub	r16, r20
    13cc:	15 0b       	sbc	r17, r21
    13ce:	46 5f       	subi	r20, 0xF6	; 246
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	dc 01       	movw	r26, r24
    13d4:	ed 91       	ld	r30, X+
    13d6:	fc 91       	ld	r31, X
    13d8:	04 a0       	ldd	r0, Z+36	; 0x24
    13da:	f5 a1       	ldd	r31, Z+37	; 0x25
    13dc:	e0 2d       	mov	r30, r0
    13de:	25 e1       	ldi	r18, 0x15	; 21
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	09 95       	icall
    13e8:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    13ec:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    13f0:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    13f4:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    13f8:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    13fc:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    1400:	96 01       	movw	r18, r12
    1402:	26 1b       	sub	r18, r22
    1404:	37 0b       	sbc	r19, r23
    1406:	dc 01       	movw	r26, r24
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	04 a0       	ldd	r0, Z+36	; 0x24
    140e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1410:	e0 2d       	mov	r30, r0
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	00 e0       	ldi	r16, 0x00	; 0
    1416:	46 e1       	ldi	r20, 0x16	; 22
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	09 95       	icall
    141c:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1420:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1424:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    1428:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    142c:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    1430:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    1434:	9e 01       	movw	r18, r28
    1436:	26 1b       	sub	r18, r22
    1438:	37 0b       	sbc	r19, r23
    143a:	61 50       	subi	r22, 0x01	; 1
    143c:	71 09       	sbc	r23, r1
    143e:	dc 01       	movw	r26, r24
    1440:	ed 91       	ld	r30, X+
    1442:	fc 91       	ld	r31, X
    1444:	04 a0       	ldd	r0, Z+36	; 0x24
    1446:	f5 a1       	ldd	r31, Z+37	; 0x25
    1448:	e0 2d       	mov	r30, r0
    144a:	46 e1       	ldi	r20, 0x16	; 22
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	09 95       	icall
    1450:	8c ec       	ldi	r24, 0xCC	; 204
    1452:	90 e1       	ldi	r25, 0x10	; 16
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	af 90       	pop	r10
    1468:	9f 90       	pop	r9
    146a:	8f 90       	pop	r8
    146c:	a0 cb       	rjmp	.-2240   	; 0xbae <CFastLED::show()>
    146e:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    1472:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    1476:	03 cf       	rjmp	.-506    	; 0x127e <progStern(unsigned int, int, unsigned char)+0xa0>

00001478 <progStern(unsigned int, unsigned char)>:
    1478:	46 2f       	mov	r20, r22
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	af ce       	rjmp	.-674    	; 0x11de <progStern(unsigned int, int, unsigned char)>

00001480 <progBlack(unsigned int, unsigned char)>:
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	8c 01       	movw	r16, r24
    1488:	c6 2f       	mov	r28, r22
    148a:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    148e:	81 11       	cpse	r24, r1
    1490:	0e c0       	rjmp	.+28     	; 0x14ae <progBlack(unsigned int, unsigned char)+0x2e>
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	8c ec       	ldi	r24, 0xCC	; 204
    1496:	90 e1       	ldi	r25, 0x10	; 16
    1498:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    149c:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    14a0:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    14a4:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	8c ec       	ldi	r24, 0xCC	; 204
    14b2:	90 e1       	ldi	r25, 0x10	; 16
    14b4:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    14b8:	8c ec       	ldi	r24, 0xCC	; 204
    14ba:	90 e1       	ldi	r25, 0x10	; 16
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	75 cb       	rjmp	.-2326   	; 0xbae <CFastLED::show()>

000014c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>:
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	7c 01       	movw	r14, r24
    14de:	06 2f       	mov	r16, r22
    14e0:	ea 01       	movw	r28, r20
    14e2:	12 2f       	mov	r17, r18
    14e4:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    14e8:	81 11       	cpse	r24, r1
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x4c>
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	8c ec       	ldi	r24, 0xCC	; 204
    14f0:	90 e1       	ldi	r25, 0x10	; 16
    14f2:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    14f6:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    14fa:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    14fe:	00 93 b8 0a 	sts	0x0AB8, r16	; 0x800ab8 <nextSongPart>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1508:	d0 93 c0 0a 	sts	0x0AC0, r29	; 0x800ac0 <millisCounterTimer+0x1>
    150c:	c0 93 bf 0a 	sts	0x0ABF, r28	; 0x800abf <millisCounterTimer>
    1510:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1514:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1518:	8c 17       	cp	r24, r28
    151a:	9d 07       	cpc	r25, r29
    151c:	08 f4       	brcc	.+2      	; 0x1520 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x5c>
    151e:	4d c0       	rjmp	.+154    	; 0x15ba <progCircles(unsigned int, unsigned char, unsigned int, bool)+0xf6>
    1520:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1524:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1528:	11 23       	and	r17, r17
    152a:	09 f4       	brne	.+2      	; 0x152e <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x6a>
    152c:	44 c0       	rjmp	.+136    	; 0x15b6 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0xf2>
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8c ec       	ldi	r24, 0xCC	; 204
    1532:	90 e1       	ldi	r25, 0x10	; 16
    1534:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1538:	64 db       	rcall	.-2360   	; 0xc02 <getRandomColor()>
    153a:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    153e:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    1542:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    1546:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    154a:	00 91 ca 0a 	lds	r16, 0x0ACA	; 0x800aca <col1>
    154e:	10 91 cb 0a 	lds	r17, 0x0ACB	; 0x800acb <col1+0x1>
    1552:	2a e0       	ldi	r18, 0x0A	; 10
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	63 e0       	ldi	r22, 0x03	; 3
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
    1566:	4b 01       	movw	r8, r22
    1568:	26 e1       	ldi	r18, 0x16	; 22
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
    157a:	6b 01       	movw	r12, r22
    157c:	25 e1       	ldi	r18, 0x15	; 21
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	cb 01       	movw	r24, r22
    158a:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
    158e:	94 01       	movw	r18, r8
    1590:	a6 01       	movw	r20, r12
    1592:	ce 01       	movw	r24, r28
    1594:	0e 94 a7 36 	call	0x6d4e	; 0x6d4e <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    1598:	8c ec       	ldi	r24, 0xCC	; 204
    159a:	90 e1       	ldi	r25, 0x10	; 16
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	9f 90       	pop	r9
    15b2:	8f 90       	pop	r8
    15b4:	fc ca       	rjmp	.-2568   	; 0xbae <CFastLED::show()>
    15b6:	3f db       	rcall	.-2434   	; 0xc36 <getRandomColorIncludingBlack()>
    15b8:	c0 cf       	rjmp	.-128    	; 0x153a <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x76>
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	bf 90       	pop	r11
    15cc:	af 90       	pop	r10
    15ce:	9f 90       	pop	r9
    15d0:	8f 90       	pop	r8
    15d2:	08 95       	ret

000015d4 <progCircles(unsigned int, unsigned char, unsigned int)>:
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	76 cf       	rjmp	.-276    	; 0x14c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>

000015d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>:
    15d8:	cf 92       	push	r12
    15da:	df 92       	push	r13
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	6c 01       	movw	r12, r24
    15ea:	e6 2e       	mov	r14, r22
    15ec:	ea 01       	movw	r28, r20
    15ee:	f2 2e       	mov	r15, r18
    15f0:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    15f4:	81 11       	cpse	r24, r1
    15f6:	12 c0       	rjmp	.+36     	; 0x161c <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x44>
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	8c ec       	ldi	r24, 0xCC	; 204
    15fc:	90 e1       	ldi	r25, 0x10	; 16
    15fe:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1602:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    1606:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    160a:	e0 92 b8 0a 	sts	0x0AB8, r14	; 0x800ab8 <nextSongPart>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1614:	d0 93 c0 0a 	sts	0x0AC0, r29	; 0x800ac0 <millisCounterTimer+0x1>
    1618:	c0 93 bf 0a 	sts	0x0ABF, r28	; 0x800abf <millisCounterTimer>
    161c:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1620:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1624:	8c 17       	cp	r24, r28
    1626:	9d 07       	cpc	r25, r29
    1628:	08 f4       	brcc	.+2      	; 0x162c <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x54>
    162a:	77 c0       	rjmp	.+238    	; 0x171a <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x142>
    162c:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1630:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1634:	25 e1       	ldi	r18, 0x15	; 21
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	cb 01       	movw	r24, r22
    1642:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
    1646:	c6 2f       	mov	r28, r22
    1648:	25 e1       	ldi	r18, 0x15	; 21
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	cb 01       	movw	r24, r22
    1656:	0e 94 63 4b 	call	0x96c6	; 0x96c6 <random(long, long)>
    165a:	c6 2e       	mov	r12, r22
    165c:	ff 20       	and	r15, r15
    165e:	09 f4       	brne	.+2      	; 0x1662 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x8a>
    1660:	5a c0       	rjmp	.+180    	; 0x1716 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x13e>
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	8c ec       	ldi	r24, 0xCC	; 204
    1666:	90 e1       	ldi	r25, 0x10	; 16
    1668:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    166c:	ca da       	rcall	.-2668   	; 0xc02 <getRandomColor()>
    166e:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    1672:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    1676:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    167a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    167e:	d1 2c       	mov	r13, r1
    1680:	d0 e0       	ldi	r29, 0x00	; 0
    1682:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    1686:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    168a:	96 01       	movw	r18, r12
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	31 09       	sbc	r19, r1
    1690:	be 01       	movw	r22, r28
    1692:	61 50       	subi	r22, 0x01	; 1
    1694:	71 09       	sbc	r23, r1
    1696:	dc 01       	movw	r26, r24
    1698:	ed 91       	ld	r30, X+
    169a:	fc 91       	ld	r31, X
    169c:	04 a0       	ldd	r0, Z+36	; 0x24
    169e:	f5 a1       	ldd	r31, Z+37	; 0x25
    16a0:	e0 2d       	mov	r30, r0
    16a2:	06 e1       	ldi	r16, 0x16	; 22
    16a4:	10 e0       	ldi	r17, 0x00	; 0
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	09 95       	icall
    16ac:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    16b0:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    16b4:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    16b8:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    16bc:	dc 01       	movw	r26, r24
    16be:	ed 91       	ld	r30, X+
    16c0:	fc 91       	ld	r31, X
    16c2:	04 a0       	ldd	r0, Z+36	; 0x24
    16c4:	f5 a1       	ldd	r31, Z+37	; 0x25
    16c6:	e0 2d       	mov	r30, r0
    16c8:	96 01       	movw	r18, r12
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	be 01       	movw	r22, r28
    16d0:	09 95       	icall
    16d2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    16d6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    16da:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    16de:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    16e2:	96 01       	movw	r18, r12
    16e4:	2f 5f       	subi	r18, 0xFF	; 255
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	dc 01       	movw	r26, r24
    16f0:	ed 91       	ld	r30, X+
    16f2:	fc 91       	ld	r31, X
    16f4:	04 a0       	ldd	r0, Z+36	; 0x24
    16f6:	f5 a1       	ldd	r31, Z+37	; 0x25
    16f8:	e0 2d       	mov	r30, r0
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	09 95       	icall
    1700:	8c ec       	ldi	r24, 0xCC	; 204
    1702:	90 e1       	ldi	r25, 0x10	; 16
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	4c ca       	rjmp	.-2920   	; 0xbae <CFastLED::show()>
    1716:	8f da       	rcall	.-2786   	; 0xc36 <getRandomColorIncludingBlack()>
    1718:	aa cf       	rjmp	.-172    	; 0x166e <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x96>
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	08 95       	ret

0000172c <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	54 cf       	rjmp	.-344    	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>

00001730 <progMovingLines(unsigned int, unsigned char)>:
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	8c 01       	movw	r16, r24
    1742:	c6 2f       	mov	r28, r22
    1744:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1748:	81 11       	cpse	r24, r1
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <progMovingLines(unsigned int, unsigned char)+0x38>
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	8c ec       	ldi	r24, 0xCC	; 204
    1750:	90 e1       	ldi	r25, 0x10	; 16
    1752:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1756:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    175a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    175e:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	8c ec       	ldi	r24, 0xCC	; 204
    176c:	90 e1       	ldi	r25, 0x10	; 16
    176e:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1772:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <stage>
    1776:	90 91 aa 0a 	lds	r25, 0x0AAA	; 0x800aaa <stage+0x1>
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 05       	cpc	r25, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <progMovingLines(unsigned int, unsigned char)+0x52>
    1780:	59 c0       	rjmp	.+178    	; 0x1834 <progMovingLines(unsigned int, unsigned char)+0x104>
    1782:	7c f4       	brge	.+30     	; 0x17a2 <progMovingLines(unsigned int, unsigned char)+0x72>
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	39 f1       	breq	.+78     	; 0x17d6 <progMovingLines(unsigned int, unsigned char)+0xa6>
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	e1 f1       	breq	.+120    	; 0x1804 <progMovingLines(unsigned int, unsigned char)+0xd4>
    178c:	8c ec       	ldi	r24, 0xCC	; 204
    178e:	90 e1       	ldi	r25, 0x10	; 16
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	df 90       	pop	r13
    179e:	cf 90       	pop	r12
    17a0:	06 ca       	rjmp	.-3060   	; 0xbae <CFastLED::show()>
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <progMovingLines(unsigned int, unsigned char)+0x7a>
    17a8:	9a c0       	rjmp	.+308    	; 0x18de <progMovingLines(unsigned int, unsigned char)+0x1ae>
    17aa:	0c f4       	brge	.+2      	; 0x17ae <progMovingLines(unsigned int, unsigned char)+0x7e>
    17ac:	72 c0       	rjmp	.+228    	; 0x1892 <progMovingLines(unsigned int, unsigned char)+0x162>
    17ae:	05 97       	sbiw	r24, 0x05	; 5
    17b0:	69 f7       	brne	.-38     	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    17b2:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    17b6:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    17c0:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    17c4:	18 16       	cp	r1, r24
    17c6:	19 06       	cpc	r1, r25
    17c8:	0c f4       	brge	.+2      	; 0x17cc <progMovingLines(unsigned int, unsigned char)+0x9c>
    17ca:	9d c0       	rjmp	.+314    	; 0x1906 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    17cc:	10 92 aa 0a 	sts	0x0AAA, r1	; 0x800aaa <stage+0x1>
    17d0:	10 92 a9 0a 	sts	0x0AA9, r1	; 0x800aa9 <stage>
    17d4:	12 c0       	rjmp	.+36     	; 0x17fa <progMovingLines(unsigned int, unsigned char)+0xca>
    17d6:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    17da:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    17e4:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    17e8:	4a 97       	sbiw	r24, 0x1a	; 26
    17ea:	0c f4       	brge	.+2      	; 0x17ee <progMovingLines(unsigned int, unsigned char)+0xbe>
    17ec:	61 c0       	rjmp	.+194    	; 0x18b0 <progMovingLines(unsigned int, unsigned char)+0x180>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    17f6:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    17fa:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    17fe:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    1802:	c4 cf       	rjmp	.-120    	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    1804:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1808:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    1812:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1816:	0c 97       	sbiw	r24, 0x0c	; 12
    1818:	14 f1       	brlt	.+68     	; 0x185e <progMovingLines(unsigned int, unsigned char)+0x12e>
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    1822:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    1826:	8c e0       	ldi	r24, 0x0C	; 12
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    182e:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1832:	ac cf       	rjmp	.-168    	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    1834:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1838:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    1842:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1846:	18 16       	cp	r1, r24
    1848:	19 06       	cpc	r1, r25
    184a:	4c f0       	brlt	.+18     	; 0x185e <progMovingLines(unsigned int, unsigned char)+0x12e>
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    1854:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    1858:	89 e1       	ldi	r24, 0x19	; 25
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	e6 cf       	rjmp	.-52     	; 0x182a <progMovingLines(unsigned int, unsigned char)+0xfa>
    185e:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    1862:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    1866:	e8 81       	ld	r30, Y
    1868:	f9 81       	ldd	r31, Y+1	; 0x01
    186a:	c4 a0       	ldd	r12, Z+36	; 0x24
    186c:	d5 a0       	ldd	r13, Z+37	; 0x25
    186e:	c9 d9       	rcall	.-3182   	; 0xc02 <getRandomColor()>
    1870:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1874:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1878:	06 e1       	ldi	r16, 0x16	; 22
    187a:	10 e0       	ldi	r17, 0x00	; 0
    187c:	04 1b       	sub	r16, r20
    187e:	15 0b       	sbc	r17, r21
    1880:	7c 01       	movw	r14, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	69 e1       	ldi	r22, 0x19	; 25
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	ce 01       	movw	r24, r28
    188c:	f6 01       	movw	r30, r12
    188e:	09 95       	icall
    1890:	7d cf       	rjmp	.-262    	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    1892:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1896:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    18a0:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    18a4:	18 16       	cp	r1, r24
    18a6:	19 06       	cpc	r1, r25
    18a8:	1c f0       	brlt	.+6      	; 0x18b0 <progMovingLines(unsigned int, unsigned char)+0x180>
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a1 cf       	rjmp	.-190    	; 0x17f2 <progMovingLines(unsigned int, unsigned char)+0xc2>
    18b0:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    18b4:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    18b8:	e8 81       	ld	r30, Y
    18ba:	f9 81       	ldd	r31, Y+1	; 0x01
    18bc:	c4 a0       	ldd	r12, Z+36	; 0x24
    18be:	d5 a0       	ldd	r13, Z+37	; 0x25
    18c0:	a0 d9       	rcall	.-3264   	; 0xc02 <getRandomColor()>
    18c2:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    18c6:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    18ca:	29 e1       	ldi	r18, 0x19	; 25
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	26 1b       	sub	r18, r22
    18d0:	37 0b       	sbc	r19, r23
    18d2:	7c 01       	movw	r14, r24
    18d4:	06 e1       	ldi	r16, 0x16	; 22
    18d6:	10 e0       	ldi	r17, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	d6 cf       	rjmp	.-84     	; 0x188a <progMovingLines(unsigned int, unsigned char)+0x15a>
    18de:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    18e2:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    18ec:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    18f0:	0b 97       	sbiw	r24, 0x0b	; 11
    18f2:	4c f0       	brlt	.+18     	; 0x1906 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    18f4:	85 e0       	ldi	r24, 0x05	; 5
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    18fc:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    1900:	8a e0       	ldi	r24, 0x0A	; 10
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	92 cf       	rjmp	.-220    	; 0x182a <progMovingLines(unsigned int, unsigned char)+0xfa>
    1906:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    190a:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    190e:	e8 81       	ld	r30, Y
    1910:	f9 81       	ldd	r31, Y+1	; 0x01
    1912:	c4 a0       	ldd	r12, Z+36	; 0x24
    1914:	d5 a0       	ldd	r13, Z+37	; 0x25
    1916:	75 d9       	rcall	.-3350   	; 0xc02 <getRandomColor()>
    1918:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    191c:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1920:	06 e1       	ldi	r16, 0x16	; 22
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	04 1b       	sub	r16, r20
    1926:	15 0b       	sbc	r17, r21
    1928:	7c 01       	movw	r14, r24
    192a:	29 e1       	ldi	r18, 0x19	; 25
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	ab cf       	rjmp	.-170    	; 0x188a <progMovingLines(unsigned int, unsigned char)+0x15a>

00001934 <progOutline(unsigned int, unsigned char)>:
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	8c 01       	movw	r16, r24
    1946:	c6 2f       	mov	r28, r22
    1948:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    194c:	81 11       	cpse	r24, r1
    194e:	0e c0       	rjmp	.+28     	; 0x196c <progOutline(unsigned int, unsigned char)+0x38>
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	8c ec       	ldi	r24, 0xCC	; 204
    1954:	90 e1       	ldi	r25, 0x10	; 16
    1956:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    195a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    195e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1962:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	8c ec       	ldi	r24, 0xCC	; 204
    1970:	90 e1       	ldi	r25, 0x10	; 16
    1972:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1976:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <scannerGoesBack>
    197a:	e0 91 b0 0a 	lds	r30, 0x0AB0	; 0x800ab0 <zaehler>
    197e:	f0 91 b1 0a 	lds	r31, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1982:	81 11       	cpse	r24, r1
    1984:	08 c1       	rjmp	.+528    	; 0x1b96 <progOutline(unsigned int, unsigned char)+0x262>
    1986:	e9 30       	cpi	r30, 0x09	; 9
    1988:	f1 05       	cpc	r31, r1
    198a:	28 f5       	brcc	.+74     	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    198c:	e6 53       	subi	r30, 0x36	; 54
    198e:	f3 4f       	sbci	r31, 0xF3	; 243
    1990:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    1994:	d3 0c       	add	r13, r3
    1996:	05 0d       	add	r16, r5
    1998:	1e 0d       	add	r17, r14
    199a:	37 0d       	add	r19, r7
    199c:	50 0d       	add	r21, r0
    199e:	69 0d       	add	r22, r9
    19a0:	81 0d       	add	r24, r1
    19a2:	9a 0d       	add	r25, r10
    19a4:	b3 0d       	add	r27, r3
    19a6:	c7 e6       	ldi	r28, 0x67	; 103
    19a8:	d8 e0       	ldi	r29, 0x08	; 8
    19aa:	03 e0       	ldi	r16, 0x03	; 3
    19ac:	19 e0       	ldi	r17, 0x09	; 9
    19ae:	e9 90       	ld	r14, Y+
    19b0:	f9 90       	ld	r15, Y+
    19b2:	0e d9       	rcall	.-3556   	; 0xbd0 <getRandomColorValue()>
    19b4:	d8 2e       	mov	r13, r24
    19b6:	0c d9       	rcall	.-3560   	; 0xbd0 <getRandomColorValue()>
    19b8:	c8 2e       	mov	r12, r24
    19ba:	0a d9       	rcall	.-3564   	; 0xbd0 <getRandomColorValue()>
    19bc:	f7 01       	movw	r30, r14
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	ee 0d       	add	r30, r14
    19c4:	ff 1d       	adc	r31, r15
    19c6:	e3 53       	subi	r30, 0x33	; 51
    19c8:	f5 4f       	sbci	r31, 0xF5	; 245
    19ca:	80 83       	st	Z, r24
    19cc:	c1 82       	std	Z+1, r12	; 0x01
    19ce:	d2 82       	std	Z+2, r13	; 0x02
    19d0:	0c 17       	cp	r16, r28
    19d2:	1d 07       	cpc	r17, r29
    19d4:	61 f7       	brne	.-40     	; 0x19ae <progOutline(unsigned int, unsigned char)+0x7a>
    19d6:	8c ec       	ldi	r24, 0xCC	; 204
    19d8:	90 e1       	ldi	r25, 0x10	; 16
    19da:	e9 d8       	rcall	.-3630   	; 0xbae <CFastLED::show()>
    19dc:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    19e0:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    19ea:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    19ee:	09 97       	sbiw	r24, 0x09	; 9
    19f0:	1c f0       	brlt	.+6      	; 0x19f8 <progOutline(unsigned int, unsigned char)+0xc4>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <scannerGoesBack>
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
    1a06:	cf 90       	pop	r12
    1a08:	08 95       	ret
    1a0a:	cb ed       	ldi	r28, 0xDB	; 219
    1a0c:	d7 e0       	ldi	r29, 0x07	; 7
    1a0e:	07 e6       	ldi	r16, 0x67	; 103
    1a10:	18 e0       	ldi	r17, 0x08	; 8
    1a12:	e9 90       	ld	r14, Y+
    1a14:	f9 90       	ld	r15, Y+
    1a16:	dc d8       	rcall	.-3656   	; 0xbd0 <getRandomColorValue()>
    1a18:	d8 2e       	mov	r13, r24
    1a1a:	da d8       	rcall	.-3660   	; 0xbd0 <getRandomColorValue()>
    1a1c:	c8 2e       	mov	r12, r24
    1a1e:	d8 d8       	rcall	.-3664   	; 0xbd0 <getRandomColorValue()>
    1a20:	f7 01       	movw	r30, r14
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	ee 0d       	add	r30, r14
    1a28:	ff 1d       	adc	r31, r15
    1a2a:	e3 53       	subi	r30, 0x33	; 51
    1a2c:	f5 4f       	sbci	r31, 0xF5	; 245
    1a2e:	80 83       	st	Z, r24
    1a30:	c1 82       	std	Z+1, r12	; 0x01
    1a32:	d2 82       	std	Z+2, r13	; 0x02
    1a34:	0c 17       	cp	r16, r28
    1a36:	1d 07       	cpc	r17, r29
    1a38:	61 f7       	brne	.-40     	; 0x1a12 <progOutline(unsigned int, unsigned char)+0xde>
    1a3a:	cd cf       	rjmp	.-102    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1a3c:	cf e6       	ldi	r28, 0x6F	; 111
    1a3e:	d7 e0       	ldi	r29, 0x07	; 7
    1a40:	0b ed       	ldi	r16, 0xDB	; 219
    1a42:	17 e0       	ldi	r17, 0x07	; 7
    1a44:	e9 90       	ld	r14, Y+
    1a46:	f9 90       	ld	r15, Y+
    1a48:	c3 d8       	rcall	.-3706   	; 0xbd0 <getRandomColorValue()>
    1a4a:	d8 2e       	mov	r13, r24
    1a4c:	c1 d8       	rcall	.-3710   	; 0xbd0 <getRandomColorValue()>
    1a4e:	c8 2e       	mov	r12, r24
    1a50:	bf d8       	rcall	.-3714   	; 0xbd0 <getRandomColorValue()>
    1a52:	f7 01       	movw	r30, r14
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	ee 0d       	add	r30, r14
    1a5a:	ff 1d       	adc	r31, r15
    1a5c:	e3 53       	subi	r30, 0x33	; 51
    1a5e:	f5 4f       	sbci	r31, 0xF5	; 245
    1a60:	80 83       	st	Z, r24
    1a62:	c1 82       	std	Z+1, r12	; 0x01
    1a64:	d2 82       	std	Z+2, r13	; 0x02
    1a66:	0c 17       	cp	r16, r28
    1a68:	1d 07       	cpc	r17, r29
    1a6a:	61 f7       	brne	.-40     	; 0x1a44 <progOutline(unsigned int, unsigned char)+0x110>
    1a6c:	b4 cf       	rjmp	.-152    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1a6e:	c5 e2       	ldi	r28, 0x25	; 37
    1a70:	d7 e0       	ldi	r29, 0x07	; 7
    1a72:	0f e6       	ldi	r16, 0x6F	; 111
    1a74:	17 e0       	ldi	r17, 0x07	; 7
    1a76:	e9 90       	ld	r14, Y+
    1a78:	f9 90       	ld	r15, Y+
    1a7a:	aa d8       	rcall	.-3756   	; 0xbd0 <getRandomColorValue()>
    1a7c:	d8 2e       	mov	r13, r24
    1a7e:	a8 d8       	rcall	.-3760   	; 0xbd0 <getRandomColorValue()>
    1a80:	c8 2e       	mov	r12, r24
    1a82:	a6 d8       	rcall	.-3764   	; 0xbd0 <getRandomColorValue()>
    1a84:	f7 01       	movw	r30, r14
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	ee 0d       	add	r30, r14
    1a8c:	ff 1d       	adc	r31, r15
    1a8e:	e3 53       	subi	r30, 0x33	; 51
    1a90:	f5 4f       	sbci	r31, 0xF5	; 245
    1a92:	80 83       	st	Z, r24
    1a94:	c1 82       	std	Z+1, r12	; 0x01
    1a96:	d2 82       	std	Z+2, r13	; 0x02
    1a98:	0c 17       	cp	r16, r28
    1a9a:	1d 07       	cpc	r17, r29
    1a9c:	61 f7       	brne	.-40     	; 0x1a76 <progOutline(unsigned int, unsigned char)+0x142>
    1a9e:	9b cf       	rjmp	.-202    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1aa0:	c5 ee       	ldi	r28, 0xE5	; 229
    1aa2:	d6 e0       	ldi	r29, 0x06	; 6
    1aa4:	05 e2       	ldi	r16, 0x25	; 37
    1aa6:	17 e0       	ldi	r17, 0x07	; 7
    1aa8:	e9 90       	ld	r14, Y+
    1aaa:	f9 90       	ld	r15, Y+
    1aac:	91 d8       	rcall	.-3806   	; 0xbd0 <getRandomColorValue()>
    1aae:	d8 2e       	mov	r13, r24
    1ab0:	8f d8       	rcall	.-3810   	; 0xbd0 <getRandomColorValue()>
    1ab2:	c8 2e       	mov	r12, r24
    1ab4:	8d d8       	rcall	.-3814   	; 0xbd0 <getRandomColorValue()>
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0d       	add	r30, r14
    1abe:	ff 1d       	adc	r31, r15
    1ac0:	e3 53       	subi	r30, 0x33	; 51
    1ac2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ac4:	80 83       	st	Z, r24
    1ac6:	c1 82       	std	Z+1, r12	; 0x01
    1ac8:	d2 82       	std	Z+2, r13	; 0x02
    1aca:	0c 17       	cp	r16, r28
    1acc:	1d 07       	cpc	r17, r29
    1ace:	61 f7       	brne	.-40     	; 0x1aa8 <progOutline(unsigned int, unsigned char)+0x174>
    1ad0:	82 cf       	rjmp	.-252    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1ad2:	c9 ea       	ldi	r28, 0xA9	; 169
    1ad4:	d6 e0       	ldi	r29, 0x06	; 6
    1ad6:	09 91       	ld	r16, Y+
    1ad8:	19 91       	ld	r17, Y+
    1ada:	7a d8       	rcall	.-3852   	; 0xbd0 <getRandomColorValue()>
    1adc:	f8 2e       	mov	r15, r24
    1ade:	78 d8       	rcall	.-3856   	; 0xbd0 <getRandomColorValue()>
    1ae0:	e8 2e       	mov	r14, r24
    1ae2:	76 d8       	rcall	.-3860   	; 0xbd0 <getRandomColorValue()>
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	e0 0f       	add	r30, r16
    1aec:	f1 1f       	adc	r31, r17
    1aee:	e3 53       	subi	r30, 0x33	; 51
    1af0:	f5 4f       	sbci	r31, 0xF5	; 245
    1af2:	80 83       	st	Z, r24
    1af4:	e1 82       	std	Z+1, r14	; 0x01
    1af6:	f2 82       	std	Z+2, r15	; 0x02
    1af8:	86 e0       	ldi	r24, 0x06	; 6
    1afa:	c5 3e       	cpi	r28, 0xE5	; 229
    1afc:	d8 07       	cpc	r29, r24
    1afe:	59 f7       	brne	.-42     	; 0x1ad6 <progOutline(unsigned int, unsigned char)+0x1a2>
    1b00:	6a cf       	rjmp	.-300    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b02:	c3 e7       	ldi	r28, 0x73	; 115
    1b04:	d6 e0       	ldi	r29, 0x06	; 6
    1b06:	09 ea       	ldi	r16, 0xA9	; 169
    1b08:	16 e0       	ldi	r17, 0x06	; 6
    1b0a:	e9 90       	ld	r14, Y+
    1b0c:	f9 90       	ld	r15, Y+
    1b0e:	60 d8       	rcall	.-3904   	; 0xbd0 <getRandomColorValue()>
    1b10:	d8 2e       	mov	r13, r24
    1b12:	5e d8       	rcall	.-3908   	; 0xbd0 <getRandomColorValue()>
    1b14:	c8 2e       	mov	r12, r24
    1b16:	5c d8       	rcall	.-3912   	; 0xbd0 <getRandomColorValue()>
    1b18:	f7 01       	movw	r30, r14
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	ee 0d       	add	r30, r14
    1b20:	ff 1d       	adc	r31, r15
    1b22:	e3 53       	subi	r30, 0x33	; 51
    1b24:	f5 4f       	sbci	r31, 0xF5	; 245
    1b26:	80 83       	st	Z, r24
    1b28:	c1 82       	std	Z+1, r12	; 0x01
    1b2a:	d2 82       	std	Z+2, r13	; 0x02
    1b2c:	0c 17       	cp	r16, r28
    1b2e:	1d 07       	cpc	r17, r29
    1b30:	61 f7       	brne	.-40     	; 0x1b0a <progOutline(unsigned int, unsigned char)+0x1d6>
    1b32:	51 cf       	rjmp	.-350    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b34:	cf e3       	ldi	r28, 0x3F	; 63
    1b36:	d6 e0       	ldi	r29, 0x06	; 6
    1b38:	03 e7       	ldi	r16, 0x73	; 115
    1b3a:	16 e0       	ldi	r17, 0x06	; 6
    1b3c:	e9 90       	ld	r14, Y+
    1b3e:	f9 90       	ld	r15, Y+
    1b40:	47 d8       	rcall	.-3954   	; 0xbd0 <getRandomColorValue()>
    1b42:	d8 2e       	mov	r13, r24
    1b44:	45 d8       	rcall	.-3958   	; 0xbd0 <getRandomColorValue()>
    1b46:	c8 2e       	mov	r12, r24
    1b48:	43 d8       	rcall	.-3962   	; 0xbd0 <getRandomColorValue()>
    1b4a:	f7 01       	movw	r30, r14
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	ee 0d       	add	r30, r14
    1b52:	ff 1d       	adc	r31, r15
    1b54:	e3 53       	subi	r30, 0x33	; 51
    1b56:	f5 4f       	sbci	r31, 0xF5	; 245
    1b58:	80 83       	st	Z, r24
    1b5a:	c1 82       	std	Z+1, r12	; 0x01
    1b5c:	d2 82       	std	Z+2, r13	; 0x02
    1b5e:	0c 17       	cp	r16, r28
    1b60:	1d 07       	cpc	r17, r29
    1b62:	61 f7       	brne	.-40     	; 0x1b3c <progOutline(unsigned int, unsigned char)+0x208>
    1b64:	38 cf       	rjmp	.-400    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b66:	cf e0       	ldi	r28, 0x0F	; 15
    1b68:	d6 e0       	ldi	r29, 0x06	; 6
    1b6a:	09 91       	ld	r16, Y+
    1b6c:	19 91       	ld	r17, Y+
    1b6e:	30 d8       	rcall	.-4000   	; 0xbd0 <getRandomColorValue()>
    1b70:	f8 2e       	mov	r15, r24
    1b72:	2e d8       	rcall	.-4004   	; 0xbd0 <getRandomColorValue()>
    1b74:	e8 2e       	mov	r14, r24
    1b76:	2c d8       	rcall	.-4008   	; 0xbd0 <getRandomColorValue()>
    1b78:	f8 01       	movw	r30, r16
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	e0 0f       	add	r30, r16
    1b80:	f1 1f       	adc	r31, r17
    1b82:	e3 53       	subi	r30, 0x33	; 51
    1b84:	f5 4f       	sbci	r31, 0xF5	; 245
    1b86:	80 83       	st	Z, r24
    1b88:	e1 82       	std	Z+1, r14	; 0x01
    1b8a:	f2 82       	std	Z+2, r15	; 0x02
    1b8c:	86 e0       	ldi	r24, 0x06	; 6
    1b8e:	cf 33       	cpi	r28, 0x3F	; 63
    1b90:	d8 07       	cpc	r29, r24
    1b92:	59 f7       	brne	.-42     	; 0x1b6a <progOutline(unsigned int, unsigned char)+0x236>
    1b94:	20 cf       	rjmp	.-448    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b96:	e9 30       	cpi	r30, 0x09	; 9
    1b98:	f1 05       	cpc	r31, r1
    1b9a:	20 f5       	brcc	.+72     	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1b9c:	ee 52       	subi	r30, 0x2E	; 46
    1b9e:	f2 4f       	sbci	r31, 0xF2	; 242
    1ba0:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    1ba4:	db 0d       	add	r29, r11
    1ba6:	06 0e       	add	r0, r22
    1ba8:	21 0e       	add	r2, r17
    1baa:	3c 0e       	add	r3, r28
    1bac:	57 0e       	add	r5, r23
    1bae:	72 0e       	add	r7, r18
    1bb0:	8d 0e       	add	r8, r29
    1bb2:	a8 0e       	add	r10, r24
    1bb4:	c3 0e       	add	r12, r19
    1bb6:	c7 e6       	ldi	r28, 0x67	; 103
    1bb8:	d8 e0       	ldi	r29, 0x08	; 8
    1bba:	09 91       	ld	r16, Y+
    1bbc:	19 91       	ld	r17, Y+
    1bbe:	08 d8       	rcall	.-4080   	; 0xbd0 <getRandomColorValue()>
    1bc0:	f8 2e       	mov	r15, r24
    1bc2:	06 d8       	rcall	.-4084   	; 0xbd0 <getRandomColorValue()>
    1bc4:	e8 2e       	mov	r14, r24
    1bc6:	04 d8       	rcall	.-4088   	; 0xbd0 <getRandomColorValue()>
    1bc8:	f8 01       	movw	r30, r16
    1bca:	ee 0f       	add	r30, r30
    1bcc:	ff 1f       	adc	r31, r31
    1bce:	e0 0f       	add	r30, r16
    1bd0:	f1 1f       	adc	r31, r17
    1bd2:	e3 53       	subi	r30, 0x33	; 51
    1bd4:	f5 4f       	sbci	r31, 0xF5	; 245
    1bd6:	80 83       	st	Z, r24
    1bd8:	e1 82       	std	Z+1, r14	; 0x01
    1bda:	f2 82       	std	Z+2, r15	; 0x02
    1bdc:	89 e0       	ldi	r24, 0x09	; 9
    1bde:	c3 30       	cpi	r28, 0x03	; 3
    1be0:	d8 07       	cpc	r29, r24
    1be2:	59 f7       	brne	.-42     	; 0x1bba <progOutline(unsigned int, unsigned char)+0x286>
    1be4:	8c ec       	ldi	r24, 0xCC	; 204
    1be6:	90 e1       	ldi	r25, 0x10	; 16
    1be8:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    1bec:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1bf0:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    1bfa:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1bfe:	18 16       	cp	r1, r24
    1c00:	19 06       	cpc	r1, r25
    1c02:	0c f4       	brge	.+2      	; 0x1c06 <progOutline(unsigned int, unsigned char)+0x2d2>
    1c04:	f9 ce       	rjmp	.-526    	; 0x19f8 <progOutline(unsigned int, unsigned char)+0xc4>
    1c06:	10 92 ab 0a 	sts	0x0AAB, r1	; 0x800aab <scannerGoesBack>
    1c0a:	f6 ce       	rjmp	.-532    	; 0x19f8 <progOutline(unsigned int, unsigned char)+0xc4>
    1c0c:	cb ed       	ldi	r28, 0xDB	; 219
    1c0e:	d7 e0       	ldi	r29, 0x07	; 7
    1c10:	09 91       	ld	r16, Y+
    1c12:	19 91       	ld	r17, Y+
    1c14:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c18:	f8 2e       	mov	r15, r24
    1c1a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c1e:	e8 2e       	mov	r14, r24
    1c20:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c24:	f8 01       	movw	r30, r16
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	e0 0f       	add	r30, r16
    1c2c:	f1 1f       	adc	r31, r17
    1c2e:	e3 53       	subi	r30, 0x33	; 51
    1c30:	f5 4f       	sbci	r31, 0xF5	; 245
    1c32:	80 83       	st	Z, r24
    1c34:	e1 82       	std	Z+1, r14	; 0x01
    1c36:	f2 82       	std	Z+2, r15	; 0x02
    1c38:	88 e0       	ldi	r24, 0x08	; 8
    1c3a:	c7 36       	cpi	r28, 0x67	; 103
    1c3c:	d8 07       	cpc	r29, r24
    1c3e:	41 f7       	brne	.-48     	; 0x1c10 <progOutline(unsigned int, unsigned char)+0x2dc>
    1c40:	d1 cf       	rjmp	.-94     	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1c42:	cf e6       	ldi	r28, 0x6F	; 111
    1c44:	d7 e0       	ldi	r29, 0x07	; 7
    1c46:	09 91       	ld	r16, Y+
    1c48:	19 91       	ld	r17, Y+
    1c4a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c4e:	f8 2e       	mov	r15, r24
    1c50:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c54:	e8 2e       	mov	r14, r24
    1c56:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	ee 0f       	add	r30, r30
    1c5e:	ff 1f       	adc	r31, r31
    1c60:	e0 0f       	add	r30, r16
    1c62:	f1 1f       	adc	r31, r17
    1c64:	e3 53       	subi	r30, 0x33	; 51
    1c66:	f5 4f       	sbci	r31, 0xF5	; 245
    1c68:	80 83       	st	Z, r24
    1c6a:	e1 82       	std	Z+1, r14	; 0x01
    1c6c:	f2 82       	std	Z+2, r15	; 0x02
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	cb 3d       	cpi	r28, 0xDB	; 219
    1c72:	d8 07       	cpc	r29, r24
    1c74:	41 f7       	brne	.-48     	; 0x1c46 <progOutline(unsigned int, unsigned char)+0x312>
    1c76:	b6 cf       	rjmp	.-148    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1c78:	c5 e2       	ldi	r28, 0x25	; 37
    1c7a:	d7 e0       	ldi	r29, 0x07	; 7
    1c7c:	09 91       	ld	r16, Y+
    1c7e:	19 91       	ld	r17, Y+
    1c80:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c84:	f8 2e       	mov	r15, r24
    1c86:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c8a:	e8 2e       	mov	r14, r24
    1c8c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c90:	f8 01       	movw	r30, r16
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	e0 0f       	add	r30, r16
    1c98:	f1 1f       	adc	r31, r17
    1c9a:	e3 53       	subi	r30, 0x33	; 51
    1c9c:	f5 4f       	sbci	r31, 0xF5	; 245
    1c9e:	80 83       	st	Z, r24
    1ca0:	e1 82       	std	Z+1, r14	; 0x01
    1ca2:	f2 82       	std	Z+2, r15	; 0x02
    1ca4:	87 e0       	ldi	r24, 0x07	; 7
    1ca6:	cf 36       	cpi	r28, 0x6F	; 111
    1ca8:	d8 07       	cpc	r29, r24
    1caa:	41 f7       	brne	.-48     	; 0x1c7c <progOutline(unsigned int, unsigned char)+0x348>
    1cac:	9b cf       	rjmp	.-202    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1cae:	c5 ee       	ldi	r28, 0xE5	; 229
    1cb0:	d6 e0       	ldi	r29, 0x06	; 6
    1cb2:	09 91       	ld	r16, Y+
    1cb4:	19 91       	ld	r17, Y+
    1cb6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cba:	f8 2e       	mov	r15, r24
    1cbc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cc0:	e8 2e       	mov	r14, r24
    1cc2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	e0 0f       	add	r30, r16
    1cce:	f1 1f       	adc	r31, r17
    1cd0:	e3 53       	subi	r30, 0x33	; 51
    1cd2:	f5 4f       	sbci	r31, 0xF5	; 245
    1cd4:	80 83       	st	Z, r24
    1cd6:	e1 82       	std	Z+1, r14	; 0x01
    1cd8:	f2 82       	std	Z+2, r15	; 0x02
    1cda:	87 e0       	ldi	r24, 0x07	; 7
    1cdc:	c5 32       	cpi	r28, 0x25	; 37
    1cde:	d8 07       	cpc	r29, r24
    1ce0:	41 f7       	brne	.-48     	; 0x1cb2 <progOutline(unsigned int, unsigned char)+0x37e>
    1ce2:	80 cf       	rjmp	.-256    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1ce4:	c9 ea       	ldi	r28, 0xA9	; 169
    1ce6:	d6 e0       	ldi	r29, 0x06	; 6
    1ce8:	09 91       	ld	r16, Y+
    1cea:	19 91       	ld	r17, Y+
    1cec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cf0:	f8 2e       	mov	r15, r24
    1cf2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cf6:	e8 2e       	mov	r14, r24
    1cf8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	e0 0f       	add	r30, r16
    1d04:	f1 1f       	adc	r31, r17
    1d06:	e3 53       	subi	r30, 0x33	; 51
    1d08:	f5 4f       	sbci	r31, 0xF5	; 245
    1d0a:	80 83       	st	Z, r24
    1d0c:	e1 82       	std	Z+1, r14	; 0x01
    1d0e:	f2 82       	std	Z+2, r15	; 0x02
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	c5 3e       	cpi	r28, 0xE5	; 229
    1d14:	d8 07       	cpc	r29, r24
    1d16:	41 f7       	brne	.-48     	; 0x1ce8 <progOutline(unsigned int, unsigned char)+0x3b4>
    1d18:	65 cf       	rjmp	.-310    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1d1a:	c3 e7       	ldi	r28, 0x73	; 115
    1d1c:	d6 e0       	ldi	r29, 0x06	; 6
    1d1e:	09 91       	ld	r16, Y+
    1d20:	19 91       	ld	r17, Y+
    1d22:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d26:	f8 2e       	mov	r15, r24
    1d28:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d2c:	e8 2e       	mov	r14, r24
    1d2e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d32:	f8 01       	movw	r30, r16
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	e0 0f       	add	r30, r16
    1d3a:	f1 1f       	adc	r31, r17
    1d3c:	e3 53       	subi	r30, 0x33	; 51
    1d3e:	f5 4f       	sbci	r31, 0xF5	; 245
    1d40:	80 83       	st	Z, r24
    1d42:	e1 82       	std	Z+1, r14	; 0x01
    1d44:	f2 82       	std	Z+2, r15	; 0x02
    1d46:	86 e0       	ldi	r24, 0x06	; 6
    1d48:	c9 3a       	cpi	r28, 0xA9	; 169
    1d4a:	d8 07       	cpc	r29, r24
    1d4c:	41 f7       	brne	.-48     	; 0x1d1e <progOutline(unsigned int, unsigned char)+0x3ea>
    1d4e:	4a cf       	rjmp	.-364    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1d50:	cf e3       	ldi	r28, 0x3F	; 63
    1d52:	d6 e0       	ldi	r29, 0x06	; 6
    1d54:	09 91       	ld	r16, Y+
    1d56:	19 91       	ld	r17, Y+
    1d58:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d5c:	f8 2e       	mov	r15, r24
    1d5e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d62:	e8 2e       	mov	r14, r24
    1d64:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d68:	f8 01       	movw	r30, r16
    1d6a:	ee 0f       	add	r30, r30
    1d6c:	ff 1f       	adc	r31, r31
    1d6e:	e0 0f       	add	r30, r16
    1d70:	f1 1f       	adc	r31, r17
    1d72:	e3 53       	subi	r30, 0x33	; 51
    1d74:	f5 4f       	sbci	r31, 0xF5	; 245
    1d76:	80 83       	st	Z, r24
    1d78:	e1 82       	std	Z+1, r14	; 0x01
    1d7a:	f2 82       	std	Z+2, r15	; 0x02
    1d7c:	86 e0       	ldi	r24, 0x06	; 6
    1d7e:	c3 37       	cpi	r28, 0x73	; 115
    1d80:	d8 07       	cpc	r29, r24
    1d82:	41 f7       	brne	.-48     	; 0x1d54 <progOutline(unsigned int, unsigned char)+0x420>
    1d84:	2f cf       	rjmp	.-418    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1d86:	cf e0       	ldi	r28, 0x0F	; 15
    1d88:	d6 e0       	ldi	r29, 0x06	; 6
    1d8a:	09 91       	ld	r16, Y+
    1d8c:	19 91       	ld	r17, Y+
    1d8e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d92:	f8 2e       	mov	r15, r24
    1d94:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d98:	e8 2e       	mov	r14, r24
    1d9a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d9e:	f8 01       	movw	r30, r16
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	e0 0f       	add	r30, r16
    1da6:	f1 1f       	adc	r31, r17
    1da8:	e3 53       	subi	r30, 0x33	; 51
    1daa:	f5 4f       	sbci	r31, 0xF5	; 245
    1dac:	80 83       	st	Z, r24
    1dae:	e1 82       	std	Z+1, r14	; 0x01
    1db0:	f2 82       	std	Z+2, r15	; 0x02
    1db2:	86 e0       	ldi	r24, 0x06	; 6
    1db4:	cf 33       	cpi	r28, 0x3F	; 63
    1db6:	d8 07       	cpc	r29, r24
    1db8:	41 f7       	brne	.-48     	; 0x1d8a <progOutline(unsigned int, unsigned char)+0x456>
    1dba:	14 cf       	rjmp	.-472    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>

00001dbc <progShowText(String, unsigned int, int, int, int, unsigned char)>:
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	ec 01       	movw	r28, r24
    1dd4:	4b 01       	movw	r8, r22
    1dd6:	5a 01       	movw	r10, r20
    1dd8:	69 01       	movw	r12, r18
    1dda:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1dde:	81 11       	cpse	r24, r1
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <progShowText(String, unsigned int, int, int, int, unsigned char)+0x4e>
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	8c ec       	ldi	r24, 0xCC	; 204
    1de6:	90 e1       	ldi	r25, 0x10	; 16
    1de8:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1dec:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1df0:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1df4:	e0 92 b8 0a 	sts	0x0AB8, r14	; 0x800ab8 <nextSongPart>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1dfe:	84 e6       	ldi	r24, 0x64	; 100
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <millisCounterTimer+0x1>
    1e06:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <millisCounterTimer>
    1e0a:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1e0e:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1e12:	84 36       	cpi	r24, 0x64	; 100
    1e14:	91 05       	cpc	r25, r1
    1e16:	08 f4       	brcc	.+2      	; 0x1e1a <progShowText(String, unsigned int, int, int, int, unsigned char)+0x5e>
    1e18:	4c c0       	rjmp	.+152    	; 0x1eb2 <progShowText(String, unsigned int, int, int, int, unsigned char)+0xf6>
    1e1a:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1e1e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1e22:	85 e0       	ldi	r24, 0x05	; 5
    1e24:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    1e28:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e2c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e30:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1e34:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e38:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	56 96       	adiw	r26, 0x16	; 22
    1e40:	1c 92       	st	X, r1
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	0e 94 ed 39 	call	0x73da	; 0x73da <Adafruit_GFX::setTextSize(unsigned char)>
    1e48:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e4c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e50:	dc 01       	movw	r26, r24
    1e52:	ed 91       	ld	r30, X+
    1e54:	fc 91       	ld	r31, X
    1e56:	00 8c       	ldd	r0, Z+24	; 0x18
    1e58:	f1 8d       	ldd	r31, Z+25	; 0x19
    1e5a:	e0 2d       	mov	r30, r0
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	09 95       	icall
    1e60:	0e 94 69 4c 	call	0x98d2	; 0x98d2 <yield>
    1e64:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e68:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e6c:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1e70:	e0 91 bb 10 	lds	r30, 0x10BB	; 0x8010bb <matrix>
    1e74:	f0 91 bc 10 	lds	r31, 0x10BC	; 0x8010bc <matrix+0x1>
    1e78:	b4 86       	std	Z+12, r11	; 0x0c
    1e7a:	a3 86       	std	Z+11, r10	; 0x0b
    1e7c:	d6 86       	std	Z+14, r13	; 0x0e
    1e7e:	c5 86       	std	Z+13, r12	; 0x0d
    1e80:	12 8b       	std	Z+18, r17	; 0x12
    1e82:	01 8b       	std	Z+17, r16	; 0x11
    1e84:	10 8b       	std	Z+16, r17	; 0x10
    1e86:	07 87       	std	Z+15, r16	; 0x0f
    1e88:	be 01       	movw	r22, r28
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	0e 94 c1 48 	call	0x9182	; 0x9182 <Print::print(String const&)>
    1e90:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e94:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	9f 90       	pop	r9
    1eac:	8f 90       	pop	r8
    1eae:	0c 94 0c 3a 	jmp	0x7418	; 0x7418 <FastLED_NeoMatrix::show()>
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	08 95       	ret

00001eca <progScrollText(String, unsigned int, int, int, unsigned char)>:
    1eca:	af 92       	push	r10
    1ecc:	bf 92       	push	r11
    1ece:	cf 92       	push	r12
    1ed0:	df 92       	push	r13
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	7c 01       	movw	r14, r24
    1ede:	5b 01       	movw	r10, r22
    1ee0:	6a 01       	movw	r12, r20
    1ee2:	e9 01       	movw	r28, r18
    1ee4:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1ee8:	81 11       	cpse	r24, r1
    1eea:	26 c0       	rjmp	.+76     	; 0x1f38 <progScrollText(String, unsigned int, int, int, unsigned char)+0x6e>
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	8c ec       	ldi	r24, 0xCC	; 204
    1ef0:	90 e1       	ldi	r25, 0x10	; 16
    1ef2:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    1ef6:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
    1efa:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
    1efe:	00 93 b8 0a 	sts	0x0AB8, r16	; 0x800ab8 <nextSongPart>
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1f08:	d0 92 c0 0a 	sts	0x0AC0, r13	; 0x800ac0 <millisCounterTimer+0x1>
    1f0c:	c0 92 bf 0a 	sts	0x0ABF, r12	; 0x800abf <millisCounterTimer>
    1f10:	84 e1       	ldi	r24, 0x14	; 20
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1f18:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1f1c:	d7 01       	movw	r26, r14
    1f1e:	14 96       	adiw	r26, 0x04	; 4
    1f20:	2d 91       	ld	r18, X+
    1f22:	3c 91       	ld	r19, X
    1f24:	46 e0       	ldi	r20, 0x06	; 6
    1f26:	42 9f       	mul	r20, r18
    1f28:	c0 01       	movw	r24, r0
    1f2a:	43 9f       	mul	r20, r19
    1f2c:	90 0d       	add	r25, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <progScrollEnde+0x1>
    1f34:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <progScrollEnde>
    1f38:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1f3c:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1f40:	8c 15       	cp	r24, r12
    1f42:	9d 05       	cpc	r25, r13
    1f44:	08 f4       	brcc	.+2      	; 0x1f48 <progScrollText(String, unsigned int, int, int, unsigned char)+0x7e>
    1f46:	68 c0       	rjmp	.+208    	; 0x2018 <progScrollText(String, unsigned int, int, int, unsigned char)+0x14e>
    1f48:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1f4c:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1f50:	85 e0       	ldi	r24, 0x05	; 5
    1f52:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    1f56:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1f5a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1f5e:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1f62:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1f66:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	16 8a       	std	Z+22, r1	; 0x16
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	0e 94 ed 39 	call	0x73da	; 0x73da <Adafruit_GFX::setTextSize(unsigned char)>
    1f74:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1f78:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	ed 91       	ld	r30, X+
    1f80:	fc 91       	ld	r31, X
    1f82:	00 8c       	ldd	r0, Z+24	; 0x18
    1f84:	f1 8d       	ldd	r31, Z+25	; 0x19
    1f86:	e0 2d       	mov	r30, r0
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	09 95       	icall
    1f8c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1f90:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1f9a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1f9e:	20 91 ac 0a 	lds	r18, 0x0AAC	; 0x800aac <progScrollEnde>
    1fa2:	30 91 ad 0a 	lds	r19, 0x0AAD	; 0x800aad <progScrollEnde+0x1>
    1fa6:	31 95       	neg	r19
    1fa8:	21 95       	neg	r18
    1faa:	31 09       	sbc	r19, r1
    1fac:	82 17       	cp	r24, r18
    1fae:	93 07       	cpc	r25, r19
    1fb0:	34 f4       	brge	.+12     	; 0x1fbe <progScrollText(String, unsigned int, int, int, unsigned char)+0xf4>
    1fb2:	84 e1       	ldi	r24, 0x14	; 20
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1fba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1fbe:	0e 94 69 4c 	call	0x98d2	; 0x98d2 <yield>
    1fc2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1fc6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1fca:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1fce:	e0 91 bb 10 	lds	r30, 0x10BB	; 0x8010bb <matrix>
    1fd2:	f0 91 bc 10 	lds	r31, 0x10BC	; 0x8010bc <matrix+0x1>
    1fd6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1fda:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1fde:	94 87       	std	Z+12, r25	; 0x0c
    1fe0:	83 87       	std	Z+11, r24	; 0x0b
    1fe2:	8d e0       	ldi	r24, 0x0D	; 13
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	96 87       	std	Z+14, r25	; 0x0e
    1fe8:	85 87       	std	Z+13, r24	; 0x0d
    1fea:	d2 8b       	std	Z+18, r29	; 0x12
    1fec:	c1 8b       	std	Z+17, r28	; 0x11
    1fee:	d0 8b       	std	Z+16, r29	; 0x10
    1ff0:	c7 87       	std	Z+15, r28	; 0x0f
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	cf 01       	movw	r24, r30
    1ff6:	0e 94 c1 48 	call	0x9182	; 0x9182 <Print::print(String const&)>
    1ffa:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1ffe:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	af 90       	pop	r10
    2014:	0c 94 0c 3a 	jmp	0x7418	; 0x7418 <FastLED_NeoMatrix::show()>
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	bf 90       	pop	r11
    2028:	af 90       	pop	r10
    202a:	08 95       	ret

0000202c <progShowROOTS(unsigned int, unsigned char)>:
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	8c 01       	movw	r16, r24
    2036:	c6 2f       	mov	r28, r22
    2038:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    203c:	81 11       	cpse	r24, r1
    203e:	0e c0       	rjmp	.+28     	; 0x205c <progShowROOTS(unsigned int, unsigned char)+0x30>
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	8c ec       	ldi	r24, 0xCC	; 204
    2044:	90 e1       	ldi	r25, 0x10	; 16
    2046:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    204a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    204e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    2052:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    205c:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    2060:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2064:	84 3f       	cpi	r24, 0xF4	; 244
    2066:	91 40       	sbci	r25, 0x01	; 1
    2068:	08 f4       	brcc	.+2      	; 0x206c <progShowROOTS(unsigned int, unsigned char)+0x40>
    206a:	b1 c0       	rjmp	.+354    	; 0x21ce <__stack+0xcf>
    206c:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    2070:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2074:	8f e0       	ldi	r24, 0x0F	; 15
    2076:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    207a:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    207e:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2082:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    2086:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    208a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    208e:	dc 01       	movw	r26, r24
    2090:	56 96       	adiw	r26, 0x16	; 22
    2092:	1c 92       	st	X, r1
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 ed 39 	call	0x73da	; 0x73da <Adafruit_GFX::setTextSize(unsigned char)>
    209a:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    209e:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    20a2:	dc 01       	movw	r26, r24
    20a4:	ed 91       	ld	r30, X+
    20a6:	fc 91       	ld	r31, X
    20a8:	00 8c       	ldd	r0, Z+24	; 0x18
    20aa:	f1 8d       	ldd	r31, Z+25	; 0x19
    20ac:	e0 2d       	mov	r30, r0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	09 95       	icall
    20b2:	0e 94 69 4c 	call	0x98d2	; 0x98d2 <yield>
    20b6:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    20ba:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    20be:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    20c2:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    20c6:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    20ca:	1c 86       	std	Y+12, r1	; 0x0c
    20cc:	1b 86       	std	Y+11, r1	; 0x0b
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9e 87       	std	Y+14, r25	; 0x0e
    20d4:	8d 87       	std	Y+13, r24	; 0x0d
    20d6:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    20da:	9a 8b       	std	Y+18, r25	; 0x12
    20dc:	89 8b       	std	Y+17, r24	; 0x11
    20de:	98 8b       	std	Y+16, r25	; 0x10
    20e0:	8f 87       	std	Y+15, r24	; 0x0f
    20e2:	69 e1       	ldi	r22, 0x19	; 25
    20e4:	71 e0       	ldi	r23, 0x01	; 1
    20e6:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    20ea:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    20ee:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    20f2:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    20f6:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    20fa:	1c 86       	std	Y+12, r1	; 0x0c
    20fc:	1b 86       	std	Y+11, r1	; 0x0b
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e 87       	std	Y+14, r25	; 0x0e
    2104:	8d 87       	std	Y+13, r24	; 0x0d
    2106:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    210a:	9a 8b       	std	Y+18, r25	; 0x12
    210c:	89 8b       	std	Y+17, r24	; 0x11
    210e:	98 8b       	std	Y+16, r25	; 0x10
    2110:	8f 87       	std	Y+15, r24	; 0x0f
    2112:	6b e1       	ldi	r22, 0x1B	; 27
    2114:	71 e0       	ldi	r23, 0x01	; 1
    2116:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    211a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    211e:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    2122:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    2126:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 87       	std	Y+12, r25	; 0x0c
    2130:	8b 87       	std	Y+11, r24	; 0x0b
    2132:	0d e0       	ldi	r16, 0x0D	; 13
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	1e 87       	std	Y+14, r17	; 0x0e
    2138:	0d 87       	std	Y+13, r16	; 0x0d
    213a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    213e:	9a 8b       	std	Y+18, r25	; 0x12
    2140:	89 8b       	std	Y+17, r24	; 0x11
    2142:	98 8b       	std	Y+16, r25	; 0x10
    2144:	8f 87       	std	Y+15, r24	; 0x0f
    2146:	6b e1       	ldi	r22, 0x1B	; 27
    2148:	71 e0       	ldi	r23, 0x01	; 1
    214a:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    214e:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2152:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    2156:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    215a:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    215e:	8a e0       	ldi	r24, 0x0A	; 10
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9c 87       	std	Y+12, r25	; 0x0c
    2164:	8b 87       	std	Y+11, r24	; 0x0b
    2166:	8e e0       	ldi	r24, 0x0E	; 14
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9e 87       	std	Y+14, r25	; 0x0e
    216c:	8d 87       	std	Y+13, r24	; 0x0d
    216e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    2172:	9a 8b       	std	Y+18, r25	; 0x12
    2174:	89 8b       	std	Y+17, r24	; 0x11
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f
    217a:	6d e1       	ldi	r22, 0x1D	; 29
    217c:	71 e0       	ldi	r23, 0x01	; 1
    217e:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    2182:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2186:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    218a:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    218e:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    2192:	8f e0       	ldi	r24, 0x0F	; 15
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	8b 87       	std	Y+11, r24	; 0x0b
    219a:	1e 87       	std	Y+14, r17	; 0x0e
    219c:	0d 87       	std	Y+13, r16	; 0x0d
    219e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    21a2:	9a 8b       	std	Y+18, r25	; 0x12
    21a4:	89 8b       	std	Y+17, r24	; 0x11
    21a6:	98 8b       	std	Y+16, r25	; 0x10
    21a8:	8f 87       	std	Y+15, r24	; 0x0f
    21aa:	64 e7       	ldi	r22, 0x74	; 116
    21ac:	71 e0       	ldi	r23, 0x01	; 1
    21ae:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    21b2:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    21b6:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    21ba:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    21be:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	0c 94 0c 3a 	jmp	0x7418	; 0x7418 <FastLED_NeoMatrix::show()>
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    21d8:	8f 92       	push	r8
    21da:	9f 92       	push	r9
    21dc:	af 92       	push	r10
    21de:	bf 92       	push	r11
    21e0:	cf 92       	push	r12
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	ec 01       	movw	r28, r24
    21f0:	5b 01       	movw	r10, r22
    21f2:	6a 01       	movw	r12, r20
    21f4:	49 01       	movw	r8, r18
    21f6:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    21fa:	81 11       	cpse	r24, r1
    21fc:	16 c0       	rjmp	.+44     	; 0x222a <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	8c ec       	ldi	r24, 0xCC	; 204
    2202:	90 e1       	ldi	r25, 0x10	; 16
    2204:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    2208:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    220c:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    2210:	e0 92 b8 0a 	sts	0x0AB8, r14	; 0x800ab8 <nextSongPart>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    221a:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <zaehlerWortArray+0x1>
    221e:	10 92 6f 0a 	sts	0x0A6F, r1	; 0x800a6f <zaehlerWortArray>
    2222:	d0 92 c0 0a 	sts	0x0AC0, r13	; 0x800ac0 <millisCounterTimer+0x1>
    2226:	c0 92 bf 0a 	sts	0x0ABF, r12	; 0x800abf <millisCounterTimer>
    222a:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    222e:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2232:	8c 15       	cp	r24, r12
    2234:	9d 05       	cpc	r25, r13
    2236:	08 f4       	brcc	.+2      	; 0x223a <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    2238:	5b c0       	rjmp	.+182    	; 0x22f0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    223a:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    223e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2242:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    2246:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    224a:	a8 16       	cp	r10, r24
    224c:	b9 06       	cpc	r11, r25
    224e:	0c f4       	brge	.+2      	; 0x2252 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    2250:	4f c0       	rjmp	.+158    	; 0x22f0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    2252:	85 e0       	ldi	r24, 0x05	; 5
    2254:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    2258:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    225c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2260:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    2264:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    2268:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    226c:	dc 01       	movw	r26, r24
    226e:	56 96       	adiw	r26, 0x16	; 22
    2270:	1c 92       	st	X, r1
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	0e 94 ed 39 	call	0x73da	; 0x73da <Adafruit_GFX::setTextSize(unsigned char)>
    2278:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    227c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2280:	dc 01       	movw	r26, r24
    2282:	ed 91       	ld	r30, X+
    2284:	fc 91       	ld	r31, X
    2286:	00 8c       	ldd	r0, Z+24	; 0x18
    2288:	f1 8d       	ldd	r31, Z+25	; 0x19
    228a:	e0 2d       	mov	r30, r0
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	09 95       	icall
    2290:	0e 94 69 4c 	call	0x98d2	; 0x98d2 <yield>
    2294:	e0 91 bb 10 	lds	r30, 0x10BB	; 0x8010bb <matrix>
    2298:	f0 91 bc 10 	lds	r31, 0x10BC	; 0x8010bc <matrix+0x1>
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	94 87       	std	Z+12, r25	; 0x0c
    22a2:	83 87       	std	Z+11, r24	; 0x0b
    22a4:	8d e0       	ldi	r24, 0x0D	; 13
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	96 87       	std	Z+14, r25	; 0x0e
    22aa:	85 87       	std	Z+13, r24	; 0x0d
    22ac:	12 8b       	std	Z+18, r17	; 0x12
    22ae:	01 8b       	std	Z+17, r16	; 0x11
    22b0:	10 8b       	std	Z+16, r17	; 0x10
    22b2:	07 87       	std	Z+15, r16	; 0x0f
    22b4:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    22b8:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    22bc:	27 e0       	ldi	r18, 0x07	; 7
    22be:	28 9f       	mul	r18, r24
    22c0:	b0 01       	movw	r22, r0
    22c2:	29 9f       	mul	r18, r25
    22c4:	70 0d       	add	r23, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	6c 0f       	add	r22, r28
    22ca:	7d 1f       	adc	r23, r29
    22cc:	cf 01       	movw	r24, r30
    22ce:	0e 94 c1 48 	call	0x9182	; 0x9182 <Print::print(String const&)>
    22d2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    22d6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    22da:	0e 94 0c 3a 	call	0x7418	; 0x7418 <FastLED_NeoMatrix::show()>
    22de:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    22e2:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <zaehlerWortArray+0x1>
    22ec:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <zaehlerWortArray>
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	bf 90       	pop	r11
    2300:	af 90       	pop	r10
    2302:	9f 90       	pop	r9
    2304:	8f 90       	pop	r8
    2306:	08 95       	ret

00002308 <SetupTotallyRandomPalette()>:
    2308:	bf 92       	push	r11
    230a:	cf 92       	push	r12
    230c:	df 92       	push	r13
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	00 d0       	rcall	.+0      	; 0x231c <SetupTotallyRandomPalette()+0x14>
    231c:	1f 92       	push	r1
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	08 e7       	ldi	r16, 0x78	; 120
    2324:	1a e0       	ldi	r17, 0x0A	; 10
    2326:	88 ea       	ldi	r24, 0xA8	; 168
    2328:	e8 2e       	mov	r14, r24
    232a:	8a e0       	ldi	r24, 0x0A	; 10
    232c:	f8 2e       	mov	r15, r24
    232e:	95 e0       	ldi	r25, 0x05	; 5
    2330:	c9 2e       	mov	r12, r25
    2332:	98 e0       	ldi	r25, 0x08	; 8
    2334:	d9 2e       	mov	r13, r25
    2336:	bb 24       	eor	r11, r11
    2338:	ba 94       	dec	r11
    233a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    233e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    2342:	2c 9d       	mul	r18, r12
    2344:	c0 01       	movw	r24, r0
    2346:	2d 9d       	mul	r18, r13
    2348:	90 0d       	add	r25, r0
    234a:	3c 9d       	mul	r19, r12
    234c:	90 0d       	add	r25, r0
    234e:	11 24       	eor	r1, r1
    2350:	87 5e       	subi	r24, 0xE7	; 231
    2352:	99 4c       	sbci	r25, 0xC9	; 201
    2354:	8c 9d       	mul	r24, r12
    2356:	90 01       	movw	r18, r0
    2358:	8d 9d       	mul	r24, r13
    235a:	30 0d       	add	r19, r0
    235c:	9c 9d       	mul	r25, r12
    235e:	30 0d       	add	r19, r0
    2360:	11 24       	eor	r1, r1
    2362:	27 5e       	subi	r18, 0xE7	; 231
    2364:	39 4c       	sbci	r19, 0xC9	; 201
    2366:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    236a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    236e:	23 0f       	add	r18, r19
    2370:	29 83       	std	Y+1, r18	; 0x01
    2372:	ba 82       	std	Y+2, r11	; 0x02
    2374:	89 0f       	add	r24, r25
    2376:	8b 83       	std	Y+3, r24	; 0x03
    2378:	b8 01       	movw	r22, r16
    237a:	ce 01       	movw	r24, r28
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	0e 94 1c 40 	call	0x8038	; 0x8038 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2382:	0d 5f       	subi	r16, 0xFD	; 253
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
    2386:	e0 16       	cp	r14, r16
    2388:	f1 06       	cpc	r15, r17
    238a:	b9 f6       	brne	.-82     	; 0x233a <SetupTotallyRandomPalette()+0x32>
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	08 95       	ret

000023a6 <SetupBlackAndWhiteStripedPalette()>:
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <SetupBlackAndWhiteStripedPalette()+0x6>
    23ac:	1f 92       	push	r1
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	19 82       	std	Y+1, r1	; 0x01
    23b4:	1a 82       	std	Y+2, r1	; 0x02
    23b6:	1b 82       	std	Y+3, r1	; 0x03
    23b8:	ae 01       	movw	r20, r28
    23ba:	4f 5f       	subi	r20, 0xFF	; 255
    23bc:	5f 4f       	sbci	r21, 0xFF	; 255
    23be:	60 e1       	ldi	r22, 0x10	; 16
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	88 e7       	ldi	r24, 0x78	; 120
    23c4:	9a e0       	ldi	r25, 0x0A	; 10
    23c6:	0e 94 fb 3c 	call	0x79f6	; 0x79f6 <fill_solid(CRGB*, int, CRGB const&)>
    23ca:	e8 e7       	ldi	r30, 0x78	; 120
    23cc:	fa e0       	ldi	r31, 0x0A	; 10
    23ce:	8f ef       	ldi	r24, 0xFF	; 255
    23d0:	80 83       	st	Z, r24
    23d2:	81 83       	std	Z+1, r24	; 0x01
    23d4:	82 83       	std	Z+2, r24	; 0x02
    23d6:	84 87       	std	Z+12, r24	; 0x0c
    23d8:	85 87       	std	Z+13, r24	; 0x0d
    23da:	86 87       	std	Z+14, r24	; 0x0e
    23dc:	80 8f       	std	Z+24, r24	; 0x18
    23de:	81 8f       	std	Z+25, r24	; 0x19
    23e0:	82 8f       	std	Z+26, r24	; 0x1a
    23e2:	84 a3       	std	Z+36, r24	; 0x24
    23e4:	85 a3       	std	Z+37, r24	; 0x25
    23e6:	86 a3       	std	Z+38, r24	; 0x26
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <SetupPurpleAndGreenPalette()>:
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	e6 97       	sbiw	r28, 0x36	; 54
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	80 ec       	ldi	r24, 0xC0	; 192
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	1f ef       	ldi	r17, 0xFF	; 255
    2410:	1a 83       	std	Y+2, r17	; 0x02
    2412:	1b 83       	std	Y+3, r17	; 0x03
    2414:	be 01       	movw	r22, r28
    2416:	6c 5c       	subi	r22, 0xCC	; 204
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	ce 01       	movw	r24, r28
    241c:	01 96       	adiw	r24, 0x01	; 1
    241e:	0e 94 1c 40 	call	0x8038	; 0x8038 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2422:	80 e6       	ldi	r24, 0x60	; 96
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	1a 83       	std	Y+2, r17	; 0x02
    2428:	1b 83       	std	Y+3, r17	; 0x03
    242a:	be 01       	movw	r22, r28
    242c:	6f 5c       	subi	r22, 0xCF	; 207
    242e:	7f 4f       	sbci	r23, 0xFF	; 255
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	0e 94 1c 40 	call	0x8038	; 0x8038 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2438:	59 a9       	ldd	r21, Y+49	; 0x31
    243a:	59 83       	std	Y+1, r21	; 0x01
    243c:	4a a9       	ldd	r20, Y+50	; 0x32
    243e:	4a 83       	std	Y+2, r20	; 0x02
    2440:	3b a9       	ldd	r19, Y+51	; 0x33
    2442:	3b 83       	std	Y+3, r19	; 0x03
    2444:	5c 83       	std	Y+4, r21	; 0x04
    2446:	4d 83       	std	Y+5, r20	; 0x05
    2448:	3e 83       	std	Y+6, r19	; 0x06
    244a:	1f 82       	std	Y+7, r1	; 0x07
    244c:	18 86       	std	Y+8, r1	; 0x08
    244e:	19 86       	std	Y+9, r1	; 0x09
    2450:	1a 86       	std	Y+10, r1	; 0x0a
    2452:	1b 86       	std	Y+11, r1	; 0x0b
    2454:	1c 86       	std	Y+12, r1	; 0x0c
    2456:	2c a9       	ldd	r18, Y+52	; 0x34
    2458:	2d 87       	std	Y+13, r18	; 0x0d
    245a:	9d a9       	ldd	r25, Y+53	; 0x35
    245c:	9e 87       	std	Y+14, r25	; 0x0e
    245e:	8e a9       	ldd	r24, Y+54	; 0x36
    2460:	8f 87       	std	Y+15, r24	; 0x0f
    2462:	28 8b       	std	Y+16, r18	; 0x10
    2464:	99 8b       	std	Y+17, r25	; 0x11
    2466:	8a 8b       	std	Y+18, r24	; 0x12
    2468:	1b 8a       	std	Y+19, r1	; 0x13
    246a:	1c 8a       	std	Y+20, r1	; 0x14
    246c:	1d 8a       	std	Y+21, r1	; 0x15
    246e:	1e 8a       	std	Y+22, r1	; 0x16
    2470:	1f 8a       	std	Y+23, r1	; 0x17
    2472:	18 8e       	std	Y+24, r1	; 0x18
    2474:	59 8f       	std	Y+25, r21	; 0x19
    2476:	4a 8f       	std	Y+26, r20	; 0x1a
    2478:	3b 8f       	std	Y+27, r19	; 0x1b
    247a:	5c 8f       	std	Y+28, r21	; 0x1c
    247c:	4d 8f       	std	Y+29, r20	; 0x1d
    247e:	3e 8f       	std	Y+30, r19	; 0x1e
    2480:	1f 8e       	std	Y+31, r1	; 0x1f
    2482:	18 a2       	std	Y+32, r1	; 0x20
    2484:	19 a2       	std	Y+33, r1	; 0x21
    2486:	1a a2       	std	Y+34, r1	; 0x22
    2488:	1b a2       	std	Y+35, r1	; 0x23
    248a:	1c a2       	std	Y+36, r1	; 0x24
    248c:	2d a3       	std	Y+37, r18	; 0x25
    248e:	9e a3       	std	Y+38, r25	; 0x26
    2490:	8f a3       	std	Y+39, r24	; 0x27
    2492:	28 a7       	std	Y+40, r18	; 0x28
    2494:	99 a7       	std	Y+41, r25	; 0x29
    2496:	8a a7       	std	Y+42, r24	; 0x2a
    2498:	1b a6       	std	Y+43, r1	; 0x2b
    249a:	1c a6       	std	Y+44, r1	; 0x2c
    249c:	1d a6       	std	Y+45, r1	; 0x2d
    249e:	1e a6       	std	Y+46, r1	; 0x2e
    24a0:	1f a6       	std	Y+47, r1	; 0x2f
    24a2:	18 aa       	std	Y+48, r1	; 0x30
    24a4:	40 e3       	ldi	r20, 0x30	; 48
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	be 01       	movw	r22, r28
    24aa:	6f 5f       	subi	r22, 0xFF	; 255
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	88 e7       	ldi	r24, 0x78	; 120
    24b0:	9a e0       	ldi	r25, 0x0A	; 10
    24b2:	0e 94 e8 40 	call	0x81d0	; 0x81d0 <memmove8>
    24b6:	e6 96       	adiw	r28, 0x36	; 54
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	08 95       	ret

000024ca <FillLEDsFromPaletteColors(unsigned char)>:
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	00 d0       	rcall	.+0      	; 0x24da <FillLEDsFromPaletteColors(unsigned char)+0x10>
    24da:	1f 92       	push	r1
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	d8 2e       	mov	r13, r24
    24e2:	8d ec       	ldi	r24, 0xCD	; 205
    24e4:	e8 2e       	mov	r14, r24
    24e6:	8a e0       	ldi	r24, 0x0A	; 10
    24e8:	f8 2e       	mov	r15, r24
    24ea:	00 91 76 0a 	lds	r16, 0x0A76	; 0x800a76 <currentBlending>
    24ee:	10 91 77 0a 	lds	r17, 0x0A77	; 0x800a77 <currentBlending+0x1>
    24f2:	2f ef       	ldi	r18, 0xFF	; 255
    24f4:	4d 2d       	mov	r20, r13
    24f6:	68 e7       	ldi	r22, 0x78	; 120
    24f8:	7a e0       	ldi	r23, 0x0A	; 10
    24fa:	ce 01       	movw	r24, r28
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	0e 94 10 3d 	call	0x7a20	; 0x7a20 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	f7 01       	movw	r30, r14
    2506:	80 83       	st	Z, r24
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	81 83       	std	Z+1, r24	; 0x01
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	82 83       	std	Z+2, r24	; 0x02
    2510:	f3 e0       	ldi	r31, 0x03	; 3
    2512:	df 0e       	add	r13, r31
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	e8 0e       	add	r14, r24
    2518:	f1 1c       	adc	r15, r1
    251a:	ef e0       	ldi	r30, 0x0F	; 15
    251c:	ee 16       	cp	r14, r30
    251e:	ee e0       	ldi	r30, 0x0E	; 14
    2520:	fe 06       	cpc	r15, r30
    2522:	19 f7       	brne	.-58     	; 0x24ea <FillLEDsFromPaletteColors(unsigned char)+0x20>
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	08 95       	ret

0000253a <progPalette(unsigned int, unsigned char, unsigned char)>:
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	8c 01       	movw	r16, r24
    2544:	c6 2f       	mov	r28, r22
    2546:	d4 2f       	mov	r29, r20
    2548:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    254c:	81 11       	cpse	r24, r1
    254e:	43 c0       	rjmp	.+134    	; 0x25d6 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	8c ec       	ldi	r24, 0xCC	; 204
    2554:	90 e1       	ldi	r25, 0x10	; 16
    2556:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    255a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    255e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    2562:	d0 93 b8 0a 	sts	0x0AB8, r29	; 0x800ab8 <nextSongPart>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    256c:	cc 30       	cpi	r28, 0x0C	; 12
    256e:	08 f0       	brcs	.+2      	; 0x2572 <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    2570:	32 c0       	rjmp	.+100    	; 0x25d6 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2572:	ec 2f       	mov	r30, r28
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	e1 54       	subi	r30, 0x41	; 65
    2578:	fd 4e       	sbci	r31, 0xED	; 237
    257a:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    257e:	cb 12       	cpse	r12, r27
    2580:	d2 12       	cpse	r13, r18
    2582:	d9 12       	cpse	r13, r25
    2584:	dc 12       	cpse	r13, r28
    2586:	e4 12       	cpse	r14, r20
    2588:	e6 12       	cpse	r14, r22
    258a:	03 13       	cpse	r16, r19
    258c:	05 13       	cpse	r16, r21
    258e:	08 13       	cpse	r16, r24
    2590:	0b 13       	cpse	r16, r27
    2592:	0e 13       	cpse	r16, r30
    2594:	11 13       	cpse	r17, r17
    2596:	68 eb       	ldi	r22, 0xB8	; 184
    2598:	76 e0       	ldi	r23, 0x06	; 6
    259a:	88 e7       	ldi	r24, 0x78	; 120
    259c:	9a e0       	ldi	r25, 0x0A	; 10
    259e:	0e 94 bc 05 	call	0xb78	; 0xb78 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    25a2:	0b c0       	rjmp	.+22     	; 0x25ba <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    25a4:	68 e7       	ldi	r22, 0x78	; 120
    25a6:	76 e0       	ldi	r23, 0x06	; 6
    25a8:	88 e7       	ldi	r24, 0x78	; 120
    25aa:	9a e0       	ldi	r25, 0x0A	; 10
    25ac:	0e 94 bc 05 	call	0xb78	; 0xb78 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <progPalette(unsigned int, unsigned char, unsigned char)+0x94>
    25b2:	68 e7       	ldi	r22, 0x78	; 120
    25b4:	76 e0       	ldi	r23, 0x06	; 6
    25b6:	f1 cf       	rjmp	.-30     	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    25b8:	1d df       	rcall	.-454    	; 0x23f4 <SetupPurpleAndGreenPalette()>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <currentBlending+0x1>
    25c2:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <currentBlending>
    25c6:	07 c0       	rjmp	.+14     	; 0x25d6 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    25c8:	9f de       	rcall	.-706    	; 0x2308 <SetupTotallyRandomPalette()>
    25ca:	f7 cf       	rjmp	.-18     	; 0x25ba <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    25cc:	ec de       	rcall	.-552    	; 0x23a6 <SetupBlackAndWhiteStripedPalette()>
    25ce:	10 92 77 0a 	sts	0x0A77, r1	; 0x800a77 <currentBlending+0x1>
    25d2:	10 92 76 0a 	sts	0x0A76, r1	; 0x800a76 <currentBlending>
    25d6:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    25da:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	89 3e       	cpi	r24, 0xE9	; 233
    25e2:	23 e0       	ldi	r18, 0x03	; 3
    25e4:	92 07       	cpc	r25, r18
    25e6:	04 f5       	brge	.+64     	; 0x2628 <progPalette(unsigned int, unsigned char, unsigned char)+0xee>
    25e8:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    25ec:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    25f0:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    25f4:	6a df       	rcall	.-300    	; 0x24ca <FillLEDsFromPaletteColors(unsigned char)>
    25f6:	8c ec       	ldi	r24, 0xCC	; 204
    25f8:	90 e1       	ldi	r25, 0x10	; 16
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	0c 94 d7 05 	jmp	0xbae	; 0xbae <CFastLED::show()>
    2606:	cf de       	rcall	.-610    	; 0x23a6 <SetupBlackAndWhiteStripedPalette()>
    2608:	d8 cf       	rjmp	.-80     	; 0x25ba <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    260a:	68 ef       	ldi	r22, 0xF8	; 248
    260c:	76 e0       	ldi	r23, 0x06	; 6
    260e:	c5 cf       	rjmp	.-118    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2610:	68 e3       	ldi	r22, 0x38	; 56
    2612:	76 e0       	ldi	r23, 0x06	; 6
    2614:	c2 cf       	rjmp	.-124    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2616:	6f ec       	ldi	r22, 0xCF	; 207
    2618:	75 e0       	ldi	r23, 0x05	; 5
    261a:	c6 cf       	rjmp	.-116    	; 0x25a8 <progPalette(unsigned int, unsigned char, unsigned char)+0x6e>
    261c:	6f ec       	ldi	r22, 0xCF	; 207
    261e:	75 e0       	ldi	r23, 0x05	; 5
    2620:	bc cf       	rjmp	.-136    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2622:	68 e9       	ldi	r22, 0x98	; 152
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	b9 cf       	rjmp	.-142    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2628:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    262c:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2630:	df cf       	rjmp	.-66     	; 0x25f0 <progPalette(unsigned int, unsigned char, unsigned char)+0xb6>

00002632 <getMatrixColor(int)>:
    2632:	dc 01       	movw	r26, r24
    2634:	60 31       	cpi	r22, 0x10	; 16
    2636:	71 05       	cpc	r23, r1
    2638:	08 f0       	brcs	.+2      	; 0x263c <getMatrixColor(int)+0xa>
    263a:	52 c0       	rjmp	.+164    	; 0x26e0 <getMatrixColor(int)+0xae>
    263c:	fb 01       	movw	r30, r22
    263e:	ed 5d       	subi	r30, 0xDD	; 221
    2640:	fc 4e       	sbci	r31, 0xEC	; 236
    2642:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    2646:	70 13       	cpse	r23, r16
    2648:	33 13       	cpse	r19, r19
    264a:	33 13       	cpse	r19, r19
    264c:	3e 13       	cpse	r19, r30
    264e:	42 13       	cpse	r20, r18
    2650:	46 13       	cpse	r20, r22
    2652:	4a 13       	cpse	r20, r26
    2654:	4e 13       	cpse	r20, r30
    2656:	52 13       	cpse	r21, r18
    2658:	56 13       	cpse	r21, r22
    265a:	5a 13       	cpse	r21, r26
    265c:	5e 13       	cpse	r21, r30
    265e:	62 13       	cpse	r22, r18
    2660:	64 13       	cpse	r22, r20
    2662:	68 13       	cpse	r22, r24
    2664:	6a 13       	cpse	r22, r26
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	8c 93       	st	X, r24
    266a:	99 e1       	ldi	r25, 0x19	; 25
    266c:	11 96       	adiw	r26, 0x01	; 1
    266e:	9c 93       	st	X, r25
    2670:	11 97       	sbiw	r26, 0x01	; 1
    2672:	12 96       	adiw	r26, 0x02	; 2
    2674:	8c 93       	st	X, r24
    2676:	12 97       	sbiw	r26, 0x02	; 2
    2678:	cd 01       	movw	r24, r26
    267a:	08 95       	ret
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	8c 93       	st	X, r24
    2680:	98 e2       	ldi	r25, 0x28	; 40
    2682:	f4 cf       	rjmp	.-24     	; 0x266c <getMatrixColor(int)+0x3a>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	8c 93       	st	X, r24
    2688:	90 e5       	ldi	r25, 0x50	; 80
    268a:	f0 cf       	rjmp	.-32     	; 0x266c <getMatrixColor(int)+0x3a>
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	8c 93       	st	X, r24
    2690:	98 e7       	ldi	r25, 0x78	; 120
    2692:	ec cf       	rjmp	.-40     	; 0x266c <getMatrixColor(int)+0x3a>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	8c 93       	st	X, r24
    2698:	96 e9       	ldi	r25, 0x96	; 150
    269a:	e8 cf       	rjmp	.-48     	; 0x266c <getMatrixColor(int)+0x3a>
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	8c 93       	st	X, r24
    26a0:	98 ec       	ldi	r25, 0xC8	; 200
    26a2:	e4 cf       	rjmp	.-56     	; 0x266c <getMatrixColor(int)+0x3a>
    26a4:	85 e0       	ldi	r24, 0x05	; 5
    26a6:	8c 93       	st	X, r24
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	e0 cf       	rjmp	.-64     	; 0x266c <getMatrixColor(int)+0x3a>
    26ac:	8a e0       	ldi	r24, 0x0A	; 10
    26ae:	8c 93       	st	X, r24
    26b0:	94 eb       	ldi	r25, 0xB4	; 180
    26b2:	dc cf       	rjmp	.-72     	; 0x266c <getMatrixColor(int)+0x3a>
    26b4:	8a e0       	ldi	r24, 0x0A	; 10
    26b6:	8c 93       	st	X, r24
    26b8:	90 ea       	ldi	r25, 0xA0	; 160
    26ba:	d8 cf       	rjmp	.-80     	; 0x266c <getMatrixColor(int)+0x3a>
    26bc:	84 e1       	ldi	r24, 0x14	; 20
    26be:	8c 93       	st	X, r24
    26c0:	9c e8       	ldi	r25, 0x8C	; 140
    26c2:	d4 cf       	rjmp	.-88     	; 0x266c <getMatrixColor(int)+0x3a>
    26c4:	8e e1       	ldi	r24, 0x1E	; 30
    26c6:	e3 cf       	rjmp	.-58     	; 0x268e <getMatrixColor(int)+0x5c>
    26c8:	82 e3       	ldi	r24, 0x32	; 50
    26ca:	8c 93       	st	X, r24
    26cc:	94 e6       	ldi	r25, 0x64	; 100
    26ce:	ce cf       	rjmp	.-100    	; 0x266c <getMatrixColor(int)+0x3a>
    26d0:	84 e6       	ldi	r24, 0x64	; 100
    26d2:	e1 cf       	rjmp	.-62     	; 0x2696 <getMatrixColor(int)+0x64>
    26d4:	84 eb       	ldi	r24, 0xB4	; 180
    26d6:	8c 93       	st	X, r24
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	8c 93       	st	X, r24
    26dc:	11 97       	sbiw	r26, 0x01	; 1
    26de:	c9 cf       	rjmp	.-110    	; 0x2672 <getMatrixColor(int)+0x40>
    26e0:	1c 92       	st	X, r1
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	1c 92       	st	X, r1
    26e6:	11 97       	sbiw	r26, 0x01	; 1
    26e8:	12 96       	adiw	r26, 0x02	; 2
    26ea:	1c 92       	st	X, r1
    26ec:	12 97       	sbiw	r26, 0x02	; 2
    26ee:	c4 cf       	rjmp	.-120    	; 0x2678 <getMatrixColor(int)+0x46>

000026f0 <progMatrixHorizontal(unsigned int, unsigned char)>:
    26f0:	cf 92       	push	r12
    26f2:	df 92       	push	r13
    26f4:	ef 92       	push	r14
    26f6:	ff 92       	push	r15
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	00 d0       	rcall	.+0      	; 0x2702 <progMatrixHorizontal(unsigned int, unsigned char)+0x12>
    2702:	1f 92       	push	r1
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	7c 01       	movw	r14, r24
    270a:	16 2f       	mov	r17, r22
    270c:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    2710:	81 11       	cpse	r24, r1
    2712:	1e c0       	rjmp	.+60     	; 0x2750 <progMatrixHorizontal(unsigned int, unsigned char)+0x60>
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	8c ec       	ldi	r24, 0xCC	; 204
    2718:	90 e1       	ldi	r25, 0x10	; 16
    271a:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    271e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    2722:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    2726:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    2730:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    2734:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2738:	8b e1       	ldi	r24, 0x1B	; 27
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <progMatrixZaehler+0x1>
    2740:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <progMatrixZaehler>
    2744:	84 e6       	ldi	r24, 0x64	; 100
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <millisCounterTimer+0x1>
    274c:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <millisCounterTimer>
    2750:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    2754:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2758:	84 36       	cpi	r24, 0x64	; 100
    275a:	91 05       	cpc	r25, r1
    275c:	08 f4       	brcc	.+2      	; 0x2760 <progMatrixHorizontal(unsigned int, unsigned char)+0x70>
    275e:	ce c3       	rjmp	.+1948   	; 0x2efc <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>
    2760:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    2764:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2768:	e0 90 b0 0a 	lds	r14, 0x0AB0	; 0x800ab0 <zaehler>
    276c:	f0 90 b1 0a 	lds	r15, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2770:	00 e1       	ldi	r16, 0x10	; 16
    2772:	10 e0       	ldi	r17, 0x00	; 0
    2774:	f7 fc       	sbrc	r15, 7
    2776:	1c c0       	rjmp	.+56     	; 0x27b0 <progMatrixHorizontal(unsigned int, unsigned char)+0xc0>
    2778:	01 50       	subi	r16, 0x01	; 1
    277a:	11 09       	sbc	r17, r1
    277c:	02 30       	cpi	r16, 0x02	; 2
    277e:	11 05       	cpc	r17, r1
    2780:	14 f4       	brge	.+4      	; 0x2786 <progMatrixHorizontal(unsigned int, unsigned char)+0x96>
    2782:	10 e0       	ldi	r17, 0x00	; 0
    2784:	00 e0       	ldi	r16, 0x00	; 0
    2786:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    278a:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    278e:	b8 01       	movw	r22, r16
    2790:	ce 01       	movw	r24, r28
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	4e df       	rcall	.-356    	; 0x2632 <getMatrixColor(int)>
    2796:	9e 01       	movw	r18, r28
    2798:	2f 5f       	subi	r18, 0xFF	; 255
    279a:	3f 4f       	sbci	r19, 0xFF	; 255
    279c:	a7 01       	movw	r20, r14
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	c6 01       	movw	r24, r12
    27a4:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	e8 1a       	sub	r14, r24
    27ac:	f1 08       	sbc	r15, r1
    27ae:	e2 cf       	rjmp	.-60     	; 0x2774 <progMatrixHorizontal(unsigned int, unsigned char)+0x84>
    27b0:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    27b4:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    27b8:	04 51       	subi	r16, 0x14	; 20
    27ba:	11 09       	sbc	r17, r1
    27bc:	60 e1       	ldi	r22, 0x10	; 16
    27be:	e6 2e       	mov	r14, r22
    27c0:	f1 2c       	mov	r15, r1
    27c2:	0c 3e       	cpi	r16, 0xEC	; 236
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	18 07       	cpc	r17, r24
    27c8:	ec f0       	brlt	.+58     	; 0x2804 <progMatrixHorizontal(unsigned int, unsigned char)+0x114>
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	e8 1a       	sub	r14, r24
    27ce:	f1 08       	sbc	r15, r1
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	e8 16       	cp	r14, r24
    27d4:	f1 04       	cpc	r15, r1
    27d6:	14 f4       	brge	.+4      	; 0x27dc <progMatrixHorizontal(unsigned int, unsigned char)+0xec>
    27d8:	f1 2c       	mov	r15, r1
    27da:	e1 2c       	mov	r14, r1
    27dc:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    27e0:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    27e4:	b7 01       	movw	r22, r14
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	23 df       	rcall	.-442    	; 0x2632 <getMatrixColor(int)>
    27ec:	9e 01       	movw	r18, r28
    27ee:	2f 5f       	subi	r18, 0xFF	; 255
    27f0:	3f 4f       	sbci	r19, 0xFF	; 255
    27f2:	a8 01       	movw	r20, r16
    27f4:	62 e0       	ldi	r22, 0x02	; 2
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	c6 01       	movw	r24, r12
    27fa:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    27fe:	01 50       	subi	r16, 0x01	; 1
    2800:	11 09       	sbc	r17, r1
    2802:	df cf       	rjmp	.-66     	; 0x27c2 <progMatrixHorizontal(unsigned int, unsigned char)+0xd2>
    2804:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2808:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    280c:	0f 50       	subi	r16, 0x0F	; 15
    280e:	11 09       	sbc	r17, r1
    2810:	50 e1       	ldi	r21, 0x10	; 16
    2812:	e5 2e       	mov	r14, r21
    2814:	f1 2c       	mov	r15, r1
    2816:	01 3f       	cpi	r16, 0xF1	; 241
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	18 07       	cpc	r17, r24
    281c:	ec f0       	brlt	.+58     	; 0x2858 <progMatrixHorizontal(unsigned int, unsigned char)+0x168>
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	e8 1a       	sub	r14, r24
    2822:	f1 08       	sbc	r15, r1
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	e8 16       	cp	r14, r24
    2828:	f1 04       	cpc	r15, r1
    282a:	14 f4       	brge	.+4      	; 0x2830 <progMatrixHorizontal(unsigned int, unsigned char)+0x140>
    282c:	f1 2c       	mov	r15, r1
    282e:	e1 2c       	mov	r14, r1
    2830:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2834:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2838:	b7 01       	movw	r22, r14
    283a:	ce 01       	movw	r24, r28
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	f9 de       	rcall	.-526    	; 0x2632 <getMatrixColor(int)>
    2840:	9e 01       	movw	r18, r28
    2842:	2f 5f       	subi	r18, 0xFF	; 255
    2844:	3f 4f       	sbci	r19, 0xFF	; 255
    2846:	a8 01       	movw	r20, r16
    2848:	64 e0       	ldi	r22, 0x04	; 4
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	c6 01       	movw	r24, r12
    284e:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2852:	01 50       	subi	r16, 0x01	; 1
    2854:	11 09       	sbc	r17, r1
    2856:	df cf       	rjmp	.-66     	; 0x2816 <progMatrixHorizontal(unsigned int, unsigned char)+0x126>
    2858:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    285c:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2860:	08 50       	subi	r16, 0x08	; 8
    2862:	11 09       	sbc	r17, r1
    2864:	40 e1       	ldi	r20, 0x10	; 16
    2866:	e4 2e       	mov	r14, r20
    2868:	f1 2c       	mov	r15, r1
    286a:	08 3f       	cpi	r16, 0xF8	; 248
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	18 07       	cpc	r17, r24
    2870:	ec f0       	brlt	.+58     	; 0x28ac <progMatrixHorizontal(unsigned int, unsigned char)+0x1bc>
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	e8 1a       	sub	r14, r24
    2876:	f1 08       	sbc	r15, r1
    2878:	82 e0       	ldi	r24, 0x02	; 2
    287a:	e8 16       	cp	r14, r24
    287c:	f1 04       	cpc	r15, r1
    287e:	14 f4       	brge	.+4      	; 0x2884 <progMatrixHorizontal(unsigned int, unsigned char)+0x194>
    2880:	f1 2c       	mov	r15, r1
    2882:	e1 2c       	mov	r14, r1
    2884:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2888:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    288c:	b7 01       	movw	r22, r14
    288e:	ce 01       	movw	r24, r28
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	cf de       	rcall	.-610    	; 0x2632 <getMatrixColor(int)>
    2894:	9e 01       	movw	r18, r28
    2896:	2f 5f       	subi	r18, 0xFF	; 255
    2898:	3f 4f       	sbci	r19, 0xFF	; 255
    289a:	a8 01       	movw	r20, r16
    289c:	66 e0       	ldi	r22, 0x06	; 6
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	c6 01       	movw	r24, r12
    28a2:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    28a6:	01 50       	subi	r16, 0x01	; 1
    28a8:	11 09       	sbc	r17, r1
    28aa:	df cf       	rjmp	.-66     	; 0x286a <progMatrixHorizontal(unsigned int, unsigned char)+0x17a>
    28ac:	e0 90 b0 0a 	lds	r14, 0x0AB0	; 0x800ab0 <zaehler>
    28b0:	f0 90 b1 0a 	lds	r15, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    28b4:	00 e1       	ldi	r16, 0x10	; 16
    28b6:	10 e0       	ldi	r17, 0x00	; 0
    28b8:	f7 fc       	sbrc	r15, 7
    28ba:	1c c0       	rjmp	.+56     	; 0x28f4 <progMatrixHorizontal(unsigned int, unsigned char)+0x204>
    28bc:	01 50       	subi	r16, 0x01	; 1
    28be:	11 09       	sbc	r17, r1
    28c0:	02 30       	cpi	r16, 0x02	; 2
    28c2:	11 05       	cpc	r17, r1
    28c4:	14 f4       	brge	.+4      	; 0x28ca <progMatrixHorizontal(unsigned int, unsigned char)+0x1da>
    28c6:	10 e0       	ldi	r17, 0x00	; 0
    28c8:	00 e0       	ldi	r16, 0x00	; 0
    28ca:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    28ce:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    28d2:	b8 01       	movw	r22, r16
    28d4:	ce 01       	movw	r24, r28
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	ac de       	rcall	.-680    	; 0x2632 <getMatrixColor(int)>
    28da:	9e 01       	movw	r18, r28
    28dc:	2f 5f       	subi	r18, 0xFF	; 255
    28de:	3f 4f       	sbci	r19, 0xFF	; 255
    28e0:	a7 01       	movw	r20, r14
    28e2:	68 e0       	ldi	r22, 0x08	; 8
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	c6 01       	movw	r24, r12
    28e8:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	e8 1a       	sub	r14, r24
    28f0:	f1 08       	sbc	r15, r1
    28f2:	e2 cf       	rjmp	.-60     	; 0x28b8 <progMatrixHorizontal(unsigned int, unsigned char)+0x1c8>
    28f4:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    28f8:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    28fc:	0e 50       	subi	r16, 0x0E	; 14
    28fe:	11 09       	sbc	r17, r1
    2900:	30 e1       	ldi	r19, 0x10	; 16
    2902:	e3 2e       	mov	r14, r19
    2904:	f1 2c       	mov	r15, r1
    2906:	02 3f       	cpi	r16, 0xF2	; 242
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	18 07       	cpc	r17, r24
    290c:	ec f0       	brlt	.+58     	; 0x2948 <progMatrixHorizontal(unsigned int, unsigned char)+0x258>
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	e8 1a       	sub	r14, r24
    2912:	f1 08       	sbc	r15, r1
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	e8 16       	cp	r14, r24
    2918:	f1 04       	cpc	r15, r1
    291a:	14 f4       	brge	.+4      	; 0x2920 <progMatrixHorizontal(unsigned int, unsigned char)+0x230>
    291c:	f1 2c       	mov	r15, r1
    291e:	e1 2c       	mov	r14, r1
    2920:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2924:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2928:	b7 01       	movw	r22, r14
    292a:	ce 01       	movw	r24, r28
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	81 de       	rcall	.-766    	; 0x2632 <getMatrixColor(int)>
    2930:	9e 01       	movw	r18, r28
    2932:	2f 5f       	subi	r18, 0xFF	; 255
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	a8 01       	movw	r20, r16
    2938:	6a e0       	ldi	r22, 0x0A	; 10
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	c6 01       	movw	r24, r12
    293e:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2942:	01 50       	subi	r16, 0x01	; 1
    2944:	11 09       	sbc	r17, r1
    2946:	df cf       	rjmp	.-66     	; 0x2906 <progMatrixHorizontal(unsigned int, unsigned char)+0x216>
    2948:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    294c:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2950:	05 51       	subi	r16, 0x15	; 21
    2952:	11 09       	sbc	r17, r1
    2954:	20 e1       	ldi	r18, 0x10	; 16
    2956:	e2 2e       	mov	r14, r18
    2958:	f1 2c       	mov	r15, r1
    295a:	0b 3e       	cpi	r16, 0xEB	; 235
    295c:	8f ef       	ldi	r24, 0xFF	; 255
    295e:	18 07       	cpc	r17, r24
    2960:	ec f0       	brlt	.+58     	; 0x299c <progMatrixHorizontal(unsigned int, unsigned char)+0x2ac>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	e8 1a       	sub	r14, r24
    2966:	f1 08       	sbc	r15, r1
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	e8 16       	cp	r14, r24
    296c:	f1 04       	cpc	r15, r1
    296e:	14 f4       	brge	.+4      	; 0x2974 <progMatrixHorizontal(unsigned int, unsigned char)+0x284>
    2970:	f1 2c       	mov	r15, r1
    2972:	e1 2c       	mov	r14, r1
    2974:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2978:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    297c:	b7 01       	movw	r22, r14
    297e:	ce 01       	movw	r24, r28
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	57 de       	rcall	.-850    	; 0x2632 <getMatrixColor(int)>
    2984:	9e 01       	movw	r18, r28
    2986:	2f 5f       	subi	r18, 0xFF	; 255
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
    298a:	a8 01       	movw	r20, r16
    298c:	6c e0       	ldi	r22, 0x0C	; 12
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	c6 01       	movw	r24, r12
    2992:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2996:	01 50       	subi	r16, 0x01	; 1
    2998:	11 09       	sbc	r17, r1
    299a:	df cf       	rjmp	.-66     	; 0x295a <progMatrixHorizontal(unsigned int, unsigned char)+0x26a>
    299c:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    29a0:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    29a4:	09 50       	subi	r16, 0x09	; 9
    29a6:	11 09       	sbc	r17, r1
    29a8:	90 e1       	ldi	r25, 0x10	; 16
    29aa:	e9 2e       	mov	r14, r25
    29ac:	f1 2c       	mov	r15, r1
    29ae:	07 3f       	cpi	r16, 0xF7	; 247
    29b0:	8f ef       	ldi	r24, 0xFF	; 255
    29b2:	18 07       	cpc	r17, r24
    29b4:	ec f0       	brlt	.+58     	; 0x29f0 <progMatrixHorizontal(unsigned int, unsigned char)+0x300>
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	e8 1a       	sub	r14, r24
    29ba:	f1 08       	sbc	r15, r1
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	e8 16       	cp	r14, r24
    29c0:	f1 04       	cpc	r15, r1
    29c2:	14 f4       	brge	.+4      	; 0x29c8 <progMatrixHorizontal(unsigned int, unsigned char)+0x2d8>
    29c4:	f1 2c       	mov	r15, r1
    29c6:	e1 2c       	mov	r14, r1
    29c8:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    29cc:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    29d0:	b7 01       	movw	r22, r14
    29d2:	ce 01       	movw	r24, r28
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	2d de       	rcall	.-934    	; 0x2632 <getMatrixColor(int)>
    29d8:	9e 01       	movw	r18, r28
    29da:	2f 5f       	subi	r18, 0xFF	; 255
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
    29de:	a8 01       	movw	r20, r16
    29e0:	6e e0       	ldi	r22, 0x0E	; 14
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	c6 01       	movw	r24, r12
    29e6:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    29ea:	01 50       	subi	r16, 0x01	; 1
    29ec:	11 09       	sbc	r17, r1
    29ee:	df cf       	rjmp	.-66     	; 0x29ae <progMatrixHorizontal(unsigned int, unsigned char)+0x2be>
    29f0:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    29f4:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    29f8:	01 50       	subi	r16, 0x01	; 1
    29fa:	11 09       	sbc	r17, r1
    29fc:	80 e1       	ldi	r24, 0x10	; 16
    29fe:	e8 2e       	mov	r14, r24
    2a00:	f1 2c       	mov	r15, r1
    2a02:	0f 3f       	cpi	r16, 0xFF	; 255
    2a04:	8f ef       	ldi	r24, 0xFF	; 255
    2a06:	18 07       	cpc	r17, r24
    2a08:	ec f0       	brlt	.+58     	; 0x2a44 <progMatrixHorizontal(unsigned int, unsigned char)+0x354>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	e8 1a       	sub	r14, r24
    2a0e:	f1 08       	sbc	r15, r1
    2a10:	82 e0       	ldi	r24, 0x02	; 2
    2a12:	e8 16       	cp	r14, r24
    2a14:	f1 04       	cpc	r15, r1
    2a16:	14 f4       	brge	.+4      	; 0x2a1c <progMatrixHorizontal(unsigned int, unsigned char)+0x32c>
    2a18:	f1 2c       	mov	r15, r1
    2a1a:	e1 2c       	mov	r14, r1
    2a1c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2a20:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2a24:	b7 01       	movw	r22, r14
    2a26:	ce 01       	movw	r24, r28
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	03 de       	rcall	.-1018   	; 0x2632 <getMatrixColor(int)>
    2a2c:	9e 01       	movw	r18, r28
    2a2e:	2f 5f       	subi	r18, 0xFF	; 255
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	a8 01       	movw	r20, r16
    2a34:	60 e1       	ldi	r22, 0x10	; 16
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c6 01       	movw	r24, r12
    2a3a:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a3e:	01 50       	subi	r16, 0x01	; 1
    2a40:	11 09       	sbc	r17, r1
    2a42:	df cf       	rjmp	.-66     	; 0x2a02 <progMatrixHorizontal(unsigned int, unsigned char)+0x312>
    2a44:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2a48:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2a4c:	00 51       	subi	r16, 0x10	; 16
    2a4e:	11 09       	sbc	r17, r1
    2a50:	b0 e1       	ldi	r27, 0x10	; 16
    2a52:	eb 2e       	mov	r14, r27
    2a54:	f1 2c       	mov	r15, r1
    2a56:	00 3f       	cpi	r16, 0xF0	; 240
    2a58:	8f ef       	ldi	r24, 0xFF	; 255
    2a5a:	18 07       	cpc	r17, r24
    2a5c:	ec f0       	brlt	.+58     	; 0x2a98 <progMatrixHorizontal(unsigned int, unsigned char)+0x3a8>
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	e8 1a       	sub	r14, r24
    2a62:	f1 08       	sbc	r15, r1
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	e8 16       	cp	r14, r24
    2a68:	f1 04       	cpc	r15, r1
    2a6a:	14 f4       	brge	.+4      	; 0x2a70 <progMatrixHorizontal(unsigned int, unsigned char)+0x380>
    2a6c:	f1 2c       	mov	r15, r1
    2a6e:	e1 2c       	mov	r14, r1
    2a70:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2a74:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2a78:	b7 01       	movw	r22, r14
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	d9 dd       	rcall	.-1102   	; 0x2632 <getMatrixColor(int)>
    2a80:	9e 01       	movw	r18, r28
    2a82:	2f 5f       	subi	r18, 0xFF	; 255
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	a8 01       	movw	r20, r16
    2a88:	62 e1       	ldi	r22, 0x12	; 18
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	c6 01       	movw	r24, r12
    2a8e:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a92:	01 50       	subi	r16, 0x01	; 1
    2a94:	11 09       	sbc	r17, r1
    2a96:	df cf       	rjmp	.-66     	; 0x2a56 <progMatrixHorizontal(unsigned int, unsigned char)+0x366>
    2a98:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2a9c:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2aa0:	07 51       	subi	r16, 0x17	; 23
    2aa2:	11 09       	sbc	r17, r1
    2aa4:	a0 e1       	ldi	r26, 0x10	; 16
    2aa6:	ea 2e       	mov	r14, r26
    2aa8:	f1 2c       	mov	r15, r1
    2aaa:	09 3e       	cpi	r16, 0xE9	; 233
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	18 07       	cpc	r17, r24
    2ab0:	ec f0       	brlt	.+58     	; 0x2aec <progMatrixHorizontal(unsigned int, unsigned char)+0x3fc>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	e8 1a       	sub	r14, r24
    2ab6:	f1 08       	sbc	r15, r1
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	e8 16       	cp	r14, r24
    2abc:	f1 04       	cpc	r15, r1
    2abe:	14 f4       	brge	.+4      	; 0x2ac4 <progMatrixHorizontal(unsigned int, unsigned char)+0x3d4>
    2ac0:	f1 2c       	mov	r15, r1
    2ac2:	e1 2c       	mov	r14, r1
    2ac4:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2ac8:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2acc:	b7 01       	movw	r22, r14
    2ace:	ce 01       	movw	r24, r28
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	af dd       	rcall	.-1186   	; 0x2632 <getMatrixColor(int)>
    2ad4:	9e 01       	movw	r18, r28
    2ad6:	2f 5f       	subi	r18, 0xFF	; 255
    2ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ada:	a8 01       	movw	r20, r16
    2adc:	64 e1       	ldi	r22, 0x14	; 20
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	c6 01       	movw	r24, r12
    2ae2:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ae6:	01 50       	subi	r16, 0x01	; 1
    2ae8:	11 09       	sbc	r17, r1
    2aea:	df cf       	rjmp	.-66     	; 0x2aaa <progMatrixHorizontal(unsigned int, unsigned char)+0x3ba>
    2aec:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2af0:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2af4:	0b 50       	subi	r16, 0x0B	; 11
    2af6:	11 09       	sbc	r17, r1
    2af8:	f0 e1       	ldi	r31, 0x10	; 16
    2afa:	ef 2e       	mov	r14, r31
    2afc:	f1 2c       	mov	r15, r1
    2afe:	05 3f       	cpi	r16, 0xF5	; 245
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	18 07       	cpc	r17, r24
    2b04:	ec f0       	brlt	.+58     	; 0x2b40 <progMatrixHorizontal(unsigned int, unsigned char)+0x450>
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	e8 1a       	sub	r14, r24
    2b0a:	f1 08       	sbc	r15, r1
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	e8 16       	cp	r14, r24
    2b10:	f1 04       	cpc	r15, r1
    2b12:	14 f4       	brge	.+4      	; 0x2b18 <progMatrixHorizontal(unsigned int, unsigned char)+0x428>
    2b14:	f1 2c       	mov	r15, r1
    2b16:	e1 2c       	mov	r14, r1
    2b18:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2b1c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2b20:	b7 01       	movw	r22, r14
    2b22:	ce 01       	movw	r24, r28
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	85 dd       	rcall	.-1270   	; 0x2632 <getMatrixColor(int)>
    2b28:	9e 01       	movw	r18, r28
    2b2a:	2f 5f       	subi	r18, 0xFF	; 255
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2e:	a8 01       	movw	r20, r16
    2b30:	66 e1       	ldi	r22, 0x16	; 22
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	c6 01       	movw	r24, r12
    2b36:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b3a:	01 50       	subi	r16, 0x01	; 1
    2b3c:	11 09       	sbc	r17, r1
    2b3e:	df cf       	rjmp	.-66     	; 0x2afe <progMatrixHorizontal(unsigned int, unsigned char)+0x40e>
    2b40:	e0 90 ae 0a 	lds	r14, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2b44:	f0 90 af 0a 	lds	r15, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2b48:	00 e1       	ldi	r16, 0x10	; 16
    2b4a:	10 e0       	ldi	r17, 0x00	; 0
    2b4c:	f7 fc       	sbrc	r15, 7
    2b4e:	1c c0       	rjmp	.+56     	; 0x2b88 <progMatrixHorizontal(unsigned int, unsigned char)+0x498>
    2b50:	01 50       	subi	r16, 0x01	; 1
    2b52:	11 09       	sbc	r17, r1
    2b54:	02 30       	cpi	r16, 0x02	; 2
    2b56:	11 05       	cpc	r17, r1
    2b58:	14 f4       	brge	.+4      	; 0x2b5e <progMatrixHorizontal(unsigned int, unsigned char)+0x46e>
    2b5a:	10 e0       	ldi	r17, 0x00	; 0
    2b5c:	00 e0       	ldi	r16, 0x00	; 0
    2b5e:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2b62:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2b66:	b8 01       	movw	r22, r16
    2b68:	ce 01       	movw	r24, r28
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	62 dd       	rcall	.-1340   	; 0x2632 <getMatrixColor(int)>
    2b6e:	9e 01       	movw	r18, r28
    2b70:	2f 5f       	subi	r18, 0xFF	; 255
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	a7 01       	movw	r20, r14
    2b76:	61 e0       	ldi	r22, 0x01	; 1
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	c6 01       	movw	r24, r12
    2b7c:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	e8 1a       	sub	r14, r24
    2b84:	f1 08       	sbc	r15, r1
    2b86:	e2 cf       	rjmp	.-60     	; 0x2b4c <progMatrixHorizontal(unsigned int, unsigned char)+0x45c>
    2b88:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2b8c:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2b90:	04 51       	subi	r16, 0x14	; 20
    2b92:	11 09       	sbc	r17, r1
    2b94:	e0 e1       	ldi	r30, 0x10	; 16
    2b96:	ee 2e       	mov	r14, r30
    2b98:	f1 2c       	mov	r15, r1
    2b9a:	0c 3e       	cpi	r16, 0xEC	; 236
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	18 07       	cpc	r17, r24
    2ba0:	ec f0       	brlt	.+58     	; 0x2bdc <progMatrixHorizontal(unsigned int, unsigned char)+0x4ec>
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	e8 1a       	sub	r14, r24
    2ba6:	f1 08       	sbc	r15, r1
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	e8 16       	cp	r14, r24
    2bac:	f1 04       	cpc	r15, r1
    2bae:	14 f4       	brge	.+4      	; 0x2bb4 <progMatrixHorizontal(unsigned int, unsigned char)+0x4c4>
    2bb0:	f1 2c       	mov	r15, r1
    2bb2:	e1 2c       	mov	r14, r1
    2bb4:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2bb8:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2bbc:	b7 01       	movw	r22, r14
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	37 dd       	rcall	.-1426   	; 0x2632 <getMatrixColor(int)>
    2bc4:	9e 01       	movw	r18, r28
    2bc6:	2f 5f       	subi	r18, 0xFF	; 255
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	a8 01       	movw	r20, r16
    2bcc:	63 e0       	ldi	r22, 0x03	; 3
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	c6 01       	movw	r24, r12
    2bd2:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2bd6:	01 50       	subi	r16, 0x01	; 1
    2bd8:	11 09       	sbc	r17, r1
    2bda:	df cf       	rjmp	.-66     	; 0x2b9a <progMatrixHorizontal(unsigned int, unsigned char)+0x4aa>
    2bdc:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2be0:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2be4:	0f 50       	subi	r16, 0x0F	; 15
    2be6:	11 09       	sbc	r17, r1
    2be8:	70 e1       	ldi	r23, 0x10	; 16
    2bea:	e7 2e       	mov	r14, r23
    2bec:	f1 2c       	mov	r15, r1
    2bee:	01 3f       	cpi	r16, 0xF1	; 241
    2bf0:	8f ef       	ldi	r24, 0xFF	; 255
    2bf2:	18 07       	cpc	r17, r24
    2bf4:	ec f0       	brlt	.+58     	; 0x2c30 <progMatrixHorizontal(unsigned int, unsigned char)+0x540>
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	e8 1a       	sub	r14, r24
    2bfa:	f1 08       	sbc	r15, r1
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	e8 16       	cp	r14, r24
    2c00:	f1 04       	cpc	r15, r1
    2c02:	14 f4       	brge	.+4      	; 0x2c08 <progMatrixHorizontal(unsigned int, unsigned char)+0x518>
    2c04:	f1 2c       	mov	r15, r1
    2c06:	e1 2c       	mov	r14, r1
    2c08:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2c0c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2c10:	b7 01       	movw	r22, r14
    2c12:	ce 01       	movw	r24, r28
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	0d dd       	rcall	.-1510   	; 0x2632 <getMatrixColor(int)>
    2c18:	9e 01       	movw	r18, r28
    2c1a:	2f 5f       	subi	r18, 0xFF	; 255
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	a8 01       	movw	r20, r16
    2c20:	65 e0       	ldi	r22, 0x05	; 5
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	c6 01       	movw	r24, r12
    2c26:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c2a:	01 50       	subi	r16, 0x01	; 1
    2c2c:	11 09       	sbc	r17, r1
    2c2e:	df cf       	rjmp	.-66     	; 0x2bee <progMatrixHorizontal(unsigned int, unsigned char)+0x4fe>
    2c30:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2c34:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2c38:	08 50       	subi	r16, 0x08	; 8
    2c3a:	11 09       	sbc	r17, r1
    2c3c:	60 e1       	ldi	r22, 0x10	; 16
    2c3e:	e6 2e       	mov	r14, r22
    2c40:	f1 2c       	mov	r15, r1
    2c42:	08 3f       	cpi	r16, 0xF8	; 248
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	18 07       	cpc	r17, r24
    2c48:	ec f0       	brlt	.+58     	; 0x2c84 <progMatrixHorizontal(unsigned int, unsigned char)+0x594>
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	e8 1a       	sub	r14, r24
    2c4e:	f1 08       	sbc	r15, r1
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	e8 16       	cp	r14, r24
    2c54:	f1 04       	cpc	r15, r1
    2c56:	14 f4       	brge	.+4      	; 0x2c5c <progMatrixHorizontal(unsigned int, unsigned char)+0x56c>
    2c58:	f1 2c       	mov	r15, r1
    2c5a:	e1 2c       	mov	r14, r1
    2c5c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2c60:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2c64:	b7 01       	movw	r22, r14
    2c66:	ce 01       	movw	r24, r28
    2c68:	01 96       	adiw	r24, 0x01	; 1
    2c6a:	e3 dc       	rcall	.-1594   	; 0x2632 <getMatrixColor(int)>
    2c6c:	9e 01       	movw	r18, r28
    2c6e:	2f 5f       	subi	r18, 0xFF	; 255
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	a8 01       	movw	r20, r16
    2c74:	67 e0       	ldi	r22, 0x07	; 7
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	c6 01       	movw	r24, r12
    2c7a:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c7e:	01 50       	subi	r16, 0x01	; 1
    2c80:	11 09       	sbc	r17, r1
    2c82:	df cf       	rjmp	.-66     	; 0x2c42 <progMatrixHorizontal(unsigned int, unsigned char)+0x552>
    2c84:	e0 90 ae 0a 	lds	r14, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2c88:	f0 90 af 0a 	lds	r15, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2c8c:	00 e1       	ldi	r16, 0x10	; 16
    2c8e:	10 e0       	ldi	r17, 0x00	; 0
    2c90:	f7 fc       	sbrc	r15, 7
    2c92:	1c c0       	rjmp	.+56     	; 0x2ccc <progMatrixHorizontal(unsigned int, unsigned char)+0x5dc>
    2c94:	01 50       	subi	r16, 0x01	; 1
    2c96:	11 09       	sbc	r17, r1
    2c98:	02 30       	cpi	r16, 0x02	; 2
    2c9a:	11 05       	cpc	r17, r1
    2c9c:	14 f4       	brge	.+4      	; 0x2ca2 <progMatrixHorizontal(unsigned int, unsigned char)+0x5b2>
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2ca6:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2caa:	b8 01       	movw	r22, r16
    2cac:	ce 01       	movw	r24, r28
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	c0 dc       	rcall	.-1664   	; 0x2632 <getMatrixColor(int)>
    2cb2:	9e 01       	movw	r18, r28
    2cb4:	2f 5f       	subi	r18, 0xFF	; 255
    2cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb8:	a7 01       	movw	r20, r14
    2cba:	69 e0       	ldi	r22, 0x09	; 9
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	c6 01       	movw	r24, r12
    2cc0:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	e8 1a       	sub	r14, r24
    2cc8:	f1 08       	sbc	r15, r1
    2cca:	e2 cf       	rjmp	.-60     	; 0x2c90 <progMatrixHorizontal(unsigned int, unsigned char)+0x5a0>
    2ccc:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2cd0:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2cd4:	0e 50       	subi	r16, 0x0E	; 14
    2cd6:	11 09       	sbc	r17, r1
    2cd8:	50 e1       	ldi	r21, 0x10	; 16
    2cda:	e5 2e       	mov	r14, r21
    2cdc:	f1 2c       	mov	r15, r1
    2cde:	02 3f       	cpi	r16, 0xF2	; 242
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	18 07       	cpc	r17, r24
    2ce4:	ec f0       	brlt	.+58     	; 0x2d20 <progMatrixHorizontal(unsigned int, unsigned char)+0x630>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	e8 1a       	sub	r14, r24
    2cea:	f1 08       	sbc	r15, r1
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	e8 16       	cp	r14, r24
    2cf0:	f1 04       	cpc	r15, r1
    2cf2:	14 f4       	brge	.+4      	; 0x2cf8 <progMatrixHorizontal(unsigned int, unsigned char)+0x608>
    2cf4:	f1 2c       	mov	r15, r1
    2cf6:	e1 2c       	mov	r14, r1
    2cf8:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2cfc:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2d00:	b7 01       	movw	r22, r14
    2d02:	ce 01       	movw	r24, r28
    2d04:	01 96       	adiw	r24, 0x01	; 1
    2d06:	95 dc       	rcall	.-1750   	; 0x2632 <getMatrixColor(int)>
    2d08:	9e 01       	movw	r18, r28
    2d0a:	2f 5f       	subi	r18, 0xFF	; 255
    2d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0e:	a8 01       	movw	r20, r16
    2d10:	6b e0       	ldi	r22, 0x0B	; 11
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	c6 01       	movw	r24, r12
    2d16:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2d1a:	01 50       	subi	r16, 0x01	; 1
    2d1c:	11 09       	sbc	r17, r1
    2d1e:	df cf       	rjmp	.-66     	; 0x2cde <progMatrixHorizontal(unsigned int, unsigned char)+0x5ee>
    2d20:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2d24:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2d28:	05 51       	subi	r16, 0x15	; 21
    2d2a:	11 09       	sbc	r17, r1
    2d2c:	40 e1       	ldi	r20, 0x10	; 16
    2d2e:	e4 2e       	mov	r14, r20
    2d30:	f1 2c       	mov	r15, r1
    2d32:	0b 3e       	cpi	r16, 0xEB	; 235
    2d34:	8f ef       	ldi	r24, 0xFF	; 255
    2d36:	18 07       	cpc	r17, r24
    2d38:	ec f0       	brlt	.+58     	; 0x2d74 <progMatrixHorizontal(unsigned int, unsigned char)+0x684>
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	e8 1a       	sub	r14, r24
    2d3e:	f1 08       	sbc	r15, r1
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	e8 16       	cp	r14, r24
    2d44:	f1 04       	cpc	r15, r1
    2d46:	14 f4       	brge	.+4      	; 0x2d4c <progMatrixHorizontal(unsigned int, unsigned char)+0x65c>
    2d48:	f1 2c       	mov	r15, r1
    2d4a:	e1 2c       	mov	r14, r1
    2d4c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2d50:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2d54:	b7 01       	movw	r22, r14
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	6b dc       	rcall	.-1834   	; 0x2632 <getMatrixColor(int)>
    2d5c:	9e 01       	movw	r18, r28
    2d5e:	2f 5f       	subi	r18, 0xFF	; 255
    2d60:	3f 4f       	sbci	r19, 0xFF	; 255
    2d62:	a8 01       	movw	r20, r16
    2d64:	6d e0       	ldi	r22, 0x0D	; 13
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	c6 01       	movw	r24, r12
    2d6a:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2d6e:	01 50       	subi	r16, 0x01	; 1
    2d70:	11 09       	sbc	r17, r1
    2d72:	df cf       	rjmp	.-66     	; 0x2d32 <progMatrixHorizontal(unsigned int, unsigned char)+0x642>
    2d74:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2d78:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2d7c:	09 50       	subi	r16, 0x09	; 9
    2d7e:	11 09       	sbc	r17, r1
    2d80:	30 e1       	ldi	r19, 0x10	; 16
    2d82:	e3 2e       	mov	r14, r19
    2d84:	f1 2c       	mov	r15, r1
    2d86:	07 3f       	cpi	r16, 0xF7	; 247
    2d88:	8f ef       	ldi	r24, 0xFF	; 255
    2d8a:	18 07       	cpc	r17, r24
    2d8c:	ec f0       	brlt	.+58     	; 0x2dc8 <progMatrixHorizontal(unsigned int, unsigned char)+0x6d8>
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	e8 1a       	sub	r14, r24
    2d92:	f1 08       	sbc	r15, r1
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	e8 16       	cp	r14, r24
    2d98:	f1 04       	cpc	r15, r1
    2d9a:	14 f4       	brge	.+4      	; 0x2da0 <progMatrixHorizontal(unsigned int, unsigned char)+0x6b0>
    2d9c:	f1 2c       	mov	r15, r1
    2d9e:	e1 2c       	mov	r14, r1
    2da0:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2da4:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2da8:	b7 01       	movw	r22, r14
    2daa:	ce 01       	movw	r24, r28
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	41 dc       	rcall	.-1918   	; 0x2632 <getMatrixColor(int)>
    2db0:	9e 01       	movw	r18, r28
    2db2:	2f 5f       	subi	r18, 0xFF	; 255
    2db4:	3f 4f       	sbci	r19, 0xFF	; 255
    2db6:	a8 01       	movw	r20, r16
    2db8:	6f e0       	ldi	r22, 0x0F	; 15
    2dba:	70 e0       	ldi	r23, 0x00	; 0
    2dbc:	c6 01       	movw	r24, r12
    2dbe:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2dc2:	01 50       	subi	r16, 0x01	; 1
    2dc4:	11 09       	sbc	r17, r1
    2dc6:	df cf       	rjmp	.-66     	; 0x2d86 <progMatrixHorizontal(unsigned int, unsigned char)+0x696>
    2dc8:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2dcc:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2dd0:	01 50       	subi	r16, 0x01	; 1
    2dd2:	11 09       	sbc	r17, r1
    2dd4:	20 e1       	ldi	r18, 0x10	; 16
    2dd6:	e2 2e       	mov	r14, r18
    2dd8:	f1 2c       	mov	r15, r1
    2dda:	0f 3f       	cpi	r16, 0xFF	; 255
    2ddc:	8f ef       	ldi	r24, 0xFF	; 255
    2dde:	18 07       	cpc	r17, r24
    2de0:	ec f0       	brlt	.+58     	; 0x2e1c <progMatrixHorizontal(unsigned int, unsigned char)+0x72c>
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	e8 1a       	sub	r14, r24
    2de6:	f1 08       	sbc	r15, r1
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	e8 16       	cp	r14, r24
    2dec:	f1 04       	cpc	r15, r1
    2dee:	14 f4       	brge	.+4      	; 0x2df4 <progMatrixHorizontal(unsigned int, unsigned char)+0x704>
    2df0:	f1 2c       	mov	r15, r1
    2df2:	e1 2c       	mov	r14, r1
    2df4:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2df8:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2dfc:	b7 01       	movw	r22, r14
    2dfe:	ce 01       	movw	r24, r28
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	17 dc       	rcall	.-2002   	; 0x2632 <getMatrixColor(int)>
    2e04:	9e 01       	movw	r18, r28
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	a8 01       	movw	r20, r16
    2e0c:	61 e1       	ldi	r22, 0x11	; 17
    2e0e:	70 e0       	ldi	r23, 0x00	; 0
    2e10:	c6 01       	movw	r24, r12
    2e12:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2e16:	01 50       	subi	r16, 0x01	; 1
    2e18:	11 09       	sbc	r17, r1
    2e1a:	df cf       	rjmp	.-66     	; 0x2dda <progMatrixHorizontal(unsigned int, unsigned char)+0x6ea>
    2e1c:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2e20:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2e24:	00 51       	subi	r16, 0x10	; 16
    2e26:	11 09       	sbc	r17, r1
    2e28:	90 e1       	ldi	r25, 0x10	; 16
    2e2a:	e9 2e       	mov	r14, r25
    2e2c:	f1 2c       	mov	r15, r1
    2e2e:	00 3f       	cpi	r16, 0xF0	; 240
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	18 07       	cpc	r17, r24
    2e34:	ec f0       	brlt	.+58     	; 0x2e70 <progMatrixHorizontal(unsigned int, unsigned char)+0x780>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	e8 1a       	sub	r14, r24
    2e3a:	f1 08       	sbc	r15, r1
    2e3c:	82 e0       	ldi	r24, 0x02	; 2
    2e3e:	e8 16       	cp	r14, r24
    2e40:	f1 04       	cpc	r15, r1
    2e42:	14 f4       	brge	.+4      	; 0x2e48 <progMatrixHorizontal(unsigned int, unsigned char)+0x758>
    2e44:	f1 2c       	mov	r15, r1
    2e46:	e1 2c       	mov	r14, r1
    2e48:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2e4c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2e50:	b7 01       	movw	r22, r14
    2e52:	ce 01       	movw	r24, r28
    2e54:	01 96       	adiw	r24, 0x01	; 1
    2e56:	ed db       	rcall	.-2086   	; 0x2632 <getMatrixColor(int)>
    2e58:	9e 01       	movw	r18, r28
    2e5a:	2f 5f       	subi	r18, 0xFF	; 255
    2e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5e:	a8 01       	movw	r20, r16
    2e60:	63 e1       	ldi	r22, 0x13	; 19
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	c6 01       	movw	r24, r12
    2e66:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2e6a:	01 50       	subi	r16, 0x01	; 1
    2e6c:	11 09       	sbc	r17, r1
    2e6e:	df cf       	rjmp	.-66     	; 0x2e2e <progMatrixHorizontal(unsigned int, unsigned char)+0x73e>
    2e70:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2e74:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2e78:	07 51       	subi	r16, 0x17	; 23
    2e7a:	11 09       	sbc	r17, r1
    2e7c:	80 e1       	ldi	r24, 0x10	; 16
    2e7e:	e8 2e       	mov	r14, r24
    2e80:	f1 2c       	mov	r15, r1
    2e82:	09 3e       	cpi	r16, 0xE9	; 233
    2e84:	8f ef       	ldi	r24, 0xFF	; 255
    2e86:	18 07       	cpc	r17, r24
    2e88:	ec f0       	brlt	.+58     	; 0x2ec4 <progMatrixHorizontal(unsigned int, unsigned char)+0x7d4>
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	e8 1a       	sub	r14, r24
    2e8e:	f1 08       	sbc	r15, r1
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	e8 16       	cp	r14, r24
    2e94:	f1 04       	cpc	r15, r1
    2e96:	14 f4       	brge	.+4      	; 0x2e9c <progMatrixHorizontal(unsigned int, unsigned char)+0x7ac>
    2e98:	f1 2c       	mov	r15, r1
    2e9a:	e1 2c       	mov	r14, r1
    2e9c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2ea0:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2ea4:	b7 01       	movw	r22, r14
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	c3 db       	rcall	.-2170   	; 0x2632 <getMatrixColor(int)>
    2eac:	9e 01       	movw	r18, r28
    2eae:	2f 5f       	subi	r18, 0xFF	; 255
    2eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb2:	a8 01       	movw	r20, r16
    2eb4:	65 e1       	ldi	r22, 0x15	; 21
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	c6 01       	movw	r24, r12
    2eba:	0e 94 c6 3c 	call	0x798c	; 0x798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ebe:	01 50       	subi	r16, 0x01	; 1
    2ec0:	11 09       	sbc	r17, r1
    2ec2:	df cf       	rjmp	.-66     	; 0x2e82 <progMatrixHorizontal(unsigned int, unsigned char)+0x792>
    2ec4:	8c ec       	ldi	r24, 0xCC	; 204
    2ec6:	90 e1       	ldi	r25, 0x10	; 16
    2ec8:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    2ecc:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    2ed0:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	89 33       	cpi	r24, 0x39	; 57
    2ed8:	91 05       	cpc	r25, r1
    2eda:	e4 f4       	brge	.+56     	; 0x2f14 <progMatrixHorizontal(unsigned int, unsigned char)+0x824>
    2edc:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    2ee0:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    2ee4:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2ee8:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	89 33       	cpi	r24, 0x39	; 57
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	ac f4       	brge	.+42     	; 0x2f1e <progMatrixHorizontal(unsigned int, unsigned char)+0x82e>
    2ef4:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <progMatrixZaehler+0x1>
    2ef8:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <progMatrixZaehler>
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	ff 90       	pop	r15
    2f0c:	ef 90       	pop	r14
    2f0e:	df 90       	pop	r13
    2f10:	cf 90       	pop	r12
    2f12:	08 95       	ret
    2f14:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    2f18:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2f1c:	e3 cf       	rjmp	.-58     	; 0x2ee4 <progMatrixHorizontal(unsigned int, unsigned char)+0x7f4>
    2f1e:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <progMatrixZaehler+0x1>
    2f22:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <progMatrixZaehler>
    2f26:	ea cf       	rjmp	.-44     	; 0x2efc <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>

00002f28 <setupInterrupt()>:
}

//====================================================

// interrupt every 25 ms so that fastLED can process uninterrupted (takes about 18 ms)
void setupInterrupt() {
    2f28:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    TCCR3A = 0;
    2f2c:	8b e0       	ldi	r24, 0x0B	; 11
    2f2e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    TCCR3B = 0x0B;      // WGM32 (CTC), Prescaler: // 0x0C = 256 // 0x0B = 64
    2f32:	8a e6       	ldi	r24, 0x6A	; 106
    2f34:	98 e1       	ldi	r25, 0x18	; 24
    2f36:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2f3a:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    OCR3A = 6250;      // 16M/64(prescaler) * 0,025 sec (=25 ms) = 6250 [10ms = 2.500 / 15ms = 3.750 / 20ms = 5.000]
    2f3e:	82 e0       	ldi	r24, 0x02	; 2
    2f40:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    TIMSK3 = 0x02;      // enable compare interrupt
    2f44:	08 95       	ret

00002f46 <switchToPart(unsigned char)>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    2f46:	cf 93       	push	r28
    2f48:	c8 2f       	mov	r28, r24
    2f4a:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <prog>
    2f4e:	10 92 b9 0a 	sts	0x0AB9, r1	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    2f52:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    2f56:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2f5a:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <millisCounterForProgChange+0x1>
    2f5e:	10 92 bd 0a 	sts	0x0ABD, r1	; 0x800abd <millisCounterForProgChange>
    2f62:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    2f66:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2f6a:	87 e1       	ldi	r24, 0x17	; 23
    2f6c:	90 e0       	ldi	r25, 0x00	; 0
    2f6e:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    2f72:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    2f76:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    2f7a:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <progBlingBlingColoring_rounds>
    2f7e:	10 92 6e 0a 	sts	0x0A6E, r1	; 0x800a6e <progCLED_hue>
    2f82:	10 92 6d 0a 	sts	0x0A6D, r1	; 0x800a6d <progCLED_counter+0x1>
    2f86:	10 92 6c 0a 	sts	0x0A6C, r1	; 0x800a6c <progCLED_counter>
    2f8a:	6f e1       	ldi	r22, 0x1F	; 31
    2f8c:	71 e0       	ldi	r23, 0x01	; 1
    2f8e:	8c e5       	ldi	r24, 0x5C	; 92
    2f90:	91 e1       	ldi	r25, 0x11	; 17
    2f92:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    2f96:	6c 2f       	mov	r22, r28
    2f98:	8c e5       	ldi	r24, 0x5C	; 92
    2f9a:	91 e1       	ldi	r25, 0x11	; 17
    2f9c:	cf 91       	pop	r28
    2f9e:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <Print::println(unsigned char)>

00002fa2 <__vector_32>:
    2fa2:	1f 92       	push	r1
    2fa4:	0f 92       	push	r0
    2fa6:	0f b6       	in	r0, 0x3f	; 63
    2fa8:	0f 92       	push	r0
    2faa:	11 24       	eor	r1, r1
    2fac:	0b b6       	in	r0, 0x3b	; 59
    2fae:	0f 92       	push	r0
    2fb0:	2f 93       	push	r18
    2fb2:	3f 93       	push	r19
    2fb4:	4f 93       	push	r20
    2fb6:	5f 93       	push	r21
    2fb8:	6f 93       	push	r22
    2fba:	7f 93       	push	r23
    2fbc:	8f 93       	push	r24
    2fbe:	9f 93       	push	r25
    2fc0:	af 93       	push	r26
    2fc2:	bf 93       	push	r27
    2fc4:	ef 93       	push	r30
    2fc6:	ff 93       	push	r31
    2fc8:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    2fcc:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2fd0:	49 96       	adiw	r24, 0x19	; 25
    2fd2:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <millisCounterTimer+0x1>
    2fd6:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <millisCounterTimer>
    2fda:	80 91 bb 0a 	lds	r24, 0x0ABB	; 0x800abb <millisCounterForSeconds>
    2fde:	90 91 bc 0a 	lds	r25, 0x0ABC	; 0x800abc <millisCounterForSeconds+0x1>
    2fe2:	49 96       	adiw	r24, 0x19	; 25
    2fe4:	90 93 bc 0a 	sts	0x0ABC, r25	; 0x800abc <millisCounterForSeconds+0x1>
    2fe8:	80 93 bb 0a 	sts	0x0ABB, r24	; 0x800abb <millisCounterForSeconds>
    2fec:	80 91 bd 0a 	lds	r24, 0x0ABD	; 0x800abd <millisCounterForProgChange>
    2ff0:	90 91 be 0a 	lds	r25, 0x0ABE	; 0x800abe <millisCounterForProgChange+0x1>
    2ff4:	49 96       	adiw	r24, 0x19	; 25
    2ff6:	90 93 be 0a 	sts	0x0ABE, r25	; 0x800abe <millisCounterForProgChange+0x1>
    2ffa:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <millisCounterForProgChange>
    2ffe:	91 e0       	ldi	r25, 0x01	; 1
    3000:	90 93 ba 0a 	sts	0x0ABA, r25	; 0x800aba <flag_processFastLED>
    3004:	8b b1       	in	r24, 0x0b	; 11
    3006:	20 e4       	ldi	r18, 0x40	; 64
    3008:	82 27       	eor	r24, r18
    300a:	8b b9       	out	0x0b, r24	; 11
    300c:	20 91 bb 0a 	lds	r18, 0x0ABB	; 0x800abb <millisCounterForSeconds>
    3010:	30 91 bc 0a 	lds	r19, 0x0ABC	; 0x800abc <millisCounterForSeconds+0x1>
    3014:	28 3e       	cpi	r18, 0xE8	; 232
    3016:	33 40       	sbci	r19, 0x03	; 3
    3018:	30 f0       	brcs	.+12     	; 0x3026 <__vector_32+0x84>
    301a:	10 92 bc 0a 	sts	0x0ABC, r1	; 0x800abc <millisCounterForSeconds+0x1>
    301e:	10 92 bb 0a 	sts	0x0ABB, r1	; 0x800abb <millisCounterForSeconds>
    3022:	90 93 b6 0a 	sts	0x0AB6, r25	; 0x800ab6 <OneSecondHasPast>
    3026:	20 91 bd 0a 	lds	r18, 0x0ABD	; 0x800abd <millisCounterForProgChange>
    302a:	30 91 be 0a 	lds	r19, 0x0ABE	; 0x800abe <millisCounterForProgChange+0x1>
    302e:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    3032:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    3036:	28 17       	cp	r18, r24
    3038:	39 07       	cpc	r19, r25
    303a:	18 f0       	brcs	.+6      	; 0x3042 <__vector_32+0xa0>
    303c:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <nextSongPart>
    3040:	82 df       	rcall	.-252    	; 0x2f46 <switchToPart(unsigned char)>
    3042:	ff 91       	pop	r31
    3044:	ef 91       	pop	r30
    3046:	bf 91       	pop	r27
    3048:	af 91       	pop	r26
    304a:	9f 91       	pop	r25
    304c:	8f 91       	pop	r24
    304e:	7f 91       	pop	r23
    3050:	6f 91       	pop	r22
    3052:	5f 91       	pop	r21
    3054:	4f 91       	pop	r20
    3056:	3f 91       	pop	r19
    3058:	2f 91       	pop	r18
    305a:	0f 90       	pop	r0
    305c:	0b be       	out	0x3b, r0	; 59
    305e:	0f 90       	pop	r0
    3060:	0f be       	out	0x3f, r0	; 63
    3062:	0f 90       	pop	r0
    3064:	1f 90       	pop	r1
    3066:	18 95       	reti

00003068 <switchToSong(unsigned char)>:
    3068:	cf 93       	push	r28
    306a:	c8 2f       	mov	r28, r24
    306c:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <songID>
    3070:	62 e3       	ldi	r22, 0x32	; 50
    3072:	71 e0       	ldi	r23, 0x01	; 1
    3074:	8c e5       	ldi	r24, 0x5C	; 92
    3076:	91 e1       	ldi	r25, 0x11	; 17
    3078:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::println(char const*)>
    307c:	66 e4       	ldi	r22, 0x46	; 70
    307e:	71 e0       	ldi	r23, 0x01	; 1
    3080:	8c e5       	ldi	r24, 0x5C	; 92
    3082:	91 e1       	ldi	r25, 0x11	; 17
    3084:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    3088:	6c 2f       	mov	r22, r28
    308a:	8c e5       	ldi	r24, 0x5C	; 92
    308c:	91 e1       	ldi	r25, 0x11	; 17
    308e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Print::println(unsigned char)>
    3092:	62 e3       	ldi	r22, 0x32	; 50
    3094:	71 e0       	ldi	r23, 0x01	; 1
    3096:	8c e5       	ldi	r24, 0x5C	; 92
    3098:	91 e1       	ldi	r25, 0x11	; 17
    309a:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::println(char const*)>
    309e:	80 e0       	ldi	r24, 0x00	; 0
    30a0:	cf 91       	pop	r28
    30a2:	51 cf       	rjmp	.-350    	; 0x2f46 <switchToPart(unsigned char)>

000030a4 <setup>:
    30a4:	af 92       	push	r10
    30a6:	bf 92       	push	r11
    30a8:	cf 92       	push	r12
    30aa:	df 92       	push	r13
    30ac:	ef 92       	push	r14
    30ae:	ff 92       	push	r15
    30b0:	0f 93       	push	r16
    30b2:	1f 93       	push	r17
    30b4:	cf 93       	push	r28
    30b6:	df 93       	push	r29
    30b8:	68 ee       	ldi	r22, 0xE8	; 232
    30ba:	73 e0       	ldi	r23, 0x03	; 3
    30bc:	80 e0       	ldi	r24, 0x00	; 0
    30be:	90 e0       	ldi	r25, 0x00	; 0
    30c0:	0e 94 dd 44 	call	0x89ba	; 0x89ba <delay>
    30c4:	4f ef       	ldi	r20, 0xFF	; 255
    30c6:	60 e4       	ldi	r22, 0x40	; 64
    30c8:	70 e0       	ldi	r23, 0x00	; 0
    30ca:	87 ee       	ldi	r24, 0xE7	; 231
    30cc:	90 e1       	ldi	r25, 0x10	; 16
    30ce:	0e 94 c0 47 	call	0x8f80	; 0x8f80 <HardwareSerial::_begin(unsigned int, unsigned char)>
    30d2:	56 9a       	sbi	0x0a, 6	; 10
    30d4:	88 e2       	ldi	r24, 0x28	; 40
    30d6:	0e 94 45 43 	call	0x868a	; 0x868a <analogRead>
    30da:	bc 01       	movw	r22, r24
    30dc:	99 0f       	add	r25, r25
    30de:	88 0b       	sbc	r24, r24
    30e0:	99 0b       	sbc	r25, r25
    30e2:	1f 92       	push	r1
    30e4:	1f 92       	push	r1
    30e6:	1f 92       	push	r1
    30e8:	28 e7       	ldi	r18, 0x78	; 120
    30ea:	2f 93       	push	r18
    30ec:	a1 2c       	mov	r10, r1
    30ee:	b1 2c       	mov	r11, r1
    30f0:	65 01       	movw	r12, r10
    30f2:	ee 24       	eor	r14, r14
    30f4:	ea 94       	dec	r14
    30f6:	13 e0       	ldi	r17, 0x03	; 3
    30f8:	f1 2e       	mov	r15, r17
    30fa:	00 e0       	ldi	r16, 0x00	; 0
    30fc:	10 e0       	ldi	r17, 0x00	; 0
    30fe:	20 e0       	ldi	r18, 0x00	; 0
    3100:	30 e0       	ldi	r19, 0x00	; 0
    3102:	a9 01       	movw	r20, r18
    3104:	0e 94 80 4b 	call	0x9700	; 0x9700 <map(long, long, long, long, long)>
    3108:	60 93 c3 0a 	sts	0x0AC3, r22	; 0x800ac3 <voltageSmooth>
    310c:	82 e3       	ldi	r24, 0x32	; 50
    310e:	91 e0       	ldi	r25, 0x01	; 1
    3110:	0e 94 8a 48 	call	0x9114	; 0x9114 <operator new(unsigned int)>
    3114:	ec 01       	movw	r28, r24
    3116:	0a e0       	ldi	r16, 0x0A	; 10
    3118:	27 e1       	ldi	r18, 0x17	; 23
    311a:	30 e0       	ldi	r19, 0x00	; 0
    311c:	46 e1       	ldi	r20, 0x16	; 22
    311e:	50 e0       	ldi	r21, 0x00	; 0
    3120:	6d ec       	ldi	r22, 0xCD	; 205
    3122:	7a e0       	ldi	r23, 0x0A	; 10
    3124:	0e 94 ef 39 	call	0x73de	; 0x73de <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    3128:	d0 93 bc 10 	sts	0x10BC, r29	; 0x8010bc <matrix+0x1>
    312c:	c0 93 bb 10 	sts	0x10BB, r28	; 0x8010bb <matrix>
    3130:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    3134:	0f 90       	pop	r0
    3136:	0f 90       	pop	r0
    3138:	0f 90       	pop	r0
    313a:	0f 90       	pop	r0
    313c:	81 11       	cpse	r24, r1
    313e:	4d c0       	rjmp	.+154    	; 0x31da <setup+0x136>
    3140:	83 ee       	ldi	r24, 0xE3	; 227
    3142:	99 e0       	ldi	r25, 0x09	; 9
    3144:	0e 94 8b 48 	call	0x9116	; 0x9116 <__cxa_guard_acquire>
    3148:	89 2b       	or	r24, r25
    314a:	09 f4       	brne	.+2      	; 0x314e <setup+0xaa>
    314c:	46 c0       	rjmp	.+140    	; 0x31da <setup+0x136>
    314e:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    3152:	10 92 ed 09 	sts	0x09ED, r1	; 0x8009ed <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    3156:	8f ef       	ldi	r24, 0xFF	; 255
    3158:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    315c:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    3160:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    3164:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    3168:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    316c:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    3176:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    317a:	10 92 f8 09 	sts	0x09F8, r1	; 0x8009f8 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    317e:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    3182:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    3186:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    318a:	90 91 cb 10 	lds	r25, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    318e:	89 2b       	or	r24, r25
    3190:	31 f4       	brne	.+12     	; 0x319e <setup+0xfa>
    3192:	8b ee       	ldi	r24, 0xEB	; 235
    3194:	99 e0       	ldi	r25, 0x09	; 9
    3196:	90 93 cb 10 	sts	0x10CB, r25	; 0x8010cb <CLEDController::m_pHead+0x1>
    319a:	80 93 ca 10 	sts	0x10CA, r24	; 0x8010ca <CLEDController::m_pHead>
    319e:	e0 91 c8 10 	lds	r30, 0x10C8	; 0x8010c8 <CLEDController::m_pTail>
    31a2:	f0 91 c9 10 	lds	r31, 0x10C9	; 0x8010c9 <CLEDController::m_pTail+0x1>
    31a6:	30 97       	sbiw	r30, 0x00	; 0
    31a8:	21 f0       	breq	.+8      	; 0x31b2 <setup+0x10e>
    31aa:	8b ee       	ldi	r24, 0xEB	; 235
    31ac:	99 e0       	ldi	r25, 0x09	; 9
    31ae:	95 83       	std	Z+5, r25	; 0x05
    31b0:	84 83       	std	Z+4, r24	; 0x04
    31b2:	8b ee       	ldi	r24, 0xEB	; 235
    31b4:	99 e0       	ldi	r25, 0x09	; 9
    31b6:	90 93 c9 10 	sts	0x10C9, r25	; 0x8010c9 <CLEDController::m_pTail+0x1>
    31ba:	80 93 c8 10 	sts	0x10C8, r24	; 0x8010c8 <CLEDController::m_pTail>
    31be:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    31c2:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    31c6:	81 e7       	ldi	r24, 0x71	; 113
    31c8:	95 e0       	ldi	r25, 0x05	; 5
    31ca:	90 93 ec 09 	sts	0x09EC, r25	; 0x8009ec <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    31ce:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    31d2:	83 ee       	ldi	r24, 0xE3	; 227
    31d4:	99 e0       	ldi	r25, 0x09	; 9
    31d6:	0e 94 94 48 	call	0x9128	; 0x9128 <__cxa_guard_release>
    31da:	30 e0       	ldi	r19, 0x00	; 0
    31dc:	20 e0       	ldi	r18, 0x00	; 0
    31de:	4a ef       	ldi	r20, 0xFA	; 250
    31e0:	51 e0       	ldi	r21, 0x01	; 1
    31e2:	6d ec       	ldi	r22, 0xCD	; 205
    31e4:	7a e0       	ldi	r23, 0x0A	; 10
    31e6:	8b ee       	ldi	r24, 0xEB	; 235
    31e8:	99 e0       	ldi	r25, 0x09	; 9
    31ea:	0e 94 df 3f 	call	0x7fbe	; 0x7fbe <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    31ee:	fc 01       	movw	r30, r24
    31f0:	8f ef       	ldi	r24, 0xFF	; 255
    31f2:	86 83       	std	Z+6, r24	; 0x06
    31f4:	80 eb       	ldi	r24, 0xB0	; 176
    31f6:	87 83       	std	Z+7, r24	; 0x07
    31f8:	80 ef       	ldi	r24, 0xF0	; 240
    31fa:	80 87       	std	Z+8, r24	; 0x08
    31fc:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    3200:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    3204:	0e 94 66 3a 	call	0x74cc	; 0x74cc <Framebuffer_GFX::begin()>
    3208:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    320c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    3210:	2f e0       	ldi	r18, 0x0F	; 15
    3212:	20 93 cc 10 	sts	0x10CC, r18	; 0x8010cc <FastLED>
    3216:	fc 01       	movw	r30, r24
    3218:	16 8a       	std	Z+22, r1	; 0x16
    321a:	69 e8       	ldi	r22, 0x89	; 137
    321c:	74 e0       	ldi	r23, 0x04	; 4
    321e:	0e 94 f5 3c 	call	0x79ea	; 0x79ea <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    3222:	f8 94       	cli
    3224:	81 de       	rcall	.-766    	; 0x2f28 <setupInterrupt()>
    3226:	78 94       	sei
    3228:	68 eb       	ldi	r22, 0xB8	; 184
    322a:	76 e0       	ldi	r23, 0x06	; 6
    322c:	88 e7       	ldi	r24, 0x78	; 120
    322e:	9a e0       	ldi	r25, 0x0A	; 10
    3230:	0e 94 bc 05 	call	0xb78	; 0xb78 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    3234:	81 e0       	ldi	r24, 0x01	; 1
    3236:	90 e0       	ldi	r25, 0x00	; 0
    3238:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <currentBlending+0x1>
    323c:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <currentBlending>
    3240:	8f e0       	ldi	r24, 0x0F	; 15
    3242:	df 91       	pop	r29
    3244:	cf 91       	pop	r28
    3246:	1f 91       	pop	r17
    3248:	0f 91       	pop	r16
    324a:	ff 90       	pop	r15
    324c:	ef 90       	pop	r14
    324e:	df 90       	pop	r13
    3250:	cf 90       	pop	r12
    3252:	bf 90       	pop	r11
    3254:	af 90       	pop	r10
    3256:	08 cf       	rjmp	.-496    	; 0x3068 <switchToSong(unsigned char)>

00003258 <defaultLoop()>:
    3258:	ef 92       	push	r14
    325a:	ff 92       	push	r15
    325c:	0f 93       	push	r16
    325e:	cf 93       	push	r28
    3260:	df 93       	push	r29
    3262:	00 d0       	rcall	.+0      	; 0x3264 <defaultLoop()+0xc>
    3264:	00 d0       	rcall	.+0      	; 0x3266 <defaultLoop()+0xe>
    3266:	00 d0       	rcall	.+0      	; 0x3268 <defaultLoop()+0x10>
    3268:	1f 92       	push	r1
    326a:	cd b7       	in	r28, 0x3d	; 61
    326c:	de b7       	in	r29, 0x3e	; 62
    326e:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3272:	83 32       	cpi	r24, 0x23	; 35
    3274:	09 f4       	brne	.+2      	; 0x3278 <defaultLoop()+0x20>
    3276:	78 c0       	rjmp	.+240    	; 0x3368 <defaultLoop()+0x110>
    3278:	28 f5       	brcc	.+74     	; 0x32c4 <defaultLoop()+0x6c>
    327a:	8a 30       	cpi	r24, 0x0A	; 10
    327c:	09 f4       	brne	.+2      	; 0x3280 <defaultLoop()+0x28>
    327e:	5e c0       	rjmp	.+188    	; 0x333c <defaultLoop()+0xe4>
    3280:	88 f4       	brcc	.+34     	; 0x32a4 <defaultLoop()+0x4c>
    3282:	88 23       	and	r24, r24
    3284:	f1 f1       	breq	.+124    	; 0x3302 <defaultLoop()+0xaa>
    3286:	85 30       	cpi	r24, 0x05	; 5
    3288:	09 f4       	brne	.+2      	; 0x328c <defaultLoop()+0x34>
    328a:	53 c0       	rjmp	.+166    	; 0x3332 <defaultLoop()+0xda>
    328c:	27 96       	adiw	r28, 0x07	; 7
    328e:	0f b6       	in	r0, 0x3f	; 63
    3290:	f8 94       	cli
    3292:	de bf       	out	0x3e, r29	; 62
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	cd bf       	out	0x3d, r28	; 61
    3298:	df 91       	pop	r29
    329a:	cf 91       	pop	r28
    329c:	0f 91       	pop	r16
    329e:	ff 90       	pop	r15
    32a0:	ef 90       	pop	r14
    32a2:	08 95       	ret
    32a4:	84 31       	cpi	r24, 0x14	; 20
    32a6:	09 f4       	brne	.+2      	; 0x32aa <defaultLoop()+0x52>
    32a8:	51 c0       	rjmp	.+162    	; 0x334c <defaultLoop()+0xf4>
    32aa:	89 31       	cpi	r24, 0x19	; 25
    32ac:	09 f4       	brne	.+2      	; 0x32b0 <defaultLoop()+0x58>
    32ae:	54 c0       	rjmp	.+168    	; 0x3358 <defaultLoop()+0x100>
    32b0:	8f 30       	cpi	r24, 0x0F	; 15
    32b2:	61 f7       	brne	.-40     	; 0x328c <defaultLoop()+0x34>
    32b4:	44 ef       	ldi	r20, 0xF4	; 244
    32b6:	51 e0       	ldi	r21, 0x01	; 1
    32b8:	64 e1       	ldi	r22, 0x14	; 20
    32ba:	80 e1       	ldi	r24, 0x10	; 16
    32bc:	97 e2       	ldi	r25, 0x27	; 39
    32be:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    32c2:	e4 cf       	rjmp	.-56     	; 0x328c <defaultLoop()+0x34>
    32c4:	82 33       	cpi	r24, 0x32	; 50
    32c6:	09 f4       	brne	.+2      	; 0x32ca <defaultLoop()+0x72>
    32c8:	5e c0       	rjmp	.+188    	; 0x3386 <defaultLoop()+0x12e>
    32ca:	58 f4       	brcc	.+22     	; 0x32e2 <defaultLoop()+0x8a>
    32cc:	88 32       	cpi	r24, 0x28	; 40
    32ce:	09 f4       	brne	.+2      	; 0x32d2 <defaultLoop()+0x7a>
    32d0:	53 c0       	rjmp	.+166    	; 0x3378 <defaultLoop()+0x120>
    32d2:	8d 32       	cpi	r24, 0x2D	; 45
    32d4:	d9 f6       	brne	.-74     	; 0x328c <defaultLoop()+0x34>
    32d6:	62 e3       	ldi	r22, 0x32	; 50
    32d8:	80 e1       	ldi	r24, 0x10	; 16
    32da:	97 e2       	ldi	r25, 0x27	; 39
    32dc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <progOutline(unsigned int, unsigned char)>
    32e0:	d5 cf       	rjmp	.-86     	; 0x328c <defaultLoop()+0x34>
    32e2:	8c 33       	cpi	r24, 0x3C	; 60
    32e4:	09 f4       	brne	.+2      	; 0x32e8 <defaultLoop()+0x90>
    32e6:	55 c0       	rjmp	.+170    	; 0x3392 <defaultLoop()+0x13a>
    32e8:	84 36       	cpi	r24, 0x64	; 100
    32ea:	09 f4       	brne	.+2      	; 0x32ee <defaultLoop()+0x96>
    32ec:	58 c0       	rjmp	.+176    	; 0x339e <defaultLoop()+0x146>
    32ee:	87 33       	cpi	r24, 0x37	; 55
    32f0:	69 f6       	brne	.-102    	; 0x328c <defaultLoop()+0x34>
    32f2:	44 ef       	ldi	r20, 0xF4	; 244
    32f4:	51 e0       	ldi	r21, 0x01	; 1
    32f6:	6c e3       	ldi	r22, 0x3C	; 60
    32f8:	88 e9       	ldi	r24, 0x98	; 152
    32fa:	9a e3       	ldi	r25, 0x3A	; 58
    32fc:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3300:	c5 cf       	rjmp	.-118    	; 0x328c <defaultLoop()+0x34>
    3302:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3306:	7c 01       	movw	r14, r24
    3308:	6e e9       	ldi	r22, 0x9E	; 158
    330a:	72 e0       	ldi	r23, 0x02	; 2
    330c:	ce 01       	movw	r24, r28
    330e:	01 96       	adiw	r24, 0x01	; 1
    3310:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    3314:	05 e0       	ldi	r16, 0x05	; 5
    3316:	97 01       	movw	r18, r14
    3318:	4a e5       	ldi	r20, 0x5A	; 90
    331a:	50 e0       	ldi	r21, 0x00	; 0
    331c:	6c e2       	ldi	r22, 0x2C	; 44
    331e:	7c e4       	ldi	r23, 0x4C	; 76
    3320:	ce 01       	movw	r24, r28
    3322:	01 96       	adiw	r24, 0x01	; 1
    3324:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3328:	ce 01       	movw	r24, r28
    332a:	01 96       	adiw	r24, 0x01	; 1
    332c:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    3330:	ad cf       	rjmp	.-166    	; 0x328c <defaultLoop()+0x34>
    3332:	6a e0       	ldi	r22, 0x0A	; 10
    3334:	80 e3       	ldi	r24, 0x30	; 48
    3336:	95 e7       	ldi	r25, 0x75	; 117
    3338:	db d9       	rcall	.-3146   	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    333a:	a8 cf       	rjmp	.-176    	; 0x328c <defaultLoop()+0x34>
    333c:	4f e0       	ldi	r20, 0x0F	; 15
    333e:	60 ed       	ldi	r22, 0xD0	; 208
    3340:	77 e0       	ldi	r23, 0x07	; 7
    3342:	88 e9       	ldi	r24, 0x98	; 152
    3344:	9a e3       	ldi	r25, 0x3A	; 58
    3346:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    334a:	a0 cf       	rjmp	.-192    	; 0x328c <defaultLoop()+0x34>
    334c:	69 e1       	ldi	r22, 0x19	; 25
    334e:	88 e9       	ldi	r24, 0x98	; 152
    3350:	9a e3       	ldi	r25, 0x3A	; 58
    3352:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    3356:	9a cf       	rjmp	.-204    	; 0x328c <defaultLoop()+0x34>
    3358:	40 ed       	ldi	r20, 0xD0	; 208
    335a:	57 e0       	ldi	r21, 0x07	; 7
    335c:	63 e2       	ldi	r22, 0x23	; 35
    335e:	88 e9       	ldi	r24, 0x98	; 152
    3360:	9a e3       	ldi	r25, 0x3A	; 58
    3362:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3366:	92 cf       	rjmp	.-220    	; 0x328c <defaultLoop()+0x34>
    3368:	48 ee       	ldi	r20, 0xE8	; 232
    336a:	53 e0       	ldi	r21, 0x03	; 3
    336c:	68 e2       	ldi	r22, 0x28	; 40
    336e:	88 e9       	ldi	r24, 0x98	; 152
    3370:	9a e3       	ldi	r25, 0x3A	; 58
    3372:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3376:	8a cf       	rjmp	.-236    	; 0x328c <defaultLoop()+0x34>
    3378:	4d e2       	ldi	r20, 0x2D	; 45
    337a:	65 e0       	ldi	r22, 0x05	; 5
    337c:	88 e9       	ldi	r24, 0x98	; 152
    337e:	9a e3       	ldi	r25, 0x3A	; 58
    3380:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3384:	83 cf       	rjmp	.-250    	; 0x328c <defaultLoop()+0x34>
    3386:	67 e3       	ldi	r22, 0x37	; 55
    3388:	80 e1       	ldi	r24, 0x10	; 16
    338a:	97 e2       	ldi	r25, 0x27	; 39
    338c:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    3390:	7d cf       	rjmp	.-262    	; 0x328c <defaultLoop()+0x34>
    3392:	49 ec       	ldi	r20, 0xC9	; 201
    3394:	5d e1       	ldi	r21, 0x1D	; 29
    3396:	64 e6       	ldi	r22, 0x64	; 100
    3398:	80 e6       	ldi	r24, 0x60	; 96
    339a:	9a ee       	ldi	r25, 0xEA	; 234
    339c:	90 cf       	rjmp	.-224    	; 0x32be <defaultLoop()+0x66>
    339e:	60 e0       	ldi	r22, 0x00	; 0
    33a0:	8c ec       	ldi	r24, 0xCC	; 204
    33a2:	90 e1       	ldi	r25, 0x10	; 16
    33a4:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    33a8:	80 e0       	ldi	r24, 0x00	; 0
    33aa:	5e de       	rcall	.-836    	; 0x3068 <switchToSong(unsigned char)>
    33ac:	6f cf       	rjmp	.-290    	; 0x328c <defaultLoop()+0x34>

000033ae <LearnToFly()>:
    33ae:	ef 92       	push	r14
    33b0:	ff 92       	push	r15
    33b2:	0f 93       	push	r16
    33b4:	1f 93       	push	r17
    33b6:	cf 93       	push	r28
    33b8:	df 93       	push	r29
    33ba:	00 d0       	rcall	.+0      	; 0x33bc <LearnToFly()+0xe>
    33bc:	00 d0       	rcall	.+0      	; 0x33be <LearnToFly()+0x10>
    33be:	00 d0       	rcall	.+0      	; 0x33c0 <LearnToFly()+0x12>
    33c0:	1f 92       	push	r1
    33c2:	cd b7       	in	r28, 0x3d	; 61
    33c4:	de b7       	in	r29, 0x3e	; 62
    33c6:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    33ca:	89 31       	cpi	r24, 0x19	; 25
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <LearnToFly()+0x22>
    33ce:	87 c0       	rjmp	.+270    	; 0x34de <LearnToFly()+0x130>
    33d0:	38 f5       	brcc	.+78     	; 0x3420 <LearnToFly()+0x72>
    33d2:	85 30       	cpi	r24, 0x05	; 5
    33d4:	09 f4       	brne	.+2      	; 0x33d8 <LearnToFly()+0x2a>
    33d6:	6f c0       	rjmp	.+222    	; 0x34b6 <LearnToFly()+0x108>
    33d8:	98 f4       	brcc	.+38     	; 0x3400 <LearnToFly()+0x52>
    33da:	88 23       	and	r24, r24
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <LearnToFly()+0x32>
    33de:	4b c0       	rjmp	.+150    	; 0x3476 <LearnToFly()+0xc8>
    33e0:	82 30       	cpi	r24, 0x02	; 2
    33e2:	09 f4       	brne	.+2      	; 0x33e6 <LearnToFly()+0x38>
    33e4:	60 c0       	rjmp	.+192    	; 0x34a6 <LearnToFly()+0xf8>
    33e6:	27 96       	adiw	r28, 0x07	; 7
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	df 91       	pop	r29
    33f4:	cf 91       	pop	r28
    33f6:	1f 91       	pop	r17
    33f8:	0f 91       	pop	r16
    33fa:	ff 90       	pop	r15
    33fc:	ef 90       	pop	r14
    33fe:	08 95       	ret
    3400:	8f 30       	cpi	r24, 0x0F	; 15
    3402:	09 f4       	brne	.+2      	; 0x3406 <LearnToFly()+0x58>
    3404:	5e c0       	rjmp	.+188    	; 0x34c2 <LearnToFly()+0x114>
    3406:	84 31       	cpi	r24, 0x14	; 20
    3408:	09 f4       	brne	.+2      	; 0x340c <LearnToFly()+0x5e>
    340a:	61 c0       	rjmp	.+194    	; 0x34ce <LearnToFly()+0x120>
    340c:	8a 30       	cpi	r24, 0x0A	; 10
    340e:	59 f7       	brne	.-42     	; 0x33e6 <LearnToFly()+0x38>
    3410:	49 ea       	ldi	r20, 0xA9	; 169
    3412:	51 e0       	ldi	r21, 0x01	; 1
    3414:	6f e0       	ldi	r22, 0x0F	; 15
    3416:	82 e8       	ldi	r24, 0x82	; 130
    3418:	90 e6       	ldi	r25, 0x60	; 96
    341a:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    341e:	e3 cf       	rjmp	.-58     	; 0x33e6 <LearnToFly()+0x38>
    3420:	8d 32       	cpi	r24, 0x2D	; 45
    3422:	09 f4       	brne	.+2      	; 0x3426 <LearnToFly()+0x78>
    3424:	76 c0       	rjmp	.+236    	; 0x3512 <LearnToFly()+0x164>
    3426:	80 f4       	brcc	.+32     	; 0x3448 <LearnToFly()+0x9a>
    3428:	83 32       	cpi	r24, 0x23	; 35
    342a:	09 f4       	brne	.+2      	; 0x342e <LearnToFly()+0x80>
    342c:	5f c0       	rjmp	.+190    	; 0x34ec <LearnToFly()+0x13e>
    342e:	88 32       	cpi	r24, 0x28	; 40
    3430:	09 f4       	brne	.+2      	; 0x3434 <LearnToFly()+0x86>
    3432:	6b c0       	rjmp	.+214    	; 0x350a <LearnToFly()+0x15c>
    3434:	8e 31       	cpi	r24, 0x1E	; 30
    3436:	b9 f6       	brne	.-82     	; 0x33e6 <LearnToFly()+0x38>
    3438:	49 ec       	ldi	r20, 0xC9	; 201
    343a:	5d e1       	ldi	r21, 0x1D	; 29
    343c:	63 e2       	ldi	r22, 0x23	; 35
    343e:	8b e4       	ldi	r24, 0x4B	; 75
    3440:	9e e6       	ldi	r25, 0x6E	; 110
    3442:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    3446:	cf cf       	rjmp	.-98     	; 0x33e6 <LearnToFly()+0x38>
    3448:	87 33       	cpi	r24, 0x37	; 55
    344a:	09 f4       	brne	.+2      	; 0x344e <LearnToFly()+0xa0>
    344c:	67 c0       	rjmp	.+206    	; 0x351c <LearnToFly()+0x16e>
    344e:	84 36       	cpi	r24, 0x64	; 100
    3450:	09 f4       	brne	.+2      	; 0x3454 <LearnToFly()+0xa6>
    3452:	6a c0       	rjmp	.+212    	; 0x3528 <LearnToFly()+0x17a>
    3454:	82 33       	cpi	r24, 0x32	; 50
    3456:	39 f6       	brne	.-114    	; 0x33e6 <LearnToFly()+0x38>
    3458:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    345c:	7c 01       	movw	r14, r24
    345e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3462:	8c 01       	movw	r16, r24
    3464:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3468:	9c 01       	movw	r18, r24
    346a:	4b e4       	ldi	r20, 0x4B	; 75
    346c:	50 e0       	ldi	r21, 0x00	; 0
    346e:	67 e3       	ldi	r22, 0x37	; 55
    3470:	86 e2       	ldi	r24, 0x26	; 38
    3472:	97 e3       	ldi	r25, 0x37	; 55
    3474:	47 c0       	rjmp	.+142    	; 0x3504 <LearnToFly()+0x156>
    3476:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    347a:	7c 01       	movw	r14, r24
    347c:	69 e5       	ldi	r22, 0x59	; 89
    347e:	71 e0       	ldi	r23, 0x01	; 1
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    3488:	02 e0       	ldi	r16, 0x02	; 2
    348a:	97 01       	movw	r18, r14
    348c:	4b e4       	ldi	r20, 0x4B	; 75
    348e:	50 e0       	ldi	r21, 0x00	; 0
    3490:	6c e6       	ldi	r22, 0x6C	; 108
    3492:	75 e3       	ldi	r23, 0x35	; 53
    3494:	ce 01       	movw	r24, r28
    3496:	01 96       	adiw	r24, 0x01	; 1
    3498:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    349c:	ce 01       	movw	r24, r28
    349e:	01 96       	adiw	r24, 0x01	; 1
    34a0:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    34a4:	a0 cf       	rjmp	.-192    	; 0x33e6 <LearnToFly()+0x38>
    34a6:	45 e0       	ldi	r20, 0x05	; 5
    34a8:	68 eb       	ldi	r22, 0xB8	; 184
    34aa:	71 e0       	ldi	r23, 0x01	; 1
    34ac:	83 e9       	ldi	r24, 0x93	; 147
    34ae:	9b e1       	ldi	r25, 0x1B	; 27
    34b0:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    34b4:	98 cf       	rjmp	.-208    	; 0x33e6 <LearnToFly()+0x38>
    34b6:	6a e0       	ldi	r22, 0x0A	; 10
    34b8:	8b e4       	ldi	r24, 0x4B	; 75
    34ba:	9e e6       	ldi	r25, 0x6E	; 110
    34bc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    34c0:	92 cf       	rjmp	.-220    	; 0x33e6 <LearnToFly()+0x38>
    34c2:	64 e1       	ldi	r22, 0x14	; 20
    34c4:	86 e2       	ldi	r24, 0x26	; 38
    34c6:	97 e3       	ldi	r25, 0x37	; 55
    34c8:	0e 94 3c 0a 	call	0x1478	; 0x1478 <progStern(unsigned int, unsigned char)>
    34cc:	8c cf       	rjmp	.-232    	; 0x33e6 <LearnToFly()+0x38>
    34ce:	49 ea       	ldi	r20, 0xA9	; 169
    34d0:	51 e0       	ldi	r21, 0x01	; 1
    34d2:	69 e1       	ldi	r22, 0x19	; 25
    34d4:	8b e4       	ldi	r24, 0x4B	; 75
    34d6:	9e e6       	ldi	r25, 0x6E	; 110
    34d8:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    34dc:	84 cf       	rjmp	.-248    	; 0x33e6 <LearnToFly()+0x38>
    34de:	4e e1       	ldi	r20, 0x1E	; 30
    34e0:	65 e0       	ldi	r22, 0x05	; 5
    34e2:	80 e3       	ldi	r24, 0x30	; 48
    34e4:	95 e7       	ldi	r25, 0x75	; 117
    34e6:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    34ea:	7d cf       	rjmp	.-262    	; 0x33e6 <LearnToFly()+0x38>
    34ec:	ee 24       	eor	r14, r14
    34ee:	ea 94       	dec	r14
    34f0:	f1 2c       	mov	r15, r1
    34f2:	0f ef       	ldi	r16, 0xFF	; 255
    34f4:	10 e0       	ldi	r17, 0x00	; 0
    34f6:	2f ef       	ldi	r18, 0xFF	; 255
    34f8:	30 e0       	ldi	r19, 0x00	; 0
    34fa:	4b e4       	ldi	r20, 0x4B	; 75
    34fc:	50 e0       	ldi	r21, 0x00	; 0
    34fe:	68 e2       	ldi	r22, 0x28	; 40
    3500:	89 ec       	ldi	r24, 0xC9	; 201
    3502:	9d e0       	ldi	r25, 0x0D	; 13
    3504:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3508:	6e cf       	rjmp	.-292    	; 0x33e6 <LearnToFly()+0x38>
    350a:	49 ea       	ldi	r20, 0xA9	; 169
    350c:	51 e0       	ldi	r21, 0x01	; 1
    350e:	6d e2       	ldi	r22, 0x2D	; 45
    3510:	82 cf       	rjmp	.-252    	; 0x3416 <LearnToFly()+0x68>
    3512:	42 e3       	ldi	r20, 0x32	; 50
    3514:	65 e0       	ldi	r22, 0x05	; 5
    3516:	88 eb       	ldi	r24, 0xB8	; 184
    3518:	92 e5       	ldi	r25, 0x52	; 82
    351a:	e5 cf       	rjmp	.-54     	; 0x34e6 <LearnToFly()+0x138>
    351c:	49 ec       	ldi	r20, 0xC9	; 201
    351e:	5d e1       	ldi	r21, 0x1D	; 29
    3520:	64 e6       	ldi	r22, 0x64	; 100
    3522:	8f ef       	ldi	r24, 0xFF	; 255
    3524:	9f ef       	ldi	r25, 0xFF	; 255
    3526:	8d cf       	rjmp	.-230    	; 0x3442 <LearnToFly()+0x94>
    3528:	60 e0       	ldi	r22, 0x00	; 0
    352a:	8c ec       	ldi	r24, 0xCC	; 204
    352c:	90 e1       	ldi	r25, 0x10	; 16
    352e:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    3532:	80 e0       	ldi	r24, 0x00	; 0
    3534:	99 dd       	rcall	.-1230   	; 0x3068 <switchToSong(unsigned char)>
    3536:	57 cf       	rjmp	.-338    	; 0x33e6 <LearnToFly()+0x38>

00003538 <Castle()>:
    3538:	ef 92       	push	r14
    353a:	ff 92       	push	r15
    353c:	0f 93       	push	r16
    353e:	1f 93       	push	r17
    3540:	cf 93       	push	r28
    3542:	df 93       	push	r29
    3544:	00 d0       	rcall	.+0      	; 0x3546 <Castle()+0xe>
    3546:	00 d0       	rcall	.+0      	; 0x3548 <Castle()+0x10>
    3548:	00 d0       	rcall	.+0      	; 0x354a <Castle()+0x12>
    354a:	1f 92       	push	r1
    354c:	cd b7       	in	r28, 0x3d	; 61
    354e:	de b7       	in	r29, 0x3e	; 62
    3550:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3554:	82 33       	cpi	r24, 0x32	; 50
    3556:	09 f4       	brne	.+2      	; 0x355a <Castle()+0x22>
    3558:	eb c0       	rjmp	.+470    	; 0x3730 <Castle()+0x1f8>
    355a:	08 f0       	brcs	.+2      	; 0x355e <Castle()+0x26>
    355c:	49 c0       	rjmp	.+146    	; 0x35f0 <Castle()+0xb8>
    355e:	84 31       	cpi	r24, 0x14	; 20
    3560:	09 f4       	brne	.+2      	; 0x3564 <Castle()+0x2c>
    3562:	c8 c0       	rjmp	.+400    	; 0x36f4 <Castle()+0x1bc>
    3564:	10 f5       	brcc	.+68     	; 0x35aa <Castle()+0x72>
    3566:	85 30       	cpi	r24, 0x05	; 5
    3568:	09 f4       	brne	.+2      	; 0x356c <Castle()+0x34>
    356a:	b6 c0       	rjmp	.+364    	; 0x36d8 <Castle()+0x1a0>
    356c:	98 f4       	brcc	.+38     	; 0x3594 <Castle()+0x5c>
    356e:	88 23       	and	r24, r24
    3570:	09 f4       	brne	.+2      	; 0x3574 <Castle()+0x3c>
    3572:	92 c0       	rjmp	.+292    	; 0x3698 <Castle()+0x160>
    3574:	81 30       	cpi	r24, 0x01	; 1
    3576:	09 f4       	brne	.+2      	; 0x357a <Castle()+0x42>
    3578:	a7 c0       	rjmp	.+334    	; 0x36c8 <Castle()+0x190>
    357a:	27 96       	adiw	r28, 0x07	; 7
    357c:	0f b6       	in	r0, 0x3f	; 63
    357e:	f8 94       	cli
    3580:	de bf       	out	0x3e, r29	; 62
    3582:	0f be       	out	0x3f, r0	; 63
    3584:	cd bf       	out	0x3d, r28	; 61
    3586:	df 91       	pop	r29
    3588:	cf 91       	pop	r28
    358a:	1f 91       	pop	r17
    358c:	0f 91       	pop	r16
    358e:	ff 90       	pop	r15
    3590:	ef 90       	pop	r14
    3592:	08 95       	ret
    3594:	8a 30       	cpi	r24, 0x0A	; 10
    3596:	09 f4       	brne	.+2      	; 0x359a <Castle()+0x62>
    3598:	a7 c0       	rjmp	.+334    	; 0x36e8 <Castle()+0x1b0>
    359a:	8f 30       	cpi	r24, 0x0F	; 15
    359c:	71 f7       	brne	.-36     	; 0x357a <Castle()+0x42>
    359e:	64 e1       	ldi	r22, 0x14	; 20
    35a0:	87 ee       	ldi	r24, 0xE7	; 231
    35a2:	90 e4       	ldi	r25, 0x40	; 64
    35a4:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    35a8:	e8 cf       	rjmp	.-48     	; 0x357a <Castle()+0x42>
    35aa:	83 32       	cpi	r24, 0x23	; 35
    35ac:	09 f4       	brne	.+2      	; 0x35b0 <Castle()+0x78>
    35ae:	b8 c0       	rjmp	.+368    	; 0x3720 <Castle()+0x1e8>
    35b0:	b0 f4       	brcc	.+44     	; 0x35de <Castle()+0xa6>
    35b2:	89 31       	cpi	r24, 0x19	; 25
    35b4:	09 f4       	brne	.+2      	; 0x35b8 <Castle()+0x80>
    35b6:	ae c0       	rjmp	.+348    	; 0x3714 <Castle()+0x1dc>
    35b8:	8e 31       	cpi	r24, 0x1E	; 30
    35ba:	f9 f6       	brne	.-66     	; 0x357a <Castle()+0x42>
    35bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    35c0:	7c 01       	movw	r14, r24
    35c2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    35c6:	8c 01       	movw	r16, r24
    35c8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    35cc:	9c 01       	movw	r18, r24
    35ce:	42 e3       	ldi	r20, 0x32	; 50
    35d0:	50 e0       	ldi	r21, 0x00	; 0
    35d2:	63 e2       	ldi	r22, 0x23	; 35
    35d4:	86 e3       	ldi	r24, 0x36	; 54
    35d6:	97 e0       	ldi	r25, 0x07	; 7
    35d8:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    35dc:	ce cf       	rjmp	.-100    	; 0x357a <Castle()+0x42>
    35de:	88 32       	cpi	r24, 0x28	; 40
    35e0:	09 f4       	brne	.+2      	; 0x35e4 <Castle()+0xac>
    35e2:	a4 c0       	rjmp	.+328    	; 0x372c <Castle()+0x1f4>
    35e4:	8d 32       	cpi	r24, 0x2D	; 45
    35e6:	49 f6       	brne	.-110    	; 0x357a <Castle()+0x42>
    35e8:	62 e3       	ldi	r22, 0x32	; 50
    35ea:	8b e7       	ldi	r24, 0x7B	; 123
    35ec:	92 e3       	ldi	r25, 0x32	; 50
    35ee:	da cf       	rjmp	.-76     	; 0x35a4 <Castle()+0x6c>
    35f0:	86 34       	cpi	r24, 0x46	; 70
    35f2:	09 f4       	brne	.+2      	; 0x35f6 <Castle()+0xbe>
    35f4:	b8 c0       	rjmp	.+368    	; 0x3766 <Castle()+0x22e>
    35f6:	50 f5       	brcc	.+84     	; 0x364c <Castle()+0x114>
    35f8:	8a 33       	cpi	r24, 0x3A	; 58
    35fa:	09 f4       	brne	.+2      	; 0x35fe <Castle()+0xc6>
    35fc:	a6 c0       	rjmp	.+332    	; 0x374a <Castle()+0x212>
    35fe:	98 f4       	brcc	.+38     	; 0x3626 <Castle()+0xee>
    3600:	87 33       	cpi	r24, 0x37	; 55
    3602:	09 f4       	brne	.+2      	; 0x3606 <Castle()+0xce>
    3604:	9a c0       	rjmp	.+308    	; 0x373a <Castle()+0x202>
    3606:	88 33       	cpi	r24, 0x38	; 56
    3608:	09 f0       	breq	.+2      	; 0x360c <Castle()+0xd4>
    360a:	b7 cf       	rjmp	.-146    	; 0x357a <Castle()+0x42>
    360c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3610:	7c 01       	movw	r14, r24
    3612:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3616:	8c 01       	movw	r16, r24
    3618:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    361c:	9c 01       	movw	r18, r24
    361e:	42 e3       	ldi	r20, 0x32	; 50
    3620:	50 e0       	ldi	r21, 0x00	; 0
    3622:	6a e3       	ldi	r22, 0x3A	; 58
    3624:	d7 cf       	rjmp	.-82     	; 0x35d4 <Castle()+0x9c>
    3626:	8c 33       	cpi	r24, 0x3C	; 60
    3628:	09 f4       	brne	.+2      	; 0x362c <Castle()+0xf4>
    362a:	95 c0       	rjmp	.+298    	; 0x3756 <Castle()+0x21e>
    362c:	81 34       	cpi	r24, 0x41	; 65
    362e:	09 f0       	breq	.+2      	; 0x3632 <Castle()+0xfa>
    3630:	a4 cf       	rjmp	.-184    	; 0x357a <Castle()+0x42>
    3632:	ee 24       	eor	r14, r14
    3634:	ea 94       	dec	r14
    3636:	f1 2c       	mov	r15, r1
    3638:	0f ef       	ldi	r16, 0xFF	; 255
    363a:	10 e0       	ldi	r17, 0x00	; 0
    363c:	2f ef       	ldi	r18, 0xFF	; 255
    363e:	30 e0       	ldi	r19, 0x00	; 0
    3640:	42 e3       	ldi	r20, 0x32	; 50
    3642:	50 e0       	ldi	r21, 0x00	; 0
    3644:	66 e4       	ldi	r22, 0x46	; 70
    3646:	8c e6       	ldi	r24, 0x6C	; 108
    3648:	9e e0       	ldi	r25, 0x0E	; 14
    364a:	c6 cf       	rjmp	.-116    	; 0x35d8 <Castle()+0xa0>
    364c:	85 35       	cpi	r24, 0x55	; 85
    364e:	09 f4       	brne	.+2      	; 0x3652 <Castle()+0x11a>
    3650:	9f c0       	rjmp	.+318    	; 0x3790 <Castle()+0x258>
    3652:	98 f4       	brcc	.+38     	; 0x367a <Castle()+0x142>
    3654:	8b 34       	cpi	r24, 0x4B	; 75
    3656:	09 f4       	brne	.+2      	; 0x365a <Castle()+0x122>
    3658:	95 c0       	rjmp	.+298    	; 0x3784 <Castle()+0x24c>
    365a:	80 35       	cpi	r24, 0x50	; 80
    365c:	09 f0       	breq	.+2      	; 0x3660 <Castle()+0x128>
    365e:	8d cf       	rjmp	.-230    	; 0x357a <Castle()+0x42>
    3660:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3664:	7c 01       	movw	r14, r24
    3666:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    366a:	8c 01       	movw	r16, r24
    366c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3670:	9c 01       	movw	r18, r24
    3672:	42 e3       	ldi	r20, 0x32	; 50
    3674:	50 e0       	ldi	r21, 0x00	; 0
    3676:	65 e5       	ldi	r22, 0x55	; 85
    3678:	e6 cf       	rjmp	.-52     	; 0x3646 <Castle()+0x10e>
    367a:	8f 35       	cpi	r24, 0x5F	; 95
    367c:	09 f4       	brne	.+2      	; 0x3680 <Castle()+0x148>
    367e:	8f c0       	rjmp	.+286    	; 0x379e <Castle()+0x266>
    3680:	84 36       	cpi	r24, 0x64	; 100
    3682:	09 f4       	brne	.+2      	; 0x3686 <Castle()+0x14e>
    3684:	98 c0       	rjmp	.+304    	; 0x37b6 <Castle()+0x27e>
    3686:	8a 35       	cpi	r24, 0x5A	; 90
    3688:	09 f0       	breq	.+2      	; 0x368c <Castle()+0x154>
    368a:	77 cf       	rjmp	.-274    	; 0x357a <Castle()+0x42>
    368c:	42 ec       	ldi	r20, 0xC2	; 194
    368e:	51 e0       	ldi	r21, 0x01	; 1
    3690:	6f e5       	ldi	r22, 0x5F	; 95
    3692:	87 ec       	ldi	r24, 0xC7	; 199
    3694:	9f e6       	ldi	r25, 0x6F	; 111
    3696:	25 c0       	rjmp	.+74     	; 0x36e2 <Castle()+0x1aa>
    3698:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    369c:	7c 01       	movw	r14, r24
    369e:	66 e7       	ldi	r22, 0x76	; 118
    36a0:	71 e0       	ldi	r23, 0x01	; 1
    36a2:	ce 01       	movw	r24, r28
    36a4:	01 96       	adiw	r24, 0x01	; 1
    36a6:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    36aa:	01 e0       	ldi	r16, 0x01	; 1
    36ac:	97 01       	movw	r18, r14
    36ae:	44 e6       	ldi	r20, 0x64	; 100
    36b0:	50 e0       	ldi	r21, 0x00	; 0
    36b2:	6b e7       	ldi	r22, 0x7B	; 123
    36b4:	72 e3       	ldi	r23, 0x32	; 50
    36b6:	ce 01       	movw	r24, r28
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    36be:	ce 01       	movw	r24, r28
    36c0:	01 96       	adiw	r24, 0x01	; 1
    36c2:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    36c6:	59 cf       	rjmp	.-334    	; 0x357a <Castle()+0x42>
    36c8:	49 ec       	ldi	r20, 0xC9	; 201
    36ca:	5d e1       	ldi	r21, 0x1D	; 29
    36cc:	65 e0       	ldi	r22, 0x05	; 5
    36ce:	89 ed       	ldi	r24, 0xD9	; 217
    36d0:	9c e1       	ldi	r25, 0x1C	; 28
    36d2:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    36d6:	51 cf       	rjmp	.-350    	; 0x357a <Castle()+0x42>
    36d8:	4d e9       	ldi	r20, 0x9D	; 157
    36da:	53 e0       	ldi	r21, 0x03	; 3
    36dc:	6a e0       	ldi	r22, 0x0A	; 10
    36de:	89 ed       	ldi	r24, 0xD9	; 217
    36e0:	9c e1       	ldi	r25, 0x1C	; 28
    36e2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    36e6:	49 cf       	rjmp	.-366    	; 0x357a <Castle()+0x42>
    36e8:	6f e0       	ldi	r22, 0x0F	; 15
    36ea:	82 e6       	ldi	r24, 0x62	; 98
    36ec:	93 e7       	ldi	r25, 0x73	; 115
    36ee:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    36f2:	43 cf       	rjmp	.-378    	; 0x357a <Castle()+0x42>
    36f4:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    36f8:	59 e1       	ldi	r21, 0x19	; 25
    36fa:	e5 2e       	mov	r14, r21
    36fc:	8c 01       	movw	r16, r24
    36fe:	26 e3       	ldi	r18, 0x36	; 54
    3700:	37 e0       	ldi	r19, 0x07	; 7
    3702:	45 e4       	ldi	r20, 0x45	; 69
    3704:	51 e0       	ldi	r21, 0x01	; 1
    3706:	66 e0       	ldi	r22, 0x06	; 6
    3708:	70 e0       	ldi	r23, 0x00	; 0
    370a:	8c ef       	ldi	r24, 0xFC	; 252
    370c:	99 e0       	ldi	r25, 0x09	; 9
    370e:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    3712:	33 cf       	rjmp	.-410    	; 0x357a <Castle()+0x42>
    3714:	42 ec       	ldi	r20, 0xC2	; 194
    3716:	51 e0       	ldi	r21, 0x01	; 1
    3718:	6e e1       	ldi	r22, 0x1E	; 30
    371a:	8b e7       	ldi	r24, 0x7B	; 123
    371c:	92 e3       	ldi	r25, 0x32	; 50
    371e:	e1 cf       	rjmp	.-62     	; 0x36e2 <Castle()+0x1aa>
    3720:	42 ec       	ldi	r20, 0xC2	; 194
    3722:	51 e0       	ldi	r21, 0x01	; 1
    3724:	68 e2       	ldi	r22, 0x28	; 40
    3726:	81 eb       	ldi	r24, 0xB1	; 177
    3728:	99 e3       	ldi	r25, 0x39	; 57
    372a:	db cf       	rjmp	.-74     	; 0x36e2 <Castle()+0x1aa>
    372c:	6d e2       	ldi	r22, 0x2D	; 45
    372e:	dd cf       	rjmp	.-70     	; 0x36ea <Castle()+0x1b2>
    3730:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3734:	47 e3       	ldi	r20, 0x37	; 55
    3736:	e4 2e       	mov	r14, r20
    3738:	e1 cf       	rjmp	.-62     	; 0x36fc <Castle()+0x1c4>
    373a:	42 ec       	ldi	r20, 0xC2	; 194
    373c:	51 e0       	ldi	r21, 0x01	; 1
    373e:	68 e3       	ldi	r22, 0x38	; 56
    3740:	8b e7       	ldi	r24, 0x7B	; 123
    3742:	92 e3       	ldi	r25, 0x32	; 50
    3744:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3748:	18 cf       	rjmp	.-464    	; 0x357a <Castle()+0x42>
    374a:	42 ec       	ldi	r20, 0xC2	; 194
    374c:	51 e0       	ldi	r21, 0x01	; 1
    374e:	6c e3       	ldi	r22, 0x3C	; 60
    3750:	81 eb       	ldi	r24, 0xB1	; 177
    3752:	99 e3       	ldi	r25, 0x39	; 57
    3754:	f7 cf       	rjmp	.-18     	; 0x3744 <Castle()+0x20c>
    3756:	41 e4       	ldi	r20, 0x41	; 65
    3758:	6a e3       	ldi	r22, 0x3A	; 58
    375a:	77 e0       	ldi	r23, 0x07	; 7
    375c:	86 e8       	ldi	r24, 0x86	; 134
    375e:	9d e4       	ldi	r25, 0x4D	; 77
    3760:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    3764:	0a cf       	rjmp	.-492    	; 0x357a <Castle()+0x42>
    3766:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    376a:	7c 01       	movw	r14, r24
    376c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3770:	8c 01       	movw	r16, r24
    3772:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3776:	9c 01       	movw	r18, r24
    3778:	42 e3       	ldi	r20, 0x32	; 50
    377a:	50 e0       	ldi	r21, 0x00	; 0
    377c:	6b e4       	ldi	r22, 0x4B	; 75
    377e:	80 e7       	ldi	r24, 0x70	; 112
    3780:	97 e1       	ldi	r25, 0x17	; 23
    3782:	2a cf       	rjmp	.-428    	; 0x35d8 <Castle()+0xa0>
    3784:	40 e5       	ldi	r20, 0x50	; 80
    3786:	6a e3       	ldi	r22, 0x3A	; 58
    3788:	77 e0       	ldi	r23, 0x07	; 7
    378a:	81 eb       	ldi	r24, 0xB1	; 177
    378c:	99 e3       	ldi	r25, 0x39	; 57
    378e:	e8 cf       	rjmp	.-48     	; 0x3760 <Castle()+0x228>
    3790:	4a e5       	ldi	r20, 0x5A	; 90
    3792:	65 e0       	ldi	r22, 0x05	; 5
    3794:	82 e6       	ldi	r24, 0x62	; 98
    3796:	93 e7       	ldi	r25, 0x73	; 115
    3798:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    379c:	ee ce       	rjmp	.-548    	; 0x357a <Castle()+0x42>
    379e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    37a2:	29 e0       	ldi	r18, 0x09	; 9
    37a4:	e2 2e       	mov	r14, r18
    37a6:	8c 01       	movw	r16, r24
    37a8:	20 e6       	ldi	r18, 0x60	; 96
    37aa:	3a ee       	ldi	r19, 0xEA	; 234
    37ac:	45 e4       	ldi	r20, 0x45	; 69
    37ae:	51 e0       	ldi	r21, 0x01	; 1
    37b0:	64 e6       	ldi	r22, 0x64	; 100
    37b2:	70 e0       	ldi	r23, 0x00	; 0
    37b4:	aa cf       	rjmp	.-172    	; 0x370a <Castle()+0x1d2>
    37b6:	60 e0       	ldi	r22, 0x00	; 0
    37b8:	8c ec       	ldi	r24, 0xCC	; 204
    37ba:	90 e1       	ldi	r25, 0x10	; 16
    37bc:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    37c0:	80 e0       	ldi	r24, 0x00	; 0
    37c2:	52 dc       	rcall	.-1884   	; 0x3068 <switchToSong(unsigned char)>
    37c4:	da ce       	rjmp	.-588    	; 0x357a <Castle()+0x42>

000037c6 <TooClose()>:
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
    37ca:	0f 93       	push	r16
    37cc:	1f 93       	push	r17
    37ce:	cf 93       	push	r28
    37d0:	df 93       	push	r29
    37d2:	00 d0       	rcall	.+0      	; 0x37d4 <TooClose()+0xe>
    37d4:	00 d0       	rcall	.+0      	; 0x37d6 <TooClose()+0x10>
    37d6:	00 d0       	rcall	.+0      	; 0x37d8 <TooClose()+0x12>
    37d8:	1f 92       	push	r1
    37da:	cd b7       	in	r28, 0x3d	; 61
    37dc:	de b7       	in	r29, 0x3e	; 62
    37de:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    37e2:	8e 31       	cpi	r24, 0x1E	; 30
    37e4:	09 f4       	brne	.+2      	; 0x37e8 <TooClose()+0x22>
    37e6:	9f c0       	rjmp	.+318    	; 0x3926 <TooClose()+0x160>
    37e8:	f0 f5       	brcc	.+124    	; 0x3866 <TooClose()+0xa0>
    37ea:	8a 30       	cpi	r24, 0x0A	; 10
    37ec:	09 f4       	brne	.+2      	; 0x37f0 <TooClose()+0x2a>
    37ee:	7d c0       	rjmp	.+250    	; 0x38ea <TooClose()+0x124>
    37f0:	60 f5       	brcc	.+88     	; 0x384a <TooClose()+0x84>
    37f2:	82 30       	cpi	r24, 0x02	; 2
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <TooClose()+0x32>
    37f6:	69 c0       	rjmp	.+210    	; 0x38ca <TooClose()+0x104>
    37f8:	85 30       	cpi	r24, 0x05	; 5
    37fa:	09 f4       	brne	.+2      	; 0x37fe <TooClose()+0x38>
    37fc:	6e c0       	rjmp	.+220    	; 0x38da <TooClose()+0x114>
    37fe:	81 11       	cpse	r24, r1
    3800:	17 c0       	rjmp	.+46     	; 0x3830 <TooClose()+0x6a>
    3802:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3806:	7c 01       	movw	r14, r24
    3808:	67 e8       	ldi	r22, 0x87	; 135
    380a:	71 e0       	ldi	r23, 0x01	; 1
    380c:	ce 01       	movw	r24, r28
    380e:	01 96       	adiw	r24, 0x01	; 1
    3810:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    3814:	02 e0       	ldi	r16, 0x02	; 2
    3816:	97 01       	movw	r18, r14
    3818:	4b e4       	ldi	r20, 0x4B	; 75
    381a:	50 e0       	ldi	r21, 0x00	; 0
    381c:	61 e8       	ldi	r22, 0x81	; 129
    381e:	7e e2       	ldi	r23, 0x2E	; 46
    3820:	ce 01       	movw	r24, r28
    3822:	01 96       	adiw	r24, 0x01	; 1
    3824:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3828:	ce 01       	movw	r24, r28
    382a:	01 96       	adiw	r24, 0x01	; 1
    382c:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    3830:	27 96       	adiw	r28, 0x07	; 7
    3832:	0f b6       	in	r0, 0x3f	; 63
    3834:	f8 94       	cli
    3836:	de bf       	out	0x3e, r29	; 62
    3838:	0f be       	out	0x3f, r0	; 63
    383a:	cd bf       	out	0x3d, r28	; 61
    383c:	df 91       	pop	r29
    383e:	cf 91       	pop	r28
    3840:	1f 91       	pop	r17
    3842:	0f 91       	pop	r16
    3844:	ff 90       	pop	r15
    3846:	ef 90       	pop	r14
    3848:	08 95       	ret
    384a:	84 31       	cpi	r24, 0x14	; 20
    384c:	09 f4       	brne	.+2      	; 0x3850 <TooClose()+0x8a>
    384e:	55 c0       	rjmp	.+170    	; 0x38fa <TooClose()+0x134>
    3850:	89 31       	cpi	r24, 0x19	; 25
    3852:	09 f4       	brne	.+2      	; 0x3856 <TooClose()+0x90>
    3854:	58 c0       	rjmp	.+176    	; 0x3906 <TooClose()+0x140>
    3856:	8f 30       	cpi	r24, 0x0F	; 15
    3858:	59 f7       	brne	.-42     	; 0x3830 <TooClose()+0x6a>
    385a:	46 eb       	ldi	r20, 0xB6	; 182
    385c:	53 e0       	ldi	r21, 0x03	; 3
    385e:	64 e1       	ldi	r22, 0x14	; 20
    3860:	89 e7       	ldi	r24, 0x79	; 121
    3862:	9b e3       	ldi	r25, 0x3B	; 59
    3864:	37 c0       	rjmp	.+110    	; 0x38d4 <TooClose()+0x10e>
    3866:	82 33       	cpi	r24, 0x32	; 50
    3868:	09 f4       	brne	.+2      	; 0x386c <TooClose()+0xa6>
    386a:	72 c0       	rjmp	.+228    	; 0x3950 <TooClose()+0x18a>
    386c:	b8 f4       	brcc	.+46     	; 0x389c <TooClose()+0xd6>
    386e:	88 32       	cpi	r24, 0x28	; 40
    3870:	09 f4       	brne	.+2      	; 0x3874 <TooClose()+0xae>
    3872:	61 c0       	rjmp	.+194    	; 0x3936 <TooClose()+0x170>
    3874:	8d 32       	cpi	r24, 0x2D	; 45
    3876:	09 f4       	brne	.+2      	; 0x387a <TooClose()+0xb4>
    3878:	64 c0       	rjmp	.+200    	; 0x3942 <TooClose()+0x17c>
    387a:	83 32       	cpi	r24, 0x23	; 35
    387c:	c9 f6       	brne	.-78     	; 0x3830 <TooClose()+0x6a>
    387e:	ee 24       	eor	r14, r14
    3880:	ea 94       	dec	r14
    3882:	f1 2c       	mov	r15, r1
    3884:	0f ef       	ldi	r16, 0xFF	; 255
    3886:	10 e0       	ldi	r17, 0x00	; 0
    3888:	2f ef       	ldi	r18, 0xFF	; 255
    388a:	30 e0       	ldi	r19, 0x00	; 0
    388c:	4b e4       	ldi	r20, 0x4B	; 75
    388e:	50 e0       	ldi	r21, 0x00	; 0
    3890:	68 e2       	ldi	r22, 0x28	; 40
    3892:	89 e7       	ldi	r24, 0x79	; 121
    3894:	9b e3       	ldi	r25, 0x3B	; 59
    3896:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    389a:	ca cf       	rjmp	.-108    	; 0x3830 <TooClose()+0x6a>
    389c:	8c 33       	cpi	r24, 0x3C	; 60
    389e:	09 f4       	brne	.+2      	; 0x38a2 <TooClose()+0xdc>
    38a0:	5d c0       	rjmp	.+186    	; 0x395c <TooClose()+0x196>
    38a2:	84 36       	cpi	r24, 0x64	; 100
    38a4:	09 f4       	brne	.+2      	; 0x38a8 <TooClose()+0xe2>
    38a6:	62 c0       	rjmp	.+196    	; 0x396c <TooClose()+0x1a6>
    38a8:	87 33       	cpi	r24, 0x37	; 55
    38aa:	11 f6       	brne	.-124    	; 0x3830 <TooClose()+0x6a>
    38ac:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    38b0:	7c 01       	movw	r14, r24
    38b2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    38b6:	8c 01       	movw	r16, r24
    38b8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    38bc:	9c 01       	movw	r18, r24
    38be:	4b e4       	ldi	r20, 0x4B	; 75
    38c0:	50 e0       	ldi	r21, 0x00	; 0
    38c2:	6c e3       	ldi	r22, 0x3C	; 60
    38c4:	80 eb       	ldi	r24, 0xB0	; 176
    38c6:	9d e1       	ldi	r25, 0x1D	; 29
    38c8:	e6 cf       	rjmp	.-52     	; 0x3896 <TooClose()+0xd0>
    38ca:	46 eb       	ldi	r20, 0xB6	; 182
    38cc:	53 e0       	ldi	r21, 0x03	; 3
    38ce:	65 e0       	ldi	r22, 0x05	; 5
    38d0:	82 e7       	ldi	r24, 0x72	; 114
    38d2:	94 e6       	ldi	r25, 0x64	; 100
    38d4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    38d8:	ab cf       	rjmp	.-170    	; 0x3830 <TooClose()+0x6a>
    38da:	4b ed       	ldi	r20, 0xDB	; 219
    38dc:	51 e0       	ldi	r21, 0x01	; 1
    38de:	6a e0       	ldi	r22, 0x0A	; 10
    38e0:	84 e8       	ldi	r24, 0x84	; 132
    38e2:	92 eb       	ldi	r25, 0xB2	; 178
    38e4:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    38e8:	a3 cf       	rjmp	.-186    	; 0x3830 <TooClose()+0x6a>
    38ea:	46 eb       	ldi	r20, 0xB6	; 182
    38ec:	53 e0       	ldi	r21, 0x03	; 3
    38ee:	6f e0       	ldi	r22, 0x0F	; 15
    38f0:	8b e0       	ldi	r24, 0x0B	; 11
    38f2:	97 e7       	ldi	r25, 0x77	; 119
    38f4:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    38f8:	9b cf       	rjmp	.-202    	; 0x3830 <TooClose()+0x6a>
    38fa:	4b ed       	ldi	r20, 0xDB	; 219
    38fc:	51 e0       	ldi	r21, 0x01	; 1
    38fe:	69 e1       	ldi	r22, 0x19	; 25
    3900:	8b e0       	ldi	r24, 0x0B	; 11
    3902:	97 e7       	ldi	r25, 0x77	; 119
    3904:	ef cf       	rjmp	.-34     	; 0x38e4 <TooClose()+0x11e>
    3906:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    390a:	2e e1       	ldi	r18, 0x1E	; 30
    390c:	e2 2e       	mov	r14, r18
    390e:	8c 01       	movw	r16, r24
    3910:	2b e2       	ldi	r18, 0x2B	; 43
    3912:	36 e1       	ldi	r19, 0x16	; 22
    3914:	4b ed       	ldi	r20, 0xDB	; 219
    3916:	51 e0       	ldi	r21, 0x01	; 1
    3918:	6a e0       	ldi	r22, 0x0A	; 10
    391a:	70 e0       	ldi	r23, 0x00	; 0
    391c:	86 e2       	ldi	r24, 0x26	; 38
    391e:	9a e0       	ldi	r25, 0x0A	; 10
    3920:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    3924:	85 cf       	rjmp	.-246    	; 0x3830 <TooClose()+0x6a>
    3926:	43 e2       	ldi	r20, 0x23	; 35
    3928:	6c e6       	ldi	r22, 0x6C	; 108
    392a:	77 e0       	ldi	r23, 0x07	; 7
    392c:	87 ec       	ldi	r24, 0xC7	; 199
    392e:	90 e6       	ldi	r25, 0x60	; 96
    3930:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    3934:	7d cf       	rjmp	.-262    	; 0x3830 <TooClose()+0x6a>
    3936:	48 eb       	ldi	r20, 0xB8	; 184
    3938:	53 e0       	ldi	r21, 0x03	; 3
    393a:	6d e2       	ldi	r22, 0x2D	; 45
    393c:	89 e7       	ldi	r24, 0x79	; 121
    393e:	9b e3       	ldi	r25, 0x3B	; 59
    3940:	d9 cf       	rjmp	.-78     	; 0x38f4 <TooClose()+0x12e>
    3942:	42 e3       	ldi	r20, 0x32	; 50
    3944:	65 e0       	ldi	r22, 0x05	; 5
    3946:	80 eb       	ldi	r24, 0xB0	; 176
    3948:	9d e1       	ldi	r25, 0x1D	; 29
    394a:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    394e:	70 cf       	rjmp	.-288    	; 0x3830 <TooClose()+0x6a>
    3950:	46 eb       	ldi	r20, 0xB6	; 182
    3952:	53 e0       	ldi	r21, 0x03	; 3
    3954:	67 e3       	ldi	r22, 0x37	; 55
    3956:	80 eb       	ldi	r24, 0xB0	; 176
    3958:	9d e1       	ldi	r25, 0x1D	; 29
    395a:	cc cf       	rjmp	.-104    	; 0x38f4 <TooClose()+0x12e>
    395c:	49 ec       	ldi	r20, 0xC9	; 201
    395e:	5d e1       	ldi	r21, 0x1D	; 29
    3960:	64 e6       	ldi	r22, 0x64	; 100
    3962:	8f ef       	ldi	r24, 0xFF	; 255
    3964:	9f ef       	ldi	r25, 0xFF	; 255
    3966:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    396a:	62 cf       	rjmp	.-316    	; 0x3830 <TooClose()+0x6a>
    396c:	60 e0       	ldi	r22, 0x00	; 0
    396e:	8c ec       	ldi	r24, 0xCC	; 204
    3970:	90 e1       	ldi	r25, 0x10	; 16
    3972:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    3976:	80 e0       	ldi	r24, 0x00	; 0
    3978:	77 db       	rcall	.-2322   	; 0x3068 <switchToSong(unsigned char)>
    397a:	5a cf       	rjmp	.-332    	; 0x3830 <TooClose()+0x6a>

0000397c <Pokerface()>:
    397c:	ef 92       	push	r14
    397e:	ff 92       	push	r15
    3980:	0f 93       	push	r16
    3982:	1f 93       	push	r17
    3984:	cf 93       	push	r28
    3986:	df 93       	push	r29
    3988:	00 d0       	rcall	.+0      	; 0x398a <Pokerface()+0xe>
    398a:	00 d0       	rcall	.+0      	; 0x398c <Pokerface()+0x10>
    398c:	00 d0       	rcall	.+0      	; 0x398e <Pokerface()+0x12>
    398e:	1f 92       	push	r1
    3990:	cd b7       	in	r28, 0x3d	; 61
    3992:	de b7       	in	r29, 0x3e	; 62
    3994:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3998:	8e 31       	cpi	r24, 0x1E	; 30
    399a:	09 f4       	brne	.+2      	; 0x399e <Pokerface()+0x22>
    399c:	af c0       	rjmp	.+350    	; 0x3afc <Pokerface()+0x180>
    399e:	a0 f5       	brcc	.+104    	; 0x3a08 <Pokerface()+0x8c>
    39a0:	85 30       	cpi	r24, 0x05	; 5
    39a2:	09 f4       	brne	.+2      	; 0x39a6 <Pokerface()+0x2a>
    39a4:	92 c0       	rjmp	.+292    	; 0x3aca <Pokerface()+0x14e>
    39a6:	b8 f4       	brcc	.+46     	; 0x39d6 <Pokerface()+0x5a>
    39a8:	81 30       	cpi	r24, 0x01	; 1
    39aa:	09 f4       	brne	.+2      	; 0x39ae <Pokerface()+0x32>
    39ac:	87 c0       	rjmp	.+270    	; 0x3abc <Pokerface()+0x140>
    39ae:	08 f4       	brcc	.+2      	; 0x39b2 <Pokerface()+0x36>
    39b0:	6d c0       	rjmp	.+218    	; 0x3a8c <Pokerface()+0x110>
    39b2:	45 e0       	ldi	r20, 0x05	; 5
    39b4:	64 e0       	ldi	r22, 0x04	; 4
    39b6:	82 30       	cpi	r24, 0x02	; 2
    39b8:	09 f4       	brne	.+2      	; 0x39bc <Pokerface()+0x40>
    39ba:	82 c0       	rjmp	.+260    	; 0x3ac0 <Pokerface()+0x144>
    39bc:	27 96       	adiw	r28, 0x07	; 7
    39be:	0f b6       	in	r0, 0x3f	; 63
    39c0:	f8 94       	cli
    39c2:	de bf       	out	0x3e, r29	; 62
    39c4:	0f be       	out	0x3f, r0	; 63
    39c6:	cd bf       	out	0x3d, r28	; 61
    39c8:	df 91       	pop	r29
    39ca:	cf 91       	pop	r28
    39cc:	1f 91       	pop	r17
    39ce:	0f 91       	pop	r16
    39d0:	ff 90       	pop	r15
    39d2:	ef 90       	pop	r14
    39d4:	08 95       	ret
    39d6:	8f 30       	cpi	r24, 0x0F	; 15
    39d8:	09 f4       	brne	.+2      	; 0x39dc <Pokerface()+0x60>
    39da:	7b c0       	rjmp	.+246    	; 0x3ad2 <Pokerface()+0x156>
    39dc:	40 f4       	brcc	.+16     	; 0x39ee <Pokerface()+0x72>
    39de:	8a 30       	cpi	r24, 0x0A	; 10
    39e0:	69 f7       	brne	.-38     	; 0x39bc <Pokerface()+0x40>
    39e2:	6f e0       	ldi	r22, 0x0F	; 15
    39e4:	86 e0       	ldi	r24, 0x06	; 6
    39e6:	9f e3       	ldi	r25, 0x3F	; 63
    39e8:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    39ec:	e7 cf       	rjmp	.-50     	; 0x39bc <Pokerface()+0x40>
    39ee:	84 31       	cpi	r24, 0x14	; 20
    39f0:	09 f4       	brne	.+2      	; 0x39f4 <Pokerface()+0x78>
    39f2:	73 c0       	rjmp	.+230    	; 0x3ada <Pokerface()+0x15e>
    39f4:	44 ef       	ldi	r20, 0xF4	; 244
    39f6:	51 e0       	ldi	r21, 0x01	; 1
    39f8:	6e e1       	ldi	r22, 0x1E	; 30
    39fa:	89 31       	cpi	r24, 0x19	; 25
    39fc:	f9 f6       	brne	.-66     	; 0x39bc <Pokerface()+0x40>
    39fe:	86 e0       	ldi	r24, 0x06	; 6
    3a00:	9f e3       	ldi	r25, 0x3F	; 63
    3a02:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3a06:	da cf       	rjmp	.-76     	; 0x39bc <Pokerface()+0x40>
    3a08:	87 33       	cpi	r24, 0x37	; 55
    3a0a:	09 f4       	brne	.+2      	; 0x3a0e <Pokerface()+0x92>
    3a0c:	8f c0       	rjmp	.+286    	; 0x3b2c <Pokerface()+0x1b0>
    3a0e:	d0 f4       	brcc	.+52     	; 0x3a44 <Pokerface()+0xc8>
    3a10:	88 32       	cpi	r24, 0x28	; 40
    3a12:	09 f4       	brne	.+2      	; 0x3a16 <Pokerface()+0x9a>
    3a14:	78 c0       	rjmp	.+240    	; 0x3b06 <Pokerface()+0x18a>
    3a16:	50 f4       	brcc	.+20     	; 0x3a2c <Pokerface()+0xb0>
    3a18:	44 ef       	ldi	r20, 0xF4	; 244
    3a1a:	51 e0       	ldi	r21, 0x01	; 1
    3a1c:	68 e2       	ldi	r22, 0x28	; 40
    3a1e:	83 32       	cpi	r24, 0x23	; 35
    3a20:	69 f6       	brne	.-102    	; 0x39bc <Pokerface()+0x40>
    3a22:	86 e0       	ldi	r24, 0x06	; 6
    3a24:	9f e3       	ldi	r25, 0x3F	; 63
    3a26:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3a2a:	c8 cf       	rjmp	.-112    	; 0x39bc <Pokerface()+0x40>
    3a2c:	8d 32       	cpi	r24, 0x2D	; 45
    3a2e:	09 f4       	brne	.+2      	; 0x3a32 <Pokerface()+0xb6>
    3a30:	77 c0       	rjmp	.+238    	; 0x3b20 <Pokerface()+0x1a4>
    3a32:	82 33       	cpi	r24, 0x32	; 50
    3a34:	19 f6       	brne	.-122    	; 0x39bc <Pokerface()+0x40>
    3a36:	47 e3       	ldi	r20, 0x37	; 55
    3a38:	67 e0       	ldi	r22, 0x07	; 7
    3a3a:	8d ef       	ldi	r24, 0xFD	; 253
    3a3c:	9e e3       	ldi	r25, 0x3E	; 62
    3a3e:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3a42:	bc cf       	rjmp	.-136    	; 0x39bc <Pokerface()+0x40>
    3a44:	81 34       	cpi	r24, 0x41	; 65
    3a46:	09 f4       	brne	.+2      	; 0x3a4a <Pokerface()+0xce>
    3a48:	75 c0       	rjmp	.+234    	; 0x3b34 <Pokerface()+0x1b8>
    3a4a:	90 f4       	brcc	.+36     	; 0x3a70 <Pokerface()+0xf4>
    3a4c:	8c 33       	cpi	r24, 0x3C	; 60
    3a4e:	09 f0       	breq	.+2      	; 0x3a52 <Pokerface()+0xd6>
    3a50:	b5 cf       	rjmp	.-150    	; 0x39bc <Pokerface()+0x40>
    3a52:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3a56:	7c 01       	movw	r14, r24
    3a58:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3a5c:	8c 01       	movw	r16, r24
    3a5e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3a62:	9c 01       	movw	r18, r24
    3a64:	4b e4       	ldi	r20, 0x4B	; 75
    3a66:	50 e0       	ldi	r21, 0x00	; 0
    3a68:	61 e4       	ldi	r22, 0x41	; 65
    3a6a:	84 e4       	ldi	r24, 0x44	; 68
    3a6c:	9f e2       	ldi	r25, 0x2F	; 47
    3a6e:	43 c0       	rjmp	.+134    	; 0x3af6 <Pokerface()+0x17a>
    3a70:	86 34       	cpi	r24, 0x46	; 70
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <Pokerface()+0xfa>
    3a74:	64 c0       	rjmp	.+200    	; 0x3b3e <Pokerface()+0x1c2>
    3a76:	84 36       	cpi	r24, 0x64	; 100
    3a78:	09 f0       	breq	.+2      	; 0x3a7c <Pokerface()+0x100>
    3a7a:	a0 cf       	rjmp	.-192    	; 0x39bc <Pokerface()+0x40>
    3a7c:	60 e0       	ldi	r22, 0x00	; 0
    3a7e:	8c ec       	ldi	r24, 0xCC	; 204
    3a80:	90 e1       	ldi	r25, 0x10	; 16
    3a82:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    3a86:	80 e0       	ldi	r24, 0x00	; 0
    3a88:	ef da       	rcall	.-2594   	; 0x3068 <switchToSong(unsigned char)>
    3a8a:	98 cf       	rjmp	.-208    	; 0x39bc <Pokerface()+0x40>
    3a8c:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3a90:	7c 01       	movw	r14, r24
    3a92:	6f e9       	ldi	r22, 0x9F	; 159
    3a94:	71 e0       	ldi	r23, 0x01	; 1
    3a96:	ce 01       	movw	r24, r28
    3a98:	01 96       	adiw	r24, 0x01	; 1
    3a9a:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    3a9e:	01 e0       	ldi	r16, 0x01	; 1
    3aa0:	97 01       	movw	r18, r14
    3aa2:	4b e4       	ldi	r20, 0x4B	; 75
    3aa4:	50 e0       	ldi	r21, 0x00	; 0
    3aa6:	6e e0       	ldi	r22, 0x0E	; 14
    3aa8:	7d e3       	ldi	r23, 0x3D	; 61
    3aaa:	ce 01       	movw	r24, r28
    3aac:	01 96       	adiw	r24, 0x01	; 1
    3aae:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3ab2:	ce 01       	movw	r24, r28
    3ab4:	01 96       	adiw	r24, 0x01	; 1
    3ab6:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    3aba:	80 cf       	rjmp	.-256    	; 0x39bc <Pokerface()+0x40>
    3abc:	42 e0       	ldi	r20, 0x02	; 2
    3abe:	63 e0       	ldi	r22, 0x03	; 3
    3ac0:	83 e8       	ldi	r24, 0x83	; 131
    3ac2:	9f e1       	ldi	r25, 0x1F	; 31
    3ac4:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    3ac8:	79 cf       	rjmp	.-270    	; 0x39bc <Pokerface()+0x40>
    3aca:	44 ef       	ldi	r20, 0xF4	; 244
    3acc:	51 e0       	ldi	r21, 0x01	; 1
    3ace:	6a e0       	ldi	r22, 0x0A	; 10
    3ad0:	96 cf       	rjmp	.-212    	; 0x39fe <Pokerface()+0x82>
    3ad2:	44 ef       	ldi	r20, 0xF4	; 244
    3ad4:	51 e0       	ldi	r21, 0x01	; 1
    3ad6:	64 e1       	ldi	r22, 0x14	; 20
    3ad8:	a4 cf       	rjmp	.-184    	; 0x3a22 <Pokerface()+0xa6>
    3ada:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ade:	7c 01       	movw	r14, r24
    3ae0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ae4:	8c 01       	movw	r16, r24
    3ae6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3aea:	9c 01       	movw	r18, r24
    3aec:	4b e4       	ldi	r20, 0x4B	; 75
    3aee:	50 e0       	ldi	r21, 0x00	; 0
    3af0:	69 e1       	ldi	r22, 0x19	; 25
    3af2:	86 e0       	ldi	r24, 0x06	; 6
    3af4:	9f e3       	ldi	r25, 0x3F	; 63
    3af6:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3afa:	60 cf       	rjmp	.-320    	; 0x39bc <Pokerface()+0x40>
    3afc:	43 e2       	ldi	r20, 0x23	; 35
    3afe:	64 e0       	ldi	r22, 0x04	; 4
    3b00:	86 e0       	ldi	r24, 0x06	; 6
    3b02:	9f e3       	ldi	r25, 0x3F	; 63
    3b04:	df cf       	rjmp	.-66     	; 0x3ac4 <Pokerface()+0x148>
    3b06:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3b0a:	7c 01       	movw	r14, r24
    3b0c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3b10:	8c 01       	movw	r16, r24
    3b12:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3b16:	9c 01       	movw	r18, r24
    3b18:	4b e4       	ldi	r20, 0x4B	; 75
    3b1a:	50 e0       	ldi	r21, 0x00	; 0
    3b1c:	6d e2       	ldi	r22, 0x2D	; 45
    3b1e:	e9 cf       	rjmp	.-46     	; 0x3af2 <Pokerface()+0x176>
    3b20:	62 e3       	ldi	r22, 0x32	; 50
    3b22:	82 e7       	ldi	r24, 0x72	; 114
    3b24:	9f e1       	ldi	r25, 0x1F	; 31
    3b26:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    3b2a:	48 cf       	rjmp	.-368    	; 0x39bc <Pokerface()+0x40>
    3b2c:	44 ef       	ldi	r20, 0xF4	; 244
    3b2e:	51 e0       	ldi	r21, 0x01	; 1
    3b30:	6c e3       	ldi	r22, 0x3C	; 60
    3b32:	77 cf       	rjmp	.-274    	; 0x3a22 <Pokerface()+0xa6>
    3b34:	46 e4       	ldi	r20, 0x46	; 70
    3b36:	6c e0       	ldi	r22, 0x0C	; 12
    3b38:	89 eb       	ldi	r24, 0xB9	; 185
    3b3a:	9f e0       	ldi	r25, 0x0F	; 15
    3b3c:	80 cf       	rjmp	.-256    	; 0x3a3e <Pokerface()+0xc2>
    3b3e:	64 e6       	ldi	r22, 0x64	; 100
    3b40:	80 e1       	ldi	r24, 0x10	; 16
    3b42:	97 e2       	ldi	r25, 0x27	; 39
    3b44:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    3b48:	39 cf       	rjmp	.-398    	; 0x39bc <Pokerface()+0x40>

00003b4a <UseSomebody()>:
    3b4a:	ef 92       	push	r14
    3b4c:	ff 92       	push	r15
    3b4e:	0f 93       	push	r16
    3b50:	1f 93       	push	r17
    3b52:	cf 93       	push	r28
    3b54:	df 93       	push	r29
    3b56:	00 d0       	rcall	.+0      	; 0x3b58 <UseSomebody()+0xe>
    3b58:	00 d0       	rcall	.+0      	; 0x3b5a <UseSomebody()+0x10>
    3b5a:	00 d0       	rcall	.+0      	; 0x3b5c <UseSomebody()+0x12>
    3b5c:	1f 92       	push	r1
    3b5e:	cd b7       	in	r28, 0x3d	; 61
    3b60:	de b7       	in	r29, 0x3e	; 62
    3b62:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3b66:	84 31       	cpi	r24, 0x14	; 20
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <UseSomebody()+0x22>
    3b6a:	75 c0       	rjmp	.+234    	; 0x3c56 <UseSomebody()+0x10c>
    3b6c:	48 f5       	brcc	.+82     	; 0x3bc0 <UseSomebody()+0x76>
    3b6e:	82 30       	cpi	r24, 0x02	; 2
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <UseSomebody()+0x2a>
    3b72:	5c c0       	rjmp	.+184    	; 0x3c2c <UseSomebody()+0xe2>
    3b74:	a8 f4       	brcc	.+42     	; 0x3ba0 <UseSomebody()+0x56>
    3b76:	88 23       	and	r24, r24
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <UseSomebody()+0x32>
    3b7a:	40 c0       	rjmp	.+128    	; 0x3bfc <UseSomebody()+0xb2>
    3b7c:	42 e0       	ldi	r20, 0x02	; 2
    3b7e:	63 e0       	ldi	r22, 0x03	; 3
    3b80:	81 30       	cpi	r24, 0x01	; 1
    3b82:	09 f4       	brne	.+2      	; 0x3b86 <UseSomebody()+0x3c>
    3b84:	7b c0       	rjmp	.+246    	; 0x3c7c <UseSomebody()+0x132>
    3b86:	27 96       	adiw	r28, 0x07	; 7
    3b88:	0f b6       	in	r0, 0x3f	; 63
    3b8a:	f8 94       	cli
    3b8c:	de bf       	out	0x3e, r29	; 62
    3b8e:	0f be       	out	0x3f, r0	; 63
    3b90:	cd bf       	out	0x3d, r28	; 61
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	1f 91       	pop	r17
    3b98:	0f 91       	pop	r16
    3b9a:	ff 90       	pop	r15
    3b9c:	ef 90       	pop	r14
    3b9e:	08 95       	ret
    3ba0:	8a 30       	cpi	r24, 0x0A	; 10
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <UseSomebody()+0x5c>
    3ba4:	4a c0       	rjmp	.+148    	; 0x3c3a <UseSomebody()+0xf0>
    3ba6:	8f 30       	cpi	r24, 0x0F	; 15
    3ba8:	09 f4       	brne	.+2      	; 0x3bac <UseSomebody()+0x62>
    3baa:	4d c0       	rjmp	.+154    	; 0x3c46 <UseSomebody()+0xfc>
    3bac:	85 30       	cpi	r24, 0x05	; 5
    3bae:	59 f7       	brne	.-42     	; 0x3b86 <UseSomebody()+0x3c>
    3bb0:	49 ea       	ldi	r20, 0xA9	; 169
    3bb2:	51 e0       	ldi	r21, 0x01	; 1
    3bb4:	6a e0       	ldi	r22, 0x0A	; 10
    3bb6:	82 eb       	ldi	r24, 0xB2	; 178
    3bb8:	9c e6       	ldi	r25, 0x6C	; 108
    3bba:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3bbe:	e3 cf       	rjmp	.-58     	; 0x3b86 <UseSomebody()+0x3c>
    3bc0:	88 32       	cpi	r24, 0x28	; 40
    3bc2:	09 f4       	brne	.+2      	; 0x3bc6 <UseSomebody()+0x7c>
    3bc4:	62 c0       	rjmp	.+196    	; 0x3c8a <UseSomebody()+0x140>
    3bc6:	60 f4       	brcc	.+24     	; 0x3be0 <UseSomebody()+0x96>
    3bc8:	8e 31       	cpi	r24, 0x1E	; 30
    3bca:	09 f4       	brne	.+2      	; 0x3bce <UseSomebody()+0x84>
    3bcc:	55 c0       	rjmp	.+170    	; 0x3c78 <UseSomebody()+0x12e>
    3bce:	83 32       	cpi	r24, 0x23	; 35
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <UseSomebody()+0x8a>
    3bd2:	57 c0       	rjmp	.+174    	; 0x3c82 <UseSomebody()+0x138>
    3bd4:	89 31       	cpi	r24, 0x19	; 25
    3bd6:	b9 f6       	brne	.-82     	; 0x3b86 <UseSomebody()+0x3c>
    3bd8:	49 ea       	ldi	r20, 0xA9	; 169
    3bda:	51 e0       	ldi	r21, 0x01	; 1
    3bdc:	6e e1       	ldi	r22, 0x1E	; 30
    3bde:	eb cf       	rjmp	.-42     	; 0x3bb6 <UseSomebody()+0x6c>
    3be0:	86 34       	cpi	r24, 0x46	; 70
    3be2:	09 f4       	brne	.+2      	; 0x3be6 <UseSomebody()+0x9c>
    3be4:	61 c0       	rjmp	.+194    	; 0x3ca8 <UseSomebody()+0x15e>
    3be6:	84 36       	cpi	r24, 0x64	; 100
    3be8:	09 f4       	brne	.+2      	; 0x3bec <UseSomebody()+0xa2>
    3bea:	64 c0       	rjmp	.+200    	; 0x3cb4 <UseSomebody()+0x16a>
    3bec:	8d 32       	cpi	r24, 0x2D	; 45
    3bee:	59 f6       	brne	.-106    	; 0x3b86 <UseSomebody()+0x3c>
    3bf0:	66 e4       	ldi	r22, 0x46	; 70
    3bf2:	89 e5       	ldi	r24, 0x59	; 89
    3bf4:	96 e3       	ldi	r25, 0x36	; 54
    3bf6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    3bfa:	c5 cf       	rjmp	.-118    	; 0x3b86 <UseSomebody()+0x3c>
    3bfc:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3c00:	7c 01       	movw	r14, r24
    3c02:	66 eb       	ldi	r22, 0xB6	; 182
    3c04:	71 e0       	ldi	r23, 0x01	; 1
    3c06:	ce 01       	movw	r24, r28
    3c08:	01 96       	adiw	r24, 0x01	; 1
    3c0a:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    3c0e:	01 e0       	ldi	r16, 0x01	; 1
    3c10:	97 01       	movw	r18, r14
    3c12:	4b e4       	ldi	r20, 0x4B	; 75
    3c14:	50 e0       	ldi	r21, 0x00	; 0
    3c16:	63 ed       	ldi	r22, 0xD3	; 211
    3c18:	7f e4       	ldi	r23, 0x4F	; 79
    3c1a:	ce 01       	movw	r24, r28
    3c1c:	01 96       	adiw	r24, 0x01	; 1
    3c1e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3c22:	ce 01       	movw	r24, r28
    3c24:	01 96       	adiw	r24, 0x01	; 1
    3c26:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    3c2a:	ad cf       	rjmp	.-166    	; 0x3b86 <UseSomebody()+0x3c>
    3c2c:	45 e0       	ldi	r20, 0x05	; 5
    3c2e:	64 e0       	ldi	r22, 0x04	; 4
    3c30:	82 eb       	ldi	r24, 0xB2	; 178
    3c32:	9c e6       	ldi	r25, 0x6C	; 108
    3c34:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    3c38:	a6 cf       	rjmp	.-180    	; 0x3b86 <UseSomebody()+0x3c>
    3c3a:	6f e0       	ldi	r22, 0x0F	; 15
    3c3c:	82 eb       	ldi	r24, 0xB2	; 178
    3c3e:	9c e6       	ldi	r25, 0x6C	; 108
    3c40:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    3c44:	a0 cf       	rjmp	.-192    	; 0x3b86 <UseSomebody()+0x3c>
    3c46:	49 ea       	ldi	r20, 0xA9	; 169
    3c48:	51 e0       	ldi	r21, 0x01	; 1
    3c4a:	64 e1       	ldi	r22, 0x14	; 20
    3c4c:	89 e5       	ldi	r24, 0x59	; 89
    3c4e:	96 e3       	ldi	r25, 0x36	; 54
    3c50:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3c54:	98 cf       	rjmp	.-208    	; 0x3b86 <UseSomebody()+0x3c>
    3c56:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3c5a:	7c 01       	movw	r14, r24
    3c5c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3c60:	8c 01       	movw	r16, r24
    3c62:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3c66:	9c 01       	movw	r18, r24
    3c68:	4b e4       	ldi	r20, 0x4B	; 75
    3c6a:	50 e0       	ldi	r21, 0x00	; 0
    3c6c:	69 e1       	ldi	r22, 0x19	; 25
    3c6e:	89 e5       	ldi	r24, 0x59	; 89
    3c70:	96 e3       	ldi	r25, 0x36	; 54
    3c72:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3c76:	87 cf       	rjmp	.-242    	; 0x3b86 <UseSomebody()+0x3c>
    3c78:	43 e2       	ldi	r20, 0x23	; 35
    3c7a:	64 e0       	ldi	r22, 0x04	; 4
    3c7c:	89 e5       	ldi	r24, 0x59	; 89
    3c7e:	96 e3       	ldi	r25, 0x36	; 54
    3c80:	d9 cf       	rjmp	.-78     	; 0x3c34 <UseSomebody()+0xea>
    3c82:	49 ea       	ldi	r20, 0xA9	; 169
    3c84:	51 e0       	ldi	r21, 0x01	; 1
    3c86:	68 e2       	ldi	r22, 0x28	; 40
    3c88:	e1 cf       	rjmp	.-62     	; 0x3c4c <UseSomebody()+0x102>
    3c8a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3c8e:	7c 01       	movw	r14, r24
    3c90:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3c94:	8c 01       	movw	r16, r24
    3c96:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3c9a:	9c 01       	movw	r18, r24
    3c9c:	4b e4       	ldi	r20, 0x4B	; 75
    3c9e:	50 e0       	ldi	r21, 0x00	; 0
    3ca0:	6d e2       	ldi	r22, 0x2D	; 45
    3ca2:	8f ee       	ldi	r24, 0xEF	; 239
    3ca4:	93 e4       	ldi	r25, 0x43	; 67
    3ca6:	e5 cf       	rjmp	.-54     	; 0x3c72 <UseSomebody()+0x128>
    3ca8:	64 e6       	ldi	r22, 0x64	; 100
    3caa:	80 e1       	ldi	r24, 0x10	; 16
    3cac:	97 e2       	ldi	r25, 0x27	; 39
    3cae:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    3cb2:	69 cf       	rjmp	.-302    	; 0x3b86 <UseSomebody()+0x3c>
    3cb4:	60 e0       	ldi	r22, 0x00	; 0
    3cb6:	8c ec       	ldi	r24, 0xCC	; 204
    3cb8:	90 e1       	ldi	r25, 0x10	; 16
    3cba:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    3cbe:	80 e0       	ldi	r24, 0x00	; 0
    3cc0:	d3 d9       	rcall	.-3162   	; 0x3068 <switchToSong(unsigned char)>
    3cc2:	61 cf       	rjmp	.-318    	; 0x3b86 <UseSomebody()+0x3c>

00003cc4 <NoRoots()>:
    3cc4:	ef 92       	push	r14
    3cc6:	ff 92       	push	r15
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
    3cd0:	00 d0       	rcall	.+0      	; 0x3cd2 <NoRoots()+0xe>
    3cd2:	00 d0       	rcall	.+0      	; 0x3cd4 <NoRoots()+0x10>
    3cd4:	00 d0       	rcall	.+0      	; 0x3cd6 <NoRoots()+0x12>
    3cd6:	1f 92       	push	r1
    3cd8:	cd b7       	in	r28, 0x3d	; 61
    3cda:	de b7       	in	r29, 0x3e	; 62
    3cdc:	e0 91 b7 0a 	lds	r30, 0x0AB7	; 0x800ab7 <prog>
    3ce0:	e5 36       	cpi	r30, 0x65	; 101
    3ce2:	08 f0       	brcs	.+2      	; 0x3ce6 <NoRoots()+0x22>
    3ce4:	81 c0       	rjmp	.+258    	; 0x3de8 <NoRoots()+0x124>
    3ce6:	f0 e0       	ldi	r31, 0x00	; 0
    3ce8:	e8 58       	subi	r30, 0x88	; 136
    3cea:	f1 4e       	sbci	r31, 0xE1	; 225
    3cec:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    3cf0:	dd 1e       	adc	r13, r29
    3cf2:	01 1f       	adc	r16, r17
    3cf4:	08 1f       	adc	r16, r24
    3cf6:	f4 1e       	adc	r15, r20
    3cf8:	f4 1e       	adc	r15, r20
    3cfa:	0d 1f       	adc	r16, r29
    3cfc:	15 1f       	adc	r17, r21
    3cfe:	1b 1f       	adc	r17, r27
    3d00:	21 1f       	adc	r18, r17
    3d02:	27 1f       	adc	r18, r23
    3d04:	29 1f       	adc	r18, r25
    3d06:	31 1f       	adc	r19, r17
    3d08:	42 1f       	adc	r20, r18
    3d0a:	44 1f       	adc	r20, r20
    3d0c:	48 1f       	adc	r20, r24
    3d0e:	4a 1f       	adc	r20, r26
    3d10:	f4 1e       	adc	r15, r20
    3d12:	f4 1e       	adc	r15, r20
    3d14:	4e 1f       	adc	r20, r30
    3d16:	f4 1e       	adc	r15, r20
    3d18:	5d 1f       	adc	r21, r29
    3d1a:	f4 1e       	adc	r15, r20
    3d1c:	f4 1e       	adc	r15, r20
    3d1e:	f4 1e       	adc	r15, r20
    3d20:	f4 1e       	adc	r15, r20
    3d22:	60 1f       	adc	r22, r16
    3d24:	f4 1e       	adc	r15, r20
    3d26:	64 1f       	adc	r22, r20
    3d28:	f4 1e       	adc	r15, r20
    3d2a:	69 1f       	adc	r22, r25
    3d2c:	f4 1e       	adc	r15, r20
    3d2e:	6b 1f       	adc	r22, r27
    3d30:	f4 1e       	adc	r15, r20
    3d32:	6f 1f       	adc	r22, r31
    3d34:	f4 1e       	adc	r15, r20
    3d36:	71 1f       	adc	r23, r17
    3d38:	f4 1e       	adc	r15, r20
    3d3a:	75 1f       	adc	r23, r21
    3d3c:	f4 1e       	adc	r15, r20
    3d3e:	82 1f       	adc	r24, r18
    3d40:	f4 1e       	adc	r15, r20
    3d42:	84 1f       	adc	r24, r20
    3d44:	f4 1e       	adc	r15, r20
    3d46:	88 1f       	adc	r24, r24
    3d48:	f4 1e       	adc	r15, r20
    3d4a:	8a 1f       	adc	r24, r26
    3d4c:	f4 1e       	adc	r15, r20
    3d4e:	8e 1f       	adc	r24, r30
    3d50:	f4 1e       	adc	r15, r20
    3d52:	9b 1f       	adc	r25, r27
    3d54:	f4 1e       	adc	r15, r20
    3d56:	a1 1f       	adc	r26, r17
    3d58:	f4 1e       	adc	r15, r20
    3d5a:	a7 1f       	adc	r26, r23
    3d5c:	f4 1e       	adc	r15, r20
    3d5e:	af 1f       	adc	r26, r31
    3d60:	f4 1e       	adc	r15, r20
    3d62:	b6 1f       	adc	r27, r22
    3d64:	f4 1e       	adc	r15, r20
    3d66:	ba 1f       	adc	r27, r26
    3d68:	f4 1e       	adc	r15, r20
    3d6a:	bf 1f       	adc	r27, r31
    3d6c:	f4 1e       	adc	r15, r20
    3d6e:	f4 1e       	adc	r15, r20
    3d70:	f4 1e       	adc	r15, r20
    3d72:	f4 1e       	adc	r15, r20
    3d74:	f4 1e       	adc	r15, r20
    3d76:	f4 1e       	adc	r15, r20
    3d78:	f4 1e       	adc	r15, r20
    3d7a:	f4 1e       	adc	r15, r20
    3d7c:	f4 1e       	adc	r15, r20
    3d7e:	f4 1e       	adc	r15, r20
    3d80:	f4 1e       	adc	r15, r20
    3d82:	f4 1e       	adc	r15, r20
    3d84:	f4 1e       	adc	r15, r20
    3d86:	f4 1e       	adc	r15, r20
    3d88:	f4 1e       	adc	r15, r20
    3d8a:	f4 1e       	adc	r15, r20
    3d8c:	f4 1e       	adc	r15, r20
    3d8e:	f4 1e       	adc	r15, r20
    3d90:	f4 1e       	adc	r15, r20
    3d92:	f4 1e       	adc	r15, r20
    3d94:	f4 1e       	adc	r15, r20
    3d96:	f4 1e       	adc	r15, r20
    3d98:	f4 1e       	adc	r15, r20
    3d9a:	f4 1e       	adc	r15, r20
    3d9c:	f4 1e       	adc	r15, r20
    3d9e:	f4 1e       	adc	r15, r20
    3da0:	f4 1e       	adc	r15, r20
    3da2:	f4 1e       	adc	r15, r20
    3da4:	f4 1e       	adc	r15, r20
    3da6:	f4 1e       	adc	r15, r20
    3da8:	f4 1e       	adc	r15, r20
    3daa:	f4 1e       	adc	r15, r20
    3dac:	f4 1e       	adc	r15, r20
    3dae:	f4 1e       	adc	r15, r20
    3db0:	f4 1e       	adc	r15, r20
    3db2:	f4 1e       	adc	r15, r20
    3db4:	f4 1e       	adc	r15, r20
    3db6:	f4 1e       	adc	r15, r20
    3db8:	c3 1f       	adc	r28, r19
    3dba:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3dbe:	7c 01       	movw	r14, r24
    3dc0:	64 ed       	ldi	r22, 0xD4	; 212
    3dc2:	71 e0       	ldi	r23, 0x01	; 1
    3dc4:	ce 01       	movw	r24, r28
    3dc6:	01 96       	adiw	r24, 0x01	; 1
    3dc8:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    3dcc:	01 e0       	ldi	r16, 0x01	; 1
    3dce:	97 01       	movw	r18, r14
    3dd0:	4b e4       	ldi	r20, 0x4B	; 75
    3dd2:	50 e0       	ldi	r21, 0x00	; 0
    3dd4:	69 e7       	ldi	r22, 0x79	; 121
    3dd6:	7e e2       	ldi	r23, 0x2E	; 46
    3dd8:	ce 01       	movw	r24, r28
    3dda:	01 96       	adiw	r24, 0x01	; 1
    3ddc:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3de0:	ce 01       	movw	r24, r28
    3de2:	01 96       	adiw	r24, 0x01	; 1
    3de4:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    3de8:	27 96       	adiw	r28, 0x07	; 7
    3dea:	0f b6       	in	r0, 0x3f	; 63
    3dec:	f8 94       	cli
    3dee:	de bf       	out	0x3e, r29	; 62
    3df0:	0f be       	out	0x3f, r0	; 63
    3df2:	cd bf       	out	0x3d, r28	; 61
    3df4:	df 91       	pop	r29
    3df6:	cf 91       	pop	r28
    3df8:	1f 91       	pop	r17
    3dfa:	0f 91       	pop	r16
    3dfc:	ff 90       	pop	r15
    3dfe:	ef 90       	pop	r14
    3e00:	08 95       	ret
    3e02:	42 e0       	ldi	r20, 0x02	; 2
    3e04:	67 e0       	ldi	r22, 0x07	; 7
    3e06:	83 e5       	ldi	r24, 0x53	; 83
    3e08:	90 e2       	ldi	r25, 0x20	; 32
    3e0a:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    3e0e:	ec cf       	rjmp	.-40     	; 0x3de8 <NoRoots()+0x124>
    3e10:	45 e0       	ldi	r20, 0x05	; 5
    3e12:	66 e0       	ldi	r22, 0x06	; 6
    3e14:	86 ea       	ldi	r24, 0xA6	; 166
    3e16:	90 e4       	ldi	r25, 0x40	; 64
    3e18:	f8 cf       	rjmp	.-16     	; 0x3e0a <NoRoots()+0x146>
    3e1a:	44 ef       	ldi	r20, 0xF4	; 244
    3e1c:	51 e0       	ldi	r21, 0x01	; 1
    3e1e:	66 e0       	ldi	r22, 0x06	; 6
    3e20:	86 ea       	ldi	r24, 0xA6	; 166
    3e22:	90 e4       	ldi	r25, 0x40	; 64
    3e24:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3e28:	df cf       	rjmp	.-66     	; 0x3de8 <NoRoots()+0x124>
    3e2a:	67 e0       	ldi	r22, 0x07	; 7
    3e2c:	86 e4       	ldi	r24, 0x46	; 70
    3e2e:	9e e1       	ldi	r25, 0x1E	; 30
    3e30:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    3e34:	d9 cf       	rjmp	.-78     	; 0x3de8 <NoRoots()+0x124>
    3e36:	68 e0       	ldi	r22, 0x08	; 8
    3e38:	8e e0       	ldi	r24, 0x0E	; 14
    3e3a:	96 e0       	ldi	r25, 0x06	; 6
    3e3c:	0e 94 16 10 	call	0x202c	; 0x202c <progShowROOTS(unsigned int, unsigned char)>
    3e40:	d3 cf       	rjmp	.-90     	; 0x3de8 <NoRoots()+0x124>
    3e42:	44 ef       	ldi	r20, 0xF4	; 244
    3e44:	51 e0       	ldi	r21, 0x01	; 1
    3e46:	69 e0       	ldi	r22, 0x09	; 9
    3e48:	8f e0       	ldi	r24, 0x0F	; 15
    3e4a:	9a e0       	ldi	r25, 0x0A	; 10
    3e4c:	07 c0       	rjmp	.+14     	; 0x3e5c <NoRoots()+0x198>
    3e4e:	6a e0       	ldi	r22, 0x0A	; 10
    3e50:	f3 cf       	rjmp	.-26     	; 0x3e38 <NoRoots()+0x174>
    3e52:	44 ef       	ldi	r20, 0xF4	; 244
    3e54:	51 e0       	ldi	r21, 0x01	; 1
    3e56:	6b e0       	ldi	r22, 0x0B	; 11
    3e58:	8c e1       	ldi	r24, 0x1C	; 28
    3e5a:	9c e0       	ldi	r25, 0x0C	; 12
    3e5c:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3e60:	c3 cf       	rjmp	.-122    	; 0x3de8 <NoRoots()+0x124>
    3e62:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3e66:	7c 01       	movw	r14, r24
    3e68:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3e6c:	8c 01       	movw	r16, r24
    3e6e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3e72:	9c 01       	movw	r18, r24
    3e74:	4b e4       	ldi	r20, 0x4B	; 75
    3e76:	50 e0       	ldi	r21, 0x00	; 0
    3e78:	6c e0       	ldi	r22, 0x0C	; 12
    3e7a:	86 e4       	ldi	r24, 0x46	; 70
    3e7c:	9e e1       	ldi	r25, 0x1E	; 30
    3e7e:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3e82:	b2 cf       	rjmp	.-156    	; 0x3de8 <NoRoots()+0x124>
    3e84:	6d e0       	ldi	r22, 0x0D	; 13
    3e86:	d8 cf       	rjmp	.-80     	; 0x3e38 <NoRoots()+0x174>
    3e88:	44 ef       	ldi	r20, 0xF4	; 244
    3e8a:	51 e0       	ldi	r21, 0x01	; 1
    3e8c:	6e e0       	ldi	r22, 0x0E	; 14
    3e8e:	dc cf       	rjmp	.-72     	; 0x3e48 <NoRoots()+0x184>
    3e90:	6f e0       	ldi	r22, 0x0F	; 15
    3e92:	d2 cf       	rjmp	.-92     	; 0x3e38 <NoRoots()+0x174>
    3e94:	44 ef       	ldi	r20, 0xF4	; 244
    3e96:	51 e0       	ldi	r21, 0x01	; 1
    3e98:	62 e1       	ldi	r22, 0x12	; 18
    3e9a:	de cf       	rjmp	.-68     	; 0x3e58 <NoRoots()+0x194>
    3e9c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ea0:	7c 01       	movw	r14, r24
    3ea2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ea6:	8c 01       	movw	r16, r24
    3ea8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3eac:	9c 01       	movw	r18, r24
    3eae:	4b e4       	ldi	r20, 0x4B	; 75
    3eb0:	50 e0       	ldi	r21, 0x00	; 0
    3eb2:	64 e1       	ldi	r22, 0x14	; 20
    3eb4:	83 e5       	ldi	r24, 0x53	; 83
    3eb6:	90 e2       	ldi	r25, 0x20	; 32
    3eb8:	e2 cf       	rjmp	.-60     	; 0x3e7e <NoRoots()+0x1ba>
    3eba:	49 e1       	ldi	r20, 0x19	; 25
    3ebc:	68 e0       	ldi	r22, 0x08	; 8
    3ebe:	aa cf       	rjmp	.-172    	; 0x3e14 <NoRoots()+0x150>
    3ec0:	44 ef       	ldi	r20, 0xF4	; 244
    3ec2:	51 e0       	ldi	r21, 0x01	; 1
    3ec4:	6b e1       	ldi	r22, 0x1B	; 27
    3ec6:	ac cf       	rjmp	.-168    	; 0x3e20 <NoRoots()+0x15c>
    3ec8:	4d e1       	ldi	r20, 0x1D	; 29
    3eca:	64 e0       	ldi	r22, 0x04	; 4
    3ecc:	86 e4       	ldi	r24, 0x46	; 70
    3ece:	9e e1       	ldi	r25, 0x1E	; 30
    3ed0:	9c cf       	rjmp	.-200    	; 0x3e0a <NoRoots()+0x146>
    3ed2:	6f e1       	ldi	r22, 0x1F	; 31
    3ed4:	b1 cf       	rjmp	.-158    	; 0x3e38 <NoRoots()+0x174>
    3ed6:	44 ef       	ldi	r20, 0xF4	; 244
    3ed8:	51 e0       	ldi	r21, 0x01	; 1
    3eda:	61 e2       	ldi	r22, 0x21	; 33
    3edc:	b5 cf       	rjmp	.-150    	; 0x3e48 <NoRoots()+0x184>
    3ede:	63 e2       	ldi	r22, 0x23	; 35
    3ee0:	ab cf       	rjmp	.-170    	; 0x3e38 <NoRoots()+0x174>
    3ee2:	44 ef       	ldi	r20, 0xF4	; 244
    3ee4:	51 e0       	ldi	r21, 0x01	; 1
    3ee6:	65 e2       	ldi	r22, 0x25	; 37
    3ee8:	b7 cf       	rjmp	.-146    	; 0x3e58 <NoRoots()+0x194>
    3eea:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3eee:	7c 01       	movw	r14, r24
    3ef0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ef4:	8c 01       	movw	r16, r24
    3ef6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3efa:	9c 01       	movw	r18, r24
    3efc:	4b e4       	ldi	r20, 0x4B	; 75
    3efe:	50 e0       	ldi	r21, 0x00	; 0
    3f00:	67 e2       	ldi	r22, 0x27	; 39
    3f02:	bb cf       	rjmp	.-138    	; 0x3e7a <NoRoots()+0x1b6>
    3f04:	69 e2       	ldi	r22, 0x29	; 41
    3f06:	98 cf       	rjmp	.-208    	; 0x3e38 <NoRoots()+0x174>
    3f08:	44 ef       	ldi	r20, 0xF4	; 244
    3f0a:	51 e0       	ldi	r21, 0x01	; 1
    3f0c:	6b e2       	ldi	r22, 0x2B	; 43
    3f0e:	9c cf       	rjmp	.-200    	; 0x3e48 <NoRoots()+0x184>
    3f10:	6d e2       	ldi	r22, 0x2D	; 45
    3f12:	92 cf       	rjmp	.-220    	; 0x3e38 <NoRoots()+0x174>
    3f14:	44 ef       	ldi	r20, 0xF4	; 244
    3f16:	51 e0       	ldi	r21, 0x01	; 1
    3f18:	6f e2       	ldi	r22, 0x2F	; 47
    3f1a:	9e cf       	rjmp	.-196    	; 0x3e58 <NoRoots()+0x194>
    3f1c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3f20:	7c 01       	movw	r14, r24
    3f22:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3f26:	8c 01       	movw	r16, r24
    3f28:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3f2c:	9c 01       	movw	r18, r24
    3f2e:	4b e4       	ldi	r20, 0x4B	; 75
    3f30:	50 e0       	ldi	r21, 0x00	; 0
    3f32:	61 e3       	ldi	r22, 0x31	; 49
    3f34:	bf cf       	rjmp	.-130    	; 0x3eb4 <NoRoots()+0x1f0>
    3f36:	63 e3       	ldi	r22, 0x33	; 51
    3f38:	88 ea       	ldi	r24, 0xA8	; 168
    3f3a:	98 e4       	ldi	r25, 0x48	; 72
    3f3c:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    3f40:	53 cf       	rjmp	.-346    	; 0x3de8 <NoRoots()+0x124>
    3f42:	65 e3       	ldi	r22, 0x35	; 53
    3f44:	86 ea       	ldi	r24, 0xA6	; 166
    3f46:	90 e4       	ldi	r25, 0x40	; 64
    3f48:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    3f4c:	4d cf       	rjmp	.-358    	; 0x3de8 <NoRoots()+0x124>
    3f4e:	47 e3       	ldi	r20, 0x37	; 55
    3f50:	64 ef       	ldi	r22, 0xF4	; 244
    3f52:	71 e0       	ldi	r23, 0x01	; 1
    3f54:	83 e5       	ldi	r24, 0x53	; 83
    3f56:	90 e2       	ldi	r25, 0x20	; 32
    3f58:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    3f5c:	45 cf       	rjmp	.-374    	; 0x3de8 <NoRoots()+0x124>
    3f5e:	49 e3       	ldi	r20, 0x39	; 57
    3f60:	67 e0       	ldi	r22, 0x07	; 7
    3f62:	83 e5       	ldi	r24, 0x53	; 83
    3f64:	90 e2       	ldi	r25, 0x20	; 32
    3f66:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3f6a:	3e cf       	rjmp	.-388    	; 0x3de8 <NoRoots()+0x124>
    3f6c:	4b e3       	ldi	r20, 0x3B	; 59
    3f6e:	6a ef       	ldi	r22, 0xFA	; 250
    3f70:	70 e0       	ldi	r23, 0x00	; 0
    3f72:	f0 cf       	rjmp	.-32     	; 0x3f54 <NoRoots()+0x290>
    3f74:	4d e3       	ldi	r20, 0x3D	; 61
    3f76:	6c e0       	ldi	r22, 0x0C	; 12
    3f78:	8f e4       	ldi	r24, 0x4F	; 79
    3f7a:	9e e1       	ldi	r25, 0x1E	; 30
    3f7c:	f4 cf       	rjmp	.-24     	; 0x3f66 <NoRoots()+0x2a2>
    3f7e:	64 e6       	ldi	r22, 0x64	; 100
    3f80:	80 e3       	ldi	r24, 0x30	; 48
    3f82:	95 e7       	ldi	r25, 0x75	; 117
    3f84:	5b cf       	rjmp	.-330    	; 0x3e3c <NoRoots()+0x178>
    3f86:	60 e0       	ldi	r22, 0x00	; 0
    3f88:	8c ec       	ldi	r24, 0xCC	; 204
    3f8a:	90 e1       	ldi	r25, 0x10	; 16
    3f8c:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    3f90:	80 e0       	ldi	r24, 0x00	; 0
    3f92:	6a d8       	rcall	.-3884   	; 0x3068 <switchToSong(unsigned char)>
    3f94:	29 cf       	rjmp	.-430    	; 0x3de8 <NoRoots()+0x124>

00003f96 <Firework()>:
    3f96:	ef 92       	push	r14
    3f98:	ff 92       	push	r15
    3f9a:	0f 93       	push	r16
    3f9c:	1f 93       	push	r17
    3f9e:	cf 93       	push	r28
    3fa0:	df 93       	push	r29
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <Firework()+0xe>
    3fa4:	00 d0       	rcall	.+0      	; 0x3fa6 <Firework()+0x10>
    3fa6:	00 d0       	rcall	.+0      	; 0x3fa8 <Firework()+0x12>
    3fa8:	1f 92       	push	r1
    3faa:	cd b7       	in	r28, 0x3d	; 61
    3fac:	de b7       	in	r29, 0x3e	; 62
    3fae:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3fb2:	83 32       	cpi	r24, 0x23	; 35
    3fb4:	09 f4       	brne	.+2      	; 0x3fb8 <Firework()+0x22>
    3fb6:	f5 c0       	rjmp	.+490    	; 0x41a2 <Firework()+0x20c>
    3fb8:	08 f0       	brcs	.+2      	; 0x3fbc <Firework()+0x26>
    3fba:	4b c0       	rjmp	.+150    	; 0x4052 <Firework()+0xbc>
    3fbc:	86 31       	cpi	r24, 0x16	; 22
    3fbe:	09 f4       	brne	.+2      	; 0x3fc2 <Firework()+0x2c>
    3fc0:	cc c0       	rjmp	.+408    	; 0x415a <Firework()+0x1c4>
    3fc2:	18 f5       	brcc	.+70     	; 0x400a <Firework()+0x74>
    3fc4:	8a 30       	cpi	r24, 0x0A	; 10
    3fc6:	09 f4       	brne	.+2      	; 0x3fca <Firework()+0x34>
    3fc8:	b8 c0       	rjmp	.+368    	; 0x413a <Firework()+0x1a4>
    3fca:	98 f4       	brcc	.+38     	; 0x3ff2 <Firework()+0x5c>
    3fcc:	88 23       	and	r24, r24
    3fce:	09 f4       	brne	.+2      	; 0x3fd2 <Firework()+0x3c>
    3fd0:	94 c0       	rjmp	.+296    	; 0x40fa <Firework()+0x164>
    3fd2:	85 30       	cpi	r24, 0x05	; 5
    3fd4:	09 f4       	brne	.+2      	; 0x3fd8 <Firework()+0x42>
    3fd6:	a9 c0       	rjmp	.+338    	; 0x412a <Firework()+0x194>
    3fd8:	27 96       	adiw	r28, 0x07	; 7
    3fda:	0f b6       	in	r0, 0x3f	; 63
    3fdc:	f8 94       	cli
    3fde:	de bf       	out	0x3e, r29	; 62
    3fe0:	0f be       	out	0x3f, r0	; 63
    3fe2:	cd bf       	out	0x3d, r28	; 61
    3fe4:	df 91       	pop	r29
    3fe6:	cf 91       	pop	r28
    3fe8:	1f 91       	pop	r17
    3fea:	0f 91       	pop	r16
    3fec:	ff 90       	pop	r15
    3fee:	ef 90       	pop	r14
    3ff0:	08 95       	ret
    3ff2:	8f 30       	cpi	r24, 0x0F	; 15
    3ff4:	09 f4       	brne	.+2      	; 0x3ff8 <Firework()+0x62>
    3ff6:	a9 c0       	rjmp	.+338    	; 0x414a <Firework()+0x1b4>
    3ff8:	46 e1       	ldi	r20, 0x16	; 22
    3ffa:	64 e0       	ldi	r22, 0x04	; 4
    3ffc:	84 31       	cpi	r24, 0x14	; 20
    3ffe:	61 f7       	brne	.-40     	; 0x3fd8 <Firework()+0x42>
    4000:	8e ee       	ldi	r24, 0xEE	; 238
    4002:	94 e3       	ldi	r25, 0x34	; 52
    4004:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    4008:	e7 cf       	rjmp	.-50     	; 0x3fd8 <Firework()+0x42>
    400a:	8c 31       	cpi	r24, 0x1C	; 28
    400c:	09 f4       	brne	.+2      	; 0x4010 <Firework()+0x7a>
    400e:	bb c0       	rjmp	.+374    	; 0x4186 <Firework()+0x1f0>
    4010:	a0 f4       	brcc	.+40     	; 0x403a <Firework()+0xa4>
    4012:	88 31       	cpi	r24, 0x18	; 24
    4014:	09 f4       	brne	.+2      	; 0x4018 <Firework()+0x82>
    4016:	b2 c0       	rjmp	.+356    	; 0x417c <Firework()+0x1e6>
    4018:	8a 31       	cpi	r24, 0x1A	; 26
    401a:	f1 f6       	brne	.-68     	; 0x3fd8 <Firework()+0x42>
    401c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4020:	7c 01       	movw	r14, r24
    4022:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4026:	8c 01       	movw	r16, r24
    4028:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    402c:	9c 01       	movw	r18, r24
    402e:	42 e3       	ldi	r20, 0x32	; 50
    4030:	50 e0       	ldi	r21, 0x00	; 0
    4032:	6c e1       	ldi	r22, 0x1C	; 28
    4034:	88 ee       	ldi	r24, 0xE8	; 232
    4036:	93 e0       	ldi	r25, 0x03	; 3
    4038:	9e c0       	rjmp	.+316    	; 0x4176 <Firework()+0x1e0>
    403a:	80 32       	cpi	r24, 0x20	; 32
    403c:	09 f4       	brne	.+2      	; 0x4040 <Firework()+0xaa>
    403e:	aa c0       	rjmp	.+340    	; 0x4194 <Firework()+0x1fe>
    4040:	82 32       	cpi	r24, 0x22	; 34
    4042:	09 f4       	brne	.+2      	; 0x4046 <Firework()+0xb0>
    4044:	ab c0       	rjmp	.+342    	; 0x419c <Firework()+0x206>
    4046:	8e 31       	cpi	r24, 0x1E	; 30
    4048:	39 f6       	brne	.-114    	; 0x3fd8 <Firework()+0x42>
    404a:	44 ef       	ldi	r20, 0xF4	; 244
    404c:	51 e0       	ldi	r21, 0x01	; 1
    404e:	60 e2       	ldi	r22, 0x20	; 32
    4050:	7f c0       	rjmp	.+254    	; 0x4150 <Firework()+0x1ba>
    4052:	8c 32       	cpi	r24, 0x2C	; 44
    4054:	09 f4       	brne	.+2      	; 0x4058 <Firework()+0xc2>
    4056:	bb c0       	rjmp	.+374    	; 0x41ce <Firework()+0x238>
    4058:	18 f5       	brcc	.+70     	; 0x40a0 <Firework()+0x10a>
    405a:	86 32       	cpi	r24, 0x26	; 38
    405c:	09 f4       	brne	.+2      	; 0x4060 <Firework()+0xca>
    405e:	b0 c0       	rjmp	.+352    	; 0x41c0 <Firework()+0x22a>
    4060:	98 f4       	brcc	.+38     	; 0x4088 <Firework()+0xf2>
    4062:	84 32       	cpi	r24, 0x24	; 36
    4064:	09 f4       	brne	.+2      	; 0x4068 <Firework()+0xd2>
    4066:	aa c0       	rjmp	.+340    	; 0x41bc <Firework()+0x226>
    4068:	85 32       	cpi	r24, 0x25	; 37
    406a:	09 f0       	breq	.+2      	; 0x406e <Firework()+0xd8>
    406c:	b5 cf       	rjmp	.-150    	; 0x3fd8 <Firework()+0x42>
    406e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4072:	7c 01       	movw	r14, r24
    4074:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4078:	8c 01       	movw	r16, r24
    407a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    407e:	9c 01       	movw	r18, r24
    4080:	42 e3       	ldi	r20, 0x32	; 50
    4082:	50 e0       	ldi	r21, 0x00	; 0
    4084:	66 e2       	ldi	r22, 0x26	; 38
    4086:	d6 cf       	rjmp	.-84     	; 0x4034 <Firework()+0x9e>
    4088:	88 32       	cpi	r24, 0x28	; 40
    408a:	09 f4       	brne	.+2      	; 0x408e <Firework()+0xf8>
    408c:	9b c0       	rjmp	.+310    	; 0x41c4 <Firework()+0x22e>
    408e:	8a 32       	cpi	r24, 0x2A	; 42
    4090:	09 f0       	breq	.+2      	; 0x4094 <Firework()+0xfe>
    4092:	a2 cf       	rjmp	.-188    	; 0x3fd8 <Firework()+0x42>
    4094:	6c e2       	ldi	r22, 0x2C	; 44
    4096:	84 ea       	ldi	r24, 0xA4	; 164
    4098:	98 e3       	ldi	r25, 0x38	; 56
    409a:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    409e:	9c cf       	rjmp	.-200    	; 0x3fd8 <Firework()+0x42>
    40a0:	82 33       	cpi	r24, 0x32	; 50
    40a2:	09 f4       	brne	.+2      	; 0x40a6 <Firework()+0x110>
    40a4:	a4 c0       	rjmp	.+328    	; 0x41ee <Firework()+0x258>
    40a6:	98 f4       	brcc	.+38     	; 0x40ce <Firework()+0x138>
    40a8:	8e 32       	cpi	r24, 0x2E	; 46
    40aa:	09 f4       	brne	.+2      	; 0x40ae <Firework()+0x118>
    40ac:	9d c0       	rjmp	.+314    	; 0x41e8 <Firework()+0x252>
    40ae:	80 33       	cpi	r24, 0x30	; 48
    40b0:	09 f0       	breq	.+2      	; 0x40b4 <Firework()+0x11e>
    40b2:	92 cf       	rjmp	.-220    	; 0x3fd8 <Firework()+0x42>
    40b4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    40b8:	7c 01       	movw	r14, r24
    40ba:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    40be:	8c 01       	movw	r16, r24
    40c0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    40c4:	9c 01       	movw	r18, r24
    40c6:	42 e3       	ldi	r20, 0x32	; 50
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	62 e3       	ldi	r22, 0x32	; 50
    40cc:	b3 cf       	rjmp	.-154    	; 0x4034 <Firework()+0x9e>
    40ce:	8c 33       	cpi	r24, 0x3C	; 60
    40d0:	09 f4       	brne	.+2      	; 0x40d4 <Firework()+0x13e>
    40d2:	90 c0       	rjmp	.+288    	; 0x41f4 <Firework()+0x25e>
    40d4:	84 36       	cpi	r24, 0x64	; 100
    40d6:	09 f4       	brne	.+2      	; 0x40da <Firework()+0x144>
    40d8:	93 c0       	rjmp	.+294    	; 0x4200 <Firework()+0x26a>
    40da:	87 33       	cpi	r24, 0x37	; 55
    40dc:	09 f0       	breq	.+2      	; 0x40e0 <Firework()+0x14a>
    40de:	7c cf       	rjmp	.-264    	; 0x3fd8 <Firework()+0x42>
    40e0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    40e4:	7c 01       	movw	r14, r24
    40e6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    40ea:	8c 01       	movw	r16, r24
    40ec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    40f0:	9c 01       	movw	r18, r24
    40f2:	42 e3       	ldi	r20, 0x32	; 50
    40f4:	50 e0       	ldi	r21, 0x00	; 0
    40f6:	6c e3       	ldi	r22, 0x3C	; 60
    40f8:	9d cf       	rjmp	.-198    	; 0x4034 <Firework()+0x9e>
    40fa:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    40fe:	7c 01       	movw	r14, r24
    4100:	6d ee       	ldi	r22, 0xED	; 237
    4102:	71 e0       	ldi	r23, 0x01	; 1
    4104:	ce 01       	movw	r24, r28
    4106:	01 96       	adiw	r24, 0x01	; 1
    4108:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    410c:	05 e0       	ldi	r16, 0x05	; 5
    410e:	97 01       	movw	r18, r14
    4110:	42 e3       	ldi	r20, 0x32	; 50
    4112:	50 e0       	ldi	r21, 0x00	; 0
    4114:	6c e4       	ldi	r22, 0x4C	; 76
    4116:	7d e1       	ldi	r23, 0x1D	; 29
    4118:	ce 01       	movw	r24, r28
    411a:	01 96       	adiw	r24, 0x01	; 1
    411c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4120:	ce 01       	movw	r24, r28
    4122:	01 96       	adiw	r24, 0x01	; 1
    4124:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    4128:	57 cf       	rjmp	.-338    	; 0x3fd8 <Firework()+0x42>
    412a:	4a e0       	ldi	r20, 0x0A	; 10
    412c:	66 eb       	ldi	r22, 0xB6	; 182
    412e:	73 e0       	ldi	r23, 0x03	; 3
    4130:	83 e7       	ldi	r24, 0x73	; 115
    4132:	9c e3       	ldi	r25, 0x3C	; 60
    4134:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    4138:	4f cf       	rjmp	.-354    	; 0x3fd8 <Firework()+0x42>
    413a:	44 ef       	ldi	r20, 0xF4	; 244
    413c:	51 e0       	ldi	r21, 0x01	; 1
    413e:	6f e0       	ldi	r22, 0x0F	; 15
    4140:	83 e7       	ldi	r24, 0x73	; 115
    4142:	9c e3       	ldi	r25, 0x3C	; 60
    4144:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4148:	47 cf       	rjmp	.-370    	; 0x3fd8 <Firework()+0x42>
    414a:	44 ef       	ldi	r20, 0xF4	; 244
    414c:	51 e0       	ldi	r21, 0x01	; 1
    414e:	64 e1       	ldi	r22, 0x14	; 20
    4150:	83 e7       	ldi	r24, 0x73	; 115
    4152:	9c e3       	ldi	r25, 0x3C	; 60
    4154:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4158:	3f cf       	rjmp	.-386    	; 0x3fd8 <Firework()+0x42>
    415a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    415e:	7c 01       	movw	r14, r24
    4160:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4164:	8c 01       	movw	r16, r24
    4166:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    416a:	9c 01       	movw	r18, r24
    416c:	42 e3       	ldi	r20, 0x32	; 50
    416e:	50 e0       	ldi	r21, 0x00	; 0
    4170:	68 e1       	ldi	r22, 0x18	; 24
    4172:	85 e8       	ldi	r24, 0x85	; 133
    4174:	97 e0       	ldi	r25, 0x07	; 7
    4176:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    417a:	2e cf       	rjmp	.-420    	; 0x3fd8 <Firework()+0x42>
    417c:	4a e1       	ldi	r20, 0x1A	; 26
    417e:	63 e0       	ldi	r22, 0x03	; 3
    4180:	84 ea       	ldi	r24, 0xA4	; 164
    4182:	98 e3       	ldi	r25, 0x38	; 56
    4184:	04 c0       	rjmp	.+8      	; 0x418e <Firework()+0x1f8>
    4186:	4e e1       	ldi	r20, 0x1E	; 30
    4188:	67 e0       	ldi	r22, 0x07	; 7
    418a:	8a e5       	ldi	r24, 0x5A	; 90
    418c:	9c e3       	ldi	r25, 0x3C	; 60
    418e:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4192:	22 cf       	rjmp	.-444    	; 0x3fd8 <Firework()+0x42>
    4194:	44 ef       	ldi	r20, 0xF4	; 244
    4196:	51 e0       	ldi	r21, 0x01	; 1
    4198:	62 e2       	ldi	r22, 0x22	; 34
    419a:	d2 cf       	rjmp	.-92     	; 0x4140 <Firework()+0x1aa>
    419c:	43 e2       	ldi	r20, 0x23	; 35
    419e:	65 e0       	ldi	r22, 0x05	; 5
    41a0:	2f cf       	rjmp	.-418    	; 0x4000 <Firework()+0x6a>
    41a2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    41a6:	7c 01       	movw	r14, r24
    41a8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    41ac:	8c 01       	movw	r16, r24
    41ae:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    41b2:	9c 01       	movw	r18, r24
    41b4:	42 e3       	ldi	r20, 0x32	; 50
    41b6:	50 e0       	ldi	r21, 0x00	; 0
    41b8:	64 e2       	ldi	r22, 0x24	; 36
    41ba:	db cf       	rjmp	.-74     	; 0x4172 <Firework()+0x1dc>
    41bc:	45 e2       	ldi	r20, 0x25	; 37
    41be:	df cf       	rjmp	.-66     	; 0x417e <Firework()+0x1e8>
    41c0:	48 e2       	ldi	r20, 0x28	; 40
    41c2:	e2 cf       	rjmp	.-60     	; 0x4188 <Firework()+0x1f2>
    41c4:	4a e2       	ldi	r20, 0x2A	; 42
    41c6:	62 e0       	ldi	r22, 0x02	; 2
    41c8:	83 e7       	ldi	r24, 0x73	; 115
    41ca:	9c e3       	ldi	r25, 0x3C	; 60
    41cc:	1b cf       	rjmp	.-458    	; 0x4004 <Firework()+0x6e>
    41ce:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    41d2:	7c 01       	movw	r14, r24
    41d4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    41d8:	8c 01       	movw	r16, r24
    41da:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    41de:	9c 01       	movw	r18, r24
    41e0:	42 e3       	ldi	r20, 0x32	; 50
    41e2:	50 e0       	ldi	r21, 0x00	; 0
    41e4:	6e e2       	ldi	r22, 0x2E	; 46
    41e6:	26 cf       	rjmp	.-436    	; 0x4034 <Firework()+0x9e>
    41e8:	40 e3       	ldi	r20, 0x30	; 48
    41ea:	65 e0       	ldi	r22, 0x05	; 5
    41ec:	c9 cf       	rjmp	.-110    	; 0x4180 <Firework()+0x1ea>
    41ee:	47 e3       	ldi	r20, 0x37	; 55
    41f0:	6a e0       	ldi	r22, 0x0A	; 10
    41f2:	c6 cf       	rjmp	.-116    	; 0x4180 <Firework()+0x1ea>
    41f4:	64 e6       	ldi	r22, 0x64	; 100
    41f6:	80 e1       	ldi	r24, 0x10	; 16
    41f8:	97 e2       	ldi	r25, 0x27	; 39
    41fa:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    41fe:	ec ce       	rjmp	.-552    	; 0x3fd8 <Firework()+0x42>
    4200:	60 e0       	ldi	r22, 0x00	; 0
    4202:	8c ec       	ldi	r24, 0xCC	; 204
    4204:	90 e1       	ldi	r25, 0x10	; 16
    4206:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    4210:	e3 ce       	rjmp	.-570    	; 0x3fd8 <Firework()+0x42>

00004212 <Diamonds()>:
    4212:	ef 92       	push	r14
    4214:	ff 92       	push	r15
    4216:	0f 93       	push	r16
    4218:	1f 93       	push	r17
    421a:	cf 93       	push	r28
    421c:	df 93       	push	r29
    421e:	00 d0       	rcall	.+0      	; 0x4220 <Diamonds()+0xe>
    4220:	00 d0       	rcall	.+0      	; 0x4222 <Diamonds()+0x10>
    4222:	00 d0       	rcall	.+0      	; 0x4224 <Diamonds()+0x12>
    4224:	1f 92       	push	r1
    4226:	cd b7       	in	r28, 0x3d	; 61
    4228:	de b7       	in	r29, 0x3e	; 62
    422a:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    422e:	89 31       	cpi	r24, 0x19	; 25
    4230:	09 f4       	brne	.+2      	; 0x4234 <Diamonds()+0x22>
    4232:	86 c0       	rjmp	.+268    	; 0x4340 <Diamonds()+0x12e>
    4234:	58 f5       	brcc	.+86     	; 0x428c <Diamonds()+0x7a>
    4236:	85 30       	cpi	r24, 0x05	; 5
    4238:	09 f4       	brne	.+2      	; 0x423c <Diamonds()+0x2a>
    423a:	74 c0       	rjmp	.+232    	; 0x4324 <Diamonds()+0x112>
    423c:	b8 f4       	brcc	.+46     	; 0x426c <Diamonds()+0x5a>
    423e:	81 30       	cpi	r24, 0x01	; 1
    4240:	09 f4       	brne	.+2      	; 0x4244 <Diamonds()+0x32>
    4242:	69 c0       	rjmp	.+210    	; 0x4316 <Diamonds()+0x104>
    4244:	08 f4       	brcc	.+2      	; 0x4248 <Diamonds()+0x36>
    4246:	4f c0       	rjmp	.+158    	; 0x42e6 <Diamonds()+0xd4>
    4248:	45 e0       	ldi	r20, 0x05	; 5
    424a:	64 e0       	ldi	r22, 0x04	; 4
    424c:	82 30       	cpi	r24, 0x02	; 2
    424e:	09 f4       	brne	.+2      	; 0x4252 <Diamonds()+0x40>
    4250:	64 c0       	rjmp	.+200    	; 0x431a <Diamonds()+0x108>
    4252:	27 96       	adiw	r28, 0x07	; 7
    4254:	0f b6       	in	r0, 0x3f	; 63
    4256:	f8 94       	cli
    4258:	de bf       	out	0x3e, r29	; 62
    425a:	0f be       	out	0x3f, r0	; 63
    425c:	cd bf       	out	0x3d, r28	; 61
    425e:	df 91       	pop	r29
    4260:	cf 91       	pop	r28
    4262:	1f 91       	pop	r17
    4264:	0f 91       	pop	r16
    4266:	ff 90       	pop	r15
    4268:	ef 90       	pop	r14
    426a:	08 95       	ret
    426c:	8f 30       	cpi	r24, 0x0F	; 15
    426e:	09 f4       	brne	.+2      	; 0x4272 <Diamonds()+0x60>
    4270:	5c c0       	rjmp	.+184    	; 0x432a <Diamonds()+0x118>
    4272:	84 31       	cpi	r24, 0x14	; 20
    4274:	09 f4       	brne	.+2      	; 0x4278 <Diamonds()+0x66>
    4276:	61 c0       	rjmp	.+194    	; 0x433a <Diamonds()+0x128>
    4278:	8a 30       	cpi	r24, 0x0A	; 10
    427a:	59 f7       	brne	.-42     	; 0x4252 <Diamonds()+0x40>
    427c:	46 e9       	ldi	r20, 0x96	; 150
    427e:	50 e0       	ldi	r21, 0x00	; 0
    4280:	6f e0       	ldi	r22, 0x0F	; 15
    4282:	80 e0       	ldi	r24, 0x00	; 0
    4284:	9b e4       	ldi	r25, 0x4B	; 75
    4286:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    428a:	e3 cf       	rjmp	.-58     	; 0x4252 <Diamonds()+0x40>
    428c:	8d 32       	cpi	r24, 0x2D	; 45
    428e:	09 f4       	brne	.+2      	; 0x4292 <Diamonds()+0x80>
    4290:	76 c0       	rjmp	.+236    	; 0x437e <Diamonds()+0x16c>
    4292:	68 f4       	brcc	.+26     	; 0x42ae <Diamonds()+0x9c>
    4294:	83 32       	cpi	r24, 0x23	; 35
    4296:	09 f4       	brne	.+2      	; 0x429a <Diamonds()+0x88>
    4298:	5b c0       	rjmp	.+182    	; 0x4350 <Diamonds()+0x13e>
    429a:	88 32       	cpi	r24, 0x28	; 40
    429c:	09 f4       	brne	.+2      	; 0x42a0 <Diamonds()+0x8e>
    429e:	5e c0       	rjmp	.+188    	; 0x435c <Diamonds()+0x14a>
    42a0:	8e 31       	cpi	r24, 0x1E	; 30
    42a2:	b9 f6       	brne	.-82     	; 0x4252 <Diamonds()+0x40>
    42a4:	43 e2       	ldi	r20, 0x23	; 35
    42a6:	64 e0       	ldi	r22, 0x04	; 4
    42a8:	80 e2       	ldi	r24, 0x20	; 32
    42aa:	97 e6       	ldi	r25, 0x67	; 103
    42ac:	38 c0       	rjmp	.+112    	; 0x431e <Diamonds()+0x10c>
    42ae:	87 33       	cpi	r24, 0x37	; 55
    42b0:	09 f4       	brne	.+2      	; 0x42b4 <Diamonds()+0xa2>
    42b2:	6b c0       	rjmp	.+214    	; 0x438a <Diamonds()+0x178>
    42b4:	48 f4       	brcc	.+18     	; 0x42c8 <Diamonds()+0xb6>
    42b6:	82 33       	cpi	r24, 0x32	; 50
    42b8:	61 f6       	brne	.-104    	; 0x4252 <Diamonds()+0x40>
    42ba:	47 e3       	ldi	r20, 0x37	; 55
    42bc:	67 e0       	ldi	r22, 0x07	; 7
    42be:	80 e0       	ldi	r24, 0x00	; 0
    42c0:	9b e4       	ldi	r25, 0x4B	; 75
    42c2:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    42c6:	c5 cf       	rjmp	.-118    	; 0x4252 <Diamonds()+0x40>
    42c8:	8c 33       	cpi	r24, 0x3C	; 60
    42ca:	09 f4       	brne	.+2      	; 0x42ce <Diamonds()+0xbc>
    42cc:	63 c0       	rjmp	.+198    	; 0x4394 <Diamonds()+0x182>
    42ce:	84 36       	cpi	r24, 0x64	; 100
    42d0:	09 f0       	breq	.+2      	; 0x42d4 <Diamonds()+0xc2>
    42d2:	bf cf       	rjmp	.-130    	; 0x4252 <Diamonds()+0x40>
    42d4:	60 e0       	ldi	r22, 0x00	; 0
    42d6:	8c ec       	ldi	r24, 0xCC	; 204
    42d8:	90 e1       	ldi	r25, 0x10	; 16
    42da:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    42de:	80 e0       	ldi	r24, 0x00	; 0
    42e0:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    42e4:	b6 cf       	rjmp	.-148    	; 0x4252 <Diamonds()+0x40>
    42e6:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    42ea:	7c 01       	movw	r14, r24
    42ec:	65 e0       	ldi	r22, 0x05	; 5
    42ee:	72 e0       	ldi	r23, 0x02	; 2
    42f0:	ce 01       	movw	r24, r28
    42f2:	01 96       	adiw	r24, 0x01	; 1
    42f4:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    42f8:	01 e0       	ldi	r16, 0x01	; 1
    42fa:	97 01       	movw	r18, r14
    42fc:	4b e4       	ldi	r20, 0x4B	; 75
    42fe:	50 e0       	ldi	r21, 0x00	; 0
    4300:	60 e8       	ldi	r22, 0x80	; 128
    4302:	75 e2       	ldi	r23, 0x25	; 37
    4304:	ce 01       	movw	r24, r28
    4306:	01 96       	adiw	r24, 0x01	; 1
    4308:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    430c:	ce 01       	movw	r24, r28
    430e:	01 96       	adiw	r24, 0x01	; 1
    4310:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    4314:	9e cf       	rjmp	.-196    	; 0x4252 <Diamonds()+0x40>
    4316:	42 e0       	ldi	r20, 0x02	; 2
    4318:	63 e0       	ldi	r22, 0x03	; 3
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	9b e4       	ldi	r25, 0x4B	; 75
    431e:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    4322:	97 cf       	rjmp	.-210    	; 0x4252 <Diamonds()+0x40>
    4324:	4a e0       	ldi	r20, 0x0A	; 10
    4326:	67 e0       	ldi	r22, 0x07	; 7
    4328:	f8 cf       	rjmp	.-16     	; 0x431a <Diamonds()+0x108>
    432a:	48 e5       	ldi	r20, 0x58	; 88
    432c:	52 e0       	ldi	r21, 0x02	; 2
    432e:	64 e1       	ldi	r22, 0x14	; 20
    4330:	80 e8       	ldi	r24, 0x80	; 128
    4332:	90 e7       	ldi	r25, 0x70	; 112
    4334:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4338:	8c cf       	rjmp	.-232    	; 0x4252 <Diamonds()+0x40>
    433a:	49 e1       	ldi	r20, 0x19	; 25
    433c:	68 e0       	ldi	r22, 0x08	; 8
    433e:	ed cf       	rjmp	.-38     	; 0x431a <Diamonds()+0x108>
    4340:	46 e9       	ldi	r20, 0x96	; 150
    4342:	50 e0       	ldi	r21, 0x00	; 0
    4344:	6e e1       	ldi	r22, 0x1E	; 30
    4346:	80 e0       	ldi	r24, 0x00	; 0
    4348:	9b e4       	ldi	r25, 0x4B	; 75
    434a:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    434e:	81 cf       	rjmp	.-254    	; 0x4252 <Diamonds()+0x40>
    4350:	68 e2       	ldi	r22, 0x28	; 40
    4352:	80 eb       	ldi	r24, 0xB0	; 176
    4354:	94 e0       	ldi	r25, 0x04	; 4
    4356:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    435a:	7b cf       	rjmp	.-266    	; 0x4252 <Diamonds()+0x40>
    435c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4360:	7c 01       	movw	r14, r24
    4362:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4366:	8c 01       	movw	r16, r24
    4368:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    436c:	9c 01       	movw	r18, r24
    436e:	42 e3       	ldi	r20, 0x32	; 50
    4370:	50 e0       	ldi	r21, 0x00	; 0
    4372:	6d e2       	ldi	r22, 0x2D	; 45
    4374:	80 eb       	ldi	r24, 0xB0	; 176
    4376:	94 e0       	ldi	r25, 0x04	; 4
    4378:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    437c:	6a cf       	rjmp	.-300    	; 0x4252 <Diamonds()+0x40>
    437e:	46 e9       	ldi	r20, 0x96	; 150
    4380:	50 e0       	ldi	r21, 0x00	; 0
    4382:	62 e3       	ldi	r22, 0x32	; 50
    4384:	80 e0       	ldi	r24, 0x00	; 0
    4386:	9b e4       	ldi	r25, 0x4B	; 75
    4388:	d5 cf       	rjmp	.-86     	; 0x4334 <Diamonds()+0x122>
    438a:	4c e3       	ldi	r20, 0x3C	; 60
    438c:	65 e0       	ldi	r22, 0x05	; 5
    438e:	80 ee       	ldi	r24, 0xE0	; 224
    4390:	9e e2       	ldi	r25, 0x2E	; 46
    4392:	c5 cf       	rjmp	.-118    	; 0x431e <Diamonds()+0x10c>
    4394:	42 e3       	ldi	r20, 0x32	; 50
    4396:	50 e0       	ldi	r21, 0x00	; 0
    4398:	64 e6       	ldi	r22, 0x64	; 100
    439a:	80 e0       	ldi	r24, 0x00	; 0
    439c:	96 e9       	ldi	r25, 0x96	; 150
    439e:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    43a2:	57 cf       	rjmp	.-338    	; 0x4252 <Diamonds()+0x40>

000043a4 <SetFire()>:
    43a4:	ef 92       	push	r14
    43a6:	ff 92       	push	r15
    43a8:	0f 93       	push	r16
    43aa:	cf 93       	push	r28
    43ac:	df 93       	push	r29
    43ae:	00 d0       	rcall	.+0      	; 0x43b0 <SetFire()+0xc>
    43b0:	00 d0       	rcall	.+0      	; 0x43b2 <SetFire()+0xe>
    43b2:	00 d0       	rcall	.+0      	; 0x43b4 <SetFire()+0x10>
    43b4:	1f 92       	push	r1
    43b6:	cd b7       	in	r28, 0x3d	; 61
    43b8:	de b7       	in	r29, 0x3e	; 62
    43ba:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    43be:	83 32       	cpi	r24, 0x23	; 35
    43c0:	09 f4       	brne	.+2      	; 0x43c4 <SetFire()+0x20>
    43c2:	a5 c0       	rjmp	.+330    	; 0x450e <SetFire()+0x16a>
    43c4:	a0 f5       	brcc	.+104    	; 0x442e <SetFire()+0x8a>
    43c6:	8a 30       	cpi	r24, 0x0A	; 10
    43c8:	09 f4       	brne	.+2      	; 0x43cc <SetFire()+0x28>
    43ca:	92 c0       	rjmp	.+292    	; 0x44f0 <SetFire()+0x14c>
    43cc:	c0 f4       	brcc	.+48     	; 0x43fe <SetFire()+0x5a>
    43ce:	81 30       	cpi	r24, 0x01	; 1
    43d0:	09 f4       	brne	.+2      	; 0x43d4 <SetFire()+0x30>
    43d2:	84 c0       	rjmp	.+264    	; 0x44dc <SetFire()+0x138>
    43d4:	08 f4       	brcc	.+2      	; 0x43d8 <SetFire()+0x34>
    43d6:	6a c0       	rjmp	.+212    	; 0x44ac <SetFire()+0x108>
    43d8:	82 30       	cpi	r24, 0x02	; 2
    43da:	09 f4       	brne	.+2      	; 0x43de <SetFire()+0x3a>
    43dc:	86 c0       	rjmp	.+268    	; 0x44ea <SetFire()+0x146>
    43de:	4a e0       	ldi	r20, 0x0A	; 10
    43e0:	85 30       	cpi	r24, 0x05	; 5
    43e2:	09 f4       	brne	.+2      	; 0x43e6 <SetFire()+0x42>
    43e4:	88 c0       	rjmp	.+272    	; 0x44f6 <SetFire()+0x152>
    43e6:	27 96       	adiw	r28, 0x07	; 7
    43e8:	0f b6       	in	r0, 0x3f	; 63
    43ea:	f8 94       	cli
    43ec:	de bf       	out	0x3e, r29	; 62
    43ee:	0f be       	out	0x3f, r0	; 63
    43f0:	cd bf       	out	0x3d, r28	; 61
    43f2:	df 91       	pop	r29
    43f4:	cf 91       	pop	r28
    43f6:	0f 91       	pop	r16
    43f8:	ff 90       	pop	r15
    43fa:	ef 90       	pop	r14
    43fc:	08 95       	ret
    43fe:	84 31       	cpi	r24, 0x14	; 20
    4400:	09 f4       	brne	.+2      	; 0x4404 <SetFire()+0x60>
    4402:	78 c0       	rjmp	.+240    	; 0x44f4 <SetFire()+0x150>
    4404:	38 f4       	brcc	.+14     	; 0x4414 <SetFire()+0x70>
    4406:	44 e1       	ldi	r20, 0x14	; 20
    4408:	6b e0       	ldi	r22, 0x0B	; 11
    440a:	8f 30       	cpi	r24, 0x0F	; 15
    440c:	61 f7       	brne	.-40     	; 0x43e6 <SetFire()+0x42>
    440e:	88 e3       	ldi	r24, 0x38	; 56
    4410:	91 e4       	ldi	r25, 0x41	; 65
    4412:	68 c0       	rjmp	.+208    	; 0x44e4 <SetFire()+0x140>
    4414:	89 31       	cpi	r24, 0x19	; 25
    4416:	09 f4       	brne	.+2      	; 0x441a <SetFire()+0x76>
    4418:	72 c0       	rjmp	.+228    	; 0x44fe <SetFire()+0x15a>
    441a:	43 e2       	ldi	r20, 0x23	; 35
    441c:	8e 31       	cpi	r24, 0x1E	; 30
    441e:	19 f7       	brne	.-58     	; 0x43e6 <SetFire()+0x42>
    4420:	6d e0       	ldi	r22, 0x0D	; 13
    4422:	72 e0       	ldi	r23, 0x02	; 2
    4424:	88 e3       	ldi	r24, 0x38	; 56
    4426:	91 e4       	ldi	r25, 0x41	; 65
    4428:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    442c:	dc cf       	rjmp	.-72     	; 0x43e6 <SetFire()+0x42>
    442e:	8c 33       	cpi	r24, 0x3C	; 60
    4430:	09 f4       	brne	.+2      	; 0x4434 <SetFire()+0x90>
    4432:	7e c0       	rjmp	.+252    	; 0x4530 <SetFire()+0x18c>
    4434:	c8 f4       	brcc	.+50     	; 0x4468 <SetFire()+0xc4>
    4436:	8d 32       	cpi	r24, 0x2D	; 45
    4438:	09 f4       	brne	.+2      	; 0x443c <SetFire()+0x98>
    443a:	6d c0       	rjmp	.+218    	; 0x4516 <SetFire()+0x172>
    443c:	40 f4       	brcc	.+16     	; 0x444e <SetFire()+0xaa>
    443e:	88 32       	cpi	r24, 0x28	; 40
    4440:	91 f6       	brne	.-92     	; 0x43e6 <SetFire()+0x42>
    4442:	6d e2       	ldi	r22, 0x2D	; 45
    4444:	87 e2       	ldi	r24, 0x27	; 39
    4446:	98 e0       	ldi	r25, 0x08	; 8
    4448:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    444c:	cc cf       	rjmp	.-104    	; 0x43e6 <SetFire()+0x42>
    444e:	82 33       	cpi	r24, 0x32	; 50
    4450:	09 f4       	brne	.+2      	; 0x4454 <SetFire()+0xb0>
    4452:	65 c0       	rjmp	.+202    	; 0x451e <SetFire()+0x17a>
    4454:	4d e0       	ldi	r20, 0x0D	; 13
    4456:	52 e0       	ldi	r21, 0x02	; 2
    4458:	6c e3       	ldi	r22, 0x3C	; 60
    445a:	87 33       	cpi	r24, 0x37	; 55
    445c:	21 f6       	brne	.-120    	; 0x43e6 <SetFire()+0x42>
    445e:	88 e3       	ldi	r24, 0x38	; 56
    4460:	91 e4       	ldi	r25, 0x41	; 65
    4462:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4466:	bf cf       	rjmp	.-130    	; 0x43e6 <SetFire()+0x42>
    4468:	8b 34       	cpi	r24, 0x4B	; 75
    446a:	09 f4       	brne	.+2      	; 0x446e <SetFire()+0xca>
    446c:	6d c0       	rjmp	.+218    	; 0x4548 <SetFire()+0x1a4>
    446e:	78 f4       	brcc	.+30     	; 0x448e <SetFire()+0xea>
    4470:	81 34       	cpi	r24, 0x41	; 65
    4472:	09 f4       	brne	.+2      	; 0x4476 <SetFire()+0xd2>
    4474:	64 c0       	rjmp	.+200    	; 0x453e <SetFire()+0x19a>
    4476:	86 34       	cpi	r24, 0x46	; 70
    4478:	09 f0       	breq	.+2      	; 0x447c <SetFire()+0xd8>
    447a:	b5 cf       	rjmp	.-150    	; 0x43e6 <SetFire()+0x42>
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	4a ef       	ldi	r20, 0xFA	; 250
    4480:	50 e0       	ldi	r21, 0x00	; 0
    4482:	6b e4       	ldi	r22, 0x4B	; 75
    4484:	88 e3       	ldi	r24, 0x38	; 56
    4486:	91 e4       	ldi	r25, 0x41	; 65
    4488:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>
    448c:	ac cf       	rjmp	.-168    	; 0x43e6 <SetFire()+0x42>
    448e:	80 35       	cpi	r24, 0x50	; 80
    4490:	09 f4       	brne	.+2      	; 0x4494 <SetFire()+0xf0>
    4492:	60 c0       	rjmp	.+192    	; 0x4554 <SetFire()+0x1b0>
    4494:	84 36       	cpi	r24, 0x64	; 100
    4496:	09 f0       	breq	.+2      	; 0x449a <SetFire()+0xf6>
    4498:	a6 cf       	rjmp	.-180    	; 0x43e6 <SetFire()+0x42>
    449a:	60 e0       	ldi	r22, 0x00	; 0
    449c:	8c ec       	ldi	r24, 0xCC	; 204
    449e:	90 e1       	ldi	r25, 0x10	; 16
    44a0:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    44a4:	80 e0       	ldi	r24, 0x00	; 0
    44a6:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    44aa:	9d cf       	rjmp	.-198    	; 0x43e6 <SetFire()+0x42>
    44ac:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    44b0:	7c 01       	movw	r14, r24
    44b2:	69 e1       	ldi	r22, 0x19	; 25
    44b4:	72 e0       	ldi	r23, 0x02	; 2
    44b6:	ce 01       	movw	r24, r28
    44b8:	01 96       	adiw	r24, 0x01	; 1
    44ba:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    44be:	01 e0       	ldi	r16, 0x01	; 1
    44c0:	97 01       	movw	r18, r14
    44c2:	4b e4       	ldi	r20, 0x4B	; 75
    44c4:	50 e0       	ldi	r21, 0x00	; 0
    44c6:	6c e0       	ldi	r22, 0x0C	; 12
    44c8:	78 e3       	ldi	r23, 0x38	; 56
    44ca:	ce 01       	movw	r24, r28
    44cc:	01 96       	adiw	r24, 0x01	; 1
    44ce:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    44d2:	ce 01       	movw	r24, r28
    44d4:	01 96       	adiw	r24, 0x01	; 1
    44d6:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    44da:	85 cf       	rjmp	.-246    	; 0x43e6 <SetFire()+0x42>
    44dc:	42 e0       	ldi	r20, 0x02	; 2
    44de:	64 e0       	ldi	r22, 0x04	; 4
    44e0:	88 ec       	ldi	r24, 0xC8	; 200
    44e2:	99 e2       	ldi	r25, 0x29	; 41
    44e4:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    44e8:	7e cf       	rjmp	.-260    	; 0x43e6 <SetFire()+0x42>
    44ea:	45 e0       	ldi	r20, 0x05	; 5
    44ec:	68 e0       	ldi	r22, 0x08	; 8
    44ee:	8f cf       	rjmp	.-226    	; 0x440e <SetFire()+0x6a>
    44f0:	4f e0       	ldi	r20, 0x0F	; 15
    44f2:	96 cf       	rjmp	.-212    	; 0x4420 <SetFire()+0x7c>
    44f4:	49 e1       	ldi	r20, 0x19	; 25
    44f6:	61 e0       	ldi	r22, 0x01	; 1
    44f8:	81 e1       	ldi	r24, 0x11	; 17
    44fa:	99 e3       	ldi	r25, 0x39	; 57
    44fc:	f3 cf       	rjmp	.-26     	; 0x44e4 <SetFire()+0x140>
    44fe:	4d e0       	ldi	r20, 0x0D	; 13
    4500:	52 e0       	ldi	r21, 0x02	; 2
    4502:	6e e1       	ldi	r22, 0x1E	; 30
    4504:	88 e3       	ldi	r24, 0x38	; 56
    4506:	91 e4       	ldi	r25, 0x41	; 65
    4508:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    450c:	6c cf       	rjmp	.-296    	; 0x43e6 <SetFire()+0x42>
    450e:	4d e0       	ldi	r20, 0x0D	; 13
    4510:	52 e0       	ldi	r21, 0x02	; 2
    4512:	68 e2       	ldi	r22, 0x28	; 40
    4514:	a4 cf       	rjmp	.-184    	; 0x445e <SetFire()+0xba>
    4516:	4a ef       	ldi	r20, 0xFA	; 250
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	62 e3       	ldi	r22, 0x32	; 50
    451c:	f3 cf       	rjmp	.-26     	; 0x4504 <SetFire()+0x160>
    451e:	21 e0       	ldi	r18, 0x01	; 1
    4520:	4a ef       	ldi	r20, 0xFA	; 250
    4522:	50 e0       	ldi	r21, 0x00	; 0
    4524:	67 e3       	ldi	r22, 0x37	; 55
    4526:	88 e3       	ldi	r24, 0x38	; 56
    4528:	91 e4       	ldi	r25, 0x41	; 65
    452a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>
    452e:	5b cf       	rjmp	.-330    	; 0x43e6 <SetFire()+0x42>
    4530:	41 e4       	ldi	r20, 0x41	; 65
    4532:	6c e0       	ldi	r22, 0x0C	; 12
    4534:	88 e3       	ldi	r24, 0x38	; 56
    4536:	91 e4       	ldi	r25, 0x41	; 65
    4538:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    453c:	54 cf       	rjmp	.-344    	; 0x43e6 <SetFire()+0x42>
    453e:	20 e0       	ldi	r18, 0x00	; 0
    4540:	4a ef       	ldi	r20, 0xFA	; 250
    4542:	50 e0       	ldi	r21, 0x00	; 0
    4544:	66 e4       	ldi	r22, 0x46	; 70
    4546:	ef cf       	rjmp	.-34     	; 0x4526 <SetFire()+0x182>
    4548:	60 e5       	ldi	r22, 0x50	; 80
    454a:	8d eb       	ldi	r24, 0xBD	; 189
    454c:	92 e9       	ldi	r25, 0x92	; 146
    454e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    4552:	49 cf       	rjmp	.-366    	; 0x43e6 <SetFire()+0x42>
    4554:	64 e6       	ldi	r22, 0x64	; 100
    4556:	80 e1       	ldi	r24, 0x10	; 16
    4558:	97 e2       	ldi	r25, 0x27	; 39
    455a:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    455e:	43 cf       	rjmp	.-378    	; 0x43e6 <SetFire()+0x42>

00004560 <Chandelier()>:
    4560:	ef 92       	push	r14
    4562:	ff 92       	push	r15
    4564:	0f 93       	push	r16
    4566:	1f 93       	push	r17
    4568:	cf 93       	push	r28
    456a:	df 93       	push	r29
    456c:	00 d0       	rcall	.+0      	; 0x456e <Chandelier()+0xe>
    456e:	00 d0       	rcall	.+0      	; 0x4570 <Chandelier()+0x10>
    4570:	00 d0       	rcall	.+0      	; 0x4572 <Chandelier()+0x12>
    4572:	1f 92       	push	r1
    4574:	cd b7       	in	r28, 0x3d	; 61
    4576:	de b7       	in	r29, 0x3e	; 62
    4578:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    457c:	8e 31       	cpi	r24, 0x1E	; 30
    457e:	09 f4       	brne	.+2      	; 0x4582 <Chandelier()+0x22>
    4580:	b0 c0       	rjmp	.+352    	; 0x46e2 <Chandelier()+0x182>
    4582:	a0 f5       	brcc	.+104    	; 0x45ec <Chandelier()+0x8c>
    4584:	85 30       	cpi	r24, 0x05	; 5
    4586:	09 f4       	brne	.+2      	; 0x458a <Chandelier()+0x2a>
    4588:	93 c0       	rjmp	.+294    	; 0x46b0 <Chandelier()+0x150>
    458a:	b8 f4       	brcc	.+46     	; 0x45ba <Chandelier()+0x5a>
    458c:	81 30       	cpi	r24, 0x01	; 1
    458e:	09 f4       	brne	.+2      	; 0x4592 <Chandelier()+0x32>
    4590:	88 c0       	rjmp	.+272    	; 0x46a2 <Chandelier()+0x142>
    4592:	08 f4       	brcc	.+2      	; 0x4596 <Chandelier()+0x36>
    4594:	6e c0       	rjmp	.+220    	; 0x4672 <Chandelier()+0x112>
    4596:	45 e0       	ldi	r20, 0x05	; 5
    4598:	64 e0       	ldi	r22, 0x04	; 4
    459a:	82 30       	cpi	r24, 0x02	; 2
    459c:	09 f4       	brne	.+2      	; 0x45a0 <Chandelier()+0x40>
    459e:	83 c0       	rjmp	.+262    	; 0x46a6 <Chandelier()+0x146>
    45a0:	27 96       	adiw	r28, 0x07	; 7
    45a2:	0f b6       	in	r0, 0x3f	; 63
    45a4:	f8 94       	cli
    45a6:	de bf       	out	0x3e, r29	; 62
    45a8:	0f be       	out	0x3f, r0	; 63
    45aa:	cd bf       	out	0x3d, r28	; 61
    45ac:	df 91       	pop	r29
    45ae:	cf 91       	pop	r28
    45b0:	1f 91       	pop	r17
    45b2:	0f 91       	pop	r16
    45b4:	ff 90       	pop	r15
    45b6:	ef 90       	pop	r14
    45b8:	08 95       	ret
    45ba:	8f 30       	cpi	r24, 0x0F	; 15
    45bc:	09 f4       	brne	.+2      	; 0x45c0 <Chandelier()+0x60>
    45be:	7c c0       	rjmp	.+248    	; 0x46b8 <Chandelier()+0x158>
    45c0:	40 f4       	brcc	.+16     	; 0x45d2 <Chandelier()+0x72>
    45c2:	8a 30       	cpi	r24, 0x0A	; 10
    45c4:	69 f7       	brne	.-38     	; 0x45a0 <Chandelier()+0x40>
    45c6:	6f e0       	ldi	r22, 0x0F	; 15
    45c8:	86 e0       	ldi	r24, 0x06	; 6
    45ca:	9f e3       	ldi	r25, 0x3F	; 63
    45cc:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    45d0:	e7 cf       	rjmp	.-50     	; 0x45a0 <Chandelier()+0x40>
    45d2:	84 31       	cpi	r24, 0x14	; 20
    45d4:	09 f4       	brne	.+2      	; 0x45d8 <Chandelier()+0x78>
    45d6:	74 c0       	rjmp	.+232    	; 0x46c0 <Chandelier()+0x160>
    45d8:	44 ef       	ldi	r20, 0xF4	; 244
    45da:	51 e0       	ldi	r21, 0x01	; 1
    45dc:	6e e1       	ldi	r22, 0x1E	; 30
    45de:	89 31       	cpi	r24, 0x19	; 25
    45e0:	f9 f6       	brne	.-66     	; 0x45a0 <Chandelier()+0x40>
    45e2:	86 e0       	ldi	r24, 0x06	; 6
    45e4:	9f e3       	ldi	r25, 0x3F	; 63
    45e6:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    45ea:	da cf       	rjmp	.-76     	; 0x45a0 <Chandelier()+0x40>
    45ec:	87 33       	cpi	r24, 0x37	; 55
    45ee:	09 f4       	brne	.+2      	; 0x45f2 <Chandelier()+0x92>
    45f0:	90 c0       	rjmp	.+288    	; 0x4712 <Chandelier()+0x1b2>
    45f2:	d0 f4       	brcc	.+52     	; 0x4628 <Chandelier()+0xc8>
    45f4:	88 32       	cpi	r24, 0x28	; 40
    45f6:	09 f4       	brne	.+2      	; 0x45fa <Chandelier()+0x9a>
    45f8:	79 c0       	rjmp	.+242    	; 0x46ec <Chandelier()+0x18c>
    45fa:	50 f4       	brcc	.+20     	; 0x4610 <Chandelier()+0xb0>
    45fc:	44 ef       	ldi	r20, 0xF4	; 244
    45fe:	51 e0       	ldi	r21, 0x01	; 1
    4600:	68 e2       	ldi	r22, 0x28	; 40
    4602:	83 32       	cpi	r24, 0x23	; 35
    4604:	69 f6       	brne	.-102    	; 0x45a0 <Chandelier()+0x40>
    4606:	86 e0       	ldi	r24, 0x06	; 6
    4608:	9f e3       	ldi	r25, 0x3F	; 63
    460a:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    460e:	c8 cf       	rjmp	.-112    	; 0x45a0 <Chandelier()+0x40>
    4610:	8d 32       	cpi	r24, 0x2D	; 45
    4612:	09 f4       	brne	.+2      	; 0x4616 <Chandelier()+0xb6>
    4614:	78 c0       	rjmp	.+240    	; 0x4706 <Chandelier()+0x1a6>
    4616:	82 33       	cpi	r24, 0x32	; 50
    4618:	19 f6       	brne	.-122    	; 0x45a0 <Chandelier()+0x40>
    461a:	47 e3       	ldi	r20, 0x37	; 55
    461c:	67 e0       	ldi	r22, 0x07	; 7
    461e:	8d ef       	ldi	r24, 0xFD	; 253
    4620:	9e e3       	ldi	r25, 0x3E	; 62
    4622:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4626:	bc cf       	rjmp	.-136    	; 0x45a0 <Chandelier()+0x40>
    4628:	81 34       	cpi	r24, 0x41	; 65
    462a:	09 f4       	brne	.+2      	; 0x462e <Chandelier()+0xce>
    462c:	76 c0       	rjmp	.+236    	; 0x471a <Chandelier()+0x1ba>
    462e:	90 f4       	brcc	.+36     	; 0x4654 <Chandelier()+0xf4>
    4630:	8c 33       	cpi	r24, 0x3C	; 60
    4632:	09 f0       	breq	.+2      	; 0x4636 <Chandelier()+0xd6>
    4634:	b5 cf       	rjmp	.-150    	; 0x45a0 <Chandelier()+0x40>
    4636:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    463a:	7c 01       	movw	r14, r24
    463c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4640:	8c 01       	movw	r16, r24
    4642:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4646:	9c 01       	movw	r18, r24
    4648:	4b e4       	ldi	r20, 0x4B	; 75
    464a:	50 e0       	ldi	r21, 0x00	; 0
    464c:	61 e4       	ldi	r22, 0x41	; 65
    464e:	84 e4       	ldi	r24, 0x44	; 68
    4650:	9f e2       	ldi	r25, 0x2F	; 47
    4652:	44 c0       	rjmp	.+136    	; 0x46dc <Chandelier()+0x17c>
    4654:	86 34       	cpi	r24, 0x46	; 70
    4656:	09 f4       	brne	.+2      	; 0x465a <Chandelier()+0xfa>
    4658:	65 c0       	rjmp	.+202    	; 0x4724 <Chandelier()+0x1c4>
    465a:	84 36       	cpi	r24, 0x64	; 100
    465c:	09 f0       	breq	.+2      	; 0x4660 <Chandelier()+0x100>
    465e:	a0 cf       	rjmp	.-192    	; 0x45a0 <Chandelier()+0x40>
    4660:	60 e0       	ldi	r22, 0x00	; 0
    4662:	8c ec       	ldi	r24, 0xCC	; 204
    4664:	90 e1       	ldi	r25, 0x10	; 16
    4666:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    466a:	80 e0       	ldi	r24, 0x00	; 0
    466c:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    4670:	97 cf       	rjmp	.-210    	; 0x45a0 <Chandelier()+0x40>
    4672:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4676:	7c 01       	movw	r14, r24
    4678:	67 e3       	ldi	r22, 0x37	; 55
    467a:	72 e0       	ldi	r23, 0x02	; 2
    467c:	ce 01       	movw	r24, r28
    467e:	01 96       	adiw	r24, 0x01	; 1
    4680:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4684:	01 e0       	ldi	r16, 0x01	; 1
    4686:	97 01       	movw	r18, r14
    4688:	4b e4       	ldi	r20, 0x4B	; 75
    468a:	50 e0       	ldi	r21, 0x00	; 0
    468c:	6e e0       	ldi	r22, 0x0E	; 14
    468e:	7d e3       	ldi	r23, 0x3D	; 61
    4690:	ce 01       	movw	r24, r28
    4692:	01 96       	adiw	r24, 0x01	; 1
    4694:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4698:	ce 01       	movw	r24, r28
    469a:	01 96       	adiw	r24, 0x01	; 1
    469c:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    46a0:	7f cf       	rjmp	.-258    	; 0x45a0 <Chandelier()+0x40>
    46a2:	42 e0       	ldi	r20, 0x02	; 2
    46a4:	63 e0       	ldi	r22, 0x03	; 3
    46a6:	83 e8       	ldi	r24, 0x83	; 131
    46a8:	9f e1       	ldi	r25, 0x1F	; 31
    46aa:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    46ae:	78 cf       	rjmp	.-272    	; 0x45a0 <Chandelier()+0x40>
    46b0:	44 ef       	ldi	r20, 0xF4	; 244
    46b2:	51 e0       	ldi	r21, 0x01	; 1
    46b4:	6a e0       	ldi	r22, 0x0A	; 10
    46b6:	95 cf       	rjmp	.-214    	; 0x45e2 <Chandelier()+0x82>
    46b8:	44 ef       	ldi	r20, 0xF4	; 244
    46ba:	51 e0       	ldi	r21, 0x01	; 1
    46bc:	64 e1       	ldi	r22, 0x14	; 20
    46be:	a3 cf       	rjmp	.-186    	; 0x4606 <Chandelier()+0xa6>
    46c0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    46c4:	7c 01       	movw	r14, r24
    46c6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    46ca:	8c 01       	movw	r16, r24
    46cc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    46d0:	9c 01       	movw	r18, r24
    46d2:	4b e4       	ldi	r20, 0x4B	; 75
    46d4:	50 e0       	ldi	r21, 0x00	; 0
    46d6:	69 e1       	ldi	r22, 0x19	; 25
    46d8:	86 e0       	ldi	r24, 0x06	; 6
    46da:	9f e3       	ldi	r25, 0x3F	; 63
    46dc:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    46e0:	5f cf       	rjmp	.-322    	; 0x45a0 <Chandelier()+0x40>
    46e2:	43 e2       	ldi	r20, 0x23	; 35
    46e4:	64 e0       	ldi	r22, 0x04	; 4
    46e6:	86 e0       	ldi	r24, 0x06	; 6
    46e8:	9f e3       	ldi	r25, 0x3F	; 63
    46ea:	df cf       	rjmp	.-66     	; 0x46aa <Chandelier()+0x14a>
    46ec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    46f0:	7c 01       	movw	r14, r24
    46f2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    46f6:	8c 01       	movw	r16, r24
    46f8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    46fc:	9c 01       	movw	r18, r24
    46fe:	4b e4       	ldi	r20, 0x4B	; 75
    4700:	50 e0       	ldi	r21, 0x00	; 0
    4702:	6d e2       	ldi	r22, 0x2D	; 45
    4704:	e9 cf       	rjmp	.-46     	; 0x46d8 <Chandelier()+0x178>
    4706:	62 e3       	ldi	r22, 0x32	; 50
    4708:	82 e7       	ldi	r24, 0x72	; 114
    470a:	9f e1       	ldi	r25, 0x1F	; 31
    470c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    4710:	47 cf       	rjmp	.-370    	; 0x45a0 <Chandelier()+0x40>
    4712:	44 ef       	ldi	r20, 0xF4	; 244
    4714:	51 e0       	ldi	r21, 0x01	; 1
    4716:	6c e3       	ldi	r22, 0x3C	; 60
    4718:	76 cf       	rjmp	.-276    	; 0x4606 <Chandelier()+0xa6>
    471a:	46 e4       	ldi	r20, 0x46	; 70
    471c:	6c e0       	ldi	r22, 0x0C	; 12
    471e:	89 eb       	ldi	r24, 0xB9	; 185
    4720:	9f e0       	ldi	r25, 0x0F	; 15
    4722:	7f cf       	rjmp	.-258    	; 0x4622 <Chandelier()+0xc2>
    4724:	64 e6       	ldi	r22, 0x64	; 100
    4726:	80 e1       	ldi	r24, 0x10	; 16
    4728:	97 e2       	ldi	r25, 0x27	; 39
    472a:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    472e:	38 cf       	rjmp	.-400    	; 0x45a0 <Chandelier()+0x40>

00004730 <Titanium()>:
    4730:	ef 92       	push	r14
    4732:	ff 92       	push	r15
    4734:	0f 93       	push	r16
    4736:	1f 93       	push	r17
    4738:	cf 93       	push	r28
    473a:	df 93       	push	r29
    473c:	00 d0       	rcall	.+0      	; 0x473e <Titanium()+0xe>
    473e:	00 d0       	rcall	.+0      	; 0x4740 <Titanium()+0x10>
    4740:	00 d0       	rcall	.+0      	; 0x4742 <Titanium()+0x12>
    4742:	1f 92       	push	r1
    4744:	cd b7       	in	r28, 0x3d	; 61
    4746:	de b7       	in	r29, 0x3e	; 62
    4748:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    474c:	88 32       	cpi	r24, 0x28	; 40
    474e:	09 f4       	brne	.+2      	; 0x4752 <Titanium()+0x22>
    4750:	a2 c0       	rjmp	.+324    	; 0x4896 <Titanium()+0x166>
    4752:	08 f0       	brcs	.+2      	; 0x4756 <Titanium()+0x26>
    4754:	44 c0       	rjmp	.+136    	; 0x47de <Titanium()+0xae>
    4756:	8f 30       	cpi	r24, 0x0F	; 15
    4758:	09 f4       	brne	.+2      	; 0x475c <Titanium()+0x2c>
    475a:	8b c0       	rjmp	.+278    	; 0x4872 <Titanium()+0x142>
    475c:	00 f5       	brcc	.+64     	; 0x479e <Titanium()+0x6e>
    475e:	85 30       	cpi	r24, 0x05	; 5
    4760:	09 f4       	brne	.+2      	; 0x4764 <Titanium()+0x34>
    4762:	7c c0       	rjmp	.+248    	; 0x485c <Titanium()+0x12c>
    4764:	8a 30       	cpi	r24, 0x0A	; 10
    4766:	09 f4       	brne	.+2      	; 0x476a <Titanium()+0x3a>
    4768:	81 c0       	rjmp	.+258    	; 0x486c <Titanium()+0x13c>
    476a:	81 11       	cpse	r24, r1
    476c:	1f c0       	rjmp	.+62     	; 0x47ac <Titanium()+0x7c>
    476e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4772:	7c 01       	movw	r14, r24
    4774:	69 e4       	ldi	r22, 0x49	; 73
    4776:	72 e0       	ldi	r23, 0x02	; 2
    4778:	ce 01       	movw	r24, r28
    477a:	01 96       	adiw	r24, 0x01	; 1
    477c:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4780:	05 e0       	ldi	r16, 0x05	; 5
    4782:	97 01       	movw	r18, r14
    4784:	4b e4       	ldi	r20, 0x4B	; 75
    4786:	50 e0       	ldi	r21, 0x00	; 0
    4788:	61 e8       	ldi	r22, 0x81	; 129
    478a:	7e e2       	ldi	r23, 0x2E	; 46
    478c:	ce 01       	movw	r24, r28
    478e:	01 96       	adiw	r24, 0x01	; 1
    4790:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4794:	ce 01       	movw	r24, r28
    4796:	01 96       	adiw	r24, 0x01	; 1
    4798:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    479c:	07 c0       	rjmp	.+14     	; 0x47ac <Titanium()+0x7c>
    479e:	89 31       	cpi	r24, 0x19	; 25
    47a0:	09 f4       	brne	.+2      	; 0x47a4 <Titanium()+0x74>
    47a2:	6a c0       	rjmp	.+212    	; 0x4878 <Titanium()+0x148>
    47a4:	80 f4       	brcc	.+32     	; 0x47c6 <Titanium()+0x96>
    47a6:	69 e1       	ldi	r22, 0x19	; 25
    47a8:	84 31       	cpi	r24, 0x14	; 20
    47aa:	21 f1       	breq	.+72     	; 0x47f4 <Titanium()+0xc4>
    47ac:	27 96       	adiw	r28, 0x07	; 7
    47ae:	0f b6       	in	r0, 0x3f	; 63
    47b0:	f8 94       	cli
    47b2:	de bf       	out	0x3e, r29	; 62
    47b4:	0f be       	out	0x3f, r0	; 63
    47b6:	cd bf       	out	0x3d, r28	; 61
    47b8:	df 91       	pop	r29
    47ba:	cf 91       	pop	r28
    47bc:	1f 91       	pop	r17
    47be:	0f 91       	pop	r16
    47c0:	ff 90       	pop	r15
    47c2:	ef 90       	pop	r14
    47c4:	08 95       	ret
    47c6:	8e 31       	cpi	r24, 0x1E	; 30
    47c8:	09 f4       	brne	.+2      	; 0x47cc <Titanium()+0x9c>
    47ca:	5e c0       	rjmp	.+188    	; 0x4888 <Titanium()+0x158>
    47cc:	48 e2       	ldi	r20, 0x28	; 40
    47ce:	69 e0       	ldi	r22, 0x09	; 9
    47d0:	83 32       	cpi	r24, 0x23	; 35
    47d2:	61 f7       	brne	.-40     	; 0x47ac <Titanium()+0x7c>
    47d4:	86 e8       	ldi	r24, 0x86	; 134
    47d6:	9b e3       	ldi	r25, 0x3B	; 59
    47d8:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    47dc:	e7 cf       	rjmp	.-50     	; 0x47ac <Titanium()+0x7c>
    47de:	81 34       	cpi	r24, 0x41	; 65
    47e0:	09 f4       	brne	.+2      	; 0x47e4 <Titanium()+0xb4>
    47e2:	64 c0       	rjmp	.+200    	; 0x48ac <Titanium()+0x17c>
    47e4:	b8 f4       	brcc	.+46     	; 0x4814 <Titanium()+0xe4>
    47e6:	82 33       	cpi	r24, 0x32	; 50
    47e8:	09 f4       	brne	.+2      	; 0x47ec <Titanium()+0xbc>
    47ea:	57 c0       	rjmp	.+174    	; 0x489a <Titanium()+0x16a>
    47ec:	40 f4       	brcc	.+16     	; 0x47fe <Titanium()+0xce>
    47ee:	62 e3       	ldi	r22, 0x32	; 50
    47f0:	8d 32       	cpi	r24, 0x2D	; 45
    47f2:	e1 f6       	brne	.-72     	; 0x47ac <Titanium()+0x7c>
    47f4:	86 e8       	ldi	r24, 0x86	; 134
    47f6:	9b e3       	ldi	r25, 0x3B	; 59
    47f8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    47fc:	d7 cf       	rjmp	.-82     	; 0x47ac <Titanium()+0x7c>
    47fe:	87 33       	cpi	r24, 0x37	; 55
    4800:	09 f4       	brne	.+2      	; 0x4804 <Titanium()+0xd4>
    4802:	4f c0       	rjmp	.+158    	; 0x48a2 <Titanium()+0x172>
    4804:	8c 33       	cpi	r24, 0x3C	; 60
    4806:	91 f6       	brne	.-92     	; 0x47ac <Titanium()+0x7c>
    4808:	61 e4       	ldi	r22, 0x41	; 65
    480a:	82 e6       	ldi	r24, 0x62	; 98
    480c:	9d e3       	ldi	r25, 0x3D	; 61
    480e:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4812:	cc cf       	rjmp	.-104    	; 0x47ac <Titanium()+0x7c>
    4814:	80 35       	cpi	r24, 0x50	; 80
    4816:	09 f4       	brne	.+2      	; 0x481a <Titanium()+0xea>
    4818:	56 c0       	rjmp	.+172    	; 0x48c6 <Titanium()+0x196>
    481a:	88 f4       	brcc	.+34     	; 0x483e <Titanium()+0x10e>
    481c:	8b 34       	cpi	r24, 0x4B	; 75
    481e:	31 f6       	brne	.-116    	; 0x47ac <Titanium()+0x7c>
    4820:	ee 24       	eor	r14, r14
    4822:	ea 94       	dec	r14
    4824:	f1 2c       	mov	r15, r1
    4826:	0f ef       	ldi	r16, 0xFF	; 255
    4828:	10 e0       	ldi	r17, 0x00	; 0
    482a:	2f ef       	ldi	r18, 0xFF	; 255
    482c:	30 e0       	ldi	r19, 0x00	; 0
    482e:	4f ea       	ldi	r20, 0xAF	; 175
    4830:	50 e0       	ldi	r21, 0x00	; 0
    4832:	60 e5       	ldi	r22, 0x50	; 80
    4834:	85 e1       	ldi	r24, 0x15	; 21
    4836:	94 e3       	ldi	r25, 0x34	; 52
    4838:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    483c:	b7 cf       	rjmp	.-146    	; 0x47ac <Titanium()+0x7c>
    483e:	85 35       	cpi	r24, 0x55	; 85
    4840:	09 f4       	brne	.+2      	; 0x4844 <Titanium()+0x114>
    4842:	47 c0       	rjmp	.+142    	; 0x48d2 <Titanium()+0x1a2>
    4844:	84 36       	cpi	r24, 0x64	; 100
    4846:	09 f0       	breq	.+2      	; 0x484a <Titanium()+0x11a>
    4848:	b1 cf       	rjmp	.-158    	; 0x47ac <Titanium()+0x7c>
    484a:	60 e0       	ldi	r22, 0x00	; 0
    484c:	8c ec       	ldi	r24, 0xCC	; 204
    484e:	90 e1       	ldi	r25, 0x10	; 16
    4850:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    4854:	80 e0       	ldi	r24, 0x00	; 0
    4856:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    485a:	a8 cf       	rjmp	.-176    	; 0x47ac <Titanium()+0x7c>
    485c:	4b ed       	ldi	r20, 0xDB	; 219
    485e:	51 e0       	ldi	r21, 0x01	; 1
    4860:	6a e0       	ldi	r22, 0x0A	; 10
    4862:	88 e5       	ldi	r24, 0x58	; 88
    4864:	93 e2       	ldi	r25, 0x23	; 35
    4866:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    486a:	a0 cf       	rjmp	.-192    	; 0x47ac <Titanium()+0x7c>
    486c:	4f e0       	ldi	r20, 0x0F	; 15
    486e:	66 e0       	ldi	r22, 0x06	; 6
    4870:	b1 cf       	rjmp	.-158    	; 0x47d4 <Titanium()+0xa4>
    4872:	44 e1       	ldi	r20, 0x14	; 20
    4874:	63 e0       	ldi	r22, 0x03	; 3
    4876:	ae cf       	rjmp	.-164    	; 0x47d4 <Titanium()+0xa4>
    4878:	4b ed       	ldi	r20, 0xDB	; 219
    487a:	51 e0       	ldi	r21, 0x01	; 1
    487c:	6e e1       	ldi	r22, 0x1E	; 30
    487e:	86 e8       	ldi	r24, 0x86	; 134
    4880:	9b e3       	ldi	r25, 0x3B	; 59
    4882:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4886:	92 cf       	rjmp	.-220    	; 0x47ac <Titanium()+0x7c>
    4888:	43 e2       	ldi	r20, 0x23	; 35
    488a:	64 e0       	ldi	r22, 0x04	; 4
    488c:	86 e8       	ldi	r24, 0x86	; 134
    488e:	9b e3       	ldi	r25, 0x3B	; 59
    4890:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4894:	8b cf       	rjmp	.-234    	; 0x47ac <Titanium()+0x7c>
    4896:	4d e2       	ldi	r20, 0x2D	; 45
    4898:	ed cf       	rjmp	.-38     	; 0x4874 <Titanium()+0x144>
    489a:	4b ed       	ldi	r20, 0xDB	; 219
    489c:	51 e0       	ldi	r21, 0x01	; 1
    489e:	67 e3       	ldi	r22, 0x37	; 55
    48a0:	ee cf       	rjmp	.-36     	; 0x487e <Titanium()+0x14e>
    48a2:	4c e3       	ldi	r20, 0x3C	; 60
    48a4:	68 e0       	ldi	r22, 0x08	; 8
    48a6:	8a ea       	ldi	r24, 0xAA	; 170
    48a8:	99 e3       	ldi	r25, 0x39	; 57
    48aa:	f2 cf       	rjmp	.-28     	; 0x4890 <Titanium()+0x160>
    48ac:	90 ed       	ldi	r25, 0xD0	; 208
    48ae:	e9 2e       	mov	r14, r25
    48b0:	97 e0       	ldi	r25, 0x07	; 7
    48b2:	f9 2e       	mov	r15, r25
    48b4:	04 e6       	ldi	r16, 0x64	; 100
    48b6:	21 e0       	ldi	r18, 0x01	; 1
    48b8:	4b e4       	ldi	r20, 0x4B	; 75
    48ba:	61 e0       	ldi	r22, 0x01	; 1
    48bc:	8c e0       	ldi	r24, 0x0C	; 12
    48be:	97 e7       	ldi	r25, 0x77	; 119
    48c0:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    48c4:	73 cf       	rjmp	.-282    	; 0x47ac <Titanium()+0x7c>
    48c6:	65 e5       	ldi	r22, 0x55	; 85
    48c8:	83 ec       	ldi	r24, 0xC3	; 195
    48ca:	9d e1       	ldi	r25, 0x1D	; 29
    48cc:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    48d0:	6d cf       	rjmp	.-294    	; 0x47ac <Titanium()+0x7c>
    48d2:	64 e6       	ldi	r22, 0x64	; 100
    48d4:	8b e9       	ldi	r24, 0x9B	; 155
    48d6:	9f e6       	ldi	r25, 0x6F	; 111
    48d8:	9a cf       	rjmp	.-204    	; 0x480e <Titanium()+0xde>

000048da <SomeoneYouLoved()>:
    48da:	ef 92       	push	r14
    48dc:	ff 92       	push	r15
    48de:	0f 93       	push	r16
    48e0:	1f 93       	push	r17
    48e2:	cf 93       	push	r28
    48e4:	df 93       	push	r29
    48e6:	00 d0       	rcall	.+0      	; 0x48e8 <SomeoneYouLoved()+0xe>
    48e8:	00 d0       	rcall	.+0      	; 0x48ea <SomeoneYouLoved()+0x10>
    48ea:	00 d0       	rcall	.+0      	; 0x48ec <SomeoneYouLoved()+0x12>
    48ec:	1f 92       	push	r1
    48ee:	cd b7       	in	r28, 0x3d	; 61
    48f0:	de b7       	in	r29, 0x3e	; 62
    48f2:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    48f6:	8e 31       	cpi	r24, 0x1E	; 30
    48f8:	09 f4       	brne	.+2      	; 0x48fc <SomeoneYouLoved()+0x22>
    48fa:	b0 c0       	rjmp	.+352    	; 0x4a5c <SomeoneYouLoved()+0x182>
    48fc:	a0 f5       	brcc	.+104    	; 0x4966 <SomeoneYouLoved()+0x8c>
    48fe:	85 30       	cpi	r24, 0x05	; 5
    4900:	09 f4       	brne	.+2      	; 0x4904 <SomeoneYouLoved()+0x2a>
    4902:	93 c0       	rjmp	.+294    	; 0x4a2a <SomeoneYouLoved()+0x150>
    4904:	b8 f4       	brcc	.+46     	; 0x4934 <SomeoneYouLoved()+0x5a>
    4906:	81 30       	cpi	r24, 0x01	; 1
    4908:	09 f4       	brne	.+2      	; 0x490c <SomeoneYouLoved()+0x32>
    490a:	88 c0       	rjmp	.+272    	; 0x4a1c <SomeoneYouLoved()+0x142>
    490c:	08 f4       	brcc	.+2      	; 0x4910 <SomeoneYouLoved()+0x36>
    490e:	6e c0       	rjmp	.+220    	; 0x49ec <SomeoneYouLoved()+0x112>
    4910:	45 e0       	ldi	r20, 0x05	; 5
    4912:	64 e0       	ldi	r22, 0x04	; 4
    4914:	82 30       	cpi	r24, 0x02	; 2
    4916:	09 f4       	brne	.+2      	; 0x491a <SomeoneYouLoved()+0x40>
    4918:	83 c0       	rjmp	.+262    	; 0x4a20 <SomeoneYouLoved()+0x146>
    491a:	27 96       	adiw	r28, 0x07	; 7
    491c:	0f b6       	in	r0, 0x3f	; 63
    491e:	f8 94       	cli
    4920:	de bf       	out	0x3e, r29	; 62
    4922:	0f be       	out	0x3f, r0	; 63
    4924:	cd bf       	out	0x3d, r28	; 61
    4926:	df 91       	pop	r29
    4928:	cf 91       	pop	r28
    492a:	1f 91       	pop	r17
    492c:	0f 91       	pop	r16
    492e:	ff 90       	pop	r15
    4930:	ef 90       	pop	r14
    4932:	08 95       	ret
    4934:	8f 30       	cpi	r24, 0x0F	; 15
    4936:	09 f4       	brne	.+2      	; 0x493a <SomeoneYouLoved()+0x60>
    4938:	7c c0       	rjmp	.+248    	; 0x4a32 <SomeoneYouLoved()+0x158>
    493a:	40 f4       	brcc	.+16     	; 0x494c <SomeoneYouLoved()+0x72>
    493c:	8a 30       	cpi	r24, 0x0A	; 10
    493e:	69 f7       	brne	.-38     	; 0x491a <SomeoneYouLoved()+0x40>
    4940:	6f e0       	ldi	r22, 0x0F	; 15
    4942:	86 e0       	ldi	r24, 0x06	; 6
    4944:	9f e3       	ldi	r25, 0x3F	; 63
    4946:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    494a:	e7 cf       	rjmp	.-50     	; 0x491a <SomeoneYouLoved()+0x40>
    494c:	84 31       	cpi	r24, 0x14	; 20
    494e:	09 f4       	brne	.+2      	; 0x4952 <SomeoneYouLoved()+0x78>
    4950:	74 c0       	rjmp	.+232    	; 0x4a3a <SomeoneYouLoved()+0x160>
    4952:	44 ef       	ldi	r20, 0xF4	; 244
    4954:	51 e0       	ldi	r21, 0x01	; 1
    4956:	6e e1       	ldi	r22, 0x1E	; 30
    4958:	89 31       	cpi	r24, 0x19	; 25
    495a:	f9 f6       	brne	.-66     	; 0x491a <SomeoneYouLoved()+0x40>
    495c:	86 e0       	ldi	r24, 0x06	; 6
    495e:	9f e3       	ldi	r25, 0x3F	; 63
    4960:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4964:	da cf       	rjmp	.-76     	; 0x491a <SomeoneYouLoved()+0x40>
    4966:	87 33       	cpi	r24, 0x37	; 55
    4968:	09 f4       	brne	.+2      	; 0x496c <SomeoneYouLoved()+0x92>
    496a:	90 c0       	rjmp	.+288    	; 0x4a8c <SomeoneYouLoved()+0x1b2>
    496c:	d0 f4       	brcc	.+52     	; 0x49a2 <SomeoneYouLoved()+0xc8>
    496e:	88 32       	cpi	r24, 0x28	; 40
    4970:	09 f4       	brne	.+2      	; 0x4974 <SomeoneYouLoved()+0x9a>
    4972:	79 c0       	rjmp	.+242    	; 0x4a66 <SomeoneYouLoved()+0x18c>
    4974:	50 f4       	brcc	.+20     	; 0x498a <SomeoneYouLoved()+0xb0>
    4976:	44 ef       	ldi	r20, 0xF4	; 244
    4978:	51 e0       	ldi	r21, 0x01	; 1
    497a:	68 e2       	ldi	r22, 0x28	; 40
    497c:	83 32       	cpi	r24, 0x23	; 35
    497e:	69 f6       	brne	.-102    	; 0x491a <SomeoneYouLoved()+0x40>
    4980:	86 e0       	ldi	r24, 0x06	; 6
    4982:	9f e3       	ldi	r25, 0x3F	; 63
    4984:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4988:	c8 cf       	rjmp	.-112    	; 0x491a <SomeoneYouLoved()+0x40>
    498a:	8d 32       	cpi	r24, 0x2D	; 45
    498c:	09 f4       	brne	.+2      	; 0x4990 <SomeoneYouLoved()+0xb6>
    498e:	78 c0       	rjmp	.+240    	; 0x4a80 <SomeoneYouLoved()+0x1a6>
    4990:	82 33       	cpi	r24, 0x32	; 50
    4992:	19 f6       	brne	.-122    	; 0x491a <SomeoneYouLoved()+0x40>
    4994:	47 e3       	ldi	r20, 0x37	; 55
    4996:	67 e0       	ldi	r22, 0x07	; 7
    4998:	8d ef       	ldi	r24, 0xFD	; 253
    499a:	9e e3       	ldi	r25, 0x3E	; 62
    499c:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    49a0:	bc cf       	rjmp	.-136    	; 0x491a <SomeoneYouLoved()+0x40>
    49a2:	81 34       	cpi	r24, 0x41	; 65
    49a4:	09 f4       	brne	.+2      	; 0x49a8 <SomeoneYouLoved()+0xce>
    49a6:	76 c0       	rjmp	.+236    	; 0x4a94 <SomeoneYouLoved()+0x1ba>
    49a8:	90 f4       	brcc	.+36     	; 0x49ce <SomeoneYouLoved()+0xf4>
    49aa:	8c 33       	cpi	r24, 0x3C	; 60
    49ac:	09 f0       	breq	.+2      	; 0x49b0 <SomeoneYouLoved()+0xd6>
    49ae:	b5 cf       	rjmp	.-150    	; 0x491a <SomeoneYouLoved()+0x40>
    49b0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    49b4:	7c 01       	movw	r14, r24
    49b6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    49ba:	8c 01       	movw	r16, r24
    49bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    49c0:	9c 01       	movw	r18, r24
    49c2:	4b e4       	ldi	r20, 0x4B	; 75
    49c4:	50 e0       	ldi	r21, 0x00	; 0
    49c6:	61 e4       	ldi	r22, 0x41	; 65
    49c8:	84 e4       	ldi	r24, 0x44	; 68
    49ca:	9f e2       	ldi	r25, 0x2F	; 47
    49cc:	44 c0       	rjmp	.+136    	; 0x4a56 <SomeoneYouLoved()+0x17c>
    49ce:	86 34       	cpi	r24, 0x46	; 70
    49d0:	09 f4       	brne	.+2      	; 0x49d4 <SomeoneYouLoved()+0xfa>
    49d2:	65 c0       	rjmp	.+202    	; 0x4a9e <SomeoneYouLoved()+0x1c4>
    49d4:	84 36       	cpi	r24, 0x64	; 100
    49d6:	09 f0       	breq	.+2      	; 0x49da <SomeoneYouLoved()+0x100>
    49d8:	a0 cf       	rjmp	.-192    	; 0x491a <SomeoneYouLoved()+0x40>
    49da:	60 e0       	ldi	r22, 0x00	; 0
    49dc:	8c ec       	ldi	r24, 0xCC	; 204
    49de:	90 e1       	ldi	r25, 0x10	; 16
    49e0:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    49e4:	80 e0       	ldi	r24, 0x00	; 0
    49e6:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    49ea:	97 cf       	rjmp	.-210    	; 0x491a <SomeoneYouLoved()+0x40>
    49ec:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    49f0:	7c 01       	movw	r14, r24
    49f2:	62 e6       	ldi	r22, 0x62	; 98
    49f4:	72 e0       	ldi	r23, 0x02	; 2
    49f6:	ce 01       	movw	r24, r28
    49f8:	01 96       	adiw	r24, 0x01	; 1
    49fa:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    49fe:	01 e0       	ldi	r16, 0x01	; 1
    4a00:	97 01       	movw	r18, r14
    4a02:	4b e4       	ldi	r20, 0x4B	; 75
    4a04:	50 e0       	ldi	r21, 0x00	; 0
    4a06:	6e e0       	ldi	r22, 0x0E	; 14
    4a08:	7d e3       	ldi	r23, 0x3D	; 61
    4a0a:	ce 01       	movw	r24, r28
    4a0c:	01 96       	adiw	r24, 0x01	; 1
    4a0e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4a12:	ce 01       	movw	r24, r28
    4a14:	01 96       	adiw	r24, 0x01	; 1
    4a16:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    4a1a:	7f cf       	rjmp	.-258    	; 0x491a <SomeoneYouLoved()+0x40>
    4a1c:	42 e0       	ldi	r20, 0x02	; 2
    4a1e:	63 e0       	ldi	r22, 0x03	; 3
    4a20:	83 e8       	ldi	r24, 0x83	; 131
    4a22:	9f e1       	ldi	r25, 0x1F	; 31
    4a24:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    4a28:	78 cf       	rjmp	.-272    	; 0x491a <SomeoneYouLoved()+0x40>
    4a2a:	44 ef       	ldi	r20, 0xF4	; 244
    4a2c:	51 e0       	ldi	r21, 0x01	; 1
    4a2e:	6a e0       	ldi	r22, 0x0A	; 10
    4a30:	95 cf       	rjmp	.-214    	; 0x495c <SomeoneYouLoved()+0x82>
    4a32:	44 ef       	ldi	r20, 0xF4	; 244
    4a34:	51 e0       	ldi	r21, 0x01	; 1
    4a36:	64 e1       	ldi	r22, 0x14	; 20
    4a38:	a3 cf       	rjmp	.-186    	; 0x4980 <SomeoneYouLoved()+0xa6>
    4a3a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a3e:	7c 01       	movw	r14, r24
    4a40:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a44:	8c 01       	movw	r16, r24
    4a46:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a4a:	9c 01       	movw	r18, r24
    4a4c:	4b e4       	ldi	r20, 0x4B	; 75
    4a4e:	50 e0       	ldi	r21, 0x00	; 0
    4a50:	69 e1       	ldi	r22, 0x19	; 25
    4a52:	86 e0       	ldi	r24, 0x06	; 6
    4a54:	9f e3       	ldi	r25, 0x3F	; 63
    4a56:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4a5a:	5f cf       	rjmp	.-322    	; 0x491a <SomeoneYouLoved()+0x40>
    4a5c:	43 e2       	ldi	r20, 0x23	; 35
    4a5e:	64 e0       	ldi	r22, 0x04	; 4
    4a60:	86 e0       	ldi	r24, 0x06	; 6
    4a62:	9f e3       	ldi	r25, 0x3F	; 63
    4a64:	df cf       	rjmp	.-66     	; 0x4a24 <SomeoneYouLoved()+0x14a>
    4a66:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a6a:	7c 01       	movw	r14, r24
    4a6c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a70:	8c 01       	movw	r16, r24
    4a72:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a76:	9c 01       	movw	r18, r24
    4a78:	4b e4       	ldi	r20, 0x4B	; 75
    4a7a:	50 e0       	ldi	r21, 0x00	; 0
    4a7c:	6d e2       	ldi	r22, 0x2D	; 45
    4a7e:	e9 cf       	rjmp	.-46     	; 0x4a52 <SomeoneYouLoved()+0x178>
    4a80:	62 e3       	ldi	r22, 0x32	; 50
    4a82:	82 e7       	ldi	r24, 0x72	; 114
    4a84:	9f e1       	ldi	r25, 0x1F	; 31
    4a86:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    4a8a:	47 cf       	rjmp	.-370    	; 0x491a <SomeoneYouLoved()+0x40>
    4a8c:	44 ef       	ldi	r20, 0xF4	; 244
    4a8e:	51 e0       	ldi	r21, 0x01	; 1
    4a90:	6c e3       	ldi	r22, 0x3C	; 60
    4a92:	76 cf       	rjmp	.-276    	; 0x4980 <SomeoneYouLoved()+0xa6>
    4a94:	46 e4       	ldi	r20, 0x46	; 70
    4a96:	6c e0       	ldi	r22, 0x0C	; 12
    4a98:	89 eb       	ldi	r24, 0xB9	; 185
    4a9a:	9f e0       	ldi	r25, 0x0F	; 15
    4a9c:	7f cf       	rjmp	.-258    	; 0x499c <SomeoneYouLoved()+0xc2>
    4a9e:	64 e6       	ldi	r22, 0x64	; 100
    4aa0:	80 e1       	ldi	r24, 0x10	; 16
    4aa2:	97 e2       	ldi	r25, 0x27	; 39
    4aa4:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4aa8:	38 cf       	rjmp	.-400    	; 0x491a <SomeoneYouLoved()+0x40>

00004aaa <ShouldntStop()>:
    4aaa:	ef 92       	push	r14
    4aac:	ff 92       	push	r15
    4aae:	0f 93       	push	r16
    4ab0:	1f 93       	push	r17
    4ab2:	cf 93       	push	r28
    4ab4:	df 93       	push	r29
    4ab6:	00 d0       	rcall	.+0      	; 0x4ab8 <ShouldntStop()+0xe>
    4ab8:	00 d0       	rcall	.+0      	; 0x4aba <ShouldntStop()+0x10>
    4aba:	00 d0       	rcall	.+0      	; 0x4abc <ShouldntStop()+0x12>
    4abc:	1f 92       	push	r1
    4abe:	cd b7       	in	r28, 0x3d	; 61
    4ac0:	de b7       	in	r29, 0x3e	; 62
    4ac2:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    4ac6:	8e 31       	cpi	r24, 0x1E	; 30
    4ac8:	09 f4       	brne	.+2      	; 0x4acc <ShouldntStop()+0x22>
    4aca:	b0 c0       	rjmp	.+352    	; 0x4c2c <ShouldntStop()+0x182>
    4acc:	a0 f5       	brcc	.+104    	; 0x4b36 <ShouldntStop()+0x8c>
    4ace:	85 30       	cpi	r24, 0x05	; 5
    4ad0:	09 f4       	brne	.+2      	; 0x4ad4 <ShouldntStop()+0x2a>
    4ad2:	93 c0       	rjmp	.+294    	; 0x4bfa <ShouldntStop()+0x150>
    4ad4:	b8 f4       	brcc	.+46     	; 0x4b04 <ShouldntStop()+0x5a>
    4ad6:	81 30       	cpi	r24, 0x01	; 1
    4ad8:	09 f4       	brne	.+2      	; 0x4adc <ShouldntStop()+0x32>
    4ada:	88 c0       	rjmp	.+272    	; 0x4bec <ShouldntStop()+0x142>
    4adc:	08 f4       	brcc	.+2      	; 0x4ae0 <ShouldntStop()+0x36>
    4ade:	6e c0       	rjmp	.+220    	; 0x4bbc <ShouldntStop()+0x112>
    4ae0:	45 e0       	ldi	r20, 0x05	; 5
    4ae2:	64 e0       	ldi	r22, 0x04	; 4
    4ae4:	82 30       	cpi	r24, 0x02	; 2
    4ae6:	09 f4       	brne	.+2      	; 0x4aea <ShouldntStop()+0x40>
    4ae8:	83 c0       	rjmp	.+262    	; 0x4bf0 <ShouldntStop()+0x146>
    4aea:	27 96       	adiw	r28, 0x07	; 7
    4aec:	0f b6       	in	r0, 0x3f	; 63
    4aee:	f8 94       	cli
    4af0:	de bf       	out	0x3e, r29	; 62
    4af2:	0f be       	out	0x3f, r0	; 63
    4af4:	cd bf       	out	0x3d, r28	; 61
    4af6:	df 91       	pop	r29
    4af8:	cf 91       	pop	r28
    4afa:	1f 91       	pop	r17
    4afc:	0f 91       	pop	r16
    4afe:	ff 90       	pop	r15
    4b00:	ef 90       	pop	r14
    4b02:	08 95       	ret
    4b04:	8f 30       	cpi	r24, 0x0F	; 15
    4b06:	09 f4       	brne	.+2      	; 0x4b0a <ShouldntStop()+0x60>
    4b08:	7c c0       	rjmp	.+248    	; 0x4c02 <ShouldntStop()+0x158>
    4b0a:	40 f4       	brcc	.+16     	; 0x4b1c <ShouldntStop()+0x72>
    4b0c:	8a 30       	cpi	r24, 0x0A	; 10
    4b0e:	69 f7       	brne	.-38     	; 0x4aea <ShouldntStop()+0x40>
    4b10:	6f e0       	ldi	r22, 0x0F	; 15
    4b12:	86 e0       	ldi	r24, 0x06	; 6
    4b14:	9f e3       	ldi	r25, 0x3F	; 63
    4b16:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    4b1a:	e7 cf       	rjmp	.-50     	; 0x4aea <ShouldntStop()+0x40>
    4b1c:	84 31       	cpi	r24, 0x14	; 20
    4b1e:	09 f4       	brne	.+2      	; 0x4b22 <ShouldntStop()+0x78>
    4b20:	74 c0       	rjmp	.+232    	; 0x4c0a <ShouldntStop()+0x160>
    4b22:	44 ef       	ldi	r20, 0xF4	; 244
    4b24:	51 e0       	ldi	r21, 0x01	; 1
    4b26:	6e e1       	ldi	r22, 0x1E	; 30
    4b28:	89 31       	cpi	r24, 0x19	; 25
    4b2a:	f9 f6       	brne	.-66     	; 0x4aea <ShouldntStop()+0x40>
    4b2c:	86 e0       	ldi	r24, 0x06	; 6
    4b2e:	9f e3       	ldi	r25, 0x3F	; 63
    4b30:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4b34:	da cf       	rjmp	.-76     	; 0x4aea <ShouldntStop()+0x40>
    4b36:	87 33       	cpi	r24, 0x37	; 55
    4b38:	09 f4       	brne	.+2      	; 0x4b3c <ShouldntStop()+0x92>
    4b3a:	90 c0       	rjmp	.+288    	; 0x4c5c <ShouldntStop()+0x1b2>
    4b3c:	d0 f4       	brcc	.+52     	; 0x4b72 <ShouldntStop()+0xc8>
    4b3e:	88 32       	cpi	r24, 0x28	; 40
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <ShouldntStop()+0x9a>
    4b42:	79 c0       	rjmp	.+242    	; 0x4c36 <ShouldntStop()+0x18c>
    4b44:	50 f4       	brcc	.+20     	; 0x4b5a <ShouldntStop()+0xb0>
    4b46:	44 ef       	ldi	r20, 0xF4	; 244
    4b48:	51 e0       	ldi	r21, 0x01	; 1
    4b4a:	68 e2       	ldi	r22, 0x28	; 40
    4b4c:	83 32       	cpi	r24, 0x23	; 35
    4b4e:	69 f6       	brne	.-102    	; 0x4aea <ShouldntStop()+0x40>
    4b50:	86 e0       	ldi	r24, 0x06	; 6
    4b52:	9f e3       	ldi	r25, 0x3F	; 63
    4b54:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4b58:	c8 cf       	rjmp	.-112    	; 0x4aea <ShouldntStop()+0x40>
    4b5a:	8d 32       	cpi	r24, 0x2D	; 45
    4b5c:	09 f4       	brne	.+2      	; 0x4b60 <ShouldntStop()+0xb6>
    4b5e:	78 c0       	rjmp	.+240    	; 0x4c50 <ShouldntStop()+0x1a6>
    4b60:	82 33       	cpi	r24, 0x32	; 50
    4b62:	19 f6       	brne	.-122    	; 0x4aea <ShouldntStop()+0x40>
    4b64:	47 e3       	ldi	r20, 0x37	; 55
    4b66:	67 e0       	ldi	r22, 0x07	; 7
    4b68:	8d ef       	ldi	r24, 0xFD	; 253
    4b6a:	9e e3       	ldi	r25, 0x3E	; 62
    4b6c:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4b70:	bc cf       	rjmp	.-136    	; 0x4aea <ShouldntStop()+0x40>
    4b72:	81 34       	cpi	r24, 0x41	; 65
    4b74:	09 f4       	brne	.+2      	; 0x4b78 <ShouldntStop()+0xce>
    4b76:	76 c0       	rjmp	.+236    	; 0x4c64 <ShouldntStop()+0x1ba>
    4b78:	90 f4       	brcc	.+36     	; 0x4b9e <ShouldntStop()+0xf4>
    4b7a:	8c 33       	cpi	r24, 0x3C	; 60
    4b7c:	09 f0       	breq	.+2      	; 0x4b80 <ShouldntStop()+0xd6>
    4b7e:	b5 cf       	rjmp	.-150    	; 0x4aea <ShouldntStop()+0x40>
    4b80:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4b84:	7c 01       	movw	r14, r24
    4b86:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4b8a:	8c 01       	movw	r16, r24
    4b8c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4b90:	9c 01       	movw	r18, r24
    4b92:	4b e4       	ldi	r20, 0x4B	; 75
    4b94:	50 e0       	ldi	r21, 0x00	; 0
    4b96:	61 e4       	ldi	r22, 0x41	; 65
    4b98:	84 e4       	ldi	r24, 0x44	; 68
    4b9a:	9f e2       	ldi	r25, 0x2F	; 47
    4b9c:	44 c0       	rjmp	.+136    	; 0x4c26 <ShouldntStop()+0x17c>
    4b9e:	86 34       	cpi	r24, 0x46	; 70
    4ba0:	09 f4       	brne	.+2      	; 0x4ba4 <ShouldntStop()+0xfa>
    4ba2:	65 c0       	rjmp	.+202    	; 0x4c6e <ShouldntStop()+0x1c4>
    4ba4:	84 36       	cpi	r24, 0x64	; 100
    4ba6:	09 f0       	breq	.+2      	; 0x4baa <ShouldntStop()+0x100>
    4ba8:	a0 cf       	rjmp	.-192    	; 0x4aea <ShouldntStop()+0x40>
    4baa:	60 e0       	ldi	r22, 0x00	; 0
    4bac:	8c ec       	ldi	r24, 0xCC	; 204
    4bae:	90 e1       	ldi	r25, 0x10	; 16
    4bb0:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    4bb4:	80 e0       	ldi	r24, 0x00	; 0
    4bb6:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    4bba:	97 cf       	rjmp	.-210    	; 0x4aea <ShouldntStop()+0x40>
    4bbc:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4bc0:	7c 01       	movw	r14, r24
    4bc2:	65 e8       	ldi	r22, 0x85	; 133
    4bc4:	72 e0       	ldi	r23, 0x02	; 2
    4bc6:	ce 01       	movw	r24, r28
    4bc8:	01 96       	adiw	r24, 0x01	; 1
    4bca:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4bce:	01 e0       	ldi	r16, 0x01	; 1
    4bd0:	97 01       	movw	r18, r14
    4bd2:	4b e4       	ldi	r20, 0x4B	; 75
    4bd4:	50 e0       	ldi	r21, 0x00	; 0
    4bd6:	6e e0       	ldi	r22, 0x0E	; 14
    4bd8:	7d e3       	ldi	r23, 0x3D	; 61
    4bda:	ce 01       	movw	r24, r28
    4bdc:	01 96       	adiw	r24, 0x01	; 1
    4bde:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4be2:	ce 01       	movw	r24, r28
    4be4:	01 96       	adiw	r24, 0x01	; 1
    4be6:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    4bea:	7f cf       	rjmp	.-258    	; 0x4aea <ShouldntStop()+0x40>
    4bec:	42 e0       	ldi	r20, 0x02	; 2
    4bee:	63 e0       	ldi	r22, 0x03	; 3
    4bf0:	83 e8       	ldi	r24, 0x83	; 131
    4bf2:	9f e1       	ldi	r25, 0x1F	; 31
    4bf4:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    4bf8:	78 cf       	rjmp	.-272    	; 0x4aea <ShouldntStop()+0x40>
    4bfa:	44 ef       	ldi	r20, 0xF4	; 244
    4bfc:	51 e0       	ldi	r21, 0x01	; 1
    4bfe:	6a e0       	ldi	r22, 0x0A	; 10
    4c00:	95 cf       	rjmp	.-214    	; 0x4b2c <ShouldntStop()+0x82>
    4c02:	44 ef       	ldi	r20, 0xF4	; 244
    4c04:	51 e0       	ldi	r21, 0x01	; 1
    4c06:	64 e1       	ldi	r22, 0x14	; 20
    4c08:	a3 cf       	rjmp	.-186    	; 0x4b50 <ShouldntStop()+0xa6>
    4c0a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4c0e:	7c 01       	movw	r14, r24
    4c10:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4c14:	8c 01       	movw	r16, r24
    4c16:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4c1a:	9c 01       	movw	r18, r24
    4c1c:	4b e4       	ldi	r20, 0x4B	; 75
    4c1e:	50 e0       	ldi	r21, 0x00	; 0
    4c20:	69 e1       	ldi	r22, 0x19	; 25
    4c22:	86 e0       	ldi	r24, 0x06	; 6
    4c24:	9f e3       	ldi	r25, 0x3F	; 63
    4c26:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4c2a:	5f cf       	rjmp	.-322    	; 0x4aea <ShouldntStop()+0x40>
    4c2c:	43 e2       	ldi	r20, 0x23	; 35
    4c2e:	64 e0       	ldi	r22, 0x04	; 4
    4c30:	86 e0       	ldi	r24, 0x06	; 6
    4c32:	9f e3       	ldi	r25, 0x3F	; 63
    4c34:	df cf       	rjmp	.-66     	; 0x4bf4 <ShouldntStop()+0x14a>
    4c36:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4c3a:	7c 01       	movw	r14, r24
    4c3c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4c40:	8c 01       	movw	r16, r24
    4c42:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4c46:	9c 01       	movw	r18, r24
    4c48:	4b e4       	ldi	r20, 0x4B	; 75
    4c4a:	50 e0       	ldi	r21, 0x00	; 0
    4c4c:	6d e2       	ldi	r22, 0x2D	; 45
    4c4e:	e9 cf       	rjmp	.-46     	; 0x4c22 <ShouldntStop()+0x178>
    4c50:	62 e3       	ldi	r22, 0x32	; 50
    4c52:	82 e7       	ldi	r24, 0x72	; 114
    4c54:	9f e1       	ldi	r25, 0x1F	; 31
    4c56:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    4c5a:	47 cf       	rjmp	.-370    	; 0x4aea <ShouldntStop()+0x40>
    4c5c:	44 ef       	ldi	r20, 0xF4	; 244
    4c5e:	51 e0       	ldi	r21, 0x01	; 1
    4c60:	6c e3       	ldi	r22, 0x3C	; 60
    4c62:	76 cf       	rjmp	.-276    	; 0x4b50 <ShouldntStop()+0xa6>
    4c64:	46 e4       	ldi	r20, 0x46	; 70
    4c66:	6c e0       	ldi	r22, 0x0C	; 12
    4c68:	89 eb       	ldi	r24, 0xB9	; 185
    4c6a:	9f e0       	ldi	r25, 0x0F	; 15
    4c6c:	7f cf       	rjmp	.-258    	; 0x4b6c <ShouldntStop()+0xc2>
    4c6e:	64 e6       	ldi	r22, 0x64	; 100
    4c70:	80 e1       	ldi	r24, 0x10	; 16
    4c72:	97 e2       	ldi	r25, 0x27	; 39
    4c74:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4c78:	38 cf       	rjmp	.-400    	; 0x4aea <ShouldntStop()+0x40>

00004c7a <SunAlwaysShinesOnTV()>:
    4c7a:	ef 92       	push	r14
    4c7c:	ff 92       	push	r15
    4c7e:	0f 93       	push	r16
    4c80:	1f 93       	push	r17
    4c82:	cf 93       	push	r28
    4c84:	df 93       	push	r29
    4c86:	00 d0       	rcall	.+0      	; 0x4c88 <SunAlwaysShinesOnTV()+0xe>
    4c88:	00 d0       	rcall	.+0      	; 0x4c8a <SunAlwaysShinesOnTV()+0x10>
    4c8a:	00 d0       	rcall	.+0      	; 0x4c8c <SunAlwaysShinesOnTV()+0x12>
    4c8c:	1f 92       	push	r1
    4c8e:	cd b7       	in	r28, 0x3d	; 61
    4c90:	de b7       	in	r29, 0x3e	; 62
    4c92:	e0 91 b7 0a 	lds	r30, 0x0AB7	; 0x800ab7 <prog>
    4c96:	e5 36       	cpi	r30, 0x65	; 101
    4c98:	08 f0       	brcs	.+2      	; 0x4c9c <SunAlwaysShinesOnTV()+0x22>
    4c9a:	81 c0       	rjmp	.+258    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4c9c:	f0 e0       	ldi	r31, 0x00	; 0
    4c9e:	ed 5a       	subi	r30, 0xAD	; 173
    4ca0:	f9 4d       	sbci	r31, 0xD9	; 217
    4ca2:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    4ca6:	b8 26       	eor	r11, r24
    4ca8:	cf 26       	eor	r12, r31
    4caa:	dc 26       	eor	r13, r28
    4cac:	cf 26       	eor	r12, r31
    4cae:	e2 26       	eor	r14, r18
    4cb0:	cf 26       	eor	r12, r31
    4cb2:	f8 26       	eor	r15, r24
    4cb4:	cf 26       	eor	r12, r31
    4cb6:	08 27       	eor	r16, r24
    4cb8:	cf 26       	eor	r12, r31
    4cba:	11 27       	eor	r17, r17
    4cbc:	cf 26       	eor	r12, r31
    4cbe:	23 27       	eor	r18, r19
    4cc0:	cf 26       	eor	r12, r31
    4cc2:	35 27       	eor	r19, r21
    4cc4:	cf 26       	eor	r12, r31
    4cc6:	3a 27       	eor	r19, r26
    4cc8:	cf 26       	eor	r12, r31
    4cca:	47 27       	eor	r20, r23
    4ccc:	cf 26       	eor	r12, r31
    4cce:	4f 27       	eor	r20, r31
    4cd0:	cf 26       	eor	r12, r31
    4cd2:	58 27       	eor	r21, r24
    4cd4:	cf 26       	eor	r12, r31
    4cd6:	60 27       	eor	r22, r16
    4cd8:	cf 26       	eor	r12, r31
    4cda:	6c 27       	eor	r22, r28
    4cdc:	cf 26       	eor	r12, r31
    4cde:	78 27       	eor	r23, r24
    4ce0:	cf 26       	eor	r12, r31
    4ce2:	89 27       	eor	r24, r25
    4ce4:	cf 26       	eor	r12, r31
    4ce6:	8d 27       	eor	r24, r29
    4ce8:	cf 26       	eor	r12, r31
    4cea:	95 27       	eor	r25, r21
    4cec:	cf 26       	eor	r12, r31
    4cee:	a2 27       	eor	r26, r18
    4cf0:	cf 26       	eor	r12, r31
    4cf2:	a8 27       	eor	r26, r24
    4cf4:	cf 26       	eor	r12, r31
    4cf6:	af 27       	eor	r26, r31
    4cf8:	cf 26       	eor	r12, r31
    4cfa:	b3 27       	eor	r27, r19
    4cfc:	cf 26       	eor	r12, r31
    4cfe:	bf 27       	eor	r27, r31
    4d00:	cf 26       	eor	r12, r31
    4d02:	cb 27       	eor	r28, r27
    4d04:	cf 26       	eor	r12, r31
    4d06:	da 27       	eor	r29, r26
    4d08:	cf 26       	eor	r12, r31
    4d0a:	de 27       	eor	r29, r30
    4d0c:	cf 26       	eor	r12, r31
    4d0e:	e0 27       	eor	r30, r16
    4d10:	cf 26       	eor	r12, r31
    4d12:	eb 27       	eor	r30, r27
    4d14:	cf 26       	eor	r12, r31
    4d16:	ef 27       	eor	r30, r31
    4d18:	cf 26       	eor	r12, r31
    4d1a:	f5 27       	eor	r31, r21
    4d1c:	cf 26       	eor	r12, r31
    4d1e:	00 28       	or	r0, r0
    4d20:	cf 26       	eor	r12, r31
    4d22:	0d 28       	or	r0, r13
    4d24:	cf 26       	eor	r12, r31
    4d26:	11 28       	or	r1, r1
    4d28:	cf 26       	eor	r12, r31
    4d2a:	17 28       	or	r1, r7
    4d2c:	cf 26       	eor	r12, r31
    4d2e:	24 28       	or	r2, r4
    4d30:	cf 26       	eor	r12, r31
    4d32:	2a 28       	or	r2, r10
    4d34:	cf 26       	eor	r12, r31
    4d36:	35 28       	or	r3, r5
    4d38:	cf 26       	eor	r12, r31
    4d3a:	3b 28       	or	r3, r11
    4d3c:	cf 26       	eor	r12, r31
    4d3e:	46 28       	or	r4, r6
    4d40:	cf 26       	eor	r12, r31
    4d42:	cf 26       	eor	r12, r31
    4d44:	cf 26       	eor	r12, r31
    4d46:	cf 26       	eor	r12, r31
    4d48:	cf 26       	eor	r12, r31
    4d4a:	cf 26       	eor	r12, r31
    4d4c:	cf 26       	eor	r12, r31
    4d4e:	cf 26       	eor	r12, r31
    4d50:	cf 26       	eor	r12, r31
    4d52:	cf 26       	eor	r12, r31
    4d54:	cf 26       	eor	r12, r31
    4d56:	cf 26       	eor	r12, r31
    4d58:	cf 26       	eor	r12, r31
    4d5a:	cf 26       	eor	r12, r31
    4d5c:	cf 26       	eor	r12, r31
    4d5e:	cf 26       	eor	r12, r31
    4d60:	cf 26       	eor	r12, r31
    4d62:	cf 26       	eor	r12, r31
    4d64:	cf 26       	eor	r12, r31
    4d66:	cf 26       	eor	r12, r31
    4d68:	cf 26       	eor	r12, r31
    4d6a:	cf 26       	eor	r12, r31
    4d6c:	cf 26       	eor	r12, r31
    4d6e:	4a 28       	or	r4, r10
    4d70:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4d74:	7c 01       	movw	r14, r24
    4d76:	6c ea       	ldi	r22, 0xAC	; 172
    4d78:	72 e0       	ldi	r23, 0x02	; 2
    4d7a:	ce 01       	movw	r24, r28
    4d7c:	01 96       	adiw	r24, 0x01	; 1
    4d7e:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4d82:	02 e0       	ldi	r16, 0x02	; 2
    4d84:	97 01       	movw	r18, r14
    4d86:	4b e4       	ldi	r20, 0x4B	; 75
    4d88:	50 e0       	ldi	r21, 0x00	; 0
    4d8a:	64 e0       	ldi	r22, 0x04	; 4
    4d8c:	72 e4       	ldi	r23, 0x42	; 66
    4d8e:	ce 01       	movw	r24, r28
    4d90:	01 96       	adiw	r24, 0x01	; 1
    4d92:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4d96:	ce 01       	movw	r24, r28
    4d98:	01 96       	adiw	r24, 0x01	; 1
    4d9a:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    4d9e:	27 96       	adiw	r28, 0x07	; 7
    4da0:	0f b6       	in	r0, 0x3f	; 63
    4da2:	f8 94       	cli
    4da4:	de bf       	out	0x3e, r29	; 62
    4da6:	0f be       	out	0x3f, r0	; 63
    4da8:	cd bf       	out	0x3d, r28	; 61
    4daa:	df 91       	pop	r29
    4dac:	cf 91       	pop	r28
    4dae:	1f 91       	pop	r17
    4db0:	0f 91       	pop	r16
    4db2:	ff 90       	pop	r15
    4db4:	ef 90       	pop	r14
    4db6:	08 95       	ret
    4db8:	64 e0       	ldi	r22, 0x04	; 4
    4dba:	82 e8       	ldi	r24, 0x82	; 130
    4dbc:	94 e1       	ldi	r25, 0x14	; 20
    4dbe:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4dc2:	ed cf       	rjmp	.-38     	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4dc4:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4dc8:	8c 01       	movw	r16, r24
    4dca:	60 ed       	ldi	r22, 0xD0	; 208
    4dcc:	72 e0       	ldi	r23, 0x02	; 2
    4dce:	ce 01       	movw	r24, r28
    4dd0:	01 96       	adiw	r24, 0x01	; 1
    4dd2:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4dd6:	36 e0       	ldi	r19, 0x06	; 6
    4dd8:	e3 2e       	mov	r14, r19
    4dda:	2d e0       	ldi	r18, 0x0D	; 13
    4ddc:	30 e0       	ldi	r19, 0x00	; 0
    4dde:	50 e0       	ldi	r21, 0x00	; 0
    4de0:	40 e0       	ldi	r20, 0x00	; 0
    4de2:	66 eb       	ldi	r22, 0xB6	; 182
    4de4:	73 e0       	ldi	r23, 0x03	; 3
    4de6:	ce 01       	movw	r24, r28
    4de8:	01 96       	adiw	r24, 0x01	; 1
    4dea:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <progShowText(String, unsigned int, int, int, int, unsigned char)>
    4dee:	d3 cf       	rjmp	.-90     	; 0x4d96 <SunAlwaysShinesOnTV()+0x11c>
    4df0:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4df4:	8c 01       	movw	r16, r24
    4df6:	66 ed       	ldi	r22, 0xD6	; 214
    4df8:	72 e0       	ldi	r23, 0x02	; 2
    4dfa:	ce 01       	movw	r24, r28
    4dfc:	01 96       	adiw	r24, 0x01	; 1
    4dfe:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4e02:	28 e0       	ldi	r18, 0x08	; 8
    4e04:	e2 2e       	mov	r14, r18
    4e06:	2d e0       	ldi	r18, 0x0D	; 13
    4e08:	30 e0       	ldi	r19, 0x00	; 0
    4e0a:	46 e0       	ldi	r20, 0x06	; 6
    4e0c:	50 e0       	ldi	r21, 0x00	; 0
    4e0e:	e9 cf       	rjmp	.-46     	; 0x4de2 <SunAlwaysShinesOnTV()+0x168>
    4e10:	21 e0       	ldi	r18, 0x01	; 1
    4e12:	4c e6       	ldi	r20, 0x6C	; 108
    4e14:	57 e0       	ldi	r21, 0x07	; 7
    4e16:	6a e0       	ldi	r22, 0x0A	; 10
    4e18:	8d e0       	ldi	r24, 0x0D	; 13
    4e1a:	94 e3       	ldi	r25, 0x34	; 52
    4e1c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>
    4e20:	be cf       	rjmp	.-132    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4e22:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4e26:	8c 01       	movw	r16, r24
    4e28:	69 ed       	ldi	r22, 0xD9	; 217
    4e2a:	72 e0       	ldi	r23, 0x02	; 2
    4e2c:	ce 01       	movw	r24, r28
    4e2e:	01 96       	adiw	r24, 0x01	; 1
    4e30:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4e34:	9c e0       	ldi	r25, 0x0C	; 12
    4e36:	e9 2e       	mov	r14, r25
    4e38:	2d e0       	ldi	r18, 0x0D	; 13
    4e3a:	30 e0       	ldi	r19, 0x00	; 0
    4e3c:	50 e0       	ldi	r21, 0x00	; 0
    4e3e:	40 e0       	ldi	r20, 0x00	; 0
    4e40:	6c e6       	ldi	r22, 0x6C	; 108
    4e42:	77 e0       	ldi	r23, 0x07	; 7
    4e44:	d0 cf       	rjmp	.-96     	; 0x4de6 <SunAlwaysShinesOnTV()+0x16c>
    4e46:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4e4a:	8c 01       	movw	r16, r24
    4e4c:	66 ed       	ldi	r22, 0xD6	; 214
    4e4e:	72 e0       	ldi	r23, 0x02	; 2
    4e50:	ce 01       	movw	r24, r28
    4e52:	01 96       	adiw	r24, 0x01	; 1
    4e54:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4e58:	8e e0       	ldi	r24, 0x0E	; 14
    4e5a:	e8 2e       	mov	r14, r24
    4e5c:	2d e0       	ldi	r18, 0x0D	; 13
    4e5e:	30 e0       	ldi	r19, 0x00	; 0
    4e60:	46 e0       	ldi	r20, 0x06	; 6
    4e62:	50 e0       	ldi	r21, 0x00	; 0
    4e64:	65 e8       	ldi	r22, 0x85	; 133
    4e66:	77 e0       	ldi	r23, 0x07	; 7
    4e68:	be cf       	rjmp	.-132    	; 0x4de6 <SunAlwaysShinesOnTV()+0x16c>
    4e6a:	20 e0       	ldi	r18, 0x00	; 0
    4e6c:	4c e6       	ldi	r20, 0x6C	; 108
    4e6e:	57 e0       	ldi	r21, 0x07	; 7
    4e70:	60 e1       	ldi	r22, 0x10	; 16
    4e72:	d2 cf       	rjmp	.-92     	; 0x4e18 <SunAlwaysShinesOnTV()+0x19e>
    4e74:	b0 ed       	ldi	r27, 0xD0	; 208
    4e76:	eb 2e       	mov	r14, r27
    4e78:	b7 e0       	ldi	r27, 0x07	; 7
    4e7a:	fb 2e       	mov	r15, r27
    4e7c:	04 e6       	ldi	r16, 0x64	; 100
    4e7e:	21 e0       	ldi	r18, 0x01	; 1
    4e80:	42 e1       	ldi	r20, 0x12	; 18
    4e82:	61 e0       	ldi	r22, 0x01	; 1
    4e84:	89 e7       	ldi	r24, 0x79	; 121
    4e86:	9b e3       	ldi	r25, 0x3B	; 59
    4e88:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    4e8c:	88 cf       	rjmp	.-240    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4e8e:	4b ed       	ldi	r20, 0xDB	; 219
    4e90:	51 e0       	ldi	r21, 0x01	; 1
    4e92:	64 e1       	ldi	r22, 0x14	; 20
    4e94:	89 ec       	ldi	r24, 0xC9	; 201
    4e96:	9d e1       	ldi	r25, 0x1D	; 29
    4e98:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4e9c:	80 cf       	rjmp	.-256    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4e9e:	20 e0       	ldi	r18, 0x00	; 0
    4ea0:	4b ed       	ldi	r20, 0xDB	; 219
    4ea2:	51 e0       	ldi	r21, 0x01	; 1
    4ea4:	66 e1       	ldi	r22, 0x16	; 22
    4ea6:	82 e9       	ldi	r24, 0x92	; 146
    4ea8:	9b e3       	ldi	r25, 0x3B	; 59
    4eaa:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>
    4eae:	77 cf       	rjmp	.-274    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4eb0:	48 e8       	ldi	r20, 0x88	; 136
    4eb2:	53 e1       	ldi	r21, 0x13	; 19
    4eb4:	68 e1       	ldi	r22, 0x18	; 24
    4eb6:	8b e0       	ldi	r24, 0x0B	; 11
    4eb8:	97 e7       	ldi	r25, 0x77	; 119
    4eba:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    4ebe:	6f cf       	rjmp	.-290    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4ec0:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4ec4:	8c 01       	movw	r16, r24
    4ec6:	60 ed       	ldi	r22, 0xD0	; 208
    4ec8:	72 e0       	ldi	r23, 0x02	; 2
    4eca:	ce 01       	movw	r24, r28
    4ecc:	01 96       	adiw	r24, 0x01	; 1
    4ece:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4ed2:	aa e1       	ldi	r26, 0x1A	; 26
    4ed4:	ea 2e       	mov	r14, r26
    4ed6:	81 cf       	rjmp	.-254    	; 0x4dda <SunAlwaysShinesOnTV()+0x160>
    4ed8:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4edc:	8c 01       	movw	r16, r24
    4ede:	66 ed       	ldi	r22, 0xD6	; 214
    4ee0:	72 e0       	ldi	r23, 0x02	; 2
    4ee2:	ce 01       	movw	r24, r28
    4ee4:	01 96       	adiw	r24, 0x01	; 1
    4ee6:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4eea:	fc e1       	ldi	r31, 0x1C	; 28
    4eec:	ef 2e       	mov	r14, r31
    4eee:	8b cf       	rjmp	.-234    	; 0x4e06 <SunAlwaysShinesOnTV()+0x18c>
    4ef0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4ef4:	7c 01       	movw	r14, r24
    4ef6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4efa:	8c 01       	movw	r16, r24
    4efc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f00:	9c 01       	movw	r18, r24
    4f02:	4a ef       	ldi	r20, 0xFA	; 250
    4f04:	50 e0       	ldi	r21, 0x00	; 0
    4f06:	6e e1       	ldi	r22, 0x1E	; 30
    4f08:	82 e8       	ldi	r24, 0x82	; 130
    4f0a:	94 e1       	ldi	r25, 0x14	; 20
    4f0c:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4f10:	46 cf       	rjmp	.-372    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4f12:	60 e2       	ldi	r22, 0x20	; 32
    4f14:	87 e4       	ldi	r24, 0x47	; 71
    4f16:	99 e0       	ldi	r25, 0x09	; 9
    4f18:	52 cf       	rjmp	.-348    	; 0x4dbe <SunAlwaysShinesOnTV()+0x144>
    4f1a:	42 e2       	ldi	r20, 0x22	; 34
    4f1c:	6b ed       	ldi	r22, 0xDB	; 219
    4f1e:	71 e0       	ldi	r23, 0x01	; 1
    4f20:	8d e0       	ldi	r24, 0x0D	; 13
    4f22:	94 e3       	ldi	r25, 0x34	; 52
    4f24:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    4f28:	3a cf       	rjmp	.-396    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4f2a:	ee 24       	eor	r14, r14
    4f2c:	ea 94       	dec	r14
    4f2e:	f1 2c       	mov	r15, r1
    4f30:	0f ef       	ldi	r16, 0xFF	; 255
    4f32:	10 e0       	ldi	r17, 0x00	; 0
    4f34:	2f ef       	ldi	r18, 0xFF	; 255
    4f36:	30 e0       	ldi	r19, 0x00	; 0
    4f38:	4b e4       	ldi	r20, 0x4B	; 75
    4f3a:	50 e0       	ldi	r21, 0x00	; 0
    4f3c:	64 e2       	ldi	r22, 0x24	; 36
    4f3e:	88 ed       	ldi	r24, 0xD8	; 216
    4f40:	9e e0       	ldi	r25, 0x0E	; 14
    4f42:	e4 cf       	rjmp	.-56     	; 0x4f0c <SunAlwaysShinesOnTV()+0x292>
    4f44:	4b ed       	ldi	r20, 0xDB	; 219
    4f46:	51 e0       	ldi	r21, 0x01	; 1
    4f48:	66 e2       	ldi	r22, 0x26	; 38
    4f4a:	81 ef       	ldi	r24, 0xF1	; 241
    4f4c:	9e e0       	ldi	r25, 0x0E	; 14
    4f4e:	a4 cf       	rjmp	.-184    	; 0x4e98 <SunAlwaysShinesOnTV()+0x21e>
    4f50:	20 e0       	ldi	r18, 0x00	; 0
    4f52:	4b ed       	ldi	r20, 0xDB	; 219
    4f54:	51 e0       	ldi	r21, 0x01	; 1
    4f56:	68 e2       	ldi	r22, 0x28	; 40
    4f58:	89 ec       	ldi	r24, 0xC9	; 201
    4f5a:	9d e1       	ldi	r25, 0x1D	; 29
    4f5c:	a6 cf       	rjmp	.-180    	; 0x4eaa <SunAlwaysShinesOnTV()+0x230>
    4f5e:	48 e8       	ldi	r20, 0x88	; 136
    4f60:	53 e1       	ldi	r21, 0x13	; 19
    4f62:	6a e2       	ldi	r22, 0x2A	; 42
    4f64:	a8 cf       	rjmp	.-176    	; 0x4eb6 <SunAlwaysShinesOnTV()+0x23c>
    4f66:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4f6a:	8c 01       	movw	r16, r24
    4f6c:	60 ed       	ldi	r22, 0xD0	; 208
    4f6e:	72 e0       	ldi	r23, 0x02	; 2
    4f70:	ce 01       	movw	r24, r28
    4f72:	01 96       	adiw	r24, 0x01	; 1
    4f74:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4f78:	7c e2       	ldi	r23, 0x2C	; 44
    4f7a:	e7 2e       	mov	r14, r23
    4f7c:	2e cf       	rjmp	.-420    	; 0x4dda <SunAlwaysShinesOnTV()+0x160>
    4f7e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4f82:	8c 01       	movw	r16, r24
    4f84:	66 ed       	ldi	r22, 0xD6	; 214
    4f86:	72 e0       	ldi	r23, 0x02	; 2
    4f88:	ce 01       	movw	r24, r28
    4f8a:	01 96       	adiw	r24, 0x01	; 1
    4f8c:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    4f90:	6e e2       	ldi	r22, 0x2E	; 46
    4f92:	e6 2e       	mov	r14, r22
    4f94:	38 cf       	rjmp	.-400    	; 0x4e06 <SunAlwaysShinesOnTV()+0x18c>
    4f96:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f9a:	7c 01       	movw	r14, r24
    4f9c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4fa0:	8c 01       	movw	r16, r24
    4fa2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4fa6:	9c 01       	movw	r18, r24
    4fa8:	4a ef       	ldi	r20, 0xFA	; 250
    4faa:	50 e0       	ldi	r21, 0x00	; 0
    4fac:	60 e3       	ldi	r22, 0x30	; 48
    4fae:	89 e6       	ldi	r24, 0x69	; 105
    4fb0:	94 e1       	ldi	r25, 0x14	; 20
    4fb2:	ac cf       	rjmp	.-168    	; 0x4f0c <SunAlwaysShinesOnTV()+0x292>
    4fb4:	62 e3       	ldi	r22, 0x32	; 50
    4fb6:	80 e6       	ldi	r24, 0x60	; 96
    4fb8:	99 e0       	ldi	r25, 0x09	; 9
    4fba:	01 cf       	rjmp	.-510    	; 0x4dbe <SunAlwaysShinesOnTV()+0x144>
    4fbc:	44 e3       	ldi	r20, 0x34	; 52
    4fbe:	ae cf       	rjmp	.-164    	; 0x4f1c <SunAlwaysShinesOnTV()+0x2a2>
    4fc0:	ee 24       	eor	r14, r14
    4fc2:	ea 94       	dec	r14
    4fc4:	f1 2c       	mov	r15, r1
    4fc6:	0f ef       	ldi	r16, 0xFF	; 255
    4fc8:	10 e0       	ldi	r17, 0x00	; 0
    4fca:	2f ef       	ldi	r18, 0xFF	; 255
    4fcc:	30 e0       	ldi	r19, 0x00	; 0
    4fce:	4b e4       	ldi	r20, 0x4B	; 75
    4fd0:	50 e0       	ldi	r21, 0x00	; 0
    4fd2:	66 e3       	ldi	r22, 0x36	; 54
    4fd4:	b4 cf       	rjmp	.-152    	; 0x4f3e <SunAlwaysShinesOnTV()+0x2c4>
    4fd6:	4b ed       	ldi	r20, 0xDB	; 219
    4fd8:	51 e0       	ldi	r21, 0x01	; 1
    4fda:	68 e3       	ldi	r22, 0x38	; 56
    4fdc:	b6 cf       	rjmp	.-148    	; 0x4f4a <SunAlwaysShinesOnTV()+0x2d0>
    4fde:	6a e3       	ldi	r22, 0x3A	; 58
    4fe0:	81 ea       	ldi	r24, 0xA1	; 161
    4fe2:	9c e2       	ldi	r25, 0x2C	; 44
    4fe4:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    4fe8:	da ce       	rjmp	.-588    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>
    4fea:	40 ed       	ldi	r20, 0xD0	; 208
    4fec:	e4 2e       	mov	r14, r20
    4fee:	47 e0       	ldi	r20, 0x07	; 7
    4ff0:	f4 2e       	mov	r15, r20
    4ff2:	04 e6       	ldi	r16, 0x64	; 100
    4ff4:	21 e0       	ldi	r18, 0x01	; 1
    4ff6:	4c e3       	ldi	r20, 0x3C	; 60
    4ff8:	61 e0       	ldi	r22, 0x01	; 1
    4ffa:	8d e0       	ldi	r24, 0x0D	; 13
    4ffc:	94 e3       	ldi	r25, 0x34	; 52
    4ffe:	44 cf       	rjmp	.-376    	; 0x4e88 <SunAlwaysShinesOnTV()+0x20e>
    5000:	ee 24       	eor	r14, r14
    5002:	ea 94       	dec	r14
    5004:	f1 2c       	mov	r15, r1
    5006:	0f ef       	ldi	r16, 0xFF	; 255
    5008:	10 e0       	ldi	r17, 0x00	; 0
    500a:	2f ef       	ldi	r18, 0xFF	; 255
    500c:	30 e0       	ldi	r19, 0x00	; 0
    500e:	42 e3       	ldi	r20, 0x32	; 50
    5010:	50 e0       	ldi	r21, 0x00	; 0
    5012:	6e e3       	ldi	r22, 0x3E	; 62
    5014:	8c e6       	ldi	r24, 0x6C	; 108
    5016:	97 e0       	ldi	r25, 0x07	; 7
    5018:	79 cf       	rjmp	.-270    	; 0x4f0c <SunAlwaysShinesOnTV()+0x292>
    501a:	46 eb       	ldi	r20, 0xB6	; 182
    501c:	53 e0       	ldi	r21, 0x03	; 3
    501e:	60 e4       	ldi	r22, 0x40	; 64
    5020:	94 cf       	rjmp	.-216    	; 0x4f4a <SunAlwaysShinesOnTV()+0x2d0>
    5022:	42 e4       	ldi	r20, 0x42	; 66
    5024:	6b ed       	ldi	r22, 0xDB	; 219
    5026:	71 e0       	ldi	r23, 0x01	; 1
    5028:	82 e2       	ldi	r24, 0x22	; 34
    502a:	9b e0       	ldi	r25, 0x0B	; 11
    502c:	7b cf       	rjmp	.-266    	; 0x4f24 <SunAlwaysShinesOnTV()+0x2aa>
    502e:	ee 24       	eor	r14, r14
    5030:	ea 94       	dec	r14
    5032:	f1 2c       	mov	r15, r1
    5034:	0f ef       	ldi	r16, 0xFF	; 255
    5036:	10 e0       	ldi	r17, 0x00	; 0
    5038:	2f ef       	ldi	r18, 0xFF	; 255
    503a:	30 e0       	ldi	r19, 0x00	; 0
    503c:	42 e3       	ldi	r20, 0x32	; 50
    503e:	50 e0       	ldi	r21, 0x00	; 0
    5040:	64 e4       	ldi	r22, 0x44	; 68
    5042:	86 eb       	ldi	r24, 0xB6	; 182
    5044:	93 e0       	ldi	r25, 0x03	; 3
    5046:	62 cf       	rjmp	.-316    	; 0x4f0c <SunAlwaysShinesOnTV()+0x292>
    5048:	46 e4       	ldi	r20, 0x46	; 70
    504a:	6b ed       	ldi	r22, 0xDB	; 219
    504c:	71 e0       	ldi	r23, 0x01	; 1
    504e:	8b ee       	ldi	r24, 0xEB	; 235
    5050:	98 e2       	ldi	r25, 0x28	; 40
    5052:	68 cf       	rjmp	.-304    	; 0x4f24 <SunAlwaysShinesOnTV()+0x2aa>
    5054:	ee 24       	eor	r14, r14
    5056:	ea 94       	dec	r14
    5058:	f1 2c       	mov	r15, r1
    505a:	0f ef       	ldi	r16, 0xFF	; 255
    505c:	10 e0       	ldi	r17, 0x00	; 0
    505e:	2f ef       	ldi	r18, 0xFF	; 255
    5060:	30 e0       	ldi	r19, 0x00	; 0
    5062:	42 e3       	ldi	r20, 0x32	; 50
    5064:	50 e0       	ldi	r21, 0x00	; 0
    5066:	68 e4       	ldi	r22, 0x48	; 72
    5068:	ec cf       	rjmp	.-40     	; 0x5042 <SunAlwaysShinesOnTV()+0x3c8>
    506a:	4a e4       	ldi	r20, 0x4A	; 74
    506c:	6b ed       	ldi	r22, 0xDB	; 219
    506e:	71 e0       	ldi	r23, 0x01	; 1
    5070:	8c ed       	ldi	r24, 0xDC	; 220
    5072:	97 e3       	ldi	r25, 0x37	; 55
    5074:	57 cf       	rjmp	.-338    	; 0x4f24 <SunAlwaysShinesOnTV()+0x2aa>
    5076:	ee 24       	eor	r14, r14
    5078:	ea 94       	dec	r14
    507a:	f1 2c       	mov	r15, r1
    507c:	0f ef       	ldi	r16, 0xFF	; 255
    507e:	10 e0       	ldi	r17, 0x00	; 0
    5080:	2f ef       	ldi	r18, 0xFF	; 255
    5082:	30 e0       	ldi	r19, 0x00	; 0
    5084:	42 e3       	ldi	r20, 0x32	; 50
    5086:	50 e0       	ldi	r21, 0x00	; 0
    5088:	6c e4       	ldi	r22, 0x4C	; 76
    508a:	db cf       	rjmp	.-74     	; 0x5042 <SunAlwaysShinesOnTV()+0x3c8>
    508c:	64 e6       	ldi	r22, 0x64	; 100
    508e:	8c e4       	ldi	r24, 0x4C	; 76
    5090:	9d e1       	ldi	r25, 0x1D	; 29
    5092:	95 ce       	rjmp	.-726    	; 0x4dbe <SunAlwaysShinesOnTV()+0x144>
    5094:	60 e0       	ldi	r22, 0x00	; 0
    5096:	8c ec       	ldi	r24, 0xCC	; 204
    5098:	90 e1       	ldi	r25, 0x10	; 16
    509a:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    509e:	80 e0       	ldi	r24, 0x00	; 0
    50a0:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    50a4:	7c ce       	rjmp	.-776    	; 0x4d9e <SunAlwaysShinesOnTV()+0x124>

000050a6 <peopleArePeople()>:
    50a6:	ef 92       	push	r14
    50a8:	ff 92       	push	r15
    50aa:	0f 93       	push	r16
    50ac:	1f 93       	push	r17
    50ae:	cf 93       	push	r28
    50b0:	df 93       	push	r29
    50b2:	00 d0       	rcall	.+0      	; 0x50b4 <peopleArePeople()+0xe>
    50b4:	00 d0       	rcall	.+0      	; 0x50b6 <peopleArePeople()+0x10>
    50b6:	00 d0       	rcall	.+0      	; 0x50b8 <peopleArePeople()+0x12>
    50b8:	1f 92       	push	r1
    50ba:	cd b7       	in	r28, 0x3d	; 61
    50bc:	de b7       	in	r29, 0x3e	; 62
    50be:	e0 91 b7 0a 	lds	r30, 0x0AB7	; 0x800ab7 <prog>
    50c2:	e5 36       	cpi	r30, 0x65	; 101
    50c4:	08 f0       	brcs	.+2      	; 0x50c8 <peopleArePeople()+0x22>
    50c6:	81 c0       	rjmp	.+258    	; 0x51ca <peopleArePeople()+0x124>
    50c8:	f0 e0       	ldi	r31, 0x00	; 0
    50ca:	e7 59       	subi	r30, 0x97	; 151
    50cc:	f7 4d       	sbci	r31, 0xD7	; 215
    50ce:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    50d2:	ce 28       	or	r12, r14
    50d4:	e5 28       	or	r14, r5
    50d6:	f2 28       	or	r15, r2
    50d8:	e5 28       	or	r14, r5
    50da:	f8 28       	or	r15, r8
    50dc:	00 29       	or	r16, r0
    50de:	0f 29       	or	r16, r15
    50e0:	17 29       	or	r17, r7
    50e2:	22 29       	or	r18, r2
    50e4:	28 29       	or	r18, r8
    50e6:	30 29       	or	r19, r0
    50e8:	e5 28       	or	r14, r5
    50ea:	36 29       	or	r19, r6
    50ec:	e5 28       	or	r14, r5
    50ee:	43 29       	or	r20, r3
    50f0:	e5 28       	or	r14, r5
    50f2:	49 29       	or	r20, r9
    50f4:	e5 28       	or	r14, r5
    50f6:	56 29       	or	r21, r6
    50f8:	e5 28       	or	r14, r5
    50fa:	5c 29       	or	r21, r12
    50fc:	e5 28       	or	r14, r5
    50fe:	68 29       	or	r22, r8
    5100:	e5 28       	or	r14, r5
    5102:	6e 29       	or	r22, r14
    5104:	e5 28       	or	r14, r5
    5106:	76 29       	or	r23, r6
    5108:	e5 28       	or	r14, r5
    510a:	7e 29       	or	r23, r14
    510c:	e5 28       	or	r14, r5
    510e:	80 29       	or	r24, r0
    5110:	e5 28       	or	r14, r5
    5112:	8d 29       	or	r24, r13
    5114:	e5 28       	or	r14, r5
    5116:	8f 29       	or	r24, r15
    5118:	e5 28       	or	r14, r5
    511a:	9a 29       	or	r25, r10
    511c:	e5 28       	or	r14, r5
    511e:	a0 29       	or	r26, r0
    5120:	e5 28       	or	r14, r5
    5122:	a4 29       	or	r26, r4
    5124:	e5 28       	or	r14, r5
    5126:	b1 29       	or	r27, r1
    5128:	e5 28       	or	r14, r5
    512a:	b5 29       	or	r27, r5
    512c:	e5 28       	or	r14, r5
    512e:	c2 29       	or	r28, r2
    5130:	e5 28       	or	r14, r5
    5132:	cb 29       	or	r28, r11
    5134:	e5 28       	or	r14, r5
    5136:	d8 29       	or	r29, r8
    5138:	e5 28       	or	r14, r5
    513a:	da 29       	or	r29, r10
    513c:	e5 28       	or	r14, r5
    513e:	e5 29       	or	r30, r5
    5140:	e5 28       	or	r14, r5
    5142:	eb 29       	or	r30, r11
    5144:	e5 28       	or	r14, r5
    5146:	f8 29       	or	r31, r8
    5148:	e5 28       	or	r14, r5
    514a:	03 2a       	or	r0, r19
    514c:	e5 28       	or	r14, r5
    514e:	e5 28       	or	r14, r5
    5150:	e5 28       	or	r14, r5
    5152:	e5 28       	or	r14, r5
    5154:	e5 28       	or	r14, r5
    5156:	e5 28       	or	r14, r5
    5158:	e5 28       	or	r14, r5
    515a:	e5 28       	or	r14, r5
    515c:	e5 28       	or	r14, r5
    515e:	e5 28       	or	r14, r5
    5160:	e5 28       	or	r14, r5
    5162:	e5 28       	or	r14, r5
    5164:	e5 28       	or	r14, r5
    5166:	e5 28       	or	r14, r5
    5168:	e5 28       	or	r14, r5
    516a:	e5 28       	or	r14, r5
    516c:	e5 28       	or	r14, r5
    516e:	e5 28       	or	r14, r5
    5170:	e5 28       	or	r14, r5
    5172:	e5 28       	or	r14, r5
    5174:	e5 28       	or	r14, r5
    5176:	e5 28       	or	r14, r5
    5178:	e5 28       	or	r14, r5
    517a:	e5 28       	or	r14, r5
    517c:	e5 28       	or	r14, r5
    517e:	e5 28       	or	r14, r5
    5180:	e5 28       	or	r14, r5
    5182:	e5 28       	or	r14, r5
    5184:	e5 28       	or	r14, r5
    5186:	e5 28       	or	r14, r5
    5188:	e5 28       	or	r14, r5
    518a:	e5 28       	or	r14, r5
    518c:	e5 28       	or	r14, r5
    518e:	e5 28       	or	r14, r5
    5190:	e5 28       	or	r14, r5
    5192:	e5 28       	or	r14, r5
    5194:	e5 28       	or	r14, r5
    5196:	e5 28       	or	r14, r5
    5198:	e5 28       	or	r14, r5
    519a:	07 2a       	or	r0, r23
    519c:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    51a0:	7c 01       	movw	r14, r24
    51a2:	6e ed       	ldi	r22, 0xDE	; 222
    51a4:	72 e0       	ldi	r23, 0x02	; 2
    51a6:	ce 01       	movw	r24, r28
    51a8:	01 96       	adiw	r24, 0x01	; 1
    51aa:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    51ae:	02 e0       	ldi	r16, 0x02	; 2
    51b0:	97 01       	movw	r18, r14
    51b2:	4a e5       	ldi	r20, 0x5A	; 90
    51b4:	50 e0       	ldi	r21, 0x00	; 0
    51b6:	6c ef       	ldi	r22, 0xFC	; 252
    51b8:	73 e5       	ldi	r23, 0x53	; 83
    51ba:	ce 01       	movw	r24, r28
    51bc:	01 96       	adiw	r24, 0x01	; 1
    51be:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    51c2:	ce 01       	movw	r24, r28
    51c4:	01 96       	adiw	r24, 0x01	; 1
    51c6:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    51ca:	27 96       	adiw	r28, 0x07	; 7
    51cc:	0f b6       	in	r0, 0x3f	; 63
    51ce:	f8 94       	cli
    51d0:	de bf       	out	0x3e, r29	; 62
    51d2:	0f be       	out	0x3f, r0	; 63
    51d4:	cd bf       	out	0x3d, r28	; 61
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	1f 91       	pop	r17
    51dc:	0f 91       	pop	r16
    51de:	ff 90       	pop	r15
    51e0:	ef 90       	pop	r14
    51e2:	08 95       	ret
    51e4:	64 e0       	ldi	r22, 0x04	; 4
    51e6:	86 e5       	ldi	r24, 0x56	; 86
    51e8:	95 e4       	ldi	r25, 0x45	; 69
    51ea:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    51ee:	ed cf       	rjmp	.-38     	; 0x51ca <peopleArePeople()+0x124>
    51f0:	4a ef       	ldi	r20, 0xFA	; 250
    51f2:	50 e0       	ldi	r21, 0x00	; 0
    51f4:	65 e0       	ldi	r22, 0x05	; 5
    51f6:	82 e9       	ldi	r24, 0x92	; 146
    51f8:	9b e3       	ldi	r25, 0x3B	; 59
    51fa:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    51fe:	e5 cf       	rjmp	.-54     	; 0x51ca <peopleArePeople()+0x124>
    5200:	ee 24       	eor	r14, r14
    5202:	ea 94       	dec	r14
    5204:	f1 2c       	mov	r15, r1
    5206:	0f ef       	ldi	r16, 0xFF	; 255
    5208:	10 e0       	ldi	r17, 0x00	; 0
    520a:	2f ef       	ldi	r18, 0xFF	; 255
    520c:	30 e0       	ldi	r19, 0x00	; 0
    520e:	4d e7       	ldi	r20, 0x7D	; 125
    5210:	50 e0       	ldi	r21, 0x00	; 0
    5212:	66 e0       	ldi	r22, 0x06	; 6
    5214:	8e ee       	ldi	r24, 0xEE	; 238
    5216:	92 e0       	ldi	r25, 0x02	; 2
    5218:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    521c:	d6 cf       	rjmp	.-84     	; 0x51ca <peopleArePeople()+0x124>
    521e:	47 e0       	ldi	r20, 0x07	; 7
    5220:	68 ee       	ldi	r22, 0xE8	; 232
    5222:	73 e0       	ldi	r23, 0x03	; 3
    5224:	82 eb       	ldi	r24, 0xB2	; 178
    5226:	9c e0       	ldi	r25, 0x0C	; 12
    5228:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    522c:	ce cf       	rjmp	.-100    	; 0x51ca <peopleArePeople()+0x124>
    522e:	ee 24       	eor	r14, r14
    5230:	ea 94       	dec	r14
    5232:	f1 2c       	mov	r15, r1
    5234:	0f ef       	ldi	r16, 0xFF	; 255
    5236:	10 e0       	ldi	r17, 0x00	; 0
    5238:	2f ef       	ldi	r18, 0xFF	; 255
    523a:	30 e0       	ldi	r19, 0x00	; 0
    523c:	4d e7       	ldi	r20, 0x7D	; 125
    523e:	50 e0       	ldi	r21, 0x00	; 0
    5240:	68 e0       	ldi	r22, 0x08	; 8
    5242:	e8 cf       	rjmp	.-48     	; 0x5214 <peopleArePeople()+0x16e>
    5244:	49 e0       	ldi	r20, 0x09	; 9
    5246:	68 ee       	ldi	r22, 0xE8	; 232
    5248:	73 e0       	ldi	r23, 0x03	; 3
    524a:	80 ed       	ldi	r24, 0xD0	; 208
    524c:	97 e0       	ldi	r25, 0x07	; 7
    524e:	ec cf       	rjmp	.-40     	; 0x5228 <peopleArePeople()+0x182>
    5250:	44 ef       	ldi	r20, 0xF4	; 244
    5252:	51 e0       	ldi	r21, 0x01	; 1
    5254:	6a e0       	ldi	r22, 0x0A	; 10
    5256:	80 e8       	ldi	r24, 0x80	; 128
    5258:	9e e3       	ldi	r25, 0x3E	; 62
    525a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    525e:	b5 cf       	rjmp	.-150    	; 0x51ca <peopleArePeople()+0x124>
    5260:	6c e0       	ldi	r22, 0x0C	; 12
    5262:	80 e7       	ldi	r24, 0x70	; 112
    5264:	97 e1       	ldi	r25, 0x17	; 23
    5266:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    526a:	af cf       	rjmp	.-162    	; 0x51ca <peopleArePeople()+0x124>
    526c:	ee 24       	eor	r14, r14
    526e:	ea 94       	dec	r14
    5270:	f1 2c       	mov	r15, r1
    5272:	0f ef       	ldi	r16, 0xFF	; 255
    5274:	10 e0       	ldi	r17, 0x00	; 0
    5276:	2f ef       	ldi	r18, 0xFF	; 255
    5278:	30 e0       	ldi	r19, 0x00	; 0
    527a:	4d e7       	ldi	r20, 0x7D	; 125
    527c:	50 e0       	ldi	r21, 0x00	; 0
    527e:	6e e0       	ldi	r22, 0x0E	; 14
    5280:	84 ef       	ldi	r24, 0xF4	; 244
    5282:	91 e0       	ldi	r25, 0x01	; 1
    5284:	c9 cf       	rjmp	.-110    	; 0x5218 <peopleArePeople()+0x172>
    5286:	60 e1       	ldi	r22, 0x10	; 16
    5288:	84 ef       	ldi	r24, 0xF4	; 244
    528a:	91 e0       	ldi	r25, 0x01	; 1
    528c:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    5290:	9c cf       	rjmp	.-200    	; 0x51ca <peopleArePeople()+0x124>
    5292:	ee 24       	eor	r14, r14
    5294:	ea 94       	dec	r14
    5296:	f1 2c       	mov	r15, r1
    5298:	0f ef       	ldi	r16, 0xFF	; 255
    529a:	10 e0       	ldi	r17, 0x00	; 0
    529c:	2f ef       	ldi	r18, 0xFF	; 255
    529e:	30 e0       	ldi	r19, 0x00	; 0
    52a0:	42 e3       	ldi	r20, 0x32	; 50
    52a2:	50 e0       	ldi	r21, 0x00	; 0
    52a4:	62 e1       	ldi	r22, 0x12	; 18
    52a6:	88 ee       	ldi	r24, 0xE8	; 232
    52a8:	93 e0       	ldi	r25, 0x03	; 3
    52aa:	b6 cf       	rjmp	.-148    	; 0x5218 <peopleArePeople()+0x172>
    52ac:	44 ef       	ldi	r20, 0xF4	; 244
    52ae:	51 e0       	ldi	r21, 0x01	; 1
    52b0:	64 e1       	ldi	r22, 0x14	; 20
    52b2:	82 e9       	ldi	r24, 0x92	; 146
    52b4:	9b e3       	ldi	r25, 0x3B	; 59
    52b6:	d1 cf       	rjmp	.-94     	; 0x525a <peopleArePeople()+0x1b4>
    52b8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    52bc:	7c 01       	movw	r14, r24
    52be:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    52c2:	0f ef       	ldi	r16, 0xFF	; 255
    52c4:	10 e0       	ldi	r17, 0x00	; 0
    52c6:	9c 01       	movw	r18, r24
    52c8:	4d e7       	ldi	r20, 0x7D	; 125
    52ca:	50 e0       	ldi	r21, 0x00	; 0
    52cc:	60 e2       	ldi	r22, 0x20	; 32
    52ce:	a2 cf       	rjmp	.-188    	; 0x5214 <peopleArePeople()+0x16e>
    52d0:	68 e1       	ldi	r22, 0x18	; 24
    52d2:	80 e1       	ldi	r24, 0x10	; 16
    52d4:	97 e2       	ldi	r25, 0x27	; 39
    52d6:	0e 94 9a 0c 	call	0x1934	; 0x1934 <progOutline(unsigned int, unsigned char)>
    52da:	77 cf       	rjmp	.-274    	; 0x51ca <peopleArePeople()+0x124>
    52dc:	40 ed       	ldi	r20, 0xD0	; 208
    52de:	57 e0       	ldi	r21, 0x07	; 7
    52e0:	6a e1       	ldi	r22, 0x1A	; 26
    52e2:	80 ef       	ldi	r24, 0xF0	; 240
    52e4:	95 e5       	ldi	r25, 0x55	; 85
    52e6:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    52ea:	6f cf       	rjmp	.-290    	; 0x51ca <peopleArePeople()+0x124>
    52ec:	44 ef       	ldi	r20, 0xF4	; 244
    52ee:	51 e0       	ldi	r21, 0x01	; 1
    52f0:	6c e1       	ldi	r22, 0x1C	; 28
    52f2:	80 e8       	ldi	r24, 0x80	; 128
    52f4:	9e e3       	ldi	r25, 0x3E	; 62
    52f6:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    52fa:	67 cf       	rjmp	.-306    	; 0x51ca <peopleArePeople()+0x124>
    52fc:	6e e1       	ldi	r22, 0x1E	; 30
    52fe:	b1 cf       	rjmp	.-158    	; 0x5262 <peopleArePeople()+0x1bc>
    5300:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5304:	8c 01       	movw	r16, r24
    5306:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    530a:	ee 24       	eor	r14, r14
    530c:	ea 94       	dec	r14
    530e:	f1 2c       	mov	r15, r1
    5310:	9c 01       	movw	r18, r24
    5312:	4d e7       	ldi	r20, 0x7D	; 125
    5314:	50 e0       	ldi	r21, 0x00	; 0
    5316:	60 e2       	ldi	r22, 0x20	; 32
    5318:	b3 cf       	rjmp	.-154    	; 0x5280 <peopleArePeople()+0x1da>
    531a:	62 e2       	ldi	r22, 0x22	; 34
    531c:	b5 cf       	rjmp	.-150    	; 0x5288 <peopleArePeople()+0x1e2>
    531e:	ee 24       	eor	r14, r14
    5320:	ea 94       	dec	r14
    5322:	f1 2c       	mov	r15, r1
    5324:	0f ef       	ldi	r16, 0xFF	; 255
    5326:	10 e0       	ldi	r17, 0x00	; 0
    5328:	2f ef       	ldi	r18, 0xFF	; 255
    532a:	30 e0       	ldi	r19, 0x00	; 0
    532c:	42 e3       	ldi	r20, 0x32	; 50
    532e:	50 e0       	ldi	r21, 0x00	; 0
    5330:	64 e2       	ldi	r22, 0x24	; 36
    5332:	b9 cf       	rjmp	.-142    	; 0x52a6 <peopleArePeople()+0x200>
    5334:	46 e2       	ldi	r20, 0x26	; 38
    5336:	68 ee       	ldi	r22, 0xE8	; 232
    5338:	73 e0       	ldi	r23, 0x03	; 3
    533a:	80 e8       	ldi	r24, 0x80	; 128
    533c:	9e e3       	ldi	r25, 0x3E	; 62
    533e:	74 cf       	rjmp	.-280    	; 0x5228 <peopleArePeople()+0x182>
    5340:	68 e2       	ldi	r22, 0x28	; 40
    5342:	82 eb       	ldi	r24, 0xB2	; 178
    5344:	9c e0       	ldi	r25, 0x0C	; 12
    5346:	51 cf       	rjmp	.-350    	; 0x51ea <peopleArePeople()+0x144>
    5348:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    534c:	8c 01       	movw	r16, r24
    534e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5352:	ee 24       	eor	r14, r14
    5354:	ea 94       	dec	r14
    5356:	f1 2c       	mov	r15, r1
    5358:	9c 01       	movw	r18, r24
    535a:	4d e7       	ldi	r20, 0x7D	; 125
    535c:	50 e0       	ldi	r21, 0x00	; 0
    535e:	6a e2       	ldi	r22, 0x2A	; 42
    5360:	59 cf       	rjmp	.-334    	; 0x5214 <peopleArePeople()+0x16e>
    5362:	6c e2       	ldi	r22, 0x2C	; 44
    5364:	80 e4       	ldi	r24, 0x40	; 64
    5366:	9f e1       	ldi	r25, 0x1F	; 31
    5368:	7e cf       	rjmp	.-260    	; 0x5266 <peopleArePeople()+0x1c0>
    536a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    536e:	8c 01       	movw	r16, r24
    5370:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5374:	ee 24       	eor	r14, r14
    5376:	ea 94       	dec	r14
    5378:	f1 2c       	mov	r15, r1
    537a:	9c 01       	movw	r18, r24
    537c:	4d e7       	ldi	r20, 0x7D	; 125
    537e:	50 e0       	ldi	r21, 0x00	; 0
    5380:	6e e2       	ldi	r22, 0x2E	; 46
    5382:	7e cf       	rjmp	.-260    	; 0x5280 <peopleArePeople()+0x1da>
    5384:	21 e0       	ldi	r18, 0x01	; 1
    5386:	44 ef       	ldi	r20, 0xF4	; 244
    5388:	51 e0       	ldi	r21, 0x01	; 1
    538a:	60 e3       	ldi	r22, 0x30	; 48
    538c:	8c e4       	ldi	r24, 0x4C	; 76
    538e:	9d e1       	ldi	r25, 0x1D	; 29
    5390:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>
    5394:	1a cf       	rjmp	.-460    	; 0x51ca <peopleArePeople()+0x124>
    5396:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    539a:	8c 01       	movw	r16, r24
    539c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    53a0:	ee 24       	eor	r14, r14
    53a2:	ea 94       	dec	r14
    53a4:	f1 2c       	mov	r15, r1
    53a6:	9c 01       	movw	r18, r24
    53a8:	4d e7       	ldi	r20, 0x7D	; 125
    53aa:	50 e0       	ldi	r21, 0x00	; 0
    53ac:	62 e3       	ldi	r22, 0x32	; 50
    53ae:	68 cf       	rjmp	.-304    	; 0x5280 <peopleArePeople()+0x1da>
    53b0:	64 e3       	ldi	r22, 0x34	; 52
    53b2:	6a cf       	rjmp	.-300    	; 0x5288 <peopleArePeople()+0x1e2>
    53b4:	ee 24       	eor	r14, r14
    53b6:	ea 94       	dec	r14
    53b8:	f1 2c       	mov	r15, r1
    53ba:	0f ef       	ldi	r16, 0xFF	; 255
    53bc:	10 e0       	ldi	r17, 0x00	; 0
    53be:	2f ef       	ldi	r18, 0xFF	; 255
    53c0:	30 e0       	ldi	r19, 0x00	; 0
    53c2:	42 e3       	ldi	r20, 0x32	; 50
    53c4:	50 e0       	ldi	r21, 0x00	; 0
    53c6:	66 e3       	ldi	r22, 0x36	; 54
    53c8:	6e cf       	rjmp	.-292    	; 0x52a6 <peopleArePeople()+0x200>
    53ca:	4a ef       	ldi	r20, 0xFA	; 250
    53cc:	50 e0       	ldi	r21, 0x00	; 0
    53ce:	68 e3       	ldi	r22, 0x38	; 56
    53d0:	80 e8       	ldi	r24, 0x80	; 128
    53d2:	9e e3       	ldi	r25, 0x3E	; 62
    53d4:	12 cf       	rjmp	.-476    	; 0x51fa <peopleArePeople()+0x154>
    53d6:	9c ed       	ldi	r25, 0xDC	; 220
    53d8:	e9 2e       	mov	r14, r25
    53da:	95 e0       	ldi	r25, 0x05	; 5
    53dc:	f9 2e       	mov	r15, r25
    53de:	04 e6       	ldi	r16, 0x64	; 100
    53e0:	21 e0       	ldi	r18, 0x01	; 1
    53e2:	4a e3       	ldi	r20, 0x3A	; 58
    53e4:	61 e0       	ldi	r22, 0x01	; 1
    53e6:	88 e9       	ldi	r24, 0x98	; 152
    53e8:	9a e3       	ldi	r25, 0x3A	; 58
    53ea:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    53ee:	ed ce       	rjmp	.-550    	; 0x51ca <peopleArePeople()+0x124>
    53f0:	ee 24       	eor	r14, r14
    53f2:	ea 94       	dec	r14
    53f4:	f1 2c       	mov	r15, r1
    53f6:	0f ef       	ldi	r16, 0xFF	; 255
    53f8:	10 e0       	ldi	r17, 0x00	; 0
    53fa:	2f ef       	ldi	r18, 0xFF	; 255
    53fc:	30 e0       	ldi	r19, 0x00	; 0
    53fe:	42 e3       	ldi	r20, 0x32	; 50
    5400:	50 e0       	ldi	r21, 0x00	; 0
    5402:	6c e3       	ldi	r22, 0x3C	; 60
    5404:	50 cf       	rjmp	.-352    	; 0x52a6 <peopleArePeople()+0x200>
    5406:	64 e6       	ldi	r22, 0x64	; 100
    5408:	80 e1       	ldi	r24, 0x10	; 16
    540a:	97 e2       	ldi	r25, 0x27	; 39
    540c:	3f cf       	rjmp	.-386    	; 0x528c <peopleArePeople()+0x1e6>
    540e:	60 e0       	ldi	r22, 0x00	; 0
    5410:	8c ec       	ldi	r24, 0xCC	; 204
    5412:	90 e1       	ldi	r25, 0x10	; 16
    5414:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    5418:	80 e0       	ldi	r24, 0x00	; 0
    541a:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    541e:	d5 ce       	rjmp	.-598    	; 0x51ca <peopleArePeople()+0x124>

00005420 <enjoyTheSilence()>:
    5420:	ef 92       	push	r14
    5422:	ff 92       	push	r15
    5424:	0f 93       	push	r16
    5426:	1f 93       	push	r17
    5428:	cf 93       	push	r28
    542a:	df 93       	push	r29
    542c:	00 d0       	rcall	.+0      	; 0x542e <enjoyTheSilence()+0xe>
    542e:	00 d0       	rcall	.+0      	; 0x5430 <enjoyTheSilence()+0x10>
    5430:	00 d0       	rcall	.+0      	; 0x5432 <enjoyTheSilence()+0x12>
    5432:	1f 92       	push	r1
    5434:	cd b7       	in	r28, 0x3d	; 61
    5436:	de b7       	in	r29, 0x3e	; 62
    5438:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    543c:	86 34       	cpi	r24, 0x46	; 70
    543e:	09 f4       	brne	.+2      	; 0x5442 <enjoyTheSilence()+0x22>
    5440:	f3 c0       	rjmp	.+486    	; 0x5628 <enjoyTheSilence()+0x208>
    5442:	08 f0       	brcs	.+2      	; 0x5446 <enjoyTheSilence()+0x26>
    5444:	55 c0       	rjmp	.+170    	; 0x54f0 <enjoyTheSilence()+0xd0>
    5446:	8e 31       	cpi	r24, 0x1E	; 30
    5448:	09 f4       	brne	.+2      	; 0x544c <enjoyTheSilence()+0x2c>
    544a:	c9 c0       	rjmp	.+402    	; 0x55de <enjoyTheSilence()+0x1be>
    544c:	38 f5       	brcc	.+78     	; 0x549c <enjoyTheSilence()+0x7c>
    544e:	8a 30       	cpi	r24, 0x0A	; 10
    5450:	09 f4       	brne	.+2      	; 0x5454 <enjoyTheSilence()+0x34>
    5452:	a9 c0       	rjmp	.+338    	; 0x55a6 <enjoyTheSilence()+0x186>
    5454:	98 f4       	brcc	.+38     	; 0x547c <enjoyTheSilence()+0x5c>
    5456:	88 23       	and	r24, r24
    5458:	09 f4       	brne	.+2      	; 0x545c <enjoyTheSilence()+0x3c>
    545a:	86 c0       	rjmp	.+268    	; 0x5568 <enjoyTheSilence()+0x148>
    545c:	85 30       	cpi	r24, 0x05	; 5
    545e:	09 f4       	brne	.+2      	; 0x5462 <enjoyTheSilence()+0x42>
    5460:	9b c0       	rjmp	.+310    	; 0x5598 <enjoyTheSilence()+0x178>
    5462:	27 96       	adiw	r28, 0x07	; 7
    5464:	0f b6       	in	r0, 0x3f	; 63
    5466:	f8 94       	cli
    5468:	de bf       	out	0x3e, r29	; 62
    546a:	0f be       	out	0x3f, r0	; 63
    546c:	cd bf       	out	0x3d, r28	; 61
    546e:	df 91       	pop	r29
    5470:	cf 91       	pop	r28
    5472:	1f 91       	pop	r17
    5474:	0f 91       	pop	r16
    5476:	ff 90       	pop	r15
    5478:	ef 90       	pop	r14
    547a:	08 95       	ret
    547c:	84 31       	cpi	r24, 0x14	; 20
    547e:	09 f4       	brne	.+2      	; 0x5482 <enjoyTheSilence()+0x62>
    5480:	97 c0       	rjmp	.+302    	; 0x55b0 <enjoyTheSilence()+0x190>
    5482:	89 31       	cpi	r24, 0x19	; 25
    5484:	09 f4       	brne	.+2      	; 0x5488 <enjoyTheSilence()+0x68>
    5486:	a5 c0       	rjmp	.+330    	; 0x55d2 <enjoyTheSilence()+0x1b2>
    5488:	8f 30       	cpi	r24, 0x0F	; 15
    548a:	59 f7       	brne	.-42     	; 0x5462 <enjoyTheSilence()+0x42>
    548c:	4a e1       	ldi	r20, 0x1A	; 26
    548e:	54 e0       	ldi	r21, 0x04	; 4
    5490:	64 e1       	ldi	r22, 0x14	; 20
    5492:	80 e3       	ldi	r24, 0x30	; 48
    5494:	91 e2       	ldi	r25, 0x21	; 33
    5496:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    549a:	e3 cf       	rjmp	.-58     	; 0x5462 <enjoyTheSilence()+0x42>
    549c:	82 33       	cpi	r24, 0x32	; 50
    549e:	09 f4       	brne	.+2      	; 0x54a2 <enjoyTheSilence()+0x82>
    54a0:	ac c0       	rjmp	.+344    	; 0x55fa <enjoyTheSilence()+0x1da>
    54a2:	78 f4       	brcc	.+30     	; 0x54c2 <enjoyTheSilence()+0xa2>
    54a4:	88 32       	cpi	r24, 0x28	; 40
    54a6:	09 f4       	brne	.+2      	; 0x54aa <enjoyTheSilence()+0x8a>
    54a8:	a0 c0       	rjmp	.+320    	; 0x55ea <enjoyTheSilence()+0x1ca>
    54aa:	8d 32       	cpi	r24, 0x2D	; 45
    54ac:	09 f4       	brne	.+2      	; 0x54b0 <enjoyTheSilence()+0x90>
    54ae:	a2 c0       	rjmp	.+324    	; 0x55f4 <enjoyTheSilence()+0x1d4>
    54b0:	83 32       	cpi	r24, 0x23	; 35
    54b2:	b9 f6       	brne	.-82     	; 0x5462 <enjoyTheSilence()+0x42>
    54b4:	48 e2       	ldi	r20, 0x28	; 40
    54b6:	65 e0       	ldi	r22, 0x05	; 5
    54b8:	88 e6       	ldi	r24, 0x68	; 104
    54ba:	92 e4       	ldi	r25, 0x42	; 66
    54bc:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    54c0:	d0 cf       	rjmp	.-96     	; 0x5462 <enjoyTheSilence()+0x42>
    54c2:	8c 33       	cpi	r24, 0x3C	; 60
    54c4:	09 f4       	brne	.+2      	; 0x54c8 <enjoyTheSilence()+0xa8>
    54c6:	9d c0       	rjmp	.+314    	; 0x5602 <enjoyTheSilence()+0x1e2>
    54c8:	81 34       	cpi	r24, 0x41	; 65
    54ca:	09 f4       	brne	.+2      	; 0x54ce <enjoyTheSilence()+0xae>
    54cc:	aa c0       	rjmp	.+340    	; 0x5622 <enjoyTheSilence()+0x202>
    54ce:	87 33       	cpi	r24, 0x37	; 55
    54d0:	41 f6       	brne	.-112    	; 0x5462 <enjoyTheSilence()+0x42>
    54d2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54d6:	7c 01       	movw	r14, r24
    54d8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54dc:	8c 01       	movw	r16, r24
    54de:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54e2:	9c 01       	movw	r18, r24
    54e4:	42 e3       	ldi	r20, 0x32	; 50
    54e6:	50 e0       	ldi	r21, 0x00	; 0
    54e8:	6c e3       	ldi	r22, 0x3C	; 60
    54ea:	80 e3       	ldi	r24, 0x30	; 48
    54ec:	91 e2       	ldi	r25, 0x21	; 33
    54ee:	6e c0       	rjmp	.+220    	; 0x55cc <enjoyTheSilence()+0x1ac>
    54f0:	89 36       	cpi	r24, 0x69	; 105
    54f2:	09 f4       	brne	.+2      	; 0x54f6 <enjoyTheSilence()+0xd6>
    54f4:	c8 c0       	rjmp	.+400    	; 0x5686 <enjoyTheSilence()+0x266>
    54f6:	e8 f4       	brcc	.+58     	; 0x5532 <enjoyTheSilence()+0x112>
    54f8:	85 35       	cpi	r24, 0x55	; 85
    54fa:	09 f4       	brne	.+2      	; 0x54fe <enjoyTheSilence()+0xde>
    54fc:	9d c0       	rjmp	.+314    	; 0x5638 <enjoyTheSilence()+0x218>
    54fe:	60 f4       	brcc	.+24     	; 0x5518 <enjoyTheSilence()+0xf8>
    5500:	8b 34       	cpi	r24, 0x4B	; 75
    5502:	09 f4       	brne	.+2      	; 0x5506 <enjoyTheSilence()+0xe6>
    5504:	94 c0       	rjmp	.+296    	; 0x562e <enjoyTheSilence()+0x20e>
    5506:	4a e1       	ldi	r20, 0x1A	; 26
    5508:	54 e0       	ldi	r21, 0x04	; 4
    550a:	65 e5       	ldi	r22, 0x55	; 85
    550c:	80 35       	cpi	r24, 0x50	; 80
    550e:	09 f0       	breq	.+2      	; 0x5512 <enjoyTheSilence()+0xf2>
    5510:	a8 cf       	rjmp	.-176    	; 0x5462 <enjoyTheSilence()+0x42>
    5512:	84 e3       	ldi	r24, 0x34	; 52
    5514:	91 e2       	ldi	r25, 0x21	; 33
    5516:	bf cf       	rjmp	.-130    	; 0x5496 <enjoyTheSilence()+0x76>
    5518:	8f 35       	cpi	r24, 0x5F	; 95
    551a:	09 f4       	brne	.+2      	; 0x551e <enjoyTheSilence()+0xfe>
    551c:	9c c0       	rjmp	.+312    	; 0x5656 <enjoyTheSilence()+0x236>
    551e:	84 36       	cpi	r24, 0x64	; 100
    5520:	09 f4       	brne	.+2      	; 0x5524 <enjoyTheSilence()+0x104>
    5522:	a6 c0       	rjmp	.+332    	; 0x5670 <enjoyTheSilence()+0x250>
    5524:	8a 35       	cpi	r24, 0x5A	; 90
    5526:	09 f0       	breq	.+2      	; 0x552a <enjoyTheSilence()+0x10a>
    5528:	9c cf       	rjmp	.-200    	; 0x5462 <enjoyTheSilence()+0x42>
    552a:	4a e1       	ldi	r20, 0x1A	; 26
    552c:	54 e0       	ldi	r21, 0x04	; 4
    552e:	6f e5       	ldi	r22, 0x5F	; 95
    5530:	f0 cf       	rjmp	.-32     	; 0x5512 <enjoyTheSilence()+0xf2>
    5532:	8d 37       	cpi	r24, 0x7D	; 125
    5534:	09 f4       	brne	.+2      	; 0x5538 <enjoyTheSilence()+0x118>
    5536:	b1 c0       	rjmp	.+354    	; 0x569a <enjoyTheSilence()+0x27a>
    5538:	58 f4       	brcc	.+22     	; 0x5550 <enjoyTheSilence()+0x130>
    553a:	83 37       	cpi	r24, 0x73	; 115
    553c:	09 f4       	brne	.+2      	; 0x5540 <enjoyTheSilence()+0x120>
    553e:	a8 c0       	rjmp	.+336    	; 0x5690 <enjoyTheSilence()+0x270>
    5540:	88 37       	cpi	r24, 0x78	; 120
    5542:	09 f4       	brne	.+2      	; 0x5546 <enjoyTheSilence()+0x126>
    5544:	a8 c0       	rjmp	.+336    	; 0x5696 <enjoyTheSilence()+0x276>
    5546:	8e 36       	cpi	r24, 0x6E	; 110
    5548:	09 f0       	breq	.+2      	; 0x554c <enjoyTheSilence()+0x12c>
    554a:	8b cf       	rjmp	.-234    	; 0x5462 <enjoyTheSilence()+0x42>
    554c:	43 e7       	ldi	r20, 0x73	; 115
    554e:	6a c0       	rjmp	.+212    	; 0x5624 <enjoyTheSilence()+0x204>
    5550:	87 38       	cpi	r24, 0x87	; 135
    5552:	09 f4       	brne	.+2      	; 0x5556 <enjoyTheSilence()+0x136>
    5554:	a5 c0       	rjmp	.+330    	; 0x56a0 <enjoyTheSilence()+0x280>
    5556:	88 3c       	cpi	r24, 0xC8	; 200
    5558:	09 f4       	brne	.+2      	; 0x555c <enjoyTheSilence()+0x13c>
    555a:	a6 c0       	rjmp	.+332    	; 0x56a8 <enjoyTheSilence()+0x288>
    555c:	82 38       	cpi	r24, 0x82	; 130
    555e:	09 f0       	breq	.+2      	; 0x5562 <enjoyTheSilence()+0x142>
    5560:	80 cf       	rjmp	.-256    	; 0x5462 <enjoyTheSilence()+0x42>
    5562:	47 e8       	ldi	r20, 0x87	; 135
    5564:	66 e0       	ldi	r22, 0x06	; 6
    5566:	91 c0       	rjmp	.+290    	; 0x568a <enjoyTheSilence()+0x26a>
    5568:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    556c:	7c 01       	movw	r14, r24
    556e:	60 e0       	ldi	r22, 0x00	; 0
    5570:	73 e0       	ldi	r23, 0x03	; 3
    5572:	ce 01       	movw	r24, r28
    5574:	01 96       	adiw	r24, 0x01	; 1
    5576:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    557a:	05 e0       	ldi	r16, 0x05	; 5
    557c:	97 01       	movw	r18, r14
    557e:	4a e5       	ldi	r20, 0x5A	; 90
    5580:	50 e0       	ldi	r21, 0x00	; 0
    5582:	60 e0       	ldi	r22, 0x00	; 0
    5584:	74 e5       	ldi	r23, 0x54	; 84
    5586:	ce 01       	movw	r24, r28
    5588:	01 96       	adiw	r24, 0x01	; 1
    558a:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    558e:	ce 01       	movw	r24, r28
    5590:	01 96       	adiw	r24, 0x01	; 1
    5592:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    5596:	65 cf       	rjmp	.-310    	; 0x5462 <enjoyTheSilence()+0x42>
    5598:	4a e0       	ldi	r20, 0x0A	; 10
    559a:	6b e0       	ldi	r22, 0x0B	; 11
    559c:	81 ea       	ldi	r24, 0xA1	; 161
    559e:	9d e2       	ldi	r25, 0x2D	; 45
    55a0:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    55a4:	5e cf       	rjmp	.-324    	; 0x5462 <enjoyTheSilence()+0x42>
    55a6:	4f e0       	ldi	r20, 0x0F	; 15
    55a8:	63 e0       	ldi	r22, 0x03	; 3
    55aa:	80 e3       	ldi	r24, 0x30	; 48
    55ac:	91 e2       	ldi	r25, 0x21	; 33
    55ae:	f8 cf       	rjmp	.-16     	; 0x55a0 <enjoyTheSilence()+0x180>
    55b0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    55b4:	7c 01       	movw	r14, r24
    55b6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    55ba:	8c 01       	movw	r16, r24
    55bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    55c0:	9c 01       	movw	r18, r24
    55c2:	42 e3       	ldi	r20, 0x32	; 50
    55c4:	50 e0       	ldi	r21, 0x00	; 0
    55c6:	69 e1       	ldi	r22, 0x19	; 25
    55c8:	8e e0       	ldi	r24, 0x0E	; 14
    55ca:	9f e1       	ldi	r25, 0x1F	; 31
    55cc:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    55d0:	48 cf       	rjmp	.-368    	; 0x5462 <enjoyTheSilence()+0x42>
    55d2:	6e e1       	ldi	r22, 0x1E	; 30
    55d4:	8d e0       	ldi	r24, 0x0D	; 13
    55d6:	92 e0       	ldi	r25, 0x02	; 2
    55d8:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    55dc:	42 cf       	rjmp	.-380    	; 0x5462 <enjoyTheSilence()+0x42>
    55de:	63 e2       	ldi	r22, 0x23	; 35
    55e0:	8d e4       	ldi	r24, 0x4D	; 77
    55e2:	98 e0       	ldi	r25, 0x08	; 8
    55e4:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    55e8:	3c cf       	rjmp	.-392    	; 0x5462 <enjoyTheSilence()+0x42>
    55ea:	4d e2       	ldi	r20, 0x2D	; 45
    55ec:	62 e0       	ldi	r22, 0x02	; 2
    55ee:	84 e3       	ldi	r24, 0x34	; 52
    55f0:	91 e2       	ldi	r25, 0x21	; 33
    55f2:	d6 cf       	rjmp	.-84     	; 0x55a0 <enjoyTheSilence()+0x180>
    55f4:	42 e3       	ldi	r20, 0x32	; 50
    55f6:	63 e0       	ldi	r22, 0x03	; 3
    55f8:	fa cf       	rjmp	.-12     	; 0x55ee <enjoyTheSilence()+0x1ce>
    55fa:	4a e1       	ldi	r20, 0x1A	; 26
    55fc:	54 e0       	ldi	r21, 0x04	; 4
    55fe:	67 e3       	ldi	r22, 0x37	; 55
    5600:	48 cf       	rjmp	.-368    	; 0x5492 <enjoyTheSilence()+0x72>
    5602:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5606:	7c 01       	movw	r14, r24
    5608:	62 e2       	ldi	r22, 0x22	; 34
    560a:	73 e0       	ldi	r23, 0x03	; 3
    560c:	ce 01       	movw	r24, r28
    560e:	01 96       	adiw	r24, 0x01	; 1
    5610:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    5614:	01 e4       	ldi	r16, 0x41	; 65
    5616:	97 01       	movw	r18, r14
    5618:	49 e1       	ldi	r20, 0x19	; 25
    561a:	50 e0       	ldi	r21, 0x00	; 0
    561c:	6d e4       	ldi	r22, 0x4D	; 77
    561e:	78 e0       	ldi	r23, 0x08	; 8
    5620:	b2 cf       	rjmp	.-156    	; 0x5586 <enjoyTheSilence()+0x166>
    5622:	46 e4       	ldi	r20, 0x46	; 70
    5624:	62 e0       	ldi	r22, 0x02	; 2
    5626:	31 c0       	rjmp	.+98     	; 0x568a <enjoyTheSilence()+0x26a>
    5628:	4b e4       	ldi	r20, 0x4B	; 75
    562a:	64 e0       	ldi	r22, 0x04	; 4
    562c:	2e c0       	rjmp	.+92     	; 0x568a <enjoyTheSilence()+0x26a>
    562e:	40 e5       	ldi	r20, 0x50	; 80
    5630:	69 e0       	ldi	r22, 0x09	; 9
    5632:	8f e5       	ldi	r24, 0x5F	; 95
    5634:	92 e4       	ldi	r25, 0x42	; 66
    5636:	b4 cf       	rjmp	.-152    	; 0x55a0 <enjoyTheSilence()+0x180>
    5638:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    563c:	7c 01       	movw	r14, r24
    563e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5642:	8c 01       	movw	r16, r24
    5644:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5648:	9c 01       	movw	r18, r24
    564a:	42 e3       	ldi	r20, 0x32	; 50
    564c:	50 e0       	ldi	r21, 0x00	; 0
    564e:	6a e5       	ldi	r22, 0x5A	; 90
    5650:	84 e3       	ldi	r24, 0x34	; 52
    5652:	91 e2       	ldi	r25, 0x21	; 33
    5654:	bb cf       	rjmp	.-138    	; 0x55cc <enjoyTheSilence()+0x1ac>
    5656:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    565a:	7c 01       	movw	r14, r24
    565c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5660:	8c 01       	movw	r16, r24
    5662:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5666:	9c 01       	movw	r18, r24
    5668:	42 e3       	ldi	r20, 0x32	; 50
    566a:	50 e0       	ldi	r21, 0x00	; 0
    566c:	64 e6       	ldi	r22, 0x64	; 100
    566e:	f0 cf       	rjmp	.-32     	; 0x5650 <enjoyTheSilence()+0x230>
    5670:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5674:	7c 01       	movw	r14, r24
    5676:	62 e2       	ldi	r22, 0x22	; 34
    5678:	73 e0       	ldi	r23, 0x03	; 3
    567a:	ce 01       	movw	r24, r28
    567c:	01 96       	adiw	r24, 0x01	; 1
    567e:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    5682:	09 e6       	ldi	r16, 0x69	; 105
    5684:	c8 cf       	rjmp	.-112    	; 0x5616 <enjoyTheSilence()+0x1f6>
    5686:	4e e6       	ldi	r20, 0x6E	; 110
    5688:	61 e0       	ldi	r22, 0x01	; 1
    568a:	8a e2       	ldi	r24, 0x2A	; 42
    568c:	91 e2       	ldi	r25, 0x21	; 33
    568e:	16 cf       	rjmp	.-468    	; 0x54bc <enjoyTheSilence()+0x9c>
    5690:	48 e7       	ldi	r20, 0x78	; 120
    5692:	63 e0       	ldi	r22, 0x03	; 3
    5694:	fa cf       	rjmp	.-12     	; 0x568a <enjoyTheSilence()+0x26a>
    5696:	4d e7       	ldi	r20, 0x7D	; 125
    5698:	c8 cf       	rjmp	.-112    	; 0x562a <enjoyTheSilence()+0x20a>
    569a:	42 e8       	ldi	r20, 0x82	; 130
    569c:	65 e0       	ldi	r22, 0x05	; 5
    569e:	f5 cf       	rjmp	.-22     	; 0x568a <enjoyTheSilence()+0x26a>
    56a0:	68 ec       	ldi	r22, 0xC8	; 200
    56a2:	80 e5       	ldi	r24, 0x50	; 80
    56a4:	93 ec       	ldi	r25, 0xC3	; 195
    56a6:	98 cf       	rjmp	.-208    	; 0x55d8 <enjoyTheSilence()+0x1b8>
    56a8:	60 e0       	ldi	r22, 0x00	; 0
    56aa:	8c ec       	ldi	r24, 0xCC	; 204
    56ac:	90 e1       	ldi	r25, 0x10	; 16
    56ae:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    56b2:	80 e0       	ldi	r24, 0x00	; 0
    56b4:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    56b8:	d4 ce       	rjmp	.-600    	; 0x5462 <enjoyTheSilence()+0x42>

000056ba <sober()>:
    56ba:	ef 92       	push	r14
    56bc:	ff 92       	push	r15
    56be:	0f 93       	push	r16
    56c0:	1f 93       	push	r17
    56c2:	cf 93       	push	r28
    56c4:	df 93       	push	r29
    56c6:	00 d0       	rcall	.+0      	; 0x56c8 <sober()+0xe>
    56c8:	00 d0       	rcall	.+0      	; 0x56ca <sober()+0x10>
    56ca:	00 d0       	rcall	.+0      	; 0x56cc <sober()+0x12>
    56cc:	1f 92       	push	r1
    56ce:	cd b7       	in	r28, 0x3d	; 61
    56d0:	de b7       	in	r29, 0x3e	; 62
    56d2:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    56d6:	86 34       	cpi	r24, 0x46	; 70
    56d8:	09 f4       	brne	.+2      	; 0x56dc <sober()+0x22>
    56da:	f3 c0       	rjmp	.+486    	; 0x58c2 <sober()+0x208>
    56dc:	08 f0       	brcs	.+2      	; 0x56e0 <sober()+0x26>
    56de:	55 c0       	rjmp	.+170    	; 0x578a <sober()+0xd0>
    56e0:	8e 31       	cpi	r24, 0x1E	; 30
    56e2:	09 f4       	brne	.+2      	; 0x56e6 <sober()+0x2c>
    56e4:	c9 c0       	rjmp	.+402    	; 0x5878 <sober()+0x1be>
    56e6:	38 f5       	brcc	.+78     	; 0x5736 <sober()+0x7c>
    56e8:	8a 30       	cpi	r24, 0x0A	; 10
    56ea:	09 f4       	brne	.+2      	; 0x56ee <sober()+0x34>
    56ec:	a9 c0       	rjmp	.+338    	; 0x5840 <sober()+0x186>
    56ee:	98 f4       	brcc	.+38     	; 0x5716 <sober()+0x5c>
    56f0:	88 23       	and	r24, r24
    56f2:	09 f4       	brne	.+2      	; 0x56f6 <sober()+0x3c>
    56f4:	86 c0       	rjmp	.+268    	; 0x5802 <sober()+0x148>
    56f6:	85 30       	cpi	r24, 0x05	; 5
    56f8:	09 f4       	brne	.+2      	; 0x56fc <sober()+0x42>
    56fa:	9b c0       	rjmp	.+310    	; 0x5832 <sober()+0x178>
    56fc:	27 96       	adiw	r28, 0x07	; 7
    56fe:	0f b6       	in	r0, 0x3f	; 63
    5700:	f8 94       	cli
    5702:	de bf       	out	0x3e, r29	; 62
    5704:	0f be       	out	0x3f, r0	; 63
    5706:	cd bf       	out	0x3d, r28	; 61
    5708:	df 91       	pop	r29
    570a:	cf 91       	pop	r28
    570c:	1f 91       	pop	r17
    570e:	0f 91       	pop	r16
    5710:	ff 90       	pop	r15
    5712:	ef 90       	pop	r14
    5714:	08 95       	ret
    5716:	84 31       	cpi	r24, 0x14	; 20
    5718:	09 f4       	brne	.+2      	; 0x571c <sober()+0x62>
    571a:	97 c0       	rjmp	.+302    	; 0x584a <sober()+0x190>
    571c:	89 31       	cpi	r24, 0x19	; 25
    571e:	09 f4       	brne	.+2      	; 0x5722 <sober()+0x68>
    5720:	a5 c0       	rjmp	.+330    	; 0x586c <sober()+0x1b2>
    5722:	8f 30       	cpi	r24, 0x0F	; 15
    5724:	59 f7       	brne	.-42     	; 0x56fc <sober()+0x42>
    5726:	4a e1       	ldi	r20, 0x1A	; 26
    5728:	54 e0       	ldi	r21, 0x04	; 4
    572a:	64 e1       	ldi	r22, 0x14	; 20
    572c:	80 e3       	ldi	r24, 0x30	; 48
    572e:	91 e2       	ldi	r25, 0x21	; 33
    5730:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5734:	e3 cf       	rjmp	.-58     	; 0x56fc <sober()+0x42>
    5736:	82 33       	cpi	r24, 0x32	; 50
    5738:	09 f4       	brne	.+2      	; 0x573c <sober()+0x82>
    573a:	ac c0       	rjmp	.+344    	; 0x5894 <sober()+0x1da>
    573c:	78 f4       	brcc	.+30     	; 0x575c <sober()+0xa2>
    573e:	88 32       	cpi	r24, 0x28	; 40
    5740:	09 f4       	brne	.+2      	; 0x5744 <sober()+0x8a>
    5742:	a0 c0       	rjmp	.+320    	; 0x5884 <sober()+0x1ca>
    5744:	8d 32       	cpi	r24, 0x2D	; 45
    5746:	09 f4       	brne	.+2      	; 0x574a <sober()+0x90>
    5748:	a2 c0       	rjmp	.+324    	; 0x588e <sober()+0x1d4>
    574a:	83 32       	cpi	r24, 0x23	; 35
    574c:	b9 f6       	brne	.-82     	; 0x56fc <sober()+0x42>
    574e:	48 e2       	ldi	r20, 0x28	; 40
    5750:	65 e0       	ldi	r22, 0x05	; 5
    5752:	88 e6       	ldi	r24, 0x68	; 104
    5754:	92 e4       	ldi	r25, 0x42	; 66
    5756:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    575a:	d0 cf       	rjmp	.-96     	; 0x56fc <sober()+0x42>
    575c:	8c 33       	cpi	r24, 0x3C	; 60
    575e:	09 f4       	brne	.+2      	; 0x5762 <sober()+0xa8>
    5760:	9d c0       	rjmp	.+314    	; 0x589c <sober()+0x1e2>
    5762:	81 34       	cpi	r24, 0x41	; 65
    5764:	09 f4       	brne	.+2      	; 0x5768 <sober()+0xae>
    5766:	aa c0       	rjmp	.+340    	; 0x58bc <sober()+0x202>
    5768:	87 33       	cpi	r24, 0x37	; 55
    576a:	41 f6       	brne	.-112    	; 0x56fc <sober()+0x42>
    576c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5770:	7c 01       	movw	r14, r24
    5772:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5776:	8c 01       	movw	r16, r24
    5778:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    577c:	9c 01       	movw	r18, r24
    577e:	42 e3       	ldi	r20, 0x32	; 50
    5780:	50 e0       	ldi	r21, 0x00	; 0
    5782:	6c e3       	ldi	r22, 0x3C	; 60
    5784:	80 e3       	ldi	r24, 0x30	; 48
    5786:	91 e2       	ldi	r25, 0x21	; 33
    5788:	6e c0       	rjmp	.+220    	; 0x5866 <sober()+0x1ac>
    578a:	89 36       	cpi	r24, 0x69	; 105
    578c:	09 f4       	brne	.+2      	; 0x5790 <sober()+0xd6>
    578e:	c8 c0       	rjmp	.+400    	; 0x5920 <sober()+0x266>
    5790:	e8 f4       	brcc	.+58     	; 0x57cc <sober()+0x112>
    5792:	85 35       	cpi	r24, 0x55	; 85
    5794:	09 f4       	brne	.+2      	; 0x5798 <sober()+0xde>
    5796:	9d c0       	rjmp	.+314    	; 0x58d2 <sober()+0x218>
    5798:	60 f4       	brcc	.+24     	; 0x57b2 <sober()+0xf8>
    579a:	8b 34       	cpi	r24, 0x4B	; 75
    579c:	09 f4       	brne	.+2      	; 0x57a0 <sober()+0xe6>
    579e:	94 c0       	rjmp	.+296    	; 0x58c8 <sober()+0x20e>
    57a0:	4a e1       	ldi	r20, 0x1A	; 26
    57a2:	54 e0       	ldi	r21, 0x04	; 4
    57a4:	65 e5       	ldi	r22, 0x55	; 85
    57a6:	80 35       	cpi	r24, 0x50	; 80
    57a8:	09 f0       	breq	.+2      	; 0x57ac <sober()+0xf2>
    57aa:	a8 cf       	rjmp	.-176    	; 0x56fc <sober()+0x42>
    57ac:	84 e3       	ldi	r24, 0x34	; 52
    57ae:	91 e2       	ldi	r25, 0x21	; 33
    57b0:	bf cf       	rjmp	.-130    	; 0x5730 <sober()+0x76>
    57b2:	8f 35       	cpi	r24, 0x5F	; 95
    57b4:	09 f4       	brne	.+2      	; 0x57b8 <sober()+0xfe>
    57b6:	9c c0       	rjmp	.+312    	; 0x58f0 <sober()+0x236>
    57b8:	84 36       	cpi	r24, 0x64	; 100
    57ba:	09 f4       	brne	.+2      	; 0x57be <sober()+0x104>
    57bc:	a6 c0       	rjmp	.+332    	; 0x590a <sober()+0x250>
    57be:	8a 35       	cpi	r24, 0x5A	; 90
    57c0:	09 f0       	breq	.+2      	; 0x57c4 <sober()+0x10a>
    57c2:	9c cf       	rjmp	.-200    	; 0x56fc <sober()+0x42>
    57c4:	4a e1       	ldi	r20, 0x1A	; 26
    57c6:	54 e0       	ldi	r21, 0x04	; 4
    57c8:	6f e5       	ldi	r22, 0x5F	; 95
    57ca:	f0 cf       	rjmp	.-32     	; 0x57ac <sober()+0xf2>
    57cc:	8d 37       	cpi	r24, 0x7D	; 125
    57ce:	09 f4       	brne	.+2      	; 0x57d2 <sober()+0x118>
    57d0:	b1 c0       	rjmp	.+354    	; 0x5934 <sober()+0x27a>
    57d2:	58 f4       	brcc	.+22     	; 0x57ea <sober()+0x130>
    57d4:	83 37       	cpi	r24, 0x73	; 115
    57d6:	09 f4       	brne	.+2      	; 0x57da <sober()+0x120>
    57d8:	a8 c0       	rjmp	.+336    	; 0x592a <sober()+0x270>
    57da:	88 37       	cpi	r24, 0x78	; 120
    57dc:	09 f4       	brne	.+2      	; 0x57e0 <sober()+0x126>
    57de:	a8 c0       	rjmp	.+336    	; 0x5930 <sober()+0x276>
    57e0:	8e 36       	cpi	r24, 0x6E	; 110
    57e2:	09 f0       	breq	.+2      	; 0x57e6 <sober()+0x12c>
    57e4:	8b cf       	rjmp	.-234    	; 0x56fc <sober()+0x42>
    57e6:	43 e7       	ldi	r20, 0x73	; 115
    57e8:	6a c0       	rjmp	.+212    	; 0x58be <sober()+0x204>
    57ea:	87 38       	cpi	r24, 0x87	; 135
    57ec:	09 f4       	brne	.+2      	; 0x57f0 <sober()+0x136>
    57ee:	a5 c0       	rjmp	.+330    	; 0x593a <sober()+0x280>
    57f0:	88 3c       	cpi	r24, 0xC8	; 200
    57f2:	09 f4       	brne	.+2      	; 0x57f6 <sober()+0x13c>
    57f4:	a6 c0       	rjmp	.+332    	; 0x5942 <sober()+0x288>
    57f6:	82 38       	cpi	r24, 0x82	; 130
    57f8:	09 f0       	breq	.+2      	; 0x57fc <sober()+0x142>
    57fa:	80 cf       	rjmp	.-256    	; 0x56fc <sober()+0x42>
    57fc:	47 e8       	ldi	r20, 0x87	; 135
    57fe:	66 e0       	ldi	r22, 0x06	; 6
    5800:	91 c0       	rjmp	.+290    	; 0x5924 <sober()+0x26a>
    5802:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5806:	7c 01       	movw	r14, r24
    5808:	6d e2       	ldi	r22, 0x2D	; 45
    580a:	73 e0       	ldi	r23, 0x03	; 3
    580c:	ce 01       	movw	r24, r28
    580e:	01 96       	adiw	r24, 0x01	; 1
    5810:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    5814:	05 e0       	ldi	r16, 0x05	; 5
    5816:	97 01       	movw	r18, r14
    5818:	4a e5       	ldi	r20, 0x5A	; 90
    581a:	50 e0       	ldi	r21, 0x00	; 0
    581c:	60 e0       	ldi	r22, 0x00	; 0
    581e:	74 e5       	ldi	r23, 0x54	; 84
    5820:	ce 01       	movw	r24, r28
    5822:	01 96       	adiw	r24, 0x01	; 1
    5824:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    5828:	ce 01       	movw	r24, r28
    582a:	01 96       	adiw	r24, 0x01	; 1
    582c:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    5830:	65 cf       	rjmp	.-310    	; 0x56fc <sober()+0x42>
    5832:	4a e0       	ldi	r20, 0x0A	; 10
    5834:	6b e0       	ldi	r22, 0x0B	; 11
    5836:	81 ea       	ldi	r24, 0xA1	; 161
    5838:	9d e2       	ldi	r25, 0x2D	; 45
    583a:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    583e:	5e cf       	rjmp	.-324    	; 0x56fc <sober()+0x42>
    5840:	4f e0       	ldi	r20, 0x0F	; 15
    5842:	63 e0       	ldi	r22, 0x03	; 3
    5844:	80 e3       	ldi	r24, 0x30	; 48
    5846:	91 e2       	ldi	r25, 0x21	; 33
    5848:	f8 cf       	rjmp	.-16     	; 0x583a <sober()+0x180>
    584a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    584e:	7c 01       	movw	r14, r24
    5850:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5854:	8c 01       	movw	r16, r24
    5856:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    585a:	9c 01       	movw	r18, r24
    585c:	42 e3       	ldi	r20, 0x32	; 50
    585e:	50 e0       	ldi	r21, 0x00	; 0
    5860:	69 e1       	ldi	r22, 0x19	; 25
    5862:	8e e0       	ldi	r24, 0x0E	; 14
    5864:	9f e1       	ldi	r25, 0x1F	; 31
    5866:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    586a:	48 cf       	rjmp	.-368    	; 0x56fc <sober()+0x42>
    586c:	6e e1       	ldi	r22, 0x1E	; 30
    586e:	8d e0       	ldi	r24, 0x0D	; 13
    5870:	92 e0       	ldi	r25, 0x02	; 2
    5872:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    5876:	42 cf       	rjmp	.-380    	; 0x56fc <sober()+0x42>
    5878:	63 e2       	ldi	r22, 0x23	; 35
    587a:	8d e4       	ldi	r24, 0x4D	; 77
    587c:	98 e0       	ldi	r25, 0x08	; 8
    587e:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    5882:	3c cf       	rjmp	.-392    	; 0x56fc <sober()+0x42>
    5884:	4d e2       	ldi	r20, 0x2D	; 45
    5886:	62 e0       	ldi	r22, 0x02	; 2
    5888:	84 e3       	ldi	r24, 0x34	; 52
    588a:	91 e2       	ldi	r25, 0x21	; 33
    588c:	d6 cf       	rjmp	.-84     	; 0x583a <sober()+0x180>
    588e:	42 e3       	ldi	r20, 0x32	; 50
    5890:	63 e0       	ldi	r22, 0x03	; 3
    5892:	fa cf       	rjmp	.-12     	; 0x5888 <sober()+0x1ce>
    5894:	4a e1       	ldi	r20, 0x1A	; 26
    5896:	54 e0       	ldi	r21, 0x04	; 4
    5898:	67 e3       	ldi	r22, 0x37	; 55
    589a:	48 cf       	rjmp	.-368    	; 0x572c <sober()+0x72>
    589c:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    58a0:	7c 01       	movw	r14, r24
    58a2:	62 e2       	ldi	r22, 0x22	; 34
    58a4:	73 e0       	ldi	r23, 0x03	; 3
    58a6:	ce 01       	movw	r24, r28
    58a8:	01 96       	adiw	r24, 0x01	; 1
    58aa:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    58ae:	01 e4       	ldi	r16, 0x41	; 65
    58b0:	97 01       	movw	r18, r14
    58b2:	49 e1       	ldi	r20, 0x19	; 25
    58b4:	50 e0       	ldi	r21, 0x00	; 0
    58b6:	6d e4       	ldi	r22, 0x4D	; 77
    58b8:	78 e0       	ldi	r23, 0x08	; 8
    58ba:	b2 cf       	rjmp	.-156    	; 0x5820 <sober()+0x166>
    58bc:	46 e4       	ldi	r20, 0x46	; 70
    58be:	62 e0       	ldi	r22, 0x02	; 2
    58c0:	31 c0       	rjmp	.+98     	; 0x5924 <sober()+0x26a>
    58c2:	4b e4       	ldi	r20, 0x4B	; 75
    58c4:	64 e0       	ldi	r22, 0x04	; 4
    58c6:	2e c0       	rjmp	.+92     	; 0x5924 <sober()+0x26a>
    58c8:	40 e5       	ldi	r20, 0x50	; 80
    58ca:	69 e0       	ldi	r22, 0x09	; 9
    58cc:	8f e5       	ldi	r24, 0x5F	; 95
    58ce:	92 e4       	ldi	r25, 0x42	; 66
    58d0:	b4 cf       	rjmp	.-152    	; 0x583a <sober()+0x180>
    58d2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    58d6:	7c 01       	movw	r14, r24
    58d8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    58dc:	8c 01       	movw	r16, r24
    58de:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    58e2:	9c 01       	movw	r18, r24
    58e4:	42 e3       	ldi	r20, 0x32	; 50
    58e6:	50 e0       	ldi	r21, 0x00	; 0
    58e8:	6a e5       	ldi	r22, 0x5A	; 90
    58ea:	84 e3       	ldi	r24, 0x34	; 52
    58ec:	91 e2       	ldi	r25, 0x21	; 33
    58ee:	bb cf       	rjmp	.-138    	; 0x5866 <sober()+0x1ac>
    58f0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    58f4:	7c 01       	movw	r14, r24
    58f6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    58fa:	8c 01       	movw	r16, r24
    58fc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5900:	9c 01       	movw	r18, r24
    5902:	42 e3       	ldi	r20, 0x32	; 50
    5904:	50 e0       	ldi	r21, 0x00	; 0
    5906:	64 e6       	ldi	r22, 0x64	; 100
    5908:	f0 cf       	rjmp	.-32     	; 0x58ea <sober()+0x230>
    590a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    590e:	7c 01       	movw	r14, r24
    5910:	62 e2       	ldi	r22, 0x22	; 34
    5912:	73 e0       	ldi	r23, 0x03	; 3
    5914:	ce 01       	movw	r24, r28
    5916:	01 96       	adiw	r24, 0x01	; 1
    5918:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    591c:	09 e6       	ldi	r16, 0x69	; 105
    591e:	c8 cf       	rjmp	.-112    	; 0x58b0 <sober()+0x1f6>
    5920:	4e e6       	ldi	r20, 0x6E	; 110
    5922:	61 e0       	ldi	r22, 0x01	; 1
    5924:	8a e2       	ldi	r24, 0x2A	; 42
    5926:	91 e2       	ldi	r25, 0x21	; 33
    5928:	16 cf       	rjmp	.-468    	; 0x5756 <sober()+0x9c>
    592a:	48 e7       	ldi	r20, 0x78	; 120
    592c:	63 e0       	ldi	r22, 0x03	; 3
    592e:	fa cf       	rjmp	.-12     	; 0x5924 <sober()+0x26a>
    5930:	4d e7       	ldi	r20, 0x7D	; 125
    5932:	c8 cf       	rjmp	.-112    	; 0x58c4 <sober()+0x20a>
    5934:	42 e8       	ldi	r20, 0x82	; 130
    5936:	65 e0       	ldi	r22, 0x05	; 5
    5938:	f5 cf       	rjmp	.-22     	; 0x5924 <sober()+0x26a>
    593a:	68 ec       	ldi	r22, 0xC8	; 200
    593c:	80 e5       	ldi	r24, 0x50	; 80
    593e:	93 ec       	ldi	r25, 0xC3	; 195
    5940:	98 cf       	rjmp	.-208    	; 0x5872 <sober()+0x1b8>
    5942:	60 e0       	ldi	r22, 0x00	; 0
    5944:	8c ec       	ldi	r24, 0xCC	; 204
    5946:	90 e1       	ldi	r25, 0x10	; 16
    5948:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    594c:	80 e0       	ldi	r24, 0x00	; 0
    594e:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    5952:	d4 ce       	rjmp	.-600    	; 0x56fc <sober()+0x42>

00005954 <prisoner()>:
    5954:	ef 92       	push	r14
    5956:	ff 92       	push	r15
    5958:	0f 93       	push	r16
    595a:	1f 93       	push	r17
    595c:	cf 93       	push	r28
    595e:	df 93       	push	r29
    5960:	00 d0       	rcall	.+0      	; 0x5962 <prisoner()+0xe>
    5962:	00 d0       	rcall	.+0      	; 0x5964 <prisoner()+0x10>
    5964:	00 d0       	rcall	.+0      	; 0x5966 <prisoner()+0x12>
    5966:	1f 92       	push	r1
    5968:	cd b7       	in	r28, 0x3d	; 61
    596a:	de b7       	in	r29, 0x3e	; 62
    596c:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    5970:	86 34       	cpi	r24, 0x46	; 70
    5972:	09 f4       	brne	.+2      	; 0x5976 <prisoner()+0x22>
    5974:	f3 c0       	rjmp	.+486    	; 0x5b5c <prisoner()+0x208>
    5976:	08 f0       	brcs	.+2      	; 0x597a <prisoner()+0x26>
    5978:	55 c0       	rjmp	.+170    	; 0x5a24 <prisoner()+0xd0>
    597a:	8e 31       	cpi	r24, 0x1E	; 30
    597c:	09 f4       	brne	.+2      	; 0x5980 <prisoner()+0x2c>
    597e:	c9 c0       	rjmp	.+402    	; 0x5b12 <prisoner()+0x1be>
    5980:	38 f5       	brcc	.+78     	; 0x59d0 <prisoner()+0x7c>
    5982:	8a 30       	cpi	r24, 0x0A	; 10
    5984:	09 f4       	brne	.+2      	; 0x5988 <prisoner()+0x34>
    5986:	a9 c0       	rjmp	.+338    	; 0x5ada <prisoner()+0x186>
    5988:	98 f4       	brcc	.+38     	; 0x59b0 <prisoner()+0x5c>
    598a:	88 23       	and	r24, r24
    598c:	09 f4       	brne	.+2      	; 0x5990 <prisoner()+0x3c>
    598e:	86 c0       	rjmp	.+268    	; 0x5a9c <prisoner()+0x148>
    5990:	85 30       	cpi	r24, 0x05	; 5
    5992:	09 f4       	brne	.+2      	; 0x5996 <prisoner()+0x42>
    5994:	9b c0       	rjmp	.+310    	; 0x5acc <prisoner()+0x178>
    5996:	27 96       	adiw	r28, 0x07	; 7
    5998:	0f b6       	in	r0, 0x3f	; 63
    599a:	f8 94       	cli
    599c:	de bf       	out	0x3e, r29	; 62
    599e:	0f be       	out	0x3f, r0	; 63
    59a0:	cd bf       	out	0x3d, r28	; 61
    59a2:	df 91       	pop	r29
    59a4:	cf 91       	pop	r28
    59a6:	1f 91       	pop	r17
    59a8:	0f 91       	pop	r16
    59aa:	ff 90       	pop	r15
    59ac:	ef 90       	pop	r14
    59ae:	08 95       	ret
    59b0:	84 31       	cpi	r24, 0x14	; 20
    59b2:	09 f4       	brne	.+2      	; 0x59b6 <prisoner()+0x62>
    59b4:	97 c0       	rjmp	.+302    	; 0x5ae4 <prisoner()+0x190>
    59b6:	89 31       	cpi	r24, 0x19	; 25
    59b8:	09 f4       	brne	.+2      	; 0x59bc <prisoner()+0x68>
    59ba:	a5 c0       	rjmp	.+330    	; 0x5b06 <prisoner()+0x1b2>
    59bc:	8f 30       	cpi	r24, 0x0F	; 15
    59be:	59 f7       	brne	.-42     	; 0x5996 <prisoner()+0x42>
    59c0:	4a e1       	ldi	r20, 0x1A	; 26
    59c2:	54 e0       	ldi	r21, 0x04	; 4
    59c4:	64 e1       	ldi	r22, 0x14	; 20
    59c6:	80 e3       	ldi	r24, 0x30	; 48
    59c8:	91 e2       	ldi	r25, 0x21	; 33
    59ca:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    59ce:	e3 cf       	rjmp	.-58     	; 0x5996 <prisoner()+0x42>
    59d0:	82 33       	cpi	r24, 0x32	; 50
    59d2:	09 f4       	brne	.+2      	; 0x59d6 <prisoner()+0x82>
    59d4:	ac c0       	rjmp	.+344    	; 0x5b2e <prisoner()+0x1da>
    59d6:	78 f4       	brcc	.+30     	; 0x59f6 <prisoner()+0xa2>
    59d8:	88 32       	cpi	r24, 0x28	; 40
    59da:	09 f4       	brne	.+2      	; 0x59de <prisoner()+0x8a>
    59dc:	a0 c0       	rjmp	.+320    	; 0x5b1e <prisoner()+0x1ca>
    59de:	8d 32       	cpi	r24, 0x2D	; 45
    59e0:	09 f4       	brne	.+2      	; 0x59e4 <prisoner()+0x90>
    59e2:	a2 c0       	rjmp	.+324    	; 0x5b28 <prisoner()+0x1d4>
    59e4:	83 32       	cpi	r24, 0x23	; 35
    59e6:	b9 f6       	brne	.-82     	; 0x5996 <prisoner()+0x42>
    59e8:	48 e2       	ldi	r20, 0x28	; 40
    59ea:	65 e0       	ldi	r22, 0x05	; 5
    59ec:	88 e6       	ldi	r24, 0x68	; 104
    59ee:	92 e4       	ldi	r25, 0x42	; 66
    59f0:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    59f4:	d0 cf       	rjmp	.-96     	; 0x5996 <prisoner()+0x42>
    59f6:	8c 33       	cpi	r24, 0x3C	; 60
    59f8:	09 f4       	brne	.+2      	; 0x59fc <prisoner()+0xa8>
    59fa:	9d c0       	rjmp	.+314    	; 0x5b36 <prisoner()+0x1e2>
    59fc:	81 34       	cpi	r24, 0x41	; 65
    59fe:	09 f4       	brne	.+2      	; 0x5a02 <prisoner()+0xae>
    5a00:	aa c0       	rjmp	.+340    	; 0x5b56 <prisoner()+0x202>
    5a02:	87 33       	cpi	r24, 0x37	; 55
    5a04:	41 f6       	brne	.-112    	; 0x5996 <prisoner()+0x42>
    5a06:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5a0a:	7c 01       	movw	r14, r24
    5a0c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5a10:	8c 01       	movw	r16, r24
    5a12:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5a16:	9c 01       	movw	r18, r24
    5a18:	42 e3       	ldi	r20, 0x32	; 50
    5a1a:	50 e0       	ldi	r21, 0x00	; 0
    5a1c:	6c e3       	ldi	r22, 0x3C	; 60
    5a1e:	80 e3       	ldi	r24, 0x30	; 48
    5a20:	91 e2       	ldi	r25, 0x21	; 33
    5a22:	6e c0       	rjmp	.+220    	; 0x5b00 <prisoner()+0x1ac>
    5a24:	89 36       	cpi	r24, 0x69	; 105
    5a26:	09 f4       	brne	.+2      	; 0x5a2a <prisoner()+0xd6>
    5a28:	c8 c0       	rjmp	.+400    	; 0x5bba <prisoner()+0x266>
    5a2a:	e8 f4       	brcc	.+58     	; 0x5a66 <prisoner()+0x112>
    5a2c:	85 35       	cpi	r24, 0x55	; 85
    5a2e:	09 f4       	brne	.+2      	; 0x5a32 <prisoner()+0xde>
    5a30:	9d c0       	rjmp	.+314    	; 0x5b6c <prisoner()+0x218>
    5a32:	60 f4       	brcc	.+24     	; 0x5a4c <prisoner()+0xf8>
    5a34:	8b 34       	cpi	r24, 0x4B	; 75
    5a36:	09 f4       	brne	.+2      	; 0x5a3a <prisoner()+0xe6>
    5a38:	94 c0       	rjmp	.+296    	; 0x5b62 <prisoner()+0x20e>
    5a3a:	4a e1       	ldi	r20, 0x1A	; 26
    5a3c:	54 e0       	ldi	r21, 0x04	; 4
    5a3e:	65 e5       	ldi	r22, 0x55	; 85
    5a40:	80 35       	cpi	r24, 0x50	; 80
    5a42:	09 f0       	breq	.+2      	; 0x5a46 <prisoner()+0xf2>
    5a44:	a8 cf       	rjmp	.-176    	; 0x5996 <prisoner()+0x42>
    5a46:	84 e3       	ldi	r24, 0x34	; 52
    5a48:	91 e2       	ldi	r25, 0x21	; 33
    5a4a:	bf cf       	rjmp	.-130    	; 0x59ca <prisoner()+0x76>
    5a4c:	8f 35       	cpi	r24, 0x5F	; 95
    5a4e:	09 f4       	brne	.+2      	; 0x5a52 <prisoner()+0xfe>
    5a50:	9c c0       	rjmp	.+312    	; 0x5b8a <prisoner()+0x236>
    5a52:	84 36       	cpi	r24, 0x64	; 100
    5a54:	09 f4       	brne	.+2      	; 0x5a58 <prisoner()+0x104>
    5a56:	a6 c0       	rjmp	.+332    	; 0x5ba4 <prisoner()+0x250>
    5a58:	8a 35       	cpi	r24, 0x5A	; 90
    5a5a:	09 f0       	breq	.+2      	; 0x5a5e <prisoner()+0x10a>
    5a5c:	9c cf       	rjmp	.-200    	; 0x5996 <prisoner()+0x42>
    5a5e:	4a e1       	ldi	r20, 0x1A	; 26
    5a60:	54 e0       	ldi	r21, 0x04	; 4
    5a62:	6f e5       	ldi	r22, 0x5F	; 95
    5a64:	f0 cf       	rjmp	.-32     	; 0x5a46 <prisoner()+0xf2>
    5a66:	8d 37       	cpi	r24, 0x7D	; 125
    5a68:	09 f4       	brne	.+2      	; 0x5a6c <prisoner()+0x118>
    5a6a:	b1 c0       	rjmp	.+354    	; 0x5bce <prisoner()+0x27a>
    5a6c:	58 f4       	brcc	.+22     	; 0x5a84 <prisoner()+0x130>
    5a6e:	83 37       	cpi	r24, 0x73	; 115
    5a70:	09 f4       	brne	.+2      	; 0x5a74 <prisoner()+0x120>
    5a72:	a8 c0       	rjmp	.+336    	; 0x5bc4 <prisoner()+0x270>
    5a74:	88 37       	cpi	r24, 0x78	; 120
    5a76:	09 f4       	brne	.+2      	; 0x5a7a <prisoner()+0x126>
    5a78:	a8 c0       	rjmp	.+336    	; 0x5bca <prisoner()+0x276>
    5a7a:	8e 36       	cpi	r24, 0x6E	; 110
    5a7c:	09 f0       	breq	.+2      	; 0x5a80 <prisoner()+0x12c>
    5a7e:	8b cf       	rjmp	.-234    	; 0x5996 <prisoner()+0x42>
    5a80:	43 e7       	ldi	r20, 0x73	; 115
    5a82:	6a c0       	rjmp	.+212    	; 0x5b58 <prisoner()+0x204>
    5a84:	87 38       	cpi	r24, 0x87	; 135
    5a86:	09 f4       	brne	.+2      	; 0x5a8a <prisoner()+0x136>
    5a88:	a5 c0       	rjmp	.+330    	; 0x5bd4 <prisoner()+0x280>
    5a8a:	88 3c       	cpi	r24, 0xC8	; 200
    5a8c:	09 f4       	brne	.+2      	; 0x5a90 <prisoner()+0x13c>
    5a8e:	a6 c0       	rjmp	.+332    	; 0x5bdc <prisoner()+0x288>
    5a90:	82 38       	cpi	r24, 0x82	; 130
    5a92:	09 f0       	breq	.+2      	; 0x5a96 <prisoner()+0x142>
    5a94:	80 cf       	rjmp	.-256    	; 0x5996 <prisoner()+0x42>
    5a96:	47 e8       	ldi	r20, 0x87	; 135
    5a98:	66 e0       	ldi	r22, 0x06	; 6
    5a9a:	91 c0       	rjmp	.+290    	; 0x5bbe <prisoner()+0x26a>
    5a9c:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5aa0:	7c 01       	movw	r14, r24
    5aa2:	6b e3       	ldi	r22, 0x3B	; 59
    5aa4:	73 e0       	ldi	r23, 0x03	; 3
    5aa6:	ce 01       	movw	r24, r28
    5aa8:	01 96       	adiw	r24, 0x01	; 1
    5aaa:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    5aae:	05 e0       	ldi	r16, 0x05	; 5
    5ab0:	97 01       	movw	r18, r14
    5ab2:	4a e5       	ldi	r20, 0x5A	; 90
    5ab4:	50 e0       	ldi	r21, 0x00	; 0
    5ab6:	60 e0       	ldi	r22, 0x00	; 0
    5ab8:	74 e5       	ldi	r23, 0x54	; 84
    5aba:	ce 01       	movw	r24, r28
    5abc:	01 96       	adiw	r24, 0x01	; 1
    5abe:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    5ac2:	ce 01       	movw	r24, r28
    5ac4:	01 96       	adiw	r24, 0x01	; 1
    5ac6:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    5aca:	65 cf       	rjmp	.-310    	; 0x5996 <prisoner()+0x42>
    5acc:	4a e0       	ldi	r20, 0x0A	; 10
    5ace:	6b e0       	ldi	r22, 0x0B	; 11
    5ad0:	81 ea       	ldi	r24, 0xA1	; 161
    5ad2:	9d e2       	ldi	r25, 0x2D	; 45
    5ad4:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    5ad8:	5e cf       	rjmp	.-324    	; 0x5996 <prisoner()+0x42>
    5ada:	4f e0       	ldi	r20, 0x0F	; 15
    5adc:	63 e0       	ldi	r22, 0x03	; 3
    5ade:	80 e3       	ldi	r24, 0x30	; 48
    5ae0:	91 e2       	ldi	r25, 0x21	; 33
    5ae2:	f8 cf       	rjmp	.-16     	; 0x5ad4 <prisoner()+0x180>
    5ae4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5ae8:	7c 01       	movw	r14, r24
    5aea:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5aee:	8c 01       	movw	r16, r24
    5af0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5af4:	9c 01       	movw	r18, r24
    5af6:	42 e3       	ldi	r20, 0x32	; 50
    5af8:	50 e0       	ldi	r21, 0x00	; 0
    5afa:	69 e1       	ldi	r22, 0x19	; 25
    5afc:	8e e0       	ldi	r24, 0x0E	; 14
    5afe:	9f e1       	ldi	r25, 0x1F	; 31
    5b00:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    5b04:	48 cf       	rjmp	.-368    	; 0x5996 <prisoner()+0x42>
    5b06:	6e e1       	ldi	r22, 0x1E	; 30
    5b08:	8d e0       	ldi	r24, 0x0D	; 13
    5b0a:	92 e0       	ldi	r25, 0x02	; 2
    5b0c:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    5b10:	42 cf       	rjmp	.-380    	; 0x5996 <prisoner()+0x42>
    5b12:	63 e2       	ldi	r22, 0x23	; 35
    5b14:	8d e4       	ldi	r24, 0x4D	; 77
    5b16:	98 e0       	ldi	r25, 0x08	; 8
    5b18:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    5b1c:	3c cf       	rjmp	.-392    	; 0x5996 <prisoner()+0x42>
    5b1e:	4d e2       	ldi	r20, 0x2D	; 45
    5b20:	62 e0       	ldi	r22, 0x02	; 2
    5b22:	84 e3       	ldi	r24, 0x34	; 52
    5b24:	91 e2       	ldi	r25, 0x21	; 33
    5b26:	d6 cf       	rjmp	.-84     	; 0x5ad4 <prisoner()+0x180>
    5b28:	42 e3       	ldi	r20, 0x32	; 50
    5b2a:	63 e0       	ldi	r22, 0x03	; 3
    5b2c:	fa cf       	rjmp	.-12     	; 0x5b22 <prisoner()+0x1ce>
    5b2e:	4a e1       	ldi	r20, 0x1A	; 26
    5b30:	54 e0       	ldi	r21, 0x04	; 4
    5b32:	67 e3       	ldi	r22, 0x37	; 55
    5b34:	48 cf       	rjmp	.-368    	; 0x59c6 <prisoner()+0x72>
    5b36:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5b3a:	7c 01       	movw	r14, r24
    5b3c:	62 e2       	ldi	r22, 0x22	; 34
    5b3e:	73 e0       	ldi	r23, 0x03	; 3
    5b40:	ce 01       	movw	r24, r28
    5b42:	01 96       	adiw	r24, 0x01	; 1
    5b44:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    5b48:	01 e4       	ldi	r16, 0x41	; 65
    5b4a:	97 01       	movw	r18, r14
    5b4c:	49 e1       	ldi	r20, 0x19	; 25
    5b4e:	50 e0       	ldi	r21, 0x00	; 0
    5b50:	6d e4       	ldi	r22, 0x4D	; 77
    5b52:	78 e0       	ldi	r23, 0x08	; 8
    5b54:	b2 cf       	rjmp	.-156    	; 0x5aba <prisoner()+0x166>
    5b56:	46 e4       	ldi	r20, 0x46	; 70
    5b58:	62 e0       	ldi	r22, 0x02	; 2
    5b5a:	31 c0       	rjmp	.+98     	; 0x5bbe <prisoner()+0x26a>
    5b5c:	4b e4       	ldi	r20, 0x4B	; 75
    5b5e:	64 e0       	ldi	r22, 0x04	; 4
    5b60:	2e c0       	rjmp	.+92     	; 0x5bbe <prisoner()+0x26a>
    5b62:	40 e5       	ldi	r20, 0x50	; 80
    5b64:	69 e0       	ldi	r22, 0x09	; 9
    5b66:	8f e5       	ldi	r24, 0x5F	; 95
    5b68:	92 e4       	ldi	r25, 0x42	; 66
    5b6a:	b4 cf       	rjmp	.-152    	; 0x5ad4 <prisoner()+0x180>
    5b6c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5b70:	7c 01       	movw	r14, r24
    5b72:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5b76:	8c 01       	movw	r16, r24
    5b78:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5b7c:	9c 01       	movw	r18, r24
    5b7e:	42 e3       	ldi	r20, 0x32	; 50
    5b80:	50 e0       	ldi	r21, 0x00	; 0
    5b82:	6a e5       	ldi	r22, 0x5A	; 90
    5b84:	84 e3       	ldi	r24, 0x34	; 52
    5b86:	91 e2       	ldi	r25, 0x21	; 33
    5b88:	bb cf       	rjmp	.-138    	; 0x5b00 <prisoner()+0x1ac>
    5b8a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5b8e:	7c 01       	movw	r14, r24
    5b90:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5b94:	8c 01       	movw	r16, r24
    5b96:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5b9a:	9c 01       	movw	r18, r24
    5b9c:	42 e3       	ldi	r20, 0x32	; 50
    5b9e:	50 e0       	ldi	r21, 0x00	; 0
    5ba0:	64 e6       	ldi	r22, 0x64	; 100
    5ba2:	f0 cf       	rjmp	.-32     	; 0x5b84 <prisoner()+0x230>
    5ba4:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5ba8:	7c 01       	movw	r14, r24
    5baa:	62 e2       	ldi	r22, 0x22	; 34
    5bac:	73 e0       	ldi	r23, 0x03	; 3
    5bae:	ce 01       	movw	r24, r28
    5bb0:	01 96       	adiw	r24, 0x01	; 1
    5bb2:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    5bb6:	09 e6       	ldi	r16, 0x69	; 105
    5bb8:	c8 cf       	rjmp	.-112    	; 0x5b4a <prisoner()+0x1f6>
    5bba:	4e e6       	ldi	r20, 0x6E	; 110
    5bbc:	61 e0       	ldi	r22, 0x01	; 1
    5bbe:	8a e2       	ldi	r24, 0x2A	; 42
    5bc0:	91 e2       	ldi	r25, 0x21	; 33
    5bc2:	16 cf       	rjmp	.-468    	; 0x59f0 <prisoner()+0x9c>
    5bc4:	48 e7       	ldi	r20, 0x78	; 120
    5bc6:	63 e0       	ldi	r22, 0x03	; 3
    5bc8:	fa cf       	rjmp	.-12     	; 0x5bbe <prisoner()+0x26a>
    5bca:	4d e7       	ldi	r20, 0x7D	; 125
    5bcc:	c8 cf       	rjmp	.-112    	; 0x5b5e <prisoner()+0x20a>
    5bce:	42 e8       	ldi	r20, 0x82	; 130
    5bd0:	65 e0       	ldi	r22, 0x05	; 5
    5bd2:	f5 cf       	rjmp	.-22     	; 0x5bbe <prisoner()+0x26a>
    5bd4:	68 ec       	ldi	r22, 0xC8	; 200
    5bd6:	80 e5       	ldi	r24, 0x50	; 80
    5bd8:	93 ec       	ldi	r25, 0xC3	; 195
    5bda:	98 cf       	rjmp	.-208    	; 0x5b0c <prisoner()+0x1b8>
    5bdc:	60 e0       	ldi	r22, 0x00	; 0
    5bde:	8c ec       	ldi	r24, 0xCC	; 204
    5be0:	90 e1       	ldi	r25, 0x10	; 16
    5be2:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    5be6:	80 e0       	ldi	r24, 0x00	; 0
    5be8:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    5bec:	d4 ce       	rjmp	.-600    	; 0x5996 <prisoner()+0x42>

00005bee <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    5bee:	9f 92       	push	r9
    5bf0:	af 92       	push	r10
    5bf2:	bf 92       	push	r11
    5bf4:	cf 92       	push	r12
    5bf6:	df 92       	push	r13
    5bf8:	ef 92       	push	r14
    5bfa:	ff 92       	push	r15
    5bfc:	0f 93       	push	r16
    5bfe:	1f 93       	push	r17
    5c00:	cf 93       	push	r28
    5c02:	df 93       	push	r29
    5c04:	fc 01       	movw	r30, r24
    5c06:	c0 80       	ld	r12, Z
    5c08:	d1 80       	ldd	r13, Z+1	; 0x01
    5c0a:	28 b1       	in	r18, 0x08	; 8
    5c0c:	b2 2e       	mov	r11, r18
    5c0e:	68 94       	set
    5c10:	b2 f8       	bld	r11, 2
    5c12:	98 b1       	in	r25, 0x08	; 8
    5c14:	9b 7f       	andi	r25, 0xFB	; 251
    5c16:	98 b9       	out	0x08, r25	; 8
    5c18:	62 85       	ldd	r22, Z+10	; 0x0a
    5c1a:	87 81       	ldd	r24, Z+7	; 0x07
    5c1c:	06 2f       	mov	r16, r22
    5c1e:	08 1b       	sub	r16, r24
    5c20:	80 2f       	mov	r24, r16
    5c22:	07 83       	std	Z+7, r16	; 0x07
    5c24:	77 85       	ldd	r23, Z+15	; 0x0f
    5c26:	a2 81       	ldd	r26, Z+2	; 0x02
    5c28:	b3 81       	ldd	r27, Z+3	; 0x03
    5c2a:	35 85       	ldd	r19, Z+13	; 0x0d
    5c2c:	44 85       	ldd	r20, Z+12	; 0x0c
    5c2e:	56 85       	ldd	r21, Z+14	; 0x0e
    5c30:	99 24       	eor	r9, r9
    5c32:	93 94       	inc	r9
    5c34:	93 0e       	add	r9, r19
    5c36:	4f 5f       	subi	r20, 0xFF	; 255
    5c38:	5f 5f       	subi	r21, 0xFF	; 255
    5c3a:	f6 80       	ldd	r15, Z+6	; 0x06
    5c3c:	e0 84       	ldd	r14, Z+8	; 0x08
    5c3e:	c1 85       	ldd	r28, Z+9	; 0x09
    5c40:	d3 85       	ldd	r29, Z+11	; 0x0b
    5c42:	f6 01       	movw	r30, r12
    5c44:	11 81       	ldd	r17, Z+1	; 0x01
    5c46:	a1 2c       	mov	r10, r1
    5c48:	0a 2d       	mov	r16, r10
    5c4a:	2a 2d       	mov	r18, r10
    5c4c:	3a 2d       	mov	r19, r10
    5c4e:	31 81       	ldd	r19, Z+1	; 0x01
    5c50:	11 27       	eor	r17, r17
    5c52:	88 94       	clc
    5c54:	31 11       	cpse	r19, r1
    5c56:	38 0f       	add	r19, r24
    5c58:	08 f4       	brcc	.+2      	; 0x5c5c <L_19163>
    5c5a:	3f ef       	ldi	r19, 0xFF	; 255

00005c5c <L_19163>:
    5c5c:	81 95       	neg	r24
    5c5e:	88 94       	clc
    5c60:	90 fc       	sbrc	r9, 0
    5c62:	13 0f       	add	r17, r19
    5c64:	17 95       	ror	r17
    5c66:	88 94       	clc
    5c68:	91 fc       	sbrc	r9, 1
    5c6a:	13 0f       	add	r17, r19
    5c6c:	17 95       	ror	r17
    5c6e:	88 94       	clc
    5c70:	92 fc       	sbrc	r9, 2
    5c72:	13 0f       	add	r17, r19
    5c74:	17 95       	ror	r17
    5c76:	88 94       	clc
    5c78:	93 fc       	sbrc	r9, 3
    5c7a:	13 0f       	add	r17, r19
    5c7c:	17 95       	ror	r17
    5c7e:	88 94       	clc
    5c80:	94 fc       	sbrc	r9, 4
    5c82:	13 0f       	add	r17, r19
    5c84:	17 95       	ror	r17
    5c86:	88 94       	clc
    5c88:	95 fc       	sbrc	r9, 5
    5c8a:	13 0f       	add	r17, r19
    5c8c:	17 95       	ror	r17
    5c8e:	88 94       	clc
    5c90:	96 fc       	sbrc	r9, 6
    5c92:	13 0f       	add	r17, r19
    5c94:	17 95       	ror	r17
    5c96:	88 94       	clc
    5c98:	97 fc       	sbrc	r9, 7
    5c9a:	13 0f       	add	r17, r19
    5c9c:	17 95       	ror	r17
    5c9e:	88 94       	clc
    5ca0:	03 2f       	mov	r16, r19
    5ca2:	91 10       	cpse	r9, r1
    5ca4:	01 2f       	mov	r16, r17
    5ca6:	86 0f       	add	r24, r22
    5ca8:	10 2f       	mov	r17, r16
    5caa:	00 2c       	mov	r0, r0
    5cac:	b8 b8       	out	0x08, r11	; 8
    5cae:	00 c0       	rjmp	.+0      	; 0x5cb0 <L_19163+0x54>
    5cb0:	17 ff       	sbrs	r17, 7
    5cb2:	98 b9       	out	0x08, r25	; 8
    5cb4:	30 81       	ld	r19, Z
    5cb6:	00 27       	eor	r16, r16
    5cb8:	88 94       	clc
    5cba:	00 c0       	rjmp	.+0      	; 0x5cbc <L_19163+0x60>
    5cbc:	00 c0       	rjmp	.+0      	; 0x5cbe <L_19163+0x62>
    5cbe:	00 2c       	mov	r0, r0
    5cc0:	98 b9       	out	0x08, r25	; 8
    5cc2:	31 11       	cpse	r19, r1
    5cc4:	3f 0d       	add	r19, r15
    5cc6:	00 c0       	rjmp	.+0      	; 0x5cc8 <L_19163+0x6c>
    5cc8:	00 2c       	mov	r0, r0
    5cca:	b8 b8       	out	0x08, r11	; 8
    5ccc:	00 c0       	rjmp	.+0      	; 0x5cce <L_19163+0x72>
    5cce:	16 ff       	sbrs	r17, 6
    5cd0:	98 b9       	out	0x08, r25	; 8
    5cd2:	08 f4       	brcc	.+2      	; 0x5cd6 <L_19696>
    5cd4:	3f ef       	ldi	r19, 0xFF	; 255

00005cd6 <L_19696>:
    5cd6:	f1 94       	neg	r15
    5cd8:	88 94       	clc
    5cda:	00 c0       	rjmp	.+0      	; 0x5cdc <L_19696+0x6>
    5cdc:	00 c0       	rjmp	.+0      	; 0x5cde <L_19696+0x8>
    5cde:	00 2c       	mov	r0, r0
    5ce0:	98 b9       	out	0x08, r25	; 8
    5ce2:	40 fd       	sbrc	r20, 0
    5ce4:	03 0f       	add	r16, r19
    5ce6:	00 c0       	rjmp	.+0      	; 0x5ce8 <L_19696+0x12>
    5ce8:	00 2c       	mov	r0, r0
    5cea:	b8 b8       	out	0x08, r11	; 8
    5cec:	00 c0       	rjmp	.+0      	; 0x5cee <L_19696+0x18>
    5cee:	15 ff       	sbrs	r17, 5
    5cf0:	98 b9       	out	0x08, r25	; 8
    5cf2:	07 95       	ror	r16
    5cf4:	88 94       	clc
    5cf6:	41 fd       	sbrc	r20, 1
    5cf8:	03 0f       	add	r16, r19
    5cfa:	00 c0       	rjmp	.+0      	; 0x5cfc <L_19696+0x26>
    5cfc:	00 c0       	rjmp	.+0      	; 0x5cfe <L_19696+0x28>
    5cfe:	00 2c       	mov	r0, r0
    5d00:	98 b9       	out	0x08, r25	; 8
    5d02:	07 95       	ror	r16
    5d04:	88 94       	clc
    5d06:	00 c0       	rjmp	.+0      	; 0x5d08 <L_19696+0x32>
    5d08:	00 2c       	mov	r0, r0
    5d0a:	b8 b8       	out	0x08, r11	; 8
    5d0c:	00 c0       	rjmp	.+0      	; 0x5d0e <L_19696+0x38>
    5d0e:	14 ff       	sbrs	r17, 4
    5d10:	98 b9       	out	0x08, r25	; 8
    5d12:	42 fd       	sbrc	r20, 2
    5d14:	03 0f       	add	r16, r19
    5d16:	07 95       	ror	r16
    5d18:	88 94       	clc
    5d1a:	00 c0       	rjmp	.+0      	; 0x5d1c <L_19696+0x46>
    5d1c:	00 c0       	rjmp	.+0      	; 0x5d1e <L_19696+0x48>
    5d1e:	00 2c       	mov	r0, r0
    5d20:	98 b9       	out	0x08, r25	; 8
    5d22:	43 fd       	sbrc	r20, 3
    5d24:	03 0f       	add	r16, r19
    5d26:	00 c0       	rjmp	.+0      	; 0x5d28 <L_19696+0x52>
    5d28:	00 2c       	mov	r0, r0
    5d2a:	b8 b8       	out	0x08, r11	; 8
    5d2c:	00 c0       	rjmp	.+0      	; 0x5d2e <L_19696+0x58>
    5d2e:	13 ff       	sbrs	r17, 3
    5d30:	98 b9       	out	0x08, r25	; 8
    5d32:	07 95       	ror	r16
    5d34:	88 94       	clc
    5d36:	44 fd       	sbrc	r20, 4
    5d38:	03 0f       	add	r16, r19
    5d3a:	00 c0       	rjmp	.+0      	; 0x5d3c <L_19696+0x66>
    5d3c:	00 c0       	rjmp	.+0      	; 0x5d3e <L_19696+0x68>
    5d3e:	00 2c       	mov	r0, r0
    5d40:	98 b9       	out	0x08, r25	; 8
    5d42:	07 95       	ror	r16
    5d44:	88 94       	clc
    5d46:	00 c0       	rjmp	.+0      	; 0x5d48 <L_19696+0x72>
    5d48:	00 2c       	mov	r0, r0
    5d4a:	b8 b8       	out	0x08, r11	; 8
    5d4c:	00 c0       	rjmp	.+0      	; 0x5d4e <L_19696+0x78>
    5d4e:	12 ff       	sbrs	r17, 2
    5d50:	98 b9       	out	0x08, r25	; 8
    5d52:	45 fd       	sbrc	r20, 5
    5d54:	03 0f       	add	r16, r19
    5d56:	07 95       	ror	r16
    5d58:	88 94       	clc
    5d5a:	00 c0       	rjmp	.+0      	; 0x5d5c <L_19696+0x86>
    5d5c:	00 c0       	rjmp	.+0      	; 0x5d5e <L_19696+0x88>
    5d5e:	00 2c       	mov	r0, r0
    5d60:	98 b9       	out	0x08, r25	; 8
    5d62:	46 fd       	sbrc	r20, 6
    5d64:	03 0f       	add	r16, r19
    5d66:	00 c0       	rjmp	.+0      	; 0x5d68 <L_19696+0x92>
    5d68:	00 2c       	mov	r0, r0
    5d6a:	b8 b8       	out	0x08, r11	; 8
    5d6c:	00 c0       	rjmp	.+0      	; 0x5d6e <L_19696+0x98>
    5d6e:	11 ff       	sbrs	r17, 1
    5d70:	98 b9       	out	0x08, r25	; 8
    5d72:	07 95       	ror	r16
    5d74:	88 94       	clc
    5d76:	47 fd       	sbrc	r20, 7
    5d78:	03 0f       	add	r16, r19
    5d7a:	00 c0       	rjmp	.+0      	; 0x5d7c <L_19696+0xa6>
    5d7c:	00 c0       	rjmp	.+0      	; 0x5d7e <L_19696+0xa8>
    5d7e:	00 2c       	mov	r0, r0
    5d80:	98 b9       	out	0x08, r25	; 8
    5d82:	07 95       	ror	r16
    5d84:	88 94       	clc
    5d86:	00 c0       	rjmp	.+0      	; 0x5d88 <L_19696+0xb2>
    5d88:	00 2c       	mov	r0, r0
    5d8a:	b8 b8       	out	0x08, r11	; 8
    5d8c:	00 c0       	rjmp	.+0      	; 0x5d8e <L_19696+0xb8>
    5d8e:	10 ff       	sbrs	r17, 0
    5d90:	98 b9       	out	0x08, r25	; 8
    5d92:	13 2f       	mov	r17, r19
    5d94:	41 11       	cpse	r20, r1
    5d96:	10 2f       	mov	r17, r16
    5d98:	fc 0e       	add	r15, r28
    5d9a:	00 c0       	rjmp	.+0      	; 0x5d9c <L_19696+0xc6>
    5d9c:	00 c0       	rjmp	.+0      	; 0x5d9e <L_19696+0xc8>
    5d9e:	00 2c       	mov	r0, r0
    5da0:	98 b9       	out	0x08, r25	; 8
    5da2:	00 c0       	rjmp	.+0      	; 0x5da4 <L_19696+0xce>
    5da4:	00 c0       	rjmp	.+0      	; 0x5da6 <L_19696+0xd0>
    5da6:	00 2c       	mov	r0, r0
    5da8:	b8 b8       	out	0x08, r11	; 8
    5daa:	00 c0       	rjmp	.+0      	; 0x5dac <L_19696+0xd6>
    5dac:	17 ff       	sbrs	r17, 7
    5dae:	98 b9       	out	0x08, r25	; 8
    5db0:	32 81       	ldd	r19, Z+2	; 0x02
    5db2:	00 27       	eor	r16, r16
    5db4:	88 94       	clc
    5db6:	00 c0       	rjmp	.+0      	; 0x5db8 <L_19696+0xe2>
    5db8:	00 c0       	rjmp	.+0      	; 0x5dba <L_19696+0xe4>
    5dba:	00 2c       	mov	r0, r0
    5dbc:	98 b9       	out	0x08, r25	; 8
    5dbe:	31 11       	cpse	r19, r1
    5dc0:	3e 0d       	add	r19, r14
    5dc2:	00 c0       	rjmp	.+0      	; 0x5dc4 <L_19696+0xee>
    5dc4:	00 2c       	mov	r0, r0
    5dc6:	b8 b8       	out	0x08, r11	; 8
    5dc8:	00 c0       	rjmp	.+0      	; 0x5dca <L_19696+0xf4>
    5dca:	16 ff       	sbrs	r17, 6
    5dcc:	98 b9       	out	0x08, r25	; 8
    5dce:	08 f4       	brcc	.+2      	; 0x5dd2 <L_20914>
    5dd0:	3f ef       	ldi	r19, 0xFF	; 255

00005dd2 <L_20914>:
    5dd2:	e7 0f       	add	r30, r23
    5dd4:	f1 1d       	adc	r31, r1
    5dd6:	00 c0       	rjmp	.+0      	; 0x5dd8 <L_20914+0x6>
    5dd8:	00 c0       	rjmp	.+0      	; 0x5dda <L_20914+0x8>
    5dda:	00 2c       	mov	r0, r0
    5ddc:	98 b9       	out	0x08, r25	; 8
    5dde:	50 fd       	sbrc	r21, 0
    5de0:	03 0f       	add	r16, r19
    5de2:	00 c0       	rjmp	.+0      	; 0x5de4 <L_20914+0x12>
    5de4:	00 2c       	mov	r0, r0
    5de6:	b8 b8       	out	0x08, r11	; 8
    5de8:	00 c0       	rjmp	.+0      	; 0x5dea <L_20914+0x18>
    5dea:	15 ff       	sbrs	r17, 5
    5dec:	98 b9       	out	0x08, r25	; 8
    5dee:	07 95       	ror	r16
    5df0:	88 94       	clc
    5df2:	51 fd       	sbrc	r21, 1
    5df4:	03 0f       	add	r16, r19
    5df6:	00 c0       	rjmp	.+0      	; 0x5df8 <L_20914+0x26>
    5df8:	00 c0       	rjmp	.+0      	; 0x5dfa <L_20914+0x28>
    5dfa:	00 2c       	mov	r0, r0
    5dfc:	98 b9       	out	0x08, r25	; 8
    5dfe:	07 95       	ror	r16
    5e00:	88 94       	clc
    5e02:	00 c0       	rjmp	.+0      	; 0x5e04 <L_20914+0x32>
    5e04:	00 2c       	mov	r0, r0
    5e06:	b8 b8       	out	0x08, r11	; 8
    5e08:	00 c0       	rjmp	.+0      	; 0x5e0a <L_20914+0x38>
    5e0a:	14 ff       	sbrs	r17, 4
    5e0c:	98 b9       	out	0x08, r25	; 8
    5e0e:	52 fd       	sbrc	r21, 2
    5e10:	03 0f       	add	r16, r19
    5e12:	07 95       	ror	r16
    5e14:	88 94       	clc
    5e16:	00 c0       	rjmp	.+0      	; 0x5e18 <L_20914+0x46>
    5e18:	00 c0       	rjmp	.+0      	; 0x5e1a <L_20914+0x48>
    5e1a:	00 2c       	mov	r0, r0
    5e1c:	98 b9       	out	0x08, r25	; 8
    5e1e:	53 fd       	sbrc	r21, 3
    5e20:	03 0f       	add	r16, r19
    5e22:	00 c0       	rjmp	.+0      	; 0x5e24 <L_20914+0x52>
    5e24:	00 2c       	mov	r0, r0
    5e26:	b8 b8       	out	0x08, r11	; 8
    5e28:	00 c0       	rjmp	.+0      	; 0x5e2a <L_20914+0x58>
    5e2a:	13 ff       	sbrs	r17, 3
    5e2c:	98 b9       	out	0x08, r25	; 8
    5e2e:	07 95       	ror	r16
    5e30:	88 94       	clc
    5e32:	54 fd       	sbrc	r21, 4
    5e34:	03 0f       	add	r16, r19
    5e36:	00 c0       	rjmp	.+0      	; 0x5e38 <L_20914+0x66>
    5e38:	00 c0       	rjmp	.+0      	; 0x5e3a <L_20914+0x68>
    5e3a:	00 2c       	mov	r0, r0
    5e3c:	98 b9       	out	0x08, r25	; 8
    5e3e:	07 95       	ror	r16
    5e40:	88 94       	clc
    5e42:	00 c0       	rjmp	.+0      	; 0x5e44 <L_20914+0x72>
    5e44:	00 2c       	mov	r0, r0
    5e46:	b8 b8       	out	0x08, r11	; 8
    5e48:	00 c0       	rjmp	.+0      	; 0x5e4a <L_20914+0x78>
    5e4a:	12 ff       	sbrs	r17, 2
    5e4c:	98 b9       	out	0x08, r25	; 8
    5e4e:	55 fd       	sbrc	r21, 5
    5e50:	03 0f       	add	r16, r19
    5e52:	07 95       	ror	r16
    5e54:	88 94       	clc
    5e56:	00 c0       	rjmp	.+0      	; 0x5e58 <L_20914+0x86>
    5e58:	00 c0       	rjmp	.+0      	; 0x5e5a <L_20914+0x88>
    5e5a:	00 2c       	mov	r0, r0
    5e5c:	98 b9       	out	0x08, r25	; 8
    5e5e:	56 fd       	sbrc	r21, 6
    5e60:	03 0f       	add	r16, r19
    5e62:	00 c0       	rjmp	.+0      	; 0x5e64 <L_20914+0x92>
    5e64:	00 2c       	mov	r0, r0
    5e66:	b8 b8       	out	0x08, r11	; 8
    5e68:	00 c0       	rjmp	.+0      	; 0x5e6a <L_20914+0x98>
    5e6a:	11 ff       	sbrs	r17, 1
    5e6c:	98 b9       	out	0x08, r25	; 8
    5e6e:	07 95       	ror	r16
    5e70:	88 94       	clc
    5e72:	57 fd       	sbrc	r21, 7
    5e74:	03 0f       	add	r16, r19
    5e76:	00 c0       	rjmp	.+0      	; 0x5e78 <L_20914+0xa6>
    5e78:	00 c0       	rjmp	.+0      	; 0x5e7a <L_20914+0xa8>
    5e7a:	00 2c       	mov	r0, r0
    5e7c:	98 b9       	out	0x08, r25	; 8
    5e7e:	07 95       	ror	r16
    5e80:	88 94       	clc
    5e82:	00 c0       	rjmp	.+0      	; 0x5e84 <L_20914+0xb2>
    5e84:	00 2c       	mov	r0, r0
    5e86:	b8 b8       	out	0x08, r11	; 8
    5e88:	00 c0       	rjmp	.+0      	; 0x5e8a <L_20914+0xb8>
    5e8a:	10 ff       	sbrs	r17, 0
    5e8c:	98 b9       	out	0x08, r25	; 8
    5e8e:	13 2f       	mov	r17, r19
    5e90:	51 11       	cpse	r21, r1
    5e92:	10 2f       	mov	r17, r16
    5e94:	e1 94       	neg	r14
    5e96:	00 c0       	rjmp	.+0      	; 0x5e98 <L_20914+0xc6>
    5e98:	00 c0       	rjmp	.+0      	; 0x5e9a <L_20914+0xc8>
    5e9a:	00 2c       	mov	r0, r0
    5e9c:	98 b9       	out	0x08, r25	; 8
    5e9e:	ed 0e       	add	r14, r29
    5ea0:	00 c0       	rjmp	.+0      	; 0x5ea2 <L_20914+0xd0>
    5ea2:	00 c0       	rjmp	.+0      	; 0x5ea4 <L_20914+0xd2>
    5ea4:	b8 b8       	out	0x08, r11	; 8
    5ea6:	00 c0       	rjmp	.+0      	; 0x5ea8 <L_20914+0xd6>
    5ea8:	17 ff       	sbrs	r17, 7
    5eaa:	98 b9       	out	0x08, r25	; 8
    5eac:	31 81       	ldd	r19, Z+1	; 0x01
    5eae:	00 27       	eor	r16, r16
    5eb0:	88 94       	clc
    5eb2:	00 c0       	rjmp	.+0      	; 0x5eb4 <L_20914+0xe2>
    5eb4:	00 c0       	rjmp	.+0      	; 0x5eb6 <L_20914+0xe4>
    5eb6:	00 2c       	mov	r0, r0
    5eb8:	98 b9       	out	0x08, r25	; 8
    5eba:	31 11       	cpse	r19, r1
    5ebc:	38 0f       	add	r19, r24
    5ebe:	00 c0       	rjmp	.+0      	; 0x5ec0 <L_20914+0xee>
    5ec0:	00 2c       	mov	r0, r0
    5ec2:	b8 b8       	out	0x08, r11	; 8
    5ec4:	00 c0       	rjmp	.+0      	; 0x5ec6 <L_20914+0xf4>
    5ec6:	16 ff       	sbrs	r17, 6
    5ec8:	98 b9       	out	0x08, r25	; 8
    5eca:	08 f4       	brcc	.+2      	; 0x5ece <L_22138>
    5ecc:	3f ef       	ldi	r19, 0xFF	; 255

00005ece <L_22138>:
    5ece:	81 95       	neg	r24
    5ed0:	88 94       	clc
    5ed2:	00 c0       	rjmp	.+0      	; 0x5ed4 <L_22138+0x6>
    5ed4:	00 c0       	rjmp	.+0      	; 0x5ed6 <L_22138+0x8>
    5ed6:	00 2c       	mov	r0, r0
    5ed8:	98 b9       	out	0x08, r25	; 8
    5eda:	90 fc       	sbrc	r9, 0
    5edc:	03 0f       	add	r16, r19
    5ede:	00 c0       	rjmp	.+0      	; 0x5ee0 <L_22138+0x12>
    5ee0:	00 2c       	mov	r0, r0
    5ee2:	b8 b8       	out	0x08, r11	; 8
    5ee4:	00 c0       	rjmp	.+0      	; 0x5ee6 <L_22138+0x18>
    5ee6:	15 ff       	sbrs	r17, 5
    5ee8:	98 b9       	out	0x08, r25	; 8
    5eea:	07 95       	ror	r16
    5eec:	88 94       	clc
    5eee:	91 fc       	sbrc	r9, 1
    5ef0:	03 0f       	add	r16, r19
    5ef2:	00 c0       	rjmp	.+0      	; 0x5ef4 <L_22138+0x26>
    5ef4:	00 c0       	rjmp	.+0      	; 0x5ef6 <L_22138+0x28>
    5ef6:	00 2c       	mov	r0, r0
    5ef8:	98 b9       	out	0x08, r25	; 8
    5efa:	07 95       	ror	r16
    5efc:	88 94       	clc
    5efe:	00 c0       	rjmp	.+0      	; 0x5f00 <L_22138+0x32>
    5f00:	00 2c       	mov	r0, r0
    5f02:	b8 b8       	out	0x08, r11	; 8
    5f04:	00 c0       	rjmp	.+0      	; 0x5f06 <L_22138+0x38>
    5f06:	14 ff       	sbrs	r17, 4
    5f08:	98 b9       	out	0x08, r25	; 8
    5f0a:	92 fc       	sbrc	r9, 2
    5f0c:	03 0f       	add	r16, r19
    5f0e:	07 95       	ror	r16
    5f10:	88 94       	clc
    5f12:	00 c0       	rjmp	.+0      	; 0x5f14 <L_22138+0x46>
    5f14:	00 c0       	rjmp	.+0      	; 0x5f16 <L_22138+0x48>
    5f16:	00 2c       	mov	r0, r0
    5f18:	98 b9       	out	0x08, r25	; 8
    5f1a:	93 fc       	sbrc	r9, 3
    5f1c:	03 0f       	add	r16, r19
    5f1e:	00 c0       	rjmp	.+0      	; 0x5f20 <L_22138+0x52>
    5f20:	00 2c       	mov	r0, r0
    5f22:	b8 b8       	out	0x08, r11	; 8
    5f24:	00 c0       	rjmp	.+0      	; 0x5f26 <L_22138+0x58>
    5f26:	13 ff       	sbrs	r17, 3
    5f28:	98 b9       	out	0x08, r25	; 8
    5f2a:	07 95       	ror	r16
    5f2c:	88 94       	clc
    5f2e:	94 fc       	sbrc	r9, 4
    5f30:	03 0f       	add	r16, r19
    5f32:	00 c0       	rjmp	.+0      	; 0x5f34 <L_22138+0x66>
    5f34:	00 c0       	rjmp	.+0      	; 0x5f36 <L_22138+0x68>
    5f36:	00 2c       	mov	r0, r0
    5f38:	98 b9       	out	0x08, r25	; 8
    5f3a:	07 95       	ror	r16
    5f3c:	88 94       	clc
    5f3e:	00 c0       	rjmp	.+0      	; 0x5f40 <L_22138+0x72>
    5f40:	00 2c       	mov	r0, r0
    5f42:	b8 b8       	out	0x08, r11	; 8
    5f44:	00 c0       	rjmp	.+0      	; 0x5f46 <L_22138+0x78>
    5f46:	12 ff       	sbrs	r17, 2
    5f48:	98 b9       	out	0x08, r25	; 8
    5f4a:	95 fc       	sbrc	r9, 5
    5f4c:	03 0f       	add	r16, r19
    5f4e:	07 95       	ror	r16
    5f50:	88 94       	clc
    5f52:	00 c0       	rjmp	.+0      	; 0x5f54 <L_22138+0x86>
    5f54:	00 c0       	rjmp	.+0      	; 0x5f56 <L_22138+0x88>
    5f56:	00 2c       	mov	r0, r0
    5f58:	98 b9       	out	0x08, r25	; 8
    5f5a:	96 fc       	sbrc	r9, 6
    5f5c:	03 0f       	add	r16, r19
    5f5e:	00 c0       	rjmp	.+0      	; 0x5f60 <L_22138+0x92>
    5f60:	00 2c       	mov	r0, r0
    5f62:	b8 b8       	out	0x08, r11	; 8
    5f64:	00 c0       	rjmp	.+0      	; 0x5f66 <L_22138+0x98>
    5f66:	11 ff       	sbrs	r17, 1
    5f68:	98 b9       	out	0x08, r25	; 8
    5f6a:	07 95       	ror	r16
    5f6c:	88 94       	clc
    5f6e:	97 fc       	sbrc	r9, 7
    5f70:	03 0f       	add	r16, r19
    5f72:	00 c0       	rjmp	.+0      	; 0x5f74 <L_22138+0xa6>
    5f74:	00 c0       	rjmp	.+0      	; 0x5f76 <L_22138+0xa8>
    5f76:	00 2c       	mov	r0, r0
    5f78:	98 b9       	out	0x08, r25	; 8
    5f7a:	07 95       	ror	r16
    5f7c:	88 94       	clc
    5f7e:	00 c0       	rjmp	.+0      	; 0x5f80 <L_22138+0xb2>
    5f80:	00 2c       	mov	r0, r0
    5f82:	b8 b8       	out	0x08, r11	; 8
    5f84:	00 c0       	rjmp	.+0      	; 0x5f86 <L_22138+0xb8>
    5f86:	10 ff       	sbrs	r17, 0
    5f88:	98 b9       	out	0x08, r25	; 8
    5f8a:	13 2f       	mov	r17, r19
    5f8c:	91 10       	cpse	r9, r1
    5f8e:	10 2f       	mov	r17, r16
    5f90:	86 0f       	add	r24, r22
    5f92:	00 c0       	rjmp	.+0      	; 0x5f94 <L_22138+0xc6>
    5f94:	00 c0       	rjmp	.+0      	; 0x5f96 <L_22138+0xc8>
    5f96:	00 2c       	mov	r0, r0
    5f98:	98 b9       	out	0x08, r25	; 8
    5f9a:	11 97       	sbiw	r26, 0x01	; 1
    5f9c:	09 f0       	breq	.+2      	; 0x5fa0 <L_23118>
    5f9e:	86 ce       	rjmp	.-756    	; 0x5cac <L_19163+0x50>

00005fa0 <L_23118>:
    5fa0:	df 91       	pop	r29
    5fa2:	cf 91       	pop	r28
    5fa4:	1f 91       	pop	r17
    5fa6:	0f 91       	pop	r16
    5fa8:	ff 90       	pop	r15
    5faa:	ef 90       	pop	r14
    5fac:	df 90       	pop	r13
    5fae:	cf 90       	pop	r12
    5fb0:	bf 90       	pop	r11
    5fb2:	af 90       	pop	r10
    5fb4:	9f 90       	pop	r9
    5fb6:	08 95       	ret

00005fb8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    5fb8:	0f 93       	push	r16
    5fba:	1f 93       	push	r17
    5fbc:	cf 93       	push	r28
    5fbe:	df 93       	push	r29
    5fc0:	ec 01       	movw	r28, r24
    5fc2:	8b 01       	movw	r16, r22
    5fc4:	0e 94 fd 44 	call	0x89fa	; 0x89fa <_micros>
    5fc8:	2f 85       	ldd	r18, Y+15	; 0x0f
    5fca:	38 89       	ldd	r19, Y+16	; 0x10
    5fcc:	62 1b       	sub	r22, r18
    5fce:	73 0b       	sbc	r23, r19
    5fd0:	6a 30       	cpi	r22, 0x0A	; 10
    5fd2:	71 05       	cpc	r23, r1
    5fd4:	b8 f3       	brcs	.-18     	; 0x5fc4 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    5fd6:	f8 94       	cli
    5fd8:	c8 01       	movw	r24, r16
    5fda:	09 de       	rcall	.-1006   	; 0x5bee <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    5fdc:	f8 01       	movw	r30, r16
    5fde:	42 81       	ldd	r20, Z+2	; 0x02
    5fe0:	53 81       	ldd	r21, Z+3	; 0x03
    5fe2:	20 ee       	ldi	r18, 0xE0	; 224
    5fe4:	31 e0       	ldi	r19, 0x01	; 1
    5fe6:	da 01       	movw	r26, r20
    5fe8:	0e 94 78 4e 	call	0x9cf0	; 0x9cf0 <__usmulhisi3>
    5fec:	dc 01       	movw	r26, r24
    5fee:	cb 01       	movw	r24, r22
    5ff0:	f4 e0       	ldi	r31, 0x04	; 4
    5ff2:	b6 95       	lsr	r27
    5ff4:	a7 95       	ror	r26
    5ff6:	97 95       	ror	r25
    5ff8:	87 95       	ror	r24
    5ffa:	fa 95       	dec	r31
    5ffc:	d1 f7       	brne	.-12     	; 0x5ff2 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    5ffe:	30 e0       	ldi	r19, 0x00	; 0
    6000:	20 e0       	ldi	r18, 0x00	; 0
    6002:	b9 01       	movw	r22, r18
    6004:	ea e9       	ldi	r30, 0x9A	; 154
    6006:	4e 9f       	mul	r20, r30
    6008:	04 0e       	add	r0, r20
    600a:	61 1d       	adc	r22, r1
    600c:	5e 9f       	mul	r21, r30
    600e:	60 0d       	add	r22, r0
    6010:	71 1d       	adc	r23, r1
    6012:	11 24       	eor	r1, r1
    6014:	65 0f       	add	r22, r21
    6016:	71 1d       	adc	r23, r1
    6018:	86 0f       	add	r24, r22
    601a:	97 1f       	adc	r25, r23
    601c:	a1 1d       	adc	r26, r1
    601e:	b1 1d       	adc	r27, r1
    6020:	89 3e       	cpi	r24, 0xE9	; 233
    6022:	f3 e0       	ldi	r31, 0x03	; 3
    6024:	9f 07       	cpc	r25, r31
    6026:	a1 05       	cpc	r26, r1
    6028:	b1 05       	cpc	r27, r1
    602a:	08 f4       	brcc	.+2      	; 0x602e <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    602c:	34 c0       	rjmp	.+104    	; 0x6096 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    602e:	88 5e       	subi	r24, 0xE8	; 232
    6030:	93 40       	sbci	r25, 0x03	; 3
    6032:	a1 09       	sbc	r26, r1
    6034:	b1 09       	sbc	r27, r1
    6036:	42 e0       	ldi	r20, 0x02	; 2
    6038:	b6 95       	lsr	r27
    603a:	a7 95       	ror	r26
    603c:	97 95       	ror	r25
    603e:	87 95       	ror	r24
    6040:	4a 95       	dec	r20
    6042:	d1 f7       	brne	.-12     	; 0x6038 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    6044:	47 e0       	ldi	r20, 0x07	; 7
    6046:	84 9f       	mul	r24, r20
    6048:	08 0e       	add	r0, r24
    604a:	21 1d       	adc	r18, r1
    604c:	94 9f       	mul	r25, r20
    604e:	20 0d       	add	r18, r0
    6050:	31 1d       	adc	r19, r1
    6052:	11 24       	eor	r1, r1
    6054:	29 0f       	add	r18, r25
    6056:	31 1d       	adc	r19, r1
    6058:	60 91 bd 10 	lds	r22, 0x10BD	; 0x8010bd <gTimeErrorAccum256ths>
    605c:	70 e0       	ldi	r23, 0x00	; 0
    605e:	86 0f       	add	r24, r22
    6060:	97 1f       	adc	r25, r23
    6062:	82 0f       	add	r24, r18
    6064:	93 1f       	adc	r25, r19
    6066:	40 91 dc 10 	lds	r20, 0x10DC	; 0x8010dc <timer0_millis_count>
    606a:	50 91 dd 10 	lds	r21, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    606e:	60 91 de 10 	lds	r22, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    6072:	70 91 df 10 	lds	r23, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    6076:	29 2f       	mov	r18, r25
    6078:	33 27       	eor	r19, r19
    607a:	42 0f       	add	r20, r18
    607c:	53 1f       	adc	r21, r19
    607e:	61 1d       	adc	r22, r1
    6080:	71 1d       	adc	r23, r1
    6082:	40 93 dc 10 	sts	0x10DC, r20	; 0x8010dc <timer0_millis_count>
    6086:	50 93 dd 10 	sts	0x10DD, r21	; 0x8010dd <timer0_millis_count+0x1>
    608a:	60 93 de 10 	sts	0x10DE, r22	; 0x8010de <timer0_millis_count+0x2>
    608e:	70 93 df 10 	sts	0x10DF, r23	; 0x8010df <timer0_millis_count+0x3>
    6092:	80 93 bd 10 	sts	0x10BD, r24	; 0x8010bd <gTimeErrorAccum256ths>
    6096:	78 94       	sei
    6098:	0e 94 fd 44 	call	0x89fa	; 0x89fa <_micros>
    609c:	78 8b       	std	Y+16, r23	; 0x10
    609e:	6f 87       	std	Y+15, r22	; 0x0f
    60a0:	df 91       	pop	r29
    60a2:	cf 91       	pop	r28
    60a4:	1f 91       	pop	r17
    60a6:	0f 91       	pop	r16
    60a8:	08 95       	ret

000060aa <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    60aa:	0f 93       	push	r16
    60ac:	1f 93       	push	r17
    60ae:	cf 93       	push	r28
    60b0:	df 93       	push	r29
    60b2:	20 91 e2 09 	lds	r18, 0x09E2	; 0x8009e2 <__data_end>
    60b6:	2f 5f       	subi	r18, 0xFF	; 255
    60b8:	32 2f       	mov	r19, r18
    60ba:	37 70       	andi	r19, 0x07	; 7
    60bc:	30 93 e2 09 	sts	0x09E2, r19	; 0x8009e2 <__data_end>
    60c0:	20 ff       	sbrs	r18, 0
    60c2:	2b c0       	rjmp	.+86     	; 0x611a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    60c4:	20 e8       	ldi	r18, 0x80	; 128
    60c6:	31 fd       	sbrc	r19, 1
    60c8:	20 64       	ori	r18, 0x40	; 64
    60ca:	34 70       	andi	r19, 0x04	; 4
    60cc:	09 f0       	breq	.+2      	; 0x60d0 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    60ce:	20 62       	ori	r18, 0x20	; 32
    60d0:	20 5f       	subi	r18, 0xF0	; 240
    60d2:	fc 01       	movw	r30, r24
    60d4:	ec 01       	movw	r28, r24
    60d6:	23 96       	adiw	r28, 0x03	; 3
    60d8:	00 e0       	ldi	r16, 0x00	; 0
    60da:	11 e0       	ldi	r17, 0x01	; 1
    60dc:	64 85       	ldd	r22, Z+12	; 0x0c
    60de:	66 23       	and	r22, r22
    60e0:	29 f0       	breq	.+10     	; 0x60ec <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    60e2:	70 e0       	ldi	r23, 0x00	; 0
    60e4:	c8 01       	movw	r24, r16
    60e6:	0e 94 0f 4e 	call	0x9c1e	; 0x9c1e <__divmodhi4>
    60ea:	6f 5f       	subi	r22, 0xFF	; 255
    60ec:	61 87       	std	Z+9, r22	; 0x09
    60ee:	32 2f       	mov	r19, r18
    60f0:	36 9f       	mul	r19, r22
    60f2:	03 0e       	add	r0, r19
    60f4:	30 e0       	ldi	r19, 0x00	; 0
    60f6:	31 1d       	adc	r19, r1
    60f8:	11 24       	eor	r1, r1
    60fa:	31 11       	cpse	r19, r1
    60fc:	10 c0       	rjmp	.+32     	; 0x611e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    60fe:	16 82       	std	Z+6, r1	; 0x06
    6100:	66 23       	and	r22, r22
    6102:	11 f0       	breq	.+4      	; 0x6108 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    6104:	61 50       	subi	r22, 0x01	; 1
    6106:	61 87       	std	Z+9, r22	; 0x09
    6108:	31 96       	adiw	r30, 0x01	; 1
    610a:	ec 17       	cp	r30, r28
    610c:	fd 07       	cpc	r31, r29
    610e:	31 f7       	brne	.-52     	; 0x60dc <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    6110:	df 91       	pop	r29
    6112:	cf 91       	pop	r28
    6114:	1f 91       	pop	r17
    6116:	0f 91       	pop	r16
    6118:	08 95       	ret
    611a:	20 e0       	ldi	r18, 0x00	; 0
    611c:	d4 cf       	rjmp	.-88     	; 0x60c6 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    611e:	31 50       	subi	r19, 0x01	; 1
    6120:	36 83       	std	Z+6, r19	; 0x06
    6122:	ee cf       	rjmp	.-36     	; 0x6100 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

00006124 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    6124:	0f 93       	push	r16
    6126:	1f 93       	push	r17
    6128:	cf 93       	push	r28
    612a:	df 93       	push	r29
    612c:	cd b7       	in	r28, 0x3d	; 61
    612e:	de b7       	in	r29, 0x3e	; 62
    6130:	62 97       	sbiw	r28, 0x12	; 18
    6132:	0f b6       	in	r0, 0x3f	; 63
    6134:	f8 94       	cli
    6136:	de bf       	out	0x3e, r29	; 62
    6138:	0f be       	out	0x3f, r0	; 63
    613a:	cd bf       	out	0x3d, r28	; 61
    613c:	8c 01       	movw	r16, r24
    613e:	f9 01       	movw	r30, r18
    6140:	dc 01       	movw	r26, r24
    6142:	1c 96       	adiw	r26, 0x0c	; 12
    6144:	8c 91       	ld	r24, X
    6146:	7a 83       	std	Y+2, r23	; 0x02
    6148:	69 83       	std	Y+1, r22	; 0x01
    614a:	5c 83       	std	Y+4, r21	; 0x04
    614c:	4b 83       	std	Y+3, r20	; 0x03
    614e:	5e 83       	std	Y+6, r21	; 0x06
    6150:	4d 83       	std	Y+5, r20	; 0x05
    6152:	90 81       	ld	r25, Z
    6154:	9d 87       	std	Y+13, r25	; 0x0d
    6156:	91 81       	ldd	r25, Z+1	; 0x01
    6158:	9e 87       	std	Y+14, r25	; 0x0e
    615a:	92 81       	ldd	r25, Z+2	; 0x02
    615c:	9f 87       	std	Y+15, r25	; 0x0f
    615e:	81 30       	cpi	r24, 0x01	; 1
    6160:	e9 f4       	brne	.+58     	; 0x619c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    6162:	ce 01       	movw	r24, r28
    6164:	01 96       	adiw	r24, 0x01	; 1
    6166:	a1 df       	rcall	.-190    	; 0x60aa <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    6168:	83 e0       	ldi	r24, 0x03	; 3
    616a:	88 8b       	std	Y+16, r24	; 0x10
    616c:	1a 8a       	std	Y+18, r1	; 0x12
    616e:	19 8a       	std	Y+17, r1	; 0x11
    6170:	d8 01       	movw	r26, r16
    6172:	ed 91       	ld	r30, X+
    6174:	fc 91       	ld	r31, X
    6176:	04 84       	ldd	r0, Z+12	; 0x0c
    6178:	f5 85       	ldd	r31, Z+13	; 0x0d
    617a:	e0 2d       	mov	r30, r0
    617c:	be 01       	movw	r22, r28
    617e:	6f 5f       	subi	r22, 0xFF	; 255
    6180:	7f 4f       	sbci	r23, 0xFF	; 255
    6182:	c8 01       	movw	r24, r16
    6184:	09 95       	icall
    6186:	62 96       	adiw	r28, 0x12	; 18
    6188:	0f b6       	in	r0, 0x3f	; 63
    618a:	f8 94       	cli
    618c:	de bf       	out	0x3e, r29	; 62
    618e:	0f be       	out	0x3f, r0	; 63
    6190:	cd bf       	out	0x3d, r28	; 61
    6192:	df 91       	pop	r29
    6194:	cf 91       	pop	r28
    6196:	1f 91       	pop	r17
    6198:	0f 91       	pop	r16
    619a:	08 95       	ret
    619c:	1c 86       	std	Y+12, r1	; 0x0c
    619e:	1b 86       	std	Y+11, r1	; 0x0b
    61a0:	1a 86       	std	Y+10, r1	; 0x0a
    61a2:	19 86       	std	Y+9, r1	; 0x09
    61a4:	18 86       	std	Y+8, r1	; 0x08
    61a6:	1f 82       	std	Y+7, r1	; 0x07
    61a8:	df cf       	rjmp	.-66     	; 0x6168 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

000061aa <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    61aa:	0f 93       	push	r16
    61ac:	1f 93       	push	r17
    61ae:	cf 93       	push	r28
    61b0:	df 93       	push	r29
    61b2:	cd b7       	in	r28, 0x3d	; 61
    61b4:	de b7       	in	r29, 0x3e	; 62
    61b6:	62 97       	sbiw	r28, 0x12	; 18
    61b8:	0f b6       	in	r0, 0x3f	; 63
    61ba:	f8 94       	cli
    61bc:	de bf       	out	0x3e, r29	; 62
    61be:	0f be       	out	0x3f, r0	; 63
    61c0:	cd bf       	out	0x3d, r28	; 61
    61c2:	8c 01       	movw	r16, r24
    61c4:	f9 01       	movw	r30, r18
    61c6:	dc 01       	movw	r26, r24
    61c8:	1c 96       	adiw	r26, 0x0c	; 12
    61ca:	8c 91       	ld	r24, X
    61cc:	7a 83       	std	Y+2, r23	; 0x02
    61ce:	69 83       	std	Y+1, r22	; 0x01
    61d0:	5c 83       	std	Y+4, r21	; 0x04
    61d2:	4b 83       	std	Y+3, r20	; 0x03
    61d4:	5e 83       	std	Y+6, r21	; 0x06
    61d6:	4d 83       	std	Y+5, r20	; 0x05
    61d8:	90 81       	ld	r25, Z
    61da:	9d 87       	std	Y+13, r25	; 0x0d
    61dc:	91 81       	ldd	r25, Z+1	; 0x01
    61de:	9e 87       	std	Y+14, r25	; 0x0e
    61e0:	92 81       	ldd	r25, Z+2	; 0x02
    61e2:	9f 87       	std	Y+15, r25	; 0x0f
    61e4:	81 30       	cpi	r24, 0x01	; 1
    61e6:	e1 f4       	brne	.+56     	; 0x6220 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    61e8:	ce 01       	movw	r24, r28
    61ea:	01 96       	adiw	r24, 0x01	; 1
    61ec:	5e df       	rcall	.-324    	; 0x60aa <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    61ee:	18 8a       	std	Y+16, r1	; 0x10
    61f0:	1a 8a       	std	Y+18, r1	; 0x12
    61f2:	19 8a       	std	Y+17, r1	; 0x11
    61f4:	d8 01       	movw	r26, r16
    61f6:	ed 91       	ld	r30, X+
    61f8:	fc 91       	ld	r31, X
    61fa:	04 84       	ldd	r0, Z+12	; 0x0c
    61fc:	f5 85       	ldd	r31, Z+13	; 0x0d
    61fe:	e0 2d       	mov	r30, r0
    6200:	be 01       	movw	r22, r28
    6202:	6f 5f       	subi	r22, 0xFF	; 255
    6204:	7f 4f       	sbci	r23, 0xFF	; 255
    6206:	c8 01       	movw	r24, r16
    6208:	09 95       	icall
    620a:	62 96       	adiw	r28, 0x12	; 18
    620c:	0f b6       	in	r0, 0x3f	; 63
    620e:	f8 94       	cli
    6210:	de bf       	out	0x3e, r29	; 62
    6212:	0f be       	out	0x3f, r0	; 63
    6214:	cd bf       	out	0x3d, r28	; 61
    6216:	df 91       	pop	r29
    6218:	cf 91       	pop	r28
    621a:	1f 91       	pop	r17
    621c:	0f 91       	pop	r16
    621e:	08 95       	ret
    6220:	1c 86       	std	Y+12, r1	; 0x0c
    6222:	1b 86       	std	Y+11, r1	; 0x0b
    6224:	1a 86       	std	Y+10, r1	; 0x0a
    6226:	19 86       	std	Y+9, r1	; 0x09
    6228:	18 86       	std	Y+8, r1	; 0x08
    622a:	1f 82       	std	Y+7, r1	; 0x07
    622c:	e0 cf       	rjmp	.-64     	; 0x61ee <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

0000622e <_GLOBAL__sub_I_matrix>:
    622e:	0f b6       	in	r0, 0x3f	; 63
    6230:	f8 94       	cli
    6232:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    6236:	90 91 dd 10 	lds	r25, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    623a:	a0 91 de 10 	lds	r26, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    623e:	b0 91 df 10 	lds	r27, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    6242:	0f be       	out	0x3f, r0	; 63
    6244:	90 93 b3 0a 	sts	0x0AB3, r25	; 0x800ab3 <lastLEDchange+0x1>
    6248:	80 93 b2 0a 	sts	0x0AB2, r24	; 0x800ab2 <lastLEDchange>
    624c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6250:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
    6254:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6258:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
    625c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6260:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
    6264:	69 ec       	ldi	r22, 0xC9	; 201
    6266:	75 e0       	ldi	r23, 0x05	; 5
    6268:	86 e2       	ldi	r24, 0x26	; 38
    626a:	9a e0       	ldi	r25, 0x0A	; 10
    626c:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    6270:	64 ec       	ldi	r22, 0xC4	; 196
    6272:	75 e0       	ldi	r23, 0x05	; 5
    6274:	8d e2       	ldi	r24, 0x2D	; 45
    6276:	9a e0       	ldi	r25, 0x0A	; 10
    6278:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    627c:	62 ec       	ldi	r22, 0xC2	; 194
    627e:	75 e0       	ldi	r23, 0x05	; 5
    6280:	84 e3       	ldi	r24, 0x34	; 52
    6282:	9a e0       	ldi	r25, 0x0A	; 10
    6284:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    6288:	6f eb       	ldi	r22, 0xBF	; 191
    628a:	75 e0       	ldi	r23, 0x05	; 5
    628c:	8b e3       	ldi	r24, 0x3B	; 59
    628e:	9a e0       	ldi	r25, 0x0A	; 10
    6290:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    6294:	6a eb       	ldi	r22, 0xBA	; 186
    6296:	75 e0       	ldi	r23, 0x05	; 5
    6298:	82 e4       	ldi	r24, 0x42	; 66
    629a:	9a e0       	ldi	r25, 0x0A	; 10
    629c:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62a0:	66 eb       	ldi	r22, 0xB6	; 182
    62a2:	75 e0       	ldi	r23, 0x05	; 5
    62a4:	89 e4       	ldi	r24, 0x49	; 73
    62a6:	9a e0       	ldi	r25, 0x0A	; 10
    62a8:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62ac:	60 eb       	ldi	r22, 0xB0	; 176
    62ae:	75 e0       	ldi	r23, 0x05	; 5
    62b0:	80 e5       	ldi	r24, 0x50	; 80
    62b2:	9a e0       	ldi	r25, 0x0A	; 10
    62b4:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62b8:	6d ea       	ldi	r22, 0xAD	; 173
    62ba:	75 e0       	ldi	r23, 0x05	; 5
    62bc:	87 e5       	ldi	r24, 0x57	; 87
    62be:	9a e0       	ldi	r25, 0x0A	; 10
    62c0:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62c4:	68 ea       	ldi	r22, 0xA8	; 168
    62c6:	75 e0       	ldi	r23, 0x05	; 5
    62c8:	8e e5       	ldi	r24, 0x5E	; 94
    62ca:	9a e0       	ldi	r25, 0x0A	; 10
    62cc:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62d0:	63 ea       	ldi	r22, 0xA3	; 163
    62d2:	75 e0       	ldi	r23, 0x05	; 5
    62d4:	85 e6       	ldi	r24, 0x65	; 101
    62d6:	9a e0       	ldi	r25, 0x0A	; 10
    62d8:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62dc:	6e e9       	ldi	r22, 0x9E	; 158
    62de:	75 e0       	ldi	r23, 0x05	; 5
    62e0:	8c ef       	ldi	r24, 0xFC	; 252
    62e2:	99 e0       	ldi	r25, 0x09	; 9
    62e4:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62e8:	67 e9       	ldi	r22, 0x97	; 151
    62ea:	75 e0       	ldi	r23, 0x05	; 5
    62ec:	83 e0       	ldi	r24, 0x03	; 3
    62ee:	9a e0       	ldi	r25, 0x0A	; 10
    62f0:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    62f4:	6e e8       	ldi	r22, 0x8E	; 142
    62f6:	75 e0       	ldi	r23, 0x05	; 5
    62f8:	8a e0       	ldi	r24, 0x0A	; 10
    62fa:	9a e0       	ldi	r25, 0x0A	; 10
    62fc:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    6300:	6a e8       	ldi	r22, 0x8A	; 138
    6302:	75 e0       	ldi	r23, 0x05	; 5
    6304:	81 e1       	ldi	r24, 0x11	; 17
    6306:	9a e0       	ldi	r25, 0x0A	; 10
    6308:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    630c:	66 e8       	ldi	r22, 0x86	; 134
    630e:	75 e0       	ldi	r23, 0x05	; 5
    6310:	88 e1       	ldi	r24, 0x18	; 24
    6312:	9a e0       	ldi	r25, 0x0A	; 10
    6314:	0e 94 28 4c 	call	0x9850	; 0x9850 <String::String(char const*)>
    6318:	6f e7       	ldi	r22, 0x7F	; 127
    631a:	75 e0       	ldi	r23, 0x05	; 5
    631c:	8f e1       	ldi	r24, 0x1F	; 31
    631e:	9a e0       	ldi	r25, 0x0A	; 10
    6320:	0c 94 28 4c 	jmp	0x9850	; 0x9850 <String::String(char const*)>

00006324 <_GLOBAL__sub_D_matrix>:
    6324:	cf 93       	push	r28
    6326:	df 93       	push	r29
    6328:	c6 e2       	ldi	r28, 0x26	; 38
    632a:	da e0       	ldi	r29, 0x0A	; 10
    632c:	27 97       	sbiw	r28, 0x07	; 7
    632e:	ce 01       	movw	r24, r28
    6330:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    6334:	89 e0       	ldi	r24, 0x09	; 9
    6336:	cc 3f       	cpi	r28, 0xFC	; 252
    6338:	d8 07       	cpc	r29, r24
    633a:	c1 f7       	brne	.-16     	; 0x632c <_GLOBAL__sub_D_matrix+0x8>
    633c:	cc e6       	ldi	r28, 0x6C	; 108
    633e:	da e0       	ldi	r29, 0x0A	; 10
    6340:	27 97       	sbiw	r28, 0x07	; 7
    6342:	ce 01       	movw	r24, r28
    6344:	0e 94 bf 4b 	call	0x977e	; 0x977e <String::~String()>
    6348:	8a e0       	ldi	r24, 0x0A	; 10
    634a:	c6 32       	cpi	r28, 0x26	; 38
    634c:	d8 07       	cpc	r29, r24
    634e:	c1 f7       	brne	.-16     	; 0x6340 <_GLOBAL__sub_D_matrix+0x1c>
    6350:	df 91       	pop	r29
    6352:	cf 91       	pop	r28
    6354:	08 95       	ret

00006356 <checkIncomingMIDI()>:
    6356:	87 ee       	ldi	r24, 0xE7	; 231
    6358:	90 e1       	ldi	r25, 0x10	; 16
    635a:	0e 94 2a 47 	call	0x8e54	; 0x8e54 <HardwareSerial::available()>
    635e:	89 2b       	or	r24, r25
    6360:	81 f0       	breq	.+32     	; 0x6382 <checkIncomingMIDI()+0x2c>
    6362:	87 ee       	ldi	r24, 0xE7	; 231
    6364:	90 e1       	ldi	r25, 0x10	; 16
    6366:	0e 94 5d 47 	call	0x8eba	; 0x8eba <HardwareSerial::read()>
    636a:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <incomingMidiByte>
    636e:	8f 3f       	cpi	r24, 0xFF	; 255
    6370:	41 f0       	breq	.+16     	; 0x6382 <checkIncomingMIDI()+0x2c>
    6372:	87 ff       	sbrs	r24, 7
    6374:	0d c0       	rjmp	.+26     	; 0x6390 <checkIncomingMIDI()+0x3a>
    6376:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <midiStatusByte>
    637a:	10 92 c5 0a 	sts	0x0AC5, r1	; 0x800ac5 <midiDataByte1>
    637e:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <midiDataByte2>
    6382:	87 ee       	ldi	r24, 0xE7	; 231
    6384:	90 e1       	ldi	r25, 0x10	; 16
    6386:	0e 94 2a 47 	call	0x8e54	; 0x8e54 <HardwareSerial::available()>
    638a:	89 2b       	or	r24, r25
    638c:	21 f7       	brne	.-56     	; 0x6356 <checkIncomingMIDI()>
    638e:	08 95       	ret
    6390:	90 91 c5 0a 	lds	r25, 0x0AC5	; 0x800ac5 <midiDataByte1>
    6394:	91 11       	cpse	r25, r1
    6396:	11 c0       	rjmp	.+34     	; 0x63ba <checkIncomingMIDI()+0x64>
    6398:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <midiDataByte1>
    639c:	80 91 c6 0a 	lds	r24, 0x0AC6	; 0x800ac6 <midiStatusByte>
    63a0:	89 3b       	cpi	r24, 0xB9	; 185
    63a2:	79 f7       	brne	.-34     	; 0x6382 <checkIncomingMIDI()+0x2c>
    63a4:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <midiDataByte1>
    63a8:	86 31       	cpi	r24, 0x16	; 22
    63aa:	71 f4       	brne	.+28     	; 0x63c8 <checkIncomingMIDI()+0x72>
    63ac:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <midiDataByte2>
    63b0:	88 23       	and	r24, r24
    63b2:	39 f3       	breq	.-50     	; 0x6382 <checkIncomingMIDI()+0x2c>
    63b4:	0e 94 34 18 	call	0x3068	; 0x3068 <switchToSong(unsigned char)>
    63b8:	e4 cf       	rjmp	.-56     	; 0x6382 <checkIncomingMIDI()+0x2c>
    63ba:	90 91 c4 0a 	lds	r25, 0x0AC4	; 0x800ac4 <midiDataByte2>
    63be:	91 11       	cpse	r25, r1
    63c0:	ed cf       	rjmp	.-38     	; 0x639c <checkIncomingMIDI()+0x46>
    63c2:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <midiDataByte2>
    63c6:	ea cf       	rjmp	.-44     	; 0x639c <checkIncomingMIDI()+0x46>
    63c8:	87 31       	cpi	r24, 0x17	; 23
    63ca:	d9 f6       	brne	.-74     	; 0x6382 <checkIncomingMIDI()+0x2c>
    63cc:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <midiDataByte2>
    63d0:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <switchToPart(unsigned char)>
    63d4:	d6 cf       	rjmp	.-84     	; 0x6382 <checkIncomingMIDI()+0x2c>

000063d6 <loop>:
    63d6:	8f 92       	push	r8
    63d8:	9f 92       	push	r9
    63da:	af 92       	push	r10
    63dc:	bf 92       	push	r11
    63de:	cf 92       	push	r12
    63e0:	df 92       	push	r13
    63e2:	ef 92       	push	r14
    63e4:	ff 92       	push	r15
    63e6:	0f 93       	push	r16
    63e8:	1f 93       	push	r17
    63ea:	cf 93       	push	r28
    63ec:	80 91 b4 0a 	lds	r24, 0x0AB4	; 0x800ab4 <ISR_USART_got_a_byte>
    63f0:	88 23       	and	r24, r24
    63f2:	41 f0       	breq	.+16     	; 0x6404 <loop+0x2e>
    63f4:	60 91 b5 0a 	lds	r22, 0x0AB5	; 0x800ab5 <ISR_received_USART_byte>
    63f8:	8c e5       	ldi	r24, 0x5C	; 92
    63fa:	91 e1       	ldi	r25, 0x11	; 17
    63fc:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Print::println(unsigned char)>
    6400:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <ISR_USART_got_a_byte>
    6404:	80 91 b6 0a 	lds	r24, 0x0AB6	; 0x800ab6 <OneSecondHasPast>
    6408:	88 23       	and	r24, r24
    640a:	39 f0       	breq	.+14     	; 0x641a <loop+0x44>
    640c:	80 91 c1 0a 	lds	r24, 0x0AC1	; 0x800ac1 <secondsForVoltage>
    6410:	8f 5f       	subi	r24, 0xFF	; 255
    6412:	80 93 c1 0a 	sts	0x0AC1, r24	; 0x800ac1 <secondsForVoltage>
    6416:	10 92 b6 0a 	sts	0x0AB6, r1	; 0x800ab6 <OneSecondHasPast>
    641a:	80 91 c1 0a 	lds	r24, 0x0AC1	; 0x800ac1 <secondsForVoltage>
    641e:	88 23       	and	r24, r24
    6420:	09 f4       	brne	.+2      	; 0x6424 <loop+0x4e>
    6422:	46 c0       	rjmp	.+140    	; 0x64b0 <loop+0xda>
    6424:	c0 91 c3 0a 	lds	r28, 0x0AC3	; 0x800ac3 <voltageSmooth>
    6428:	10 92 c1 0a 	sts	0x0AC1, r1	; 0x800ac1 <secondsForVoltage>
    642c:	88 e2       	ldi	r24, 0x28	; 40
    642e:	0e 94 45 43 	call	0x868a	; 0x868a <analogRead>
    6432:	bc 01       	movw	r22, r24
    6434:	99 0f       	add	r25, r25
    6436:	88 0b       	sbc	r24, r24
    6438:	99 0b       	sbc	r25, r25
    643a:	1f 92       	push	r1
    643c:	1f 92       	push	r1
    643e:	1f 92       	push	r1
    6440:	28 e7       	ldi	r18, 0x78	; 120
    6442:	2f 93       	push	r18
    6444:	a1 2c       	mov	r10, r1
    6446:	b1 2c       	mov	r11, r1
    6448:	65 01       	movw	r12, r10
    644a:	ee 24       	eor	r14, r14
    644c:	ea 94       	dec	r14
    644e:	13 e0       	ldi	r17, 0x03	; 3
    6450:	f1 2e       	mov	r15, r17
    6452:	00 e0       	ldi	r16, 0x00	; 0
    6454:	10 e0       	ldi	r17, 0x00	; 0
    6456:	20 e0       	ldi	r18, 0x00	; 0
    6458:	30 e0       	ldi	r19, 0x00	; 0
    645a:	a9 01       	movw	r20, r18
    645c:	0e 94 80 4b 	call	0x9700	; 0x9700 <map(long, long, long, long, long)>
    6460:	4b 01       	movw	r8, r22
    6462:	5c 01       	movw	r10, r24
    6464:	6c 2f       	mov	r22, r28
    6466:	70 e0       	ldi	r23, 0x00	; 0
    6468:	90 e0       	ldi	r25, 0x00	; 0
    646a:	80 e0       	ldi	r24, 0x00	; 0
    646c:	0e 94 fd 4c 	call	0x99fa	; 0x99fa <__floatsisf>
    6470:	23 e3       	ldi	r18, 0x33	; 51
    6472:	33 e3       	ldi	r19, 0x33	; 51
    6474:	43 e3       	ldi	r20, 0x33	; 51
    6476:	5f e3       	ldi	r21, 0x3F	; 63
    6478:	0e 94 89 4d 	call	0x9b12	; 0x9b12 <__mulsf3>
    647c:	6b 01       	movw	r12, r22
    647e:	7c 01       	movw	r14, r24
    6480:	c5 01       	movw	r24, r10
    6482:	b4 01       	movw	r22, r8
    6484:	0e 94 fd 4c 	call	0x99fa	; 0x99fa <__floatsisf>
    6488:	2a e9       	ldi	r18, 0x9A	; 154
    648a:	39 e9       	ldi	r19, 0x99	; 153
    648c:	49 e9       	ldi	r20, 0x99	; 153
    648e:	5e e3       	ldi	r21, 0x3E	; 62
    6490:	0e 94 89 4d 	call	0x9b12	; 0x9b12 <__mulsf3>
    6494:	9b 01       	movw	r18, r22
    6496:	ac 01       	movw	r20, r24
    6498:	c7 01       	movw	r24, r14
    649a:	b6 01       	movw	r22, r12
    649c:	0e 94 6b 4c 	call	0x98d6	; 0x98d6 <__addsf3>
    64a0:	0e 94 cf 4c 	call	0x999e	; 0x999e <__fixunssfsi>
    64a4:	60 93 c3 0a 	sts	0x0AC3, r22	; 0x800ac3 <voltageSmooth>
    64a8:	0f 90       	pop	r0
    64aa:	0f 90       	pop	r0
    64ac:	0f 90       	pop	r0
    64ae:	0f 90       	pop	r0
    64b0:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <voltageSmooth>
    64b4:	87 36       	cpi	r24, 0x67	; 103
    64b6:	08 f4       	brcc	.+2      	; 0x64ba <loop+0xe4>
    64b8:	6a c0       	rjmp	.+212    	; 0x658e <loop+0x1b8>
    64ba:	4d df       	rcall	.-358    	; 0x6356 <checkIncomingMIDI()>
    64bc:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <flag_processFastLED>
    64c0:	88 23       	and	r24, r24
    64c2:	29 f1       	breq	.+74     	; 0x650e <loop+0x138>
    64c4:	8f e0       	ldi	r24, 0x0F	; 15
    64c6:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    64ca:	e0 91 cc 0a 	lds	r30, 0x0ACC	; 0x800acc <songID>
    64ce:	e1 50       	subi	r30, 0x01	; 1
    64d0:	e4 31       	cpi	r30, 0x14	; 20
    64d2:	c8 f4       	brcc	.+50     	; 0x6506 <loop+0x130>
    64d4:	f0 e0       	ldi	r31, 0x00	; 0
    64d6:	e1 59       	subi	r30, 0x91	; 145
    64d8:	fd 4c       	sbci	r31, 0xCD	; 205
    64da:	0c 94 60 4e 	jmp	0x9cc0	; 0x9cc0 <__tablejump2__>
    64de:	93 32       	cpi	r25, 0x23	; 35
    64e0:	96 32       	cpi	r25, 0x26	; 38
    64e2:	99 32       	cpi	r25, 0x29	; 41
    64e4:	9c 32       	cpi	r25, 0x2C	; 44
    64e6:	9f 32       	cpi	r25, 0x2F	; 47
    64e8:	a2 32       	cpi	r26, 0x22	; 34
    64ea:	a5 32       	cpi	r26, 0x25	; 37
    64ec:	a8 32       	cpi	r26, 0x28	; 40
    64ee:	ab 32       	cpi	r26, 0x2B	; 43
    64f0:	ae 32       	cpi	r26, 0x2E	; 46
    64f2:	b1 32       	cpi	r27, 0x21	; 33
    64f4:	b4 32       	cpi	r27, 0x24	; 36
    64f6:	b7 32       	cpi	r27, 0x27	; 39
    64f8:	ba 32       	cpi	r27, 0x2A	; 42
    64fa:	bd 32       	cpi	r27, 0x2D	; 45
    64fc:	c0 32       	cpi	r28, 0x20	; 32
    64fe:	c3 32       	cpi	r28, 0x23	; 35
    6500:	c5 32       	cpi	r28, 0x25	; 37
    6502:	83 32       	cpi	r24, 0x23	; 35
    6504:	b7 32       	cpi	r27, 0x27	; 39
    6506:	0e 94 2c 19 	call	0x3258	; 0x3258 <defaultLoop()>
    650a:	10 92 ba 0a 	sts	0x0ABA, r1	; 0x800aba <flag_processFastLED>
    650e:	cf 91       	pop	r28
    6510:	1f 91       	pop	r17
    6512:	0f 91       	pop	r16
    6514:	ff 90       	pop	r15
    6516:	ef 90       	pop	r14
    6518:	df 90       	pop	r13
    651a:	cf 90       	pop	r12
    651c:	bf 90       	pop	r11
    651e:	af 90       	pop	r10
    6520:	9f 90       	pop	r9
    6522:	8f 90       	pop	r8
    6524:	08 95       	ret
    6526:	0e 94 d7 19 	call	0x33ae	; 0x33ae <LearnToFly()>
    652a:	ef cf       	rjmp	.-34     	; 0x650a <loop+0x134>
    652c:	0e 94 9c 1a 	call	0x3538	; 0x3538 <Castle()>
    6530:	ec cf       	rjmp	.-40     	; 0x650a <loop+0x134>
    6532:	0e 94 e3 1b 	call	0x37c6	; 0x37c6 <TooClose()>
    6536:	e9 cf       	rjmp	.-46     	; 0x650a <loop+0x134>
    6538:	0e 94 be 1c 	call	0x397c	; 0x397c <Pokerface()>
    653c:	e6 cf       	rjmp	.-52     	; 0x650a <loop+0x134>
    653e:	0e 94 a5 1d 	call	0x3b4a	; 0x3b4a <UseSomebody()>
    6542:	e3 cf       	rjmp	.-58     	; 0x650a <loop+0x134>
    6544:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <NoRoots()>
    6548:	e0 cf       	rjmp	.-64     	; 0x650a <loop+0x134>
    654a:	0e 94 cb 1f 	call	0x3f96	; 0x3f96 <Firework()>
    654e:	dd cf       	rjmp	.-70     	; 0x650a <loop+0x134>
    6550:	0e 94 09 21 	call	0x4212	; 0x4212 <Diamonds()>
    6554:	da cf       	rjmp	.-76     	; 0x650a <loop+0x134>
    6556:	0e 94 d2 21 	call	0x43a4	; 0x43a4 <SetFire()>
    655a:	d7 cf       	rjmp	.-82     	; 0x650a <loop+0x134>
    655c:	0e 94 b0 22 	call	0x4560	; 0x4560 <Chandelier()>
    6560:	d4 cf       	rjmp	.-88     	; 0x650a <loop+0x134>
    6562:	0e 94 98 23 	call	0x4730	; 0x4730 <Titanium()>
    6566:	d1 cf       	rjmp	.-94     	; 0x650a <loop+0x134>
    6568:	0e 94 6d 24 	call	0x48da	; 0x48da <SomeoneYouLoved()>
    656c:	ce cf       	rjmp	.-100    	; 0x650a <loop+0x134>
    656e:	0e 94 55 25 	call	0x4aaa	; 0x4aaa <ShouldntStop()>
    6572:	cb cf       	rjmp	.-106    	; 0x650a <loop+0x134>
    6574:	0e 94 3d 26 	call	0x4c7a	; 0x4c7a <SunAlwaysShinesOnTV()>
    6578:	c8 cf       	rjmp	.-112    	; 0x650a <loop+0x134>
    657a:	0e 94 53 28 	call	0x50a6	; 0x50a6 <peopleArePeople()>
    657e:	c5 cf       	rjmp	.-118    	; 0x650a <loop+0x134>
    6580:	0e 94 10 2a 	call	0x5420	; 0x5420 <enjoyTheSilence()>
    6584:	c2 cf       	rjmp	.-124    	; 0x650a <loop+0x134>
    6586:	99 d8       	rcall	.-3790   	; 0x56ba <sober()>
    6588:	c0 cf       	rjmp	.-128    	; 0x650a <loop+0x134>
    658a:	e4 d9       	rcall	.-3128   	; 0x5954 <prisoner()>
    658c:	be cf       	rjmp	.-132    	; 0x650a <loop+0x134>
    658e:	60 e0       	ldi	r22, 0x00	; 0
    6590:	8c ec       	ldi	r24, 0xCC	; 204
    6592:	90 e1       	ldi	r25, 0x10	; 16
    6594:	0e 94 89 3f 	call	0x7f12	; 0x7f12 <CFastLED::clear(bool)>
    6598:	8c ec       	ldi	r24, 0xCC	; 204
    659a:	90 e1       	ldi	r25, 0x10	; 16
    659c:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    65a0:	64 ef       	ldi	r22, 0xF4	; 244
    65a2:	71 e0       	ldi	r23, 0x01	; 1
    65a4:	80 e0       	ldi	r24, 0x00	; 0
    65a6:	90 e0       	ldi	r25, 0x00	; 0
    65a8:	0e 94 dd 44 	call	0x89ba	; 0x89ba <delay>
    65ac:	8f e0       	ldi	r24, 0x0F	; 15
    65ae:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    65b2:	8f ef       	ldi	r24, 0xFF	; 255
    65b4:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <leds>
    65b8:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <leds+0x1>
    65bc:	10 92 cf 0a 	sts	0x0ACF, r1	; 0x800acf <leds+0x2>
    65c0:	8c ec       	ldi	r24, 0xCC	; 204
    65c2:	90 e1       	ldi	r25, 0x10	; 16
    65c4:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    65c8:	64 ef       	ldi	r22, 0xF4	; 244
    65ca:	71 e0       	ldi	r23, 0x01	; 1
    65cc:	80 e0       	ldi	r24, 0x00	; 0
    65ce:	90 e0       	ldi	r25, 0x00	; 0
    65d0:	cf 91       	pop	r28
    65d2:	1f 91       	pop	r17
    65d4:	0f 91       	pop	r16
    65d6:	ff 90       	pop	r15
    65d8:	ef 90       	pop	r14
    65da:	df 90       	pop	r13
    65dc:	cf 90       	pop	r12
    65de:	bf 90       	pop	r11
    65e0:	af 90       	pop	r10
    65e2:	9f 90       	pop	r9
    65e4:	8f 90       	pop	r8
    65e6:	0c 94 dd 44 	jmp	0x89ba	; 0x89ba <delay>

000065ea <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    65ea:	90 e0       	ldi	r25, 0x00	; 0
    65ec:	80 e0       	ldi	r24, 0x00	; 0
    65ee:	08 95       	ret

000065f0 <Print::flush()>:
    65f0:	08 95       	ret

000065f2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    65f2:	2f 92       	push	r2
    65f4:	3f 92       	push	r3
    65f6:	4f 92       	push	r4
    65f8:	5f 92       	push	r5
    65fa:	6f 92       	push	r6
    65fc:	7f 92       	push	r7
    65fe:	8f 92       	push	r8
    6600:	9f 92       	push	r9
    6602:	af 92       	push	r10
    6604:	bf 92       	push	r11
    6606:	cf 92       	push	r12
    6608:	df 92       	push	r13
    660a:	ef 92       	push	r14
    660c:	ff 92       	push	r15
    660e:	0f 93       	push	r16
    6610:	1f 93       	push	r17
    6612:	cf 93       	push	r28
    6614:	df 93       	push	r29
    6616:	00 d0       	rcall	.+0      	; 0x6618 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    6618:	00 d0       	rcall	.+0      	; 0x661a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    661a:	00 d0       	rcall	.+0      	; 0x661c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    661c:	cd b7       	in	r28, 0x3d	; 61
    661e:	de b7       	in	r29, 0x3e	; 62
    6620:	3c 01       	movw	r6, r24
    6622:	6a 01       	movw	r12, r20
    6624:	3e 83       	std	Y+6, r19	; 0x06
    6626:	2d 83       	std	Y+5, r18	; 0x05
    6628:	fc 82       	std	Y+4, r15	; 0x04
    662a:	eb 82       	std	Y+3, r14	; 0x03
    662c:	58 01       	movw	r10, r16
    662e:	a4 1a       	sub	r10, r20
    6630:	b5 0a       	sbc	r11, r21
    6632:	b7 fe       	sbrs	r11, 7
    6634:	03 c0       	rjmp	.+6      	; 0x663c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    6636:	b1 94       	neg	r11
    6638:	a1 94       	neg	r10
    663a:	b1 08       	sbc	r11, r1
    663c:	8d 80       	ldd	r8, Y+5	; 0x05
    663e:	9e 80       	ldd	r9, Y+6	; 0x06
    6640:	86 1a       	sub	r8, r22
    6642:	97 0a       	sbc	r9, r23
    6644:	97 fe       	sbrs	r9, 7
    6646:	03 c0       	rjmp	.+6      	; 0x664e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    6648:	91 94       	neg	r9
    664a:	81 94       	neg	r8
    664c:	91 08       	sbc	r9, r1
    664e:	8a 14       	cp	r8, r10
    6650:	9b 04       	cpc	r9, r11
    6652:	5c f0       	brlt	.+22     	; 0x666a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    6654:	90 2f       	mov	r25, r16
    6656:	81 2f       	mov	r24, r17
    6658:	0d 81       	ldd	r16, Y+5	; 0x05
    665a:	1e 81       	ldd	r17, Y+6	; 0x06
    665c:	9d 83       	std	Y+5, r25	; 0x05
    665e:	8e 83       	std	Y+6, r24	; 0x06
    6660:	9c 2d       	mov	r25, r12
    6662:	8d 2d       	mov	r24, r13
    6664:	6b 01       	movw	r12, r22
    6666:	69 2f       	mov	r22, r25
    6668:	78 2f       	mov	r23, r24
    666a:	0c 15       	cp	r16, r12
    666c:	1d 05       	cpc	r17, r13
    666e:	5c f0       	brlt	.+22     	; 0x6686 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    6670:	9d 81       	ldd	r25, Y+5	; 0x05
    6672:	8e 81       	ldd	r24, Y+6	; 0x06
    6674:	7e 83       	std	Y+6, r23	; 0x06
    6676:	6d 83       	std	Y+5, r22	; 0x05
    6678:	69 2f       	mov	r22, r25
    667a:	78 2f       	mov	r23, r24
    667c:	90 2f       	mov	r25, r16
    667e:	81 2f       	mov	r24, r17
    6680:	86 01       	movw	r16, r12
    6682:	c9 2e       	mov	r12, r25
    6684:	d8 2e       	mov	r13, r24
    6686:	16 01       	movw	r2, r12
    6688:	20 1a       	sub	r2, r16
    668a:	31 0a       	sbc	r3, r17
    668c:	2b 01       	movw	r4, r22
    668e:	2d 81       	ldd	r18, Y+5	; 0x05
    6690:	3e 81       	ldd	r19, Y+6	; 0x06
    6692:	42 1a       	sub	r4, r18
    6694:	53 0a       	sbc	r5, r19
    6696:	57 fe       	sbrs	r5, 7
    6698:	03 c0       	rjmp	.+6      	; 0x66a0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    669a:	51 94       	neg	r5
    669c:	41 94       	neg	r4
    669e:	51 08       	sbc	r5, r1
    66a0:	71 01       	movw	r14, r2
    66a2:	37 fe       	sbrs	r3, 7
    66a4:	03 c0       	rjmp	.+6      	; 0x66ac <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    66a6:	3f ef       	ldi	r19, 0xFF	; 255
    66a8:	e3 1a       	sub	r14, r19
    66aa:	f3 0a       	sbc	r15, r19
    66ac:	f5 94       	asr	r15
    66ae:	e7 94       	ror	r14
    66b0:	8d 81       	ldd	r24, Y+5	; 0x05
    66b2:	9e 81       	ldd	r25, Y+6	; 0x06
    66b4:	86 17       	cp	r24, r22
    66b6:	97 07       	cpc	r25, r23
    66b8:	5c f5       	brge	.+86     	; 0x6710 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    66ba:	a1 e0       	ldi	r26, 0x01	; 1
    66bc:	b0 e0       	ldi	r27, 0x00	; 0
    66be:	ba 83       	std	Y+2, r27	; 0x02
    66c0:	a9 83       	std	Y+1, r26	; 0x01
    66c2:	c0 16       	cp	r12, r16
    66c4:	d1 06       	cpc	r13, r17
    66c6:	4c f1       	brlt	.+82     	; 0x671a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    66c8:	d3 01       	movw	r26, r6
    66ca:	ed 91       	ld	r30, X+
    66cc:	fc 91       	ld	r31, X
    66ce:	04 84       	ldd	r0, Z+12	; 0x0c
    66d0:	f5 85       	ldd	r31, Z+13	; 0x0d
    66d2:	e0 2d       	mov	r30, r0
    66d4:	2b 81       	ldd	r18, Y+3	; 0x03
    66d6:	3c 81       	ldd	r19, Y+4	; 0x04
    66d8:	a8 01       	movw	r20, r16
    66da:	6d 81       	ldd	r22, Y+5	; 0x05
    66dc:	7e 81       	ldd	r23, Y+6	; 0x06
    66de:	8a 14       	cp	r8, r10
    66e0:	9b 04       	cpc	r9, r11
    66e2:	1c f0       	brlt	.+6      	; 0x66ea <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    66e4:	4d 81       	ldd	r20, Y+5	; 0x05
    66e6:	5e 81       	ldd	r21, Y+6	; 0x06
    66e8:	b8 01       	movw	r22, r16
    66ea:	c3 01       	movw	r24, r6
    66ec:	09 95       	icall
    66ee:	e4 18       	sub	r14, r4
    66f0:	f5 08       	sbc	r15, r5
    66f2:	f7 fe       	sbrs	r15, 7
    66f4:	0a c0       	rjmp	.+20     	; 0x670a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    66f6:	2d 81       	ldd	r18, Y+5	; 0x05
    66f8:	3e 81       	ldd	r19, Y+6	; 0x06
    66fa:	89 81       	ldd	r24, Y+1	; 0x01
    66fc:	9a 81       	ldd	r25, Y+2	; 0x02
    66fe:	28 0f       	add	r18, r24
    6700:	39 1f       	adc	r19, r25
    6702:	3e 83       	std	Y+6, r19	; 0x06
    6704:	2d 83       	std	Y+5, r18	; 0x05
    6706:	e2 0c       	add	r14, r2
    6708:	f3 1c       	adc	r15, r3
    670a:	0f 5f       	subi	r16, 0xFF	; 255
    670c:	1f 4f       	sbci	r17, 0xFF	; 255
    670e:	d9 cf       	rjmp	.-78     	; 0x66c2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    6710:	2f ef       	ldi	r18, 0xFF	; 255
    6712:	3f ef       	ldi	r19, 0xFF	; 255
    6714:	3a 83       	std	Y+2, r19	; 0x02
    6716:	29 83       	std	Y+1, r18	; 0x01
    6718:	d4 cf       	rjmp	.-88     	; 0x66c2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    671a:	26 96       	adiw	r28, 0x06	; 6
    671c:	0f b6       	in	r0, 0x3f	; 63
    671e:	f8 94       	cli
    6720:	de bf       	out	0x3e, r29	; 62
    6722:	0f be       	out	0x3f, r0	; 63
    6724:	cd bf       	out	0x3d, r28	; 61
    6726:	df 91       	pop	r29
    6728:	cf 91       	pop	r28
    672a:	1f 91       	pop	r17
    672c:	0f 91       	pop	r16
    672e:	ff 90       	pop	r15
    6730:	ef 90       	pop	r14
    6732:	df 90       	pop	r13
    6734:	cf 90       	pop	r12
    6736:	bf 90       	pop	r11
    6738:	af 90       	pop	r10
    673a:	9f 90       	pop	r9
    673c:	8f 90       	pop	r8
    673e:	7f 90       	pop	r7
    6740:	6f 90       	pop	r6
    6742:	5f 90       	pop	r5
    6744:	4f 90       	pop	r4
    6746:	3f 90       	pop	r3
    6748:	2f 90       	pop	r2
    674a:	08 95       	ret

0000674c <Adafruit_GFX::startWrite()>:
    674c:	08 95       	ret

0000674e <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    674e:	dc 01       	movw	r26, r24
    6750:	ed 91       	ld	r30, X+
    6752:	fc 91       	ld	r31, X
    6754:	00 84       	ldd	r0, Z+8	; 0x08
    6756:	f1 85       	ldd	r31, Z+9	; 0x09
    6758:	e0 2d       	mov	r30, r0
    675a:	09 94       	ijmp

0000675c <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    675c:	0f 93       	push	r16
    675e:	1f 93       	push	r17
    6760:	dc 01       	movw	r26, r24
    6762:	ed 91       	ld	r30, X+
    6764:	fc 91       	ld	r31, X
    6766:	04 8c       	ldd	r0, Z+28	; 0x1c
    6768:	f5 8d       	ldd	r31, Z+29	; 0x1d
    676a:	e0 2d       	mov	r30, r0
    676c:	09 95       	icall
    676e:	1f 91       	pop	r17
    6770:	0f 91       	pop	r16
    6772:	08 95       	ret

00006774 <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    6774:	0f 93       	push	r16
    6776:	1f 93       	push	r17
    6778:	dc 01       	movw	r26, r24
    677a:	ed 91       	ld	r30, X+
    677c:	fc 91       	ld	r31, X
    677e:	06 8c       	ldd	r0, Z+30	; 0x1e
    6780:	f7 8d       	ldd	r31, Z+31	; 0x1f
    6782:	e0 2d       	mov	r30, r0
    6784:	09 95       	icall
    6786:	1f 91       	pop	r17
    6788:	0f 91       	pop	r16
    678a:	08 95       	ret

0000678c <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    678c:	ef 92       	push	r14
    678e:	ff 92       	push	r15
    6790:	0f 93       	push	r16
    6792:	1f 93       	push	r17
    6794:	dc 01       	movw	r26, r24
    6796:	ed 91       	ld	r30, X+
    6798:	fc 91       	ld	r31, X
    679a:	00 a0       	ldd	r0, Z+32	; 0x20
    679c:	f1 a1       	ldd	r31, Z+33	; 0x21
    679e:	e0 2d       	mov	r30, r0
    67a0:	09 95       	icall
    67a2:	1f 91       	pop	r17
    67a4:	0f 91       	pop	r16
    67a6:	ff 90       	pop	r15
    67a8:	ef 90       	pop	r14
    67aa:	08 95       	ret

000067ac <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    67ac:	8f 92       	push	r8
    67ae:	9f 92       	push	r9
    67b0:	af 92       	push	r10
    67b2:	bf 92       	push	r11
    67b4:	cf 92       	push	r12
    67b6:	df 92       	push	r13
    67b8:	ef 92       	push	r14
    67ba:	ff 92       	push	r15
    67bc:	0f 93       	push	r16
    67be:	1f 93       	push	r17
    67c0:	cf 93       	push	r28
    67c2:	df 93       	push	r29
    67c4:	ec 01       	movw	r28, r24
    67c6:	5b 01       	movw	r10, r22
    67c8:	4a 01       	movw	r8, r20
    67ca:	69 01       	movw	r12, r18
    67cc:	78 01       	movw	r14, r16
    67ce:	e8 81       	ld	r30, Y
    67d0:	f9 81       	ldd	r31, Y+1	; 0x01
    67d2:	02 84       	ldd	r0, Z+10	; 0x0a
    67d4:	f3 85       	ldd	r31, Z+11	; 0x0b
    67d6:	e0 2d       	mov	r30, r0
    67d8:	09 95       	icall
    67da:	c8 0c       	add	r12, r8
    67dc:	d9 1c       	adc	r13, r9
    67de:	86 01       	movw	r16, r12
    67e0:	01 50       	subi	r16, 0x01	; 1
    67e2:	11 09       	sbc	r17, r1
    67e4:	e8 81       	ld	r30, Y
    67e6:	f9 81       	ldd	r31, Y+1	; 0x01
    67e8:	04 88       	ldd	r0, Z+20	; 0x14
    67ea:	f5 89       	ldd	r31, Z+21	; 0x15
    67ec:	e0 2d       	mov	r30, r0
    67ee:	95 01       	movw	r18, r10
    67f0:	a4 01       	movw	r20, r8
    67f2:	b5 01       	movw	r22, r10
    67f4:	ce 01       	movw	r24, r28
    67f6:	09 95       	icall
    67f8:	e8 81       	ld	r30, Y
    67fa:	f9 81       	ldd	r31, Y+1	; 0x01
    67fc:	06 88       	ldd	r0, Z+22	; 0x16
    67fe:	f7 89       	ldd	r31, Z+23	; 0x17
    6800:	e0 2d       	mov	r30, r0
    6802:	ce 01       	movw	r24, r28
    6804:	df 91       	pop	r29
    6806:	cf 91       	pop	r28
    6808:	1f 91       	pop	r17
    680a:	0f 91       	pop	r16
    680c:	ff 90       	pop	r15
    680e:	ef 90       	pop	r14
    6810:	df 90       	pop	r13
    6812:	cf 90       	pop	r12
    6814:	bf 90       	pop	r11
    6816:	af 90       	pop	r10
    6818:	9f 90       	pop	r9
    681a:	8f 90       	pop	r8
    681c:	09 94       	ijmp

0000681e <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    681e:	8f 92       	push	r8
    6820:	9f 92       	push	r9
    6822:	af 92       	push	r10
    6824:	bf 92       	push	r11
    6826:	cf 92       	push	r12
    6828:	df 92       	push	r13
    682a:	ef 92       	push	r14
    682c:	ff 92       	push	r15
    682e:	0f 93       	push	r16
    6830:	1f 93       	push	r17
    6832:	cf 93       	push	r28
    6834:	df 93       	push	r29
    6836:	ec 01       	movw	r28, r24
    6838:	5b 01       	movw	r10, r22
    683a:	4a 01       	movw	r8, r20
    683c:	69 01       	movw	r12, r18
    683e:	e8 81       	ld	r30, Y
    6840:	f9 81       	ldd	r31, Y+1	; 0x01
    6842:	02 84       	ldd	r0, Z+10	; 0x0a
    6844:	f3 85       	ldd	r31, Z+11	; 0x0b
    6846:	e0 2d       	mov	r30, r0
    6848:	09 95       	icall
    684a:	95 01       	movw	r18, r10
    684c:	2c 0d       	add	r18, r12
    684e:	3d 1d       	adc	r19, r13
    6850:	21 50       	subi	r18, 0x01	; 1
    6852:	31 09       	sbc	r19, r1
    6854:	e8 81       	ld	r30, Y
    6856:	f9 81       	ldd	r31, Y+1	; 0x01
    6858:	04 88       	ldd	r0, Z+20	; 0x14
    685a:	f5 89       	ldd	r31, Z+21	; 0x15
    685c:	e0 2d       	mov	r30, r0
    685e:	78 01       	movw	r14, r16
    6860:	84 01       	movw	r16, r8
    6862:	a4 01       	movw	r20, r8
    6864:	b5 01       	movw	r22, r10
    6866:	ce 01       	movw	r24, r28
    6868:	09 95       	icall
    686a:	e8 81       	ld	r30, Y
    686c:	f9 81       	ldd	r31, Y+1	; 0x01
    686e:	06 88       	ldd	r0, Z+22	; 0x16
    6870:	f7 89       	ldd	r31, Z+23	; 0x17
    6872:	e0 2d       	mov	r30, r0
    6874:	ce 01       	movw	r24, r28
    6876:	df 91       	pop	r29
    6878:	cf 91       	pop	r28
    687a:	1f 91       	pop	r17
    687c:	0f 91       	pop	r16
    687e:	ff 90       	pop	r15
    6880:	ef 90       	pop	r14
    6882:	df 90       	pop	r13
    6884:	cf 90       	pop	r12
    6886:	bf 90       	pop	r11
    6888:	af 90       	pop	r10
    688a:	9f 90       	pop	r9
    688c:	8f 90       	pop	r8
    688e:	09 94       	ijmp

00006890 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    6890:	4f 92       	push	r4
    6892:	5f 92       	push	r5
    6894:	6f 92       	push	r6
    6896:	7f 92       	push	r7
    6898:	8f 92       	push	r8
    689a:	9f 92       	push	r9
    689c:	af 92       	push	r10
    689e:	bf 92       	push	r11
    68a0:	cf 92       	push	r12
    68a2:	df 92       	push	r13
    68a4:	ef 92       	push	r14
    68a6:	ff 92       	push	r15
    68a8:	0f 93       	push	r16
    68aa:	1f 93       	push	r17
    68ac:	cf 93       	push	r28
    68ae:	df 93       	push	r29
    68b0:	6c 01       	movw	r12, r24
    68b2:	2b 01       	movw	r4, r22
    68b4:	5a 01       	movw	r10, r20
    68b6:	39 01       	movw	r6, r18
    68b8:	48 01       	movw	r8, r16
    68ba:	dc 01       	movw	r26, r24
    68bc:	ed 91       	ld	r30, X+
    68be:	fc 91       	ld	r31, X
    68c0:	02 84       	ldd	r0, Z+10	; 0x0a
    68c2:	f3 85       	ldd	r31, Z+11	; 0x0b
    68c4:	e0 2d       	mov	r30, r0
    68c6:	09 95       	icall
    68c8:	e2 01       	movw	r28, r4
    68ca:	64 0c       	add	r6, r4
    68cc:	75 1c       	adc	r7, r5
    68ce:	d6 01       	movw	r26, r12
    68d0:	ed 91       	ld	r30, X+
    68d2:	fc 91       	ld	r31, X
    68d4:	c6 15       	cp	r28, r6
    68d6:	d7 05       	cpc	r29, r7
    68d8:	5c f4       	brge	.+22     	; 0x68f0 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    68da:	00 88       	ldd	r0, Z+16	; 0x10
    68dc:	f1 89       	ldd	r31, Z+17	; 0x11
    68de:	e0 2d       	mov	r30, r0
    68e0:	87 01       	movw	r16, r14
    68e2:	94 01       	movw	r18, r8
    68e4:	a5 01       	movw	r20, r10
    68e6:	be 01       	movw	r22, r28
    68e8:	c6 01       	movw	r24, r12
    68ea:	09 95       	icall
    68ec:	21 96       	adiw	r28, 0x01	; 1
    68ee:	ef cf       	rjmp	.-34     	; 0x68ce <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    68f0:	06 88       	ldd	r0, Z+22	; 0x16
    68f2:	f7 89       	ldd	r31, Z+23	; 0x17
    68f4:	e0 2d       	mov	r30, r0
    68f6:	c6 01       	movw	r24, r12
    68f8:	df 91       	pop	r29
    68fa:	cf 91       	pop	r28
    68fc:	1f 91       	pop	r17
    68fe:	0f 91       	pop	r16
    6900:	ff 90       	pop	r15
    6902:	ef 90       	pop	r14
    6904:	df 90       	pop	r13
    6906:	cf 90       	pop	r12
    6908:	bf 90       	pop	r11
    690a:	af 90       	pop	r10
    690c:	9f 90       	pop	r9
    690e:	8f 90       	pop	r8
    6910:	7f 90       	pop	r7
    6912:	6f 90       	pop	r6
    6914:	5f 90       	pop	r5
    6916:	4f 90       	pop	r4
    6918:	09 94       	ijmp

0000691a <Adafruit_GFX::fillScreen(unsigned int)>:
    691a:	ef 92       	push	r14
    691c:	ff 92       	push	r15
    691e:	0f 93       	push	r16
    6920:	1f 93       	push	r17
    6922:	dc 01       	movw	r26, r24
    6924:	19 96       	adiw	r26, 0x09	; 9
    6926:	0d 91       	ld	r16, X+
    6928:	1c 91       	ld	r17, X
    692a:	1a 97       	sbiw	r26, 0x0a	; 10
    692c:	17 96       	adiw	r26, 0x07	; 7
    692e:	2d 91       	ld	r18, X+
    6930:	3c 91       	ld	r19, X
    6932:	18 97       	sbiw	r26, 0x08	; 8
    6934:	ed 91       	ld	r30, X+
    6936:	fc 91       	ld	r31, X
    6938:	00 a0       	ldd	r0, Z+32	; 0x20
    693a:	f1 a1       	ldd	r31, Z+33	; 0x21
    693c:	e0 2d       	mov	r30, r0
    693e:	7b 01       	movw	r14, r22
    6940:	50 e0       	ldi	r21, 0x00	; 0
    6942:	40 e0       	ldi	r20, 0x00	; 0
    6944:	70 e0       	ldi	r23, 0x00	; 0
    6946:	60 e0       	ldi	r22, 0x00	; 0
    6948:	09 95       	icall
    694a:	1f 91       	pop	r17
    694c:	0f 91       	pop	r16
    694e:	ff 90       	pop	r15
    6950:	ef 90       	pop	r14
    6952:	08 95       	ret

00006954 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    6954:	6f 92       	push	r6
    6956:	7f 92       	push	r7
    6958:	8f 92       	push	r8
    695a:	9f 92       	push	r9
    695c:	af 92       	push	r10
    695e:	bf 92       	push	r11
    6960:	cf 92       	push	r12
    6962:	df 92       	push	r13
    6964:	ef 92       	push	r14
    6966:	ff 92       	push	r15
    6968:	0f 93       	push	r16
    696a:	1f 93       	push	r17
    696c:	cf 93       	push	r28
    696e:	df 93       	push	r29
    6970:	ec 01       	movw	r28, r24
    6972:	6b 01       	movw	r12, r22
    6974:	5a 01       	movw	r10, r20
    6976:	39 01       	movw	r6, r18
    6978:	48 01       	movw	r8, r16
    697a:	e8 81       	ld	r30, Y
    697c:	f9 81       	ldd	r31, Y+1	; 0x01
    697e:	02 84       	ldd	r0, Z+10	; 0x0a
    6980:	f3 85       	ldd	r31, Z+11	; 0x0b
    6982:	e0 2d       	mov	r30, r0
    6984:	09 95       	icall
    6986:	e8 81       	ld	r30, Y
    6988:	f9 81       	ldd	r31, Y+1	; 0x01
    698a:	02 88       	ldd	r0, Z+18	; 0x12
    698c:	f3 89       	ldd	r31, Z+19	; 0x13
    698e:	e0 2d       	mov	r30, r0
    6990:	87 01       	movw	r16, r14
    6992:	93 01       	movw	r18, r6
    6994:	a5 01       	movw	r20, r10
    6996:	b6 01       	movw	r22, r12
    6998:	ce 01       	movw	r24, r28
    699a:	09 95       	icall
    699c:	a5 01       	movw	r20, r10
    699e:	48 0d       	add	r20, r8
    69a0:	59 1d       	adc	r21, r9
    69a2:	41 50       	subi	r20, 0x01	; 1
    69a4:	51 09       	sbc	r21, r1
    69a6:	e8 81       	ld	r30, Y
    69a8:	f9 81       	ldd	r31, Y+1	; 0x01
    69aa:	02 88       	ldd	r0, Z+18	; 0x12
    69ac:	f3 89       	ldd	r31, Z+19	; 0x13
    69ae:	e0 2d       	mov	r30, r0
    69b0:	93 01       	movw	r18, r6
    69b2:	b6 01       	movw	r22, r12
    69b4:	ce 01       	movw	r24, r28
    69b6:	09 95       	icall
    69b8:	e8 81       	ld	r30, Y
    69ba:	f9 81       	ldd	r31, Y+1	; 0x01
    69bc:	00 88       	ldd	r0, Z+16	; 0x10
    69be:	f1 89       	ldd	r31, Z+17	; 0x11
    69c0:	e0 2d       	mov	r30, r0
    69c2:	94 01       	movw	r18, r8
    69c4:	a5 01       	movw	r20, r10
    69c6:	b6 01       	movw	r22, r12
    69c8:	ce 01       	movw	r24, r28
    69ca:	09 95       	icall
    69cc:	c6 0c       	add	r12, r6
    69ce:	d7 1c       	adc	r13, r7
    69d0:	b6 01       	movw	r22, r12
    69d2:	61 50       	subi	r22, 0x01	; 1
    69d4:	71 09       	sbc	r23, r1
    69d6:	e8 81       	ld	r30, Y
    69d8:	f9 81       	ldd	r31, Y+1	; 0x01
    69da:	00 88       	ldd	r0, Z+16	; 0x10
    69dc:	f1 89       	ldd	r31, Z+17	; 0x11
    69de:	e0 2d       	mov	r30, r0
    69e0:	94 01       	movw	r18, r8
    69e2:	a5 01       	movw	r20, r10
    69e4:	ce 01       	movw	r24, r28
    69e6:	09 95       	icall
    69e8:	e8 81       	ld	r30, Y
    69ea:	f9 81       	ldd	r31, Y+1	; 0x01
    69ec:	06 88       	ldd	r0, Z+22	; 0x16
    69ee:	f7 89       	ldd	r31, Z+23	; 0x17
    69f0:	e0 2d       	mov	r30, r0
    69f2:	ce 01       	movw	r24, r28
    69f4:	df 91       	pop	r29
    69f6:	cf 91       	pop	r28
    69f8:	1f 91       	pop	r17
    69fa:	0f 91       	pop	r16
    69fc:	ff 90       	pop	r15
    69fe:	ef 90       	pop	r14
    6a00:	df 90       	pop	r13
    6a02:	cf 90       	pop	r12
    6a04:	bf 90       	pop	r11
    6a06:	af 90       	pop	r10
    6a08:	9f 90       	pop	r9
    6a0a:	8f 90       	pop	r8
    6a0c:	7f 90       	pop	r7
    6a0e:	6f 90       	pop	r6
    6a10:	09 94       	ijmp

00006a12 <Adafruit_GFX::invertDisplay(bool)>:
    6a12:	08 95       	ret

00006a14 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    6a14:	6f 92       	push	r6
    6a16:	7f 92       	push	r7
    6a18:	8f 92       	push	r8
    6a1a:	9f 92       	push	r9
    6a1c:	af 92       	push	r10
    6a1e:	bf 92       	push	r11
    6a20:	cf 92       	push	r12
    6a22:	df 92       	push	r13
    6a24:	ef 92       	push	r14
    6a26:	ff 92       	push	r15
    6a28:	0f 93       	push	r16
    6a2a:	1f 93       	push	r17
    6a2c:	cf 93       	push	r28
    6a2e:	df 93       	push	r29
    6a30:	5c 01       	movw	r10, r24
    6a32:	eb 01       	movw	r28, r22
    6a34:	6a 01       	movw	r12, r20
    6a36:	49 01       	movw	r8, r18
    6a38:	38 01       	movw	r6, r16
    6a3a:	87 01       	movw	r16, r14
    6a3c:	dc 01       	movw	r26, r24
    6a3e:	ed 91       	ld	r30, X+
    6a40:	fc 91       	ld	r31, X
    6a42:	62 17       	cp	r22, r18
    6a44:	73 07       	cpc	r23, r19
    6a46:	19 f5       	brne	.+70     	; 0x6a8e <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    6a48:	64 16       	cp	r6, r20
    6a4a:	75 06       	cpc	r7, r21
    6a4c:	2c f0       	brlt	.+10     	; 0x6a58 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    6a4e:	96 2d       	mov	r25, r6
    6a50:	87 2d       	mov	r24, r7
    6a52:	3a 01       	movw	r6, r20
    6a54:	c9 2e       	mov	r12, r25
    6a56:	d8 2e       	mov	r13, r24
    6a58:	96 01       	movw	r18, r12
    6a5a:	26 19       	sub	r18, r6
    6a5c:	37 09       	sbc	r19, r7
    6a5e:	2f 5f       	subi	r18, 0xFF	; 255
    6a60:	3f 4f       	sbci	r19, 0xFF	; 255
    6a62:	04 8c       	ldd	r0, Z+28	; 0x1c
    6a64:	f5 8d       	ldd	r31, Z+29	; 0x1d
    6a66:	e0 2d       	mov	r30, r0
    6a68:	a3 01       	movw	r20, r6
    6a6a:	be 01       	movw	r22, r28
    6a6c:	c5 01       	movw	r24, r10
    6a6e:	09 95       	icall
    6a70:	df 91       	pop	r29
    6a72:	cf 91       	pop	r28
    6a74:	1f 91       	pop	r17
    6a76:	0f 91       	pop	r16
    6a78:	ff 90       	pop	r15
    6a7a:	ef 90       	pop	r14
    6a7c:	df 90       	pop	r13
    6a7e:	cf 90       	pop	r12
    6a80:	bf 90       	pop	r11
    6a82:	af 90       	pop	r10
    6a84:	9f 90       	pop	r9
    6a86:	8f 90       	pop	r8
    6a88:	7f 90       	pop	r7
    6a8a:	6f 90       	pop	r6
    6a8c:	08 95       	ret
    6a8e:	46 15       	cp	r20, r6
    6a90:	57 05       	cpc	r21, r7
    6a92:	91 f4       	brne	.+36     	; 0x6ab8 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    6a94:	26 17       	cp	r18, r22
    6a96:	37 07       	cpc	r19, r23
    6a98:	24 f0       	brlt	.+8      	; 0x6aa2 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    6a9a:	89 2d       	mov	r24, r9
    6a9c:	4b 01       	movw	r8, r22
    6a9e:	c2 2f       	mov	r28, r18
    6aa0:	d8 2f       	mov	r29, r24
    6aa2:	9e 01       	movw	r18, r28
    6aa4:	28 19       	sub	r18, r8
    6aa6:	39 09       	sbc	r19, r9
    6aa8:	2f 5f       	subi	r18, 0xFF	; 255
    6aaa:	3f 4f       	sbci	r19, 0xFF	; 255
    6aac:	06 8c       	ldd	r0, Z+30	; 0x1e
    6aae:	f7 8d       	ldd	r31, Z+31	; 0x1f
    6ab0:	e0 2d       	mov	r30, r0
    6ab2:	a6 01       	movw	r20, r12
    6ab4:	b4 01       	movw	r22, r8
    6ab6:	da cf       	rjmp	.-76     	; 0x6a6c <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    6ab8:	02 84       	ldd	r0, Z+10	; 0x0a
    6aba:	f3 85       	ldd	r31, Z+11	; 0x0b
    6abc:	e0 2d       	mov	r30, r0
    6abe:	09 95       	icall
    6ac0:	d5 01       	movw	r26, r10
    6ac2:	ed 91       	ld	r30, X+
    6ac4:	fc 91       	ld	r31, X
    6ac6:	04 88       	ldd	r0, Z+20	; 0x14
    6ac8:	f5 89       	ldd	r31, Z+21	; 0x15
    6aca:	e0 2d       	mov	r30, r0
    6acc:	83 01       	movw	r16, r6
    6ace:	94 01       	movw	r18, r8
    6ad0:	a6 01       	movw	r20, r12
    6ad2:	be 01       	movw	r22, r28
    6ad4:	c5 01       	movw	r24, r10
    6ad6:	09 95       	icall
    6ad8:	d5 01       	movw	r26, r10
    6ada:	ed 91       	ld	r30, X+
    6adc:	fc 91       	ld	r31, X
    6ade:	06 88       	ldd	r0, Z+22	; 0x16
    6ae0:	f7 89       	ldd	r31, Z+23	; 0x17
    6ae2:	e0 2d       	mov	r30, r0
    6ae4:	c5 01       	movw	r24, r10
    6ae6:	df 91       	pop	r29
    6ae8:	cf 91       	pop	r28
    6aea:	1f 91       	pop	r17
    6aec:	0f 91       	pop	r16
    6aee:	ff 90       	pop	r15
    6af0:	ef 90       	pop	r14
    6af2:	df 90       	pop	r13
    6af4:	cf 90       	pop	r12
    6af6:	bf 90       	pop	r11
    6af8:	af 90       	pop	r10
    6afa:	9f 90       	pop	r9
    6afc:	8f 90       	pop	r8
    6afe:	7f 90       	pop	r7
    6b00:	6f 90       	pop	r6
    6b02:	09 94       	ijmp

00006b04 <Adafruit_GFX::setRotation(unsigned char)>:
    6b04:	fc 01       	movw	r30, r24
    6b06:	63 70       	andi	r22, 0x03	; 3
    6b08:	65 8b       	std	Z+21, r22	; 0x15
    6b0a:	83 81       	ldd	r24, Z+3	; 0x03
    6b0c:	94 81       	ldd	r25, Z+4	; 0x04
    6b0e:	25 81       	ldd	r18, Z+5	; 0x05
    6b10:	36 81       	ldd	r19, Z+6	; 0x06
    6b12:	61 30       	cpi	r22, 0x01	; 1
    6b14:	39 f0       	breq	.+14     	; 0x6b24 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    6b16:	63 30       	cpi	r22, 0x03	; 3
    6b18:	29 f0       	breq	.+10     	; 0x6b24 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    6b1a:	90 87       	std	Z+8, r25	; 0x08
    6b1c:	87 83       	std	Z+7, r24	; 0x07
    6b1e:	32 87       	std	Z+10, r19	; 0x0a
    6b20:	21 87       	std	Z+9, r18	; 0x09
    6b22:	08 95       	ret
    6b24:	30 87       	std	Z+8, r19	; 0x08
    6b26:	27 83       	std	Z+7, r18	; 0x07
    6b28:	92 87       	std	Z+10, r25	; 0x0a
    6b2a:	81 87       	std	Z+9, r24	; 0x09
    6b2c:	08 95       	ret

00006b2e <Adafruit_GFX::Adafruit_GFX(int, int)>:
    6b2e:	fc 01       	movw	r30, r24
    6b30:	12 82       	std	Z+2, r1	; 0x02
    6b32:	87 e0       	ldi	r24, 0x07	; 7
    6b34:	99 e0       	ldi	r25, 0x09	; 9
    6b36:	91 83       	std	Z+1, r25	; 0x01
    6b38:	80 83       	st	Z, r24
    6b3a:	74 83       	std	Z+4, r23	; 0x04
    6b3c:	63 83       	std	Z+3, r22	; 0x03
    6b3e:	56 83       	std	Z+6, r21	; 0x06
    6b40:	45 83       	std	Z+5, r20	; 0x05
    6b42:	70 87       	std	Z+8, r23	; 0x08
    6b44:	67 83       	std	Z+7, r22	; 0x07
    6b46:	52 87       	std	Z+10, r21	; 0x0a
    6b48:	41 87       	std	Z+9, r20	; 0x09
    6b4a:	15 8a       	std	Z+21, r1	; 0x15
    6b4c:	14 86       	std	Z+12, r1	; 0x0c
    6b4e:	13 86       	std	Z+11, r1	; 0x0b
    6b50:	16 86       	std	Z+14, r1	; 0x0e
    6b52:	15 86       	std	Z+13, r1	; 0x0d
    6b54:	81 e0       	ldi	r24, 0x01	; 1
    6b56:	84 8b       	std	Z+20, r24	; 0x14
    6b58:	83 8b       	std	Z+19, r24	; 0x13
    6b5a:	2f ef       	ldi	r18, 0xFF	; 255
    6b5c:	3f ef       	ldi	r19, 0xFF	; 255
    6b5e:	32 8b       	std	Z+18, r19	; 0x12
    6b60:	21 8b       	std	Z+17, r18	; 0x11
    6b62:	30 8b       	std	Z+16, r19	; 0x10
    6b64:	27 87       	std	Z+15, r18	; 0x0f
    6b66:	86 8b       	std	Z+22, r24	; 0x16
    6b68:	17 8a       	std	Z+23, r1	; 0x17
    6b6a:	11 8e       	std	Z+25, r1	; 0x19
    6b6c:	10 8e       	std	Z+24, r1	; 0x18
    6b6e:	08 95       	ret

00006b70 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    6b70:	2f 92       	push	r2
    6b72:	3f 92       	push	r3
    6b74:	4f 92       	push	r4
    6b76:	5f 92       	push	r5
    6b78:	6f 92       	push	r6
    6b7a:	7f 92       	push	r7
    6b7c:	8f 92       	push	r8
    6b7e:	9f 92       	push	r9
    6b80:	af 92       	push	r10
    6b82:	bf 92       	push	r11
    6b84:	cf 92       	push	r12
    6b86:	df 92       	push	r13
    6b88:	ef 92       	push	r14
    6b8a:	ff 92       	push	r15
    6b8c:	0f 93       	push	r16
    6b8e:	1f 93       	push	r17
    6b90:	cf 93       	push	r28
    6b92:	df 93       	push	r29
    6b94:	cd b7       	in	r28, 0x3d	; 61
    6b96:	de b7       	in	r29, 0x3e	; 62
    6b98:	2e 97       	sbiw	r28, 0x0e	; 14
    6b9a:	0f b6       	in	r0, 0x3f	; 63
    6b9c:	f8 94       	cli
    6b9e:	de bf       	out	0x3e, r29	; 62
    6ba0:	0f be       	out	0x3f, r0	; 63
    6ba2:	cd bf       	out	0x3d, r28	; 61
    6ba4:	5c 01       	movw	r10, r24
    6ba6:	2b 01       	movw	r4, r22
    6ba8:	5c 83       	std	Y+4, r21	; 0x04
    6baa:	4b 83       	std	Y+3, r20	; 0x03
    6bac:	3e 87       	std	Y+14, r19	; 0x0e
    6bae:	2d 87       	std	Y+13, r18	; 0x0d
    6bb0:	fe 82       	std	Y+6, r15	; 0x06
    6bb2:	ed 82       	std	Y+5, r14	; 0x05
    6bb4:	16 01       	movw	r2, r12
    6bb6:	81 e0       	ldi	r24, 0x01	; 1
    6bb8:	90 e0       	ldi	r25, 0x00	; 0
    6bba:	4c 01       	movw	r8, r24
    6bbc:	82 1a       	sub	r8, r18
    6bbe:	93 0a       	sbc	r9, r19
    6bc0:	c9 01       	movw	r24, r18
    6bc2:	91 95       	neg	r25
    6bc4:	81 95       	neg	r24
    6bc6:	91 09       	sbc	r25, r1
    6bc8:	9c 01       	movw	r18, r24
    6bca:	22 0f       	add	r18, r18
    6bcc:	33 1f       	adc	r19, r19
    6bce:	3a 83       	std	Y+2, r19	; 0x02
    6bd0:	29 83       	std	Y+1, r18	; 0x01
    6bd2:	c7 01       	movw	r24, r14
    6bd4:	01 96       	adiw	r24, 0x01	; 1
    6bd6:	98 87       	std	Y+8, r25	; 0x08
    6bd8:	8f 83       	std	Y+7, r24	; 0x07
    6bda:	f1 2c       	mov	r15, r1
    6bdc:	e1 2c       	mov	r14, r1
    6bde:	66 24       	eor	r6, r6
    6be0:	63 94       	inc	r6
    6be2:	71 2c       	mov	r7, r1
    6be4:	90 2f       	mov	r25, r16
    6be6:	91 70       	andi	r25, 0x01	; 1
    6be8:	99 87       	std	Y+9, r25	; 0x09
    6bea:	02 70       	andi	r16, 0x02	; 2
    6bec:	0a 87       	std	Y+10, r16	; 0x0a
    6bee:	da 01       	movw	r26, r20
    6bf0:	11 96       	adiw	r26, 0x01	; 1
    6bf2:	bc 87       	std	Y+12, r27	; 0x0c
    6bf4:	ab 87       	std	Y+11, r26	; 0x0b
    6bf6:	2d 85       	ldd	r18, Y+13	; 0x0d
    6bf8:	3e 85       	ldd	r19, Y+14	; 0x0e
    6bfa:	e2 16       	cp	r14, r18
    6bfc:	f3 06       	cpc	r15, r19
    6bfe:	0c f0       	brlt	.+2      	; 0x6c02 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    6c00:	8d c0       	rjmp	.+282    	; 0x6d1c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    6c02:	cd 84       	ldd	r12, Y+13	; 0x0d
    6c04:	de 84       	ldd	r13, Y+14	; 0x0e
    6c06:	97 fc       	sbrc	r9, 7
    6c08:	0b c0       	rjmp	.+22     	; 0x6c20 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    6c0a:	69 01       	movw	r12, r18
    6c0c:	31 e0       	ldi	r19, 0x01	; 1
    6c0e:	c3 1a       	sub	r12, r19
    6c10:	d1 08       	sbc	r13, r1
    6c12:	89 81       	ldd	r24, Y+1	; 0x01
    6c14:	9a 81       	ldd	r25, Y+2	; 0x02
    6c16:	02 96       	adiw	r24, 0x02	; 2
    6c18:	9a 83       	std	Y+2, r25	; 0x02
    6c1a:	89 83       	std	Y+1, r24	; 0x01
    6c1c:	88 0e       	add	r8, r24
    6c1e:	99 1e       	adc	r9, r25
    6c20:	9f ef       	ldi	r25, 0xFF	; 255
    6c22:	e9 1a       	sub	r14, r25
    6c24:	f9 0a       	sbc	r15, r25
    6c26:	a2 e0       	ldi	r26, 0x02	; 2
    6c28:	6a 0e       	add	r6, r26
    6c2a:	71 1c       	adc	r7, r1
    6c2c:	86 0c       	add	r8, r6
    6c2e:	97 1c       	adc	r9, r7
    6c30:	ce 14       	cp	r12, r14
    6c32:	df 04       	cpc	r13, r15
    6c34:	a4 f1       	brlt	.+104    	; 0x6c9e <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    6c36:	b9 85       	ldd	r27, Y+9	; 0x09
    6c38:	bb 23       	and	r27, r27
    6c3a:	b9 f0       	breq	.+46     	; 0x6c6a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    6c3c:	96 01       	movw	r18, r12
    6c3e:	22 0f       	add	r18, r18
    6c40:	33 1f       	adc	r19, r19
    6c42:	8f 81       	ldd	r24, Y+7	; 0x07
    6c44:	98 85       	ldd	r25, Y+8	; 0x08
    6c46:	28 0f       	add	r18, r24
    6c48:	39 1f       	adc	r19, r25
    6c4a:	d5 01       	movw	r26, r10
    6c4c:	ed 91       	ld	r30, X+
    6c4e:	fc 91       	ld	r31, X
    6c50:	00 88       	ldd	r0, Z+16	; 0x10
    6c52:	f1 89       	ldd	r31, Z+17	; 0x11
    6c54:	e0 2d       	mov	r30, r0
    6c56:	81 01       	movw	r16, r2
    6c58:	4b 81       	ldd	r20, Y+3	; 0x03
    6c5a:	5c 81       	ldd	r21, Y+4	; 0x04
    6c5c:	4c 19       	sub	r20, r12
    6c5e:	5d 09       	sbc	r21, r13
    6c60:	b2 01       	movw	r22, r4
    6c62:	6e 0d       	add	r22, r14
    6c64:	7f 1d       	adc	r23, r15
    6c66:	c5 01       	movw	r24, r10
    6c68:	09 95       	icall
    6c6a:	ba 85       	ldd	r27, Y+10	; 0x0a
    6c6c:	bb 23       	and	r27, r27
    6c6e:	b9 f0       	breq	.+46     	; 0x6c9e <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    6c70:	96 01       	movw	r18, r12
    6c72:	22 0f       	add	r18, r18
    6c74:	33 1f       	adc	r19, r19
    6c76:	8f 81       	ldd	r24, Y+7	; 0x07
    6c78:	98 85       	ldd	r25, Y+8	; 0x08
    6c7a:	28 0f       	add	r18, r24
    6c7c:	39 1f       	adc	r19, r25
    6c7e:	d5 01       	movw	r26, r10
    6c80:	ed 91       	ld	r30, X+
    6c82:	fc 91       	ld	r31, X
    6c84:	00 88       	ldd	r0, Z+16	; 0x10
    6c86:	f1 89       	ldd	r31, Z+17	; 0x11
    6c88:	e0 2d       	mov	r30, r0
    6c8a:	81 01       	movw	r16, r2
    6c8c:	4b 81       	ldd	r20, Y+3	; 0x03
    6c8e:	5c 81       	ldd	r21, Y+4	; 0x04
    6c90:	4c 19       	sub	r20, r12
    6c92:	5d 09       	sbc	r21, r13
    6c94:	b2 01       	movw	r22, r4
    6c96:	6e 19       	sub	r22, r14
    6c98:	7f 09       	sbc	r23, r15
    6c9a:	c5 01       	movw	r24, r10
    6c9c:	09 95       	icall
    6c9e:	2d 85       	ldd	r18, Y+13	; 0x0d
    6ca0:	3e 85       	ldd	r19, Y+14	; 0x0e
    6ca2:	2c 15       	cp	r18, r12
    6ca4:	3d 05       	cpc	r19, r13
    6ca6:	b9 f1       	breq	.+110    	; 0x6d16 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    6ca8:	39 85       	ldd	r19, Y+9	; 0x09
    6caa:	33 23       	and	r19, r19
    6cac:	c1 f0       	breq	.+48     	; 0x6cde <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    6cae:	93 01       	movw	r18, r6
    6cb0:	22 50       	subi	r18, 0x02	; 2
    6cb2:	31 09       	sbc	r19, r1
    6cb4:	8d 81       	ldd	r24, Y+5	; 0x05
    6cb6:	9e 81       	ldd	r25, Y+6	; 0x06
    6cb8:	28 0f       	add	r18, r24
    6cba:	39 1f       	adc	r19, r25
    6cbc:	d5 01       	movw	r26, r10
    6cbe:	ed 91       	ld	r30, X+
    6cc0:	fc 91       	ld	r31, X
    6cc2:	00 88       	ldd	r0, Z+16	; 0x10
    6cc4:	f1 89       	ldd	r31, Z+17	; 0x11
    6cc6:	e0 2d       	mov	r30, r0
    6cc8:	81 01       	movw	r16, r2
    6cca:	4b 85       	ldd	r20, Y+11	; 0x0b
    6ccc:	5c 85       	ldd	r21, Y+12	; 0x0c
    6cce:	4e 19       	sub	r20, r14
    6cd0:	5f 09       	sbc	r21, r15
    6cd2:	6d 85       	ldd	r22, Y+13	; 0x0d
    6cd4:	7e 85       	ldd	r23, Y+14	; 0x0e
    6cd6:	64 0d       	add	r22, r4
    6cd8:	75 1d       	adc	r23, r5
    6cda:	c5 01       	movw	r24, r10
    6cdc:	09 95       	icall
    6cde:	ba 85       	ldd	r27, Y+10	; 0x0a
    6ce0:	bb 23       	and	r27, r27
    6ce2:	c9 f0       	breq	.+50     	; 0x6d16 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    6ce4:	93 01       	movw	r18, r6
    6ce6:	22 50       	subi	r18, 0x02	; 2
    6ce8:	31 09       	sbc	r19, r1
    6cea:	8d 81       	ldd	r24, Y+5	; 0x05
    6cec:	9e 81       	ldd	r25, Y+6	; 0x06
    6cee:	28 0f       	add	r18, r24
    6cf0:	39 1f       	adc	r19, r25
    6cf2:	b2 01       	movw	r22, r4
    6cf4:	ad 85       	ldd	r26, Y+13	; 0x0d
    6cf6:	be 85       	ldd	r27, Y+14	; 0x0e
    6cf8:	6a 1b       	sub	r22, r26
    6cfa:	7b 0b       	sbc	r23, r27
    6cfc:	d5 01       	movw	r26, r10
    6cfe:	ed 91       	ld	r30, X+
    6d00:	fc 91       	ld	r31, X
    6d02:	00 88       	ldd	r0, Z+16	; 0x10
    6d04:	f1 89       	ldd	r31, Z+17	; 0x11
    6d06:	e0 2d       	mov	r30, r0
    6d08:	81 01       	movw	r16, r2
    6d0a:	4b 85       	ldd	r20, Y+11	; 0x0b
    6d0c:	5c 85       	ldd	r21, Y+12	; 0x0c
    6d0e:	4e 19       	sub	r20, r14
    6d10:	5f 09       	sbc	r21, r15
    6d12:	c5 01       	movw	r24, r10
    6d14:	09 95       	icall
    6d16:	de 86       	std	Y+14, r13	; 0x0e
    6d18:	cd 86       	std	Y+13, r12	; 0x0d
    6d1a:	6d cf       	rjmp	.-294    	; 0x6bf6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    6d1c:	2e 96       	adiw	r28, 0x0e	; 14
    6d1e:	0f b6       	in	r0, 0x3f	; 63
    6d20:	f8 94       	cli
    6d22:	de bf       	out	0x3e, r29	; 62
    6d24:	0f be       	out	0x3f, r0	; 63
    6d26:	cd bf       	out	0x3d, r28	; 61
    6d28:	df 91       	pop	r29
    6d2a:	cf 91       	pop	r28
    6d2c:	1f 91       	pop	r17
    6d2e:	0f 91       	pop	r16
    6d30:	ff 90       	pop	r15
    6d32:	ef 90       	pop	r14
    6d34:	df 90       	pop	r13
    6d36:	cf 90       	pop	r12
    6d38:	bf 90       	pop	r11
    6d3a:	af 90       	pop	r10
    6d3c:	9f 90       	pop	r9
    6d3e:	8f 90       	pop	r8
    6d40:	7f 90       	pop	r7
    6d42:	6f 90       	pop	r6
    6d44:	5f 90       	pop	r5
    6d46:	4f 90       	pop	r4
    6d48:	3f 90       	pop	r3
    6d4a:	2f 90       	pop	r2
    6d4c:	08 95       	ret

00006d4e <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    6d4e:	6f 92       	push	r6
    6d50:	7f 92       	push	r7
    6d52:	8f 92       	push	r8
    6d54:	9f 92       	push	r9
    6d56:	af 92       	push	r10
    6d58:	bf 92       	push	r11
    6d5a:	cf 92       	push	r12
    6d5c:	df 92       	push	r13
    6d5e:	ef 92       	push	r14
    6d60:	ff 92       	push	r15
    6d62:	0f 93       	push	r16
    6d64:	1f 93       	push	r17
    6d66:	cf 93       	push	r28
    6d68:	df 93       	push	r29
    6d6a:	ec 01       	movw	r28, r24
    6d6c:	4b 01       	movw	r8, r22
    6d6e:	3a 01       	movw	r6, r20
    6d70:	59 01       	movw	r10, r18
    6d72:	68 01       	movw	r12, r16
    6d74:	e8 81       	ld	r30, Y
    6d76:	f9 81       	ldd	r31, Y+1	; 0x01
    6d78:	02 84       	ldd	r0, Z+10	; 0x0a
    6d7a:	f3 85       	ldd	r31, Z+11	; 0x0b
    6d7c:	e0 2d       	mov	r30, r0
    6d7e:	09 95       	icall
    6d80:	95 01       	movw	r18, r10
    6d82:	22 0f       	add	r18, r18
    6d84:	33 1f       	adc	r19, r19
    6d86:	2f 5f       	subi	r18, 0xFF	; 255
    6d88:	3f 4f       	sbci	r19, 0xFF	; 255
    6d8a:	a3 01       	movw	r20, r6
    6d8c:	4a 19       	sub	r20, r10
    6d8e:	5b 09       	sbc	r21, r11
    6d90:	e8 81       	ld	r30, Y
    6d92:	f9 81       	ldd	r31, Y+1	; 0x01
    6d94:	00 88       	ldd	r0, Z+16	; 0x10
    6d96:	f1 89       	ldd	r31, Z+17	; 0x11
    6d98:	e0 2d       	mov	r30, r0
    6d9a:	b4 01       	movw	r22, r8
    6d9c:	ce 01       	movw	r24, r28
    6d9e:	09 95       	icall
    6da0:	f1 2c       	mov	r15, r1
    6da2:	e1 2c       	mov	r14, r1
    6da4:	03 e0       	ldi	r16, 0x03	; 3
    6da6:	95 01       	movw	r18, r10
    6da8:	a3 01       	movw	r20, r6
    6daa:	b4 01       	movw	r22, r8
    6dac:	ce 01       	movw	r24, r28
    6dae:	e0 de       	rcall	.-576    	; 0x6b70 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    6db0:	e8 81       	ld	r30, Y
    6db2:	f9 81       	ldd	r31, Y+1	; 0x01
    6db4:	06 88       	ldd	r0, Z+22	; 0x16
    6db6:	f7 89       	ldd	r31, Z+23	; 0x17
    6db8:	e0 2d       	mov	r30, r0
    6dba:	ce 01       	movw	r24, r28
    6dbc:	df 91       	pop	r29
    6dbe:	cf 91       	pop	r28
    6dc0:	1f 91       	pop	r17
    6dc2:	0f 91       	pop	r16
    6dc4:	ff 90       	pop	r15
    6dc6:	ef 90       	pop	r14
    6dc8:	df 90       	pop	r13
    6dca:	cf 90       	pop	r12
    6dcc:	bf 90       	pop	r11
    6dce:	af 90       	pop	r10
    6dd0:	9f 90       	pop	r9
    6dd2:	8f 90       	pop	r8
    6dd4:	7f 90       	pop	r7
    6dd6:	6f 90       	pop	r6
    6dd8:	09 94       	ijmp

00006dda <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    6dda:	2f 92       	push	r2
    6ddc:	3f 92       	push	r3
    6dde:	4f 92       	push	r4
    6de0:	5f 92       	push	r5
    6de2:	6f 92       	push	r6
    6de4:	7f 92       	push	r7
    6de6:	8f 92       	push	r8
    6de8:	9f 92       	push	r9
    6dea:	af 92       	push	r10
    6dec:	bf 92       	push	r11
    6dee:	cf 92       	push	r12
    6df0:	df 92       	push	r13
    6df2:	ef 92       	push	r14
    6df4:	ff 92       	push	r15
    6df6:	0f 93       	push	r16
    6df8:	1f 93       	push	r17
    6dfa:	cf 93       	push	r28
    6dfc:	df 93       	push	r29
    6dfe:	cd b7       	in	r28, 0x3d	; 61
    6e00:	de b7       	in	r29, 0x3e	; 62
    6e02:	6a 97       	sbiw	r28, 0x1a	; 26
    6e04:	0f b6       	in	r0, 0x3f	; 63
    6e06:	f8 94       	cli
    6e08:	de bf       	out	0x3e, r29	; 62
    6e0a:	0f be       	out	0x3f, r0	; 63
    6e0c:	cd bf       	out	0x3d, r28	; 61
    6e0e:	9a 8f       	std	Y+26, r25	; 0x1a
    6e10:	89 8f       	std	Y+25, r24	; 0x19
    6e12:	7a 83       	std	Y+2, r23	; 0x02
    6e14:	69 83       	std	Y+1, r22	; 0x01
    6e16:	4a 01       	movw	r8, r20
    6e18:	d2 2e       	mov	r13, r18
    6e1a:	18 87       	std	Y+8, r17	; 0x08
    6e1c:	0f 83       	std	Y+7, r16	; 0x07
    6e1e:	37 01       	movw	r6, r14
    6e20:	bc 2c       	mov	r11, r12
    6e22:	dc 01       	movw	r26, r24
    6e24:	58 96       	adiw	r26, 0x18	; 24
    6e26:	2d 91       	ld	r18, X+
    6e28:	3c 91       	ld	r19, X
    6e2a:	59 97       	sbiw	r26, 0x19	; 25
    6e2c:	21 15       	cp	r18, r1
    6e2e:	31 05       	cpc	r19, r1
    6e30:	09 f0       	breq	.+2      	; 0x6e34 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    6e32:	15 c1       	rjmp	.+554    	; 0x705e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    6e34:	17 96       	adiw	r26, 0x07	; 7
    6e36:	8d 91       	ld	r24, X+
    6e38:	9c 91       	ld	r25, X
    6e3a:	18 97       	sbiw	r26, 0x08	; 8
    6e3c:	68 17       	cp	r22, r24
    6e3e:	79 07       	cpc	r23, r25
    6e40:	0c f0       	brlt	.+2      	; 0x6e44 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    6e42:	d7 c1       	rjmp	.+942    	; 0x71f2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    6e44:	19 96       	adiw	r26, 0x09	; 9
    6e46:	8d 91       	ld	r24, X+
    6e48:	9c 91       	ld	r25, X
    6e4a:	48 17       	cp	r20, r24
    6e4c:	59 07       	cpc	r21, r25
    6e4e:	0c f0       	brlt	.+2      	; 0x6e52 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    6e50:	d0 c1       	rjmp	.+928    	; 0x71f2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    6e52:	4c 2c       	mov	r4, r12
    6e54:	51 2c       	mov	r5, r1
    6e56:	b6 e0       	ldi	r27, 0x06	; 6
    6e58:	cb 9e       	mul	r12, r27
    6e5a:	60 0d       	add	r22, r0
    6e5c:	71 1d       	adc	r23, r1
    6e5e:	11 24       	eor	r1, r1
    6e60:	7c 87       	std	Y+12, r23	; 0x0c
    6e62:	6b 87       	std	Y+11, r22	; 0x0b
    6e64:	16 16       	cp	r1, r22
    6e66:	17 06       	cpc	r1, r23
    6e68:	0c f0       	brlt	.+2      	; 0x6e6c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    6e6a:	c3 c1       	rjmp	.+902    	; 0x71f2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    6e6c:	ea 2d       	mov	r30, r10
    6e6e:	f0 e0       	ldi	r31, 0x00	; 0
    6e70:	fa 87       	std	Y+10, r31	; 0x0a
    6e72:	e9 87       	std	Y+9, r30	; 0x09
    6e74:	93 e0       	ldi	r25, 0x03	; 3
    6e76:	ee 0f       	add	r30, r30
    6e78:	ff 1f       	adc	r31, r31
    6e7a:	9a 95       	dec	r25
    6e7c:	e1 f7       	brne	.-8      	; 0x6e76 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    6e7e:	f8 8b       	std	Y+16, r31	; 0x10
    6e80:	ef 87       	std	Y+15, r30	; 0x0f
    6e82:	cf 01       	movw	r24, r30
    6e84:	84 0f       	add	r24, r20
    6e86:	95 1f       	adc	r25, r21
    6e88:	18 16       	cp	r1, r24
    6e8a:	19 06       	cpc	r1, r25
    6e8c:	0c f0       	brlt	.+2      	; 0x6e90 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    6e8e:	b1 c1       	rjmp	.+866    	; 0x71f2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    6e90:	a9 8d       	ldd	r26, Y+25	; 0x19
    6e92:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6e94:	57 96       	adiw	r26, 0x17	; 23
    6e96:	8c 91       	ld	r24, X
    6e98:	81 11       	cpse	r24, r1
    6e9a:	04 c0       	rjmp	.+8      	; 0x6ea4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    6e9c:	bf ea       	ldi	r27, 0xAF	; 175
    6e9e:	bd 15       	cp	r27, r13
    6ea0:	08 f4       	brcc	.+2      	; 0x6ea4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    6ea2:	d3 94       	inc	r13
    6ea4:	a9 8d       	ldd	r26, Y+25	; 0x19
    6ea6:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6ea8:	ed 91       	ld	r30, X+
    6eaa:	fc 91       	ld	r31, X
    6eac:	11 97       	sbiw	r26, 0x01	; 1
    6eae:	02 84       	ldd	r0, Z+10	; 0x0a
    6eb0:	f3 85       	ldd	r31, Z+11	; 0x0b
    6eb2:	e0 2d       	mov	r30, r0
    6eb4:	cd 01       	movw	r24, r26
    6eb6:	09 95       	icall
    6eb8:	b5 e0       	ldi	r27, 0x05	; 5
    6eba:	db 9e       	mul	r13, r27
    6ebc:	c0 01       	movw	r24, r0
    6ebe:	11 24       	eor	r1, r1
    6ec0:	e9 81       	ldd	r30, Y+1	; 0x01
    6ec2:	fa 81       	ldd	r31, Y+2	; 0x02
    6ec4:	fc 83       	std	Y+4, r31	; 0x04
    6ec6:	eb 83       	std	Y+3, r30	; 0x03
    6ec8:	31 2c       	mov	r3, r1
    6eca:	21 2c       	mov	r2, r1
    6ecc:	9c 01       	movw	r18, r24
    6ece:	28 52       	subi	r18, 0x28	; 40
    6ed0:	3f 4f       	sbci	r19, 0xFF	; 255
    6ed2:	38 8f       	std	Y+24, r19	; 0x18
    6ed4:	2f 8b       	std	Y+23, r18	; 0x17
    6ed6:	4a 2d       	mov	r20, r10
    6ed8:	50 e0       	ldi	r21, 0x00	; 0
    6eda:	5e 8b       	std	Y+22, r21	; 0x16
    6edc:	4d 8b       	std	Y+21, r20	; 0x15
    6ede:	ef 89       	ldd	r30, Y+23	; 0x17
    6ee0:	f8 8d       	ldd	r31, Y+24	; 0x18
    6ee2:	e2 0d       	add	r30, r2
    6ee4:	f3 1d       	adc	r31, r3
    6ee6:	44 91       	lpm	r20, Z
    6ee8:	9e 82       	std	Y+6, r9	; 0x06
    6eea:	8d 82       	std	Y+5, r8	; 0x05
    6eec:	d1 2c       	mov	r13, r1
    6eee:	c1 2c       	mov	r12, r1
    6ef0:	69 81       	ldd	r22, Y+1	; 0x01
    6ef2:	7a 81       	ldd	r23, Y+2	; 0x02
    6ef4:	62 0d       	add	r22, r2
    6ef6:	73 1d       	adc	r23, r3
    6ef8:	7a 8b       	std	Y+18, r23	; 0x12
    6efa:	69 8b       	std	Y+17, r22	; 0x11
    6efc:	84 2f       	mov	r24, r20
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	9c 8b       	std	Y+20, r25	; 0x14
    6f02:	8b 8b       	std	Y+19, r24	; 0x13
    6f04:	e9 8d       	ldd	r30, Y+25	; 0x19
    6f06:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6f08:	a0 81       	ld	r26, Z
    6f0a:	b1 81       	ldd	r27, Z+1	; 0x01
    6f0c:	40 ff       	sbrs	r20, 0
    6f0e:	82 c0       	rjmp	.+260    	; 0x7014 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    6f10:	f1 e0       	ldi	r31, 0x01	; 1
    6f12:	bf 12       	cpse	r11, r31
    6f14:	6f c0       	rjmp	.+222    	; 0x6ff4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    6f16:	af 12       	cpse	r10, r31
    6f18:	6d c0       	rjmp	.+218    	; 0x6ff4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    6f1a:	1c 96       	adiw	r26, 0x0c	; 12
    6f1c:	ed 91       	ld	r30, X+
    6f1e:	fc 91       	ld	r31, X
    6f20:	2f 81       	ldd	r18, Y+7	; 0x07
    6f22:	38 85       	ldd	r19, Y+8	; 0x08
    6f24:	a4 01       	movw	r20, r8
    6f26:	4c 0d       	add	r20, r12
    6f28:	5d 1d       	adc	r21, r13
    6f2a:	69 89       	ldd	r22, Y+17	; 0x11
    6f2c:	7a 89       	ldd	r23, Y+18	; 0x12
    6f2e:	89 8d       	ldd	r24, Y+25	; 0x19
    6f30:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6f32:	09 95       	icall
    6f34:	eb 89       	ldd	r30, Y+19	; 0x13
    6f36:	fc 89       	ldd	r31, Y+20	; 0x14
    6f38:	f5 95       	asr	r31
    6f3a:	e7 95       	ror	r30
    6f3c:	4e 2f       	mov	r20, r30
    6f3e:	5f ef       	ldi	r21, 0xFF	; 255
    6f40:	c5 1a       	sub	r12, r21
    6f42:	d5 0a       	sbc	r13, r21
    6f44:	6d 81       	ldd	r22, Y+5	; 0x05
    6f46:	7e 81       	ldd	r23, Y+6	; 0x06
    6f48:	8d 89       	ldd	r24, Y+21	; 0x15
    6f4a:	9e 89       	ldd	r25, Y+22	; 0x16
    6f4c:	68 0f       	add	r22, r24
    6f4e:	79 1f       	adc	r23, r25
    6f50:	7e 83       	std	Y+6, r23	; 0x06
    6f52:	6d 83       	std	Y+5, r22	; 0x05
    6f54:	98 e0       	ldi	r25, 0x08	; 8
    6f56:	c9 16       	cp	r12, r25
    6f58:	d1 04       	cpc	r13, r1
    6f5a:	81 f6       	brne	.-96     	; 0x6efc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    6f5c:	af ef       	ldi	r26, 0xFF	; 255
    6f5e:	2a 1a       	sub	r2, r26
    6f60:	3a 0a       	sbc	r3, r26
    6f62:	eb 81       	ldd	r30, Y+3	; 0x03
    6f64:	fc 81       	ldd	r31, Y+4	; 0x04
    6f66:	e4 0d       	add	r30, r4
    6f68:	f5 1d       	adc	r31, r5
    6f6a:	fc 83       	std	Y+4, r31	; 0x04
    6f6c:	eb 83       	std	Y+3, r30	; 0x03
    6f6e:	f5 e0       	ldi	r31, 0x05	; 5
    6f70:	2f 16       	cp	r2, r31
    6f72:	31 04       	cpc	r3, r1
    6f74:	09 f0       	breq	.+2      	; 0x6f78 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    6f76:	b3 cf       	rjmp	.-154    	; 0x6ede <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    6f78:	2f 81       	ldd	r18, Y+7	; 0x07
    6f7a:	38 85       	ldd	r19, Y+8	; 0x08
    6f7c:	26 15       	cp	r18, r6
    6f7e:	37 05       	cpc	r19, r7
    6f80:	b9 f0       	breq	.+46     	; 0x6fb0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    6f82:	a9 8d       	ldd	r26, Y+25	; 0x19
    6f84:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6f86:	ed 91       	ld	r30, X+
    6f88:	fc 91       	ld	r31, X
    6f8a:	b1 e0       	ldi	r27, 0x01	; 1
    6f8c:	bb 12       	cpse	r11, r27
    6f8e:	57 c0       	rjmp	.+174    	; 0x703e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    6f90:	ab 12       	cpse	r10, r27
    6f92:	55 c0       	rjmp	.+170    	; 0x703e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    6f94:	69 81       	ldd	r22, Y+1	; 0x01
    6f96:	7a 81       	ldd	r23, Y+2	; 0x02
    6f98:	6b 5f       	subi	r22, 0xFB	; 251
    6f9a:	7f 4f       	sbci	r23, 0xFF	; 255
    6f9c:	00 88       	ldd	r0, Z+16	; 0x10
    6f9e:	f1 89       	ldd	r31, Z+17	; 0x11
    6fa0:	e0 2d       	mov	r30, r0
    6fa2:	83 01       	movw	r16, r6
    6fa4:	28 e0       	ldi	r18, 0x08	; 8
    6fa6:	30 e0       	ldi	r19, 0x00	; 0
    6fa8:	a4 01       	movw	r20, r8
    6faa:	89 8d       	ldd	r24, Y+25	; 0x19
    6fac:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6fae:	09 95       	icall
    6fb0:	a9 8d       	ldd	r26, Y+25	; 0x19
    6fb2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6fb4:	ed 91       	ld	r30, X+
    6fb6:	fc 91       	ld	r31, X
    6fb8:	11 97       	sbiw	r26, 0x01	; 1
    6fba:	06 88       	ldd	r0, Z+22	; 0x16
    6fbc:	f7 89       	ldd	r31, Z+23	; 0x17
    6fbe:	e0 2d       	mov	r30, r0
    6fc0:	cd 01       	movw	r24, r26
    6fc2:	6a 96       	adiw	r28, 0x1a	; 26
    6fc4:	0f b6       	in	r0, 0x3f	; 63
    6fc6:	f8 94       	cli
    6fc8:	de bf       	out	0x3e, r29	; 62
    6fca:	0f be       	out	0x3f, r0	; 63
    6fcc:	cd bf       	out	0x3d, r28	; 61
    6fce:	df 91       	pop	r29
    6fd0:	cf 91       	pop	r28
    6fd2:	1f 91       	pop	r17
    6fd4:	0f 91       	pop	r16
    6fd6:	ff 90       	pop	r15
    6fd8:	ef 90       	pop	r14
    6fda:	df 90       	pop	r13
    6fdc:	cf 90       	pop	r12
    6fde:	bf 90       	pop	r11
    6fe0:	af 90       	pop	r10
    6fe2:	9f 90       	pop	r9
    6fe4:	8f 90       	pop	r8
    6fe6:	7f 90       	pop	r7
    6fe8:	6f 90       	pop	r6
    6fea:	5f 90       	pop	r5
    6fec:	4f 90       	pop	r4
    6fee:	3f 90       	pop	r3
    6ff0:	2f 90       	pop	r2
    6ff2:	09 94       	ijmp
    6ff4:	1e 96       	adiw	r26, 0x0e	; 14
    6ff6:	ed 91       	ld	r30, X+
    6ff8:	fc 91       	ld	r31, X
    6ffa:	ef 80       	ldd	r14, Y+7	; 0x07
    6ffc:	f8 84       	ldd	r15, Y+8	; 0x08
    6ffe:	09 85       	ldd	r16, Y+9	; 0x09
    7000:	1a 85       	ldd	r17, Y+10	; 0x0a
    7002:	92 01       	movw	r18, r4
    7004:	4d 81       	ldd	r20, Y+5	; 0x05
    7006:	5e 81       	ldd	r21, Y+6	; 0x06
    7008:	6b 81       	ldd	r22, Y+3	; 0x03
    700a:	7c 81       	ldd	r23, Y+4	; 0x04
    700c:	89 8d       	ldd	r24, Y+25	; 0x19
    700e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7010:	09 95       	icall
    7012:	90 cf       	rjmp	.-224    	; 0x6f34 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    7014:	2f 81       	ldd	r18, Y+7	; 0x07
    7016:	38 85       	ldd	r19, Y+8	; 0x08
    7018:	26 15       	cp	r18, r6
    701a:	37 05       	cpc	r19, r7
    701c:	09 f4       	brne	.+2      	; 0x7020 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    701e:	8a cf       	rjmp	.-236    	; 0x6f34 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    7020:	31 e0       	ldi	r19, 0x01	; 1
    7022:	b3 12       	cpse	r11, r19
    7024:	07 c0       	rjmp	.+14     	; 0x7034 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    7026:	a3 12       	cpse	r10, r19
    7028:	05 c0       	rjmp	.+10     	; 0x7034 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    702a:	1c 96       	adiw	r26, 0x0c	; 12
    702c:	ed 91       	ld	r30, X+
    702e:	fc 91       	ld	r31, X
    7030:	93 01       	movw	r18, r6
    7032:	78 cf       	rjmp	.-272    	; 0x6f24 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    7034:	1e 96       	adiw	r26, 0x0e	; 14
    7036:	ed 91       	ld	r30, X+
    7038:	fc 91       	ld	r31, X
    703a:	73 01       	movw	r14, r6
    703c:	e0 cf       	rjmp	.-64     	; 0x6ffe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    703e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7040:	7c 85       	ldd	r23, Y+12	; 0x0c
    7042:	64 19       	sub	r22, r4
    7044:	75 09       	sbc	r23, r5
    7046:	06 84       	ldd	r0, Z+14	; 0x0e
    7048:	f7 85       	ldd	r31, Z+15	; 0x0f
    704a:	e0 2d       	mov	r30, r0
    704c:	73 01       	movw	r14, r6
    704e:	0f 85       	ldd	r16, Y+15	; 0x0f
    7050:	18 89       	ldd	r17, Y+16	; 0x10
    7052:	92 01       	movw	r18, r4
    7054:	a4 01       	movw	r20, r8
    7056:	89 8d       	ldd	r24, Y+25	; 0x19
    7058:	9a 8d       	ldd	r25, Y+26	; 0x1a
    705a:	09 95       	icall
    705c:	a9 cf       	rjmp	.-174    	; 0x6fb0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    705e:	f9 01       	movw	r30, r18
    7060:	34 96       	adiw	r30, 0x04	; 4
    7062:	94 91       	lpm	r25, Z
    7064:	32 97       	sbiw	r30, 0x02	; 2
    7066:	45 91       	lpm	r20, Z+
    7068:	54 91       	lpm	r21, Z
    706a:	d9 1a       	sub	r13, r25
    706c:	b7 e0       	ldi	r27, 0x07	; 7
    706e:	db 9e       	mul	r13, r27
    7070:	40 0d       	add	r20, r0
    7072:	51 1d       	adc	r21, r1
    7074:	11 24       	eor	r1, r1
    7076:	f9 01       	movw	r30, r18
    7078:	25 91       	lpm	r18, Z+
    707a:	34 91       	lpm	r19, Z
    707c:	3c 8b       	std	Y+20, r19	; 0x14
    707e:	2b 8b       	std	Y+19, r18	; 0x13
    7080:	fa 01       	movw	r30, r20
    7082:	25 90       	lpm	r2, Z+
    7084:	34 90       	lpm	r3, Z
    7086:	fa 01       	movw	r30, r20
    7088:	32 96       	adiw	r30, 0x02	; 2
    708a:	74 90       	lpm	r7, Z
    708c:	31 96       	adiw	r30, 0x01	; 1
    708e:	34 91       	lpm	r19, Z
    7090:	39 8b       	std	Y+17, r19	; 0x11
    7092:	32 96       	adiw	r30, 0x02	; 2
    7094:	64 90       	lpm	r6, Z
    7096:	31 96       	adiw	r30, 0x01	; 1
    7098:	44 90       	lpm	r4, Z
    709a:	41 e0       	ldi	r20, 0x01	; 1
    709c:	4c 15       	cp	r20, r12
    709e:	18 f0       	brcs	.+6      	; 0x70a6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    70a0:	4a 15       	cp	r20, r10
    70a2:	08 f0       	brcs	.+2      	; 0x70a6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    70a4:	7f c0       	rjmp	.+254    	; 0x71a4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    70a6:	66 2d       	mov	r22, r6
    70a8:	06 2c       	mov	r0, r6
    70aa:	00 0c       	add	r0, r0
    70ac:	77 0b       	sbc	r23, r23
    70ae:	7c 83       	std	Y+4, r23	; 0x04
    70b0:	6b 83       	std	Y+3, r22	; 0x03
    70b2:	84 2d       	mov	r24, r4
    70b4:	04 2c       	mov	r0, r4
    70b6:	00 0c       	add	r0, r0
    70b8:	99 0b       	sbc	r25, r25
    70ba:	9e 83       	std	Y+6, r25	; 0x06
    70bc:	8d 83       	std	Y+5, r24	; 0x05
    70be:	a9 8d       	ldd	r26, Y+25	; 0x19
    70c0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    70c2:	ed 91       	ld	r30, X+
    70c4:	fc 91       	ld	r31, X
    70c6:	11 97       	sbiw	r26, 0x01	; 1
    70c8:	02 84       	ldd	r0, Z+10	; 0x0a
    70ca:	f3 85       	ldd	r31, Z+11	; 0x0b
    70cc:	e0 2d       	mov	r30, r0
    70ce:	cd 01       	movw	r24, r26
    70d0:	09 95       	icall
    70d2:	51 2c       	mov	r5, r1
    70d4:	d1 2c       	mov	r13, r1
    70d6:	c1 2c       	mov	r12, r1
    70d8:	ea 2d       	mov	r30, r10
    70da:	f0 e0       	ldi	r31, 0x00	; 0
    70dc:	fa 87       	std	Y+10, r31	; 0x0a
    70de:	e9 87       	std	Y+9, r30	; 0x09
    70e0:	2b 2d       	mov	r18, r11
    70e2:	30 e0       	ldi	r19, 0x00	; 0
    70e4:	3c 87       	std	Y+12, r19	; 0x0c
    70e6:	2b 87       	std	Y+11, r18	; 0x0b
    70e8:	a4 01       	movw	r20, r8
    70ea:	44 0d       	add	r20, r4
    70ec:	51 1d       	adc	r21, r1
    70ee:	47 fc       	sbrc	r4, 7
    70f0:	5a 95       	dec	r21
    70f2:	58 8f       	std	Y+24, r21	; 0x18
    70f4:	4f 8b       	std	Y+23, r20	; 0x17
    70f6:	69 81       	ldd	r22, Y+1	; 0x01
    70f8:	7a 81       	ldd	r23, Y+2	; 0x02
    70fa:	66 0d       	add	r22, r6
    70fc:	71 1d       	adc	r23, r1
    70fe:	67 fc       	sbrc	r6, 7
    7100:	7a 95       	dec	r23
    7102:	7e 87       	std	Y+14, r23	; 0x0e
    7104:	6d 87       	std	Y+13, r22	; 0x0d
    7106:	79 89       	ldd	r23, Y+17	; 0x11
    7108:	c7 16       	cp	r12, r23
    710a:	08 f0       	brcs	.+2      	; 0x710e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    710c:	51 cf       	rjmp	.-350    	; 0x6fb0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    710e:	2c 2d       	mov	r18, r12
    7110:	30 e0       	ldi	r19, 0x00	; 0
    7112:	4d 81       	ldd	r20, Y+5	; 0x05
    7114:	5e 81       	ldd	r21, Y+6	; 0x06
    7116:	42 0f       	add	r20, r18
    7118:	53 1f       	adc	r21, r19
    711a:	a9 85       	ldd	r26, Y+9	; 0x09
    711c:	ba 85       	ldd	r27, Y+10	; 0x0a
    711e:	4a 9f       	mul	r20, r26
    7120:	c0 01       	movw	r24, r0
    7122:	4b 9f       	mul	r20, r27
    7124:	90 0d       	add	r25, r0
    7126:	5a 9f       	mul	r21, r26
    7128:	90 0d       	add	r25, r0
    712a:	11 24       	eor	r1, r1
    712c:	fc 01       	movw	r30, r24
    712e:	e8 0d       	add	r30, r8
    7130:	f9 1d       	adc	r31, r9
    7132:	f8 8b       	std	Y+16, r31	; 0x10
    7134:	ef 87       	std	Y+15, r30	; 0x0f
    7136:	85 2d       	mov	r24, r5
    7138:	61 2c       	mov	r6, r1
    713a:	4f 89       	ldd	r20, Y+23	; 0x17
    713c:	58 8d       	ldd	r21, Y+24	; 0x18
    713e:	42 0f       	add	r20, r18
    7140:	53 1f       	adc	r21, r19
    7142:	5e 8b       	std	Y+22, r21	; 0x16
    7144:	4d 8b       	std	Y+21, r20	; 0x15
    7146:	67 14       	cp	r6, r7
    7148:	08 f0       	brcs	.+2      	; 0x714c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    714a:	50 c0       	rjmp	.+160    	; 0x71ec <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    714c:	44 24       	eor	r4, r4
    714e:	43 94       	inc	r4
    7150:	48 0e       	add	r4, r24
    7152:	87 70       	andi	r24, 0x07	; 7
    7154:	41 f4       	brne	.+16     	; 0x7166 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    7156:	c1 01       	movw	r24, r2
    7158:	01 96       	adiw	r24, 0x01	; 1
    715a:	eb 89       	ldd	r30, Y+19	; 0x13
    715c:	fc 89       	ldd	r31, Y+20	; 0x14
    715e:	e2 0d       	add	r30, r2
    7160:	f3 1d       	adc	r31, r3
    7162:	d4 90       	lpm	r13, Z
    7164:	1c 01       	movw	r2, r24
    7166:	d7 fe       	sbrs	r13, 7
    7168:	19 c0       	rjmp	.+50     	; 0x719c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    716a:	a9 8d       	ldd	r26, Y+25	; 0x19
    716c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    716e:	ed 91       	ld	r30, X+
    7170:	fc 91       	ld	r31, X
    7172:	66 2d       	mov	r22, r6
    7174:	70 e0       	ldi	r23, 0x00	; 0
    7176:	b1 e0       	ldi	r27, 0x01	; 1
    7178:	bb 12       	cpse	r11, r27
    717a:	19 c0       	rjmp	.+50     	; 0x71ae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    717c:	ab 12       	cpse	r10, r27
    717e:	17 c0       	rjmp	.+46     	; 0x71ae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    7180:	2d 85       	ldd	r18, Y+13	; 0x0d
    7182:	3e 85       	ldd	r19, Y+14	; 0x0e
    7184:	62 0f       	add	r22, r18
    7186:	73 1f       	adc	r23, r19
    7188:	04 84       	ldd	r0, Z+12	; 0x0c
    718a:	f5 85       	ldd	r31, Z+13	; 0x0d
    718c:	e0 2d       	mov	r30, r0
    718e:	2f 81       	ldd	r18, Y+7	; 0x07
    7190:	38 85       	ldd	r19, Y+8	; 0x08
    7192:	4d 89       	ldd	r20, Y+21	; 0x15
    7194:	5e 89       	ldd	r21, Y+22	; 0x16
    7196:	89 8d       	ldd	r24, Y+25	; 0x19
    7198:	9a 8d       	ldd	r25, Y+26	; 0x1a
    719a:	09 95       	icall
    719c:	dd 0c       	add	r13, r13
    719e:	63 94       	inc	r6
    71a0:	84 2d       	mov	r24, r4
    71a2:	d1 cf       	rjmp	.-94     	; 0x7146 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    71a4:	1e 82       	std	Y+6, r1	; 0x06
    71a6:	1d 82       	std	Y+5, r1	; 0x05
    71a8:	1c 82       	std	Y+4, r1	; 0x04
    71aa:	1b 82       	std	Y+3, r1	; 0x03
    71ac:	88 cf       	rjmp	.-240    	; 0x70be <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    71ae:	4b 81       	ldd	r20, Y+3	; 0x03
    71b0:	5c 81       	ldd	r21, Y+4	; 0x04
    71b2:	64 0f       	add	r22, r20
    71b4:	75 1f       	adc	r23, r21
    71b6:	ab 85       	ldd	r26, Y+11	; 0x0b
    71b8:	bc 85       	ldd	r27, Y+12	; 0x0c
    71ba:	6a 9f       	mul	r22, r26
    71bc:	c0 01       	movw	r24, r0
    71be:	6b 9f       	mul	r22, r27
    71c0:	90 0d       	add	r25, r0
    71c2:	7a 9f       	mul	r23, r26
    71c4:	90 0d       	add	r25, r0
    71c6:	11 24       	eor	r1, r1
    71c8:	69 81       	ldd	r22, Y+1	; 0x01
    71ca:	7a 81       	ldd	r23, Y+2	; 0x02
    71cc:	68 0f       	add	r22, r24
    71ce:	79 1f       	adc	r23, r25
    71d0:	06 84       	ldd	r0, Z+14	; 0x0e
    71d2:	f7 85       	ldd	r31, Z+15	; 0x0f
    71d4:	e0 2d       	mov	r30, r0
    71d6:	ef 80       	ldd	r14, Y+7	; 0x07
    71d8:	f8 84       	ldd	r15, Y+8	; 0x08
    71da:	09 85       	ldd	r16, Y+9	; 0x09
    71dc:	1a 85       	ldd	r17, Y+10	; 0x0a
    71de:	9d 01       	movw	r18, r26
    71e0:	4f 85       	ldd	r20, Y+15	; 0x0f
    71e2:	58 89       	ldd	r21, Y+16	; 0x10
    71e4:	89 8d       	ldd	r24, Y+25	; 0x19
    71e6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    71e8:	09 95       	icall
    71ea:	d8 cf       	rjmp	.-80     	; 0x719c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    71ec:	57 0c       	add	r5, r7
    71ee:	c3 94       	inc	r12
    71f0:	8a cf       	rjmp	.-236    	; 0x7106 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    71f2:	6a 96       	adiw	r28, 0x1a	; 26
    71f4:	0f b6       	in	r0, 0x3f	; 63
    71f6:	f8 94       	cli
    71f8:	de bf       	out	0x3e, r29	; 62
    71fa:	0f be       	out	0x3f, r0	; 63
    71fc:	cd bf       	out	0x3d, r28	; 61
    71fe:	df 91       	pop	r29
    7200:	cf 91       	pop	r28
    7202:	1f 91       	pop	r17
    7204:	0f 91       	pop	r16
    7206:	ff 90       	pop	r15
    7208:	ef 90       	pop	r14
    720a:	df 90       	pop	r13
    720c:	cf 90       	pop	r12
    720e:	bf 90       	pop	r11
    7210:	af 90       	pop	r10
    7212:	9f 90       	pop	r9
    7214:	8f 90       	pop	r8
    7216:	7f 90       	pop	r7
    7218:	6f 90       	pop	r6
    721a:	5f 90       	pop	r5
    721c:	4f 90       	pop	r4
    721e:	3f 90       	pop	r3
    7220:	2f 90       	pop	r2
    7222:	08 95       	ret

00007224 <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    7224:	8f 92       	push	r8
    7226:	9f 92       	push	r9
    7228:	af 92       	push	r10
    722a:	cf 92       	push	r12
    722c:	ef 92       	push	r14
    722e:	ff 92       	push	r15
    7230:	0f 93       	push	r16
    7232:	1f 93       	push	r17
    7234:	cf 93       	push	r28
    7236:	df 93       	push	r29
    7238:	ec 01       	movw	r28, r24
    723a:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    723c:	88 8d       	ldd	r24, Y+24	; 0x18
    723e:	99 8d       	ldd	r25, Y+25	; 0x19
    7240:	00 97       	sbiw	r24, 0x00	; 0
    7242:	09 f0       	breq	.+2      	; 0x7246 <Adafruit_GFX::write(unsigned char)+0x22>
    7244:	50 c0       	rjmp	.+160    	; 0x72e6 <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    7246:	6a 30       	cpi	r22, 0x0A	; 10
    7248:	d1 f4       	brne	.+52     	; 0x727e <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    724a:	1c 86       	std	Y+12, r1	; 0x0c
    724c:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    724e:	8c 89       	ldd	r24, Y+20	; 0x14
    7250:	48 e0       	ldi	r20, 0x08	; 8
    7252:	84 9f       	mul	r24, r20
    7254:	90 01       	movw	r18, r0
    7256:	11 24       	eor	r1, r1
    7258:	8d 85       	ldd	r24, Y+13	; 0x0d
    725a:	9e 85       	ldd	r25, Y+14	; 0x0e
    725c:	82 0f       	add	r24, r18
    725e:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    7260:	9e 87       	std	Y+14, r25	; 0x0e
    7262:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    7264:	81 e0       	ldi	r24, 0x01	; 1
    7266:	90 e0       	ldi	r25, 0x00	; 0
    7268:	df 91       	pop	r29
    726a:	cf 91       	pop	r28
    726c:	1f 91       	pop	r17
    726e:	0f 91       	pop	r16
    7270:	ff 90       	pop	r15
    7272:	ef 90       	pop	r14
    7274:	cf 90       	pop	r12
    7276:	af 90       	pop	r10
    7278:	9f 90       	pop	r9
    727a:	8f 90       	pop	r8
    727c:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    727e:	6d 30       	cpi	r22, 0x0D	; 13
    7280:	89 f3       	breq	.-30     	; 0x7264 <Adafruit_GFX::write(unsigned char)+0x40>
    7282:	cb 88       	ldd	r12, Y+19	; 0x13
    7284:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    7286:	8e 89       	ldd	r24, Y+22	; 0x16
    7288:	88 23       	and	r24, r24
    728a:	c1 f0       	breq	.+48     	; 0x72bc <Adafruit_GFX::write(unsigned char)+0x98>
    728c:	8b 85       	ldd	r24, Y+11	; 0x0b
    728e:	9c 85       	ldd	r25, Y+12	; 0x0c
    7290:	36 e0       	ldi	r19, 0x06	; 6
    7292:	c3 9e       	mul	r12, r19
    7294:	80 0d       	add	r24, r0
    7296:	91 1d       	adc	r25, r1
    7298:	11 24       	eor	r1, r1
    729a:	4f 81       	ldd	r20, Y+7	; 0x07
    729c:	58 85       	ldd	r21, Y+8	; 0x08
    729e:	48 17       	cp	r20, r24
    72a0:	59 07       	cpc	r21, r25
    72a2:	64 f4       	brge	.+24     	; 0x72bc <Adafruit_GFX::write(unsigned char)+0x98>
    72a4:	4d 85       	ldd	r20, Y+13	; 0x0d
    72a6:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    72a8:	1c 86       	std	Y+12, r1	; 0x0c
    72aa:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    72ac:	38 e0       	ldi	r19, 0x08	; 8
    72ae:	a3 9e       	mul	r10, r19
    72b0:	c0 01       	movw	r24, r0
    72b2:	11 24       	eor	r1, r1
    72b4:	84 0f       	add	r24, r20
    72b6:	95 1f       	adc	r25, r21
    72b8:	9e 87       	std	Y+14, r25	; 0x0e
    72ba:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    72bc:	e9 88       	ldd	r14, Y+17	; 0x11
    72be:	fa 88       	ldd	r15, Y+18	; 0x12
    72c0:	0f 85       	ldd	r16, Y+15	; 0x0f
    72c2:	18 89       	ldd	r17, Y+16	; 0x10
    72c4:	4d 85       	ldd	r20, Y+13	; 0x0d
    72c6:	5e 85       	ldd	r21, Y+14	; 0x0e
    72c8:	6b 85       	ldd	r22, Y+11	; 0x0b
    72ca:	7c 85       	ldd	r23, Y+12	; 0x0c
    72cc:	ce 01       	movw	r24, r28
    72ce:	85 dd       	rcall	.-1270   	; 0x6dda <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    72d0:	2b 89       	ldd	r18, Y+19	; 0x13
    72d2:	8b 85       	ldd	r24, Y+11	; 0x0b
    72d4:	9c 85       	ldd	r25, Y+12	; 0x0c
    72d6:	46 e0       	ldi	r20, 0x06	; 6
    72d8:	24 9f       	mul	r18, r20
    72da:	80 0d       	add	r24, r0
    72dc:	91 1d       	adc	r25, r1
    72de:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    72e0:	9c 87       	std	Y+12, r25	; 0x0c
    72e2:	8b 87       	std	Y+11, r24	; 0x0b
    72e4:	bf cf       	rjmp	.-130    	; 0x7264 <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    72e6:	6a 30       	cpi	r22, 0x0A	; 10
    72e8:	69 f4       	brne	.+26     	; 0x7304 <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    72ea:	1c 86       	std	Y+12, r1	; 0x0c
    72ec:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    72ee:	fc 01       	movw	r30, r24
    72f0:	36 96       	adiw	r30, 0x06	; 6
    72f2:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    72f4:	2c 89       	ldd	r18, Y+20	; 0x14
    72f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    72f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    72fa:	e2 9f       	mul	r30, r18
    72fc:	80 0d       	add	r24, r0
    72fe:	91 1d       	adc	r25, r1
    7300:	11 24       	eor	r1, r1
    7302:	ae cf       	rjmp	.-164    	; 0x7260 <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    7304:	6d 30       	cpi	r22, 0x0D	; 13
    7306:	09 f4       	brne	.+2      	; 0x730a <Adafruit_GFX::write(unsigned char)+0xe6>
    7308:	ad cf       	rjmp	.-166    	; 0x7264 <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    730a:	fc 01       	movw	r30, r24
    730c:	34 96       	adiw	r30, 0x04	; 4
    730e:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    7310:	63 17       	cp	r22, r19
    7312:	08 f4       	brcc	.+2      	; 0x7316 <Adafruit_GFX::write(unsigned char)+0xf2>
    7314:	a7 cf       	rjmp	.-178    	; 0x7264 <Adafruit_GFX::write(unsigned char)+0x40>
    7316:	31 96       	adiw	r30, 0x01	; 1
    7318:	e4 91       	lpm	r30, Z
    731a:	e6 17       	cp	r30, r22
    731c:	08 f4       	brcc	.+2      	; 0x7320 <Adafruit_GFX::write(unsigned char)+0xfc>
    731e:	a2 cf       	rjmp	.-188    	; 0x7264 <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    7320:	fc 01       	movw	r30, r24
    7322:	32 96       	adiw	r30, 0x02	; 2
    7324:	85 90       	lpm	r8, Z+
    7326:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    7328:	46 2f       	mov	r20, r22
    732a:	43 1b       	sub	r20, r19
    732c:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    732e:	47 e0       	ldi	r20, 0x07	; 7
    7330:	34 9f       	mul	r19, r20
    7332:	80 0c       	add	r8, r0
    7334:	91 1c       	adc	r9, r1
    7336:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    7338:	f4 01       	movw	r30, r8
    733a:	32 96       	adiw	r30, 0x02	; 2
    733c:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    733e:	31 96       	adiw	r30, 0x01	; 1
    7340:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    7342:	33 23       	and	r19, r19
    7344:	a1 f1       	breq	.+104    	; 0x73ae <Adafruit_GFX::write(unsigned char)+0x18a>
    7346:	ee 23       	and	r30, r30
    7348:	91 f1       	breq	.+100    	; 0x73ae <Adafruit_GFX::write(unsigned char)+0x18a>
    734a:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    734c:	f4 01       	movw	r30, r8
    734e:	35 96       	adiw	r30, 0x05	; 5
    7350:	e4 91       	lpm	r30, Z
    7352:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    7354:	4e 89       	ldd	r20, Y+22	; 0x16
    7356:	44 23       	and	r20, r20
    7358:	01 f1       	breq	.+64     	; 0x739a <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    735a:	0e 2e       	mov	r0, r30
    735c:	00 0c       	add	r0, r0
    735e:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    7360:	e3 0f       	add	r30, r19
    7362:	f1 1d       	adc	r31, r1
    7364:	ce 9e       	mul	r12, r30
    7366:	a0 01       	movw	r20, r0
    7368:	cf 9e       	mul	r12, r31
    736a:	50 0d       	add	r21, r0
    736c:	11 24       	eor	r1, r1
    736e:	6b 85       	ldd	r22, Y+11	; 0x0b
    7370:	7c 85       	ldd	r23, Y+12	; 0x0c
    7372:	46 0f       	add	r20, r22
    7374:	57 1f       	adc	r21, r23
    7376:	6f 81       	ldd	r22, Y+7	; 0x07
    7378:	78 85       	ldd	r23, Y+8	; 0x08
    737a:	64 17       	cp	r22, r20
    737c:	75 07       	cpc	r23, r21
    737e:	6c f4       	brge	.+26     	; 0x739a <Adafruit_GFX::write(unsigned char)+0x176>
    7380:	4d 85       	ldd	r20, Y+13	; 0x0d
    7382:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    7384:	1c 86       	std	Y+12, r1	; 0x0c
    7386:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    7388:	fc 01       	movw	r30, r24
    738a:	36 96       	adiw	r30, 0x06	; 6
    738c:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    738e:	ae 9e       	mul	r10, r30
    7390:	40 0d       	add	r20, r0
    7392:	51 1d       	adc	r21, r1
    7394:	11 24       	eor	r1, r1
    7396:	5e 87       	std	Y+14, r21	; 0x0e
    7398:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    739a:	e9 88       	ldd	r14, Y+17	; 0x11
    739c:	fa 88       	ldd	r15, Y+18	; 0x12
    739e:	0f 85       	ldd	r16, Y+15	; 0x0f
    73a0:	18 89       	ldd	r17, Y+16	; 0x10
    73a2:	4d 85       	ldd	r20, Y+13	; 0x0d
    73a4:	5e 85       	ldd	r21, Y+14	; 0x0e
    73a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    73a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    73aa:	ce 01       	movw	r24, r28
    73ac:	16 dd       	rcall	.-1492   	; 0x6dda <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    73ae:	f4 01       	movw	r30, r8
    73b0:	34 96       	adiw	r30, 0x04	; 4
    73b2:	e4 91       	lpm	r30, Z
    73b4:	2b 89       	ldd	r18, Y+19	; 0x13
    73b6:	8b 85       	ldd	r24, Y+11	; 0x0b
    73b8:	9c 85       	ldd	r25, Y+12	; 0x0c
    73ba:	e2 9f       	mul	r30, r18
    73bc:	80 0d       	add	r24, r0
    73be:	91 1d       	adc	r25, r1
    73c0:	11 24       	eor	r1, r1
    73c2:	8e cf       	rjmp	.-228    	; 0x72e0 <Adafruit_GFX::write(unsigned char)+0xbc>

000073c4 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    73c4:	61 11       	cpse	r22, r1
    73c6:	01 c0       	rjmp	.+2      	; 0x73ca <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    73c8:	61 e0       	ldi	r22, 0x01	; 1
    73ca:	fc 01       	movw	r30, r24
    73cc:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    73ce:	41 11       	cpse	r20, r1
    73d0:	01 c0       	rjmp	.+2      	; 0x73d4 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    73d2:	41 e0       	ldi	r20, 0x01	; 1
    73d4:	fc 01       	movw	r30, r24
    73d6:	44 8b       	std	Z+20, r20	; 0x14
}
    73d8:	08 95       	ret

000073da <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    73da:	46 2f       	mov	r20, r22
    73dc:	f3 cf       	rjmp	.-26     	; 0x73c4 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

000073de <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    73de:	ff 92       	push	r15
    73e0:	0f 93       	push	r16
    73e2:	1f 93       	push	r17
    73e4:	cf 93       	push	r28
    73e6:	df 93       	push	r29
    73e8:	ec 01       	movw	r28, r24
    73ea:	f0 2e       	mov	r15, r16
    73ec:	10 e0       	ldi	r17, 0x00	; 0
    73ee:	00 e0       	ldi	r16, 0x00	; 0
    73f0:	20 d0       	rcall	.+64     	; 0x7432 <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    73f2:	83 e3       	ldi	r24, 0x33	; 51
    73f4:	99 e0       	ldi	r25, 0x09	; 9
    73f6:	99 83       	std	Y+1, r25	; 0x01
    73f8:	88 83       	st	Y, r24
    73fa:	fe 01       	movw	r30, r28
    73fc:	e6 5e       	subi	r30, 0xE6	; 230
    73fe:	fe 4f       	sbci	r31, 0xFE	; 254
    7400:	f0 82       	st	Z, r15
    7402:	31 96       	adiw	r30, 0x01	; 1
    7404:	10 82       	st	Z, r1
    7406:	c4 5e       	subi	r28, 0xE4	; 228
    7408:	de 4f       	sbci	r29, 0xFE	; 254
    740a:	18 82       	st	Y, r1
    740c:	df 91       	pop	r29
    740e:	cf 91       	pop	r28
    7410:	1f 91       	pop	r17
    7412:	0f 91       	pop	r16
    7414:	ff 90       	pop	r15
    7416:	08 95       	ret

00007418 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    7418:	8d 5d       	subi	r24, 0xDD	; 221
    741a:	9e 4f       	sbci	r25, 0xFE	; 254
    741c:	dc 01       	movw	r26, r24
    741e:	ed 91       	ld	r30, X+
    7420:	fc 91       	ld	r31, X
    7422:	30 97       	sbiw	r30, 0x00	; 0
    7424:	09 f0       	breq	.+2      	; 0x7428 <FastLED_NeoMatrix::show()+0x10>
    7426:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    7428:	60 91 cc 10 	lds	r22, 0x10CC	; 0x8010cc <FastLED>
    742c:	8c ec       	ldi	r24, 0xCC	; 204
    742e:	90 e1       	ldi	r25, 0x10	; 16
    7430:	48 c4       	rjmp	.+2192   	; 0x7cc2 <CFastLED::show(unsigned char)>

00007432 <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
}

// Call without a value to reset (disable passthrough)
void Framebuffer_GFX::setPassThruColor(void) {
  passThruFlag = false;
}
    7432:	af 92       	push	r10
    7434:	bf 92       	push	r11
    7436:	cf 92       	push	r12
    7438:	df 92       	push	r13
    743a:	ef 92       	push	r14
    743c:	ff 92       	push	r15
    743e:	0f 93       	push	r16
    7440:	1f 93       	push	r17
    7442:	cf 93       	push	r28
    7444:	df 93       	push	r29
    7446:	ec 01       	movw	r28, r24
    7448:	5b 01       	movw	r10, r22
    744a:	7a 01       	movw	r14, r20
    744c:	69 01       	movw	r12, r18
    744e:	a9 01       	movw	r20, r18
    7450:	b7 01       	movw	r22, r14
    7452:	6d db       	rcall	.-2342   	; 0x6b2e <Adafruit_GFX::Adafruit_GFX(int, int)>
    7454:	86 e9       	ldi	r24, 0x96	; 150
    7456:	99 e0       	ldi	r25, 0x09	; 9
    7458:	99 83       	std	Y+1, r25	; 0x01
    745a:	88 83       	st	Y, r24
    745c:	fe 01       	movw	r30, r28
    745e:	e3 5e       	subi	r30, 0xE3	; 227
    7460:	fe 4f       	sbci	r31, 0xFE	; 254
    7462:	f1 82       	std	Z+1, r15	; 0x01
    7464:	e0 82       	st	Z, r14
    7466:	32 96       	adiw	r30, 0x02	; 2
    7468:	d1 82       	std	Z+1, r13	; 0x01
    746a:	c0 82       	st	Z, r12
    746c:	32 96       	adiw	r30, 0x02	; 2
    746e:	80 e1       	ldi	r24, 0x10	; 16
    7470:	97 e2       	ldi	r25, 0x27	; 39
    7472:	91 83       	std	Z+1, r25	; 0x01
    7474:	80 83       	st	Z, r24
    7476:	36 96       	adiw	r30, 0x06	; 6
    7478:	11 82       	std	Z+1, r1	; 0x01
    747a:	10 82       	st	Z, r1
    747c:	3a 96       	adiw	r30, 0x0a	; 10
    747e:	10 82       	st	Z, r1
    7480:	3c 97       	sbiw	r30, 0x0c	; 12
    7482:	b1 82       	std	Z+1, r11	; 0x01
    7484:	a0 82       	st	Z, r10
    7486:	32 97       	sbiw	r30, 0x02	; 2
    7488:	11 83       	std	Z+1, r17	; 0x01
    748a:	00 83       	st	Z, r16
    748c:	39 97       	sbiw	r30, 0x09	; 9
    748e:	10 82       	st	Z, r1
    7490:	31 96       	adiw	r30, 0x01	; 1
    7492:	10 82       	st	Z, r1
    7494:	31 96       	adiw	r30, 0x01	; 1
    7496:	10 82       	st	Z, r1
    7498:	c7 5d       	subi	r28, 0xD7	; 215
    749a:	de 4f       	sbci	r29, 0xFE	; 254
    749c:	ce 9c       	mul	r12, r14
    749e:	c0 01       	movw	r24, r0
    74a0:	cf 9c       	mul	r12, r15
    74a2:	90 0d       	add	r25, r0
    74a4:	de 9c       	mul	r13, r14
    74a6:	90 0d       	add	r25, r0
    74a8:	11 24       	eor	r1, r1
    74aa:	b0 e0       	ldi	r27, 0x00	; 0
    74ac:	a0 e0       	ldi	r26, 0x00	; 0
    74ae:	88 83       	st	Y, r24
    74b0:	99 83       	std	Y+1, r25	; 0x01
    74b2:	aa 83       	std	Y+2, r26	; 0x02
    74b4:	bb 83       	std	Y+3, r27	; 0x03
    74b6:	df 91       	pop	r29
    74b8:	cf 91       	pop	r28
    74ba:	1f 91       	pop	r17
    74bc:	0f 91       	pop	r16
    74be:	ff 90       	pop	r15
    74c0:	ef 90       	pop	r14
    74c2:	df 90       	pop	r13
    74c4:	cf 90       	pop	r12
    74c6:	bf 90       	pop	r11
    74c8:	af 90       	pop	r10
    74ca:	08 95       	ret

000074cc <Framebuffer_GFX::begin()>:
    74cc:	cf 93       	push	r28
    74ce:	df 93       	push	r29
    74d0:	ec 01       	movw	r28, r24
    74d2:	6b e5       	ldi	r22, 0x5B	; 91
    74d4:	79 e0       	ldi	r23, 0x09	; 9
    74d6:	8c e5       	ldi	r24, 0x5C	; 92
    74d8:	91 e1       	ldi	r25, 0x11	; 17
    74da:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    74de:	fe 01       	movw	r30, r28
    74e0:	e3 5e       	subi	r30, 0xE3	; 227
    74e2:	fe 4f       	sbci	r31, 0xFE	; 254
    74e4:	40 81       	ld	r20, Z
    74e6:	51 81       	ldd	r21, Z+1	; 0x01
    74e8:	70 e0       	ldi	r23, 0x00	; 0
    74ea:	60 e0       	ldi	r22, 0x00	; 0
    74ec:	20 e0       	ldi	r18, 0x00	; 0
    74ee:	8c e5       	ldi	r24, 0x5C	; 92
    74f0:	91 e1       	ldi	r25, 0x11	; 17
    74f2:	0e 94 30 49 	call	0x9260	; 0x9260 <Print::printNumberDec(unsigned long, unsigned char)>
    74f6:	6a e7       	ldi	r22, 0x7A	; 122
    74f8:	79 e0       	ldi	r23, 0x09	; 9
    74fa:	8c e5       	ldi	r24, 0x5C	; 92
    74fc:	91 e1       	ldi	r25, 0x11	; 17
    74fe:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    7502:	fe 01       	movw	r30, r28
    7504:	e1 5e       	subi	r30, 0xE1	; 225
    7506:	fe 4f       	sbci	r31, 0xFE	; 254
    7508:	40 81       	ld	r20, Z
    750a:	51 81       	ldd	r21, Z+1	; 0x01
    750c:	70 e0       	ldi	r23, 0x00	; 0
    750e:	60 e0       	ldi	r22, 0x00	; 0
    7510:	20 e0       	ldi	r18, 0x00	; 0
    7512:	8c e5       	ldi	r24, 0x5C	; 92
    7514:	91 e1       	ldi	r25, 0x11	; 17
    7516:	0e 94 30 49 	call	0x9260	; 0x9260 <Print::printNumberDec(unsigned long, unsigned char)>
    751a:	64 e8       	ldi	r22, 0x84	; 132
    751c:	79 e0       	ldi	r23, 0x09	; 9
    751e:	8c e5       	ldi	r24, 0x5C	; 92
    7520:	91 e1       	ldi	r25, 0x11	; 17
    7522:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    7526:	c7 5d       	subi	r28, 0xD7	; 215
    7528:	de 4f       	sbci	r29, 0xFE	; 254
    752a:	48 81       	ld	r20, Y
    752c:	59 81       	ldd	r21, Y+1	; 0x01
    752e:	6a 81       	ldd	r22, Y+2	; 0x02
    7530:	7b 81       	ldd	r23, Y+3	; 0x03
    7532:	20 e0       	ldi	r18, 0x00	; 0
    7534:	8c e5       	ldi	r24, 0x5C	; 92
    7536:	91 e1       	ldi	r25, 0x11	; 17
    7538:	0e 94 30 49 	call	0x9260	; 0x9260 <Print::printNumberDec(unsigned long, unsigned char)>
    753c:	8c e5       	ldi	r24, 0x5C	; 92
    753e:	91 e1       	ldi	r25, 0x11	; 17
    7540:	df 91       	pop	r29
    7542:	cf 91       	pop	r28
    7544:	0c 94 16 49 	jmp	0x922c	; 0x922c <Print::println()>

00007548 <Framebuffer_GFX::expandColor(unsigned int)>:
    7548:	fc 01       	movw	r30, r24
    754a:	ef 2f       	mov	r30, r31
    754c:	ff 27       	eor	r31, r31
    754e:	e6 95       	lsr	r30
    7550:	e6 95       	lsr	r30
    7552:	e6 95       	lsr	r30
    7554:	e8 5e       	subi	r30, 0xE8	; 232
    7556:	f9 4f       	sbci	r31, 0xF9	; 249
    7558:	24 91       	lpm	r18, Z
    755a:	fc 01       	movw	r30, r24
    755c:	35 e0       	ldi	r19, 0x05	; 5
    755e:	f6 95       	lsr	r31
    7560:	e7 95       	ror	r30
    7562:	3a 95       	dec	r19
    7564:	e1 f7       	brne	.-8      	; 0x755e <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    7566:	ef 73       	andi	r30, 0x3F	; 63
    7568:	ff 27       	eor	r31, r31
    756a:	e8 52       	subi	r30, 0x28	; 40
    756c:	fa 4f       	sbci	r31, 0xFA	; 250
    756e:	64 91       	lpm	r22, Z
    7570:	8f 71       	andi	r24, 0x1F	; 31
    7572:	99 27       	eor	r25, r25
    7574:	fc 01       	movw	r30, r24
    7576:	e8 5e       	subi	r30, 0xE8	; 232
    7578:	f9 4f       	sbci	r31, 0xF9	; 249
    757a:	e4 91       	lpm	r30, Z
    757c:	70 e0       	ldi	r23, 0x00	; 0
    757e:	90 e0       	ldi	r25, 0x00	; 0
    7580:	80 e0       	ldi	r24, 0x00	; 0
    7582:	98 2f       	mov	r25, r24
    7584:	87 2f       	mov	r24, r23
    7586:	76 2f       	mov	r23, r22
    7588:	66 27       	eor	r22, r22
    758a:	82 2b       	or	r24, r18
    758c:	6e 2b       	or	r22, r30
    758e:	08 95       	ret

00007590 <Framebuffer_GFX::fillScreen(unsigned int)>:
    7590:	8f 92       	push	r8
    7592:	9f 92       	push	r9
    7594:	af 92       	push	r10
    7596:	bf 92       	push	r11
    7598:	cf 92       	push	r12
    759a:	df 92       	push	r13
    759c:	ef 92       	push	r14
    759e:	ff 92       	push	r15
    75a0:	cf 93       	push	r28
    75a2:	df 93       	push	r29
    75a4:	ec 01       	movw	r28, r24
    75a6:	cb 01       	movw	r24, r22
    75a8:	fe 01       	movw	r30, r28
    75aa:	ef 5c       	subi	r30, 0xCF	; 207
    75ac:	fe 4f       	sbci	r31, 0xFE	; 254
    75ae:	20 81       	ld	r18, Z
    75b0:	22 23       	and	r18, r18
    75b2:	39 f1       	breq	.+78     	; 0x7602 <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    75b4:	34 97       	sbiw	r30, 0x04	; 4
    75b6:	60 81       	ld	r22, Z
    75b8:	71 81       	ldd	r23, Z+1	; 0x01
    75ba:	82 81       	ldd	r24, Z+2	; 0x02
    75bc:	30 e0       	ldi	r19, 0x00	; 0
    75be:	20 e0       	ldi	r18, 0x00	; 0
    75c0:	c1 2c       	mov	r12, r1
    75c2:	d1 2c       	mov	r13, r1
    75c4:	76 01       	movw	r14, r12
    75c6:	de 01       	movw	r26, r28
    75c8:	a7 5d       	subi	r26, 0xD7	; 215
    75ca:	be 4f       	sbci	r27, 0xFE	; 254
    75cc:	cb 5d       	subi	r28, 0xDB	; 219
    75ce:	de 4f       	sbci	r29, 0xFE	; 254
    75d0:	8d 90       	ld	r8, X+
    75d2:	9d 90       	ld	r9, X+
    75d4:	ad 90       	ld	r10, X+
    75d6:	bc 90       	ld	r11, X
    75d8:	13 97       	sbiw	r26, 0x03	; 3
    75da:	c8 14       	cp	r12, r8
    75dc:	d9 04       	cpc	r13, r9
    75de:	ea 04       	cpc	r14, r10
    75e0:	fb 04       	cpc	r15, r11
    75e2:	88 f4       	brcc	.+34     	; 0x7606 <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    75e4:	e8 81       	ld	r30, Y
    75e6:	f9 81       	ldd	r31, Y+1	; 0x01
    75e8:	e2 0f       	add	r30, r18
    75ea:	f3 1f       	adc	r31, r19
    75ec:	80 83       	st	Z, r24
    75ee:	71 83       	std	Z+1, r23	; 0x01
    75f0:	62 83       	std	Z+2, r22	; 0x02
    75f2:	9f ef       	ldi	r25, 0xFF	; 255
    75f4:	c9 1a       	sub	r12, r25
    75f6:	d9 0a       	sbc	r13, r25
    75f8:	e9 0a       	sbc	r14, r25
    75fa:	f9 0a       	sbc	r15, r25
    75fc:	2d 5f       	subi	r18, 0xFD	; 253
    75fe:	3f 4f       	sbci	r19, 0xFF	; 255
    7600:	e7 cf       	rjmp	.-50     	; 0x75d0 <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    7602:	a2 df       	rcall	.-188    	; 0x7548 <Framebuffer_GFX::expandColor(unsigned int)>
    7604:	db cf       	rjmp	.-74     	; 0x75bc <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    7606:	df 91       	pop	r29
    7608:	cf 91       	pop	r28
    760a:	ff 90       	pop	r15
    760c:	ef 90       	pop	r14
    760e:	df 90       	pop	r13
    7610:	cf 90       	pop	r12
    7612:	bf 90       	pop	r11
    7614:	af 90       	pop	r10
    7616:	9f 90       	pop	r9
    7618:	8f 90       	pop	r8
    761a:	08 95       	ret

0000761c <Framebuffer_GFX::CRGBtoint32(CRGB)>:
    761c:	0f 93       	push	r16
    761e:	1f 93       	push	r17
    7620:	fc 01       	movw	r30, r24
    7622:	60 81       	ld	r22, Z
    7624:	70 e0       	ldi	r23, 0x00	; 0
    7626:	90 e0       	ldi	r25, 0x00	; 0
    7628:	80 e0       	ldi	r24, 0x00	; 0
    762a:	cb 01       	movw	r24, r22
    762c:	77 27       	eor	r23, r23
    762e:	66 27       	eor	r22, r22
    7630:	01 81       	ldd	r16, Z+1	; 0x01
    7632:	10 e0       	ldi	r17, 0x00	; 0
    7634:	10 2f       	mov	r17, r16
    7636:	00 27       	eor	r16, r16
    7638:	01 2e       	mov	r0, r17
    763a:	00 0c       	add	r0, r0
    763c:	22 0b       	sbc	r18, r18
    763e:	33 0b       	sbc	r19, r19
    7640:	60 0f       	add	r22, r16
    7642:	71 1f       	adc	r23, r17
    7644:	82 1f       	adc	r24, r18
    7646:	93 1f       	adc	r25, r19
    7648:	22 81       	ldd	r18, Z+2	; 0x02
    764a:	62 0f       	add	r22, r18
    764c:	71 1d       	adc	r23, r1
    764e:	81 1d       	adc	r24, r1
    7650:	91 1d       	adc	r25, r1
    7652:	1f 91       	pop	r17
    7654:	0f 91       	pop	r16
    7656:	08 95       	ret

00007658 <Framebuffer_GFX::XY(int, int)>:

int Framebuffer_GFX::XY(int16_t x, int16_t y) {
    7658:	6f 92       	push	r6
    765a:	7f 92       	push	r7
    765c:	9f 92       	push	r9
    765e:	af 92       	push	r10
    7660:	bf 92       	push	r11
    7662:	cf 92       	push	r12
    7664:	df 92       	push	r13
    7666:	ef 92       	push	r14
    7668:	ff 92       	push	r15
    766a:	0f 93       	push	r16
    766c:	1f 93       	push	r17
    766e:	cf 93       	push	r28
    7670:	df 93       	push	r29
    7672:	ec 01       	movw	r28, r24
    7674:	cb 01       	movw	r24, r22
    7676:	8a 01       	movw	r16, r20
  // If you send an out of bounds value, you get an special result 
  // pointing to the last pixel. It doesn't look great, but better
  // than crashing. Still, fix the upstream code.
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;
    7678:	77 fd       	sbrc	r23, 7
    767a:	0c c0       	rjmp	.+24     	; 0x7694 <Framebuffer_GFX::XY(int, int)+0x3c>
    767c:	57 fd       	sbrc	r21, 7
    767e:	0a c0       	rjmp	.+20     	; 0x7694 <Framebuffer_GFX::XY(int, int)+0x3c>
    7680:	2f 81       	ldd	r18, Y+7	; 0x07
    7682:	38 85       	ldd	r19, Y+8	; 0x08
    7684:	62 17       	cp	r22, r18
    7686:	73 07       	cpc	r23, r19
    7688:	2c f4       	brge	.+10     	; 0x7694 <Framebuffer_GFX::XY(int, int)+0x3c>
    768a:	29 85       	ldd	r18, Y+9	; 0x09
    768c:	3a 85       	ldd	r19, Y+10	; 0x0a
    768e:	42 17       	cp	r20, r18
    7690:	53 07       	cpc	r21, r19
    7692:	9c f0       	brlt	.+38     	; 0x76ba <Framebuffer_GFX::XY(int, int)+0x62>
    7694:	c7 5d       	subi	r28, 0xD7	; 215
    7696:	de 4f       	sbci	r29, 0xFE	; 254
    7698:	88 81       	ld	r24, Y
    769a:	99 81       	ldd	r25, Y+1	; 0x01
    769c:	01 97       	sbiw	r24, 0x01	; 1
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}
    769e:	df 91       	pop	r29
    76a0:	cf 91       	pop	r28
    76a2:	1f 91       	pop	r17
    76a4:	0f 91       	pop	r16
    76a6:	ff 90       	pop	r15
    76a8:	ef 90       	pop	r14
    76aa:	df 90       	pop	r13
    76ac:	cf 90       	pop	r12
    76ae:	bf 90       	pop	r11
    76b0:	af 90       	pop	r10
    76b2:	9f 90       	pop	r9
    76b4:	7f 90       	pop	r7
    76b6:	6f 90       	pop	r6
    76b8:	08 95       	ret
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;

  int16_t t;
  switch(rotation) {
    76ba:	2d 89       	ldd	r18, Y+21	; 0x15
    76bc:	22 30       	cpi	r18, 0x02	; 2
    76be:	d9 f0       	breq	.+54     	; 0x76f6 <Framebuffer_GFX::XY(int, int)+0x9e>
    76c0:	23 30       	cpi	r18, 0x03	; 3
    76c2:	51 f1       	breq	.+84     	; 0x7718 <Framebuffer_GFX::XY(int, int)+0xc0>
    76c4:	21 30       	cpi	r18, 0x01	; 1
    76c6:	41 f4       	brne	.+16     	; 0x76d8 <Framebuffer_GFX::XY(int, int)+0x80>
   case 1:
    t = x;
    x = WIDTH  - 1 - y;
    76c8:	2b 81       	ldd	r18, Y+3	; 0x03
    76ca:	3c 81       	ldd	r19, Y+4	; 0x04
    76cc:	21 50       	subi	r18, 0x01	; 1
    76ce:	31 09       	sbc	r19, r1
    76d0:	24 1b       	sub	r18, r20
    76d2:	35 0b       	sbc	r19, r21
    76d4:	8b 01       	movw	r16, r22
    76d6:	c9 01       	movw	r24, r18
    break;
  }

  int tileOffset = 0, pixelOffset;

  if(remapFn) { // Custom X/Y remapping function
    76d8:	fe 01       	movw	r30, r28
    76da:	e9 5d       	subi	r30, 0xD9	; 217
    76dc:	fe 4f       	sbci	r31, 0xFE	; 254
    76de:	01 90       	ld	r0, Z+
    76e0:	f0 81       	ld	r31, Z
    76e2:	e0 2d       	mov	r30, r0
    76e4:	30 97       	sbiw	r30, 0x00	; 0
    76e6:	09 f1       	breq	.+66     	; 0x772a <Framebuffer_GFX::XY(int, int)+0xd2>
    pixelOffset = (*remapFn)(x, y);
    76e8:	b8 01       	movw	r22, r16
    76ea:	09 95       	icall
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    76ec:	50 e0       	ldi	r21, 0x00	; 0
    76ee:	40 e0       	ldi	r20, 0x00	; 0
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
    76f0:	84 0f       	add	r24, r20
    76f2:	95 1f       	adc	r25, r21
    76f4:	d4 cf       	rjmp	.-88     	; 0x769e <Framebuffer_GFX::XY(int, int)+0x46>
    t = x;
    x = WIDTH  - 1 - y;
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
    76f6:	2b 81       	ldd	r18, Y+3	; 0x03
    76f8:	3c 81       	ldd	r19, Y+4	; 0x04
    76fa:	21 50       	subi	r18, 0x01	; 1
    76fc:	31 09       	sbc	r19, r1
    76fe:	a9 01       	movw	r20, r18
    7700:	46 1b       	sub	r20, r22
    7702:	57 0b       	sbc	r21, r23
    7704:	ca 01       	movw	r24, r20
    y = HEIGHT - 1 - y;
    7706:	2d 81       	ldd	r18, Y+5	; 0x05
    7708:	3e 81       	ldd	r19, Y+6	; 0x06
    770a:	21 50       	subi	r18, 0x01	; 1
    770c:	31 09       	sbc	r19, r1
    770e:	f9 01       	movw	r30, r18
    7710:	e0 1b       	sub	r30, r16
    7712:	f1 0b       	sbc	r31, r17
    7714:	8f 01       	movw	r16, r30
    7716:	e0 cf       	rjmp	.-64     	; 0x76d8 <Framebuffer_GFX::XY(int, int)+0x80>
    break;
   case 3:
    t = x;
    x = y;
    y = HEIGHT - 1 - t;
    7718:	2d 81       	ldd	r18, Y+5	; 0x05
    771a:	3e 81       	ldd	r19, Y+6	; 0x06
    771c:	21 50       	subi	r18, 0x01	; 1
    771e:	31 09       	sbc	r19, r1
    7720:	26 1b       	sub	r18, r22
    7722:	37 0b       	sbc	r19, r23
    7724:	ca 01       	movw	r24, r20
    7726:	89 01       	movw	r16, r18
    7728:	d7 cf       	rjmp	.-82     	; 0x76d8 <Framebuffer_GFX::XY(int, int)+0x80>

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    772a:	fe 01       	movw	r30, r28
    772c:	e6 5e       	subi	r30, 0xE6	; 230
    772e:	fe 4f       	sbci	r31, 0xFE	; 254
    7730:	d0 80       	ld	r13, Z
    7732:	fd 2d       	mov	r31, r13
    7734:	f3 70       	andi	r31, 0x03	; 3
    7736:	cf 2e       	mov	r12, r31
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    7738:	fe 01       	movw	r30, r28
    773a:	e5 5e       	subi	r30, 0xE5	; 229
    773c:	fe 4f       	sbci	r31, 0xFE	; 254
    773e:	b0 80       	ld	r11, Z
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    7740:	50 e0       	ldi	r21, 0x00	; 0
    7742:	40 e0       	ldi	r20, 0x00	; 0
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    7744:	bb 20       	and	r11, r11
    7746:	09 f4       	brne	.+2      	; 0x774a <Framebuffer_GFX::XY(int, int)+0xf2>
    7748:	64 c0       	rjmp	.+200    	; 0x7812 <Framebuffer_GFX::XY(int, int)+0x1ba>
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
    774a:	32 96       	adiw	r30, 0x02	; 2
    774c:	e0 80       	ld	r14, Z
    774e:	f1 80       	ldd	r15, Z+1	; 0x01
    7750:	b7 01       	movw	r22, r14
    7752:	0e 94 fb 4d 	call	0x9bf6	; 0x9bf6 <__udivmodhi4>
    7756:	9b 01       	movw	r18, r22
    7758:	98 2e       	mov	r9, r24
    775a:	a9 2e       	mov	r10, r25
      major = y / matrixHeight,           // start (will swap later if needed)
    775c:	32 96       	adiw	r30, 0x02	; 2
    775e:	60 80       	ld	r6, Z
    7760:	71 80       	ldd	r7, Z+1	; 0x01
    7762:	c8 01       	movw	r24, r16
    7764:	b3 01       	movw	r22, r6
    7766:	0e 94 fb 4d 	call	0x9bf6	; 0x9bf6 <__udivmodhi4>
    776a:	db 01       	movw	r26, r22
    776c:	58 2f       	mov	r21, r24
    776e:	49 2f       	mov	r20, r25
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
    7770:	89 2d       	mov	r24, r9
    7772:	9a 2d       	mov	r25, r10
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
    7774:	05 2f       	mov	r16, r21
    7776:	14 2f       	mov	r17, r20

      // Determine corner of entry, flip axes if needed
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
    7778:	d5 fe       	sbrs	r13, 5
    777a:	06 c0       	rjmp	.+12     	; 0x7788 <Framebuffer_GFX::XY(int, int)+0x130>
    777c:	4b 2d       	mov	r20, r11
    777e:	41 50       	subi	r20, 0x01	; 1
    7780:	55 0b       	sbc	r21, r21
    7782:	42 1b       	sub	r20, r18
    7784:	53 0b       	sbc	r21, r19
    7786:	9a 01       	movw	r18, r20
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
    7788:	d4 fe       	sbrs	r13, 4
    778a:	09 c0       	rjmp	.+18     	; 0x779e <Framebuffer_GFX::XY(int, int)+0x146>
    778c:	ae 01       	movw	r20, r28
    778e:	44 5e       	subi	r20, 0xE4	; 228
    7790:	5e 4f       	sbci	r21, 0xFE	; 254
    7792:	fa 01       	movw	r30, r20
    7794:	60 81       	ld	r22, Z
    7796:	61 50       	subi	r22, 0x01	; 1
    7798:	77 0b       	sbc	r23, r23
    779a:	6a 1b       	sub	r22, r26
    779c:	7b 0b       	sbc	r23, r27

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
    779e:	d6 fc       	sbrc	r13, 6
    77a0:	11 c0       	rjmp	.+34     	; 0x77c4 <Framebuffer_GFX::XY(int, int)+0x16c>
        majorScale = tilesX;
    77a2:	4b 2d       	mov	r20, r11
    77a4:	50 e0       	ldi	r21, 0x00	; 0
    77a6:	b6 2f       	mov	r27, r22
    77a8:	a7 2f       	mov	r26, r23
    77aa:	b9 01       	movw	r22, r18
    77ac:	2b 2f       	mov	r18, r27
    77ae:	3a 2f       	mov	r19, r26
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
    77b0:	d7 fc       	sbrc	r13, 7
    77b2:	0e c0       	rjmp	.+28     	; 0x77d0 <Framebuffer_GFX::XY(int, int)+0x178>
        // pixel math later.
        if(major & 1) {
          corner ^= NEO_MATRIX_CORNER;
          tile = (major + 1) * majorScale - 1 - minor;
        } else {
          tile =  major      * majorScale     + minor;
    77b4:	24 9f       	mul	r18, r20
    77b6:	d0 01       	movw	r26, r0
    77b8:	25 9f       	mul	r18, r21
    77ba:	b0 0d       	add	r27, r0
    77bc:	34 9f       	mul	r19, r20
    77be:	b0 0d       	add	r27, r0
    77c0:	11 24       	eor	r1, r1
    77c2:	17 c0       	rjmp	.+46     	; 0x77f2 <Framebuffer_GFX::XY(int, int)+0x19a>
      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
        majorScale = tilesX;
      } else {
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
    77c4:	de 01       	movw	r26, r28
    77c6:	a4 5e       	subi	r26, 0xE4	; 228
    77c8:	be 4f       	sbci	r27, 0xFE	; 254
    77ca:	4c 91       	ld	r20, X
    77cc:	50 e0       	ldi	r21, 0x00	; 0
    77ce:	f0 cf       	rjmp	.-32     	; 0x77b0 <Framebuffer_GFX::XY(int, int)+0x158>
        tile = major * majorScale + minor;
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
    77d0:	20 ff       	sbrs	r18, 0
    77d2:	f0 cf       	rjmp	.-32     	; 0x77b4 <Framebuffer_GFX::XY(int, int)+0x15c>
          corner ^= NEO_MATRIX_CORNER;
    77d4:	ad 2d       	mov	r26, r13
    77d6:	a0 95       	com	r26
    77d8:	a3 70       	andi	r26, 0x03	; 3
    77da:	ca 2e       	mov	r12, r26
          tile = (major + 1) * majorScale - 1 - minor;
    77dc:	2f 5f       	subi	r18, 0xFF	; 255
    77de:	3f 4f       	sbci	r19, 0xFF	; 255
    77e0:	24 9f       	mul	r18, r20
    77e2:	d0 01       	movw	r26, r0
    77e4:	25 9f       	mul	r18, r21
    77e6:	b0 0d       	add	r27, r0
    77e8:	34 9f       	mul	r19, r20
    77ea:	b0 0d       	add	r27, r0
    77ec:	11 24       	eor	r1, r1
    77ee:	60 95       	com	r22
    77f0:	70 95       	com	r23
        } else {
          tile =  major      * majorScale     + minor;
    77f2:	6a 0f       	add	r22, r26
    77f4:	7b 1f       	adc	r23, r27
        }
      }

      // Index of first pixel in tile
      tileOffset = tile * matrixWidth * matrixHeight;
    77f6:	e6 9c       	mul	r14, r6
    77f8:	90 01       	movw	r18, r0
    77fa:	e7 9c       	mul	r14, r7
    77fc:	30 0d       	add	r19, r0
    77fe:	f6 9c       	mul	r15, r6
    7800:	30 0d       	add	r19, r0
    7802:	11 24       	eor	r1, r1
    7804:	26 9f       	mul	r18, r22
    7806:	a0 01       	movw	r20, r0
    7808:	27 9f       	mul	r18, r23
    780a:	50 0d       	add	r21, r0
    780c:	36 9f       	mul	r19, r22
    780e:	50 0d       	add	r21, r0
    7810:	11 24       	eor	r1, r1

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;
    7812:	98 01       	movw	r18, r16

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    7814:	6c 2d       	mov	r22, r12
    7816:	62 70       	andi	r22, 0x02	; 2
    7818:	59 f0       	breq	.+22     	; 0x7830 <Framebuffer_GFX::XY(int, int)+0x1d8>
    781a:	fe 01       	movw	r30, r28
    781c:	e3 5e       	subi	r30, 0xE3	; 227
    781e:	fe 4f       	sbci	r31, 0xFE	; 254
    7820:	60 81       	ld	r22, Z
    7822:	71 81       	ldd	r23, Z+1	; 0x01
    7824:	61 50       	subi	r22, 0x01	; 1
    7826:	71 09       	sbc	r23, r1
    7828:	fb 01       	movw	r30, r22
    782a:	e8 1b       	sub	r30, r24
    782c:	f9 0b       	sbc	r31, r25
    782e:	cf 01       	movw	r24, r30
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
    7830:	c0 fe       	sbrs	r12, 0
    7832:	09 c0       	rjmp	.+18     	; 0x7846 <Framebuffer_GFX::XY(int, int)+0x1ee>
    7834:	fe 01       	movw	r30, r28
    7836:	e1 5e       	subi	r30, 0xE1	; 225
    7838:	fe 4f       	sbci	r31, 0xFE	; 254
    783a:	20 81       	ld	r18, Z
    783c:	31 81       	ldd	r19, Z+1	; 0x01
    783e:	21 50       	subi	r18, 0x01	; 1
    7840:	31 09       	sbc	r19, r1
    7842:	20 1b       	sub	r18, r16
    7844:	31 0b       	sbc	r19, r17

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
    7846:	d2 fc       	sbrc	r13, 2
    7848:	13 c0       	rjmp	.+38     	; 0x7870 <Framebuffer_GFX::XY(int, int)+0x218>
      majorScale = matrixWidth;
    784a:	c3 5e       	subi	r28, 0xE3	; 227
    784c:	de 4f       	sbci	r29, 0xFE	; 254
    784e:	68 81       	ld	r22, Y
    7850:	79 81       	ldd	r23, Y+1	; 0x01
    7852:	f2 2f       	mov	r31, r18
    7854:	e3 2f       	mov	r30, r19
    7856:	9c 01       	movw	r18, r24
    7858:	8f 2f       	mov	r24, r31
    785a:	9e 2f       	mov	r25, r30
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    }

    // Determine pixel number within tile/matrix
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
    785c:	d3 fc       	sbrc	r13, 3
    785e:	0d c0       	rjmp	.+26     	; 0x787a <Framebuffer_GFX::XY(int, int)+0x222>
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
      else          pixelOffset =  major      * majorScale     + minor;
    7860:	86 9f       	mul	r24, r22
    7862:	f0 01       	movw	r30, r0
    7864:	87 9f       	mul	r24, r23
    7866:	f0 0d       	add	r31, r0
    7868:	96 9f       	mul	r25, r22
    786a:	f0 0d       	add	r31, r0
    786c:	11 24       	eor	r1, r1
    786e:	11 c0       	rjmp	.+34     	; 0x7892 <Framebuffer_GFX::XY(int, int)+0x23a>
    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
      majorScale = matrixWidth;
    } else {
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    7870:	c1 5e       	subi	r28, 0xE1	; 225
    7872:	de 4f       	sbci	r29, 0xFE	; 254
    7874:	68 81       	ld	r22, Y
    7876:	79 81       	ldd	r23, Y+1	; 0x01
    7878:	f1 cf       	rjmp	.-30     	; 0x785c <Framebuffer_GFX::XY(int, int)+0x204>
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
    787a:	80 ff       	sbrs	r24, 0
    787c:	f1 cf       	rjmp	.-30     	; 0x7860 <Framebuffer_GFX::XY(int, int)+0x208>
    787e:	01 96       	adiw	r24, 0x01	; 1
    7880:	86 9f       	mul	r24, r22
    7882:	f0 01       	movw	r30, r0
    7884:	87 9f       	mul	r24, r23
    7886:	f0 0d       	add	r31, r0
    7888:	96 9f       	mul	r25, r22
    788a:	f0 0d       	add	r31, r0
    788c:	11 24       	eor	r1, r1
    788e:	20 95       	com	r18
    7890:	30 95       	com	r19
      else          pixelOffset =  major      * majorScale     + minor;
    7892:	cf 01       	movw	r24, r30
    7894:	82 0f       	add	r24, r18
    7896:	93 1f       	adc	r25, r19
    7898:	2b cf       	rjmp	.-426    	; 0x76f0 <Framebuffer_GFX::XY(int, int)+0x98>

0000789a <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {
    789a:	9f 92       	push	r9
    789c:	af 92       	push	r10
    789e:	bf 92       	push	r11
    78a0:	cf 92       	push	r12
    78a2:	df 92       	push	r13
    78a4:	ef 92       	push	r14
    78a6:	ff 92       	push	r15
    78a8:	0f 93       	push	r16
    78aa:	1f 93       	push	r17
    78ac:	cf 93       	push	r28
    78ae:	df 93       	push	r29
    78b0:	ec 01       	movw	r28, r24

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    78b2:	77 fd       	sbrc	r23, 7
    78b4:	2b c0       	rjmp	.+86     	; 0x790c <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    78b6:	57 fd       	sbrc	r21, 7
    78b8:	29 c0       	rjmp	.+82     	; 0x790c <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    78ba:	8f 81       	ldd	r24, Y+7	; 0x07
    78bc:	98 85       	ldd	r25, Y+8	; 0x08
    78be:	68 17       	cp	r22, r24
    78c0:	79 07       	cpc	r23, r25
    78c2:	24 f5       	brge	.+72     	; 0x790c <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    78c4:	89 85       	ldd	r24, Y+9	; 0x09
    78c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    78c8:	48 17       	cp	r20, r24
    78ca:	59 07       	cpc	r21, r25
    78cc:	fc f4       	brge	.+62     	; 0x790c <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    78ce:	6a 01       	movw	r12, r20
    78d0:	7b 01       	movw	r14, r22

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    78d2:	fe 01       	movw	r30, r28
    78d4:	ef 5c       	subi	r30, 0xCF	; 207
    78d6:	fe 4f       	sbci	r31, 0xFE	; 254
    78d8:	80 81       	ld	r24, Z
    78da:	88 23       	and	r24, r24
    78dc:	19 f1       	breq	.+70     	; 0x7924 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    78de:	34 97       	sbiw	r30, 0x04	; 4
    78e0:	b0 80       	ld	r11, Z
    78e2:	a1 80       	ldd	r10, Z+1	; 0x01
    78e4:	92 80       	ldd	r9, Z+2	; 0x02
    78e6:	fe 01       	movw	r30, r28
    78e8:	eb 5d       	subi	r30, 0xDB	; 219
    78ea:	fe 4f       	sbci	r31, 0xFE	; 254
    78ec:	00 81       	ld	r16, Z
    78ee:	11 81       	ldd	r17, Z+1	; 0x01
    78f0:	a6 01       	movw	r20, r12
    78f2:	b7 01       	movw	r22, r14
    78f4:	ce 01       	movw	r24, r28
    78f6:	b0 de       	rcall	.-672    	; 0x7658 <Framebuffer_GFX::XY(int, int)>
    78f8:	fc 01       	movw	r30, r24
    78fa:	ee 0f       	add	r30, r30
    78fc:	ff 1f       	adc	r31, r31
    78fe:	e8 0f       	add	r30, r24
    7900:	f9 1f       	adc	r31, r25
    7902:	e0 0f       	add	r30, r16
    7904:	f1 1f       	adc	r31, r17
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    7906:	90 82       	st	Z, r9
        g = (colorcode >>  8) & 0xFF;
    7908:	a1 82       	std	Z+1, r10	; 0x01
        b = (colorcode >>  0) & 0xFF;
    790a:	b2 82       	std	Z+2, r11	; 0x02
}
    790c:	df 91       	pop	r29
    790e:	cf 91       	pop	r28
    7910:	1f 91       	pop	r17
    7912:	0f 91       	pop	r16
    7914:	ff 90       	pop	r15
    7916:	ef 90       	pop	r14
    7918:	df 90       	pop	r13
    791a:	cf 90       	pop	r12
    791c:	bf 90       	pop	r11
    791e:	af 90       	pop	r10
    7920:	9f 90       	pop	r9
    7922:	08 95       	ret

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    7924:	c9 01       	movw	r24, r18
    7926:	10 de       	rcall	.-992    	; 0x7548 <Framebuffer_GFX::expandColor(unsigned int)>
    7928:	b6 2e       	mov	r11, r22
    792a:	a7 2e       	mov	r10, r23
    792c:	98 2e       	mov	r9, r24
    792e:	db cf       	rjmp	.-74     	; 0x78e6 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

00007930 <Framebuffer_GFX::drawPixel(int, int, unsigned long)>:
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint32_t color) {
    7930:	ff 92       	push	r15
    7932:	0f 93       	push	r16
    7934:	1f 93       	push	r17
    7936:	cf 93       	push	r28
    7938:	df 93       	push	r29
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    793a:	77 fd       	sbrc	r23, 7
    793c:	21 c0       	rjmp	.+66     	; 0x7980 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    793e:	57 fd       	sbrc	r21, 7
    7940:	1f c0       	rjmp	.+62     	; 0x7980 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    7942:	dc 01       	movw	r26, r24
    7944:	17 96       	adiw	r26, 0x07	; 7
    7946:	ed 91       	ld	r30, X+
    7948:	fc 91       	ld	r31, X
    794a:	18 97       	sbiw	r26, 0x08	; 8
    794c:	6e 17       	cp	r22, r30
    794e:	7f 07       	cpc	r23, r31
    7950:	bc f4       	brge	.+46     	; 0x7980 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    7952:	19 96       	adiw	r26, 0x09	; 9
    7954:	ed 91       	ld	r30, X+
    7956:	fc 91       	ld	r31, X
    7958:	4e 17       	cp	r20, r30
    795a:	5f 07       	cpc	r21, r31
    795c:	8c f4       	brge	.+34     	; 0x7980 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    795e:	f2 2e       	mov	r15, r18
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif

  _fb[XY(x,y)] = color;
    7960:	fc 01       	movw	r30, r24
    7962:	eb 5d       	subi	r30, 0xDB	; 219
    7964:	fe 4f       	sbci	r31, 0xFE	; 254
    7966:	c0 81       	ld	r28, Z
    7968:	d1 81       	ldd	r29, Z+1	; 0x01
    796a:	76 de       	rcall	.-788    	; 0x7658 <Framebuffer_GFX::XY(int, int)>
    796c:	fc 01       	movw	r30, r24
    796e:	ee 0f       	add	r30, r30
    7970:	ff 1f       	adc	r31, r31
    7972:	e8 0f       	add	r30, r24
    7974:	f9 1f       	adc	r31, r25
    7976:	ec 0f       	add	r30, r28
    7978:	fd 1f       	adc	r31, r29
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    797a:	f0 82       	st	Z, r15
        g = (colorcode >>  8) & 0xFF;
    797c:	11 83       	std	Z+1, r17	; 0x01
        b = (colorcode >>  0) & 0xFF;
    797e:	02 83       	std	Z+2, r16	; 0x02
}
    7980:	df 91       	pop	r29
    7982:	cf 91       	pop	r28
    7984:	1f 91       	pop	r17
    7986:	0f 91       	pop	r16
    7988:	ff 90       	pop	r15
    798a:	08 95       	ret

0000798c <Framebuffer_GFX::drawPixel(int, int, CRGB)>:

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
    798c:	af 92       	push	r10
    798e:	bf 92       	push	r11
    7990:	cf 92       	push	r12
    7992:	df 92       	push	r13
    7994:	ef 92       	push	r14
    7996:	ff 92       	push	r15
    7998:	0f 93       	push	r16
    799a:	1f 93       	push	r17
    799c:	cf 93       	push	r28
    799e:	df 93       	push	r29
    79a0:	00 d0       	rcall	.+0      	; 0x79a2 <Framebuffer_GFX::drawPixel(int, int, CRGB)+0x16>
    79a2:	1f 92       	push	r1
    79a4:	cd b7       	in	r28, 0x3d	; 61
    79a6:	de b7       	in	r29, 0x3e	; 62
    79a8:	7c 01       	movw	r14, r24
    79aa:	6b 01       	movw	r12, r22
    79ac:	5a 01       	movw	r10, r20
    79ae:	f9 01       	movw	r30, r18
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    79b0:	80 81       	ld	r24, Z
    79b2:	89 83       	std	Y+1, r24	; 0x01
        g = rhs.g;
    79b4:	81 81       	ldd	r24, Z+1	; 0x01
    79b6:	8a 83       	std	Y+2, r24	; 0x02
        b = rhs.b;
    79b8:	82 81       	ldd	r24, Z+2	; 0x02
    79ba:	8b 83       	std	Y+3, r24	; 0x03
  drawPixel(x, y, CRGBtoint32(c));
    79bc:	ce 01       	movw	r24, r28
    79be:	01 96       	adiw	r24, 0x01	; 1
    79c0:	2d de       	rcall	.-934    	; 0x761c <Framebuffer_GFX::CRGBtoint32(CRGB)>
    79c2:	8b 01       	movw	r16, r22
    79c4:	9c 01       	movw	r18, r24
    79c6:	a5 01       	movw	r20, r10
    79c8:	b6 01       	movw	r22, r12
    79ca:	c7 01       	movw	r24, r14
    79cc:	b1 df       	rcall	.-158    	; 0x7930 <Framebuffer_GFX::drawPixel(int, int, unsigned long)>
}
    79ce:	0f 90       	pop	r0
    79d0:	0f 90       	pop	r0
    79d2:	0f 90       	pop	r0
    79d4:	df 91       	pop	r29
    79d6:	cf 91       	pop	r28
    79d8:	1f 91       	pop	r17
    79da:	0f 91       	pop	r16
    79dc:	ff 90       	pop	r15
    79de:	ef 90       	pop	r14
    79e0:	df 90       	pop	r13
    79e2:	cf 90       	pop	r12
    79e4:	bf 90       	pop	r11
    79e6:	af 90       	pop	r10
    79e8:	08 95       	ret

000079ea <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    79ea:	89 5d       	subi	r24, 0xD9	; 217
    79ec:	9e 4f       	sbci	r25, 0xFE	; 254
    79ee:	fc 01       	movw	r30, r24
    79f0:	71 83       	std	Z+1, r23	; 0x01
    79f2:	60 83       	st	Z, r22
}
    79f4:	08 95       	ret

000079f6 <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    79f6:	da 01       	movw	r26, r20
    79f8:	fc 01       	movw	r30, r24
    79fa:	90 e0       	ldi	r25, 0x00	; 0
    79fc:	80 e0       	ldi	r24, 0x00	; 0
    79fe:	86 17       	cp	r24, r22
    7a00:	97 07       	cpc	r25, r23
    7a02:	6c f4       	brge	.+26     	; 0x7a1e <fill_solid(CRGB*, int, CRGB const&)+0x28>
    7a04:	2c 91       	ld	r18, X
    7a06:	20 83       	st	Z, r18
    7a08:	11 96       	adiw	r26, 0x01	; 1
    7a0a:	2c 91       	ld	r18, X
    7a0c:	11 97       	sbiw	r26, 0x01	; 1
    7a0e:	21 83       	std	Z+1, r18	; 0x01
    7a10:	12 96       	adiw	r26, 0x02	; 2
    7a12:	2c 91       	ld	r18, X
    7a14:	12 97       	sbiw	r26, 0x02	; 2
    7a16:	22 83       	std	Z+2, r18	; 0x02
    7a18:	01 96       	adiw	r24, 0x01	; 1
    7a1a:	33 96       	adiw	r30, 0x03	; 3
    7a1c:	f0 cf       	rjmp	.-32     	; 0x79fe <fill_solid(CRGB*, int, CRGB const&)+0x8>
    7a1e:	08 95       	ret

00007a20 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    7a20:	0f 93       	push	r16
    7a22:	1f 93       	push	r17
    7a24:	cf 93       	push	r28
    7a26:	df 93       	push	r29
    7a28:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    7a2a:	84 2f       	mov	r24, r20
    7a2c:	82 95       	swap	r24
    7a2e:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    7a30:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    7a32:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    7a34:	a8 2f       	mov	r26, r24
    7a36:	aa 0f       	add	r26, r26
    7a38:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    7a3a:	a6 0f       	add	r26, r22
    7a3c:	b7 2f       	mov	r27, r23
    7a3e:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    7a40:	44 23       	and	r20, r20
    7a42:	19 f0       	breq	.+6      	; 0x7a4a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    7a44:	31 e0       	ldi	r19, 0x01	; 1
    7a46:	01 2b       	or	r16, r17
    7a48:	09 f4       	brne	.+2      	; 0x7a4c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    7a4a:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    7a4c:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    7a4e:	11 96       	adiw	r26, 0x01	; 1
    7a50:	5c 91       	ld	r21, X
    7a52:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    7a54:	12 96       	adiw	r26, 0x02	; 2
    7a56:	9c 91       	ld	r25, X
    7a58:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    7a5a:	33 23       	and	r19, r19
    7a5c:	09 f4       	brne	.+2      	; 0x7a60 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    7a5e:	2a c0       	rjmp	.+84     	; 0x7ab4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    7a60:	8f 30       	cpi	r24, 0x0F	; 15
    7a62:	11 f0       	breq	.+4      	; 0x7a68 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    7a64:	ed 01       	movw	r28, r26
    7a66:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    7a68:	42 95       	swap	r20
    7a6a:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    7a6c:	74 2f       	mov	r23, r20
    7a6e:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7a70:	67 9f       	mul	r22, r23
    7a72:	06 0e       	add	r0, r22
    7a74:	60 e0       	ldi	r22, 0x00	; 0
    7a76:	61 1d       	adc	r22, r1
    7a78:	38 81       	ld	r19, Y
    7a7a:	34 9f       	mul	r19, r20
    7a7c:	03 0e       	add	r0, r19
    7a7e:	30 e0       	ldi	r19, 0x00	; 0
    7a80:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    7a82:	63 0f       	add	r22, r19
    7a84:	57 9f       	mul	r21, r23
    7a86:	05 0e       	add	r0, r21
    7a88:	50 e0       	ldi	r21, 0x00	; 0
    7a8a:	51 1d       	adc	r21, r1
    7a8c:	39 81       	ldd	r19, Y+1	; 0x01
    7a8e:	34 9f       	mul	r19, r20
    7a90:	03 0e       	add	r0, r19
    7a92:	30 e0       	ldi	r19, 0x00	; 0
    7a94:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    7a96:	53 0f       	add	r21, r19
    7a98:	39 2f       	mov	r19, r25
    7a9a:	37 9f       	mul	r19, r23
    7a9c:	03 0e       	add	r0, r19
    7a9e:	30 e0       	ldi	r19, 0x00	; 0
    7aa0:	31 1d       	adc	r19, r1
    7aa2:	9a 81       	ldd	r25, Y+2	; 0x02
    7aa4:	79 2f       	mov	r23, r25
    7aa6:	74 9f       	mul	r23, r20
    7aa8:	07 0e       	add	r0, r23
    7aaa:	70 e0       	ldi	r23, 0x00	; 0
    7aac:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    7aae:	93 2f       	mov	r25, r19
    7ab0:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    7ab2:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    7ab4:	2f 3f       	cpi	r18, 0xFF	; 255
    7ab6:	c1 f0       	breq	.+48     	; 0x7ae8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    7ab8:	22 23       	and	r18, r18
    7aba:	f9 f0       	breq	.+62     	; 0x7afa <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    7abc:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    7abe:	66 23       	and	r22, r22
    7ac0:	21 f0       	breq	.+8      	; 0x7aca <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7ac2:	62 9f       	mul	r22, r18
    7ac4:	06 0e       	add	r0, r22
    7ac6:	60 e0       	ldi	r22, 0x00	; 0
    7ac8:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    7aca:	55 23       	and	r21, r21
    7acc:	21 f0       	breq	.+8      	; 0x7ad6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    7ace:	52 9f       	mul	r21, r18
    7ad0:	05 0e       	add	r0, r21
    7ad2:	50 e0       	ldi	r21, 0x00	; 0
    7ad4:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    7ad6:	99 23       	and	r25, r25
    7ad8:	31 f0       	breq	.+12     	; 0x7ae6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    7ada:	39 2f       	mov	r19, r25
    7adc:	32 9f       	mul	r19, r18
    7ade:	03 0e       	add	r0, r19
    7ae0:	30 e0       	ldi	r19, 0x00	; 0
    7ae2:	31 1d       	adc	r19, r1
    7ae4:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    7ae6:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    7ae8:	60 83       	st	Z, r22
    7aea:	51 83       	std	Z+1, r21	; 0x01
    7aec:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    7aee:	cf 01       	movw	r24, r30
    7af0:	df 91       	pop	r29
    7af2:	cf 91       	pop	r28
    7af4:	1f 91       	pop	r17
    7af6:	0f 91       	pop	r16
    7af8:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    7afa:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    7afc:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    7afe:	60 e0       	ldi	r22, 0x00	; 0
    7b00:	f3 cf       	rjmp	.-26     	; 0x7ae8 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

00007b02 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    7b02:	7f 92       	push	r7
    7b04:	8f 92       	push	r8
    7b06:	9f 92       	push	r9
    7b08:	af 92       	push	r10
    7b0a:	bf 92       	push	r11
    7b0c:	cf 92       	push	r12
    7b0e:	df 92       	push	r13
    7b10:	ef 92       	push	r14
    7b12:	ff 92       	push	r15
    7b14:	0f 93       	push	r16
    7b16:	1f 93       	push	r17
    7b18:	cf 93       	push	r28
    7b1a:	df 93       	push	r29
    7b1c:	fc 01       	movw	r30, r24
    7b1e:	69 01       	movw	r12, r18
    7b20:	10 82       	st	Z, r1
    7b22:	11 82       	std	Z+1, r1	; 0x01
    7b24:	12 82       	std	Z+2, r1	; 0x02
    7b26:	66 23       	and	r22, r22
    7b28:	b9 f1       	breq	.+110    	; 0x7b98 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    7b2a:	8a 01       	movw	r16, r20
    7b2c:	c1 e0       	ldi	r28, 0x01	; 1
    7b2e:	d0 e0       	ldi	r29, 0x00	; 0
    7b30:	86 2e       	mov	r8, r22
    7b32:	91 2c       	mov	r9, r1
    7b34:	b1 2c       	mov	r11, r1
    7b36:	a1 2c       	mov	r10, r1
    7b38:	d8 01       	movw	r26, r16
    7b3a:	2d 91       	ld	r18, X+
    7b3c:	8d 01       	movw	r16, r26
    7b3e:	22 23       	and	r18, r18
    7b40:	39 f1       	breq	.+78     	; 0x7b90 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    7b42:	7e 01       	movw	r14, r28
    7b44:	b1 e0       	ldi	r27, 0x01	; 1
    7b46:	eb 1a       	sub	r14, r27
    7b48:	f1 08       	sbc	r15, r1
    7b4a:	d6 01       	movw	r26, r12
    7b4c:	ae 0d       	add	r26, r14
    7b4e:	bf 1d       	adc	r27, r15
    7b50:	7c 90       	ld	r7, X
    7b52:	77 20       	and	r7, r7
    7b54:	e9 f0       	breq	.+58     	; 0x7b90 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    7b56:	30 e0       	ldi	r19, 0x00	; 0
    7b58:	50 e0       	ldi	r21, 0x00	; 0
    7b5a:	40 e0       	ldi	r20, 0x00	; 0
    7b5c:	2f 5f       	subi	r18, 0xFF	; 255
    7b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    7b60:	4f 4f       	sbci	r20, 0xFF	; 255
    7b62:	5f 4f       	sbci	r21, 0xFF	; 255
    7b64:	c5 01       	movw	r24, r10
    7b66:	b4 01       	movw	r22, r8
    7b68:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <__mulsi3>
    7b6c:	9b 01       	movw	r18, r22
    7b6e:	ac 01       	movw	r20, r24
    7b70:	87 2d       	mov	r24, r7
    7b72:	90 e0       	ldi	r25, 0x00	; 0
    7b74:	b0 e0       	ldi	r27, 0x00	; 0
    7b76:	a0 e0       	ldi	r26, 0x00	; 0
    7b78:	bc 01       	movw	r22, r24
    7b7a:	cd 01       	movw	r24, r26
    7b7c:	6f 5f       	subi	r22, 0xFF	; 255
    7b7e:	7f 4f       	sbci	r23, 0xFF	; 255
    7b80:	8f 4f       	sbci	r24, 0xFF	; 255
    7b82:	9f 4f       	sbci	r25, 0xFF	; 255
    7b84:	0e 94 ec 4d 	call	0x9bd8	; 0x9bd8 <__mulsi3>
    7b88:	df 01       	movw	r26, r30
    7b8a:	ae 0d       	add	r26, r14
    7b8c:	bf 1d       	adc	r27, r15
    7b8e:	8c 93       	st	X, r24
    7b90:	21 96       	adiw	r28, 0x01	; 1
    7b92:	c4 30       	cpi	r28, 0x04	; 4
    7b94:	d1 05       	cpc	r29, r1
    7b96:	81 f6       	brne	.-96     	; 0x7b38 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    7b98:	cf 01       	movw	r24, r30
    7b9a:	df 91       	pop	r29
    7b9c:	cf 91       	pop	r28
    7b9e:	1f 91       	pop	r17
    7ba0:	0f 91       	pop	r16
    7ba2:	ff 90       	pop	r15
    7ba4:	ef 90       	pop	r14
    7ba6:	df 90       	pop	r13
    7ba8:	cf 90       	pop	r12
    7baa:	bf 90       	pop	r11
    7bac:	af 90       	pop	r10
    7bae:	9f 90       	pop	r9
    7bb0:	8f 90       	pop	r8
    7bb2:	7f 90       	pop	r7
    7bb4:	08 95       	ret

00007bb6 <CFastLED::CFastLED()>:
    7bb6:	fc 01       	movw	r30, r24
    7bb8:	8f ef       	ldi	r24, 0xFF	; 255
    7bba:	80 83       	st	Z, r24
    7bbc:	12 82       	std	Z+2, r1	; 0x02
    7bbe:	11 82       	std	Z+1, r1	; 0x01
    7bc0:	14 86       	std	Z+12, r1	; 0x0c
    7bc2:	13 86       	std	Z+11, r1	; 0x0b
    7bc4:	8f ef       	ldi	r24, 0xFF	; 255
    7bc6:	9f ef       	ldi	r25, 0xFF	; 255
    7bc8:	dc 01       	movw	r26, r24
    7bca:	87 83       	std	Z+7, r24	; 0x07
    7bcc:	90 87       	std	Z+8, r25	; 0x08
    7bce:	a1 87       	std	Z+9, r26	; 0x09
    7bd0:	b2 87       	std	Z+10, r27	; 0x0a
    7bd2:	08 95       	ret

00007bd4 <CFastLED::clearData()>:
    7bd4:	cf 93       	push	r28
    7bd6:	df 93       	push	r29
    7bd8:	c0 91 ca 10 	lds	r28, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    7bdc:	d0 91 cb 10 	lds	r29, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    7be0:	20 97       	sbiw	r28, 0x00	; 0
    7be2:	89 f0       	breq	.+34     	; 0x7c06 <CFastLED::clearData()+0x32>
    7be4:	8a 81       	ldd	r24, Y+2	; 0x02
    7be6:	9b 81       	ldd	r25, Y+3	; 0x03
    7be8:	00 97       	sbiw	r24, 0x00	; 0
    7bea:	49 f0       	breq	.+18     	; 0x7bfe <CFastLED::clearData()+0x2a>
    7bec:	2d 85       	ldd	r18, Y+13	; 0x0d
    7bee:	3e 85       	ldd	r19, Y+14	; 0x0e
    7bf0:	a9 01       	movw	r20, r18
    7bf2:	44 0f       	add	r20, r20
    7bf4:	55 1f       	adc	r21, r21
    7bf6:	42 0f       	add	r20, r18
    7bf8:	53 1f       	adc	r21, r19
    7bfa:	60 e0       	ldi	r22, 0x00	; 0
    7bfc:	d0 d2       	rcall	.+1440   	; 0x819e <memset8>
    7bfe:	0c 80       	ldd	r0, Y+4	; 0x04
    7c00:	dd 81       	ldd	r29, Y+5	; 0x05
    7c02:	c0 2d       	mov	r28, r0
    7c04:	ed cf       	rjmp	.-38     	; 0x7be0 <CFastLED::clearData()+0xc>
    7c06:	df 91       	pop	r29
    7c08:	cf 91       	pop	r28
    7c0a:	08 95       	ret

00007c0c <CFastLED::countFPS(int)>:
    7c0c:	cf 92       	push	r12
    7c0e:	df 92       	push	r13
    7c10:	ef 92       	push	r14
    7c12:	ff 92       	push	r15
    7c14:	cf 93       	push	r28
    7c16:	df 93       	push	r29
    7c18:	ec 01       	movw	r28, r24
    7c1a:	20 91 c2 10 	lds	r18, 0x10C2	; 0x8010c2 <CFastLED::countFPS(int)::br>
    7c1e:	30 91 c3 10 	lds	r19, 0x10C3	; 0x8010c3 <CFastLED::countFPS(int)::br+0x1>
    7c22:	c9 01       	movw	r24, r18
    7c24:	01 96       	adiw	r24, 0x01	; 1
    7c26:	90 93 c3 10 	sts	0x10C3, r25	; 0x8010c3 <CFastLED::countFPS(int)::br+0x1>
    7c2a:	80 93 c2 10 	sts	0x10C2, r24	; 0x8010c2 <CFastLED::countFPS(int)::br>
    7c2e:	26 17       	cp	r18, r22
    7c30:	37 07       	cpc	r19, r23
    7c32:	0c f4       	brge	.+2      	; 0x7c36 <CFastLED::countFPS(int)+0x2a>
    7c34:	3f c0       	rjmp	.+126    	; 0x7cb4 <CFastLED::countFPS(int)+0xa8>
    7c36:	0f b6       	in	r0, 0x3f	; 63
    7c38:	f8 94       	cli
    7c3a:	20 91 dc 10 	lds	r18, 0x10DC	; 0x8010dc <timer0_millis_count>
    7c3e:	30 91 dd 10 	lds	r19, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    7c42:	40 91 de 10 	lds	r20, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    7c46:	50 91 df 10 	lds	r21, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    7c4a:	0f be       	out	0x3f, r0	; 63
    7c4c:	e8 ee       	ldi	r30, 0xE8	; 232
    7c4e:	f3 e0       	ldi	r31, 0x03	; 3
    7c50:	8e 9f       	mul	r24, r30
    7c52:	b0 01       	movw	r22, r0
    7c54:	8f 9f       	mul	r24, r31
    7c56:	70 0d       	add	r23, r0
    7c58:	9e 9f       	mul	r25, r30
    7c5a:	70 0d       	add	r23, r0
    7c5c:	11 24       	eor	r1, r1
    7c5e:	07 2e       	mov	r0, r23
    7c60:	00 0c       	add	r0, r0
    7c62:	88 0b       	sbc	r24, r24
    7c64:	99 0b       	sbc	r25, r25
    7c66:	c0 90 be 10 	lds	r12, 0x10BE	; 0x8010be <CFastLED::countFPS(int)::lastframe>
    7c6a:	d0 90 bf 10 	lds	r13, 0x10BF	; 0x8010bf <CFastLED::countFPS(int)::lastframe+0x1>
    7c6e:	e0 90 c0 10 	lds	r14, 0x10C0	; 0x8010c0 <CFastLED::countFPS(int)::lastframe+0x2>
    7c72:	f0 90 c1 10 	lds	r15, 0x10C1	; 0x8010c1 <CFastLED::countFPS(int)::lastframe+0x3>
    7c76:	2c 19       	sub	r18, r12
    7c78:	3d 09       	sbc	r19, r13
    7c7a:	4e 09       	sbc	r20, r14
    7c7c:	5f 09       	sbc	r21, r15
    7c7e:	0e 94 22 4e 	call	0x9c44	; 0x9c44 <__udivmodsi4>
    7c82:	3a 83       	std	Y+2, r19	; 0x02
    7c84:	29 83       	std	Y+1, r18	; 0x01
    7c86:	10 92 c3 10 	sts	0x10C3, r1	; 0x8010c3 <CFastLED::countFPS(int)::br+0x1>
    7c8a:	10 92 c2 10 	sts	0x10C2, r1	; 0x8010c2 <CFastLED::countFPS(int)::br>
    7c8e:	0f b6       	in	r0, 0x3f	; 63
    7c90:	f8 94       	cli
    7c92:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    7c96:	90 91 dd 10 	lds	r25, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    7c9a:	a0 91 de 10 	lds	r26, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    7c9e:	b0 91 df 10 	lds	r27, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    7ca2:	0f be       	out	0x3f, r0	; 63
    7ca4:	80 93 be 10 	sts	0x10BE, r24	; 0x8010be <CFastLED::countFPS(int)::lastframe>
    7ca8:	90 93 bf 10 	sts	0x10BF, r25	; 0x8010bf <CFastLED::countFPS(int)::lastframe+0x1>
    7cac:	a0 93 c0 10 	sts	0x10C0, r26	; 0x8010c0 <CFastLED::countFPS(int)::lastframe+0x2>
    7cb0:	b0 93 c1 10 	sts	0x10C1, r27	; 0x8010c1 <CFastLED::countFPS(int)::lastframe+0x3>
    7cb4:	df 91       	pop	r29
    7cb6:	cf 91       	pop	r28
    7cb8:	ff 90       	pop	r15
    7cba:	ef 90       	pop	r14
    7cbc:	df 90       	pop	r13
    7cbe:	cf 90       	pop	r12
    7cc0:	08 95       	ret

00007cc2 <CFastLED::show(unsigned char)>:
    7cc2:	8f 92       	push	r8
    7cc4:	9f 92       	push	r9
    7cc6:	af 92       	push	r10
    7cc8:	bf 92       	push	r11
    7cca:	cf 92       	push	r12
    7ccc:	df 92       	push	r13
    7cce:	ef 92       	push	r14
    7cd0:	ff 92       	push	r15
    7cd2:	0f 93       	push	r16
    7cd4:	1f 93       	push	r17
    7cd6:	cf 93       	push	r28
    7cd8:	df 93       	push	r29
    7cda:	00 d0       	rcall	.+0      	; 0x7cdc <CFastLED::show(unsigned char)+0x1a>
    7cdc:	1f 92       	push	r1
    7cde:	cd b7       	in	r28, 0x3d	; 61
    7ce0:	de b7       	in	r29, 0x3e	; 62
    7ce2:	7c 01       	movw	r14, r24
    7ce4:	d6 2e       	mov	r13, r22
    7ce6:	d7 01       	movw	r26, r14
    7ce8:	13 96       	adiw	r26, 0x03	; 3
    7cea:	0d 91       	ld	r16, X+
    7cec:	1d 91       	ld	r17, X+
    7cee:	2d 91       	ld	r18, X+
    7cf0:	3c 91       	ld	r19, X
    7cf2:	16 97       	sbiw	r26, 0x06	; 6
    7cf4:	01 15       	cp	r16, r1
    7cf6:	11 05       	cpc	r17, r1
    7cf8:	21 05       	cpc	r18, r1
    7cfa:	31 05       	cpc	r19, r1
    7cfc:	91 f0       	breq	.+36     	; 0x7d22 <CFastLED::show(unsigned char)+0x60>
    7cfe:	7d d6       	rcall	.+3322   	; 0x89fa <_micros>
    7d00:	80 90 c4 10 	lds	r8, 0x10C4	; 0x8010c4 <lastshow>
    7d04:	90 90 c5 10 	lds	r9, 0x10C5	; 0x8010c5 <lastshow+0x1>
    7d08:	a0 90 c6 10 	lds	r10, 0x10C6	; 0x8010c6 <lastshow+0x2>
    7d0c:	b0 90 c7 10 	lds	r11, 0x10C7	; 0x8010c7 <lastshow+0x3>
    7d10:	68 19       	sub	r22, r8
    7d12:	79 09       	sbc	r23, r9
    7d14:	8a 09       	sbc	r24, r10
    7d16:	9b 09       	sbc	r25, r11
    7d18:	60 17       	cp	r22, r16
    7d1a:	71 07       	cpc	r23, r17
    7d1c:	82 07       	cpc	r24, r18
    7d1e:	93 07       	cpc	r25, r19
    7d20:	10 f3       	brcs	.-60     	; 0x7ce6 <CFastLED::show(unsigned char)+0x24>
    7d22:	6b d6       	rcall	.+3286   	; 0x89fa <_micros>
    7d24:	60 93 c4 10 	sts	0x10C4, r22	; 0x8010c4 <lastshow>
    7d28:	70 93 c5 10 	sts	0x10C5, r23	; 0x8010c5 <lastshow+0x1>
    7d2c:	80 93 c6 10 	sts	0x10C6, r24	; 0x8010c6 <lastshow+0x2>
    7d30:	90 93 c7 10 	sts	0x10C7, r25	; 0x8010c7 <lastshow+0x3>
    7d34:	d7 01       	movw	r26, r14
    7d36:	1b 96       	adiw	r26, 0x0b	; 11
    7d38:	ed 91       	ld	r30, X+
    7d3a:	fc 91       	ld	r31, X
    7d3c:	1c 97       	sbiw	r26, 0x0c	; 12
    7d3e:	30 97       	sbiw	r30, 0x00	; 0
    7d40:	49 f0       	breq	.+18     	; 0x7d54 <CFastLED::show(unsigned char)+0x92>
    7d42:	17 96       	adiw	r26, 0x07	; 7
    7d44:	4d 91       	ld	r20, X+
    7d46:	5d 91       	ld	r21, X+
    7d48:	6d 91       	ld	r22, X+
    7d4a:	7c 91       	ld	r23, X
    7d4c:	1a 97       	sbiw	r26, 0x0a	; 10
    7d4e:	8d 2d       	mov	r24, r13
    7d50:	09 95       	icall
    7d52:	d8 2e       	mov	r13, r24
    7d54:	00 91 ca 10 	lds	r16, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    7d58:	10 91 cb 10 	lds	r17, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    7d5c:	01 15       	cp	r16, r1
    7d5e:	11 05       	cpc	r17, r1
    7d60:	61 f1       	breq	.+88     	; 0x7dba <CFastLED::show(unsigned char)+0xf8>
    7d62:	f8 01       	movw	r30, r16
    7d64:	c4 84       	ldd	r12, Z+12	; 0x0c
    7d66:	d7 01       	movw	r26, r14
    7d68:	11 96       	adiw	r26, 0x01	; 1
    7d6a:	8d 91       	ld	r24, X+
    7d6c:	9c 91       	ld	r25, X
    7d6e:	84 36       	cpi	r24, 0x64	; 100
    7d70:	91 05       	cpc	r25, r1
    7d72:	08 f4       	brcc	.+2      	; 0x7d76 <CFastLED::show(unsigned char)+0xb4>
    7d74:	14 86       	std	Z+12, r1	; 0x0c
    7d76:	d8 01       	movw	r26, r16
    7d78:	ed 91       	ld	r30, X+
    7d7a:	fc 91       	ld	r31, X
    7d7c:	a2 80       	ldd	r10, Z+2	; 0x02
    7d7e:	b3 80       	ldd	r11, Z+3	; 0x03
    7d80:	98 01       	movw	r18, r16
    7d82:	27 5f       	subi	r18, 0xF7	; 247
    7d84:	3f 4f       	sbci	r19, 0xFF	; 255
    7d86:	a8 01       	movw	r20, r16
    7d88:	4a 5f       	subi	r20, 0xFA	; 250
    7d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    7d8c:	6d 2d       	mov	r22, r13
    7d8e:	ce 01       	movw	r24, r28
    7d90:	01 96       	adiw	r24, 0x01	; 1
    7d92:	b7 de       	rcall	.-658    	; 0x7b02 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    7d94:	f8 01       	movw	r30, r16
    7d96:	45 85       	ldd	r20, Z+13	; 0x0d
    7d98:	56 85       	ldd	r21, Z+14	; 0x0e
    7d9a:	62 81       	ldd	r22, Z+2	; 0x02
    7d9c:	73 81       	ldd	r23, Z+3	; 0x03
    7d9e:	9e 01       	movw	r18, r28
    7da0:	2f 5f       	subi	r18, 0xFF	; 255
    7da2:	3f 4f       	sbci	r19, 0xFF	; 255
    7da4:	c8 01       	movw	r24, r16
    7da6:	f5 01       	movw	r30, r10
    7da8:	09 95       	icall
    7daa:	d8 01       	movw	r26, r16
    7dac:	1c 96       	adiw	r26, 0x0c	; 12
    7dae:	cc 92       	st	X, r12
    7db0:	1c 97       	sbiw	r26, 0x0c	; 12
    7db2:	14 96       	adiw	r26, 0x04	; 4
    7db4:	0d 91       	ld	r16, X+
    7db6:	1c 91       	ld	r17, X
    7db8:	d1 cf       	rjmp	.-94     	; 0x7d5c <CFastLED::show(unsigned char)+0x9a>
    7dba:	69 e1       	ldi	r22, 0x19	; 25
    7dbc:	70 e0       	ldi	r23, 0x00	; 0
    7dbe:	c7 01       	movw	r24, r14
    7dc0:	25 df       	rcall	.-438    	; 0x7c0c <CFastLED::countFPS(int)>
    7dc2:	0f 90       	pop	r0
    7dc4:	0f 90       	pop	r0
    7dc6:	0f 90       	pop	r0
    7dc8:	df 91       	pop	r29
    7dca:	cf 91       	pop	r28
    7dcc:	1f 91       	pop	r17
    7dce:	0f 91       	pop	r16
    7dd0:	ff 90       	pop	r15
    7dd2:	ef 90       	pop	r14
    7dd4:	df 90       	pop	r13
    7dd6:	cf 90       	pop	r12
    7dd8:	bf 90       	pop	r11
    7dda:	af 90       	pop	r10
    7ddc:	9f 90       	pop	r9
    7dde:	8f 90       	pop	r8
    7de0:	08 95       	ret

00007de2 <CFastLED::showColor(CRGB const&, unsigned char)>:
    7de2:	4f 92       	push	r4
    7de4:	5f 92       	push	r5
    7de6:	6f 92       	push	r6
    7de8:	7f 92       	push	r7
    7dea:	8f 92       	push	r8
    7dec:	9f 92       	push	r9
    7dee:	af 92       	push	r10
    7df0:	bf 92       	push	r11
    7df2:	cf 92       	push	r12
    7df4:	df 92       	push	r13
    7df6:	ef 92       	push	r14
    7df8:	ff 92       	push	r15
    7dfa:	0f 93       	push	r16
    7dfc:	1f 93       	push	r17
    7dfe:	cf 93       	push	r28
    7e00:	df 93       	push	r29
    7e02:	00 d0       	rcall	.+0      	; 0x7e04 <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    7e04:	1f 92       	push	r1
    7e06:	cd b7       	in	r28, 0x3d	; 61
    7e08:	de b7       	in	r29, 0x3e	; 62
    7e0a:	7c 01       	movw	r14, r24
    7e0c:	5b 01       	movw	r10, r22
    7e0e:	d4 2e       	mov	r13, r20
    7e10:	d7 01       	movw	r26, r14
    7e12:	13 96       	adiw	r26, 0x03	; 3
    7e14:	0d 91       	ld	r16, X+
    7e16:	1d 91       	ld	r17, X+
    7e18:	2d 91       	ld	r18, X+
    7e1a:	3c 91       	ld	r19, X
    7e1c:	16 97       	sbiw	r26, 0x06	; 6
    7e1e:	01 15       	cp	r16, r1
    7e20:	11 05       	cpc	r17, r1
    7e22:	21 05       	cpc	r18, r1
    7e24:	31 05       	cpc	r19, r1
    7e26:	91 f0       	breq	.+36     	; 0x7e4c <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    7e28:	e8 d5       	rcall	.+3024   	; 0x89fa <_micros>
    7e2a:	40 90 c4 10 	lds	r4, 0x10C4	; 0x8010c4 <lastshow>
    7e2e:	50 90 c5 10 	lds	r5, 0x10C5	; 0x8010c5 <lastshow+0x1>
    7e32:	60 90 c6 10 	lds	r6, 0x10C6	; 0x8010c6 <lastshow+0x2>
    7e36:	70 90 c7 10 	lds	r7, 0x10C7	; 0x8010c7 <lastshow+0x3>
    7e3a:	64 19       	sub	r22, r4
    7e3c:	75 09       	sbc	r23, r5
    7e3e:	86 09       	sbc	r24, r6
    7e40:	97 09       	sbc	r25, r7
    7e42:	60 17       	cp	r22, r16
    7e44:	71 07       	cpc	r23, r17
    7e46:	82 07       	cpc	r24, r18
    7e48:	93 07       	cpc	r25, r19
    7e4a:	10 f3       	brcs	.-60     	; 0x7e10 <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    7e4c:	d6 d5       	rcall	.+2988   	; 0x89fa <_micros>
    7e4e:	60 93 c4 10 	sts	0x10C4, r22	; 0x8010c4 <lastshow>
    7e52:	70 93 c5 10 	sts	0x10C5, r23	; 0x8010c5 <lastshow+0x1>
    7e56:	80 93 c6 10 	sts	0x10C6, r24	; 0x8010c6 <lastshow+0x2>
    7e5a:	90 93 c7 10 	sts	0x10C7, r25	; 0x8010c7 <lastshow+0x3>
    7e5e:	d7 01       	movw	r26, r14
    7e60:	1b 96       	adiw	r26, 0x0b	; 11
    7e62:	ed 91       	ld	r30, X+
    7e64:	fc 91       	ld	r31, X
    7e66:	1c 97       	sbiw	r26, 0x0c	; 12
    7e68:	30 97       	sbiw	r30, 0x00	; 0
    7e6a:	49 f0       	breq	.+18     	; 0x7e7e <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    7e6c:	17 96       	adiw	r26, 0x07	; 7
    7e6e:	4d 91       	ld	r20, X+
    7e70:	5d 91       	ld	r21, X+
    7e72:	6d 91       	ld	r22, X+
    7e74:	7c 91       	ld	r23, X
    7e76:	1a 97       	sbiw	r26, 0x0a	; 10
    7e78:	8d 2d       	mov	r24, r13
    7e7a:	09 95       	icall
    7e7c:	d8 2e       	mov	r13, r24
    7e7e:	00 91 ca 10 	lds	r16, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    7e82:	10 91 cb 10 	lds	r17, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    7e86:	01 15       	cp	r16, r1
    7e88:	11 05       	cpc	r17, r1
    7e8a:	59 f1       	breq	.+86     	; 0x7ee2 <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    7e8c:	f8 01       	movw	r30, r16
    7e8e:	c4 84       	ldd	r12, Z+12	; 0x0c
    7e90:	d7 01       	movw	r26, r14
    7e92:	11 96       	adiw	r26, 0x01	; 1
    7e94:	8d 91       	ld	r24, X+
    7e96:	9c 91       	ld	r25, X
    7e98:	84 36       	cpi	r24, 0x64	; 100
    7e9a:	91 05       	cpc	r25, r1
    7e9c:	08 f4       	brcc	.+2      	; 0x7ea0 <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    7e9e:	14 86       	std	Z+12, r1	; 0x0c
    7ea0:	d8 01       	movw	r26, r16
    7ea2:	ed 91       	ld	r30, X+
    7ea4:	fc 91       	ld	r31, X
    7ea6:	80 80       	ld	r8, Z
    7ea8:	91 80       	ldd	r9, Z+1	; 0x01
    7eaa:	98 01       	movw	r18, r16
    7eac:	27 5f       	subi	r18, 0xF7	; 247
    7eae:	3f 4f       	sbci	r19, 0xFF	; 255
    7eb0:	a8 01       	movw	r20, r16
    7eb2:	4a 5f       	subi	r20, 0xFA	; 250
    7eb4:	5f 4f       	sbci	r21, 0xFF	; 255
    7eb6:	6d 2d       	mov	r22, r13
    7eb8:	ce 01       	movw	r24, r28
    7eba:	01 96       	adiw	r24, 0x01	; 1
    7ebc:	22 de       	rcall	.-956    	; 0x7b02 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    7ebe:	f8 01       	movw	r30, r16
    7ec0:	45 85       	ldd	r20, Z+13	; 0x0d
    7ec2:	56 85       	ldd	r21, Z+14	; 0x0e
    7ec4:	9e 01       	movw	r18, r28
    7ec6:	2f 5f       	subi	r18, 0xFF	; 255
    7ec8:	3f 4f       	sbci	r19, 0xFF	; 255
    7eca:	b5 01       	movw	r22, r10
    7ecc:	c8 01       	movw	r24, r16
    7ece:	f4 01       	movw	r30, r8
    7ed0:	09 95       	icall
    7ed2:	d8 01       	movw	r26, r16
    7ed4:	1c 96       	adiw	r26, 0x0c	; 12
    7ed6:	cc 92       	st	X, r12
    7ed8:	1c 97       	sbiw	r26, 0x0c	; 12
    7eda:	14 96       	adiw	r26, 0x04	; 4
    7edc:	0d 91       	ld	r16, X+
    7ede:	1c 91       	ld	r17, X
    7ee0:	d2 cf       	rjmp	.-92     	; 0x7e86 <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    7ee2:	69 e1       	ldi	r22, 0x19	; 25
    7ee4:	70 e0       	ldi	r23, 0x00	; 0
    7ee6:	c7 01       	movw	r24, r14
    7ee8:	91 de       	rcall	.-734    	; 0x7c0c <CFastLED::countFPS(int)>
    7eea:	0f 90       	pop	r0
    7eec:	0f 90       	pop	r0
    7eee:	0f 90       	pop	r0
    7ef0:	df 91       	pop	r29
    7ef2:	cf 91       	pop	r28
    7ef4:	1f 91       	pop	r17
    7ef6:	0f 91       	pop	r16
    7ef8:	ff 90       	pop	r15
    7efa:	ef 90       	pop	r14
    7efc:	df 90       	pop	r13
    7efe:	cf 90       	pop	r12
    7f00:	bf 90       	pop	r11
    7f02:	af 90       	pop	r10
    7f04:	9f 90       	pop	r9
    7f06:	8f 90       	pop	r8
    7f08:	7f 90       	pop	r7
    7f0a:	6f 90       	pop	r6
    7f0c:	5f 90       	pop	r5
    7f0e:	4f 90       	pop	r4
    7f10:	08 95       	ret

00007f12 <CFastLED::clear(bool)>:
    7f12:	0f 93       	push	r16
    7f14:	1f 93       	push	r17
    7f16:	cf 93       	push	r28
    7f18:	df 93       	push	r29
    7f1a:	00 d0       	rcall	.+0      	; 0x7f1c <CFastLED::clear(bool)+0xa>
    7f1c:	1f 92       	push	r1
    7f1e:	cd b7       	in	r28, 0x3d	; 61
    7f20:	de b7       	in	r29, 0x3e	; 62
    7f22:	8c 01       	movw	r16, r24
    7f24:	66 23       	and	r22, r22
    7f26:	41 f0       	breq	.+16     	; 0x7f38 <CFastLED::clear(bool)+0x26>
    7f28:	19 82       	std	Y+1, r1	; 0x01
    7f2a:	1a 82       	std	Y+2, r1	; 0x02
    7f2c:	1b 82       	std	Y+3, r1	; 0x03
    7f2e:	40 e0       	ldi	r20, 0x00	; 0
    7f30:	be 01       	movw	r22, r28
    7f32:	6f 5f       	subi	r22, 0xFF	; 255
    7f34:	7f 4f       	sbci	r23, 0xFF	; 255
    7f36:	55 df       	rcall	.-342    	; 0x7de2 <CFastLED::showColor(CRGB const&, unsigned char)>
    7f38:	c8 01       	movw	r24, r16
    7f3a:	4c de       	rcall	.-872    	; 0x7bd4 <CFastLED::clearData()>
    7f3c:	0f 90       	pop	r0
    7f3e:	0f 90       	pop	r0
    7f40:	0f 90       	pop	r0
    7f42:	df 91       	pop	r29
    7f44:	cf 91       	pop	r28
    7f46:	1f 91       	pop	r17
    7f48:	0f 91       	pop	r16
    7f4a:	08 95       	ret

00007f4c <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    7f4c:	cf 93       	push	r28
    7f4e:	df 93       	push	r29
    7f50:	ec 01       	movw	r28, r24
    7f52:	44 23       	and	r20, r20
    7f54:	f1 f0       	breq	.+60     	; 0x7f92 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    7f56:	61 15       	cp	r22, r1
    7f58:	71 05       	cpc	r23, r1
    7f5a:	c1 f0       	breq	.+48     	; 0x7f8c <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    7f5c:	9b 01       	movw	r18, r22
    7f5e:	50 e0       	ldi	r21, 0x00	; 0
    7f60:	40 e0       	ldi	r20, 0x00	; 0
    7f62:	60 e4       	ldi	r22, 0x40	; 64
    7f64:	72 e4       	ldi	r23, 0x42	; 66
    7f66:	8f e0       	ldi	r24, 0x0F	; 15
    7f68:	90 e0       	ldi	r25, 0x00	; 0
    7f6a:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <__divmodsi4>
    7f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    7f70:	9c 81       	ldd	r25, Y+4	; 0x04
    7f72:	ad 81       	ldd	r26, Y+5	; 0x05
    7f74:	be 81       	ldd	r27, Y+6	; 0x06
    7f76:	82 17       	cp	r24, r18
    7f78:	93 07       	cpc	r25, r19
    7f7a:	a4 07       	cpc	r26, r20
    7f7c:	b5 07       	cpc	r27, r21
    7f7e:	10 f4       	brcc	.+4      	; 0x7f84 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    7f80:	da 01       	movw	r26, r20
    7f82:	c9 01       	movw	r24, r18
    7f84:	8b 83       	std	Y+3, r24	; 0x03
    7f86:	9c 83       	std	Y+4, r25	; 0x04
    7f88:	ad 83       	std	Y+5, r26	; 0x05
    7f8a:	be 83       	std	Y+6, r27	; 0x06
    7f8c:	df 91       	pop	r29
    7f8e:	cf 91       	pop	r28
    7f90:	08 95       	ret
    7f92:	61 15       	cp	r22, r1
    7f94:	71 05       	cpc	r23, r1
    7f96:	71 f0       	breq	.+28     	; 0x7fb4 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    7f98:	9b 01       	movw	r18, r22
    7f9a:	50 e0       	ldi	r21, 0x00	; 0
    7f9c:	40 e0       	ldi	r20, 0x00	; 0
    7f9e:	60 e4       	ldi	r22, 0x40	; 64
    7fa0:	72 e4       	ldi	r23, 0x42	; 66
    7fa2:	8f e0       	ldi	r24, 0x0F	; 15
    7fa4:	90 e0       	ldi	r25, 0x00	; 0
    7fa6:	0e 94 44 4e 	call	0x9c88	; 0x9c88 <__divmodsi4>
    7faa:	2b 83       	std	Y+3, r18	; 0x03
    7fac:	3c 83       	std	Y+4, r19	; 0x04
    7fae:	4d 83       	std	Y+5, r20	; 0x05
    7fb0:	5e 83       	std	Y+6, r21	; 0x06
    7fb2:	ec cf       	rjmp	.-40     	; 0x7f8c <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    7fb4:	1b 82       	std	Y+3, r1	; 0x03
    7fb6:	1c 82       	std	Y+4, r1	; 0x04
    7fb8:	1d 82       	std	Y+5, r1	; 0x05
    7fba:	1e 82       	std	Y+6, r1	; 0x06
    7fbc:	e7 cf       	rjmp	.-50     	; 0x7f8c <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

00007fbe <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    7fbe:	cf 92       	push	r12
    7fc0:	df 92       	push	r13
    7fc2:	ef 92       	push	r14
    7fc4:	ff 92       	push	r15
    7fc6:	0f 93       	push	r16
    7fc8:	1f 93       	push	r17
    7fca:	cf 93       	push	r28
    7fcc:	df 93       	push	r29
    7fce:	ec 01       	movw	r28, r24
    7fd0:	6b 01       	movw	r12, r22
    7fd2:	7a 01       	movw	r14, r20
    7fd4:	10 e0       	ldi	r17, 0x00	; 0
    7fd6:	00 e0       	ldi	r16, 0x00	; 0
    7fd8:	12 16       	cp	r1, r18
    7fda:	13 06       	cpc	r1, r19
    7fdc:	14 f4       	brge	.+4      	; 0x7fe2 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    7fde:	8a 01       	movw	r16, r20
    7fe0:	79 01       	movw	r14, r18
    7fe2:	e8 81       	ld	r30, Y
    7fe4:	f9 81       	ldd	r31, Y+1	; 0x01
    7fe6:	04 80       	ldd	r0, Z+4	; 0x04
    7fe8:	f5 81       	ldd	r31, Z+5	; 0x05
    7fea:	e0 2d       	mov	r30, r0
    7fec:	ce 01       	movw	r24, r28
    7fee:	09 95       	icall
    7ff0:	c8 01       	movw	r24, r16
    7ff2:	88 0f       	add	r24, r24
    7ff4:	99 1f       	adc	r25, r25
    7ff6:	08 0f       	add	r16, r24
    7ff8:	19 1f       	adc	r17, r25
    7ffa:	c0 0e       	add	r12, r16
    7ffc:	d1 1e       	adc	r13, r17
    7ffe:	db 82       	std	Y+3, r13	; 0x03
    8000:	ca 82       	std	Y+2, r12	; 0x02
    8002:	ed 86       	std	Y+13, r14	; 0x0d
    8004:	fe 86       	std	Y+14, r15	; 0x0e
    8006:	e8 81       	ld	r30, Y
    8008:	f9 81       	ldd	r31, Y+1	; 0x01
    800a:	02 84       	ldd	r0, Z+10	; 0x0a
    800c:	f3 85       	ldd	r31, Z+11	; 0x0b
    800e:	e0 2d       	mov	r30, r0
    8010:	ce 01       	movw	r24, r28
    8012:	09 95       	icall
    8014:	41 e0       	ldi	r20, 0x01	; 1
    8016:	bc 01       	movw	r22, r24
    8018:	8c ec       	ldi	r24, 0xCC	; 204
    801a:	90 e1       	ldi	r25, 0x10	; 16
    801c:	97 df       	rcall	.-210    	; 0x7f4c <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    801e:	ce 01       	movw	r24, r28
    8020:	df 91       	pop	r29
    8022:	cf 91       	pop	r28
    8024:	1f 91       	pop	r17
    8026:	0f 91       	pop	r16
    8028:	ff 90       	pop	r15
    802a:	ef 90       	pop	r14
    802c:	df 90       	pop	r13
    802e:	cf 90       	pop	r12
    8030:	08 95       	ret

00008032 <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    8032:	8c ec       	ldi	r24, 0xCC	; 204
    8034:	90 e1       	ldi	r25, 0x10	; 16
    8036:	bf cd       	rjmp	.-1154   	; 0x7bb6 <CFastLED::CFastLED()>

00008038 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    8038:	1f 93       	push	r17
    803a:	dc 01       	movw	r26, r24
    803c:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    803e:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    8040:	11 96       	adiw	r26, 0x01	; 1
    8042:	4c 91       	ld	r20, X
    8044:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    8046:	12 96       	adiw	r26, 0x02	; 2
    8048:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    804a:	97 2f       	mov	r25, r23
    804c:	99 0f       	add	r25, r25
    804e:	99 0f       	add	r25, r25
    8050:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    8052:	35 e5       	ldi	r19, 0x55	; 85
    8054:	29 2f       	mov	r18, r25
    8056:	23 9f       	mul	r18, r19
    8058:	02 0e       	add	r0, r18
    805a:	20 e0       	ldi	r18, 0x00	; 0
    805c:	21 1d       	adc	r18, r1
    805e:	11 24       	eor	r1, r1
    8060:	82 2f       	mov	r24, r18
    8062:	67 2f       	mov	r22, r23
    8064:	60 74       	andi	r22, 0x40	; 64
    8066:	57 2f       	mov	r21, r23
    8068:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    806a:	77 fd       	sbrc	r23, 7
    806c:	6f c0       	rjmp	.+222    	; 0x814c <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    806e:	61 11       	cpse	r22, r1
    8070:	5b c0       	rjmp	.+182    	; 0x8128 <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    8072:	51 11       	cpse	r21, r1
    8074:	05 c0       	rjmp	.+10     	; 0x8080 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    8076:	92 2f       	mov	r25, r18
    8078:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    807a:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    807c:	90 e0       	ldi	r25, 0x00	; 0
    807e:	04 c0       	rjmp	.+8      	; 0x8088 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    8080:	25 e5       	ldi	r18, 0x55	; 85
    8082:	28 0f       	add	r18, r24
                    b = 0;
    8084:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    8086:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    8088:	4f 3f       	cpi	r20, 0xFF	; 255
    808a:	09 f4       	brne	.+2      	; 0x808e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    808c:	24 c0       	rjmp	.+72     	; 0x80d6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    808e:	44 23       	and	r20, r20
    8090:	09 f4       	brne	.+2      	; 0x8094 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    8092:	7d c0       	rjmp	.+250    	; 0x818e <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    8094:	88 23       	and	r24, r24
    8096:	31 f0       	breq	.+12     	; 0x80a4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    8098:	38 2f       	mov	r19, r24
    809a:	34 9f       	mul	r19, r20
    809c:	03 0e       	add	r0, r19
    809e:	30 e0       	ldi	r19, 0x00	; 0
    80a0:	31 1d       	adc	r19, r1
    80a2:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    80a4:	22 23       	and	r18, r18
    80a6:	21 f0       	breq	.+8      	; 0x80b0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    80a8:	24 9f       	mul	r18, r20
    80aa:	02 0e       	add	r0, r18
    80ac:	20 e0       	ldi	r18, 0x00	; 0
    80ae:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    80b0:	99 23       	and	r25, r25
    80b2:	31 f0       	breq	.+12     	; 0x80c0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    80b4:	39 2f       	mov	r19, r25
    80b6:	34 9f       	mul	r19, r20
    80b8:	03 0e       	add	r0, r19
    80ba:	30 e0       	ldi	r19, 0x00	; 0
    80bc:	31 1d       	adc	r19, r1
    80be:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    80c0:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    80c2:	34 2f       	mov	r19, r20
    80c4:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    80c6:	33 9f       	mul	r19, r19
    80c8:	03 0e       	add	r0, r19
    80ca:	30 e0       	ldi	r19, 0x00	; 0
    80cc:	31 1d       	adc	r19, r1
    80ce:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    80d0:	83 0f       	add	r24, r19
            g += brightness_floor;
    80d2:	23 0f       	add	r18, r19
            b += brightness_floor;
    80d4:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    80d6:	1f 3f       	cpi	r17, 0xFF	; 255
    80d8:	09 f4       	brne	.+2      	; 0x80dc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    80da:	21 c0       	rjmp	.+66     	; 0x811e <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    80dc:	30 e0       	ldi	r19, 0x00	; 0
    80de:	11 23       	and	r17, r17
    80e0:	21 f0       	breq	.+8      	; 0x80ea <L_630>
    80e2:	11 9f       	mul	r17, r17
    80e4:	31 2d       	mov	r19, r1
    80e6:	09 f0       	breq	.+2      	; 0x80ea <L_630>
    80e8:	3f 5f       	subi	r19, 0xFF	; 255

000080ea <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    80ea:	33 23       	and	r19, r19
    80ec:	09 f4       	brne	.+2      	; 0x80f0 <L_630+0x6>
    80ee:	53 c0       	rjmp	.+166    	; 0x8196 <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    80f0:	88 23       	and	r24, r24
    80f2:	31 f0       	breq	.+12     	; 0x8100 <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    80f4:	48 2f       	mov	r20, r24
    80f6:	43 9f       	mul	r20, r19
    80f8:	04 0e       	add	r0, r20
    80fa:	40 e0       	ldi	r20, 0x00	; 0
    80fc:	41 1d       	adc	r20, r1
    80fe:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    8100:	22 23       	and	r18, r18
    8102:	21 f0       	breq	.+8      	; 0x810c <L_630+0x22>
    8104:	23 9f       	mul	r18, r19
    8106:	02 0e       	add	r0, r18
    8108:	20 e0       	ldi	r18, 0x00	; 0
    810a:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    810c:	99 23       	and	r25, r25
    810e:	31 f0       	breq	.+12     	; 0x811c <L_630+0x32>
    8110:	49 2f       	mov	r20, r25
    8112:	43 9f       	mul	r20, r19
    8114:	04 0e       	add	r0, r20
    8116:	40 e0       	ldi	r20, 0x00	; 0
    8118:	41 1d       	adc	r20, r1
    811a:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    811c:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    811e:	80 83       	st	Z, r24
    rgb.g = g;
    8120:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    8122:	92 83       	std	Z+2, r25	; 0x02
}
    8124:	1f 91       	pop	r17
    8126:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    8128:	51 11       	cpse	r21, r1
    812a:	0b c0       	rjmp	.+22     	; 0x8142 <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    812c:	39 2f       	mov	r19, r25
    812e:	2a ea       	ldi	r18, 0xAA	; 170
    8130:	32 9f       	mul	r19, r18
    8132:	03 0e       	add	r0, r19
    8134:	30 e0       	ldi	r19, 0x00	; 0
    8136:	31 1d       	adc	r19, r1
    8138:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    813a:	9b ea       	ldi	r25, 0xAB	; 171
    813c:	93 1b       	sub	r25, r19
                    g = K170 + third;
    813e:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    8140:	9c cf       	rjmp	.-200    	; 0x807a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    8142:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    8144:	20 95       	com	r18
                b = third;
    8146:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    8148:	80 e0       	ldi	r24, 0x00	; 0
    814a:	9e cf       	rjmp	.-196    	; 0x8088 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    814c:	61 11       	cpse	r22, r1
    814e:	12 c0       	rjmp	.+36     	; 0x8174 <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    8150:	51 11       	cpse	r21, r1
    8152:	0c c0       	rjmp	.+24     	; 0x816c <L_630+0x82>
    8154:	39 2f       	mov	r19, r25
    8156:	2a ea       	ldi	r18, 0xAA	; 170
    8158:	32 9f       	mul	r19, r18
    815a:	03 0e       	add	r0, r19
    815c:	30 e0       	ldi	r19, 0x00	; 0
    815e:	31 1d       	adc	r19, r1
    8160:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    8162:	2b ea       	ldi	r18, 0xAB	; 171
    8164:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    8166:	95 e5       	ldi	r25, 0x55	; 85
    8168:	93 0f       	add	r25, r19
    816a:	ee cf       	rjmp	.-36     	; 0x8148 <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    816c:	92 2f       	mov	r25, r18
    816e:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    8170:	20 e0       	ldi	r18, 0x00	; 0
    8172:	8a cf       	rjmp	.-236    	; 0x8088 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    8174:	51 11       	cpse	r21, r1
    8176:	06 c0       	rjmp	.+12     	; 0x8184 <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    8178:	25 e5       	ldi	r18, 0x55	; 85
    817a:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    817c:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    817e:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    8180:	82 2f       	mov	r24, r18
    8182:	f6 cf       	rjmp	.-20     	; 0x8170 <L_630+0x86>
    8184:	2a ea       	ldi	r18, 0xAA	; 170
    8186:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    8188:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    818a:	93 2f       	mov	r25, r19
    818c:	f8 cf       	rjmp	.-16     	; 0x817e <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    818e:	9f ef       	ldi	r25, 0xFF	; 255
    8190:	2f ef       	ldi	r18, 0xFF	; 255
    8192:	8f ef       	ldi	r24, 0xFF	; 255
    8194:	a0 cf       	rjmp	.-192    	; 0x80d6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    8196:	90 e0       	ldi	r25, 0x00	; 0
    8198:	20 e0       	ldi	r18, 0x00	; 0
    819a:	80 e0       	ldi	r24, 0x00	; 0
    819c:	c0 cf       	rjmp	.-128    	; 0x811e <L_630+0x34>

0000819e <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    819e:	dc 01       	movw	r26, r24
    81a0:	40 ff       	sbrs	r20, 0
    81a2:	03 c0       	rjmp	.+6      	; 0x81aa <Lseteven_8>
    81a4:	01 c0       	rjmp	.+2      	; 0x81a8 <Lsetodd_8>

000081a6 <Lsetloop_8>:
    81a6:	6d 93       	st	X+, r22

000081a8 <Lsetodd_8>:
    81a8:	6d 93       	st	X+, r22

000081aa <Lseteven_8>:
    81aa:	42 50       	subi	r20, 0x02	; 2
    81ac:	e0 f7       	brcc	.-8      	; 0x81a6 <Lsetloop_8>
    81ae:	50 40       	sbci	r21, 0x00	; 0
    81b0:	d0 f7       	brcc	.-12     	; 0x81a6 <Lsetloop_8>
    return ptr;
}
    81b2:	08 95       	ret

000081b4 <memcpy8>:
         "  brcc Lcpyloop_%=        \n\t"
         : [num] "+r" (num)
         : [src] "r" (src),
           [dst] "r" (dst)
         : "memory"
         );
    81b4:	fb 01       	movw	r30, r22
    81b6:	dc 01       	movw	r26, r24
    81b8:	40 ff       	sbrs	r20, 0
    81ba:	05 c0       	rjmp	.+10     	; 0x81c6 <Lcpyeven_23>
    81bc:	02 c0       	rjmp	.+4      	; 0x81c2 <Lcpyodd_23>

000081be <Lcpyloop_23>:
    81be:	01 90       	ld	r0, Z+
    81c0:	0d 92       	st	X+, r0

000081c2 <Lcpyodd_23>:
    81c2:	01 90       	ld	r0, Z+
    81c4:	0d 92       	st	X+, r0

000081c6 <Lcpyeven_23>:
    81c6:	42 50       	subi	r20, 0x02	; 2
    81c8:	d0 f7       	brcc	.-12     	; 0x81be <Lcpyloop_23>
    81ca:	50 40       	sbci	r21, 0x00	; 0
    81cc:	c0 f7       	brcc	.-16     	; 0x81be <Lcpyloop_23>
    return dst;
}
    81ce:	08 95       	ret

000081d0 <memmove8>:

//__attribute__ ((noinline))
void * memmove8 ( void * dst, const void* src, uint16_t num )
{
    if( src > dst) {
    81d0:	86 17       	cp	r24, r22
    81d2:	97 07       	cpc	r25, r23
    81d4:	08 f4       	brcc	.+2      	; 0x81d8 <memmove8+0x8>
        // if src > dst then we can use the forward-stepping memcpy8
        return memcpy8( dst, src, num);
    81d6:	ee cf       	rjmp	.-36     	; 0x81b4 <memcpy8>
    } else {
        // if src < dst then we have to step backward:
        dst = (char*)dst + num;
    81d8:	84 0f       	add	r24, r20
    81da:	95 1f       	adc	r25, r21
        src = (char*)src + num;
    81dc:	64 0f       	add	r22, r20
    81de:	75 1f       	adc	r23, r21
             "  brcc Lmovloop_%=        \n\t"
             : [num] "+r" (num)
             : [src] "r" (src),
               [dst] "r" (dst)
             : "memory"
             );
    81e0:	fb 01       	movw	r30, r22
    81e2:	dc 01       	movw	r26, r24
    81e4:	40 ff       	sbrs	r20, 0
    81e6:	05 c0       	rjmp	.+10     	; 0x81f2 <Lmoveven_58>
    81e8:	02 c0       	rjmp	.+4      	; 0x81ee <Lmovodd_58>

000081ea <Lmovloop_58>:
    81ea:	02 90       	ld	r0, -Z
    81ec:	0e 92       	st	-X, r0

000081ee <Lmovodd_58>:
    81ee:	02 90       	ld	r0, -Z
    81f0:	0e 92       	st	-X, r0

000081f2 <Lmoveven_58>:
    81f2:	42 50       	subi	r20, 0x02	; 2
    81f4:	d0 f7       	brcc	.-12     	; 0x81ea <Lmovloop_58>
    81f6:	50 40       	sbci	r21, 0x00	; 0
    81f8:	c0 f7       	brcc	.-16     	; 0x81ea <Lmovloop_58>
        return dst;
    }
}
    81fa:	08 95       	ret

000081fc <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    81fc:	0f 93       	push	r16
    81fe:	1f 93       	push	r17
    8200:	cf 93       	push	r28
    8202:	df 93       	push	r29
    8204:	82 30       	cpi	r24, 0x02	; 2
    8206:	91 05       	cpc	r25, r1
    8208:	10 f4       	brcc	.+4      	; 0x820e <malloc+0x12>
    820a:	82 e0       	ldi	r24, 0x02	; 2
    820c:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    820e:	e0 91 66 11 	lds	r30, 0x1166	; 0x801166 <__flp>
    8212:	f0 91 67 11 	lds	r31, 0x1167	; 0x801167 <__flp+0x1>
    8216:	30 e0       	ldi	r19, 0x00	; 0
    8218:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    821a:	70 e0       	ldi	r23, 0x00	; 0
    821c:	60 e0       	ldi	r22, 0x00	; 0
    821e:	d0 e0       	ldi	r29, 0x00	; 0
    8220:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    8222:	b0 e0       	ldi	r27, 0x00	; 0
    8224:	a0 e0       	ldi	r26, 0x00	; 0
    8226:	30 97       	sbiw	r30, 0x00	; 0
    8228:	99 f4       	brne	.+38     	; 0x8250 <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    822a:	21 15       	cp	r18, r1
    822c:	31 05       	cpc	r19, r1
    822e:	09 f4       	brne	.+2      	; 0x8232 <malloc+0x36>
    8230:	4a c0       	rjmp	.+148    	; 0x82c6 <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    8232:	28 1b       	sub	r18, r24
    8234:	39 0b       	sbc	r19, r25
    8236:	24 30       	cpi	r18, 0x04	; 4
    8238:	31 05       	cpc	r19, r1
    823a:	d8 f5       	brcc	.+118    	; 0x82b2 <malloc+0xb6>
    823c:	8a 81       	ldd	r24, Y+2	; 0x02
    823e:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    8240:	61 15       	cp	r22, r1
    8242:	71 05       	cpc	r23, r1
    8244:	89 f1       	breq	.+98     	; 0x82a8 <malloc+0xac>
				sfp2->nx = sfp1->nx;
    8246:	fb 01       	movw	r30, r22
    8248:	93 83       	std	Z+3, r25	; 0x03
    824a:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    824c:	fe 01       	movw	r30, r28
    824e:	11 c0       	rjmp	.+34     	; 0x8272 <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    8250:	40 81       	ld	r20, Z
    8252:	51 81       	ldd	r21, Z+1	; 0x01
    8254:	02 81       	ldd	r16, Z+2	; 0x02
    8256:	13 81       	ldd	r17, Z+3	; 0x03
    8258:	48 17       	cp	r20, r24
    825a:	59 07       	cpc	r21, r25
    825c:	e0 f0       	brcs	.+56     	; 0x8296 <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    825e:	48 17       	cp	r20, r24
    8260:	59 07       	cpc	r21, r25
    8262:	99 f4       	brne	.+38     	; 0x828a <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    8264:	10 97       	sbiw	r26, 0x00	; 0
    8266:	61 f0       	breq	.+24     	; 0x8280 <malloc+0x84>
				fp2->nx = fp1->nx;
    8268:	12 96       	adiw	r26, 0x02	; 2
    826a:	0c 93       	st	X, r16
    826c:	12 97       	sbiw	r26, 0x02	; 2
    826e:	13 96       	adiw	r26, 0x03	; 3
    8270:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    8272:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    8274:	cf 01       	movw	r24, r30
    8276:	df 91       	pop	r29
    8278:	cf 91       	pop	r28
    827a:	1f 91       	pop	r17
    827c:	0f 91       	pop	r16
    827e:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    8280:	00 93 66 11 	sts	0x1166, r16	; 0x801166 <__flp>
    8284:	10 93 67 11 	sts	0x1167, r17	; 0x801167 <__flp+0x1>
    8288:	f4 cf       	rjmp	.-24     	; 0x8272 <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    828a:	21 15       	cp	r18, r1
    828c:	31 05       	cpc	r19, r1
    828e:	51 f0       	breq	.+20     	; 0x82a4 <malloc+0xa8>
    8290:	42 17       	cp	r20, r18
    8292:	53 07       	cpc	r21, r19
    8294:	38 f0       	brcs	.+14     	; 0x82a4 <malloc+0xa8>
    8296:	a9 01       	movw	r20, r18
    8298:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    829a:	9a 01       	movw	r18, r20
    829c:	bd 01       	movw	r22, r26
    829e:	df 01       	movw	r26, r30
    82a0:	f8 01       	movw	r30, r16
    82a2:	c1 cf       	rjmp	.-126    	; 0x8226 <malloc+0x2a>
    82a4:	ef 01       	movw	r28, r30
    82a6:	f9 cf       	rjmp	.-14     	; 0x829a <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    82a8:	90 93 67 11 	sts	0x1167, r25	; 0x801167 <__flp+0x1>
    82ac:	80 93 66 11 	sts	0x1166, r24	; 0x801166 <__flp>
    82b0:	cd cf       	rjmp	.-102    	; 0x824c <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    82b2:	fe 01       	movw	r30, r28
    82b4:	e2 0f       	add	r30, r18
    82b6:	f3 1f       	adc	r31, r19
    82b8:	81 93       	st	Z+, r24
    82ba:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    82bc:	22 50       	subi	r18, 0x02	; 2
    82be:	31 09       	sbc	r19, r1
    82c0:	39 83       	std	Y+1, r19	; 0x01
    82c2:	28 83       	st	Y, r18
		return &(sfp2->nx);
    82c4:	d7 cf       	rjmp	.-82     	; 0x8274 <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    82c6:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <__brkval>
    82ca:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <__brkval+0x1>
    82ce:	23 2b       	or	r18, r19
    82d0:	41 f4       	brne	.+16     	; 0x82e2 <malloc+0xe6>
		__brkval = __malloc_heap_start;
    82d2:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    82d6:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    82da:	30 93 da 10 	sts	0x10DA, r19	; 0x8010da <__brkval+0x1>
    82de:	20 93 d9 10 	sts	0x10D9, r18	; 0x8010d9 <__brkval>
	cp = __malloc_heap_end;
    82e2:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    82e6:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    82ea:	21 15       	cp	r18, r1
    82ec:	31 05       	cpc	r19, r1
    82ee:	41 f4       	brne	.+16     	; 0x8300 <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    82f0:	2d b7       	in	r18, 0x3d	; 61
    82f2:	3e b7       	in	r19, 0x3e	; 62
    82f4:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    82f8:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    82fc:	24 1b       	sub	r18, r20
    82fe:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    8300:	e0 91 d9 10 	lds	r30, 0x10D9	; 0x8010d9 <__brkval>
    8304:	f0 91 da 10 	lds	r31, 0x10DA	; 0x8010da <__brkval+0x1>
    8308:	e2 17       	cp	r30, r18
    830a:	f3 07       	cpc	r31, r19
    830c:	a0 f4       	brcc	.+40     	; 0x8336 <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    830e:	2e 1b       	sub	r18, r30
    8310:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    8312:	28 17       	cp	r18, r24
    8314:	39 07       	cpc	r19, r25
    8316:	78 f0       	brcs	.+30     	; 0x8336 <malloc+0x13a>
    8318:	ac 01       	movw	r20, r24
    831a:	4e 5f       	subi	r20, 0xFE	; 254
    831c:	5f 4f       	sbci	r21, 0xFF	; 255
    831e:	24 17       	cp	r18, r20
    8320:	35 07       	cpc	r19, r21
    8322:	48 f0       	brcs	.+18     	; 0x8336 <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    8324:	4e 0f       	add	r20, r30
    8326:	5f 1f       	adc	r21, r31
    8328:	50 93 da 10 	sts	0x10DA, r21	; 0x8010da <__brkval+0x1>
    832c:	40 93 d9 10 	sts	0x10D9, r20	; 0x8010d9 <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    8330:	81 93       	st	Z+, r24
    8332:	91 93       	st	Z+, r25
		return &(fp1->nx);
    8334:	9f cf       	rjmp	.-194    	; 0x8274 <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    8336:	f0 e0       	ldi	r31, 0x00	; 0
    8338:	e0 e0       	ldi	r30, 0x00	; 0
    833a:	9c cf       	rjmp	.-200    	; 0x8274 <malloc+0x78>

0000833c <free>:
}


void
free(void *p)
{
    833c:	cf 93       	push	r28
    833e:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    8340:	00 97       	sbiw	r24, 0x00	; 0
    8342:	e9 f0       	breq	.+58     	; 0x837e <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    8344:	fc 01       	movw	r30, r24
    8346:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    8348:	13 82       	std	Z+3, r1	; 0x03
    834a:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    834c:	a0 91 66 11 	lds	r26, 0x1166	; 0x801166 <__flp>
    8350:	b0 91 67 11 	lds	r27, 0x1167	; 0x801167 <__flp+0x1>
    8354:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    8356:	30 e0       	ldi	r19, 0x00	; 0
    8358:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    835a:	10 97       	sbiw	r26, 0x00	; 0
    835c:	a1 f4       	brne	.+40     	; 0x8386 <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    835e:	20 81       	ld	r18, Z
    8360:	31 81       	ldd	r19, Z+1	; 0x01
    8362:	82 0f       	add	r24, r18
    8364:	93 1f       	adc	r25, r19
    8366:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <__brkval>
    836a:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <__brkval+0x1>
    836e:	28 17       	cp	r18, r24
    8370:	39 07       	cpc	r19, r25
    8372:	09 f0       	breq	.+2      	; 0x8376 <free+0x3a>
    8374:	61 c0       	rjmp	.+194    	; 0x8438 <free+0xfc>
			__brkval = cpnew;
    8376:	f0 93 da 10 	sts	0x10DA, r31	; 0x8010da <__brkval+0x1>
    837a:	e0 93 d9 10 	sts	0x10D9, r30	; 0x8010d9 <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    837e:	df 91       	pop	r29
    8380:	cf 91       	pop	r28
    8382:	08 95       	ret
    8384:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    8386:	ce 17       	cp	r28, r30
    8388:	df 07       	cpc	r29, r31
    838a:	e8 f5       	brcc	.+122    	; 0x8406 <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    838c:	4a 81       	ldd	r20, Y+2	; 0x02
    838e:	5b 81       	ldd	r21, Y+3	; 0x03
    8390:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    8392:	41 15       	cp	r20, r1
    8394:	51 05       	cpc	r21, r1
    8396:	b1 f7       	brne	.-20     	; 0x8384 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    8398:	e9 01       	movw	r28, r18
    839a:	fb 83       	std	Y+3, r31	; 0x03
    839c:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    839e:	49 91       	ld	r20, Y+
    83a0:	59 91       	ld	r21, Y+
    83a2:	c4 0f       	add	r28, r20
    83a4:	d5 1f       	adc	r29, r21
    83a6:	ec 17       	cp	r30, r28
    83a8:	fd 07       	cpc	r31, r29
    83aa:	61 f4       	brne	.+24     	; 0x83c4 <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    83ac:	80 81       	ld	r24, Z
    83ae:	91 81       	ldd	r25, Z+1	; 0x01
    83b0:	02 96       	adiw	r24, 0x02	; 2
    83b2:	84 0f       	add	r24, r20
    83b4:	95 1f       	adc	r25, r21
    83b6:	e9 01       	movw	r28, r18
    83b8:	99 83       	std	Y+1, r25	; 0x01
    83ba:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    83bc:	82 81       	ldd	r24, Z+2	; 0x02
    83be:	93 81       	ldd	r25, Z+3	; 0x03
    83c0:	9b 83       	std	Y+3, r25	; 0x03
    83c2:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    83c4:	f0 e0       	ldi	r31, 0x00	; 0
    83c6:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    83c8:	12 96       	adiw	r26, 0x02	; 2
    83ca:	8d 91       	ld	r24, X+
    83cc:	9c 91       	ld	r25, X
    83ce:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    83d0:	00 97       	sbiw	r24, 0x00	; 0
    83d2:	b9 f5       	brne	.+110    	; 0x8442 <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    83d4:	2d 91       	ld	r18, X+
    83d6:	3c 91       	ld	r19, X
    83d8:	11 97       	sbiw	r26, 0x01	; 1
    83da:	cd 01       	movw	r24, r26
    83dc:	02 96       	adiw	r24, 0x02	; 2
    83de:	82 0f       	add	r24, r18
    83e0:	93 1f       	adc	r25, r19
    83e2:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <__brkval>
    83e6:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <__brkval+0x1>
    83ea:	28 17       	cp	r18, r24
    83ec:	39 07       	cpc	r19, r25
    83ee:	39 f6       	brne	.-114    	; 0x837e <free+0x42>
		if (fp2 == NULL)
    83f0:	30 97       	sbiw	r30, 0x00	; 0
    83f2:	51 f5       	brne	.+84     	; 0x8448 <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    83f4:	10 92 67 11 	sts	0x1167, r1	; 0x801167 <__flp+0x1>
    83f8:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    83fc:	b0 93 da 10 	sts	0x10DA, r27	; 0x8010da <__brkval+0x1>
    8400:	a0 93 d9 10 	sts	0x10D9, r26	; 0x8010d9 <__brkval>
    8404:	bc cf       	rjmp	.-136    	; 0x837e <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    8406:	d3 83       	std	Z+3, r29	; 0x03
    8408:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    840a:	40 81       	ld	r20, Z
    840c:	51 81       	ldd	r21, Z+1	; 0x01
    840e:	84 0f       	add	r24, r20
    8410:	95 1f       	adc	r25, r21
    8412:	c8 17       	cp	r28, r24
    8414:	d9 07       	cpc	r29, r25
    8416:	61 f4       	brne	.+24     	; 0x8430 <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    8418:	4e 5f       	subi	r20, 0xFE	; 254
    841a:	5f 4f       	sbci	r21, 0xFF	; 255
    841c:	88 81       	ld	r24, Y
    841e:	99 81       	ldd	r25, Y+1	; 0x01
    8420:	48 0f       	add	r20, r24
    8422:	59 1f       	adc	r21, r25
    8424:	51 83       	std	Z+1, r21	; 0x01
    8426:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    8428:	8a 81       	ldd	r24, Y+2	; 0x02
    842a:	9b 81       	ldd	r25, Y+3	; 0x03
    842c:	93 83       	std	Z+3, r25	; 0x03
    842e:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    8430:	21 15       	cp	r18, r1
    8432:	31 05       	cpc	r19, r1
    8434:	09 f0       	breq	.+2      	; 0x8438 <free+0xfc>
    8436:	b0 cf       	rjmp	.-160    	; 0x8398 <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    8438:	f0 93 67 11 	sts	0x1167, r31	; 0x801167 <__flp+0x1>
    843c:	e0 93 66 11 	sts	0x1166, r30	; 0x801166 <__flp>
			return;
    8440:	9e cf       	rjmp	.-196    	; 0x837e <free+0x42>
    8442:	fd 01       	movw	r30, r26
    8444:	dc 01       	movw	r26, r24
    8446:	c0 cf       	rjmp	.-128    	; 0x83c8 <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    8448:	13 82       	std	Z+3, r1	; 0x03
    844a:	12 82       	std	Z+2, r1	; 0x02
    844c:	d7 cf       	rjmp	.-82     	; 0x83fc <free+0xc0>

0000844e <realloc>:



void *
realloc(void *ptr, size_t len)
{
    844e:	4f 92       	push	r4
    8450:	5f 92       	push	r5
    8452:	6f 92       	push	r6
    8454:	7f 92       	push	r7
    8456:	8f 92       	push	r8
    8458:	9f 92       	push	r9
    845a:	af 92       	push	r10
    845c:	bf 92       	push	r11
    845e:	cf 92       	push	r12
    8460:	df 92       	push	r13
    8462:	ef 92       	push	r14
    8464:	ff 92       	push	r15
    8466:	0f 93       	push	r16
    8468:	1f 93       	push	r17
    846a:	cf 93       	push	r28
    846c:	df 93       	push	r29
    846e:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    8470:	00 97       	sbiw	r24, 0x00	; 0
    8472:	91 f4       	brne	.+36     	; 0x8498 <realloc+0x4a>
		return malloc(len);
    8474:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    8476:	df 91       	pop	r29
    8478:	cf 91       	pop	r28
    847a:	1f 91       	pop	r17
    847c:	0f 91       	pop	r16
    847e:	ff 90       	pop	r15
    8480:	ef 90       	pop	r14
    8482:	df 90       	pop	r13
    8484:	cf 90       	pop	r12
    8486:	bf 90       	pop	r11
    8488:	af 90       	pop	r10
    848a:	9f 90       	pop	r9
    848c:	8f 90       	pop	r8
    848e:	7f 90       	pop	r7
    8490:	6f 90       	pop	r6
    8492:	5f 90       	pop	r5
    8494:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    8496:	b2 ce       	rjmp	.-668    	; 0x81fc <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    8498:	fc 01       	movw	r30, r24
    849a:	e6 0f       	add	r30, r22
    849c:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    849e:	9c 01       	movw	r18, r24
    84a0:	22 50       	subi	r18, 0x02	; 2
    84a2:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    84a4:	e2 17       	cp	r30, r18
    84a6:	f3 07       	cpc	r31, r19
    84a8:	08 f4       	brcc	.+2      	; 0x84ac <realloc+0x5e>
    84aa:	a5 c0       	rjmp	.+330    	; 0x85f6 <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    84ac:	d9 01       	movw	r26, r18
    84ae:	cd 91       	ld	r28, X+
    84b0:	dc 91       	ld	r29, X
    84b2:	11 97       	sbiw	r26, 0x01	; 1
    84b4:	c6 17       	cp	r28, r22
    84b6:	d7 07       	cpc	r29, r23
    84b8:	18 f1       	brcs	.+70     	; 0x8500 <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    84ba:	c5 30       	cpi	r28, 0x05	; 5
    84bc:	d1 05       	cpc	r29, r1
    84be:	70 f0       	brcs	.+28     	; 0x84dc <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    84c0:	ce 01       	movw	r24, r28
    84c2:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    84c4:	86 17       	cp	r24, r22
    84c6:	97 07       	cpc	r25, r23
    84c8:	48 f0       	brcs	.+18     	; 0x84dc <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    84ca:	c6 1b       	sub	r28, r22
    84cc:	d7 0b       	sbc	r29, r23
    84ce:	22 97       	sbiw	r28, 0x02	; 2
    84d0:	c1 93       	st	Z+, r28
    84d2:	d1 93       	st	Z+, r29
		fp1->sz = len;
    84d4:	6d 93       	st	X+, r22
    84d6:	7c 93       	st	X, r23
		free(&(fp2->nx));
    84d8:	cf 01       	movw	r24, r30
    84da:	30 df       	rcall	.-416    	; 0x833c <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    84dc:	c8 01       	movw	r24, r16
    84de:	df 91       	pop	r29
    84e0:	cf 91       	pop	r28
    84e2:	1f 91       	pop	r17
    84e4:	0f 91       	pop	r16
    84e6:	ff 90       	pop	r15
    84e8:	ef 90       	pop	r14
    84ea:	df 90       	pop	r13
    84ec:	cf 90       	pop	r12
    84ee:	bf 90       	pop	r11
    84f0:	af 90       	pop	r10
    84f2:	9f 90       	pop	r9
    84f4:	8f 90       	pop	r8
    84f6:	7f 90       	pop	r7
    84f8:	6f 90       	pop	r6
    84fa:	5f 90       	pop	r5
    84fc:	4f 90       	pop	r4
    84fe:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    8500:	5b 01       	movw	r10, r22
    8502:	ac 1a       	sub	r10, r28
    8504:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    8506:	4c 01       	movw	r8, r24
    8508:	8c 0e       	add	r8, r28
    850a:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    850c:	a0 91 66 11 	lds	r26, 0x1166	; 0x801166 <__flp>
    8510:	b0 91 67 11 	lds	r27, 0x1167	; 0x801167 <__flp+0x1>
    8514:	51 2c       	mov	r5, r1
    8516:	41 2c       	mov	r4, r1
    8518:	f1 2c       	mov	r15, r1
    851a:	e1 2c       	mov	r14, r1
    851c:	10 97       	sbiw	r26, 0x00	; 0
    851e:	01 f5       	brne	.+64     	; 0x8560 <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    8520:	80 91 d9 10 	lds	r24, 0x10D9	; 0x8010d9 <__brkval>
    8524:	90 91 da 10 	lds	r25, 0x10DA	; 0x8010da <__brkval+0x1>
    8528:	88 15       	cp	r24, r8
    852a:	99 05       	cpc	r25, r9
    852c:	09 f0       	breq	.+2      	; 0x8530 <realloc+0xe2>
    852e:	56 c0       	rjmp	.+172    	; 0x85dc <realloc+0x18e>
    8530:	46 16       	cp	r4, r22
    8532:	57 06       	cpc	r5, r23
    8534:	08 f0       	brcs	.+2      	; 0x8538 <realloc+0xea>
    8536:	52 c0       	rjmp	.+164    	; 0x85dc <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    8538:	8d b7       	in	r24, 0x3d	; 61
    853a:	9e b7       	in	r25, 0x3e	; 62
    853c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    8540:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    8544:	84 1b       	sub	r24, r20
    8546:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    8548:	e8 17       	cp	r30, r24
    854a:	f9 07       	cpc	r31, r25
    854c:	08 f0       	brcs	.+2      	; 0x8550 <realloc+0x102>
    854e:	53 c0       	rjmp	.+166    	; 0x85f6 <realloc+0x1a8>
			__brkval = cp;
    8550:	f0 93 da 10 	sts	0x10DA, r31	; 0x8010da <__brkval+0x1>
    8554:	e0 93 d9 10 	sts	0x10D9, r30	; 0x8010d9 <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    8558:	f9 01       	movw	r30, r18
    855a:	71 83       	std	Z+1, r23	; 0x01
    855c:	60 83       	st	Z, r22
			return ptr;
    855e:	be cf       	rjmp	.-132    	; 0x84dc <realloc+0x8e>
    8560:	8d 91       	ld	r24, X+
    8562:	9c 91       	ld	r25, X
    8564:	11 97       	sbiw	r26, 0x01	; 1
    8566:	12 96       	adiw	r26, 0x02	; 2
    8568:	6c 90       	ld	r6, X
    856a:	12 97       	sbiw	r26, 0x02	; 2
    856c:	13 96       	adiw	r26, 0x03	; 3
    856e:	7c 90       	ld	r7, X
    8570:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    8572:	a8 15       	cp	r26, r8
    8574:	b9 05       	cpc	r27, r9
    8576:	59 f5       	brne	.+86     	; 0x85ce <realloc+0x180>
    8578:	6c 01       	movw	r12, r24
    857a:	42 e0       	ldi	r20, 0x02	; 2
    857c:	c4 0e       	add	r12, r20
    857e:	d1 1c       	adc	r13, r1
    8580:	ca 14       	cp	r12, r10
    8582:	db 04       	cpc	r13, r11
    8584:	20 f1       	brcs	.+72     	; 0x85ce <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    8586:	ac 01       	movw	r20, r24
    8588:	4a 19       	sub	r20, r10
    858a:	5b 09       	sbc	r21, r11
    858c:	da 01       	movw	r26, r20
    858e:	12 96       	adiw	r26, 0x02	; 2
    8590:	15 97       	sbiw	r26, 0x05	; 5
    8592:	80 f0       	brcs	.+32     	; 0x85b4 <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    8594:	62 82       	std	Z+2, r6	; 0x02
    8596:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    8598:	51 83       	std	Z+1, r21	; 0x01
    859a:	40 83       	st	Z, r20
				fp1->sz = len;
    859c:	d9 01       	movw	r26, r18
    859e:	6d 93       	st	X+, r22
    85a0:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    85a2:	e1 14       	cp	r14, r1
    85a4:	f1 04       	cpc	r15, r1
    85a6:	71 f0       	breq	.+28     	; 0x85c4 <realloc+0x176>
				ofp3->nx = fp2;
    85a8:	d7 01       	movw	r26, r14
    85aa:	13 96       	adiw	r26, 0x03	; 3
    85ac:	fc 93       	st	X, r31
    85ae:	ee 93       	st	-X, r30
    85b0:	12 97       	sbiw	r26, 0x02	; 2
    85b2:	94 cf       	rjmp	.-216    	; 0x84dc <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    85b4:	22 96       	adiw	r28, 0x02	; 2
    85b6:	8c 0f       	add	r24, r28
    85b8:	9d 1f       	adc	r25, r29
    85ba:	f9 01       	movw	r30, r18
    85bc:	91 83       	std	Z+1, r25	; 0x01
    85be:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    85c0:	f3 01       	movw	r30, r6
    85c2:	ef cf       	rjmp	.-34     	; 0x85a2 <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    85c4:	f0 93 67 11 	sts	0x1167, r31	; 0x801167 <__flp+0x1>
    85c8:	e0 93 66 11 	sts	0x1166, r30	; 0x801166 <__flp>
    85cc:	87 cf       	rjmp	.-242    	; 0x84dc <realloc+0x8e>
    85ce:	48 16       	cp	r4, r24
    85d0:	59 06       	cpc	r5, r25
    85d2:	08 f4       	brcc	.+2      	; 0x85d6 <realloc+0x188>
    85d4:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    85d6:	7d 01       	movw	r14, r26
    85d8:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    85da:	a0 cf       	rjmp	.-192    	; 0x851c <realloc+0xce>
    85dc:	cb 01       	movw	r24, r22
    85de:	0e de       	rcall	.-996    	; 0x81fc <malloc>
    85e0:	7c 01       	movw	r14, r24
    85e2:	00 97       	sbiw	r24, 0x00	; 0
    85e4:	41 f0       	breq	.+16     	; 0x85f6 <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    85e6:	ae 01       	movw	r20, r28
    85e8:	b8 01       	movw	r22, r16
    85ea:	0e 94 26 4f 	call	0x9e4c	; 0x9e4c <memcpy>
	free(ptr);
    85ee:	c8 01       	movw	r24, r16
    85f0:	a5 de       	rcall	.-694    	; 0x833c <free>
	return memp;
    85f2:	87 01       	movw	r16, r14
    85f4:	73 cf       	rjmp	.-282    	; 0x84dc <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    85f6:	10 e0       	ldi	r17, 0x00	; 0
    85f8:	00 e0       	ldi	r16, 0x00	; 0
    85fa:	70 cf       	rjmp	.-288    	; 0x84dc <realloc+0x8e>

000085fc <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    85fc:	1d ba       	out	0x1d, r1	; 29
    85fe:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    8602:	1c bc       	out	0x2c, r1	; 44
    8604:	10 be       	out	0x30, r1	; 48
    8606:	1f ba       	out	0x1f, r1	; 31
    8608:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    860c:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    8610:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    8614:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    8618:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    861c:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8620:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    8624:	11 b8       	out	0x01, r1	; 1
    8626:	14 b8       	out	0x04, r1	; 4
    8628:	17 b8       	out	0x07, r1	; 7
    862a:	1a b8       	out	0x0a, r1	; 10
    862c:	1d b8       	out	0x0d, r1	; 13
    862e:	10 ba       	out	0x10, r1	; 16
    8630:	12 b8       	out	0x02, r1	; 2
    8632:	15 b8       	out	0x05, r1	; 5
    8634:	18 b8       	out	0x08, r1	; 8
    8636:	1b b8       	out	0x0b, r1	; 11
    8638:	1e b8       	out	0x0e, r1	; 14
    863a:	11 ba       	out	0x11, r1	; 17
    863c:	08 95       	ret

0000863e <_init_Teensyduino_internal_>:
    863e:	f8 94       	cli
    8640:	e1 e6       	ldi	r30, 0x61	; 97
    8642:	f0 e0       	ldi	r31, 0x00	; 0
    8644:	20 e8       	ldi	r18, 0x80	; 128
    8646:	20 83       	st	Z, r18
    8648:	10 82       	st	Z, r1
    864a:	83 e0       	ldi	r24, 0x03	; 3
    864c:	84 bd       	out	0x24, r24	; 36
    864e:	85 bd       	out	0x25, r24	; 37
    8650:	ee e6       	ldi	r30, 0x6E	; 110
    8652:	f0 e0       	ldi	r31, 0x00	; 0
    8654:	80 81       	ld	r24, Z
    8656:	81 60       	ori	r24, 0x01	; 1
    8658:	80 83       	st	Z, r24
    865a:	91 e0       	ldi	r25, 0x01	; 1
    865c:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8660:	82 e0       	ldi	r24, 0x02	; 2
    8662:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    8666:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    866a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    866e:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8672:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    8676:	86 e8       	ldi	r24, 0x86	; 134
    8678:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    867c:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    8680:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8684:	d9 d1       	rcall	.+946    	; 0x8a38 <usb_init>
    8686:	78 94       	sei
    8688:	08 95       	ret

0000868a <analogRead>:
    868a:	9a ed       	ldi	r25, 0xDA	; 218
    868c:	98 0f       	add	r25, r24
    868e:	98 30       	cpi	r25, 0x08	; 8
    8690:	10 f1       	brcs	.+68     	; 0x86d6 <analogRead+0x4c>
    8692:	88 30       	cpi	r24, 0x08	; 8
    8694:	60 f4       	brcc	.+24     	; 0x86ae <analogRead+0x24>
    8696:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    869a:	21 e0       	ldi	r18, 0x01	; 1
    869c:	30 e0       	ldi	r19, 0x00	; 0
    869e:	08 2e       	mov	r0, r24
    86a0:	01 c0       	rjmp	.+2      	; 0x86a4 <analogRead+0x1a>
    86a2:	22 0f       	add	r18, r18
    86a4:	0a 94       	dec	r0
    86a6:	ea f7       	brpl	.-6      	; 0x86a2 <analogRead+0x18>
    86a8:	92 2b       	or	r25, r18
    86aa:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    86ae:	8f 71       	andi	r24, 0x1F	; 31
    86b0:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    86b4:	89 2b       	or	r24, r25
    86b6:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    86ba:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    86be:	80 64       	ori	r24, 0x40	; 64
    86c0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    86c4:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    86c8:	86 fd       	sbrc	r24, 6
    86ca:	fc cf       	rjmp	.-8      	; 0x86c4 <analogRead+0x3a>
    86cc:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    86d0:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    86d4:	08 95       	ret
    86d6:	89 2f       	mov	r24, r25
    86d8:	de cf       	rjmp	.-68     	; 0x8696 <analogRead+0xc>

000086da <_pinMode_output>:
    86da:	8e 32       	cpi	r24, 0x2E	; 46
    86dc:	70 f4       	brcc	.+28     	; 0x86fa <_pinMode_output+0x20>
    86de:	e8 e3       	ldi	r30, 0x38	; 56
    86e0:	f7 e0       	ldi	r31, 0x07	; 7
    86e2:	88 0f       	add	r24, r24
    86e4:	e8 0f       	add	r30, r24
    86e6:	f1 1d       	adc	r31, r1
    86e8:	25 91       	lpm	r18, Z+
    86ea:	e4 91       	lpm	r30, Z
    86ec:	f0 e0       	ldi	r31, 0x00	; 0
    86ee:	9f b7       	in	r25, 0x3f	; 63
    86f0:	f8 94       	cli
    86f2:	81 81       	ldd	r24, Z+1	; 0x01
    86f4:	82 2b       	or	r24, r18
    86f6:	81 83       	std	Z+1, r24	; 0x01
    86f8:	9f bf       	out	0x3f, r25	; 63
    86fa:	08 95       	ret

000086fc <_digitalWrite_HIGH>:
    86fc:	ee 32       	cpi	r30, 0x2E	; 46
    86fe:	50 f4       	brcc	.+20     	; 0x8714 <_digitalWrite_bailout>
    8700:	ee 0f       	add	r30, r30
    8702:	e5 57       	subi	r30, 0x75	; 117
    8704:	fc 4b       	sbci	r31, 0xBC	; 188
    8706:	09 94       	ijmp

00008708 <_digitalWrite_LOW>:
    8708:	ee 32       	cpi	r30, 0x2E	; 46
    870a:	20 f4       	brcc	.+8      	; 0x8714 <_digitalWrite_bailout>
    870c:	ee 0f       	add	r30, r30
    870e:	e9 51       	subi	r30, 0x19	; 25
    8710:	fc 4b       	sbci	r31, 0xBC	; 188
    8712:	09 94       	ijmp

00008714 <_digitalWrite_bailout>:
    8714:	08 95       	ret

00008716 <_digitalWrite_HIGH_TABLE>:
    8716:	58 9a       	sbi	0x0b, 0	; 11
    8718:	b6 c0       	rjmp	.+364    	; 0x8886 <_digitalWrite_OC0B>
    871a:	59 9a       	sbi	0x0b, 1	; 11
    871c:	d0 c0       	rjmp	.+416    	; 0x88be <_digitalWrite_OC2B>
    871e:	5a 9a       	sbi	0x0b, 2	; 11
    8720:	08 95       	ret
    8722:	5b 9a       	sbi	0x0b, 3	; 11
    8724:	08 95       	ret
    8726:	5c 9a       	sbi	0x0b, 4	; 11
    8728:	08 95       	ret
    872a:	5d 9a       	sbi	0x0b, 5	; 11
    872c:	08 95       	ret
    872e:	5e 9a       	sbi	0x0b, 6	; 11
    8730:	08 95       	ret
    8732:	5f 9a       	sbi	0x0b, 7	; 11
    8734:	08 95       	ret
    8736:	70 9a       	sbi	0x0e, 0	; 14
    8738:	08 95       	ret
    873a:	71 9a       	sbi	0x0e, 1	; 14
    873c:	08 95       	ret
    873e:	40 9a       	sbi	0x08, 0	; 8
    8740:	08 95       	ret
    8742:	41 9a       	sbi	0x08, 1	; 8
    8744:	08 95       	ret
    8746:	42 9a       	sbi	0x08, 2	; 8
    8748:	08 95       	ret
    874a:	43 9a       	sbi	0x08, 3	; 8
    874c:	08 95       	ret
    874e:	44 9a       	sbi	0x08, 4	; 8
    8750:	c8 c0       	rjmp	.+400    	; 0x88e2 <_digitalWrite_OC3C>
    8752:	45 9a       	sbi	0x08, 5	; 8
    8754:	c0 c0       	rjmp	.+384    	; 0x88d6 <_digitalWrite_OC3B>
    8756:	46 9a       	sbi	0x08, 6	; 8
    8758:	b8 c0       	rjmp	.+368    	; 0x88ca <_digitalWrite_OC3A>
    875a:	47 9a       	sbi	0x08, 7	; 8
    875c:	08 95       	ret
    875e:	76 9a       	sbi	0x0e, 6	; 14
    8760:	08 95       	ret
    8762:	77 9a       	sbi	0x0e, 7	; 14
    8764:	08 95       	ret
    8766:	28 9a       	sbi	0x05, 0	; 5
    8768:	08 95       	ret
    876a:	29 9a       	sbi	0x05, 1	; 5
    876c:	08 95       	ret
    876e:	2a 9a       	sbi	0x05, 2	; 5
    8770:	08 95       	ret
    8772:	2b 9a       	sbi	0x05, 3	; 5
    8774:	08 95       	ret
    8776:	2c 9a       	sbi	0x05, 4	; 5
    8778:	9c c0       	rjmp	.+312    	; 0x88b2 <_digitalWrite_OC2A>
    877a:	2d 9a       	sbi	0x05, 5	; 5
    877c:	88 c0       	rjmp	.+272    	; 0x888e <_digitalWrite_OC1A>
    877e:	2e 9a       	sbi	0x05, 6	; 5
    8780:	8c c0       	rjmp	.+280    	; 0x889a <_digitalWrite_OC1B>
    8782:	2f 9a       	sbi	0x05, 7	; 5
    8784:	90 c0       	rjmp	.+288    	; 0x88a6 <_digitalWrite_OC1C>
    8786:	10 9a       	sbi	0x02, 0	; 2
    8788:	08 95       	ret
    878a:	11 9a       	sbi	0x02, 1	; 2
    878c:	08 95       	ret
    878e:	12 9a       	sbi	0x02, 2	; 2
    8790:	08 95       	ret
    8792:	13 9a       	sbi	0x02, 3	; 2
    8794:	08 95       	ret
    8796:	14 9a       	sbi	0x02, 4	; 2
    8798:	08 95       	ret
    879a:	15 9a       	sbi	0x02, 5	; 2
    879c:	08 95       	ret
    879e:	16 9a       	sbi	0x02, 6	; 2
    87a0:	08 95       	ret
    87a2:	17 9a       	sbi	0x02, 7	; 2
    87a4:	08 95       	ret
    87a6:	74 9a       	sbi	0x0e, 4	; 14
    87a8:	08 95       	ret
    87aa:	75 9a       	sbi	0x0e, 5	; 14
    87ac:	08 95       	ret
    87ae:	88 9a       	sbi	0x11, 0	; 17
    87b0:	08 95       	ret
    87b2:	89 9a       	sbi	0x11, 1	; 17
    87b4:	08 95       	ret
    87b6:	8a 9a       	sbi	0x11, 2	; 17
    87b8:	08 95       	ret
    87ba:	8b 9a       	sbi	0x11, 3	; 17
    87bc:	08 95       	ret
    87be:	8c 9a       	sbi	0x11, 4	; 17
    87c0:	08 95       	ret
    87c2:	8d 9a       	sbi	0x11, 5	; 17
    87c4:	08 95       	ret
    87c6:	8e 9a       	sbi	0x11, 6	; 17
    87c8:	08 95       	ret
    87ca:	8f 9a       	sbi	0x11, 7	; 17
    87cc:	08 95       	ret

000087ce <_digitalWrite_LOW_TABLE>:
    87ce:	58 98       	cbi	0x0b, 0	; 11
    87d0:	5a c0       	rjmp	.+180    	; 0x8886 <_digitalWrite_OC0B>
    87d2:	59 98       	cbi	0x0b, 1	; 11
    87d4:	74 c0       	rjmp	.+232    	; 0x88be <_digitalWrite_OC2B>
    87d6:	5a 98       	cbi	0x0b, 2	; 11
    87d8:	08 95       	ret
    87da:	5b 98       	cbi	0x0b, 3	; 11
    87dc:	08 95       	ret
    87de:	5c 98       	cbi	0x0b, 4	; 11
    87e0:	08 95       	ret
    87e2:	5d 98       	cbi	0x0b, 5	; 11
    87e4:	08 95       	ret
    87e6:	5e 98       	cbi	0x0b, 6	; 11
    87e8:	08 95       	ret
    87ea:	5f 98       	cbi	0x0b, 7	; 11
    87ec:	08 95       	ret
    87ee:	70 98       	cbi	0x0e, 0	; 14
    87f0:	08 95       	ret
    87f2:	71 98       	cbi	0x0e, 1	; 14
    87f4:	08 95       	ret
    87f6:	40 98       	cbi	0x08, 0	; 8
    87f8:	08 95       	ret
    87fa:	41 98       	cbi	0x08, 1	; 8
    87fc:	08 95       	ret
    87fe:	42 98       	cbi	0x08, 2	; 8
    8800:	08 95       	ret
    8802:	43 98       	cbi	0x08, 3	; 8
    8804:	08 95       	ret
    8806:	44 98       	cbi	0x08, 4	; 8
    8808:	6c c0       	rjmp	.+216    	; 0x88e2 <_digitalWrite_OC3C>
    880a:	45 98       	cbi	0x08, 5	; 8
    880c:	64 c0       	rjmp	.+200    	; 0x88d6 <_digitalWrite_OC3B>
    880e:	46 98       	cbi	0x08, 6	; 8
    8810:	5c c0       	rjmp	.+184    	; 0x88ca <_digitalWrite_OC3A>
    8812:	47 98       	cbi	0x08, 7	; 8
    8814:	08 95       	ret
    8816:	76 98       	cbi	0x0e, 6	; 14
    8818:	08 95       	ret
    881a:	77 98       	cbi	0x0e, 7	; 14
    881c:	08 95       	ret
    881e:	28 98       	cbi	0x05, 0	; 5
    8820:	08 95       	ret
    8822:	29 98       	cbi	0x05, 1	; 5
    8824:	08 95       	ret
    8826:	2a 98       	cbi	0x05, 2	; 5
    8828:	08 95       	ret
    882a:	2b 98       	cbi	0x05, 3	; 5
    882c:	08 95       	ret
    882e:	2c 98       	cbi	0x05, 4	; 5
    8830:	40 c0       	rjmp	.+128    	; 0x88b2 <_digitalWrite_OC2A>
    8832:	2d 98       	cbi	0x05, 5	; 5
    8834:	2c c0       	rjmp	.+88     	; 0x888e <_digitalWrite_OC1A>
    8836:	2e 98       	cbi	0x05, 6	; 5
    8838:	30 c0       	rjmp	.+96     	; 0x889a <_digitalWrite_OC1B>
    883a:	2f 98       	cbi	0x05, 7	; 5
    883c:	34 c0       	rjmp	.+104    	; 0x88a6 <_digitalWrite_OC1C>
    883e:	10 98       	cbi	0x02, 0	; 2
    8840:	08 95       	ret
    8842:	11 98       	cbi	0x02, 1	; 2
    8844:	08 95       	ret
    8846:	12 98       	cbi	0x02, 2	; 2
    8848:	08 95       	ret
    884a:	13 98       	cbi	0x02, 3	; 2
    884c:	08 95       	ret
    884e:	14 98       	cbi	0x02, 4	; 2
    8850:	08 95       	ret
    8852:	15 98       	cbi	0x02, 5	; 2
    8854:	08 95       	ret
    8856:	16 98       	cbi	0x02, 6	; 2
    8858:	08 95       	ret
    885a:	17 98       	cbi	0x02, 7	; 2
    885c:	08 95       	ret
    885e:	74 98       	cbi	0x0e, 4	; 14
    8860:	08 95       	ret
    8862:	75 98       	cbi	0x0e, 5	; 14
    8864:	08 95       	ret
    8866:	88 98       	cbi	0x11, 0	; 17
    8868:	08 95       	ret
    886a:	89 98       	cbi	0x11, 1	; 17
    886c:	08 95       	ret
    886e:	8a 98       	cbi	0x11, 2	; 17
    8870:	08 95       	ret
    8872:	8b 98       	cbi	0x11, 3	; 17
    8874:	08 95       	ret
    8876:	8c 98       	cbi	0x11, 4	; 17
    8878:	08 95       	ret
    887a:	8d 98       	cbi	0x11, 5	; 17
    887c:	08 95       	ret
    887e:	8e 98       	cbi	0x11, 6	; 17
    8880:	08 95       	ret
    8882:	8f 98       	cbi	0x11, 7	; 17
    8884:	08 95       	ret

00008886 <_digitalWrite_OC0B>:
    8886:	e4 b5       	in	r30, 0x24	; 36
    8888:	ef 7d       	andi	r30, 0xDF	; 223
    888a:	e4 bd       	out	0x24, r30	; 36
    888c:	08 95       	ret

0000888e <_digitalWrite_OC1A>:
    888e:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8892:	ef 77       	andi	r30, 0x7F	; 127
    8894:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8898:	08 95       	ret

0000889a <_digitalWrite_OC1B>:
    889a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    889e:	ef 7d       	andi	r30, 0xDF	; 223
    88a0:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    88a4:	08 95       	ret

000088a6 <_digitalWrite_OC1C>:
    88a6:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    88aa:	e7 7f       	andi	r30, 0xF7	; 247
    88ac:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    88b0:	08 95       	ret

000088b2 <_digitalWrite_OC2A>:
    88b2:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    88b6:	ef 77       	andi	r30, 0x7F	; 127
    88b8:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    88bc:	08 95       	ret

000088be <_digitalWrite_OC2B>:
    88be:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    88c2:	ef 7d       	andi	r30, 0xDF	; 223
    88c4:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    88c8:	08 95       	ret

000088ca <_digitalWrite_OC3A>:
    88ca:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    88ce:	ef 77       	andi	r30, 0x7F	; 127
    88d0:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    88d4:	08 95       	ret

000088d6 <_digitalWrite_OC3B>:
    88d6:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    88da:	ef 7d       	andi	r30, 0xDF	; 223
    88dc:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    88e0:	08 95       	ret

000088e2 <_digitalWrite_OC3C>:
    88e2:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    88e6:	e7 7f       	andi	r30, 0xF7	; 247
    88e8:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    88ec:	08 95       	ret

000088ee <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    88ee:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    88f0:	84 b7       	in	r24, 0x34	; 52
    88f2:	87 7f       	andi	r24, 0xF7	; 247
    88f4:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    88f6:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    88fa:	80 61       	ori	r24, 0x10	; 16
    88fc:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    8900:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    8904:	80 e2       	ldi	r24, 0x20	; 32
    8906:	9e e4       	ldi	r25, 0x4E	; 78

00008908 <L_1164_loop>:
    8908:	01 97       	sbiw	r24, 0x01	; 1
    890a:	f1 f7       	brne	.-4      	; 0x8908 <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    890c:	81 e0       	ldi	r24, 0x01	; 1
    890e:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    8912:	80 e2       	ldi	r24, 0x20	; 32
    8914:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    8918:	80 e6       	ldi	r24, 0x60	; 96
    891a:	9a ee       	ldi	r25, 0xEA	; 234

0000891c <L_1178_loop>:
    891c:	01 97       	sbiw	r24, 0x01	; 1
    891e:	f1 f7       	brne	.-4      	; 0x891c <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    8920:	6d de       	rcall	.-806    	; 0x85fc <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    8922:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    8926:	ff cf       	rjmp	.-2      	; 0x8926 <L_1178_loop+0xa>

00008928 <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    8928:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    892a:	68 de       	rcall	.-816    	; 0x85fc <disable_peripherals>
    892c:	80 e6       	ldi	r24, 0x60	; 96
    892e:	9a ee       	ldi	r25, 0xEA	; 234

00008930 <L_1203_loop>:
    8930:	01 97       	sbiw	r24, 0x01	; 1
    8932:	f1 f7       	brne	.-4      	; 0x8930 <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    8934:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    8938:	ff cf       	rjmp	.-2      	; 0x8938 <L_1203_loop+0x8>

0000893a <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    893a:	8f 93       	push	r24
    893c:	8f b7       	in	r24, 0x3f	; 63
    893e:	8f 93       	push	r24
    8940:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <timer0_fract_count>
    8944:	8d 5f       	subi	r24, 0xFD	; 253
    8946:	8d 37       	cpi	r24, 0x7D	; 125
    8948:	d0 f4       	brcc	.+52     	; 0x897e <L_1218_fract_roll>

0000894a <L_1218_fract_noroll>:
    894a:	80 93 db 10 	sts	0x10DB, r24	; 0x8010db <timer0_fract_count>
    894e:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    8952:	8f 5f       	subi	r24, 0xFF	; 255
    8954:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <timer0_millis_count>
    8958:	d8 f0       	brcs	.+54     	; 0x8990 <L_1218_ovcount>

0000895a <L_1218_millis_inc_sext>:
    895a:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    895e:	8f 4f       	sbci	r24, 0xFF	; 255
    8960:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <timer0_millis_count+0x1>
    8964:	a8 f0       	brcs	.+42     	; 0x8990 <L_1218_ovcount>
    8966:	80 91 de 10 	lds	r24, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    896a:	8f 4f       	sbci	r24, 0xFF	; 255
    896c:	80 93 de 10 	sts	0x10DE, r24	; 0x8010de <timer0_millis_count+0x2>
    8970:	78 f0       	brcs	.+30     	; 0x8990 <L_1218_ovcount>
    8972:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    8976:	8f 4f       	sbci	r24, 0xFF	; 255
    8978:	80 93 df 10 	sts	0x10DF, r24	; 0x8010df <timer0_millis_count+0x3>
    897c:	09 c0       	rjmp	.+18     	; 0x8990 <L_1218_ovcount>

0000897e <L_1218_fract_roll>:
    897e:	8d 57       	subi	r24, 0x7D	; 125
    8980:	80 93 db 10 	sts	0x10DB, r24	; 0x8010db <timer0_fract_count>
    8984:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    8988:	8e 5f       	subi	r24, 0xFE	; 254
    898a:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <timer0_millis_count>
    898e:	28 f7       	brcc	.-54     	; 0x895a <L_1218_millis_inc_sext>

00008990 <L_1218_ovcount>:
    8990:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <timer0_micros_count>
    8994:	8c 5f       	subi	r24, 0xFC	; 252
    8996:	80 93 e0 10 	sts	0x10E0, r24	; 0x8010e0 <timer0_micros_count>
    899a:	58 f0       	brcs	.+22     	; 0x89b2 <L_1218_end>
    899c:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <timer0_micros_count+0x1>
    89a0:	8f 4f       	sbci	r24, 0xFF	; 255
    89a2:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <timer0_micros_count+0x1>
    89a6:	28 f0       	brcs	.+10     	; 0x89b2 <L_1218_end>
    89a8:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <timer0_micros_count+0x2>
    89ac:	8f 4f       	sbci	r24, 0xFF	; 255
    89ae:	80 93 e2 10 	sts	0x10E2, r24	; 0x8010e2 <timer0_micros_count+0x2>

000089b2 <L_1218_end>:
    89b2:	8f 91       	pop	r24
    89b4:	8f bf       	out	0x3f, r24	; 63
    89b6:	8f 91       	pop	r24
    89b8:	18 95       	reti

000089ba <delay>:
	);
}


void delay(uint32_t ms)
{
    89ba:	cf 92       	push	r12
    89bc:	df 92       	push	r13
    89be:	ef 92       	push	r14
    89c0:	ff 92       	push	r15
    89c2:	6b 01       	movw	r12, r22
    89c4:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    89c6:	19 d0       	rcall	.+50     	; 0x89fa <_micros>
	uint16_t start = (uint16_t)micros();
    89c8:	9b 01       	movw	r18, r22

	while (ms > 0) {
    89ca:	c1 14       	cp	r12, r1
    89cc:	d1 04       	cpc	r13, r1
    89ce:	e1 04       	cpc	r14, r1
    89d0:	f1 04       	cpc	r15, r1
    89d2:	29 f4       	brne	.+10     	; 0x89de <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    89d4:	ff 90       	pop	r15
    89d6:	ef 90       	pop	r14
    89d8:	df 90       	pop	r13
    89da:	cf 90       	pop	r12
    89dc:	08 95       	ret
    89de:	0d d0       	rcall	.+26     	; 0x89fa <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    89e0:	62 1b       	sub	r22, r18
    89e2:	73 0b       	sbc	r23, r19
    89e4:	68 3e       	cpi	r22, 0xE8	; 232
    89e6:	73 40       	sbci	r23, 0x03	; 3
    89e8:	80 f3       	brcs	.-32     	; 0x89ca <delay+0x10>
			ms--;
    89ea:	81 e0       	ldi	r24, 0x01	; 1
    89ec:	c8 1a       	sub	r12, r24
    89ee:	d1 08       	sbc	r13, r1
    89f0:	e1 08       	sbc	r14, r1
    89f2:	f1 08       	sbc	r15, r1
			start += 1000;
    89f4:	28 51       	subi	r18, 0x18	; 24
    89f6:	3c 4f       	sbci	r19, 0xFC	; 252
    89f8:	e8 cf       	rjmp	.-48     	; 0x89ca <delay+0x10>

000089fa <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    89fa:	0f b6       	in	r0, 0x3f	; 63
    89fc:	f8 94       	cli
    89fe:	66 b5       	in	r22, 0x26	; 38
    8a00:	15 b2       	in	r1, 0x15	; 21
    8a02:	70 91 e0 10 	lds	r23, 0x10E0	; 0x8010e0 <timer0_micros_count>
    8a06:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <timer0_micros_count+0x1>
    8a0a:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <timer0_micros_count+0x2>
    8a0e:	0f be       	out	0x3f, r0	; 63
    8a10:	10 fe       	sbrs	r1, 0
    8a12:	05 c0       	rjmp	.+10     	; 0x8a1e <L_1296_skip>
    8a14:	6f 3f       	cpi	r22, 0xFF	; 255
    8a16:	19 f0       	breq	.+6      	; 0x8a1e <L_1296_skip>
    8a18:	7c 5f       	subi	r23, 0xFC	; 252
    8a1a:	8f 4f       	sbci	r24, 0xFF	; 255
    8a1c:	9f 4f       	sbci	r25, 0xFF	; 255

00008a1e <L_1296_skip>:
    8a1e:	11 24       	eor	r1, r1
    8a20:	00 24       	eor	r0, r0
    8a22:	66 0f       	add	r22, r22
    8a24:	00 1c       	adc	r0, r0
    8a26:	66 0f       	add	r22, r22
    8a28:	00 1c       	adc	r0, r0
    8a2a:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    8a2c:	08 95       	ret

00008a2e <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    8a2e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8a32:	80 ff       	sbrs	r24, 0
    8a34:	fc cf       	rjmp	.-8      	; 0x8a2e <usb_wait_in_ready>
    8a36:	08 95       	ret

00008a38 <usb_init>:
    8a38:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    8a3c:	87 ff       	sbrs	r24, 7
    8a3e:	02 c0       	rjmp	.+4      	; 0x8a44 <usb_init+0xc>
    8a40:	85 ff       	sbrs	r24, 5
    8a42:	1b c0       	rjmp	.+54     	; 0x8a7a <usb_init+0x42>
    8a44:	81 e8       	ldi	r24, 0x81	; 129
    8a46:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    8a4a:	80 ea       	ldi	r24, 0xA0	; 160
    8a4c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    8a50:	86 e1       	ldi	r24, 0x16	; 22
    8a52:	89 bd       	out	0x29, r24	; 41
    8a54:	09 b4       	in	r0, 0x29	; 41
    8a56:	00 fe       	sbrs	r0, 0
    8a58:	fd cf       	rjmp	.-6      	; 0x8a54 <usb_init+0x1c>
    8a5a:	80 e9       	ldi	r24, 0x90	; 144
    8a5c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    8a60:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    8a64:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <usb_configuration>
    8a68:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <usb_suspended>
    8a6c:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <__bss_end>
    8a70:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    8a74:	8d e0       	ldi	r24, 0x0D	; 13
    8a76:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    8a7a:	08 95       	ret

00008a7c <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    8a7c:	1f 92       	push	r1
    8a7e:	0f 92       	push	r0
    8a80:	0f b6       	in	r0, 0x3f	; 63
    8a82:	0f 92       	push	r0
    8a84:	11 24       	eor	r1, r1
    8a86:	0b b6       	in	r0, 0x3b	; 59
    8a88:	0f 92       	push	r0
    8a8a:	2f 93       	push	r18
    8a8c:	3f 93       	push	r19
    8a8e:	4f 93       	push	r20
    8a90:	5f 93       	push	r21
    8a92:	6f 93       	push	r22
    8a94:	7f 93       	push	r23
    8a96:	8f 93       	push	r24
    8a98:	9f 93       	push	r25
    8a9a:	af 93       	push	r26
    8a9c:	bf 93       	push	r27
    8a9e:	ef 93       	push	r30
    8aa0:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    8aa2:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    8aa6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    8aaa:	93 ff       	sbrs	r25, 3
    8aac:	11 c0       	rjmp	.+34     	; 0x8ad0 <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    8aae:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    8ab2:	81 e0       	ldi	r24, 0x01	; 1
    8ab4:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    8ab8:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    8abc:	82 e2       	ldi	r24, 0x22	; 34
    8abe:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    8ac2:	88 e0       	ldi	r24, 0x08	; 8
    8ac4:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    8ac8:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <usb_configuration>
		cdc_line_rtsdtr = 0;
    8acc:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    8ad0:	92 ff       	sbrs	r25, 2
    8ad2:	1d c0       	rjmp	.+58     	; 0x8b0e <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    8ad4:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    8ad8:	88 23       	and	r24, r24
    8ada:	c9 f0       	breq	.+50     	; 0x8b0e <__vector_10+0x92>
			t = transmit_flush_timer;
    8adc:	80 91 e6 10 	lds	r24, 0x10E6	; 0x8010e6 <transmit_flush_timer>
			if (t) {
    8ae0:	88 23       	and	r24, r24
    8ae2:	59 f0       	breq	.+22     	; 0x8afa <__vector_10+0x7e>
				transmit_flush_timer = --t;
    8ae4:	81 50       	subi	r24, 0x01	; 1
    8ae6:	80 93 e6 10 	sts	0x10E6, r24	; 0x8010e6 <transmit_flush_timer>
				if (!t) {
    8aea:	81 11       	cpse	r24, r1
    8aec:	06 c0       	rjmp	.+12     	; 0x8afa <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    8aee:	84 e0       	ldi	r24, 0x04	; 4
    8af0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    8af4:	8a e3       	ldi	r24, 0x3A	; 58
    8af6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    8afa:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <reboot_timer>
			if (t) {
    8afe:	88 23       	and	r24, r24
    8b00:	31 f0       	breq	.+12     	; 0x8b0e <__vector_10+0x92>
				reboot_timer = --t;
    8b02:	81 50       	subi	r24, 0x01	; 1
    8b04:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    8b08:	81 11       	cpse	r24, r1
    8b0a:	01 c0       	rjmp	.+2      	; 0x8b0e <__vector_10+0x92>
    8b0c:	f0 de       	rcall	.-544    	; 0x88ee <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    8b0e:	90 ff       	sbrs	r25, 0
    8b10:	0c c0       	rjmp	.+24     	; 0x8b2a <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    8b12:	80 e1       	ldi	r24, 0x10	; 16
    8b14:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    8b18:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <usb_configuration>
		usb_suspended = 1;
    8b1c:	81 e0       	ldi	r24, 0x01	; 1
    8b1e:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    8b22:	80 ea       	ldi	r24, 0xA0	; 160
    8b24:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    8b28:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    8b2a:	80 91 69 11 	lds	r24, 0x1169	; 0x801169 <usb_suspended>
    8b2e:	88 23       	and	r24, r24
    8b30:	79 f0       	breq	.+30     	; 0x8b50 <__vector_10+0xd4>
    8b32:	94 ff       	sbrs	r25, 4
    8b34:	0d c0       	rjmp	.+26     	; 0x8b50 <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    8b36:	86 e1       	ldi	r24, 0x16	; 22
    8b38:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    8b3a:	09 b4       	in	r0, 0x29	; 41
    8b3c:	00 fe       	sbrs	r0, 0
    8b3e:	fd cf       	rjmp	.-6      	; 0x8b3a <__vector_10+0xbe>
		USB_CONFIG();
    8b40:	80 e9       	ldi	r24, 0x90	; 144
    8b42:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    8b46:	8d e0       	ldi	r24, 0x0D	; 13
    8b48:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    8b4c:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <usb_suspended>
		return;
	}
}
    8b50:	ff 91       	pop	r31
    8b52:	ef 91       	pop	r30
    8b54:	bf 91       	pop	r27
    8b56:	af 91       	pop	r26
    8b58:	9f 91       	pop	r25
    8b5a:	8f 91       	pop	r24
    8b5c:	7f 91       	pop	r23
    8b5e:	6f 91       	pop	r22
    8b60:	5f 91       	pop	r21
    8b62:	4f 91       	pop	r20
    8b64:	3f 91       	pop	r19
    8b66:	2f 91       	pop	r18
    8b68:	0f 90       	pop	r0
    8b6a:	0b be       	out	0x3b, r0	; 59
    8b6c:	0f 90       	pop	r0
    8b6e:	0f be       	out	0x3f, r0	; 63
    8b70:	0f 90       	pop	r0
    8b72:	1f 90       	pop	r1
    8b74:	18 95       	reti

00008b76 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    8b76:	1f 92       	push	r1
    8b78:	0f 92       	push	r0
    8b7a:	0f b6       	in	r0, 0x3f	; 63
    8b7c:	0f 92       	push	r0
    8b7e:	11 24       	eor	r1, r1
    8b80:	0b b6       	in	r0, 0x3b	; 59
    8b82:	0f 92       	push	r0
    8b84:	ef 92       	push	r14
    8b86:	ff 92       	push	r15
    8b88:	0f 93       	push	r16
    8b8a:	1f 93       	push	r17
    8b8c:	2f 93       	push	r18
    8b8e:	3f 93       	push	r19
    8b90:	4f 93       	push	r20
    8b92:	5f 93       	push	r21
    8b94:	6f 93       	push	r22
    8b96:	7f 93       	push	r23
    8b98:	8f 93       	push	r24
    8b9a:	9f 93       	push	r25
    8b9c:	af 93       	push	r26
    8b9e:	bf 93       	push	r27
    8ba0:	cf 93       	push	r28
    8ba2:	df 93       	push	r29
    8ba4:	ef 93       	push	r30
    8ba6:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    8ba8:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    8bac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    8bb0:	83 ff       	sbrs	r24, 3
    8bb2:	20 c0       	rjmp	.+64     	; 0x8bf4 <__vector_11+0x7e>
		bmRequestType = UEDATX;
    8bb4:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    8bb8:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    8bbc:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8bc0:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    8bc4:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8bc8:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    8bcc:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8bd0:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    8bd4:	82 ef       	ldi	r24, 0xF2	; 242
    8bd6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    8bda:	c6 30       	cpi	r28, 0x06	; 6
    8bdc:	09 f0       	breq	.+2      	; 0x8be0 <__vector_11+0x6a>
    8bde:	5b c0       	rjmp	.+182    	; 0x8c96 <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    8be0:	e4 e9       	ldi	r30, 0x94	; 148
    8be2:	f7 e0       	ldi	r31, 0x07	; 7
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    8be4:	85 91       	lpm	r24, Z+
    8be6:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    8be8:	e8 16       	cp	r14, r24
    8bea:	f9 06       	cpc	r15, r25
    8bec:	39 f0       	breq	.+14     	; 0x8bfc <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    8bee:	35 96       	adiw	r30, 0x05	; 5
    8bf0:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    8bf2:	c1 f7       	brne	.-16     	; 0x8be4 <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    8bf4:	81 e2       	ldi	r24, 0x21	; 33
    8bf6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    8bfa:	2b c0       	rjmp	.+86     	; 0x8c52 <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    8bfc:	85 91       	lpm	r24, Z+
    8bfe:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    8c00:	08 17       	cp	r16, r24
    8c02:	19 07       	cpc	r17, r25
    8c04:	11 f0       	breq	.+4      	; 0x8c0a <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    8c06:	33 96       	adiw	r30, 0x03	; 3
					continue;
    8c08:	f3 cf       	rjmp	.-26     	; 0x8bf0 <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    8c0a:	45 91       	lpm	r20, Z+
    8c0c:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    8c0e:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    8c10:	2f 3f       	cpi	r18, 0xFF	; 255
    8c12:	31 05       	cpc	r19, r1
    8c14:	19 f0       	breq	.+6      	; 0x8c1c <__vector_11+0xa6>
    8c16:	10 f0       	brcs	.+4      	; 0x8c1c <__vector_11+0xa6>
    8c18:	2f ef       	ldi	r18, 0xFF	; 255
    8c1a:	30 e0       	ldi	r19, 0x00	; 0
    8c1c:	82 17       	cp	r24, r18
    8c1e:	08 f4       	brcc	.+2      	; 0x8c22 <__vector_11+0xac>
    8c20:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8c22:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    8c24:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    8c28:	98 2f       	mov	r25, r24
    8c2a:	95 70       	andi	r25, 0x05	; 5
    8c2c:	d9 f3       	breq	.-10     	; 0x8c24 <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    8c2e:	82 fd       	sbrc	r24, 2
    8c30:	10 c0       	rjmp	.+32     	; 0x8c52 <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    8c32:	82 2f       	mov	r24, r18
    8c34:	21 32       	cpi	r18, 0x21	; 33
    8c36:	08 f0       	brcs	.+2      	; 0x8c3a <__vector_11+0xc4>
    8c38:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    8c3a:	98 2f       	mov	r25, r24
    8c3c:	91 11       	cpse	r25, r1
    8c3e:	24 c0       	rjmp	.+72     	; 0x8c88 <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    8c40:	92 2f       	mov	r25, r18
    8c42:	98 1b       	sub	r25, r24
    8c44:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8c46:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    8c4a:	91 11       	cpse	r25, r1
    8c4c:	1b c0       	rjmp	.+54     	; 0x8c84 <__vector_11+0x10e>
    8c4e:	20 32       	cpi	r18, 0x20	; 32
    8c50:	c8 f4       	brcc	.+50     	; 0x8c84 <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    8c52:	ff 91       	pop	r31
    8c54:	ef 91       	pop	r30
    8c56:	df 91       	pop	r29
    8c58:	cf 91       	pop	r28
    8c5a:	bf 91       	pop	r27
    8c5c:	af 91       	pop	r26
    8c5e:	9f 91       	pop	r25
    8c60:	8f 91       	pop	r24
    8c62:	7f 91       	pop	r23
    8c64:	6f 91       	pop	r22
    8c66:	5f 91       	pop	r21
    8c68:	4f 91       	pop	r20
    8c6a:	3f 91       	pop	r19
    8c6c:	2f 91       	pop	r18
    8c6e:	1f 91       	pop	r17
    8c70:	0f 91       	pop	r16
    8c72:	ff 90       	pop	r15
    8c74:	ef 90       	pop	r14
    8c76:	0f 90       	pop	r0
    8c78:	0b be       	out	0x3b, r0	; 59
    8c7a:	0f 90       	pop	r0
    8c7c:	0f be       	out	0x3f, r0	; 63
    8c7e:	0f 90       	pop	r0
    8c80:	1f 90       	pop	r1
    8c82:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    8c84:	28 2f       	mov	r18, r24
    8c86:	ce cf       	rjmp	.-100    	; 0x8c24 <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    8c88:	fa 01       	movw	r30, r20
    8c8a:	45 91       	lpm	r20, Z+
    8c8c:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8c90:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    8c92:	91 50       	subi	r25, 0x01	; 1
    8c94:	d3 cf       	rjmp	.-90     	; 0x8c3c <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    8c96:	c5 30       	cpi	r28, 0x05	; 5
    8c98:	49 f4       	brne	.+18     	; 0x8cac <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8c9a:	8e ef       	ldi	r24, 0xFE	; 254
    8c9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    8ca0:	c6 de       	rcall	.-628    	; 0x8a2e <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    8ca2:	8e 2d       	mov	r24, r14
    8ca4:	80 68       	ori	r24, 0x80	; 128
    8ca6:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    8caa:	d3 cf       	rjmp	.-90     	; 0x8c52 <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    8cac:	c9 30       	cpi	r28, 0x09	; 9
    8cae:	21 f5       	brne	.+72     	; 0x8cf8 <__vector_11+0x182>
    8cb0:	d1 11       	cpse	r29, r1
    8cb2:	a0 cf       	rjmp	.-192    	; 0x8bf4 <__vector_11+0x7e>
			usb_configuration = wValue;
    8cb4:	e0 92 6a 11 	sts	0x116A, r14	; 0x80116a <usb_configuration>
			cdc_line_rtsdtr = 0;
    8cb8:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <__bss_end>
			transmit_flush_timer = 0;
    8cbc:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8cc0:	8e ef       	ldi	r24, 0xFE	; 254
    8cc2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    8cc6:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    8cc8:	e7 e5       	ldi	r30, 0x57	; 87
    8cca:	f8 e0       	ldi	r31, 0x08	; 8
			for (i=1; i<5; i++) {
				UENUM = i;
    8ccc:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    8cd0:	95 91       	lpm	r25, Z+
				UECONX = en;
    8cd2:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    8cd6:	99 23       	and	r25, r25
    8cd8:	31 f0       	breq	.+12     	; 0x8ce6 <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    8cda:	95 91       	lpm	r25, Z+
    8cdc:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    8ce0:	95 91       	lpm	r25, Z+
    8ce2:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    8ce6:	8f 5f       	subi	r24, 0xFF	; 255
    8ce8:	85 30       	cpi	r24, 0x05	; 5
    8cea:	81 f7       	brne	.-32     	; 0x8ccc <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    8cec:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    8cee:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    8cf2:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    8cf6:	ad cf       	rjmp	.-166    	; 0x8c52 <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    8cf8:	c8 30       	cpi	r28, 0x08	; 8
    8cfa:	61 f4       	brne	.+24     	; 0x8d14 <__vector_11+0x19e>
    8cfc:	d0 38       	cpi	r29, 0x80	; 128
    8cfe:	09 f0       	breq	.+2      	; 0x8d02 <__vector_11+0x18c>
			usb_wait_in_ready();
    8d00:	79 cf       	rjmp	.-270    	; 0x8bf4 <__vector_11+0x7e>
    8d02:	95 de       	rcall	.-726    	; 0x8a2e <usb_wait_in_ready>
			UEDATX = usb_configuration;
    8d04:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    8d08:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8d0c:	8e ef       	ldi	r24, 0xFE	; 254
    8d0e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8d12:	9f cf       	rjmp	.-194    	; 0x8c52 <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    8d14:	c1 32       	cpi	r28, 0x21	; 33
    8d16:	79 f4       	brne	.+30     	; 0x8d36 <__vector_11+0x1c0>
    8d18:	d1 3a       	cpi	r29, 0xA1	; 161
    8d1a:	09 f0       	breq	.+2      	; 0x8d1e <__vector_11+0x1a8>
			usb_wait_in_ready();
    8d1c:	6b cf       	rjmp	.-298    	; 0x8bf4 <__vector_11+0x7e>
    8d1e:	87 de       	rcall	.-754    	; 0x8a2e <usb_wait_in_ready>
			p = cdc_line_coding;
    8d20:	e1 e1       	ldi	r30, 0x11	; 17
    8d22:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    8d24:	80 81       	ld	r24, Z
    8d26:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8d2a:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    8d2c:	81 e0       	ldi	r24, 0x01	; 1
    8d2e:	e8 31       	cpi	r30, 0x18	; 24
    8d30:	f8 07       	cpc	r31, r24
    8d32:	c1 f7       	brne	.-16     	; 0x8d24 <__vector_11+0x1ae>
    8d34:	eb cf       	rjmp	.-42     	; 0x8d0c <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    8d36:	c0 32       	cpi	r28, 0x20	; 32
    8d38:	09 f0       	breq	.+2      	; 0x8d3c <__vector_11+0x1c6>
    8d3a:	47 c0       	rjmp	.+142    	; 0x8dca <__vector_11+0x254>
    8d3c:	d1 32       	cpi	r29, 0x21	; 33
    8d3e:	09 f0       	breq	.+2      	; 0x8d42 <__vector_11+0x1cc>
    8d40:	59 cf       	rjmp	.-334    	; 0x8bf4 <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    8d42:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8d46:	82 ff       	sbrs	r24, 2
    8d48:	fc cf       	rjmp	.-8      	; 0x8d42 <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    8d4a:	e1 e1       	ldi	r30, 0x11	; 17
    8d4c:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    8d4e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8d52:	80 83       	st	Z, r24
    8d54:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    8d56:	91 e0       	ldi	r25, 0x01	; 1
    8d58:	e8 31       	cpi	r30, 0x18	; 24
    8d5a:	f9 07       	cpc	r31, r25
    8d5c:	c1 f7       	brne	.-16     	; 0x8d4e <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    8d5e:	8b ef       	ldi	r24, 0xFB	; 251
    8d60:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8d64:	8e ef       	ldi	r24, 0xFE	; 254
    8d66:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    8d6a:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    8d6e:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    8d72:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    8d76:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    8d7a:	90 e0       	ldi	r25, 0x00	; 0
    8d7c:	b0 e0       	ldi	r27, 0x00	; 0
    8d7e:	a0 e0       	ldi	r26, 0x00	; 0
    8d80:	dc 01       	movw	r26, r24
    8d82:	99 27       	eor	r25, r25
    8d84:	88 27       	eor	r24, r24
    8d86:	94 2b       	or	r25, r20
    8d88:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    8d8a:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    8d8c:	86 38       	cpi	r24, 0x86	; 134
    8d8e:	91 05       	cpc	r25, r1
    8d90:	a1 05       	cpc	r26, r1
    8d92:	b1 05       	cpc	r27, r1
    8d94:	21 f4       	brne	.+8      	; 0x8d9e <__vector_11+0x228>
    8d96:	8f e0       	ldi	r24, 0x0F	; 15
    8d98:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <reboot_timer>
    8d9c:	5a cf       	rjmp	.-332    	; 0x8c52 <__vector_11+0xdc>
			if (baud == 150UL) {
    8d9e:	86 39       	cpi	r24, 0x96	; 150
    8da0:	91 05       	cpc	r25, r1
    8da2:	a1 05       	cpc	r26, r1
    8da4:	b1 05       	cpc	r27, r1
    8da6:	09 f0       	breq	.+2      	; 0x8daa <__vector_11+0x234>
    8da8:	54 cf       	rjmp	.-344    	; 0x8c52 <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    8daa:	84 e0       	ldi	r24, 0x04	; 4
    8dac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    8db0:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    8db2:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    8db6:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    8db8:	09 f4       	brne	.+2      	; 0x8dbc <__vector_11+0x246>
    8dba:	b6 dd       	rcall	.-1172   	; 0x8928 <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    8dbc:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    8dc0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8dc4:	82 fd       	sbrc	r24, 2
    8dc6:	fc cf       	rjmp	.-8      	; 0x8dc0 <__vector_11+0x24a>
    8dc8:	f4 cf       	rjmp	.-24     	; 0x8db2 <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    8dca:	c2 32       	cpi	r28, 0x22	; 34
    8dcc:	39 f4       	brne	.+14     	; 0x8ddc <__vector_11+0x266>
    8dce:	d1 32       	cpi	r29, 0x21	; 33
    8dd0:	09 f0       	breq	.+2      	; 0x8dd4 <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    8dd2:	10 cf       	rjmp	.-480    	; 0x8bf4 <__vector_11+0x7e>
    8dd4:	e0 92 68 11 	sts	0x1168, r14	; 0x801168 <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    8dd8:	2a de       	rcall	.-940    	; 0x8a2e <usb_wait_in_ready>
    8dda:	98 cf       	rjmp	.-208    	; 0x8d0c <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    8ddc:	c3 32       	cpi	r28, 0x23	; 35
    8dde:	21 f4       	brne	.+8      	; 0x8de8 <__vector_11+0x272>
    8de0:	d1 32       	cpi	r29, 0x21	; 33
    8de2:	09 f0       	breq	.+2      	; 0x8de6 <__vector_11+0x270>
    8de4:	07 cf       	rjmp	.-498    	; 0x8bf4 <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    8de6:	f8 cf       	rjmp	.-16     	; 0x8dd8 <__vector_11+0x262>
    8de8:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    8dea:	11 c0       	rjmp	.+34     	; 0x8e0e <__vector_11+0x298>
    8dec:	20 de       	rcall	.-960    	; 0x8a2e <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    8dee:	d2 38       	cpi	r29, 0x82	; 130
    8df0:	49 f4       	brne	.+18     	; 0x8e04 <__vector_11+0x28e>
				UENUM = wIndex;
    8df2:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    8df6:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    8dfa:	c5 fb       	bst	r28, 5
    8dfc:	cc 27       	eor	r28, r28
    8dfe:	c0 f9       	bld	r28, 0
				UENUM = 0;
    8e00:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    8e04:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    8e08:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8e0c:	7f cf       	rjmp	.-258    	; 0x8d0c <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    8e0e:	8c 2f       	mov	r24, r28
    8e10:	8d 7f       	andi	r24, 0xFD	; 253
    8e12:	81 30       	cpi	r24, 0x01	; 1
    8e14:	09 f0       	breq	.+2      	; 0x8e18 <__vector_11+0x2a2>
    8e16:	ee ce       	rjmp	.-548    	; 0x8bf4 <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    8e18:	d2 30       	cpi	r29, 0x02	; 2
    8e1a:	09 f0       	breq	.+2      	; 0x8e1e <__vector_11+0x2a8>
    8e1c:	eb ce       	rjmp	.-554    	; 0x8bf4 <__vector_11+0x7e>
    8e1e:	ef 28       	or	r14, r15
    8e20:	09 f0       	breq	.+2      	; 0x8e24 <__vector_11+0x2ae>
    8e22:	e8 ce       	rjmp	.-560    	; 0x8bf4 <__vector_11+0x7e>
			i = wIndex & 0x7F;
    8e24:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    8e26:	8f ef       	ldi	r24, 0xFF	; 255
    8e28:	80 0f       	add	r24, r16
    8e2a:	86 30       	cpi	r24, 0x06	; 6
    8e2c:	08 f0       	brcs	.+2      	; 0x8e30 <__vector_11+0x2ba>
    8e2e:	e2 ce       	rjmp	.-572    	; 0x8bf4 <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8e30:	8e ef       	ldi	r24, 0xFE	; 254
    8e32:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    8e36:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    8e3a:	c3 30       	cpi	r28, 0x03	; 3
    8e3c:	09 f4       	brne	.+2      	; 0x8e40 <__vector_11+0x2ca>
    8e3e:	da ce       	rjmp	.-588    	; 0x8bf4 <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    8e40:	89 e1       	ldi	r24, 0x19	; 25
    8e42:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    8e46:	81 e0       	ldi	r24, 0x01	; 1
    8e48:	90 e0       	ldi	r25, 0x00	; 0
    8e4a:	01 c0       	rjmp	.+2      	; 0x8e4e <__vector_11+0x2d8>
    8e4c:	88 0f       	add	r24, r24
    8e4e:	0a 95       	dec	r16
    8e50:	ea f7       	brpl	.-6      	; 0x8e4c <__vector_11+0x2d6>
    8e52:	4d cf       	rjmp	.-358    	; 0x8cee <__vector_11+0x178>

00008e54 <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    8e54:	50 91 1b 11 	lds	r21, 0x111B	; 0x80111b <rx_buffer_head>
    8e58:	40 91 1a 11 	lds	r20, 0x111A	; 0x80111a <rx_buffer_tail>
    8e5c:	85 2f       	mov	r24, r21
    8e5e:	90 e0       	ldi	r25, 0x00	; 0
    8e60:	24 2f       	mov	r18, r20
    8e62:	30 e0       	ldi	r19, 0x00	; 0
    8e64:	54 17       	cp	r21, r20
    8e66:	18 f0       	brcs	.+6      	; 0x8e6e <HardwareSerial::available()+0x1a>
    8e68:	82 1b       	sub	r24, r18
    8e6a:	93 0b       	sbc	r25, r19
    8e6c:	08 95       	ret
    8e6e:	80 5c       	subi	r24, 0xC0	; 192
    8e70:	9f 4f       	sbci	r25, 0xFF	; 255
    8e72:	fa cf       	rjmp	.-12     	; 0x8e68 <HardwareSerial::available()+0x14>

00008e74 <HardwareSerial::availableForWrite()>:
    8e74:	50 91 1b 11 	lds	r21, 0x111B	; 0x80111b <rx_buffer_head>
    8e78:	40 91 1a 11 	lds	r20, 0x111A	; 0x80111a <rx_buffer_tail>
    8e7c:	25 2f       	mov	r18, r21
    8e7e:	30 e0       	ldi	r19, 0x00	; 0
    8e80:	84 2f       	mov	r24, r20
    8e82:	90 e0       	ldi	r25, 0x00	; 0
    8e84:	82 1b       	sub	r24, r18
    8e86:	93 0b       	sbc	r25, r19
    8e88:	54 17       	cp	r21, r20
    8e8a:	10 f0       	brcs	.+4      	; 0x8e90 <HardwareSerial::availableForWrite()+0x1c>
    8e8c:	87 96       	adiw	r24, 0x27	; 39
    8e8e:	08 95       	ret
    8e90:	01 97       	sbiw	r24, 0x01	; 1
    8e92:	08 95       	ret

00008e94 <HardwareSerial::peek()>:
    8e94:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <rx_buffer_head>
    8e98:	e0 91 1a 11 	lds	r30, 0x111A	; 0x80111a <rx_buffer_tail>
    8e9c:	8e 17       	cp	r24, r30
    8e9e:	51 f0       	breq	.+20     	; 0x8eb4 <HardwareSerial::peek()+0x20>
    8ea0:	ef 5f       	subi	r30, 0xFF	; 255
    8ea2:	e0 34       	cpi	r30, 0x40	; 64
    8ea4:	08 f0       	brcs	.+2      	; 0x8ea8 <HardwareSerial::peek()+0x14>
    8ea6:	e0 e0       	ldi	r30, 0x00	; 0
    8ea8:	f0 e0       	ldi	r31, 0x00	; 0
    8eaa:	e4 5e       	subi	r30, 0xE4	; 228
    8eac:	fe 4e       	sbci	r31, 0xEE	; 238
    8eae:	80 81       	ld	r24, Z
    8eb0:	90 e0       	ldi	r25, 0x00	; 0
    8eb2:	08 95       	ret
    8eb4:	8f ef       	ldi	r24, 0xFF	; 255
    8eb6:	9f ef       	ldi	r25, 0xFF	; 255
    8eb8:	08 95       	ret

00008eba <HardwareSerial::read()>:
    8eba:	90 91 1b 11 	lds	r25, 0x111B	; 0x80111b <rx_buffer_head>
    8ebe:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <rx_buffer_tail>
    8ec2:	98 17       	cp	r25, r24
    8ec4:	79 f0       	breq	.+30     	; 0x8ee4 <HardwareSerial::read()+0x2a>
    8ec6:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <rx_buffer_tail>
    8eca:	9f 5f       	subi	r25, 0xFF	; 255
    8ecc:	90 34       	cpi	r25, 0x40	; 64
    8ece:	08 f0       	brcs	.+2      	; 0x8ed2 <HardwareSerial::read()+0x18>
    8ed0:	90 e0       	ldi	r25, 0x00	; 0
    8ed2:	e9 2f       	mov	r30, r25
    8ed4:	f0 e0       	ldi	r31, 0x00	; 0
    8ed6:	e4 5e       	subi	r30, 0xE4	; 228
    8ed8:	fe 4e       	sbci	r31, 0xEE	; 238
    8eda:	80 81       	ld	r24, Z
    8edc:	90 93 1a 11 	sts	0x111A, r25	; 0x80111a <rx_buffer_tail>
    8ee0:	90 e0       	ldi	r25, 0x00	; 0
    8ee2:	08 95       	ret
    8ee4:	8f ef       	ldi	r24, 0xFF	; 255
    8ee6:	9f ef       	ldi	r25, 0xFF	; 255
    8ee8:	08 95       	ret

00008eea <HardwareSerial::flush()>:
    8eea:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <transmitting>
    8eee:	81 11       	cpse	r24, r1
    8ef0:	fc cf       	rjmp	.-8      	; 0x8eea <HardwareSerial::flush()>
    8ef2:	08 95       	ret

00008ef4 <HardwareSerial::write(unsigned char)>:
    8ef4:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8ef8:	23 fd       	sbrc	r18, 3
    8efa:	06 c0       	rjmp	.+12     	; 0x8f08 <HardwareSerial::write(unsigned char)+0x14>
    8efc:	21 e0       	ldi	r18, 0x01	; 1
    8efe:	fc 01       	movw	r30, r24
    8f00:	22 83       	std	Z+2, r18	; 0x02
    8f02:	90 e0       	ldi	r25, 0x00	; 0
    8f04:	80 e0       	ldi	r24, 0x00	; 0
    8f06:	08 95       	ret
    8f08:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    8f0c:	8f 3f       	cpi	r24, 0xFF	; 255
    8f0e:	41 f0       	breq	.+16     	; 0x8f20 <HardwareSerial::write(unsigned char)+0x2c>
    8f10:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <transmitting>
    8f14:	81 11       	cpse	r24, r1
    8f16:	04 c0       	rjmp	.+8      	; 0x8f20 <HardwareSerial::write(unsigned char)+0x2c>
    8f18:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    8f1c:	f0 e0       	ldi	r31, 0x00	; 0
    8f1e:	ee db       	rcall	.-2084   	; 0x86fc <_digitalWrite_HIGH>
    8f20:	90 91 f1 10 	lds	r25, 0x10F1	; 0x8010f1 <tx_buffer_head>
    8f24:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    8f28:	98 13       	cpse	r25, r24
    8f2a:	04 c0       	rjmp	.+8      	; 0x8f34 <HardwareSerial::write(unsigned char)+0x40>
    8f2c:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    8f30:	85 fd       	sbrc	r24, 5
    8f32:	19 c0       	rjmp	.+50     	; 0x8f66 <HardwareSerial::write(unsigned char)+0x72>
    8f34:	80 91 f1 10 	lds	r24, 0x10F1	; 0x8010f1 <tx_buffer_head>
    8f38:	8f 5f       	subi	r24, 0xFF	; 255
    8f3a:	88 32       	cpi	r24, 0x28	; 40
    8f3c:	f8 f4       	brcc	.+62     	; 0x8f7c <HardwareSerial::write(unsigned char)+0x88>
    8f3e:	90 91 f0 10 	lds	r25, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    8f42:	98 17       	cp	r25, r24
    8f44:	e1 f3       	breq	.-8      	; 0x8f3e <HardwareSerial::write(unsigned char)+0x4a>
    8f46:	e8 2f       	mov	r30, r24
    8f48:	f0 e0       	ldi	r31, 0x00	; 0
    8f4a:	ee 50       	subi	r30, 0x0E	; 14
    8f4c:	ff 4e       	sbci	r31, 0xEF	; 239
    8f4e:	60 83       	st	Z, r22
    8f50:	91 e0       	ldi	r25, 0x01	; 1
    8f52:	90 93 ef 10 	sts	0x10EF, r25	; 0x8010ef <transmitting>
    8f56:	80 93 f1 10 	sts	0x10F1, r24	; 0x8010f1 <tx_buffer_head>
    8f5a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8f5e:	80 62       	ori	r24, 0x20	; 32
    8f60:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8f64:	08 c0       	rjmp	.+16     	; 0x8f76 <HardwareSerial::write(unsigned char)+0x82>
    8f66:	8f b7       	in	r24, 0x3f	; 63
    8f68:	f8 94       	cli
    8f6a:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    8f6e:	91 e0       	ldi	r25, 0x01	; 1
    8f70:	90 93 ef 10 	sts	0x10EF, r25	; 0x8010ef <transmitting>
    8f74:	8f bf       	out	0x3f, r24	; 63
    8f76:	81 e0       	ldi	r24, 0x01	; 1
    8f78:	90 e0       	ldi	r25, 0x00	; 0
    8f7a:	08 95       	ret
    8f7c:	80 e0       	ldi	r24, 0x00	; 0
    8f7e:	df cf       	rjmp	.-66     	; 0x8f3e <HardwareSerial::write(unsigned char)+0x4a>

00008f80 <HardwareSerial::_begin(unsigned int, unsigned char)>:
    8f80:	1f 93       	push	r17
    8f82:	cf 93       	push	r28
    8f84:	df 93       	push	r29
    8f86:	eb 01       	movw	r28, r22
    8f88:	14 2f       	mov	r17, r20
    8f8a:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    8f8e:	4f 3f       	cpi	r20, 0xFF	; 255
    8f90:	29 f0       	breq	.+10     	; 0x8f9c <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    8f92:	84 2f       	mov	r24, r20
    8f94:	a2 db       	rcall	.-2236   	; 0x86da <_pinMode_output>
    8f96:	e1 2f       	mov	r30, r17
    8f98:	f0 e0       	ldi	r31, 0x00	; 0
    8f9a:	b6 db       	rcall	.-2196   	; 0x8708 <_digitalWrite_LOW>
    8f9c:	c0 ff       	sbrs	r28, 0
    8f9e:	24 c0       	rjmp	.+72     	; 0x8fe8 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    8fa0:	c1 30       	cpi	r28, 0x01	; 1
    8fa2:	80 e1       	ldi	r24, 0x10	; 16
    8fa4:	d8 07       	cpc	r29, r24
    8fa6:	00 f5       	brcc	.+64     	; 0x8fe8 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    8fa8:	82 e0       	ldi	r24, 0x02	; 2
    8faa:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    8fae:	21 97       	sbiw	r28, 0x01	; 1
    8fb0:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    8fb4:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    8fb8:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8fbc:	83 fd       	sbrc	r24, 3
    8fbe:	10 c0       	rjmp	.+32     	; 0x8fe0 <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    8fc0:	10 92 1b 11 	sts	0x111B, r1	; 0x80111b <rx_buffer_head>
    8fc4:	10 92 1a 11 	sts	0x111A, r1	; 0x80111a <rx_buffer_tail>
    8fc8:	10 92 f1 10 	sts	0x10F1, r1	; 0x8010f1 <tx_buffer_head>
    8fcc:	10 92 f0 10 	sts	0x10F0, r1	; 0x8010f0 <tx_buffer_tail>
    8fd0:	10 92 ef 10 	sts	0x10EF, r1	; 0x8010ef <transmitting>
    8fd4:	86 e0       	ldi	r24, 0x06	; 6
    8fd6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    8fda:	88 ed       	ldi	r24, 0xD8	; 216
    8fdc:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8fe0:	df 91       	pop	r29
    8fe2:	cf 91       	pop	r28
    8fe4:	1f 91       	pop	r17
    8fe6:	08 95       	ret
    8fe8:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    8fec:	d6 95       	lsr	r29
    8fee:	c7 95       	ror	r28
    8ff0:	de cf       	rjmp	.-68     	; 0x8fae <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

00008ff2 <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    8ff2:	1f 92       	push	r1
    8ff4:	0f 92       	push	r0
    8ff6:	0f b6       	in	r0, 0x3f	; 63
    8ff8:	0f 92       	push	r0
    8ffa:	11 24       	eor	r1, r1
    8ffc:	0b b6       	in	r0, 0x3b	; 59
    8ffe:	0f 92       	push	r0
    9000:	2f 93       	push	r18
    9002:	8f 93       	push	r24
    9004:	9f 93       	push	r25
    9006:	ef 93       	push	r30
    9008:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    900a:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    900e:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <rx_buffer_head>
    9012:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    9014:	80 34       	cpi	r24, 0x40	; 64
    9016:	08 f0       	brcs	.+2      	; 0x901a <__vector_25+0x28>
    9018:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    901a:	20 91 1a 11 	lds	r18, 0x111A	; 0x80111a <rx_buffer_tail>
    901e:	28 17       	cp	r18, r24
    9020:	39 f0       	breq	.+14     	; 0x9030 <__vector_25+0x3e>
		rx_buffer[i] = c;
    9022:	e8 2f       	mov	r30, r24
    9024:	f0 e0       	ldi	r31, 0x00	; 0
    9026:	e4 5e       	subi	r30, 0xE4	; 228
    9028:	fe 4e       	sbci	r31, 0xEE	; 238
    902a:	90 83       	st	Z, r25
		rx_buffer_head = i;
    902c:	80 93 1b 11 	sts	0x111B, r24	; 0x80111b <rx_buffer_head>
	}
}
    9030:	ff 91       	pop	r31
    9032:	ef 91       	pop	r30
    9034:	9f 91       	pop	r25
    9036:	8f 91       	pop	r24
    9038:	2f 91       	pop	r18
    903a:	0f 90       	pop	r0
    903c:	0b be       	out	0x3b, r0	; 59
    903e:	0f 90       	pop	r0
    9040:	0f be       	out	0x3f, r0	; 63
    9042:	0f 90       	pop	r0
    9044:	1f 90       	pop	r1
    9046:	18 95       	reti

00009048 <__vector_26>:

ISR(USART1_UDRE_vect)
{
    9048:	1f 92       	push	r1
    904a:	0f 92       	push	r0
    904c:	0f b6       	in	r0, 0x3f	; 63
    904e:	0f 92       	push	r0
    9050:	11 24       	eor	r1, r1
    9052:	0b b6       	in	r0, 0x3b	; 59
    9054:	0f 92       	push	r0
    9056:	8f 93       	push	r24
    9058:	9f 93       	push	r25
    905a:	ef 93       	push	r30
    905c:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    905e:	90 91 f1 10 	lds	r25, 0x10F1	; 0x8010f1 <tx_buffer_head>
    9062:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    9066:	98 13       	cpse	r25, r24
    9068:	10 c0       	rjmp	.+32     	; 0x908a <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    906a:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    906e:	8f 7d       	andi	r24, 0xDF	; 223
    9070:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    9074:	ff 91       	pop	r31
    9076:	ef 91       	pop	r30
    9078:	9f 91       	pop	r25
    907a:	8f 91       	pop	r24
    907c:	0f 90       	pop	r0
    907e:	0b be       	out	0x3b, r0	; 59
    9080:	0f 90       	pop	r0
    9082:	0f be       	out	0x3f, r0	; 63
    9084:	0f 90       	pop	r0
    9086:	1f 90       	pop	r1
    9088:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    908a:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    908e:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    9090:	88 32       	cpi	r24, 0x28	; 40
    9092:	08 f0       	brcs	.+2      	; 0x9096 <__vector_26+0x4e>
    9094:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    9096:	e8 2f       	mov	r30, r24
    9098:	f0 e0       	ldi	r31, 0x00	; 0
    909a:	ee 50       	subi	r30, 0x0E	; 14
    909c:	ff 4e       	sbci	r31, 0xEF	; 239
    909e:	90 81       	ld	r25, Z
    90a0:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    90a4:	80 93 f0 10 	sts	0x10F0, r24	; 0x8010f0 <tx_buffer_tail>
	}
}
    90a8:	e5 cf       	rjmp	.-54     	; 0x9074 <__vector_26+0x2c>

000090aa <__vector_27>:

ISR(USART1_TX_vect)
{
    90aa:	1f 92       	push	r1
    90ac:	0f 92       	push	r0
    90ae:	0f b6       	in	r0, 0x3f	; 63
    90b0:	0f 92       	push	r0
    90b2:	11 24       	eor	r1, r1
    90b4:	0b b6       	in	r0, 0x3b	; 59
    90b6:	0f 92       	push	r0
    90b8:	8f 93       	push	r24
    90ba:	ef 93       	push	r30
    90bc:	ff 93       	push	r31
	transmitting = 0;
    90be:	10 92 ef 10 	sts	0x10EF, r1	; 0x8010ef <transmitting>
	if (tx_enable_pin < 255) {
    90c2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    90c6:	8f 3f       	cpi	r24, 0xFF	; 255
    90c8:	21 f0       	breq	.+8      	; 0x90d2 <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    90ca:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    90ce:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    90d0:	1b db       	rcall	.-2506   	; 0x8708 <_digitalWrite_LOW>
	}
}
    90d2:	ff 91       	pop	r31
    90d4:	ef 91       	pop	r30
    90d6:	8f 91       	pop	r24
    90d8:	0f 90       	pop	r0
    90da:	0b be       	out	0x3b, r0	; 59
    90dc:	0f 90       	pop	r0
    90de:	0f be       	out	0x3f, r0	; 63
    90e0:	0f 90       	pop	r0
    90e2:	1f 90       	pop	r1
    90e4:	18 95       	reti

000090e6 <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    90e6:	e7 ee       	ldi	r30, 0xE7	; 231
    90e8:	f0 e1       	ldi	r31, 0x10	; 16
    90ea:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    90ec:	88 ee       	ldi	r24, 0xE8	; 232
    90ee:	93 e0       	ldi	r25, 0x03	; 3
    90f0:	a0 e0       	ldi	r26, 0x00	; 0
    90f2:	b0 e0       	ldi	r27, 0x00	; 0
    90f4:	83 83       	std	Z+3, r24	; 0x03
    90f6:	94 83       	std	Z+4, r25	; 0x04
    90f8:	a5 83       	std	Z+5, r26	; 0x05
    90fa:	b6 83       	std	Z+6, r27	; 0x06
    90fc:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    90fe:	82 ec       	ldi	r24, 0xC2	; 194
    9100:	99 e0       	ldi	r25, 0x09	; 9
    9102:	91 83       	std	Z+1, r25	; 0x01
    9104:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    9106:	08 95       	ret

00009108 <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    9108:	9a da       	rcall	.-2764   	; 0x863e <_init_Teensyduino_internal_>

	setup();
    910a:	0e 94 52 18 	call	0x30a4	; 0x30a4 <setup>
    
	while (1) {
		loop();
    910e:	0e 94 eb 31 	call	0x63d6	; 0x63d6 <loop>
    9112:	fd cf       	rjmp	.-6      	; 0x910e <main+0x6>

00009114 <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    9114:	73 c8       	rjmp	.-3866   	; 0x81fc <malloc>

00009116 <__cxa_guard_acquire>:
    9116:	fc 01       	movw	r30, r24
    9118:	81 e0       	ldi	r24, 0x01	; 1
    911a:	90 e0       	ldi	r25, 0x00	; 0
    911c:	20 81       	ld	r18, Z
    911e:	22 23       	and	r18, r18
    9120:	11 f0       	breq	.+4      	; 0x9126 <__cxa_guard_acquire+0x10>
    9122:	90 e0       	ldi	r25, 0x00	; 0
    9124:	80 e0       	ldi	r24, 0x00	; 0
    9126:	08 95       	ret

00009128 <__cxa_guard_release>:
    9128:	21 e0       	ldi	r18, 0x01	; 1
    912a:	fc 01       	movw	r30, r24
    912c:	20 83       	st	Z, r18
    912e:	08 95       	ret

00009130 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    9130:	08 95       	ret

00009132 <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    9132:	cf 92       	push	r12
    9134:	df 92       	push	r13
    9136:	ef 92       	push	r14
    9138:	ff 92       	push	r15
    913a:	0f 93       	push	r16
    913c:	1f 93       	push	r17
    913e:	cf 93       	push	r28
    9140:	df 93       	push	r29
    9142:	6c 01       	movw	r12, r24
    9144:	eb 01       	movw	r28, r22
    9146:	7b 01       	movw	r14, r22
    9148:	e4 0e       	add	r14, r20
    914a:	f5 1e       	adc	r15, r21
    914c:	10 e0       	ldi	r17, 0x00	; 0
    914e:	00 e0       	ldi	r16, 0x00	; 0
    9150:	ce 15       	cp	r28, r14
    9152:	df 05       	cpc	r29, r15
    9154:	61 f0       	breq	.+24     	; 0x916e <Print::write(unsigned char const*, unsigned int)+0x3c>
    9156:	69 91       	ld	r22, Y+
    9158:	d6 01       	movw	r26, r12
    915a:	ed 91       	ld	r30, X+
    915c:	fc 91       	ld	r31, X
    915e:	01 90       	ld	r0, Z+
    9160:	f0 81       	ld	r31, Z
    9162:	e0 2d       	mov	r30, r0
    9164:	c6 01       	movw	r24, r12
    9166:	09 95       	icall
    9168:	08 0f       	add	r16, r24
    916a:	19 1f       	adc	r17, r25
    916c:	f1 cf       	rjmp	.-30     	; 0x9150 <Print::write(unsigned char const*, unsigned int)+0x1e>
    916e:	c8 01       	movw	r24, r16
    9170:	df 91       	pop	r29
    9172:	cf 91       	pop	r28
    9174:	1f 91       	pop	r17
    9176:	0f 91       	pop	r16
    9178:	ff 90       	pop	r15
    917a:	ef 90       	pop	r14
    917c:	df 90       	pop	r13
    917e:	cf 90       	pop	r12
    9180:	08 95       	ret

00009182 <Print::print(String const&)>:
    9182:	8f 92       	push	r8
    9184:	9f 92       	push	r9
    9186:	af 92       	push	r10
    9188:	bf 92       	push	r11
    918a:	cf 92       	push	r12
    918c:	df 92       	push	r13
    918e:	ef 92       	push	r14
    9190:	ff 92       	push	r15
    9192:	0f 93       	push	r16
    9194:	1f 93       	push	r17
    9196:	cf 93       	push	r28
    9198:	df 93       	push	r29
    919a:	cd b7       	in	r28, 0x3d	; 61
    919c:	de b7       	in	r29, 0x3e	; 62
    919e:	a1 97       	sbiw	r28, 0x21	; 33
    91a0:	0f b6       	in	r0, 0x3f	; 63
    91a2:	f8 94       	cli
    91a4:	de bf       	out	0x3e, r29	; 62
    91a6:	0f be       	out	0x3f, r0	; 63
    91a8:	cd bf       	out	0x3d, r28	; 61
    91aa:	5c 01       	movw	r10, r24
    91ac:	4b 01       	movw	r8, r22
    91ae:	db 01       	movw	r26, r22
    91b0:	14 96       	adiw	r26, 0x04	; 4
    91b2:	0d 91       	ld	r16, X+
    91b4:	1c 91       	ld	r17, X
    91b6:	d1 2c       	mov	r13, r1
    91b8:	c1 2c       	mov	r12, r1
    91ba:	f1 2c       	mov	r15, r1
    91bc:	e1 2c       	mov	r14, r1
    91be:	01 15       	cp	r16, r1
    91c0:	11 05       	cpc	r17, r1
    91c2:	01 f1       	breq	.+64     	; 0x9204 <Print::print(String const&)+0x82>
    91c4:	96 01       	movw	r18, r12
    91c6:	41 e2       	ldi	r20, 0x21	; 33
    91c8:	50 e0       	ldi	r21, 0x00	; 0
    91ca:	be 01       	movw	r22, r28
    91cc:	6f 5f       	subi	r22, 0xFF	; 255
    91ce:	7f 4f       	sbci	r23, 0xFF	; 255
    91d0:	c4 01       	movw	r24, r8
    91d2:	53 d3       	rcall	.+1702   	; 0x987a <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    91d4:	a8 01       	movw	r20, r16
    91d6:	01 32       	cpi	r16, 0x21	; 33
    91d8:	11 05       	cpc	r17, r1
    91da:	10 f0       	brcs	.+4      	; 0x91e0 <Print::print(String const&)+0x5e>
    91dc:	40 e2       	ldi	r20, 0x20	; 32
    91de:	50 e0       	ldi	r21, 0x00	; 0
    91e0:	c4 0e       	add	r12, r20
    91e2:	d5 1e       	adc	r13, r21
    91e4:	04 1b       	sub	r16, r20
    91e6:	15 0b       	sbc	r17, r21
    91e8:	d5 01       	movw	r26, r10
    91ea:	ed 91       	ld	r30, X+
    91ec:	fc 91       	ld	r31, X
    91ee:	02 80       	ldd	r0, Z+2	; 0x02
    91f0:	f3 81       	ldd	r31, Z+3	; 0x03
    91f2:	e0 2d       	mov	r30, r0
    91f4:	be 01       	movw	r22, r28
    91f6:	6f 5f       	subi	r22, 0xFF	; 255
    91f8:	7f 4f       	sbci	r23, 0xFF	; 255
    91fa:	c5 01       	movw	r24, r10
    91fc:	09 95       	icall
    91fe:	e8 0e       	add	r14, r24
    9200:	f9 1e       	adc	r15, r25
    9202:	dd cf       	rjmp	.-70     	; 0x91be <Print::print(String const&)+0x3c>
    9204:	c7 01       	movw	r24, r14
    9206:	a1 96       	adiw	r28, 0x21	; 33
    9208:	0f b6       	in	r0, 0x3f	; 63
    920a:	f8 94       	cli
    920c:	de bf       	out	0x3e, r29	; 62
    920e:	0f be       	out	0x3f, r0	; 63
    9210:	cd bf       	out	0x3d, r28	; 61
    9212:	df 91       	pop	r29
    9214:	cf 91       	pop	r28
    9216:	1f 91       	pop	r17
    9218:	0f 91       	pop	r16
    921a:	ff 90       	pop	r15
    921c:	ef 90       	pop	r14
    921e:	df 90       	pop	r13
    9220:	cf 90       	pop	r12
    9222:	bf 90       	pop	r11
    9224:	af 90       	pop	r10
    9226:	9f 90       	pop	r9
    9228:	8f 90       	pop	r8
    922a:	08 95       	ret

0000922c <Print::println()>:
    922c:	cf 93       	push	r28
    922e:	df 93       	push	r29
    9230:	00 d0       	rcall	.+0      	; 0x9232 <Print::println()+0x6>
    9232:	cd b7       	in	r28, 0x3d	; 61
    9234:	de b7       	in	r29, 0x3e	; 62
    9236:	2d e0       	ldi	r18, 0x0D	; 13
    9238:	29 83       	std	Y+1, r18	; 0x01
    923a:	2a e0       	ldi	r18, 0x0A	; 10
    923c:	2a 83       	std	Y+2, r18	; 0x02
    923e:	dc 01       	movw	r26, r24
    9240:	ed 91       	ld	r30, X+
    9242:	fc 91       	ld	r31, X
    9244:	02 80       	ldd	r0, Z+2	; 0x02
    9246:	f3 81       	ldd	r31, Z+3	; 0x03
    9248:	e0 2d       	mov	r30, r0
    924a:	42 e0       	ldi	r20, 0x02	; 2
    924c:	50 e0       	ldi	r21, 0x00	; 0
    924e:	be 01       	movw	r22, r28
    9250:	6f 5f       	subi	r22, 0xFF	; 255
    9252:	7f 4f       	sbci	r23, 0xFF	; 255
    9254:	09 95       	icall
    9256:	0f 90       	pop	r0
    9258:	0f 90       	pop	r0
    925a:	df 91       	pop	r29
    925c:	cf 91       	pop	r28
    925e:	08 95       	ret

00009260 <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    9260:	cf 93       	push	r28
    9262:	df 93       	push	r29
    9264:	cd b7       	in	r28, 0x3d	; 61
    9266:	de b7       	in	r29, 0x3e	; 62
    9268:	2b 97       	sbiw	r28, 0x0b	; 11
    926a:	0f b6       	in	r0, 0x3f	; 63
    926c:	f8 94       	cli
    926e:	de bf       	out	0x3e, r29	; 62
    9270:	0f be       	out	0x3f, r0	; 63
    9272:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    9274:	fe 01       	movw	r30, r28
    9276:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    9278:	a3 e3       	ldi	r26, 0x33	; 51
    927a:	4a 9f       	mul	r20, r26
    927c:	44 27       	eor	r20, r20
    927e:	0a 0e       	add	r0, r26
    9280:	41 1d       	adc	r20, r1
    9282:	30 2d       	mov	r19, r0
    9284:	5a 9f       	mul	r21, r26
    9286:	55 27       	eor	r21, r21
    9288:	40 0d       	add	r20, r0
    928a:	51 1d       	adc	r21, r1
    928c:	6a 9f       	mul	r22, r26
    928e:	66 27       	eor	r22, r22
    9290:	50 0d       	add	r21, r0
    9292:	61 1d       	adc	r22, r1
    9294:	7a 9f       	mul	r23, r26
    9296:	77 27       	eor	r23, r23
    9298:	60 0d       	add	r22, r0
    929a:	71 1d       	adc	r23, r1
    929c:	11 24       	eor	r1, r1
    929e:	34 0f       	add	r19, r20
    92a0:	45 1f       	adc	r20, r21
    92a2:	56 1f       	adc	r21, r22
    92a4:	67 1f       	adc	r22, r23
    92a6:	71 1d       	adc	r23, r1
    92a8:	35 0f       	add	r19, r21
    92aa:	46 1f       	adc	r20, r22
    92ac:	57 1f       	adc	r21, r23
    92ae:	61 1d       	adc	r22, r1
    92b0:	71 1d       	adc	r23, r1
    92b2:	37 0f       	add	r19, r23
    92b4:	41 1d       	adc	r20, r1
    92b6:	51 1d       	adc	r21, r1
    92b8:	61 1d       	adc	r22, r1
    92ba:	71 1d       	adc	r23, r1
    92bc:	76 95       	lsr	r23
    92be:	67 95       	ror	r22
    92c0:	57 95       	ror	r21
    92c2:	47 95       	ror	r20
    92c4:	37 95       	ror	r19
    92c6:	aa e0       	ldi	r26, 0x0A	; 10
    92c8:	3a 9f       	mul	r19, r26
    92ca:	31 2d       	mov	r19, r1
    92cc:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    92ce:	df 01       	movw	r26, r30
    92d0:	30 5d       	subi	r19, 0xD0	; 208
    92d2:	3e 93       	st	-X, r19
	} while (n);
    92d4:	41 15       	cp	r20, r1
    92d6:	51 05       	cpc	r21, r1
    92d8:	61 05       	cpc	r22, r1
    92da:	71 05       	cpc	r23, r1
    92dc:	09 f5       	brne	.+66     	; 0x9320 <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    92de:	22 23       	and	r18, r18
    92e0:	41 f0       	breq	.+16     	; 0x92f2 <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    92e2:	bd 01       	movw	r22, r26
    92e4:	61 50       	subi	r22, 0x01	; 1
    92e6:	71 09       	sbc	r23, r1
    92e8:	2d e2       	ldi	r18, 0x2D	; 45
    92ea:	db 01       	movw	r26, r22
    92ec:	2c 93       	st	X, r18
    92ee:	df 01       	movw	r26, r30
    92f0:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    92f2:	ae 01       	movw	r20, r28
    92f4:	4a 1b       	sub	r20, r26
    92f6:	5b 0b       	sbc	r21, r27
    92f8:	44 5f       	subi	r20, 0xF4	; 244
    92fa:	5f 4f       	sbci	r21, 0xFF	; 255
    92fc:	fc 01       	movw	r30, r24
    92fe:	20 81       	ld	r18, Z
    9300:	31 81       	ldd	r19, Z+1	; 0x01
    9302:	f9 01       	movw	r30, r18
    9304:	22 81       	ldd	r18, Z+2	; 0x02
    9306:	33 81       	ldd	r19, Z+3	; 0x03
    9308:	bd 01       	movw	r22, r26
    930a:	f9 01       	movw	r30, r18
    930c:	09 95       	icall
}
    930e:	2b 96       	adiw	r28, 0x0b	; 11
    9310:	0f b6       	in	r0, 0x3f	; 63
    9312:	f8 94       	cli
    9314:	de bf       	out	0x3e, r29	; 62
    9316:	0f be       	out	0x3f, r0	; 63
    9318:	cd bf       	out	0x3d, r28	; 61
    931a:	df 91       	pop	r29
    931c:	cf 91       	pop	r28
    931e:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    9320:	fd 01       	movw	r30, r26
    9322:	aa cf       	rjmp	.-172    	; 0x9278 <Print::printNumberDec(unsigned long, unsigned char)+0x18>

00009324 <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    9324:	cf 93       	push	r28
    9326:	df 93       	push	r29
    9328:	1f 92       	push	r1
    932a:	cd b7       	in	r28, 0x3d	; 61
    932c:	de b7       	in	r29, 0x3e	; 62
    932e:	69 83       	std	Y+1, r22	; 0x01
    9330:	dc 01       	movw	r26, r24
    9332:	ed 91       	ld	r30, X+
    9334:	fc 91       	ld	r31, X
    9336:	02 80       	ldd	r0, Z+2	; 0x02
    9338:	f3 81       	ldd	r31, Z+3	; 0x03
    933a:	e0 2d       	mov	r30, r0
    933c:	41 e0       	ldi	r20, 0x01	; 1
    933e:	50 e0       	ldi	r21, 0x00	; 0
    9340:	be 01       	movw	r22, r28
    9342:	6f 5f       	subi	r22, 0xFF	; 255
    9344:	7f 4f       	sbci	r23, 0xFF	; 255
    9346:	09 95       	icall
    9348:	0f 90       	pop	r0
    934a:	df 91       	pop	r29
    934c:	cf 91       	pop	r28
    934e:	08 95       	ret

00009350 <usb_serial_class::available()>:
    9350:	fc 01       	movw	r30, r24
    9352:	8f b7       	in	r24, 0x3f	; 63
    9354:	f8 94       	cli
    9356:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <usb_configuration>
    935a:	91 11       	cpse	r25, r1
    935c:	0c c0       	rjmp	.+24     	; 0x9376 <usb_serial_class::available()+0x26>
    935e:	90 e0       	ldi	r25, 0x00	; 0
    9360:	8f bf       	out	0x3f, r24	; 63
    9362:	20 85       	ldd	r18, Z+8	; 0x08
    9364:	31 85       	ldd	r19, Z+9	; 0x09
    9366:	37 fd       	sbrc	r19, 7
    9368:	03 c0       	rjmp	.+6      	; 0x9370 <usb_serial_class::available()+0x20>
    936a:	9f 3f       	cpi	r25, 0xFF	; 255
    936c:	09 f0       	breq	.+2      	; 0x9370 <usb_serial_class::available()+0x20>
    936e:	9f 5f       	subi	r25, 0xFF	; 255
    9370:	89 2f       	mov	r24, r25
    9372:	90 e0       	ldi	r25, 0x00	; 0
    9374:	08 95       	ret
    9376:	93 e0       	ldi	r25, 0x03	; 3
    9378:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    937c:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9380:	91 11       	cpse	r25, r1
    9382:	ee cf       	rjmp	.-36     	; 0x9360 <usb_serial_class::available()+0x10>
    9384:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9388:	22 ff       	sbrs	r18, 2
    938a:	e9 cf       	rjmp	.-46     	; 0x935e <usb_serial_class::available()+0xe>
    938c:	25 fd       	sbrc	r18, 5
    938e:	e7 cf       	rjmp	.-50     	; 0x935e <usb_serial_class::available()+0xe>
    9390:	2b e6       	ldi	r18, 0x6B	; 107
    9392:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9396:	e4 cf       	rjmp	.-56     	; 0x9360 <usb_serial_class::available()+0x10>

00009398 <usb_serial_class::peek()>:
    9398:	cf 93       	push	r28
    939a:	df 93       	push	r29
    939c:	ec 01       	movw	r28, r24
    939e:	88 85       	ldd	r24, Y+8	; 0x08
    93a0:	99 85       	ldd	r25, Y+9	; 0x09
    93a2:	97 ff       	sbrs	r25, 7
    93a4:	09 c0       	rjmp	.+18     	; 0x93b8 <usb_serial_class::peek()+0x20>
    93a6:	e8 81       	ld	r30, Y
    93a8:	f9 81       	ldd	r31, Y+1	; 0x01
    93aa:	02 84       	ldd	r0, Z+10	; 0x0a
    93ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    93ae:	e0 2d       	mov	r30, r0
    93b0:	ce 01       	movw	r24, r28
    93b2:	09 95       	icall
    93b4:	99 87       	std	Y+9, r25	; 0x09
    93b6:	88 87       	std	Y+8, r24	; 0x08
    93b8:	88 85       	ldd	r24, Y+8	; 0x08
    93ba:	99 85       	ldd	r25, Y+9	; 0x09
    93bc:	df 91       	pop	r29
    93be:	cf 91       	pop	r28
    93c0:	08 95       	ret

000093c2 <usb_serial_class::read()>:
    93c2:	fc 01       	movw	r30, r24
    93c4:	20 85       	ldd	r18, Z+8	; 0x08
    93c6:	31 85       	ldd	r19, Z+9	; 0x09
    93c8:	37 fd       	sbrc	r19, 7
    93ca:	07 c0       	rjmp	.+14     	; 0x93da <usb_serial_class::read()+0x18>
    93cc:	4f ef       	ldi	r20, 0xFF	; 255
    93ce:	5f ef       	ldi	r21, 0xFF	; 255
    93d0:	51 87       	std	Z+9, r21	; 0x09
    93d2:	40 87       	std	Z+8, r20	; 0x08
    93d4:	c9 01       	movw	r24, r18
    93d6:	99 27       	eor	r25, r25
    93d8:	08 95       	ret
    93da:	9f b7       	in	r25, 0x3f	; 63
    93dc:	f8 94       	cli
    93de:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    93e2:	81 11       	cpse	r24, r1
    93e4:	04 c0       	rjmp	.+8      	; 0x93ee <usb_serial_class::read()+0x2c>
    93e6:	9f bf       	out	0x3f, r25	; 63
    93e8:	8f ef       	ldi	r24, 0xFF	; 255
    93ea:	9f ef       	ldi	r25, 0xFF	; 255
    93ec:	08 95       	ret
    93ee:	83 e0       	ldi	r24, 0x03	; 3
    93f0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    93f4:	2b e6       	ldi	r18, 0x6B	; 107
    93f6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    93fa:	85 fd       	sbrc	r24, 5
    93fc:	05 c0       	rjmp	.+10     	; 0x9408 <usb_serial_class::read()+0x46>
    93fe:	82 ff       	sbrs	r24, 2
    9400:	f2 cf       	rjmp	.-28     	; 0x93e6 <usb_serial_class::read()+0x24>
    9402:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9406:	f7 cf       	rjmp	.-18     	; 0x93f6 <usb_serial_class::read()+0x34>
    9408:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    940c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9410:	25 fd       	sbrc	r18, 5
    9412:	03 c0       	rjmp	.+6      	; 0x941a <usb_serial_class::read()+0x58>
    9414:	2b e6       	ldi	r18, 0x6B	; 107
    9416:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    941a:	9f bf       	out	0x3f, r25	; 63
    941c:	90 e0       	ldi	r25, 0x00	; 0
    941e:	08 95       	ret

00009420 <usb_serial_class::availableForWrite()>:
    9420:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    9424:	88 23       	and	r24, r24
    9426:	61 f0       	breq	.+24     	; 0x9440 <usb_serial_class::availableForWrite()+0x20>
    9428:	8f b7       	in	r24, 0x3f	; 63
    942a:	f8 94       	cli
    942c:	94 e0       	ldi	r25, 0x04	; 4
    942e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9432:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9436:	8f bf       	out	0x3f, r24	; 63
    9438:	80 e4       	ldi	r24, 0x40	; 64
    943a:	89 1b       	sub	r24, r25
    943c:	90 e0       	ldi	r25, 0x00	; 0
    943e:	08 95       	ret
    9440:	90 e0       	ldi	r25, 0x00	; 0
    9442:	80 e0       	ldi	r24, 0x00	; 0
    9444:	08 95       	ret

00009446 <usb_serial_class::write(unsigned char const*, unsigned int)>:
    9446:	bf 92       	push	r11
    9448:	cf 92       	push	r12
    944a:	df 92       	push	r13
    944c:	ef 92       	push	r14
    944e:	ff 92       	push	r15
    9450:	0f 93       	push	r16
    9452:	1f 93       	push	r17
    9454:	cf 93       	push	r28
    9456:	df 93       	push	r29
    9458:	7c 01       	movw	r14, r24
    945a:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    945e:	81 11       	cpse	r24, r1
    9460:	10 c0       	rjmp	.+32     	; 0x9482 <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    9462:	81 e0       	ldi	r24, 0x01	; 1
    9464:	f7 01       	movw	r30, r14
    9466:	82 83       	std	Z+2, r24	; 0x02
    9468:	10 e0       	ldi	r17, 0x00	; 0
    946a:	00 e0       	ldi	r16, 0x00	; 0
    946c:	c8 01       	movw	r24, r16
    946e:	df 91       	pop	r29
    9470:	cf 91       	pop	r28
    9472:	1f 91       	pop	r17
    9474:	0f 91       	pop	r16
    9476:	ff 90       	pop	r15
    9478:	ef 90       	pop	r14
    947a:	df 90       	pop	r13
    947c:	cf 90       	pop	r12
    947e:	bf 90       	pop	r11
    9480:	08 95       	ret
    9482:	2f b7       	in	r18, 0x3f	; 63
    9484:	f8 94       	cli
    9486:	84 e0       	ldi	r24, 0x04	; 4
    9488:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    948c:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <transmit_previous_timeout>
    9490:	88 23       	and	r24, r24
    9492:	41 f0       	breq	.+16     	; 0x94a4 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    9494:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9498:	85 fd       	sbrc	r24, 5
    949a:	02 c0       	rjmp	.+4      	; 0x94a0 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    949c:	2f bf       	out	0x3f, r18	; 63
    949e:	e1 cf       	rjmp	.-62     	; 0x9462 <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    94a0:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <transmit_previous_timeout>
    94a4:	10 e0       	ldi	r17, 0x00	; 0
    94a6:	00 e0       	ldi	r16, 0x00	; 0
    94a8:	84 e0       	ldi	r24, 0x04	; 4
    94aa:	d8 2e       	mov	r13, r24
    94ac:	90 e4       	ldi	r25, 0x40	; 64
    94ae:	c9 2e       	mov	r12, r25
    94b0:	a1 ef       	ldi	r26, 0xF1	; 241
    94b2:	b0 e0       	ldi	r27, 0x00	; 0
    94b4:	3a e3       	ldi	r19, 0x3A	; 58
    94b6:	b3 2e       	mov	r11, r19
    94b8:	33 e0       	ldi	r19, 0x03	; 3
    94ba:	41 15       	cp	r20, r1
    94bc:	51 05       	cpc	r21, r1
    94be:	09 f4       	brne	.+2      	; 0x94c2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    94c0:	c0 c0       	rjmp	.+384    	; 0x9642 <L548end+0x12>
    94c2:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    94c6:	81 5f       	subi	r24, 0xF1	; 241
    94c8:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    94cc:	95 fd       	sbrc	r25, 5
    94ce:	16 c0       	rjmp	.+44     	; 0x94fc <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    94d0:	2f bf       	out	0x3f, r18	; 63
    94d2:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    94d6:	89 13       	cpse	r24, r25
    94d8:	06 c0       	rjmp	.+12     	; 0x94e6 <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    94da:	81 e0       	ldi	r24, 0x01	; 1
    94dc:	80 93 e4 10 	sts	0x10E4, r24	; 0x8010e4 <transmit_previous_timeout>
    94e0:	f7 01       	movw	r30, r14
    94e2:	82 83       	std	Z+2, r24	; 0x02
    94e4:	c3 cf       	rjmp	.-122    	; 0x946c <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    94e6:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <usb_configuration>
    94ea:	91 11       	cpse	r25, r1
    94ec:	02 c0       	rjmp	.+4      	; 0x94f2 <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    94ee:	81 e0       	ldi	r24, 0x01	; 1
    94f0:	f7 cf       	rjmp	.-18     	; 0x94e0 <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    94f2:	2f b7       	in	r18, 0x3f	; 63
    94f4:	f8 94       	cli
    94f6:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    94fa:	e6 cf       	rjmp	.-52     	; 0x94c8 <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    94fc:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9500:	9c 2d       	mov	r25, r12
    9502:	98 1b       	sub	r25, r24
    9504:	94 17       	cp	r25, r20
    9506:	15 06       	cpc	r1, r21
    9508:	11 f0       	breq	.+4      	; 0x950e <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    950a:	08 f0       	brcs	.+2      	; 0x950e <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    950c:	94 2f       	mov	r25, r20
    950e:	e9 2f       	mov	r30, r25
    9510:	f0 e0       	ldi	r31, 0x00	; 0
    9512:	4e 1b       	sub	r20, r30
    9514:	5f 0b       	sbc	r21, r31
    9516:	0e 0f       	add	r16, r30
    9518:	1f 1f       	adc	r17, r31
    951a:	eb 01       	movw	r28, r22

0000951c <L548begin>:
    951c:	e0 e4       	ldi	r30, 0x40	; 64
    951e:	e9 1b       	sub	r30, r25
    9520:	e0 34       	cpi	r30, 0x40	; 64
    9522:	28 f4       	brcc	.+10     	; 0x952e <L548err>
    9524:	ee 0f       	add	r30, r30
    9526:	ff 27       	eor	r31, r31
    9528:	e8 56       	subi	r30, 0x68	; 104
    952a:	f5 4b       	sbci	r31, 0xB5	; 181
    952c:	09 94       	ijmp

0000952e <L548err>:
    952e:	80 c0       	rjmp	.+256    	; 0x9630 <L548end>

00009530 <L548table>:
    9530:	99 91       	ld	r25, Y+
    9532:	9c 93       	st	X, r25
    9534:	99 91       	ld	r25, Y+
    9536:	9c 93       	st	X, r25
    9538:	99 91       	ld	r25, Y+
    953a:	9c 93       	st	X, r25
    953c:	99 91       	ld	r25, Y+
    953e:	9c 93       	st	X, r25
    9540:	99 91       	ld	r25, Y+
    9542:	9c 93       	st	X, r25
    9544:	99 91       	ld	r25, Y+
    9546:	9c 93       	st	X, r25
    9548:	99 91       	ld	r25, Y+
    954a:	9c 93       	st	X, r25
    954c:	99 91       	ld	r25, Y+
    954e:	9c 93       	st	X, r25
    9550:	99 91       	ld	r25, Y+
    9552:	9c 93       	st	X, r25
    9554:	99 91       	ld	r25, Y+
    9556:	9c 93       	st	X, r25
    9558:	99 91       	ld	r25, Y+
    955a:	9c 93       	st	X, r25
    955c:	99 91       	ld	r25, Y+
    955e:	9c 93       	st	X, r25
    9560:	99 91       	ld	r25, Y+
    9562:	9c 93       	st	X, r25
    9564:	99 91       	ld	r25, Y+
    9566:	9c 93       	st	X, r25
    9568:	99 91       	ld	r25, Y+
    956a:	9c 93       	st	X, r25
    956c:	99 91       	ld	r25, Y+
    956e:	9c 93       	st	X, r25
    9570:	99 91       	ld	r25, Y+
    9572:	9c 93       	st	X, r25
    9574:	99 91       	ld	r25, Y+
    9576:	9c 93       	st	X, r25
    9578:	99 91       	ld	r25, Y+
    957a:	9c 93       	st	X, r25
    957c:	99 91       	ld	r25, Y+
    957e:	9c 93       	st	X, r25
    9580:	99 91       	ld	r25, Y+
    9582:	9c 93       	st	X, r25
    9584:	99 91       	ld	r25, Y+
    9586:	9c 93       	st	X, r25
    9588:	99 91       	ld	r25, Y+
    958a:	9c 93       	st	X, r25
    958c:	99 91       	ld	r25, Y+
    958e:	9c 93       	st	X, r25
    9590:	99 91       	ld	r25, Y+
    9592:	9c 93       	st	X, r25
    9594:	99 91       	ld	r25, Y+
    9596:	9c 93       	st	X, r25
    9598:	99 91       	ld	r25, Y+
    959a:	9c 93       	st	X, r25
    959c:	99 91       	ld	r25, Y+
    959e:	9c 93       	st	X, r25
    95a0:	99 91       	ld	r25, Y+
    95a2:	9c 93       	st	X, r25
    95a4:	99 91       	ld	r25, Y+
    95a6:	9c 93       	st	X, r25
    95a8:	99 91       	ld	r25, Y+
    95aa:	9c 93       	st	X, r25
    95ac:	99 91       	ld	r25, Y+
    95ae:	9c 93       	st	X, r25
    95b0:	99 91       	ld	r25, Y+
    95b2:	9c 93       	st	X, r25
    95b4:	99 91       	ld	r25, Y+
    95b6:	9c 93       	st	X, r25
    95b8:	99 91       	ld	r25, Y+
    95ba:	9c 93       	st	X, r25
    95bc:	99 91       	ld	r25, Y+
    95be:	9c 93       	st	X, r25
    95c0:	99 91       	ld	r25, Y+
    95c2:	9c 93       	st	X, r25
    95c4:	99 91       	ld	r25, Y+
    95c6:	9c 93       	st	X, r25
    95c8:	99 91       	ld	r25, Y+
    95ca:	9c 93       	st	X, r25
    95cc:	99 91       	ld	r25, Y+
    95ce:	9c 93       	st	X, r25
    95d0:	99 91       	ld	r25, Y+
    95d2:	9c 93       	st	X, r25
    95d4:	99 91       	ld	r25, Y+
    95d6:	9c 93       	st	X, r25
    95d8:	99 91       	ld	r25, Y+
    95da:	9c 93       	st	X, r25
    95dc:	99 91       	ld	r25, Y+
    95de:	9c 93       	st	X, r25
    95e0:	99 91       	ld	r25, Y+
    95e2:	9c 93       	st	X, r25
    95e4:	99 91       	ld	r25, Y+
    95e6:	9c 93       	st	X, r25
    95e8:	99 91       	ld	r25, Y+
    95ea:	9c 93       	st	X, r25
    95ec:	99 91       	ld	r25, Y+
    95ee:	9c 93       	st	X, r25
    95f0:	99 91       	ld	r25, Y+
    95f2:	9c 93       	st	X, r25
    95f4:	99 91       	ld	r25, Y+
    95f6:	9c 93       	st	X, r25
    95f8:	99 91       	ld	r25, Y+
    95fa:	9c 93       	st	X, r25
    95fc:	99 91       	ld	r25, Y+
    95fe:	9c 93       	st	X, r25
    9600:	99 91       	ld	r25, Y+
    9602:	9c 93       	st	X, r25
    9604:	99 91       	ld	r25, Y+
    9606:	9c 93       	st	X, r25
    9608:	99 91       	ld	r25, Y+
    960a:	9c 93       	st	X, r25
    960c:	99 91       	ld	r25, Y+
    960e:	9c 93       	st	X, r25
    9610:	99 91       	ld	r25, Y+
    9612:	9c 93       	st	X, r25
    9614:	99 91       	ld	r25, Y+
    9616:	9c 93       	st	X, r25
    9618:	99 91       	ld	r25, Y+
    961a:	9c 93       	st	X, r25
    961c:	99 91       	ld	r25, Y+
    961e:	9c 93       	st	X, r25
    9620:	99 91       	ld	r25, Y+
    9622:	9c 93       	st	X, r25
    9624:	99 91       	ld	r25, Y+
    9626:	9c 93       	st	X, r25
    9628:	99 91       	ld	r25, Y+
    962a:	9c 93       	st	X, r25
    962c:	99 91       	ld	r25, Y+
    962e:	9c 93       	st	X, r25

00009630 <L548end>:
    9630:	be 01       	movw	r22, r28
    9632:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9636:	85 ff       	sbrs	r24, 5
    9638:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    963c:	30 93 e6 10 	sts	0x10E6, r19	; 0x8010e6 <transmit_flush_timer>
    9640:	3c cf       	rjmp	.-392    	; 0x94ba <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    9642:	2f bf       	out	0x3f, r18	; 63
    9644:	13 cf       	rjmp	.-474    	; 0x946c <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00009646 <usb_serial_class::send_now()>:
    9646:	8f b7       	in	r24, 0x3f	; 63
    9648:	f8 94       	cli
    964a:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <usb_configuration>
    964e:	99 23       	and	r25, r25
    9650:	61 f0       	breq	.+24     	; 0x966a <usb_serial_class::send_now()+0x24>
    9652:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <transmit_flush_timer>
    9656:	99 23       	and	r25, r25
    9658:	41 f0       	breq	.+16     	; 0x966a <usb_serial_class::send_now()+0x24>
    965a:	94 e0       	ldi	r25, 0x04	; 4
    965c:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9660:	9a e3       	ldi	r25, 0x3A	; 58
    9662:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9666:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <transmit_flush_timer>
    966a:	8f bf       	out	0x3f, r24	; 63
    966c:	08 95       	ret

0000966e <usb_serial_class::flush()>:
    966e:	eb cf       	rjmp	.-42     	; 0x9646 <usb_serial_class::send_now()>

00009670 <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    9670:	ec e5       	ldi	r30, 0x5C	; 92
    9672:	f1 e1       	ldi	r31, 0x11	; 17
    9674:	11 86       	std	Z+9, r1	; 0x09
    9676:	10 86       	std	Z+8, r1	; 0x08
    9678:	12 82       	std	Z+2, r1	; 0x02
    967a:	88 ee       	ldi	r24, 0xE8	; 232
    967c:	93 e0       	ldi	r25, 0x03	; 3
    967e:	a0 e0       	ldi	r26, 0x00	; 0
    9680:	b0 e0       	ldi	r27, 0x00	; 0
    9682:	83 83       	std	Z+3, r24	; 0x03
    9684:	94 83       	std	Z+4, r25	; 0x04
    9686:	a5 83       	std	Z+5, r26	; 0x05
    9688:	b6 83       	std	Z+6, r27	; 0x06
    968a:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    968c:	84 ed       	ldi	r24, 0xD4	; 212
    968e:	99 e0       	ldi	r25, 0x09	; 9
    9690:	91 83       	std	Z+1, r25	; 0x01
    9692:	80 83       	st	Z, r24
    9694:	08 95       	ret

00009696 <random(long)>:
    srandom(seed);
  }
}

long random(long howbig)
{
    9696:	cf 92       	push	r12
    9698:	df 92       	push	r13
    969a:	ef 92       	push	r14
    969c:	ff 92       	push	r15
    969e:	6b 01       	movw	r12, r22
    96a0:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    96a2:	c1 14       	cp	r12, r1
    96a4:	d1 04       	cpc	r13, r1
    96a6:	e1 04       	cpc	r14, r1
    96a8:	f1 04       	cpc	r15, r1
    96aa:	31 f0       	breq	.+12     	; 0x96b8 <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    96ac:	7a d3       	rcall	.+1780   	; 0x9da2 <random>
    96ae:	a7 01       	movw	r20, r14
    96b0:	96 01       	movw	r18, r12
    96b2:	ea d2       	rcall	.+1492   	; 0x9c88 <__divmodsi4>
    96b4:	6b 01       	movw	r12, r22
    96b6:	7c 01       	movw	r14, r24
}
    96b8:	c7 01       	movw	r24, r14
    96ba:	b6 01       	movw	r22, r12
    96bc:	ff 90       	pop	r15
    96be:	ef 90       	pop	r14
    96c0:	df 90       	pop	r13
    96c2:	cf 90       	pop	r12
    96c4:	08 95       	ret

000096c6 <random(long, long)>:

long random(long howsmall, long howbig)
{
    96c6:	cf 92       	push	r12
    96c8:	df 92       	push	r13
    96ca:	ef 92       	push	r14
    96cc:	ff 92       	push	r15
    96ce:	6b 01       	movw	r12, r22
    96d0:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    96d2:	c2 16       	cp	r12, r18
    96d4:	d3 06       	cpc	r13, r19
    96d6:	e4 06       	cpc	r14, r20
    96d8:	f5 06       	cpc	r15, r21
    96da:	5c f4       	brge	.+22     	; 0x96f2 <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    96dc:	ca 01       	movw	r24, r20
    96de:	b9 01       	movw	r22, r18
    96e0:	6c 19       	sub	r22, r12
    96e2:	7d 09       	sbc	r23, r13
    96e4:	8e 09       	sbc	r24, r14
    96e6:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    96e8:	d6 df       	rcall	.-84     	; 0x9696 <random(long)>
    96ea:	c6 0e       	add	r12, r22
    96ec:	d7 1e       	adc	r13, r23
    96ee:	e8 1e       	adc	r14, r24
    96f0:	f9 1e       	adc	r15, r25
}
    96f2:	c7 01       	movw	r24, r14
    96f4:	b6 01       	movw	r22, r12
    96f6:	ff 90       	pop	r15
    96f8:	ef 90       	pop	r14
    96fa:	df 90       	pop	r13
    96fc:	cf 90       	pop	r12
    96fe:	08 95       	ret

00009700 <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    9700:	4f 92       	push	r4
    9702:	5f 92       	push	r5
    9704:	6f 92       	push	r6
    9706:	7f 92       	push	r7
    9708:	af 92       	push	r10
    970a:	bf 92       	push	r11
    970c:	cf 92       	push	r12
    970e:	df 92       	push	r13
    9710:	ef 92       	push	r14
    9712:	ff 92       	push	r15
    9714:	0f 93       	push	r16
    9716:	1f 93       	push	r17
    9718:	cf 93       	push	r28
    971a:	df 93       	push	r29
    971c:	cd b7       	in	r28, 0x3d	; 61
    971e:	de b7       	in	r29, 0x3e	; 62
    9720:	29 01       	movw	r4, r18
    9722:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    9724:	9b 01       	movw	r18, r22
    9726:	ac 01       	movw	r20, r24
    9728:	24 19       	sub	r18, r4
    972a:	35 09       	sbc	r19, r5
    972c:	46 09       	sbc	r20, r6
    972e:	57 09       	sbc	r21, r7
    9730:	89 89       	ldd	r24, Y+17	; 0x11
    9732:	9a 89       	ldd	r25, Y+18	; 0x12
    9734:	ab 89       	ldd	r26, Y+19	; 0x13
    9736:	bc 89       	ldd	r27, Y+20	; 0x14
    9738:	bc 01       	movw	r22, r24
    973a:	cd 01       	movw	r24, r26
    973c:	6a 19       	sub	r22, r10
    973e:	7b 09       	sbc	r23, r11
    9740:	8c 09       	sbc	r24, r12
    9742:	9d 09       	sbc	r25, r13
    9744:	49 d2       	rcall	.+1170   	; 0x9bd8 <__mulsi3>
    9746:	a8 01       	movw	r20, r16
    9748:	97 01       	movw	r18, r14
    974a:	24 19       	sub	r18, r4
    974c:	35 09       	sbc	r19, r5
    974e:	46 09       	sbc	r20, r6
    9750:	57 09       	sbc	r21, r7
    9752:	9a d2       	rcall	.+1332   	; 0x9c88 <__divmodsi4>
    9754:	ca 01       	movw	r24, r20
    9756:	b9 01       	movw	r22, r18
    9758:	6a 0d       	add	r22, r10
    975a:	7b 1d       	adc	r23, r11
    975c:	8c 1d       	adc	r24, r12
    975e:	9d 1d       	adc	r25, r13
}
    9760:	df 91       	pop	r29
    9762:	cf 91       	pop	r28
    9764:	1f 91       	pop	r17
    9766:	0f 91       	pop	r16
    9768:	ff 90       	pop	r15
    976a:	ef 90       	pop	r14
    976c:	df 90       	pop	r13
    976e:	cf 90       	pop	r12
    9770:	bf 90       	pop	r11
    9772:	af 90       	pop	r10
    9774:	7f 90       	pop	r7
    9776:	6f 90       	pop	r6
    9778:	5f 90       	pop	r5
    977a:	4f 90       	pop	r4
    977c:	08 95       	ret

0000977e <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    977e:	fc 01       	movw	r30, r24
    9780:	80 81       	ld	r24, Z
    9782:	91 81       	ldd	r25, Z+1	; 0x01
    9784:	0c 94 9e 41 	jmp	0x833c	; 0x833c <free>

00009788 <String::changeBuffer(unsigned int)>:
    9788:	0f 93       	push	r16
    978a:	1f 93       	push	r17
    978c:	cf 93       	push	r28
    978e:	df 93       	push	r29
    9790:	ec 01       	movw	r28, r24
    9792:	8b 01       	movw	r16, r22
    9794:	6f 5f       	subi	r22, 0xFF	; 255
    9796:	7f 4f       	sbci	r23, 0xFF	; 255
    9798:	88 81       	ld	r24, Y
    979a:	99 81       	ldd	r25, Y+1	; 0x01
    979c:	0e 94 27 42 	call	0x844e	; 0x844e <realloc>
    97a0:	00 97       	sbiw	r24, 0x00	; 0
    97a2:	51 f0       	breq	.+20     	; 0x97b8 <String::changeBuffer(unsigned int)+0x30>
    97a4:	99 83       	std	Y+1, r25	; 0x01
    97a6:	88 83       	st	Y, r24
    97a8:	1b 83       	std	Y+3, r17	; 0x03
    97aa:	0a 83       	std	Y+2, r16	; 0x02
    97ac:	81 e0       	ldi	r24, 0x01	; 1
    97ae:	df 91       	pop	r29
    97b0:	cf 91       	pop	r28
    97b2:	1f 91       	pop	r17
    97b4:	0f 91       	pop	r16
    97b6:	08 95       	ret
    97b8:	80 e0       	ldi	r24, 0x00	; 0
    97ba:	f9 cf       	rjmp	.-14     	; 0x97ae <String::changeBuffer(unsigned int)+0x26>

000097bc <String::reserve(unsigned int)>:
    97bc:	cf 93       	push	r28
    97be:	df 93       	push	r29
    97c0:	fc 01       	movw	r30, r24
    97c2:	22 81       	ldd	r18, Z+2	; 0x02
    97c4:	33 81       	ldd	r19, Z+3	; 0x03
    97c6:	26 17       	cp	r18, r22
    97c8:	37 07       	cpc	r19, r23
    97ca:	20 f0       	brcs	.+8      	; 0x97d4 <String::reserve(unsigned int)+0x18>
    97cc:	81 e0       	ldi	r24, 0x01	; 1
    97ce:	df 91       	pop	r29
    97d0:	cf 91       	pop	r28
    97d2:	08 95       	ret
    97d4:	ec 01       	movw	r28, r24
    97d6:	d8 df       	rcall	.-80     	; 0x9788 <String::changeBuffer(unsigned int)>
    97d8:	88 23       	and	r24, r24
    97da:	c9 f3       	breq	.-14     	; 0x97ce <String::reserve(unsigned int)+0x12>
    97dc:	8c 81       	ldd	r24, Y+4	; 0x04
    97de:	9d 81       	ldd	r25, Y+5	; 0x05
    97e0:	89 2b       	or	r24, r25
    97e2:	a1 f7       	brne	.-24     	; 0x97cc <String::reserve(unsigned int)+0x10>
    97e4:	e8 81       	ld	r30, Y
    97e6:	f9 81       	ldd	r31, Y+1	; 0x01
    97e8:	10 82       	st	Z, r1
    97ea:	f0 cf       	rjmp	.-32     	; 0x97cc <String::reserve(unsigned int)+0x10>

000097ec <String::copy(char const*, unsigned int)>:
    97ec:	ef 92       	push	r14
    97ee:	ff 92       	push	r15
    97f0:	0f 93       	push	r16
    97f2:	1f 93       	push	r17
    97f4:	cf 93       	push	r28
    97f6:	df 93       	push	r29
    97f8:	ec 01       	movw	r28, r24
    97fa:	7b 01       	movw	r14, r22
    97fc:	8a 01       	movw	r16, r20
    97fe:	41 15       	cp	r20, r1
    9800:	51 05       	cpc	r21, r1
    9802:	79 f4       	brne	.+30     	; 0x9822 <String::copy(char const*, unsigned int)+0x36>
    9804:	e8 81       	ld	r30, Y
    9806:	f9 81       	ldd	r31, Y+1	; 0x01
    9808:	30 97       	sbiw	r30, 0x00	; 0
    980a:	09 f0       	breq	.+2      	; 0x980e <String::copy(char const*, unsigned int)+0x22>
    980c:	10 82       	st	Z, r1
    980e:	1d 82       	std	Y+5, r1	; 0x05
    9810:	1c 82       	std	Y+4, r1	; 0x04
    9812:	ce 01       	movw	r24, r28
    9814:	df 91       	pop	r29
    9816:	cf 91       	pop	r28
    9818:	1f 91       	pop	r17
    981a:	0f 91       	pop	r16
    981c:	ff 90       	pop	r15
    981e:	ef 90       	pop	r14
    9820:	08 95       	ret
    9822:	ba 01       	movw	r22, r20
    9824:	cb df       	rcall	.-106    	; 0x97bc <String::reserve(unsigned int)>
    9826:	28 81       	ld	r18, Y
    9828:	39 81       	ldd	r19, Y+1	; 0x01
    982a:	81 11       	cpse	r24, r1
    982c:	0b c0       	rjmp	.+22     	; 0x9844 <String::copy(char const*, unsigned int)+0x58>
    982e:	21 15       	cp	r18, r1
    9830:	31 05       	cpc	r19, r1
    9832:	29 f0       	breq	.+10     	; 0x983e <String::copy(char const*, unsigned int)+0x52>
    9834:	c9 01       	movw	r24, r18
    9836:	0e 94 9e 41 	call	0x833c	; 0x833c <free>
    983a:	19 82       	std	Y+1, r1	; 0x01
    983c:	18 82       	st	Y, r1
    983e:	1b 82       	std	Y+3, r1	; 0x03
    9840:	1a 82       	std	Y+2, r1	; 0x02
    9842:	e5 cf       	rjmp	.-54     	; 0x980e <String::copy(char const*, unsigned int)+0x22>
    9844:	1d 83       	std	Y+5, r17	; 0x05
    9846:	0c 83       	std	Y+4, r16	; 0x04
    9848:	b7 01       	movw	r22, r14
    984a:	c9 01       	movw	r24, r18
    984c:	08 d3       	rcall	.+1552   	; 0x9e5e <strcpy>
    984e:	e1 cf       	rjmp	.-62     	; 0x9812 <String::copy(char const*, unsigned int)+0x26>

00009850 <String::String(char const*)>:
    9850:	fc 01       	movw	r30, r24
    9852:	11 82       	std	Z+1, r1	; 0x01
    9854:	10 82       	st	Z, r1
    9856:	13 82       	std	Z+3, r1	; 0x03
    9858:	12 82       	std	Z+2, r1	; 0x02
    985a:	15 82       	std	Z+5, r1	; 0x05
    985c:	14 82       	std	Z+4, r1	; 0x04
    985e:	16 82       	std	Z+6, r1	; 0x06
    9860:	61 15       	cp	r22, r1
    9862:	71 05       	cpc	r23, r1
    9864:	49 f0       	breq	.+18     	; 0x9878 <String::String(char const*)+0x28>
    9866:	fb 01       	movw	r30, r22
    9868:	01 90       	ld	r0, Z+
    986a:	00 20       	and	r0, r0
    986c:	e9 f7       	brne	.-6      	; 0x9868 <String::String(char const*)+0x18>
    986e:	31 97       	sbiw	r30, 0x01	; 1
    9870:	af 01       	movw	r20, r30
    9872:	46 1b       	sub	r20, r22
    9874:	57 0b       	sbc	r21, r23
    9876:	ba cf       	rjmp	.-140    	; 0x97ec <String::copy(char const*, unsigned int)>
    9878:	08 95       	ret

0000987a <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    987a:	0f 93       	push	r16
    987c:	1f 93       	push	r17
    987e:	cf 93       	push	r28
    9880:	df 93       	push	r29
	if (!bufsize || !buf) return;
    9882:	41 15       	cp	r20, r1
    9884:	51 05       	cpc	r21, r1
    9886:	59 f0       	breq	.+22     	; 0x989e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    9888:	61 15       	cp	r22, r1
    988a:	71 05       	cpc	r23, r1
    988c:	41 f0       	breq	.+16     	; 0x989e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    988e:	fc 01       	movw	r30, r24
    9890:	04 81       	ldd	r16, Z+4	; 0x04
    9892:	15 81       	ldd	r17, Z+5	; 0x05
    9894:	20 17       	cp	r18, r16
    9896:	31 07       	cpc	r19, r17
    9898:	38 f0       	brcs	.+14     	; 0x98a8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    989a:	fb 01       	movw	r30, r22
    989c:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    989e:	df 91       	pop	r29
    98a0:	cf 91       	pop	r28
    98a2:	1f 91       	pop	r17
    98a4:	0f 91       	pop	r16
    98a6:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    98a8:	41 50       	subi	r20, 0x01	; 1
    98aa:	51 09       	sbc	r21, r1
    98ac:	02 1b       	sub	r16, r18
    98ae:	13 0b       	sbc	r17, r19
    98b0:	40 17       	cp	r20, r16
    98b2:	51 07       	cpc	r21, r17
    98b4:	08 f4       	brcc	.+2      	; 0x98b8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    98b6:	8a 01       	movw	r16, r20
    98b8:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    98ba:	fc 01       	movw	r30, r24
    98bc:	60 81       	ld	r22, Z
    98be:	71 81       	ldd	r23, Z+1	; 0x01
    98c0:	62 0f       	add	r22, r18
    98c2:	73 1f       	adc	r23, r19
    98c4:	a8 01       	movw	r20, r16
    98c6:	ce 01       	movw	r24, r28
    98c8:	d1 d2       	rcall	.+1442   	; 0x9e6c <strncpy>
	buf[n] = 0;
    98ca:	c0 0f       	add	r28, r16
    98cc:	d1 1f       	adc	r29, r17
    98ce:	18 82       	st	Y, r1
    98d0:	e6 cf       	rjmp	.-52     	; 0x989e <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

000098d2 <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    98d2:	08 95       	ret

000098d4 <__subsf3>:
    98d4:	50 58       	subi	r21, 0x80	; 128

000098d6 <__addsf3>:
    98d6:	bb 27       	eor	r27, r27
    98d8:	aa 27       	eor	r26, r26
    98da:	0e d0       	rcall	.+28     	; 0x98f8 <__addsf3x>
    98dc:	e0 c0       	rjmp	.+448    	; 0x9a9e <__fp_round>
    98de:	d1 d0       	rcall	.+418    	; 0x9a82 <__fp_pscA>
    98e0:	30 f0       	brcs	.+12     	; 0x98ee <__addsf3+0x18>
    98e2:	d6 d0       	rcall	.+428    	; 0x9a90 <__fp_pscB>
    98e4:	20 f0       	brcs	.+8      	; 0x98ee <__addsf3+0x18>
    98e6:	31 f4       	brne	.+12     	; 0x98f4 <__addsf3+0x1e>
    98e8:	9f 3f       	cpi	r25, 0xFF	; 255
    98ea:	11 f4       	brne	.+4      	; 0x98f0 <__addsf3+0x1a>
    98ec:	1e f4       	brtc	.+6      	; 0x98f4 <__addsf3+0x1e>
    98ee:	c6 c0       	rjmp	.+396    	; 0x9a7c <__fp_nan>
    98f0:	0e f4       	brtc	.+2      	; 0x98f4 <__addsf3+0x1e>
    98f2:	e0 95       	com	r30
    98f4:	e7 fb       	bst	r30, 7
    98f6:	bc c0       	rjmp	.+376    	; 0x9a70 <__fp_inf>

000098f8 <__addsf3x>:
    98f8:	e9 2f       	mov	r30, r25
    98fa:	e2 d0       	rcall	.+452    	; 0x9ac0 <__fp_split3>
    98fc:	80 f3       	brcs	.-32     	; 0x98de <__addsf3+0x8>
    98fe:	ba 17       	cp	r27, r26
    9900:	62 07       	cpc	r22, r18
    9902:	73 07       	cpc	r23, r19
    9904:	84 07       	cpc	r24, r20
    9906:	95 07       	cpc	r25, r21
    9908:	18 f0       	brcs	.+6      	; 0x9910 <__addsf3x+0x18>
    990a:	71 f4       	brne	.+28     	; 0x9928 <__addsf3x+0x30>
    990c:	9e f5       	brtc	.+102    	; 0x9974 <__addsf3x+0x7c>
    990e:	fa c0       	rjmp	.+500    	; 0x9b04 <__fp_zero>
    9910:	0e f4       	brtc	.+2      	; 0x9914 <__addsf3x+0x1c>
    9912:	e0 95       	com	r30
    9914:	0b 2e       	mov	r0, r27
    9916:	ba 2f       	mov	r27, r26
    9918:	a0 2d       	mov	r26, r0
    991a:	0b 01       	movw	r0, r22
    991c:	b9 01       	movw	r22, r18
    991e:	90 01       	movw	r18, r0
    9920:	0c 01       	movw	r0, r24
    9922:	ca 01       	movw	r24, r20
    9924:	a0 01       	movw	r20, r0
    9926:	11 24       	eor	r1, r1
    9928:	ff 27       	eor	r31, r31
    992a:	59 1b       	sub	r21, r25
    992c:	99 f0       	breq	.+38     	; 0x9954 <__addsf3x+0x5c>
    992e:	59 3f       	cpi	r21, 0xF9	; 249
    9930:	50 f4       	brcc	.+20     	; 0x9946 <__addsf3x+0x4e>
    9932:	50 3e       	cpi	r21, 0xE0	; 224
    9934:	68 f1       	brcs	.+90     	; 0x9990 <__addsf3x+0x98>
    9936:	1a 16       	cp	r1, r26
    9938:	f0 40       	sbci	r31, 0x00	; 0
    993a:	a2 2f       	mov	r26, r18
    993c:	23 2f       	mov	r18, r19
    993e:	34 2f       	mov	r19, r20
    9940:	44 27       	eor	r20, r20
    9942:	58 5f       	subi	r21, 0xF8	; 248
    9944:	f3 cf       	rjmp	.-26     	; 0x992c <__addsf3x+0x34>
    9946:	46 95       	lsr	r20
    9948:	37 95       	ror	r19
    994a:	27 95       	ror	r18
    994c:	a7 95       	ror	r26
    994e:	f0 40       	sbci	r31, 0x00	; 0
    9950:	53 95       	inc	r21
    9952:	c9 f7       	brne	.-14     	; 0x9946 <__addsf3x+0x4e>
    9954:	7e f4       	brtc	.+30     	; 0x9974 <__addsf3x+0x7c>
    9956:	1f 16       	cp	r1, r31
    9958:	ba 0b       	sbc	r27, r26
    995a:	62 0b       	sbc	r22, r18
    995c:	73 0b       	sbc	r23, r19
    995e:	84 0b       	sbc	r24, r20
    9960:	ba f0       	brmi	.+46     	; 0x9990 <__addsf3x+0x98>
    9962:	91 50       	subi	r25, 0x01	; 1
    9964:	a1 f0       	breq	.+40     	; 0x998e <__addsf3x+0x96>
    9966:	ff 0f       	add	r31, r31
    9968:	bb 1f       	adc	r27, r27
    996a:	66 1f       	adc	r22, r22
    996c:	77 1f       	adc	r23, r23
    996e:	88 1f       	adc	r24, r24
    9970:	c2 f7       	brpl	.-16     	; 0x9962 <__addsf3x+0x6a>
    9972:	0e c0       	rjmp	.+28     	; 0x9990 <__addsf3x+0x98>
    9974:	ba 0f       	add	r27, r26
    9976:	62 1f       	adc	r22, r18
    9978:	73 1f       	adc	r23, r19
    997a:	84 1f       	adc	r24, r20
    997c:	48 f4       	brcc	.+18     	; 0x9990 <__addsf3x+0x98>
    997e:	87 95       	ror	r24
    9980:	77 95       	ror	r23
    9982:	67 95       	ror	r22
    9984:	b7 95       	ror	r27
    9986:	f7 95       	ror	r31
    9988:	9e 3f       	cpi	r25, 0xFE	; 254
    998a:	08 f0       	brcs	.+2      	; 0x998e <__addsf3x+0x96>
    998c:	b3 cf       	rjmp	.-154    	; 0x98f4 <__addsf3+0x1e>
    998e:	93 95       	inc	r25
    9990:	88 0f       	add	r24, r24
    9992:	08 f0       	brcs	.+2      	; 0x9996 <__addsf3x+0x9e>
    9994:	99 27       	eor	r25, r25
    9996:	ee 0f       	add	r30, r30
    9998:	97 95       	ror	r25
    999a:	87 95       	ror	r24
    999c:	08 95       	ret

0000999e <__fixunssfsi>:
    999e:	98 d0       	rcall	.+304    	; 0x9ad0 <__fp_splitA>
    99a0:	88 f0       	brcs	.+34     	; 0x99c4 <__fixunssfsi+0x26>
    99a2:	9f 57       	subi	r25, 0x7F	; 127
    99a4:	90 f0       	brcs	.+36     	; 0x99ca <__fixunssfsi+0x2c>
    99a6:	b9 2f       	mov	r27, r25
    99a8:	99 27       	eor	r25, r25
    99aa:	b7 51       	subi	r27, 0x17	; 23
    99ac:	a0 f0       	brcs	.+40     	; 0x99d6 <__fixunssfsi+0x38>
    99ae:	d1 f0       	breq	.+52     	; 0x99e4 <__fixunssfsi+0x46>
    99b0:	66 0f       	add	r22, r22
    99b2:	77 1f       	adc	r23, r23
    99b4:	88 1f       	adc	r24, r24
    99b6:	99 1f       	adc	r25, r25
    99b8:	1a f0       	brmi	.+6      	; 0x99c0 <__fixunssfsi+0x22>
    99ba:	ba 95       	dec	r27
    99bc:	c9 f7       	brne	.-14     	; 0x99b0 <__fixunssfsi+0x12>
    99be:	12 c0       	rjmp	.+36     	; 0x99e4 <__fixunssfsi+0x46>
    99c0:	b1 30       	cpi	r27, 0x01	; 1
    99c2:	81 f0       	breq	.+32     	; 0x99e4 <__fixunssfsi+0x46>
    99c4:	9f d0       	rcall	.+318    	; 0x9b04 <__fp_zero>
    99c6:	b1 e0       	ldi	r27, 0x01	; 1
    99c8:	08 95       	ret
    99ca:	9c c0       	rjmp	.+312    	; 0x9b04 <__fp_zero>
    99cc:	67 2f       	mov	r22, r23
    99ce:	78 2f       	mov	r23, r24
    99d0:	88 27       	eor	r24, r24
    99d2:	b8 5f       	subi	r27, 0xF8	; 248
    99d4:	39 f0       	breq	.+14     	; 0x99e4 <__fixunssfsi+0x46>
    99d6:	b9 3f       	cpi	r27, 0xF9	; 249
    99d8:	cc f3       	brlt	.-14     	; 0x99cc <__fixunssfsi+0x2e>
    99da:	86 95       	lsr	r24
    99dc:	77 95       	ror	r23
    99de:	67 95       	ror	r22
    99e0:	b3 95       	inc	r27
    99e2:	d9 f7       	brne	.-10     	; 0x99da <__fixunssfsi+0x3c>
    99e4:	3e f4       	brtc	.+14     	; 0x99f4 <__fixunssfsi+0x56>
    99e6:	90 95       	com	r25
    99e8:	80 95       	com	r24
    99ea:	70 95       	com	r23
    99ec:	61 95       	neg	r22
    99ee:	7f 4f       	sbci	r23, 0xFF	; 255
    99f0:	8f 4f       	sbci	r24, 0xFF	; 255
    99f2:	9f 4f       	sbci	r25, 0xFF	; 255
    99f4:	08 95       	ret

000099f6 <__floatunsisf>:
    99f6:	e8 94       	clt
    99f8:	09 c0       	rjmp	.+18     	; 0x9a0c <__floatsisf+0x12>

000099fa <__floatsisf>:
    99fa:	97 fb       	bst	r25, 7
    99fc:	3e f4       	brtc	.+14     	; 0x9a0c <__floatsisf+0x12>
    99fe:	90 95       	com	r25
    9a00:	80 95       	com	r24
    9a02:	70 95       	com	r23
    9a04:	61 95       	neg	r22
    9a06:	7f 4f       	sbci	r23, 0xFF	; 255
    9a08:	8f 4f       	sbci	r24, 0xFF	; 255
    9a0a:	9f 4f       	sbci	r25, 0xFF	; 255
    9a0c:	99 23       	and	r25, r25
    9a0e:	a9 f0       	breq	.+42     	; 0x9a3a <__floatsisf+0x40>
    9a10:	f9 2f       	mov	r31, r25
    9a12:	96 e9       	ldi	r25, 0x96	; 150
    9a14:	bb 27       	eor	r27, r27
    9a16:	93 95       	inc	r25
    9a18:	f6 95       	lsr	r31
    9a1a:	87 95       	ror	r24
    9a1c:	77 95       	ror	r23
    9a1e:	67 95       	ror	r22
    9a20:	b7 95       	ror	r27
    9a22:	f1 11       	cpse	r31, r1
    9a24:	f8 cf       	rjmp	.-16     	; 0x9a16 <__floatsisf+0x1c>
    9a26:	fa f4       	brpl	.+62     	; 0x9a66 <__floatsisf+0x6c>
    9a28:	bb 0f       	add	r27, r27
    9a2a:	11 f4       	brne	.+4      	; 0x9a30 <__floatsisf+0x36>
    9a2c:	60 ff       	sbrs	r22, 0
    9a2e:	1b c0       	rjmp	.+54     	; 0x9a66 <__floatsisf+0x6c>
    9a30:	6f 5f       	subi	r22, 0xFF	; 255
    9a32:	7f 4f       	sbci	r23, 0xFF	; 255
    9a34:	8f 4f       	sbci	r24, 0xFF	; 255
    9a36:	9f 4f       	sbci	r25, 0xFF	; 255
    9a38:	16 c0       	rjmp	.+44     	; 0x9a66 <__floatsisf+0x6c>
    9a3a:	88 23       	and	r24, r24
    9a3c:	11 f0       	breq	.+4      	; 0x9a42 <__floatsisf+0x48>
    9a3e:	96 e9       	ldi	r25, 0x96	; 150
    9a40:	11 c0       	rjmp	.+34     	; 0x9a64 <__floatsisf+0x6a>
    9a42:	77 23       	and	r23, r23
    9a44:	21 f0       	breq	.+8      	; 0x9a4e <__floatsisf+0x54>
    9a46:	9e e8       	ldi	r25, 0x8E	; 142
    9a48:	87 2f       	mov	r24, r23
    9a4a:	76 2f       	mov	r23, r22
    9a4c:	05 c0       	rjmp	.+10     	; 0x9a58 <__floatsisf+0x5e>
    9a4e:	66 23       	and	r22, r22
    9a50:	71 f0       	breq	.+28     	; 0x9a6e <__floatsisf+0x74>
    9a52:	96 e8       	ldi	r25, 0x86	; 134
    9a54:	86 2f       	mov	r24, r22
    9a56:	70 e0       	ldi	r23, 0x00	; 0
    9a58:	60 e0       	ldi	r22, 0x00	; 0
    9a5a:	2a f0       	brmi	.+10     	; 0x9a66 <__floatsisf+0x6c>
    9a5c:	9a 95       	dec	r25
    9a5e:	66 0f       	add	r22, r22
    9a60:	77 1f       	adc	r23, r23
    9a62:	88 1f       	adc	r24, r24
    9a64:	da f7       	brpl	.-10     	; 0x9a5c <__floatsisf+0x62>
    9a66:	88 0f       	add	r24, r24
    9a68:	96 95       	lsr	r25
    9a6a:	87 95       	ror	r24
    9a6c:	97 f9       	bld	r25, 7
    9a6e:	08 95       	ret

00009a70 <__fp_inf>:
    9a70:	97 f9       	bld	r25, 7
    9a72:	9f 67       	ori	r25, 0x7F	; 127
    9a74:	80 e8       	ldi	r24, 0x80	; 128
    9a76:	70 e0       	ldi	r23, 0x00	; 0
    9a78:	60 e0       	ldi	r22, 0x00	; 0
    9a7a:	08 95       	ret

00009a7c <__fp_nan>:
    9a7c:	9f ef       	ldi	r25, 0xFF	; 255
    9a7e:	80 ec       	ldi	r24, 0xC0	; 192
    9a80:	08 95       	ret

00009a82 <__fp_pscA>:
    9a82:	00 24       	eor	r0, r0
    9a84:	0a 94       	dec	r0
    9a86:	16 16       	cp	r1, r22
    9a88:	17 06       	cpc	r1, r23
    9a8a:	18 06       	cpc	r1, r24
    9a8c:	09 06       	cpc	r0, r25
    9a8e:	08 95       	ret

00009a90 <__fp_pscB>:
    9a90:	00 24       	eor	r0, r0
    9a92:	0a 94       	dec	r0
    9a94:	12 16       	cp	r1, r18
    9a96:	13 06       	cpc	r1, r19
    9a98:	14 06       	cpc	r1, r20
    9a9a:	05 06       	cpc	r0, r21
    9a9c:	08 95       	ret

00009a9e <__fp_round>:
    9a9e:	09 2e       	mov	r0, r25
    9aa0:	03 94       	inc	r0
    9aa2:	00 0c       	add	r0, r0
    9aa4:	11 f4       	brne	.+4      	; 0x9aaa <__fp_round+0xc>
    9aa6:	88 23       	and	r24, r24
    9aa8:	52 f0       	brmi	.+20     	; 0x9abe <__fp_round+0x20>
    9aaa:	bb 0f       	add	r27, r27
    9aac:	40 f4       	brcc	.+16     	; 0x9abe <__fp_round+0x20>
    9aae:	bf 2b       	or	r27, r31
    9ab0:	11 f4       	brne	.+4      	; 0x9ab6 <__fp_round+0x18>
    9ab2:	60 ff       	sbrs	r22, 0
    9ab4:	04 c0       	rjmp	.+8      	; 0x9abe <__fp_round+0x20>
    9ab6:	6f 5f       	subi	r22, 0xFF	; 255
    9ab8:	7f 4f       	sbci	r23, 0xFF	; 255
    9aba:	8f 4f       	sbci	r24, 0xFF	; 255
    9abc:	9f 4f       	sbci	r25, 0xFF	; 255
    9abe:	08 95       	ret

00009ac0 <__fp_split3>:
    9ac0:	57 fd       	sbrc	r21, 7
    9ac2:	90 58       	subi	r25, 0x80	; 128
    9ac4:	44 0f       	add	r20, r20
    9ac6:	55 1f       	adc	r21, r21
    9ac8:	59 f0       	breq	.+22     	; 0x9ae0 <__fp_splitA+0x10>
    9aca:	5f 3f       	cpi	r21, 0xFF	; 255
    9acc:	71 f0       	breq	.+28     	; 0x9aea <__fp_splitA+0x1a>
    9ace:	47 95       	ror	r20

00009ad0 <__fp_splitA>:
    9ad0:	88 0f       	add	r24, r24
    9ad2:	97 fb       	bst	r25, 7
    9ad4:	99 1f       	adc	r25, r25
    9ad6:	61 f0       	breq	.+24     	; 0x9af0 <__fp_splitA+0x20>
    9ad8:	9f 3f       	cpi	r25, 0xFF	; 255
    9ada:	79 f0       	breq	.+30     	; 0x9afa <__fp_splitA+0x2a>
    9adc:	87 95       	ror	r24
    9ade:	08 95       	ret
    9ae0:	12 16       	cp	r1, r18
    9ae2:	13 06       	cpc	r1, r19
    9ae4:	14 06       	cpc	r1, r20
    9ae6:	55 1f       	adc	r21, r21
    9ae8:	f2 cf       	rjmp	.-28     	; 0x9ace <__fp_split3+0xe>
    9aea:	46 95       	lsr	r20
    9aec:	f1 df       	rcall	.-30     	; 0x9ad0 <__fp_splitA>
    9aee:	08 c0       	rjmp	.+16     	; 0x9b00 <__fp_splitA+0x30>
    9af0:	16 16       	cp	r1, r22
    9af2:	17 06       	cpc	r1, r23
    9af4:	18 06       	cpc	r1, r24
    9af6:	99 1f       	adc	r25, r25
    9af8:	f1 cf       	rjmp	.-30     	; 0x9adc <__fp_splitA+0xc>
    9afa:	86 95       	lsr	r24
    9afc:	71 05       	cpc	r23, r1
    9afe:	61 05       	cpc	r22, r1
    9b00:	08 94       	sec
    9b02:	08 95       	ret

00009b04 <__fp_zero>:
    9b04:	e8 94       	clt

00009b06 <__fp_szero>:
    9b06:	bb 27       	eor	r27, r27
    9b08:	66 27       	eor	r22, r22
    9b0a:	77 27       	eor	r23, r23
    9b0c:	cb 01       	movw	r24, r22
    9b0e:	97 f9       	bld	r25, 7
    9b10:	08 95       	ret

00009b12 <__mulsf3>:
    9b12:	0b d0       	rcall	.+22     	; 0x9b2a <__mulsf3x>
    9b14:	c4 cf       	rjmp	.-120    	; 0x9a9e <__fp_round>
    9b16:	b5 df       	rcall	.-150    	; 0x9a82 <__fp_pscA>
    9b18:	28 f0       	brcs	.+10     	; 0x9b24 <__mulsf3+0x12>
    9b1a:	ba df       	rcall	.-140    	; 0x9a90 <__fp_pscB>
    9b1c:	18 f0       	brcs	.+6      	; 0x9b24 <__mulsf3+0x12>
    9b1e:	95 23       	and	r25, r21
    9b20:	09 f0       	breq	.+2      	; 0x9b24 <__mulsf3+0x12>
    9b22:	a6 cf       	rjmp	.-180    	; 0x9a70 <__fp_inf>
    9b24:	ab cf       	rjmp	.-170    	; 0x9a7c <__fp_nan>
    9b26:	11 24       	eor	r1, r1
    9b28:	ee cf       	rjmp	.-36     	; 0x9b06 <__fp_szero>

00009b2a <__mulsf3x>:
    9b2a:	ca df       	rcall	.-108    	; 0x9ac0 <__fp_split3>
    9b2c:	a0 f3       	brcs	.-24     	; 0x9b16 <__mulsf3+0x4>

00009b2e <__mulsf3_pse>:
    9b2e:	95 9f       	mul	r25, r21
    9b30:	d1 f3       	breq	.-12     	; 0x9b26 <__mulsf3+0x14>
    9b32:	95 0f       	add	r25, r21
    9b34:	50 e0       	ldi	r21, 0x00	; 0
    9b36:	55 1f       	adc	r21, r21
    9b38:	62 9f       	mul	r22, r18
    9b3a:	f0 01       	movw	r30, r0
    9b3c:	72 9f       	mul	r23, r18
    9b3e:	bb 27       	eor	r27, r27
    9b40:	f0 0d       	add	r31, r0
    9b42:	b1 1d       	adc	r27, r1
    9b44:	63 9f       	mul	r22, r19
    9b46:	aa 27       	eor	r26, r26
    9b48:	f0 0d       	add	r31, r0
    9b4a:	b1 1d       	adc	r27, r1
    9b4c:	aa 1f       	adc	r26, r26
    9b4e:	64 9f       	mul	r22, r20
    9b50:	66 27       	eor	r22, r22
    9b52:	b0 0d       	add	r27, r0
    9b54:	a1 1d       	adc	r26, r1
    9b56:	66 1f       	adc	r22, r22
    9b58:	82 9f       	mul	r24, r18
    9b5a:	22 27       	eor	r18, r18
    9b5c:	b0 0d       	add	r27, r0
    9b5e:	a1 1d       	adc	r26, r1
    9b60:	62 1f       	adc	r22, r18
    9b62:	73 9f       	mul	r23, r19
    9b64:	b0 0d       	add	r27, r0
    9b66:	a1 1d       	adc	r26, r1
    9b68:	62 1f       	adc	r22, r18
    9b6a:	83 9f       	mul	r24, r19
    9b6c:	a0 0d       	add	r26, r0
    9b6e:	61 1d       	adc	r22, r1
    9b70:	22 1f       	adc	r18, r18
    9b72:	74 9f       	mul	r23, r20
    9b74:	33 27       	eor	r19, r19
    9b76:	a0 0d       	add	r26, r0
    9b78:	61 1d       	adc	r22, r1
    9b7a:	23 1f       	adc	r18, r19
    9b7c:	84 9f       	mul	r24, r20
    9b7e:	60 0d       	add	r22, r0
    9b80:	21 1d       	adc	r18, r1
    9b82:	82 2f       	mov	r24, r18
    9b84:	76 2f       	mov	r23, r22
    9b86:	6a 2f       	mov	r22, r26
    9b88:	11 24       	eor	r1, r1
    9b8a:	9f 57       	subi	r25, 0x7F	; 127
    9b8c:	50 40       	sbci	r21, 0x00	; 0
    9b8e:	8a f0       	brmi	.+34     	; 0x9bb2 <__mulsf3_pse+0x84>
    9b90:	e1 f0       	breq	.+56     	; 0x9bca <__mulsf3_pse+0x9c>
    9b92:	88 23       	and	r24, r24
    9b94:	4a f0       	brmi	.+18     	; 0x9ba8 <__mulsf3_pse+0x7a>
    9b96:	ee 0f       	add	r30, r30
    9b98:	ff 1f       	adc	r31, r31
    9b9a:	bb 1f       	adc	r27, r27
    9b9c:	66 1f       	adc	r22, r22
    9b9e:	77 1f       	adc	r23, r23
    9ba0:	88 1f       	adc	r24, r24
    9ba2:	91 50       	subi	r25, 0x01	; 1
    9ba4:	50 40       	sbci	r21, 0x00	; 0
    9ba6:	a9 f7       	brne	.-22     	; 0x9b92 <__mulsf3_pse+0x64>
    9ba8:	9e 3f       	cpi	r25, 0xFE	; 254
    9baa:	51 05       	cpc	r21, r1
    9bac:	70 f0       	brcs	.+28     	; 0x9bca <__mulsf3_pse+0x9c>
    9bae:	60 cf       	rjmp	.-320    	; 0x9a70 <__fp_inf>
    9bb0:	aa cf       	rjmp	.-172    	; 0x9b06 <__fp_szero>
    9bb2:	5f 3f       	cpi	r21, 0xFF	; 255
    9bb4:	ec f3       	brlt	.-6      	; 0x9bb0 <__mulsf3_pse+0x82>
    9bb6:	98 3e       	cpi	r25, 0xE8	; 232
    9bb8:	dc f3       	brlt	.-10     	; 0x9bb0 <__mulsf3_pse+0x82>
    9bba:	86 95       	lsr	r24
    9bbc:	77 95       	ror	r23
    9bbe:	67 95       	ror	r22
    9bc0:	b7 95       	ror	r27
    9bc2:	f7 95       	ror	r31
    9bc4:	e7 95       	ror	r30
    9bc6:	9f 5f       	subi	r25, 0xFF	; 255
    9bc8:	c1 f7       	brne	.-16     	; 0x9bba <__mulsf3_pse+0x8c>
    9bca:	fe 2b       	or	r31, r30
    9bcc:	88 0f       	add	r24, r24
    9bce:	91 1d       	adc	r25, r1
    9bd0:	96 95       	lsr	r25
    9bd2:	87 95       	ror	r24
    9bd4:	97 f9       	bld	r25, 7
    9bd6:	08 95       	ret

00009bd8 <__mulsi3>:
    9bd8:	db 01       	movw	r26, r22
    9bda:	8f 93       	push	r24
    9bdc:	9f 93       	push	r25
    9bde:	8e d0       	rcall	.+284    	; 0x9cfc <__muluhisi3>
    9be0:	bf 91       	pop	r27
    9be2:	af 91       	pop	r26
    9be4:	a2 9f       	mul	r26, r18
    9be6:	80 0d       	add	r24, r0
    9be8:	91 1d       	adc	r25, r1
    9bea:	a3 9f       	mul	r26, r19
    9bec:	90 0d       	add	r25, r0
    9bee:	b2 9f       	mul	r27, r18
    9bf0:	90 0d       	add	r25, r0
    9bf2:	11 24       	eor	r1, r1
    9bf4:	08 95       	ret

00009bf6 <__udivmodhi4>:
    9bf6:	aa 1b       	sub	r26, r26
    9bf8:	bb 1b       	sub	r27, r27
    9bfa:	51 e1       	ldi	r21, 0x11	; 17
    9bfc:	07 c0       	rjmp	.+14     	; 0x9c0c <__udivmodhi4_ep>

00009bfe <__udivmodhi4_loop>:
    9bfe:	aa 1f       	adc	r26, r26
    9c00:	bb 1f       	adc	r27, r27
    9c02:	a6 17       	cp	r26, r22
    9c04:	b7 07       	cpc	r27, r23
    9c06:	10 f0       	brcs	.+4      	; 0x9c0c <__udivmodhi4_ep>
    9c08:	a6 1b       	sub	r26, r22
    9c0a:	b7 0b       	sbc	r27, r23

00009c0c <__udivmodhi4_ep>:
    9c0c:	88 1f       	adc	r24, r24
    9c0e:	99 1f       	adc	r25, r25
    9c10:	5a 95       	dec	r21
    9c12:	a9 f7       	brne	.-22     	; 0x9bfe <__udivmodhi4_loop>
    9c14:	80 95       	com	r24
    9c16:	90 95       	com	r25
    9c18:	bc 01       	movw	r22, r24
    9c1a:	cd 01       	movw	r24, r26
    9c1c:	08 95       	ret

00009c1e <__divmodhi4>:
    9c1e:	97 fb       	bst	r25, 7
    9c20:	07 2e       	mov	r0, r23
    9c22:	16 f4       	brtc	.+4      	; 0x9c28 <__divmodhi4+0xa>
    9c24:	00 94       	com	r0
    9c26:	06 d0       	rcall	.+12     	; 0x9c34 <__divmodhi4_neg1>
    9c28:	77 fd       	sbrc	r23, 7
    9c2a:	08 d0       	rcall	.+16     	; 0x9c3c <__divmodhi4_neg2>
    9c2c:	e4 df       	rcall	.-56     	; 0x9bf6 <__udivmodhi4>
    9c2e:	07 fc       	sbrc	r0, 7
    9c30:	05 d0       	rcall	.+10     	; 0x9c3c <__divmodhi4_neg2>
    9c32:	3e f4       	brtc	.+14     	; 0x9c42 <__divmodhi4_exit>

00009c34 <__divmodhi4_neg1>:
    9c34:	90 95       	com	r25
    9c36:	81 95       	neg	r24
    9c38:	9f 4f       	sbci	r25, 0xFF	; 255
    9c3a:	08 95       	ret

00009c3c <__divmodhi4_neg2>:
    9c3c:	70 95       	com	r23
    9c3e:	61 95       	neg	r22
    9c40:	7f 4f       	sbci	r23, 0xFF	; 255

00009c42 <__divmodhi4_exit>:
    9c42:	08 95       	ret

00009c44 <__udivmodsi4>:
    9c44:	a1 e2       	ldi	r26, 0x21	; 33
    9c46:	1a 2e       	mov	r1, r26
    9c48:	aa 1b       	sub	r26, r26
    9c4a:	bb 1b       	sub	r27, r27
    9c4c:	fd 01       	movw	r30, r26
    9c4e:	0d c0       	rjmp	.+26     	; 0x9c6a <__udivmodsi4_ep>

00009c50 <__udivmodsi4_loop>:
    9c50:	aa 1f       	adc	r26, r26
    9c52:	bb 1f       	adc	r27, r27
    9c54:	ee 1f       	adc	r30, r30
    9c56:	ff 1f       	adc	r31, r31
    9c58:	a2 17       	cp	r26, r18
    9c5a:	b3 07       	cpc	r27, r19
    9c5c:	e4 07       	cpc	r30, r20
    9c5e:	f5 07       	cpc	r31, r21
    9c60:	20 f0       	brcs	.+8      	; 0x9c6a <__udivmodsi4_ep>
    9c62:	a2 1b       	sub	r26, r18
    9c64:	b3 0b       	sbc	r27, r19
    9c66:	e4 0b       	sbc	r30, r20
    9c68:	f5 0b       	sbc	r31, r21

00009c6a <__udivmodsi4_ep>:
    9c6a:	66 1f       	adc	r22, r22
    9c6c:	77 1f       	adc	r23, r23
    9c6e:	88 1f       	adc	r24, r24
    9c70:	99 1f       	adc	r25, r25
    9c72:	1a 94       	dec	r1
    9c74:	69 f7       	brne	.-38     	; 0x9c50 <__udivmodsi4_loop>
    9c76:	60 95       	com	r22
    9c78:	70 95       	com	r23
    9c7a:	80 95       	com	r24
    9c7c:	90 95       	com	r25
    9c7e:	9b 01       	movw	r18, r22
    9c80:	ac 01       	movw	r20, r24
    9c82:	bd 01       	movw	r22, r26
    9c84:	cf 01       	movw	r24, r30
    9c86:	08 95       	ret

00009c88 <__divmodsi4>:
    9c88:	05 2e       	mov	r0, r21
    9c8a:	97 fb       	bst	r25, 7
    9c8c:	16 f4       	brtc	.+4      	; 0x9c92 <__divmodsi4+0xa>
    9c8e:	00 94       	com	r0
    9c90:	0f d0       	rcall	.+30     	; 0x9cb0 <__negsi2>
    9c92:	57 fd       	sbrc	r21, 7
    9c94:	05 d0       	rcall	.+10     	; 0x9ca0 <__divmodsi4_neg2>
    9c96:	d6 df       	rcall	.-84     	; 0x9c44 <__udivmodsi4>
    9c98:	07 fc       	sbrc	r0, 7
    9c9a:	02 d0       	rcall	.+4      	; 0x9ca0 <__divmodsi4_neg2>
    9c9c:	46 f4       	brtc	.+16     	; 0x9cae <__divmodsi4_exit>
    9c9e:	08 c0       	rjmp	.+16     	; 0x9cb0 <__negsi2>

00009ca0 <__divmodsi4_neg2>:
    9ca0:	50 95       	com	r21
    9ca2:	40 95       	com	r20
    9ca4:	30 95       	com	r19
    9ca6:	21 95       	neg	r18
    9ca8:	3f 4f       	sbci	r19, 0xFF	; 255
    9caa:	4f 4f       	sbci	r20, 0xFF	; 255
    9cac:	5f 4f       	sbci	r21, 0xFF	; 255

00009cae <__divmodsi4_exit>:
    9cae:	08 95       	ret

00009cb0 <__negsi2>:
    9cb0:	90 95       	com	r25
    9cb2:	80 95       	com	r24
    9cb4:	70 95       	com	r23
    9cb6:	61 95       	neg	r22
    9cb8:	7f 4f       	sbci	r23, 0xFF	; 255
    9cba:	8f 4f       	sbci	r24, 0xFF	; 255
    9cbc:	9f 4f       	sbci	r25, 0xFF	; 255
    9cbe:	08 95       	ret

00009cc0 <__tablejump2__>:
    9cc0:	ee 0f       	add	r30, r30
    9cc2:	ff 1f       	adc	r31, r31
    9cc4:	00 24       	eor	r0, r0
    9cc6:	00 1c       	adc	r0, r0
    9cc8:	0b be       	out	0x3b, r0	; 59
    9cca:	07 90       	elpm	r0, Z+
    9ccc:	f6 91       	elpm	r31, Z
    9cce:	e0 2d       	mov	r30, r0
    9cd0:	09 94       	ijmp

00009cd2 <__umulhisi3>:
    9cd2:	a2 9f       	mul	r26, r18
    9cd4:	b0 01       	movw	r22, r0
    9cd6:	b3 9f       	mul	r27, r19
    9cd8:	c0 01       	movw	r24, r0
    9cda:	a3 9f       	mul	r26, r19
    9cdc:	70 0d       	add	r23, r0
    9cde:	81 1d       	adc	r24, r1
    9ce0:	11 24       	eor	r1, r1
    9ce2:	91 1d       	adc	r25, r1
    9ce4:	b2 9f       	mul	r27, r18
    9ce6:	70 0d       	add	r23, r0
    9ce8:	81 1d       	adc	r24, r1
    9cea:	11 24       	eor	r1, r1
    9cec:	91 1d       	adc	r25, r1
    9cee:	08 95       	ret

00009cf0 <__usmulhisi3>:
    9cf0:	f0 df       	rcall	.-32     	; 0x9cd2 <__umulhisi3>

00009cf2 <__usmulhisi3_tail>:
    9cf2:	b7 ff       	sbrs	r27, 7
    9cf4:	08 95       	ret
    9cf6:	82 1b       	sub	r24, r18
    9cf8:	93 0b       	sbc	r25, r19
    9cfa:	08 95       	ret

00009cfc <__muluhisi3>:
    9cfc:	ea df       	rcall	.-44     	; 0x9cd2 <__umulhisi3>
    9cfe:	a5 9f       	mul	r26, r21
    9d00:	90 0d       	add	r25, r0
    9d02:	b4 9f       	mul	r27, r20
    9d04:	90 0d       	add	r25, r0
    9d06:	a4 9f       	mul	r26, r20
    9d08:	80 0d       	add	r24, r0
    9d0a:	91 1d       	adc	r25, r1
    9d0c:	11 24       	eor	r1, r1
    9d0e:	08 95       	ret

00009d10 <random_r>:
    9d10:	8f 92       	push	r8
    9d12:	9f 92       	push	r9
    9d14:	af 92       	push	r10
    9d16:	bf 92       	push	r11
    9d18:	cf 92       	push	r12
    9d1a:	df 92       	push	r13
    9d1c:	ef 92       	push	r14
    9d1e:	ff 92       	push	r15
    9d20:	cf 93       	push	r28
    9d22:	df 93       	push	r29
    9d24:	ec 01       	movw	r28, r24
    9d26:	68 81       	ld	r22, Y
    9d28:	79 81       	ldd	r23, Y+1	; 0x01
    9d2a:	8a 81       	ldd	r24, Y+2	; 0x02
    9d2c:	9b 81       	ldd	r25, Y+3	; 0x03
    9d2e:	61 15       	cp	r22, r1
    9d30:	71 05       	cpc	r23, r1
    9d32:	81 05       	cpc	r24, r1
    9d34:	91 05       	cpc	r25, r1
    9d36:	21 f4       	brne	.+8      	; 0x9d40 <random_r+0x30>
    9d38:	64 e2       	ldi	r22, 0x24	; 36
    9d3a:	79 ed       	ldi	r23, 0xD9	; 217
    9d3c:	8b e5       	ldi	r24, 0x5B	; 91
    9d3e:	97 e0       	ldi	r25, 0x07	; 7
    9d40:	2d e1       	ldi	r18, 0x1D	; 29
    9d42:	33 ef       	ldi	r19, 0xF3	; 243
    9d44:	41 e0       	ldi	r20, 0x01	; 1
    9d46:	50 e0       	ldi	r21, 0x00	; 0
    9d48:	9f df       	rcall	.-194    	; 0x9c88 <__divmodsi4>
    9d4a:	49 01       	movw	r8, r18
    9d4c:	5a 01       	movw	r10, r20
    9d4e:	9b 01       	movw	r18, r22
    9d50:	ac 01       	movw	r20, r24
    9d52:	a7 ea       	ldi	r26, 0xA7	; 167
    9d54:	b1 e4       	ldi	r27, 0x41	; 65
    9d56:	d2 df       	rcall	.-92     	; 0x9cfc <__muluhisi3>
    9d58:	6b 01       	movw	r12, r22
    9d5a:	7c 01       	movw	r14, r24
    9d5c:	ac ee       	ldi	r26, 0xEC	; 236
    9d5e:	b4 ef       	ldi	r27, 0xF4	; 244
    9d60:	a5 01       	movw	r20, r10
    9d62:	94 01       	movw	r18, r8
    9d64:	94 d0       	rcall	.+296    	; 0x9e8e <__mulohisi3>
    9d66:	c6 0e       	add	r12, r22
    9d68:	d7 1e       	adc	r13, r23
    9d6a:	e8 1e       	adc	r14, r24
    9d6c:	f9 1e       	adc	r15, r25
    9d6e:	f7 fe       	sbrs	r15, 7
    9d70:	06 c0       	rjmp	.+12     	; 0x9d7e <random_r+0x6e>
    9d72:	81 e0       	ldi	r24, 0x01	; 1
    9d74:	c8 1a       	sub	r12, r24
    9d76:	d1 08       	sbc	r13, r1
    9d78:	e1 08       	sbc	r14, r1
    9d7a:	80 e8       	ldi	r24, 0x80	; 128
    9d7c:	f8 0a       	sbc	r15, r24
    9d7e:	c8 82       	st	Y, r12
    9d80:	d9 82       	std	Y+1, r13	; 0x01
    9d82:	ea 82       	std	Y+2, r14	; 0x02
    9d84:	fb 82       	std	Y+3, r15	; 0x03
    9d86:	c7 01       	movw	r24, r14
    9d88:	b6 01       	movw	r22, r12
    9d8a:	9f 77       	andi	r25, 0x7F	; 127
    9d8c:	df 91       	pop	r29
    9d8e:	cf 91       	pop	r28
    9d90:	ff 90       	pop	r15
    9d92:	ef 90       	pop	r14
    9d94:	df 90       	pop	r13
    9d96:	cf 90       	pop	r12
    9d98:	bf 90       	pop	r11
    9d9a:	af 90       	pop	r10
    9d9c:	9f 90       	pop	r9
    9d9e:	8f 90       	pop	r8
    9da0:	08 95       	ret

00009da2 <random>:
    9da2:	8f 92       	push	r8
    9da4:	9f 92       	push	r9
    9da6:	af 92       	push	r10
    9da8:	bf 92       	push	r11
    9daa:	cf 92       	push	r12
    9dac:	df 92       	push	r13
    9dae:	ef 92       	push	r14
    9db0:	ff 92       	push	r15
    9db2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    9db6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    9dba:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    9dbe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    9dc2:	61 15       	cp	r22, r1
    9dc4:	71 05       	cpc	r23, r1
    9dc6:	81 05       	cpc	r24, r1
    9dc8:	91 05       	cpc	r25, r1
    9dca:	21 f4       	brne	.+8      	; 0x9dd4 <random+0x32>
    9dcc:	64 e2       	ldi	r22, 0x24	; 36
    9dce:	79 ed       	ldi	r23, 0xD9	; 217
    9dd0:	8b e5       	ldi	r24, 0x5B	; 91
    9dd2:	97 e0       	ldi	r25, 0x07	; 7
    9dd4:	2d e1       	ldi	r18, 0x1D	; 29
    9dd6:	33 ef       	ldi	r19, 0xF3	; 243
    9dd8:	41 e0       	ldi	r20, 0x01	; 1
    9dda:	50 e0       	ldi	r21, 0x00	; 0
    9ddc:	55 df       	rcall	.-342    	; 0x9c88 <__divmodsi4>
    9dde:	49 01       	movw	r8, r18
    9de0:	5a 01       	movw	r10, r20
    9de2:	9b 01       	movw	r18, r22
    9de4:	ac 01       	movw	r20, r24
    9de6:	a7 ea       	ldi	r26, 0xA7	; 167
    9de8:	b1 e4       	ldi	r27, 0x41	; 65
    9dea:	88 df       	rcall	.-240    	; 0x9cfc <__muluhisi3>
    9dec:	6b 01       	movw	r12, r22
    9dee:	7c 01       	movw	r14, r24
    9df0:	ac ee       	ldi	r26, 0xEC	; 236
    9df2:	b4 ef       	ldi	r27, 0xF4	; 244
    9df4:	a5 01       	movw	r20, r10
    9df6:	94 01       	movw	r18, r8
    9df8:	4a d0       	rcall	.+148    	; 0x9e8e <__mulohisi3>
    9dfa:	c6 0e       	add	r12, r22
    9dfc:	d7 1e       	adc	r13, r23
    9dfe:	e8 1e       	adc	r14, r24
    9e00:	f9 1e       	adc	r15, r25
    9e02:	f7 fe       	sbrs	r15, 7
    9e04:	06 c0       	rjmp	.+12     	; 0x9e12 <random+0x70>
    9e06:	81 e0       	ldi	r24, 0x01	; 1
    9e08:	c8 1a       	sub	r12, r24
    9e0a:	d1 08       	sbc	r13, r1
    9e0c:	e1 08       	sbc	r14, r1
    9e0e:	80 e8       	ldi	r24, 0x80	; 128
    9e10:	f8 0a       	sbc	r15, r24
    9e12:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    9e16:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    9e1a:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    9e1e:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    9e22:	c7 01       	movw	r24, r14
    9e24:	b6 01       	movw	r22, r12
    9e26:	9f 77       	andi	r25, 0x7F	; 127
    9e28:	ff 90       	pop	r15
    9e2a:	ef 90       	pop	r14
    9e2c:	df 90       	pop	r13
    9e2e:	cf 90       	pop	r12
    9e30:	bf 90       	pop	r11
    9e32:	af 90       	pop	r10
    9e34:	9f 90       	pop	r9
    9e36:	8f 90       	pop	r8
    9e38:	08 95       	ret

00009e3a <srandom>:
    9e3a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    9e3e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    9e42:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    9e46:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    9e4a:	08 95       	ret

00009e4c <memcpy>:
    9e4c:	fb 01       	movw	r30, r22
    9e4e:	dc 01       	movw	r26, r24
    9e50:	02 c0       	rjmp	.+4      	; 0x9e56 <memcpy+0xa>
    9e52:	01 90       	ld	r0, Z+
    9e54:	0d 92       	st	X+, r0
    9e56:	41 50       	subi	r20, 0x01	; 1
    9e58:	50 40       	sbci	r21, 0x00	; 0
    9e5a:	d8 f7       	brcc	.-10     	; 0x9e52 <memcpy+0x6>
    9e5c:	08 95       	ret

00009e5e <strcpy>:
    9e5e:	fb 01       	movw	r30, r22
    9e60:	dc 01       	movw	r26, r24
    9e62:	01 90       	ld	r0, Z+
    9e64:	0d 92       	st	X+, r0
    9e66:	00 20       	and	r0, r0
    9e68:	e1 f7       	brne	.-8      	; 0x9e62 <strcpy+0x4>
    9e6a:	08 95       	ret

00009e6c <strncpy>:
    9e6c:	fb 01       	movw	r30, r22
    9e6e:	dc 01       	movw	r26, r24
    9e70:	41 50       	subi	r20, 0x01	; 1
    9e72:	50 40       	sbci	r21, 0x00	; 0
    9e74:	48 f0       	brcs	.+18     	; 0x9e88 <strncpy+0x1c>
    9e76:	01 90       	ld	r0, Z+
    9e78:	0d 92       	st	X+, r0
    9e7a:	00 20       	and	r0, r0
    9e7c:	c9 f7       	brne	.-14     	; 0x9e70 <strncpy+0x4>
    9e7e:	01 c0       	rjmp	.+2      	; 0x9e82 <strncpy+0x16>
    9e80:	1d 92       	st	X+, r1
    9e82:	41 50       	subi	r20, 0x01	; 1
    9e84:	50 40       	sbci	r21, 0x00	; 0
    9e86:	e0 f7       	brcc	.-8      	; 0x9e80 <strncpy+0x14>
    9e88:	08 95       	ret

00009e8a <__mulshisi3>:
    9e8a:	b7 ff       	sbrs	r27, 7
    9e8c:	37 cf       	rjmp	.-402    	; 0x9cfc <__muluhisi3>

00009e8e <__mulohisi3>:
    9e8e:	36 df       	rcall	.-404    	; 0x9cfc <__muluhisi3>
    9e90:	82 1b       	sub	r24, r18
    9e92:	93 0b       	sbc	r25, r19
    9e94:	08 95       	ret

00009e96 <__do_global_dtors>:
    9e96:	14 e0       	ldi	r17, 0x04	; 4
    9e98:	c5 e3       	ldi	r28, 0x35	; 53
    9e9a:	d4 e0       	ldi	r29, 0x04	; 4
    9e9c:	03 c0       	rjmp	.+6      	; 0x9ea4 <__do_global_dtors+0xe>
    9e9e:	fe 01       	movw	r30, r28
    9ea0:	0f df       	rcall	.-482    	; 0x9cc0 <__tablejump2__>
    9ea2:	21 96       	adiw	r28, 0x01	; 1
    9ea4:	c6 33       	cpi	r28, 0x36	; 54
    9ea6:	d1 07       	cpc	r29, r17
    9ea8:	d1 f7       	brne	.-12     	; 0x9e9e <__do_global_dtors+0x8>
    9eaa:	f8 94       	cli

00009eac <__stop_program>:
    9eac:	ff cf       	rjmp	.-2      	; 0x9eac <__stop_program>
