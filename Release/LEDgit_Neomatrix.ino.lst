
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c4       	rjmp	.+2154   	; 0x86c <__dtors_end>
       2:	00 00       	nop
       4:	5d c4       	rjmp	.+2234   	; 0x8c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c4       	rjmp	.+2230   	; 0x8c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c4       	rjmp	.+2226   	; 0x8c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c4       	rjmp	.+2222   	; 0x8c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c4       	rjmp	.+2218   	; 0x8c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c4       	rjmp	.+2214   	; 0x8c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c4       	rjmp	.+2210   	; 0x8c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c4       	rjmp	.+2206   	; 0x8c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c4       	rjmp	.+2202   	; 0x8c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 4a 38 	jmp	0x7094	; 0x7094 <__vector_10>
      2c:	0c 94 c7 38 	jmp	0x718e	; 0x718e <__vector_11>
      30:	47 c4       	rjmp	.+2190   	; 0x8c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c4       	rjmp	.+2186   	; 0x8c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c4       	rjmp	.+2182   	; 0x8c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c4       	rjmp	.+2178   	; 0x8c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c4       	rjmp	.+2174   	; 0x8c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c4       	rjmp	.+2170   	; 0x8c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c4       	rjmp	.+2166   	; 0x8c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c4       	rjmp	.+2162   	; 0x8c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c4       	rjmp	.+2158   	; 0x8c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c4       	rjmp	.+2154   	; 0x8c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c4       	rjmp	.+2150   	; 0x8c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 a9 37 	jmp	0x6f52	; 0x6f52 <__vector_23>
      60:	2f c4       	rjmp	.+2142   	; 0x8c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 05 3b 	jmp	0x760a	; 0x760a <__vector_25>
      68:	0c 94 30 3b 	jmp	0x7660	; 0x7660 <__vector_26>
      6c:	0c 94 61 3b 	jmp	0x76c2	; 0x76c2 <__vector_27>
      70:	27 c4       	rjmp	.+2126   	; 0x8c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c4       	rjmp	.+2122   	; 0x8c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c4       	rjmp	.+2118   	; 0x8c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c4       	rjmp	.+2114   	; 0x8c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 cc 12 	jmp	0x2598	; 0x2598 <__vector_32>
      84:	1d c4       	rjmp	.+2106   	; 0x8c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c4       	rjmp	.+2102   	; 0x8c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 c4       	rjmp	.+2098   	; 0x8c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	17 c4       	rjmp	.+2094   	; 0x8c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c4       	rjmp	.+2090   	; 0x8c0 <__bad_interrupt>
	...

00000098 <MatrixColors_p>:
      98:	00 10 00 00 00 30 00 00 00 50 00 00 00 70 00 00     .....0...P...p..
      a8:	00 80 00 00 00 80 00 00 00 80 00 00 19 8d 19 00     ................
      b8:	33 99 33 00 4d a6 4d 00 66 b3 66 00 80 c0 80 00     3.3.M.M.f.f.....
      c8:	99 cc 99 00 b3 d9 b3 00 cc e6 cc 00 e6 f2 e6 00     ................

000000d8 <font>:
      d8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      e8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      f8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     108:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     118:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     128:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     138:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     148:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     158:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     168:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     178:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     188:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     198:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1a8:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1b8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1c8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     1d8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1e8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1f8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     208:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     218:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     228:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     238:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     248:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     258:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     268:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     278:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     288:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     298:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2a8:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2b8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2c8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2d8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2e8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2f8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     308:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     318:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     328:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     338:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     348:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     358:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     368:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     378:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     388:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     398:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3a8:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3b8:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3c8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     3d8:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     3e8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3f8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     408:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     418:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     428:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     438:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     448:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     458:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     468:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     478:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     488:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     498:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4a8:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4b8:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4c8:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     4d8:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     4e8:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4f8:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     508:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     518:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     528:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     538:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     548:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     558:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     568:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     578:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     588:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     598:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5a8:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5b8:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5c8:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000005d8 <gamma6>:
     5d8:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5e8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5f8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     608:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

00000618 <gamma5>:
     618:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     628:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

00000638 <PartyColors_p>:
     638:	ab 00 55 00 7c 00 84 00 4b 00 b5 00 1b 00 e5 00     ..U.|...K.......
     648:	00 17 e8 00 00 47 b8 00 00 77 ab 00 00 ab ab 00     .....G...w......
     658:	00 55 ab 00 00 22 dd 00 0e 00 f2 00 3e 00 c2 00     .U..."......>...
     668:	71 00 8f 00 a1 00 5f 00 d0 00 2f 00 f9 07 00 00     q....._.../.....

00000678 <RainbowStripeColors_p>:
     678:	00 00 ff 00 00 00 00 00 00 55 ab 00 00 00 00 00     .........U......
     688:	00 ab ab 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     698:	55 ab 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     U...............
     6a8:	ab 00 55 00 00 00 00 00 55 00 ab 00 00 00 00 00     ..U.....U.......

000006b8 <RainbowColors_p>:
     6b8:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     6c8:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     6d8:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     6e8:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

000006f8 <CloudColors_p>:
     6f8:	ff 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     708:	8b 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     718:	ff 00 00 00 8b 00 00 00 eb ce 87 00 eb ce 87 00     ................
     728:	e6 d8 ad 00 ff ff ff 00 e6 d8 ad 00 eb ce 87 00     ................

00000738 <digital_pin_table_PGM>:
     738:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     748:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     758:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     768:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     778:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     788:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000794 <descriptor_list>:
     794:	00 01 00 00 45 08 12 00 02 00 00 02 08 43 00 03     ....E........C..
     7a4:	00 00 fe 07 04 01 03 09 04 e4 07 18 02 03 09 04     ................
     7b4:	cc 07 16 03 03 09 04 be 07 0c                       ..........

000007be <string3>:
     7be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000007cc <string2>:
     7cc:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     7dc:	69 00 61 00 6c 00 00 00                             i.a.l...

000007e4 <string1>:
     7e4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     7f4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000007fe <string0>:
     7fe:	04 03 09 04                                         ....

00000802 <config1_descriptor>:
     802:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     812:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     822:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     832:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     842:	40 00 00                                            @..

00000845 <device_descriptor>:
     845:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     855:	03 01                                               ..

00000857 <endpoint_config_table>:
     857:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000862 <__ctors_start>:
     862:	0f 24       	eor	r0, r15
     864:	25 33       	cpi	r18, 0x35	; 53
     866:	7f 3b       	cpi	r23, 0xBF	; 191
     868:	44 3e       	cpi	r20, 0xE4	; 228

0000086a <__ctors_end>:
     86a:	8a 24       	eor	r8, r10

0000086c <__dtors_end>:
     86c:	11 24       	eor	r1, r1
     86e:	1f be       	out	0x3f, r1	; 63
     870:	cf ef       	ldi	r28, 0xFF	; 255
     872:	d0 e2       	ldi	r29, 0x20	; 32
     874:	de bf       	out	0x3e, r29	; 62
     876:	cd bf       	out	0x3d, r28	; 61

00000878 <__do_copy_data>:
     878:	19 e0       	ldi	r17, 0x09	; 9
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b1 e0       	ldi	r27, 0x01	; 1
     87e:	e4 ed       	ldi	r30, 0xD4	; 212
     880:	f4 e8       	ldi	r31, 0x84	; 132
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	0b bf       	out	0x3b, r16	; 59
     886:	02 c0       	rjmp	.+4      	; 0x88c <__do_copy_data+0x14>
     888:	07 90       	elpm	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	a6 32       	cpi	r26, 0x26	; 38
     88e:	b1 07       	cpc	r27, r17
     890:	d9 f7       	brne	.-10     	; 0x888 <__do_copy_data+0x10>

00000892 <__do_clear_bss>:
     892:	20 e1       	ldi	r18, 0x10	; 16
     894:	a6 e2       	ldi	r26, 0x26	; 38
     896:	b9 e0       	ldi	r27, 0x09	; 9
     898:	01 c0       	rjmp	.+2      	; 0x89c <.do_clear_bss_start>

0000089a <.do_clear_bss_loop>:
     89a:	1d 92       	st	X+, r1

0000089c <.do_clear_bss_start>:
     89c:	a9 3a       	cpi	r26, 0xA9	; 169
     89e:	b2 07       	cpc	r27, r18
     8a0:	e1 f7       	brne	.-8      	; 0x89a <.do_clear_bss_loop>

000008a2 <__do_global_ctors>:
     8a2:	14 e0       	ldi	r17, 0x04	; 4
     8a4:	c5 e3       	ldi	r28, 0x35	; 53
     8a6:	d4 e0       	ldi	r29, 0x04	; 4
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__do_global_ctors+0x10>
     8aa:	21 97       	sbiw	r28, 0x01	; 1
     8ac:	fe 01       	movw	r30, r28
     8ae:	0e 94 73 41 	call	0x82e6	; 0x82e6 <__tablejump2__>
     8b2:	c1 33       	cpi	r28, 0x31	; 49
     8b4:	d1 07       	cpc	r29, r17
     8b6:	c9 f7       	brne	.-14     	; 0x8aa <__do_global_ctors+0x8>
     8b8:	0e 94 90 3b 	call	0x7720	; 0x7720 <main>
     8bc:	0c 94 5e 42 	jmp	0x84bc	; 0x84bc <__do_global_dtors>

000008c0 <__bad_interrupt>:
     8c0:	9f cb       	rjmp	.-2242   	; 0x0 <__vectors>

000008c2 <CLEDController::size()>:

		// delete 1 pixel sometimes
		//if (random(0, 3) == 1) leds[random(0, anz_LEDs)] = CRGB::Black;

		FastLED.show();
	}
     8c2:	fc 01       	movw	r30, r24
     8c4:	85 85       	ldd	r24, Z+13	; 0x0d
     8c6:	96 85       	ldd	r25, Z+14	; 0x0e
     8c8:	08 95       	ret

000008ca <CLEDController::clearLeds(int)>:
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <CLEDController::clearLeds(int)+0x6>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <CLEDController::clearLeds(int)+0x8>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <CLEDController::clearLeds(int)+0xa>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	ab 01       	movw	r20, r22
     8da:	1c 82       	std	Y+4, r1	; 0x04
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	1e 82       	std	Y+6, r1	; 0x06
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	1a 82       	std	Y+2, r1	; 0x02
     8f0:	1b 82       	std	Y+3, r1	; 0x03
     8f2:	9e 01       	movw	r18, r28
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	be 01       	movw	r22, r28
     8fa:	6c 5f       	subi	r22, 0xFC	; 252
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	09 95       	icall
     900:	26 96       	adiw	r28, 0x06	; 6
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <myRemapFn(unsigned int, unsigned int)>:
     912:	67 31       	cpi	r22, 0x17	; 23
     914:	71 05       	cpc	r23, r1
     916:	08 f0       	brcs	.+2      	; 0x91a <myRemapFn(unsigned int, unsigned int)+0x8>
     918:	ef c0       	rjmp	.+478    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     91a:	fb 01       	movw	r30, r22
     91c:	ee 56       	subi	r30, 0x6E	; 110
     91e:	fb 4f       	sbci	r31, 0xFB	; 251
     920:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <__tablejump2__>
     924:	a9 04       	cpc	r10, r9
     926:	b4 04       	cpc	r11, r4
     928:	bc 04       	cpc	r11, r12
     92a:	c9 04       	cpc	r12, r9
     92c:	d4 04       	cpc	r13, r4
     92e:	db 04       	cpc	r13, r11
     930:	e2 04       	cpc	r14, r2
     932:	e9 04       	cpc	r14, r9
     934:	f3 04       	cpc	r15, r3
     936:	fd 04       	cpc	r15, r13
     938:	07 05       	cpc	r16, r7
     93a:	11 05       	cpc	r17, r1
     93c:	1b 05       	cpc	r17, r11
     93e:	25 05       	cpc	r18, r5
     940:	2f 05       	cpc	r18, r15
     942:	37 05       	cpc	r19, r7
     944:	3f 05       	cpc	r19, r15
     946:	46 05       	cpc	r20, r6
     948:	4d 05       	cpc	r20, r13
     94a:	54 05       	cpc	r21, r4
     94c:	5e 05       	cpc	r21, r14
     94e:	68 05       	cpc	r22, r8
     950:	72 05       	cpc	r23, r2
     952:	04 97       	sbiw	r24, 0x04	; 4
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	08 f0       	brcs	.+2      	; 0x95c <myRemapFn(unsigned int, unsigned int)+0x4a>
     95a:	ce c0       	rjmp	.+412    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     95c:	83 55       	subi	r24, 0x53	; 83
     95e:	9b 4f       	sbci	r25, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	08 95       	ret
     968:	02 97       	sbiw	r24, 0x02	; 2
     96a:	86 30       	cpi	r24, 0x06	; 6
     96c:	91 05       	cpc	r25, r1
     96e:	08 f0       	brcs	.+2      	; 0x972 <myRemapFn(unsigned int, unsigned int)+0x60>
     970:	c3 c0       	rjmp	.+390    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     972:	89 55       	subi	r24, 0x59	; 89
     974:	9b 4f       	sbci	r25, 0xFB	; 251
     976:	f4 cf       	rjmp	.-24     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	83 31       	cpi	r24, 0x13	; 19
     97c:	91 05       	cpc	r25, r1
     97e:	08 f0       	brcs	.+2      	; 0x982 <myRemapFn(unsigned int, unsigned int)+0x70>
     980:	bb c0       	rjmp	.+374    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	fc 01       	movw	r30, r24
     988:	ef 57       	subi	r30, 0x7F	; 127
     98a:	fb 4f       	sbci	r31, 0xFB	; 251
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	08 95       	ret
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	85 31       	cpi	r24, 0x15	; 21
     996:	91 05       	cpc	r25, r1
     998:	08 f0       	brcs	.+2      	; 0x99c <myRemapFn(unsigned int, unsigned int)+0x8a>
     99a:	ae c0       	rjmp	.+348    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	fc 01       	movw	r30, r24
     9a2:	e9 5a       	subi	r30, 0xA9	; 169
     9a4:	fb 4f       	sbci	r31, 0xFB	; 251
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9a8:	84 31       	cpi	r24, 0x14	; 20
     9aa:	91 05       	cpc	r25, r1
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <myRemapFn(unsigned int, unsigned int)+0x9e>
     9ae:	a4 c0       	rjmp	.+328    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9b0:	8d 5b       	subi	r24, 0xBD	; 189
     9b2:	9b 4f       	sbci	r25, 0xFB	; 251
     9b4:	d5 cf       	rjmp	.-86     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9b6:	84 31       	cpi	r24, 0x14	; 20
     9b8:	91 05       	cpc	r25, r1
     9ba:	08 f0       	brcs	.+2      	; 0x9be <myRemapFn(unsigned int, unsigned int)+0xac>
     9bc:	9d c0       	rjmp	.+314    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9be:	81 5d       	subi	r24, 0xD1	; 209
     9c0:	9b 4f       	sbci	r25, 0xFB	; 251
     9c2:	ce cf       	rjmp	.-100    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9c4:	8f 30       	cpi	r24, 0x0F	; 15
     9c6:	91 05       	cpc	r25, r1
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <myRemapFn(unsigned int, unsigned int)+0xba>
     9ca:	96 c0       	rjmp	.+300    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9cc:	80 5e       	subi	r24, 0xE0	; 224
     9ce:	9b 4f       	sbci	r25, 0xFB	; 251
     9d0:	c7 cf       	rjmp	.-114    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9d2:	8f 30       	cpi	r24, 0x0F	; 15
     9d4:	91 05       	cpc	r25, r1
     9d6:	08 f0       	brcs	.+2      	; 0x9da <myRemapFn(unsigned int, unsigned int)+0xc8>
     9d8:	8f c0       	rjmp	.+286    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	fc 01       	movw	r30, r24
     9e0:	ee 5f       	subi	r30, 0xFE	; 254
     9e2:	fb 4f       	sbci	r31, 0xFB	; 251
     9e4:	d3 cf       	rjmp	.-90     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e6:	8f 30       	cpi	r24, 0x0F	; 15
     9e8:	91 05       	cpc	r25, r1
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <myRemapFn(unsigned int, unsigned int)+0xdc>
     9ec:	85 c0       	rjmp	.+266    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	ec 51       	subi	r30, 0x1C	; 28
     9f6:	fc 4f       	sbci	r31, 0xFC	; 252
     9f8:	c9 cf       	rjmp	.-110    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9fa:	8f 30       	cpi	r24, 0x0F	; 15
     9fc:	91 05       	cpc	r25, r1
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <myRemapFn(unsigned int, unsigned int)+0xf0>
     a00:	7b c0       	rjmp	.+246    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	fc 01       	movw	r30, r24
     a08:	ea 53       	subi	r30, 0x3A	; 58
     a0a:	fc 4f       	sbci	r31, 0xFC	; 252
     a0c:	bf cf       	rjmp	.-130    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a0e:	8f 30       	cpi	r24, 0x0F	; 15
     a10:	91 05       	cpc	r25, r1
     a12:	08 f0       	brcs	.+2      	; 0xa16 <myRemapFn(unsigned int, unsigned int)+0x104>
     a14:	71 c0       	rjmp	.+226    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	fc 01       	movw	r30, r24
     a1c:	e8 55       	subi	r30, 0x58	; 88
     a1e:	fc 4f       	sbci	r31, 0xFC	; 252
     a20:	b5 cf       	rjmp	.-150    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a22:	8f 30       	cpi	r24, 0x0F	; 15
     a24:	91 05       	cpc	r25, r1
     a26:	08 f0       	brcs	.+2      	; 0xa2a <myRemapFn(unsigned int, unsigned int)+0x118>
     a28:	67 c0       	rjmp	.+206    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	fc 01       	movw	r30, r24
     a30:	e6 57       	subi	r30, 0x76	; 118
     a32:	fc 4f       	sbci	r31, 0xFC	; 252
     a34:	ab cf       	rjmp	.-170    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a36:	8f 30       	cpi	r24, 0x0F	; 15
     a38:	91 05       	cpc	r25, r1
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <myRemapFn(unsigned int, unsigned int)+0x12c>
     a3c:	5d c0       	rjmp	.+186    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	fc 01       	movw	r30, r24
     a44:	e4 59       	subi	r30, 0x94	; 148
     a46:	fc 4f       	sbci	r31, 0xFC	; 252
     a48:	a1 cf       	rjmp	.-190    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a4a:	8f 30       	cpi	r24, 0x0F	; 15
     a4c:	91 05       	cpc	r25, r1
     a4e:	08 f0       	brcs	.+2      	; 0xa52 <myRemapFn(unsigned int, unsigned int)+0x140>
     a50:	53 c0       	rjmp	.+166    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	e2 5b       	subi	r30, 0xB2	; 178
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	97 cf       	rjmp	.-210    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	8e 30       	cpi	r24, 0x0E	; 14
     a62:	91 05       	cpc	r25, r1
     a64:	08 f0       	brcs	.+2      	; 0xa68 <myRemapFn(unsigned int, unsigned int)+0x156>
     a66:	48 c0       	rjmp	.+144    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a68:	80 5c       	subi	r24, 0xC0	; 192
     a6a:	9c 4f       	sbci	r25, 0xFC	; 252
     a6c:	79 cf       	rjmp	.-270    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a6e:	02 97       	sbiw	r24, 0x02	; 2
     a70:	81 31       	cpi	r24, 0x11	; 17
     a72:	91 05       	cpc	r25, r1
     a74:	08 f0       	brcs	.+2      	; 0xa78 <myRemapFn(unsigned int, unsigned int)+0x166>
     a76:	40 c0       	rjmp	.+128    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a78:	81 5d       	subi	r24, 0xD1	; 209
     a7a:	9c 4f       	sbci	r25, 0xFC	; 252
     a7c:	71 cf       	rjmp	.-286    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	82 31       	cpi	r24, 0x12	; 18
     a82:	91 05       	cpc	r25, r1
     a84:	c8 f5       	brcc	.+114    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a86:	83 5e       	subi	r24, 0xE3	; 227
     a88:	9c 4f       	sbci	r25, 0xFC	; 252
     a8a:	6a cf       	rjmp	.-300    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	83 31       	cpi	r24, 0x13	; 19
     a90:	91 05       	cpc	r25, r1
     a92:	90 f5       	brcc	.+100    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a94:	86 5f       	subi	r24, 0xF6	; 246
     a96:	9c 4f       	sbci	r25, 0xFC	; 252
     a98:	63 cf       	rjmp	.-314    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	84 31       	cpi	r24, 0x14	; 20
     a9e:	91 05       	cpc	r25, r1
     aa0:	58 f5       	brcc	.+86     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aa2:	8a 50       	subi	r24, 0x0A	; 10
     aa4:	9d 4f       	sbci	r25, 0xFD	; 253
     aa6:	5c cf       	rjmp	.-328    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	83 31       	cpi	r24, 0x13	; 19
     aac:	91 05       	cpc	r25, r1
     aae:	20 f5       	brcc	.+72     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fc 01       	movw	r30, r24
     ab6:	e0 53       	subi	r30, 0x30	; 48
     ab8:	fd 4f       	sbci	r31, 0xFD	; 253
     aba:	68 cf       	rjmp	.-304    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     abc:	02 97       	sbiw	r24, 0x02	; 2
     abe:	87 30       	cpi	r24, 0x07	; 7
     ac0:	91 05       	cpc	r25, r1
     ac2:	d0 f4       	brcc	.+52     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	fc 01       	movw	r30, r24
     aca:	ee 53       	subi	r30, 0x3E	; 62
     acc:	fd 4f       	sbci	r31, 0xFD	; 253
     ace:	5e cf       	rjmp	.-324    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ad0:	03 97       	sbiw	r24, 0x03	; 3
     ad2:	85 30       	cpi	r24, 0x05	; 5
     ad4:	91 05       	cpc	r25, r1
     ad6:	80 f4       	brcc	.+32     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	fc 01       	movw	r30, r24
     ade:	e8 54       	subi	r30, 0x48	; 72
     ae0:	fd 4f       	sbci	r31, 0xFD	; 253
     ae2:	54 cf       	rjmp	.-344    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ae4:	04 97       	sbiw	r24, 0x04	; 4
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	91 05       	cpc	r25, r1
     aea:	30 f4       	brcc	.+12     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	fc 01       	movw	r30, r24
     af2:	ee 54       	subi	r30, 0x4E	; 78
     af4:	fd 4f       	sbci	r31, 0xFD	; 253
     af6:	4a cf       	rjmp	.-364    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     af8:	8c e2       	ldi	r24, 0x2C	; 44
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	08 95       	ret

00000afe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     afe:	80 e9       	ldi	r24, 0x90	; 144
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	08 95       	ret

00000b04 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     b04:	3a 9a       	sbi	0x07, 2	; 7
     b06:	08 95       	ret

00000b08 <Print::write(char const*)>:
     b08:	fb 01       	movw	r30, r22
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <Print::write(char const*)+0x2>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	af 01       	movw	r20, r30
     b14:	46 1b       	sub	r20, r22
     b16:	57 0b       	sbc	r21, r23
     b18:	dc 01       	movw	r26, r24
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	02 80       	ldd	r0, Z+2	; 0x02
     b20:	f3 81       	ldd	r31, Z+3	; 0x03
     b22:	e0 2d       	mov	r30, r0
     b24:	09 94       	ijmp

00000b26 <Print::print(char const*)>:
     b26:	f0 cf       	rjmp	.-32     	; 0xb08 <Print::write(char const*)>

00000b28 <Print::print(unsigned char)>:
     b28:	46 2f       	mov	r20, r22
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	0c 94 3c 3c 	jmp	0x7878	; 0x7878 <Print::printNumberDec(unsigned long, unsigned char)>

00000b36 <Print::println(unsigned char)>:
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
     b40:	f3 df       	rcall	.-26     	; 0xb28 <Print::print(unsigned char)>
     b42:	8c 01       	movw	r16, r24
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 22 3c 	call	0x7844	; 0x7844 <Print::println()>
     b4a:	80 0f       	add	r24, r16
     b4c:	91 1f       	adc	r25, r17
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	dc 01       	movw	r26, r24
     b5e:	ac 01       	movw	r20, r24
     b60:	40 5d       	subi	r20, 0xD0	; 208
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	fb 01       	movw	r30, r22
     b66:	05 91       	lpm	r16, Z+
     b68:	15 91       	lpm	r17, Z+
     b6a:	25 91       	lpm	r18, Z+
     b6c:	34 91       	lpm	r19, Z
     b6e:	2c 93       	st	X, r18
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 93       	st	X, r17
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	12 96       	adiw	r26, 0x02	; 2
     b78:	0c 93       	st	X, r16
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	6c 5f       	subi	r22, 0xFC	; 252
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	13 96       	adiw	r26, 0x03	; 3
     b82:	a4 17       	cp	r26, r20
     b84:	b5 07       	cpc	r27, r21
     b86:	71 f7       	brne	.-36     	; 0xb64 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	08 95       	ret

00000b8e <CFastLED::show()>:
     b8e:	fc 01       	movw	r30, r24
     b90:	60 81       	ld	r22, Z
     b92:	0c 94 6d 31 	jmp	0x62da	; 0x62da <CFastLED::show(unsigned char)>

00000b96 <CFastLED::showColor(CRGB const&)>:
     b96:	fc 01       	movw	r30, r24
     b98:	40 81       	ld	r20, Z
     b9a:	0c 94 fd 31 	jmp	0x63fa	; 0x63fa <CFastLED::showColor(CRGB const&, unsigned char)>

00000b9e <Framebuffer_GFX::clear()>:
     b9e:	dc 01       	movw	r26, r24
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	02 a0       	ldd	r0, Z+34	; 0x22
     ba6:	f3 a1       	ldd	r31, Z+35	; 0x23
     ba8:	e0 2d       	mov	r30, r0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	09 94       	ijmp

00000bb0 <getRandomColorValue()>:
     bb0:	24 e0       	ldi	r18, 0x04	; 4
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
     bc4:	62 30       	cpi	r22, 0x02	; 2
     bc6:	71 05       	cpc	r23, r1
     bc8:	31 f0       	breq	.+12     	; 0xbd6 <getRandomColorValue()+0x26>
     bca:	63 30       	cpi	r22, 0x03	; 3
     bcc:	71 05       	cpc	r23, r1
     bce:	31 f0       	breq	.+12     	; 0xbdc <getRandomColorValue()+0x2c>
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret
     bd6:	8f e7       	ldi	r24, 0x7F	; 127
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	08 95       	ret
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	08 95       	ret

00000be2 <getRandomColor()>:
     be2:	27 e0       	ldi	r18, 0x07	; 7
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
     bf6:	61 50       	subi	r22, 0x01	; 1
     bf8:	71 09       	sbc	r23, r1
     bfa:	67 30       	cpi	r22, 0x07	; 7
     bfc:	71 05       	cpc	r23, r1
     bfe:	40 f4       	brcc	.+16     	; 0xc10 <getRandomColor()+0x2e>
     c00:	66 0f       	add	r22, r22
     c02:	77 1f       	adc	r23, r23
     c04:	fb 01       	movw	r30, r22
     c06:	ec 55       	subi	r30, 0x5C	; 92
     c08:	fd 4f       	sbci	r31, 0xFD	; 253
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	08 95       	ret
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	08 95       	ret

00000c16 <getRandomColorIncludingBlack()>:
     c16:	29 e0       	ldi	r18, 0x09	; 9
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
     c2a:	61 50       	subi	r22, 0x01	; 1
     c2c:	71 09       	sbc	r23, r1
     c2e:	67 30       	cpi	r22, 0x07	; 7
     c30:	71 05       	cpc	r23, r1
     c32:	40 f4       	brcc	.+16     	; 0xc44 <getRandomColorIncludingBlack()+0x2e>
     c34:	66 0f       	add	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	fb 01       	movw	r30, r22
     c3a:	ea 56       	subi	r30, 0x6A	; 106
     c3c:	fd 4f       	sbci	r31, 0xFD	; 253
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	08 95       	ret
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret

00000c4a <progBlingBlingColoring(unsigned int, unsigned char)>:
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	8c 01       	movw	r16, r24
     c54:	c6 2f       	mov	r28, r22
     c56:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     c5a:	81 11       	cpse	r24, r1
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <progBlingBlingColoring(unsigned int, unsigned char)+0x30>
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	8d e0       	ldi	r24, 0x0D	; 13
     c62:	90 e1       	ldi	r25, 0x10	; 16
     c64:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
     c68:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     c6c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     c70:	c0 93 f9 09 	sts	0x09F9, r28	; 0x8009f9 <nextSongPart>
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     c7a:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <progBlingBlingColoring_rounds>
     c7e:	90 91 b6 09 	lds	r25, 0x09B6	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
     c82:	89 2b       	or	r24, r25
     c84:	49 f4       	brne	.+18     	; 0xc98 <progBlingBlingColoring(unsigned int, unsigned char)+0x4e>
     c86:	94 df       	rcall	.-216    	; 0xbb0 <getRandomColorValue()>
     c88:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     c8c:	91 df       	rcall	.-222    	; 0xbb0 <getRandomColorValue()>
     c8e:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     c92:	8e df       	rcall	.-228    	; 0xbb0 <getRandomColorValue()>
     c94:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     c98:	c0 91 b7 09 	lds	r28, 0x09B7	; 0x8009b7 <b>
     c9c:	d0 91 b8 09 	lds	r29, 0x09B8	; 0x8009b8 <g>
     ca0:	10 91 b9 09 	lds	r17, 0x09B9	; 0x8009b9 <r>
     ca4:	26 e1       	ldi	r18, 0x16	; 22
     ca6:	31 e0       	ldi	r19, 0x01	; 1
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	cb 01       	movw	r24, r22
     cb2:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
     cb6:	fb 01       	movw	r30, r22
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	e6 0f       	add	r30, r22
     cbe:	f7 1f       	adc	r31, r23
     cc0:	e2 5f       	subi	r30, 0xF2	; 242
     cc2:	f5 4f       	sbci	r31, 0xF5	; 245
     cc4:	10 83       	st	Z, r17
     cc6:	d1 83       	std	Z+1, r29	; 0x01
     cc8:	c2 83       	std	Z+2, r28	; 0x02
     cca:	23 e0       	ldi	r18, 0x03	; 3
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	cb 01       	movw	r24, r22
     cd8:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
     cdc:	61 30       	cpi	r22, 0x01	; 1
     cde:	71 05       	cpc	r23, r1
     ce0:	81 05       	cpc	r24, r1
     ce2:	91 05       	cpc	r25, r1
     ce4:	99 f4       	brne	.+38     	; 0xd0c <progBlingBlingColoring(unsigned int, unsigned char)+0xc2>
     ce6:	26 e1       	ldi	r18, 0x16	; 22
     ce8:	31 e0       	ldi	r19, 0x01	; 1
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	cb 01       	movw	r24, r22
     cf4:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
     cf8:	fb 01       	movw	r30, r22
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	e6 0f       	add	r30, r22
     d00:	f7 1f       	adc	r31, r23
     d02:	e2 5f       	subi	r30, 0xF2	; 242
     d04:	f5 4f       	sbci	r31, 0xF5	; 245
     d06:	10 82       	st	Z, r1
     d08:	11 82       	std	Z+1, r1	; 0x01
     d0a:	12 82       	std	Z+2, r1	; 0x02
     d0c:	8d e0       	ldi	r24, 0x0D	; 13
     d0e:	90 e1       	ldi	r25, 0x10	; 16
     d10:	3e df       	rcall	.-388    	; 0xb8e <CFastLED::show()>
     d12:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
     d16:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
     d1a:	88 39       	cpi	r24, 0x98	; 152
     d1c:	9a 43       	sbci	r25, 0x3A	; 58
     d1e:	f0 f0       	brcs	.+60     	; 0xd5c <progBlingBlingColoring(unsigned int, unsigned char)+0x112>
     d20:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
     d24:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <analogRead>
     d2e:	0e 94 57 3e 	call	0x7cae	; 0x7cae <randomSeed(unsigned int)>
     d32:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <progBlingBlingColoring_rounds>
     d36:	90 91 b6 09 	lds	r25, 0x09B6	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	91 05       	cpc	r25, r1
     d40:	91 f0       	breq	.+36     	; 0xd66 <progBlingBlingColoring(unsigned int, unsigned char)+0x11c>
     d42:	90 93 b6 09 	sts	0x09B6, r25	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
     d46:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <progBlingBlingColoring_rounds>
     d4a:	32 df       	rcall	.-412    	; 0xbb0 <getRandomColorValue()>
     d4c:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     d50:	2f df       	rcall	.-418    	; 0xbb0 <getRandomColorValue()>
     d52:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     d56:	2c df       	rcall	.-424    	; 0xbb0 <getRandomColorValue()>
     d58:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	eb cf       	rjmp	.-42     	; 0xd42 <progBlingBlingColoring(unsigned int, unsigned char)+0xf8>

00000d6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>:
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	7c 01       	movw	r14, r24
     d7c:	06 2f       	mov	r16, r22
     d7e:	c4 2f       	mov	r28, r20
     d80:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     d84:	81 11       	cpse	r24, r1
     d86:	0e c0       	rjmp	.+28     	; 0xda4 <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x38>
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	8d e0       	ldi	r24, 0x0D	; 13
     d8c:	90 e1       	ldi	r25, 0x10	; 16
     d8e:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
     d92:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
     d96:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
     d9a:	c0 93 f9 09 	sts	0x09F9, r28	; 0x8009f9 <nextSongPart>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	8d e0       	ldi	r24, 0x0D	; 13
     da8:	90 e1       	ldi	r25, 0x10	; 16
     daa:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <FastLED>
     db4:	d0 e0       	ldi	r29, 0x00	; 0
     db6:	c0 e0       	ldi	r28, 0x00	; 0
     db8:	10 e0       	ldi	r17, 0x00	; 0
     dba:	c0 17       	cp	r28, r16
     dbc:	d1 07       	cpc	r29, r17
     dbe:	dc f4       	brge	.+54     	; 0xdf6 <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x8a>
     dc0:	f7 de       	rcall	.-530    	; 0xbb0 <getRandomColorValue()>
     dc2:	f8 2e       	mov	r15, r24
     dc4:	f5 de       	rcall	.-534    	; 0xbb0 <getRandomColorValue()>
     dc6:	e8 2e       	mov	r14, r24
     dc8:	f3 de       	rcall	.-538    	; 0xbb0 <getRandomColorValue()>
     dca:	d8 2e       	mov	r13, r24
     dcc:	26 e1       	ldi	r18, 0x16	; 22
     dce:	31 e0       	ldi	r19, 0x01	; 1
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	cb 01       	movw	r24, r22
     dda:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
     dde:	fb 01       	movw	r30, r22
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	e6 0f       	add	r30, r22
     de6:	f7 1f       	adc	r31, r23
     de8:	e2 5f       	subi	r30, 0xF2	; 242
     dea:	f5 4f       	sbci	r31, 0xF5	; 245
     dec:	d0 82       	st	Z, r13
     dee:	e1 82       	std	Z+1, r14	; 0x01
     df0:	f2 82       	std	Z+2, r15	; 0x02
     df2:	21 96       	adiw	r28, 0x01	; 1
     df4:	e2 cf       	rjmp	.-60     	; 0xdba <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x4e>
     df6:	8d e0       	ldi	r24, 0x0D	; 13
     df8:	90 e1       	ldi	r25, 0x10	; 16
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	c2 ce       	rjmp	.-636    	; 0xb8e <CFastLED::show()>

00000e0a <progFullColors(unsigned int, unsigned char, unsigned int)>:
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	00 d0       	rcall	.+0      	; 0xe1a <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     e1a:	1f 92       	push	r1
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	6c 01       	movw	r12, r24
     e22:	f6 2e       	mov	r15, r22
     e24:	8a 01       	movw	r16, r20
     e26:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     e2a:	81 11       	cpse	r24, r1
     e2c:	12 c0       	rjmp	.+36     	; 0xe52 <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	8d e0       	ldi	r24, 0x0D	; 13
     e32:	90 e1       	ldi	r25, 0x10	; 16
     e34:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
     e38:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     e3c:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     e40:	f0 92 f9 09 	sts	0x09F9, r15	; 0x8009f9 <nextSongPart>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     e4a:	10 93 01 0a 	sts	0x0A01, r17	; 0x800a01 <millisCounterTimer+0x1>
     e4e:	00 93 00 0a 	sts	0x0A00, r16	; 0x800a00 <millisCounterTimer>
     e52:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
     e56:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
     e5a:	80 17       	cp	r24, r16
     e5c:	91 07       	cpc	r25, r17
     e5e:	78 f1       	brcs	.+94     	; 0xebe <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     e60:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
     e64:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
     e68:	a3 de       	rcall	.-698    	; 0xbb0 <getRandomColorValue()>
     e6a:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     e6e:	a0 de       	rcall	.-704    	; 0xbb0 <getRandomColorValue()>
     e70:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     e74:	9d de       	rcall	.-710    	; 0xbb0 <getRandomColorValue()>
     e76:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     e7a:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <r>
     e7e:	91 11       	cpse	r25, r1
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e82:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <g>
     e86:	91 11       	cpse	r25, r1
     e88:	0b c0       	rjmp	.+22     	; 0xea0 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e8a:	81 11       	cpse	r24, r1
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e8e:	90 de       	rcall	.-736    	; 0xbb0 <getRandomColorValue()>
     e90:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     e94:	8d de       	rcall	.-742    	; 0xbb0 <getRandomColorValue()>
     e96:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     e9a:	8a de       	rcall	.-748    	; 0xbb0 <getRandomColorValue()>
     e9c:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     ea0:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <b>
     ea4:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <g>
     ea8:	20 91 b9 09 	lds	r18, 0x09B9	; 0x8009b9 <r>
     eac:	29 83       	std	Y+1, r18	; 0x01
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	8d e0       	ldi	r24, 0x0D	; 13
     eba:	90 e1       	ldi	r25, 0x10	; 16
     ebc:	6c de       	rcall	.-808    	; 0xb96 <CFastLED::showColor(CRGB const&)>
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	08 95       	ret

00000ed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     ed4:	af 92       	push	r10
     ed6:	bf 92       	push	r11
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	00 d0       	rcall	.+0      	; 0xeea <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     eea:	1f 92       	push	r1
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	5c 01       	movw	r10, r24
     ef2:	f6 2e       	mov	r15, r22
     ef4:	6a 01       	movw	r12, r20
     ef6:	12 2f       	mov	r17, r18
     ef8:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     efc:	81 11       	cpse	r24, r1
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	8d e0       	ldi	r24, 0x0D	; 13
     f04:	90 e1       	ldi	r25, 0x10	; 16
     f06:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
     f0a:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     f0e:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     f12:	f0 92 f9 09 	sts	0x09F9, r15	; 0x8009f9 <nextSongPart>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     f1c:	d0 92 01 0a 	sts	0x0A01, r13	; 0x800a01 <millisCounterTimer+0x1>
     f20:	c0 92 00 0a 	sts	0x0A00, r12	; 0x800a00 <millisCounterTimer>
     f24:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
     f28:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
     f2c:	8c 15       	cp	r24, r12
     f2e:	9d 05       	cpc	r25, r13
     f30:	98 f0       	brcs	.+38     	; 0xf58 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     f32:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
     f36:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
     f3a:	80 91 03 0a 	lds	r24, 0x0A03	; 0x800a03 <progStroboIsBlack>
     f3e:	88 23       	and	r24, r24
     f40:	c9 f0       	breq	.+50     	; 0xf74 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     f42:	19 83       	std	Y+1, r17	; 0x01
     f44:	0a 83       	std	Y+2, r16	; 0x02
     f46:	eb 82       	std	Y+3, r14	; 0x03
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8d e0       	ldi	r24, 0x0D	; 13
     f50:	90 e1       	ldi	r25, 0x10	; 16
     f52:	21 de       	rcall	.-958    	; 0xb96 <CFastLED::showColor(CRGB const&)>
     f54:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <progStroboIsBlack>
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	08 95       	ret
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	1b 82       	std	Y+3, r1	; 0x03
     f7a:	be 01       	movw	r22, r28
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8d e0       	ldi	r24, 0x0D	; 13
     f82:	90 e1       	ldi	r25, 0x10	; 16
     f84:	08 de       	rcall	.-1008   	; 0xb96 <CFastLED::showColor(CRGB const&)>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 03 0a 	sts	0x0A03, r24	; 0x800a03 <progStroboIsBlack>
     f8c:	e5 cf       	rjmp	.-54     	; 0xf58 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

00000f8e <progMatrixScanner(unsigned int, unsigned char)>:
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	8c 01       	movw	r16, r24
     f9a:	c6 2f       	mov	r28, r22
     f9c:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     fa0:	81 11       	cpse	r24, r1
     fa2:	0e c0       	rjmp	.+28     	; 0xfc0 <progMatrixScanner(unsigned int, unsigned char)+0x32>
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	8d e0       	ldi	r24, 0x0D	; 13
     fa8:	90 e1       	ldi	r25, 0x10	; 16
     faa:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
     fae:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     fb2:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     fb6:	c0 93 f9 09 	sts	0x09F9, r28	; 0x8009f9 <nextSongPart>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
     fc0:	60 91 f1 09 	lds	r22, 0x09F1	; 0x8009f1 <zaehler>
     fc4:	70 91 f2 09 	lds	r23, 0x09F2	; 0x8009f2 <zaehler+0x1>
     fc8:	9b 01       	movw	r18, r22
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	40 91 ee 09 	lds	r20, 0x09EE	; 0x8009ee <scannerGoesBack>
     fd2:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
     fd6:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
     fda:	41 11       	cpse	r20, r1
     fdc:	52 c0       	rjmp	.+164    	; 0x1082 <progMatrixScanner(unsigned int, unsigned char)+0xf4>
     fde:	30 93 f2 09 	sts	0x09F2, r19	; 0x8009f2 <zaehler+0x1>
     fe2:	20 93 f1 09 	sts	0x09F1, r18	; 0x8009f1 <zaehler>
     fe6:	27 31       	cpi	r18, 0x17	; 23
     fe8:	31 05       	cpc	r19, r1
     fea:	1c f0       	brlt	.+6      	; 0xff2 <progMatrixScanner(unsigned int, unsigned char)+0x64>
     fec:	21 e0       	ldi	r18, 0x01	; 1
     fee:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <scannerGoesBack>
     ff2:	9b 01       	movw	r18, r22
     ff4:	2d 5f       	subi	r18, 0xFD	; 253
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	dc 01       	movw	r26, r24
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	00 a0       	ldd	r0, Z+32	; 0x20
    1000:	f1 a1       	ldd	r31, Z+33	; 0x21
    1002:	e0 2d       	mov	r30, r0
    1004:	e1 2c       	mov	r14, r1
    1006:	58 ef       	ldi	r21, 0xF8	; 248
    1008:	f5 2e       	mov	r15, r21
    100a:	07 e1       	ldi	r16, 0x17	; 23
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	09 95       	icall
    1014:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1018:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    101c:	60 91 f1 09 	lds	r22, 0x09F1	; 0x8009f1 <zaehler>
    1020:	70 91 f2 09 	lds	r23, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1024:	9b 01       	movw	r18, r22
    1026:	2f 5f       	subi	r18, 0xFF	; 255
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	dc 01       	movw	r26, r24
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	00 a0       	ldd	r0, Z+32	; 0x20
    1032:	f1 a1       	ldd	r31, Z+33	; 0x21
    1034:	e0 2d       	mov	r30, r0
    1036:	ee 24       	eor	r14, r14
    1038:	ea 94       	dec	r14
    103a:	fe 2c       	mov	r15, r14
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	09 95       	icall
    1042:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1046:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    104a:	60 91 f1 09 	lds	r22, 0x09F1	; 0x8009f1 <zaehler>
    104e:	70 91 f2 09 	lds	r23, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1052:	9b 01       	movw	r18, r22
    1054:	22 50       	subi	r18, 0x02	; 2
    1056:	31 09       	sbc	r19, r1
    1058:	65 50       	subi	r22, 0x05	; 5
    105a:	71 09       	sbc	r23, r1
    105c:	dc 01       	movw	r26, r24
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	00 a0       	ldd	r0, Z+32	; 0x20
    1064:	f1 a1       	ldd	r31, Z+33	; 0x21
    1066:	e0 2d       	mov	r30, r0
    1068:	f1 2c       	mov	r15, r1
    106a:	e1 2c       	mov	r14, r1
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	09 95       	icall
    1072:	8d e0       	ldi	r24, 0x0D	; 13
    1074:	90 e1       	ldi	r25, 0x10	; 16
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	86 cd       	rjmp	.-1268   	; 0xb8e <CFastLED::show()>
    1082:	61 50       	subi	r22, 0x01	; 1
    1084:	71 09       	sbc	r23, r1
    1086:	70 93 f2 09 	sts	0x09F2, r23	; 0x8009f2 <zaehler+0x1>
    108a:	60 93 f1 09 	sts	0x09F1, r22	; 0x8009f1 <zaehler>
    108e:	6e 3f       	cpi	r22, 0xFE	; 254
    1090:	bf ef       	ldi	r27, 0xFF	; 255
    1092:	7b 07       	cpc	r23, r27
    1094:	14 f4       	brge	.+4      	; 0x109a <progMatrixScanner(unsigned int, unsigned char)+0x10c>
    1096:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <scannerGoesBack>
    109a:	dc 01       	movw	r26, r24
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	00 a0       	ldd	r0, Z+32	; 0x20
    10a2:	f1 a1       	ldd	r31, Z+33	; 0x21
    10a4:	e0 2d       	mov	r30, r0
    10a6:	e1 2c       	mov	r14, r1
    10a8:	48 ef       	ldi	r20, 0xF8	; 248
    10aa:	f4 2e       	mov	r15, r20
    10ac:	07 e1       	ldi	r16, 0x17	; 23
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	09 95       	icall
    10b6:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    10ba:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    10be:	60 91 f1 09 	lds	r22, 0x09F1	; 0x8009f1 <zaehler>
    10c2:	70 91 f2 09 	lds	r23, 0x09F2	; 0x8009f2 <zaehler+0x1>
    10c6:	9b 01       	movw	r18, r22
    10c8:	2c 5f       	subi	r18, 0xFC	; 252
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	6e 5f       	subi	r22, 0xFE	; 254
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	c5 cf       	rjmp	.-118    	; 0x105c <progMatrixScanner(unsigned int, unsigned char)+0xce>

000010d2 <progStern(unsigned int, int, unsigned char)>:
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	7c 01       	movw	r14, r24
    10ec:	eb 01       	movw	r28, r22
    10ee:	14 2f       	mov	r17, r20
    10f0:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    10f4:	81 11       	cpse	r24, r1
    10f6:	18 c0       	rjmp	.+48     	; 0x1128 <progStern(unsigned int, int, unsigned char)+0x56>
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	8d e0       	ldi	r24, 0x0D	; 13
    10fc:	90 e1       	ldi	r25, 0x10	; 16
    10fe:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1102:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1106:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    110a:	10 93 f9 09 	sts	0x09F9, r17	; 0x8009f9 <nextSongPart>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1114:	66 dd       	rcall	.-1332   	; 0xbe2 <getRandomColor()>
    1116:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <col1+0x1>
    111a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <col1>
    111e:	61 dd       	rcall	.-1342   	; 0xbe2 <getRandomColor()>
    1120:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <col2+0x1>
    1124:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <col2>
    1128:	1c 16       	cp	r1, r28
    112a:	1d 06       	cpc	r1, r29
    112c:	ac f4       	brge	.+42     	; 0x1158 <progStern(unsigned int, int, unsigned char)+0x86>
    112e:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    1132:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    1136:	8c 17       	cp	r24, r28
    1138:	9d 07       	cpc	r25, r29
    113a:	70 f0       	brcs	.+28     	; 0x1158 <progStern(unsigned int, int, unsigned char)+0x86>
    113c:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    1140:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    1144:	4e dd       	rcall	.-1380   	; 0xbe2 <getRandomColor()>
    1146:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <col1+0x1>
    114a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <col1>
    114e:	49 dd       	rcall	.-1390   	; 0xbe2 <getRandomColor()>
    1150:	90 93 0a 0a 	sts	0x0A0A, r25	; 0x800a0a <col2+0x1>
    1154:	80 93 09 0a 	sts	0x0A09, r24	; 0x800a09 <col2>
    1158:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    115c:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	8a 30       	cpi	r24, 0x0A	; 10
    1164:	91 05       	cpc	r25, r1
    1166:	0c f0       	brlt	.+2      	; 0x116a <progStern(unsigned int, int, unsigned char)+0x98>
    1168:	fc c0       	rjmp	.+504    	; 0x1362 <progStern(unsigned int, int, unsigned char)+0x290>
    116a:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    116e:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	8d e0       	ldi	r24, 0x0D	; 13
    1176:	90 e1       	ldi	r25, 0x10	; 16
    1178:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    117c:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1180:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1184:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    1188:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    118c:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col1>
    1190:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col1+0x1>
    1194:	9a 01       	movw	r18, r20
    1196:	26 5f       	subi	r18, 0xF6	; 246
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	6a e0       	ldi	r22, 0x0A	; 10
    119c:	a6 2e       	mov	r10, r22
    119e:	b1 2c       	mov	r11, r1
    11a0:	b5 01       	movw	r22, r10
    11a2:	64 1b       	sub	r22, r20
    11a4:	75 0b       	sbc	r23, r21
    11a6:	dc 01       	movw	r26, r24
    11a8:	ed 91       	ld	r30, X+
    11aa:	fc 91       	ld	r31, X
    11ac:	04 a0       	ldd	r0, Z+36	; 0x24
    11ae:	f5 a1       	ldd	r31, Z+37	; 0x25
    11b0:	e0 2d       	mov	r30, r0
    11b2:	06 e1       	ldi	r16, 0x16	; 22
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	09 95       	icall
    11bc:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    11c0:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    11c4:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    11c8:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    11cc:	e0 90 09 0a 	lds	r14, 0x0A09	; 0x800a09 <col2>
    11d0:	f0 90 0a 0a 	lds	r15, 0x0A0A	; 0x800a0a <col2+0x1>
    11d4:	9a 01       	movw	r18, r20
    11d6:	25 5f       	subi	r18, 0xF5	; 245
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	7b e0       	ldi	r23, 0x0B	; 11
    11dc:	87 2e       	mov	r8, r23
    11de:	91 2c       	mov	r9, r1
    11e0:	b4 01       	movw	r22, r8
    11e2:	64 1b       	sub	r22, r20
    11e4:	75 0b       	sbc	r23, r21
    11e6:	dc 01       	movw	r26, r24
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	04 a0       	ldd	r0, Z+36	; 0x24
    11ee:	f5 a1       	ldd	r31, Z+37	; 0x25
    11f0:	e0 2d       	mov	r30, r0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	09 95       	icall
    11f8:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    11fc:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1200:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    1204:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1208:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col1>
    120c:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col1+0x1>
    1210:	e6 e1       	ldi	r30, 0x16	; 22
    1212:	ce 2e       	mov	r12, r30
    1214:	d1 2c       	mov	r13, r1
    1216:	04 1b       	sub	r16, r20
    1218:	15 0b       	sbc	r17, r21
    121a:	4f 5f       	subi	r20, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	dc 01       	movw	r26, r24
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	04 a0       	ldd	r0, Z+36	; 0x24
    1226:	f5 a1       	ldd	r31, Z+37	; 0x25
    1228:	e0 2d       	mov	r30, r0
    122a:	25 e1       	ldi	r18, 0x15	; 21
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	09 95       	icall
    1234:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1238:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    123c:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    1240:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1244:	e0 90 09 0a 	lds	r14, 0x0A09	; 0x800a09 <col2>
    1248:	f0 90 0a 0a 	lds	r15, 0x0A0A	; 0x800a0a <col2+0x1>
    124c:	c5 e1       	ldi	r28, 0x15	; 21
    124e:	d0 e0       	ldi	r29, 0x00	; 0
    1250:	8e 01       	movw	r16, r28
    1252:	04 1b       	sub	r16, r20
    1254:	15 0b       	sbc	r17, r21
    1256:	dc 01       	movw	r26, r24
    1258:	ed 91       	ld	r30, X+
    125a:	fc 91       	ld	r31, X
    125c:	04 a0       	ldd	r0, Z+36	; 0x24
    125e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1260:	e0 2d       	mov	r30, r0
    1262:	25 e1       	ldi	r18, 0x15	; 21
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	09 95       	icall
    126c:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1270:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1274:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    1278:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    127c:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col1>
    1280:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col1+0x1>
    1284:	84 01       	movw	r16, r8
    1286:	04 1b       	sub	r16, r20
    1288:	15 0b       	sbc	r17, r21
    128a:	45 5f       	subi	r20, 0xF5	; 245
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	dc 01       	movw	r26, r24
    1290:	ed 91       	ld	r30, X+
    1292:	fc 91       	ld	r31, X
    1294:	04 a0       	ldd	r0, Z+36	; 0x24
    1296:	f5 a1       	ldd	r31, Z+37	; 0x25
    1298:	e0 2d       	mov	r30, r0
    129a:	25 e1       	ldi	r18, 0x15	; 21
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	09 95       	icall
    12a4:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    12a8:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    12ac:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    12b0:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    12b4:	e0 90 09 0a 	lds	r14, 0x0A09	; 0x800a09 <col2>
    12b8:	f0 90 0a 0a 	lds	r15, 0x0A0A	; 0x800a0a <col2+0x1>
    12bc:	85 01       	movw	r16, r10
    12be:	04 1b       	sub	r16, r20
    12c0:	15 0b       	sbc	r17, r21
    12c2:	46 5f       	subi	r20, 0xF6	; 246
    12c4:	5f 4f       	sbci	r21, 0xFF	; 255
    12c6:	dc 01       	movw	r26, r24
    12c8:	ed 91       	ld	r30, X+
    12ca:	fc 91       	ld	r31, X
    12cc:	04 a0       	ldd	r0, Z+36	; 0x24
    12ce:	f5 a1       	ldd	r31, Z+37	; 0x25
    12d0:	e0 2d       	mov	r30, r0
    12d2:	25 e1       	ldi	r18, 0x15	; 21
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	09 95       	icall
    12dc:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    12e0:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    12e4:	60 91 f1 09 	lds	r22, 0x09F1	; 0x8009f1 <zaehler>
    12e8:	70 91 f2 09 	lds	r23, 0x09F2	; 0x8009f2 <zaehler+0x1>
    12ec:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col1>
    12f0:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col1+0x1>
    12f4:	96 01       	movw	r18, r12
    12f6:	26 1b       	sub	r18, r22
    12f8:	37 0b       	sbc	r19, r23
    12fa:	dc 01       	movw	r26, r24
    12fc:	ed 91       	ld	r30, X+
    12fe:	fc 91       	ld	r31, X
    1300:	04 a0       	ldd	r0, Z+36	; 0x24
    1302:	f5 a1       	ldd	r31, Z+37	; 0x25
    1304:	e0 2d       	mov	r30, r0
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	00 e0       	ldi	r16, 0x00	; 0
    130a:	46 e1       	ldi	r20, 0x16	; 22
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	09 95       	icall
    1310:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1314:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1318:	60 91 f1 09 	lds	r22, 0x09F1	; 0x8009f1 <zaehler>
    131c:	70 91 f2 09 	lds	r23, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1320:	e0 90 09 0a 	lds	r14, 0x0A09	; 0x800a09 <col2>
    1324:	f0 90 0a 0a 	lds	r15, 0x0A0A	; 0x800a0a <col2+0x1>
    1328:	9e 01       	movw	r18, r28
    132a:	26 1b       	sub	r18, r22
    132c:	37 0b       	sbc	r19, r23
    132e:	61 50       	subi	r22, 0x01	; 1
    1330:	71 09       	sbc	r23, r1
    1332:	dc 01       	movw	r26, r24
    1334:	ed 91       	ld	r30, X+
    1336:	fc 91       	ld	r31, X
    1338:	04 a0       	ldd	r0, Z+36	; 0x24
    133a:	f5 a1       	ldd	r31, Z+37	; 0x25
    133c:	e0 2d       	mov	r30, r0
    133e:	46 e1       	ldi	r20, 0x16	; 22
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	09 95       	icall
    1344:	8d e0       	ldi	r24, 0x0D	; 13
    1346:	90 e1       	ldi	r25, 0x10	; 16
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	16 cc       	rjmp	.-2004   	; 0xb8e <CFastLED::show()>
    1362:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <zaehler+0x1>
    1366:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <zaehler>
    136a:	03 cf       	rjmp	.-506    	; 0x1172 <progStern(unsigned int, int, unsigned char)+0xa0>

0000136c <progStern(unsigned int, unsigned char)>:
    136c:	46 2f       	mov	r20, r22
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	af ce       	rjmp	.-674    	; 0x10d2 <progStern(unsigned int, int, unsigned char)>

00001374 <progBlack(unsigned int, unsigned char)>:
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	8c 01       	movw	r16, r24
    137c:	c6 2f       	mov	r28, r22
    137e:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1382:	81 11       	cpse	r24, r1
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <progBlack(unsigned int, unsigned char)+0x2e>
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	8d e0       	ldi	r24, 0x0D	; 13
    138a:	90 e1       	ldi	r25, 0x10	; 16
    138c:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1390:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1394:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1398:	c0 93 f9 09 	sts	0x09F9, r28	; 0x8009f9 <nextSongPart>
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	8d e0       	ldi	r24, 0x0D	; 13
    13a6:	90 e1       	ldi	r25, 0x10	; 16
    13a8:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    13ac:	8d e0       	ldi	r24, 0x0D	; 13
    13ae:	90 e1       	ldi	r25, 0x10	; 16
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	eb cb       	rjmp	.-2090   	; 0xb8e <CFastLED::show()>

000013b8 <progCircles(unsigned int, unsigned char, unsigned int)>:
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	7c 01       	movw	r14, r24
    13d2:	16 2f       	mov	r17, r22
    13d4:	ea 01       	movw	r28, r20
    13d6:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    13da:	81 11       	cpse	r24, r1
    13dc:	12 c0       	rjmp	.+36     	; 0x1402 <progCircles(unsigned int, unsigned char, unsigned int)+0x4a>
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	8d e0       	ldi	r24, 0x0D	; 13
    13e2:	90 e1       	ldi	r25, 0x10	; 16
    13e4:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    13e8:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    13ec:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    13f0:	10 93 f9 09 	sts	0x09F9, r17	; 0x8009f9 <nextSongPart>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    13fa:	d0 93 01 0a 	sts	0x0A01, r29	; 0x800a01 <millisCounterTimer+0x1>
    13fe:	c0 93 00 0a 	sts	0x0A00, r28	; 0x800a00 <millisCounterTimer>
    1402:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    1406:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    140a:	8c 17       	cp	r24, r28
    140c:	9d 07       	cpc	r25, r29
    140e:	e0 f1       	brcs	.+120    	; 0x1488 <progCircles(unsigned int, unsigned char, unsigned int)+0xd0>
    1410:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    1414:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    1418:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    141c:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1420:	fa db       	rcall	.-2060   	; 0xc16 <getRandomColorIncludingBlack()>
    1422:	8c 01       	movw	r16, r24
    1424:	2a e0       	ldi	r18, 0x0A	; 10
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	63 e0       	ldi	r22, 0x03	; 3
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
    1438:	4b 01       	movw	r8, r22
    143a:	26 e1       	ldi	r18, 0x16	; 22
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	cb 01       	movw	r24, r22
    1448:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
    144c:	6b 01       	movw	r12, r22
    144e:	25 e1       	ldi	r18, 0x15	; 21
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	cb 01       	movw	r24, r22
    145c:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
    1460:	94 01       	movw	r18, r8
    1462:	a6 01       	movw	r20, r12
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 b3 29 	call	0x5366	; 0x5366 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    146a:	8d e0       	ldi	r24, 0x0D	; 13
    146c:	90 e1       	ldi	r25, 0x10	; 16
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	bf 90       	pop	r11
    1480:	af 90       	pop	r10
    1482:	9f 90       	pop	r9
    1484:	8f 90       	pop	r8
    1486:	83 cb       	rjmp	.-2298   	; 0xb8e <CFastLED::show()>
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	08 95       	ret

000014a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	6c 01       	movw	r12, r24
    14b4:	f6 2e       	mov	r15, r22
    14b6:	ea 01       	movw	r28, r20
    14b8:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    14bc:	81 11       	cpse	r24, r1
    14be:	12 c0       	rjmp	.+36     	; 0x14e4 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x42>
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	8d e0       	ldi	r24, 0x0D	; 13
    14c4:	90 e1       	ldi	r25, 0x10	; 16
    14c6:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    14ca:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    14ce:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    14d2:	f0 92 f9 09 	sts	0x09F9, r15	; 0x8009f9 <nextSongPart>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    14dc:	d0 93 01 0a 	sts	0x0A01, r29	; 0x800a01 <millisCounterTimer+0x1>
    14e0:	c0 93 00 0a 	sts	0x0A00, r28	; 0x800a00 <millisCounterTimer>
    14e4:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    14e8:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    14ec:	8c 17       	cp	r24, r28
    14ee:	9d 07       	cpc	r25, r29
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x52>
    14f2:	72 c0       	rjmp	.+228    	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x136>
    14f4:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    14f8:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    14fc:	25 e1       	ldi	r18, 0x15	; 21
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	cb 01       	movw	r24, r22
    150a:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
    150e:	c6 2f       	mov	r28, r22
    1510:	25 e1       	ldi	r18, 0x15	; 21
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	cb 01       	movw	r24, r22
    151e:	0e 94 76 3e 	call	0x7cec	; 0x7cec <random(long, long)>
    1522:	c6 2e       	mov	r12, r22
    1524:	5e db       	rcall	.-2372   	; 0xbe2 <getRandomColor()>
    1526:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <col1+0x1>
    152a:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <col1>
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8d e0       	ldi	r24, 0x0D	; 13
    1532:	90 e1       	ldi	r25, 0x10	; 16
    1534:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1538:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    153c:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1540:	d1 2c       	mov	r13, r1
    1542:	d0 e0       	ldi	r29, 0x00	; 0
    1544:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col1>
    1548:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col1+0x1>
    154c:	96 01       	movw	r18, r12
    154e:	21 50       	subi	r18, 0x01	; 1
    1550:	31 09       	sbc	r19, r1
    1552:	be 01       	movw	r22, r28
    1554:	61 50       	subi	r22, 0x01	; 1
    1556:	71 09       	sbc	r23, r1
    1558:	dc 01       	movw	r26, r24
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	04 a0       	ldd	r0, Z+36	; 0x24
    1560:	f5 a1       	ldd	r31, Z+37	; 0x25
    1562:	e0 2d       	mov	r30, r0
    1564:	06 e1       	ldi	r16, 0x16	; 22
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	09 95       	icall
    156e:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1572:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1576:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col1>
    157a:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col1+0x1>
    157e:	dc 01       	movw	r26, r24
    1580:	ed 91       	ld	r30, X+
    1582:	fc 91       	ld	r31, X
    1584:	04 a0       	ldd	r0, Z+36	; 0x24
    1586:	f5 a1       	ldd	r31, Z+37	; 0x25
    1588:	e0 2d       	mov	r30, r0
    158a:	96 01       	movw	r18, r12
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	be 01       	movw	r22, r28
    1592:	09 95       	icall
    1594:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1598:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    159c:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col1>
    15a0:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col1+0x1>
    15a4:	96 01       	movw	r18, r12
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	be 01       	movw	r22, r28
    15ac:	6f 5f       	subi	r22, 0xFF	; 255
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	dc 01       	movw	r26, r24
    15b2:	ed 91       	ld	r30, X+
    15b4:	fc 91       	ld	r31, X
    15b6:	04 a0       	ldd	r0, Z+36	; 0x24
    15b8:	f5 a1       	ldd	r31, Z+37	; 0x25
    15ba:	e0 2d       	mov	r30, r0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	09 95       	icall
    15c2:	8d e0       	ldi	r24, 0x0D	; 13
    15c4:	90 e1       	ldi	r25, 0x10	; 16
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	db ca       	rjmp	.-2634   	; 0xb8e <CFastLED::show()>
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	08 95       	ret

000015ea <progMovingLines(unsigned int, unsigned char)>:
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	8c 01       	movw	r16, r24
    15fc:	c6 2f       	mov	r28, r22
    15fe:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1602:	81 11       	cpse	r24, r1
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <progMovingLines(unsigned int, unsigned char)+0x38>
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	8d e0       	ldi	r24, 0x0D	; 13
    160a:	90 e1       	ldi	r25, 0x10	; 16
    160c:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1610:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1614:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1618:	c0 93 f9 09 	sts	0x09F9, r28	; 0x8009f9 <nextSongPart>
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	8d e0       	ldi	r24, 0x0D	; 13
    1626:	90 e1       	ldi	r25, 0x10	; 16
    1628:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    162c:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <stage>
    1630:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <stage+0x1>
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <progMovingLines(unsigned int, unsigned char)+0x52>
    163a:	59 c0       	rjmp	.+178    	; 0x16ee <progMovingLines(unsigned int, unsigned char)+0x104>
    163c:	7c f4       	brge	.+30     	; 0x165c <progMovingLines(unsigned int, unsigned char)+0x72>
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	39 f1       	breq	.+78     	; 0x1690 <progMovingLines(unsigned int, unsigned char)+0xa6>
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	e1 f1       	breq	.+120    	; 0x16be <progMovingLines(unsigned int, unsigned char)+0xd4>
    1646:	8d e0       	ldi	r24, 0x0D	; 13
    1648:	90 e1       	ldi	r25, 0x10	; 16
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	cf 90       	pop	r12
    165a:	99 ca       	rjmp	.-2766   	; 0xb8e <CFastLED::show()>
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <progMovingLines(unsigned int, unsigned char)+0x7a>
    1662:	9a c0       	rjmp	.+308    	; 0x1798 <progMovingLines(unsigned int, unsigned char)+0x1ae>
    1664:	0c f4       	brge	.+2      	; 0x1668 <progMovingLines(unsigned int, unsigned char)+0x7e>
    1666:	72 c0       	rjmp	.+228    	; 0x174c <progMovingLines(unsigned int, unsigned char)+0x162>
    1668:	05 97       	sbiw	r24, 0x05	; 5
    166a:	69 f7       	brne	.-38     	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    166c:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    1670:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    167a:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    167e:	18 16       	cp	r1, r24
    1680:	19 06       	cpc	r1, r25
    1682:	0c f4       	brge	.+2      	; 0x1686 <progMovingLines(unsigned int, unsigned char)+0x9c>
    1684:	9d c0       	rjmp	.+314    	; 0x17c0 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1686:	10 92 ed 09 	sts	0x09ED, r1	; 0x8009ed <stage+0x1>
    168a:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <stage>
    168e:	12 c0       	rjmp	.+36     	; 0x16b4 <progMovingLines(unsigned int, unsigned char)+0xca>
    1690:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    1694:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    169e:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    16a2:	4a 97       	sbiw	r24, 0x1a	; 26
    16a4:	0c f4       	brge	.+2      	; 0x16a8 <progMovingLines(unsigned int, unsigned char)+0xbe>
    16a6:	61 c0       	rjmp	.+194    	; 0x176a <progMovingLines(unsigned int, unsigned char)+0x180>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    16b0:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    16b4:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <zaehler+0x1>
    16b8:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <zaehler>
    16bc:	c4 cf       	rjmp	.-120    	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    16be:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    16c2:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    16cc:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    16d0:	0c 97       	sbiw	r24, 0x0c	; 12
    16d2:	14 f1       	brlt	.+68     	; 0x1718 <progMovingLines(unsigned int, unsigned char)+0x12e>
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    16dc:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    16e0:	8c e0       	ldi	r24, 0x0C	; 12
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    16e8:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    16ec:	ac cf       	rjmp	.-168    	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    16ee:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    16f2:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    16fc:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    1700:	18 16       	cp	r1, r24
    1702:	19 06       	cpc	r1, r25
    1704:	4c f0       	brlt	.+18     	; 0x1718 <progMovingLines(unsigned int, unsigned char)+0x12e>
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    170e:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    1712:	89 e1       	ldi	r24, 0x19	; 25
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	e6 cf       	rjmp	.-52     	; 0x16e4 <progMovingLines(unsigned int, unsigned char)+0xfa>
    1718:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    171c:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1720:	e8 81       	ld	r30, Y
    1722:	f9 81       	ldd	r31, Y+1	; 0x01
    1724:	c4 a0       	ldd	r12, Z+36	; 0x24
    1726:	d5 a0       	ldd	r13, Z+37	; 0x25
    1728:	5c da       	rcall	.-2888   	; 0xbe2 <getRandomColor()>
    172a:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    172e:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1732:	06 e1       	ldi	r16, 0x16	; 22
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	04 1b       	sub	r16, r20
    1738:	15 0b       	sbc	r17, r21
    173a:	7c 01       	movw	r14, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	69 e1       	ldi	r22, 0x19	; 25
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	ce 01       	movw	r24, r28
    1746:	f6 01       	movw	r30, r12
    1748:	09 95       	icall
    174a:	7d cf       	rjmp	.-262    	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    174c:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    1750:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    175a:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    175e:	18 16       	cp	r1, r24
    1760:	19 06       	cpc	r1, r25
    1762:	1c f0       	brlt	.+6      	; 0x176a <progMovingLines(unsigned int, unsigned char)+0x180>
    1764:	84 e0       	ldi	r24, 0x04	; 4
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a1 cf       	rjmp	.-190    	; 0x16ac <progMovingLines(unsigned int, unsigned char)+0xc2>
    176a:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    176e:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1772:	e8 81       	ld	r30, Y
    1774:	f9 81       	ldd	r31, Y+1	; 0x01
    1776:	c4 a0       	ldd	r12, Z+36	; 0x24
    1778:	d5 a0       	ldd	r13, Z+37	; 0x25
    177a:	33 da       	rcall	.-2970   	; 0xbe2 <getRandomColor()>
    177c:	60 91 f1 09 	lds	r22, 0x09F1	; 0x8009f1 <zaehler>
    1780:	70 91 f2 09 	lds	r23, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1784:	29 e1       	ldi	r18, 0x19	; 25
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	26 1b       	sub	r18, r22
    178a:	37 0b       	sbc	r19, r23
    178c:	7c 01       	movw	r14, r24
    178e:	06 e1       	ldi	r16, 0x16	; 22
    1790:	10 e0       	ldi	r17, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	d6 cf       	rjmp	.-84     	; 0x1744 <progMovingLines(unsigned int, unsigned char)+0x15a>
    1798:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    179c:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    17a6:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    17aa:	0b 97       	sbiw	r24, 0x0b	; 11
    17ac:	4c f0       	brlt	.+18     	; 0x17c0 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    17ae:	85 e0       	ldi	r24, 0x05	; 5
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    17b6:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    17ba:	8a e0       	ldi	r24, 0x0A	; 10
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	92 cf       	rjmp	.-220    	; 0x16e4 <progMovingLines(unsigned int, unsigned char)+0xfa>
    17c0:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    17c4:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    17c8:	e8 81       	ld	r30, Y
    17ca:	f9 81       	ldd	r31, Y+1	; 0x01
    17cc:	c4 a0       	ldd	r12, Z+36	; 0x24
    17ce:	d5 a0       	ldd	r13, Z+37	; 0x25
    17d0:	08 da       	rcall	.-3056   	; 0xbe2 <getRandomColor()>
    17d2:	40 91 f1 09 	lds	r20, 0x09F1	; 0x8009f1 <zaehler>
    17d6:	50 91 f2 09 	lds	r21, 0x09F2	; 0x8009f2 <zaehler+0x1>
    17da:	06 e1       	ldi	r16, 0x16	; 22
    17dc:	10 e0       	ldi	r17, 0x00	; 0
    17de:	04 1b       	sub	r16, r20
    17e0:	15 0b       	sbc	r17, r21
    17e2:	7c 01       	movw	r14, r24
    17e4:	29 e1       	ldi	r18, 0x19	; 25
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	ab cf       	rjmp	.-170    	; 0x1744 <progMovingLines(unsigned int, unsigned char)+0x15a>

000017ee <progOutline(unsigned int, unsigned char)>:
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	8c 01       	movw	r16, r24
    1800:	c6 2f       	mov	r28, r22
    1802:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1806:	81 11       	cpse	r24, r1
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <progOutline(unsigned int, unsigned char)+0x38>
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	8d e0       	ldi	r24, 0x0D	; 13
    180e:	90 e1       	ldi	r25, 0x10	; 16
    1810:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1814:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1818:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    181c:	c0 93 f9 09 	sts	0x09F9, r28	; 0x8009f9 <nextSongPart>
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	8d e0       	ldi	r24, 0x0D	; 13
    182a:	90 e1       	ldi	r25, 0x10	; 16
    182c:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1830:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <scannerGoesBack>
    1834:	e0 91 f1 09 	lds	r30, 0x09F1	; 0x8009f1 <zaehler>
    1838:	f0 91 f2 09 	lds	r31, 0x09F2	; 0x8009f2 <zaehler+0x1>
    183c:	81 11       	cpse	r24, r1
    183e:	08 c1       	rjmp	.+528    	; 0x1a50 <progOutline(unsigned int, unsigned char)+0x262>
    1840:	e9 30       	cpi	r30, 0x09	; 9
    1842:	f1 05       	cpc	r31, r1
    1844:	28 f5       	brcc	.+74     	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1846:	e9 5d       	subi	r30, 0xD9	; 217
    1848:	f3 4f       	sbci	r31, 0xF3	; 243
    184a:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <__tablejump2__>
    184e:	30 0c       	add	r3, r0
    1850:	62 0c       	add	r6, r2
    1852:	7b 0c       	add	r7, r11
    1854:	94 0c       	add	r9, r4
    1856:	ad 0c       	add	r10, r13
    1858:	c6 0c       	add	r12, r6
    185a:	de 0c       	add	r13, r14
    185c:	f7 0c       	add	r15, r7
    185e:	10 0d       	add	r17, r0
    1860:	ca ea       	ldi	r28, 0xAA	; 170
    1862:	d7 e0       	ldi	r29, 0x07	; 7
    1864:	06 e4       	ldi	r16, 0x46	; 70
    1866:	18 e0       	ldi	r17, 0x08	; 8
    1868:	e9 90       	ld	r14, Y+
    186a:	f9 90       	ld	r15, Y+
    186c:	a1 d9       	rcall	.-3262   	; 0xbb0 <getRandomColorValue()>
    186e:	d8 2e       	mov	r13, r24
    1870:	9f d9       	rcall	.-3266   	; 0xbb0 <getRandomColorValue()>
    1872:	c8 2e       	mov	r12, r24
    1874:	9d d9       	rcall	.-3270   	; 0xbb0 <getRandomColorValue()>
    1876:	f7 01       	movw	r30, r14
    1878:	ee 0f       	add	r30, r30
    187a:	ff 1f       	adc	r31, r31
    187c:	ee 0d       	add	r30, r14
    187e:	ff 1d       	adc	r31, r15
    1880:	e2 5f       	subi	r30, 0xF2	; 242
    1882:	f5 4f       	sbci	r31, 0xF5	; 245
    1884:	80 83       	st	Z, r24
    1886:	c1 82       	std	Z+1, r12	; 0x01
    1888:	d2 82       	std	Z+2, r13	; 0x02
    188a:	0c 17       	cp	r16, r28
    188c:	1d 07       	cpc	r17, r29
    188e:	61 f7       	brne	.-40     	; 0x1868 <progOutline(unsigned int, unsigned char)+0x7a>
    1890:	8d e0       	ldi	r24, 0x0D	; 13
    1892:	90 e1       	ldi	r25, 0x10	; 16
    1894:	7c d9       	rcall	.-3336   	; 0xb8e <CFastLED::show()>
    1896:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    189a:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    18a4:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    18a8:	09 97       	sbiw	r24, 0x09	; 9
    18aa:	1c f0       	brlt	.+6      	; 0x18b2 <progOutline(unsigned int, unsigned char)+0xc4>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <scannerGoesBack>
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	df 90       	pop	r13
    18c0:	cf 90       	pop	r12
    18c2:	08 95       	ret
    18c4:	ce e1       	ldi	r28, 0x1E	; 30
    18c6:	d7 e0       	ldi	r29, 0x07	; 7
    18c8:	0a ea       	ldi	r16, 0xAA	; 170
    18ca:	17 e0       	ldi	r17, 0x07	; 7
    18cc:	e9 90       	ld	r14, Y+
    18ce:	f9 90       	ld	r15, Y+
    18d0:	6f d9       	rcall	.-3362   	; 0xbb0 <getRandomColorValue()>
    18d2:	d8 2e       	mov	r13, r24
    18d4:	6d d9       	rcall	.-3366   	; 0xbb0 <getRandomColorValue()>
    18d6:	c8 2e       	mov	r12, r24
    18d8:	6b d9       	rcall	.-3370   	; 0xbb0 <getRandomColorValue()>
    18da:	f7 01       	movw	r30, r14
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	ee 0d       	add	r30, r14
    18e2:	ff 1d       	adc	r31, r15
    18e4:	e2 5f       	subi	r30, 0xF2	; 242
    18e6:	f5 4f       	sbci	r31, 0xF5	; 245
    18e8:	80 83       	st	Z, r24
    18ea:	c1 82       	std	Z+1, r12	; 0x01
    18ec:	d2 82       	std	Z+2, r13	; 0x02
    18ee:	0c 17       	cp	r16, r28
    18f0:	1d 07       	cpc	r17, r29
    18f2:	61 f7       	brne	.-40     	; 0x18cc <progOutline(unsigned int, unsigned char)+0xde>
    18f4:	cd cf       	rjmp	.-102    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    18f6:	c2 eb       	ldi	r28, 0xB2	; 178
    18f8:	d6 e0       	ldi	r29, 0x06	; 6
    18fa:	0e e1       	ldi	r16, 0x1E	; 30
    18fc:	17 e0       	ldi	r17, 0x07	; 7
    18fe:	e9 90       	ld	r14, Y+
    1900:	f9 90       	ld	r15, Y+
    1902:	56 d9       	rcall	.-3412   	; 0xbb0 <getRandomColorValue()>
    1904:	d8 2e       	mov	r13, r24
    1906:	54 d9       	rcall	.-3416   	; 0xbb0 <getRandomColorValue()>
    1908:	c8 2e       	mov	r12, r24
    190a:	52 d9       	rcall	.-3420   	; 0xbb0 <getRandomColorValue()>
    190c:	f7 01       	movw	r30, r14
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	ee 0d       	add	r30, r14
    1914:	ff 1d       	adc	r31, r15
    1916:	e2 5f       	subi	r30, 0xF2	; 242
    1918:	f5 4f       	sbci	r31, 0xF5	; 245
    191a:	80 83       	st	Z, r24
    191c:	c1 82       	std	Z+1, r12	; 0x01
    191e:	d2 82       	std	Z+2, r13	; 0x02
    1920:	0c 17       	cp	r16, r28
    1922:	1d 07       	cpc	r17, r29
    1924:	61 f7       	brne	.-40     	; 0x18fe <progOutline(unsigned int, unsigned char)+0x110>
    1926:	b4 cf       	rjmp	.-152    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1928:	c8 e6       	ldi	r28, 0x68	; 104
    192a:	d6 e0       	ldi	r29, 0x06	; 6
    192c:	02 eb       	ldi	r16, 0xB2	; 178
    192e:	16 e0       	ldi	r17, 0x06	; 6
    1930:	e9 90       	ld	r14, Y+
    1932:	f9 90       	ld	r15, Y+
    1934:	3d d9       	rcall	.-3462   	; 0xbb0 <getRandomColorValue()>
    1936:	d8 2e       	mov	r13, r24
    1938:	3b d9       	rcall	.-3466   	; 0xbb0 <getRandomColorValue()>
    193a:	c8 2e       	mov	r12, r24
    193c:	39 d9       	rcall	.-3470   	; 0xbb0 <getRandomColorValue()>
    193e:	f7 01       	movw	r30, r14
    1940:	ee 0f       	add	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	ee 0d       	add	r30, r14
    1946:	ff 1d       	adc	r31, r15
    1948:	e2 5f       	subi	r30, 0xF2	; 242
    194a:	f5 4f       	sbci	r31, 0xF5	; 245
    194c:	80 83       	st	Z, r24
    194e:	c1 82       	std	Z+1, r12	; 0x01
    1950:	d2 82       	std	Z+2, r13	; 0x02
    1952:	0c 17       	cp	r16, r28
    1954:	1d 07       	cpc	r17, r29
    1956:	61 f7       	brne	.-40     	; 0x1930 <progOutline(unsigned int, unsigned char)+0x142>
    1958:	9b cf       	rjmp	.-202    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    195a:	c8 e2       	ldi	r28, 0x28	; 40
    195c:	d6 e0       	ldi	r29, 0x06	; 6
    195e:	08 e6       	ldi	r16, 0x68	; 104
    1960:	16 e0       	ldi	r17, 0x06	; 6
    1962:	e9 90       	ld	r14, Y+
    1964:	f9 90       	ld	r15, Y+
    1966:	24 d9       	rcall	.-3512   	; 0xbb0 <getRandomColorValue()>
    1968:	d8 2e       	mov	r13, r24
    196a:	22 d9       	rcall	.-3516   	; 0xbb0 <getRandomColorValue()>
    196c:	c8 2e       	mov	r12, r24
    196e:	20 d9       	rcall	.-3520   	; 0xbb0 <getRandomColorValue()>
    1970:	f7 01       	movw	r30, r14
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	ee 0d       	add	r30, r14
    1978:	ff 1d       	adc	r31, r15
    197a:	e2 5f       	subi	r30, 0xF2	; 242
    197c:	f5 4f       	sbci	r31, 0xF5	; 245
    197e:	80 83       	st	Z, r24
    1980:	c1 82       	std	Z+1, r12	; 0x01
    1982:	d2 82       	std	Z+2, r13	; 0x02
    1984:	0c 17       	cp	r16, r28
    1986:	1d 07       	cpc	r17, r29
    1988:	61 f7       	brne	.-40     	; 0x1962 <progOutline(unsigned int, unsigned char)+0x174>
    198a:	82 cf       	rjmp	.-252    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    198c:	cc ee       	ldi	r28, 0xEC	; 236
    198e:	d5 e0       	ldi	r29, 0x05	; 5
    1990:	09 91       	ld	r16, Y+
    1992:	19 91       	ld	r17, Y+
    1994:	0d d9       	rcall	.-3558   	; 0xbb0 <getRandomColorValue()>
    1996:	f8 2e       	mov	r15, r24
    1998:	0b d9       	rcall	.-3562   	; 0xbb0 <getRandomColorValue()>
    199a:	e8 2e       	mov	r14, r24
    199c:	09 d9       	rcall	.-3566   	; 0xbb0 <getRandomColorValue()>
    199e:	f8 01       	movw	r30, r16
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	e0 0f       	add	r30, r16
    19a6:	f1 1f       	adc	r31, r17
    19a8:	e2 5f       	subi	r30, 0xF2	; 242
    19aa:	f5 4f       	sbci	r31, 0xF5	; 245
    19ac:	80 83       	st	Z, r24
    19ae:	e1 82       	std	Z+1, r14	; 0x01
    19b0:	f2 82       	std	Z+2, r15	; 0x02
    19b2:	86 e0       	ldi	r24, 0x06	; 6
    19b4:	c8 32       	cpi	r28, 0x28	; 40
    19b6:	d8 07       	cpc	r29, r24
    19b8:	59 f7       	brne	.-42     	; 0x1990 <progOutline(unsigned int, unsigned char)+0x1a2>
    19ba:	6a cf       	rjmp	.-300    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    19bc:	c6 eb       	ldi	r28, 0xB6	; 182
    19be:	d5 e0       	ldi	r29, 0x05	; 5
    19c0:	0c ee       	ldi	r16, 0xEC	; 236
    19c2:	15 e0       	ldi	r17, 0x05	; 5
    19c4:	e9 90       	ld	r14, Y+
    19c6:	f9 90       	ld	r15, Y+
    19c8:	f3 d8       	rcall	.-3610   	; 0xbb0 <getRandomColorValue()>
    19ca:	d8 2e       	mov	r13, r24
    19cc:	f1 d8       	rcall	.-3614   	; 0xbb0 <getRandomColorValue()>
    19ce:	c8 2e       	mov	r12, r24
    19d0:	ef d8       	rcall	.-3618   	; 0xbb0 <getRandomColorValue()>
    19d2:	f7 01       	movw	r30, r14
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	ee 0d       	add	r30, r14
    19da:	ff 1d       	adc	r31, r15
    19dc:	e2 5f       	subi	r30, 0xF2	; 242
    19de:	f5 4f       	sbci	r31, 0xF5	; 245
    19e0:	80 83       	st	Z, r24
    19e2:	c1 82       	std	Z+1, r12	; 0x01
    19e4:	d2 82       	std	Z+2, r13	; 0x02
    19e6:	0c 17       	cp	r16, r28
    19e8:	1d 07       	cpc	r17, r29
    19ea:	61 f7       	brne	.-40     	; 0x19c4 <progOutline(unsigned int, unsigned char)+0x1d6>
    19ec:	51 cf       	rjmp	.-350    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    19ee:	c2 e8       	ldi	r28, 0x82	; 130
    19f0:	d5 e0       	ldi	r29, 0x05	; 5
    19f2:	06 eb       	ldi	r16, 0xB6	; 182
    19f4:	15 e0       	ldi	r17, 0x05	; 5
    19f6:	e9 90       	ld	r14, Y+
    19f8:	f9 90       	ld	r15, Y+
    19fa:	da d8       	rcall	.-3660   	; 0xbb0 <getRandomColorValue()>
    19fc:	d8 2e       	mov	r13, r24
    19fe:	d8 d8       	rcall	.-3664   	; 0xbb0 <getRandomColorValue()>
    1a00:	c8 2e       	mov	r12, r24
    1a02:	d6 d8       	rcall	.-3668   	; 0xbb0 <getRandomColorValue()>
    1a04:	f7 01       	movw	r30, r14
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	ee 0d       	add	r30, r14
    1a0c:	ff 1d       	adc	r31, r15
    1a0e:	e2 5f       	subi	r30, 0xF2	; 242
    1a10:	f5 4f       	sbci	r31, 0xF5	; 245
    1a12:	80 83       	st	Z, r24
    1a14:	c1 82       	std	Z+1, r12	; 0x01
    1a16:	d2 82       	std	Z+2, r13	; 0x02
    1a18:	0c 17       	cp	r16, r28
    1a1a:	1d 07       	cpc	r17, r29
    1a1c:	61 f7       	brne	.-40     	; 0x19f6 <progOutline(unsigned int, unsigned char)+0x208>
    1a1e:	38 cf       	rjmp	.-400    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1a20:	c2 e5       	ldi	r28, 0x52	; 82
    1a22:	d5 e0       	ldi	r29, 0x05	; 5
    1a24:	09 91       	ld	r16, Y+
    1a26:	19 91       	ld	r17, Y+
    1a28:	c3 d8       	rcall	.-3706   	; 0xbb0 <getRandomColorValue()>
    1a2a:	f8 2e       	mov	r15, r24
    1a2c:	c1 d8       	rcall	.-3710   	; 0xbb0 <getRandomColorValue()>
    1a2e:	e8 2e       	mov	r14, r24
    1a30:	bf d8       	rcall	.-3714   	; 0xbb0 <getRandomColorValue()>
    1a32:	f8 01       	movw	r30, r16
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	e0 0f       	add	r30, r16
    1a3a:	f1 1f       	adc	r31, r17
    1a3c:	e2 5f       	subi	r30, 0xF2	; 242
    1a3e:	f5 4f       	sbci	r31, 0xF5	; 245
    1a40:	80 83       	st	Z, r24
    1a42:	e1 82       	std	Z+1, r14	; 0x01
    1a44:	f2 82       	std	Z+2, r15	; 0x02
    1a46:	85 e0       	ldi	r24, 0x05	; 5
    1a48:	c2 38       	cpi	r28, 0x82	; 130
    1a4a:	d8 07       	cpc	r29, r24
    1a4c:	59 f7       	brne	.-42     	; 0x1a24 <progOutline(unsigned int, unsigned char)+0x236>
    1a4e:	20 cf       	rjmp	.-448    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1a50:	e9 30       	cpi	r30, 0x09	; 9
    1a52:	f1 05       	cpc	r31, r1
    1a54:	20 f5       	brcc	.+72     	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1a56:	e1 5d       	subi	r30, 0xD1	; 209
    1a58:	f2 4f       	sbci	r31, 0xF2	; 242
    1a5a:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <__tablejump2__>
    1a5e:	38 0d       	add	r19, r8
    1a60:	62 0d       	add	r22, r2
    1a62:	7a 0d       	add	r23, r10
    1a64:	92 0d       	add	r25, r2
    1a66:	aa 0d       	add	r26, r10
    1a68:	c2 0d       	add	r28, r2
    1a6a:	da 0d       	add	r29, r10
    1a6c:	f5 0d       	add	r31, r5
    1a6e:	10 0e       	add	r1, r16
    1a70:	ca ea       	ldi	r28, 0xAA	; 170
    1a72:	d7 e0       	ldi	r29, 0x07	; 7
    1a74:	09 91       	ld	r16, Y+
    1a76:	19 91       	ld	r17, Y+
    1a78:	9b d8       	rcall	.-3786   	; 0xbb0 <getRandomColorValue()>
    1a7a:	f8 2e       	mov	r15, r24
    1a7c:	99 d8       	rcall	.-3790   	; 0xbb0 <getRandomColorValue()>
    1a7e:	e8 2e       	mov	r14, r24
    1a80:	97 d8       	rcall	.-3794   	; 0xbb0 <getRandomColorValue()>
    1a82:	f8 01       	movw	r30, r16
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	e0 0f       	add	r30, r16
    1a8a:	f1 1f       	adc	r31, r17
    1a8c:	e2 5f       	subi	r30, 0xF2	; 242
    1a8e:	f5 4f       	sbci	r31, 0xF5	; 245
    1a90:	80 83       	st	Z, r24
    1a92:	e1 82       	std	Z+1, r14	; 0x01
    1a94:	f2 82       	std	Z+2, r15	; 0x02
    1a96:	88 e0       	ldi	r24, 0x08	; 8
    1a98:	c6 34       	cpi	r28, 0x46	; 70
    1a9a:	d8 07       	cpc	r29, r24
    1a9c:	59 f7       	brne	.-42     	; 0x1a74 <progOutline(unsigned int, unsigned char)+0x286>
    1a9e:	8d e0       	ldi	r24, 0x0D	; 13
    1aa0:	90 e1       	ldi	r25, 0x10	; 16
    1aa2:	75 d8       	rcall	.-3862   	; 0xb8e <CFastLED::show()>
    1aa4:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    1aa8:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    1ab2:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	19 06       	cpc	r1, r25
    1aba:	0c f4       	brge	.+2      	; 0x1abe <progOutline(unsigned int, unsigned char)+0x2d0>
    1abc:	fa ce       	rjmp	.-524    	; 0x18b2 <progOutline(unsigned int, unsigned char)+0xc4>
    1abe:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <scannerGoesBack>
    1ac2:	f7 ce       	rjmp	.-530    	; 0x18b2 <progOutline(unsigned int, unsigned char)+0xc4>
    1ac4:	ce e1       	ldi	r28, 0x1E	; 30
    1ac6:	d7 e0       	ldi	r29, 0x07	; 7
    1ac8:	09 91       	ld	r16, Y+
    1aca:	19 91       	ld	r17, Y+
    1acc:	71 d8       	rcall	.-3870   	; 0xbb0 <getRandomColorValue()>
    1ace:	f8 2e       	mov	r15, r24
    1ad0:	6f d8       	rcall	.-3874   	; 0xbb0 <getRandomColorValue()>
    1ad2:	e8 2e       	mov	r14, r24
    1ad4:	6d d8       	rcall	.-3878   	; 0xbb0 <getRandomColorValue()>
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	e0 0f       	add	r30, r16
    1ade:	f1 1f       	adc	r31, r17
    1ae0:	e2 5f       	subi	r30, 0xF2	; 242
    1ae2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ae4:	80 83       	st	Z, r24
    1ae6:	e1 82       	std	Z+1, r14	; 0x01
    1ae8:	f2 82       	std	Z+2, r15	; 0x02
    1aea:	87 e0       	ldi	r24, 0x07	; 7
    1aec:	ca 3a       	cpi	r28, 0xAA	; 170
    1aee:	d8 07       	cpc	r29, r24
    1af0:	59 f7       	brne	.-42     	; 0x1ac8 <progOutline(unsigned int, unsigned char)+0x2da>
    1af2:	d5 cf       	rjmp	.-86     	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1af4:	c2 eb       	ldi	r28, 0xB2	; 178
    1af6:	d6 e0       	ldi	r29, 0x06	; 6
    1af8:	09 91       	ld	r16, Y+
    1afa:	19 91       	ld	r17, Y+
    1afc:	59 d8       	rcall	.-3918   	; 0xbb0 <getRandomColorValue()>
    1afe:	f8 2e       	mov	r15, r24
    1b00:	57 d8       	rcall	.-3922   	; 0xbb0 <getRandomColorValue()>
    1b02:	e8 2e       	mov	r14, r24
    1b04:	55 d8       	rcall	.-3926   	; 0xbb0 <getRandomColorValue()>
    1b06:	f8 01       	movw	r30, r16
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	e0 0f       	add	r30, r16
    1b0e:	f1 1f       	adc	r31, r17
    1b10:	e2 5f       	subi	r30, 0xF2	; 242
    1b12:	f5 4f       	sbci	r31, 0xF5	; 245
    1b14:	80 83       	st	Z, r24
    1b16:	e1 82       	std	Z+1, r14	; 0x01
    1b18:	f2 82       	std	Z+2, r15	; 0x02
    1b1a:	87 e0       	ldi	r24, 0x07	; 7
    1b1c:	ce 31       	cpi	r28, 0x1E	; 30
    1b1e:	d8 07       	cpc	r29, r24
    1b20:	59 f7       	brne	.-42     	; 0x1af8 <progOutline(unsigned int, unsigned char)+0x30a>
    1b22:	bd cf       	rjmp	.-134    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1b24:	c8 e6       	ldi	r28, 0x68	; 104
    1b26:	d6 e0       	ldi	r29, 0x06	; 6
    1b28:	09 91       	ld	r16, Y+
    1b2a:	19 91       	ld	r17, Y+
    1b2c:	41 d8       	rcall	.-3966   	; 0xbb0 <getRandomColorValue()>
    1b2e:	f8 2e       	mov	r15, r24
    1b30:	3f d8       	rcall	.-3970   	; 0xbb0 <getRandomColorValue()>
    1b32:	e8 2e       	mov	r14, r24
    1b34:	3d d8       	rcall	.-3974   	; 0xbb0 <getRandomColorValue()>
    1b36:	f8 01       	movw	r30, r16
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	e0 0f       	add	r30, r16
    1b3e:	f1 1f       	adc	r31, r17
    1b40:	e2 5f       	subi	r30, 0xF2	; 242
    1b42:	f5 4f       	sbci	r31, 0xF5	; 245
    1b44:	80 83       	st	Z, r24
    1b46:	e1 82       	std	Z+1, r14	; 0x01
    1b48:	f2 82       	std	Z+2, r15	; 0x02
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	c2 3b       	cpi	r28, 0xB2	; 178
    1b4e:	d8 07       	cpc	r29, r24
    1b50:	59 f7       	brne	.-42     	; 0x1b28 <progOutline(unsigned int, unsigned char)+0x33a>
    1b52:	a5 cf       	rjmp	.-182    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1b54:	c8 e2       	ldi	r28, 0x28	; 40
    1b56:	d6 e0       	ldi	r29, 0x06	; 6
    1b58:	09 91       	ld	r16, Y+
    1b5a:	19 91       	ld	r17, Y+
    1b5c:	29 d8       	rcall	.-4014   	; 0xbb0 <getRandomColorValue()>
    1b5e:	f8 2e       	mov	r15, r24
    1b60:	27 d8       	rcall	.-4018   	; 0xbb0 <getRandomColorValue()>
    1b62:	e8 2e       	mov	r14, r24
    1b64:	25 d8       	rcall	.-4022   	; 0xbb0 <getRandomColorValue()>
    1b66:	f8 01       	movw	r30, r16
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	e0 0f       	add	r30, r16
    1b6e:	f1 1f       	adc	r31, r17
    1b70:	e2 5f       	subi	r30, 0xF2	; 242
    1b72:	f5 4f       	sbci	r31, 0xF5	; 245
    1b74:	80 83       	st	Z, r24
    1b76:	e1 82       	std	Z+1, r14	; 0x01
    1b78:	f2 82       	std	Z+2, r15	; 0x02
    1b7a:	86 e0       	ldi	r24, 0x06	; 6
    1b7c:	c8 36       	cpi	r28, 0x68	; 104
    1b7e:	d8 07       	cpc	r29, r24
    1b80:	59 f7       	brne	.-42     	; 0x1b58 <progOutline(unsigned int, unsigned char)+0x36a>
    1b82:	8d cf       	rjmp	.-230    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1b84:	cc ee       	ldi	r28, 0xEC	; 236
    1b86:	d5 e0       	ldi	r29, 0x05	; 5
    1b88:	09 91       	ld	r16, Y+
    1b8a:	19 91       	ld	r17, Y+
    1b8c:	11 d8       	rcall	.-4062   	; 0xbb0 <getRandomColorValue()>
    1b8e:	f8 2e       	mov	r15, r24
    1b90:	0f d8       	rcall	.-4066   	; 0xbb0 <getRandomColorValue()>
    1b92:	e8 2e       	mov	r14, r24
    1b94:	0d d8       	rcall	.-4070   	; 0xbb0 <getRandomColorValue()>
    1b96:	f8 01       	movw	r30, r16
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	e0 0f       	add	r30, r16
    1b9e:	f1 1f       	adc	r31, r17
    1ba0:	e2 5f       	subi	r30, 0xF2	; 242
    1ba2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ba4:	80 83       	st	Z, r24
    1ba6:	e1 82       	std	Z+1, r14	; 0x01
    1ba8:	f2 82       	std	Z+2, r15	; 0x02
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	c8 32       	cpi	r28, 0x28	; 40
    1bae:	d8 07       	cpc	r29, r24
    1bb0:	59 f7       	brne	.-42     	; 0x1b88 <progOutline(unsigned int, unsigned char)+0x39a>
    1bb2:	75 cf       	rjmp	.-278    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1bb4:	c6 eb       	ldi	r28, 0xB6	; 182
    1bb6:	d5 e0       	ldi	r29, 0x05	; 5
    1bb8:	09 91       	ld	r16, Y+
    1bba:	19 91       	ld	r17, Y+
    1bbc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bc0:	f8 2e       	mov	r15, r24
    1bc2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bc6:	e8 2e       	mov	r14, r24
    1bc8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bcc:	f8 01       	movw	r30, r16
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	e0 0f       	add	r30, r16
    1bd4:	f1 1f       	adc	r31, r17
    1bd6:	e2 5f       	subi	r30, 0xF2	; 242
    1bd8:	f5 4f       	sbci	r31, 0xF5	; 245
    1bda:	80 83       	st	Z, r24
    1bdc:	e1 82       	std	Z+1, r14	; 0x01
    1bde:	f2 82       	std	Z+2, r15	; 0x02
    1be0:	85 e0       	ldi	r24, 0x05	; 5
    1be2:	cc 3e       	cpi	r28, 0xEC	; 236
    1be4:	d8 07       	cpc	r29, r24
    1be6:	41 f7       	brne	.-48     	; 0x1bb8 <progOutline(unsigned int, unsigned char)+0x3ca>
    1be8:	5a cf       	rjmp	.-332    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1bea:	c2 e8       	ldi	r28, 0x82	; 130
    1bec:	d5 e0       	ldi	r29, 0x05	; 5
    1bee:	09 91       	ld	r16, Y+
    1bf0:	19 91       	ld	r17, Y+
    1bf2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bf6:	f8 2e       	mov	r15, r24
    1bf8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bfc:	e8 2e       	mov	r14, r24
    1bfe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c02:	f8 01       	movw	r30, r16
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	e0 0f       	add	r30, r16
    1c0a:	f1 1f       	adc	r31, r17
    1c0c:	e2 5f       	subi	r30, 0xF2	; 242
    1c0e:	f5 4f       	sbci	r31, 0xF5	; 245
    1c10:	80 83       	st	Z, r24
    1c12:	e1 82       	std	Z+1, r14	; 0x01
    1c14:	f2 82       	std	Z+2, r15	; 0x02
    1c16:	85 e0       	ldi	r24, 0x05	; 5
    1c18:	c6 3b       	cpi	r28, 0xB6	; 182
    1c1a:	d8 07       	cpc	r29, r24
    1c1c:	41 f7       	brne	.-48     	; 0x1bee <progOutline(unsigned int, unsigned char)+0x400>
    1c1e:	3f cf       	rjmp	.-386    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1c20:	c2 e5       	ldi	r28, 0x52	; 82
    1c22:	d5 e0       	ldi	r29, 0x05	; 5
    1c24:	09 91       	ld	r16, Y+
    1c26:	19 91       	ld	r17, Y+
    1c28:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c2c:	f8 2e       	mov	r15, r24
    1c2e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c32:	e8 2e       	mov	r14, r24
    1c34:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c38:	f8 01       	movw	r30, r16
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	e0 0f       	add	r30, r16
    1c40:	f1 1f       	adc	r31, r17
    1c42:	e2 5f       	subi	r30, 0xF2	; 242
    1c44:	f5 4f       	sbci	r31, 0xF5	; 245
    1c46:	80 83       	st	Z, r24
    1c48:	e1 82       	std	Z+1, r14	; 0x01
    1c4a:	f2 82       	std	Z+2, r15	; 0x02
    1c4c:	85 e0       	ldi	r24, 0x05	; 5
    1c4e:	c2 38       	cpi	r28, 0x82	; 130
    1c50:	d8 07       	cpc	r29, r24
    1c52:	41 f7       	brne	.-48     	; 0x1c24 <progOutline(unsigned int, unsigned char)+0x436>
    1c54:	24 cf       	rjmp	.-440    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>

00001c56 <progScrollText(String, unsigned int, int, int, unsigned char)>:
    1c56:	af 92       	push	r10
    1c58:	bf 92       	push	r11
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	7c 01       	movw	r14, r24
    1c6a:	5b 01       	movw	r10, r22
    1c6c:	6a 01       	movw	r12, r20
    1c6e:	e9 01       	movw	r28, r18
    1c70:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1c74:	81 11       	cpse	r24, r1
    1c76:	26 c0       	rjmp	.+76     	; 0x1cc4 <progScrollText(String, unsigned int, int, int, unsigned char)+0x6e>
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	8d e0       	ldi	r24, 0x0D	; 13
    1c7c:	90 e1       	ldi	r25, 0x10	; 16
    1c7e:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1c82:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
    1c86:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
    1c8a:	00 93 f9 09 	sts	0x09F9, r16	; 0x8009f9 <nextSongPart>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1c94:	d0 92 01 0a 	sts	0x0A01, r13	; 0x800a01 <millisCounterTimer+0x1>
    1c98:	c0 92 00 0a 	sts	0x0A00, r12	; 0x800a00 <millisCounterTimer>
    1c9c:	84 e1       	ldi	r24, 0x14	; 20
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1ca4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1ca8:	d7 01       	movw	r26, r14
    1caa:	14 96       	adiw	r26, 0x04	; 4
    1cac:	2d 91       	ld	r18, X+
    1cae:	3c 91       	ld	r19, X
    1cb0:	46 e0       	ldi	r20, 0x06	; 6
    1cb2:	42 9f       	mul	r20, r18
    1cb4:	c0 01       	movw	r24, r0
    1cb6:	43 9f       	mul	r20, r19
    1cb8:	90 0d       	add	r25, r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <progScrollEnde+0x1>
    1cc0:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <progScrollEnde>
    1cc4:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    1cc8:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    1ccc:	8c 15       	cp	r24, r12
    1cce:	9d 05       	cpc	r25, r13
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <progScrollText(String, unsigned int, int, int, unsigned char)+0x7e>
    1cd2:	68 c0       	rjmp	.+208    	; 0x1da4 <progScrollText(String, unsigned int, int, int, unsigned char)+0x14e>
    1cd4:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    1cd8:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    1cdc:	85 e0       	ldi	r24, 0x05	; 5
    1cde:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <FastLED>
    1ce2:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1ce6:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1cea:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1cee:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1cf2:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	16 8a       	std	Z+22, r1	; 0x16
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <Adafruit_GFX::setTextSize(unsigned char)>
    1d00:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1d04:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	00 8c       	ldd	r0, Z+24	; 0x18
    1d10:	f1 8d       	ldd	r31, Z+25	; 0x19
    1d12:	e0 2d       	mov	r30, r0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	09 95       	icall
    1d18:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1d1c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1d26:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1d2a:	20 91 ef 09 	lds	r18, 0x09EF	; 0x8009ef <progScrollEnde>
    1d2e:	30 91 f0 09 	lds	r19, 0x09F0	; 0x8009f0 <progScrollEnde+0x1>
    1d32:	31 95       	neg	r19
    1d34:	21 95       	neg	r18
    1d36:	31 09       	sbc	r19, r1
    1d38:	82 17       	cp	r24, r18
    1d3a:	93 07       	cpc	r25, r19
    1d3c:	34 f4       	brge	.+12     	; 0x1d4a <progScrollText(String, unsigned int, int, int, unsigned char)+0xf4>
    1d3e:	84 e1       	ldi	r24, 0x14	; 20
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1d46:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1d4a:	0e 94 7c 3f 	call	0x7ef8	; 0x7ef8 <yield>
    1d4e:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1d52:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1d56:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1d5a:	e0 91 fc 0f 	lds	r30, 0x0FFC	; 0x800ffc <matrix>
    1d5e:	f0 91 fd 0f 	lds	r31, 0x0FFD	; 0x800ffd <matrix+0x1>
    1d62:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1d66:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1d6a:	94 87       	std	Z+12, r25	; 0x0c
    1d6c:	83 87       	std	Z+11, r24	; 0x0b
    1d6e:	8d e0       	ldi	r24, 0x0D	; 13
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	96 87       	std	Z+14, r25	; 0x0e
    1d74:	85 87       	std	Z+13, r24	; 0x0d
    1d76:	d2 8b       	std	Z+18, r29	; 0x12
    1d78:	c1 8b       	std	Z+17, r28	; 0x11
    1d7a:	d0 8b       	std	Z+16, r29	; 0x10
    1d7c:	c7 87       	std	Z+15, r28	; 0x0f
    1d7e:	b7 01       	movw	r22, r14
    1d80:	cf 01       	movw	r24, r30
    1d82:	0e 94 cd 3b 	call	0x779a	; 0x779a <Print::print(String const&)>
    1d86:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1d8a:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	bf 90       	pop	r11
    1d9e:	af 90       	pop	r10
    1da0:	0c 94 18 2d 	jmp	0x5a30	; 0x5a30 <FastLED_NeoMatrix::show()>
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	cf 90       	pop	r12
    1db2:	bf 90       	pop	r11
    1db4:	af 90       	pop	r10
    1db6:	08 95       	ret

00001db8 <progShowROOTS(unsigned int, unsigned char)>:
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	8c 01       	movw	r16, r24
    1dc6:	c6 2f       	mov	r28, r22
    1dc8:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1dcc:	81 11       	cpse	r24, r1
    1dce:	0e c0       	rjmp	.+28     	; 0x1dec <progShowROOTS(unsigned int, unsigned char)+0x34>
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	8d e0       	ldi	r24, 0x0D	; 13
    1dd4:	90 e1       	ldi	r25, 0x10	; 16
    1dd6:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1dda:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1dde:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1de2:	c0 93 f9 09 	sts	0x09F9, r28	; 0x8009f9 <nextSongPart>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1dec:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    1df0:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    1df4:	84 3f       	cpi	r24, 0xF4	; 244
    1df6:	91 40       	sbci	r25, 0x01	; 1
    1df8:	08 f4       	brcc	.+2      	; 0x1dfc <progShowROOTS(unsigned int, unsigned char)+0x44>
    1dfa:	b2 c0       	rjmp	.+356    	; 0x1f60 <progShowROOTS(unsigned int, unsigned char)+0x1a8>
    1dfc:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    1e00:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    1e04:	8f e0       	ldi	r24, 0x0F	; 15
    1e06:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <FastLED>
    1e0a:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1e0e:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1e12:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1e16:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1e1a:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	56 96       	adiw	r26, 0x16	; 22
    1e22:	1c 92       	st	X, r1
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <Adafruit_GFX::setTextSize(unsigned char)>
    1e2a:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1e2e:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1e32:	dc 01       	movw	r26, r24
    1e34:	ed 91       	ld	r30, X+
    1e36:	fc 91       	ld	r31, X
    1e38:	00 8c       	ldd	r0, Z+24	; 0x18
    1e3a:	f1 8d       	ldd	r31, Z+25	; 0x19
    1e3c:	e0 2d       	mov	r30, r0
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	09 95       	icall
    1e42:	0e 94 7c 3f 	call	0x7ef8	; 0x7ef8 <yield>
    1e46:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1e4a:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1e4e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1e52:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    1e56:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1e5a:	1c 86       	std	Y+12, r1	; 0x0c
    1e5c:	1b 86       	std	Y+11, r1	; 0x0b
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 87       	std	Y+14, r25	; 0x0e
    1e64:	8d 87       	std	Y+13, r24	; 0x0d
    1e66:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1e6a:	9a 8b       	std	Y+18, r25	; 0x12
    1e6c:	89 8b       	std	Y+17, r24	; 0x11
    1e6e:	98 8b       	std	Y+16, r25	; 0x10
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
    1e72:	69 e1       	ldi	r22, 0x19	; 25
    1e74:	71 e0       	ldi	r23, 0x01	; 1
    1e76:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1e7a:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1e7e:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1e82:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    1e86:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1e8a:	1c 86       	std	Y+12, r1	; 0x0c
    1e8c:	1b 86       	std	Y+11, r1	; 0x0b
    1e8e:	88 e0       	ldi	r24, 0x08	; 8
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9e 87       	std	Y+14, r25	; 0x0e
    1e94:	8d 87       	std	Y+13, r24	; 0x0d
    1e96:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1e9a:	9a 8b       	std	Y+18, r25	; 0x12
    1e9c:	89 8b       	std	Y+17, r24	; 0x11
    1e9e:	98 8b       	std	Y+16, r25	; 0x10
    1ea0:	8f 87       	std	Y+15, r24	; 0x0f
    1ea2:	6b e1       	ldi	r22, 0x1B	; 27
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1eaa:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1eae:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1eb2:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    1eb6:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1eba:	84 e0       	ldi	r24, 0x04	; 4
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 87       	std	Y+12, r25	; 0x0c
    1ec0:	8b 87       	std	Y+11, r24	; 0x0b
    1ec2:	0d e0       	ldi	r16, 0x0D	; 13
    1ec4:	10 e0       	ldi	r17, 0x00	; 0
    1ec6:	1e 87       	std	Y+14, r17	; 0x0e
    1ec8:	0d 87       	std	Y+13, r16	; 0x0d
    1eca:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1ece:	9a 8b       	std	Y+18, r25	; 0x12
    1ed0:	89 8b       	std	Y+17, r24	; 0x11
    1ed2:	98 8b       	std	Y+16, r25	; 0x10
    1ed4:	8f 87       	std	Y+15, r24	; 0x0f
    1ed6:	6b e1       	ldi	r22, 0x1B	; 27
    1ed8:	71 e0       	ldi	r23, 0x01	; 1
    1eda:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1ede:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1ee2:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1ee6:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    1eea:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1eee:	89 e0       	ldi	r24, 0x09	; 9
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9c 87       	std	Y+12, r25	; 0x0c
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	8e e0       	ldi	r24, 0x0E	; 14
    1ef8:	e8 2e       	mov	r14, r24
    1efa:	f1 2c       	mov	r15, r1
    1efc:	fe 86       	std	Y+14, r15	; 0x0e
    1efe:	ed 86       	std	Y+13, r14	; 0x0d
    1f00:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1f04:	9a 8b       	std	Y+18, r25	; 0x12
    1f06:	89 8b       	std	Y+17, r24	; 0x11
    1f08:	98 8b       	std	Y+16, r25	; 0x10
    1f0a:	8f 87       	std	Y+15, r24	; 0x0f
    1f0c:	6d e1       	ldi	r22, 0x1D	; 29
    1f0e:	71 e0       	ldi	r23, 0x01	; 1
    1f10:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1f14:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1f18:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1f1c:	c0 91 fc 0f 	lds	r28, 0x0FFC	; 0x800ffc <matrix>
    1f20:	d0 91 fd 0f 	lds	r29, 0x0FFD	; 0x800ffd <matrix+0x1>
    1f24:	fc 86       	std	Y+12, r15	; 0x0c
    1f26:	eb 86       	std	Y+11, r14	; 0x0b
    1f28:	1e 87       	std	Y+14, r17	; 0x0e
    1f2a:	0d 87       	std	Y+13, r16	; 0x0d
    1f2c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1f30:	9a 8b       	std	Y+18, r25	; 0x12
    1f32:	89 8b       	std	Y+17, r24	; 0x11
    1f34:	98 8b       	std	Y+16, r25	; 0x10
    1f36:	8f 87       	std	Y+15, r24	; 0x0f
    1f38:	6b e4       	ldi	r22, 0x4B	; 75
    1f3a:	71 e0       	ldi	r23, 0x01	; 1
    1f3c:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1f40:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1f44:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1f48:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1f4c:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	0c 94 18 2d 	jmp	0x5a30	; 0x5a30 <FastLED_NeoMatrix::show()>
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	08 95       	ret

00001f6e <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    1f6e:	8f 92       	push	r8
    1f70:	9f 92       	push	r9
    1f72:	af 92       	push	r10
    1f74:	bf 92       	push	r11
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	ec 01       	movw	r28, r24
    1f86:	5b 01       	movw	r10, r22
    1f88:	6a 01       	movw	r12, r20
    1f8a:	49 01       	movw	r8, r18
    1f8c:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1f90:	81 11       	cpse	r24, r1
    1f92:	16 c0       	rjmp	.+44     	; 0x1fc0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    1f94:	61 e0       	ldi	r22, 0x01	; 1
    1f96:	8d e0       	ldi	r24, 0x0D	; 13
    1f98:	90 e1       	ldi	r25, 0x10	; 16
    1f9a:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    1f9e:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1fa2:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1fa6:	e0 92 f9 09 	sts	0x09F9, r14	; 0x8009f9 <nextSongPart>
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    1fb0:	10 92 b4 09 	sts	0x09B4, r1	; 0x8009b4 <zaehlerWortArray+0x1>
    1fb4:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <zaehlerWortArray>
    1fb8:	d0 92 01 0a 	sts	0x0A01, r13	; 0x800a01 <millisCounterTimer+0x1>
    1fbc:	c0 92 00 0a 	sts	0x0A00, r12	; 0x800a00 <millisCounterTimer>
    1fc0:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    1fc4:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    1fc8:	8c 15       	cp	r24, r12
    1fca:	9d 05       	cpc	r25, r13
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    1fce:	5b c0       	rjmp	.+182    	; 0x2086 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1fd0:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    1fd4:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    1fd8:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <zaehlerWortArray>
    1fdc:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <zaehlerWortArray+0x1>
    1fe0:	a8 16       	cp	r10, r24
    1fe2:	b9 06       	cpc	r11, r25
    1fe4:	0c f4       	brge	.+2      	; 0x1fe8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    1fe6:	4f c0       	rjmp	.+158    	; 0x2086 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1fe8:	85 e0       	ldi	r24, 0x05	; 5
    1fea:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <FastLED>
    1fee:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1ff2:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    1ff6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1ffa:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    1ffe:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    2002:	dc 01       	movw	r26, r24
    2004:	56 96       	adiw	r26, 0x16	; 22
    2006:	1c 92       	st	X, r1
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	0e 94 f9 2c 	call	0x59f2	; 0x59f2 <Adafruit_GFX::setTextSize(unsigned char)>
    200e:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    2012:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    2016:	dc 01       	movw	r26, r24
    2018:	ed 91       	ld	r30, X+
    201a:	fc 91       	ld	r31, X
    201c:	00 8c       	ldd	r0, Z+24	; 0x18
    201e:	f1 8d       	ldd	r31, Z+25	; 0x19
    2020:	e0 2d       	mov	r30, r0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	09 95       	icall
    2026:	0e 94 7c 3f 	call	0x7ef8	; 0x7ef8 <yield>
    202a:	e0 91 fc 0f 	lds	r30, 0x0FFC	; 0x800ffc <matrix>
    202e:	f0 91 fd 0f 	lds	r31, 0x0FFD	; 0x800ffd <matrix+0x1>
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	94 87       	std	Z+12, r25	; 0x0c
    2038:	83 87       	std	Z+11, r24	; 0x0b
    203a:	8d e0       	ldi	r24, 0x0D	; 13
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	96 87       	std	Z+14, r25	; 0x0e
    2040:	85 87       	std	Z+13, r24	; 0x0d
    2042:	12 8b       	std	Z+18, r17	; 0x12
    2044:	01 8b       	std	Z+17, r16	; 0x11
    2046:	10 8b       	std	Z+16, r17	; 0x10
    2048:	07 87       	std	Z+15, r16	; 0x0f
    204a:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <zaehlerWortArray>
    204e:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <zaehlerWortArray+0x1>
    2052:	27 e0       	ldi	r18, 0x07	; 7
    2054:	28 9f       	mul	r18, r24
    2056:	b0 01       	movw	r22, r0
    2058:	29 9f       	mul	r18, r25
    205a:	70 0d       	add	r23, r0
    205c:	11 24       	eor	r1, r1
    205e:	6c 0f       	add	r22, r28
    2060:	7d 1f       	adc	r23, r29
    2062:	cf 01       	movw	r24, r30
    2064:	0e 94 cd 3b 	call	0x779a	; 0x779a <Print::print(String const&)>
    2068:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    206c:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    2070:	0e 94 18 2d 	call	0x5a30	; 0x5a30 <FastLED_NeoMatrix::show()>
    2074:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <zaehlerWortArray>
    2078:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <zaehlerWortArray+0x1>
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	90 93 b4 09 	sts	0x09B4, r25	; 0x8009b4 <zaehlerWortArray+0x1>
    2082:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <zaehlerWortArray>
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ef 90       	pop	r14
    2090:	df 90       	pop	r13
    2092:	cf 90       	pop	r12
    2094:	bf 90       	pop	r11
    2096:	af 90       	pop	r10
    2098:	9f 90       	pop	r9
    209a:	8f 90       	pop	r8
    209c:	08 95       	ret

0000209e <SetupTotallyRandomPalette()>:
}

// This function fills the palette with totally random colors.
void SetupTotallyRandomPalette()
    209e:	bf 92       	push	r11
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <SetupTotallyRandomPalette()+0x14>
    20b2:	1f 92       	push	r1
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	0c eb       	ldi	r16, 0xBC	; 188
    20ba:	19 e0       	ldi	r17, 0x09	; 9
    20bc:	8c ee       	ldi	r24, 0xEC	; 236
    20be:	e8 2e       	mov	r14, r24
    20c0:	89 e0       	ldi	r24, 0x09	; 9
    20c2:	f8 2e       	mov	r15, r24
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    20c4:	95 e0       	ldi	r25, 0x05	; 5
    20c6:	c9 2e       	mov	r12, r25
    20c8:	98 e0       	ldi	r25, 0x08	; 8
    20ca:	d9 2e       	mov	r13, r25
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    20cc:	bb 24       	eor	r11, r11
    20ce:	ba 94       	dec	r11
    20d0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    20d4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    20d8:	2c 9d       	mul	r18, r12
    20da:	c0 01       	movw	r24, r0
    20dc:	2d 9d       	mul	r18, r13
    20de:	90 0d       	add	r25, r0
    20e0:	3c 9d       	mul	r19, r12
    20e2:	90 0d       	add	r25, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	87 5e       	subi	r24, 0xE7	; 231
    20e8:	99 4c       	sbci	r25, 0xC9	; 201
    20ea:	8c 9d       	mul	r24, r12
    20ec:	90 01       	movw	r18, r0
    20ee:	8d 9d       	mul	r24, r13
    20f0:	30 0d       	add	r19, r0
    20f2:	9c 9d       	mul	r25, r12
    20f4:	30 0d       	add	r19, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	27 5e       	subi	r18, 0xE7	; 231
    20fa:	39 4c       	sbci	r19, 0xC9	; 201
    20fc:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    2100:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2104:	23 0f       	add	r18, r19
    2106:	29 83       	std	Y+1, r18	; 0x01
    2108:	ba 82       	std	Y+2, r11	; 0x02
    210a:	89 0f       	add	r24, r25
    210c:	8b 83       	std	Y+3, r24	; 0x03
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    210e:	b8 01       	movw	r22, r16
    2110:	ce 01       	movw	r24, r28
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	0e 94 28 33 	call	0x6650	; 0x6650 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2118:	0d 5f       	subi	r16, 0xFD	; 253
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
{
    211c:	e0 16       	cp	r14, r16
    211e:	f1 06       	cpc	r15, r17
    2120:	b9 f6       	brne	.-82     	; 0x20d0 <SetupTotallyRandomPalette()+0x32>
	for (int i = 0; i < 16; i++) {
		currentPalette[i] = CHSV(random8(), 255, random8());
	}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	08 95       	ret

0000213c <SetupBlackAndWhiteStripedPalette()>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 d0       	rcall	.+0      	; 0x2142 <SetupBlackAndWhiteStripedPalette()+0x6>
    2142:	1f 92       	push	r1
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	1b 82       	std	Y+3, r1	; 0x03
    214e:	ae 01       	movw	r20, r28
    2150:	4f 5f       	subi	r20, 0xFF	; 255
    2152:	5f 4f       	sbci	r21, 0xFF	; 255
    2154:	60 e1       	ldi	r22, 0x10	; 16
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	8c eb       	ldi	r24, 0xBC	; 188
    215a:	99 e0       	ldi	r25, 0x09	; 9
    215c:	0e 94 07 30 	call	0x600e	; 0x600e <fill_solid(CRGB*, int, CRGB const&)>
    2160:	ec eb       	ldi	r30, 0xBC	; 188
    2162:	f9 e0       	ldi	r31, 0x09	; 9
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	80 83       	st	Z, r24
    2168:	81 83       	std	Z+1, r24	; 0x01
    216a:	82 83       	std	Z+2, r24	; 0x02
    216c:	84 87       	std	Z+12, r24	; 0x0c
    216e:	85 87       	std	Z+13, r24	; 0x0d
    2170:	86 87       	std	Z+14, r24	; 0x0e
    2172:	80 8f       	std	Z+24, r24	; 0x18
    2174:	81 8f       	std	Z+25, r24	; 0x19
    2176:	82 8f       	std	Z+26, r24	; 0x1a
    2178:	84 a3       	std	Z+36, r24	; 0x24
    217a:	85 a3       	std	Z+37, r24	; 0x25
    217c:	86 a3       	std	Z+38, r24	; 0x26
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <SetupPurpleAndGreenPalette()>:
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	e6 97       	sbiw	r28, 0x36	; 54
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	80 ec       	ldi	r24, 0xC0	; 192
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	1f ef       	ldi	r17, 0xFF	; 255
    21a6:	1a 83       	std	Y+2, r17	; 0x02
    21a8:	1b 83       	std	Y+3, r17	; 0x03
    21aa:	be 01       	movw	r22, r28
    21ac:	6c 5c       	subi	r22, 0xCC	; 204
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	ce 01       	movw	r24, r28
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	0e 94 28 33 	call	0x6650	; 0x6650 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    21b8:	80 e6       	ldi	r24, 0x60	; 96
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	1a 83       	std	Y+2, r17	; 0x02
    21be:	1b 83       	std	Y+3, r17	; 0x03
    21c0:	be 01       	movw	r22, r28
    21c2:	6f 5c       	subi	r22, 0xCF	; 207
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	ce 01       	movw	r24, r28
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	0e 94 28 33 	call	0x6650	; 0x6650 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    21ce:	59 a9       	ldd	r21, Y+49	; 0x31
    21d0:	59 83       	std	Y+1, r21	; 0x01
    21d2:	4a a9       	ldd	r20, Y+50	; 0x32
    21d4:	4a 83       	std	Y+2, r20	; 0x02
    21d6:	3b a9       	ldd	r19, Y+51	; 0x33
    21d8:	3b 83       	std	Y+3, r19	; 0x03
    21da:	5c 83       	std	Y+4, r21	; 0x04
    21dc:	4d 83       	std	Y+5, r20	; 0x05
    21de:	3e 83       	std	Y+6, r19	; 0x06
    21e0:	1f 82       	std	Y+7, r1	; 0x07
    21e2:	18 86       	std	Y+8, r1	; 0x08
    21e4:	19 86       	std	Y+9, r1	; 0x09
    21e6:	1a 86       	std	Y+10, r1	; 0x0a
    21e8:	1b 86       	std	Y+11, r1	; 0x0b
    21ea:	1c 86       	std	Y+12, r1	; 0x0c
    21ec:	2c a9       	ldd	r18, Y+52	; 0x34
    21ee:	2d 87       	std	Y+13, r18	; 0x0d
    21f0:	9d a9       	ldd	r25, Y+53	; 0x35
    21f2:	9e 87       	std	Y+14, r25	; 0x0e
    21f4:	8e a9       	ldd	r24, Y+54	; 0x36
    21f6:	8f 87       	std	Y+15, r24	; 0x0f
    21f8:	28 8b       	std	Y+16, r18	; 0x10
    21fa:	99 8b       	std	Y+17, r25	; 0x11
    21fc:	8a 8b       	std	Y+18, r24	; 0x12
    21fe:	1b 8a       	std	Y+19, r1	; 0x13
    2200:	1c 8a       	std	Y+20, r1	; 0x14
    2202:	1d 8a       	std	Y+21, r1	; 0x15
    2204:	1e 8a       	std	Y+22, r1	; 0x16
    2206:	1f 8a       	std	Y+23, r1	; 0x17
    2208:	18 8e       	std	Y+24, r1	; 0x18
    220a:	59 8f       	std	Y+25, r21	; 0x19
    220c:	4a 8f       	std	Y+26, r20	; 0x1a
    220e:	3b 8f       	std	Y+27, r19	; 0x1b
    2210:	5c 8f       	std	Y+28, r21	; 0x1c
    2212:	4d 8f       	std	Y+29, r20	; 0x1d
    2214:	3e 8f       	std	Y+30, r19	; 0x1e
    2216:	1f 8e       	std	Y+31, r1	; 0x1f
    2218:	18 a2       	std	Y+32, r1	; 0x20
    221a:	19 a2       	std	Y+33, r1	; 0x21
    221c:	1a a2       	std	Y+34, r1	; 0x22
    221e:	1b a2       	std	Y+35, r1	; 0x23
    2220:	1c a2       	std	Y+36, r1	; 0x24
    2222:	2d a3       	std	Y+37, r18	; 0x25
    2224:	9e a3       	std	Y+38, r25	; 0x26
    2226:	8f a3       	std	Y+39, r24	; 0x27
    2228:	28 a7       	std	Y+40, r18	; 0x28
    222a:	99 a7       	std	Y+41, r25	; 0x29
    222c:	8a a7       	std	Y+42, r24	; 0x2a
    222e:	1b a6       	std	Y+43, r1	; 0x2b
    2230:	1c a6       	std	Y+44, r1	; 0x2c
    2232:	1d a6       	std	Y+45, r1	; 0x2d
    2234:	1e a6       	std	Y+46, r1	; 0x2e
    2236:	1f a6       	std	Y+47, r1	; 0x2f
    2238:	18 aa       	std	Y+48, r1	; 0x30
    223a:	40 e3       	ldi	r20, 0x30	; 48
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	be 01       	movw	r22, r28
    2240:	6f 5f       	subi	r22, 0xFF	; 255
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8c eb       	ldi	r24, 0xBC	; 188
    2246:	99 e0       	ldi	r25, 0x09	; 9
    2248:	0e 94 f4 33 	call	0x67e8	; 0x67e8 <memmove8>
    224c:	e6 96       	adiw	r28, 0x36	; 54
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	08 95       	ret

00002260 <FillLEDsFromPaletteColors(unsigned char)>:
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	00 d0       	rcall	.+0      	; 0x2270 <FillLEDsFromPaletteColors(unsigned char)+0x10>
    2270:	1f 92       	push	r1
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	d8 2e       	mov	r13, r24
    2278:	8e e0       	ldi	r24, 0x0E	; 14
    227a:	e8 2e       	mov	r14, r24
    227c:	8a e0       	ldi	r24, 0x0A	; 10
    227e:	f8 2e       	mov	r15, r24
    2280:	00 91 ba 09 	lds	r16, 0x09BA	; 0x8009ba <currentBlending>
    2284:	10 91 bb 09 	lds	r17, 0x09BB	; 0x8009bb <currentBlending+0x1>
    2288:	2f ef       	ldi	r18, 0xFF	; 255
    228a:	4d 2d       	mov	r20, r13
    228c:	6c eb       	ldi	r22, 0xBC	; 188
    228e:	79 e0       	ldi	r23, 0x09	; 9
    2290:	ce 01       	movw	r24, r28
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	0e 94 1c 30 	call	0x6038	; 0x6038 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	f7 01       	movw	r30, r14
    229c:	80 83       	st	Z, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	81 83       	std	Z+1, r24	; 0x01
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	82 83       	std	Z+2, r24	; 0x02
    22a6:	f3 e0       	ldi	r31, 0x03	; 3
    22a8:	df 0e       	add	r13, r31
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	e8 0e       	add	r14, r24
    22ae:	f1 1c       	adc	r15, r1
    22b0:	e0 e5       	ldi	r30, 0x50	; 80
    22b2:	ee 16       	cp	r14, r30
    22b4:	ed e0       	ldi	r30, 0x0D	; 13
    22b6:	fe 06       	cpc	r15, r30
    22b8:	19 f7       	brne	.-58     	; 0x2280 <FillLEDsFromPaletteColors(unsigned char)+0x20>
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	ff 90       	pop	r15
    22ca:	ef 90       	pop	r14
    22cc:	df 90       	pop	r13
    22ce:	08 95       	ret

000022d0 <progPalette(unsigned int, unsigned char, unsigned char)>:
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	8c 01       	movw	r16, r24
    22da:	c6 2f       	mov	r28, r22
    22dc:	d4 2f       	mov	r29, r20
    22de:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    22e2:	81 11       	cpse	r24, r1
    22e4:	43 c0       	rjmp	.+134    	; 0x236c <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	8d e0       	ldi	r24, 0x0D	; 13
    22ea:	90 e1       	ldi	r25, 0x10	; 16
    22ec:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    22f0:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    22f4:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    22f8:	d0 93 f9 09 	sts	0x09F9, r29	; 0x8009f9 <nextSongPart>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    2302:	cc 30       	cpi	r28, 0x0C	; 12
    2304:	08 f0       	brcs	.+2      	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    2306:	32 c0       	rjmp	.+100    	; 0x236c <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2308:	ec 2f       	mov	r30, r28
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	e6 57       	subi	r30, 0x76	; 118
    230e:	fe 4e       	sbci	r31, 0xEE	; 238
    2310:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <__tablejump2__>
    2314:	96 11       	cpse	r25, r6
    2316:	9d 11       	cpse	r25, r13
    2318:	a4 11       	cpse	r26, r4
    231a:	a7 11       	cpse	r26, r7
    231c:	af 11       	cpse	r26, r15
    231e:	b1 11       	cpse	r27, r1
    2320:	ce 11       	cpse	r28, r14
    2322:	d0 11       	cpse	r29, r0
    2324:	d3 11       	cpse	r29, r3
    2326:	d6 11       	cpse	r29, r6
    2328:	d9 11       	cpse	r29, r9
    232a:	dc 11       	cpse	r29, r12
    232c:	68 eb       	ldi	r22, 0xB8	; 184
    232e:	76 e0       	ldi	r23, 0x06	; 6
    2330:	8c eb       	ldi	r24, 0xBC	; 188
    2332:	99 e0       	ldi	r25, 0x09	; 9
    2334:	0e 94 ac 05 	call	0xb58	; 0xb58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2338:	0b c0       	rjmp	.+22     	; 0x2350 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    233a:	68 e7       	ldi	r22, 0x78	; 120
    233c:	76 e0       	ldi	r23, 0x06	; 6
    233e:	8c eb       	ldi	r24, 0xBC	; 188
    2340:	99 e0       	ldi	r25, 0x09	; 9
    2342:	0e 94 ac 05 	call	0xb58	; 0xb58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2346:	0e c0       	rjmp	.+28     	; 0x2364 <progPalette(unsigned int, unsigned char, unsigned char)+0x94>
    2348:	68 e7       	ldi	r22, 0x78	; 120
    234a:	76 e0       	ldi	r23, 0x06	; 6
    234c:	f1 cf       	rjmp	.-30     	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    234e:	1d df       	rcall	.-454    	; 0x218a <SetupPurpleAndGreenPalette()>
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	90 93 bb 09 	sts	0x09BB, r25	; 0x8009bb <currentBlending+0x1>
    2358:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <currentBlending>
    235c:	07 c0       	rjmp	.+14     	; 0x236c <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    235e:	9f de       	rcall	.-706    	; 0x209e <SetupTotallyRandomPalette()>
    2360:	f7 cf       	rjmp	.-18     	; 0x2350 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    2362:	ec de       	rcall	.-552    	; 0x213c <SetupBlackAndWhiteStripedPalette()>
    2364:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <currentBlending+0x1>
    2368:	10 92 ba 09 	sts	0x09BA, r1	; 0x8009ba <currentBlending>
    236c:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    2370:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	89 3e       	cpi	r24, 0xE9	; 233
    2378:	23 e0       	ldi	r18, 0x03	; 3
    237a:	92 07       	cpc	r25, r18
    237c:	04 f5       	brge	.+64     	; 0x23be <progPalette(unsigned int, unsigned char, unsigned char)+0xee>
    237e:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    2382:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    2386:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    238a:	6a df       	rcall	.-300    	; 0x2260 <FillLEDsFromPaletteColors(unsigned char)>
    238c:	8d e0       	ldi	r24, 0x0D	; 13
    238e:	90 e1       	ldi	r25, 0x10	; 16
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <CFastLED::show()>
    239c:	cf de       	rcall	.-610    	; 0x213c <SetupBlackAndWhiteStripedPalette()>
    239e:	d8 cf       	rjmp	.-80     	; 0x2350 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    23a0:	68 ef       	ldi	r22, 0xF8	; 248
    23a2:	76 e0       	ldi	r23, 0x06	; 6
    23a4:	c5 cf       	rjmp	.-118    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23a6:	68 e3       	ldi	r22, 0x38	; 56
    23a8:	76 e0       	ldi	r23, 0x06	; 6
    23aa:	c2 cf       	rjmp	.-124    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23ac:	62 e1       	ldi	r22, 0x12	; 18
    23ae:	75 e0       	ldi	r23, 0x05	; 5
    23b0:	c6 cf       	rjmp	.-116    	; 0x233e <progPalette(unsigned int, unsigned char, unsigned char)+0x6e>
    23b2:	62 e1       	ldi	r22, 0x12	; 18
    23b4:	75 e0       	ldi	r23, 0x05	; 5
    23b6:	bc cf       	rjmp	.-136    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23b8:	68 e9       	ldi	r22, 0x98	; 152
    23ba:	70 e0       	ldi	r23, 0x00	; 0
    23bc:	b9 cf       	rjmp	.-142    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23be:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <zaehler+0x1>
    23c2:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <zaehler>
    23c6:	df cf       	rjmp	.-66     	; 0x2386 <progPalette(unsigned int, unsigned char, unsigned char)+0xb6>

000023c8 <getMatrixColor(int)>:
    23c8:	dc 01       	movw	r26, r24
    23ca:	60 31       	cpi	r22, 0x10	; 16
    23cc:	71 05       	cpc	r23, r1
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <getMatrixColor(int)+0xa>
    23d0:	52 c0       	rjmp	.+164    	; 0x2476 <getMatrixColor(int)+0xae>
    23d2:	fb 01       	movw	r30, r22
    23d4:	e2 51       	subi	r30, 0x12	; 18
    23d6:	fe 4e       	sbci	r31, 0xEE	; 238
    23d8:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <__tablejump2__>
    23dc:	3b 12       	cpse	r3, r27
    23de:	fe 11       	cpse	r31, r14
    23e0:	fe 11       	cpse	r31, r14
    23e2:	09 12       	cpse	r0, r25
    23e4:	0d 12       	cpse	r0, r29
    23e6:	11 12       	cpse	r1, r17
    23e8:	15 12       	cpse	r1, r21
    23ea:	19 12       	cpse	r1, r25
    23ec:	1d 12       	cpse	r1, r29
    23ee:	21 12       	cpse	r2, r17
    23f0:	25 12       	cpse	r2, r21
    23f2:	29 12       	cpse	r2, r25
    23f4:	2d 12       	cpse	r2, r29
    23f6:	2f 12       	cpse	r2, r31
    23f8:	33 12       	cpse	r3, r19
    23fa:	35 12       	cpse	r3, r21
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	8c 93       	st	X, r24
    2400:	99 e1       	ldi	r25, 0x19	; 25
    2402:	11 96       	adiw	r26, 0x01	; 1
    2404:	9c 93       	st	X, r25
    2406:	11 97       	sbiw	r26, 0x01	; 1
    2408:	12 96       	adiw	r26, 0x02	; 2
    240a:	8c 93       	st	X, r24
    240c:	12 97       	sbiw	r26, 0x02	; 2
    240e:	cd 01       	movw	r24, r26
    2410:	08 95       	ret
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	8c 93       	st	X, r24
    2416:	98 e2       	ldi	r25, 0x28	; 40
    2418:	f4 cf       	rjmp	.-24     	; 0x2402 <getMatrixColor(int)+0x3a>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	8c 93       	st	X, r24
    241e:	90 e5       	ldi	r25, 0x50	; 80
    2420:	f0 cf       	rjmp	.-32     	; 0x2402 <getMatrixColor(int)+0x3a>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	8c 93       	st	X, r24
    2426:	98 e7       	ldi	r25, 0x78	; 120
    2428:	ec cf       	rjmp	.-40     	; 0x2402 <getMatrixColor(int)+0x3a>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	8c 93       	st	X, r24
    242e:	96 e9       	ldi	r25, 0x96	; 150
    2430:	e8 cf       	rjmp	.-48     	; 0x2402 <getMatrixColor(int)+0x3a>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	8c 93       	st	X, r24
    2436:	98 ec       	ldi	r25, 0xC8	; 200
    2438:	e4 cf       	rjmp	.-56     	; 0x2402 <getMatrixColor(int)+0x3a>
    243a:	85 e0       	ldi	r24, 0x05	; 5
    243c:	8c 93       	st	X, r24
    243e:	9f ef       	ldi	r25, 0xFF	; 255
    2440:	e0 cf       	rjmp	.-64     	; 0x2402 <getMatrixColor(int)+0x3a>
    2442:	8a e0       	ldi	r24, 0x0A	; 10
    2444:	8c 93       	st	X, r24
    2446:	94 eb       	ldi	r25, 0xB4	; 180
    2448:	dc cf       	rjmp	.-72     	; 0x2402 <getMatrixColor(int)+0x3a>
    244a:	8a e0       	ldi	r24, 0x0A	; 10
    244c:	8c 93       	st	X, r24
    244e:	90 ea       	ldi	r25, 0xA0	; 160
    2450:	d8 cf       	rjmp	.-80     	; 0x2402 <getMatrixColor(int)+0x3a>
    2452:	84 e1       	ldi	r24, 0x14	; 20
    2454:	8c 93       	st	X, r24
    2456:	9c e8       	ldi	r25, 0x8C	; 140
    2458:	d4 cf       	rjmp	.-88     	; 0x2402 <getMatrixColor(int)+0x3a>
    245a:	8e e1       	ldi	r24, 0x1E	; 30
    245c:	e3 cf       	rjmp	.-58     	; 0x2424 <getMatrixColor(int)+0x5c>
    245e:	82 e3       	ldi	r24, 0x32	; 50
    2460:	8c 93       	st	X, r24
    2462:	94 e6       	ldi	r25, 0x64	; 100
    2464:	ce cf       	rjmp	.-100    	; 0x2402 <getMatrixColor(int)+0x3a>
    2466:	84 e6       	ldi	r24, 0x64	; 100
    2468:	e1 cf       	rjmp	.-62     	; 0x242c <getMatrixColor(int)+0x64>
    246a:	84 eb       	ldi	r24, 0xB4	; 180
    246c:	8c 93       	st	X, r24
    246e:	11 96       	adiw	r26, 0x01	; 1
    2470:	8c 93       	st	X, r24
    2472:	11 97       	sbiw	r26, 0x01	; 1
    2474:	c9 cf       	rjmp	.-110    	; 0x2408 <getMatrixColor(int)+0x40>
    2476:	1c 92       	st	X, r1
    2478:	11 96       	adiw	r26, 0x01	; 1
    247a:	1c 92       	st	X, r1
    247c:	11 97       	sbiw	r26, 0x01	; 1
    247e:	12 96       	adiw	r26, 0x02	; 2
    2480:	1c 92       	st	X, r1
    2482:	12 97       	sbiw	r26, 0x02	; 2
    2484:	c4 cf       	rjmp	.-120    	; 0x240e <getMatrixColor(int)+0x46>

00002486 <progMatrix(unsigned int, unsigned char)>:
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	00 d0       	rcall	.+0      	; 0x2498 <progMatrix(unsigned int, unsigned char)+0x12>
    2498:	1f 92       	push	r1
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	7c 01       	movw	r14, r24
    24a0:	16 2f       	mov	r17, r22
    24a2:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    24a6:	81 11       	cpse	r24, r1
    24a8:	18 c0       	rjmp	.+48     	; 0x24da <progMatrix(unsigned int, unsigned char)+0x54>
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	8d e0       	ldi	r24, 0x0D	; 13
    24ae:	90 e1       	ldi	r25, 0x10	; 16
    24b0:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    24b4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    24b8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    24bc:	10 93 f9 09 	sts	0x09F9, r17	; 0x8009f9 <nextSongPart>
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    24c6:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <zaehler+0x1>
    24ca:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <zaehler>
    24ce:	8b e4       	ldi	r24, 0x4B	; 75
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <millisCounterTimer+0x1>
    24d6:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <millisCounterTimer>
    24da:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    24de:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    24e2:	84 36       	cpi	r24, 0x64	; 100
    24e4:	91 05       	cpc	r25, r1
    24e6:	c0 f1       	brcs	.+112    	; 0x2558 <progMatrix(unsigned int, unsigned char)+0xd2>
    24e8:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    24ec:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    24f0:	e0 90 f1 09 	lds	r14, 0x09F1	; 0x8009f1 <zaehler>
    24f4:	f0 90 f2 09 	lds	r15, 0x09F2	; 0x8009f2 <zaehler+0x1>
    24f8:	00 e1       	ldi	r16, 0x10	; 16
    24fa:	10 e0       	ldi	r17, 0x00	; 0
    24fc:	f7 fc       	sbrc	r15, 7
    24fe:	1c c0       	rjmp	.+56     	; 0x2538 <progMatrix(unsigned int, unsigned char)+0xb2>
    2500:	01 50       	subi	r16, 0x01	; 1
    2502:	11 09       	sbc	r17, r1
    2504:	02 30       	cpi	r16, 0x02	; 2
    2506:	11 05       	cpc	r17, r1
    2508:	14 f4       	brge	.+4      	; 0x250e <progMatrix(unsigned int, unsigned char)+0x88>
    250a:	10 e0       	ldi	r17, 0x00	; 0
    250c:	00 e0       	ldi	r16, 0x00	; 0
    250e:	c0 90 fc 0f 	lds	r12, 0x0FFC	; 0x800ffc <matrix>
    2512:	d0 90 fd 0f 	lds	r13, 0x0FFD	; 0x800ffd <matrix+0x1>
    2516:	b8 01       	movw	r22, r16
    2518:	ce 01       	movw	r24, r28
    251a:	01 96       	adiw	r24, 0x01	; 1
    251c:	55 df       	rcall	.-342    	; 0x23c8 <getMatrixColor(int)>
    251e:	9e 01       	movw	r18, r28
    2520:	2f 5f       	subi	r18, 0xFF	; 255
    2522:	3f 4f       	sbci	r19, 0xFF	; 255
    2524:	a7 01       	movw	r20, r14
    2526:	63 e0       	ldi	r22, 0x03	; 3
    2528:	70 e0       	ldi	r23, 0x00	; 0
    252a:	c6 01       	movw	r24, r12
    252c:	0e 94 d2 2f 	call	0x5fa4	; 0x5fa4 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2530:	81 e0       	ldi	r24, 0x01	; 1
    2532:	e8 1a       	sub	r14, r24
    2534:	f1 08       	sbc	r15, r1
    2536:	e2 cf       	rjmp	.-60     	; 0x24fc <progMatrix(unsigned int, unsigned char)+0x76>
    2538:	8d e0       	ldi	r24, 0x0D	; 13
    253a:	90 e1       	ldi	r25, 0x10	; 16
    253c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <CFastLED::show()>
    2540:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <zaehler>
    2544:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <zaehler+0x1>
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	8c 32       	cpi	r24, 0x2C	; 44
    254c:	91 05       	cpc	r25, r1
    254e:	84 f4       	brge	.+32     	; 0x2570 <progMatrix(unsigned int, unsigned char)+0xea>
    2550:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <zaehler+0x1>
    2554:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <zaehler>
    2558:	0f 90       	pop	r0
    255a:	0f 90       	pop	r0
    255c:	0f 90       	pop	r0
    255e:	df 91       	pop	r29
    2560:	cf 91       	pop	r28
    2562:	1f 91       	pop	r17
    2564:	0f 91       	pop	r16
    2566:	ff 90       	pop	r15
    2568:	ef 90       	pop	r14
    256a:	df 90       	pop	r13
    256c:	cf 90       	pop	r12
    256e:	08 95       	ret
    2570:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <zaehler+0x1>
    2574:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <zaehler>
    2578:	ef cf       	rjmp	.-34     	; 0x2558 <progMatrix(unsigned int, unsigned char)+0xd2>

0000257a <setupInterrupt()>:
    257a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    257e:	8b e0       	ldi	r24, 0x0B	; 11
    2580:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    2584:	8a e6       	ldi	r24, 0x6A	; 106
    2586:	98 e1       	ldi	r25, 0x18	; 24
    2588:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    258c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2590:	82 e0       	ldi	r24, 0x02	; 2
    2592:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    2596:	08 95       	ret

00002598 <__vector_32>:
    2598:	1f 92       	push	r1
    259a:	0f 92       	push	r0
    259c:	0f b6       	in	r0, 0x3f	; 63
    259e:	0f 92       	push	r0
    25a0:	11 24       	eor	r1, r1
    25a2:	2f 93       	push	r18
    25a4:	3f 93       	push	r19
    25a6:	8f 93       	push	r24
    25a8:	9f 93       	push	r25
    25aa:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterTimer>
    25ae:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterTimer+0x1>
    25b2:	49 96       	adiw	r24, 0x19	; 25
    25b4:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <millisCounterTimer+0x1>
    25b8:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <millisCounterTimer>
    25bc:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <millisCounterForSeconds>
    25c0:	90 91 fd 09 	lds	r25, 0x09FD	; 0x8009fd <millisCounterForSeconds+0x1>
    25c4:	49 96       	adiw	r24, 0x19	; 25
    25c6:	90 93 fd 09 	sts	0x09FD, r25	; 0x8009fd <millisCounterForSeconds+0x1>
    25ca:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <millisCounterForSeconds>
    25ce:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <millisCounterForProgChange>
    25d2:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <millisCounterForProgChange+0x1>
    25d6:	49 96       	adiw	r24, 0x19	; 25
    25d8:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <millisCounterForProgChange+0x1>
    25dc:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <millisCounterForProgChange>
    25e0:	91 e0       	ldi	r25, 0x01	; 1
    25e2:	90 93 fb 09 	sts	0x09FB, r25	; 0x8009fb <flag_processFastLED>
    25e6:	8b b1       	in	r24, 0x0b	; 11
    25e8:	20 e4       	ldi	r18, 0x40	; 64
    25ea:	82 27       	eor	r24, r18
    25ec:	8b b9       	out	0x0b, r24	; 11
    25ee:	20 91 fc 09 	lds	r18, 0x09FC	; 0x8009fc <millisCounterForSeconds>
    25f2:	30 91 fd 09 	lds	r19, 0x09FD	; 0x8009fd <millisCounterForSeconds+0x1>
    25f6:	28 3e       	cpi	r18, 0xE8	; 232
    25f8:	33 40       	sbci	r19, 0x03	; 3
    25fa:	30 f0       	brcs	.+12     	; 0x2608 <__vector_32+0x70>
    25fc:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <millisCounterForSeconds+0x1>
    2600:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <millisCounterForSeconds>
    2604:	90 93 f7 09 	sts	0x09F7, r25	; 0x8009f7 <OneSecondHasPast>
    2608:	20 91 fe 09 	lds	r18, 0x09FE	; 0x8009fe <millisCounterForProgChange>
    260c:	30 91 ff 09 	lds	r19, 0x09FF	; 0x8009ff <millisCounterForProgChange+0x1>
    2610:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    2614:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    2618:	28 17       	cp	r18, r24
    261a:	39 07       	cpc	r19, r25
    261c:	c0 f0       	brcs	.+48     	; 0x264e <__vector_32+0xb6>
    261e:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <nextSongPart>
    2622:	80 93 f8 09 	sts	0x09F8, r24	; 0x8009f8 <prog>
    2626:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    262a:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    262e:	10 92 ff 09 	sts	0x09FF, r1	; 0x8009ff <millisCounterForProgChange+0x1>
    2632:	10 92 fe 09 	sts	0x09FE, r1	; 0x8009fe <millisCounterForProgChange>
    2636:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <zaehler+0x1>
    263a:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <zaehler>
    263e:	87 e1       	ldi	r24, 0x17	; 23
    2640:	90 e0       	ldi	r25, 0x00	; 0
    2642:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    2646:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    264a:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    264e:	9f 91       	pop	r25
    2650:	8f 91       	pop	r24
    2652:	3f 91       	pop	r19
    2654:	2f 91       	pop	r18
    2656:	0f 90       	pop	r0
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	0f 90       	pop	r0
    265c:	1f 90       	pop	r1
    265e:	18 95       	reti

00002660 <switchToSong(unsigned char)>:
    2660:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterTimer+0x1>
    2664:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterTimer>
    2668:	10 92 ff 09 	sts	0x09FF, r1	; 0x8009ff <millisCounterForProgChange+0x1>
    266c:	10 92 fe 09 	sts	0x09FE, r1	; 0x8009fe <millisCounterForProgChange>
    2670:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
    2674:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <progBlingBlingColoring_rounds>
    2678:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <progCLED_hue>
    267c:	10 92 b1 09 	sts	0x09B1, r1	; 0x8009b1 <progCLED_counter+0x1>
    2680:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <progCLED_counter>
    2684:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <zaehler+0x1>
    2688:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <zaehler>
    268c:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <songID>
    2690:	10 92 f8 09 	sts	0x09F8, r1	; 0x8009f8 <prog>
    2694:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <nextChangeMillisAlreadyCalculated>
    2698:	6f e1       	ldi	r22, 0x1F	; 31
    269a:	71 e0       	ldi	r23, 0x01	; 1
    269c:	8d e9       	ldi	r24, 0x9D	; 157
    269e:	90 e1       	ldi	r25, 0x10	; 16
    26a0:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    26a4:	8d e9       	ldi	r24, 0x9D	; 157
    26a6:	90 e1       	ldi	r25, 0x10	; 16
    26a8:	0c 94 22 3c 	jmp	0x7844	; 0x7844 <Print::println()>

000026ac <setup>:
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	68 ee       	ldi	r22, 0xE8	; 232
    26c2:	73 e0       	ldi	r23, 0x03	; 3
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <delay>
    26cc:	4f ef       	ldi	r20, 0xFF	; 255
    26ce:	60 e4       	ldi	r22, 0x40	; 64
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	88 e2       	ldi	r24, 0x28	; 40
    26d4:	90 e1       	ldi	r25, 0x10	; 16
    26d6:	0e 94 cc 3a 	call	0x7598	; 0x7598 <HardwareSerial::_begin(unsigned int, unsigned char)>
    26da:	56 9a       	sbi	0x0a, 6	; 10
    26dc:	88 e2       	ldi	r24, 0x28	; 40
    26de:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <analogRead>
    26e2:	bc 01       	movw	r22, r24
    26e4:	99 0f       	add	r25, r25
    26e6:	88 0b       	sbc	r24, r24
    26e8:	99 0b       	sbc	r25, r25
    26ea:	1f 92       	push	r1
    26ec:	1f 92       	push	r1
    26ee:	1f 92       	push	r1
    26f0:	28 e7       	ldi	r18, 0x78	; 120
    26f2:	2f 93       	push	r18
    26f4:	a1 2c       	mov	r10, r1
    26f6:	b1 2c       	mov	r11, r1
    26f8:	65 01       	movw	r12, r10
    26fa:	ee 24       	eor	r14, r14
    26fc:	ea 94       	dec	r14
    26fe:	13 e0       	ldi	r17, 0x03	; 3
    2700:	f1 2e       	mov	r15, r17
    2702:	00 e0       	ldi	r16, 0x00	; 0
    2704:	10 e0       	ldi	r17, 0x00	; 0
    2706:	20 e0       	ldi	r18, 0x00	; 0
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	a9 01       	movw	r20, r18
    270c:	0e 94 93 3e 	call	0x7d26	; 0x7d26 <map(long, long, long, long, long)>
    2710:	60 93 04 0a 	sts	0x0A04, r22	; 0x800a04 <voltageSmooth>
    2714:	82 e3       	ldi	r24, 0x32	; 50
    2716:	91 e0       	ldi	r25, 0x01	; 1
    2718:	0e 94 96 3b 	call	0x772c	; 0x772c <operator new(unsigned int)>
    271c:	ec 01       	movw	r28, r24
    271e:	0a e0       	ldi	r16, 0x0A	; 10
    2720:	27 e1       	ldi	r18, 0x17	; 23
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	46 e1       	ldi	r20, 0x16	; 22
    2726:	50 e0       	ldi	r21, 0x00	; 0
    2728:	6e e0       	ldi	r22, 0x0E	; 14
    272a:	7a e0       	ldi	r23, 0x0A	; 10
    272c:	0e 94 fb 2c 	call	0x59f6	; 0x59f6 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    2730:	d0 93 fd 0f 	sts	0x0FFD, r29	; 0x800ffd <matrix+0x1>
    2734:	c0 93 fc 0f 	sts	0x0FFC, r28	; 0x800ffc <matrix>
    2738:	80 91 27 09 	lds	r24, 0x0927	; 0x800927 <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    273c:	0f 90       	pop	r0
    273e:	0f 90       	pop	r0
    2740:	0f 90       	pop	r0
    2742:	0f 90       	pop	r0
    2744:	81 11       	cpse	r24, r1
    2746:	4d c0       	rjmp	.+154    	; 0x27e2 <setup+0x136>
    2748:	87 e2       	ldi	r24, 0x27	; 39
    274a:	99 e0       	ldi	r25, 0x09	; 9
    274c:	0e 94 97 3b 	call	0x772e	; 0x772e <__cxa_guard_acquire>
    2750:	89 2b       	or	r24, r25
    2752:	09 f4       	brne	.+2      	; 0x2756 <setup+0xaa>
    2754:	46 c0       	rjmp	.+140    	; 0x27e2 <setup+0x136>
    2756:	10 92 32 09 	sts	0x0932, r1	; 0x800932 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    275a:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    275e:	8f ef       	ldi	r24, 0xFF	; 255
    2760:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    2764:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    2768:	80 93 37 09 	sts	0x0937, r24	; 0x800937 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    276c:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    2770:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    2774:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    2778:	81 e0       	ldi	r24, 0x01	; 1
    277a:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    277e:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    2782:	10 92 3c 09 	sts	0x093C, r1	; 0x80093c <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    2786:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    278a:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    278e:	80 91 0b 10 	lds	r24, 0x100B	; 0x80100b <CLEDController::m_pHead>
    2792:	90 91 0c 10 	lds	r25, 0x100C	; 0x80100c <CLEDController::m_pHead+0x1>
    2796:	89 2b       	or	r24, r25
    2798:	31 f4       	brne	.+12     	; 0x27a6 <setup+0xfa>
    279a:	8f e2       	ldi	r24, 0x2F	; 47
    279c:	99 e0       	ldi	r25, 0x09	; 9
    279e:	90 93 0c 10 	sts	0x100C, r25	; 0x80100c <CLEDController::m_pHead+0x1>
    27a2:	80 93 0b 10 	sts	0x100B, r24	; 0x80100b <CLEDController::m_pHead>
    27a6:	e0 91 09 10 	lds	r30, 0x1009	; 0x801009 <CLEDController::m_pTail>
    27aa:	f0 91 0a 10 	lds	r31, 0x100A	; 0x80100a <CLEDController::m_pTail+0x1>
    27ae:	30 97       	sbiw	r30, 0x00	; 0
    27b0:	21 f0       	breq	.+8      	; 0x27ba <setup+0x10e>
    27b2:	8f e2       	ldi	r24, 0x2F	; 47
    27b4:	99 e0       	ldi	r25, 0x09	; 9
    27b6:	95 83       	std	Z+5, r25	; 0x05
    27b8:	84 83       	std	Z+4, r24	; 0x04
    27ba:	8f e2       	ldi	r24, 0x2F	; 47
    27bc:	99 e0       	ldi	r25, 0x09	; 9
    27be:	90 93 0a 10 	sts	0x100A, r25	; 0x80100a <CLEDController::m_pTail+0x1>
    27c2:	80 93 09 10 	sts	0x1009, r24	; 0x801009 <CLEDController::m_pTail>
    27c6:	10 92 3f 09 	sts	0x093F, r1	; 0x80093f <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    27ca:	10 92 3e 09 	sts	0x093E, r1	; 0x80093e <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    27ce:	84 eb       	ldi	r24, 0xB4	; 180
    27d0:	94 e0       	ldi	r25, 0x04	; 4
    27d2:	90 93 30 09 	sts	0x0930, r25	; 0x800930 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    27d6:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    27da:	87 e2       	ldi	r24, 0x27	; 39
    27dc:	99 e0       	ldi	r25, 0x09	; 9
    27de:	0e 94 a0 3b 	call	0x7740	; 0x7740 <__cxa_guard_release>
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	4a ef       	ldi	r20, 0xFA	; 250
    27e8:	51 e0       	ldi	r21, 0x01	; 1
    27ea:	6e e0       	ldi	r22, 0x0E	; 14
    27ec:	7a e0       	ldi	r23, 0x0A	; 10
    27ee:	8f e2       	ldi	r24, 0x2F	; 47
    27f0:	99 e0       	ldi	r25, 0x09	; 9
    27f2:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    27f6:	fc 01       	movw	r30, r24
    27f8:	8f ef       	ldi	r24, 0xFF	; 255
    27fa:	86 83       	std	Z+6, r24	; 0x06
    27fc:	80 eb       	ldi	r24, 0xB0	; 176
    27fe:	87 83       	std	Z+7, r24	; 0x07
    2800:	80 ef       	ldi	r24, 0xF0	; 240
    2802:	80 87       	std	Z+8, r24	; 0x08
    2804:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    2808:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    280c:	0e 94 72 2d 	call	0x5ae4	; 0x5ae4 <Framebuffer_GFX::begin()>
    2810:	80 91 fc 0f 	lds	r24, 0x0FFC	; 0x800ffc <matrix>
    2814:	90 91 fd 0f 	lds	r25, 0x0FFD	; 0x800ffd <matrix+0x1>
    2818:	2f e0       	ldi	r18, 0x0F	; 15
    281a:	20 93 0d 10 	sts	0x100D, r18	; 0x80100d <FastLED>
    281e:	fc 01       	movw	r30, r24
    2820:	16 8a       	std	Z+22, r1	; 0x16
    2822:	69 e8       	ldi	r22, 0x89	; 137
    2824:	74 e0       	ldi	r23, 0x04	; 4
    2826:	0e 94 01 30 	call	0x6002	; 0x6002 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    282a:	f8 94       	cli
    282c:	a6 de       	rcall	.-692    	; 0x257a <setupInterrupt()>
    282e:	78 94       	sei
    2830:	68 eb       	ldi	r22, 0xB8	; 184
    2832:	76 e0       	ldi	r23, 0x06	; 6
    2834:	8c eb       	ldi	r24, 0xBC	; 188
    2836:	99 e0       	ldi	r25, 0x09	; 9
    2838:	0e 94 ac 05 	call	0xb58	; 0xb58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    283c:	81 e0       	ldi	r24, 0x01	; 1
    283e:	90 e0       	ldi	r25, 0x00	; 0
    2840:	90 93 bb 09 	sts	0x09BB, r25	; 0x8009bb <currentBlending+0x1>
    2844:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <currentBlending>
    2848:	80 e0       	ldi	r24, 0x00	; 0
    284a:	df 91       	pop	r29
    284c:	cf 91       	pop	r28
    284e:	1f 91       	pop	r17
    2850:	0f 91       	pop	r16
    2852:	ff 90       	pop	r15
    2854:	ef 90       	pop	r14
    2856:	df 90       	pop	r13
    2858:	cf 90       	pop	r12
    285a:	bf 90       	pop	r11
    285c:	af 90       	pop	r10
    285e:	00 cf       	rjmp	.-512    	; 0x2660 <switchToSong(unsigned char)>

00002860 <defaultLoop()>:
    2860:	ef 92       	push	r14
    2862:	ff 92       	push	r15
    2864:	0f 93       	push	r16
    2866:	1f 93       	push	r17
    2868:	cf 93       	push	r28
    286a:	df 93       	push	r29
    286c:	00 d0       	rcall	.+0      	; 0x286e <defaultLoop()+0xe>
    286e:	00 d0       	rcall	.+0      	; 0x2870 <defaultLoop()+0x10>
    2870:	00 d0       	rcall	.+0      	; 0x2872 <defaultLoop()+0x12>
    2872:	1f 92       	push	r1
    2874:	cd b7       	in	r28, 0x3d	; 61
    2876:	de b7       	in	r29, 0x3e	; 62
    2878:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    287c:	86 30       	cpi	r24, 0x06	; 6
    287e:	09 f4       	brne	.+2      	; 0x2882 <defaultLoop()+0x22>
    2880:	7e c0       	rjmp	.+252    	; 0x297e <defaultLoop()+0x11e>
    2882:	18 f5       	brcc	.+70     	; 0x28ca <defaultLoop()+0x6a>
    2884:	82 30       	cpi	r24, 0x02	; 2
    2886:	09 f4       	brne	.+2      	; 0x288a <defaultLoop()+0x2a>
    2888:	4c c0       	rjmp	.+152    	; 0x2922 <defaultLoop()+0xc2>
    288a:	90 f4       	brcc	.+36     	; 0x28b0 <defaultLoop()+0x50>
    288c:	88 23       	and	r24, r24
    288e:	e1 f1       	breq	.+120    	; 0x2908 <defaultLoop()+0xa8>
    2890:	81 30       	cpi	r24, 0x01	; 1
    2892:	09 f4       	brne	.+2      	; 0x2896 <defaultLoop()+0x36>
    2894:	3e c0       	rjmp	.+124    	; 0x2912 <defaultLoop()+0xb2>
    2896:	27 96       	adiw	r28, 0x07	; 7
    2898:	0f b6       	in	r0, 0x3f	; 63
    289a:	f8 94       	cli
    289c:	de bf       	out	0x3e, r29	; 62
    289e:	0f be       	out	0x3f, r0	; 63
    28a0:	cd bf       	out	0x3d, r28	; 61
    28a2:	df 91       	pop	r29
    28a4:	cf 91       	pop	r28
    28a6:	1f 91       	pop	r17
    28a8:	0f 91       	pop	r16
    28aa:	ff 90       	pop	r15
    28ac:	ef 90       	pop	r14
    28ae:	08 95       	ret
    28b0:	84 30       	cpi	r24, 0x04	; 4
    28b2:	09 f4       	brne	.+2      	; 0x28b6 <defaultLoop()+0x56>
    28b4:	5e c0       	rjmp	.+188    	; 0x2972 <defaultLoop()+0x112>
    28b6:	08 f4       	brcc	.+2      	; 0x28ba <defaultLoop()+0x5a>
    28b8:	45 c0       	rjmp	.+138    	; 0x2944 <defaultLoop()+0xe4>
    28ba:	40 ed       	ldi	r20, 0xD0	; 208
    28bc:	57 e0       	ldi	r21, 0x07	; 7
    28be:	66 e0       	ldi	r22, 0x06	; 6
    28c0:	88 e9       	ldi	r24, 0x98	; 152
    28c2:	9a e3       	ldi	r25, 0x3A	; 58
    28c4:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    28c8:	e6 cf       	rjmp	.-52     	; 0x2896 <defaultLoop()+0x36>
    28ca:	89 30       	cpi	r24, 0x09	; 9
    28cc:	09 f4       	brne	.+2      	; 0x28d0 <defaultLoop()+0x70>
    28ce:	6a c0       	rjmp	.+212    	; 0x29a4 <defaultLoop()+0x144>
    28d0:	60 f4       	brcc	.+24     	; 0x28ea <defaultLoop()+0x8a>
    28d2:	87 30       	cpi	r24, 0x07	; 7
    28d4:	09 f4       	brne	.+2      	; 0x28d8 <defaultLoop()+0x78>
    28d6:	5e c0       	rjmp	.+188    	; 0x2994 <defaultLoop()+0x134>
    28d8:	88 30       	cpi	r24, 0x08	; 8
    28da:	e9 f6       	brne	.-70     	; 0x2896 <defaultLoop()+0x36>
    28dc:	49 e0       	ldi	r20, 0x09	; 9
    28de:	65 e0       	ldi	r22, 0x05	; 5
    28e0:	88 e9       	ldi	r24, 0x98	; 152
    28e2:	9a e3       	ldi	r25, 0x3A	; 58
    28e4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    28e8:	d6 cf       	rjmp	.-84     	; 0x2896 <defaultLoop()+0x36>
    28ea:	8b 30       	cpi	r24, 0x0B	; 11
    28ec:	09 f4       	brne	.+2      	; 0x28f0 <defaultLoop()+0x90>
    28ee:	66 c0       	rjmp	.+204    	; 0x29bc <defaultLoop()+0x15c>
    28f0:	08 f4       	brcc	.+2      	; 0x28f4 <defaultLoop()+0x94>
    28f2:	5e c0       	rjmp	.+188    	; 0x29b0 <defaultLoop()+0x150>
    28f4:	84 36       	cpi	r24, 0x64	; 100
    28f6:	79 f6       	brne	.-98     	; 0x2896 <defaultLoop()+0x36>
    28f8:	60 e0       	ldi	r22, 0x00	; 0
    28fa:	8d e0       	ldi	r24, 0x0D	; 13
    28fc:	90 e1       	ldi	r25, 0x10	; 16
    28fe:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	ad de       	rcall	.-678    	; 0x2660 <switchToSong(unsigned char)>
    2906:	c7 cf       	rjmp	.-114    	; 0x2896 <defaultLoop()+0x36>
    2908:	61 e0       	ldi	r22, 0x01	; 1
    290a:	80 e6       	ldi	r24, 0x60	; 96
    290c:	9a ee       	ldi	r25, 0xEA	; 234
    290e:	bb dd       	rcall	.-1162   	; 0x2486 <progMatrix(unsigned int, unsigned char)>
    2910:	c2 cf       	rjmp	.-124    	; 0x2896 <defaultLoop()+0x36>
    2912:	42 e0       	ldi	r20, 0x02	; 2
    2914:	60 ea       	ldi	r22, 0xA0	; 160
    2916:	7f e0       	ldi	r23, 0x0F	; 15
    2918:	88 e9       	ldi	r24, 0x98	; 152
    291a:	9a e3       	ldi	r25, 0x3A	; 58
    291c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    2920:	ba cf       	rjmp	.-140    	; 0x2896 <defaultLoop()+0x36>
    2922:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2926:	7c 01       	movw	r14, r24
    2928:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    292c:	8c 01       	movw	r16, r24
    292e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2932:	9c 01       	movw	r18, r24
    2934:	42 e3       	ldi	r20, 0x32	; 50
    2936:	50 e0       	ldi	r21, 0x00	; 0
    2938:	63 e0       	ldi	r22, 0x03	; 3
    293a:	88 e8       	ldi	r24, 0x88	; 136
    293c:	93 e1       	ldi	r25, 0x13	; 19
    293e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2942:	a9 cf       	rjmp	.-174    	; 0x2896 <defaultLoop()+0x36>
    2944:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2948:	7c 01       	movw	r14, r24
    294a:	65 e7       	ldi	r22, 0x75	; 117
    294c:	72 e0       	ldi	r23, 0x02	; 2
    294e:	ce 01       	movw	r24, r28
    2950:	01 96       	adiw	r24, 0x01	; 1
    2952:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    2956:	04 e0       	ldi	r16, 0x04	; 4
    2958:	97 01       	movw	r18, r14
    295a:	4a e5       	ldi	r20, 0x5A	; 90
    295c:	50 e0       	ldi	r21, 0x00	; 0
    295e:	60 e3       	ldi	r22, 0x30	; 48
    2960:	75 e7       	ldi	r23, 0x75	; 117
    2962:	ce 01       	movw	r24, r28
    2964:	01 96       	adiw	r24, 0x01	; 1
    2966:	77 d9       	rcall	.-3346   	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    2968:	ce 01       	movw	r24, r28
    296a:	01 96       	adiw	r24, 0x01	; 1
    296c:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    2970:	92 cf       	rjmp	.-220    	; 0x2896 <defaultLoop()+0x36>
    2972:	65 e0       	ldi	r22, 0x05	; 5
    2974:	88 e9       	ldi	r24, 0x98	; 152
    2976:	9a e3       	ldi	r25, 0x3A	; 58
    2978:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    297c:	8c cf       	rjmp	.-232    	; 0x2896 <defaultLoop()+0x36>
    297e:	ee 24       	eor	r14, r14
    2980:	ea 94       	dec	r14
    2982:	f1 2c       	mov	r15, r1
    2984:	0f ef       	ldi	r16, 0xFF	; 255
    2986:	10 e0       	ldi	r17, 0x00	; 0
    2988:	2f ef       	ldi	r18, 0xFF	; 255
    298a:	30 e0       	ldi	r19, 0x00	; 0
    298c:	42 e3       	ldi	r20, 0x32	; 50
    298e:	50 e0       	ldi	r21, 0x00	; 0
    2990:	67 e0       	ldi	r22, 0x07	; 7
    2992:	d3 cf       	rjmp	.-90     	; 0x293a <defaultLoop()+0xda>
    2994:	48 ee       	ldi	r20, 0xE8	; 232
    2996:	53 e0       	ldi	r21, 0x03	; 3
    2998:	68 e0       	ldi	r22, 0x08	; 8
    299a:	88 e9       	ldi	r24, 0x98	; 152
    299c:	9a e3       	ldi	r25, 0x3A	; 58
    299e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    29a2:	79 cf       	rjmp	.-270    	; 0x2896 <defaultLoop()+0x36>
    29a4:	6a e0       	ldi	r22, 0x0A	; 10
    29a6:	80 e1       	ldi	r24, 0x10	; 16
    29a8:	97 e2       	ldi	r25, 0x27	; 39
    29aa:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <progOutline(unsigned int, unsigned char)>
    29ae:	73 cf       	rjmp	.-282    	; 0x2896 <defaultLoop()+0x36>
    29b0:	6b e0       	ldi	r22, 0x0B	; 11
    29b2:	80 e1       	ldi	r24, 0x10	; 16
    29b4:	97 e2       	ldi	r25, 0x27	; 39
    29b6:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    29ba:	6d cf       	rjmp	.-294    	; 0x2896 <defaultLoop()+0x36>
    29bc:	44 ef       	ldi	r20, 0xF4	; 244
    29be:	51 e0       	ldi	r21, 0x01	; 1
    29c0:	64 e6       	ldi	r22, 0x64	; 100
    29c2:	88 e9       	ldi	r24, 0x98	; 152
    29c4:	9a e3       	ldi	r25, 0x3A	; 58
    29c6:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    29ca:	65 cf       	rjmp	.-310    	; 0x2896 <defaultLoop()+0x36>

000029cc <LearnToFly()>:
    29cc:	ef 92       	push	r14
    29ce:	ff 92       	push	r15
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	cf 93       	push	r28
    29d6:	df 93       	push	r29
    29d8:	00 d0       	rcall	.+0      	; 0x29da <LearnToFly()+0xe>
    29da:	00 d0       	rcall	.+0      	; 0x29dc <LearnToFly()+0x10>
    29dc:	00 d0       	rcall	.+0      	; 0x29de <LearnToFly()+0x12>
    29de:	1f 92       	push	r1
    29e0:	cd b7       	in	r28, 0x3d	; 61
    29e2:	de b7       	in	r29, 0x3e	; 62
    29e4:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    29e8:	89 31       	cpi	r24, 0x19	; 25
    29ea:	09 f4       	brne	.+2      	; 0x29ee <LearnToFly()+0x22>
    29ec:	84 c0       	rjmp	.+264    	; 0x2af6 <LearnToFly()+0x12a>
    29ee:	38 f5       	brcc	.+78     	; 0x2a3e <LearnToFly()+0x72>
    29f0:	85 30       	cpi	r24, 0x05	; 5
    29f2:	09 f4       	brne	.+2      	; 0x29f6 <LearnToFly()+0x2a>
    29f4:	6c c0       	rjmp	.+216    	; 0x2ace <LearnToFly()+0x102>
    29f6:	98 f4       	brcc	.+38     	; 0x2a1e <LearnToFly()+0x52>
    29f8:	88 23       	and	r24, r24
    29fa:	09 f4       	brne	.+2      	; 0x29fe <LearnToFly()+0x32>
    29fc:	49 c0       	rjmp	.+146    	; 0x2a90 <LearnToFly()+0xc4>
    29fe:	82 30       	cpi	r24, 0x02	; 2
    2a00:	09 f4       	brne	.+2      	; 0x2a04 <LearnToFly()+0x38>
    2a02:	5d c0       	rjmp	.+186    	; 0x2abe <LearnToFly()+0xf2>
    2a04:	27 96       	adiw	r28, 0x07	; 7
    2a06:	0f b6       	in	r0, 0x3f	; 63
    2a08:	f8 94       	cli
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	0f be       	out	0x3f, r0	; 63
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	df 91       	pop	r29
    2a12:	cf 91       	pop	r28
    2a14:	1f 91       	pop	r17
    2a16:	0f 91       	pop	r16
    2a18:	ff 90       	pop	r15
    2a1a:	ef 90       	pop	r14
    2a1c:	08 95       	ret
    2a1e:	8f 30       	cpi	r24, 0x0F	; 15
    2a20:	09 f4       	brne	.+2      	; 0x2a24 <LearnToFly()+0x58>
    2a22:	5b c0       	rjmp	.+182    	; 0x2ada <LearnToFly()+0x10e>
    2a24:	84 31       	cpi	r24, 0x14	; 20
    2a26:	09 f4       	brne	.+2      	; 0x2a2a <LearnToFly()+0x5e>
    2a28:	5e c0       	rjmp	.+188    	; 0x2ae6 <LearnToFly()+0x11a>
    2a2a:	8a 30       	cpi	r24, 0x0A	; 10
    2a2c:	59 f7       	brne	.-42     	; 0x2a04 <LearnToFly()+0x38>
    2a2e:	49 ea       	ldi	r20, 0xA9	; 169
    2a30:	51 e0       	ldi	r21, 0x01	; 1
    2a32:	6f e0       	ldi	r22, 0x0F	; 15
    2a34:	82 e8       	ldi	r24, 0x82	; 130
    2a36:	90 e6       	ldi	r25, 0x60	; 96
    2a38:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    2a3c:	e3 cf       	rjmp	.-58     	; 0x2a04 <LearnToFly()+0x38>
    2a3e:	8d 32       	cpi	r24, 0x2D	; 45
    2a40:	09 f4       	brne	.+2      	; 0x2a44 <LearnToFly()+0x78>
    2a42:	73 c0       	rjmp	.+230    	; 0x2b2a <LearnToFly()+0x15e>
    2a44:	70 f4       	brcc	.+28     	; 0x2a62 <LearnToFly()+0x96>
    2a46:	83 32       	cpi	r24, 0x23	; 35
    2a48:	09 f4       	brne	.+2      	; 0x2a4c <LearnToFly()+0x80>
    2a4a:	5c c0       	rjmp	.+184    	; 0x2b04 <LearnToFly()+0x138>
    2a4c:	88 32       	cpi	r24, 0x28	; 40
    2a4e:	09 f4       	brne	.+2      	; 0x2a52 <LearnToFly()+0x86>
    2a50:	68 c0       	rjmp	.+208    	; 0x2b22 <LearnToFly()+0x156>
    2a52:	8e 31       	cpi	r24, 0x1E	; 30
    2a54:	b9 f6       	brne	.-82     	; 0x2a04 <LearnToFly()+0x38>
    2a56:	63 e2       	ldi	r22, 0x23	; 35
    2a58:	8b e4       	ldi	r24, 0x4B	; 75
    2a5a:	9e e6       	ldi	r25, 0x6E	; 110
    2a5c:	0e 94 25 06 	call	0xc4a	; 0xc4a <progBlingBlingColoring(unsigned int, unsigned char)>
    2a60:	d1 cf       	rjmp	.-94     	; 0x2a04 <LearnToFly()+0x38>
    2a62:	87 33       	cpi	r24, 0x37	; 55
    2a64:	09 f4       	brne	.+2      	; 0x2a68 <LearnToFly()+0x9c>
    2a66:	66 c0       	rjmp	.+204    	; 0x2b34 <LearnToFly()+0x168>
    2a68:	84 36       	cpi	r24, 0x64	; 100
    2a6a:	09 f4       	brne	.+2      	; 0x2a6e <LearnToFly()+0xa2>
    2a6c:	67 c0       	rjmp	.+206    	; 0x2b3c <LearnToFly()+0x170>
    2a6e:	82 33       	cpi	r24, 0x32	; 50
    2a70:	49 f6       	brne	.-110    	; 0x2a04 <LearnToFly()+0x38>
    2a72:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2a76:	7c 01       	movw	r14, r24
    2a78:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2a7c:	8c 01       	movw	r16, r24
    2a7e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2a82:	9c 01       	movw	r18, r24
    2a84:	4b e4       	ldi	r20, 0x4B	; 75
    2a86:	50 e0       	ldi	r21, 0x00	; 0
    2a88:	67 e3       	ldi	r22, 0x37	; 55
    2a8a:	86 e2       	ldi	r24, 0x26	; 38
    2a8c:	97 e3       	ldi	r25, 0x37	; 55
    2a8e:	46 c0       	rjmp	.+140    	; 0x2b1c <LearnToFly()+0x150>
    2a90:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2a94:	7c 01       	movw	r14, r24
    2a96:	60 e3       	ldi	r22, 0x30	; 48
    2a98:	71 e0       	ldi	r23, 0x01	; 1
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	01 96       	adiw	r24, 0x01	; 1
    2a9e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    2aa2:	02 e0       	ldi	r16, 0x02	; 2
    2aa4:	97 01       	movw	r18, r14
    2aa6:	4b e4       	ldi	r20, 0x4B	; 75
    2aa8:	50 e0       	ldi	r21, 0x00	; 0
    2aaa:	6c e6       	ldi	r22, 0x6C	; 108
    2aac:	75 e3       	ldi	r23, 0x35	; 53
    2aae:	ce 01       	movw	r24, r28
    2ab0:	01 96       	adiw	r24, 0x01	; 1
    2ab2:	d1 d8       	rcall	.-3678   	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    2ab4:	ce 01       	movw	r24, r28
    2ab6:	01 96       	adiw	r24, 0x01	; 1
    2ab8:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    2abc:	a3 cf       	rjmp	.-186    	; 0x2a04 <LearnToFly()+0x38>
    2abe:	45 e0       	ldi	r20, 0x05	; 5
    2ac0:	68 eb       	ldi	r22, 0xB8	; 184
    2ac2:	71 e0       	ldi	r23, 0x01	; 1
    2ac4:	83 e9       	ldi	r24, 0x93	; 147
    2ac6:	9b e1       	ldi	r25, 0x1B	; 27
    2ac8:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    2acc:	9b cf       	rjmp	.-202    	; 0x2a04 <LearnToFly()+0x38>
    2ace:	6a e0       	ldi	r22, 0x0A	; 10
    2ad0:	8b e4       	ldi	r24, 0x4B	; 75
    2ad2:	9e e6       	ldi	r25, 0x6E	; 110
    2ad4:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    2ad8:	95 cf       	rjmp	.-214    	; 0x2a04 <LearnToFly()+0x38>
    2ada:	64 e1       	ldi	r22, 0x14	; 20
    2adc:	86 e2       	ldi	r24, 0x26	; 38
    2ade:	97 e3       	ldi	r25, 0x37	; 55
    2ae0:	0e 94 b6 09 	call	0x136c	; 0x136c <progStern(unsigned int, unsigned char)>
    2ae4:	8f cf       	rjmp	.-226    	; 0x2a04 <LearnToFly()+0x38>
    2ae6:	49 ea       	ldi	r20, 0xA9	; 169
    2ae8:	51 e0       	ldi	r21, 0x01	; 1
    2aea:	69 e1       	ldi	r22, 0x19	; 25
    2aec:	8b e4       	ldi	r24, 0x4B	; 75
    2aee:	9e e6       	ldi	r25, 0x6E	; 110
    2af0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    2af4:	87 cf       	rjmp	.-242    	; 0x2a04 <LearnToFly()+0x38>
    2af6:	4e e1       	ldi	r20, 0x1E	; 30
    2af8:	65 e0       	ldi	r22, 0x05	; 5
    2afa:	80 e3       	ldi	r24, 0x30	; 48
    2afc:	95 e7       	ldi	r25, 0x75	; 117
    2afe:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    2b02:	80 cf       	rjmp	.-256    	; 0x2a04 <LearnToFly()+0x38>
    2b04:	ee 24       	eor	r14, r14
    2b06:	ea 94       	dec	r14
    2b08:	f1 2c       	mov	r15, r1
    2b0a:	0f ef       	ldi	r16, 0xFF	; 255
    2b0c:	10 e0       	ldi	r17, 0x00	; 0
    2b0e:	2f ef       	ldi	r18, 0xFF	; 255
    2b10:	30 e0       	ldi	r19, 0x00	; 0
    2b12:	4b e4       	ldi	r20, 0x4B	; 75
    2b14:	50 e0       	ldi	r21, 0x00	; 0
    2b16:	68 e2       	ldi	r22, 0x28	; 40
    2b18:	89 ec       	ldi	r24, 0xC9	; 201
    2b1a:	9d e0       	ldi	r25, 0x0D	; 13
    2b1c:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2b20:	71 cf       	rjmp	.-286    	; 0x2a04 <LearnToFly()+0x38>
    2b22:	49 ea       	ldi	r20, 0xA9	; 169
    2b24:	51 e0       	ldi	r21, 0x01	; 1
    2b26:	6d e2       	ldi	r22, 0x2D	; 45
    2b28:	85 cf       	rjmp	.-246    	; 0x2a34 <LearnToFly()+0x68>
    2b2a:	42 e3       	ldi	r20, 0x32	; 50
    2b2c:	65 e0       	ldi	r22, 0x05	; 5
    2b2e:	88 eb       	ldi	r24, 0xB8	; 184
    2b30:	92 e5       	ldi	r25, 0x52	; 82
    2b32:	e5 cf       	rjmp	.-54     	; 0x2afe <LearnToFly()+0x132>
    2b34:	64 e6       	ldi	r22, 0x64	; 100
    2b36:	8f ef       	ldi	r24, 0xFF	; 255
    2b38:	9f ef       	ldi	r25, 0xFF	; 255
    2b3a:	90 cf       	rjmp	.-224    	; 0x2a5c <LearnToFly()+0x90>
    2b3c:	60 e0       	ldi	r22, 0x00	; 0
    2b3e:	8d e0       	ldi	r24, 0x0D	; 13
    2b40:	90 e1       	ldi	r25, 0x10	; 16
    2b42:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    2b46:	80 e0       	ldi	r24, 0x00	; 0
    2b48:	8b dd       	rcall	.-1258   	; 0x2660 <switchToSong(unsigned char)>
    2b4a:	5c cf       	rjmp	.-328    	; 0x2a04 <LearnToFly()+0x38>

00002b4c <Castle()>:
    2b4c:	ef 92       	push	r14
    2b4e:	ff 92       	push	r15
    2b50:	0f 93       	push	r16
    2b52:	1f 93       	push	r17
    2b54:	cf 93       	push	r28
    2b56:	df 93       	push	r29
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <Castle()+0xe>
    2b5a:	00 d0       	rcall	.+0      	; 0x2b5c <Castle()+0x10>
    2b5c:	00 d0       	rcall	.+0      	; 0x2b5e <Castle()+0x12>
    2b5e:	1f 92       	push	r1
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
    2b64:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    2b68:	82 33       	cpi	r24, 0x32	; 50
    2b6a:	09 f4       	brne	.+2      	; 0x2b6e <Castle()+0x22>
    2b6c:	e8 c0       	rjmp	.+464    	; 0x2d3e <Castle()+0x1f2>
    2b6e:	08 f0       	brcs	.+2      	; 0x2b72 <Castle()+0x26>
    2b70:	49 c0       	rjmp	.+146    	; 0x2c04 <Castle()+0xb8>
    2b72:	84 31       	cpi	r24, 0x14	; 20
    2b74:	09 f4       	brne	.+2      	; 0x2b78 <Castle()+0x2c>
    2b76:	c6 c0       	rjmp	.+396    	; 0x2d04 <Castle()+0x1b8>
    2b78:	10 f5       	brcc	.+68     	; 0x2bbe <Castle()+0x72>
    2b7a:	85 30       	cpi	r24, 0x05	; 5
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <Castle()+0x34>
    2b7e:	b4 c0       	rjmp	.+360    	; 0x2ce8 <Castle()+0x19c>
    2b80:	98 f4       	brcc	.+38     	; 0x2ba8 <Castle()+0x5c>
    2b82:	88 23       	and	r24, r24
    2b84:	09 f4       	brne	.+2      	; 0x2b88 <Castle()+0x3c>
    2b86:	92 c0       	rjmp	.+292    	; 0x2cac <Castle()+0x160>
    2b88:	81 30       	cpi	r24, 0x01	; 1
    2b8a:	09 f4       	brne	.+2      	; 0x2b8e <Castle()+0x42>
    2b8c:	a7 c0       	rjmp	.+334    	; 0x2cdc <Castle()+0x190>
    2b8e:	27 96       	adiw	r28, 0x07	; 7
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	df 91       	pop	r29
    2b9c:	cf 91       	pop	r28
    2b9e:	1f 91       	pop	r17
    2ba0:	0f 91       	pop	r16
    2ba2:	ff 90       	pop	r15
    2ba4:	ef 90       	pop	r14
    2ba6:	08 95       	ret
    2ba8:	8a 30       	cpi	r24, 0x0A	; 10
    2baa:	09 f4       	brne	.+2      	; 0x2bae <Castle()+0x62>
    2bac:	a5 c0       	rjmp	.+330    	; 0x2cf8 <Castle()+0x1ac>
    2bae:	8f 30       	cpi	r24, 0x0F	; 15
    2bb0:	71 f7       	brne	.-36     	; 0x2b8e <Castle()+0x42>
    2bb2:	64 e1       	ldi	r22, 0x14	; 20
    2bb4:	87 ee       	ldi	r24, 0xE7	; 231
    2bb6:	90 e4       	ldi	r25, 0x40	; 64
    2bb8:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    2bbc:	e8 cf       	rjmp	.-48     	; 0x2b8e <Castle()+0x42>
    2bbe:	83 32       	cpi	r24, 0x23	; 35
    2bc0:	09 f4       	brne	.+2      	; 0x2bc4 <Castle()+0x78>
    2bc2:	b5 c0       	rjmp	.+362    	; 0x2d2e <Castle()+0x1e2>
    2bc4:	b0 f4       	brcc	.+44     	; 0x2bf2 <Castle()+0xa6>
    2bc6:	89 31       	cpi	r24, 0x19	; 25
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <Castle()+0x80>
    2bca:	ab c0       	rjmp	.+342    	; 0x2d22 <Castle()+0x1d6>
    2bcc:	8e 31       	cpi	r24, 0x1E	; 30
    2bce:	f9 f6       	brne	.-66     	; 0x2b8e <Castle()+0x42>
    2bd0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2bd4:	7c 01       	movw	r14, r24
    2bd6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2bda:	8c 01       	movw	r16, r24
    2bdc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2be0:	9c 01       	movw	r18, r24
    2be2:	42 e3       	ldi	r20, 0x32	; 50
    2be4:	50 e0       	ldi	r21, 0x00	; 0
    2be6:	63 e2       	ldi	r22, 0x23	; 35
    2be8:	86 e3       	ldi	r24, 0x36	; 54
    2bea:	97 e0       	ldi	r25, 0x07	; 7
    2bec:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2bf0:	ce cf       	rjmp	.-100    	; 0x2b8e <Castle()+0x42>
    2bf2:	88 32       	cpi	r24, 0x28	; 40
    2bf4:	09 f4       	brne	.+2      	; 0x2bf8 <Castle()+0xac>
    2bf6:	a1 c0       	rjmp	.+322    	; 0x2d3a <Castle()+0x1ee>
    2bf8:	8d 32       	cpi	r24, 0x2D	; 45
    2bfa:	49 f6       	brne	.-110    	; 0x2b8e <Castle()+0x42>
    2bfc:	62 e3       	ldi	r22, 0x32	; 50
    2bfe:	8b e7       	ldi	r24, 0x7B	; 123
    2c00:	92 e3       	ldi	r25, 0x32	; 50
    2c02:	da cf       	rjmp	.-76     	; 0x2bb8 <Castle()+0x6c>
    2c04:	86 34       	cpi	r24, 0x46	; 70
    2c06:	09 f4       	brne	.+2      	; 0x2c0a <Castle()+0xbe>
    2c08:	b5 c0       	rjmp	.+362    	; 0x2d74 <Castle()+0x228>
    2c0a:	50 f5       	brcc	.+84     	; 0x2c60 <Castle()+0x114>
    2c0c:	8a 33       	cpi	r24, 0x3A	; 58
    2c0e:	09 f4       	brne	.+2      	; 0x2c12 <Castle()+0xc6>
    2c10:	a3 c0       	rjmp	.+326    	; 0x2d58 <Castle()+0x20c>
    2c12:	98 f4       	brcc	.+38     	; 0x2c3a <Castle()+0xee>
    2c14:	87 33       	cpi	r24, 0x37	; 55
    2c16:	09 f4       	brne	.+2      	; 0x2c1a <Castle()+0xce>
    2c18:	97 c0       	rjmp	.+302    	; 0x2d48 <Castle()+0x1fc>
    2c1a:	88 33       	cpi	r24, 0x38	; 56
    2c1c:	09 f0       	breq	.+2      	; 0x2c20 <Castle()+0xd4>
    2c1e:	b7 cf       	rjmp	.-146    	; 0x2b8e <Castle()+0x42>
    2c20:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2c24:	7c 01       	movw	r14, r24
    2c26:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2c2a:	8c 01       	movw	r16, r24
    2c2c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2c30:	9c 01       	movw	r18, r24
    2c32:	42 e3       	ldi	r20, 0x32	; 50
    2c34:	50 e0       	ldi	r21, 0x00	; 0
    2c36:	6a e3       	ldi	r22, 0x3A	; 58
    2c38:	d7 cf       	rjmp	.-82     	; 0x2be8 <Castle()+0x9c>
    2c3a:	8c 33       	cpi	r24, 0x3C	; 60
    2c3c:	09 f4       	brne	.+2      	; 0x2c40 <Castle()+0xf4>
    2c3e:	92 c0       	rjmp	.+292    	; 0x2d64 <Castle()+0x218>
    2c40:	81 34       	cpi	r24, 0x41	; 65
    2c42:	09 f0       	breq	.+2      	; 0x2c46 <Castle()+0xfa>
    2c44:	a4 cf       	rjmp	.-184    	; 0x2b8e <Castle()+0x42>
    2c46:	ee 24       	eor	r14, r14
    2c48:	ea 94       	dec	r14
    2c4a:	f1 2c       	mov	r15, r1
    2c4c:	0f ef       	ldi	r16, 0xFF	; 255
    2c4e:	10 e0       	ldi	r17, 0x00	; 0
    2c50:	2f ef       	ldi	r18, 0xFF	; 255
    2c52:	30 e0       	ldi	r19, 0x00	; 0
    2c54:	42 e3       	ldi	r20, 0x32	; 50
    2c56:	50 e0       	ldi	r21, 0x00	; 0
    2c58:	66 e4       	ldi	r22, 0x46	; 70
    2c5a:	8c e6       	ldi	r24, 0x6C	; 108
    2c5c:	9e e0       	ldi	r25, 0x0E	; 14
    2c5e:	c6 cf       	rjmp	.-116    	; 0x2bec <Castle()+0xa0>
    2c60:	85 35       	cpi	r24, 0x55	; 85
    2c62:	09 f4       	brne	.+2      	; 0x2c66 <Castle()+0x11a>
    2c64:	9c c0       	rjmp	.+312    	; 0x2d9e <Castle()+0x252>
    2c66:	98 f4       	brcc	.+38     	; 0x2c8e <Castle()+0x142>
    2c68:	8b 34       	cpi	r24, 0x4B	; 75
    2c6a:	09 f4       	brne	.+2      	; 0x2c6e <Castle()+0x122>
    2c6c:	92 c0       	rjmp	.+292    	; 0x2d92 <Castle()+0x246>
    2c6e:	80 35       	cpi	r24, 0x50	; 80
    2c70:	09 f0       	breq	.+2      	; 0x2c74 <Castle()+0x128>
    2c72:	8d cf       	rjmp	.-230    	; 0x2b8e <Castle()+0x42>
    2c74:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2c78:	7c 01       	movw	r14, r24
    2c7a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2c7e:	8c 01       	movw	r16, r24
    2c80:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2c84:	9c 01       	movw	r18, r24
    2c86:	42 e3       	ldi	r20, 0x32	; 50
    2c88:	50 e0       	ldi	r21, 0x00	; 0
    2c8a:	65 e5       	ldi	r22, 0x55	; 85
    2c8c:	e6 cf       	rjmp	.-52     	; 0x2c5a <Castle()+0x10e>
    2c8e:	8f 35       	cpi	r24, 0x5F	; 95
    2c90:	09 f4       	brne	.+2      	; 0x2c94 <Castle()+0x148>
    2c92:	8c c0       	rjmp	.+280    	; 0x2dac <Castle()+0x260>
    2c94:	84 36       	cpi	r24, 0x64	; 100
    2c96:	09 f4       	brne	.+2      	; 0x2c9a <Castle()+0x14e>
    2c98:	95 c0       	rjmp	.+298    	; 0x2dc4 <Castle()+0x278>
    2c9a:	8a 35       	cpi	r24, 0x5A	; 90
    2c9c:	09 f0       	breq	.+2      	; 0x2ca0 <Castle()+0x154>
    2c9e:	77 cf       	rjmp	.-274    	; 0x2b8e <Castle()+0x42>
    2ca0:	42 ec       	ldi	r20, 0xC2	; 194
    2ca2:	51 e0       	ldi	r21, 0x01	; 1
    2ca4:	6f e5       	ldi	r22, 0x5F	; 95
    2ca6:	87 ec       	ldi	r24, 0xC7	; 199
    2ca8:	9f e6       	ldi	r25, 0x6F	; 111
    2caa:	23 c0       	rjmp	.+70     	; 0x2cf2 <Castle()+0x1a6>
    2cac:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2cb0:	7c 01       	movw	r14, r24
    2cb2:	6d e4       	ldi	r22, 0x4D	; 77
    2cb4:	71 e0       	ldi	r23, 0x01	; 1
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	01 96       	adiw	r24, 0x01	; 1
    2cba:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    2cbe:	01 e0       	ldi	r16, 0x01	; 1
    2cc0:	97 01       	movw	r18, r14
    2cc2:	44 e6       	ldi	r20, 0x64	; 100
    2cc4:	50 e0       	ldi	r21, 0x00	; 0
    2cc6:	6b e7       	ldi	r22, 0x7B	; 123
    2cc8:	72 e3       	ldi	r23, 0x32	; 50
    2cca:	ce 01       	movw	r24, r28
    2ccc:	01 96       	adiw	r24, 0x01	; 1
    2cce:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    2cd2:	ce 01       	movw	r24, r28
    2cd4:	01 96       	adiw	r24, 0x01	; 1
    2cd6:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    2cda:	59 cf       	rjmp	.-334    	; 0x2b8e <Castle()+0x42>
    2cdc:	65 e0       	ldi	r22, 0x05	; 5
    2cde:	89 ed       	ldi	r24, 0xD9	; 217
    2ce0:	9c e1       	ldi	r25, 0x1C	; 28
    2ce2:	0e 94 25 06 	call	0xc4a	; 0xc4a <progBlingBlingColoring(unsigned int, unsigned char)>
    2ce6:	53 cf       	rjmp	.-346    	; 0x2b8e <Castle()+0x42>
    2ce8:	4d e9       	ldi	r20, 0x9D	; 157
    2cea:	53 e0       	ldi	r21, 0x03	; 3
    2cec:	6a e0       	ldi	r22, 0x0A	; 10
    2cee:	89 ed       	ldi	r24, 0xD9	; 217
    2cf0:	9c e1       	ldi	r25, 0x1C	; 28
    2cf2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    2cf6:	4b cf       	rjmp	.-362    	; 0x2b8e <Castle()+0x42>
    2cf8:	6f e0       	ldi	r22, 0x0F	; 15
    2cfa:	82 e6       	ldi	r24, 0x62	; 98
    2cfc:	93 e7       	ldi	r25, 0x73	; 115
    2cfe:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    2d02:	45 cf       	rjmp	.-374    	; 0x2b8e <Castle()+0x42>
    2d04:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2d08:	59 e1       	ldi	r21, 0x19	; 25
    2d0a:	e5 2e       	mov	r14, r21
    2d0c:	8c 01       	movw	r16, r24
    2d0e:	26 e3       	ldi	r18, 0x36	; 54
    2d10:	37 e0       	ldi	r19, 0x07	; 7
    2d12:	45 e4       	ldi	r20, 0x45	; 69
    2d14:	51 e0       	ldi	r21, 0x01	; 1
    2d16:	66 e0       	ldi	r22, 0x06	; 6
    2d18:	70 e0       	ldi	r23, 0x00	; 0
    2d1a:	80 e4       	ldi	r24, 0x40	; 64
    2d1c:	99 e0       	ldi	r25, 0x09	; 9
    2d1e:	27 d9       	rcall	.-3506   	; 0x1f6e <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    2d20:	36 cf       	rjmp	.-404    	; 0x2b8e <Castle()+0x42>
    2d22:	42 ec       	ldi	r20, 0xC2	; 194
    2d24:	51 e0       	ldi	r21, 0x01	; 1
    2d26:	6e e1       	ldi	r22, 0x1E	; 30
    2d28:	8b e7       	ldi	r24, 0x7B	; 123
    2d2a:	92 e3       	ldi	r25, 0x32	; 50
    2d2c:	e2 cf       	rjmp	.-60     	; 0x2cf2 <Castle()+0x1a6>
    2d2e:	42 ec       	ldi	r20, 0xC2	; 194
    2d30:	51 e0       	ldi	r21, 0x01	; 1
    2d32:	68 e2       	ldi	r22, 0x28	; 40
    2d34:	81 eb       	ldi	r24, 0xB1	; 177
    2d36:	99 e3       	ldi	r25, 0x39	; 57
    2d38:	dc cf       	rjmp	.-72     	; 0x2cf2 <Castle()+0x1a6>
    2d3a:	6d e2       	ldi	r22, 0x2D	; 45
    2d3c:	de cf       	rjmp	.-68     	; 0x2cfa <Castle()+0x1ae>
    2d3e:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2d42:	47 e3       	ldi	r20, 0x37	; 55
    2d44:	e4 2e       	mov	r14, r20
    2d46:	e2 cf       	rjmp	.-60     	; 0x2d0c <Castle()+0x1c0>
    2d48:	42 ec       	ldi	r20, 0xC2	; 194
    2d4a:	51 e0       	ldi	r21, 0x01	; 1
    2d4c:	68 e3       	ldi	r22, 0x38	; 56
    2d4e:	8b e7       	ldi	r24, 0x7B	; 123
    2d50:	92 e3       	ldi	r25, 0x32	; 50
    2d52:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    2d56:	1b cf       	rjmp	.-458    	; 0x2b8e <Castle()+0x42>
    2d58:	42 ec       	ldi	r20, 0xC2	; 194
    2d5a:	51 e0       	ldi	r21, 0x01	; 1
    2d5c:	6c e3       	ldi	r22, 0x3C	; 60
    2d5e:	81 eb       	ldi	r24, 0xB1	; 177
    2d60:	99 e3       	ldi	r25, 0x39	; 57
    2d62:	f7 cf       	rjmp	.-18     	; 0x2d52 <Castle()+0x206>
    2d64:	41 e4       	ldi	r20, 0x41	; 65
    2d66:	6a e3       	ldi	r22, 0x3A	; 58
    2d68:	77 e0       	ldi	r23, 0x07	; 7
    2d6a:	86 e8       	ldi	r24, 0x86	; 134
    2d6c:	9d e4       	ldi	r25, 0x4D	; 77
    2d6e:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    2d72:	0d cf       	rjmp	.-486    	; 0x2b8e <Castle()+0x42>
    2d74:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2d78:	7c 01       	movw	r14, r24
    2d7a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2d7e:	8c 01       	movw	r16, r24
    2d80:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2d84:	9c 01       	movw	r18, r24
    2d86:	42 e3       	ldi	r20, 0x32	; 50
    2d88:	50 e0       	ldi	r21, 0x00	; 0
    2d8a:	6b e4       	ldi	r22, 0x4B	; 75
    2d8c:	80 e7       	ldi	r24, 0x70	; 112
    2d8e:	97 e1       	ldi	r25, 0x17	; 23
    2d90:	2d cf       	rjmp	.-422    	; 0x2bec <Castle()+0xa0>
    2d92:	40 e5       	ldi	r20, 0x50	; 80
    2d94:	6a e3       	ldi	r22, 0x3A	; 58
    2d96:	77 e0       	ldi	r23, 0x07	; 7
    2d98:	81 eb       	ldi	r24, 0xB1	; 177
    2d9a:	99 e3       	ldi	r25, 0x39	; 57
    2d9c:	e8 cf       	rjmp	.-48     	; 0x2d6e <Castle()+0x222>
    2d9e:	4a e5       	ldi	r20, 0x5A	; 90
    2da0:	65 e0       	ldi	r22, 0x05	; 5
    2da2:	82 e6       	ldi	r24, 0x62	; 98
    2da4:	93 e7       	ldi	r25, 0x73	; 115
    2da6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    2daa:	f1 ce       	rjmp	.-542    	; 0x2b8e <Castle()+0x42>
    2dac:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2db0:	29 e0       	ldi	r18, 0x09	; 9
    2db2:	e2 2e       	mov	r14, r18
    2db4:	8c 01       	movw	r16, r24
    2db6:	20 e6       	ldi	r18, 0x60	; 96
    2db8:	3a ee       	ldi	r19, 0xEA	; 234
    2dba:	45 e4       	ldi	r20, 0x45	; 69
    2dbc:	51 e0       	ldi	r21, 0x01	; 1
    2dbe:	64 e6       	ldi	r22, 0x64	; 100
    2dc0:	70 e0       	ldi	r23, 0x00	; 0
    2dc2:	ab cf       	rjmp	.-170    	; 0x2d1a <Castle()+0x1ce>
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	8d e0       	ldi	r24, 0x0D	; 13
    2dc8:	90 e1       	ldi	r25, 0x10	; 16
    2dca:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    2dce:	80 e0       	ldi	r24, 0x00	; 0
    2dd0:	47 dc       	rcall	.-1906   	; 0x2660 <switchToSong(unsigned char)>
    2dd2:	dd ce       	rjmp	.-582    	; 0x2b8e <Castle()+0x42>

00002dd4 <TooClose()>:
    2dd4:	ef 92       	push	r14
    2dd6:	ff 92       	push	r15
    2dd8:	0f 93       	push	r16
    2dda:	1f 93       	push	r17
    2ddc:	cf 93       	push	r28
    2dde:	df 93       	push	r29
    2de0:	00 d0       	rcall	.+0      	; 0x2de2 <TooClose()+0xe>
    2de2:	00 d0       	rcall	.+0      	; 0x2de4 <TooClose()+0x10>
    2de4:	00 d0       	rcall	.+0      	; 0x2de6 <TooClose()+0x12>
    2de6:	1f 92       	push	r1
    2de8:	cd b7       	in	r28, 0x3d	; 61
    2dea:	de b7       	in	r29, 0x3e	; 62
    2dec:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    2df0:	8e 31       	cpi	r24, 0x1E	; 30
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <TooClose()+0x22>
    2df4:	9e c0       	rjmp	.+316    	; 0x2f32 <TooClose()+0x15e>
    2df6:	f0 f5       	brcc	.+124    	; 0x2e74 <TooClose()+0xa0>
    2df8:	8a 30       	cpi	r24, 0x0A	; 10
    2dfa:	09 f4       	brne	.+2      	; 0x2dfe <TooClose()+0x2a>
    2dfc:	7d c0       	rjmp	.+250    	; 0x2ef8 <TooClose()+0x124>
    2dfe:	60 f5       	brcc	.+88     	; 0x2e58 <TooClose()+0x84>
    2e00:	82 30       	cpi	r24, 0x02	; 2
    2e02:	09 f4       	brne	.+2      	; 0x2e06 <TooClose()+0x32>
    2e04:	69 c0       	rjmp	.+210    	; 0x2ed8 <TooClose()+0x104>
    2e06:	85 30       	cpi	r24, 0x05	; 5
    2e08:	09 f4       	brne	.+2      	; 0x2e0c <TooClose()+0x38>
    2e0a:	6e c0       	rjmp	.+220    	; 0x2ee8 <TooClose()+0x114>
    2e0c:	81 11       	cpse	r24, r1
    2e0e:	17 c0       	rjmp	.+46     	; 0x2e3e <TooClose()+0x6a>
    2e10:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2e14:	7c 01       	movw	r14, r24
    2e16:	6e e5       	ldi	r22, 0x5E	; 94
    2e18:	71 e0       	ldi	r23, 0x01	; 1
    2e1a:	ce 01       	movw	r24, r28
    2e1c:	01 96       	adiw	r24, 0x01	; 1
    2e1e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    2e22:	02 e0       	ldi	r16, 0x02	; 2
    2e24:	97 01       	movw	r18, r14
    2e26:	4b e4       	ldi	r20, 0x4B	; 75
    2e28:	50 e0       	ldi	r21, 0x00	; 0
    2e2a:	61 e8       	ldi	r22, 0x81	; 129
    2e2c:	7e e2       	ldi	r23, 0x2E	; 46
    2e2e:	ce 01       	movw	r24, r28
    2e30:	01 96       	adiw	r24, 0x01	; 1
    2e32:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    2e36:	ce 01       	movw	r24, r28
    2e38:	01 96       	adiw	r24, 0x01	; 1
    2e3a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    2e3e:	27 96       	adiw	r28, 0x07	; 7
    2e40:	0f b6       	in	r0, 0x3f	; 63
    2e42:	f8 94       	cli
    2e44:	de bf       	out	0x3e, r29	; 62
    2e46:	0f be       	out	0x3f, r0	; 63
    2e48:	cd bf       	out	0x3d, r28	; 61
    2e4a:	df 91       	pop	r29
    2e4c:	cf 91       	pop	r28
    2e4e:	1f 91       	pop	r17
    2e50:	0f 91       	pop	r16
    2e52:	ff 90       	pop	r15
    2e54:	ef 90       	pop	r14
    2e56:	08 95       	ret
    2e58:	84 31       	cpi	r24, 0x14	; 20
    2e5a:	09 f4       	brne	.+2      	; 0x2e5e <TooClose()+0x8a>
    2e5c:	55 c0       	rjmp	.+170    	; 0x2f08 <TooClose()+0x134>
    2e5e:	89 31       	cpi	r24, 0x19	; 25
    2e60:	09 f4       	brne	.+2      	; 0x2e64 <TooClose()+0x90>
    2e62:	58 c0       	rjmp	.+176    	; 0x2f14 <TooClose()+0x140>
    2e64:	8f 30       	cpi	r24, 0x0F	; 15
    2e66:	59 f7       	brne	.-42     	; 0x2e3e <TooClose()+0x6a>
    2e68:	46 eb       	ldi	r20, 0xB6	; 182
    2e6a:	53 e0       	ldi	r21, 0x03	; 3
    2e6c:	64 e1       	ldi	r22, 0x14	; 20
    2e6e:	89 e7       	ldi	r24, 0x79	; 121
    2e70:	9b e3       	ldi	r25, 0x3B	; 59
    2e72:	37 c0       	rjmp	.+110    	; 0x2ee2 <TooClose()+0x10e>
    2e74:	82 33       	cpi	r24, 0x32	; 50
    2e76:	09 f4       	brne	.+2      	; 0x2e7a <TooClose()+0xa6>
    2e78:	71 c0       	rjmp	.+226    	; 0x2f5c <TooClose()+0x188>
    2e7a:	b8 f4       	brcc	.+46     	; 0x2eaa <TooClose()+0xd6>
    2e7c:	88 32       	cpi	r24, 0x28	; 40
    2e7e:	09 f4       	brne	.+2      	; 0x2e82 <TooClose()+0xae>
    2e80:	60 c0       	rjmp	.+192    	; 0x2f42 <TooClose()+0x16e>
    2e82:	8d 32       	cpi	r24, 0x2D	; 45
    2e84:	09 f4       	brne	.+2      	; 0x2e88 <TooClose()+0xb4>
    2e86:	63 c0       	rjmp	.+198    	; 0x2f4e <TooClose()+0x17a>
    2e88:	83 32       	cpi	r24, 0x23	; 35
    2e8a:	c9 f6       	brne	.-78     	; 0x2e3e <TooClose()+0x6a>
    2e8c:	ee 24       	eor	r14, r14
    2e8e:	ea 94       	dec	r14
    2e90:	f1 2c       	mov	r15, r1
    2e92:	0f ef       	ldi	r16, 0xFF	; 255
    2e94:	10 e0       	ldi	r17, 0x00	; 0
    2e96:	2f ef       	ldi	r18, 0xFF	; 255
    2e98:	30 e0       	ldi	r19, 0x00	; 0
    2e9a:	4b e4       	ldi	r20, 0x4B	; 75
    2e9c:	50 e0       	ldi	r21, 0x00	; 0
    2e9e:	68 e2       	ldi	r22, 0x28	; 40
    2ea0:	89 e7       	ldi	r24, 0x79	; 121
    2ea2:	9b e3       	ldi	r25, 0x3B	; 59
    2ea4:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2ea8:	ca cf       	rjmp	.-108    	; 0x2e3e <TooClose()+0x6a>
    2eaa:	8c 33       	cpi	r24, 0x3C	; 60
    2eac:	09 f4       	brne	.+2      	; 0x2eb0 <TooClose()+0xdc>
    2eae:	5c c0       	rjmp	.+184    	; 0x2f68 <TooClose()+0x194>
    2eb0:	84 36       	cpi	r24, 0x64	; 100
    2eb2:	09 f4       	brne	.+2      	; 0x2eb6 <TooClose()+0xe2>
    2eb4:	5f c0       	rjmp	.+190    	; 0x2f74 <TooClose()+0x1a0>
    2eb6:	87 33       	cpi	r24, 0x37	; 55
    2eb8:	11 f6       	brne	.-124    	; 0x2e3e <TooClose()+0x6a>
    2eba:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2ebe:	7c 01       	movw	r14, r24
    2ec0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2ec4:	8c 01       	movw	r16, r24
    2ec6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    2eca:	9c 01       	movw	r18, r24
    2ecc:	4b e4       	ldi	r20, 0x4B	; 75
    2ece:	50 e0       	ldi	r21, 0x00	; 0
    2ed0:	6c e3       	ldi	r22, 0x3C	; 60
    2ed2:	80 eb       	ldi	r24, 0xB0	; 176
    2ed4:	9d e1       	ldi	r25, 0x1D	; 29
    2ed6:	e6 cf       	rjmp	.-52     	; 0x2ea4 <TooClose()+0xd0>
    2ed8:	46 eb       	ldi	r20, 0xB6	; 182
    2eda:	53 e0       	ldi	r21, 0x03	; 3
    2edc:	65 e0       	ldi	r22, 0x05	; 5
    2ede:	82 e7       	ldi	r24, 0x72	; 114
    2ee0:	94 e6       	ldi	r25, 0x64	; 100
    2ee2:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    2ee6:	ab cf       	rjmp	.-170    	; 0x2e3e <TooClose()+0x6a>
    2ee8:	4b ed       	ldi	r20, 0xDB	; 219
    2eea:	51 e0       	ldi	r21, 0x01	; 1
    2eec:	6a e0       	ldi	r22, 0x0A	; 10
    2eee:	84 e8       	ldi	r24, 0x84	; 132
    2ef0:	92 eb       	ldi	r25, 0xB2	; 178
    2ef2:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    2ef6:	a3 cf       	rjmp	.-186    	; 0x2e3e <TooClose()+0x6a>
    2ef8:	46 eb       	ldi	r20, 0xB6	; 182
    2efa:	53 e0       	ldi	r21, 0x03	; 3
    2efc:	6f e0       	ldi	r22, 0x0F	; 15
    2efe:	8b e0       	ldi	r24, 0x0B	; 11
    2f00:	97 e7       	ldi	r25, 0x77	; 119
    2f02:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    2f06:	9b cf       	rjmp	.-202    	; 0x2e3e <TooClose()+0x6a>
    2f08:	4b ed       	ldi	r20, 0xDB	; 219
    2f0a:	51 e0       	ldi	r21, 0x01	; 1
    2f0c:	69 e1       	ldi	r22, 0x19	; 25
    2f0e:	8b e0       	ldi	r24, 0x0B	; 11
    2f10:	97 e7       	ldi	r25, 0x77	; 119
    2f12:	ef cf       	rjmp	.-34     	; 0x2ef2 <TooClose()+0x11e>
    2f14:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    2f18:	2e e1       	ldi	r18, 0x1E	; 30
    2f1a:	e2 2e       	mov	r14, r18
    2f1c:	8c 01       	movw	r16, r24
    2f1e:	2b e2       	ldi	r18, 0x2B	; 43
    2f20:	36 e1       	ldi	r19, 0x16	; 22
    2f22:	4b ed       	ldi	r20, 0xDB	; 219
    2f24:	51 e0       	ldi	r21, 0x01	; 1
    2f26:	6a e0       	ldi	r22, 0x0A	; 10
    2f28:	70 e0       	ldi	r23, 0x00	; 0
    2f2a:	8a e6       	ldi	r24, 0x6A	; 106
    2f2c:	99 e0       	ldi	r25, 0x09	; 9
    2f2e:	1f d8       	rcall	.-4034   	; 0x1f6e <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    2f30:	86 cf       	rjmp	.-244    	; 0x2e3e <TooClose()+0x6a>
    2f32:	43 e2       	ldi	r20, 0x23	; 35
    2f34:	6c e6       	ldi	r22, 0x6C	; 108
    2f36:	77 e0       	ldi	r23, 0x07	; 7
    2f38:	87 ec       	ldi	r24, 0xC7	; 199
    2f3a:	90 e6       	ldi	r25, 0x60	; 96
    2f3c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    2f40:	7e cf       	rjmp	.-260    	; 0x2e3e <TooClose()+0x6a>
    2f42:	48 eb       	ldi	r20, 0xB8	; 184
    2f44:	53 e0       	ldi	r21, 0x03	; 3
    2f46:	6d e2       	ldi	r22, 0x2D	; 45
    2f48:	89 e7       	ldi	r24, 0x79	; 121
    2f4a:	9b e3       	ldi	r25, 0x3B	; 59
    2f4c:	da cf       	rjmp	.-76     	; 0x2f02 <TooClose()+0x12e>
    2f4e:	42 e3       	ldi	r20, 0x32	; 50
    2f50:	65 e0       	ldi	r22, 0x05	; 5
    2f52:	80 eb       	ldi	r24, 0xB0	; 176
    2f54:	9d e1       	ldi	r25, 0x1D	; 29
    2f56:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    2f5a:	71 cf       	rjmp	.-286    	; 0x2e3e <TooClose()+0x6a>
    2f5c:	46 eb       	ldi	r20, 0xB6	; 182
    2f5e:	53 e0       	ldi	r21, 0x03	; 3
    2f60:	67 e3       	ldi	r22, 0x37	; 55
    2f62:	80 eb       	ldi	r24, 0xB0	; 176
    2f64:	9d e1       	ldi	r25, 0x1D	; 29
    2f66:	cd cf       	rjmp	.-102    	; 0x2f02 <TooClose()+0x12e>
    2f68:	64 e6       	ldi	r22, 0x64	; 100
    2f6a:	8f ef       	ldi	r24, 0xFF	; 255
    2f6c:	9f ef       	ldi	r25, 0xFF	; 255
    2f6e:	0e 94 25 06 	call	0xc4a	; 0xc4a <progBlingBlingColoring(unsigned int, unsigned char)>
    2f72:	65 cf       	rjmp	.-310    	; 0x2e3e <TooClose()+0x6a>
    2f74:	60 e0       	ldi	r22, 0x00	; 0
    2f76:	8d e0       	ldi	r24, 0x0D	; 13
    2f78:	90 e1       	ldi	r25, 0x10	; 16
    2f7a:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    2f7e:	80 e0       	ldi	r24, 0x00	; 0
    2f80:	6f db       	rcall	.-2338   	; 0x2660 <switchToSong(unsigned char)>
    2f82:	5d cf       	rjmp	.-326    	; 0x2e3e <TooClose()+0x6a>

00002f84 <Pokerface()>:
    2f84:	ef 92       	push	r14
    2f86:	ff 92       	push	r15
    2f88:	0f 93       	push	r16
    2f8a:	1f 93       	push	r17
    2f8c:	cf 93       	push	r28
    2f8e:	df 93       	push	r29
    2f90:	00 d0       	rcall	.+0      	; 0x2f92 <Pokerface()+0xe>
    2f92:	00 d0       	rcall	.+0      	; 0x2f94 <Pokerface()+0x10>
    2f94:	00 d0       	rcall	.+0      	; 0x2f96 <Pokerface()+0x12>
    2f96:	1f 92       	push	r1
    2f98:	cd b7       	in	r28, 0x3d	; 61
    2f9a:	de b7       	in	r29, 0x3e	; 62
    2f9c:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    2fa0:	8e 31       	cpi	r24, 0x1E	; 30
    2fa2:	09 f4       	brne	.+2      	; 0x2fa6 <Pokerface()+0x22>
    2fa4:	ae c0       	rjmp	.+348    	; 0x3102 <Pokerface()+0x17e>
    2fa6:	a0 f5       	brcc	.+104    	; 0x3010 <Pokerface()+0x8c>
    2fa8:	85 30       	cpi	r24, 0x05	; 5
    2faa:	09 f4       	brne	.+2      	; 0x2fae <Pokerface()+0x2a>
    2fac:	91 c0       	rjmp	.+290    	; 0x30d0 <Pokerface()+0x14c>
    2fae:	b8 f4       	brcc	.+46     	; 0x2fde <Pokerface()+0x5a>
    2fb0:	81 30       	cpi	r24, 0x01	; 1
    2fb2:	09 f4       	brne	.+2      	; 0x2fb6 <Pokerface()+0x32>
    2fb4:	87 c0       	rjmp	.+270    	; 0x30c4 <Pokerface()+0x140>
    2fb6:	08 f4       	brcc	.+2      	; 0x2fba <Pokerface()+0x36>
    2fb8:	6d c0       	rjmp	.+218    	; 0x3094 <Pokerface()+0x110>
    2fba:	45 e0       	ldi	r20, 0x05	; 5
    2fbc:	64 e0       	ldi	r22, 0x04	; 4
    2fbe:	82 30       	cpi	r24, 0x02	; 2
    2fc0:	09 f4       	brne	.+2      	; 0x2fc4 <Pokerface()+0x40>
    2fc2:	82 c0       	rjmp	.+260    	; 0x30c8 <Pokerface()+0x144>
    2fc4:	27 96       	adiw	r28, 0x07	; 7
    2fc6:	0f b6       	in	r0, 0x3f	; 63
    2fc8:	f8 94       	cli
    2fca:	de bf       	out	0x3e, r29	; 62
    2fcc:	0f be       	out	0x3f, r0	; 63
    2fce:	cd bf       	out	0x3d, r28	; 61
    2fd0:	df 91       	pop	r29
    2fd2:	cf 91       	pop	r28
    2fd4:	1f 91       	pop	r17
    2fd6:	0f 91       	pop	r16
    2fd8:	ff 90       	pop	r15
    2fda:	ef 90       	pop	r14
    2fdc:	08 95       	ret
    2fde:	8f 30       	cpi	r24, 0x0F	; 15
    2fe0:	09 f4       	brne	.+2      	; 0x2fe4 <Pokerface()+0x60>
    2fe2:	7a c0       	rjmp	.+244    	; 0x30d8 <Pokerface()+0x154>
    2fe4:	40 f4       	brcc	.+16     	; 0x2ff6 <Pokerface()+0x72>
    2fe6:	8a 30       	cpi	r24, 0x0A	; 10
    2fe8:	69 f7       	brne	.-38     	; 0x2fc4 <Pokerface()+0x40>
    2fea:	6f e0       	ldi	r22, 0x0F	; 15
    2fec:	86 e0       	ldi	r24, 0x06	; 6
    2fee:	9f e3       	ldi	r25, 0x3F	; 63
    2ff0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    2ff4:	e7 cf       	rjmp	.-50     	; 0x2fc4 <Pokerface()+0x40>
    2ff6:	84 31       	cpi	r24, 0x14	; 20
    2ff8:	09 f4       	brne	.+2      	; 0x2ffc <Pokerface()+0x78>
    2ffa:	72 c0       	rjmp	.+228    	; 0x30e0 <Pokerface()+0x15c>
    2ffc:	44 ef       	ldi	r20, 0xF4	; 244
    2ffe:	51 e0       	ldi	r21, 0x01	; 1
    3000:	6e e1       	ldi	r22, 0x1E	; 30
    3002:	89 31       	cpi	r24, 0x19	; 25
    3004:	f9 f6       	brne	.-66     	; 0x2fc4 <Pokerface()+0x40>
    3006:	86 e0       	ldi	r24, 0x06	; 6
    3008:	9f e3       	ldi	r25, 0x3F	; 63
    300a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    300e:	da cf       	rjmp	.-76     	; 0x2fc4 <Pokerface()+0x40>
    3010:	87 33       	cpi	r24, 0x37	; 55
    3012:	09 f4       	brne	.+2      	; 0x3016 <Pokerface()+0x92>
    3014:	8e c0       	rjmp	.+284    	; 0x3132 <Pokerface()+0x1ae>
    3016:	d0 f4       	brcc	.+52     	; 0x304c <Pokerface()+0xc8>
    3018:	88 32       	cpi	r24, 0x28	; 40
    301a:	09 f4       	brne	.+2      	; 0x301e <Pokerface()+0x9a>
    301c:	77 c0       	rjmp	.+238    	; 0x310c <Pokerface()+0x188>
    301e:	50 f4       	brcc	.+20     	; 0x3034 <Pokerface()+0xb0>
    3020:	44 ef       	ldi	r20, 0xF4	; 244
    3022:	51 e0       	ldi	r21, 0x01	; 1
    3024:	68 e2       	ldi	r22, 0x28	; 40
    3026:	83 32       	cpi	r24, 0x23	; 35
    3028:	69 f6       	brne	.-102    	; 0x2fc4 <Pokerface()+0x40>
    302a:	86 e0       	ldi	r24, 0x06	; 6
    302c:	9f e3       	ldi	r25, 0x3F	; 63
    302e:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3032:	c8 cf       	rjmp	.-112    	; 0x2fc4 <Pokerface()+0x40>
    3034:	8d 32       	cpi	r24, 0x2D	; 45
    3036:	09 f4       	brne	.+2      	; 0x303a <Pokerface()+0xb6>
    3038:	76 c0       	rjmp	.+236    	; 0x3126 <Pokerface()+0x1a2>
    303a:	82 33       	cpi	r24, 0x32	; 50
    303c:	19 f6       	brne	.-122    	; 0x2fc4 <Pokerface()+0x40>
    303e:	47 e3       	ldi	r20, 0x37	; 55
    3040:	67 e0       	ldi	r22, 0x07	; 7
    3042:	8d ef       	ldi	r24, 0xFD	; 253
    3044:	9e e3       	ldi	r25, 0x3E	; 62
    3046:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    304a:	bc cf       	rjmp	.-136    	; 0x2fc4 <Pokerface()+0x40>
    304c:	81 34       	cpi	r24, 0x41	; 65
    304e:	09 f4       	brne	.+2      	; 0x3052 <Pokerface()+0xce>
    3050:	74 c0       	rjmp	.+232    	; 0x313a <Pokerface()+0x1b6>
    3052:	90 f4       	brcc	.+36     	; 0x3078 <Pokerface()+0xf4>
    3054:	8c 33       	cpi	r24, 0x3C	; 60
    3056:	09 f0       	breq	.+2      	; 0x305a <Pokerface()+0xd6>
    3058:	b5 cf       	rjmp	.-150    	; 0x2fc4 <Pokerface()+0x40>
    305a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    305e:	7c 01       	movw	r14, r24
    3060:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3064:	8c 01       	movw	r16, r24
    3066:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    306a:	9c 01       	movw	r18, r24
    306c:	4b e4       	ldi	r20, 0x4B	; 75
    306e:	50 e0       	ldi	r21, 0x00	; 0
    3070:	61 e4       	ldi	r22, 0x41	; 65
    3072:	84 e4       	ldi	r24, 0x44	; 68
    3074:	9f e2       	ldi	r25, 0x2F	; 47
    3076:	42 c0       	rjmp	.+132    	; 0x30fc <Pokerface()+0x178>
    3078:	86 34       	cpi	r24, 0x46	; 70
    307a:	09 f4       	brne	.+2      	; 0x307e <Pokerface()+0xfa>
    307c:	63 c0       	rjmp	.+198    	; 0x3144 <Pokerface()+0x1c0>
    307e:	84 36       	cpi	r24, 0x64	; 100
    3080:	09 f0       	breq	.+2      	; 0x3084 <Pokerface()+0x100>
    3082:	a0 cf       	rjmp	.-192    	; 0x2fc4 <Pokerface()+0x40>
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	8d e0       	ldi	r24, 0x0D	; 13
    3088:	90 e1       	ldi	r25, 0x10	; 16
    308a:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    308e:	80 e0       	ldi	r24, 0x00	; 0
    3090:	e7 da       	rcall	.-2610   	; 0x2660 <switchToSong(unsigned char)>
    3092:	98 cf       	rjmp	.-208    	; 0x2fc4 <Pokerface()+0x40>
    3094:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3098:	7c 01       	movw	r14, r24
    309a:	66 e7       	ldi	r22, 0x76	; 118
    309c:	71 e0       	ldi	r23, 0x01	; 1
    309e:	ce 01       	movw	r24, r28
    30a0:	01 96       	adiw	r24, 0x01	; 1
    30a2:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    30a6:	01 e0       	ldi	r16, 0x01	; 1
    30a8:	97 01       	movw	r18, r14
    30aa:	4b e4       	ldi	r20, 0x4B	; 75
    30ac:	50 e0       	ldi	r21, 0x00	; 0
    30ae:	6e e0       	ldi	r22, 0x0E	; 14
    30b0:	7d e3       	ldi	r23, 0x3D	; 61
    30b2:	ce 01       	movw	r24, r28
    30b4:	01 96       	adiw	r24, 0x01	; 1
    30b6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    30ba:	ce 01       	movw	r24, r28
    30bc:	01 96       	adiw	r24, 0x01	; 1
    30be:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    30c2:	80 cf       	rjmp	.-256    	; 0x2fc4 <Pokerface()+0x40>
    30c4:	42 e0       	ldi	r20, 0x02	; 2
    30c6:	63 e0       	ldi	r22, 0x03	; 3
    30c8:	83 e8       	ldi	r24, 0x83	; 131
    30ca:	9f e1       	ldi	r25, 0x1F	; 31
    30cc:	01 d9       	rcall	.-3582   	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    30ce:	7a cf       	rjmp	.-268    	; 0x2fc4 <Pokerface()+0x40>
    30d0:	44 ef       	ldi	r20, 0xF4	; 244
    30d2:	51 e0       	ldi	r21, 0x01	; 1
    30d4:	6a e0       	ldi	r22, 0x0A	; 10
    30d6:	97 cf       	rjmp	.-210    	; 0x3006 <Pokerface()+0x82>
    30d8:	44 ef       	ldi	r20, 0xF4	; 244
    30da:	51 e0       	ldi	r21, 0x01	; 1
    30dc:	64 e1       	ldi	r22, 0x14	; 20
    30de:	a5 cf       	rjmp	.-182    	; 0x302a <Pokerface()+0xa6>
    30e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    30e4:	7c 01       	movw	r14, r24
    30e6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    30ea:	8c 01       	movw	r16, r24
    30ec:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    30f0:	9c 01       	movw	r18, r24
    30f2:	4b e4       	ldi	r20, 0x4B	; 75
    30f4:	50 e0       	ldi	r21, 0x00	; 0
    30f6:	69 e1       	ldi	r22, 0x19	; 25
    30f8:	86 e0       	ldi	r24, 0x06	; 6
    30fa:	9f e3       	ldi	r25, 0x3F	; 63
    30fc:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3100:	61 cf       	rjmp	.-318    	; 0x2fc4 <Pokerface()+0x40>
    3102:	43 e2       	ldi	r20, 0x23	; 35
    3104:	64 e0       	ldi	r22, 0x04	; 4
    3106:	86 e0       	ldi	r24, 0x06	; 6
    3108:	9f e3       	ldi	r25, 0x3F	; 63
    310a:	e0 cf       	rjmp	.-64     	; 0x30cc <Pokerface()+0x148>
    310c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3110:	7c 01       	movw	r14, r24
    3112:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3116:	8c 01       	movw	r16, r24
    3118:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    311c:	9c 01       	movw	r18, r24
    311e:	4b e4       	ldi	r20, 0x4B	; 75
    3120:	50 e0       	ldi	r21, 0x00	; 0
    3122:	6d e2       	ldi	r22, 0x2D	; 45
    3124:	e9 cf       	rjmp	.-46     	; 0x30f8 <Pokerface()+0x174>
    3126:	62 e3       	ldi	r22, 0x32	; 50
    3128:	82 e7       	ldi	r24, 0x72	; 114
    312a:	9f e1       	ldi	r25, 0x1F	; 31
    312c:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3130:	49 cf       	rjmp	.-366    	; 0x2fc4 <Pokerface()+0x40>
    3132:	44 ef       	ldi	r20, 0xF4	; 244
    3134:	51 e0       	ldi	r21, 0x01	; 1
    3136:	6c e3       	ldi	r22, 0x3C	; 60
    3138:	78 cf       	rjmp	.-272    	; 0x302a <Pokerface()+0xa6>
    313a:	46 e4       	ldi	r20, 0x46	; 70
    313c:	6c e0       	ldi	r22, 0x0C	; 12
    313e:	89 eb       	ldi	r24, 0xB9	; 185
    3140:	9f e0       	ldi	r25, 0x0F	; 15
    3142:	81 cf       	rjmp	.-254    	; 0x3046 <Pokerface()+0xc2>
    3144:	64 e6       	ldi	r22, 0x64	; 100
    3146:	80 e1       	ldi	r24, 0x10	; 16
    3148:	97 e2       	ldi	r25, 0x27	; 39
    314a:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    314e:	3a cf       	rjmp	.-396    	; 0x2fc4 <Pokerface()+0x40>

00003150 <UseSomebody()>:
    3150:	ef 92       	push	r14
    3152:	ff 92       	push	r15
    3154:	0f 93       	push	r16
    3156:	1f 93       	push	r17
    3158:	cf 93       	push	r28
    315a:	df 93       	push	r29
    315c:	00 d0       	rcall	.+0      	; 0x315e <UseSomebody()+0xe>
    315e:	00 d0       	rcall	.+0      	; 0x3160 <UseSomebody()+0x10>
    3160:	00 d0       	rcall	.+0      	; 0x3162 <UseSomebody()+0x12>
    3162:	1f 92       	push	r1
    3164:	cd b7       	in	r28, 0x3d	; 61
    3166:	de b7       	in	r29, 0x3e	; 62
    3168:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    316c:	84 31       	cpi	r24, 0x14	; 20
    316e:	09 f4       	brne	.+2      	; 0x3172 <UseSomebody()+0x22>
    3170:	74 c0       	rjmp	.+232    	; 0x325a <UseSomebody()+0x10a>
    3172:	48 f5       	brcc	.+82     	; 0x31c6 <UseSomebody()+0x76>
    3174:	82 30       	cpi	r24, 0x02	; 2
    3176:	09 f4       	brne	.+2      	; 0x317a <UseSomebody()+0x2a>
    3178:	5c c0       	rjmp	.+184    	; 0x3232 <UseSomebody()+0xe2>
    317a:	a8 f4       	brcc	.+42     	; 0x31a6 <UseSomebody()+0x56>
    317c:	88 23       	and	r24, r24
    317e:	09 f4       	brne	.+2      	; 0x3182 <UseSomebody()+0x32>
    3180:	40 c0       	rjmp	.+128    	; 0x3202 <UseSomebody()+0xb2>
    3182:	42 e0       	ldi	r20, 0x02	; 2
    3184:	63 e0       	ldi	r22, 0x03	; 3
    3186:	81 30       	cpi	r24, 0x01	; 1
    3188:	09 f4       	brne	.+2      	; 0x318c <UseSomebody()+0x3c>
    318a:	7a c0       	rjmp	.+244    	; 0x3280 <UseSomebody()+0x130>
    318c:	27 96       	adiw	r28, 0x07	; 7
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	df 91       	pop	r29
    319a:	cf 91       	pop	r28
    319c:	1f 91       	pop	r17
    319e:	0f 91       	pop	r16
    31a0:	ff 90       	pop	r15
    31a2:	ef 90       	pop	r14
    31a4:	08 95       	ret
    31a6:	8a 30       	cpi	r24, 0x0A	; 10
    31a8:	09 f4       	brne	.+2      	; 0x31ac <UseSomebody()+0x5c>
    31aa:	49 c0       	rjmp	.+146    	; 0x323e <UseSomebody()+0xee>
    31ac:	8f 30       	cpi	r24, 0x0F	; 15
    31ae:	09 f4       	brne	.+2      	; 0x31b2 <UseSomebody()+0x62>
    31b0:	4c c0       	rjmp	.+152    	; 0x324a <UseSomebody()+0xfa>
    31b2:	85 30       	cpi	r24, 0x05	; 5
    31b4:	59 f7       	brne	.-42     	; 0x318c <UseSomebody()+0x3c>
    31b6:	49 ea       	ldi	r20, 0xA9	; 169
    31b8:	51 e0       	ldi	r21, 0x01	; 1
    31ba:	6a e0       	ldi	r22, 0x0A	; 10
    31bc:	82 eb       	ldi	r24, 0xB2	; 178
    31be:	9c e6       	ldi	r25, 0x6C	; 108
    31c0:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    31c4:	e3 cf       	rjmp	.-58     	; 0x318c <UseSomebody()+0x3c>
    31c6:	88 32       	cpi	r24, 0x28	; 40
    31c8:	09 f4       	brne	.+2      	; 0x31cc <UseSomebody()+0x7c>
    31ca:	61 c0       	rjmp	.+194    	; 0x328e <UseSomebody()+0x13e>
    31cc:	60 f4       	brcc	.+24     	; 0x31e6 <UseSomebody()+0x96>
    31ce:	8e 31       	cpi	r24, 0x1E	; 30
    31d0:	09 f4       	brne	.+2      	; 0x31d4 <UseSomebody()+0x84>
    31d2:	54 c0       	rjmp	.+168    	; 0x327c <UseSomebody()+0x12c>
    31d4:	83 32       	cpi	r24, 0x23	; 35
    31d6:	09 f4       	brne	.+2      	; 0x31da <UseSomebody()+0x8a>
    31d8:	56 c0       	rjmp	.+172    	; 0x3286 <UseSomebody()+0x136>
    31da:	89 31       	cpi	r24, 0x19	; 25
    31dc:	b9 f6       	brne	.-82     	; 0x318c <UseSomebody()+0x3c>
    31de:	49 ea       	ldi	r20, 0xA9	; 169
    31e0:	51 e0       	ldi	r21, 0x01	; 1
    31e2:	6e e1       	ldi	r22, 0x1E	; 30
    31e4:	eb cf       	rjmp	.-42     	; 0x31bc <UseSomebody()+0x6c>
    31e6:	86 34       	cpi	r24, 0x46	; 70
    31e8:	09 f4       	brne	.+2      	; 0x31ec <UseSomebody()+0x9c>
    31ea:	60 c0       	rjmp	.+192    	; 0x32ac <UseSomebody()+0x15c>
    31ec:	84 36       	cpi	r24, 0x64	; 100
    31ee:	09 f4       	brne	.+2      	; 0x31f2 <UseSomebody()+0xa2>
    31f0:	63 c0       	rjmp	.+198    	; 0x32b8 <UseSomebody()+0x168>
    31f2:	8d 32       	cpi	r24, 0x2D	; 45
    31f4:	59 f6       	brne	.-106    	; 0x318c <UseSomebody()+0x3c>
    31f6:	62 e3       	ldi	r22, 0x32	; 50
    31f8:	89 e5       	ldi	r24, 0x59	; 89
    31fa:	96 e3       	ldi	r25, 0x36	; 54
    31fc:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3200:	c5 cf       	rjmp	.-118    	; 0x318c <UseSomebody()+0x3c>
    3202:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3206:	7c 01       	movw	r14, r24
    3208:	6d e8       	ldi	r22, 0x8D	; 141
    320a:	71 e0       	ldi	r23, 0x01	; 1
    320c:	ce 01       	movw	r24, r28
    320e:	01 96       	adiw	r24, 0x01	; 1
    3210:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    3214:	01 e0       	ldi	r16, 0x01	; 1
    3216:	97 01       	movw	r18, r14
    3218:	4b e4       	ldi	r20, 0x4B	; 75
    321a:	50 e0       	ldi	r21, 0x00	; 0
    321c:	63 ed       	ldi	r22, 0xD3	; 211
    321e:	7f e4       	ldi	r23, 0x4F	; 79
    3220:	ce 01       	movw	r24, r28
    3222:	01 96       	adiw	r24, 0x01	; 1
    3224:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3228:	ce 01       	movw	r24, r28
    322a:	01 96       	adiw	r24, 0x01	; 1
    322c:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    3230:	ad cf       	rjmp	.-166    	; 0x318c <UseSomebody()+0x3c>
    3232:	45 e0       	ldi	r20, 0x05	; 5
    3234:	64 e0       	ldi	r22, 0x04	; 4
    3236:	82 eb       	ldi	r24, 0xB2	; 178
    3238:	9c e6       	ldi	r25, 0x6C	; 108
    323a:	4a d8       	rcall	.-3948   	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    323c:	a7 cf       	rjmp	.-178    	; 0x318c <UseSomebody()+0x3c>
    323e:	6f e0       	ldi	r22, 0x0F	; 15
    3240:	82 eb       	ldi	r24, 0xB2	; 178
    3242:	9c e6       	ldi	r25, 0x6C	; 108
    3244:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3248:	a1 cf       	rjmp	.-190    	; 0x318c <UseSomebody()+0x3c>
    324a:	49 ea       	ldi	r20, 0xA9	; 169
    324c:	51 e0       	ldi	r21, 0x01	; 1
    324e:	64 e1       	ldi	r22, 0x14	; 20
    3250:	89 e5       	ldi	r24, 0x59	; 89
    3252:	96 e3       	ldi	r25, 0x36	; 54
    3254:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3258:	99 cf       	rjmp	.-206    	; 0x318c <UseSomebody()+0x3c>
    325a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    325e:	7c 01       	movw	r14, r24
    3260:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3264:	8c 01       	movw	r16, r24
    3266:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    326a:	9c 01       	movw	r18, r24
    326c:	4b e4       	ldi	r20, 0x4B	; 75
    326e:	50 e0       	ldi	r21, 0x00	; 0
    3270:	69 e1       	ldi	r22, 0x19	; 25
    3272:	89 e5       	ldi	r24, 0x59	; 89
    3274:	96 e3       	ldi	r25, 0x36	; 54
    3276:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    327a:	88 cf       	rjmp	.-240    	; 0x318c <UseSomebody()+0x3c>
    327c:	43 e2       	ldi	r20, 0x23	; 35
    327e:	64 e0       	ldi	r22, 0x04	; 4
    3280:	89 e5       	ldi	r24, 0x59	; 89
    3282:	96 e3       	ldi	r25, 0x36	; 54
    3284:	da cf       	rjmp	.-76     	; 0x323a <UseSomebody()+0xea>
    3286:	49 ea       	ldi	r20, 0xA9	; 169
    3288:	51 e0       	ldi	r21, 0x01	; 1
    328a:	68 e2       	ldi	r22, 0x28	; 40
    328c:	e1 cf       	rjmp	.-62     	; 0x3250 <UseSomebody()+0x100>
    328e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3292:	7c 01       	movw	r14, r24
    3294:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3298:	8c 01       	movw	r16, r24
    329a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    329e:	9c 01       	movw	r18, r24
    32a0:	4b e4       	ldi	r20, 0x4B	; 75
    32a2:	50 e0       	ldi	r21, 0x00	; 0
    32a4:	6d e2       	ldi	r22, 0x2D	; 45
    32a6:	8f ee       	ldi	r24, 0xEF	; 239
    32a8:	93 e4       	ldi	r25, 0x43	; 67
    32aa:	e5 cf       	rjmp	.-54     	; 0x3276 <UseSomebody()+0x126>
    32ac:	64 e6       	ldi	r22, 0x64	; 100
    32ae:	80 e1       	ldi	r24, 0x10	; 16
    32b0:	97 e2       	ldi	r25, 0x27	; 39
    32b2:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    32b6:	6a cf       	rjmp	.-300    	; 0x318c <UseSomebody()+0x3c>
    32b8:	60 e0       	ldi	r22, 0x00	; 0
    32ba:	8d e0       	ldi	r24, 0x0D	; 13
    32bc:	90 e1       	ldi	r25, 0x10	; 16
    32be:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    32c2:	80 e0       	ldi	r24, 0x00	; 0
    32c4:	cd d9       	rcall	.-3174   	; 0x2660 <switchToSong(unsigned char)>
    32c6:	62 cf       	rjmp	.-316    	; 0x318c <UseSomebody()+0x3c>

000032c8 <NoRoots()>:
    32c8:	ef 92       	push	r14
    32ca:	ff 92       	push	r15
    32cc:	0f 93       	push	r16
    32ce:	1f 93       	push	r17
    32d0:	cf 93       	push	r28
    32d2:	df 93       	push	r29
    32d4:	00 d0       	rcall	.+0      	; 0x32d6 <NoRoots()+0xe>
    32d6:	00 d0       	rcall	.+0      	; 0x32d8 <NoRoots()+0x10>
    32d8:	00 d0       	rcall	.+0      	; 0x32da <NoRoots()+0x12>
    32da:	1f 92       	push	r1
    32dc:	cd b7       	in	r28, 0x3d	; 61
    32de:	de b7       	in	r29, 0x3e	; 62
    32e0:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    32e4:	89 31       	cpi	r24, 0x19	; 25
    32e6:	09 f4       	brne	.+2      	; 0x32ea <NoRoots()+0x22>
    32e8:	de c0       	rjmp	.+444    	; 0x34a6 <NoRoots()+0x1de>
    32ea:	08 f0       	brcs	.+2      	; 0x32ee <NoRoots()+0x26>
    32ec:	49 c0       	rjmp	.+146    	; 0x3380 <NoRoots()+0xb8>
    32ee:	8c 30       	cpi	r24, 0x0C	; 12
    32f0:	09 f4       	brne	.+2      	; 0x32f4 <NoRoots()+0x2c>
    32f2:	ad c0       	rjmp	.+346    	; 0x344e <NoRoots()+0x186>
    32f4:	40 f5       	brcc	.+80     	; 0x3346 <NoRoots()+0x7e>
    32f6:	82 30       	cpi	r24, 0x02	; 2
    32f8:	09 f4       	brne	.+2      	; 0x32fc <NoRoots()+0x34>
    32fa:	9a c0       	rjmp	.+308    	; 0x3430 <NoRoots()+0x168>
    32fc:	a8 f4       	brcc	.+42     	; 0x3328 <NoRoots()+0x60>
    32fe:	88 23       	and	r24, r24
    3300:	09 f4       	brne	.+2      	; 0x3304 <NoRoots()+0x3c>
    3302:	7e c0       	rjmp	.+252    	; 0x3400 <NoRoots()+0x138>
    3304:	42 e0       	ldi	r20, 0x02	; 2
    3306:	67 e0       	ldi	r22, 0x07	; 7
    3308:	81 30       	cpi	r24, 0x01	; 1
    330a:	09 f4       	brne	.+2      	; 0x330e <NoRoots()+0x46>
    330c:	d2 c0       	rjmp	.+420    	; 0x34b2 <NoRoots()+0x1ea>
    330e:	27 96       	adiw	r28, 0x07	; 7
    3310:	0f b6       	in	r0, 0x3f	; 63
    3312:	f8 94       	cli
    3314:	de bf       	out	0x3e, r29	; 62
    3316:	0f be       	out	0x3f, r0	; 63
    3318:	cd bf       	out	0x3d, r28	; 61
    331a:	df 91       	pop	r29
    331c:	cf 91       	pop	r28
    331e:	1f 91       	pop	r17
    3320:	0f 91       	pop	r16
    3322:	ff 90       	pop	r15
    3324:	ef 90       	pop	r14
    3326:	08 95       	ret
    3328:	8a 30       	cpi	r24, 0x0A	; 10
    332a:	09 f4       	brne	.+2      	; 0x332e <NoRoots()+0x66>
    332c:	84 c0       	rjmp	.+264    	; 0x3436 <NoRoots()+0x16e>
    332e:	08 f0       	brcs	.+2      	; 0x3332 <NoRoots()+0x6a>
    3330:	88 c0       	rjmp	.+272    	; 0x3442 <NoRoots()+0x17a>
    3332:	4d e0       	ldi	r20, 0x0D	; 13
    3334:	52 e0       	ldi	r21, 0x02	; 2
    3336:	6a e0       	ldi	r22, 0x0A	; 10
    3338:	85 30       	cpi	r24, 0x05	; 5
    333a:	49 f7       	brne	.-46     	; 0x330e <NoRoots()+0x46>
    333c:	86 ea       	ldi	r24, 0xA6	; 166
    333e:	90 e4       	ldi	r25, 0x40	; 64
    3340:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3344:	e4 cf       	rjmp	.-56     	; 0x330e <NoRoots()+0x46>
    3346:	80 31       	cpi	r24, 0x10	; 16
    3348:	09 f4       	brne	.+2      	; 0x334c <NoRoots()+0x84>
    334a:	8b c0       	rjmp	.+278    	; 0x3462 <NoRoots()+0x19a>
    334c:	58 f4       	brcc	.+22     	; 0x3364 <NoRoots()+0x9c>
    334e:	8d 30       	cpi	r24, 0x0D	; 13
    3350:	09 f4       	brne	.+2      	; 0x3354 <NoRoots()+0x8c>
    3352:	85 c0       	rjmp	.+266    	; 0x345e <NoRoots()+0x196>
    3354:	8f 30       	cpi	r24, 0x0F	; 15
    3356:	d9 f6       	brne	.-74     	; 0x330e <NoRoots()+0x46>
    3358:	4d e0       	ldi	r20, 0x0D	; 13
    335a:	52 e0       	ldi	r21, 0x02	; 2
    335c:	60 e1       	ldi	r22, 0x10	; 16
    335e:	8c e1       	ldi	r24, 0x1C	; 28
    3360:	9c e0       	ldi	r25, 0x0C	; 12
    3362:	7a c0       	rjmp	.+244    	; 0x3458 <NoRoots()+0x190>
    3364:	82 31       	cpi	r24, 0x12	; 18
    3366:	09 f4       	brne	.+2      	; 0x336a <NoRoots()+0xa2>
    3368:	91 c0       	rjmp	.+290    	; 0x348c <NoRoots()+0x1c4>
    336a:	08 f4       	brcc	.+2      	; 0x336e <NoRoots()+0xa6>
    336c:	8b c0       	rjmp	.+278    	; 0x3484 <NoRoots()+0x1bc>
    336e:	49 e1       	ldi	r20, 0x19	; 25
    3370:	68 e0       	ldi	r22, 0x08	; 8
    3372:	84 31       	cpi	r24, 0x14	; 20
    3374:	61 f6       	brne	.-104    	; 0x330e <NoRoots()+0x46>
    3376:	86 ea       	ldi	r24, 0xA6	; 166
    3378:	90 e4       	ldi	r25, 0x40	; 64
    337a:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    337e:	c7 cf       	rjmp	.-114    	; 0x330e <NoRoots()+0x46>
    3380:	8d 32       	cpi	r24, 0x2D	; 45
    3382:	09 f4       	brne	.+2      	; 0x3386 <NoRoots()+0xbe>
    3384:	b7 c0       	rjmp	.+366    	; 0x34f4 <NoRoots()+0x22c>
    3386:	e8 f4       	brcc	.+58     	; 0x33c2 <NoRoots()+0xfa>
    3388:	83 32       	cpi	r24, 0x23	; 35
    338a:	09 f4       	brne	.+2      	; 0x338e <NoRoots()+0xc6>
    338c:	95 c0       	rjmp	.+298    	; 0x34b8 <NoRoots()+0x1f0>
    338e:	60 f4       	brcc	.+24     	; 0x33a8 <NoRoots()+0xe0>
    3390:	8e 31       	cpi	r24, 0x1E	; 30
    3392:	09 f4       	brne	.+2      	; 0x3396 <NoRoots()+0xce>
    3394:	8c c0       	rjmp	.+280    	; 0x34ae <NoRoots()+0x1e6>
    3396:	4d e0       	ldi	r20, 0x0D	; 13
    3398:	52 e0       	ldi	r21, 0x02	; 2
    339a:	63 e2       	ldi	r22, 0x23	; 35
    339c:	82 32       	cpi	r24, 0x22	; 34
    339e:	09 f0       	breq	.+2      	; 0x33a2 <NoRoots()+0xda>
    33a0:	b6 cf       	rjmp	.-148    	; 0x330e <NoRoots()+0x46>
    33a2:	83 e5       	ldi	r24, 0x53	; 83
    33a4:	90 e2       	ldi	r25, 0x20	; 32
    33a6:	58 c0       	rjmp	.+176    	; 0x3458 <NoRoots()+0x190>
    33a8:	85 32       	cpi	r24, 0x25	; 37
    33aa:	09 f4       	brne	.+2      	; 0x33ae <NoRoots()+0xe6>
    33ac:	96 c0       	rjmp	.+300    	; 0x34da <NoRoots()+0x212>
    33ae:	08 f4       	brcc	.+2      	; 0x33b2 <NoRoots()+0xea>
    33b0:	90 c0       	rjmp	.+288    	; 0x34d2 <NoRoots()+0x20a>
    33b2:	88 32       	cpi	r24, 0x28	; 40
    33b4:	09 f0       	breq	.+2      	; 0x33b8 <NoRoots()+0xf0>
    33b6:	ab cf       	rjmp	.-170    	; 0x330e <NoRoots()+0x46>
    33b8:	4d e2       	ldi	r20, 0x2D	; 45
    33ba:	62 e0       	ldi	r22, 0x02	; 2
    33bc:	88 ea       	ldi	r24, 0xA8	; 168
    33be:	98 e4       	ldi	r25, 0x48	; 72
    33c0:	dc cf       	rjmp	.-72     	; 0x337a <NoRoots()+0xb2>
    33c2:	81 33       	cpi	r24, 0x31	; 49
    33c4:	09 f4       	brne	.+2      	; 0x33c8 <NoRoots()+0x100>
    33c6:	a4 c0       	rjmp	.+328    	; 0x3510 <NoRoots()+0x248>
    33c8:	68 f4       	brcc	.+26     	; 0x33e4 <NoRoots()+0x11c>
    33ca:	8f 32       	cpi	r24, 0x2F	; 47
    33cc:	09 f4       	brne	.+2      	; 0x33d0 <NoRoots()+0x108>
    33ce:	98 c0       	rjmp	.+304    	; 0x3500 <NoRoots()+0x238>
    33d0:	80 33       	cpi	r24, 0x30	; 48
    33d2:	09 f0       	breq	.+2      	; 0x33d6 <NoRoots()+0x10e>
    33d4:	9c cf       	rjmp	.-200    	; 0x330e <NoRoots()+0x46>
    33d6:	41 e3       	ldi	r20, 0x31	; 49
    33d8:	67 e0       	ldi	r22, 0x07	; 7
    33da:	83 e5       	ldi	r24, 0x53	; 83
    33dc:	90 e2       	ldi	r25, 0x20	; 32
    33de:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    33e2:	95 cf       	rjmp	.-214    	; 0x330e <NoRoots()+0x46>
    33e4:	86 34       	cpi	r24, 0x46	; 70
    33e6:	09 f4       	brne	.+2      	; 0x33ea <NoRoots()+0x122>
    33e8:	97 c0       	rjmp	.+302    	; 0x3518 <NoRoots()+0x250>
    33ea:	84 36       	cpi	r24, 0x64	; 100
    33ec:	09 f4       	brne	.+2      	; 0x33f0 <NoRoots()+0x128>
    33ee:	98 c0       	rjmp	.+304    	; 0x3520 <NoRoots()+0x258>
    33f0:	82 33       	cpi	r24, 0x32	; 50
    33f2:	09 f0       	breq	.+2      	; 0x33f6 <NoRoots()+0x12e>
    33f4:	8c cf       	rjmp	.-232    	; 0x330e <NoRoots()+0x46>
    33f6:	46 e4       	ldi	r20, 0x46	; 70
    33f8:	6c e0       	ldi	r22, 0x0C	; 12
    33fa:	8a e3       	ldi	r24, 0x3A	; 58
    33fc:	90 e2       	ldi	r25, 0x20	; 32
    33fe:	ef cf       	rjmp	.-34     	; 0x33de <NoRoots()+0x116>
    3400:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3404:	7c 01       	movw	r14, r24
    3406:	6b ea       	ldi	r22, 0xAB	; 171
    3408:	71 e0       	ldi	r23, 0x01	; 1
    340a:	ce 01       	movw	r24, r28
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    3412:	01 e0       	ldi	r16, 0x01	; 1
    3414:	97 01       	movw	r18, r14
    3416:	4b e4       	ldi	r20, 0x4B	; 75
    3418:	50 e0       	ldi	r21, 0x00	; 0
    341a:	69 e7       	ldi	r22, 0x79	; 121
    341c:	7e e2       	ldi	r23, 0x2E	; 46
    341e:	ce 01       	movw	r24, r28
    3420:	01 96       	adiw	r24, 0x01	; 1
    3422:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3426:	ce 01       	movw	r24, r28
    3428:	01 96       	adiw	r24, 0x01	; 1
    342a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    342e:	6f cf       	rjmp	.-290    	; 0x330e <NoRoots()+0x46>
    3430:	45 e0       	ldi	r20, 0x05	; 5
    3432:	66 e0       	ldi	r22, 0x06	; 6
    3434:	a0 cf       	rjmp	.-192    	; 0x3376 <NoRoots()+0xae>
    3436:	6b e0       	ldi	r22, 0x0B	; 11
    3438:	86 e4       	ldi	r24, 0x46	; 70
    343a:	9e e1       	ldi	r25, 0x1E	; 30
    343c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3440:	66 cf       	rjmp	.-308    	; 0x330e <NoRoots()+0x46>
    3442:	6c e0       	ldi	r22, 0x0C	; 12
    3444:	8e e0       	ldi	r24, 0x0E	; 14
    3446:	96 e0       	ldi	r25, 0x06	; 6
    3448:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <progShowROOTS(unsigned int, unsigned char)>
    344c:	60 cf       	rjmp	.-320    	; 0x330e <NoRoots()+0x46>
    344e:	4d e0       	ldi	r20, 0x0D	; 13
    3450:	52 e0       	ldi	r21, 0x02	; 2
    3452:	6d e0       	ldi	r22, 0x0D	; 13
    3454:	8f e0       	ldi	r24, 0x0F	; 15
    3456:	9a e0       	ldi	r25, 0x0A	; 10
    3458:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    345c:	58 cf       	rjmp	.-336    	; 0x330e <NoRoots()+0x46>
    345e:	6f e0       	ldi	r22, 0x0F	; 15
    3460:	f1 cf       	rjmp	.-30     	; 0x3444 <NoRoots()+0x17c>
    3462:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3466:	7c 01       	movw	r14, r24
    3468:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    346c:	8c 01       	movw	r16, r24
    346e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3472:	9c 01       	movw	r18, r24
    3474:	4b e4       	ldi	r20, 0x4B	; 75
    3476:	50 e0       	ldi	r21, 0x00	; 0
    3478:	61 e1       	ldi	r22, 0x11	; 17
    347a:	83 e5       	ldi	r24, 0x53	; 83
    347c:	90 e2       	ldi	r25, 0x20	; 32
    347e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3482:	45 cf       	rjmp	.-374    	; 0x330e <NoRoots()+0x46>
    3484:	4d e0       	ldi	r20, 0x0D	; 13
    3486:	52 e0       	ldi	r21, 0x02	; 2
    3488:	62 e1       	ldi	r22, 0x12	; 18
    348a:	8b cf       	rjmp	.-234    	; 0x33a2 <NoRoots()+0xda>
    348c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3490:	7c 01       	movw	r14, r24
    3492:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3496:	8c 01       	movw	r16, r24
    3498:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    349c:	9c 01       	movw	r18, r24
    349e:	4b e4       	ldi	r20, 0x4B	; 75
    34a0:	50 e0       	ldi	r21, 0x00	; 0
    34a2:	64 e1       	ldi	r22, 0x14	; 20
    34a4:	ea cf       	rjmp	.-44     	; 0x347a <NoRoots()+0x1b2>
    34a6:	4d e0       	ldi	r20, 0x0D	; 13
    34a8:	52 e0       	ldi	r21, 0x02	; 2
    34aa:	6e e1       	ldi	r22, 0x1E	; 30
    34ac:	47 cf       	rjmp	.-370    	; 0x333c <NoRoots()+0x74>
    34ae:	42 e2       	ldi	r20, 0x22	; 34
    34b0:	64 e0       	ldi	r22, 0x04	; 4
    34b2:	83 e5       	ldi	r24, 0x53	; 83
    34b4:	90 e2       	ldi	r25, 0x20	; 32
    34b6:	61 cf       	rjmp	.-318    	; 0x337a <NoRoots()+0xb2>
    34b8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    34bc:	7c 01       	movw	r14, r24
    34be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    34c2:	8c 01       	movw	r16, r24
    34c4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    34c8:	9c 01       	movw	r18, r24
    34ca:	4b e4       	ldi	r20, 0x4B	; 75
    34cc:	50 e0       	ldi	r21, 0x00	; 0
    34ce:	64 e2       	ldi	r22, 0x24	; 36
    34d0:	d4 cf       	rjmp	.-88     	; 0x347a <NoRoots()+0x1b2>
    34d2:	4d e0       	ldi	r20, 0x0D	; 13
    34d4:	52 e0       	ldi	r21, 0x02	; 2
    34d6:	65 e2       	ldi	r22, 0x25	; 37
    34d8:	64 cf       	rjmp	.-312    	; 0x33a2 <NoRoots()+0xda>
    34da:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    34de:	7c 01       	movw	r14, r24
    34e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    34e4:	8c 01       	movw	r16, r24
    34e6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    34ea:	9c 01       	movw	r18, r24
    34ec:	4b e4       	ldi	r20, 0x4B	; 75
    34ee:	50 e0       	ldi	r21, 0x00	; 0
    34f0:	68 e2       	ldi	r22, 0x28	; 40
    34f2:	c3 cf       	rjmp	.-122    	; 0x347a <NoRoots()+0x1b2>
    34f4:	6f e2       	ldi	r22, 0x2F	; 47
    34f6:	86 ea       	ldi	r24, 0xA6	; 166
    34f8:	90 e4       	ldi	r25, 0x40	; 64
    34fa:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    34fe:	07 cf       	rjmp	.-498    	; 0x330e <NoRoots()+0x46>
    3500:	40 e3       	ldi	r20, 0x30	; 48
    3502:	6d e0       	ldi	r22, 0x0D	; 13
    3504:	72 e0       	ldi	r23, 0x02	; 2
    3506:	83 e5       	ldi	r24, 0x53	; 83
    3508:	90 e2       	ldi	r25, 0x20	; 32
    350a:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    350e:	ff ce       	rjmp	.-514    	; 0x330e <NoRoots()+0x46>
    3510:	42 e3       	ldi	r20, 0x32	; 50
    3512:	6a ef       	ldi	r22, 0xFA	; 250
    3514:	70 e0       	ldi	r23, 0x00	; 0
    3516:	f7 cf       	rjmp	.-18     	; 0x3506 <NoRoots()+0x23e>
    3518:	64 e6       	ldi	r22, 0x64	; 100
    351a:	80 e3       	ldi	r24, 0x30	; 48
    351c:	95 e7       	ldi	r25, 0x75	; 117
    351e:	94 cf       	rjmp	.-216    	; 0x3448 <NoRoots()+0x180>
    3520:	60 e0       	ldi	r22, 0x00	; 0
    3522:	8d e0       	ldi	r24, 0x0D	; 13
    3524:	90 e1       	ldi	r25, 0x10	; 16
    3526:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    352a:	80 e0       	ldi	r24, 0x00	; 0
    352c:	99 d8       	rcall	.-3790   	; 0x2660 <switchToSong(unsigned char)>
    352e:	ef ce       	rjmp	.-546    	; 0x330e <NoRoots()+0x46>

00003530 <Firework()>:
    3530:	ef 92       	push	r14
    3532:	ff 92       	push	r15
    3534:	0f 93       	push	r16
    3536:	1f 93       	push	r17
    3538:	cf 93       	push	r28
    353a:	df 93       	push	r29
    353c:	00 d0       	rcall	.+0      	; 0x353e <Firework()+0xe>
    353e:	00 d0       	rcall	.+0      	; 0x3540 <Firework()+0x10>
    3540:	00 d0       	rcall	.+0      	; 0x3542 <Firework()+0x12>
    3542:	1f 92       	push	r1
    3544:	cd b7       	in	r28, 0x3d	; 61
    3546:	de b7       	in	r29, 0x3e	; 62
    3548:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    354c:	8e 31       	cpi	r24, 0x1E	; 30
    354e:	09 f4       	brne	.+2      	; 0x3552 <Firework()+0x22>
    3550:	af c0       	rjmp	.+350    	; 0x36b0 <Firework()+0x180>
    3552:	a0 f5       	brcc	.+104    	; 0x35bc <Firework()+0x8c>
    3554:	85 30       	cpi	r24, 0x05	; 5
    3556:	09 f4       	brne	.+2      	; 0x355a <Firework()+0x2a>
    3558:	92 c0       	rjmp	.+292    	; 0x367e <Firework()+0x14e>
    355a:	b8 f4       	brcc	.+46     	; 0x358a <Firework()+0x5a>
    355c:	81 30       	cpi	r24, 0x01	; 1
    355e:	09 f4       	brne	.+2      	; 0x3562 <Firework()+0x32>
    3560:	87 c0       	rjmp	.+270    	; 0x3670 <Firework()+0x140>
    3562:	08 f4       	brcc	.+2      	; 0x3566 <Firework()+0x36>
    3564:	6d c0       	rjmp	.+218    	; 0x3640 <Firework()+0x110>
    3566:	45 e0       	ldi	r20, 0x05	; 5
    3568:	64 e0       	ldi	r22, 0x04	; 4
    356a:	82 30       	cpi	r24, 0x02	; 2
    356c:	09 f4       	brne	.+2      	; 0x3570 <Firework()+0x40>
    356e:	82 c0       	rjmp	.+260    	; 0x3674 <Firework()+0x144>
    3570:	27 96       	adiw	r28, 0x07	; 7
    3572:	0f b6       	in	r0, 0x3f	; 63
    3574:	f8 94       	cli
    3576:	de bf       	out	0x3e, r29	; 62
    3578:	0f be       	out	0x3f, r0	; 63
    357a:	cd bf       	out	0x3d, r28	; 61
    357c:	df 91       	pop	r29
    357e:	cf 91       	pop	r28
    3580:	1f 91       	pop	r17
    3582:	0f 91       	pop	r16
    3584:	ff 90       	pop	r15
    3586:	ef 90       	pop	r14
    3588:	08 95       	ret
    358a:	8f 30       	cpi	r24, 0x0F	; 15
    358c:	09 f4       	brne	.+2      	; 0x3590 <Firework()+0x60>
    358e:	7b c0       	rjmp	.+246    	; 0x3686 <Firework()+0x156>
    3590:	40 f4       	brcc	.+16     	; 0x35a2 <Firework()+0x72>
    3592:	8a 30       	cpi	r24, 0x0A	; 10
    3594:	69 f7       	brne	.-38     	; 0x3570 <Firework()+0x40>
    3596:	6f e0       	ldi	r22, 0x0F	; 15
    3598:	86 e0       	ldi	r24, 0x06	; 6
    359a:	9f e3       	ldi	r25, 0x3F	; 63
    359c:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    35a0:	e7 cf       	rjmp	.-50     	; 0x3570 <Firework()+0x40>
    35a2:	84 31       	cpi	r24, 0x14	; 20
    35a4:	09 f4       	brne	.+2      	; 0x35a8 <Firework()+0x78>
    35a6:	73 c0       	rjmp	.+230    	; 0x368e <Firework()+0x15e>
    35a8:	44 ef       	ldi	r20, 0xF4	; 244
    35aa:	51 e0       	ldi	r21, 0x01	; 1
    35ac:	6e e1       	ldi	r22, 0x1E	; 30
    35ae:	89 31       	cpi	r24, 0x19	; 25
    35b0:	f9 f6       	brne	.-66     	; 0x3570 <Firework()+0x40>
    35b2:	86 e0       	ldi	r24, 0x06	; 6
    35b4:	9f e3       	ldi	r25, 0x3F	; 63
    35b6:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    35ba:	da cf       	rjmp	.-76     	; 0x3570 <Firework()+0x40>
    35bc:	87 33       	cpi	r24, 0x37	; 55
    35be:	09 f4       	brne	.+2      	; 0x35c2 <Firework()+0x92>
    35c0:	8f c0       	rjmp	.+286    	; 0x36e0 <Firework()+0x1b0>
    35c2:	d0 f4       	brcc	.+52     	; 0x35f8 <Firework()+0xc8>
    35c4:	88 32       	cpi	r24, 0x28	; 40
    35c6:	09 f4       	brne	.+2      	; 0x35ca <Firework()+0x9a>
    35c8:	78 c0       	rjmp	.+240    	; 0x36ba <Firework()+0x18a>
    35ca:	50 f4       	brcc	.+20     	; 0x35e0 <Firework()+0xb0>
    35cc:	44 ef       	ldi	r20, 0xF4	; 244
    35ce:	51 e0       	ldi	r21, 0x01	; 1
    35d0:	68 e2       	ldi	r22, 0x28	; 40
    35d2:	83 32       	cpi	r24, 0x23	; 35
    35d4:	69 f6       	brne	.-102    	; 0x3570 <Firework()+0x40>
    35d6:	86 e0       	ldi	r24, 0x06	; 6
    35d8:	9f e3       	ldi	r25, 0x3F	; 63
    35da:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    35de:	c8 cf       	rjmp	.-112    	; 0x3570 <Firework()+0x40>
    35e0:	8d 32       	cpi	r24, 0x2D	; 45
    35e2:	09 f4       	brne	.+2      	; 0x35e6 <Firework()+0xb6>
    35e4:	77 c0       	rjmp	.+238    	; 0x36d4 <Firework()+0x1a4>
    35e6:	82 33       	cpi	r24, 0x32	; 50
    35e8:	19 f6       	brne	.-122    	; 0x3570 <Firework()+0x40>
    35ea:	47 e3       	ldi	r20, 0x37	; 55
    35ec:	67 e0       	ldi	r22, 0x07	; 7
    35ee:	8d ef       	ldi	r24, 0xFD	; 253
    35f0:	9e e3       	ldi	r25, 0x3E	; 62
    35f2:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    35f6:	bc cf       	rjmp	.-136    	; 0x3570 <Firework()+0x40>
    35f8:	81 34       	cpi	r24, 0x41	; 65
    35fa:	09 f4       	brne	.+2      	; 0x35fe <Firework()+0xce>
    35fc:	75 c0       	rjmp	.+234    	; 0x36e8 <Firework()+0x1b8>
    35fe:	90 f4       	brcc	.+36     	; 0x3624 <Firework()+0xf4>
    3600:	8c 33       	cpi	r24, 0x3C	; 60
    3602:	09 f0       	breq	.+2      	; 0x3606 <Firework()+0xd6>
    3604:	b5 cf       	rjmp	.-150    	; 0x3570 <Firework()+0x40>
    3606:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    360a:	7c 01       	movw	r14, r24
    360c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3610:	8c 01       	movw	r16, r24
    3612:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3616:	9c 01       	movw	r18, r24
    3618:	4b e4       	ldi	r20, 0x4B	; 75
    361a:	50 e0       	ldi	r21, 0x00	; 0
    361c:	61 e4       	ldi	r22, 0x41	; 65
    361e:	84 e4       	ldi	r24, 0x44	; 68
    3620:	9f e2       	ldi	r25, 0x2F	; 47
    3622:	43 c0       	rjmp	.+134    	; 0x36aa <Firework()+0x17a>
    3624:	86 34       	cpi	r24, 0x46	; 70
    3626:	09 f4       	brne	.+2      	; 0x362a <Firework()+0xfa>
    3628:	64 c0       	rjmp	.+200    	; 0x36f2 <Firework()+0x1c2>
    362a:	84 36       	cpi	r24, 0x64	; 100
    362c:	09 f0       	breq	.+2      	; 0x3630 <Firework()+0x100>
    362e:	a0 cf       	rjmp	.-192    	; 0x3570 <Firework()+0x40>
    3630:	60 e0       	ldi	r22, 0x00	; 0
    3632:	8d e0       	ldi	r24, 0x0D	; 13
    3634:	90 e1       	ldi	r25, 0x10	; 16
    3636:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    363a:	80 e0       	ldi	r24, 0x00	; 0
    363c:	11 d8       	rcall	.-4062   	; 0x2660 <switchToSong(unsigned char)>
    363e:	98 cf       	rjmp	.-208    	; 0x3570 <Firework()+0x40>
    3640:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3644:	7c 01       	movw	r14, r24
    3646:	64 ec       	ldi	r22, 0xC4	; 196
    3648:	71 e0       	ldi	r23, 0x01	; 1
    364a:	ce 01       	movw	r24, r28
    364c:	01 96       	adiw	r24, 0x01	; 1
    364e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    3652:	01 e0       	ldi	r16, 0x01	; 1
    3654:	97 01       	movw	r18, r14
    3656:	4b e4       	ldi	r20, 0x4B	; 75
    3658:	50 e0       	ldi	r21, 0x00	; 0
    365a:	6e e0       	ldi	r22, 0x0E	; 14
    365c:	7d e3       	ldi	r23, 0x3D	; 61
    365e:	ce 01       	movw	r24, r28
    3660:	01 96       	adiw	r24, 0x01	; 1
    3662:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3666:	ce 01       	movw	r24, r28
    3668:	01 96       	adiw	r24, 0x01	; 1
    366a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    366e:	80 cf       	rjmp	.-256    	; 0x3570 <Firework()+0x40>
    3670:	42 e0       	ldi	r20, 0x02	; 2
    3672:	63 e0       	ldi	r22, 0x03	; 3
    3674:	83 e8       	ldi	r24, 0x83	; 131
    3676:	9f e1       	ldi	r25, 0x1F	; 31
    3678:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    367c:	79 cf       	rjmp	.-270    	; 0x3570 <Firework()+0x40>
    367e:	44 ef       	ldi	r20, 0xF4	; 244
    3680:	51 e0       	ldi	r21, 0x01	; 1
    3682:	6a e0       	ldi	r22, 0x0A	; 10
    3684:	96 cf       	rjmp	.-212    	; 0x35b2 <Firework()+0x82>
    3686:	44 ef       	ldi	r20, 0xF4	; 244
    3688:	51 e0       	ldi	r21, 0x01	; 1
    368a:	64 e1       	ldi	r22, 0x14	; 20
    368c:	a4 cf       	rjmp	.-184    	; 0x35d6 <Firework()+0xa6>
    368e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3692:	7c 01       	movw	r14, r24
    3694:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3698:	8c 01       	movw	r16, r24
    369a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    369e:	9c 01       	movw	r18, r24
    36a0:	4b e4       	ldi	r20, 0x4B	; 75
    36a2:	50 e0       	ldi	r21, 0x00	; 0
    36a4:	69 e1       	ldi	r22, 0x19	; 25
    36a6:	86 e0       	ldi	r24, 0x06	; 6
    36a8:	9f e3       	ldi	r25, 0x3F	; 63
    36aa:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    36ae:	60 cf       	rjmp	.-320    	; 0x3570 <Firework()+0x40>
    36b0:	43 e2       	ldi	r20, 0x23	; 35
    36b2:	64 e0       	ldi	r22, 0x04	; 4
    36b4:	86 e0       	ldi	r24, 0x06	; 6
    36b6:	9f e3       	ldi	r25, 0x3F	; 63
    36b8:	df cf       	rjmp	.-66     	; 0x3678 <Firework()+0x148>
    36ba:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    36be:	7c 01       	movw	r14, r24
    36c0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    36c4:	8c 01       	movw	r16, r24
    36c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    36ca:	9c 01       	movw	r18, r24
    36cc:	4b e4       	ldi	r20, 0x4B	; 75
    36ce:	50 e0       	ldi	r21, 0x00	; 0
    36d0:	6d e2       	ldi	r22, 0x2D	; 45
    36d2:	e9 cf       	rjmp	.-46     	; 0x36a6 <Firework()+0x176>
    36d4:	62 e3       	ldi	r22, 0x32	; 50
    36d6:	82 e7       	ldi	r24, 0x72	; 114
    36d8:	9f e1       	ldi	r25, 0x1F	; 31
    36da:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    36de:	48 cf       	rjmp	.-368    	; 0x3570 <Firework()+0x40>
    36e0:	44 ef       	ldi	r20, 0xF4	; 244
    36e2:	51 e0       	ldi	r21, 0x01	; 1
    36e4:	6c e3       	ldi	r22, 0x3C	; 60
    36e6:	77 cf       	rjmp	.-274    	; 0x35d6 <Firework()+0xa6>
    36e8:	46 e4       	ldi	r20, 0x46	; 70
    36ea:	6c e0       	ldi	r22, 0x0C	; 12
    36ec:	89 eb       	ldi	r24, 0xB9	; 185
    36ee:	9f e0       	ldi	r25, 0x0F	; 15
    36f0:	80 cf       	rjmp	.-256    	; 0x35f2 <Firework()+0xc2>
    36f2:	64 e6       	ldi	r22, 0x64	; 100
    36f4:	80 e1       	ldi	r24, 0x10	; 16
    36f6:	97 e2       	ldi	r25, 0x27	; 39
    36f8:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    36fc:	39 cf       	rjmp	.-398    	; 0x3570 <Firework()+0x40>

000036fe <Diamonds()>:
    36fe:	ef 92       	push	r14
    3700:	ff 92       	push	r15
    3702:	0f 93       	push	r16
    3704:	1f 93       	push	r17
    3706:	cf 93       	push	r28
    3708:	df 93       	push	r29
    370a:	00 d0       	rcall	.+0      	; 0x370c <Diamonds()+0xe>
    370c:	00 d0       	rcall	.+0      	; 0x370e <Diamonds()+0x10>
    370e:	00 d0       	rcall	.+0      	; 0x3710 <Diamonds()+0x12>
    3710:	1f 92       	push	r1
    3712:	cd b7       	in	r28, 0x3d	; 61
    3714:	de b7       	in	r29, 0x3e	; 62
    3716:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    371a:	8e 31       	cpi	r24, 0x1E	; 30
    371c:	09 f4       	brne	.+2      	; 0x3720 <Diamonds()+0x22>
    371e:	b0 c0       	rjmp	.+352    	; 0x3880 <Diamonds()+0x182>
    3720:	a0 f5       	brcc	.+104    	; 0x378a <Diamonds()+0x8c>
    3722:	85 30       	cpi	r24, 0x05	; 5
    3724:	09 f4       	brne	.+2      	; 0x3728 <Diamonds()+0x2a>
    3726:	93 c0       	rjmp	.+294    	; 0x384e <Diamonds()+0x150>
    3728:	b8 f4       	brcc	.+46     	; 0x3758 <Diamonds()+0x5a>
    372a:	81 30       	cpi	r24, 0x01	; 1
    372c:	09 f4       	brne	.+2      	; 0x3730 <Diamonds()+0x32>
    372e:	88 c0       	rjmp	.+272    	; 0x3840 <Diamonds()+0x142>
    3730:	08 f4       	brcc	.+2      	; 0x3734 <Diamonds()+0x36>
    3732:	6e c0       	rjmp	.+220    	; 0x3810 <Diamonds()+0x112>
    3734:	45 e0       	ldi	r20, 0x05	; 5
    3736:	64 e0       	ldi	r22, 0x04	; 4
    3738:	82 30       	cpi	r24, 0x02	; 2
    373a:	09 f4       	brne	.+2      	; 0x373e <Diamonds()+0x40>
    373c:	83 c0       	rjmp	.+262    	; 0x3844 <Diamonds()+0x146>
    373e:	27 96       	adiw	r28, 0x07	; 7
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	df 91       	pop	r29
    374c:	cf 91       	pop	r28
    374e:	1f 91       	pop	r17
    3750:	0f 91       	pop	r16
    3752:	ff 90       	pop	r15
    3754:	ef 90       	pop	r14
    3756:	08 95       	ret
    3758:	8f 30       	cpi	r24, 0x0F	; 15
    375a:	09 f4       	brne	.+2      	; 0x375e <Diamonds()+0x60>
    375c:	7c c0       	rjmp	.+248    	; 0x3856 <Diamonds()+0x158>
    375e:	40 f4       	brcc	.+16     	; 0x3770 <Diamonds()+0x72>
    3760:	8a 30       	cpi	r24, 0x0A	; 10
    3762:	69 f7       	brne	.-38     	; 0x373e <Diamonds()+0x40>
    3764:	6f e0       	ldi	r22, 0x0F	; 15
    3766:	86 e0       	ldi	r24, 0x06	; 6
    3768:	9f e3       	ldi	r25, 0x3F	; 63
    376a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    376e:	e7 cf       	rjmp	.-50     	; 0x373e <Diamonds()+0x40>
    3770:	84 31       	cpi	r24, 0x14	; 20
    3772:	09 f4       	brne	.+2      	; 0x3776 <Diamonds()+0x78>
    3774:	74 c0       	rjmp	.+232    	; 0x385e <Diamonds()+0x160>
    3776:	44 ef       	ldi	r20, 0xF4	; 244
    3778:	51 e0       	ldi	r21, 0x01	; 1
    377a:	6e e1       	ldi	r22, 0x1E	; 30
    377c:	89 31       	cpi	r24, 0x19	; 25
    377e:	f9 f6       	brne	.-66     	; 0x373e <Diamonds()+0x40>
    3780:	86 e0       	ldi	r24, 0x06	; 6
    3782:	9f e3       	ldi	r25, 0x3F	; 63
    3784:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3788:	da cf       	rjmp	.-76     	; 0x373e <Diamonds()+0x40>
    378a:	87 33       	cpi	r24, 0x37	; 55
    378c:	09 f4       	brne	.+2      	; 0x3790 <Diamonds()+0x92>
    378e:	90 c0       	rjmp	.+288    	; 0x38b0 <Diamonds()+0x1b2>
    3790:	d0 f4       	brcc	.+52     	; 0x37c6 <Diamonds()+0xc8>
    3792:	88 32       	cpi	r24, 0x28	; 40
    3794:	09 f4       	brne	.+2      	; 0x3798 <Diamonds()+0x9a>
    3796:	79 c0       	rjmp	.+242    	; 0x388a <Diamonds()+0x18c>
    3798:	50 f4       	brcc	.+20     	; 0x37ae <Diamonds()+0xb0>
    379a:	44 ef       	ldi	r20, 0xF4	; 244
    379c:	51 e0       	ldi	r21, 0x01	; 1
    379e:	68 e2       	ldi	r22, 0x28	; 40
    37a0:	83 32       	cpi	r24, 0x23	; 35
    37a2:	69 f6       	brne	.-102    	; 0x373e <Diamonds()+0x40>
    37a4:	86 e0       	ldi	r24, 0x06	; 6
    37a6:	9f e3       	ldi	r25, 0x3F	; 63
    37a8:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    37ac:	c8 cf       	rjmp	.-112    	; 0x373e <Diamonds()+0x40>
    37ae:	8d 32       	cpi	r24, 0x2D	; 45
    37b0:	09 f4       	brne	.+2      	; 0x37b4 <Diamonds()+0xb6>
    37b2:	78 c0       	rjmp	.+240    	; 0x38a4 <Diamonds()+0x1a6>
    37b4:	82 33       	cpi	r24, 0x32	; 50
    37b6:	19 f6       	brne	.-122    	; 0x373e <Diamonds()+0x40>
    37b8:	47 e3       	ldi	r20, 0x37	; 55
    37ba:	67 e0       	ldi	r22, 0x07	; 7
    37bc:	8d ef       	ldi	r24, 0xFD	; 253
    37be:	9e e3       	ldi	r25, 0x3E	; 62
    37c0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    37c4:	bc cf       	rjmp	.-136    	; 0x373e <Diamonds()+0x40>
    37c6:	81 34       	cpi	r24, 0x41	; 65
    37c8:	09 f4       	brne	.+2      	; 0x37cc <Diamonds()+0xce>
    37ca:	76 c0       	rjmp	.+236    	; 0x38b8 <Diamonds()+0x1ba>
    37cc:	90 f4       	brcc	.+36     	; 0x37f2 <Diamonds()+0xf4>
    37ce:	8c 33       	cpi	r24, 0x3C	; 60
    37d0:	09 f0       	breq	.+2      	; 0x37d4 <Diamonds()+0xd6>
    37d2:	b5 cf       	rjmp	.-150    	; 0x373e <Diamonds()+0x40>
    37d4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    37d8:	7c 01       	movw	r14, r24
    37da:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    37de:	8c 01       	movw	r16, r24
    37e0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    37e4:	9c 01       	movw	r18, r24
    37e6:	4b e4       	ldi	r20, 0x4B	; 75
    37e8:	50 e0       	ldi	r21, 0x00	; 0
    37ea:	61 e4       	ldi	r22, 0x41	; 65
    37ec:	84 e4       	ldi	r24, 0x44	; 68
    37ee:	9f e2       	ldi	r25, 0x2F	; 47
    37f0:	44 c0       	rjmp	.+136    	; 0x387a <Diamonds()+0x17c>
    37f2:	86 34       	cpi	r24, 0x46	; 70
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <Diamonds()+0xfa>
    37f6:	65 c0       	rjmp	.+202    	; 0x38c2 <Diamonds()+0x1c4>
    37f8:	84 36       	cpi	r24, 0x64	; 100
    37fa:	09 f0       	breq	.+2      	; 0x37fe <Diamonds()+0x100>
    37fc:	a0 cf       	rjmp	.-192    	; 0x373e <Diamonds()+0x40>
    37fe:	60 e0       	ldi	r22, 0x00	; 0
    3800:	8d e0       	ldi	r24, 0x0D	; 13
    3802:	90 e1       	ldi	r25, 0x10	; 16
    3804:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    3808:	80 e0       	ldi	r24, 0x00	; 0
    380a:	0e 94 30 13 	call	0x2660	; 0x2660 <switchToSong(unsigned char)>
    380e:	97 cf       	rjmp	.-210    	; 0x373e <Diamonds()+0x40>
    3810:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3814:	7c 01       	movw	r14, r24
    3816:	6c ed       	ldi	r22, 0xDC	; 220
    3818:	71 e0       	ldi	r23, 0x01	; 1
    381a:	ce 01       	movw	r24, r28
    381c:	01 96       	adiw	r24, 0x01	; 1
    381e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    3822:	01 e0       	ldi	r16, 0x01	; 1
    3824:	97 01       	movw	r18, r14
    3826:	4b e4       	ldi	r20, 0x4B	; 75
    3828:	50 e0       	ldi	r21, 0x00	; 0
    382a:	6e e0       	ldi	r22, 0x0E	; 14
    382c:	7d e3       	ldi	r23, 0x3D	; 61
    382e:	ce 01       	movw	r24, r28
    3830:	01 96       	adiw	r24, 0x01	; 1
    3832:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3836:	ce 01       	movw	r24, r28
    3838:	01 96       	adiw	r24, 0x01	; 1
    383a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    383e:	7f cf       	rjmp	.-258    	; 0x373e <Diamonds()+0x40>
    3840:	42 e0       	ldi	r20, 0x02	; 2
    3842:	63 e0       	ldi	r22, 0x03	; 3
    3844:	83 e8       	ldi	r24, 0x83	; 131
    3846:	9f e1       	ldi	r25, 0x1F	; 31
    3848:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    384c:	78 cf       	rjmp	.-272    	; 0x373e <Diamonds()+0x40>
    384e:	44 ef       	ldi	r20, 0xF4	; 244
    3850:	51 e0       	ldi	r21, 0x01	; 1
    3852:	6a e0       	ldi	r22, 0x0A	; 10
    3854:	95 cf       	rjmp	.-214    	; 0x3780 <Diamonds()+0x82>
    3856:	44 ef       	ldi	r20, 0xF4	; 244
    3858:	51 e0       	ldi	r21, 0x01	; 1
    385a:	64 e1       	ldi	r22, 0x14	; 20
    385c:	a3 cf       	rjmp	.-186    	; 0x37a4 <Diamonds()+0xa6>
    385e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3862:	7c 01       	movw	r14, r24
    3864:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3868:	8c 01       	movw	r16, r24
    386a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    386e:	9c 01       	movw	r18, r24
    3870:	4b e4       	ldi	r20, 0x4B	; 75
    3872:	50 e0       	ldi	r21, 0x00	; 0
    3874:	69 e1       	ldi	r22, 0x19	; 25
    3876:	86 e0       	ldi	r24, 0x06	; 6
    3878:	9f e3       	ldi	r25, 0x3F	; 63
    387a:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    387e:	5f cf       	rjmp	.-322    	; 0x373e <Diamonds()+0x40>
    3880:	43 e2       	ldi	r20, 0x23	; 35
    3882:	64 e0       	ldi	r22, 0x04	; 4
    3884:	86 e0       	ldi	r24, 0x06	; 6
    3886:	9f e3       	ldi	r25, 0x3F	; 63
    3888:	df cf       	rjmp	.-66     	; 0x3848 <Diamonds()+0x14a>
    388a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    388e:	7c 01       	movw	r14, r24
    3890:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3894:	8c 01       	movw	r16, r24
    3896:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    389a:	9c 01       	movw	r18, r24
    389c:	4b e4       	ldi	r20, 0x4B	; 75
    389e:	50 e0       	ldi	r21, 0x00	; 0
    38a0:	6d e2       	ldi	r22, 0x2D	; 45
    38a2:	e9 cf       	rjmp	.-46     	; 0x3876 <Diamonds()+0x178>
    38a4:	62 e3       	ldi	r22, 0x32	; 50
    38a6:	82 e7       	ldi	r24, 0x72	; 114
    38a8:	9f e1       	ldi	r25, 0x1F	; 31
    38aa:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    38ae:	47 cf       	rjmp	.-370    	; 0x373e <Diamonds()+0x40>
    38b0:	44 ef       	ldi	r20, 0xF4	; 244
    38b2:	51 e0       	ldi	r21, 0x01	; 1
    38b4:	6c e3       	ldi	r22, 0x3C	; 60
    38b6:	76 cf       	rjmp	.-276    	; 0x37a4 <Diamonds()+0xa6>
    38b8:	46 e4       	ldi	r20, 0x46	; 70
    38ba:	6c e0       	ldi	r22, 0x0C	; 12
    38bc:	89 eb       	ldi	r24, 0xB9	; 185
    38be:	9f e0       	ldi	r25, 0x0F	; 15
    38c0:	7f cf       	rjmp	.-258    	; 0x37c0 <Diamonds()+0xc2>
    38c2:	64 e6       	ldi	r22, 0x64	; 100
    38c4:	80 e1       	ldi	r24, 0x10	; 16
    38c6:	97 e2       	ldi	r25, 0x27	; 39
    38c8:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    38cc:	38 cf       	rjmp	.-400    	; 0x373e <Diamonds()+0x40>

000038ce <SetFire()>:
    38ce:	ef 92       	push	r14
    38d0:	ff 92       	push	r15
    38d2:	0f 93       	push	r16
    38d4:	1f 93       	push	r17
    38d6:	cf 93       	push	r28
    38d8:	df 93       	push	r29
    38da:	00 d0       	rcall	.+0      	; 0x38dc <SetFire()+0xe>
    38dc:	00 d0       	rcall	.+0      	; 0x38de <SetFire()+0x10>
    38de:	00 d0       	rcall	.+0      	; 0x38e0 <SetFire()+0x12>
    38e0:	1f 92       	push	r1
    38e2:	cd b7       	in	r28, 0x3d	; 61
    38e4:	de b7       	in	r29, 0x3e	; 62
    38e6:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    38ea:	8e 31       	cpi	r24, 0x1E	; 30
    38ec:	09 f4       	brne	.+2      	; 0x38f0 <SetFire()+0x22>
    38ee:	b0 c0       	rjmp	.+352    	; 0x3a50 <SetFire()+0x182>
    38f0:	a0 f5       	brcc	.+104    	; 0x395a <SetFire()+0x8c>
    38f2:	85 30       	cpi	r24, 0x05	; 5
    38f4:	09 f4       	brne	.+2      	; 0x38f8 <SetFire()+0x2a>
    38f6:	93 c0       	rjmp	.+294    	; 0x3a1e <SetFire()+0x150>
    38f8:	b8 f4       	brcc	.+46     	; 0x3928 <SetFire()+0x5a>
    38fa:	81 30       	cpi	r24, 0x01	; 1
    38fc:	09 f4       	brne	.+2      	; 0x3900 <SetFire()+0x32>
    38fe:	88 c0       	rjmp	.+272    	; 0x3a10 <SetFire()+0x142>
    3900:	08 f4       	brcc	.+2      	; 0x3904 <SetFire()+0x36>
    3902:	6e c0       	rjmp	.+220    	; 0x39e0 <SetFire()+0x112>
    3904:	45 e0       	ldi	r20, 0x05	; 5
    3906:	64 e0       	ldi	r22, 0x04	; 4
    3908:	82 30       	cpi	r24, 0x02	; 2
    390a:	09 f4       	brne	.+2      	; 0x390e <SetFire()+0x40>
    390c:	83 c0       	rjmp	.+262    	; 0x3a14 <SetFire()+0x146>
    390e:	27 96       	adiw	r28, 0x07	; 7
    3910:	0f b6       	in	r0, 0x3f	; 63
    3912:	f8 94       	cli
    3914:	de bf       	out	0x3e, r29	; 62
    3916:	0f be       	out	0x3f, r0	; 63
    3918:	cd bf       	out	0x3d, r28	; 61
    391a:	df 91       	pop	r29
    391c:	cf 91       	pop	r28
    391e:	1f 91       	pop	r17
    3920:	0f 91       	pop	r16
    3922:	ff 90       	pop	r15
    3924:	ef 90       	pop	r14
    3926:	08 95       	ret
    3928:	8f 30       	cpi	r24, 0x0F	; 15
    392a:	09 f4       	brne	.+2      	; 0x392e <SetFire()+0x60>
    392c:	7c c0       	rjmp	.+248    	; 0x3a26 <SetFire()+0x158>
    392e:	40 f4       	brcc	.+16     	; 0x3940 <SetFire()+0x72>
    3930:	8a 30       	cpi	r24, 0x0A	; 10
    3932:	69 f7       	brne	.-38     	; 0x390e <SetFire()+0x40>
    3934:	6f e0       	ldi	r22, 0x0F	; 15
    3936:	86 e0       	ldi	r24, 0x06	; 6
    3938:	9f e3       	ldi	r25, 0x3F	; 63
    393a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    393e:	e7 cf       	rjmp	.-50     	; 0x390e <SetFire()+0x40>
    3940:	84 31       	cpi	r24, 0x14	; 20
    3942:	09 f4       	brne	.+2      	; 0x3946 <SetFire()+0x78>
    3944:	74 c0       	rjmp	.+232    	; 0x3a2e <SetFire()+0x160>
    3946:	44 ef       	ldi	r20, 0xF4	; 244
    3948:	51 e0       	ldi	r21, 0x01	; 1
    394a:	6e e1       	ldi	r22, 0x1E	; 30
    394c:	89 31       	cpi	r24, 0x19	; 25
    394e:	f9 f6       	brne	.-66     	; 0x390e <SetFire()+0x40>
    3950:	86 e0       	ldi	r24, 0x06	; 6
    3952:	9f e3       	ldi	r25, 0x3F	; 63
    3954:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3958:	da cf       	rjmp	.-76     	; 0x390e <SetFire()+0x40>
    395a:	87 33       	cpi	r24, 0x37	; 55
    395c:	09 f4       	brne	.+2      	; 0x3960 <SetFire()+0x92>
    395e:	90 c0       	rjmp	.+288    	; 0x3a80 <SetFire()+0x1b2>
    3960:	d0 f4       	brcc	.+52     	; 0x3996 <SetFire()+0xc8>
    3962:	88 32       	cpi	r24, 0x28	; 40
    3964:	09 f4       	brne	.+2      	; 0x3968 <SetFire()+0x9a>
    3966:	79 c0       	rjmp	.+242    	; 0x3a5a <SetFire()+0x18c>
    3968:	50 f4       	brcc	.+20     	; 0x397e <SetFire()+0xb0>
    396a:	44 ef       	ldi	r20, 0xF4	; 244
    396c:	51 e0       	ldi	r21, 0x01	; 1
    396e:	68 e2       	ldi	r22, 0x28	; 40
    3970:	83 32       	cpi	r24, 0x23	; 35
    3972:	69 f6       	brne	.-102    	; 0x390e <SetFire()+0x40>
    3974:	86 e0       	ldi	r24, 0x06	; 6
    3976:	9f e3       	ldi	r25, 0x3F	; 63
    3978:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    397c:	c8 cf       	rjmp	.-112    	; 0x390e <SetFire()+0x40>
    397e:	8d 32       	cpi	r24, 0x2D	; 45
    3980:	09 f4       	brne	.+2      	; 0x3984 <SetFire()+0xb6>
    3982:	78 c0       	rjmp	.+240    	; 0x3a74 <SetFire()+0x1a6>
    3984:	82 33       	cpi	r24, 0x32	; 50
    3986:	19 f6       	brne	.-122    	; 0x390e <SetFire()+0x40>
    3988:	47 e3       	ldi	r20, 0x37	; 55
    398a:	67 e0       	ldi	r22, 0x07	; 7
    398c:	8d ef       	ldi	r24, 0xFD	; 253
    398e:	9e e3       	ldi	r25, 0x3E	; 62
    3990:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3994:	bc cf       	rjmp	.-136    	; 0x390e <SetFire()+0x40>
    3996:	81 34       	cpi	r24, 0x41	; 65
    3998:	09 f4       	brne	.+2      	; 0x399c <SetFire()+0xce>
    399a:	76 c0       	rjmp	.+236    	; 0x3a88 <SetFire()+0x1ba>
    399c:	90 f4       	brcc	.+36     	; 0x39c2 <SetFire()+0xf4>
    399e:	8c 33       	cpi	r24, 0x3C	; 60
    39a0:	09 f0       	breq	.+2      	; 0x39a4 <SetFire()+0xd6>
    39a2:	b5 cf       	rjmp	.-150    	; 0x390e <SetFire()+0x40>
    39a4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    39a8:	7c 01       	movw	r14, r24
    39aa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    39ae:	8c 01       	movw	r16, r24
    39b0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    39b4:	9c 01       	movw	r18, r24
    39b6:	4b e4       	ldi	r20, 0x4B	; 75
    39b8:	50 e0       	ldi	r21, 0x00	; 0
    39ba:	61 e4       	ldi	r22, 0x41	; 65
    39bc:	84 e4       	ldi	r24, 0x44	; 68
    39be:	9f e2       	ldi	r25, 0x2F	; 47
    39c0:	44 c0       	rjmp	.+136    	; 0x3a4a <SetFire()+0x17c>
    39c2:	86 34       	cpi	r24, 0x46	; 70
    39c4:	09 f4       	brne	.+2      	; 0x39c8 <SetFire()+0xfa>
    39c6:	65 c0       	rjmp	.+202    	; 0x3a92 <SetFire()+0x1c4>
    39c8:	84 36       	cpi	r24, 0x64	; 100
    39ca:	09 f0       	breq	.+2      	; 0x39ce <SetFire()+0x100>
    39cc:	a0 cf       	rjmp	.-192    	; 0x390e <SetFire()+0x40>
    39ce:	60 e0       	ldi	r22, 0x00	; 0
    39d0:	8d e0       	ldi	r24, 0x0D	; 13
    39d2:	90 e1       	ldi	r25, 0x10	; 16
    39d4:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    39d8:	80 e0       	ldi	r24, 0x00	; 0
    39da:	0e 94 30 13 	call	0x2660	; 0x2660 <switchToSong(unsigned char)>
    39de:	97 cf       	rjmp	.-210    	; 0x390e <SetFire()+0x40>
    39e0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    39e4:	7c 01       	movw	r14, r24
    39e6:	60 ef       	ldi	r22, 0xF0	; 240
    39e8:	71 e0       	ldi	r23, 0x01	; 1
    39ea:	ce 01       	movw	r24, r28
    39ec:	01 96       	adiw	r24, 0x01	; 1
    39ee:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    39f2:	01 e0       	ldi	r16, 0x01	; 1
    39f4:	97 01       	movw	r18, r14
    39f6:	4b e4       	ldi	r20, 0x4B	; 75
    39f8:	50 e0       	ldi	r21, 0x00	; 0
    39fa:	6e e0       	ldi	r22, 0x0E	; 14
    39fc:	7d e3       	ldi	r23, 0x3D	; 61
    39fe:	ce 01       	movw	r24, r28
    3a00:	01 96       	adiw	r24, 0x01	; 1
    3a02:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3a06:	ce 01       	movw	r24, r28
    3a08:	01 96       	adiw	r24, 0x01	; 1
    3a0a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    3a0e:	7f cf       	rjmp	.-258    	; 0x390e <SetFire()+0x40>
    3a10:	42 e0       	ldi	r20, 0x02	; 2
    3a12:	63 e0       	ldi	r22, 0x03	; 3
    3a14:	83 e8       	ldi	r24, 0x83	; 131
    3a16:	9f e1       	ldi	r25, 0x1F	; 31
    3a18:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3a1c:	78 cf       	rjmp	.-272    	; 0x390e <SetFire()+0x40>
    3a1e:	44 ef       	ldi	r20, 0xF4	; 244
    3a20:	51 e0       	ldi	r21, 0x01	; 1
    3a22:	6a e0       	ldi	r22, 0x0A	; 10
    3a24:	95 cf       	rjmp	.-214    	; 0x3950 <SetFire()+0x82>
    3a26:	44 ef       	ldi	r20, 0xF4	; 244
    3a28:	51 e0       	ldi	r21, 0x01	; 1
    3a2a:	64 e1       	ldi	r22, 0x14	; 20
    3a2c:	a3 cf       	rjmp	.-186    	; 0x3974 <SetFire()+0xa6>
    3a2e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a32:	7c 01       	movw	r14, r24
    3a34:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a38:	8c 01       	movw	r16, r24
    3a3a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a3e:	9c 01       	movw	r18, r24
    3a40:	4b e4       	ldi	r20, 0x4B	; 75
    3a42:	50 e0       	ldi	r21, 0x00	; 0
    3a44:	69 e1       	ldi	r22, 0x19	; 25
    3a46:	86 e0       	ldi	r24, 0x06	; 6
    3a48:	9f e3       	ldi	r25, 0x3F	; 63
    3a4a:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3a4e:	5f cf       	rjmp	.-322    	; 0x390e <SetFire()+0x40>
    3a50:	43 e2       	ldi	r20, 0x23	; 35
    3a52:	64 e0       	ldi	r22, 0x04	; 4
    3a54:	86 e0       	ldi	r24, 0x06	; 6
    3a56:	9f e3       	ldi	r25, 0x3F	; 63
    3a58:	df cf       	rjmp	.-66     	; 0x3a18 <SetFire()+0x14a>
    3a5a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a5e:	7c 01       	movw	r14, r24
    3a60:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a64:	8c 01       	movw	r16, r24
    3a66:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a6a:	9c 01       	movw	r18, r24
    3a6c:	4b e4       	ldi	r20, 0x4B	; 75
    3a6e:	50 e0       	ldi	r21, 0x00	; 0
    3a70:	6d e2       	ldi	r22, 0x2D	; 45
    3a72:	e9 cf       	rjmp	.-46     	; 0x3a46 <SetFire()+0x178>
    3a74:	62 e3       	ldi	r22, 0x32	; 50
    3a76:	82 e7       	ldi	r24, 0x72	; 114
    3a78:	9f e1       	ldi	r25, 0x1F	; 31
    3a7a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3a7e:	47 cf       	rjmp	.-370    	; 0x390e <SetFire()+0x40>
    3a80:	44 ef       	ldi	r20, 0xF4	; 244
    3a82:	51 e0       	ldi	r21, 0x01	; 1
    3a84:	6c e3       	ldi	r22, 0x3C	; 60
    3a86:	76 cf       	rjmp	.-276    	; 0x3974 <SetFire()+0xa6>
    3a88:	46 e4       	ldi	r20, 0x46	; 70
    3a8a:	6c e0       	ldi	r22, 0x0C	; 12
    3a8c:	89 eb       	ldi	r24, 0xB9	; 185
    3a8e:	9f e0       	ldi	r25, 0x0F	; 15
    3a90:	7f cf       	rjmp	.-258    	; 0x3990 <SetFire()+0xc2>
    3a92:	64 e6       	ldi	r22, 0x64	; 100
    3a94:	80 e1       	ldi	r24, 0x10	; 16
    3a96:	97 e2       	ldi	r25, 0x27	; 39
    3a98:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    3a9c:	38 cf       	rjmp	.-400    	; 0x390e <SetFire()+0x40>

00003a9e <Chandelier()>:
    3a9e:	ef 92       	push	r14
    3aa0:	ff 92       	push	r15
    3aa2:	0f 93       	push	r16
    3aa4:	1f 93       	push	r17
    3aa6:	cf 93       	push	r28
    3aa8:	df 93       	push	r29
    3aaa:	00 d0       	rcall	.+0      	; 0x3aac <Chandelier()+0xe>
    3aac:	00 d0       	rcall	.+0      	; 0x3aae <Chandelier()+0x10>
    3aae:	00 d0       	rcall	.+0      	; 0x3ab0 <Chandelier()+0x12>
    3ab0:	1f 92       	push	r1
    3ab2:	cd b7       	in	r28, 0x3d	; 61
    3ab4:	de b7       	in	r29, 0x3e	; 62
    3ab6:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    3aba:	8e 31       	cpi	r24, 0x1E	; 30
    3abc:	09 f4       	brne	.+2      	; 0x3ac0 <Chandelier()+0x22>
    3abe:	b0 c0       	rjmp	.+352    	; 0x3c20 <Chandelier()+0x182>
    3ac0:	a0 f5       	brcc	.+104    	; 0x3b2a <Chandelier()+0x8c>
    3ac2:	85 30       	cpi	r24, 0x05	; 5
    3ac4:	09 f4       	brne	.+2      	; 0x3ac8 <Chandelier()+0x2a>
    3ac6:	93 c0       	rjmp	.+294    	; 0x3bee <Chandelier()+0x150>
    3ac8:	b8 f4       	brcc	.+46     	; 0x3af8 <Chandelier()+0x5a>
    3aca:	81 30       	cpi	r24, 0x01	; 1
    3acc:	09 f4       	brne	.+2      	; 0x3ad0 <Chandelier()+0x32>
    3ace:	88 c0       	rjmp	.+272    	; 0x3be0 <Chandelier()+0x142>
    3ad0:	08 f4       	brcc	.+2      	; 0x3ad4 <Chandelier()+0x36>
    3ad2:	6e c0       	rjmp	.+220    	; 0x3bb0 <Chandelier()+0x112>
    3ad4:	45 e0       	ldi	r20, 0x05	; 5
    3ad6:	64 e0       	ldi	r22, 0x04	; 4
    3ad8:	82 30       	cpi	r24, 0x02	; 2
    3ada:	09 f4       	brne	.+2      	; 0x3ade <Chandelier()+0x40>
    3adc:	83 c0       	rjmp	.+262    	; 0x3be4 <Chandelier()+0x146>
    3ade:	27 96       	adiw	r28, 0x07	; 7
    3ae0:	0f b6       	in	r0, 0x3f	; 63
    3ae2:	f8 94       	cli
    3ae4:	de bf       	out	0x3e, r29	; 62
    3ae6:	0f be       	out	0x3f, r0	; 63
    3ae8:	cd bf       	out	0x3d, r28	; 61
    3aea:	df 91       	pop	r29
    3aec:	cf 91       	pop	r28
    3aee:	1f 91       	pop	r17
    3af0:	0f 91       	pop	r16
    3af2:	ff 90       	pop	r15
    3af4:	ef 90       	pop	r14
    3af6:	08 95       	ret
    3af8:	8f 30       	cpi	r24, 0x0F	; 15
    3afa:	09 f4       	brne	.+2      	; 0x3afe <Chandelier()+0x60>
    3afc:	7c c0       	rjmp	.+248    	; 0x3bf6 <Chandelier()+0x158>
    3afe:	40 f4       	brcc	.+16     	; 0x3b10 <Chandelier()+0x72>
    3b00:	8a 30       	cpi	r24, 0x0A	; 10
    3b02:	69 f7       	brne	.-38     	; 0x3ade <Chandelier()+0x40>
    3b04:	6f e0       	ldi	r22, 0x0F	; 15
    3b06:	86 e0       	ldi	r24, 0x06	; 6
    3b08:	9f e3       	ldi	r25, 0x3F	; 63
    3b0a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3b0e:	e7 cf       	rjmp	.-50     	; 0x3ade <Chandelier()+0x40>
    3b10:	84 31       	cpi	r24, 0x14	; 20
    3b12:	09 f4       	brne	.+2      	; 0x3b16 <Chandelier()+0x78>
    3b14:	74 c0       	rjmp	.+232    	; 0x3bfe <Chandelier()+0x160>
    3b16:	44 ef       	ldi	r20, 0xF4	; 244
    3b18:	51 e0       	ldi	r21, 0x01	; 1
    3b1a:	6e e1       	ldi	r22, 0x1E	; 30
    3b1c:	89 31       	cpi	r24, 0x19	; 25
    3b1e:	f9 f6       	brne	.-66     	; 0x3ade <Chandelier()+0x40>
    3b20:	86 e0       	ldi	r24, 0x06	; 6
    3b22:	9f e3       	ldi	r25, 0x3F	; 63
    3b24:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3b28:	da cf       	rjmp	.-76     	; 0x3ade <Chandelier()+0x40>
    3b2a:	87 33       	cpi	r24, 0x37	; 55
    3b2c:	09 f4       	brne	.+2      	; 0x3b30 <Chandelier()+0x92>
    3b2e:	90 c0       	rjmp	.+288    	; 0x3c50 <Chandelier()+0x1b2>
    3b30:	d0 f4       	brcc	.+52     	; 0x3b66 <Chandelier()+0xc8>
    3b32:	88 32       	cpi	r24, 0x28	; 40
    3b34:	09 f4       	brne	.+2      	; 0x3b38 <Chandelier()+0x9a>
    3b36:	79 c0       	rjmp	.+242    	; 0x3c2a <Chandelier()+0x18c>
    3b38:	50 f4       	brcc	.+20     	; 0x3b4e <Chandelier()+0xb0>
    3b3a:	44 ef       	ldi	r20, 0xF4	; 244
    3b3c:	51 e0       	ldi	r21, 0x01	; 1
    3b3e:	68 e2       	ldi	r22, 0x28	; 40
    3b40:	83 32       	cpi	r24, 0x23	; 35
    3b42:	69 f6       	brne	.-102    	; 0x3ade <Chandelier()+0x40>
    3b44:	86 e0       	ldi	r24, 0x06	; 6
    3b46:	9f e3       	ldi	r25, 0x3F	; 63
    3b48:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3b4c:	c8 cf       	rjmp	.-112    	; 0x3ade <Chandelier()+0x40>
    3b4e:	8d 32       	cpi	r24, 0x2D	; 45
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <Chandelier()+0xb6>
    3b52:	78 c0       	rjmp	.+240    	; 0x3c44 <Chandelier()+0x1a6>
    3b54:	82 33       	cpi	r24, 0x32	; 50
    3b56:	19 f6       	brne	.-122    	; 0x3ade <Chandelier()+0x40>
    3b58:	47 e3       	ldi	r20, 0x37	; 55
    3b5a:	67 e0       	ldi	r22, 0x07	; 7
    3b5c:	8d ef       	ldi	r24, 0xFD	; 253
    3b5e:	9e e3       	ldi	r25, 0x3E	; 62
    3b60:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3b64:	bc cf       	rjmp	.-136    	; 0x3ade <Chandelier()+0x40>
    3b66:	81 34       	cpi	r24, 0x41	; 65
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <Chandelier()+0xce>
    3b6a:	76 c0       	rjmp	.+236    	; 0x3c58 <Chandelier()+0x1ba>
    3b6c:	90 f4       	brcc	.+36     	; 0x3b92 <Chandelier()+0xf4>
    3b6e:	8c 33       	cpi	r24, 0x3C	; 60
    3b70:	09 f0       	breq	.+2      	; 0x3b74 <Chandelier()+0xd6>
    3b72:	b5 cf       	rjmp	.-150    	; 0x3ade <Chandelier()+0x40>
    3b74:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3b78:	7c 01       	movw	r14, r24
    3b7a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3b7e:	8c 01       	movw	r16, r24
    3b80:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3b84:	9c 01       	movw	r18, r24
    3b86:	4b e4       	ldi	r20, 0x4B	; 75
    3b88:	50 e0       	ldi	r21, 0x00	; 0
    3b8a:	61 e4       	ldi	r22, 0x41	; 65
    3b8c:	84 e4       	ldi	r24, 0x44	; 68
    3b8e:	9f e2       	ldi	r25, 0x2F	; 47
    3b90:	44 c0       	rjmp	.+136    	; 0x3c1a <Chandelier()+0x17c>
    3b92:	86 34       	cpi	r24, 0x46	; 70
    3b94:	09 f4       	brne	.+2      	; 0x3b98 <Chandelier()+0xfa>
    3b96:	65 c0       	rjmp	.+202    	; 0x3c62 <Chandelier()+0x1c4>
    3b98:	84 36       	cpi	r24, 0x64	; 100
    3b9a:	09 f0       	breq	.+2      	; 0x3b9e <Chandelier()+0x100>
    3b9c:	a0 cf       	rjmp	.-192    	; 0x3ade <Chandelier()+0x40>
    3b9e:	60 e0       	ldi	r22, 0x00	; 0
    3ba0:	8d e0       	ldi	r24, 0x0D	; 13
    3ba2:	90 e1       	ldi	r25, 0x10	; 16
    3ba4:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    3ba8:	80 e0       	ldi	r24, 0x00	; 0
    3baa:	0e 94 30 13 	call	0x2660	; 0x2660 <switchToSong(unsigned char)>
    3bae:	97 cf       	rjmp	.-210    	; 0x3ade <Chandelier()+0x40>
    3bb0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3bb4:	7c 01       	movw	r14, r24
    3bb6:	6e e0       	ldi	r22, 0x0E	; 14
    3bb8:	72 e0       	ldi	r23, 0x02	; 2
    3bba:	ce 01       	movw	r24, r28
    3bbc:	01 96       	adiw	r24, 0x01	; 1
    3bbe:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    3bc2:	01 e0       	ldi	r16, 0x01	; 1
    3bc4:	97 01       	movw	r18, r14
    3bc6:	4b e4       	ldi	r20, 0x4B	; 75
    3bc8:	50 e0       	ldi	r21, 0x00	; 0
    3bca:	6e e0       	ldi	r22, 0x0E	; 14
    3bcc:	7d e3       	ldi	r23, 0x3D	; 61
    3bce:	ce 01       	movw	r24, r28
    3bd0:	01 96       	adiw	r24, 0x01	; 1
    3bd2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3bd6:	ce 01       	movw	r24, r28
    3bd8:	01 96       	adiw	r24, 0x01	; 1
    3bda:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    3bde:	7f cf       	rjmp	.-258    	; 0x3ade <Chandelier()+0x40>
    3be0:	42 e0       	ldi	r20, 0x02	; 2
    3be2:	63 e0       	ldi	r22, 0x03	; 3
    3be4:	83 e8       	ldi	r24, 0x83	; 131
    3be6:	9f e1       	ldi	r25, 0x1F	; 31
    3be8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3bec:	78 cf       	rjmp	.-272    	; 0x3ade <Chandelier()+0x40>
    3bee:	44 ef       	ldi	r20, 0xF4	; 244
    3bf0:	51 e0       	ldi	r21, 0x01	; 1
    3bf2:	6a e0       	ldi	r22, 0x0A	; 10
    3bf4:	95 cf       	rjmp	.-214    	; 0x3b20 <Chandelier()+0x82>
    3bf6:	44 ef       	ldi	r20, 0xF4	; 244
    3bf8:	51 e0       	ldi	r21, 0x01	; 1
    3bfa:	64 e1       	ldi	r22, 0x14	; 20
    3bfc:	a3 cf       	rjmp	.-186    	; 0x3b44 <Chandelier()+0xa6>
    3bfe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c02:	7c 01       	movw	r14, r24
    3c04:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c08:	8c 01       	movw	r16, r24
    3c0a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c0e:	9c 01       	movw	r18, r24
    3c10:	4b e4       	ldi	r20, 0x4B	; 75
    3c12:	50 e0       	ldi	r21, 0x00	; 0
    3c14:	69 e1       	ldi	r22, 0x19	; 25
    3c16:	86 e0       	ldi	r24, 0x06	; 6
    3c18:	9f e3       	ldi	r25, 0x3F	; 63
    3c1a:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3c1e:	5f cf       	rjmp	.-322    	; 0x3ade <Chandelier()+0x40>
    3c20:	43 e2       	ldi	r20, 0x23	; 35
    3c22:	64 e0       	ldi	r22, 0x04	; 4
    3c24:	86 e0       	ldi	r24, 0x06	; 6
    3c26:	9f e3       	ldi	r25, 0x3F	; 63
    3c28:	df cf       	rjmp	.-66     	; 0x3be8 <Chandelier()+0x14a>
    3c2a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c2e:	7c 01       	movw	r14, r24
    3c30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c34:	8c 01       	movw	r16, r24
    3c36:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c3a:	9c 01       	movw	r18, r24
    3c3c:	4b e4       	ldi	r20, 0x4B	; 75
    3c3e:	50 e0       	ldi	r21, 0x00	; 0
    3c40:	6d e2       	ldi	r22, 0x2D	; 45
    3c42:	e9 cf       	rjmp	.-46     	; 0x3c16 <Chandelier()+0x178>
    3c44:	62 e3       	ldi	r22, 0x32	; 50
    3c46:	82 e7       	ldi	r24, 0x72	; 114
    3c48:	9f e1       	ldi	r25, 0x1F	; 31
    3c4a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3c4e:	47 cf       	rjmp	.-370    	; 0x3ade <Chandelier()+0x40>
    3c50:	44 ef       	ldi	r20, 0xF4	; 244
    3c52:	51 e0       	ldi	r21, 0x01	; 1
    3c54:	6c e3       	ldi	r22, 0x3C	; 60
    3c56:	76 cf       	rjmp	.-276    	; 0x3b44 <Chandelier()+0xa6>
    3c58:	46 e4       	ldi	r20, 0x46	; 70
    3c5a:	6c e0       	ldi	r22, 0x0C	; 12
    3c5c:	89 eb       	ldi	r24, 0xB9	; 185
    3c5e:	9f e0       	ldi	r25, 0x0F	; 15
    3c60:	7f cf       	rjmp	.-258    	; 0x3b60 <Chandelier()+0xc2>
    3c62:	64 e6       	ldi	r22, 0x64	; 100
    3c64:	80 e1       	ldi	r24, 0x10	; 16
    3c66:	97 e2       	ldi	r25, 0x27	; 39
    3c68:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    3c6c:	38 cf       	rjmp	.-400    	; 0x3ade <Chandelier()+0x40>

00003c6e <Titanium()>:
    3c6e:	ef 92       	push	r14
    3c70:	ff 92       	push	r15
    3c72:	0f 93       	push	r16
    3c74:	1f 93       	push	r17
    3c76:	cf 93       	push	r28
    3c78:	df 93       	push	r29
    3c7a:	00 d0       	rcall	.+0      	; 0x3c7c <Titanium()+0xe>
    3c7c:	00 d0       	rcall	.+0      	; 0x3c7e <Titanium()+0x10>
    3c7e:	00 d0       	rcall	.+0      	; 0x3c80 <Titanium()+0x12>
    3c80:	1f 92       	push	r1
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
    3c86:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    3c8a:	8e 31       	cpi	r24, 0x1E	; 30
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <Titanium()+0x22>
    3c8e:	b0 c0       	rjmp	.+352    	; 0x3df0 <Titanium()+0x182>
    3c90:	a0 f5       	brcc	.+104    	; 0x3cfa <Titanium()+0x8c>
    3c92:	85 30       	cpi	r24, 0x05	; 5
    3c94:	09 f4       	brne	.+2      	; 0x3c98 <Titanium()+0x2a>
    3c96:	93 c0       	rjmp	.+294    	; 0x3dbe <Titanium()+0x150>
    3c98:	b8 f4       	brcc	.+46     	; 0x3cc8 <Titanium()+0x5a>
    3c9a:	81 30       	cpi	r24, 0x01	; 1
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <Titanium()+0x32>
    3c9e:	88 c0       	rjmp	.+272    	; 0x3db0 <Titanium()+0x142>
    3ca0:	08 f4       	brcc	.+2      	; 0x3ca4 <Titanium()+0x36>
    3ca2:	6e c0       	rjmp	.+220    	; 0x3d80 <Titanium()+0x112>
    3ca4:	45 e0       	ldi	r20, 0x05	; 5
    3ca6:	64 e0       	ldi	r22, 0x04	; 4
    3ca8:	82 30       	cpi	r24, 0x02	; 2
    3caa:	09 f4       	brne	.+2      	; 0x3cae <Titanium()+0x40>
    3cac:	83 c0       	rjmp	.+262    	; 0x3db4 <Titanium()+0x146>
    3cae:	27 96       	adiw	r28, 0x07	; 7
    3cb0:	0f b6       	in	r0, 0x3f	; 63
    3cb2:	f8 94       	cli
    3cb4:	de bf       	out	0x3e, r29	; 62
    3cb6:	0f be       	out	0x3f, r0	; 63
    3cb8:	cd bf       	out	0x3d, r28	; 61
    3cba:	df 91       	pop	r29
    3cbc:	cf 91       	pop	r28
    3cbe:	1f 91       	pop	r17
    3cc0:	0f 91       	pop	r16
    3cc2:	ff 90       	pop	r15
    3cc4:	ef 90       	pop	r14
    3cc6:	08 95       	ret
    3cc8:	8f 30       	cpi	r24, 0x0F	; 15
    3cca:	09 f4       	brne	.+2      	; 0x3cce <Titanium()+0x60>
    3ccc:	7c c0       	rjmp	.+248    	; 0x3dc6 <Titanium()+0x158>
    3cce:	40 f4       	brcc	.+16     	; 0x3ce0 <Titanium()+0x72>
    3cd0:	8a 30       	cpi	r24, 0x0A	; 10
    3cd2:	69 f7       	brne	.-38     	; 0x3cae <Titanium()+0x40>
    3cd4:	6f e0       	ldi	r22, 0x0F	; 15
    3cd6:	86 e0       	ldi	r24, 0x06	; 6
    3cd8:	9f e3       	ldi	r25, 0x3F	; 63
    3cda:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3cde:	e7 cf       	rjmp	.-50     	; 0x3cae <Titanium()+0x40>
    3ce0:	84 31       	cpi	r24, 0x14	; 20
    3ce2:	09 f4       	brne	.+2      	; 0x3ce6 <Titanium()+0x78>
    3ce4:	74 c0       	rjmp	.+232    	; 0x3dce <Titanium()+0x160>
    3ce6:	44 ef       	ldi	r20, 0xF4	; 244
    3ce8:	51 e0       	ldi	r21, 0x01	; 1
    3cea:	6e e1       	ldi	r22, 0x1E	; 30
    3cec:	89 31       	cpi	r24, 0x19	; 25
    3cee:	f9 f6       	brne	.-66     	; 0x3cae <Titanium()+0x40>
    3cf0:	86 e0       	ldi	r24, 0x06	; 6
    3cf2:	9f e3       	ldi	r25, 0x3F	; 63
    3cf4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3cf8:	da cf       	rjmp	.-76     	; 0x3cae <Titanium()+0x40>
    3cfa:	87 33       	cpi	r24, 0x37	; 55
    3cfc:	09 f4       	brne	.+2      	; 0x3d00 <Titanium()+0x92>
    3cfe:	90 c0       	rjmp	.+288    	; 0x3e20 <Titanium()+0x1b2>
    3d00:	d0 f4       	brcc	.+52     	; 0x3d36 <Titanium()+0xc8>
    3d02:	88 32       	cpi	r24, 0x28	; 40
    3d04:	09 f4       	brne	.+2      	; 0x3d08 <Titanium()+0x9a>
    3d06:	79 c0       	rjmp	.+242    	; 0x3dfa <Titanium()+0x18c>
    3d08:	50 f4       	brcc	.+20     	; 0x3d1e <Titanium()+0xb0>
    3d0a:	44 ef       	ldi	r20, 0xF4	; 244
    3d0c:	51 e0       	ldi	r21, 0x01	; 1
    3d0e:	68 e2       	ldi	r22, 0x28	; 40
    3d10:	83 32       	cpi	r24, 0x23	; 35
    3d12:	69 f6       	brne	.-102    	; 0x3cae <Titanium()+0x40>
    3d14:	86 e0       	ldi	r24, 0x06	; 6
    3d16:	9f e3       	ldi	r25, 0x3F	; 63
    3d18:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3d1c:	c8 cf       	rjmp	.-112    	; 0x3cae <Titanium()+0x40>
    3d1e:	8d 32       	cpi	r24, 0x2D	; 45
    3d20:	09 f4       	brne	.+2      	; 0x3d24 <Titanium()+0xb6>
    3d22:	78 c0       	rjmp	.+240    	; 0x3e14 <Titanium()+0x1a6>
    3d24:	82 33       	cpi	r24, 0x32	; 50
    3d26:	19 f6       	brne	.-122    	; 0x3cae <Titanium()+0x40>
    3d28:	47 e3       	ldi	r20, 0x37	; 55
    3d2a:	67 e0       	ldi	r22, 0x07	; 7
    3d2c:	8d ef       	ldi	r24, 0xFD	; 253
    3d2e:	9e e3       	ldi	r25, 0x3E	; 62
    3d30:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3d34:	bc cf       	rjmp	.-136    	; 0x3cae <Titanium()+0x40>
    3d36:	81 34       	cpi	r24, 0x41	; 65
    3d38:	09 f4       	brne	.+2      	; 0x3d3c <Titanium()+0xce>
    3d3a:	76 c0       	rjmp	.+236    	; 0x3e28 <Titanium()+0x1ba>
    3d3c:	90 f4       	brcc	.+36     	; 0x3d62 <Titanium()+0xf4>
    3d3e:	8c 33       	cpi	r24, 0x3C	; 60
    3d40:	09 f0       	breq	.+2      	; 0x3d44 <Titanium()+0xd6>
    3d42:	b5 cf       	rjmp	.-150    	; 0x3cae <Titanium()+0x40>
    3d44:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3d48:	7c 01       	movw	r14, r24
    3d4a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3d4e:	8c 01       	movw	r16, r24
    3d50:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3d54:	9c 01       	movw	r18, r24
    3d56:	4b e4       	ldi	r20, 0x4B	; 75
    3d58:	50 e0       	ldi	r21, 0x00	; 0
    3d5a:	61 e4       	ldi	r22, 0x41	; 65
    3d5c:	84 e4       	ldi	r24, 0x44	; 68
    3d5e:	9f e2       	ldi	r25, 0x2F	; 47
    3d60:	44 c0       	rjmp	.+136    	; 0x3dea <Titanium()+0x17c>
    3d62:	86 34       	cpi	r24, 0x46	; 70
    3d64:	09 f4       	brne	.+2      	; 0x3d68 <Titanium()+0xfa>
    3d66:	65 c0       	rjmp	.+202    	; 0x3e32 <Titanium()+0x1c4>
    3d68:	84 36       	cpi	r24, 0x64	; 100
    3d6a:	09 f0       	breq	.+2      	; 0x3d6e <Titanium()+0x100>
    3d6c:	a0 cf       	rjmp	.-192    	; 0x3cae <Titanium()+0x40>
    3d6e:	60 e0       	ldi	r22, 0x00	; 0
    3d70:	8d e0       	ldi	r24, 0x0D	; 13
    3d72:	90 e1       	ldi	r25, 0x10	; 16
    3d74:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    3d78:	80 e0       	ldi	r24, 0x00	; 0
    3d7a:	0e 94 30 13 	call	0x2660	; 0x2660 <switchToSong(unsigned char)>
    3d7e:	97 cf       	rjmp	.-210    	; 0x3cae <Titanium()+0x40>
    3d80:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3d84:	7c 01       	movw	r14, r24
    3d86:	60 e2       	ldi	r22, 0x20	; 32
    3d88:	72 e0       	ldi	r23, 0x02	; 2
    3d8a:	ce 01       	movw	r24, r28
    3d8c:	01 96       	adiw	r24, 0x01	; 1
    3d8e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    3d92:	01 e0       	ldi	r16, 0x01	; 1
    3d94:	97 01       	movw	r18, r14
    3d96:	4b e4       	ldi	r20, 0x4B	; 75
    3d98:	50 e0       	ldi	r21, 0x00	; 0
    3d9a:	6e e0       	ldi	r22, 0x0E	; 14
    3d9c:	7d e3       	ldi	r23, 0x3D	; 61
    3d9e:	ce 01       	movw	r24, r28
    3da0:	01 96       	adiw	r24, 0x01	; 1
    3da2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3da6:	ce 01       	movw	r24, r28
    3da8:	01 96       	adiw	r24, 0x01	; 1
    3daa:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    3dae:	7f cf       	rjmp	.-258    	; 0x3cae <Titanium()+0x40>
    3db0:	42 e0       	ldi	r20, 0x02	; 2
    3db2:	63 e0       	ldi	r22, 0x03	; 3
    3db4:	83 e8       	ldi	r24, 0x83	; 131
    3db6:	9f e1       	ldi	r25, 0x1F	; 31
    3db8:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3dbc:	78 cf       	rjmp	.-272    	; 0x3cae <Titanium()+0x40>
    3dbe:	44 ef       	ldi	r20, 0xF4	; 244
    3dc0:	51 e0       	ldi	r21, 0x01	; 1
    3dc2:	6a e0       	ldi	r22, 0x0A	; 10
    3dc4:	95 cf       	rjmp	.-214    	; 0x3cf0 <Titanium()+0x82>
    3dc6:	44 ef       	ldi	r20, 0xF4	; 244
    3dc8:	51 e0       	ldi	r21, 0x01	; 1
    3dca:	64 e1       	ldi	r22, 0x14	; 20
    3dcc:	a3 cf       	rjmp	.-186    	; 0x3d14 <Titanium()+0xa6>
    3dce:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3dd2:	7c 01       	movw	r14, r24
    3dd4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3dd8:	8c 01       	movw	r16, r24
    3dda:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3dde:	9c 01       	movw	r18, r24
    3de0:	4b e4       	ldi	r20, 0x4B	; 75
    3de2:	50 e0       	ldi	r21, 0x00	; 0
    3de4:	69 e1       	ldi	r22, 0x19	; 25
    3de6:	86 e0       	ldi	r24, 0x06	; 6
    3de8:	9f e3       	ldi	r25, 0x3F	; 63
    3dea:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3dee:	5f cf       	rjmp	.-322    	; 0x3cae <Titanium()+0x40>
    3df0:	43 e2       	ldi	r20, 0x23	; 35
    3df2:	64 e0       	ldi	r22, 0x04	; 4
    3df4:	86 e0       	ldi	r24, 0x06	; 6
    3df6:	9f e3       	ldi	r25, 0x3F	; 63
    3df8:	df cf       	rjmp	.-66     	; 0x3db8 <Titanium()+0x14a>
    3dfa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3dfe:	7c 01       	movw	r14, r24
    3e00:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e04:	8c 01       	movw	r16, r24
    3e06:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e0a:	9c 01       	movw	r18, r24
    3e0c:	4b e4       	ldi	r20, 0x4B	; 75
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	6d e2       	ldi	r22, 0x2D	; 45
    3e12:	e9 cf       	rjmp	.-46     	; 0x3de6 <Titanium()+0x178>
    3e14:	62 e3       	ldi	r22, 0x32	; 50
    3e16:	82 e7       	ldi	r24, 0x72	; 114
    3e18:	9f e1       	ldi	r25, 0x1F	; 31
    3e1a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3e1e:	47 cf       	rjmp	.-370    	; 0x3cae <Titanium()+0x40>
    3e20:	44 ef       	ldi	r20, 0xF4	; 244
    3e22:	51 e0       	ldi	r21, 0x01	; 1
    3e24:	6c e3       	ldi	r22, 0x3C	; 60
    3e26:	76 cf       	rjmp	.-276    	; 0x3d14 <Titanium()+0xa6>
    3e28:	46 e4       	ldi	r20, 0x46	; 70
    3e2a:	6c e0       	ldi	r22, 0x0C	; 12
    3e2c:	89 eb       	ldi	r24, 0xB9	; 185
    3e2e:	9f e0       	ldi	r25, 0x0F	; 15
    3e30:	7f cf       	rjmp	.-258    	; 0x3d30 <Titanium()+0xc2>
    3e32:	64 e6       	ldi	r22, 0x64	; 100
    3e34:	80 e1       	ldi	r24, 0x10	; 16
    3e36:	97 e2       	ldi	r25, 0x27	; 39
    3e38:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    3e3c:	38 cf       	rjmp	.-400    	; 0x3cae <Titanium()+0x40>

00003e3e <SomeoneYouLoved()>:
    3e3e:	ef 92       	push	r14
    3e40:	ff 92       	push	r15
    3e42:	0f 93       	push	r16
    3e44:	1f 93       	push	r17
    3e46:	cf 93       	push	r28
    3e48:	df 93       	push	r29
    3e4a:	00 d0       	rcall	.+0      	; 0x3e4c <SomeoneYouLoved()+0xe>
    3e4c:	00 d0       	rcall	.+0      	; 0x3e4e <SomeoneYouLoved()+0x10>
    3e4e:	00 d0       	rcall	.+0      	; 0x3e50 <SomeoneYouLoved()+0x12>
    3e50:	1f 92       	push	r1
    3e52:	cd b7       	in	r28, 0x3d	; 61
    3e54:	de b7       	in	r29, 0x3e	; 62
    3e56:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    3e5a:	8e 31       	cpi	r24, 0x1E	; 30
    3e5c:	09 f4       	brne	.+2      	; 0x3e60 <SomeoneYouLoved()+0x22>
    3e5e:	b0 c0       	rjmp	.+352    	; 0x3fc0 <SomeoneYouLoved()+0x182>
    3e60:	a0 f5       	brcc	.+104    	; 0x3eca <SomeoneYouLoved()+0x8c>
    3e62:	85 30       	cpi	r24, 0x05	; 5
    3e64:	09 f4       	brne	.+2      	; 0x3e68 <SomeoneYouLoved()+0x2a>
    3e66:	93 c0       	rjmp	.+294    	; 0x3f8e <SomeoneYouLoved()+0x150>
    3e68:	b8 f4       	brcc	.+46     	; 0x3e98 <SomeoneYouLoved()+0x5a>
    3e6a:	81 30       	cpi	r24, 0x01	; 1
    3e6c:	09 f4       	brne	.+2      	; 0x3e70 <SomeoneYouLoved()+0x32>
    3e6e:	88 c0       	rjmp	.+272    	; 0x3f80 <SomeoneYouLoved()+0x142>
    3e70:	08 f4       	brcc	.+2      	; 0x3e74 <SomeoneYouLoved()+0x36>
    3e72:	6e c0       	rjmp	.+220    	; 0x3f50 <SomeoneYouLoved()+0x112>
    3e74:	45 e0       	ldi	r20, 0x05	; 5
    3e76:	64 e0       	ldi	r22, 0x04	; 4
    3e78:	82 30       	cpi	r24, 0x02	; 2
    3e7a:	09 f4       	brne	.+2      	; 0x3e7e <SomeoneYouLoved()+0x40>
    3e7c:	83 c0       	rjmp	.+262    	; 0x3f84 <SomeoneYouLoved()+0x146>
    3e7e:	27 96       	adiw	r28, 0x07	; 7
    3e80:	0f b6       	in	r0, 0x3f	; 63
    3e82:	f8 94       	cli
    3e84:	de bf       	out	0x3e, r29	; 62
    3e86:	0f be       	out	0x3f, r0	; 63
    3e88:	cd bf       	out	0x3d, r28	; 61
    3e8a:	df 91       	pop	r29
    3e8c:	cf 91       	pop	r28
    3e8e:	1f 91       	pop	r17
    3e90:	0f 91       	pop	r16
    3e92:	ff 90       	pop	r15
    3e94:	ef 90       	pop	r14
    3e96:	08 95       	ret
    3e98:	8f 30       	cpi	r24, 0x0F	; 15
    3e9a:	09 f4       	brne	.+2      	; 0x3e9e <SomeoneYouLoved()+0x60>
    3e9c:	7c c0       	rjmp	.+248    	; 0x3f96 <SomeoneYouLoved()+0x158>
    3e9e:	40 f4       	brcc	.+16     	; 0x3eb0 <SomeoneYouLoved()+0x72>
    3ea0:	8a 30       	cpi	r24, 0x0A	; 10
    3ea2:	69 f7       	brne	.-38     	; 0x3e7e <SomeoneYouLoved()+0x40>
    3ea4:	6f e0       	ldi	r22, 0x0F	; 15
    3ea6:	86 e0       	ldi	r24, 0x06	; 6
    3ea8:	9f e3       	ldi	r25, 0x3F	; 63
    3eaa:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3eae:	e7 cf       	rjmp	.-50     	; 0x3e7e <SomeoneYouLoved()+0x40>
    3eb0:	84 31       	cpi	r24, 0x14	; 20
    3eb2:	09 f4       	brne	.+2      	; 0x3eb6 <SomeoneYouLoved()+0x78>
    3eb4:	74 c0       	rjmp	.+232    	; 0x3f9e <SomeoneYouLoved()+0x160>
    3eb6:	44 ef       	ldi	r20, 0xF4	; 244
    3eb8:	51 e0       	ldi	r21, 0x01	; 1
    3eba:	6e e1       	ldi	r22, 0x1E	; 30
    3ebc:	89 31       	cpi	r24, 0x19	; 25
    3ebe:	f9 f6       	brne	.-66     	; 0x3e7e <SomeoneYouLoved()+0x40>
    3ec0:	86 e0       	ldi	r24, 0x06	; 6
    3ec2:	9f e3       	ldi	r25, 0x3F	; 63
    3ec4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3ec8:	da cf       	rjmp	.-76     	; 0x3e7e <SomeoneYouLoved()+0x40>
    3eca:	87 33       	cpi	r24, 0x37	; 55
    3ecc:	09 f4       	brne	.+2      	; 0x3ed0 <SomeoneYouLoved()+0x92>
    3ece:	90 c0       	rjmp	.+288    	; 0x3ff0 <SomeoneYouLoved()+0x1b2>
    3ed0:	d0 f4       	brcc	.+52     	; 0x3f06 <SomeoneYouLoved()+0xc8>
    3ed2:	88 32       	cpi	r24, 0x28	; 40
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <SomeoneYouLoved()+0x9a>
    3ed6:	79 c0       	rjmp	.+242    	; 0x3fca <SomeoneYouLoved()+0x18c>
    3ed8:	50 f4       	brcc	.+20     	; 0x3eee <SomeoneYouLoved()+0xb0>
    3eda:	44 ef       	ldi	r20, 0xF4	; 244
    3edc:	51 e0       	ldi	r21, 0x01	; 1
    3ede:	68 e2       	ldi	r22, 0x28	; 40
    3ee0:	83 32       	cpi	r24, 0x23	; 35
    3ee2:	69 f6       	brne	.-102    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3ee4:	86 e0       	ldi	r24, 0x06	; 6
    3ee6:	9f e3       	ldi	r25, 0x3F	; 63
    3ee8:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3eec:	c8 cf       	rjmp	.-112    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3eee:	8d 32       	cpi	r24, 0x2D	; 45
    3ef0:	09 f4       	brne	.+2      	; 0x3ef4 <SomeoneYouLoved()+0xb6>
    3ef2:	78 c0       	rjmp	.+240    	; 0x3fe4 <SomeoneYouLoved()+0x1a6>
    3ef4:	82 33       	cpi	r24, 0x32	; 50
    3ef6:	19 f6       	brne	.-122    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3ef8:	47 e3       	ldi	r20, 0x37	; 55
    3efa:	67 e0       	ldi	r22, 0x07	; 7
    3efc:	8d ef       	ldi	r24, 0xFD	; 253
    3efe:	9e e3       	ldi	r25, 0x3E	; 62
    3f00:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3f04:	bc cf       	rjmp	.-136    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3f06:	81 34       	cpi	r24, 0x41	; 65
    3f08:	09 f4       	brne	.+2      	; 0x3f0c <SomeoneYouLoved()+0xce>
    3f0a:	76 c0       	rjmp	.+236    	; 0x3ff8 <SomeoneYouLoved()+0x1ba>
    3f0c:	90 f4       	brcc	.+36     	; 0x3f32 <SomeoneYouLoved()+0xf4>
    3f0e:	8c 33       	cpi	r24, 0x3C	; 60
    3f10:	09 f0       	breq	.+2      	; 0x3f14 <SomeoneYouLoved()+0xd6>
    3f12:	b5 cf       	rjmp	.-150    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3f14:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3f18:	7c 01       	movw	r14, r24
    3f1a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3f1e:	8c 01       	movw	r16, r24
    3f20:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3f24:	9c 01       	movw	r18, r24
    3f26:	4b e4       	ldi	r20, 0x4B	; 75
    3f28:	50 e0       	ldi	r21, 0x00	; 0
    3f2a:	61 e4       	ldi	r22, 0x41	; 65
    3f2c:	84 e4       	ldi	r24, 0x44	; 68
    3f2e:	9f e2       	ldi	r25, 0x2F	; 47
    3f30:	44 c0       	rjmp	.+136    	; 0x3fba <SomeoneYouLoved()+0x17c>
    3f32:	86 34       	cpi	r24, 0x46	; 70
    3f34:	09 f4       	brne	.+2      	; 0x3f38 <SomeoneYouLoved()+0xfa>
    3f36:	65 c0       	rjmp	.+202    	; 0x4002 <SomeoneYouLoved()+0x1c4>
    3f38:	84 36       	cpi	r24, 0x64	; 100
    3f3a:	09 f0       	breq	.+2      	; 0x3f3e <SomeoneYouLoved()+0x100>
    3f3c:	a0 cf       	rjmp	.-192    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	8d e0       	ldi	r24, 0x0D	; 13
    3f42:	90 e1       	ldi	r25, 0x10	; 16
    3f44:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    3f48:	80 e0       	ldi	r24, 0x00	; 0
    3f4a:	0e 94 30 13 	call	0x2660	; 0x2660 <switchToSong(unsigned char)>
    3f4e:	97 cf       	rjmp	.-210    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3f50:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3f54:	7c 01       	movw	r14, r24
    3f56:	69 e3       	ldi	r22, 0x39	; 57
    3f58:	72 e0       	ldi	r23, 0x02	; 2
    3f5a:	ce 01       	movw	r24, r28
    3f5c:	01 96       	adiw	r24, 0x01	; 1
    3f5e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    3f62:	01 e0       	ldi	r16, 0x01	; 1
    3f64:	97 01       	movw	r18, r14
    3f66:	4b e4       	ldi	r20, 0x4B	; 75
    3f68:	50 e0       	ldi	r21, 0x00	; 0
    3f6a:	6e e0       	ldi	r22, 0x0E	; 14
    3f6c:	7d e3       	ldi	r23, 0x3D	; 61
    3f6e:	ce 01       	movw	r24, r28
    3f70:	01 96       	adiw	r24, 0x01	; 1
    3f72:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3f76:	ce 01       	movw	r24, r28
    3f78:	01 96       	adiw	r24, 0x01	; 1
    3f7a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    3f7e:	7f cf       	rjmp	.-258    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3f80:	42 e0       	ldi	r20, 0x02	; 2
    3f82:	63 e0       	ldi	r22, 0x03	; 3
    3f84:	83 e8       	ldi	r24, 0x83	; 131
    3f86:	9f e1       	ldi	r25, 0x1F	; 31
    3f88:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3f8c:	78 cf       	rjmp	.-272    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3f8e:	44 ef       	ldi	r20, 0xF4	; 244
    3f90:	51 e0       	ldi	r21, 0x01	; 1
    3f92:	6a e0       	ldi	r22, 0x0A	; 10
    3f94:	95 cf       	rjmp	.-214    	; 0x3ec0 <SomeoneYouLoved()+0x82>
    3f96:	44 ef       	ldi	r20, 0xF4	; 244
    3f98:	51 e0       	ldi	r21, 0x01	; 1
    3f9a:	64 e1       	ldi	r22, 0x14	; 20
    3f9c:	a3 cf       	rjmp	.-186    	; 0x3ee4 <SomeoneYouLoved()+0xa6>
    3f9e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3fa2:	7c 01       	movw	r14, r24
    3fa4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3fa8:	8c 01       	movw	r16, r24
    3faa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3fae:	9c 01       	movw	r18, r24
    3fb0:	4b e4       	ldi	r20, 0x4B	; 75
    3fb2:	50 e0       	ldi	r21, 0x00	; 0
    3fb4:	69 e1       	ldi	r22, 0x19	; 25
    3fb6:	86 e0       	ldi	r24, 0x06	; 6
    3fb8:	9f e3       	ldi	r25, 0x3F	; 63
    3fba:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3fbe:	5f cf       	rjmp	.-322    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3fc0:	43 e2       	ldi	r20, 0x23	; 35
    3fc2:	64 e0       	ldi	r22, 0x04	; 4
    3fc4:	86 e0       	ldi	r24, 0x06	; 6
    3fc6:	9f e3       	ldi	r25, 0x3F	; 63
    3fc8:	df cf       	rjmp	.-66     	; 0x3f88 <SomeoneYouLoved()+0x14a>
    3fca:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3fce:	7c 01       	movw	r14, r24
    3fd0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3fd4:	8c 01       	movw	r16, r24
    3fd6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3fda:	9c 01       	movw	r18, r24
    3fdc:	4b e4       	ldi	r20, 0x4B	; 75
    3fde:	50 e0       	ldi	r21, 0x00	; 0
    3fe0:	6d e2       	ldi	r22, 0x2D	; 45
    3fe2:	e9 cf       	rjmp	.-46     	; 0x3fb6 <SomeoneYouLoved()+0x178>
    3fe4:	62 e3       	ldi	r22, 0x32	; 50
    3fe6:	82 e7       	ldi	r24, 0x72	; 114
    3fe8:	9f e1       	ldi	r25, 0x1F	; 31
    3fea:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3fee:	47 cf       	rjmp	.-370    	; 0x3e7e <SomeoneYouLoved()+0x40>
    3ff0:	44 ef       	ldi	r20, 0xF4	; 244
    3ff2:	51 e0       	ldi	r21, 0x01	; 1
    3ff4:	6c e3       	ldi	r22, 0x3C	; 60
    3ff6:	76 cf       	rjmp	.-276    	; 0x3ee4 <SomeoneYouLoved()+0xa6>
    3ff8:	46 e4       	ldi	r20, 0x46	; 70
    3ffa:	6c e0       	ldi	r22, 0x0C	; 12
    3ffc:	89 eb       	ldi	r24, 0xB9	; 185
    3ffe:	9f e0       	ldi	r25, 0x0F	; 15
    4000:	7f cf       	rjmp	.-258    	; 0x3f00 <SomeoneYouLoved()+0xc2>
    4002:	64 e6       	ldi	r22, 0x64	; 100
    4004:	80 e1       	ldi	r24, 0x10	; 16
    4006:	97 e2       	ldi	r25, 0x27	; 39
    4008:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    400c:	38 cf       	rjmp	.-400    	; 0x3e7e <SomeoneYouLoved()+0x40>

0000400e <ShouldntStop()>:
    400e:	ef 92       	push	r14
    4010:	ff 92       	push	r15
    4012:	0f 93       	push	r16
    4014:	1f 93       	push	r17
    4016:	cf 93       	push	r28
    4018:	df 93       	push	r29
    401a:	00 d0       	rcall	.+0      	; 0x401c <ShouldntStop()+0xe>
    401c:	00 d0       	rcall	.+0      	; 0x401e <ShouldntStop()+0x10>
    401e:	00 d0       	rcall	.+0      	; 0x4020 <ShouldntStop()+0x12>
    4020:	1f 92       	push	r1
    4022:	cd b7       	in	r28, 0x3d	; 61
    4024:	de b7       	in	r29, 0x3e	; 62
    4026:	80 91 f8 09 	lds	r24, 0x09F8	; 0x8009f8 <prog>
    402a:	8e 31       	cpi	r24, 0x1E	; 30
    402c:	09 f4       	brne	.+2      	; 0x4030 <ShouldntStop()+0x22>
    402e:	b0 c0       	rjmp	.+352    	; 0x4190 <ShouldntStop()+0x182>
    4030:	a0 f5       	brcc	.+104    	; 0x409a <ShouldntStop()+0x8c>
    4032:	85 30       	cpi	r24, 0x05	; 5
    4034:	09 f4       	brne	.+2      	; 0x4038 <ShouldntStop()+0x2a>
    4036:	93 c0       	rjmp	.+294    	; 0x415e <ShouldntStop()+0x150>
    4038:	b8 f4       	brcc	.+46     	; 0x4068 <ShouldntStop()+0x5a>
    403a:	81 30       	cpi	r24, 0x01	; 1
    403c:	09 f4       	brne	.+2      	; 0x4040 <ShouldntStop()+0x32>
    403e:	88 c0       	rjmp	.+272    	; 0x4150 <ShouldntStop()+0x142>
    4040:	08 f4       	brcc	.+2      	; 0x4044 <ShouldntStop()+0x36>
    4042:	6e c0       	rjmp	.+220    	; 0x4120 <ShouldntStop()+0x112>
    4044:	45 e0       	ldi	r20, 0x05	; 5
    4046:	64 e0       	ldi	r22, 0x04	; 4
    4048:	82 30       	cpi	r24, 0x02	; 2
    404a:	09 f4       	brne	.+2      	; 0x404e <ShouldntStop()+0x40>
    404c:	83 c0       	rjmp	.+262    	; 0x4154 <ShouldntStop()+0x146>
    404e:	27 96       	adiw	r28, 0x07	; 7
    4050:	0f b6       	in	r0, 0x3f	; 63
    4052:	f8 94       	cli
    4054:	de bf       	out	0x3e, r29	; 62
    4056:	0f be       	out	0x3f, r0	; 63
    4058:	cd bf       	out	0x3d, r28	; 61
    405a:	df 91       	pop	r29
    405c:	cf 91       	pop	r28
    405e:	1f 91       	pop	r17
    4060:	0f 91       	pop	r16
    4062:	ff 90       	pop	r15
    4064:	ef 90       	pop	r14
    4066:	08 95       	ret
    4068:	8f 30       	cpi	r24, 0x0F	; 15
    406a:	09 f4       	brne	.+2      	; 0x406e <ShouldntStop()+0x60>
    406c:	7c c0       	rjmp	.+248    	; 0x4166 <ShouldntStop()+0x158>
    406e:	40 f4       	brcc	.+16     	; 0x4080 <ShouldntStop()+0x72>
    4070:	8a 30       	cpi	r24, 0x0A	; 10
    4072:	69 f7       	brne	.-38     	; 0x404e <ShouldntStop()+0x40>
    4074:	6f e0       	ldi	r22, 0x0F	; 15
    4076:	86 e0       	ldi	r24, 0x06	; 6
    4078:	9f e3       	ldi	r25, 0x3F	; 63
    407a:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    407e:	e7 cf       	rjmp	.-50     	; 0x404e <ShouldntStop()+0x40>
    4080:	84 31       	cpi	r24, 0x14	; 20
    4082:	09 f4       	brne	.+2      	; 0x4086 <ShouldntStop()+0x78>
    4084:	74 c0       	rjmp	.+232    	; 0x416e <ShouldntStop()+0x160>
    4086:	44 ef       	ldi	r20, 0xF4	; 244
    4088:	51 e0       	ldi	r21, 0x01	; 1
    408a:	6e e1       	ldi	r22, 0x1E	; 30
    408c:	89 31       	cpi	r24, 0x19	; 25
    408e:	f9 f6       	brne	.-66     	; 0x404e <ShouldntStop()+0x40>
    4090:	86 e0       	ldi	r24, 0x06	; 6
    4092:	9f e3       	ldi	r25, 0x3F	; 63
    4094:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    4098:	da cf       	rjmp	.-76     	; 0x404e <ShouldntStop()+0x40>
    409a:	87 33       	cpi	r24, 0x37	; 55
    409c:	09 f4       	brne	.+2      	; 0x40a0 <ShouldntStop()+0x92>
    409e:	90 c0       	rjmp	.+288    	; 0x41c0 <ShouldntStop()+0x1b2>
    40a0:	d0 f4       	brcc	.+52     	; 0x40d6 <ShouldntStop()+0xc8>
    40a2:	88 32       	cpi	r24, 0x28	; 40
    40a4:	09 f4       	brne	.+2      	; 0x40a8 <ShouldntStop()+0x9a>
    40a6:	79 c0       	rjmp	.+242    	; 0x419a <ShouldntStop()+0x18c>
    40a8:	50 f4       	brcc	.+20     	; 0x40be <ShouldntStop()+0xb0>
    40aa:	44 ef       	ldi	r20, 0xF4	; 244
    40ac:	51 e0       	ldi	r21, 0x01	; 1
    40ae:	68 e2       	ldi	r22, 0x28	; 40
    40b0:	83 32       	cpi	r24, 0x23	; 35
    40b2:	69 f6       	brne	.-102    	; 0x404e <ShouldntStop()+0x40>
    40b4:	86 e0       	ldi	r24, 0x06	; 6
    40b6:	9f e3       	ldi	r25, 0x3F	; 63
    40b8:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    40bc:	c8 cf       	rjmp	.-112    	; 0x404e <ShouldntStop()+0x40>
    40be:	8d 32       	cpi	r24, 0x2D	; 45
    40c0:	09 f4       	brne	.+2      	; 0x40c4 <ShouldntStop()+0xb6>
    40c2:	78 c0       	rjmp	.+240    	; 0x41b4 <ShouldntStop()+0x1a6>
    40c4:	82 33       	cpi	r24, 0x32	; 50
    40c6:	19 f6       	brne	.-122    	; 0x404e <ShouldntStop()+0x40>
    40c8:	47 e3       	ldi	r20, 0x37	; 55
    40ca:	67 e0       	ldi	r22, 0x07	; 7
    40cc:	8d ef       	ldi	r24, 0xFD	; 253
    40ce:	9e e3       	ldi	r25, 0x3E	; 62
    40d0:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    40d4:	bc cf       	rjmp	.-136    	; 0x404e <ShouldntStop()+0x40>
    40d6:	81 34       	cpi	r24, 0x41	; 65
    40d8:	09 f4       	brne	.+2      	; 0x40dc <ShouldntStop()+0xce>
    40da:	76 c0       	rjmp	.+236    	; 0x41c8 <ShouldntStop()+0x1ba>
    40dc:	90 f4       	brcc	.+36     	; 0x4102 <ShouldntStop()+0xf4>
    40de:	8c 33       	cpi	r24, 0x3C	; 60
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <ShouldntStop()+0xd6>
    40e2:	b5 cf       	rjmp	.-150    	; 0x404e <ShouldntStop()+0x40>
    40e4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    40e8:	7c 01       	movw	r14, r24
    40ea:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    40ee:	8c 01       	movw	r16, r24
    40f0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    40f4:	9c 01       	movw	r18, r24
    40f6:	4b e4       	ldi	r20, 0x4B	; 75
    40f8:	50 e0       	ldi	r21, 0x00	; 0
    40fa:	61 e4       	ldi	r22, 0x41	; 65
    40fc:	84 e4       	ldi	r24, 0x44	; 68
    40fe:	9f e2       	ldi	r25, 0x2F	; 47
    4100:	44 c0       	rjmp	.+136    	; 0x418a <ShouldntStop()+0x17c>
    4102:	86 34       	cpi	r24, 0x46	; 70
    4104:	09 f4       	brne	.+2      	; 0x4108 <ShouldntStop()+0xfa>
    4106:	65 c0       	rjmp	.+202    	; 0x41d2 <ShouldntStop()+0x1c4>
    4108:	84 36       	cpi	r24, 0x64	; 100
    410a:	09 f0       	breq	.+2      	; 0x410e <ShouldntStop()+0x100>
    410c:	a0 cf       	rjmp	.-192    	; 0x404e <ShouldntStop()+0x40>
    410e:	60 e0       	ldi	r22, 0x00	; 0
    4110:	8d e0       	ldi	r24, 0x0D	; 13
    4112:	90 e1       	ldi	r25, 0x10	; 16
    4114:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    4118:	80 e0       	ldi	r24, 0x00	; 0
    411a:	0e 94 30 13 	call	0x2660	; 0x2660 <switchToSong(unsigned char)>
    411e:	97 cf       	rjmp	.-210    	; 0x404e <ShouldntStop()+0x40>
    4120:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    4124:	7c 01       	movw	r14, r24
    4126:	6c e5       	ldi	r22, 0x5C	; 92
    4128:	72 e0       	ldi	r23, 0x02	; 2
    412a:	ce 01       	movw	r24, r28
    412c:	01 96       	adiw	r24, 0x01	; 1
    412e:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    4132:	01 e0       	ldi	r16, 0x01	; 1
    4134:	97 01       	movw	r18, r14
    4136:	4b e4       	ldi	r20, 0x4B	; 75
    4138:	50 e0       	ldi	r21, 0x00	; 0
    413a:	6e e0       	ldi	r22, 0x0E	; 14
    413c:	7d e3       	ldi	r23, 0x3D	; 61
    413e:	ce 01       	movw	r24, r28
    4140:	01 96       	adiw	r24, 0x01	; 1
    4142:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4146:	ce 01       	movw	r24, r28
    4148:	01 96       	adiw	r24, 0x01	; 1
    414a:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    414e:	7f cf       	rjmp	.-258    	; 0x404e <ShouldntStop()+0x40>
    4150:	42 e0       	ldi	r20, 0x02	; 2
    4152:	63 e0       	ldi	r22, 0x03	; 3
    4154:	83 e8       	ldi	r24, 0x83	; 131
    4156:	9f e1       	ldi	r25, 0x1F	; 31
    4158:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    415c:	78 cf       	rjmp	.-272    	; 0x404e <ShouldntStop()+0x40>
    415e:	44 ef       	ldi	r20, 0xF4	; 244
    4160:	51 e0       	ldi	r21, 0x01	; 1
    4162:	6a e0       	ldi	r22, 0x0A	; 10
    4164:	95 cf       	rjmp	.-214    	; 0x4090 <ShouldntStop()+0x82>
    4166:	44 ef       	ldi	r20, 0xF4	; 244
    4168:	51 e0       	ldi	r21, 0x01	; 1
    416a:	64 e1       	ldi	r22, 0x14	; 20
    416c:	a3 cf       	rjmp	.-186    	; 0x40b4 <ShouldntStop()+0xa6>
    416e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4172:	7c 01       	movw	r14, r24
    4174:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4178:	8c 01       	movw	r16, r24
    417a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    417e:	9c 01       	movw	r18, r24
    4180:	4b e4       	ldi	r20, 0x4B	; 75
    4182:	50 e0       	ldi	r21, 0x00	; 0
    4184:	69 e1       	ldi	r22, 0x19	; 25
    4186:	86 e0       	ldi	r24, 0x06	; 6
    4188:	9f e3       	ldi	r25, 0x3F	; 63
    418a:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    418e:	5f cf       	rjmp	.-322    	; 0x404e <ShouldntStop()+0x40>
    4190:	43 e2       	ldi	r20, 0x23	; 35
    4192:	64 e0       	ldi	r22, 0x04	; 4
    4194:	86 e0       	ldi	r24, 0x06	; 6
    4196:	9f e3       	ldi	r25, 0x3F	; 63
    4198:	df cf       	rjmp	.-66     	; 0x4158 <ShouldntStop()+0x14a>
    419a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    419e:	7c 01       	movw	r14, r24
    41a0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    41a4:	8c 01       	movw	r16, r24
    41a6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    41aa:	9c 01       	movw	r18, r24
    41ac:	4b e4       	ldi	r20, 0x4B	; 75
    41ae:	50 e0       	ldi	r21, 0x00	; 0
    41b0:	6d e2       	ldi	r22, 0x2D	; 45
    41b2:	e9 cf       	rjmp	.-46     	; 0x4186 <ShouldntStop()+0x178>
    41b4:	62 e3       	ldi	r22, 0x32	; 50
    41b6:	82 e7       	ldi	r24, 0x72	; 114
    41b8:	9f e1       	ldi	r25, 0x1F	; 31
    41ba:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    41be:	47 cf       	rjmp	.-370    	; 0x404e <ShouldntStop()+0x40>
    41c0:	44 ef       	ldi	r20, 0xF4	; 244
    41c2:	51 e0       	ldi	r21, 0x01	; 1
    41c4:	6c e3       	ldi	r22, 0x3C	; 60
    41c6:	76 cf       	rjmp	.-276    	; 0x40b4 <ShouldntStop()+0xa6>
    41c8:	46 e4       	ldi	r20, 0x46	; 70
    41ca:	6c e0       	ldi	r22, 0x0C	; 12
    41cc:	89 eb       	ldi	r24, 0xB9	; 185
    41ce:	9f e0       	ldi	r25, 0x0F	; 15
    41d0:	7f cf       	rjmp	.-258    	; 0x40d0 <ShouldntStop()+0xc2>
    41d2:	64 e6       	ldi	r22, 0x64	; 100
    41d4:	80 e1       	ldi	r24, 0x10	; 16
    41d6:	97 e2       	ldi	r25, 0x27	; 39
    41d8:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    41dc:	38 cf       	rjmp	.-400    	; 0x404e <ShouldntStop()+0x40>

000041de <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    41de:	9f 92       	push	r9
    41e0:	af 92       	push	r10
    41e2:	bf 92       	push	r11
    41e4:	cf 92       	push	r12
    41e6:	df 92       	push	r13
    41e8:	ef 92       	push	r14
    41ea:	ff 92       	push	r15
    41ec:	0f 93       	push	r16
    41ee:	1f 93       	push	r17
    41f0:	cf 93       	push	r28
    41f2:	df 93       	push	r29
    41f4:	fc 01       	movw	r30, r24
    41f6:	c0 80       	ld	r12, Z
    41f8:	d1 80       	ldd	r13, Z+1	; 0x01
    41fa:	28 b1       	in	r18, 0x08	; 8
    41fc:	b2 2e       	mov	r11, r18
    41fe:	68 94       	set
    4200:	b2 f8       	bld	r11, 2
    4202:	98 b1       	in	r25, 0x08	; 8
    4204:	9b 7f       	andi	r25, 0xFB	; 251
    4206:	98 b9       	out	0x08, r25	; 8
    4208:	62 85       	ldd	r22, Z+10	; 0x0a
    420a:	87 81       	ldd	r24, Z+7	; 0x07
    420c:	06 2f       	mov	r16, r22
    420e:	08 1b       	sub	r16, r24
    4210:	80 2f       	mov	r24, r16
    4212:	07 83       	std	Z+7, r16	; 0x07
    4214:	77 85       	ldd	r23, Z+15	; 0x0f
    4216:	a2 81       	ldd	r26, Z+2	; 0x02
    4218:	b3 81       	ldd	r27, Z+3	; 0x03
    421a:	35 85       	ldd	r19, Z+13	; 0x0d
    421c:	44 85       	ldd	r20, Z+12	; 0x0c
    421e:	56 85       	ldd	r21, Z+14	; 0x0e
    4220:	99 24       	eor	r9, r9
    4222:	93 94       	inc	r9
    4224:	93 0e       	add	r9, r19
    4226:	4f 5f       	subi	r20, 0xFF	; 255
    4228:	5f 5f       	subi	r21, 0xFF	; 255
    422a:	f6 80       	ldd	r15, Z+6	; 0x06
    422c:	e0 84       	ldd	r14, Z+8	; 0x08
    422e:	c1 85       	ldd	r28, Z+9	; 0x09
    4230:	d3 85       	ldd	r29, Z+11	; 0x0b
    4232:	f6 01       	movw	r30, r12
    4234:	11 81       	ldd	r17, Z+1	; 0x01
    4236:	a1 2c       	mov	r10, r1
    4238:	0a 2d       	mov	r16, r10
    423a:	2a 2d       	mov	r18, r10
    423c:	3a 2d       	mov	r19, r10
    423e:	31 81       	ldd	r19, Z+1	; 0x01
    4240:	11 27       	eor	r17, r17
    4242:	88 94       	clc
    4244:	31 11       	cpse	r19, r1
    4246:	38 0f       	add	r19, r24
    4248:	08 f4       	brcc	.+2      	; 0x424c <L_13762>
    424a:	3f ef       	ldi	r19, 0xFF	; 255

0000424c <L_13762>:
    424c:	81 95       	neg	r24
    424e:	88 94       	clc
    4250:	90 fc       	sbrc	r9, 0
    4252:	13 0f       	add	r17, r19
    4254:	17 95       	ror	r17
    4256:	88 94       	clc
    4258:	91 fc       	sbrc	r9, 1
    425a:	13 0f       	add	r17, r19
    425c:	17 95       	ror	r17
    425e:	88 94       	clc
    4260:	92 fc       	sbrc	r9, 2
    4262:	13 0f       	add	r17, r19
    4264:	17 95       	ror	r17
    4266:	88 94       	clc
    4268:	93 fc       	sbrc	r9, 3
    426a:	13 0f       	add	r17, r19
    426c:	17 95       	ror	r17
    426e:	88 94       	clc
    4270:	94 fc       	sbrc	r9, 4
    4272:	13 0f       	add	r17, r19
    4274:	17 95       	ror	r17
    4276:	88 94       	clc
    4278:	95 fc       	sbrc	r9, 5
    427a:	13 0f       	add	r17, r19
    427c:	17 95       	ror	r17
    427e:	88 94       	clc
    4280:	96 fc       	sbrc	r9, 6
    4282:	13 0f       	add	r17, r19
    4284:	17 95       	ror	r17
    4286:	88 94       	clc
    4288:	97 fc       	sbrc	r9, 7
    428a:	13 0f       	add	r17, r19
    428c:	17 95       	ror	r17
    428e:	88 94       	clc
    4290:	03 2f       	mov	r16, r19
    4292:	91 10       	cpse	r9, r1
    4294:	01 2f       	mov	r16, r17
    4296:	86 0f       	add	r24, r22
    4298:	10 2f       	mov	r17, r16
    429a:	00 2c       	mov	r0, r0
    429c:	b8 b8       	out	0x08, r11	; 8
    429e:	00 c0       	rjmp	.+0      	; 0x42a0 <L_13762+0x54>
    42a0:	17 ff       	sbrs	r17, 7
    42a2:	98 b9       	out	0x08, r25	; 8
    42a4:	30 81       	ld	r19, Z
    42a6:	00 27       	eor	r16, r16
    42a8:	88 94       	clc
    42aa:	00 c0       	rjmp	.+0      	; 0x42ac <L_13762+0x60>
    42ac:	00 c0       	rjmp	.+0      	; 0x42ae <L_13762+0x62>
    42ae:	00 2c       	mov	r0, r0
    42b0:	98 b9       	out	0x08, r25	; 8
    42b2:	31 11       	cpse	r19, r1
    42b4:	3f 0d       	add	r19, r15
    42b6:	00 c0       	rjmp	.+0      	; 0x42b8 <L_13762+0x6c>
    42b8:	00 2c       	mov	r0, r0
    42ba:	b8 b8       	out	0x08, r11	; 8
    42bc:	00 c0       	rjmp	.+0      	; 0x42be <L_13762+0x72>
    42be:	16 ff       	sbrs	r17, 6
    42c0:	98 b9       	out	0x08, r25	; 8
    42c2:	08 f4       	brcc	.+2      	; 0x42c6 <L_14295>
    42c4:	3f ef       	ldi	r19, 0xFF	; 255

000042c6 <L_14295>:
    42c6:	f1 94       	neg	r15
    42c8:	88 94       	clc
    42ca:	00 c0       	rjmp	.+0      	; 0x42cc <L_14295+0x6>
    42cc:	00 c0       	rjmp	.+0      	; 0x42ce <L_14295+0x8>
    42ce:	00 2c       	mov	r0, r0
    42d0:	98 b9       	out	0x08, r25	; 8
    42d2:	40 fd       	sbrc	r20, 0
    42d4:	03 0f       	add	r16, r19
    42d6:	00 c0       	rjmp	.+0      	; 0x42d8 <L_14295+0x12>
    42d8:	00 2c       	mov	r0, r0
    42da:	b8 b8       	out	0x08, r11	; 8
    42dc:	00 c0       	rjmp	.+0      	; 0x42de <L_14295+0x18>
    42de:	15 ff       	sbrs	r17, 5
    42e0:	98 b9       	out	0x08, r25	; 8
    42e2:	07 95       	ror	r16
    42e4:	88 94       	clc
    42e6:	41 fd       	sbrc	r20, 1
    42e8:	03 0f       	add	r16, r19
    42ea:	00 c0       	rjmp	.+0      	; 0x42ec <L_14295+0x26>
    42ec:	00 c0       	rjmp	.+0      	; 0x42ee <L_14295+0x28>
    42ee:	00 2c       	mov	r0, r0
    42f0:	98 b9       	out	0x08, r25	; 8
    42f2:	07 95       	ror	r16
    42f4:	88 94       	clc
    42f6:	00 c0       	rjmp	.+0      	; 0x42f8 <L_14295+0x32>
    42f8:	00 2c       	mov	r0, r0
    42fa:	b8 b8       	out	0x08, r11	; 8
    42fc:	00 c0       	rjmp	.+0      	; 0x42fe <L_14295+0x38>
    42fe:	14 ff       	sbrs	r17, 4
    4300:	98 b9       	out	0x08, r25	; 8
    4302:	42 fd       	sbrc	r20, 2
    4304:	03 0f       	add	r16, r19
    4306:	07 95       	ror	r16
    4308:	88 94       	clc
    430a:	00 c0       	rjmp	.+0      	; 0x430c <L_14295+0x46>
    430c:	00 c0       	rjmp	.+0      	; 0x430e <L_14295+0x48>
    430e:	00 2c       	mov	r0, r0
    4310:	98 b9       	out	0x08, r25	; 8
    4312:	43 fd       	sbrc	r20, 3
    4314:	03 0f       	add	r16, r19
    4316:	00 c0       	rjmp	.+0      	; 0x4318 <L_14295+0x52>
    4318:	00 2c       	mov	r0, r0
    431a:	b8 b8       	out	0x08, r11	; 8
    431c:	00 c0       	rjmp	.+0      	; 0x431e <L_14295+0x58>
    431e:	13 ff       	sbrs	r17, 3
    4320:	98 b9       	out	0x08, r25	; 8
    4322:	07 95       	ror	r16
    4324:	88 94       	clc
    4326:	44 fd       	sbrc	r20, 4
    4328:	03 0f       	add	r16, r19
    432a:	00 c0       	rjmp	.+0      	; 0x432c <L_14295+0x66>
    432c:	00 c0       	rjmp	.+0      	; 0x432e <L_14295+0x68>
    432e:	00 2c       	mov	r0, r0
    4330:	98 b9       	out	0x08, r25	; 8
    4332:	07 95       	ror	r16
    4334:	88 94       	clc
    4336:	00 c0       	rjmp	.+0      	; 0x4338 <L_14295+0x72>
    4338:	00 2c       	mov	r0, r0
    433a:	b8 b8       	out	0x08, r11	; 8
    433c:	00 c0       	rjmp	.+0      	; 0x433e <L_14295+0x78>
    433e:	12 ff       	sbrs	r17, 2
    4340:	98 b9       	out	0x08, r25	; 8
    4342:	45 fd       	sbrc	r20, 5
    4344:	03 0f       	add	r16, r19
    4346:	07 95       	ror	r16
    4348:	88 94       	clc
    434a:	00 c0       	rjmp	.+0      	; 0x434c <L_14295+0x86>
    434c:	00 c0       	rjmp	.+0      	; 0x434e <L_14295+0x88>
    434e:	00 2c       	mov	r0, r0
    4350:	98 b9       	out	0x08, r25	; 8
    4352:	46 fd       	sbrc	r20, 6
    4354:	03 0f       	add	r16, r19
    4356:	00 c0       	rjmp	.+0      	; 0x4358 <L_14295+0x92>
    4358:	00 2c       	mov	r0, r0
    435a:	b8 b8       	out	0x08, r11	; 8
    435c:	00 c0       	rjmp	.+0      	; 0x435e <L_14295+0x98>
    435e:	11 ff       	sbrs	r17, 1
    4360:	98 b9       	out	0x08, r25	; 8
    4362:	07 95       	ror	r16
    4364:	88 94       	clc
    4366:	47 fd       	sbrc	r20, 7
    4368:	03 0f       	add	r16, r19
    436a:	00 c0       	rjmp	.+0      	; 0x436c <L_14295+0xa6>
    436c:	00 c0       	rjmp	.+0      	; 0x436e <L_14295+0xa8>
    436e:	00 2c       	mov	r0, r0
    4370:	98 b9       	out	0x08, r25	; 8
    4372:	07 95       	ror	r16
    4374:	88 94       	clc
    4376:	00 c0       	rjmp	.+0      	; 0x4378 <L_14295+0xb2>
    4378:	00 2c       	mov	r0, r0
    437a:	b8 b8       	out	0x08, r11	; 8
    437c:	00 c0       	rjmp	.+0      	; 0x437e <L_14295+0xb8>
    437e:	10 ff       	sbrs	r17, 0
    4380:	98 b9       	out	0x08, r25	; 8
    4382:	13 2f       	mov	r17, r19
    4384:	41 11       	cpse	r20, r1
    4386:	10 2f       	mov	r17, r16
    4388:	fc 0e       	add	r15, r28
    438a:	00 c0       	rjmp	.+0      	; 0x438c <L_14295+0xc6>
    438c:	00 c0       	rjmp	.+0      	; 0x438e <L_14295+0xc8>
    438e:	00 2c       	mov	r0, r0
    4390:	98 b9       	out	0x08, r25	; 8
    4392:	00 c0       	rjmp	.+0      	; 0x4394 <L_14295+0xce>
    4394:	00 c0       	rjmp	.+0      	; 0x4396 <L_14295+0xd0>
    4396:	00 2c       	mov	r0, r0
    4398:	b8 b8       	out	0x08, r11	; 8
    439a:	00 c0       	rjmp	.+0      	; 0x439c <L_14295+0xd6>
    439c:	17 ff       	sbrs	r17, 7
    439e:	98 b9       	out	0x08, r25	; 8
    43a0:	32 81       	ldd	r19, Z+2	; 0x02
    43a2:	00 27       	eor	r16, r16
    43a4:	88 94       	clc
    43a6:	00 c0       	rjmp	.+0      	; 0x43a8 <L_14295+0xe2>
    43a8:	00 c0       	rjmp	.+0      	; 0x43aa <L_14295+0xe4>
    43aa:	00 2c       	mov	r0, r0
    43ac:	98 b9       	out	0x08, r25	; 8
    43ae:	31 11       	cpse	r19, r1
    43b0:	3e 0d       	add	r19, r14
    43b2:	00 c0       	rjmp	.+0      	; 0x43b4 <L_14295+0xee>
    43b4:	00 2c       	mov	r0, r0
    43b6:	b8 b8       	out	0x08, r11	; 8
    43b8:	00 c0       	rjmp	.+0      	; 0x43ba <L_14295+0xf4>
    43ba:	16 ff       	sbrs	r17, 6
    43bc:	98 b9       	out	0x08, r25	; 8
    43be:	08 f4       	brcc	.+2      	; 0x43c2 <L_15513>
    43c0:	3f ef       	ldi	r19, 0xFF	; 255

000043c2 <L_15513>:
    43c2:	e7 0f       	add	r30, r23
    43c4:	f1 1d       	adc	r31, r1
    43c6:	00 c0       	rjmp	.+0      	; 0x43c8 <L_15513+0x6>
    43c8:	00 c0       	rjmp	.+0      	; 0x43ca <L_15513+0x8>
    43ca:	00 2c       	mov	r0, r0
    43cc:	98 b9       	out	0x08, r25	; 8
    43ce:	50 fd       	sbrc	r21, 0
    43d0:	03 0f       	add	r16, r19
    43d2:	00 c0       	rjmp	.+0      	; 0x43d4 <L_15513+0x12>
    43d4:	00 2c       	mov	r0, r0
    43d6:	b8 b8       	out	0x08, r11	; 8
    43d8:	00 c0       	rjmp	.+0      	; 0x43da <L_15513+0x18>
    43da:	15 ff       	sbrs	r17, 5
    43dc:	98 b9       	out	0x08, r25	; 8
    43de:	07 95       	ror	r16
    43e0:	88 94       	clc
    43e2:	51 fd       	sbrc	r21, 1
    43e4:	03 0f       	add	r16, r19
    43e6:	00 c0       	rjmp	.+0      	; 0x43e8 <L_15513+0x26>
    43e8:	00 c0       	rjmp	.+0      	; 0x43ea <L_15513+0x28>
    43ea:	00 2c       	mov	r0, r0
    43ec:	98 b9       	out	0x08, r25	; 8
    43ee:	07 95       	ror	r16
    43f0:	88 94       	clc
    43f2:	00 c0       	rjmp	.+0      	; 0x43f4 <L_15513+0x32>
    43f4:	00 2c       	mov	r0, r0
    43f6:	b8 b8       	out	0x08, r11	; 8
    43f8:	00 c0       	rjmp	.+0      	; 0x43fa <L_15513+0x38>
    43fa:	14 ff       	sbrs	r17, 4
    43fc:	98 b9       	out	0x08, r25	; 8
    43fe:	52 fd       	sbrc	r21, 2
    4400:	03 0f       	add	r16, r19
    4402:	07 95       	ror	r16
    4404:	88 94       	clc
    4406:	00 c0       	rjmp	.+0      	; 0x4408 <L_15513+0x46>
    4408:	00 c0       	rjmp	.+0      	; 0x440a <L_15513+0x48>
    440a:	00 2c       	mov	r0, r0
    440c:	98 b9       	out	0x08, r25	; 8
    440e:	53 fd       	sbrc	r21, 3
    4410:	03 0f       	add	r16, r19
    4412:	00 c0       	rjmp	.+0      	; 0x4414 <L_15513+0x52>
    4414:	00 2c       	mov	r0, r0
    4416:	b8 b8       	out	0x08, r11	; 8
    4418:	00 c0       	rjmp	.+0      	; 0x441a <L_15513+0x58>
    441a:	13 ff       	sbrs	r17, 3
    441c:	98 b9       	out	0x08, r25	; 8
    441e:	07 95       	ror	r16
    4420:	88 94       	clc
    4422:	54 fd       	sbrc	r21, 4
    4424:	03 0f       	add	r16, r19
    4426:	00 c0       	rjmp	.+0      	; 0x4428 <L_15513+0x66>
    4428:	00 c0       	rjmp	.+0      	; 0x442a <L_15513+0x68>
    442a:	00 2c       	mov	r0, r0
    442c:	98 b9       	out	0x08, r25	; 8
    442e:	07 95       	ror	r16
    4430:	88 94       	clc
    4432:	00 c0       	rjmp	.+0      	; 0x4434 <L_15513+0x72>
    4434:	00 2c       	mov	r0, r0
    4436:	b8 b8       	out	0x08, r11	; 8
    4438:	00 c0       	rjmp	.+0      	; 0x443a <L_15513+0x78>
    443a:	12 ff       	sbrs	r17, 2
    443c:	98 b9       	out	0x08, r25	; 8
    443e:	55 fd       	sbrc	r21, 5
    4440:	03 0f       	add	r16, r19
    4442:	07 95       	ror	r16
    4444:	88 94       	clc
    4446:	00 c0       	rjmp	.+0      	; 0x4448 <L_15513+0x86>
    4448:	00 c0       	rjmp	.+0      	; 0x444a <L_15513+0x88>
    444a:	00 2c       	mov	r0, r0
    444c:	98 b9       	out	0x08, r25	; 8
    444e:	56 fd       	sbrc	r21, 6
    4450:	03 0f       	add	r16, r19
    4452:	00 c0       	rjmp	.+0      	; 0x4454 <L_15513+0x92>
    4454:	00 2c       	mov	r0, r0
    4456:	b8 b8       	out	0x08, r11	; 8
    4458:	00 c0       	rjmp	.+0      	; 0x445a <L_15513+0x98>
    445a:	11 ff       	sbrs	r17, 1
    445c:	98 b9       	out	0x08, r25	; 8
    445e:	07 95       	ror	r16
    4460:	88 94       	clc
    4462:	57 fd       	sbrc	r21, 7
    4464:	03 0f       	add	r16, r19
    4466:	00 c0       	rjmp	.+0      	; 0x4468 <L_15513+0xa6>
    4468:	00 c0       	rjmp	.+0      	; 0x446a <L_15513+0xa8>
    446a:	00 2c       	mov	r0, r0
    446c:	98 b9       	out	0x08, r25	; 8
    446e:	07 95       	ror	r16
    4470:	88 94       	clc
    4472:	00 c0       	rjmp	.+0      	; 0x4474 <L_15513+0xb2>
    4474:	00 2c       	mov	r0, r0
    4476:	b8 b8       	out	0x08, r11	; 8
    4478:	00 c0       	rjmp	.+0      	; 0x447a <L_15513+0xb8>
    447a:	10 ff       	sbrs	r17, 0
    447c:	98 b9       	out	0x08, r25	; 8
    447e:	13 2f       	mov	r17, r19
    4480:	51 11       	cpse	r21, r1
    4482:	10 2f       	mov	r17, r16
    4484:	e1 94       	neg	r14
    4486:	00 c0       	rjmp	.+0      	; 0x4488 <L_15513+0xc6>
    4488:	00 c0       	rjmp	.+0      	; 0x448a <L_15513+0xc8>
    448a:	00 2c       	mov	r0, r0
    448c:	98 b9       	out	0x08, r25	; 8
    448e:	ed 0e       	add	r14, r29
    4490:	00 c0       	rjmp	.+0      	; 0x4492 <L_15513+0xd0>
    4492:	00 c0       	rjmp	.+0      	; 0x4494 <L_15513+0xd2>
    4494:	b8 b8       	out	0x08, r11	; 8
    4496:	00 c0       	rjmp	.+0      	; 0x4498 <L_15513+0xd6>
    4498:	17 ff       	sbrs	r17, 7
    449a:	98 b9       	out	0x08, r25	; 8
    449c:	31 81       	ldd	r19, Z+1	; 0x01
    449e:	00 27       	eor	r16, r16
    44a0:	88 94       	clc
    44a2:	00 c0       	rjmp	.+0      	; 0x44a4 <L_15513+0xe2>
    44a4:	00 c0       	rjmp	.+0      	; 0x44a6 <L_15513+0xe4>
    44a6:	00 2c       	mov	r0, r0
    44a8:	98 b9       	out	0x08, r25	; 8
    44aa:	31 11       	cpse	r19, r1
    44ac:	38 0f       	add	r19, r24
    44ae:	00 c0       	rjmp	.+0      	; 0x44b0 <L_15513+0xee>
    44b0:	00 2c       	mov	r0, r0
    44b2:	b8 b8       	out	0x08, r11	; 8
    44b4:	00 c0       	rjmp	.+0      	; 0x44b6 <L_15513+0xf4>
    44b6:	16 ff       	sbrs	r17, 6
    44b8:	98 b9       	out	0x08, r25	; 8
    44ba:	08 f4       	brcc	.+2      	; 0x44be <L_16737>
    44bc:	3f ef       	ldi	r19, 0xFF	; 255

000044be <L_16737>:
    44be:	81 95       	neg	r24
    44c0:	88 94       	clc
    44c2:	00 c0       	rjmp	.+0      	; 0x44c4 <L_16737+0x6>
    44c4:	00 c0       	rjmp	.+0      	; 0x44c6 <L_16737+0x8>
    44c6:	00 2c       	mov	r0, r0
    44c8:	98 b9       	out	0x08, r25	; 8
    44ca:	90 fc       	sbrc	r9, 0
    44cc:	03 0f       	add	r16, r19
    44ce:	00 c0       	rjmp	.+0      	; 0x44d0 <L_16737+0x12>
    44d0:	00 2c       	mov	r0, r0
    44d2:	b8 b8       	out	0x08, r11	; 8
    44d4:	00 c0       	rjmp	.+0      	; 0x44d6 <L_16737+0x18>
    44d6:	15 ff       	sbrs	r17, 5
    44d8:	98 b9       	out	0x08, r25	; 8
    44da:	07 95       	ror	r16
    44dc:	88 94       	clc
    44de:	91 fc       	sbrc	r9, 1
    44e0:	03 0f       	add	r16, r19
    44e2:	00 c0       	rjmp	.+0      	; 0x44e4 <L_16737+0x26>
    44e4:	00 c0       	rjmp	.+0      	; 0x44e6 <L_16737+0x28>
    44e6:	00 2c       	mov	r0, r0
    44e8:	98 b9       	out	0x08, r25	; 8
    44ea:	07 95       	ror	r16
    44ec:	88 94       	clc
    44ee:	00 c0       	rjmp	.+0      	; 0x44f0 <L_16737+0x32>
    44f0:	00 2c       	mov	r0, r0
    44f2:	b8 b8       	out	0x08, r11	; 8
    44f4:	00 c0       	rjmp	.+0      	; 0x44f6 <L_16737+0x38>
    44f6:	14 ff       	sbrs	r17, 4
    44f8:	98 b9       	out	0x08, r25	; 8
    44fa:	92 fc       	sbrc	r9, 2
    44fc:	03 0f       	add	r16, r19
    44fe:	07 95       	ror	r16
    4500:	88 94       	clc
    4502:	00 c0       	rjmp	.+0      	; 0x4504 <L_16737+0x46>
    4504:	00 c0       	rjmp	.+0      	; 0x4506 <L_16737+0x48>
    4506:	00 2c       	mov	r0, r0
    4508:	98 b9       	out	0x08, r25	; 8
    450a:	93 fc       	sbrc	r9, 3
    450c:	03 0f       	add	r16, r19
    450e:	00 c0       	rjmp	.+0      	; 0x4510 <L_16737+0x52>
    4510:	00 2c       	mov	r0, r0
    4512:	b8 b8       	out	0x08, r11	; 8
    4514:	00 c0       	rjmp	.+0      	; 0x4516 <L_16737+0x58>
    4516:	13 ff       	sbrs	r17, 3
    4518:	98 b9       	out	0x08, r25	; 8
    451a:	07 95       	ror	r16
    451c:	88 94       	clc
    451e:	94 fc       	sbrc	r9, 4
    4520:	03 0f       	add	r16, r19
    4522:	00 c0       	rjmp	.+0      	; 0x4524 <L_16737+0x66>
    4524:	00 c0       	rjmp	.+0      	; 0x4526 <L_16737+0x68>
    4526:	00 2c       	mov	r0, r0
    4528:	98 b9       	out	0x08, r25	; 8
    452a:	07 95       	ror	r16
    452c:	88 94       	clc
    452e:	00 c0       	rjmp	.+0      	; 0x4530 <L_16737+0x72>
    4530:	00 2c       	mov	r0, r0
    4532:	b8 b8       	out	0x08, r11	; 8
    4534:	00 c0       	rjmp	.+0      	; 0x4536 <L_16737+0x78>
    4536:	12 ff       	sbrs	r17, 2
    4538:	98 b9       	out	0x08, r25	; 8
    453a:	95 fc       	sbrc	r9, 5
    453c:	03 0f       	add	r16, r19
    453e:	07 95       	ror	r16
    4540:	88 94       	clc
    4542:	00 c0       	rjmp	.+0      	; 0x4544 <L_16737+0x86>
    4544:	00 c0       	rjmp	.+0      	; 0x4546 <L_16737+0x88>
    4546:	00 2c       	mov	r0, r0
    4548:	98 b9       	out	0x08, r25	; 8
    454a:	96 fc       	sbrc	r9, 6
    454c:	03 0f       	add	r16, r19
    454e:	00 c0       	rjmp	.+0      	; 0x4550 <L_16737+0x92>
    4550:	00 2c       	mov	r0, r0
    4552:	b8 b8       	out	0x08, r11	; 8
    4554:	00 c0       	rjmp	.+0      	; 0x4556 <L_16737+0x98>
    4556:	11 ff       	sbrs	r17, 1
    4558:	98 b9       	out	0x08, r25	; 8
    455a:	07 95       	ror	r16
    455c:	88 94       	clc
    455e:	97 fc       	sbrc	r9, 7
    4560:	03 0f       	add	r16, r19
    4562:	00 c0       	rjmp	.+0      	; 0x4564 <L_16737+0xa6>
    4564:	00 c0       	rjmp	.+0      	; 0x4566 <L_16737+0xa8>
    4566:	00 2c       	mov	r0, r0
    4568:	98 b9       	out	0x08, r25	; 8
    456a:	07 95       	ror	r16
    456c:	88 94       	clc
    456e:	00 c0       	rjmp	.+0      	; 0x4570 <L_16737+0xb2>
    4570:	00 2c       	mov	r0, r0
    4572:	b8 b8       	out	0x08, r11	; 8
    4574:	00 c0       	rjmp	.+0      	; 0x4576 <L_16737+0xb8>
    4576:	10 ff       	sbrs	r17, 0
    4578:	98 b9       	out	0x08, r25	; 8
    457a:	13 2f       	mov	r17, r19
    457c:	91 10       	cpse	r9, r1
    457e:	10 2f       	mov	r17, r16
    4580:	86 0f       	add	r24, r22
    4582:	00 c0       	rjmp	.+0      	; 0x4584 <L_16737+0xc6>
    4584:	00 c0       	rjmp	.+0      	; 0x4586 <L_16737+0xc8>
    4586:	00 2c       	mov	r0, r0
    4588:	98 b9       	out	0x08, r25	; 8
    458a:	11 97       	sbiw	r26, 0x01	; 1
    458c:	09 f0       	breq	.+2      	; 0x4590 <L_17717>
    458e:	86 ce       	rjmp	.-756    	; 0x429c <L_13762+0x50>

00004590 <L_17717>:
    4590:	df 91       	pop	r29
    4592:	cf 91       	pop	r28
    4594:	1f 91       	pop	r17
    4596:	0f 91       	pop	r16
    4598:	ff 90       	pop	r15
    459a:	ef 90       	pop	r14
    459c:	df 90       	pop	r13
    459e:	cf 90       	pop	r12
    45a0:	bf 90       	pop	r11
    45a2:	af 90       	pop	r10
    45a4:	9f 90       	pop	r9
    45a6:	08 95       	ret

000045a8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    45a8:	0f 93       	push	r16
    45aa:	1f 93       	push	r17
    45ac:	cf 93       	push	r28
    45ae:	df 93       	push	r29
    45b0:	ec 01       	movw	r28, r24
    45b2:	8b 01       	movw	r16, r22
    45b4:	0e 94 09 38 	call	0x7012	; 0x7012 <_micros>
    45b8:	2f 85       	ldd	r18, Y+15	; 0x0f
    45ba:	38 89       	ldd	r19, Y+16	; 0x10
    45bc:	62 1b       	sub	r22, r18
    45be:	73 0b       	sbc	r23, r19
    45c0:	6a 30       	cpi	r22, 0x0A	; 10
    45c2:	71 05       	cpc	r23, r1
    45c4:	b8 f3       	brcs	.-18     	; 0x45b4 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    45c6:	f8 94       	cli
    45c8:	c8 01       	movw	r24, r16
    45ca:	09 de       	rcall	.-1006   	; 0x41de <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    45cc:	f8 01       	movw	r30, r16
    45ce:	42 81       	ldd	r20, Z+2	; 0x02
    45d0:	53 81       	ldd	r21, Z+3	; 0x03
    45d2:	20 ee       	ldi	r18, 0xE0	; 224
    45d4:	31 e0       	ldi	r19, 0x01	; 1
    45d6:	da 01       	movw	r26, r20
    45d8:	0e 94 8b 41 	call	0x8316	; 0x8316 <__usmulhisi3>
    45dc:	dc 01       	movw	r26, r24
    45de:	cb 01       	movw	r24, r22
    45e0:	f4 e0       	ldi	r31, 0x04	; 4
    45e2:	b6 95       	lsr	r27
    45e4:	a7 95       	ror	r26
    45e6:	97 95       	ror	r25
    45e8:	87 95       	ror	r24
    45ea:	fa 95       	dec	r31
    45ec:	d1 f7       	brne	.-12     	; 0x45e2 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    45ee:	30 e0       	ldi	r19, 0x00	; 0
    45f0:	20 e0       	ldi	r18, 0x00	; 0
    45f2:	b9 01       	movw	r22, r18
    45f4:	ea e9       	ldi	r30, 0x9A	; 154
    45f6:	4e 9f       	mul	r20, r30
    45f8:	04 0e       	add	r0, r20
    45fa:	61 1d       	adc	r22, r1
    45fc:	5e 9f       	mul	r21, r30
    45fe:	60 0d       	add	r22, r0
    4600:	71 1d       	adc	r23, r1
    4602:	11 24       	eor	r1, r1
    4604:	65 0f       	add	r22, r21
    4606:	71 1d       	adc	r23, r1
    4608:	86 0f       	add	r24, r22
    460a:	97 1f       	adc	r25, r23
    460c:	a1 1d       	adc	r26, r1
    460e:	b1 1d       	adc	r27, r1
    4610:	89 3e       	cpi	r24, 0xE9	; 233
    4612:	f3 e0       	ldi	r31, 0x03	; 3
    4614:	9f 07       	cpc	r25, r31
    4616:	a1 05       	cpc	r26, r1
    4618:	b1 05       	cpc	r27, r1
    461a:	08 f4       	brcc	.+2      	; 0x461e <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    461c:	34 c0       	rjmp	.+104    	; 0x4686 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    461e:	88 5e       	subi	r24, 0xE8	; 232
    4620:	93 40       	sbci	r25, 0x03	; 3
    4622:	a1 09       	sbc	r26, r1
    4624:	b1 09       	sbc	r27, r1
    4626:	42 e0       	ldi	r20, 0x02	; 2
    4628:	b6 95       	lsr	r27
    462a:	a7 95       	ror	r26
    462c:	97 95       	ror	r25
    462e:	87 95       	ror	r24
    4630:	4a 95       	dec	r20
    4632:	d1 f7       	brne	.-12     	; 0x4628 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    4634:	47 e0       	ldi	r20, 0x07	; 7
    4636:	84 9f       	mul	r24, r20
    4638:	08 0e       	add	r0, r24
    463a:	21 1d       	adc	r18, r1
    463c:	94 9f       	mul	r25, r20
    463e:	20 0d       	add	r18, r0
    4640:	31 1d       	adc	r19, r1
    4642:	11 24       	eor	r1, r1
    4644:	29 0f       	add	r18, r25
    4646:	31 1d       	adc	r19, r1
    4648:	60 91 fe 0f 	lds	r22, 0x0FFE	; 0x800ffe <gTimeErrorAccum256ths>
    464c:	70 e0       	ldi	r23, 0x00	; 0
    464e:	86 0f       	add	r24, r22
    4650:	97 1f       	adc	r25, r23
    4652:	82 0f       	add	r24, r18
    4654:	93 1f       	adc	r25, r19
    4656:	40 91 1d 10 	lds	r20, 0x101D	; 0x80101d <timer0_millis_count>
    465a:	50 91 1e 10 	lds	r21, 0x101E	; 0x80101e <timer0_millis_count+0x1>
    465e:	60 91 1f 10 	lds	r22, 0x101F	; 0x80101f <timer0_millis_count+0x2>
    4662:	70 91 20 10 	lds	r23, 0x1020	; 0x801020 <timer0_millis_count+0x3>
    4666:	29 2f       	mov	r18, r25
    4668:	33 27       	eor	r19, r19
    466a:	42 0f       	add	r20, r18
    466c:	53 1f       	adc	r21, r19
    466e:	61 1d       	adc	r22, r1
    4670:	71 1d       	adc	r23, r1
    4672:	40 93 1d 10 	sts	0x101D, r20	; 0x80101d <timer0_millis_count>
    4676:	50 93 1e 10 	sts	0x101E, r21	; 0x80101e <timer0_millis_count+0x1>
    467a:	60 93 1f 10 	sts	0x101F, r22	; 0x80101f <timer0_millis_count+0x2>
    467e:	70 93 20 10 	sts	0x1020, r23	; 0x801020 <timer0_millis_count+0x3>
    4682:	80 93 fe 0f 	sts	0x0FFE, r24	; 0x800ffe <gTimeErrorAccum256ths>
    4686:	78 94       	sei
    4688:	0e 94 09 38 	call	0x7012	; 0x7012 <_micros>
    468c:	78 8b       	std	Y+16, r23	; 0x10
    468e:	6f 87       	std	Y+15, r22	; 0x0f
    4690:	df 91       	pop	r29
    4692:	cf 91       	pop	r28
    4694:	1f 91       	pop	r17
    4696:	0f 91       	pop	r16
    4698:	08 95       	ret

0000469a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    469a:	0f 93       	push	r16
    469c:	1f 93       	push	r17
    469e:	cf 93       	push	r28
    46a0:	df 93       	push	r29
    46a2:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <__data_end>
    46a6:	2f 5f       	subi	r18, 0xFF	; 255
    46a8:	32 2f       	mov	r19, r18
    46aa:	37 70       	andi	r19, 0x07	; 7
    46ac:	30 93 26 09 	sts	0x0926, r19	; 0x800926 <__data_end>
    46b0:	20 ff       	sbrs	r18, 0
    46b2:	2b c0       	rjmp	.+86     	; 0x470a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    46b4:	20 e8       	ldi	r18, 0x80	; 128
    46b6:	31 fd       	sbrc	r19, 1
    46b8:	20 64       	ori	r18, 0x40	; 64
    46ba:	34 70       	andi	r19, 0x04	; 4
    46bc:	09 f0       	breq	.+2      	; 0x46c0 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    46be:	20 62       	ori	r18, 0x20	; 32
    46c0:	20 5f       	subi	r18, 0xF0	; 240
    46c2:	fc 01       	movw	r30, r24
    46c4:	ec 01       	movw	r28, r24
    46c6:	23 96       	adiw	r28, 0x03	; 3
    46c8:	00 e0       	ldi	r16, 0x00	; 0
    46ca:	11 e0       	ldi	r17, 0x01	; 1
    46cc:	64 85       	ldd	r22, Z+12	; 0x0c
    46ce:	66 23       	and	r22, r22
    46d0:	29 f0       	breq	.+10     	; 0x46dc <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    46d2:	70 e0       	ldi	r23, 0x00	; 0
    46d4:	c8 01       	movw	r24, r16
    46d6:	0e 94 22 41 	call	0x8244	; 0x8244 <__divmodhi4>
    46da:	6f 5f       	subi	r22, 0xFF	; 255
    46dc:	61 87       	std	Z+9, r22	; 0x09
    46de:	32 2f       	mov	r19, r18
    46e0:	36 9f       	mul	r19, r22
    46e2:	03 0e       	add	r0, r19
    46e4:	30 e0       	ldi	r19, 0x00	; 0
    46e6:	31 1d       	adc	r19, r1
    46e8:	11 24       	eor	r1, r1
    46ea:	31 11       	cpse	r19, r1
    46ec:	10 c0       	rjmp	.+32     	; 0x470e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    46ee:	16 82       	std	Z+6, r1	; 0x06
    46f0:	66 23       	and	r22, r22
    46f2:	11 f0       	breq	.+4      	; 0x46f8 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    46f4:	61 50       	subi	r22, 0x01	; 1
    46f6:	61 87       	std	Z+9, r22	; 0x09
    46f8:	31 96       	adiw	r30, 0x01	; 1
    46fa:	ec 17       	cp	r30, r28
    46fc:	fd 07       	cpc	r31, r29
    46fe:	31 f7       	brne	.-52     	; 0x46cc <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    4700:	df 91       	pop	r29
    4702:	cf 91       	pop	r28
    4704:	1f 91       	pop	r17
    4706:	0f 91       	pop	r16
    4708:	08 95       	ret
    470a:	20 e0       	ldi	r18, 0x00	; 0
    470c:	d4 cf       	rjmp	.-88     	; 0x46b6 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    470e:	31 50       	subi	r19, 0x01	; 1
    4710:	36 83       	std	Z+6, r19	; 0x06
    4712:	ee cf       	rjmp	.-36     	; 0x46f0 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

00004714 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    4714:	0f 93       	push	r16
    4716:	1f 93       	push	r17
    4718:	cf 93       	push	r28
    471a:	df 93       	push	r29
    471c:	cd b7       	in	r28, 0x3d	; 61
    471e:	de b7       	in	r29, 0x3e	; 62
    4720:	62 97       	sbiw	r28, 0x12	; 18
    4722:	0f b6       	in	r0, 0x3f	; 63
    4724:	f8 94       	cli
    4726:	de bf       	out	0x3e, r29	; 62
    4728:	0f be       	out	0x3f, r0	; 63
    472a:	cd bf       	out	0x3d, r28	; 61
    472c:	8c 01       	movw	r16, r24
    472e:	f9 01       	movw	r30, r18
    4730:	dc 01       	movw	r26, r24
    4732:	1c 96       	adiw	r26, 0x0c	; 12
    4734:	8c 91       	ld	r24, X
    4736:	7a 83       	std	Y+2, r23	; 0x02
    4738:	69 83       	std	Y+1, r22	; 0x01
    473a:	5c 83       	std	Y+4, r21	; 0x04
    473c:	4b 83       	std	Y+3, r20	; 0x03
    473e:	5e 83       	std	Y+6, r21	; 0x06
    4740:	4d 83       	std	Y+5, r20	; 0x05
    4742:	90 81       	ld	r25, Z
    4744:	9d 87       	std	Y+13, r25	; 0x0d
    4746:	91 81       	ldd	r25, Z+1	; 0x01
    4748:	9e 87       	std	Y+14, r25	; 0x0e
    474a:	92 81       	ldd	r25, Z+2	; 0x02
    474c:	9f 87       	std	Y+15, r25	; 0x0f
    474e:	81 30       	cpi	r24, 0x01	; 1
    4750:	e9 f4       	brne	.+58     	; 0x478c <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    4752:	ce 01       	movw	r24, r28
    4754:	01 96       	adiw	r24, 0x01	; 1
    4756:	a1 df       	rcall	.-190    	; 0x469a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    4758:	83 e0       	ldi	r24, 0x03	; 3
    475a:	88 8b       	std	Y+16, r24	; 0x10
    475c:	1a 8a       	std	Y+18, r1	; 0x12
    475e:	19 8a       	std	Y+17, r1	; 0x11
    4760:	d8 01       	movw	r26, r16
    4762:	ed 91       	ld	r30, X+
    4764:	fc 91       	ld	r31, X
    4766:	04 84       	ldd	r0, Z+12	; 0x0c
    4768:	f5 85       	ldd	r31, Z+13	; 0x0d
    476a:	e0 2d       	mov	r30, r0
    476c:	be 01       	movw	r22, r28
    476e:	6f 5f       	subi	r22, 0xFF	; 255
    4770:	7f 4f       	sbci	r23, 0xFF	; 255
    4772:	c8 01       	movw	r24, r16
    4774:	09 95       	icall
    4776:	62 96       	adiw	r28, 0x12	; 18
    4778:	0f b6       	in	r0, 0x3f	; 63
    477a:	f8 94       	cli
    477c:	de bf       	out	0x3e, r29	; 62
    477e:	0f be       	out	0x3f, r0	; 63
    4780:	cd bf       	out	0x3d, r28	; 61
    4782:	df 91       	pop	r29
    4784:	cf 91       	pop	r28
    4786:	1f 91       	pop	r17
    4788:	0f 91       	pop	r16
    478a:	08 95       	ret
    478c:	1c 86       	std	Y+12, r1	; 0x0c
    478e:	1b 86       	std	Y+11, r1	; 0x0b
    4790:	1a 86       	std	Y+10, r1	; 0x0a
    4792:	19 86       	std	Y+9, r1	; 0x09
    4794:	18 86       	std	Y+8, r1	; 0x08
    4796:	1f 82       	std	Y+7, r1	; 0x07
    4798:	df cf       	rjmp	.-66     	; 0x4758 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

0000479a <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    479a:	0f 93       	push	r16
    479c:	1f 93       	push	r17
    479e:	cf 93       	push	r28
    47a0:	df 93       	push	r29
    47a2:	cd b7       	in	r28, 0x3d	; 61
    47a4:	de b7       	in	r29, 0x3e	; 62
    47a6:	62 97       	sbiw	r28, 0x12	; 18
    47a8:	0f b6       	in	r0, 0x3f	; 63
    47aa:	f8 94       	cli
    47ac:	de bf       	out	0x3e, r29	; 62
    47ae:	0f be       	out	0x3f, r0	; 63
    47b0:	cd bf       	out	0x3d, r28	; 61
    47b2:	8c 01       	movw	r16, r24
    47b4:	f9 01       	movw	r30, r18
    47b6:	dc 01       	movw	r26, r24
    47b8:	1c 96       	adiw	r26, 0x0c	; 12
    47ba:	8c 91       	ld	r24, X
    47bc:	7a 83       	std	Y+2, r23	; 0x02
    47be:	69 83       	std	Y+1, r22	; 0x01
    47c0:	5c 83       	std	Y+4, r21	; 0x04
    47c2:	4b 83       	std	Y+3, r20	; 0x03
    47c4:	5e 83       	std	Y+6, r21	; 0x06
    47c6:	4d 83       	std	Y+5, r20	; 0x05
    47c8:	90 81       	ld	r25, Z
    47ca:	9d 87       	std	Y+13, r25	; 0x0d
    47cc:	91 81       	ldd	r25, Z+1	; 0x01
    47ce:	9e 87       	std	Y+14, r25	; 0x0e
    47d0:	92 81       	ldd	r25, Z+2	; 0x02
    47d2:	9f 87       	std	Y+15, r25	; 0x0f
    47d4:	81 30       	cpi	r24, 0x01	; 1
    47d6:	e1 f4       	brne	.+56     	; 0x4810 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    47d8:	ce 01       	movw	r24, r28
    47da:	01 96       	adiw	r24, 0x01	; 1
    47dc:	5e df       	rcall	.-324    	; 0x469a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    47de:	18 8a       	std	Y+16, r1	; 0x10
    47e0:	1a 8a       	std	Y+18, r1	; 0x12
    47e2:	19 8a       	std	Y+17, r1	; 0x11
    47e4:	d8 01       	movw	r26, r16
    47e6:	ed 91       	ld	r30, X+
    47e8:	fc 91       	ld	r31, X
    47ea:	04 84       	ldd	r0, Z+12	; 0x0c
    47ec:	f5 85       	ldd	r31, Z+13	; 0x0d
    47ee:	e0 2d       	mov	r30, r0
    47f0:	be 01       	movw	r22, r28
    47f2:	6f 5f       	subi	r22, 0xFF	; 255
    47f4:	7f 4f       	sbci	r23, 0xFF	; 255
    47f6:	c8 01       	movw	r24, r16
    47f8:	09 95       	icall
    47fa:	62 96       	adiw	r28, 0x12	; 18
    47fc:	0f b6       	in	r0, 0x3f	; 63
    47fe:	f8 94       	cli
    4800:	de bf       	out	0x3e, r29	; 62
    4802:	0f be       	out	0x3f, r0	; 63
    4804:	cd bf       	out	0x3d, r28	; 61
    4806:	df 91       	pop	r29
    4808:	cf 91       	pop	r28
    480a:	1f 91       	pop	r17
    480c:	0f 91       	pop	r16
    480e:	08 95       	ret
    4810:	1c 86       	std	Y+12, r1	; 0x0c
    4812:	1b 86       	std	Y+11, r1	; 0x0b
    4814:	1a 86       	std	Y+10, r1	; 0x0a
    4816:	19 86       	std	Y+9, r1	; 0x09
    4818:	18 86       	std	Y+8, r1	; 0x08
    481a:	1f 82       	std	Y+7, r1	; 0x07
    481c:	e0 cf       	rjmp	.-64     	; 0x47de <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

0000481e <_GLOBAL__sub_I_matrix>:
    481e:	0f b6       	in	r0, 0x3f	; 63
    4820:	f8 94       	cli
    4822:	80 91 1d 10 	lds	r24, 0x101D	; 0x80101d <timer0_millis_count>
    4826:	90 91 1e 10 	lds	r25, 0x101E	; 0x80101e <timer0_millis_count+0x1>
    482a:	a0 91 1f 10 	lds	r26, 0x101F	; 0x80101f <timer0_millis_count+0x2>
    482e:	b0 91 20 10 	lds	r27, 0x1020	; 0x801020 <timer0_millis_count+0x3>
    4832:	0f be       	out	0x3f, r0	; 63
    4834:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <lastLEDchange+0x1>
    4838:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <lastLEDchange>
    483c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4840:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
    4844:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4848:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
    484c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4850:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
    4854:	6c e0       	ldi	r22, 0x0C	; 12
    4856:	75 e0       	ldi	r23, 0x05	; 5
    4858:	8a e6       	ldi	r24, 0x6A	; 106
    485a:	99 e0       	ldi	r25, 0x09	; 9
    485c:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    4860:	67 e0       	ldi	r22, 0x07	; 7
    4862:	75 e0       	ldi	r23, 0x05	; 5
    4864:	81 e7       	ldi	r24, 0x71	; 113
    4866:	99 e0       	ldi	r25, 0x09	; 9
    4868:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    486c:	65 e0       	ldi	r22, 0x05	; 5
    486e:	75 e0       	ldi	r23, 0x05	; 5
    4870:	88 e7       	ldi	r24, 0x78	; 120
    4872:	99 e0       	ldi	r25, 0x09	; 9
    4874:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    4878:	62 e0       	ldi	r22, 0x02	; 2
    487a:	75 e0       	ldi	r23, 0x05	; 5
    487c:	8f e7       	ldi	r24, 0x7F	; 127
    487e:	99 e0       	ldi	r25, 0x09	; 9
    4880:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    4884:	6d ef       	ldi	r22, 0xFD	; 253
    4886:	74 e0       	ldi	r23, 0x04	; 4
    4888:	86 e8       	ldi	r24, 0x86	; 134
    488a:	99 e0       	ldi	r25, 0x09	; 9
    488c:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    4890:	69 ef       	ldi	r22, 0xF9	; 249
    4892:	74 e0       	ldi	r23, 0x04	; 4
    4894:	8d e8       	ldi	r24, 0x8D	; 141
    4896:	99 e0       	ldi	r25, 0x09	; 9
    4898:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    489c:	63 ef       	ldi	r22, 0xF3	; 243
    489e:	74 e0       	ldi	r23, 0x04	; 4
    48a0:	84 e9       	ldi	r24, 0x94	; 148
    48a2:	99 e0       	ldi	r25, 0x09	; 9
    48a4:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48a8:	60 ef       	ldi	r22, 0xF0	; 240
    48aa:	74 e0       	ldi	r23, 0x04	; 4
    48ac:	8b e9       	ldi	r24, 0x9B	; 155
    48ae:	99 e0       	ldi	r25, 0x09	; 9
    48b0:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48b4:	6b ee       	ldi	r22, 0xEB	; 235
    48b6:	74 e0       	ldi	r23, 0x04	; 4
    48b8:	82 ea       	ldi	r24, 0xA2	; 162
    48ba:	99 e0       	ldi	r25, 0x09	; 9
    48bc:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48c0:	66 ee       	ldi	r22, 0xE6	; 230
    48c2:	74 e0       	ldi	r23, 0x04	; 4
    48c4:	89 ea       	ldi	r24, 0xA9	; 169
    48c6:	99 e0       	ldi	r25, 0x09	; 9
    48c8:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48cc:	61 ee       	ldi	r22, 0xE1	; 225
    48ce:	74 e0       	ldi	r23, 0x04	; 4
    48d0:	80 e4       	ldi	r24, 0x40	; 64
    48d2:	99 e0       	ldi	r25, 0x09	; 9
    48d4:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48d8:	6a ed       	ldi	r22, 0xDA	; 218
    48da:	74 e0       	ldi	r23, 0x04	; 4
    48dc:	87 e4       	ldi	r24, 0x47	; 71
    48de:	99 e0       	ldi	r25, 0x09	; 9
    48e0:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48e4:	61 ed       	ldi	r22, 0xD1	; 209
    48e6:	74 e0       	ldi	r23, 0x04	; 4
    48e8:	8e e4       	ldi	r24, 0x4E	; 78
    48ea:	99 e0       	ldi	r25, 0x09	; 9
    48ec:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48f0:	6d ec       	ldi	r22, 0xCD	; 205
    48f2:	74 e0       	ldi	r23, 0x04	; 4
    48f4:	85 e5       	ldi	r24, 0x55	; 85
    48f6:	99 e0       	ldi	r25, 0x09	; 9
    48f8:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    48fc:	69 ec       	ldi	r22, 0xC9	; 201
    48fe:	74 e0       	ldi	r23, 0x04	; 4
    4900:	8c e5       	ldi	r24, 0x5C	; 92
    4902:	99 e0       	ldi	r25, 0x09	; 9
    4904:	0e 94 3b 3f 	call	0x7e76	; 0x7e76 <String::String(char const*)>
    4908:	62 ec       	ldi	r22, 0xC2	; 194
    490a:	74 e0       	ldi	r23, 0x04	; 4
    490c:	83 e6       	ldi	r24, 0x63	; 99
    490e:	99 e0       	ldi	r25, 0x09	; 9
    4910:	0c 94 3b 3f 	jmp	0x7e76	; 0x7e76 <String::String(char const*)>

00004914 <_GLOBAL__sub_D_matrix>:
    4914:	cf 93       	push	r28
    4916:	df 93       	push	r29
    4918:	ca e6       	ldi	r28, 0x6A	; 106
    491a:	d9 e0       	ldi	r29, 0x09	; 9
    491c:	27 97       	sbiw	r28, 0x07	; 7
    491e:	ce 01       	movw	r24, r28
    4920:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    4924:	89 e0       	ldi	r24, 0x09	; 9
    4926:	c0 34       	cpi	r28, 0x40	; 64
    4928:	d8 07       	cpc	r29, r24
    492a:	c1 f7       	brne	.-16     	; 0x491c <_GLOBAL__sub_D_matrix+0x8>
    492c:	c0 eb       	ldi	r28, 0xB0	; 176
    492e:	d9 e0       	ldi	r29, 0x09	; 9
    4930:	27 97       	sbiw	r28, 0x07	; 7
    4932:	ce 01       	movw	r24, r28
    4934:	0e 94 d2 3e 	call	0x7da4	; 0x7da4 <String::~String()>
    4938:	89 e0       	ldi	r24, 0x09	; 9
    493a:	ca 36       	cpi	r28, 0x6A	; 106
    493c:	d8 07       	cpc	r29, r24
    493e:	c1 f7       	brne	.-16     	; 0x4930 <_GLOBAL__sub_D_matrix+0x1c>
    4940:	df 91       	pop	r29
    4942:	cf 91       	pop	r28
    4944:	08 95       	ret

00004946 <checkIncomingMIDI()>:
    4946:	88 e2       	ldi	r24, 0x28	; 40
    4948:	90 e1       	ldi	r25, 0x10	; 16
    494a:	0e 94 36 3a 	call	0x746c	; 0x746c <HardwareSerial::available()>
    494e:	89 2b       	or	r24, r25
    4950:	d9 f0       	breq	.+54     	; 0x4988 <checkIncomingMIDI()+0x42>
    4952:	88 e2       	ldi	r24, 0x28	; 40
    4954:	90 e1       	ldi	r25, 0x10	; 16
    4956:	0e 94 69 3a 	call	0x74d2	; 0x74d2 <HardwareSerial::read()>
    495a:	80 93 08 0a 	sts	0x0A08, r24	; 0x800a08 <incomingMidiByte>
    495e:	68 2f       	mov	r22, r24
    4960:	8d e9       	ldi	r24, 0x9D	; 157
    4962:	90 e1       	ldi	r25, 0x10	; 16
    4964:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    4968:	60 91 08 0a 	lds	r22, 0x0A08	; 0x800a08 <incomingMidiByte>
    496c:	6f 3f       	cpi	r22, 0xFF	; 255
    496e:	61 f0       	breq	.+24     	; 0x4988 <checkIncomingMIDI()+0x42>
    4970:	67 ff       	sbrs	r22, 7
    4972:	11 c0       	rjmp	.+34     	; 0x4996 <checkIncomingMIDI()+0x50>
    4974:	60 93 07 0a 	sts	0x0A07, r22	; 0x800a07 <midiStatusByte>
    4978:	10 92 06 0a 	sts	0x0A06, r1	; 0x800a06 <midiDataByte1>
    497c:	10 92 05 0a 	sts	0x0A05, r1	; 0x800a05 <midiDataByte2>
    4980:	8d e9       	ldi	r24, 0x9D	; 157
    4982:	90 e1       	ldi	r25, 0x10	; 16
    4984:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    4988:	88 e2       	ldi	r24, 0x28	; 40
    498a:	90 e1       	ldi	r25, 0x10	; 16
    498c:	0e 94 36 3a 	call	0x746c	; 0x746c <HardwareSerial::available()>
    4990:	89 2b       	or	r24, r25
    4992:	c9 f6       	brne	.-78     	; 0x4946 <checkIncomingMIDI()>
    4994:	08 95       	ret
    4996:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <midiDataByte1>
    499a:	81 11       	cpse	r24, r1
    499c:	37 c0       	rjmp	.+110    	; 0x4a0c <checkIncomingMIDI()+0xc6>
    499e:	60 93 06 0a 	sts	0x0A06, r22	; 0x800a06 <midiDataByte1>
    49a2:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <midiStatusByte>
    49a6:	8d e9       	ldi	r24, 0x9D	; 157
    49a8:	90 e1       	ldi	r25, 0x10	; 16
    49aa:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::print(unsigned char)>
    49ae:	63 e8       	ldi	r22, 0x83	; 131
    49b0:	72 e0       	ldi	r23, 0x02	; 2
    49b2:	8d e9       	ldi	r24, 0x9D	; 157
    49b4:	90 e1       	ldi	r25, 0x10	; 16
    49b6:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    49ba:	60 91 06 0a 	lds	r22, 0x0A06	; 0x800a06 <midiDataByte1>
    49be:	8d e9       	ldi	r24, 0x9D	; 157
    49c0:	90 e1       	ldi	r25, 0x10	; 16
    49c2:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::print(unsigned char)>
    49c6:	63 e8       	ldi	r22, 0x83	; 131
    49c8:	72 e0       	ldi	r23, 0x02	; 2
    49ca:	8d e9       	ldi	r24, 0x9D	; 157
    49cc:	90 e1       	ldi	r25, 0x10	; 16
    49ce:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    49d2:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <midiDataByte2>
    49d6:	8d e9       	ldi	r24, 0x9D	; 157
    49d8:	90 e1       	ldi	r25, 0x10	; 16
    49da:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    49de:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <midiStatusByte>
    49e2:	89 3b       	cpi	r24, 0xB9	; 185
    49e4:	89 f6       	brne	.-94     	; 0x4988 <checkIncomingMIDI()+0x42>
    49e6:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <midiDataByte1>
    49ea:	86 31       	cpi	r24, 0x16	; 22
    49ec:	69 f6       	brne	.-102    	; 0x4988 <checkIncomingMIDI()+0x42>
    49ee:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <midiDataByte2>
    49f2:	88 23       	and	r24, r24
    49f4:	49 f2       	breq	.-110    	; 0x4988 <checkIncomingMIDI()+0x42>
    49f6:	0e 94 30 13 	call	0x2660	; 0x2660 <switchToSong(unsigned char)>
    49fa:	65 e8       	ldi	r22, 0x85	; 133
    49fc:	72 e0       	ldi	r23, 0x02	; 2
    49fe:	8d e9       	ldi	r24, 0x9D	; 157
    4a00:	90 e1       	ldi	r25, 0x10	; 16
    4a02:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    4a06:	60 91 05 0a 	lds	r22, 0x0A05	; 0x800a05 <midiDataByte2>
    4a0a:	ba cf       	rjmp	.-140    	; 0x4980 <checkIncomingMIDI()+0x3a>
    4a0c:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <midiDataByte2>
    4a10:	81 11       	cpse	r24, r1
    4a12:	c7 cf       	rjmp	.-114    	; 0x49a2 <checkIncomingMIDI()+0x5c>
    4a14:	60 93 05 0a 	sts	0x0A05, r22	; 0x800a05 <midiDataByte2>
    4a18:	c4 cf       	rjmp	.-120    	; 0x49a2 <checkIncomingMIDI()+0x5c>

00004a1a <loop>:
    4a1a:	8f 92       	push	r8
    4a1c:	9f 92       	push	r9
    4a1e:	af 92       	push	r10
    4a20:	bf 92       	push	r11
    4a22:	cf 92       	push	r12
    4a24:	df 92       	push	r13
    4a26:	ef 92       	push	r14
    4a28:	ff 92       	push	r15
    4a2a:	0f 93       	push	r16
    4a2c:	1f 93       	push	r17
    4a2e:	cf 93       	push	r28
    4a30:	80 91 f5 09 	lds	r24, 0x09F5	; 0x8009f5 <ISR_USART_got_a_byte>
    4a34:	88 23       	and	r24, r24
    4a36:	41 f0       	breq	.+16     	; 0x4a48 <loop+0x2e>
    4a38:	60 91 f6 09 	lds	r22, 0x09F6	; 0x8009f6 <ISR_received_USART_byte>
    4a3c:	8d e9       	ldi	r24, 0x9D	; 157
    4a3e:	90 e1       	ldi	r25, 0x10	; 16
    4a40:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    4a44:	10 92 f5 09 	sts	0x09F5, r1	; 0x8009f5 <ISR_USART_got_a_byte>
    4a48:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <OneSecondHasPast>
    4a4c:	88 23       	and	r24, r24
    4a4e:	39 f0       	breq	.+14     	; 0x4a5e <loop+0x44>
    4a50:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <secondsForVoltage>
    4a54:	8f 5f       	subi	r24, 0xFF	; 255
    4a56:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <secondsForVoltage>
    4a5a:	10 92 f7 09 	sts	0x09F7, r1	; 0x8009f7 <OneSecondHasPast>
    4a5e:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <secondsForVoltage>
    4a62:	88 23       	and	r24, r24
    4a64:	09 f4       	brne	.+2      	; 0x4a68 <loop+0x4e>
    4a66:	46 c0       	rjmp	.+140    	; 0x4af4 <loop+0xda>
    4a68:	c0 91 04 0a 	lds	r28, 0x0A04	; 0x800a04 <voltageSmooth>
    4a6c:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <secondsForVoltage>
    4a70:	88 e2       	ldi	r24, 0x28	; 40
    4a72:	0e 94 51 36 	call	0x6ca2	; 0x6ca2 <analogRead>
    4a76:	bc 01       	movw	r22, r24
    4a78:	99 0f       	add	r25, r25
    4a7a:	88 0b       	sbc	r24, r24
    4a7c:	99 0b       	sbc	r25, r25
    4a7e:	1f 92       	push	r1
    4a80:	1f 92       	push	r1
    4a82:	1f 92       	push	r1
    4a84:	28 e7       	ldi	r18, 0x78	; 120
    4a86:	2f 93       	push	r18
    4a88:	a1 2c       	mov	r10, r1
    4a8a:	b1 2c       	mov	r11, r1
    4a8c:	65 01       	movw	r12, r10
    4a8e:	ee 24       	eor	r14, r14
    4a90:	ea 94       	dec	r14
    4a92:	13 e0       	ldi	r17, 0x03	; 3
    4a94:	f1 2e       	mov	r15, r17
    4a96:	00 e0       	ldi	r16, 0x00	; 0
    4a98:	10 e0       	ldi	r17, 0x00	; 0
    4a9a:	20 e0       	ldi	r18, 0x00	; 0
    4a9c:	30 e0       	ldi	r19, 0x00	; 0
    4a9e:	a9 01       	movw	r20, r18
    4aa0:	0e 94 93 3e 	call	0x7d26	; 0x7d26 <map(long, long, long, long, long)>
    4aa4:	4b 01       	movw	r8, r22
    4aa6:	5c 01       	movw	r10, r24
    4aa8:	6c 2f       	mov	r22, r28
    4aaa:	70 e0       	ldi	r23, 0x00	; 0
    4aac:	90 e0       	ldi	r25, 0x00	; 0
    4aae:	80 e0       	ldi	r24, 0x00	; 0
    4ab0:	0e 94 10 40 	call	0x8020	; 0x8020 <__floatsisf>
    4ab4:	23 e3       	ldi	r18, 0x33	; 51
    4ab6:	33 e3       	ldi	r19, 0x33	; 51
    4ab8:	43 e3       	ldi	r20, 0x33	; 51
    4aba:	5f e3       	ldi	r21, 0x3F	; 63
    4abc:	0e 94 9c 40 	call	0x8138	; 0x8138 <__mulsf3>
    4ac0:	6b 01       	movw	r12, r22
    4ac2:	7c 01       	movw	r14, r24
    4ac4:	c5 01       	movw	r24, r10
    4ac6:	b4 01       	movw	r22, r8
    4ac8:	0e 94 10 40 	call	0x8020	; 0x8020 <__floatsisf>
    4acc:	2a e9       	ldi	r18, 0x9A	; 154
    4ace:	39 e9       	ldi	r19, 0x99	; 153
    4ad0:	49 e9       	ldi	r20, 0x99	; 153
    4ad2:	5e e3       	ldi	r21, 0x3E	; 62
    4ad4:	0e 94 9c 40 	call	0x8138	; 0x8138 <__mulsf3>
    4ad8:	9b 01       	movw	r18, r22
    4ada:	ac 01       	movw	r20, r24
    4adc:	c7 01       	movw	r24, r14
    4ade:	b6 01       	movw	r22, r12
    4ae0:	0e 94 7e 3f 	call	0x7efc	; 0x7efc <__addsf3>
    4ae4:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <__fixunssfsi>
    4ae8:	60 93 04 0a 	sts	0x0A04, r22	; 0x800a04 <voltageSmooth>
    4aec:	0f 90       	pop	r0
    4aee:	0f 90       	pop	r0
    4af0:	0f 90       	pop	r0
    4af2:	0f 90       	pop	r0
    4af4:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <voltageSmooth>
    4af8:	87 36       	cpi	r24, 0x67	; 103
    4afa:	08 f4       	brcc	.+2      	; 0x4afe <loop+0xe4>
    4afc:	54 c0       	rjmp	.+168    	; 0x4ba6 <loop+0x18c>
    4afe:	23 df       	rcall	.-442    	; 0x4946 <checkIncomingMIDI()>
    4b00:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <flag_processFastLED>
    4b04:	88 23       	and	r24, r24
    4b06:	f9 f0       	breq	.+62     	; 0x4b46 <loop+0x12c>
    4b08:	8f e0       	ldi	r24, 0x0F	; 15
    4b0a:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <FastLED>
    4b0e:	e0 91 0d 0a 	lds	r30, 0x0A0D	; 0x800a0d <songID>
    4b12:	ef 30       	cpi	r30, 0x0F	; 15
    4b14:	b0 f4       	brcc	.+44     	; 0x4b42 <loop+0x128>
    4b16:	f0 e0       	ldi	r31, 0x00	; 0
    4b18:	e0 57       	subi	r30, 0x70	; 112
    4b1a:	fa 4d       	sbci	r31, 0xDA	; 218
    4b1c:	0c 94 73 41 	jmp	0x82e6	; 0x82e6 <__tablejump2__>
    4b20:	9f 25       	eor	r25, r15
    4b22:	af 25       	eor	r26, r15
    4b24:	b2 25       	eor	r27, r2
    4b26:	b5 25       	eor	r27, r5
    4b28:	b8 25       	eor	r27, r8
    4b2a:	bb 25       	eor	r27, r11
    4b2c:	be 25       	eor	r27, r14
    4b2e:	c1 25       	eor	r28, r1
    4b30:	c4 25       	eor	r28, r4
    4b32:	c7 25       	eor	r28, r7
    4b34:	ca 25       	eor	r28, r10
    4b36:	cd 25       	eor	r28, r13
    4b38:	cf 25       	eor	r28, r15
    4b3a:	d1 25       	eor	r29, r1
    4b3c:	d1 25       	eor	r29, r1
    4b3e:	0e 94 30 14 	call	0x2860	; 0x2860 <defaultLoop()>
    4b42:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <flag_processFastLED>
    4b46:	cf 91       	pop	r28
    4b48:	1f 91       	pop	r17
    4b4a:	0f 91       	pop	r16
    4b4c:	ff 90       	pop	r15
    4b4e:	ef 90       	pop	r14
    4b50:	df 90       	pop	r13
    4b52:	cf 90       	pop	r12
    4b54:	bf 90       	pop	r11
    4b56:	af 90       	pop	r10
    4b58:	9f 90       	pop	r9
    4b5a:	8f 90       	pop	r8
    4b5c:	08 95       	ret
    4b5e:	0e 94 e6 14 	call	0x29cc	; 0x29cc <LearnToFly()>
    4b62:	ef cf       	rjmp	.-34     	; 0x4b42 <loop+0x128>
    4b64:	0e 94 a6 15 	call	0x2b4c	; 0x2b4c <Castle()>
    4b68:	ec cf       	rjmp	.-40     	; 0x4b42 <loop+0x128>
    4b6a:	0e 94 ea 16 	call	0x2dd4	; 0x2dd4 <TooClose()>
    4b6e:	e9 cf       	rjmp	.-46     	; 0x4b42 <loop+0x128>
    4b70:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Pokerface()>
    4b74:	e6 cf       	rjmp	.-52     	; 0x4b42 <loop+0x128>
    4b76:	0e 94 a8 18 	call	0x3150	; 0x3150 <UseSomebody()>
    4b7a:	e3 cf       	rjmp	.-58     	; 0x4b42 <loop+0x128>
    4b7c:	0e 94 64 19 	call	0x32c8	; 0x32c8 <NoRoots()>
    4b80:	e0 cf       	rjmp	.-64     	; 0x4b42 <loop+0x128>
    4b82:	0e 94 98 1a 	call	0x3530	; 0x3530 <Firework()>
    4b86:	dd cf       	rjmp	.-70     	; 0x4b42 <loop+0x128>
    4b88:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <Diamonds()>
    4b8c:	da cf       	rjmp	.-76     	; 0x4b42 <loop+0x128>
    4b8e:	0e 94 67 1c 	call	0x38ce	; 0x38ce <SetFire()>
    4b92:	d7 cf       	rjmp	.-82     	; 0x4b42 <loop+0x128>
    4b94:	0e 94 4f 1d 	call	0x3a9e	; 0x3a9e <Chandelier()>
    4b98:	d4 cf       	rjmp	.-88     	; 0x4b42 <loop+0x128>
    4b9a:	69 d8       	rcall	.-3886   	; 0x3c6e <Titanium()>
    4b9c:	d2 cf       	rjmp	.-92     	; 0x4b42 <loop+0x128>
    4b9e:	4f d9       	rcall	.-3426   	; 0x3e3e <SomeoneYouLoved()>
    4ba0:	d0 cf       	rjmp	.-96     	; 0x4b42 <loop+0x128>
    4ba2:	35 da       	rcall	.-2966   	; 0x400e <ShouldntStop()>
    4ba4:	ce cf       	rjmp	.-100    	; 0x4b42 <loop+0x128>
    4ba6:	60 e0       	ldi	r22, 0x00	; 0
    4ba8:	8d e0       	ldi	r24, 0x0D	; 13
    4baa:	90 e1       	ldi	r25, 0x10	; 16
    4bac:	0e 94 95 32 	call	0x652a	; 0x652a <CFastLED::clear(bool)>
    4bb0:	8d e0       	ldi	r24, 0x0D	; 13
    4bb2:	90 e1       	ldi	r25, 0x10	; 16
    4bb4:	0e 94 c7 05 	call	0xb8e	; 0xb8e <CFastLED::show()>
    4bb8:	64 ef       	ldi	r22, 0xF4	; 244
    4bba:	71 e0       	ldi	r23, 0x01	; 1
    4bbc:	80 e0       	ldi	r24, 0x00	; 0
    4bbe:	90 e0       	ldi	r25, 0x00	; 0
    4bc0:	0e 94 e9 37 	call	0x6fd2	; 0x6fd2 <delay>
    4bc4:	8f e0       	ldi	r24, 0x0F	; 15
    4bc6:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <FastLED>
    4bca:	8f ef       	ldi	r24, 0xFF	; 255
    4bcc:	80 93 0e 0a 	sts	0x0A0E, r24	; 0x800a0e <leds>
    4bd0:	10 92 0f 0a 	sts	0x0A0F, r1	; 0x800a0f <leds+0x1>
    4bd4:	10 92 10 0a 	sts	0x0A10, r1	; 0x800a10 <leds+0x2>
    4bd8:	8d e0       	ldi	r24, 0x0D	; 13
    4bda:	90 e1       	ldi	r25, 0x10	; 16
    4bdc:	0e 94 c7 05 	call	0xb8e	; 0xb8e <CFastLED::show()>
    4be0:	64 ef       	ldi	r22, 0xF4	; 244
    4be2:	71 e0       	ldi	r23, 0x01	; 1
    4be4:	80 e0       	ldi	r24, 0x00	; 0
    4be6:	90 e0       	ldi	r25, 0x00	; 0
    4be8:	cf 91       	pop	r28
    4bea:	1f 91       	pop	r17
    4bec:	0f 91       	pop	r16
    4bee:	ff 90       	pop	r15
    4bf0:	ef 90       	pop	r14
    4bf2:	df 90       	pop	r13
    4bf4:	cf 90       	pop	r12
    4bf6:	bf 90       	pop	r11
    4bf8:	af 90       	pop	r10
    4bfa:	9f 90       	pop	r9
    4bfc:	8f 90       	pop	r8
    4bfe:	0c 94 e9 37 	jmp	0x6fd2	; 0x6fd2 <delay>

00004c02 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    4c02:	90 e0       	ldi	r25, 0x00	; 0
    4c04:	80 e0       	ldi	r24, 0x00	; 0
    4c06:	08 95       	ret

00004c08 <Print::flush()>:
    4c08:	08 95       	ret

00004c0a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    4c0a:	2f 92       	push	r2
    4c0c:	3f 92       	push	r3
    4c0e:	4f 92       	push	r4
    4c10:	5f 92       	push	r5
    4c12:	6f 92       	push	r6
    4c14:	7f 92       	push	r7
    4c16:	8f 92       	push	r8
    4c18:	9f 92       	push	r9
    4c1a:	af 92       	push	r10
    4c1c:	bf 92       	push	r11
    4c1e:	cf 92       	push	r12
    4c20:	df 92       	push	r13
    4c22:	ef 92       	push	r14
    4c24:	ff 92       	push	r15
    4c26:	0f 93       	push	r16
    4c28:	1f 93       	push	r17
    4c2a:	cf 93       	push	r28
    4c2c:	df 93       	push	r29
    4c2e:	00 d0       	rcall	.+0      	; 0x4c30 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    4c30:	00 d0       	rcall	.+0      	; 0x4c32 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    4c32:	00 d0       	rcall	.+0      	; 0x4c34 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    4c34:	cd b7       	in	r28, 0x3d	; 61
    4c36:	de b7       	in	r29, 0x3e	; 62
    4c38:	3c 01       	movw	r6, r24
    4c3a:	6a 01       	movw	r12, r20
    4c3c:	3e 83       	std	Y+6, r19	; 0x06
    4c3e:	2d 83       	std	Y+5, r18	; 0x05
    4c40:	fc 82       	std	Y+4, r15	; 0x04
    4c42:	eb 82       	std	Y+3, r14	; 0x03
    4c44:	58 01       	movw	r10, r16
    4c46:	a4 1a       	sub	r10, r20
    4c48:	b5 0a       	sbc	r11, r21
    4c4a:	b7 fe       	sbrs	r11, 7
    4c4c:	03 c0       	rjmp	.+6      	; 0x4c54 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    4c4e:	b1 94       	neg	r11
    4c50:	a1 94       	neg	r10
    4c52:	b1 08       	sbc	r11, r1
    4c54:	8d 80       	ldd	r8, Y+5	; 0x05
    4c56:	9e 80       	ldd	r9, Y+6	; 0x06
    4c58:	86 1a       	sub	r8, r22
    4c5a:	97 0a       	sbc	r9, r23
    4c5c:	97 fe       	sbrs	r9, 7
    4c5e:	03 c0       	rjmp	.+6      	; 0x4c66 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    4c60:	91 94       	neg	r9
    4c62:	81 94       	neg	r8
    4c64:	91 08       	sbc	r9, r1
    4c66:	8a 14       	cp	r8, r10
    4c68:	9b 04       	cpc	r9, r11
    4c6a:	5c f0       	brlt	.+22     	; 0x4c82 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    4c6c:	90 2f       	mov	r25, r16
    4c6e:	81 2f       	mov	r24, r17
    4c70:	0d 81       	ldd	r16, Y+5	; 0x05
    4c72:	1e 81       	ldd	r17, Y+6	; 0x06
    4c74:	9d 83       	std	Y+5, r25	; 0x05
    4c76:	8e 83       	std	Y+6, r24	; 0x06
    4c78:	9c 2d       	mov	r25, r12
    4c7a:	8d 2d       	mov	r24, r13
    4c7c:	6b 01       	movw	r12, r22
    4c7e:	69 2f       	mov	r22, r25
    4c80:	78 2f       	mov	r23, r24
    4c82:	0c 15       	cp	r16, r12
    4c84:	1d 05       	cpc	r17, r13
    4c86:	5c f0       	brlt	.+22     	; 0x4c9e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    4c88:	9d 81       	ldd	r25, Y+5	; 0x05
    4c8a:	8e 81       	ldd	r24, Y+6	; 0x06
    4c8c:	7e 83       	std	Y+6, r23	; 0x06
    4c8e:	6d 83       	std	Y+5, r22	; 0x05
    4c90:	69 2f       	mov	r22, r25
    4c92:	78 2f       	mov	r23, r24
    4c94:	90 2f       	mov	r25, r16
    4c96:	81 2f       	mov	r24, r17
    4c98:	86 01       	movw	r16, r12
    4c9a:	c9 2e       	mov	r12, r25
    4c9c:	d8 2e       	mov	r13, r24
    4c9e:	16 01       	movw	r2, r12
    4ca0:	20 1a       	sub	r2, r16
    4ca2:	31 0a       	sbc	r3, r17
    4ca4:	2b 01       	movw	r4, r22
    4ca6:	2d 81       	ldd	r18, Y+5	; 0x05
    4ca8:	3e 81       	ldd	r19, Y+6	; 0x06
    4caa:	42 1a       	sub	r4, r18
    4cac:	53 0a       	sbc	r5, r19
    4cae:	57 fe       	sbrs	r5, 7
    4cb0:	03 c0       	rjmp	.+6      	; 0x4cb8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    4cb2:	51 94       	neg	r5
    4cb4:	41 94       	neg	r4
    4cb6:	51 08       	sbc	r5, r1
    4cb8:	71 01       	movw	r14, r2
    4cba:	37 fe       	sbrs	r3, 7
    4cbc:	03 c0       	rjmp	.+6      	; 0x4cc4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    4cbe:	3f ef       	ldi	r19, 0xFF	; 255
    4cc0:	e3 1a       	sub	r14, r19
    4cc2:	f3 0a       	sbc	r15, r19
    4cc4:	f5 94       	asr	r15
    4cc6:	e7 94       	ror	r14
    4cc8:	8d 81       	ldd	r24, Y+5	; 0x05
    4cca:	9e 81       	ldd	r25, Y+6	; 0x06
    4ccc:	86 17       	cp	r24, r22
    4cce:	97 07       	cpc	r25, r23
    4cd0:	5c f5       	brge	.+86     	; 0x4d28 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    4cd2:	a1 e0       	ldi	r26, 0x01	; 1
    4cd4:	b0 e0       	ldi	r27, 0x00	; 0
    4cd6:	ba 83       	std	Y+2, r27	; 0x02
    4cd8:	a9 83       	std	Y+1, r26	; 0x01
    4cda:	c0 16       	cp	r12, r16
    4cdc:	d1 06       	cpc	r13, r17
    4cde:	4c f1       	brlt	.+82     	; 0x4d32 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    4ce0:	d3 01       	movw	r26, r6
    4ce2:	ed 91       	ld	r30, X+
    4ce4:	fc 91       	ld	r31, X
    4ce6:	04 84       	ldd	r0, Z+12	; 0x0c
    4ce8:	f5 85       	ldd	r31, Z+13	; 0x0d
    4cea:	e0 2d       	mov	r30, r0
    4cec:	2b 81       	ldd	r18, Y+3	; 0x03
    4cee:	3c 81       	ldd	r19, Y+4	; 0x04
    4cf0:	a8 01       	movw	r20, r16
    4cf2:	6d 81       	ldd	r22, Y+5	; 0x05
    4cf4:	7e 81       	ldd	r23, Y+6	; 0x06
    4cf6:	8a 14       	cp	r8, r10
    4cf8:	9b 04       	cpc	r9, r11
    4cfa:	1c f0       	brlt	.+6      	; 0x4d02 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    4cfc:	4d 81       	ldd	r20, Y+5	; 0x05
    4cfe:	5e 81       	ldd	r21, Y+6	; 0x06
    4d00:	b8 01       	movw	r22, r16
    4d02:	c3 01       	movw	r24, r6
    4d04:	09 95       	icall
    4d06:	e4 18       	sub	r14, r4
    4d08:	f5 08       	sbc	r15, r5
    4d0a:	f7 fe       	sbrs	r15, 7
    4d0c:	0a c0       	rjmp	.+20     	; 0x4d22 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    4d0e:	2d 81       	ldd	r18, Y+5	; 0x05
    4d10:	3e 81       	ldd	r19, Y+6	; 0x06
    4d12:	89 81       	ldd	r24, Y+1	; 0x01
    4d14:	9a 81       	ldd	r25, Y+2	; 0x02
    4d16:	28 0f       	add	r18, r24
    4d18:	39 1f       	adc	r19, r25
    4d1a:	3e 83       	std	Y+6, r19	; 0x06
    4d1c:	2d 83       	std	Y+5, r18	; 0x05
    4d1e:	e2 0c       	add	r14, r2
    4d20:	f3 1c       	adc	r15, r3
    4d22:	0f 5f       	subi	r16, 0xFF	; 255
    4d24:	1f 4f       	sbci	r17, 0xFF	; 255
    4d26:	d9 cf       	rjmp	.-78     	; 0x4cda <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    4d28:	2f ef       	ldi	r18, 0xFF	; 255
    4d2a:	3f ef       	ldi	r19, 0xFF	; 255
    4d2c:	3a 83       	std	Y+2, r19	; 0x02
    4d2e:	29 83       	std	Y+1, r18	; 0x01
    4d30:	d4 cf       	rjmp	.-88     	; 0x4cda <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    4d32:	26 96       	adiw	r28, 0x06	; 6
    4d34:	0f b6       	in	r0, 0x3f	; 63
    4d36:	f8 94       	cli
    4d38:	de bf       	out	0x3e, r29	; 62
    4d3a:	0f be       	out	0x3f, r0	; 63
    4d3c:	cd bf       	out	0x3d, r28	; 61
    4d3e:	df 91       	pop	r29
    4d40:	cf 91       	pop	r28
    4d42:	1f 91       	pop	r17
    4d44:	0f 91       	pop	r16
    4d46:	ff 90       	pop	r15
    4d48:	ef 90       	pop	r14
    4d4a:	df 90       	pop	r13
    4d4c:	cf 90       	pop	r12
    4d4e:	bf 90       	pop	r11
    4d50:	af 90       	pop	r10
    4d52:	9f 90       	pop	r9
    4d54:	8f 90       	pop	r8
    4d56:	7f 90       	pop	r7
    4d58:	6f 90       	pop	r6
    4d5a:	5f 90       	pop	r5
    4d5c:	4f 90       	pop	r4
    4d5e:	3f 90       	pop	r3
    4d60:	2f 90       	pop	r2
    4d62:	08 95       	ret

00004d64 <Adafruit_GFX::startWrite()>:
    4d64:	08 95       	ret

00004d66 <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    4d66:	dc 01       	movw	r26, r24
    4d68:	ed 91       	ld	r30, X+
    4d6a:	fc 91       	ld	r31, X
    4d6c:	00 84       	ldd	r0, Z+8	; 0x08
    4d6e:	f1 85       	ldd	r31, Z+9	; 0x09
    4d70:	e0 2d       	mov	r30, r0
    4d72:	09 94       	ijmp

00004d74 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    4d74:	0f 93       	push	r16
    4d76:	1f 93       	push	r17
    4d78:	dc 01       	movw	r26, r24
    4d7a:	ed 91       	ld	r30, X+
    4d7c:	fc 91       	ld	r31, X
    4d7e:	04 8c       	ldd	r0, Z+28	; 0x1c
    4d80:	f5 8d       	ldd	r31, Z+29	; 0x1d
    4d82:	e0 2d       	mov	r30, r0
    4d84:	09 95       	icall
    4d86:	1f 91       	pop	r17
    4d88:	0f 91       	pop	r16
    4d8a:	08 95       	ret

00004d8c <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    4d8c:	0f 93       	push	r16
    4d8e:	1f 93       	push	r17
    4d90:	dc 01       	movw	r26, r24
    4d92:	ed 91       	ld	r30, X+
    4d94:	fc 91       	ld	r31, X
    4d96:	06 8c       	ldd	r0, Z+30	; 0x1e
    4d98:	f7 8d       	ldd	r31, Z+31	; 0x1f
    4d9a:	e0 2d       	mov	r30, r0
    4d9c:	09 95       	icall
    4d9e:	1f 91       	pop	r17
    4da0:	0f 91       	pop	r16
    4da2:	08 95       	ret

00004da4 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    4da4:	ef 92       	push	r14
    4da6:	ff 92       	push	r15
    4da8:	0f 93       	push	r16
    4daa:	1f 93       	push	r17
    4dac:	dc 01       	movw	r26, r24
    4dae:	ed 91       	ld	r30, X+
    4db0:	fc 91       	ld	r31, X
    4db2:	00 a0       	ldd	r0, Z+32	; 0x20
    4db4:	f1 a1       	ldd	r31, Z+33	; 0x21
    4db6:	e0 2d       	mov	r30, r0
    4db8:	09 95       	icall
    4dba:	1f 91       	pop	r17
    4dbc:	0f 91       	pop	r16
    4dbe:	ff 90       	pop	r15
    4dc0:	ef 90       	pop	r14
    4dc2:	08 95       	ret

00004dc4 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    4dc4:	8f 92       	push	r8
    4dc6:	9f 92       	push	r9
    4dc8:	af 92       	push	r10
    4dca:	bf 92       	push	r11
    4dcc:	cf 92       	push	r12
    4dce:	df 92       	push	r13
    4dd0:	ef 92       	push	r14
    4dd2:	ff 92       	push	r15
    4dd4:	0f 93       	push	r16
    4dd6:	1f 93       	push	r17
    4dd8:	cf 93       	push	r28
    4dda:	df 93       	push	r29
    4ddc:	ec 01       	movw	r28, r24
    4dde:	5b 01       	movw	r10, r22
    4de0:	4a 01       	movw	r8, r20
    4de2:	69 01       	movw	r12, r18
    4de4:	78 01       	movw	r14, r16
    4de6:	e8 81       	ld	r30, Y
    4de8:	f9 81       	ldd	r31, Y+1	; 0x01
    4dea:	02 84       	ldd	r0, Z+10	; 0x0a
    4dec:	f3 85       	ldd	r31, Z+11	; 0x0b
    4dee:	e0 2d       	mov	r30, r0
    4df0:	09 95       	icall
    4df2:	c8 0c       	add	r12, r8
    4df4:	d9 1c       	adc	r13, r9
    4df6:	86 01       	movw	r16, r12
    4df8:	01 50       	subi	r16, 0x01	; 1
    4dfa:	11 09       	sbc	r17, r1
    4dfc:	e8 81       	ld	r30, Y
    4dfe:	f9 81       	ldd	r31, Y+1	; 0x01
    4e00:	04 88       	ldd	r0, Z+20	; 0x14
    4e02:	f5 89       	ldd	r31, Z+21	; 0x15
    4e04:	e0 2d       	mov	r30, r0
    4e06:	95 01       	movw	r18, r10
    4e08:	a4 01       	movw	r20, r8
    4e0a:	b5 01       	movw	r22, r10
    4e0c:	ce 01       	movw	r24, r28
    4e0e:	09 95       	icall
    4e10:	e8 81       	ld	r30, Y
    4e12:	f9 81       	ldd	r31, Y+1	; 0x01
    4e14:	06 88       	ldd	r0, Z+22	; 0x16
    4e16:	f7 89       	ldd	r31, Z+23	; 0x17
    4e18:	e0 2d       	mov	r30, r0
    4e1a:	ce 01       	movw	r24, r28
    4e1c:	df 91       	pop	r29
    4e1e:	cf 91       	pop	r28
    4e20:	1f 91       	pop	r17
    4e22:	0f 91       	pop	r16
    4e24:	ff 90       	pop	r15
    4e26:	ef 90       	pop	r14
    4e28:	df 90       	pop	r13
    4e2a:	cf 90       	pop	r12
    4e2c:	bf 90       	pop	r11
    4e2e:	af 90       	pop	r10
    4e30:	9f 90       	pop	r9
    4e32:	8f 90       	pop	r8
    4e34:	09 94       	ijmp

00004e36 <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    4e36:	8f 92       	push	r8
    4e38:	9f 92       	push	r9
    4e3a:	af 92       	push	r10
    4e3c:	bf 92       	push	r11
    4e3e:	cf 92       	push	r12
    4e40:	df 92       	push	r13
    4e42:	ef 92       	push	r14
    4e44:	ff 92       	push	r15
    4e46:	0f 93       	push	r16
    4e48:	1f 93       	push	r17
    4e4a:	cf 93       	push	r28
    4e4c:	df 93       	push	r29
    4e4e:	ec 01       	movw	r28, r24
    4e50:	5b 01       	movw	r10, r22
    4e52:	4a 01       	movw	r8, r20
    4e54:	69 01       	movw	r12, r18
    4e56:	e8 81       	ld	r30, Y
    4e58:	f9 81       	ldd	r31, Y+1	; 0x01
    4e5a:	02 84       	ldd	r0, Z+10	; 0x0a
    4e5c:	f3 85       	ldd	r31, Z+11	; 0x0b
    4e5e:	e0 2d       	mov	r30, r0
    4e60:	09 95       	icall
    4e62:	95 01       	movw	r18, r10
    4e64:	2c 0d       	add	r18, r12
    4e66:	3d 1d       	adc	r19, r13
    4e68:	21 50       	subi	r18, 0x01	; 1
    4e6a:	31 09       	sbc	r19, r1
    4e6c:	e8 81       	ld	r30, Y
    4e6e:	f9 81       	ldd	r31, Y+1	; 0x01
    4e70:	04 88       	ldd	r0, Z+20	; 0x14
    4e72:	f5 89       	ldd	r31, Z+21	; 0x15
    4e74:	e0 2d       	mov	r30, r0
    4e76:	78 01       	movw	r14, r16
    4e78:	84 01       	movw	r16, r8
    4e7a:	a4 01       	movw	r20, r8
    4e7c:	b5 01       	movw	r22, r10
    4e7e:	ce 01       	movw	r24, r28
    4e80:	09 95       	icall
    4e82:	e8 81       	ld	r30, Y
    4e84:	f9 81       	ldd	r31, Y+1	; 0x01
    4e86:	06 88       	ldd	r0, Z+22	; 0x16
    4e88:	f7 89       	ldd	r31, Z+23	; 0x17
    4e8a:	e0 2d       	mov	r30, r0
    4e8c:	ce 01       	movw	r24, r28
    4e8e:	df 91       	pop	r29
    4e90:	cf 91       	pop	r28
    4e92:	1f 91       	pop	r17
    4e94:	0f 91       	pop	r16
    4e96:	ff 90       	pop	r15
    4e98:	ef 90       	pop	r14
    4e9a:	df 90       	pop	r13
    4e9c:	cf 90       	pop	r12
    4e9e:	bf 90       	pop	r11
    4ea0:	af 90       	pop	r10
    4ea2:	9f 90       	pop	r9
    4ea4:	8f 90       	pop	r8
    4ea6:	09 94       	ijmp

00004ea8 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    4ea8:	4f 92       	push	r4
    4eaa:	5f 92       	push	r5
    4eac:	6f 92       	push	r6
    4eae:	7f 92       	push	r7
    4eb0:	8f 92       	push	r8
    4eb2:	9f 92       	push	r9
    4eb4:	af 92       	push	r10
    4eb6:	bf 92       	push	r11
    4eb8:	cf 92       	push	r12
    4eba:	df 92       	push	r13
    4ebc:	ef 92       	push	r14
    4ebe:	ff 92       	push	r15
    4ec0:	0f 93       	push	r16
    4ec2:	1f 93       	push	r17
    4ec4:	cf 93       	push	r28
    4ec6:	df 93       	push	r29
    4ec8:	6c 01       	movw	r12, r24
    4eca:	2b 01       	movw	r4, r22
    4ecc:	5a 01       	movw	r10, r20
    4ece:	39 01       	movw	r6, r18
    4ed0:	48 01       	movw	r8, r16
    4ed2:	dc 01       	movw	r26, r24
    4ed4:	ed 91       	ld	r30, X+
    4ed6:	fc 91       	ld	r31, X
    4ed8:	02 84       	ldd	r0, Z+10	; 0x0a
    4eda:	f3 85       	ldd	r31, Z+11	; 0x0b
    4edc:	e0 2d       	mov	r30, r0
    4ede:	09 95       	icall
    4ee0:	e2 01       	movw	r28, r4
    4ee2:	64 0c       	add	r6, r4
    4ee4:	75 1c       	adc	r7, r5
    4ee6:	d6 01       	movw	r26, r12
    4ee8:	ed 91       	ld	r30, X+
    4eea:	fc 91       	ld	r31, X
    4eec:	c6 15       	cp	r28, r6
    4eee:	d7 05       	cpc	r29, r7
    4ef0:	5c f4       	brge	.+22     	; 0x4f08 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    4ef2:	00 88       	ldd	r0, Z+16	; 0x10
    4ef4:	f1 89       	ldd	r31, Z+17	; 0x11
    4ef6:	e0 2d       	mov	r30, r0
    4ef8:	87 01       	movw	r16, r14
    4efa:	94 01       	movw	r18, r8
    4efc:	a5 01       	movw	r20, r10
    4efe:	be 01       	movw	r22, r28
    4f00:	c6 01       	movw	r24, r12
    4f02:	09 95       	icall
    4f04:	21 96       	adiw	r28, 0x01	; 1
    4f06:	ef cf       	rjmp	.-34     	; 0x4ee6 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    4f08:	06 88       	ldd	r0, Z+22	; 0x16
    4f0a:	f7 89       	ldd	r31, Z+23	; 0x17
    4f0c:	e0 2d       	mov	r30, r0
    4f0e:	c6 01       	movw	r24, r12
    4f10:	df 91       	pop	r29
    4f12:	cf 91       	pop	r28
    4f14:	1f 91       	pop	r17
    4f16:	0f 91       	pop	r16
    4f18:	ff 90       	pop	r15
    4f1a:	ef 90       	pop	r14
    4f1c:	df 90       	pop	r13
    4f1e:	cf 90       	pop	r12
    4f20:	bf 90       	pop	r11
    4f22:	af 90       	pop	r10
    4f24:	9f 90       	pop	r9
    4f26:	8f 90       	pop	r8
    4f28:	7f 90       	pop	r7
    4f2a:	6f 90       	pop	r6
    4f2c:	5f 90       	pop	r5
    4f2e:	4f 90       	pop	r4
    4f30:	09 94       	ijmp

00004f32 <Adafruit_GFX::fillScreen(unsigned int)>:
    4f32:	ef 92       	push	r14
    4f34:	ff 92       	push	r15
    4f36:	0f 93       	push	r16
    4f38:	1f 93       	push	r17
    4f3a:	dc 01       	movw	r26, r24
    4f3c:	19 96       	adiw	r26, 0x09	; 9
    4f3e:	0d 91       	ld	r16, X+
    4f40:	1c 91       	ld	r17, X
    4f42:	1a 97       	sbiw	r26, 0x0a	; 10
    4f44:	17 96       	adiw	r26, 0x07	; 7
    4f46:	2d 91       	ld	r18, X+
    4f48:	3c 91       	ld	r19, X
    4f4a:	18 97       	sbiw	r26, 0x08	; 8
    4f4c:	ed 91       	ld	r30, X+
    4f4e:	fc 91       	ld	r31, X
    4f50:	00 a0       	ldd	r0, Z+32	; 0x20
    4f52:	f1 a1       	ldd	r31, Z+33	; 0x21
    4f54:	e0 2d       	mov	r30, r0
    4f56:	7b 01       	movw	r14, r22
    4f58:	50 e0       	ldi	r21, 0x00	; 0
    4f5a:	40 e0       	ldi	r20, 0x00	; 0
    4f5c:	70 e0       	ldi	r23, 0x00	; 0
    4f5e:	60 e0       	ldi	r22, 0x00	; 0
    4f60:	09 95       	icall
    4f62:	1f 91       	pop	r17
    4f64:	0f 91       	pop	r16
    4f66:	ff 90       	pop	r15
    4f68:	ef 90       	pop	r14
    4f6a:	08 95       	ret

00004f6c <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    4f6c:	6f 92       	push	r6
    4f6e:	7f 92       	push	r7
    4f70:	8f 92       	push	r8
    4f72:	9f 92       	push	r9
    4f74:	af 92       	push	r10
    4f76:	bf 92       	push	r11
    4f78:	cf 92       	push	r12
    4f7a:	df 92       	push	r13
    4f7c:	ef 92       	push	r14
    4f7e:	ff 92       	push	r15
    4f80:	0f 93       	push	r16
    4f82:	1f 93       	push	r17
    4f84:	cf 93       	push	r28
    4f86:	df 93       	push	r29
    4f88:	ec 01       	movw	r28, r24
    4f8a:	6b 01       	movw	r12, r22
    4f8c:	5a 01       	movw	r10, r20
    4f8e:	39 01       	movw	r6, r18
    4f90:	48 01       	movw	r8, r16
    4f92:	e8 81       	ld	r30, Y
    4f94:	f9 81       	ldd	r31, Y+1	; 0x01
    4f96:	02 84       	ldd	r0, Z+10	; 0x0a
    4f98:	f3 85       	ldd	r31, Z+11	; 0x0b
    4f9a:	e0 2d       	mov	r30, r0
    4f9c:	09 95       	icall
    4f9e:	e8 81       	ld	r30, Y
    4fa0:	f9 81       	ldd	r31, Y+1	; 0x01
    4fa2:	02 88       	ldd	r0, Z+18	; 0x12
    4fa4:	f3 89       	ldd	r31, Z+19	; 0x13
    4fa6:	e0 2d       	mov	r30, r0
    4fa8:	87 01       	movw	r16, r14
    4faa:	93 01       	movw	r18, r6
    4fac:	a5 01       	movw	r20, r10
    4fae:	b6 01       	movw	r22, r12
    4fb0:	ce 01       	movw	r24, r28
    4fb2:	09 95       	icall
    4fb4:	a5 01       	movw	r20, r10
    4fb6:	48 0d       	add	r20, r8
    4fb8:	59 1d       	adc	r21, r9
    4fba:	41 50       	subi	r20, 0x01	; 1
    4fbc:	51 09       	sbc	r21, r1
    4fbe:	e8 81       	ld	r30, Y
    4fc0:	f9 81       	ldd	r31, Y+1	; 0x01
    4fc2:	02 88       	ldd	r0, Z+18	; 0x12
    4fc4:	f3 89       	ldd	r31, Z+19	; 0x13
    4fc6:	e0 2d       	mov	r30, r0
    4fc8:	93 01       	movw	r18, r6
    4fca:	b6 01       	movw	r22, r12
    4fcc:	ce 01       	movw	r24, r28
    4fce:	09 95       	icall
    4fd0:	e8 81       	ld	r30, Y
    4fd2:	f9 81       	ldd	r31, Y+1	; 0x01
    4fd4:	00 88       	ldd	r0, Z+16	; 0x10
    4fd6:	f1 89       	ldd	r31, Z+17	; 0x11
    4fd8:	e0 2d       	mov	r30, r0
    4fda:	94 01       	movw	r18, r8
    4fdc:	a5 01       	movw	r20, r10
    4fde:	b6 01       	movw	r22, r12
    4fe0:	ce 01       	movw	r24, r28
    4fe2:	09 95       	icall
    4fe4:	c6 0c       	add	r12, r6
    4fe6:	d7 1c       	adc	r13, r7
    4fe8:	b6 01       	movw	r22, r12
    4fea:	61 50       	subi	r22, 0x01	; 1
    4fec:	71 09       	sbc	r23, r1
    4fee:	e8 81       	ld	r30, Y
    4ff0:	f9 81       	ldd	r31, Y+1	; 0x01
    4ff2:	00 88       	ldd	r0, Z+16	; 0x10
    4ff4:	f1 89       	ldd	r31, Z+17	; 0x11
    4ff6:	e0 2d       	mov	r30, r0
    4ff8:	94 01       	movw	r18, r8
    4ffa:	a5 01       	movw	r20, r10
    4ffc:	ce 01       	movw	r24, r28
    4ffe:	09 95       	icall
    5000:	e8 81       	ld	r30, Y
    5002:	f9 81       	ldd	r31, Y+1	; 0x01
    5004:	06 88       	ldd	r0, Z+22	; 0x16
    5006:	f7 89       	ldd	r31, Z+23	; 0x17
    5008:	e0 2d       	mov	r30, r0
    500a:	ce 01       	movw	r24, r28
    500c:	df 91       	pop	r29
    500e:	cf 91       	pop	r28
    5010:	1f 91       	pop	r17
    5012:	0f 91       	pop	r16
    5014:	ff 90       	pop	r15
    5016:	ef 90       	pop	r14
    5018:	df 90       	pop	r13
    501a:	cf 90       	pop	r12
    501c:	bf 90       	pop	r11
    501e:	af 90       	pop	r10
    5020:	9f 90       	pop	r9
    5022:	8f 90       	pop	r8
    5024:	7f 90       	pop	r7
    5026:	6f 90       	pop	r6
    5028:	09 94       	ijmp

0000502a <Adafruit_GFX::invertDisplay(bool)>:
    502a:	08 95       	ret

0000502c <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    502c:	6f 92       	push	r6
    502e:	7f 92       	push	r7
    5030:	8f 92       	push	r8
    5032:	9f 92       	push	r9
    5034:	af 92       	push	r10
    5036:	bf 92       	push	r11
    5038:	cf 92       	push	r12
    503a:	df 92       	push	r13
    503c:	ef 92       	push	r14
    503e:	ff 92       	push	r15
    5040:	0f 93       	push	r16
    5042:	1f 93       	push	r17
    5044:	cf 93       	push	r28
    5046:	df 93       	push	r29
    5048:	5c 01       	movw	r10, r24
    504a:	eb 01       	movw	r28, r22
    504c:	6a 01       	movw	r12, r20
    504e:	49 01       	movw	r8, r18
    5050:	38 01       	movw	r6, r16
    5052:	87 01       	movw	r16, r14
    5054:	dc 01       	movw	r26, r24
    5056:	ed 91       	ld	r30, X+
    5058:	fc 91       	ld	r31, X
    505a:	62 17       	cp	r22, r18
    505c:	73 07       	cpc	r23, r19
    505e:	19 f5       	brne	.+70     	; 0x50a6 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    5060:	64 16       	cp	r6, r20
    5062:	75 06       	cpc	r7, r21
    5064:	2c f0       	brlt	.+10     	; 0x5070 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    5066:	96 2d       	mov	r25, r6
    5068:	87 2d       	mov	r24, r7
    506a:	3a 01       	movw	r6, r20
    506c:	c9 2e       	mov	r12, r25
    506e:	d8 2e       	mov	r13, r24
    5070:	96 01       	movw	r18, r12
    5072:	26 19       	sub	r18, r6
    5074:	37 09       	sbc	r19, r7
    5076:	2f 5f       	subi	r18, 0xFF	; 255
    5078:	3f 4f       	sbci	r19, 0xFF	; 255
    507a:	04 8c       	ldd	r0, Z+28	; 0x1c
    507c:	f5 8d       	ldd	r31, Z+29	; 0x1d
    507e:	e0 2d       	mov	r30, r0
    5080:	a3 01       	movw	r20, r6
    5082:	be 01       	movw	r22, r28
    5084:	c5 01       	movw	r24, r10
    5086:	09 95       	icall
    5088:	df 91       	pop	r29
    508a:	cf 91       	pop	r28
    508c:	1f 91       	pop	r17
    508e:	0f 91       	pop	r16
    5090:	ff 90       	pop	r15
    5092:	ef 90       	pop	r14
    5094:	df 90       	pop	r13
    5096:	cf 90       	pop	r12
    5098:	bf 90       	pop	r11
    509a:	af 90       	pop	r10
    509c:	9f 90       	pop	r9
    509e:	8f 90       	pop	r8
    50a0:	7f 90       	pop	r7
    50a2:	6f 90       	pop	r6
    50a4:	08 95       	ret
    50a6:	46 15       	cp	r20, r6
    50a8:	57 05       	cpc	r21, r7
    50aa:	91 f4       	brne	.+36     	; 0x50d0 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    50ac:	26 17       	cp	r18, r22
    50ae:	37 07       	cpc	r19, r23
    50b0:	24 f0       	brlt	.+8      	; 0x50ba <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    50b2:	89 2d       	mov	r24, r9
    50b4:	4b 01       	movw	r8, r22
    50b6:	c2 2f       	mov	r28, r18
    50b8:	d8 2f       	mov	r29, r24
    50ba:	9e 01       	movw	r18, r28
    50bc:	28 19       	sub	r18, r8
    50be:	39 09       	sbc	r19, r9
    50c0:	2f 5f       	subi	r18, 0xFF	; 255
    50c2:	3f 4f       	sbci	r19, 0xFF	; 255
    50c4:	06 8c       	ldd	r0, Z+30	; 0x1e
    50c6:	f7 8d       	ldd	r31, Z+31	; 0x1f
    50c8:	e0 2d       	mov	r30, r0
    50ca:	a6 01       	movw	r20, r12
    50cc:	b4 01       	movw	r22, r8
    50ce:	da cf       	rjmp	.-76     	; 0x5084 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    50d0:	02 84       	ldd	r0, Z+10	; 0x0a
    50d2:	f3 85       	ldd	r31, Z+11	; 0x0b
    50d4:	e0 2d       	mov	r30, r0
    50d6:	09 95       	icall
    50d8:	d5 01       	movw	r26, r10
    50da:	ed 91       	ld	r30, X+
    50dc:	fc 91       	ld	r31, X
    50de:	04 88       	ldd	r0, Z+20	; 0x14
    50e0:	f5 89       	ldd	r31, Z+21	; 0x15
    50e2:	e0 2d       	mov	r30, r0
    50e4:	83 01       	movw	r16, r6
    50e6:	94 01       	movw	r18, r8
    50e8:	a6 01       	movw	r20, r12
    50ea:	be 01       	movw	r22, r28
    50ec:	c5 01       	movw	r24, r10
    50ee:	09 95       	icall
    50f0:	d5 01       	movw	r26, r10
    50f2:	ed 91       	ld	r30, X+
    50f4:	fc 91       	ld	r31, X
    50f6:	06 88       	ldd	r0, Z+22	; 0x16
    50f8:	f7 89       	ldd	r31, Z+23	; 0x17
    50fa:	e0 2d       	mov	r30, r0
    50fc:	c5 01       	movw	r24, r10
    50fe:	df 91       	pop	r29
    5100:	cf 91       	pop	r28
    5102:	1f 91       	pop	r17
    5104:	0f 91       	pop	r16
    5106:	ff 90       	pop	r15
    5108:	ef 90       	pop	r14
    510a:	df 90       	pop	r13
    510c:	cf 90       	pop	r12
    510e:	bf 90       	pop	r11
    5110:	af 90       	pop	r10
    5112:	9f 90       	pop	r9
    5114:	8f 90       	pop	r8
    5116:	7f 90       	pop	r7
    5118:	6f 90       	pop	r6
    511a:	09 94       	ijmp

0000511c <Adafruit_GFX::setRotation(unsigned char)>:
    511c:	fc 01       	movw	r30, r24
    511e:	63 70       	andi	r22, 0x03	; 3
    5120:	65 8b       	std	Z+21, r22	; 0x15
    5122:	83 81       	ldd	r24, Z+3	; 0x03
    5124:	94 81       	ldd	r25, Z+4	; 0x04
    5126:	25 81       	ldd	r18, Z+5	; 0x05
    5128:	36 81       	ldd	r19, Z+6	; 0x06
    512a:	61 30       	cpi	r22, 0x01	; 1
    512c:	39 f0       	breq	.+14     	; 0x513c <Adafruit_GFX::setRotation(unsigned char)+0x20>
    512e:	63 30       	cpi	r22, 0x03	; 3
    5130:	29 f0       	breq	.+10     	; 0x513c <Adafruit_GFX::setRotation(unsigned char)+0x20>
    5132:	90 87       	std	Z+8, r25	; 0x08
    5134:	87 83       	std	Z+7, r24	; 0x07
    5136:	32 87       	std	Z+10, r19	; 0x0a
    5138:	21 87       	std	Z+9, r18	; 0x09
    513a:	08 95       	ret
    513c:	30 87       	std	Z+8, r19	; 0x08
    513e:	27 83       	std	Z+7, r18	; 0x07
    5140:	92 87       	std	Z+10, r25	; 0x0a
    5142:	81 87       	std	Z+9, r24	; 0x09
    5144:	08 95       	ret

00005146 <Adafruit_GFX::Adafruit_GFX(int, int)>:
    5146:	fc 01       	movw	r30, r24
    5148:	12 82       	std	Z+2, r1	; 0x02
    514a:	8a e4       	ldi	r24, 0x4A	; 74
    514c:	98 e0       	ldi	r25, 0x08	; 8
    514e:	91 83       	std	Z+1, r25	; 0x01
    5150:	80 83       	st	Z, r24
    5152:	74 83       	std	Z+4, r23	; 0x04
    5154:	63 83       	std	Z+3, r22	; 0x03
    5156:	56 83       	std	Z+6, r21	; 0x06
    5158:	45 83       	std	Z+5, r20	; 0x05
    515a:	70 87       	std	Z+8, r23	; 0x08
    515c:	67 83       	std	Z+7, r22	; 0x07
    515e:	52 87       	std	Z+10, r21	; 0x0a
    5160:	41 87       	std	Z+9, r20	; 0x09
    5162:	15 8a       	std	Z+21, r1	; 0x15
    5164:	14 86       	std	Z+12, r1	; 0x0c
    5166:	13 86       	std	Z+11, r1	; 0x0b
    5168:	16 86       	std	Z+14, r1	; 0x0e
    516a:	15 86       	std	Z+13, r1	; 0x0d
    516c:	81 e0       	ldi	r24, 0x01	; 1
    516e:	84 8b       	std	Z+20, r24	; 0x14
    5170:	83 8b       	std	Z+19, r24	; 0x13
    5172:	2f ef       	ldi	r18, 0xFF	; 255
    5174:	3f ef       	ldi	r19, 0xFF	; 255
    5176:	32 8b       	std	Z+18, r19	; 0x12
    5178:	21 8b       	std	Z+17, r18	; 0x11
    517a:	30 8b       	std	Z+16, r19	; 0x10
    517c:	27 87       	std	Z+15, r18	; 0x0f
    517e:	86 8b       	std	Z+22, r24	; 0x16
    5180:	17 8a       	std	Z+23, r1	; 0x17
    5182:	11 8e       	std	Z+25, r1	; 0x19
    5184:	10 8e       	std	Z+24, r1	; 0x18
    5186:	08 95       	ret

00005188 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    5188:	2f 92       	push	r2
    518a:	3f 92       	push	r3
    518c:	4f 92       	push	r4
    518e:	5f 92       	push	r5
    5190:	6f 92       	push	r6
    5192:	7f 92       	push	r7
    5194:	8f 92       	push	r8
    5196:	9f 92       	push	r9
    5198:	af 92       	push	r10
    519a:	bf 92       	push	r11
    519c:	cf 92       	push	r12
    519e:	df 92       	push	r13
    51a0:	ef 92       	push	r14
    51a2:	ff 92       	push	r15
    51a4:	0f 93       	push	r16
    51a6:	1f 93       	push	r17
    51a8:	cf 93       	push	r28
    51aa:	df 93       	push	r29
    51ac:	cd b7       	in	r28, 0x3d	; 61
    51ae:	de b7       	in	r29, 0x3e	; 62
    51b0:	2e 97       	sbiw	r28, 0x0e	; 14
    51b2:	0f b6       	in	r0, 0x3f	; 63
    51b4:	f8 94       	cli
    51b6:	de bf       	out	0x3e, r29	; 62
    51b8:	0f be       	out	0x3f, r0	; 63
    51ba:	cd bf       	out	0x3d, r28	; 61
    51bc:	5c 01       	movw	r10, r24
    51be:	2b 01       	movw	r4, r22
    51c0:	5c 83       	std	Y+4, r21	; 0x04
    51c2:	4b 83       	std	Y+3, r20	; 0x03
    51c4:	3e 87       	std	Y+14, r19	; 0x0e
    51c6:	2d 87       	std	Y+13, r18	; 0x0d
    51c8:	fe 82       	std	Y+6, r15	; 0x06
    51ca:	ed 82       	std	Y+5, r14	; 0x05
    51cc:	16 01       	movw	r2, r12
    51ce:	81 e0       	ldi	r24, 0x01	; 1
    51d0:	90 e0       	ldi	r25, 0x00	; 0
    51d2:	4c 01       	movw	r8, r24
    51d4:	82 1a       	sub	r8, r18
    51d6:	93 0a       	sbc	r9, r19
    51d8:	c9 01       	movw	r24, r18
    51da:	91 95       	neg	r25
    51dc:	81 95       	neg	r24
    51de:	91 09       	sbc	r25, r1
    51e0:	9c 01       	movw	r18, r24
    51e2:	22 0f       	add	r18, r18
    51e4:	33 1f       	adc	r19, r19
    51e6:	3a 83       	std	Y+2, r19	; 0x02
    51e8:	29 83       	std	Y+1, r18	; 0x01
    51ea:	c7 01       	movw	r24, r14
    51ec:	01 96       	adiw	r24, 0x01	; 1
    51ee:	98 87       	std	Y+8, r25	; 0x08
    51f0:	8f 83       	std	Y+7, r24	; 0x07
    51f2:	f1 2c       	mov	r15, r1
    51f4:	e1 2c       	mov	r14, r1
    51f6:	66 24       	eor	r6, r6
    51f8:	63 94       	inc	r6
    51fa:	71 2c       	mov	r7, r1
    51fc:	90 2f       	mov	r25, r16
    51fe:	91 70       	andi	r25, 0x01	; 1
    5200:	99 87       	std	Y+9, r25	; 0x09
    5202:	02 70       	andi	r16, 0x02	; 2
    5204:	0a 87       	std	Y+10, r16	; 0x0a
    5206:	da 01       	movw	r26, r20
    5208:	11 96       	adiw	r26, 0x01	; 1
    520a:	bc 87       	std	Y+12, r27	; 0x0c
    520c:	ab 87       	std	Y+11, r26	; 0x0b
    520e:	2d 85       	ldd	r18, Y+13	; 0x0d
    5210:	3e 85       	ldd	r19, Y+14	; 0x0e
    5212:	e2 16       	cp	r14, r18
    5214:	f3 06       	cpc	r15, r19
    5216:	0c f0       	brlt	.+2      	; 0x521a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    5218:	8d c0       	rjmp	.+282    	; 0x5334 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    521a:	cd 84       	ldd	r12, Y+13	; 0x0d
    521c:	de 84       	ldd	r13, Y+14	; 0x0e
    521e:	97 fc       	sbrc	r9, 7
    5220:	0b c0       	rjmp	.+22     	; 0x5238 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    5222:	69 01       	movw	r12, r18
    5224:	31 e0       	ldi	r19, 0x01	; 1
    5226:	c3 1a       	sub	r12, r19
    5228:	d1 08       	sbc	r13, r1
    522a:	89 81       	ldd	r24, Y+1	; 0x01
    522c:	9a 81       	ldd	r25, Y+2	; 0x02
    522e:	02 96       	adiw	r24, 0x02	; 2
    5230:	9a 83       	std	Y+2, r25	; 0x02
    5232:	89 83       	std	Y+1, r24	; 0x01
    5234:	88 0e       	add	r8, r24
    5236:	99 1e       	adc	r9, r25
    5238:	9f ef       	ldi	r25, 0xFF	; 255
    523a:	e9 1a       	sub	r14, r25
    523c:	f9 0a       	sbc	r15, r25
    523e:	a2 e0       	ldi	r26, 0x02	; 2
    5240:	6a 0e       	add	r6, r26
    5242:	71 1c       	adc	r7, r1
    5244:	86 0c       	add	r8, r6
    5246:	97 1c       	adc	r9, r7
    5248:	ce 14       	cp	r12, r14
    524a:	df 04       	cpc	r13, r15
    524c:	a4 f1       	brlt	.+104    	; 0x52b6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    524e:	b9 85       	ldd	r27, Y+9	; 0x09
    5250:	bb 23       	and	r27, r27
    5252:	b9 f0       	breq	.+46     	; 0x5282 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    5254:	96 01       	movw	r18, r12
    5256:	22 0f       	add	r18, r18
    5258:	33 1f       	adc	r19, r19
    525a:	8f 81       	ldd	r24, Y+7	; 0x07
    525c:	98 85       	ldd	r25, Y+8	; 0x08
    525e:	28 0f       	add	r18, r24
    5260:	39 1f       	adc	r19, r25
    5262:	d5 01       	movw	r26, r10
    5264:	ed 91       	ld	r30, X+
    5266:	fc 91       	ld	r31, X
    5268:	00 88       	ldd	r0, Z+16	; 0x10
    526a:	f1 89       	ldd	r31, Z+17	; 0x11
    526c:	e0 2d       	mov	r30, r0
    526e:	81 01       	movw	r16, r2
    5270:	4b 81       	ldd	r20, Y+3	; 0x03
    5272:	5c 81       	ldd	r21, Y+4	; 0x04
    5274:	4c 19       	sub	r20, r12
    5276:	5d 09       	sbc	r21, r13
    5278:	b2 01       	movw	r22, r4
    527a:	6e 0d       	add	r22, r14
    527c:	7f 1d       	adc	r23, r15
    527e:	c5 01       	movw	r24, r10
    5280:	09 95       	icall
    5282:	ba 85       	ldd	r27, Y+10	; 0x0a
    5284:	bb 23       	and	r27, r27
    5286:	b9 f0       	breq	.+46     	; 0x52b6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    5288:	96 01       	movw	r18, r12
    528a:	22 0f       	add	r18, r18
    528c:	33 1f       	adc	r19, r19
    528e:	8f 81       	ldd	r24, Y+7	; 0x07
    5290:	98 85       	ldd	r25, Y+8	; 0x08
    5292:	28 0f       	add	r18, r24
    5294:	39 1f       	adc	r19, r25
    5296:	d5 01       	movw	r26, r10
    5298:	ed 91       	ld	r30, X+
    529a:	fc 91       	ld	r31, X
    529c:	00 88       	ldd	r0, Z+16	; 0x10
    529e:	f1 89       	ldd	r31, Z+17	; 0x11
    52a0:	e0 2d       	mov	r30, r0
    52a2:	81 01       	movw	r16, r2
    52a4:	4b 81       	ldd	r20, Y+3	; 0x03
    52a6:	5c 81       	ldd	r21, Y+4	; 0x04
    52a8:	4c 19       	sub	r20, r12
    52aa:	5d 09       	sbc	r21, r13
    52ac:	b2 01       	movw	r22, r4
    52ae:	6e 19       	sub	r22, r14
    52b0:	7f 09       	sbc	r23, r15
    52b2:	c5 01       	movw	r24, r10
    52b4:	09 95       	icall
    52b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    52b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    52ba:	2c 15       	cp	r18, r12
    52bc:	3d 05       	cpc	r19, r13
    52be:	b9 f1       	breq	.+110    	; 0x532e <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    52c0:	39 85       	ldd	r19, Y+9	; 0x09
    52c2:	33 23       	and	r19, r19
    52c4:	c1 f0       	breq	.+48     	; 0x52f6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    52c6:	93 01       	movw	r18, r6
    52c8:	22 50       	subi	r18, 0x02	; 2
    52ca:	31 09       	sbc	r19, r1
    52cc:	8d 81       	ldd	r24, Y+5	; 0x05
    52ce:	9e 81       	ldd	r25, Y+6	; 0x06
    52d0:	28 0f       	add	r18, r24
    52d2:	39 1f       	adc	r19, r25
    52d4:	d5 01       	movw	r26, r10
    52d6:	ed 91       	ld	r30, X+
    52d8:	fc 91       	ld	r31, X
    52da:	00 88       	ldd	r0, Z+16	; 0x10
    52dc:	f1 89       	ldd	r31, Z+17	; 0x11
    52de:	e0 2d       	mov	r30, r0
    52e0:	81 01       	movw	r16, r2
    52e2:	4b 85       	ldd	r20, Y+11	; 0x0b
    52e4:	5c 85       	ldd	r21, Y+12	; 0x0c
    52e6:	4e 19       	sub	r20, r14
    52e8:	5f 09       	sbc	r21, r15
    52ea:	6d 85       	ldd	r22, Y+13	; 0x0d
    52ec:	7e 85       	ldd	r23, Y+14	; 0x0e
    52ee:	64 0d       	add	r22, r4
    52f0:	75 1d       	adc	r23, r5
    52f2:	c5 01       	movw	r24, r10
    52f4:	09 95       	icall
    52f6:	ba 85       	ldd	r27, Y+10	; 0x0a
    52f8:	bb 23       	and	r27, r27
    52fa:	c9 f0       	breq	.+50     	; 0x532e <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    52fc:	93 01       	movw	r18, r6
    52fe:	22 50       	subi	r18, 0x02	; 2
    5300:	31 09       	sbc	r19, r1
    5302:	8d 81       	ldd	r24, Y+5	; 0x05
    5304:	9e 81       	ldd	r25, Y+6	; 0x06
    5306:	28 0f       	add	r18, r24
    5308:	39 1f       	adc	r19, r25
    530a:	b2 01       	movw	r22, r4
    530c:	ad 85       	ldd	r26, Y+13	; 0x0d
    530e:	be 85       	ldd	r27, Y+14	; 0x0e
    5310:	6a 1b       	sub	r22, r26
    5312:	7b 0b       	sbc	r23, r27
    5314:	d5 01       	movw	r26, r10
    5316:	ed 91       	ld	r30, X+
    5318:	fc 91       	ld	r31, X
    531a:	00 88       	ldd	r0, Z+16	; 0x10
    531c:	f1 89       	ldd	r31, Z+17	; 0x11
    531e:	e0 2d       	mov	r30, r0
    5320:	81 01       	movw	r16, r2
    5322:	4b 85       	ldd	r20, Y+11	; 0x0b
    5324:	5c 85       	ldd	r21, Y+12	; 0x0c
    5326:	4e 19       	sub	r20, r14
    5328:	5f 09       	sbc	r21, r15
    532a:	c5 01       	movw	r24, r10
    532c:	09 95       	icall
    532e:	de 86       	std	Y+14, r13	; 0x0e
    5330:	cd 86       	std	Y+13, r12	; 0x0d
    5332:	6d cf       	rjmp	.-294    	; 0x520e <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    5334:	2e 96       	adiw	r28, 0x0e	; 14
    5336:	0f b6       	in	r0, 0x3f	; 63
    5338:	f8 94       	cli
    533a:	de bf       	out	0x3e, r29	; 62
    533c:	0f be       	out	0x3f, r0	; 63
    533e:	cd bf       	out	0x3d, r28	; 61
    5340:	df 91       	pop	r29
    5342:	cf 91       	pop	r28
    5344:	1f 91       	pop	r17
    5346:	0f 91       	pop	r16
    5348:	ff 90       	pop	r15
    534a:	ef 90       	pop	r14
    534c:	df 90       	pop	r13
    534e:	cf 90       	pop	r12
    5350:	bf 90       	pop	r11
    5352:	af 90       	pop	r10
    5354:	9f 90       	pop	r9
    5356:	8f 90       	pop	r8
    5358:	7f 90       	pop	r7
    535a:	6f 90       	pop	r6
    535c:	5f 90       	pop	r5
    535e:	4f 90       	pop	r4
    5360:	3f 90       	pop	r3
    5362:	2f 90       	pop	r2
    5364:	08 95       	ret

00005366 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    5366:	6f 92       	push	r6
    5368:	7f 92       	push	r7
    536a:	8f 92       	push	r8
    536c:	9f 92       	push	r9
    536e:	af 92       	push	r10
    5370:	bf 92       	push	r11
    5372:	cf 92       	push	r12
    5374:	df 92       	push	r13
    5376:	ef 92       	push	r14
    5378:	ff 92       	push	r15
    537a:	0f 93       	push	r16
    537c:	1f 93       	push	r17
    537e:	cf 93       	push	r28
    5380:	df 93       	push	r29
    5382:	ec 01       	movw	r28, r24
    5384:	4b 01       	movw	r8, r22
    5386:	3a 01       	movw	r6, r20
    5388:	59 01       	movw	r10, r18
    538a:	68 01       	movw	r12, r16
    538c:	e8 81       	ld	r30, Y
    538e:	f9 81       	ldd	r31, Y+1	; 0x01
    5390:	02 84       	ldd	r0, Z+10	; 0x0a
    5392:	f3 85       	ldd	r31, Z+11	; 0x0b
    5394:	e0 2d       	mov	r30, r0
    5396:	09 95       	icall
    5398:	95 01       	movw	r18, r10
    539a:	22 0f       	add	r18, r18
    539c:	33 1f       	adc	r19, r19
    539e:	2f 5f       	subi	r18, 0xFF	; 255
    53a0:	3f 4f       	sbci	r19, 0xFF	; 255
    53a2:	a3 01       	movw	r20, r6
    53a4:	4a 19       	sub	r20, r10
    53a6:	5b 09       	sbc	r21, r11
    53a8:	e8 81       	ld	r30, Y
    53aa:	f9 81       	ldd	r31, Y+1	; 0x01
    53ac:	00 88       	ldd	r0, Z+16	; 0x10
    53ae:	f1 89       	ldd	r31, Z+17	; 0x11
    53b0:	e0 2d       	mov	r30, r0
    53b2:	b4 01       	movw	r22, r8
    53b4:	ce 01       	movw	r24, r28
    53b6:	09 95       	icall
    53b8:	f1 2c       	mov	r15, r1
    53ba:	e1 2c       	mov	r14, r1
    53bc:	03 e0       	ldi	r16, 0x03	; 3
    53be:	95 01       	movw	r18, r10
    53c0:	a3 01       	movw	r20, r6
    53c2:	b4 01       	movw	r22, r8
    53c4:	ce 01       	movw	r24, r28
    53c6:	e0 de       	rcall	.-576    	; 0x5188 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    53c8:	e8 81       	ld	r30, Y
    53ca:	f9 81       	ldd	r31, Y+1	; 0x01
    53cc:	06 88       	ldd	r0, Z+22	; 0x16
    53ce:	f7 89       	ldd	r31, Z+23	; 0x17
    53d0:	e0 2d       	mov	r30, r0
    53d2:	ce 01       	movw	r24, r28
    53d4:	df 91       	pop	r29
    53d6:	cf 91       	pop	r28
    53d8:	1f 91       	pop	r17
    53da:	0f 91       	pop	r16
    53dc:	ff 90       	pop	r15
    53de:	ef 90       	pop	r14
    53e0:	df 90       	pop	r13
    53e2:	cf 90       	pop	r12
    53e4:	bf 90       	pop	r11
    53e6:	af 90       	pop	r10
    53e8:	9f 90       	pop	r9
    53ea:	8f 90       	pop	r8
    53ec:	7f 90       	pop	r7
    53ee:	6f 90       	pop	r6
    53f0:	09 94       	ijmp

000053f2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    53f2:	2f 92       	push	r2
    53f4:	3f 92       	push	r3
    53f6:	4f 92       	push	r4
    53f8:	5f 92       	push	r5
    53fa:	6f 92       	push	r6
    53fc:	7f 92       	push	r7
    53fe:	8f 92       	push	r8
    5400:	9f 92       	push	r9
    5402:	af 92       	push	r10
    5404:	bf 92       	push	r11
    5406:	cf 92       	push	r12
    5408:	df 92       	push	r13
    540a:	ef 92       	push	r14
    540c:	ff 92       	push	r15
    540e:	0f 93       	push	r16
    5410:	1f 93       	push	r17
    5412:	cf 93       	push	r28
    5414:	df 93       	push	r29
    5416:	cd b7       	in	r28, 0x3d	; 61
    5418:	de b7       	in	r29, 0x3e	; 62
    541a:	6a 97       	sbiw	r28, 0x1a	; 26
    541c:	0f b6       	in	r0, 0x3f	; 63
    541e:	f8 94       	cli
    5420:	de bf       	out	0x3e, r29	; 62
    5422:	0f be       	out	0x3f, r0	; 63
    5424:	cd bf       	out	0x3d, r28	; 61
    5426:	9a 8f       	std	Y+26, r25	; 0x1a
    5428:	89 8f       	std	Y+25, r24	; 0x19
    542a:	7a 83       	std	Y+2, r23	; 0x02
    542c:	69 83       	std	Y+1, r22	; 0x01
    542e:	4a 01       	movw	r8, r20
    5430:	d2 2e       	mov	r13, r18
    5432:	18 87       	std	Y+8, r17	; 0x08
    5434:	0f 83       	std	Y+7, r16	; 0x07
    5436:	37 01       	movw	r6, r14
    5438:	bc 2c       	mov	r11, r12
    543a:	dc 01       	movw	r26, r24
    543c:	58 96       	adiw	r26, 0x18	; 24
    543e:	2d 91       	ld	r18, X+
    5440:	3c 91       	ld	r19, X
    5442:	59 97       	sbiw	r26, 0x19	; 25
    5444:	21 15       	cp	r18, r1
    5446:	31 05       	cpc	r19, r1
    5448:	09 f0       	breq	.+2      	; 0x544c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    544a:	15 c1       	rjmp	.+554    	; 0x5676 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    544c:	17 96       	adiw	r26, 0x07	; 7
    544e:	8d 91       	ld	r24, X+
    5450:	9c 91       	ld	r25, X
    5452:	18 97       	sbiw	r26, 0x08	; 8
    5454:	68 17       	cp	r22, r24
    5456:	79 07       	cpc	r23, r25
    5458:	0c f0       	brlt	.+2      	; 0x545c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    545a:	d7 c1       	rjmp	.+942    	; 0x580a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    545c:	19 96       	adiw	r26, 0x09	; 9
    545e:	8d 91       	ld	r24, X+
    5460:	9c 91       	ld	r25, X
    5462:	48 17       	cp	r20, r24
    5464:	59 07       	cpc	r21, r25
    5466:	0c f0       	brlt	.+2      	; 0x546a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    5468:	d0 c1       	rjmp	.+928    	; 0x580a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    546a:	4c 2c       	mov	r4, r12
    546c:	51 2c       	mov	r5, r1
    546e:	b6 e0       	ldi	r27, 0x06	; 6
    5470:	cb 9e       	mul	r12, r27
    5472:	60 0d       	add	r22, r0
    5474:	71 1d       	adc	r23, r1
    5476:	11 24       	eor	r1, r1
    5478:	7c 87       	std	Y+12, r23	; 0x0c
    547a:	6b 87       	std	Y+11, r22	; 0x0b
    547c:	16 16       	cp	r1, r22
    547e:	17 06       	cpc	r1, r23
    5480:	0c f0       	brlt	.+2      	; 0x5484 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    5482:	c3 c1       	rjmp	.+902    	; 0x580a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    5484:	ea 2d       	mov	r30, r10
    5486:	f0 e0       	ldi	r31, 0x00	; 0
    5488:	fa 87       	std	Y+10, r31	; 0x0a
    548a:	e9 87       	std	Y+9, r30	; 0x09
    548c:	93 e0       	ldi	r25, 0x03	; 3
    548e:	ee 0f       	add	r30, r30
    5490:	ff 1f       	adc	r31, r31
    5492:	9a 95       	dec	r25
    5494:	e1 f7       	brne	.-8      	; 0x548e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    5496:	f8 8b       	std	Y+16, r31	; 0x10
    5498:	ef 87       	std	Y+15, r30	; 0x0f
    549a:	cf 01       	movw	r24, r30
    549c:	84 0f       	add	r24, r20
    549e:	95 1f       	adc	r25, r21
    54a0:	18 16       	cp	r1, r24
    54a2:	19 06       	cpc	r1, r25
    54a4:	0c f0       	brlt	.+2      	; 0x54a8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    54a6:	b1 c1       	rjmp	.+866    	; 0x580a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    54a8:	a9 8d       	ldd	r26, Y+25	; 0x19
    54aa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    54ac:	57 96       	adiw	r26, 0x17	; 23
    54ae:	8c 91       	ld	r24, X
    54b0:	81 11       	cpse	r24, r1
    54b2:	04 c0       	rjmp	.+8      	; 0x54bc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    54b4:	bf ea       	ldi	r27, 0xAF	; 175
    54b6:	bd 15       	cp	r27, r13
    54b8:	08 f4       	brcc	.+2      	; 0x54bc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    54ba:	d3 94       	inc	r13
    54bc:	a9 8d       	ldd	r26, Y+25	; 0x19
    54be:	ba 8d       	ldd	r27, Y+26	; 0x1a
    54c0:	ed 91       	ld	r30, X+
    54c2:	fc 91       	ld	r31, X
    54c4:	11 97       	sbiw	r26, 0x01	; 1
    54c6:	02 84       	ldd	r0, Z+10	; 0x0a
    54c8:	f3 85       	ldd	r31, Z+11	; 0x0b
    54ca:	e0 2d       	mov	r30, r0
    54cc:	cd 01       	movw	r24, r26
    54ce:	09 95       	icall
    54d0:	b5 e0       	ldi	r27, 0x05	; 5
    54d2:	db 9e       	mul	r13, r27
    54d4:	c0 01       	movw	r24, r0
    54d6:	11 24       	eor	r1, r1
    54d8:	e9 81       	ldd	r30, Y+1	; 0x01
    54da:	fa 81       	ldd	r31, Y+2	; 0x02
    54dc:	fc 83       	std	Y+4, r31	; 0x04
    54de:	eb 83       	std	Y+3, r30	; 0x03
    54e0:	31 2c       	mov	r3, r1
    54e2:	21 2c       	mov	r2, r1
    54e4:	9c 01       	movw	r18, r24
    54e6:	28 52       	subi	r18, 0x28	; 40
    54e8:	3f 4f       	sbci	r19, 0xFF	; 255
    54ea:	38 8f       	std	Y+24, r19	; 0x18
    54ec:	2f 8b       	std	Y+23, r18	; 0x17
    54ee:	4a 2d       	mov	r20, r10
    54f0:	50 e0       	ldi	r21, 0x00	; 0
    54f2:	5e 8b       	std	Y+22, r21	; 0x16
    54f4:	4d 8b       	std	Y+21, r20	; 0x15
    54f6:	ef 89       	ldd	r30, Y+23	; 0x17
    54f8:	f8 8d       	ldd	r31, Y+24	; 0x18
    54fa:	e2 0d       	add	r30, r2
    54fc:	f3 1d       	adc	r31, r3
    54fe:	44 91       	lpm	r20, Z
    5500:	9e 82       	std	Y+6, r9	; 0x06
    5502:	8d 82       	std	Y+5, r8	; 0x05
    5504:	d1 2c       	mov	r13, r1
    5506:	c1 2c       	mov	r12, r1
    5508:	69 81       	ldd	r22, Y+1	; 0x01
    550a:	7a 81       	ldd	r23, Y+2	; 0x02
    550c:	62 0d       	add	r22, r2
    550e:	73 1d       	adc	r23, r3
    5510:	7a 8b       	std	Y+18, r23	; 0x12
    5512:	69 8b       	std	Y+17, r22	; 0x11
    5514:	84 2f       	mov	r24, r20
    5516:	90 e0       	ldi	r25, 0x00	; 0
    5518:	9c 8b       	std	Y+20, r25	; 0x14
    551a:	8b 8b       	std	Y+19, r24	; 0x13
    551c:	e9 8d       	ldd	r30, Y+25	; 0x19
    551e:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5520:	a0 81       	ld	r26, Z
    5522:	b1 81       	ldd	r27, Z+1	; 0x01
    5524:	40 ff       	sbrs	r20, 0
    5526:	82 c0       	rjmp	.+260    	; 0x562c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    5528:	f1 e0       	ldi	r31, 0x01	; 1
    552a:	bf 12       	cpse	r11, r31
    552c:	6f c0       	rjmp	.+222    	; 0x560c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    552e:	af 12       	cpse	r10, r31
    5530:	6d c0       	rjmp	.+218    	; 0x560c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    5532:	1c 96       	adiw	r26, 0x0c	; 12
    5534:	ed 91       	ld	r30, X+
    5536:	fc 91       	ld	r31, X
    5538:	2f 81       	ldd	r18, Y+7	; 0x07
    553a:	38 85       	ldd	r19, Y+8	; 0x08
    553c:	a4 01       	movw	r20, r8
    553e:	4c 0d       	add	r20, r12
    5540:	5d 1d       	adc	r21, r13
    5542:	69 89       	ldd	r22, Y+17	; 0x11
    5544:	7a 89       	ldd	r23, Y+18	; 0x12
    5546:	89 8d       	ldd	r24, Y+25	; 0x19
    5548:	9a 8d       	ldd	r25, Y+26	; 0x1a
    554a:	09 95       	icall
    554c:	eb 89       	ldd	r30, Y+19	; 0x13
    554e:	fc 89       	ldd	r31, Y+20	; 0x14
    5550:	f5 95       	asr	r31
    5552:	e7 95       	ror	r30
    5554:	4e 2f       	mov	r20, r30
    5556:	5f ef       	ldi	r21, 0xFF	; 255
    5558:	c5 1a       	sub	r12, r21
    555a:	d5 0a       	sbc	r13, r21
    555c:	6d 81       	ldd	r22, Y+5	; 0x05
    555e:	7e 81       	ldd	r23, Y+6	; 0x06
    5560:	8d 89       	ldd	r24, Y+21	; 0x15
    5562:	9e 89       	ldd	r25, Y+22	; 0x16
    5564:	68 0f       	add	r22, r24
    5566:	79 1f       	adc	r23, r25
    5568:	7e 83       	std	Y+6, r23	; 0x06
    556a:	6d 83       	std	Y+5, r22	; 0x05
    556c:	98 e0       	ldi	r25, 0x08	; 8
    556e:	c9 16       	cp	r12, r25
    5570:	d1 04       	cpc	r13, r1
    5572:	81 f6       	brne	.-96     	; 0x5514 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    5574:	af ef       	ldi	r26, 0xFF	; 255
    5576:	2a 1a       	sub	r2, r26
    5578:	3a 0a       	sbc	r3, r26
    557a:	eb 81       	ldd	r30, Y+3	; 0x03
    557c:	fc 81       	ldd	r31, Y+4	; 0x04
    557e:	e4 0d       	add	r30, r4
    5580:	f5 1d       	adc	r31, r5
    5582:	fc 83       	std	Y+4, r31	; 0x04
    5584:	eb 83       	std	Y+3, r30	; 0x03
    5586:	f5 e0       	ldi	r31, 0x05	; 5
    5588:	2f 16       	cp	r2, r31
    558a:	31 04       	cpc	r3, r1
    558c:	09 f0       	breq	.+2      	; 0x5590 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    558e:	b3 cf       	rjmp	.-154    	; 0x54f6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    5590:	2f 81       	ldd	r18, Y+7	; 0x07
    5592:	38 85       	ldd	r19, Y+8	; 0x08
    5594:	26 15       	cp	r18, r6
    5596:	37 05       	cpc	r19, r7
    5598:	b9 f0       	breq	.+46     	; 0x55c8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    559a:	a9 8d       	ldd	r26, Y+25	; 0x19
    559c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    559e:	ed 91       	ld	r30, X+
    55a0:	fc 91       	ld	r31, X
    55a2:	b1 e0       	ldi	r27, 0x01	; 1
    55a4:	bb 12       	cpse	r11, r27
    55a6:	57 c0       	rjmp	.+174    	; 0x5656 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    55a8:	ab 12       	cpse	r10, r27
    55aa:	55 c0       	rjmp	.+170    	; 0x5656 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    55ac:	69 81       	ldd	r22, Y+1	; 0x01
    55ae:	7a 81       	ldd	r23, Y+2	; 0x02
    55b0:	6b 5f       	subi	r22, 0xFB	; 251
    55b2:	7f 4f       	sbci	r23, 0xFF	; 255
    55b4:	00 88       	ldd	r0, Z+16	; 0x10
    55b6:	f1 89       	ldd	r31, Z+17	; 0x11
    55b8:	e0 2d       	mov	r30, r0
    55ba:	83 01       	movw	r16, r6
    55bc:	28 e0       	ldi	r18, 0x08	; 8
    55be:	30 e0       	ldi	r19, 0x00	; 0
    55c0:	a4 01       	movw	r20, r8
    55c2:	89 8d       	ldd	r24, Y+25	; 0x19
    55c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    55c6:	09 95       	icall
    55c8:	a9 8d       	ldd	r26, Y+25	; 0x19
    55ca:	ba 8d       	ldd	r27, Y+26	; 0x1a
    55cc:	ed 91       	ld	r30, X+
    55ce:	fc 91       	ld	r31, X
    55d0:	11 97       	sbiw	r26, 0x01	; 1
    55d2:	06 88       	ldd	r0, Z+22	; 0x16
    55d4:	f7 89       	ldd	r31, Z+23	; 0x17
    55d6:	e0 2d       	mov	r30, r0
    55d8:	cd 01       	movw	r24, r26
    55da:	6a 96       	adiw	r28, 0x1a	; 26
    55dc:	0f b6       	in	r0, 0x3f	; 63
    55de:	f8 94       	cli
    55e0:	de bf       	out	0x3e, r29	; 62
    55e2:	0f be       	out	0x3f, r0	; 63
    55e4:	cd bf       	out	0x3d, r28	; 61
    55e6:	df 91       	pop	r29
    55e8:	cf 91       	pop	r28
    55ea:	1f 91       	pop	r17
    55ec:	0f 91       	pop	r16
    55ee:	ff 90       	pop	r15
    55f0:	ef 90       	pop	r14
    55f2:	df 90       	pop	r13
    55f4:	cf 90       	pop	r12
    55f6:	bf 90       	pop	r11
    55f8:	af 90       	pop	r10
    55fa:	9f 90       	pop	r9
    55fc:	8f 90       	pop	r8
    55fe:	7f 90       	pop	r7
    5600:	6f 90       	pop	r6
    5602:	5f 90       	pop	r5
    5604:	4f 90       	pop	r4
    5606:	3f 90       	pop	r3
    5608:	2f 90       	pop	r2
    560a:	09 94       	ijmp
    560c:	1e 96       	adiw	r26, 0x0e	; 14
    560e:	ed 91       	ld	r30, X+
    5610:	fc 91       	ld	r31, X
    5612:	ef 80       	ldd	r14, Y+7	; 0x07
    5614:	f8 84       	ldd	r15, Y+8	; 0x08
    5616:	09 85       	ldd	r16, Y+9	; 0x09
    5618:	1a 85       	ldd	r17, Y+10	; 0x0a
    561a:	92 01       	movw	r18, r4
    561c:	4d 81       	ldd	r20, Y+5	; 0x05
    561e:	5e 81       	ldd	r21, Y+6	; 0x06
    5620:	6b 81       	ldd	r22, Y+3	; 0x03
    5622:	7c 81       	ldd	r23, Y+4	; 0x04
    5624:	89 8d       	ldd	r24, Y+25	; 0x19
    5626:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5628:	09 95       	icall
    562a:	90 cf       	rjmp	.-224    	; 0x554c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    562c:	2f 81       	ldd	r18, Y+7	; 0x07
    562e:	38 85       	ldd	r19, Y+8	; 0x08
    5630:	26 15       	cp	r18, r6
    5632:	37 05       	cpc	r19, r7
    5634:	09 f4       	brne	.+2      	; 0x5638 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    5636:	8a cf       	rjmp	.-236    	; 0x554c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    5638:	31 e0       	ldi	r19, 0x01	; 1
    563a:	b3 12       	cpse	r11, r19
    563c:	07 c0       	rjmp	.+14     	; 0x564c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    563e:	a3 12       	cpse	r10, r19
    5640:	05 c0       	rjmp	.+10     	; 0x564c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    5642:	1c 96       	adiw	r26, 0x0c	; 12
    5644:	ed 91       	ld	r30, X+
    5646:	fc 91       	ld	r31, X
    5648:	93 01       	movw	r18, r6
    564a:	78 cf       	rjmp	.-272    	; 0x553c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    564c:	1e 96       	adiw	r26, 0x0e	; 14
    564e:	ed 91       	ld	r30, X+
    5650:	fc 91       	ld	r31, X
    5652:	73 01       	movw	r14, r6
    5654:	e0 cf       	rjmp	.-64     	; 0x5616 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    5656:	6b 85       	ldd	r22, Y+11	; 0x0b
    5658:	7c 85       	ldd	r23, Y+12	; 0x0c
    565a:	64 19       	sub	r22, r4
    565c:	75 09       	sbc	r23, r5
    565e:	06 84       	ldd	r0, Z+14	; 0x0e
    5660:	f7 85       	ldd	r31, Z+15	; 0x0f
    5662:	e0 2d       	mov	r30, r0
    5664:	73 01       	movw	r14, r6
    5666:	0f 85       	ldd	r16, Y+15	; 0x0f
    5668:	18 89       	ldd	r17, Y+16	; 0x10
    566a:	92 01       	movw	r18, r4
    566c:	a4 01       	movw	r20, r8
    566e:	89 8d       	ldd	r24, Y+25	; 0x19
    5670:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5672:	09 95       	icall
    5674:	a9 cf       	rjmp	.-174    	; 0x55c8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    5676:	f9 01       	movw	r30, r18
    5678:	34 96       	adiw	r30, 0x04	; 4
    567a:	94 91       	lpm	r25, Z
    567c:	32 97       	sbiw	r30, 0x02	; 2
    567e:	45 91       	lpm	r20, Z+
    5680:	54 91       	lpm	r21, Z
    5682:	d9 1a       	sub	r13, r25
    5684:	b7 e0       	ldi	r27, 0x07	; 7
    5686:	db 9e       	mul	r13, r27
    5688:	40 0d       	add	r20, r0
    568a:	51 1d       	adc	r21, r1
    568c:	11 24       	eor	r1, r1
    568e:	f9 01       	movw	r30, r18
    5690:	25 91       	lpm	r18, Z+
    5692:	34 91       	lpm	r19, Z
    5694:	3c 8b       	std	Y+20, r19	; 0x14
    5696:	2b 8b       	std	Y+19, r18	; 0x13
    5698:	fa 01       	movw	r30, r20
    569a:	25 90       	lpm	r2, Z+
    569c:	34 90       	lpm	r3, Z
    569e:	fa 01       	movw	r30, r20
    56a0:	32 96       	adiw	r30, 0x02	; 2
    56a2:	74 90       	lpm	r7, Z
    56a4:	31 96       	adiw	r30, 0x01	; 1
    56a6:	34 91       	lpm	r19, Z
    56a8:	39 8b       	std	Y+17, r19	; 0x11
    56aa:	32 96       	adiw	r30, 0x02	; 2
    56ac:	64 90       	lpm	r6, Z
    56ae:	31 96       	adiw	r30, 0x01	; 1
    56b0:	44 90       	lpm	r4, Z
    56b2:	41 e0       	ldi	r20, 0x01	; 1
    56b4:	4c 15       	cp	r20, r12
    56b6:	18 f0       	brcs	.+6      	; 0x56be <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    56b8:	4a 15       	cp	r20, r10
    56ba:	08 f0       	brcs	.+2      	; 0x56be <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    56bc:	7f c0       	rjmp	.+254    	; 0x57bc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    56be:	66 2d       	mov	r22, r6
    56c0:	06 2c       	mov	r0, r6
    56c2:	00 0c       	add	r0, r0
    56c4:	77 0b       	sbc	r23, r23
    56c6:	7c 83       	std	Y+4, r23	; 0x04
    56c8:	6b 83       	std	Y+3, r22	; 0x03
    56ca:	84 2d       	mov	r24, r4
    56cc:	04 2c       	mov	r0, r4
    56ce:	00 0c       	add	r0, r0
    56d0:	99 0b       	sbc	r25, r25
    56d2:	9e 83       	std	Y+6, r25	; 0x06
    56d4:	8d 83       	std	Y+5, r24	; 0x05
    56d6:	a9 8d       	ldd	r26, Y+25	; 0x19
    56d8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    56da:	ed 91       	ld	r30, X+
    56dc:	fc 91       	ld	r31, X
    56de:	11 97       	sbiw	r26, 0x01	; 1
    56e0:	02 84       	ldd	r0, Z+10	; 0x0a
    56e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    56e4:	e0 2d       	mov	r30, r0
    56e6:	cd 01       	movw	r24, r26
    56e8:	09 95       	icall
    56ea:	51 2c       	mov	r5, r1
    56ec:	d1 2c       	mov	r13, r1
    56ee:	c1 2c       	mov	r12, r1
    56f0:	ea 2d       	mov	r30, r10
    56f2:	f0 e0       	ldi	r31, 0x00	; 0
    56f4:	fa 87       	std	Y+10, r31	; 0x0a
    56f6:	e9 87       	std	Y+9, r30	; 0x09
    56f8:	2b 2d       	mov	r18, r11
    56fa:	30 e0       	ldi	r19, 0x00	; 0
    56fc:	3c 87       	std	Y+12, r19	; 0x0c
    56fe:	2b 87       	std	Y+11, r18	; 0x0b
    5700:	a4 01       	movw	r20, r8
    5702:	44 0d       	add	r20, r4
    5704:	51 1d       	adc	r21, r1
    5706:	47 fc       	sbrc	r4, 7
    5708:	5a 95       	dec	r21
    570a:	58 8f       	std	Y+24, r21	; 0x18
    570c:	4f 8b       	std	Y+23, r20	; 0x17
    570e:	69 81       	ldd	r22, Y+1	; 0x01
    5710:	7a 81       	ldd	r23, Y+2	; 0x02
    5712:	66 0d       	add	r22, r6
    5714:	71 1d       	adc	r23, r1
    5716:	67 fc       	sbrc	r6, 7
    5718:	7a 95       	dec	r23
    571a:	7e 87       	std	Y+14, r23	; 0x0e
    571c:	6d 87       	std	Y+13, r22	; 0x0d
    571e:	79 89       	ldd	r23, Y+17	; 0x11
    5720:	c7 16       	cp	r12, r23
    5722:	08 f0       	brcs	.+2      	; 0x5726 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    5724:	51 cf       	rjmp	.-350    	; 0x55c8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    5726:	2c 2d       	mov	r18, r12
    5728:	30 e0       	ldi	r19, 0x00	; 0
    572a:	4d 81       	ldd	r20, Y+5	; 0x05
    572c:	5e 81       	ldd	r21, Y+6	; 0x06
    572e:	42 0f       	add	r20, r18
    5730:	53 1f       	adc	r21, r19
    5732:	a9 85       	ldd	r26, Y+9	; 0x09
    5734:	ba 85       	ldd	r27, Y+10	; 0x0a
    5736:	4a 9f       	mul	r20, r26
    5738:	c0 01       	movw	r24, r0
    573a:	4b 9f       	mul	r20, r27
    573c:	90 0d       	add	r25, r0
    573e:	5a 9f       	mul	r21, r26
    5740:	90 0d       	add	r25, r0
    5742:	11 24       	eor	r1, r1
    5744:	fc 01       	movw	r30, r24
    5746:	e8 0d       	add	r30, r8
    5748:	f9 1d       	adc	r31, r9
    574a:	f8 8b       	std	Y+16, r31	; 0x10
    574c:	ef 87       	std	Y+15, r30	; 0x0f
    574e:	85 2d       	mov	r24, r5
    5750:	61 2c       	mov	r6, r1
    5752:	4f 89       	ldd	r20, Y+23	; 0x17
    5754:	58 8d       	ldd	r21, Y+24	; 0x18
    5756:	42 0f       	add	r20, r18
    5758:	53 1f       	adc	r21, r19
    575a:	5e 8b       	std	Y+22, r21	; 0x16
    575c:	4d 8b       	std	Y+21, r20	; 0x15
    575e:	67 14       	cp	r6, r7
    5760:	08 f0       	brcs	.+2      	; 0x5764 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    5762:	50 c0       	rjmp	.+160    	; 0x5804 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    5764:	44 24       	eor	r4, r4
    5766:	43 94       	inc	r4
    5768:	48 0e       	add	r4, r24
    576a:	87 70       	andi	r24, 0x07	; 7
    576c:	41 f4       	brne	.+16     	; 0x577e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    576e:	c1 01       	movw	r24, r2
    5770:	01 96       	adiw	r24, 0x01	; 1
    5772:	eb 89       	ldd	r30, Y+19	; 0x13
    5774:	fc 89       	ldd	r31, Y+20	; 0x14
    5776:	e2 0d       	add	r30, r2
    5778:	f3 1d       	adc	r31, r3
    577a:	d4 90       	lpm	r13, Z
    577c:	1c 01       	movw	r2, r24
    577e:	d7 fe       	sbrs	r13, 7
    5780:	19 c0       	rjmp	.+50     	; 0x57b4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    5782:	a9 8d       	ldd	r26, Y+25	; 0x19
    5784:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5786:	ed 91       	ld	r30, X+
    5788:	fc 91       	ld	r31, X
    578a:	66 2d       	mov	r22, r6
    578c:	70 e0       	ldi	r23, 0x00	; 0
    578e:	b1 e0       	ldi	r27, 0x01	; 1
    5790:	bb 12       	cpse	r11, r27
    5792:	19 c0       	rjmp	.+50     	; 0x57c6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    5794:	ab 12       	cpse	r10, r27
    5796:	17 c0       	rjmp	.+46     	; 0x57c6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    5798:	2d 85       	ldd	r18, Y+13	; 0x0d
    579a:	3e 85       	ldd	r19, Y+14	; 0x0e
    579c:	62 0f       	add	r22, r18
    579e:	73 1f       	adc	r23, r19
    57a0:	04 84       	ldd	r0, Z+12	; 0x0c
    57a2:	f5 85       	ldd	r31, Z+13	; 0x0d
    57a4:	e0 2d       	mov	r30, r0
    57a6:	2f 81       	ldd	r18, Y+7	; 0x07
    57a8:	38 85       	ldd	r19, Y+8	; 0x08
    57aa:	4d 89       	ldd	r20, Y+21	; 0x15
    57ac:	5e 89       	ldd	r21, Y+22	; 0x16
    57ae:	89 8d       	ldd	r24, Y+25	; 0x19
    57b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    57b2:	09 95       	icall
    57b4:	dd 0c       	add	r13, r13
    57b6:	63 94       	inc	r6
    57b8:	84 2d       	mov	r24, r4
    57ba:	d1 cf       	rjmp	.-94     	; 0x575e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    57bc:	1e 82       	std	Y+6, r1	; 0x06
    57be:	1d 82       	std	Y+5, r1	; 0x05
    57c0:	1c 82       	std	Y+4, r1	; 0x04
    57c2:	1b 82       	std	Y+3, r1	; 0x03
    57c4:	88 cf       	rjmp	.-240    	; 0x56d6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    57c6:	4b 81       	ldd	r20, Y+3	; 0x03
    57c8:	5c 81       	ldd	r21, Y+4	; 0x04
    57ca:	64 0f       	add	r22, r20
    57cc:	75 1f       	adc	r23, r21
    57ce:	ab 85       	ldd	r26, Y+11	; 0x0b
    57d0:	bc 85       	ldd	r27, Y+12	; 0x0c
    57d2:	6a 9f       	mul	r22, r26
    57d4:	c0 01       	movw	r24, r0
    57d6:	6b 9f       	mul	r22, r27
    57d8:	90 0d       	add	r25, r0
    57da:	7a 9f       	mul	r23, r26
    57dc:	90 0d       	add	r25, r0
    57de:	11 24       	eor	r1, r1
    57e0:	69 81       	ldd	r22, Y+1	; 0x01
    57e2:	7a 81       	ldd	r23, Y+2	; 0x02
    57e4:	68 0f       	add	r22, r24
    57e6:	79 1f       	adc	r23, r25
    57e8:	06 84       	ldd	r0, Z+14	; 0x0e
    57ea:	f7 85       	ldd	r31, Z+15	; 0x0f
    57ec:	e0 2d       	mov	r30, r0
    57ee:	ef 80       	ldd	r14, Y+7	; 0x07
    57f0:	f8 84       	ldd	r15, Y+8	; 0x08
    57f2:	09 85       	ldd	r16, Y+9	; 0x09
    57f4:	1a 85       	ldd	r17, Y+10	; 0x0a
    57f6:	9d 01       	movw	r18, r26
    57f8:	4f 85       	ldd	r20, Y+15	; 0x0f
    57fa:	58 89       	ldd	r21, Y+16	; 0x10
    57fc:	89 8d       	ldd	r24, Y+25	; 0x19
    57fe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5800:	09 95       	icall
    5802:	d8 cf       	rjmp	.-80     	; 0x57b4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    5804:	57 0c       	add	r5, r7
    5806:	c3 94       	inc	r12
    5808:	8a cf       	rjmp	.-236    	; 0x571e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    580a:	6a 96       	adiw	r28, 0x1a	; 26
    580c:	0f b6       	in	r0, 0x3f	; 63
    580e:	f8 94       	cli
    5810:	de bf       	out	0x3e, r29	; 62
    5812:	0f be       	out	0x3f, r0	; 63
    5814:	cd bf       	out	0x3d, r28	; 61
    5816:	df 91       	pop	r29
    5818:	cf 91       	pop	r28
    581a:	1f 91       	pop	r17
    581c:	0f 91       	pop	r16
    581e:	ff 90       	pop	r15
    5820:	ef 90       	pop	r14
    5822:	df 90       	pop	r13
    5824:	cf 90       	pop	r12
    5826:	bf 90       	pop	r11
    5828:	af 90       	pop	r10
    582a:	9f 90       	pop	r9
    582c:	8f 90       	pop	r8
    582e:	7f 90       	pop	r7
    5830:	6f 90       	pop	r6
    5832:	5f 90       	pop	r5
    5834:	4f 90       	pop	r4
    5836:	3f 90       	pop	r3
    5838:	2f 90       	pop	r2
    583a:	08 95       	ret

0000583c <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    583c:	8f 92       	push	r8
    583e:	9f 92       	push	r9
    5840:	af 92       	push	r10
    5842:	cf 92       	push	r12
    5844:	ef 92       	push	r14
    5846:	ff 92       	push	r15
    5848:	0f 93       	push	r16
    584a:	1f 93       	push	r17
    584c:	cf 93       	push	r28
    584e:	df 93       	push	r29
    5850:	ec 01       	movw	r28, r24
    5852:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    5854:	88 8d       	ldd	r24, Y+24	; 0x18
    5856:	99 8d       	ldd	r25, Y+25	; 0x19
    5858:	00 97       	sbiw	r24, 0x00	; 0
    585a:	09 f0       	breq	.+2      	; 0x585e <Adafruit_GFX::write(unsigned char)+0x22>
    585c:	50 c0       	rjmp	.+160    	; 0x58fe <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    585e:	6a 30       	cpi	r22, 0x0A	; 10
    5860:	d1 f4       	brne	.+52     	; 0x5896 <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    5862:	1c 86       	std	Y+12, r1	; 0x0c
    5864:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    5866:	8c 89       	ldd	r24, Y+20	; 0x14
    5868:	48 e0       	ldi	r20, 0x08	; 8
    586a:	84 9f       	mul	r24, r20
    586c:	90 01       	movw	r18, r0
    586e:	11 24       	eor	r1, r1
    5870:	8d 85       	ldd	r24, Y+13	; 0x0d
    5872:	9e 85       	ldd	r25, Y+14	; 0x0e
    5874:	82 0f       	add	r24, r18
    5876:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    5878:	9e 87       	std	Y+14, r25	; 0x0e
    587a:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    587c:	81 e0       	ldi	r24, 0x01	; 1
    587e:	90 e0       	ldi	r25, 0x00	; 0
    5880:	df 91       	pop	r29
    5882:	cf 91       	pop	r28
    5884:	1f 91       	pop	r17
    5886:	0f 91       	pop	r16
    5888:	ff 90       	pop	r15
    588a:	ef 90       	pop	r14
    588c:	cf 90       	pop	r12
    588e:	af 90       	pop	r10
    5890:	9f 90       	pop	r9
    5892:	8f 90       	pop	r8
    5894:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    5896:	6d 30       	cpi	r22, 0x0D	; 13
    5898:	89 f3       	breq	.-30     	; 0x587c <Adafruit_GFX::write(unsigned char)+0x40>
    589a:	cb 88       	ldd	r12, Y+19	; 0x13
    589c:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    589e:	8e 89       	ldd	r24, Y+22	; 0x16
    58a0:	88 23       	and	r24, r24
    58a2:	c1 f0       	breq	.+48     	; 0x58d4 <Adafruit_GFX::write(unsigned char)+0x98>
    58a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    58a6:	9c 85       	ldd	r25, Y+12	; 0x0c
    58a8:	36 e0       	ldi	r19, 0x06	; 6
    58aa:	c3 9e       	mul	r12, r19
    58ac:	80 0d       	add	r24, r0
    58ae:	91 1d       	adc	r25, r1
    58b0:	11 24       	eor	r1, r1
    58b2:	4f 81       	ldd	r20, Y+7	; 0x07
    58b4:	58 85       	ldd	r21, Y+8	; 0x08
    58b6:	48 17       	cp	r20, r24
    58b8:	59 07       	cpc	r21, r25
    58ba:	64 f4       	brge	.+24     	; 0x58d4 <Adafruit_GFX::write(unsigned char)+0x98>
    58bc:	4d 85       	ldd	r20, Y+13	; 0x0d
    58be:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    58c0:	1c 86       	std	Y+12, r1	; 0x0c
    58c2:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    58c4:	38 e0       	ldi	r19, 0x08	; 8
    58c6:	a3 9e       	mul	r10, r19
    58c8:	c0 01       	movw	r24, r0
    58ca:	11 24       	eor	r1, r1
    58cc:	84 0f       	add	r24, r20
    58ce:	95 1f       	adc	r25, r21
    58d0:	9e 87       	std	Y+14, r25	; 0x0e
    58d2:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    58d4:	e9 88       	ldd	r14, Y+17	; 0x11
    58d6:	fa 88       	ldd	r15, Y+18	; 0x12
    58d8:	0f 85       	ldd	r16, Y+15	; 0x0f
    58da:	18 89       	ldd	r17, Y+16	; 0x10
    58dc:	4d 85       	ldd	r20, Y+13	; 0x0d
    58de:	5e 85       	ldd	r21, Y+14	; 0x0e
    58e0:	6b 85       	ldd	r22, Y+11	; 0x0b
    58e2:	7c 85       	ldd	r23, Y+12	; 0x0c
    58e4:	ce 01       	movw	r24, r28
    58e6:	85 dd       	rcall	.-1270   	; 0x53f2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    58e8:	2b 89       	ldd	r18, Y+19	; 0x13
    58ea:	8b 85       	ldd	r24, Y+11	; 0x0b
    58ec:	9c 85       	ldd	r25, Y+12	; 0x0c
    58ee:	46 e0       	ldi	r20, 0x06	; 6
    58f0:	24 9f       	mul	r18, r20
    58f2:	80 0d       	add	r24, r0
    58f4:	91 1d       	adc	r25, r1
    58f6:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    58f8:	9c 87       	std	Y+12, r25	; 0x0c
    58fa:	8b 87       	std	Y+11, r24	; 0x0b
    58fc:	bf cf       	rjmp	.-130    	; 0x587c <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    58fe:	6a 30       	cpi	r22, 0x0A	; 10
    5900:	69 f4       	brne	.+26     	; 0x591c <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    5902:	1c 86       	std	Y+12, r1	; 0x0c
    5904:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    5906:	fc 01       	movw	r30, r24
    5908:	36 96       	adiw	r30, 0x06	; 6
    590a:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    590c:	2c 89       	ldd	r18, Y+20	; 0x14
    590e:	8d 85       	ldd	r24, Y+13	; 0x0d
    5910:	9e 85       	ldd	r25, Y+14	; 0x0e
    5912:	e2 9f       	mul	r30, r18
    5914:	80 0d       	add	r24, r0
    5916:	91 1d       	adc	r25, r1
    5918:	11 24       	eor	r1, r1
    591a:	ae cf       	rjmp	.-164    	; 0x5878 <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    591c:	6d 30       	cpi	r22, 0x0D	; 13
    591e:	09 f4       	brne	.+2      	; 0x5922 <Adafruit_GFX::write(unsigned char)+0xe6>
    5920:	ad cf       	rjmp	.-166    	; 0x587c <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    5922:	fc 01       	movw	r30, r24
    5924:	34 96       	adiw	r30, 0x04	; 4
    5926:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    5928:	63 17       	cp	r22, r19
    592a:	08 f4       	brcc	.+2      	; 0x592e <Adafruit_GFX::write(unsigned char)+0xf2>
    592c:	a7 cf       	rjmp	.-178    	; 0x587c <Adafruit_GFX::write(unsigned char)+0x40>
    592e:	31 96       	adiw	r30, 0x01	; 1
    5930:	e4 91       	lpm	r30, Z
    5932:	e6 17       	cp	r30, r22
    5934:	08 f4       	brcc	.+2      	; 0x5938 <Adafruit_GFX::write(unsigned char)+0xfc>
    5936:	a2 cf       	rjmp	.-188    	; 0x587c <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    5938:	fc 01       	movw	r30, r24
    593a:	32 96       	adiw	r30, 0x02	; 2
    593c:	85 90       	lpm	r8, Z+
    593e:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    5940:	46 2f       	mov	r20, r22
    5942:	43 1b       	sub	r20, r19
    5944:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    5946:	47 e0       	ldi	r20, 0x07	; 7
    5948:	34 9f       	mul	r19, r20
    594a:	80 0c       	add	r8, r0
    594c:	91 1c       	adc	r9, r1
    594e:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    5950:	f4 01       	movw	r30, r8
    5952:	32 96       	adiw	r30, 0x02	; 2
    5954:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    5956:	31 96       	adiw	r30, 0x01	; 1
    5958:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    595a:	33 23       	and	r19, r19
    595c:	a1 f1       	breq	.+104    	; 0x59c6 <Adafruit_GFX::write(unsigned char)+0x18a>
    595e:	ee 23       	and	r30, r30
    5960:	91 f1       	breq	.+100    	; 0x59c6 <Adafruit_GFX::write(unsigned char)+0x18a>
    5962:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    5964:	f4 01       	movw	r30, r8
    5966:	35 96       	adiw	r30, 0x05	; 5
    5968:	e4 91       	lpm	r30, Z
    596a:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    596c:	4e 89       	ldd	r20, Y+22	; 0x16
    596e:	44 23       	and	r20, r20
    5970:	01 f1       	breq	.+64     	; 0x59b2 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    5972:	0e 2e       	mov	r0, r30
    5974:	00 0c       	add	r0, r0
    5976:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    5978:	e3 0f       	add	r30, r19
    597a:	f1 1d       	adc	r31, r1
    597c:	ce 9e       	mul	r12, r30
    597e:	a0 01       	movw	r20, r0
    5980:	cf 9e       	mul	r12, r31
    5982:	50 0d       	add	r21, r0
    5984:	11 24       	eor	r1, r1
    5986:	6b 85       	ldd	r22, Y+11	; 0x0b
    5988:	7c 85       	ldd	r23, Y+12	; 0x0c
    598a:	46 0f       	add	r20, r22
    598c:	57 1f       	adc	r21, r23
    598e:	6f 81       	ldd	r22, Y+7	; 0x07
    5990:	78 85       	ldd	r23, Y+8	; 0x08
    5992:	64 17       	cp	r22, r20
    5994:	75 07       	cpc	r23, r21
    5996:	6c f4       	brge	.+26     	; 0x59b2 <Adafruit_GFX::write(unsigned char)+0x176>
    5998:	4d 85       	ldd	r20, Y+13	; 0x0d
    599a:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    599c:	1c 86       	std	Y+12, r1	; 0x0c
    599e:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    59a0:	fc 01       	movw	r30, r24
    59a2:	36 96       	adiw	r30, 0x06	; 6
    59a4:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    59a6:	ae 9e       	mul	r10, r30
    59a8:	40 0d       	add	r20, r0
    59aa:	51 1d       	adc	r21, r1
    59ac:	11 24       	eor	r1, r1
    59ae:	5e 87       	std	Y+14, r21	; 0x0e
    59b0:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    59b2:	e9 88       	ldd	r14, Y+17	; 0x11
    59b4:	fa 88       	ldd	r15, Y+18	; 0x12
    59b6:	0f 85       	ldd	r16, Y+15	; 0x0f
    59b8:	18 89       	ldd	r17, Y+16	; 0x10
    59ba:	4d 85       	ldd	r20, Y+13	; 0x0d
    59bc:	5e 85       	ldd	r21, Y+14	; 0x0e
    59be:	6b 85       	ldd	r22, Y+11	; 0x0b
    59c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    59c2:	ce 01       	movw	r24, r28
    59c4:	16 dd       	rcall	.-1492   	; 0x53f2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    59c6:	f4 01       	movw	r30, r8
    59c8:	34 96       	adiw	r30, 0x04	; 4
    59ca:	e4 91       	lpm	r30, Z
    59cc:	2b 89       	ldd	r18, Y+19	; 0x13
    59ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    59d0:	9c 85       	ldd	r25, Y+12	; 0x0c
    59d2:	e2 9f       	mul	r30, r18
    59d4:	80 0d       	add	r24, r0
    59d6:	91 1d       	adc	r25, r1
    59d8:	11 24       	eor	r1, r1
    59da:	8e cf       	rjmp	.-228    	; 0x58f8 <Adafruit_GFX::write(unsigned char)+0xbc>

000059dc <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    59dc:	61 11       	cpse	r22, r1
    59de:	01 c0       	rjmp	.+2      	; 0x59e2 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    59e0:	61 e0       	ldi	r22, 0x01	; 1
    59e2:	fc 01       	movw	r30, r24
    59e4:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    59e6:	41 11       	cpse	r20, r1
    59e8:	01 c0       	rjmp	.+2      	; 0x59ec <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    59ea:	41 e0       	ldi	r20, 0x01	; 1
    59ec:	fc 01       	movw	r30, r24
    59ee:	44 8b       	std	Z+20, r20	; 0x14
}
    59f0:	08 95       	ret

000059f2 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    59f2:	46 2f       	mov	r20, r22
    59f4:	f3 cf       	rjmp	.-26     	; 0x59dc <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

000059f6 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    59f6:	ff 92       	push	r15
    59f8:	0f 93       	push	r16
    59fa:	1f 93       	push	r17
    59fc:	cf 93       	push	r28
    59fe:	df 93       	push	r29
    5a00:	ec 01       	movw	r28, r24
    5a02:	f0 2e       	mov	r15, r16
    5a04:	10 e0       	ldi	r17, 0x00	; 0
    5a06:	00 e0       	ldi	r16, 0x00	; 0
    5a08:	20 d0       	rcall	.+64     	; 0x5a4a <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    5a0a:	86 e7       	ldi	r24, 0x76	; 118
    5a0c:	98 e0       	ldi	r25, 0x08	; 8
    5a0e:	99 83       	std	Y+1, r25	; 0x01
    5a10:	88 83       	st	Y, r24
    5a12:	fe 01       	movw	r30, r28
    5a14:	e6 5e       	subi	r30, 0xE6	; 230
    5a16:	fe 4f       	sbci	r31, 0xFE	; 254
    5a18:	f0 82       	st	Z, r15
    5a1a:	31 96       	adiw	r30, 0x01	; 1
    5a1c:	10 82       	st	Z, r1
    5a1e:	c4 5e       	subi	r28, 0xE4	; 228
    5a20:	de 4f       	sbci	r29, 0xFE	; 254
    5a22:	18 82       	st	Y, r1
    5a24:	df 91       	pop	r29
    5a26:	cf 91       	pop	r28
    5a28:	1f 91       	pop	r17
    5a2a:	0f 91       	pop	r16
    5a2c:	ff 90       	pop	r15
    5a2e:	08 95       	ret

00005a30 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    5a30:	8d 5d       	subi	r24, 0xDD	; 221
    5a32:	9e 4f       	sbci	r25, 0xFE	; 254
    5a34:	dc 01       	movw	r26, r24
    5a36:	ed 91       	ld	r30, X+
    5a38:	fc 91       	ld	r31, X
    5a3a:	30 97       	sbiw	r30, 0x00	; 0
    5a3c:	09 f0       	breq	.+2      	; 0x5a40 <FastLED_NeoMatrix::show()+0x10>
    5a3e:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    5a40:	60 91 0d 10 	lds	r22, 0x100D	; 0x80100d <FastLED>
    5a44:	8d e0       	ldi	r24, 0x0D	; 13
    5a46:	90 e1       	ldi	r25, 0x10	; 16
    5a48:	48 c4       	rjmp	.+2192   	; 0x62da <CFastLED::show(unsigned char)>

00005a4a <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
}

// Call without a value to reset (disable passthrough)
void Framebuffer_GFX::setPassThruColor(void) {
  passThruFlag = false;
}
    5a4a:	af 92       	push	r10
    5a4c:	bf 92       	push	r11
    5a4e:	cf 92       	push	r12
    5a50:	df 92       	push	r13
    5a52:	ef 92       	push	r14
    5a54:	ff 92       	push	r15
    5a56:	0f 93       	push	r16
    5a58:	1f 93       	push	r17
    5a5a:	cf 93       	push	r28
    5a5c:	df 93       	push	r29
    5a5e:	ec 01       	movw	r28, r24
    5a60:	5b 01       	movw	r10, r22
    5a62:	7a 01       	movw	r14, r20
    5a64:	69 01       	movw	r12, r18
    5a66:	a9 01       	movw	r20, r18
    5a68:	b7 01       	movw	r22, r14
    5a6a:	6d db       	rcall	.-2342   	; 0x5146 <Adafruit_GFX::Adafruit_GFX(int, int)>
    5a6c:	89 ed       	ldi	r24, 0xD9	; 217
    5a6e:	98 e0       	ldi	r25, 0x08	; 8
    5a70:	99 83       	std	Y+1, r25	; 0x01
    5a72:	88 83       	st	Y, r24
    5a74:	fe 01       	movw	r30, r28
    5a76:	e3 5e       	subi	r30, 0xE3	; 227
    5a78:	fe 4f       	sbci	r31, 0xFE	; 254
    5a7a:	f1 82       	std	Z+1, r15	; 0x01
    5a7c:	e0 82       	st	Z, r14
    5a7e:	32 96       	adiw	r30, 0x02	; 2
    5a80:	d1 82       	std	Z+1, r13	; 0x01
    5a82:	c0 82       	st	Z, r12
    5a84:	32 96       	adiw	r30, 0x02	; 2
    5a86:	80 e1       	ldi	r24, 0x10	; 16
    5a88:	97 e2       	ldi	r25, 0x27	; 39
    5a8a:	91 83       	std	Z+1, r25	; 0x01
    5a8c:	80 83       	st	Z, r24
    5a8e:	36 96       	adiw	r30, 0x06	; 6
    5a90:	11 82       	std	Z+1, r1	; 0x01
    5a92:	10 82       	st	Z, r1
    5a94:	3a 96       	adiw	r30, 0x0a	; 10
    5a96:	10 82       	st	Z, r1
    5a98:	3c 97       	sbiw	r30, 0x0c	; 12
    5a9a:	b1 82       	std	Z+1, r11	; 0x01
    5a9c:	a0 82       	st	Z, r10
    5a9e:	32 97       	sbiw	r30, 0x02	; 2
    5aa0:	11 83       	std	Z+1, r17	; 0x01
    5aa2:	00 83       	st	Z, r16
    5aa4:	39 97       	sbiw	r30, 0x09	; 9
    5aa6:	10 82       	st	Z, r1
    5aa8:	31 96       	adiw	r30, 0x01	; 1
    5aaa:	10 82       	st	Z, r1
    5aac:	31 96       	adiw	r30, 0x01	; 1
    5aae:	10 82       	st	Z, r1
    5ab0:	c7 5d       	subi	r28, 0xD7	; 215
    5ab2:	de 4f       	sbci	r29, 0xFE	; 254
    5ab4:	ce 9c       	mul	r12, r14
    5ab6:	c0 01       	movw	r24, r0
    5ab8:	cf 9c       	mul	r12, r15
    5aba:	90 0d       	add	r25, r0
    5abc:	de 9c       	mul	r13, r14
    5abe:	90 0d       	add	r25, r0
    5ac0:	11 24       	eor	r1, r1
    5ac2:	b0 e0       	ldi	r27, 0x00	; 0
    5ac4:	a0 e0       	ldi	r26, 0x00	; 0
    5ac6:	88 83       	st	Y, r24
    5ac8:	99 83       	std	Y+1, r25	; 0x01
    5aca:	aa 83       	std	Y+2, r26	; 0x02
    5acc:	bb 83       	std	Y+3, r27	; 0x03
    5ace:	df 91       	pop	r29
    5ad0:	cf 91       	pop	r28
    5ad2:	1f 91       	pop	r17
    5ad4:	0f 91       	pop	r16
    5ad6:	ff 90       	pop	r15
    5ad8:	ef 90       	pop	r14
    5ada:	df 90       	pop	r13
    5adc:	cf 90       	pop	r12
    5ade:	bf 90       	pop	r11
    5ae0:	af 90       	pop	r10
    5ae2:	08 95       	ret

00005ae4 <Framebuffer_GFX::begin()>:
    5ae4:	cf 93       	push	r28
    5ae6:	df 93       	push	r29
    5ae8:	ec 01       	movw	r28, r24
    5aea:	6e e9       	ldi	r22, 0x9E	; 158
    5aec:	78 e0       	ldi	r23, 0x08	; 8
    5aee:	8d e9       	ldi	r24, 0x9D	; 157
    5af0:	90 e1       	ldi	r25, 0x10	; 16
    5af2:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    5af6:	fe 01       	movw	r30, r28
    5af8:	e3 5e       	subi	r30, 0xE3	; 227
    5afa:	fe 4f       	sbci	r31, 0xFE	; 254
    5afc:	40 81       	ld	r20, Z
    5afe:	51 81       	ldd	r21, Z+1	; 0x01
    5b00:	70 e0       	ldi	r23, 0x00	; 0
    5b02:	60 e0       	ldi	r22, 0x00	; 0
    5b04:	20 e0       	ldi	r18, 0x00	; 0
    5b06:	8d e9       	ldi	r24, 0x9D	; 157
    5b08:	90 e1       	ldi	r25, 0x10	; 16
    5b0a:	0e 94 3c 3c 	call	0x7878	; 0x7878 <Print::printNumberDec(unsigned long, unsigned char)>
    5b0e:	6d eb       	ldi	r22, 0xBD	; 189
    5b10:	78 e0       	ldi	r23, 0x08	; 8
    5b12:	8d e9       	ldi	r24, 0x9D	; 157
    5b14:	90 e1       	ldi	r25, 0x10	; 16
    5b16:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    5b1a:	fe 01       	movw	r30, r28
    5b1c:	e1 5e       	subi	r30, 0xE1	; 225
    5b1e:	fe 4f       	sbci	r31, 0xFE	; 254
    5b20:	40 81       	ld	r20, Z
    5b22:	51 81       	ldd	r21, Z+1	; 0x01
    5b24:	70 e0       	ldi	r23, 0x00	; 0
    5b26:	60 e0       	ldi	r22, 0x00	; 0
    5b28:	20 e0       	ldi	r18, 0x00	; 0
    5b2a:	8d e9       	ldi	r24, 0x9D	; 157
    5b2c:	90 e1       	ldi	r25, 0x10	; 16
    5b2e:	0e 94 3c 3c 	call	0x7878	; 0x7878 <Print::printNumberDec(unsigned long, unsigned char)>
    5b32:	67 ec       	ldi	r22, 0xC7	; 199
    5b34:	78 e0       	ldi	r23, 0x08	; 8
    5b36:	8d e9       	ldi	r24, 0x9D	; 157
    5b38:	90 e1       	ldi	r25, 0x10	; 16
    5b3a:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    5b3e:	c7 5d       	subi	r28, 0xD7	; 215
    5b40:	de 4f       	sbci	r29, 0xFE	; 254
    5b42:	48 81       	ld	r20, Y
    5b44:	59 81       	ldd	r21, Y+1	; 0x01
    5b46:	6a 81       	ldd	r22, Y+2	; 0x02
    5b48:	7b 81       	ldd	r23, Y+3	; 0x03
    5b4a:	20 e0       	ldi	r18, 0x00	; 0
    5b4c:	8d e9       	ldi	r24, 0x9D	; 157
    5b4e:	90 e1       	ldi	r25, 0x10	; 16
    5b50:	0e 94 3c 3c 	call	0x7878	; 0x7878 <Print::printNumberDec(unsigned long, unsigned char)>
    5b54:	8d e9       	ldi	r24, 0x9D	; 157
    5b56:	90 e1       	ldi	r25, 0x10	; 16
    5b58:	df 91       	pop	r29
    5b5a:	cf 91       	pop	r28
    5b5c:	0c 94 22 3c 	jmp	0x7844	; 0x7844 <Print::println()>

00005b60 <Framebuffer_GFX::expandColor(unsigned int)>:
    5b60:	fc 01       	movw	r30, r24
    5b62:	ef 2f       	mov	r30, r31
    5b64:	ff 27       	eor	r31, r31
    5b66:	e6 95       	lsr	r30
    5b68:	e6 95       	lsr	r30
    5b6a:	e6 95       	lsr	r30
    5b6c:	e8 5e       	subi	r30, 0xE8	; 232
    5b6e:	f9 4f       	sbci	r31, 0xF9	; 249
    5b70:	24 91       	lpm	r18, Z
    5b72:	fc 01       	movw	r30, r24
    5b74:	35 e0       	ldi	r19, 0x05	; 5
    5b76:	f6 95       	lsr	r31
    5b78:	e7 95       	ror	r30
    5b7a:	3a 95       	dec	r19
    5b7c:	e1 f7       	brne	.-8      	; 0x5b76 <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    5b7e:	ef 73       	andi	r30, 0x3F	; 63
    5b80:	ff 27       	eor	r31, r31
    5b82:	e8 52       	subi	r30, 0x28	; 40
    5b84:	fa 4f       	sbci	r31, 0xFA	; 250
    5b86:	64 91       	lpm	r22, Z
    5b88:	8f 71       	andi	r24, 0x1F	; 31
    5b8a:	99 27       	eor	r25, r25
    5b8c:	fc 01       	movw	r30, r24
    5b8e:	e8 5e       	subi	r30, 0xE8	; 232
    5b90:	f9 4f       	sbci	r31, 0xF9	; 249
    5b92:	e4 91       	lpm	r30, Z
    5b94:	70 e0       	ldi	r23, 0x00	; 0
    5b96:	90 e0       	ldi	r25, 0x00	; 0
    5b98:	80 e0       	ldi	r24, 0x00	; 0
    5b9a:	98 2f       	mov	r25, r24
    5b9c:	87 2f       	mov	r24, r23
    5b9e:	76 2f       	mov	r23, r22
    5ba0:	66 27       	eor	r22, r22
    5ba2:	82 2b       	or	r24, r18
    5ba4:	6e 2b       	or	r22, r30
    5ba6:	08 95       	ret

00005ba8 <Framebuffer_GFX::fillScreen(unsigned int)>:
    5ba8:	8f 92       	push	r8
    5baa:	9f 92       	push	r9
    5bac:	af 92       	push	r10
    5bae:	bf 92       	push	r11
    5bb0:	cf 92       	push	r12
    5bb2:	df 92       	push	r13
    5bb4:	ef 92       	push	r14
    5bb6:	ff 92       	push	r15
    5bb8:	cf 93       	push	r28
    5bba:	df 93       	push	r29
    5bbc:	ec 01       	movw	r28, r24
    5bbe:	cb 01       	movw	r24, r22
    5bc0:	fe 01       	movw	r30, r28
    5bc2:	ef 5c       	subi	r30, 0xCF	; 207
    5bc4:	fe 4f       	sbci	r31, 0xFE	; 254
    5bc6:	20 81       	ld	r18, Z
    5bc8:	22 23       	and	r18, r18
    5bca:	39 f1       	breq	.+78     	; 0x5c1a <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    5bcc:	34 97       	sbiw	r30, 0x04	; 4
    5bce:	60 81       	ld	r22, Z
    5bd0:	71 81       	ldd	r23, Z+1	; 0x01
    5bd2:	82 81       	ldd	r24, Z+2	; 0x02
    5bd4:	30 e0       	ldi	r19, 0x00	; 0
    5bd6:	20 e0       	ldi	r18, 0x00	; 0
    5bd8:	c1 2c       	mov	r12, r1
    5bda:	d1 2c       	mov	r13, r1
    5bdc:	76 01       	movw	r14, r12
    5bde:	de 01       	movw	r26, r28
    5be0:	a7 5d       	subi	r26, 0xD7	; 215
    5be2:	be 4f       	sbci	r27, 0xFE	; 254
    5be4:	cb 5d       	subi	r28, 0xDB	; 219
    5be6:	de 4f       	sbci	r29, 0xFE	; 254
    5be8:	8d 90       	ld	r8, X+
    5bea:	9d 90       	ld	r9, X+
    5bec:	ad 90       	ld	r10, X+
    5bee:	bc 90       	ld	r11, X
    5bf0:	13 97       	sbiw	r26, 0x03	; 3
    5bf2:	c8 14       	cp	r12, r8
    5bf4:	d9 04       	cpc	r13, r9
    5bf6:	ea 04       	cpc	r14, r10
    5bf8:	fb 04       	cpc	r15, r11
    5bfa:	88 f4       	brcc	.+34     	; 0x5c1e <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    5bfc:	e8 81       	ld	r30, Y
    5bfe:	f9 81       	ldd	r31, Y+1	; 0x01
    5c00:	e2 0f       	add	r30, r18
    5c02:	f3 1f       	adc	r31, r19
    5c04:	80 83       	st	Z, r24
    5c06:	71 83       	std	Z+1, r23	; 0x01
    5c08:	62 83       	std	Z+2, r22	; 0x02
    5c0a:	9f ef       	ldi	r25, 0xFF	; 255
    5c0c:	c9 1a       	sub	r12, r25
    5c0e:	d9 0a       	sbc	r13, r25
    5c10:	e9 0a       	sbc	r14, r25
    5c12:	f9 0a       	sbc	r15, r25
    5c14:	2d 5f       	subi	r18, 0xFD	; 253
    5c16:	3f 4f       	sbci	r19, 0xFF	; 255
    5c18:	e7 cf       	rjmp	.-50     	; 0x5be8 <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    5c1a:	a2 df       	rcall	.-188    	; 0x5b60 <Framebuffer_GFX::expandColor(unsigned int)>
    5c1c:	db cf       	rjmp	.-74     	; 0x5bd4 <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    5c1e:	df 91       	pop	r29
    5c20:	cf 91       	pop	r28
    5c22:	ff 90       	pop	r15
    5c24:	ef 90       	pop	r14
    5c26:	df 90       	pop	r13
    5c28:	cf 90       	pop	r12
    5c2a:	bf 90       	pop	r11
    5c2c:	af 90       	pop	r10
    5c2e:	9f 90       	pop	r9
    5c30:	8f 90       	pop	r8
    5c32:	08 95       	ret

00005c34 <Framebuffer_GFX::CRGBtoint32(CRGB)>:
    5c34:	0f 93       	push	r16
    5c36:	1f 93       	push	r17
    5c38:	fc 01       	movw	r30, r24
    5c3a:	60 81       	ld	r22, Z
    5c3c:	70 e0       	ldi	r23, 0x00	; 0
    5c3e:	90 e0       	ldi	r25, 0x00	; 0
    5c40:	80 e0       	ldi	r24, 0x00	; 0
    5c42:	cb 01       	movw	r24, r22
    5c44:	77 27       	eor	r23, r23
    5c46:	66 27       	eor	r22, r22
    5c48:	01 81       	ldd	r16, Z+1	; 0x01
    5c4a:	10 e0       	ldi	r17, 0x00	; 0
    5c4c:	10 2f       	mov	r17, r16
    5c4e:	00 27       	eor	r16, r16
    5c50:	01 2e       	mov	r0, r17
    5c52:	00 0c       	add	r0, r0
    5c54:	22 0b       	sbc	r18, r18
    5c56:	33 0b       	sbc	r19, r19
    5c58:	60 0f       	add	r22, r16
    5c5a:	71 1f       	adc	r23, r17
    5c5c:	82 1f       	adc	r24, r18
    5c5e:	93 1f       	adc	r25, r19
    5c60:	22 81       	ldd	r18, Z+2	; 0x02
    5c62:	62 0f       	add	r22, r18
    5c64:	71 1d       	adc	r23, r1
    5c66:	81 1d       	adc	r24, r1
    5c68:	91 1d       	adc	r25, r1
    5c6a:	1f 91       	pop	r17
    5c6c:	0f 91       	pop	r16
    5c6e:	08 95       	ret

00005c70 <Framebuffer_GFX::XY(int, int)>:

int Framebuffer_GFX::XY(int16_t x, int16_t y) {
    5c70:	6f 92       	push	r6
    5c72:	7f 92       	push	r7
    5c74:	9f 92       	push	r9
    5c76:	af 92       	push	r10
    5c78:	bf 92       	push	r11
    5c7a:	cf 92       	push	r12
    5c7c:	df 92       	push	r13
    5c7e:	ef 92       	push	r14
    5c80:	ff 92       	push	r15
    5c82:	0f 93       	push	r16
    5c84:	1f 93       	push	r17
    5c86:	cf 93       	push	r28
    5c88:	df 93       	push	r29
    5c8a:	ec 01       	movw	r28, r24
    5c8c:	cb 01       	movw	r24, r22
    5c8e:	8a 01       	movw	r16, r20
  // If you send an out of bounds value, you get an special result 
  // pointing to the last pixel. It doesn't look great, but better
  // than crashing. Still, fix the upstream code.
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;
    5c90:	77 fd       	sbrc	r23, 7
    5c92:	0c c0       	rjmp	.+24     	; 0x5cac <Framebuffer_GFX::XY(int, int)+0x3c>
    5c94:	57 fd       	sbrc	r21, 7
    5c96:	0a c0       	rjmp	.+20     	; 0x5cac <Framebuffer_GFX::XY(int, int)+0x3c>
    5c98:	2f 81       	ldd	r18, Y+7	; 0x07
    5c9a:	38 85       	ldd	r19, Y+8	; 0x08
    5c9c:	62 17       	cp	r22, r18
    5c9e:	73 07       	cpc	r23, r19
    5ca0:	2c f4       	brge	.+10     	; 0x5cac <Framebuffer_GFX::XY(int, int)+0x3c>
    5ca2:	29 85       	ldd	r18, Y+9	; 0x09
    5ca4:	3a 85       	ldd	r19, Y+10	; 0x0a
    5ca6:	42 17       	cp	r20, r18
    5ca8:	53 07       	cpc	r21, r19
    5caa:	9c f0       	brlt	.+38     	; 0x5cd2 <Framebuffer_GFX::XY(int, int)+0x62>
    5cac:	c7 5d       	subi	r28, 0xD7	; 215
    5cae:	de 4f       	sbci	r29, 0xFE	; 254
    5cb0:	88 81       	ld	r24, Y
    5cb2:	99 81       	ldd	r25, Y+1	; 0x01
    5cb4:	01 97       	sbiw	r24, 0x01	; 1
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}
    5cb6:	df 91       	pop	r29
    5cb8:	cf 91       	pop	r28
    5cba:	1f 91       	pop	r17
    5cbc:	0f 91       	pop	r16
    5cbe:	ff 90       	pop	r15
    5cc0:	ef 90       	pop	r14
    5cc2:	df 90       	pop	r13
    5cc4:	cf 90       	pop	r12
    5cc6:	bf 90       	pop	r11
    5cc8:	af 90       	pop	r10
    5cca:	9f 90       	pop	r9
    5ccc:	7f 90       	pop	r7
    5cce:	6f 90       	pop	r6
    5cd0:	08 95       	ret
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;

  int16_t t;
  switch(rotation) {
    5cd2:	2d 89       	ldd	r18, Y+21	; 0x15
    5cd4:	22 30       	cpi	r18, 0x02	; 2
    5cd6:	d9 f0       	breq	.+54     	; 0x5d0e <Framebuffer_GFX::XY(int, int)+0x9e>
    5cd8:	23 30       	cpi	r18, 0x03	; 3
    5cda:	51 f1       	breq	.+84     	; 0x5d30 <Framebuffer_GFX::XY(int, int)+0xc0>
    5cdc:	21 30       	cpi	r18, 0x01	; 1
    5cde:	41 f4       	brne	.+16     	; 0x5cf0 <Framebuffer_GFX::XY(int, int)+0x80>
   case 1:
    t = x;
    x = WIDTH  - 1 - y;
    5ce0:	2b 81       	ldd	r18, Y+3	; 0x03
    5ce2:	3c 81       	ldd	r19, Y+4	; 0x04
    5ce4:	21 50       	subi	r18, 0x01	; 1
    5ce6:	31 09       	sbc	r19, r1
    5ce8:	24 1b       	sub	r18, r20
    5cea:	35 0b       	sbc	r19, r21
    5cec:	8b 01       	movw	r16, r22
    5cee:	c9 01       	movw	r24, r18
    break;
  }

  int tileOffset = 0, pixelOffset;

  if(remapFn) { // Custom X/Y remapping function
    5cf0:	fe 01       	movw	r30, r28
    5cf2:	e9 5d       	subi	r30, 0xD9	; 217
    5cf4:	fe 4f       	sbci	r31, 0xFE	; 254
    5cf6:	01 90       	ld	r0, Z+
    5cf8:	f0 81       	ld	r31, Z
    5cfa:	e0 2d       	mov	r30, r0
    5cfc:	30 97       	sbiw	r30, 0x00	; 0
    5cfe:	09 f1       	breq	.+66     	; 0x5d42 <Framebuffer_GFX::XY(int, int)+0xd2>
    pixelOffset = (*remapFn)(x, y);
    5d00:	b8 01       	movw	r22, r16
    5d02:	09 95       	icall
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    5d04:	50 e0       	ldi	r21, 0x00	; 0
    5d06:	40 e0       	ldi	r20, 0x00	; 0
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
    5d08:	84 0f       	add	r24, r20
    5d0a:	95 1f       	adc	r25, r21
    5d0c:	d4 cf       	rjmp	.-88     	; 0x5cb6 <Framebuffer_GFX::XY(int, int)+0x46>
    t = x;
    x = WIDTH  - 1 - y;
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
    5d0e:	2b 81       	ldd	r18, Y+3	; 0x03
    5d10:	3c 81       	ldd	r19, Y+4	; 0x04
    5d12:	21 50       	subi	r18, 0x01	; 1
    5d14:	31 09       	sbc	r19, r1
    5d16:	a9 01       	movw	r20, r18
    5d18:	46 1b       	sub	r20, r22
    5d1a:	57 0b       	sbc	r21, r23
    5d1c:	ca 01       	movw	r24, r20
    y = HEIGHT - 1 - y;
    5d1e:	2d 81       	ldd	r18, Y+5	; 0x05
    5d20:	3e 81       	ldd	r19, Y+6	; 0x06
    5d22:	21 50       	subi	r18, 0x01	; 1
    5d24:	31 09       	sbc	r19, r1
    5d26:	f9 01       	movw	r30, r18
    5d28:	e0 1b       	sub	r30, r16
    5d2a:	f1 0b       	sbc	r31, r17
    5d2c:	8f 01       	movw	r16, r30
    5d2e:	e0 cf       	rjmp	.-64     	; 0x5cf0 <Framebuffer_GFX::XY(int, int)+0x80>
    break;
   case 3:
    t = x;
    x = y;
    y = HEIGHT - 1 - t;
    5d30:	2d 81       	ldd	r18, Y+5	; 0x05
    5d32:	3e 81       	ldd	r19, Y+6	; 0x06
    5d34:	21 50       	subi	r18, 0x01	; 1
    5d36:	31 09       	sbc	r19, r1
    5d38:	26 1b       	sub	r18, r22
    5d3a:	37 0b       	sbc	r19, r23
    5d3c:	ca 01       	movw	r24, r20
    5d3e:	89 01       	movw	r16, r18
    5d40:	d7 cf       	rjmp	.-82     	; 0x5cf0 <Framebuffer_GFX::XY(int, int)+0x80>

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    5d42:	fe 01       	movw	r30, r28
    5d44:	e6 5e       	subi	r30, 0xE6	; 230
    5d46:	fe 4f       	sbci	r31, 0xFE	; 254
    5d48:	d0 80       	ld	r13, Z
    5d4a:	fd 2d       	mov	r31, r13
    5d4c:	f3 70       	andi	r31, 0x03	; 3
    5d4e:	cf 2e       	mov	r12, r31
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    5d50:	fe 01       	movw	r30, r28
    5d52:	e5 5e       	subi	r30, 0xE5	; 229
    5d54:	fe 4f       	sbci	r31, 0xFE	; 254
    5d56:	b0 80       	ld	r11, Z
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    5d58:	50 e0       	ldi	r21, 0x00	; 0
    5d5a:	40 e0       	ldi	r20, 0x00	; 0
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    5d5c:	bb 20       	and	r11, r11
    5d5e:	09 f4       	brne	.+2      	; 0x5d62 <Framebuffer_GFX::XY(int, int)+0xf2>
    5d60:	64 c0       	rjmp	.+200    	; 0x5e2a <Framebuffer_GFX::XY(int, int)+0x1ba>
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
    5d62:	32 96       	adiw	r30, 0x02	; 2
    5d64:	e0 80       	ld	r14, Z
    5d66:	f1 80       	ldd	r15, Z+1	; 0x01
    5d68:	b7 01       	movw	r22, r14
    5d6a:	0e 94 0e 41 	call	0x821c	; 0x821c <__udivmodhi4>
    5d6e:	9b 01       	movw	r18, r22
    5d70:	98 2e       	mov	r9, r24
    5d72:	a9 2e       	mov	r10, r25
      major = y / matrixHeight,           // start (will swap later if needed)
    5d74:	32 96       	adiw	r30, 0x02	; 2
    5d76:	60 80       	ld	r6, Z
    5d78:	71 80       	ldd	r7, Z+1	; 0x01
    5d7a:	c8 01       	movw	r24, r16
    5d7c:	b3 01       	movw	r22, r6
    5d7e:	0e 94 0e 41 	call	0x821c	; 0x821c <__udivmodhi4>
    5d82:	db 01       	movw	r26, r22
    5d84:	58 2f       	mov	r21, r24
    5d86:	49 2f       	mov	r20, r25
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
    5d88:	89 2d       	mov	r24, r9
    5d8a:	9a 2d       	mov	r25, r10
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
    5d8c:	05 2f       	mov	r16, r21
    5d8e:	14 2f       	mov	r17, r20

      // Determine corner of entry, flip axes if needed
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
    5d90:	d5 fe       	sbrs	r13, 5
    5d92:	06 c0       	rjmp	.+12     	; 0x5da0 <Framebuffer_GFX::XY(int, int)+0x130>
    5d94:	4b 2d       	mov	r20, r11
    5d96:	41 50       	subi	r20, 0x01	; 1
    5d98:	55 0b       	sbc	r21, r21
    5d9a:	42 1b       	sub	r20, r18
    5d9c:	53 0b       	sbc	r21, r19
    5d9e:	9a 01       	movw	r18, r20
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
    5da0:	d4 fe       	sbrs	r13, 4
    5da2:	09 c0       	rjmp	.+18     	; 0x5db6 <Framebuffer_GFX::XY(int, int)+0x146>
    5da4:	ae 01       	movw	r20, r28
    5da6:	44 5e       	subi	r20, 0xE4	; 228
    5da8:	5e 4f       	sbci	r21, 0xFE	; 254
    5daa:	fa 01       	movw	r30, r20
    5dac:	60 81       	ld	r22, Z
    5dae:	61 50       	subi	r22, 0x01	; 1
    5db0:	77 0b       	sbc	r23, r23
    5db2:	6a 1b       	sub	r22, r26
    5db4:	7b 0b       	sbc	r23, r27

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
    5db6:	d6 fc       	sbrc	r13, 6
    5db8:	11 c0       	rjmp	.+34     	; 0x5ddc <Framebuffer_GFX::XY(int, int)+0x16c>
        majorScale = tilesX;
    5dba:	4b 2d       	mov	r20, r11
    5dbc:	50 e0       	ldi	r21, 0x00	; 0
    5dbe:	b6 2f       	mov	r27, r22
    5dc0:	a7 2f       	mov	r26, r23
    5dc2:	b9 01       	movw	r22, r18
    5dc4:	2b 2f       	mov	r18, r27
    5dc6:	3a 2f       	mov	r19, r26
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
    5dc8:	d7 fc       	sbrc	r13, 7
    5dca:	0e c0       	rjmp	.+28     	; 0x5de8 <Framebuffer_GFX::XY(int, int)+0x178>
        // pixel math later.
        if(major & 1) {
          corner ^= NEO_MATRIX_CORNER;
          tile = (major + 1) * majorScale - 1 - minor;
        } else {
          tile =  major      * majorScale     + minor;
    5dcc:	24 9f       	mul	r18, r20
    5dce:	d0 01       	movw	r26, r0
    5dd0:	25 9f       	mul	r18, r21
    5dd2:	b0 0d       	add	r27, r0
    5dd4:	34 9f       	mul	r19, r20
    5dd6:	b0 0d       	add	r27, r0
    5dd8:	11 24       	eor	r1, r1
    5dda:	17 c0       	rjmp	.+46     	; 0x5e0a <Framebuffer_GFX::XY(int, int)+0x19a>
      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
        majorScale = tilesX;
      } else {
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
    5ddc:	de 01       	movw	r26, r28
    5dde:	a4 5e       	subi	r26, 0xE4	; 228
    5de0:	be 4f       	sbci	r27, 0xFE	; 254
    5de2:	4c 91       	ld	r20, X
    5de4:	50 e0       	ldi	r21, 0x00	; 0
    5de6:	f0 cf       	rjmp	.-32     	; 0x5dc8 <Framebuffer_GFX::XY(int, int)+0x158>
        tile = major * majorScale + minor;
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
    5de8:	20 ff       	sbrs	r18, 0
    5dea:	f0 cf       	rjmp	.-32     	; 0x5dcc <Framebuffer_GFX::XY(int, int)+0x15c>
          corner ^= NEO_MATRIX_CORNER;
    5dec:	ad 2d       	mov	r26, r13
    5dee:	a0 95       	com	r26
    5df0:	a3 70       	andi	r26, 0x03	; 3
    5df2:	ca 2e       	mov	r12, r26
          tile = (major + 1) * majorScale - 1 - minor;
    5df4:	2f 5f       	subi	r18, 0xFF	; 255
    5df6:	3f 4f       	sbci	r19, 0xFF	; 255
    5df8:	24 9f       	mul	r18, r20
    5dfa:	d0 01       	movw	r26, r0
    5dfc:	25 9f       	mul	r18, r21
    5dfe:	b0 0d       	add	r27, r0
    5e00:	34 9f       	mul	r19, r20
    5e02:	b0 0d       	add	r27, r0
    5e04:	11 24       	eor	r1, r1
    5e06:	60 95       	com	r22
    5e08:	70 95       	com	r23
        } else {
          tile =  major      * majorScale     + minor;
    5e0a:	6a 0f       	add	r22, r26
    5e0c:	7b 1f       	adc	r23, r27
        }
      }

      // Index of first pixel in tile
      tileOffset = tile * matrixWidth * matrixHeight;
    5e0e:	e6 9c       	mul	r14, r6
    5e10:	90 01       	movw	r18, r0
    5e12:	e7 9c       	mul	r14, r7
    5e14:	30 0d       	add	r19, r0
    5e16:	f6 9c       	mul	r15, r6
    5e18:	30 0d       	add	r19, r0
    5e1a:	11 24       	eor	r1, r1
    5e1c:	26 9f       	mul	r18, r22
    5e1e:	a0 01       	movw	r20, r0
    5e20:	27 9f       	mul	r18, r23
    5e22:	50 0d       	add	r21, r0
    5e24:	36 9f       	mul	r19, r22
    5e26:	50 0d       	add	r21, r0
    5e28:	11 24       	eor	r1, r1

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;
    5e2a:	98 01       	movw	r18, r16

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    5e2c:	6c 2d       	mov	r22, r12
    5e2e:	62 70       	andi	r22, 0x02	; 2
    5e30:	59 f0       	breq	.+22     	; 0x5e48 <Framebuffer_GFX::XY(int, int)+0x1d8>
    5e32:	fe 01       	movw	r30, r28
    5e34:	e3 5e       	subi	r30, 0xE3	; 227
    5e36:	fe 4f       	sbci	r31, 0xFE	; 254
    5e38:	60 81       	ld	r22, Z
    5e3a:	71 81       	ldd	r23, Z+1	; 0x01
    5e3c:	61 50       	subi	r22, 0x01	; 1
    5e3e:	71 09       	sbc	r23, r1
    5e40:	fb 01       	movw	r30, r22
    5e42:	e8 1b       	sub	r30, r24
    5e44:	f9 0b       	sbc	r31, r25
    5e46:	cf 01       	movw	r24, r30
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
    5e48:	c0 fe       	sbrs	r12, 0
    5e4a:	09 c0       	rjmp	.+18     	; 0x5e5e <Framebuffer_GFX::XY(int, int)+0x1ee>
    5e4c:	fe 01       	movw	r30, r28
    5e4e:	e1 5e       	subi	r30, 0xE1	; 225
    5e50:	fe 4f       	sbci	r31, 0xFE	; 254
    5e52:	20 81       	ld	r18, Z
    5e54:	31 81       	ldd	r19, Z+1	; 0x01
    5e56:	21 50       	subi	r18, 0x01	; 1
    5e58:	31 09       	sbc	r19, r1
    5e5a:	20 1b       	sub	r18, r16
    5e5c:	31 0b       	sbc	r19, r17

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
    5e5e:	d2 fc       	sbrc	r13, 2
    5e60:	13 c0       	rjmp	.+38     	; 0x5e88 <Framebuffer_GFX::XY(int, int)+0x218>
      majorScale = matrixWidth;
    5e62:	c3 5e       	subi	r28, 0xE3	; 227
    5e64:	de 4f       	sbci	r29, 0xFE	; 254
    5e66:	68 81       	ld	r22, Y
    5e68:	79 81       	ldd	r23, Y+1	; 0x01
    5e6a:	f2 2f       	mov	r31, r18
    5e6c:	e3 2f       	mov	r30, r19
    5e6e:	9c 01       	movw	r18, r24
    5e70:	8f 2f       	mov	r24, r31
    5e72:	9e 2f       	mov	r25, r30
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    }

    // Determine pixel number within tile/matrix
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
    5e74:	d3 fc       	sbrc	r13, 3
    5e76:	0d c0       	rjmp	.+26     	; 0x5e92 <Framebuffer_GFX::XY(int, int)+0x222>
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
      else          pixelOffset =  major      * majorScale     + minor;
    5e78:	86 9f       	mul	r24, r22
    5e7a:	f0 01       	movw	r30, r0
    5e7c:	87 9f       	mul	r24, r23
    5e7e:	f0 0d       	add	r31, r0
    5e80:	96 9f       	mul	r25, r22
    5e82:	f0 0d       	add	r31, r0
    5e84:	11 24       	eor	r1, r1
    5e86:	11 c0       	rjmp	.+34     	; 0x5eaa <Framebuffer_GFX::XY(int, int)+0x23a>
    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
      majorScale = matrixWidth;
    } else {
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    5e88:	c1 5e       	subi	r28, 0xE1	; 225
    5e8a:	de 4f       	sbci	r29, 0xFE	; 254
    5e8c:	68 81       	ld	r22, Y
    5e8e:	79 81       	ldd	r23, Y+1	; 0x01
    5e90:	f1 cf       	rjmp	.-30     	; 0x5e74 <Framebuffer_GFX::XY(int, int)+0x204>
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
    5e92:	80 ff       	sbrs	r24, 0
    5e94:	f1 cf       	rjmp	.-30     	; 0x5e78 <Framebuffer_GFX::XY(int, int)+0x208>
    5e96:	01 96       	adiw	r24, 0x01	; 1
    5e98:	86 9f       	mul	r24, r22
    5e9a:	f0 01       	movw	r30, r0
    5e9c:	87 9f       	mul	r24, r23
    5e9e:	f0 0d       	add	r31, r0
    5ea0:	96 9f       	mul	r25, r22
    5ea2:	f0 0d       	add	r31, r0
    5ea4:	11 24       	eor	r1, r1
    5ea6:	20 95       	com	r18
    5ea8:	30 95       	com	r19
      else          pixelOffset =  major      * majorScale     + minor;
    5eaa:	cf 01       	movw	r24, r30
    5eac:	82 0f       	add	r24, r18
    5eae:	93 1f       	adc	r25, r19
    5eb0:	2b cf       	rjmp	.-426    	; 0x5d08 <Framebuffer_GFX::XY(int, int)+0x98>

00005eb2 <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {
    5eb2:	9f 92       	push	r9
    5eb4:	af 92       	push	r10
    5eb6:	bf 92       	push	r11
    5eb8:	cf 92       	push	r12
    5eba:	df 92       	push	r13
    5ebc:	ef 92       	push	r14
    5ebe:	ff 92       	push	r15
    5ec0:	0f 93       	push	r16
    5ec2:	1f 93       	push	r17
    5ec4:	cf 93       	push	r28
    5ec6:	df 93       	push	r29
    5ec8:	ec 01       	movw	r28, r24

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    5eca:	77 fd       	sbrc	r23, 7
    5ecc:	2b c0       	rjmp	.+86     	; 0x5f24 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    5ece:	57 fd       	sbrc	r21, 7
    5ed0:	29 c0       	rjmp	.+82     	; 0x5f24 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    5ed2:	8f 81       	ldd	r24, Y+7	; 0x07
    5ed4:	98 85       	ldd	r25, Y+8	; 0x08
    5ed6:	68 17       	cp	r22, r24
    5ed8:	79 07       	cpc	r23, r25
    5eda:	24 f5       	brge	.+72     	; 0x5f24 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    5edc:	89 85       	ldd	r24, Y+9	; 0x09
    5ede:	9a 85       	ldd	r25, Y+10	; 0x0a
    5ee0:	48 17       	cp	r20, r24
    5ee2:	59 07       	cpc	r21, r25
    5ee4:	fc f4       	brge	.+62     	; 0x5f24 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    5ee6:	6a 01       	movw	r12, r20
    5ee8:	7b 01       	movw	r14, r22

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    5eea:	fe 01       	movw	r30, r28
    5eec:	ef 5c       	subi	r30, 0xCF	; 207
    5eee:	fe 4f       	sbci	r31, 0xFE	; 254
    5ef0:	80 81       	ld	r24, Z
    5ef2:	88 23       	and	r24, r24
    5ef4:	19 f1       	breq	.+70     	; 0x5f3c <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    5ef6:	34 97       	sbiw	r30, 0x04	; 4
    5ef8:	b0 80       	ld	r11, Z
    5efa:	a1 80       	ldd	r10, Z+1	; 0x01
    5efc:	92 80       	ldd	r9, Z+2	; 0x02
    5efe:	fe 01       	movw	r30, r28
    5f00:	eb 5d       	subi	r30, 0xDB	; 219
    5f02:	fe 4f       	sbci	r31, 0xFE	; 254
    5f04:	00 81       	ld	r16, Z
    5f06:	11 81       	ldd	r17, Z+1	; 0x01
    5f08:	a6 01       	movw	r20, r12
    5f0a:	b7 01       	movw	r22, r14
    5f0c:	ce 01       	movw	r24, r28
    5f0e:	b0 de       	rcall	.-672    	; 0x5c70 <Framebuffer_GFX::XY(int, int)>
    5f10:	fc 01       	movw	r30, r24
    5f12:	ee 0f       	add	r30, r30
    5f14:	ff 1f       	adc	r31, r31
    5f16:	e8 0f       	add	r30, r24
    5f18:	f9 1f       	adc	r31, r25
    5f1a:	e0 0f       	add	r30, r16
    5f1c:	f1 1f       	adc	r31, r17
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    5f1e:	90 82       	st	Z, r9
        g = (colorcode >>  8) & 0xFF;
    5f20:	a1 82       	std	Z+1, r10	; 0x01
        b = (colorcode >>  0) & 0xFF;
    5f22:	b2 82       	std	Z+2, r11	; 0x02
}
    5f24:	df 91       	pop	r29
    5f26:	cf 91       	pop	r28
    5f28:	1f 91       	pop	r17
    5f2a:	0f 91       	pop	r16
    5f2c:	ff 90       	pop	r15
    5f2e:	ef 90       	pop	r14
    5f30:	df 90       	pop	r13
    5f32:	cf 90       	pop	r12
    5f34:	bf 90       	pop	r11
    5f36:	af 90       	pop	r10
    5f38:	9f 90       	pop	r9
    5f3a:	08 95       	ret

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    5f3c:	c9 01       	movw	r24, r18
    5f3e:	10 de       	rcall	.-992    	; 0x5b60 <Framebuffer_GFX::expandColor(unsigned int)>
    5f40:	b6 2e       	mov	r11, r22
    5f42:	a7 2e       	mov	r10, r23
    5f44:	98 2e       	mov	r9, r24
    5f46:	db cf       	rjmp	.-74     	; 0x5efe <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

00005f48 <Framebuffer_GFX::drawPixel(int, int, unsigned long)>:
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint32_t color) {
    5f48:	ff 92       	push	r15
    5f4a:	0f 93       	push	r16
    5f4c:	1f 93       	push	r17
    5f4e:	cf 93       	push	r28
    5f50:	df 93       	push	r29
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    5f52:	77 fd       	sbrc	r23, 7
    5f54:	21 c0       	rjmp	.+66     	; 0x5f98 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    5f56:	57 fd       	sbrc	r21, 7
    5f58:	1f c0       	rjmp	.+62     	; 0x5f98 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    5f5a:	dc 01       	movw	r26, r24
    5f5c:	17 96       	adiw	r26, 0x07	; 7
    5f5e:	ed 91       	ld	r30, X+
    5f60:	fc 91       	ld	r31, X
    5f62:	18 97       	sbiw	r26, 0x08	; 8
    5f64:	6e 17       	cp	r22, r30
    5f66:	7f 07       	cpc	r23, r31
    5f68:	bc f4       	brge	.+46     	; 0x5f98 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    5f6a:	19 96       	adiw	r26, 0x09	; 9
    5f6c:	ed 91       	ld	r30, X+
    5f6e:	fc 91       	ld	r31, X
    5f70:	4e 17       	cp	r20, r30
    5f72:	5f 07       	cpc	r21, r31
    5f74:	8c f4       	brge	.+34     	; 0x5f98 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    5f76:	f2 2e       	mov	r15, r18
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif

  _fb[XY(x,y)] = color;
    5f78:	fc 01       	movw	r30, r24
    5f7a:	eb 5d       	subi	r30, 0xDB	; 219
    5f7c:	fe 4f       	sbci	r31, 0xFE	; 254
    5f7e:	c0 81       	ld	r28, Z
    5f80:	d1 81       	ldd	r29, Z+1	; 0x01
    5f82:	76 de       	rcall	.-788    	; 0x5c70 <Framebuffer_GFX::XY(int, int)>
    5f84:	fc 01       	movw	r30, r24
    5f86:	ee 0f       	add	r30, r30
    5f88:	ff 1f       	adc	r31, r31
    5f8a:	e8 0f       	add	r30, r24
    5f8c:	f9 1f       	adc	r31, r25
    5f8e:	ec 0f       	add	r30, r28
    5f90:	fd 1f       	adc	r31, r29
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    5f92:	f0 82       	st	Z, r15
        g = (colorcode >>  8) & 0xFF;
    5f94:	11 83       	std	Z+1, r17	; 0x01
        b = (colorcode >>  0) & 0xFF;
    5f96:	02 83       	std	Z+2, r16	; 0x02
}
    5f98:	df 91       	pop	r29
    5f9a:	cf 91       	pop	r28
    5f9c:	1f 91       	pop	r17
    5f9e:	0f 91       	pop	r16
    5fa0:	ff 90       	pop	r15
    5fa2:	08 95       	ret

00005fa4 <Framebuffer_GFX::drawPixel(int, int, CRGB)>:

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
    5fa4:	af 92       	push	r10
    5fa6:	bf 92       	push	r11
    5fa8:	cf 92       	push	r12
    5faa:	df 92       	push	r13
    5fac:	ef 92       	push	r14
    5fae:	ff 92       	push	r15
    5fb0:	0f 93       	push	r16
    5fb2:	1f 93       	push	r17
    5fb4:	cf 93       	push	r28
    5fb6:	df 93       	push	r29
    5fb8:	00 d0       	rcall	.+0      	; 0x5fba <Framebuffer_GFX::drawPixel(int, int, CRGB)+0x16>
    5fba:	1f 92       	push	r1
    5fbc:	cd b7       	in	r28, 0x3d	; 61
    5fbe:	de b7       	in	r29, 0x3e	; 62
    5fc0:	7c 01       	movw	r14, r24
    5fc2:	6b 01       	movw	r12, r22
    5fc4:	5a 01       	movw	r10, r20
    5fc6:	f9 01       	movw	r30, r18
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    5fc8:	80 81       	ld	r24, Z
    5fca:	89 83       	std	Y+1, r24	; 0x01
        g = rhs.g;
    5fcc:	81 81       	ldd	r24, Z+1	; 0x01
    5fce:	8a 83       	std	Y+2, r24	; 0x02
        b = rhs.b;
    5fd0:	82 81       	ldd	r24, Z+2	; 0x02
    5fd2:	8b 83       	std	Y+3, r24	; 0x03
  drawPixel(x, y, CRGBtoint32(c));
    5fd4:	ce 01       	movw	r24, r28
    5fd6:	01 96       	adiw	r24, 0x01	; 1
    5fd8:	2d de       	rcall	.-934    	; 0x5c34 <Framebuffer_GFX::CRGBtoint32(CRGB)>
    5fda:	8b 01       	movw	r16, r22
    5fdc:	9c 01       	movw	r18, r24
    5fde:	a5 01       	movw	r20, r10
    5fe0:	b6 01       	movw	r22, r12
    5fe2:	c7 01       	movw	r24, r14
    5fe4:	b1 df       	rcall	.-158    	; 0x5f48 <Framebuffer_GFX::drawPixel(int, int, unsigned long)>
}
    5fe6:	0f 90       	pop	r0
    5fe8:	0f 90       	pop	r0
    5fea:	0f 90       	pop	r0
    5fec:	df 91       	pop	r29
    5fee:	cf 91       	pop	r28
    5ff0:	1f 91       	pop	r17
    5ff2:	0f 91       	pop	r16
    5ff4:	ff 90       	pop	r15
    5ff6:	ef 90       	pop	r14
    5ff8:	df 90       	pop	r13
    5ffa:	cf 90       	pop	r12
    5ffc:	bf 90       	pop	r11
    5ffe:	af 90       	pop	r10
    6000:	08 95       	ret

00006002 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    6002:	89 5d       	subi	r24, 0xD9	; 217
    6004:	9e 4f       	sbci	r25, 0xFE	; 254
    6006:	fc 01       	movw	r30, r24
    6008:	71 83       	std	Z+1, r23	; 0x01
    600a:	60 83       	st	Z, r22
}
    600c:	08 95       	ret

0000600e <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    600e:	da 01       	movw	r26, r20
    6010:	fc 01       	movw	r30, r24
    6012:	90 e0       	ldi	r25, 0x00	; 0
    6014:	80 e0       	ldi	r24, 0x00	; 0
    6016:	86 17       	cp	r24, r22
    6018:	97 07       	cpc	r25, r23
    601a:	6c f4       	brge	.+26     	; 0x6036 <fill_solid(CRGB*, int, CRGB const&)+0x28>
    601c:	2c 91       	ld	r18, X
    601e:	20 83       	st	Z, r18
    6020:	11 96       	adiw	r26, 0x01	; 1
    6022:	2c 91       	ld	r18, X
    6024:	11 97       	sbiw	r26, 0x01	; 1
    6026:	21 83       	std	Z+1, r18	; 0x01
    6028:	12 96       	adiw	r26, 0x02	; 2
    602a:	2c 91       	ld	r18, X
    602c:	12 97       	sbiw	r26, 0x02	; 2
    602e:	22 83       	std	Z+2, r18	; 0x02
    6030:	01 96       	adiw	r24, 0x01	; 1
    6032:	33 96       	adiw	r30, 0x03	; 3
    6034:	f0 cf       	rjmp	.-32     	; 0x6016 <fill_solid(CRGB*, int, CRGB const&)+0x8>
    6036:	08 95       	ret

00006038 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    6038:	0f 93       	push	r16
    603a:	1f 93       	push	r17
    603c:	cf 93       	push	r28
    603e:	df 93       	push	r29
    6040:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    6042:	84 2f       	mov	r24, r20
    6044:	82 95       	swap	r24
    6046:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    6048:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    604a:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    604c:	a8 2f       	mov	r26, r24
    604e:	aa 0f       	add	r26, r26
    6050:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    6052:	a6 0f       	add	r26, r22
    6054:	b7 2f       	mov	r27, r23
    6056:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    6058:	44 23       	and	r20, r20
    605a:	19 f0       	breq	.+6      	; 0x6062 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    605c:	31 e0       	ldi	r19, 0x01	; 1
    605e:	01 2b       	or	r16, r17
    6060:	09 f4       	brne	.+2      	; 0x6064 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    6062:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    6064:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    6066:	11 96       	adiw	r26, 0x01	; 1
    6068:	5c 91       	ld	r21, X
    606a:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    606c:	12 96       	adiw	r26, 0x02	; 2
    606e:	9c 91       	ld	r25, X
    6070:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    6072:	33 23       	and	r19, r19
    6074:	09 f4       	brne	.+2      	; 0x6078 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    6076:	2a c0       	rjmp	.+84     	; 0x60cc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    6078:	8f 30       	cpi	r24, 0x0F	; 15
    607a:	11 f0       	breq	.+4      	; 0x6080 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    607c:	ed 01       	movw	r28, r26
    607e:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    6080:	42 95       	swap	r20
    6082:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    6084:	74 2f       	mov	r23, r20
    6086:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    6088:	67 9f       	mul	r22, r23
    608a:	06 0e       	add	r0, r22
    608c:	60 e0       	ldi	r22, 0x00	; 0
    608e:	61 1d       	adc	r22, r1
    6090:	38 81       	ld	r19, Y
    6092:	34 9f       	mul	r19, r20
    6094:	03 0e       	add	r0, r19
    6096:	30 e0       	ldi	r19, 0x00	; 0
    6098:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    609a:	63 0f       	add	r22, r19
    609c:	57 9f       	mul	r21, r23
    609e:	05 0e       	add	r0, r21
    60a0:	50 e0       	ldi	r21, 0x00	; 0
    60a2:	51 1d       	adc	r21, r1
    60a4:	39 81       	ldd	r19, Y+1	; 0x01
    60a6:	34 9f       	mul	r19, r20
    60a8:	03 0e       	add	r0, r19
    60aa:	30 e0       	ldi	r19, 0x00	; 0
    60ac:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    60ae:	53 0f       	add	r21, r19
    60b0:	39 2f       	mov	r19, r25
    60b2:	37 9f       	mul	r19, r23
    60b4:	03 0e       	add	r0, r19
    60b6:	30 e0       	ldi	r19, 0x00	; 0
    60b8:	31 1d       	adc	r19, r1
    60ba:	9a 81       	ldd	r25, Y+2	; 0x02
    60bc:	79 2f       	mov	r23, r25
    60be:	74 9f       	mul	r23, r20
    60c0:	07 0e       	add	r0, r23
    60c2:	70 e0       	ldi	r23, 0x00	; 0
    60c4:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    60c6:	93 2f       	mov	r25, r19
    60c8:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    60ca:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    60cc:	2f 3f       	cpi	r18, 0xFF	; 255
    60ce:	c1 f0       	breq	.+48     	; 0x6100 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    60d0:	22 23       	and	r18, r18
    60d2:	f9 f0       	breq	.+62     	; 0x6112 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    60d4:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    60d6:	66 23       	and	r22, r22
    60d8:	21 f0       	breq	.+8      	; 0x60e2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    60da:	62 9f       	mul	r22, r18
    60dc:	06 0e       	add	r0, r22
    60de:	60 e0       	ldi	r22, 0x00	; 0
    60e0:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    60e2:	55 23       	and	r21, r21
    60e4:	21 f0       	breq	.+8      	; 0x60ee <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    60e6:	52 9f       	mul	r21, r18
    60e8:	05 0e       	add	r0, r21
    60ea:	50 e0       	ldi	r21, 0x00	; 0
    60ec:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    60ee:	99 23       	and	r25, r25
    60f0:	31 f0       	breq	.+12     	; 0x60fe <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    60f2:	39 2f       	mov	r19, r25
    60f4:	32 9f       	mul	r19, r18
    60f6:	03 0e       	add	r0, r19
    60f8:	30 e0       	ldi	r19, 0x00	; 0
    60fa:	31 1d       	adc	r19, r1
    60fc:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    60fe:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    6100:	60 83       	st	Z, r22
    6102:	51 83       	std	Z+1, r21	; 0x01
    6104:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    6106:	cf 01       	movw	r24, r30
    6108:	df 91       	pop	r29
    610a:	cf 91       	pop	r28
    610c:	1f 91       	pop	r17
    610e:	0f 91       	pop	r16
    6110:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    6112:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    6114:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    6116:	60 e0       	ldi	r22, 0x00	; 0
    6118:	f3 cf       	rjmp	.-26     	; 0x6100 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

0000611a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    611a:	7f 92       	push	r7
    611c:	8f 92       	push	r8
    611e:	9f 92       	push	r9
    6120:	af 92       	push	r10
    6122:	bf 92       	push	r11
    6124:	cf 92       	push	r12
    6126:	df 92       	push	r13
    6128:	ef 92       	push	r14
    612a:	ff 92       	push	r15
    612c:	0f 93       	push	r16
    612e:	1f 93       	push	r17
    6130:	cf 93       	push	r28
    6132:	df 93       	push	r29
    6134:	fc 01       	movw	r30, r24
    6136:	69 01       	movw	r12, r18
    6138:	10 82       	st	Z, r1
    613a:	11 82       	std	Z+1, r1	; 0x01
    613c:	12 82       	std	Z+2, r1	; 0x02
    613e:	66 23       	and	r22, r22
    6140:	b9 f1       	breq	.+110    	; 0x61b0 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    6142:	8a 01       	movw	r16, r20
    6144:	c1 e0       	ldi	r28, 0x01	; 1
    6146:	d0 e0       	ldi	r29, 0x00	; 0
    6148:	86 2e       	mov	r8, r22
    614a:	91 2c       	mov	r9, r1
    614c:	b1 2c       	mov	r11, r1
    614e:	a1 2c       	mov	r10, r1
    6150:	d8 01       	movw	r26, r16
    6152:	2d 91       	ld	r18, X+
    6154:	8d 01       	movw	r16, r26
    6156:	22 23       	and	r18, r18
    6158:	39 f1       	breq	.+78     	; 0x61a8 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    615a:	7e 01       	movw	r14, r28
    615c:	b1 e0       	ldi	r27, 0x01	; 1
    615e:	eb 1a       	sub	r14, r27
    6160:	f1 08       	sbc	r15, r1
    6162:	d6 01       	movw	r26, r12
    6164:	ae 0d       	add	r26, r14
    6166:	bf 1d       	adc	r27, r15
    6168:	7c 90       	ld	r7, X
    616a:	77 20       	and	r7, r7
    616c:	e9 f0       	breq	.+58     	; 0x61a8 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    616e:	30 e0       	ldi	r19, 0x00	; 0
    6170:	50 e0       	ldi	r21, 0x00	; 0
    6172:	40 e0       	ldi	r20, 0x00	; 0
    6174:	2f 5f       	subi	r18, 0xFF	; 255
    6176:	3f 4f       	sbci	r19, 0xFF	; 255
    6178:	4f 4f       	sbci	r20, 0xFF	; 255
    617a:	5f 4f       	sbci	r21, 0xFF	; 255
    617c:	c5 01       	movw	r24, r10
    617e:	b4 01       	movw	r22, r8
    6180:	0e 94 ff 40 	call	0x81fe	; 0x81fe <__mulsi3>
    6184:	9b 01       	movw	r18, r22
    6186:	ac 01       	movw	r20, r24
    6188:	87 2d       	mov	r24, r7
    618a:	90 e0       	ldi	r25, 0x00	; 0
    618c:	b0 e0       	ldi	r27, 0x00	; 0
    618e:	a0 e0       	ldi	r26, 0x00	; 0
    6190:	bc 01       	movw	r22, r24
    6192:	cd 01       	movw	r24, r26
    6194:	6f 5f       	subi	r22, 0xFF	; 255
    6196:	7f 4f       	sbci	r23, 0xFF	; 255
    6198:	8f 4f       	sbci	r24, 0xFF	; 255
    619a:	9f 4f       	sbci	r25, 0xFF	; 255
    619c:	0e 94 ff 40 	call	0x81fe	; 0x81fe <__mulsi3>
    61a0:	df 01       	movw	r26, r30
    61a2:	ae 0d       	add	r26, r14
    61a4:	bf 1d       	adc	r27, r15
    61a6:	8c 93       	st	X, r24
    61a8:	21 96       	adiw	r28, 0x01	; 1
    61aa:	c4 30       	cpi	r28, 0x04	; 4
    61ac:	d1 05       	cpc	r29, r1
    61ae:	81 f6       	brne	.-96     	; 0x6150 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    61b0:	cf 01       	movw	r24, r30
    61b2:	df 91       	pop	r29
    61b4:	cf 91       	pop	r28
    61b6:	1f 91       	pop	r17
    61b8:	0f 91       	pop	r16
    61ba:	ff 90       	pop	r15
    61bc:	ef 90       	pop	r14
    61be:	df 90       	pop	r13
    61c0:	cf 90       	pop	r12
    61c2:	bf 90       	pop	r11
    61c4:	af 90       	pop	r10
    61c6:	9f 90       	pop	r9
    61c8:	8f 90       	pop	r8
    61ca:	7f 90       	pop	r7
    61cc:	08 95       	ret

000061ce <CFastLED::CFastLED()>:
    61ce:	fc 01       	movw	r30, r24
    61d0:	8f ef       	ldi	r24, 0xFF	; 255
    61d2:	80 83       	st	Z, r24
    61d4:	12 82       	std	Z+2, r1	; 0x02
    61d6:	11 82       	std	Z+1, r1	; 0x01
    61d8:	14 86       	std	Z+12, r1	; 0x0c
    61da:	13 86       	std	Z+11, r1	; 0x0b
    61dc:	8f ef       	ldi	r24, 0xFF	; 255
    61de:	9f ef       	ldi	r25, 0xFF	; 255
    61e0:	dc 01       	movw	r26, r24
    61e2:	87 83       	std	Z+7, r24	; 0x07
    61e4:	90 87       	std	Z+8, r25	; 0x08
    61e6:	a1 87       	std	Z+9, r26	; 0x09
    61e8:	b2 87       	std	Z+10, r27	; 0x0a
    61ea:	08 95       	ret

000061ec <CFastLED::clearData()>:
    61ec:	cf 93       	push	r28
    61ee:	df 93       	push	r29
    61f0:	c0 91 0b 10 	lds	r28, 0x100B	; 0x80100b <CLEDController::m_pHead>
    61f4:	d0 91 0c 10 	lds	r29, 0x100C	; 0x80100c <CLEDController::m_pHead+0x1>
    61f8:	20 97       	sbiw	r28, 0x00	; 0
    61fa:	89 f0       	breq	.+34     	; 0x621e <CFastLED::clearData()+0x32>
    61fc:	8a 81       	ldd	r24, Y+2	; 0x02
    61fe:	9b 81       	ldd	r25, Y+3	; 0x03
    6200:	00 97       	sbiw	r24, 0x00	; 0
    6202:	49 f0       	breq	.+18     	; 0x6216 <CFastLED::clearData()+0x2a>
    6204:	2d 85       	ldd	r18, Y+13	; 0x0d
    6206:	3e 85       	ldd	r19, Y+14	; 0x0e
    6208:	a9 01       	movw	r20, r18
    620a:	44 0f       	add	r20, r20
    620c:	55 1f       	adc	r21, r21
    620e:	42 0f       	add	r20, r18
    6210:	53 1f       	adc	r21, r19
    6212:	60 e0       	ldi	r22, 0x00	; 0
    6214:	d0 d2       	rcall	.+1440   	; 0x67b6 <memset8>
    6216:	0c 80       	ldd	r0, Y+4	; 0x04
    6218:	dd 81       	ldd	r29, Y+5	; 0x05
    621a:	c0 2d       	mov	r28, r0
    621c:	ed cf       	rjmp	.-38     	; 0x61f8 <CFastLED::clearData()+0xc>
    621e:	df 91       	pop	r29
    6220:	cf 91       	pop	r28
    6222:	08 95       	ret

00006224 <CFastLED::countFPS(int)>:
    6224:	cf 92       	push	r12
    6226:	df 92       	push	r13
    6228:	ef 92       	push	r14
    622a:	ff 92       	push	r15
    622c:	cf 93       	push	r28
    622e:	df 93       	push	r29
    6230:	ec 01       	movw	r28, r24
    6232:	20 91 03 10 	lds	r18, 0x1003	; 0x801003 <CFastLED::countFPS(int)::br>
    6236:	30 91 04 10 	lds	r19, 0x1004	; 0x801004 <CFastLED::countFPS(int)::br+0x1>
    623a:	c9 01       	movw	r24, r18
    623c:	01 96       	adiw	r24, 0x01	; 1
    623e:	90 93 04 10 	sts	0x1004, r25	; 0x801004 <CFastLED::countFPS(int)::br+0x1>
    6242:	80 93 03 10 	sts	0x1003, r24	; 0x801003 <CFastLED::countFPS(int)::br>
    6246:	26 17       	cp	r18, r22
    6248:	37 07       	cpc	r19, r23
    624a:	0c f4       	brge	.+2      	; 0x624e <CFastLED::countFPS(int)+0x2a>
    624c:	3f c0       	rjmp	.+126    	; 0x62cc <CFastLED::countFPS(int)+0xa8>
    624e:	0f b6       	in	r0, 0x3f	; 63
    6250:	f8 94       	cli
    6252:	20 91 1d 10 	lds	r18, 0x101D	; 0x80101d <timer0_millis_count>
    6256:	30 91 1e 10 	lds	r19, 0x101E	; 0x80101e <timer0_millis_count+0x1>
    625a:	40 91 1f 10 	lds	r20, 0x101F	; 0x80101f <timer0_millis_count+0x2>
    625e:	50 91 20 10 	lds	r21, 0x1020	; 0x801020 <timer0_millis_count+0x3>
    6262:	0f be       	out	0x3f, r0	; 63
    6264:	e8 ee       	ldi	r30, 0xE8	; 232
    6266:	f3 e0       	ldi	r31, 0x03	; 3
    6268:	8e 9f       	mul	r24, r30
    626a:	b0 01       	movw	r22, r0
    626c:	8f 9f       	mul	r24, r31
    626e:	70 0d       	add	r23, r0
    6270:	9e 9f       	mul	r25, r30
    6272:	70 0d       	add	r23, r0
    6274:	11 24       	eor	r1, r1
    6276:	07 2e       	mov	r0, r23
    6278:	00 0c       	add	r0, r0
    627a:	88 0b       	sbc	r24, r24
    627c:	99 0b       	sbc	r25, r25
    627e:	c0 90 ff 0f 	lds	r12, 0x0FFF	; 0x800fff <CFastLED::countFPS(int)::lastframe>
    6282:	d0 90 00 10 	lds	r13, 0x1000	; 0x801000 <CFastLED::countFPS(int)::lastframe+0x1>
    6286:	e0 90 01 10 	lds	r14, 0x1001	; 0x801001 <CFastLED::countFPS(int)::lastframe+0x2>
    628a:	f0 90 02 10 	lds	r15, 0x1002	; 0x801002 <CFastLED::countFPS(int)::lastframe+0x3>
    628e:	2c 19       	sub	r18, r12
    6290:	3d 09       	sbc	r19, r13
    6292:	4e 09       	sbc	r20, r14
    6294:	5f 09       	sbc	r21, r15
    6296:	0e 94 35 41 	call	0x826a	; 0x826a <__udivmodsi4>
    629a:	3a 83       	std	Y+2, r19	; 0x02
    629c:	29 83       	std	Y+1, r18	; 0x01
    629e:	10 92 04 10 	sts	0x1004, r1	; 0x801004 <CFastLED::countFPS(int)::br+0x1>
    62a2:	10 92 03 10 	sts	0x1003, r1	; 0x801003 <CFastLED::countFPS(int)::br>
    62a6:	0f b6       	in	r0, 0x3f	; 63
    62a8:	f8 94       	cli
    62aa:	80 91 1d 10 	lds	r24, 0x101D	; 0x80101d <timer0_millis_count>
    62ae:	90 91 1e 10 	lds	r25, 0x101E	; 0x80101e <timer0_millis_count+0x1>
    62b2:	a0 91 1f 10 	lds	r26, 0x101F	; 0x80101f <timer0_millis_count+0x2>
    62b6:	b0 91 20 10 	lds	r27, 0x1020	; 0x801020 <timer0_millis_count+0x3>
    62ba:	0f be       	out	0x3f, r0	; 63
    62bc:	80 93 ff 0f 	sts	0x0FFF, r24	; 0x800fff <CFastLED::countFPS(int)::lastframe>
    62c0:	90 93 00 10 	sts	0x1000, r25	; 0x801000 <CFastLED::countFPS(int)::lastframe+0x1>
    62c4:	a0 93 01 10 	sts	0x1001, r26	; 0x801001 <CFastLED::countFPS(int)::lastframe+0x2>
    62c8:	b0 93 02 10 	sts	0x1002, r27	; 0x801002 <CFastLED::countFPS(int)::lastframe+0x3>
    62cc:	df 91       	pop	r29
    62ce:	cf 91       	pop	r28
    62d0:	ff 90       	pop	r15
    62d2:	ef 90       	pop	r14
    62d4:	df 90       	pop	r13
    62d6:	cf 90       	pop	r12
    62d8:	08 95       	ret

000062da <CFastLED::show(unsigned char)>:
    62da:	8f 92       	push	r8
    62dc:	9f 92       	push	r9
    62de:	af 92       	push	r10
    62e0:	bf 92       	push	r11
    62e2:	cf 92       	push	r12
    62e4:	df 92       	push	r13
    62e6:	ef 92       	push	r14
    62e8:	ff 92       	push	r15
    62ea:	0f 93       	push	r16
    62ec:	1f 93       	push	r17
    62ee:	cf 93       	push	r28
    62f0:	df 93       	push	r29
    62f2:	00 d0       	rcall	.+0      	; 0x62f4 <CFastLED::show(unsigned char)+0x1a>
    62f4:	1f 92       	push	r1
    62f6:	cd b7       	in	r28, 0x3d	; 61
    62f8:	de b7       	in	r29, 0x3e	; 62
    62fa:	7c 01       	movw	r14, r24
    62fc:	d6 2e       	mov	r13, r22
    62fe:	d7 01       	movw	r26, r14
    6300:	13 96       	adiw	r26, 0x03	; 3
    6302:	0d 91       	ld	r16, X+
    6304:	1d 91       	ld	r17, X+
    6306:	2d 91       	ld	r18, X+
    6308:	3c 91       	ld	r19, X
    630a:	16 97       	sbiw	r26, 0x06	; 6
    630c:	01 15       	cp	r16, r1
    630e:	11 05       	cpc	r17, r1
    6310:	21 05       	cpc	r18, r1
    6312:	31 05       	cpc	r19, r1
    6314:	91 f0       	breq	.+36     	; 0x633a <CFastLED::show(unsigned char)+0x60>
    6316:	7d d6       	rcall	.+3322   	; 0x7012 <_micros>
    6318:	80 90 05 10 	lds	r8, 0x1005	; 0x801005 <lastshow>
    631c:	90 90 06 10 	lds	r9, 0x1006	; 0x801006 <lastshow+0x1>
    6320:	a0 90 07 10 	lds	r10, 0x1007	; 0x801007 <lastshow+0x2>
    6324:	b0 90 08 10 	lds	r11, 0x1008	; 0x801008 <lastshow+0x3>
    6328:	68 19       	sub	r22, r8
    632a:	79 09       	sbc	r23, r9
    632c:	8a 09       	sbc	r24, r10
    632e:	9b 09       	sbc	r25, r11
    6330:	60 17       	cp	r22, r16
    6332:	71 07       	cpc	r23, r17
    6334:	82 07       	cpc	r24, r18
    6336:	93 07       	cpc	r25, r19
    6338:	10 f3       	brcs	.-60     	; 0x62fe <CFastLED::show(unsigned char)+0x24>
    633a:	6b d6       	rcall	.+3286   	; 0x7012 <_micros>
    633c:	60 93 05 10 	sts	0x1005, r22	; 0x801005 <lastshow>
    6340:	70 93 06 10 	sts	0x1006, r23	; 0x801006 <lastshow+0x1>
    6344:	80 93 07 10 	sts	0x1007, r24	; 0x801007 <lastshow+0x2>
    6348:	90 93 08 10 	sts	0x1008, r25	; 0x801008 <lastshow+0x3>
    634c:	d7 01       	movw	r26, r14
    634e:	1b 96       	adiw	r26, 0x0b	; 11
    6350:	ed 91       	ld	r30, X+
    6352:	fc 91       	ld	r31, X
    6354:	1c 97       	sbiw	r26, 0x0c	; 12
    6356:	30 97       	sbiw	r30, 0x00	; 0
    6358:	49 f0       	breq	.+18     	; 0x636c <CFastLED::show(unsigned char)+0x92>
    635a:	17 96       	adiw	r26, 0x07	; 7
    635c:	4d 91       	ld	r20, X+
    635e:	5d 91       	ld	r21, X+
    6360:	6d 91       	ld	r22, X+
    6362:	7c 91       	ld	r23, X
    6364:	1a 97       	sbiw	r26, 0x0a	; 10
    6366:	8d 2d       	mov	r24, r13
    6368:	09 95       	icall
    636a:	d8 2e       	mov	r13, r24
    636c:	00 91 0b 10 	lds	r16, 0x100B	; 0x80100b <CLEDController::m_pHead>
    6370:	10 91 0c 10 	lds	r17, 0x100C	; 0x80100c <CLEDController::m_pHead+0x1>
    6374:	01 15       	cp	r16, r1
    6376:	11 05       	cpc	r17, r1
    6378:	61 f1       	breq	.+88     	; 0x63d2 <CFastLED::show(unsigned char)+0xf8>
    637a:	f8 01       	movw	r30, r16
    637c:	c4 84       	ldd	r12, Z+12	; 0x0c
    637e:	d7 01       	movw	r26, r14
    6380:	11 96       	adiw	r26, 0x01	; 1
    6382:	8d 91       	ld	r24, X+
    6384:	9c 91       	ld	r25, X
    6386:	84 36       	cpi	r24, 0x64	; 100
    6388:	91 05       	cpc	r25, r1
    638a:	08 f4       	brcc	.+2      	; 0x638e <CFastLED::show(unsigned char)+0xb4>
    638c:	14 86       	std	Z+12, r1	; 0x0c
    638e:	d8 01       	movw	r26, r16
    6390:	ed 91       	ld	r30, X+
    6392:	fc 91       	ld	r31, X
    6394:	a2 80       	ldd	r10, Z+2	; 0x02
    6396:	b3 80       	ldd	r11, Z+3	; 0x03
    6398:	98 01       	movw	r18, r16
    639a:	27 5f       	subi	r18, 0xF7	; 247
    639c:	3f 4f       	sbci	r19, 0xFF	; 255
    639e:	a8 01       	movw	r20, r16
    63a0:	4a 5f       	subi	r20, 0xFA	; 250
    63a2:	5f 4f       	sbci	r21, 0xFF	; 255
    63a4:	6d 2d       	mov	r22, r13
    63a6:	ce 01       	movw	r24, r28
    63a8:	01 96       	adiw	r24, 0x01	; 1
    63aa:	b7 de       	rcall	.-658    	; 0x611a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    63ac:	f8 01       	movw	r30, r16
    63ae:	45 85       	ldd	r20, Z+13	; 0x0d
    63b0:	56 85       	ldd	r21, Z+14	; 0x0e
    63b2:	62 81       	ldd	r22, Z+2	; 0x02
    63b4:	73 81       	ldd	r23, Z+3	; 0x03
    63b6:	9e 01       	movw	r18, r28
    63b8:	2f 5f       	subi	r18, 0xFF	; 255
    63ba:	3f 4f       	sbci	r19, 0xFF	; 255
    63bc:	c8 01       	movw	r24, r16
    63be:	f5 01       	movw	r30, r10
    63c0:	09 95       	icall
    63c2:	d8 01       	movw	r26, r16
    63c4:	1c 96       	adiw	r26, 0x0c	; 12
    63c6:	cc 92       	st	X, r12
    63c8:	1c 97       	sbiw	r26, 0x0c	; 12
    63ca:	14 96       	adiw	r26, 0x04	; 4
    63cc:	0d 91       	ld	r16, X+
    63ce:	1c 91       	ld	r17, X
    63d0:	d1 cf       	rjmp	.-94     	; 0x6374 <CFastLED::show(unsigned char)+0x9a>
    63d2:	69 e1       	ldi	r22, 0x19	; 25
    63d4:	70 e0       	ldi	r23, 0x00	; 0
    63d6:	c7 01       	movw	r24, r14
    63d8:	25 df       	rcall	.-438    	; 0x6224 <CFastLED::countFPS(int)>
    63da:	0f 90       	pop	r0
    63dc:	0f 90       	pop	r0
    63de:	0f 90       	pop	r0
    63e0:	df 91       	pop	r29
    63e2:	cf 91       	pop	r28
    63e4:	1f 91       	pop	r17
    63e6:	0f 91       	pop	r16
    63e8:	ff 90       	pop	r15
    63ea:	ef 90       	pop	r14
    63ec:	df 90       	pop	r13
    63ee:	cf 90       	pop	r12
    63f0:	bf 90       	pop	r11
    63f2:	af 90       	pop	r10
    63f4:	9f 90       	pop	r9
    63f6:	8f 90       	pop	r8
    63f8:	08 95       	ret

000063fa <CFastLED::showColor(CRGB const&, unsigned char)>:
    63fa:	4f 92       	push	r4
    63fc:	5f 92       	push	r5
    63fe:	6f 92       	push	r6
    6400:	7f 92       	push	r7
    6402:	8f 92       	push	r8
    6404:	9f 92       	push	r9
    6406:	af 92       	push	r10
    6408:	bf 92       	push	r11
    640a:	cf 92       	push	r12
    640c:	df 92       	push	r13
    640e:	ef 92       	push	r14
    6410:	ff 92       	push	r15
    6412:	0f 93       	push	r16
    6414:	1f 93       	push	r17
    6416:	cf 93       	push	r28
    6418:	df 93       	push	r29
    641a:	00 d0       	rcall	.+0      	; 0x641c <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    641c:	1f 92       	push	r1
    641e:	cd b7       	in	r28, 0x3d	; 61
    6420:	de b7       	in	r29, 0x3e	; 62
    6422:	7c 01       	movw	r14, r24
    6424:	5b 01       	movw	r10, r22
    6426:	d4 2e       	mov	r13, r20
    6428:	d7 01       	movw	r26, r14
    642a:	13 96       	adiw	r26, 0x03	; 3
    642c:	0d 91       	ld	r16, X+
    642e:	1d 91       	ld	r17, X+
    6430:	2d 91       	ld	r18, X+
    6432:	3c 91       	ld	r19, X
    6434:	16 97       	sbiw	r26, 0x06	; 6
    6436:	01 15       	cp	r16, r1
    6438:	11 05       	cpc	r17, r1
    643a:	21 05       	cpc	r18, r1
    643c:	31 05       	cpc	r19, r1
    643e:	91 f0       	breq	.+36     	; 0x6464 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    6440:	e8 d5       	rcall	.+3024   	; 0x7012 <_micros>
    6442:	40 90 05 10 	lds	r4, 0x1005	; 0x801005 <lastshow>
    6446:	50 90 06 10 	lds	r5, 0x1006	; 0x801006 <lastshow+0x1>
    644a:	60 90 07 10 	lds	r6, 0x1007	; 0x801007 <lastshow+0x2>
    644e:	70 90 08 10 	lds	r7, 0x1008	; 0x801008 <lastshow+0x3>
    6452:	64 19       	sub	r22, r4
    6454:	75 09       	sbc	r23, r5
    6456:	86 09       	sbc	r24, r6
    6458:	97 09       	sbc	r25, r7
    645a:	60 17       	cp	r22, r16
    645c:	71 07       	cpc	r23, r17
    645e:	82 07       	cpc	r24, r18
    6460:	93 07       	cpc	r25, r19
    6462:	10 f3       	brcs	.-60     	; 0x6428 <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    6464:	d6 d5       	rcall	.+2988   	; 0x7012 <_micros>
    6466:	60 93 05 10 	sts	0x1005, r22	; 0x801005 <lastshow>
    646a:	70 93 06 10 	sts	0x1006, r23	; 0x801006 <lastshow+0x1>
    646e:	80 93 07 10 	sts	0x1007, r24	; 0x801007 <lastshow+0x2>
    6472:	90 93 08 10 	sts	0x1008, r25	; 0x801008 <lastshow+0x3>
    6476:	d7 01       	movw	r26, r14
    6478:	1b 96       	adiw	r26, 0x0b	; 11
    647a:	ed 91       	ld	r30, X+
    647c:	fc 91       	ld	r31, X
    647e:	1c 97       	sbiw	r26, 0x0c	; 12
    6480:	30 97       	sbiw	r30, 0x00	; 0
    6482:	49 f0       	breq	.+18     	; 0x6496 <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    6484:	17 96       	adiw	r26, 0x07	; 7
    6486:	4d 91       	ld	r20, X+
    6488:	5d 91       	ld	r21, X+
    648a:	6d 91       	ld	r22, X+
    648c:	7c 91       	ld	r23, X
    648e:	1a 97       	sbiw	r26, 0x0a	; 10
    6490:	8d 2d       	mov	r24, r13
    6492:	09 95       	icall
    6494:	d8 2e       	mov	r13, r24
    6496:	00 91 0b 10 	lds	r16, 0x100B	; 0x80100b <CLEDController::m_pHead>
    649a:	10 91 0c 10 	lds	r17, 0x100C	; 0x80100c <CLEDController::m_pHead+0x1>
    649e:	01 15       	cp	r16, r1
    64a0:	11 05       	cpc	r17, r1
    64a2:	59 f1       	breq	.+86     	; 0x64fa <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    64a4:	f8 01       	movw	r30, r16
    64a6:	c4 84       	ldd	r12, Z+12	; 0x0c
    64a8:	d7 01       	movw	r26, r14
    64aa:	11 96       	adiw	r26, 0x01	; 1
    64ac:	8d 91       	ld	r24, X+
    64ae:	9c 91       	ld	r25, X
    64b0:	84 36       	cpi	r24, 0x64	; 100
    64b2:	91 05       	cpc	r25, r1
    64b4:	08 f4       	brcc	.+2      	; 0x64b8 <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    64b6:	14 86       	std	Z+12, r1	; 0x0c
    64b8:	d8 01       	movw	r26, r16
    64ba:	ed 91       	ld	r30, X+
    64bc:	fc 91       	ld	r31, X
    64be:	80 80       	ld	r8, Z
    64c0:	91 80       	ldd	r9, Z+1	; 0x01
    64c2:	98 01       	movw	r18, r16
    64c4:	27 5f       	subi	r18, 0xF7	; 247
    64c6:	3f 4f       	sbci	r19, 0xFF	; 255
    64c8:	a8 01       	movw	r20, r16
    64ca:	4a 5f       	subi	r20, 0xFA	; 250
    64cc:	5f 4f       	sbci	r21, 0xFF	; 255
    64ce:	6d 2d       	mov	r22, r13
    64d0:	ce 01       	movw	r24, r28
    64d2:	01 96       	adiw	r24, 0x01	; 1
    64d4:	22 de       	rcall	.-956    	; 0x611a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    64d6:	f8 01       	movw	r30, r16
    64d8:	45 85       	ldd	r20, Z+13	; 0x0d
    64da:	56 85       	ldd	r21, Z+14	; 0x0e
    64dc:	9e 01       	movw	r18, r28
    64de:	2f 5f       	subi	r18, 0xFF	; 255
    64e0:	3f 4f       	sbci	r19, 0xFF	; 255
    64e2:	b5 01       	movw	r22, r10
    64e4:	c8 01       	movw	r24, r16
    64e6:	f4 01       	movw	r30, r8
    64e8:	09 95       	icall
    64ea:	d8 01       	movw	r26, r16
    64ec:	1c 96       	adiw	r26, 0x0c	; 12
    64ee:	cc 92       	st	X, r12
    64f0:	1c 97       	sbiw	r26, 0x0c	; 12
    64f2:	14 96       	adiw	r26, 0x04	; 4
    64f4:	0d 91       	ld	r16, X+
    64f6:	1c 91       	ld	r17, X
    64f8:	d2 cf       	rjmp	.-92     	; 0x649e <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    64fa:	69 e1       	ldi	r22, 0x19	; 25
    64fc:	70 e0       	ldi	r23, 0x00	; 0
    64fe:	c7 01       	movw	r24, r14
    6500:	91 de       	rcall	.-734    	; 0x6224 <CFastLED::countFPS(int)>
    6502:	0f 90       	pop	r0
    6504:	0f 90       	pop	r0
    6506:	0f 90       	pop	r0
    6508:	df 91       	pop	r29
    650a:	cf 91       	pop	r28
    650c:	1f 91       	pop	r17
    650e:	0f 91       	pop	r16
    6510:	ff 90       	pop	r15
    6512:	ef 90       	pop	r14
    6514:	df 90       	pop	r13
    6516:	cf 90       	pop	r12
    6518:	bf 90       	pop	r11
    651a:	af 90       	pop	r10
    651c:	9f 90       	pop	r9
    651e:	8f 90       	pop	r8
    6520:	7f 90       	pop	r7
    6522:	6f 90       	pop	r6
    6524:	5f 90       	pop	r5
    6526:	4f 90       	pop	r4
    6528:	08 95       	ret

0000652a <CFastLED::clear(bool)>:
    652a:	0f 93       	push	r16
    652c:	1f 93       	push	r17
    652e:	cf 93       	push	r28
    6530:	df 93       	push	r29
    6532:	00 d0       	rcall	.+0      	; 0x6534 <CFastLED::clear(bool)+0xa>
    6534:	1f 92       	push	r1
    6536:	cd b7       	in	r28, 0x3d	; 61
    6538:	de b7       	in	r29, 0x3e	; 62
    653a:	8c 01       	movw	r16, r24
    653c:	66 23       	and	r22, r22
    653e:	41 f0       	breq	.+16     	; 0x6550 <CFastLED::clear(bool)+0x26>
    6540:	19 82       	std	Y+1, r1	; 0x01
    6542:	1a 82       	std	Y+2, r1	; 0x02
    6544:	1b 82       	std	Y+3, r1	; 0x03
    6546:	40 e0       	ldi	r20, 0x00	; 0
    6548:	be 01       	movw	r22, r28
    654a:	6f 5f       	subi	r22, 0xFF	; 255
    654c:	7f 4f       	sbci	r23, 0xFF	; 255
    654e:	55 df       	rcall	.-342    	; 0x63fa <CFastLED::showColor(CRGB const&, unsigned char)>
    6550:	c8 01       	movw	r24, r16
    6552:	4c de       	rcall	.-872    	; 0x61ec <CFastLED::clearData()>
    6554:	0f 90       	pop	r0
    6556:	0f 90       	pop	r0
    6558:	0f 90       	pop	r0
    655a:	df 91       	pop	r29
    655c:	cf 91       	pop	r28
    655e:	1f 91       	pop	r17
    6560:	0f 91       	pop	r16
    6562:	08 95       	ret

00006564 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    6564:	cf 93       	push	r28
    6566:	df 93       	push	r29
    6568:	ec 01       	movw	r28, r24
    656a:	44 23       	and	r20, r20
    656c:	f1 f0       	breq	.+60     	; 0x65aa <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    656e:	61 15       	cp	r22, r1
    6570:	71 05       	cpc	r23, r1
    6572:	c1 f0       	breq	.+48     	; 0x65a4 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    6574:	9b 01       	movw	r18, r22
    6576:	50 e0       	ldi	r21, 0x00	; 0
    6578:	40 e0       	ldi	r20, 0x00	; 0
    657a:	60 e4       	ldi	r22, 0x40	; 64
    657c:	72 e4       	ldi	r23, 0x42	; 66
    657e:	8f e0       	ldi	r24, 0x0F	; 15
    6580:	90 e0       	ldi	r25, 0x00	; 0
    6582:	0e 94 57 41 	call	0x82ae	; 0x82ae <__divmodsi4>
    6586:	8b 81       	ldd	r24, Y+3	; 0x03
    6588:	9c 81       	ldd	r25, Y+4	; 0x04
    658a:	ad 81       	ldd	r26, Y+5	; 0x05
    658c:	be 81       	ldd	r27, Y+6	; 0x06
    658e:	82 17       	cp	r24, r18
    6590:	93 07       	cpc	r25, r19
    6592:	a4 07       	cpc	r26, r20
    6594:	b5 07       	cpc	r27, r21
    6596:	10 f4       	brcc	.+4      	; 0x659c <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    6598:	da 01       	movw	r26, r20
    659a:	c9 01       	movw	r24, r18
    659c:	8b 83       	std	Y+3, r24	; 0x03
    659e:	9c 83       	std	Y+4, r25	; 0x04
    65a0:	ad 83       	std	Y+5, r26	; 0x05
    65a2:	be 83       	std	Y+6, r27	; 0x06
    65a4:	df 91       	pop	r29
    65a6:	cf 91       	pop	r28
    65a8:	08 95       	ret
    65aa:	61 15       	cp	r22, r1
    65ac:	71 05       	cpc	r23, r1
    65ae:	71 f0       	breq	.+28     	; 0x65cc <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    65b0:	9b 01       	movw	r18, r22
    65b2:	50 e0       	ldi	r21, 0x00	; 0
    65b4:	40 e0       	ldi	r20, 0x00	; 0
    65b6:	60 e4       	ldi	r22, 0x40	; 64
    65b8:	72 e4       	ldi	r23, 0x42	; 66
    65ba:	8f e0       	ldi	r24, 0x0F	; 15
    65bc:	90 e0       	ldi	r25, 0x00	; 0
    65be:	0e 94 57 41 	call	0x82ae	; 0x82ae <__divmodsi4>
    65c2:	2b 83       	std	Y+3, r18	; 0x03
    65c4:	3c 83       	std	Y+4, r19	; 0x04
    65c6:	4d 83       	std	Y+5, r20	; 0x05
    65c8:	5e 83       	std	Y+6, r21	; 0x06
    65ca:	ec cf       	rjmp	.-40     	; 0x65a4 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    65cc:	1b 82       	std	Y+3, r1	; 0x03
    65ce:	1c 82       	std	Y+4, r1	; 0x04
    65d0:	1d 82       	std	Y+5, r1	; 0x05
    65d2:	1e 82       	std	Y+6, r1	; 0x06
    65d4:	e7 cf       	rjmp	.-50     	; 0x65a4 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

000065d6 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    65d6:	cf 92       	push	r12
    65d8:	df 92       	push	r13
    65da:	ef 92       	push	r14
    65dc:	ff 92       	push	r15
    65de:	0f 93       	push	r16
    65e0:	1f 93       	push	r17
    65e2:	cf 93       	push	r28
    65e4:	df 93       	push	r29
    65e6:	ec 01       	movw	r28, r24
    65e8:	6b 01       	movw	r12, r22
    65ea:	7a 01       	movw	r14, r20
    65ec:	10 e0       	ldi	r17, 0x00	; 0
    65ee:	00 e0       	ldi	r16, 0x00	; 0
    65f0:	12 16       	cp	r1, r18
    65f2:	13 06       	cpc	r1, r19
    65f4:	14 f4       	brge	.+4      	; 0x65fa <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    65f6:	8a 01       	movw	r16, r20
    65f8:	79 01       	movw	r14, r18
    65fa:	e8 81       	ld	r30, Y
    65fc:	f9 81       	ldd	r31, Y+1	; 0x01
    65fe:	04 80       	ldd	r0, Z+4	; 0x04
    6600:	f5 81       	ldd	r31, Z+5	; 0x05
    6602:	e0 2d       	mov	r30, r0
    6604:	ce 01       	movw	r24, r28
    6606:	09 95       	icall
    6608:	c8 01       	movw	r24, r16
    660a:	88 0f       	add	r24, r24
    660c:	99 1f       	adc	r25, r25
    660e:	08 0f       	add	r16, r24
    6610:	19 1f       	adc	r17, r25
    6612:	c0 0e       	add	r12, r16
    6614:	d1 1e       	adc	r13, r17
    6616:	db 82       	std	Y+3, r13	; 0x03
    6618:	ca 82       	std	Y+2, r12	; 0x02
    661a:	ed 86       	std	Y+13, r14	; 0x0d
    661c:	fe 86       	std	Y+14, r15	; 0x0e
    661e:	e8 81       	ld	r30, Y
    6620:	f9 81       	ldd	r31, Y+1	; 0x01
    6622:	02 84       	ldd	r0, Z+10	; 0x0a
    6624:	f3 85       	ldd	r31, Z+11	; 0x0b
    6626:	e0 2d       	mov	r30, r0
    6628:	ce 01       	movw	r24, r28
    662a:	09 95       	icall
    662c:	41 e0       	ldi	r20, 0x01	; 1
    662e:	bc 01       	movw	r22, r24
    6630:	8d e0       	ldi	r24, 0x0D	; 13
    6632:	90 e1       	ldi	r25, 0x10	; 16
    6634:	97 df       	rcall	.-210    	; 0x6564 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    6636:	ce 01       	movw	r24, r28
    6638:	df 91       	pop	r29
    663a:	cf 91       	pop	r28
    663c:	1f 91       	pop	r17
    663e:	0f 91       	pop	r16
    6640:	ff 90       	pop	r15
    6642:	ef 90       	pop	r14
    6644:	df 90       	pop	r13
    6646:	cf 90       	pop	r12
    6648:	08 95       	ret

0000664a <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    664a:	8d e0       	ldi	r24, 0x0D	; 13
    664c:	90 e1       	ldi	r25, 0x10	; 16
    664e:	bf cd       	rjmp	.-1154   	; 0x61ce <CFastLED::CFastLED()>

00006650 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    6650:	1f 93       	push	r17
    6652:	dc 01       	movw	r26, r24
    6654:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    6656:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    6658:	11 96       	adiw	r26, 0x01	; 1
    665a:	4c 91       	ld	r20, X
    665c:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    665e:	12 96       	adiw	r26, 0x02	; 2
    6660:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    6662:	97 2f       	mov	r25, r23
    6664:	99 0f       	add	r25, r25
    6666:	99 0f       	add	r25, r25
    6668:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    666a:	35 e5       	ldi	r19, 0x55	; 85
    666c:	29 2f       	mov	r18, r25
    666e:	23 9f       	mul	r18, r19
    6670:	02 0e       	add	r0, r18
    6672:	20 e0       	ldi	r18, 0x00	; 0
    6674:	21 1d       	adc	r18, r1
    6676:	11 24       	eor	r1, r1
    6678:	82 2f       	mov	r24, r18
    667a:	67 2f       	mov	r22, r23
    667c:	60 74       	andi	r22, 0x40	; 64
    667e:	57 2f       	mov	r21, r23
    6680:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    6682:	77 fd       	sbrc	r23, 7
    6684:	6f c0       	rjmp	.+222    	; 0x6764 <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    6686:	61 11       	cpse	r22, r1
    6688:	5b c0       	rjmp	.+182    	; 0x6740 <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    668a:	51 11       	cpse	r21, r1
    668c:	05 c0       	rjmp	.+10     	; 0x6698 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    668e:	92 2f       	mov	r25, r18
    6690:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    6692:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    6694:	90 e0       	ldi	r25, 0x00	; 0
    6696:	04 c0       	rjmp	.+8      	; 0x66a0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    6698:	25 e5       	ldi	r18, 0x55	; 85
    669a:	28 0f       	add	r18, r24
                    b = 0;
    669c:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    669e:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    66a0:	4f 3f       	cpi	r20, 0xFF	; 255
    66a2:	09 f4       	brne	.+2      	; 0x66a6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    66a4:	24 c0       	rjmp	.+72     	; 0x66ee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    66a6:	44 23       	and	r20, r20
    66a8:	09 f4       	brne	.+2      	; 0x66ac <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    66aa:	7d c0       	rjmp	.+250    	; 0x67a6 <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    66ac:	88 23       	and	r24, r24
    66ae:	31 f0       	breq	.+12     	; 0x66bc <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    66b0:	38 2f       	mov	r19, r24
    66b2:	34 9f       	mul	r19, r20
    66b4:	03 0e       	add	r0, r19
    66b6:	30 e0       	ldi	r19, 0x00	; 0
    66b8:	31 1d       	adc	r19, r1
    66ba:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    66bc:	22 23       	and	r18, r18
    66be:	21 f0       	breq	.+8      	; 0x66c8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    66c0:	24 9f       	mul	r18, r20
    66c2:	02 0e       	add	r0, r18
    66c4:	20 e0       	ldi	r18, 0x00	; 0
    66c6:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    66c8:	99 23       	and	r25, r25
    66ca:	31 f0       	breq	.+12     	; 0x66d8 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    66cc:	39 2f       	mov	r19, r25
    66ce:	34 9f       	mul	r19, r20
    66d0:	03 0e       	add	r0, r19
    66d2:	30 e0       	ldi	r19, 0x00	; 0
    66d4:	31 1d       	adc	r19, r1
    66d6:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    66d8:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    66da:	34 2f       	mov	r19, r20
    66dc:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    66de:	33 9f       	mul	r19, r19
    66e0:	03 0e       	add	r0, r19
    66e2:	30 e0       	ldi	r19, 0x00	; 0
    66e4:	31 1d       	adc	r19, r1
    66e6:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    66e8:	83 0f       	add	r24, r19
            g += brightness_floor;
    66ea:	23 0f       	add	r18, r19
            b += brightness_floor;
    66ec:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    66ee:	1f 3f       	cpi	r17, 0xFF	; 255
    66f0:	09 f4       	brne	.+2      	; 0x66f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    66f2:	21 c0       	rjmp	.+66     	; 0x6736 <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    66f4:	30 e0       	ldi	r19, 0x00	; 0
    66f6:	11 23       	and	r17, r17
    66f8:	21 f0       	breq	.+8      	; 0x6702 <L_630>
    66fa:	11 9f       	mul	r17, r17
    66fc:	31 2d       	mov	r19, r1
    66fe:	09 f0       	breq	.+2      	; 0x6702 <L_630>
    6700:	3f 5f       	subi	r19, 0xFF	; 255

00006702 <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    6702:	33 23       	and	r19, r19
    6704:	09 f4       	brne	.+2      	; 0x6708 <L_630+0x6>
    6706:	53 c0       	rjmp	.+166    	; 0x67ae <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    6708:	88 23       	and	r24, r24
    670a:	31 f0       	breq	.+12     	; 0x6718 <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    670c:	48 2f       	mov	r20, r24
    670e:	43 9f       	mul	r20, r19
    6710:	04 0e       	add	r0, r20
    6712:	40 e0       	ldi	r20, 0x00	; 0
    6714:	41 1d       	adc	r20, r1
    6716:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    6718:	22 23       	and	r18, r18
    671a:	21 f0       	breq	.+8      	; 0x6724 <L_630+0x22>
    671c:	23 9f       	mul	r18, r19
    671e:	02 0e       	add	r0, r18
    6720:	20 e0       	ldi	r18, 0x00	; 0
    6722:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    6724:	99 23       	and	r25, r25
    6726:	31 f0       	breq	.+12     	; 0x6734 <L_630+0x32>
    6728:	49 2f       	mov	r20, r25
    672a:	43 9f       	mul	r20, r19
    672c:	04 0e       	add	r0, r20
    672e:	40 e0       	ldi	r20, 0x00	; 0
    6730:	41 1d       	adc	r20, r1
    6732:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    6734:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    6736:	80 83       	st	Z, r24
    rgb.g = g;
    6738:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    673a:	92 83       	std	Z+2, r25	; 0x02
}
    673c:	1f 91       	pop	r17
    673e:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    6740:	51 11       	cpse	r21, r1
    6742:	0b c0       	rjmp	.+22     	; 0x675a <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    6744:	39 2f       	mov	r19, r25
    6746:	2a ea       	ldi	r18, 0xAA	; 170
    6748:	32 9f       	mul	r19, r18
    674a:	03 0e       	add	r0, r19
    674c:	30 e0       	ldi	r19, 0x00	; 0
    674e:	31 1d       	adc	r19, r1
    6750:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    6752:	9b ea       	ldi	r25, 0xAB	; 171
    6754:	93 1b       	sub	r25, r19
                    g = K170 + third;
    6756:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    6758:	9c cf       	rjmp	.-200    	; 0x6692 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    675a:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    675c:	20 95       	com	r18
                b = third;
    675e:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    6760:	80 e0       	ldi	r24, 0x00	; 0
    6762:	9e cf       	rjmp	.-196    	; 0x66a0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    6764:	61 11       	cpse	r22, r1
    6766:	12 c0       	rjmp	.+36     	; 0x678c <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    6768:	51 11       	cpse	r21, r1
    676a:	0c c0       	rjmp	.+24     	; 0x6784 <L_630+0x82>
    676c:	39 2f       	mov	r19, r25
    676e:	2a ea       	ldi	r18, 0xAA	; 170
    6770:	32 9f       	mul	r19, r18
    6772:	03 0e       	add	r0, r19
    6774:	30 e0       	ldi	r19, 0x00	; 0
    6776:	31 1d       	adc	r19, r1
    6778:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    677a:	2b ea       	ldi	r18, 0xAB	; 171
    677c:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    677e:	95 e5       	ldi	r25, 0x55	; 85
    6780:	93 0f       	add	r25, r19
    6782:	ee cf       	rjmp	.-36     	; 0x6760 <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    6784:	92 2f       	mov	r25, r18
    6786:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    6788:	20 e0       	ldi	r18, 0x00	; 0
    678a:	8a cf       	rjmp	.-236    	; 0x66a0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    678c:	51 11       	cpse	r21, r1
    678e:	06 c0       	rjmp	.+12     	; 0x679c <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    6790:	25 e5       	ldi	r18, 0x55	; 85
    6792:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    6794:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    6796:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    6798:	82 2f       	mov	r24, r18
    679a:	f6 cf       	rjmp	.-20     	; 0x6788 <L_630+0x86>
    679c:	2a ea       	ldi	r18, 0xAA	; 170
    679e:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    67a0:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    67a2:	93 2f       	mov	r25, r19
    67a4:	f8 cf       	rjmp	.-16     	; 0x6796 <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    67a6:	9f ef       	ldi	r25, 0xFF	; 255
    67a8:	2f ef       	ldi	r18, 0xFF	; 255
    67aa:	8f ef       	ldi	r24, 0xFF	; 255
    67ac:	a0 cf       	rjmp	.-192    	; 0x66ee <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    67ae:	90 e0       	ldi	r25, 0x00	; 0
    67b0:	20 e0       	ldi	r18, 0x00	; 0
    67b2:	80 e0       	ldi	r24, 0x00	; 0
    67b4:	c0 cf       	rjmp	.-128    	; 0x6736 <L_630+0x34>

000067b6 <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    67b6:	dc 01       	movw	r26, r24
    67b8:	40 ff       	sbrs	r20, 0
    67ba:	03 c0       	rjmp	.+6      	; 0x67c2 <Lseteven_8>
    67bc:	01 c0       	rjmp	.+2      	; 0x67c0 <Lsetodd_8>

000067be <Lsetloop_8>:
    67be:	6d 93       	st	X+, r22

000067c0 <Lsetodd_8>:
    67c0:	6d 93       	st	X+, r22

000067c2 <Lseteven_8>:
    67c2:	42 50       	subi	r20, 0x02	; 2
    67c4:	e0 f7       	brcc	.-8      	; 0x67be <Lsetloop_8>
    67c6:	50 40       	sbci	r21, 0x00	; 0
    67c8:	d0 f7       	brcc	.-12     	; 0x67be <Lsetloop_8>
    return ptr;
}
    67ca:	08 95       	ret

000067cc <memcpy8>:
         "  brcc Lcpyloop_%=        \n\t"
         : [num] "+r" (num)
         : [src] "r" (src),
           [dst] "r" (dst)
         : "memory"
         );
    67cc:	fb 01       	movw	r30, r22
    67ce:	dc 01       	movw	r26, r24
    67d0:	40 ff       	sbrs	r20, 0
    67d2:	05 c0       	rjmp	.+10     	; 0x67de <Lcpyeven_23>
    67d4:	02 c0       	rjmp	.+4      	; 0x67da <Lcpyodd_23>

000067d6 <Lcpyloop_23>:
    67d6:	01 90       	ld	r0, Z+
    67d8:	0d 92       	st	X+, r0

000067da <Lcpyodd_23>:
    67da:	01 90       	ld	r0, Z+
    67dc:	0d 92       	st	X+, r0

000067de <Lcpyeven_23>:
    67de:	42 50       	subi	r20, 0x02	; 2
    67e0:	d0 f7       	brcc	.-12     	; 0x67d6 <Lcpyloop_23>
    67e2:	50 40       	sbci	r21, 0x00	; 0
    67e4:	c0 f7       	brcc	.-16     	; 0x67d6 <Lcpyloop_23>
    return dst;
}
    67e6:	08 95       	ret

000067e8 <memmove8>:

//__attribute__ ((noinline))
void * memmove8 ( void * dst, const void* src, uint16_t num )
{
    if( src > dst) {
    67e8:	86 17       	cp	r24, r22
    67ea:	97 07       	cpc	r25, r23
    67ec:	08 f4       	brcc	.+2      	; 0x67f0 <memmove8+0x8>
        // if src > dst then we can use the forward-stepping memcpy8
        return memcpy8( dst, src, num);
    67ee:	ee cf       	rjmp	.-36     	; 0x67cc <memcpy8>
    } else {
        // if src < dst then we have to step backward:
        dst = (char*)dst + num;
    67f0:	84 0f       	add	r24, r20
    67f2:	95 1f       	adc	r25, r21
        src = (char*)src + num;
    67f4:	64 0f       	add	r22, r20
    67f6:	75 1f       	adc	r23, r21
             "  brcc Lmovloop_%=        \n\t"
             : [num] "+r" (num)
             : [src] "r" (src),
               [dst] "r" (dst)
             : "memory"
             );
    67f8:	fb 01       	movw	r30, r22
    67fa:	dc 01       	movw	r26, r24
    67fc:	40 ff       	sbrs	r20, 0
    67fe:	05 c0       	rjmp	.+10     	; 0x680a <Lmoveven_58>
    6800:	02 c0       	rjmp	.+4      	; 0x6806 <Lmovodd_58>

00006802 <Lmovloop_58>:
    6802:	02 90       	ld	r0, -Z
    6804:	0e 92       	st	-X, r0

00006806 <Lmovodd_58>:
    6806:	02 90       	ld	r0, -Z
    6808:	0e 92       	st	-X, r0

0000680a <Lmoveven_58>:
    680a:	42 50       	subi	r20, 0x02	; 2
    680c:	d0 f7       	brcc	.-12     	; 0x6802 <Lmovloop_58>
    680e:	50 40       	sbci	r21, 0x00	; 0
    6810:	c0 f7       	brcc	.-16     	; 0x6802 <Lmovloop_58>
        return dst;
    }
}
    6812:	08 95       	ret

00006814 <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    6814:	0f 93       	push	r16
    6816:	1f 93       	push	r17
    6818:	cf 93       	push	r28
    681a:	df 93       	push	r29
    681c:	82 30       	cpi	r24, 0x02	; 2
    681e:	91 05       	cpc	r25, r1
    6820:	10 f4       	brcc	.+4      	; 0x6826 <malloc+0x12>
    6822:	82 e0       	ldi	r24, 0x02	; 2
    6824:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    6826:	e0 91 a7 10 	lds	r30, 0x10A7	; 0x8010a7 <__flp>
    682a:	f0 91 a8 10 	lds	r31, 0x10A8	; 0x8010a8 <__flp+0x1>
    682e:	30 e0       	ldi	r19, 0x00	; 0
    6830:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    6832:	70 e0       	ldi	r23, 0x00	; 0
    6834:	60 e0       	ldi	r22, 0x00	; 0
    6836:	d0 e0       	ldi	r29, 0x00	; 0
    6838:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    683a:	b0 e0       	ldi	r27, 0x00	; 0
    683c:	a0 e0       	ldi	r26, 0x00	; 0
    683e:	30 97       	sbiw	r30, 0x00	; 0
    6840:	99 f4       	brne	.+38     	; 0x6868 <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    6842:	21 15       	cp	r18, r1
    6844:	31 05       	cpc	r19, r1
    6846:	09 f4       	brne	.+2      	; 0x684a <malloc+0x36>
    6848:	4a c0       	rjmp	.+148    	; 0x68de <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    684a:	28 1b       	sub	r18, r24
    684c:	39 0b       	sbc	r19, r25
    684e:	24 30       	cpi	r18, 0x04	; 4
    6850:	31 05       	cpc	r19, r1
    6852:	d8 f5       	brcc	.+118    	; 0x68ca <malloc+0xb6>
    6854:	8a 81       	ldd	r24, Y+2	; 0x02
    6856:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    6858:	61 15       	cp	r22, r1
    685a:	71 05       	cpc	r23, r1
    685c:	89 f1       	breq	.+98     	; 0x68c0 <malloc+0xac>
				sfp2->nx = sfp1->nx;
    685e:	fb 01       	movw	r30, r22
    6860:	93 83       	std	Z+3, r25	; 0x03
    6862:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    6864:	fe 01       	movw	r30, r28
    6866:	11 c0       	rjmp	.+34     	; 0x688a <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    6868:	40 81       	ld	r20, Z
    686a:	51 81       	ldd	r21, Z+1	; 0x01
    686c:	02 81       	ldd	r16, Z+2	; 0x02
    686e:	13 81       	ldd	r17, Z+3	; 0x03
    6870:	48 17       	cp	r20, r24
    6872:	59 07       	cpc	r21, r25
    6874:	e0 f0       	brcs	.+56     	; 0x68ae <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    6876:	48 17       	cp	r20, r24
    6878:	59 07       	cpc	r21, r25
    687a:	99 f4       	brne	.+38     	; 0x68a2 <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    687c:	10 97       	sbiw	r26, 0x00	; 0
    687e:	61 f0       	breq	.+24     	; 0x6898 <malloc+0x84>
				fp2->nx = fp1->nx;
    6880:	12 96       	adiw	r26, 0x02	; 2
    6882:	0c 93       	st	X, r16
    6884:	12 97       	sbiw	r26, 0x02	; 2
    6886:	13 96       	adiw	r26, 0x03	; 3
    6888:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    688a:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    688c:	cf 01       	movw	r24, r30
    688e:	df 91       	pop	r29
    6890:	cf 91       	pop	r28
    6892:	1f 91       	pop	r17
    6894:	0f 91       	pop	r16
    6896:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    6898:	00 93 a7 10 	sts	0x10A7, r16	; 0x8010a7 <__flp>
    689c:	10 93 a8 10 	sts	0x10A8, r17	; 0x8010a8 <__flp+0x1>
    68a0:	f4 cf       	rjmp	.-24     	; 0x688a <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    68a2:	21 15       	cp	r18, r1
    68a4:	31 05       	cpc	r19, r1
    68a6:	51 f0       	breq	.+20     	; 0x68bc <malloc+0xa8>
    68a8:	42 17       	cp	r20, r18
    68aa:	53 07       	cpc	r21, r19
    68ac:	38 f0       	brcs	.+14     	; 0x68bc <malloc+0xa8>
    68ae:	a9 01       	movw	r20, r18
    68b0:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    68b2:	9a 01       	movw	r18, r20
    68b4:	bd 01       	movw	r22, r26
    68b6:	df 01       	movw	r26, r30
    68b8:	f8 01       	movw	r30, r16
    68ba:	c1 cf       	rjmp	.-126    	; 0x683e <malloc+0x2a>
    68bc:	ef 01       	movw	r28, r30
    68be:	f9 cf       	rjmp	.-14     	; 0x68b2 <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    68c0:	90 93 a8 10 	sts	0x10A8, r25	; 0x8010a8 <__flp+0x1>
    68c4:	80 93 a7 10 	sts	0x10A7, r24	; 0x8010a7 <__flp>
    68c8:	cd cf       	rjmp	.-102    	; 0x6864 <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    68ca:	fe 01       	movw	r30, r28
    68cc:	e2 0f       	add	r30, r18
    68ce:	f3 1f       	adc	r31, r19
    68d0:	81 93       	st	Z+, r24
    68d2:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    68d4:	22 50       	subi	r18, 0x02	; 2
    68d6:	31 09       	sbc	r19, r1
    68d8:	39 83       	std	Y+1, r19	; 0x01
    68da:	28 83       	st	Y, r18
		return &(sfp2->nx);
    68dc:	d7 cf       	rjmp	.-82     	; 0x688c <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    68de:	20 91 1a 10 	lds	r18, 0x101A	; 0x80101a <__brkval>
    68e2:	30 91 1b 10 	lds	r19, 0x101B	; 0x80101b <__brkval+0x1>
    68e6:	23 2b       	or	r18, r19
    68e8:	41 f4       	brne	.+16     	; 0x68fa <malloc+0xe6>
		__brkval = __malloc_heap_start;
    68ea:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    68ee:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    68f2:	30 93 1b 10 	sts	0x101B, r19	; 0x80101b <__brkval+0x1>
    68f6:	20 93 1a 10 	sts	0x101A, r18	; 0x80101a <__brkval>
	cp = __malloc_heap_end;
    68fa:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    68fe:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    6902:	21 15       	cp	r18, r1
    6904:	31 05       	cpc	r19, r1
    6906:	41 f4       	brne	.+16     	; 0x6918 <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    6908:	2d b7       	in	r18, 0x3d	; 61
    690a:	3e b7       	in	r19, 0x3e	; 62
    690c:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    6910:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    6914:	24 1b       	sub	r18, r20
    6916:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    6918:	e0 91 1a 10 	lds	r30, 0x101A	; 0x80101a <__brkval>
    691c:	f0 91 1b 10 	lds	r31, 0x101B	; 0x80101b <__brkval+0x1>
    6920:	e2 17       	cp	r30, r18
    6922:	f3 07       	cpc	r31, r19
    6924:	a0 f4       	brcc	.+40     	; 0x694e <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    6926:	2e 1b       	sub	r18, r30
    6928:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    692a:	28 17       	cp	r18, r24
    692c:	39 07       	cpc	r19, r25
    692e:	78 f0       	brcs	.+30     	; 0x694e <malloc+0x13a>
    6930:	ac 01       	movw	r20, r24
    6932:	4e 5f       	subi	r20, 0xFE	; 254
    6934:	5f 4f       	sbci	r21, 0xFF	; 255
    6936:	24 17       	cp	r18, r20
    6938:	35 07       	cpc	r19, r21
    693a:	48 f0       	brcs	.+18     	; 0x694e <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    693c:	4e 0f       	add	r20, r30
    693e:	5f 1f       	adc	r21, r31
    6940:	50 93 1b 10 	sts	0x101B, r21	; 0x80101b <__brkval+0x1>
    6944:	40 93 1a 10 	sts	0x101A, r20	; 0x80101a <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    6948:	81 93       	st	Z+, r24
    694a:	91 93       	st	Z+, r25
		return &(fp1->nx);
    694c:	9f cf       	rjmp	.-194    	; 0x688c <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    694e:	f0 e0       	ldi	r31, 0x00	; 0
    6950:	e0 e0       	ldi	r30, 0x00	; 0
    6952:	9c cf       	rjmp	.-200    	; 0x688c <malloc+0x78>

00006954 <free>:
}


void
free(void *p)
{
    6954:	cf 93       	push	r28
    6956:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    6958:	00 97       	sbiw	r24, 0x00	; 0
    695a:	e9 f0       	breq	.+58     	; 0x6996 <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    695c:	fc 01       	movw	r30, r24
    695e:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    6960:	13 82       	std	Z+3, r1	; 0x03
    6962:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    6964:	a0 91 a7 10 	lds	r26, 0x10A7	; 0x8010a7 <__flp>
    6968:	b0 91 a8 10 	lds	r27, 0x10A8	; 0x8010a8 <__flp+0x1>
    696c:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    696e:	30 e0       	ldi	r19, 0x00	; 0
    6970:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    6972:	10 97       	sbiw	r26, 0x00	; 0
    6974:	a1 f4       	brne	.+40     	; 0x699e <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    6976:	20 81       	ld	r18, Z
    6978:	31 81       	ldd	r19, Z+1	; 0x01
    697a:	82 0f       	add	r24, r18
    697c:	93 1f       	adc	r25, r19
    697e:	20 91 1a 10 	lds	r18, 0x101A	; 0x80101a <__brkval>
    6982:	30 91 1b 10 	lds	r19, 0x101B	; 0x80101b <__brkval+0x1>
    6986:	28 17       	cp	r18, r24
    6988:	39 07       	cpc	r19, r25
    698a:	09 f0       	breq	.+2      	; 0x698e <free+0x3a>
    698c:	61 c0       	rjmp	.+194    	; 0x6a50 <free+0xfc>
			__brkval = cpnew;
    698e:	f0 93 1b 10 	sts	0x101B, r31	; 0x80101b <__brkval+0x1>
    6992:	e0 93 1a 10 	sts	0x101A, r30	; 0x80101a <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    6996:	df 91       	pop	r29
    6998:	cf 91       	pop	r28
    699a:	08 95       	ret
    699c:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    699e:	ce 17       	cp	r28, r30
    69a0:	df 07       	cpc	r29, r31
    69a2:	e8 f5       	brcc	.+122    	; 0x6a1e <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    69a4:	4a 81       	ldd	r20, Y+2	; 0x02
    69a6:	5b 81       	ldd	r21, Y+3	; 0x03
    69a8:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    69aa:	41 15       	cp	r20, r1
    69ac:	51 05       	cpc	r21, r1
    69ae:	b1 f7       	brne	.-20     	; 0x699c <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    69b0:	e9 01       	movw	r28, r18
    69b2:	fb 83       	std	Y+3, r31	; 0x03
    69b4:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    69b6:	49 91       	ld	r20, Y+
    69b8:	59 91       	ld	r21, Y+
    69ba:	c4 0f       	add	r28, r20
    69bc:	d5 1f       	adc	r29, r21
    69be:	ec 17       	cp	r30, r28
    69c0:	fd 07       	cpc	r31, r29
    69c2:	61 f4       	brne	.+24     	; 0x69dc <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    69c4:	80 81       	ld	r24, Z
    69c6:	91 81       	ldd	r25, Z+1	; 0x01
    69c8:	02 96       	adiw	r24, 0x02	; 2
    69ca:	84 0f       	add	r24, r20
    69cc:	95 1f       	adc	r25, r21
    69ce:	e9 01       	movw	r28, r18
    69d0:	99 83       	std	Y+1, r25	; 0x01
    69d2:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    69d4:	82 81       	ldd	r24, Z+2	; 0x02
    69d6:	93 81       	ldd	r25, Z+3	; 0x03
    69d8:	9b 83       	std	Y+3, r25	; 0x03
    69da:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    69dc:	f0 e0       	ldi	r31, 0x00	; 0
    69de:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    69e0:	12 96       	adiw	r26, 0x02	; 2
    69e2:	8d 91       	ld	r24, X+
    69e4:	9c 91       	ld	r25, X
    69e6:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    69e8:	00 97       	sbiw	r24, 0x00	; 0
    69ea:	b9 f5       	brne	.+110    	; 0x6a5a <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    69ec:	2d 91       	ld	r18, X+
    69ee:	3c 91       	ld	r19, X
    69f0:	11 97       	sbiw	r26, 0x01	; 1
    69f2:	cd 01       	movw	r24, r26
    69f4:	02 96       	adiw	r24, 0x02	; 2
    69f6:	82 0f       	add	r24, r18
    69f8:	93 1f       	adc	r25, r19
    69fa:	20 91 1a 10 	lds	r18, 0x101A	; 0x80101a <__brkval>
    69fe:	30 91 1b 10 	lds	r19, 0x101B	; 0x80101b <__brkval+0x1>
    6a02:	28 17       	cp	r18, r24
    6a04:	39 07       	cpc	r19, r25
    6a06:	39 f6       	brne	.-114    	; 0x6996 <free+0x42>
		if (fp2 == NULL)
    6a08:	30 97       	sbiw	r30, 0x00	; 0
    6a0a:	51 f5       	brne	.+84     	; 0x6a60 <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    6a0c:	10 92 a8 10 	sts	0x10A8, r1	; 0x8010a8 <__flp+0x1>
    6a10:	10 92 a7 10 	sts	0x10A7, r1	; 0x8010a7 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    6a14:	b0 93 1b 10 	sts	0x101B, r27	; 0x80101b <__brkval+0x1>
    6a18:	a0 93 1a 10 	sts	0x101A, r26	; 0x80101a <__brkval>
    6a1c:	bc cf       	rjmp	.-136    	; 0x6996 <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    6a1e:	d3 83       	std	Z+3, r29	; 0x03
    6a20:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    6a22:	40 81       	ld	r20, Z
    6a24:	51 81       	ldd	r21, Z+1	; 0x01
    6a26:	84 0f       	add	r24, r20
    6a28:	95 1f       	adc	r25, r21
    6a2a:	c8 17       	cp	r28, r24
    6a2c:	d9 07       	cpc	r29, r25
    6a2e:	61 f4       	brne	.+24     	; 0x6a48 <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    6a30:	4e 5f       	subi	r20, 0xFE	; 254
    6a32:	5f 4f       	sbci	r21, 0xFF	; 255
    6a34:	88 81       	ld	r24, Y
    6a36:	99 81       	ldd	r25, Y+1	; 0x01
    6a38:	48 0f       	add	r20, r24
    6a3a:	59 1f       	adc	r21, r25
    6a3c:	51 83       	std	Z+1, r21	; 0x01
    6a3e:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    6a40:	8a 81       	ldd	r24, Y+2	; 0x02
    6a42:	9b 81       	ldd	r25, Y+3	; 0x03
    6a44:	93 83       	std	Z+3, r25	; 0x03
    6a46:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    6a48:	21 15       	cp	r18, r1
    6a4a:	31 05       	cpc	r19, r1
    6a4c:	09 f0       	breq	.+2      	; 0x6a50 <free+0xfc>
    6a4e:	b0 cf       	rjmp	.-160    	; 0x69b0 <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    6a50:	f0 93 a8 10 	sts	0x10A8, r31	; 0x8010a8 <__flp+0x1>
    6a54:	e0 93 a7 10 	sts	0x10A7, r30	; 0x8010a7 <__flp>
			return;
    6a58:	9e cf       	rjmp	.-196    	; 0x6996 <free+0x42>
    6a5a:	fd 01       	movw	r30, r26
    6a5c:	dc 01       	movw	r26, r24
    6a5e:	c0 cf       	rjmp	.-128    	; 0x69e0 <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    6a60:	13 82       	std	Z+3, r1	; 0x03
    6a62:	12 82       	std	Z+2, r1	; 0x02
    6a64:	d7 cf       	rjmp	.-82     	; 0x6a14 <free+0xc0>

00006a66 <realloc>:



void *
realloc(void *ptr, size_t len)
{
    6a66:	4f 92       	push	r4
    6a68:	5f 92       	push	r5
    6a6a:	6f 92       	push	r6
    6a6c:	7f 92       	push	r7
    6a6e:	8f 92       	push	r8
    6a70:	9f 92       	push	r9
    6a72:	af 92       	push	r10
    6a74:	bf 92       	push	r11
    6a76:	cf 92       	push	r12
    6a78:	df 92       	push	r13
    6a7a:	ef 92       	push	r14
    6a7c:	ff 92       	push	r15
    6a7e:	0f 93       	push	r16
    6a80:	1f 93       	push	r17
    6a82:	cf 93       	push	r28
    6a84:	df 93       	push	r29
    6a86:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    6a88:	00 97       	sbiw	r24, 0x00	; 0
    6a8a:	91 f4       	brne	.+36     	; 0x6ab0 <realloc+0x4a>
		return malloc(len);
    6a8c:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    6a8e:	df 91       	pop	r29
    6a90:	cf 91       	pop	r28
    6a92:	1f 91       	pop	r17
    6a94:	0f 91       	pop	r16
    6a96:	ff 90       	pop	r15
    6a98:	ef 90       	pop	r14
    6a9a:	df 90       	pop	r13
    6a9c:	cf 90       	pop	r12
    6a9e:	bf 90       	pop	r11
    6aa0:	af 90       	pop	r10
    6aa2:	9f 90       	pop	r9
    6aa4:	8f 90       	pop	r8
    6aa6:	7f 90       	pop	r7
    6aa8:	6f 90       	pop	r6
    6aaa:	5f 90       	pop	r5
    6aac:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    6aae:	b2 ce       	rjmp	.-668    	; 0x6814 <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    6ab0:	fc 01       	movw	r30, r24
    6ab2:	e6 0f       	add	r30, r22
    6ab4:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    6ab6:	9c 01       	movw	r18, r24
    6ab8:	22 50       	subi	r18, 0x02	; 2
    6aba:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    6abc:	e2 17       	cp	r30, r18
    6abe:	f3 07       	cpc	r31, r19
    6ac0:	08 f4       	brcc	.+2      	; 0x6ac4 <realloc+0x5e>
    6ac2:	a5 c0       	rjmp	.+330    	; 0x6c0e <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    6ac4:	d9 01       	movw	r26, r18
    6ac6:	cd 91       	ld	r28, X+
    6ac8:	dc 91       	ld	r29, X
    6aca:	11 97       	sbiw	r26, 0x01	; 1
    6acc:	c6 17       	cp	r28, r22
    6ace:	d7 07       	cpc	r29, r23
    6ad0:	18 f1       	brcs	.+70     	; 0x6b18 <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    6ad2:	c5 30       	cpi	r28, 0x05	; 5
    6ad4:	d1 05       	cpc	r29, r1
    6ad6:	70 f0       	brcs	.+28     	; 0x6af4 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    6ad8:	ce 01       	movw	r24, r28
    6ada:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    6adc:	86 17       	cp	r24, r22
    6ade:	97 07       	cpc	r25, r23
    6ae0:	48 f0       	brcs	.+18     	; 0x6af4 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    6ae2:	c6 1b       	sub	r28, r22
    6ae4:	d7 0b       	sbc	r29, r23
    6ae6:	22 97       	sbiw	r28, 0x02	; 2
    6ae8:	c1 93       	st	Z+, r28
    6aea:	d1 93       	st	Z+, r29
		fp1->sz = len;
    6aec:	6d 93       	st	X+, r22
    6aee:	7c 93       	st	X, r23
		free(&(fp2->nx));
    6af0:	cf 01       	movw	r24, r30
    6af2:	30 df       	rcall	.-416    	; 0x6954 <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    6af4:	c8 01       	movw	r24, r16
    6af6:	df 91       	pop	r29
    6af8:	cf 91       	pop	r28
    6afa:	1f 91       	pop	r17
    6afc:	0f 91       	pop	r16
    6afe:	ff 90       	pop	r15
    6b00:	ef 90       	pop	r14
    6b02:	df 90       	pop	r13
    6b04:	cf 90       	pop	r12
    6b06:	bf 90       	pop	r11
    6b08:	af 90       	pop	r10
    6b0a:	9f 90       	pop	r9
    6b0c:	8f 90       	pop	r8
    6b0e:	7f 90       	pop	r7
    6b10:	6f 90       	pop	r6
    6b12:	5f 90       	pop	r5
    6b14:	4f 90       	pop	r4
    6b16:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    6b18:	5b 01       	movw	r10, r22
    6b1a:	ac 1a       	sub	r10, r28
    6b1c:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    6b1e:	4c 01       	movw	r8, r24
    6b20:	8c 0e       	add	r8, r28
    6b22:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    6b24:	a0 91 a7 10 	lds	r26, 0x10A7	; 0x8010a7 <__flp>
    6b28:	b0 91 a8 10 	lds	r27, 0x10A8	; 0x8010a8 <__flp+0x1>
    6b2c:	51 2c       	mov	r5, r1
    6b2e:	41 2c       	mov	r4, r1
    6b30:	f1 2c       	mov	r15, r1
    6b32:	e1 2c       	mov	r14, r1
    6b34:	10 97       	sbiw	r26, 0x00	; 0
    6b36:	01 f5       	brne	.+64     	; 0x6b78 <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    6b38:	80 91 1a 10 	lds	r24, 0x101A	; 0x80101a <__brkval>
    6b3c:	90 91 1b 10 	lds	r25, 0x101B	; 0x80101b <__brkval+0x1>
    6b40:	88 15       	cp	r24, r8
    6b42:	99 05       	cpc	r25, r9
    6b44:	09 f0       	breq	.+2      	; 0x6b48 <realloc+0xe2>
    6b46:	56 c0       	rjmp	.+172    	; 0x6bf4 <realloc+0x18e>
    6b48:	46 16       	cp	r4, r22
    6b4a:	57 06       	cpc	r5, r23
    6b4c:	08 f0       	brcs	.+2      	; 0x6b50 <realloc+0xea>
    6b4e:	52 c0       	rjmp	.+164    	; 0x6bf4 <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    6b50:	8d b7       	in	r24, 0x3d	; 61
    6b52:	9e b7       	in	r25, 0x3e	; 62
    6b54:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    6b58:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    6b5c:	84 1b       	sub	r24, r20
    6b5e:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    6b60:	e8 17       	cp	r30, r24
    6b62:	f9 07       	cpc	r31, r25
    6b64:	08 f0       	brcs	.+2      	; 0x6b68 <realloc+0x102>
    6b66:	53 c0       	rjmp	.+166    	; 0x6c0e <realloc+0x1a8>
			__brkval = cp;
    6b68:	f0 93 1b 10 	sts	0x101B, r31	; 0x80101b <__brkval+0x1>
    6b6c:	e0 93 1a 10 	sts	0x101A, r30	; 0x80101a <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    6b70:	f9 01       	movw	r30, r18
    6b72:	71 83       	std	Z+1, r23	; 0x01
    6b74:	60 83       	st	Z, r22
			return ptr;
    6b76:	be cf       	rjmp	.-132    	; 0x6af4 <realloc+0x8e>
    6b78:	8d 91       	ld	r24, X+
    6b7a:	9c 91       	ld	r25, X
    6b7c:	11 97       	sbiw	r26, 0x01	; 1
    6b7e:	12 96       	adiw	r26, 0x02	; 2
    6b80:	6c 90       	ld	r6, X
    6b82:	12 97       	sbiw	r26, 0x02	; 2
    6b84:	13 96       	adiw	r26, 0x03	; 3
    6b86:	7c 90       	ld	r7, X
    6b88:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    6b8a:	a8 15       	cp	r26, r8
    6b8c:	b9 05       	cpc	r27, r9
    6b8e:	59 f5       	brne	.+86     	; 0x6be6 <realloc+0x180>
    6b90:	6c 01       	movw	r12, r24
    6b92:	42 e0       	ldi	r20, 0x02	; 2
    6b94:	c4 0e       	add	r12, r20
    6b96:	d1 1c       	adc	r13, r1
    6b98:	ca 14       	cp	r12, r10
    6b9a:	db 04       	cpc	r13, r11
    6b9c:	20 f1       	brcs	.+72     	; 0x6be6 <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    6b9e:	ac 01       	movw	r20, r24
    6ba0:	4a 19       	sub	r20, r10
    6ba2:	5b 09       	sbc	r21, r11
    6ba4:	da 01       	movw	r26, r20
    6ba6:	12 96       	adiw	r26, 0x02	; 2
    6ba8:	15 97       	sbiw	r26, 0x05	; 5
    6baa:	80 f0       	brcs	.+32     	; 0x6bcc <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    6bac:	62 82       	std	Z+2, r6	; 0x02
    6bae:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    6bb0:	51 83       	std	Z+1, r21	; 0x01
    6bb2:	40 83       	st	Z, r20
				fp1->sz = len;
    6bb4:	d9 01       	movw	r26, r18
    6bb6:	6d 93       	st	X+, r22
    6bb8:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    6bba:	e1 14       	cp	r14, r1
    6bbc:	f1 04       	cpc	r15, r1
    6bbe:	71 f0       	breq	.+28     	; 0x6bdc <realloc+0x176>
				ofp3->nx = fp2;
    6bc0:	d7 01       	movw	r26, r14
    6bc2:	13 96       	adiw	r26, 0x03	; 3
    6bc4:	fc 93       	st	X, r31
    6bc6:	ee 93       	st	-X, r30
    6bc8:	12 97       	sbiw	r26, 0x02	; 2
    6bca:	94 cf       	rjmp	.-216    	; 0x6af4 <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    6bcc:	22 96       	adiw	r28, 0x02	; 2
    6bce:	8c 0f       	add	r24, r28
    6bd0:	9d 1f       	adc	r25, r29
    6bd2:	f9 01       	movw	r30, r18
    6bd4:	91 83       	std	Z+1, r25	; 0x01
    6bd6:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    6bd8:	f3 01       	movw	r30, r6
    6bda:	ef cf       	rjmp	.-34     	; 0x6bba <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    6bdc:	f0 93 a8 10 	sts	0x10A8, r31	; 0x8010a8 <__flp+0x1>
    6be0:	e0 93 a7 10 	sts	0x10A7, r30	; 0x8010a7 <__flp>
    6be4:	87 cf       	rjmp	.-242    	; 0x6af4 <realloc+0x8e>
    6be6:	48 16       	cp	r4, r24
    6be8:	59 06       	cpc	r5, r25
    6bea:	08 f4       	brcc	.+2      	; 0x6bee <realloc+0x188>
    6bec:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    6bee:	7d 01       	movw	r14, r26
    6bf0:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    6bf2:	a0 cf       	rjmp	.-192    	; 0x6b34 <realloc+0xce>
    6bf4:	cb 01       	movw	r24, r22
    6bf6:	0e de       	rcall	.-996    	; 0x6814 <malloc>
    6bf8:	7c 01       	movw	r14, r24
    6bfa:	00 97       	sbiw	r24, 0x00	; 0
    6bfc:	41 f0       	breq	.+16     	; 0x6c0e <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    6bfe:	ae 01       	movw	r20, r28
    6c00:	b8 01       	movw	r22, r16
    6c02:	0e 94 39 42 	call	0x8472	; 0x8472 <memcpy>
	free(ptr);
    6c06:	c8 01       	movw	r24, r16
    6c08:	a5 de       	rcall	.-694    	; 0x6954 <free>
	return memp;
    6c0a:	87 01       	movw	r16, r14
    6c0c:	73 cf       	rjmp	.-282    	; 0x6af4 <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    6c0e:	10 e0       	ldi	r17, 0x00	; 0
    6c10:	00 e0       	ldi	r16, 0x00	; 0
    6c12:	70 cf       	rjmp	.-288    	; 0x6af4 <realloc+0x8e>

00006c14 <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    6c14:	1d ba       	out	0x1d, r1	; 29
    6c16:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    6c1a:	1c bc       	out	0x2c, r1	; 44
    6c1c:	10 be       	out	0x30, r1	; 48
    6c1e:	1f ba       	out	0x1f, r1	; 31
    6c20:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    6c24:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    6c28:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    6c2c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    6c30:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    6c34:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    6c38:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    6c3c:	11 b8       	out	0x01, r1	; 1
    6c3e:	14 b8       	out	0x04, r1	; 4
    6c40:	17 b8       	out	0x07, r1	; 7
    6c42:	1a b8       	out	0x0a, r1	; 10
    6c44:	1d b8       	out	0x0d, r1	; 13
    6c46:	10 ba       	out	0x10, r1	; 16
    6c48:	12 b8       	out	0x02, r1	; 2
    6c4a:	15 b8       	out	0x05, r1	; 5
    6c4c:	18 b8       	out	0x08, r1	; 8
    6c4e:	1b b8       	out	0x0b, r1	; 11
    6c50:	1e b8       	out	0x0e, r1	; 14
    6c52:	11 ba       	out	0x11, r1	; 17
    6c54:	08 95       	ret

00006c56 <_init_Teensyduino_internal_>:
    6c56:	f8 94       	cli
    6c58:	e1 e6       	ldi	r30, 0x61	; 97
    6c5a:	f0 e0       	ldi	r31, 0x00	; 0
    6c5c:	20 e8       	ldi	r18, 0x80	; 128
    6c5e:	20 83       	st	Z, r18
    6c60:	10 82       	st	Z, r1
    6c62:	83 e0       	ldi	r24, 0x03	; 3
    6c64:	84 bd       	out	0x24, r24	; 36
    6c66:	85 bd       	out	0x25, r24	; 37
    6c68:	ee e6       	ldi	r30, 0x6E	; 110
    6c6a:	f0 e0       	ldi	r31, 0x00	; 0
    6c6c:	80 81       	ld	r24, Z
    6c6e:	81 60       	ori	r24, 0x01	; 1
    6c70:	80 83       	st	Z, r24
    6c72:	91 e0       	ldi	r25, 0x01	; 1
    6c74:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6c78:	82 e0       	ldi	r24, 0x02	; 2
    6c7a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    6c7e:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6c82:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    6c86:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    6c8a:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    6c8e:	86 e8       	ldi	r24, 0x86	; 134
    6c90:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    6c94:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    6c98:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    6c9c:	d9 d1       	rcall	.+946    	; 0x7050 <usb_init>
    6c9e:	78 94       	sei
    6ca0:	08 95       	ret

00006ca2 <analogRead>:
    6ca2:	9a ed       	ldi	r25, 0xDA	; 218
    6ca4:	98 0f       	add	r25, r24
    6ca6:	98 30       	cpi	r25, 0x08	; 8
    6ca8:	10 f1       	brcs	.+68     	; 0x6cee <analogRead+0x4c>
    6caa:	88 30       	cpi	r24, 0x08	; 8
    6cac:	60 f4       	brcc	.+24     	; 0x6cc6 <analogRead+0x24>
    6cae:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    6cb2:	21 e0       	ldi	r18, 0x01	; 1
    6cb4:	30 e0       	ldi	r19, 0x00	; 0
    6cb6:	08 2e       	mov	r0, r24
    6cb8:	01 c0       	rjmp	.+2      	; 0x6cbc <analogRead+0x1a>
    6cba:	22 0f       	add	r18, r18
    6cbc:	0a 94       	dec	r0
    6cbe:	ea f7       	brpl	.-6      	; 0x6cba <analogRead+0x18>
    6cc0:	92 2b       	or	r25, r18
    6cc2:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    6cc6:	8f 71       	andi	r24, 0x1F	; 31
    6cc8:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    6ccc:	89 2b       	or	r24, r25
    6cce:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    6cd2:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    6cd6:	80 64       	ori	r24, 0x40	; 64
    6cd8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    6cdc:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    6ce0:	86 fd       	sbrc	r24, 6
    6ce2:	fc cf       	rjmp	.-8      	; 0x6cdc <analogRead+0x3a>
    6ce4:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    6ce8:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    6cec:	08 95       	ret
    6cee:	89 2f       	mov	r24, r25
    6cf0:	de cf       	rjmp	.-68     	; 0x6cae <analogRead+0xc>

00006cf2 <_pinMode_output>:
    6cf2:	8e 32       	cpi	r24, 0x2E	; 46
    6cf4:	70 f4       	brcc	.+28     	; 0x6d12 <_pinMode_output+0x20>
    6cf6:	e8 e3       	ldi	r30, 0x38	; 56
    6cf8:	f7 e0       	ldi	r31, 0x07	; 7
    6cfa:	88 0f       	add	r24, r24
    6cfc:	e8 0f       	add	r30, r24
    6cfe:	f1 1d       	adc	r31, r1
    6d00:	25 91       	lpm	r18, Z+
    6d02:	e4 91       	lpm	r30, Z
    6d04:	f0 e0       	ldi	r31, 0x00	; 0
    6d06:	9f b7       	in	r25, 0x3f	; 63
    6d08:	f8 94       	cli
    6d0a:	81 81       	ldd	r24, Z+1	; 0x01
    6d0c:	82 2b       	or	r24, r18
    6d0e:	81 83       	std	Z+1, r24	; 0x01
    6d10:	9f bf       	out	0x3f, r25	; 63
    6d12:	08 95       	ret

00006d14 <_digitalWrite_HIGH>:
    6d14:	ee 32       	cpi	r30, 0x2E	; 46
    6d16:	50 f4       	brcc	.+20     	; 0x6d2c <_digitalWrite_bailout>
    6d18:	ee 0f       	add	r30, r30
    6d1a:	e9 56       	subi	r30, 0x69	; 105
    6d1c:	f9 4c       	sbci	r31, 0xC9	; 201
    6d1e:	09 94       	ijmp

00006d20 <_digitalWrite_LOW>:
    6d20:	ee 32       	cpi	r30, 0x2E	; 46
    6d22:	20 f4       	brcc	.+8      	; 0x6d2c <_digitalWrite_bailout>
    6d24:	ee 0f       	add	r30, r30
    6d26:	ed 50       	subi	r30, 0x0D	; 13
    6d28:	f9 4c       	sbci	r31, 0xC9	; 201
    6d2a:	09 94       	ijmp

00006d2c <_digitalWrite_bailout>:
    6d2c:	08 95       	ret

00006d2e <_digitalWrite_HIGH_TABLE>:
    6d2e:	58 9a       	sbi	0x0b, 0	; 11
    6d30:	b6 c0       	rjmp	.+364    	; 0x6e9e <_digitalWrite_OC0B>
    6d32:	59 9a       	sbi	0x0b, 1	; 11
    6d34:	d0 c0       	rjmp	.+416    	; 0x6ed6 <_digitalWrite_OC2B>
    6d36:	5a 9a       	sbi	0x0b, 2	; 11
    6d38:	08 95       	ret
    6d3a:	5b 9a       	sbi	0x0b, 3	; 11
    6d3c:	08 95       	ret
    6d3e:	5c 9a       	sbi	0x0b, 4	; 11
    6d40:	08 95       	ret
    6d42:	5d 9a       	sbi	0x0b, 5	; 11
    6d44:	08 95       	ret
    6d46:	5e 9a       	sbi	0x0b, 6	; 11
    6d48:	08 95       	ret
    6d4a:	5f 9a       	sbi	0x0b, 7	; 11
    6d4c:	08 95       	ret
    6d4e:	70 9a       	sbi	0x0e, 0	; 14
    6d50:	08 95       	ret
    6d52:	71 9a       	sbi	0x0e, 1	; 14
    6d54:	08 95       	ret
    6d56:	40 9a       	sbi	0x08, 0	; 8
    6d58:	08 95       	ret
    6d5a:	41 9a       	sbi	0x08, 1	; 8
    6d5c:	08 95       	ret
    6d5e:	42 9a       	sbi	0x08, 2	; 8
    6d60:	08 95       	ret
    6d62:	43 9a       	sbi	0x08, 3	; 8
    6d64:	08 95       	ret
    6d66:	44 9a       	sbi	0x08, 4	; 8
    6d68:	c8 c0       	rjmp	.+400    	; 0x6efa <_digitalWrite_OC3C>
    6d6a:	45 9a       	sbi	0x08, 5	; 8
    6d6c:	c0 c0       	rjmp	.+384    	; 0x6eee <_digitalWrite_OC3B>
    6d6e:	46 9a       	sbi	0x08, 6	; 8
    6d70:	b8 c0       	rjmp	.+368    	; 0x6ee2 <_digitalWrite_OC3A>
    6d72:	47 9a       	sbi	0x08, 7	; 8
    6d74:	08 95       	ret
    6d76:	76 9a       	sbi	0x0e, 6	; 14
    6d78:	08 95       	ret
    6d7a:	77 9a       	sbi	0x0e, 7	; 14
    6d7c:	08 95       	ret
    6d7e:	28 9a       	sbi	0x05, 0	; 5
    6d80:	08 95       	ret
    6d82:	29 9a       	sbi	0x05, 1	; 5
    6d84:	08 95       	ret
    6d86:	2a 9a       	sbi	0x05, 2	; 5
    6d88:	08 95       	ret
    6d8a:	2b 9a       	sbi	0x05, 3	; 5
    6d8c:	08 95       	ret
    6d8e:	2c 9a       	sbi	0x05, 4	; 5
    6d90:	9c c0       	rjmp	.+312    	; 0x6eca <_digitalWrite_OC2A>
    6d92:	2d 9a       	sbi	0x05, 5	; 5
    6d94:	88 c0       	rjmp	.+272    	; 0x6ea6 <_digitalWrite_OC1A>
    6d96:	2e 9a       	sbi	0x05, 6	; 5
    6d98:	8c c0       	rjmp	.+280    	; 0x6eb2 <_digitalWrite_OC1B>
    6d9a:	2f 9a       	sbi	0x05, 7	; 5
    6d9c:	90 c0       	rjmp	.+288    	; 0x6ebe <_digitalWrite_OC1C>
    6d9e:	10 9a       	sbi	0x02, 0	; 2
    6da0:	08 95       	ret
    6da2:	11 9a       	sbi	0x02, 1	; 2
    6da4:	08 95       	ret
    6da6:	12 9a       	sbi	0x02, 2	; 2
    6da8:	08 95       	ret
    6daa:	13 9a       	sbi	0x02, 3	; 2
    6dac:	08 95       	ret
    6dae:	14 9a       	sbi	0x02, 4	; 2
    6db0:	08 95       	ret
    6db2:	15 9a       	sbi	0x02, 5	; 2
    6db4:	08 95       	ret
    6db6:	16 9a       	sbi	0x02, 6	; 2
    6db8:	08 95       	ret
    6dba:	17 9a       	sbi	0x02, 7	; 2
    6dbc:	08 95       	ret
    6dbe:	74 9a       	sbi	0x0e, 4	; 14
    6dc0:	08 95       	ret
    6dc2:	75 9a       	sbi	0x0e, 5	; 14
    6dc4:	08 95       	ret
    6dc6:	88 9a       	sbi	0x11, 0	; 17
    6dc8:	08 95       	ret
    6dca:	89 9a       	sbi	0x11, 1	; 17
    6dcc:	08 95       	ret
    6dce:	8a 9a       	sbi	0x11, 2	; 17
    6dd0:	08 95       	ret
    6dd2:	8b 9a       	sbi	0x11, 3	; 17
    6dd4:	08 95       	ret
    6dd6:	8c 9a       	sbi	0x11, 4	; 17
    6dd8:	08 95       	ret
    6dda:	8d 9a       	sbi	0x11, 5	; 17
    6ddc:	08 95       	ret
    6dde:	8e 9a       	sbi	0x11, 6	; 17
    6de0:	08 95       	ret
    6de2:	8f 9a       	sbi	0x11, 7	; 17
    6de4:	08 95       	ret

00006de6 <_digitalWrite_LOW_TABLE>:
    6de6:	58 98       	cbi	0x0b, 0	; 11
    6de8:	5a c0       	rjmp	.+180    	; 0x6e9e <_digitalWrite_OC0B>
    6dea:	59 98       	cbi	0x0b, 1	; 11
    6dec:	74 c0       	rjmp	.+232    	; 0x6ed6 <_digitalWrite_OC2B>
    6dee:	5a 98       	cbi	0x0b, 2	; 11
    6df0:	08 95       	ret
    6df2:	5b 98       	cbi	0x0b, 3	; 11
    6df4:	08 95       	ret
    6df6:	5c 98       	cbi	0x0b, 4	; 11
    6df8:	08 95       	ret
    6dfa:	5d 98       	cbi	0x0b, 5	; 11
    6dfc:	08 95       	ret
    6dfe:	5e 98       	cbi	0x0b, 6	; 11
    6e00:	08 95       	ret
    6e02:	5f 98       	cbi	0x0b, 7	; 11
    6e04:	08 95       	ret
    6e06:	70 98       	cbi	0x0e, 0	; 14
    6e08:	08 95       	ret
    6e0a:	71 98       	cbi	0x0e, 1	; 14
    6e0c:	08 95       	ret
    6e0e:	40 98       	cbi	0x08, 0	; 8
    6e10:	08 95       	ret
    6e12:	41 98       	cbi	0x08, 1	; 8
    6e14:	08 95       	ret
    6e16:	42 98       	cbi	0x08, 2	; 8
    6e18:	08 95       	ret
    6e1a:	43 98       	cbi	0x08, 3	; 8
    6e1c:	08 95       	ret
    6e1e:	44 98       	cbi	0x08, 4	; 8
    6e20:	6c c0       	rjmp	.+216    	; 0x6efa <_digitalWrite_OC3C>
    6e22:	45 98       	cbi	0x08, 5	; 8
    6e24:	64 c0       	rjmp	.+200    	; 0x6eee <_digitalWrite_OC3B>
    6e26:	46 98       	cbi	0x08, 6	; 8
    6e28:	5c c0       	rjmp	.+184    	; 0x6ee2 <_digitalWrite_OC3A>
    6e2a:	47 98       	cbi	0x08, 7	; 8
    6e2c:	08 95       	ret
    6e2e:	76 98       	cbi	0x0e, 6	; 14
    6e30:	08 95       	ret
    6e32:	77 98       	cbi	0x0e, 7	; 14
    6e34:	08 95       	ret
    6e36:	28 98       	cbi	0x05, 0	; 5
    6e38:	08 95       	ret
    6e3a:	29 98       	cbi	0x05, 1	; 5
    6e3c:	08 95       	ret
    6e3e:	2a 98       	cbi	0x05, 2	; 5
    6e40:	08 95       	ret
    6e42:	2b 98       	cbi	0x05, 3	; 5
    6e44:	08 95       	ret
    6e46:	2c 98       	cbi	0x05, 4	; 5
    6e48:	40 c0       	rjmp	.+128    	; 0x6eca <_digitalWrite_OC2A>
    6e4a:	2d 98       	cbi	0x05, 5	; 5
    6e4c:	2c c0       	rjmp	.+88     	; 0x6ea6 <_digitalWrite_OC1A>
    6e4e:	2e 98       	cbi	0x05, 6	; 5
    6e50:	30 c0       	rjmp	.+96     	; 0x6eb2 <_digitalWrite_OC1B>
    6e52:	2f 98       	cbi	0x05, 7	; 5
    6e54:	34 c0       	rjmp	.+104    	; 0x6ebe <_digitalWrite_OC1C>
    6e56:	10 98       	cbi	0x02, 0	; 2
    6e58:	08 95       	ret
    6e5a:	11 98       	cbi	0x02, 1	; 2
    6e5c:	08 95       	ret
    6e5e:	12 98       	cbi	0x02, 2	; 2
    6e60:	08 95       	ret
    6e62:	13 98       	cbi	0x02, 3	; 2
    6e64:	08 95       	ret
    6e66:	14 98       	cbi	0x02, 4	; 2
    6e68:	08 95       	ret
    6e6a:	15 98       	cbi	0x02, 5	; 2
    6e6c:	08 95       	ret
    6e6e:	16 98       	cbi	0x02, 6	; 2
    6e70:	08 95       	ret
    6e72:	17 98       	cbi	0x02, 7	; 2
    6e74:	08 95       	ret
    6e76:	74 98       	cbi	0x0e, 4	; 14
    6e78:	08 95       	ret
    6e7a:	75 98       	cbi	0x0e, 5	; 14
    6e7c:	08 95       	ret
    6e7e:	88 98       	cbi	0x11, 0	; 17
    6e80:	08 95       	ret
    6e82:	89 98       	cbi	0x11, 1	; 17
    6e84:	08 95       	ret
    6e86:	8a 98       	cbi	0x11, 2	; 17
    6e88:	08 95       	ret
    6e8a:	8b 98       	cbi	0x11, 3	; 17
    6e8c:	08 95       	ret
    6e8e:	8c 98       	cbi	0x11, 4	; 17
    6e90:	08 95       	ret
    6e92:	8d 98       	cbi	0x11, 5	; 17
    6e94:	08 95       	ret
    6e96:	8e 98       	cbi	0x11, 6	; 17
    6e98:	08 95       	ret
    6e9a:	8f 98       	cbi	0x11, 7	; 17
    6e9c:	08 95       	ret

00006e9e <_digitalWrite_OC0B>:
    6e9e:	e4 b5       	in	r30, 0x24	; 36
    6ea0:	ef 7d       	andi	r30, 0xDF	; 223
    6ea2:	e4 bd       	out	0x24, r30	; 36
    6ea4:	08 95       	ret

00006ea6 <_digitalWrite_OC1A>:
    6ea6:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6eaa:	ef 77       	andi	r30, 0x7F	; 127
    6eac:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6eb0:	08 95       	ret

00006eb2 <_digitalWrite_OC1B>:
    6eb2:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6eb6:	ef 7d       	andi	r30, 0xDF	; 223
    6eb8:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6ebc:	08 95       	ret

00006ebe <_digitalWrite_OC1C>:
    6ebe:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6ec2:	e7 7f       	andi	r30, 0xF7	; 247
    6ec4:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    6ec8:	08 95       	ret

00006eca <_digitalWrite_OC2A>:
    6eca:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6ece:	ef 77       	andi	r30, 0x7F	; 127
    6ed0:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6ed4:	08 95       	ret

00006ed6 <_digitalWrite_OC2B>:
    6ed6:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6eda:	ef 7d       	andi	r30, 0xDF	; 223
    6edc:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    6ee0:	08 95       	ret

00006ee2 <_digitalWrite_OC3A>:
    6ee2:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    6ee6:	ef 77       	andi	r30, 0x7F	; 127
    6ee8:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    6eec:	08 95       	ret

00006eee <_digitalWrite_OC3B>:
    6eee:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    6ef2:	ef 7d       	andi	r30, 0xDF	; 223
    6ef4:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    6ef8:	08 95       	ret

00006efa <_digitalWrite_OC3C>:
    6efa:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    6efe:	e7 7f       	andi	r30, 0xF7	; 247
    6f00:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    6f04:	08 95       	ret

00006f06 <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    6f06:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    6f08:	84 b7       	in	r24, 0x34	; 52
    6f0a:	87 7f       	andi	r24, 0xF7	; 247
    6f0c:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    6f0e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    6f12:	80 61       	ori	r24, 0x10	; 16
    6f14:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    6f18:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    6f1c:	80 e2       	ldi	r24, 0x20	; 32
    6f1e:	9e e4       	ldi	r25, 0x4E	; 78

00006f20 <L_1164_loop>:
    6f20:	01 97       	sbiw	r24, 0x01	; 1
    6f22:	f1 f7       	brne	.-4      	; 0x6f20 <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    6f24:	81 e0       	ldi	r24, 0x01	; 1
    6f26:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    6f2a:	80 e2       	ldi	r24, 0x20	; 32
    6f2c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    6f30:	80 e6       	ldi	r24, 0x60	; 96
    6f32:	9a ee       	ldi	r25, 0xEA	; 234

00006f34 <L_1178_loop>:
    6f34:	01 97       	sbiw	r24, 0x01	; 1
    6f36:	f1 f7       	brne	.-4      	; 0x6f34 <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    6f38:	6d de       	rcall	.-806    	; 0x6c14 <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    6f3a:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    6f3e:	ff cf       	rjmp	.-2      	; 0x6f3e <L_1178_loop+0xa>

00006f40 <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    6f40:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    6f42:	68 de       	rcall	.-816    	; 0x6c14 <disable_peripherals>
    6f44:	80 e6       	ldi	r24, 0x60	; 96
    6f46:	9a ee       	ldi	r25, 0xEA	; 234

00006f48 <L_1203_loop>:
    6f48:	01 97       	sbiw	r24, 0x01	; 1
    6f4a:	f1 f7       	brne	.-4      	; 0x6f48 <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    6f4c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    6f50:	ff cf       	rjmp	.-2      	; 0x6f50 <L_1203_loop+0x8>

00006f52 <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    6f52:	8f 93       	push	r24
    6f54:	8f b7       	in	r24, 0x3f	; 63
    6f56:	8f 93       	push	r24
    6f58:	80 91 1c 10 	lds	r24, 0x101C	; 0x80101c <timer0_fract_count>
    6f5c:	8d 5f       	subi	r24, 0xFD	; 253
    6f5e:	8d 37       	cpi	r24, 0x7D	; 125
    6f60:	d0 f4       	brcc	.+52     	; 0x6f96 <L_1218_fract_roll>

00006f62 <L_1218_fract_noroll>:
    6f62:	80 93 1c 10 	sts	0x101C, r24	; 0x80101c <timer0_fract_count>
    6f66:	80 91 1d 10 	lds	r24, 0x101D	; 0x80101d <timer0_millis_count>
    6f6a:	8f 5f       	subi	r24, 0xFF	; 255
    6f6c:	80 93 1d 10 	sts	0x101D, r24	; 0x80101d <timer0_millis_count>
    6f70:	d8 f0       	brcs	.+54     	; 0x6fa8 <L_1218_ovcount>

00006f72 <L_1218_millis_inc_sext>:
    6f72:	80 91 1e 10 	lds	r24, 0x101E	; 0x80101e <timer0_millis_count+0x1>
    6f76:	8f 4f       	sbci	r24, 0xFF	; 255
    6f78:	80 93 1e 10 	sts	0x101E, r24	; 0x80101e <timer0_millis_count+0x1>
    6f7c:	a8 f0       	brcs	.+42     	; 0x6fa8 <L_1218_ovcount>
    6f7e:	80 91 1f 10 	lds	r24, 0x101F	; 0x80101f <timer0_millis_count+0x2>
    6f82:	8f 4f       	sbci	r24, 0xFF	; 255
    6f84:	80 93 1f 10 	sts	0x101F, r24	; 0x80101f <timer0_millis_count+0x2>
    6f88:	78 f0       	brcs	.+30     	; 0x6fa8 <L_1218_ovcount>
    6f8a:	80 91 20 10 	lds	r24, 0x1020	; 0x801020 <timer0_millis_count+0x3>
    6f8e:	8f 4f       	sbci	r24, 0xFF	; 255
    6f90:	80 93 20 10 	sts	0x1020, r24	; 0x801020 <timer0_millis_count+0x3>
    6f94:	09 c0       	rjmp	.+18     	; 0x6fa8 <L_1218_ovcount>

00006f96 <L_1218_fract_roll>:
    6f96:	8d 57       	subi	r24, 0x7D	; 125
    6f98:	80 93 1c 10 	sts	0x101C, r24	; 0x80101c <timer0_fract_count>
    6f9c:	80 91 1d 10 	lds	r24, 0x101D	; 0x80101d <timer0_millis_count>
    6fa0:	8e 5f       	subi	r24, 0xFE	; 254
    6fa2:	80 93 1d 10 	sts	0x101D, r24	; 0x80101d <timer0_millis_count>
    6fa6:	28 f7       	brcc	.-54     	; 0x6f72 <L_1218_millis_inc_sext>

00006fa8 <L_1218_ovcount>:
    6fa8:	80 91 21 10 	lds	r24, 0x1021	; 0x801021 <timer0_micros_count>
    6fac:	8c 5f       	subi	r24, 0xFC	; 252
    6fae:	80 93 21 10 	sts	0x1021, r24	; 0x801021 <timer0_micros_count>
    6fb2:	58 f0       	brcs	.+22     	; 0x6fca <L_1218_end>
    6fb4:	80 91 22 10 	lds	r24, 0x1022	; 0x801022 <timer0_micros_count+0x1>
    6fb8:	8f 4f       	sbci	r24, 0xFF	; 255
    6fba:	80 93 22 10 	sts	0x1022, r24	; 0x801022 <timer0_micros_count+0x1>
    6fbe:	28 f0       	brcs	.+10     	; 0x6fca <L_1218_end>
    6fc0:	80 91 23 10 	lds	r24, 0x1023	; 0x801023 <timer0_micros_count+0x2>
    6fc4:	8f 4f       	sbci	r24, 0xFF	; 255
    6fc6:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <timer0_micros_count+0x2>

00006fca <L_1218_end>:
    6fca:	8f 91       	pop	r24
    6fcc:	8f bf       	out	0x3f, r24	; 63
    6fce:	8f 91       	pop	r24
    6fd0:	18 95       	reti

00006fd2 <delay>:
	);
}


void delay(uint32_t ms)
{
    6fd2:	cf 92       	push	r12
    6fd4:	df 92       	push	r13
    6fd6:	ef 92       	push	r14
    6fd8:	ff 92       	push	r15
    6fda:	6b 01       	movw	r12, r22
    6fdc:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    6fde:	19 d0       	rcall	.+50     	; 0x7012 <_micros>
	uint16_t start = (uint16_t)micros();
    6fe0:	9b 01       	movw	r18, r22

	while (ms > 0) {
    6fe2:	c1 14       	cp	r12, r1
    6fe4:	d1 04       	cpc	r13, r1
    6fe6:	e1 04       	cpc	r14, r1
    6fe8:	f1 04       	cpc	r15, r1
    6fea:	29 f4       	brne	.+10     	; 0x6ff6 <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    6fec:	ff 90       	pop	r15
    6fee:	ef 90       	pop	r14
    6ff0:	df 90       	pop	r13
    6ff2:	cf 90       	pop	r12
    6ff4:	08 95       	ret
    6ff6:	0d d0       	rcall	.+26     	; 0x7012 <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    6ff8:	62 1b       	sub	r22, r18
    6ffa:	73 0b       	sbc	r23, r19
    6ffc:	68 3e       	cpi	r22, 0xE8	; 232
    6ffe:	73 40       	sbci	r23, 0x03	; 3
    7000:	80 f3       	brcs	.-32     	; 0x6fe2 <delay+0x10>
			ms--;
    7002:	81 e0       	ldi	r24, 0x01	; 1
    7004:	c8 1a       	sub	r12, r24
    7006:	d1 08       	sbc	r13, r1
    7008:	e1 08       	sbc	r14, r1
    700a:	f1 08       	sbc	r15, r1
			start += 1000;
    700c:	28 51       	subi	r18, 0x18	; 24
    700e:	3c 4f       	sbci	r19, 0xFC	; 252
    7010:	e8 cf       	rjmp	.-48     	; 0x6fe2 <delay+0x10>

00007012 <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    7012:	0f b6       	in	r0, 0x3f	; 63
    7014:	f8 94       	cli
    7016:	66 b5       	in	r22, 0x26	; 38
    7018:	15 b2       	in	r1, 0x15	; 21
    701a:	70 91 21 10 	lds	r23, 0x1021	; 0x801021 <timer0_micros_count>
    701e:	80 91 22 10 	lds	r24, 0x1022	; 0x801022 <timer0_micros_count+0x1>
    7022:	90 91 23 10 	lds	r25, 0x1023	; 0x801023 <timer0_micros_count+0x2>
    7026:	0f be       	out	0x3f, r0	; 63
    7028:	10 fe       	sbrs	r1, 0
    702a:	05 c0       	rjmp	.+10     	; 0x7036 <L_1296_skip>
    702c:	6f 3f       	cpi	r22, 0xFF	; 255
    702e:	19 f0       	breq	.+6      	; 0x7036 <L_1296_skip>
    7030:	7c 5f       	subi	r23, 0xFC	; 252
    7032:	8f 4f       	sbci	r24, 0xFF	; 255
    7034:	9f 4f       	sbci	r25, 0xFF	; 255

00007036 <L_1296_skip>:
    7036:	11 24       	eor	r1, r1
    7038:	00 24       	eor	r0, r0
    703a:	66 0f       	add	r22, r22
    703c:	00 1c       	adc	r0, r0
    703e:	66 0f       	add	r22, r22
    7040:	00 1c       	adc	r0, r0
    7042:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    7044:	08 95       	ret

00007046 <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    7046:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    704a:	80 ff       	sbrs	r24, 0
    704c:	fc cf       	rjmp	.-8      	; 0x7046 <usb_wait_in_ready>
    704e:	08 95       	ret

00007050 <usb_init>:
    7050:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7054:	87 ff       	sbrs	r24, 7
    7056:	02 c0       	rjmp	.+4      	; 0x705c <usb_init+0xc>
    7058:	85 ff       	sbrs	r24, 5
    705a:	1b c0       	rjmp	.+54     	; 0x7092 <usb_init+0x42>
    705c:	81 e8       	ldi	r24, 0x81	; 129
    705e:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    7062:	80 ea       	ldi	r24, 0xA0	; 160
    7064:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7068:	86 e1       	ldi	r24, 0x16	; 22
    706a:	89 bd       	out	0x29, r24	; 41
    706c:	09 b4       	in	r0, 0x29	; 41
    706e:	00 fe       	sbrs	r0, 0
    7070:	fd cf       	rjmp	.-6      	; 0x706c <usb_init+0x1c>
    7072:	80 e9       	ldi	r24, 0x90	; 144
    7074:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    7078:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    707c:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <usb_configuration>
    7080:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <usb_suspended>
    7084:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <__bss_end>
    7088:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    708c:	8d e0       	ldi	r24, 0x0D	; 13
    708e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7092:	08 95       	ret

00007094 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    7094:	1f 92       	push	r1
    7096:	0f 92       	push	r0
    7098:	0f b6       	in	r0, 0x3f	; 63
    709a:	0f 92       	push	r0
    709c:	11 24       	eor	r1, r1
    709e:	0b b6       	in	r0, 0x3b	; 59
    70a0:	0f 92       	push	r0
    70a2:	2f 93       	push	r18
    70a4:	3f 93       	push	r19
    70a6:	4f 93       	push	r20
    70a8:	5f 93       	push	r21
    70aa:	6f 93       	push	r22
    70ac:	7f 93       	push	r23
    70ae:	8f 93       	push	r24
    70b0:	9f 93       	push	r25
    70b2:	af 93       	push	r26
    70b4:	bf 93       	push	r27
    70b6:	ef 93       	push	r30
    70b8:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    70ba:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    70be:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    70c2:	93 ff       	sbrs	r25, 3
    70c4:	11 c0       	rjmp	.+34     	; 0x70e8 <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    70c6:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    70ca:	81 e0       	ldi	r24, 0x01	; 1
    70cc:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    70d0:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    70d4:	82 e2       	ldi	r24, 0x22	; 34
    70d6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    70da:	88 e0       	ldi	r24, 0x08	; 8
    70dc:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    70e0:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <usb_configuration>
		cdc_line_rtsdtr = 0;
    70e4:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    70e8:	92 ff       	sbrs	r25, 2
    70ea:	1d c0       	rjmp	.+58     	; 0x7126 <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    70ec:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <usb_configuration>
    70f0:	88 23       	and	r24, r24
    70f2:	c9 f0       	breq	.+50     	; 0x7126 <__vector_10+0x92>
			t = transmit_flush_timer;
    70f4:	80 91 27 10 	lds	r24, 0x1027	; 0x801027 <transmit_flush_timer>
			if (t) {
    70f8:	88 23       	and	r24, r24
    70fa:	59 f0       	breq	.+22     	; 0x7112 <__vector_10+0x7e>
				transmit_flush_timer = --t;
    70fc:	81 50       	subi	r24, 0x01	; 1
    70fe:	80 93 27 10 	sts	0x1027, r24	; 0x801027 <transmit_flush_timer>
				if (!t) {
    7102:	81 11       	cpse	r24, r1
    7104:	06 c0       	rjmp	.+12     	; 0x7112 <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    7106:	84 e0       	ldi	r24, 0x04	; 4
    7108:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    710c:	8a e3       	ldi	r24, 0x3A	; 58
    710e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    7112:	80 91 26 10 	lds	r24, 0x1026	; 0x801026 <reboot_timer>
			if (t) {
    7116:	88 23       	and	r24, r24
    7118:	31 f0       	breq	.+12     	; 0x7126 <__vector_10+0x92>
				reboot_timer = --t;
    711a:	81 50       	subi	r24, 0x01	; 1
    711c:	80 93 26 10 	sts	0x1026, r24	; 0x801026 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    7120:	81 11       	cpse	r24, r1
    7122:	01 c0       	rjmp	.+2      	; 0x7126 <__vector_10+0x92>
    7124:	f0 de       	rcall	.-544    	; 0x6f06 <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    7126:	90 ff       	sbrs	r25, 0
    7128:	0c c0       	rjmp	.+24     	; 0x7142 <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    712a:	80 e1       	ldi	r24, 0x10	; 16
    712c:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    7130:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <usb_configuration>
		usb_suspended = 1;
    7134:	81 e0       	ldi	r24, 0x01	; 1
    7136:	80 93 aa 10 	sts	0x10AA, r24	; 0x8010aa <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    713a:	80 ea       	ldi	r24, 0xA0	; 160
    713c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    7140:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    7142:	80 91 aa 10 	lds	r24, 0x10AA	; 0x8010aa <usb_suspended>
    7146:	88 23       	and	r24, r24
    7148:	79 f0       	breq	.+30     	; 0x7168 <__vector_10+0xd4>
    714a:	94 ff       	sbrs	r25, 4
    714c:	0d c0       	rjmp	.+26     	; 0x7168 <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    714e:	86 e1       	ldi	r24, 0x16	; 22
    7150:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    7152:	09 b4       	in	r0, 0x29	; 41
    7154:	00 fe       	sbrs	r0, 0
    7156:	fd cf       	rjmp	.-6      	; 0x7152 <__vector_10+0xbe>
		USB_CONFIG();
    7158:	80 e9       	ldi	r24, 0x90	; 144
    715a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    715e:	8d e0       	ldi	r24, 0x0D	; 13
    7160:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    7164:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <usb_suspended>
		return;
	}
}
    7168:	ff 91       	pop	r31
    716a:	ef 91       	pop	r30
    716c:	bf 91       	pop	r27
    716e:	af 91       	pop	r26
    7170:	9f 91       	pop	r25
    7172:	8f 91       	pop	r24
    7174:	7f 91       	pop	r23
    7176:	6f 91       	pop	r22
    7178:	5f 91       	pop	r21
    717a:	4f 91       	pop	r20
    717c:	3f 91       	pop	r19
    717e:	2f 91       	pop	r18
    7180:	0f 90       	pop	r0
    7182:	0b be       	out	0x3b, r0	; 59
    7184:	0f 90       	pop	r0
    7186:	0f be       	out	0x3f, r0	; 63
    7188:	0f 90       	pop	r0
    718a:	1f 90       	pop	r1
    718c:	18 95       	reti

0000718e <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    718e:	1f 92       	push	r1
    7190:	0f 92       	push	r0
    7192:	0f b6       	in	r0, 0x3f	; 63
    7194:	0f 92       	push	r0
    7196:	11 24       	eor	r1, r1
    7198:	0b b6       	in	r0, 0x3b	; 59
    719a:	0f 92       	push	r0
    719c:	ef 92       	push	r14
    719e:	ff 92       	push	r15
    71a0:	0f 93       	push	r16
    71a2:	1f 93       	push	r17
    71a4:	2f 93       	push	r18
    71a6:	3f 93       	push	r19
    71a8:	4f 93       	push	r20
    71aa:	5f 93       	push	r21
    71ac:	6f 93       	push	r22
    71ae:	7f 93       	push	r23
    71b0:	8f 93       	push	r24
    71b2:	9f 93       	push	r25
    71b4:	af 93       	push	r26
    71b6:	bf 93       	push	r27
    71b8:	cf 93       	push	r28
    71ba:	df 93       	push	r29
    71bc:	ef 93       	push	r30
    71be:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    71c0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    71c4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    71c8:	83 ff       	sbrs	r24, 3
    71ca:	20 c0       	rjmp	.+64     	; 0x720c <__vector_11+0x7e>
		bmRequestType = UEDATX;
    71cc:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    71d0:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    71d4:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    71d8:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    71dc:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    71e0:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    71e4:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    71e8:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    71ec:	82 ef       	ldi	r24, 0xF2	; 242
    71ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    71f2:	c6 30       	cpi	r28, 0x06	; 6
    71f4:	09 f0       	breq	.+2      	; 0x71f8 <__vector_11+0x6a>
    71f6:	5b c0       	rjmp	.+182    	; 0x72ae <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    71f8:	e4 e9       	ldi	r30, 0x94	; 148
    71fa:	f7 e0       	ldi	r31, 0x07	; 7
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    71fc:	85 91       	lpm	r24, Z+
    71fe:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    7200:	e8 16       	cp	r14, r24
    7202:	f9 06       	cpc	r15, r25
    7204:	39 f0       	breq	.+14     	; 0x7214 <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    7206:	35 96       	adiw	r30, 0x05	; 5
    7208:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    720a:	c1 f7       	brne	.-16     	; 0x71fc <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    720c:	81 e2       	ldi	r24, 0x21	; 33
    720e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7212:	2b c0       	rjmp	.+86     	; 0x726a <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    7214:	85 91       	lpm	r24, Z+
    7216:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    7218:	08 17       	cp	r16, r24
    721a:	19 07       	cpc	r17, r25
    721c:	11 f0       	breq	.+4      	; 0x7222 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    721e:	33 96       	adiw	r30, 0x03	; 3
					continue;
    7220:	f3 cf       	rjmp	.-26     	; 0x7208 <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    7222:	45 91       	lpm	r20, Z+
    7224:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    7226:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    7228:	2f 3f       	cpi	r18, 0xFF	; 255
    722a:	31 05       	cpc	r19, r1
    722c:	19 f0       	breq	.+6      	; 0x7234 <__vector_11+0xa6>
    722e:	10 f0       	brcs	.+4      	; 0x7234 <__vector_11+0xa6>
    7230:	2f ef       	ldi	r18, 0xFF	; 255
    7232:	30 e0       	ldi	r19, 0x00	; 0
    7234:	82 17       	cp	r24, r18
    7236:	08 f4       	brcc	.+2      	; 0x723a <__vector_11+0xac>
    7238:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    723a:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    723c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    7240:	98 2f       	mov	r25, r24
    7242:	95 70       	andi	r25, 0x05	; 5
    7244:	d9 f3       	breq	.-10     	; 0x723c <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    7246:	82 fd       	sbrc	r24, 2
    7248:	10 c0       	rjmp	.+32     	; 0x726a <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    724a:	82 2f       	mov	r24, r18
    724c:	21 32       	cpi	r18, 0x21	; 33
    724e:	08 f0       	brcs	.+2      	; 0x7252 <__vector_11+0xc4>
    7250:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    7252:	98 2f       	mov	r25, r24
    7254:	91 11       	cpse	r25, r1
    7256:	24 c0       	rjmp	.+72     	; 0x72a0 <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    7258:	92 2f       	mov	r25, r18
    725a:	98 1b       	sub	r25, r24
    725c:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    725e:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    7262:	91 11       	cpse	r25, r1
    7264:	1b c0       	rjmp	.+54     	; 0x729c <__vector_11+0x10e>
    7266:	20 32       	cpi	r18, 0x20	; 32
    7268:	c8 f4       	brcc	.+50     	; 0x729c <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    726a:	ff 91       	pop	r31
    726c:	ef 91       	pop	r30
    726e:	df 91       	pop	r29
    7270:	cf 91       	pop	r28
    7272:	bf 91       	pop	r27
    7274:	af 91       	pop	r26
    7276:	9f 91       	pop	r25
    7278:	8f 91       	pop	r24
    727a:	7f 91       	pop	r23
    727c:	6f 91       	pop	r22
    727e:	5f 91       	pop	r21
    7280:	4f 91       	pop	r20
    7282:	3f 91       	pop	r19
    7284:	2f 91       	pop	r18
    7286:	1f 91       	pop	r17
    7288:	0f 91       	pop	r16
    728a:	ff 90       	pop	r15
    728c:	ef 90       	pop	r14
    728e:	0f 90       	pop	r0
    7290:	0b be       	out	0x3b, r0	; 59
    7292:	0f 90       	pop	r0
    7294:	0f be       	out	0x3f, r0	; 63
    7296:	0f 90       	pop	r0
    7298:	1f 90       	pop	r1
    729a:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    729c:	28 2f       	mov	r18, r24
    729e:	ce cf       	rjmp	.-100    	; 0x723c <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    72a0:	fa 01       	movw	r30, r20
    72a2:	45 91       	lpm	r20, Z+
    72a4:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    72a8:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    72aa:	91 50       	subi	r25, 0x01	; 1
    72ac:	d3 cf       	rjmp	.-90     	; 0x7254 <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    72ae:	c5 30       	cpi	r28, 0x05	; 5
    72b0:	49 f4       	brne	.+18     	; 0x72c4 <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    72b2:	8e ef       	ldi	r24, 0xFE	; 254
    72b4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    72b8:	c6 de       	rcall	.-628    	; 0x7046 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    72ba:	8e 2d       	mov	r24, r14
    72bc:	80 68       	ori	r24, 0x80	; 128
    72be:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    72c2:	d3 cf       	rjmp	.-90     	; 0x726a <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    72c4:	c9 30       	cpi	r28, 0x09	; 9
    72c6:	21 f5       	brne	.+72     	; 0x7310 <__vector_11+0x182>
    72c8:	d1 11       	cpse	r29, r1
    72ca:	a0 cf       	rjmp	.-192    	; 0x720c <__vector_11+0x7e>
			usb_configuration = wValue;
    72cc:	e0 92 ab 10 	sts	0x10AB, r14	; 0x8010ab <usb_configuration>
			cdc_line_rtsdtr = 0;
    72d0:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <__bss_end>
			transmit_flush_timer = 0;
    72d4:	10 92 27 10 	sts	0x1027, r1	; 0x801027 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    72d8:	8e ef       	ldi	r24, 0xFE	; 254
    72da:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    72de:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    72e0:	e7 e5       	ldi	r30, 0x57	; 87
    72e2:	f8 e0       	ldi	r31, 0x08	; 8
			for (i=1; i<5; i++) {
				UENUM = i;
    72e4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    72e8:	95 91       	lpm	r25, Z+
				UECONX = en;
    72ea:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    72ee:	99 23       	and	r25, r25
    72f0:	31 f0       	breq	.+12     	; 0x72fe <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    72f2:	95 91       	lpm	r25, Z+
    72f4:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    72f8:	95 91       	lpm	r25, Z+
    72fa:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    72fe:	8f 5f       	subi	r24, 0xFF	; 255
    7300:	85 30       	cpi	r24, 0x05	; 5
    7302:	81 f7       	brne	.-32     	; 0x72e4 <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    7304:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    7306:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    730a:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    730e:	ad cf       	rjmp	.-166    	; 0x726a <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    7310:	c8 30       	cpi	r28, 0x08	; 8
    7312:	61 f4       	brne	.+24     	; 0x732c <__vector_11+0x19e>
    7314:	d0 38       	cpi	r29, 0x80	; 128
    7316:	09 f0       	breq	.+2      	; 0x731a <__vector_11+0x18c>
			usb_wait_in_ready();
    7318:	79 cf       	rjmp	.-270    	; 0x720c <__vector_11+0x7e>
    731a:	95 de       	rcall	.-726    	; 0x7046 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    731c:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <usb_configuration>
    7320:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7324:	8e ef       	ldi	r24, 0xFE	; 254
    7326:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    732a:	9f cf       	rjmp	.-194    	; 0x726a <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    732c:	c1 32       	cpi	r28, 0x21	; 33
    732e:	79 f4       	brne	.+30     	; 0x734e <__vector_11+0x1c0>
    7330:	d1 3a       	cpi	r29, 0xA1	; 161
    7332:	09 f0       	breq	.+2      	; 0x7336 <__vector_11+0x1a8>
			usb_wait_in_ready();
    7334:	6b cf       	rjmp	.-298    	; 0x720c <__vector_11+0x7e>
    7336:	87 de       	rcall	.-754    	; 0x7046 <usb_wait_in_ready>
			p = cdc_line_coding;
    7338:	e1 e1       	ldi	r30, 0x11	; 17
    733a:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    733c:	80 81       	ld	r24, Z
    733e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7342:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    7344:	81 e0       	ldi	r24, 0x01	; 1
    7346:	e8 31       	cpi	r30, 0x18	; 24
    7348:	f8 07       	cpc	r31, r24
    734a:	c1 f7       	brne	.-16     	; 0x733c <__vector_11+0x1ae>
    734c:	eb cf       	rjmp	.-42     	; 0x7324 <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    734e:	c0 32       	cpi	r28, 0x20	; 32
    7350:	09 f0       	breq	.+2      	; 0x7354 <__vector_11+0x1c6>
    7352:	47 c0       	rjmp	.+142    	; 0x73e2 <__vector_11+0x254>
    7354:	d1 32       	cpi	r29, 0x21	; 33
    7356:	09 f0       	breq	.+2      	; 0x735a <__vector_11+0x1cc>
    7358:	59 cf       	rjmp	.-334    	; 0x720c <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    735a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    735e:	82 ff       	sbrs	r24, 2
    7360:	fc cf       	rjmp	.-8      	; 0x735a <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    7362:	e1 e1       	ldi	r30, 0x11	; 17
    7364:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    7366:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    736a:	80 83       	st	Z, r24
    736c:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    736e:	91 e0       	ldi	r25, 0x01	; 1
    7370:	e8 31       	cpi	r30, 0x18	; 24
    7372:	f9 07       	cpc	r31, r25
    7374:	c1 f7       	brne	.-16     	; 0x7366 <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    7376:	8b ef       	ldi	r24, 0xFB	; 251
    7378:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    737c:	8e ef       	ldi	r24, 0xFE	; 254
    737e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    7382:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    7386:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    738a:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    738e:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    7392:	90 e0       	ldi	r25, 0x00	; 0
    7394:	b0 e0       	ldi	r27, 0x00	; 0
    7396:	a0 e0       	ldi	r26, 0x00	; 0
    7398:	dc 01       	movw	r26, r24
    739a:	99 27       	eor	r25, r25
    739c:	88 27       	eor	r24, r24
    739e:	94 2b       	or	r25, r20
    73a0:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    73a2:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    73a4:	86 38       	cpi	r24, 0x86	; 134
    73a6:	91 05       	cpc	r25, r1
    73a8:	a1 05       	cpc	r26, r1
    73aa:	b1 05       	cpc	r27, r1
    73ac:	21 f4       	brne	.+8      	; 0x73b6 <__vector_11+0x228>
    73ae:	8f e0       	ldi	r24, 0x0F	; 15
    73b0:	80 93 26 10 	sts	0x1026, r24	; 0x801026 <reboot_timer>
    73b4:	5a cf       	rjmp	.-332    	; 0x726a <__vector_11+0xdc>
			if (baud == 150UL) {
    73b6:	86 39       	cpi	r24, 0x96	; 150
    73b8:	91 05       	cpc	r25, r1
    73ba:	a1 05       	cpc	r26, r1
    73bc:	b1 05       	cpc	r27, r1
    73be:	09 f0       	breq	.+2      	; 0x73c2 <__vector_11+0x234>
    73c0:	54 cf       	rjmp	.-344    	; 0x726a <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    73c2:	84 e0       	ldi	r24, 0x04	; 4
    73c4:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    73c8:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    73ca:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    73ce:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    73d0:	09 f4       	brne	.+2      	; 0x73d4 <__vector_11+0x246>
    73d2:	b6 dd       	rcall	.-1172   	; 0x6f40 <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    73d4:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    73d8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    73dc:	82 fd       	sbrc	r24, 2
    73de:	fc cf       	rjmp	.-8      	; 0x73d8 <__vector_11+0x24a>
    73e0:	f4 cf       	rjmp	.-24     	; 0x73ca <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    73e2:	c2 32       	cpi	r28, 0x22	; 34
    73e4:	39 f4       	brne	.+14     	; 0x73f4 <__vector_11+0x266>
    73e6:	d1 32       	cpi	r29, 0x21	; 33
    73e8:	09 f0       	breq	.+2      	; 0x73ec <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    73ea:	10 cf       	rjmp	.-480    	; 0x720c <__vector_11+0x7e>
    73ec:	e0 92 a9 10 	sts	0x10A9, r14	; 0x8010a9 <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    73f0:	2a de       	rcall	.-940    	; 0x7046 <usb_wait_in_ready>
    73f2:	98 cf       	rjmp	.-208    	; 0x7324 <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    73f4:	c3 32       	cpi	r28, 0x23	; 35
    73f6:	21 f4       	brne	.+8      	; 0x7400 <__vector_11+0x272>
    73f8:	d1 32       	cpi	r29, 0x21	; 33
    73fa:	09 f0       	breq	.+2      	; 0x73fe <__vector_11+0x270>
    73fc:	07 cf       	rjmp	.-498    	; 0x720c <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    73fe:	f8 cf       	rjmp	.-16     	; 0x73f0 <__vector_11+0x262>
    7400:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    7402:	11 c0       	rjmp	.+34     	; 0x7426 <__vector_11+0x298>
    7404:	20 de       	rcall	.-960    	; 0x7046 <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    7406:	d2 38       	cpi	r29, 0x82	; 130
    7408:	49 f4       	brne	.+18     	; 0x741c <__vector_11+0x28e>
				UENUM = wIndex;
    740a:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    740e:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7412:	c5 fb       	bst	r28, 5
    7414:	cc 27       	eor	r28, r28
    7416:	c0 f9       	bld	r28, 0
				UENUM = 0;
    7418:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    741c:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    7420:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7424:	7f cf       	rjmp	.-258    	; 0x7324 <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    7426:	8c 2f       	mov	r24, r28
    7428:	8d 7f       	andi	r24, 0xFD	; 253
    742a:	81 30       	cpi	r24, 0x01	; 1
    742c:	09 f0       	breq	.+2      	; 0x7430 <__vector_11+0x2a2>
    742e:	ee ce       	rjmp	.-548    	; 0x720c <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    7430:	d2 30       	cpi	r29, 0x02	; 2
    7432:	09 f0       	breq	.+2      	; 0x7436 <__vector_11+0x2a8>
    7434:	eb ce       	rjmp	.-554    	; 0x720c <__vector_11+0x7e>
    7436:	ef 28       	or	r14, r15
    7438:	09 f0       	breq	.+2      	; 0x743c <__vector_11+0x2ae>
    743a:	e8 ce       	rjmp	.-560    	; 0x720c <__vector_11+0x7e>
			i = wIndex & 0x7F;
    743c:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    743e:	8f ef       	ldi	r24, 0xFF	; 255
    7440:	80 0f       	add	r24, r16
    7442:	86 30       	cpi	r24, 0x06	; 6
    7444:	08 f0       	brcs	.+2      	; 0x7448 <__vector_11+0x2ba>
    7446:	e2 ce       	rjmp	.-572    	; 0x720c <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7448:	8e ef       	ldi	r24, 0xFE	; 254
    744a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    744e:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    7452:	c3 30       	cpi	r28, 0x03	; 3
    7454:	09 f4       	brne	.+2      	; 0x7458 <__vector_11+0x2ca>
    7456:	da ce       	rjmp	.-588    	; 0x720c <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    7458:	89 e1       	ldi	r24, 0x19	; 25
    745a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    745e:	81 e0       	ldi	r24, 0x01	; 1
    7460:	90 e0       	ldi	r25, 0x00	; 0
    7462:	01 c0       	rjmp	.+2      	; 0x7466 <__vector_11+0x2d8>
    7464:	88 0f       	add	r24, r24
    7466:	0a 95       	dec	r16
    7468:	ea f7       	brpl	.-6      	; 0x7464 <__vector_11+0x2d6>
    746a:	4d cf       	rjmp	.-358    	; 0x7306 <__vector_11+0x178>

0000746c <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    746c:	50 91 5c 10 	lds	r21, 0x105C	; 0x80105c <rx_buffer_head>
    7470:	40 91 5b 10 	lds	r20, 0x105B	; 0x80105b <rx_buffer_tail>
    7474:	85 2f       	mov	r24, r21
    7476:	90 e0       	ldi	r25, 0x00	; 0
    7478:	24 2f       	mov	r18, r20
    747a:	30 e0       	ldi	r19, 0x00	; 0
    747c:	54 17       	cp	r21, r20
    747e:	18 f0       	brcs	.+6      	; 0x7486 <HardwareSerial::available()+0x1a>
    7480:	82 1b       	sub	r24, r18
    7482:	93 0b       	sbc	r25, r19
    7484:	08 95       	ret
    7486:	80 5c       	subi	r24, 0xC0	; 192
    7488:	9f 4f       	sbci	r25, 0xFF	; 255
    748a:	fa cf       	rjmp	.-12     	; 0x7480 <HardwareSerial::available()+0x14>

0000748c <HardwareSerial::availableForWrite()>:
    748c:	50 91 5c 10 	lds	r21, 0x105C	; 0x80105c <rx_buffer_head>
    7490:	40 91 5b 10 	lds	r20, 0x105B	; 0x80105b <rx_buffer_tail>
    7494:	25 2f       	mov	r18, r21
    7496:	30 e0       	ldi	r19, 0x00	; 0
    7498:	84 2f       	mov	r24, r20
    749a:	90 e0       	ldi	r25, 0x00	; 0
    749c:	82 1b       	sub	r24, r18
    749e:	93 0b       	sbc	r25, r19
    74a0:	54 17       	cp	r21, r20
    74a2:	10 f0       	brcs	.+4      	; 0x74a8 <HardwareSerial::availableForWrite()+0x1c>
    74a4:	87 96       	adiw	r24, 0x27	; 39
    74a6:	08 95       	ret
    74a8:	01 97       	sbiw	r24, 0x01	; 1
    74aa:	08 95       	ret

000074ac <HardwareSerial::peek()>:
    74ac:	80 91 5c 10 	lds	r24, 0x105C	; 0x80105c <rx_buffer_head>
    74b0:	e0 91 5b 10 	lds	r30, 0x105B	; 0x80105b <rx_buffer_tail>
    74b4:	8e 17       	cp	r24, r30
    74b6:	51 f0       	breq	.+20     	; 0x74cc <HardwareSerial::peek()+0x20>
    74b8:	ef 5f       	subi	r30, 0xFF	; 255
    74ba:	e0 34       	cpi	r30, 0x40	; 64
    74bc:	08 f0       	brcs	.+2      	; 0x74c0 <HardwareSerial::peek()+0x14>
    74be:	e0 e0       	ldi	r30, 0x00	; 0
    74c0:	f0 e0       	ldi	r31, 0x00	; 0
    74c2:	e3 5a       	subi	r30, 0xA3	; 163
    74c4:	ff 4e       	sbci	r31, 0xEF	; 239
    74c6:	80 81       	ld	r24, Z
    74c8:	90 e0       	ldi	r25, 0x00	; 0
    74ca:	08 95       	ret
    74cc:	8f ef       	ldi	r24, 0xFF	; 255
    74ce:	9f ef       	ldi	r25, 0xFF	; 255
    74d0:	08 95       	ret

000074d2 <HardwareSerial::read()>:
    74d2:	90 91 5c 10 	lds	r25, 0x105C	; 0x80105c <rx_buffer_head>
    74d6:	80 91 5b 10 	lds	r24, 0x105B	; 0x80105b <rx_buffer_tail>
    74da:	98 17       	cp	r25, r24
    74dc:	79 f0       	breq	.+30     	; 0x74fc <HardwareSerial::read()+0x2a>
    74de:	90 91 5b 10 	lds	r25, 0x105B	; 0x80105b <rx_buffer_tail>
    74e2:	9f 5f       	subi	r25, 0xFF	; 255
    74e4:	90 34       	cpi	r25, 0x40	; 64
    74e6:	08 f0       	brcs	.+2      	; 0x74ea <HardwareSerial::read()+0x18>
    74e8:	90 e0       	ldi	r25, 0x00	; 0
    74ea:	e9 2f       	mov	r30, r25
    74ec:	f0 e0       	ldi	r31, 0x00	; 0
    74ee:	e3 5a       	subi	r30, 0xA3	; 163
    74f0:	ff 4e       	sbci	r31, 0xEF	; 239
    74f2:	80 81       	ld	r24, Z
    74f4:	90 93 5b 10 	sts	0x105B, r25	; 0x80105b <rx_buffer_tail>
    74f8:	90 e0       	ldi	r25, 0x00	; 0
    74fa:	08 95       	ret
    74fc:	8f ef       	ldi	r24, 0xFF	; 255
    74fe:	9f ef       	ldi	r25, 0xFF	; 255
    7500:	08 95       	ret

00007502 <HardwareSerial::flush()>:
    7502:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <transmitting>
    7506:	81 11       	cpse	r24, r1
    7508:	fc cf       	rjmp	.-8      	; 0x7502 <HardwareSerial::flush()>
    750a:	08 95       	ret

0000750c <HardwareSerial::write(unsigned char)>:
    750c:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7510:	23 fd       	sbrc	r18, 3
    7512:	06 c0       	rjmp	.+12     	; 0x7520 <HardwareSerial::write(unsigned char)+0x14>
    7514:	21 e0       	ldi	r18, 0x01	; 1
    7516:	fc 01       	movw	r30, r24
    7518:	22 83       	std	Z+2, r18	; 0x02
    751a:	90 e0       	ldi	r25, 0x00	; 0
    751c:	80 e0       	ldi	r24, 0x00	; 0
    751e:	08 95       	ret
    7520:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    7524:	8f 3f       	cpi	r24, 0xFF	; 255
    7526:	41 f0       	breq	.+16     	; 0x7538 <HardwareSerial::write(unsigned char)+0x2c>
    7528:	80 91 30 10 	lds	r24, 0x1030	; 0x801030 <transmitting>
    752c:	81 11       	cpse	r24, r1
    752e:	04 c0       	rjmp	.+8      	; 0x7538 <HardwareSerial::write(unsigned char)+0x2c>
    7530:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    7534:	f0 e0       	ldi	r31, 0x00	; 0
    7536:	ee db       	rcall	.-2084   	; 0x6d14 <_digitalWrite_HIGH>
    7538:	90 91 32 10 	lds	r25, 0x1032	; 0x801032 <tx_buffer_head>
    753c:	80 91 31 10 	lds	r24, 0x1031	; 0x801031 <tx_buffer_tail>
    7540:	98 13       	cpse	r25, r24
    7542:	04 c0       	rjmp	.+8      	; 0x754c <HardwareSerial::write(unsigned char)+0x40>
    7544:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    7548:	85 fd       	sbrc	r24, 5
    754a:	19 c0       	rjmp	.+50     	; 0x757e <HardwareSerial::write(unsigned char)+0x72>
    754c:	80 91 32 10 	lds	r24, 0x1032	; 0x801032 <tx_buffer_head>
    7550:	8f 5f       	subi	r24, 0xFF	; 255
    7552:	88 32       	cpi	r24, 0x28	; 40
    7554:	f8 f4       	brcc	.+62     	; 0x7594 <HardwareSerial::write(unsigned char)+0x88>
    7556:	90 91 31 10 	lds	r25, 0x1031	; 0x801031 <tx_buffer_tail>
    755a:	98 17       	cp	r25, r24
    755c:	e1 f3       	breq	.-8      	; 0x7556 <HardwareSerial::write(unsigned char)+0x4a>
    755e:	e8 2f       	mov	r30, r24
    7560:	f0 e0       	ldi	r31, 0x00	; 0
    7562:	ed 5c       	subi	r30, 0xCD	; 205
    7564:	ff 4e       	sbci	r31, 0xEF	; 239
    7566:	60 83       	st	Z, r22
    7568:	91 e0       	ldi	r25, 0x01	; 1
    756a:	90 93 30 10 	sts	0x1030, r25	; 0x801030 <transmitting>
    756e:	80 93 32 10 	sts	0x1032, r24	; 0x801032 <tx_buffer_head>
    7572:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7576:	80 62       	ori	r24, 0x20	; 32
    7578:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    757c:	08 c0       	rjmp	.+16     	; 0x758e <HardwareSerial::write(unsigned char)+0x82>
    757e:	8f b7       	in	r24, 0x3f	; 63
    7580:	f8 94       	cli
    7582:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    7586:	91 e0       	ldi	r25, 0x01	; 1
    7588:	90 93 30 10 	sts	0x1030, r25	; 0x801030 <transmitting>
    758c:	8f bf       	out	0x3f, r24	; 63
    758e:	81 e0       	ldi	r24, 0x01	; 1
    7590:	90 e0       	ldi	r25, 0x00	; 0
    7592:	08 95       	ret
    7594:	80 e0       	ldi	r24, 0x00	; 0
    7596:	df cf       	rjmp	.-66     	; 0x7556 <HardwareSerial::write(unsigned char)+0x4a>

00007598 <HardwareSerial::_begin(unsigned int, unsigned char)>:
    7598:	1f 93       	push	r17
    759a:	cf 93       	push	r28
    759c:	df 93       	push	r29
    759e:	eb 01       	movw	r28, r22
    75a0:	14 2f       	mov	r17, r20
    75a2:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    75a6:	4f 3f       	cpi	r20, 0xFF	; 255
    75a8:	29 f0       	breq	.+10     	; 0x75b4 <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    75aa:	84 2f       	mov	r24, r20
    75ac:	a2 db       	rcall	.-2236   	; 0x6cf2 <_pinMode_output>
    75ae:	e1 2f       	mov	r30, r17
    75b0:	f0 e0       	ldi	r31, 0x00	; 0
    75b2:	b6 db       	rcall	.-2196   	; 0x6d20 <_digitalWrite_LOW>
    75b4:	c0 ff       	sbrs	r28, 0
    75b6:	24 c0       	rjmp	.+72     	; 0x7600 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    75b8:	c1 30       	cpi	r28, 0x01	; 1
    75ba:	80 e1       	ldi	r24, 0x10	; 16
    75bc:	d8 07       	cpc	r29, r24
    75be:	00 f5       	brcc	.+64     	; 0x7600 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    75c0:	82 e0       	ldi	r24, 0x02	; 2
    75c2:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    75c6:	21 97       	sbiw	r28, 0x01	; 1
    75c8:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    75cc:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    75d0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    75d4:	83 fd       	sbrc	r24, 3
    75d6:	10 c0       	rjmp	.+32     	; 0x75f8 <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    75d8:	10 92 5c 10 	sts	0x105C, r1	; 0x80105c <rx_buffer_head>
    75dc:	10 92 5b 10 	sts	0x105B, r1	; 0x80105b <rx_buffer_tail>
    75e0:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <tx_buffer_head>
    75e4:	10 92 31 10 	sts	0x1031, r1	; 0x801031 <tx_buffer_tail>
    75e8:	10 92 30 10 	sts	0x1030, r1	; 0x801030 <transmitting>
    75ec:	86 e0       	ldi	r24, 0x06	; 6
    75ee:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    75f2:	88 ed       	ldi	r24, 0xD8	; 216
    75f4:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    75f8:	df 91       	pop	r29
    75fa:	cf 91       	pop	r28
    75fc:	1f 91       	pop	r17
    75fe:	08 95       	ret
    7600:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    7604:	d6 95       	lsr	r29
    7606:	c7 95       	ror	r28
    7608:	de cf       	rjmp	.-68     	; 0x75c6 <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

0000760a <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    760a:	1f 92       	push	r1
    760c:	0f 92       	push	r0
    760e:	0f b6       	in	r0, 0x3f	; 63
    7610:	0f 92       	push	r0
    7612:	11 24       	eor	r1, r1
    7614:	0b b6       	in	r0, 0x3b	; 59
    7616:	0f 92       	push	r0
    7618:	2f 93       	push	r18
    761a:	8f 93       	push	r24
    761c:	9f 93       	push	r25
    761e:	ef 93       	push	r30
    7620:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    7622:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    7626:	80 91 5c 10 	lds	r24, 0x105C	; 0x80105c <rx_buffer_head>
    762a:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    762c:	80 34       	cpi	r24, 0x40	; 64
    762e:	08 f0       	brcs	.+2      	; 0x7632 <__vector_25+0x28>
    7630:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    7632:	20 91 5b 10 	lds	r18, 0x105B	; 0x80105b <rx_buffer_tail>
    7636:	28 17       	cp	r18, r24
    7638:	39 f0       	breq	.+14     	; 0x7648 <__vector_25+0x3e>
		rx_buffer[i] = c;
    763a:	e8 2f       	mov	r30, r24
    763c:	f0 e0       	ldi	r31, 0x00	; 0
    763e:	e3 5a       	subi	r30, 0xA3	; 163
    7640:	ff 4e       	sbci	r31, 0xEF	; 239
    7642:	90 83       	st	Z, r25
		rx_buffer_head = i;
    7644:	80 93 5c 10 	sts	0x105C, r24	; 0x80105c <rx_buffer_head>
	}
}
    7648:	ff 91       	pop	r31
    764a:	ef 91       	pop	r30
    764c:	9f 91       	pop	r25
    764e:	8f 91       	pop	r24
    7650:	2f 91       	pop	r18
    7652:	0f 90       	pop	r0
    7654:	0b be       	out	0x3b, r0	; 59
    7656:	0f 90       	pop	r0
    7658:	0f be       	out	0x3f, r0	; 63
    765a:	0f 90       	pop	r0
    765c:	1f 90       	pop	r1
    765e:	18 95       	reti

00007660 <__vector_26>:

ISR(USART1_UDRE_vect)
{
    7660:	1f 92       	push	r1
    7662:	0f 92       	push	r0
    7664:	0f b6       	in	r0, 0x3f	; 63
    7666:	0f 92       	push	r0
    7668:	11 24       	eor	r1, r1
    766a:	0b b6       	in	r0, 0x3b	; 59
    766c:	0f 92       	push	r0
    766e:	8f 93       	push	r24
    7670:	9f 93       	push	r25
    7672:	ef 93       	push	r30
    7674:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    7676:	90 91 32 10 	lds	r25, 0x1032	; 0x801032 <tx_buffer_head>
    767a:	80 91 31 10 	lds	r24, 0x1031	; 0x801031 <tx_buffer_tail>
    767e:	98 13       	cpse	r25, r24
    7680:	10 c0       	rjmp	.+32     	; 0x76a2 <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    7682:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7686:	8f 7d       	andi	r24, 0xDF	; 223
    7688:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    768c:	ff 91       	pop	r31
    768e:	ef 91       	pop	r30
    7690:	9f 91       	pop	r25
    7692:	8f 91       	pop	r24
    7694:	0f 90       	pop	r0
    7696:	0b be       	out	0x3b, r0	; 59
    7698:	0f 90       	pop	r0
    769a:	0f be       	out	0x3f, r0	; 63
    769c:	0f 90       	pop	r0
    769e:	1f 90       	pop	r1
    76a0:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    76a2:	80 91 31 10 	lds	r24, 0x1031	; 0x801031 <tx_buffer_tail>
    76a6:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    76a8:	88 32       	cpi	r24, 0x28	; 40
    76aa:	08 f0       	brcs	.+2      	; 0x76ae <__vector_26+0x4e>
    76ac:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    76ae:	e8 2f       	mov	r30, r24
    76b0:	f0 e0       	ldi	r31, 0x00	; 0
    76b2:	ed 5c       	subi	r30, 0xCD	; 205
    76b4:	ff 4e       	sbci	r31, 0xEF	; 239
    76b6:	90 81       	ld	r25, Z
    76b8:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    76bc:	80 93 31 10 	sts	0x1031, r24	; 0x801031 <tx_buffer_tail>
	}
}
    76c0:	e5 cf       	rjmp	.-54     	; 0x768c <__vector_26+0x2c>

000076c2 <__vector_27>:

ISR(USART1_TX_vect)
{
    76c2:	1f 92       	push	r1
    76c4:	0f 92       	push	r0
    76c6:	0f b6       	in	r0, 0x3f	; 63
    76c8:	0f 92       	push	r0
    76ca:	11 24       	eor	r1, r1
    76cc:	0b b6       	in	r0, 0x3b	; 59
    76ce:	0f 92       	push	r0
    76d0:	8f 93       	push	r24
    76d2:	ef 93       	push	r30
    76d4:	ff 93       	push	r31
	transmitting = 0;
    76d6:	10 92 30 10 	sts	0x1030, r1	; 0x801030 <transmitting>
	if (tx_enable_pin < 255) {
    76da:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    76de:	8f 3f       	cpi	r24, 0xFF	; 255
    76e0:	21 f0       	breq	.+8      	; 0x76ea <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    76e2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    76e6:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    76e8:	1b db       	rcall	.-2506   	; 0x6d20 <_digitalWrite_LOW>
	}
}
    76ea:	ff 91       	pop	r31
    76ec:	ef 91       	pop	r30
    76ee:	8f 91       	pop	r24
    76f0:	0f 90       	pop	r0
    76f2:	0b be       	out	0x3b, r0	; 59
    76f4:	0f 90       	pop	r0
    76f6:	0f be       	out	0x3f, r0	; 63
    76f8:	0f 90       	pop	r0
    76fa:	1f 90       	pop	r1
    76fc:	18 95       	reti

000076fe <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    76fe:	e8 e2       	ldi	r30, 0x28	; 40
    7700:	f0 e1       	ldi	r31, 0x10	; 16
    7702:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    7704:	88 ee       	ldi	r24, 0xE8	; 232
    7706:	93 e0       	ldi	r25, 0x03	; 3
    7708:	a0 e0       	ldi	r26, 0x00	; 0
    770a:	b0 e0       	ldi	r27, 0x00	; 0
    770c:	83 83       	std	Z+3, r24	; 0x03
    770e:	94 83       	std	Z+4, r25	; 0x04
    7710:	a5 83       	std	Z+5, r26	; 0x05
    7712:	b6 83       	std	Z+6, r27	; 0x06
    7714:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    7716:	85 e0       	ldi	r24, 0x05	; 5
    7718:	99 e0       	ldi	r25, 0x09	; 9
    771a:	91 83       	std	Z+1, r25	; 0x01
    771c:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    771e:	08 95       	ret

00007720 <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    7720:	9a da       	rcall	.-2764   	; 0x6c56 <_init_Teensyduino_internal_>

	setup();
    7722:	0e 94 56 13 	call	0x26ac	; 0x26ac <setup>
    
	while (1) {
		loop();
    7726:	0e 94 0d 25 	call	0x4a1a	; 0x4a1a <loop>
    772a:	fd cf       	rjmp	.-6      	; 0x7726 <main+0x6>

0000772c <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    772c:	73 c8       	rjmp	.-3866   	; 0x6814 <malloc>

0000772e <__cxa_guard_acquire>:
    772e:	fc 01       	movw	r30, r24
    7730:	81 e0       	ldi	r24, 0x01	; 1
    7732:	90 e0       	ldi	r25, 0x00	; 0
    7734:	20 81       	ld	r18, Z
    7736:	22 23       	and	r18, r18
    7738:	11 f0       	breq	.+4      	; 0x773e <__cxa_guard_acquire+0x10>
    773a:	90 e0       	ldi	r25, 0x00	; 0
    773c:	80 e0       	ldi	r24, 0x00	; 0
    773e:	08 95       	ret

00007740 <__cxa_guard_release>:
    7740:	21 e0       	ldi	r18, 0x01	; 1
    7742:	fc 01       	movw	r30, r24
    7744:	20 83       	st	Z, r18
    7746:	08 95       	ret

00007748 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    7748:	08 95       	ret

0000774a <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    774a:	cf 92       	push	r12
    774c:	df 92       	push	r13
    774e:	ef 92       	push	r14
    7750:	ff 92       	push	r15
    7752:	0f 93       	push	r16
    7754:	1f 93       	push	r17
    7756:	cf 93       	push	r28
    7758:	df 93       	push	r29
    775a:	6c 01       	movw	r12, r24
    775c:	eb 01       	movw	r28, r22
    775e:	7b 01       	movw	r14, r22
    7760:	e4 0e       	add	r14, r20
    7762:	f5 1e       	adc	r15, r21
    7764:	10 e0       	ldi	r17, 0x00	; 0
    7766:	00 e0       	ldi	r16, 0x00	; 0
    7768:	ce 15       	cp	r28, r14
    776a:	df 05       	cpc	r29, r15
    776c:	61 f0       	breq	.+24     	; 0x7786 <Print::write(unsigned char const*, unsigned int)+0x3c>
    776e:	69 91       	ld	r22, Y+
    7770:	d6 01       	movw	r26, r12
    7772:	ed 91       	ld	r30, X+
    7774:	fc 91       	ld	r31, X
    7776:	01 90       	ld	r0, Z+
    7778:	f0 81       	ld	r31, Z
    777a:	e0 2d       	mov	r30, r0
    777c:	c6 01       	movw	r24, r12
    777e:	09 95       	icall
    7780:	08 0f       	add	r16, r24
    7782:	19 1f       	adc	r17, r25
    7784:	f1 cf       	rjmp	.-30     	; 0x7768 <Print::write(unsigned char const*, unsigned int)+0x1e>
    7786:	c8 01       	movw	r24, r16
    7788:	df 91       	pop	r29
    778a:	cf 91       	pop	r28
    778c:	1f 91       	pop	r17
    778e:	0f 91       	pop	r16
    7790:	ff 90       	pop	r15
    7792:	ef 90       	pop	r14
    7794:	df 90       	pop	r13
    7796:	cf 90       	pop	r12
    7798:	08 95       	ret

0000779a <Print::print(String const&)>:
    779a:	8f 92       	push	r8
    779c:	9f 92       	push	r9
    779e:	af 92       	push	r10
    77a0:	bf 92       	push	r11
    77a2:	cf 92       	push	r12
    77a4:	df 92       	push	r13
    77a6:	ef 92       	push	r14
    77a8:	ff 92       	push	r15
    77aa:	0f 93       	push	r16
    77ac:	1f 93       	push	r17
    77ae:	cf 93       	push	r28
    77b0:	df 93       	push	r29
    77b2:	cd b7       	in	r28, 0x3d	; 61
    77b4:	de b7       	in	r29, 0x3e	; 62
    77b6:	a1 97       	sbiw	r28, 0x21	; 33
    77b8:	0f b6       	in	r0, 0x3f	; 63
    77ba:	f8 94       	cli
    77bc:	de bf       	out	0x3e, r29	; 62
    77be:	0f be       	out	0x3f, r0	; 63
    77c0:	cd bf       	out	0x3d, r28	; 61
    77c2:	5c 01       	movw	r10, r24
    77c4:	4b 01       	movw	r8, r22
    77c6:	db 01       	movw	r26, r22
    77c8:	14 96       	adiw	r26, 0x04	; 4
    77ca:	0d 91       	ld	r16, X+
    77cc:	1c 91       	ld	r17, X
    77ce:	d1 2c       	mov	r13, r1
    77d0:	c1 2c       	mov	r12, r1
    77d2:	f1 2c       	mov	r15, r1
    77d4:	e1 2c       	mov	r14, r1
    77d6:	01 15       	cp	r16, r1
    77d8:	11 05       	cpc	r17, r1
    77da:	01 f1       	breq	.+64     	; 0x781c <Print::print(String const&)+0x82>
    77dc:	96 01       	movw	r18, r12
    77de:	41 e2       	ldi	r20, 0x21	; 33
    77e0:	50 e0       	ldi	r21, 0x00	; 0
    77e2:	be 01       	movw	r22, r28
    77e4:	6f 5f       	subi	r22, 0xFF	; 255
    77e6:	7f 4f       	sbci	r23, 0xFF	; 255
    77e8:	c4 01       	movw	r24, r8
    77ea:	5a d3       	rcall	.+1716   	; 0x7ea0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    77ec:	a8 01       	movw	r20, r16
    77ee:	01 32       	cpi	r16, 0x21	; 33
    77f0:	11 05       	cpc	r17, r1
    77f2:	10 f0       	brcs	.+4      	; 0x77f8 <Print::print(String const&)+0x5e>
    77f4:	40 e2       	ldi	r20, 0x20	; 32
    77f6:	50 e0       	ldi	r21, 0x00	; 0
    77f8:	c4 0e       	add	r12, r20
    77fa:	d5 1e       	adc	r13, r21
    77fc:	04 1b       	sub	r16, r20
    77fe:	15 0b       	sbc	r17, r21
    7800:	d5 01       	movw	r26, r10
    7802:	ed 91       	ld	r30, X+
    7804:	fc 91       	ld	r31, X
    7806:	02 80       	ldd	r0, Z+2	; 0x02
    7808:	f3 81       	ldd	r31, Z+3	; 0x03
    780a:	e0 2d       	mov	r30, r0
    780c:	be 01       	movw	r22, r28
    780e:	6f 5f       	subi	r22, 0xFF	; 255
    7810:	7f 4f       	sbci	r23, 0xFF	; 255
    7812:	c5 01       	movw	r24, r10
    7814:	09 95       	icall
    7816:	e8 0e       	add	r14, r24
    7818:	f9 1e       	adc	r15, r25
    781a:	dd cf       	rjmp	.-70     	; 0x77d6 <Print::print(String const&)+0x3c>
    781c:	c7 01       	movw	r24, r14
    781e:	a1 96       	adiw	r28, 0x21	; 33
    7820:	0f b6       	in	r0, 0x3f	; 63
    7822:	f8 94       	cli
    7824:	de bf       	out	0x3e, r29	; 62
    7826:	0f be       	out	0x3f, r0	; 63
    7828:	cd bf       	out	0x3d, r28	; 61
    782a:	df 91       	pop	r29
    782c:	cf 91       	pop	r28
    782e:	1f 91       	pop	r17
    7830:	0f 91       	pop	r16
    7832:	ff 90       	pop	r15
    7834:	ef 90       	pop	r14
    7836:	df 90       	pop	r13
    7838:	cf 90       	pop	r12
    783a:	bf 90       	pop	r11
    783c:	af 90       	pop	r10
    783e:	9f 90       	pop	r9
    7840:	8f 90       	pop	r8
    7842:	08 95       	ret

00007844 <Print::println()>:
    7844:	cf 93       	push	r28
    7846:	df 93       	push	r29
    7848:	00 d0       	rcall	.+0      	; 0x784a <Print::println()+0x6>
    784a:	cd b7       	in	r28, 0x3d	; 61
    784c:	de b7       	in	r29, 0x3e	; 62
    784e:	2d e0       	ldi	r18, 0x0D	; 13
    7850:	29 83       	std	Y+1, r18	; 0x01
    7852:	2a e0       	ldi	r18, 0x0A	; 10
    7854:	2a 83       	std	Y+2, r18	; 0x02
    7856:	dc 01       	movw	r26, r24
    7858:	ed 91       	ld	r30, X+
    785a:	fc 91       	ld	r31, X
    785c:	02 80       	ldd	r0, Z+2	; 0x02
    785e:	f3 81       	ldd	r31, Z+3	; 0x03
    7860:	e0 2d       	mov	r30, r0
    7862:	42 e0       	ldi	r20, 0x02	; 2
    7864:	50 e0       	ldi	r21, 0x00	; 0
    7866:	be 01       	movw	r22, r28
    7868:	6f 5f       	subi	r22, 0xFF	; 255
    786a:	7f 4f       	sbci	r23, 0xFF	; 255
    786c:	09 95       	icall
    786e:	0f 90       	pop	r0
    7870:	0f 90       	pop	r0
    7872:	df 91       	pop	r29
    7874:	cf 91       	pop	r28
    7876:	08 95       	ret

00007878 <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    7878:	cf 93       	push	r28
    787a:	df 93       	push	r29
    787c:	cd b7       	in	r28, 0x3d	; 61
    787e:	de b7       	in	r29, 0x3e	; 62
    7880:	2b 97       	sbiw	r28, 0x0b	; 11
    7882:	0f b6       	in	r0, 0x3f	; 63
    7884:	f8 94       	cli
    7886:	de bf       	out	0x3e, r29	; 62
    7888:	0f be       	out	0x3f, r0	; 63
    788a:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    788c:	fe 01       	movw	r30, r28
    788e:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    7890:	a3 e3       	ldi	r26, 0x33	; 51
    7892:	4a 9f       	mul	r20, r26
    7894:	44 27       	eor	r20, r20
    7896:	0a 0e       	add	r0, r26
    7898:	41 1d       	adc	r20, r1
    789a:	30 2d       	mov	r19, r0
    789c:	5a 9f       	mul	r21, r26
    789e:	55 27       	eor	r21, r21
    78a0:	40 0d       	add	r20, r0
    78a2:	51 1d       	adc	r21, r1
    78a4:	6a 9f       	mul	r22, r26
    78a6:	66 27       	eor	r22, r22
    78a8:	50 0d       	add	r21, r0
    78aa:	61 1d       	adc	r22, r1
    78ac:	7a 9f       	mul	r23, r26
    78ae:	77 27       	eor	r23, r23
    78b0:	60 0d       	add	r22, r0
    78b2:	71 1d       	adc	r23, r1
    78b4:	11 24       	eor	r1, r1
    78b6:	34 0f       	add	r19, r20
    78b8:	45 1f       	adc	r20, r21
    78ba:	56 1f       	adc	r21, r22
    78bc:	67 1f       	adc	r22, r23
    78be:	71 1d       	adc	r23, r1
    78c0:	35 0f       	add	r19, r21
    78c2:	46 1f       	adc	r20, r22
    78c4:	57 1f       	adc	r21, r23
    78c6:	61 1d       	adc	r22, r1
    78c8:	71 1d       	adc	r23, r1
    78ca:	37 0f       	add	r19, r23
    78cc:	41 1d       	adc	r20, r1
    78ce:	51 1d       	adc	r21, r1
    78d0:	61 1d       	adc	r22, r1
    78d2:	71 1d       	adc	r23, r1
    78d4:	76 95       	lsr	r23
    78d6:	67 95       	ror	r22
    78d8:	57 95       	ror	r21
    78da:	47 95       	ror	r20
    78dc:	37 95       	ror	r19
    78de:	aa e0       	ldi	r26, 0x0A	; 10
    78e0:	3a 9f       	mul	r19, r26
    78e2:	31 2d       	mov	r19, r1
    78e4:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    78e6:	df 01       	movw	r26, r30
    78e8:	30 5d       	subi	r19, 0xD0	; 208
    78ea:	3e 93       	st	-X, r19
	} while (n);
    78ec:	41 15       	cp	r20, r1
    78ee:	51 05       	cpc	r21, r1
    78f0:	61 05       	cpc	r22, r1
    78f2:	71 05       	cpc	r23, r1
    78f4:	09 f5       	brne	.+66     	; 0x7938 <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    78f6:	22 23       	and	r18, r18
    78f8:	41 f0       	breq	.+16     	; 0x790a <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    78fa:	bd 01       	movw	r22, r26
    78fc:	61 50       	subi	r22, 0x01	; 1
    78fe:	71 09       	sbc	r23, r1
    7900:	2d e2       	ldi	r18, 0x2D	; 45
    7902:	db 01       	movw	r26, r22
    7904:	2c 93       	st	X, r18
    7906:	df 01       	movw	r26, r30
    7908:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    790a:	ae 01       	movw	r20, r28
    790c:	4a 1b       	sub	r20, r26
    790e:	5b 0b       	sbc	r21, r27
    7910:	44 5f       	subi	r20, 0xF4	; 244
    7912:	5f 4f       	sbci	r21, 0xFF	; 255
    7914:	fc 01       	movw	r30, r24
    7916:	20 81       	ld	r18, Z
    7918:	31 81       	ldd	r19, Z+1	; 0x01
    791a:	f9 01       	movw	r30, r18
    791c:	22 81       	ldd	r18, Z+2	; 0x02
    791e:	33 81       	ldd	r19, Z+3	; 0x03
    7920:	bd 01       	movw	r22, r26
    7922:	f9 01       	movw	r30, r18
    7924:	09 95       	icall
}
    7926:	2b 96       	adiw	r28, 0x0b	; 11
    7928:	0f b6       	in	r0, 0x3f	; 63
    792a:	f8 94       	cli
    792c:	de bf       	out	0x3e, r29	; 62
    792e:	0f be       	out	0x3f, r0	; 63
    7930:	cd bf       	out	0x3d, r28	; 61
    7932:	df 91       	pop	r29
    7934:	cf 91       	pop	r28
    7936:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    7938:	fd 01       	movw	r30, r26
    793a:	aa cf       	rjmp	.-172    	; 0x7890 <Print::printNumberDec(unsigned long, unsigned char)+0x18>

0000793c <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    793c:	cf 93       	push	r28
    793e:	df 93       	push	r29
    7940:	1f 92       	push	r1
    7942:	cd b7       	in	r28, 0x3d	; 61
    7944:	de b7       	in	r29, 0x3e	; 62
    7946:	69 83       	std	Y+1, r22	; 0x01
    7948:	dc 01       	movw	r26, r24
    794a:	ed 91       	ld	r30, X+
    794c:	fc 91       	ld	r31, X
    794e:	02 80       	ldd	r0, Z+2	; 0x02
    7950:	f3 81       	ldd	r31, Z+3	; 0x03
    7952:	e0 2d       	mov	r30, r0
    7954:	41 e0       	ldi	r20, 0x01	; 1
    7956:	50 e0       	ldi	r21, 0x00	; 0
    7958:	be 01       	movw	r22, r28
    795a:	6f 5f       	subi	r22, 0xFF	; 255
    795c:	7f 4f       	sbci	r23, 0xFF	; 255
    795e:	09 95       	icall
    7960:	0f 90       	pop	r0
    7962:	df 91       	pop	r29
    7964:	cf 91       	pop	r28
    7966:	08 95       	ret

00007968 <usb_serial_class::available()>:
    7968:	fc 01       	movw	r30, r24
    796a:	8f b7       	in	r24, 0x3f	; 63
    796c:	f8 94       	cli
    796e:	90 91 ab 10 	lds	r25, 0x10AB	; 0x8010ab <usb_configuration>
    7972:	91 11       	cpse	r25, r1
    7974:	0c c0       	rjmp	.+24     	; 0x798e <usb_serial_class::available()+0x26>
    7976:	90 e0       	ldi	r25, 0x00	; 0
    7978:	8f bf       	out	0x3f, r24	; 63
    797a:	20 85       	ldd	r18, Z+8	; 0x08
    797c:	31 85       	ldd	r19, Z+9	; 0x09
    797e:	37 fd       	sbrc	r19, 7
    7980:	03 c0       	rjmp	.+6      	; 0x7988 <usb_serial_class::available()+0x20>
    7982:	9f 3f       	cpi	r25, 0xFF	; 255
    7984:	09 f0       	breq	.+2      	; 0x7988 <usb_serial_class::available()+0x20>
    7986:	9f 5f       	subi	r25, 0xFF	; 255
    7988:	89 2f       	mov	r24, r25
    798a:	90 e0       	ldi	r25, 0x00	; 0
    798c:	08 95       	ret
    798e:	93 e0       	ldi	r25, 0x03	; 3
    7990:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7994:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    7998:	91 11       	cpse	r25, r1
    799a:	ee cf       	rjmp	.-36     	; 0x7978 <usb_serial_class::available()+0x10>
    799c:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    79a0:	22 ff       	sbrs	r18, 2
    79a2:	e9 cf       	rjmp	.-46     	; 0x7976 <usb_serial_class::available()+0xe>
    79a4:	25 fd       	sbrc	r18, 5
    79a6:	e7 cf       	rjmp	.-50     	; 0x7976 <usb_serial_class::available()+0xe>
    79a8:	2b e6       	ldi	r18, 0x6B	; 107
    79aa:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    79ae:	e4 cf       	rjmp	.-56     	; 0x7978 <usb_serial_class::available()+0x10>

000079b0 <usb_serial_class::peek()>:
    79b0:	cf 93       	push	r28
    79b2:	df 93       	push	r29
    79b4:	ec 01       	movw	r28, r24
    79b6:	88 85       	ldd	r24, Y+8	; 0x08
    79b8:	99 85       	ldd	r25, Y+9	; 0x09
    79ba:	97 ff       	sbrs	r25, 7
    79bc:	09 c0       	rjmp	.+18     	; 0x79d0 <usb_serial_class::peek()+0x20>
    79be:	e8 81       	ld	r30, Y
    79c0:	f9 81       	ldd	r31, Y+1	; 0x01
    79c2:	02 84       	ldd	r0, Z+10	; 0x0a
    79c4:	f3 85       	ldd	r31, Z+11	; 0x0b
    79c6:	e0 2d       	mov	r30, r0
    79c8:	ce 01       	movw	r24, r28
    79ca:	09 95       	icall
    79cc:	99 87       	std	Y+9, r25	; 0x09
    79ce:	88 87       	std	Y+8, r24	; 0x08
    79d0:	88 85       	ldd	r24, Y+8	; 0x08
    79d2:	99 85       	ldd	r25, Y+9	; 0x09
    79d4:	df 91       	pop	r29
    79d6:	cf 91       	pop	r28
    79d8:	08 95       	ret

000079da <usb_serial_class::read()>:
    79da:	fc 01       	movw	r30, r24
    79dc:	20 85       	ldd	r18, Z+8	; 0x08
    79de:	31 85       	ldd	r19, Z+9	; 0x09
    79e0:	37 fd       	sbrc	r19, 7
    79e2:	07 c0       	rjmp	.+14     	; 0x79f2 <usb_serial_class::read()+0x18>
    79e4:	4f ef       	ldi	r20, 0xFF	; 255
    79e6:	5f ef       	ldi	r21, 0xFF	; 255
    79e8:	51 87       	std	Z+9, r21	; 0x09
    79ea:	40 87       	std	Z+8, r20	; 0x08
    79ec:	c9 01       	movw	r24, r18
    79ee:	99 27       	eor	r25, r25
    79f0:	08 95       	ret
    79f2:	9f b7       	in	r25, 0x3f	; 63
    79f4:	f8 94       	cli
    79f6:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <usb_configuration>
    79fa:	81 11       	cpse	r24, r1
    79fc:	04 c0       	rjmp	.+8      	; 0x7a06 <usb_serial_class::read()+0x2c>
    79fe:	9f bf       	out	0x3f, r25	; 63
    7a00:	8f ef       	ldi	r24, 0xFF	; 255
    7a02:	9f ef       	ldi	r25, 0xFF	; 255
    7a04:	08 95       	ret
    7a06:	83 e0       	ldi	r24, 0x03	; 3
    7a08:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7a0c:	2b e6       	ldi	r18, 0x6B	; 107
    7a0e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7a12:	85 fd       	sbrc	r24, 5
    7a14:	05 c0       	rjmp	.+10     	; 0x7a20 <usb_serial_class::read()+0x46>
    7a16:	82 ff       	sbrs	r24, 2
    7a18:	f2 cf       	rjmp	.-28     	; 0x79fe <usb_serial_class::read()+0x24>
    7a1a:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7a1e:	f7 cf       	rjmp	.-18     	; 0x7a0e <usb_serial_class::read()+0x34>
    7a20:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7a24:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7a28:	25 fd       	sbrc	r18, 5
    7a2a:	03 c0       	rjmp	.+6      	; 0x7a32 <usb_serial_class::read()+0x58>
    7a2c:	2b e6       	ldi	r18, 0x6B	; 107
    7a2e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7a32:	9f bf       	out	0x3f, r25	; 63
    7a34:	90 e0       	ldi	r25, 0x00	; 0
    7a36:	08 95       	ret

00007a38 <usb_serial_class::availableForWrite()>:
    7a38:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <usb_configuration>
    7a3c:	88 23       	and	r24, r24
    7a3e:	61 f0       	breq	.+24     	; 0x7a58 <usb_serial_class::availableForWrite()+0x20>
    7a40:	8f b7       	in	r24, 0x3f	; 63
    7a42:	f8 94       	cli
    7a44:	94 e0       	ldi	r25, 0x04	; 4
    7a46:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7a4a:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    7a4e:	8f bf       	out	0x3f, r24	; 63
    7a50:	80 e4       	ldi	r24, 0x40	; 64
    7a52:	89 1b       	sub	r24, r25
    7a54:	90 e0       	ldi	r25, 0x00	; 0
    7a56:	08 95       	ret
    7a58:	90 e0       	ldi	r25, 0x00	; 0
    7a5a:	80 e0       	ldi	r24, 0x00	; 0
    7a5c:	08 95       	ret

00007a5e <usb_serial_class::write(unsigned char const*, unsigned int)>:
    7a5e:	bf 92       	push	r11
    7a60:	cf 92       	push	r12
    7a62:	df 92       	push	r13
    7a64:	ef 92       	push	r14
    7a66:	ff 92       	push	r15
    7a68:	0f 93       	push	r16
    7a6a:	1f 93       	push	r17
    7a6c:	cf 93       	push	r28
    7a6e:	df 93       	push	r29
    7a70:	7c 01       	movw	r14, r24
    7a72:	80 91 ab 10 	lds	r24, 0x10AB	; 0x8010ab <usb_configuration>
    7a76:	81 11       	cpse	r24, r1
    7a78:	10 c0       	rjmp	.+32     	; 0x7a9a <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    7a7a:	81 e0       	ldi	r24, 0x01	; 1
    7a7c:	f7 01       	movw	r30, r14
    7a7e:	82 83       	std	Z+2, r24	; 0x02
    7a80:	10 e0       	ldi	r17, 0x00	; 0
    7a82:	00 e0       	ldi	r16, 0x00	; 0
    7a84:	c8 01       	movw	r24, r16
    7a86:	df 91       	pop	r29
    7a88:	cf 91       	pop	r28
    7a8a:	1f 91       	pop	r17
    7a8c:	0f 91       	pop	r16
    7a8e:	ff 90       	pop	r15
    7a90:	ef 90       	pop	r14
    7a92:	df 90       	pop	r13
    7a94:	cf 90       	pop	r12
    7a96:	bf 90       	pop	r11
    7a98:	08 95       	ret
    7a9a:	2f b7       	in	r18, 0x3f	; 63
    7a9c:	f8 94       	cli
    7a9e:	84 e0       	ldi	r24, 0x04	; 4
    7aa0:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7aa4:	80 91 25 10 	lds	r24, 0x1025	; 0x801025 <transmit_previous_timeout>
    7aa8:	88 23       	and	r24, r24
    7aaa:	41 f0       	breq	.+16     	; 0x7abc <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    7aac:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7ab0:	85 fd       	sbrc	r24, 5
    7ab2:	02 c0       	rjmp	.+4      	; 0x7ab8 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    7ab4:	2f bf       	out	0x3f, r18	; 63
    7ab6:	e1 cf       	rjmp	.-62     	; 0x7a7a <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    7ab8:	10 92 25 10 	sts	0x1025, r1	; 0x801025 <transmit_previous_timeout>
    7abc:	10 e0       	ldi	r17, 0x00	; 0
    7abe:	00 e0       	ldi	r16, 0x00	; 0
    7ac0:	84 e0       	ldi	r24, 0x04	; 4
    7ac2:	d8 2e       	mov	r13, r24
    7ac4:	90 e4       	ldi	r25, 0x40	; 64
    7ac6:	c9 2e       	mov	r12, r25
    7ac8:	a1 ef       	ldi	r26, 0xF1	; 241
    7aca:	b0 e0       	ldi	r27, 0x00	; 0
    7acc:	3a e3       	ldi	r19, 0x3A	; 58
    7ace:	b3 2e       	mov	r11, r19
    7ad0:	33 e0       	ldi	r19, 0x03	; 3
    7ad2:	41 15       	cp	r20, r1
    7ad4:	51 05       	cpc	r21, r1
    7ad6:	09 f4       	brne	.+2      	; 0x7ada <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    7ad8:	c0 c0       	rjmp	.+384    	; 0x7c5a <L548end+0x12>
    7ada:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    7ade:	81 5f       	subi	r24, 0xF1	; 241
    7ae0:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7ae4:	95 fd       	sbrc	r25, 5
    7ae6:	16 c0       	rjmp	.+44     	; 0x7b14 <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    7ae8:	2f bf       	out	0x3f, r18	; 63
    7aea:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    7aee:	89 13       	cpse	r24, r25
    7af0:	06 c0       	rjmp	.+12     	; 0x7afe <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    7af2:	81 e0       	ldi	r24, 0x01	; 1
    7af4:	80 93 25 10 	sts	0x1025, r24	; 0x801025 <transmit_previous_timeout>
    7af8:	f7 01       	movw	r30, r14
    7afa:	82 83       	std	Z+2, r24	; 0x02
    7afc:	c3 cf       	rjmp	.-122    	; 0x7a84 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    7afe:	90 91 ab 10 	lds	r25, 0x10AB	; 0x8010ab <usb_configuration>
    7b02:	91 11       	cpse	r25, r1
    7b04:	02 c0       	rjmp	.+4      	; 0x7b0a <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    7b06:	81 e0       	ldi	r24, 0x01	; 1
    7b08:	f7 cf       	rjmp	.-18     	; 0x7af8 <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    7b0a:	2f b7       	in	r18, 0x3f	; 63
    7b0c:	f8 94       	cli
    7b0e:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7b12:	e6 cf       	rjmp	.-52     	; 0x7ae0 <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    7b14:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    7b18:	9c 2d       	mov	r25, r12
    7b1a:	98 1b       	sub	r25, r24
    7b1c:	94 17       	cp	r25, r20
    7b1e:	15 06       	cpc	r1, r21
    7b20:	11 f0       	breq	.+4      	; 0x7b26 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    7b22:	08 f0       	brcs	.+2      	; 0x7b26 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    7b24:	94 2f       	mov	r25, r20
    7b26:	e9 2f       	mov	r30, r25
    7b28:	f0 e0       	ldi	r31, 0x00	; 0
    7b2a:	4e 1b       	sub	r20, r30
    7b2c:	5f 0b       	sbc	r21, r31
    7b2e:	0e 0f       	add	r16, r30
    7b30:	1f 1f       	adc	r17, r31
    7b32:	eb 01       	movw	r28, r22

00007b34 <L548begin>:
    7b34:	e0 e4       	ldi	r30, 0x40	; 64
    7b36:	e9 1b       	sub	r30, r25
    7b38:	e0 34       	cpi	r30, 0x40	; 64
    7b3a:	28 f4       	brcc	.+10     	; 0x7b46 <L548err>
    7b3c:	ee 0f       	add	r30, r30
    7b3e:	ff 27       	eor	r31, r31
    7b40:	ec 55       	subi	r30, 0x5C	; 92
    7b42:	f2 4c       	sbci	r31, 0xC2	; 194
    7b44:	09 94       	ijmp

00007b46 <L548err>:
    7b46:	80 c0       	rjmp	.+256    	; 0x7c48 <L548end>

00007b48 <L548table>:
    7b48:	99 91       	ld	r25, Y+
    7b4a:	9c 93       	st	X, r25
    7b4c:	99 91       	ld	r25, Y+
    7b4e:	9c 93       	st	X, r25
    7b50:	99 91       	ld	r25, Y+
    7b52:	9c 93       	st	X, r25
    7b54:	99 91       	ld	r25, Y+
    7b56:	9c 93       	st	X, r25
    7b58:	99 91       	ld	r25, Y+
    7b5a:	9c 93       	st	X, r25
    7b5c:	99 91       	ld	r25, Y+
    7b5e:	9c 93       	st	X, r25
    7b60:	99 91       	ld	r25, Y+
    7b62:	9c 93       	st	X, r25
    7b64:	99 91       	ld	r25, Y+
    7b66:	9c 93       	st	X, r25
    7b68:	99 91       	ld	r25, Y+
    7b6a:	9c 93       	st	X, r25
    7b6c:	99 91       	ld	r25, Y+
    7b6e:	9c 93       	st	X, r25
    7b70:	99 91       	ld	r25, Y+
    7b72:	9c 93       	st	X, r25
    7b74:	99 91       	ld	r25, Y+
    7b76:	9c 93       	st	X, r25
    7b78:	99 91       	ld	r25, Y+
    7b7a:	9c 93       	st	X, r25
    7b7c:	99 91       	ld	r25, Y+
    7b7e:	9c 93       	st	X, r25
    7b80:	99 91       	ld	r25, Y+
    7b82:	9c 93       	st	X, r25
    7b84:	99 91       	ld	r25, Y+
    7b86:	9c 93       	st	X, r25
    7b88:	99 91       	ld	r25, Y+
    7b8a:	9c 93       	st	X, r25
    7b8c:	99 91       	ld	r25, Y+
    7b8e:	9c 93       	st	X, r25
    7b90:	99 91       	ld	r25, Y+
    7b92:	9c 93       	st	X, r25
    7b94:	99 91       	ld	r25, Y+
    7b96:	9c 93       	st	X, r25
    7b98:	99 91       	ld	r25, Y+
    7b9a:	9c 93       	st	X, r25
    7b9c:	99 91       	ld	r25, Y+
    7b9e:	9c 93       	st	X, r25
    7ba0:	99 91       	ld	r25, Y+
    7ba2:	9c 93       	st	X, r25
    7ba4:	99 91       	ld	r25, Y+
    7ba6:	9c 93       	st	X, r25
    7ba8:	99 91       	ld	r25, Y+
    7baa:	9c 93       	st	X, r25
    7bac:	99 91       	ld	r25, Y+
    7bae:	9c 93       	st	X, r25
    7bb0:	99 91       	ld	r25, Y+
    7bb2:	9c 93       	st	X, r25
    7bb4:	99 91       	ld	r25, Y+
    7bb6:	9c 93       	st	X, r25
    7bb8:	99 91       	ld	r25, Y+
    7bba:	9c 93       	st	X, r25
    7bbc:	99 91       	ld	r25, Y+
    7bbe:	9c 93       	st	X, r25
    7bc0:	99 91       	ld	r25, Y+
    7bc2:	9c 93       	st	X, r25
    7bc4:	99 91       	ld	r25, Y+
    7bc6:	9c 93       	st	X, r25
    7bc8:	99 91       	ld	r25, Y+
    7bca:	9c 93       	st	X, r25
    7bcc:	99 91       	ld	r25, Y+
    7bce:	9c 93       	st	X, r25
    7bd0:	99 91       	ld	r25, Y+
    7bd2:	9c 93       	st	X, r25
    7bd4:	99 91       	ld	r25, Y+
    7bd6:	9c 93       	st	X, r25
    7bd8:	99 91       	ld	r25, Y+
    7bda:	9c 93       	st	X, r25
    7bdc:	99 91       	ld	r25, Y+
    7bde:	9c 93       	st	X, r25
    7be0:	99 91       	ld	r25, Y+
    7be2:	9c 93       	st	X, r25
    7be4:	99 91       	ld	r25, Y+
    7be6:	9c 93       	st	X, r25
    7be8:	99 91       	ld	r25, Y+
    7bea:	9c 93       	st	X, r25
    7bec:	99 91       	ld	r25, Y+
    7bee:	9c 93       	st	X, r25
    7bf0:	99 91       	ld	r25, Y+
    7bf2:	9c 93       	st	X, r25
    7bf4:	99 91       	ld	r25, Y+
    7bf6:	9c 93       	st	X, r25
    7bf8:	99 91       	ld	r25, Y+
    7bfa:	9c 93       	st	X, r25
    7bfc:	99 91       	ld	r25, Y+
    7bfe:	9c 93       	st	X, r25
    7c00:	99 91       	ld	r25, Y+
    7c02:	9c 93       	st	X, r25
    7c04:	99 91       	ld	r25, Y+
    7c06:	9c 93       	st	X, r25
    7c08:	99 91       	ld	r25, Y+
    7c0a:	9c 93       	st	X, r25
    7c0c:	99 91       	ld	r25, Y+
    7c0e:	9c 93       	st	X, r25
    7c10:	99 91       	ld	r25, Y+
    7c12:	9c 93       	st	X, r25
    7c14:	99 91       	ld	r25, Y+
    7c16:	9c 93       	st	X, r25
    7c18:	99 91       	ld	r25, Y+
    7c1a:	9c 93       	st	X, r25
    7c1c:	99 91       	ld	r25, Y+
    7c1e:	9c 93       	st	X, r25
    7c20:	99 91       	ld	r25, Y+
    7c22:	9c 93       	st	X, r25
    7c24:	99 91       	ld	r25, Y+
    7c26:	9c 93       	st	X, r25
    7c28:	99 91       	ld	r25, Y+
    7c2a:	9c 93       	st	X, r25
    7c2c:	99 91       	ld	r25, Y+
    7c2e:	9c 93       	st	X, r25
    7c30:	99 91       	ld	r25, Y+
    7c32:	9c 93       	st	X, r25
    7c34:	99 91       	ld	r25, Y+
    7c36:	9c 93       	st	X, r25
    7c38:	99 91       	ld	r25, Y+
    7c3a:	9c 93       	st	X, r25
    7c3c:	99 91       	ld	r25, Y+
    7c3e:	9c 93       	st	X, r25
    7c40:	99 91       	ld	r25, Y+
    7c42:	9c 93       	st	X, r25
    7c44:	99 91       	ld	r25, Y+
    7c46:	9c 93       	st	X, r25

00007c48 <L548end>:
    7c48:	be 01       	movw	r22, r28
    7c4a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c4e:	85 ff       	sbrs	r24, 5
    7c50:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c54:	30 93 27 10 	sts	0x1027, r19	; 0x801027 <transmit_flush_timer>
    7c58:	3c cf       	rjmp	.-392    	; 0x7ad2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    7c5a:	2f bf       	out	0x3f, r18	; 63
    7c5c:	13 cf       	rjmp	.-474    	; 0x7a84 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00007c5e <usb_serial_class::send_now()>:
    7c5e:	8f b7       	in	r24, 0x3f	; 63
    7c60:	f8 94       	cli
    7c62:	90 91 ab 10 	lds	r25, 0x10AB	; 0x8010ab <usb_configuration>
    7c66:	99 23       	and	r25, r25
    7c68:	61 f0       	breq	.+24     	; 0x7c82 <usb_serial_class::send_now()+0x24>
    7c6a:	90 91 27 10 	lds	r25, 0x1027	; 0x801027 <transmit_flush_timer>
    7c6e:	99 23       	and	r25, r25
    7c70:	41 f0       	breq	.+16     	; 0x7c82 <usb_serial_class::send_now()+0x24>
    7c72:	94 e0       	ldi	r25, 0x04	; 4
    7c74:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    7c78:	9a e3       	ldi	r25, 0x3A	; 58
    7c7a:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7c7e:	10 92 27 10 	sts	0x1027, r1	; 0x801027 <transmit_flush_timer>
    7c82:	8f bf       	out	0x3f, r24	; 63
    7c84:	08 95       	ret

00007c86 <usb_serial_class::flush()>:
    7c86:	eb cf       	rjmp	.-42     	; 0x7c5e <usb_serial_class::send_now()>

00007c88 <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    7c88:	ed e9       	ldi	r30, 0x9D	; 157
    7c8a:	f0 e1       	ldi	r31, 0x10	; 16
    7c8c:	11 86       	std	Z+9, r1	; 0x09
    7c8e:	10 86       	std	Z+8, r1	; 0x08
    7c90:	12 82       	std	Z+2, r1	; 0x02
    7c92:	88 ee       	ldi	r24, 0xE8	; 232
    7c94:	93 e0       	ldi	r25, 0x03	; 3
    7c96:	a0 e0       	ldi	r26, 0x00	; 0
    7c98:	b0 e0       	ldi	r27, 0x00	; 0
    7c9a:	83 83       	std	Z+3, r24	; 0x03
    7c9c:	94 83       	std	Z+4, r25	; 0x04
    7c9e:	a5 83       	std	Z+5, r26	; 0x05
    7ca0:	b6 83       	std	Z+6, r27	; 0x06
    7ca2:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    7ca4:	87 e1       	ldi	r24, 0x17	; 23
    7ca6:	99 e0       	ldi	r25, 0x09	; 9
    7ca8:	91 83       	std	Z+1, r25	; 0x01
    7caa:	80 83       	st	Z, r24
    7cac:	08 95       	ret

00007cae <randomSeed(unsigned int)>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    7cae:	00 97       	sbiw	r24, 0x00	; 0
    7cb0:	21 f0       	breq	.+8      	; 0x7cba <randomSeed(unsigned int)+0xc>
    srandom(seed);
    7cb2:	bc 01       	movw	r22, r24
    7cb4:	90 e0       	ldi	r25, 0x00	; 0
    7cb6:	80 e0       	ldi	r24, 0x00	; 0
    7cb8:	d3 c3       	rjmp	.+1958   	; 0x8460 <srandom>
  }
}
    7cba:	08 95       	ret

00007cbc <random(long)>:

long random(long howbig)
{
    7cbc:	cf 92       	push	r12
    7cbe:	df 92       	push	r13
    7cc0:	ef 92       	push	r14
    7cc2:	ff 92       	push	r15
    7cc4:	6b 01       	movw	r12, r22
    7cc6:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    7cc8:	c1 14       	cp	r12, r1
    7cca:	d1 04       	cpc	r13, r1
    7ccc:	e1 04       	cpc	r14, r1
    7cce:	f1 04       	cpc	r15, r1
    7cd0:	31 f0       	breq	.+12     	; 0x7cde <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    7cd2:	7a d3       	rcall	.+1780   	; 0x83c8 <random>
    7cd4:	a7 01       	movw	r20, r14
    7cd6:	96 01       	movw	r18, r12
    7cd8:	ea d2       	rcall	.+1492   	; 0x82ae <__divmodsi4>
    7cda:	6b 01       	movw	r12, r22
    7cdc:	7c 01       	movw	r14, r24
}
    7cde:	c7 01       	movw	r24, r14
    7ce0:	b6 01       	movw	r22, r12
    7ce2:	ff 90       	pop	r15
    7ce4:	ef 90       	pop	r14
    7ce6:	df 90       	pop	r13
    7ce8:	cf 90       	pop	r12
    7cea:	08 95       	ret

00007cec <random(long, long)>:

long random(long howsmall, long howbig)
{
    7cec:	cf 92       	push	r12
    7cee:	df 92       	push	r13
    7cf0:	ef 92       	push	r14
    7cf2:	ff 92       	push	r15
    7cf4:	6b 01       	movw	r12, r22
    7cf6:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    7cf8:	c2 16       	cp	r12, r18
    7cfa:	d3 06       	cpc	r13, r19
    7cfc:	e4 06       	cpc	r14, r20
    7cfe:	f5 06       	cpc	r15, r21
    7d00:	5c f4       	brge	.+22     	; 0x7d18 <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    7d02:	ca 01       	movw	r24, r20
    7d04:	b9 01       	movw	r22, r18
    7d06:	6c 19       	sub	r22, r12
    7d08:	7d 09       	sbc	r23, r13
    7d0a:	8e 09       	sbc	r24, r14
    7d0c:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    7d0e:	d6 df       	rcall	.-84     	; 0x7cbc <random(long)>
    7d10:	c6 0e       	add	r12, r22
    7d12:	d7 1e       	adc	r13, r23
    7d14:	e8 1e       	adc	r14, r24
    7d16:	f9 1e       	adc	r15, r25
}
    7d18:	c7 01       	movw	r24, r14
    7d1a:	b6 01       	movw	r22, r12
    7d1c:	ff 90       	pop	r15
    7d1e:	ef 90       	pop	r14
    7d20:	df 90       	pop	r13
    7d22:	cf 90       	pop	r12
    7d24:	08 95       	ret

00007d26 <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    7d26:	4f 92       	push	r4
    7d28:	5f 92       	push	r5
    7d2a:	6f 92       	push	r6
    7d2c:	7f 92       	push	r7
    7d2e:	af 92       	push	r10
    7d30:	bf 92       	push	r11
    7d32:	cf 92       	push	r12
    7d34:	df 92       	push	r13
    7d36:	ef 92       	push	r14
    7d38:	ff 92       	push	r15
    7d3a:	0f 93       	push	r16
    7d3c:	1f 93       	push	r17
    7d3e:	cf 93       	push	r28
    7d40:	df 93       	push	r29
    7d42:	cd b7       	in	r28, 0x3d	; 61
    7d44:	de b7       	in	r29, 0x3e	; 62
    7d46:	29 01       	movw	r4, r18
    7d48:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    7d4a:	9b 01       	movw	r18, r22
    7d4c:	ac 01       	movw	r20, r24
    7d4e:	24 19       	sub	r18, r4
    7d50:	35 09       	sbc	r19, r5
    7d52:	46 09       	sbc	r20, r6
    7d54:	57 09       	sbc	r21, r7
    7d56:	89 89       	ldd	r24, Y+17	; 0x11
    7d58:	9a 89       	ldd	r25, Y+18	; 0x12
    7d5a:	ab 89       	ldd	r26, Y+19	; 0x13
    7d5c:	bc 89       	ldd	r27, Y+20	; 0x14
    7d5e:	bc 01       	movw	r22, r24
    7d60:	cd 01       	movw	r24, r26
    7d62:	6a 19       	sub	r22, r10
    7d64:	7b 09       	sbc	r23, r11
    7d66:	8c 09       	sbc	r24, r12
    7d68:	9d 09       	sbc	r25, r13
    7d6a:	49 d2       	rcall	.+1170   	; 0x81fe <__mulsi3>
    7d6c:	a8 01       	movw	r20, r16
    7d6e:	97 01       	movw	r18, r14
    7d70:	24 19       	sub	r18, r4
    7d72:	35 09       	sbc	r19, r5
    7d74:	46 09       	sbc	r20, r6
    7d76:	57 09       	sbc	r21, r7
    7d78:	9a d2       	rcall	.+1332   	; 0x82ae <__divmodsi4>
    7d7a:	ca 01       	movw	r24, r20
    7d7c:	b9 01       	movw	r22, r18
    7d7e:	6a 0d       	add	r22, r10
    7d80:	7b 1d       	adc	r23, r11
    7d82:	8c 1d       	adc	r24, r12
    7d84:	9d 1d       	adc	r25, r13
}
    7d86:	df 91       	pop	r29
    7d88:	cf 91       	pop	r28
    7d8a:	1f 91       	pop	r17
    7d8c:	0f 91       	pop	r16
    7d8e:	ff 90       	pop	r15
    7d90:	ef 90       	pop	r14
    7d92:	df 90       	pop	r13
    7d94:	cf 90       	pop	r12
    7d96:	bf 90       	pop	r11
    7d98:	af 90       	pop	r10
    7d9a:	7f 90       	pop	r7
    7d9c:	6f 90       	pop	r6
    7d9e:	5f 90       	pop	r5
    7da0:	4f 90       	pop	r4
    7da2:	08 95       	ret

00007da4 <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    7da4:	fc 01       	movw	r30, r24
    7da6:	80 81       	ld	r24, Z
    7da8:	91 81       	ldd	r25, Z+1	; 0x01
    7daa:	0c 94 aa 34 	jmp	0x6954	; 0x6954 <free>

00007dae <String::changeBuffer(unsigned int)>:
    7dae:	0f 93       	push	r16
    7db0:	1f 93       	push	r17
    7db2:	cf 93       	push	r28
    7db4:	df 93       	push	r29
    7db6:	ec 01       	movw	r28, r24
    7db8:	8b 01       	movw	r16, r22
    7dba:	6f 5f       	subi	r22, 0xFF	; 255
    7dbc:	7f 4f       	sbci	r23, 0xFF	; 255
    7dbe:	88 81       	ld	r24, Y
    7dc0:	99 81       	ldd	r25, Y+1	; 0x01
    7dc2:	0e 94 33 35 	call	0x6a66	; 0x6a66 <realloc>
    7dc6:	00 97       	sbiw	r24, 0x00	; 0
    7dc8:	51 f0       	breq	.+20     	; 0x7dde <String::changeBuffer(unsigned int)+0x30>
    7dca:	99 83       	std	Y+1, r25	; 0x01
    7dcc:	88 83       	st	Y, r24
    7dce:	1b 83       	std	Y+3, r17	; 0x03
    7dd0:	0a 83       	std	Y+2, r16	; 0x02
    7dd2:	81 e0       	ldi	r24, 0x01	; 1
    7dd4:	df 91       	pop	r29
    7dd6:	cf 91       	pop	r28
    7dd8:	1f 91       	pop	r17
    7dda:	0f 91       	pop	r16
    7ddc:	08 95       	ret
    7dde:	80 e0       	ldi	r24, 0x00	; 0
    7de0:	f9 cf       	rjmp	.-14     	; 0x7dd4 <String::changeBuffer(unsigned int)+0x26>

00007de2 <String::reserve(unsigned int)>:
    7de2:	cf 93       	push	r28
    7de4:	df 93       	push	r29
    7de6:	fc 01       	movw	r30, r24
    7de8:	22 81       	ldd	r18, Z+2	; 0x02
    7dea:	33 81       	ldd	r19, Z+3	; 0x03
    7dec:	26 17       	cp	r18, r22
    7dee:	37 07       	cpc	r19, r23
    7df0:	20 f0       	brcs	.+8      	; 0x7dfa <String::reserve(unsigned int)+0x18>
    7df2:	81 e0       	ldi	r24, 0x01	; 1
    7df4:	df 91       	pop	r29
    7df6:	cf 91       	pop	r28
    7df8:	08 95       	ret
    7dfa:	ec 01       	movw	r28, r24
    7dfc:	d8 df       	rcall	.-80     	; 0x7dae <String::changeBuffer(unsigned int)>
    7dfe:	88 23       	and	r24, r24
    7e00:	c9 f3       	breq	.-14     	; 0x7df4 <String::reserve(unsigned int)+0x12>
    7e02:	8c 81       	ldd	r24, Y+4	; 0x04
    7e04:	9d 81       	ldd	r25, Y+5	; 0x05
    7e06:	89 2b       	or	r24, r25
    7e08:	a1 f7       	brne	.-24     	; 0x7df2 <String::reserve(unsigned int)+0x10>
    7e0a:	e8 81       	ld	r30, Y
    7e0c:	f9 81       	ldd	r31, Y+1	; 0x01
    7e0e:	10 82       	st	Z, r1
    7e10:	f0 cf       	rjmp	.-32     	; 0x7df2 <String::reserve(unsigned int)+0x10>

00007e12 <String::copy(char const*, unsigned int)>:
    7e12:	ef 92       	push	r14
    7e14:	ff 92       	push	r15
    7e16:	0f 93       	push	r16
    7e18:	1f 93       	push	r17
    7e1a:	cf 93       	push	r28
    7e1c:	df 93       	push	r29
    7e1e:	ec 01       	movw	r28, r24
    7e20:	7b 01       	movw	r14, r22
    7e22:	8a 01       	movw	r16, r20
    7e24:	41 15       	cp	r20, r1
    7e26:	51 05       	cpc	r21, r1
    7e28:	79 f4       	brne	.+30     	; 0x7e48 <String::copy(char const*, unsigned int)+0x36>
    7e2a:	e8 81       	ld	r30, Y
    7e2c:	f9 81       	ldd	r31, Y+1	; 0x01
    7e2e:	30 97       	sbiw	r30, 0x00	; 0
    7e30:	09 f0       	breq	.+2      	; 0x7e34 <String::copy(char const*, unsigned int)+0x22>
    7e32:	10 82       	st	Z, r1
    7e34:	1d 82       	std	Y+5, r1	; 0x05
    7e36:	1c 82       	std	Y+4, r1	; 0x04
    7e38:	ce 01       	movw	r24, r28
    7e3a:	df 91       	pop	r29
    7e3c:	cf 91       	pop	r28
    7e3e:	1f 91       	pop	r17
    7e40:	0f 91       	pop	r16
    7e42:	ff 90       	pop	r15
    7e44:	ef 90       	pop	r14
    7e46:	08 95       	ret
    7e48:	ba 01       	movw	r22, r20
    7e4a:	cb df       	rcall	.-106    	; 0x7de2 <String::reserve(unsigned int)>
    7e4c:	28 81       	ld	r18, Y
    7e4e:	39 81       	ldd	r19, Y+1	; 0x01
    7e50:	81 11       	cpse	r24, r1
    7e52:	0b c0       	rjmp	.+22     	; 0x7e6a <String::copy(char const*, unsigned int)+0x58>
    7e54:	21 15       	cp	r18, r1
    7e56:	31 05       	cpc	r19, r1
    7e58:	29 f0       	breq	.+10     	; 0x7e64 <String::copy(char const*, unsigned int)+0x52>
    7e5a:	c9 01       	movw	r24, r18
    7e5c:	0e 94 aa 34 	call	0x6954	; 0x6954 <free>
    7e60:	19 82       	std	Y+1, r1	; 0x01
    7e62:	18 82       	st	Y, r1
    7e64:	1b 82       	std	Y+3, r1	; 0x03
    7e66:	1a 82       	std	Y+2, r1	; 0x02
    7e68:	e5 cf       	rjmp	.-54     	; 0x7e34 <String::copy(char const*, unsigned int)+0x22>
    7e6a:	1d 83       	std	Y+5, r17	; 0x05
    7e6c:	0c 83       	std	Y+4, r16	; 0x04
    7e6e:	b7 01       	movw	r22, r14
    7e70:	c9 01       	movw	r24, r18
    7e72:	08 d3       	rcall	.+1552   	; 0x8484 <strcpy>
    7e74:	e1 cf       	rjmp	.-62     	; 0x7e38 <String::copy(char const*, unsigned int)+0x26>

00007e76 <String::String(char const*)>:
    7e76:	fc 01       	movw	r30, r24
    7e78:	11 82       	std	Z+1, r1	; 0x01
    7e7a:	10 82       	st	Z, r1
    7e7c:	13 82       	std	Z+3, r1	; 0x03
    7e7e:	12 82       	std	Z+2, r1	; 0x02
    7e80:	15 82       	std	Z+5, r1	; 0x05
    7e82:	14 82       	std	Z+4, r1	; 0x04
    7e84:	16 82       	std	Z+6, r1	; 0x06
    7e86:	61 15       	cp	r22, r1
    7e88:	71 05       	cpc	r23, r1
    7e8a:	49 f0       	breq	.+18     	; 0x7e9e <String::String(char const*)+0x28>
    7e8c:	fb 01       	movw	r30, r22
    7e8e:	01 90       	ld	r0, Z+
    7e90:	00 20       	and	r0, r0
    7e92:	e9 f7       	brne	.-6      	; 0x7e8e <String::String(char const*)+0x18>
    7e94:	31 97       	sbiw	r30, 0x01	; 1
    7e96:	af 01       	movw	r20, r30
    7e98:	46 1b       	sub	r20, r22
    7e9a:	57 0b       	sbc	r21, r23
    7e9c:	ba cf       	rjmp	.-140    	; 0x7e12 <String::copy(char const*, unsigned int)>
    7e9e:	08 95       	ret

00007ea0 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    7ea0:	0f 93       	push	r16
    7ea2:	1f 93       	push	r17
    7ea4:	cf 93       	push	r28
    7ea6:	df 93       	push	r29
	if (!bufsize || !buf) return;
    7ea8:	41 15       	cp	r20, r1
    7eaa:	51 05       	cpc	r21, r1
    7eac:	59 f0       	breq	.+22     	; 0x7ec4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    7eae:	61 15       	cp	r22, r1
    7eb0:	71 05       	cpc	r23, r1
    7eb2:	41 f0       	breq	.+16     	; 0x7ec4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    7eb4:	fc 01       	movw	r30, r24
    7eb6:	04 81       	ldd	r16, Z+4	; 0x04
    7eb8:	15 81       	ldd	r17, Z+5	; 0x05
    7eba:	20 17       	cp	r18, r16
    7ebc:	31 07       	cpc	r19, r17
    7ebe:	38 f0       	brcs	.+14     	; 0x7ece <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    7ec0:	fb 01       	movw	r30, r22
    7ec2:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    7ec4:	df 91       	pop	r29
    7ec6:	cf 91       	pop	r28
    7ec8:	1f 91       	pop	r17
    7eca:	0f 91       	pop	r16
    7ecc:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    7ece:	41 50       	subi	r20, 0x01	; 1
    7ed0:	51 09       	sbc	r21, r1
    7ed2:	02 1b       	sub	r16, r18
    7ed4:	13 0b       	sbc	r17, r19
    7ed6:	40 17       	cp	r20, r16
    7ed8:	51 07       	cpc	r21, r17
    7eda:	08 f4       	brcc	.+2      	; 0x7ede <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    7edc:	8a 01       	movw	r16, r20
    7ede:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    7ee0:	fc 01       	movw	r30, r24
    7ee2:	60 81       	ld	r22, Z
    7ee4:	71 81       	ldd	r23, Z+1	; 0x01
    7ee6:	62 0f       	add	r22, r18
    7ee8:	73 1f       	adc	r23, r19
    7eea:	a8 01       	movw	r20, r16
    7eec:	ce 01       	movw	r24, r28
    7eee:	d1 d2       	rcall	.+1442   	; 0x8492 <strncpy>
	buf[n] = 0;
    7ef0:	c0 0f       	add	r28, r16
    7ef2:	d1 1f       	adc	r29, r17
    7ef4:	18 82       	st	Y, r1
    7ef6:	e6 cf       	rjmp	.-52     	; 0x7ec4 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

00007ef8 <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    7ef8:	08 95       	ret

00007efa <__subsf3>:
    7efa:	50 58       	subi	r21, 0x80	; 128

00007efc <__addsf3>:
    7efc:	bb 27       	eor	r27, r27
    7efe:	aa 27       	eor	r26, r26
    7f00:	0e d0       	rcall	.+28     	; 0x7f1e <__addsf3x>
    7f02:	e0 c0       	rjmp	.+448    	; 0x80c4 <__fp_round>
    7f04:	d1 d0       	rcall	.+418    	; 0x80a8 <__fp_pscA>
    7f06:	30 f0       	brcs	.+12     	; 0x7f14 <__addsf3+0x18>
    7f08:	d6 d0       	rcall	.+428    	; 0x80b6 <__fp_pscB>
    7f0a:	20 f0       	brcs	.+8      	; 0x7f14 <__addsf3+0x18>
    7f0c:	31 f4       	brne	.+12     	; 0x7f1a <__addsf3+0x1e>
    7f0e:	9f 3f       	cpi	r25, 0xFF	; 255
    7f10:	11 f4       	brne	.+4      	; 0x7f16 <__addsf3+0x1a>
    7f12:	1e f4       	brtc	.+6      	; 0x7f1a <__addsf3+0x1e>
    7f14:	c6 c0       	rjmp	.+396    	; 0x80a2 <__fp_nan>
    7f16:	0e f4       	brtc	.+2      	; 0x7f1a <__addsf3+0x1e>
    7f18:	e0 95       	com	r30
    7f1a:	e7 fb       	bst	r30, 7
    7f1c:	bc c0       	rjmp	.+376    	; 0x8096 <__fp_inf>

00007f1e <__addsf3x>:
    7f1e:	e9 2f       	mov	r30, r25
    7f20:	e2 d0       	rcall	.+452    	; 0x80e6 <__fp_split3>
    7f22:	80 f3       	brcs	.-32     	; 0x7f04 <__addsf3+0x8>
    7f24:	ba 17       	cp	r27, r26
    7f26:	62 07       	cpc	r22, r18
    7f28:	73 07       	cpc	r23, r19
    7f2a:	84 07       	cpc	r24, r20
    7f2c:	95 07       	cpc	r25, r21
    7f2e:	18 f0       	brcs	.+6      	; 0x7f36 <__addsf3x+0x18>
    7f30:	71 f4       	brne	.+28     	; 0x7f4e <__addsf3x+0x30>
    7f32:	9e f5       	brtc	.+102    	; 0x7f9a <__addsf3x+0x7c>
    7f34:	fa c0       	rjmp	.+500    	; 0x812a <__fp_zero>
    7f36:	0e f4       	brtc	.+2      	; 0x7f3a <__addsf3x+0x1c>
    7f38:	e0 95       	com	r30
    7f3a:	0b 2e       	mov	r0, r27
    7f3c:	ba 2f       	mov	r27, r26
    7f3e:	a0 2d       	mov	r26, r0
    7f40:	0b 01       	movw	r0, r22
    7f42:	b9 01       	movw	r22, r18
    7f44:	90 01       	movw	r18, r0
    7f46:	0c 01       	movw	r0, r24
    7f48:	ca 01       	movw	r24, r20
    7f4a:	a0 01       	movw	r20, r0
    7f4c:	11 24       	eor	r1, r1
    7f4e:	ff 27       	eor	r31, r31
    7f50:	59 1b       	sub	r21, r25
    7f52:	99 f0       	breq	.+38     	; 0x7f7a <__addsf3x+0x5c>
    7f54:	59 3f       	cpi	r21, 0xF9	; 249
    7f56:	50 f4       	brcc	.+20     	; 0x7f6c <__addsf3x+0x4e>
    7f58:	50 3e       	cpi	r21, 0xE0	; 224
    7f5a:	68 f1       	brcs	.+90     	; 0x7fb6 <__addsf3x+0x98>
    7f5c:	1a 16       	cp	r1, r26
    7f5e:	f0 40       	sbci	r31, 0x00	; 0
    7f60:	a2 2f       	mov	r26, r18
    7f62:	23 2f       	mov	r18, r19
    7f64:	34 2f       	mov	r19, r20
    7f66:	44 27       	eor	r20, r20
    7f68:	58 5f       	subi	r21, 0xF8	; 248
    7f6a:	f3 cf       	rjmp	.-26     	; 0x7f52 <__addsf3x+0x34>
    7f6c:	46 95       	lsr	r20
    7f6e:	37 95       	ror	r19
    7f70:	27 95       	ror	r18
    7f72:	a7 95       	ror	r26
    7f74:	f0 40       	sbci	r31, 0x00	; 0
    7f76:	53 95       	inc	r21
    7f78:	c9 f7       	brne	.-14     	; 0x7f6c <__addsf3x+0x4e>
    7f7a:	7e f4       	brtc	.+30     	; 0x7f9a <__addsf3x+0x7c>
    7f7c:	1f 16       	cp	r1, r31
    7f7e:	ba 0b       	sbc	r27, r26
    7f80:	62 0b       	sbc	r22, r18
    7f82:	73 0b       	sbc	r23, r19
    7f84:	84 0b       	sbc	r24, r20
    7f86:	ba f0       	brmi	.+46     	; 0x7fb6 <__addsf3x+0x98>
    7f88:	91 50       	subi	r25, 0x01	; 1
    7f8a:	a1 f0       	breq	.+40     	; 0x7fb4 <__addsf3x+0x96>
    7f8c:	ff 0f       	add	r31, r31
    7f8e:	bb 1f       	adc	r27, r27
    7f90:	66 1f       	adc	r22, r22
    7f92:	77 1f       	adc	r23, r23
    7f94:	88 1f       	adc	r24, r24
    7f96:	c2 f7       	brpl	.-16     	; 0x7f88 <__addsf3x+0x6a>
    7f98:	0e c0       	rjmp	.+28     	; 0x7fb6 <__addsf3x+0x98>
    7f9a:	ba 0f       	add	r27, r26
    7f9c:	62 1f       	adc	r22, r18
    7f9e:	73 1f       	adc	r23, r19
    7fa0:	84 1f       	adc	r24, r20
    7fa2:	48 f4       	brcc	.+18     	; 0x7fb6 <__addsf3x+0x98>
    7fa4:	87 95       	ror	r24
    7fa6:	77 95       	ror	r23
    7fa8:	67 95       	ror	r22
    7faa:	b7 95       	ror	r27
    7fac:	f7 95       	ror	r31
    7fae:	9e 3f       	cpi	r25, 0xFE	; 254
    7fb0:	08 f0       	brcs	.+2      	; 0x7fb4 <__addsf3x+0x96>
    7fb2:	b3 cf       	rjmp	.-154    	; 0x7f1a <__addsf3+0x1e>
    7fb4:	93 95       	inc	r25
    7fb6:	88 0f       	add	r24, r24
    7fb8:	08 f0       	brcs	.+2      	; 0x7fbc <__addsf3x+0x9e>
    7fba:	99 27       	eor	r25, r25
    7fbc:	ee 0f       	add	r30, r30
    7fbe:	97 95       	ror	r25
    7fc0:	87 95       	ror	r24
    7fc2:	08 95       	ret

00007fc4 <__fixunssfsi>:
    7fc4:	98 d0       	rcall	.+304    	; 0x80f6 <__fp_splitA>
    7fc6:	88 f0       	brcs	.+34     	; 0x7fea <__fixunssfsi+0x26>
    7fc8:	9f 57       	subi	r25, 0x7F	; 127
    7fca:	90 f0       	brcs	.+36     	; 0x7ff0 <__fixunssfsi+0x2c>
    7fcc:	b9 2f       	mov	r27, r25
    7fce:	99 27       	eor	r25, r25
    7fd0:	b7 51       	subi	r27, 0x17	; 23
    7fd2:	a0 f0       	brcs	.+40     	; 0x7ffc <__fixunssfsi+0x38>
    7fd4:	d1 f0       	breq	.+52     	; 0x800a <__fixunssfsi+0x46>
    7fd6:	66 0f       	add	r22, r22
    7fd8:	77 1f       	adc	r23, r23
    7fda:	88 1f       	adc	r24, r24
    7fdc:	99 1f       	adc	r25, r25
    7fde:	1a f0       	brmi	.+6      	; 0x7fe6 <__fixunssfsi+0x22>
    7fe0:	ba 95       	dec	r27
    7fe2:	c9 f7       	brne	.-14     	; 0x7fd6 <__fixunssfsi+0x12>
    7fe4:	12 c0       	rjmp	.+36     	; 0x800a <__fixunssfsi+0x46>
    7fe6:	b1 30       	cpi	r27, 0x01	; 1
    7fe8:	81 f0       	breq	.+32     	; 0x800a <__fixunssfsi+0x46>
    7fea:	9f d0       	rcall	.+318    	; 0x812a <__fp_zero>
    7fec:	b1 e0       	ldi	r27, 0x01	; 1
    7fee:	08 95       	ret
    7ff0:	9c c0       	rjmp	.+312    	; 0x812a <__fp_zero>
    7ff2:	67 2f       	mov	r22, r23
    7ff4:	78 2f       	mov	r23, r24
    7ff6:	88 27       	eor	r24, r24
    7ff8:	b8 5f       	subi	r27, 0xF8	; 248
    7ffa:	39 f0       	breq	.+14     	; 0x800a <__fixunssfsi+0x46>
    7ffc:	b9 3f       	cpi	r27, 0xF9	; 249
    7ffe:	cc f3       	brlt	.-14     	; 0x7ff2 <__fixunssfsi+0x2e>
    8000:	86 95       	lsr	r24
    8002:	77 95       	ror	r23
    8004:	67 95       	ror	r22
    8006:	b3 95       	inc	r27
    8008:	d9 f7       	brne	.-10     	; 0x8000 <__fixunssfsi+0x3c>
    800a:	3e f4       	brtc	.+14     	; 0x801a <__fixunssfsi+0x56>
    800c:	90 95       	com	r25
    800e:	80 95       	com	r24
    8010:	70 95       	com	r23
    8012:	61 95       	neg	r22
    8014:	7f 4f       	sbci	r23, 0xFF	; 255
    8016:	8f 4f       	sbci	r24, 0xFF	; 255
    8018:	9f 4f       	sbci	r25, 0xFF	; 255
    801a:	08 95       	ret

0000801c <__floatunsisf>:
    801c:	e8 94       	clt
    801e:	09 c0       	rjmp	.+18     	; 0x8032 <__floatsisf+0x12>

00008020 <__floatsisf>:
    8020:	97 fb       	bst	r25, 7
    8022:	3e f4       	brtc	.+14     	; 0x8032 <__floatsisf+0x12>
    8024:	90 95       	com	r25
    8026:	80 95       	com	r24
    8028:	70 95       	com	r23
    802a:	61 95       	neg	r22
    802c:	7f 4f       	sbci	r23, 0xFF	; 255
    802e:	8f 4f       	sbci	r24, 0xFF	; 255
    8030:	9f 4f       	sbci	r25, 0xFF	; 255
    8032:	99 23       	and	r25, r25
    8034:	a9 f0       	breq	.+42     	; 0x8060 <__floatsisf+0x40>
    8036:	f9 2f       	mov	r31, r25
    8038:	96 e9       	ldi	r25, 0x96	; 150
    803a:	bb 27       	eor	r27, r27
    803c:	93 95       	inc	r25
    803e:	f6 95       	lsr	r31
    8040:	87 95       	ror	r24
    8042:	77 95       	ror	r23
    8044:	67 95       	ror	r22
    8046:	b7 95       	ror	r27
    8048:	f1 11       	cpse	r31, r1
    804a:	f8 cf       	rjmp	.-16     	; 0x803c <__floatsisf+0x1c>
    804c:	fa f4       	brpl	.+62     	; 0x808c <__floatsisf+0x6c>
    804e:	bb 0f       	add	r27, r27
    8050:	11 f4       	brne	.+4      	; 0x8056 <__floatsisf+0x36>
    8052:	60 ff       	sbrs	r22, 0
    8054:	1b c0       	rjmp	.+54     	; 0x808c <__floatsisf+0x6c>
    8056:	6f 5f       	subi	r22, 0xFF	; 255
    8058:	7f 4f       	sbci	r23, 0xFF	; 255
    805a:	8f 4f       	sbci	r24, 0xFF	; 255
    805c:	9f 4f       	sbci	r25, 0xFF	; 255
    805e:	16 c0       	rjmp	.+44     	; 0x808c <__floatsisf+0x6c>
    8060:	88 23       	and	r24, r24
    8062:	11 f0       	breq	.+4      	; 0x8068 <__floatsisf+0x48>
    8064:	96 e9       	ldi	r25, 0x96	; 150
    8066:	11 c0       	rjmp	.+34     	; 0x808a <__floatsisf+0x6a>
    8068:	77 23       	and	r23, r23
    806a:	21 f0       	breq	.+8      	; 0x8074 <__floatsisf+0x54>
    806c:	9e e8       	ldi	r25, 0x8E	; 142
    806e:	87 2f       	mov	r24, r23
    8070:	76 2f       	mov	r23, r22
    8072:	05 c0       	rjmp	.+10     	; 0x807e <__floatsisf+0x5e>
    8074:	66 23       	and	r22, r22
    8076:	71 f0       	breq	.+28     	; 0x8094 <__floatsisf+0x74>
    8078:	96 e8       	ldi	r25, 0x86	; 134
    807a:	86 2f       	mov	r24, r22
    807c:	70 e0       	ldi	r23, 0x00	; 0
    807e:	60 e0       	ldi	r22, 0x00	; 0
    8080:	2a f0       	brmi	.+10     	; 0x808c <__floatsisf+0x6c>
    8082:	9a 95       	dec	r25
    8084:	66 0f       	add	r22, r22
    8086:	77 1f       	adc	r23, r23
    8088:	88 1f       	adc	r24, r24
    808a:	da f7       	brpl	.-10     	; 0x8082 <__floatsisf+0x62>
    808c:	88 0f       	add	r24, r24
    808e:	96 95       	lsr	r25
    8090:	87 95       	ror	r24
    8092:	97 f9       	bld	r25, 7
    8094:	08 95       	ret

00008096 <__fp_inf>:
    8096:	97 f9       	bld	r25, 7
    8098:	9f 67       	ori	r25, 0x7F	; 127
    809a:	80 e8       	ldi	r24, 0x80	; 128
    809c:	70 e0       	ldi	r23, 0x00	; 0
    809e:	60 e0       	ldi	r22, 0x00	; 0
    80a0:	08 95       	ret

000080a2 <__fp_nan>:
    80a2:	9f ef       	ldi	r25, 0xFF	; 255
    80a4:	80 ec       	ldi	r24, 0xC0	; 192
    80a6:	08 95       	ret

000080a8 <__fp_pscA>:
    80a8:	00 24       	eor	r0, r0
    80aa:	0a 94       	dec	r0
    80ac:	16 16       	cp	r1, r22
    80ae:	17 06       	cpc	r1, r23
    80b0:	18 06       	cpc	r1, r24
    80b2:	09 06       	cpc	r0, r25
    80b4:	08 95       	ret

000080b6 <__fp_pscB>:
    80b6:	00 24       	eor	r0, r0
    80b8:	0a 94       	dec	r0
    80ba:	12 16       	cp	r1, r18
    80bc:	13 06       	cpc	r1, r19
    80be:	14 06       	cpc	r1, r20
    80c0:	05 06       	cpc	r0, r21
    80c2:	08 95       	ret

000080c4 <__fp_round>:
    80c4:	09 2e       	mov	r0, r25
    80c6:	03 94       	inc	r0
    80c8:	00 0c       	add	r0, r0
    80ca:	11 f4       	brne	.+4      	; 0x80d0 <__fp_round+0xc>
    80cc:	88 23       	and	r24, r24
    80ce:	52 f0       	brmi	.+20     	; 0x80e4 <__fp_round+0x20>
    80d0:	bb 0f       	add	r27, r27
    80d2:	40 f4       	brcc	.+16     	; 0x80e4 <__fp_round+0x20>
    80d4:	bf 2b       	or	r27, r31
    80d6:	11 f4       	brne	.+4      	; 0x80dc <__fp_round+0x18>
    80d8:	60 ff       	sbrs	r22, 0
    80da:	04 c0       	rjmp	.+8      	; 0x80e4 <__fp_round+0x20>
    80dc:	6f 5f       	subi	r22, 0xFF	; 255
    80de:	7f 4f       	sbci	r23, 0xFF	; 255
    80e0:	8f 4f       	sbci	r24, 0xFF	; 255
    80e2:	9f 4f       	sbci	r25, 0xFF	; 255
    80e4:	08 95       	ret

000080e6 <__fp_split3>:
    80e6:	57 fd       	sbrc	r21, 7
    80e8:	90 58       	subi	r25, 0x80	; 128
    80ea:	44 0f       	add	r20, r20
    80ec:	55 1f       	adc	r21, r21
    80ee:	59 f0       	breq	.+22     	; 0x8106 <__fp_splitA+0x10>
    80f0:	5f 3f       	cpi	r21, 0xFF	; 255
    80f2:	71 f0       	breq	.+28     	; 0x8110 <__fp_splitA+0x1a>
    80f4:	47 95       	ror	r20

000080f6 <__fp_splitA>:
    80f6:	88 0f       	add	r24, r24
    80f8:	97 fb       	bst	r25, 7
    80fa:	99 1f       	adc	r25, r25
    80fc:	61 f0       	breq	.+24     	; 0x8116 <__fp_splitA+0x20>
    80fe:	9f 3f       	cpi	r25, 0xFF	; 255
    8100:	79 f0       	breq	.+30     	; 0x8120 <__fp_splitA+0x2a>
    8102:	87 95       	ror	r24
    8104:	08 95       	ret
    8106:	12 16       	cp	r1, r18
    8108:	13 06       	cpc	r1, r19
    810a:	14 06       	cpc	r1, r20
    810c:	55 1f       	adc	r21, r21
    810e:	f2 cf       	rjmp	.-28     	; 0x80f4 <__fp_split3+0xe>
    8110:	46 95       	lsr	r20
    8112:	f1 df       	rcall	.-30     	; 0x80f6 <__fp_splitA>
    8114:	08 c0       	rjmp	.+16     	; 0x8126 <__fp_splitA+0x30>
    8116:	16 16       	cp	r1, r22
    8118:	17 06       	cpc	r1, r23
    811a:	18 06       	cpc	r1, r24
    811c:	99 1f       	adc	r25, r25
    811e:	f1 cf       	rjmp	.-30     	; 0x8102 <__fp_splitA+0xc>
    8120:	86 95       	lsr	r24
    8122:	71 05       	cpc	r23, r1
    8124:	61 05       	cpc	r22, r1
    8126:	08 94       	sec
    8128:	08 95       	ret

0000812a <__fp_zero>:
    812a:	e8 94       	clt

0000812c <__fp_szero>:
    812c:	bb 27       	eor	r27, r27
    812e:	66 27       	eor	r22, r22
    8130:	77 27       	eor	r23, r23
    8132:	cb 01       	movw	r24, r22
    8134:	97 f9       	bld	r25, 7
    8136:	08 95       	ret

00008138 <__mulsf3>:
    8138:	0b d0       	rcall	.+22     	; 0x8150 <__mulsf3x>
    813a:	c4 cf       	rjmp	.-120    	; 0x80c4 <__fp_round>
    813c:	b5 df       	rcall	.-150    	; 0x80a8 <__fp_pscA>
    813e:	28 f0       	brcs	.+10     	; 0x814a <__mulsf3+0x12>
    8140:	ba df       	rcall	.-140    	; 0x80b6 <__fp_pscB>
    8142:	18 f0       	brcs	.+6      	; 0x814a <__mulsf3+0x12>
    8144:	95 23       	and	r25, r21
    8146:	09 f0       	breq	.+2      	; 0x814a <__mulsf3+0x12>
    8148:	a6 cf       	rjmp	.-180    	; 0x8096 <__fp_inf>
    814a:	ab cf       	rjmp	.-170    	; 0x80a2 <__fp_nan>
    814c:	11 24       	eor	r1, r1
    814e:	ee cf       	rjmp	.-36     	; 0x812c <__fp_szero>

00008150 <__mulsf3x>:
    8150:	ca df       	rcall	.-108    	; 0x80e6 <__fp_split3>
    8152:	a0 f3       	brcs	.-24     	; 0x813c <__mulsf3+0x4>

00008154 <__mulsf3_pse>:
    8154:	95 9f       	mul	r25, r21
    8156:	d1 f3       	breq	.-12     	; 0x814c <__mulsf3+0x14>
    8158:	95 0f       	add	r25, r21
    815a:	50 e0       	ldi	r21, 0x00	; 0
    815c:	55 1f       	adc	r21, r21
    815e:	62 9f       	mul	r22, r18
    8160:	f0 01       	movw	r30, r0
    8162:	72 9f       	mul	r23, r18
    8164:	bb 27       	eor	r27, r27
    8166:	f0 0d       	add	r31, r0
    8168:	b1 1d       	adc	r27, r1
    816a:	63 9f       	mul	r22, r19
    816c:	aa 27       	eor	r26, r26
    816e:	f0 0d       	add	r31, r0
    8170:	b1 1d       	adc	r27, r1
    8172:	aa 1f       	adc	r26, r26
    8174:	64 9f       	mul	r22, r20
    8176:	66 27       	eor	r22, r22
    8178:	b0 0d       	add	r27, r0
    817a:	a1 1d       	adc	r26, r1
    817c:	66 1f       	adc	r22, r22
    817e:	82 9f       	mul	r24, r18
    8180:	22 27       	eor	r18, r18
    8182:	b0 0d       	add	r27, r0
    8184:	a1 1d       	adc	r26, r1
    8186:	62 1f       	adc	r22, r18
    8188:	73 9f       	mul	r23, r19
    818a:	b0 0d       	add	r27, r0
    818c:	a1 1d       	adc	r26, r1
    818e:	62 1f       	adc	r22, r18
    8190:	83 9f       	mul	r24, r19
    8192:	a0 0d       	add	r26, r0
    8194:	61 1d       	adc	r22, r1
    8196:	22 1f       	adc	r18, r18
    8198:	74 9f       	mul	r23, r20
    819a:	33 27       	eor	r19, r19
    819c:	a0 0d       	add	r26, r0
    819e:	61 1d       	adc	r22, r1
    81a0:	23 1f       	adc	r18, r19
    81a2:	84 9f       	mul	r24, r20
    81a4:	60 0d       	add	r22, r0
    81a6:	21 1d       	adc	r18, r1
    81a8:	82 2f       	mov	r24, r18
    81aa:	76 2f       	mov	r23, r22
    81ac:	6a 2f       	mov	r22, r26
    81ae:	11 24       	eor	r1, r1
    81b0:	9f 57       	subi	r25, 0x7F	; 127
    81b2:	50 40       	sbci	r21, 0x00	; 0
    81b4:	8a f0       	brmi	.+34     	; 0x81d8 <__mulsf3_pse+0x84>
    81b6:	e1 f0       	breq	.+56     	; 0x81f0 <__mulsf3_pse+0x9c>
    81b8:	88 23       	and	r24, r24
    81ba:	4a f0       	brmi	.+18     	; 0x81ce <__mulsf3_pse+0x7a>
    81bc:	ee 0f       	add	r30, r30
    81be:	ff 1f       	adc	r31, r31
    81c0:	bb 1f       	adc	r27, r27
    81c2:	66 1f       	adc	r22, r22
    81c4:	77 1f       	adc	r23, r23
    81c6:	88 1f       	adc	r24, r24
    81c8:	91 50       	subi	r25, 0x01	; 1
    81ca:	50 40       	sbci	r21, 0x00	; 0
    81cc:	a9 f7       	brne	.-22     	; 0x81b8 <__mulsf3_pse+0x64>
    81ce:	9e 3f       	cpi	r25, 0xFE	; 254
    81d0:	51 05       	cpc	r21, r1
    81d2:	70 f0       	brcs	.+28     	; 0x81f0 <__mulsf3_pse+0x9c>
    81d4:	60 cf       	rjmp	.-320    	; 0x8096 <__fp_inf>
    81d6:	aa cf       	rjmp	.-172    	; 0x812c <__fp_szero>
    81d8:	5f 3f       	cpi	r21, 0xFF	; 255
    81da:	ec f3       	brlt	.-6      	; 0x81d6 <__mulsf3_pse+0x82>
    81dc:	98 3e       	cpi	r25, 0xE8	; 232
    81de:	dc f3       	brlt	.-10     	; 0x81d6 <__mulsf3_pse+0x82>
    81e0:	86 95       	lsr	r24
    81e2:	77 95       	ror	r23
    81e4:	67 95       	ror	r22
    81e6:	b7 95       	ror	r27
    81e8:	f7 95       	ror	r31
    81ea:	e7 95       	ror	r30
    81ec:	9f 5f       	subi	r25, 0xFF	; 255
    81ee:	c1 f7       	brne	.-16     	; 0x81e0 <__mulsf3_pse+0x8c>
    81f0:	fe 2b       	or	r31, r30
    81f2:	88 0f       	add	r24, r24
    81f4:	91 1d       	adc	r25, r1
    81f6:	96 95       	lsr	r25
    81f8:	87 95       	ror	r24
    81fa:	97 f9       	bld	r25, 7
    81fc:	08 95       	ret

000081fe <__mulsi3>:
    81fe:	db 01       	movw	r26, r22
    8200:	8f 93       	push	r24
    8202:	9f 93       	push	r25
    8204:	8e d0       	rcall	.+284    	; 0x8322 <__muluhisi3>
    8206:	bf 91       	pop	r27
    8208:	af 91       	pop	r26
    820a:	a2 9f       	mul	r26, r18
    820c:	80 0d       	add	r24, r0
    820e:	91 1d       	adc	r25, r1
    8210:	a3 9f       	mul	r26, r19
    8212:	90 0d       	add	r25, r0
    8214:	b2 9f       	mul	r27, r18
    8216:	90 0d       	add	r25, r0
    8218:	11 24       	eor	r1, r1
    821a:	08 95       	ret

0000821c <__udivmodhi4>:
    821c:	aa 1b       	sub	r26, r26
    821e:	bb 1b       	sub	r27, r27
    8220:	51 e1       	ldi	r21, 0x11	; 17
    8222:	07 c0       	rjmp	.+14     	; 0x8232 <__udivmodhi4_ep>

00008224 <__udivmodhi4_loop>:
    8224:	aa 1f       	adc	r26, r26
    8226:	bb 1f       	adc	r27, r27
    8228:	a6 17       	cp	r26, r22
    822a:	b7 07       	cpc	r27, r23
    822c:	10 f0       	brcs	.+4      	; 0x8232 <__udivmodhi4_ep>
    822e:	a6 1b       	sub	r26, r22
    8230:	b7 0b       	sbc	r27, r23

00008232 <__udivmodhi4_ep>:
    8232:	88 1f       	adc	r24, r24
    8234:	99 1f       	adc	r25, r25
    8236:	5a 95       	dec	r21
    8238:	a9 f7       	brne	.-22     	; 0x8224 <__udivmodhi4_loop>
    823a:	80 95       	com	r24
    823c:	90 95       	com	r25
    823e:	bc 01       	movw	r22, r24
    8240:	cd 01       	movw	r24, r26
    8242:	08 95       	ret

00008244 <__divmodhi4>:
    8244:	97 fb       	bst	r25, 7
    8246:	07 2e       	mov	r0, r23
    8248:	16 f4       	brtc	.+4      	; 0x824e <__divmodhi4+0xa>
    824a:	00 94       	com	r0
    824c:	06 d0       	rcall	.+12     	; 0x825a <__divmodhi4_neg1>
    824e:	77 fd       	sbrc	r23, 7
    8250:	08 d0       	rcall	.+16     	; 0x8262 <__divmodhi4_neg2>
    8252:	e4 df       	rcall	.-56     	; 0x821c <__udivmodhi4>
    8254:	07 fc       	sbrc	r0, 7
    8256:	05 d0       	rcall	.+10     	; 0x8262 <__divmodhi4_neg2>
    8258:	3e f4       	brtc	.+14     	; 0x8268 <__divmodhi4_exit>

0000825a <__divmodhi4_neg1>:
    825a:	90 95       	com	r25
    825c:	81 95       	neg	r24
    825e:	9f 4f       	sbci	r25, 0xFF	; 255
    8260:	08 95       	ret

00008262 <__divmodhi4_neg2>:
    8262:	70 95       	com	r23
    8264:	61 95       	neg	r22
    8266:	7f 4f       	sbci	r23, 0xFF	; 255

00008268 <__divmodhi4_exit>:
    8268:	08 95       	ret

0000826a <__udivmodsi4>:
    826a:	a1 e2       	ldi	r26, 0x21	; 33
    826c:	1a 2e       	mov	r1, r26
    826e:	aa 1b       	sub	r26, r26
    8270:	bb 1b       	sub	r27, r27
    8272:	fd 01       	movw	r30, r26
    8274:	0d c0       	rjmp	.+26     	; 0x8290 <__udivmodsi4_ep>

00008276 <__udivmodsi4_loop>:
    8276:	aa 1f       	adc	r26, r26
    8278:	bb 1f       	adc	r27, r27
    827a:	ee 1f       	adc	r30, r30
    827c:	ff 1f       	adc	r31, r31
    827e:	a2 17       	cp	r26, r18
    8280:	b3 07       	cpc	r27, r19
    8282:	e4 07       	cpc	r30, r20
    8284:	f5 07       	cpc	r31, r21
    8286:	20 f0       	brcs	.+8      	; 0x8290 <__udivmodsi4_ep>
    8288:	a2 1b       	sub	r26, r18
    828a:	b3 0b       	sbc	r27, r19
    828c:	e4 0b       	sbc	r30, r20
    828e:	f5 0b       	sbc	r31, r21

00008290 <__udivmodsi4_ep>:
    8290:	66 1f       	adc	r22, r22
    8292:	77 1f       	adc	r23, r23
    8294:	88 1f       	adc	r24, r24
    8296:	99 1f       	adc	r25, r25
    8298:	1a 94       	dec	r1
    829a:	69 f7       	brne	.-38     	; 0x8276 <__udivmodsi4_loop>
    829c:	60 95       	com	r22
    829e:	70 95       	com	r23
    82a0:	80 95       	com	r24
    82a2:	90 95       	com	r25
    82a4:	9b 01       	movw	r18, r22
    82a6:	ac 01       	movw	r20, r24
    82a8:	bd 01       	movw	r22, r26
    82aa:	cf 01       	movw	r24, r30
    82ac:	08 95       	ret

000082ae <__divmodsi4>:
    82ae:	05 2e       	mov	r0, r21
    82b0:	97 fb       	bst	r25, 7
    82b2:	16 f4       	brtc	.+4      	; 0x82b8 <__divmodsi4+0xa>
    82b4:	00 94       	com	r0
    82b6:	0f d0       	rcall	.+30     	; 0x82d6 <__negsi2>
    82b8:	57 fd       	sbrc	r21, 7
    82ba:	05 d0       	rcall	.+10     	; 0x82c6 <__divmodsi4_neg2>
    82bc:	d6 df       	rcall	.-84     	; 0x826a <__udivmodsi4>
    82be:	07 fc       	sbrc	r0, 7
    82c0:	02 d0       	rcall	.+4      	; 0x82c6 <__divmodsi4_neg2>
    82c2:	46 f4       	brtc	.+16     	; 0x82d4 <__divmodsi4_exit>
    82c4:	08 c0       	rjmp	.+16     	; 0x82d6 <__negsi2>

000082c6 <__divmodsi4_neg2>:
    82c6:	50 95       	com	r21
    82c8:	40 95       	com	r20
    82ca:	30 95       	com	r19
    82cc:	21 95       	neg	r18
    82ce:	3f 4f       	sbci	r19, 0xFF	; 255
    82d0:	4f 4f       	sbci	r20, 0xFF	; 255
    82d2:	5f 4f       	sbci	r21, 0xFF	; 255

000082d4 <__divmodsi4_exit>:
    82d4:	08 95       	ret

000082d6 <__negsi2>:
    82d6:	90 95       	com	r25
    82d8:	80 95       	com	r24
    82da:	70 95       	com	r23
    82dc:	61 95       	neg	r22
    82de:	7f 4f       	sbci	r23, 0xFF	; 255
    82e0:	8f 4f       	sbci	r24, 0xFF	; 255
    82e2:	9f 4f       	sbci	r25, 0xFF	; 255
    82e4:	08 95       	ret

000082e6 <__tablejump2__>:
    82e6:	ee 0f       	add	r30, r30
    82e8:	ff 1f       	adc	r31, r31
    82ea:	00 24       	eor	r0, r0
    82ec:	00 1c       	adc	r0, r0
    82ee:	0b be       	out	0x3b, r0	; 59
    82f0:	07 90       	elpm	r0, Z+
    82f2:	f6 91       	elpm	r31, Z
    82f4:	e0 2d       	mov	r30, r0
    82f6:	09 94       	ijmp

000082f8 <__umulhisi3>:
    82f8:	a2 9f       	mul	r26, r18
    82fa:	b0 01       	movw	r22, r0
    82fc:	b3 9f       	mul	r27, r19
    82fe:	c0 01       	movw	r24, r0
    8300:	a3 9f       	mul	r26, r19
    8302:	70 0d       	add	r23, r0
    8304:	81 1d       	adc	r24, r1
    8306:	11 24       	eor	r1, r1
    8308:	91 1d       	adc	r25, r1
    830a:	b2 9f       	mul	r27, r18
    830c:	70 0d       	add	r23, r0
    830e:	81 1d       	adc	r24, r1
    8310:	11 24       	eor	r1, r1
    8312:	91 1d       	adc	r25, r1
    8314:	08 95       	ret

00008316 <__usmulhisi3>:
    8316:	f0 df       	rcall	.-32     	; 0x82f8 <__umulhisi3>

00008318 <__usmulhisi3_tail>:
    8318:	b7 ff       	sbrs	r27, 7
    831a:	08 95       	ret
    831c:	82 1b       	sub	r24, r18
    831e:	93 0b       	sbc	r25, r19
    8320:	08 95       	ret

00008322 <__muluhisi3>:
    8322:	ea df       	rcall	.-44     	; 0x82f8 <__umulhisi3>
    8324:	a5 9f       	mul	r26, r21
    8326:	90 0d       	add	r25, r0
    8328:	b4 9f       	mul	r27, r20
    832a:	90 0d       	add	r25, r0
    832c:	a4 9f       	mul	r26, r20
    832e:	80 0d       	add	r24, r0
    8330:	91 1d       	adc	r25, r1
    8332:	11 24       	eor	r1, r1
    8334:	08 95       	ret

00008336 <random_r>:
    8336:	8f 92       	push	r8
    8338:	9f 92       	push	r9
    833a:	af 92       	push	r10
    833c:	bf 92       	push	r11
    833e:	cf 92       	push	r12
    8340:	df 92       	push	r13
    8342:	ef 92       	push	r14
    8344:	ff 92       	push	r15
    8346:	cf 93       	push	r28
    8348:	df 93       	push	r29
    834a:	ec 01       	movw	r28, r24
    834c:	68 81       	ld	r22, Y
    834e:	79 81       	ldd	r23, Y+1	; 0x01
    8350:	8a 81       	ldd	r24, Y+2	; 0x02
    8352:	9b 81       	ldd	r25, Y+3	; 0x03
    8354:	61 15       	cp	r22, r1
    8356:	71 05       	cpc	r23, r1
    8358:	81 05       	cpc	r24, r1
    835a:	91 05       	cpc	r25, r1
    835c:	21 f4       	brne	.+8      	; 0x8366 <random_r+0x30>
    835e:	64 e2       	ldi	r22, 0x24	; 36
    8360:	79 ed       	ldi	r23, 0xD9	; 217
    8362:	8b e5       	ldi	r24, 0x5B	; 91
    8364:	97 e0       	ldi	r25, 0x07	; 7
    8366:	2d e1       	ldi	r18, 0x1D	; 29
    8368:	33 ef       	ldi	r19, 0xF3	; 243
    836a:	41 e0       	ldi	r20, 0x01	; 1
    836c:	50 e0       	ldi	r21, 0x00	; 0
    836e:	9f df       	rcall	.-194    	; 0x82ae <__divmodsi4>
    8370:	49 01       	movw	r8, r18
    8372:	5a 01       	movw	r10, r20
    8374:	9b 01       	movw	r18, r22
    8376:	ac 01       	movw	r20, r24
    8378:	a7 ea       	ldi	r26, 0xA7	; 167
    837a:	b1 e4       	ldi	r27, 0x41	; 65
    837c:	d2 df       	rcall	.-92     	; 0x8322 <__muluhisi3>
    837e:	6b 01       	movw	r12, r22
    8380:	7c 01       	movw	r14, r24
    8382:	ac ee       	ldi	r26, 0xEC	; 236
    8384:	b4 ef       	ldi	r27, 0xF4	; 244
    8386:	a5 01       	movw	r20, r10
    8388:	94 01       	movw	r18, r8
    838a:	94 d0       	rcall	.+296    	; 0x84b4 <__mulohisi3>
    838c:	c6 0e       	add	r12, r22
    838e:	d7 1e       	adc	r13, r23
    8390:	e8 1e       	adc	r14, r24
    8392:	f9 1e       	adc	r15, r25
    8394:	f7 fe       	sbrs	r15, 7
    8396:	06 c0       	rjmp	.+12     	; 0x83a4 <random_r+0x6e>
    8398:	81 e0       	ldi	r24, 0x01	; 1
    839a:	c8 1a       	sub	r12, r24
    839c:	d1 08       	sbc	r13, r1
    839e:	e1 08       	sbc	r14, r1
    83a0:	80 e8       	ldi	r24, 0x80	; 128
    83a2:	f8 0a       	sbc	r15, r24
    83a4:	c8 82       	st	Y, r12
    83a6:	d9 82       	std	Y+1, r13	; 0x01
    83a8:	ea 82       	std	Y+2, r14	; 0x02
    83aa:	fb 82       	std	Y+3, r15	; 0x03
    83ac:	c7 01       	movw	r24, r14
    83ae:	b6 01       	movw	r22, r12
    83b0:	9f 77       	andi	r25, 0x7F	; 127
    83b2:	df 91       	pop	r29
    83b4:	cf 91       	pop	r28
    83b6:	ff 90       	pop	r15
    83b8:	ef 90       	pop	r14
    83ba:	df 90       	pop	r13
    83bc:	cf 90       	pop	r12
    83be:	bf 90       	pop	r11
    83c0:	af 90       	pop	r10
    83c2:	9f 90       	pop	r9
    83c4:	8f 90       	pop	r8
    83c6:	08 95       	ret

000083c8 <random>:
    83c8:	8f 92       	push	r8
    83ca:	9f 92       	push	r9
    83cc:	af 92       	push	r10
    83ce:	bf 92       	push	r11
    83d0:	cf 92       	push	r12
    83d2:	df 92       	push	r13
    83d4:	ef 92       	push	r14
    83d6:	ff 92       	push	r15
    83d8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    83dc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    83e0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    83e4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    83e8:	61 15       	cp	r22, r1
    83ea:	71 05       	cpc	r23, r1
    83ec:	81 05       	cpc	r24, r1
    83ee:	91 05       	cpc	r25, r1
    83f0:	21 f4       	brne	.+8      	; 0x83fa <random+0x32>
    83f2:	64 e2       	ldi	r22, 0x24	; 36
    83f4:	79 ed       	ldi	r23, 0xD9	; 217
    83f6:	8b e5       	ldi	r24, 0x5B	; 91
    83f8:	97 e0       	ldi	r25, 0x07	; 7
    83fa:	2d e1       	ldi	r18, 0x1D	; 29
    83fc:	33 ef       	ldi	r19, 0xF3	; 243
    83fe:	41 e0       	ldi	r20, 0x01	; 1
    8400:	50 e0       	ldi	r21, 0x00	; 0
    8402:	55 df       	rcall	.-342    	; 0x82ae <__divmodsi4>
    8404:	49 01       	movw	r8, r18
    8406:	5a 01       	movw	r10, r20
    8408:	9b 01       	movw	r18, r22
    840a:	ac 01       	movw	r20, r24
    840c:	a7 ea       	ldi	r26, 0xA7	; 167
    840e:	b1 e4       	ldi	r27, 0x41	; 65
    8410:	88 df       	rcall	.-240    	; 0x8322 <__muluhisi3>
    8412:	6b 01       	movw	r12, r22
    8414:	7c 01       	movw	r14, r24
    8416:	ac ee       	ldi	r26, 0xEC	; 236
    8418:	b4 ef       	ldi	r27, 0xF4	; 244
    841a:	a5 01       	movw	r20, r10
    841c:	94 01       	movw	r18, r8
    841e:	4a d0       	rcall	.+148    	; 0x84b4 <__mulohisi3>
    8420:	c6 0e       	add	r12, r22
    8422:	d7 1e       	adc	r13, r23
    8424:	e8 1e       	adc	r14, r24
    8426:	f9 1e       	adc	r15, r25
    8428:	f7 fe       	sbrs	r15, 7
    842a:	06 c0       	rjmp	.+12     	; 0x8438 <random+0x70>
    842c:	81 e0       	ldi	r24, 0x01	; 1
    842e:	c8 1a       	sub	r12, r24
    8430:	d1 08       	sbc	r13, r1
    8432:	e1 08       	sbc	r14, r1
    8434:	80 e8       	ldi	r24, 0x80	; 128
    8436:	f8 0a       	sbc	r15, r24
    8438:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    843c:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    8440:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    8444:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    8448:	c7 01       	movw	r24, r14
    844a:	b6 01       	movw	r22, r12
    844c:	9f 77       	andi	r25, 0x7F	; 127
    844e:	ff 90       	pop	r15
    8450:	ef 90       	pop	r14
    8452:	df 90       	pop	r13
    8454:	cf 90       	pop	r12
    8456:	bf 90       	pop	r11
    8458:	af 90       	pop	r10
    845a:	9f 90       	pop	r9
    845c:	8f 90       	pop	r8
    845e:	08 95       	ret

00008460 <srandom>:
    8460:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    8464:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    8468:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    846c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    8470:	08 95       	ret

00008472 <memcpy>:
    8472:	fb 01       	movw	r30, r22
    8474:	dc 01       	movw	r26, r24
    8476:	02 c0       	rjmp	.+4      	; 0x847c <memcpy+0xa>
    8478:	01 90       	ld	r0, Z+
    847a:	0d 92       	st	X+, r0
    847c:	41 50       	subi	r20, 0x01	; 1
    847e:	50 40       	sbci	r21, 0x00	; 0
    8480:	d8 f7       	brcc	.-10     	; 0x8478 <memcpy+0x6>
    8482:	08 95       	ret

00008484 <strcpy>:
    8484:	fb 01       	movw	r30, r22
    8486:	dc 01       	movw	r26, r24
    8488:	01 90       	ld	r0, Z+
    848a:	0d 92       	st	X+, r0
    848c:	00 20       	and	r0, r0
    848e:	e1 f7       	brne	.-8      	; 0x8488 <strcpy+0x4>
    8490:	08 95       	ret

00008492 <strncpy>:
    8492:	fb 01       	movw	r30, r22
    8494:	dc 01       	movw	r26, r24
    8496:	41 50       	subi	r20, 0x01	; 1
    8498:	50 40       	sbci	r21, 0x00	; 0
    849a:	48 f0       	brcs	.+18     	; 0x84ae <strncpy+0x1c>
    849c:	01 90       	ld	r0, Z+
    849e:	0d 92       	st	X+, r0
    84a0:	00 20       	and	r0, r0
    84a2:	c9 f7       	brne	.-14     	; 0x8496 <strncpy+0x4>
    84a4:	01 c0       	rjmp	.+2      	; 0x84a8 <strncpy+0x16>
    84a6:	1d 92       	st	X+, r1
    84a8:	41 50       	subi	r20, 0x01	; 1
    84aa:	50 40       	sbci	r21, 0x00	; 0
    84ac:	e0 f7       	brcc	.-8      	; 0x84a6 <strncpy+0x14>
    84ae:	08 95       	ret

000084b0 <__mulshisi3>:
    84b0:	b7 ff       	sbrs	r27, 7
    84b2:	37 cf       	rjmp	.-402    	; 0x8322 <__muluhisi3>

000084b4 <__mulohisi3>:
    84b4:	36 df       	rcall	.-404    	; 0x8322 <__muluhisi3>
    84b6:	82 1b       	sub	r24, r18
    84b8:	93 0b       	sbc	r25, r19
    84ba:	08 95       	ret

000084bc <__do_global_dtors>:
    84bc:	14 e0       	ldi	r17, 0x04	; 4
    84be:	c5 e3       	ldi	r28, 0x35	; 53
    84c0:	d4 e0       	ldi	r29, 0x04	; 4
    84c2:	03 c0       	rjmp	.+6      	; 0x84ca <__do_global_dtors+0xe>
    84c4:	fe 01       	movw	r30, r28
    84c6:	0f df       	rcall	.-482    	; 0x82e6 <__tablejump2__>
    84c8:	21 96       	adiw	r28, 0x01	; 1
    84ca:	c6 33       	cpi	r28, 0x36	; 54
    84cc:	d1 07       	cpc	r29, r17
    84ce:	d1 f7       	brne	.-12     	; 0x84c4 <__do_global_dtors+0x8>
    84d0:	f8 94       	cli

000084d2 <__stop_program>:
    84d2:	ff cf       	rjmp	.-2      	; 0x84d2 <__stop_program>
