
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c4       	rjmp	.+2154   	; 0x86c <__dtors_end>
       2:	00 00       	nop
       4:	5d c4       	rjmp	.+2234   	; 0x8c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c4       	rjmp	.+2230   	; 0x8c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c4       	rjmp	.+2226   	; 0x8c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c4       	rjmp	.+2222   	; 0x8c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c4       	rjmp	.+2218   	; 0x8c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c4       	rjmp	.+2214   	; 0x8c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c4       	rjmp	.+2210   	; 0x8c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c4       	rjmp	.+2206   	; 0x8c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c4       	rjmp	.+2202   	; 0x8c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 a3 48 	jmp	0x9146	; 0x9146 <__vector_10>
      2c:	0c 94 20 49 	jmp	0x9240	; 0x9240 <__vector_11>
      30:	47 c4       	rjmp	.+2190   	; 0x8c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c4       	rjmp	.+2186   	; 0x8c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c4       	rjmp	.+2182   	; 0x8c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c4       	rjmp	.+2178   	; 0x8c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c4       	rjmp	.+2174   	; 0x8c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c4       	rjmp	.+2170   	; 0x8c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c4       	rjmp	.+2166   	; 0x8c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c4       	rjmp	.+2162   	; 0x8c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c4       	rjmp	.+2158   	; 0x8c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c4       	rjmp	.+2154   	; 0x8c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c4       	rjmp	.+2150   	; 0x8c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 02 48 	jmp	0x9004	; 0x9004 <__vector_23>
      60:	2f c4       	rjmp	.+2142   	; 0x8c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 5e 4b 	jmp	0x96bc	; 0x96bc <__vector_25>
      68:	0c 94 89 4b 	jmp	0x9712	; 0x9712 <__vector_26>
      6c:	0c 94 ba 4b 	jmp	0x9774	; 0x9774 <__vector_27>
      70:	27 c4       	rjmp	.+2126   	; 0x8c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c4       	rjmp	.+2122   	; 0x8c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c4       	rjmp	.+2118   	; 0x8c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c4       	rjmp	.+2114   	; 0x8c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 1b 1c 	jmp	0x3836	; 0x3836 <__vector_32>
      84:	1d c4       	rjmp	.+2106   	; 0x8c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c4       	rjmp	.+2102   	; 0x8c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 c4       	rjmp	.+2098   	; 0x8c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	17 c4       	rjmp	.+2094   	; 0x8c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c4       	rjmp	.+2090   	; 0x8c0 <__bad_interrupt>
	...

00000098 <MatrixColors_p>:
      98:	00 10 00 00 00 30 00 00 00 50 00 00 00 70 00 00     .....0...P...p..
      a8:	00 80 00 00 00 80 00 00 00 80 00 00 19 8d 19 00     ................
      b8:	33 99 33 00 4d a6 4d 00 66 b3 66 00 80 c0 80 00     3.3.M.M.f.f.....
      c8:	99 cc 99 00 b3 d9 b3 00 cc e6 cc 00 e6 f2 e6 00     ................

000000d8 <font>:
      d8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      e8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      f8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     108:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     118:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     128:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     138:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     148:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     158:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     168:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     178:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     188:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     198:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1a8:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1b8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1c8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     1d8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1e8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1f8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     208:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     218:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     228:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     238:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     248:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     258:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     268:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     278:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     288:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     298:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2a8:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2b8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2c8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2d8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2e8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2f8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     308:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     318:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     328:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     338:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     348:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     358:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     368:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     378:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     388:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     398:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3a8:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3b8:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3c8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     3d8:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     3e8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3f8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     408:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     418:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     428:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     438:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     448:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     458:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     468:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     478:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     488:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     498:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4a8:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4b8:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4c8:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     4d8:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     4e8:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4f8:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     508:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     518:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     528:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     538:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     548:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     558:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     568:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     578:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     588:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     598:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5a8:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5b8:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5c8:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000005d8 <gamma6>:
     5d8:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5e8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5f8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     608:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

00000618 <gamma5>:
     618:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     628:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

00000638 <PartyColors_p>:
     638:	ab 00 55 00 7c 00 84 00 4b 00 b5 00 1b 00 e5 00     ..U.|...K.......
     648:	00 17 e8 00 00 47 b8 00 00 77 ab 00 00 ab ab 00     .....G...w......
     658:	00 55 ab 00 00 22 dd 00 0e 00 f2 00 3e 00 c2 00     .U..."......>...
     668:	71 00 8f 00 a1 00 5f 00 d0 00 2f 00 f9 07 00 00     q....._.../.....

00000678 <RainbowStripeColors_p>:
     678:	00 00 ff 00 00 00 00 00 00 55 ab 00 00 00 00 00     .........U......
     688:	00 ab ab 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     698:	55 ab 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     U...............
     6a8:	ab 00 55 00 00 00 00 00 55 00 ab 00 00 00 00 00     ..U.....U.......

000006b8 <RainbowColors_p>:
     6b8:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     6c8:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     6d8:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     6e8:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

000006f8 <CloudColors_p>:
     6f8:	ff 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     708:	8b 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     718:	ff 00 00 00 8b 00 00 00 eb ce 87 00 eb ce 87 00     ................
     728:	e6 d8 ad 00 ff ff ff 00 e6 d8 ad 00 eb ce 87 00     ................

00000738 <digital_pin_table_PGM>:
     738:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     748:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     758:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     768:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     778:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     788:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000794 <descriptor_list>:
     794:	00 01 00 00 45 08 12 00 02 00 00 02 08 43 00 03     ....E........C..
     7a4:	00 00 fe 07 04 01 03 09 04 e4 07 18 02 03 09 04     ................
     7b4:	cc 07 16 03 03 09 04 be 07 0c                       ..........

000007be <string3>:
     7be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000007cc <string2>:
     7cc:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     7dc:	69 00 61 00 6c 00 00 00                             i.a.l...

000007e4 <string1>:
     7e4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     7f4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000007fe <string0>:
     7fe:	04 03 09 04                                         ....

00000802 <config1_descriptor>:
     802:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     812:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     822:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     832:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     842:	40 00 00                                            @..

00000845 <device_descriptor>:
     845:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     855:	03 01                                               ..

00000857 <endpoint_config_table>:
     857:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000862 <__ctors_start>:
     862:	7c 34       	cpi	r23, 0x4C	; 76
     864:	7e 43       	sbci	r23, 0x3E	; 62
     866:	d8 4b       	sbci	r29, 0xB8	; 184
     868:	9d 4e       	sbci	r25, 0xED	; 237

0000086a <__ctors_end>:
     86a:	f7 34       	cpi	r31, 0x47	; 71

0000086c <__dtors_end>:
     86c:	11 24       	eor	r1, r1
     86e:	1f be       	out	0x3f, r1	; 63
     870:	cf ef       	ldi	r28, 0xFF	; 255
     872:	d0 e2       	ldi	r29, 0x20	; 32
     874:	de bf       	out	0x3e, r29	; 62
     876:	cd bf       	out	0x3d, r28	; 61

00000878 <__do_copy_data>:
     878:	19 e0       	ldi	r17, 0x09	; 9
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b1 e0       	ldi	r27, 0x01	; 1
     87e:	e8 e7       	ldi	r30, 0x78	; 120
     880:	f5 ea       	ldi	r31, 0xA5	; 165
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	0b bf       	out	0x3b, r16	; 59
     886:	02 c0       	rjmp	.+4      	; 0x88c <__do_copy_data+0x14>
     888:	07 90       	elpm	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	a2 3e       	cpi	r26, 0xE2	; 226
     88e:	b1 07       	cpc	r27, r17
     890:	d9 f7       	brne	.-10     	; 0x888 <__do_copy_data+0x10>

00000892 <__do_clear_bss>:
     892:	21 e1       	ldi	r18, 0x11	; 17
     894:	a2 ee       	ldi	r26, 0xE2	; 226
     896:	b9 e0       	ldi	r27, 0x09	; 9
     898:	01 c0       	rjmp	.+2      	; 0x89c <.do_clear_bss_start>

0000089a <.do_clear_bss_loop>:
     89a:	1d 92       	st	X+, r1

0000089c <.do_clear_bss_start>:
     89c:	a8 36       	cpi	r26, 0x68	; 104
     89e:	b2 07       	cpc	r27, r18
     8a0:	e1 f7       	brne	.-8      	; 0x89a <.do_clear_bss_loop>

000008a2 <__do_global_ctors>:
     8a2:	14 e0       	ldi	r17, 0x04	; 4
     8a4:	c5 e3       	ldi	r28, 0x35	; 53
     8a6:	d4 e0       	ldi	r29, 0x04	; 4
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__do_global_ctors+0x10>
     8aa:	21 97       	sbiw	r28, 0x01	; 1
     8ac:	fe 01       	movw	r30, r28
     8ae:	0e 94 c5 51 	call	0xa38a	; 0xa38a <__tablejump2__>
     8b2:	c1 33       	cpi	r28, 0x31	; 49
     8b4:	d1 07       	cpc	r29, r17
     8b6:	c9 f7       	brne	.-14     	; 0x8aa <__do_global_ctors+0x8>
     8b8:	0e 94 e9 4b 	call	0x97d2	; 0x97d2 <main>
     8bc:	0c 94 b0 52 	jmp	0xa560	; 0xa560 <__do_global_dtors>

000008c0 <__bad_interrupt>:
     8c0:	9f cb       	rjmp	.-2242   	; 0x0 <__vectors>

000008c2 <CLEDController::size()>:

		// delete 1 pixel sometimes
		//if (random(0, 3) == 1) leds[random(0, anz_LEDs)] = CRGB::Black;

		FastLED.show();
	}
     8c2:	fc 01       	movw	r30, r24
     8c4:	85 85       	ldd	r24, Z+13	; 0x0d
     8c6:	96 85       	ldd	r25, Z+14	; 0x0e
     8c8:	08 95       	ret

000008ca <CLEDController::clearLeds(int)>:
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <CLEDController::clearLeds(int)+0x6>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <CLEDController::clearLeds(int)+0x8>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <CLEDController::clearLeds(int)+0xa>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	ab 01       	movw	r20, r22
     8da:	1c 82       	std	Y+4, r1	; 0x04
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	1e 82       	std	Y+6, r1	; 0x06
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	1a 82       	std	Y+2, r1	; 0x02
     8f0:	1b 82       	std	Y+3, r1	; 0x03
     8f2:	9e 01       	movw	r18, r28
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	be 01       	movw	r22, r28
     8fa:	6c 5f       	subi	r22, 0xFC	; 252
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	09 95       	icall
     900:	26 96       	adiw	r28, 0x06	; 6
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <myRemapFn(unsigned int, unsigned int)>:
     912:	67 31       	cpi	r22, 0x17	; 23
     914:	71 05       	cpc	r23, r1
     916:	08 f0       	brcs	.+2      	; 0x91a <myRemapFn(unsigned int, unsigned int)+0x8>
     918:	ef c0       	rjmp	.+478    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     91a:	fb 01       	movw	r30, r22
     91c:	ee 56       	subi	r30, 0x6E	; 110
     91e:	fb 4f       	sbci	r31, 0xFB	; 251
     920:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
     924:	a9 04       	cpc	r10, r9
     926:	b4 04       	cpc	r11, r4
     928:	bc 04       	cpc	r11, r12
     92a:	c9 04       	cpc	r12, r9
     92c:	d4 04       	cpc	r13, r4
     92e:	db 04       	cpc	r13, r11
     930:	e2 04       	cpc	r14, r2
     932:	e9 04       	cpc	r14, r9
     934:	f3 04       	cpc	r15, r3
     936:	fd 04       	cpc	r15, r13
     938:	07 05       	cpc	r16, r7
     93a:	11 05       	cpc	r17, r1
     93c:	1b 05       	cpc	r17, r11
     93e:	25 05       	cpc	r18, r5
     940:	2f 05       	cpc	r18, r15
     942:	37 05       	cpc	r19, r7
     944:	3f 05       	cpc	r19, r15
     946:	46 05       	cpc	r20, r6
     948:	4d 05       	cpc	r20, r13
     94a:	54 05       	cpc	r21, r4
     94c:	5e 05       	cpc	r21, r14
     94e:	68 05       	cpc	r22, r8
     950:	72 05       	cpc	r23, r2
     952:	04 97       	sbiw	r24, 0x04	; 4
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	08 f0       	brcs	.+2      	; 0x95c <myRemapFn(unsigned int, unsigned int)+0x4a>
     95a:	ce c0       	rjmp	.+412    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     95c:	86 59       	subi	r24, 0x96	; 150
     95e:	9a 4f       	sbci	r25, 0xFA	; 250
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	08 95       	ret
     968:	02 97       	sbiw	r24, 0x02	; 2
     96a:	86 30       	cpi	r24, 0x06	; 6
     96c:	91 05       	cpc	r25, r1
     96e:	08 f0       	brcs	.+2      	; 0x972 <myRemapFn(unsigned int, unsigned int)+0x60>
     970:	c3 c0       	rjmp	.+390    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     972:	8c 59       	subi	r24, 0x9C	; 156
     974:	9a 4f       	sbci	r25, 0xFA	; 250
     976:	f4 cf       	rjmp	.-24     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	83 31       	cpi	r24, 0x13	; 19
     97c:	91 05       	cpc	r25, r1
     97e:	08 f0       	brcs	.+2      	; 0x982 <myRemapFn(unsigned int, unsigned int)+0x70>
     980:	bb c0       	rjmp	.+374    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	fc 01       	movw	r30, r24
     988:	e2 5c       	subi	r30, 0xC2	; 194
     98a:	fa 4f       	sbci	r31, 0xFA	; 250
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	08 95       	ret
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	85 31       	cpi	r24, 0x15	; 21
     996:	91 05       	cpc	r25, r1
     998:	08 f0       	brcs	.+2      	; 0x99c <myRemapFn(unsigned int, unsigned int)+0x8a>
     99a:	ae c0       	rjmp	.+348    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	fc 01       	movw	r30, r24
     9a2:	ec 5e       	subi	r30, 0xEC	; 236
     9a4:	fa 4f       	sbci	r31, 0xFA	; 250
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9a8:	84 31       	cpi	r24, 0x14	; 20
     9aa:	91 05       	cpc	r25, r1
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <myRemapFn(unsigned int, unsigned int)+0x9e>
     9ae:	a4 c0       	rjmp	.+328    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9b0:	80 50       	subi	r24, 0x00	; 0
     9b2:	9b 4f       	sbci	r25, 0xFB	; 251
     9b4:	d5 cf       	rjmp	.-86     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9b6:	84 31       	cpi	r24, 0x14	; 20
     9b8:	91 05       	cpc	r25, r1
     9ba:	08 f0       	brcs	.+2      	; 0x9be <myRemapFn(unsigned int, unsigned int)+0xac>
     9bc:	9d c0       	rjmp	.+314    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9be:	84 51       	subi	r24, 0x14	; 20
     9c0:	9b 4f       	sbci	r25, 0xFB	; 251
     9c2:	ce cf       	rjmp	.-100    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9c4:	8f 30       	cpi	r24, 0x0F	; 15
     9c6:	91 05       	cpc	r25, r1
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <myRemapFn(unsigned int, unsigned int)+0xba>
     9ca:	96 c0       	rjmp	.+300    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9cc:	83 52       	subi	r24, 0x23	; 35
     9ce:	9b 4f       	sbci	r25, 0xFB	; 251
     9d0:	c7 cf       	rjmp	.-114    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9d2:	8f 30       	cpi	r24, 0x0F	; 15
     9d4:	91 05       	cpc	r25, r1
     9d6:	08 f0       	brcs	.+2      	; 0x9da <myRemapFn(unsigned int, unsigned int)+0xc8>
     9d8:	8f c0       	rjmp	.+286    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	fc 01       	movw	r30, r24
     9e0:	e1 54       	subi	r30, 0x41	; 65
     9e2:	fb 4f       	sbci	r31, 0xFB	; 251
     9e4:	d3 cf       	rjmp	.-90     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e6:	8f 30       	cpi	r24, 0x0F	; 15
     9e8:	91 05       	cpc	r25, r1
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <myRemapFn(unsigned int, unsigned int)+0xdc>
     9ec:	85 c0       	rjmp	.+266    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	ef 55       	subi	r30, 0x5F	; 95
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	c9 cf       	rjmp	.-110    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9fa:	8f 30       	cpi	r24, 0x0F	; 15
     9fc:	91 05       	cpc	r25, r1
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <myRemapFn(unsigned int, unsigned int)+0xf0>
     a00:	7b c0       	rjmp	.+246    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	fc 01       	movw	r30, r24
     a08:	ed 57       	subi	r30, 0x7D	; 125
     a0a:	fb 4f       	sbci	r31, 0xFB	; 251
     a0c:	bf cf       	rjmp	.-130    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a0e:	8f 30       	cpi	r24, 0x0F	; 15
     a10:	91 05       	cpc	r25, r1
     a12:	08 f0       	brcs	.+2      	; 0xa16 <myRemapFn(unsigned int, unsigned int)+0x104>
     a14:	71 c0       	rjmp	.+226    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	fc 01       	movw	r30, r24
     a1c:	eb 59       	subi	r30, 0x9B	; 155
     a1e:	fb 4f       	sbci	r31, 0xFB	; 251
     a20:	b5 cf       	rjmp	.-150    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a22:	8f 30       	cpi	r24, 0x0F	; 15
     a24:	91 05       	cpc	r25, r1
     a26:	08 f0       	brcs	.+2      	; 0xa2a <myRemapFn(unsigned int, unsigned int)+0x118>
     a28:	67 c0       	rjmp	.+206    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	fc 01       	movw	r30, r24
     a30:	e9 5b       	subi	r30, 0xB9	; 185
     a32:	fb 4f       	sbci	r31, 0xFB	; 251
     a34:	ab cf       	rjmp	.-170    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a36:	8f 30       	cpi	r24, 0x0F	; 15
     a38:	91 05       	cpc	r25, r1
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <myRemapFn(unsigned int, unsigned int)+0x12c>
     a3c:	5d c0       	rjmp	.+186    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	fc 01       	movw	r30, r24
     a44:	e7 5d       	subi	r30, 0xD7	; 215
     a46:	fb 4f       	sbci	r31, 0xFB	; 251
     a48:	a1 cf       	rjmp	.-190    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a4a:	8f 30       	cpi	r24, 0x0F	; 15
     a4c:	91 05       	cpc	r25, r1
     a4e:	08 f0       	brcs	.+2      	; 0xa52 <myRemapFn(unsigned int, unsigned int)+0x140>
     a50:	53 c0       	rjmp	.+166    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	e5 5f       	subi	r30, 0xF5	; 245
     a5a:	fb 4f       	sbci	r31, 0xFB	; 251
     a5c:	97 cf       	rjmp	.-210    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	8e 30       	cpi	r24, 0x0E	; 14
     a62:	91 05       	cpc	r25, r1
     a64:	08 f0       	brcs	.+2      	; 0xa68 <myRemapFn(unsigned int, unsigned int)+0x156>
     a66:	48 c0       	rjmp	.+144    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a68:	83 50       	subi	r24, 0x03	; 3
     a6a:	9c 4f       	sbci	r25, 0xFC	; 252
     a6c:	79 cf       	rjmp	.-270    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a6e:	02 97       	sbiw	r24, 0x02	; 2
     a70:	81 31       	cpi	r24, 0x11	; 17
     a72:	91 05       	cpc	r25, r1
     a74:	08 f0       	brcs	.+2      	; 0xa78 <myRemapFn(unsigned int, unsigned int)+0x166>
     a76:	40 c0       	rjmp	.+128    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a78:	84 51       	subi	r24, 0x14	; 20
     a7a:	9c 4f       	sbci	r25, 0xFC	; 252
     a7c:	71 cf       	rjmp	.-286    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	82 31       	cpi	r24, 0x12	; 18
     a82:	91 05       	cpc	r25, r1
     a84:	c8 f5       	brcc	.+114    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a86:	86 52       	subi	r24, 0x26	; 38
     a88:	9c 4f       	sbci	r25, 0xFC	; 252
     a8a:	6a cf       	rjmp	.-300    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	83 31       	cpi	r24, 0x13	; 19
     a90:	91 05       	cpc	r25, r1
     a92:	90 f5       	brcc	.+100    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a94:	89 53       	subi	r24, 0x39	; 57
     a96:	9c 4f       	sbci	r25, 0xFC	; 252
     a98:	63 cf       	rjmp	.-314    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	84 31       	cpi	r24, 0x14	; 20
     a9e:	91 05       	cpc	r25, r1
     aa0:	58 f5       	brcc	.+86     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aa2:	8d 54       	subi	r24, 0x4D	; 77
     aa4:	9c 4f       	sbci	r25, 0xFC	; 252
     aa6:	5c cf       	rjmp	.-328    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	83 31       	cpi	r24, 0x13	; 19
     aac:	91 05       	cpc	r25, r1
     aae:	20 f5       	brcc	.+72     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fc 01       	movw	r30, r24
     ab6:	e3 57       	subi	r30, 0x73	; 115
     ab8:	fc 4f       	sbci	r31, 0xFC	; 252
     aba:	68 cf       	rjmp	.-304    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     abc:	02 97       	sbiw	r24, 0x02	; 2
     abe:	87 30       	cpi	r24, 0x07	; 7
     ac0:	91 05       	cpc	r25, r1
     ac2:	d0 f4       	brcc	.+52     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	fc 01       	movw	r30, r24
     aca:	e1 58       	subi	r30, 0x81	; 129
     acc:	fc 4f       	sbci	r31, 0xFC	; 252
     ace:	5e cf       	rjmp	.-324    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ad0:	03 97       	sbiw	r24, 0x03	; 3
     ad2:	85 30       	cpi	r24, 0x05	; 5
     ad4:	91 05       	cpc	r25, r1
     ad6:	80 f4       	brcc	.+32     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	fc 01       	movw	r30, r24
     ade:	eb 58       	subi	r30, 0x8B	; 139
     ae0:	fc 4f       	sbci	r31, 0xFC	; 252
     ae2:	54 cf       	rjmp	.-344    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ae4:	04 97       	sbiw	r24, 0x04	; 4
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	91 05       	cpc	r25, r1
     aea:	30 f4       	brcc	.+12     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	fc 01       	movw	r30, r24
     af2:	e1 59       	subi	r30, 0x91	; 145
     af4:	fc 4f       	sbci	r31, 0xFC	; 252
     af6:	4a cf       	rjmp	.-364    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     af8:	8c e2       	ldi	r24, 0x2C	; 44
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	08 95       	ret

00000afe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     afe:	80 e9       	ldi	r24, 0x90	; 144
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	08 95       	ret

00000b04 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     b04:	3a 9a       	sbi	0x07, 2	; 7
     b06:	08 95       	ret

00000b08 <Print::write(char const*)>:
     b08:	fb 01       	movw	r30, r22
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <Print::write(char const*)+0x2>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	af 01       	movw	r20, r30
     b14:	46 1b       	sub	r20, r22
     b16:	57 0b       	sbc	r21, r23
     b18:	dc 01       	movw	r26, r24
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	02 80       	ldd	r0, Z+2	; 0x02
     b20:	f3 81       	ldd	r31, Z+3	; 0x03
     b22:	e0 2d       	mov	r30, r0
     b24:	09 94       	ijmp

00000b26 <Print::print(char const*)>:
     b26:	f0 cf       	rjmp	.-32     	; 0xb08 <Print::write(char const*)>

00000b28 <Print::println(char const*)>:
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	ec 01       	movw	r28, r24
     b32:	ea df       	rcall	.-44     	; 0xb08 <Print::write(char const*)>
     b34:	8c 01       	movw	r16, r24
     b36:	ce 01       	movw	r24, r28
     b38:	0e 94 7b 4c 	call	0x98f6	; 0x98f6 <Print::println()>
     b3c:	80 0f       	add	r24, r16
     b3e:	91 1f       	adc	r25, r17
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	08 95       	ret

00000b4a <Print::println(unsigned char)>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	ec 01       	movw	r28, r24
     b54:	46 2f       	mov	r20, r22
     b56:	50 e0       	ldi	r21, 0x00	; 0
     b58:	70 e0       	ldi	r23, 0x00	; 0
     b5a:	60 e0       	ldi	r22, 0x00	; 0
     b5c:	20 e0       	ldi	r18, 0x00	; 0
     b5e:	0e 94 95 4c 	call	0x992a	; 0x992a <Print::printNumberDec(unsigned long, unsigned char)>
     b62:	8c 01       	movw	r16, r24
     b64:	ce 01       	movw	r24, r28
     b66:	0e 94 7b 4c 	call	0x98f6	; 0x98f6 <Print::println()>
     b6a:	80 0f       	add	r24, r16
     b6c:	91 1f       	adc	r25, r17
     b6e:	df 91       	pop	r29
     b70:	cf 91       	pop	r28
     b72:	1f 91       	pop	r17
     b74:	0f 91       	pop	r16
     b76:	08 95       	ret

00000b78 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     b78:	0f 93       	push	r16
     b7a:	1f 93       	push	r17
     b7c:	dc 01       	movw	r26, r24
     b7e:	ac 01       	movw	r20, r24
     b80:	40 5d       	subi	r20, 0xD0	; 208
     b82:	5f 4f       	sbci	r21, 0xFF	; 255
     b84:	fb 01       	movw	r30, r22
     b86:	05 91       	lpm	r16, Z+
     b88:	15 91       	lpm	r17, Z+
     b8a:	25 91       	lpm	r18, Z+
     b8c:	34 91       	lpm	r19, Z
     b8e:	2c 93       	st	X, r18
     b90:	11 96       	adiw	r26, 0x01	; 1
     b92:	1c 93       	st	X, r17
     b94:	11 97       	sbiw	r26, 0x01	; 1
     b96:	12 96       	adiw	r26, 0x02	; 2
     b98:	0c 93       	st	X, r16
     b9a:	12 97       	sbiw	r26, 0x02	; 2
     b9c:	6c 5f       	subi	r22, 0xFC	; 252
     b9e:	7f 4f       	sbci	r23, 0xFF	; 255
     ba0:	13 96       	adiw	r26, 0x03	; 3
     ba2:	a4 17       	cp	r26, r20
     ba4:	b5 07       	cpc	r27, r21
     ba6:	71 f7       	brne	.-36     	; 0xb84 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	08 95       	ret

00000bae <CFastLED::show()>:
     bae:	fc 01       	movw	r30, r24
     bb0:	60 81       	ld	r22, Z
     bb2:	0c 94 c6 41 	jmp	0x838c	; 0x838c <CFastLED::show(unsigned char)>

00000bb6 <CFastLED::showColor(CRGB const&)>:
     bb6:	fc 01       	movw	r30, r24
     bb8:	40 81       	ld	r20, Z
     bba:	0c 94 56 42 	jmp	0x84ac	; 0x84ac <CFastLED::showColor(CRGB const&, unsigned char)>

00000bbe <Framebuffer_GFX::clear()>:
     bbe:	dc 01       	movw	r26, r24
     bc0:	ed 91       	ld	r30, X+
     bc2:	fc 91       	ld	r31, X
     bc4:	02 a0       	ldd	r0, Z+34	; 0x22
     bc6:	f3 a1       	ldd	r31, Z+35	; 0x23
     bc8:	e0 2d       	mov	r30, r0
     bca:	70 e0       	ldi	r23, 0x00	; 0
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	09 94       	ijmp

00000bd0 <getRandomColorValue()>:
     bd0:	24 e0       	ldi	r18, 0x04	; 4
     bd2:	30 e0       	ldi	r19, 0x00	; 0
     bd4:	40 e0       	ldi	r20, 0x00	; 0
     bd6:	50 e0       	ldi	r21, 0x00	; 0
     bd8:	61 e0       	ldi	r22, 0x01	; 1
     bda:	70 e0       	ldi	r23, 0x00	; 0
     bdc:	80 e0       	ldi	r24, 0x00	; 0
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
     be4:	62 30       	cpi	r22, 0x02	; 2
     be6:	71 05       	cpc	r23, r1
     be8:	31 f0       	breq	.+12     	; 0xbf6 <getRandomColorValue()+0x26>
     bea:	63 30       	cpi	r22, 0x03	; 3
     bec:	71 05       	cpc	r23, r1
     bee:	31 f0       	breq	.+12     	; 0xbfc <getRandomColorValue()+0x2c>
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	80 e0       	ldi	r24, 0x00	; 0
     bf4:	08 95       	ret
     bf6:	8f e7       	ldi	r24, 0x7F	; 127
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	08 95       	ret
     bfc:	8f ef       	ldi	r24, 0xFF	; 255
     bfe:	90 e0       	ldi	r25, 0x00	; 0
     c00:	08 95       	ret

00000c02 <getRandomColor()>:
     c02:	27 e0       	ldi	r18, 0x07	; 7
     c04:	30 e0       	ldi	r19, 0x00	; 0
     c06:	40 e0       	ldi	r20, 0x00	; 0
     c08:	50 e0       	ldi	r21, 0x00	; 0
     c0a:	61 e0       	ldi	r22, 0x01	; 1
     c0c:	70 e0       	ldi	r23, 0x00	; 0
     c0e:	80 e0       	ldi	r24, 0x00	; 0
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
     c16:	61 50       	subi	r22, 0x01	; 1
     c18:	71 09       	sbc	r23, r1
     c1a:	67 30       	cpi	r22, 0x07	; 7
     c1c:	71 05       	cpc	r23, r1
     c1e:	40 f4       	brcc	.+16     	; 0xc30 <getRandomColor()+0x2e>
     c20:	66 0f       	add	r22, r22
     c22:	77 1f       	adc	r23, r23
     c24:	fb 01       	movw	r30, r22
     c26:	ef 59       	subi	r30, 0x9F	; 159
     c28:	fc 4f       	sbci	r31, 0xFC	; 252
     c2a:	80 81       	ld	r24, Z
     c2c:	91 81       	ldd	r25, Z+1	; 0x01
     c2e:	08 95       	ret
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	08 95       	ret

00000c36 <getRandomColorIncludingBlack()>:
     c36:	29 e0       	ldi	r18, 0x09	; 9
     c38:	30 e0       	ldi	r19, 0x00	; 0
     c3a:	40 e0       	ldi	r20, 0x00	; 0
     c3c:	50 e0       	ldi	r21, 0x00	; 0
     c3e:	61 e0       	ldi	r22, 0x01	; 1
     c40:	70 e0       	ldi	r23, 0x00	; 0
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
     c4a:	61 50       	subi	r22, 0x01	; 1
     c4c:	71 09       	sbc	r23, r1
     c4e:	67 30       	cpi	r22, 0x07	; 7
     c50:	71 05       	cpc	r23, r1
     c52:	40 f4       	brcc	.+16     	; 0xc64 <getRandomColorIncludingBlack()+0x2e>
     c54:	66 0f       	add	r22, r22
     c56:	77 1f       	adc	r23, r23
     c58:	fb 01       	movw	r30, r22
     c5a:	ed 5a       	subi	r30, 0xAD	; 173
     c5c:	fc 4f       	sbci	r31, 0xFC	; 252
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	08 95       	ret
     c64:	90 e0       	ldi	r25, 0x00	; 0
     c66:	80 e0       	ldi	r24, 0x00	; 0
     c68:	08 95       	ret

00000c6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>:
     c6a:	ef 92       	push	r14
     c6c:	ff 92       	push	r15
     c6e:	0f 93       	push	r16
     c70:	1f 93       	push	r17
     c72:	cf 93       	push	r28
     c74:	df 93       	push	r29
     c76:	7c 01       	movw	r14, r24
     c78:	16 2f       	mov	r17, r22
     c7a:	ea 01       	movw	r28, r20
     c7c:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     c80:	81 11       	cpse	r24, r1
     c82:	12 c0       	rjmp	.+36     	; 0xca8 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x3e>
     c84:	61 e0       	ldi	r22, 0x01	; 1
     c86:	8c ec       	ldi	r24, 0xCC	; 204
     c88:	90 e1       	ldi	r25, 0x10	; 16
     c8a:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
     c8e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
     c92:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
     c96:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
     c9a:	81 e0       	ldi	r24, 0x01	; 1
     c9c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     ca0:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     ca4:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <progBlingBlingColoring_rounds>
     ca8:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
     cac:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     cb0:	89 2b       	or	r24, r25
     cb2:	49 f4       	brne	.+18     	; 0xcc6 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x5c>
     cb4:	8d df       	rcall	.-230    	; 0xbd0 <getRandomColorValue()>
     cb6:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     cba:	8a df       	rcall	.-236    	; 0xbd0 <getRandomColorValue()>
     cbc:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     cc0:	87 df       	rcall	.-242    	; 0xbd0 <getRandomColorValue()>
     cc2:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     cc6:	10 91 73 0a 	lds	r17, 0x0A73	; 0x800a73 <b>
     cca:	00 91 74 0a 	lds	r16, 0x0A74	; 0x800a74 <g>
     cce:	f0 90 75 0a 	lds	r15, 0x0A75	; 0x800a75 <r>
     cd2:	26 e1       	ldi	r18, 0x16	; 22
     cd4:	31 e0       	ldi	r19, 0x01	; 1
     cd6:	40 e0       	ldi	r20, 0x00	; 0
     cd8:	50 e0       	ldi	r21, 0x00	; 0
     cda:	60 e0       	ldi	r22, 0x00	; 0
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	cb 01       	movw	r24, r22
     ce0:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
     ce4:	fb 01       	movw	r30, r22
     ce6:	ee 0f       	add	r30, r30
     ce8:	ff 1f       	adc	r31, r31
     cea:	e6 0f       	add	r30, r22
     cec:	f7 1f       	adc	r31, r23
     cee:	e3 53       	subi	r30, 0x33	; 51
     cf0:	f5 4f       	sbci	r31, 0xF5	; 245
     cf2:	f0 82       	st	Z, r15
     cf4:	01 83       	std	Z+1, r16	; 0x01
     cf6:	12 83       	std	Z+2, r17	; 0x02
     cf8:	23 e0       	ldi	r18, 0x03	; 3
     cfa:	30 e0       	ldi	r19, 0x00	; 0
     cfc:	40 e0       	ldi	r20, 0x00	; 0
     cfe:	50 e0       	ldi	r21, 0x00	; 0
     d00:	60 e0       	ldi	r22, 0x00	; 0
     d02:	70 e0       	ldi	r23, 0x00	; 0
     d04:	cb 01       	movw	r24, r22
     d06:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
     d0a:	61 30       	cpi	r22, 0x01	; 1
     d0c:	71 05       	cpc	r23, r1
     d0e:	81 05       	cpc	r24, r1
     d10:	91 05       	cpc	r25, r1
     d12:	99 f4       	brne	.+38     	; 0xd3a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0xd0>
     d14:	26 e1       	ldi	r18, 0x16	; 22
     d16:	31 e0       	ldi	r19, 0x01	; 1
     d18:	40 e0       	ldi	r20, 0x00	; 0
     d1a:	50 e0       	ldi	r21, 0x00	; 0
     d1c:	60 e0       	ldi	r22, 0x00	; 0
     d1e:	70 e0       	ldi	r23, 0x00	; 0
     d20:	cb 01       	movw	r24, r22
     d22:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
     d26:	fb 01       	movw	r30, r22
     d28:	ee 0f       	add	r30, r30
     d2a:	ff 1f       	adc	r31, r31
     d2c:	e6 0f       	add	r30, r22
     d2e:	f7 1f       	adc	r31, r23
     d30:	e3 53       	subi	r30, 0x33	; 51
     d32:	f5 4f       	sbci	r31, 0xF5	; 245
     d34:	10 82       	st	Z, r1
     d36:	11 82       	std	Z+1, r1	; 0x01
     d38:	12 82       	std	Z+2, r1	; 0x02
     d3a:	8c ec       	ldi	r24, 0xCC	; 204
     d3c:	90 e1       	ldi	r25, 0x10	; 16
     d3e:	37 df       	rcall	.-402    	; 0xbae <CFastLED::show()>
     d40:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     d44:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     d48:	8c 17       	cp	r24, r28
     d4a:	9d 07       	cpc	r25, r29
     d4c:	d0 f0       	brcs	.+52     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
     d4e:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     d52:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     d56:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
     d5a:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     d5e:	01 96       	adiw	r24, 0x01	; 1
     d60:	84 30       	cpi	r24, 0x04	; 4
     d62:	91 05       	cpc	r25, r1
     d64:	a9 f0       	breq	.+42     	; 0xd90 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x126>
     d66:	90 93 72 0a 	sts	0x0A72, r25	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     d6a:	80 93 71 0a 	sts	0x0A71, r24	; 0x800a71 <progBlingBlingColoring_rounds>
     d6e:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
     d72:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	69 f4       	brne	.+26     	; 0xd96 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x12c>
     d7c:	29 df       	rcall	.-430    	; 0xbd0 <getRandomColorValue()>
     d7e:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	08 95       	ret
     d90:	81 e0       	ldi	r24, 0x01	; 1
     d92:	90 e0       	ldi	r25, 0x00	; 0
     d94:	e8 cf       	rjmp	.-48     	; 0xd66 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0xfc>
     d96:	82 30       	cpi	r24, 0x02	; 2
     d98:	91 05       	cpc	r25, r1
     d9a:	21 f4       	brne	.+8      	; 0xda4 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x13a>
     d9c:	19 df       	rcall	.-462    	; 0xbd0 <getRandomColorValue()>
     d9e:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     da2:	ef cf       	rjmp	.-34     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
     da4:	03 97       	sbiw	r24, 0x03	; 3
     da6:	69 f7       	brne	.-38     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
     da8:	13 df       	rcall	.-474    	; 0xbd0 <getRandomColorValue()>
     daa:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     dae:	e9 cf       	rjmp	.-46     	; 0xd82 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>

00000db0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>:
     db0:	cf 92       	push	r12
     db2:	df 92       	push	r13
     db4:	ef 92       	push	r14
     db6:	ff 92       	push	r15
     db8:	0f 93       	push	r16
     dba:	1f 93       	push	r17
     dbc:	cf 93       	push	r28
     dbe:	df 93       	push	r29
     dc0:	6c 01       	movw	r12, r24
     dc2:	d6 2f       	mov	r29, r22
     dc4:	14 2f       	mov	r17, r20
     dc6:	c2 2f       	mov	r28, r18
     dc8:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     dcc:	81 11       	cpse	r24, r1
     dce:	10 c0       	rjmp	.+32     	; 0xdf0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x40>
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	8c ec       	ldi	r24, 0xCC	; 204
     dd4:	90 e1       	ldi	r25, 0x10	; 16
     dd6:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
     dda:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     dde:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     de2:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     dec:	d0 93 a8 0a 	sts	0x0AA8, r29	; 0x800aa8 <actualAnzahlLEDs>
     df0:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     df4:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     df8:	8e 15       	cp	r24, r14
     dfa:	9f 05       	cpc	r25, r15
     dfc:	90 f0       	brcs	.+36     	; 0xe22 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
     dfe:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     e02:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     e06:	cc 23       	and	r28, r28
     e08:	61 f0       	breq	.+24     	; 0xe22 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
     e0a:	20 91 a8 0a 	lds	r18, 0x0AA8	; 0x800aa8 <actualAnzahlLEDs>
     e0e:	42 2f       	mov	r20, r18
     e10:	4c 0f       	add	r20, r28
     e12:	55 27       	eor	r21, r21
     e14:	55 1f       	adc	r21, r21
     e16:	04 17       	cp	r16, r20
     e18:	15 06       	cpc	r1, r21
     e1a:	1c f0       	brlt	.+6      	; 0xe22 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
     e1c:	2c 0f       	add	r18, r28
     e1e:	20 93 a8 0a 	sts	0x0AA8, r18	; 0x800aa8 <actualAnzahlLEDs>
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	8c ec       	ldi	r24, 0xCC	; 204
     e26:	90 e1       	ldi	r25, 0x10	; 16
     e28:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
     e2c:	8f ef       	ldi	r24, 0xFF	; 255
     e2e:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
     e32:	d0 e0       	ldi	r29, 0x00	; 0
     e34:	c0 e0       	ldi	r28, 0x00	; 0
     e36:	80 91 a8 0a 	lds	r24, 0x0AA8	; 0x800aa8 <actualAnzahlLEDs>
     e3a:	8c 17       	cp	r24, r28
     e3c:	1d 06       	cpc	r1, r29
     e3e:	e1 f0       	breq	.+56     	; 0xe78 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0xc8>
     e40:	dc f0       	brlt	.+54     	; 0xe78 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0xc8>
     e42:	c6 de       	rcall	.-628    	; 0xbd0 <getRandomColorValue()>
     e44:	18 2f       	mov	r17, r24
     e46:	c4 de       	rcall	.-632    	; 0xbd0 <getRandomColorValue()>
     e48:	08 2f       	mov	r16, r24
     e4a:	c2 de       	rcall	.-636    	; 0xbd0 <getRandomColorValue()>
     e4c:	f8 2e       	mov	r15, r24
     e4e:	26 e1       	ldi	r18, 0x16	; 22
     e50:	31 e0       	ldi	r19, 0x01	; 1
     e52:	40 e0       	ldi	r20, 0x00	; 0
     e54:	50 e0       	ldi	r21, 0x00	; 0
     e56:	60 e0       	ldi	r22, 0x00	; 0
     e58:	70 e0       	ldi	r23, 0x00	; 0
     e5a:	cb 01       	movw	r24, r22
     e5c:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
     e60:	fb 01       	movw	r30, r22
     e62:	ee 0f       	add	r30, r30
     e64:	ff 1f       	adc	r31, r31
     e66:	e6 0f       	add	r30, r22
     e68:	f7 1f       	adc	r31, r23
     e6a:	e3 53       	subi	r30, 0x33	; 51
     e6c:	f5 4f       	sbci	r31, 0xF5	; 245
     e6e:	f0 82       	st	Z, r15
     e70:	01 83       	std	Z+1, r16	; 0x01
     e72:	12 83       	std	Z+2, r17	; 0x02
     e74:	21 96       	adiw	r28, 0x01	; 1
     e76:	df cf       	rjmp	.-66     	; 0xe36 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x86>
     e78:	8c ec       	ldi	r24, 0xCC	; 204
     e7a:	90 e1       	ldi	r25, 0x10	; 16
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	90 ce       	rjmp	.-736    	; 0xbae <CFastLED::show()>

00000e8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>:
     e8e:	ef 92       	push	r14
     e90:	ff 92       	push	r15
     e92:	0f 93       	push	r16
     e94:	f1 2c       	mov	r15, r1
     e96:	e1 2c       	mov	r14, r1
     e98:	00 e0       	ldi	r16, 0x00	; 0
     e9a:	20 e0       	ldi	r18, 0x00	; 0
     e9c:	89 df       	rcall	.-238    	; 0xdb0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
     e9e:	0f 91       	pop	r16
     ea0:	ff 90       	pop	r15
     ea2:	ef 90       	pop	r14
     ea4:	08 95       	ret

00000ea6 <progFullColors(unsigned int, unsigned char, unsigned int)>:
     ea6:	cf 92       	push	r12
     ea8:	df 92       	push	r13
     eaa:	ff 92       	push	r15
     eac:	0f 93       	push	r16
     eae:	1f 93       	push	r17
     eb0:	cf 93       	push	r28
     eb2:	df 93       	push	r29
     eb4:	00 d0       	rcall	.+0      	; 0xeb6 <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     eb6:	1f 92       	push	r1
     eb8:	cd b7       	in	r28, 0x3d	; 61
     eba:	de b7       	in	r29, 0x3e	; 62
     ebc:	6c 01       	movw	r12, r24
     ebe:	f6 2e       	mov	r15, r22
     ec0:	8a 01       	movw	r16, r20
     ec2:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     ec6:	81 11       	cpse	r24, r1
     ec8:	12 c0       	rjmp	.+36     	; 0xeee <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	8c ec       	ldi	r24, 0xCC	; 204
     ece:	90 e1       	ldi	r25, 0x10	; 16
     ed0:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
     ed4:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     ed8:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     edc:	f0 92 b8 0a 	sts	0x0AB8, r15	; 0x800ab8 <nextSongPart>
     ee0:	81 e0       	ldi	r24, 0x01	; 1
     ee2:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     ee6:	10 93 c0 0a 	sts	0x0AC0, r17	; 0x800ac0 <millisCounterTimer+0x1>
     eea:	00 93 bf 0a 	sts	0x0ABF, r16	; 0x800abf <millisCounterTimer>
     eee:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     ef2:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     ef6:	80 17       	cp	r24, r16
     ef8:	91 07       	cpc	r25, r17
     efa:	78 f1       	brcs	.+94     	; 0xf5a <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     efc:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     f00:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     f04:	65 de       	rcall	.-822    	; 0xbd0 <getRandomColorValue()>
     f06:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     f0a:	62 de       	rcall	.-828    	; 0xbd0 <getRandomColorValue()>
     f0c:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     f10:	5f de       	rcall	.-834    	; 0xbd0 <getRandomColorValue()>
     f12:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     f16:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <r>
     f1a:	91 11       	cpse	r25, r1
     f1c:	0f c0       	rjmp	.+30     	; 0xf3c <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     f1e:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <g>
     f22:	91 11       	cpse	r25, r1
     f24:	0b c0       	rjmp	.+22     	; 0xf3c <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     f26:	81 11       	cpse	r24, r1
     f28:	09 c0       	rjmp	.+18     	; 0xf3c <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     f2a:	52 de       	rcall	.-860    	; 0xbd0 <getRandomColorValue()>
     f2c:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
     f30:	4f de       	rcall	.-866    	; 0xbd0 <getRandomColorValue()>
     f32:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
     f36:	4c de       	rcall	.-872    	; 0xbd0 <getRandomColorValue()>
     f38:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
     f3c:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <b>
     f40:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <g>
     f44:	20 91 75 0a 	lds	r18, 0x0A75	; 0x800a75 <r>
     f48:	29 83       	std	Y+1, r18	; 0x01
     f4a:	9a 83       	std	Y+2, r25	; 0x02
     f4c:	8b 83       	std	Y+3, r24	; 0x03
     f4e:	be 01       	movw	r22, r28
     f50:	6f 5f       	subi	r22, 0xFF	; 255
     f52:	7f 4f       	sbci	r23, 0xFF	; 255
     f54:	8c ec       	ldi	r24, 0xCC	; 204
     f56:	90 e1       	ldi	r25, 0x10	; 16
     f58:	2e de       	rcall	.-932    	; 0xbb6 <CFastLED::showColor(CRGB const&)>
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	0f 90       	pop	r0
     f60:	df 91       	pop	r29
     f62:	cf 91       	pop	r28
     f64:	1f 91       	pop	r17
     f66:	0f 91       	pop	r16
     f68:	ff 90       	pop	r15
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	08 95       	ret

00000f70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     f70:	af 92       	push	r10
     f72:	bf 92       	push	r11
     f74:	cf 92       	push	r12
     f76:	df 92       	push	r13
     f78:	ef 92       	push	r14
     f7a:	ff 92       	push	r15
     f7c:	0f 93       	push	r16
     f7e:	1f 93       	push	r17
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	00 d0       	rcall	.+0      	; 0xf86 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     f86:	1f 92       	push	r1
     f88:	cd b7       	in	r28, 0x3d	; 61
     f8a:	de b7       	in	r29, 0x3e	; 62
     f8c:	5c 01       	movw	r10, r24
     f8e:	f6 2e       	mov	r15, r22
     f90:	6a 01       	movw	r12, r20
     f92:	12 2f       	mov	r17, r18
     f94:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     f98:	81 11       	cpse	r24, r1
     f9a:	12 c0       	rjmp	.+36     	; 0xfc0 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     f9c:	61 e0       	ldi	r22, 0x01	; 1
     f9e:	8c ec       	ldi	r24, 0xCC	; 204
     fa0:	90 e1       	ldi	r25, 0x10	; 16
     fa2:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
     fa6:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     faa:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     fae:	f0 92 b8 0a 	sts	0x0AB8, r15	; 0x800ab8 <nextSongPart>
     fb2:	81 e0       	ldi	r24, 0x01	; 1
     fb4:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
     fb8:	d0 92 c0 0a 	sts	0x0AC0, r13	; 0x800ac0 <millisCounterTimer+0x1>
     fbc:	c0 92 bf 0a 	sts	0x0ABF, r12	; 0x800abf <millisCounterTimer>
     fc0:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
     fc4:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
     fc8:	8c 15       	cp	r24, r12
     fca:	9d 05       	cpc	r25, r13
     fcc:	98 f0       	brcs	.+38     	; 0xff4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     fce:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
     fd2:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
     fd6:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <progStroboIsBlack>
     fda:	88 23       	and	r24, r24
     fdc:	c9 f0       	breq	.+50     	; 0x1010 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     fde:	19 83       	std	Y+1, r17	; 0x01
     fe0:	0a 83       	std	Y+2, r16	; 0x02
     fe2:	eb 82       	std	Y+3, r14	; 0x03
     fe4:	be 01       	movw	r22, r28
     fe6:	6f 5f       	subi	r22, 0xFF	; 255
     fe8:	7f 4f       	sbci	r23, 0xFF	; 255
     fea:	8c ec       	ldi	r24, 0xCC	; 204
     fec:	90 e1       	ldi	r25, 0x10	; 16
     fee:	e3 dd       	rcall	.-1082   	; 0xbb6 <CFastLED::showColor(CRGB const&)>
     ff0:	10 92 c2 0a 	sts	0x0AC2, r1	; 0x800ac2 <progStroboIsBlack>
     ff4:	0f 90       	pop	r0
     ff6:	0f 90       	pop	r0
     ff8:	0f 90       	pop	r0
     ffa:	df 91       	pop	r29
     ffc:	cf 91       	pop	r28
     ffe:	1f 91       	pop	r17
    1000:	0f 91       	pop	r16
    1002:	ff 90       	pop	r15
    1004:	ef 90       	pop	r14
    1006:	df 90       	pop	r13
    1008:	cf 90       	pop	r12
    100a:	bf 90       	pop	r11
    100c:	af 90       	pop	r10
    100e:	08 95       	ret
    1010:	19 82       	std	Y+1, r1	; 0x01
    1012:	1a 82       	std	Y+2, r1	; 0x02
    1014:	1b 82       	std	Y+3, r1	; 0x03
    1016:	be 01       	movw	r22, r28
    1018:	6f 5f       	subi	r22, 0xFF	; 255
    101a:	7f 4f       	sbci	r23, 0xFF	; 255
    101c:	8c ec       	ldi	r24, 0xCC	; 204
    101e:	90 e1       	ldi	r25, 0x10	; 16
    1020:	ca dd       	rcall	.-1132   	; 0xbb6 <CFastLED::showColor(CRGB const&)>
    1022:	81 e0       	ldi	r24, 0x01	; 1
    1024:	80 93 c2 0a 	sts	0x0AC2, r24	; 0x800ac2 <progStroboIsBlack>
    1028:	e5 cf       	rjmp	.-54     	; 0xff4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

0000102a <progMatrixScanner(unsigned int, unsigned char, unsigned int)>:
    102a:	ef 92       	push	r14
    102c:	ff 92       	push	r15
    102e:	0f 93       	push	r16
    1030:	1f 93       	push	r17
    1032:	cf 93       	push	r28
    1034:	df 93       	push	r29
    1036:	7c 01       	movw	r14, r24
    1038:	16 2f       	mov	r17, r22
    103a:	ea 01       	movw	r28, r20
    103c:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1040:	81 11       	cpse	r24, r1
    1042:	0e c0       	rjmp	.+28     	; 0x1060 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x36>
    1044:	61 e0       	ldi	r22, 0x01	; 1
    1046:	8c ec       	ldi	r24, 0xCC	; 204
    1048:	90 e1       	ldi	r25, 0x10	; 16
    104a:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    104e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1052:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1056:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
    105a:	81 e0       	ldi	r24, 0x01	; 1
    105c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1060:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1064:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1068:	8c 17       	cp	r24, r28
    106a:	9d 07       	cpc	r25, r29
    106c:	08 f4       	brcc	.+2      	; 0x1070 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x46>
    106e:	ad c0       	rjmp	.+346    	; 0x11ca <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x1a0>
    1070:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1074:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	8c ec       	ldi	r24, 0xCC	; 204
    107c:	90 e1       	ldi	r25, 0x10	; 16
    107e:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1082:	20 91 ab 0a 	lds	r18, 0x0AAB	; 0x800aab <scannerGoesBack>
    1086:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    108a:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    108e:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1092:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1096:	21 11       	cpse	r18, r1
    1098:	52 c0       	rjmp	.+164    	; 0x113e <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x114>
    109a:	6f 5f       	subi	r22, 0xFF	; 255
    109c:	7f 4f       	sbci	r23, 0xFF	; 255
    109e:	70 93 b1 0a 	sts	0x0AB1, r23	; 0x800ab1 <zaehler+0x1>
    10a2:	60 93 b0 0a 	sts	0x0AB0, r22	; 0x800ab0 <zaehler>
    10a6:	6c 31       	cpi	r22, 0x1C	; 28
    10a8:	71 05       	cpc	r23, r1
    10aa:	1c f0       	brlt	.+6      	; 0x10b2 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x88>
    10ac:	21 e0       	ldi	r18, 0x01	; 1
    10ae:	20 93 ab 0a 	sts	0x0AAB, r18	; 0x800aab <scannerGoesBack>
    10b2:	dc 01       	movw	r26, r24
    10b4:	ed 91       	ld	r30, X+
    10b6:	fc 91       	ld	r31, X
    10b8:	04 a0       	ldd	r0, Z+36	; 0x24
    10ba:	f5 a1       	ldd	r31, Z+37	; 0x25
    10bc:	e0 2d       	mov	r30, r0
    10be:	e1 2c       	mov	r14, r1
    10c0:	58 ef       	ldi	r21, 0xF8	; 248
    10c2:	f5 2e       	mov	r15, r21
    10c4:	07 e1       	ldi	r16, 0x17	; 23
    10c6:	10 e0       	ldi	r17, 0x00	; 0
    10c8:	9b 01       	movw	r18, r22
    10ca:	50 e0       	ldi	r21, 0x00	; 0
    10cc:	40 e0       	ldi	r20, 0x00	; 0
    10ce:	09 95       	icall
    10d0:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    10d4:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    10d8:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    10dc:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    10e0:	61 50       	subi	r22, 0x01	; 1
    10e2:	71 09       	sbc	r23, r1
    10e4:	dc 01       	movw	r26, r24
    10e6:	ed 91       	ld	r30, X+
    10e8:	fc 91       	ld	r31, X
    10ea:	04 a0       	ldd	r0, Z+36	; 0x24
    10ec:	f5 a1       	ldd	r31, Z+37	; 0x25
    10ee:	e0 2d       	mov	r30, r0
    10f0:	ee 24       	eor	r14, r14
    10f2:	ea 94       	dec	r14
    10f4:	fe 2c       	mov	r15, r14
    10f6:	9b 01       	movw	r18, r22
    10f8:	50 e0       	ldi	r21, 0x00	; 0
    10fa:	40 e0       	ldi	r20, 0x00	; 0
    10fc:	09 95       	icall
    10fe:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1102:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1106:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    110a:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    110e:	62 50       	subi	r22, 0x02	; 2
    1110:	71 09       	sbc	r23, r1
    1112:	dc 01       	movw	r26, r24
    1114:	ed 91       	ld	r30, X+
    1116:	fc 91       	ld	r31, X
    1118:	04 a0       	ldd	r0, Z+36	; 0x24
    111a:	f5 a1       	ldd	r31, Z+37	; 0x25
    111c:	e0 2d       	mov	r30, r0
    111e:	e1 2c       	mov	r14, r1
    1120:	b8 ef       	ldi	r27, 0xF8	; 248
    1122:	fb 2e       	mov	r15, r27
    1124:	9b 01       	movw	r18, r22
    1126:	50 e0       	ldi	r21, 0x00	; 0
    1128:	40 e0       	ldi	r20, 0x00	; 0
    112a:	09 95       	icall
    112c:	8c ec       	ldi	r24, 0xCC	; 204
    112e:	90 e1       	ldi	r25, 0x10	; 16
    1130:	df 91       	pop	r29
    1132:	cf 91       	pop	r28
    1134:	1f 91       	pop	r17
    1136:	0f 91       	pop	r16
    1138:	ff 90       	pop	r15
    113a:	ef 90       	pop	r14
    113c:	38 cd       	rjmp	.-1424   	; 0xbae <CFastLED::show()>
    113e:	61 50       	subi	r22, 0x01	; 1
    1140:	71 09       	sbc	r23, r1
    1142:	70 93 b1 0a 	sts	0x0AB1, r23	; 0x800ab1 <zaehler+0x1>
    1146:	60 93 b0 0a 	sts	0x0AB0, r22	; 0x800ab0 <zaehler>
    114a:	6b 3f       	cpi	r22, 0xFB	; 251
    114c:	bf ef       	ldi	r27, 0xFF	; 255
    114e:	7b 07       	cpc	r23, r27
    1150:	14 f4       	brge	.+4      	; 0x1156 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x12c>
    1152:	10 92 ab 0a 	sts	0x0AAB, r1	; 0x800aab <scannerGoesBack>
    1156:	dc 01       	movw	r26, r24
    1158:	ed 91       	ld	r30, X+
    115a:	fc 91       	ld	r31, X
    115c:	04 a0       	ldd	r0, Z+36	; 0x24
    115e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1160:	e0 2d       	mov	r30, r0
    1162:	ee 24       	eor	r14, r14
    1164:	ea 94       	dec	r14
    1166:	fe 2c       	mov	r15, r14
    1168:	07 e1       	ldi	r16, 0x17	; 23
    116a:	10 e0       	ldi	r17, 0x00	; 0
    116c:	9b 01       	movw	r18, r22
    116e:	50 e0       	ldi	r21, 0x00	; 0
    1170:	40 e0       	ldi	r20, 0x00	; 0
    1172:	09 95       	icall
    1174:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1178:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    117c:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    1180:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1184:	61 50       	subi	r22, 0x01	; 1
    1186:	71 09       	sbc	r23, r1
    1188:	dc 01       	movw	r26, r24
    118a:	ed 91       	ld	r30, X+
    118c:	fc 91       	ld	r31, X
    118e:	04 a0       	ldd	r0, Z+36	; 0x24
    1190:	f5 a1       	ldd	r31, Z+37	; 0x25
    1192:	e0 2d       	mov	r30, r0
    1194:	e1 2c       	mov	r14, r1
    1196:	38 ef       	ldi	r19, 0xF8	; 248
    1198:	f3 2e       	mov	r15, r19
    119a:	9b 01       	movw	r18, r22
    119c:	50 e0       	ldi	r21, 0x00	; 0
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	09 95       	icall
    11a2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    11a6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    11aa:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    11ae:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    11b2:	62 50       	subi	r22, 0x02	; 2
    11b4:	71 09       	sbc	r23, r1
    11b6:	dc 01       	movw	r26, r24
    11b8:	ed 91       	ld	r30, X+
    11ba:	fc 91       	ld	r31, X
    11bc:	04 a0       	ldd	r0, Z+36	; 0x24
    11be:	f5 a1       	ldd	r31, Z+37	; 0x25
    11c0:	e0 2d       	mov	r30, r0
    11c2:	ee 24       	eor	r14, r14
    11c4:	ea 94       	dec	r14
    11c6:	fe 2c       	mov	r15, r14
    11c8:	ad cf       	rjmp	.-166    	; 0x1124 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0xfa>
    11ca:	df 91       	pop	r29
    11cc:	cf 91       	pop	r28
    11ce:	1f 91       	pop	r17
    11d0:	0f 91       	pop	r16
    11d2:	ff 90       	pop	r15
    11d4:	ef 90       	pop	r14
    11d6:	08 95       	ret

000011d8 <progMatrixScanner(unsigned int, unsigned char)>:
    11d8:	50 e0       	ldi	r21, 0x00	; 0
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	26 cf       	rjmp	.-436    	; 0x102a <progMatrixScanner(unsigned int, unsigned char, unsigned int)>

000011de <progStern(unsigned int, int, unsigned char)>:
    11de:	8f 92       	push	r8
    11e0:	9f 92       	push	r9
    11e2:	af 92       	push	r10
    11e4:	bf 92       	push	r11
    11e6:	cf 92       	push	r12
    11e8:	df 92       	push	r13
    11ea:	ef 92       	push	r14
    11ec:	ff 92       	push	r15
    11ee:	0f 93       	push	r16
    11f0:	1f 93       	push	r17
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	7c 01       	movw	r14, r24
    11f8:	eb 01       	movw	r28, r22
    11fa:	14 2f       	mov	r17, r20
    11fc:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1200:	81 11       	cpse	r24, r1
    1202:	18 c0       	rjmp	.+48     	; 0x1234 <progStern(unsigned int, int, unsigned char)+0x56>
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	8c ec       	ldi	r24, 0xCC	; 204
    1208:	90 e1       	ldi	r25, 0x10	; 16
    120a:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    120e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1212:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1216:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
    121a:	81 e0       	ldi	r24, 0x01	; 1
    121c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1220:	f0 dc       	rcall	.-1568   	; 0xc02 <getRandomColor()>
    1222:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    1226:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    122a:	eb dc       	rcall	.-1578   	; 0xc02 <getRandomColor()>
    122c:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <col2+0x1>
    1230:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <col2>
    1234:	1c 16       	cp	r1, r28
    1236:	1d 06       	cpc	r1, r29
    1238:	ac f4       	brge	.+42     	; 0x1264 <progStern(unsigned int, int, unsigned char)+0x86>
    123a:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    123e:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1242:	8c 17       	cp	r24, r28
    1244:	9d 07       	cpc	r25, r29
    1246:	70 f0       	brcs	.+28     	; 0x1264 <progStern(unsigned int, int, unsigned char)+0x86>
    1248:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    124c:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1250:	d8 dc       	rcall	.-1616   	; 0xc02 <getRandomColor()>
    1252:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    1256:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    125a:	d3 dc       	rcall	.-1626   	; 0xc02 <getRandomColor()>
    125c:	90 93 c9 0a 	sts	0x0AC9, r25	; 0x800ac9 <col2+0x1>
    1260:	80 93 c8 0a 	sts	0x0AC8, r24	; 0x800ac8 <col2>
    1264:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1268:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    126c:	01 96       	adiw	r24, 0x01	; 1
    126e:	8a 30       	cpi	r24, 0x0A	; 10
    1270:	91 05       	cpc	r25, r1
    1272:	0c f0       	brlt	.+2      	; 0x1276 <progStern(unsigned int, int, unsigned char)+0x98>
    1274:	fc c0       	rjmp	.+504    	; 0x146e <progStern(unsigned int, int, unsigned char)+0x290>
    1276:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    127a:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    127e:	60 e0       	ldi	r22, 0x00	; 0
    1280:	8c ec       	ldi	r24, 0xCC	; 204
    1282:	90 e1       	ldi	r25, 0x10	; 16
    1284:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1288:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    128c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1290:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1294:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1298:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    129c:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    12a0:	9a 01       	movw	r18, r20
    12a2:	26 5f       	subi	r18, 0xF6	; 246
    12a4:	3f 4f       	sbci	r19, 0xFF	; 255
    12a6:	6a e0       	ldi	r22, 0x0A	; 10
    12a8:	a6 2e       	mov	r10, r22
    12aa:	b1 2c       	mov	r11, r1
    12ac:	b5 01       	movw	r22, r10
    12ae:	64 1b       	sub	r22, r20
    12b0:	75 0b       	sbc	r23, r21
    12b2:	dc 01       	movw	r26, r24
    12b4:	ed 91       	ld	r30, X+
    12b6:	fc 91       	ld	r31, X
    12b8:	04 a0       	ldd	r0, Z+36	; 0x24
    12ba:	f5 a1       	ldd	r31, Z+37	; 0x25
    12bc:	e0 2d       	mov	r30, r0
    12be:	06 e1       	ldi	r16, 0x16	; 22
    12c0:	10 e0       	ldi	r17, 0x00	; 0
    12c2:	50 e0       	ldi	r21, 0x00	; 0
    12c4:	40 e0       	ldi	r20, 0x00	; 0
    12c6:	09 95       	icall
    12c8:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    12cc:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    12d0:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    12d4:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    12d8:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    12dc:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    12e0:	9a 01       	movw	r18, r20
    12e2:	25 5f       	subi	r18, 0xF5	; 245
    12e4:	3f 4f       	sbci	r19, 0xFF	; 255
    12e6:	7b e0       	ldi	r23, 0x0B	; 11
    12e8:	87 2e       	mov	r8, r23
    12ea:	91 2c       	mov	r9, r1
    12ec:	b4 01       	movw	r22, r8
    12ee:	64 1b       	sub	r22, r20
    12f0:	75 0b       	sbc	r23, r21
    12f2:	dc 01       	movw	r26, r24
    12f4:	ed 91       	ld	r30, X+
    12f6:	fc 91       	ld	r31, X
    12f8:	04 a0       	ldd	r0, Z+36	; 0x24
    12fa:	f5 a1       	ldd	r31, Z+37	; 0x25
    12fc:	e0 2d       	mov	r30, r0
    12fe:	50 e0       	ldi	r21, 0x00	; 0
    1300:	40 e0       	ldi	r20, 0x00	; 0
    1302:	09 95       	icall
    1304:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1308:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    130c:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1310:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1314:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    1318:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    131c:	e6 e1       	ldi	r30, 0x16	; 22
    131e:	ce 2e       	mov	r12, r30
    1320:	d1 2c       	mov	r13, r1
    1322:	04 1b       	sub	r16, r20
    1324:	15 0b       	sbc	r17, r21
    1326:	4f 5f       	subi	r20, 0xFF	; 255
    1328:	5f 4f       	sbci	r21, 0xFF	; 255
    132a:	dc 01       	movw	r26, r24
    132c:	ed 91       	ld	r30, X+
    132e:	fc 91       	ld	r31, X
    1330:	04 a0       	ldd	r0, Z+36	; 0x24
    1332:	f5 a1       	ldd	r31, Z+37	; 0x25
    1334:	e0 2d       	mov	r30, r0
    1336:	25 e1       	ldi	r18, 0x15	; 21
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	60 e0       	ldi	r22, 0x00	; 0
    133e:	09 95       	icall
    1340:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1344:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1348:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    134c:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1350:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    1354:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    1358:	c5 e1       	ldi	r28, 0x15	; 21
    135a:	d0 e0       	ldi	r29, 0x00	; 0
    135c:	8e 01       	movw	r16, r28
    135e:	04 1b       	sub	r16, r20
    1360:	15 0b       	sbc	r17, r21
    1362:	dc 01       	movw	r26, r24
    1364:	ed 91       	ld	r30, X+
    1366:	fc 91       	ld	r31, X
    1368:	04 a0       	ldd	r0, Z+36	; 0x24
    136a:	f5 a1       	ldd	r31, Z+37	; 0x25
    136c:	e0 2d       	mov	r30, r0
    136e:	25 e1       	ldi	r18, 0x15	; 21
    1370:	30 e0       	ldi	r19, 0x00	; 0
    1372:	70 e0       	ldi	r23, 0x00	; 0
    1374:	60 e0       	ldi	r22, 0x00	; 0
    1376:	09 95       	icall
    1378:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    137c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1380:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1384:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1388:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    138c:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    1390:	84 01       	movw	r16, r8
    1392:	04 1b       	sub	r16, r20
    1394:	15 0b       	sbc	r17, r21
    1396:	45 5f       	subi	r20, 0xF5	; 245
    1398:	5f 4f       	sbci	r21, 0xFF	; 255
    139a:	dc 01       	movw	r26, r24
    139c:	ed 91       	ld	r30, X+
    139e:	fc 91       	ld	r31, X
    13a0:	04 a0       	ldd	r0, Z+36	; 0x24
    13a2:	f5 a1       	ldd	r31, Z+37	; 0x25
    13a4:	e0 2d       	mov	r30, r0
    13a6:	25 e1       	ldi	r18, 0x15	; 21
    13a8:	30 e0       	ldi	r19, 0x00	; 0
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	09 95       	icall
    13b0:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    13b4:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    13b8:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    13bc:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    13c0:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    13c4:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    13c8:	85 01       	movw	r16, r10
    13ca:	04 1b       	sub	r16, r20
    13cc:	15 0b       	sbc	r17, r21
    13ce:	46 5f       	subi	r20, 0xF6	; 246
    13d0:	5f 4f       	sbci	r21, 0xFF	; 255
    13d2:	dc 01       	movw	r26, r24
    13d4:	ed 91       	ld	r30, X+
    13d6:	fc 91       	ld	r31, X
    13d8:	04 a0       	ldd	r0, Z+36	; 0x24
    13da:	f5 a1       	ldd	r31, Z+37	; 0x25
    13dc:	e0 2d       	mov	r30, r0
    13de:	25 e1       	ldi	r18, 0x15	; 21
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	09 95       	icall
    13e8:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    13ec:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    13f0:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    13f4:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    13f8:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    13fc:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    1400:	96 01       	movw	r18, r12
    1402:	26 1b       	sub	r18, r22
    1404:	37 0b       	sbc	r19, r23
    1406:	dc 01       	movw	r26, r24
    1408:	ed 91       	ld	r30, X+
    140a:	fc 91       	ld	r31, X
    140c:	04 a0       	ldd	r0, Z+36	; 0x24
    140e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1410:	e0 2d       	mov	r30, r0
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	00 e0       	ldi	r16, 0x00	; 0
    1416:	46 e1       	ldi	r20, 0x16	; 22
    1418:	50 e0       	ldi	r21, 0x00	; 0
    141a:	09 95       	icall
    141c:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1420:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1424:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    1428:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    142c:	e0 90 c8 0a 	lds	r14, 0x0AC8	; 0x800ac8 <col2>
    1430:	f0 90 c9 0a 	lds	r15, 0x0AC9	; 0x800ac9 <col2+0x1>
    1434:	9e 01       	movw	r18, r28
    1436:	26 1b       	sub	r18, r22
    1438:	37 0b       	sbc	r19, r23
    143a:	61 50       	subi	r22, 0x01	; 1
    143c:	71 09       	sbc	r23, r1
    143e:	dc 01       	movw	r26, r24
    1440:	ed 91       	ld	r30, X+
    1442:	fc 91       	ld	r31, X
    1444:	04 a0       	ldd	r0, Z+36	; 0x24
    1446:	f5 a1       	ldd	r31, Z+37	; 0x25
    1448:	e0 2d       	mov	r30, r0
    144a:	46 e1       	ldi	r20, 0x16	; 22
    144c:	50 e0       	ldi	r21, 0x00	; 0
    144e:	09 95       	icall
    1450:	8c ec       	ldi	r24, 0xCC	; 204
    1452:	90 e1       	ldi	r25, 0x10	; 16
    1454:	df 91       	pop	r29
    1456:	cf 91       	pop	r28
    1458:	1f 91       	pop	r17
    145a:	0f 91       	pop	r16
    145c:	ff 90       	pop	r15
    145e:	ef 90       	pop	r14
    1460:	df 90       	pop	r13
    1462:	cf 90       	pop	r12
    1464:	bf 90       	pop	r11
    1466:	af 90       	pop	r10
    1468:	9f 90       	pop	r9
    146a:	8f 90       	pop	r8
    146c:	a0 cb       	rjmp	.-2240   	; 0xbae <CFastLED::show()>
    146e:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    1472:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    1476:	03 cf       	rjmp	.-506    	; 0x127e <progStern(unsigned int, int, unsigned char)+0xa0>

00001478 <progStern(unsigned int, unsigned char)>:
    1478:	46 2f       	mov	r20, r22
    147a:	70 e0       	ldi	r23, 0x00	; 0
    147c:	60 e0       	ldi	r22, 0x00	; 0
    147e:	af ce       	rjmp	.-674    	; 0x11de <progStern(unsigned int, int, unsigned char)>

00001480 <progBlack(unsigned int, unsigned char)>:
    1480:	0f 93       	push	r16
    1482:	1f 93       	push	r17
    1484:	cf 93       	push	r28
    1486:	8c 01       	movw	r16, r24
    1488:	c6 2f       	mov	r28, r22
    148a:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    148e:	81 11       	cpse	r24, r1
    1490:	0e c0       	rjmp	.+28     	; 0x14ae <progBlack(unsigned int, unsigned char)+0x2e>
    1492:	61 e0       	ldi	r22, 0x01	; 1
    1494:	8c ec       	ldi	r24, 0xCC	; 204
    1496:	90 e1       	ldi	r25, 0x10	; 16
    1498:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    149c:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    14a0:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    14a4:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    14a8:	81 e0       	ldi	r24, 0x01	; 1
    14aa:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    14ae:	60 e0       	ldi	r22, 0x00	; 0
    14b0:	8c ec       	ldi	r24, 0xCC	; 204
    14b2:	90 e1       	ldi	r25, 0x10	; 16
    14b4:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    14b8:	8c ec       	ldi	r24, 0xCC	; 204
    14ba:	90 e1       	ldi	r25, 0x10	; 16
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	75 cb       	rjmp	.-2326   	; 0xbae <CFastLED::show()>

000014c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>:
    14c4:	8f 92       	push	r8
    14c6:	9f 92       	push	r9
    14c8:	af 92       	push	r10
    14ca:	bf 92       	push	r11
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	7c 01       	movw	r14, r24
    14de:	06 2f       	mov	r16, r22
    14e0:	ea 01       	movw	r28, r20
    14e2:	12 2f       	mov	r17, r18
    14e4:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    14e8:	81 11       	cpse	r24, r1
    14ea:	12 c0       	rjmp	.+36     	; 0x1510 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x4c>
    14ec:	61 e0       	ldi	r22, 0x01	; 1
    14ee:	8c ec       	ldi	r24, 0xCC	; 204
    14f0:	90 e1       	ldi	r25, 0x10	; 16
    14f2:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    14f6:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    14fa:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    14fe:	00 93 b8 0a 	sts	0x0AB8, r16	; 0x800ab8 <nextSongPart>
    1502:	81 e0       	ldi	r24, 0x01	; 1
    1504:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1508:	d0 93 c0 0a 	sts	0x0AC0, r29	; 0x800ac0 <millisCounterTimer+0x1>
    150c:	c0 93 bf 0a 	sts	0x0ABF, r28	; 0x800abf <millisCounterTimer>
    1510:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1514:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1518:	8c 17       	cp	r24, r28
    151a:	9d 07       	cpc	r25, r29
    151c:	08 f4       	brcc	.+2      	; 0x1520 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x5c>
    151e:	4d c0       	rjmp	.+154    	; 0x15ba <progCircles(unsigned int, unsigned char, unsigned int, bool)+0xf6>
    1520:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1524:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1528:	11 23       	and	r17, r17
    152a:	09 f4       	brne	.+2      	; 0x152e <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x6a>
    152c:	44 c0       	rjmp	.+136    	; 0x15b6 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0xf2>
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8c ec       	ldi	r24, 0xCC	; 204
    1532:	90 e1       	ldi	r25, 0x10	; 16
    1534:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1538:	64 db       	rcall	.-2360   	; 0xc02 <getRandomColor()>
    153a:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    153e:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    1542:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    1546:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    154a:	00 91 ca 0a 	lds	r16, 0x0ACA	; 0x800aca <col1>
    154e:	10 91 cb 0a 	lds	r17, 0x0ACB	; 0x800acb <col1+0x1>
    1552:	2a e0       	ldi	r18, 0x0A	; 10
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	40 e0       	ldi	r20, 0x00	; 0
    1558:	50 e0       	ldi	r21, 0x00	; 0
    155a:	63 e0       	ldi	r22, 0x03	; 3
    155c:	70 e0       	ldi	r23, 0x00	; 0
    155e:	80 e0       	ldi	r24, 0x00	; 0
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
    1566:	4b 01       	movw	r8, r22
    1568:	26 e1       	ldi	r18, 0x16	; 22
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	40 e0       	ldi	r20, 0x00	; 0
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	cb 01       	movw	r24, r22
    1576:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
    157a:	6b 01       	movw	r12, r22
    157c:	25 e1       	ldi	r18, 0x15	; 21
    157e:	30 e0       	ldi	r19, 0x00	; 0
    1580:	40 e0       	ldi	r20, 0x00	; 0
    1582:	50 e0       	ldi	r21, 0x00	; 0
    1584:	60 e0       	ldi	r22, 0x00	; 0
    1586:	70 e0       	ldi	r23, 0x00	; 0
    1588:	cb 01       	movw	r24, r22
    158a:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
    158e:	94 01       	movw	r18, r8
    1590:	a6 01       	movw	r20, r12
    1592:	ce 01       	movw	r24, r28
    1594:	0e 94 0c 3a 	call	0x7418	; 0x7418 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    1598:	8c ec       	ldi	r24, 0xCC	; 204
    159a:	90 e1       	ldi	r25, 0x10	; 16
    159c:	df 91       	pop	r29
    159e:	cf 91       	pop	r28
    15a0:	1f 91       	pop	r17
    15a2:	0f 91       	pop	r16
    15a4:	ff 90       	pop	r15
    15a6:	ef 90       	pop	r14
    15a8:	df 90       	pop	r13
    15aa:	cf 90       	pop	r12
    15ac:	bf 90       	pop	r11
    15ae:	af 90       	pop	r10
    15b0:	9f 90       	pop	r9
    15b2:	8f 90       	pop	r8
    15b4:	fc ca       	rjmp	.-2568   	; 0xbae <CFastLED::show()>
    15b6:	3f db       	rcall	.-2434   	; 0xc36 <getRandomColorIncludingBlack()>
    15b8:	c0 cf       	rjmp	.-128    	; 0x153a <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x76>
    15ba:	df 91       	pop	r29
    15bc:	cf 91       	pop	r28
    15be:	1f 91       	pop	r17
    15c0:	0f 91       	pop	r16
    15c2:	ff 90       	pop	r15
    15c4:	ef 90       	pop	r14
    15c6:	df 90       	pop	r13
    15c8:	cf 90       	pop	r12
    15ca:	bf 90       	pop	r11
    15cc:	af 90       	pop	r10
    15ce:	9f 90       	pop	r9
    15d0:	8f 90       	pop	r8
    15d2:	08 95       	ret

000015d4 <progCircles(unsigned int, unsigned char, unsigned int)>:
    15d4:	21 e0       	ldi	r18, 0x01	; 1
    15d6:	76 cf       	rjmp	.-276    	; 0x14c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>

000015d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>:
    15d8:	cf 92       	push	r12
    15da:	df 92       	push	r13
    15dc:	ef 92       	push	r14
    15de:	ff 92       	push	r15
    15e0:	0f 93       	push	r16
    15e2:	1f 93       	push	r17
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	6c 01       	movw	r12, r24
    15ea:	e6 2e       	mov	r14, r22
    15ec:	ea 01       	movw	r28, r20
    15ee:	f2 2e       	mov	r15, r18
    15f0:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    15f4:	81 11       	cpse	r24, r1
    15f6:	12 c0       	rjmp	.+36     	; 0x161c <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x44>
    15f8:	61 e0       	ldi	r22, 0x01	; 1
    15fa:	8c ec       	ldi	r24, 0xCC	; 204
    15fc:	90 e1       	ldi	r25, 0x10	; 16
    15fe:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1602:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    1606:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    160a:	e0 92 b8 0a 	sts	0x0AB8, r14	; 0x800ab8 <nextSongPart>
    160e:	81 e0       	ldi	r24, 0x01	; 1
    1610:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1614:	d0 93 c0 0a 	sts	0x0AC0, r29	; 0x800ac0 <millisCounterTimer+0x1>
    1618:	c0 93 bf 0a 	sts	0x0ABF, r28	; 0x800abf <millisCounterTimer>
    161c:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1620:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1624:	8c 17       	cp	r24, r28
    1626:	9d 07       	cpc	r25, r29
    1628:	08 f4       	brcc	.+2      	; 0x162c <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x54>
    162a:	77 c0       	rjmp	.+238    	; 0x171a <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x142>
    162c:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1630:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1634:	25 e1       	ldi	r18, 0x15	; 21
    1636:	30 e0       	ldi	r19, 0x00	; 0
    1638:	40 e0       	ldi	r20, 0x00	; 0
    163a:	50 e0       	ldi	r21, 0x00	; 0
    163c:	60 e0       	ldi	r22, 0x00	; 0
    163e:	70 e0       	ldi	r23, 0x00	; 0
    1640:	cb 01       	movw	r24, r22
    1642:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
    1646:	c6 2f       	mov	r28, r22
    1648:	25 e1       	ldi	r18, 0x15	; 21
    164a:	30 e0       	ldi	r19, 0x00	; 0
    164c:	40 e0       	ldi	r20, 0x00	; 0
    164e:	50 e0       	ldi	r21, 0x00	; 0
    1650:	60 e0       	ldi	r22, 0x00	; 0
    1652:	70 e0       	ldi	r23, 0x00	; 0
    1654:	cb 01       	movw	r24, r22
    1656:	0e 94 c8 4e 	call	0x9d90	; 0x9d90 <random(long, long)>
    165a:	c6 2e       	mov	r12, r22
    165c:	ff 20       	and	r15, r15
    165e:	09 f4       	brne	.+2      	; 0x1662 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x8a>
    1660:	5a c0       	rjmp	.+180    	; 0x1716 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x13e>
    1662:	60 e0       	ldi	r22, 0x00	; 0
    1664:	8c ec       	ldi	r24, 0xCC	; 204
    1666:	90 e1       	ldi	r25, 0x10	; 16
    1668:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    166c:	ca da       	rcall	.-2668   	; 0xc02 <getRandomColor()>
    166e:	90 93 cb 0a 	sts	0x0ACB, r25	; 0x800acb <col1+0x1>
    1672:	80 93 ca 0a 	sts	0x0ACA, r24	; 0x800aca <col1>
    1676:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    167a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    167e:	d1 2c       	mov	r13, r1
    1680:	d0 e0       	ldi	r29, 0x00	; 0
    1682:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    1686:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    168a:	96 01       	movw	r18, r12
    168c:	21 50       	subi	r18, 0x01	; 1
    168e:	31 09       	sbc	r19, r1
    1690:	be 01       	movw	r22, r28
    1692:	61 50       	subi	r22, 0x01	; 1
    1694:	71 09       	sbc	r23, r1
    1696:	dc 01       	movw	r26, r24
    1698:	ed 91       	ld	r30, X+
    169a:	fc 91       	ld	r31, X
    169c:	04 a0       	ldd	r0, Z+36	; 0x24
    169e:	f5 a1       	ldd	r31, Z+37	; 0x25
    16a0:	e0 2d       	mov	r30, r0
    16a2:	06 e1       	ldi	r16, 0x16	; 22
    16a4:	10 e0       	ldi	r17, 0x00	; 0
    16a6:	50 e0       	ldi	r21, 0x00	; 0
    16a8:	40 e0       	ldi	r20, 0x00	; 0
    16aa:	09 95       	icall
    16ac:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    16b0:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    16b4:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    16b8:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    16bc:	dc 01       	movw	r26, r24
    16be:	ed 91       	ld	r30, X+
    16c0:	fc 91       	ld	r31, X
    16c2:	04 a0       	ldd	r0, Z+36	; 0x24
    16c4:	f5 a1       	ldd	r31, Z+37	; 0x25
    16c6:	e0 2d       	mov	r30, r0
    16c8:	96 01       	movw	r18, r12
    16ca:	50 e0       	ldi	r21, 0x00	; 0
    16cc:	40 e0       	ldi	r20, 0x00	; 0
    16ce:	be 01       	movw	r22, r28
    16d0:	09 95       	icall
    16d2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    16d6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    16da:	e0 90 ca 0a 	lds	r14, 0x0ACA	; 0x800aca <col1>
    16de:	f0 90 cb 0a 	lds	r15, 0x0ACB	; 0x800acb <col1+0x1>
    16e2:	96 01       	movw	r18, r12
    16e4:	2f 5f       	subi	r18, 0xFF	; 255
    16e6:	3f 4f       	sbci	r19, 0xFF	; 255
    16e8:	be 01       	movw	r22, r28
    16ea:	6f 5f       	subi	r22, 0xFF	; 255
    16ec:	7f 4f       	sbci	r23, 0xFF	; 255
    16ee:	dc 01       	movw	r26, r24
    16f0:	ed 91       	ld	r30, X+
    16f2:	fc 91       	ld	r31, X
    16f4:	04 a0       	ldd	r0, Z+36	; 0x24
    16f6:	f5 a1       	ldd	r31, Z+37	; 0x25
    16f8:	e0 2d       	mov	r30, r0
    16fa:	50 e0       	ldi	r21, 0x00	; 0
    16fc:	40 e0       	ldi	r20, 0x00	; 0
    16fe:	09 95       	icall
    1700:	8c ec       	ldi	r24, 0xCC	; 204
    1702:	90 e1       	ldi	r25, 0x10	; 16
    1704:	df 91       	pop	r29
    1706:	cf 91       	pop	r28
    1708:	1f 91       	pop	r17
    170a:	0f 91       	pop	r16
    170c:	ff 90       	pop	r15
    170e:	ef 90       	pop	r14
    1710:	df 90       	pop	r13
    1712:	cf 90       	pop	r12
    1714:	4c ca       	rjmp	.-2920   	; 0xbae <CFastLED::show()>
    1716:	8f da       	rcall	.-2786   	; 0xc36 <getRandomColorIncludingBlack()>
    1718:	aa cf       	rjmp	.-172    	; 0x166e <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x96>
    171a:	df 91       	pop	r29
    171c:	cf 91       	pop	r28
    171e:	1f 91       	pop	r17
    1720:	0f 91       	pop	r16
    1722:	ff 90       	pop	r15
    1724:	ef 90       	pop	r14
    1726:	df 90       	pop	r13
    1728:	cf 90       	pop	r12
    172a:	08 95       	ret

0000172c <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	54 cf       	rjmp	.-344    	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>

00001730 <progMovingLines(unsigned int, unsigned char)>:
    1730:	cf 92       	push	r12
    1732:	df 92       	push	r13
    1734:	ef 92       	push	r14
    1736:	ff 92       	push	r15
    1738:	0f 93       	push	r16
    173a:	1f 93       	push	r17
    173c:	cf 93       	push	r28
    173e:	df 93       	push	r29
    1740:	8c 01       	movw	r16, r24
    1742:	c6 2f       	mov	r28, r22
    1744:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1748:	81 11       	cpse	r24, r1
    174a:	0e c0       	rjmp	.+28     	; 0x1768 <progMovingLines(unsigned int, unsigned char)+0x38>
    174c:	61 e0       	ldi	r22, 0x01	; 1
    174e:	8c ec       	ldi	r24, 0xCC	; 204
    1750:	90 e1       	ldi	r25, 0x10	; 16
    1752:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1756:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    175a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    175e:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    1762:	81 e0       	ldi	r24, 0x01	; 1
    1764:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1768:	60 e0       	ldi	r22, 0x00	; 0
    176a:	8c ec       	ldi	r24, 0xCC	; 204
    176c:	90 e1       	ldi	r25, 0x10	; 16
    176e:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1772:	80 91 a9 0a 	lds	r24, 0x0AA9	; 0x800aa9 <stage>
    1776:	90 91 aa 0a 	lds	r25, 0x0AAA	; 0x800aaa <stage+0x1>
    177a:	82 30       	cpi	r24, 0x02	; 2
    177c:	91 05       	cpc	r25, r1
    177e:	09 f4       	brne	.+2      	; 0x1782 <progMovingLines(unsigned int, unsigned char)+0x52>
    1780:	59 c0       	rjmp	.+178    	; 0x1834 <progMovingLines(unsigned int, unsigned char)+0x104>
    1782:	7c f4       	brge	.+30     	; 0x17a2 <progMovingLines(unsigned int, unsigned char)+0x72>
    1784:	00 97       	sbiw	r24, 0x00	; 0
    1786:	39 f1       	breq	.+78     	; 0x17d6 <progMovingLines(unsigned int, unsigned char)+0xa6>
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	e1 f1       	breq	.+120    	; 0x1804 <progMovingLines(unsigned int, unsigned char)+0xd4>
    178c:	8c ec       	ldi	r24, 0xCC	; 204
    178e:	90 e1       	ldi	r25, 0x10	; 16
    1790:	df 91       	pop	r29
    1792:	cf 91       	pop	r28
    1794:	1f 91       	pop	r17
    1796:	0f 91       	pop	r16
    1798:	ff 90       	pop	r15
    179a:	ef 90       	pop	r14
    179c:	df 90       	pop	r13
    179e:	cf 90       	pop	r12
    17a0:	06 ca       	rjmp	.-3060   	; 0xbae <CFastLED::show()>
    17a2:	84 30       	cpi	r24, 0x04	; 4
    17a4:	91 05       	cpc	r25, r1
    17a6:	09 f4       	brne	.+2      	; 0x17aa <progMovingLines(unsigned int, unsigned char)+0x7a>
    17a8:	9a c0       	rjmp	.+308    	; 0x18de <progMovingLines(unsigned int, unsigned char)+0x1ae>
    17aa:	0c f4       	brge	.+2      	; 0x17ae <progMovingLines(unsigned int, unsigned char)+0x7e>
    17ac:	72 c0       	rjmp	.+228    	; 0x1892 <progMovingLines(unsigned int, unsigned char)+0x162>
    17ae:	05 97       	sbiw	r24, 0x05	; 5
    17b0:	69 f7       	brne	.-38     	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    17b2:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    17b6:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    17c0:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    17c4:	18 16       	cp	r1, r24
    17c6:	19 06       	cpc	r1, r25
    17c8:	0c f4       	brge	.+2      	; 0x17cc <progMovingLines(unsigned int, unsigned char)+0x9c>
    17ca:	9d c0       	rjmp	.+314    	; 0x1906 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    17cc:	10 92 aa 0a 	sts	0x0AAA, r1	; 0x800aaa <stage+0x1>
    17d0:	10 92 a9 0a 	sts	0x0AA9, r1	; 0x800aa9 <stage>
    17d4:	12 c0       	rjmp	.+36     	; 0x17fa <progMovingLines(unsigned int, unsigned char)+0xca>
    17d6:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    17da:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    17de:	01 96       	adiw	r24, 0x01	; 1
    17e0:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    17e4:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    17e8:	4a 97       	sbiw	r24, 0x1a	; 26
    17ea:	0c f4       	brge	.+2      	; 0x17ee <progMovingLines(unsigned int, unsigned char)+0xbe>
    17ec:	61 c0       	rjmp	.+194    	; 0x18b0 <progMovingLines(unsigned int, unsigned char)+0x180>
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	90 e0       	ldi	r25, 0x00	; 0
    17f2:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    17f6:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    17fa:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    17fe:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    1802:	c4 cf       	rjmp	.-120    	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    1804:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1808:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    180c:	01 96       	adiw	r24, 0x01	; 1
    180e:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    1812:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1816:	0c 97       	sbiw	r24, 0x0c	; 12
    1818:	14 f1       	brlt	.+68     	; 0x185e <progMovingLines(unsigned int, unsigned char)+0x12e>
    181a:	82 e0       	ldi	r24, 0x02	; 2
    181c:	90 e0       	ldi	r25, 0x00	; 0
    181e:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    1822:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    1826:	8c e0       	ldi	r24, 0x0C	; 12
    1828:	90 e0       	ldi	r25, 0x00	; 0
    182a:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    182e:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1832:	ac cf       	rjmp	.-168    	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    1834:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1838:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    183c:	01 97       	sbiw	r24, 0x01	; 1
    183e:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    1842:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1846:	18 16       	cp	r1, r24
    1848:	19 06       	cpc	r1, r25
    184a:	4c f0       	brlt	.+18     	; 0x185e <progMovingLines(unsigned int, unsigned char)+0x12e>
    184c:	83 e0       	ldi	r24, 0x03	; 3
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    1854:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    1858:	89 e1       	ldi	r24, 0x19	; 25
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	e6 cf       	rjmp	.-52     	; 0x182a <progMovingLines(unsigned int, unsigned char)+0xfa>
    185e:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    1862:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    1866:	e8 81       	ld	r30, Y
    1868:	f9 81       	ldd	r31, Y+1	; 0x01
    186a:	c4 a0       	ldd	r12, Z+36	; 0x24
    186c:	d5 a0       	ldd	r13, Z+37	; 0x25
    186e:	c9 d9       	rcall	.-3182   	; 0xc02 <getRandomColor()>
    1870:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    1874:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1878:	06 e1       	ldi	r16, 0x16	; 22
    187a:	10 e0       	ldi	r17, 0x00	; 0
    187c:	04 1b       	sub	r16, r20
    187e:	15 0b       	sbc	r17, r21
    1880:	7c 01       	movw	r14, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	20 e0       	ldi	r18, 0x00	; 0
    1886:	69 e1       	ldi	r22, 0x19	; 25
    1888:	70 e0       	ldi	r23, 0x00	; 0
    188a:	ce 01       	movw	r24, r28
    188c:	f6 01       	movw	r30, r12
    188e:	09 95       	icall
    1890:	7d cf       	rjmp	.-262    	; 0x178c <progMovingLines(unsigned int, unsigned char)+0x5c>
    1892:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1896:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    189a:	01 97       	sbiw	r24, 0x01	; 1
    189c:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    18a0:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    18a4:	18 16       	cp	r1, r24
    18a6:	19 06       	cpc	r1, r25
    18a8:	1c f0       	brlt	.+6      	; 0x18b0 <progMovingLines(unsigned int, unsigned char)+0x180>
    18aa:	84 e0       	ldi	r24, 0x04	; 4
    18ac:	90 e0       	ldi	r25, 0x00	; 0
    18ae:	a1 cf       	rjmp	.-190    	; 0x17f2 <progMovingLines(unsigned int, unsigned char)+0xc2>
    18b0:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    18b4:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    18b8:	e8 81       	ld	r30, Y
    18ba:	f9 81       	ldd	r31, Y+1	; 0x01
    18bc:	c4 a0       	ldd	r12, Z+36	; 0x24
    18be:	d5 a0       	ldd	r13, Z+37	; 0x25
    18c0:	a0 d9       	rcall	.-3264   	; 0xc02 <getRandomColor()>
    18c2:	60 91 b0 0a 	lds	r22, 0x0AB0	; 0x800ab0 <zaehler>
    18c6:	70 91 b1 0a 	lds	r23, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    18ca:	29 e1       	ldi	r18, 0x19	; 25
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	26 1b       	sub	r18, r22
    18d0:	37 0b       	sbc	r19, r23
    18d2:	7c 01       	movw	r14, r24
    18d4:	06 e1       	ldi	r16, 0x16	; 22
    18d6:	10 e0       	ldi	r17, 0x00	; 0
    18d8:	50 e0       	ldi	r21, 0x00	; 0
    18da:	40 e0       	ldi	r20, 0x00	; 0
    18dc:	d6 cf       	rjmp	.-84     	; 0x188a <progMovingLines(unsigned int, unsigned char)+0x15a>
    18de:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    18e2:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    18e6:	01 96       	adiw	r24, 0x01	; 1
    18e8:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    18ec:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    18f0:	0b 97       	sbiw	r24, 0x0b	; 11
    18f2:	4c f0       	brlt	.+18     	; 0x1906 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    18f4:	85 e0       	ldi	r24, 0x05	; 5
    18f6:	90 e0       	ldi	r25, 0x00	; 0
    18f8:	90 93 aa 0a 	sts	0x0AAA, r25	; 0x800aaa <stage+0x1>
    18fc:	80 93 a9 0a 	sts	0x0AA9, r24	; 0x800aa9 <stage>
    1900:	8a e0       	ldi	r24, 0x0A	; 10
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	92 cf       	rjmp	.-220    	; 0x182a <progMovingLines(unsigned int, unsigned char)+0xfa>
    1906:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    190a:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    190e:	e8 81       	ld	r30, Y
    1910:	f9 81       	ldd	r31, Y+1	; 0x01
    1912:	c4 a0       	ldd	r12, Z+36	; 0x24
    1914:	d5 a0       	ldd	r13, Z+37	; 0x25
    1916:	75 d9       	rcall	.-3350   	; 0xc02 <getRandomColor()>
    1918:	40 91 b0 0a 	lds	r20, 0x0AB0	; 0x800ab0 <zaehler>
    191c:	50 91 b1 0a 	lds	r21, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1920:	06 e1       	ldi	r16, 0x16	; 22
    1922:	10 e0       	ldi	r17, 0x00	; 0
    1924:	04 1b       	sub	r16, r20
    1926:	15 0b       	sbc	r17, r21
    1928:	7c 01       	movw	r14, r24
    192a:	29 e1       	ldi	r18, 0x19	; 25
    192c:	30 e0       	ldi	r19, 0x00	; 0
    192e:	70 e0       	ldi	r23, 0x00	; 0
    1930:	60 e0       	ldi	r22, 0x00	; 0
    1932:	ab cf       	rjmp	.-170    	; 0x188a <progMovingLines(unsigned int, unsigned char)+0x15a>

00001934 <progOutline(unsigned int, unsigned char)>:
    1934:	cf 92       	push	r12
    1936:	df 92       	push	r13
    1938:	ef 92       	push	r14
    193a:	ff 92       	push	r15
    193c:	0f 93       	push	r16
    193e:	1f 93       	push	r17
    1940:	cf 93       	push	r28
    1942:	df 93       	push	r29
    1944:	8c 01       	movw	r16, r24
    1946:	c6 2f       	mov	r28, r22
    1948:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    194c:	81 11       	cpse	r24, r1
    194e:	0e c0       	rjmp	.+28     	; 0x196c <progOutline(unsigned int, unsigned char)+0x38>
    1950:	61 e0       	ldi	r22, 0x01	; 1
    1952:	8c ec       	ldi	r24, 0xCC	; 204
    1954:	90 e1       	ldi	r25, 0x10	; 16
    1956:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    195a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    195e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1962:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    1966:	81 e0       	ldi	r24, 0x01	; 1
    1968:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    196c:	60 e0       	ldi	r22, 0x00	; 0
    196e:	8c ec       	ldi	r24, 0xCC	; 204
    1970:	90 e1       	ldi	r25, 0x10	; 16
    1972:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1976:	80 91 ab 0a 	lds	r24, 0x0AAB	; 0x800aab <scannerGoesBack>
    197a:	e0 91 b0 0a 	lds	r30, 0x0AB0	; 0x800ab0 <zaehler>
    197e:	f0 91 b1 0a 	lds	r31, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1982:	81 11       	cpse	r24, r1
    1984:	08 c1       	rjmp	.+528    	; 0x1b96 <progOutline(unsigned int, unsigned char)+0x262>
    1986:	e9 30       	cpi	r30, 0x09	; 9
    1988:	f1 05       	cpc	r31, r1
    198a:	28 f5       	brcc	.+74     	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    198c:	e6 53       	subi	r30, 0x36	; 54
    198e:	f3 4f       	sbci	r31, 0xF3	; 243
    1990:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    1994:	d3 0c       	add	r13, r3
    1996:	05 0d       	add	r16, r5
    1998:	1e 0d       	add	r17, r14
    199a:	37 0d       	add	r19, r7
    199c:	50 0d       	add	r21, r0
    199e:	69 0d       	add	r22, r9
    19a0:	81 0d       	add	r24, r1
    19a2:	9a 0d       	add	r25, r10
    19a4:	b3 0d       	add	r27, r3
    19a6:	c7 e6       	ldi	r28, 0x67	; 103
    19a8:	d8 e0       	ldi	r29, 0x08	; 8
    19aa:	03 e0       	ldi	r16, 0x03	; 3
    19ac:	19 e0       	ldi	r17, 0x09	; 9
    19ae:	e9 90       	ld	r14, Y+
    19b0:	f9 90       	ld	r15, Y+
    19b2:	0e d9       	rcall	.-3556   	; 0xbd0 <getRandomColorValue()>
    19b4:	d8 2e       	mov	r13, r24
    19b6:	0c d9       	rcall	.-3560   	; 0xbd0 <getRandomColorValue()>
    19b8:	c8 2e       	mov	r12, r24
    19ba:	0a d9       	rcall	.-3564   	; 0xbd0 <getRandomColorValue()>
    19bc:	f7 01       	movw	r30, r14
    19be:	ee 0f       	add	r30, r30
    19c0:	ff 1f       	adc	r31, r31
    19c2:	ee 0d       	add	r30, r14
    19c4:	ff 1d       	adc	r31, r15
    19c6:	e3 53       	subi	r30, 0x33	; 51
    19c8:	f5 4f       	sbci	r31, 0xF5	; 245
    19ca:	80 83       	st	Z, r24
    19cc:	c1 82       	std	Z+1, r12	; 0x01
    19ce:	d2 82       	std	Z+2, r13	; 0x02
    19d0:	0c 17       	cp	r16, r28
    19d2:	1d 07       	cpc	r17, r29
    19d4:	61 f7       	brne	.-40     	; 0x19ae <progOutline(unsigned int, unsigned char)+0x7a>
    19d6:	8c ec       	ldi	r24, 0xCC	; 204
    19d8:	90 e1       	ldi	r25, 0x10	; 16
    19da:	e9 d8       	rcall	.-3630   	; 0xbae <CFastLED::show()>
    19dc:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    19e0:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    19e4:	01 96       	adiw	r24, 0x01	; 1
    19e6:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    19ea:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    19ee:	09 97       	sbiw	r24, 0x09	; 9
    19f0:	1c f0       	brlt	.+6      	; 0x19f8 <progOutline(unsigned int, unsigned char)+0xc4>
    19f2:	81 e0       	ldi	r24, 0x01	; 1
    19f4:	80 93 ab 0a 	sts	0x0AAB, r24	; 0x800aab <scannerGoesBack>
    19f8:	df 91       	pop	r29
    19fa:	cf 91       	pop	r28
    19fc:	1f 91       	pop	r17
    19fe:	0f 91       	pop	r16
    1a00:	ff 90       	pop	r15
    1a02:	ef 90       	pop	r14
    1a04:	df 90       	pop	r13
    1a06:	cf 90       	pop	r12
    1a08:	08 95       	ret
    1a0a:	cb ed       	ldi	r28, 0xDB	; 219
    1a0c:	d7 e0       	ldi	r29, 0x07	; 7
    1a0e:	07 e6       	ldi	r16, 0x67	; 103
    1a10:	18 e0       	ldi	r17, 0x08	; 8
    1a12:	e9 90       	ld	r14, Y+
    1a14:	f9 90       	ld	r15, Y+
    1a16:	dc d8       	rcall	.-3656   	; 0xbd0 <getRandomColorValue()>
    1a18:	d8 2e       	mov	r13, r24
    1a1a:	da d8       	rcall	.-3660   	; 0xbd0 <getRandomColorValue()>
    1a1c:	c8 2e       	mov	r12, r24
    1a1e:	d8 d8       	rcall	.-3664   	; 0xbd0 <getRandomColorValue()>
    1a20:	f7 01       	movw	r30, r14
    1a22:	ee 0f       	add	r30, r30
    1a24:	ff 1f       	adc	r31, r31
    1a26:	ee 0d       	add	r30, r14
    1a28:	ff 1d       	adc	r31, r15
    1a2a:	e3 53       	subi	r30, 0x33	; 51
    1a2c:	f5 4f       	sbci	r31, 0xF5	; 245
    1a2e:	80 83       	st	Z, r24
    1a30:	c1 82       	std	Z+1, r12	; 0x01
    1a32:	d2 82       	std	Z+2, r13	; 0x02
    1a34:	0c 17       	cp	r16, r28
    1a36:	1d 07       	cpc	r17, r29
    1a38:	61 f7       	brne	.-40     	; 0x1a12 <progOutline(unsigned int, unsigned char)+0xde>
    1a3a:	cd cf       	rjmp	.-102    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1a3c:	cf e6       	ldi	r28, 0x6F	; 111
    1a3e:	d7 e0       	ldi	r29, 0x07	; 7
    1a40:	0b ed       	ldi	r16, 0xDB	; 219
    1a42:	17 e0       	ldi	r17, 0x07	; 7
    1a44:	e9 90       	ld	r14, Y+
    1a46:	f9 90       	ld	r15, Y+
    1a48:	c3 d8       	rcall	.-3706   	; 0xbd0 <getRandomColorValue()>
    1a4a:	d8 2e       	mov	r13, r24
    1a4c:	c1 d8       	rcall	.-3710   	; 0xbd0 <getRandomColorValue()>
    1a4e:	c8 2e       	mov	r12, r24
    1a50:	bf d8       	rcall	.-3714   	; 0xbd0 <getRandomColorValue()>
    1a52:	f7 01       	movw	r30, r14
    1a54:	ee 0f       	add	r30, r30
    1a56:	ff 1f       	adc	r31, r31
    1a58:	ee 0d       	add	r30, r14
    1a5a:	ff 1d       	adc	r31, r15
    1a5c:	e3 53       	subi	r30, 0x33	; 51
    1a5e:	f5 4f       	sbci	r31, 0xF5	; 245
    1a60:	80 83       	st	Z, r24
    1a62:	c1 82       	std	Z+1, r12	; 0x01
    1a64:	d2 82       	std	Z+2, r13	; 0x02
    1a66:	0c 17       	cp	r16, r28
    1a68:	1d 07       	cpc	r17, r29
    1a6a:	61 f7       	brne	.-40     	; 0x1a44 <progOutline(unsigned int, unsigned char)+0x110>
    1a6c:	b4 cf       	rjmp	.-152    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1a6e:	c5 e2       	ldi	r28, 0x25	; 37
    1a70:	d7 e0       	ldi	r29, 0x07	; 7
    1a72:	0f e6       	ldi	r16, 0x6F	; 111
    1a74:	17 e0       	ldi	r17, 0x07	; 7
    1a76:	e9 90       	ld	r14, Y+
    1a78:	f9 90       	ld	r15, Y+
    1a7a:	aa d8       	rcall	.-3756   	; 0xbd0 <getRandomColorValue()>
    1a7c:	d8 2e       	mov	r13, r24
    1a7e:	a8 d8       	rcall	.-3760   	; 0xbd0 <getRandomColorValue()>
    1a80:	c8 2e       	mov	r12, r24
    1a82:	a6 d8       	rcall	.-3764   	; 0xbd0 <getRandomColorValue()>
    1a84:	f7 01       	movw	r30, r14
    1a86:	ee 0f       	add	r30, r30
    1a88:	ff 1f       	adc	r31, r31
    1a8a:	ee 0d       	add	r30, r14
    1a8c:	ff 1d       	adc	r31, r15
    1a8e:	e3 53       	subi	r30, 0x33	; 51
    1a90:	f5 4f       	sbci	r31, 0xF5	; 245
    1a92:	80 83       	st	Z, r24
    1a94:	c1 82       	std	Z+1, r12	; 0x01
    1a96:	d2 82       	std	Z+2, r13	; 0x02
    1a98:	0c 17       	cp	r16, r28
    1a9a:	1d 07       	cpc	r17, r29
    1a9c:	61 f7       	brne	.-40     	; 0x1a76 <progOutline(unsigned int, unsigned char)+0x142>
    1a9e:	9b cf       	rjmp	.-202    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1aa0:	c5 ee       	ldi	r28, 0xE5	; 229
    1aa2:	d6 e0       	ldi	r29, 0x06	; 6
    1aa4:	05 e2       	ldi	r16, 0x25	; 37
    1aa6:	17 e0       	ldi	r17, 0x07	; 7
    1aa8:	e9 90       	ld	r14, Y+
    1aaa:	f9 90       	ld	r15, Y+
    1aac:	91 d8       	rcall	.-3806   	; 0xbd0 <getRandomColorValue()>
    1aae:	d8 2e       	mov	r13, r24
    1ab0:	8f d8       	rcall	.-3810   	; 0xbd0 <getRandomColorValue()>
    1ab2:	c8 2e       	mov	r12, r24
    1ab4:	8d d8       	rcall	.-3814   	; 0xbd0 <getRandomColorValue()>
    1ab6:	f7 01       	movw	r30, r14
    1ab8:	ee 0f       	add	r30, r30
    1aba:	ff 1f       	adc	r31, r31
    1abc:	ee 0d       	add	r30, r14
    1abe:	ff 1d       	adc	r31, r15
    1ac0:	e3 53       	subi	r30, 0x33	; 51
    1ac2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ac4:	80 83       	st	Z, r24
    1ac6:	c1 82       	std	Z+1, r12	; 0x01
    1ac8:	d2 82       	std	Z+2, r13	; 0x02
    1aca:	0c 17       	cp	r16, r28
    1acc:	1d 07       	cpc	r17, r29
    1ace:	61 f7       	brne	.-40     	; 0x1aa8 <progOutline(unsigned int, unsigned char)+0x174>
    1ad0:	82 cf       	rjmp	.-252    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1ad2:	c9 ea       	ldi	r28, 0xA9	; 169
    1ad4:	d6 e0       	ldi	r29, 0x06	; 6
    1ad6:	09 91       	ld	r16, Y+
    1ad8:	19 91       	ld	r17, Y+
    1ada:	7a d8       	rcall	.-3852   	; 0xbd0 <getRandomColorValue()>
    1adc:	f8 2e       	mov	r15, r24
    1ade:	78 d8       	rcall	.-3856   	; 0xbd0 <getRandomColorValue()>
    1ae0:	e8 2e       	mov	r14, r24
    1ae2:	76 d8       	rcall	.-3860   	; 0xbd0 <getRandomColorValue()>
    1ae4:	f8 01       	movw	r30, r16
    1ae6:	ee 0f       	add	r30, r30
    1ae8:	ff 1f       	adc	r31, r31
    1aea:	e0 0f       	add	r30, r16
    1aec:	f1 1f       	adc	r31, r17
    1aee:	e3 53       	subi	r30, 0x33	; 51
    1af0:	f5 4f       	sbci	r31, 0xF5	; 245
    1af2:	80 83       	st	Z, r24
    1af4:	e1 82       	std	Z+1, r14	; 0x01
    1af6:	f2 82       	std	Z+2, r15	; 0x02
    1af8:	86 e0       	ldi	r24, 0x06	; 6
    1afa:	c5 3e       	cpi	r28, 0xE5	; 229
    1afc:	d8 07       	cpc	r29, r24
    1afe:	59 f7       	brne	.-42     	; 0x1ad6 <progOutline(unsigned int, unsigned char)+0x1a2>
    1b00:	6a cf       	rjmp	.-300    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b02:	c3 e7       	ldi	r28, 0x73	; 115
    1b04:	d6 e0       	ldi	r29, 0x06	; 6
    1b06:	09 ea       	ldi	r16, 0xA9	; 169
    1b08:	16 e0       	ldi	r17, 0x06	; 6
    1b0a:	e9 90       	ld	r14, Y+
    1b0c:	f9 90       	ld	r15, Y+
    1b0e:	60 d8       	rcall	.-3904   	; 0xbd0 <getRandomColorValue()>
    1b10:	d8 2e       	mov	r13, r24
    1b12:	5e d8       	rcall	.-3908   	; 0xbd0 <getRandomColorValue()>
    1b14:	c8 2e       	mov	r12, r24
    1b16:	5c d8       	rcall	.-3912   	; 0xbd0 <getRandomColorValue()>
    1b18:	f7 01       	movw	r30, r14
    1b1a:	ee 0f       	add	r30, r30
    1b1c:	ff 1f       	adc	r31, r31
    1b1e:	ee 0d       	add	r30, r14
    1b20:	ff 1d       	adc	r31, r15
    1b22:	e3 53       	subi	r30, 0x33	; 51
    1b24:	f5 4f       	sbci	r31, 0xF5	; 245
    1b26:	80 83       	st	Z, r24
    1b28:	c1 82       	std	Z+1, r12	; 0x01
    1b2a:	d2 82       	std	Z+2, r13	; 0x02
    1b2c:	0c 17       	cp	r16, r28
    1b2e:	1d 07       	cpc	r17, r29
    1b30:	61 f7       	brne	.-40     	; 0x1b0a <progOutline(unsigned int, unsigned char)+0x1d6>
    1b32:	51 cf       	rjmp	.-350    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b34:	cf e3       	ldi	r28, 0x3F	; 63
    1b36:	d6 e0       	ldi	r29, 0x06	; 6
    1b38:	03 e7       	ldi	r16, 0x73	; 115
    1b3a:	16 e0       	ldi	r17, 0x06	; 6
    1b3c:	e9 90       	ld	r14, Y+
    1b3e:	f9 90       	ld	r15, Y+
    1b40:	47 d8       	rcall	.-3954   	; 0xbd0 <getRandomColorValue()>
    1b42:	d8 2e       	mov	r13, r24
    1b44:	45 d8       	rcall	.-3958   	; 0xbd0 <getRandomColorValue()>
    1b46:	c8 2e       	mov	r12, r24
    1b48:	43 d8       	rcall	.-3962   	; 0xbd0 <getRandomColorValue()>
    1b4a:	f7 01       	movw	r30, r14
    1b4c:	ee 0f       	add	r30, r30
    1b4e:	ff 1f       	adc	r31, r31
    1b50:	ee 0d       	add	r30, r14
    1b52:	ff 1d       	adc	r31, r15
    1b54:	e3 53       	subi	r30, 0x33	; 51
    1b56:	f5 4f       	sbci	r31, 0xF5	; 245
    1b58:	80 83       	st	Z, r24
    1b5a:	c1 82       	std	Z+1, r12	; 0x01
    1b5c:	d2 82       	std	Z+2, r13	; 0x02
    1b5e:	0c 17       	cp	r16, r28
    1b60:	1d 07       	cpc	r17, r29
    1b62:	61 f7       	brne	.-40     	; 0x1b3c <progOutline(unsigned int, unsigned char)+0x208>
    1b64:	38 cf       	rjmp	.-400    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b66:	cf e0       	ldi	r28, 0x0F	; 15
    1b68:	d6 e0       	ldi	r29, 0x06	; 6
    1b6a:	09 91       	ld	r16, Y+
    1b6c:	19 91       	ld	r17, Y+
    1b6e:	30 d8       	rcall	.-4000   	; 0xbd0 <getRandomColorValue()>
    1b70:	f8 2e       	mov	r15, r24
    1b72:	2e d8       	rcall	.-4004   	; 0xbd0 <getRandomColorValue()>
    1b74:	e8 2e       	mov	r14, r24
    1b76:	2c d8       	rcall	.-4008   	; 0xbd0 <getRandomColorValue()>
    1b78:	f8 01       	movw	r30, r16
    1b7a:	ee 0f       	add	r30, r30
    1b7c:	ff 1f       	adc	r31, r31
    1b7e:	e0 0f       	add	r30, r16
    1b80:	f1 1f       	adc	r31, r17
    1b82:	e3 53       	subi	r30, 0x33	; 51
    1b84:	f5 4f       	sbci	r31, 0xF5	; 245
    1b86:	80 83       	st	Z, r24
    1b88:	e1 82       	std	Z+1, r14	; 0x01
    1b8a:	f2 82       	std	Z+2, r15	; 0x02
    1b8c:	86 e0       	ldi	r24, 0x06	; 6
    1b8e:	cf 33       	cpi	r28, 0x3F	; 63
    1b90:	d8 07       	cpc	r29, r24
    1b92:	59 f7       	brne	.-42     	; 0x1b6a <progOutline(unsigned int, unsigned char)+0x236>
    1b94:	20 cf       	rjmp	.-448    	; 0x19d6 <progOutline(unsigned int, unsigned char)+0xa2>
    1b96:	e9 30       	cpi	r30, 0x09	; 9
    1b98:	f1 05       	cpc	r31, r1
    1b9a:	20 f5       	brcc	.+72     	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1b9c:	ee 52       	subi	r30, 0x2E	; 46
    1b9e:	f2 4f       	sbci	r31, 0xF2	; 242
    1ba0:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    1ba4:	db 0d       	add	r29, r11
    1ba6:	06 0e       	add	r0, r22
    1ba8:	21 0e       	add	r2, r17
    1baa:	3c 0e       	add	r3, r28
    1bac:	57 0e       	add	r5, r23
    1bae:	72 0e       	add	r7, r18
    1bb0:	8d 0e       	add	r8, r29
    1bb2:	a8 0e       	add	r10, r24
    1bb4:	c3 0e       	add	r12, r19
    1bb6:	c7 e6       	ldi	r28, 0x67	; 103
    1bb8:	d8 e0       	ldi	r29, 0x08	; 8
    1bba:	09 91       	ld	r16, Y+
    1bbc:	19 91       	ld	r17, Y+
    1bbe:	08 d8       	rcall	.-4080   	; 0xbd0 <getRandomColorValue()>
    1bc0:	f8 2e       	mov	r15, r24
    1bc2:	06 d8       	rcall	.-4084   	; 0xbd0 <getRandomColorValue()>
    1bc4:	e8 2e       	mov	r14, r24
    1bc6:	04 d8       	rcall	.-4088   	; 0xbd0 <getRandomColorValue()>
    1bc8:	f8 01       	movw	r30, r16
    1bca:	ee 0f       	add	r30, r30
    1bcc:	ff 1f       	adc	r31, r31
    1bce:	e0 0f       	add	r30, r16
    1bd0:	f1 1f       	adc	r31, r17
    1bd2:	e3 53       	subi	r30, 0x33	; 51
    1bd4:	f5 4f       	sbci	r31, 0xF5	; 245
    1bd6:	80 83       	st	Z, r24
    1bd8:	e1 82       	std	Z+1, r14	; 0x01
    1bda:	f2 82       	std	Z+2, r15	; 0x02
    1bdc:	89 e0       	ldi	r24, 0x09	; 9
    1bde:	c3 30       	cpi	r28, 0x03	; 3
    1be0:	d8 07       	cpc	r29, r24
    1be2:	59 f7       	brne	.-42     	; 0x1bba <progOutline(unsigned int, unsigned char)+0x286>
    1be4:	8c ec       	ldi	r24, 0xCC	; 204
    1be6:	90 e1       	ldi	r25, 0x10	; 16
    1be8:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    1bec:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    1bf0:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    1bf4:	01 97       	sbiw	r24, 0x01	; 1
    1bf6:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    1bfa:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    1bfe:	18 16       	cp	r1, r24
    1c00:	19 06       	cpc	r1, r25
    1c02:	0c f4       	brge	.+2      	; 0x1c06 <progOutline(unsigned int, unsigned char)+0x2d2>
    1c04:	f9 ce       	rjmp	.-526    	; 0x19f8 <progOutline(unsigned int, unsigned char)+0xc4>
    1c06:	10 92 ab 0a 	sts	0x0AAB, r1	; 0x800aab <scannerGoesBack>
    1c0a:	f6 ce       	rjmp	.-532    	; 0x19f8 <progOutline(unsigned int, unsigned char)+0xc4>
    1c0c:	cb ed       	ldi	r28, 0xDB	; 219
    1c0e:	d7 e0       	ldi	r29, 0x07	; 7
    1c10:	09 91       	ld	r16, Y+
    1c12:	19 91       	ld	r17, Y+
    1c14:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c18:	f8 2e       	mov	r15, r24
    1c1a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c1e:	e8 2e       	mov	r14, r24
    1c20:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c24:	f8 01       	movw	r30, r16
    1c26:	ee 0f       	add	r30, r30
    1c28:	ff 1f       	adc	r31, r31
    1c2a:	e0 0f       	add	r30, r16
    1c2c:	f1 1f       	adc	r31, r17
    1c2e:	e3 53       	subi	r30, 0x33	; 51
    1c30:	f5 4f       	sbci	r31, 0xF5	; 245
    1c32:	80 83       	st	Z, r24
    1c34:	e1 82       	std	Z+1, r14	; 0x01
    1c36:	f2 82       	std	Z+2, r15	; 0x02
    1c38:	88 e0       	ldi	r24, 0x08	; 8
    1c3a:	c7 36       	cpi	r28, 0x67	; 103
    1c3c:	d8 07       	cpc	r29, r24
    1c3e:	41 f7       	brne	.-48     	; 0x1c10 <progOutline(unsigned int, unsigned char)+0x2dc>
    1c40:	d1 cf       	rjmp	.-94     	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1c42:	cf e6       	ldi	r28, 0x6F	; 111
    1c44:	d7 e0       	ldi	r29, 0x07	; 7
    1c46:	09 91       	ld	r16, Y+
    1c48:	19 91       	ld	r17, Y+
    1c4a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c4e:	f8 2e       	mov	r15, r24
    1c50:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c54:	e8 2e       	mov	r14, r24
    1c56:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c5a:	f8 01       	movw	r30, r16
    1c5c:	ee 0f       	add	r30, r30
    1c5e:	ff 1f       	adc	r31, r31
    1c60:	e0 0f       	add	r30, r16
    1c62:	f1 1f       	adc	r31, r17
    1c64:	e3 53       	subi	r30, 0x33	; 51
    1c66:	f5 4f       	sbci	r31, 0xF5	; 245
    1c68:	80 83       	st	Z, r24
    1c6a:	e1 82       	std	Z+1, r14	; 0x01
    1c6c:	f2 82       	std	Z+2, r15	; 0x02
    1c6e:	87 e0       	ldi	r24, 0x07	; 7
    1c70:	cb 3d       	cpi	r28, 0xDB	; 219
    1c72:	d8 07       	cpc	r29, r24
    1c74:	41 f7       	brne	.-48     	; 0x1c46 <progOutline(unsigned int, unsigned char)+0x312>
    1c76:	b6 cf       	rjmp	.-148    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1c78:	c5 e2       	ldi	r28, 0x25	; 37
    1c7a:	d7 e0       	ldi	r29, 0x07	; 7
    1c7c:	09 91       	ld	r16, Y+
    1c7e:	19 91       	ld	r17, Y+
    1c80:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c84:	f8 2e       	mov	r15, r24
    1c86:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c8a:	e8 2e       	mov	r14, r24
    1c8c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1c90:	f8 01       	movw	r30, r16
    1c92:	ee 0f       	add	r30, r30
    1c94:	ff 1f       	adc	r31, r31
    1c96:	e0 0f       	add	r30, r16
    1c98:	f1 1f       	adc	r31, r17
    1c9a:	e3 53       	subi	r30, 0x33	; 51
    1c9c:	f5 4f       	sbci	r31, 0xF5	; 245
    1c9e:	80 83       	st	Z, r24
    1ca0:	e1 82       	std	Z+1, r14	; 0x01
    1ca2:	f2 82       	std	Z+2, r15	; 0x02
    1ca4:	87 e0       	ldi	r24, 0x07	; 7
    1ca6:	cf 36       	cpi	r28, 0x6F	; 111
    1ca8:	d8 07       	cpc	r29, r24
    1caa:	41 f7       	brne	.-48     	; 0x1c7c <progOutline(unsigned int, unsigned char)+0x348>
    1cac:	9b cf       	rjmp	.-202    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1cae:	c5 ee       	ldi	r28, 0xE5	; 229
    1cb0:	d6 e0       	ldi	r29, 0x06	; 6
    1cb2:	09 91       	ld	r16, Y+
    1cb4:	19 91       	ld	r17, Y+
    1cb6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cba:	f8 2e       	mov	r15, r24
    1cbc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cc0:	e8 2e       	mov	r14, r24
    1cc2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cc6:	f8 01       	movw	r30, r16
    1cc8:	ee 0f       	add	r30, r30
    1cca:	ff 1f       	adc	r31, r31
    1ccc:	e0 0f       	add	r30, r16
    1cce:	f1 1f       	adc	r31, r17
    1cd0:	e3 53       	subi	r30, 0x33	; 51
    1cd2:	f5 4f       	sbci	r31, 0xF5	; 245
    1cd4:	80 83       	st	Z, r24
    1cd6:	e1 82       	std	Z+1, r14	; 0x01
    1cd8:	f2 82       	std	Z+2, r15	; 0x02
    1cda:	87 e0       	ldi	r24, 0x07	; 7
    1cdc:	c5 32       	cpi	r28, 0x25	; 37
    1cde:	d8 07       	cpc	r29, r24
    1ce0:	41 f7       	brne	.-48     	; 0x1cb2 <progOutline(unsigned int, unsigned char)+0x37e>
    1ce2:	80 cf       	rjmp	.-256    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1ce4:	c9 ea       	ldi	r28, 0xA9	; 169
    1ce6:	d6 e0       	ldi	r29, 0x06	; 6
    1ce8:	09 91       	ld	r16, Y+
    1cea:	19 91       	ld	r17, Y+
    1cec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cf0:	f8 2e       	mov	r15, r24
    1cf2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cf6:	e8 2e       	mov	r14, r24
    1cf8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1cfc:	f8 01       	movw	r30, r16
    1cfe:	ee 0f       	add	r30, r30
    1d00:	ff 1f       	adc	r31, r31
    1d02:	e0 0f       	add	r30, r16
    1d04:	f1 1f       	adc	r31, r17
    1d06:	e3 53       	subi	r30, 0x33	; 51
    1d08:	f5 4f       	sbci	r31, 0xF5	; 245
    1d0a:	80 83       	st	Z, r24
    1d0c:	e1 82       	std	Z+1, r14	; 0x01
    1d0e:	f2 82       	std	Z+2, r15	; 0x02
    1d10:	86 e0       	ldi	r24, 0x06	; 6
    1d12:	c5 3e       	cpi	r28, 0xE5	; 229
    1d14:	d8 07       	cpc	r29, r24
    1d16:	41 f7       	brne	.-48     	; 0x1ce8 <progOutline(unsigned int, unsigned char)+0x3b4>
    1d18:	65 cf       	rjmp	.-310    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1d1a:	c3 e7       	ldi	r28, 0x73	; 115
    1d1c:	d6 e0       	ldi	r29, 0x06	; 6
    1d1e:	09 91       	ld	r16, Y+
    1d20:	19 91       	ld	r17, Y+
    1d22:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d26:	f8 2e       	mov	r15, r24
    1d28:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d2c:	e8 2e       	mov	r14, r24
    1d2e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d32:	f8 01       	movw	r30, r16
    1d34:	ee 0f       	add	r30, r30
    1d36:	ff 1f       	adc	r31, r31
    1d38:	e0 0f       	add	r30, r16
    1d3a:	f1 1f       	adc	r31, r17
    1d3c:	e3 53       	subi	r30, 0x33	; 51
    1d3e:	f5 4f       	sbci	r31, 0xF5	; 245
    1d40:	80 83       	st	Z, r24
    1d42:	e1 82       	std	Z+1, r14	; 0x01
    1d44:	f2 82       	std	Z+2, r15	; 0x02
    1d46:	86 e0       	ldi	r24, 0x06	; 6
    1d48:	c9 3a       	cpi	r28, 0xA9	; 169
    1d4a:	d8 07       	cpc	r29, r24
    1d4c:	41 f7       	brne	.-48     	; 0x1d1e <progOutline(unsigned int, unsigned char)+0x3ea>
    1d4e:	4a cf       	rjmp	.-364    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1d50:	cf e3       	ldi	r28, 0x3F	; 63
    1d52:	d6 e0       	ldi	r29, 0x06	; 6
    1d54:	09 91       	ld	r16, Y+
    1d56:	19 91       	ld	r17, Y+
    1d58:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d5c:	f8 2e       	mov	r15, r24
    1d5e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d62:	e8 2e       	mov	r14, r24
    1d64:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d68:	f8 01       	movw	r30, r16
    1d6a:	ee 0f       	add	r30, r30
    1d6c:	ff 1f       	adc	r31, r31
    1d6e:	e0 0f       	add	r30, r16
    1d70:	f1 1f       	adc	r31, r17
    1d72:	e3 53       	subi	r30, 0x33	; 51
    1d74:	f5 4f       	sbci	r31, 0xF5	; 245
    1d76:	80 83       	st	Z, r24
    1d78:	e1 82       	std	Z+1, r14	; 0x01
    1d7a:	f2 82       	std	Z+2, r15	; 0x02
    1d7c:	86 e0       	ldi	r24, 0x06	; 6
    1d7e:	c3 37       	cpi	r28, 0x73	; 115
    1d80:	d8 07       	cpc	r29, r24
    1d82:	41 f7       	brne	.-48     	; 0x1d54 <progOutline(unsigned int, unsigned char)+0x420>
    1d84:	2f cf       	rjmp	.-418    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>
    1d86:	cf e0       	ldi	r28, 0x0F	; 15
    1d88:	d6 e0       	ldi	r29, 0x06	; 6
    1d8a:	09 91       	ld	r16, Y+
    1d8c:	19 91       	ld	r17, Y+
    1d8e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d92:	f8 2e       	mov	r15, r24
    1d94:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d98:	e8 2e       	mov	r14, r24
    1d9a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    1d9e:	f8 01       	movw	r30, r16
    1da0:	ee 0f       	add	r30, r30
    1da2:	ff 1f       	adc	r31, r31
    1da4:	e0 0f       	add	r30, r16
    1da6:	f1 1f       	adc	r31, r17
    1da8:	e3 53       	subi	r30, 0x33	; 51
    1daa:	f5 4f       	sbci	r31, 0xF5	; 245
    1dac:	80 83       	st	Z, r24
    1dae:	e1 82       	std	Z+1, r14	; 0x01
    1db0:	f2 82       	std	Z+2, r15	; 0x02
    1db2:	86 e0       	ldi	r24, 0x06	; 6
    1db4:	cf 33       	cpi	r28, 0x3F	; 63
    1db6:	d8 07       	cpc	r29, r24
    1db8:	41 f7       	brne	.-48     	; 0x1d8a <progOutline(unsigned int, unsigned char)+0x456>
    1dba:	14 cf       	rjmp	.-472    	; 0x1be4 <progOutline(unsigned int, unsigned char)+0x2b0>

00001dbc <progShowText(String, unsigned int, int, int, int, unsigned char)>:
    1dbc:	8f 92       	push	r8
    1dbe:	9f 92       	push	r9
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	0f 93       	push	r16
    1dcc:	1f 93       	push	r17
    1dce:	cf 93       	push	r28
    1dd0:	df 93       	push	r29
    1dd2:	ec 01       	movw	r28, r24
    1dd4:	4b 01       	movw	r8, r22
    1dd6:	5a 01       	movw	r10, r20
    1dd8:	69 01       	movw	r12, r18
    1dda:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1dde:	81 11       	cpse	r24, r1
    1de0:	14 c0       	rjmp	.+40     	; 0x1e0a <progShowText(String, unsigned int, int, int, int, unsigned char)+0x4e>
    1de2:	61 e0       	ldi	r22, 0x01	; 1
    1de4:	8c ec       	ldi	r24, 0xCC	; 204
    1de6:	90 e1       	ldi	r25, 0x10	; 16
    1de8:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1dec:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1df0:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1df4:	e0 92 b8 0a 	sts	0x0AB8, r14	; 0x800ab8 <nextSongPart>
    1df8:	81 e0       	ldi	r24, 0x01	; 1
    1dfa:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1dfe:	84 e6       	ldi	r24, 0x64	; 100
    1e00:	90 e0       	ldi	r25, 0x00	; 0
    1e02:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <millisCounterTimer+0x1>
    1e06:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <millisCounterTimer>
    1e0a:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1e0e:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1e12:	84 36       	cpi	r24, 0x64	; 100
    1e14:	91 05       	cpc	r25, r1
    1e16:	08 f4       	brcc	.+2      	; 0x1e1a <progShowText(String, unsigned int, int, int, int, unsigned char)+0x5e>
    1e18:	4c c0       	rjmp	.+152    	; 0x1eb2 <progShowText(String, unsigned int, int, int, int, unsigned char)+0xf6>
    1e1a:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1e1e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1e22:	85 e0       	ldi	r24, 0x05	; 5
    1e24:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    1e28:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e2c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e30:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1e34:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e38:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e3c:	dc 01       	movw	r26, r24
    1e3e:	56 96       	adiw	r26, 0x16	; 22
    1e40:	1c 92       	st	X, r1
    1e42:	61 e0       	ldi	r22, 0x01	; 1
    1e44:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Adafruit_GFX::setTextSize(unsigned char)>
    1e48:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e4c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e50:	dc 01       	movw	r26, r24
    1e52:	ed 91       	ld	r30, X+
    1e54:	fc 91       	ld	r31, X
    1e56:	00 8c       	ldd	r0, Z+24	; 0x18
    1e58:	f1 8d       	ldd	r31, Z+25	; 0x19
    1e5a:	e0 2d       	mov	r30, r0
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	09 95       	icall
    1e60:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <yield>
    1e64:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e68:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e6c:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1e70:	e0 91 bb 10 	lds	r30, 0x10BB	; 0x8010bb <matrix>
    1e74:	f0 91 bc 10 	lds	r31, 0x10BC	; 0x8010bc <matrix+0x1>
    1e78:	b4 86       	std	Z+12, r11	; 0x0c
    1e7a:	a3 86       	std	Z+11, r10	; 0x0b
    1e7c:	d6 86       	std	Z+14, r13	; 0x0e
    1e7e:	c5 86       	std	Z+13, r12	; 0x0d
    1e80:	12 8b       	std	Z+18, r17	; 0x12
    1e82:	01 8b       	std	Z+17, r16	; 0x11
    1e84:	10 8b       	std	Z+16, r17	; 0x10
    1e86:	07 87       	std	Z+15, r16	; 0x0f
    1e88:	be 01       	movw	r22, r28
    1e8a:	cf 01       	movw	r24, r30
    1e8c:	0e 94 26 4c 	call	0x984c	; 0x984c <Print::print(String const&)>
    1e90:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1e94:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1e98:	df 91       	pop	r29
    1e9a:	cf 91       	pop	r28
    1e9c:	1f 91       	pop	r17
    1e9e:	0f 91       	pop	r16
    1ea0:	ef 90       	pop	r14
    1ea2:	df 90       	pop	r13
    1ea4:	cf 90       	pop	r12
    1ea6:	bf 90       	pop	r11
    1ea8:	af 90       	pop	r10
    1eaa:	9f 90       	pop	r9
    1eac:	8f 90       	pop	r8
    1eae:	0c 94 71 3d 	jmp	0x7ae2	; 0x7ae2 <FastLED_NeoMatrix::show()>
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ef 90       	pop	r14
    1ebc:	df 90       	pop	r13
    1ebe:	cf 90       	pop	r12
    1ec0:	bf 90       	pop	r11
    1ec2:	af 90       	pop	r10
    1ec4:	9f 90       	pop	r9
    1ec6:	8f 90       	pop	r8
    1ec8:	08 95       	ret

00001eca <progScrollText(String, unsigned int, int, int, unsigned char)>:
    1eca:	af 92       	push	r10
    1ecc:	bf 92       	push	r11
    1ece:	cf 92       	push	r12
    1ed0:	df 92       	push	r13
    1ed2:	ef 92       	push	r14
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	cf 93       	push	r28
    1eda:	df 93       	push	r29
    1edc:	7c 01       	movw	r14, r24
    1ede:	5b 01       	movw	r10, r22
    1ee0:	6a 01       	movw	r12, r20
    1ee2:	e9 01       	movw	r28, r18
    1ee4:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1ee8:	81 11       	cpse	r24, r1
    1eea:	26 c0       	rjmp	.+76     	; 0x1f38 <progScrollText(String, unsigned int, int, int, unsigned char)+0x6e>
    1eec:	61 e0       	ldi	r22, 0x01	; 1
    1eee:	8c ec       	ldi	r24, 0xCC	; 204
    1ef0:	90 e1       	ldi	r25, 0x10	; 16
    1ef2:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    1ef6:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
    1efa:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
    1efe:	00 93 b8 0a 	sts	0x0AB8, r16	; 0x800ab8 <nextSongPart>
    1f02:	81 e0       	ldi	r24, 0x01	; 1
    1f04:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    1f08:	d0 92 c0 0a 	sts	0x0AC0, r13	; 0x800ac0 <millisCounterTimer+0x1>
    1f0c:	c0 92 bf 0a 	sts	0x0ABF, r12	; 0x800abf <millisCounterTimer>
    1f10:	84 e1       	ldi	r24, 0x14	; 20
    1f12:	90 e0       	ldi	r25, 0x00	; 0
    1f14:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1f18:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1f1c:	d7 01       	movw	r26, r14
    1f1e:	14 96       	adiw	r26, 0x04	; 4
    1f20:	2d 91       	ld	r18, X+
    1f22:	3c 91       	ld	r19, X
    1f24:	46 e0       	ldi	r20, 0x06	; 6
    1f26:	42 9f       	mul	r20, r18
    1f28:	c0 01       	movw	r24, r0
    1f2a:	43 9f       	mul	r20, r19
    1f2c:	90 0d       	add	r25, r0
    1f2e:	11 24       	eor	r1, r1
    1f30:	90 93 ad 0a 	sts	0x0AAD, r25	; 0x800aad <progScrollEnde+0x1>
    1f34:	80 93 ac 0a 	sts	0x0AAC, r24	; 0x800aac <progScrollEnde>
    1f38:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    1f3c:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    1f40:	8c 15       	cp	r24, r12
    1f42:	9d 05       	cpc	r25, r13
    1f44:	08 f4       	brcc	.+2      	; 0x1f48 <progScrollText(String, unsigned int, int, int, unsigned char)+0x7e>
    1f46:	68 c0       	rjmp	.+208    	; 0x2018 <progScrollText(String, unsigned int, int, int, unsigned char)+0x14e>
    1f48:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    1f4c:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    1f50:	85 e0       	ldi	r24, 0x05	; 5
    1f52:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    1f56:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1f5a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1f5e:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1f62:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1f66:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1f6a:	fc 01       	movw	r30, r24
    1f6c:	16 8a       	std	Z+22, r1	; 0x16
    1f6e:	61 e0       	ldi	r22, 0x01	; 1
    1f70:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Adafruit_GFX::setTextSize(unsigned char)>
    1f74:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1f78:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1f7c:	dc 01       	movw	r26, r24
    1f7e:	ed 91       	ld	r30, X+
    1f80:	fc 91       	ld	r31, X
    1f82:	00 8c       	ldd	r0, Z+24	; 0x18
    1f84:	f1 8d       	ldd	r31, Z+25	; 0x19
    1f86:	e0 2d       	mov	r30, r0
    1f88:	60 e0       	ldi	r22, 0x00	; 0
    1f8a:	09 95       	icall
    1f8c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1f90:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1f94:	01 97       	sbiw	r24, 0x01	; 1
    1f96:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1f9a:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1f9e:	20 91 ac 0a 	lds	r18, 0x0AAC	; 0x800aac <progScrollEnde>
    1fa2:	30 91 ad 0a 	lds	r19, 0x0AAD	; 0x800aad <progScrollEnde+0x1>
    1fa6:	31 95       	neg	r19
    1fa8:	21 95       	neg	r18
    1faa:	31 09       	sbc	r19, r1
    1fac:	82 17       	cp	r24, r18
    1fae:	93 07       	cpc	r25, r19
    1fb0:	34 f4       	brge	.+12     	; 0x1fbe <progScrollText(String, unsigned int, int, int, unsigned char)+0xf4>
    1fb2:	84 e1       	ldi	r24, 0x14	; 20
    1fb4:	90 e0       	ldi	r25, 0x00	; 0
    1fb6:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1fba:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1fbe:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <yield>
    1fc2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1fc6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    1fca:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    1fce:	e0 91 bb 10 	lds	r30, 0x10BB	; 0x8010bb <matrix>
    1fd2:	f0 91 bc 10 	lds	r31, 0x10BC	; 0x8010bc <matrix+0x1>
    1fd6:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1fda:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1fde:	94 87       	std	Z+12, r25	; 0x0c
    1fe0:	83 87       	std	Z+11, r24	; 0x0b
    1fe2:	8d e0       	ldi	r24, 0x0D	; 13
    1fe4:	90 e0       	ldi	r25, 0x00	; 0
    1fe6:	96 87       	std	Z+14, r25	; 0x0e
    1fe8:	85 87       	std	Z+13, r24	; 0x0d
    1fea:	d2 8b       	std	Z+18, r29	; 0x12
    1fec:	c1 8b       	std	Z+17, r28	; 0x11
    1fee:	d0 8b       	std	Z+16, r29	; 0x10
    1ff0:	c7 87       	std	Z+15, r28	; 0x0f
    1ff2:	b7 01       	movw	r22, r14
    1ff4:	cf 01       	movw	r24, r30
    1ff6:	0e 94 26 4c 	call	0x984c	; 0x984c <Print::print(String const&)>
    1ffa:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    1ffe:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2002:	df 91       	pop	r29
    2004:	cf 91       	pop	r28
    2006:	0f 91       	pop	r16
    2008:	ff 90       	pop	r15
    200a:	ef 90       	pop	r14
    200c:	df 90       	pop	r13
    200e:	cf 90       	pop	r12
    2010:	bf 90       	pop	r11
    2012:	af 90       	pop	r10
    2014:	0c 94 71 3d 	jmp	0x7ae2	; 0x7ae2 <FastLED_NeoMatrix::show()>
    2018:	df 91       	pop	r29
    201a:	cf 91       	pop	r28
    201c:	0f 91       	pop	r16
    201e:	ff 90       	pop	r15
    2020:	ef 90       	pop	r14
    2022:	df 90       	pop	r13
    2024:	cf 90       	pop	r12
    2026:	bf 90       	pop	r11
    2028:	af 90       	pop	r10
    202a:	08 95       	ret

0000202c <progShowROOTS(unsigned int, unsigned char)>:
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
    2030:	cf 93       	push	r28
    2032:	df 93       	push	r29
    2034:	8c 01       	movw	r16, r24
    2036:	c6 2f       	mov	r28, r22
    2038:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    203c:	81 11       	cpse	r24, r1
    203e:	0e c0       	rjmp	.+28     	; 0x205c <progShowROOTS(unsigned int, unsigned char)+0x30>
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	8c ec       	ldi	r24, 0xCC	; 204
    2044:	90 e1       	ldi	r25, 0x10	; 16
    2046:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    204a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    204e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    2052:	c0 93 b8 0a 	sts	0x0AB8, r28	; 0x800ab8 <nextSongPart>
    2056:	81 e0       	ldi	r24, 0x01	; 1
    2058:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    205c:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    2060:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2064:	84 3f       	cpi	r24, 0xF4	; 244
    2066:	91 40       	sbci	r25, 0x01	; 1
    2068:	08 f4       	brcc	.+2      	; 0x206c <progShowROOTS(unsigned int, unsigned char)+0x40>
    206a:	b1 c0       	rjmp	.+354    	; 0x21ce <__stack+0xcf>
    206c:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    2070:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2074:	8f e0       	ldi	r24, 0x0F	; 15
    2076:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    207a:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    207e:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2082:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    2086:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    208a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    208e:	dc 01       	movw	r26, r24
    2090:	56 96       	adiw	r26, 0x16	; 22
    2092:	1c 92       	st	X, r1
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Adafruit_GFX::setTextSize(unsigned char)>
    209a:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    209e:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    20a2:	dc 01       	movw	r26, r24
    20a4:	ed 91       	ld	r30, X+
    20a6:	fc 91       	ld	r31, X
    20a8:	00 8c       	ldd	r0, Z+24	; 0x18
    20aa:	f1 8d       	ldd	r31, Z+25	; 0x19
    20ac:	e0 2d       	mov	r30, r0
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	09 95       	icall
    20b2:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <yield>
    20b6:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    20ba:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    20be:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    20c2:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    20c6:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    20ca:	1c 86       	std	Y+12, r1	; 0x0c
    20cc:	1b 86       	std	Y+11, r1	; 0x0b
    20ce:	83 e0       	ldi	r24, 0x03	; 3
    20d0:	90 e0       	ldi	r25, 0x00	; 0
    20d2:	9e 87       	std	Y+14, r25	; 0x0e
    20d4:	8d 87       	std	Y+13, r24	; 0x0d
    20d6:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    20da:	9a 8b       	std	Y+18, r25	; 0x12
    20dc:	89 8b       	std	Y+17, r24	; 0x11
    20de:	98 8b       	std	Y+16, r25	; 0x10
    20e0:	8f 87       	std	Y+15, r24	; 0x0f
    20e2:	69 e1       	ldi	r22, 0x19	; 25
    20e4:	71 e0       	ldi	r23, 0x01	; 1
    20e6:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    20ea:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    20ee:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    20f2:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    20f6:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    20fa:	1c 86       	std	Y+12, r1	; 0x0c
    20fc:	1b 86       	std	Y+11, r1	; 0x0b
    20fe:	88 e0       	ldi	r24, 0x08	; 8
    2100:	90 e0       	ldi	r25, 0x00	; 0
    2102:	9e 87       	std	Y+14, r25	; 0x0e
    2104:	8d 87       	std	Y+13, r24	; 0x0d
    2106:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    210a:	9a 8b       	std	Y+18, r25	; 0x12
    210c:	89 8b       	std	Y+17, r24	; 0x11
    210e:	98 8b       	std	Y+16, r25	; 0x10
    2110:	8f 87       	std	Y+15, r24	; 0x0f
    2112:	6b e1       	ldi	r22, 0x1B	; 27
    2114:	71 e0       	ldi	r23, 0x01	; 1
    2116:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    211a:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    211e:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    2122:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    2126:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    212a:	84 e0       	ldi	r24, 0x04	; 4
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	9c 87       	std	Y+12, r25	; 0x0c
    2130:	8b 87       	std	Y+11, r24	; 0x0b
    2132:	0d e0       	ldi	r16, 0x0D	; 13
    2134:	10 e0       	ldi	r17, 0x00	; 0
    2136:	1e 87       	std	Y+14, r17	; 0x0e
    2138:	0d 87       	std	Y+13, r16	; 0x0d
    213a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    213e:	9a 8b       	std	Y+18, r25	; 0x12
    2140:	89 8b       	std	Y+17, r24	; 0x11
    2142:	98 8b       	std	Y+16, r25	; 0x10
    2144:	8f 87       	std	Y+15, r24	; 0x0f
    2146:	6b e1       	ldi	r22, 0x1B	; 27
    2148:	71 e0       	ldi	r23, 0x01	; 1
    214a:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    214e:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2152:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    2156:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    215a:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    215e:	8a e0       	ldi	r24, 0x0A	; 10
    2160:	90 e0       	ldi	r25, 0x00	; 0
    2162:	9c 87       	std	Y+12, r25	; 0x0c
    2164:	8b 87       	std	Y+11, r24	; 0x0b
    2166:	8e e0       	ldi	r24, 0x0E	; 14
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	9e 87       	std	Y+14, r25	; 0x0e
    216c:	8d 87       	std	Y+13, r24	; 0x0d
    216e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    2172:	9a 8b       	std	Y+18, r25	; 0x12
    2174:	89 8b       	std	Y+17, r24	; 0x11
    2176:	98 8b       	std	Y+16, r25	; 0x10
    2178:	8f 87       	std	Y+15, r24	; 0x0f
    217a:	6d e1       	ldi	r22, 0x1D	; 29
    217c:	71 e0       	ldi	r23, 0x01	; 1
    217e:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    2182:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2186:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    218a:	c0 91 bb 10 	lds	r28, 0x10BB	; 0x8010bb <matrix>
    218e:	d0 91 bc 10 	lds	r29, 0x10BC	; 0x8010bc <matrix+0x1>
    2192:	8f e0       	ldi	r24, 0x0F	; 15
    2194:	90 e0       	ldi	r25, 0x00	; 0
    2196:	9c 87       	std	Y+12, r25	; 0x0c
    2198:	8b 87       	std	Y+11, r24	; 0x0b
    219a:	1e 87       	std	Y+14, r17	; 0x0e
    219c:	0d 87       	std	Y+13, r16	; 0x0d
    219e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    21a2:	9a 8b       	std	Y+18, r25	; 0x12
    21a4:	89 8b       	std	Y+17, r24	; 0x11
    21a6:	98 8b       	std	Y+16, r25	; 0x10
    21a8:	8f 87       	std	Y+15, r24	; 0x0f
    21aa:	64 e7       	ldi	r22, 0x74	; 116
    21ac:	71 e0       	ldi	r23, 0x01	; 1
    21ae:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    21b2:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    21b6:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    21ba:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    21be:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    21c2:	df 91       	pop	r29
    21c4:	cf 91       	pop	r28
    21c6:	1f 91       	pop	r17
    21c8:	0f 91       	pop	r16
    21ca:	0c 94 71 3d 	jmp	0x7ae2	; 0x7ae2 <FastLED_NeoMatrix::show()>
    21ce:	df 91       	pop	r29
    21d0:	cf 91       	pop	r28
    21d2:	1f 91       	pop	r17
    21d4:	0f 91       	pop	r16
    21d6:	08 95       	ret

000021d8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    21d8:	8f 92       	push	r8
    21da:	9f 92       	push	r9
    21dc:	af 92       	push	r10
    21de:	bf 92       	push	r11
    21e0:	cf 92       	push	r12
    21e2:	df 92       	push	r13
    21e4:	ef 92       	push	r14
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	ec 01       	movw	r28, r24
    21f0:	5b 01       	movw	r10, r22
    21f2:	6a 01       	movw	r12, r20
    21f4:	49 01       	movw	r8, r18
    21f6:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    21fa:	81 11       	cpse	r24, r1
    21fc:	16 c0       	rjmp	.+44     	; 0x222a <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    21fe:	61 e0       	ldi	r22, 0x01	; 1
    2200:	8c ec       	ldi	r24, 0xCC	; 204
    2202:	90 e1       	ldi	r25, 0x10	; 16
    2204:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    2208:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    220c:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    2210:	e0 92 b8 0a 	sts	0x0AB8, r14	; 0x800ab8 <nextSongPart>
    2214:	81 e0       	ldi	r24, 0x01	; 1
    2216:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    221a:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <zaehlerWortArray+0x1>
    221e:	10 92 6f 0a 	sts	0x0A6F, r1	; 0x800a6f <zaehlerWortArray>
    2222:	d0 92 c0 0a 	sts	0x0AC0, r13	; 0x800ac0 <millisCounterTimer+0x1>
    2226:	c0 92 bf 0a 	sts	0x0ABF, r12	; 0x800abf <millisCounterTimer>
    222a:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    222e:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2232:	8c 15       	cp	r24, r12
    2234:	9d 05       	cpc	r25, r13
    2236:	08 f4       	brcc	.+2      	; 0x223a <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    2238:	5b c0       	rjmp	.+182    	; 0x22f0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    223a:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    223e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2242:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    2246:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    224a:	a8 16       	cp	r10, r24
    224c:	b9 06       	cpc	r11, r25
    224e:	0c f4       	brge	.+2      	; 0x2252 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    2250:	4f c0       	rjmp	.+158    	; 0x22f0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    2252:	85 e0       	ldi	r24, 0x05	; 5
    2254:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    2258:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    225c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2260:	0e 94 df 05 	call	0xbbe	; 0xbbe <Framebuffer_GFX::clear()>
    2264:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    2268:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    226c:	dc 01       	movw	r26, r24
    226e:	56 96       	adiw	r26, 0x16	; 22
    2270:	1c 92       	st	X, r1
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	0e 94 52 3d 	call	0x7aa4	; 0x7aa4 <Adafruit_GFX::setTextSize(unsigned char)>
    2278:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    227c:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    2280:	dc 01       	movw	r26, r24
    2282:	ed 91       	ld	r30, X+
    2284:	fc 91       	ld	r31, X
    2286:	00 8c       	ldd	r0, Z+24	; 0x18
    2288:	f1 8d       	ldd	r31, Z+25	; 0x19
    228a:	e0 2d       	mov	r30, r0
    228c:	60 e0       	ldi	r22, 0x00	; 0
    228e:	09 95       	icall
    2290:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <yield>
    2294:	e0 91 bb 10 	lds	r30, 0x10BB	; 0x8010bb <matrix>
    2298:	f0 91 bc 10 	lds	r31, 0x10BC	; 0x8010bc <matrix+0x1>
    229c:	82 e0       	ldi	r24, 0x02	; 2
    229e:	90 e0       	ldi	r25, 0x00	; 0
    22a0:	94 87       	std	Z+12, r25	; 0x0c
    22a2:	83 87       	std	Z+11, r24	; 0x0b
    22a4:	8d e0       	ldi	r24, 0x0D	; 13
    22a6:	90 e0       	ldi	r25, 0x00	; 0
    22a8:	96 87       	std	Z+14, r25	; 0x0e
    22aa:	85 87       	std	Z+13, r24	; 0x0d
    22ac:	12 8b       	std	Z+18, r17	; 0x12
    22ae:	01 8b       	std	Z+17, r16	; 0x11
    22b0:	10 8b       	std	Z+16, r17	; 0x10
    22b2:	07 87       	std	Z+15, r16	; 0x0f
    22b4:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    22b8:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    22bc:	27 e0       	ldi	r18, 0x07	; 7
    22be:	28 9f       	mul	r18, r24
    22c0:	b0 01       	movw	r22, r0
    22c2:	29 9f       	mul	r18, r25
    22c4:	70 0d       	add	r23, r0
    22c6:	11 24       	eor	r1, r1
    22c8:	6c 0f       	add	r22, r28
    22ca:	7d 1f       	adc	r23, r29
    22cc:	cf 01       	movw	r24, r30
    22ce:	0e 94 26 4c 	call	0x984c	; 0x984c <Print::print(String const&)>
    22d2:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    22d6:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    22da:	0e 94 71 3d 	call	0x7ae2	; 0x7ae2 <FastLED_NeoMatrix::show()>
    22de:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    22e2:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    22e6:	01 96       	adiw	r24, 0x01	; 1
    22e8:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <zaehlerWortArray+0x1>
    22ec:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <zaehlerWortArray>
    22f0:	df 91       	pop	r29
    22f2:	cf 91       	pop	r28
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	ef 90       	pop	r14
    22fa:	df 90       	pop	r13
    22fc:	cf 90       	pop	r12
    22fe:	bf 90       	pop	r11
    2300:	af 90       	pop	r10
    2302:	9f 90       	pop	r9
    2304:	8f 90       	pop	r8
    2306:	08 95       	ret

00002308 <SetupTotallyRandomPalette()>:
}

// This function fills the palette with totally random colors.
void SetupTotallyRandomPalette()
    2308:	bf 92       	push	r11
    230a:	cf 92       	push	r12
    230c:	df 92       	push	r13
    230e:	ef 92       	push	r14
    2310:	ff 92       	push	r15
    2312:	0f 93       	push	r16
    2314:	1f 93       	push	r17
    2316:	cf 93       	push	r28
    2318:	df 93       	push	r29
    231a:	00 d0       	rcall	.+0      	; 0x231c <SetupTotallyRandomPalette()+0x14>
    231c:	1f 92       	push	r1
    231e:	cd b7       	in	r28, 0x3d	; 61
    2320:	de b7       	in	r29, 0x3e	; 62
    2322:	08 e7       	ldi	r16, 0x78	; 120
    2324:	1a e0       	ldi	r17, 0x0A	; 10
    2326:	88 ea       	ldi	r24, 0xA8	; 168
    2328:	e8 2e       	mov	r14, r24
    232a:	8a e0       	ldi	r24, 0x0A	; 10
    232c:	f8 2e       	mov	r15, r24
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    232e:	95 e0       	ldi	r25, 0x05	; 5
    2330:	c9 2e       	mov	r12, r25
    2332:	98 e0       	ldi	r25, 0x08	; 8
    2334:	d9 2e       	mov	r13, r25
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2336:	bb 24       	eor	r11, r11
    2338:	ba 94       	dec	r11
    233a:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    233e:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    2342:	2c 9d       	mul	r18, r12
    2344:	c0 01       	movw	r24, r0
    2346:	2d 9d       	mul	r18, r13
    2348:	90 0d       	add	r25, r0
    234a:	3c 9d       	mul	r19, r12
    234c:	90 0d       	add	r25, r0
    234e:	11 24       	eor	r1, r1
    2350:	87 5e       	subi	r24, 0xE7	; 231
    2352:	99 4c       	sbci	r25, 0xC9	; 201
    2354:	8c 9d       	mul	r24, r12
    2356:	90 01       	movw	r18, r0
    2358:	8d 9d       	mul	r24, r13
    235a:	30 0d       	add	r19, r0
    235c:	9c 9d       	mul	r25, r12
    235e:	30 0d       	add	r19, r0
    2360:	11 24       	eor	r1, r1
    2362:	27 5e       	subi	r18, 0xE7	; 231
    2364:	39 4c       	sbci	r19, 0xC9	; 201
    2366:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    236a:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    236e:	23 0f       	add	r18, r19
    2370:	29 83       	std	Y+1, r18	; 0x01
    2372:	ba 82       	std	Y+2, r11	; 0x02
    2374:	89 0f       	add	r24, r25
    2376:	8b 83       	std	Y+3, r24	; 0x03
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2378:	b8 01       	movw	r22, r16
    237a:	ce 01       	movw	r24, r28
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	0e 94 81 43 	call	0x8702	; 0x8702 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2382:	0d 5f       	subi	r16, 0xFD	; 253
    2384:	1f 4f       	sbci	r17, 0xFF	; 255
{
    2386:	e0 16       	cp	r14, r16
    2388:	f1 06       	cpc	r15, r17
    238a:	b9 f6       	brne	.-82     	; 0x233a <SetupTotallyRandomPalette()+0x32>
	for (int i = 0; i < 16; i++) {
		currentPalette[i] = CHSV(random8(), 255, random8());
	}
    238c:	0f 90       	pop	r0
    238e:	0f 90       	pop	r0
    2390:	0f 90       	pop	r0
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	1f 91       	pop	r17
    2398:	0f 91       	pop	r16
    239a:	ff 90       	pop	r15
    239c:	ef 90       	pop	r14
    239e:	df 90       	pop	r13
    23a0:	cf 90       	pop	r12
    23a2:	bf 90       	pop	r11
    23a4:	08 95       	ret

000023a6 <SetupBlackAndWhiteStripedPalette()>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    23a6:	cf 93       	push	r28
    23a8:	df 93       	push	r29
    23aa:	00 d0       	rcall	.+0      	; 0x23ac <SetupBlackAndWhiteStripedPalette()+0x6>
    23ac:	1f 92       	push	r1
    23ae:	cd b7       	in	r28, 0x3d	; 61
    23b0:	de b7       	in	r29, 0x3e	; 62
    23b2:	19 82       	std	Y+1, r1	; 0x01
    23b4:	1a 82       	std	Y+2, r1	; 0x02
    23b6:	1b 82       	std	Y+3, r1	; 0x03
    23b8:	ae 01       	movw	r20, r28
    23ba:	4f 5f       	subi	r20, 0xFF	; 255
    23bc:	5f 4f       	sbci	r21, 0xFF	; 255
    23be:	60 e1       	ldi	r22, 0x10	; 16
    23c0:	70 e0       	ldi	r23, 0x00	; 0
    23c2:	88 e7       	ldi	r24, 0x78	; 120
    23c4:	9a e0       	ldi	r25, 0x0A	; 10
    23c6:	0e 94 60 40 	call	0x80c0	; 0x80c0 <fill_solid(CRGB*, int, CRGB const&)>
    23ca:	e8 e7       	ldi	r30, 0x78	; 120
    23cc:	fa e0       	ldi	r31, 0x0A	; 10
    23ce:	8f ef       	ldi	r24, 0xFF	; 255
    23d0:	80 83       	st	Z, r24
    23d2:	81 83       	std	Z+1, r24	; 0x01
    23d4:	82 83       	std	Z+2, r24	; 0x02
    23d6:	84 87       	std	Z+12, r24	; 0x0c
    23d8:	85 87       	std	Z+13, r24	; 0x0d
    23da:	86 87       	std	Z+14, r24	; 0x0e
    23dc:	80 8f       	std	Z+24, r24	; 0x18
    23de:	81 8f       	std	Z+25, r24	; 0x19
    23e0:	82 8f       	std	Z+26, r24	; 0x1a
    23e2:	84 a3       	std	Z+36, r24	; 0x24
    23e4:	85 a3       	std	Z+37, r24	; 0x25
    23e6:	86 a3       	std	Z+38, r24	; 0x26
    23e8:	0f 90       	pop	r0
    23ea:	0f 90       	pop	r0
    23ec:	0f 90       	pop	r0
    23ee:	df 91       	pop	r29
    23f0:	cf 91       	pop	r28
    23f2:	08 95       	ret

000023f4 <SetupPurpleAndGreenPalette()>:
    23f4:	1f 93       	push	r17
    23f6:	cf 93       	push	r28
    23f8:	df 93       	push	r29
    23fa:	cd b7       	in	r28, 0x3d	; 61
    23fc:	de b7       	in	r29, 0x3e	; 62
    23fe:	e6 97       	sbiw	r28, 0x36	; 54
    2400:	0f b6       	in	r0, 0x3f	; 63
    2402:	f8 94       	cli
    2404:	de bf       	out	0x3e, r29	; 62
    2406:	0f be       	out	0x3f, r0	; 63
    2408:	cd bf       	out	0x3d, r28	; 61
    240a:	80 ec       	ldi	r24, 0xC0	; 192
    240c:	89 83       	std	Y+1, r24	; 0x01
    240e:	1f ef       	ldi	r17, 0xFF	; 255
    2410:	1a 83       	std	Y+2, r17	; 0x02
    2412:	1b 83       	std	Y+3, r17	; 0x03
    2414:	be 01       	movw	r22, r28
    2416:	6c 5c       	subi	r22, 0xCC	; 204
    2418:	7f 4f       	sbci	r23, 0xFF	; 255
    241a:	ce 01       	movw	r24, r28
    241c:	01 96       	adiw	r24, 0x01	; 1
    241e:	0e 94 81 43 	call	0x8702	; 0x8702 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2422:	80 e6       	ldi	r24, 0x60	; 96
    2424:	89 83       	std	Y+1, r24	; 0x01
    2426:	1a 83       	std	Y+2, r17	; 0x02
    2428:	1b 83       	std	Y+3, r17	; 0x03
    242a:	be 01       	movw	r22, r28
    242c:	6f 5c       	subi	r22, 0xCF	; 207
    242e:	7f 4f       	sbci	r23, 0xFF	; 255
    2430:	ce 01       	movw	r24, r28
    2432:	01 96       	adiw	r24, 0x01	; 1
    2434:	0e 94 81 43 	call	0x8702	; 0x8702 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2438:	59 a9       	ldd	r21, Y+49	; 0x31
    243a:	59 83       	std	Y+1, r21	; 0x01
    243c:	4a a9       	ldd	r20, Y+50	; 0x32
    243e:	4a 83       	std	Y+2, r20	; 0x02
    2440:	3b a9       	ldd	r19, Y+51	; 0x33
    2442:	3b 83       	std	Y+3, r19	; 0x03
    2444:	5c 83       	std	Y+4, r21	; 0x04
    2446:	4d 83       	std	Y+5, r20	; 0x05
    2448:	3e 83       	std	Y+6, r19	; 0x06
    244a:	1f 82       	std	Y+7, r1	; 0x07
    244c:	18 86       	std	Y+8, r1	; 0x08
    244e:	19 86       	std	Y+9, r1	; 0x09
    2450:	1a 86       	std	Y+10, r1	; 0x0a
    2452:	1b 86       	std	Y+11, r1	; 0x0b
    2454:	1c 86       	std	Y+12, r1	; 0x0c
    2456:	2c a9       	ldd	r18, Y+52	; 0x34
    2458:	2d 87       	std	Y+13, r18	; 0x0d
    245a:	9d a9       	ldd	r25, Y+53	; 0x35
    245c:	9e 87       	std	Y+14, r25	; 0x0e
    245e:	8e a9       	ldd	r24, Y+54	; 0x36
    2460:	8f 87       	std	Y+15, r24	; 0x0f
    2462:	28 8b       	std	Y+16, r18	; 0x10
    2464:	99 8b       	std	Y+17, r25	; 0x11
    2466:	8a 8b       	std	Y+18, r24	; 0x12
    2468:	1b 8a       	std	Y+19, r1	; 0x13
    246a:	1c 8a       	std	Y+20, r1	; 0x14
    246c:	1d 8a       	std	Y+21, r1	; 0x15
    246e:	1e 8a       	std	Y+22, r1	; 0x16
    2470:	1f 8a       	std	Y+23, r1	; 0x17
    2472:	18 8e       	std	Y+24, r1	; 0x18
    2474:	59 8f       	std	Y+25, r21	; 0x19
    2476:	4a 8f       	std	Y+26, r20	; 0x1a
    2478:	3b 8f       	std	Y+27, r19	; 0x1b
    247a:	5c 8f       	std	Y+28, r21	; 0x1c
    247c:	4d 8f       	std	Y+29, r20	; 0x1d
    247e:	3e 8f       	std	Y+30, r19	; 0x1e
    2480:	1f 8e       	std	Y+31, r1	; 0x1f
    2482:	18 a2       	std	Y+32, r1	; 0x20
    2484:	19 a2       	std	Y+33, r1	; 0x21
    2486:	1a a2       	std	Y+34, r1	; 0x22
    2488:	1b a2       	std	Y+35, r1	; 0x23
    248a:	1c a2       	std	Y+36, r1	; 0x24
    248c:	2d a3       	std	Y+37, r18	; 0x25
    248e:	9e a3       	std	Y+38, r25	; 0x26
    2490:	8f a3       	std	Y+39, r24	; 0x27
    2492:	28 a7       	std	Y+40, r18	; 0x28
    2494:	99 a7       	std	Y+41, r25	; 0x29
    2496:	8a a7       	std	Y+42, r24	; 0x2a
    2498:	1b a6       	std	Y+43, r1	; 0x2b
    249a:	1c a6       	std	Y+44, r1	; 0x2c
    249c:	1d a6       	std	Y+45, r1	; 0x2d
    249e:	1e a6       	std	Y+46, r1	; 0x2e
    24a0:	1f a6       	std	Y+47, r1	; 0x2f
    24a2:	18 aa       	std	Y+48, r1	; 0x30
    24a4:	40 e3       	ldi	r20, 0x30	; 48
    24a6:	50 e0       	ldi	r21, 0x00	; 0
    24a8:	be 01       	movw	r22, r28
    24aa:	6f 5f       	subi	r22, 0xFF	; 255
    24ac:	7f 4f       	sbci	r23, 0xFF	; 255
    24ae:	88 e7       	ldi	r24, 0x78	; 120
    24b0:	9a e0       	ldi	r25, 0x0A	; 10
    24b2:	0e 94 4d 44 	call	0x889a	; 0x889a <memmove8>
    24b6:	e6 96       	adiw	r28, 0x36	; 54
    24b8:	0f b6       	in	r0, 0x3f	; 63
    24ba:	f8 94       	cli
    24bc:	de bf       	out	0x3e, r29	; 62
    24be:	0f be       	out	0x3f, r0	; 63
    24c0:	cd bf       	out	0x3d, r28	; 61
    24c2:	df 91       	pop	r29
    24c4:	cf 91       	pop	r28
    24c6:	1f 91       	pop	r17
    24c8:	08 95       	ret

000024ca <FillLEDsFromPaletteColors(unsigned char)>:
    24ca:	df 92       	push	r13
    24cc:	ef 92       	push	r14
    24ce:	ff 92       	push	r15
    24d0:	0f 93       	push	r16
    24d2:	1f 93       	push	r17
    24d4:	cf 93       	push	r28
    24d6:	df 93       	push	r29
    24d8:	00 d0       	rcall	.+0      	; 0x24da <FillLEDsFromPaletteColors(unsigned char)+0x10>
    24da:	1f 92       	push	r1
    24dc:	cd b7       	in	r28, 0x3d	; 61
    24de:	de b7       	in	r29, 0x3e	; 62
    24e0:	d8 2e       	mov	r13, r24
    24e2:	8d ec       	ldi	r24, 0xCD	; 205
    24e4:	e8 2e       	mov	r14, r24
    24e6:	8a e0       	ldi	r24, 0x0A	; 10
    24e8:	f8 2e       	mov	r15, r24
    24ea:	00 91 76 0a 	lds	r16, 0x0A76	; 0x800a76 <currentBlending>
    24ee:	10 91 77 0a 	lds	r17, 0x0A77	; 0x800a77 <currentBlending+0x1>
    24f2:	2f ef       	ldi	r18, 0xFF	; 255
    24f4:	4d 2d       	mov	r20, r13
    24f6:	68 e7       	ldi	r22, 0x78	; 120
    24f8:	7a e0       	ldi	r23, 0x0A	; 10
    24fa:	ce 01       	movw	r24, r28
    24fc:	01 96       	adiw	r24, 0x01	; 1
    24fe:	0e 94 75 40 	call	0x80ea	; 0x80ea <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2502:	89 81       	ldd	r24, Y+1	; 0x01
    2504:	f7 01       	movw	r30, r14
    2506:	80 83       	st	Z, r24
    2508:	8a 81       	ldd	r24, Y+2	; 0x02
    250a:	81 83       	std	Z+1, r24	; 0x01
    250c:	8b 81       	ldd	r24, Y+3	; 0x03
    250e:	82 83       	std	Z+2, r24	; 0x02
    2510:	f3 e0       	ldi	r31, 0x03	; 3
    2512:	df 0e       	add	r13, r31
    2514:	83 e0       	ldi	r24, 0x03	; 3
    2516:	e8 0e       	add	r14, r24
    2518:	f1 1c       	adc	r15, r1
    251a:	ef e0       	ldi	r30, 0x0F	; 15
    251c:	ee 16       	cp	r14, r30
    251e:	ee e0       	ldi	r30, 0x0E	; 14
    2520:	fe 06       	cpc	r15, r30
    2522:	19 f7       	brne	.-58     	; 0x24ea <FillLEDsFromPaletteColors(unsigned char)+0x20>
    2524:	0f 90       	pop	r0
    2526:	0f 90       	pop	r0
    2528:	0f 90       	pop	r0
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	08 95       	ret

0000253a <progPalette(unsigned int, unsigned char, unsigned char)>:
    253a:	0f 93       	push	r16
    253c:	1f 93       	push	r17
    253e:	cf 93       	push	r28
    2540:	df 93       	push	r29
    2542:	8c 01       	movw	r16, r24
    2544:	c6 2f       	mov	r28, r22
    2546:	d4 2f       	mov	r29, r20
    2548:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    254c:	81 11       	cpse	r24, r1
    254e:	43 c0       	rjmp	.+134    	; 0x25d6 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2550:	61 e0       	ldi	r22, 0x01	; 1
    2552:	8c ec       	ldi	r24, 0xCC	; 204
    2554:	90 e1       	ldi	r25, 0x10	; 16
    2556:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    255a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    255e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    2562:	d0 93 b8 0a 	sts	0x0AB8, r29	; 0x800ab8 <nextSongPart>
    2566:	81 e0       	ldi	r24, 0x01	; 1
    2568:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    256c:	cc 30       	cpi	r28, 0x0C	; 12
    256e:	08 f0       	brcs	.+2      	; 0x2572 <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    2570:	32 c0       	rjmp	.+100    	; 0x25d6 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2572:	ec 2f       	mov	r30, r28
    2574:	f0 e0       	ldi	r31, 0x00	; 0
    2576:	e1 54       	subi	r30, 0x41	; 65
    2578:	fd 4e       	sbci	r31, 0xED	; 237
    257a:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    257e:	cb 12       	cpse	r12, r27
    2580:	d2 12       	cpse	r13, r18
    2582:	d9 12       	cpse	r13, r25
    2584:	dc 12       	cpse	r13, r28
    2586:	e4 12       	cpse	r14, r20
    2588:	e6 12       	cpse	r14, r22
    258a:	03 13       	cpse	r16, r19
    258c:	05 13       	cpse	r16, r21
    258e:	08 13       	cpse	r16, r24
    2590:	0b 13       	cpse	r16, r27
    2592:	0e 13       	cpse	r16, r30
    2594:	11 13       	cpse	r17, r17
    2596:	68 eb       	ldi	r22, 0xB8	; 184
    2598:	76 e0       	ldi	r23, 0x06	; 6
    259a:	88 e7       	ldi	r24, 0x78	; 120
    259c:	9a e0       	ldi	r25, 0x0A	; 10
    259e:	0e 94 bc 05 	call	0xb78	; 0xb78 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    25a2:	0b c0       	rjmp	.+22     	; 0x25ba <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    25a4:	68 e7       	ldi	r22, 0x78	; 120
    25a6:	76 e0       	ldi	r23, 0x06	; 6
    25a8:	88 e7       	ldi	r24, 0x78	; 120
    25aa:	9a e0       	ldi	r25, 0x0A	; 10
    25ac:	0e 94 bc 05 	call	0xb78	; 0xb78 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    25b0:	0e c0       	rjmp	.+28     	; 0x25ce <progPalette(unsigned int, unsigned char, unsigned char)+0x94>
    25b2:	68 e7       	ldi	r22, 0x78	; 120
    25b4:	76 e0       	ldi	r23, 0x06	; 6
    25b6:	f1 cf       	rjmp	.-30     	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    25b8:	1d df       	rcall	.-454    	; 0x23f4 <SetupPurpleAndGreenPalette()>
    25ba:	81 e0       	ldi	r24, 0x01	; 1
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <currentBlending+0x1>
    25c2:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <currentBlending>
    25c6:	07 c0       	rjmp	.+14     	; 0x25d6 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    25c8:	9f de       	rcall	.-706    	; 0x2308 <SetupTotallyRandomPalette()>
    25ca:	f7 cf       	rjmp	.-18     	; 0x25ba <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    25cc:	ec de       	rcall	.-552    	; 0x23a6 <SetupBlackAndWhiteStripedPalette()>
    25ce:	10 92 77 0a 	sts	0x0A77, r1	; 0x800a77 <currentBlending+0x1>
    25d2:	10 92 76 0a 	sts	0x0A76, r1	; 0x800a76 <currentBlending>
    25d6:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    25da:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    25de:	01 96       	adiw	r24, 0x01	; 1
    25e0:	89 3e       	cpi	r24, 0xE9	; 233
    25e2:	23 e0       	ldi	r18, 0x03	; 3
    25e4:	92 07       	cpc	r25, r18
    25e6:	04 f5       	brge	.+64     	; 0x2628 <progPalette(unsigned int, unsigned char, unsigned char)+0xee>
    25e8:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    25ec:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    25f0:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    25f4:	6a df       	rcall	.-300    	; 0x24ca <FillLEDsFromPaletteColors(unsigned char)>
    25f6:	8c ec       	ldi	r24, 0xCC	; 204
    25f8:	90 e1       	ldi	r25, 0x10	; 16
    25fa:	df 91       	pop	r29
    25fc:	cf 91       	pop	r28
    25fe:	1f 91       	pop	r17
    2600:	0f 91       	pop	r16
    2602:	0c 94 d7 05 	jmp	0xbae	; 0xbae <CFastLED::show()>
    2606:	cf de       	rcall	.-610    	; 0x23a6 <SetupBlackAndWhiteStripedPalette()>
    2608:	d8 cf       	rjmp	.-80     	; 0x25ba <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    260a:	68 ef       	ldi	r22, 0xF8	; 248
    260c:	76 e0       	ldi	r23, 0x06	; 6
    260e:	c5 cf       	rjmp	.-118    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2610:	68 e3       	ldi	r22, 0x38	; 56
    2612:	76 e0       	ldi	r23, 0x06	; 6
    2614:	c2 cf       	rjmp	.-124    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2616:	6f ec       	ldi	r22, 0xCF	; 207
    2618:	75 e0       	ldi	r23, 0x05	; 5
    261a:	c6 cf       	rjmp	.-116    	; 0x25a8 <progPalette(unsigned int, unsigned char, unsigned char)+0x6e>
    261c:	6f ec       	ldi	r22, 0xCF	; 207
    261e:	75 e0       	ldi	r23, 0x05	; 5
    2620:	bc cf       	rjmp	.-136    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2622:	68 e9       	ldi	r22, 0x98	; 152
    2624:	70 e0       	ldi	r23, 0x00	; 0
    2626:	b9 cf       	rjmp	.-142    	; 0x259a <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2628:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    262c:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2630:	df cf       	rjmp	.-66     	; 0x25f0 <progPalette(unsigned int, unsigned char, unsigned char)+0xb6>

00002632 <getMatrixColor(int)>:
    2632:	dc 01       	movw	r26, r24
    2634:	60 31       	cpi	r22, 0x10	; 16
    2636:	71 05       	cpc	r23, r1
    2638:	08 f0       	brcs	.+2      	; 0x263c <getMatrixColor(int)+0xa>
    263a:	52 c0       	rjmp	.+164    	; 0x26e0 <getMatrixColor(int)+0xae>
    263c:	fb 01       	movw	r30, r22
    263e:	ed 5d       	subi	r30, 0xDD	; 221
    2640:	fc 4e       	sbci	r31, 0xEC	; 236
    2642:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    2646:	70 13       	cpse	r23, r16
    2648:	33 13       	cpse	r19, r19
    264a:	33 13       	cpse	r19, r19
    264c:	3e 13       	cpse	r19, r30
    264e:	42 13       	cpse	r20, r18
    2650:	46 13       	cpse	r20, r22
    2652:	4a 13       	cpse	r20, r26
    2654:	4e 13       	cpse	r20, r30
    2656:	52 13       	cpse	r21, r18
    2658:	56 13       	cpse	r21, r22
    265a:	5a 13       	cpse	r21, r26
    265c:	5e 13       	cpse	r21, r30
    265e:	62 13       	cpse	r22, r18
    2660:	64 13       	cpse	r22, r20
    2662:	68 13       	cpse	r22, r24
    2664:	6a 13       	cpse	r22, r26
    2666:	81 e0       	ldi	r24, 0x01	; 1
    2668:	8c 93       	st	X, r24
    266a:	99 e1       	ldi	r25, 0x19	; 25
    266c:	11 96       	adiw	r26, 0x01	; 1
    266e:	9c 93       	st	X, r25
    2670:	11 97       	sbiw	r26, 0x01	; 1
    2672:	12 96       	adiw	r26, 0x02	; 2
    2674:	8c 93       	st	X, r24
    2676:	12 97       	sbiw	r26, 0x02	; 2
    2678:	cd 01       	movw	r24, r26
    267a:	08 95       	ret
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	8c 93       	st	X, r24
    2680:	98 e2       	ldi	r25, 0x28	; 40
    2682:	f4 cf       	rjmp	.-24     	; 0x266c <getMatrixColor(int)+0x3a>
    2684:	81 e0       	ldi	r24, 0x01	; 1
    2686:	8c 93       	st	X, r24
    2688:	90 e5       	ldi	r25, 0x50	; 80
    268a:	f0 cf       	rjmp	.-32     	; 0x266c <getMatrixColor(int)+0x3a>
    268c:	81 e0       	ldi	r24, 0x01	; 1
    268e:	8c 93       	st	X, r24
    2690:	98 e7       	ldi	r25, 0x78	; 120
    2692:	ec cf       	rjmp	.-40     	; 0x266c <getMatrixColor(int)+0x3a>
    2694:	81 e0       	ldi	r24, 0x01	; 1
    2696:	8c 93       	st	X, r24
    2698:	96 e9       	ldi	r25, 0x96	; 150
    269a:	e8 cf       	rjmp	.-48     	; 0x266c <getMatrixColor(int)+0x3a>
    269c:	81 e0       	ldi	r24, 0x01	; 1
    269e:	8c 93       	st	X, r24
    26a0:	98 ec       	ldi	r25, 0xC8	; 200
    26a2:	e4 cf       	rjmp	.-56     	; 0x266c <getMatrixColor(int)+0x3a>
    26a4:	85 e0       	ldi	r24, 0x05	; 5
    26a6:	8c 93       	st	X, r24
    26a8:	9f ef       	ldi	r25, 0xFF	; 255
    26aa:	e0 cf       	rjmp	.-64     	; 0x266c <getMatrixColor(int)+0x3a>
    26ac:	8a e0       	ldi	r24, 0x0A	; 10
    26ae:	8c 93       	st	X, r24
    26b0:	94 eb       	ldi	r25, 0xB4	; 180
    26b2:	dc cf       	rjmp	.-72     	; 0x266c <getMatrixColor(int)+0x3a>
    26b4:	8a e0       	ldi	r24, 0x0A	; 10
    26b6:	8c 93       	st	X, r24
    26b8:	90 ea       	ldi	r25, 0xA0	; 160
    26ba:	d8 cf       	rjmp	.-80     	; 0x266c <getMatrixColor(int)+0x3a>
    26bc:	84 e1       	ldi	r24, 0x14	; 20
    26be:	8c 93       	st	X, r24
    26c0:	9c e8       	ldi	r25, 0x8C	; 140
    26c2:	d4 cf       	rjmp	.-88     	; 0x266c <getMatrixColor(int)+0x3a>
    26c4:	8e e1       	ldi	r24, 0x1E	; 30
    26c6:	e3 cf       	rjmp	.-58     	; 0x268e <getMatrixColor(int)+0x5c>
    26c8:	82 e3       	ldi	r24, 0x32	; 50
    26ca:	8c 93       	st	X, r24
    26cc:	94 e6       	ldi	r25, 0x64	; 100
    26ce:	ce cf       	rjmp	.-100    	; 0x266c <getMatrixColor(int)+0x3a>
    26d0:	84 e6       	ldi	r24, 0x64	; 100
    26d2:	e1 cf       	rjmp	.-62     	; 0x2696 <getMatrixColor(int)+0x64>
    26d4:	84 eb       	ldi	r24, 0xB4	; 180
    26d6:	8c 93       	st	X, r24
    26d8:	11 96       	adiw	r26, 0x01	; 1
    26da:	8c 93       	st	X, r24
    26dc:	11 97       	sbiw	r26, 0x01	; 1
    26de:	c9 cf       	rjmp	.-110    	; 0x2672 <getMatrixColor(int)+0x40>
    26e0:	1c 92       	st	X, r1
    26e2:	11 96       	adiw	r26, 0x01	; 1
    26e4:	1c 92       	st	X, r1
    26e6:	11 97       	sbiw	r26, 0x01	; 1
    26e8:	12 96       	adiw	r26, 0x02	; 2
    26ea:	1c 92       	st	X, r1
    26ec:	12 97       	sbiw	r26, 0x02	; 2
    26ee:	c4 cf       	rjmp	.-120    	; 0x2678 <getMatrixColor(int)+0x46>

000026f0 <progMatrixHorizontal(unsigned int, unsigned char)>:
    26f0:	cf 92       	push	r12
    26f2:	df 92       	push	r13
    26f4:	ef 92       	push	r14
    26f6:	ff 92       	push	r15
    26f8:	0f 93       	push	r16
    26fa:	1f 93       	push	r17
    26fc:	cf 93       	push	r28
    26fe:	df 93       	push	r29
    2700:	00 d0       	rcall	.+0      	; 0x2702 <progMatrixHorizontal(unsigned int, unsigned char)+0x12>
    2702:	1f 92       	push	r1
    2704:	cd b7       	in	r28, 0x3d	; 61
    2706:	de b7       	in	r29, 0x3e	; 62
    2708:	7c 01       	movw	r14, r24
    270a:	16 2f       	mov	r17, r22
    270c:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    2710:	81 11       	cpse	r24, r1
    2712:	1e c0       	rjmp	.+60     	; 0x2750 <progMatrixHorizontal(unsigned int, unsigned char)+0x60>
    2714:	61 e0       	ldi	r22, 0x01	; 1
    2716:	8c ec       	ldi	r24, 0xCC	; 204
    2718:	90 e1       	ldi	r25, 0x10	; 16
    271a:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    271e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    2722:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    2726:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
    272a:	81 e0       	ldi	r24, 0x01	; 1
    272c:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    2730:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    2734:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2738:	8b e1       	ldi	r24, 0x1B	; 27
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <progMatrixZaehler+0x1>
    2740:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <progMatrixZaehler>
    2744:	84 e6       	ldi	r24, 0x64	; 100
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <millisCounterTimer+0x1>
    274c:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <millisCounterTimer>
    2750:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    2754:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2758:	84 36       	cpi	r24, 0x64	; 100
    275a:	91 05       	cpc	r25, r1
    275c:	08 f4       	brcc	.+2      	; 0x2760 <progMatrixHorizontal(unsigned int, unsigned char)+0x70>
    275e:	ce c3       	rjmp	.+1948   	; 0x2efc <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>
    2760:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    2764:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2768:	e0 90 b0 0a 	lds	r14, 0x0AB0	; 0x800ab0 <zaehler>
    276c:	f0 90 b1 0a 	lds	r15, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2770:	00 e1       	ldi	r16, 0x10	; 16
    2772:	10 e0       	ldi	r17, 0x00	; 0
    2774:	f7 fc       	sbrc	r15, 7
    2776:	1c c0       	rjmp	.+56     	; 0x27b0 <progMatrixHorizontal(unsigned int, unsigned char)+0xc0>
    2778:	01 50       	subi	r16, 0x01	; 1
    277a:	11 09       	sbc	r17, r1
    277c:	02 30       	cpi	r16, 0x02	; 2
    277e:	11 05       	cpc	r17, r1
    2780:	14 f4       	brge	.+4      	; 0x2786 <progMatrixHorizontal(unsigned int, unsigned char)+0x96>
    2782:	10 e0       	ldi	r17, 0x00	; 0
    2784:	00 e0       	ldi	r16, 0x00	; 0
    2786:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    278a:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    278e:	b8 01       	movw	r22, r16
    2790:	ce 01       	movw	r24, r28
    2792:	01 96       	adiw	r24, 0x01	; 1
    2794:	4e df       	rcall	.-356    	; 0x2632 <getMatrixColor(int)>
    2796:	9e 01       	movw	r18, r28
    2798:	2f 5f       	subi	r18, 0xFF	; 255
    279a:	3f 4f       	sbci	r19, 0xFF	; 255
    279c:	a7 01       	movw	r20, r14
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	60 e0       	ldi	r22, 0x00	; 0
    27a2:	c6 01       	movw	r24, r12
    27a4:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    27a8:	81 e0       	ldi	r24, 0x01	; 1
    27aa:	e8 1a       	sub	r14, r24
    27ac:	f1 08       	sbc	r15, r1
    27ae:	e2 cf       	rjmp	.-60     	; 0x2774 <progMatrixHorizontal(unsigned int, unsigned char)+0x84>
    27b0:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    27b4:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    27b8:	04 51       	subi	r16, 0x14	; 20
    27ba:	11 09       	sbc	r17, r1
    27bc:	60 e1       	ldi	r22, 0x10	; 16
    27be:	e6 2e       	mov	r14, r22
    27c0:	f1 2c       	mov	r15, r1
    27c2:	0c 3e       	cpi	r16, 0xEC	; 236
    27c4:	8f ef       	ldi	r24, 0xFF	; 255
    27c6:	18 07       	cpc	r17, r24
    27c8:	ec f0       	brlt	.+58     	; 0x2804 <progMatrixHorizontal(unsigned int, unsigned char)+0x114>
    27ca:	81 e0       	ldi	r24, 0x01	; 1
    27cc:	e8 1a       	sub	r14, r24
    27ce:	f1 08       	sbc	r15, r1
    27d0:	82 e0       	ldi	r24, 0x02	; 2
    27d2:	e8 16       	cp	r14, r24
    27d4:	f1 04       	cpc	r15, r1
    27d6:	14 f4       	brge	.+4      	; 0x27dc <progMatrixHorizontal(unsigned int, unsigned char)+0xec>
    27d8:	f1 2c       	mov	r15, r1
    27da:	e1 2c       	mov	r14, r1
    27dc:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    27e0:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    27e4:	b7 01       	movw	r22, r14
    27e6:	ce 01       	movw	r24, r28
    27e8:	01 96       	adiw	r24, 0x01	; 1
    27ea:	23 df       	rcall	.-442    	; 0x2632 <getMatrixColor(int)>
    27ec:	9e 01       	movw	r18, r28
    27ee:	2f 5f       	subi	r18, 0xFF	; 255
    27f0:	3f 4f       	sbci	r19, 0xFF	; 255
    27f2:	a8 01       	movw	r20, r16
    27f4:	62 e0       	ldi	r22, 0x02	; 2
    27f6:	70 e0       	ldi	r23, 0x00	; 0
    27f8:	c6 01       	movw	r24, r12
    27fa:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    27fe:	01 50       	subi	r16, 0x01	; 1
    2800:	11 09       	sbc	r17, r1
    2802:	df cf       	rjmp	.-66     	; 0x27c2 <progMatrixHorizontal(unsigned int, unsigned char)+0xd2>
    2804:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2808:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    280c:	0f 50       	subi	r16, 0x0F	; 15
    280e:	11 09       	sbc	r17, r1
    2810:	50 e1       	ldi	r21, 0x10	; 16
    2812:	e5 2e       	mov	r14, r21
    2814:	f1 2c       	mov	r15, r1
    2816:	01 3f       	cpi	r16, 0xF1	; 241
    2818:	8f ef       	ldi	r24, 0xFF	; 255
    281a:	18 07       	cpc	r17, r24
    281c:	ec f0       	brlt	.+58     	; 0x2858 <progMatrixHorizontal(unsigned int, unsigned char)+0x168>
    281e:	81 e0       	ldi	r24, 0x01	; 1
    2820:	e8 1a       	sub	r14, r24
    2822:	f1 08       	sbc	r15, r1
    2824:	82 e0       	ldi	r24, 0x02	; 2
    2826:	e8 16       	cp	r14, r24
    2828:	f1 04       	cpc	r15, r1
    282a:	14 f4       	brge	.+4      	; 0x2830 <progMatrixHorizontal(unsigned int, unsigned char)+0x140>
    282c:	f1 2c       	mov	r15, r1
    282e:	e1 2c       	mov	r14, r1
    2830:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2834:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2838:	b7 01       	movw	r22, r14
    283a:	ce 01       	movw	r24, r28
    283c:	01 96       	adiw	r24, 0x01	; 1
    283e:	f9 de       	rcall	.-526    	; 0x2632 <getMatrixColor(int)>
    2840:	9e 01       	movw	r18, r28
    2842:	2f 5f       	subi	r18, 0xFF	; 255
    2844:	3f 4f       	sbci	r19, 0xFF	; 255
    2846:	a8 01       	movw	r20, r16
    2848:	64 e0       	ldi	r22, 0x04	; 4
    284a:	70 e0       	ldi	r23, 0x00	; 0
    284c:	c6 01       	movw	r24, r12
    284e:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2852:	01 50       	subi	r16, 0x01	; 1
    2854:	11 09       	sbc	r17, r1
    2856:	df cf       	rjmp	.-66     	; 0x2816 <progMatrixHorizontal(unsigned int, unsigned char)+0x126>
    2858:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    285c:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2860:	08 50       	subi	r16, 0x08	; 8
    2862:	11 09       	sbc	r17, r1
    2864:	40 e1       	ldi	r20, 0x10	; 16
    2866:	e4 2e       	mov	r14, r20
    2868:	f1 2c       	mov	r15, r1
    286a:	08 3f       	cpi	r16, 0xF8	; 248
    286c:	8f ef       	ldi	r24, 0xFF	; 255
    286e:	18 07       	cpc	r17, r24
    2870:	ec f0       	brlt	.+58     	; 0x28ac <progMatrixHorizontal(unsigned int, unsigned char)+0x1bc>
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	e8 1a       	sub	r14, r24
    2876:	f1 08       	sbc	r15, r1
    2878:	82 e0       	ldi	r24, 0x02	; 2
    287a:	e8 16       	cp	r14, r24
    287c:	f1 04       	cpc	r15, r1
    287e:	14 f4       	brge	.+4      	; 0x2884 <progMatrixHorizontal(unsigned int, unsigned char)+0x194>
    2880:	f1 2c       	mov	r15, r1
    2882:	e1 2c       	mov	r14, r1
    2884:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2888:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    288c:	b7 01       	movw	r22, r14
    288e:	ce 01       	movw	r24, r28
    2890:	01 96       	adiw	r24, 0x01	; 1
    2892:	cf de       	rcall	.-610    	; 0x2632 <getMatrixColor(int)>
    2894:	9e 01       	movw	r18, r28
    2896:	2f 5f       	subi	r18, 0xFF	; 255
    2898:	3f 4f       	sbci	r19, 0xFF	; 255
    289a:	a8 01       	movw	r20, r16
    289c:	66 e0       	ldi	r22, 0x06	; 6
    289e:	70 e0       	ldi	r23, 0x00	; 0
    28a0:	c6 01       	movw	r24, r12
    28a2:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    28a6:	01 50       	subi	r16, 0x01	; 1
    28a8:	11 09       	sbc	r17, r1
    28aa:	df cf       	rjmp	.-66     	; 0x286a <progMatrixHorizontal(unsigned int, unsigned char)+0x17a>
    28ac:	e0 90 b0 0a 	lds	r14, 0x0AB0	; 0x800ab0 <zaehler>
    28b0:	f0 90 b1 0a 	lds	r15, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    28b4:	00 e1       	ldi	r16, 0x10	; 16
    28b6:	10 e0       	ldi	r17, 0x00	; 0
    28b8:	f7 fc       	sbrc	r15, 7
    28ba:	1c c0       	rjmp	.+56     	; 0x28f4 <progMatrixHorizontal(unsigned int, unsigned char)+0x204>
    28bc:	01 50       	subi	r16, 0x01	; 1
    28be:	11 09       	sbc	r17, r1
    28c0:	02 30       	cpi	r16, 0x02	; 2
    28c2:	11 05       	cpc	r17, r1
    28c4:	14 f4       	brge	.+4      	; 0x28ca <progMatrixHorizontal(unsigned int, unsigned char)+0x1da>
    28c6:	10 e0       	ldi	r17, 0x00	; 0
    28c8:	00 e0       	ldi	r16, 0x00	; 0
    28ca:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    28ce:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    28d2:	b8 01       	movw	r22, r16
    28d4:	ce 01       	movw	r24, r28
    28d6:	01 96       	adiw	r24, 0x01	; 1
    28d8:	ac de       	rcall	.-680    	; 0x2632 <getMatrixColor(int)>
    28da:	9e 01       	movw	r18, r28
    28dc:	2f 5f       	subi	r18, 0xFF	; 255
    28de:	3f 4f       	sbci	r19, 0xFF	; 255
    28e0:	a7 01       	movw	r20, r14
    28e2:	68 e0       	ldi	r22, 0x08	; 8
    28e4:	70 e0       	ldi	r23, 0x00	; 0
    28e6:	c6 01       	movw	r24, r12
    28e8:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	e8 1a       	sub	r14, r24
    28f0:	f1 08       	sbc	r15, r1
    28f2:	e2 cf       	rjmp	.-60     	; 0x28b8 <progMatrixHorizontal(unsigned int, unsigned char)+0x1c8>
    28f4:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    28f8:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    28fc:	0e 50       	subi	r16, 0x0E	; 14
    28fe:	11 09       	sbc	r17, r1
    2900:	30 e1       	ldi	r19, 0x10	; 16
    2902:	e3 2e       	mov	r14, r19
    2904:	f1 2c       	mov	r15, r1
    2906:	02 3f       	cpi	r16, 0xF2	; 242
    2908:	8f ef       	ldi	r24, 0xFF	; 255
    290a:	18 07       	cpc	r17, r24
    290c:	ec f0       	brlt	.+58     	; 0x2948 <progMatrixHorizontal(unsigned int, unsigned char)+0x258>
    290e:	81 e0       	ldi	r24, 0x01	; 1
    2910:	e8 1a       	sub	r14, r24
    2912:	f1 08       	sbc	r15, r1
    2914:	82 e0       	ldi	r24, 0x02	; 2
    2916:	e8 16       	cp	r14, r24
    2918:	f1 04       	cpc	r15, r1
    291a:	14 f4       	brge	.+4      	; 0x2920 <progMatrixHorizontal(unsigned int, unsigned char)+0x230>
    291c:	f1 2c       	mov	r15, r1
    291e:	e1 2c       	mov	r14, r1
    2920:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2924:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2928:	b7 01       	movw	r22, r14
    292a:	ce 01       	movw	r24, r28
    292c:	01 96       	adiw	r24, 0x01	; 1
    292e:	81 de       	rcall	.-766    	; 0x2632 <getMatrixColor(int)>
    2930:	9e 01       	movw	r18, r28
    2932:	2f 5f       	subi	r18, 0xFF	; 255
    2934:	3f 4f       	sbci	r19, 0xFF	; 255
    2936:	a8 01       	movw	r20, r16
    2938:	6a e0       	ldi	r22, 0x0A	; 10
    293a:	70 e0       	ldi	r23, 0x00	; 0
    293c:	c6 01       	movw	r24, r12
    293e:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2942:	01 50       	subi	r16, 0x01	; 1
    2944:	11 09       	sbc	r17, r1
    2946:	df cf       	rjmp	.-66     	; 0x2906 <progMatrixHorizontal(unsigned int, unsigned char)+0x216>
    2948:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    294c:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2950:	05 51       	subi	r16, 0x15	; 21
    2952:	11 09       	sbc	r17, r1
    2954:	20 e1       	ldi	r18, 0x10	; 16
    2956:	e2 2e       	mov	r14, r18
    2958:	f1 2c       	mov	r15, r1
    295a:	0b 3e       	cpi	r16, 0xEB	; 235
    295c:	8f ef       	ldi	r24, 0xFF	; 255
    295e:	18 07       	cpc	r17, r24
    2960:	ec f0       	brlt	.+58     	; 0x299c <progMatrixHorizontal(unsigned int, unsigned char)+0x2ac>
    2962:	81 e0       	ldi	r24, 0x01	; 1
    2964:	e8 1a       	sub	r14, r24
    2966:	f1 08       	sbc	r15, r1
    2968:	82 e0       	ldi	r24, 0x02	; 2
    296a:	e8 16       	cp	r14, r24
    296c:	f1 04       	cpc	r15, r1
    296e:	14 f4       	brge	.+4      	; 0x2974 <progMatrixHorizontal(unsigned int, unsigned char)+0x284>
    2970:	f1 2c       	mov	r15, r1
    2972:	e1 2c       	mov	r14, r1
    2974:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2978:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    297c:	b7 01       	movw	r22, r14
    297e:	ce 01       	movw	r24, r28
    2980:	01 96       	adiw	r24, 0x01	; 1
    2982:	57 de       	rcall	.-850    	; 0x2632 <getMatrixColor(int)>
    2984:	9e 01       	movw	r18, r28
    2986:	2f 5f       	subi	r18, 0xFF	; 255
    2988:	3f 4f       	sbci	r19, 0xFF	; 255
    298a:	a8 01       	movw	r20, r16
    298c:	6c e0       	ldi	r22, 0x0C	; 12
    298e:	70 e0       	ldi	r23, 0x00	; 0
    2990:	c6 01       	movw	r24, r12
    2992:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2996:	01 50       	subi	r16, 0x01	; 1
    2998:	11 09       	sbc	r17, r1
    299a:	df cf       	rjmp	.-66     	; 0x295a <progMatrixHorizontal(unsigned int, unsigned char)+0x26a>
    299c:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    29a0:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    29a4:	09 50       	subi	r16, 0x09	; 9
    29a6:	11 09       	sbc	r17, r1
    29a8:	90 e1       	ldi	r25, 0x10	; 16
    29aa:	e9 2e       	mov	r14, r25
    29ac:	f1 2c       	mov	r15, r1
    29ae:	07 3f       	cpi	r16, 0xF7	; 247
    29b0:	8f ef       	ldi	r24, 0xFF	; 255
    29b2:	18 07       	cpc	r17, r24
    29b4:	ec f0       	brlt	.+58     	; 0x29f0 <progMatrixHorizontal(unsigned int, unsigned char)+0x300>
    29b6:	81 e0       	ldi	r24, 0x01	; 1
    29b8:	e8 1a       	sub	r14, r24
    29ba:	f1 08       	sbc	r15, r1
    29bc:	82 e0       	ldi	r24, 0x02	; 2
    29be:	e8 16       	cp	r14, r24
    29c0:	f1 04       	cpc	r15, r1
    29c2:	14 f4       	brge	.+4      	; 0x29c8 <progMatrixHorizontal(unsigned int, unsigned char)+0x2d8>
    29c4:	f1 2c       	mov	r15, r1
    29c6:	e1 2c       	mov	r14, r1
    29c8:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    29cc:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    29d0:	b7 01       	movw	r22, r14
    29d2:	ce 01       	movw	r24, r28
    29d4:	01 96       	adiw	r24, 0x01	; 1
    29d6:	2d de       	rcall	.-934    	; 0x2632 <getMatrixColor(int)>
    29d8:	9e 01       	movw	r18, r28
    29da:	2f 5f       	subi	r18, 0xFF	; 255
    29dc:	3f 4f       	sbci	r19, 0xFF	; 255
    29de:	a8 01       	movw	r20, r16
    29e0:	6e e0       	ldi	r22, 0x0E	; 14
    29e2:	70 e0       	ldi	r23, 0x00	; 0
    29e4:	c6 01       	movw	r24, r12
    29e6:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    29ea:	01 50       	subi	r16, 0x01	; 1
    29ec:	11 09       	sbc	r17, r1
    29ee:	df cf       	rjmp	.-66     	; 0x29ae <progMatrixHorizontal(unsigned int, unsigned char)+0x2be>
    29f0:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    29f4:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    29f8:	01 50       	subi	r16, 0x01	; 1
    29fa:	11 09       	sbc	r17, r1
    29fc:	80 e1       	ldi	r24, 0x10	; 16
    29fe:	e8 2e       	mov	r14, r24
    2a00:	f1 2c       	mov	r15, r1
    2a02:	0f 3f       	cpi	r16, 0xFF	; 255
    2a04:	8f ef       	ldi	r24, 0xFF	; 255
    2a06:	18 07       	cpc	r17, r24
    2a08:	ec f0       	brlt	.+58     	; 0x2a44 <progMatrixHorizontal(unsigned int, unsigned char)+0x354>
    2a0a:	81 e0       	ldi	r24, 0x01	; 1
    2a0c:	e8 1a       	sub	r14, r24
    2a0e:	f1 08       	sbc	r15, r1
    2a10:	82 e0       	ldi	r24, 0x02	; 2
    2a12:	e8 16       	cp	r14, r24
    2a14:	f1 04       	cpc	r15, r1
    2a16:	14 f4       	brge	.+4      	; 0x2a1c <progMatrixHorizontal(unsigned int, unsigned char)+0x32c>
    2a18:	f1 2c       	mov	r15, r1
    2a1a:	e1 2c       	mov	r14, r1
    2a1c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2a20:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2a24:	b7 01       	movw	r22, r14
    2a26:	ce 01       	movw	r24, r28
    2a28:	01 96       	adiw	r24, 0x01	; 1
    2a2a:	03 de       	rcall	.-1018   	; 0x2632 <getMatrixColor(int)>
    2a2c:	9e 01       	movw	r18, r28
    2a2e:	2f 5f       	subi	r18, 0xFF	; 255
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	a8 01       	movw	r20, r16
    2a34:	60 e1       	ldi	r22, 0x10	; 16
    2a36:	70 e0       	ldi	r23, 0x00	; 0
    2a38:	c6 01       	movw	r24, r12
    2a3a:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a3e:	01 50       	subi	r16, 0x01	; 1
    2a40:	11 09       	sbc	r17, r1
    2a42:	df cf       	rjmp	.-66     	; 0x2a02 <progMatrixHorizontal(unsigned int, unsigned char)+0x312>
    2a44:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2a48:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2a4c:	00 51       	subi	r16, 0x10	; 16
    2a4e:	11 09       	sbc	r17, r1
    2a50:	b0 e1       	ldi	r27, 0x10	; 16
    2a52:	eb 2e       	mov	r14, r27
    2a54:	f1 2c       	mov	r15, r1
    2a56:	00 3f       	cpi	r16, 0xF0	; 240
    2a58:	8f ef       	ldi	r24, 0xFF	; 255
    2a5a:	18 07       	cpc	r17, r24
    2a5c:	ec f0       	brlt	.+58     	; 0x2a98 <progMatrixHorizontal(unsigned int, unsigned char)+0x3a8>
    2a5e:	81 e0       	ldi	r24, 0x01	; 1
    2a60:	e8 1a       	sub	r14, r24
    2a62:	f1 08       	sbc	r15, r1
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	e8 16       	cp	r14, r24
    2a68:	f1 04       	cpc	r15, r1
    2a6a:	14 f4       	brge	.+4      	; 0x2a70 <progMatrixHorizontal(unsigned int, unsigned char)+0x380>
    2a6c:	f1 2c       	mov	r15, r1
    2a6e:	e1 2c       	mov	r14, r1
    2a70:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2a74:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2a78:	b7 01       	movw	r22, r14
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	d9 dd       	rcall	.-1102   	; 0x2632 <getMatrixColor(int)>
    2a80:	9e 01       	movw	r18, r28
    2a82:	2f 5f       	subi	r18, 0xFF	; 255
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	a8 01       	movw	r20, r16
    2a88:	62 e1       	ldi	r22, 0x12	; 18
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	c6 01       	movw	r24, r12
    2a8e:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a92:	01 50       	subi	r16, 0x01	; 1
    2a94:	11 09       	sbc	r17, r1
    2a96:	df cf       	rjmp	.-66     	; 0x2a56 <progMatrixHorizontal(unsigned int, unsigned char)+0x366>
    2a98:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2a9c:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2aa0:	07 51       	subi	r16, 0x17	; 23
    2aa2:	11 09       	sbc	r17, r1
    2aa4:	a0 e1       	ldi	r26, 0x10	; 16
    2aa6:	ea 2e       	mov	r14, r26
    2aa8:	f1 2c       	mov	r15, r1
    2aaa:	09 3e       	cpi	r16, 0xE9	; 233
    2aac:	8f ef       	ldi	r24, 0xFF	; 255
    2aae:	18 07       	cpc	r17, r24
    2ab0:	ec f0       	brlt	.+58     	; 0x2aec <progMatrixHorizontal(unsigned int, unsigned char)+0x3fc>
    2ab2:	81 e0       	ldi	r24, 0x01	; 1
    2ab4:	e8 1a       	sub	r14, r24
    2ab6:	f1 08       	sbc	r15, r1
    2ab8:	82 e0       	ldi	r24, 0x02	; 2
    2aba:	e8 16       	cp	r14, r24
    2abc:	f1 04       	cpc	r15, r1
    2abe:	14 f4       	brge	.+4      	; 0x2ac4 <progMatrixHorizontal(unsigned int, unsigned char)+0x3d4>
    2ac0:	f1 2c       	mov	r15, r1
    2ac2:	e1 2c       	mov	r14, r1
    2ac4:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2ac8:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2acc:	b7 01       	movw	r22, r14
    2ace:	ce 01       	movw	r24, r28
    2ad0:	01 96       	adiw	r24, 0x01	; 1
    2ad2:	af dd       	rcall	.-1186   	; 0x2632 <getMatrixColor(int)>
    2ad4:	9e 01       	movw	r18, r28
    2ad6:	2f 5f       	subi	r18, 0xFF	; 255
    2ad8:	3f 4f       	sbci	r19, 0xFF	; 255
    2ada:	a8 01       	movw	r20, r16
    2adc:	64 e1       	ldi	r22, 0x14	; 20
    2ade:	70 e0       	ldi	r23, 0x00	; 0
    2ae0:	c6 01       	movw	r24, r12
    2ae2:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ae6:	01 50       	subi	r16, 0x01	; 1
    2ae8:	11 09       	sbc	r17, r1
    2aea:	df cf       	rjmp	.-66     	; 0x2aaa <progMatrixHorizontal(unsigned int, unsigned char)+0x3ba>
    2aec:	00 91 b0 0a 	lds	r16, 0x0AB0	; 0x800ab0 <zaehler>
    2af0:	10 91 b1 0a 	lds	r17, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2af4:	0b 50       	subi	r16, 0x0B	; 11
    2af6:	11 09       	sbc	r17, r1
    2af8:	f0 e1       	ldi	r31, 0x10	; 16
    2afa:	ef 2e       	mov	r14, r31
    2afc:	f1 2c       	mov	r15, r1
    2afe:	05 3f       	cpi	r16, 0xF5	; 245
    2b00:	8f ef       	ldi	r24, 0xFF	; 255
    2b02:	18 07       	cpc	r17, r24
    2b04:	ec f0       	brlt	.+58     	; 0x2b40 <progMatrixHorizontal(unsigned int, unsigned char)+0x450>
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	e8 1a       	sub	r14, r24
    2b0a:	f1 08       	sbc	r15, r1
    2b0c:	82 e0       	ldi	r24, 0x02	; 2
    2b0e:	e8 16       	cp	r14, r24
    2b10:	f1 04       	cpc	r15, r1
    2b12:	14 f4       	brge	.+4      	; 0x2b18 <progMatrixHorizontal(unsigned int, unsigned char)+0x428>
    2b14:	f1 2c       	mov	r15, r1
    2b16:	e1 2c       	mov	r14, r1
    2b18:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2b1c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2b20:	b7 01       	movw	r22, r14
    2b22:	ce 01       	movw	r24, r28
    2b24:	01 96       	adiw	r24, 0x01	; 1
    2b26:	85 dd       	rcall	.-1270   	; 0x2632 <getMatrixColor(int)>
    2b28:	9e 01       	movw	r18, r28
    2b2a:	2f 5f       	subi	r18, 0xFF	; 255
    2b2c:	3f 4f       	sbci	r19, 0xFF	; 255
    2b2e:	a8 01       	movw	r20, r16
    2b30:	66 e1       	ldi	r22, 0x16	; 22
    2b32:	70 e0       	ldi	r23, 0x00	; 0
    2b34:	c6 01       	movw	r24, r12
    2b36:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b3a:	01 50       	subi	r16, 0x01	; 1
    2b3c:	11 09       	sbc	r17, r1
    2b3e:	df cf       	rjmp	.-66     	; 0x2afe <progMatrixHorizontal(unsigned int, unsigned char)+0x40e>
    2b40:	e0 90 ae 0a 	lds	r14, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2b44:	f0 90 af 0a 	lds	r15, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2b48:	00 e1       	ldi	r16, 0x10	; 16
    2b4a:	10 e0       	ldi	r17, 0x00	; 0
    2b4c:	f7 fc       	sbrc	r15, 7
    2b4e:	1c c0       	rjmp	.+56     	; 0x2b88 <progMatrixHorizontal(unsigned int, unsigned char)+0x498>
    2b50:	01 50       	subi	r16, 0x01	; 1
    2b52:	11 09       	sbc	r17, r1
    2b54:	02 30       	cpi	r16, 0x02	; 2
    2b56:	11 05       	cpc	r17, r1
    2b58:	14 f4       	brge	.+4      	; 0x2b5e <progMatrixHorizontal(unsigned int, unsigned char)+0x46e>
    2b5a:	10 e0       	ldi	r17, 0x00	; 0
    2b5c:	00 e0       	ldi	r16, 0x00	; 0
    2b5e:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2b62:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2b66:	b8 01       	movw	r22, r16
    2b68:	ce 01       	movw	r24, r28
    2b6a:	01 96       	adiw	r24, 0x01	; 1
    2b6c:	62 dd       	rcall	.-1340   	; 0x2632 <getMatrixColor(int)>
    2b6e:	9e 01       	movw	r18, r28
    2b70:	2f 5f       	subi	r18, 0xFF	; 255
    2b72:	3f 4f       	sbci	r19, 0xFF	; 255
    2b74:	a7 01       	movw	r20, r14
    2b76:	61 e0       	ldi	r22, 0x01	; 1
    2b78:	70 e0       	ldi	r23, 0x00	; 0
    2b7a:	c6 01       	movw	r24, r12
    2b7c:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	e8 1a       	sub	r14, r24
    2b84:	f1 08       	sbc	r15, r1
    2b86:	e2 cf       	rjmp	.-60     	; 0x2b4c <progMatrixHorizontal(unsigned int, unsigned char)+0x45c>
    2b88:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2b8c:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2b90:	04 51       	subi	r16, 0x14	; 20
    2b92:	11 09       	sbc	r17, r1
    2b94:	e0 e1       	ldi	r30, 0x10	; 16
    2b96:	ee 2e       	mov	r14, r30
    2b98:	f1 2c       	mov	r15, r1
    2b9a:	0c 3e       	cpi	r16, 0xEC	; 236
    2b9c:	8f ef       	ldi	r24, 0xFF	; 255
    2b9e:	18 07       	cpc	r17, r24
    2ba0:	ec f0       	brlt	.+58     	; 0x2bdc <progMatrixHorizontal(unsigned int, unsigned char)+0x4ec>
    2ba2:	81 e0       	ldi	r24, 0x01	; 1
    2ba4:	e8 1a       	sub	r14, r24
    2ba6:	f1 08       	sbc	r15, r1
    2ba8:	82 e0       	ldi	r24, 0x02	; 2
    2baa:	e8 16       	cp	r14, r24
    2bac:	f1 04       	cpc	r15, r1
    2bae:	14 f4       	brge	.+4      	; 0x2bb4 <progMatrixHorizontal(unsigned int, unsigned char)+0x4c4>
    2bb0:	f1 2c       	mov	r15, r1
    2bb2:	e1 2c       	mov	r14, r1
    2bb4:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2bb8:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2bbc:	b7 01       	movw	r22, r14
    2bbe:	ce 01       	movw	r24, r28
    2bc0:	01 96       	adiw	r24, 0x01	; 1
    2bc2:	37 dd       	rcall	.-1426   	; 0x2632 <getMatrixColor(int)>
    2bc4:	9e 01       	movw	r18, r28
    2bc6:	2f 5f       	subi	r18, 0xFF	; 255
    2bc8:	3f 4f       	sbci	r19, 0xFF	; 255
    2bca:	a8 01       	movw	r20, r16
    2bcc:	63 e0       	ldi	r22, 0x03	; 3
    2bce:	70 e0       	ldi	r23, 0x00	; 0
    2bd0:	c6 01       	movw	r24, r12
    2bd2:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2bd6:	01 50       	subi	r16, 0x01	; 1
    2bd8:	11 09       	sbc	r17, r1
    2bda:	df cf       	rjmp	.-66     	; 0x2b9a <progMatrixHorizontal(unsigned int, unsigned char)+0x4aa>
    2bdc:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2be0:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2be4:	0f 50       	subi	r16, 0x0F	; 15
    2be6:	11 09       	sbc	r17, r1
    2be8:	70 e1       	ldi	r23, 0x10	; 16
    2bea:	e7 2e       	mov	r14, r23
    2bec:	f1 2c       	mov	r15, r1
    2bee:	01 3f       	cpi	r16, 0xF1	; 241
    2bf0:	8f ef       	ldi	r24, 0xFF	; 255
    2bf2:	18 07       	cpc	r17, r24
    2bf4:	ec f0       	brlt	.+58     	; 0x2c30 <progMatrixHorizontal(unsigned int, unsigned char)+0x540>
    2bf6:	81 e0       	ldi	r24, 0x01	; 1
    2bf8:	e8 1a       	sub	r14, r24
    2bfa:	f1 08       	sbc	r15, r1
    2bfc:	82 e0       	ldi	r24, 0x02	; 2
    2bfe:	e8 16       	cp	r14, r24
    2c00:	f1 04       	cpc	r15, r1
    2c02:	14 f4       	brge	.+4      	; 0x2c08 <progMatrixHorizontal(unsigned int, unsigned char)+0x518>
    2c04:	f1 2c       	mov	r15, r1
    2c06:	e1 2c       	mov	r14, r1
    2c08:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2c0c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2c10:	b7 01       	movw	r22, r14
    2c12:	ce 01       	movw	r24, r28
    2c14:	01 96       	adiw	r24, 0x01	; 1
    2c16:	0d dd       	rcall	.-1510   	; 0x2632 <getMatrixColor(int)>
    2c18:	9e 01       	movw	r18, r28
    2c1a:	2f 5f       	subi	r18, 0xFF	; 255
    2c1c:	3f 4f       	sbci	r19, 0xFF	; 255
    2c1e:	a8 01       	movw	r20, r16
    2c20:	65 e0       	ldi	r22, 0x05	; 5
    2c22:	70 e0       	ldi	r23, 0x00	; 0
    2c24:	c6 01       	movw	r24, r12
    2c26:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c2a:	01 50       	subi	r16, 0x01	; 1
    2c2c:	11 09       	sbc	r17, r1
    2c2e:	df cf       	rjmp	.-66     	; 0x2bee <progMatrixHorizontal(unsigned int, unsigned char)+0x4fe>
    2c30:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2c34:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2c38:	08 50       	subi	r16, 0x08	; 8
    2c3a:	11 09       	sbc	r17, r1
    2c3c:	60 e1       	ldi	r22, 0x10	; 16
    2c3e:	e6 2e       	mov	r14, r22
    2c40:	f1 2c       	mov	r15, r1
    2c42:	08 3f       	cpi	r16, 0xF8	; 248
    2c44:	8f ef       	ldi	r24, 0xFF	; 255
    2c46:	18 07       	cpc	r17, r24
    2c48:	ec f0       	brlt	.+58     	; 0x2c84 <progMatrixHorizontal(unsigned int, unsigned char)+0x594>
    2c4a:	81 e0       	ldi	r24, 0x01	; 1
    2c4c:	e8 1a       	sub	r14, r24
    2c4e:	f1 08       	sbc	r15, r1
    2c50:	82 e0       	ldi	r24, 0x02	; 2
    2c52:	e8 16       	cp	r14, r24
    2c54:	f1 04       	cpc	r15, r1
    2c56:	14 f4       	brge	.+4      	; 0x2c5c <progMatrixHorizontal(unsigned int, unsigned char)+0x56c>
    2c58:	f1 2c       	mov	r15, r1
    2c5a:	e1 2c       	mov	r14, r1
    2c5c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2c60:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2c64:	b7 01       	movw	r22, r14
    2c66:	ce 01       	movw	r24, r28
    2c68:	01 96       	adiw	r24, 0x01	; 1
    2c6a:	e3 dc       	rcall	.-1594   	; 0x2632 <getMatrixColor(int)>
    2c6c:	9e 01       	movw	r18, r28
    2c6e:	2f 5f       	subi	r18, 0xFF	; 255
    2c70:	3f 4f       	sbci	r19, 0xFF	; 255
    2c72:	a8 01       	movw	r20, r16
    2c74:	67 e0       	ldi	r22, 0x07	; 7
    2c76:	70 e0       	ldi	r23, 0x00	; 0
    2c78:	c6 01       	movw	r24, r12
    2c7a:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c7e:	01 50       	subi	r16, 0x01	; 1
    2c80:	11 09       	sbc	r17, r1
    2c82:	df cf       	rjmp	.-66     	; 0x2c42 <progMatrixHorizontal(unsigned int, unsigned char)+0x552>
    2c84:	e0 90 ae 0a 	lds	r14, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2c88:	f0 90 af 0a 	lds	r15, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2c8c:	00 e1       	ldi	r16, 0x10	; 16
    2c8e:	10 e0       	ldi	r17, 0x00	; 0
    2c90:	f7 fc       	sbrc	r15, 7
    2c92:	1c c0       	rjmp	.+56     	; 0x2ccc <progMatrixHorizontal(unsigned int, unsigned char)+0x5dc>
    2c94:	01 50       	subi	r16, 0x01	; 1
    2c96:	11 09       	sbc	r17, r1
    2c98:	02 30       	cpi	r16, 0x02	; 2
    2c9a:	11 05       	cpc	r17, r1
    2c9c:	14 f4       	brge	.+4      	; 0x2ca2 <progMatrixHorizontal(unsigned int, unsigned char)+0x5b2>
    2c9e:	10 e0       	ldi	r17, 0x00	; 0
    2ca0:	00 e0       	ldi	r16, 0x00	; 0
    2ca2:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2ca6:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2caa:	b8 01       	movw	r22, r16
    2cac:	ce 01       	movw	r24, r28
    2cae:	01 96       	adiw	r24, 0x01	; 1
    2cb0:	c0 dc       	rcall	.-1664   	; 0x2632 <getMatrixColor(int)>
    2cb2:	9e 01       	movw	r18, r28
    2cb4:	2f 5f       	subi	r18, 0xFF	; 255
    2cb6:	3f 4f       	sbci	r19, 0xFF	; 255
    2cb8:	a7 01       	movw	r20, r14
    2cba:	69 e0       	ldi	r22, 0x09	; 9
    2cbc:	70 e0       	ldi	r23, 0x00	; 0
    2cbe:	c6 01       	movw	r24, r12
    2cc0:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	e8 1a       	sub	r14, r24
    2cc8:	f1 08       	sbc	r15, r1
    2cca:	e2 cf       	rjmp	.-60     	; 0x2c90 <progMatrixHorizontal(unsigned int, unsigned char)+0x5a0>
    2ccc:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2cd0:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2cd4:	0e 50       	subi	r16, 0x0E	; 14
    2cd6:	11 09       	sbc	r17, r1
    2cd8:	50 e1       	ldi	r21, 0x10	; 16
    2cda:	e5 2e       	mov	r14, r21
    2cdc:	f1 2c       	mov	r15, r1
    2cde:	02 3f       	cpi	r16, 0xF2	; 242
    2ce0:	8f ef       	ldi	r24, 0xFF	; 255
    2ce2:	18 07       	cpc	r17, r24
    2ce4:	ec f0       	brlt	.+58     	; 0x2d20 <progMatrixHorizontal(unsigned int, unsigned char)+0x630>
    2ce6:	81 e0       	ldi	r24, 0x01	; 1
    2ce8:	e8 1a       	sub	r14, r24
    2cea:	f1 08       	sbc	r15, r1
    2cec:	82 e0       	ldi	r24, 0x02	; 2
    2cee:	e8 16       	cp	r14, r24
    2cf0:	f1 04       	cpc	r15, r1
    2cf2:	14 f4       	brge	.+4      	; 0x2cf8 <progMatrixHorizontal(unsigned int, unsigned char)+0x608>
    2cf4:	f1 2c       	mov	r15, r1
    2cf6:	e1 2c       	mov	r14, r1
    2cf8:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2cfc:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2d00:	b7 01       	movw	r22, r14
    2d02:	ce 01       	movw	r24, r28
    2d04:	01 96       	adiw	r24, 0x01	; 1
    2d06:	95 dc       	rcall	.-1750   	; 0x2632 <getMatrixColor(int)>
    2d08:	9e 01       	movw	r18, r28
    2d0a:	2f 5f       	subi	r18, 0xFF	; 255
    2d0c:	3f 4f       	sbci	r19, 0xFF	; 255
    2d0e:	a8 01       	movw	r20, r16
    2d10:	6b e0       	ldi	r22, 0x0B	; 11
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	c6 01       	movw	r24, r12
    2d16:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2d1a:	01 50       	subi	r16, 0x01	; 1
    2d1c:	11 09       	sbc	r17, r1
    2d1e:	df cf       	rjmp	.-66     	; 0x2cde <progMatrixHorizontal(unsigned int, unsigned char)+0x5ee>
    2d20:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2d24:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2d28:	05 51       	subi	r16, 0x15	; 21
    2d2a:	11 09       	sbc	r17, r1
    2d2c:	40 e1       	ldi	r20, 0x10	; 16
    2d2e:	e4 2e       	mov	r14, r20
    2d30:	f1 2c       	mov	r15, r1
    2d32:	0b 3e       	cpi	r16, 0xEB	; 235
    2d34:	8f ef       	ldi	r24, 0xFF	; 255
    2d36:	18 07       	cpc	r17, r24
    2d38:	ec f0       	brlt	.+58     	; 0x2d74 <progMatrixHorizontal(unsigned int, unsigned char)+0x684>
    2d3a:	81 e0       	ldi	r24, 0x01	; 1
    2d3c:	e8 1a       	sub	r14, r24
    2d3e:	f1 08       	sbc	r15, r1
    2d40:	82 e0       	ldi	r24, 0x02	; 2
    2d42:	e8 16       	cp	r14, r24
    2d44:	f1 04       	cpc	r15, r1
    2d46:	14 f4       	brge	.+4      	; 0x2d4c <progMatrixHorizontal(unsigned int, unsigned char)+0x65c>
    2d48:	f1 2c       	mov	r15, r1
    2d4a:	e1 2c       	mov	r14, r1
    2d4c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2d50:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2d54:	b7 01       	movw	r22, r14
    2d56:	ce 01       	movw	r24, r28
    2d58:	01 96       	adiw	r24, 0x01	; 1
    2d5a:	6b dc       	rcall	.-1834   	; 0x2632 <getMatrixColor(int)>
    2d5c:	9e 01       	movw	r18, r28
    2d5e:	2f 5f       	subi	r18, 0xFF	; 255
    2d60:	3f 4f       	sbci	r19, 0xFF	; 255
    2d62:	a8 01       	movw	r20, r16
    2d64:	6d e0       	ldi	r22, 0x0D	; 13
    2d66:	70 e0       	ldi	r23, 0x00	; 0
    2d68:	c6 01       	movw	r24, r12
    2d6a:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2d6e:	01 50       	subi	r16, 0x01	; 1
    2d70:	11 09       	sbc	r17, r1
    2d72:	df cf       	rjmp	.-66     	; 0x2d32 <progMatrixHorizontal(unsigned int, unsigned char)+0x642>
    2d74:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2d78:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2d7c:	09 50       	subi	r16, 0x09	; 9
    2d7e:	11 09       	sbc	r17, r1
    2d80:	30 e1       	ldi	r19, 0x10	; 16
    2d82:	e3 2e       	mov	r14, r19
    2d84:	f1 2c       	mov	r15, r1
    2d86:	07 3f       	cpi	r16, 0xF7	; 247
    2d88:	8f ef       	ldi	r24, 0xFF	; 255
    2d8a:	18 07       	cpc	r17, r24
    2d8c:	ec f0       	brlt	.+58     	; 0x2dc8 <progMatrixHorizontal(unsigned int, unsigned char)+0x6d8>
    2d8e:	81 e0       	ldi	r24, 0x01	; 1
    2d90:	e8 1a       	sub	r14, r24
    2d92:	f1 08       	sbc	r15, r1
    2d94:	82 e0       	ldi	r24, 0x02	; 2
    2d96:	e8 16       	cp	r14, r24
    2d98:	f1 04       	cpc	r15, r1
    2d9a:	14 f4       	brge	.+4      	; 0x2da0 <progMatrixHorizontal(unsigned int, unsigned char)+0x6b0>
    2d9c:	f1 2c       	mov	r15, r1
    2d9e:	e1 2c       	mov	r14, r1
    2da0:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2da4:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2da8:	b7 01       	movw	r22, r14
    2daa:	ce 01       	movw	r24, r28
    2dac:	01 96       	adiw	r24, 0x01	; 1
    2dae:	41 dc       	rcall	.-1918   	; 0x2632 <getMatrixColor(int)>
    2db0:	9e 01       	movw	r18, r28
    2db2:	2f 5f       	subi	r18, 0xFF	; 255
    2db4:	3f 4f       	sbci	r19, 0xFF	; 255
    2db6:	a8 01       	movw	r20, r16
    2db8:	6f e0       	ldi	r22, 0x0F	; 15
    2dba:	70 e0       	ldi	r23, 0x00	; 0
    2dbc:	c6 01       	movw	r24, r12
    2dbe:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2dc2:	01 50       	subi	r16, 0x01	; 1
    2dc4:	11 09       	sbc	r17, r1
    2dc6:	df cf       	rjmp	.-66     	; 0x2d86 <progMatrixHorizontal(unsigned int, unsigned char)+0x696>
    2dc8:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2dcc:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2dd0:	01 50       	subi	r16, 0x01	; 1
    2dd2:	11 09       	sbc	r17, r1
    2dd4:	20 e1       	ldi	r18, 0x10	; 16
    2dd6:	e2 2e       	mov	r14, r18
    2dd8:	f1 2c       	mov	r15, r1
    2dda:	0f 3f       	cpi	r16, 0xFF	; 255
    2ddc:	8f ef       	ldi	r24, 0xFF	; 255
    2dde:	18 07       	cpc	r17, r24
    2de0:	ec f0       	brlt	.+58     	; 0x2e1c <progMatrixHorizontal(unsigned int, unsigned char)+0x72c>
    2de2:	81 e0       	ldi	r24, 0x01	; 1
    2de4:	e8 1a       	sub	r14, r24
    2de6:	f1 08       	sbc	r15, r1
    2de8:	82 e0       	ldi	r24, 0x02	; 2
    2dea:	e8 16       	cp	r14, r24
    2dec:	f1 04       	cpc	r15, r1
    2dee:	14 f4       	brge	.+4      	; 0x2df4 <progMatrixHorizontal(unsigned int, unsigned char)+0x704>
    2df0:	f1 2c       	mov	r15, r1
    2df2:	e1 2c       	mov	r14, r1
    2df4:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2df8:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2dfc:	b7 01       	movw	r22, r14
    2dfe:	ce 01       	movw	r24, r28
    2e00:	01 96       	adiw	r24, 0x01	; 1
    2e02:	17 dc       	rcall	.-2002   	; 0x2632 <getMatrixColor(int)>
    2e04:	9e 01       	movw	r18, r28
    2e06:	2f 5f       	subi	r18, 0xFF	; 255
    2e08:	3f 4f       	sbci	r19, 0xFF	; 255
    2e0a:	a8 01       	movw	r20, r16
    2e0c:	61 e1       	ldi	r22, 0x11	; 17
    2e0e:	70 e0       	ldi	r23, 0x00	; 0
    2e10:	c6 01       	movw	r24, r12
    2e12:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2e16:	01 50       	subi	r16, 0x01	; 1
    2e18:	11 09       	sbc	r17, r1
    2e1a:	df cf       	rjmp	.-66     	; 0x2dda <progMatrixHorizontal(unsigned int, unsigned char)+0x6ea>
    2e1c:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2e20:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2e24:	00 51       	subi	r16, 0x10	; 16
    2e26:	11 09       	sbc	r17, r1
    2e28:	90 e1       	ldi	r25, 0x10	; 16
    2e2a:	e9 2e       	mov	r14, r25
    2e2c:	f1 2c       	mov	r15, r1
    2e2e:	00 3f       	cpi	r16, 0xF0	; 240
    2e30:	8f ef       	ldi	r24, 0xFF	; 255
    2e32:	18 07       	cpc	r17, r24
    2e34:	ec f0       	brlt	.+58     	; 0x2e70 <progMatrixHorizontal(unsigned int, unsigned char)+0x780>
    2e36:	81 e0       	ldi	r24, 0x01	; 1
    2e38:	e8 1a       	sub	r14, r24
    2e3a:	f1 08       	sbc	r15, r1
    2e3c:	82 e0       	ldi	r24, 0x02	; 2
    2e3e:	e8 16       	cp	r14, r24
    2e40:	f1 04       	cpc	r15, r1
    2e42:	14 f4       	brge	.+4      	; 0x2e48 <progMatrixHorizontal(unsigned int, unsigned char)+0x758>
    2e44:	f1 2c       	mov	r15, r1
    2e46:	e1 2c       	mov	r14, r1
    2e48:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2e4c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2e50:	b7 01       	movw	r22, r14
    2e52:	ce 01       	movw	r24, r28
    2e54:	01 96       	adiw	r24, 0x01	; 1
    2e56:	ed db       	rcall	.-2086   	; 0x2632 <getMatrixColor(int)>
    2e58:	9e 01       	movw	r18, r28
    2e5a:	2f 5f       	subi	r18, 0xFF	; 255
    2e5c:	3f 4f       	sbci	r19, 0xFF	; 255
    2e5e:	a8 01       	movw	r20, r16
    2e60:	63 e1       	ldi	r22, 0x13	; 19
    2e62:	70 e0       	ldi	r23, 0x00	; 0
    2e64:	c6 01       	movw	r24, r12
    2e66:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2e6a:	01 50       	subi	r16, 0x01	; 1
    2e6c:	11 09       	sbc	r17, r1
    2e6e:	df cf       	rjmp	.-66     	; 0x2e2e <progMatrixHorizontal(unsigned int, unsigned char)+0x73e>
    2e70:	00 91 ae 0a 	lds	r16, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2e74:	10 91 af 0a 	lds	r17, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2e78:	07 51       	subi	r16, 0x17	; 23
    2e7a:	11 09       	sbc	r17, r1
    2e7c:	80 e1       	ldi	r24, 0x10	; 16
    2e7e:	e8 2e       	mov	r14, r24
    2e80:	f1 2c       	mov	r15, r1
    2e82:	09 3e       	cpi	r16, 0xE9	; 233
    2e84:	8f ef       	ldi	r24, 0xFF	; 255
    2e86:	18 07       	cpc	r17, r24
    2e88:	ec f0       	brlt	.+58     	; 0x2ec4 <progMatrixHorizontal(unsigned int, unsigned char)+0x7d4>
    2e8a:	81 e0       	ldi	r24, 0x01	; 1
    2e8c:	e8 1a       	sub	r14, r24
    2e8e:	f1 08       	sbc	r15, r1
    2e90:	82 e0       	ldi	r24, 0x02	; 2
    2e92:	e8 16       	cp	r14, r24
    2e94:	f1 04       	cpc	r15, r1
    2e96:	14 f4       	brge	.+4      	; 0x2e9c <progMatrixHorizontal(unsigned int, unsigned char)+0x7ac>
    2e98:	f1 2c       	mov	r15, r1
    2e9a:	e1 2c       	mov	r14, r1
    2e9c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2ea0:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2ea4:	b7 01       	movw	r22, r14
    2ea6:	ce 01       	movw	r24, r28
    2ea8:	01 96       	adiw	r24, 0x01	; 1
    2eaa:	c3 db       	rcall	.-2170   	; 0x2632 <getMatrixColor(int)>
    2eac:	9e 01       	movw	r18, r28
    2eae:	2f 5f       	subi	r18, 0xFF	; 255
    2eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    2eb2:	a8 01       	movw	r20, r16
    2eb4:	65 e1       	ldi	r22, 0x15	; 21
    2eb6:	70 e0       	ldi	r23, 0x00	; 0
    2eb8:	c6 01       	movw	r24, r12
    2eba:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ebe:	01 50       	subi	r16, 0x01	; 1
    2ec0:	11 09       	sbc	r17, r1
    2ec2:	df cf       	rjmp	.-66     	; 0x2e82 <progMatrixHorizontal(unsigned int, unsigned char)+0x792>
    2ec4:	8c ec       	ldi	r24, 0xCC	; 204
    2ec6:	90 e1       	ldi	r25, 0x10	; 16
    2ec8:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    2ecc:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    2ed0:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2ed4:	01 96       	adiw	r24, 0x01	; 1
    2ed6:	89 33       	cpi	r24, 0x39	; 57
    2ed8:	91 05       	cpc	r25, r1
    2eda:	e4 f4       	brge	.+56     	; 0x2f14 <progMatrixHorizontal(unsigned int, unsigned char)+0x824>
    2edc:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    2ee0:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    2ee4:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    2ee8:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	89 33       	cpi	r24, 0x39	; 57
    2ef0:	91 05       	cpc	r25, r1
    2ef2:	ac f4       	brge	.+42     	; 0x2f1e <progMatrixHorizontal(unsigned int, unsigned char)+0x82e>
    2ef4:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <progMatrixZaehler+0x1>
    2ef8:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <progMatrixZaehler>
    2efc:	0f 90       	pop	r0
    2efe:	0f 90       	pop	r0
    2f00:	0f 90       	pop	r0
    2f02:	df 91       	pop	r29
    2f04:	cf 91       	pop	r28
    2f06:	1f 91       	pop	r17
    2f08:	0f 91       	pop	r16
    2f0a:	ff 90       	pop	r15
    2f0c:	ef 90       	pop	r14
    2f0e:	df 90       	pop	r13
    2f10:	cf 90       	pop	r12
    2f12:	08 95       	ret
    2f14:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    2f18:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2f1c:	e3 cf       	rjmp	.-58     	; 0x2ee4 <progMatrixHorizontal(unsigned int, unsigned char)+0x7f4>
    2f1e:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <progMatrixZaehler+0x1>
    2f22:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <progMatrixZaehler>
    2f26:	ea cf       	rjmp	.-44     	; 0x2efc <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>

00002f28 <progMatrixVertical(unsigned int, unsigned char)>:
    2f28:	cf 92       	push	r12
    2f2a:	df 92       	push	r13
    2f2c:	ef 92       	push	r14
    2f2e:	ff 92       	push	r15
    2f30:	0f 93       	push	r16
    2f32:	1f 93       	push	r17
    2f34:	cf 93       	push	r28
    2f36:	df 93       	push	r29
    2f38:	00 d0       	rcall	.+0      	; 0x2f3a <progMatrixVertical(unsigned int, unsigned char)+0x12>
    2f3a:	1f 92       	push	r1
    2f3c:	cd b7       	in	r28, 0x3d	; 61
    2f3e:	de b7       	in	r29, 0x3e	; 62
    2f40:	7c 01       	movw	r14, r24
    2f42:	16 2f       	mov	r17, r22
    2f44:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    2f48:	81 11       	cpse	r24, r1
    2f4a:	1e c0       	rjmp	.+60     	; 0x2f88 <progMatrixVertical(unsigned int, unsigned char)+0x60>
    2f4c:	61 e0       	ldi	r22, 0x01	; 1
    2f4e:	8c ec       	ldi	r24, 0xCC	; 204
    2f50:	90 e1       	ldi	r25, 0x10	; 16
    2f52:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    2f56:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    2f5a:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    2f5e:	10 93 b8 0a 	sts	0x0AB8, r17	; 0x800ab8 <nextSongPart>
    2f62:	81 e0       	ldi	r24, 0x01	; 1
    2f64:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    2f68:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    2f6c:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    2f70:	89 e1       	ldi	r24, 0x19	; 25
    2f72:	90 e0       	ldi	r25, 0x00	; 0
    2f74:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <progMatrixZaehler+0x1>
    2f78:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <progMatrixZaehler>
    2f7c:	84 e6       	ldi	r24, 0x64	; 100
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <millisCounterTimer+0x1>
    2f84:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <millisCounterTimer>
    2f88:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    2f8c:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    2f90:	84 36       	cpi	r24, 0x64	; 100
    2f92:	91 05       	cpc	r25, r1
    2f94:	08 f4       	brcc	.+2      	; 0x2f98 <progMatrixVertical(unsigned int, unsigned char)+0x70>
    2f96:	fc c3       	rjmp	.+2040   	; 0x3790 <progMatrixVertical(unsigned int, unsigned char)+0x868>
    2f98:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    2f9c:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    2fa0:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    2fa4:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2fa8:	07 e1       	ldi	r16, 0x17	; 23
    2faa:	10 e0       	ldi	r17, 0x00	; 0
    2fac:	08 1b       	sub	r16, r24
    2fae:	19 0b       	sbc	r17, r25
    2fb0:	b0 e1       	ldi	r27, 0x10	; 16
    2fb2:	eb 2e       	mov	r14, r27
    2fb4:	f1 2c       	mov	r15, r1
    2fb6:	07 31       	cpi	r16, 0x17	; 23
    2fb8:	11 05       	cpc	r17, r1
    2fba:	dc f4       	brge	.+54     	; 0x2ff2 <progMatrixVertical(unsigned int, unsigned char)+0xca>
    2fbc:	81 e0       	ldi	r24, 0x01	; 1
    2fbe:	e8 1a       	sub	r14, r24
    2fc0:	f1 08       	sbc	r15, r1
    2fc2:	f7 fe       	sbrs	r15, 7
    2fc4:	02 c0       	rjmp	.+4      	; 0x2fca <progMatrixVertical(unsigned int, unsigned char)+0xa2>
    2fc6:	f1 2c       	mov	r15, r1
    2fc8:	e1 2c       	mov	r14, r1
    2fca:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    2fce:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    2fd2:	b7 01       	movw	r22, r14
    2fd4:	ce 01       	movw	r24, r28
    2fd6:	01 96       	adiw	r24, 0x01	; 1
    2fd8:	2c db       	rcall	.-2472   	; 0x2632 <getMatrixColor(int)>
    2fda:	9e 01       	movw	r18, r28
    2fdc:	2f 5f       	subi	r18, 0xFF	; 255
    2fde:	3f 4f       	sbci	r19, 0xFF	; 255
    2fe0:	50 e0       	ldi	r21, 0x00	; 0
    2fe2:	40 e0       	ldi	r20, 0x00	; 0
    2fe4:	b8 01       	movw	r22, r16
    2fe6:	c6 01       	movw	r24, r12
    2fe8:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2fec:	0f 5f       	subi	r16, 0xFF	; 255
    2fee:	1f 4f       	sbci	r17, 0xFF	; 255
    2ff0:	e2 cf       	rjmp	.-60     	; 0x2fb6 <progMatrixVertical(unsigned int, unsigned char)+0x8e>
    2ff2:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    2ff6:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    2ffa:	06 e2       	ldi	r16, 0x26	; 38
    2ffc:	10 e0       	ldi	r17, 0x00	; 0
    2ffe:	08 1b       	sub	r16, r24
    3000:	19 0b       	sbc	r17, r25
    3002:	a0 e1       	ldi	r26, 0x10	; 16
    3004:	ea 2e       	mov	r14, r26
    3006:	f1 2c       	mov	r15, r1
    3008:	06 32       	cpi	r16, 0x26	; 38
    300a:	11 05       	cpc	r17, r1
    300c:	dc f4       	brge	.+54     	; 0x3044 <progMatrixVertical(unsigned int, unsigned char)+0x11c>
    300e:	81 e0       	ldi	r24, 0x01	; 1
    3010:	e8 1a       	sub	r14, r24
    3012:	f1 08       	sbc	r15, r1
    3014:	f7 fe       	sbrs	r15, 7
    3016:	02 c0       	rjmp	.+4      	; 0x301c <progMatrixVertical(unsigned int, unsigned char)+0xf4>
    3018:	f1 2c       	mov	r15, r1
    301a:	e1 2c       	mov	r14, r1
    301c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3020:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3024:	b7 01       	movw	r22, r14
    3026:	ce 01       	movw	r24, r28
    3028:	01 96       	adiw	r24, 0x01	; 1
    302a:	03 db       	rcall	.-2554   	; 0x2632 <getMatrixColor(int)>
    302c:	9e 01       	movw	r18, r28
    302e:	2f 5f       	subi	r18, 0xFF	; 255
    3030:	3f 4f       	sbci	r19, 0xFF	; 255
    3032:	42 e0       	ldi	r20, 0x02	; 2
    3034:	50 e0       	ldi	r21, 0x00	; 0
    3036:	b8 01       	movw	r22, r16
    3038:	c6 01       	movw	r24, r12
    303a:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    303e:	0f 5f       	subi	r16, 0xFF	; 255
    3040:	1f 4f       	sbci	r17, 0xFF	; 255
    3042:	e2 cf       	rjmp	.-60     	; 0x3008 <progMatrixVertical(unsigned int, unsigned char)+0xe0>
    3044:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    3048:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    304c:	0e e1       	ldi	r16, 0x1E	; 30
    304e:	10 e0       	ldi	r17, 0x00	; 0
    3050:	08 1b       	sub	r16, r24
    3052:	19 0b       	sbc	r17, r25
    3054:	f0 e1       	ldi	r31, 0x10	; 16
    3056:	ef 2e       	mov	r14, r31
    3058:	f1 2c       	mov	r15, r1
    305a:	0e 31       	cpi	r16, 0x1E	; 30
    305c:	11 05       	cpc	r17, r1
    305e:	dc f4       	brge	.+54     	; 0x3096 <progMatrixVertical(unsigned int, unsigned char)+0x16e>
    3060:	81 e0       	ldi	r24, 0x01	; 1
    3062:	e8 1a       	sub	r14, r24
    3064:	f1 08       	sbc	r15, r1
    3066:	f7 fe       	sbrs	r15, 7
    3068:	02 c0       	rjmp	.+4      	; 0x306e <progMatrixVertical(unsigned int, unsigned char)+0x146>
    306a:	f1 2c       	mov	r15, r1
    306c:	e1 2c       	mov	r14, r1
    306e:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3072:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3076:	b7 01       	movw	r22, r14
    3078:	ce 01       	movw	r24, r28
    307a:	01 96       	adiw	r24, 0x01	; 1
    307c:	da da       	rcall	.-2636   	; 0x2632 <getMatrixColor(int)>
    307e:	9e 01       	movw	r18, r28
    3080:	2f 5f       	subi	r18, 0xFF	; 255
    3082:	3f 4f       	sbci	r19, 0xFF	; 255
    3084:	44 e0       	ldi	r20, 0x04	; 4
    3086:	50 e0       	ldi	r21, 0x00	; 0
    3088:	b8 01       	movw	r22, r16
    308a:	c6 01       	movw	r24, r12
    308c:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3090:	0f 5f       	subi	r16, 0xFF	; 255
    3092:	1f 4f       	sbci	r17, 0xFF	; 255
    3094:	e2 cf       	rjmp	.-60     	; 0x305a <progMatrixVertical(unsigned int, unsigned char)+0x132>
    3096:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    309a:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    309e:	0b e2       	ldi	r16, 0x2B	; 43
    30a0:	10 e0       	ldi	r17, 0x00	; 0
    30a2:	08 1b       	sub	r16, r24
    30a4:	19 0b       	sbc	r17, r25
    30a6:	e0 e1       	ldi	r30, 0x10	; 16
    30a8:	ee 2e       	mov	r14, r30
    30aa:	f1 2c       	mov	r15, r1
    30ac:	0b 32       	cpi	r16, 0x2B	; 43
    30ae:	11 05       	cpc	r17, r1
    30b0:	dc f4       	brge	.+54     	; 0x30e8 <progMatrixVertical(unsigned int, unsigned char)+0x1c0>
    30b2:	81 e0       	ldi	r24, 0x01	; 1
    30b4:	e8 1a       	sub	r14, r24
    30b6:	f1 08       	sbc	r15, r1
    30b8:	f7 fe       	sbrs	r15, 7
    30ba:	02 c0       	rjmp	.+4      	; 0x30c0 <progMatrixVertical(unsigned int, unsigned char)+0x198>
    30bc:	f1 2c       	mov	r15, r1
    30be:	e1 2c       	mov	r14, r1
    30c0:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    30c4:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    30c8:	b7 01       	movw	r22, r14
    30ca:	ce 01       	movw	r24, r28
    30cc:	01 96       	adiw	r24, 0x01	; 1
    30ce:	b1 da       	rcall	.-2718   	; 0x2632 <getMatrixColor(int)>
    30d0:	9e 01       	movw	r18, r28
    30d2:	2f 5f       	subi	r18, 0xFF	; 255
    30d4:	3f 4f       	sbci	r19, 0xFF	; 255
    30d6:	46 e0       	ldi	r20, 0x06	; 6
    30d8:	50 e0       	ldi	r21, 0x00	; 0
    30da:	b8 01       	movw	r22, r16
    30dc:	c6 01       	movw	r24, r12
    30de:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    30e2:	0f 5f       	subi	r16, 0xFF	; 255
    30e4:	1f 4f       	sbci	r17, 0xFF	; 255
    30e6:	e2 cf       	rjmp	.-60     	; 0x30ac <progMatrixVertical(unsigned int, unsigned char)+0x184>
    30e8:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    30ec:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    30f0:	02 e2       	ldi	r16, 0x22	; 34
    30f2:	10 e0       	ldi	r17, 0x00	; 0
    30f4:	08 1b       	sub	r16, r24
    30f6:	19 0b       	sbc	r17, r25
    30f8:	70 e1       	ldi	r23, 0x10	; 16
    30fa:	e7 2e       	mov	r14, r23
    30fc:	f1 2c       	mov	r15, r1
    30fe:	02 32       	cpi	r16, 0x22	; 34
    3100:	11 05       	cpc	r17, r1
    3102:	dc f4       	brge	.+54     	; 0x313a <progMatrixVertical(unsigned int, unsigned char)+0x212>
    3104:	81 e0       	ldi	r24, 0x01	; 1
    3106:	e8 1a       	sub	r14, r24
    3108:	f1 08       	sbc	r15, r1
    310a:	f7 fe       	sbrs	r15, 7
    310c:	02 c0       	rjmp	.+4      	; 0x3112 <progMatrixVertical(unsigned int, unsigned char)+0x1ea>
    310e:	f1 2c       	mov	r15, r1
    3110:	e1 2c       	mov	r14, r1
    3112:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3116:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    311a:	b7 01       	movw	r22, r14
    311c:	ce 01       	movw	r24, r28
    311e:	01 96       	adiw	r24, 0x01	; 1
    3120:	88 da       	rcall	.-2800   	; 0x2632 <getMatrixColor(int)>
    3122:	9e 01       	movw	r18, r28
    3124:	2f 5f       	subi	r18, 0xFF	; 255
    3126:	3f 4f       	sbci	r19, 0xFF	; 255
    3128:	48 e0       	ldi	r20, 0x08	; 8
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	b8 01       	movw	r22, r16
    312e:	c6 01       	movw	r24, r12
    3130:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3134:	0f 5f       	subi	r16, 0xFF	; 255
    3136:	1f 4f       	sbci	r17, 0xFF	; 255
    3138:	e2 cf       	rjmp	.-60     	; 0x30fe <progMatrixVertical(unsigned int, unsigned char)+0x1d6>
    313a:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    313e:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    3142:	0b e1       	ldi	r16, 0x1B	; 27
    3144:	10 e0       	ldi	r17, 0x00	; 0
    3146:	08 1b       	sub	r16, r24
    3148:	19 0b       	sbc	r17, r25
    314a:	60 e1       	ldi	r22, 0x10	; 16
    314c:	e6 2e       	mov	r14, r22
    314e:	f1 2c       	mov	r15, r1
    3150:	0b 31       	cpi	r16, 0x1B	; 27
    3152:	11 05       	cpc	r17, r1
    3154:	dc f4       	brge	.+54     	; 0x318c <progMatrixVertical(unsigned int, unsigned char)+0x264>
    3156:	81 e0       	ldi	r24, 0x01	; 1
    3158:	e8 1a       	sub	r14, r24
    315a:	f1 08       	sbc	r15, r1
    315c:	f7 fe       	sbrs	r15, 7
    315e:	02 c0       	rjmp	.+4      	; 0x3164 <progMatrixVertical(unsigned int, unsigned char)+0x23c>
    3160:	f1 2c       	mov	r15, r1
    3162:	e1 2c       	mov	r14, r1
    3164:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3168:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    316c:	b7 01       	movw	r22, r14
    316e:	ce 01       	movw	r24, r28
    3170:	01 96       	adiw	r24, 0x01	; 1
    3172:	5f da       	rcall	.-2882   	; 0x2632 <getMatrixColor(int)>
    3174:	9e 01       	movw	r18, r28
    3176:	2f 5f       	subi	r18, 0xFF	; 255
    3178:	3f 4f       	sbci	r19, 0xFF	; 255
    317a:	4a e0       	ldi	r20, 0x0A	; 10
    317c:	50 e0       	ldi	r21, 0x00	; 0
    317e:	b8 01       	movw	r22, r16
    3180:	c6 01       	movw	r24, r12
    3182:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3186:	0f 5f       	subi	r16, 0xFF	; 255
    3188:	1f 4f       	sbci	r17, 0xFF	; 255
    318a:	e2 cf       	rjmp	.-60     	; 0x3150 <progMatrixVertical(unsigned int, unsigned char)+0x228>
    318c:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    3190:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    3194:	04 e2       	ldi	r16, 0x24	; 36
    3196:	10 e0       	ldi	r17, 0x00	; 0
    3198:	08 1b       	sub	r16, r24
    319a:	19 0b       	sbc	r17, r25
    319c:	50 e1       	ldi	r21, 0x10	; 16
    319e:	e5 2e       	mov	r14, r21
    31a0:	f1 2c       	mov	r15, r1
    31a2:	04 32       	cpi	r16, 0x24	; 36
    31a4:	11 05       	cpc	r17, r1
    31a6:	dc f4       	brge	.+54     	; 0x31de <progMatrixVertical(unsigned int, unsigned char)+0x2b6>
    31a8:	81 e0       	ldi	r24, 0x01	; 1
    31aa:	e8 1a       	sub	r14, r24
    31ac:	f1 08       	sbc	r15, r1
    31ae:	f7 fe       	sbrs	r15, 7
    31b0:	02 c0       	rjmp	.+4      	; 0x31b6 <progMatrixVertical(unsigned int, unsigned char)+0x28e>
    31b2:	f1 2c       	mov	r15, r1
    31b4:	e1 2c       	mov	r14, r1
    31b6:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    31ba:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    31be:	b7 01       	movw	r22, r14
    31c0:	ce 01       	movw	r24, r28
    31c2:	01 96       	adiw	r24, 0x01	; 1
    31c4:	36 da       	rcall	.-2964   	; 0x2632 <getMatrixColor(int)>
    31c6:	9e 01       	movw	r18, r28
    31c8:	2f 5f       	subi	r18, 0xFF	; 255
    31ca:	3f 4f       	sbci	r19, 0xFF	; 255
    31cc:	4c e0       	ldi	r20, 0x0C	; 12
    31ce:	50 e0       	ldi	r21, 0x00	; 0
    31d0:	b8 01       	movw	r22, r16
    31d2:	c6 01       	movw	r24, r12
    31d4:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    31d8:	0f 5f       	subi	r16, 0xFF	; 255
    31da:	1f 4f       	sbci	r17, 0xFF	; 255
    31dc:	e2 cf       	rjmp	.-60     	; 0x31a2 <progMatrixVertical(unsigned int, unsigned char)+0x27a>
    31de:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    31e2:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    31e6:	0e e2       	ldi	r16, 0x2E	; 46
    31e8:	10 e0       	ldi	r17, 0x00	; 0
    31ea:	08 1b       	sub	r16, r24
    31ec:	19 0b       	sbc	r17, r25
    31ee:	40 e1       	ldi	r20, 0x10	; 16
    31f0:	e4 2e       	mov	r14, r20
    31f2:	f1 2c       	mov	r15, r1
    31f4:	0e 32       	cpi	r16, 0x2E	; 46
    31f6:	11 05       	cpc	r17, r1
    31f8:	dc f4       	brge	.+54     	; 0x3230 <progMatrixVertical(unsigned int, unsigned char)+0x308>
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	e8 1a       	sub	r14, r24
    31fe:	f1 08       	sbc	r15, r1
    3200:	f7 fe       	sbrs	r15, 7
    3202:	02 c0       	rjmp	.+4      	; 0x3208 <progMatrixVertical(unsigned int, unsigned char)+0x2e0>
    3204:	f1 2c       	mov	r15, r1
    3206:	e1 2c       	mov	r14, r1
    3208:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    320c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3210:	b7 01       	movw	r22, r14
    3212:	ce 01       	movw	r24, r28
    3214:	01 96       	adiw	r24, 0x01	; 1
    3216:	0d da       	rcall	.-3046   	; 0x2632 <getMatrixColor(int)>
    3218:	9e 01       	movw	r18, r28
    321a:	2f 5f       	subi	r18, 0xFF	; 255
    321c:	3f 4f       	sbci	r19, 0xFF	; 255
    321e:	4e e0       	ldi	r20, 0x0E	; 14
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	b8 01       	movw	r22, r16
    3224:	c6 01       	movw	r24, r12
    3226:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    322a:	0f 5f       	subi	r16, 0xFF	; 255
    322c:	1f 4f       	sbci	r17, 0xFF	; 255
    322e:	e2 cf       	rjmp	.-60     	; 0x31f4 <progMatrixVertical(unsigned int, unsigned char)+0x2cc>
    3230:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    3234:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    3238:	0e e1       	ldi	r16, 0x1E	; 30
    323a:	10 e0       	ldi	r17, 0x00	; 0
    323c:	08 1b       	sub	r16, r24
    323e:	19 0b       	sbc	r17, r25
    3240:	30 e1       	ldi	r19, 0x10	; 16
    3242:	e3 2e       	mov	r14, r19
    3244:	f1 2c       	mov	r15, r1
    3246:	0e 31       	cpi	r16, 0x1E	; 30
    3248:	11 05       	cpc	r17, r1
    324a:	dc f4       	brge	.+54     	; 0x3282 <progMatrixVertical(unsigned int, unsigned char)+0x35a>
    324c:	81 e0       	ldi	r24, 0x01	; 1
    324e:	e8 1a       	sub	r14, r24
    3250:	f1 08       	sbc	r15, r1
    3252:	f7 fe       	sbrs	r15, 7
    3254:	02 c0       	rjmp	.+4      	; 0x325a <progMatrixVertical(unsigned int, unsigned char)+0x332>
    3256:	f1 2c       	mov	r15, r1
    3258:	e1 2c       	mov	r14, r1
    325a:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    325e:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3262:	b7 01       	movw	r22, r14
    3264:	ce 01       	movw	r24, r28
    3266:	01 96       	adiw	r24, 0x01	; 1
    3268:	e4 d9       	rcall	.-3128   	; 0x2632 <getMatrixColor(int)>
    326a:	9e 01       	movw	r18, r28
    326c:	2f 5f       	subi	r18, 0xFF	; 255
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	40 e1       	ldi	r20, 0x10	; 16
    3272:	50 e0       	ldi	r21, 0x00	; 0
    3274:	b8 01       	movw	r22, r16
    3276:	c6 01       	movw	r24, r12
    3278:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    327c:	0f 5f       	subi	r16, 0xFF	; 255
    327e:	1f 4f       	sbci	r17, 0xFF	; 255
    3280:	e2 cf       	rjmp	.-60     	; 0x3246 <progMatrixVertical(unsigned int, unsigned char)+0x31e>
    3282:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    3286:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    328a:	0a e2       	ldi	r16, 0x2A	; 42
    328c:	10 e0       	ldi	r17, 0x00	; 0
    328e:	08 1b       	sub	r16, r24
    3290:	19 0b       	sbc	r17, r25
    3292:	20 e1       	ldi	r18, 0x10	; 16
    3294:	e2 2e       	mov	r14, r18
    3296:	f1 2c       	mov	r15, r1
    3298:	0a 32       	cpi	r16, 0x2A	; 42
    329a:	11 05       	cpc	r17, r1
    329c:	dc f4       	brge	.+54     	; 0x32d4 <progMatrixVertical(unsigned int, unsigned char)+0x3ac>
    329e:	81 e0       	ldi	r24, 0x01	; 1
    32a0:	e8 1a       	sub	r14, r24
    32a2:	f1 08       	sbc	r15, r1
    32a4:	f7 fe       	sbrs	r15, 7
    32a6:	02 c0       	rjmp	.+4      	; 0x32ac <progMatrixVertical(unsigned int, unsigned char)+0x384>
    32a8:	f1 2c       	mov	r15, r1
    32aa:	e1 2c       	mov	r14, r1
    32ac:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    32b0:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    32b4:	b7 01       	movw	r22, r14
    32b6:	ce 01       	movw	r24, r28
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	bb d9       	rcall	.-3210   	; 0x2632 <getMatrixColor(int)>
    32bc:	9e 01       	movw	r18, r28
    32be:	2f 5f       	subi	r18, 0xFF	; 255
    32c0:	3f 4f       	sbci	r19, 0xFF	; 255
    32c2:	42 e1       	ldi	r20, 0x12	; 18
    32c4:	50 e0       	ldi	r21, 0x00	; 0
    32c6:	b8 01       	movw	r22, r16
    32c8:	c6 01       	movw	r24, r12
    32ca:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    32ce:	0f 5f       	subi	r16, 0xFF	; 255
    32d0:	1f 4f       	sbci	r17, 0xFF	; 255
    32d2:	e2 cf       	rjmp	.-60     	; 0x3298 <progMatrixVertical(unsigned int, unsigned char)+0x370>
    32d4:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    32d8:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    32dc:	02 e2       	ldi	r16, 0x22	; 34
    32de:	10 e0       	ldi	r17, 0x00	; 0
    32e0:	08 1b       	sub	r16, r24
    32e2:	19 0b       	sbc	r17, r25
    32e4:	90 e1       	ldi	r25, 0x10	; 16
    32e6:	e9 2e       	mov	r14, r25
    32e8:	f1 2c       	mov	r15, r1
    32ea:	02 32       	cpi	r16, 0x22	; 34
    32ec:	11 05       	cpc	r17, r1
    32ee:	dc f4       	brge	.+54     	; 0x3326 <progMatrixVertical(unsigned int, unsigned char)+0x3fe>
    32f0:	81 e0       	ldi	r24, 0x01	; 1
    32f2:	e8 1a       	sub	r14, r24
    32f4:	f1 08       	sbc	r15, r1
    32f6:	f7 fe       	sbrs	r15, 7
    32f8:	02 c0       	rjmp	.+4      	; 0x32fe <progMatrixVertical(unsigned int, unsigned char)+0x3d6>
    32fa:	f1 2c       	mov	r15, r1
    32fc:	e1 2c       	mov	r14, r1
    32fe:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3302:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3306:	b7 01       	movw	r22, r14
    3308:	ce 01       	movw	r24, r28
    330a:	01 96       	adiw	r24, 0x01	; 1
    330c:	92 d9       	rcall	.-3292   	; 0x2632 <getMatrixColor(int)>
    330e:	9e 01       	movw	r18, r28
    3310:	2f 5f       	subi	r18, 0xFF	; 255
    3312:	3f 4f       	sbci	r19, 0xFF	; 255
    3314:	44 e1       	ldi	r20, 0x14	; 20
    3316:	50 e0       	ldi	r21, 0x00	; 0
    3318:	b8 01       	movw	r22, r16
    331a:	c6 01       	movw	r24, r12
    331c:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3320:	0f 5f       	subi	r16, 0xFF	; 255
    3322:	1f 4f       	sbci	r17, 0xFF	; 255
    3324:	e2 cf       	rjmp	.-60     	; 0x32ea <progMatrixVertical(unsigned int, unsigned char)+0x3c2>
    3326:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    332a:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    332e:	0c e1       	ldi	r16, 0x1C	; 28
    3330:	10 e0       	ldi	r17, 0x00	; 0
    3332:	08 1b       	sub	r16, r24
    3334:	19 0b       	sbc	r17, r25
    3336:	80 e1       	ldi	r24, 0x10	; 16
    3338:	e8 2e       	mov	r14, r24
    333a:	f1 2c       	mov	r15, r1
    333c:	0c 31       	cpi	r16, 0x1C	; 28
    333e:	11 05       	cpc	r17, r1
    3340:	dc f4       	brge	.+54     	; 0x3378 <progMatrixVertical(unsigned int, unsigned char)+0x450>
    3342:	81 e0       	ldi	r24, 0x01	; 1
    3344:	e8 1a       	sub	r14, r24
    3346:	f1 08       	sbc	r15, r1
    3348:	f7 fe       	sbrs	r15, 7
    334a:	02 c0       	rjmp	.+4      	; 0x3350 <progMatrixVertical(unsigned int, unsigned char)+0x428>
    334c:	f1 2c       	mov	r15, r1
    334e:	e1 2c       	mov	r14, r1
    3350:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3354:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3358:	b7 01       	movw	r22, r14
    335a:	ce 01       	movw	r24, r28
    335c:	01 96       	adiw	r24, 0x01	; 1
    335e:	69 d9       	rcall	.-3374   	; 0x2632 <getMatrixColor(int)>
    3360:	9e 01       	movw	r18, r28
    3362:	2f 5f       	subi	r18, 0xFF	; 255
    3364:	3f 4f       	sbci	r19, 0xFF	; 255
    3366:	46 e1       	ldi	r20, 0x16	; 22
    3368:	50 e0       	ldi	r21, 0x00	; 0
    336a:	b8 01       	movw	r22, r16
    336c:	c6 01       	movw	r24, r12
    336e:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3372:	0f 5f       	subi	r16, 0xFF	; 255
    3374:	1f 4f       	sbci	r17, 0xFF	; 255
    3376:	e2 cf       	rjmp	.-60     	; 0x333c <progMatrixVertical(unsigned int, unsigned char)+0x414>
    3378:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    337c:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    3380:	08 e2       	ldi	r16, 0x28	; 40
    3382:	10 e0       	ldi	r17, 0x00	; 0
    3384:	08 1b       	sub	r16, r24
    3386:	19 0b       	sbc	r17, r25
    3388:	b0 e1       	ldi	r27, 0x10	; 16
    338a:	eb 2e       	mov	r14, r27
    338c:	f1 2c       	mov	r15, r1
    338e:	08 32       	cpi	r16, 0x28	; 40
    3390:	11 05       	cpc	r17, r1
    3392:	dc f4       	brge	.+54     	; 0x33ca <progMatrixVertical(unsigned int, unsigned char)+0x4a2>
    3394:	81 e0       	ldi	r24, 0x01	; 1
    3396:	e8 1a       	sub	r14, r24
    3398:	f1 08       	sbc	r15, r1
    339a:	f7 fe       	sbrs	r15, 7
    339c:	02 c0       	rjmp	.+4      	; 0x33a2 <progMatrixVertical(unsigned int, unsigned char)+0x47a>
    339e:	f1 2c       	mov	r15, r1
    33a0:	e1 2c       	mov	r14, r1
    33a2:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    33a6:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    33aa:	b7 01       	movw	r22, r14
    33ac:	ce 01       	movw	r24, r28
    33ae:	01 96       	adiw	r24, 0x01	; 1
    33b0:	40 d9       	rcall	.-3456   	; 0x2632 <getMatrixColor(int)>
    33b2:	9e 01       	movw	r18, r28
    33b4:	2f 5f       	subi	r18, 0xFF	; 255
    33b6:	3f 4f       	sbci	r19, 0xFF	; 255
    33b8:	41 e0       	ldi	r20, 0x01	; 1
    33ba:	50 e0       	ldi	r21, 0x00	; 0
    33bc:	b8 01       	movw	r22, r16
    33be:	c6 01       	movw	r24, r12
    33c0:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    33c4:	0f 5f       	subi	r16, 0xFF	; 255
    33c6:	1f 4f       	sbci	r17, 0xFF	; 255
    33c8:	e2 cf       	rjmp	.-60     	; 0x338e <progMatrixVertical(unsigned int, unsigned char)+0x466>
    33ca:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    33ce:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    33d2:	0a e1       	ldi	r16, 0x1A	; 26
    33d4:	10 e0       	ldi	r17, 0x00	; 0
    33d6:	08 1b       	sub	r16, r24
    33d8:	19 0b       	sbc	r17, r25
    33da:	a0 e1       	ldi	r26, 0x10	; 16
    33dc:	ea 2e       	mov	r14, r26
    33de:	f1 2c       	mov	r15, r1
    33e0:	0a 31       	cpi	r16, 0x1A	; 26
    33e2:	11 05       	cpc	r17, r1
    33e4:	dc f4       	brge	.+54     	; 0x341c <progMatrixVertical(unsigned int, unsigned char)+0x4f4>
    33e6:	81 e0       	ldi	r24, 0x01	; 1
    33e8:	e8 1a       	sub	r14, r24
    33ea:	f1 08       	sbc	r15, r1
    33ec:	f7 fe       	sbrs	r15, 7
    33ee:	02 c0       	rjmp	.+4      	; 0x33f4 <progMatrixVertical(unsigned int, unsigned char)+0x4cc>
    33f0:	f1 2c       	mov	r15, r1
    33f2:	e1 2c       	mov	r14, r1
    33f4:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    33f8:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    33fc:	b7 01       	movw	r22, r14
    33fe:	ce 01       	movw	r24, r28
    3400:	01 96       	adiw	r24, 0x01	; 1
    3402:	17 d9       	rcall	.-3538   	; 0x2632 <getMatrixColor(int)>
    3404:	9e 01       	movw	r18, r28
    3406:	2f 5f       	subi	r18, 0xFF	; 255
    3408:	3f 4f       	sbci	r19, 0xFF	; 255
    340a:	43 e0       	ldi	r20, 0x03	; 3
    340c:	50 e0       	ldi	r21, 0x00	; 0
    340e:	b8 01       	movw	r22, r16
    3410:	c6 01       	movw	r24, r12
    3412:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3416:	0f 5f       	subi	r16, 0xFF	; 255
    3418:	1f 4f       	sbci	r17, 0xFF	; 255
    341a:	e2 cf       	rjmp	.-60     	; 0x33e0 <progMatrixVertical(unsigned int, unsigned char)+0x4b8>
    341c:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    3420:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    3424:	02 e2       	ldi	r16, 0x22	; 34
    3426:	10 e0       	ldi	r17, 0x00	; 0
    3428:	08 1b       	sub	r16, r24
    342a:	19 0b       	sbc	r17, r25
    342c:	f0 e1       	ldi	r31, 0x10	; 16
    342e:	ef 2e       	mov	r14, r31
    3430:	f1 2c       	mov	r15, r1
    3432:	02 32       	cpi	r16, 0x22	; 34
    3434:	11 05       	cpc	r17, r1
    3436:	dc f4       	brge	.+54     	; 0x346e <progMatrixVertical(unsigned int, unsigned char)+0x546>
    3438:	81 e0       	ldi	r24, 0x01	; 1
    343a:	e8 1a       	sub	r14, r24
    343c:	f1 08       	sbc	r15, r1
    343e:	f7 fe       	sbrs	r15, 7
    3440:	02 c0       	rjmp	.+4      	; 0x3446 <progMatrixVertical(unsigned int, unsigned char)+0x51e>
    3442:	f1 2c       	mov	r15, r1
    3444:	e1 2c       	mov	r14, r1
    3446:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    344a:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    344e:	b7 01       	movw	r22, r14
    3450:	ce 01       	movw	r24, r28
    3452:	01 96       	adiw	r24, 0x01	; 1
    3454:	ee d8       	rcall	.-3620   	; 0x2632 <getMatrixColor(int)>
    3456:	9e 01       	movw	r18, r28
    3458:	2f 5f       	subi	r18, 0xFF	; 255
    345a:	3f 4f       	sbci	r19, 0xFF	; 255
    345c:	45 e0       	ldi	r20, 0x05	; 5
    345e:	50 e0       	ldi	r21, 0x00	; 0
    3460:	b8 01       	movw	r22, r16
    3462:	c6 01       	movw	r24, r12
    3464:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3468:	0f 5f       	subi	r16, 0xFF	; 255
    346a:	1f 4f       	sbci	r17, 0xFF	; 255
    346c:	e2 cf       	rjmp	.-60     	; 0x3432 <progMatrixVertical(unsigned int, unsigned char)+0x50a>
    346e:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    3472:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    3476:	00 e2       	ldi	r16, 0x20	; 32
    3478:	10 e0       	ldi	r17, 0x00	; 0
    347a:	08 1b       	sub	r16, r24
    347c:	19 0b       	sbc	r17, r25
    347e:	e0 e1       	ldi	r30, 0x10	; 16
    3480:	ee 2e       	mov	r14, r30
    3482:	f1 2c       	mov	r15, r1
    3484:	00 32       	cpi	r16, 0x20	; 32
    3486:	11 05       	cpc	r17, r1
    3488:	dc f4       	brge	.+54     	; 0x34c0 <progMatrixVertical(unsigned int, unsigned char)+0x598>
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	e8 1a       	sub	r14, r24
    348e:	f1 08       	sbc	r15, r1
    3490:	f7 fe       	sbrs	r15, 7
    3492:	02 c0       	rjmp	.+4      	; 0x3498 <progMatrixVertical(unsigned int, unsigned char)+0x570>
    3494:	f1 2c       	mov	r15, r1
    3496:	e1 2c       	mov	r14, r1
    3498:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    349c:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    34a0:	b7 01       	movw	r22, r14
    34a2:	ce 01       	movw	r24, r28
    34a4:	01 96       	adiw	r24, 0x01	; 1
    34a6:	c5 d8       	rcall	.-3702   	; 0x2632 <getMatrixColor(int)>
    34a8:	9e 01       	movw	r18, r28
    34aa:	2f 5f       	subi	r18, 0xFF	; 255
    34ac:	3f 4f       	sbci	r19, 0xFF	; 255
    34ae:	47 e0       	ldi	r20, 0x07	; 7
    34b0:	50 e0       	ldi	r21, 0x00	; 0
    34b2:	b8 01       	movw	r22, r16
    34b4:	c6 01       	movw	r24, r12
    34b6:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    34ba:	0f 5f       	subi	r16, 0xFF	; 255
    34bc:	1f 4f       	sbci	r17, 0xFF	; 255
    34be:	e2 cf       	rjmp	.-60     	; 0x3484 <progMatrixVertical(unsigned int, unsigned char)+0x55c>
    34c0:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    34c4:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    34c8:	0d e1       	ldi	r16, 0x1D	; 29
    34ca:	10 e0       	ldi	r17, 0x00	; 0
    34cc:	08 1b       	sub	r16, r24
    34ce:	19 0b       	sbc	r17, r25
    34d0:	70 e1       	ldi	r23, 0x10	; 16
    34d2:	e7 2e       	mov	r14, r23
    34d4:	f1 2c       	mov	r15, r1
    34d6:	0d 31       	cpi	r16, 0x1D	; 29
    34d8:	11 05       	cpc	r17, r1
    34da:	dc f4       	brge	.+54     	; 0x3512 <progMatrixVertical(unsigned int, unsigned char)+0x5ea>
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	e8 1a       	sub	r14, r24
    34e0:	f1 08       	sbc	r15, r1
    34e2:	f7 fe       	sbrs	r15, 7
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <progMatrixVertical(unsigned int, unsigned char)+0x5c2>
    34e6:	f1 2c       	mov	r15, r1
    34e8:	e1 2c       	mov	r14, r1
    34ea:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    34ee:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    34f2:	b7 01       	movw	r22, r14
    34f4:	ce 01       	movw	r24, r28
    34f6:	01 96       	adiw	r24, 0x01	; 1
    34f8:	9c d8       	rcall	.-3784   	; 0x2632 <getMatrixColor(int)>
    34fa:	9e 01       	movw	r18, r28
    34fc:	2f 5f       	subi	r18, 0xFF	; 255
    34fe:	3f 4f       	sbci	r19, 0xFF	; 255
    3500:	49 e0       	ldi	r20, 0x09	; 9
    3502:	50 e0       	ldi	r21, 0x00	; 0
    3504:	b8 01       	movw	r22, r16
    3506:	c6 01       	movw	r24, r12
    3508:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    350c:	0f 5f       	subi	r16, 0xFF	; 255
    350e:	1f 4f       	sbci	r17, 0xFF	; 255
    3510:	e2 cf       	rjmp	.-60     	; 0x34d6 <progMatrixVertical(unsigned int, unsigned char)+0x5ae>
    3512:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    3516:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    351a:	0a e2       	ldi	r16, 0x2A	; 42
    351c:	10 e0       	ldi	r17, 0x00	; 0
    351e:	08 1b       	sub	r16, r24
    3520:	19 0b       	sbc	r17, r25
    3522:	60 e1       	ldi	r22, 0x10	; 16
    3524:	e6 2e       	mov	r14, r22
    3526:	f1 2c       	mov	r15, r1
    3528:	0a 32       	cpi	r16, 0x2A	; 42
    352a:	11 05       	cpc	r17, r1
    352c:	dc f4       	brge	.+54     	; 0x3564 <progMatrixVertical(unsigned int, unsigned char)+0x63c>
    352e:	81 e0       	ldi	r24, 0x01	; 1
    3530:	e8 1a       	sub	r14, r24
    3532:	f1 08       	sbc	r15, r1
    3534:	f7 fe       	sbrs	r15, 7
    3536:	02 c0       	rjmp	.+4      	; 0x353c <progMatrixVertical(unsigned int, unsigned char)+0x614>
    3538:	f1 2c       	mov	r15, r1
    353a:	e1 2c       	mov	r14, r1
    353c:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3540:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3544:	b7 01       	movw	r22, r14
    3546:	ce 01       	movw	r24, r28
    3548:	01 96       	adiw	r24, 0x01	; 1
    354a:	73 d8       	rcall	.-3866   	; 0x2632 <getMatrixColor(int)>
    354c:	9e 01       	movw	r18, r28
    354e:	2f 5f       	subi	r18, 0xFF	; 255
    3550:	3f 4f       	sbci	r19, 0xFF	; 255
    3552:	4b e0       	ldi	r20, 0x0B	; 11
    3554:	50 e0       	ldi	r21, 0x00	; 0
    3556:	b8 01       	movw	r22, r16
    3558:	c6 01       	movw	r24, r12
    355a:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    355e:	0f 5f       	subi	r16, 0xFF	; 255
    3560:	1f 4f       	sbci	r17, 0xFF	; 255
    3562:	e2 cf       	rjmp	.-60     	; 0x3528 <progMatrixVertical(unsigned int, unsigned char)+0x600>
    3564:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    3568:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    356c:	0d e1       	ldi	r16, 0x1D	; 29
    356e:	10 e0       	ldi	r17, 0x00	; 0
    3570:	08 1b       	sub	r16, r24
    3572:	19 0b       	sbc	r17, r25
    3574:	50 e1       	ldi	r21, 0x10	; 16
    3576:	e5 2e       	mov	r14, r21
    3578:	f1 2c       	mov	r15, r1
    357a:	0d 31       	cpi	r16, 0x1D	; 29
    357c:	11 05       	cpc	r17, r1
    357e:	dc f4       	brge	.+54     	; 0x35b6 <progMatrixVertical(unsigned int, unsigned char)+0x68e>
    3580:	81 e0       	ldi	r24, 0x01	; 1
    3582:	e8 1a       	sub	r14, r24
    3584:	f1 08       	sbc	r15, r1
    3586:	f7 fe       	sbrs	r15, 7
    3588:	02 c0       	rjmp	.+4      	; 0x358e <progMatrixVertical(unsigned int, unsigned char)+0x666>
    358a:	f1 2c       	mov	r15, r1
    358c:	e1 2c       	mov	r14, r1
    358e:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3592:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3596:	b7 01       	movw	r22, r14
    3598:	ce 01       	movw	r24, r28
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	4a d8       	rcall	.-3948   	; 0x2632 <getMatrixColor(int)>
    359e:	9e 01       	movw	r18, r28
    35a0:	2f 5f       	subi	r18, 0xFF	; 255
    35a2:	3f 4f       	sbci	r19, 0xFF	; 255
    35a4:	4d e0       	ldi	r20, 0x0D	; 13
    35a6:	50 e0       	ldi	r21, 0x00	; 0
    35a8:	b8 01       	movw	r22, r16
    35aa:	c6 01       	movw	r24, r12
    35ac:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    35b0:	0f 5f       	subi	r16, 0xFF	; 255
    35b2:	1f 4f       	sbci	r17, 0xFF	; 255
    35b4:	e2 cf       	rjmp	.-60     	; 0x357a <progMatrixVertical(unsigned int, unsigned char)+0x652>
    35b6:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    35ba:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    35be:	07 e1       	ldi	r16, 0x17	; 23
    35c0:	10 e0       	ldi	r17, 0x00	; 0
    35c2:	08 1b       	sub	r16, r24
    35c4:	19 0b       	sbc	r17, r25
    35c6:	40 e1       	ldi	r20, 0x10	; 16
    35c8:	e4 2e       	mov	r14, r20
    35ca:	f1 2c       	mov	r15, r1
    35cc:	07 31       	cpi	r16, 0x17	; 23
    35ce:	11 05       	cpc	r17, r1
    35d0:	dc f4       	brge	.+54     	; 0x3608 <progMatrixVertical(unsigned int, unsigned char)+0x6e0>
    35d2:	81 e0       	ldi	r24, 0x01	; 1
    35d4:	e8 1a       	sub	r14, r24
    35d6:	f1 08       	sbc	r15, r1
    35d8:	f7 fe       	sbrs	r15, 7
    35da:	02 c0       	rjmp	.+4      	; 0x35e0 <progMatrixVertical(unsigned int, unsigned char)+0x6b8>
    35dc:	f1 2c       	mov	r15, r1
    35de:	e1 2c       	mov	r14, r1
    35e0:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    35e4:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    35e8:	b7 01       	movw	r22, r14
    35ea:	ce 01       	movw	r24, r28
    35ec:	01 96       	adiw	r24, 0x01	; 1
    35ee:	21 d8       	rcall	.-4030   	; 0x2632 <getMatrixColor(int)>
    35f0:	9e 01       	movw	r18, r28
    35f2:	2f 5f       	subi	r18, 0xFF	; 255
    35f4:	3f 4f       	sbci	r19, 0xFF	; 255
    35f6:	4f e0       	ldi	r20, 0x0F	; 15
    35f8:	50 e0       	ldi	r21, 0x00	; 0
    35fa:	b8 01       	movw	r22, r16
    35fc:	c6 01       	movw	r24, r12
    35fe:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3602:	0f 5f       	subi	r16, 0xFF	; 255
    3604:	1f 4f       	sbci	r17, 0xFF	; 255
    3606:	e2 cf       	rjmp	.-60     	; 0x35cc <progMatrixVertical(unsigned int, unsigned char)+0x6a4>
    3608:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    360c:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    3610:	0f e1       	ldi	r16, 0x1F	; 31
    3612:	10 e0       	ldi	r17, 0x00	; 0
    3614:	08 1b       	sub	r16, r24
    3616:	19 0b       	sbc	r17, r25
    3618:	30 e1       	ldi	r19, 0x10	; 16
    361a:	e3 2e       	mov	r14, r19
    361c:	f1 2c       	mov	r15, r1
    361e:	0f 31       	cpi	r16, 0x1F	; 31
    3620:	11 05       	cpc	r17, r1
    3622:	e4 f4       	brge	.+56     	; 0x365c <progMatrixVertical(unsigned int, unsigned char)+0x734>
    3624:	81 e0       	ldi	r24, 0x01	; 1
    3626:	e8 1a       	sub	r14, r24
    3628:	f1 08       	sbc	r15, r1
    362a:	f7 fe       	sbrs	r15, 7
    362c:	02 c0       	rjmp	.+4      	; 0x3632 <progMatrixVertical(unsigned int, unsigned char)+0x70a>
    362e:	f1 2c       	mov	r15, r1
    3630:	e1 2c       	mov	r14, r1
    3632:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3636:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    363a:	b7 01       	movw	r22, r14
    363c:	ce 01       	movw	r24, r28
    363e:	01 96       	adiw	r24, 0x01	; 1
    3640:	0e 94 19 13 	call	0x2632	; 0x2632 <getMatrixColor(int)>
    3644:	9e 01       	movw	r18, r28
    3646:	2f 5f       	subi	r18, 0xFF	; 255
    3648:	3f 4f       	sbci	r19, 0xFF	; 255
    364a:	41 e1       	ldi	r20, 0x11	; 17
    364c:	50 e0       	ldi	r21, 0x00	; 0
    364e:	b8 01       	movw	r22, r16
    3650:	c6 01       	movw	r24, r12
    3652:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3656:	0f 5f       	subi	r16, 0xFF	; 255
    3658:	1f 4f       	sbci	r17, 0xFF	; 255
    365a:	e1 cf       	rjmp	.-62     	; 0x361e <progMatrixVertical(unsigned int, unsigned char)+0x6f6>
    365c:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    3660:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    3664:	05 e2       	ldi	r16, 0x25	; 37
    3666:	10 e0       	ldi	r17, 0x00	; 0
    3668:	08 1b       	sub	r16, r24
    366a:	19 0b       	sbc	r17, r25
    366c:	20 e1       	ldi	r18, 0x10	; 16
    366e:	e2 2e       	mov	r14, r18
    3670:	f1 2c       	mov	r15, r1
    3672:	05 32       	cpi	r16, 0x25	; 37
    3674:	11 05       	cpc	r17, r1
    3676:	e4 f4       	brge	.+56     	; 0x36b0 <progMatrixVertical(unsigned int, unsigned char)+0x788>
    3678:	81 e0       	ldi	r24, 0x01	; 1
    367a:	e8 1a       	sub	r14, r24
    367c:	f1 08       	sbc	r15, r1
    367e:	f7 fe       	sbrs	r15, 7
    3680:	02 c0       	rjmp	.+4      	; 0x3686 <progMatrixVertical(unsigned int, unsigned char)+0x75e>
    3682:	f1 2c       	mov	r15, r1
    3684:	e1 2c       	mov	r14, r1
    3686:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    368a:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    368e:	b7 01       	movw	r22, r14
    3690:	ce 01       	movw	r24, r28
    3692:	01 96       	adiw	r24, 0x01	; 1
    3694:	0e 94 19 13 	call	0x2632	; 0x2632 <getMatrixColor(int)>
    3698:	9e 01       	movw	r18, r28
    369a:	2f 5f       	subi	r18, 0xFF	; 255
    369c:	3f 4f       	sbci	r19, 0xFF	; 255
    369e:	43 e1       	ldi	r20, 0x13	; 19
    36a0:	50 e0       	ldi	r21, 0x00	; 0
    36a2:	b8 01       	movw	r22, r16
    36a4:	c6 01       	movw	r24, r12
    36a6:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    36aa:	0f 5f       	subi	r16, 0xFF	; 255
    36ac:	1f 4f       	sbci	r17, 0xFF	; 255
    36ae:	e1 cf       	rjmp	.-62     	; 0x3672 <progMatrixVertical(unsigned int, unsigned char)+0x74a>
    36b0:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    36b4:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    36b8:	0c e1       	ldi	r16, 0x1C	; 28
    36ba:	10 e0       	ldi	r17, 0x00	; 0
    36bc:	08 1b       	sub	r16, r24
    36be:	19 0b       	sbc	r17, r25
    36c0:	90 e1       	ldi	r25, 0x10	; 16
    36c2:	e9 2e       	mov	r14, r25
    36c4:	f1 2c       	mov	r15, r1
    36c6:	0c 31       	cpi	r16, 0x1C	; 28
    36c8:	11 05       	cpc	r17, r1
    36ca:	e4 f4       	brge	.+56     	; 0x3704 <progMatrixVertical(unsigned int, unsigned char)+0x7dc>
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	e8 1a       	sub	r14, r24
    36d0:	f1 08       	sbc	r15, r1
    36d2:	f7 fe       	sbrs	r15, 7
    36d4:	02 c0       	rjmp	.+4      	; 0x36da <progMatrixVertical(unsigned int, unsigned char)+0x7b2>
    36d6:	f1 2c       	mov	r15, r1
    36d8:	e1 2c       	mov	r14, r1
    36da:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    36de:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    36e2:	b7 01       	movw	r22, r14
    36e4:	ce 01       	movw	r24, r28
    36e6:	01 96       	adiw	r24, 0x01	; 1
    36e8:	0e 94 19 13 	call	0x2632	; 0x2632 <getMatrixColor(int)>
    36ec:	9e 01       	movw	r18, r28
    36ee:	2f 5f       	subi	r18, 0xFF	; 255
    36f0:	3f 4f       	sbci	r19, 0xFF	; 255
    36f2:	45 e1       	ldi	r20, 0x15	; 21
    36f4:	50 e0       	ldi	r21, 0x00	; 0
    36f6:	b8 01       	movw	r22, r16
    36f8:	c6 01       	movw	r24, r12
    36fa:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    36fe:	0f 5f       	subi	r16, 0xFF	; 255
    3700:	1f 4f       	sbci	r17, 0xFF	; 255
    3702:	e1 cf       	rjmp	.-62     	; 0x36c6 <progMatrixVertical(unsigned int, unsigned char)+0x79e>
    3704:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    3708:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    370c:	0b e2       	ldi	r16, 0x2B	; 43
    370e:	10 e0       	ldi	r17, 0x00	; 0
    3710:	08 1b       	sub	r16, r24
    3712:	19 0b       	sbc	r17, r25
    3714:	80 e1       	ldi	r24, 0x10	; 16
    3716:	e8 2e       	mov	r14, r24
    3718:	f1 2c       	mov	r15, r1
    371a:	0b 32       	cpi	r16, 0x2B	; 43
    371c:	11 05       	cpc	r17, r1
    371e:	e4 f4       	brge	.+56     	; 0x3758 <progMatrixVertical(unsigned int, unsigned char)+0x830>
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	e8 1a       	sub	r14, r24
    3724:	f1 08       	sbc	r15, r1
    3726:	f7 fe       	sbrs	r15, 7
    3728:	02 c0       	rjmp	.+4      	; 0x372e <progMatrixVertical(unsigned int, unsigned char)+0x806>
    372a:	f1 2c       	mov	r15, r1
    372c:	e1 2c       	mov	r14, r1
    372e:	c0 90 bb 10 	lds	r12, 0x10BB	; 0x8010bb <matrix>
    3732:	d0 90 bc 10 	lds	r13, 0x10BC	; 0x8010bc <matrix+0x1>
    3736:	b7 01       	movw	r22, r14
    3738:	ce 01       	movw	r24, r28
    373a:	01 96       	adiw	r24, 0x01	; 1
    373c:	0e 94 19 13 	call	0x2632	; 0x2632 <getMatrixColor(int)>
    3740:	9e 01       	movw	r18, r28
    3742:	2f 5f       	subi	r18, 0xFF	; 255
    3744:	3f 4f       	sbci	r19, 0xFF	; 255
    3746:	47 e1       	ldi	r20, 0x17	; 23
    3748:	50 e0       	ldi	r21, 0x00	; 0
    374a:	b8 01       	movw	r22, r16
    374c:	c6 01       	movw	r24, r12
    374e:	0e 94 2b 40 	call	0x8056	; 0x8056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3752:	0f 5f       	subi	r16, 0xFF	; 255
    3754:	1f 4f       	sbci	r17, 0xFF	; 255
    3756:	e1 cf       	rjmp	.-62     	; 0x371a <progMatrixVertical(unsigned int, unsigned char)+0x7f2>
    3758:	8c ec       	ldi	r24, 0xCC	; 204
    375a:	90 e1       	ldi	r25, 0x10	; 16
    375c:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    3760:	80 91 b0 0a 	lds	r24, 0x0AB0	; 0x800ab0 <zaehler>
    3764:	90 91 b1 0a 	lds	r25, 0x0AB1	; 0x800ab1 <zaehler+0x1>
    3768:	01 96       	adiw	r24, 0x01	; 1
    376a:	8d 33       	cpi	r24, 0x3D	; 61
    376c:	91 05       	cpc	r25, r1
    376e:	e4 f4       	brge	.+56     	; 0x37a8 <progMatrixVertical(unsigned int, unsigned char)+0x880>
    3770:	90 93 b1 0a 	sts	0x0AB1, r25	; 0x800ab1 <zaehler+0x1>
    3774:	80 93 b0 0a 	sts	0x0AB0, r24	; 0x800ab0 <zaehler>
    3778:	80 91 ae 0a 	lds	r24, 0x0AAE	; 0x800aae <progMatrixZaehler>
    377c:	90 91 af 0a 	lds	r25, 0x0AAF	; 0x800aaf <progMatrixZaehler+0x1>
    3780:	01 96       	adiw	r24, 0x01	; 1
    3782:	8d 33       	cpi	r24, 0x3D	; 61
    3784:	91 05       	cpc	r25, r1
    3786:	ac f4       	brge	.+42     	; 0x37b2 <progMatrixVertical(unsigned int, unsigned char)+0x88a>
    3788:	90 93 af 0a 	sts	0x0AAF, r25	; 0x800aaf <progMatrixZaehler+0x1>
    378c:	80 93 ae 0a 	sts	0x0AAE, r24	; 0x800aae <progMatrixZaehler>
    3790:	0f 90       	pop	r0
    3792:	0f 90       	pop	r0
    3794:	0f 90       	pop	r0
    3796:	df 91       	pop	r29
    3798:	cf 91       	pop	r28
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	ff 90       	pop	r15
    37a0:	ef 90       	pop	r14
    37a2:	df 90       	pop	r13
    37a4:	cf 90       	pop	r12
    37a6:	08 95       	ret
    37a8:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    37ac:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    37b0:	e3 cf       	rjmp	.-58     	; 0x3778 <progMatrixVertical(unsigned int, unsigned char)+0x850>
    37b2:	10 92 af 0a 	sts	0x0AAF, r1	; 0x800aaf <progMatrixZaehler+0x1>
    37b6:	10 92 ae 0a 	sts	0x0AAE, r1	; 0x800aae <progMatrixZaehler>
    37ba:	ea cf       	rjmp	.-44     	; 0x3790 <progMatrixVertical(unsigned int, unsigned char)+0x868>

000037bc <setupInterrupt()>:
    37bc:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    37c0:	8b e0       	ldi	r24, 0x0B	; 11
    37c2:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    37c6:	8a e6       	ldi	r24, 0x6A	; 106
    37c8:	98 e1       	ldi	r25, 0x18	; 24
    37ca:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    37ce:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    37d2:	82 e0       	ldi	r24, 0x02	; 2
    37d4:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    37d8:	08 95       	ret

000037da <switchToPart(unsigned char)>:
    37da:	cf 93       	push	r28
    37dc:	c8 2f       	mov	r28, r24
    37de:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <prog>
    37e2:	10 92 b9 0a 	sts	0x0AB9, r1	; 0x800ab9 <nextChangeMillisAlreadyCalculated>
    37e6:	10 92 c0 0a 	sts	0x0AC0, r1	; 0x800ac0 <millisCounterTimer+0x1>
    37ea:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <millisCounterTimer>
    37ee:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <millisCounterForProgChange+0x1>
    37f2:	10 92 bd 0a 	sts	0x0ABD, r1	; 0x800abd <millisCounterForProgChange>
    37f6:	10 92 b1 0a 	sts	0x0AB1, r1	; 0x800ab1 <zaehler+0x1>
    37fa:	10 92 b0 0a 	sts	0x0AB0, r1	; 0x800ab0 <zaehler>
    37fe:	87 e1       	ldi	r24, 0x17	; 23
    3800:	90 e0       	ldi	r25, 0x00	; 0
    3802:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    3806:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    380a:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    380e:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <progBlingBlingColoring_rounds>
    3812:	10 92 6e 0a 	sts	0x0A6E, r1	; 0x800a6e <progCLED_hue>
    3816:	10 92 6d 0a 	sts	0x0A6D, r1	; 0x800a6d <progCLED_counter+0x1>
    381a:	10 92 6c 0a 	sts	0x0A6C, r1	; 0x800a6c <progCLED_counter>
    381e:	6f e1       	ldi	r22, 0x1F	; 31
    3820:	71 e0       	ldi	r23, 0x01	; 1
    3822:	8c e5       	ldi	r24, 0x5C	; 92
    3824:	91 e1       	ldi	r25, 0x11	; 17
    3826:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    382a:	6c 2f       	mov	r22, r28
    382c:	8c e5       	ldi	r24, 0x5C	; 92
    382e:	91 e1       	ldi	r25, 0x11	; 17
    3830:	cf 91       	pop	r28
    3832:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <Print::println(unsigned char)>

00003836 <__vector_32>:
    3836:	1f 92       	push	r1
    3838:	0f 92       	push	r0
    383a:	0f b6       	in	r0, 0x3f	; 63
    383c:	0f 92       	push	r0
    383e:	11 24       	eor	r1, r1
    3840:	0b b6       	in	r0, 0x3b	; 59
    3842:	0f 92       	push	r0
    3844:	2f 93       	push	r18
    3846:	3f 93       	push	r19
    3848:	4f 93       	push	r20
    384a:	5f 93       	push	r21
    384c:	6f 93       	push	r22
    384e:	7f 93       	push	r23
    3850:	8f 93       	push	r24
    3852:	9f 93       	push	r25
    3854:	af 93       	push	r26
    3856:	bf 93       	push	r27
    3858:	ef 93       	push	r30
    385a:	ff 93       	push	r31
    385c:	80 91 bf 0a 	lds	r24, 0x0ABF	; 0x800abf <millisCounterTimer>
    3860:	90 91 c0 0a 	lds	r25, 0x0AC0	; 0x800ac0 <millisCounterTimer+0x1>
    3864:	49 96       	adiw	r24, 0x19	; 25
    3866:	90 93 c0 0a 	sts	0x0AC0, r25	; 0x800ac0 <millisCounterTimer+0x1>
    386a:	80 93 bf 0a 	sts	0x0ABF, r24	; 0x800abf <millisCounterTimer>
    386e:	80 91 bb 0a 	lds	r24, 0x0ABB	; 0x800abb <millisCounterForSeconds>
    3872:	90 91 bc 0a 	lds	r25, 0x0ABC	; 0x800abc <millisCounterForSeconds+0x1>
    3876:	49 96       	adiw	r24, 0x19	; 25
    3878:	90 93 bc 0a 	sts	0x0ABC, r25	; 0x800abc <millisCounterForSeconds+0x1>
    387c:	80 93 bb 0a 	sts	0x0ABB, r24	; 0x800abb <millisCounterForSeconds>
    3880:	80 91 bd 0a 	lds	r24, 0x0ABD	; 0x800abd <millisCounterForProgChange>
    3884:	90 91 be 0a 	lds	r25, 0x0ABE	; 0x800abe <millisCounterForProgChange+0x1>
    3888:	49 96       	adiw	r24, 0x19	; 25
    388a:	90 93 be 0a 	sts	0x0ABE, r25	; 0x800abe <millisCounterForProgChange+0x1>
    388e:	80 93 bd 0a 	sts	0x0ABD, r24	; 0x800abd <millisCounterForProgChange>
    3892:	91 e0       	ldi	r25, 0x01	; 1
    3894:	90 93 ba 0a 	sts	0x0ABA, r25	; 0x800aba <flag_processFastLED>
    3898:	8b b1       	in	r24, 0x0b	; 11
    389a:	20 e4       	ldi	r18, 0x40	; 64
    389c:	82 27       	eor	r24, r18
    389e:	8b b9       	out	0x0b, r24	; 11
    38a0:	20 91 bb 0a 	lds	r18, 0x0ABB	; 0x800abb <millisCounterForSeconds>
    38a4:	30 91 bc 0a 	lds	r19, 0x0ABC	; 0x800abc <millisCounterForSeconds+0x1>
    38a8:	28 3e       	cpi	r18, 0xE8	; 232
    38aa:	33 40       	sbci	r19, 0x03	; 3
    38ac:	30 f0       	brcs	.+12     	; 0x38ba <__vector_32+0x84>
    38ae:	10 92 bc 0a 	sts	0x0ABC, r1	; 0x800abc <millisCounterForSeconds+0x1>
    38b2:	10 92 bb 0a 	sts	0x0ABB, r1	; 0x800abb <millisCounterForSeconds>
    38b6:	90 93 b6 0a 	sts	0x0AB6, r25	; 0x800ab6 <OneSecondHasPast>
    38ba:	20 91 bd 0a 	lds	r18, 0x0ABD	; 0x800abd <millisCounterForProgChange>
    38be:	30 91 be 0a 	lds	r19, 0x0ABE	; 0x800abe <millisCounterForProgChange+0x1>
    38c2:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    38c6:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    38ca:	28 17       	cp	r18, r24
    38cc:	39 07       	cpc	r19, r25
    38ce:	18 f0       	brcs	.+6      	; 0x38d6 <__vector_32+0xa0>
    38d0:	80 91 b8 0a 	lds	r24, 0x0AB8	; 0x800ab8 <nextSongPart>
    38d4:	82 df       	rcall	.-252    	; 0x37da <switchToPart(unsigned char)>
    38d6:	ff 91       	pop	r31
    38d8:	ef 91       	pop	r30
    38da:	bf 91       	pop	r27
    38dc:	af 91       	pop	r26
    38de:	9f 91       	pop	r25
    38e0:	8f 91       	pop	r24
    38e2:	7f 91       	pop	r23
    38e4:	6f 91       	pop	r22
    38e6:	5f 91       	pop	r21
    38e8:	4f 91       	pop	r20
    38ea:	3f 91       	pop	r19
    38ec:	2f 91       	pop	r18
    38ee:	0f 90       	pop	r0
    38f0:	0b be       	out	0x3b, r0	; 59
    38f2:	0f 90       	pop	r0
    38f4:	0f be       	out	0x3f, r0	; 63
    38f6:	0f 90       	pop	r0
    38f8:	1f 90       	pop	r1
    38fa:	18 95       	reti

000038fc <switchToSong(unsigned char)>:
    38fc:	cf 93       	push	r28
    38fe:	c8 2f       	mov	r28, r24
    3900:	80 93 cc 0a 	sts	0x0ACC, r24	; 0x800acc <songID>
    3904:	62 e3       	ldi	r22, 0x32	; 50
    3906:	71 e0       	ldi	r23, 0x01	; 1
    3908:	8c e5       	ldi	r24, 0x5C	; 92
    390a:	91 e1       	ldi	r25, 0x11	; 17
    390c:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::println(char const*)>
    3910:	66 e4       	ldi	r22, 0x46	; 70
    3912:	71 e0       	ldi	r23, 0x01	; 1
    3914:	8c e5       	ldi	r24, 0x5C	; 92
    3916:	91 e1       	ldi	r25, 0x11	; 17
    3918:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    391c:	6c 2f       	mov	r22, r28
    391e:	8c e5       	ldi	r24, 0x5C	; 92
    3920:	91 e1       	ldi	r25, 0x11	; 17
    3922:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Print::println(unsigned char)>
    3926:	62 e3       	ldi	r22, 0x32	; 50
    3928:	71 e0       	ldi	r23, 0x01	; 1
    392a:	8c e5       	ldi	r24, 0x5C	; 92
    392c:	91 e1       	ldi	r25, 0x11	; 17
    392e:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::println(char const*)>
    3932:	80 e0       	ldi	r24, 0x00	; 0
    3934:	cf 91       	pop	r28
    3936:	51 cf       	rjmp	.-350    	; 0x37da <switchToPart(unsigned char)>

00003938 <setup>:
    3938:	af 92       	push	r10
    393a:	bf 92       	push	r11
    393c:	cf 92       	push	r12
    393e:	df 92       	push	r13
    3940:	ef 92       	push	r14
    3942:	ff 92       	push	r15
    3944:	0f 93       	push	r16
    3946:	1f 93       	push	r17
    3948:	cf 93       	push	r28
    394a:	df 93       	push	r29
    394c:	68 ee       	ldi	r22, 0xE8	; 232
    394e:	73 e0       	ldi	r23, 0x03	; 3
    3950:	80 e0       	ldi	r24, 0x00	; 0
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	0e 94 42 48 	call	0x9084	; 0x9084 <delay>
    3958:	4f ef       	ldi	r20, 0xFF	; 255
    395a:	60 e4       	ldi	r22, 0x40	; 64
    395c:	70 e0       	ldi	r23, 0x00	; 0
    395e:	87 ee       	ldi	r24, 0xE7	; 231
    3960:	90 e1       	ldi	r25, 0x10	; 16
    3962:	0e 94 25 4b 	call	0x964a	; 0x964a <HardwareSerial::_begin(unsigned int, unsigned char)>
    3966:	56 9a       	sbi	0x0a, 6	; 10
    3968:	88 e2       	ldi	r24, 0x28	; 40
    396a:	0e 94 aa 46 	call	0x8d54	; 0x8d54 <analogRead>
    396e:	bc 01       	movw	r22, r24
    3970:	99 0f       	add	r25, r25
    3972:	88 0b       	sbc	r24, r24
    3974:	99 0b       	sbc	r25, r25
    3976:	1f 92       	push	r1
    3978:	1f 92       	push	r1
    397a:	1f 92       	push	r1
    397c:	28 e7       	ldi	r18, 0x78	; 120
    397e:	2f 93       	push	r18
    3980:	a1 2c       	mov	r10, r1
    3982:	b1 2c       	mov	r11, r1
    3984:	65 01       	movw	r12, r10
    3986:	ee 24       	eor	r14, r14
    3988:	ea 94       	dec	r14
    398a:	13 e0       	ldi	r17, 0x03	; 3
    398c:	f1 2e       	mov	r15, r17
    398e:	00 e0       	ldi	r16, 0x00	; 0
    3990:	10 e0       	ldi	r17, 0x00	; 0
    3992:	20 e0       	ldi	r18, 0x00	; 0
    3994:	30 e0       	ldi	r19, 0x00	; 0
    3996:	a9 01       	movw	r20, r18
    3998:	0e 94 e5 4e 	call	0x9dca	; 0x9dca <map(long, long, long, long, long)>
    399c:	60 93 c3 0a 	sts	0x0AC3, r22	; 0x800ac3 <voltageSmooth>
    39a0:	82 e3       	ldi	r24, 0x32	; 50
    39a2:	91 e0       	ldi	r25, 0x01	; 1
    39a4:	0e 94 ef 4b 	call	0x97de	; 0x97de <operator new(unsigned int)>
    39a8:	ec 01       	movw	r28, r24
    39aa:	0a e0       	ldi	r16, 0x0A	; 10
    39ac:	27 e1       	ldi	r18, 0x17	; 23
    39ae:	30 e0       	ldi	r19, 0x00	; 0
    39b0:	46 e1       	ldi	r20, 0x16	; 22
    39b2:	50 e0       	ldi	r21, 0x00	; 0
    39b4:	6d ec       	ldi	r22, 0xCD	; 205
    39b6:	7a e0       	ldi	r23, 0x0A	; 10
    39b8:	0e 94 54 3d 	call	0x7aa8	; 0x7aa8 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    39bc:	d0 93 bc 10 	sts	0x10BC, r29	; 0x8010bc <matrix+0x1>
    39c0:	c0 93 bb 10 	sts	0x10BB, r28	; 0x8010bb <matrix>
    39c4:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    39c8:	0f 90       	pop	r0
    39ca:	0f 90       	pop	r0
    39cc:	0f 90       	pop	r0
    39ce:	0f 90       	pop	r0
    39d0:	81 11       	cpse	r24, r1
    39d2:	4d c0       	rjmp	.+154    	; 0x3a6e <setup+0x136>
    39d4:	83 ee       	ldi	r24, 0xE3	; 227
    39d6:	99 e0       	ldi	r25, 0x09	; 9
    39d8:	0e 94 f0 4b 	call	0x97e0	; 0x97e0 <__cxa_guard_acquire>
    39dc:	89 2b       	or	r24, r25
    39de:	09 f4       	brne	.+2      	; 0x39e2 <setup+0xaa>
    39e0:	46 c0       	rjmp	.+140    	; 0x3a6e <setup+0x136>
    39e2:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    39e6:	10 92 ed 09 	sts	0x09ED, r1	; 0x8009ed <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    39ea:	8f ef       	ldi	r24, 0xFF	; 255
    39ec:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    39f0:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    39f4:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    39f8:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    39fc:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    3a00:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    3a04:	81 e0       	ldi	r24, 0x01	; 1
    3a06:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    3a0a:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    3a0e:	10 92 f8 09 	sts	0x09F8, r1	; 0x8009f8 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    3a12:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    3a16:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    3a1a:	80 91 ca 10 	lds	r24, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    3a1e:	90 91 cb 10 	lds	r25, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    3a22:	89 2b       	or	r24, r25
    3a24:	31 f4       	brne	.+12     	; 0x3a32 <setup+0xfa>
    3a26:	8b ee       	ldi	r24, 0xEB	; 235
    3a28:	99 e0       	ldi	r25, 0x09	; 9
    3a2a:	90 93 cb 10 	sts	0x10CB, r25	; 0x8010cb <CLEDController::m_pHead+0x1>
    3a2e:	80 93 ca 10 	sts	0x10CA, r24	; 0x8010ca <CLEDController::m_pHead>
    3a32:	e0 91 c8 10 	lds	r30, 0x10C8	; 0x8010c8 <CLEDController::m_pTail>
    3a36:	f0 91 c9 10 	lds	r31, 0x10C9	; 0x8010c9 <CLEDController::m_pTail+0x1>
    3a3a:	30 97       	sbiw	r30, 0x00	; 0
    3a3c:	21 f0       	breq	.+8      	; 0x3a46 <setup+0x10e>
    3a3e:	8b ee       	ldi	r24, 0xEB	; 235
    3a40:	99 e0       	ldi	r25, 0x09	; 9
    3a42:	95 83       	std	Z+5, r25	; 0x05
    3a44:	84 83       	std	Z+4, r24	; 0x04
    3a46:	8b ee       	ldi	r24, 0xEB	; 235
    3a48:	99 e0       	ldi	r25, 0x09	; 9
    3a4a:	90 93 c9 10 	sts	0x10C9, r25	; 0x8010c9 <CLEDController::m_pTail+0x1>
    3a4e:	80 93 c8 10 	sts	0x10C8, r24	; 0x8010c8 <CLEDController::m_pTail>
    3a52:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    3a56:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    3a5a:	81 e7       	ldi	r24, 0x71	; 113
    3a5c:	95 e0       	ldi	r25, 0x05	; 5
    3a5e:	90 93 ec 09 	sts	0x09EC, r25	; 0x8009ec <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    3a62:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    3a66:	83 ee       	ldi	r24, 0xE3	; 227
    3a68:	99 e0       	ldi	r25, 0x09	; 9
    3a6a:	0e 94 f9 4b 	call	0x97f2	; 0x97f2 <__cxa_guard_release>
    3a6e:	30 e0       	ldi	r19, 0x00	; 0
    3a70:	20 e0       	ldi	r18, 0x00	; 0
    3a72:	4a ef       	ldi	r20, 0xFA	; 250
    3a74:	51 e0       	ldi	r21, 0x01	; 1
    3a76:	6d ec       	ldi	r22, 0xCD	; 205
    3a78:	7a e0       	ldi	r23, 0x0A	; 10
    3a7a:	8b ee       	ldi	r24, 0xEB	; 235
    3a7c:	99 e0       	ldi	r25, 0x09	; 9
    3a7e:	0e 94 44 43 	call	0x8688	; 0x8688 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    3a82:	fc 01       	movw	r30, r24
    3a84:	8f ef       	ldi	r24, 0xFF	; 255
    3a86:	86 83       	std	Z+6, r24	; 0x06
    3a88:	80 eb       	ldi	r24, 0xB0	; 176
    3a8a:	87 83       	std	Z+7, r24	; 0x07
    3a8c:	80 ef       	ldi	r24, 0xF0	; 240
    3a8e:	80 87       	std	Z+8, r24	; 0x08
    3a90:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    3a94:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    3a98:	0e 94 cb 3d 	call	0x7b96	; 0x7b96 <Framebuffer_GFX::begin()>
    3a9c:	80 91 bb 10 	lds	r24, 0x10BB	; 0x8010bb <matrix>
    3aa0:	90 91 bc 10 	lds	r25, 0x10BC	; 0x8010bc <matrix+0x1>
    3aa4:	2f e0       	ldi	r18, 0x0F	; 15
    3aa6:	20 93 cc 10 	sts	0x10CC, r18	; 0x8010cc <FastLED>
    3aaa:	fc 01       	movw	r30, r24
    3aac:	16 8a       	std	Z+22, r1	; 0x16
    3aae:	69 e8       	ldi	r22, 0x89	; 137
    3ab0:	74 e0       	ldi	r23, 0x04	; 4
    3ab2:	0e 94 5a 40 	call	0x80b4	; 0x80b4 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    3ab6:	f8 94       	cli
    3ab8:	81 de       	rcall	.-766    	; 0x37bc <setupInterrupt()>
    3aba:	78 94       	sei
    3abc:	68 eb       	ldi	r22, 0xB8	; 184
    3abe:	76 e0       	ldi	r23, 0x06	; 6
    3ac0:	88 e7       	ldi	r24, 0x78	; 120
    3ac2:	9a e0       	ldi	r25, 0x0A	; 10
    3ac4:	0e 94 bc 05 	call	0xb78	; 0xb78 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    3ac8:	81 e0       	ldi	r24, 0x01	; 1
    3aca:	90 e0       	ldi	r25, 0x00	; 0
    3acc:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <currentBlending+0x1>
    3ad0:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <currentBlending>
    3ad4:	8e e0       	ldi	r24, 0x0E	; 14
    3ad6:	df 91       	pop	r29
    3ad8:	cf 91       	pop	r28
    3ada:	1f 91       	pop	r17
    3adc:	0f 91       	pop	r16
    3ade:	ff 90       	pop	r15
    3ae0:	ef 90       	pop	r14
    3ae2:	df 90       	pop	r13
    3ae4:	cf 90       	pop	r12
    3ae6:	bf 90       	pop	r11
    3ae8:	af 90       	pop	r10
    3aea:	08 cf       	rjmp	.-496    	; 0x38fc <switchToSong(unsigned char)>

00003aec <defaultLoop()>:
    3aec:	ef 92       	push	r14
    3aee:	ff 92       	push	r15
    3af0:	0f 93       	push	r16
    3af2:	cf 93       	push	r28
    3af4:	df 93       	push	r29
    3af6:	00 d0       	rcall	.+0      	; 0x3af8 <defaultLoop()+0xc>
    3af8:	00 d0       	rcall	.+0      	; 0x3afa <defaultLoop()+0xe>
    3afa:	00 d0       	rcall	.+0      	; 0x3afc <defaultLoop()+0x10>
    3afc:	1f 92       	push	r1
    3afe:	cd b7       	in	r28, 0x3d	; 61
    3b00:	de b7       	in	r29, 0x3e	; 62
    3b02:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3b06:	83 32       	cpi	r24, 0x23	; 35
    3b08:	09 f4       	brne	.+2      	; 0x3b0c <defaultLoop()+0x20>
    3b0a:	78 c0       	rjmp	.+240    	; 0x3bfc <defaultLoop()+0x110>
    3b0c:	28 f5       	brcc	.+74     	; 0x3b58 <defaultLoop()+0x6c>
    3b0e:	8a 30       	cpi	r24, 0x0A	; 10
    3b10:	09 f4       	brne	.+2      	; 0x3b14 <defaultLoop()+0x28>
    3b12:	5e c0       	rjmp	.+188    	; 0x3bd0 <defaultLoop()+0xe4>
    3b14:	88 f4       	brcc	.+34     	; 0x3b38 <defaultLoop()+0x4c>
    3b16:	88 23       	and	r24, r24
    3b18:	f1 f1       	breq	.+124    	; 0x3b96 <defaultLoop()+0xaa>
    3b1a:	85 30       	cpi	r24, 0x05	; 5
    3b1c:	09 f4       	brne	.+2      	; 0x3b20 <defaultLoop()+0x34>
    3b1e:	53 c0       	rjmp	.+166    	; 0x3bc6 <defaultLoop()+0xda>
    3b20:	27 96       	adiw	r28, 0x07	; 7
    3b22:	0f b6       	in	r0, 0x3f	; 63
    3b24:	f8 94       	cli
    3b26:	de bf       	out	0x3e, r29	; 62
    3b28:	0f be       	out	0x3f, r0	; 63
    3b2a:	cd bf       	out	0x3d, r28	; 61
    3b2c:	df 91       	pop	r29
    3b2e:	cf 91       	pop	r28
    3b30:	0f 91       	pop	r16
    3b32:	ff 90       	pop	r15
    3b34:	ef 90       	pop	r14
    3b36:	08 95       	ret
    3b38:	84 31       	cpi	r24, 0x14	; 20
    3b3a:	09 f4       	brne	.+2      	; 0x3b3e <defaultLoop()+0x52>
    3b3c:	51 c0       	rjmp	.+162    	; 0x3be0 <defaultLoop()+0xf4>
    3b3e:	89 31       	cpi	r24, 0x19	; 25
    3b40:	09 f4       	brne	.+2      	; 0x3b44 <defaultLoop()+0x58>
    3b42:	54 c0       	rjmp	.+168    	; 0x3bec <defaultLoop()+0x100>
    3b44:	8f 30       	cpi	r24, 0x0F	; 15
    3b46:	61 f7       	brne	.-40     	; 0x3b20 <defaultLoop()+0x34>
    3b48:	44 ef       	ldi	r20, 0xF4	; 244
    3b4a:	51 e0       	ldi	r21, 0x01	; 1
    3b4c:	64 e1       	ldi	r22, 0x14	; 20
    3b4e:	80 e1       	ldi	r24, 0x10	; 16
    3b50:	97 e2       	ldi	r25, 0x27	; 39
    3b52:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    3b56:	e4 cf       	rjmp	.-56     	; 0x3b20 <defaultLoop()+0x34>
    3b58:	82 33       	cpi	r24, 0x32	; 50
    3b5a:	09 f4       	brne	.+2      	; 0x3b5e <defaultLoop()+0x72>
    3b5c:	5e c0       	rjmp	.+188    	; 0x3c1a <defaultLoop()+0x12e>
    3b5e:	58 f4       	brcc	.+22     	; 0x3b76 <defaultLoop()+0x8a>
    3b60:	88 32       	cpi	r24, 0x28	; 40
    3b62:	09 f4       	brne	.+2      	; 0x3b66 <defaultLoop()+0x7a>
    3b64:	53 c0       	rjmp	.+166    	; 0x3c0c <defaultLoop()+0x120>
    3b66:	8d 32       	cpi	r24, 0x2D	; 45
    3b68:	d9 f6       	brne	.-74     	; 0x3b20 <defaultLoop()+0x34>
    3b6a:	62 e3       	ldi	r22, 0x32	; 50
    3b6c:	80 e1       	ldi	r24, 0x10	; 16
    3b6e:	97 e2       	ldi	r25, 0x27	; 39
    3b70:	0e 94 9a 0c 	call	0x1934	; 0x1934 <progOutline(unsigned int, unsigned char)>
    3b74:	d5 cf       	rjmp	.-86     	; 0x3b20 <defaultLoop()+0x34>
    3b76:	8c 33       	cpi	r24, 0x3C	; 60
    3b78:	09 f4       	brne	.+2      	; 0x3b7c <defaultLoop()+0x90>
    3b7a:	55 c0       	rjmp	.+170    	; 0x3c26 <defaultLoop()+0x13a>
    3b7c:	84 36       	cpi	r24, 0x64	; 100
    3b7e:	09 f4       	brne	.+2      	; 0x3b82 <defaultLoop()+0x96>
    3b80:	58 c0       	rjmp	.+176    	; 0x3c32 <defaultLoop()+0x146>
    3b82:	87 33       	cpi	r24, 0x37	; 55
    3b84:	69 f6       	brne	.-102    	; 0x3b20 <defaultLoop()+0x34>
    3b86:	44 ef       	ldi	r20, 0xF4	; 244
    3b88:	51 e0       	ldi	r21, 0x01	; 1
    3b8a:	6c e3       	ldi	r22, 0x3C	; 60
    3b8c:	88 e9       	ldi	r24, 0x98	; 152
    3b8e:	9a e3       	ldi	r25, 0x3A	; 58
    3b90:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3b94:	c5 cf       	rjmp	.-118    	; 0x3b20 <defaultLoop()+0x34>
    3b96:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3b9a:	7c 01       	movw	r14, r24
    3b9c:	6e e9       	ldi	r22, 0x9E	; 158
    3b9e:	72 e0       	ldi	r23, 0x02	; 2
    3ba0:	ce 01       	movw	r24, r28
    3ba2:	01 96       	adiw	r24, 0x01	; 1
    3ba4:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    3ba8:	05 e0       	ldi	r16, 0x05	; 5
    3baa:	97 01       	movw	r18, r14
    3bac:	4a e5       	ldi	r20, 0x5A	; 90
    3bae:	50 e0       	ldi	r21, 0x00	; 0
    3bb0:	60 e3       	ldi	r22, 0x30	; 48
    3bb2:	75 e7       	ldi	r23, 0x75	; 117
    3bb4:	ce 01       	movw	r24, r28
    3bb6:	01 96       	adiw	r24, 0x01	; 1
    3bb8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	01 96       	adiw	r24, 0x01	; 1
    3bc0:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    3bc4:	ad cf       	rjmp	.-166    	; 0x3b20 <defaultLoop()+0x34>
    3bc6:	6a e0       	ldi	r22, 0x0A	; 10
    3bc8:	80 e3       	ldi	r24, 0x30	; 48
    3bca:	95 e7       	ldi	r25, 0x75	; 117
    3bcc:	ad d9       	rcall	.-3238   	; 0x2f28 <progMatrixVertical(unsigned int, unsigned char)>
    3bce:	a8 cf       	rjmp	.-176    	; 0x3b20 <defaultLoop()+0x34>
    3bd0:	4f e0       	ldi	r20, 0x0F	; 15
    3bd2:	60 ed       	ldi	r22, 0xD0	; 208
    3bd4:	77 e0       	ldi	r23, 0x07	; 7
    3bd6:	88 e9       	ldi	r24, 0x98	; 152
    3bd8:	9a e3       	ldi	r25, 0x3A	; 58
    3bda:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    3bde:	a0 cf       	rjmp	.-192    	; 0x3b20 <defaultLoop()+0x34>
    3be0:	69 e1       	ldi	r22, 0x19	; 25
    3be2:	88 e9       	ldi	r24, 0x98	; 152
    3be4:	9a e3       	ldi	r25, 0x3A	; 58
    3be6:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    3bea:	9a cf       	rjmp	.-204    	; 0x3b20 <defaultLoop()+0x34>
    3bec:	40 ed       	ldi	r20, 0xD0	; 208
    3bee:	57 e0       	ldi	r21, 0x07	; 7
    3bf0:	63 e2       	ldi	r22, 0x23	; 35
    3bf2:	88 e9       	ldi	r24, 0x98	; 152
    3bf4:	9a e3       	ldi	r25, 0x3A	; 58
    3bf6:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3bfa:	92 cf       	rjmp	.-220    	; 0x3b20 <defaultLoop()+0x34>
    3bfc:	48 ee       	ldi	r20, 0xE8	; 232
    3bfe:	53 e0       	ldi	r21, 0x03	; 3
    3c00:	68 e2       	ldi	r22, 0x28	; 40
    3c02:	88 e9       	ldi	r24, 0x98	; 152
    3c04:	9a e3       	ldi	r25, 0x3A	; 58
    3c06:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3c0a:	8a cf       	rjmp	.-236    	; 0x3b20 <defaultLoop()+0x34>
    3c0c:	4d e2       	ldi	r20, 0x2D	; 45
    3c0e:	65 e0       	ldi	r22, 0x05	; 5
    3c10:	88 e9       	ldi	r24, 0x98	; 152
    3c12:	9a e3       	ldi	r25, 0x3A	; 58
    3c14:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3c18:	83 cf       	rjmp	.-250    	; 0x3b20 <defaultLoop()+0x34>
    3c1a:	67 e3       	ldi	r22, 0x37	; 55
    3c1c:	80 e1       	ldi	r24, 0x10	; 16
    3c1e:	97 e2       	ldi	r25, 0x27	; 39
    3c20:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    3c24:	7d cf       	rjmp	.-262    	; 0x3b20 <defaultLoop()+0x34>
    3c26:	49 ec       	ldi	r20, 0xC9	; 201
    3c28:	5d e1       	ldi	r21, 0x1D	; 29
    3c2a:	64 e6       	ldi	r22, 0x64	; 100
    3c2c:	80 e6       	ldi	r24, 0x60	; 96
    3c2e:	9a ee       	ldi	r25, 0xEA	; 234
    3c30:	90 cf       	rjmp	.-224    	; 0x3b52 <defaultLoop()+0x66>
    3c32:	60 e0       	ldi	r22, 0x00	; 0
    3c34:	8c ec       	ldi	r24, 0xCC	; 204
    3c36:	90 e1       	ldi	r25, 0x10	; 16
    3c38:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    3c3c:	80 e0       	ldi	r24, 0x00	; 0
    3c3e:	5e de       	rcall	.-836    	; 0x38fc <switchToSong(unsigned char)>
    3c40:	6f cf       	rjmp	.-290    	; 0x3b20 <defaultLoop()+0x34>

00003c42 <LearnToFly()>:
    3c42:	ef 92       	push	r14
    3c44:	ff 92       	push	r15
    3c46:	0f 93       	push	r16
    3c48:	1f 93       	push	r17
    3c4a:	cf 93       	push	r28
    3c4c:	df 93       	push	r29
    3c4e:	00 d0       	rcall	.+0      	; 0x3c50 <LearnToFly()+0xe>
    3c50:	00 d0       	rcall	.+0      	; 0x3c52 <LearnToFly()+0x10>
    3c52:	00 d0       	rcall	.+0      	; 0x3c54 <LearnToFly()+0x12>
    3c54:	1f 92       	push	r1
    3c56:	cd b7       	in	r28, 0x3d	; 61
    3c58:	de b7       	in	r29, 0x3e	; 62
    3c5a:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3c5e:	89 31       	cpi	r24, 0x19	; 25
    3c60:	09 f4       	brne	.+2      	; 0x3c64 <LearnToFly()+0x22>
    3c62:	87 c0       	rjmp	.+270    	; 0x3d72 <LearnToFly()+0x130>
    3c64:	38 f5       	brcc	.+78     	; 0x3cb4 <LearnToFly()+0x72>
    3c66:	85 30       	cpi	r24, 0x05	; 5
    3c68:	09 f4       	brne	.+2      	; 0x3c6c <LearnToFly()+0x2a>
    3c6a:	6f c0       	rjmp	.+222    	; 0x3d4a <LearnToFly()+0x108>
    3c6c:	98 f4       	brcc	.+38     	; 0x3c94 <LearnToFly()+0x52>
    3c6e:	88 23       	and	r24, r24
    3c70:	09 f4       	brne	.+2      	; 0x3c74 <LearnToFly()+0x32>
    3c72:	4b c0       	rjmp	.+150    	; 0x3d0a <LearnToFly()+0xc8>
    3c74:	82 30       	cpi	r24, 0x02	; 2
    3c76:	09 f4       	brne	.+2      	; 0x3c7a <LearnToFly()+0x38>
    3c78:	60 c0       	rjmp	.+192    	; 0x3d3a <LearnToFly()+0xf8>
    3c7a:	27 96       	adiw	r28, 0x07	; 7
    3c7c:	0f b6       	in	r0, 0x3f	; 63
    3c7e:	f8 94       	cli
    3c80:	de bf       	out	0x3e, r29	; 62
    3c82:	0f be       	out	0x3f, r0	; 63
    3c84:	cd bf       	out	0x3d, r28	; 61
    3c86:	df 91       	pop	r29
    3c88:	cf 91       	pop	r28
    3c8a:	1f 91       	pop	r17
    3c8c:	0f 91       	pop	r16
    3c8e:	ff 90       	pop	r15
    3c90:	ef 90       	pop	r14
    3c92:	08 95       	ret
    3c94:	8f 30       	cpi	r24, 0x0F	; 15
    3c96:	09 f4       	brne	.+2      	; 0x3c9a <LearnToFly()+0x58>
    3c98:	5e c0       	rjmp	.+188    	; 0x3d56 <LearnToFly()+0x114>
    3c9a:	84 31       	cpi	r24, 0x14	; 20
    3c9c:	09 f4       	brne	.+2      	; 0x3ca0 <LearnToFly()+0x5e>
    3c9e:	61 c0       	rjmp	.+194    	; 0x3d62 <LearnToFly()+0x120>
    3ca0:	8a 30       	cpi	r24, 0x0A	; 10
    3ca2:	59 f7       	brne	.-42     	; 0x3c7a <LearnToFly()+0x38>
    3ca4:	49 ea       	ldi	r20, 0xA9	; 169
    3ca6:	51 e0       	ldi	r21, 0x01	; 1
    3ca8:	6f e0       	ldi	r22, 0x0F	; 15
    3caa:	82 e8       	ldi	r24, 0x82	; 130
    3cac:	90 e6       	ldi	r25, 0x60	; 96
    3cae:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3cb2:	e3 cf       	rjmp	.-58     	; 0x3c7a <LearnToFly()+0x38>
    3cb4:	8d 32       	cpi	r24, 0x2D	; 45
    3cb6:	09 f4       	brne	.+2      	; 0x3cba <LearnToFly()+0x78>
    3cb8:	76 c0       	rjmp	.+236    	; 0x3da6 <LearnToFly()+0x164>
    3cba:	80 f4       	brcc	.+32     	; 0x3cdc <LearnToFly()+0x9a>
    3cbc:	83 32       	cpi	r24, 0x23	; 35
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <LearnToFly()+0x80>
    3cc0:	5f c0       	rjmp	.+190    	; 0x3d80 <LearnToFly()+0x13e>
    3cc2:	88 32       	cpi	r24, 0x28	; 40
    3cc4:	09 f4       	brne	.+2      	; 0x3cc8 <LearnToFly()+0x86>
    3cc6:	6b c0       	rjmp	.+214    	; 0x3d9e <LearnToFly()+0x15c>
    3cc8:	8e 31       	cpi	r24, 0x1E	; 30
    3cca:	b9 f6       	brne	.-82     	; 0x3c7a <LearnToFly()+0x38>
    3ccc:	49 ec       	ldi	r20, 0xC9	; 201
    3cce:	5d e1       	ldi	r21, 0x1D	; 29
    3cd0:	63 e2       	ldi	r22, 0x23	; 35
    3cd2:	8b e4       	ldi	r24, 0x4B	; 75
    3cd4:	9e e6       	ldi	r25, 0x6E	; 110
    3cd6:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    3cda:	cf cf       	rjmp	.-98     	; 0x3c7a <LearnToFly()+0x38>
    3cdc:	87 33       	cpi	r24, 0x37	; 55
    3cde:	09 f4       	brne	.+2      	; 0x3ce2 <LearnToFly()+0xa0>
    3ce0:	67 c0       	rjmp	.+206    	; 0x3db0 <LearnToFly()+0x16e>
    3ce2:	84 36       	cpi	r24, 0x64	; 100
    3ce4:	09 f4       	brne	.+2      	; 0x3ce8 <LearnToFly()+0xa6>
    3ce6:	6a c0       	rjmp	.+212    	; 0x3dbc <LearnToFly()+0x17a>
    3ce8:	82 33       	cpi	r24, 0x32	; 50
    3cea:	39 f6       	brne	.-114    	; 0x3c7a <LearnToFly()+0x38>
    3cec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3cf0:	7c 01       	movw	r14, r24
    3cf2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3cf6:	8c 01       	movw	r16, r24
    3cf8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3cfc:	9c 01       	movw	r18, r24
    3cfe:	4b e4       	ldi	r20, 0x4B	; 75
    3d00:	50 e0       	ldi	r21, 0x00	; 0
    3d02:	67 e3       	ldi	r22, 0x37	; 55
    3d04:	86 e2       	ldi	r24, 0x26	; 38
    3d06:	97 e3       	ldi	r25, 0x37	; 55
    3d08:	47 c0       	rjmp	.+142    	; 0x3d98 <LearnToFly()+0x156>
    3d0a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3d0e:	7c 01       	movw	r14, r24
    3d10:	69 e5       	ldi	r22, 0x59	; 89
    3d12:	71 e0       	ldi	r23, 0x01	; 1
    3d14:	ce 01       	movw	r24, r28
    3d16:	01 96       	adiw	r24, 0x01	; 1
    3d18:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    3d1c:	02 e0       	ldi	r16, 0x02	; 2
    3d1e:	97 01       	movw	r18, r14
    3d20:	4b e4       	ldi	r20, 0x4B	; 75
    3d22:	50 e0       	ldi	r21, 0x00	; 0
    3d24:	6c e6       	ldi	r22, 0x6C	; 108
    3d26:	75 e3       	ldi	r23, 0x35	; 53
    3d28:	ce 01       	movw	r24, r28
    3d2a:	01 96       	adiw	r24, 0x01	; 1
    3d2c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3d30:	ce 01       	movw	r24, r28
    3d32:	01 96       	adiw	r24, 0x01	; 1
    3d34:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    3d38:	a0 cf       	rjmp	.-192    	; 0x3c7a <LearnToFly()+0x38>
    3d3a:	45 e0       	ldi	r20, 0x05	; 5
    3d3c:	68 eb       	ldi	r22, 0xB8	; 184
    3d3e:	71 e0       	ldi	r23, 0x01	; 1
    3d40:	83 e9       	ldi	r24, 0x93	; 147
    3d42:	9b e1       	ldi	r25, 0x1B	; 27
    3d44:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    3d48:	98 cf       	rjmp	.-208    	; 0x3c7a <LearnToFly()+0x38>
    3d4a:	6a e0       	ldi	r22, 0x0A	; 10
    3d4c:	8b e4       	ldi	r24, 0x4B	; 75
    3d4e:	9e e6       	ldi	r25, 0x6E	; 110
    3d50:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    3d54:	92 cf       	rjmp	.-220    	; 0x3c7a <LearnToFly()+0x38>
    3d56:	64 e1       	ldi	r22, 0x14	; 20
    3d58:	86 e2       	ldi	r24, 0x26	; 38
    3d5a:	97 e3       	ldi	r25, 0x37	; 55
    3d5c:	0e 94 3c 0a 	call	0x1478	; 0x1478 <progStern(unsigned int, unsigned char)>
    3d60:	8c cf       	rjmp	.-232    	; 0x3c7a <LearnToFly()+0x38>
    3d62:	49 ea       	ldi	r20, 0xA9	; 169
    3d64:	51 e0       	ldi	r21, 0x01	; 1
    3d66:	69 e1       	ldi	r22, 0x19	; 25
    3d68:	8b e4       	ldi	r24, 0x4B	; 75
    3d6a:	9e e6       	ldi	r25, 0x6E	; 110
    3d6c:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3d70:	84 cf       	rjmp	.-248    	; 0x3c7a <LearnToFly()+0x38>
    3d72:	4e e1       	ldi	r20, 0x1E	; 30
    3d74:	65 e0       	ldi	r22, 0x05	; 5
    3d76:	80 e3       	ldi	r24, 0x30	; 48
    3d78:	95 e7       	ldi	r25, 0x75	; 117
    3d7a:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3d7e:	7d cf       	rjmp	.-262    	; 0x3c7a <LearnToFly()+0x38>
    3d80:	ee 24       	eor	r14, r14
    3d82:	ea 94       	dec	r14
    3d84:	f1 2c       	mov	r15, r1
    3d86:	0f ef       	ldi	r16, 0xFF	; 255
    3d88:	10 e0       	ldi	r17, 0x00	; 0
    3d8a:	2f ef       	ldi	r18, 0xFF	; 255
    3d8c:	30 e0       	ldi	r19, 0x00	; 0
    3d8e:	4b e4       	ldi	r20, 0x4B	; 75
    3d90:	50 e0       	ldi	r21, 0x00	; 0
    3d92:	68 e2       	ldi	r22, 0x28	; 40
    3d94:	89 ec       	ldi	r24, 0xC9	; 201
    3d96:	9d e0       	ldi	r25, 0x0D	; 13
    3d98:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3d9c:	6e cf       	rjmp	.-292    	; 0x3c7a <LearnToFly()+0x38>
    3d9e:	49 ea       	ldi	r20, 0xA9	; 169
    3da0:	51 e0       	ldi	r21, 0x01	; 1
    3da2:	6d e2       	ldi	r22, 0x2D	; 45
    3da4:	82 cf       	rjmp	.-252    	; 0x3caa <LearnToFly()+0x68>
    3da6:	42 e3       	ldi	r20, 0x32	; 50
    3da8:	65 e0       	ldi	r22, 0x05	; 5
    3daa:	88 eb       	ldi	r24, 0xB8	; 184
    3dac:	92 e5       	ldi	r25, 0x52	; 82
    3dae:	e5 cf       	rjmp	.-54     	; 0x3d7a <LearnToFly()+0x138>
    3db0:	49 ec       	ldi	r20, 0xC9	; 201
    3db2:	5d e1       	ldi	r21, 0x1D	; 29
    3db4:	64 e6       	ldi	r22, 0x64	; 100
    3db6:	8f ef       	ldi	r24, 0xFF	; 255
    3db8:	9f ef       	ldi	r25, 0xFF	; 255
    3dba:	8d cf       	rjmp	.-230    	; 0x3cd6 <LearnToFly()+0x94>
    3dbc:	60 e0       	ldi	r22, 0x00	; 0
    3dbe:	8c ec       	ldi	r24, 0xCC	; 204
    3dc0:	90 e1       	ldi	r25, 0x10	; 16
    3dc2:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	99 dd       	rcall	.-1230   	; 0x38fc <switchToSong(unsigned char)>
    3dca:	57 cf       	rjmp	.-338    	; 0x3c7a <LearnToFly()+0x38>

00003dcc <Castle()>:
    3dcc:	ef 92       	push	r14
    3dce:	ff 92       	push	r15
    3dd0:	0f 93       	push	r16
    3dd2:	1f 93       	push	r17
    3dd4:	cf 93       	push	r28
    3dd6:	df 93       	push	r29
    3dd8:	00 d0       	rcall	.+0      	; 0x3dda <Castle()+0xe>
    3dda:	00 d0       	rcall	.+0      	; 0x3ddc <Castle()+0x10>
    3ddc:	00 d0       	rcall	.+0      	; 0x3dde <Castle()+0x12>
    3dde:	1f 92       	push	r1
    3de0:	cd b7       	in	r28, 0x3d	; 61
    3de2:	de b7       	in	r29, 0x3e	; 62
    3de4:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    3de8:	82 33       	cpi	r24, 0x32	; 50
    3dea:	09 f4       	brne	.+2      	; 0x3dee <Castle()+0x22>
    3dec:	eb c0       	rjmp	.+470    	; 0x3fc4 <Castle()+0x1f8>
    3dee:	08 f0       	brcs	.+2      	; 0x3df2 <Castle()+0x26>
    3df0:	49 c0       	rjmp	.+146    	; 0x3e84 <Castle()+0xb8>
    3df2:	84 31       	cpi	r24, 0x14	; 20
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <Castle()+0x2c>
    3df6:	c8 c0       	rjmp	.+400    	; 0x3f88 <Castle()+0x1bc>
    3df8:	10 f5       	brcc	.+68     	; 0x3e3e <Castle()+0x72>
    3dfa:	85 30       	cpi	r24, 0x05	; 5
    3dfc:	09 f4       	brne	.+2      	; 0x3e00 <Castle()+0x34>
    3dfe:	b6 c0       	rjmp	.+364    	; 0x3f6c <Castle()+0x1a0>
    3e00:	98 f4       	brcc	.+38     	; 0x3e28 <Castle()+0x5c>
    3e02:	88 23       	and	r24, r24
    3e04:	09 f4       	brne	.+2      	; 0x3e08 <Castle()+0x3c>
    3e06:	92 c0       	rjmp	.+292    	; 0x3f2c <Castle()+0x160>
    3e08:	81 30       	cpi	r24, 0x01	; 1
    3e0a:	09 f4       	brne	.+2      	; 0x3e0e <Castle()+0x42>
    3e0c:	a7 c0       	rjmp	.+334    	; 0x3f5c <Castle()+0x190>
    3e0e:	27 96       	adiw	r28, 0x07	; 7
    3e10:	0f b6       	in	r0, 0x3f	; 63
    3e12:	f8 94       	cli
    3e14:	de bf       	out	0x3e, r29	; 62
    3e16:	0f be       	out	0x3f, r0	; 63
    3e18:	cd bf       	out	0x3d, r28	; 61
    3e1a:	df 91       	pop	r29
    3e1c:	cf 91       	pop	r28
    3e1e:	1f 91       	pop	r17
    3e20:	0f 91       	pop	r16
    3e22:	ff 90       	pop	r15
    3e24:	ef 90       	pop	r14
    3e26:	08 95       	ret
    3e28:	8a 30       	cpi	r24, 0x0A	; 10
    3e2a:	09 f4       	brne	.+2      	; 0x3e2e <Castle()+0x62>
    3e2c:	a7 c0       	rjmp	.+334    	; 0x3f7c <Castle()+0x1b0>
    3e2e:	8f 30       	cpi	r24, 0x0F	; 15
    3e30:	71 f7       	brne	.-36     	; 0x3e0e <Castle()+0x42>
    3e32:	64 e1       	ldi	r22, 0x14	; 20
    3e34:	87 ee       	ldi	r24, 0xE7	; 231
    3e36:	90 e4       	ldi	r25, 0x40	; 64
    3e38:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    3e3c:	e8 cf       	rjmp	.-48     	; 0x3e0e <Castle()+0x42>
    3e3e:	83 32       	cpi	r24, 0x23	; 35
    3e40:	09 f4       	brne	.+2      	; 0x3e44 <Castle()+0x78>
    3e42:	b8 c0       	rjmp	.+368    	; 0x3fb4 <Castle()+0x1e8>
    3e44:	b0 f4       	brcc	.+44     	; 0x3e72 <Castle()+0xa6>
    3e46:	89 31       	cpi	r24, 0x19	; 25
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <Castle()+0x80>
    3e4a:	ae c0       	rjmp	.+348    	; 0x3fa8 <Castle()+0x1dc>
    3e4c:	8e 31       	cpi	r24, 0x1E	; 30
    3e4e:	f9 f6       	brne	.-66     	; 0x3e0e <Castle()+0x42>
    3e50:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3e54:	7c 01       	movw	r14, r24
    3e56:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3e5a:	8c 01       	movw	r16, r24
    3e5c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3e60:	9c 01       	movw	r18, r24
    3e62:	42 e3       	ldi	r20, 0x32	; 50
    3e64:	50 e0       	ldi	r21, 0x00	; 0
    3e66:	63 e2       	ldi	r22, 0x23	; 35
    3e68:	86 e3       	ldi	r24, 0x36	; 54
    3e6a:	97 e0       	ldi	r25, 0x07	; 7
    3e6c:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3e70:	ce cf       	rjmp	.-100    	; 0x3e0e <Castle()+0x42>
    3e72:	88 32       	cpi	r24, 0x28	; 40
    3e74:	09 f4       	brne	.+2      	; 0x3e78 <Castle()+0xac>
    3e76:	a4 c0       	rjmp	.+328    	; 0x3fc0 <Castle()+0x1f4>
    3e78:	8d 32       	cpi	r24, 0x2D	; 45
    3e7a:	49 f6       	brne	.-110    	; 0x3e0e <Castle()+0x42>
    3e7c:	62 e3       	ldi	r22, 0x32	; 50
    3e7e:	8b e7       	ldi	r24, 0x7B	; 123
    3e80:	92 e3       	ldi	r25, 0x32	; 50
    3e82:	da cf       	rjmp	.-76     	; 0x3e38 <Castle()+0x6c>
    3e84:	86 34       	cpi	r24, 0x46	; 70
    3e86:	09 f4       	brne	.+2      	; 0x3e8a <Castle()+0xbe>
    3e88:	b8 c0       	rjmp	.+368    	; 0x3ffa <Castle()+0x22e>
    3e8a:	50 f5       	brcc	.+84     	; 0x3ee0 <Castle()+0x114>
    3e8c:	8a 33       	cpi	r24, 0x3A	; 58
    3e8e:	09 f4       	brne	.+2      	; 0x3e92 <Castle()+0xc6>
    3e90:	a6 c0       	rjmp	.+332    	; 0x3fde <Castle()+0x212>
    3e92:	98 f4       	brcc	.+38     	; 0x3eba <Castle()+0xee>
    3e94:	87 33       	cpi	r24, 0x37	; 55
    3e96:	09 f4       	brne	.+2      	; 0x3e9a <Castle()+0xce>
    3e98:	9a c0       	rjmp	.+308    	; 0x3fce <Castle()+0x202>
    3e9a:	88 33       	cpi	r24, 0x38	; 56
    3e9c:	09 f0       	breq	.+2      	; 0x3ea0 <Castle()+0xd4>
    3e9e:	b7 cf       	rjmp	.-146    	; 0x3e0e <Castle()+0x42>
    3ea0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ea4:	7c 01       	movw	r14, r24
    3ea6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3eaa:	8c 01       	movw	r16, r24
    3eac:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3eb0:	9c 01       	movw	r18, r24
    3eb2:	42 e3       	ldi	r20, 0x32	; 50
    3eb4:	50 e0       	ldi	r21, 0x00	; 0
    3eb6:	6a e3       	ldi	r22, 0x3A	; 58
    3eb8:	d7 cf       	rjmp	.-82     	; 0x3e68 <Castle()+0x9c>
    3eba:	8c 33       	cpi	r24, 0x3C	; 60
    3ebc:	09 f4       	brne	.+2      	; 0x3ec0 <Castle()+0xf4>
    3ebe:	95 c0       	rjmp	.+298    	; 0x3fea <Castle()+0x21e>
    3ec0:	81 34       	cpi	r24, 0x41	; 65
    3ec2:	09 f0       	breq	.+2      	; 0x3ec6 <Castle()+0xfa>
    3ec4:	a4 cf       	rjmp	.-184    	; 0x3e0e <Castle()+0x42>
    3ec6:	ee 24       	eor	r14, r14
    3ec8:	ea 94       	dec	r14
    3eca:	f1 2c       	mov	r15, r1
    3ecc:	0f ef       	ldi	r16, 0xFF	; 255
    3ece:	10 e0       	ldi	r17, 0x00	; 0
    3ed0:	2f ef       	ldi	r18, 0xFF	; 255
    3ed2:	30 e0       	ldi	r19, 0x00	; 0
    3ed4:	42 e3       	ldi	r20, 0x32	; 50
    3ed6:	50 e0       	ldi	r21, 0x00	; 0
    3ed8:	66 e4       	ldi	r22, 0x46	; 70
    3eda:	8c e6       	ldi	r24, 0x6C	; 108
    3edc:	9e e0       	ldi	r25, 0x0E	; 14
    3ede:	c6 cf       	rjmp	.-116    	; 0x3e6c <Castle()+0xa0>
    3ee0:	85 35       	cpi	r24, 0x55	; 85
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <Castle()+0x11a>
    3ee4:	9f c0       	rjmp	.+318    	; 0x4024 <Castle()+0x258>
    3ee6:	98 f4       	brcc	.+38     	; 0x3f0e <Castle()+0x142>
    3ee8:	8b 34       	cpi	r24, 0x4B	; 75
    3eea:	09 f4       	brne	.+2      	; 0x3eee <Castle()+0x122>
    3eec:	95 c0       	rjmp	.+298    	; 0x4018 <Castle()+0x24c>
    3eee:	80 35       	cpi	r24, 0x50	; 80
    3ef0:	09 f0       	breq	.+2      	; 0x3ef4 <Castle()+0x128>
    3ef2:	8d cf       	rjmp	.-230    	; 0x3e0e <Castle()+0x42>
    3ef4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ef8:	7c 01       	movw	r14, r24
    3efa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3efe:	8c 01       	movw	r16, r24
    3f00:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3f04:	9c 01       	movw	r18, r24
    3f06:	42 e3       	ldi	r20, 0x32	; 50
    3f08:	50 e0       	ldi	r21, 0x00	; 0
    3f0a:	65 e5       	ldi	r22, 0x55	; 85
    3f0c:	e6 cf       	rjmp	.-52     	; 0x3eda <Castle()+0x10e>
    3f0e:	8f 35       	cpi	r24, 0x5F	; 95
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <Castle()+0x148>
    3f12:	8f c0       	rjmp	.+286    	; 0x4032 <Castle()+0x266>
    3f14:	84 36       	cpi	r24, 0x64	; 100
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <Castle()+0x14e>
    3f18:	98 c0       	rjmp	.+304    	; 0x404a <Castle()+0x27e>
    3f1a:	8a 35       	cpi	r24, 0x5A	; 90
    3f1c:	09 f0       	breq	.+2      	; 0x3f20 <Castle()+0x154>
    3f1e:	77 cf       	rjmp	.-274    	; 0x3e0e <Castle()+0x42>
    3f20:	42 ec       	ldi	r20, 0xC2	; 194
    3f22:	51 e0       	ldi	r21, 0x01	; 1
    3f24:	6f e5       	ldi	r22, 0x5F	; 95
    3f26:	87 ec       	ldi	r24, 0xC7	; 199
    3f28:	9f e6       	ldi	r25, 0x6F	; 111
    3f2a:	25 c0       	rjmp	.+74     	; 0x3f76 <Castle()+0x1aa>
    3f2c:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3f30:	7c 01       	movw	r14, r24
    3f32:	66 e7       	ldi	r22, 0x76	; 118
    3f34:	71 e0       	ldi	r23, 0x01	; 1
    3f36:	ce 01       	movw	r24, r28
    3f38:	01 96       	adiw	r24, 0x01	; 1
    3f3a:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    3f3e:	01 e0       	ldi	r16, 0x01	; 1
    3f40:	97 01       	movw	r18, r14
    3f42:	44 e6       	ldi	r20, 0x64	; 100
    3f44:	50 e0       	ldi	r21, 0x00	; 0
    3f46:	6b e7       	ldi	r22, 0x7B	; 123
    3f48:	72 e3       	ldi	r23, 0x32	; 50
    3f4a:	ce 01       	movw	r24, r28
    3f4c:	01 96       	adiw	r24, 0x01	; 1
    3f4e:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    3f52:	ce 01       	movw	r24, r28
    3f54:	01 96       	adiw	r24, 0x01	; 1
    3f56:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    3f5a:	59 cf       	rjmp	.-334    	; 0x3e0e <Castle()+0x42>
    3f5c:	49 ec       	ldi	r20, 0xC9	; 201
    3f5e:	5d e1       	ldi	r21, 0x1D	; 29
    3f60:	65 e0       	ldi	r22, 0x05	; 5
    3f62:	89 ed       	ldi	r24, 0xD9	; 217
    3f64:	9c e1       	ldi	r25, 0x1C	; 28
    3f66:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    3f6a:	51 cf       	rjmp	.-350    	; 0x3e0e <Castle()+0x42>
    3f6c:	4d e9       	ldi	r20, 0x9D	; 157
    3f6e:	53 e0       	ldi	r21, 0x03	; 3
    3f70:	6a e0       	ldi	r22, 0x0A	; 10
    3f72:	89 ed       	ldi	r24, 0xD9	; 217
    3f74:	9c e1       	ldi	r25, 0x1C	; 28
    3f76:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3f7a:	49 cf       	rjmp	.-366    	; 0x3e0e <Castle()+0x42>
    3f7c:	6f e0       	ldi	r22, 0x0F	; 15
    3f7e:	82 e6       	ldi	r24, 0x62	; 98
    3f80:	93 e7       	ldi	r25, 0x73	; 115
    3f82:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    3f86:	43 cf       	rjmp	.-378    	; 0x3e0e <Castle()+0x42>
    3f88:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3f8c:	59 e1       	ldi	r21, 0x19	; 25
    3f8e:	e5 2e       	mov	r14, r21
    3f90:	8c 01       	movw	r16, r24
    3f92:	26 e3       	ldi	r18, 0x36	; 54
    3f94:	37 e0       	ldi	r19, 0x07	; 7
    3f96:	45 e4       	ldi	r20, 0x45	; 69
    3f98:	51 e0       	ldi	r21, 0x01	; 1
    3f9a:	66 e0       	ldi	r22, 0x06	; 6
    3f9c:	70 e0       	ldi	r23, 0x00	; 0
    3f9e:	8c ef       	ldi	r24, 0xFC	; 252
    3fa0:	99 e0       	ldi	r25, 0x09	; 9
    3fa2:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    3fa6:	33 cf       	rjmp	.-410    	; 0x3e0e <Castle()+0x42>
    3fa8:	42 ec       	ldi	r20, 0xC2	; 194
    3faa:	51 e0       	ldi	r21, 0x01	; 1
    3fac:	6e e1       	ldi	r22, 0x1E	; 30
    3fae:	8b e7       	ldi	r24, 0x7B	; 123
    3fb0:	92 e3       	ldi	r25, 0x32	; 50
    3fb2:	e1 cf       	rjmp	.-62     	; 0x3f76 <Castle()+0x1aa>
    3fb4:	42 ec       	ldi	r20, 0xC2	; 194
    3fb6:	51 e0       	ldi	r21, 0x01	; 1
    3fb8:	68 e2       	ldi	r22, 0x28	; 40
    3fba:	81 eb       	ldi	r24, 0xB1	; 177
    3fbc:	99 e3       	ldi	r25, 0x39	; 57
    3fbe:	db cf       	rjmp	.-74     	; 0x3f76 <Castle()+0x1aa>
    3fc0:	6d e2       	ldi	r22, 0x2D	; 45
    3fc2:	dd cf       	rjmp	.-70     	; 0x3f7e <Castle()+0x1b2>
    3fc4:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    3fc8:	47 e3       	ldi	r20, 0x37	; 55
    3fca:	e4 2e       	mov	r14, r20
    3fcc:	e1 cf       	rjmp	.-62     	; 0x3f90 <Castle()+0x1c4>
    3fce:	42 ec       	ldi	r20, 0xC2	; 194
    3fd0:	51 e0       	ldi	r21, 0x01	; 1
    3fd2:	68 e3       	ldi	r22, 0x38	; 56
    3fd4:	8b e7       	ldi	r24, 0x7B	; 123
    3fd6:	92 e3       	ldi	r25, 0x32	; 50
    3fd8:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3fdc:	18 cf       	rjmp	.-464    	; 0x3e0e <Castle()+0x42>
    3fde:	42 ec       	ldi	r20, 0xC2	; 194
    3fe0:	51 e0       	ldi	r21, 0x01	; 1
    3fe2:	6c e3       	ldi	r22, 0x3C	; 60
    3fe4:	81 eb       	ldi	r24, 0xB1	; 177
    3fe6:	99 e3       	ldi	r25, 0x39	; 57
    3fe8:	f7 cf       	rjmp	.-18     	; 0x3fd8 <Castle()+0x20c>
    3fea:	41 e4       	ldi	r20, 0x41	; 65
    3fec:	6a e3       	ldi	r22, 0x3A	; 58
    3fee:	77 e0       	ldi	r23, 0x07	; 7
    3ff0:	86 e8       	ldi	r24, 0x86	; 134
    3ff2:	9d e4       	ldi	r25, 0x4D	; 77
    3ff4:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    3ff8:	0a cf       	rjmp	.-492    	; 0x3e0e <Castle()+0x42>
    3ffa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    3ffe:	7c 01       	movw	r14, r24
    4000:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4004:	8c 01       	movw	r16, r24
    4006:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    400a:	9c 01       	movw	r18, r24
    400c:	42 e3       	ldi	r20, 0x32	; 50
    400e:	50 e0       	ldi	r21, 0x00	; 0
    4010:	6b e4       	ldi	r22, 0x4B	; 75
    4012:	80 e7       	ldi	r24, 0x70	; 112
    4014:	97 e1       	ldi	r25, 0x17	; 23
    4016:	2a cf       	rjmp	.-428    	; 0x3e6c <Castle()+0xa0>
    4018:	40 e5       	ldi	r20, 0x50	; 80
    401a:	6a e3       	ldi	r22, 0x3A	; 58
    401c:	77 e0       	ldi	r23, 0x07	; 7
    401e:	81 eb       	ldi	r24, 0xB1	; 177
    4020:	99 e3       	ldi	r25, 0x39	; 57
    4022:	e8 cf       	rjmp	.-48     	; 0x3ff4 <Castle()+0x228>
    4024:	4a e5       	ldi	r20, 0x5A	; 90
    4026:	65 e0       	ldi	r22, 0x05	; 5
    4028:	82 e6       	ldi	r24, 0x62	; 98
    402a:	93 e7       	ldi	r25, 0x73	; 115
    402c:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4030:	ee ce       	rjmp	.-548    	; 0x3e0e <Castle()+0x42>
    4032:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4036:	29 e0       	ldi	r18, 0x09	; 9
    4038:	e2 2e       	mov	r14, r18
    403a:	8c 01       	movw	r16, r24
    403c:	20 e6       	ldi	r18, 0x60	; 96
    403e:	3a ee       	ldi	r19, 0xEA	; 234
    4040:	45 e4       	ldi	r20, 0x45	; 69
    4042:	51 e0       	ldi	r21, 0x01	; 1
    4044:	64 e6       	ldi	r22, 0x64	; 100
    4046:	70 e0       	ldi	r23, 0x00	; 0
    4048:	aa cf       	rjmp	.-172    	; 0x3f9e <Castle()+0x1d2>
    404a:	60 e0       	ldi	r22, 0x00	; 0
    404c:	8c ec       	ldi	r24, 0xCC	; 204
    404e:	90 e1       	ldi	r25, 0x10	; 16
    4050:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    4054:	80 e0       	ldi	r24, 0x00	; 0
    4056:	52 dc       	rcall	.-1884   	; 0x38fc <switchToSong(unsigned char)>
    4058:	da ce       	rjmp	.-588    	; 0x3e0e <Castle()+0x42>

0000405a <TooClose()>:
    405a:	ef 92       	push	r14
    405c:	ff 92       	push	r15
    405e:	0f 93       	push	r16
    4060:	1f 93       	push	r17
    4062:	cf 93       	push	r28
    4064:	df 93       	push	r29
    4066:	00 d0       	rcall	.+0      	; 0x4068 <TooClose()+0xe>
    4068:	00 d0       	rcall	.+0      	; 0x406a <TooClose()+0x10>
    406a:	00 d0       	rcall	.+0      	; 0x406c <TooClose()+0x12>
    406c:	1f 92       	push	r1
    406e:	cd b7       	in	r28, 0x3d	; 61
    4070:	de b7       	in	r29, 0x3e	; 62
    4072:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    4076:	8e 31       	cpi	r24, 0x1E	; 30
    4078:	09 f4       	brne	.+2      	; 0x407c <TooClose()+0x22>
    407a:	9f c0       	rjmp	.+318    	; 0x41ba <TooClose()+0x160>
    407c:	f0 f5       	brcc	.+124    	; 0x40fa <TooClose()+0xa0>
    407e:	8a 30       	cpi	r24, 0x0A	; 10
    4080:	09 f4       	brne	.+2      	; 0x4084 <TooClose()+0x2a>
    4082:	7d c0       	rjmp	.+250    	; 0x417e <TooClose()+0x124>
    4084:	60 f5       	brcc	.+88     	; 0x40de <TooClose()+0x84>
    4086:	82 30       	cpi	r24, 0x02	; 2
    4088:	09 f4       	brne	.+2      	; 0x408c <TooClose()+0x32>
    408a:	69 c0       	rjmp	.+210    	; 0x415e <TooClose()+0x104>
    408c:	85 30       	cpi	r24, 0x05	; 5
    408e:	09 f4       	brne	.+2      	; 0x4092 <TooClose()+0x38>
    4090:	6e c0       	rjmp	.+220    	; 0x416e <TooClose()+0x114>
    4092:	81 11       	cpse	r24, r1
    4094:	17 c0       	rjmp	.+46     	; 0x40c4 <TooClose()+0x6a>
    4096:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    409a:	7c 01       	movw	r14, r24
    409c:	67 e8       	ldi	r22, 0x87	; 135
    409e:	71 e0       	ldi	r23, 0x01	; 1
    40a0:	ce 01       	movw	r24, r28
    40a2:	01 96       	adiw	r24, 0x01	; 1
    40a4:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    40a8:	02 e0       	ldi	r16, 0x02	; 2
    40aa:	97 01       	movw	r18, r14
    40ac:	4b e4       	ldi	r20, 0x4B	; 75
    40ae:	50 e0       	ldi	r21, 0x00	; 0
    40b0:	61 e8       	ldi	r22, 0x81	; 129
    40b2:	7e e2       	ldi	r23, 0x2E	; 46
    40b4:	ce 01       	movw	r24, r28
    40b6:	01 96       	adiw	r24, 0x01	; 1
    40b8:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    40bc:	ce 01       	movw	r24, r28
    40be:	01 96       	adiw	r24, 0x01	; 1
    40c0:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    40c4:	27 96       	adiw	r28, 0x07	; 7
    40c6:	0f b6       	in	r0, 0x3f	; 63
    40c8:	f8 94       	cli
    40ca:	de bf       	out	0x3e, r29	; 62
    40cc:	0f be       	out	0x3f, r0	; 63
    40ce:	cd bf       	out	0x3d, r28	; 61
    40d0:	df 91       	pop	r29
    40d2:	cf 91       	pop	r28
    40d4:	1f 91       	pop	r17
    40d6:	0f 91       	pop	r16
    40d8:	ff 90       	pop	r15
    40da:	ef 90       	pop	r14
    40dc:	08 95       	ret
    40de:	84 31       	cpi	r24, 0x14	; 20
    40e0:	09 f4       	brne	.+2      	; 0x40e4 <TooClose()+0x8a>
    40e2:	55 c0       	rjmp	.+170    	; 0x418e <TooClose()+0x134>
    40e4:	89 31       	cpi	r24, 0x19	; 25
    40e6:	09 f4       	brne	.+2      	; 0x40ea <TooClose()+0x90>
    40e8:	58 c0       	rjmp	.+176    	; 0x419a <TooClose()+0x140>
    40ea:	8f 30       	cpi	r24, 0x0F	; 15
    40ec:	59 f7       	brne	.-42     	; 0x40c4 <TooClose()+0x6a>
    40ee:	46 eb       	ldi	r20, 0xB6	; 182
    40f0:	53 e0       	ldi	r21, 0x03	; 3
    40f2:	64 e1       	ldi	r22, 0x14	; 20
    40f4:	89 e7       	ldi	r24, 0x79	; 121
    40f6:	9b e3       	ldi	r25, 0x3B	; 59
    40f8:	37 c0       	rjmp	.+110    	; 0x4168 <TooClose()+0x10e>
    40fa:	82 33       	cpi	r24, 0x32	; 50
    40fc:	09 f4       	brne	.+2      	; 0x4100 <TooClose()+0xa6>
    40fe:	72 c0       	rjmp	.+228    	; 0x41e4 <TooClose()+0x18a>
    4100:	b8 f4       	brcc	.+46     	; 0x4130 <TooClose()+0xd6>
    4102:	88 32       	cpi	r24, 0x28	; 40
    4104:	09 f4       	brne	.+2      	; 0x4108 <TooClose()+0xae>
    4106:	61 c0       	rjmp	.+194    	; 0x41ca <TooClose()+0x170>
    4108:	8d 32       	cpi	r24, 0x2D	; 45
    410a:	09 f4       	brne	.+2      	; 0x410e <TooClose()+0xb4>
    410c:	64 c0       	rjmp	.+200    	; 0x41d6 <TooClose()+0x17c>
    410e:	83 32       	cpi	r24, 0x23	; 35
    4110:	c9 f6       	brne	.-78     	; 0x40c4 <TooClose()+0x6a>
    4112:	ee 24       	eor	r14, r14
    4114:	ea 94       	dec	r14
    4116:	f1 2c       	mov	r15, r1
    4118:	0f ef       	ldi	r16, 0xFF	; 255
    411a:	10 e0       	ldi	r17, 0x00	; 0
    411c:	2f ef       	ldi	r18, 0xFF	; 255
    411e:	30 e0       	ldi	r19, 0x00	; 0
    4120:	4b e4       	ldi	r20, 0x4B	; 75
    4122:	50 e0       	ldi	r21, 0x00	; 0
    4124:	68 e2       	ldi	r22, 0x28	; 40
    4126:	89 e7       	ldi	r24, 0x79	; 121
    4128:	9b e3       	ldi	r25, 0x3B	; 59
    412a:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    412e:	ca cf       	rjmp	.-108    	; 0x40c4 <TooClose()+0x6a>
    4130:	8c 33       	cpi	r24, 0x3C	; 60
    4132:	09 f4       	brne	.+2      	; 0x4136 <TooClose()+0xdc>
    4134:	5d c0       	rjmp	.+186    	; 0x41f0 <TooClose()+0x196>
    4136:	84 36       	cpi	r24, 0x64	; 100
    4138:	09 f4       	brne	.+2      	; 0x413c <TooClose()+0xe2>
    413a:	62 c0       	rjmp	.+196    	; 0x4200 <TooClose()+0x1a6>
    413c:	87 33       	cpi	r24, 0x37	; 55
    413e:	11 f6       	brne	.-124    	; 0x40c4 <TooClose()+0x6a>
    4140:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4144:	7c 01       	movw	r14, r24
    4146:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    414a:	8c 01       	movw	r16, r24
    414c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4150:	9c 01       	movw	r18, r24
    4152:	4b e4       	ldi	r20, 0x4B	; 75
    4154:	50 e0       	ldi	r21, 0x00	; 0
    4156:	6c e3       	ldi	r22, 0x3C	; 60
    4158:	80 eb       	ldi	r24, 0xB0	; 176
    415a:	9d e1       	ldi	r25, 0x1D	; 29
    415c:	e6 cf       	rjmp	.-52     	; 0x412a <TooClose()+0xd0>
    415e:	46 eb       	ldi	r20, 0xB6	; 182
    4160:	53 e0       	ldi	r21, 0x03	; 3
    4162:	65 e0       	ldi	r22, 0x05	; 5
    4164:	82 e7       	ldi	r24, 0x72	; 114
    4166:	94 e6       	ldi	r25, 0x64	; 100
    4168:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    416c:	ab cf       	rjmp	.-170    	; 0x40c4 <TooClose()+0x6a>
    416e:	4b ed       	ldi	r20, 0xDB	; 219
    4170:	51 e0       	ldi	r21, 0x01	; 1
    4172:	6a e0       	ldi	r22, 0x0A	; 10
    4174:	84 e8       	ldi	r24, 0x84	; 132
    4176:	92 eb       	ldi	r25, 0xB2	; 178
    4178:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    417c:	a3 cf       	rjmp	.-186    	; 0x40c4 <TooClose()+0x6a>
    417e:	46 eb       	ldi	r20, 0xB6	; 182
    4180:	53 e0       	ldi	r21, 0x03	; 3
    4182:	6f e0       	ldi	r22, 0x0F	; 15
    4184:	8b e0       	ldi	r24, 0x0B	; 11
    4186:	97 e7       	ldi	r25, 0x77	; 119
    4188:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    418c:	9b cf       	rjmp	.-202    	; 0x40c4 <TooClose()+0x6a>
    418e:	4b ed       	ldi	r20, 0xDB	; 219
    4190:	51 e0       	ldi	r21, 0x01	; 1
    4192:	69 e1       	ldi	r22, 0x19	; 25
    4194:	8b e0       	ldi	r24, 0x0B	; 11
    4196:	97 e7       	ldi	r25, 0x77	; 119
    4198:	ef cf       	rjmp	.-34     	; 0x4178 <TooClose()+0x11e>
    419a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    419e:	2e e1       	ldi	r18, 0x1E	; 30
    41a0:	e2 2e       	mov	r14, r18
    41a2:	8c 01       	movw	r16, r24
    41a4:	2b e2       	ldi	r18, 0x2B	; 43
    41a6:	36 e1       	ldi	r19, 0x16	; 22
    41a8:	4b ed       	ldi	r20, 0xDB	; 219
    41aa:	51 e0       	ldi	r21, 0x01	; 1
    41ac:	6a e0       	ldi	r22, 0x0A	; 10
    41ae:	70 e0       	ldi	r23, 0x00	; 0
    41b0:	86 e2       	ldi	r24, 0x26	; 38
    41b2:	9a e0       	ldi	r25, 0x0A	; 10
    41b4:	0e 94 ec 10 	call	0x21d8	; 0x21d8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    41b8:	85 cf       	rjmp	.-246    	; 0x40c4 <TooClose()+0x6a>
    41ba:	43 e2       	ldi	r20, 0x23	; 35
    41bc:	6c e6       	ldi	r22, 0x6C	; 108
    41be:	77 e0       	ldi	r23, 0x07	; 7
    41c0:	87 ec       	ldi	r24, 0xC7	; 199
    41c2:	90 e6       	ldi	r25, 0x60	; 96
    41c4:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    41c8:	7d cf       	rjmp	.-262    	; 0x40c4 <TooClose()+0x6a>
    41ca:	48 eb       	ldi	r20, 0xB8	; 184
    41cc:	53 e0       	ldi	r21, 0x03	; 3
    41ce:	6d e2       	ldi	r22, 0x2D	; 45
    41d0:	89 e7       	ldi	r24, 0x79	; 121
    41d2:	9b e3       	ldi	r25, 0x3B	; 59
    41d4:	d9 cf       	rjmp	.-78     	; 0x4188 <TooClose()+0x12e>
    41d6:	42 e3       	ldi	r20, 0x32	; 50
    41d8:	65 e0       	ldi	r22, 0x05	; 5
    41da:	80 eb       	ldi	r24, 0xB0	; 176
    41dc:	9d e1       	ldi	r25, 0x1D	; 29
    41de:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    41e2:	70 cf       	rjmp	.-288    	; 0x40c4 <TooClose()+0x6a>
    41e4:	46 eb       	ldi	r20, 0xB6	; 182
    41e6:	53 e0       	ldi	r21, 0x03	; 3
    41e8:	67 e3       	ldi	r22, 0x37	; 55
    41ea:	80 eb       	ldi	r24, 0xB0	; 176
    41ec:	9d e1       	ldi	r25, 0x1D	; 29
    41ee:	cc cf       	rjmp	.-104    	; 0x4188 <TooClose()+0x12e>
    41f0:	49 ec       	ldi	r20, 0xC9	; 201
    41f2:	5d e1       	ldi	r21, 0x1D	; 29
    41f4:	64 e6       	ldi	r22, 0x64	; 100
    41f6:	8f ef       	ldi	r24, 0xFF	; 255
    41f8:	9f ef       	ldi	r25, 0xFF	; 255
    41fa:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    41fe:	62 cf       	rjmp	.-316    	; 0x40c4 <TooClose()+0x6a>
    4200:	60 e0       	ldi	r22, 0x00	; 0
    4202:	8c ec       	ldi	r24, 0xCC	; 204
    4204:	90 e1       	ldi	r25, 0x10	; 16
    4206:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    420a:	80 e0       	ldi	r24, 0x00	; 0
    420c:	77 db       	rcall	.-2322   	; 0x38fc <switchToSong(unsigned char)>
    420e:	5a cf       	rjmp	.-332    	; 0x40c4 <TooClose()+0x6a>

00004210 <Pokerface()>:
    4210:	ef 92       	push	r14
    4212:	ff 92       	push	r15
    4214:	0f 93       	push	r16
    4216:	1f 93       	push	r17
    4218:	cf 93       	push	r28
    421a:	df 93       	push	r29
    421c:	00 d0       	rcall	.+0      	; 0x421e <Pokerface()+0xe>
    421e:	00 d0       	rcall	.+0      	; 0x4220 <Pokerface()+0x10>
    4220:	00 d0       	rcall	.+0      	; 0x4222 <Pokerface()+0x12>
    4222:	1f 92       	push	r1
    4224:	cd b7       	in	r28, 0x3d	; 61
    4226:	de b7       	in	r29, 0x3e	; 62
    4228:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    422c:	8e 31       	cpi	r24, 0x1E	; 30
    422e:	09 f4       	brne	.+2      	; 0x4232 <Pokerface()+0x22>
    4230:	af c0       	rjmp	.+350    	; 0x4390 <Pokerface()+0x180>
    4232:	a0 f5       	brcc	.+104    	; 0x429c <Pokerface()+0x8c>
    4234:	85 30       	cpi	r24, 0x05	; 5
    4236:	09 f4       	brne	.+2      	; 0x423a <Pokerface()+0x2a>
    4238:	92 c0       	rjmp	.+292    	; 0x435e <Pokerface()+0x14e>
    423a:	b8 f4       	brcc	.+46     	; 0x426a <Pokerface()+0x5a>
    423c:	81 30       	cpi	r24, 0x01	; 1
    423e:	09 f4       	brne	.+2      	; 0x4242 <Pokerface()+0x32>
    4240:	87 c0       	rjmp	.+270    	; 0x4350 <Pokerface()+0x140>
    4242:	08 f4       	brcc	.+2      	; 0x4246 <Pokerface()+0x36>
    4244:	6d c0       	rjmp	.+218    	; 0x4320 <Pokerface()+0x110>
    4246:	45 e0       	ldi	r20, 0x05	; 5
    4248:	64 e0       	ldi	r22, 0x04	; 4
    424a:	82 30       	cpi	r24, 0x02	; 2
    424c:	09 f4       	brne	.+2      	; 0x4250 <Pokerface()+0x40>
    424e:	82 c0       	rjmp	.+260    	; 0x4354 <Pokerface()+0x144>
    4250:	27 96       	adiw	r28, 0x07	; 7
    4252:	0f b6       	in	r0, 0x3f	; 63
    4254:	f8 94       	cli
    4256:	de bf       	out	0x3e, r29	; 62
    4258:	0f be       	out	0x3f, r0	; 63
    425a:	cd bf       	out	0x3d, r28	; 61
    425c:	df 91       	pop	r29
    425e:	cf 91       	pop	r28
    4260:	1f 91       	pop	r17
    4262:	0f 91       	pop	r16
    4264:	ff 90       	pop	r15
    4266:	ef 90       	pop	r14
    4268:	08 95       	ret
    426a:	8f 30       	cpi	r24, 0x0F	; 15
    426c:	09 f4       	brne	.+2      	; 0x4270 <Pokerface()+0x60>
    426e:	7b c0       	rjmp	.+246    	; 0x4366 <Pokerface()+0x156>
    4270:	40 f4       	brcc	.+16     	; 0x4282 <Pokerface()+0x72>
    4272:	8a 30       	cpi	r24, 0x0A	; 10
    4274:	69 f7       	brne	.-38     	; 0x4250 <Pokerface()+0x40>
    4276:	6f e0       	ldi	r22, 0x0F	; 15
    4278:	86 e0       	ldi	r24, 0x06	; 6
    427a:	9f e3       	ldi	r25, 0x3F	; 63
    427c:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    4280:	e7 cf       	rjmp	.-50     	; 0x4250 <Pokerface()+0x40>
    4282:	84 31       	cpi	r24, 0x14	; 20
    4284:	09 f4       	brne	.+2      	; 0x4288 <Pokerface()+0x78>
    4286:	73 c0       	rjmp	.+230    	; 0x436e <Pokerface()+0x15e>
    4288:	44 ef       	ldi	r20, 0xF4	; 244
    428a:	51 e0       	ldi	r21, 0x01	; 1
    428c:	6e e1       	ldi	r22, 0x1E	; 30
    428e:	89 31       	cpi	r24, 0x19	; 25
    4290:	f9 f6       	brne	.-66     	; 0x4250 <Pokerface()+0x40>
    4292:	86 e0       	ldi	r24, 0x06	; 6
    4294:	9f e3       	ldi	r25, 0x3F	; 63
    4296:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    429a:	da cf       	rjmp	.-76     	; 0x4250 <Pokerface()+0x40>
    429c:	87 33       	cpi	r24, 0x37	; 55
    429e:	09 f4       	brne	.+2      	; 0x42a2 <Pokerface()+0x92>
    42a0:	8f c0       	rjmp	.+286    	; 0x43c0 <Pokerface()+0x1b0>
    42a2:	d0 f4       	brcc	.+52     	; 0x42d8 <Pokerface()+0xc8>
    42a4:	88 32       	cpi	r24, 0x28	; 40
    42a6:	09 f4       	brne	.+2      	; 0x42aa <Pokerface()+0x9a>
    42a8:	78 c0       	rjmp	.+240    	; 0x439a <Pokerface()+0x18a>
    42aa:	50 f4       	brcc	.+20     	; 0x42c0 <Pokerface()+0xb0>
    42ac:	44 ef       	ldi	r20, 0xF4	; 244
    42ae:	51 e0       	ldi	r21, 0x01	; 1
    42b0:	68 e2       	ldi	r22, 0x28	; 40
    42b2:	83 32       	cpi	r24, 0x23	; 35
    42b4:	69 f6       	brne	.-102    	; 0x4250 <Pokerface()+0x40>
    42b6:	86 e0       	ldi	r24, 0x06	; 6
    42b8:	9f e3       	ldi	r25, 0x3F	; 63
    42ba:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    42be:	c8 cf       	rjmp	.-112    	; 0x4250 <Pokerface()+0x40>
    42c0:	8d 32       	cpi	r24, 0x2D	; 45
    42c2:	09 f4       	brne	.+2      	; 0x42c6 <Pokerface()+0xb6>
    42c4:	77 c0       	rjmp	.+238    	; 0x43b4 <Pokerface()+0x1a4>
    42c6:	82 33       	cpi	r24, 0x32	; 50
    42c8:	19 f6       	brne	.-122    	; 0x4250 <Pokerface()+0x40>
    42ca:	47 e3       	ldi	r20, 0x37	; 55
    42cc:	67 e0       	ldi	r22, 0x07	; 7
    42ce:	8d ef       	ldi	r24, 0xFD	; 253
    42d0:	9e e3       	ldi	r25, 0x3E	; 62
    42d2:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    42d6:	bc cf       	rjmp	.-136    	; 0x4250 <Pokerface()+0x40>
    42d8:	81 34       	cpi	r24, 0x41	; 65
    42da:	09 f4       	brne	.+2      	; 0x42de <Pokerface()+0xce>
    42dc:	75 c0       	rjmp	.+234    	; 0x43c8 <Pokerface()+0x1b8>
    42de:	90 f4       	brcc	.+36     	; 0x4304 <Pokerface()+0xf4>
    42e0:	8c 33       	cpi	r24, 0x3C	; 60
    42e2:	09 f0       	breq	.+2      	; 0x42e6 <Pokerface()+0xd6>
    42e4:	b5 cf       	rjmp	.-150    	; 0x4250 <Pokerface()+0x40>
    42e6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    42ea:	7c 01       	movw	r14, r24
    42ec:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    42f0:	8c 01       	movw	r16, r24
    42f2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    42f6:	9c 01       	movw	r18, r24
    42f8:	4b e4       	ldi	r20, 0x4B	; 75
    42fa:	50 e0       	ldi	r21, 0x00	; 0
    42fc:	61 e4       	ldi	r22, 0x41	; 65
    42fe:	84 e4       	ldi	r24, 0x44	; 68
    4300:	9f e2       	ldi	r25, 0x2F	; 47
    4302:	43 c0       	rjmp	.+134    	; 0x438a <Pokerface()+0x17a>
    4304:	86 34       	cpi	r24, 0x46	; 70
    4306:	09 f4       	brne	.+2      	; 0x430a <Pokerface()+0xfa>
    4308:	64 c0       	rjmp	.+200    	; 0x43d2 <Pokerface()+0x1c2>
    430a:	84 36       	cpi	r24, 0x64	; 100
    430c:	09 f0       	breq	.+2      	; 0x4310 <Pokerface()+0x100>
    430e:	a0 cf       	rjmp	.-192    	; 0x4250 <Pokerface()+0x40>
    4310:	60 e0       	ldi	r22, 0x00	; 0
    4312:	8c ec       	ldi	r24, 0xCC	; 204
    4314:	90 e1       	ldi	r25, 0x10	; 16
    4316:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	ef da       	rcall	.-2594   	; 0x38fc <switchToSong(unsigned char)>
    431e:	98 cf       	rjmp	.-208    	; 0x4250 <Pokerface()+0x40>
    4320:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4324:	7c 01       	movw	r14, r24
    4326:	6f e9       	ldi	r22, 0x9F	; 159
    4328:	71 e0       	ldi	r23, 0x01	; 1
    432a:	ce 01       	movw	r24, r28
    432c:	01 96       	adiw	r24, 0x01	; 1
    432e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    4332:	01 e0       	ldi	r16, 0x01	; 1
    4334:	97 01       	movw	r18, r14
    4336:	4b e4       	ldi	r20, 0x4B	; 75
    4338:	50 e0       	ldi	r21, 0x00	; 0
    433a:	6e e0       	ldi	r22, 0x0E	; 14
    433c:	7d e3       	ldi	r23, 0x3D	; 61
    433e:	ce 01       	movw	r24, r28
    4340:	01 96       	adiw	r24, 0x01	; 1
    4342:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4346:	ce 01       	movw	r24, r28
    4348:	01 96       	adiw	r24, 0x01	; 1
    434a:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    434e:	80 cf       	rjmp	.-256    	; 0x4250 <Pokerface()+0x40>
    4350:	42 e0       	ldi	r20, 0x02	; 2
    4352:	63 e0       	ldi	r22, 0x03	; 3
    4354:	83 e8       	ldi	r24, 0x83	; 131
    4356:	9f e1       	ldi	r25, 0x1F	; 31
    4358:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    435c:	79 cf       	rjmp	.-270    	; 0x4250 <Pokerface()+0x40>
    435e:	44 ef       	ldi	r20, 0xF4	; 244
    4360:	51 e0       	ldi	r21, 0x01	; 1
    4362:	6a e0       	ldi	r22, 0x0A	; 10
    4364:	96 cf       	rjmp	.-212    	; 0x4292 <Pokerface()+0x82>
    4366:	44 ef       	ldi	r20, 0xF4	; 244
    4368:	51 e0       	ldi	r21, 0x01	; 1
    436a:	64 e1       	ldi	r22, 0x14	; 20
    436c:	a4 cf       	rjmp	.-184    	; 0x42b6 <Pokerface()+0xa6>
    436e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4372:	7c 01       	movw	r14, r24
    4374:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4378:	8c 01       	movw	r16, r24
    437a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    437e:	9c 01       	movw	r18, r24
    4380:	4b e4       	ldi	r20, 0x4B	; 75
    4382:	50 e0       	ldi	r21, 0x00	; 0
    4384:	69 e1       	ldi	r22, 0x19	; 25
    4386:	86 e0       	ldi	r24, 0x06	; 6
    4388:	9f e3       	ldi	r25, 0x3F	; 63
    438a:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    438e:	60 cf       	rjmp	.-320    	; 0x4250 <Pokerface()+0x40>
    4390:	43 e2       	ldi	r20, 0x23	; 35
    4392:	64 e0       	ldi	r22, 0x04	; 4
    4394:	86 e0       	ldi	r24, 0x06	; 6
    4396:	9f e3       	ldi	r25, 0x3F	; 63
    4398:	df cf       	rjmp	.-66     	; 0x4358 <Pokerface()+0x148>
    439a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    439e:	7c 01       	movw	r14, r24
    43a0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    43a4:	8c 01       	movw	r16, r24
    43a6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    43aa:	9c 01       	movw	r18, r24
    43ac:	4b e4       	ldi	r20, 0x4B	; 75
    43ae:	50 e0       	ldi	r21, 0x00	; 0
    43b0:	6d e2       	ldi	r22, 0x2D	; 45
    43b2:	e9 cf       	rjmp	.-46     	; 0x4386 <Pokerface()+0x176>
    43b4:	62 e3       	ldi	r22, 0x32	; 50
    43b6:	82 e7       	ldi	r24, 0x72	; 114
    43b8:	9f e1       	ldi	r25, 0x1F	; 31
    43ba:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    43be:	48 cf       	rjmp	.-368    	; 0x4250 <Pokerface()+0x40>
    43c0:	44 ef       	ldi	r20, 0xF4	; 244
    43c2:	51 e0       	ldi	r21, 0x01	; 1
    43c4:	6c e3       	ldi	r22, 0x3C	; 60
    43c6:	77 cf       	rjmp	.-274    	; 0x42b6 <Pokerface()+0xa6>
    43c8:	46 e4       	ldi	r20, 0x46	; 70
    43ca:	6c e0       	ldi	r22, 0x0C	; 12
    43cc:	89 eb       	ldi	r24, 0xB9	; 185
    43ce:	9f e0       	ldi	r25, 0x0F	; 15
    43d0:	80 cf       	rjmp	.-256    	; 0x42d2 <Pokerface()+0xc2>
    43d2:	64 e6       	ldi	r22, 0x64	; 100
    43d4:	80 e1       	ldi	r24, 0x10	; 16
    43d6:	97 e2       	ldi	r25, 0x27	; 39
    43d8:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    43dc:	39 cf       	rjmp	.-398    	; 0x4250 <Pokerface()+0x40>

000043de <UseSomebody()>:
    43de:	ef 92       	push	r14
    43e0:	ff 92       	push	r15
    43e2:	0f 93       	push	r16
    43e4:	1f 93       	push	r17
    43e6:	cf 93       	push	r28
    43e8:	df 93       	push	r29
    43ea:	00 d0       	rcall	.+0      	; 0x43ec <UseSomebody()+0xe>
    43ec:	00 d0       	rcall	.+0      	; 0x43ee <UseSomebody()+0x10>
    43ee:	00 d0       	rcall	.+0      	; 0x43f0 <UseSomebody()+0x12>
    43f0:	1f 92       	push	r1
    43f2:	cd b7       	in	r28, 0x3d	; 61
    43f4:	de b7       	in	r29, 0x3e	; 62
    43f6:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    43fa:	84 31       	cpi	r24, 0x14	; 20
    43fc:	09 f4       	brne	.+2      	; 0x4400 <UseSomebody()+0x22>
    43fe:	75 c0       	rjmp	.+234    	; 0x44ea <UseSomebody()+0x10c>
    4400:	48 f5       	brcc	.+82     	; 0x4454 <UseSomebody()+0x76>
    4402:	82 30       	cpi	r24, 0x02	; 2
    4404:	09 f4       	brne	.+2      	; 0x4408 <UseSomebody()+0x2a>
    4406:	5c c0       	rjmp	.+184    	; 0x44c0 <UseSomebody()+0xe2>
    4408:	a8 f4       	brcc	.+42     	; 0x4434 <UseSomebody()+0x56>
    440a:	88 23       	and	r24, r24
    440c:	09 f4       	brne	.+2      	; 0x4410 <UseSomebody()+0x32>
    440e:	40 c0       	rjmp	.+128    	; 0x4490 <UseSomebody()+0xb2>
    4410:	42 e0       	ldi	r20, 0x02	; 2
    4412:	63 e0       	ldi	r22, 0x03	; 3
    4414:	81 30       	cpi	r24, 0x01	; 1
    4416:	09 f4       	brne	.+2      	; 0x441a <UseSomebody()+0x3c>
    4418:	7b c0       	rjmp	.+246    	; 0x4510 <UseSomebody()+0x132>
    441a:	27 96       	adiw	r28, 0x07	; 7
    441c:	0f b6       	in	r0, 0x3f	; 63
    441e:	f8 94       	cli
    4420:	de bf       	out	0x3e, r29	; 62
    4422:	0f be       	out	0x3f, r0	; 63
    4424:	cd bf       	out	0x3d, r28	; 61
    4426:	df 91       	pop	r29
    4428:	cf 91       	pop	r28
    442a:	1f 91       	pop	r17
    442c:	0f 91       	pop	r16
    442e:	ff 90       	pop	r15
    4430:	ef 90       	pop	r14
    4432:	08 95       	ret
    4434:	8a 30       	cpi	r24, 0x0A	; 10
    4436:	09 f4       	brne	.+2      	; 0x443a <UseSomebody()+0x5c>
    4438:	4a c0       	rjmp	.+148    	; 0x44ce <UseSomebody()+0xf0>
    443a:	8f 30       	cpi	r24, 0x0F	; 15
    443c:	09 f4       	brne	.+2      	; 0x4440 <UseSomebody()+0x62>
    443e:	4d c0       	rjmp	.+154    	; 0x44da <UseSomebody()+0xfc>
    4440:	85 30       	cpi	r24, 0x05	; 5
    4442:	59 f7       	brne	.-42     	; 0x441a <UseSomebody()+0x3c>
    4444:	49 ea       	ldi	r20, 0xA9	; 169
    4446:	51 e0       	ldi	r21, 0x01	; 1
    4448:	6a e0       	ldi	r22, 0x0A	; 10
    444a:	82 eb       	ldi	r24, 0xB2	; 178
    444c:	9c e6       	ldi	r25, 0x6C	; 108
    444e:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4452:	e3 cf       	rjmp	.-58     	; 0x441a <UseSomebody()+0x3c>
    4454:	88 32       	cpi	r24, 0x28	; 40
    4456:	09 f4       	brne	.+2      	; 0x445a <UseSomebody()+0x7c>
    4458:	62 c0       	rjmp	.+196    	; 0x451e <UseSomebody()+0x140>
    445a:	60 f4       	brcc	.+24     	; 0x4474 <UseSomebody()+0x96>
    445c:	8e 31       	cpi	r24, 0x1E	; 30
    445e:	09 f4       	brne	.+2      	; 0x4462 <UseSomebody()+0x84>
    4460:	55 c0       	rjmp	.+170    	; 0x450c <UseSomebody()+0x12e>
    4462:	83 32       	cpi	r24, 0x23	; 35
    4464:	09 f4       	brne	.+2      	; 0x4468 <UseSomebody()+0x8a>
    4466:	57 c0       	rjmp	.+174    	; 0x4516 <UseSomebody()+0x138>
    4468:	89 31       	cpi	r24, 0x19	; 25
    446a:	b9 f6       	brne	.-82     	; 0x441a <UseSomebody()+0x3c>
    446c:	49 ea       	ldi	r20, 0xA9	; 169
    446e:	51 e0       	ldi	r21, 0x01	; 1
    4470:	6e e1       	ldi	r22, 0x1E	; 30
    4472:	eb cf       	rjmp	.-42     	; 0x444a <UseSomebody()+0x6c>
    4474:	86 34       	cpi	r24, 0x46	; 70
    4476:	09 f4       	brne	.+2      	; 0x447a <UseSomebody()+0x9c>
    4478:	61 c0       	rjmp	.+194    	; 0x453c <UseSomebody()+0x15e>
    447a:	84 36       	cpi	r24, 0x64	; 100
    447c:	09 f4       	brne	.+2      	; 0x4480 <UseSomebody()+0xa2>
    447e:	64 c0       	rjmp	.+200    	; 0x4548 <UseSomebody()+0x16a>
    4480:	8d 32       	cpi	r24, 0x2D	; 45
    4482:	59 f6       	brne	.-106    	; 0x441a <UseSomebody()+0x3c>
    4484:	66 e4       	ldi	r22, 0x46	; 70
    4486:	89 e5       	ldi	r24, 0x59	; 89
    4488:	96 e3       	ldi	r25, 0x36	; 54
    448a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    448e:	c5 cf       	rjmp	.-118    	; 0x441a <UseSomebody()+0x3c>
    4490:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4494:	7c 01       	movw	r14, r24
    4496:	66 eb       	ldi	r22, 0xB6	; 182
    4498:	71 e0       	ldi	r23, 0x01	; 1
    449a:	ce 01       	movw	r24, r28
    449c:	01 96       	adiw	r24, 0x01	; 1
    449e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    44a2:	01 e0       	ldi	r16, 0x01	; 1
    44a4:	97 01       	movw	r18, r14
    44a6:	4b e4       	ldi	r20, 0x4B	; 75
    44a8:	50 e0       	ldi	r21, 0x00	; 0
    44aa:	63 ed       	ldi	r22, 0xD3	; 211
    44ac:	7f e4       	ldi	r23, 0x4F	; 79
    44ae:	ce 01       	movw	r24, r28
    44b0:	01 96       	adiw	r24, 0x01	; 1
    44b2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    44b6:	ce 01       	movw	r24, r28
    44b8:	01 96       	adiw	r24, 0x01	; 1
    44ba:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    44be:	ad cf       	rjmp	.-166    	; 0x441a <UseSomebody()+0x3c>
    44c0:	45 e0       	ldi	r20, 0x05	; 5
    44c2:	64 e0       	ldi	r22, 0x04	; 4
    44c4:	82 eb       	ldi	r24, 0xB2	; 178
    44c6:	9c e6       	ldi	r25, 0x6C	; 108
    44c8:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    44cc:	a6 cf       	rjmp	.-180    	; 0x441a <UseSomebody()+0x3c>
    44ce:	6f e0       	ldi	r22, 0x0F	; 15
    44d0:	82 eb       	ldi	r24, 0xB2	; 178
    44d2:	9c e6       	ldi	r25, 0x6C	; 108
    44d4:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    44d8:	a0 cf       	rjmp	.-192    	; 0x441a <UseSomebody()+0x3c>
    44da:	49 ea       	ldi	r20, 0xA9	; 169
    44dc:	51 e0       	ldi	r21, 0x01	; 1
    44de:	64 e1       	ldi	r22, 0x14	; 20
    44e0:	89 e5       	ldi	r24, 0x59	; 89
    44e2:	96 e3       	ldi	r25, 0x36	; 54
    44e4:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    44e8:	98 cf       	rjmp	.-208    	; 0x441a <UseSomebody()+0x3c>
    44ea:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    44ee:	7c 01       	movw	r14, r24
    44f0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    44f4:	8c 01       	movw	r16, r24
    44f6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    44fa:	9c 01       	movw	r18, r24
    44fc:	4b e4       	ldi	r20, 0x4B	; 75
    44fe:	50 e0       	ldi	r21, 0x00	; 0
    4500:	69 e1       	ldi	r22, 0x19	; 25
    4502:	89 e5       	ldi	r24, 0x59	; 89
    4504:	96 e3       	ldi	r25, 0x36	; 54
    4506:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    450a:	87 cf       	rjmp	.-242    	; 0x441a <UseSomebody()+0x3c>
    450c:	43 e2       	ldi	r20, 0x23	; 35
    450e:	64 e0       	ldi	r22, 0x04	; 4
    4510:	89 e5       	ldi	r24, 0x59	; 89
    4512:	96 e3       	ldi	r25, 0x36	; 54
    4514:	d9 cf       	rjmp	.-78     	; 0x44c8 <UseSomebody()+0xea>
    4516:	49 ea       	ldi	r20, 0xA9	; 169
    4518:	51 e0       	ldi	r21, 0x01	; 1
    451a:	68 e2       	ldi	r22, 0x28	; 40
    451c:	e1 cf       	rjmp	.-62     	; 0x44e0 <UseSomebody()+0x102>
    451e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4522:	7c 01       	movw	r14, r24
    4524:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4528:	8c 01       	movw	r16, r24
    452a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    452e:	9c 01       	movw	r18, r24
    4530:	4b e4       	ldi	r20, 0x4B	; 75
    4532:	50 e0       	ldi	r21, 0x00	; 0
    4534:	6d e2       	ldi	r22, 0x2D	; 45
    4536:	8f ee       	ldi	r24, 0xEF	; 239
    4538:	93 e4       	ldi	r25, 0x43	; 67
    453a:	e5 cf       	rjmp	.-54     	; 0x4506 <UseSomebody()+0x128>
    453c:	64 e6       	ldi	r22, 0x64	; 100
    453e:	80 e1       	ldi	r24, 0x10	; 16
    4540:	97 e2       	ldi	r25, 0x27	; 39
    4542:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4546:	69 cf       	rjmp	.-302    	; 0x441a <UseSomebody()+0x3c>
    4548:	60 e0       	ldi	r22, 0x00	; 0
    454a:	8c ec       	ldi	r24, 0xCC	; 204
    454c:	90 e1       	ldi	r25, 0x10	; 16
    454e:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    4552:	80 e0       	ldi	r24, 0x00	; 0
    4554:	d3 d9       	rcall	.-3162   	; 0x38fc <switchToSong(unsigned char)>
    4556:	61 cf       	rjmp	.-318    	; 0x441a <UseSomebody()+0x3c>

00004558 <NoRoots()>:
    4558:	ef 92       	push	r14
    455a:	ff 92       	push	r15
    455c:	0f 93       	push	r16
    455e:	1f 93       	push	r17
    4560:	cf 93       	push	r28
    4562:	df 93       	push	r29
    4564:	00 d0       	rcall	.+0      	; 0x4566 <NoRoots()+0xe>
    4566:	00 d0       	rcall	.+0      	; 0x4568 <NoRoots()+0x10>
    4568:	00 d0       	rcall	.+0      	; 0x456a <NoRoots()+0x12>
    456a:	1f 92       	push	r1
    456c:	cd b7       	in	r28, 0x3d	; 61
    456e:	de b7       	in	r29, 0x3e	; 62
    4570:	e0 91 b7 0a 	lds	r30, 0x0AB7	; 0x800ab7 <prog>
    4574:	e5 36       	cpi	r30, 0x65	; 101
    4576:	08 f0       	brcs	.+2      	; 0x457a <NoRoots()+0x22>
    4578:	81 c0       	rjmp	.+258    	; 0x467c <NoRoots()+0x124>
    457a:	f0 e0       	ldi	r31, 0x00	; 0
    457c:	ee 53       	subi	r30, 0x3E	; 62
    457e:	fd 4d       	sbci	r31, 0xDD	; 221
    4580:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    4584:	27 23       	and	r18, r23
    4586:	4b 23       	and	r20, r27
    4588:	52 23       	and	r21, r18
    458a:	3e 23       	and	r19, r30
    458c:	3e 23       	and	r19, r30
    458e:	57 23       	and	r21, r23
    4590:	5f 23       	and	r21, r31
    4592:	65 23       	and	r22, r21
    4594:	6b 23       	and	r22, r27
    4596:	71 23       	and	r23, r17
    4598:	73 23       	and	r23, r19
    459a:	7b 23       	and	r23, r27
    459c:	8c 23       	and	r24, r28
    459e:	8e 23       	and	r24, r30
    45a0:	92 23       	and	r25, r18
    45a2:	94 23       	and	r25, r20
    45a4:	3e 23       	and	r19, r30
    45a6:	3e 23       	and	r19, r30
    45a8:	98 23       	and	r25, r24
    45aa:	3e 23       	and	r19, r30
    45ac:	a7 23       	and	r26, r23
    45ae:	3e 23       	and	r19, r30
    45b0:	3e 23       	and	r19, r30
    45b2:	3e 23       	and	r19, r30
    45b4:	3e 23       	and	r19, r30
    45b6:	aa 23       	and	r26, r26
    45b8:	3e 23       	and	r19, r30
    45ba:	ae 23       	and	r26, r30
    45bc:	3e 23       	and	r19, r30
    45be:	b3 23       	and	r27, r19
    45c0:	3e 23       	and	r19, r30
    45c2:	b5 23       	and	r27, r21
    45c4:	3e 23       	and	r19, r30
    45c6:	b9 23       	and	r27, r25
    45c8:	3e 23       	and	r19, r30
    45ca:	bb 23       	and	r27, r27
    45cc:	3e 23       	and	r19, r30
    45ce:	bf 23       	and	r27, r31
    45d0:	3e 23       	and	r19, r30
    45d2:	cc 23       	and	r28, r28
    45d4:	3e 23       	and	r19, r30
    45d6:	ce 23       	and	r28, r30
    45d8:	3e 23       	and	r19, r30
    45da:	d2 23       	and	r29, r18
    45dc:	3e 23       	and	r19, r30
    45de:	d4 23       	and	r29, r20
    45e0:	3e 23       	and	r19, r30
    45e2:	d8 23       	and	r29, r24
    45e4:	3e 23       	and	r19, r30
    45e6:	e5 23       	and	r30, r21
    45e8:	3e 23       	and	r19, r30
    45ea:	eb 23       	and	r30, r27
    45ec:	3e 23       	and	r19, r30
    45ee:	f1 23       	and	r31, r17
    45f0:	3e 23       	and	r19, r30
    45f2:	f9 23       	and	r31, r25
    45f4:	3e 23       	and	r19, r30
    45f6:	00 24       	eor	r0, r0
    45f8:	3e 23       	and	r19, r30
    45fa:	04 24       	eor	r0, r4
    45fc:	3e 23       	and	r19, r30
    45fe:	09 24       	eor	r0, r9
    4600:	3e 23       	and	r19, r30
    4602:	3e 23       	and	r19, r30
    4604:	3e 23       	and	r19, r30
    4606:	3e 23       	and	r19, r30
    4608:	3e 23       	and	r19, r30
    460a:	3e 23       	and	r19, r30
    460c:	3e 23       	and	r19, r30
    460e:	3e 23       	and	r19, r30
    4610:	3e 23       	and	r19, r30
    4612:	3e 23       	and	r19, r30
    4614:	3e 23       	and	r19, r30
    4616:	3e 23       	and	r19, r30
    4618:	3e 23       	and	r19, r30
    461a:	3e 23       	and	r19, r30
    461c:	3e 23       	and	r19, r30
    461e:	3e 23       	and	r19, r30
    4620:	3e 23       	and	r19, r30
    4622:	3e 23       	and	r19, r30
    4624:	3e 23       	and	r19, r30
    4626:	3e 23       	and	r19, r30
    4628:	3e 23       	and	r19, r30
    462a:	3e 23       	and	r19, r30
    462c:	3e 23       	and	r19, r30
    462e:	3e 23       	and	r19, r30
    4630:	3e 23       	and	r19, r30
    4632:	3e 23       	and	r19, r30
    4634:	3e 23       	and	r19, r30
    4636:	3e 23       	and	r19, r30
    4638:	3e 23       	and	r19, r30
    463a:	3e 23       	and	r19, r30
    463c:	3e 23       	and	r19, r30
    463e:	3e 23       	and	r19, r30
    4640:	3e 23       	and	r19, r30
    4642:	3e 23       	and	r19, r30
    4644:	3e 23       	and	r19, r30
    4646:	3e 23       	and	r19, r30
    4648:	3e 23       	and	r19, r30
    464a:	3e 23       	and	r19, r30
    464c:	0d 24       	eor	r0, r13
    464e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4652:	7c 01       	movw	r14, r24
    4654:	64 ed       	ldi	r22, 0xD4	; 212
    4656:	71 e0       	ldi	r23, 0x01	; 1
    4658:	ce 01       	movw	r24, r28
    465a:	01 96       	adiw	r24, 0x01	; 1
    465c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    4660:	01 e0       	ldi	r16, 0x01	; 1
    4662:	97 01       	movw	r18, r14
    4664:	4b e4       	ldi	r20, 0x4B	; 75
    4666:	50 e0       	ldi	r21, 0x00	; 0
    4668:	69 e7       	ldi	r22, 0x79	; 121
    466a:	7e e2       	ldi	r23, 0x2E	; 46
    466c:	ce 01       	movw	r24, r28
    466e:	01 96       	adiw	r24, 0x01	; 1
    4670:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4674:	ce 01       	movw	r24, r28
    4676:	01 96       	adiw	r24, 0x01	; 1
    4678:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    467c:	27 96       	adiw	r28, 0x07	; 7
    467e:	0f b6       	in	r0, 0x3f	; 63
    4680:	f8 94       	cli
    4682:	de bf       	out	0x3e, r29	; 62
    4684:	0f be       	out	0x3f, r0	; 63
    4686:	cd bf       	out	0x3d, r28	; 61
    4688:	df 91       	pop	r29
    468a:	cf 91       	pop	r28
    468c:	1f 91       	pop	r17
    468e:	0f 91       	pop	r16
    4690:	ff 90       	pop	r15
    4692:	ef 90       	pop	r14
    4694:	08 95       	ret
    4696:	42 e0       	ldi	r20, 0x02	; 2
    4698:	67 e0       	ldi	r22, 0x07	; 7
    469a:	83 e5       	ldi	r24, 0x53	; 83
    469c:	90 e2       	ldi	r25, 0x20	; 32
    469e:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    46a2:	ec cf       	rjmp	.-40     	; 0x467c <NoRoots()+0x124>
    46a4:	45 e0       	ldi	r20, 0x05	; 5
    46a6:	66 e0       	ldi	r22, 0x06	; 6
    46a8:	86 ea       	ldi	r24, 0xA6	; 166
    46aa:	90 e4       	ldi	r25, 0x40	; 64
    46ac:	f8 cf       	rjmp	.-16     	; 0x469e <NoRoots()+0x146>
    46ae:	44 ef       	ldi	r20, 0xF4	; 244
    46b0:	51 e0       	ldi	r21, 0x01	; 1
    46b2:	66 e0       	ldi	r22, 0x06	; 6
    46b4:	86 ea       	ldi	r24, 0xA6	; 166
    46b6:	90 e4       	ldi	r25, 0x40	; 64
    46b8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    46bc:	df cf       	rjmp	.-66     	; 0x467c <NoRoots()+0x124>
    46be:	67 e0       	ldi	r22, 0x07	; 7
    46c0:	86 e4       	ldi	r24, 0x46	; 70
    46c2:	9e e1       	ldi	r25, 0x1E	; 30
    46c4:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    46c8:	d9 cf       	rjmp	.-78     	; 0x467c <NoRoots()+0x124>
    46ca:	68 e0       	ldi	r22, 0x08	; 8
    46cc:	8e e0       	ldi	r24, 0x0E	; 14
    46ce:	96 e0       	ldi	r25, 0x06	; 6
    46d0:	0e 94 16 10 	call	0x202c	; 0x202c <progShowROOTS(unsigned int, unsigned char)>
    46d4:	d3 cf       	rjmp	.-90     	; 0x467c <NoRoots()+0x124>
    46d6:	44 ef       	ldi	r20, 0xF4	; 244
    46d8:	51 e0       	ldi	r21, 0x01	; 1
    46da:	69 e0       	ldi	r22, 0x09	; 9
    46dc:	8f e0       	ldi	r24, 0x0F	; 15
    46de:	9a e0       	ldi	r25, 0x0A	; 10
    46e0:	07 c0       	rjmp	.+14     	; 0x46f0 <NoRoots()+0x198>
    46e2:	6a e0       	ldi	r22, 0x0A	; 10
    46e4:	f3 cf       	rjmp	.-26     	; 0x46cc <NoRoots()+0x174>
    46e6:	44 ef       	ldi	r20, 0xF4	; 244
    46e8:	51 e0       	ldi	r21, 0x01	; 1
    46ea:	6b e0       	ldi	r22, 0x0B	; 11
    46ec:	8c e1       	ldi	r24, 0x1C	; 28
    46ee:	9c e0       	ldi	r25, 0x0C	; 12
    46f0:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    46f4:	c3 cf       	rjmp	.-122    	; 0x467c <NoRoots()+0x124>
    46f6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    46fa:	7c 01       	movw	r14, r24
    46fc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4700:	8c 01       	movw	r16, r24
    4702:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4706:	9c 01       	movw	r18, r24
    4708:	4b e4       	ldi	r20, 0x4B	; 75
    470a:	50 e0       	ldi	r21, 0x00	; 0
    470c:	6c e0       	ldi	r22, 0x0C	; 12
    470e:	86 e4       	ldi	r24, 0x46	; 70
    4710:	9e e1       	ldi	r25, 0x1E	; 30
    4712:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4716:	b2 cf       	rjmp	.-156    	; 0x467c <NoRoots()+0x124>
    4718:	6d e0       	ldi	r22, 0x0D	; 13
    471a:	d8 cf       	rjmp	.-80     	; 0x46cc <NoRoots()+0x174>
    471c:	44 ef       	ldi	r20, 0xF4	; 244
    471e:	51 e0       	ldi	r21, 0x01	; 1
    4720:	6e e0       	ldi	r22, 0x0E	; 14
    4722:	dc cf       	rjmp	.-72     	; 0x46dc <NoRoots()+0x184>
    4724:	6f e0       	ldi	r22, 0x0F	; 15
    4726:	d2 cf       	rjmp	.-92     	; 0x46cc <NoRoots()+0x174>
    4728:	44 ef       	ldi	r20, 0xF4	; 244
    472a:	51 e0       	ldi	r21, 0x01	; 1
    472c:	62 e1       	ldi	r22, 0x12	; 18
    472e:	de cf       	rjmp	.-68     	; 0x46ec <NoRoots()+0x194>
    4730:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4734:	7c 01       	movw	r14, r24
    4736:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    473a:	8c 01       	movw	r16, r24
    473c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4740:	9c 01       	movw	r18, r24
    4742:	4b e4       	ldi	r20, 0x4B	; 75
    4744:	50 e0       	ldi	r21, 0x00	; 0
    4746:	64 e1       	ldi	r22, 0x14	; 20
    4748:	83 e5       	ldi	r24, 0x53	; 83
    474a:	90 e2       	ldi	r25, 0x20	; 32
    474c:	e2 cf       	rjmp	.-60     	; 0x4712 <NoRoots()+0x1ba>
    474e:	49 e1       	ldi	r20, 0x19	; 25
    4750:	68 e0       	ldi	r22, 0x08	; 8
    4752:	aa cf       	rjmp	.-172    	; 0x46a8 <NoRoots()+0x150>
    4754:	44 ef       	ldi	r20, 0xF4	; 244
    4756:	51 e0       	ldi	r21, 0x01	; 1
    4758:	6b e1       	ldi	r22, 0x1B	; 27
    475a:	ac cf       	rjmp	.-168    	; 0x46b4 <NoRoots()+0x15c>
    475c:	4d e1       	ldi	r20, 0x1D	; 29
    475e:	64 e0       	ldi	r22, 0x04	; 4
    4760:	86 e4       	ldi	r24, 0x46	; 70
    4762:	9e e1       	ldi	r25, 0x1E	; 30
    4764:	9c cf       	rjmp	.-200    	; 0x469e <NoRoots()+0x146>
    4766:	6f e1       	ldi	r22, 0x1F	; 31
    4768:	b1 cf       	rjmp	.-158    	; 0x46cc <NoRoots()+0x174>
    476a:	44 ef       	ldi	r20, 0xF4	; 244
    476c:	51 e0       	ldi	r21, 0x01	; 1
    476e:	61 e2       	ldi	r22, 0x21	; 33
    4770:	b5 cf       	rjmp	.-150    	; 0x46dc <NoRoots()+0x184>
    4772:	63 e2       	ldi	r22, 0x23	; 35
    4774:	ab cf       	rjmp	.-170    	; 0x46cc <NoRoots()+0x174>
    4776:	44 ef       	ldi	r20, 0xF4	; 244
    4778:	51 e0       	ldi	r21, 0x01	; 1
    477a:	65 e2       	ldi	r22, 0x25	; 37
    477c:	b7 cf       	rjmp	.-146    	; 0x46ec <NoRoots()+0x194>
    477e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4782:	7c 01       	movw	r14, r24
    4784:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4788:	8c 01       	movw	r16, r24
    478a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    478e:	9c 01       	movw	r18, r24
    4790:	4b e4       	ldi	r20, 0x4B	; 75
    4792:	50 e0       	ldi	r21, 0x00	; 0
    4794:	67 e2       	ldi	r22, 0x27	; 39
    4796:	bb cf       	rjmp	.-138    	; 0x470e <NoRoots()+0x1b6>
    4798:	69 e2       	ldi	r22, 0x29	; 41
    479a:	98 cf       	rjmp	.-208    	; 0x46cc <NoRoots()+0x174>
    479c:	44 ef       	ldi	r20, 0xF4	; 244
    479e:	51 e0       	ldi	r21, 0x01	; 1
    47a0:	6b e2       	ldi	r22, 0x2B	; 43
    47a2:	9c cf       	rjmp	.-200    	; 0x46dc <NoRoots()+0x184>
    47a4:	6d e2       	ldi	r22, 0x2D	; 45
    47a6:	92 cf       	rjmp	.-220    	; 0x46cc <NoRoots()+0x174>
    47a8:	44 ef       	ldi	r20, 0xF4	; 244
    47aa:	51 e0       	ldi	r21, 0x01	; 1
    47ac:	6f e2       	ldi	r22, 0x2F	; 47
    47ae:	9e cf       	rjmp	.-196    	; 0x46ec <NoRoots()+0x194>
    47b0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    47b4:	7c 01       	movw	r14, r24
    47b6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    47ba:	8c 01       	movw	r16, r24
    47bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    47c0:	9c 01       	movw	r18, r24
    47c2:	4b e4       	ldi	r20, 0x4B	; 75
    47c4:	50 e0       	ldi	r21, 0x00	; 0
    47c6:	61 e3       	ldi	r22, 0x31	; 49
    47c8:	bf cf       	rjmp	.-130    	; 0x4748 <NoRoots()+0x1f0>
    47ca:	63 e3       	ldi	r22, 0x33	; 51
    47cc:	88 ea       	ldi	r24, 0xA8	; 168
    47ce:	98 e4       	ldi	r25, 0x48	; 72
    47d0:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    47d4:	53 cf       	rjmp	.-346    	; 0x467c <NoRoots()+0x124>
    47d6:	65 e3       	ldi	r22, 0x35	; 53
    47d8:	86 ea       	ldi	r24, 0xA6	; 166
    47da:	90 e4       	ldi	r25, 0x40	; 64
    47dc:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    47e0:	4d cf       	rjmp	.-358    	; 0x467c <NoRoots()+0x124>
    47e2:	47 e3       	ldi	r20, 0x37	; 55
    47e4:	64 ef       	ldi	r22, 0xF4	; 244
    47e6:	71 e0       	ldi	r23, 0x01	; 1
    47e8:	83 e5       	ldi	r24, 0x53	; 83
    47ea:	90 e2       	ldi	r25, 0x20	; 32
    47ec:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    47f0:	45 cf       	rjmp	.-374    	; 0x467c <NoRoots()+0x124>
    47f2:	49 e3       	ldi	r20, 0x39	; 57
    47f4:	67 e0       	ldi	r22, 0x07	; 7
    47f6:	83 e5       	ldi	r24, 0x53	; 83
    47f8:	90 e2       	ldi	r25, 0x20	; 32
    47fa:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    47fe:	3e cf       	rjmp	.-388    	; 0x467c <NoRoots()+0x124>
    4800:	4b e3       	ldi	r20, 0x3B	; 59
    4802:	6a ef       	ldi	r22, 0xFA	; 250
    4804:	70 e0       	ldi	r23, 0x00	; 0
    4806:	f0 cf       	rjmp	.-32     	; 0x47e8 <NoRoots()+0x290>
    4808:	4d e3       	ldi	r20, 0x3D	; 61
    480a:	6c e0       	ldi	r22, 0x0C	; 12
    480c:	8f e4       	ldi	r24, 0x4F	; 79
    480e:	9e e1       	ldi	r25, 0x1E	; 30
    4810:	f4 cf       	rjmp	.-24     	; 0x47fa <NoRoots()+0x2a2>
    4812:	64 e6       	ldi	r22, 0x64	; 100
    4814:	80 e3       	ldi	r24, 0x30	; 48
    4816:	95 e7       	ldi	r25, 0x75	; 117
    4818:	5b cf       	rjmp	.-330    	; 0x46d0 <NoRoots()+0x178>
    481a:	60 e0       	ldi	r22, 0x00	; 0
    481c:	8c ec       	ldi	r24, 0xCC	; 204
    481e:	90 e1       	ldi	r25, 0x10	; 16
    4820:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    4824:	80 e0       	ldi	r24, 0x00	; 0
    4826:	6a d8       	rcall	.-3884   	; 0x38fc <switchToSong(unsigned char)>
    4828:	29 cf       	rjmp	.-430    	; 0x467c <NoRoots()+0x124>

0000482a <Firework()>:
    482a:	ef 92       	push	r14
    482c:	ff 92       	push	r15
    482e:	0f 93       	push	r16
    4830:	1f 93       	push	r17
    4832:	cf 93       	push	r28
    4834:	df 93       	push	r29
    4836:	00 d0       	rcall	.+0      	; 0x4838 <Firework()+0xe>
    4838:	00 d0       	rcall	.+0      	; 0x483a <Firework()+0x10>
    483a:	00 d0       	rcall	.+0      	; 0x483c <Firework()+0x12>
    483c:	1f 92       	push	r1
    483e:	cd b7       	in	r28, 0x3d	; 61
    4840:	de b7       	in	r29, 0x3e	; 62
    4842:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    4846:	83 32       	cpi	r24, 0x23	; 35
    4848:	09 f4       	brne	.+2      	; 0x484c <Firework()+0x22>
    484a:	f5 c0       	rjmp	.+490    	; 0x4a36 <Firework()+0x20c>
    484c:	08 f0       	brcs	.+2      	; 0x4850 <Firework()+0x26>
    484e:	4b c0       	rjmp	.+150    	; 0x48e6 <Firework()+0xbc>
    4850:	86 31       	cpi	r24, 0x16	; 22
    4852:	09 f4       	brne	.+2      	; 0x4856 <Firework()+0x2c>
    4854:	cc c0       	rjmp	.+408    	; 0x49ee <Firework()+0x1c4>
    4856:	18 f5       	brcc	.+70     	; 0x489e <Firework()+0x74>
    4858:	8a 30       	cpi	r24, 0x0A	; 10
    485a:	09 f4       	brne	.+2      	; 0x485e <Firework()+0x34>
    485c:	b8 c0       	rjmp	.+368    	; 0x49ce <Firework()+0x1a4>
    485e:	98 f4       	brcc	.+38     	; 0x4886 <Firework()+0x5c>
    4860:	88 23       	and	r24, r24
    4862:	09 f4       	brne	.+2      	; 0x4866 <Firework()+0x3c>
    4864:	94 c0       	rjmp	.+296    	; 0x498e <Firework()+0x164>
    4866:	85 30       	cpi	r24, 0x05	; 5
    4868:	09 f4       	brne	.+2      	; 0x486c <Firework()+0x42>
    486a:	a9 c0       	rjmp	.+338    	; 0x49be <Firework()+0x194>
    486c:	27 96       	adiw	r28, 0x07	; 7
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	df 91       	pop	r29
    487a:	cf 91       	pop	r28
    487c:	1f 91       	pop	r17
    487e:	0f 91       	pop	r16
    4880:	ff 90       	pop	r15
    4882:	ef 90       	pop	r14
    4884:	08 95       	ret
    4886:	8f 30       	cpi	r24, 0x0F	; 15
    4888:	09 f4       	brne	.+2      	; 0x488c <Firework()+0x62>
    488a:	a9 c0       	rjmp	.+338    	; 0x49de <Firework()+0x1b4>
    488c:	46 e1       	ldi	r20, 0x16	; 22
    488e:	64 e0       	ldi	r22, 0x04	; 4
    4890:	84 31       	cpi	r24, 0x14	; 20
    4892:	61 f7       	brne	.-40     	; 0x486c <Firework()+0x42>
    4894:	8e ee       	ldi	r24, 0xEE	; 238
    4896:	94 e3       	ldi	r25, 0x34	; 52
    4898:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    489c:	e7 cf       	rjmp	.-50     	; 0x486c <Firework()+0x42>
    489e:	8c 31       	cpi	r24, 0x1C	; 28
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <Firework()+0x7a>
    48a2:	bb c0       	rjmp	.+374    	; 0x4a1a <Firework()+0x1f0>
    48a4:	a0 f4       	brcc	.+40     	; 0x48ce <Firework()+0xa4>
    48a6:	88 31       	cpi	r24, 0x18	; 24
    48a8:	09 f4       	brne	.+2      	; 0x48ac <Firework()+0x82>
    48aa:	b2 c0       	rjmp	.+356    	; 0x4a10 <Firework()+0x1e6>
    48ac:	8a 31       	cpi	r24, 0x1A	; 26
    48ae:	f1 f6       	brne	.-68     	; 0x486c <Firework()+0x42>
    48b0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    48b4:	7c 01       	movw	r14, r24
    48b6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    48ba:	8c 01       	movw	r16, r24
    48bc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    48c0:	9c 01       	movw	r18, r24
    48c2:	42 e3       	ldi	r20, 0x32	; 50
    48c4:	50 e0       	ldi	r21, 0x00	; 0
    48c6:	6c e1       	ldi	r22, 0x1C	; 28
    48c8:	88 ee       	ldi	r24, 0xE8	; 232
    48ca:	93 e0       	ldi	r25, 0x03	; 3
    48cc:	9e c0       	rjmp	.+316    	; 0x4a0a <Firework()+0x1e0>
    48ce:	80 32       	cpi	r24, 0x20	; 32
    48d0:	09 f4       	brne	.+2      	; 0x48d4 <Firework()+0xaa>
    48d2:	aa c0       	rjmp	.+340    	; 0x4a28 <Firework()+0x1fe>
    48d4:	82 32       	cpi	r24, 0x22	; 34
    48d6:	09 f4       	brne	.+2      	; 0x48da <Firework()+0xb0>
    48d8:	ab c0       	rjmp	.+342    	; 0x4a30 <Firework()+0x206>
    48da:	8e 31       	cpi	r24, 0x1E	; 30
    48dc:	39 f6       	brne	.-114    	; 0x486c <Firework()+0x42>
    48de:	44 ef       	ldi	r20, 0xF4	; 244
    48e0:	51 e0       	ldi	r21, 0x01	; 1
    48e2:	60 e2       	ldi	r22, 0x20	; 32
    48e4:	7f c0       	rjmp	.+254    	; 0x49e4 <Firework()+0x1ba>
    48e6:	8c 32       	cpi	r24, 0x2C	; 44
    48e8:	09 f4       	brne	.+2      	; 0x48ec <Firework()+0xc2>
    48ea:	bb c0       	rjmp	.+374    	; 0x4a62 <Firework()+0x238>
    48ec:	18 f5       	brcc	.+70     	; 0x4934 <Firework()+0x10a>
    48ee:	86 32       	cpi	r24, 0x26	; 38
    48f0:	09 f4       	brne	.+2      	; 0x48f4 <Firework()+0xca>
    48f2:	b0 c0       	rjmp	.+352    	; 0x4a54 <Firework()+0x22a>
    48f4:	98 f4       	brcc	.+38     	; 0x491c <Firework()+0xf2>
    48f6:	84 32       	cpi	r24, 0x24	; 36
    48f8:	09 f4       	brne	.+2      	; 0x48fc <Firework()+0xd2>
    48fa:	aa c0       	rjmp	.+340    	; 0x4a50 <Firework()+0x226>
    48fc:	85 32       	cpi	r24, 0x25	; 37
    48fe:	09 f0       	breq	.+2      	; 0x4902 <Firework()+0xd8>
    4900:	b5 cf       	rjmp	.-150    	; 0x486c <Firework()+0x42>
    4902:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4906:	7c 01       	movw	r14, r24
    4908:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    490c:	8c 01       	movw	r16, r24
    490e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4912:	9c 01       	movw	r18, r24
    4914:	42 e3       	ldi	r20, 0x32	; 50
    4916:	50 e0       	ldi	r21, 0x00	; 0
    4918:	66 e2       	ldi	r22, 0x26	; 38
    491a:	d6 cf       	rjmp	.-84     	; 0x48c8 <Firework()+0x9e>
    491c:	88 32       	cpi	r24, 0x28	; 40
    491e:	09 f4       	brne	.+2      	; 0x4922 <Firework()+0xf8>
    4920:	9b c0       	rjmp	.+310    	; 0x4a58 <Firework()+0x22e>
    4922:	8a 32       	cpi	r24, 0x2A	; 42
    4924:	09 f0       	breq	.+2      	; 0x4928 <Firework()+0xfe>
    4926:	a2 cf       	rjmp	.-188    	; 0x486c <Firework()+0x42>
    4928:	6c e2       	ldi	r22, 0x2C	; 44
    492a:	84 ea       	ldi	r24, 0xA4	; 164
    492c:	98 e3       	ldi	r25, 0x38	; 56
    492e:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    4932:	9c cf       	rjmp	.-200    	; 0x486c <Firework()+0x42>
    4934:	82 33       	cpi	r24, 0x32	; 50
    4936:	09 f4       	brne	.+2      	; 0x493a <Firework()+0x110>
    4938:	a4 c0       	rjmp	.+328    	; 0x4a82 <Firework()+0x258>
    493a:	98 f4       	brcc	.+38     	; 0x4962 <Firework()+0x138>
    493c:	8e 32       	cpi	r24, 0x2E	; 46
    493e:	09 f4       	brne	.+2      	; 0x4942 <Firework()+0x118>
    4940:	9d c0       	rjmp	.+314    	; 0x4a7c <Firework()+0x252>
    4942:	80 33       	cpi	r24, 0x30	; 48
    4944:	09 f0       	breq	.+2      	; 0x4948 <Firework()+0x11e>
    4946:	92 cf       	rjmp	.-220    	; 0x486c <Firework()+0x42>
    4948:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    494c:	7c 01       	movw	r14, r24
    494e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4952:	8c 01       	movw	r16, r24
    4954:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4958:	9c 01       	movw	r18, r24
    495a:	42 e3       	ldi	r20, 0x32	; 50
    495c:	50 e0       	ldi	r21, 0x00	; 0
    495e:	62 e3       	ldi	r22, 0x32	; 50
    4960:	b3 cf       	rjmp	.-154    	; 0x48c8 <Firework()+0x9e>
    4962:	8c 33       	cpi	r24, 0x3C	; 60
    4964:	09 f4       	brne	.+2      	; 0x4968 <Firework()+0x13e>
    4966:	90 c0       	rjmp	.+288    	; 0x4a88 <Firework()+0x25e>
    4968:	84 36       	cpi	r24, 0x64	; 100
    496a:	09 f4       	brne	.+2      	; 0x496e <Firework()+0x144>
    496c:	93 c0       	rjmp	.+294    	; 0x4a94 <Firework()+0x26a>
    496e:	87 33       	cpi	r24, 0x37	; 55
    4970:	09 f0       	breq	.+2      	; 0x4974 <Firework()+0x14a>
    4972:	7c cf       	rjmp	.-264    	; 0x486c <Firework()+0x42>
    4974:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4978:	7c 01       	movw	r14, r24
    497a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    497e:	8c 01       	movw	r16, r24
    4980:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4984:	9c 01       	movw	r18, r24
    4986:	42 e3       	ldi	r20, 0x32	; 50
    4988:	50 e0       	ldi	r21, 0x00	; 0
    498a:	6c e3       	ldi	r22, 0x3C	; 60
    498c:	9d cf       	rjmp	.-198    	; 0x48c8 <Firework()+0x9e>
    498e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4992:	7c 01       	movw	r14, r24
    4994:	6d ee       	ldi	r22, 0xED	; 237
    4996:	71 e0       	ldi	r23, 0x01	; 1
    4998:	ce 01       	movw	r24, r28
    499a:	01 96       	adiw	r24, 0x01	; 1
    499c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    49a0:	05 e0       	ldi	r16, 0x05	; 5
    49a2:	97 01       	movw	r18, r14
    49a4:	42 e3       	ldi	r20, 0x32	; 50
    49a6:	50 e0       	ldi	r21, 0x00	; 0
    49a8:	6c e4       	ldi	r22, 0x4C	; 76
    49aa:	7d e1       	ldi	r23, 0x1D	; 29
    49ac:	ce 01       	movw	r24, r28
    49ae:	01 96       	adiw	r24, 0x01	; 1
    49b0:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    49b4:	ce 01       	movw	r24, r28
    49b6:	01 96       	adiw	r24, 0x01	; 1
    49b8:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    49bc:	57 cf       	rjmp	.-338    	; 0x486c <Firework()+0x42>
    49be:	4a e0       	ldi	r20, 0x0A	; 10
    49c0:	66 eb       	ldi	r22, 0xB6	; 182
    49c2:	73 e0       	ldi	r23, 0x03	; 3
    49c4:	83 e7       	ldi	r24, 0x73	; 115
    49c6:	9c e3       	ldi	r25, 0x3C	; 60
    49c8:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    49cc:	4f cf       	rjmp	.-354    	; 0x486c <Firework()+0x42>
    49ce:	44 ef       	ldi	r20, 0xF4	; 244
    49d0:	51 e0       	ldi	r21, 0x01	; 1
    49d2:	6f e0       	ldi	r22, 0x0F	; 15
    49d4:	83 e7       	ldi	r24, 0x73	; 115
    49d6:	9c e3       	ldi	r25, 0x3C	; 60
    49d8:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    49dc:	47 cf       	rjmp	.-370    	; 0x486c <Firework()+0x42>
    49de:	44 ef       	ldi	r20, 0xF4	; 244
    49e0:	51 e0       	ldi	r21, 0x01	; 1
    49e2:	64 e1       	ldi	r22, 0x14	; 20
    49e4:	83 e7       	ldi	r24, 0x73	; 115
    49e6:	9c e3       	ldi	r25, 0x3C	; 60
    49e8:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    49ec:	3f cf       	rjmp	.-386    	; 0x486c <Firework()+0x42>
    49ee:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    49f2:	7c 01       	movw	r14, r24
    49f4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    49f8:	8c 01       	movw	r16, r24
    49fa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    49fe:	9c 01       	movw	r18, r24
    4a00:	42 e3       	ldi	r20, 0x32	; 50
    4a02:	50 e0       	ldi	r21, 0x00	; 0
    4a04:	68 e1       	ldi	r22, 0x18	; 24
    4a06:	85 e8       	ldi	r24, 0x85	; 133
    4a08:	97 e0       	ldi	r25, 0x07	; 7
    4a0a:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4a0e:	2e cf       	rjmp	.-420    	; 0x486c <Firework()+0x42>
    4a10:	4a e1       	ldi	r20, 0x1A	; 26
    4a12:	63 e0       	ldi	r22, 0x03	; 3
    4a14:	84 ea       	ldi	r24, 0xA4	; 164
    4a16:	98 e3       	ldi	r25, 0x38	; 56
    4a18:	04 c0       	rjmp	.+8      	; 0x4a22 <Firework()+0x1f8>
    4a1a:	4e e1       	ldi	r20, 0x1E	; 30
    4a1c:	67 e0       	ldi	r22, 0x07	; 7
    4a1e:	8a e5       	ldi	r24, 0x5A	; 90
    4a20:	9c e3       	ldi	r25, 0x3C	; 60
    4a22:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4a26:	22 cf       	rjmp	.-444    	; 0x486c <Firework()+0x42>
    4a28:	44 ef       	ldi	r20, 0xF4	; 244
    4a2a:	51 e0       	ldi	r21, 0x01	; 1
    4a2c:	62 e2       	ldi	r22, 0x22	; 34
    4a2e:	d2 cf       	rjmp	.-92     	; 0x49d4 <Firework()+0x1aa>
    4a30:	43 e2       	ldi	r20, 0x23	; 35
    4a32:	65 e0       	ldi	r22, 0x05	; 5
    4a34:	2f cf       	rjmp	.-418    	; 0x4894 <Firework()+0x6a>
    4a36:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a3a:	7c 01       	movw	r14, r24
    4a3c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a40:	8c 01       	movw	r16, r24
    4a42:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a46:	9c 01       	movw	r18, r24
    4a48:	42 e3       	ldi	r20, 0x32	; 50
    4a4a:	50 e0       	ldi	r21, 0x00	; 0
    4a4c:	64 e2       	ldi	r22, 0x24	; 36
    4a4e:	db cf       	rjmp	.-74     	; 0x4a06 <Firework()+0x1dc>
    4a50:	45 e2       	ldi	r20, 0x25	; 37
    4a52:	df cf       	rjmp	.-66     	; 0x4a12 <Firework()+0x1e8>
    4a54:	48 e2       	ldi	r20, 0x28	; 40
    4a56:	e2 cf       	rjmp	.-60     	; 0x4a1c <Firework()+0x1f2>
    4a58:	4a e2       	ldi	r20, 0x2A	; 42
    4a5a:	62 e0       	ldi	r22, 0x02	; 2
    4a5c:	83 e7       	ldi	r24, 0x73	; 115
    4a5e:	9c e3       	ldi	r25, 0x3C	; 60
    4a60:	1b cf       	rjmp	.-458    	; 0x4898 <Firework()+0x6e>
    4a62:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a66:	7c 01       	movw	r14, r24
    4a68:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a6c:	8c 01       	movw	r16, r24
    4a6e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4a72:	9c 01       	movw	r18, r24
    4a74:	42 e3       	ldi	r20, 0x32	; 50
    4a76:	50 e0       	ldi	r21, 0x00	; 0
    4a78:	6e e2       	ldi	r22, 0x2E	; 46
    4a7a:	26 cf       	rjmp	.-436    	; 0x48c8 <Firework()+0x9e>
    4a7c:	40 e3       	ldi	r20, 0x30	; 48
    4a7e:	65 e0       	ldi	r22, 0x05	; 5
    4a80:	c9 cf       	rjmp	.-110    	; 0x4a14 <Firework()+0x1ea>
    4a82:	47 e3       	ldi	r20, 0x37	; 55
    4a84:	6a e0       	ldi	r22, 0x0A	; 10
    4a86:	c6 cf       	rjmp	.-116    	; 0x4a14 <Firework()+0x1ea>
    4a88:	64 e6       	ldi	r22, 0x64	; 100
    4a8a:	80 e1       	ldi	r24, 0x10	; 16
    4a8c:	97 e2       	ldi	r25, 0x27	; 39
    4a8e:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4a92:	ec ce       	rjmp	.-552    	; 0x486c <Firework()+0x42>
    4a94:	60 e0       	ldi	r22, 0x00	; 0
    4a96:	8c ec       	ldi	r24, 0xCC	; 204
    4a98:	90 e1       	ldi	r25, 0x10	; 16
    4a9a:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    4a9e:	80 e0       	ldi	r24, 0x00	; 0
    4aa0:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    4aa4:	e3 ce       	rjmp	.-570    	; 0x486c <Firework()+0x42>

00004aa6 <Diamonds()>:
    4aa6:	ef 92       	push	r14
    4aa8:	ff 92       	push	r15
    4aaa:	0f 93       	push	r16
    4aac:	1f 93       	push	r17
    4aae:	cf 93       	push	r28
    4ab0:	df 93       	push	r29
    4ab2:	00 d0       	rcall	.+0      	; 0x4ab4 <Diamonds()+0xe>
    4ab4:	00 d0       	rcall	.+0      	; 0x4ab6 <Diamonds()+0x10>
    4ab6:	00 d0       	rcall	.+0      	; 0x4ab8 <Diamonds()+0x12>
    4ab8:	1f 92       	push	r1
    4aba:	cd b7       	in	r28, 0x3d	; 61
    4abc:	de b7       	in	r29, 0x3e	; 62
    4abe:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    4ac2:	89 31       	cpi	r24, 0x19	; 25
    4ac4:	09 f4       	brne	.+2      	; 0x4ac8 <Diamonds()+0x22>
    4ac6:	86 c0       	rjmp	.+268    	; 0x4bd4 <Diamonds()+0x12e>
    4ac8:	58 f5       	brcc	.+86     	; 0x4b20 <Diamonds()+0x7a>
    4aca:	85 30       	cpi	r24, 0x05	; 5
    4acc:	09 f4       	brne	.+2      	; 0x4ad0 <Diamonds()+0x2a>
    4ace:	74 c0       	rjmp	.+232    	; 0x4bb8 <Diamonds()+0x112>
    4ad0:	b8 f4       	brcc	.+46     	; 0x4b00 <Diamonds()+0x5a>
    4ad2:	81 30       	cpi	r24, 0x01	; 1
    4ad4:	09 f4       	brne	.+2      	; 0x4ad8 <Diamonds()+0x32>
    4ad6:	69 c0       	rjmp	.+210    	; 0x4baa <Diamonds()+0x104>
    4ad8:	08 f4       	brcc	.+2      	; 0x4adc <Diamonds()+0x36>
    4ada:	4f c0       	rjmp	.+158    	; 0x4b7a <Diamonds()+0xd4>
    4adc:	45 e0       	ldi	r20, 0x05	; 5
    4ade:	64 e0       	ldi	r22, 0x04	; 4
    4ae0:	82 30       	cpi	r24, 0x02	; 2
    4ae2:	09 f4       	brne	.+2      	; 0x4ae6 <Diamonds()+0x40>
    4ae4:	64 c0       	rjmp	.+200    	; 0x4bae <Diamonds()+0x108>
    4ae6:	27 96       	adiw	r28, 0x07	; 7
    4ae8:	0f b6       	in	r0, 0x3f	; 63
    4aea:	f8 94       	cli
    4aec:	de bf       	out	0x3e, r29	; 62
    4aee:	0f be       	out	0x3f, r0	; 63
    4af0:	cd bf       	out	0x3d, r28	; 61
    4af2:	df 91       	pop	r29
    4af4:	cf 91       	pop	r28
    4af6:	1f 91       	pop	r17
    4af8:	0f 91       	pop	r16
    4afa:	ff 90       	pop	r15
    4afc:	ef 90       	pop	r14
    4afe:	08 95       	ret
    4b00:	8f 30       	cpi	r24, 0x0F	; 15
    4b02:	09 f4       	brne	.+2      	; 0x4b06 <Diamonds()+0x60>
    4b04:	5c c0       	rjmp	.+184    	; 0x4bbe <Diamonds()+0x118>
    4b06:	84 31       	cpi	r24, 0x14	; 20
    4b08:	09 f4       	brne	.+2      	; 0x4b0c <Diamonds()+0x66>
    4b0a:	61 c0       	rjmp	.+194    	; 0x4bce <Diamonds()+0x128>
    4b0c:	8a 30       	cpi	r24, 0x0A	; 10
    4b0e:	59 f7       	brne	.-42     	; 0x4ae6 <Diamonds()+0x40>
    4b10:	46 e9       	ldi	r20, 0x96	; 150
    4b12:	50 e0       	ldi	r21, 0x00	; 0
    4b14:	6f e0       	ldi	r22, 0x0F	; 15
    4b16:	80 e0       	ldi	r24, 0x00	; 0
    4b18:	9b e4       	ldi	r25, 0x4B	; 75
    4b1a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4b1e:	e3 cf       	rjmp	.-58     	; 0x4ae6 <Diamonds()+0x40>
    4b20:	8d 32       	cpi	r24, 0x2D	; 45
    4b22:	09 f4       	brne	.+2      	; 0x4b26 <Diamonds()+0x80>
    4b24:	76 c0       	rjmp	.+236    	; 0x4c12 <Diamonds()+0x16c>
    4b26:	68 f4       	brcc	.+26     	; 0x4b42 <Diamonds()+0x9c>
    4b28:	83 32       	cpi	r24, 0x23	; 35
    4b2a:	09 f4       	brne	.+2      	; 0x4b2e <Diamonds()+0x88>
    4b2c:	5b c0       	rjmp	.+182    	; 0x4be4 <Diamonds()+0x13e>
    4b2e:	88 32       	cpi	r24, 0x28	; 40
    4b30:	09 f4       	brne	.+2      	; 0x4b34 <Diamonds()+0x8e>
    4b32:	5e c0       	rjmp	.+188    	; 0x4bf0 <Diamonds()+0x14a>
    4b34:	8e 31       	cpi	r24, 0x1E	; 30
    4b36:	b9 f6       	brne	.-82     	; 0x4ae6 <Diamonds()+0x40>
    4b38:	43 e2       	ldi	r20, 0x23	; 35
    4b3a:	64 e0       	ldi	r22, 0x04	; 4
    4b3c:	80 e2       	ldi	r24, 0x20	; 32
    4b3e:	97 e6       	ldi	r25, 0x67	; 103
    4b40:	38 c0       	rjmp	.+112    	; 0x4bb2 <Diamonds()+0x10c>
    4b42:	87 33       	cpi	r24, 0x37	; 55
    4b44:	09 f4       	brne	.+2      	; 0x4b48 <Diamonds()+0xa2>
    4b46:	6b c0       	rjmp	.+214    	; 0x4c1e <Diamonds()+0x178>
    4b48:	48 f4       	brcc	.+18     	; 0x4b5c <Diamonds()+0xb6>
    4b4a:	82 33       	cpi	r24, 0x32	; 50
    4b4c:	61 f6       	brne	.-104    	; 0x4ae6 <Diamonds()+0x40>
    4b4e:	47 e3       	ldi	r20, 0x37	; 55
    4b50:	67 e0       	ldi	r22, 0x07	; 7
    4b52:	80 e0       	ldi	r24, 0x00	; 0
    4b54:	9b e4       	ldi	r25, 0x4B	; 75
    4b56:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4b5a:	c5 cf       	rjmp	.-118    	; 0x4ae6 <Diamonds()+0x40>
    4b5c:	8c 33       	cpi	r24, 0x3C	; 60
    4b5e:	09 f4       	brne	.+2      	; 0x4b62 <Diamonds()+0xbc>
    4b60:	63 c0       	rjmp	.+198    	; 0x4c28 <Diamonds()+0x182>
    4b62:	84 36       	cpi	r24, 0x64	; 100
    4b64:	09 f0       	breq	.+2      	; 0x4b68 <Diamonds()+0xc2>
    4b66:	bf cf       	rjmp	.-130    	; 0x4ae6 <Diamonds()+0x40>
    4b68:	60 e0       	ldi	r22, 0x00	; 0
    4b6a:	8c ec       	ldi	r24, 0xCC	; 204
    4b6c:	90 e1       	ldi	r25, 0x10	; 16
    4b6e:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    4b72:	80 e0       	ldi	r24, 0x00	; 0
    4b74:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    4b78:	b6 cf       	rjmp	.-148    	; 0x4ae6 <Diamonds()+0x40>
    4b7a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4b7e:	7c 01       	movw	r14, r24
    4b80:	65 e0       	ldi	r22, 0x05	; 5
    4b82:	72 e0       	ldi	r23, 0x02	; 2
    4b84:	ce 01       	movw	r24, r28
    4b86:	01 96       	adiw	r24, 0x01	; 1
    4b88:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    4b8c:	01 e0       	ldi	r16, 0x01	; 1
    4b8e:	97 01       	movw	r18, r14
    4b90:	4b e4       	ldi	r20, 0x4B	; 75
    4b92:	50 e0       	ldi	r21, 0x00	; 0
    4b94:	60 e8       	ldi	r22, 0x80	; 128
    4b96:	75 e2       	ldi	r23, 0x25	; 37
    4b98:	ce 01       	movw	r24, r28
    4b9a:	01 96       	adiw	r24, 0x01	; 1
    4b9c:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4ba0:	ce 01       	movw	r24, r28
    4ba2:	01 96       	adiw	r24, 0x01	; 1
    4ba4:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    4ba8:	9e cf       	rjmp	.-196    	; 0x4ae6 <Diamonds()+0x40>
    4baa:	42 e0       	ldi	r20, 0x02	; 2
    4bac:	63 e0       	ldi	r22, 0x03	; 3
    4bae:	80 e0       	ldi	r24, 0x00	; 0
    4bb0:	9b e4       	ldi	r25, 0x4B	; 75
    4bb2:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    4bb6:	97 cf       	rjmp	.-210    	; 0x4ae6 <Diamonds()+0x40>
    4bb8:	4a e0       	ldi	r20, 0x0A	; 10
    4bba:	67 e0       	ldi	r22, 0x07	; 7
    4bbc:	f8 cf       	rjmp	.-16     	; 0x4bae <Diamonds()+0x108>
    4bbe:	48 e5       	ldi	r20, 0x58	; 88
    4bc0:	52 e0       	ldi	r21, 0x02	; 2
    4bc2:	64 e1       	ldi	r22, 0x14	; 20
    4bc4:	80 e8       	ldi	r24, 0x80	; 128
    4bc6:	90 e7       	ldi	r25, 0x70	; 112
    4bc8:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4bcc:	8c cf       	rjmp	.-232    	; 0x4ae6 <Diamonds()+0x40>
    4bce:	49 e1       	ldi	r20, 0x19	; 25
    4bd0:	68 e0       	ldi	r22, 0x08	; 8
    4bd2:	ed cf       	rjmp	.-38     	; 0x4bae <Diamonds()+0x108>
    4bd4:	46 e9       	ldi	r20, 0x96	; 150
    4bd6:	50 e0       	ldi	r21, 0x00	; 0
    4bd8:	6e e1       	ldi	r22, 0x1E	; 30
    4bda:	80 e0       	ldi	r24, 0x00	; 0
    4bdc:	9b e4       	ldi	r25, 0x4B	; 75
    4bde:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    4be2:	81 cf       	rjmp	.-254    	; 0x4ae6 <Diamonds()+0x40>
    4be4:	68 e2       	ldi	r22, 0x28	; 40
    4be6:	80 eb       	ldi	r24, 0xB0	; 176
    4be8:	94 e0       	ldi	r25, 0x04	; 4
    4bea:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4bee:	7b cf       	rjmp	.-266    	; 0x4ae6 <Diamonds()+0x40>
    4bf0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4bf4:	7c 01       	movw	r14, r24
    4bf6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4bfa:	8c 01       	movw	r16, r24
    4bfc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4c00:	9c 01       	movw	r18, r24
    4c02:	42 e3       	ldi	r20, 0x32	; 50
    4c04:	50 e0       	ldi	r21, 0x00	; 0
    4c06:	6d e2       	ldi	r22, 0x2D	; 45
    4c08:	80 eb       	ldi	r24, 0xB0	; 176
    4c0a:	94 e0       	ldi	r25, 0x04	; 4
    4c0c:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4c10:	6a cf       	rjmp	.-300    	; 0x4ae6 <Diamonds()+0x40>
    4c12:	46 e9       	ldi	r20, 0x96	; 150
    4c14:	50 e0       	ldi	r21, 0x00	; 0
    4c16:	62 e3       	ldi	r22, 0x32	; 50
    4c18:	80 e0       	ldi	r24, 0x00	; 0
    4c1a:	9b e4       	ldi	r25, 0x4B	; 75
    4c1c:	d5 cf       	rjmp	.-86     	; 0x4bc8 <Diamonds()+0x122>
    4c1e:	4c e3       	ldi	r20, 0x3C	; 60
    4c20:	65 e0       	ldi	r22, 0x05	; 5
    4c22:	80 ee       	ldi	r24, 0xE0	; 224
    4c24:	9e e2       	ldi	r25, 0x2E	; 46
    4c26:	c5 cf       	rjmp	.-118    	; 0x4bb2 <Diamonds()+0x10c>
    4c28:	42 e3       	ldi	r20, 0x32	; 50
    4c2a:	50 e0       	ldi	r21, 0x00	; 0
    4c2c:	64 e6       	ldi	r22, 0x64	; 100
    4c2e:	80 e0       	ldi	r24, 0x00	; 0
    4c30:	96 e9       	ldi	r25, 0x96	; 150
    4c32:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    4c36:	57 cf       	rjmp	.-338    	; 0x4ae6 <Diamonds()+0x40>

00004c38 <SetFire()>:
    4c38:	ef 92       	push	r14
    4c3a:	ff 92       	push	r15
    4c3c:	0f 93       	push	r16
    4c3e:	cf 93       	push	r28
    4c40:	df 93       	push	r29
    4c42:	00 d0       	rcall	.+0      	; 0x4c44 <SetFire()+0xc>
    4c44:	00 d0       	rcall	.+0      	; 0x4c46 <SetFire()+0xe>
    4c46:	00 d0       	rcall	.+0      	; 0x4c48 <SetFire()+0x10>
    4c48:	1f 92       	push	r1
    4c4a:	cd b7       	in	r28, 0x3d	; 61
    4c4c:	de b7       	in	r29, 0x3e	; 62
    4c4e:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    4c52:	83 32       	cpi	r24, 0x23	; 35
    4c54:	09 f4       	brne	.+2      	; 0x4c58 <SetFire()+0x20>
    4c56:	a5 c0       	rjmp	.+330    	; 0x4da2 <SetFire()+0x16a>
    4c58:	a0 f5       	brcc	.+104    	; 0x4cc2 <SetFire()+0x8a>
    4c5a:	8a 30       	cpi	r24, 0x0A	; 10
    4c5c:	09 f4       	brne	.+2      	; 0x4c60 <SetFire()+0x28>
    4c5e:	92 c0       	rjmp	.+292    	; 0x4d84 <SetFire()+0x14c>
    4c60:	c0 f4       	brcc	.+48     	; 0x4c92 <SetFire()+0x5a>
    4c62:	81 30       	cpi	r24, 0x01	; 1
    4c64:	09 f4       	brne	.+2      	; 0x4c68 <SetFire()+0x30>
    4c66:	84 c0       	rjmp	.+264    	; 0x4d70 <SetFire()+0x138>
    4c68:	08 f4       	brcc	.+2      	; 0x4c6c <SetFire()+0x34>
    4c6a:	6a c0       	rjmp	.+212    	; 0x4d40 <SetFire()+0x108>
    4c6c:	82 30       	cpi	r24, 0x02	; 2
    4c6e:	09 f4       	brne	.+2      	; 0x4c72 <SetFire()+0x3a>
    4c70:	86 c0       	rjmp	.+268    	; 0x4d7e <SetFire()+0x146>
    4c72:	4a e0       	ldi	r20, 0x0A	; 10
    4c74:	85 30       	cpi	r24, 0x05	; 5
    4c76:	09 f4       	brne	.+2      	; 0x4c7a <SetFire()+0x42>
    4c78:	88 c0       	rjmp	.+272    	; 0x4d8a <SetFire()+0x152>
    4c7a:	27 96       	adiw	r28, 0x07	; 7
    4c7c:	0f b6       	in	r0, 0x3f	; 63
    4c7e:	f8 94       	cli
    4c80:	de bf       	out	0x3e, r29	; 62
    4c82:	0f be       	out	0x3f, r0	; 63
    4c84:	cd bf       	out	0x3d, r28	; 61
    4c86:	df 91       	pop	r29
    4c88:	cf 91       	pop	r28
    4c8a:	0f 91       	pop	r16
    4c8c:	ff 90       	pop	r15
    4c8e:	ef 90       	pop	r14
    4c90:	08 95       	ret
    4c92:	84 31       	cpi	r24, 0x14	; 20
    4c94:	09 f4       	brne	.+2      	; 0x4c98 <SetFire()+0x60>
    4c96:	78 c0       	rjmp	.+240    	; 0x4d88 <SetFire()+0x150>
    4c98:	38 f4       	brcc	.+14     	; 0x4ca8 <SetFire()+0x70>
    4c9a:	44 e1       	ldi	r20, 0x14	; 20
    4c9c:	6b e0       	ldi	r22, 0x0B	; 11
    4c9e:	8f 30       	cpi	r24, 0x0F	; 15
    4ca0:	61 f7       	brne	.-40     	; 0x4c7a <SetFire()+0x42>
    4ca2:	88 e3       	ldi	r24, 0x38	; 56
    4ca4:	91 e4       	ldi	r25, 0x41	; 65
    4ca6:	68 c0       	rjmp	.+208    	; 0x4d78 <SetFire()+0x140>
    4ca8:	89 31       	cpi	r24, 0x19	; 25
    4caa:	09 f4       	brne	.+2      	; 0x4cae <SetFire()+0x76>
    4cac:	72 c0       	rjmp	.+228    	; 0x4d92 <SetFire()+0x15a>
    4cae:	43 e2       	ldi	r20, 0x23	; 35
    4cb0:	8e 31       	cpi	r24, 0x1E	; 30
    4cb2:	19 f7       	brne	.-58     	; 0x4c7a <SetFire()+0x42>
    4cb4:	6d e0       	ldi	r22, 0x0D	; 13
    4cb6:	72 e0       	ldi	r23, 0x02	; 2
    4cb8:	88 e3       	ldi	r24, 0x38	; 56
    4cba:	91 e4       	ldi	r25, 0x41	; 65
    4cbc:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    4cc0:	dc cf       	rjmp	.-72     	; 0x4c7a <SetFire()+0x42>
    4cc2:	8c 33       	cpi	r24, 0x3C	; 60
    4cc4:	09 f4       	brne	.+2      	; 0x4cc8 <SetFire()+0x90>
    4cc6:	7e c0       	rjmp	.+252    	; 0x4dc4 <SetFire()+0x18c>
    4cc8:	c8 f4       	brcc	.+50     	; 0x4cfc <SetFire()+0xc4>
    4cca:	8d 32       	cpi	r24, 0x2D	; 45
    4ccc:	09 f4       	brne	.+2      	; 0x4cd0 <SetFire()+0x98>
    4cce:	6d c0       	rjmp	.+218    	; 0x4daa <SetFire()+0x172>
    4cd0:	40 f4       	brcc	.+16     	; 0x4ce2 <SetFire()+0xaa>
    4cd2:	88 32       	cpi	r24, 0x28	; 40
    4cd4:	91 f6       	brne	.-92     	; 0x4c7a <SetFire()+0x42>
    4cd6:	6d e2       	ldi	r22, 0x2D	; 45
    4cd8:	87 e2       	ldi	r24, 0x27	; 39
    4cda:	98 e0       	ldi	r25, 0x08	; 8
    4cdc:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    4ce0:	cc cf       	rjmp	.-104    	; 0x4c7a <SetFire()+0x42>
    4ce2:	82 33       	cpi	r24, 0x32	; 50
    4ce4:	09 f4       	brne	.+2      	; 0x4ce8 <SetFire()+0xb0>
    4ce6:	65 c0       	rjmp	.+202    	; 0x4db2 <SetFire()+0x17a>
    4ce8:	4d e0       	ldi	r20, 0x0D	; 13
    4cea:	52 e0       	ldi	r21, 0x02	; 2
    4cec:	6c e3       	ldi	r22, 0x3C	; 60
    4cee:	87 33       	cpi	r24, 0x37	; 55
    4cf0:	21 f6       	brne	.-120    	; 0x4c7a <SetFire()+0x42>
    4cf2:	88 e3       	ldi	r24, 0x38	; 56
    4cf4:	91 e4       	ldi	r25, 0x41	; 65
    4cf6:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4cfa:	bf cf       	rjmp	.-130    	; 0x4c7a <SetFire()+0x42>
    4cfc:	8b 34       	cpi	r24, 0x4B	; 75
    4cfe:	09 f4       	brne	.+2      	; 0x4d02 <SetFire()+0xca>
    4d00:	6d c0       	rjmp	.+218    	; 0x4ddc <SetFire()+0x1a4>
    4d02:	78 f4       	brcc	.+30     	; 0x4d22 <SetFire()+0xea>
    4d04:	81 34       	cpi	r24, 0x41	; 65
    4d06:	09 f4       	brne	.+2      	; 0x4d0a <SetFire()+0xd2>
    4d08:	64 c0       	rjmp	.+200    	; 0x4dd2 <SetFire()+0x19a>
    4d0a:	86 34       	cpi	r24, 0x46	; 70
    4d0c:	09 f0       	breq	.+2      	; 0x4d10 <SetFire()+0xd8>
    4d0e:	b5 cf       	rjmp	.-150    	; 0x4c7a <SetFire()+0x42>
    4d10:	20 e0       	ldi	r18, 0x00	; 0
    4d12:	4a ef       	ldi	r20, 0xFA	; 250
    4d14:	50 e0       	ldi	r21, 0x00	; 0
    4d16:	6b e4       	ldi	r22, 0x4B	; 75
    4d18:	88 e3       	ldi	r24, 0x38	; 56
    4d1a:	91 e4       	ldi	r25, 0x41	; 65
    4d1c:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>
    4d20:	ac cf       	rjmp	.-168    	; 0x4c7a <SetFire()+0x42>
    4d22:	80 35       	cpi	r24, 0x50	; 80
    4d24:	09 f4       	brne	.+2      	; 0x4d28 <SetFire()+0xf0>
    4d26:	60 c0       	rjmp	.+192    	; 0x4de8 <SetFire()+0x1b0>
    4d28:	84 36       	cpi	r24, 0x64	; 100
    4d2a:	09 f0       	breq	.+2      	; 0x4d2e <SetFire()+0xf6>
    4d2c:	a6 cf       	rjmp	.-180    	; 0x4c7a <SetFire()+0x42>
    4d2e:	60 e0       	ldi	r22, 0x00	; 0
    4d30:	8c ec       	ldi	r24, 0xCC	; 204
    4d32:	90 e1       	ldi	r25, 0x10	; 16
    4d34:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    4d38:	80 e0       	ldi	r24, 0x00	; 0
    4d3a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    4d3e:	9d cf       	rjmp	.-198    	; 0x4c7a <SetFire()+0x42>
    4d40:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4d44:	7c 01       	movw	r14, r24
    4d46:	69 e1       	ldi	r22, 0x19	; 25
    4d48:	72 e0       	ldi	r23, 0x02	; 2
    4d4a:	ce 01       	movw	r24, r28
    4d4c:	01 96       	adiw	r24, 0x01	; 1
    4d4e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    4d52:	01 e0       	ldi	r16, 0x01	; 1
    4d54:	97 01       	movw	r18, r14
    4d56:	4b e4       	ldi	r20, 0x4B	; 75
    4d58:	50 e0       	ldi	r21, 0x00	; 0
    4d5a:	6c e0       	ldi	r22, 0x0C	; 12
    4d5c:	78 e3       	ldi	r23, 0x38	; 56
    4d5e:	ce 01       	movw	r24, r28
    4d60:	01 96       	adiw	r24, 0x01	; 1
    4d62:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4d66:	ce 01       	movw	r24, r28
    4d68:	01 96       	adiw	r24, 0x01	; 1
    4d6a:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    4d6e:	85 cf       	rjmp	.-246    	; 0x4c7a <SetFire()+0x42>
    4d70:	42 e0       	ldi	r20, 0x02	; 2
    4d72:	64 e0       	ldi	r22, 0x04	; 4
    4d74:	88 ec       	ldi	r24, 0xC8	; 200
    4d76:	99 e2       	ldi	r25, 0x29	; 41
    4d78:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    4d7c:	7e cf       	rjmp	.-260    	; 0x4c7a <SetFire()+0x42>
    4d7e:	45 e0       	ldi	r20, 0x05	; 5
    4d80:	68 e0       	ldi	r22, 0x08	; 8
    4d82:	8f cf       	rjmp	.-226    	; 0x4ca2 <SetFire()+0x6a>
    4d84:	4f e0       	ldi	r20, 0x0F	; 15
    4d86:	96 cf       	rjmp	.-212    	; 0x4cb4 <SetFire()+0x7c>
    4d88:	49 e1       	ldi	r20, 0x19	; 25
    4d8a:	61 e0       	ldi	r22, 0x01	; 1
    4d8c:	81 e1       	ldi	r24, 0x11	; 17
    4d8e:	99 e3       	ldi	r25, 0x39	; 57
    4d90:	f3 cf       	rjmp	.-26     	; 0x4d78 <SetFire()+0x140>
    4d92:	4d e0       	ldi	r20, 0x0D	; 13
    4d94:	52 e0       	ldi	r21, 0x02	; 2
    4d96:	6e e1       	ldi	r22, 0x1E	; 30
    4d98:	88 e3       	ldi	r24, 0x38	; 56
    4d9a:	91 e4       	ldi	r25, 0x41	; 65
    4d9c:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4da0:	6c cf       	rjmp	.-296    	; 0x4c7a <SetFire()+0x42>
    4da2:	4d e0       	ldi	r20, 0x0D	; 13
    4da4:	52 e0       	ldi	r21, 0x02	; 2
    4da6:	68 e2       	ldi	r22, 0x28	; 40
    4da8:	a4 cf       	rjmp	.-184    	; 0x4cf2 <SetFire()+0xba>
    4daa:	4a ef       	ldi	r20, 0xFA	; 250
    4dac:	50 e0       	ldi	r21, 0x00	; 0
    4dae:	62 e3       	ldi	r22, 0x32	; 50
    4db0:	f3 cf       	rjmp	.-26     	; 0x4d98 <SetFire()+0x160>
    4db2:	21 e0       	ldi	r18, 0x01	; 1
    4db4:	4a ef       	ldi	r20, 0xFA	; 250
    4db6:	50 e0       	ldi	r21, 0x00	; 0
    4db8:	67 e3       	ldi	r22, 0x37	; 55
    4dba:	88 e3       	ldi	r24, 0x38	; 56
    4dbc:	91 e4       	ldi	r25, 0x41	; 65
    4dbe:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>
    4dc2:	5b cf       	rjmp	.-330    	; 0x4c7a <SetFire()+0x42>
    4dc4:	41 e4       	ldi	r20, 0x41	; 65
    4dc6:	6c e0       	ldi	r22, 0x0C	; 12
    4dc8:	88 e3       	ldi	r24, 0x38	; 56
    4dca:	91 e4       	ldi	r25, 0x41	; 65
    4dcc:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4dd0:	54 cf       	rjmp	.-344    	; 0x4c7a <SetFire()+0x42>
    4dd2:	20 e0       	ldi	r18, 0x00	; 0
    4dd4:	4a ef       	ldi	r20, 0xFA	; 250
    4dd6:	50 e0       	ldi	r21, 0x00	; 0
    4dd8:	66 e4       	ldi	r22, 0x46	; 70
    4dda:	ef cf       	rjmp	.-34     	; 0x4dba <SetFire()+0x182>
    4ddc:	60 e5       	ldi	r22, 0x50	; 80
    4dde:	8d eb       	ldi	r24, 0xBD	; 189
    4de0:	92 e9       	ldi	r25, 0x92	; 146
    4de2:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    4de6:	49 cf       	rjmp	.-366    	; 0x4c7a <SetFire()+0x42>
    4de8:	64 e6       	ldi	r22, 0x64	; 100
    4dea:	80 e1       	ldi	r24, 0x10	; 16
    4dec:	97 e2       	ldi	r25, 0x27	; 39
    4dee:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4df2:	43 cf       	rjmp	.-378    	; 0x4c7a <SetFire()+0x42>

00004df4 <Chandelier()>:
    4df4:	ef 92       	push	r14
    4df6:	ff 92       	push	r15
    4df8:	0f 93       	push	r16
    4dfa:	1f 93       	push	r17
    4dfc:	cf 93       	push	r28
    4dfe:	df 93       	push	r29
    4e00:	00 d0       	rcall	.+0      	; 0x4e02 <Chandelier()+0xe>
    4e02:	00 d0       	rcall	.+0      	; 0x4e04 <Chandelier()+0x10>
    4e04:	00 d0       	rcall	.+0      	; 0x4e06 <Chandelier()+0x12>
    4e06:	1f 92       	push	r1
    4e08:	cd b7       	in	r28, 0x3d	; 61
    4e0a:	de b7       	in	r29, 0x3e	; 62
    4e0c:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    4e10:	8e 31       	cpi	r24, 0x1E	; 30
    4e12:	09 f4       	brne	.+2      	; 0x4e16 <Chandelier()+0x22>
    4e14:	b0 c0       	rjmp	.+352    	; 0x4f76 <Chandelier()+0x182>
    4e16:	a0 f5       	brcc	.+104    	; 0x4e80 <Chandelier()+0x8c>
    4e18:	85 30       	cpi	r24, 0x05	; 5
    4e1a:	09 f4       	brne	.+2      	; 0x4e1e <Chandelier()+0x2a>
    4e1c:	93 c0       	rjmp	.+294    	; 0x4f44 <Chandelier()+0x150>
    4e1e:	b8 f4       	brcc	.+46     	; 0x4e4e <Chandelier()+0x5a>
    4e20:	81 30       	cpi	r24, 0x01	; 1
    4e22:	09 f4       	brne	.+2      	; 0x4e26 <Chandelier()+0x32>
    4e24:	88 c0       	rjmp	.+272    	; 0x4f36 <Chandelier()+0x142>
    4e26:	08 f4       	brcc	.+2      	; 0x4e2a <Chandelier()+0x36>
    4e28:	6e c0       	rjmp	.+220    	; 0x4f06 <Chandelier()+0x112>
    4e2a:	45 e0       	ldi	r20, 0x05	; 5
    4e2c:	64 e0       	ldi	r22, 0x04	; 4
    4e2e:	82 30       	cpi	r24, 0x02	; 2
    4e30:	09 f4       	brne	.+2      	; 0x4e34 <Chandelier()+0x40>
    4e32:	83 c0       	rjmp	.+262    	; 0x4f3a <Chandelier()+0x146>
    4e34:	27 96       	adiw	r28, 0x07	; 7
    4e36:	0f b6       	in	r0, 0x3f	; 63
    4e38:	f8 94       	cli
    4e3a:	de bf       	out	0x3e, r29	; 62
    4e3c:	0f be       	out	0x3f, r0	; 63
    4e3e:	cd bf       	out	0x3d, r28	; 61
    4e40:	df 91       	pop	r29
    4e42:	cf 91       	pop	r28
    4e44:	1f 91       	pop	r17
    4e46:	0f 91       	pop	r16
    4e48:	ff 90       	pop	r15
    4e4a:	ef 90       	pop	r14
    4e4c:	08 95       	ret
    4e4e:	8f 30       	cpi	r24, 0x0F	; 15
    4e50:	09 f4       	brne	.+2      	; 0x4e54 <Chandelier()+0x60>
    4e52:	7c c0       	rjmp	.+248    	; 0x4f4c <Chandelier()+0x158>
    4e54:	40 f4       	brcc	.+16     	; 0x4e66 <Chandelier()+0x72>
    4e56:	8a 30       	cpi	r24, 0x0A	; 10
    4e58:	69 f7       	brne	.-38     	; 0x4e34 <Chandelier()+0x40>
    4e5a:	6f e0       	ldi	r22, 0x0F	; 15
    4e5c:	86 e0       	ldi	r24, 0x06	; 6
    4e5e:	9f e3       	ldi	r25, 0x3F	; 63
    4e60:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    4e64:	e7 cf       	rjmp	.-50     	; 0x4e34 <Chandelier()+0x40>
    4e66:	84 31       	cpi	r24, 0x14	; 20
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <Chandelier()+0x78>
    4e6a:	74 c0       	rjmp	.+232    	; 0x4f54 <Chandelier()+0x160>
    4e6c:	44 ef       	ldi	r20, 0xF4	; 244
    4e6e:	51 e0       	ldi	r21, 0x01	; 1
    4e70:	6e e1       	ldi	r22, 0x1E	; 30
    4e72:	89 31       	cpi	r24, 0x19	; 25
    4e74:	f9 f6       	brne	.-66     	; 0x4e34 <Chandelier()+0x40>
    4e76:	86 e0       	ldi	r24, 0x06	; 6
    4e78:	9f e3       	ldi	r25, 0x3F	; 63
    4e7a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4e7e:	da cf       	rjmp	.-76     	; 0x4e34 <Chandelier()+0x40>
    4e80:	87 33       	cpi	r24, 0x37	; 55
    4e82:	09 f4       	brne	.+2      	; 0x4e86 <Chandelier()+0x92>
    4e84:	90 c0       	rjmp	.+288    	; 0x4fa6 <Chandelier()+0x1b2>
    4e86:	d0 f4       	brcc	.+52     	; 0x4ebc <Chandelier()+0xc8>
    4e88:	88 32       	cpi	r24, 0x28	; 40
    4e8a:	09 f4       	brne	.+2      	; 0x4e8e <Chandelier()+0x9a>
    4e8c:	79 c0       	rjmp	.+242    	; 0x4f80 <Chandelier()+0x18c>
    4e8e:	50 f4       	brcc	.+20     	; 0x4ea4 <Chandelier()+0xb0>
    4e90:	44 ef       	ldi	r20, 0xF4	; 244
    4e92:	51 e0       	ldi	r21, 0x01	; 1
    4e94:	68 e2       	ldi	r22, 0x28	; 40
    4e96:	83 32       	cpi	r24, 0x23	; 35
    4e98:	69 f6       	brne	.-102    	; 0x4e34 <Chandelier()+0x40>
    4e9a:	86 e0       	ldi	r24, 0x06	; 6
    4e9c:	9f e3       	ldi	r25, 0x3F	; 63
    4e9e:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4ea2:	c8 cf       	rjmp	.-112    	; 0x4e34 <Chandelier()+0x40>
    4ea4:	8d 32       	cpi	r24, 0x2D	; 45
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <Chandelier()+0xb6>
    4ea8:	78 c0       	rjmp	.+240    	; 0x4f9a <Chandelier()+0x1a6>
    4eaa:	82 33       	cpi	r24, 0x32	; 50
    4eac:	19 f6       	brne	.-122    	; 0x4e34 <Chandelier()+0x40>
    4eae:	47 e3       	ldi	r20, 0x37	; 55
    4eb0:	67 e0       	ldi	r22, 0x07	; 7
    4eb2:	8d ef       	ldi	r24, 0xFD	; 253
    4eb4:	9e e3       	ldi	r25, 0x3E	; 62
    4eb6:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4eba:	bc cf       	rjmp	.-136    	; 0x4e34 <Chandelier()+0x40>
    4ebc:	81 34       	cpi	r24, 0x41	; 65
    4ebe:	09 f4       	brne	.+2      	; 0x4ec2 <Chandelier()+0xce>
    4ec0:	76 c0       	rjmp	.+236    	; 0x4fae <Chandelier()+0x1ba>
    4ec2:	90 f4       	brcc	.+36     	; 0x4ee8 <Chandelier()+0xf4>
    4ec4:	8c 33       	cpi	r24, 0x3C	; 60
    4ec6:	09 f0       	breq	.+2      	; 0x4eca <Chandelier()+0xd6>
    4ec8:	b5 cf       	rjmp	.-150    	; 0x4e34 <Chandelier()+0x40>
    4eca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4ece:	7c 01       	movw	r14, r24
    4ed0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4ed4:	8c 01       	movw	r16, r24
    4ed6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4eda:	9c 01       	movw	r18, r24
    4edc:	4b e4       	ldi	r20, 0x4B	; 75
    4ede:	50 e0       	ldi	r21, 0x00	; 0
    4ee0:	61 e4       	ldi	r22, 0x41	; 65
    4ee2:	84 e4       	ldi	r24, 0x44	; 68
    4ee4:	9f e2       	ldi	r25, 0x2F	; 47
    4ee6:	44 c0       	rjmp	.+136    	; 0x4f70 <Chandelier()+0x17c>
    4ee8:	86 34       	cpi	r24, 0x46	; 70
    4eea:	09 f4       	brne	.+2      	; 0x4eee <Chandelier()+0xfa>
    4eec:	65 c0       	rjmp	.+202    	; 0x4fb8 <Chandelier()+0x1c4>
    4eee:	84 36       	cpi	r24, 0x64	; 100
    4ef0:	09 f0       	breq	.+2      	; 0x4ef4 <Chandelier()+0x100>
    4ef2:	a0 cf       	rjmp	.-192    	; 0x4e34 <Chandelier()+0x40>
    4ef4:	60 e0       	ldi	r22, 0x00	; 0
    4ef6:	8c ec       	ldi	r24, 0xCC	; 204
    4ef8:	90 e1       	ldi	r25, 0x10	; 16
    4efa:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    4efe:	80 e0       	ldi	r24, 0x00	; 0
    4f00:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    4f04:	97 cf       	rjmp	.-210    	; 0x4e34 <Chandelier()+0x40>
    4f06:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    4f0a:	7c 01       	movw	r14, r24
    4f0c:	67 e3       	ldi	r22, 0x37	; 55
    4f0e:	72 e0       	ldi	r23, 0x02	; 2
    4f10:	ce 01       	movw	r24, r28
    4f12:	01 96       	adiw	r24, 0x01	; 1
    4f14:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    4f18:	01 e0       	ldi	r16, 0x01	; 1
    4f1a:	97 01       	movw	r18, r14
    4f1c:	4b e4       	ldi	r20, 0x4B	; 75
    4f1e:	50 e0       	ldi	r21, 0x00	; 0
    4f20:	6e e0       	ldi	r22, 0x0E	; 14
    4f22:	7d e3       	ldi	r23, 0x3D	; 61
    4f24:	ce 01       	movw	r24, r28
    4f26:	01 96       	adiw	r24, 0x01	; 1
    4f28:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    4f2c:	ce 01       	movw	r24, r28
    4f2e:	01 96       	adiw	r24, 0x01	; 1
    4f30:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    4f34:	7f cf       	rjmp	.-258    	; 0x4e34 <Chandelier()+0x40>
    4f36:	42 e0       	ldi	r20, 0x02	; 2
    4f38:	63 e0       	ldi	r22, 0x03	; 3
    4f3a:	83 e8       	ldi	r24, 0x83	; 131
    4f3c:	9f e1       	ldi	r25, 0x1F	; 31
    4f3e:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    4f42:	78 cf       	rjmp	.-272    	; 0x4e34 <Chandelier()+0x40>
    4f44:	44 ef       	ldi	r20, 0xF4	; 244
    4f46:	51 e0       	ldi	r21, 0x01	; 1
    4f48:	6a e0       	ldi	r22, 0x0A	; 10
    4f4a:	95 cf       	rjmp	.-214    	; 0x4e76 <Chandelier()+0x82>
    4f4c:	44 ef       	ldi	r20, 0xF4	; 244
    4f4e:	51 e0       	ldi	r21, 0x01	; 1
    4f50:	64 e1       	ldi	r22, 0x14	; 20
    4f52:	a3 cf       	rjmp	.-186    	; 0x4e9a <Chandelier()+0xa6>
    4f54:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f58:	7c 01       	movw	r14, r24
    4f5a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f5e:	8c 01       	movw	r16, r24
    4f60:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f64:	9c 01       	movw	r18, r24
    4f66:	4b e4       	ldi	r20, 0x4B	; 75
    4f68:	50 e0       	ldi	r21, 0x00	; 0
    4f6a:	69 e1       	ldi	r22, 0x19	; 25
    4f6c:	86 e0       	ldi	r24, 0x06	; 6
    4f6e:	9f e3       	ldi	r25, 0x3F	; 63
    4f70:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4f74:	5f cf       	rjmp	.-322    	; 0x4e34 <Chandelier()+0x40>
    4f76:	43 e2       	ldi	r20, 0x23	; 35
    4f78:	64 e0       	ldi	r22, 0x04	; 4
    4f7a:	86 e0       	ldi	r24, 0x06	; 6
    4f7c:	9f e3       	ldi	r25, 0x3F	; 63
    4f7e:	df cf       	rjmp	.-66     	; 0x4f3e <Chandelier()+0x14a>
    4f80:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f84:	7c 01       	movw	r14, r24
    4f86:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f8a:	8c 01       	movw	r16, r24
    4f8c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    4f90:	9c 01       	movw	r18, r24
    4f92:	4b e4       	ldi	r20, 0x4B	; 75
    4f94:	50 e0       	ldi	r21, 0x00	; 0
    4f96:	6d e2       	ldi	r22, 0x2D	; 45
    4f98:	e9 cf       	rjmp	.-46     	; 0x4f6c <Chandelier()+0x178>
    4f9a:	62 e3       	ldi	r22, 0x32	; 50
    4f9c:	82 e7       	ldi	r24, 0x72	; 114
    4f9e:	9f e1       	ldi	r25, 0x1F	; 31
    4fa0:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    4fa4:	47 cf       	rjmp	.-370    	; 0x4e34 <Chandelier()+0x40>
    4fa6:	44 ef       	ldi	r20, 0xF4	; 244
    4fa8:	51 e0       	ldi	r21, 0x01	; 1
    4faa:	6c e3       	ldi	r22, 0x3C	; 60
    4fac:	76 cf       	rjmp	.-276    	; 0x4e9a <Chandelier()+0xa6>
    4fae:	46 e4       	ldi	r20, 0x46	; 70
    4fb0:	6c e0       	ldi	r22, 0x0C	; 12
    4fb2:	89 eb       	ldi	r24, 0xB9	; 185
    4fb4:	9f e0       	ldi	r25, 0x0F	; 15
    4fb6:	7f cf       	rjmp	.-258    	; 0x4eb6 <Chandelier()+0xc2>
    4fb8:	64 e6       	ldi	r22, 0x64	; 100
    4fba:	80 e1       	ldi	r24, 0x10	; 16
    4fbc:	97 e2       	ldi	r25, 0x27	; 39
    4fbe:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    4fc2:	38 cf       	rjmp	.-400    	; 0x4e34 <Chandelier()+0x40>

00004fc4 <Titanium()>:
    4fc4:	ef 92       	push	r14
    4fc6:	ff 92       	push	r15
    4fc8:	0f 93       	push	r16
    4fca:	1f 93       	push	r17
    4fcc:	cf 93       	push	r28
    4fce:	df 93       	push	r29
    4fd0:	00 d0       	rcall	.+0      	; 0x4fd2 <Titanium()+0xe>
    4fd2:	00 d0       	rcall	.+0      	; 0x4fd4 <Titanium()+0x10>
    4fd4:	00 d0       	rcall	.+0      	; 0x4fd6 <Titanium()+0x12>
    4fd6:	1f 92       	push	r1
    4fd8:	cd b7       	in	r28, 0x3d	; 61
    4fda:	de b7       	in	r29, 0x3e	; 62
    4fdc:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    4fe0:	88 32       	cpi	r24, 0x28	; 40
    4fe2:	09 f4       	brne	.+2      	; 0x4fe6 <Titanium()+0x22>
    4fe4:	a2 c0       	rjmp	.+324    	; 0x512a <Titanium()+0x166>
    4fe6:	08 f0       	brcs	.+2      	; 0x4fea <Titanium()+0x26>
    4fe8:	44 c0       	rjmp	.+136    	; 0x5072 <Titanium()+0xae>
    4fea:	8f 30       	cpi	r24, 0x0F	; 15
    4fec:	09 f4       	brne	.+2      	; 0x4ff0 <Titanium()+0x2c>
    4fee:	8b c0       	rjmp	.+278    	; 0x5106 <Titanium()+0x142>
    4ff0:	00 f5       	brcc	.+64     	; 0x5032 <Titanium()+0x6e>
    4ff2:	85 30       	cpi	r24, 0x05	; 5
    4ff4:	09 f4       	brne	.+2      	; 0x4ff8 <Titanium()+0x34>
    4ff6:	7c c0       	rjmp	.+248    	; 0x50f0 <Titanium()+0x12c>
    4ff8:	8a 30       	cpi	r24, 0x0A	; 10
    4ffa:	09 f4       	brne	.+2      	; 0x4ffe <Titanium()+0x3a>
    4ffc:	81 c0       	rjmp	.+258    	; 0x5100 <Titanium()+0x13c>
    4ffe:	81 11       	cpse	r24, r1
    5000:	1f c0       	rjmp	.+62     	; 0x5040 <Titanium()+0x7c>
    5002:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5006:	7c 01       	movw	r14, r24
    5008:	69 e4       	ldi	r22, 0x49	; 73
    500a:	72 e0       	ldi	r23, 0x02	; 2
    500c:	ce 01       	movw	r24, r28
    500e:	01 96       	adiw	r24, 0x01	; 1
    5010:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5014:	05 e0       	ldi	r16, 0x05	; 5
    5016:	97 01       	movw	r18, r14
    5018:	4b e4       	ldi	r20, 0x4B	; 75
    501a:	50 e0       	ldi	r21, 0x00	; 0
    501c:	61 e8       	ldi	r22, 0x81	; 129
    501e:	7e e2       	ldi	r23, 0x2E	; 46
    5020:	ce 01       	movw	r24, r28
    5022:	01 96       	adiw	r24, 0x01	; 1
    5024:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    5028:	ce 01       	movw	r24, r28
    502a:	01 96       	adiw	r24, 0x01	; 1
    502c:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    5030:	07 c0       	rjmp	.+14     	; 0x5040 <Titanium()+0x7c>
    5032:	89 31       	cpi	r24, 0x19	; 25
    5034:	09 f4       	brne	.+2      	; 0x5038 <Titanium()+0x74>
    5036:	6a c0       	rjmp	.+212    	; 0x510c <Titanium()+0x148>
    5038:	80 f4       	brcc	.+32     	; 0x505a <Titanium()+0x96>
    503a:	69 e1       	ldi	r22, 0x19	; 25
    503c:	84 31       	cpi	r24, 0x14	; 20
    503e:	21 f1       	breq	.+72     	; 0x5088 <Titanium()+0xc4>
    5040:	27 96       	adiw	r28, 0x07	; 7
    5042:	0f b6       	in	r0, 0x3f	; 63
    5044:	f8 94       	cli
    5046:	de bf       	out	0x3e, r29	; 62
    5048:	0f be       	out	0x3f, r0	; 63
    504a:	cd bf       	out	0x3d, r28	; 61
    504c:	df 91       	pop	r29
    504e:	cf 91       	pop	r28
    5050:	1f 91       	pop	r17
    5052:	0f 91       	pop	r16
    5054:	ff 90       	pop	r15
    5056:	ef 90       	pop	r14
    5058:	08 95       	ret
    505a:	8e 31       	cpi	r24, 0x1E	; 30
    505c:	09 f4       	brne	.+2      	; 0x5060 <Titanium()+0x9c>
    505e:	5e c0       	rjmp	.+188    	; 0x511c <Titanium()+0x158>
    5060:	48 e2       	ldi	r20, 0x28	; 40
    5062:	69 e0       	ldi	r22, 0x09	; 9
    5064:	83 32       	cpi	r24, 0x23	; 35
    5066:	61 f7       	brne	.-40     	; 0x5040 <Titanium()+0x7c>
    5068:	86 e8       	ldi	r24, 0x86	; 134
    506a:	9b e3       	ldi	r25, 0x3B	; 59
    506c:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    5070:	e7 cf       	rjmp	.-50     	; 0x5040 <Titanium()+0x7c>
    5072:	81 34       	cpi	r24, 0x41	; 65
    5074:	09 f4       	brne	.+2      	; 0x5078 <Titanium()+0xb4>
    5076:	64 c0       	rjmp	.+200    	; 0x5140 <Titanium()+0x17c>
    5078:	b8 f4       	brcc	.+46     	; 0x50a8 <Titanium()+0xe4>
    507a:	82 33       	cpi	r24, 0x32	; 50
    507c:	09 f4       	brne	.+2      	; 0x5080 <Titanium()+0xbc>
    507e:	57 c0       	rjmp	.+174    	; 0x512e <Titanium()+0x16a>
    5080:	40 f4       	brcc	.+16     	; 0x5092 <Titanium()+0xce>
    5082:	62 e3       	ldi	r22, 0x32	; 50
    5084:	8d 32       	cpi	r24, 0x2D	; 45
    5086:	e1 f6       	brne	.-72     	; 0x5040 <Titanium()+0x7c>
    5088:	86 e8       	ldi	r24, 0x86	; 134
    508a:	9b e3       	ldi	r25, 0x3B	; 59
    508c:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    5090:	d7 cf       	rjmp	.-82     	; 0x5040 <Titanium()+0x7c>
    5092:	87 33       	cpi	r24, 0x37	; 55
    5094:	09 f4       	brne	.+2      	; 0x5098 <Titanium()+0xd4>
    5096:	4f c0       	rjmp	.+158    	; 0x5136 <Titanium()+0x172>
    5098:	8c 33       	cpi	r24, 0x3C	; 60
    509a:	91 f6       	brne	.-92     	; 0x5040 <Titanium()+0x7c>
    509c:	61 e4       	ldi	r22, 0x41	; 65
    509e:	82 e6       	ldi	r24, 0x62	; 98
    50a0:	9d e3       	ldi	r25, 0x3D	; 61
    50a2:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    50a6:	cc cf       	rjmp	.-104    	; 0x5040 <Titanium()+0x7c>
    50a8:	80 35       	cpi	r24, 0x50	; 80
    50aa:	09 f4       	brne	.+2      	; 0x50ae <Titanium()+0xea>
    50ac:	56 c0       	rjmp	.+172    	; 0x515a <Titanium()+0x196>
    50ae:	88 f4       	brcc	.+34     	; 0x50d2 <Titanium()+0x10e>
    50b0:	8b 34       	cpi	r24, 0x4B	; 75
    50b2:	31 f6       	brne	.-116    	; 0x5040 <Titanium()+0x7c>
    50b4:	ee 24       	eor	r14, r14
    50b6:	ea 94       	dec	r14
    50b8:	f1 2c       	mov	r15, r1
    50ba:	0f ef       	ldi	r16, 0xFF	; 255
    50bc:	10 e0       	ldi	r17, 0x00	; 0
    50be:	2f ef       	ldi	r18, 0xFF	; 255
    50c0:	30 e0       	ldi	r19, 0x00	; 0
    50c2:	4f ea       	ldi	r20, 0xAF	; 175
    50c4:	50 e0       	ldi	r21, 0x00	; 0
    50c6:	60 e5       	ldi	r22, 0x50	; 80
    50c8:	85 e1       	ldi	r24, 0x15	; 21
    50ca:	94 e3       	ldi	r25, 0x34	; 52
    50cc:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    50d0:	b7 cf       	rjmp	.-146    	; 0x5040 <Titanium()+0x7c>
    50d2:	85 35       	cpi	r24, 0x55	; 85
    50d4:	09 f4       	brne	.+2      	; 0x50d8 <Titanium()+0x114>
    50d6:	47 c0       	rjmp	.+142    	; 0x5166 <Titanium()+0x1a2>
    50d8:	84 36       	cpi	r24, 0x64	; 100
    50da:	09 f0       	breq	.+2      	; 0x50de <Titanium()+0x11a>
    50dc:	b1 cf       	rjmp	.-158    	; 0x5040 <Titanium()+0x7c>
    50de:	60 e0       	ldi	r22, 0x00	; 0
    50e0:	8c ec       	ldi	r24, 0xCC	; 204
    50e2:	90 e1       	ldi	r25, 0x10	; 16
    50e4:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    50e8:	80 e0       	ldi	r24, 0x00	; 0
    50ea:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    50ee:	a8 cf       	rjmp	.-176    	; 0x5040 <Titanium()+0x7c>
    50f0:	4b ed       	ldi	r20, 0xDB	; 219
    50f2:	51 e0       	ldi	r21, 0x01	; 1
    50f4:	6a e0       	ldi	r22, 0x0A	; 10
    50f6:	88 e5       	ldi	r24, 0x58	; 88
    50f8:	93 e2       	ldi	r25, 0x23	; 35
    50fa:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    50fe:	a0 cf       	rjmp	.-192    	; 0x5040 <Titanium()+0x7c>
    5100:	4f e0       	ldi	r20, 0x0F	; 15
    5102:	66 e0       	ldi	r22, 0x06	; 6
    5104:	b1 cf       	rjmp	.-158    	; 0x5068 <Titanium()+0xa4>
    5106:	44 e1       	ldi	r20, 0x14	; 20
    5108:	63 e0       	ldi	r22, 0x03	; 3
    510a:	ae cf       	rjmp	.-164    	; 0x5068 <Titanium()+0xa4>
    510c:	4b ed       	ldi	r20, 0xDB	; 219
    510e:	51 e0       	ldi	r21, 0x01	; 1
    5110:	6e e1       	ldi	r22, 0x1E	; 30
    5112:	86 e8       	ldi	r24, 0x86	; 134
    5114:	9b e3       	ldi	r25, 0x3B	; 59
    5116:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    511a:	92 cf       	rjmp	.-220    	; 0x5040 <Titanium()+0x7c>
    511c:	43 e2       	ldi	r20, 0x23	; 35
    511e:	64 e0       	ldi	r22, 0x04	; 4
    5120:	86 e8       	ldi	r24, 0x86	; 134
    5122:	9b e3       	ldi	r25, 0x3B	; 59
    5124:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5128:	8b cf       	rjmp	.-234    	; 0x5040 <Titanium()+0x7c>
    512a:	4d e2       	ldi	r20, 0x2D	; 45
    512c:	ed cf       	rjmp	.-38     	; 0x5108 <Titanium()+0x144>
    512e:	4b ed       	ldi	r20, 0xDB	; 219
    5130:	51 e0       	ldi	r21, 0x01	; 1
    5132:	67 e3       	ldi	r22, 0x37	; 55
    5134:	ee cf       	rjmp	.-36     	; 0x5112 <Titanium()+0x14e>
    5136:	4c e3       	ldi	r20, 0x3C	; 60
    5138:	68 e0       	ldi	r22, 0x08	; 8
    513a:	8a ea       	ldi	r24, 0xAA	; 170
    513c:	99 e3       	ldi	r25, 0x39	; 57
    513e:	f2 cf       	rjmp	.-28     	; 0x5124 <Titanium()+0x160>
    5140:	90 ed       	ldi	r25, 0xD0	; 208
    5142:	e9 2e       	mov	r14, r25
    5144:	97 e0       	ldi	r25, 0x07	; 7
    5146:	f9 2e       	mov	r15, r25
    5148:	04 e6       	ldi	r16, 0x64	; 100
    514a:	21 e0       	ldi	r18, 0x01	; 1
    514c:	4b e4       	ldi	r20, 0x4B	; 75
    514e:	61 e0       	ldi	r22, 0x01	; 1
    5150:	8c e0       	ldi	r24, 0x0C	; 12
    5152:	97 e7       	ldi	r25, 0x77	; 119
    5154:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    5158:	73 cf       	rjmp	.-282    	; 0x5040 <Titanium()+0x7c>
    515a:	65 e5       	ldi	r22, 0x55	; 85
    515c:	83 ec       	ldi	r24, 0xC3	; 195
    515e:	9d e1       	ldi	r25, 0x1D	; 29
    5160:	0e 94 78 13 	call	0x26f0	; 0x26f0 <progMatrixHorizontal(unsigned int, unsigned char)>
    5164:	6d cf       	rjmp	.-294    	; 0x5040 <Titanium()+0x7c>
    5166:	64 e6       	ldi	r22, 0x64	; 100
    5168:	8b e9       	ldi	r24, 0x9B	; 155
    516a:	9f e6       	ldi	r25, 0x6F	; 111
    516c:	9a cf       	rjmp	.-204    	; 0x50a2 <Titanium()+0xde>

0000516e <SomeoneYouLoved()>:
    516e:	ef 92       	push	r14
    5170:	ff 92       	push	r15
    5172:	0f 93       	push	r16
    5174:	1f 93       	push	r17
    5176:	cf 93       	push	r28
    5178:	df 93       	push	r29
    517a:	00 d0       	rcall	.+0      	; 0x517c <SomeoneYouLoved()+0xe>
    517c:	00 d0       	rcall	.+0      	; 0x517e <SomeoneYouLoved()+0x10>
    517e:	00 d0       	rcall	.+0      	; 0x5180 <SomeoneYouLoved()+0x12>
    5180:	1f 92       	push	r1
    5182:	cd b7       	in	r28, 0x3d	; 61
    5184:	de b7       	in	r29, 0x3e	; 62
    5186:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    518a:	8e 31       	cpi	r24, 0x1E	; 30
    518c:	09 f4       	brne	.+2      	; 0x5190 <SomeoneYouLoved()+0x22>
    518e:	b0 c0       	rjmp	.+352    	; 0x52f0 <SomeoneYouLoved()+0x182>
    5190:	a0 f5       	brcc	.+104    	; 0x51fa <SomeoneYouLoved()+0x8c>
    5192:	85 30       	cpi	r24, 0x05	; 5
    5194:	09 f4       	brne	.+2      	; 0x5198 <SomeoneYouLoved()+0x2a>
    5196:	93 c0       	rjmp	.+294    	; 0x52be <SomeoneYouLoved()+0x150>
    5198:	b8 f4       	brcc	.+46     	; 0x51c8 <SomeoneYouLoved()+0x5a>
    519a:	81 30       	cpi	r24, 0x01	; 1
    519c:	09 f4       	brne	.+2      	; 0x51a0 <SomeoneYouLoved()+0x32>
    519e:	88 c0       	rjmp	.+272    	; 0x52b0 <SomeoneYouLoved()+0x142>
    51a0:	08 f4       	brcc	.+2      	; 0x51a4 <SomeoneYouLoved()+0x36>
    51a2:	6e c0       	rjmp	.+220    	; 0x5280 <SomeoneYouLoved()+0x112>
    51a4:	45 e0       	ldi	r20, 0x05	; 5
    51a6:	64 e0       	ldi	r22, 0x04	; 4
    51a8:	82 30       	cpi	r24, 0x02	; 2
    51aa:	09 f4       	brne	.+2      	; 0x51ae <SomeoneYouLoved()+0x40>
    51ac:	83 c0       	rjmp	.+262    	; 0x52b4 <SomeoneYouLoved()+0x146>
    51ae:	27 96       	adiw	r28, 0x07	; 7
    51b0:	0f b6       	in	r0, 0x3f	; 63
    51b2:	f8 94       	cli
    51b4:	de bf       	out	0x3e, r29	; 62
    51b6:	0f be       	out	0x3f, r0	; 63
    51b8:	cd bf       	out	0x3d, r28	; 61
    51ba:	df 91       	pop	r29
    51bc:	cf 91       	pop	r28
    51be:	1f 91       	pop	r17
    51c0:	0f 91       	pop	r16
    51c2:	ff 90       	pop	r15
    51c4:	ef 90       	pop	r14
    51c6:	08 95       	ret
    51c8:	8f 30       	cpi	r24, 0x0F	; 15
    51ca:	09 f4       	brne	.+2      	; 0x51ce <SomeoneYouLoved()+0x60>
    51cc:	7c c0       	rjmp	.+248    	; 0x52c6 <SomeoneYouLoved()+0x158>
    51ce:	40 f4       	brcc	.+16     	; 0x51e0 <SomeoneYouLoved()+0x72>
    51d0:	8a 30       	cpi	r24, 0x0A	; 10
    51d2:	69 f7       	brne	.-38     	; 0x51ae <SomeoneYouLoved()+0x40>
    51d4:	6f e0       	ldi	r22, 0x0F	; 15
    51d6:	86 e0       	ldi	r24, 0x06	; 6
    51d8:	9f e3       	ldi	r25, 0x3F	; 63
    51da:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    51de:	e7 cf       	rjmp	.-50     	; 0x51ae <SomeoneYouLoved()+0x40>
    51e0:	84 31       	cpi	r24, 0x14	; 20
    51e2:	09 f4       	brne	.+2      	; 0x51e6 <SomeoneYouLoved()+0x78>
    51e4:	74 c0       	rjmp	.+232    	; 0x52ce <SomeoneYouLoved()+0x160>
    51e6:	44 ef       	ldi	r20, 0xF4	; 244
    51e8:	51 e0       	ldi	r21, 0x01	; 1
    51ea:	6e e1       	ldi	r22, 0x1E	; 30
    51ec:	89 31       	cpi	r24, 0x19	; 25
    51ee:	f9 f6       	brne	.-66     	; 0x51ae <SomeoneYouLoved()+0x40>
    51f0:	86 e0       	ldi	r24, 0x06	; 6
    51f2:	9f e3       	ldi	r25, 0x3F	; 63
    51f4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    51f8:	da cf       	rjmp	.-76     	; 0x51ae <SomeoneYouLoved()+0x40>
    51fa:	87 33       	cpi	r24, 0x37	; 55
    51fc:	09 f4       	brne	.+2      	; 0x5200 <SomeoneYouLoved()+0x92>
    51fe:	90 c0       	rjmp	.+288    	; 0x5320 <SomeoneYouLoved()+0x1b2>
    5200:	d0 f4       	brcc	.+52     	; 0x5236 <SomeoneYouLoved()+0xc8>
    5202:	88 32       	cpi	r24, 0x28	; 40
    5204:	09 f4       	brne	.+2      	; 0x5208 <SomeoneYouLoved()+0x9a>
    5206:	79 c0       	rjmp	.+242    	; 0x52fa <SomeoneYouLoved()+0x18c>
    5208:	50 f4       	brcc	.+20     	; 0x521e <SomeoneYouLoved()+0xb0>
    520a:	44 ef       	ldi	r20, 0xF4	; 244
    520c:	51 e0       	ldi	r21, 0x01	; 1
    520e:	68 e2       	ldi	r22, 0x28	; 40
    5210:	83 32       	cpi	r24, 0x23	; 35
    5212:	69 f6       	brne	.-102    	; 0x51ae <SomeoneYouLoved()+0x40>
    5214:	86 e0       	ldi	r24, 0x06	; 6
    5216:	9f e3       	ldi	r25, 0x3F	; 63
    5218:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    521c:	c8 cf       	rjmp	.-112    	; 0x51ae <SomeoneYouLoved()+0x40>
    521e:	8d 32       	cpi	r24, 0x2D	; 45
    5220:	09 f4       	brne	.+2      	; 0x5224 <SomeoneYouLoved()+0xb6>
    5222:	78 c0       	rjmp	.+240    	; 0x5314 <SomeoneYouLoved()+0x1a6>
    5224:	82 33       	cpi	r24, 0x32	; 50
    5226:	19 f6       	brne	.-122    	; 0x51ae <SomeoneYouLoved()+0x40>
    5228:	47 e3       	ldi	r20, 0x37	; 55
    522a:	67 e0       	ldi	r22, 0x07	; 7
    522c:	8d ef       	ldi	r24, 0xFD	; 253
    522e:	9e e3       	ldi	r25, 0x3E	; 62
    5230:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5234:	bc cf       	rjmp	.-136    	; 0x51ae <SomeoneYouLoved()+0x40>
    5236:	81 34       	cpi	r24, 0x41	; 65
    5238:	09 f4       	brne	.+2      	; 0x523c <SomeoneYouLoved()+0xce>
    523a:	76 c0       	rjmp	.+236    	; 0x5328 <SomeoneYouLoved()+0x1ba>
    523c:	90 f4       	brcc	.+36     	; 0x5262 <SomeoneYouLoved()+0xf4>
    523e:	8c 33       	cpi	r24, 0x3C	; 60
    5240:	09 f0       	breq	.+2      	; 0x5244 <SomeoneYouLoved()+0xd6>
    5242:	b5 cf       	rjmp	.-150    	; 0x51ae <SomeoneYouLoved()+0x40>
    5244:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5248:	7c 01       	movw	r14, r24
    524a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    524e:	8c 01       	movw	r16, r24
    5250:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5254:	9c 01       	movw	r18, r24
    5256:	4b e4       	ldi	r20, 0x4B	; 75
    5258:	50 e0       	ldi	r21, 0x00	; 0
    525a:	61 e4       	ldi	r22, 0x41	; 65
    525c:	84 e4       	ldi	r24, 0x44	; 68
    525e:	9f e2       	ldi	r25, 0x2F	; 47
    5260:	44 c0       	rjmp	.+136    	; 0x52ea <SomeoneYouLoved()+0x17c>
    5262:	86 34       	cpi	r24, 0x46	; 70
    5264:	09 f4       	brne	.+2      	; 0x5268 <SomeoneYouLoved()+0xfa>
    5266:	65 c0       	rjmp	.+202    	; 0x5332 <SomeoneYouLoved()+0x1c4>
    5268:	84 36       	cpi	r24, 0x64	; 100
    526a:	09 f0       	breq	.+2      	; 0x526e <SomeoneYouLoved()+0x100>
    526c:	a0 cf       	rjmp	.-192    	; 0x51ae <SomeoneYouLoved()+0x40>
    526e:	60 e0       	ldi	r22, 0x00	; 0
    5270:	8c ec       	ldi	r24, 0xCC	; 204
    5272:	90 e1       	ldi	r25, 0x10	; 16
    5274:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    5278:	80 e0       	ldi	r24, 0x00	; 0
    527a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    527e:	97 cf       	rjmp	.-210    	; 0x51ae <SomeoneYouLoved()+0x40>
    5280:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5284:	7c 01       	movw	r14, r24
    5286:	62 e6       	ldi	r22, 0x62	; 98
    5288:	72 e0       	ldi	r23, 0x02	; 2
    528a:	ce 01       	movw	r24, r28
    528c:	01 96       	adiw	r24, 0x01	; 1
    528e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5292:	01 e0       	ldi	r16, 0x01	; 1
    5294:	97 01       	movw	r18, r14
    5296:	4b e4       	ldi	r20, 0x4B	; 75
    5298:	50 e0       	ldi	r21, 0x00	; 0
    529a:	6e e0       	ldi	r22, 0x0E	; 14
    529c:	7d e3       	ldi	r23, 0x3D	; 61
    529e:	ce 01       	movw	r24, r28
    52a0:	01 96       	adiw	r24, 0x01	; 1
    52a2:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    52a6:	ce 01       	movw	r24, r28
    52a8:	01 96       	adiw	r24, 0x01	; 1
    52aa:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    52ae:	7f cf       	rjmp	.-258    	; 0x51ae <SomeoneYouLoved()+0x40>
    52b0:	42 e0       	ldi	r20, 0x02	; 2
    52b2:	63 e0       	ldi	r22, 0x03	; 3
    52b4:	83 e8       	ldi	r24, 0x83	; 131
    52b6:	9f e1       	ldi	r25, 0x1F	; 31
    52b8:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    52bc:	78 cf       	rjmp	.-272    	; 0x51ae <SomeoneYouLoved()+0x40>
    52be:	44 ef       	ldi	r20, 0xF4	; 244
    52c0:	51 e0       	ldi	r21, 0x01	; 1
    52c2:	6a e0       	ldi	r22, 0x0A	; 10
    52c4:	95 cf       	rjmp	.-214    	; 0x51f0 <SomeoneYouLoved()+0x82>
    52c6:	44 ef       	ldi	r20, 0xF4	; 244
    52c8:	51 e0       	ldi	r21, 0x01	; 1
    52ca:	64 e1       	ldi	r22, 0x14	; 20
    52cc:	a3 cf       	rjmp	.-186    	; 0x5214 <SomeoneYouLoved()+0xa6>
    52ce:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    52d2:	7c 01       	movw	r14, r24
    52d4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    52d8:	8c 01       	movw	r16, r24
    52da:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    52de:	9c 01       	movw	r18, r24
    52e0:	4b e4       	ldi	r20, 0x4B	; 75
    52e2:	50 e0       	ldi	r21, 0x00	; 0
    52e4:	69 e1       	ldi	r22, 0x19	; 25
    52e6:	86 e0       	ldi	r24, 0x06	; 6
    52e8:	9f e3       	ldi	r25, 0x3F	; 63
    52ea:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    52ee:	5f cf       	rjmp	.-322    	; 0x51ae <SomeoneYouLoved()+0x40>
    52f0:	43 e2       	ldi	r20, 0x23	; 35
    52f2:	64 e0       	ldi	r22, 0x04	; 4
    52f4:	86 e0       	ldi	r24, 0x06	; 6
    52f6:	9f e3       	ldi	r25, 0x3F	; 63
    52f8:	df cf       	rjmp	.-66     	; 0x52b8 <SomeoneYouLoved()+0x14a>
    52fa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    52fe:	7c 01       	movw	r14, r24
    5300:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5304:	8c 01       	movw	r16, r24
    5306:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    530a:	9c 01       	movw	r18, r24
    530c:	4b e4       	ldi	r20, 0x4B	; 75
    530e:	50 e0       	ldi	r21, 0x00	; 0
    5310:	6d e2       	ldi	r22, 0x2D	; 45
    5312:	e9 cf       	rjmp	.-46     	; 0x52e6 <SomeoneYouLoved()+0x178>
    5314:	62 e3       	ldi	r22, 0x32	; 50
    5316:	82 e7       	ldi	r24, 0x72	; 114
    5318:	9f e1       	ldi	r25, 0x1F	; 31
    531a:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    531e:	47 cf       	rjmp	.-370    	; 0x51ae <SomeoneYouLoved()+0x40>
    5320:	44 ef       	ldi	r20, 0xF4	; 244
    5322:	51 e0       	ldi	r21, 0x01	; 1
    5324:	6c e3       	ldi	r22, 0x3C	; 60
    5326:	76 cf       	rjmp	.-276    	; 0x5214 <SomeoneYouLoved()+0xa6>
    5328:	46 e4       	ldi	r20, 0x46	; 70
    532a:	6c e0       	ldi	r22, 0x0C	; 12
    532c:	89 eb       	ldi	r24, 0xB9	; 185
    532e:	9f e0       	ldi	r25, 0x0F	; 15
    5330:	7f cf       	rjmp	.-258    	; 0x5230 <SomeoneYouLoved()+0xc2>
    5332:	64 e6       	ldi	r22, 0x64	; 100
    5334:	80 e1       	ldi	r24, 0x10	; 16
    5336:	97 e2       	ldi	r25, 0x27	; 39
    5338:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    533c:	38 cf       	rjmp	.-400    	; 0x51ae <SomeoneYouLoved()+0x40>

0000533e <ShouldntStop()>:
    533e:	ef 92       	push	r14
    5340:	ff 92       	push	r15
    5342:	0f 93       	push	r16
    5344:	1f 93       	push	r17
    5346:	cf 93       	push	r28
    5348:	df 93       	push	r29
    534a:	00 d0       	rcall	.+0      	; 0x534c <ShouldntStop()+0xe>
    534c:	00 d0       	rcall	.+0      	; 0x534e <ShouldntStop()+0x10>
    534e:	00 d0       	rcall	.+0      	; 0x5350 <ShouldntStop()+0x12>
    5350:	1f 92       	push	r1
    5352:	cd b7       	in	r28, 0x3d	; 61
    5354:	de b7       	in	r29, 0x3e	; 62
    5356:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    535a:	8e 31       	cpi	r24, 0x1E	; 30
    535c:	09 f4       	brne	.+2      	; 0x5360 <ShouldntStop()+0x22>
    535e:	b0 c0       	rjmp	.+352    	; 0x54c0 <ShouldntStop()+0x182>
    5360:	a0 f5       	brcc	.+104    	; 0x53ca <ShouldntStop()+0x8c>
    5362:	85 30       	cpi	r24, 0x05	; 5
    5364:	09 f4       	brne	.+2      	; 0x5368 <ShouldntStop()+0x2a>
    5366:	93 c0       	rjmp	.+294    	; 0x548e <ShouldntStop()+0x150>
    5368:	b8 f4       	brcc	.+46     	; 0x5398 <ShouldntStop()+0x5a>
    536a:	81 30       	cpi	r24, 0x01	; 1
    536c:	09 f4       	brne	.+2      	; 0x5370 <ShouldntStop()+0x32>
    536e:	88 c0       	rjmp	.+272    	; 0x5480 <ShouldntStop()+0x142>
    5370:	08 f4       	brcc	.+2      	; 0x5374 <ShouldntStop()+0x36>
    5372:	6e c0       	rjmp	.+220    	; 0x5450 <ShouldntStop()+0x112>
    5374:	45 e0       	ldi	r20, 0x05	; 5
    5376:	64 e0       	ldi	r22, 0x04	; 4
    5378:	82 30       	cpi	r24, 0x02	; 2
    537a:	09 f4       	brne	.+2      	; 0x537e <ShouldntStop()+0x40>
    537c:	83 c0       	rjmp	.+262    	; 0x5484 <ShouldntStop()+0x146>
    537e:	27 96       	adiw	r28, 0x07	; 7
    5380:	0f b6       	in	r0, 0x3f	; 63
    5382:	f8 94       	cli
    5384:	de bf       	out	0x3e, r29	; 62
    5386:	0f be       	out	0x3f, r0	; 63
    5388:	cd bf       	out	0x3d, r28	; 61
    538a:	df 91       	pop	r29
    538c:	cf 91       	pop	r28
    538e:	1f 91       	pop	r17
    5390:	0f 91       	pop	r16
    5392:	ff 90       	pop	r15
    5394:	ef 90       	pop	r14
    5396:	08 95       	ret
    5398:	8f 30       	cpi	r24, 0x0F	; 15
    539a:	09 f4       	brne	.+2      	; 0x539e <ShouldntStop()+0x60>
    539c:	7c c0       	rjmp	.+248    	; 0x5496 <ShouldntStop()+0x158>
    539e:	40 f4       	brcc	.+16     	; 0x53b0 <ShouldntStop()+0x72>
    53a0:	8a 30       	cpi	r24, 0x0A	; 10
    53a2:	69 f7       	brne	.-38     	; 0x537e <ShouldntStop()+0x40>
    53a4:	6f e0       	ldi	r22, 0x0F	; 15
    53a6:	86 e0       	ldi	r24, 0x06	; 6
    53a8:	9f e3       	ldi	r25, 0x3F	; 63
    53aa:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    53ae:	e7 cf       	rjmp	.-50     	; 0x537e <ShouldntStop()+0x40>
    53b0:	84 31       	cpi	r24, 0x14	; 20
    53b2:	09 f4       	brne	.+2      	; 0x53b6 <ShouldntStop()+0x78>
    53b4:	74 c0       	rjmp	.+232    	; 0x549e <ShouldntStop()+0x160>
    53b6:	44 ef       	ldi	r20, 0xF4	; 244
    53b8:	51 e0       	ldi	r21, 0x01	; 1
    53ba:	6e e1       	ldi	r22, 0x1E	; 30
    53bc:	89 31       	cpi	r24, 0x19	; 25
    53be:	f9 f6       	brne	.-66     	; 0x537e <ShouldntStop()+0x40>
    53c0:	86 e0       	ldi	r24, 0x06	; 6
    53c2:	9f e3       	ldi	r25, 0x3F	; 63
    53c4:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    53c8:	da cf       	rjmp	.-76     	; 0x537e <ShouldntStop()+0x40>
    53ca:	87 33       	cpi	r24, 0x37	; 55
    53cc:	09 f4       	brne	.+2      	; 0x53d0 <ShouldntStop()+0x92>
    53ce:	90 c0       	rjmp	.+288    	; 0x54f0 <ShouldntStop()+0x1b2>
    53d0:	d0 f4       	brcc	.+52     	; 0x5406 <ShouldntStop()+0xc8>
    53d2:	88 32       	cpi	r24, 0x28	; 40
    53d4:	09 f4       	brne	.+2      	; 0x53d8 <ShouldntStop()+0x9a>
    53d6:	79 c0       	rjmp	.+242    	; 0x54ca <ShouldntStop()+0x18c>
    53d8:	50 f4       	brcc	.+20     	; 0x53ee <ShouldntStop()+0xb0>
    53da:	44 ef       	ldi	r20, 0xF4	; 244
    53dc:	51 e0       	ldi	r21, 0x01	; 1
    53de:	68 e2       	ldi	r22, 0x28	; 40
    53e0:	83 32       	cpi	r24, 0x23	; 35
    53e2:	69 f6       	brne	.-102    	; 0x537e <ShouldntStop()+0x40>
    53e4:	86 e0       	ldi	r24, 0x06	; 6
    53e6:	9f e3       	ldi	r25, 0x3F	; 63
    53e8:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    53ec:	c8 cf       	rjmp	.-112    	; 0x537e <ShouldntStop()+0x40>
    53ee:	8d 32       	cpi	r24, 0x2D	; 45
    53f0:	09 f4       	brne	.+2      	; 0x53f4 <ShouldntStop()+0xb6>
    53f2:	78 c0       	rjmp	.+240    	; 0x54e4 <ShouldntStop()+0x1a6>
    53f4:	82 33       	cpi	r24, 0x32	; 50
    53f6:	19 f6       	brne	.-122    	; 0x537e <ShouldntStop()+0x40>
    53f8:	47 e3       	ldi	r20, 0x37	; 55
    53fa:	67 e0       	ldi	r22, 0x07	; 7
    53fc:	8d ef       	ldi	r24, 0xFD	; 253
    53fe:	9e e3       	ldi	r25, 0x3E	; 62
    5400:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5404:	bc cf       	rjmp	.-136    	; 0x537e <ShouldntStop()+0x40>
    5406:	81 34       	cpi	r24, 0x41	; 65
    5408:	09 f4       	brne	.+2      	; 0x540c <ShouldntStop()+0xce>
    540a:	76 c0       	rjmp	.+236    	; 0x54f8 <ShouldntStop()+0x1ba>
    540c:	90 f4       	brcc	.+36     	; 0x5432 <ShouldntStop()+0xf4>
    540e:	8c 33       	cpi	r24, 0x3C	; 60
    5410:	09 f0       	breq	.+2      	; 0x5414 <ShouldntStop()+0xd6>
    5412:	b5 cf       	rjmp	.-150    	; 0x537e <ShouldntStop()+0x40>
    5414:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5418:	7c 01       	movw	r14, r24
    541a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    541e:	8c 01       	movw	r16, r24
    5420:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5424:	9c 01       	movw	r18, r24
    5426:	4b e4       	ldi	r20, 0x4B	; 75
    5428:	50 e0       	ldi	r21, 0x00	; 0
    542a:	61 e4       	ldi	r22, 0x41	; 65
    542c:	84 e4       	ldi	r24, 0x44	; 68
    542e:	9f e2       	ldi	r25, 0x2F	; 47
    5430:	44 c0       	rjmp	.+136    	; 0x54ba <ShouldntStop()+0x17c>
    5432:	86 34       	cpi	r24, 0x46	; 70
    5434:	09 f4       	brne	.+2      	; 0x5438 <ShouldntStop()+0xfa>
    5436:	65 c0       	rjmp	.+202    	; 0x5502 <ShouldntStop()+0x1c4>
    5438:	84 36       	cpi	r24, 0x64	; 100
    543a:	09 f0       	breq	.+2      	; 0x543e <ShouldntStop()+0x100>
    543c:	a0 cf       	rjmp	.-192    	; 0x537e <ShouldntStop()+0x40>
    543e:	60 e0       	ldi	r22, 0x00	; 0
    5440:	8c ec       	ldi	r24, 0xCC	; 204
    5442:	90 e1       	ldi	r25, 0x10	; 16
    5444:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    5448:	80 e0       	ldi	r24, 0x00	; 0
    544a:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    544e:	97 cf       	rjmp	.-210    	; 0x537e <ShouldntStop()+0x40>
    5450:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5454:	7c 01       	movw	r14, r24
    5456:	65 e8       	ldi	r22, 0x85	; 133
    5458:	72 e0       	ldi	r23, 0x02	; 2
    545a:	ce 01       	movw	r24, r28
    545c:	01 96       	adiw	r24, 0x01	; 1
    545e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5462:	01 e0       	ldi	r16, 0x01	; 1
    5464:	97 01       	movw	r18, r14
    5466:	4b e4       	ldi	r20, 0x4B	; 75
    5468:	50 e0       	ldi	r21, 0x00	; 0
    546a:	6e e0       	ldi	r22, 0x0E	; 14
    546c:	7d e3       	ldi	r23, 0x3D	; 61
    546e:	ce 01       	movw	r24, r28
    5470:	01 96       	adiw	r24, 0x01	; 1
    5472:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    5476:	ce 01       	movw	r24, r28
    5478:	01 96       	adiw	r24, 0x01	; 1
    547a:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    547e:	7f cf       	rjmp	.-258    	; 0x537e <ShouldntStop()+0x40>
    5480:	42 e0       	ldi	r20, 0x02	; 2
    5482:	63 e0       	ldi	r22, 0x03	; 3
    5484:	83 e8       	ldi	r24, 0x83	; 131
    5486:	9f e1       	ldi	r25, 0x1F	; 31
    5488:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    548c:	78 cf       	rjmp	.-272    	; 0x537e <ShouldntStop()+0x40>
    548e:	44 ef       	ldi	r20, 0xF4	; 244
    5490:	51 e0       	ldi	r21, 0x01	; 1
    5492:	6a e0       	ldi	r22, 0x0A	; 10
    5494:	95 cf       	rjmp	.-214    	; 0x53c0 <ShouldntStop()+0x82>
    5496:	44 ef       	ldi	r20, 0xF4	; 244
    5498:	51 e0       	ldi	r21, 0x01	; 1
    549a:	64 e1       	ldi	r22, 0x14	; 20
    549c:	a3 cf       	rjmp	.-186    	; 0x53e4 <ShouldntStop()+0xa6>
    549e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54a2:	7c 01       	movw	r14, r24
    54a4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54a8:	8c 01       	movw	r16, r24
    54aa:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54ae:	9c 01       	movw	r18, r24
    54b0:	4b e4       	ldi	r20, 0x4B	; 75
    54b2:	50 e0       	ldi	r21, 0x00	; 0
    54b4:	69 e1       	ldi	r22, 0x19	; 25
    54b6:	86 e0       	ldi	r24, 0x06	; 6
    54b8:	9f e3       	ldi	r25, 0x3F	; 63
    54ba:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    54be:	5f cf       	rjmp	.-322    	; 0x537e <ShouldntStop()+0x40>
    54c0:	43 e2       	ldi	r20, 0x23	; 35
    54c2:	64 e0       	ldi	r22, 0x04	; 4
    54c4:	86 e0       	ldi	r24, 0x06	; 6
    54c6:	9f e3       	ldi	r25, 0x3F	; 63
    54c8:	df cf       	rjmp	.-66     	; 0x5488 <ShouldntStop()+0x14a>
    54ca:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54ce:	7c 01       	movw	r14, r24
    54d0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54d4:	8c 01       	movw	r16, r24
    54d6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    54da:	9c 01       	movw	r18, r24
    54dc:	4b e4       	ldi	r20, 0x4B	; 75
    54de:	50 e0       	ldi	r21, 0x00	; 0
    54e0:	6d e2       	ldi	r22, 0x2D	; 45
    54e2:	e9 cf       	rjmp	.-46     	; 0x54b6 <ShouldntStop()+0x178>
    54e4:	62 e3       	ldi	r22, 0x32	; 50
    54e6:	82 e7       	ldi	r24, 0x72	; 114
    54e8:	9f e1       	ldi	r25, 0x1F	; 31
    54ea:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    54ee:	47 cf       	rjmp	.-370    	; 0x537e <ShouldntStop()+0x40>
    54f0:	44 ef       	ldi	r20, 0xF4	; 244
    54f2:	51 e0       	ldi	r21, 0x01	; 1
    54f4:	6c e3       	ldi	r22, 0x3C	; 60
    54f6:	76 cf       	rjmp	.-276    	; 0x53e4 <ShouldntStop()+0xa6>
    54f8:	46 e4       	ldi	r20, 0x46	; 70
    54fa:	6c e0       	ldi	r22, 0x0C	; 12
    54fc:	89 eb       	ldi	r24, 0xB9	; 185
    54fe:	9f e0       	ldi	r25, 0x0F	; 15
    5500:	7f cf       	rjmp	.-258    	; 0x5400 <ShouldntStop()+0xc2>
    5502:	64 e6       	ldi	r22, 0x64	; 100
    5504:	80 e1       	ldi	r24, 0x10	; 16
    5506:	97 e2       	ldi	r25, 0x27	; 39
    5508:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    550c:	38 cf       	rjmp	.-400    	; 0x537e <ShouldntStop()+0x40>

0000550e <SunAlwaysShinesOnTV()>:
    550e:	ef 92       	push	r14
    5510:	ff 92       	push	r15
    5512:	0f 93       	push	r16
    5514:	1f 93       	push	r17
    5516:	cf 93       	push	r28
    5518:	df 93       	push	r29
    551a:	00 d0       	rcall	.+0      	; 0x551c <SunAlwaysShinesOnTV()+0xe>
    551c:	00 d0       	rcall	.+0      	; 0x551e <SunAlwaysShinesOnTV()+0x10>
    551e:	00 d0       	rcall	.+0      	; 0x5520 <SunAlwaysShinesOnTV()+0x12>
    5520:	1f 92       	push	r1
    5522:	cd b7       	in	r28, 0x3d	; 61
    5524:	de b7       	in	r29, 0x3e	; 62
    5526:	e0 91 b7 0a 	lds	r30, 0x0AB7	; 0x800ab7 <prog>
    552a:	e5 36       	cpi	r30, 0x65	; 101
    552c:	08 f0       	brcs	.+2      	; 0x5530 <SunAlwaysShinesOnTV()+0x22>
    552e:	81 c0       	rjmp	.+258    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    5530:	f0 e0       	ldi	r31, 0x00	; 0
    5532:	e3 56       	subi	r30, 0x63	; 99
    5534:	f5 4d       	sbci	r31, 0xD5	; 213
    5536:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    553a:	02 2b       	or	r16, r18
    553c:	19 2b       	or	r17, r25
    553e:	26 2b       	or	r18, r22
    5540:	19 2b       	or	r17, r25
    5542:	2c 2b       	or	r18, r28
    5544:	19 2b       	or	r17, r25
    5546:	42 2b       	or	r20, r18
    5548:	19 2b       	or	r17, r25
    554a:	52 2b       	or	r21, r18
    554c:	19 2b       	or	r17, r25
    554e:	5b 2b       	or	r21, r27
    5550:	19 2b       	or	r17, r25
    5552:	6d 2b       	or	r22, r29
    5554:	19 2b       	or	r17, r25
    5556:	7d 2b       	or	r23, r29
    5558:	19 2b       	or	r17, r25
    555a:	82 2b       	or	r24, r18
    555c:	19 2b       	or	r17, r25
    555e:	8f 2b       	or	r24, r31
    5560:	19 2b       	or	r17, r25
    5562:	97 2b       	or	r25, r23
    5564:	19 2b       	or	r17, r25
    5566:	a0 2b       	or	r26, r16
    5568:	19 2b       	or	r17, r25
    556a:	a8 2b       	or	r26, r24
    556c:	19 2b       	or	r17, r25
    556e:	b4 2b       	or	r27, r20
    5570:	19 2b       	or	r17, r25
    5572:	c0 2b       	or	r28, r16
    5574:	19 2b       	or	r17, r25
    5576:	cf 2b       	or	r28, r31
    5578:	19 2b       	or	r17, r25
    557a:	d3 2b       	or	r29, r19
    557c:	19 2b       	or	r17, r25
    557e:	db 2b       	or	r29, r27
    5580:	19 2b       	or	r17, r25
    5582:	e8 2b       	or	r30, r24
    5584:	19 2b       	or	r17, r25
    5586:	ee 2b       	or	r30, r30
    5588:	19 2b       	or	r17, r25
    558a:	f5 2b       	or	r31, r21
    558c:	19 2b       	or	r17, r25
    558e:	f9 2b       	or	r31, r25
    5590:	19 2b       	or	r17, r25
    5592:	05 2c       	mov	r0, r5
    5594:	19 2b       	or	r17, r25
    5596:	11 2c       	mov	r1, r1
    5598:	19 2b       	or	r17, r25
    559a:	1e 2c       	mov	r1, r14
    559c:	19 2b       	or	r17, r25
    559e:	20 2c       	mov	r2, r0
    55a0:	19 2b       	or	r17, r25
    55a2:	26 2c       	mov	r2, r6
    55a4:	19 2b       	or	r17, r25
    55a6:	31 2c       	mov	r3, r1
    55a8:	19 2b       	or	r17, r25
    55aa:	35 2c       	mov	r3, r5
    55ac:	19 2b       	or	r17, r25
    55ae:	3b 2c       	mov	r3, r11
    55b0:	19 2b       	or	r17, r25
    55b2:	46 2c       	mov	r4, r6
    55b4:	19 2b       	or	r17, r25
    55b6:	53 2c       	mov	r5, r3
    55b8:	19 2b       	or	r17, r25
    55ba:	57 2c       	mov	r5, r7
    55bc:	19 2b       	or	r17, r25
    55be:	5d 2c       	mov	r5, r13
    55c0:	19 2b       	or	r17, r25
    55c2:	6a 2c       	mov	r6, r10
    55c4:	19 2b       	or	r17, r25
    55c6:	70 2c       	mov	r7, r0
    55c8:	19 2b       	or	r17, r25
    55ca:	7b 2c       	mov	r7, r11
    55cc:	19 2b       	or	r17, r25
    55ce:	81 2c       	mov	r8, r1
    55d0:	19 2b       	or	r17, r25
    55d2:	8c 2c       	mov	r8, r12
    55d4:	19 2b       	or	r17, r25
    55d6:	19 2b       	or	r17, r25
    55d8:	19 2b       	or	r17, r25
    55da:	19 2b       	or	r17, r25
    55dc:	19 2b       	or	r17, r25
    55de:	19 2b       	or	r17, r25
    55e0:	19 2b       	or	r17, r25
    55e2:	19 2b       	or	r17, r25
    55e4:	19 2b       	or	r17, r25
    55e6:	19 2b       	or	r17, r25
    55e8:	19 2b       	or	r17, r25
    55ea:	19 2b       	or	r17, r25
    55ec:	19 2b       	or	r17, r25
    55ee:	19 2b       	or	r17, r25
    55f0:	19 2b       	or	r17, r25
    55f2:	19 2b       	or	r17, r25
    55f4:	19 2b       	or	r17, r25
    55f6:	19 2b       	or	r17, r25
    55f8:	19 2b       	or	r17, r25
    55fa:	19 2b       	or	r17, r25
    55fc:	19 2b       	or	r17, r25
    55fe:	19 2b       	or	r17, r25
    5600:	19 2b       	or	r17, r25
    5602:	90 2c       	mov	r9, r0
    5604:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5608:	7c 01       	movw	r14, r24
    560a:	6c ea       	ldi	r22, 0xAC	; 172
    560c:	72 e0       	ldi	r23, 0x02	; 2
    560e:	ce 01       	movw	r24, r28
    5610:	01 96       	adiw	r24, 0x01	; 1
    5612:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5616:	02 e0       	ldi	r16, 0x02	; 2
    5618:	97 01       	movw	r18, r14
    561a:	4b e4       	ldi	r20, 0x4B	; 75
    561c:	50 e0       	ldi	r21, 0x00	; 0
    561e:	64 e0       	ldi	r22, 0x04	; 4
    5620:	72 e4       	ldi	r23, 0x42	; 66
    5622:	ce 01       	movw	r24, r28
    5624:	01 96       	adiw	r24, 0x01	; 1
    5626:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    562a:	ce 01       	movw	r24, r28
    562c:	01 96       	adiw	r24, 0x01	; 1
    562e:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    5632:	27 96       	adiw	r28, 0x07	; 7
    5634:	0f b6       	in	r0, 0x3f	; 63
    5636:	f8 94       	cli
    5638:	de bf       	out	0x3e, r29	; 62
    563a:	0f be       	out	0x3f, r0	; 63
    563c:	cd bf       	out	0x3d, r28	; 61
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	1f 91       	pop	r17
    5644:	0f 91       	pop	r16
    5646:	ff 90       	pop	r15
    5648:	ef 90       	pop	r14
    564a:	08 95       	ret
    564c:	64 e0       	ldi	r22, 0x04	; 4
    564e:	86 e7       	ldi	r24, 0x76	; 118
    5650:	94 e1       	ldi	r25, 0x14	; 20
    5652:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    5656:	ed cf       	rjmp	.-38     	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    5658:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    565c:	8c 01       	movw	r16, r24
    565e:	60 ed       	ldi	r22, 0xD0	; 208
    5660:	72 e0       	ldi	r23, 0x02	; 2
    5662:	ce 01       	movw	r24, r28
    5664:	01 96       	adiw	r24, 0x01	; 1
    5666:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    566a:	56 e0       	ldi	r21, 0x06	; 6
    566c:	e5 2e       	mov	r14, r21
    566e:	2d e0       	ldi	r18, 0x0D	; 13
    5670:	30 e0       	ldi	r19, 0x00	; 0
    5672:	50 e0       	ldi	r21, 0x00	; 0
    5674:	40 e0       	ldi	r20, 0x00	; 0
    5676:	66 eb       	ldi	r22, 0xB6	; 182
    5678:	73 e0       	ldi	r23, 0x03	; 3
    567a:	ce 01       	movw	r24, r28
    567c:	01 96       	adiw	r24, 0x01	; 1
    567e:	0e 94 de 0e 	call	0x1dbc	; 0x1dbc <progShowText(String, unsigned int, int, int, int, unsigned char)>
    5682:	d3 cf       	rjmp	.-90     	; 0x562a <SunAlwaysShinesOnTV()+0x11c>
    5684:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5688:	8c 01       	movw	r16, r24
    568a:	66 ed       	ldi	r22, 0xD6	; 214
    568c:	72 e0       	ldi	r23, 0x02	; 2
    568e:	ce 01       	movw	r24, r28
    5690:	01 96       	adiw	r24, 0x01	; 1
    5692:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5696:	48 e0       	ldi	r20, 0x08	; 8
    5698:	e4 2e       	mov	r14, r20
    569a:	2d e0       	ldi	r18, 0x0D	; 13
    569c:	30 e0       	ldi	r19, 0x00	; 0
    569e:	46 e0       	ldi	r20, 0x06	; 6
    56a0:	50 e0       	ldi	r21, 0x00	; 0
    56a2:	e9 cf       	rjmp	.-46     	; 0x5676 <SunAlwaysShinesOnTV()+0x168>
    56a4:	21 e0       	ldi	r18, 0x01	; 1
    56a6:	4c e6       	ldi	r20, 0x6C	; 108
    56a8:	57 e0       	ldi	r21, 0x07	; 7
    56aa:	6a e0       	ldi	r22, 0x0A	; 10
    56ac:	8d e0       	ldi	r24, 0x0D	; 13
    56ae:	94 e3       	ldi	r25, 0x34	; 52
    56b0:	0e 94 62 0a 	call	0x14c4	; 0x14c4 <progCircles(unsigned int, unsigned char, unsigned int, bool)>
    56b4:	be cf       	rjmp	.-132    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    56b6:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    56ba:	8c 01       	movw	r16, r24
    56bc:	69 ed       	ldi	r22, 0xD9	; 217
    56be:	72 e0       	ldi	r23, 0x02	; 2
    56c0:	ce 01       	movw	r24, r28
    56c2:	01 96       	adiw	r24, 0x01	; 1
    56c4:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    56c8:	3c e0       	ldi	r19, 0x0C	; 12
    56ca:	e3 2e       	mov	r14, r19
    56cc:	2d e0       	ldi	r18, 0x0D	; 13
    56ce:	30 e0       	ldi	r19, 0x00	; 0
    56d0:	50 e0       	ldi	r21, 0x00	; 0
    56d2:	40 e0       	ldi	r20, 0x00	; 0
    56d4:	6c e6       	ldi	r22, 0x6C	; 108
    56d6:	77 e0       	ldi	r23, 0x07	; 7
    56d8:	d0 cf       	rjmp	.-96     	; 0x567a <SunAlwaysShinesOnTV()+0x16c>
    56da:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    56de:	8c 01       	movw	r16, r24
    56e0:	66 ed       	ldi	r22, 0xD6	; 214
    56e2:	72 e0       	ldi	r23, 0x02	; 2
    56e4:	ce 01       	movw	r24, r28
    56e6:	01 96       	adiw	r24, 0x01	; 1
    56e8:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    56ec:	2e e0       	ldi	r18, 0x0E	; 14
    56ee:	e2 2e       	mov	r14, r18
    56f0:	2d e0       	ldi	r18, 0x0D	; 13
    56f2:	30 e0       	ldi	r19, 0x00	; 0
    56f4:	46 e0       	ldi	r20, 0x06	; 6
    56f6:	50 e0       	ldi	r21, 0x00	; 0
    56f8:	ed cf       	rjmp	.-38     	; 0x56d4 <SunAlwaysShinesOnTV()+0x1c6>
    56fa:	20 e0       	ldi	r18, 0x00	; 0
    56fc:	4c e6       	ldi	r20, 0x6C	; 108
    56fe:	57 e0       	ldi	r21, 0x07	; 7
    5700:	60 e1       	ldi	r22, 0x10	; 16
    5702:	d4 cf       	rjmp	.-88     	; 0x56ac <SunAlwaysShinesOnTV()+0x19e>
    5704:	90 ed       	ldi	r25, 0xD0	; 208
    5706:	e9 2e       	mov	r14, r25
    5708:	97 e0       	ldi	r25, 0x07	; 7
    570a:	f9 2e       	mov	r15, r25
    570c:	04 e6       	ldi	r16, 0x64	; 100
    570e:	21 e0       	ldi	r18, 0x01	; 1
    5710:	42 e1       	ldi	r20, 0x12	; 18
    5712:	61 e0       	ldi	r22, 0x01	; 1
    5714:	89 e7       	ldi	r24, 0x79	; 121
    5716:	9b e3       	ldi	r25, 0x3B	; 59
    5718:	0e 94 d8 06 	call	0xdb0	; 0xdb0 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    571c:	8a cf       	rjmp	.-236    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    571e:	4b ed       	ldi	r20, 0xDB	; 219
    5720:	51 e0       	ldi	r21, 0x01	; 1
    5722:	64 e1       	ldi	r22, 0x14	; 20
    5724:	83 ec       	ldi	r24, 0xC3	; 195
    5726:	9d e1       	ldi	r25, 0x1D	; 29
    5728:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    572c:	82 cf       	rjmp	.-252    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    572e:	20 e0       	ldi	r18, 0x00	; 0
    5730:	4b ed       	ldi	r20, 0xDB	; 219
    5732:	51 e0       	ldi	r21, 0x01	; 1
    5734:	66 e1       	ldi	r22, 0x16	; 22
    5736:	89 e7       	ldi	r24, 0x79	; 121
    5738:	9b e3       	ldi	r25, 0x3B	; 59
    573a:	0e 94 ec 0a 	call	0x15d8	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>
    573e:	79 cf       	rjmp	.-270    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    5740:	48 e8       	ldi	r20, 0x88	; 136
    5742:	53 e1       	ldi	r21, 0x13	; 19
    5744:	68 e1       	ldi	r22, 0x18	; 24
    5746:	8b e0       	ldi	r24, 0x0B	; 11
    5748:	97 e7       	ldi	r25, 0x77	; 119
    574a:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    574e:	71 cf       	rjmp	.-286    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    5750:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5754:	8c 01       	movw	r16, r24
    5756:	60 ed       	ldi	r22, 0xD0	; 208
    5758:	72 e0       	ldi	r23, 0x02	; 2
    575a:	ce 01       	movw	r24, r28
    575c:	01 96       	adiw	r24, 0x01	; 1
    575e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5762:	8a e1       	ldi	r24, 0x1A	; 26
    5764:	e8 2e       	mov	r14, r24
    5766:	83 cf       	rjmp	.-250    	; 0x566e <SunAlwaysShinesOnTV()+0x160>
    5768:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    576c:	8c 01       	movw	r16, r24
    576e:	66 ed       	ldi	r22, 0xD6	; 214
    5770:	72 e0       	ldi	r23, 0x02	; 2
    5772:	ce 01       	movw	r24, r28
    5774:	01 96       	adiw	r24, 0x01	; 1
    5776:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    577a:	bc e1       	ldi	r27, 0x1C	; 28
    577c:	eb 2e       	mov	r14, r27
    577e:	8d cf       	rjmp	.-230    	; 0x569a <SunAlwaysShinesOnTV()+0x18c>
    5780:	ee 24       	eor	r14, r14
    5782:	ea 94       	dec	r14
    5784:	f1 2c       	mov	r15, r1
    5786:	0f ef       	ldi	r16, 0xFF	; 255
    5788:	10 e0       	ldi	r17, 0x00	; 0
    578a:	2f ef       	ldi	r18, 0xFF	; 255
    578c:	30 e0       	ldi	r19, 0x00	; 0
    578e:	4c e2       	ldi	r20, 0x2C	; 44
    5790:	51 e0       	ldi	r21, 0x01	; 1
    5792:	6e e1       	ldi	r22, 0x1E	; 30
    5794:	89 e6       	ldi	r24, 0x69	; 105
    5796:	94 e1       	ldi	r25, 0x14	; 20
    5798:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    579c:	4a cf       	rjmp	.-364    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    579e:	60 e2       	ldi	r22, 0x20	; 32
    57a0:	8d e4       	ldi	r24, 0x4D	; 77
    57a2:	99 e0       	ldi	r25, 0x09	; 9
    57a4:	56 cf       	rjmp	.-340    	; 0x5652 <SunAlwaysShinesOnTV()+0x144>
    57a6:	42 e2       	ldi	r20, 0x22	; 34
    57a8:	6b ed       	ldi	r22, 0xDB	; 219
    57aa:	71 e0       	ldi	r23, 0x01	; 1
    57ac:	8d e0       	ldi	r24, 0x0D	; 13
    57ae:	94 e3       	ldi	r25, 0x34	; 52
    57b0:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    57b4:	3e cf       	rjmp	.-388    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    57b6:	ee 24       	eor	r14, r14
    57b8:	ea 94       	dec	r14
    57ba:	f1 2c       	mov	r15, r1
    57bc:	0f ef       	ldi	r16, 0xFF	; 255
    57be:	10 e0       	ldi	r17, 0x00	; 0
    57c0:	2f ef       	ldi	r18, 0xFF	; 255
    57c2:	30 e0       	ldi	r19, 0x00	; 0
    57c4:	4b e4       	ldi	r20, 0x4B	; 75
    57c6:	50 e0       	ldi	r21, 0x00	; 0
    57c8:	64 e2       	ldi	r22, 0x24	; 36
    57ca:	88 ed       	ldi	r24, 0xD8	; 216
    57cc:	9e e0       	ldi	r25, 0x0E	; 14
    57ce:	e4 cf       	rjmp	.-56     	; 0x5798 <SunAlwaysShinesOnTV()+0x28a>
    57d0:	4b ed       	ldi	r20, 0xDB	; 219
    57d2:	51 e0       	ldi	r21, 0x01	; 1
    57d4:	66 e2       	ldi	r22, 0x26	; 38
    57d6:	88 ed       	ldi	r24, 0xD8	; 216
    57d8:	9e e0       	ldi	r25, 0x0E	; 14
    57da:	a6 cf       	rjmp	.-180    	; 0x5728 <SunAlwaysShinesOnTV()+0x21a>
    57dc:	20 e0       	ldi	r18, 0x00	; 0
    57de:	4b ed       	ldi	r20, 0xDB	; 219
    57e0:	51 e0       	ldi	r21, 0x01	; 1
    57e2:	68 e2       	ldi	r22, 0x28	; 40
    57e4:	89 ec       	ldi	r24, 0xC9	; 201
    57e6:	9d e1       	ldi	r25, 0x1D	; 29
    57e8:	a8 cf       	rjmp	.-176    	; 0x573a <SunAlwaysShinesOnTV()+0x22c>
    57ea:	48 e8       	ldi	r20, 0x88	; 136
    57ec:	53 e1       	ldi	r21, 0x13	; 19
    57ee:	6a e2       	ldi	r22, 0x2A	; 42
    57f0:	aa cf       	rjmp	.-172    	; 0x5746 <SunAlwaysShinesOnTV()+0x238>
    57f2:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    57f6:	8c 01       	movw	r16, r24
    57f8:	60 ed       	ldi	r22, 0xD0	; 208
    57fa:	72 e0       	ldi	r23, 0x02	; 2
    57fc:	ce 01       	movw	r24, r28
    57fe:	01 96       	adiw	r24, 0x01	; 1
    5800:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5804:	ec e2       	ldi	r30, 0x2C	; 44
    5806:	ee 2e       	mov	r14, r30
    5808:	32 cf       	rjmp	.-412    	; 0x566e <SunAlwaysShinesOnTV()+0x160>
    580a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    580e:	8c 01       	movw	r16, r24
    5810:	66 ed       	ldi	r22, 0xD6	; 214
    5812:	72 e0       	ldi	r23, 0x02	; 2
    5814:	ce 01       	movw	r24, r28
    5816:	01 96       	adiw	r24, 0x01	; 1
    5818:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    581c:	7e e2       	ldi	r23, 0x2E	; 46
    581e:	e7 2e       	mov	r14, r23
    5820:	3c cf       	rjmp	.-392    	; 0x569a <SunAlwaysShinesOnTV()+0x18c>
    5822:	ee 24       	eor	r14, r14
    5824:	ea 94       	dec	r14
    5826:	f1 2c       	mov	r15, r1
    5828:	0f ef       	ldi	r16, 0xFF	; 255
    582a:	10 e0       	ldi	r17, 0x00	; 0
    582c:	2f ef       	ldi	r18, 0xFF	; 255
    582e:	30 e0       	ldi	r19, 0x00	; 0
    5830:	4c e2       	ldi	r20, 0x2C	; 44
    5832:	51 e0       	ldi	r21, 0x01	; 1
    5834:	60 e3       	ldi	r22, 0x30	; 48
    5836:	86 e7       	ldi	r24, 0x76	; 118
    5838:	94 e1       	ldi	r25, 0x14	; 20
    583a:	ae cf       	rjmp	.-164    	; 0x5798 <SunAlwaysShinesOnTV()+0x28a>
    583c:	62 e3       	ldi	r22, 0x32	; 50
    583e:	b0 cf       	rjmp	.-160    	; 0x57a0 <SunAlwaysShinesOnTV()+0x292>
    5840:	44 e3       	ldi	r20, 0x34	; 52
    5842:	6b ed       	ldi	r22, 0xDB	; 219
    5844:	71 e0       	ldi	r23, 0x01	; 1
    5846:	85 e1       	ldi	r24, 0x15	; 21
    5848:	94 e3       	ldi	r25, 0x34	; 52
    584a:	b2 cf       	rjmp	.-156    	; 0x57b0 <SunAlwaysShinesOnTV()+0x2a2>
    584c:	ee 24       	eor	r14, r14
    584e:	ea 94       	dec	r14
    5850:	f1 2c       	mov	r15, r1
    5852:	0f ef       	ldi	r16, 0xFF	; 255
    5854:	10 e0       	ldi	r17, 0x00	; 0
    5856:	2f ef       	ldi	r18, 0xFF	; 255
    5858:	30 e0       	ldi	r19, 0x00	; 0
    585a:	4b e4       	ldi	r20, 0x4B	; 75
    585c:	50 e0       	ldi	r21, 0x00	; 0
    585e:	66 e3       	ldi	r22, 0x36	; 54
    5860:	b4 cf       	rjmp	.-152    	; 0x57ca <SunAlwaysShinesOnTV()+0x2bc>
    5862:	4b ed       	ldi	r20, 0xDB	; 219
    5864:	51 e0       	ldi	r21, 0x01	; 1
    5866:	68 e3       	ldi	r22, 0x38	; 56
    5868:	b6 cf       	rjmp	.-148    	; 0x57d6 <SunAlwaysShinesOnTV()+0x2c8>
    586a:	6a e3       	ldi	r22, 0x3A	; 58
    586c:	81 ea       	ldi	r24, 0xA1	; 161
    586e:	9c e2       	ldi	r25, 0x2C	; 44
    5870:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <progMatrixScanner(unsigned int, unsigned char)>
    5874:	de ce       	rjmp	.-580    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>
    5876:	40 ed       	ldi	r20, 0xD0	; 208
    5878:	e4 2e       	mov	r14, r20
    587a:	47 e0       	ldi	r20, 0x07	; 7
    587c:	f4 2e       	mov	r15, r20
    587e:	04 e6       	ldi	r16, 0x64	; 100
    5880:	21 e0       	ldi	r18, 0x01	; 1
    5882:	4c e3       	ldi	r20, 0x3C	; 60
    5884:	61 e0       	ldi	r22, 0x01	; 1
    5886:	8d e0       	ldi	r24, 0x0D	; 13
    5888:	94 e3       	ldi	r25, 0x34	; 52
    588a:	46 cf       	rjmp	.-372    	; 0x5718 <SunAlwaysShinesOnTV()+0x20a>
    588c:	ee 24       	eor	r14, r14
    588e:	ea 94       	dec	r14
    5890:	f1 2c       	mov	r15, r1
    5892:	0f ef       	ldi	r16, 0xFF	; 255
    5894:	10 e0       	ldi	r17, 0x00	; 0
    5896:	2f ef       	ldi	r18, 0xFF	; 255
    5898:	30 e0       	ldi	r19, 0x00	; 0
    589a:	42 e3       	ldi	r20, 0x32	; 50
    589c:	50 e0       	ldi	r21, 0x00	; 0
    589e:	6e e3       	ldi	r22, 0x3E	; 62
    58a0:	8c e6       	ldi	r24, 0x6C	; 108
    58a2:	97 e0       	ldi	r25, 0x07	; 7
    58a4:	79 cf       	rjmp	.-270    	; 0x5798 <SunAlwaysShinesOnTV()+0x28a>
    58a6:	46 eb       	ldi	r20, 0xB6	; 182
    58a8:	53 e0       	ldi	r21, 0x03	; 3
    58aa:	60 e4       	ldi	r22, 0x40	; 64
    58ac:	94 cf       	rjmp	.-216    	; 0x57d6 <SunAlwaysShinesOnTV()+0x2c8>
    58ae:	42 e4       	ldi	r20, 0x42	; 66
    58b0:	6b ed       	ldi	r22, 0xDB	; 219
    58b2:	71 e0       	ldi	r23, 0x01	; 1
    58b4:	82 e2       	ldi	r24, 0x22	; 34
    58b6:	9b e0       	ldi	r25, 0x0B	; 11
    58b8:	7b cf       	rjmp	.-266    	; 0x57b0 <SunAlwaysShinesOnTV()+0x2a2>
    58ba:	ee 24       	eor	r14, r14
    58bc:	ea 94       	dec	r14
    58be:	f1 2c       	mov	r15, r1
    58c0:	0f ef       	ldi	r16, 0xFF	; 255
    58c2:	10 e0       	ldi	r17, 0x00	; 0
    58c4:	2f ef       	ldi	r18, 0xFF	; 255
    58c6:	30 e0       	ldi	r19, 0x00	; 0
    58c8:	42 e3       	ldi	r20, 0x32	; 50
    58ca:	50 e0       	ldi	r21, 0x00	; 0
    58cc:	64 e4       	ldi	r22, 0x44	; 68
    58ce:	86 eb       	ldi	r24, 0xB6	; 182
    58d0:	93 e0       	ldi	r25, 0x03	; 3
    58d2:	62 cf       	rjmp	.-316    	; 0x5798 <SunAlwaysShinesOnTV()+0x28a>
    58d4:	46 e4       	ldi	r20, 0x46	; 70
    58d6:	6b ed       	ldi	r22, 0xDB	; 219
    58d8:	71 e0       	ldi	r23, 0x01	; 1
    58da:	8b ee       	ldi	r24, 0xEB	; 235
    58dc:	98 e2       	ldi	r25, 0x28	; 40
    58de:	68 cf       	rjmp	.-304    	; 0x57b0 <SunAlwaysShinesOnTV()+0x2a2>
    58e0:	ee 24       	eor	r14, r14
    58e2:	ea 94       	dec	r14
    58e4:	f1 2c       	mov	r15, r1
    58e6:	0f ef       	ldi	r16, 0xFF	; 255
    58e8:	10 e0       	ldi	r17, 0x00	; 0
    58ea:	2f ef       	ldi	r18, 0xFF	; 255
    58ec:	30 e0       	ldi	r19, 0x00	; 0
    58ee:	42 e3       	ldi	r20, 0x32	; 50
    58f0:	50 e0       	ldi	r21, 0x00	; 0
    58f2:	68 e4       	ldi	r22, 0x48	; 72
    58f4:	ec cf       	rjmp	.-40     	; 0x58ce <SunAlwaysShinesOnTV()+0x3c0>
    58f6:	4a e4       	ldi	r20, 0x4A	; 74
    58f8:	6b ed       	ldi	r22, 0xDB	; 219
    58fa:	71 e0       	ldi	r23, 0x01	; 1
    58fc:	8e ec       	ldi	r24, 0xCE	; 206
    58fe:	97 e3       	ldi	r25, 0x37	; 55
    5900:	57 cf       	rjmp	.-338    	; 0x57b0 <SunAlwaysShinesOnTV()+0x2a2>
    5902:	ee 24       	eor	r14, r14
    5904:	ea 94       	dec	r14
    5906:	f1 2c       	mov	r15, r1
    5908:	0f ef       	ldi	r16, 0xFF	; 255
    590a:	10 e0       	ldi	r17, 0x00	; 0
    590c:	2f ef       	ldi	r18, 0xFF	; 255
    590e:	30 e0       	ldi	r19, 0x00	; 0
    5910:	42 e3       	ldi	r20, 0x32	; 50
    5912:	50 e0       	ldi	r21, 0x00	; 0
    5914:	6c e4       	ldi	r22, 0x4C	; 76
    5916:	db cf       	rjmp	.-74     	; 0x58ce <SunAlwaysShinesOnTV()+0x3c0>
    5918:	64 e6       	ldi	r22, 0x64	; 100
    591a:	83 ec       	ldi	r24, 0xC3	; 195
    591c:	9d e1       	ldi	r25, 0x1D	; 29
    591e:	99 ce       	rjmp	.-718    	; 0x5652 <SunAlwaysShinesOnTV()+0x144>
    5920:	60 e0       	ldi	r22, 0x00	; 0
    5922:	8c ec       	ldi	r24, 0xCC	; 204
    5924:	90 e1       	ldi	r25, 0x10	; 16
    5926:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    592a:	80 e0       	ldi	r24, 0x00	; 0
    592c:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    5930:	80 ce       	rjmp	.-768    	; 0x5632 <SunAlwaysShinesOnTV()+0x124>

00005932 <peopleArePeople()>:
    5932:	ef 92       	push	r14
    5934:	ff 92       	push	r15
    5936:	0f 93       	push	r16
    5938:	1f 93       	push	r17
    593a:	cf 93       	push	r28
    593c:	df 93       	push	r29
    593e:	00 d0       	rcall	.+0      	; 0x5940 <peopleArePeople()+0xe>
    5940:	00 d0       	rcall	.+0      	; 0x5942 <peopleArePeople()+0x10>
    5942:	00 d0       	rcall	.+0      	; 0x5944 <peopleArePeople()+0x12>
    5944:	1f 92       	push	r1
    5946:	cd b7       	in	r28, 0x3d	; 61
    5948:	de b7       	in	r29, 0x3e	; 62
    594a:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    594e:	8b 31       	cpi	r24, 0x1B	; 27
    5950:	09 f4       	brne	.+2      	; 0x5954 <peopleArePeople()+0x22>
    5952:	9e c0       	rjmp	.+316    	; 0x5a90 <peopleArePeople()+0x15e>
    5954:	58 f5       	brcc	.+86     	; 0x59ac <peopleArePeople()+0x7a>
    5956:	8a 30       	cpi	r24, 0x0A	; 10
    5958:	09 f4       	brne	.+2      	; 0x595c <peopleArePeople()+0x2a>
    595a:	7f c0       	rjmp	.+254    	; 0x5a5a <peopleArePeople()+0x128>
    595c:	70 f4       	brcc	.+28     	; 0x597a <peopleArePeople()+0x48>
    595e:	82 30       	cpi	r24, 0x02	; 2
    5960:	09 f4       	brne	.+2      	; 0x5964 <peopleArePeople()+0x32>
    5962:	5d c0       	rjmp	.+186    	; 0x5a1e <peopleArePeople()+0xec>
    5964:	85 30       	cpi	r24, 0x05	; 5
    5966:	09 f4       	brne	.+2      	; 0x596a <peopleArePeople()+0x38>
    5968:	72 c0       	rjmp	.+228    	; 0x5a4e <peopleArePeople()+0x11c>
    596a:	81 11       	cpse	r24, r1
    596c:	3d c0       	rjmp	.+122    	; 0x59e8 <peopleArePeople()+0xb6>
    596e:	62 e0       	ldi	r22, 0x02	; 2
    5970:	80 e4       	ldi	r24, 0x40	; 64
    5972:	9f e1       	ldi	r25, 0x1F	; 31
    5974:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    5978:	37 c0       	rjmp	.+110    	; 0x59e8 <peopleArePeople()+0xb6>
    597a:	84 31       	cpi	r24, 0x14	; 20
    597c:	09 f4       	brne	.+2      	; 0x5980 <peopleArePeople()+0x4e>
    597e:	75 c0       	rjmp	.+234    	; 0x5a6a <peopleArePeople()+0x138>
    5980:	89 31       	cpi	r24, 0x19	; 25
    5982:	09 f4       	brne	.+2      	; 0x5986 <peopleArePeople()+0x54>
    5984:	78 c0       	rjmp	.+240    	; 0x5a76 <peopleArePeople()+0x144>
    5986:	8f 30       	cpi	r24, 0x0F	; 15
    5988:	79 f5       	brne	.+94     	; 0x59e8 <peopleArePeople()+0xb6>
    598a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    598e:	7c 01       	movw	r14, r24
    5990:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5994:	8c 01       	movw	r16, r24
    5996:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    599a:	9c 01       	movw	r18, r24
    599c:	42 e3       	ldi	r20, 0x32	; 50
    599e:	50 e0       	ldi	r21, 0x00	; 0
    59a0:	64 e1       	ldi	r22, 0x14	; 20
    59a2:	82 ee       	ldi	r24, 0xE2	; 226
    59a4:	94 e0       	ldi	r25, 0x04	; 4
    59a6:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    59aa:	1e c0       	rjmp	.+60     	; 0x59e8 <peopleArePeople()+0xb6>
    59ac:	8d 32       	cpi	r24, 0x2D	; 45
    59ae:	09 f4       	brne	.+2      	; 0x59b2 <peopleArePeople()+0x80>
    59b0:	82 c0       	rjmp	.+260    	; 0x5ab6 <peopleArePeople()+0x184>
    59b2:	98 f4       	brcc	.+38     	; 0x59da <peopleArePeople()+0xa8>
    59b4:	83 32       	cpi	r24, 0x23	; 35
    59b6:	09 f4       	brne	.+2      	; 0x59ba <peopleArePeople()+0x88>
    59b8:	6f c0       	rjmp	.+222    	; 0x5a98 <peopleArePeople()+0x166>
    59ba:	88 32       	cpi	r24, 0x28	; 40
    59bc:	09 f4       	brne	.+2      	; 0x59c0 <peopleArePeople()+0x8e>
    59be:	74 c0       	rjmp	.+232    	; 0x5aa8 <peopleArePeople()+0x176>
    59c0:	8e 31       	cpi	r24, 0x1E	; 30
    59c2:	91 f4       	brne	.+36     	; 0x59e8 <peopleArePeople()+0xb6>
    59c4:	ee 24       	eor	r14, r14
    59c6:	ea 94       	dec	r14
    59c8:	f1 2c       	mov	r15, r1
    59ca:	0f ef       	ldi	r16, 0xFF	; 255
    59cc:	10 e0       	ldi	r17, 0x00	; 0
    59ce:	2f ef       	ldi	r18, 0xFF	; 255
    59d0:	30 e0       	ldi	r19, 0x00	; 0
    59d2:	42 e3       	ldi	r20, 0x32	; 50
    59d4:	50 e0       	ldi	r21, 0x00	; 0
    59d6:	63 e2       	ldi	r22, 0x23	; 35
    59d8:	58 c0       	rjmp	.+176    	; 0x5a8a <peopleArePeople()+0x158>
    59da:	87 33       	cpi	r24, 0x37	; 55
    59dc:	09 f4       	brne	.+2      	; 0x59e0 <peopleArePeople()+0xae>
    59de:	75 c0       	rjmp	.+234    	; 0x5aca <peopleArePeople()+0x198>
    59e0:	80 f4       	brcc	.+32     	; 0x5a02 <peopleArePeople()+0xd0>
    59e2:	82 33       	cpi	r24, 0x32	; 50
    59e4:	09 f4       	brne	.+2      	; 0x59e8 <peopleArePeople()+0xb6>
    59e6:	6d c0       	rjmp	.+218    	; 0x5ac2 <peopleArePeople()+0x190>
    59e8:	27 96       	adiw	r28, 0x07	; 7
    59ea:	0f b6       	in	r0, 0x3f	; 63
    59ec:	f8 94       	cli
    59ee:	de bf       	out	0x3e, r29	; 62
    59f0:	0f be       	out	0x3f, r0	; 63
    59f2:	cd bf       	out	0x3d, r28	; 61
    59f4:	df 91       	pop	r29
    59f6:	cf 91       	pop	r28
    59f8:	1f 91       	pop	r17
    59fa:	0f 91       	pop	r16
    59fc:	ff 90       	pop	r15
    59fe:	ef 90       	pop	r14
    5a00:	08 95       	ret
    5a02:	8c 33       	cpi	r24, 0x3C	; 60
    5a04:	09 f4       	brne	.+2      	; 0x5a08 <peopleArePeople()+0xd6>
    5a06:	69 c0       	rjmp	.+210    	; 0x5ada <peopleArePeople()+0x1a8>
    5a08:	84 36       	cpi	r24, 0x64	; 100
    5a0a:	71 f7       	brne	.-36     	; 0x59e8 <peopleArePeople()+0xb6>
    5a0c:	60 e0       	ldi	r22, 0x00	; 0
    5a0e:	8c ec       	ldi	r24, 0xCC	; 204
    5a10:	90 e1       	ldi	r25, 0x10	; 16
    5a12:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    5a16:	80 e0       	ldi	r24, 0x00	; 0
    5a18:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    5a1c:	e5 cf       	rjmp	.-54     	; 0x59e8 <peopleArePeople()+0xb6>
    5a1e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5a22:	7c 01       	movw	r14, r24
    5a24:	6e ed       	ldi	r22, 0xDE	; 222
    5a26:	72 e0       	ldi	r23, 0x02	; 2
    5a28:	ce 01       	movw	r24, r28
    5a2a:	01 96       	adiw	r24, 0x01	; 1
    5a2c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5a30:	05 e0       	ldi	r16, 0x05	; 5
    5a32:	97 01       	movw	r18, r14
    5a34:	4a e5       	ldi	r20, 0x5A	; 90
    5a36:	50 e0       	ldi	r21, 0x00	; 0
    5a38:	66 ef       	ldi	r22, 0xF6	; 246
    5a3a:	74 e5       	ldi	r23, 0x54	; 84
    5a3c:	ce 01       	movw	r24, r28
    5a3e:	01 96       	adiw	r24, 0x01	; 1
    5a40:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    5a44:	ce 01       	movw	r24, r28
    5a46:	01 96       	adiw	r24, 0x01	; 1
    5a48:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    5a4c:	cd cf       	rjmp	.-102    	; 0x59e8 <peopleArePeople()+0xb6>
    5a4e:	6a e0       	ldi	r22, 0x0A	; 10
    5a50:	80 e1       	ldi	r24, 0x10	; 16
    5a52:	97 e2       	ldi	r25, 0x27	; 39
    5a54:	0e 94 94 17 	call	0x2f28	; 0x2f28 <progMatrixVertical(unsigned int, unsigned char)>
    5a58:	c7 cf       	rjmp	.-114    	; 0x59e8 <peopleArePeople()+0xb6>
    5a5a:	4f e0       	ldi	r20, 0x0F	; 15
    5a5c:	60 ed       	ldi	r22, 0xD0	; 208
    5a5e:	77 e0       	ldi	r23, 0x07	; 7
    5a60:	82 e9       	ldi	r24, 0x92	; 146
    5a62:	9b e3       	ldi	r25, 0x3B	; 59
    5a64:	0e 94 ef 08 	call	0x11de	; 0x11de <progStern(unsigned int, int, unsigned char)>
    5a68:	bf cf       	rjmp	.-130    	; 0x59e8 <peopleArePeople()+0xb6>
    5a6a:	69 e1       	ldi	r22, 0x19	; 25
    5a6c:	8e eb       	ldi	r24, 0xBE	; 190
    5a6e:	9a e0       	ldi	r25, 0x0A	; 10
    5a70:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    5a74:	b9 cf       	rjmp	.-142    	; 0x59e8 <peopleArePeople()+0xb6>
    5a76:	ee 24       	eor	r14, r14
    5a78:	ea 94       	dec	r14
    5a7a:	f1 2c       	mov	r15, r1
    5a7c:	0f ef       	ldi	r16, 0xFF	; 255
    5a7e:	10 e0       	ldi	r17, 0x00	; 0
    5a80:	2f ef       	ldi	r18, 0xFF	; 255
    5a82:	30 e0       	ldi	r19, 0x00	; 0
    5a84:	46 e9       	ldi	r20, 0x96	; 150
    5a86:	50 e0       	ldi	r21, 0x00	; 0
    5a88:	6b e1       	ldi	r22, 0x1B	; 27
    5a8a:	8e ee       	ldi	r24, 0xEE	; 238
    5a8c:	92 e0       	ldi	r25, 0x02	; 2
    5a8e:	8b cf       	rjmp	.-234    	; 0x59a6 <peopleArePeople()+0x74>
    5a90:	6e e1       	ldi	r22, 0x1E	; 30
    5a92:	82 ee       	ldi	r24, 0xE2	; 226
    5a94:	94 e0       	ldi	r25, 0x04	; 4
    5a96:	6e cf       	rjmp	.-292    	; 0x5974 <peopleArePeople()+0x42>
    5a98:	48 ee       	ldi	r20, 0xE8	; 232
    5a9a:	53 e0       	ldi	r21, 0x03	; 3
    5a9c:	68 e2       	ldi	r22, 0x28	; 40
    5a9e:	80 e8       	ldi	r24, 0x80	; 128
    5aa0:	9e e3       	ldi	r25, 0x3E	; 62
    5aa2:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <progCircles(unsigned int, unsigned char, unsigned int)>
    5aa6:	a0 cf       	rjmp	.-192    	; 0x59e8 <peopleArePeople()+0xb6>
    5aa8:	4d e2       	ldi	r20, 0x2D	; 45
    5aaa:	65 e0       	ldi	r22, 0x05	; 5
    5aac:	88 e9       	ldi	r24, 0x98	; 152
    5aae:	9a e3       	ldi	r25, 0x3A	; 58
    5ab0:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5ab4:	99 cf       	rjmp	.-206    	; 0x59e8 <peopleArePeople()+0xb6>
    5ab6:	62 e3       	ldi	r22, 0x32	; 50
    5ab8:	80 e1       	ldi	r24, 0x10	; 16
    5aba:	97 e2       	ldi	r25, 0x27	; 39
    5abc:	0e 94 9a 0c 	call	0x1934	; 0x1934 <progOutline(unsigned int, unsigned char)>
    5ac0:	93 cf       	rjmp	.-218    	; 0x59e8 <peopleArePeople()+0xb6>
    5ac2:	67 e3       	ldi	r22, 0x37	; 55
    5ac4:	80 e1       	ldi	r24, 0x10	; 16
    5ac6:	97 e2       	ldi	r25, 0x27	; 39
    5ac8:	d3 cf       	rjmp	.-90     	; 0x5a70 <peopleArePeople()+0x13e>
    5aca:	44 ef       	ldi	r20, 0xF4	; 244
    5acc:	51 e0       	ldi	r21, 0x01	; 1
    5ace:	6c e3       	ldi	r22, 0x3C	; 60
    5ad0:	88 e9       	ldi	r24, 0x98	; 152
    5ad2:	9a e3       	ldi	r25, 0x3A	; 58
    5ad4:	0e 94 96 0b 	call	0x172c	; 0x172c <progRandomLines(unsigned int, unsigned char, unsigned int)>
    5ad8:	87 cf       	rjmp	.-242    	; 0x59e8 <peopleArePeople()+0xb6>
    5ada:	49 ec       	ldi	r20, 0xC9	; 201
    5adc:	5d e1       	ldi	r21, 0x1D	; 29
    5ade:	67 e3       	ldi	r22, 0x37	; 55
    5ae0:	80 e6       	ldi	r24, 0x60	; 96
    5ae2:	9a ee       	ldi	r25, 0xEA	; 234
    5ae4:	0e 94 35 06 	call	0xc6a	; 0xc6a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    5ae8:	7f cf       	rjmp	.-258    	; 0x59e8 <peopleArePeople()+0xb6>

00005aea <enjoyTheSilence()>:
    5aea:	ef 92       	push	r14
    5aec:	ff 92       	push	r15
    5aee:	0f 93       	push	r16
    5af0:	1f 93       	push	r17
    5af2:	cf 93       	push	r28
    5af4:	df 93       	push	r29
    5af6:	00 d0       	rcall	.+0      	; 0x5af8 <enjoyTheSilence()+0xe>
    5af8:	00 d0       	rcall	.+0      	; 0x5afa <enjoyTheSilence()+0x10>
    5afa:	00 d0       	rcall	.+0      	; 0x5afc <enjoyTheSilence()+0x12>
    5afc:	1f 92       	push	r1
    5afe:	cd b7       	in	r28, 0x3d	; 61
    5b00:	de b7       	in	r29, 0x3e	; 62
    5b02:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    5b06:	86 34       	cpi	r24, 0x46	; 70
    5b08:	09 f4       	brne	.+2      	; 0x5b0c <enjoyTheSilence()+0x22>
    5b0a:	f3 c0       	rjmp	.+486    	; 0x5cf2 <enjoyTheSilence()+0x208>
    5b0c:	08 f0       	brcs	.+2      	; 0x5b10 <enjoyTheSilence()+0x26>
    5b0e:	55 c0       	rjmp	.+170    	; 0x5bba <enjoyTheSilence()+0xd0>
    5b10:	8e 31       	cpi	r24, 0x1E	; 30
    5b12:	09 f4       	brne	.+2      	; 0x5b16 <enjoyTheSilence()+0x2c>
    5b14:	c9 c0       	rjmp	.+402    	; 0x5ca8 <enjoyTheSilence()+0x1be>
    5b16:	38 f5       	brcc	.+78     	; 0x5b66 <enjoyTheSilence()+0x7c>
    5b18:	8a 30       	cpi	r24, 0x0A	; 10
    5b1a:	09 f4       	brne	.+2      	; 0x5b1e <enjoyTheSilence()+0x34>
    5b1c:	a9 c0       	rjmp	.+338    	; 0x5c70 <enjoyTheSilence()+0x186>
    5b1e:	98 f4       	brcc	.+38     	; 0x5b46 <enjoyTheSilence()+0x5c>
    5b20:	88 23       	and	r24, r24
    5b22:	09 f4       	brne	.+2      	; 0x5b26 <enjoyTheSilence()+0x3c>
    5b24:	86 c0       	rjmp	.+268    	; 0x5c32 <enjoyTheSilence()+0x148>
    5b26:	85 30       	cpi	r24, 0x05	; 5
    5b28:	09 f4       	brne	.+2      	; 0x5b2c <enjoyTheSilence()+0x42>
    5b2a:	9b c0       	rjmp	.+310    	; 0x5c62 <enjoyTheSilence()+0x178>
    5b2c:	27 96       	adiw	r28, 0x07	; 7
    5b2e:	0f b6       	in	r0, 0x3f	; 63
    5b30:	f8 94       	cli
    5b32:	de bf       	out	0x3e, r29	; 62
    5b34:	0f be       	out	0x3f, r0	; 63
    5b36:	cd bf       	out	0x3d, r28	; 61
    5b38:	df 91       	pop	r29
    5b3a:	cf 91       	pop	r28
    5b3c:	1f 91       	pop	r17
    5b3e:	0f 91       	pop	r16
    5b40:	ff 90       	pop	r15
    5b42:	ef 90       	pop	r14
    5b44:	08 95       	ret
    5b46:	84 31       	cpi	r24, 0x14	; 20
    5b48:	09 f4       	brne	.+2      	; 0x5b4c <enjoyTheSilence()+0x62>
    5b4a:	97 c0       	rjmp	.+302    	; 0x5c7a <enjoyTheSilence()+0x190>
    5b4c:	89 31       	cpi	r24, 0x19	; 25
    5b4e:	09 f4       	brne	.+2      	; 0x5b52 <enjoyTheSilence()+0x68>
    5b50:	a5 c0       	rjmp	.+330    	; 0x5c9c <enjoyTheSilence()+0x1b2>
    5b52:	8f 30       	cpi	r24, 0x0F	; 15
    5b54:	59 f7       	brne	.-42     	; 0x5b2c <enjoyTheSilence()+0x42>
    5b56:	4a e1       	ldi	r20, 0x1A	; 26
    5b58:	54 e0       	ldi	r21, 0x04	; 4
    5b5a:	64 e1       	ldi	r22, 0x14	; 20
    5b5c:	80 e3       	ldi	r24, 0x30	; 48
    5b5e:	91 e2       	ldi	r25, 0x21	; 33
    5b60:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5b64:	e3 cf       	rjmp	.-58     	; 0x5b2c <enjoyTheSilence()+0x42>
    5b66:	82 33       	cpi	r24, 0x32	; 50
    5b68:	09 f4       	brne	.+2      	; 0x5b6c <enjoyTheSilence()+0x82>
    5b6a:	ac c0       	rjmp	.+344    	; 0x5cc4 <enjoyTheSilence()+0x1da>
    5b6c:	78 f4       	brcc	.+30     	; 0x5b8c <enjoyTheSilence()+0xa2>
    5b6e:	88 32       	cpi	r24, 0x28	; 40
    5b70:	09 f4       	brne	.+2      	; 0x5b74 <enjoyTheSilence()+0x8a>
    5b72:	a0 c0       	rjmp	.+320    	; 0x5cb4 <enjoyTheSilence()+0x1ca>
    5b74:	8d 32       	cpi	r24, 0x2D	; 45
    5b76:	09 f4       	brne	.+2      	; 0x5b7a <enjoyTheSilence()+0x90>
    5b78:	a2 c0       	rjmp	.+324    	; 0x5cbe <enjoyTheSilence()+0x1d4>
    5b7a:	83 32       	cpi	r24, 0x23	; 35
    5b7c:	b9 f6       	brne	.-82     	; 0x5b2c <enjoyTheSilence()+0x42>
    5b7e:	48 e2       	ldi	r20, 0x28	; 40
    5b80:	65 e0       	ldi	r22, 0x05	; 5
    5b82:	88 e6       	ldi	r24, 0x68	; 104
    5b84:	92 e4       	ldi	r25, 0x42	; 66
    5b86:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5b8a:	d0 cf       	rjmp	.-96     	; 0x5b2c <enjoyTheSilence()+0x42>
    5b8c:	8c 33       	cpi	r24, 0x3C	; 60
    5b8e:	09 f4       	brne	.+2      	; 0x5b92 <enjoyTheSilence()+0xa8>
    5b90:	9d c0       	rjmp	.+314    	; 0x5ccc <enjoyTheSilence()+0x1e2>
    5b92:	81 34       	cpi	r24, 0x41	; 65
    5b94:	09 f4       	brne	.+2      	; 0x5b98 <enjoyTheSilence()+0xae>
    5b96:	aa c0       	rjmp	.+340    	; 0x5cec <enjoyTheSilence()+0x202>
    5b98:	87 33       	cpi	r24, 0x37	; 55
    5b9a:	41 f6       	brne	.-112    	; 0x5b2c <enjoyTheSilence()+0x42>
    5b9c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5ba0:	7c 01       	movw	r14, r24
    5ba2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5ba6:	8c 01       	movw	r16, r24
    5ba8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5bac:	9c 01       	movw	r18, r24
    5bae:	42 e3       	ldi	r20, 0x32	; 50
    5bb0:	50 e0       	ldi	r21, 0x00	; 0
    5bb2:	6c e3       	ldi	r22, 0x3C	; 60
    5bb4:	80 e3       	ldi	r24, 0x30	; 48
    5bb6:	91 e2       	ldi	r25, 0x21	; 33
    5bb8:	6e c0       	rjmp	.+220    	; 0x5c96 <enjoyTheSilence()+0x1ac>
    5bba:	89 36       	cpi	r24, 0x69	; 105
    5bbc:	09 f4       	brne	.+2      	; 0x5bc0 <enjoyTheSilence()+0xd6>
    5bbe:	c8 c0       	rjmp	.+400    	; 0x5d50 <enjoyTheSilence()+0x266>
    5bc0:	e8 f4       	brcc	.+58     	; 0x5bfc <enjoyTheSilence()+0x112>
    5bc2:	85 35       	cpi	r24, 0x55	; 85
    5bc4:	09 f4       	brne	.+2      	; 0x5bc8 <enjoyTheSilence()+0xde>
    5bc6:	9d c0       	rjmp	.+314    	; 0x5d02 <enjoyTheSilence()+0x218>
    5bc8:	60 f4       	brcc	.+24     	; 0x5be2 <enjoyTheSilence()+0xf8>
    5bca:	8b 34       	cpi	r24, 0x4B	; 75
    5bcc:	09 f4       	brne	.+2      	; 0x5bd0 <enjoyTheSilence()+0xe6>
    5bce:	94 c0       	rjmp	.+296    	; 0x5cf8 <enjoyTheSilence()+0x20e>
    5bd0:	4a e1       	ldi	r20, 0x1A	; 26
    5bd2:	54 e0       	ldi	r21, 0x04	; 4
    5bd4:	65 e5       	ldi	r22, 0x55	; 85
    5bd6:	80 35       	cpi	r24, 0x50	; 80
    5bd8:	09 f0       	breq	.+2      	; 0x5bdc <enjoyTheSilence()+0xf2>
    5bda:	a8 cf       	rjmp	.-176    	; 0x5b2c <enjoyTheSilence()+0x42>
    5bdc:	84 e3       	ldi	r24, 0x34	; 52
    5bde:	91 e2       	ldi	r25, 0x21	; 33
    5be0:	bf cf       	rjmp	.-130    	; 0x5b60 <enjoyTheSilence()+0x76>
    5be2:	8f 35       	cpi	r24, 0x5F	; 95
    5be4:	09 f4       	brne	.+2      	; 0x5be8 <enjoyTheSilence()+0xfe>
    5be6:	9c c0       	rjmp	.+312    	; 0x5d20 <enjoyTheSilence()+0x236>
    5be8:	84 36       	cpi	r24, 0x64	; 100
    5bea:	09 f4       	brne	.+2      	; 0x5bee <enjoyTheSilence()+0x104>
    5bec:	a6 c0       	rjmp	.+332    	; 0x5d3a <enjoyTheSilence()+0x250>
    5bee:	8a 35       	cpi	r24, 0x5A	; 90
    5bf0:	09 f0       	breq	.+2      	; 0x5bf4 <enjoyTheSilence()+0x10a>
    5bf2:	9c cf       	rjmp	.-200    	; 0x5b2c <enjoyTheSilence()+0x42>
    5bf4:	4a e1       	ldi	r20, 0x1A	; 26
    5bf6:	54 e0       	ldi	r21, 0x04	; 4
    5bf8:	6f e5       	ldi	r22, 0x5F	; 95
    5bfa:	f0 cf       	rjmp	.-32     	; 0x5bdc <enjoyTheSilence()+0xf2>
    5bfc:	8d 37       	cpi	r24, 0x7D	; 125
    5bfe:	09 f4       	brne	.+2      	; 0x5c02 <enjoyTheSilence()+0x118>
    5c00:	b1 c0       	rjmp	.+354    	; 0x5d64 <enjoyTheSilence()+0x27a>
    5c02:	58 f4       	brcc	.+22     	; 0x5c1a <enjoyTheSilence()+0x130>
    5c04:	83 37       	cpi	r24, 0x73	; 115
    5c06:	09 f4       	brne	.+2      	; 0x5c0a <enjoyTheSilence()+0x120>
    5c08:	a8 c0       	rjmp	.+336    	; 0x5d5a <enjoyTheSilence()+0x270>
    5c0a:	88 37       	cpi	r24, 0x78	; 120
    5c0c:	09 f4       	brne	.+2      	; 0x5c10 <enjoyTheSilence()+0x126>
    5c0e:	a8 c0       	rjmp	.+336    	; 0x5d60 <enjoyTheSilence()+0x276>
    5c10:	8e 36       	cpi	r24, 0x6E	; 110
    5c12:	09 f0       	breq	.+2      	; 0x5c16 <enjoyTheSilence()+0x12c>
    5c14:	8b cf       	rjmp	.-234    	; 0x5b2c <enjoyTheSilence()+0x42>
    5c16:	43 e7       	ldi	r20, 0x73	; 115
    5c18:	6a c0       	rjmp	.+212    	; 0x5cee <enjoyTheSilence()+0x204>
    5c1a:	87 38       	cpi	r24, 0x87	; 135
    5c1c:	09 f4       	brne	.+2      	; 0x5c20 <enjoyTheSilence()+0x136>
    5c1e:	a5 c0       	rjmp	.+330    	; 0x5d6a <enjoyTheSilence()+0x280>
    5c20:	88 3c       	cpi	r24, 0xC8	; 200
    5c22:	09 f4       	brne	.+2      	; 0x5c26 <enjoyTheSilence()+0x13c>
    5c24:	a6 c0       	rjmp	.+332    	; 0x5d72 <enjoyTheSilence()+0x288>
    5c26:	82 38       	cpi	r24, 0x82	; 130
    5c28:	09 f0       	breq	.+2      	; 0x5c2c <enjoyTheSilence()+0x142>
    5c2a:	80 cf       	rjmp	.-256    	; 0x5b2c <enjoyTheSilence()+0x42>
    5c2c:	47 e8       	ldi	r20, 0x87	; 135
    5c2e:	66 e0       	ldi	r22, 0x06	; 6
    5c30:	91 c0       	rjmp	.+290    	; 0x5d54 <enjoyTheSilence()+0x26a>
    5c32:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5c36:	7c 01       	movw	r14, r24
    5c38:	60 e0       	ldi	r22, 0x00	; 0
    5c3a:	73 e0       	ldi	r23, 0x03	; 3
    5c3c:	ce 01       	movw	r24, r28
    5c3e:	01 96       	adiw	r24, 0x01	; 1
    5c40:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5c44:	05 e0       	ldi	r16, 0x05	; 5
    5c46:	97 01       	movw	r18, r14
    5c48:	4a e5       	ldi	r20, 0x5A	; 90
    5c4a:	50 e0       	ldi	r21, 0x00	; 0
    5c4c:	60 e0       	ldi	r22, 0x00	; 0
    5c4e:	74 e5       	ldi	r23, 0x54	; 84
    5c50:	ce 01       	movw	r24, r28
    5c52:	01 96       	adiw	r24, 0x01	; 1
    5c54:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    5c58:	ce 01       	movw	r24, r28
    5c5a:	01 96       	adiw	r24, 0x01	; 1
    5c5c:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    5c60:	65 cf       	rjmp	.-310    	; 0x5b2c <enjoyTheSilence()+0x42>
    5c62:	4a e0       	ldi	r20, 0x0A	; 10
    5c64:	6b e0       	ldi	r22, 0x0B	; 11
    5c66:	81 ea       	ldi	r24, 0xA1	; 161
    5c68:	9d e2       	ldi	r25, 0x2D	; 45
    5c6a:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    5c6e:	5e cf       	rjmp	.-324    	; 0x5b2c <enjoyTheSilence()+0x42>
    5c70:	4f e0       	ldi	r20, 0x0F	; 15
    5c72:	63 e0       	ldi	r22, 0x03	; 3
    5c74:	80 e3       	ldi	r24, 0x30	; 48
    5c76:	91 e2       	ldi	r25, 0x21	; 33
    5c78:	f8 cf       	rjmp	.-16     	; 0x5c6a <enjoyTheSilence()+0x180>
    5c7a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5c7e:	7c 01       	movw	r14, r24
    5c80:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5c84:	8c 01       	movw	r16, r24
    5c86:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5c8a:	9c 01       	movw	r18, r24
    5c8c:	42 e3       	ldi	r20, 0x32	; 50
    5c8e:	50 e0       	ldi	r21, 0x00	; 0
    5c90:	69 e1       	ldi	r22, 0x19	; 25
    5c92:	8e e0       	ldi	r24, 0x0E	; 14
    5c94:	9f e1       	ldi	r25, 0x1F	; 31
    5c96:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    5c9a:	48 cf       	rjmp	.-368    	; 0x5b2c <enjoyTheSilence()+0x42>
    5c9c:	6e e1       	ldi	r22, 0x1E	; 30
    5c9e:	8d e0       	ldi	r24, 0x0D	; 13
    5ca0:	92 e0       	ldi	r25, 0x02	; 2
    5ca2:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    5ca6:	42 cf       	rjmp	.-380    	; 0x5b2c <enjoyTheSilence()+0x42>
    5ca8:	63 e2       	ldi	r22, 0x23	; 35
    5caa:	8d e4       	ldi	r24, 0x4D	; 77
    5cac:	98 e0       	ldi	r25, 0x08	; 8
    5cae:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    5cb2:	3c cf       	rjmp	.-392    	; 0x5b2c <enjoyTheSilence()+0x42>
    5cb4:	4d e2       	ldi	r20, 0x2D	; 45
    5cb6:	62 e0       	ldi	r22, 0x02	; 2
    5cb8:	84 e3       	ldi	r24, 0x34	; 52
    5cba:	91 e2       	ldi	r25, 0x21	; 33
    5cbc:	d6 cf       	rjmp	.-84     	; 0x5c6a <enjoyTheSilence()+0x180>
    5cbe:	42 e3       	ldi	r20, 0x32	; 50
    5cc0:	63 e0       	ldi	r22, 0x03	; 3
    5cc2:	fa cf       	rjmp	.-12     	; 0x5cb8 <enjoyTheSilence()+0x1ce>
    5cc4:	4a e1       	ldi	r20, 0x1A	; 26
    5cc6:	54 e0       	ldi	r21, 0x04	; 4
    5cc8:	67 e3       	ldi	r22, 0x37	; 55
    5cca:	48 cf       	rjmp	.-368    	; 0x5b5c <enjoyTheSilence()+0x72>
    5ccc:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5cd0:	7c 01       	movw	r14, r24
    5cd2:	62 e2       	ldi	r22, 0x22	; 34
    5cd4:	73 e0       	ldi	r23, 0x03	; 3
    5cd6:	ce 01       	movw	r24, r28
    5cd8:	01 96       	adiw	r24, 0x01	; 1
    5cda:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5cde:	01 e4       	ldi	r16, 0x41	; 65
    5ce0:	97 01       	movw	r18, r14
    5ce2:	49 e1       	ldi	r20, 0x19	; 25
    5ce4:	50 e0       	ldi	r21, 0x00	; 0
    5ce6:	6d e4       	ldi	r22, 0x4D	; 77
    5ce8:	78 e0       	ldi	r23, 0x08	; 8
    5cea:	b2 cf       	rjmp	.-156    	; 0x5c50 <enjoyTheSilence()+0x166>
    5cec:	46 e4       	ldi	r20, 0x46	; 70
    5cee:	62 e0       	ldi	r22, 0x02	; 2
    5cf0:	31 c0       	rjmp	.+98     	; 0x5d54 <enjoyTheSilence()+0x26a>
    5cf2:	4b e4       	ldi	r20, 0x4B	; 75
    5cf4:	64 e0       	ldi	r22, 0x04	; 4
    5cf6:	2e c0       	rjmp	.+92     	; 0x5d54 <enjoyTheSilence()+0x26a>
    5cf8:	40 e5       	ldi	r20, 0x50	; 80
    5cfa:	69 e0       	ldi	r22, 0x09	; 9
    5cfc:	8f e5       	ldi	r24, 0x5F	; 95
    5cfe:	92 e4       	ldi	r25, 0x42	; 66
    5d00:	b4 cf       	rjmp	.-152    	; 0x5c6a <enjoyTheSilence()+0x180>
    5d02:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5d06:	7c 01       	movw	r14, r24
    5d08:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5d0c:	8c 01       	movw	r16, r24
    5d0e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5d12:	9c 01       	movw	r18, r24
    5d14:	42 e3       	ldi	r20, 0x32	; 50
    5d16:	50 e0       	ldi	r21, 0x00	; 0
    5d18:	6a e5       	ldi	r22, 0x5A	; 90
    5d1a:	84 e3       	ldi	r24, 0x34	; 52
    5d1c:	91 e2       	ldi	r25, 0x21	; 33
    5d1e:	bb cf       	rjmp	.-138    	; 0x5c96 <enjoyTheSilence()+0x1ac>
    5d20:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5d24:	7c 01       	movw	r14, r24
    5d26:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5d2a:	8c 01       	movw	r16, r24
    5d2c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5d30:	9c 01       	movw	r18, r24
    5d32:	42 e3       	ldi	r20, 0x32	; 50
    5d34:	50 e0       	ldi	r21, 0x00	; 0
    5d36:	64 e6       	ldi	r22, 0x64	; 100
    5d38:	f0 cf       	rjmp	.-32     	; 0x5d1a <enjoyTheSilence()+0x230>
    5d3a:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5d3e:	7c 01       	movw	r14, r24
    5d40:	62 e2       	ldi	r22, 0x22	; 34
    5d42:	73 e0       	ldi	r23, 0x03	; 3
    5d44:	ce 01       	movw	r24, r28
    5d46:	01 96       	adiw	r24, 0x01	; 1
    5d48:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5d4c:	09 e6       	ldi	r16, 0x69	; 105
    5d4e:	c8 cf       	rjmp	.-112    	; 0x5ce0 <enjoyTheSilence()+0x1f6>
    5d50:	4e e6       	ldi	r20, 0x6E	; 110
    5d52:	61 e0       	ldi	r22, 0x01	; 1
    5d54:	8a e2       	ldi	r24, 0x2A	; 42
    5d56:	91 e2       	ldi	r25, 0x21	; 33
    5d58:	16 cf       	rjmp	.-468    	; 0x5b86 <enjoyTheSilence()+0x9c>
    5d5a:	48 e7       	ldi	r20, 0x78	; 120
    5d5c:	63 e0       	ldi	r22, 0x03	; 3
    5d5e:	fa cf       	rjmp	.-12     	; 0x5d54 <enjoyTheSilence()+0x26a>
    5d60:	4d e7       	ldi	r20, 0x7D	; 125
    5d62:	c8 cf       	rjmp	.-112    	; 0x5cf4 <enjoyTheSilence()+0x20a>
    5d64:	42 e8       	ldi	r20, 0x82	; 130
    5d66:	65 e0       	ldi	r22, 0x05	; 5
    5d68:	f5 cf       	rjmp	.-22     	; 0x5d54 <enjoyTheSilence()+0x26a>
    5d6a:	68 ec       	ldi	r22, 0xC8	; 200
    5d6c:	80 e5       	ldi	r24, 0x50	; 80
    5d6e:	93 ec       	ldi	r25, 0xC3	; 195
    5d70:	98 cf       	rjmp	.-208    	; 0x5ca2 <enjoyTheSilence()+0x1b8>
    5d72:	60 e0       	ldi	r22, 0x00	; 0
    5d74:	8c ec       	ldi	r24, 0xCC	; 204
    5d76:	90 e1       	ldi	r25, 0x10	; 16
    5d78:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    5d7c:	80 e0       	ldi	r24, 0x00	; 0
    5d7e:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    5d82:	d4 ce       	rjmp	.-600    	; 0x5b2c <enjoyTheSilence()+0x42>

00005d84 <sober()>:
    5d84:	ef 92       	push	r14
    5d86:	ff 92       	push	r15
    5d88:	0f 93       	push	r16
    5d8a:	1f 93       	push	r17
    5d8c:	cf 93       	push	r28
    5d8e:	df 93       	push	r29
    5d90:	00 d0       	rcall	.+0      	; 0x5d92 <sober()+0xe>
    5d92:	00 d0       	rcall	.+0      	; 0x5d94 <sober()+0x10>
    5d94:	00 d0       	rcall	.+0      	; 0x5d96 <sober()+0x12>
    5d96:	1f 92       	push	r1
    5d98:	cd b7       	in	r28, 0x3d	; 61
    5d9a:	de b7       	in	r29, 0x3e	; 62
    5d9c:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    5da0:	86 34       	cpi	r24, 0x46	; 70
    5da2:	09 f4       	brne	.+2      	; 0x5da6 <sober()+0x22>
    5da4:	f3 c0       	rjmp	.+486    	; 0x5f8c <sober()+0x208>
    5da6:	08 f0       	brcs	.+2      	; 0x5daa <sober()+0x26>
    5da8:	55 c0       	rjmp	.+170    	; 0x5e54 <sober()+0xd0>
    5daa:	8e 31       	cpi	r24, 0x1E	; 30
    5dac:	09 f4       	brne	.+2      	; 0x5db0 <sober()+0x2c>
    5dae:	c9 c0       	rjmp	.+402    	; 0x5f42 <sober()+0x1be>
    5db0:	38 f5       	brcc	.+78     	; 0x5e00 <sober()+0x7c>
    5db2:	8a 30       	cpi	r24, 0x0A	; 10
    5db4:	09 f4       	brne	.+2      	; 0x5db8 <sober()+0x34>
    5db6:	a9 c0       	rjmp	.+338    	; 0x5f0a <sober()+0x186>
    5db8:	98 f4       	brcc	.+38     	; 0x5de0 <sober()+0x5c>
    5dba:	88 23       	and	r24, r24
    5dbc:	09 f4       	brne	.+2      	; 0x5dc0 <sober()+0x3c>
    5dbe:	86 c0       	rjmp	.+268    	; 0x5ecc <sober()+0x148>
    5dc0:	85 30       	cpi	r24, 0x05	; 5
    5dc2:	09 f4       	brne	.+2      	; 0x5dc6 <sober()+0x42>
    5dc4:	9b c0       	rjmp	.+310    	; 0x5efc <sober()+0x178>
    5dc6:	27 96       	adiw	r28, 0x07	; 7
    5dc8:	0f b6       	in	r0, 0x3f	; 63
    5dca:	f8 94       	cli
    5dcc:	de bf       	out	0x3e, r29	; 62
    5dce:	0f be       	out	0x3f, r0	; 63
    5dd0:	cd bf       	out	0x3d, r28	; 61
    5dd2:	df 91       	pop	r29
    5dd4:	cf 91       	pop	r28
    5dd6:	1f 91       	pop	r17
    5dd8:	0f 91       	pop	r16
    5dda:	ff 90       	pop	r15
    5ddc:	ef 90       	pop	r14
    5dde:	08 95       	ret
    5de0:	84 31       	cpi	r24, 0x14	; 20
    5de2:	09 f4       	brne	.+2      	; 0x5de6 <sober()+0x62>
    5de4:	97 c0       	rjmp	.+302    	; 0x5f14 <sober()+0x190>
    5de6:	89 31       	cpi	r24, 0x19	; 25
    5de8:	09 f4       	brne	.+2      	; 0x5dec <sober()+0x68>
    5dea:	a5 c0       	rjmp	.+330    	; 0x5f36 <sober()+0x1b2>
    5dec:	8f 30       	cpi	r24, 0x0F	; 15
    5dee:	59 f7       	brne	.-42     	; 0x5dc6 <sober()+0x42>
    5df0:	4a e1       	ldi	r20, 0x1A	; 26
    5df2:	54 e0       	ldi	r21, 0x04	; 4
    5df4:	64 e1       	ldi	r22, 0x14	; 20
    5df6:	80 e3       	ldi	r24, 0x30	; 48
    5df8:	91 e2       	ldi	r25, 0x21	; 33
    5dfa:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5dfe:	e3 cf       	rjmp	.-58     	; 0x5dc6 <sober()+0x42>
    5e00:	82 33       	cpi	r24, 0x32	; 50
    5e02:	09 f4       	brne	.+2      	; 0x5e06 <sober()+0x82>
    5e04:	ac c0       	rjmp	.+344    	; 0x5f5e <sober()+0x1da>
    5e06:	78 f4       	brcc	.+30     	; 0x5e26 <sober()+0xa2>
    5e08:	88 32       	cpi	r24, 0x28	; 40
    5e0a:	09 f4       	brne	.+2      	; 0x5e0e <sober()+0x8a>
    5e0c:	a0 c0       	rjmp	.+320    	; 0x5f4e <sober()+0x1ca>
    5e0e:	8d 32       	cpi	r24, 0x2D	; 45
    5e10:	09 f4       	brne	.+2      	; 0x5e14 <sober()+0x90>
    5e12:	a2 c0       	rjmp	.+324    	; 0x5f58 <sober()+0x1d4>
    5e14:	83 32       	cpi	r24, 0x23	; 35
    5e16:	b9 f6       	brne	.-82     	; 0x5dc6 <sober()+0x42>
    5e18:	48 e2       	ldi	r20, 0x28	; 40
    5e1a:	65 e0       	ldi	r22, 0x05	; 5
    5e1c:	88 e6       	ldi	r24, 0x68	; 104
    5e1e:	92 e4       	ldi	r25, 0x42	; 66
    5e20:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5e24:	d0 cf       	rjmp	.-96     	; 0x5dc6 <sober()+0x42>
    5e26:	8c 33       	cpi	r24, 0x3C	; 60
    5e28:	09 f4       	brne	.+2      	; 0x5e2c <sober()+0xa8>
    5e2a:	9d c0       	rjmp	.+314    	; 0x5f66 <sober()+0x1e2>
    5e2c:	81 34       	cpi	r24, 0x41	; 65
    5e2e:	09 f4       	brne	.+2      	; 0x5e32 <sober()+0xae>
    5e30:	aa c0       	rjmp	.+340    	; 0x5f86 <sober()+0x202>
    5e32:	87 33       	cpi	r24, 0x37	; 55
    5e34:	41 f6       	brne	.-112    	; 0x5dc6 <sober()+0x42>
    5e36:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5e3a:	7c 01       	movw	r14, r24
    5e3c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5e40:	8c 01       	movw	r16, r24
    5e42:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5e46:	9c 01       	movw	r18, r24
    5e48:	42 e3       	ldi	r20, 0x32	; 50
    5e4a:	50 e0       	ldi	r21, 0x00	; 0
    5e4c:	6c e3       	ldi	r22, 0x3C	; 60
    5e4e:	80 e3       	ldi	r24, 0x30	; 48
    5e50:	91 e2       	ldi	r25, 0x21	; 33
    5e52:	6e c0       	rjmp	.+220    	; 0x5f30 <sober()+0x1ac>
    5e54:	89 36       	cpi	r24, 0x69	; 105
    5e56:	09 f4       	brne	.+2      	; 0x5e5a <sober()+0xd6>
    5e58:	c8 c0       	rjmp	.+400    	; 0x5fea <sober()+0x266>
    5e5a:	e8 f4       	brcc	.+58     	; 0x5e96 <sober()+0x112>
    5e5c:	85 35       	cpi	r24, 0x55	; 85
    5e5e:	09 f4       	brne	.+2      	; 0x5e62 <sober()+0xde>
    5e60:	9d c0       	rjmp	.+314    	; 0x5f9c <sober()+0x218>
    5e62:	60 f4       	brcc	.+24     	; 0x5e7c <sober()+0xf8>
    5e64:	8b 34       	cpi	r24, 0x4B	; 75
    5e66:	09 f4       	brne	.+2      	; 0x5e6a <sober()+0xe6>
    5e68:	94 c0       	rjmp	.+296    	; 0x5f92 <sober()+0x20e>
    5e6a:	4a e1       	ldi	r20, 0x1A	; 26
    5e6c:	54 e0       	ldi	r21, 0x04	; 4
    5e6e:	65 e5       	ldi	r22, 0x55	; 85
    5e70:	80 35       	cpi	r24, 0x50	; 80
    5e72:	09 f0       	breq	.+2      	; 0x5e76 <sober()+0xf2>
    5e74:	a8 cf       	rjmp	.-176    	; 0x5dc6 <sober()+0x42>
    5e76:	84 e3       	ldi	r24, 0x34	; 52
    5e78:	91 e2       	ldi	r25, 0x21	; 33
    5e7a:	bf cf       	rjmp	.-130    	; 0x5dfa <sober()+0x76>
    5e7c:	8f 35       	cpi	r24, 0x5F	; 95
    5e7e:	09 f4       	brne	.+2      	; 0x5e82 <sober()+0xfe>
    5e80:	9c c0       	rjmp	.+312    	; 0x5fba <sober()+0x236>
    5e82:	84 36       	cpi	r24, 0x64	; 100
    5e84:	09 f4       	brne	.+2      	; 0x5e88 <sober()+0x104>
    5e86:	a6 c0       	rjmp	.+332    	; 0x5fd4 <sober()+0x250>
    5e88:	8a 35       	cpi	r24, 0x5A	; 90
    5e8a:	09 f0       	breq	.+2      	; 0x5e8e <sober()+0x10a>
    5e8c:	9c cf       	rjmp	.-200    	; 0x5dc6 <sober()+0x42>
    5e8e:	4a e1       	ldi	r20, 0x1A	; 26
    5e90:	54 e0       	ldi	r21, 0x04	; 4
    5e92:	6f e5       	ldi	r22, 0x5F	; 95
    5e94:	f0 cf       	rjmp	.-32     	; 0x5e76 <sober()+0xf2>
    5e96:	8d 37       	cpi	r24, 0x7D	; 125
    5e98:	09 f4       	brne	.+2      	; 0x5e9c <sober()+0x118>
    5e9a:	b1 c0       	rjmp	.+354    	; 0x5ffe <sober()+0x27a>
    5e9c:	58 f4       	brcc	.+22     	; 0x5eb4 <sober()+0x130>
    5e9e:	83 37       	cpi	r24, 0x73	; 115
    5ea0:	09 f4       	brne	.+2      	; 0x5ea4 <sober()+0x120>
    5ea2:	a8 c0       	rjmp	.+336    	; 0x5ff4 <sober()+0x270>
    5ea4:	88 37       	cpi	r24, 0x78	; 120
    5ea6:	09 f4       	brne	.+2      	; 0x5eaa <sober()+0x126>
    5ea8:	a8 c0       	rjmp	.+336    	; 0x5ffa <sober()+0x276>
    5eaa:	8e 36       	cpi	r24, 0x6E	; 110
    5eac:	09 f0       	breq	.+2      	; 0x5eb0 <sober()+0x12c>
    5eae:	8b cf       	rjmp	.-234    	; 0x5dc6 <sober()+0x42>
    5eb0:	43 e7       	ldi	r20, 0x73	; 115
    5eb2:	6a c0       	rjmp	.+212    	; 0x5f88 <sober()+0x204>
    5eb4:	87 38       	cpi	r24, 0x87	; 135
    5eb6:	09 f4       	brne	.+2      	; 0x5eba <sober()+0x136>
    5eb8:	a5 c0       	rjmp	.+330    	; 0x6004 <sober()+0x280>
    5eba:	88 3c       	cpi	r24, 0xC8	; 200
    5ebc:	09 f4       	brne	.+2      	; 0x5ec0 <sober()+0x13c>
    5ebe:	a6 c0       	rjmp	.+332    	; 0x600c <sober()+0x288>
    5ec0:	82 38       	cpi	r24, 0x82	; 130
    5ec2:	09 f0       	breq	.+2      	; 0x5ec6 <sober()+0x142>
    5ec4:	80 cf       	rjmp	.-256    	; 0x5dc6 <sober()+0x42>
    5ec6:	47 e8       	ldi	r20, 0x87	; 135
    5ec8:	66 e0       	ldi	r22, 0x06	; 6
    5eca:	91 c0       	rjmp	.+290    	; 0x5fee <sober()+0x26a>
    5ecc:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5ed0:	7c 01       	movw	r14, r24
    5ed2:	6d e2       	ldi	r22, 0x2D	; 45
    5ed4:	73 e0       	ldi	r23, 0x03	; 3
    5ed6:	ce 01       	movw	r24, r28
    5ed8:	01 96       	adiw	r24, 0x01	; 1
    5eda:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5ede:	05 e0       	ldi	r16, 0x05	; 5
    5ee0:	97 01       	movw	r18, r14
    5ee2:	4a e5       	ldi	r20, 0x5A	; 90
    5ee4:	50 e0       	ldi	r21, 0x00	; 0
    5ee6:	60 e0       	ldi	r22, 0x00	; 0
    5ee8:	74 e5       	ldi	r23, 0x54	; 84
    5eea:	ce 01       	movw	r24, r28
    5eec:	01 96       	adiw	r24, 0x01	; 1
    5eee:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    5ef2:	ce 01       	movw	r24, r28
    5ef4:	01 96       	adiw	r24, 0x01	; 1
    5ef6:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    5efa:	65 cf       	rjmp	.-310    	; 0x5dc6 <sober()+0x42>
    5efc:	4a e0       	ldi	r20, 0x0A	; 10
    5efe:	6b e0       	ldi	r22, 0x0B	; 11
    5f00:	81 ea       	ldi	r24, 0xA1	; 161
    5f02:	9d e2       	ldi	r25, 0x2D	; 45
    5f04:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    5f08:	5e cf       	rjmp	.-324    	; 0x5dc6 <sober()+0x42>
    5f0a:	4f e0       	ldi	r20, 0x0F	; 15
    5f0c:	63 e0       	ldi	r22, 0x03	; 3
    5f0e:	80 e3       	ldi	r24, 0x30	; 48
    5f10:	91 e2       	ldi	r25, 0x21	; 33
    5f12:	f8 cf       	rjmp	.-16     	; 0x5f04 <sober()+0x180>
    5f14:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5f18:	7c 01       	movw	r14, r24
    5f1a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5f1e:	8c 01       	movw	r16, r24
    5f20:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5f24:	9c 01       	movw	r18, r24
    5f26:	42 e3       	ldi	r20, 0x32	; 50
    5f28:	50 e0       	ldi	r21, 0x00	; 0
    5f2a:	69 e1       	ldi	r22, 0x19	; 25
    5f2c:	8e e0       	ldi	r24, 0x0E	; 14
    5f2e:	9f e1       	ldi	r25, 0x1F	; 31
    5f30:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    5f34:	48 cf       	rjmp	.-368    	; 0x5dc6 <sober()+0x42>
    5f36:	6e e1       	ldi	r22, 0x1E	; 30
    5f38:	8d e0       	ldi	r24, 0x0D	; 13
    5f3a:	92 e0       	ldi	r25, 0x02	; 2
    5f3c:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    5f40:	42 cf       	rjmp	.-380    	; 0x5dc6 <sober()+0x42>
    5f42:	63 e2       	ldi	r22, 0x23	; 35
    5f44:	8d e4       	ldi	r24, 0x4D	; 77
    5f46:	98 e0       	ldi	r25, 0x08	; 8
    5f48:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    5f4c:	3c cf       	rjmp	.-392    	; 0x5dc6 <sober()+0x42>
    5f4e:	4d e2       	ldi	r20, 0x2D	; 45
    5f50:	62 e0       	ldi	r22, 0x02	; 2
    5f52:	84 e3       	ldi	r24, 0x34	; 52
    5f54:	91 e2       	ldi	r25, 0x21	; 33
    5f56:	d6 cf       	rjmp	.-84     	; 0x5f04 <sober()+0x180>
    5f58:	42 e3       	ldi	r20, 0x32	; 50
    5f5a:	63 e0       	ldi	r22, 0x03	; 3
    5f5c:	fa cf       	rjmp	.-12     	; 0x5f52 <sober()+0x1ce>
    5f5e:	4a e1       	ldi	r20, 0x1A	; 26
    5f60:	54 e0       	ldi	r21, 0x04	; 4
    5f62:	67 e3       	ldi	r22, 0x37	; 55
    5f64:	48 cf       	rjmp	.-368    	; 0x5df6 <sober()+0x72>
    5f66:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5f6a:	7c 01       	movw	r14, r24
    5f6c:	62 e2       	ldi	r22, 0x22	; 34
    5f6e:	73 e0       	ldi	r23, 0x03	; 3
    5f70:	ce 01       	movw	r24, r28
    5f72:	01 96       	adiw	r24, 0x01	; 1
    5f74:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5f78:	01 e4       	ldi	r16, 0x41	; 65
    5f7a:	97 01       	movw	r18, r14
    5f7c:	49 e1       	ldi	r20, 0x19	; 25
    5f7e:	50 e0       	ldi	r21, 0x00	; 0
    5f80:	6d e4       	ldi	r22, 0x4D	; 77
    5f82:	78 e0       	ldi	r23, 0x08	; 8
    5f84:	b2 cf       	rjmp	.-156    	; 0x5eea <sober()+0x166>
    5f86:	46 e4       	ldi	r20, 0x46	; 70
    5f88:	62 e0       	ldi	r22, 0x02	; 2
    5f8a:	31 c0       	rjmp	.+98     	; 0x5fee <sober()+0x26a>
    5f8c:	4b e4       	ldi	r20, 0x4B	; 75
    5f8e:	64 e0       	ldi	r22, 0x04	; 4
    5f90:	2e c0       	rjmp	.+92     	; 0x5fee <sober()+0x26a>
    5f92:	40 e5       	ldi	r20, 0x50	; 80
    5f94:	69 e0       	ldi	r22, 0x09	; 9
    5f96:	8f e5       	ldi	r24, 0x5F	; 95
    5f98:	92 e4       	ldi	r25, 0x42	; 66
    5f9a:	b4 cf       	rjmp	.-152    	; 0x5f04 <sober()+0x180>
    5f9c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5fa0:	7c 01       	movw	r14, r24
    5fa2:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5fa6:	8c 01       	movw	r16, r24
    5fa8:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5fac:	9c 01       	movw	r18, r24
    5fae:	42 e3       	ldi	r20, 0x32	; 50
    5fb0:	50 e0       	ldi	r21, 0x00	; 0
    5fb2:	6a e5       	ldi	r22, 0x5A	; 90
    5fb4:	84 e3       	ldi	r24, 0x34	; 52
    5fb6:	91 e2       	ldi	r25, 0x21	; 33
    5fb8:	bb cf       	rjmp	.-138    	; 0x5f30 <sober()+0x1ac>
    5fba:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5fbe:	7c 01       	movw	r14, r24
    5fc0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5fc4:	8c 01       	movw	r16, r24
    5fc6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    5fca:	9c 01       	movw	r18, r24
    5fcc:	42 e3       	ldi	r20, 0x32	; 50
    5fce:	50 e0       	ldi	r21, 0x00	; 0
    5fd0:	64 e6       	ldi	r22, 0x64	; 100
    5fd2:	f0 cf       	rjmp	.-32     	; 0x5fb4 <sober()+0x230>
    5fd4:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    5fd8:	7c 01       	movw	r14, r24
    5fda:	62 e2       	ldi	r22, 0x22	; 34
    5fdc:	73 e0       	ldi	r23, 0x03	; 3
    5fde:	ce 01       	movw	r24, r28
    5fe0:	01 96       	adiw	r24, 0x01	; 1
    5fe2:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    5fe6:	09 e6       	ldi	r16, 0x69	; 105
    5fe8:	c8 cf       	rjmp	.-112    	; 0x5f7a <sober()+0x1f6>
    5fea:	4e e6       	ldi	r20, 0x6E	; 110
    5fec:	61 e0       	ldi	r22, 0x01	; 1
    5fee:	8a e2       	ldi	r24, 0x2A	; 42
    5ff0:	91 e2       	ldi	r25, 0x21	; 33
    5ff2:	16 cf       	rjmp	.-468    	; 0x5e20 <sober()+0x9c>
    5ff4:	48 e7       	ldi	r20, 0x78	; 120
    5ff6:	63 e0       	ldi	r22, 0x03	; 3
    5ff8:	fa cf       	rjmp	.-12     	; 0x5fee <sober()+0x26a>
    5ffa:	4d e7       	ldi	r20, 0x7D	; 125
    5ffc:	c8 cf       	rjmp	.-112    	; 0x5f8e <sober()+0x20a>
    5ffe:	42 e8       	ldi	r20, 0x82	; 130
    6000:	65 e0       	ldi	r22, 0x05	; 5
    6002:	f5 cf       	rjmp	.-22     	; 0x5fee <sober()+0x26a>
    6004:	68 ec       	ldi	r22, 0xC8	; 200
    6006:	80 e5       	ldi	r24, 0x50	; 80
    6008:	93 ec       	ldi	r25, 0xC3	; 195
    600a:	98 cf       	rjmp	.-208    	; 0x5f3c <sober()+0x1b8>
    600c:	60 e0       	ldi	r22, 0x00	; 0
    600e:	8c ec       	ldi	r24, 0xCC	; 204
    6010:	90 e1       	ldi	r25, 0x10	; 16
    6012:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    6016:	80 e0       	ldi	r24, 0x00	; 0
    6018:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    601c:	d4 ce       	rjmp	.-600    	; 0x5dc6 <sober()+0x42>

0000601e <prisoner()>:
    601e:	ef 92       	push	r14
    6020:	ff 92       	push	r15
    6022:	0f 93       	push	r16
    6024:	1f 93       	push	r17
    6026:	cf 93       	push	r28
    6028:	df 93       	push	r29
    602a:	00 d0       	rcall	.+0      	; 0x602c <prisoner()+0xe>
    602c:	00 d0       	rcall	.+0      	; 0x602e <prisoner()+0x10>
    602e:	00 d0       	rcall	.+0      	; 0x6030 <prisoner()+0x12>
    6030:	1f 92       	push	r1
    6032:	cd b7       	in	r28, 0x3d	; 61
    6034:	de b7       	in	r29, 0x3e	; 62
    6036:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <prog>
    603a:	86 34       	cpi	r24, 0x46	; 70
    603c:	09 f4       	brne	.+2      	; 0x6040 <prisoner()+0x22>
    603e:	f3 c0       	rjmp	.+486    	; 0x6226 <prisoner()+0x208>
    6040:	08 f0       	brcs	.+2      	; 0x6044 <prisoner()+0x26>
    6042:	55 c0       	rjmp	.+170    	; 0x60ee <prisoner()+0xd0>
    6044:	8e 31       	cpi	r24, 0x1E	; 30
    6046:	09 f4       	brne	.+2      	; 0x604a <prisoner()+0x2c>
    6048:	c9 c0       	rjmp	.+402    	; 0x61dc <prisoner()+0x1be>
    604a:	38 f5       	brcc	.+78     	; 0x609a <prisoner()+0x7c>
    604c:	8a 30       	cpi	r24, 0x0A	; 10
    604e:	09 f4       	brne	.+2      	; 0x6052 <prisoner()+0x34>
    6050:	a9 c0       	rjmp	.+338    	; 0x61a4 <prisoner()+0x186>
    6052:	98 f4       	brcc	.+38     	; 0x607a <prisoner()+0x5c>
    6054:	88 23       	and	r24, r24
    6056:	09 f4       	brne	.+2      	; 0x605a <prisoner()+0x3c>
    6058:	86 c0       	rjmp	.+268    	; 0x6166 <prisoner()+0x148>
    605a:	85 30       	cpi	r24, 0x05	; 5
    605c:	09 f4       	brne	.+2      	; 0x6060 <prisoner()+0x42>
    605e:	9b c0       	rjmp	.+310    	; 0x6196 <prisoner()+0x178>
    6060:	27 96       	adiw	r28, 0x07	; 7
    6062:	0f b6       	in	r0, 0x3f	; 63
    6064:	f8 94       	cli
    6066:	de bf       	out	0x3e, r29	; 62
    6068:	0f be       	out	0x3f, r0	; 63
    606a:	cd bf       	out	0x3d, r28	; 61
    606c:	df 91       	pop	r29
    606e:	cf 91       	pop	r28
    6070:	1f 91       	pop	r17
    6072:	0f 91       	pop	r16
    6074:	ff 90       	pop	r15
    6076:	ef 90       	pop	r14
    6078:	08 95       	ret
    607a:	84 31       	cpi	r24, 0x14	; 20
    607c:	09 f4       	brne	.+2      	; 0x6080 <prisoner()+0x62>
    607e:	97 c0       	rjmp	.+302    	; 0x61ae <prisoner()+0x190>
    6080:	89 31       	cpi	r24, 0x19	; 25
    6082:	09 f4       	brne	.+2      	; 0x6086 <prisoner()+0x68>
    6084:	a5 c0       	rjmp	.+330    	; 0x61d0 <prisoner()+0x1b2>
    6086:	8f 30       	cpi	r24, 0x0F	; 15
    6088:	59 f7       	brne	.-42     	; 0x6060 <prisoner()+0x42>
    608a:	4a e1       	ldi	r20, 0x1A	; 26
    608c:	54 e0       	ldi	r21, 0x04	; 4
    608e:	64 e1       	ldi	r22, 0x14	; 20
    6090:	80 e3       	ldi	r24, 0x30	; 48
    6092:	91 e2       	ldi	r25, 0x21	; 33
    6094:	0e 94 53 07 	call	0xea6	; 0xea6 <progFullColors(unsigned int, unsigned char, unsigned int)>
    6098:	e3 cf       	rjmp	.-58     	; 0x6060 <prisoner()+0x42>
    609a:	82 33       	cpi	r24, 0x32	; 50
    609c:	09 f4       	brne	.+2      	; 0x60a0 <prisoner()+0x82>
    609e:	ac c0       	rjmp	.+344    	; 0x61f8 <prisoner()+0x1da>
    60a0:	78 f4       	brcc	.+30     	; 0x60c0 <prisoner()+0xa2>
    60a2:	88 32       	cpi	r24, 0x28	; 40
    60a4:	09 f4       	brne	.+2      	; 0x60a8 <prisoner()+0x8a>
    60a6:	a0 c0       	rjmp	.+320    	; 0x61e8 <prisoner()+0x1ca>
    60a8:	8d 32       	cpi	r24, 0x2D	; 45
    60aa:	09 f4       	brne	.+2      	; 0x60ae <prisoner()+0x90>
    60ac:	a2 c0       	rjmp	.+324    	; 0x61f2 <prisoner()+0x1d4>
    60ae:	83 32       	cpi	r24, 0x23	; 35
    60b0:	b9 f6       	brne	.-82     	; 0x6060 <prisoner()+0x42>
    60b2:	48 e2       	ldi	r20, 0x28	; 40
    60b4:	65 e0       	ldi	r22, 0x05	; 5
    60b6:	88 e6       	ldi	r24, 0x68	; 104
    60b8:	92 e4       	ldi	r25, 0x42	; 66
    60ba:	0e 94 47 07 	call	0xe8e	; 0xe8e <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    60be:	d0 cf       	rjmp	.-96     	; 0x6060 <prisoner()+0x42>
    60c0:	8c 33       	cpi	r24, 0x3C	; 60
    60c2:	09 f4       	brne	.+2      	; 0x60c6 <prisoner()+0xa8>
    60c4:	9d c0       	rjmp	.+314    	; 0x6200 <prisoner()+0x1e2>
    60c6:	81 34       	cpi	r24, 0x41	; 65
    60c8:	09 f4       	brne	.+2      	; 0x60cc <prisoner()+0xae>
    60ca:	aa c0       	rjmp	.+340    	; 0x6220 <prisoner()+0x202>
    60cc:	87 33       	cpi	r24, 0x37	; 55
    60ce:	41 f6       	brne	.-112    	; 0x6060 <prisoner()+0x42>
    60d0:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    60d4:	7c 01       	movw	r14, r24
    60d6:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    60da:	8c 01       	movw	r16, r24
    60dc:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    60e0:	9c 01       	movw	r18, r24
    60e2:	42 e3       	ldi	r20, 0x32	; 50
    60e4:	50 e0       	ldi	r21, 0x00	; 0
    60e6:	6c e3       	ldi	r22, 0x3C	; 60
    60e8:	80 e3       	ldi	r24, 0x30	; 48
    60ea:	91 e2       	ldi	r25, 0x21	; 33
    60ec:	6e c0       	rjmp	.+220    	; 0x61ca <prisoner()+0x1ac>
    60ee:	89 36       	cpi	r24, 0x69	; 105
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <prisoner()+0xd6>
    60f2:	c8 c0       	rjmp	.+400    	; 0x6284 <prisoner()+0x266>
    60f4:	e8 f4       	brcc	.+58     	; 0x6130 <prisoner()+0x112>
    60f6:	85 35       	cpi	r24, 0x55	; 85
    60f8:	09 f4       	brne	.+2      	; 0x60fc <prisoner()+0xde>
    60fa:	9d c0       	rjmp	.+314    	; 0x6236 <prisoner()+0x218>
    60fc:	60 f4       	brcc	.+24     	; 0x6116 <prisoner()+0xf8>
    60fe:	8b 34       	cpi	r24, 0x4B	; 75
    6100:	09 f4       	brne	.+2      	; 0x6104 <prisoner()+0xe6>
    6102:	94 c0       	rjmp	.+296    	; 0x622c <prisoner()+0x20e>
    6104:	4a e1       	ldi	r20, 0x1A	; 26
    6106:	54 e0       	ldi	r21, 0x04	; 4
    6108:	65 e5       	ldi	r22, 0x55	; 85
    610a:	80 35       	cpi	r24, 0x50	; 80
    610c:	09 f0       	breq	.+2      	; 0x6110 <prisoner()+0xf2>
    610e:	a8 cf       	rjmp	.-176    	; 0x6060 <prisoner()+0x42>
    6110:	84 e3       	ldi	r24, 0x34	; 52
    6112:	91 e2       	ldi	r25, 0x21	; 33
    6114:	bf cf       	rjmp	.-130    	; 0x6094 <prisoner()+0x76>
    6116:	8f 35       	cpi	r24, 0x5F	; 95
    6118:	09 f4       	brne	.+2      	; 0x611c <prisoner()+0xfe>
    611a:	9c c0       	rjmp	.+312    	; 0x6254 <prisoner()+0x236>
    611c:	84 36       	cpi	r24, 0x64	; 100
    611e:	09 f4       	brne	.+2      	; 0x6122 <prisoner()+0x104>
    6120:	a6 c0       	rjmp	.+332    	; 0x626e <prisoner()+0x250>
    6122:	8a 35       	cpi	r24, 0x5A	; 90
    6124:	09 f0       	breq	.+2      	; 0x6128 <prisoner()+0x10a>
    6126:	9c cf       	rjmp	.-200    	; 0x6060 <prisoner()+0x42>
    6128:	4a e1       	ldi	r20, 0x1A	; 26
    612a:	54 e0       	ldi	r21, 0x04	; 4
    612c:	6f e5       	ldi	r22, 0x5F	; 95
    612e:	f0 cf       	rjmp	.-32     	; 0x6110 <prisoner()+0xf2>
    6130:	8d 37       	cpi	r24, 0x7D	; 125
    6132:	09 f4       	brne	.+2      	; 0x6136 <prisoner()+0x118>
    6134:	b1 c0       	rjmp	.+354    	; 0x6298 <prisoner()+0x27a>
    6136:	58 f4       	brcc	.+22     	; 0x614e <prisoner()+0x130>
    6138:	83 37       	cpi	r24, 0x73	; 115
    613a:	09 f4       	brne	.+2      	; 0x613e <prisoner()+0x120>
    613c:	a8 c0       	rjmp	.+336    	; 0x628e <prisoner()+0x270>
    613e:	88 37       	cpi	r24, 0x78	; 120
    6140:	09 f4       	brne	.+2      	; 0x6144 <prisoner()+0x126>
    6142:	a8 c0       	rjmp	.+336    	; 0x6294 <prisoner()+0x276>
    6144:	8e 36       	cpi	r24, 0x6E	; 110
    6146:	09 f0       	breq	.+2      	; 0x614a <prisoner()+0x12c>
    6148:	8b cf       	rjmp	.-234    	; 0x6060 <prisoner()+0x42>
    614a:	43 e7       	ldi	r20, 0x73	; 115
    614c:	6a c0       	rjmp	.+212    	; 0x6222 <prisoner()+0x204>
    614e:	87 38       	cpi	r24, 0x87	; 135
    6150:	09 f4       	brne	.+2      	; 0x6154 <prisoner()+0x136>
    6152:	a5 c0       	rjmp	.+330    	; 0x629e <prisoner()+0x280>
    6154:	88 3c       	cpi	r24, 0xC8	; 200
    6156:	09 f4       	brne	.+2      	; 0x615a <prisoner()+0x13c>
    6158:	a6 c0       	rjmp	.+332    	; 0x62a6 <prisoner()+0x288>
    615a:	82 38       	cpi	r24, 0x82	; 130
    615c:	09 f0       	breq	.+2      	; 0x6160 <prisoner()+0x142>
    615e:	80 cf       	rjmp	.-256    	; 0x6060 <prisoner()+0x42>
    6160:	47 e8       	ldi	r20, 0x87	; 135
    6162:	66 e0       	ldi	r22, 0x06	; 6
    6164:	91 c0       	rjmp	.+290    	; 0x6288 <prisoner()+0x26a>
    6166:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    616a:	7c 01       	movw	r14, r24
    616c:	6b e3       	ldi	r22, 0x3B	; 59
    616e:	73 e0       	ldi	r23, 0x03	; 3
    6170:	ce 01       	movw	r24, r28
    6172:	01 96       	adiw	r24, 0x01	; 1
    6174:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    6178:	05 e0       	ldi	r16, 0x05	; 5
    617a:	97 01       	movw	r18, r14
    617c:	4a e5       	ldi	r20, 0x5A	; 90
    617e:	50 e0       	ldi	r21, 0x00	; 0
    6180:	60 e0       	ldi	r22, 0x00	; 0
    6182:	74 e5       	ldi	r23, 0x54	; 84
    6184:	ce 01       	movw	r24, r28
    6186:	01 96       	adiw	r24, 0x01	; 1
    6188:	0e 94 65 0f 	call	0x1eca	; 0x1eca <progScrollText(String, unsigned int, int, int, unsigned char)>
    618c:	ce 01       	movw	r24, r28
    618e:	01 96       	adiw	r24, 0x01	; 1
    6190:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    6194:	65 cf       	rjmp	.-310    	; 0x6060 <prisoner()+0x42>
    6196:	4a e0       	ldi	r20, 0x0A	; 10
    6198:	6b e0       	ldi	r22, 0x0B	; 11
    619a:	81 ea       	ldi	r24, 0xA1	; 161
    619c:	9d e2       	ldi	r25, 0x2D	; 45
    619e:	0e 94 9d 12 	call	0x253a	; 0x253a <progPalette(unsigned int, unsigned char, unsigned char)>
    61a2:	5e cf       	rjmp	.-324    	; 0x6060 <prisoner()+0x42>
    61a4:	4f e0       	ldi	r20, 0x0F	; 15
    61a6:	63 e0       	ldi	r22, 0x03	; 3
    61a8:	80 e3       	ldi	r24, 0x30	; 48
    61aa:	91 e2       	ldi	r25, 0x21	; 33
    61ac:	f8 cf       	rjmp	.-16     	; 0x619e <prisoner()+0x180>
    61ae:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    61b2:	7c 01       	movw	r14, r24
    61b4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    61b8:	8c 01       	movw	r16, r24
    61ba:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    61be:	9c 01       	movw	r18, r24
    61c0:	42 e3       	ldi	r20, 0x32	; 50
    61c2:	50 e0       	ldi	r21, 0x00	; 0
    61c4:	69 e1       	ldi	r22, 0x19	; 25
    61c6:	8e e0       	ldi	r24, 0x0E	; 14
    61c8:	9f e1       	ldi	r25, 0x1F	; 31
    61ca:	0e 94 b8 07 	call	0xf70	; 0xf70 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    61ce:	48 cf       	rjmp	.-368    	; 0x6060 <prisoner()+0x42>
    61d0:	6e e1       	ldi	r22, 0x1E	; 30
    61d2:	8d e0       	ldi	r24, 0x0D	; 13
    61d4:	92 e0       	ldi	r25, 0x02	; 2
    61d6:	0e 94 40 0a 	call	0x1480	; 0x1480 <progBlack(unsigned int, unsigned char)>
    61da:	42 cf       	rjmp	.-380    	; 0x6060 <prisoner()+0x42>
    61dc:	63 e2       	ldi	r22, 0x23	; 35
    61de:	8d e4       	ldi	r24, 0x4D	; 77
    61e0:	98 e0       	ldi	r25, 0x08	; 8
    61e2:	0e 94 98 0b 	call	0x1730	; 0x1730 <progMovingLines(unsigned int, unsigned char)>
    61e6:	3c cf       	rjmp	.-392    	; 0x6060 <prisoner()+0x42>
    61e8:	4d e2       	ldi	r20, 0x2D	; 45
    61ea:	62 e0       	ldi	r22, 0x02	; 2
    61ec:	84 e3       	ldi	r24, 0x34	; 52
    61ee:	91 e2       	ldi	r25, 0x21	; 33
    61f0:	d6 cf       	rjmp	.-84     	; 0x619e <prisoner()+0x180>
    61f2:	42 e3       	ldi	r20, 0x32	; 50
    61f4:	63 e0       	ldi	r22, 0x03	; 3
    61f6:	fa cf       	rjmp	.-12     	; 0x61ec <prisoner()+0x1ce>
    61f8:	4a e1       	ldi	r20, 0x1A	; 26
    61fa:	54 e0       	ldi	r21, 0x04	; 4
    61fc:	67 e3       	ldi	r22, 0x37	; 55
    61fe:	48 cf       	rjmp	.-368    	; 0x6090 <prisoner()+0x72>
    6200:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    6204:	7c 01       	movw	r14, r24
    6206:	62 e2       	ldi	r22, 0x22	; 34
    6208:	73 e0       	ldi	r23, 0x03	; 3
    620a:	ce 01       	movw	r24, r28
    620c:	01 96       	adiw	r24, 0x01	; 1
    620e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    6212:	01 e4       	ldi	r16, 0x41	; 65
    6214:	97 01       	movw	r18, r14
    6216:	49 e1       	ldi	r20, 0x19	; 25
    6218:	50 e0       	ldi	r21, 0x00	; 0
    621a:	6d e4       	ldi	r22, 0x4D	; 77
    621c:	78 e0       	ldi	r23, 0x08	; 8
    621e:	b2 cf       	rjmp	.-156    	; 0x6184 <prisoner()+0x166>
    6220:	46 e4       	ldi	r20, 0x46	; 70
    6222:	62 e0       	ldi	r22, 0x02	; 2
    6224:	31 c0       	rjmp	.+98     	; 0x6288 <prisoner()+0x26a>
    6226:	4b e4       	ldi	r20, 0x4B	; 75
    6228:	64 e0       	ldi	r22, 0x04	; 4
    622a:	2e c0       	rjmp	.+92     	; 0x6288 <prisoner()+0x26a>
    622c:	40 e5       	ldi	r20, 0x50	; 80
    622e:	69 e0       	ldi	r22, 0x09	; 9
    6230:	8f e5       	ldi	r24, 0x5F	; 95
    6232:	92 e4       	ldi	r25, 0x42	; 66
    6234:	b4 cf       	rjmp	.-152    	; 0x619e <prisoner()+0x180>
    6236:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    623a:	7c 01       	movw	r14, r24
    623c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6240:	8c 01       	movw	r16, r24
    6242:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6246:	9c 01       	movw	r18, r24
    6248:	42 e3       	ldi	r20, 0x32	; 50
    624a:	50 e0       	ldi	r21, 0x00	; 0
    624c:	6a e5       	ldi	r22, 0x5A	; 90
    624e:	84 e3       	ldi	r24, 0x34	; 52
    6250:	91 e2       	ldi	r25, 0x21	; 33
    6252:	bb cf       	rjmp	.-138    	; 0x61ca <prisoner()+0x1ac>
    6254:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6258:	7c 01       	movw	r14, r24
    625a:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    625e:	8c 01       	movw	r16, r24
    6260:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6264:	9c 01       	movw	r18, r24
    6266:	42 e3       	ldi	r20, 0x32	; 50
    6268:	50 e0       	ldi	r21, 0x00	; 0
    626a:	64 e6       	ldi	r22, 0x64	; 100
    626c:	f0 cf       	rjmp	.-32     	; 0x624e <prisoner()+0x230>
    626e:	0e 94 01 06 	call	0xc02	; 0xc02 <getRandomColor()>
    6272:	7c 01       	movw	r14, r24
    6274:	62 e2       	ldi	r22, 0x22	; 34
    6276:	73 e0       	ldi	r23, 0x03	; 3
    6278:	ce 01       	movw	r24, r28
    627a:	01 96       	adiw	r24, 0x01	; 1
    627c:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    6280:	09 e6       	ldi	r16, 0x69	; 105
    6282:	c8 cf       	rjmp	.-112    	; 0x6214 <prisoner()+0x1f6>
    6284:	4e e6       	ldi	r20, 0x6E	; 110
    6286:	61 e0       	ldi	r22, 0x01	; 1
    6288:	8a e2       	ldi	r24, 0x2A	; 42
    628a:	91 e2       	ldi	r25, 0x21	; 33
    628c:	16 cf       	rjmp	.-468    	; 0x60ba <prisoner()+0x9c>
    628e:	48 e7       	ldi	r20, 0x78	; 120
    6290:	63 e0       	ldi	r22, 0x03	; 3
    6292:	fa cf       	rjmp	.-12     	; 0x6288 <prisoner()+0x26a>
    6294:	4d e7       	ldi	r20, 0x7D	; 125
    6296:	c8 cf       	rjmp	.-112    	; 0x6228 <prisoner()+0x20a>
    6298:	42 e8       	ldi	r20, 0x82	; 130
    629a:	65 e0       	ldi	r22, 0x05	; 5
    629c:	f5 cf       	rjmp	.-22     	; 0x6288 <prisoner()+0x26a>
    629e:	68 ec       	ldi	r22, 0xC8	; 200
    62a0:	80 e5       	ldi	r24, 0x50	; 80
    62a2:	93 ec       	ldi	r25, 0xC3	; 195
    62a4:	98 cf       	rjmp	.-208    	; 0x61d6 <prisoner()+0x1b8>
    62a6:	60 e0       	ldi	r22, 0x00	; 0
    62a8:	8c ec       	ldi	r24, 0xCC	; 204
    62aa:	90 e1       	ldi	r25, 0x10	; 16
    62ac:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    62b0:	80 e0       	ldi	r24, 0x00	; 0
    62b2:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    62b6:	d4 ce       	rjmp	.-600    	; 0x6060 <prisoner()+0x42>

000062b8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    62b8:	9f 92       	push	r9
    62ba:	af 92       	push	r10
    62bc:	bf 92       	push	r11
    62be:	cf 92       	push	r12
    62c0:	df 92       	push	r13
    62c2:	ef 92       	push	r14
    62c4:	ff 92       	push	r15
    62c6:	0f 93       	push	r16
    62c8:	1f 93       	push	r17
    62ca:	cf 93       	push	r28
    62cc:	df 93       	push	r29
    62ce:	fc 01       	movw	r30, r24
    62d0:	c0 80       	ld	r12, Z
    62d2:	d1 80       	ldd	r13, Z+1	; 0x01
    62d4:	28 b1       	in	r18, 0x08	; 8
    62d6:	b2 2e       	mov	r11, r18
    62d8:	68 94       	set
    62da:	b2 f8       	bld	r11, 2
    62dc:	98 b1       	in	r25, 0x08	; 8
    62de:	9b 7f       	andi	r25, 0xFB	; 251
    62e0:	98 b9       	out	0x08, r25	; 8
    62e2:	62 85       	ldd	r22, Z+10	; 0x0a
    62e4:	87 81       	ldd	r24, Z+7	; 0x07
    62e6:	06 2f       	mov	r16, r22
    62e8:	08 1b       	sub	r16, r24
    62ea:	80 2f       	mov	r24, r16
    62ec:	07 83       	std	Z+7, r16	; 0x07
    62ee:	77 85       	ldd	r23, Z+15	; 0x0f
    62f0:	a2 81       	ldd	r26, Z+2	; 0x02
    62f2:	b3 81       	ldd	r27, Z+3	; 0x03
    62f4:	35 85       	ldd	r19, Z+13	; 0x0d
    62f6:	44 85       	ldd	r20, Z+12	; 0x0c
    62f8:	56 85       	ldd	r21, Z+14	; 0x0e
    62fa:	99 24       	eor	r9, r9
    62fc:	93 94       	inc	r9
    62fe:	93 0e       	add	r9, r19
    6300:	4f 5f       	subi	r20, 0xFF	; 255
    6302:	5f 5f       	subi	r21, 0xFF	; 255
    6304:	f6 80       	ldd	r15, Z+6	; 0x06
    6306:	e0 84       	ldd	r14, Z+8	; 0x08
    6308:	c1 85       	ldd	r28, Z+9	; 0x09
    630a:	d3 85       	ldd	r29, Z+11	; 0x0b
    630c:	f6 01       	movw	r30, r12
    630e:	11 81       	ldd	r17, Z+1	; 0x01
    6310:	a1 2c       	mov	r10, r1
    6312:	0a 2d       	mov	r16, r10
    6314:	2a 2d       	mov	r18, r10
    6316:	3a 2d       	mov	r19, r10
    6318:	31 81       	ldd	r19, Z+1	; 0x01
    631a:	11 27       	eor	r17, r17
    631c:	88 94       	clc
    631e:	31 11       	cpse	r19, r1
    6320:	38 0f       	add	r19, r24
    6322:	08 f4       	brcc	.+2      	; 0x6326 <L_19009>
    6324:	3f ef       	ldi	r19, 0xFF	; 255

00006326 <L_19009>:
    6326:	81 95       	neg	r24
    6328:	88 94       	clc
    632a:	90 fc       	sbrc	r9, 0
    632c:	13 0f       	add	r17, r19
    632e:	17 95       	ror	r17
    6330:	88 94       	clc
    6332:	91 fc       	sbrc	r9, 1
    6334:	13 0f       	add	r17, r19
    6336:	17 95       	ror	r17
    6338:	88 94       	clc
    633a:	92 fc       	sbrc	r9, 2
    633c:	13 0f       	add	r17, r19
    633e:	17 95       	ror	r17
    6340:	88 94       	clc
    6342:	93 fc       	sbrc	r9, 3
    6344:	13 0f       	add	r17, r19
    6346:	17 95       	ror	r17
    6348:	88 94       	clc
    634a:	94 fc       	sbrc	r9, 4
    634c:	13 0f       	add	r17, r19
    634e:	17 95       	ror	r17
    6350:	88 94       	clc
    6352:	95 fc       	sbrc	r9, 5
    6354:	13 0f       	add	r17, r19
    6356:	17 95       	ror	r17
    6358:	88 94       	clc
    635a:	96 fc       	sbrc	r9, 6
    635c:	13 0f       	add	r17, r19
    635e:	17 95       	ror	r17
    6360:	88 94       	clc
    6362:	97 fc       	sbrc	r9, 7
    6364:	13 0f       	add	r17, r19
    6366:	17 95       	ror	r17
    6368:	88 94       	clc
    636a:	03 2f       	mov	r16, r19
    636c:	91 10       	cpse	r9, r1
    636e:	01 2f       	mov	r16, r17
    6370:	86 0f       	add	r24, r22
    6372:	10 2f       	mov	r17, r16
    6374:	00 2c       	mov	r0, r0
    6376:	b8 b8       	out	0x08, r11	; 8
    6378:	00 c0       	rjmp	.+0      	; 0x637a <L_19009+0x54>
    637a:	17 ff       	sbrs	r17, 7
    637c:	98 b9       	out	0x08, r25	; 8
    637e:	30 81       	ld	r19, Z
    6380:	00 27       	eor	r16, r16
    6382:	88 94       	clc
    6384:	00 c0       	rjmp	.+0      	; 0x6386 <L_19009+0x60>
    6386:	00 c0       	rjmp	.+0      	; 0x6388 <L_19009+0x62>
    6388:	00 2c       	mov	r0, r0
    638a:	98 b9       	out	0x08, r25	; 8
    638c:	31 11       	cpse	r19, r1
    638e:	3f 0d       	add	r19, r15
    6390:	00 c0       	rjmp	.+0      	; 0x6392 <L_19009+0x6c>
    6392:	00 2c       	mov	r0, r0
    6394:	b8 b8       	out	0x08, r11	; 8
    6396:	00 c0       	rjmp	.+0      	; 0x6398 <L_19009+0x72>
    6398:	16 ff       	sbrs	r17, 6
    639a:	98 b9       	out	0x08, r25	; 8
    639c:	08 f4       	brcc	.+2      	; 0x63a0 <L_19542>
    639e:	3f ef       	ldi	r19, 0xFF	; 255

000063a0 <L_19542>:
    63a0:	f1 94       	neg	r15
    63a2:	88 94       	clc
    63a4:	00 c0       	rjmp	.+0      	; 0x63a6 <L_19542+0x6>
    63a6:	00 c0       	rjmp	.+0      	; 0x63a8 <L_19542+0x8>
    63a8:	00 2c       	mov	r0, r0
    63aa:	98 b9       	out	0x08, r25	; 8
    63ac:	40 fd       	sbrc	r20, 0
    63ae:	03 0f       	add	r16, r19
    63b0:	00 c0       	rjmp	.+0      	; 0x63b2 <L_19542+0x12>
    63b2:	00 2c       	mov	r0, r0
    63b4:	b8 b8       	out	0x08, r11	; 8
    63b6:	00 c0       	rjmp	.+0      	; 0x63b8 <L_19542+0x18>
    63b8:	15 ff       	sbrs	r17, 5
    63ba:	98 b9       	out	0x08, r25	; 8
    63bc:	07 95       	ror	r16
    63be:	88 94       	clc
    63c0:	41 fd       	sbrc	r20, 1
    63c2:	03 0f       	add	r16, r19
    63c4:	00 c0       	rjmp	.+0      	; 0x63c6 <L_19542+0x26>
    63c6:	00 c0       	rjmp	.+0      	; 0x63c8 <L_19542+0x28>
    63c8:	00 2c       	mov	r0, r0
    63ca:	98 b9       	out	0x08, r25	; 8
    63cc:	07 95       	ror	r16
    63ce:	88 94       	clc
    63d0:	00 c0       	rjmp	.+0      	; 0x63d2 <L_19542+0x32>
    63d2:	00 2c       	mov	r0, r0
    63d4:	b8 b8       	out	0x08, r11	; 8
    63d6:	00 c0       	rjmp	.+0      	; 0x63d8 <L_19542+0x38>
    63d8:	14 ff       	sbrs	r17, 4
    63da:	98 b9       	out	0x08, r25	; 8
    63dc:	42 fd       	sbrc	r20, 2
    63de:	03 0f       	add	r16, r19
    63e0:	07 95       	ror	r16
    63e2:	88 94       	clc
    63e4:	00 c0       	rjmp	.+0      	; 0x63e6 <L_19542+0x46>
    63e6:	00 c0       	rjmp	.+0      	; 0x63e8 <L_19542+0x48>
    63e8:	00 2c       	mov	r0, r0
    63ea:	98 b9       	out	0x08, r25	; 8
    63ec:	43 fd       	sbrc	r20, 3
    63ee:	03 0f       	add	r16, r19
    63f0:	00 c0       	rjmp	.+0      	; 0x63f2 <L_19542+0x52>
    63f2:	00 2c       	mov	r0, r0
    63f4:	b8 b8       	out	0x08, r11	; 8
    63f6:	00 c0       	rjmp	.+0      	; 0x63f8 <L_19542+0x58>
    63f8:	13 ff       	sbrs	r17, 3
    63fa:	98 b9       	out	0x08, r25	; 8
    63fc:	07 95       	ror	r16
    63fe:	88 94       	clc
    6400:	44 fd       	sbrc	r20, 4
    6402:	03 0f       	add	r16, r19
    6404:	00 c0       	rjmp	.+0      	; 0x6406 <L_19542+0x66>
    6406:	00 c0       	rjmp	.+0      	; 0x6408 <L_19542+0x68>
    6408:	00 2c       	mov	r0, r0
    640a:	98 b9       	out	0x08, r25	; 8
    640c:	07 95       	ror	r16
    640e:	88 94       	clc
    6410:	00 c0       	rjmp	.+0      	; 0x6412 <L_19542+0x72>
    6412:	00 2c       	mov	r0, r0
    6414:	b8 b8       	out	0x08, r11	; 8
    6416:	00 c0       	rjmp	.+0      	; 0x6418 <L_19542+0x78>
    6418:	12 ff       	sbrs	r17, 2
    641a:	98 b9       	out	0x08, r25	; 8
    641c:	45 fd       	sbrc	r20, 5
    641e:	03 0f       	add	r16, r19
    6420:	07 95       	ror	r16
    6422:	88 94       	clc
    6424:	00 c0       	rjmp	.+0      	; 0x6426 <L_19542+0x86>
    6426:	00 c0       	rjmp	.+0      	; 0x6428 <L_19542+0x88>
    6428:	00 2c       	mov	r0, r0
    642a:	98 b9       	out	0x08, r25	; 8
    642c:	46 fd       	sbrc	r20, 6
    642e:	03 0f       	add	r16, r19
    6430:	00 c0       	rjmp	.+0      	; 0x6432 <L_19542+0x92>
    6432:	00 2c       	mov	r0, r0
    6434:	b8 b8       	out	0x08, r11	; 8
    6436:	00 c0       	rjmp	.+0      	; 0x6438 <L_19542+0x98>
    6438:	11 ff       	sbrs	r17, 1
    643a:	98 b9       	out	0x08, r25	; 8
    643c:	07 95       	ror	r16
    643e:	88 94       	clc
    6440:	47 fd       	sbrc	r20, 7
    6442:	03 0f       	add	r16, r19
    6444:	00 c0       	rjmp	.+0      	; 0x6446 <L_19542+0xa6>
    6446:	00 c0       	rjmp	.+0      	; 0x6448 <L_19542+0xa8>
    6448:	00 2c       	mov	r0, r0
    644a:	98 b9       	out	0x08, r25	; 8
    644c:	07 95       	ror	r16
    644e:	88 94       	clc
    6450:	00 c0       	rjmp	.+0      	; 0x6452 <L_19542+0xb2>
    6452:	00 2c       	mov	r0, r0
    6454:	b8 b8       	out	0x08, r11	; 8
    6456:	00 c0       	rjmp	.+0      	; 0x6458 <L_19542+0xb8>
    6458:	10 ff       	sbrs	r17, 0
    645a:	98 b9       	out	0x08, r25	; 8
    645c:	13 2f       	mov	r17, r19
    645e:	41 11       	cpse	r20, r1
    6460:	10 2f       	mov	r17, r16
    6462:	fc 0e       	add	r15, r28
    6464:	00 c0       	rjmp	.+0      	; 0x6466 <L_19542+0xc6>
    6466:	00 c0       	rjmp	.+0      	; 0x6468 <L_19542+0xc8>
    6468:	00 2c       	mov	r0, r0
    646a:	98 b9       	out	0x08, r25	; 8
    646c:	00 c0       	rjmp	.+0      	; 0x646e <L_19542+0xce>
    646e:	00 c0       	rjmp	.+0      	; 0x6470 <L_19542+0xd0>
    6470:	00 2c       	mov	r0, r0
    6472:	b8 b8       	out	0x08, r11	; 8
    6474:	00 c0       	rjmp	.+0      	; 0x6476 <L_19542+0xd6>
    6476:	17 ff       	sbrs	r17, 7
    6478:	98 b9       	out	0x08, r25	; 8
    647a:	32 81       	ldd	r19, Z+2	; 0x02
    647c:	00 27       	eor	r16, r16
    647e:	88 94       	clc
    6480:	00 c0       	rjmp	.+0      	; 0x6482 <L_19542+0xe2>
    6482:	00 c0       	rjmp	.+0      	; 0x6484 <L_19542+0xe4>
    6484:	00 2c       	mov	r0, r0
    6486:	98 b9       	out	0x08, r25	; 8
    6488:	31 11       	cpse	r19, r1
    648a:	3e 0d       	add	r19, r14
    648c:	00 c0       	rjmp	.+0      	; 0x648e <L_19542+0xee>
    648e:	00 2c       	mov	r0, r0
    6490:	b8 b8       	out	0x08, r11	; 8
    6492:	00 c0       	rjmp	.+0      	; 0x6494 <L_19542+0xf4>
    6494:	16 ff       	sbrs	r17, 6
    6496:	98 b9       	out	0x08, r25	; 8
    6498:	08 f4       	brcc	.+2      	; 0x649c <L_20760>
    649a:	3f ef       	ldi	r19, 0xFF	; 255

0000649c <L_20760>:
    649c:	e7 0f       	add	r30, r23
    649e:	f1 1d       	adc	r31, r1
    64a0:	00 c0       	rjmp	.+0      	; 0x64a2 <L_20760+0x6>
    64a2:	00 c0       	rjmp	.+0      	; 0x64a4 <L_20760+0x8>
    64a4:	00 2c       	mov	r0, r0
    64a6:	98 b9       	out	0x08, r25	; 8
    64a8:	50 fd       	sbrc	r21, 0
    64aa:	03 0f       	add	r16, r19
    64ac:	00 c0       	rjmp	.+0      	; 0x64ae <L_20760+0x12>
    64ae:	00 2c       	mov	r0, r0
    64b0:	b8 b8       	out	0x08, r11	; 8
    64b2:	00 c0       	rjmp	.+0      	; 0x64b4 <L_20760+0x18>
    64b4:	15 ff       	sbrs	r17, 5
    64b6:	98 b9       	out	0x08, r25	; 8
    64b8:	07 95       	ror	r16
    64ba:	88 94       	clc
    64bc:	51 fd       	sbrc	r21, 1
    64be:	03 0f       	add	r16, r19
    64c0:	00 c0       	rjmp	.+0      	; 0x64c2 <L_20760+0x26>
    64c2:	00 c0       	rjmp	.+0      	; 0x64c4 <L_20760+0x28>
    64c4:	00 2c       	mov	r0, r0
    64c6:	98 b9       	out	0x08, r25	; 8
    64c8:	07 95       	ror	r16
    64ca:	88 94       	clc
    64cc:	00 c0       	rjmp	.+0      	; 0x64ce <L_20760+0x32>
    64ce:	00 2c       	mov	r0, r0
    64d0:	b8 b8       	out	0x08, r11	; 8
    64d2:	00 c0       	rjmp	.+0      	; 0x64d4 <L_20760+0x38>
    64d4:	14 ff       	sbrs	r17, 4
    64d6:	98 b9       	out	0x08, r25	; 8
    64d8:	52 fd       	sbrc	r21, 2
    64da:	03 0f       	add	r16, r19
    64dc:	07 95       	ror	r16
    64de:	88 94       	clc
    64e0:	00 c0       	rjmp	.+0      	; 0x64e2 <L_20760+0x46>
    64e2:	00 c0       	rjmp	.+0      	; 0x64e4 <L_20760+0x48>
    64e4:	00 2c       	mov	r0, r0
    64e6:	98 b9       	out	0x08, r25	; 8
    64e8:	53 fd       	sbrc	r21, 3
    64ea:	03 0f       	add	r16, r19
    64ec:	00 c0       	rjmp	.+0      	; 0x64ee <L_20760+0x52>
    64ee:	00 2c       	mov	r0, r0
    64f0:	b8 b8       	out	0x08, r11	; 8
    64f2:	00 c0       	rjmp	.+0      	; 0x64f4 <L_20760+0x58>
    64f4:	13 ff       	sbrs	r17, 3
    64f6:	98 b9       	out	0x08, r25	; 8
    64f8:	07 95       	ror	r16
    64fa:	88 94       	clc
    64fc:	54 fd       	sbrc	r21, 4
    64fe:	03 0f       	add	r16, r19
    6500:	00 c0       	rjmp	.+0      	; 0x6502 <L_20760+0x66>
    6502:	00 c0       	rjmp	.+0      	; 0x6504 <L_20760+0x68>
    6504:	00 2c       	mov	r0, r0
    6506:	98 b9       	out	0x08, r25	; 8
    6508:	07 95       	ror	r16
    650a:	88 94       	clc
    650c:	00 c0       	rjmp	.+0      	; 0x650e <L_20760+0x72>
    650e:	00 2c       	mov	r0, r0
    6510:	b8 b8       	out	0x08, r11	; 8
    6512:	00 c0       	rjmp	.+0      	; 0x6514 <L_20760+0x78>
    6514:	12 ff       	sbrs	r17, 2
    6516:	98 b9       	out	0x08, r25	; 8
    6518:	55 fd       	sbrc	r21, 5
    651a:	03 0f       	add	r16, r19
    651c:	07 95       	ror	r16
    651e:	88 94       	clc
    6520:	00 c0       	rjmp	.+0      	; 0x6522 <L_20760+0x86>
    6522:	00 c0       	rjmp	.+0      	; 0x6524 <L_20760+0x88>
    6524:	00 2c       	mov	r0, r0
    6526:	98 b9       	out	0x08, r25	; 8
    6528:	56 fd       	sbrc	r21, 6
    652a:	03 0f       	add	r16, r19
    652c:	00 c0       	rjmp	.+0      	; 0x652e <L_20760+0x92>
    652e:	00 2c       	mov	r0, r0
    6530:	b8 b8       	out	0x08, r11	; 8
    6532:	00 c0       	rjmp	.+0      	; 0x6534 <L_20760+0x98>
    6534:	11 ff       	sbrs	r17, 1
    6536:	98 b9       	out	0x08, r25	; 8
    6538:	07 95       	ror	r16
    653a:	88 94       	clc
    653c:	57 fd       	sbrc	r21, 7
    653e:	03 0f       	add	r16, r19
    6540:	00 c0       	rjmp	.+0      	; 0x6542 <L_20760+0xa6>
    6542:	00 c0       	rjmp	.+0      	; 0x6544 <L_20760+0xa8>
    6544:	00 2c       	mov	r0, r0
    6546:	98 b9       	out	0x08, r25	; 8
    6548:	07 95       	ror	r16
    654a:	88 94       	clc
    654c:	00 c0       	rjmp	.+0      	; 0x654e <L_20760+0xb2>
    654e:	00 2c       	mov	r0, r0
    6550:	b8 b8       	out	0x08, r11	; 8
    6552:	00 c0       	rjmp	.+0      	; 0x6554 <L_20760+0xb8>
    6554:	10 ff       	sbrs	r17, 0
    6556:	98 b9       	out	0x08, r25	; 8
    6558:	13 2f       	mov	r17, r19
    655a:	51 11       	cpse	r21, r1
    655c:	10 2f       	mov	r17, r16
    655e:	e1 94       	neg	r14
    6560:	00 c0       	rjmp	.+0      	; 0x6562 <L_20760+0xc6>
    6562:	00 c0       	rjmp	.+0      	; 0x6564 <L_20760+0xc8>
    6564:	00 2c       	mov	r0, r0
    6566:	98 b9       	out	0x08, r25	; 8
    6568:	ed 0e       	add	r14, r29
    656a:	00 c0       	rjmp	.+0      	; 0x656c <L_20760+0xd0>
    656c:	00 c0       	rjmp	.+0      	; 0x656e <L_20760+0xd2>
    656e:	b8 b8       	out	0x08, r11	; 8
    6570:	00 c0       	rjmp	.+0      	; 0x6572 <L_20760+0xd6>
    6572:	17 ff       	sbrs	r17, 7
    6574:	98 b9       	out	0x08, r25	; 8
    6576:	31 81       	ldd	r19, Z+1	; 0x01
    6578:	00 27       	eor	r16, r16
    657a:	88 94       	clc
    657c:	00 c0       	rjmp	.+0      	; 0x657e <L_20760+0xe2>
    657e:	00 c0       	rjmp	.+0      	; 0x6580 <L_20760+0xe4>
    6580:	00 2c       	mov	r0, r0
    6582:	98 b9       	out	0x08, r25	; 8
    6584:	31 11       	cpse	r19, r1
    6586:	38 0f       	add	r19, r24
    6588:	00 c0       	rjmp	.+0      	; 0x658a <L_20760+0xee>
    658a:	00 2c       	mov	r0, r0
    658c:	b8 b8       	out	0x08, r11	; 8
    658e:	00 c0       	rjmp	.+0      	; 0x6590 <L_20760+0xf4>
    6590:	16 ff       	sbrs	r17, 6
    6592:	98 b9       	out	0x08, r25	; 8
    6594:	08 f4       	brcc	.+2      	; 0x6598 <L_21984>
    6596:	3f ef       	ldi	r19, 0xFF	; 255

00006598 <L_21984>:
    6598:	81 95       	neg	r24
    659a:	88 94       	clc
    659c:	00 c0       	rjmp	.+0      	; 0x659e <L_21984+0x6>
    659e:	00 c0       	rjmp	.+0      	; 0x65a0 <L_21984+0x8>
    65a0:	00 2c       	mov	r0, r0
    65a2:	98 b9       	out	0x08, r25	; 8
    65a4:	90 fc       	sbrc	r9, 0
    65a6:	03 0f       	add	r16, r19
    65a8:	00 c0       	rjmp	.+0      	; 0x65aa <L_21984+0x12>
    65aa:	00 2c       	mov	r0, r0
    65ac:	b8 b8       	out	0x08, r11	; 8
    65ae:	00 c0       	rjmp	.+0      	; 0x65b0 <L_21984+0x18>
    65b0:	15 ff       	sbrs	r17, 5
    65b2:	98 b9       	out	0x08, r25	; 8
    65b4:	07 95       	ror	r16
    65b6:	88 94       	clc
    65b8:	91 fc       	sbrc	r9, 1
    65ba:	03 0f       	add	r16, r19
    65bc:	00 c0       	rjmp	.+0      	; 0x65be <L_21984+0x26>
    65be:	00 c0       	rjmp	.+0      	; 0x65c0 <L_21984+0x28>
    65c0:	00 2c       	mov	r0, r0
    65c2:	98 b9       	out	0x08, r25	; 8
    65c4:	07 95       	ror	r16
    65c6:	88 94       	clc
    65c8:	00 c0       	rjmp	.+0      	; 0x65ca <L_21984+0x32>
    65ca:	00 2c       	mov	r0, r0
    65cc:	b8 b8       	out	0x08, r11	; 8
    65ce:	00 c0       	rjmp	.+0      	; 0x65d0 <L_21984+0x38>
    65d0:	14 ff       	sbrs	r17, 4
    65d2:	98 b9       	out	0x08, r25	; 8
    65d4:	92 fc       	sbrc	r9, 2
    65d6:	03 0f       	add	r16, r19
    65d8:	07 95       	ror	r16
    65da:	88 94       	clc
    65dc:	00 c0       	rjmp	.+0      	; 0x65de <L_21984+0x46>
    65de:	00 c0       	rjmp	.+0      	; 0x65e0 <L_21984+0x48>
    65e0:	00 2c       	mov	r0, r0
    65e2:	98 b9       	out	0x08, r25	; 8
    65e4:	93 fc       	sbrc	r9, 3
    65e6:	03 0f       	add	r16, r19
    65e8:	00 c0       	rjmp	.+0      	; 0x65ea <L_21984+0x52>
    65ea:	00 2c       	mov	r0, r0
    65ec:	b8 b8       	out	0x08, r11	; 8
    65ee:	00 c0       	rjmp	.+0      	; 0x65f0 <L_21984+0x58>
    65f0:	13 ff       	sbrs	r17, 3
    65f2:	98 b9       	out	0x08, r25	; 8
    65f4:	07 95       	ror	r16
    65f6:	88 94       	clc
    65f8:	94 fc       	sbrc	r9, 4
    65fa:	03 0f       	add	r16, r19
    65fc:	00 c0       	rjmp	.+0      	; 0x65fe <L_21984+0x66>
    65fe:	00 c0       	rjmp	.+0      	; 0x6600 <L_21984+0x68>
    6600:	00 2c       	mov	r0, r0
    6602:	98 b9       	out	0x08, r25	; 8
    6604:	07 95       	ror	r16
    6606:	88 94       	clc
    6608:	00 c0       	rjmp	.+0      	; 0x660a <L_21984+0x72>
    660a:	00 2c       	mov	r0, r0
    660c:	b8 b8       	out	0x08, r11	; 8
    660e:	00 c0       	rjmp	.+0      	; 0x6610 <L_21984+0x78>
    6610:	12 ff       	sbrs	r17, 2
    6612:	98 b9       	out	0x08, r25	; 8
    6614:	95 fc       	sbrc	r9, 5
    6616:	03 0f       	add	r16, r19
    6618:	07 95       	ror	r16
    661a:	88 94       	clc
    661c:	00 c0       	rjmp	.+0      	; 0x661e <L_21984+0x86>
    661e:	00 c0       	rjmp	.+0      	; 0x6620 <L_21984+0x88>
    6620:	00 2c       	mov	r0, r0
    6622:	98 b9       	out	0x08, r25	; 8
    6624:	96 fc       	sbrc	r9, 6
    6626:	03 0f       	add	r16, r19
    6628:	00 c0       	rjmp	.+0      	; 0x662a <L_21984+0x92>
    662a:	00 2c       	mov	r0, r0
    662c:	b8 b8       	out	0x08, r11	; 8
    662e:	00 c0       	rjmp	.+0      	; 0x6630 <L_21984+0x98>
    6630:	11 ff       	sbrs	r17, 1
    6632:	98 b9       	out	0x08, r25	; 8
    6634:	07 95       	ror	r16
    6636:	88 94       	clc
    6638:	97 fc       	sbrc	r9, 7
    663a:	03 0f       	add	r16, r19
    663c:	00 c0       	rjmp	.+0      	; 0x663e <L_21984+0xa6>
    663e:	00 c0       	rjmp	.+0      	; 0x6640 <L_21984+0xa8>
    6640:	00 2c       	mov	r0, r0
    6642:	98 b9       	out	0x08, r25	; 8
    6644:	07 95       	ror	r16
    6646:	88 94       	clc
    6648:	00 c0       	rjmp	.+0      	; 0x664a <L_21984+0xb2>
    664a:	00 2c       	mov	r0, r0
    664c:	b8 b8       	out	0x08, r11	; 8
    664e:	00 c0       	rjmp	.+0      	; 0x6650 <L_21984+0xb8>
    6650:	10 ff       	sbrs	r17, 0
    6652:	98 b9       	out	0x08, r25	; 8
    6654:	13 2f       	mov	r17, r19
    6656:	91 10       	cpse	r9, r1
    6658:	10 2f       	mov	r17, r16
    665a:	86 0f       	add	r24, r22
    665c:	00 c0       	rjmp	.+0      	; 0x665e <L_21984+0xc6>
    665e:	00 c0       	rjmp	.+0      	; 0x6660 <L_21984+0xc8>
    6660:	00 2c       	mov	r0, r0
    6662:	98 b9       	out	0x08, r25	; 8
    6664:	11 97       	sbiw	r26, 0x01	; 1
    6666:	09 f0       	breq	.+2      	; 0x666a <L_22964>
    6668:	86 ce       	rjmp	.-756    	; 0x6376 <L_19009+0x50>

0000666a <L_22964>:
    666a:	df 91       	pop	r29
    666c:	cf 91       	pop	r28
    666e:	1f 91       	pop	r17
    6670:	0f 91       	pop	r16
    6672:	ff 90       	pop	r15
    6674:	ef 90       	pop	r14
    6676:	df 90       	pop	r13
    6678:	cf 90       	pop	r12
    667a:	bf 90       	pop	r11
    667c:	af 90       	pop	r10
    667e:	9f 90       	pop	r9
    6680:	08 95       	ret

00006682 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    6682:	0f 93       	push	r16
    6684:	1f 93       	push	r17
    6686:	cf 93       	push	r28
    6688:	df 93       	push	r29
    668a:	ec 01       	movw	r28, r24
    668c:	8b 01       	movw	r16, r22
    668e:	0e 94 62 48 	call	0x90c4	; 0x90c4 <_micros>
    6692:	2f 85       	ldd	r18, Y+15	; 0x0f
    6694:	38 89       	ldd	r19, Y+16	; 0x10
    6696:	62 1b       	sub	r22, r18
    6698:	73 0b       	sbc	r23, r19
    669a:	6a 30       	cpi	r22, 0x0A	; 10
    669c:	71 05       	cpc	r23, r1
    669e:	b8 f3       	brcs	.-18     	; 0x668e <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    66a0:	f8 94       	cli
    66a2:	c8 01       	movw	r24, r16
    66a4:	09 de       	rcall	.-1006   	; 0x62b8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    66a6:	f8 01       	movw	r30, r16
    66a8:	42 81       	ldd	r20, Z+2	; 0x02
    66aa:	53 81       	ldd	r21, Z+3	; 0x03
    66ac:	20 ee       	ldi	r18, 0xE0	; 224
    66ae:	31 e0       	ldi	r19, 0x01	; 1
    66b0:	da 01       	movw	r26, r20
    66b2:	0e 94 dd 51 	call	0xa3ba	; 0xa3ba <__usmulhisi3>
    66b6:	dc 01       	movw	r26, r24
    66b8:	cb 01       	movw	r24, r22
    66ba:	f4 e0       	ldi	r31, 0x04	; 4
    66bc:	b6 95       	lsr	r27
    66be:	a7 95       	ror	r26
    66c0:	97 95       	ror	r25
    66c2:	87 95       	ror	r24
    66c4:	fa 95       	dec	r31
    66c6:	d1 f7       	brne	.-12     	; 0x66bc <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    66c8:	30 e0       	ldi	r19, 0x00	; 0
    66ca:	20 e0       	ldi	r18, 0x00	; 0
    66cc:	b9 01       	movw	r22, r18
    66ce:	ea e9       	ldi	r30, 0x9A	; 154
    66d0:	4e 9f       	mul	r20, r30
    66d2:	04 0e       	add	r0, r20
    66d4:	61 1d       	adc	r22, r1
    66d6:	5e 9f       	mul	r21, r30
    66d8:	60 0d       	add	r22, r0
    66da:	71 1d       	adc	r23, r1
    66dc:	11 24       	eor	r1, r1
    66de:	65 0f       	add	r22, r21
    66e0:	71 1d       	adc	r23, r1
    66e2:	86 0f       	add	r24, r22
    66e4:	97 1f       	adc	r25, r23
    66e6:	a1 1d       	adc	r26, r1
    66e8:	b1 1d       	adc	r27, r1
    66ea:	89 3e       	cpi	r24, 0xE9	; 233
    66ec:	f3 e0       	ldi	r31, 0x03	; 3
    66ee:	9f 07       	cpc	r25, r31
    66f0:	a1 05       	cpc	r26, r1
    66f2:	b1 05       	cpc	r27, r1
    66f4:	08 f4       	brcc	.+2      	; 0x66f8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    66f6:	34 c0       	rjmp	.+104    	; 0x6760 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    66f8:	88 5e       	subi	r24, 0xE8	; 232
    66fa:	93 40       	sbci	r25, 0x03	; 3
    66fc:	a1 09       	sbc	r26, r1
    66fe:	b1 09       	sbc	r27, r1
    6700:	42 e0       	ldi	r20, 0x02	; 2
    6702:	b6 95       	lsr	r27
    6704:	a7 95       	ror	r26
    6706:	97 95       	ror	r25
    6708:	87 95       	ror	r24
    670a:	4a 95       	dec	r20
    670c:	d1 f7       	brne	.-12     	; 0x6702 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    670e:	47 e0       	ldi	r20, 0x07	; 7
    6710:	84 9f       	mul	r24, r20
    6712:	08 0e       	add	r0, r24
    6714:	21 1d       	adc	r18, r1
    6716:	94 9f       	mul	r25, r20
    6718:	20 0d       	add	r18, r0
    671a:	31 1d       	adc	r19, r1
    671c:	11 24       	eor	r1, r1
    671e:	29 0f       	add	r18, r25
    6720:	31 1d       	adc	r19, r1
    6722:	60 91 bd 10 	lds	r22, 0x10BD	; 0x8010bd <gTimeErrorAccum256ths>
    6726:	70 e0       	ldi	r23, 0x00	; 0
    6728:	86 0f       	add	r24, r22
    672a:	97 1f       	adc	r25, r23
    672c:	82 0f       	add	r24, r18
    672e:	93 1f       	adc	r25, r19
    6730:	40 91 dc 10 	lds	r20, 0x10DC	; 0x8010dc <timer0_millis_count>
    6734:	50 91 dd 10 	lds	r21, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    6738:	60 91 de 10 	lds	r22, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    673c:	70 91 df 10 	lds	r23, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    6740:	29 2f       	mov	r18, r25
    6742:	33 27       	eor	r19, r19
    6744:	42 0f       	add	r20, r18
    6746:	53 1f       	adc	r21, r19
    6748:	61 1d       	adc	r22, r1
    674a:	71 1d       	adc	r23, r1
    674c:	40 93 dc 10 	sts	0x10DC, r20	; 0x8010dc <timer0_millis_count>
    6750:	50 93 dd 10 	sts	0x10DD, r21	; 0x8010dd <timer0_millis_count+0x1>
    6754:	60 93 de 10 	sts	0x10DE, r22	; 0x8010de <timer0_millis_count+0x2>
    6758:	70 93 df 10 	sts	0x10DF, r23	; 0x8010df <timer0_millis_count+0x3>
    675c:	80 93 bd 10 	sts	0x10BD, r24	; 0x8010bd <gTimeErrorAccum256ths>
    6760:	78 94       	sei
    6762:	0e 94 62 48 	call	0x90c4	; 0x90c4 <_micros>
    6766:	78 8b       	std	Y+16, r23	; 0x10
    6768:	6f 87       	std	Y+15, r22	; 0x0f
    676a:	df 91       	pop	r29
    676c:	cf 91       	pop	r28
    676e:	1f 91       	pop	r17
    6770:	0f 91       	pop	r16
    6772:	08 95       	ret

00006774 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    6774:	0f 93       	push	r16
    6776:	1f 93       	push	r17
    6778:	cf 93       	push	r28
    677a:	df 93       	push	r29
    677c:	20 91 e2 09 	lds	r18, 0x09E2	; 0x8009e2 <__data_end>
    6780:	2f 5f       	subi	r18, 0xFF	; 255
    6782:	32 2f       	mov	r19, r18
    6784:	37 70       	andi	r19, 0x07	; 7
    6786:	30 93 e2 09 	sts	0x09E2, r19	; 0x8009e2 <__data_end>
    678a:	20 ff       	sbrs	r18, 0
    678c:	2b c0       	rjmp	.+86     	; 0x67e4 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    678e:	20 e8       	ldi	r18, 0x80	; 128
    6790:	31 fd       	sbrc	r19, 1
    6792:	20 64       	ori	r18, 0x40	; 64
    6794:	34 70       	andi	r19, 0x04	; 4
    6796:	09 f0       	breq	.+2      	; 0x679a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    6798:	20 62       	ori	r18, 0x20	; 32
    679a:	20 5f       	subi	r18, 0xF0	; 240
    679c:	fc 01       	movw	r30, r24
    679e:	ec 01       	movw	r28, r24
    67a0:	23 96       	adiw	r28, 0x03	; 3
    67a2:	00 e0       	ldi	r16, 0x00	; 0
    67a4:	11 e0       	ldi	r17, 0x01	; 1
    67a6:	64 85       	ldd	r22, Z+12	; 0x0c
    67a8:	66 23       	and	r22, r22
    67aa:	29 f0       	breq	.+10     	; 0x67b6 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    67ac:	70 e0       	ldi	r23, 0x00	; 0
    67ae:	c8 01       	movw	r24, r16
    67b0:	0e 94 74 51 	call	0xa2e8	; 0xa2e8 <__divmodhi4>
    67b4:	6f 5f       	subi	r22, 0xFF	; 255
    67b6:	61 87       	std	Z+9, r22	; 0x09
    67b8:	32 2f       	mov	r19, r18
    67ba:	36 9f       	mul	r19, r22
    67bc:	03 0e       	add	r0, r19
    67be:	30 e0       	ldi	r19, 0x00	; 0
    67c0:	31 1d       	adc	r19, r1
    67c2:	11 24       	eor	r1, r1
    67c4:	31 11       	cpse	r19, r1
    67c6:	10 c0       	rjmp	.+32     	; 0x67e8 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    67c8:	16 82       	std	Z+6, r1	; 0x06
    67ca:	66 23       	and	r22, r22
    67cc:	11 f0       	breq	.+4      	; 0x67d2 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    67ce:	61 50       	subi	r22, 0x01	; 1
    67d0:	61 87       	std	Z+9, r22	; 0x09
    67d2:	31 96       	adiw	r30, 0x01	; 1
    67d4:	ec 17       	cp	r30, r28
    67d6:	fd 07       	cpc	r31, r29
    67d8:	31 f7       	brne	.-52     	; 0x67a6 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    67da:	df 91       	pop	r29
    67dc:	cf 91       	pop	r28
    67de:	1f 91       	pop	r17
    67e0:	0f 91       	pop	r16
    67e2:	08 95       	ret
    67e4:	20 e0       	ldi	r18, 0x00	; 0
    67e6:	d4 cf       	rjmp	.-88     	; 0x6790 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    67e8:	31 50       	subi	r19, 0x01	; 1
    67ea:	36 83       	std	Z+6, r19	; 0x06
    67ec:	ee cf       	rjmp	.-36     	; 0x67ca <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

000067ee <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    67ee:	0f 93       	push	r16
    67f0:	1f 93       	push	r17
    67f2:	cf 93       	push	r28
    67f4:	df 93       	push	r29
    67f6:	cd b7       	in	r28, 0x3d	; 61
    67f8:	de b7       	in	r29, 0x3e	; 62
    67fa:	62 97       	sbiw	r28, 0x12	; 18
    67fc:	0f b6       	in	r0, 0x3f	; 63
    67fe:	f8 94       	cli
    6800:	de bf       	out	0x3e, r29	; 62
    6802:	0f be       	out	0x3f, r0	; 63
    6804:	cd bf       	out	0x3d, r28	; 61
    6806:	8c 01       	movw	r16, r24
    6808:	f9 01       	movw	r30, r18
    680a:	dc 01       	movw	r26, r24
    680c:	1c 96       	adiw	r26, 0x0c	; 12
    680e:	8c 91       	ld	r24, X
    6810:	7a 83       	std	Y+2, r23	; 0x02
    6812:	69 83       	std	Y+1, r22	; 0x01
    6814:	5c 83       	std	Y+4, r21	; 0x04
    6816:	4b 83       	std	Y+3, r20	; 0x03
    6818:	5e 83       	std	Y+6, r21	; 0x06
    681a:	4d 83       	std	Y+5, r20	; 0x05
    681c:	90 81       	ld	r25, Z
    681e:	9d 87       	std	Y+13, r25	; 0x0d
    6820:	91 81       	ldd	r25, Z+1	; 0x01
    6822:	9e 87       	std	Y+14, r25	; 0x0e
    6824:	92 81       	ldd	r25, Z+2	; 0x02
    6826:	9f 87       	std	Y+15, r25	; 0x0f
    6828:	81 30       	cpi	r24, 0x01	; 1
    682a:	e9 f4       	brne	.+58     	; 0x6866 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    682c:	ce 01       	movw	r24, r28
    682e:	01 96       	adiw	r24, 0x01	; 1
    6830:	a1 df       	rcall	.-190    	; 0x6774 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    6832:	83 e0       	ldi	r24, 0x03	; 3
    6834:	88 8b       	std	Y+16, r24	; 0x10
    6836:	1a 8a       	std	Y+18, r1	; 0x12
    6838:	19 8a       	std	Y+17, r1	; 0x11
    683a:	d8 01       	movw	r26, r16
    683c:	ed 91       	ld	r30, X+
    683e:	fc 91       	ld	r31, X
    6840:	04 84       	ldd	r0, Z+12	; 0x0c
    6842:	f5 85       	ldd	r31, Z+13	; 0x0d
    6844:	e0 2d       	mov	r30, r0
    6846:	be 01       	movw	r22, r28
    6848:	6f 5f       	subi	r22, 0xFF	; 255
    684a:	7f 4f       	sbci	r23, 0xFF	; 255
    684c:	c8 01       	movw	r24, r16
    684e:	09 95       	icall
    6850:	62 96       	adiw	r28, 0x12	; 18
    6852:	0f b6       	in	r0, 0x3f	; 63
    6854:	f8 94       	cli
    6856:	de bf       	out	0x3e, r29	; 62
    6858:	0f be       	out	0x3f, r0	; 63
    685a:	cd bf       	out	0x3d, r28	; 61
    685c:	df 91       	pop	r29
    685e:	cf 91       	pop	r28
    6860:	1f 91       	pop	r17
    6862:	0f 91       	pop	r16
    6864:	08 95       	ret
    6866:	1c 86       	std	Y+12, r1	; 0x0c
    6868:	1b 86       	std	Y+11, r1	; 0x0b
    686a:	1a 86       	std	Y+10, r1	; 0x0a
    686c:	19 86       	std	Y+9, r1	; 0x09
    686e:	18 86       	std	Y+8, r1	; 0x08
    6870:	1f 82       	std	Y+7, r1	; 0x07
    6872:	df cf       	rjmp	.-66     	; 0x6832 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

00006874 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    6874:	0f 93       	push	r16
    6876:	1f 93       	push	r17
    6878:	cf 93       	push	r28
    687a:	df 93       	push	r29
    687c:	cd b7       	in	r28, 0x3d	; 61
    687e:	de b7       	in	r29, 0x3e	; 62
    6880:	62 97       	sbiw	r28, 0x12	; 18
    6882:	0f b6       	in	r0, 0x3f	; 63
    6884:	f8 94       	cli
    6886:	de bf       	out	0x3e, r29	; 62
    6888:	0f be       	out	0x3f, r0	; 63
    688a:	cd bf       	out	0x3d, r28	; 61
    688c:	8c 01       	movw	r16, r24
    688e:	f9 01       	movw	r30, r18
    6890:	dc 01       	movw	r26, r24
    6892:	1c 96       	adiw	r26, 0x0c	; 12
    6894:	8c 91       	ld	r24, X
    6896:	7a 83       	std	Y+2, r23	; 0x02
    6898:	69 83       	std	Y+1, r22	; 0x01
    689a:	5c 83       	std	Y+4, r21	; 0x04
    689c:	4b 83       	std	Y+3, r20	; 0x03
    689e:	5e 83       	std	Y+6, r21	; 0x06
    68a0:	4d 83       	std	Y+5, r20	; 0x05
    68a2:	90 81       	ld	r25, Z
    68a4:	9d 87       	std	Y+13, r25	; 0x0d
    68a6:	91 81       	ldd	r25, Z+1	; 0x01
    68a8:	9e 87       	std	Y+14, r25	; 0x0e
    68aa:	92 81       	ldd	r25, Z+2	; 0x02
    68ac:	9f 87       	std	Y+15, r25	; 0x0f
    68ae:	81 30       	cpi	r24, 0x01	; 1
    68b0:	e1 f4       	brne	.+56     	; 0x68ea <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    68b2:	ce 01       	movw	r24, r28
    68b4:	01 96       	adiw	r24, 0x01	; 1
    68b6:	5e df       	rcall	.-324    	; 0x6774 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    68b8:	18 8a       	std	Y+16, r1	; 0x10
    68ba:	1a 8a       	std	Y+18, r1	; 0x12
    68bc:	19 8a       	std	Y+17, r1	; 0x11
    68be:	d8 01       	movw	r26, r16
    68c0:	ed 91       	ld	r30, X+
    68c2:	fc 91       	ld	r31, X
    68c4:	04 84       	ldd	r0, Z+12	; 0x0c
    68c6:	f5 85       	ldd	r31, Z+13	; 0x0d
    68c8:	e0 2d       	mov	r30, r0
    68ca:	be 01       	movw	r22, r28
    68cc:	6f 5f       	subi	r22, 0xFF	; 255
    68ce:	7f 4f       	sbci	r23, 0xFF	; 255
    68d0:	c8 01       	movw	r24, r16
    68d2:	09 95       	icall
    68d4:	62 96       	adiw	r28, 0x12	; 18
    68d6:	0f b6       	in	r0, 0x3f	; 63
    68d8:	f8 94       	cli
    68da:	de bf       	out	0x3e, r29	; 62
    68dc:	0f be       	out	0x3f, r0	; 63
    68de:	cd bf       	out	0x3d, r28	; 61
    68e0:	df 91       	pop	r29
    68e2:	cf 91       	pop	r28
    68e4:	1f 91       	pop	r17
    68e6:	0f 91       	pop	r16
    68e8:	08 95       	ret
    68ea:	1c 86       	std	Y+12, r1	; 0x0c
    68ec:	1b 86       	std	Y+11, r1	; 0x0b
    68ee:	1a 86       	std	Y+10, r1	; 0x0a
    68f0:	19 86       	std	Y+9, r1	; 0x09
    68f2:	18 86       	std	Y+8, r1	; 0x08
    68f4:	1f 82       	std	Y+7, r1	; 0x07
    68f6:	e0 cf       	rjmp	.-64     	; 0x68b8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

000068f8 <_GLOBAL__sub_I_matrix>:
    68f8:	0f b6       	in	r0, 0x3f	; 63
    68fa:	f8 94       	cli
    68fc:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    6900:	90 91 dd 10 	lds	r25, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    6904:	a0 91 de 10 	lds	r26, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    6908:	b0 91 df 10 	lds	r27, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    690c:	0f be       	out	0x3f, r0	; 63
    690e:	90 93 b3 0a 	sts	0x0AB3, r25	; 0x800ab3 <lastLEDchange+0x1>
    6912:	80 93 b2 0a 	sts	0x0AB2, r24	; 0x800ab2 <lastLEDchange>
    6916:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    691a:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
    691e:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    6922:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
    6926:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <getRandomColorValue()>
    692a:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
    692e:	69 ec       	ldi	r22, 0xC9	; 201
    6930:	75 e0       	ldi	r23, 0x05	; 5
    6932:	86 e2       	ldi	r24, 0x26	; 38
    6934:	9a e0       	ldi	r25, 0x0A	; 10
    6936:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    693a:	64 ec       	ldi	r22, 0xC4	; 196
    693c:	75 e0       	ldi	r23, 0x05	; 5
    693e:	8d e2       	ldi	r24, 0x2D	; 45
    6940:	9a e0       	ldi	r25, 0x0A	; 10
    6942:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    6946:	62 ec       	ldi	r22, 0xC2	; 194
    6948:	75 e0       	ldi	r23, 0x05	; 5
    694a:	84 e3       	ldi	r24, 0x34	; 52
    694c:	9a e0       	ldi	r25, 0x0A	; 10
    694e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    6952:	6f eb       	ldi	r22, 0xBF	; 191
    6954:	75 e0       	ldi	r23, 0x05	; 5
    6956:	8b e3       	ldi	r24, 0x3B	; 59
    6958:	9a e0       	ldi	r25, 0x0A	; 10
    695a:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    695e:	6a eb       	ldi	r22, 0xBA	; 186
    6960:	75 e0       	ldi	r23, 0x05	; 5
    6962:	82 e4       	ldi	r24, 0x42	; 66
    6964:	9a e0       	ldi	r25, 0x0A	; 10
    6966:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    696a:	66 eb       	ldi	r22, 0xB6	; 182
    696c:	75 e0       	ldi	r23, 0x05	; 5
    696e:	89 e4       	ldi	r24, 0x49	; 73
    6970:	9a e0       	ldi	r25, 0x0A	; 10
    6972:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    6976:	60 eb       	ldi	r22, 0xB0	; 176
    6978:	75 e0       	ldi	r23, 0x05	; 5
    697a:	80 e5       	ldi	r24, 0x50	; 80
    697c:	9a e0       	ldi	r25, 0x0A	; 10
    697e:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    6982:	6d ea       	ldi	r22, 0xAD	; 173
    6984:	75 e0       	ldi	r23, 0x05	; 5
    6986:	87 e5       	ldi	r24, 0x57	; 87
    6988:	9a e0       	ldi	r25, 0x0A	; 10
    698a:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    698e:	68 ea       	ldi	r22, 0xA8	; 168
    6990:	75 e0       	ldi	r23, 0x05	; 5
    6992:	8e e5       	ldi	r24, 0x5E	; 94
    6994:	9a e0       	ldi	r25, 0x0A	; 10
    6996:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    699a:	63 ea       	ldi	r22, 0xA3	; 163
    699c:	75 e0       	ldi	r23, 0x05	; 5
    699e:	85 e6       	ldi	r24, 0x65	; 101
    69a0:	9a e0       	ldi	r25, 0x0A	; 10
    69a2:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    69a6:	6e e9       	ldi	r22, 0x9E	; 158
    69a8:	75 e0       	ldi	r23, 0x05	; 5
    69aa:	8c ef       	ldi	r24, 0xFC	; 252
    69ac:	99 e0       	ldi	r25, 0x09	; 9
    69ae:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    69b2:	67 e9       	ldi	r22, 0x97	; 151
    69b4:	75 e0       	ldi	r23, 0x05	; 5
    69b6:	83 e0       	ldi	r24, 0x03	; 3
    69b8:	9a e0       	ldi	r25, 0x0A	; 10
    69ba:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    69be:	6e e8       	ldi	r22, 0x8E	; 142
    69c0:	75 e0       	ldi	r23, 0x05	; 5
    69c2:	8a e0       	ldi	r24, 0x0A	; 10
    69c4:	9a e0       	ldi	r25, 0x0A	; 10
    69c6:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    69ca:	6a e8       	ldi	r22, 0x8A	; 138
    69cc:	75 e0       	ldi	r23, 0x05	; 5
    69ce:	81 e1       	ldi	r24, 0x11	; 17
    69d0:	9a e0       	ldi	r25, 0x0A	; 10
    69d2:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    69d6:	66 e8       	ldi	r22, 0x86	; 134
    69d8:	75 e0       	ldi	r23, 0x05	; 5
    69da:	88 e1       	ldi	r24, 0x18	; 24
    69dc:	9a e0       	ldi	r25, 0x0A	; 10
    69de:	0e 94 8d 4f 	call	0x9f1a	; 0x9f1a <String::String(char const*)>
    69e2:	6f e7       	ldi	r22, 0x7F	; 127
    69e4:	75 e0       	ldi	r23, 0x05	; 5
    69e6:	8f e1       	ldi	r24, 0x1F	; 31
    69e8:	9a e0       	ldi	r25, 0x0A	; 10
    69ea:	0c 94 8d 4f 	jmp	0x9f1a	; 0x9f1a <String::String(char const*)>

000069ee <_GLOBAL__sub_D_matrix>:
    69ee:	cf 93       	push	r28
    69f0:	df 93       	push	r29
    69f2:	c6 e2       	ldi	r28, 0x26	; 38
    69f4:	da e0       	ldi	r29, 0x0A	; 10
    69f6:	27 97       	sbiw	r28, 0x07	; 7
    69f8:	ce 01       	movw	r24, r28
    69fa:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    69fe:	89 e0       	ldi	r24, 0x09	; 9
    6a00:	cc 3f       	cpi	r28, 0xFC	; 252
    6a02:	d8 07       	cpc	r29, r24
    6a04:	c1 f7       	brne	.-16     	; 0x69f6 <_GLOBAL__sub_D_matrix+0x8>
    6a06:	cc e6       	ldi	r28, 0x6C	; 108
    6a08:	da e0       	ldi	r29, 0x0A	; 10
    6a0a:	27 97       	sbiw	r28, 0x07	; 7
    6a0c:	ce 01       	movw	r24, r28
    6a0e:	0e 94 24 4f 	call	0x9e48	; 0x9e48 <String::~String()>
    6a12:	8a e0       	ldi	r24, 0x0A	; 10
    6a14:	c6 32       	cpi	r28, 0x26	; 38
    6a16:	d8 07       	cpc	r29, r24
    6a18:	c1 f7       	brne	.-16     	; 0x6a0a <_GLOBAL__sub_D_matrix+0x1c>
    6a1a:	df 91       	pop	r29
    6a1c:	cf 91       	pop	r28
    6a1e:	08 95       	ret

00006a20 <checkIncomingMIDI()>:
    6a20:	87 ee       	ldi	r24, 0xE7	; 231
    6a22:	90 e1       	ldi	r25, 0x10	; 16
    6a24:	0e 94 8f 4a 	call	0x951e	; 0x951e <HardwareSerial::available()>
    6a28:	89 2b       	or	r24, r25
    6a2a:	81 f0       	breq	.+32     	; 0x6a4c <checkIncomingMIDI()+0x2c>
    6a2c:	87 ee       	ldi	r24, 0xE7	; 231
    6a2e:	90 e1       	ldi	r25, 0x10	; 16
    6a30:	0e 94 c2 4a 	call	0x9584	; 0x9584 <HardwareSerial::read()>
    6a34:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <incomingMidiByte>
    6a38:	8f 3f       	cpi	r24, 0xFF	; 255
    6a3a:	41 f0       	breq	.+16     	; 0x6a4c <checkIncomingMIDI()+0x2c>
    6a3c:	87 ff       	sbrs	r24, 7
    6a3e:	0d c0       	rjmp	.+26     	; 0x6a5a <checkIncomingMIDI()+0x3a>
    6a40:	80 93 c6 0a 	sts	0x0AC6, r24	; 0x800ac6 <midiStatusByte>
    6a44:	10 92 c5 0a 	sts	0x0AC5, r1	; 0x800ac5 <midiDataByte1>
    6a48:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <midiDataByte2>
    6a4c:	87 ee       	ldi	r24, 0xE7	; 231
    6a4e:	90 e1       	ldi	r25, 0x10	; 16
    6a50:	0e 94 8f 4a 	call	0x951e	; 0x951e <HardwareSerial::available()>
    6a54:	89 2b       	or	r24, r25
    6a56:	21 f7       	brne	.-56     	; 0x6a20 <checkIncomingMIDI()>
    6a58:	08 95       	ret
    6a5a:	90 91 c5 0a 	lds	r25, 0x0AC5	; 0x800ac5 <midiDataByte1>
    6a5e:	91 11       	cpse	r25, r1
    6a60:	11 c0       	rjmp	.+34     	; 0x6a84 <checkIncomingMIDI()+0x64>
    6a62:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <midiDataByte1>
    6a66:	80 91 c6 0a 	lds	r24, 0x0AC6	; 0x800ac6 <midiStatusByte>
    6a6a:	89 3b       	cpi	r24, 0xB9	; 185
    6a6c:	79 f7       	brne	.-34     	; 0x6a4c <checkIncomingMIDI()+0x2c>
    6a6e:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <midiDataByte1>
    6a72:	86 31       	cpi	r24, 0x16	; 22
    6a74:	71 f4       	brne	.+28     	; 0x6a92 <checkIncomingMIDI()+0x72>
    6a76:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <midiDataByte2>
    6a7a:	88 23       	and	r24, r24
    6a7c:	39 f3       	breq	.-50     	; 0x6a4c <checkIncomingMIDI()+0x2c>
    6a7e:	0e 94 7e 1c 	call	0x38fc	; 0x38fc <switchToSong(unsigned char)>
    6a82:	e4 cf       	rjmp	.-56     	; 0x6a4c <checkIncomingMIDI()+0x2c>
    6a84:	90 91 c4 0a 	lds	r25, 0x0AC4	; 0x800ac4 <midiDataByte2>
    6a88:	91 11       	cpse	r25, r1
    6a8a:	ed cf       	rjmp	.-38     	; 0x6a66 <checkIncomingMIDI()+0x46>
    6a8c:	80 93 c4 0a 	sts	0x0AC4, r24	; 0x800ac4 <midiDataByte2>
    6a90:	ea cf       	rjmp	.-44     	; 0x6a66 <checkIncomingMIDI()+0x46>
    6a92:	87 31       	cpi	r24, 0x17	; 23
    6a94:	d9 f6       	brne	.-74     	; 0x6a4c <checkIncomingMIDI()+0x2c>
    6a96:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <midiDataByte2>
    6a9a:	0e 94 ed 1b 	call	0x37da	; 0x37da <switchToPart(unsigned char)>
    6a9e:	d6 cf       	rjmp	.-84     	; 0x6a4c <checkIncomingMIDI()+0x2c>

00006aa0 <loop>:
    6aa0:	8f 92       	push	r8
    6aa2:	9f 92       	push	r9
    6aa4:	af 92       	push	r10
    6aa6:	bf 92       	push	r11
    6aa8:	cf 92       	push	r12
    6aaa:	df 92       	push	r13
    6aac:	ef 92       	push	r14
    6aae:	ff 92       	push	r15
    6ab0:	0f 93       	push	r16
    6ab2:	1f 93       	push	r17
    6ab4:	cf 93       	push	r28
    6ab6:	80 91 b4 0a 	lds	r24, 0x0AB4	; 0x800ab4 <ISR_USART_got_a_byte>
    6aba:	88 23       	and	r24, r24
    6abc:	41 f0       	breq	.+16     	; 0x6ace <loop+0x2e>
    6abe:	60 91 b5 0a 	lds	r22, 0x0AB5	; 0x800ab5 <ISR_received_USART_byte>
    6ac2:	8c e5       	ldi	r24, 0x5C	; 92
    6ac4:	91 e1       	ldi	r25, 0x11	; 17
    6ac6:	0e 94 a5 05 	call	0xb4a	; 0xb4a <Print::println(unsigned char)>
    6aca:	10 92 b4 0a 	sts	0x0AB4, r1	; 0x800ab4 <ISR_USART_got_a_byte>
    6ace:	80 91 b6 0a 	lds	r24, 0x0AB6	; 0x800ab6 <OneSecondHasPast>
    6ad2:	88 23       	and	r24, r24
    6ad4:	39 f0       	breq	.+14     	; 0x6ae4 <loop+0x44>
    6ad6:	80 91 c1 0a 	lds	r24, 0x0AC1	; 0x800ac1 <secondsForVoltage>
    6ada:	8f 5f       	subi	r24, 0xFF	; 255
    6adc:	80 93 c1 0a 	sts	0x0AC1, r24	; 0x800ac1 <secondsForVoltage>
    6ae0:	10 92 b6 0a 	sts	0x0AB6, r1	; 0x800ab6 <OneSecondHasPast>
    6ae4:	80 91 c1 0a 	lds	r24, 0x0AC1	; 0x800ac1 <secondsForVoltage>
    6ae8:	88 23       	and	r24, r24
    6aea:	09 f4       	brne	.+2      	; 0x6aee <loop+0x4e>
    6aec:	46 c0       	rjmp	.+140    	; 0x6b7a <loop+0xda>
    6aee:	c0 91 c3 0a 	lds	r28, 0x0AC3	; 0x800ac3 <voltageSmooth>
    6af2:	10 92 c1 0a 	sts	0x0AC1, r1	; 0x800ac1 <secondsForVoltage>
    6af6:	88 e2       	ldi	r24, 0x28	; 40
    6af8:	0e 94 aa 46 	call	0x8d54	; 0x8d54 <analogRead>
    6afc:	bc 01       	movw	r22, r24
    6afe:	99 0f       	add	r25, r25
    6b00:	88 0b       	sbc	r24, r24
    6b02:	99 0b       	sbc	r25, r25
    6b04:	1f 92       	push	r1
    6b06:	1f 92       	push	r1
    6b08:	1f 92       	push	r1
    6b0a:	28 e7       	ldi	r18, 0x78	; 120
    6b0c:	2f 93       	push	r18
    6b0e:	a1 2c       	mov	r10, r1
    6b10:	b1 2c       	mov	r11, r1
    6b12:	65 01       	movw	r12, r10
    6b14:	ee 24       	eor	r14, r14
    6b16:	ea 94       	dec	r14
    6b18:	13 e0       	ldi	r17, 0x03	; 3
    6b1a:	f1 2e       	mov	r15, r17
    6b1c:	00 e0       	ldi	r16, 0x00	; 0
    6b1e:	10 e0       	ldi	r17, 0x00	; 0
    6b20:	20 e0       	ldi	r18, 0x00	; 0
    6b22:	30 e0       	ldi	r19, 0x00	; 0
    6b24:	a9 01       	movw	r20, r18
    6b26:	0e 94 e5 4e 	call	0x9dca	; 0x9dca <map(long, long, long, long, long)>
    6b2a:	4b 01       	movw	r8, r22
    6b2c:	5c 01       	movw	r10, r24
    6b2e:	6c 2f       	mov	r22, r28
    6b30:	70 e0       	ldi	r23, 0x00	; 0
    6b32:	90 e0       	ldi	r25, 0x00	; 0
    6b34:	80 e0       	ldi	r24, 0x00	; 0
    6b36:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <__floatsisf>
    6b3a:	23 e3       	ldi	r18, 0x33	; 51
    6b3c:	33 e3       	ldi	r19, 0x33	; 51
    6b3e:	43 e3       	ldi	r20, 0x33	; 51
    6b40:	5f e3       	ldi	r21, 0x3F	; 63
    6b42:	0e 94 ee 50 	call	0xa1dc	; 0xa1dc <__mulsf3>
    6b46:	6b 01       	movw	r12, r22
    6b48:	7c 01       	movw	r14, r24
    6b4a:	c5 01       	movw	r24, r10
    6b4c:	b4 01       	movw	r22, r8
    6b4e:	0e 94 62 50 	call	0xa0c4	; 0xa0c4 <__floatsisf>
    6b52:	2a e9       	ldi	r18, 0x9A	; 154
    6b54:	39 e9       	ldi	r19, 0x99	; 153
    6b56:	49 e9       	ldi	r20, 0x99	; 153
    6b58:	5e e3       	ldi	r21, 0x3E	; 62
    6b5a:	0e 94 ee 50 	call	0xa1dc	; 0xa1dc <__mulsf3>
    6b5e:	9b 01       	movw	r18, r22
    6b60:	ac 01       	movw	r20, r24
    6b62:	c7 01       	movw	r24, r14
    6b64:	b6 01       	movw	r22, r12
    6b66:	0e 94 d0 4f 	call	0x9fa0	; 0x9fa0 <__addsf3>
    6b6a:	0e 94 34 50 	call	0xa068	; 0xa068 <__fixunssfsi>
    6b6e:	60 93 c3 0a 	sts	0x0AC3, r22	; 0x800ac3 <voltageSmooth>
    6b72:	0f 90       	pop	r0
    6b74:	0f 90       	pop	r0
    6b76:	0f 90       	pop	r0
    6b78:	0f 90       	pop	r0
    6b7a:	80 91 c3 0a 	lds	r24, 0x0AC3	; 0x800ac3 <voltageSmooth>
    6b7e:	87 36       	cpi	r24, 0x67	; 103
    6b80:	08 f4       	brcc	.+2      	; 0x6b84 <loop+0xe4>
    6b82:	6a c0       	rjmp	.+212    	; 0x6c58 <loop+0x1b8>
    6b84:	4d df       	rcall	.-358    	; 0x6a20 <checkIncomingMIDI()>
    6b86:	80 91 ba 0a 	lds	r24, 0x0ABA	; 0x800aba <flag_processFastLED>
    6b8a:	88 23       	and	r24, r24
    6b8c:	29 f1       	breq	.+74     	; 0x6bd8 <loop+0x138>
    6b8e:	8f e0       	ldi	r24, 0x0F	; 15
    6b90:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    6b94:	e0 91 cc 0a 	lds	r30, 0x0ACC	; 0x800acc <songID>
    6b98:	e1 50       	subi	r30, 0x01	; 1
    6b9a:	e4 31       	cpi	r30, 0x14	; 20
    6b9c:	c8 f4       	brcc	.+50     	; 0x6bd0 <loop+0x130>
    6b9e:	f0 e0       	ldi	r31, 0x00	; 0
    6ba0:	ec 52       	subi	r30, 0x2C	; 44
    6ba2:	fa 4c       	sbci	r31, 0xCA	; 202
    6ba4:	0c 94 c5 51 	jmp	0xa38a	; 0xa38a <__tablejump2__>
    6ba8:	f8 35       	cpi	r31, 0x58	; 88
    6baa:	fb 35       	cpi	r31, 0x5B	; 91
    6bac:	fe 35       	cpi	r31, 0x5E	; 94
    6bae:	01 36       	cpi	r16, 0x61	; 97
    6bb0:	04 36       	cpi	r16, 0x64	; 100
    6bb2:	07 36       	cpi	r16, 0x67	; 103
    6bb4:	0a 36       	cpi	r16, 0x6A	; 106
    6bb6:	0d 36       	cpi	r16, 0x6D	; 109
    6bb8:	10 36       	cpi	r17, 0x60	; 96
    6bba:	13 36       	cpi	r17, 0x63	; 99
    6bbc:	16 36       	cpi	r17, 0x66	; 102
    6bbe:	19 36       	cpi	r17, 0x69	; 105
    6bc0:	1c 36       	cpi	r17, 0x6C	; 108
    6bc2:	1f 36       	cpi	r17, 0x6F	; 111
    6bc4:	22 36       	cpi	r18, 0x62	; 98
    6bc6:	25 36       	cpi	r18, 0x65	; 101
    6bc8:	28 36       	cpi	r18, 0x68	; 104
    6bca:	2a 36       	cpi	r18, 0x6A	; 106
    6bcc:	e8 35       	cpi	r30, 0x58	; 88
    6bce:	1c 36       	cpi	r17, 0x6C	; 108
    6bd0:	0e 94 76 1d 	call	0x3aec	; 0x3aec <defaultLoop()>
    6bd4:	10 92 ba 0a 	sts	0x0ABA, r1	; 0x800aba <flag_processFastLED>
    6bd8:	cf 91       	pop	r28
    6bda:	1f 91       	pop	r17
    6bdc:	0f 91       	pop	r16
    6bde:	ff 90       	pop	r15
    6be0:	ef 90       	pop	r14
    6be2:	df 90       	pop	r13
    6be4:	cf 90       	pop	r12
    6be6:	bf 90       	pop	r11
    6be8:	af 90       	pop	r10
    6bea:	9f 90       	pop	r9
    6bec:	8f 90       	pop	r8
    6bee:	08 95       	ret
    6bf0:	0e 94 21 1e 	call	0x3c42	; 0x3c42 <LearnToFly()>
    6bf4:	ef cf       	rjmp	.-34     	; 0x6bd4 <loop+0x134>
    6bf6:	0e 94 e6 1e 	call	0x3dcc	; 0x3dcc <Castle()>
    6bfa:	ec cf       	rjmp	.-40     	; 0x6bd4 <loop+0x134>
    6bfc:	0e 94 2d 20 	call	0x405a	; 0x405a <TooClose()>
    6c00:	e9 cf       	rjmp	.-46     	; 0x6bd4 <loop+0x134>
    6c02:	0e 94 08 21 	call	0x4210	; 0x4210 <Pokerface()>
    6c06:	e6 cf       	rjmp	.-52     	; 0x6bd4 <loop+0x134>
    6c08:	0e 94 ef 21 	call	0x43de	; 0x43de <UseSomebody()>
    6c0c:	e3 cf       	rjmp	.-58     	; 0x6bd4 <loop+0x134>
    6c0e:	0e 94 ac 22 	call	0x4558	; 0x4558 <NoRoots()>
    6c12:	e0 cf       	rjmp	.-64     	; 0x6bd4 <loop+0x134>
    6c14:	0e 94 15 24 	call	0x482a	; 0x482a <Firework()>
    6c18:	dd cf       	rjmp	.-70     	; 0x6bd4 <loop+0x134>
    6c1a:	0e 94 53 25 	call	0x4aa6	; 0x4aa6 <Diamonds()>
    6c1e:	da cf       	rjmp	.-76     	; 0x6bd4 <loop+0x134>
    6c20:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <SetFire()>
    6c24:	d7 cf       	rjmp	.-82     	; 0x6bd4 <loop+0x134>
    6c26:	0e 94 fa 26 	call	0x4df4	; 0x4df4 <Chandelier()>
    6c2a:	d4 cf       	rjmp	.-88     	; 0x6bd4 <loop+0x134>
    6c2c:	0e 94 e2 27 	call	0x4fc4	; 0x4fc4 <Titanium()>
    6c30:	d1 cf       	rjmp	.-94     	; 0x6bd4 <loop+0x134>
    6c32:	0e 94 b7 28 	call	0x516e	; 0x516e <SomeoneYouLoved()>
    6c36:	ce cf       	rjmp	.-100    	; 0x6bd4 <loop+0x134>
    6c38:	0e 94 9f 29 	call	0x533e	; 0x533e <ShouldntStop()>
    6c3c:	cb cf       	rjmp	.-106    	; 0x6bd4 <loop+0x134>
    6c3e:	0e 94 87 2a 	call	0x550e	; 0x550e <SunAlwaysShinesOnTV()>
    6c42:	c8 cf       	rjmp	.-112    	; 0x6bd4 <loop+0x134>
    6c44:	0e 94 99 2c 	call	0x5932	; 0x5932 <peopleArePeople()>
    6c48:	c5 cf       	rjmp	.-118    	; 0x6bd4 <loop+0x134>
    6c4a:	0e 94 75 2d 	call	0x5aea	; 0x5aea <enjoyTheSilence()>
    6c4e:	c2 cf       	rjmp	.-124    	; 0x6bd4 <loop+0x134>
    6c50:	99 d8       	rcall	.-3790   	; 0x5d84 <sober()>
    6c52:	c0 cf       	rjmp	.-128    	; 0x6bd4 <loop+0x134>
    6c54:	e4 d9       	rcall	.-3128   	; 0x601e <prisoner()>
    6c56:	be cf       	rjmp	.-132    	; 0x6bd4 <loop+0x134>
    6c58:	60 e0       	ldi	r22, 0x00	; 0
    6c5a:	8c ec       	ldi	r24, 0xCC	; 204
    6c5c:	90 e1       	ldi	r25, 0x10	; 16
    6c5e:	0e 94 ee 42 	call	0x85dc	; 0x85dc <CFastLED::clear(bool)>
    6c62:	8c ec       	ldi	r24, 0xCC	; 204
    6c64:	90 e1       	ldi	r25, 0x10	; 16
    6c66:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    6c6a:	64 ef       	ldi	r22, 0xF4	; 244
    6c6c:	71 e0       	ldi	r23, 0x01	; 1
    6c6e:	80 e0       	ldi	r24, 0x00	; 0
    6c70:	90 e0       	ldi	r25, 0x00	; 0
    6c72:	0e 94 42 48 	call	0x9084	; 0x9084 <delay>
    6c76:	8f e0       	ldi	r24, 0x0F	; 15
    6c78:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <FastLED>
    6c7c:	8f ef       	ldi	r24, 0xFF	; 255
    6c7e:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <leds>
    6c82:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <leds+0x1>
    6c86:	10 92 cf 0a 	sts	0x0ACF, r1	; 0x800acf <leds+0x2>
    6c8a:	8c ec       	ldi	r24, 0xCC	; 204
    6c8c:	90 e1       	ldi	r25, 0x10	; 16
    6c8e:	0e 94 d7 05 	call	0xbae	; 0xbae <CFastLED::show()>
    6c92:	64 ef       	ldi	r22, 0xF4	; 244
    6c94:	71 e0       	ldi	r23, 0x01	; 1
    6c96:	80 e0       	ldi	r24, 0x00	; 0
    6c98:	90 e0       	ldi	r25, 0x00	; 0
    6c9a:	cf 91       	pop	r28
    6c9c:	1f 91       	pop	r17
    6c9e:	0f 91       	pop	r16
    6ca0:	ff 90       	pop	r15
    6ca2:	ef 90       	pop	r14
    6ca4:	df 90       	pop	r13
    6ca6:	cf 90       	pop	r12
    6ca8:	bf 90       	pop	r11
    6caa:	af 90       	pop	r10
    6cac:	9f 90       	pop	r9
    6cae:	8f 90       	pop	r8
    6cb0:	0c 94 42 48 	jmp	0x9084	; 0x9084 <delay>

00006cb4 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    6cb4:	90 e0       	ldi	r25, 0x00	; 0
    6cb6:	80 e0       	ldi	r24, 0x00	; 0
    6cb8:	08 95       	ret

00006cba <Print::flush()>:
    6cba:	08 95       	ret

00006cbc <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    6cbc:	2f 92       	push	r2
    6cbe:	3f 92       	push	r3
    6cc0:	4f 92       	push	r4
    6cc2:	5f 92       	push	r5
    6cc4:	6f 92       	push	r6
    6cc6:	7f 92       	push	r7
    6cc8:	8f 92       	push	r8
    6cca:	9f 92       	push	r9
    6ccc:	af 92       	push	r10
    6cce:	bf 92       	push	r11
    6cd0:	cf 92       	push	r12
    6cd2:	df 92       	push	r13
    6cd4:	ef 92       	push	r14
    6cd6:	ff 92       	push	r15
    6cd8:	0f 93       	push	r16
    6cda:	1f 93       	push	r17
    6cdc:	cf 93       	push	r28
    6cde:	df 93       	push	r29
    6ce0:	00 d0       	rcall	.+0      	; 0x6ce2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    6ce2:	00 d0       	rcall	.+0      	; 0x6ce4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    6ce4:	00 d0       	rcall	.+0      	; 0x6ce6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    6ce6:	cd b7       	in	r28, 0x3d	; 61
    6ce8:	de b7       	in	r29, 0x3e	; 62
    6cea:	3c 01       	movw	r6, r24
    6cec:	6a 01       	movw	r12, r20
    6cee:	3e 83       	std	Y+6, r19	; 0x06
    6cf0:	2d 83       	std	Y+5, r18	; 0x05
    6cf2:	fc 82       	std	Y+4, r15	; 0x04
    6cf4:	eb 82       	std	Y+3, r14	; 0x03
    6cf6:	58 01       	movw	r10, r16
    6cf8:	a4 1a       	sub	r10, r20
    6cfa:	b5 0a       	sbc	r11, r21
    6cfc:	b7 fe       	sbrs	r11, 7
    6cfe:	03 c0       	rjmp	.+6      	; 0x6d06 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    6d00:	b1 94       	neg	r11
    6d02:	a1 94       	neg	r10
    6d04:	b1 08       	sbc	r11, r1
    6d06:	8d 80       	ldd	r8, Y+5	; 0x05
    6d08:	9e 80       	ldd	r9, Y+6	; 0x06
    6d0a:	86 1a       	sub	r8, r22
    6d0c:	97 0a       	sbc	r9, r23
    6d0e:	97 fe       	sbrs	r9, 7
    6d10:	03 c0       	rjmp	.+6      	; 0x6d18 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    6d12:	91 94       	neg	r9
    6d14:	81 94       	neg	r8
    6d16:	91 08       	sbc	r9, r1
    6d18:	8a 14       	cp	r8, r10
    6d1a:	9b 04       	cpc	r9, r11
    6d1c:	5c f0       	brlt	.+22     	; 0x6d34 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    6d1e:	90 2f       	mov	r25, r16
    6d20:	81 2f       	mov	r24, r17
    6d22:	0d 81       	ldd	r16, Y+5	; 0x05
    6d24:	1e 81       	ldd	r17, Y+6	; 0x06
    6d26:	9d 83       	std	Y+5, r25	; 0x05
    6d28:	8e 83       	std	Y+6, r24	; 0x06
    6d2a:	9c 2d       	mov	r25, r12
    6d2c:	8d 2d       	mov	r24, r13
    6d2e:	6b 01       	movw	r12, r22
    6d30:	69 2f       	mov	r22, r25
    6d32:	78 2f       	mov	r23, r24
    6d34:	0c 15       	cp	r16, r12
    6d36:	1d 05       	cpc	r17, r13
    6d38:	5c f0       	brlt	.+22     	; 0x6d50 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    6d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    6d3c:	8e 81       	ldd	r24, Y+6	; 0x06
    6d3e:	7e 83       	std	Y+6, r23	; 0x06
    6d40:	6d 83       	std	Y+5, r22	; 0x05
    6d42:	69 2f       	mov	r22, r25
    6d44:	78 2f       	mov	r23, r24
    6d46:	90 2f       	mov	r25, r16
    6d48:	81 2f       	mov	r24, r17
    6d4a:	86 01       	movw	r16, r12
    6d4c:	c9 2e       	mov	r12, r25
    6d4e:	d8 2e       	mov	r13, r24
    6d50:	16 01       	movw	r2, r12
    6d52:	20 1a       	sub	r2, r16
    6d54:	31 0a       	sbc	r3, r17
    6d56:	2b 01       	movw	r4, r22
    6d58:	2d 81       	ldd	r18, Y+5	; 0x05
    6d5a:	3e 81       	ldd	r19, Y+6	; 0x06
    6d5c:	42 1a       	sub	r4, r18
    6d5e:	53 0a       	sbc	r5, r19
    6d60:	57 fe       	sbrs	r5, 7
    6d62:	03 c0       	rjmp	.+6      	; 0x6d6a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    6d64:	51 94       	neg	r5
    6d66:	41 94       	neg	r4
    6d68:	51 08       	sbc	r5, r1
    6d6a:	71 01       	movw	r14, r2
    6d6c:	37 fe       	sbrs	r3, 7
    6d6e:	03 c0       	rjmp	.+6      	; 0x6d76 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    6d70:	3f ef       	ldi	r19, 0xFF	; 255
    6d72:	e3 1a       	sub	r14, r19
    6d74:	f3 0a       	sbc	r15, r19
    6d76:	f5 94       	asr	r15
    6d78:	e7 94       	ror	r14
    6d7a:	8d 81       	ldd	r24, Y+5	; 0x05
    6d7c:	9e 81       	ldd	r25, Y+6	; 0x06
    6d7e:	86 17       	cp	r24, r22
    6d80:	97 07       	cpc	r25, r23
    6d82:	5c f5       	brge	.+86     	; 0x6dda <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    6d84:	a1 e0       	ldi	r26, 0x01	; 1
    6d86:	b0 e0       	ldi	r27, 0x00	; 0
    6d88:	ba 83       	std	Y+2, r27	; 0x02
    6d8a:	a9 83       	std	Y+1, r26	; 0x01
    6d8c:	c0 16       	cp	r12, r16
    6d8e:	d1 06       	cpc	r13, r17
    6d90:	4c f1       	brlt	.+82     	; 0x6de4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    6d92:	d3 01       	movw	r26, r6
    6d94:	ed 91       	ld	r30, X+
    6d96:	fc 91       	ld	r31, X
    6d98:	04 84       	ldd	r0, Z+12	; 0x0c
    6d9a:	f5 85       	ldd	r31, Z+13	; 0x0d
    6d9c:	e0 2d       	mov	r30, r0
    6d9e:	2b 81       	ldd	r18, Y+3	; 0x03
    6da0:	3c 81       	ldd	r19, Y+4	; 0x04
    6da2:	a8 01       	movw	r20, r16
    6da4:	6d 81       	ldd	r22, Y+5	; 0x05
    6da6:	7e 81       	ldd	r23, Y+6	; 0x06
    6da8:	8a 14       	cp	r8, r10
    6daa:	9b 04       	cpc	r9, r11
    6dac:	1c f0       	brlt	.+6      	; 0x6db4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    6dae:	4d 81       	ldd	r20, Y+5	; 0x05
    6db0:	5e 81       	ldd	r21, Y+6	; 0x06
    6db2:	b8 01       	movw	r22, r16
    6db4:	c3 01       	movw	r24, r6
    6db6:	09 95       	icall
    6db8:	e4 18       	sub	r14, r4
    6dba:	f5 08       	sbc	r15, r5
    6dbc:	f7 fe       	sbrs	r15, 7
    6dbe:	0a c0       	rjmp	.+20     	; 0x6dd4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    6dc0:	2d 81       	ldd	r18, Y+5	; 0x05
    6dc2:	3e 81       	ldd	r19, Y+6	; 0x06
    6dc4:	89 81       	ldd	r24, Y+1	; 0x01
    6dc6:	9a 81       	ldd	r25, Y+2	; 0x02
    6dc8:	28 0f       	add	r18, r24
    6dca:	39 1f       	adc	r19, r25
    6dcc:	3e 83       	std	Y+6, r19	; 0x06
    6dce:	2d 83       	std	Y+5, r18	; 0x05
    6dd0:	e2 0c       	add	r14, r2
    6dd2:	f3 1c       	adc	r15, r3
    6dd4:	0f 5f       	subi	r16, 0xFF	; 255
    6dd6:	1f 4f       	sbci	r17, 0xFF	; 255
    6dd8:	d9 cf       	rjmp	.-78     	; 0x6d8c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    6dda:	2f ef       	ldi	r18, 0xFF	; 255
    6ddc:	3f ef       	ldi	r19, 0xFF	; 255
    6dde:	3a 83       	std	Y+2, r19	; 0x02
    6de0:	29 83       	std	Y+1, r18	; 0x01
    6de2:	d4 cf       	rjmp	.-88     	; 0x6d8c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    6de4:	26 96       	adiw	r28, 0x06	; 6
    6de6:	0f b6       	in	r0, 0x3f	; 63
    6de8:	f8 94       	cli
    6dea:	de bf       	out	0x3e, r29	; 62
    6dec:	0f be       	out	0x3f, r0	; 63
    6dee:	cd bf       	out	0x3d, r28	; 61
    6df0:	df 91       	pop	r29
    6df2:	cf 91       	pop	r28
    6df4:	1f 91       	pop	r17
    6df6:	0f 91       	pop	r16
    6df8:	ff 90       	pop	r15
    6dfa:	ef 90       	pop	r14
    6dfc:	df 90       	pop	r13
    6dfe:	cf 90       	pop	r12
    6e00:	bf 90       	pop	r11
    6e02:	af 90       	pop	r10
    6e04:	9f 90       	pop	r9
    6e06:	8f 90       	pop	r8
    6e08:	7f 90       	pop	r7
    6e0a:	6f 90       	pop	r6
    6e0c:	5f 90       	pop	r5
    6e0e:	4f 90       	pop	r4
    6e10:	3f 90       	pop	r3
    6e12:	2f 90       	pop	r2
    6e14:	08 95       	ret

00006e16 <Adafruit_GFX::startWrite()>:
    6e16:	08 95       	ret

00006e18 <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    6e18:	dc 01       	movw	r26, r24
    6e1a:	ed 91       	ld	r30, X+
    6e1c:	fc 91       	ld	r31, X
    6e1e:	00 84       	ldd	r0, Z+8	; 0x08
    6e20:	f1 85       	ldd	r31, Z+9	; 0x09
    6e22:	e0 2d       	mov	r30, r0
    6e24:	09 94       	ijmp

00006e26 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    6e26:	0f 93       	push	r16
    6e28:	1f 93       	push	r17
    6e2a:	dc 01       	movw	r26, r24
    6e2c:	ed 91       	ld	r30, X+
    6e2e:	fc 91       	ld	r31, X
    6e30:	04 8c       	ldd	r0, Z+28	; 0x1c
    6e32:	f5 8d       	ldd	r31, Z+29	; 0x1d
    6e34:	e0 2d       	mov	r30, r0
    6e36:	09 95       	icall
    6e38:	1f 91       	pop	r17
    6e3a:	0f 91       	pop	r16
    6e3c:	08 95       	ret

00006e3e <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    6e3e:	0f 93       	push	r16
    6e40:	1f 93       	push	r17
    6e42:	dc 01       	movw	r26, r24
    6e44:	ed 91       	ld	r30, X+
    6e46:	fc 91       	ld	r31, X
    6e48:	06 8c       	ldd	r0, Z+30	; 0x1e
    6e4a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    6e4c:	e0 2d       	mov	r30, r0
    6e4e:	09 95       	icall
    6e50:	1f 91       	pop	r17
    6e52:	0f 91       	pop	r16
    6e54:	08 95       	ret

00006e56 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    6e56:	ef 92       	push	r14
    6e58:	ff 92       	push	r15
    6e5a:	0f 93       	push	r16
    6e5c:	1f 93       	push	r17
    6e5e:	dc 01       	movw	r26, r24
    6e60:	ed 91       	ld	r30, X+
    6e62:	fc 91       	ld	r31, X
    6e64:	00 a0       	ldd	r0, Z+32	; 0x20
    6e66:	f1 a1       	ldd	r31, Z+33	; 0x21
    6e68:	e0 2d       	mov	r30, r0
    6e6a:	09 95       	icall
    6e6c:	1f 91       	pop	r17
    6e6e:	0f 91       	pop	r16
    6e70:	ff 90       	pop	r15
    6e72:	ef 90       	pop	r14
    6e74:	08 95       	ret

00006e76 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    6e76:	8f 92       	push	r8
    6e78:	9f 92       	push	r9
    6e7a:	af 92       	push	r10
    6e7c:	bf 92       	push	r11
    6e7e:	cf 92       	push	r12
    6e80:	df 92       	push	r13
    6e82:	ef 92       	push	r14
    6e84:	ff 92       	push	r15
    6e86:	0f 93       	push	r16
    6e88:	1f 93       	push	r17
    6e8a:	cf 93       	push	r28
    6e8c:	df 93       	push	r29
    6e8e:	ec 01       	movw	r28, r24
    6e90:	5b 01       	movw	r10, r22
    6e92:	4a 01       	movw	r8, r20
    6e94:	69 01       	movw	r12, r18
    6e96:	78 01       	movw	r14, r16
    6e98:	e8 81       	ld	r30, Y
    6e9a:	f9 81       	ldd	r31, Y+1	; 0x01
    6e9c:	02 84       	ldd	r0, Z+10	; 0x0a
    6e9e:	f3 85       	ldd	r31, Z+11	; 0x0b
    6ea0:	e0 2d       	mov	r30, r0
    6ea2:	09 95       	icall
    6ea4:	c8 0c       	add	r12, r8
    6ea6:	d9 1c       	adc	r13, r9
    6ea8:	86 01       	movw	r16, r12
    6eaa:	01 50       	subi	r16, 0x01	; 1
    6eac:	11 09       	sbc	r17, r1
    6eae:	e8 81       	ld	r30, Y
    6eb0:	f9 81       	ldd	r31, Y+1	; 0x01
    6eb2:	04 88       	ldd	r0, Z+20	; 0x14
    6eb4:	f5 89       	ldd	r31, Z+21	; 0x15
    6eb6:	e0 2d       	mov	r30, r0
    6eb8:	95 01       	movw	r18, r10
    6eba:	a4 01       	movw	r20, r8
    6ebc:	b5 01       	movw	r22, r10
    6ebe:	ce 01       	movw	r24, r28
    6ec0:	09 95       	icall
    6ec2:	e8 81       	ld	r30, Y
    6ec4:	f9 81       	ldd	r31, Y+1	; 0x01
    6ec6:	06 88       	ldd	r0, Z+22	; 0x16
    6ec8:	f7 89       	ldd	r31, Z+23	; 0x17
    6eca:	e0 2d       	mov	r30, r0
    6ecc:	ce 01       	movw	r24, r28
    6ece:	df 91       	pop	r29
    6ed0:	cf 91       	pop	r28
    6ed2:	1f 91       	pop	r17
    6ed4:	0f 91       	pop	r16
    6ed6:	ff 90       	pop	r15
    6ed8:	ef 90       	pop	r14
    6eda:	df 90       	pop	r13
    6edc:	cf 90       	pop	r12
    6ede:	bf 90       	pop	r11
    6ee0:	af 90       	pop	r10
    6ee2:	9f 90       	pop	r9
    6ee4:	8f 90       	pop	r8
    6ee6:	09 94       	ijmp

00006ee8 <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    6ee8:	8f 92       	push	r8
    6eea:	9f 92       	push	r9
    6eec:	af 92       	push	r10
    6eee:	bf 92       	push	r11
    6ef0:	cf 92       	push	r12
    6ef2:	df 92       	push	r13
    6ef4:	ef 92       	push	r14
    6ef6:	ff 92       	push	r15
    6ef8:	0f 93       	push	r16
    6efa:	1f 93       	push	r17
    6efc:	cf 93       	push	r28
    6efe:	df 93       	push	r29
    6f00:	ec 01       	movw	r28, r24
    6f02:	5b 01       	movw	r10, r22
    6f04:	4a 01       	movw	r8, r20
    6f06:	69 01       	movw	r12, r18
    6f08:	e8 81       	ld	r30, Y
    6f0a:	f9 81       	ldd	r31, Y+1	; 0x01
    6f0c:	02 84       	ldd	r0, Z+10	; 0x0a
    6f0e:	f3 85       	ldd	r31, Z+11	; 0x0b
    6f10:	e0 2d       	mov	r30, r0
    6f12:	09 95       	icall
    6f14:	95 01       	movw	r18, r10
    6f16:	2c 0d       	add	r18, r12
    6f18:	3d 1d       	adc	r19, r13
    6f1a:	21 50       	subi	r18, 0x01	; 1
    6f1c:	31 09       	sbc	r19, r1
    6f1e:	e8 81       	ld	r30, Y
    6f20:	f9 81       	ldd	r31, Y+1	; 0x01
    6f22:	04 88       	ldd	r0, Z+20	; 0x14
    6f24:	f5 89       	ldd	r31, Z+21	; 0x15
    6f26:	e0 2d       	mov	r30, r0
    6f28:	78 01       	movw	r14, r16
    6f2a:	84 01       	movw	r16, r8
    6f2c:	a4 01       	movw	r20, r8
    6f2e:	b5 01       	movw	r22, r10
    6f30:	ce 01       	movw	r24, r28
    6f32:	09 95       	icall
    6f34:	e8 81       	ld	r30, Y
    6f36:	f9 81       	ldd	r31, Y+1	; 0x01
    6f38:	06 88       	ldd	r0, Z+22	; 0x16
    6f3a:	f7 89       	ldd	r31, Z+23	; 0x17
    6f3c:	e0 2d       	mov	r30, r0
    6f3e:	ce 01       	movw	r24, r28
    6f40:	df 91       	pop	r29
    6f42:	cf 91       	pop	r28
    6f44:	1f 91       	pop	r17
    6f46:	0f 91       	pop	r16
    6f48:	ff 90       	pop	r15
    6f4a:	ef 90       	pop	r14
    6f4c:	df 90       	pop	r13
    6f4e:	cf 90       	pop	r12
    6f50:	bf 90       	pop	r11
    6f52:	af 90       	pop	r10
    6f54:	9f 90       	pop	r9
    6f56:	8f 90       	pop	r8
    6f58:	09 94       	ijmp

00006f5a <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    6f5a:	4f 92       	push	r4
    6f5c:	5f 92       	push	r5
    6f5e:	6f 92       	push	r6
    6f60:	7f 92       	push	r7
    6f62:	8f 92       	push	r8
    6f64:	9f 92       	push	r9
    6f66:	af 92       	push	r10
    6f68:	bf 92       	push	r11
    6f6a:	cf 92       	push	r12
    6f6c:	df 92       	push	r13
    6f6e:	ef 92       	push	r14
    6f70:	ff 92       	push	r15
    6f72:	0f 93       	push	r16
    6f74:	1f 93       	push	r17
    6f76:	cf 93       	push	r28
    6f78:	df 93       	push	r29
    6f7a:	6c 01       	movw	r12, r24
    6f7c:	2b 01       	movw	r4, r22
    6f7e:	5a 01       	movw	r10, r20
    6f80:	39 01       	movw	r6, r18
    6f82:	48 01       	movw	r8, r16
    6f84:	dc 01       	movw	r26, r24
    6f86:	ed 91       	ld	r30, X+
    6f88:	fc 91       	ld	r31, X
    6f8a:	02 84       	ldd	r0, Z+10	; 0x0a
    6f8c:	f3 85       	ldd	r31, Z+11	; 0x0b
    6f8e:	e0 2d       	mov	r30, r0
    6f90:	09 95       	icall
    6f92:	e2 01       	movw	r28, r4
    6f94:	64 0c       	add	r6, r4
    6f96:	75 1c       	adc	r7, r5
    6f98:	d6 01       	movw	r26, r12
    6f9a:	ed 91       	ld	r30, X+
    6f9c:	fc 91       	ld	r31, X
    6f9e:	c6 15       	cp	r28, r6
    6fa0:	d7 05       	cpc	r29, r7
    6fa2:	5c f4       	brge	.+22     	; 0x6fba <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    6fa4:	00 88       	ldd	r0, Z+16	; 0x10
    6fa6:	f1 89       	ldd	r31, Z+17	; 0x11
    6fa8:	e0 2d       	mov	r30, r0
    6faa:	87 01       	movw	r16, r14
    6fac:	94 01       	movw	r18, r8
    6fae:	a5 01       	movw	r20, r10
    6fb0:	be 01       	movw	r22, r28
    6fb2:	c6 01       	movw	r24, r12
    6fb4:	09 95       	icall
    6fb6:	21 96       	adiw	r28, 0x01	; 1
    6fb8:	ef cf       	rjmp	.-34     	; 0x6f98 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    6fba:	06 88       	ldd	r0, Z+22	; 0x16
    6fbc:	f7 89       	ldd	r31, Z+23	; 0x17
    6fbe:	e0 2d       	mov	r30, r0
    6fc0:	c6 01       	movw	r24, r12
    6fc2:	df 91       	pop	r29
    6fc4:	cf 91       	pop	r28
    6fc6:	1f 91       	pop	r17
    6fc8:	0f 91       	pop	r16
    6fca:	ff 90       	pop	r15
    6fcc:	ef 90       	pop	r14
    6fce:	df 90       	pop	r13
    6fd0:	cf 90       	pop	r12
    6fd2:	bf 90       	pop	r11
    6fd4:	af 90       	pop	r10
    6fd6:	9f 90       	pop	r9
    6fd8:	8f 90       	pop	r8
    6fda:	7f 90       	pop	r7
    6fdc:	6f 90       	pop	r6
    6fde:	5f 90       	pop	r5
    6fe0:	4f 90       	pop	r4
    6fe2:	09 94       	ijmp

00006fe4 <Adafruit_GFX::fillScreen(unsigned int)>:
    6fe4:	ef 92       	push	r14
    6fe6:	ff 92       	push	r15
    6fe8:	0f 93       	push	r16
    6fea:	1f 93       	push	r17
    6fec:	dc 01       	movw	r26, r24
    6fee:	19 96       	adiw	r26, 0x09	; 9
    6ff0:	0d 91       	ld	r16, X+
    6ff2:	1c 91       	ld	r17, X
    6ff4:	1a 97       	sbiw	r26, 0x0a	; 10
    6ff6:	17 96       	adiw	r26, 0x07	; 7
    6ff8:	2d 91       	ld	r18, X+
    6ffa:	3c 91       	ld	r19, X
    6ffc:	18 97       	sbiw	r26, 0x08	; 8
    6ffe:	ed 91       	ld	r30, X+
    7000:	fc 91       	ld	r31, X
    7002:	00 a0       	ldd	r0, Z+32	; 0x20
    7004:	f1 a1       	ldd	r31, Z+33	; 0x21
    7006:	e0 2d       	mov	r30, r0
    7008:	7b 01       	movw	r14, r22
    700a:	50 e0       	ldi	r21, 0x00	; 0
    700c:	40 e0       	ldi	r20, 0x00	; 0
    700e:	70 e0       	ldi	r23, 0x00	; 0
    7010:	60 e0       	ldi	r22, 0x00	; 0
    7012:	09 95       	icall
    7014:	1f 91       	pop	r17
    7016:	0f 91       	pop	r16
    7018:	ff 90       	pop	r15
    701a:	ef 90       	pop	r14
    701c:	08 95       	ret

0000701e <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    701e:	6f 92       	push	r6
    7020:	7f 92       	push	r7
    7022:	8f 92       	push	r8
    7024:	9f 92       	push	r9
    7026:	af 92       	push	r10
    7028:	bf 92       	push	r11
    702a:	cf 92       	push	r12
    702c:	df 92       	push	r13
    702e:	ef 92       	push	r14
    7030:	ff 92       	push	r15
    7032:	0f 93       	push	r16
    7034:	1f 93       	push	r17
    7036:	cf 93       	push	r28
    7038:	df 93       	push	r29
    703a:	ec 01       	movw	r28, r24
    703c:	6b 01       	movw	r12, r22
    703e:	5a 01       	movw	r10, r20
    7040:	39 01       	movw	r6, r18
    7042:	48 01       	movw	r8, r16
    7044:	e8 81       	ld	r30, Y
    7046:	f9 81       	ldd	r31, Y+1	; 0x01
    7048:	02 84       	ldd	r0, Z+10	; 0x0a
    704a:	f3 85       	ldd	r31, Z+11	; 0x0b
    704c:	e0 2d       	mov	r30, r0
    704e:	09 95       	icall
    7050:	e8 81       	ld	r30, Y
    7052:	f9 81       	ldd	r31, Y+1	; 0x01
    7054:	02 88       	ldd	r0, Z+18	; 0x12
    7056:	f3 89       	ldd	r31, Z+19	; 0x13
    7058:	e0 2d       	mov	r30, r0
    705a:	87 01       	movw	r16, r14
    705c:	93 01       	movw	r18, r6
    705e:	a5 01       	movw	r20, r10
    7060:	b6 01       	movw	r22, r12
    7062:	ce 01       	movw	r24, r28
    7064:	09 95       	icall
    7066:	a5 01       	movw	r20, r10
    7068:	48 0d       	add	r20, r8
    706a:	59 1d       	adc	r21, r9
    706c:	41 50       	subi	r20, 0x01	; 1
    706e:	51 09       	sbc	r21, r1
    7070:	e8 81       	ld	r30, Y
    7072:	f9 81       	ldd	r31, Y+1	; 0x01
    7074:	02 88       	ldd	r0, Z+18	; 0x12
    7076:	f3 89       	ldd	r31, Z+19	; 0x13
    7078:	e0 2d       	mov	r30, r0
    707a:	93 01       	movw	r18, r6
    707c:	b6 01       	movw	r22, r12
    707e:	ce 01       	movw	r24, r28
    7080:	09 95       	icall
    7082:	e8 81       	ld	r30, Y
    7084:	f9 81       	ldd	r31, Y+1	; 0x01
    7086:	00 88       	ldd	r0, Z+16	; 0x10
    7088:	f1 89       	ldd	r31, Z+17	; 0x11
    708a:	e0 2d       	mov	r30, r0
    708c:	94 01       	movw	r18, r8
    708e:	a5 01       	movw	r20, r10
    7090:	b6 01       	movw	r22, r12
    7092:	ce 01       	movw	r24, r28
    7094:	09 95       	icall
    7096:	c6 0c       	add	r12, r6
    7098:	d7 1c       	adc	r13, r7
    709a:	b6 01       	movw	r22, r12
    709c:	61 50       	subi	r22, 0x01	; 1
    709e:	71 09       	sbc	r23, r1
    70a0:	e8 81       	ld	r30, Y
    70a2:	f9 81       	ldd	r31, Y+1	; 0x01
    70a4:	00 88       	ldd	r0, Z+16	; 0x10
    70a6:	f1 89       	ldd	r31, Z+17	; 0x11
    70a8:	e0 2d       	mov	r30, r0
    70aa:	94 01       	movw	r18, r8
    70ac:	a5 01       	movw	r20, r10
    70ae:	ce 01       	movw	r24, r28
    70b0:	09 95       	icall
    70b2:	e8 81       	ld	r30, Y
    70b4:	f9 81       	ldd	r31, Y+1	; 0x01
    70b6:	06 88       	ldd	r0, Z+22	; 0x16
    70b8:	f7 89       	ldd	r31, Z+23	; 0x17
    70ba:	e0 2d       	mov	r30, r0
    70bc:	ce 01       	movw	r24, r28
    70be:	df 91       	pop	r29
    70c0:	cf 91       	pop	r28
    70c2:	1f 91       	pop	r17
    70c4:	0f 91       	pop	r16
    70c6:	ff 90       	pop	r15
    70c8:	ef 90       	pop	r14
    70ca:	df 90       	pop	r13
    70cc:	cf 90       	pop	r12
    70ce:	bf 90       	pop	r11
    70d0:	af 90       	pop	r10
    70d2:	9f 90       	pop	r9
    70d4:	8f 90       	pop	r8
    70d6:	7f 90       	pop	r7
    70d8:	6f 90       	pop	r6
    70da:	09 94       	ijmp

000070dc <Adafruit_GFX::invertDisplay(bool)>:
    70dc:	08 95       	ret

000070de <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    70de:	6f 92       	push	r6
    70e0:	7f 92       	push	r7
    70e2:	8f 92       	push	r8
    70e4:	9f 92       	push	r9
    70e6:	af 92       	push	r10
    70e8:	bf 92       	push	r11
    70ea:	cf 92       	push	r12
    70ec:	df 92       	push	r13
    70ee:	ef 92       	push	r14
    70f0:	ff 92       	push	r15
    70f2:	0f 93       	push	r16
    70f4:	1f 93       	push	r17
    70f6:	cf 93       	push	r28
    70f8:	df 93       	push	r29
    70fa:	5c 01       	movw	r10, r24
    70fc:	eb 01       	movw	r28, r22
    70fe:	6a 01       	movw	r12, r20
    7100:	49 01       	movw	r8, r18
    7102:	38 01       	movw	r6, r16
    7104:	87 01       	movw	r16, r14
    7106:	dc 01       	movw	r26, r24
    7108:	ed 91       	ld	r30, X+
    710a:	fc 91       	ld	r31, X
    710c:	62 17       	cp	r22, r18
    710e:	73 07       	cpc	r23, r19
    7110:	19 f5       	brne	.+70     	; 0x7158 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    7112:	64 16       	cp	r6, r20
    7114:	75 06       	cpc	r7, r21
    7116:	2c f0       	brlt	.+10     	; 0x7122 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    7118:	96 2d       	mov	r25, r6
    711a:	87 2d       	mov	r24, r7
    711c:	3a 01       	movw	r6, r20
    711e:	c9 2e       	mov	r12, r25
    7120:	d8 2e       	mov	r13, r24
    7122:	96 01       	movw	r18, r12
    7124:	26 19       	sub	r18, r6
    7126:	37 09       	sbc	r19, r7
    7128:	2f 5f       	subi	r18, 0xFF	; 255
    712a:	3f 4f       	sbci	r19, 0xFF	; 255
    712c:	04 8c       	ldd	r0, Z+28	; 0x1c
    712e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    7130:	e0 2d       	mov	r30, r0
    7132:	a3 01       	movw	r20, r6
    7134:	be 01       	movw	r22, r28
    7136:	c5 01       	movw	r24, r10
    7138:	09 95       	icall
    713a:	df 91       	pop	r29
    713c:	cf 91       	pop	r28
    713e:	1f 91       	pop	r17
    7140:	0f 91       	pop	r16
    7142:	ff 90       	pop	r15
    7144:	ef 90       	pop	r14
    7146:	df 90       	pop	r13
    7148:	cf 90       	pop	r12
    714a:	bf 90       	pop	r11
    714c:	af 90       	pop	r10
    714e:	9f 90       	pop	r9
    7150:	8f 90       	pop	r8
    7152:	7f 90       	pop	r7
    7154:	6f 90       	pop	r6
    7156:	08 95       	ret
    7158:	46 15       	cp	r20, r6
    715a:	57 05       	cpc	r21, r7
    715c:	91 f4       	brne	.+36     	; 0x7182 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    715e:	26 17       	cp	r18, r22
    7160:	37 07       	cpc	r19, r23
    7162:	24 f0       	brlt	.+8      	; 0x716c <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    7164:	89 2d       	mov	r24, r9
    7166:	4b 01       	movw	r8, r22
    7168:	c2 2f       	mov	r28, r18
    716a:	d8 2f       	mov	r29, r24
    716c:	9e 01       	movw	r18, r28
    716e:	28 19       	sub	r18, r8
    7170:	39 09       	sbc	r19, r9
    7172:	2f 5f       	subi	r18, 0xFF	; 255
    7174:	3f 4f       	sbci	r19, 0xFF	; 255
    7176:	06 8c       	ldd	r0, Z+30	; 0x1e
    7178:	f7 8d       	ldd	r31, Z+31	; 0x1f
    717a:	e0 2d       	mov	r30, r0
    717c:	a6 01       	movw	r20, r12
    717e:	b4 01       	movw	r22, r8
    7180:	da cf       	rjmp	.-76     	; 0x7136 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    7182:	02 84       	ldd	r0, Z+10	; 0x0a
    7184:	f3 85       	ldd	r31, Z+11	; 0x0b
    7186:	e0 2d       	mov	r30, r0
    7188:	09 95       	icall
    718a:	d5 01       	movw	r26, r10
    718c:	ed 91       	ld	r30, X+
    718e:	fc 91       	ld	r31, X
    7190:	04 88       	ldd	r0, Z+20	; 0x14
    7192:	f5 89       	ldd	r31, Z+21	; 0x15
    7194:	e0 2d       	mov	r30, r0
    7196:	83 01       	movw	r16, r6
    7198:	94 01       	movw	r18, r8
    719a:	a6 01       	movw	r20, r12
    719c:	be 01       	movw	r22, r28
    719e:	c5 01       	movw	r24, r10
    71a0:	09 95       	icall
    71a2:	d5 01       	movw	r26, r10
    71a4:	ed 91       	ld	r30, X+
    71a6:	fc 91       	ld	r31, X
    71a8:	06 88       	ldd	r0, Z+22	; 0x16
    71aa:	f7 89       	ldd	r31, Z+23	; 0x17
    71ac:	e0 2d       	mov	r30, r0
    71ae:	c5 01       	movw	r24, r10
    71b0:	df 91       	pop	r29
    71b2:	cf 91       	pop	r28
    71b4:	1f 91       	pop	r17
    71b6:	0f 91       	pop	r16
    71b8:	ff 90       	pop	r15
    71ba:	ef 90       	pop	r14
    71bc:	df 90       	pop	r13
    71be:	cf 90       	pop	r12
    71c0:	bf 90       	pop	r11
    71c2:	af 90       	pop	r10
    71c4:	9f 90       	pop	r9
    71c6:	8f 90       	pop	r8
    71c8:	7f 90       	pop	r7
    71ca:	6f 90       	pop	r6
    71cc:	09 94       	ijmp

000071ce <Adafruit_GFX::setRotation(unsigned char)>:
    71ce:	fc 01       	movw	r30, r24
    71d0:	63 70       	andi	r22, 0x03	; 3
    71d2:	65 8b       	std	Z+21, r22	; 0x15
    71d4:	83 81       	ldd	r24, Z+3	; 0x03
    71d6:	94 81       	ldd	r25, Z+4	; 0x04
    71d8:	25 81       	ldd	r18, Z+5	; 0x05
    71da:	36 81       	ldd	r19, Z+6	; 0x06
    71dc:	61 30       	cpi	r22, 0x01	; 1
    71de:	39 f0       	breq	.+14     	; 0x71ee <Adafruit_GFX::setRotation(unsigned char)+0x20>
    71e0:	63 30       	cpi	r22, 0x03	; 3
    71e2:	29 f0       	breq	.+10     	; 0x71ee <Adafruit_GFX::setRotation(unsigned char)+0x20>
    71e4:	90 87       	std	Z+8, r25	; 0x08
    71e6:	87 83       	std	Z+7, r24	; 0x07
    71e8:	32 87       	std	Z+10, r19	; 0x0a
    71ea:	21 87       	std	Z+9, r18	; 0x09
    71ec:	08 95       	ret
    71ee:	30 87       	std	Z+8, r19	; 0x08
    71f0:	27 83       	std	Z+7, r18	; 0x07
    71f2:	92 87       	std	Z+10, r25	; 0x0a
    71f4:	81 87       	std	Z+9, r24	; 0x09
    71f6:	08 95       	ret

000071f8 <Adafruit_GFX::Adafruit_GFX(int, int)>:
    71f8:	fc 01       	movw	r30, r24
    71fa:	12 82       	std	Z+2, r1	; 0x02
    71fc:	87 e0       	ldi	r24, 0x07	; 7
    71fe:	99 e0       	ldi	r25, 0x09	; 9
    7200:	91 83       	std	Z+1, r25	; 0x01
    7202:	80 83       	st	Z, r24
    7204:	74 83       	std	Z+4, r23	; 0x04
    7206:	63 83       	std	Z+3, r22	; 0x03
    7208:	56 83       	std	Z+6, r21	; 0x06
    720a:	45 83       	std	Z+5, r20	; 0x05
    720c:	70 87       	std	Z+8, r23	; 0x08
    720e:	67 83       	std	Z+7, r22	; 0x07
    7210:	52 87       	std	Z+10, r21	; 0x0a
    7212:	41 87       	std	Z+9, r20	; 0x09
    7214:	15 8a       	std	Z+21, r1	; 0x15
    7216:	14 86       	std	Z+12, r1	; 0x0c
    7218:	13 86       	std	Z+11, r1	; 0x0b
    721a:	16 86       	std	Z+14, r1	; 0x0e
    721c:	15 86       	std	Z+13, r1	; 0x0d
    721e:	81 e0       	ldi	r24, 0x01	; 1
    7220:	84 8b       	std	Z+20, r24	; 0x14
    7222:	83 8b       	std	Z+19, r24	; 0x13
    7224:	2f ef       	ldi	r18, 0xFF	; 255
    7226:	3f ef       	ldi	r19, 0xFF	; 255
    7228:	32 8b       	std	Z+18, r19	; 0x12
    722a:	21 8b       	std	Z+17, r18	; 0x11
    722c:	30 8b       	std	Z+16, r19	; 0x10
    722e:	27 87       	std	Z+15, r18	; 0x0f
    7230:	86 8b       	std	Z+22, r24	; 0x16
    7232:	17 8a       	std	Z+23, r1	; 0x17
    7234:	11 8e       	std	Z+25, r1	; 0x19
    7236:	10 8e       	std	Z+24, r1	; 0x18
    7238:	08 95       	ret

0000723a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    723a:	2f 92       	push	r2
    723c:	3f 92       	push	r3
    723e:	4f 92       	push	r4
    7240:	5f 92       	push	r5
    7242:	6f 92       	push	r6
    7244:	7f 92       	push	r7
    7246:	8f 92       	push	r8
    7248:	9f 92       	push	r9
    724a:	af 92       	push	r10
    724c:	bf 92       	push	r11
    724e:	cf 92       	push	r12
    7250:	df 92       	push	r13
    7252:	ef 92       	push	r14
    7254:	ff 92       	push	r15
    7256:	0f 93       	push	r16
    7258:	1f 93       	push	r17
    725a:	cf 93       	push	r28
    725c:	df 93       	push	r29
    725e:	cd b7       	in	r28, 0x3d	; 61
    7260:	de b7       	in	r29, 0x3e	; 62
    7262:	2e 97       	sbiw	r28, 0x0e	; 14
    7264:	0f b6       	in	r0, 0x3f	; 63
    7266:	f8 94       	cli
    7268:	de bf       	out	0x3e, r29	; 62
    726a:	0f be       	out	0x3f, r0	; 63
    726c:	cd bf       	out	0x3d, r28	; 61
    726e:	5c 01       	movw	r10, r24
    7270:	2b 01       	movw	r4, r22
    7272:	5c 83       	std	Y+4, r21	; 0x04
    7274:	4b 83       	std	Y+3, r20	; 0x03
    7276:	3e 87       	std	Y+14, r19	; 0x0e
    7278:	2d 87       	std	Y+13, r18	; 0x0d
    727a:	fe 82       	std	Y+6, r15	; 0x06
    727c:	ed 82       	std	Y+5, r14	; 0x05
    727e:	16 01       	movw	r2, r12
    7280:	81 e0       	ldi	r24, 0x01	; 1
    7282:	90 e0       	ldi	r25, 0x00	; 0
    7284:	4c 01       	movw	r8, r24
    7286:	82 1a       	sub	r8, r18
    7288:	93 0a       	sbc	r9, r19
    728a:	c9 01       	movw	r24, r18
    728c:	91 95       	neg	r25
    728e:	81 95       	neg	r24
    7290:	91 09       	sbc	r25, r1
    7292:	9c 01       	movw	r18, r24
    7294:	22 0f       	add	r18, r18
    7296:	33 1f       	adc	r19, r19
    7298:	3a 83       	std	Y+2, r19	; 0x02
    729a:	29 83       	std	Y+1, r18	; 0x01
    729c:	c7 01       	movw	r24, r14
    729e:	01 96       	adiw	r24, 0x01	; 1
    72a0:	98 87       	std	Y+8, r25	; 0x08
    72a2:	8f 83       	std	Y+7, r24	; 0x07
    72a4:	f1 2c       	mov	r15, r1
    72a6:	e1 2c       	mov	r14, r1
    72a8:	66 24       	eor	r6, r6
    72aa:	63 94       	inc	r6
    72ac:	71 2c       	mov	r7, r1
    72ae:	90 2f       	mov	r25, r16
    72b0:	91 70       	andi	r25, 0x01	; 1
    72b2:	99 87       	std	Y+9, r25	; 0x09
    72b4:	02 70       	andi	r16, 0x02	; 2
    72b6:	0a 87       	std	Y+10, r16	; 0x0a
    72b8:	da 01       	movw	r26, r20
    72ba:	11 96       	adiw	r26, 0x01	; 1
    72bc:	bc 87       	std	Y+12, r27	; 0x0c
    72be:	ab 87       	std	Y+11, r26	; 0x0b
    72c0:	2d 85       	ldd	r18, Y+13	; 0x0d
    72c2:	3e 85       	ldd	r19, Y+14	; 0x0e
    72c4:	e2 16       	cp	r14, r18
    72c6:	f3 06       	cpc	r15, r19
    72c8:	0c f0       	brlt	.+2      	; 0x72cc <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    72ca:	8d c0       	rjmp	.+282    	; 0x73e6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    72cc:	cd 84       	ldd	r12, Y+13	; 0x0d
    72ce:	de 84       	ldd	r13, Y+14	; 0x0e
    72d0:	97 fc       	sbrc	r9, 7
    72d2:	0b c0       	rjmp	.+22     	; 0x72ea <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    72d4:	69 01       	movw	r12, r18
    72d6:	31 e0       	ldi	r19, 0x01	; 1
    72d8:	c3 1a       	sub	r12, r19
    72da:	d1 08       	sbc	r13, r1
    72dc:	89 81       	ldd	r24, Y+1	; 0x01
    72de:	9a 81       	ldd	r25, Y+2	; 0x02
    72e0:	02 96       	adiw	r24, 0x02	; 2
    72e2:	9a 83       	std	Y+2, r25	; 0x02
    72e4:	89 83       	std	Y+1, r24	; 0x01
    72e6:	88 0e       	add	r8, r24
    72e8:	99 1e       	adc	r9, r25
    72ea:	9f ef       	ldi	r25, 0xFF	; 255
    72ec:	e9 1a       	sub	r14, r25
    72ee:	f9 0a       	sbc	r15, r25
    72f0:	a2 e0       	ldi	r26, 0x02	; 2
    72f2:	6a 0e       	add	r6, r26
    72f4:	71 1c       	adc	r7, r1
    72f6:	86 0c       	add	r8, r6
    72f8:	97 1c       	adc	r9, r7
    72fa:	ce 14       	cp	r12, r14
    72fc:	df 04       	cpc	r13, r15
    72fe:	a4 f1       	brlt	.+104    	; 0x7368 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    7300:	b9 85       	ldd	r27, Y+9	; 0x09
    7302:	bb 23       	and	r27, r27
    7304:	b9 f0       	breq	.+46     	; 0x7334 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    7306:	96 01       	movw	r18, r12
    7308:	22 0f       	add	r18, r18
    730a:	33 1f       	adc	r19, r19
    730c:	8f 81       	ldd	r24, Y+7	; 0x07
    730e:	98 85       	ldd	r25, Y+8	; 0x08
    7310:	28 0f       	add	r18, r24
    7312:	39 1f       	adc	r19, r25
    7314:	d5 01       	movw	r26, r10
    7316:	ed 91       	ld	r30, X+
    7318:	fc 91       	ld	r31, X
    731a:	00 88       	ldd	r0, Z+16	; 0x10
    731c:	f1 89       	ldd	r31, Z+17	; 0x11
    731e:	e0 2d       	mov	r30, r0
    7320:	81 01       	movw	r16, r2
    7322:	4b 81       	ldd	r20, Y+3	; 0x03
    7324:	5c 81       	ldd	r21, Y+4	; 0x04
    7326:	4c 19       	sub	r20, r12
    7328:	5d 09       	sbc	r21, r13
    732a:	b2 01       	movw	r22, r4
    732c:	6e 0d       	add	r22, r14
    732e:	7f 1d       	adc	r23, r15
    7330:	c5 01       	movw	r24, r10
    7332:	09 95       	icall
    7334:	ba 85       	ldd	r27, Y+10	; 0x0a
    7336:	bb 23       	and	r27, r27
    7338:	b9 f0       	breq	.+46     	; 0x7368 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    733a:	96 01       	movw	r18, r12
    733c:	22 0f       	add	r18, r18
    733e:	33 1f       	adc	r19, r19
    7340:	8f 81       	ldd	r24, Y+7	; 0x07
    7342:	98 85       	ldd	r25, Y+8	; 0x08
    7344:	28 0f       	add	r18, r24
    7346:	39 1f       	adc	r19, r25
    7348:	d5 01       	movw	r26, r10
    734a:	ed 91       	ld	r30, X+
    734c:	fc 91       	ld	r31, X
    734e:	00 88       	ldd	r0, Z+16	; 0x10
    7350:	f1 89       	ldd	r31, Z+17	; 0x11
    7352:	e0 2d       	mov	r30, r0
    7354:	81 01       	movw	r16, r2
    7356:	4b 81       	ldd	r20, Y+3	; 0x03
    7358:	5c 81       	ldd	r21, Y+4	; 0x04
    735a:	4c 19       	sub	r20, r12
    735c:	5d 09       	sbc	r21, r13
    735e:	b2 01       	movw	r22, r4
    7360:	6e 19       	sub	r22, r14
    7362:	7f 09       	sbc	r23, r15
    7364:	c5 01       	movw	r24, r10
    7366:	09 95       	icall
    7368:	2d 85       	ldd	r18, Y+13	; 0x0d
    736a:	3e 85       	ldd	r19, Y+14	; 0x0e
    736c:	2c 15       	cp	r18, r12
    736e:	3d 05       	cpc	r19, r13
    7370:	b9 f1       	breq	.+110    	; 0x73e0 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    7372:	39 85       	ldd	r19, Y+9	; 0x09
    7374:	33 23       	and	r19, r19
    7376:	c1 f0       	breq	.+48     	; 0x73a8 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    7378:	93 01       	movw	r18, r6
    737a:	22 50       	subi	r18, 0x02	; 2
    737c:	31 09       	sbc	r19, r1
    737e:	8d 81       	ldd	r24, Y+5	; 0x05
    7380:	9e 81       	ldd	r25, Y+6	; 0x06
    7382:	28 0f       	add	r18, r24
    7384:	39 1f       	adc	r19, r25
    7386:	d5 01       	movw	r26, r10
    7388:	ed 91       	ld	r30, X+
    738a:	fc 91       	ld	r31, X
    738c:	00 88       	ldd	r0, Z+16	; 0x10
    738e:	f1 89       	ldd	r31, Z+17	; 0x11
    7390:	e0 2d       	mov	r30, r0
    7392:	81 01       	movw	r16, r2
    7394:	4b 85       	ldd	r20, Y+11	; 0x0b
    7396:	5c 85       	ldd	r21, Y+12	; 0x0c
    7398:	4e 19       	sub	r20, r14
    739a:	5f 09       	sbc	r21, r15
    739c:	6d 85       	ldd	r22, Y+13	; 0x0d
    739e:	7e 85       	ldd	r23, Y+14	; 0x0e
    73a0:	64 0d       	add	r22, r4
    73a2:	75 1d       	adc	r23, r5
    73a4:	c5 01       	movw	r24, r10
    73a6:	09 95       	icall
    73a8:	ba 85       	ldd	r27, Y+10	; 0x0a
    73aa:	bb 23       	and	r27, r27
    73ac:	c9 f0       	breq	.+50     	; 0x73e0 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    73ae:	93 01       	movw	r18, r6
    73b0:	22 50       	subi	r18, 0x02	; 2
    73b2:	31 09       	sbc	r19, r1
    73b4:	8d 81       	ldd	r24, Y+5	; 0x05
    73b6:	9e 81       	ldd	r25, Y+6	; 0x06
    73b8:	28 0f       	add	r18, r24
    73ba:	39 1f       	adc	r19, r25
    73bc:	b2 01       	movw	r22, r4
    73be:	ad 85       	ldd	r26, Y+13	; 0x0d
    73c0:	be 85       	ldd	r27, Y+14	; 0x0e
    73c2:	6a 1b       	sub	r22, r26
    73c4:	7b 0b       	sbc	r23, r27
    73c6:	d5 01       	movw	r26, r10
    73c8:	ed 91       	ld	r30, X+
    73ca:	fc 91       	ld	r31, X
    73cc:	00 88       	ldd	r0, Z+16	; 0x10
    73ce:	f1 89       	ldd	r31, Z+17	; 0x11
    73d0:	e0 2d       	mov	r30, r0
    73d2:	81 01       	movw	r16, r2
    73d4:	4b 85       	ldd	r20, Y+11	; 0x0b
    73d6:	5c 85       	ldd	r21, Y+12	; 0x0c
    73d8:	4e 19       	sub	r20, r14
    73da:	5f 09       	sbc	r21, r15
    73dc:	c5 01       	movw	r24, r10
    73de:	09 95       	icall
    73e0:	de 86       	std	Y+14, r13	; 0x0e
    73e2:	cd 86       	std	Y+13, r12	; 0x0d
    73e4:	6d cf       	rjmp	.-294    	; 0x72c0 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    73e6:	2e 96       	adiw	r28, 0x0e	; 14
    73e8:	0f b6       	in	r0, 0x3f	; 63
    73ea:	f8 94       	cli
    73ec:	de bf       	out	0x3e, r29	; 62
    73ee:	0f be       	out	0x3f, r0	; 63
    73f0:	cd bf       	out	0x3d, r28	; 61
    73f2:	df 91       	pop	r29
    73f4:	cf 91       	pop	r28
    73f6:	1f 91       	pop	r17
    73f8:	0f 91       	pop	r16
    73fa:	ff 90       	pop	r15
    73fc:	ef 90       	pop	r14
    73fe:	df 90       	pop	r13
    7400:	cf 90       	pop	r12
    7402:	bf 90       	pop	r11
    7404:	af 90       	pop	r10
    7406:	9f 90       	pop	r9
    7408:	8f 90       	pop	r8
    740a:	7f 90       	pop	r7
    740c:	6f 90       	pop	r6
    740e:	5f 90       	pop	r5
    7410:	4f 90       	pop	r4
    7412:	3f 90       	pop	r3
    7414:	2f 90       	pop	r2
    7416:	08 95       	ret

00007418 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    7418:	6f 92       	push	r6
    741a:	7f 92       	push	r7
    741c:	8f 92       	push	r8
    741e:	9f 92       	push	r9
    7420:	af 92       	push	r10
    7422:	bf 92       	push	r11
    7424:	cf 92       	push	r12
    7426:	df 92       	push	r13
    7428:	ef 92       	push	r14
    742a:	ff 92       	push	r15
    742c:	0f 93       	push	r16
    742e:	1f 93       	push	r17
    7430:	cf 93       	push	r28
    7432:	df 93       	push	r29
    7434:	ec 01       	movw	r28, r24
    7436:	4b 01       	movw	r8, r22
    7438:	3a 01       	movw	r6, r20
    743a:	59 01       	movw	r10, r18
    743c:	68 01       	movw	r12, r16
    743e:	e8 81       	ld	r30, Y
    7440:	f9 81       	ldd	r31, Y+1	; 0x01
    7442:	02 84       	ldd	r0, Z+10	; 0x0a
    7444:	f3 85       	ldd	r31, Z+11	; 0x0b
    7446:	e0 2d       	mov	r30, r0
    7448:	09 95       	icall
    744a:	95 01       	movw	r18, r10
    744c:	22 0f       	add	r18, r18
    744e:	33 1f       	adc	r19, r19
    7450:	2f 5f       	subi	r18, 0xFF	; 255
    7452:	3f 4f       	sbci	r19, 0xFF	; 255
    7454:	a3 01       	movw	r20, r6
    7456:	4a 19       	sub	r20, r10
    7458:	5b 09       	sbc	r21, r11
    745a:	e8 81       	ld	r30, Y
    745c:	f9 81       	ldd	r31, Y+1	; 0x01
    745e:	00 88       	ldd	r0, Z+16	; 0x10
    7460:	f1 89       	ldd	r31, Z+17	; 0x11
    7462:	e0 2d       	mov	r30, r0
    7464:	b4 01       	movw	r22, r8
    7466:	ce 01       	movw	r24, r28
    7468:	09 95       	icall
    746a:	f1 2c       	mov	r15, r1
    746c:	e1 2c       	mov	r14, r1
    746e:	03 e0       	ldi	r16, 0x03	; 3
    7470:	95 01       	movw	r18, r10
    7472:	a3 01       	movw	r20, r6
    7474:	b4 01       	movw	r22, r8
    7476:	ce 01       	movw	r24, r28
    7478:	e0 de       	rcall	.-576    	; 0x723a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    747a:	e8 81       	ld	r30, Y
    747c:	f9 81       	ldd	r31, Y+1	; 0x01
    747e:	06 88       	ldd	r0, Z+22	; 0x16
    7480:	f7 89       	ldd	r31, Z+23	; 0x17
    7482:	e0 2d       	mov	r30, r0
    7484:	ce 01       	movw	r24, r28
    7486:	df 91       	pop	r29
    7488:	cf 91       	pop	r28
    748a:	1f 91       	pop	r17
    748c:	0f 91       	pop	r16
    748e:	ff 90       	pop	r15
    7490:	ef 90       	pop	r14
    7492:	df 90       	pop	r13
    7494:	cf 90       	pop	r12
    7496:	bf 90       	pop	r11
    7498:	af 90       	pop	r10
    749a:	9f 90       	pop	r9
    749c:	8f 90       	pop	r8
    749e:	7f 90       	pop	r7
    74a0:	6f 90       	pop	r6
    74a2:	09 94       	ijmp

000074a4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    74a4:	2f 92       	push	r2
    74a6:	3f 92       	push	r3
    74a8:	4f 92       	push	r4
    74aa:	5f 92       	push	r5
    74ac:	6f 92       	push	r6
    74ae:	7f 92       	push	r7
    74b0:	8f 92       	push	r8
    74b2:	9f 92       	push	r9
    74b4:	af 92       	push	r10
    74b6:	bf 92       	push	r11
    74b8:	cf 92       	push	r12
    74ba:	df 92       	push	r13
    74bc:	ef 92       	push	r14
    74be:	ff 92       	push	r15
    74c0:	0f 93       	push	r16
    74c2:	1f 93       	push	r17
    74c4:	cf 93       	push	r28
    74c6:	df 93       	push	r29
    74c8:	cd b7       	in	r28, 0x3d	; 61
    74ca:	de b7       	in	r29, 0x3e	; 62
    74cc:	6a 97       	sbiw	r28, 0x1a	; 26
    74ce:	0f b6       	in	r0, 0x3f	; 63
    74d0:	f8 94       	cli
    74d2:	de bf       	out	0x3e, r29	; 62
    74d4:	0f be       	out	0x3f, r0	; 63
    74d6:	cd bf       	out	0x3d, r28	; 61
    74d8:	9a 8f       	std	Y+26, r25	; 0x1a
    74da:	89 8f       	std	Y+25, r24	; 0x19
    74dc:	7a 83       	std	Y+2, r23	; 0x02
    74de:	69 83       	std	Y+1, r22	; 0x01
    74e0:	4a 01       	movw	r8, r20
    74e2:	d2 2e       	mov	r13, r18
    74e4:	18 87       	std	Y+8, r17	; 0x08
    74e6:	0f 83       	std	Y+7, r16	; 0x07
    74e8:	37 01       	movw	r6, r14
    74ea:	bc 2c       	mov	r11, r12
    74ec:	dc 01       	movw	r26, r24
    74ee:	58 96       	adiw	r26, 0x18	; 24
    74f0:	2d 91       	ld	r18, X+
    74f2:	3c 91       	ld	r19, X
    74f4:	59 97       	sbiw	r26, 0x19	; 25
    74f6:	21 15       	cp	r18, r1
    74f8:	31 05       	cpc	r19, r1
    74fa:	09 f0       	breq	.+2      	; 0x74fe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    74fc:	15 c1       	rjmp	.+554    	; 0x7728 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    74fe:	17 96       	adiw	r26, 0x07	; 7
    7500:	8d 91       	ld	r24, X+
    7502:	9c 91       	ld	r25, X
    7504:	18 97       	sbiw	r26, 0x08	; 8
    7506:	68 17       	cp	r22, r24
    7508:	79 07       	cpc	r23, r25
    750a:	0c f0       	brlt	.+2      	; 0x750e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    750c:	d7 c1       	rjmp	.+942    	; 0x78bc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    750e:	19 96       	adiw	r26, 0x09	; 9
    7510:	8d 91       	ld	r24, X+
    7512:	9c 91       	ld	r25, X
    7514:	48 17       	cp	r20, r24
    7516:	59 07       	cpc	r21, r25
    7518:	0c f0       	brlt	.+2      	; 0x751c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    751a:	d0 c1       	rjmp	.+928    	; 0x78bc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    751c:	4c 2c       	mov	r4, r12
    751e:	51 2c       	mov	r5, r1
    7520:	b6 e0       	ldi	r27, 0x06	; 6
    7522:	cb 9e       	mul	r12, r27
    7524:	60 0d       	add	r22, r0
    7526:	71 1d       	adc	r23, r1
    7528:	11 24       	eor	r1, r1
    752a:	7c 87       	std	Y+12, r23	; 0x0c
    752c:	6b 87       	std	Y+11, r22	; 0x0b
    752e:	16 16       	cp	r1, r22
    7530:	17 06       	cpc	r1, r23
    7532:	0c f0       	brlt	.+2      	; 0x7536 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    7534:	c3 c1       	rjmp	.+902    	; 0x78bc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    7536:	ea 2d       	mov	r30, r10
    7538:	f0 e0       	ldi	r31, 0x00	; 0
    753a:	fa 87       	std	Y+10, r31	; 0x0a
    753c:	e9 87       	std	Y+9, r30	; 0x09
    753e:	93 e0       	ldi	r25, 0x03	; 3
    7540:	ee 0f       	add	r30, r30
    7542:	ff 1f       	adc	r31, r31
    7544:	9a 95       	dec	r25
    7546:	e1 f7       	brne	.-8      	; 0x7540 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    7548:	f8 8b       	std	Y+16, r31	; 0x10
    754a:	ef 87       	std	Y+15, r30	; 0x0f
    754c:	cf 01       	movw	r24, r30
    754e:	84 0f       	add	r24, r20
    7550:	95 1f       	adc	r25, r21
    7552:	18 16       	cp	r1, r24
    7554:	19 06       	cpc	r1, r25
    7556:	0c f0       	brlt	.+2      	; 0x755a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    7558:	b1 c1       	rjmp	.+866    	; 0x78bc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    755a:	a9 8d       	ldd	r26, Y+25	; 0x19
    755c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    755e:	57 96       	adiw	r26, 0x17	; 23
    7560:	8c 91       	ld	r24, X
    7562:	81 11       	cpse	r24, r1
    7564:	04 c0       	rjmp	.+8      	; 0x756e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    7566:	bf ea       	ldi	r27, 0xAF	; 175
    7568:	bd 15       	cp	r27, r13
    756a:	08 f4       	brcc	.+2      	; 0x756e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    756c:	d3 94       	inc	r13
    756e:	a9 8d       	ldd	r26, Y+25	; 0x19
    7570:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7572:	ed 91       	ld	r30, X+
    7574:	fc 91       	ld	r31, X
    7576:	11 97       	sbiw	r26, 0x01	; 1
    7578:	02 84       	ldd	r0, Z+10	; 0x0a
    757a:	f3 85       	ldd	r31, Z+11	; 0x0b
    757c:	e0 2d       	mov	r30, r0
    757e:	cd 01       	movw	r24, r26
    7580:	09 95       	icall
    7582:	b5 e0       	ldi	r27, 0x05	; 5
    7584:	db 9e       	mul	r13, r27
    7586:	c0 01       	movw	r24, r0
    7588:	11 24       	eor	r1, r1
    758a:	e9 81       	ldd	r30, Y+1	; 0x01
    758c:	fa 81       	ldd	r31, Y+2	; 0x02
    758e:	fc 83       	std	Y+4, r31	; 0x04
    7590:	eb 83       	std	Y+3, r30	; 0x03
    7592:	31 2c       	mov	r3, r1
    7594:	21 2c       	mov	r2, r1
    7596:	9c 01       	movw	r18, r24
    7598:	28 52       	subi	r18, 0x28	; 40
    759a:	3f 4f       	sbci	r19, 0xFF	; 255
    759c:	38 8f       	std	Y+24, r19	; 0x18
    759e:	2f 8b       	std	Y+23, r18	; 0x17
    75a0:	4a 2d       	mov	r20, r10
    75a2:	50 e0       	ldi	r21, 0x00	; 0
    75a4:	5e 8b       	std	Y+22, r21	; 0x16
    75a6:	4d 8b       	std	Y+21, r20	; 0x15
    75a8:	ef 89       	ldd	r30, Y+23	; 0x17
    75aa:	f8 8d       	ldd	r31, Y+24	; 0x18
    75ac:	e2 0d       	add	r30, r2
    75ae:	f3 1d       	adc	r31, r3
    75b0:	44 91       	lpm	r20, Z
    75b2:	9e 82       	std	Y+6, r9	; 0x06
    75b4:	8d 82       	std	Y+5, r8	; 0x05
    75b6:	d1 2c       	mov	r13, r1
    75b8:	c1 2c       	mov	r12, r1
    75ba:	69 81       	ldd	r22, Y+1	; 0x01
    75bc:	7a 81       	ldd	r23, Y+2	; 0x02
    75be:	62 0d       	add	r22, r2
    75c0:	73 1d       	adc	r23, r3
    75c2:	7a 8b       	std	Y+18, r23	; 0x12
    75c4:	69 8b       	std	Y+17, r22	; 0x11
    75c6:	84 2f       	mov	r24, r20
    75c8:	90 e0       	ldi	r25, 0x00	; 0
    75ca:	9c 8b       	std	Y+20, r25	; 0x14
    75cc:	8b 8b       	std	Y+19, r24	; 0x13
    75ce:	e9 8d       	ldd	r30, Y+25	; 0x19
    75d0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    75d2:	a0 81       	ld	r26, Z
    75d4:	b1 81       	ldd	r27, Z+1	; 0x01
    75d6:	40 ff       	sbrs	r20, 0
    75d8:	82 c0       	rjmp	.+260    	; 0x76de <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    75da:	f1 e0       	ldi	r31, 0x01	; 1
    75dc:	bf 12       	cpse	r11, r31
    75de:	6f c0       	rjmp	.+222    	; 0x76be <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    75e0:	af 12       	cpse	r10, r31
    75e2:	6d c0       	rjmp	.+218    	; 0x76be <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    75e4:	1c 96       	adiw	r26, 0x0c	; 12
    75e6:	ed 91       	ld	r30, X+
    75e8:	fc 91       	ld	r31, X
    75ea:	2f 81       	ldd	r18, Y+7	; 0x07
    75ec:	38 85       	ldd	r19, Y+8	; 0x08
    75ee:	a4 01       	movw	r20, r8
    75f0:	4c 0d       	add	r20, r12
    75f2:	5d 1d       	adc	r21, r13
    75f4:	69 89       	ldd	r22, Y+17	; 0x11
    75f6:	7a 89       	ldd	r23, Y+18	; 0x12
    75f8:	89 8d       	ldd	r24, Y+25	; 0x19
    75fa:	9a 8d       	ldd	r25, Y+26	; 0x1a
    75fc:	09 95       	icall
    75fe:	eb 89       	ldd	r30, Y+19	; 0x13
    7600:	fc 89       	ldd	r31, Y+20	; 0x14
    7602:	f5 95       	asr	r31
    7604:	e7 95       	ror	r30
    7606:	4e 2f       	mov	r20, r30
    7608:	5f ef       	ldi	r21, 0xFF	; 255
    760a:	c5 1a       	sub	r12, r21
    760c:	d5 0a       	sbc	r13, r21
    760e:	6d 81       	ldd	r22, Y+5	; 0x05
    7610:	7e 81       	ldd	r23, Y+6	; 0x06
    7612:	8d 89       	ldd	r24, Y+21	; 0x15
    7614:	9e 89       	ldd	r25, Y+22	; 0x16
    7616:	68 0f       	add	r22, r24
    7618:	79 1f       	adc	r23, r25
    761a:	7e 83       	std	Y+6, r23	; 0x06
    761c:	6d 83       	std	Y+5, r22	; 0x05
    761e:	98 e0       	ldi	r25, 0x08	; 8
    7620:	c9 16       	cp	r12, r25
    7622:	d1 04       	cpc	r13, r1
    7624:	81 f6       	brne	.-96     	; 0x75c6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    7626:	af ef       	ldi	r26, 0xFF	; 255
    7628:	2a 1a       	sub	r2, r26
    762a:	3a 0a       	sbc	r3, r26
    762c:	eb 81       	ldd	r30, Y+3	; 0x03
    762e:	fc 81       	ldd	r31, Y+4	; 0x04
    7630:	e4 0d       	add	r30, r4
    7632:	f5 1d       	adc	r31, r5
    7634:	fc 83       	std	Y+4, r31	; 0x04
    7636:	eb 83       	std	Y+3, r30	; 0x03
    7638:	f5 e0       	ldi	r31, 0x05	; 5
    763a:	2f 16       	cp	r2, r31
    763c:	31 04       	cpc	r3, r1
    763e:	09 f0       	breq	.+2      	; 0x7642 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    7640:	b3 cf       	rjmp	.-154    	; 0x75a8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    7642:	2f 81       	ldd	r18, Y+7	; 0x07
    7644:	38 85       	ldd	r19, Y+8	; 0x08
    7646:	26 15       	cp	r18, r6
    7648:	37 05       	cpc	r19, r7
    764a:	b9 f0       	breq	.+46     	; 0x767a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    764c:	a9 8d       	ldd	r26, Y+25	; 0x19
    764e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7650:	ed 91       	ld	r30, X+
    7652:	fc 91       	ld	r31, X
    7654:	b1 e0       	ldi	r27, 0x01	; 1
    7656:	bb 12       	cpse	r11, r27
    7658:	57 c0       	rjmp	.+174    	; 0x7708 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    765a:	ab 12       	cpse	r10, r27
    765c:	55 c0       	rjmp	.+170    	; 0x7708 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    765e:	69 81       	ldd	r22, Y+1	; 0x01
    7660:	7a 81       	ldd	r23, Y+2	; 0x02
    7662:	6b 5f       	subi	r22, 0xFB	; 251
    7664:	7f 4f       	sbci	r23, 0xFF	; 255
    7666:	00 88       	ldd	r0, Z+16	; 0x10
    7668:	f1 89       	ldd	r31, Z+17	; 0x11
    766a:	e0 2d       	mov	r30, r0
    766c:	83 01       	movw	r16, r6
    766e:	28 e0       	ldi	r18, 0x08	; 8
    7670:	30 e0       	ldi	r19, 0x00	; 0
    7672:	a4 01       	movw	r20, r8
    7674:	89 8d       	ldd	r24, Y+25	; 0x19
    7676:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7678:	09 95       	icall
    767a:	a9 8d       	ldd	r26, Y+25	; 0x19
    767c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    767e:	ed 91       	ld	r30, X+
    7680:	fc 91       	ld	r31, X
    7682:	11 97       	sbiw	r26, 0x01	; 1
    7684:	06 88       	ldd	r0, Z+22	; 0x16
    7686:	f7 89       	ldd	r31, Z+23	; 0x17
    7688:	e0 2d       	mov	r30, r0
    768a:	cd 01       	movw	r24, r26
    768c:	6a 96       	adiw	r28, 0x1a	; 26
    768e:	0f b6       	in	r0, 0x3f	; 63
    7690:	f8 94       	cli
    7692:	de bf       	out	0x3e, r29	; 62
    7694:	0f be       	out	0x3f, r0	; 63
    7696:	cd bf       	out	0x3d, r28	; 61
    7698:	df 91       	pop	r29
    769a:	cf 91       	pop	r28
    769c:	1f 91       	pop	r17
    769e:	0f 91       	pop	r16
    76a0:	ff 90       	pop	r15
    76a2:	ef 90       	pop	r14
    76a4:	df 90       	pop	r13
    76a6:	cf 90       	pop	r12
    76a8:	bf 90       	pop	r11
    76aa:	af 90       	pop	r10
    76ac:	9f 90       	pop	r9
    76ae:	8f 90       	pop	r8
    76b0:	7f 90       	pop	r7
    76b2:	6f 90       	pop	r6
    76b4:	5f 90       	pop	r5
    76b6:	4f 90       	pop	r4
    76b8:	3f 90       	pop	r3
    76ba:	2f 90       	pop	r2
    76bc:	09 94       	ijmp
    76be:	1e 96       	adiw	r26, 0x0e	; 14
    76c0:	ed 91       	ld	r30, X+
    76c2:	fc 91       	ld	r31, X
    76c4:	ef 80       	ldd	r14, Y+7	; 0x07
    76c6:	f8 84       	ldd	r15, Y+8	; 0x08
    76c8:	09 85       	ldd	r16, Y+9	; 0x09
    76ca:	1a 85       	ldd	r17, Y+10	; 0x0a
    76cc:	92 01       	movw	r18, r4
    76ce:	4d 81       	ldd	r20, Y+5	; 0x05
    76d0:	5e 81       	ldd	r21, Y+6	; 0x06
    76d2:	6b 81       	ldd	r22, Y+3	; 0x03
    76d4:	7c 81       	ldd	r23, Y+4	; 0x04
    76d6:	89 8d       	ldd	r24, Y+25	; 0x19
    76d8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    76da:	09 95       	icall
    76dc:	90 cf       	rjmp	.-224    	; 0x75fe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    76de:	2f 81       	ldd	r18, Y+7	; 0x07
    76e0:	38 85       	ldd	r19, Y+8	; 0x08
    76e2:	26 15       	cp	r18, r6
    76e4:	37 05       	cpc	r19, r7
    76e6:	09 f4       	brne	.+2      	; 0x76ea <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    76e8:	8a cf       	rjmp	.-236    	; 0x75fe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    76ea:	31 e0       	ldi	r19, 0x01	; 1
    76ec:	b3 12       	cpse	r11, r19
    76ee:	07 c0       	rjmp	.+14     	; 0x76fe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    76f0:	a3 12       	cpse	r10, r19
    76f2:	05 c0       	rjmp	.+10     	; 0x76fe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    76f4:	1c 96       	adiw	r26, 0x0c	; 12
    76f6:	ed 91       	ld	r30, X+
    76f8:	fc 91       	ld	r31, X
    76fa:	93 01       	movw	r18, r6
    76fc:	78 cf       	rjmp	.-272    	; 0x75ee <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    76fe:	1e 96       	adiw	r26, 0x0e	; 14
    7700:	ed 91       	ld	r30, X+
    7702:	fc 91       	ld	r31, X
    7704:	73 01       	movw	r14, r6
    7706:	e0 cf       	rjmp	.-64     	; 0x76c8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    7708:	6b 85       	ldd	r22, Y+11	; 0x0b
    770a:	7c 85       	ldd	r23, Y+12	; 0x0c
    770c:	64 19       	sub	r22, r4
    770e:	75 09       	sbc	r23, r5
    7710:	06 84       	ldd	r0, Z+14	; 0x0e
    7712:	f7 85       	ldd	r31, Z+15	; 0x0f
    7714:	e0 2d       	mov	r30, r0
    7716:	73 01       	movw	r14, r6
    7718:	0f 85       	ldd	r16, Y+15	; 0x0f
    771a:	18 89       	ldd	r17, Y+16	; 0x10
    771c:	92 01       	movw	r18, r4
    771e:	a4 01       	movw	r20, r8
    7720:	89 8d       	ldd	r24, Y+25	; 0x19
    7722:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7724:	09 95       	icall
    7726:	a9 cf       	rjmp	.-174    	; 0x767a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    7728:	f9 01       	movw	r30, r18
    772a:	34 96       	adiw	r30, 0x04	; 4
    772c:	94 91       	lpm	r25, Z
    772e:	32 97       	sbiw	r30, 0x02	; 2
    7730:	45 91       	lpm	r20, Z+
    7732:	54 91       	lpm	r21, Z
    7734:	d9 1a       	sub	r13, r25
    7736:	b7 e0       	ldi	r27, 0x07	; 7
    7738:	db 9e       	mul	r13, r27
    773a:	40 0d       	add	r20, r0
    773c:	51 1d       	adc	r21, r1
    773e:	11 24       	eor	r1, r1
    7740:	f9 01       	movw	r30, r18
    7742:	25 91       	lpm	r18, Z+
    7744:	34 91       	lpm	r19, Z
    7746:	3c 8b       	std	Y+20, r19	; 0x14
    7748:	2b 8b       	std	Y+19, r18	; 0x13
    774a:	fa 01       	movw	r30, r20
    774c:	25 90       	lpm	r2, Z+
    774e:	34 90       	lpm	r3, Z
    7750:	fa 01       	movw	r30, r20
    7752:	32 96       	adiw	r30, 0x02	; 2
    7754:	74 90       	lpm	r7, Z
    7756:	31 96       	adiw	r30, 0x01	; 1
    7758:	34 91       	lpm	r19, Z
    775a:	39 8b       	std	Y+17, r19	; 0x11
    775c:	32 96       	adiw	r30, 0x02	; 2
    775e:	64 90       	lpm	r6, Z
    7760:	31 96       	adiw	r30, 0x01	; 1
    7762:	44 90       	lpm	r4, Z
    7764:	41 e0       	ldi	r20, 0x01	; 1
    7766:	4c 15       	cp	r20, r12
    7768:	18 f0       	brcs	.+6      	; 0x7770 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    776a:	4a 15       	cp	r20, r10
    776c:	08 f0       	brcs	.+2      	; 0x7770 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    776e:	7f c0       	rjmp	.+254    	; 0x786e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    7770:	66 2d       	mov	r22, r6
    7772:	06 2c       	mov	r0, r6
    7774:	00 0c       	add	r0, r0
    7776:	77 0b       	sbc	r23, r23
    7778:	7c 83       	std	Y+4, r23	; 0x04
    777a:	6b 83       	std	Y+3, r22	; 0x03
    777c:	84 2d       	mov	r24, r4
    777e:	04 2c       	mov	r0, r4
    7780:	00 0c       	add	r0, r0
    7782:	99 0b       	sbc	r25, r25
    7784:	9e 83       	std	Y+6, r25	; 0x06
    7786:	8d 83       	std	Y+5, r24	; 0x05
    7788:	a9 8d       	ldd	r26, Y+25	; 0x19
    778a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    778c:	ed 91       	ld	r30, X+
    778e:	fc 91       	ld	r31, X
    7790:	11 97       	sbiw	r26, 0x01	; 1
    7792:	02 84       	ldd	r0, Z+10	; 0x0a
    7794:	f3 85       	ldd	r31, Z+11	; 0x0b
    7796:	e0 2d       	mov	r30, r0
    7798:	cd 01       	movw	r24, r26
    779a:	09 95       	icall
    779c:	51 2c       	mov	r5, r1
    779e:	d1 2c       	mov	r13, r1
    77a0:	c1 2c       	mov	r12, r1
    77a2:	ea 2d       	mov	r30, r10
    77a4:	f0 e0       	ldi	r31, 0x00	; 0
    77a6:	fa 87       	std	Y+10, r31	; 0x0a
    77a8:	e9 87       	std	Y+9, r30	; 0x09
    77aa:	2b 2d       	mov	r18, r11
    77ac:	30 e0       	ldi	r19, 0x00	; 0
    77ae:	3c 87       	std	Y+12, r19	; 0x0c
    77b0:	2b 87       	std	Y+11, r18	; 0x0b
    77b2:	a4 01       	movw	r20, r8
    77b4:	44 0d       	add	r20, r4
    77b6:	51 1d       	adc	r21, r1
    77b8:	47 fc       	sbrc	r4, 7
    77ba:	5a 95       	dec	r21
    77bc:	58 8f       	std	Y+24, r21	; 0x18
    77be:	4f 8b       	std	Y+23, r20	; 0x17
    77c0:	69 81       	ldd	r22, Y+1	; 0x01
    77c2:	7a 81       	ldd	r23, Y+2	; 0x02
    77c4:	66 0d       	add	r22, r6
    77c6:	71 1d       	adc	r23, r1
    77c8:	67 fc       	sbrc	r6, 7
    77ca:	7a 95       	dec	r23
    77cc:	7e 87       	std	Y+14, r23	; 0x0e
    77ce:	6d 87       	std	Y+13, r22	; 0x0d
    77d0:	79 89       	ldd	r23, Y+17	; 0x11
    77d2:	c7 16       	cp	r12, r23
    77d4:	08 f0       	brcs	.+2      	; 0x77d8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    77d6:	51 cf       	rjmp	.-350    	; 0x767a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    77d8:	2c 2d       	mov	r18, r12
    77da:	30 e0       	ldi	r19, 0x00	; 0
    77dc:	4d 81       	ldd	r20, Y+5	; 0x05
    77de:	5e 81       	ldd	r21, Y+6	; 0x06
    77e0:	42 0f       	add	r20, r18
    77e2:	53 1f       	adc	r21, r19
    77e4:	a9 85       	ldd	r26, Y+9	; 0x09
    77e6:	ba 85       	ldd	r27, Y+10	; 0x0a
    77e8:	4a 9f       	mul	r20, r26
    77ea:	c0 01       	movw	r24, r0
    77ec:	4b 9f       	mul	r20, r27
    77ee:	90 0d       	add	r25, r0
    77f0:	5a 9f       	mul	r21, r26
    77f2:	90 0d       	add	r25, r0
    77f4:	11 24       	eor	r1, r1
    77f6:	fc 01       	movw	r30, r24
    77f8:	e8 0d       	add	r30, r8
    77fa:	f9 1d       	adc	r31, r9
    77fc:	f8 8b       	std	Y+16, r31	; 0x10
    77fe:	ef 87       	std	Y+15, r30	; 0x0f
    7800:	85 2d       	mov	r24, r5
    7802:	61 2c       	mov	r6, r1
    7804:	4f 89       	ldd	r20, Y+23	; 0x17
    7806:	58 8d       	ldd	r21, Y+24	; 0x18
    7808:	42 0f       	add	r20, r18
    780a:	53 1f       	adc	r21, r19
    780c:	5e 8b       	std	Y+22, r21	; 0x16
    780e:	4d 8b       	std	Y+21, r20	; 0x15
    7810:	67 14       	cp	r6, r7
    7812:	08 f0       	brcs	.+2      	; 0x7816 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    7814:	50 c0       	rjmp	.+160    	; 0x78b6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    7816:	44 24       	eor	r4, r4
    7818:	43 94       	inc	r4
    781a:	48 0e       	add	r4, r24
    781c:	87 70       	andi	r24, 0x07	; 7
    781e:	41 f4       	brne	.+16     	; 0x7830 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    7820:	c1 01       	movw	r24, r2
    7822:	01 96       	adiw	r24, 0x01	; 1
    7824:	eb 89       	ldd	r30, Y+19	; 0x13
    7826:	fc 89       	ldd	r31, Y+20	; 0x14
    7828:	e2 0d       	add	r30, r2
    782a:	f3 1d       	adc	r31, r3
    782c:	d4 90       	lpm	r13, Z
    782e:	1c 01       	movw	r2, r24
    7830:	d7 fe       	sbrs	r13, 7
    7832:	19 c0       	rjmp	.+50     	; 0x7866 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    7834:	a9 8d       	ldd	r26, Y+25	; 0x19
    7836:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7838:	ed 91       	ld	r30, X+
    783a:	fc 91       	ld	r31, X
    783c:	66 2d       	mov	r22, r6
    783e:	70 e0       	ldi	r23, 0x00	; 0
    7840:	b1 e0       	ldi	r27, 0x01	; 1
    7842:	bb 12       	cpse	r11, r27
    7844:	19 c0       	rjmp	.+50     	; 0x7878 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    7846:	ab 12       	cpse	r10, r27
    7848:	17 c0       	rjmp	.+46     	; 0x7878 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    784a:	2d 85       	ldd	r18, Y+13	; 0x0d
    784c:	3e 85       	ldd	r19, Y+14	; 0x0e
    784e:	62 0f       	add	r22, r18
    7850:	73 1f       	adc	r23, r19
    7852:	04 84       	ldd	r0, Z+12	; 0x0c
    7854:	f5 85       	ldd	r31, Z+13	; 0x0d
    7856:	e0 2d       	mov	r30, r0
    7858:	2f 81       	ldd	r18, Y+7	; 0x07
    785a:	38 85       	ldd	r19, Y+8	; 0x08
    785c:	4d 89       	ldd	r20, Y+21	; 0x15
    785e:	5e 89       	ldd	r21, Y+22	; 0x16
    7860:	89 8d       	ldd	r24, Y+25	; 0x19
    7862:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7864:	09 95       	icall
    7866:	dd 0c       	add	r13, r13
    7868:	63 94       	inc	r6
    786a:	84 2d       	mov	r24, r4
    786c:	d1 cf       	rjmp	.-94     	; 0x7810 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    786e:	1e 82       	std	Y+6, r1	; 0x06
    7870:	1d 82       	std	Y+5, r1	; 0x05
    7872:	1c 82       	std	Y+4, r1	; 0x04
    7874:	1b 82       	std	Y+3, r1	; 0x03
    7876:	88 cf       	rjmp	.-240    	; 0x7788 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    7878:	4b 81       	ldd	r20, Y+3	; 0x03
    787a:	5c 81       	ldd	r21, Y+4	; 0x04
    787c:	64 0f       	add	r22, r20
    787e:	75 1f       	adc	r23, r21
    7880:	ab 85       	ldd	r26, Y+11	; 0x0b
    7882:	bc 85       	ldd	r27, Y+12	; 0x0c
    7884:	6a 9f       	mul	r22, r26
    7886:	c0 01       	movw	r24, r0
    7888:	6b 9f       	mul	r22, r27
    788a:	90 0d       	add	r25, r0
    788c:	7a 9f       	mul	r23, r26
    788e:	90 0d       	add	r25, r0
    7890:	11 24       	eor	r1, r1
    7892:	69 81       	ldd	r22, Y+1	; 0x01
    7894:	7a 81       	ldd	r23, Y+2	; 0x02
    7896:	68 0f       	add	r22, r24
    7898:	79 1f       	adc	r23, r25
    789a:	06 84       	ldd	r0, Z+14	; 0x0e
    789c:	f7 85       	ldd	r31, Z+15	; 0x0f
    789e:	e0 2d       	mov	r30, r0
    78a0:	ef 80       	ldd	r14, Y+7	; 0x07
    78a2:	f8 84       	ldd	r15, Y+8	; 0x08
    78a4:	09 85       	ldd	r16, Y+9	; 0x09
    78a6:	1a 85       	ldd	r17, Y+10	; 0x0a
    78a8:	9d 01       	movw	r18, r26
    78aa:	4f 85       	ldd	r20, Y+15	; 0x0f
    78ac:	58 89       	ldd	r21, Y+16	; 0x10
    78ae:	89 8d       	ldd	r24, Y+25	; 0x19
    78b0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    78b2:	09 95       	icall
    78b4:	d8 cf       	rjmp	.-80     	; 0x7866 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    78b6:	57 0c       	add	r5, r7
    78b8:	c3 94       	inc	r12
    78ba:	8a cf       	rjmp	.-236    	; 0x77d0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    78bc:	6a 96       	adiw	r28, 0x1a	; 26
    78be:	0f b6       	in	r0, 0x3f	; 63
    78c0:	f8 94       	cli
    78c2:	de bf       	out	0x3e, r29	; 62
    78c4:	0f be       	out	0x3f, r0	; 63
    78c6:	cd bf       	out	0x3d, r28	; 61
    78c8:	df 91       	pop	r29
    78ca:	cf 91       	pop	r28
    78cc:	1f 91       	pop	r17
    78ce:	0f 91       	pop	r16
    78d0:	ff 90       	pop	r15
    78d2:	ef 90       	pop	r14
    78d4:	df 90       	pop	r13
    78d6:	cf 90       	pop	r12
    78d8:	bf 90       	pop	r11
    78da:	af 90       	pop	r10
    78dc:	9f 90       	pop	r9
    78de:	8f 90       	pop	r8
    78e0:	7f 90       	pop	r7
    78e2:	6f 90       	pop	r6
    78e4:	5f 90       	pop	r5
    78e6:	4f 90       	pop	r4
    78e8:	3f 90       	pop	r3
    78ea:	2f 90       	pop	r2
    78ec:	08 95       	ret

000078ee <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    78ee:	8f 92       	push	r8
    78f0:	9f 92       	push	r9
    78f2:	af 92       	push	r10
    78f4:	cf 92       	push	r12
    78f6:	ef 92       	push	r14
    78f8:	ff 92       	push	r15
    78fa:	0f 93       	push	r16
    78fc:	1f 93       	push	r17
    78fe:	cf 93       	push	r28
    7900:	df 93       	push	r29
    7902:	ec 01       	movw	r28, r24
    7904:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    7906:	88 8d       	ldd	r24, Y+24	; 0x18
    7908:	99 8d       	ldd	r25, Y+25	; 0x19
    790a:	00 97       	sbiw	r24, 0x00	; 0
    790c:	09 f0       	breq	.+2      	; 0x7910 <Adafruit_GFX::write(unsigned char)+0x22>
    790e:	50 c0       	rjmp	.+160    	; 0x79b0 <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    7910:	6a 30       	cpi	r22, 0x0A	; 10
    7912:	d1 f4       	brne	.+52     	; 0x7948 <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    7914:	1c 86       	std	Y+12, r1	; 0x0c
    7916:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    7918:	8c 89       	ldd	r24, Y+20	; 0x14
    791a:	48 e0       	ldi	r20, 0x08	; 8
    791c:	84 9f       	mul	r24, r20
    791e:	90 01       	movw	r18, r0
    7920:	11 24       	eor	r1, r1
    7922:	8d 85       	ldd	r24, Y+13	; 0x0d
    7924:	9e 85       	ldd	r25, Y+14	; 0x0e
    7926:	82 0f       	add	r24, r18
    7928:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    792a:	9e 87       	std	Y+14, r25	; 0x0e
    792c:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    792e:	81 e0       	ldi	r24, 0x01	; 1
    7930:	90 e0       	ldi	r25, 0x00	; 0
    7932:	df 91       	pop	r29
    7934:	cf 91       	pop	r28
    7936:	1f 91       	pop	r17
    7938:	0f 91       	pop	r16
    793a:	ff 90       	pop	r15
    793c:	ef 90       	pop	r14
    793e:	cf 90       	pop	r12
    7940:	af 90       	pop	r10
    7942:	9f 90       	pop	r9
    7944:	8f 90       	pop	r8
    7946:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    7948:	6d 30       	cpi	r22, 0x0D	; 13
    794a:	89 f3       	breq	.-30     	; 0x792e <Adafruit_GFX::write(unsigned char)+0x40>
    794c:	cb 88       	ldd	r12, Y+19	; 0x13
    794e:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    7950:	8e 89       	ldd	r24, Y+22	; 0x16
    7952:	88 23       	and	r24, r24
    7954:	c1 f0       	breq	.+48     	; 0x7986 <Adafruit_GFX::write(unsigned char)+0x98>
    7956:	8b 85       	ldd	r24, Y+11	; 0x0b
    7958:	9c 85       	ldd	r25, Y+12	; 0x0c
    795a:	36 e0       	ldi	r19, 0x06	; 6
    795c:	c3 9e       	mul	r12, r19
    795e:	80 0d       	add	r24, r0
    7960:	91 1d       	adc	r25, r1
    7962:	11 24       	eor	r1, r1
    7964:	4f 81       	ldd	r20, Y+7	; 0x07
    7966:	58 85       	ldd	r21, Y+8	; 0x08
    7968:	48 17       	cp	r20, r24
    796a:	59 07       	cpc	r21, r25
    796c:	64 f4       	brge	.+24     	; 0x7986 <Adafruit_GFX::write(unsigned char)+0x98>
    796e:	4d 85       	ldd	r20, Y+13	; 0x0d
    7970:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    7972:	1c 86       	std	Y+12, r1	; 0x0c
    7974:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    7976:	38 e0       	ldi	r19, 0x08	; 8
    7978:	a3 9e       	mul	r10, r19
    797a:	c0 01       	movw	r24, r0
    797c:	11 24       	eor	r1, r1
    797e:	84 0f       	add	r24, r20
    7980:	95 1f       	adc	r25, r21
    7982:	9e 87       	std	Y+14, r25	; 0x0e
    7984:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    7986:	e9 88       	ldd	r14, Y+17	; 0x11
    7988:	fa 88       	ldd	r15, Y+18	; 0x12
    798a:	0f 85       	ldd	r16, Y+15	; 0x0f
    798c:	18 89       	ldd	r17, Y+16	; 0x10
    798e:	4d 85       	ldd	r20, Y+13	; 0x0d
    7990:	5e 85       	ldd	r21, Y+14	; 0x0e
    7992:	6b 85       	ldd	r22, Y+11	; 0x0b
    7994:	7c 85       	ldd	r23, Y+12	; 0x0c
    7996:	ce 01       	movw	r24, r28
    7998:	85 dd       	rcall	.-1270   	; 0x74a4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    799a:	2b 89       	ldd	r18, Y+19	; 0x13
    799c:	8b 85       	ldd	r24, Y+11	; 0x0b
    799e:	9c 85       	ldd	r25, Y+12	; 0x0c
    79a0:	46 e0       	ldi	r20, 0x06	; 6
    79a2:	24 9f       	mul	r18, r20
    79a4:	80 0d       	add	r24, r0
    79a6:	91 1d       	adc	r25, r1
    79a8:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    79aa:	9c 87       	std	Y+12, r25	; 0x0c
    79ac:	8b 87       	std	Y+11, r24	; 0x0b
    79ae:	bf cf       	rjmp	.-130    	; 0x792e <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    79b0:	6a 30       	cpi	r22, 0x0A	; 10
    79b2:	69 f4       	brne	.+26     	; 0x79ce <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    79b4:	1c 86       	std	Y+12, r1	; 0x0c
    79b6:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    79b8:	fc 01       	movw	r30, r24
    79ba:	36 96       	adiw	r30, 0x06	; 6
    79bc:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    79be:	2c 89       	ldd	r18, Y+20	; 0x14
    79c0:	8d 85       	ldd	r24, Y+13	; 0x0d
    79c2:	9e 85       	ldd	r25, Y+14	; 0x0e
    79c4:	e2 9f       	mul	r30, r18
    79c6:	80 0d       	add	r24, r0
    79c8:	91 1d       	adc	r25, r1
    79ca:	11 24       	eor	r1, r1
    79cc:	ae cf       	rjmp	.-164    	; 0x792a <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    79ce:	6d 30       	cpi	r22, 0x0D	; 13
    79d0:	09 f4       	brne	.+2      	; 0x79d4 <Adafruit_GFX::write(unsigned char)+0xe6>
    79d2:	ad cf       	rjmp	.-166    	; 0x792e <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    79d4:	fc 01       	movw	r30, r24
    79d6:	34 96       	adiw	r30, 0x04	; 4
    79d8:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    79da:	63 17       	cp	r22, r19
    79dc:	08 f4       	brcc	.+2      	; 0x79e0 <Adafruit_GFX::write(unsigned char)+0xf2>
    79de:	a7 cf       	rjmp	.-178    	; 0x792e <Adafruit_GFX::write(unsigned char)+0x40>
    79e0:	31 96       	adiw	r30, 0x01	; 1
    79e2:	e4 91       	lpm	r30, Z
    79e4:	e6 17       	cp	r30, r22
    79e6:	08 f4       	brcc	.+2      	; 0x79ea <Adafruit_GFX::write(unsigned char)+0xfc>
    79e8:	a2 cf       	rjmp	.-188    	; 0x792e <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    79ea:	fc 01       	movw	r30, r24
    79ec:	32 96       	adiw	r30, 0x02	; 2
    79ee:	85 90       	lpm	r8, Z+
    79f0:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    79f2:	46 2f       	mov	r20, r22
    79f4:	43 1b       	sub	r20, r19
    79f6:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    79f8:	47 e0       	ldi	r20, 0x07	; 7
    79fa:	34 9f       	mul	r19, r20
    79fc:	80 0c       	add	r8, r0
    79fe:	91 1c       	adc	r9, r1
    7a00:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    7a02:	f4 01       	movw	r30, r8
    7a04:	32 96       	adiw	r30, 0x02	; 2
    7a06:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    7a08:	31 96       	adiw	r30, 0x01	; 1
    7a0a:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    7a0c:	33 23       	and	r19, r19
    7a0e:	a1 f1       	breq	.+104    	; 0x7a78 <Adafruit_GFX::write(unsigned char)+0x18a>
    7a10:	ee 23       	and	r30, r30
    7a12:	91 f1       	breq	.+100    	; 0x7a78 <Adafruit_GFX::write(unsigned char)+0x18a>
    7a14:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    7a16:	f4 01       	movw	r30, r8
    7a18:	35 96       	adiw	r30, 0x05	; 5
    7a1a:	e4 91       	lpm	r30, Z
    7a1c:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    7a1e:	4e 89       	ldd	r20, Y+22	; 0x16
    7a20:	44 23       	and	r20, r20
    7a22:	01 f1       	breq	.+64     	; 0x7a64 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    7a24:	0e 2e       	mov	r0, r30
    7a26:	00 0c       	add	r0, r0
    7a28:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    7a2a:	e3 0f       	add	r30, r19
    7a2c:	f1 1d       	adc	r31, r1
    7a2e:	ce 9e       	mul	r12, r30
    7a30:	a0 01       	movw	r20, r0
    7a32:	cf 9e       	mul	r12, r31
    7a34:	50 0d       	add	r21, r0
    7a36:	11 24       	eor	r1, r1
    7a38:	6b 85       	ldd	r22, Y+11	; 0x0b
    7a3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    7a3c:	46 0f       	add	r20, r22
    7a3e:	57 1f       	adc	r21, r23
    7a40:	6f 81       	ldd	r22, Y+7	; 0x07
    7a42:	78 85       	ldd	r23, Y+8	; 0x08
    7a44:	64 17       	cp	r22, r20
    7a46:	75 07       	cpc	r23, r21
    7a48:	6c f4       	brge	.+26     	; 0x7a64 <Adafruit_GFX::write(unsigned char)+0x176>
    7a4a:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a4c:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    7a4e:	1c 86       	std	Y+12, r1	; 0x0c
    7a50:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    7a52:	fc 01       	movw	r30, r24
    7a54:	36 96       	adiw	r30, 0x06	; 6
    7a56:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    7a58:	ae 9e       	mul	r10, r30
    7a5a:	40 0d       	add	r20, r0
    7a5c:	51 1d       	adc	r21, r1
    7a5e:	11 24       	eor	r1, r1
    7a60:	5e 87       	std	Y+14, r21	; 0x0e
    7a62:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    7a64:	e9 88       	ldd	r14, Y+17	; 0x11
    7a66:	fa 88       	ldd	r15, Y+18	; 0x12
    7a68:	0f 85       	ldd	r16, Y+15	; 0x0f
    7a6a:	18 89       	ldd	r17, Y+16	; 0x10
    7a6c:	4d 85       	ldd	r20, Y+13	; 0x0d
    7a6e:	5e 85       	ldd	r21, Y+14	; 0x0e
    7a70:	6b 85       	ldd	r22, Y+11	; 0x0b
    7a72:	7c 85       	ldd	r23, Y+12	; 0x0c
    7a74:	ce 01       	movw	r24, r28
    7a76:	16 dd       	rcall	.-1492   	; 0x74a4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    7a78:	f4 01       	movw	r30, r8
    7a7a:	34 96       	adiw	r30, 0x04	; 4
    7a7c:	e4 91       	lpm	r30, Z
    7a7e:	2b 89       	ldd	r18, Y+19	; 0x13
    7a80:	8b 85       	ldd	r24, Y+11	; 0x0b
    7a82:	9c 85       	ldd	r25, Y+12	; 0x0c
    7a84:	e2 9f       	mul	r30, r18
    7a86:	80 0d       	add	r24, r0
    7a88:	91 1d       	adc	r25, r1
    7a8a:	11 24       	eor	r1, r1
    7a8c:	8e cf       	rjmp	.-228    	; 0x79aa <Adafruit_GFX::write(unsigned char)+0xbc>

00007a8e <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    7a8e:	61 11       	cpse	r22, r1
    7a90:	01 c0       	rjmp	.+2      	; 0x7a94 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    7a92:	61 e0       	ldi	r22, 0x01	; 1
    7a94:	fc 01       	movw	r30, r24
    7a96:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    7a98:	41 11       	cpse	r20, r1
    7a9a:	01 c0       	rjmp	.+2      	; 0x7a9e <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    7a9c:	41 e0       	ldi	r20, 0x01	; 1
    7a9e:	fc 01       	movw	r30, r24
    7aa0:	44 8b       	std	Z+20, r20	; 0x14
}
    7aa2:	08 95       	ret

00007aa4 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    7aa4:	46 2f       	mov	r20, r22
    7aa6:	f3 cf       	rjmp	.-26     	; 0x7a8e <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

00007aa8 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    7aa8:	ff 92       	push	r15
    7aaa:	0f 93       	push	r16
    7aac:	1f 93       	push	r17
    7aae:	cf 93       	push	r28
    7ab0:	df 93       	push	r29
    7ab2:	ec 01       	movw	r28, r24
    7ab4:	f0 2e       	mov	r15, r16
    7ab6:	10 e0       	ldi	r17, 0x00	; 0
    7ab8:	00 e0       	ldi	r16, 0x00	; 0
    7aba:	20 d0       	rcall	.+64     	; 0x7afc <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    7abc:	83 e3       	ldi	r24, 0x33	; 51
    7abe:	99 e0       	ldi	r25, 0x09	; 9
    7ac0:	99 83       	std	Y+1, r25	; 0x01
    7ac2:	88 83       	st	Y, r24
    7ac4:	fe 01       	movw	r30, r28
    7ac6:	e6 5e       	subi	r30, 0xE6	; 230
    7ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    7aca:	f0 82       	st	Z, r15
    7acc:	31 96       	adiw	r30, 0x01	; 1
    7ace:	10 82       	st	Z, r1
    7ad0:	c4 5e       	subi	r28, 0xE4	; 228
    7ad2:	de 4f       	sbci	r29, 0xFE	; 254
    7ad4:	18 82       	st	Y, r1
    7ad6:	df 91       	pop	r29
    7ad8:	cf 91       	pop	r28
    7ada:	1f 91       	pop	r17
    7adc:	0f 91       	pop	r16
    7ade:	ff 90       	pop	r15
    7ae0:	08 95       	ret

00007ae2 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    7ae2:	8d 5d       	subi	r24, 0xDD	; 221
    7ae4:	9e 4f       	sbci	r25, 0xFE	; 254
    7ae6:	dc 01       	movw	r26, r24
    7ae8:	ed 91       	ld	r30, X+
    7aea:	fc 91       	ld	r31, X
    7aec:	30 97       	sbiw	r30, 0x00	; 0
    7aee:	09 f0       	breq	.+2      	; 0x7af2 <FastLED_NeoMatrix::show()+0x10>
    7af0:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    7af2:	60 91 cc 10 	lds	r22, 0x10CC	; 0x8010cc <FastLED>
    7af6:	8c ec       	ldi	r24, 0xCC	; 204
    7af8:	90 e1       	ldi	r25, 0x10	; 16
    7afa:	48 c4       	rjmp	.+2192   	; 0x838c <CFastLED::show(unsigned char)>

00007afc <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
}

// Call without a value to reset (disable passthrough)
void Framebuffer_GFX::setPassThruColor(void) {
  passThruFlag = false;
}
    7afc:	af 92       	push	r10
    7afe:	bf 92       	push	r11
    7b00:	cf 92       	push	r12
    7b02:	df 92       	push	r13
    7b04:	ef 92       	push	r14
    7b06:	ff 92       	push	r15
    7b08:	0f 93       	push	r16
    7b0a:	1f 93       	push	r17
    7b0c:	cf 93       	push	r28
    7b0e:	df 93       	push	r29
    7b10:	ec 01       	movw	r28, r24
    7b12:	5b 01       	movw	r10, r22
    7b14:	7a 01       	movw	r14, r20
    7b16:	69 01       	movw	r12, r18
    7b18:	a9 01       	movw	r20, r18
    7b1a:	b7 01       	movw	r22, r14
    7b1c:	6d db       	rcall	.-2342   	; 0x71f8 <Adafruit_GFX::Adafruit_GFX(int, int)>
    7b1e:	86 e9       	ldi	r24, 0x96	; 150
    7b20:	99 e0       	ldi	r25, 0x09	; 9
    7b22:	99 83       	std	Y+1, r25	; 0x01
    7b24:	88 83       	st	Y, r24
    7b26:	fe 01       	movw	r30, r28
    7b28:	e3 5e       	subi	r30, 0xE3	; 227
    7b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    7b2c:	f1 82       	std	Z+1, r15	; 0x01
    7b2e:	e0 82       	st	Z, r14
    7b30:	32 96       	adiw	r30, 0x02	; 2
    7b32:	d1 82       	std	Z+1, r13	; 0x01
    7b34:	c0 82       	st	Z, r12
    7b36:	32 96       	adiw	r30, 0x02	; 2
    7b38:	80 e1       	ldi	r24, 0x10	; 16
    7b3a:	97 e2       	ldi	r25, 0x27	; 39
    7b3c:	91 83       	std	Z+1, r25	; 0x01
    7b3e:	80 83       	st	Z, r24
    7b40:	36 96       	adiw	r30, 0x06	; 6
    7b42:	11 82       	std	Z+1, r1	; 0x01
    7b44:	10 82       	st	Z, r1
    7b46:	3a 96       	adiw	r30, 0x0a	; 10
    7b48:	10 82       	st	Z, r1
    7b4a:	3c 97       	sbiw	r30, 0x0c	; 12
    7b4c:	b1 82       	std	Z+1, r11	; 0x01
    7b4e:	a0 82       	st	Z, r10
    7b50:	32 97       	sbiw	r30, 0x02	; 2
    7b52:	11 83       	std	Z+1, r17	; 0x01
    7b54:	00 83       	st	Z, r16
    7b56:	39 97       	sbiw	r30, 0x09	; 9
    7b58:	10 82       	st	Z, r1
    7b5a:	31 96       	adiw	r30, 0x01	; 1
    7b5c:	10 82       	st	Z, r1
    7b5e:	31 96       	adiw	r30, 0x01	; 1
    7b60:	10 82       	st	Z, r1
    7b62:	c7 5d       	subi	r28, 0xD7	; 215
    7b64:	de 4f       	sbci	r29, 0xFE	; 254
    7b66:	ce 9c       	mul	r12, r14
    7b68:	c0 01       	movw	r24, r0
    7b6a:	cf 9c       	mul	r12, r15
    7b6c:	90 0d       	add	r25, r0
    7b6e:	de 9c       	mul	r13, r14
    7b70:	90 0d       	add	r25, r0
    7b72:	11 24       	eor	r1, r1
    7b74:	b0 e0       	ldi	r27, 0x00	; 0
    7b76:	a0 e0       	ldi	r26, 0x00	; 0
    7b78:	88 83       	st	Y, r24
    7b7a:	99 83       	std	Y+1, r25	; 0x01
    7b7c:	aa 83       	std	Y+2, r26	; 0x02
    7b7e:	bb 83       	std	Y+3, r27	; 0x03
    7b80:	df 91       	pop	r29
    7b82:	cf 91       	pop	r28
    7b84:	1f 91       	pop	r17
    7b86:	0f 91       	pop	r16
    7b88:	ff 90       	pop	r15
    7b8a:	ef 90       	pop	r14
    7b8c:	df 90       	pop	r13
    7b8e:	cf 90       	pop	r12
    7b90:	bf 90       	pop	r11
    7b92:	af 90       	pop	r10
    7b94:	08 95       	ret

00007b96 <Framebuffer_GFX::begin()>:
    7b96:	cf 93       	push	r28
    7b98:	df 93       	push	r29
    7b9a:	ec 01       	movw	r28, r24
    7b9c:	6b e5       	ldi	r22, 0x5B	; 91
    7b9e:	79 e0       	ldi	r23, 0x09	; 9
    7ba0:	8c e5       	ldi	r24, 0x5C	; 92
    7ba2:	91 e1       	ldi	r25, 0x11	; 17
    7ba4:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    7ba8:	fe 01       	movw	r30, r28
    7baa:	e3 5e       	subi	r30, 0xE3	; 227
    7bac:	fe 4f       	sbci	r31, 0xFE	; 254
    7bae:	40 81       	ld	r20, Z
    7bb0:	51 81       	ldd	r21, Z+1	; 0x01
    7bb2:	70 e0       	ldi	r23, 0x00	; 0
    7bb4:	60 e0       	ldi	r22, 0x00	; 0
    7bb6:	20 e0       	ldi	r18, 0x00	; 0
    7bb8:	8c e5       	ldi	r24, 0x5C	; 92
    7bba:	91 e1       	ldi	r25, 0x11	; 17
    7bbc:	0e 94 95 4c 	call	0x992a	; 0x992a <Print::printNumberDec(unsigned long, unsigned char)>
    7bc0:	6a e7       	ldi	r22, 0x7A	; 122
    7bc2:	79 e0       	ldi	r23, 0x09	; 9
    7bc4:	8c e5       	ldi	r24, 0x5C	; 92
    7bc6:	91 e1       	ldi	r25, 0x11	; 17
    7bc8:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    7bcc:	fe 01       	movw	r30, r28
    7bce:	e1 5e       	subi	r30, 0xE1	; 225
    7bd0:	fe 4f       	sbci	r31, 0xFE	; 254
    7bd2:	40 81       	ld	r20, Z
    7bd4:	51 81       	ldd	r21, Z+1	; 0x01
    7bd6:	70 e0       	ldi	r23, 0x00	; 0
    7bd8:	60 e0       	ldi	r22, 0x00	; 0
    7bda:	20 e0       	ldi	r18, 0x00	; 0
    7bdc:	8c e5       	ldi	r24, 0x5C	; 92
    7bde:	91 e1       	ldi	r25, 0x11	; 17
    7be0:	0e 94 95 4c 	call	0x992a	; 0x992a <Print::printNumberDec(unsigned long, unsigned char)>
    7be4:	64 e8       	ldi	r22, 0x84	; 132
    7be6:	79 e0       	ldi	r23, 0x09	; 9
    7be8:	8c e5       	ldi	r24, 0x5C	; 92
    7bea:	91 e1       	ldi	r25, 0x11	; 17
    7bec:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    7bf0:	c7 5d       	subi	r28, 0xD7	; 215
    7bf2:	de 4f       	sbci	r29, 0xFE	; 254
    7bf4:	48 81       	ld	r20, Y
    7bf6:	59 81       	ldd	r21, Y+1	; 0x01
    7bf8:	6a 81       	ldd	r22, Y+2	; 0x02
    7bfa:	7b 81       	ldd	r23, Y+3	; 0x03
    7bfc:	20 e0       	ldi	r18, 0x00	; 0
    7bfe:	8c e5       	ldi	r24, 0x5C	; 92
    7c00:	91 e1       	ldi	r25, 0x11	; 17
    7c02:	0e 94 95 4c 	call	0x992a	; 0x992a <Print::printNumberDec(unsigned long, unsigned char)>
    7c06:	8c e5       	ldi	r24, 0x5C	; 92
    7c08:	91 e1       	ldi	r25, 0x11	; 17
    7c0a:	df 91       	pop	r29
    7c0c:	cf 91       	pop	r28
    7c0e:	0c 94 7b 4c 	jmp	0x98f6	; 0x98f6 <Print::println()>

00007c12 <Framebuffer_GFX::expandColor(unsigned int)>:
    7c12:	fc 01       	movw	r30, r24
    7c14:	ef 2f       	mov	r30, r31
    7c16:	ff 27       	eor	r31, r31
    7c18:	e6 95       	lsr	r30
    7c1a:	e6 95       	lsr	r30
    7c1c:	e6 95       	lsr	r30
    7c1e:	e8 5e       	subi	r30, 0xE8	; 232
    7c20:	f9 4f       	sbci	r31, 0xF9	; 249
    7c22:	24 91       	lpm	r18, Z
    7c24:	fc 01       	movw	r30, r24
    7c26:	35 e0       	ldi	r19, 0x05	; 5
    7c28:	f6 95       	lsr	r31
    7c2a:	e7 95       	ror	r30
    7c2c:	3a 95       	dec	r19
    7c2e:	e1 f7       	brne	.-8      	; 0x7c28 <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    7c30:	ef 73       	andi	r30, 0x3F	; 63
    7c32:	ff 27       	eor	r31, r31
    7c34:	e8 52       	subi	r30, 0x28	; 40
    7c36:	fa 4f       	sbci	r31, 0xFA	; 250
    7c38:	64 91       	lpm	r22, Z
    7c3a:	8f 71       	andi	r24, 0x1F	; 31
    7c3c:	99 27       	eor	r25, r25
    7c3e:	fc 01       	movw	r30, r24
    7c40:	e8 5e       	subi	r30, 0xE8	; 232
    7c42:	f9 4f       	sbci	r31, 0xF9	; 249
    7c44:	e4 91       	lpm	r30, Z
    7c46:	70 e0       	ldi	r23, 0x00	; 0
    7c48:	90 e0       	ldi	r25, 0x00	; 0
    7c4a:	80 e0       	ldi	r24, 0x00	; 0
    7c4c:	98 2f       	mov	r25, r24
    7c4e:	87 2f       	mov	r24, r23
    7c50:	76 2f       	mov	r23, r22
    7c52:	66 27       	eor	r22, r22
    7c54:	82 2b       	or	r24, r18
    7c56:	6e 2b       	or	r22, r30
    7c58:	08 95       	ret

00007c5a <Framebuffer_GFX::fillScreen(unsigned int)>:
    7c5a:	8f 92       	push	r8
    7c5c:	9f 92       	push	r9
    7c5e:	af 92       	push	r10
    7c60:	bf 92       	push	r11
    7c62:	cf 92       	push	r12
    7c64:	df 92       	push	r13
    7c66:	ef 92       	push	r14
    7c68:	ff 92       	push	r15
    7c6a:	cf 93       	push	r28
    7c6c:	df 93       	push	r29
    7c6e:	ec 01       	movw	r28, r24
    7c70:	cb 01       	movw	r24, r22
    7c72:	fe 01       	movw	r30, r28
    7c74:	ef 5c       	subi	r30, 0xCF	; 207
    7c76:	fe 4f       	sbci	r31, 0xFE	; 254
    7c78:	20 81       	ld	r18, Z
    7c7a:	22 23       	and	r18, r18
    7c7c:	39 f1       	breq	.+78     	; 0x7ccc <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    7c7e:	34 97       	sbiw	r30, 0x04	; 4
    7c80:	60 81       	ld	r22, Z
    7c82:	71 81       	ldd	r23, Z+1	; 0x01
    7c84:	82 81       	ldd	r24, Z+2	; 0x02
    7c86:	30 e0       	ldi	r19, 0x00	; 0
    7c88:	20 e0       	ldi	r18, 0x00	; 0
    7c8a:	c1 2c       	mov	r12, r1
    7c8c:	d1 2c       	mov	r13, r1
    7c8e:	76 01       	movw	r14, r12
    7c90:	de 01       	movw	r26, r28
    7c92:	a7 5d       	subi	r26, 0xD7	; 215
    7c94:	be 4f       	sbci	r27, 0xFE	; 254
    7c96:	cb 5d       	subi	r28, 0xDB	; 219
    7c98:	de 4f       	sbci	r29, 0xFE	; 254
    7c9a:	8d 90       	ld	r8, X+
    7c9c:	9d 90       	ld	r9, X+
    7c9e:	ad 90       	ld	r10, X+
    7ca0:	bc 90       	ld	r11, X
    7ca2:	13 97       	sbiw	r26, 0x03	; 3
    7ca4:	c8 14       	cp	r12, r8
    7ca6:	d9 04       	cpc	r13, r9
    7ca8:	ea 04       	cpc	r14, r10
    7caa:	fb 04       	cpc	r15, r11
    7cac:	88 f4       	brcc	.+34     	; 0x7cd0 <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    7cae:	e8 81       	ld	r30, Y
    7cb0:	f9 81       	ldd	r31, Y+1	; 0x01
    7cb2:	e2 0f       	add	r30, r18
    7cb4:	f3 1f       	adc	r31, r19
    7cb6:	80 83       	st	Z, r24
    7cb8:	71 83       	std	Z+1, r23	; 0x01
    7cba:	62 83       	std	Z+2, r22	; 0x02
    7cbc:	9f ef       	ldi	r25, 0xFF	; 255
    7cbe:	c9 1a       	sub	r12, r25
    7cc0:	d9 0a       	sbc	r13, r25
    7cc2:	e9 0a       	sbc	r14, r25
    7cc4:	f9 0a       	sbc	r15, r25
    7cc6:	2d 5f       	subi	r18, 0xFD	; 253
    7cc8:	3f 4f       	sbci	r19, 0xFF	; 255
    7cca:	e7 cf       	rjmp	.-50     	; 0x7c9a <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    7ccc:	a2 df       	rcall	.-188    	; 0x7c12 <Framebuffer_GFX::expandColor(unsigned int)>
    7cce:	db cf       	rjmp	.-74     	; 0x7c86 <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    7cd0:	df 91       	pop	r29
    7cd2:	cf 91       	pop	r28
    7cd4:	ff 90       	pop	r15
    7cd6:	ef 90       	pop	r14
    7cd8:	df 90       	pop	r13
    7cda:	cf 90       	pop	r12
    7cdc:	bf 90       	pop	r11
    7cde:	af 90       	pop	r10
    7ce0:	9f 90       	pop	r9
    7ce2:	8f 90       	pop	r8
    7ce4:	08 95       	ret

00007ce6 <Framebuffer_GFX::CRGBtoint32(CRGB)>:
    7ce6:	0f 93       	push	r16
    7ce8:	1f 93       	push	r17
    7cea:	fc 01       	movw	r30, r24
    7cec:	60 81       	ld	r22, Z
    7cee:	70 e0       	ldi	r23, 0x00	; 0
    7cf0:	90 e0       	ldi	r25, 0x00	; 0
    7cf2:	80 e0       	ldi	r24, 0x00	; 0
    7cf4:	cb 01       	movw	r24, r22
    7cf6:	77 27       	eor	r23, r23
    7cf8:	66 27       	eor	r22, r22
    7cfa:	01 81       	ldd	r16, Z+1	; 0x01
    7cfc:	10 e0       	ldi	r17, 0x00	; 0
    7cfe:	10 2f       	mov	r17, r16
    7d00:	00 27       	eor	r16, r16
    7d02:	01 2e       	mov	r0, r17
    7d04:	00 0c       	add	r0, r0
    7d06:	22 0b       	sbc	r18, r18
    7d08:	33 0b       	sbc	r19, r19
    7d0a:	60 0f       	add	r22, r16
    7d0c:	71 1f       	adc	r23, r17
    7d0e:	82 1f       	adc	r24, r18
    7d10:	93 1f       	adc	r25, r19
    7d12:	22 81       	ldd	r18, Z+2	; 0x02
    7d14:	62 0f       	add	r22, r18
    7d16:	71 1d       	adc	r23, r1
    7d18:	81 1d       	adc	r24, r1
    7d1a:	91 1d       	adc	r25, r1
    7d1c:	1f 91       	pop	r17
    7d1e:	0f 91       	pop	r16
    7d20:	08 95       	ret

00007d22 <Framebuffer_GFX::XY(int, int)>:

int Framebuffer_GFX::XY(int16_t x, int16_t y) {
    7d22:	6f 92       	push	r6
    7d24:	7f 92       	push	r7
    7d26:	9f 92       	push	r9
    7d28:	af 92       	push	r10
    7d2a:	bf 92       	push	r11
    7d2c:	cf 92       	push	r12
    7d2e:	df 92       	push	r13
    7d30:	ef 92       	push	r14
    7d32:	ff 92       	push	r15
    7d34:	0f 93       	push	r16
    7d36:	1f 93       	push	r17
    7d38:	cf 93       	push	r28
    7d3a:	df 93       	push	r29
    7d3c:	ec 01       	movw	r28, r24
    7d3e:	cb 01       	movw	r24, r22
    7d40:	8a 01       	movw	r16, r20
  // If you send an out of bounds value, you get an special result 
  // pointing to the last pixel. It doesn't look great, but better
  // than crashing. Still, fix the upstream code.
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;
    7d42:	77 fd       	sbrc	r23, 7
    7d44:	0c c0       	rjmp	.+24     	; 0x7d5e <Framebuffer_GFX::XY(int, int)+0x3c>
    7d46:	57 fd       	sbrc	r21, 7
    7d48:	0a c0       	rjmp	.+20     	; 0x7d5e <Framebuffer_GFX::XY(int, int)+0x3c>
    7d4a:	2f 81       	ldd	r18, Y+7	; 0x07
    7d4c:	38 85       	ldd	r19, Y+8	; 0x08
    7d4e:	62 17       	cp	r22, r18
    7d50:	73 07       	cpc	r23, r19
    7d52:	2c f4       	brge	.+10     	; 0x7d5e <Framebuffer_GFX::XY(int, int)+0x3c>
    7d54:	29 85       	ldd	r18, Y+9	; 0x09
    7d56:	3a 85       	ldd	r19, Y+10	; 0x0a
    7d58:	42 17       	cp	r20, r18
    7d5a:	53 07       	cpc	r21, r19
    7d5c:	9c f0       	brlt	.+38     	; 0x7d84 <Framebuffer_GFX::XY(int, int)+0x62>
    7d5e:	c7 5d       	subi	r28, 0xD7	; 215
    7d60:	de 4f       	sbci	r29, 0xFE	; 254
    7d62:	88 81       	ld	r24, Y
    7d64:	99 81       	ldd	r25, Y+1	; 0x01
    7d66:	01 97       	sbiw	r24, 0x01	; 1
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}
    7d68:	df 91       	pop	r29
    7d6a:	cf 91       	pop	r28
    7d6c:	1f 91       	pop	r17
    7d6e:	0f 91       	pop	r16
    7d70:	ff 90       	pop	r15
    7d72:	ef 90       	pop	r14
    7d74:	df 90       	pop	r13
    7d76:	cf 90       	pop	r12
    7d78:	bf 90       	pop	r11
    7d7a:	af 90       	pop	r10
    7d7c:	9f 90       	pop	r9
    7d7e:	7f 90       	pop	r7
    7d80:	6f 90       	pop	r6
    7d82:	08 95       	ret
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;

  int16_t t;
  switch(rotation) {
    7d84:	2d 89       	ldd	r18, Y+21	; 0x15
    7d86:	22 30       	cpi	r18, 0x02	; 2
    7d88:	d9 f0       	breq	.+54     	; 0x7dc0 <Framebuffer_GFX::XY(int, int)+0x9e>
    7d8a:	23 30       	cpi	r18, 0x03	; 3
    7d8c:	51 f1       	breq	.+84     	; 0x7de2 <Framebuffer_GFX::XY(int, int)+0xc0>
    7d8e:	21 30       	cpi	r18, 0x01	; 1
    7d90:	41 f4       	brne	.+16     	; 0x7da2 <Framebuffer_GFX::XY(int, int)+0x80>
   case 1:
    t = x;
    x = WIDTH  - 1 - y;
    7d92:	2b 81       	ldd	r18, Y+3	; 0x03
    7d94:	3c 81       	ldd	r19, Y+4	; 0x04
    7d96:	21 50       	subi	r18, 0x01	; 1
    7d98:	31 09       	sbc	r19, r1
    7d9a:	24 1b       	sub	r18, r20
    7d9c:	35 0b       	sbc	r19, r21
    7d9e:	8b 01       	movw	r16, r22
    7da0:	c9 01       	movw	r24, r18
    break;
  }

  int tileOffset = 0, pixelOffset;

  if(remapFn) { // Custom X/Y remapping function
    7da2:	fe 01       	movw	r30, r28
    7da4:	e9 5d       	subi	r30, 0xD9	; 217
    7da6:	fe 4f       	sbci	r31, 0xFE	; 254
    7da8:	01 90       	ld	r0, Z+
    7daa:	f0 81       	ld	r31, Z
    7dac:	e0 2d       	mov	r30, r0
    7dae:	30 97       	sbiw	r30, 0x00	; 0
    7db0:	09 f1       	breq	.+66     	; 0x7df4 <Framebuffer_GFX::XY(int, int)+0xd2>
    pixelOffset = (*remapFn)(x, y);
    7db2:	b8 01       	movw	r22, r16
    7db4:	09 95       	icall
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    7db6:	50 e0       	ldi	r21, 0x00	; 0
    7db8:	40 e0       	ldi	r20, 0x00	; 0
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
    7dba:	84 0f       	add	r24, r20
    7dbc:	95 1f       	adc	r25, r21
    7dbe:	d4 cf       	rjmp	.-88     	; 0x7d68 <Framebuffer_GFX::XY(int, int)+0x46>
    t = x;
    x = WIDTH  - 1 - y;
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
    7dc0:	2b 81       	ldd	r18, Y+3	; 0x03
    7dc2:	3c 81       	ldd	r19, Y+4	; 0x04
    7dc4:	21 50       	subi	r18, 0x01	; 1
    7dc6:	31 09       	sbc	r19, r1
    7dc8:	a9 01       	movw	r20, r18
    7dca:	46 1b       	sub	r20, r22
    7dcc:	57 0b       	sbc	r21, r23
    7dce:	ca 01       	movw	r24, r20
    y = HEIGHT - 1 - y;
    7dd0:	2d 81       	ldd	r18, Y+5	; 0x05
    7dd2:	3e 81       	ldd	r19, Y+6	; 0x06
    7dd4:	21 50       	subi	r18, 0x01	; 1
    7dd6:	31 09       	sbc	r19, r1
    7dd8:	f9 01       	movw	r30, r18
    7dda:	e0 1b       	sub	r30, r16
    7ddc:	f1 0b       	sbc	r31, r17
    7dde:	8f 01       	movw	r16, r30
    7de0:	e0 cf       	rjmp	.-64     	; 0x7da2 <Framebuffer_GFX::XY(int, int)+0x80>
    break;
   case 3:
    t = x;
    x = y;
    y = HEIGHT - 1 - t;
    7de2:	2d 81       	ldd	r18, Y+5	; 0x05
    7de4:	3e 81       	ldd	r19, Y+6	; 0x06
    7de6:	21 50       	subi	r18, 0x01	; 1
    7de8:	31 09       	sbc	r19, r1
    7dea:	26 1b       	sub	r18, r22
    7dec:	37 0b       	sbc	r19, r23
    7dee:	ca 01       	movw	r24, r20
    7df0:	89 01       	movw	r16, r18
    7df2:	d7 cf       	rjmp	.-82     	; 0x7da2 <Framebuffer_GFX::XY(int, int)+0x80>

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    7df4:	fe 01       	movw	r30, r28
    7df6:	e6 5e       	subi	r30, 0xE6	; 230
    7df8:	fe 4f       	sbci	r31, 0xFE	; 254
    7dfa:	d0 80       	ld	r13, Z
    7dfc:	fd 2d       	mov	r31, r13
    7dfe:	f3 70       	andi	r31, 0x03	; 3
    7e00:	cf 2e       	mov	r12, r31
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    7e02:	fe 01       	movw	r30, r28
    7e04:	e5 5e       	subi	r30, 0xE5	; 229
    7e06:	fe 4f       	sbci	r31, 0xFE	; 254
    7e08:	b0 80       	ld	r11, Z
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    7e0a:	50 e0       	ldi	r21, 0x00	; 0
    7e0c:	40 e0       	ldi	r20, 0x00	; 0
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    7e0e:	bb 20       	and	r11, r11
    7e10:	09 f4       	brne	.+2      	; 0x7e14 <Framebuffer_GFX::XY(int, int)+0xf2>
    7e12:	64 c0       	rjmp	.+200    	; 0x7edc <Framebuffer_GFX::XY(int, int)+0x1ba>
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
    7e14:	32 96       	adiw	r30, 0x02	; 2
    7e16:	e0 80       	ld	r14, Z
    7e18:	f1 80       	ldd	r15, Z+1	; 0x01
    7e1a:	b7 01       	movw	r22, r14
    7e1c:	0e 94 60 51 	call	0xa2c0	; 0xa2c0 <__udivmodhi4>
    7e20:	9b 01       	movw	r18, r22
    7e22:	98 2e       	mov	r9, r24
    7e24:	a9 2e       	mov	r10, r25
      major = y / matrixHeight,           // start (will swap later if needed)
    7e26:	32 96       	adiw	r30, 0x02	; 2
    7e28:	60 80       	ld	r6, Z
    7e2a:	71 80       	ldd	r7, Z+1	; 0x01
    7e2c:	c8 01       	movw	r24, r16
    7e2e:	b3 01       	movw	r22, r6
    7e30:	0e 94 60 51 	call	0xa2c0	; 0xa2c0 <__udivmodhi4>
    7e34:	db 01       	movw	r26, r22
    7e36:	58 2f       	mov	r21, r24
    7e38:	49 2f       	mov	r20, r25
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
    7e3a:	89 2d       	mov	r24, r9
    7e3c:	9a 2d       	mov	r25, r10
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
    7e3e:	05 2f       	mov	r16, r21
    7e40:	14 2f       	mov	r17, r20

      // Determine corner of entry, flip axes if needed
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
    7e42:	d5 fe       	sbrs	r13, 5
    7e44:	06 c0       	rjmp	.+12     	; 0x7e52 <Framebuffer_GFX::XY(int, int)+0x130>
    7e46:	4b 2d       	mov	r20, r11
    7e48:	41 50       	subi	r20, 0x01	; 1
    7e4a:	55 0b       	sbc	r21, r21
    7e4c:	42 1b       	sub	r20, r18
    7e4e:	53 0b       	sbc	r21, r19
    7e50:	9a 01       	movw	r18, r20
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
    7e52:	d4 fe       	sbrs	r13, 4
    7e54:	09 c0       	rjmp	.+18     	; 0x7e68 <Framebuffer_GFX::XY(int, int)+0x146>
    7e56:	ae 01       	movw	r20, r28
    7e58:	44 5e       	subi	r20, 0xE4	; 228
    7e5a:	5e 4f       	sbci	r21, 0xFE	; 254
    7e5c:	fa 01       	movw	r30, r20
    7e5e:	60 81       	ld	r22, Z
    7e60:	61 50       	subi	r22, 0x01	; 1
    7e62:	77 0b       	sbc	r23, r23
    7e64:	6a 1b       	sub	r22, r26
    7e66:	7b 0b       	sbc	r23, r27

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
    7e68:	d6 fc       	sbrc	r13, 6
    7e6a:	11 c0       	rjmp	.+34     	; 0x7e8e <Framebuffer_GFX::XY(int, int)+0x16c>
        majorScale = tilesX;
    7e6c:	4b 2d       	mov	r20, r11
    7e6e:	50 e0       	ldi	r21, 0x00	; 0
    7e70:	b6 2f       	mov	r27, r22
    7e72:	a7 2f       	mov	r26, r23
    7e74:	b9 01       	movw	r22, r18
    7e76:	2b 2f       	mov	r18, r27
    7e78:	3a 2f       	mov	r19, r26
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
    7e7a:	d7 fc       	sbrc	r13, 7
    7e7c:	0e c0       	rjmp	.+28     	; 0x7e9a <Framebuffer_GFX::XY(int, int)+0x178>
        // pixel math later.
        if(major & 1) {
          corner ^= NEO_MATRIX_CORNER;
          tile = (major + 1) * majorScale - 1 - minor;
        } else {
          tile =  major      * majorScale     + minor;
    7e7e:	24 9f       	mul	r18, r20
    7e80:	d0 01       	movw	r26, r0
    7e82:	25 9f       	mul	r18, r21
    7e84:	b0 0d       	add	r27, r0
    7e86:	34 9f       	mul	r19, r20
    7e88:	b0 0d       	add	r27, r0
    7e8a:	11 24       	eor	r1, r1
    7e8c:	17 c0       	rjmp	.+46     	; 0x7ebc <Framebuffer_GFX::XY(int, int)+0x19a>
      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
        majorScale = tilesX;
      } else {
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
    7e8e:	de 01       	movw	r26, r28
    7e90:	a4 5e       	subi	r26, 0xE4	; 228
    7e92:	be 4f       	sbci	r27, 0xFE	; 254
    7e94:	4c 91       	ld	r20, X
    7e96:	50 e0       	ldi	r21, 0x00	; 0
    7e98:	f0 cf       	rjmp	.-32     	; 0x7e7a <Framebuffer_GFX::XY(int, int)+0x158>
        tile = major * majorScale + minor;
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
    7e9a:	20 ff       	sbrs	r18, 0
    7e9c:	f0 cf       	rjmp	.-32     	; 0x7e7e <Framebuffer_GFX::XY(int, int)+0x15c>
          corner ^= NEO_MATRIX_CORNER;
    7e9e:	ad 2d       	mov	r26, r13
    7ea0:	a0 95       	com	r26
    7ea2:	a3 70       	andi	r26, 0x03	; 3
    7ea4:	ca 2e       	mov	r12, r26
          tile = (major + 1) * majorScale - 1 - minor;
    7ea6:	2f 5f       	subi	r18, 0xFF	; 255
    7ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    7eaa:	24 9f       	mul	r18, r20
    7eac:	d0 01       	movw	r26, r0
    7eae:	25 9f       	mul	r18, r21
    7eb0:	b0 0d       	add	r27, r0
    7eb2:	34 9f       	mul	r19, r20
    7eb4:	b0 0d       	add	r27, r0
    7eb6:	11 24       	eor	r1, r1
    7eb8:	60 95       	com	r22
    7eba:	70 95       	com	r23
        } else {
          tile =  major      * majorScale     + minor;
    7ebc:	6a 0f       	add	r22, r26
    7ebe:	7b 1f       	adc	r23, r27
        }
      }

      // Index of first pixel in tile
      tileOffset = tile * matrixWidth * matrixHeight;
    7ec0:	e6 9c       	mul	r14, r6
    7ec2:	90 01       	movw	r18, r0
    7ec4:	e7 9c       	mul	r14, r7
    7ec6:	30 0d       	add	r19, r0
    7ec8:	f6 9c       	mul	r15, r6
    7eca:	30 0d       	add	r19, r0
    7ecc:	11 24       	eor	r1, r1
    7ece:	26 9f       	mul	r18, r22
    7ed0:	a0 01       	movw	r20, r0
    7ed2:	27 9f       	mul	r18, r23
    7ed4:	50 0d       	add	r21, r0
    7ed6:	36 9f       	mul	r19, r22
    7ed8:	50 0d       	add	r21, r0
    7eda:	11 24       	eor	r1, r1

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;
    7edc:	98 01       	movw	r18, r16

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    7ede:	6c 2d       	mov	r22, r12
    7ee0:	62 70       	andi	r22, 0x02	; 2
    7ee2:	59 f0       	breq	.+22     	; 0x7efa <Framebuffer_GFX::XY(int, int)+0x1d8>
    7ee4:	fe 01       	movw	r30, r28
    7ee6:	e3 5e       	subi	r30, 0xE3	; 227
    7ee8:	fe 4f       	sbci	r31, 0xFE	; 254
    7eea:	60 81       	ld	r22, Z
    7eec:	71 81       	ldd	r23, Z+1	; 0x01
    7eee:	61 50       	subi	r22, 0x01	; 1
    7ef0:	71 09       	sbc	r23, r1
    7ef2:	fb 01       	movw	r30, r22
    7ef4:	e8 1b       	sub	r30, r24
    7ef6:	f9 0b       	sbc	r31, r25
    7ef8:	cf 01       	movw	r24, r30
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
    7efa:	c0 fe       	sbrs	r12, 0
    7efc:	09 c0       	rjmp	.+18     	; 0x7f10 <Framebuffer_GFX::XY(int, int)+0x1ee>
    7efe:	fe 01       	movw	r30, r28
    7f00:	e1 5e       	subi	r30, 0xE1	; 225
    7f02:	fe 4f       	sbci	r31, 0xFE	; 254
    7f04:	20 81       	ld	r18, Z
    7f06:	31 81       	ldd	r19, Z+1	; 0x01
    7f08:	21 50       	subi	r18, 0x01	; 1
    7f0a:	31 09       	sbc	r19, r1
    7f0c:	20 1b       	sub	r18, r16
    7f0e:	31 0b       	sbc	r19, r17

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
    7f10:	d2 fc       	sbrc	r13, 2
    7f12:	13 c0       	rjmp	.+38     	; 0x7f3a <Framebuffer_GFX::XY(int, int)+0x218>
      majorScale = matrixWidth;
    7f14:	c3 5e       	subi	r28, 0xE3	; 227
    7f16:	de 4f       	sbci	r29, 0xFE	; 254
    7f18:	68 81       	ld	r22, Y
    7f1a:	79 81       	ldd	r23, Y+1	; 0x01
    7f1c:	f2 2f       	mov	r31, r18
    7f1e:	e3 2f       	mov	r30, r19
    7f20:	9c 01       	movw	r18, r24
    7f22:	8f 2f       	mov	r24, r31
    7f24:	9e 2f       	mov	r25, r30
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    }

    // Determine pixel number within tile/matrix
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
    7f26:	d3 fc       	sbrc	r13, 3
    7f28:	0d c0       	rjmp	.+26     	; 0x7f44 <Framebuffer_GFX::XY(int, int)+0x222>
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
      else          pixelOffset =  major      * majorScale     + minor;
    7f2a:	86 9f       	mul	r24, r22
    7f2c:	f0 01       	movw	r30, r0
    7f2e:	87 9f       	mul	r24, r23
    7f30:	f0 0d       	add	r31, r0
    7f32:	96 9f       	mul	r25, r22
    7f34:	f0 0d       	add	r31, r0
    7f36:	11 24       	eor	r1, r1
    7f38:	11 c0       	rjmp	.+34     	; 0x7f5c <Framebuffer_GFX::XY(int, int)+0x23a>
    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
      majorScale = matrixWidth;
    } else {
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    7f3a:	c1 5e       	subi	r28, 0xE1	; 225
    7f3c:	de 4f       	sbci	r29, 0xFE	; 254
    7f3e:	68 81       	ld	r22, Y
    7f40:	79 81       	ldd	r23, Y+1	; 0x01
    7f42:	f1 cf       	rjmp	.-30     	; 0x7f26 <Framebuffer_GFX::XY(int, int)+0x204>
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
    7f44:	80 ff       	sbrs	r24, 0
    7f46:	f1 cf       	rjmp	.-30     	; 0x7f2a <Framebuffer_GFX::XY(int, int)+0x208>
    7f48:	01 96       	adiw	r24, 0x01	; 1
    7f4a:	86 9f       	mul	r24, r22
    7f4c:	f0 01       	movw	r30, r0
    7f4e:	87 9f       	mul	r24, r23
    7f50:	f0 0d       	add	r31, r0
    7f52:	96 9f       	mul	r25, r22
    7f54:	f0 0d       	add	r31, r0
    7f56:	11 24       	eor	r1, r1
    7f58:	20 95       	com	r18
    7f5a:	30 95       	com	r19
      else          pixelOffset =  major      * majorScale     + minor;
    7f5c:	cf 01       	movw	r24, r30
    7f5e:	82 0f       	add	r24, r18
    7f60:	93 1f       	adc	r25, r19
    7f62:	2b cf       	rjmp	.-426    	; 0x7dba <Framebuffer_GFX::XY(int, int)+0x98>

00007f64 <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {
    7f64:	9f 92       	push	r9
    7f66:	af 92       	push	r10
    7f68:	bf 92       	push	r11
    7f6a:	cf 92       	push	r12
    7f6c:	df 92       	push	r13
    7f6e:	ef 92       	push	r14
    7f70:	ff 92       	push	r15
    7f72:	0f 93       	push	r16
    7f74:	1f 93       	push	r17
    7f76:	cf 93       	push	r28
    7f78:	df 93       	push	r29
    7f7a:	ec 01       	movw	r28, r24

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    7f7c:	77 fd       	sbrc	r23, 7
    7f7e:	2b c0       	rjmp	.+86     	; 0x7fd6 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    7f80:	57 fd       	sbrc	r21, 7
    7f82:	29 c0       	rjmp	.+82     	; 0x7fd6 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    7f84:	8f 81       	ldd	r24, Y+7	; 0x07
    7f86:	98 85       	ldd	r25, Y+8	; 0x08
    7f88:	68 17       	cp	r22, r24
    7f8a:	79 07       	cpc	r23, r25
    7f8c:	24 f5       	brge	.+72     	; 0x7fd6 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    7f8e:	89 85       	ldd	r24, Y+9	; 0x09
    7f90:	9a 85       	ldd	r25, Y+10	; 0x0a
    7f92:	48 17       	cp	r20, r24
    7f94:	59 07       	cpc	r21, r25
    7f96:	fc f4       	brge	.+62     	; 0x7fd6 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    7f98:	6a 01       	movw	r12, r20
    7f9a:	7b 01       	movw	r14, r22

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    7f9c:	fe 01       	movw	r30, r28
    7f9e:	ef 5c       	subi	r30, 0xCF	; 207
    7fa0:	fe 4f       	sbci	r31, 0xFE	; 254
    7fa2:	80 81       	ld	r24, Z
    7fa4:	88 23       	and	r24, r24
    7fa6:	19 f1       	breq	.+70     	; 0x7fee <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    7fa8:	34 97       	sbiw	r30, 0x04	; 4
    7faa:	b0 80       	ld	r11, Z
    7fac:	a1 80       	ldd	r10, Z+1	; 0x01
    7fae:	92 80       	ldd	r9, Z+2	; 0x02
    7fb0:	fe 01       	movw	r30, r28
    7fb2:	eb 5d       	subi	r30, 0xDB	; 219
    7fb4:	fe 4f       	sbci	r31, 0xFE	; 254
    7fb6:	00 81       	ld	r16, Z
    7fb8:	11 81       	ldd	r17, Z+1	; 0x01
    7fba:	a6 01       	movw	r20, r12
    7fbc:	b7 01       	movw	r22, r14
    7fbe:	ce 01       	movw	r24, r28
    7fc0:	b0 de       	rcall	.-672    	; 0x7d22 <Framebuffer_GFX::XY(int, int)>
    7fc2:	fc 01       	movw	r30, r24
    7fc4:	ee 0f       	add	r30, r30
    7fc6:	ff 1f       	adc	r31, r31
    7fc8:	e8 0f       	add	r30, r24
    7fca:	f9 1f       	adc	r31, r25
    7fcc:	e0 0f       	add	r30, r16
    7fce:	f1 1f       	adc	r31, r17
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    7fd0:	90 82       	st	Z, r9
        g = (colorcode >>  8) & 0xFF;
    7fd2:	a1 82       	std	Z+1, r10	; 0x01
        b = (colorcode >>  0) & 0xFF;
    7fd4:	b2 82       	std	Z+2, r11	; 0x02
}
    7fd6:	df 91       	pop	r29
    7fd8:	cf 91       	pop	r28
    7fda:	1f 91       	pop	r17
    7fdc:	0f 91       	pop	r16
    7fde:	ff 90       	pop	r15
    7fe0:	ef 90       	pop	r14
    7fe2:	df 90       	pop	r13
    7fe4:	cf 90       	pop	r12
    7fe6:	bf 90       	pop	r11
    7fe8:	af 90       	pop	r10
    7fea:	9f 90       	pop	r9
    7fec:	08 95       	ret

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    7fee:	c9 01       	movw	r24, r18
    7ff0:	10 de       	rcall	.-992    	; 0x7c12 <Framebuffer_GFX::expandColor(unsigned int)>
    7ff2:	b6 2e       	mov	r11, r22
    7ff4:	a7 2e       	mov	r10, r23
    7ff6:	98 2e       	mov	r9, r24
    7ff8:	db cf       	rjmp	.-74     	; 0x7fb0 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

00007ffa <Framebuffer_GFX::drawPixel(int, int, unsigned long)>:
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint32_t color) {
    7ffa:	ff 92       	push	r15
    7ffc:	0f 93       	push	r16
    7ffe:	1f 93       	push	r17
    8000:	cf 93       	push	r28
    8002:	df 93       	push	r29
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    8004:	77 fd       	sbrc	r23, 7
    8006:	21 c0       	rjmp	.+66     	; 0x804a <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    8008:	57 fd       	sbrc	r21, 7
    800a:	1f c0       	rjmp	.+62     	; 0x804a <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    800c:	dc 01       	movw	r26, r24
    800e:	17 96       	adiw	r26, 0x07	; 7
    8010:	ed 91       	ld	r30, X+
    8012:	fc 91       	ld	r31, X
    8014:	18 97       	sbiw	r26, 0x08	; 8
    8016:	6e 17       	cp	r22, r30
    8018:	7f 07       	cpc	r23, r31
    801a:	bc f4       	brge	.+46     	; 0x804a <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    801c:	19 96       	adiw	r26, 0x09	; 9
    801e:	ed 91       	ld	r30, X+
    8020:	fc 91       	ld	r31, X
    8022:	4e 17       	cp	r20, r30
    8024:	5f 07       	cpc	r21, r31
    8026:	8c f4       	brge	.+34     	; 0x804a <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    8028:	f2 2e       	mov	r15, r18
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif

  _fb[XY(x,y)] = color;
    802a:	fc 01       	movw	r30, r24
    802c:	eb 5d       	subi	r30, 0xDB	; 219
    802e:	fe 4f       	sbci	r31, 0xFE	; 254
    8030:	c0 81       	ld	r28, Z
    8032:	d1 81       	ldd	r29, Z+1	; 0x01
    8034:	76 de       	rcall	.-788    	; 0x7d22 <Framebuffer_GFX::XY(int, int)>
    8036:	fc 01       	movw	r30, r24
    8038:	ee 0f       	add	r30, r30
    803a:	ff 1f       	adc	r31, r31
    803c:	e8 0f       	add	r30, r24
    803e:	f9 1f       	adc	r31, r25
    8040:	ec 0f       	add	r30, r28
    8042:	fd 1f       	adc	r31, r29
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    8044:	f0 82       	st	Z, r15
        g = (colorcode >>  8) & 0xFF;
    8046:	11 83       	std	Z+1, r17	; 0x01
        b = (colorcode >>  0) & 0xFF;
    8048:	02 83       	std	Z+2, r16	; 0x02
}
    804a:	df 91       	pop	r29
    804c:	cf 91       	pop	r28
    804e:	1f 91       	pop	r17
    8050:	0f 91       	pop	r16
    8052:	ff 90       	pop	r15
    8054:	08 95       	ret

00008056 <Framebuffer_GFX::drawPixel(int, int, CRGB)>:

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
    8056:	af 92       	push	r10
    8058:	bf 92       	push	r11
    805a:	cf 92       	push	r12
    805c:	df 92       	push	r13
    805e:	ef 92       	push	r14
    8060:	ff 92       	push	r15
    8062:	0f 93       	push	r16
    8064:	1f 93       	push	r17
    8066:	cf 93       	push	r28
    8068:	df 93       	push	r29
    806a:	00 d0       	rcall	.+0      	; 0x806c <Framebuffer_GFX::drawPixel(int, int, CRGB)+0x16>
    806c:	1f 92       	push	r1
    806e:	cd b7       	in	r28, 0x3d	; 61
    8070:	de b7       	in	r29, 0x3e	; 62
    8072:	7c 01       	movw	r14, r24
    8074:	6b 01       	movw	r12, r22
    8076:	5a 01       	movw	r10, r20
    8078:	f9 01       	movw	r30, r18
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    807a:	80 81       	ld	r24, Z
    807c:	89 83       	std	Y+1, r24	; 0x01
        g = rhs.g;
    807e:	81 81       	ldd	r24, Z+1	; 0x01
    8080:	8a 83       	std	Y+2, r24	; 0x02
        b = rhs.b;
    8082:	82 81       	ldd	r24, Z+2	; 0x02
    8084:	8b 83       	std	Y+3, r24	; 0x03
  drawPixel(x, y, CRGBtoint32(c));
    8086:	ce 01       	movw	r24, r28
    8088:	01 96       	adiw	r24, 0x01	; 1
    808a:	2d de       	rcall	.-934    	; 0x7ce6 <Framebuffer_GFX::CRGBtoint32(CRGB)>
    808c:	8b 01       	movw	r16, r22
    808e:	9c 01       	movw	r18, r24
    8090:	a5 01       	movw	r20, r10
    8092:	b6 01       	movw	r22, r12
    8094:	c7 01       	movw	r24, r14
    8096:	b1 df       	rcall	.-158    	; 0x7ffa <Framebuffer_GFX::drawPixel(int, int, unsigned long)>
}
    8098:	0f 90       	pop	r0
    809a:	0f 90       	pop	r0
    809c:	0f 90       	pop	r0
    809e:	df 91       	pop	r29
    80a0:	cf 91       	pop	r28
    80a2:	1f 91       	pop	r17
    80a4:	0f 91       	pop	r16
    80a6:	ff 90       	pop	r15
    80a8:	ef 90       	pop	r14
    80aa:	df 90       	pop	r13
    80ac:	cf 90       	pop	r12
    80ae:	bf 90       	pop	r11
    80b0:	af 90       	pop	r10
    80b2:	08 95       	ret

000080b4 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    80b4:	89 5d       	subi	r24, 0xD9	; 217
    80b6:	9e 4f       	sbci	r25, 0xFE	; 254
    80b8:	fc 01       	movw	r30, r24
    80ba:	71 83       	std	Z+1, r23	; 0x01
    80bc:	60 83       	st	Z, r22
}
    80be:	08 95       	ret

000080c0 <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    80c0:	da 01       	movw	r26, r20
    80c2:	fc 01       	movw	r30, r24
    80c4:	90 e0       	ldi	r25, 0x00	; 0
    80c6:	80 e0       	ldi	r24, 0x00	; 0
    80c8:	86 17       	cp	r24, r22
    80ca:	97 07       	cpc	r25, r23
    80cc:	6c f4       	brge	.+26     	; 0x80e8 <fill_solid(CRGB*, int, CRGB const&)+0x28>
    80ce:	2c 91       	ld	r18, X
    80d0:	20 83       	st	Z, r18
    80d2:	11 96       	adiw	r26, 0x01	; 1
    80d4:	2c 91       	ld	r18, X
    80d6:	11 97       	sbiw	r26, 0x01	; 1
    80d8:	21 83       	std	Z+1, r18	; 0x01
    80da:	12 96       	adiw	r26, 0x02	; 2
    80dc:	2c 91       	ld	r18, X
    80de:	12 97       	sbiw	r26, 0x02	; 2
    80e0:	22 83       	std	Z+2, r18	; 0x02
    80e2:	01 96       	adiw	r24, 0x01	; 1
    80e4:	33 96       	adiw	r30, 0x03	; 3
    80e6:	f0 cf       	rjmp	.-32     	; 0x80c8 <fill_solid(CRGB*, int, CRGB const&)+0x8>
    80e8:	08 95       	ret

000080ea <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    80ea:	0f 93       	push	r16
    80ec:	1f 93       	push	r17
    80ee:	cf 93       	push	r28
    80f0:	df 93       	push	r29
    80f2:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    80f4:	84 2f       	mov	r24, r20
    80f6:	82 95       	swap	r24
    80f8:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    80fa:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    80fc:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    80fe:	a8 2f       	mov	r26, r24
    8100:	aa 0f       	add	r26, r26
    8102:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    8104:	a6 0f       	add	r26, r22
    8106:	b7 2f       	mov	r27, r23
    8108:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    810a:	44 23       	and	r20, r20
    810c:	19 f0       	breq	.+6      	; 0x8114 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    810e:	31 e0       	ldi	r19, 0x01	; 1
    8110:	01 2b       	or	r16, r17
    8112:	09 f4       	brne	.+2      	; 0x8116 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    8114:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    8116:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    8118:	11 96       	adiw	r26, 0x01	; 1
    811a:	5c 91       	ld	r21, X
    811c:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    811e:	12 96       	adiw	r26, 0x02	; 2
    8120:	9c 91       	ld	r25, X
    8122:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    8124:	33 23       	and	r19, r19
    8126:	09 f4       	brne	.+2      	; 0x812a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    8128:	2a c0       	rjmp	.+84     	; 0x817e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    812a:	8f 30       	cpi	r24, 0x0F	; 15
    812c:	11 f0       	breq	.+4      	; 0x8132 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    812e:	ed 01       	movw	r28, r26
    8130:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    8132:	42 95       	swap	r20
    8134:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    8136:	74 2f       	mov	r23, r20
    8138:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    813a:	67 9f       	mul	r22, r23
    813c:	06 0e       	add	r0, r22
    813e:	60 e0       	ldi	r22, 0x00	; 0
    8140:	61 1d       	adc	r22, r1
    8142:	38 81       	ld	r19, Y
    8144:	34 9f       	mul	r19, r20
    8146:	03 0e       	add	r0, r19
    8148:	30 e0       	ldi	r19, 0x00	; 0
    814a:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    814c:	63 0f       	add	r22, r19
    814e:	57 9f       	mul	r21, r23
    8150:	05 0e       	add	r0, r21
    8152:	50 e0       	ldi	r21, 0x00	; 0
    8154:	51 1d       	adc	r21, r1
    8156:	39 81       	ldd	r19, Y+1	; 0x01
    8158:	34 9f       	mul	r19, r20
    815a:	03 0e       	add	r0, r19
    815c:	30 e0       	ldi	r19, 0x00	; 0
    815e:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    8160:	53 0f       	add	r21, r19
    8162:	39 2f       	mov	r19, r25
    8164:	37 9f       	mul	r19, r23
    8166:	03 0e       	add	r0, r19
    8168:	30 e0       	ldi	r19, 0x00	; 0
    816a:	31 1d       	adc	r19, r1
    816c:	9a 81       	ldd	r25, Y+2	; 0x02
    816e:	79 2f       	mov	r23, r25
    8170:	74 9f       	mul	r23, r20
    8172:	07 0e       	add	r0, r23
    8174:	70 e0       	ldi	r23, 0x00	; 0
    8176:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    8178:	93 2f       	mov	r25, r19
    817a:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    817c:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    817e:	2f 3f       	cpi	r18, 0xFF	; 255
    8180:	c1 f0       	breq	.+48     	; 0x81b2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    8182:	22 23       	and	r18, r18
    8184:	f9 f0       	breq	.+62     	; 0x81c4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    8186:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    8188:	66 23       	and	r22, r22
    818a:	21 f0       	breq	.+8      	; 0x8194 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    818c:	62 9f       	mul	r22, r18
    818e:	06 0e       	add	r0, r22
    8190:	60 e0       	ldi	r22, 0x00	; 0
    8192:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    8194:	55 23       	and	r21, r21
    8196:	21 f0       	breq	.+8      	; 0x81a0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    8198:	52 9f       	mul	r21, r18
    819a:	05 0e       	add	r0, r21
    819c:	50 e0       	ldi	r21, 0x00	; 0
    819e:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    81a0:	99 23       	and	r25, r25
    81a2:	31 f0       	breq	.+12     	; 0x81b0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    81a4:	39 2f       	mov	r19, r25
    81a6:	32 9f       	mul	r19, r18
    81a8:	03 0e       	add	r0, r19
    81aa:	30 e0       	ldi	r19, 0x00	; 0
    81ac:	31 1d       	adc	r19, r1
    81ae:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    81b0:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    81b2:	60 83       	st	Z, r22
    81b4:	51 83       	std	Z+1, r21	; 0x01
    81b6:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    81b8:	cf 01       	movw	r24, r30
    81ba:	df 91       	pop	r29
    81bc:	cf 91       	pop	r28
    81be:	1f 91       	pop	r17
    81c0:	0f 91       	pop	r16
    81c2:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    81c4:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    81c6:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    81c8:	60 e0       	ldi	r22, 0x00	; 0
    81ca:	f3 cf       	rjmp	.-26     	; 0x81b2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

000081cc <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    81cc:	7f 92       	push	r7
    81ce:	8f 92       	push	r8
    81d0:	9f 92       	push	r9
    81d2:	af 92       	push	r10
    81d4:	bf 92       	push	r11
    81d6:	cf 92       	push	r12
    81d8:	df 92       	push	r13
    81da:	ef 92       	push	r14
    81dc:	ff 92       	push	r15
    81de:	0f 93       	push	r16
    81e0:	1f 93       	push	r17
    81e2:	cf 93       	push	r28
    81e4:	df 93       	push	r29
    81e6:	fc 01       	movw	r30, r24
    81e8:	69 01       	movw	r12, r18
    81ea:	10 82       	st	Z, r1
    81ec:	11 82       	std	Z+1, r1	; 0x01
    81ee:	12 82       	std	Z+2, r1	; 0x02
    81f0:	66 23       	and	r22, r22
    81f2:	b9 f1       	breq	.+110    	; 0x8262 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    81f4:	8a 01       	movw	r16, r20
    81f6:	c1 e0       	ldi	r28, 0x01	; 1
    81f8:	d0 e0       	ldi	r29, 0x00	; 0
    81fa:	86 2e       	mov	r8, r22
    81fc:	91 2c       	mov	r9, r1
    81fe:	b1 2c       	mov	r11, r1
    8200:	a1 2c       	mov	r10, r1
    8202:	d8 01       	movw	r26, r16
    8204:	2d 91       	ld	r18, X+
    8206:	8d 01       	movw	r16, r26
    8208:	22 23       	and	r18, r18
    820a:	39 f1       	breq	.+78     	; 0x825a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    820c:	7e 01       	movw	r14, r28
    820e:	b1 e0       	ldi	r27, 0x01	; 1
    8210:	eb 1a       	sub	r14, r27
    8212:	f1 08       	sbc	r15, r1
    8214:	d6 01       	movw	r26, r12
    8216:	ae 0d       	add	r26, r14
    8218:	bf 1d       	adc	r27, r15
    821a:	7c 90       	ld	r7, X
    821c:	77 20       	and	r7, r7
    821e:	e9 f0       	breq	.+58     	; 0x825a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    8220:	30 e0       	ldi	r19, 0x00	; 0
    8222:	50 e0       	ldi	r21, 0x00	; 0
    8224:	40 e0       	ldi	r20, 0x00	; 0
    8226:	2f 5f       	subi	r18, 0xFF	; 255
    8228:	3f 4f       	sbci	r19, 0xFF	; 255
    822a:	4f 4f       	sbci	r20, 0xFF	; 255
    822c:	5f 4f       	sbci	r21, 0xFF	; 255
    822e:	c5 01       	movw	r24, r10
    8230:	b4 01       	movw	r22, r8
    8232:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__mulsi3>
    8236:	9b 01       	movw	r18, r22
    8238:	ac 01       	movw	r20, r24
    823a:	87 2d       	mov	r24, r7
    823c:	90 e0       	ldi	r25, 0x00	; 0
    823e:	b0 e0       	ldi	r27, 0x00	; 0
    8240:	a0 e0       	ldi	r26, 0x00	; 0
    8242:	bc 01       	movw	r22, r24
    8244:	cd 01       	movw	r24, r26
    8246:	6f 5f       	subi	r22, 0xFF	; 255
    8248:	7f 4f       	sbci	r23, 0xFF	; 255
    824a:	8f 4f       	sbci	r24, 0xFF	; 255
    824c:	9f 4f       	sbci	r25, 0xFF	; 255
    824e:	0e 94 51 51 	call	0xa2a2	; 0xa2a2 <__mulsi3>
    8252:	df 01       	movw	r26, r30
    8254:	ae 0d       	add	r26, r14
    8256:	bf 1d       	adc	r27, r15
    8258:	8c 93       	st	X, r24
    825a:	21 96       	adiw	r28, 0x01	; 1
    825c:	c4 30       	cpi	r28, 0x04	; 4
    825e:	d1 05       	cpc	r29, r1
    8260:	81 f6       	brne	.-96     	; 0x8202 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    8262:	cf 01       	movw	r24, r30
    8264:	df 91       	pop	r29
    8266:	cf 91       	pop	r28
    8268:	1f 91       	pop	r17
    826a:	0f 91       	pop	r16
    826c:	ff 90       	pop	r15
    826e:	ef 90       	pop	r14
    8270:	df 90       	pop	r13
    8272:	cf 90       	pop	r12
    8274:	bf 90       	pop	r11
    8276:	af 90       	pop	r10
    8278:	9f 90       	pop	r9
    827a:	8f 90       	pop	r8
    827c:	7f 90       	pop	r7
    827e:	08 95       	ret

00008280 <CFastLED::CFastLED()>:
    8280:	fc 01       	movw	r30, r24
    8282:	8f ef       	ldi	r24, 0xFF	; 255
    8284:	80 83       	st	Z, r24
    8286:	12 82       	std	Z+2, r1	; 0x02
    8288:	11 82       	std	Z+1, r1	; 0x01
    828a:	14 86       	std	Z+12, r1	; 0x0c
    828c:	13 86       	std	Z+11, r1	; 0x0b
    828e:	8f ef       	ldi	r24, 0xFF	; 255
    8290:	9f ef       	ldi	r25, 0xFF	; 255
    8292:	dc 01       	movw	r26, r24
    8294:	87 83       	std	Z+7, r24	; 0x07
    8296:	90 87       	std	Z+8, r25	; 0x08
    8298:	a1 87       	std	Z+9, r26	; 0x09
    829a:	b2 87       	std	Z+10, r27	; 0x0a
    829c:	08 95       	ret

0000829e <CFastLED::clearData()>:
    829e:	cf 93       	push	r28
    82a0:	df 93       	push	r29
    82a2:	c0 91 ca 10 	lds	r28, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    82a6:	d0 91 cb 10 	lds	r29, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    82aa:	20 97       	sbiw	r28, 0x00	; 0
    82ac:	89 f0       	breq	.+34     	; 0x82d0 <CFastLED::clearData()+0x32>
    82ae:	8a 81       	ldd	r24, Y+2	; 0x02
    82b0:	9b 81       	ldd	r25, Y+3	; 0x03
    82b2:	00 97       	sbiw	r24, 0x00	; 0
    82b4:	49 f0       	breq	.+18     	; 0x82c8 <CFastLED::clearData()+0x2a>
    82b6:	2d 85       	ldd	r18, Y+13	; 0x0d
    82b8:	3e 85       	ldd	r19, Y+14	; 0x0e
    82ba:	a9 01       	movw	r20, r18
    82bc:	44 0f       	add	r20, r20
    82be:	55 1f       	adc	r21, r21
    82c0:	42 0f       	add	r20, r18
    82c2:	53 1f       	adc	r21, r19
    82c4:	60 e0       	ldi	r22, 0x00	; 0
    82c6:	d0 d2       	rcall	.+1440   	; 0x8868 <memset8>
    82c8:	0c 80       	ldd	r0, Y+4	; 0x04
    82ca:	dd 81       	ldd	r29, Y+5	; 0x05
    82cc:	c0 2d       	mov	r28, r0
    82ce:	ed cf       	rjmp	.-38     	; 0x82aa <CFastLED::clearData()+0xc>
    82d0:	df 91       	pop	r29
    82d2:	cf 91       	pop	r28
    82d4:	08 95       	ret

000082d6 <CFastLED::countFPS(int)>:
    82d6:	cf 92       	push	r12
    82d8:	df 92       	push	r13
    82da:	ef 92       	push	r14
    82dc:	ff 92       	push	r15
    82de:	cf 93       	push	r28
    82e0:	df 93       	push	r29
    82e2:	ec 01       	movw	r28, r24
    82e4:	20 91 c2 10 	lds	r18, 0x10C2	; 0x8010c2 <CFastLED::countFPS(int)::br>
    82e8:	30 91 c3 10 	lds	r19, 0x10C3	; 0x8010c3 <CFastLED::countFPS(int)::br+0x1>
    82ec:	c9 01       	movw	r24, r18
    82ee:	01 96       	adiw	r24, 0x01	; 1
    82f0:	90 93 c3 10 	sts	0x10C3, r25	; 0x8010c3 <CFastLED::countFPS(int)::br+0x1>
    82f4:	80 93 c2 10 	sts	0x10C2, r24	; 0x8010c2 <CFastLED::countFPS(int)::br>
    82f8:	26 17       	cp	r18, r22
    82fa:	37 07       	cpc	r19, r23
    82fc:	0c f4       	brge	.+2      	; 0x8300 <CFastLED::countFPS(int)+0x2a>
    82fe:	3f c0       	rjmp	.+126    	; 0x837e <CFastLED::countFPS(int)+0xa8>
    8300:	0f b6       	in	r0, 0x3f	; 63
    8302:	f8 94       	cli
    8304:	20 91 dc 10 	lds	r18, 0x10DC	; 0x8010dc <timer0_millis_count>
    8308:	30 91 dd 10 	lds	r19, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    830c:	40 91 de 10 	lds	r20, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    8310:	50 91 df 10 	lds	r21, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    8314:	0f be       	out	0x3f, r0	; 63
    8316:	e8 ee       	ldi	r30, 0xE8	; 232
    8318:	f3 e0       	ldi	r31, 0x03	; 3
    831a:	8e 9f       	mul	r24, r30
    831c:	b0 01       	movw	r22, r0
    831e:	8f 9f       	mul	r24, r31
    8320:	70 0d       	add	r23, r0
    8322:	9e 9f       	mul	r25, r30
    8324:	70 0d       	add	r23, r0
    8326:	11 24       	eor	r1, r1
    8328:	07 2e       	mov	r0, r23
    832a:	00 0c       	add	r0, r0
    832c:	88 0b       	sbc	r24, r24
    832e:	99 0b       	sbc	r25, r25
    8330:	c0 90 be 10 	lds	r12, 0x10BE	; 0x8010be <CFastLED::countFPS(int)::lastframe>
    8334:	d0 90 bf 10 	lds	r13, 0x10BF	; 0x8010bf <CFastLED::countFPS(int)::lastframe+0x1>
    8338:	e0 90 c0 10 	lds	r14, 0x10C0	; 0x8010c0 <CFastLED::countFPS(int)::lastframe+0x2>
    833c:	f0 90 c1 10 	lds	r15, 0x10C1	; 0x8010c1 <CFastLED::countFPS(int)::lastframe+0x3>
    8340:	2c 19       	sub	r18, r12
    8342:	3d 09       	sbc	r19, r13
    8344:	4e 09       	sbc	r20, r14
    8346:	5f 09       	sbc	r21, r15
    8348:	0e 94 87 51 	call	0xa30e	; 0xa30e <__udivmodsi4>
    834c:	3a 83       	std	Y+2, r19	; 0x02
    834e:	29 83       	std	Y+1, r18	; 0x01
    8350:	10 92 c3 10 	sts	0x10C3, r1	; 0x8010c3 <CFastLED::countFPS(int)::br+0x1>
    8354:	10 92 c2 10 	sts	0x10C2, r1	; 0x8010c2 <CFastLED::countFPS(int)::br>
    8358:	0f b6       	in	r0, 0x3f	; 63
    835a:	f8 94       	cli
    835c:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    8360:	90 91 dd 10 	lds	r25, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    8364:	a0 91 de 10 	lds	r26, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    8368:	b0 91 df 10 	lds	r27, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    836c:	0f be       	out	0x3f, r0	; 63
    836e:	80 93 be 10 	sts	0x10BE, r24	; 0x8010be <CFastLED::countFPS(int)::lastframe>
    8372:	90 93 bf 10 	sts	0x10BF, r25	; 0x8010bf <CFastLED::countFPS(int)::lastframe+0x1>
    8376:	a0 93 c0 10 	sts	0x10C0, r26	; 0x8010c0 <CFastLED::countFPS(int)::lastframe+0x2>
    837a:	b0 93 c1 10 	sts	0x10C1, r27	; 0x8010c1 <CFastLED::countFPS(int)::lastframe+0x3>
    837e:	df 91       	pop	r29
    8380:	cf 91       	pop	r28
    8382:	ff 90       	pop	r15
    8384:	ef 90       	pop	r14
    8386:	df 90       	pop	r13
    8388:	cf 90       	pop	r12
    838a:	08 95       	ret

0000838c <CFastLED::show(unsigned char)>:
    838c:	8f 92       	push	r8
    838e:	9f 92       	push	r9
    8390:	af 92       	push	r10
    8392:	bf 92       	push	r11
    8394:	cf 92       	push	r12
    8396:	df 92       	push	r13
    8398:	ef 92       	push	r14
    839a:	ff 92       	push	r15
    839c:	0f 93       	push	r16
    839e:	1f 93       	push	r17
    83a0:	cf 93       	push	r28
    83a2:	df 93       	push	r29
    83a4:	00 d0       	rcall	.+0      	; 0x83a6 <CFastLED::show(unsigned char)+0x1a>
    83a6:	1f 92       	push	r1
    83a8:	cd b7       	in	r28, 0x3d	; 61
    83aa:	de b7       	in	r29, 0x3e	; 62
    83ac:	7c 01       	movw	r14, r24
    83ae:	d6 2e       	mov	r13, r22
    83b0:	d7 01       	movw	r26, r14
    83b2:	13 96       	adiw	r26, 0x03	; 3
    83b4:	0d 91       	ld	r16, X+
    83b6:	1d 91       	ld	r17, X+
    83b8:	2d 91       	ld	r18, X+
    83ba:	3c 91       	ld	r19, X
    83bc:	16 97       	sbiw	r26, 0x06	; 6
    83be:	01 15       	cp	r16, r1
    83c0:	11 05       	cpc	r17, r1
    83c2:	21 05       	cpc	r18, r1
    83c4:	31 05       	cpc	r19, r1
    83c6:	91 f0       	breq	.+36     	; 0x83ec <CFastLED::show(unsigned char)+0x60>
    83c8:	7d d6       	rcall	.+3322   	; 0x90c4 <_micros>
    83ca:	80 90 c4 10 	lds	r8, 0x10C4	; 0x8010c4 <lastshow>
    83ce:	90 90 c5 10 	lds	r9, 0x10C5	; 0x8010c5 <lastshow+0x1>
    83d2:	a0 90 c6 10 	lds	r10, 0x10C6	; 0x8010c6 <lastshow+0x2>
    83d6:	b0 90 c7 10 	lds	r11, 0x10C7	; 0x8010c7 <lastshow+0x3>
    83da:	68 19       	sub	r22, r8
    83dc:	79 09       	sbc	r23, r9
    83de:	8a 09       	sbc	r24, r10
    83e0:	9b 09       	sbc	r25, r11
    83e2:	60 17       	cp	r22, r16
    83e4:	71 07       	cpc	r23, r17
    83e6:	82 07       	cpc	r24, r18
    83e8:	93 07       	cpc	r25, r19
    83ea:	10 f3       	brcs	.-60     	; 0x83b0 <CFastLED::show(unsigned char)+0x24>
    83ec:	6b d6       	rcall	.+3286   	; 0x90c4 <_micros>
    83ee:	60 93 c4 10 	sts	0x10C4, r22	; 0x8010c4 <lastshow>
    83f2:	70 93 c5 10 	sts	0x10C5, r23	; 0x8010c5 <lastshow+0x1>
    83f6:	80 93 c6 10 	sts	0x10C6, r24	; 0x8010c6 <lastshow+0x2>
    83fa:	90 93 c7 10 	sts	0x10C7, r25	; 0x8010c7 <lastshow+0x3>
    83fe:	d7 01       	movw	r26, r14
    8400:	1b 96       	adiw	r26, 0x0b	; 11
    8402:	ed 91       	ld	r30, X+
    8404:	fc 91       	ld	r31, X
    8406:	1c 97       	sbiw	r26, 0x0c	; 12
    8408:	30 97       	sbiw	r30, 0x00	; 0
    840a:	49 f0       	breq	.+18     	; 0x841e <CFastLED::show(unsigned char)+0x92>
    840c:	17 96       	adiw	r26, 0x07	; 7
    840e:	4d 91       	ld	r20, X+
    8410:	5d 91       	ld	r21, X+
    8412:	6d 91       	ld	r22, X+
    8414:	7c 91       	ld	r23, X
    8416:	1a 97       	sbiw	r26, 0x0a	; 10
    8418:	8d 2d       	mov	r24, r13
    841a:	09 95       	icall
    841c:	d8 2e       	mov	r13, r24
    841e:	00 91 ca 10 	lds	r16, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    8422:	10 91 cb 10 	lds	r17, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    8426:	01 15       	cp	r16, r1
    8428:	11 05       	cpc	r17, r1
    842a:	61 f1       	breq	.+88     	; 0x8484 <CFastLED::show(unsigned char)+0xf8>
    842c:	f8 01       	movw	r30, r16
    842e:	c4 84       	ldd	r12, Z+12	; 0x0c
    8430:	d7 01       	movw	r26, r14
    8432:	11 96       	adiw	r26, 0x01	; 1
    8434:	8d 91       	ld	r24, X+
    8436:	9c 91       	ld	r25, X
    8438:	84 36       	cpi	r24, 0x64	; 100
    843a:	91 05       	cpc	r25, r1
    843c:	08 f4       	brcc	.+2      	; 0x8440 <CFastLED::show(unsigned char)+0xb4>
    843e:	14 86       	std	Z+12, r1	; 0x0c
    8440:	d8 01       	movw	r26, r16
    8442:	ed 91       	ld	r30, X+
    8444:	fc 91       	ld	r31, X
    8446:	a2 80       	ldd	r10, Z+2	; 0x02
    8448:	b3 80       	ldd	r11, Z+3	; 0x03
    844a:	98 01       	movw	r18, r16
    844c:	27 5f       	subi	r18, 0xF7	; 247
    844e:	3f 4f       	sbci	r19, 0xFF	; 255
    8450:	a8 01       	movw	r20, r16
    8452:	4a 5f       	subi	r20, 0xFA	; 250
    8454:	5f 4f       	sbci	r21, 0xFF	; 255
    8456:	6d 2d       	mov	r22, r13
    8458:	ce 01       	movw	r24, r28
    845a:	01 96       	adiw	r24, 0x01	; 1
    845c:	b7 de       	rcall	.-658    	; 0x81cc <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    845e:	f8 01       	movw	r30, r16
    8460:	45 85       	ldd	r20, Z+13	; 0x0d
    8462:	56 85       	ldd	r21, Z+14	; 0x0e
    8464:	62 81       	ldd	r22, Z+2	; 0x02
    8466:	73 81       	ldd	r23, Z+3	; 0x03
    8468:	9e 01       	movw	r18, r28
    846a:	2f 5f       	subi	r18, 0xFF	; 255
    846c:	3f 4f       	sbci	r19, 0xFF	; 255
    846e:	c8 01       	movw	r24, r16
    8470:	f5 01       	movw	r30, r10
    8472:	09 95       	icall
    8474:	d8 01       	movw	r26, r16
    8476:	1c 96       	adiw	r26, 0x0c	; 12
    8478:	cc 92       	st	X, r12
    847a:	1c 97       	sbiw	r26, 0x0c	; 12
    847c:	14 96       	adiw	r26, 0x04	; 4
    847e:	0d 91       	ld	r16, X+
    8480:	1c 91       	ld	r17, X
    8482:	d1 cf       	rjmp	.-94     	; 0x8426 <CFastLED::show(unsigned char)+0x9a>
    8484:	69 e1       	ldi	r22, 0x19	; 25
    8486:	70 e0       	ldi	r23, 0x00	; 0
    8488:	c7 01       	movw	r24, r14
    848a:	25 df       	rcall	.-438    	; 0x82d6 <CFastLED::countFPS(int)>
    848c:	0f 90       	pop	r0
    848e:	0f 90       	pop	r0
    8490:	0f 90       	pop	r0
    8492:	df 91       	pop	r29
    8494:	cf 91       	pop	r28
    8496:	1f 91       	pop	r17
    8498:	0f 91       	pop	r16
    849a:	ff 90       	pop	r15
    849c:	ef 90       	pop	r14
    849e:	df 90       	pop	r13
    84a0:	cf 90       	pop	r12
    84a2:	bf 90       	pop	r11
    84a4:	af 90       	pop	r10
    84a6:	9f 90       	pop	r9
    84a8:	8f 90       	pop	r8
    84aa:	08 95       	ret

000084ac <CFastLED::showColor(CRGB const&, unsigned char)>:
    84ac:	4f 92       	push	r4
    84ae:	5f 92       	push	r5
    84b0:	6f 92       	push	r6
    84b2:	7f 92       	push	r7
    84b4:	8f 92       	push	r8
    84b6:	9f 92       	push	r9
    84b8:	af 92       	push	r10
    84ba:	bf 92       	push	r11
    84bc:	cf 92       	push	r12
    84be:	df 92       	push	r13
    84c0:	ef 92       	push	r14
    84c2:	ff 92       	push	r15
    84c4:	0f 93       	push	r16
    84c6:	1f 93       	push	r17
    84c8:	cf 93       	push	r28
    84ca:	df 93       	push	r29
    84cc:	00 d0       	rcall	.+0      	; 0x84ce <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    84ce:	1f 92       	push	r1
    84d0:	cd b7       	in	r28, 0x3d	; 61
    84d2:	de b7       	in	r29, 0x3e	; 62
    84d4:	7c 01       	movw	r14, r24
    84d6:	5b 01       	movw	r10, r22
    84d8:	d4 2e       	mov	r13, r20
    84da:	d7 01       	movw	r26, r14
    84dc:	13 96       	adiw	r26, 0x03	; 3
    84de:	0d 91       	ld	r16, X+
    84e0:	1d 91       	ld	r17, X+
    84e2:	2d 91       	ld	r18, X+
    84e4:	3c 91       	ld	r19, X
    84e6:	16 97       	sbiw	r26, 0x06	; 6
    84e8:	01 15       	cp	r16, r1
    84ea:	11 05       	cpc	r17, r1
    84ec:	21 05       	cpc	r18, r1
    84ee:	31 05       	cpc	r19, r1
    84f0:	91 f0       	breq	.+36     	; 0x8516 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    84f2:	e8 d5       	rcall	.+3024   	; 0x90c4 <_micros>
    84f4:	40 90 c4 10 	lds	r4, 0x10C4	; 0x8010c4 <lastshow>
    84f8:	50 90 c5 10 	lds	r5, 0x10C5	; 0x8010c5 <lastshow+0x1>
    84fc:	60 90 c6 10 	lds	r6, 0x10C6	; 0x8010c6 <lastshow+0x2>
    8500:	70 90 c7 10 	lds	r7, 0x10C7	; 0x8010c7 <lastshow+0x3>
    8504:	64 19       	sub	r22, r4
    8506:	75 09       	sbc	r23, r5
    8508:	86 09       	sbc	r24, r6
    850a:	97 09       	sbc	r25, r7
    850c:	60 17       	cp	r22, r16
    850e:	71 07       	cpc	r23, r17
    8510:	82 07       	cpc	r24, r18
    8512:	93 07       	cpc	r25, r19
    8514:	10 f3       	brcs	.-60     	; 0x84da <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    8516:	d6 d5       	rcall	.+2988   	; 0x90c4 <_micros>
    8518:	60 93 c4 10 	sts	0x10C4, r22	; 0x8010c4 <lastshow>
    851c:	70 93 c5 10 	sts	0x10C5, r23	; 0x8010c5 <lastshow+0x1>
    8520:	80 93 c6 10 	sts	0x10C6, r24	; 0x8010c6 <lastshow+0x2>
    8524:	90 93 c7 10 	sts	0x10C7, r25	; 0x8010c7 <lastshow+0x3>
    8528:	d7 01       	movw	r26, r14
    852a:	1b 96       	adiw	r26, 0x0b	; 11
    852c:	ed 91       	ld	r30, X+
    852e:	fc 91       	ld	r31, X
    8530:	1c 97       	sbiw	r26, 0x0c	; 12
    8532:	30 97       	sbiw	r30, 0x00	; 0
    8534:	49 f0       	breq	.+18     	; 0x8548 <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    8536:	17 96       	adiw	r26, 0x07	; 7
    8538:	4d 91       	ld	r20, X+
    853a:	5d 91       	ld	r21, X+
    853c:	6d 91       	ld	r22, X+
    853e:	7c 91       	ld	r23, X
    8540:	1a 97       	sbiw	r26, 0x0a	; 10
    8542:	8d 2d       	mov	r24, r13
    8544:	09 95       	icall
    8546:	d8 2e       	mov	r13, r24
    8548:	00 91 ca 10 	lds	r16, 0x10CA	; 0x8010ca <CLEDController::m_pHead>
    854c:	10 91 cb 10 	lds	r17, 0x10CB	; 0x8010cb <CLEDController::m_pHead+0x1>
    8550:	01 15       	cp	r16, r1
    8552:	11 05       	cpc	r17, r1
    8554:	59 f1       	breq	.+86     	; 0x85ac <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    8556:	f8 01       	movw	r30, r16
    8558:	c4 84       	ldd	r12, Z+12	; 0x0c
    855a:	d7 01       	movw	r26, r14
    855c:	11 96       	adiw	r26, 0x01	; 1
    855e:	8d 91       	ld	r24, X+
    8560:	9c 91       	ld	r25, X
    8562:	84 36       	cpi	r24, 0x64	; 100
    8564:	91 05       	cpc	r25, r1
    8566:	08 f4       	brcc	.+2      	; 0x856a <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    8568:	14 86       	std	Z+12, r1	; 0x0c
    856a:	d8 01       	movw	r26, r16
    856c:	ed 91       	ld	r30, X+
    856e:	fc 91       	ld	r31, X
    8570:	80 80       	ld	r8, Z
    8572:	91 80       	ldd	r9, Z+1	; 0x01
    8574:	98 01       	movw	r18, r16
    8576:	27 5f       	subi	r18, 0xF7	; 247
    8578:	3f 4f       	sbci	r19, 0xFF	; 255
    857a:	a8 01       	movw	r20, r16
    857c:	4a 5f       	subi	r20, 0xFA	; 250
    857e:	5f 4f       	sbci	r21, 0xFF	; 255
    8580:	6d 2d       	mov	r22, r13
    8582:	ce 01       	movw	r24, r28
    8584:	01 96       	adiw	r24, 0x01	; 1
    8586:	22 de       	rcall	.-956    	; 0x81cc <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    8588:	f8 01       	movw	r30, r16
    858a:	45 85       	ldd	r20, Z+13	; 0x0d
    858c:	56 85       	ldd	r21, Z+14	; 0x0e
    858e:	9e 01       	movw	r18, r28
    8590:	2f 5f       	subi	r18, 0xFF	; 255
    8592:	3f 4f       	sbci	r19, 0xFF	; 255
    8594:	b5 01       	movw	r22, r10
    8596:	c8 01       	movw	r24, r16
    8598:	f4 01       	movw	r30, r8
    859a:	09 95       	icall
    859c:	d8 01       	movw	r26, r16
    859e:	1c 96       	adiw	r26, 0x0c	; 12
    85a0:	cc 92       	st	X, r12
    85a2:	1c 97       	sbiw	r26, 0x0c	; 12
    85a4:	14 96       	adiw	r26, 0x04	; 4
    85a6:	0d 91       	ld	r16, X+
    85a8:	1c 91       	ld	r17, X
    85aa:	d2 cf       	rjmp	.-92     	; 0x8550 <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    85ac:	69 e1       	ldi	r22, 0x19	; 25
    85ae:	70 e0       	ldi	r23, 0x00	; 0
    85b0:	c7 01       	movw	r24, r14
    85b2:	91 de       	rcall	.-734    	; 0x82d6 <CFastLED::countFPS(int)>
    85b4:	0f 90       	pop	r0
    85b6:	0f 90       	pop	r0
    85b8:	0f 90       	pop	r0
    85ba:	df 91       	pop	r29
    85bc:	cf 91       	pop	r28
    85be:	1f 91       	pop	r17
    85c0:	0f 91       	pop	r16
    85c2:	ff 90       	pop	r15
    85c4:	ef 90       	pop	r14
    85c6:	df 90       	pop	r13
    85c8:	cf 90       	pop	r12
    85ca:	bf 90       	pop	r11
    85cc:	af 90       	pop	r10
    85ce:	9f 90       	pop	r9
    85d0:	8f 90       	pop	r8
    85d2:	7f 90       	pop	r7
    85d4:	6f 90       	pop	r6
    85d6:	5f 90       	pop	r5
    85d8:	4f 90       	pop	r4
    85da:	08 95       	ret

000085dc <CFastLED::clear(bool)>:
    85dc:	0f 93       	push	r16
    85de:	1f 93       	push	r17
    85e0:	cf 93       	push	r28
    85e2:	df 93       	push	r29
    85e4:	00 d0       	rcall	.+0      	; 0x85e6 <CFastLED::clear(bool)+0xa>
    85e6:	1f 92       	push	r1
    85e8:	cd b7       	in	r28, 0x3d	; 61
    85ea:	de b7       	in	r29, 0x3e	; 62
    85ec:	8c 01       	movw	r16, r24
    85ee:	66 23       	and	r22, r22
    85f0:	41 f0       	breq	.+16     	; 0x8602 <CFastLED::clear(bool)+0x26>
    85f2:	19 82       	std	Y+1, r1	; 0x01
    85f4:	1a 82       	std	Y+2, r1	; 0x02
    85f6:	1b 82       	std	Y+3, r1	; 0x03
    85f8:	40 e0       	ldi	r20, 0x00	; 0
    85fa:	be 01       	movw	r22, r28
    85fc:	6f 5f       	subi	r22, 0xFF	; 255
    85fe:	7f 4f       	sbci	r23, 0xFF	; 255
    8600:	55 df       	rcall	.-342    	; 0x84ac <CFastLED::showColor(CRGB const&, unsigned char)>
    8602:	c8 01       	movw	r24, r16
    8604:	4c de       	rcall	.-872    	; 0x829e <CFastLED::clearData()>
    8606:	0f 90       	pop	r0
    8608:	0f 90       	pop	r0
    860a:	0f 90       	pop	r0
    860c:	df 91       	pop	r29
    860e:	cf 91       	pop	r28
    8610:	1f 91       	pop	r17
    8612:	0f 91       	pop	r16
    8614:	08 95       	ret

00008616 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    8616:	cf 93       	push	r28
    8618:	df 93       	push	r29
    861a:	ec 01       	movw	r28, r24
    861c:	44 23       	and	r20, r20
    861e:	f1 f0       	breq	.+60     	; 0x865c <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    8620:	61 15       	cp	r22, r1
    8622:	71 05       	cpc	r23, r1
    8624:	c1 f0       	breq	.+48     	; 0x8656 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    8626:	9b 01       	movw	r18, r22
    8628:	50 e0       	ldi	r21, 0x00	; 0
    862a:	40 e0       	ldi	r20, 0x00	; 0
    862c:	60 e4       	ldi	r22, 0x40	; 64
    862e:	72 e4       	ldi	r23, 0x42	; 66
    8630:	8f e0       	ldi	r24, 0x0F	; 15
    8632:	90 e0       	ldi	r25, 0x00	; 0
    8634:	0e 94 a9 51 	call	0xa352	; 0xa352 <__divmodsi4>
    8638:	8b 81       	ldd	r24, Y+3	; 0x03
    863a:	9c 81       	ldd	r25, Y+4	; 0x04
    863c:	ad 81       	ldd	r26, Y+5	; 0x05
    863e:	be 81       	ldd	r27, Y+6	; 0x06
    8640:	82 17       	cp	r24, r18
    8642:	93 07       	cpc	r25, r19
    8644:	a4 07       	cpc	r26, r20
    8646:	b5 07       	cpc	r27, r21
    8648:	10 f4       	brcc	.+4      	; 0x864e <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    864a:	da 01       	movw	r26, r20
    864c:	c9 01       	movw	r24, r18
    864e:	8b 83       	std	Y+3, r24	; 0x03
    8650:	9c 83       	std	Y+4, r25	; 0x04
    8652:	ad 83       	std	Y+5, r26	; 0x05
    8654:	be 83       	std	Y+6, r27	; 0x06
    8656:	df 91       	pop	r29
    8658:	cf 91       	pop	r28
    865a:	08 95       	ret
    865c:	61 15       	cp	r22, r1
    865e:	71 05       	cpc	r23, r1
    8660:	71 f0       	breq	.+28     	; 0x867e <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    8662:	9b 01       	movw	r18, r22
    8664:	50 e0       	ldi	r21, 0x00	; 0
    8666:	40 e0       	ldi	r20, 0x00	; 0
    8668:	60 e4       	ldi	r22, 0x40	; 64
    866a:	72 e4       	ldi	r23, 0x42	; 66
    866c:	8f e0       	ldi	r24, 0x0F	; 15
    866e:	90 e0       	ldi	r25, 0x00	; 0
    8670:	0e 94 a9 51 	call	0xa352	; 0xa352 <__divmodsi4>
    8674:	2b 83       	std	Y+3, r18	; 0x03
    8676:	3c 83       	std	Y+4, r19	; 0x04
    8678:	4d 83       	std	Y+5, r20	; 0x05
    867a:	5e 83       	std	Y+6, r21	; 0x06
    867c:	ec cf       	rjmp	.-40     	; 0x8656 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    867e:	1b 82       	std	Y+3, r1	; 0x03
    8680:	1c 82       	std	Y+4, r1	; 0x04
    8682:	1d 82       	std	Y+5, r1	; 0x05
    8684:	1e 82       	std	Y+6, r1	; 0x06
    8686:	e7 cf       	rjmp	.-50     	; 0x8656 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

00008688 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    8688:	cf 92       	push	r12
    868a:	df 92       	push	r13
    868c:	ef 92       	push	r14
    868e:	ff 92       	push	r15
    8690:	0f 93       	push	r16
    8692:	1f 93       	push	r17
    8694:	cf 93       	push	r28
    8696:	df 93       	push	r29
    8698:	ec 01       	movw	r28, r24
    869a:	6b 01       	movw	r12, r22
    869c:	7a 01       	movw	r14, r20
    869e:	10 e0       	ldi	r17, 0x00	; 0
    86a0:	00 e0       	ldi	r16, 0x00	; 0
    86a2:	12 16       	cp	r1, r18
    86a4:	13 06       	cpc	r1, r19
    86a6:	14 f4       	brge	.+4      	; 0x86ac <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    86a8:	8a 01       	movw	r16, r20
    86aa:	79 01       	movw	r14, r18
    86ac:	e8 81       	ld	r30, Y
    86ae:	f9 81       	ldd	r31, Y+1	; 0x01
    86b0:	04 80       	ldd	r0, Z+4	; 0x04
    86b2:	f5 81       	ldd	r31, Z+5	; 0x05
    86b4:	e0 2d       	mov	r30, r0
    86b6:	ce 01       	movw	r24, r28
    86b8:	09 95       	icall
    86ba:	c8 01       	movw	r24, r16
    86bc:	88 0f       	add	r24, r24
    86be:	99 1f       	adc	r25, r25
    86c0:	08 0f       	add	r16, r24
    86c2:	19 1f       	adc	r17, r25
    86c4:	c0 0e       	add	r12, r16
    86c6:	d1 1e       	adc	r13, r17
    86c8:	db 82       	std	Y+3, r13	; 0x03
    86ca:	ca 82       	std	Y+2, r12	; 0x02
    86cc:	ed 86       	std	Y+13, r14	; 0x0d
    86ce:	fe 86       	std	Y+14, r15	; 0x0e
    86d0:	e8 81       	ld	r30, Y
    86d2:	f9 81       	ldd	r31, Y+1	; 0x01
    86d4:	02 84       	ldd	r0, Z+10	; 0x0a
    86d6:	f3 85       	ldd	r31, Z+11	; 0x0b
    86d8:	e0 2d       	mov	r30, r0
    86da:	ce 01       	movw	r24, r28
    86dc:	09 95       	icall
    86de:	41 e0       	ldi	r20, 0x01	; 1
    86e0:	bc 01       	movw	r22, r24
    86e2:	8c ec       	ldi	r24, 0xCC	; 204
    86e4:	90 e1       	ldi	r25, 0x10	; 16
    86e6:	97 df       	rcall	.-210    	; 0x8616 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    86e8:	ce 01       	movw	r24, r28
    86ea:	df 91       	pop	r29
    86ec:	cf 91       	pop	r28
    86ee:	1f 91       	pop	r17
    86f0:	0f 91       	pop	r16
    86f2:	ff 90       	pop	r15
    86f4:	ef 90       	pop	r14
    86f6:	df 90       	pop	r13
    86f8:	cf 90       	pop	r12
    86fa:	08 95       	ret

000086fc <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    86fc:	8c ec       	ldi	r24, 0xCC	; 204
    86fe:	90 e1       	ldi	r25, 0x10	; 16
    8700:	bf cd       	rjmp	.-1154   	; 0x8280 <CFastLED::CFastLED()>

00008702 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    8702:	1f 93       	push	r17
    8704:	dc 01       	movw	r26, r24
    8706:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    8708:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    870a:	11 96       	adiw	r26, 0x01	; 1
    870c:	4c 91       	ld	r20, X
    870e:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    8710:	12 96       	adiw	r26, 0x02	; 2
    8712:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    8714:	97 2f       	mov	r25, r23
    8716:	99 0f       	add	r25, r25
    8718:	99 0f       	add	r25, r25
    871a:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    871c:	35 e5       	ldi	r19, 0x55	; 85
    871e:	29 2f       	mov	r18, r25
    8720:	23 9f       	mul	r18, r19
    8722:	02 0e       	add	r0, r18
    8724:	20 e0       	ldi	r18, 0x00	; 0
    8726:	21 1d       	adc	r18, r1
    8728:	11 24       	eor	r1, r1
    872a:	82 2f       	mov	r24, r18
    872c:	67 2f       	mov	r22, r23
    872e:	60 74       	andi	r22, 0x40	; 64
    8730:	57 2f       	mov	r21, r23
    8732:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    8734:	77 fd       	sbrc	r23, 7
    8736:	6f c0       	rjmp	.+222    	; 0x8816 <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    8738:	61 11       	cpse	r22, r1
    873a:	5b c0       	rjmp	.+182    	; 0x87f2 <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    873c:	51 11       	cpse	r21, r1
    873e:	05 c0       	rjmp	.+10     	; 0x874a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    8740:	92 2f       	mov	r25, r18
    8742:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    8744:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    8746:	90 e0       	ldi	r25, 0x00	; 0
    8748:	04 c0       	rjmp	.+8      	; 0x8752 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    874a:	25 e5       	ldi	r18, 0x55	; 85
    874c:	28 0f       	add	r18, r24
                    b = 0;
    874e:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    8750:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    8752:	4f 3f       	cpi	r20, 0xFF	; 255
    8754:	09 f4       	brne	.+2      	; 0x8758 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    8756:	24 c0       	rjmp	.+72     	; 0x87a0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    8758:	44 23       	and	r20, r20
    875a:	09 f4       	brne	.+2      	; 0x875e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    875c:	7d c0       	rjmp	.+250    	; 0x8858 <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    875e:	88 23       	and	r24, r24
    8760:	31 f0       	breq	.+12     	; 0x876e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    8762:	38 2f       	mov	r19, r24
    8764:	34 9f       	mul	r19, r20
    8766:	03 0e       	add	r0, r19
    8768:	30 e0       	ldi	r19, 0x00	; 0
    876a:	31 1d       	adc	r19, r1
    876c:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    876e:	22 23       	and	r18, r18
    8770:	21 f0       	breq	.+8      	; 0x877a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    8772:	24 9f       	mul	r18, r20
    8774:	02 0e       	add	r0, r18
    8776:	20 e0       	ldi	r18, 0x00	; 0
    8778:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    877a:	99 23       	and	r25, r25
    877c:	31 f0       	breq	.+12     	; 0x878a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    877e:	39 2f       	mov	r19, r25
    8780:	34 9f       	mul	r19, r20
    8782:	03 0e       	add	r0, r19
    8784:	30 e0       	ldi	r19, 0x00	; 0
    8786:	31 1d       	adc	r19, r1
    8788:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    878a:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    878c:	34 2f       	mov	r19, r20
    878e:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    8790:	33 9f       	mul	r19, r19
    8792:	03 0e       	add	r0, r19
    8794:	30 e0       	ldi	r19, 0x00	; 0
    8796:	31 1d       	adc	r19, r1
    8798:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    879a:	83 0f       	add	r24, r19
            g += brightness_floor;
    879c:	23 0f       	add	r18, r19
            b += brightness_floor;
    879e:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    87a0:	1f 3f       	cpi	r17, 0xFF	; 255
    87a2:	09 f4       	brne	.+2      	; 0x87a6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    87a4:	21 c0       	rjmp	.+66     	; 0x87e8 <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    87a6:	30 e0       	ldi	r19, 0x00	; 0
    87a8:	11 23       	and	r17, r17
    87aa:	21 f0       	breq	.+8      	; 0x87b4 <L_630>
    87ac:	11 9f       	mul	r17, r17
    87ae:	31 2d       	mov	r19, r1
    87b0:	09 f0       	breq	.+2      	; 0x87b4 <L_630>
    87b2:	3f 5f       	subi	r19, 0xFF	; 255

000087b4 <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    87b4:	33 23       	and	r19, r19
    87b6:	09 f4       	brne	.+2      	; 0x87ba <L_630+0x6>
    87b8:	53 c0       	rjmp	.+166    	; 0x8860 <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    87ba:	88 23       	and	r24, r24
    87bc:	31 f0       	breq	.+12     	; 0x87ca <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    87be:	48 2f       	mov	r20, r24
    87c0:	43 9f       	mul	r20, r19
    87c2:	04 0e       	add	r0, r20
    87c4:	40 e0       	ldi	r20, 0x00	; 0
    87c6:	41 1d       	adc	r20, r1
    87c8:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    87ca:	22 23       	and	r18, r18
    87cc:	21 f0       	breq	.+8      	; 0x87d6 <L_630+0x22>
    87ce:	23 9f       	mul	r18, r19
    87d0:	02 0e       	add	r0, r18
    87d2:	20 e0       	ldi	r18, 0x00	; 0
    87d4:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    87d6:	99 23       	and	r25, r25
    87d8:	31 f0       	breq	.+12     	; 0x87e6 <L_630+0x32>
    87da:	49 2f       	mov	r20, r25
    87dc:	43 9f       	mul	r20, r19
    87de:	04 0e       	add	r0, r20
    87e0:	40 e0       	ldi	r20, 0x00	; 0
    87e2:	41 1d       	adc	r20, r1
    87e4:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    87e6:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    87e8:	80 83       	st	Z, r24
    rgb.g = g;
    87ea:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    87ec:	92 83       	std	Z+2, r25	; 0x02
}
    87ee:	1f 91       	pop	r17
    87f0:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    87f2:	51 11       	cpse	r21, r1
    87f4:	0b c0       	rjmp	.+22     	; 0x880c <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    87f6:	39 2f       	mov	r19, r25
    87f8:	2a ea       	ldi	r18, 0xAA	; 170
    87fa:	32 9f       	mul	r19, r18
    87fc:	03 0e       	add	r0, r19
    87fe:	30 e0       	ldi	r19, 0x00	; 0
    8800:	31 1d       	adc	r19, r1
    8802:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    8804:	9b ea       	ldi	r25, 0xAB	; 171
    8806:	93 1b       	sub	r25, r19
                    g = K170 + third;
    8808:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    880a:	9c cf       	rjmp	.-200    	; 0x8744 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    880c:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    880e:	20 95       	com	r18
                b = third;
    8810:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    8812:	80 e0       	ldi	r24, 0x00	; 0
    8814:	9e cf       	rjmp	.-196    	; 0x8752 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    8816:	61 11       	cpse	r22, r1
    8818:	12 c0       	rjmp	.+36     	; 0x883e <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    881a:	51 11       	cpse	r21, r1
    881c:	0c c0       	rjmp	.+24     	; 0x8836 <L_630+0x82>
    881e:	39 2f       	mov	r19, r25
    8820:	2a ea       	ldi	r18, 0xAA	; 170
    8822:	32 9f       	mul	r19, r18
    8824:	03 0e       	add	r0, r19
    8826:	30 e0       	ldi	r19, 0x00	; 0
    8828:	31 1d       	adc	r19, r1
    882a:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    882c:	2b ea       	ldi	r18, 0xAB	; 171
    882e:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    8830:	95 e5       	ldi	r25, 0x55	; 85
    8832:	93 0f       	add	r25, r19
    8834:	ee cf       	rjmp	.-36     	; 0x8812 <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    8836:	92 2f       	mov	r25, r18
    8838:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    883a:	20 e0       	ldi	r18, 0x00	; 0
    883c:	8a cf       	rjmp	.-236    	; 0x8752 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    883e:	51 11       	cpse	r21, r1
    8840:	06 c0       	rjmp	.+12     	; 0x884e <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    8842:	25 e5       	ldi	r18, 0x55	; 85
    8844:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    8846:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    8848:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    884a:	82 2f       	mov	r24, r18
    884c:	f6 cf       	rjmp	.-20     	; 0x883a <L_630+0x86>
    884e:	2a ea       	ldi	r18, 0xAA	; 170
    8850:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    8852:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    8854:	93 2f       	mov	r25, r19
    8856:	f8 cf       	rjmp	.-16     	; 0x8848 <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    8858:	9f ef       	ldi	r25, 0xFF	; 255
    885a:	2f ef       	ldi	r18, 0xFF	; 255
    885c:	8f ef       	ldi	r24, 0xFF	; 255
    885e:	a0 cf       	rjmp	.-192    	; 0x87a0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    8860:	90 e0       	ldi	r25, 0x00	; 0
    8862:	20 e0       	ldi	r18, 0x00	; 0
    8864:	80 e0       	ldi	r24, 0x00	; 0
    8866:	c0 cf       	rjmp	.-128    	; 0x87e8 <L_630+0x34>

00008868 <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    8868:	dc 01       	movw	r26, r24
    886a:	40 ff       	sbrs	r20, 0
    886c:	03 c0       	rjmp	.+6      	; 0x8874 <Lseteven_8>
    886e:	01 c0       	rjmp	.+2      	; 0x8872 <Lsetodd_8>

00008870 <Lsetloop_8>:
    8870:	6d 93       	st	X+, r22

00008872 <Lsetodd_8>:
    8872:	6d 93       	st	X+, r22

00008874 <Lseteven_8>:
    8874:	42 50       	subi	r20, 0x02	; 2
    8876:	e0 f7       	brcc	.-8      	; 0x8870 <Lsetloop_8>
    8878:	50 40       	sbci	r21, 0x00	; 0
    887a:	d0 f7       	brcc	.-12     	; 0x8870 <Lsetloop_8>
    return ptr;
}
    887c:	08 95       	ret

0000887e <memcpy8>:
         "  brcc Lcpyloop_%=        \n\t"
         : [num] "+r" (num)
         : [src] "r" (src),
           [dst] "r" (dst)
         : "memory"
         );
    887e:	fb 01       	movw	r30, r22
    8880:	dc 01       	movw	r26, r24
    8882:	40 ff       	sbrs	r20, 0
    8884:	05 c0       	rjmp	.+10     	; 0x8890 <Lcpyeven_23>
    8886:	02 c0       	rjmp	.+4      	; 0x888c <Lcpyodd_23>

00008888 <Lcpyloop_23>:
    8888:	01 90       	ld	r0, Z+
    888a:	0d 92       	st	X+, r0

0000888c <Lcpyodd_23>:
    888c:	01 90       	ld	r0, Z+
    888e:	0d 92       	st	X+, r0

00008890 <Lcpyeven_23>:
    8890:	42 50       	subi	r20, 0x02	; 2
    8892:	d0 f7       	brcc	.-12     	; 0x8888 <Lcpyloop_23>
    8894:	50 40       	sbci	r21, 0x00	; 0
    8896:	c0 f7       	brcc	.-16     	; 0x8888 <Lcpyloop_23>
    return dst;
}
    8898:	08 95       	ret

0000889a <memmove8>:

//__attribute__ ((noinline))
void * memmove8 ( void * dst, const void* src, uint16_t num )
{
    if( src > dst) {
    889a:	86 17       	cp	r24, r22
    889c:	97 07       	cpc	r25, r23
    889e:	08 f4       	brcc	.+2      	; 0x88a2 <memmove8+0x8>
        // if src > dst then we can use the forward-stepping memcpy8
        return memcpy8( dst, src, num);
    88a0:	ee cf       	rjmp	.-36     	; 0x887e <memcpy8>
    } else {
        // if src < dst then we have to step backward:
        dst = (char*)dst + num;
    88a2:	84 0f       	add	r24, r20
    88a4:	95 1f       	adc	r25, r21
        src = (char*)src + num;
    88a6:	64 0f       	add	r22, r20
    88a8:	75 1f       	adc	r23, r21
             "  brcc Lmovloop_%=        \n\t"
             : [num] "+r" (num)
             : [src] "r" (src),
               [dst] "r" (dst)
             : "memory"
             );
    88aa:	fb 01       	movw	r30, r22
    88ac:	dc 01       	movw	r26, r24
    88ae:	40 ff       	sbrs	r20, 0
    88b0:	05 c0       	rjmp	.+10     	; 0x88bc <Lmoveven_58>
    88b2:	02 c0       	rjmp	.+4      	; 0x88b8 <Lmovodd_58>

000088b4 <Lmovloop_58>:
    88b4:	02 90       	ld	r0, -Z
    88b6:	0e 92       	st	-X, r0

000088b8 <Lmovodd_58>:
    88b8:	02 90       	ld	r0, -Z
    88ba:	0e 92       	st	-X, r0

000088bc <Lmoveven_58>:
    88bc:	42 50       	subi	r20, 0x02	; 2
    88be:	d0 f7       	brcc	.-12     	; 0x88b4 <Lmovloop_58>
    88c0:	50 40       	sbci	r21, 0x00	; 0
    88c2:	c0 f7       	brcc	.-16     	; 0x88b4 <Lmovloop_58>
        return dst;
    }
}
    88c4:	08 95       	ret

000088c6 <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    88c6:	0f 93       	push	r16
    88c8:	1f 93       	push	r17
    88ca:	cf 93       	push	r28
    88cc:	df 93       	push	r29
    88ce:	82 30       	cpi	r24, 0x02	; 2
    88d0:	91 05       	cpc	r25, r1
    88d2:	10 f4       	brcc	.+4      	; 0x88d8 <malloc+0x12>
    88d4:	82 e0       	ldi	r24, 0x02	; 2
    88d6:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    88d8:	e0 91 66 11 	lds	r30, 0x1166	; 0x801166 <__flp>
    88dc:	f0 91 67 11 	lds	r31, 0x1167	; 0x801167 <__flp+0x1>
    88e0:	30 e0       	ldi	r19, 0x00	; 0
    88e2:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    88e4:	70 e0       	ldi	r23, 0x00	; 0
    88e6:	60 e0       	ldi	r22, 0x00	; 0
    88e8:	d0 e0       	ldi	r29, 0x00	; 0
    88ea:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    88ec:	b0 e0       	ldi	r27, 0x00	; 0
    88ee:	a0 e0       	ldi	r26, 0x00	; 0
    88f0:	30 97       	sbiw	r30, 0x00	; 0
    88f2:	99 f4       	brne	.+38     	; 0x891a <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    88f4:	21 15       	cp	r18, r1
    88f6:	31 05       	cpc	r19, r1
    88f8:	09 f4       	brne	.+2      	; 0x88fc <malloc+0x36>
    88fa:	4a c0       	rjmp	.+148    	; 0x8990 <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    88fc:	28 1b       	sub	r18, r24
    88fe:	39 0b       	sbc	r19, r25
    8900:	24 30       	cpi	r18, 0x04	; 4
    8902:	31 05       	cpc	r19, r1
    8904:	d8 f5       	brcc	.+118    	; 0x897c <malloc+0xb6>
    8906:	8a 81       	ldd	r24, Y+2	; 0x02
    8908:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    890a:	61 15       	cp	r22, r1
    890c:	71 05       	cpc	r23, r1
    890e:	89 f1       	breq	.+98     	; 0x8972 <malloc+0xac>
				sfp2->nx = sfp1->nx;
    8910:	fb 01       	movw	r30, r22
    8912:	93 83       	std	Z+3, r25	; 0x03
    8914:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    8916:	fe 01       	movw	r30, r28
    8918:	11 c0       	rjmp	.+34     	; 0x893c <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    891a:	40 81       	ld	r20, Z
    891c:	51 81       	ldd	r21, Z+1	; 0x01
    891e:	02 81       	ldd	r16, Z+2	; 0x02
    8920:	13 81       	ldd	r17, Z+3	; 0x03
    8922:	48 17       	cp	r20, r24
    8924:	59 07       	cpc	r21, r25
    8926:	e0 f0       	brcs	.+56     	; 0x8960 <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    8928:	48 17       	cp	r20, r24
    892a:	59 07       	cpc	r21, r25
    892c:	99 f4       	brne	.+38     	; 0x8954 <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    892e:	10 97       	sbiw	r26, 0x00	; 0
    8930:	61 f0       	breq	.+24     	; 0x894a <malloc+0x84>
				fp2->nx = fp1->nx;
    8932:	12 96       	adiw	r26, 0x02	; 2
    8934:	0c 93       	st	X, r16
    8936:	12 97       	sbiw	r26, 0x02	; 2
    8938:	13 96       	adiw	r26, 0x03	; 3
    893a:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    893c:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    893e:	cf 01       	movw	r24, r30
    8940:	df 91       	pop	r29
    8942:	cf 91       	pop	r28
    8944:	1f 91       	pop	r17
    8946:	0f 91       	pop	r16
    8948:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    894a:	00 93 66 11 	sts	0x1166, r16	; 0x801166 <__flp>
    894e:	10 93 67 11 	sts	0x1167, r17	; 0x801167 <__flp+0x1>
    8952:	f4 cf       	rjmp	.-24     	; 0x893c <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    8954:	21 15       	cp	r18, r1
    8956:	31 05       	cpc	r19, r1
    8958:	51 f0       	breq	.+20     	; 0x896e <malloc+0xa8>
    895a:	42 17       	cp	r20, r18
    895c:	53 07       	cpc	r21, r19
    895e:	38 f0       	brcs	.+14     	; 0x896e <malloc+0xa8>
    8960:	a9 01       	movw	r20, r18
    8962:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    8964:	9a 01       	movw	r18, r20
    8966:	bd 01       	movw	r22, r26
    8968:	df 01       	movw	r26, r30
    896a:	f8 01       	movw	r30, r16
    896c:	c1 cf       	rjmp	.-126    	; 0x88f0 <malloc+0x2a>
    896e:	ef 01       	movw	r28, r30
    8970:	f9 cf       	rjmp	.-14     	; 0x8964 <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    8972:	90 93 67 11 	sts	0x1167, r25	; 0x801167 <__flp+0x1>
    8976:	80 93 66 11 	sts	0x1166, r24	; 0x801166 <__flp>
    897a:	cd cf       	rjmp	.-102    	; 0x8916 <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    897c:	fe 01       	movw	r30, r28
    897e:	e2 0f       	add	r30, r18
    8980:	f3 1f       	adc	r31, r19
    8982:	81 93       	st	Z+, r24
    8984:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    8986:	22 50       	subi	r18, 0x02	; 2
    8988:	31 09       	sbc	r19, r1
    898a:	39 83       	std	Y+1, r19	; 0x01
    898c:	28 83       	st	Y, r18
		return &(sfp2->nx);
    898e:	d7 cf       	rjmp	.-82     	; 0x893e <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    8990:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <__brkval>
    8994:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <__brkval+0x1>
    8998:	23 2b       	or	r18, r19
    899a:	41 f4       	brne	.+16     	; 0x89ac <malloc+0xe6>
		__brkval = __malloc_heap_start;
    899c:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    89a0:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    89a4:	30 93 da 10 	sts	0x10DA, r19	; 0x8010da <__brkval+0x1>
    89a8:	20 93 d9 10 	sts	0x10D9, r18	; 0x8010d9 <__brkval>
	cp = __malloc_heap_end;
    89ac:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    89b0:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    89b4:	21 15       	cp	r18, r1
    89b6:	31 05       	cpc	r19, r1
    89b8:	41 f4       	brne	.+16     	; 0x89ca <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    89ba:	2d b7       	in	r18, 0x3d	; 61
    89bc:	3e b7       	in	r19, 0x3e	; 62
    89be:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    89c2:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    89c6:	24 1b       	sub	r18, r20
    89c8:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    89ca:	e0 91 d9 10 	lds	r30, 0x10D9	; 0x8010d9 <__brkval>
    89ce:	f0 91 da 10 	lds	r31, 0x10DA	; 0x8010da <__brkval+0x1>
    89d2:	e2 17       	cp	r30, r18
    89d4:	f3 07       	cpc	r31, r19
    89d6:	a0 f4       	brcc	.+40     	; 0x8a00 <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    89d8:	2e 1b       	sub	r18, r30
    89da:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    89dc:	28 17       	cp	r18, r24
    89de:	39 07       	cpc	r19, r25
    89e0:	78 f0       	brcs	.+30     	; 0x8a00 <malloc+0x13a>
    89e2:	ac 01       	movw	r20, r24
    89e4:	4e 5f       	subi	r20, 0xFE	; 254
    89e6:	5f 4f       	sbci	r21, 0xFF	; 255
    89e8:	24 17       	cp	r18, r20
    89ea:	35 07       	cpc	r19, r21
    89ec:	48 f0       	brcs	.+18     	; 0x8a00 <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    89ee:	4e 0f       	add	r20, r30
    89f0:	5f 1f       	adc	r21, r31
    89f2:	50 93 da 10 	sts	0x10DA, r21	; 0x8010da <__brkval+0x1>
    89f6:	40 93 d9 10 	sts	0x10D9, r20	; 0x8010d9 <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    89fa:	81 93       	st	Z+, r24
    89fc:	91 93       	st	Z+, r25
		return &(fp1->nx);
    89fe:	9f cf       	rjmp	.-194    	; 0x893e <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    8a00:	f0 e0       	ldi	r31, 0x00	; 0
    8a02:	e0 e0       	ldi	r30, 0x00	; 0
    8a04:	9c cf       	rjmp	.-200    	; 0x893e <malloc+0x78>

00008a06 <free>:
}


void
free(void *p)
{
    8a06:	cf 93       	push	r28
    8a08:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    8a0a:	00 97       	sbiw	r24, 0x00	; 0
    8a0c:	e9 f0       	breq	.+58     	; 0x8a48 <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    8a0e:	fc 01       	movw	r30, r24
    8a10:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    8a12:	13 82       	std	Z+3, r1	; 0x03
    8a14:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    8a16:	a0 91 66 11 	lds	r26, 0x1166	; 0x801166 <__flp>
    8a1a:	b0 91 67 11 	lds	r27, 0x1167	; 0x801167 <__flp+0x1>
    8a1e:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    8a20:	30 e0       	ldi	r19, 0x00	; 0
    8a22:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    8a24:	10 97       	sbiw	r26, 0x00	; 0
    8a26:	a1 f4       	brne	.+40     	; 0x8a50 <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    8a28:	20 81       	ld	r18, Z
    8a2a:	31 81       	ldd	r19, Z+1	; 0x01
    8a2c:	82 0f       	add	r24, r18
    8a2e:	93 1f       	adc	r25, r19
    8a30:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <__brkval>
    8a34:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <__brkval+0x1>
    8a38:	28 17       	cp	r18, r24
    8a3a:	39 07       	cpc	r19, r25
    8a3c:	09 f0       	breq	.+2      	; 0x8a40 <free+0x3a>
    8a3e:	61 c0       	rjmp	.+194    	; 0x8b02 <free+0xfc>
			__brkval = cpnew;
    8a40:	f0 93 da 10 	sts	0x10DA, r31	; 0x8010da <__brkval+0x1>
    8a44:	e0 93 d9 10 	sts	0x10D9, r30	; 0x8010d9 <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    8a48:	df 91       	pop	r29
    8a4a:	cf 91       	pop	r28
    8a4c:	08 95       	ret
    8a4e:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    8a50:	ce 17       	cp	r28, r30
    8a52:	df 07       	cpc	r29, r31
    8a54:	e8 f5       	brcc	.+122    	; 0x8ad0 <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    8a56:	4a 81       	ldd	r20, Y+2	; 0x02
    8a58:	5b 81       	ldd	r21, Y+3	; 0x03
    8a5a:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    8a5c:	41 15       	cp	r20, r1
    8a5e:	51 05       	cpc	r21, r1
    8a60:	b1 f7       	brne	.-20     	; 0x8a4e <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    8a62:	e9 01       	movw	r28, r18
    8a64:	fb 83       	std	Y+3, r31	; 0x03
    8a66:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    8a68:	49 91       	ld	r20, Y+
    8a6a:	59 91       	ld	r21, Y+
    8a6c:	c4 0f       	add	r28, r20
    8a6e:	d5 1f       	adc	r29, r21
    8a70:	ec 17       	cp	r30, r28
    8a72:	fd 07       	cpc	r31, r29
    8a74:	61 f4       	brne	.+24     	; 0x8a8e <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    8a76:	80 81       	ld	r24, Z
    8a78:	91 81       	ldd	r25, Z+1	; 0x01
    8a7a:	02 96       	adiw	r24, 0x02	; 2
    8a7c:	84 0f       	add	r24, r20
    8a7e:	95 1f       	adc	r25, r21
    8a80:	e9 01       	movw	r28, r18
    8a82:	99 83       	std	Y+1, r25	; 0x01
    8a84:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    8a86:	82 81       	ldd	r24, Z+2	; 0x02
    8a88:	93 81       	ldd	r25, Z+3	; 0x03
    8a8a:	9b 83       	std	Y+3, r25	; 0x03
    8a8c:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    8a8e:	f0 e0       	ldi	r31, 0x00	; 0
    8a90:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    8a92:	12 96       	adiw	r26, 0x02	; 2
    8a94:	8d 91       	ld	r24, X+
    8a96:	9c 91       	ld	r25, X
    8a98:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    8a9a:	00 97       	sbiw	r24, 0x00	; 0
    8a9c:	b9 f5       	brne	.+110    	; 0x8b0c <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    8a9e:	2d 91       	ld	r18, X+
    8aa0:	3c 91       	ld	r19, X
    8aa2:	11 97       	sbiw	r26, 0x01	; 1
    8aa4:	cd 01       	movw	r24, r26
    8aa6:	02 96       	adiw	r24, 0x02	; 2
    8aa8:	82 0f       	add	r24, r18
    8aaa:	93 1f       	adc	r25, r19
    8aac:	20 91 d9 10 	lds	r18, 0x10D9	; 0x8010d9 <__brkval>
    8ab0:	30 91 da 10 	lds	r19, 0x10DA	; 0x8010da <__brkval+0x1>
    8ab4:	28 17       	cp	r18, r24
    8ab6:	39 07       	cpc	r19, r25
    8ab8:	39 f6       	brne	.-114    	; 0x8a48 <free+0x42>
		if (fp2 == NULL)
    8aba:	30 97       	sbiw	r30, 0x00	; 0
    8abc:	51 f5       	brne	.+84     	; 0x8b12 <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    8abe:	10 92 67 11 	sts	0x1167, r1	; 0x801167 <__flp+0x1>
    8ac2:	10 92 66 11 	sts	0x1166, r1	; 0x801166 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    8ac6:	b0 93 da 10 	sts	0x10DA, r27	; 0x8010da <__brkval+0x1>
    8aca:	a0 93 d9 10 	sts	0x10D9, r26	; 0x8010d9 <__brkval>
    8ace:	bc cf       	rjmp	.-136    	; 0x8a48 <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    8ad0:	d3 83       	std	Z+3, r29	; 0x03
    8ad2:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    8ad4:	40 81       	ld	r20, Z
    8ad6:	51 81       	ldd	r21, Z+1	; 0x01
    8ad8:	84 0f       	add	r24, r20
    8ada:	95 1f       	adc	r25, r21
    8adc:	c8 17       	cp	r28, r24
    8ade:	d9 07       	cpc	r29, r25
    8ae0:	61 f4       	brne	.+24     	; 0x8afa <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    8ae2:	4e 5f       	subi	r20, 0xFE	; 254
    8ae4:	5f 4f       	sbci	r21, 0xFF	; 255
    8ae6:	88 81       	ld	r24, Y
    8ae8:	99 81       	ldd	r25, Y+1	; 0x01
    8aea:	48 0f       	add	r20, r24
    8aec:	59 1f       	adc	r21, r25
    8aee:	51 83       	std	Z+1, r21	; 0x01
    8af0:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    8af2:	8a 81       	ldd	r24, Y+2	; 0x02
    8af4:	9b 81       	ldd	r25, Y+3	; 0x03
    8af6:	93 83       	std	Z+3, r25	; 0x03
    8af8:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    8afa:	21 15       	cp	r18, r1
    8afc:	31 05       	cpc	r19, r1
    8afe:	09 f0       	breq	.+2      	; 0x8b02 <free+0xfc>
    8b00:	b0 cf       	rjmp	.-160    	; 0x8a62 <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    8b02:	f0 93 67 11 	sts	0x1167, r31	; 0x801167 <__flp+0x1>
    8b06:	e0 93 66 11 	sts	0x1166, r30	; 0x801166 <__flp>
			return;
    8b0a:	9e cf       	rjmp	.-196    	; 0x8a48 <free+0x42>
    8b0c:	fd 01       	movw	r30, r26
    8b0e:	dc 01       	movw	r26, r24
    8b10:	c0 cf       	rjmp	.-128    	; 0x8a92 <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    8b12:	13 82       	std	Z+3, r1	; 0x03
    8b14:	12 82       	std	Z+2, r1	; 0x02
    8b16:	d7 cf       	rjmp	.-82     	; 0x8ac6 <free+0xc0>

00008b18 <realloc>:



void *
realloc(void *ptr, size_t len)
{
    8b18:	4f 92       	push	r4
    8b1a:	5f 92       	push	r5
    8b1c:	6f 92       	push	r6
    8b1e:	7f 92       	push	r7
    8b20:	8f 92       	push	r8
    8b22:	9f 92       	push	r9
    8b24:	af 92       	push	r10
    8b26:	bf 92       	push	r11
    8b28:	cf 92       	push	r12
    8b2a:	df 92       	push	r13
    8b2c:	ef 92       	push	r14
    8b2e:	ff 92       	push	r15
    8b30:	0f 93       	push	r16
    8b32:	1f 93       	push	r17
    8b34:	cf 93       	push	r28
    8b36:	df 93       	push	r29
    8b38:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    8b3a:	00 97       	sbiw	r24, 0x00	; 0
    8b3c:	91 f4       	brne	.+36     	; 0x8b62 <realloc+0x4a>
		return malloc(len);
    8b3e:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    8b40:	df 91       	pop	r29
    8b42:	cf 91       	pop	r28
    8b44:	1f 91       	pop	r17
    8b46:	0f 91       	pop	r16
    8b48:	ff 90       	pop	r15
    8b4a:	ef 90       	pop	r14
    8b4c:	df 90       	pop	r13
    8b4e:	cf 90       	pop	r12
    8b50:	bf 90       	pop	r11
    8b52:	af 90       	pop	r10
    8b54:	9f 90       	pop	r9
    8b56:	8f 90       	pop	r8
    8b58:	7f 90       	pop	r7
    8b5a:	6f 90       	pop	r6
    8b5c:	5f 90       	pop	r5
    8b5e:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    8b60:	b2 ce       	rjmp	.-668    	; 0x88c6 <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    8b62:	fc 01       	movw	r30, r24
    8b64:	e6 0f       	add	r30, r22
    8b66:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    8b68:	9c 01       	movw	r18, r24
    8b6a:	22 50       	subi	r18, 0x02	; 2
    8b6c:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    8b6e:	e2 17       	cp	r30, r18
    8b70:	f3 07       	cpc	r31, r19
    8b72:	08 f4       	brcc	.+2      	; 0x8b76 <realloc+0x5e>
    8b74:	a5 c0       	rjmp	.+330    	; 0x8cc0 <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    8b76:	d9 01       	movw	r26, r18
    8b78:	cd 91       	ld	r28, X+
    8b7a:	dc 91       	ld	r29, X
    8b7c:	11 97       	sbiw	r26, 0x01	; 1
    8b7e:	c6 17       	cp	r28, r22
    8b80:	d7 07       	cpc	r29, r23
    8b82:	18 f1       	brcs	.+70     	; 0x8bca <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    8b84:	c5 30       	cpi	r28, 0x05	; 5
    8b86:	d1 05       	cpc	r29, r1
    8b88:	70 f0       	brcs	.+28     	; 0x8ba6 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    8b8a:	ce 01       	movw	r24, r28
    8b8c:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    8b8e:	86 17       	cp	r24, r22
    8b90:	97 07       	cpc	r25, r23
    8b92:	48 f0       	brcs	.+18     	; 0x8ba6 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    8b94:	c6 1b       	sub	r28, r22
    8b96:	d7 0b       	sbc	r29, r23
    8b98:	22 97       	sbiw	r28, 0x02	; 2
    8b9a:	c1 93       	st	Z+, r28
    8b9c:	d1 93       	st	Z+, r29
		fp1->sz = len;
    8b9e:	6d 93       	st	X+, r22
    8ba0:	7c 93       	st	X, r23
		free(&(fp2->nx));
    8ba2:	cf 01       	movw	r24, r30
    8ba4:	30 df       	rcall	.-416    	; 0x8a06 <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    8ba6:	c8 01       	movw	r24, r16
    8ba8:	df 91       	pop	r29
    8baa:	cf 91       	pop	r28
    8bac:	1f 91       	pop	r17
    8bae:	0f 91       	pop	r16
    8bb0:	ff 90       	pop	r15
    8bb2:	ef 90       	pop	r14
    8bb4:	df 90       	pop	r13
    8bb6:	cf 90       	pop	r12
    8bb8:	bf 90       	pop	r11
    8bba:	af 90       	pop	r10
    8bbc:	9f 90       	pop	r9
    8bbe:	8f 90       	pop	r8
    8bc0:	7f 90       	pop	r7
    8bc2:	6f 90       	pop	r6
    8bc4:	5f 90       	pop	r5
    8bc6:	4f 90       	pop	r4
    8bc8:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    8bca:	5b 01       	movw	r10, r22
    8bcc:	ac 1a       	sub	r10, r28
    8bce:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    8bd0:	4c 01       	movw	r8, r24
    8bd2:	8c 0e       	add	r8, r28
    8bd4:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    8bd6:	a0 91 66 11 	lds	r26, 0x1166	; 0x801166 <__flp>
    8bda:	b0 91 67 11 	lds	r27, 0x1167	; 0x801167 <__flp+0x1>
    8bde:	51 2c       	mov	r5, r1
    8be0:	41 2c       	mov	r4, r1
    8be2:	f1 2c       	mov	r15, r1
    8be4:	e1 2c       	mov	r14, r1
    8be6:	10 97       	sbiw	r26, 0x00	; 0
    8be8:	01 f5       	brne	.+64     	; 0x8c2a <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    8bea:	80 91 d9 10 	lds	r24, 0x10D9	; 0x8010d9 <__brkval>
    8bee:	90 91 da 10 	lds	r25, 0x10DA	; 0x8010da <__brkval+0x1>
    8bf2:	88 15       	cp	r24, r8
    8bf4:	99 05       	cpc	r25, r9
    8bf6:	09 f0       	breq	.+2      	; 0x8bfa <realloc+0xe2>
    8bf8:	56 c0       	rjmp	.+172    	; 0x8ca6 <realloc+0x18e>
    8bfa:	46 16       	cp	r4, r22
    8bfc:	57 06       	cpc	r5, r23
    8bfe:	08 f0       	brcs	.+2      	; 0x8c02 <realloc+0xea>
    8c00:	52 c0       	rjmp	.+164    	; 0x8ca6 <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    8c02:	8d b7       	in	r24, 0x3d	; 61
    8c04:	9e b7       	in	r25, 0x3e	; 62
    8c06:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    8c0a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    8c0e:	84 1b       	sub	r24, r20
    8c10:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    8c12:	e8 17       	cp	r30, r24
    8c14:	f9 07       	cpc	r31, r25
    8c16:	08 f0       	brcs	.+2      	; 0x8c1a <realloc+0x102>
    8c18:	53 c0       	rjmp	.+166    	; 0x8cc0 <realloc+0x1a8>
			__brkval = cp;
    8c1a:	f0 93 da 10 	sts	0x10DA, r31	; 0x8010da <__brkval+0x1>
    8c1e:	e0 93 d9 10 	sts	0x10D9, r30	; 0x8010d9 <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    8c22:	f9 01       	movw	r30, r18
    8c24:	71 83       	std	Z+1, r23	; 0x01
    8c26:	60 83       	st	Z, r22
			return ptr;
    8c28:	be cf       	rjmp	.-132    	; 0x8ba6 <realloc+0x8e>
    8c2a:	8d 91       	ld	r24, X+
    8c2c:	9c 91       	ld	r25, X
    8c2e:	11 97       	sbiw	r26, 0x01	; 1
    8c30:	12 96       	adiw	r26, 0x02	; 2
    8c32:	6c 90       	ld	r6, X
    8c34:	12 97       	sbiw	r26, 0x02	; 2
    8c36:	13 96       	adiw	r26, 0x03	; 3
    8c38:	7c 90       	ld	r7, X
    8c3a:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    8c3c:	a8 15       	cp	r26, r8
    8c3e:	b9 05       	cpc	r27, r9
    8c40:	59 f5       	brne	.+86     	; 0x8c98 <realloc+0x180>
    8c42:	6c 01       	movw	r12, r24
    8c44:	42 e0       	ldi	r20, 0x02	; 2
    8c46:	c4 0e       	add	r12, r20
    8c48:	d1 1c       	adc	r13, r1
    8c4a:	ca 14       	cp	r12, r10
    8c4c:	db 04       	cpc	r13, r11
    8c4e:	20 f1       	brcs	.+72     	; 0x8c98 <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    8c50:	ac 01       	movw	r20, r24
    8c52:	4a 19       	sub	r20, r10
    8c54:	5b 09       	sbc	r21, r11
    8c56:	da 01       	movw	r26, r20
    8c58:	12 96       	adiw	r26, 0x02	; 2
    8c5a:	15 97       	sbiw	r26, 0x05	; 5
    8c5c:	80 f0       	brcs	.+32     	; 0x8c7e <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    8c5e:	62 82       	std	Z+2, r6	; 0x02
    8c60:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    8c62:	51 83       	std	Z+1, r21	; 0x01
    8c64:	40 83       	st	Z, r20
				fp1->sz = len;
    8c66:	d9 01       	movw	r26, r18
    8c68:	6d 93       	st	X+, r22
    8c6a:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    8c6c:	e1 14       	cp	r14, r1
    8c6e:	f1 04       	cpc	r15, r1
    8c70:	71 f0       	breq	.+28     	; 0x8c8e <realloc+0x176>
				ofp3->nx = fp2;
    8c72:	d7 01       	movw	r26, r14
    8c74:	13 96       	adiw	r26, 0x03	; 3
    8c76:	fc 93       	st	X, r31
    8c78:	ee 93       	st	-X, r30
    8c7a:	12 97       	sbiw	r26, 0x02	; 2
    8c7c:	94 cf       	rjmp	.-216    	; 0x8ba6 <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    8c7e:	22 96       	adiw	r28, 0x02	; 2
    8c80:	8c 0f       	add	r24, r28
    8c82:	9d 1f       	adc	r25, r29
    8c84:	f9 01       	movw	r30, r18
    8c86:	91 83       	std	Z+1, r25	; 0x01
    8c88:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    8c8a:	f3 01       	movw	r30, r6
    8c8c:	ef cf       	rjmp	.-34     	; 0x8c6c <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    8c8e:	f0 93 67 11 	sts	0x1167, r31	; 0x801167 <__flp+0x1>
    8c92:	e0 93 66 11 	sts	0x1166, r30	; 0x801166 <__flp>
    8c96:	87 cf       	rjmp	.-242    	; 0x8ba6 <realloc+0x8e>
    8c98:	48 16       	cp	r4, r24
    8c9a:	59 06       	cpc	r5, r25
    8c9c:	08 f4       	brcc	.+2      	; 0x8ca0 <realloc+0x188>
    8c9e:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    8ca0:	7d 01       	movw	r14, r26
    8ca2:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    8ca4:	a0 cf       	rjmp	.-192    	; 0x8be6 <realloc+0xce>
    8ca6:	cb 01       	movw	r24, r22
    8ca8:	0e de       	rcall	.-996    	; 0x88c6 <malloc>
    8caa:	7c 01       	movw	r14, r24
    8cac:	00 97       	sbiw	r24, 0x00	; 0
    8cae:	41 f0       	breq	.+16     	; 0x8cc0 <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    8cb0:	ae 01       	movw	r20, r28
    8cb2:	b8 01       	movw	r22, r16
    8cb4:	0e 94 8b 52 	call	0xa516	; 0xa516 <memcpy>
	free(ptr);
    8cb8:	c8 01       	movw	r24, r16
    8cba:	a5 de       	rcall	.-694    	; 0x8a06 <free>
	return memp;
    8cbc:	87 01       	movw	r16, r14
    8cbe:	73 cf       	rjmp	.-282    	; 0x8ba6 <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    8cc0:	10 e0       	ldi	r17, 0x00	; 0
    8cc2:	00 e0       	ldi	r16, 0x00	; 0
    8cc4:	70 cf       	rjmp	.-288    	; 0x8ba6 <realloc+0x8e>

00008cc6 <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    8cc6:	1d ba       	out	0x1d, r1	; 29
    8cc8:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    8ccc:	1c bc       	out	0x2c, r1	; 44
    8cce:	10 be       	out	0x30, r1	; 48
    8cd0:	1f ba       	out	0x1f, r1	; 31
    8cd2:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8cd6:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    8cda:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    8cde:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    8ce2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    8ce6:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8cea:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    8cee:	11 b8       	out	0x01, r1	; 1
    8cf0:	14 b8       	out	0x04, r1	; 4
    8cf2:	17 b8       	out	0x07, r1	; 7
    8cf4:	1a b8       	out	0x0a, r1	; 10
    8cf6:	1d b8       	out	0x0d, r1	; 13
    8cf8:	10 ba       	out	0x10, r1	; 16
    8cfa:	12 b8       	out	0x02, r1	; 2
    8cfc:	15 b8       	out	0x05, r1	; 5
    8cfe:	18 b8       	out	0x08, r1	; 8
    8d00:	1b b8       	out	0x0b, r1	; 11
    8d02:	1e b8       	out	0x0e, r1	; 14
    8d04:	11 ba       	out	0x11, r1	; 17
    8d06:	08 95       	ret

00008d08 <_init_Teensyduino_internal_>:
    8d08:	f8 94       	cli
    8d0a:	e1 e6       	ldi	r30, 0x61	; 97
    8d0c:	f0 e0       	ldi	r31, 0x00	; 0
    8d0e:	20 e8       	ldi	r18, 0x80	; 128
    8d10:	20 83       	st	Z, r18
    8d12:	10 82       	st	Z, r1
    8d14:	83 e0       	ldi	r24, 0x03	; 3
    8d16:	84 bd       	out	0x24, r24	; 36
    8d18:	85 bd       	out	0x25, r24	; 37
    8d1a:	ee e6       	ldi	r30, 0x6E	; 110
    8d1c:	f0 e0       	ldi	r31, 0x00	; 0
    8d1e:	80 81       	ld	r24, Z
    8d20:	81 60       	ori	r24, 0x01	; 1
    8d22:	80 83       	st	Z, r24
    8d24:	91 e0       	ldi	r25, 0x01	; 1
    8d26:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8d2a:	82 e0       	ldi	r24, 0x02	; 2
    8d2c:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    8d30:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8d34:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    8d38:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8d3c:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    8d40:	86 e8       	ldi	r24, 0x86	; 134
    8d42:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8d46:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    8d4a:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8d4e:	d9 d1       	rcall	.+946    	; 0x9102 <usb_init>
    8d50:	78 94       	sei
    8d52:	08 95       	ret

00008d54 <analogRead>:
    8d54:	9a ed       	ldi	r25, 0xDA	; 218
    8d56:	98 0f       	add	r25, r24
    8d58:	98 30       	cpi	r25, 0x08	; 8
    8d5a:	10 f1       	brcs	.+68     	; 0x8da0 <analogRead+0x4c>
    8d5c:	88 30       	cpi	r24, 0x08	; 8
    8d5e:	60 f4       	brcc	.+24     	; 0x8d78 <analogRead+0x24>
    8d60:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8d64:	21 e0       	ldi	r18, 0x01	; 1
    8d66:	30 e0       	ldi	r19, 0x00	; 0
    8d68:	08 2e       	mov	r0, r24
    8d6a:	01 c0       	rjmp	.+2      	; 0x8d6e <analogRead+0x1a>
    8d6c:	22 0f       	add	r18, r18
    8d6e:	0a 94       	dec	r0
    8d70:	ea f7       	brpl	.-6      	; 0x8d6c <analogRead+0x18>
    8d72:	92 2b       	or	r25, r18
    8d74:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8d78:	8f 71       	andi	r24, 0x1F	; 31
    8d7a:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    8d7e:	89 2b       	or	r24, r25
    8d80:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    8d84:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8d88:	80 64       	ori	r24, 0x40	; 64
    8d8a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8d8e:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8d92:	86 fd       	sbrc	r24, 6
    8d94:	fc cf       	rjmp	.-8      	; 0x8d8e <analogRead+0x3a>
    8d96:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    8d9a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    8d9e:	08 95       	ret
    8da0:	89 2f       	mov	r24, r25
    8da2:	de cf       	rjmp	.-68     	; 0x8d60 <analogRead+0xc>

00008da4 <_pinMode_output>:
    8da4:	8e 32       	cpi	r24, 0x2E	; 46
    8da6:	70 f4       	brcc	.+28     	; 0x8dc4 <_pinMode_output+0x20>
    8da8:	e8 e3       	ldi	r30, 0x38	; 56
    8daa:	f7 e0       	ldi	r31, 0x07	; 7
    8dac:	88 0f       	add	r24, r24
    8dae:	e8 0f       	add	r30, r24
    8db0:	f1 1d       	adc	r31, r1
    8db2:	25 91       	lpm	r18, Z+
    8db4:	e4 91       	lpm	r30, Z
    8db6:	f0 e0       	ldi	r31, 0x00	; 0
    8db8:	9f b7       	in	r25, 0x3f	; 63
    8dba:	f8 94       	cli
    8dbc:	81 81       	ldd	r24, Z+1	; 0x01
    8dbe:	82 2b       	or	r24, r18
    8dc0:	81 83       	std	Z+1, r24	; 0x01
    8dc2:	9f bf       	out	0x3f, r25	; 63
    8dc4:	08 95       	ret

00008dc6 <_digitalWrite_HIGH>:
    8dc6:	ee 32       	cpi	r30, 0x2E	; 46
    8dc8:	50 f4       	brcc	.+20     	; 0x8dde <_digitalWrite_bailout>
    8dca:	ee 0f       	add	r30, r30
    8dcc:	e0 51       	subi	r30, 0x10	; 16
    8dce:	f9 4b       	sbci	r31, 0xB9	; 185
    8dd0:	09 94       	ijmp

00008dd2 <_digitalWrite_LOW>:
    8dd2:	ee 32       	cpi	r30, 0x2E	; 46
    8dd4:	20 f4       	brcc	.+8      	; 0x8dde <_digitalWrite_bailout>
    8dd6:	ee 0f       	add	r30, r30
    8dd8:	e4 5b       	subi	r30, 0xB4	; 180
    8dda:	f8 4b       	sbci	r31, 0xB8	; 184
    8ddc:	09 94       	ijmp

00008dde <_digitalWrite_bailout>:
    8dde:	08 95       	ret

00008de0 <_digitalWrite_HIGH_TABLE>:
    8de0:	58 9a       	sbi	0x0b, 0	; 11
    8de2:	b6 c0       	rjmp	.+364    	; 0x8f50 <_digitalWrite_OC0B>
    8de4:	59 9a       	sbi	0x0b, 1	; 11
    8de6:	d0 c0       	rjmp	.+416    	; 0x8f88 <_digitalWrite_OC2B>
    8de8:	5a 9a       	sbi	0x0b, 2	; 11
    8dea:	08 95       	ret
    8dec:	5b 9a       	sbi	0x0b, 3	; 11
    8dee:	08 95       	ret
    8df0:	5c 9a       	sbi	0x0b, 4	; 11
    8df2:	08 95       	ret
    8df4:	5d 9a       	sbi	0x0b, 5	; 11
    8df6:	08 95       	ret
    8df8:	5e 9a       	sbi	0x0b, 6	; 11
    8dfa:	08 95       	ret
    8dfc:	5f 9a       	sbi	0x0b, 7	; 11
    8dfe:	08 95       	ret
    8e00:	70 9a       	sbi	0x0e, 0	; 14
    8e02:	08 95       	ret
    8e04:	71 9a       	sbi	0x0e, 1	; 14
    8e06:	08 95       	ret
    8e08:	40 9a       	sbi	0x08, 0	; 8
    8e0a:	08 95       	ret
    8e0c:	41 9a       	sbi	0x08, 1	; 8
    8e0e:	08 95       	ret
    8e10:	42 9a       	sbi	0x08, 2	; 8
    8e12:	08 95       	ret
    8e14:	43 9a       	sbi	0x08, 3	; 8
    8e16:	08 95       	ret
    8e18:	44 9a       	sbi	0x08, 4	; 8
    8e1a:	c8 c0       	rjmp	.+400    	; 0x8fac <_digitalWrite_OC3C>
    8e1c:	45 9a       	sbi	0x08, 5	; 8
    8e1e:	c0 c0       	rjmp	.+384    	; 0x8fa0 <_digitalWrite_OC3B>
    8e20:	46 9a       	sbi	0x08, 6	; 8
    8e22:	b8 c0       	rjmp	.+368    	; 0x8f94 <_digitalWrite_OC3A>
    8e24:	47 9a       	sbi	0x08, 7	; 8
    8e26:	08 95       	ret
    8e28:	76 9a       	sbi	0x0e, 6	; 14
    8e2a:	08 95       	ret
    8e2c:	77 9a       	sbi	0x0e, 7	; 14
    8e2e:	08 95       	ret
    8e30:	28 9a       	sbi	0x05, 0	; 5
    8e32:	08 95       	ret
    8e34:	29 9a       	sbi	0x05, 1	; 5
    8e36:	08 95       	ret
    8e38:	2a 9a       	sbi	0x05, 2	; 5
    8e3a:	08 95       	ret
    8e3c:	2b 9a       	sbi	0x05, 3	; 5
    8e3e:	08 95       	ret
    8e40:	2c 9a       	sbi	0x05, 4	; 5
    8e42:	9c c0       	rjmp	.+312    	; 0x8f7c <_digitalWrite_OC2A>
    8e44:	2d 9a       	sbi	0x05, 5	; 5
    8e46:	88 c0       	rjmp	.+272    	; 0x8f58 <_digitalWrite_OC1A>
    8e48:	2e 9a       	sbi	0x05, 6	; 5
    8e4a:	8c c0       	rjmp	.+280    	; 0x8f64 <_digitalWrite_OC1B>
    8e4c:	2f 9a       	sbi	0x05, 7	; 5
    8e4e:	90 c0       	rjmp	.+288    	; 0x8f70 <_digitalWrite_OC1C>
    8e50:	10 9a       	sbi	0x02, 0	; 2
    8e52:	08 95       	ret
    8e54:	11 9a       	sbi	0x02, 1	; 2
    8e56:	08 95       	ret
    8e58:	12 9a       	sbi	0x02, 2	; 2
    8e5a:	08 95       	ret
    8e5c:	13 9a       	sbi	0x02, 3	; 2
    8e5e:	08 95       	ret
    8e60:	14 9a       	sbi	0x02, 4	; 2
    8e62:	08 95       	ret
    8e64:	15 9a       	sbi	0x02, 5	; 2
    8e66:	08 95       	ret
    8e68:	16 9a       	sbi	0x02, 6	; 2
    8e6a:	08 95       	ret
    8e6c:	17 9a       	sbi	0x02, 7	; 2
    8e6e:	08 95       	ret
    8e70:	74 9a       	sbi	0x0e, 4	; 14
    8e72:	08 95       	ret
    8e74:	75 9a       	sbi	0x0e, 5	; 14
    8e76:	08 95       	ret
    8e78:	88 9a       	sbi	0x11, 0	; 17
    8e7a:	08 95       	ret
    8e7c:	89 9a       	sbi	0x11, 1	; 17
    8e7e:	08 95       	ret
    8e80:	8a 9a       	sbi	0x11, 2	; 17
    8e82:	08 95       	ret
    8e84:	8b 9a       	sbi	0x11, 3	; 17
    8e86:	08 95       	ret
    8e88:	8c 9a       	sbi	0x11, 4	; 17
    8e8a:	08 95       	ret
    8e8c:	8d 9a       	sbi	0x11, 5	; 17
    8e8e:	08 95       	ret
    8e90:	8e 9a       	sbi	0x11, 6	; 17
    8e92:	08 95       	ret
    8e94:	8f 9a       	sbi	0x11, 7	; 17
    8e96:	08 95       	ret

00008e98 <_digitalWrite_LOW_TABLE>:
    8e98:	58 98       	cbi	0x0b, 0	; 11
    8e9a:	5a c0       	rjmp	.+180    	; 0x8f50 <_digitalWrite_OC0B>
    8e9c:	59 98       	cbi	0x0b, 1	; 11
    8e9e:	74 c0       	rjmp	.+232    	; 0x8f88 <_digitalWrite_OC2B>
    8ea0:	5a 98       	cbi	0x0b, 2	; 11
    8ea2:	08 95       	ret
    8ea4:	5b 98       	cbi	0x0b, 3	; 11
    8ea6:	08 95       	ret
    8ea8:	5c 98       	cbi	0x0b, 4	; 11
    8eaa:	08 95       	ret
    8eac:	5d 98       	cbi	0x0b, 5	; 11
    8eae:	08 95       	ret
    8eb0:	5e 98       	cbi	0x0b, 6	; 11
    8eb2:	08 95       	ret
    8eb4:	5f 98       	cbi	0x0b, 7	; 11
    8eb6:	08 95       	ret
    8eb8:	70 98       	cbi	0x0e, 0	; 14
    8eba:	08 95       	ret
    8ebc:	71 98       	cbi	0x0e, 1	; 14
    8ebe:	08 95       	ret
    8ec0:	40 98       	cbi	0x08, 0	; 8
    8ec2:	08 95       	ret
    8ec4:	41 98       	cbi	0x08, 1	; 8
    8ec6:	08 95       	ret
    8ec8:	42 98       	cbi	0x08, 2	; 8
    8eca:	08 95       	ret
    8ecc:	43 98       	cbi	0x08, 3	; 8
    8ece:	08 95       	ret
    8ed0:	44 98       	cbi	0x08, 4	; 8
    8ed2:	6c c0       	rjmp	.+216    	; 0x8fac <_digitalWrite_OC3C>
    8ed4:	45 98       	cbi	0x08, 5	; 8
    8ed6:	64 c0       	rjmp	.+200    	; 0x8fa0 <_digitalWrite_OC3B>
    8ed8:	46 98       	cbi	0x08, 6	; 8
    8eda:	5c c0       	rjmp	.+184    	; 0x8f94 <_digitalWrite_OC3A>
    8edc:	47 98       	cbi	0x08, 7	; 8
    8ede:	08 95       	ret
    8ee0:	76 98       	cbi	0x0e, 6	; 14
    8ee2:	08 95       	ret
    8ee4:	77 98       	cbi	0x0e, 7	; 14
    8ee6:	08 95       	ret
    8ee8:	28 98       	cbi	0x05, 0	; 5
    8eea:	08 95       	ret
    8eec:	29 98       	cbi	0x05, 1	; 5
    8eee:	08 95       	ret
    8ef0:	2a 98       	cbi	0x05, 2	; 5
    8ef2:	08 95       	ret
    8ef4:	2b 98       	cbi	0x05, 3	; 5
    8ef6:	08 95       	ret
    8ef8:	2c 98       	cbi	0x05, 4	; 5
    8efa:	40 c0       	rjmp	.+128    	; 0x8f7c <_digitalWrite_OC2A>
    8efc:	2d 98       	cbi	0x05, 5	; 5
    8efe:	2c c0       	rjmp	.+88     	; 0x8f58 <_digitalWrite_OC1A>
    8f00:	2e 98       	cbi	0x05, 6	; 5
    8f02:	30 c0       	rjmp	.+96     	; 0x8f64 <_digitalWrite_OC1B>
    8f04:	2f 98       	cbi	0x05, 7	; 5
    8f06:	34 c0       	rjmp	.+104    	; 0x8f70 <_digitalWrite_OC1C>
    8f08:	10 98       	cbi	0x02, 0	; 2
    8f0a:	08 95       	ret
    8f0c:	11 98       	cbi	0x02, 1	; 2
    8f0e:	08 95       	ret
    8f10:	12 98       	cbi	0x02, 2	; 2
    8f12:	08 95       	ret
    8f14:	13 98       	cbi	0x02, 3	; 2
    8f16:	08 95       	ret
    8f18:	14 98       	cbi	0x02, 4	; 2
    8f1a:	08 95       	ret
    8f1c:	15 98       	cbi	0x02, 5	; 2
    8f1e:	08 95       	ret
    8f20:	16 98       	cbi	0x02, 6	; 2
    8f22:	08 95       	ret
    8f24:	17 98       	cbi	0x02, 7	; 2
    8f26:	08 95       	ret
    8f28:	74 98       	cbi	0x0e, 4	; 14
    8f2a:	08 95       	ret
    8f2c:	75 98       	cbi	0x0e, 5	; 14
    8f2e:	08 95       	ret
    8f30:	88 98       	cbi	0x11, 0	; 17
    8f32:	08 95       	ret
    8f34:	89 98       	cbi	0x11, 1	; 17
    8f36:	08 95       	ret
    8f38:	8a 98       	cbi	0x11, 2	; 17
    8f3a:	08 95       	ret
    8f3c:	8b 98       	cbi	0x11, 3	; 17
    8f3e:	08 95       	ret
    8f40:	8c 98       	cbi	0x11, 4	; 17
    8f42:	08 95       	ret
    8f44:	8d 98       	cbi	0x11, 5	; 17
    8f46:	08 95       	ret
    8f48:	8e 98       	cbi	0x11, 6	; 17
    8f4a:	08 95       	ret
    8f4c:	8f 98       	cbi	0x11, 7	; 17
    8f4e:	08 95       	ret

00008f50 <_digitalWrite_OC0B>:
    8f50:	e4 b5       	in	r30, 0x24	; 36
    8f52:	ef 7d       	andi	r30, 0xDF	; 223
    8f54:	e4 bd       	out	0x24, r30	; 36
    8f56:	08 95       	ret

00008f58 <_digitalWrite_OC1A>:
    8f58:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8f5c:	ef 77       	andi	r30, 0x7F	; 127
    8f5e:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8f62:	08 95       	ret

00008f64 <_digitalWrite_OC1B>:
    8f64:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8f68:	ef 7d       	andi	r30, 0xDF	; 223
    8f6a:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8f6e:	08 95       	ret

00008f70 <_digitalWrite_OC1C>:
    8f70:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8f74:	e7 7f       	andi	r30, 0xF7	; 247
    8f76:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8f7a:	08 95       	ret

00008f7c <_digitalWrite_OC2A>:
    8f7c:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8f80:	ef 77       	andi	r30, 0x7F	; 127
    8f82:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8f86:	08 95       	ret

00008f88 <_digitalWrite_OC2B>:
    8f88:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8f8c:	ef 7d       	andi	r30, 0xDF	; 223
    8f8e:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8f92:	08 95       	ret

00008f94 <_digitalWrite_OC3A>:
    8f94:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8f98:	ef 77       	andi	r30, 0x7F	; 127
    8f9a:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8f9e:	08 95       	ret

00008fa0 <_digitalWrite_OC3B>:
    8fa0:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8fa4:	ef 7d       	andi	r30, 0xDF	; 223
    8fa6:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8faa:	08 95       	ret

00008fac <_digitalWrite_OC3C>:
    8fac:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8fb0:	e7 7f       	andi	r30, 0xF7	; 247
    8fb2:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8fb6:	08 95       	ret

00008fb8 <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    8fb8:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    8fba:	84 b7       	in	r24, 0x34	; 52
    8fbc:	87 7f       	andi	r24, 0xF7	; 247
    8fbe:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    8fc0:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    8fc4:	80 61       	ori	r24, 0x10	; 16
    8fc6:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    8fca:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    8fce:	80 e2       	ldi	r24, 0x20	; 32
    8fd0:	9e e4       	ldi	r25, 0x4E	; 78

00008fd2 <L_1164_loop>:
    8fd2:	01 97       	sbiw	r24, 0x01	; 1
    8fd4:	f1 f7       	brne	.-4      	; 0x8fd2 <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    8fd6:	81 e0       	ldi	r24, 0x01	; 1
    8fd8:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    8fdc:	80 e2       	ldi	r24, 0x20	; 32
    8fde:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    8fe2:	80 e6       	ldi	r24, 0x60	; 96
    8fe4:	9a ee       	ldi	r25, 0xEA	; 234

00008fe6 <L_1178_loop>:
    8fe6:	01 97       	sbiw	r24, 0x01	; 1
    8fe8:	f1 f7       	brne	.-4      	; 0x8fe6 <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    8fea:	6d de       	rcall	.-806    	; 0x8cc6 <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    8fec:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    8ff0:	ff cf       	rjmp	.-2      	; 0x8ff0 <L_1178_loop+0xa>

00008ff2 <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    8ff2:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    8ff4:	68 de       	rcall	.-816    	; 0x8cc6 <disable_peripherals>
    8ff6:	80 e6       	ldi	r24, 0x60	; 96
    8ff8:	9a ee       	ldi	r25, 0xEA	; 234

00008ffa <L_1203_loop>:
    8ffa:	01 97       	sbiw	r24, 0x01	; 1
    8ffc:	f1 f7       	brne	.-4      	; 0x8ffa <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    8ffe:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    9002:	ff cf       	rjmp	.-2      	; 0x9002 <L_1203_loop+0x8>

00009004 <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    9004:	8f 93       	push	r24
    9006:	8f b7       	in	r24, 0x3f	; 63
    9008:	8f 93       	push	r24
    900a:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <timer0_fract_count>
    900e:	8d 5f       	subi	r24, 0xFD	; 253
    9010:	8d 37       	cpi	r24, 0x7D	; 125
    9012:	d0 f4       	brcc	.+52     	; 0x9048 <L_1218_fract_roll>

00009014 <L_1218_fract_noroll>:
    9014:	80 93 db 10 	sts	0x10DB, r24	; 0x8010db <timer0_fract_count>
    9018:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    901c:	8f 5f       	subi	r24, 0xFF	; 255
    901e:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <timer0_millis_count>
    9022:	d8 f0       	brcs	.+54     	; 0x905a <L_1218_ovcount>

00009024 <L_1218_millis_inc_sext>:
    9024:	80 91 dd 10 	lds	r24, 0x10DD	; 0x8010dd <timer0_millis_count+0x1>
    9028:	8f 4f       	sbci	r24, 0xFF	; 255
    902a:	80 93 dd 10 	sts	0x10DD, r24	; 0x8010dd <timer0_millis_count+0x1>
    902e:	a8 f0       	brcs	.+42     	; 0x905a <L_1218_ovcount>
    9030:	80 91 de 10 	lds	r24, 0x10DE	; 0x8010de <timer0_millis_count+0x2>
    9034:	8f 4f       	sbci	r24, 0xFF	; 255
    9036:	80 93 de 10 	sts	0x10DE, r24	; 0x8010de <timer0_millis_count+0x2>
    903a:	78 f0       	brcs	.+30     	; 0x905a <L_1218_ovcount>
    903c:	80 91 df 10 	lds	r24, 0x10DF	; 0x8010df <timer0_millis_count+0x3>
    9040:	8f 4f       	sbci	r24, 0xFF	; 255
    9042:	80 93 df 10 	sts	0x10DF, r24	; 0x8010df <timer0_millis_count+0x3>
    9046:	09 c0       	rjmp	.+18     	; 0x905a <L_1218_ovcount>

00009048 <L_1218_fract_roll>:
    9048:	8d 57       	subi	r24, 0x7D	; 125
    904a:	80 93 db 10 	sts	0x10DB, r24	; 0x8010db <timer0_fract_count>
    904e:	80 91 dc 10 	lds	r24, 0x10DC	; 0x8010dc <timer0_millis_count>
    9052:	8e 5f       	subi	r24, 0xFE	; 254
    9054:	80 93 dc 10 	sts	0x10DC, r24	; 0x8010dc <timer0_millis_count>
    9058:	28 f7       	brcc	.-54     	; 0x9024 <L_1218_millis_inc_sext>

0000905a <L_1218_ovcount>:
    905a:	80 91 e0 10 	lds	r24, 0x10E0	; 0x8010e0 <timer0_micros_count>
    905e:	8c 5f       	subi	r24, 0xFC	; 252
    9060:	80 93 e0 10 	sts	0x10E0, r24	; 0x8010e0 <timer0_micros_count>
    9064:	58 f0       	brcs	.+22     	; 0x907c <L_1218_end>
    9066:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <timer0_micros_count+0x1>
    906a:	8f 4f       	sbci	r24, 0xFF	; 255
    906c:	80 93 e1 10 	sts	0x10E1, r24	; 0x8010e1 <timer0_micros_count+0x1>
    9070:	28 f0       	brcs	.+10     	; 0x907c <L_1218_end>
    9072:	80 91 e2 10 	lds	r24, 0x10E2	; 0x8010e2 <timer0_micros_count+0x2>
    9076:	8f 4f       	sbci	r24, 0xFF	; 255
    9078:	80 93 e2 10 	sts	0x10E2, r24	; 0x8010e2 <timer0_micros_count+0x2>

0000907c <L_1218_end>:
    907c:	8f 91       	pop	r24
    907e:	8f bf       	out	0x3f, r24	; 63
    9080:	8f 91       	pop	r24
    9082:	18 95       	reti

00009084 <delay>:
	);
}


void delay(uint32_t ms)
{
    9084:	cf 92       	push	r12
    9086:	df 92       	push	r13
    9088:	ef 92       	push	r14
    908a:	ff 92       	push	r15
    908c:	6b 01       	movw	r12, r22
    908e:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    9090:	19 d0       	rcall	.+50     	; 0x90c4 <_micros>
	uint16_t start = (uint16_t)micros();
    9092:	9b 01       	movw	r18, r22

	while (ms > 0) {
    9094:	c1 14       	cp	r12, r1
    9096:	d1 04       	cpc	r13, r1
    9098:	e1 04       	cpc	r14, r1
    909a:	f1 04       	cpc	r15, r1
    909c:	29 f4       	brne	.+10     	; 0x90a8 <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    909e:	ff 90       	pop	r15
    90a0:	ef 90       	pop	r14
    90a2:	df 90       	pop	r13
    90a4:	cf 90       	pop	r12
    90a6:	08 95       	ret
    90a8:	0d d0       	rcall	.+26     	; 0x90c4 <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    90aa:	62 1b       	sub	r22, r18
    90ac:	73 0b       	sbc	r23, r19
    90ae:	68 3e       	cpi	r22, 0xE8	; 232
    90b0:	73 40       	sbci	r23, 0x03	; 3
    90b2:	80 f3       	brcs	.-32     	; 0x9094 <delay+0x10>
			ms--;
    90b4:	81 e0       	ldi	r24, 0x01	; 1
    90b6:	c8 1a       	sub	r12, r24
    90b8:	d1 08       	sbc	r13, r1
    90ba:	e1 08       	sbc	r14, r1
    90bc:	f1 08       	sbc	r15, r1
			start += 1000;
    90be:	28 51       	subi	r18, 0x18	; 24
    90c0:	3c 4f       	sbci	r19, 0xFC	; 252
    90c2:	e8 cf       	rjmp	.-48     	; 0x9094 <delay+0x10>

000090c4 <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    90c4:	0f b6       	in	r0, 0x3f	; 63
    90c6:	f8 94       	cli
    90c8:	66 b5       	in	r22, 0x26	; 38
    90ca:	15 b2       	in	r1, 0x15	; 21
    90cc:	70 91 e0 10 	lds	r23, 0x10E0	; 0x8010e0 <timer0_micros_count>
    90d0:	80 91 e1 10 	lds	r24, 0x10E1	; 0x8010e1 <timer0_micros_count+0x1>
    90d4:	90 91 e2 10 	lds	r25, 0x10E2	; 0x8010e2 <timer0_micros_count+0x2>
    90d8:	0f be       	out	0x3f, r0	; 63
    90da:	10 fe       	sbrs	r1, 0
    90dc:	05 c0       	rjmp	.+10     	; 0x90e8 <L_1296_skip>
    90de:	6f 3f       	cpi	r22, 0xFF	; 255
    90e0:	19 f0       	breq	.+6      	; 0x90e8 <L_1296_skip>
    90e2:	7c 5f       	subi	r23, 0xFC	; 252
    90e4:	8f 4f       	sbci	r24, 0xFF	; 255
    90e6:	9f 4f       	sbci	r25, 0xFF	; 255

000090e8 <L_1296_skip>:
    90e8:	11 24       	eor	r1, r1
    90ea:	00 24       	eor	r0, r0
    90ec:	66 0f       	add	r22, r22
    90ee:	00 1c       	adc	r0, r0
    90f0:	66 0f       	add	r22, r22
    90f2:	00 1c       	adc	r0, r0
    90f4:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    90f6:	08 95       	ret

000090f8 <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    90f8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    90fc:	80 ff       	sbrs	r24, 0
    90fe:	fc cf       	rjmp	.-8      	; 0x90f8 <usb_wait_in_ready>
    9100:	08 95       	ret

00009102 <usb_init>:
    9102:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    9106:	87 ff       	sbrs	r24, 7
    9108:	02 c0       	rjmp	.+4      	; 0x910e <usb_init+0xc>
    910a:	85 ff       	sbrs	r24, 5
    910c:	1b c0       	rjmp	.+54     	; 0x9144 <usb_init+0x42>
    910e:	81 e8       	ldi	r24, 0x81	; 129
    9110:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    9114:	80 ea       	ldi	r24, 0xA0	; 160
    9116:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    911a:	86 e1       	ldi	r24, 0x16	; 22
    911c:	89 bd       	out	0x29, r24	; 41
    911e:	09 b4       	in	r0, 0x29	; 41
    9120:	00 fe       	sbrs	r0, 0
    9122:	fd cf       	rjmp	.-6      	; 0x911e <usb_init+0x1c>
    9124:	80 e9       	ldi	r24, 0x90	; 144
    9126:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    912a:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    912e:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <usb_configuration>
    9132:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <usb_suspended>
    9136:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <__bss_end>
    913a:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    913e:	8d e0       	ldi	r24, 0x0D	; 13
    9140:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    9144:	08 95       	ret

00009146 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    9146:	1f 92       	push	r1
    9148:	0f 92       	push	r0
    914a:	0f b6       	in	r0, 0x3f	; 63
    914c:	0f 92       	push	r0
    914e:	11 24       	eor	r1, r1
    9150:	0b b6       	in	r0, 0x3b	; 59
    9152:	0f 92       	push	r0
    9154:	2f 93       	push	r18
    9156:	3f 93       	push	r19
    9158:	4f 93       	push	r20
    915a:	5f 93       	push	r21
    915c:	6f 93       	push	r22
    915e:	7f 93       	push	r23
    9160:	8f 93       	push	r24
    9162:	9f 93       	push	r25
    9164:	af 93       	push	r26
    9166:	bf 93       	push	r27
    9168:	ef 93       	push	r30
    916a:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    916c:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    9170:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    9174:	93 ff       	sbrs	r25, 3
    9176:	11 c0       	rjmp	.+34     	; 0x919a <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    9178:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    917c:	81 e0       	ldi	r24, 0x01	; 1
    917e:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    9182:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    9186:	82 e2       	ldi	r24, 0x22	; 34
    9188:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    918c:	88 e0       	ldi	r24, 0x08	; 8
    918e:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    9192:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <usb_configuration>
		cdc_line_rtsdtr = 0;
    9196:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    919a:	92 ff       	sbrs	r25, 2
    919c:	1d c0       	rjmp	.+58     	; 0x91d8 <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    919e:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    91a2:	88 23       	and	r24, r24
    91a4:	c9 f0       	breq	.+50     	; 0x91d8 <__vector_10+0x92>
			t = transmit_flush_timer;
    91a6:	80 91 e6 10 	lds	r24, 0x10E6	; 0x8010e6 <transmit_flush_timer>
			if (t) {
    91aa:	88 23       	and	r24, r24
    91ac:	59 f0       	breq	.+22     	; 0x91c4 <__vector_10+0x7e>
				transmit_flush_timer = --t;
    91ae:	81 50       	subi	r24, 0x01	; 1
    91b0:	80 93 e6 10 	sts	0x10E6, r24	; 0x8010e6 <transmit_flush_timer>
				if (!t) {
    91b4:	81 11       	cpse	r24, r1
    91b6:	06 c0       	rjmp	.+12     	; 0x91c4 <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    91b8:	84 e0       	ldi	r24, 0x04	; 4
    91ba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    91be:	8a e3       	ldi	r24, 0x3A	; 58
    91c0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    91c4:	80 91 e5 10 	lds	r24, 0x10E5	; 0x8010e5 <reboot_timer>
			if (t) {
    91c8:	88 23       	and	r24, r24
    91ca:	31 f0       	breq	.+12     	; 0x91d8 <__vector_10+0x92>
				reboot_timer = --t;
    91cc:	81 50       	subi	r24, 0x01	; 1
    91ce:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    91d2:	81 11       	cpse	r24, r1
    91d4:	01 c0       	rjmp	.+2      	; 0x91d8 <__vector_10+0x92>
    91d6:	f0 de       	rcall	.-544    	; 0x8fb8 <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    91d8:	90 ff       	sbrs	r25, 0
    91da:	0c c0       	rjmp	.+24     	; 0x91f4 <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    91dc:	80 e1       	ldi	r24, 0x10	; 16
    91de:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    91e2:	10 92 6a 11 	sts	0x116A, r1	; 0x80116a <usb_configuration>
		usb_suspended = 1;
    91e6:	81 e0       	ldi	r24, 0x01	; 1
    91e8:	80 93 69 11 	sts	0x1169, r24	; 0x801169 <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    91ec:	80 ea       	ldi	r24, 0xA0	; 160
    91ee:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    91f2:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    91f4:	80 91 69 11 	lds	r24, 0x1169	; 0x801169 <usb_suspended>
    91f8:	88 23       	and	r24, r24
    91fa:	79 f0       	breq	.+30     	; 0x921a <__vector_10+0xd4>
    91fc:	94 ff       	sbrs	r25, 4
    91fe:	0d c0       	rjmp	.+26     	; 0x921a <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    9200:	86 e1       	ldi	r24, 0x16	; 22
    9202:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    9204:	09 b4       	in	r0, 0x29	; 41
    9206:	00 fe       	sbrs	r0, 0
    9208:	fd cf       	rjmp	.-6      	; 0x9204 <__vector_10+0xbe>
		USB_CONFIG();
    920a:	80 e9       	ldi	r24, 0x90	; 144
    920c:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    9210:	8d e0       	ldi	r24, 0x0D	; 13
    9212:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    9216:	10 92 69 11 	sts	0x1169, r1	; 0x801169 <usb_suspended>
		return;
	}
}
    921a:	ff 91       	pop	r31
    921c:	ef 91       	pop	r30
    921e:	bf 91       	pop	r27
    9220:	af 91       	pop	r26
    9222:	9f 91       	pop	r25
    9224:	8f 91       	pop	r24
    9226:	7f 91       	pop	r23
    9228:	6f 91       	pop	r22
    922a:	5f 91       	pop	r21
    922c:	4f 91       	pop	r20
    922e:	3f 91       	pop	r19
    9230:	2f 91       	pop	r18
    9232:	0f 90       	pop	r0
    9234:	0b be       	out	0x3b, r0	; 59
    9236:	0f 90       	pop	r0
    9238:	0f be       	out	0x3f, r0	; 63
    923a:	0f 90       	pop	r0
    923c:	1f 90       	pop	r1
    923e:	18 95       	reti

00009240 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    9240:	1f 92       	push	r1
    9242:	0f 92       	push	r0
    9244:	0f b6       	in	r0, 0x3f	; 63
    9246:	0f 92       	push	r0
    9248:	11 24       	eor	r1, r1
    924a:	0b b6       	in	r0, 0x3b	; 59
    924c:	0f 92       	push	r0
    924e:	ef 92       	push	r14
    9250:	ff 92       	push	r15
    9252:	0f 93       	push	r16
    9254:	1f 93       	push	r17
    9256:	2f 93       	push	r18
    9258:	3f 93       	push	r19
    925a:	4f 93       	push	r20
    925c:	5f 93       	push	r21
    925e:	6f 93       	push	r22
    9260:	7f 93       	push	r23
    9262:	8f 93       	push	r24
    9264:	9f 93       	push	r25
    9266:	af 93       	push	r26
    9268:	bf 93       	push	r27
    926a:	cf 93       	push	r28
    926c:	df 93       	push	r29
    926e:	ef 93       	push	r30
    9270:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    9272:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    9276:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    927a:	83 ff       	sbrs	r24, 3
    927c:	20 c0       	rjmp	.+64     	; 0x92be <__vector_11+0x7e>
		bmRequestType = UEDATX;
    927e:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    9282:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    9286:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    928a:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    928e:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    9292:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    9296:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    929a:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    929e:	82 ef       	ldi	r24, 0xF2	; 242
    92a0:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    92a4:	c6 30       	cpi	r28, 0x06	; 6
    92a6:	09 f0       	breq	.+2      	; 0x92aa <__vector_11+0x6a>
    92a8:	5b c0       	rjmp	.+182    	; 0x9360 <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    92aa:	e4 e9       	ldi	r30, 0x94	; 148
    92ac:	f7 e0       	ldi	r31, 0x07	; 7
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    92ae:	85 91       	lpm	r24, Z+
    92b0:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    92b2:	e8 16       	cp	r14, r24
    92b4:	f9 06       	cpc	r15, r25
    92b6:	39 f0       	breq	.+14     	; 0x92c6 <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    92b8:	35 96       	adiw	r30, 0x05	; 5
    92ba:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    92bc:	c1 f7       	brne	.-16     	; 0x92ae <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    92be:	81 e2       	ldi	r24, 0x21	; 33
    92c0:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    92c4:	2b c0       	rjmp	.+86     	; 0x931c <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    92c6:	85 91       	lpm	r24, Z+
    92c8:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    92ca:	08 17       	cp	r16, r24
    92cc:	19 07       	cpc	r17, r25
    92ce:	11 f0       	breq	.+4      	; 0x92d4 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    92d0:	33 96       	adiw	r30, 0x03	; 3
					continue;
    92d2:	f3 cf       	rjmp	.-26     	; 0x92ba <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    92d4:	45 91       	lpm	r20, Z+
    92d6:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    92d8:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    92da:	2f 3f       	cpi	r18, 0xFF	; 255
    92dc:	31 05       	cpc	r19, r1
    92de:	19 f0       	breq	.+6      	; 0x92e6 <__vector_11+0xa6>
    92e0:	10 f0       	brcs	.+4      	; 0x92e6 <__vector_11+0xa6>
    92e2:	2f ef       	ldi	r18, 0xFF	; 255
    92e4:	30 e0       	ldi	r19, 0x00	; 0
    92e6:	82 17       	cp	r24, r18
    92e8:	08 f4       	brcc	.+2      	; 0x92ec <__vector_11+0xac>
    92ea:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    92ec:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    92ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    92f2:	98 2f       	mov	r25, r24
    92f4:	95 70       	andi	r25, 0x05	; 5
    92f6:	d9 f3       	breq	.-10     	; 0x92ee <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    92f8:	82 fd       	sbrc	r24, 2
    92fa:	10 c0       	rjmp	.+32     	; 0x931c <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    92fc:	82 2f       	mov	r24, r18
    92fe:	21 32       	cpi	r18, 0x21	; 33
    9300:	08 f0       	brcs	.+2      	; 0x9304 <__vector_11+0xc4>
    9302:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    9304:	98 2f       	mov	r25, r24
    9306:	91 11       	cpse	r25, r1
    9308:	24 c0       	rjmp	.+72     	; 0x9352 <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    930a:	92 2f       	mov	r25, r18
    930c:	98 1b       	sub	r25, r24
    930e:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    9310:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    9314:	91 11       	cpse	r25, r1
    9316:	1b c0       	rjmp	.+54     	; 0x934e <__vector_11+0x10e>
    9318:	20 32       	cpi	r18, 0x20	; 32
    931a:	c8 f4       	brcc	.+50     	; 0x934e <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    931c:	ff 91       	pop	r31
    931e:	ef 91       	pop	r30
    9320:	df 91       	pop	r29
    9322:	cf 91       	pop	r28
    9324:	bf 91       	pop	r27
    9326:	af 91       	pop	r26
    9328:	9f 91       	pop	r25
    932a:	8f 91       	pop	r24
    932c:	7f 91       	pop	r23
    932e:	6f 91       	pop	r22
    9330:	5f 91       	pop	r21
    9332:	4f 91       	pop	r20
    9334:	3f 91       	pop	r19
    9336:	2f 91       	pop	r18
    9338:	1f 91       	pop	r17
    933a:	0f 91       	pop	r16
    933c:	ff 90       	pop	r15
    933e:	ef 90       	pop	r14
    9340:	0f 90       	pop	r0
    9342:	0b be       	out	0x3b, r0	; 59
    9344:	0f 90       	pop	r0
    9346:	0f be       	out	0x3f, r0	; 63
    9348:	0f 90       	pop	r0
    934a:	1f 90       	pop	r1
    934c:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    934e:	28 2f       	mov	r18, r24
    9350:	ce cf       	rjmp	.-100    	; 0x92ee <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    9352:	fa 01       	movw	r30, r20
    9354:	45 91       	lpm	r20, Z+
    9356:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    935a:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    935c:	91 50       	subi	r25, 0x01	; 1
    935e:	d3 cf       	rjmp	.-90     	; 0x9306 <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    9360:	c5 30       	cpi	r28, 0x05	; 5
    9362:	49 f4       	brne	.+18     	; 0x9376 <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    9364:	8e ef       	ldi	r24, 0xFE	; 254
    9366:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    936a:	c6 de       	rcall	.-628    	; 0x90f8 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    936c:	8e 2d       	mov	r24, r14
    936e:	80 68       	ori	r24, 0x80	; 128
    9370:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    9374:	d3 cf       	rjmp	.-90     	; 0x931c <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    9376:	c9 30       	cpi	r28, 0x09	; 9
    9378:	21 f5       	brne	.+72     	; 0x93c2 <__vector_11+0x182>
    937a:	d1 11       	cpse	r29, r1
    937c:	a0 cf       	rjmp	.-192    	; 0x92be <__vector_11+0x7e>
			usb_configuration = wValue;
    937e:	e0 92 6a 11 	sts	0x116A, r14	; 0x80116a <usb_configuration>
			cdc_line_rtsdtr = 0;
    9382:	10 92 68 11 	sts	0x1168, r1	; 0x801168 <__bss_end>
			transmit_flush_timer = 0;
    9386:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    938a:	8e ef       	ldi	r24, 0xFE	; 254
    938c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    9390:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    9392:	e7 e5       	ldi	r30, 0x57	; 87
    9394:	f8 e0       	ldi	r31, 0x08	; 8
			for (i=1; i<5; i++) {
				UENUM = i;
    9396:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    939a:	95 91       	lpm	r25, Z+
				UECONX = en;
    939c:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    93a0:	99 23       	and	r25, r25
    93a2:	31 f0       	breq	.+12     	; 0x93b0 <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    93a4:	95 91       	lpm	r25, Z+
    93a6:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    93aa:	95 91       	lpm	r25, Z+
    93ac:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    93b0:	8f 5f       	subi	r24, 0xFF	; 255
    93b2:	85 30       	cpi	r24, 0x05	; 5
    93b4:	81 f7       	brne	.-32     	; 0x9396 <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    93b6:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    93b8:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    93bc:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    93c0:	ad cf       	rjmp	.-166    	; 0x931c <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    93c2:	c8 30       	cpi	r28, 0x08	; 8
    93c4:	61 f4       	brne	.+24     	; 0x93de <__vector_11+0x19e>
    93c6:	d0 38       	cpi	r29, 0x80	; 128
    93c8:	09 f0       	breq	.+2      	; 0x93cc <__vector_11+0x18c>
			usb_wait_in_ready();
    93ca:	79 cf       	rjmp	.-270    	; 0x92be <__vector_11+0x7e>
    93cc:	95 de       	rcall	.-726    	; 0x90f8 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    93ce:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    93d2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    93d6:	8e ef       	ldi	r24, 0xFE	; 254
    93d8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    93dc:	9f cf       	rjmp	.-194    	; 0x931c <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    93de:	c1 32       	cpi	r28, 0x21	; 33
    93e0:	79 f4       	brne	.+30     	; 0x9400 <__vector_11+0x1c0>
    93e2:	d1 3a       	cpi	r29, 0xA1	; 161
    93e4:	09 f0       	breq	.+2      	; 0x93e8 <__vector_11+0x1a8>
			usb_wait_in_ready();
    93e6:	6b cf       	rjmp	.-298    	; 0x92be <__vector_11+0x7e>
    93e8:	87 de       	rcall	.-754    	; 0x90f8 <usb_wait_in_ready>
			p = cdc_line_coding;
    93ea:	e1 e1       	ldi	r30, 0x11	; 17
    93ec:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    93ee:	80 81       	ld	r24, Z
    93f0:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    93f4:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    93f6:	81 e0       	ldi	r24, 0x01	; 1
    93f8:	e8 31       	cpi	r30, 0x18	; 24
    93fa:	f8 07       	cpc	r31, r24
    93fc:	c1 f7       	brne	.-16     	; 0x93ee <__vector_11+0x1ae>
    93fe:	eb cf       	rjmp	.-42     	; 0x93d6 <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    9400:	c0 32       	cpi	r28, 0x20	; 32
    9402:	09 f0       	breq	.+2      	; 0x9406 <__vector_11+0x1c6>
    9404:	47 c0       	rjmp	.+142    	; 0x9494 <__vector_11+0x254>
    9406:	d1 32       	cpi	r29, 0x21	; 33
    9408:	09 f0       	breq	.+2      	; 0x940c <__vector_11+0x1cc>
    940a:	59 cf       	rjmp	.-334    	; 0x92be <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    940c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9410:	82 ff       	sbrs	r24, 2
    9412:	fc cf       	rjmp	.-8      	; 0x940c <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    9414:	e1 e1       	ldi	r30, 0x11	; 17
    9416:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    9418:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    941c:	80 83       	st	Z, r24
    941e:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    9420:	91 e0       	ldi	r25, 0x01	; 1
    9422:	e8 31       	cpi	r30, 0x18	; 24
    9424:	f9 07       	cpc	r31, r25
    9426:	c1 f7       	brne	.-16     	; 0x9418 <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    9428:	8b ef       	ldi	r24, 0xFB	; 251
    942a:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    942e:	8e ef       	ldi	r24, 0xFE	; 254
    9430:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    9434:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    9438:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    943c:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    9440:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    9444:	90 e0       	ldi	r25, 0x00	; 0
    9446:	b0 e0       	ldi	r27, 0x00	; 0
    9448:	a0 e0       	ldi	r26, 0x00	; 0
    944a:	dc 01       	movw	r26, r24
    944c:	99 27       	eor	r25, r25
    944e:	88 27       	eor	r24, r24
    9450:	94 2b       	or	r25, r20
    9452:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    9454:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    9456:	86 38       	cpi	r24, 0x86	; 134
    9458:	91 05       	cpc	r25, r1
    945a:	a1 05       	cpc	r26, r1
    945c:	b1 05       	cpc	r27, r1
    945e:	21 f4       	brne	.+8      	; 0x9468 <__vector_11+0x228>
    9460:	8f e0       	ldi	r24, 0x0F	; 15
    9462:	80 93 e5 10 	sts	0x10E5, r24	; 0x8010e5 <reboot_timer>
    9466:	5a cf       	rjmp	.-332    	; 0x931c <__vector_11+0xdc>
			if (baud == 150UL) {
    9468:	86 39       	cpi	r24, 0x96	; 150
    946a:	91 05       	cpc	r25, r1
    946c:	a1 05       	cpc	r26, r1
    946e:	b1 05       	cpc	r27, r1
    9470:	09 f0       	breq	.+2      	; 0x9474 <__vector_11+0x234>
    9472:	54 cf       	rjmp	.-344    	; 0x931c <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    9474:	84 e0       	ldi	r24, 0x04	; 4
    9476:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    947a:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    947c:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    9480:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    9482:	09 f4       	brne	.+2      	; 0x9486 <__vector_11+0x246>
    9484:	b6 dd       	rcall	.-1172   	; 0x8ff2 <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    9486:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    948a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    948e:	82 fd       	sbrc	r24, 2
    9490:	fc cf       	rjmp	.-8      	; 0x948a <__vector_11+0x24a>
    9492:	f4 cf       	rjmp	.-24     	; 0x947c <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    9494:	c2 32       	cpi	r28, 0x22	; 34
    9496:	39 f4       	brne	.+14     	; 0x94a6 <__vector_11+0x266>
    9498:	d1 32       	cpi	r29, 0x21	; 33
    949a:	09 f0       	breq	.+2      	; 0x949e <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    949c:	10 cf       	rjmp	.-480    	; 0x92be <__vector_11+0x7e>
    949e:	e0 92 68 11 	sts	0x1168, r14	; 0x801168 <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    94a2:	2a de       	rcall	.-940    	; 0x90f8 <usb_wait_in_ready>
    94a4:	98 cf       	rjmp	.-208    	; 0x93d6 <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    94a6:	c3 32       	cpi	r28, 0x23	; 35
    94a8:	21 f4       	brne	.+8      	; 0x94b2 <__vector_11+0x272>
    94aa:	d1 32       	cpi	r29, 0x21	; 33
    94ac:	09 f0       	breq	.+2      	; 0x94b0 <__vector_11+0x270>
    94ae:	07 cf       	rjmp	.-498    	; 0x92be <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    94b0:	f8 cf       	rjmp	.-16     	; 0x94a2 <__vector_11+0x262>
    94b2:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    94b4:	11 c0       	rjmp	.+34     	; 0x94d8 <__vector_11+0x298>
    94b6:	20 de       	rcall	.-960    	; 0x90f8 <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    94b8:	d2 38       	cpi	r29, 0x82	; 130
    94ba:	49 f4       	brne	.+18     	; 0x94ce <__vector_11+0x28e>
				UENUM = wIndex;
    94bc:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    94c0:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    94c4:	c5 fb       	bst	r28, 5
    94c6:	cc 27       	eor	r28, r28
    94c8:	c0 f9       	bld	r28, 0
				UENUM = 0;
    94ca:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    94ce:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    94d2:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    94d6:	7f cf       	rjmp	.-258    	; 0x93d6 <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    94d8:	8c 2f       	mov	r24, r28
    94da:	8d 7f       	andi	r24, 0xFD	; 253
    94dc:	81 30       	cpi	r24, 0x01	; 1
    94de:	09 f0       	breq	.+2      	; 0x94e2 <__vector_11+0x2a2>
    94e0:	ee ce       	rjmp	.-548    	; 0x92be <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    94e2:	d2 30       	cpi	r29, 0x02	; 2
    94e4:	09 f0       	breq	.+2      	; 0x94e8 <__vector_11+0x2a8>
    94e6:	eb ce       	rjmp	.-554    	; 0x92be <__vector_11+0x7e>
    94e8:	ef 28       	or	r14, r15
    94ea:	09 f0       	breq	.+2      	; 0x94ee <__vector_11+0x2ae>
    94ec:	e8 ce       	rjmp	.-560    	; 0x92be <__vector_11+0x7e>
			i = wIndex & 0x7F;
    94ee:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    94f0:	8f ef       	ldi	r24, 0xFF	; 255
    94f2:	80 0f       	add	r24, r16
    94f4:	86 30       	cpi	r24, 0x06	; 6
    94f6:	08 f0       	brcs	.+2      	; 0x94fa <__vector_11+0x2ba>
    94f8:	e2 ce       	rjmp	.-572    	; 0x92be <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    94fa:	8e ef       	ldi	r24, 0xFE	; 254
    94fc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    9500:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    9504:	c3 30       	cpi	r28, 0x03	; 3
    9506:	09 f4       	brne	.+2      	; 0x950a <__vector_11+0x2ca>
    9508:	da ce       	rjmp	.-588    	; 0x92be <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    950a:	89 e1       	ldi	r24, 0x19	; 25
    950c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    9510:	81 e0       	ldi	r24, 0x01	; 1
    9512:	90 e0       	ldi	r25, 0x00	; 0
    9514:	01 c0       	rjmp	.+2      	; 0x9518 <__vector_11+0x2d8>
    9516:	88 0f       	add	r24, r24
    9518:	0a 95       	dec	r16
    951a:	ea f7       	brpl	.-6      	; 0x9516 <__vector_11+0x2d6>
    951c:	4d cf       	rjmp	.-358    	; 0x93b8 <__vector_11+0x178>

0000951e <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    951e:	50 91 1b 11 	lds	r21, 0x111B	; 0x80111b <rx_buffer_head>
    9522:	40 91 1a 11 	lds	r20, 0x111A	; 0x80111a <rx_buffer_tail>
    9526:	85 2f       	mov	r24, r21
    9528:	90 e0       	ldi	r25, 0x00	; 0
    952a:	24 2f       	mov	r18, r20
    952c:	30 e0       	ldi	r19, 0x00	; 0
    952e:	54 17       	cp	r21, r20
    9530:	18 f0       	brcs	.+6      	; 0x9538 <HardwareSerial::available()+0x1a>
    9532:	82 1b       	sub	r24, r18
    9534:	93 0b       	sbc	r25, r19
    9536:	08 95       	ret
    9538:	80 5c       	subi	r24, 0xC0	; 192
    953a:	9f 4f       	sbci	r25, 0xFF	; 255
    953c:	fa cf       	rjmp	.-12     	; 0x9532 <HardwareSerial::available()+0x14>

0000953e <HardwareSerial::availableForWrite()>:
    953e:	50 91 1b 11 	lds	r21, 0x111B	; 0x80111b <rx_buffer_head>
    9542:	40 91 1a 11 	lds	r20, 0x111A	; 0x80111a <rx_buffer_tail>
    9546:	25 2f       	mov	r18, r21
    9548:	30 e0       	ldi	r19, 0x00	; 0
    954a:	84 2f       	mov	r24, r20
    954c:	90 e0       	ldi	r25, 0x00	; 0
    954e:	82 1b       	sub	r24, r18
    9550:	93 0b       	sbc	r25, r19
    9552:	54 17       	cp	r21, r20
    9554:	10 f0       	brcs	.+4      	; 0x955a <HardwareSerial::availableForWrite()+0x1c>
    9556:	87 96       	adiw	r24, 0x27	; 39
    9558:	08 95       	ret
    955a:	01 97       	sbiw	r24, 0x01	; 1
    955c:	08 95       	ret

0000955e <HardwareSerial::peek()>:
    955e:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <rx_buffer_head>
    9562:	e0 91 1a 11 	lds	r30, 0x111A	; 0x80111a <rx_buffer_tail>
    9566:	8e 17       	cp	r24, r30
    9568:	51 f0       	breq	.+20     	; 0x957e <HardwareSerial::peek()+0x20>
    956a:	ef 5f       	subi	r30, 0xFF	; 255
    956c:	e0 34       	cpi	r30, 0x40	; 64
    956e:	08 f0       	brcs	.+2      	; 0x9572 <HardwareSerial::peek()+0x14>
    9570:	e0 e0       	ldi	r30, 0x00	; 0
    9572:	f0 e0       	ldi	r31, 0x00	; 0
    9574:	e4 5e       	subi	r30, 0xE4	; 228
    9576:	fe 4e       	sbci	r31, 0xEE	; 238
    9578:	80 81       	ld	r24, Z
    957a:	90 e0       	ldi	r25, 0x00	; 0
    957c:	08 95       	ret
    957e:	8f ef       	ldi	r24, 0xFF	; 255
    9580:	9f ef       	ldi	r25, 0xFF	; 255
    9582:	08 95       	ret

00009584 <HardwareSerial::read()>:
    9584:	90 91 1b 11 	lds	r25, 0x111B	; 0x80111b <rx_buffer_head>
    9588:	80 91 1a 11 	lds	r24, 0x111A	; 0x80111a <rx_buffer_tail>
    958c:	98 17       	cp	r25, r24
    958e:	79 f0       	breq	.+30     	; 0x95ae <HardwareSerial::read()+0x2a>
    9590:	90 91 1a 11 	lds	r25, 0x111A	; 0x80111a <rx_buffer_tail>
    9594:	9f 5f       	subi	r25, 0xFF	; 255
    9596:	90 34       	cpi	r25, 0x40	; 64
    9598:	08 f0       	brcs	.+2      	; 0x959c <HardwareSerial::read()+0x18>
    959a:	90 e0       	ldi	r25, 0x00	; 0
    959c:	e9 2f       	mov	r30, r25
    959e:	f0 e0       	ldi	r31, 0x00	; 0
    95a0:	e4 5e       	subi	r30, 0xE4	; 228
    95a2:	fe 4e       	sbci	r31, 0xEE	; 238
    95a4:	80 81       	ld	r24, Z
    95a6:	90 93 1a 11 	sts	0x111A, r25	; 0x80111a <rx_buffer_tail>
    95aa:	90 e0       	ldi	r25, 0x00	; 0
    95ac:	08 95       	ret
    95ae:	8f ef       	ldi	r24, 0xFF	; 255
    95b0:	9f ef       	ldi	r25, 0xFF	; 255
    95b2:	08 95       	ret

000095b4 <HardwareSerial::flush()>:
    95b4:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <transmitting>
    95b8:	81 11       	cpse	r24, r1
    95ba:	fc cf       	rjmp	.-8      	; 0x95b4 <HardwareSerial::flush()>
    95bc:	08 95       	ret

000095be <HardwareSerial::write(unsigned char)>:
    95be:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    95c2:	23 fd       	sbrc	r18, 3
    95c4:	06 c0       	rjmp	.+12     	; 0x95d2 <HardwareSerial::write(unsigned char)+0x14>
    95c6:	21 e0       	ldi	r18, 0x01	; 1
    95c8:	fc 01       	movw	r30, r24
    95ca:	22 83       	std	Z+2, r18	; 0x02
    95cc:	90 e0       	ldi	r25, 0x00	; 0
    95ce:	80 e0       	ldi	r24, 0x00	; 0
    95d0:	08 95       	ret
    95d2:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    95d6:	8f 3f       	cpi	r24, 0xFF	; 255
    95d8:	41 f0       	breq	.+16     	; 0x95ea <HardwareSerial::write(unsigned char)+0x2c>
    95da:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <transmitting>
    95de:	81 11       	cpse	r24, r1
    95e0:	04 c0       	rjmp	.+8      	; 0x95ea <HardwareSerial::write(unsigned char)+0x2c>
    95e2:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    95e6:	f0 e0       	ldi	r31, 0x00	; 0
    95e8:	ee db       	rcall	.-2084   	; 0x8dc6 <_digitalWrite_HIGH>
    95ea:	90 91 f1 10 	lds	r25, 0x10F1	; 0x8010f1 <tx_buffer_head>
    95ee:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    95f2:	98 13       	cpse	r25, r24
    95f4:	04 c0       	rjmp	.+8      	; 0x95fe <HardwareSerial::write(unsigned char)+0x40>
    95f6:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    95fa:	85 fd       	sbrc	r24, 5
    95fc:	19 c0       	rjmp	.+50     	; 0x9630 <HardwareSerial::write(unsigned char)+0x72>
    95fe:	80 91 f1 10 	lds	r24, 0x10F1	; 0x8010f1 <tx_buffer_head>
    9602:	8f 5f       	subi	r24, 0xFF	; 255
    9604:	88 32       	cpi	r24, 0x28	; 40
    9606:	f8 f4       	brcc	.+62     	; 0x9646 <HardwareSerial::write(unsigned char)+0x88>
    9608:	90 91 f0 10 	lds	r25, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    960c:	98 17       	cp	r25, r24
    960e:	e1 f3       	breq	.-8      	; 0x9608 <HardwareSerial::write(unsigned char)+0x4a>
    9610:	e8 2f       	mov	r30, r24
    9612:	f0 e0       	ldi	r31, 0x00	; 0
    9614:	ee 50       	subi	r30, 0x0E	; 14
    9616:	ff 4e       	sbci	r31, 0xEF	; 239
    9618:	60 83       	st	Z, r22
    961a:	91 e0       	ldi	r25, 0x01	; 1
    961c:	90 93 ef 10 	sts	0x10EF, r25	; 0x8010ef <transmitting>
    9620:	80 93 f1 10 	sts	0x10F1, r24	; 0x8010f1 <tx_buffer_head>
    9624:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    9628:	80 62       	ori	r24, 0x20	; 32
    962a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    962e:	08 c0       	rjmp	.+16     	; 0x9640 <HardwareSerial::write(unsigned char)+0x82>
    9630:	8f b7       	in	r24, 0x3f	; 63
    9632:	f8 94       	cli
    9634:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    9638:	91 e0       	ldi	r25, 0x01	; 1
    963a:	90 93 ef 10 	sts	0x10EF, r25	; 0x8010ef <transmitting>
    963e:	8f bf       	out	0x3f, r24	; 63
    9640:	81 e0       	ldi	r24, 0x01	; 1
    9642:	90 e0       	ldi	r25, 0x00	; 0
    9644:	08 95       	ret
    9646:	80 e0       	ldi	r24, 0x00	; 0
    9648:	df cf       	rjmp	.-66     	; 0x9608 <HardwareSerial::write(unsigned char)+0x4a>

0000964a <HardwareSerial::_begin(unsigned int, unsigned char)>:
    964a:	1f 93       	push	r17
    964c:	cf 93       	push	r28
    964e:	df 93       	push	r29
    9650:	eb 01       	movw	r28, r22
    9652:	14 2f       	mov	r17, r20
    9654:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    9658:	4f 3f       	cpi	r20, 0xFF	; 255
    965a:	29 f0       	breq	.+10     	; 0x9666 <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    965c:	84 2f       	mov	r24, r20
    965e:	a2 db       	rcall	.-2236   	; 0x8da4 <_pinMode_output>
    9660:	e1 2f       	mov	r30, r17
    9662:	f0 e0       	ldi	r31, 0x00	; 0
    9664:	b6 db       	rcall	.-2196   	; 0x8dd2 <_digitalWrite_LOW>
    9666:	c0 ff       	sbrs	r28, 0
    9668:	24 c0       	rjmp	.+72     	; 0x96b2 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    966a:	c1 30       	cpi	r28, 0x01	; 1
    966c:	80 e1       	ldi	r24, 0x10	; 16
    966e:	d8 07       	cpc	r29, r24
    9670:	00 f5       	brcc	.+64     	; 0x96b2 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    9672:	82 e0       	ldi	r24, 0x02	; 2
    9674:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    9678:	21 97       	sbiw	r28, 0x01	; 1
    967a:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    967e:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    9682:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    9686:	83 fd       	sbrc	r24, 3
    9688:	10 c0       	rjmp	.+32     	; 0x96aa <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    968a:	10 92 1b 11 	sts	0x111B, r1	; 0x80111b <rx_buffer_head>
    968e:	10 92 1a 11 	sts	0x111A, r1	; 0x80111a <rx_buffer_tail>
    9692:	10 92 f1 10 	sts	0x10F1, r1	; 0x8010f1 <tx_buffer_head>
    9696:	10 92 f0 10 	sts	0x10F0, r1	; 0x8010f0 <tx_buffer_tail>
    969a:	10 92 ef 10 	sts	0x10EF, r1	; 0x8010ef <transmitting>
    969e:	86 e0       	ldi	r24, 0x06	; 6
    96a0:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    96a4:	88 ed       	ldi	r24, 0xD8	; 216
    96a6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    96aa:	df 91       	pop	r29
    96ac:	cf 91       	pop	r28
    96ae:	1f 91       	pop	r17
    96b0:	08 95       	ret
    96b2:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    96b6:	d6 95       	lsr	r29
    96b8:	c7 95       	ror	r28
    96ba:	de cf       	rjmp	.-68     	; 0x9678 <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

000096bc <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    96bc:	1f 92       	push	r1
    96be:	0f 92       	push	r0
    96c0:	0f b6       	in	r0, 0x3f	; 63
    96c2:	0f 92       	push	r0
    96c4:	11 24       	eor	r1, r1
    96c6:	0b b6       	in	r0, 0x3b	; 59
    96c8:	0f 92       	push	r0
    96ca:	2f 93       	push	r18
    96cc:	8f 93       	push	r24
    96ce:	9f 93       	push	r25
    96d0:	ef 93       	push	r30
    96d2:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    96d4:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    96d8:	80 91 1b 11 	lds	r24, 0x111B	; 0x80111b <rx_buffer_head>
    96dc:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    96de:	80 34       	cpi	r24, 0x40	; 64
    96e0:	08 f0       	brcs	.+2      	; 0x96e4 <__vector_25+0x28>
    96e2:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    96e4:	20 91 1a 11 	lds	r18, 0x111A	; 0x80111a <rx_buffer_tail>
    96e8:	28 17       	cp	r18, r24
    96ea:	39 f0       	breq	.+14     	; 0x96fa <__vector_25+0x3e>
		rx_buffer[i] = c;
    96ec:	e8 2f       	mov	r30, r24
    96ee:	f0 e0       	ldi	r31, 0x00	; 0
    96f0:	e4 5e       	subi	r30, 0xE4	; 228
    96f2:	fe 4e       	sbci	r31, 0xEE	; 238
    96f4:	90 83       	st	Z, r25
		rx_buffer_head = i;
    96f6:	80 93 1b 11 	sts	0x111B, r24	; 0x80111b <rx_buffer_head>
	}
}
    96fa:	ff 91       	pop	r31
    96fc:	ef 91       	pop	r30
    96fe:	9f 91       	pop	r25
    9700:	8f 91       	pop	r24
    9702:	2f 91       	pop	r18
    9704:	0f 90       	pop	r0
    9706:	0b be       	out	0x3b, r0	; 59
    9708:	0f 90       	pop	r0
    970a:	0f be       	out	0x3f, r0	; 63
    970c:	0f 90       	pop	r0
    970e:	1f 90       	pop	r1
    9710:	18 95       	reti

00009712 <__vector_26>:

ISR(USART1_UDRE_vect)
{
    9712:	1f 92       	push	r1
    9714:	0f 92       	push	r0
    9716:	0f b6       	in	r0, 0x3f	; 63
    9718:	0f 92       	push	r0
    971a:	11 24       	eor	r1, r1
    971c:	0b b6       	in	r0, 0x3b	; 59
    971e:	0f 92       	push	r0
    9720:	8f 93       	push	r24
    9722:	9f 93       	push	r25
    9724:	ef 93       	push	r30
    9726:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    9728:	90 91 f1 10 	lds	r25, 0x10F1	; 0x8010f1 <tx_buffer_head>
    972c:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    9730:	98 13       	cpse	r25, r24
    9732:	10 c0       	rjmp	.+32     	; 0x9754 <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    9734:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    9738:	8f 7d       	andi	r24, 0xDF	; 223
    973a:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    973e:	ff 91       	pop	r31
    9740:	ef 91       	pop	r30
    9742:	9f 91       	pop	r25
    9744:	8f 91       	pop	r24
    9746:	0f 90       	pop	r0
    9748:	0b be       	out	0x3b, r0	; 59
    974a:	0f 90       	pop	r0
    974c:	0f be       	out	0x3f, r0	; 63
    974e:	0f 90       	pop	r0
    9750:	1f 90       	pop	r1
    9752:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    9754:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <tx_buffer_tail>
    9758:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    975a:	88 32       	cpi	r24, 0x28	; 40
    975c:	08 f0       	brcs	.+2      	; 0x9760 <__vector_26+0x4e>
    975e:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    9760:	e8 2f       	mov	r30, r24
    9762:	f0 e0       	ldi	r31, 0x00	; 0
    9764:	ee 50       	subi	r30, 0x0E	; 14
    9766:	ff 4e       	sbci	r31, 0xEF	; 239
    9768:	90 81       	ld	r25, Z
    976a:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    976e:	80 93 f0 10 	sts	0x10F0, r24	; 0x8010f0 <tx_buffer_tail>
	}
}
    9772:	e5 cf       	rjmp	.-54     	; 0x973e <__vector_26+0x2c>

00009774 <__vector_27>:

ISR(USART1_TX_vect)
{
    9774:	1f 92       	push	r1
    9776:	0f 92       	push	r0
    9778:	0f b6       	in	r0, 0x3f	; 63
    977a:	0f 92       	push	r0
    977c:	11 24       	eor	r1, r1
    977e:	0b b6       	in	r0, 0x3b	; 59
    9780:	0f 92       	push	r0
    9782:	8f 93       	push	r24
    9784:	ef 93       	push	r30
    9786:	ff 93       	push	r31
	transmitting = 0;
    9788:	10 92 ef 10 	sts	0x10EF, r1	; 0x8010ef <transmitting>
	if (tx_enable_pin < 255) {
    978c:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    9790:	8f 3f       	cpi	r24, 0xFF	; 255
    9792:	21 f0       	breq	.+8      	; 0x979c <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    9794:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    9798:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    979a:	1b db       	rcall	.-2506   	; 0x8dd2 <_digitalWrite_LOW>
	}
}
    979c:	ff 91       	pop	r31
    979e:	ef 91       	pop	r30
    97a0:	8f 91       	pop	r24
    97a2:	0f 90       	pop	r0
    97a4:	0b be       	out	0x3b, r0	; 59
    97a6:	0f 90       	pop	r0
    97a8:	0f be       	out	0x3f, r0	; 63
    97aa:	0f 90       	pop	r0
    97ac:	1f 90       	pop	r1
    97ae:	18 95       	reti

000097b0 <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    97b0:	e7 ee       	ldi	r30, 0xE7	; 231
    97b2:	f0 e1       	ldi	r31, 0x10	; 16
    97b4:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    97b6:	88 ee       	ldi	r24, 0xE8	; 232
    97b8:	93 e0       	ldi	r25, 0x03	; 3
    97ba:	a0 e0       	ldi	r26, 0x00	; 0
    97bc:	b0 e0       	ldi	r27, 0x00	; 0
    97be:	83 83       	std	Z+3, r24	; 0x03
    97c0:	94 83       	std	Z+4, r25	; 0x04
    97c2:	a5 83       	std	Z+5, r26	; 0x05
    97c4:	b6 83       	std	Z+6, r27	; 0x06
    97c6:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    97c8:	82 ec       	ldi	r24, 0xC2	; 194
    97ca:	99 e0       	ldi	r25, 0x09	; 9
    97cc:	91 83       	std	Z+1, r25	; 0x01
    97ce:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    97d0:	08 95       	ret

000097d2 <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    97d2:	9a da       	rcall	.-2764   	; 0x8d08 <_init_Teensyduino_internal_>

	setup();
    97d4:	0e 94 9c 1c 	call	0x3938	; 0x3938 <setup>
    
	while (1) {
		loop();
    97d8:	0e 94 50 35 	call	0x6aa0	; 0x6aa0 <loop>
    97dc:	fd cf       	rjmp	.-6      	; 0x97d8 <main+0x6>

000097de <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    97de:	73 c8       	rjmp	.-3866   	; 0x88c6 <malloc>

000097e0 <__cxa_guard_acquire>:
    97e0:	fc 01       	movw	r30, r24
    97e2:	81 e0       	ldi	r24, 0x01	; 1
    97e4:	90 e0       	ldi	r25, 0x00	; 0
    97e6:	20 81       	ld	r18, Z
    97e8:	22 23       	and	r18, r18
    97ea:	11 f0       	breq	.+4      	; 0x97f0 <__cxa_guard_acquire+0x10>
    97ec:	90 e0       	ldi	r25, 0x00	; 0
    97ee:	80 e0       	ldi	r24, 0x00	; 0
    97f0:	08 95       	ret

000097f2 <__cxa_guard_release>:
    97f2:	21 e0       	ldi	r18, 0x01	; 1
    97f4:	fc 01       	movw	r30, r24
    97f6:	20 83       	st	Z, r18
    97f8:	08 95       	ret

000097fa <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    97fa:	08 95       	ret

000097fc <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    97fc:	cf 92       	push	r12
    97fe:	df 92       	push	r13
    9800:	ef 92       	push	r14
    9802:	ff 92       	push	r15
    9804:	0f 93       	push	r16
    9806:	1f 93       	push	r17
    9808:	cf 93       	push	r28
    980a:	df 93       	push	r29
    980c:	6c 01       	movw	r12, r24
    980e:	eb 01       	movw	r28, r22
    9810:	7b 01       	movw	r14, r22
    9812:	e4 0e       	add	r14, r20
    9814:	f5 1e       	adc	r15, r21
    9816:	10 e0       	ldi	r17, 0x00	; 0
    9818:	00 e0       	ldi	r16, 0x00	; 0
    981a:	ce 15       	cp	r28, r14
    981c:	df 05       	cpc	r29, r15
    981e:	61 f0       	breq	.+24     	; 0x9838 <Print::write(unsigned char const*, unsigned int)+0x3c>
    9820:	69 91       	ld	r22, Y+
    9822:	d6 01       	movw	r26, r12
    9824:	ed 91       	ld	r30, X+
    9826:	fc 91       	ld	r31, X
    9828:	01 90       	ld	r0, Z+
    982a:	f0 81       	ld	r31, Z
    982c:	e0 2d       	mov	r30, r0
    982e:	c6 01       	movw	r24, r12
    9830:	09 95       	icall
    9832:	08 0f       	add	r16, r24
    9834:	19 1f       	adc	r17, r25
    9836:	f1 cf       	rjmp	.-30     	; 0x981a <Print::write(unsigned char const*, unsigned int)+0x1e>
    9838:	c8 01       	movw	r24, r16
    983a:	df 91       	pop	r29
    983c:	cf 91       	pop	r28
    983e:	1f 91       	pop	r17
    9840:	0f 91       	pop	r16
    9842:	ff 90       	pop	r15
    9844:	ef 90       	pop	r14
    9846:	df 90       	pop	r13
    9848:	cf 90       	pop	r12
    984a:	08 95       	ret

0000984c <Print::print(String const&)>:
    984c:	8f 92       	push	r8
    984e:	9f 92       	push	r9
    9850:	af 92       	push	r10
    9852:	bf 92       	push	r11
    9854:	cf 92       	push	r12
    9856:	df 92       	push	r13
    9858:	ef 92       	push	r14
    985a:	ff 92       	push	r15
    985c:	0f 93       	push	r16
    985e:	1f 93       	push	r17
    9860:	cf 93       	push	r28
    9862:	df 93       	push	r29
    9864:	cd b7       	in	r28, 0x3d	; 61
    9866:	de b7       	in	r29, 0x3e	; 62
    9868:	a1 97       	sbiw	r28, 0x21	; 33
    986a:	0f b6       	in	r0, 0x3f	; 63
    986c:	f8 94       	cli
    986e:	de bf       	out	0x3e, r29	; 62
    9870:	0f be       	out	0x3f, r0	; 63
    9872:	cd bf       	out	0x3d, r28	; 61
    9874:	5c 01       	movw	r10, r24
    9876:	4b 01       	movw	r8, r22
    9878:	db 01       	movw	r26, r22
    987a:	14 96       	adiw	r26, 0x04	; 4
    987c:	0d 91       	ld	r16, X+
    987e:	1c 91       	ld	r17, X
    9880:	d1 2c       	mov	r13, r1
    9882:	c1 2c       	mov	r12, r1
    9884:	f1 2c       	mov	r15, r1
    9886:	e1 2c       	mov	r14, r1
    9888:	01 15       	cp	r16, r1
    988a:	11 05       	cpc	r17, r1
    988c:	01 f1       	breq	.+64     	; 0x98ce <Print::print(String const&)+0x82>
    988e:	96 01       	movw	r18, r12
    9890:	41 e2       	ldi	r20, 0x21	; 33
    9892:	50 e0       	ldi	r21, 0x00	; 0
    9894:	be 01       	movw	r22, r28
    9896:	6f 5f       	subi	r22, 0xFF	; 255
    9898:	7f 4f       	sbci	r23, 0xFF	; 255
    989a:	c4 01       	movw	r24, r8
    989c:	53 d3       	rcall	.+1702   	; 0x9f44 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    989e:	a8 01       	movw	r20, r16
    98a0:	01 32       	cpi	r16, 0x21	; 33
    98a2:	11 05       	cpc	r17, r1
    98a4:	10 f0       	brcs	.+4      	; 0x98aa <Print::print(String const&)+0x5e>
    98a6:	40 e2       	ldi	r20, 0x20	; 32
    98a8:	50 e0       	ldi	r21, 0x00	; 0
    98aa:	c4 0e       	add	r12, r20
    98ac:	d5 1e       	adc	r13, r21
    98ae:	04 1b       	sub	r16, r20
    98b0:	15 0b       	sbc	r17, r21
    98b2:	d5 01       	movw	r26, r10
    98b4:	ed 91       	ld	r30, X+
    98b6:	fc 91       	ld	r31, X
    98b8:	02 80       	ldd	r0, Z+2	; 0x02
    98ba:	f3 81       	ldd	r31, Z+3	; 0x03
    98bc:	e0 2d       	mov	r30, r0
    98be:	be 01       	movw	r22, r28
    98c0:	6f 5f       	subi	r22, 0xFF	; 255
    98c2:	7f 4f       	sbci	r23, 0xFF	; 255
    98c4:	c5 01       	movw	r24, r10
    98c6:	09 95       	icall
    98c8:	e8 0e       	add	r14, r24
    98ca:	f9 1e       	adc	r15, r25
    98cc:	dd cf       	rjmp	.-70     	; 0x9888 <Print::print(String const&)+0x3c>
    98ce:	c7 01       	movw	r24, r14
    98d0:	a1 96       	adiw	r28, 0x21	; 33
    98d2:	0f b6       	in	r0, 0x3f	; 63
    98d4:	f8 94       	cli
    98d6:	de bf       	out	0x3e, r29	; 62
    98d8:	0f be       	out	0x3f, r0	; 63
    98da:	cd bf       	out	0x3d, r28	; 61
    98dc:	df 91       	pop	r29
    98de:	cf 91       	pop	r28
    98e0:	1f 91       	pop	r17
    98e2:	0f 91       	pop	r16
    98e4:	ff 90       	pop	r15
    98e6:	ef 90       	pop	r14
    98e8:	df 90       	pop	r13
    98ea:	cf 90       	pop	r12
    98ec:	bf 90       	pop	r11
    98ee:	af 90       	pop	r10
    98f0:	9f 90       	pop	r9
    98f2:	8f 90       	pop	r8
    98f4:	08 95       	ret

000098f6 <Print::println()>:
    98f6:	cf 93       	push	r28
    98f8:	df 93       	push	r29
    98fa:	00 d0       	rcall	.+0      	; 0x98fc <Print::println()+0x6>
    98fc:	cd b7       	in	r28, 0x3d	; 61
    98fe:	de b7       	in	r29, 0x3e	; 62
    9900:	2d e0       	ldi	r18, 0x0D	; 13
    9902:	29 83       	std	Y+1, r18	; 0x01
    9904:	2a e0       	ldi	r18, 0x0A	; 10
    9906:	2a 83       	std	Y+2, r18	; 0x02
    9908:	dc 01       	movw	r26, r24
    990a:	ed 91       	ld	r30, X+
    990c:	fc 91       	ld	r31, X
    990e:	02 80       	ldd	r0, Z+2	; 0x02
    9910:	f3 81       	ldd	r31, Z+3	; 0x03
    9912:	e0 2d       	mov	r30, r0
    9914:	42 e0       	ldi	r20, 0x02	; 2
    9916:	50 e0       	ldi	r21, 0x00	; 0
    9918:	be 01       	movw	r22, r28
    991a:	6f 5f       	subi	r22, 0xFF	; 255
    991c:	7f 4f       	sbci	r23, 0xFF	; 255
    991e:	09 95       	icall
    9920:	0f 90       	pop	r0
    9922:	0f 90       	pop	r0
    9924:	df 91       	pop	r29
    9926:	cf 91       	pop	r28
    9928:	08 95       	ret

0000992a <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    992a:	cf 93       	push	r28
    992c:	df 93       	push	r29
    992e:	cd b7       	in	r28, 0x3d	; 61
    9930:	de b7       	in	r29, 0x3e	; 62
    9932:	2b 97       	sbiw	r28, 0x0b	; 11
    9934:	0f b6       	in	r0, 0x3f	; 63
    9936:	f8 94       	cli
    9938:	de bf       	out	0x3e, r29	; 62
    993a:	0f be       	out	0x3f, r0	; 63
    993c:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    993e:	fe 01       	movw	r30, r28
    9940:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    9942:	a3 e3       	ldi	r26, 0x33	; 51
    9944:	4a 9f       	mul	r20, r26
    9946:	44 27       	eor	r20, r20
    9948:	0a 0e       	add	r0, r26
    994a:	41 1d       	adc	r20, r1
    994c:	30 2d       	mov	r19, r0
    994e:	5a 9f       	mul	r21, r26
    9950:	55 27       	eor	r21, r21
    9952:	40 0d       	add	r20, r0
    9954:	51 1d       	adc	r21, r1
    9956:	6a 9f       	mul	r22, r26
    9958:	66 27       	eor	r22, r22
    995a:	50 0d       	add	r21, r0
    995c:	61 1d       	adc	r22, r1
    995e:	7a 9f       	mul	r23, r26
    9960:	77 27       	eor	r23, r23
    9962:	60 0d       	add	r22, r0
    9964:	71 1d       	adc	r23, r1
    9966:	11 24       	eor	r1, r1
    9968:	34 0f       	add	r19, r20
    996a:	45 1f       	adc	r20, r21
    996c:	56 1f       	adc	r21, r22
    996e:	67 1f       	adc	r22, r23
    9970:	71 1d       	adc	r23, r1
    9972:	35 0f       	add	r19, r21
    9974:	46 1f       	adc	r20, r22
    9976:	57 1f       	adc	r21, r23
    9978:	61 1d       	adc	r22, r1
    997a:	71 1d       	adc	r23, r1
    997c:	37 0f       	add	r19, r23
    997e:	41 1d       	adc	r20, r1
    9980:	51 1d       	adc	r21, r1
    9982:	61 1d       	adc	r22, r1
    9984:	71 1d       	adc	r23, r1
    9986:	76 95       	lsr	r23
    9988:	67 95       	ror	r22
    998a:	57 95       	ror	r21
    998c:	47 95       	ror	r20
    998e:	37 95       	ror	r19
    9990:	aa e0       	ldi	r26, 0x0A	; 10
    9992:	3a 9f       	mul	r19, r26
    9994:	31 2d       	mov	r19, r1
    9996:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    9998:	df 01       	movw	r26, r30
    999a:	30 5d       	subi	r19, 0xD0	; 208
    999c:	3e 93       	st	-X, r19
	} while (n);
    999e:	41 15       	cp	r20, r1
    99a0:	51 05       	cpc	r21, r1
    99a2:	61 05       	cpc	r22, r1
    99a4:	71 05       	cpc	r23, r1
    99a6:	09 f5       	brne	.+66     	; 0x99ea <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    99a8:	22 23       	and	r18, r18
    99aa:	41 f0       	breq	.+16     	; 0x99bc <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    99ac:	bd 01       	movw	r22, r26
    99ae:	61 50       	subi	r22, 0x01	; 1
    99b0:	71 09       	sbc	r23, r1
    99b2:	2d e2       	ldi	r18, 0x2D	; 45
    99b4:	db 01       	movw	r26, r22
    99b6:	2c 93       	st	X, r18
    99b8:	df 01       	movw	r26, r30
    99ba:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    99bc:	ae 01       	movw	r20, r28
    99be:	4a 1b       	sub	r20, r26
    99c0:	5b 0b       	sbc	r21, r27
    99c2:	44 5f       	subi	r20, 0xF4	; 244
    99c4:	5f 4f       	sbci	r21, 0xFF	; 255
    99c6:	fc 01       	movw	r30, r24
    99c8:	20 81       	ld	r18, Z
    99ca:	31 81       	ldd	r19, Z+1	; 0x01
    99cc:	f9 01       	movw	r30, r18
    99ce:	22 81       	ldd	r18, Z+2	; 0x02
    99d0:	33 81       	ldd	r19, Z+3	; 0x03
    99d2:	bd 01       	movw	r22, r26
    99d4:	f9 01       	movw	r30, r18
    99d6:	09 95       	icall
}
    99d8:	2b 96       	adiw	r28, 0x0b	; 11
    99da:	0f b6       	in	r0, 0x3f	; 63
    99dc:	f8 94       	cli
    99de:	de bf       	out	0x3e, r29	; 62
    99e0:	0f be       	out	0x3f, r0	; 63
    99e2:	cd bf       	out	0x3d, r28	; 61
    99e4:	df 91       	pop	r29
    99e6:	cf 91       	pop	r28
    99e8:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    99ea:	fd 01       	movw	r30, r26
    99ec:	aa cf       	rjmp	.-172    	; 0x9942 <Print::printNumberDec(unsigned long, unsigned char)+0x18>

000099ee <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    99ee:	cf 93       	push	r28
    99f0:	df 93       	push	r29
    99f2:	1f 92       	push	r1
    99f4:	cd b7       	in	r28, 0x3d	; 61
    99f6:	de b7       	in	r29, 0x3e	; 62
    99f8:	69 83       	std	Y+1, r22	; 0x01
    99fa:	dc 01       	movw	r26, r24
    99fc:	ed 91       	ld	r30, X+
    99fe:	fc 91       	ld	r31, X
    9a00:	02 80       	ldd	r0, Z+2	; 0x02
    9a02:	f3 81       	ldd	r31, Z+3	; 0x03
    9a04:	e0 2d       	mov	r30, r0
    9a06:	41 e0       	ldi	r20, 0x01	; 1
    9a08:	50 e0       	ldi	r21, 0x00	; 0
    9a0a:	be 01       	movw	r22, r28
    9a0c:	6f 5f       	subi	r22, 0xFF	; 255
    9a0e:	7f 4f       	sbci	r23, 0xFF	; 255
    9a10:	09 95       	icall
    9a12:	0f 90       	pop	r0
    9a14:	df 91       	pop	r29
    9a16:	cf 91       	pop	r28
    9a18:	08 95       	ret

00009a1a <usb_serial_class::available()>:
    9a1a:	fc 01       	movw	r30, r24
    9a1c:	8f b7       	in	r24, 0x3f	; 63
    9a1e:	f8 94       	cli
    9a20:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <usb_configuration>
    9a24:	91 11       	cpse	r25, r1
    9a26:	0c c0       	rjmp	.+24     	; 0x9a40 <usb_serial_class::available()+0x26>
    9a28:	90 e0       	ldi	r25, 0x00	; 0
    9a2a:	8f bf       	out	0x3f, r24	; 63
    9a2c:	20 85       	ldd	r18, Z+8	; 0x08
    9a2e:	31 85       	ldd	r19, Z+9	; 0x09
    9a30:	37 fd       	sbrc	r19, 7
    9a32:	03 c0       	rjmp	.+6      	; 0x9a3a <usb_serial_class::available()+0x20>
    9a34:	9f 3f       	cpi	r25, 0xFF	; 255
    9a36:	09 f0       	breq	.+2      	; 0x9a3a <usb_serial_class::available()+0x20>
    9a38:	9f 5f       	subi	r25, 0xFF	; 255
    9a3a:	89 2f       	mov	r24, r25
    9a3c:	90 e0       	ldi	r25, 0x00	; 0
    9a3e:	08 95       	ret
    9a40:	93 e0       	ldi	r25, 0x03	; 3
    9a42:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9a46:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9a4a:	91 11       	cpse	r25, r1
    9a4c:	ee cf       	rjmp	.-36     	; 0x9a2a <usb_serial_class::available()+0x10>
    9a4e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9a52:	22 ff       	sbrs	r18, 2
    9a54:	e9 cf       	rjmp	.-46     	; 0x9a28 <usb_serial_class::available()+0xe>
    9a56:	25 fd       	sbrc	r18, 5
    9a58:	e7 cf       	rjmp	.-50     	; 0x9a28 <usb_serial_class::available()+0xe>
    9a5a:	2b e6       	ldi	r18, 0x6B	; 107
    9a5c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9a60:	e4 cf       	rjmp	.-56     	; 0x9a2a <usb_serial_class::available()+0x10>

00009a62 <usb_serial_class::peek()>:
    9a62:	cf 93       	push	r28
    9a64:	df 93       	push	r29
    9a66:	ec 01       	movw	r28, r24
    9a68:	88 85       	ldd	r24, Y+8	; 0x08
    9a6a:	99 85       	ldd	r25, Y+9	; 0x09
    9a6c:	97 ff       	sbrs	r25, 7
    9a6e:	09 c0       	rjmp	.+18     	; 0x9a82 <usb_serial_class::peek()+0x20>
    9a70:	e8 81       	ld	r30, Y
    9a72:	f9 81       	ldd	r31, Y+1	; 0x01
    9a74:	02 84       	ldd	r0, Z+10	; 0x0a
    9a76:	f3 85       	ldd	r31, Z+11	; 0x0b
    9a78:	e0 2d       	mov	r30, r0
    9a7a:	ce 01       	movw	r24, r28
    9a7c:	09 95       	icall
    9a7e:	99 87       	std	Y+9, r25	; 0x09
    9a80:	88 87       	std	Y+8, r24	; 0x08
    9a82:	88 85       	ldd	r24, Y+8	; 0x08
    9a84:	99 85       	ldd	r25, Y+9	; 0x09
    9a86:	df 91       	pop	r29
    9a88:	cf 91       	pop	r28
    9a8a:	08 95       	ret

00009a8c <usb_serial_class::read()>:
    9a8c:	fc 01       	movw	r30, r24
    9a8e:	20 85       	ldd	r18, Z+8	; 0x08
    9a90:	31 85       	ldd	r19, Z+9	; 0x09
    9a92:	37 fd       	sbrc	r19, 7
    9a94:	07 c0       	rjmp	.+14     	; 0x9aa4 <usb_serial_class::read()+0x18>
    9a96:	4f ef       	ldi	r20, 0xFF	; 255
    9a98:	5f ef       	ldi	r21, 0xFF	; 255
    9a9a:	51 87       	std	Z+9, r21	; 0x09
    9a9c:	40 87       	std	Z+8, r20	; 0x08
    9a9e:	c9 01       	movw	r24, r18
    9aa0:	99 27       	eor	r25, r25
    9aa2:	08 95       	ret
    9aa4:	9f b7       	in	r25, 0x3f	; 63
    9aa6:	f8 94       	cli
    9aa8:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    9aac:	81 11       	cpse	r24, r1
    9aae:	04 c0       	rjmp	.+8      	; 0x9ab8 <usb_serial_class::read()+0x2c>
    9ab0:	9f bf       	out	0x3f, r25	; 63
    9ab2:	8f ef       	ldi	r24, 0xFF	; 255
    9ab4:	9f ef       	ldi	r25, 0xFF	; 255
    9ab6:	08 95       	ret
    9ab8:	83 e0       	ldi	r24, 0x03	; 3
    9aba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9abe:	2b e6       	ldi	r18, 0x6B	; 107
    9ac0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9ac4:	85 fd       	sbrc	r24, 5
    9ac6:	05 c0       	rjmp	.+10     	; 0x9ad2 <usb_serial_class::read()+0x46>
    9ac8:	82 ff       	sbrs	r24, 2
    9aca:	f2 cf       	rjmp	.-28     	; 0x9ab0 <usb_serial_class::read()+0x24>
    9acc:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9ad0:	f7 cf       	rjmp	.-18     	; 0x9ac0 <usb_serial_class::read()+0x34>
    9ad2:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    9ad6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9ada:	25 fd       	sbrc	r18, 5
    9adc:	03 c0       	rjmp	.+6      	; 0x9ae4 <usb_serial_class::read()+0x58>
    9ade:	2b e6       	ldi	r18, 0x6B	; 107
    9ae0:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9ae4:	9f bf       	out	0x3f, r25	; 63
    9ae6:	90 e0       	ldi	r25, 0x00	; 0
    9ae8:	08 95       	ret

00009aea <usb_serial_class::availableForWrite()>:
    9aea:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    9aee:	88 23       	and	r24, r24
    9af0:	61 f0       	breq	.+24     	; 0x9b0a <usb_serial_class::availableForWrite()+0x20>
    9af2:	8f b7       	in	r24, 0x3f	; 63
    9af4:	f8 94       	cli
    9af6:	94 e0       	ldi	r25, 0x04	; 4
    9af8:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9afc:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9b00:	8f bf       	out	0x3f, r24	; 63
    9b02:	80 e4       	ldi	r24, 0x40	; 64
    9b04:	89 1b       	sub	r24, r25
    9b06:	90 e0       	ldi	r25, 0x00	; 0
    9b08:	08 95       	ret
    9b0a:	90 e0       	ldi	r25, 0x00	; 0
    9b0c:	80 e0       	ldi	r24, 0x00	; 0
    9b0e:	08 95       	ret

00009b10 <usb_serial_class::write(unsigned char const*, unsigned int)>:
    9b10:	bf 92       	push	r11
    9b12:	cf 92       	push	r12
    9b14:	df 92       	push	r13
    9b16:	ef 92       	push	r14
    9b18:	ff 92       	push	r15
    9b1a:	0f 93       	push	r16
    9b1c:	1f 93       	push	r17
    9b1e:	cf 93       	push	r28
    9b20:	df 93       	push	r29
    9b22:	7c 01       	movw	r14, r24
    9b24:	80 91 6a 11 	lds	r24, 0x116A	; 0x80116a <usb_configuration>
    9b28:	81 11       	cpse	r24, r1
    9b2a:	10 c0       	rjmp	.+32     	; 0x9b4c <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    9b2c:	81 e0       	ldi	r24, 0x01	; 1
    9b2e:	f7 01       	movw	r30, r14
    9b30:	82 83       	std	Z+2, r24	; 0x02
    9b32:	10 e0       	ldi	r17, 0x00	; 0
    9b34:	00 e0       	ldi	r16, 0x00	; 0
    9b36:	c8 01       	movw	r24, r16
    9b38:	df 91       	pop	r29
    9b3a:	cf 91       	pop	r28
    9b3c:	1f 91       	pop	r17
    9b3e:	0f 91       	pop	r16
    9b40:	ff 90       	pop	r15
    9b42:	ef 90       	pop	r14
    9b44:	df 90       	pop	r13
    9b46:	cf 90       	pop	r12
    9b48:	bf 90       	pop	r11
    9b4a:	08 95       	ret
    9b4c:	2f b7       	in	r18, 0x3f	; 63
    9b4e:	f8 94       	cli
    9b50:	84 e0       	ldi	r24, 0x04	; 4
    9b52:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9b56:	80 91 e4 10 	lds	r24, 0x10E4	; 0x8010e4 <transmit_previous_timeout>
    9b5a:	88 23       	and	r24, r24
    9b5c:	41 f0       	breq	.+16     	; 0x9b6e <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    9b5e:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9b62:	85 fd       	sbrc	r24, 5
    9b64:	02 c0       	rjmp	.+4      	; 0x9b6a <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    9b66:	2f bf       	out	0x3f, r18	; 63
    9b68:	e1 cf       	rjmp	.-62     	; 0x9b2c <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    9b6a:	10 92 e4 10 	sts	0x10E4, r1	; 0x8010e4 <transmit_previous_timeout>
    9b6e:	10 e0       	ldi	r17, 0x00	; 0
    9b70:	00 e0       	ldi	r16, 0x00	; 0
    9b72:	84 e0       	ldi	r24, 0x04	; 4
    9b74:	d8 2e       	mov	r13, r24
    9b76:	90 e4       	ldi	r25, 0x40	; 64
    9b78:	c9 2e       	mov	r12, r25
    9b7a:	a1 ef       	ldi	r26, 0xF1	; 241
    9b7c:	b0 e0       	ldi	r27, 0x00	; 0
    9b7e:	3a e3       	ldi	r19, 0x3A	; 58
    9b80:	b3 2e       	mov	r11, r19
    9b82:	33 e0       	ldi	r19, 0x03	; 3
    9b84:	41 15       	cp	r20, r1
    9b86:	51 05       	cpc	r21, r1
    9b88:	09 f4       	brne	.+2      	; 0x9b8c <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    9b8a:	c0 c0       	rjmp	.+384    	; 0x9d0c <L548end+0x12>
    9b8c:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    9b90:	81 5f       	subi	r24, 0xF1	; 241
    9b92:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9b96:	95 fd       	sbrc	r25, 5
    9b98:	16 c0       	rjmp	.+44     	; 0x9bc6 <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    9b9a:	2f bf       	out	0x3f, r18	; 63
    9b9c:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    9ba0:	89 13       	cpse	r24, r25
    9ba2:	06 c0       	rjmp	.+12     	; 0x9bb0 <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    9ba4:	81 e0       	ldi	r24, 0x01	; 1
    9ba6:	80 93 e4 10 	sts	0x10E4, r24	; 0x8010e4 <transmit_previous_timeout>
    9baa:	f7 01       	movw	r30, r14
    9bac:	82 83       	std	Z+2, r24	; 0x02
    9bae:	c3 cf       	rjmp	.-122    	; 0x9b36 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    9bb0:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <usb_configuration>
    9bb4:	91 11       	cpse	r25, r1
    9bb6:	02 c0       	rjmp	.+4      	; 0x9bbc <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    9bb8:	81 e0       	ldi	r24, 0x01	; 1
    9bba:	f7 cf       	rjmp	.-18     	; 0x9baa <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    9bbc:	2f b7       	in	r18, 0x3f	; 63
    9bbe:	f8 94       	cli
    9bc0:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9bc4:	e6 cf       	rjmp	.-52     	; 0x9b92 <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    9bc6:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9bca:	9c 2d       	mov	r25, r12
    9bcc:	98 1b       	sub	r25, r24
    9bce:	94 17       	cp	r25, r20
    9bd0:	15 06       	cpc	r1, r21
    9bd2:	11 f0       	breq	.+4      	; 0x9bd8 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    9bd4:	08 f0       	brcs	.+2      	; 0x9bd8 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    9bd6:	94 2f       	mov	r25, r20
    9bd8:	e9 2f       	mov	r30, r25
    9bda:	f0 e0       	ldi	r31, 0x00	; 0
    9bdc:	4e 1b       	sub	r20, r30
    9bde:	5f 0b       	sbc	r21, r31
    9be0:	0e 0f       	add	r16, r30
    9be2:	1f 1f       	adc	r17, r31
    9be4:	eb 01       	movw	r28, r22

00009be6 <L548begin>:
    9be6:	e0 e4       	ldi	r30, 0x40	; 64
    9be8:	e9 1b       	sub	r30, r25
    9bea:	e0 34       	cpi	r30, 0x40	; 64
    9bec:	28 f4       	brcc	.+10     	; 0x9bf8 <L548err>
    9bee:	ee 0f       	add	r30, r30
    9bf0:	ff 27       	eor	r31, r31
    9bf2:	e3 50       	subi	r30, 0x03	; 3
    9bf4:	f2 4b       	sbci	r31, 0xB2	; 178
    9bf6:	09 94       	ijmp

00009bf8 <L548err>:
    9bf8:	80 c0       	rjmp	.+256    	; 0x9cfa <L548end>

00009bfa <L548table>:
    9bfa:	99 91       	ld	r25, Y+
    9bfc:	9c 93       	st	X, r25
    9bfe:	99 91       	ld	r25, Y+
    9c00:	9c 93       	st	X, r25
    9c02:	99 91       	ld	r25, Y+
    9c04:	9c 93       	st	X, r25
    9c06:	99 91       	ld	r25, Y+
    9c08:	9c 93       	st	X, r25
    9c0a:	99 91       	ld	r25, Y+
    9c0c:	9c 93       	st	X, r25
    9c0e:	99 91       	ld	r25, Y+
    9c10:	9c 93       	st	X, r25
    9c12:	99 91       	ld	r25, Y+
    9c14:	9c 93       	st	X, r25
    9c16:	99 91       	ld	r25, Y+
    9c18:	9c 93       	st	X, r25
    9c1a:	99 91       	ld	r25, Y+
    9c1c:	9c 93       	st	X, r25
    9c1e:	99 91       	ld	r25, Y+
    9c20:	9c 93       	st	X, r25
    9c22:	99 91       	ld	r25, Y+
    9c24:	9c 93       	st	X, r25
    9c26:	99 91       	ld	r25, Y+
    9c28:	9c 93       	st	X, r25
    9c2a:	99 91       	ld	r25, Y+
    9c2c:	9c 93       	st	X, r25
    9c2e:	99 91       	ld	r25, Y+
    9c30:	9c 93       	st	X, r25
    9c32:	99 91       	ld	r25, Y+
    9c34:	9c 93       	st	X, r25
    9c36:	99 91       	ld	r25, Y+
    9c38:	9c 93       	st	X, r25
    9c3a:	99 91       	ld	r25, Y+
    9c3c:	9c 93       	st	X, r25
    9c3e:	99 91       	ld	r25, Y+
    9c40:	9c 93       	st	X, r25
    9c42:	99 91       	ld	r25, Y+
    9c44:	9c 93       	st	X, r25
    9c46:	99 91       	ld	r25, Y+
    9c48:	9c 93       	st	X, r25
    9c4a:	99 91       	ld	r25, Y+
    9c4c:	9c 93       	st	X, r25
    9c4e:	99 91       	ld	r25, Y+
    9c50:	9c 93       	st	X, r25
    9c52:	99 91       	ld	r25, Y+
    9c54:	9c 93       	st	X, r25
    9c56:	99 91       	ld	r25, Y+
    9c58:	9c 93       	st	X, r25
    9c5a:	99 91       	ld	r25, Y+
    9c5c:	9c 93       	st	X, r25
    9c5e:	99 91       	ld	r25, Y+
    9c60:	9c 93       	st	X, r25
    9c62:	99 91       	ld	r25, Y+
    9c64:	9c 93       	st	X, r25
    9c66:	99 91       	ld	r25, Y+
    9c68:	9c 93       	st	X, r25
    9c6a:	99 91       	ld	r25, Y+
    9c6c:	9c 93       	st	X, r25
    9c6e:	99 91       	ld	r25, Y+
    9c70:	9c 93       	st	X, r25
    9c72:	99 91       	ld	r25, Y+
    9c74:	9c 93       	st	X, r25
    9c76:	99 91       	ld	r25, Y+
    9c78:	9c 93       	st	X, r25
    9c7a:	99 91       	ld	r25, Y+
    9c7c:	9c 93       	st	X, r25
    9c7e:	99 91       	ld	r25, Y+
    9c80:	9c 93       	st	X, r25
    9c82:	99 91       	ld	r25, Y+
    9c84:	9c 93       	st	X, r25
    9c86:	99 91       	ld	r25, Y+
    9c88:	9c 93       	st	X, r25
    9c8a:	99 91       	ld	r25, Y+
    9c8c:	9c 93       	st	X, r25
    9c8e:	99 91       	ld	r25, Y+
    9c90:	9c 93       	st	X, r25
    9c92:	99 91       	ld	r25, Y+
    9c94:	9c 93       	st	X, r25
    9c96:	99 91       	ld	r25, Y+
    9c98:	9c 93       	st	X, r25
    9c9a:	99 91       	ld	r25, Y+
    9c9c:	9c 93       	st	X, r25
    9c9e:	99 91       	ld	r25, Y+
    9ca0:	9c 93       	st	X, r25
    9ca2:	99 91       	ld	r25, Y+
    9ca4:	9c 93       	st	X, r25
    9ca6:	99 91       	ld	r25, Y+
    9ca8:	9c 93       	st	X, r25
    9caa:	99 91       	ld	r25, Y+
    9cac:	9c 93       	st	X, r25
    9cae:	99 91       	ld	r25, Y+
    9cb0:	9c 93       	st	X, r25
    9cb2:	99 91       	ld	r25, Y+
    9cb4:	9c 93       	st	X, r25
    9cb6:	99 91       	ld	r25, Y+
    9cb8:	9c 93       	st	X, r25
    9cba:	99 91       	ld	r25, Y+
    9cbc:	9c 93       	st	X, r25
    9cbe:	99 91       	ld	r25, Y+
    9cc0:	9c 93       	st	X, r25
    9cc2:	99 91       	ld	r25, Y+
    9cc4:	9c 93       	st	X, r25
    9cc6:	99 91       	ld	r25, Y+
    9cc8:	9c 93       	st	X, r25
    9cca:	99 91       	ld	r25, Y+
    9ccc:	9c 93       	st	X, r25
    9cce:	99 91       	ld	r25, Y+
    9cd0:	9c 93       	st	X, r25
    9cd2:	99 91       	ld	r25, Y+
    9cd4:	9c 93       	st	X, r25
    9cd6:	99 91       	ld	r25, Y+
    9cd8:	9c 93       	st	X, r25
    9cda:	99 91       	ld	r25, Y+
    9cdc:	9c 93       	st	X, r25
    9cde:	99 91       	ld	r25, Y+
    9ce0:	9c 93       	st	X, r25
    9ce2:	99 91       	ld	r25, Y+
    9ce4:	9c 93       	st	X, r25
    9ce6:	99 91       	ld	r25, Y+
    9ce8:	9c 93       	st	X, r25
    9cea:	99 91       	ld	r25, Y+
    9cec:	9c 93       	st	X, r25
    9cee:	99 91       	ld	r25, Y+
    9cf0:	9c 93       	st	X, r25
    9cf2:	99 91       	ld	r25, Y+
    9cf4:	9c 93       	st	X, r25
    9cf6:	99 91       	ld	r25, Y+
    9cf8:	9c 93       	st	X, r25

00009cfa <L548end>:
    9cfa:	be 01       	movw	r22, r28
    9cfc:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9d00:	85 ff       	sbrs	r24, 5
    9d02:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9d06:	30 93 e6 10 	sts	0x10E6, r19	; 0x8010e6 <transmit_flush_timer>
    9d0a:	3c cf       	rjmp	.-392    	; 0x9b84 <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    9d0c:	2f bf       	out	0x3f, r18	; 63
    9d0e:	13 cf       	rjmp	.-474    	; 0x9b36 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00009d10 <usb_serial_class::send_now()>:
    9d10:	8f b7       	in	r24, 0x3f	; 63
    9d12:	f8 94       	cli
    9d14:	90 91 6a 11 	lds	r25, 0x116A	; 0x80116a <usb_configuration>
    9d18:	99 23       	and	r25, r25
    9d1a:	61 f0       	breq	.+24     	; 0x9d34 <usb_serial_class::send_now()+0x24>
    9d1c:	90 91 e6 10 	lds	r25, 0x10E6	; 0x8010e6 <transmit_flush_timer>
    9d20:	99 23       	and	r25, r25
    9d22:	41 f0       	breq	.+16     	; 0x9d34 <usb_serial_class::send_now()+0x24>
    9d24:	94 e0       	ldi	r25, 0x04	; 4
    9d26:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9d2a:	9a e3       	ldi	r25, 0x3A	; 58
    9d2c:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9d30:	10 92 e6 10 	sts	0x10E6, r1	; 0x8010e6 <transmit_flush_timer>
    9d34:	8f bf       	out	0x3f, r24	; 63
    9d36:	08 95       	ret

00009d38 <usb_serial_class::flush()>:
    9d38:	eb cf       	rjmp	.-42     	; 0x9d10 <usb_serial_class::send_now()>

00009d3a <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    9d3a:	ec e5       	ldi	r30, 0x5C	; 92
    9d3c:	f1 e1       	ldi	r31, 0x11	; 17
    9d3e:	11 86       	std	Z+9, r1	; 0x09
    9d40:	10 86       	std	Z+8, r1	; 0x08
    9d42:	12 82       	std	Z+2, r1	; 0x02
    9d44:	88 ee       	ldi	r24, 0xE8	; 232
    9d46:	93 e0       	ldi	r25, 0x03	; 3
    9d48:	a0 e0       	ldi	r26, 0x00	; 0
    9d4a:	b0 e0       	ldi	r27, 0x00	; 0
    9d4c:	83 83       	std	Z+3, r24	; 0x03
    9d4e:	94 83       	std	Z+4, r25	; 0x04
    9d50:	a5 83       	std	Z+5, r26	; 0x05
    9d52:	b6 83       	std	Z+6, r27	; 0x06
    9d54:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    9d56:	84 ed       	ldi	r24, 0xD4	; 212
    9d58:	99 e0       	ldi	r25, 0x09	; 9
    9d5a:	91 83       	std	Z+1, r25	; 0x01
    9d5c:	80 83       	st	Z, r24
    9d5e:	08 95       	ret

00009d60 <random(long)>:
    srandom(seed);
  }
}

long random(long howbig)
{
    9d60:	cf 92       	push	r12
    9d62:	df 92       	push	r13
    9d64:	ef 92       	push	r14
    9d66:	ff 92       	push	r15
    9d68:	6b 01       	movw	r12, r22
    9d6a:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    9d6c:	c1 14       	cp	r12, r1
    9d6e:	d1 04       	cpc	r13, r1
    9d70:	e1 04       	cpc	r14, r1
    9d72:	f1 04       	cpc	r15, r1
    9d74:	31 f0       	breq	.+12     	; 0x9d82 <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    9d76:	7a d3       	rcall	.+1780   	; 0xa46c <random>
    9d78:	a7 01       	movw	r20, r14
    9d7a:	96 01       	movw	r18, r12
    9d7c:	ea d2       	rcall	.+1492   	; 0xa352 <__divmodsi4>
    9d7e:	6b 01       	movw	r12, r22
    9d80:	7c 01       	movw	r14, r24
}
    9d82:	c7 01       	movw	r24, r14
    9d84:	b6 01       	movw	r22, r12
    9d86:	ff 90       	pop	r15
    9d88:	ef 90       	pop	r14
    9d8a:	df 90       	pop	r13
    9d8c:	cf 90       	pop	r12
    9d8e:	08 95       	ret

00009d90 <random(long, long)>:

long random(long howsmall, long howbig)
{
    9d90:	cf 92       	push	r12
    9d92:	df 92       	push	r13
    9d94:	ef 92       	push	r14
    9d96:	ff 92       	push	r15
    9d98:	6b 01       	movw	r12, r22
    9d9a:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    9d9c:	c2 16       	cp	r12, r18
    9d9e:	d3 06       	cpc	r13, r19
    9da0:	e4 06       	cpc	r14, r20
    9da2:	f5 06       	cpc	r15, r21
    9da4:	5c f4       	brge	.+22     	; 0x9dbc <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    9da6:	ca 01       	movw	r24, r20
    9da8:	b9 01       	movw	r22, r18
    9daa:	6c 19       	sub	r22, r12
    9dac:	7d 09       	sbc	r23, r13
    9dae:	8e 09       	sbc	r24, r14
    9db0:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    9db2:	d6 df       	rcall	.-84     	; 0x9d60 <random(long)>
    9db4:	c6 0e       	add	r12, r22
    9db6:	d7 1e       	adc	r13, r23
    9db8:	e8 1e       	adc	r14, r24
    9dba:	f9 1e       	adc	r15, r25
}
    9dbc:	c7 01       	movw	r24, r14
    9dbe:	b6 01       	movw	r22, r12
    9dc0:	ff 90       	pop	r15
    9dc2:	ef 90       	pop	r14
    9dc4:	df 90       	pop	r13
    9dc6:	cf 90       	pop	r12
    9dc8:	08 95       	ret

00009dca <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    9dca:	4f 92       	push	r4
    9dcc:	5f 92       	push	r5
    9dce:	6f 92       	push	r6
    9dd0:	7f 92       	push	r7
    9dd2:	af 92       	push	r10
    9dd4:	bf 92       	push	r11
    9dd6:	cf 92       	push	r12
    9dd8:	df 92       	push	r13
    9dda:	ef 92       	push	r14
    9ddc:	ff 92       	push	r15
    9dde:	0f 93       	push	r16
    9de0:	1f 93       	push	r17
    9de2:	cf 93       	push	r28
    9de4:	df 93       	push	r29
    9de6:	cd b7       	in	r28, 0x3d	; 61
    9de8:	de b7       	in	r29, 0x3e	; 62
    9dea:	29 01       	movw	r4, r18
    9dec:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    9dee:	9b 01       	movw	r18, r22
    9df0:	ac 01       	movw	r20, r24
    9df2:	24 19       	sub	r18, r4
    9df4:	35 09       	sbc	r19, r5
    9df6:	46 09       	sbc	r20, r6
    9df8:	57 09       	sbc	r21, r7
    9dfa:	89 89       	ldd	r24, Y+17	; 0x11
    9dfc:	9a 89       	ldd	r25, Y+18	; 0x12
    9dfe:	ab 89       	ldd	r26, Y+19	; 0x13
    9e00:	bc 89       	ldd	r27, Y+20	; 0x14
    9e02:	bc 01       	movw	r22, r24
    9e04:	cd 01       	movw	r24, r26
    9e06:	6a 19       	sub	r22, r10
    9e08:	7b 09       	sbc	r23, r11
    9e0a:	8c 09       	sbc	r24, r12
    9e0c:	9d 09       	sbc	r25, r13
    9e0e:	49 d2       	rcall	.+1170   	; 0xa2a2 <__mulsi3>
    9e10:	a8 01       	movw	r20, r16
    9e12:	97 01       	movw	r18, r14
    9e14:	24 19       	sub	r18, r4
    9e16:	35 09       	sbc	r19, r5
    9e18:	46 09       	sbc	r20, r6
    9e1a:	57 09       	sbc	r21, r7
    9e1c:	9a d2       	rcall	.+1332   	; 0xa352 <__divmodsi4>
    9e1e:	ca 01       	movw	r24, r20
    9e20:	b9 01       	movw	r22, r18
    9e22:	6a 0d       	add	r22, r10
    9e24:	7b 1d       	adc	r23, r11
    9e26:	8c 1d       	adc	r24, r12
    9e28:	9d 1d       	adc	r25, r13
}
    9e2a:	df 91       	pop	r29
    9e2c:	cf 91       	pop	r28
    9e2e:	1f 91       	pop	r17
    9e30:	0f 91       	pop	r16
    9e32:	ff 90       	pop	r15
    9e34:	ef 90       	pop	r14
    9e36:	df 90       	pop	r13
    9e38:	cf 90       	pop	r12
    9e3a:	bf 90       	pop	r11
    9e3c:	af 90       	pop	r10
    9e3e:	7f 90       	pop	r7
    9e40:	6f 90       	pop	r6
    9e42:	5f 90       	pop	r5
    9e44:	4f 90       	pop	r4
    9e46:	08 95       	ret

00009e48 <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    9e48:	fc 01       	movw	r30, r24
    9e4a:	80 81       	ld	r24, Z
    9e4c:	91 81       	ldd	r25, Z+1	; 0x01
    9e4e:	0c 94 03 45 	jmp	0x8a06	; 0x8a06 <free>

00009e52 <String::changeBuffer(unsigned int)>:
    9e52:	0f 93       	push	r16
    9e54:	1f 93       	push	r17
    9e56:	cf 93       	push	r28
    9e58:	df 93       	push	r29
    9e5a:	ec 01       	movw	r28, r24
    9e5c:	8b 01       	movw	r16, r22
    9e5e:	6f 5f       	subi	r22, 0xFF	; 255
    9e60:	7f 4f       	sbci	r23, 0xFF	; 255
    9e62:	88 81       	ld	r24, Y
    9e64:	99 81       	ldd	r25, Y+1	; 0x01
    9e66:	0e 94 8c 45 	call	0x8b18	; 0x8b18 <realloc>
    9e6a:	00 97       	sbiw	r24, 0x00	; 0
    9e6c:	51 f0       	breq	.+20     	; 0x9e82 <String::changeBuffer(unsigned int)+0x30>
    9e6e:	99 83       	std	Y+1, r25	; 0x01
    9e70:	88 83       	st	Y, r24
    9e72:	1b 83       	std	Y+3, r17	; 0x03
    9e74:	0a 83       	std	Y+2, r16	; 0x02
    9e76:	81 e0       	ldi	r24, 0x01	; 1
    9e78:	df 91       	pop	r29
    9e7a:	cf 91       	pop	r28
    9e7c:	1f 91       	pop	r17
    9e7e:	0f 91       	pop	r16
    9e80:	08 95       	ret
    9e82:	80 e0       	ldi	r24, 0x00	; 0
    9e84:	f9 cf       	rjmp	.-14     	; 0x9e78 <String::changeBuffer(unsigned int)+0x26>

00009e86 <String::reserve(unsigned int)>:
    9e86:	cf 93       	push	r28
    9e88:	df 93       	push	r29
    9e8a:	fc 01       	movw	r30, r24
    9e8c:	22 81       	ldd	r18, Z+2	; 0x02
    9e8e:	33 81       	ldd	r19, Z+3	; 0x03
    9e90:	26 17       	cp	r18, r22
    9e92:	37 07       	cpc	r19, r23
    9e94:	20 f0       	brcs	.+8      	; 0x9e9e <String::reserve(unsigned int)+0x18>
    9e96:	81 e0       	ldi	r24, 0x01	; 1
    9e98:	df 91       	pop	r29
    9e9a:	cf 91       	pop	r28
    9e9c:	08 95       	ret
    9e9e:	ec 01       	movw	r28, r24
    9ea0:	d8 df       	rcall	.-80     	; 0x9e52 <String::changeBuffer(unsigned int)>
    9ea2:	88 23       	and	r24, r24
    9ea4:	c9 f3       	breq	.-14     	; 0x9e98 <String::reserve(unsigned int)+0x12>
    9ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    9ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    9eaa:	89 2b       	or	r24, r25
    9eac:	a1 f7       	brne	.-24     	; 0x9e96 <String::reserve(unsigned int)+0x10>
    9eae:	e8 81       	ld	r30, Y
    9eb0:	f9 81       	ldd	r31, Y+1	; 0x01
    9eb2:	10 82       	st	Z, r1
    9eb4:	f0 cf       	rjmp	.-32     	; 0x9e96 <String::reserve(unsigned int)+0x10>

00009eb6 <String::copy(char const*, unsigned int)>:
    9eb6:	ef 92       	push	r14
    9eb8:	ff 92       	push	r15
    9eba:	0f 93       	push	r16
    9ebc:	1f 93       	push	r17
    9ebe:	cf 93       	push	r28
    9ec0:	df 93       	push	r29
    9ec2:	ec 01       	movw	r28, r24
    9ec4:	7b 01       	movw	r14, r22
    9ec6:	8a 01       	movw	r16, r20
    9ec8:	41 15       	cp	r20, r1
    9eca:	51 05       	cpc	r21, r1
    9ecc:	79 f4       	brne	.+30     	; 0x9eec <String::copy(char const*, unsigned int)+0x36>
    9ece:	e8 81       	ld	r30, Y
    9ed0:	f9 81       	ldd	r31, Y+1	; 0x01
    9ed2:	30 97       	sbiw	r30, 0x00	; 0
    9ed4:	09 f0       	breq	.+2      	; 0x9ed8 <String::copy(char const*, unsigned int)+0x22>
    9ed6:	10 82       	st	Z, r1
    9ed8:	1d 82       	std	Y+5, r1	; 0x05
    9eda:	1c 82       	std	Y+4, r1	; 0x04
    9edc:	ce 01       	movw	r24, r28
    9ede:	df 91       	pop	r29
    9ee0:	cf 91       	pop	r28
    9ee2:	1f 91       	pop	r17
    9ee4:	0f 91       	pop	r16
    9ee6:	ff 90       	pop	r15
    9ee8:	ef 90       	pop	r14
    9eea:	08 95       	ret
    9eec:	ba 01       	movw	r22, r20
    9eee:	cb df       	rcall	.-106    	; 0x9e86 <String::reserve(unsigned int)>
    9ef0:	28 81       	ld	r18, Y
    9ef2:	39 81       	ldd	r19, Y+1	; 0x01
    9ef4:	81 11       	cpse	r24, r1
    9ef6:	0b c0       	rjmp	.+22     	; 0x9f0e <String::copy(char const*, unsigned int)+0x58>
    9ef8:	21 15       	cp	r18, r1
    9efa:	31 05       	cpc	r19, r1
    9efc:	29 f0       	breq	.+10     	; 0x9f08 <String::copy(char const*, unsigned int)+0x52>
    9efe:	c9 01       	movw	r24, r18
    9f00:	0e 94 03 45 	call	0x8a06	; 0x8a06 <free>
    9f04:	19 82       	std	Y+1, r1	; 0x01
    9f06:	18 82       	st	Y, r1
    9f08:	1b 82       	std	Y+3, r1	; 0x03
    9f0a:	1a 82       	std	Y+2, r1	; 0x02
    9f0c:	e5 cf       	rjmp	.-54     	; 0x9ed8 <String::copy(char const*, unsigned int)+0x22>
    9f0e:	1d 83       	std	Y+5, r17	; 0x05
    9f10:	0c 83       	std	Y+4, r16	; 0x04
    9f12:	b7 01       	movw	r22, r14
    9f14:	c9 01       	movw	r24, r18
    9f16:	08 d3       	rcall	.+1552   	; 0xa528 <strcpy>
    9f18:	e1 cf       	rjmp	.-62     	; 0x9edc <String::copy(char const*, unsigned int)+0x26>

00009f1a <String::String(char const*)>:
    9f1a:	fc 01       	movw	r30, r24
    9f1c:	11 82       	std	Z+1, r1	; 0x01
    9f1e:	10 82       	st	Z, r1
    9f20:	13 82       	std	Z+3, r1	; 0x03
    9f22:	12 82       	std	Z+2, r1	; 0x02
    9f24:	15 82       	std	Z+5, r1	; 0x05
    9f26:	14 82       	std	Z+4, r1	; 0x04
    9f28:	16 82       	std	Z+6, r1	; 0x06
    9f2a:	61 15       	cp	r22, r1
    9f2c:	71 05       	cpc	r23, r1
    9f2e:	49 f0       	breq	.+18     	; 0x9f42 <String::String(char const*)+0x28>
    9f30:	fb 01       	movw	r30, r22
    9f32:	01 90       	ld	r0, Z+
    9f34:	00 20       	and	r0, r0
    9f36:	e9 f7       	brne	.-6      	; 0x9f32 <String::String(char const*)+0x18>
    9f38:	31 97       	sbiw	r30, 0x01	; 1
    9f3a:	af 01       	movw	r20, r30
    9f3c:	46 1b       	sub	r20, r22
    9f3e:	57 0b       	sbc	r21, r23
    9f40:	ba cf       	rjmp	.-140    	; 0x9eb6 <String::copy(char const*, unsigned int)>
    9f42:	08 95       	ret

00009f44 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    9f44:	0f 93       	push	r16
    9f46:	1f 93       	push	r17
    9f48:	cf 93       	push	r28
    9f4a:	df 93       	push	r29
	if (!bufsize || !buf) return;
    9f4c:	41 15       	cp	r20, r1
    9f4e:	51 05       	cpc	r21, r1
    9f50:	59 f0       	breq	.+22     	; 0x9f68 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    9f52:	61 15       	cp	r22, r1
    9f54:	71 05       	cpc	r23, r1
    9f56:	41 f0       	breq	.+16     	; 0x9f68 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    9f58:	fc 01       	movw	r30, r24
    9f5a:	04 81       	ldd	r16, Z+4	; 0x04
    9f5c:	15 81       	ldd	r17, Z+5	; 0x05
    9f5e:	20 17       	cp	r18, r16
    9f60:	31 07       	cpc	r19, r17
    9f62:	38 f0       	brcs	.+14     	; 0x9f72 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    9f64:	fb 01       	movw	r30, r22
    9f66:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    9f68:	df 91       	pop	r29
    9f6a:	cf 91       	pop	r28
    9f6c:	1f 91       	pop	r17
    9f6e:	0f 91       	pop	r16
    9f70:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    9f72:	41 50       	subi	r20, 0x01	; 1
    9f74:	51 09       	sbc	r21, r1
    9f76:	02 1b       	sub	r16, r18
    9f78:	13 0b       	sbc	r17, r19
    9f7a:	40 17       	cp	r20, r16
    9f7c:	51 07       	cpc	r21, r17
    9f7e:	08 f4       	brcc	.+2      	; 0x9f82 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    9f80:	8a 01       	movw	r16, r20
    9f82:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    9f84:	fc 01       	movw	r30, r24
    9f86:	60 81       	ld	r22, Z
    9f88:	71 81       	ldd	r23, Z+1	; 0x01
    9f8a:	62 0f       	add	r22, r18
    9f8c:	73 1f       	adc	r23, r19
    9f8e:	a8 01       	movw	r20, r16
    9f90:	ce 01       	movw	r24, r28
    9f92:	d1 d2       	rcall	.+1442   	; 0xa536 <strncpy>
	buf[n] = 0;
    9f94:	c0 0f       	add	r28, r16
    9f96:	d1 1f       	adc	r29, r17
    9f98:	18 82       	st	Y, r1
    9f9a:	e6 cf       	rjmp	.-52     	; 0x9f68 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

00009f9c <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    9f9c:	08 95       	ret

00009f9e <__subsf3>:
    9f9e:	50 58       	subi	r21, 0x80	; 128

00009fa0 <__addsf3>:
    9fa0:	bb 27       	eor	r27, r27
    9fa2:	aa 27       	eor	r26, r26
    9fa4:	0e d0       	rcall	.+28     	; 0x9fc2 <__addsf3x>
    9fa6:	e0 c0       	rjmp	.+448    	; 0xa168 <__fp_round>
    9fa8:	d1 d0       	rcall	.+418    	; 0xa14c <__fp_pscA>
    9faa:	30 f0       	brcs	.+12     	; 0x9fb8 <__addsf3+0x18>
    9fac:	d6 d0       	rcall	.+428    	; 0xa15a <__fp_pscB>
    9fae:	20 f0       	brcs	.+8      	; 0x9fb8 <__addsf3+0x18>
    9fb0:	31 f4       	brne	.+12     	; 0x9fbe <__addsf3+0x1e>
    9fb2:	9f 3f       	cpi	r25, 0xFF	; 255
    9fb4:	11 f4       	brne	.+4      	; 0x9fba <__addsf3+0x1a>
    9fb6:	1e f4       	brtc	.+6      	; 0x9fbe <__addsf3+0x1e>
    9fb8:	c6 c0       	rjmp	.+396    	; 0xa146 <__fp_nan>
    9fba:	0e f4       	brtc	.+2      	; 0x9fbe <__addsf3+0x1e>
    9fbc:	e0 95       	com	r30
    9fbe:	e7 fb       	bst	r30, 7
    9fc0:	bc c0       	rjmp	.+376    	; 0xa13a <__fp_inf>

00009fc2 <__addsf3x>:
    9fc2:	e9 2f       	mov	r30, r25
    9fc4:	e2 d0       	rcall	.+452    	; 0xa18a <__fp_split3>
    9fc6:	80 f3       	brcs	.-32     	; 0x9fa8 <__addsf3+0x8>
    9fc8:	ba 17       	cp	r27, r26
    9fca:	62 07       	cpc	r22, r18
    9fcc:	73 07       	cpc	r23, r19
    9fce:	84 07       	cpc	r24, r20
    9fd0:	95 07       	cpc	r25, r21
    9fd2:	18 f0       	brcs	.+6      	; 0x9fda <__addsf3x+0x18>
    9fd4:	71 f4       	brne	.+28     	; 0x9ff2 <__addsf3x+0x30>
    9fd6:	9e f5       	brtc	.+102    	; 0xa03e <__addsf3x+0x7c>
    9fd8:	fa c0       	rjmp	.+500    	; 0xa1ce <__fp_zero>
    9fda:	0e f4       	brtc	.+2      	; 0x9fde <__addsf3x+0x1c>
    9fdc:	e0 95       	com	r30
    9fde:	0b 2e       	mov	r0, r27
    9fe0:	ba 2f       	mov	r27, r26
    9fe2:	a0 2d       	mov	r26, r0
    9fe4:	0b 01       	movw	r0, r22
    9fe6:	b9 01       	movw	r22, r18
    9fe8:	90 01       	movw	r18, r0
    9fea:	0c 01       	movw	r0, r24
    9fec:	ca 01       	movw	r24, r20
    9fee:	a0 01       	movw	r20, r0
    9ff0:	11 24       	eor	r1, r1
    9ff2:	ff 27       	eor	r31, r31
    9ff4:	59 1b       	sub	r21, r25
    9ff6:	99 f0       	breq	.+38     	; 0xa01e <__addsf3x+0x5c>
    9ff8:	59 3f       	cpi	r21, 0xF9	; 249
    9ffa:	50 f4       	brcc	.+20     	; 0xa010 <__addsf3x+0x4e>
    9ffc:	50 3e       	cpi	r21, 0xE0	; 224
    9ffe:	68 f1       	brcs	.+90     	; 0xa05a <__addsf3x+0x98>
    a000:	1a 16       	cp	r1, r26
    a002:	f0 40       	sbci	r31, 0x00	; 0
    a004:	a2 2f       	mov	r26, r18
    a006:	23 2f       	mov	r18, r19
    a008:	34 2f       	mov	r19, r20
    a00a:	44 27       	eor	r20, r20
    a00c:	58 5f       	subi	r21, 0xF8	; 248
    a00e:	f3 cf       	rjmp	.-26     	; 0x9ff6 <__addsf3x+0x34>
    a010:	46 95       	lsr	r20
    a012:	37 95       	ror	r19
    a014:	27 95       	ror	r18
    a016:	a7 95       	ror	r26
    a018:	f0 40       	sbci	r31, 0x00	; 0
    a01a:	53 95       	inc	r21
    a01c:	c9 f7       	brne	.-14     	; 0xa010 <__addsf3x+0x4e>
    a01e:	7e f4       	brtc	.+30     	; 0xa03e <__addsf3x+0x7c>
    a020:	1f 16       	cp	r1, r31
    a022:	ba 0b       	sbc	r27, r26
    a024:	62 0b       	sbc	r22, r18
    a026:	73 0b       	sbc	r23, r19
    a028:	84 0b       	sbc	r24, r20
    a02a:	ba f0       	brmi	.+46     	; 0xa05a <__addsf3x+0x98>
    a02c:	91 50       	subi	r25, 0x01	; 1
    a02e:	a1 f0       	breq	.+40     	; 0xa058 <__addsf3x+0x96>
    a030:	ff 0f       	add	r31, r31
    a032:	bb 1f       	adc	r27, r27
    a034:	66 1f       	adc	r22, r22
    a036:	77 1f       	adc	r23, r23
    a038:	88 1f       	adc	r24, r24
    a03a:	c2 f7       	brpl	.-16     	; 0xa02c <__addsf3x+0x6a>
    a03c:	0e c0       	rjmp	.+28     	; 0xa05a <__addsf3x+0x98>
    a03e:	ba 0f       	add	r27, r26
    a040:	62 1f       	adc	r22, r18
    a042:	73 1f       	adc	r23, r19
    a044:	84 1f       	adc	r24, r20
    a046:	48 f4       	brcc	.+18     	; 0xa05a <__addsf3x+0x98>
    a048:	87 95       	ror	r24
    a04a:	77 95       	ror	r23
    a04c:	67 95       	ror	r22
    a04e:	b7 95       	ror	r27
    a050:	f7 95       	ror	r31
    a052:	9e 3f       	cpi	r25, 0xFE	; 254
    a054:	08 f0       	brcs	.+2      	; 0xa058 <__addsf3x+0x96>
    a056:	b3 cf       	rjmp	.-154    	; 0x9fbe <__addsf3+0x1e>
    a058:	93 95       	inc	r25
    a05a:	88 0f       	add	r24, r24
    a05c:	08 f0       	brcs	.+2      	; 0xa060 <__addsf3x+0x9e>
    a05e:	99 27       	eor	r25, r25
    a060:	ee 0f       	add	r30, r30
    a062:	97 95       	ror	r25
    a064:	87 95       	ror	r24
    a066:	08 95       	ret

0000a068 <__fixunssfsi>:
    a068:	98 d0       	rcall	.+304    	; 0xa19a <__fp_splitA>
    a06a:	88 f0       	brcs	.+34     	; 0xa08e <__fixunssfsi+0x26>
    a06c:	9f 57       	subi	r25, 0x7F	; 127
    a06e:	90 f0       	brcs	.+36     	; 0xa094 <__fixunssfsi+0x2c>
    a070:	b9 2f       	mov	r27, r25
    a072:	99 27       	eor	r25, r25
    a074:	b7 51       	subi	r27, 0x17	; 23
    a076:	a0 f0       	brcs	.+40     	; 0xa0a0 <__fixunssfsi+0x38>
    a078:	d1 f0       	breq	.+52     	; 0xa0ae <__fixunssfsi+0x46>
    a07a:	66 0f       	add	r22, r22
    a07c:	77 1f       	adc	r23, r23
    a07e:	88 1f       	adc	r24, r24
    a080:	99 1f       	adc	r25, r25
    a082:	1a f0       	brmi	.+6      	; 0xa08a <__fixunssfsi+0x22>
    a084:	ba 95       	dec	r27
    a086:	c9 f7       	brne	.-14     	; 0xa07a <__fixunssfsi+0x12>
    a088:	12 c0       	rjmp	.+36     	; 0xa0ae <__fixunssfsi+0x46>
    a08a:	b1 30       	cpi	r27, 0x01	; 1
    a08c:	81 f0       	breq	.+32     	; 0xa0ae <__fixunssfsi+0x46>
    a08e:	9f d0       	rcall	.+318    	; 0xa1ce <__fp_zero>
    a090:	b1 e0       	ldi	r27, 0x01	; 1
    a092:	08 95       	ret
    a094:	9c c0       	rjmp	.+312    	; 0xa1ce <__fp_zero>
    a096:	67 2f       	mov	r22, r23
    a098:	78 2f       	mov	r23, r24
    a09a:	88 27       	eor	r24, r24
    a09c:	b8 5f       	subi	r27, 0xF8	; 248
    a09e:	39 f0       	breq	.+14     	; 0xa0ae <__fixunssfsi+0x46>
    a0a0:	b9 3f       	cpi	r27, 0xF9	; 249
    a0a2:	cc f3       	brlt	.-14     	; 0xa096 <__fixunssfsi+0x2e>
    a0a4:	86 95       	lsr	r24
    a0a6:	77 95       	ror	r23
    a0a8:	67 95       	ror	r22
    a0aa:	b3 95       	inc	r27
    a0ac:	d9 f7       	brne	.-10     	; 0xa0a4 <__fixunssfsi+0x3c>
    a0ae:	3e f4       	brtc	.+14     	; 0xa0be <__fixunssfsi+0x56>
    a0b0:	90 95       	com	r25
    a0b2:	80 95       	com	r24
    a0b4:	70 95       	com	r23
    a0b6:	61 95       	neg	r22
    a0b8:	7f 4f       	sbci	r23, 0xFF	; 255
    a0ba:	8f 4f       	sbci	r24, 0xFF	; 255
    a0bc:	9f 4f       	sbci	r25, 0xFF	; 255
    a0be:	08 95       	ret

0000a0c0 <__floatunsisf>:
    a0c0:	e8 94       	clt
    a0c2:	09 c0       	rjmp	.+18     	; 0xa0d6 <__floatsisf+0x12>

0000a0c4 <__floatsisf>:
    a0c4:	97 fb       	bst	r25, 7
    a0c6:	3e f4       	brtc	.+14     	; 0xa0d6 <__floatsisf+0x12>
    a0c8:	90 95       	com	r25
    a0ca:	80 95       	com	r24
    a0cc:	70 95       	com	r23
    a0ce:	61 95       	neg	r22
    a0d0:	7f 4f       	sbci	r23, 0xFF	; 255
    a0d2:	8f 4f       	sbci	r24, 0xFF	; 255
    a0d4:	9f 4f       	sbci	r25, 0xFF	; 255
    a0d6:	99 23       	and	r25, r25
    a0d8:	a9 f0       	breq	.+42     	; 0xa104 <__floatsisf+0x40>
    a0da:	f9 2f       	mov	r31, r25
    a0dc:	96 e9       	ldi	r25, 0x96	; 150
    a0de:	bb 27       	eor	r27, r27
    a0e0:	93 95       	inc	r25
    a0e2:	f6 95       	lsr	r31
    a0e4:	87 95       	ror	r24
    a0e6:	77 95       	ror	r23
    a0e8:	67 95       	ror	r22
    a0ea:	b7 95       	ror	r27
    a0ec:	f1 11       	cpse	r31, r1
    a0ee:	f8 cf       	rjmp	.-16     	; 0xa0e0 <__floatsisf+0x1c>
    a0f0:	fa f4       	brpl	.+62     	; 0xa130 <__floatsisf+0x6c>
    a0f2:	bb 0f       	add	r27, r27
    a0f4:	11 f4       	brne	.+4      	; 0xa0fa <__floatsisf+0x36>
    a0f6:	60 ff       	sbrs	r22, 0
    a0f8:	1b c0       	rjmp	.+54     	; 0xa130 <__floatsisf+0x6c>
    a0fa:	6f 5f       	subi	r22, 0xFF	; 255
    a0fc:	7f 4f       	sbci	r23, 0xFF	; 255
    a0fe:	8f 4f       	sbci	r24, 0xFF	; 255
    a100:	9f 4f       	sbci	r25, 0xFF	; 255
    a102:	16 c0       	rjmp	.+44     	; 0xa130 <__floatsisf+0x6c>
    a104:	88 23       	and	r24, r24
    a106:	11 f0       	breq	.+4      	; 0xa10c <__floatsisf+0x48>
    a108:	96 e9       	ldi	r25, 0x96	; 150
    a10a:	11 c0       	rjmp	.+34     	; 0xa12e <__floatsisf+0x6a>
    a10c:	77 23       	and	r23, r23
    a10e:	21 f0       	breq	.+8      	; 0xa118 <__floatsisf+0x54>
    a110:	9e e8       	ldi	r25, 0x8E	; 142
    a112:	87 2f       	mov	r24, r23
    a114:	76 2f       	mov	r23, r22
    a116:	05 c0       	rjmp	.+10     	; 0xa122 <__floatsisf+0x5e>
    a118:	66 23       	and	r22, r22
    a11a:	71 f0       	breq	.+28     	; 0xa138 <__floatsisf+0x74>
    a11c:	96 e8       	ldi	r25, 0x86	; 134
    a11e:	86 2f       	mov	r24, r22
    a120:	70 e0       	ldi	r23, 0x00	; 0
    a122:	60 e0       	ldi	r22, 0x00	; 0
    a124:	2a f0       	brmi	.+10     	; 0xa130 <__floatsisf+0x6c>
    a126:	9a 95       	dec	r25
    a128:	66 0f       	add	r22, r22
    a12a:	77 1f       	adc	r23, r23
    a12c:	88 1f       	adc	r24, r24
    a12e:	da f7       	brpl	.-10     	; 0xa126 <__floatsisf+0x62>
    a130:	88 0f       	add	r24, r24
    a132:	96 95       	lsr	r25
    a134:	87 95       	ror	r24
    a136:	97 f9       	bld	r25, 7
    a138:	08 95       	ret

0000a13a <__fp_inf>:
    a13a:	97 f9       	bld	r25, 7
    a13c:	9f 67       	ori	r25, 0x7F	; 127
    a13e:	80 e8       	ldi	r24, 0x80	; 128
    a140:	70 e0       	ldi	r23, 0x00	; 0
    a142:	60 e0       	ldi	r22, 0x00	; 0
    a144:	08 95       	ret

0000a146 <__fp_nan>:
    a146:	9f ef       	ldi	r25, 0xFF	; 255
    a148:	80 ec       	ldi	r24, 0xC0	; 192
    a14a:	08 95       	ret

0000a14c <__fp_pscA>:
    a14c:	00 24       	eor	r0, r0
    a14e:	0a 94       	dec	r0
    a150:	16 16       	cp	r1, r22
    a152:	17 06       	cpc	r1, r23
    a154:	18 06       	cpc	r1, r24
    a156:	09 06       	cpc	r0, r25
    a158:	08 95       	ret

0000a15a <__fp_pscB>:
    a15a:	00 24       	eor	r0, r0
    a15c:	0a 94       	dec	r0
    a15e:	12 16       	cp	r1, r18
    a160:	13 06       	cpc	r1, r19
    a162:	14 06       	cpc	r1, r20
    a164:	05 06       	cpc	r0, r21
    a166:	08 95       	ret

0000a168 <__fp_round>:
    a168:	09 2e       	mov	r0, r25
    a16a:	03 94       	inc	r0
    a16c:	00 0c       	add	r0, r0
    a16e:	11 f4       	brne	.+4      	; 0xa174 <__fp_round+0xc>
    a170:	88 23       	and	r24, r24
    a172:	52 f0       	brmi	.+20     	; 0xa188 <__fp_round+0x20>
    a174:	bb 0f       	add	r27, r27
    a176:	40 f4       	brcc	.+16     	; 0xa188 <__fp_round+0x20>
    a178:	bf 2b       	or	r27, r31
    a17a:	11 f4       	brne	.+4      	; 0xa180 <__fp_round+0x18>
    a17c:	60 ff       	sbrs	r22, 0
    a17e:	04 c0       	rjmp	.+8      	; 0xa188 <__fp_round+0x20>
    a180:	6f 5f       	subi	r22, 0xFF	; 255
    a182:	7f 4f       	sbci	r23, 0xFF	; 255
    a184:	8f 4f       	sbci	r24, 0xFF	; 255
    a186:	9f 4f       	sbci	r25, 0xFF	; 255
    a188:	08 95       	ret

0000a18a <__fp_split3>:
    a18a:	57 fd       	sbrc	r21, 7
    a18c:	90 58       	subi	r25, 0x80	; 128
    a18e:	44 0f       	add	r20, r20
    a190:	55 1f       	adc	r21, r21
    a192:	59 f0       	breq	.+22     	; 0xa1aa <__fp_splitA+0x10>
    a194:	5f 3f       	cpi	r21, 0xFF	; 255
    a196:	71 f0       	breq	.+28     	; 0xa1b4 <__fp_splitA+0x1a>
    a198:	47 95       	ror	r20

0000a19a <__fp_splitA>:
    a19a:	88 0f       	add	r24, r24
    a19c:	97 fb       	bst	r25, 7
    a19e:	99 1f       	adc	r25, r25
    a1a0:	61 f0       	breq	.+24     	; 0xa1ba <__fp_splitA+0x20>
    a1a2:	9f 3f       	cpi	r25, 0xFF	; 255
    a1a4:	79 f0       	breq	.+30     	; 0xa1c4 <__fp_splitA+0x2a>
    a1a6:	87 95       	ror	r24
    a1a8:	08 95       	ret
    a1aa:	12 16       	cp	r1, r18
    a1ac:	13 06       	cpc	r1, r19
    a1ae:	14 06       	cpc	r1, r20
    a1b0:	55 1f       	adc	r21, r21
    a1b2:	f2 cf       	rjmp	.-28     	; 0xa198 <__fp_split3+0xe>
    a1b4:	46 95       	lsr	r20
    a1b6:	f1 df       	rcall	.-30     	; 0xa19a <__fp_splitA>
    a1b8:	08 c0       	rjmp	.+16     	; 0xa1ca <__fp_splitA+0x30>
    a1ba:	16 16       	cp	r1, r22
    a1bc:	17 06       	cpc	r1, r23
    a1be:	18 06       	cpc	r1, r24
    a1c0:	99 1f       	adc	r25, r25
    a1c2:	f1 cf       	rjmp	.-30     	; 0xa1a6 <__fp_splitA+0xc>
    a1c4:	86 95       	lsr	r24
    a1c6:	71 05       	cpc	r23, r1
    a1c8:	61 05       	cpc	r22, r1
    a1ca:	08 94       	sec
    a1cc:	08 95       	ret

0000a1ce <__fp_zero>:
    a1ce:	e8 94       	clt

0000a1d0 <__fp_szero>:
    a1d0:	bb 27       	eor	r27, r27
    a1d2:	66 27       	eor	r22, r22
    a1d4:	77 27       	eor	r23, r23
    a1d6:	cb 01       	movw	r24, r22
    a1d8:	97 f9       	bld	r25, 7
    a1da:	08 95       	ret

0000a1dc <__mulsf3>:
    a1dc:	0b d0       	rcall	.+22     	; 0xa1f4 <__mulsf3x>
    a1de:	c4 cf       	rjmp	.-120    	; 0xa168 <__fp_round>
    a1e0:	b5 df       	rcall	.-150    	; 0xa14c <__fp_pscA>
    a1e2:	28 f0       	brcs	.+10     	; 0xa1ee <__mulsf3+0x12>
    a1e4:	ba df       	rcall	.-140    	; 0xa15a <__fp_pscB>
    a1e6:	18 f0       	brcs	.+6      	; 0xa1ee <__mulsf3+0x12>
    a1e8:	95 23       	and	r25, r21
    a1ea:	09 f0       	breq	.+2      	; 0xa1ee <__mulsf3+0x12>
    a1ec:	a6 cf       	rjmp	.-180    	; 0xa13a <__fp_inf>
    a1ee:	ab cf       	rjmp	.-170    	; 0xa146 <__fp_nan>
    a1f0:	11 24       	eor	r1, r1
    a1f2:	ee cf       	rjmp	.-36     	; 0xa1d0 <__fp_szero>

0000a1f4 <__mulsf3x>:
    a1f4:	ca df       	rcall	.-108    	; 0xa18a <__fp_split3>
    a1f6:	a0 f3       	brcs	.-24     	; 0xa1e0 <__mulsf3+0x4>

0000a1f8 <__mulsf3_pse>:
    a1f8:	95 9f       	mul	r25, r21
    a1fa:	d1 f3       	breq	.-12     	; 0xa1f0 <__mulsf3+0x14>
    a1fc:	95 0f       	add	r25, r21
    a1fe:	50 e0       	ldi	r21, 0x00	; 0
    a200:	55 1f       	adc	r21, r21
    a202:	62 9f       	mul	r22, r18
    a204:	f0 01       	movw	r30, r0
    a206:	72 9f       	mul	r23, r18
    a208:	bb 27       	eor	r27, r27
    a20a:	f0 0d       	add	r31, r0
    a20c:	b1 1d       	adc	r27, r1
    a20e:	63 9f       	mul	r22, r19
    a210:	aa 27       	eor	r26, r26
    a212:	f0 0d       	add	r31, r0
    a214:	b1 1d       	adc	r27, r1
    a216:	aa 1f       	adc	r26, r26
    a218:	64 9f       	mul	r22, r20
    a21a:	66 27       	eor	r22, r22
    a21c:	b0 0d       	add	r27, r0
    a21e:	a1 1d       	adc	r26, r1
    a220:	66 1f       	adc	r22, r22
    a222:	82 9f       	mul	r24, r18
    a224:	22 27       	eor	r18, r18
    a226:	b0 0d       	add	r27, r0
    a228:	a1 1d       	adc	r26, r1
    a22a:	62 1f       	adc	r22, r18
    a22c:	73 9f       	mul	r23, r19
    a22e:	b0 0d       	add	r27, r0
    a230:	a1 1d       	adc	r26, r1
    a232:	62 1f       	adc	r22, r18
    a234:	83 9f       	mul	r24, r19
    a236:	a0 0d       	add	r26, r0
    a238:	61 1d       	adc	r22, r1
    a23a:	22 1f       	adc	r18, r18
    a23c:	74 9f       	mul	r23, r20
    a23e:	33 27       	eor	r19, r19
    a240:	a0 0d       	add	r26, r0
    a242:	61 1d       	adc	r22, r1
    a244:	23 1f       	adc	r18, r19
    a246:	84 9f       	mul	r24, r20
    a248:	60 0d       	add	r22, r0
    a24a:	21 1d       	adc	r18, r1
    a24c:	82 2f       	mov	r24, r18
    a24e:	76 2f       	mov	r23, r22
    a250:	6a 2f       	mov	r22, r26
    a252:	11 24       	eor	r1, r1
    a254:	9f 57       	subi	r25, 0x7F	; 127
    a256:	50 40       	sbci	r21, 0x00	; 0
    a258:	8a f0       	brmi	.+34     	; 0xa27c <__mulsf3_pse+0x84>
    a25a:	e1 f0       	breq	.+56     	; 0xa294 <__mulsf3_pse+0x9c>
    a25c:	88 23       	and	r24, r24
    a25e:	4a f0       	brmi	.+18     	; 0xa272 <__mulsf3_pse+0x7a>
    a260:	ee 0f       	add	r30, r30
    a262:	ff 1f       	adc	r31, r31
    a264:	bb 1f       	adc	r27, r27
    a266:	66 1f       	adc	r22, r22
    a268:	77 1f       	adc	r23, r23
    a26a:	88 1f       	adc	r24, r24
    a26c:	91 50       	subi	r25, 0x01	; 1
    a26e:	50 40       	sbci	r21, 0x00	; 0
    a270:	a9 f7       	brne	.-22     	; 0xa25c <__mulsf3_pse+0x64>
    a272:	9e 3f       	cpi	r25, 0xFE	; 254
    a274:	51 05       	cpc	r21, r1
    a276:	70 f0       	brcs	.+28     	; 0xa294 <__mulsf3_pse+0x9c>
    a278:	60 cf       	rjmp	.-320    	; 0xa13a <__fp_inf>
    a27a:	aa cf       	rjmp	.-172    	; 0xa1d0 <__fp_szero>
    a27c:	5f 3f       	cpi	r21, 0xFF	; 255
    a27e:	ec f3       	brlt	.-6      	; 0xa27a <__mulsf3_pse+0x82>
    a280:	98 3e       	cpi	r25, 0xE8	; 232
    a282:	dc f3       	brlt	.-10     	; 0xa27a <__mulsf3_pse+0x82>
    a284:	86 95       	lsr	r24
    a286:	77 95       	ror	r23
    a288:	67 95       	ror	r22
    a28a:	b7 95       	ror	r27
    a28c:	f7 95       	ror	r31
    a28e:	e7 95       	ror	r30
    a290:	9f 5f       	subi	r25, 0xFF	; 255
    a292:	c1 f7       	brne	.-16     	; 0xa284 <__mulsf3_pse+0x8c>
    a294:	fe 2b       	or	r31, r30
    a296:	88 0f       	add	r24, r24
    a298:	91 1d       	adc	r25, r1
    a29a:	96 95       	lsr	r25
    a29c:	87 95       	ror	r24
    a29e:	97 f9       	bld	r25, 7
    a2a0:	08 95       	ret

0000a2a2 <__mulsi3>:
    a2a2:	db 01       	movw	r26, r22
    a2a4:	8f 93       	push	r24
    a2a6:	9f 93       	push	r25
    a2a8:	8e d0       	rcall	.+284    	; 0xa3c6 <__muluhisi3>
    a2aa:	bf 91       	pop	r27
    a2ac:	af 91       	pop	r26
    a2ae:	a2 9f       	mul	r26, r18
    a2b0:	80 0d       	add	r24, r0
    a2b2:	91 1d       	adc	r25, r1
    a2b4:	a3 9f       	mul	r26, r19
    a2b6:	90 0d       	add	r25, r0
    a2b8:	b2 9f       	mul	r27, r18
    a2ba:	90 0d       	add	r25, r0
    a2bc:	11 24       	eor	r1, r1
    a2be:	08 95       	ret

0000a2c0 <__udivmodhi4>:
    a2c0:	aa 1b       	sub	r26, r26
    a2c2:	bb 1b       	sub	r27, r27
    a2c4:	51 e1       	ldi	r21, 0x11	; 17
    a2c6:	07 c0       	rjmp	.+14     	; 0xa2d6 <__udivmodhi4_ep>

0000a2c8 <__udivmodhi4_loop>:
    a2c8:	aa 1f       	adc	r26, r26
    a2ca:	bb 1f       	adc	r27, r27
    a2cc:	a6 17       	cp	r26, r22
    a2ce:	b7 07       	cpc	r27, r23
    a2d0:	10 f0       	brcs	.+4      	; 0xa2d6 <__udivmodhi4_ep>
    a2d2:	a6 1b       	sub	r26, r22
    a2d4:	b7 0b       	sbc	r27, r23

0000a2d6 <__udivmodhi4_ep>:
    a2d6:	88 1f       	adc	r24, r24
    a2d8:	99 1f       	adc	r25, r25
    a2da:	5a 95       	dec	r21
    a2dc:	a9 f7       	brne	.-22     	; 0xa2c8 <__udivmodhi4_loop>
    a2de:	80 95       	com	r24
    a2e0:	90 95       	com	r25
    a2e2:	bc 01       	movw	r22, r24
    a2e4:	cd 01       	movw	r24, r26
    a2e6:	08 95       	ret

0000a2e8 <__divmodhi4>:
    a2e8:	97 fb       	bst	r25, 7
    a2ea:	07 2e       	mov	r0, r23
    a2ec:	16 f4       	brtc	.+4      	; 0xa2f2 <__divmodhi4+0xa>
    a2ee:	00 94       	com	r0
    a2f0:	06 d0       	rcall	.+12     	; 0xa2fe <__divmodhi4_neg1>
    a2f2:	77 fd       	sbrc	r23, 7
    a2f4:	08 d0       	rcall	.+16     	; 0xa306 <__divmodhi4_neg2>
    a2f6:	e4 df       	rcall	.-56     	; 0xa2c0 <__udivmodhi4>
    a2f8:	07 fc       	sbrc	r0, 7
    a2fa:	05 d0       	rcall	.+10     	; 0xa306 <__divmodhi4_neg2>
    a2fc:	3e f4       	brtc	.+14     	; 0xa30c <__divmodhi4_exit>

0000a2fe <__divmodhi4_neg1>:
    a2fe:	90 95       	com	r25
    a300:	81 95       	neg	r24
    a302:	9f 4f       	sbci	r25, 0xFF	; 255
    a304:	08 95       	ret

0000a306 <__divmodhi4_neg2>:
    a306:	70 95       	com	r23
    a308:	61 95       	neg	r22
    a30a:	7f 4f       	sbci	r23, 0xFF	; 255

0000a30c <__divmodhi4_exit>:
    a30c:	08 95       	ret

0000a30e <__udivmodsi4>:
    a30e:	a1 e2       	ldi	r26, 0x21	; 33
    a310:	1a 2e       	mov	r1, r26
    a312:	aa 1b       	sub	r26, r26
    a314:	bb 1b       	sub	r27, r27
    a316:	fd 01       	movw	r30, r26
    a318:	0d c0       	rjmp	.+26     	; 0xa334 <__udivmodsi4_ep>

0000a31a <__udivmodsi4_loop>:
    a31a:	aa 1f       	adc	r26, r26
    a31c:	bb 1f       	adc	r27, r27
    a31e:	ee 1f       	adc	r30, r30
    a320:	ff 1f       	adc	r31, r31
    a322:	a2 17       	cp	r26,