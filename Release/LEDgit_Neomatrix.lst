
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	15 c4       	rjmp	.+2090   	; 0x82c <__dtors_end>
       2:	00 00       	nop
       4:	3d c4       	rjmp	.+2170   	; 0x880 <__bad_interrupt>
       6:	00 00       	nop
       8:	3b c4       	rjmp	.+2166   	; 0x880 <__bad_interrupt>
       a:	00 00       	nop
       c:	39 c4       	rjmp	.+2162   	; 0x880 <__bad_interrupt>
       e:	00 00       	nop
      10:	37 c4       	rjmp	.+2158   	; 0x880 <__bad_interrupt>
      12:	00 00       	nop
      14:	35 c4       	rjmp	.+2154   	; 0x880 <__bad_interrupt>
      16:	00 00       	nop
      18:	33 c4       	rjmp	.+2150   	; 0x880 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	31 c4       	rjmp	.+2146   	; 0x880 <__bad_interrupt>
      1e:	00 00       	nop
      20:	2f c4       	rjmp	.+2142   	; 0x880 <__bad_interrupt>
      22:	00 00       	nop
      24:	2d c4       	rjmp	.+2138   	; 0x880 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 d9 2c 	jmp	0x59b2	; 0x59b2 <__vector_10>
      2c:	0c 94 56 2d 	jmp	0x5aac	; 0x5aac <__vector_11>
      30:	27 c4       	rjmp	.+2126   	; 0x880 <__bad_interrupt>
      32:	00 00       	nop
      34:	25 c4       	rjmp	.+2122   	; 0x880 <__bad_interrupt>
      36:	00 00       	nop
      38:	23 c4       	rjmp	.+2118   	; 0x880 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	21 c4       	rjmp	.+2114   	; 0x880 <__bad_interrupt>
      3e:	00 00       	nop
      40:	1f c4       	rjmp	.+2110   	; 0x880 <__bad_interrupt>
      42:	00 00       	nop
      44:	1d c4       	rjmp	.+2106   	; 0x880 <__bad_interrupt>
      46:	00 00       	nop
      48:	1b c4       	rjmp	.+2102   	; 0x880 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	19 c4       	rjmp	.+2098   	; 0x880 <__bad_interrupt>
      4e:	00 00       	nop
      50:	17 c4       	rjmp	.+2094   	; 0x880 <__bad_interrupt>
      52:	00 00       	nop
      54:	15 c4       	rjmp	.+2090   	; 0x880 <__bad_interrupt>
      56:	00 00       	nop
      58:	13 c4       	rjmp	.+2086   	; 0x880 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 38 2c 	jmp	0x5870	; 0x5870 <__vector_23>
      60:	0f c4       	rjmp	.+2078   	; 0x880 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 94 2f 	jmp	0x5f28	; 0x5f28 <__vector_25>
      68:	0c 94 bf 2f 	jmp	0x5f7e	; 0x5f7e <__vector_26>
      6c:	0c 94 f0 2f 	jmp	0x5fe0	; 0x5fe0 <__vector_27>
      70:	07 c4       	rjmp	.+2062   	; 0x880 <__bad_interrupt>
      72:	00 00       	nop
      74:	05 c4       	rjmp	.+2058   	; 0x880 <__bad_interrupt>
      76:	00 00       	nop
      78:	03 c4       	rjmp	.+2054   	; 0x880 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	01 c4       	rjmp	.+2050   	; 0x880 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 c8 10 	jmp	0x2190	; 0x2190 <__vector_32>
      84:	fd c3       	rjmp	.+2042   	; 0x880 <__bad_interrupt>
      86:	00 00       	nop
      88:	fb c3       	rjmp	.+2038   	; 0x880 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f9 c3       	rjmp	.+2034   	; 0x880 <__bad_interrupt>
      8e:	00 00       	nop
      90:	f7 c3       	rjmp	.+2030   	; 0x880 <__bad_interrupt>
      92:	00 00       	nop
      94:	f5 c3       	rjmp	.+2026   	; 0x880 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__heap_start+0x6d32>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	55 00       	.word	0x0055	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	55 aa       	std	Z+53, r5	; 0x35
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	ff 55       	subi	r31, 0x5F	; 95
     414:	ff 55       	subi	r31, 0x5F	; 95
     416:	ff 00       	.word	0x00ff	; ????
     418:	00 00       	nop
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	10 10       	cpse	r1, r0
     41e:	10 ff       	sbrs	r17, 0
     420:	00 14       	cp	r0, r0
     422:	14 14       	cp	r1, r4
     424:	ff 00       	.word	0x00ff	; ????
     426:	10 10       	cpse	r1, r0
     428:	ff 00       	.word	0x00ff	; ????
     42a:	ff 10       	cpse	r15, r15
     42c:	10 f0       	brcs	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	10 f0       	brcs	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	14 14       	cp	r1, r4
     432:	14 fc       	sbrc	r1, 4
     434:	00 14       	cp	r0, r0
     436:	14 f7       	brge	.-60     	; 0x3fc <__trampolines_end+0x364>
     438:	00 ff       	sbrs	r16, 0
     43a:	00 00       	nop
     43c:	ff 00       	.word	0x00ff	; ????
     43e:	ff 14       	cp	r15, r15
     440:	14 f4       	brge	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     442:	04 fc       	sbrc	r0, 4
     444:	14 14       	cp	r1, r4
     446:	17 10       	cpse	r1, r7
     448:	1f 10       	cpse	r1, r15
     44a:	10 1f       	adc	r17, r16
     44c:	10 1f       	adc	r17, r16
     44e:	14 14       	cp	r1, r4
     450:	14 1f       	adc	r17, r20
     452:	00 10       	cpse	r0, r0
     454:	10 10       	cpse	r1, r0
     456:	f0 00       	.word	0x00f0	; ????
     458:	00 00       	nop
     45a:	00 1f       	adc	r16, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	1f 10       	cpse	r1, r15
     462:	10 10       	cpse	r1, r0
     464:	10 f0       	brcs	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     466:	10 00       	.word	0x0010	; ????
     468:	00 00       	nop
     46a:	ff 10       	cpse	r15, r15
     46c:	10 10       	cpse	r1, r0
     46e:	10 10       	cpse	r1, r0
     470:	10 10       	cpse	r1, r0
     472:	10 10       	cpse	r1, r0
     474:	ff 10       	cpse	r15, r15
     476:	00 00       	nop
     478:	00 ff       	sbrs	r16, 0
     47a:	14 00       	.word	0x0014	; ????
     47c:	00 ff       	sbrs	r16, 0
     47e:	00 ff       	sbrs	r16, 0
     480:	00 00       	nop
     482:	1f 10       	cpse	r1, r15
     484:	17 00       	.word	0x0017	; ????
     486:	00 fc       	sbrc	r0, 0
     488:	04 f4       	brge	.+0      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     48a:	14 14       	cp	r1, r4
     48c:	17 10       	cpse	r1, r7
     48e:	17 14       	cp	r1, r7
     490:	14 f4       	brge	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	04 f4       	brge	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	00 00       	nop
     496:	ff 00       	.word	0x00ff	; ????
     498:	f7 14       	cp	r15, r7
     49a:	14 14       	cp	r1, r4
     49c:	14 14       	cp	r1, r4
     49e:	14 14       	cp	r1, r4
     4a0:	f7 00       	.word	0x00f7	; ????
     4a2:	f7 14       	cp	r15, r7
     4a4:	14 14       	cp	r1, r4
     4a6:	17 14       	cp	r1, r7
     4a8:	10 10       	cpse	r1, r0
     4aa:	1f 10       	cpse	r1, r15
     4ac:	1f 14       	cp	r1, r15
     4ae:	14 14       	cp	r1, r4
     4b0:	f4 14       	cp	r15, r4
     4b2:	10 10       	cpse	r1, r0
     4b4:	f0 10       	cpse	r15, r0
     4b6:	f0 00       	.word	0x00f0	; ????
     4b8:	00 1f       	adc	r16, r16
     4ba:	10 1f       	adc	r17, r16
     4bc:	00 00       	nop
     4be:	00 1f       	adc	r16, r16
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 00       	nop
     4c4:	fc 14       	cp	r15, r12
     4c6:	00 00       	nop
     4c8:	f0 10       	cpse	r15, r0
     4ca:	f0 10       	cpse	r15, r0
     4cc:	10 ff       	sbrs	r17, 0
     4ce:	10 ff       	sbrs	r17, 0
     4d0:	14 14       	cp	r1, r4
     4d2:	14 ff       	sbrs	r17, 4
     4d4:	14 10       	cpse	r1, r4
     4d6:	10 10       	cpse	r1, r0
     4d8:	1f 00       	.word	0x001f	; ????
     4da:	00 00       	nop
     4dc:	00 f0       	brcs	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4de:	10 ff       	sbrs	r17, 0
     4e0:	ff ff       	.word	0xffff	; ????
     4e2:	ff ff       	.word	0xffff	; ????
     4e4:	f0 f0       	brcs	.+60     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     4e6:	f0 f0       	brcs	.+60     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     4e8:	f0 ff       	sbrs	r31, 0
     4ea:	ff ff       	.word	0xffff	; ????
     4ec:	00 00       	nop
     4ee:	00 00       	nop
     4f0:	00 ff       	sbrs	r16, 0
     4f2:	ff 0f       	add	r31, r31
     4f4:	0f 0f       	add	r16, r31
     4f6:	0f 0f       	add	r16, r31
     4f8:	38 44       	sbci	r19, 0x48	; 72
     4fa:	44 38       	cpi	r20, 0x84	; 132
     4fc:	44 fc       	sbrc	r4, 4
     4fe:	4a 4a       	sbci	r20, 0xAA	; 170
     500:	4a 34       	cpi	r20, 0x4A	; 74
     502:	7e 02       	muls	r23, r30
     504:	02 06       	cpc	r0, r18
     506:	06 02       	muls	r16, r22
     508:	7e 02       	muls	r23, r30
     50a:	7e 02       	muls	r23, r30
     50c:	63 55       	subi	r22, 0x53	; 83
     50e:	49 41       	sbci	r20, 0x19	; 25
     510:	63 38       	cpi	r22, 0x83	; 131
     512:	44 44       	sbci	r20, 0x44	; 68
     514:	3c 04       	cpc	r3, r12
     516:	40 7e       	andi	r20, 0xE0	; 224
     518:	20 1e       	adc	r2, r16
     51a:	20 06       	cpc	r2, r16
     51c:	02 7e       	andi	r16, 0xE2	; 226
     51e:	02 02       	muls	r16, r18
     520:	99 a5       	ldd	r25, Y+41	; 0x29
     522:	e7 a5       	ldd	r30, Z+47	; 0x2f
     524:	99 1c       	adc	r9, r9
     526:	2a 49       	sbci	r18, 0x9A	; 154
     528:	2a 1c       	adc	r2, r10
     52a:	4c 72       	andi	r20, 0x2C	; 44
     52c:	01 72       	andi	r16, 0x21	; 33
     52e:	4c 30       	cpi	r20, 0x0C	; 12
     530:	4a 4d       	sbci	r20, 0xDA	; 218
     532:	4d 30       	cpi	r20, 0x0D	; 13
     534:	30 48       	sbci	r19, 0x80	; 128
     536:	78 48       	sbci	r23, 0x88	; 136
     538:	30 bc       	out	0x20, r3	; 32
     53a:	62 5a       	subi	r22, 0xA2	; 162
     53c:	46 3d       	cpi	r20, 0xD6	; 214
     53e:	3e 49       	sbci	r19, 0x9E	; 158
     540:	49 49       	sbci	r20, 0x99	; 153
     542:	00 7e       	andi	r16, 0xE0	; 224
     544:	01 01       	movw	r0, r2
     546:	01 7e       	andi	r16, 0xE1	; 225
     548:	2a 2a       	or	r2, r26
     54a:	2a 2a       	or	r2, r26
     54c:	2a 44       	sbci	r18, 0x4A	; 74
     54e:	44 5f       	subi	r20, 0xF4	; 244
     550:	44 44       	sbci	r20, 0x44	; 68
     552:	40 51       	subi	r20, 0x10	; 16
     554:	4a 44       	sbci	r20, 0x4A	; 74
     556:	40 40       	sbci	r20, 0x00	; 0
     558:	44 4a       	sbci	r20, 0xA4	; 164
     55a:	51 40       	sbci	r21, 0x01	; 1
     55c:	00 00       	nop
     55e:	ff 01       	movw	r30, r30
     560:	03 e0       	ldi	r16, 0x03	; 3
     562:	80 ff       	sbrs	r24, 0
     564:	00 00       	nop
     566:	08 08       	sbc	r0, r8
     568:	6b 6b       	ori	r22, 0xBB	; 187
     56a:	08 36       	cpi	r16, 0x68	; 104
     56c:	12 36       	cpi	r17, 0x62	; 98
     56e:	24 36       	cpi	r18, 0x64	; 100
     570:	06 0f       	add	r16, r22
     572:	09 0f       	add	r16, r25
     574:	06 00       	.word	0x0006	; ????
     576:	00 18       	sub	r0, r0
     578:	18 00       	.word	0x0018	; ????
     57a:	00 00       	nop
     57c:	10 10       	cpse	r1, r0
     57e:	00 30       	cpi	r16, 0x00	; 0
     580:	40 ff       	sbrs	r20, 0
     582:	01 01       	movw	r0, r2
     584:	00 1f       	adc	r16, r16
     586:	01 01       	movw	r0, r2
     588:	1e 00       	.word	0x001e	; ????
     58a:	19 1d       	adc	r17, r9
     58c:	17 12       	cpse	r1, r23
     58e:	00 3c       	cpi	r16, 0xC0	; 192
     590:	3c 3c       	cpi	r19, 0xCC	; 204
     592:	3c 00       	.word	0x003c	; ????
     594:	00 00       	nop
	...

00000598 <gamma6>:
     598:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5a8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5b8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     5c8:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

000005d8 <gamma5>:
     5d8:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     5e8:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

000005f8 <PartyColors_p>:
     5f8:	ab 00 55 00 7c 00 84 00 4b 00 b5 00 1b 00 e5 00     ..U.|...K.......
     608:	00 17 e8 00 00 47 b8 00 00 77 ab 00 00 ab ab 00     .....G...w......
     618:	00 55 ab 00 00 22 dd 00 0e 00 f2 00 3e 00 c2 00     .U..."......>...
     628:	71 00 8f 00 a1 00 5f 00 d0 00 2f 00 f9 07 00 00     q....._.../.....

00000638 <RainbowStripeColors_p>:
     638:	00 00 ff 00 00 00 00 00 00 55 ab 00 00 00 00 00     .........U......
     648:	00 ab ab 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     658:	55 ab 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     U...............
     668:	ab 00 55 00 00 00 00 00 55 00 ab 00 00 00 00 00     ..U.....U.......

00000678 <RainbowColors_p>:
     678:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     688:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     698:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     6a8:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

000006b8 <CloudColors_p>:
     6b8:	ff 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     6c8:	8b 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     6d8:	ff 00 00 00 8b 00 00 00 eb ce 87 00 eb ce 87 00     ................
     6e8:	e6 d8 ad 00 ff ff ff 00 e6 d8 ad 00 eb ce 87 00     ................

000006f8 <digital_pin_table_PGM>:
     6f8:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     708:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     718:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     728:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     738:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     748:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000754 <descriptor_list>:
     754:	00 01 00 00 05 08 12 00 02 00 00 c2 07 43 00 03     .............C..
     764:	00 00 be 07 04 01 03 09 04 a4 07 18 02 03 09 04     ................
     774:	8c 07 16 03 03 09 04 7e 07 0c                       .......~..

0000077e <string3>:
     77e:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

0000078c <string2>:
     78c:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     79c:	69 00 61 00 6c 00 00 00                             i.a.l...

000007a4 <string1>:
     7a4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     7b4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000007be <string0>:
     7be:	04 03 09 04                                         ....

000007c2 <config1_descriptor>:
     7c2:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     7d2:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     7e2:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     7f2:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     802:	40 00 00                                            @..

00000805 <device_descriptor>:
     805:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     815:	03 01                                               ..

00000817 <endpoint_config_table>:
     817:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000822 <__ctors_start>:
     822:	40 19       	sub	r20, r0
     824:	b4 27       	eor	r27, r20
     826:	0e 30       	cpi	r16, 0x0E	; 14
     828:	d3 32       	cpi	r29, 0x23	; 35

0000082a <__ctors_end>:
     82a:	bb 19       	sub	r27, r11

0000082c <__dtors_end>:
     82c:	11 24       	eor	r1, r1
     82e:	1f be       	out	0x3f, r1	; 63
     830:	cf ef       	ldi	r28, 0xFF	; 255
     832:	d0 e2       	ldi	r29, 0x20	; 32
     834:	de bf       	out	0x3e, r29	; 62
     836:	cd bf       	out	0x3d, r28	; 61

00000838 <__do_copy_data>:
     838:	17 e0       	ldi	r17, 0x07	; 7
     83a:	a0 e0       	ldi	r26, 0x00	; 0
     83c:	b1 e0       	ldi	r27, 0x01	; 1
     83e:	e2 ef       	ldi	r30, 0xF2	; 242
     840:	fd e6       	ldi	r31, 0x6D	; 109
     842:	00 e0       	ldi	r16, 0x00	; 0
     844:	0b bf       	out	0x3b, r16	; 59
     846:	02 c0       	rjmp	.+4      	; 0x84c <__do_copy_data+0x14>
     848:	07 90       	elpm	r0, Z+
     84a:	0d 92       	st	X+, r0
     84c:	aa 3d       	cpi	r26, 0xDA	; 218
     84e:	b1 07       	cpc	r27, r17
     850:	d9 f7       	brne	.-10     	; 0x848 <__do_copy_data+0x10>

00000852 <__do_clear_bss>:
     852:	2f e0       	ldi	r18, 0x0F	; 15
     854:	aa ed       	ldi	r26, 0xDA	; 218
     856:	b7 e0       	ldi	r27, 0x07	; 7
     858:	01 c0       	rjmp	.+2      	; 0x85c <.do_clear_bss_start>

0000085a <.do_clear_bss_loop>:
     85a:	1d 92       	st	X+, r1

0000085c <.do_clear_bss_start>:
     85c:	ab 35       	cpi	r26, 0x5B	; 91
     85e:	b2 07       	cpc	r27, r18
     860:	e1 f7       	brne	.-8      	; 0x85a <.do_clear_bss_loop>

00000862 <__do_global_ctors>:
     862:	14 e0       	ldi	r17, 0x04	; 4
     864:	c5 e1       	ldi	r28, 0x15	; 21
     866:	d4 e0       	ldi	r29, 0x04	; 4
     868:	04 c0       	rjmp	.+8      	; 0x872 <__do_global_ctors+0x10>
     86a:	21 97       	sbiw	r28, 0x01	; 1
     86c:	fe 01       	movw	r30, r28
     86e:	0e 94 02 36 	call	0x6c04	; 0x6c04 <__tablejump2__>
     872:	c1 31       	cpi	r28, 0x11	; 17
     874:	d1 07       	cpc	r29, r17
     876:	c9 f7       	brne	.-14     	; 0x86a <__do_global_ctors+0x8>
     878:	0e 94 1f 30 	call	0x603e	; 0x603e <main>
     87c:	0c 94 ed 36 	jmp	0x6dda	; 0x6dda <__do_global_dtors>

00000880 <__bad_interrupt>:
     880:	bf cb       	rjmp	.-2178   	; 0x0 <__vectors>

00000882 <CLEDController::size()>:

		// delete 1 pixel sometimes
		//if (random(0, 3) == 1) leds[random(0, anz_LEDs)] = CRGB::Black;

		FastLED.show();
	}
     882:	fc 01       	movw	r30, r24
     884:	85 85       	ldd	r24, Z+13	; 0x0d
     886:	96 85       	ldd	r25, Z+14	; 0x0e
     888:	08 95       	ret

0000088a <CLEDController::clearLeds(int)>:
     88a:	cf 93       	push	r28
     88c:	df 93       	push	r29
     88e:	00 d0       	rcall	.+0      	; 0x890 <CLEDController::clearLeds(int)+0x6>
     890:	00 d0       	rcall	.+0      	; 0x892 <CLEDController::clearLeds(int)+0x8>
     892:	00 d0       	rcall	.+0      	; 0x894 <CLEDController::clearLeds(int)+0xa>
     894:	cd b7       	in	r28, 0x3d	; 61
     896:	de b7       	in	r29, 0x3e	; 62
     898:	ab 01       	movw	r20, r22
     89a:	1c 82       	std	Y+4, r1	; 0x04
     89c:	1d 82       	std	Y+5, r1	; 0x05
     89e:	1e 82       	std	Y+6, r1	; 0x06
     8a0:	dc 01       	movw	r26, r24
     8a2:	ed 91       	ld	r30, X+
     8a4:	fc 91       	ld	r31, X
     8a6:	01 90       	ld	r0, Z+
     8a8:	f0 81       	ld	r31, Z
     8aa:	e0 2d       	mov	r30, r0
     8ac:	19 82       	std	Y+1, r1	; 0x01
     8ae:	1a 82       	std	Y+2, r1	; 0x02
     8b0:	1b 82       	std	Y+3, r1	; 0x03
     8b2:	9e 01       	movw	r18, r28
     8b4:	2f 5f       	subi	r18, 0xFF	; 255
     8b6:	3f 4f       	sbci	r19, 0xFF	; 255
     8b8:	be 01       	movw	r22, r28
     8ba:	6c 5f       	subi	r22, 0xFC	; 252
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	09 95       	icall
     8c0:	26 96       	adiw	r28, 0x06	; 6
     8c2:	0f b6       	in	r0, 0x3f	; 63
     8c4:	f8 94       	cli
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	0f be       	out	0x3f, r0	; 63
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	df 91       	pop	r29
     8ce:	cf 91       	pop	r28
     8d0:	08 95       	ret

000008d2 <myRemapFn(unsigned int, unsigned int)>:
     8d2:	67 31       	cpi	r22, 0x17	; 23
     8d4:	71 05       	cpc	r23, r1
     8d6:	08 f0       	brcs	.+2      	; 0x8da <myRemapFn(unsigned int, unsigned int)+0x8>
     8d8:	ef c0       	rjmp	.+478    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8da:	fb 01       	movw	r30, r22
     8dc:	ee 58       	subi	r30, 0x8E	; 142
     8de:	fb 4f       	sbci	r31, 0xFB	; 251
     8e0:	0c 94 02 36 	jmp	0x6c04	; 0x6c04 <__tablejump2__>
     8e4:	89 04       	cpc	r8, r9
     8e6:	94 04       	cpc	r9, r4
     8e8:	9c 04       	cpc	r9, r12
     8ea:	a9 04       	cpc	r10, r9
     8ec:	b4 04       	cpc	r11, r4
     8ee:	bb 04       	cpc	r11, r11
     8f0:	c2 04       	cpc	r12, r2
     8f2:	c9 04       	cpc	r12, r9
     8f4:	d3 04       	cpc	r13, r3
     8f6:	dd 04       	cpc	r13, r13
     8f8:	e7 04       	cpc	r14, r7
     8fa:	f1 04       	cpc	r15, r1
     8fc:	fb 04       	cpc	r15, r11
     8fe:	05 05       	cpc	r16, r5
     900:	0f 05       	cpc	r16, r15
     902:	17 05       	cpc	r17, r7
     904:	1f 05       	cpc	r17, r15
     906:	26 05       	cpc	r18, r6
     908:	2d 05       	cpc	r18, r13
     90a:	34 05       	cpc	r19, r4
     90c:	3e 05       	cpc	r19, r14
     90e:	48 05       	cpc	r20, r8
     910:	52 05       	cpc	r21, r2
     912:	04 97       	sbiw	r24, 0x04	; 4
     914:	83 30       	cpi	r24, 0x03	; 3
     916:	91 05       	cpc	r25, r1
     918:	08 f0       	brcs	.+2      	; 0x91c <myRemapFn(unsigned int, unsigned int)+0x4a>
     91a:	ce c0       	rjmp	.+412    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     91c:	8e 59       	subi	r24, 0x9E	; 158
     91e:	9c 4f       	sbci	r25, 0xFC	; 252
     920:	fc 01       	movw	r30, r24
     922:	80 81       	ld	r24, Z
     924:	90 e0       	ldi	r25, 0x00	; 0
     926:	08 95       	ret
     928:	02 97       	sbiw	r24, 0x02	; 2
     92a:	86 30       	cpi	r24, 0x06	; 6
     92c:	91 05       	cpc	r25, r1
     92e:	08 f0       	brcs	.+2      	; 0x932 <myRemapFn(unsigned int, unsigned int)+0x60>
     930:	c3 c0       	rjmp	.+390    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     932:	84 5a       	subi	r24, 0xA4	; 164
     934:	9c 4f       	sbci	r25, 0xFC	; 252
     936:	f4 cf       	rjmp	.-24     	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     938:	01 97       	sbiw	r24, 0x01	; 1
     93a:	83 31       	cpi	r24, 0x13	; 19
     93c:	91 05       	cpc	r25, r1
     93e:	08 f0       	brcs	.+2      	; 0x942 <myRemapFn(unsigned int, unsigned int)+0x70>
     940:	bb c0       	rjmp	.+374    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     942:	88 0f       	add	r24, r24
     944:	99 1f       	adc	r25, r25
     946:	fc 01       	movw	r30, r24
     948:	ea 5c       	subi	r30, 0xCA	; 202
     94a:	fc 4f       	sbci	r31, 0xFC	; 252
     94c:	80 81       	ld	r24, Z
     94e:	91 81       	ldd	r25, Z+1	; 0x01
     950:	08 95       	ret
     952:	01 97       	sbiw	r24, 0x01	; 1
     954:	85 31       	cpi	r24, 0x15	; 21
     956:	91 05       	cpc	r25, r1
     958:	08 f0       	brcs	.+2      	; 0x95c <myRemapFn(unsigned int, unsigned int)+0x8a>
     95a:	ae c0       	rjmp	.+348    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     95c:	88 0f       	add	r24, r24
     95e:	99 1f       	adc	r25, r25
     960:	fc 01       	movw	r30, r24
     962:	e4 5f       	subi	r30, 0xF4	; 244
     964:	fc 4f       	sbci	r31, 0xFC	; 252
     966:	f2 cf       	rjmp	.-28     	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     968:	84 31       	cpi	r24, 0x14	; 20
     96a:	91 05       	cpc	r25, r1
     96c:	08 f0       	brcs	.+2      	; 0x970 <myRemapFn(unsigned int, unsigned int)+0x9e>
     96e:	a4 c0       	rjmp	.+328    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     970:	88 50       	subi	r24, 0x08	; 8
     972:	9d 4f       	sbci	r25, 0xFD	; 253
     974:	d5 cf       	rjmp	.-86     	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     976:	84 31       	cpi	r24, 0x14	; 20
     978:	91 05       	cpc	r25, r1
     97a:	08 f0       	brcs	.+2      	; 0x97e <myRemapFn(unsigned int, unsigned int)+0xac>
     97c:	9d c0       	rjmp	.+314    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     97e:	8c 51       	subi	r24, 0x1C	; 28
     980:	9d 4f       	sbci	r25, 0xFD	; 253
     982:	ce cf       	rjmp	.-100    	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     984:	8f 30       	cpi	r24, 0x0F	; 15
     986:	91 05       	cpc	r25, r1
     988:	08 f0       	brcs	.+2      	; 0x98c <myRemapFn(unsigned int, unsigned int)+0xba>
     98a:	96 c0       	rjmp	.+300    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     98c:	8b 52       	subi	r24, 0x2B	; 43
     98e:	9d 4f       	sbci	r25, 0xFD	; 253
     990:	c7 cf       	rjmp	.-114    	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     992:	8f 30       	cpi	r24, 0x0F	; 15
     994:	91 05       	cpc	r25, r1
     996:	08 f0       	brcs	.+2      	; 0x99a <myRemapFn(unsigned int, unsigned int)+0xc8>
     998:	8f c0       	rjmp	.+286    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     99a:	88 0f       	add	r24, r24
     99c:	99 1f       	adc	r25, r25
     99e:	fc 01       	movw	r30, r24
     9a0:	e9 54       	subi	r30, 0x49	; 73
     9a2:	fd 4f       	sbci	r31, 0xFD	; 253
     9a4:	d3 cf       	rjmp	.-90     	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9a6:	8f 30       	cpi	r24, 0x0F	; 15
     9a8:	91 05       	cpc	r25, r1
     9aa:	08 f0       	brcs	.+2      	; 0x9ae <myRemapFn(unsigned int, unsigned int)+0xdc>
     9ac:	85 c0       	rjmp	.+266    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ae:	88 0f       	add	r24, r24
     9b0:	99 1f       	adc	r25, r25
     9b2:	fc 01       	movw	r30, r24
     9b4:	e7 56       	subi	r30, 0x67	; 103
     9b6:	fd 4f       	sbci	r31, 0xFD	; 253
     9b8:	c9 cf       	rjmp	.-110    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9ba:	8f 30       	cpi	r24, 0x0F	; 15
     9bc:	91 05       	cpc	r25, r1
     9be:	08 f0       	brcs	.+2      	; 0x9c2 <myRemapFn(unsigned int, unsigned int)+0xf0>
     9c0:	7b c0       	rjmp	.+246    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9c2:	88 0f       	add	r24, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	fc 01       	movw	r30, r24
     9c8:	e5 58       	subi	r30, 0x85	; 133
     9ca:	fd 4f       	sbci	r31, 0xFD	; 253
     9cc:	bf cf       	rjmp	.-130    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9ce:	8f 30       	cpi	r24, 0x0F	; 15
     9d0:	91 05       	cpc	r25, r1
     9d2:	08 f0       	brcs	.+2      	; 0x9d6 <myRemapFn(unsigned int, unsigned int)+0x104>
     9d4:	71 c0       	rjmp	.+226    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9d6:	88 0f       	add	r24, r24
     9d8:	99 1f       	adc	r25, r25
     9da:	fc 01       	movw	r30, r24
     9dc:	e3 5a       	subi	r30, 0xA3	; 163
     9de:	fd 4f       	sbci	r31, 0xFD	; 253
     9e0:	b5 cf       	rjmp	.-150    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e2:	8f 30       	cpi	r24, 0x0F	; 15
     9e4:	91 05       	cpc	r25, r1
     9e6:	08 f0       	brcs	.+2      	; 0x9ea <myRemapFn(unsigned int, unsigned int)+0x118>
     9e8:	67 c0       	rjmp	.+206    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ea:	88 0f       	add	r24, r24
     9ec:	99 1f       	adc	r25, r25
     9ee:	fc 01       	movw	r30, r24
     9f0:	e1 5c       	subi	r30, 0xC1	; 193
     9f2:	fd 4f       	sbci	r31, 0xFD	; 253
     9f4:	ab cf       	rjmp	.-170    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9f6:	8f 30       	cpi	r24, 0x0F	; 15
     9f8:	91 05       	cpc	r25, r1
     9fa:	08 f0       	brcs	.+2      	; 0x9fe <myRemapFn(unsigned int, unsigned int)+0x12c>
     9fc:	5d c0       	rjmp	.+186    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9fe:	88 0f       	add	r24, r24
     a00:	99 1f       	adc	r25, r25
     a02:	fc 01       	movw	r30, r24
     a04:	ef 5d       	subi	r30, 0xDF	; 223
     a06:	fd 4f       	sbci	r31, 0xFD	; 253
     a08:	a1 cf       	rjmp	.-190    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a0a:	8f 30       	cpi	r24, 0x0F	; 15
     a0c:	91 05       	cpc	r25, r1
     a0e:	08 f0       	brcs	.+2      	; 0xa12 <myRemapFn(unsigned int, unsigned int)+0x140>
     a10:	53 c0       	rjmp	.+166    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a12:	88 0f       	add	r24, r24
     a14:	99 1f       	adc	r25, r25
     a16:	fc 01       	movw	r30, r24
     a18:	ed 5f       	subi	r30, 0xFD	; 253
     a1a:	fd 4f       	sbci	r31, 0xFD	; 253
     a1c:	97 cf       	rjmp	.-210    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a1e:	01 97       	sbiw	r24, 0x01	; 1
     a20:	8e 30       	cpi	r24, 0x0E	; 14
     a22:	91 05       	cpc	r25, r1
     a24:	08 f0       	brcs	.+2      	; 0xa28 <myRemapFn(unsigned int, unsigned int)+0x156>
     a26:	48 c0       	rjmp	.+144    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a28:	8b 50       	subi	r24, 0x0B	; 11
     a2a:	9e 4f       	sbci	r25, 0xFE	; 254
     a2c:	79 cf       	rjmp	.-270    	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a2e:	02 97       	sbiw	r24, 0x02	; 2
     a30:	81 31       	cpi	r24, 0x11	; 17
     a32:	91 05       	cpc	r25, r1
     a34:	08 f0       	brcs	.+2      	; 0xa38 <myRemapFn(unsigned int, unsigned int)+0x166>
     a36:	40 c0       	rjmp	.+128    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a38:	8c 51       	subi	r24, 0x1C	; 28
     a3a:	9e 4f       	sbci	r25, 0xFE	; 254
     a3c:	71 cf       	rjmp	.-286    	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a3e:	01 97       	sbiw	r24, 0x01	; 1
     a40:	82 31       	cpi	r24, 0x12	; 18
     a42:	91 05       	cpc	r25, r1
     a44:	c8 f5       	brcc	.+114    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a46:	8e 52       	subi	r24, 0x2E	; 46
     a48:	9e 4f       	sbci	r25, 0xFE	; 254
     a4a:	6a cf       	rjmp	.-300    	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a4c:	01 97       	sbiw	r24, 0x01	; 1
     a4e:	83 31       	cpi	r24, 0x13	; 19
     a50:	91 05       	cpc	r25, r1
     a52:	90 f5       	brcc	.+100    	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a54:	81 54       	subi	r24, 0x41	; 65
     a56:	9e 4f       	sbci	r25, 0xFE	; 254
     a58:	63 cf       	rjmp	.-314    	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a5a:	01 97       	sbiw	r24, 0x01	; 1
     a5c:	84 31       	cpi	r24, 0x14	; 20
     a5e:	91 05       	cpc	r25, r1
     a60:	58 f5       	brcc	.+86     	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a62:	85 55       	subi	r24, 0x55	; 85
     a64:	9e 4f       	sbci	r25, 0xFE	; 254
     a66:	5c cf       	rjmp	.-328    	; 0x920 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a68:	01 97       	sbiw	r24, 0x01	; 1
     a6a:	83 31       	cpi	r24, 0x13	; 19
     a6c:	91 05       	cpc	r25, r1
     a6e:	20 f5       	brcc	.+72     	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a70:	88 0f       	add	r24, r24
     a72:	99 1f       	adc	r25, r25
     a74:	fc 01       	movw	r30, r24
     a76:	eb 57       	subi	r30, 0x7B	; 123
     a78:	fe 4f       	sbci	r31, 0xFE	; 254
     a7a:	68 cf       	rjmp	.-304    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a7c:	02 97       	sbiw	r24, 0x02	; 2
     a7e:	87 30       	cpi	r24, 0x07	; 7
     a80:	91 05       	cpc	r25, r1
     a82:	d0 f4       	brcc	.+52     	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a84:	88 0f       	add	r24, r24
     a86:	99 1f       	adc	r25, r25
     a88:	fc 01       	movw	r30, r24
     a8a:	e9 58       	subi	r30, 0x89	; 137
     a8c:	fe 4f       	sbci	r31, 0xFE	; 254
     a8e:	5e cf       	rjmp	.-324    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a90:	03 97       	sbiw	r24, 0x03	; 3
     a92:	85 30       	cpi	r24, 0x05	; 5
     a94:	91 05       	cpc	r25, r1
     a96:	80 f4       	brcc	.+32     	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a98:	88 0f       	add	r24, r24
     a9a:	99 1f       	adc	r25, r25
     a9c:	fc 01       	movw	r30, r24
     a9e:	e3 59       	subi	r30, 0x93	; 147
     aa0:	fe 4f       	sbci	r31, 0xFE	; 254
     aa2:	54 cf       	rjmp	.-344    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     aa4:	04 97       	sbiw	r24, 0x04	; 4
     aa6:	83 30       	cpi	r24, 0x03	; 3
     aa8:	91 05       	cpc	r25, r1
     aaa:	30 f4       	brcc	.+12     	; 0xab8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aac:	88 0f       	add	r24, r24
     aae:	99 1f       	adc	r25, r25
     ab0:	fc 01       	movw	r30, r24
     ab2:	e9 59       	subi	r30, 0x99	; 153
     ab4:	fe 4f       	sbci	r31, 0xFE	; 254
     ab6:	4a cf       	rjmp	.-364    	; 0x94c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ab8:	8c e2       	ldi	r24, 0x2C	; 44
     aba:	91 e0       	ldi	r25, 0x01	; 1
     abc:	08 95       	ret

00000abe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     abe:	80 e9       	ldi	r24, 0x90	; 144
     ac0:	91 e0       	ldi	r25, 0x01	; 1
     ac2:	08 95       	ret

00000ac4 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     ac4:	3a 9a       	sbi	0x07, 2	; 7
     ac6:	08 95       	ret

00000ac8 <Print::write(char const*)>:
     ac8:	fb 01       	movw	r30, r22
     aca:	01 90       	ld	r0, Z+
     acc:	00 20       	and	r0, r0
     ace:	e9 f7       	brne	.-6      	; 0xaca <Print::write(char const*)+0x2>
     ad0:	31 97       	sbiw	r30, 0x01	; 1
     ad2:	af 01       	movw	r20, r30
     ad4:	46 1b       	sub	r20, r22
     ad6:	57 0b       	sbc	r21, r23
     ad8:	dc 01       	movw	r26, r24
     ada:	ed 91       	ld	r30, X+
     adc:	fc 91       	ld	r31, X
     ade:	02 80       	ldd	r0, Z+2	; 0x02
     ae0:	f3 81       	ldd	r31, Z+3	; 0x03
     ae2:	e0 2d       	mov	r30, r0
     ae4:	09 94       	ijmp

00000ae6 <Print::print(char const*)>:
     ae6:	f0 cf       	rjmp	.-32     	; 0xac8 <Print::write(char const*)>

00000ae8 <Print::print(unsigned char)>:
     ae8:	46 2f       	mov	r20, r22
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	60 e0       	ldi	r22, 0x00	; 0
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	0c 94 cb 30 	jmp	0x6196	; 0x6196 <Print::printNumberDec(unsigned long, unsigned char)>

00000af6 <Print::println(unsigned char)>:
     af6:	0f 93       	push	r16
     af8:	1f 93       	push	r17
     afa:	cf 93       	push	r28
     afc:	df 93       	push	r29
     afe:	ec 01       	movw	r28, r24
     b00:	f3 df       	rcall	.-26     	; 0xae8 <Print::print(unsigned char)>
     b02:	8c 01       	movw	r16, r24
     b04:	ce 01       	movw	r24, r28
     b06:	0e 94 b1 30 	call	0x6162	; 0x6162 <Print::println()>
     b0a:	80 0f       	add	r24, r16
     b0c:	91 1f       	adc	r25, r17
     b0e:	df 91       	pop	r29
     b10:	cf 91       	pop	r28
     b12:	1f 91       	pop	r17
     b14:	0f 91       	pop	r16
     b16:	08 95       	ret

00000b18 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     b18:	0f 93       	push	r16
     b1a:	1f 93       	push	r17
     b1c:	dc 01       	movw	r26, r24
     b1e:	ac 01       	movw	r20, r24
     b20:	40 5d       	subi	r20, 0xD0	; 208
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	fb 01       	movw	r30, r22
     b26:	05 91       	lpm	r16, Z+
     b28:	15 91       	lpm	r17, Z+
     b2a:	25 91       	lpm	r18, Z+
     b2c:	34 91       	lpm	r19, Z
     b2e:	2c 93       	st	X, r18
     b30:	11 96       	adiw	r26, 0x01	; 1
     b32:	1c 93       	st	X, r17
     b34:	11 97       	sbiw	r26, 0x01	; 1
     b36:	12 96       	adiw	r26, 0x02	; 2
     b38:	0c 93       	st	X, r16
     b3a:	12 97       	sbiw	r26, 0x02	; 2
     b3c:	6c 5f       	subi	r22, 0xFC	; 252
     b3e:	7f 4f       	sbci	r23, 0xFF	; 255
     b40:	13 96       	adiw	r26, 0x03	; 3
     b42:	a4 17       	cp	r26, r20
     b44:	b5 07       	cpc	r27, r21
     b46:	71 f7       	brne	.-36     	; 0xb24 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     b48:	1f 91       	pop	r17
     b4a:	0f 91       	pop	r16
     b4c:	08 95       	ret

00000b4e <CFastLED::show()>:
     b4e:	fc 01       	movw	r30, r24
     b50:	60 81       	ld	r22, Z
     b52:	0c 94 fc 25 	jmp	0x4bf8	; 0x4bf8 <CFastLED::show(unsigned char)>

00000b56 <CFastLED::showColor(CRGB const&)>:
     b56:	fc 01       	movw	r30, r24
     b58:	40 81       	ld	r20, Z
     b5a:	0c 94 8c 26 	jmp	0x4d18	; 0x4d18 <CFastLED::showColor(CRGB const&, unsigned char)>

00000b5e <Framebuffer_GFX::clear()>:
     b5e:	dc 01       	movw	r26, r24
     b60:	ed 91       	ld	r30, X+
     b62:	fc 91       	ld	r31, X
     b64:	02 a0       	ldd	r0, Z+34	; 0x22
     b66:	f3 a1       	ldd	r31, Z+35	; 0x23
     b68:	e0 2d       	mov	r30, r0
     b6a:	70 e0       	ldi	r23, 0x00	; 0
     b6c:	60 e0       	ldi	r22, 0x00	; 0
     b6e:	09 94       	ijmp

00000b70 <getRandomColorValue()>:
     b70:	24 e0       	ldi	r18, 0x04	; 4
     b72:	30 e0       	ldi	r19, 0x00	; 0
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	50 e0       	ldi	r21, 0x00	; 0
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	70 e0       	ldi	r23, 0x00	; 0
     b7c:	80 e0       	ldi	r24, 0x00	; 0
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
     b84:	62 30       	cpi	r22, 0x02	; 2
     b86:	71 05       	cpc	r23, r1
     b88:	31 f0       	breq	.+12     	; 0xb96 <getRandomColorValue()+0x26>
     b8a:	63 30       	cpi	r22, 0x03	; 3
     b8c:	71 05       	cpc	r23, r1
     b8e:	31 f0       	breq	.+12     	; 0xb9c <getRandomColorValue()+0x2c>
     b90:	90 e0       	ldi	r25, 0x00	; 0
     b92:	80 e0       	ldi	r24, 0x00	; 0
     b94:	08 95       	ret
     b96:	8f e7       	ldi	r24, 0x7F	; 127
     b98:	90 e0       	ldi	r25, 0x00	; 0
     b9a:	08 95       	ret
     b9c:	8f ef       	ldi	r24, 0xFF	; 255
     b9e:	90 e0       	ldi	r25, 0x00	; 0
     ba0:	08 95       	ret

00000ba2 <getRandomColor()>:
     ba2:	27 e0       	ldi	r18, 0x07	; 7
     ba4:	30 e0       	ldi	r19, 0x00	; 0
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	50 e0       	ldi	r21, 0x00	; 0
     baa:	61 e0       	ldi	r22, 0x01	; 1
     bac:	70 e0       	ldi	r23, 0x00	; 0
     bae:	80 e0       	ldi	r24, 0x00	; 0
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
     bb6:	61 50       	subi	r22, 0x01	; 1
     bb8:	71 09       	sbc	r23, r1
     bba:	67 30       	cpi	r22, 0x07	; 7
     bbc:	71 05       	cpc	r23, r1
     bbe:	40 f4       	brcc	.+16     	; 0xbd0 <getRandomColor()+0x2e>
     bc0:	66 0f       	add	r22, r22
     bc2:	77 1f       	adc	r23, r23
     bc4:	fb 01       	movw	r30, r22
     bc6:	e7 5a       	subi	r30, 0xA7	; 167
     bc8:	fe 4f       	sbci	r31, 0xFE	; 254
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	08 95       	ret
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret

00000bd6 <getRandomColorIncludingBlack()>:
     bd6:	29 e0       	ldi	r18, 0x09	; 9
     bd8:	30 e0       	ldi	r19, 0x00	; 0
     bda:	40 e0       	ldi	r20, 0x00	; 0
     bdc:	50 e0       	ldi	r21, 0x00	; 0
     bde:	61 e0       	ldi	r22, 0x01	; 1
     be0:	70 e0       	ldi	r23, 0x00	; 0
     be2:	80 e0       	ldi	r24, 0x00	; 0
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
     bea:	61 50       	subi	r22, 0x01	; 1
     bec:	71 09       	sbc	r23, r1
     bee:	67 30       	cpi	r22, 0x07	; 7
     bf0:	71 05       	cpc	r23, r1
     bf2:	40 f4       	brcc	.+16     	; 0xc04 <getRandomColorIncludingBlack()+0x2e>
     bf4:	66 0f       	add	r22, r22
     bf6:	77 1f       	adc	r23, r23
     bf8:	fb 01       	movw	r30, r22
     bfa:	e5 5b       	subi	r30, 0xB5	; 181
     bfc:	fe 4f       	sbci	r31, 0xFE	; 254
     bfe:	80 81       	ld	r24, Z
     c00:	91 81       	ldd	r25, Z+1	; 0x01
     c02:	08 95       	ret
     c04:	90 e0       	ldi	r25, 0x00	; 0
     c06:	80 e0       	ldi	r24, 0x00	; 0
     c08:	08 95       	ret

00000c0a <progBlingBlingColoring(unsigned int, unsigned char)>:
     c0a:	0f 93       	push	r16
     c0c:	1f 93       	push	r17
     c0e:	cf 93       	push	r28
     c10:	df 93       	push	r29
     c12:	8c 01       	movw	r16, r24
     c14:	c6 2f       	mov	r28, r22
     c16:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     c1a:	81 11       	cpse	r24, r1
     c1c:	0e c0       	rjmp	.+28     	; 0xc3a <progBlingBlingColoring(unsigned int, unsigned char)+0x30>
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	8f eb       	ldi	r24, 0xBF	; 191
     c22:	9e e0       	ldi	r25, 0x0E	; 14
     c24:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
     c28:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     c2c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     c30:	c0 93 ab 08 	sts	0x08AB, r28	; 0x8008ab <nextSongPart>
     c34:	81 e0       	ldi	r24, 0x01	; 1
     c36:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     c3a:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <progBlingBlingColoring_rounds>
     c3e:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <progBlingBlingColoring_rounds+0x1>
     c42:	89 2b       	or	r24, r25
     c44:	49 f4       	brne	.+18     	; 0xc58 <progBlingBlingColoring(unsigned int, unsigned char)+0x4e>
     c46:	94 df       	rcall	.-216    	; 0xb70 <getRandomColorValue()>
     c48:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <r>
     c4c:	91 df       	rcall	.-222    	; 0xb70 <getRandomColorValue()>
     c4e:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <g>
     c52:	8e df       	rcall	.-228    	; 0xb70 <getRandomColorValue()>
     c54:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <b>
     c58:	c0 91 6b 08 	lds	r28, 0x086B	; 0x80086b <b>
     c5c:	d0 91 6c 08 	lds	r29, 0x086C	; 0x80086c <g>
     c60:	10 91 6d 08 	lds	r17, 0x086D	; 0x80086d <r>
     c64:	26 e1       	ldi	r18, 0x16	; 22
     c66:	31 e0       	ldi	r19, 0x01	; 1
     c68:	40 e0       	ldi	r20, 0x00	; 0
     c6a:	50 e0       	ldi	r21, 0x00	; 0
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	70 e0       	ldi	r23, 0x00	; 0
     c70:	cb 01       	movw	r24, r22
     c72:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
     c76:	fb 01       	movw	r30, r22
     c78:	ee 0f       	add	r30, r30
     c7a:	ff 1f       	adc	r31, r31
     c7c:	e6 0f       	add	r30, r22
     c7e:	f7 1f       	adc	r31, r23
     c80:	e0 54       	subi	r30, 0x40	; 64
     c82:	f7 4f       	sbci	r31, 0xF7	; 247
     c84:	10 83       	st	Z, r17
     c86:	d1 83       	std	Z+1, r29	; 0x01
     c88:	c2 83       	std	Z+2, r28	; 0x02
     c8a:	23 e0       	ldi	r18, 0x03	; 3
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	40 e0       	ldi	r20, 0x00	; 0
     c90:	50 e0       	ldi	r21, 0x00	; 0
     c92:	60 e0       	ldi	r22, 0x00	; 0
     c94:	70 e0       	ldi	r23, 0x00	; 0
     c96:	cb 01       	movw	r24, r22
     c98:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
     c9c:	61 30       	cpi	r22, 0x01	; 1
     c9e:	71 05       	cpc	r23, r1
     ca0:	81 05       	cpc	r24, r1
     ca2:	91 05       	cpc	r25, r1
     ca4:	99 f4       	brne	.+38     	; 0xccc <progBlingBlingColoring(unsigned int, unsigned char)+0xc2>
     ca6:	26 e1       	ldi	r18, 0x16	; 22
     ca8:	31 e0       	ldi	r19, 0x01	; 1
     caa:	40 e0       	ldi	r20, 0x00	; 0
     cac:	50 e0       	ldi	r21, 0x00	; 0
     cae:	60 e0       	ldi	r22, 0x00	; 0
     cb0:	70 e0       	ldi	r23, 0x00	; 0
     cb2:	cb 01       	movw	r24, r22
     cb4:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
     cb8:	fb 01       	movw	r30, r22
     cba:	ee 0f       	add	r30, r30
     cbc:	ff 1f       	adc	r31, r31
     cbe:	e6 0f       	add	r30, r22
     cc0:	f7 1f       	adc	r31, r23
     cc2:	e0 54       	subi	r30, 0x40	; 64
     cc4:	f7 4f       	sbci	r31, 0xF7	; 247
     cc6:	10 82       	st	Z, r1
     cc8:	11 82       	std	Z+1, r1	; 0x01
     cca:	12 82       	std	Z+2, r1	; 0x02
     ccc:	8f eb       	ldi	r24, 0xBF	; 191
     cce:	9e e0       	ldi	r25, 0x0E	; 14
     cd0:	3e df       	rcall	.-388    	; 0xb4e <CFastLED::show()>
     cd2:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
     cd6:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
     cda:	88 39       	cpi	r24, 0x98	; 152
     cdc:	9a 43       	sbci	r25, 0x3A	; 58
     cde:	f0 f0       	brcs	.+60     	; 0xd1c <progBlingBlingColoring(unsigned int, unsigned char)+0x112>
     ce0:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
     ce4:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
     ce8:	84 e0       	ldi	r24, 0x04	; 4
     cea:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <analogRead>
     cee:	0e 94 e6 32 	call	0x65cc	; 0x65cc <randomSeed(unsigned int)>
     cf2:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <progBlingBlingColoring_rounds>
     cf6:	90 91 6a 08 	lds	r25, 0x086A	; 0x80086a <progBlingBlingColoring_rounds+0x1>
     cfa:	01 96       	adiw	r24, 0x01	; 1
     cfc:	84 30       	cpi	r24, 0x04	; 4
     cfe:	91 05       	cpc	r25, r1
     d00:	91 f0       	breq	.+36     	; 0xd26 <progBlingBlingColoring(unsigned int, unsigned char)+0x11c>
     d02:	90 93 6a 08 	sts	0x086A, r25	; 0x80086a <progBlingBlingColoring_rounds+0x1>
     d06:	80 93 69 08 	sts	0x0869, r24	; 0x800869 <progBlingBlingColoring_rounds>
     d0a:	32 df       	rcall	.-412    	; 0xb70 <getRandomColorValue()>
     d0c:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <r>
     d10:	2f df       	rcall	.-418    	; 0xb70 <getRandomColorValue()>
     d12:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <g>
     d16:	2c df       	rcall	.-424    	; 0xb70 <getRandomColorValue()>
     d18:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <b>
     d1c:	df 91       	pop	r29
     d1e:	cf 91       	pop	r28
     d20:	1f 91       	pop	r17
     d22:	0f 91       	pop	r16
     d24:	08 95       	ret
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	90 e0       	ldi	r25, 0x00	; 0
     d2a:	eb cf       	rjmp	.-42     	; 0xd02 <progBlingBlingColoring(unsigned int, unsigned char)+0xf8>

00000d2c <progFastBlingBling(unsigned int, unsigned char)>:
     d2c:	0f 93       	push	r16
     d2e:	1f 93       	push	r17
     d30:	cf 93       	push	r28
     d32:	df 93       	push	r29
     d34:	8c 01       	movw	r16, r24
     d36:	c6 2f       	mov	r28, r22
     d38:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     d3c:	81 11       	cpse	r24, r1
     d3e:	0e c0       	rjmp	.+28     	; 0xd5c <progFastBlingBling(unsigned int, unsigned char)+0x30>
     d40:	61 e0       	ldi	r22, 0x01	; 1
     d42:	8f eb       	ldi	r24, 0xBF	; 191
     d44:	9e e0       	ldi	r25, 0x0E	; 14
     d46:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
     d4a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     d4e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     d52:	c0 93 ab 08 	sts	0x08AB, r28	; 0x8008ab <nextSongPart>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	8f eb       	ldi	r24, 0xBF	; 191
     d60:	9e e0       	ldi	r25, 0x0E	; 14
     d62:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
     d66:	8f ef       	ldi	r24, 0xFF	; 255
     d68:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <FastLED>
     d6c:	01 df       	rcall	.-510    	; 0xb70 <getRandomColorValue()>
     d6e:	c8 2f       	mov	r28, r24
     d70:	ff de       	rcall	.-514    	; 0xb70 <getRandomColorValue()>
     d72:	d8 2f       	mov	r29, r24
     d74:	fd de       	rcall	.-518    	; 0xb70 <getRandomColorValue()>
     d76:	18 2f       	mov	r17, r24
     d78:	26 e1       	ldi	r18, 0x16	; 22
     d7a:	31 e0       	ldi	r19, 0x01	; 1
     d7c:	40 e0       	ldi	r20, 0x00	; 0
     d7e:	50 e0       	ldi	r21, 0x00	; 0
     d80:	60 e0       	ldi	r22, 0x00	; 0
     d82:	70 e0       	ldi	r23, 0x00	; 0
     d84:	cb 01       	movw	r24, r22
     d86:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
     d8a:	fb 01       	movw	r30, r22
     d8c:	ee 0f       	add	r30, r30
     d8e:	ff 1f       	adc	r31, r31
     d90:	e6 0f       	add	r30, r22
     d92:	f7 1f       	adc	r31, r23
     d94:	e0 54       	subi	r30, 0x40	; 64
     d96:	f7 4f       	sbci	r31, 0xF7	; 247
     d98:	10 83       	st	Z, r17
     d9a:	d1 83       	std	Z+1, r29	; 0x01
     d9c:	c2 83       	std	Z+2, r28	; 0x02
     d9e:	8f eb       	ldi	r24, 0xBF	; 191
     da0:	9e e0       	ldi	r25, 0x0E	; 14
     da2:	df 91       	pop	r29
     da4:	cf 91       	pop	r28
     da6:	1f 91       	pop	r17
     da8:	0f 91       	pop	r16
     daa:	d1 ce       	rjmp	.-606    	; 0xb4e <CFastLED::show()>

00000dac <progFullColors(unsigned int, unsigned char, unsigned int)>:
     dac:	cf 92       	push	r12
     dae:	df 92       	push	r13
     db0:	ff 92       	push	r15
     db2:	0f 93       	push	r16
     db4:	1f 93       	push	r17
     db6:	cf 93       	push	r28
     db8:	df 93       	push	r29
     dba:	00 d0       	rcall	.+0      	; 0xdbc <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     dbc:	1f 92       	push	r1
     dbe:	cd b7       	in	r28, 0x3d	; 61
     dc0:	de b7       	in	r29, 0x3e	; 62
     dc2:	6c 01       	movw	r12, r24
     dc4:	f6 2e       	mov	r15, r22
     dc6:	8a 01       	movw	r16, r20
     dc8:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     dcc:	81 11       	cpse	r24, r1
     dce:	12 c0       	rjmp	.+36     	; 0xdf4 <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     dd0:	61 e0       	ldi	r22, 0x01	; 1
     dd2:	8f eb       	ldi	r24, 0xBF	; 191
     dd4:	9e e0       	ldi	r25, 0x0E	; 14
     dd6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
     dda:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     dde:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     de2:	f0 92 ab 08 	sts	0x08AB, r15	; 0x8008ab <nextSongPart>
     de6:	81 e0       	ldi	r24, 0x01	; 1
     de8:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     dec:	10 93 b3 08 	sts	0x08B3, r17	; 0x8008b3 <millisCounterTimer+0x1>
     df0:	00 93 b2 08 	sts	0x08B2, r16	; 0x8008b2 <millisCounterTimer>
     df4:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
     df8:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
     dfc:	80 17       	cp	r24, r16
     dfe:	91 07       	cpc	r25, r17
     e00:	78 f1       	brcs	.+94     	; 0xe60 <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     e02:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
     e06:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
     e0a:	b2 de       	rcall	.-668    	; 0xb70 <getRandomColorValue()>
     e0c:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <r>
     e10:	af de       	rcall	.-674    	; 0xb70 <getRandomColorValue()>
     e12:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <g>
     e16:	ac de       	rcall	.-680    	; 0xb70 <getRandomColorValue()>
     e18:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <b>
     e1c:	90 91 6d 08 	lds	r25, 0x086D	; 0x80086d <r>
     e20:	91 11       	cpse	r25, r1
     e22:	0f c0       	rjmp	.+30     	; 0xe42 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e24:	90 91 6c 08 	lds	r25, 0x086C	; 0x80086c <g>
     e28:	91 11       	cpse	r25, r1
     e2a:	0b c0       	rjmp	.+22     	; 0xe42 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e2c:	81 11       	cpse	r24, r1
     e2e:	09 c0       	rjmp	.+18     	; 0xe42 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e30:	9f de       	rcall	.-706    	; 0xb70 <getRandomColorValue()>
     e32:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <r>
     e36:	9c de       	rcall	.-712    	; 0xb70 <getRandomColorValue()>
     e38:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <g>
     e3c:	99 de       	rcall	.-718    	; 0xb70 <getRandomColorValue()>
     e3e:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <b>
     e42:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <b>
     e46:	90 91 6c 08 	lds	r25, 0x086C	; 0x80086c <g>
     e4a:	20 91 6d 08 	lds	r18, 0x086D	; 0x80086d <r>
     e4e:	29 83       	std	Y+1, r18	; 0x01
     e50:	9a 83       	std	Y+2, r25	; 0x02
     e52:	8b 83       	std	Y+3, r24	; 0x03
     e54:	be 01       	movw	r22, r28
     e56:	6f 5f       	subi	r22, 0xFF	; 255
     e58:	7f 4f       	sbci	r23, 0xFF	; 255
     e5a:	8f eb       	ldi	r24, 0xBF	; 191
     e5c:	9e e0       	ldi	r25, 0x0E	; 14
     e5e:	7b de       	rcall	.-778    	; 0xb56 <CFastLED::showColor(CRGB const&)>
     e60:	0f 90       	pop	r0
     e62:	0f 90       	pop	r0
     e64:	0f 90       	pop	r0
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

00000e76 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     e76:	af 92       	push	r10
     e78:	bf 92       	push	r11
     e7a:	cf 92       	push	r12
     e7c:	df 92       	push	r13
     e7e:	ef 92       	push	r14
     e80:	ff 92       	push	r15
     e82:	0f 93       	push	r16
     e84:	1f 93       	push	r17
     e86:	cf 93       	push	r28
     e88:	df 93       	push	r29
     e8a:	00 d0       	rcall	.+0      	; 0xe8c <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     e8c:	1f 92       	push	r1
     e8e:	cd b7       	in	r28, 0x3d	; 61
     e90:	de b7       	in	r29, 0x3e	; 62
     e92:	5c 01       	movw	r10, r24
     e94:	f6 2e       	mov	r15, r22
     e96:	6a 01       	movw	r12, r20
     e98:	12 2f       	mov	r17, r18
     e9a:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     e9e:	81 11       	cpse	r24, r1
     ea0:	12 c0       	rjmp	.+36     	; 0xec6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     ea2:	61 e0       	ldi	r22, 0x01	; 1
     ea4:	8f eb       	ldi	r24, 0xBF	; 191
     ea6:	9e e0       	ldi	r25, 0x0E	; 14
     ea8:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
     eac:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     eb0:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     eb4:	f0 92 ab 08 	sts	0x08AB, r15	; 0x8008ab <nextSongPart>
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     ebe:	d0 92 b3 08 	sts	0x08B3, r13	; 0x8008b3 <millisCounterTimer+0x1>
     ec2:	c0 92 b2 08 	sts	0x08B2, r12	; 0x8008b2 <millisCounterTimer>
     ec6:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
     eca:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
     ece:	8c 15       	cp	r24, r12
     ed0:	9d 05       	cpc	r25, r13
     ed2:	98 f0       	brcs	.+38     	; 0xefa <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     ed4:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
     ed8:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
     edc:	80 91 b5 08 	lds	r24, 0x08B5	; 0x8008b5 <progStroboIsBlack>
     ee0:	88 23       	and	r24, r24
     ee2:	c9 f0       	breq	.+50     	; 0xf16 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     ee4:	19 83       	std	Y+1, r17	; 0x01
     ee6:	0a 83       	std	Y+2, r16	; 0x02
     ee8:	eb 82       	std	Y+3, r14	; 0x03
     eea:	be 01       	movw	r22, r28
     eec:	6f 5f       	subi	r22, 0xFF	; 255
     eee:	7f 4f       	sbci	r23, 0xFF	; 255
     ef0:	8f eb       	ldi	r24, 0xBF	; 191
     ef2:	9e e0       	ldi	r25, 0x0E	; 14
     ef4:	30 de       	rcall	.-928    	; 0xb56 <CFastLED::showColor(CRGB const&)>
     ef6:	10 92 b5 08 	sts	0x08B5, r1	; 0x8008b5 <progStroboIsBlack>
     efa:	0f 90       	pop	r0
     efc:	0f 90       	pop	r0
     efe:	0f 90       	pop	r0
     f00:	df 91       	pop	r29
     f02:	cf 91       	pop	r28
     f04:	1f 91       	pop	r17
     f06:	0f 91       	pop	r16
     f08:	ff 90       	pop	r15
     f0a:	ef 90       	pop	r14
     f0c:	df 90       	pop	r13
     f0e:	cf 90       	pop	r12
     f10:	bf 90       	pop	r11
     f12:	af 90       	pop	r10
     f14:	08 95       	ret
     f16:	19 82       	std	Y+1, r1	; 0x01
     f18:	1a 82       	std	Y+2, r1	; 0x02
     f1a:	1b 82       	std	Y+3, r1	; 0x03
     f1c:	be 01       	movw	r22, r28
     f1e:	6f 5f       	subi	r22, 0xFF	; 255
     f20:	7f 4f       	sbci	r23, 0xFF	; 255
     f22:	8f eb       	ldi	r24, 0xBF	; 191
     f24:	9e e0       	ldi	r25, 0x0E	; 14
     f26:	17 de       	rcall	.-978    	; 0xb56 <CFastLED::showColor(CRGB const&)>
     f28:	81 e0       	ldi	r24, 0x01	; 1
     f2a:	80 93 b5 08 	sts	0x08B5, r24	; 0x8008b5 <progStroboIsBlack>
     f2e:	e5 cf       	rjmp	.-54     	; 0xefa <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

00000f30 <progMatrixScanner(unsigned int, unsigned char)>:
     f30:	ef 92       	push	r14
     f32:	ff 92       	push	r15
     f34:	0f 93       	push	r16
     f36:	1f 93       	push	r17
     f38:	cf 93       	push	r28
     f3a:	8c 01       	movw	r16, r24
     f3c:	c6 2f       	mov	r28, r22
     f3e:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     f42:	81 11       	cpse	r24, r1
     f44:	0e c0       	rjmp	.+28     	; 0xf62 <progMatrixScanner(unsigned int, unsigned char)+0x32>
     f46:	61 e0       	ldi	r22, 0x01	; 1
     f48:	8f eb       	ldi	r24, 0xBF	; 191
     f4a:	9e e0       	ldi	r25, 0x0E	; 14
     f4c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
     f50:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     f54:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     f58:	c0 93 ab 08 	sts	0x08AB, r28	; 0x8008ab <nextSongPart>
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
     f62:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <zaehler>
     f66:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <zaehler+0x1>
     f6a:	9b 01       	movw	r18, r22
     f6c:	2f 5f       	subi	r18, 0xFF	; 255
     f6e:	3f 4f       	sbci	r19, 0xFF	; 255
     f70:	40 91 a2 08 	lds	r20, 0x08A2	; 0x8008a2 <scannerGoesBack>
     f74:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
     f78:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
     f7c:	41 11       	cpse	r20, r1
     f7e:	52 c0       	rjmp	.+164    	; 0x1024 <progMatrixScanner(unsigned int, unsigned char)+0xf4>
     f80:	30 93 a4 08 	sts	0x08A4, r19	; 0x8008a4 <zaehler+0x1>
     f84:	20 93 a3 08 	sts	0x08A3, r18	; 0x8008a3 <zaehler>
     f88:	27 31       	cpi	r18, 0x17	; 23
     f8a:	31 05       	cpc	r19, r1
     f8c:	1c f0       	brlt	.+6      	; 0xf94 <progMatrixScanner(unsigned int, unsigned char)+0x64>
     f8e:	21 e0       	ldi	r18, 0x01	; 1
     f90:	20 93 a2 08 	sts	0x08A2, r18	; 0x8008a2 <scannerGoesBack>
     f94:	9b 01       	movw	r18, r22
     f96:	2d 5f       	subi	r18, 0xFD	; 253
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	dc 01       	movw	r26, r24
     f9c:	ed 91       	ld	r30, X+
     f9e:	fc 91       	ld	r31, X
     fa0:	00 a0       	ldd	r0, Z+32	; 0x20
     fa2:	f1 a1       	ldd	r31, Z+33	; 0x21
     fa4:	e0 2d       	mov	r30, r0
     fa6:	e1 2c       	mov	r14, r1
     fa8:	58 ef       	ldi	r21, 0xF8	; 248
     faa:	f5 2e       	mov	r15, r21
     fac:	07 e1       	ldi	r16, 0x17	; 23
     fae:	10 e0       	ldi	r17, 0x00	; 0
     fb0:	50 e0       	ldi	r21, 0x00	; 0
     fb2:	40 e0       	ldi	r20, 0x00	; 0
     fb4:	09 95       	icall
     fb6:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
     fba:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
     fbe:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <zaehler>
     fc2:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <zaehler+0x1>
     fc6:	9b 01       	movw	r18, r22
     fc8:	2f 5f       	subi	r18, 0xFF	; 255
     fca:	3f 4f       	sbci	r19, 0xFF	; 255
     fcc:	dc 01       	movw	r26, r24
     fce:	ed 91       	ld	r30, X+
     fd0:	fc 91       	ld	r31, X
     fd2:	00 a0       	ldd	r0, Z+32	; 0x20
     fd4:	f1 a1       	ldd	r31, Z+33	; 0x21
     fd6:	e0 2d       	mov	r30, r0
     fd8:	ee 24       	eor	r14, r14
     fda:	ea 94       	dec	r14
     fdc:	fe 2c       	mov	r15, r14
     fde:	50 e0       	ldi	r21, 0x00	; 0
     fe0:	40 e0       	ldi	r20, 0x00	; 0
     fe2:	09 95       	icall
     fe4:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
     fe8:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
     fec:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <zaehler>
     ff0:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <zaehler+0x1>
     ff4:	9b 01       	movw	r18, r22
     ff6:	22 50       	subi	r18, 0x02	; 2
     ff8:	31 09       	sbc	r19, r1
     ffa:	65 50       	subi	r22, 0x05	; 5
     ffc:	71 09       	sbc	r23, r1
     ffe:	dc 01       	movw	r26, r24
    1000:	ed 91       	ld	r30, X+
    1002:	fc 91       	ld	r31, X
    1004:	00 a0       	ldd	r0, Z+32	; 0x20
    1006:	f1 a1       	ldd	r31, Z+33	; 0x21
    1008:	e0 2d       	mov	r30, r0
    100a:	f1 2c       	mov	r15, r1
    100c:	e1 2c       	mov	r14, r1
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	09 95       	icall
    1014:	8f eb       	ldi	r24, 0xBF	; 191
    1016:	9e e0       	ldi	r25, 0x0E	; 14
    1018:	cf 91       	pop	r28
    101a:	1f 91       	pop	r17
    101c:	0f 91       	pop	r16
    101e:	ff 90       	pop	r15
    1020:	ef 90       	pop	r14
    1022:	95 cd       	rjmp	.-1238   	; 0xb4e <CFastLED::show()>
    1024:	61 50       	subi	r22, 0x01	; 1
    1026:	71 09       	sbc	r23, r1
    1028:	70 93 a4 08 	sts	0x08A4, r23	; 0x8008a4 <zaehler+0x1>
    102c:	60 93 a3 08 	sts	0x08A3, r22	; 0x8008a3 <zaehler>
    1030:	6e 3f       	cpi	r22, 0xFE	; 254
    1032:	bf ef       	ldi	r27, 0xFF	; 255
    1034:	7b 07       	cpc	r23, r27
    1036:	14 f4       	brge	.+4      	; 0x103c <progMatrixScanner(unsigned int, unsigned char)+0x10c>
    1038:	10 92 a2 08 	sts	0x08A2, r1	; 0x8008a2 <scannerGoesBack>
    103c:	dc 01       	movw	r26, r24
    103e:	ed 91       	ld	r30, X+
    1040:	fc 91       	ld	r31, X
    1042:	00 a0       	ldd	r0, Z+32	; 0x20
    1044:	f1 a1       	ldd	r31, Z+33	; 0x21
    1046:	e0 2d       	mov	r30, r0
    1048:	e1 2c       	mov	r14, r1
    104a:	48 ef       	ldi	r20, 0xF8	; 248
    104c:	f4 2e       	mov	r15, r20
    104e:	07 e1       	ldi	r16, 0x17	; 23
    1050:	10 e0       	ldi	r17, 0x00	; 0
    1052:	50 e0       	ldi	r21, 0x00	; 0
    1054:	40 e0       	ldi	r20, 0x00	; 0
    1056:	09 95       	icall
    1058:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    105c:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1060:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <zaehler>
    1064:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1068:	9b 01       	movw	r18, r22
    106a:	2c 5f       	subi	r18, 0xFC	; 252
    106c:	3f 4f       	sbci	r19, 0xFF	; 255
    106e:	6e 5f       	subi	r22, 0xFE	; 254
    1070:	7f 4f       	sbci	r23, 0xFF	; 255
    1072:	c5 cf       	rjmp	.-118    	; 0xffe <progMatrixScanner(unsigned int, unsigned char)+0xce>

00001074 <progStern(unsigned int, int, unsigned char)>:
    1074:	8f 92       	push	r8
    1076:	9f 92       	push	r9
    1078:	af 92       	push	r10
    107a:	bf 92       	push	r11
    107c:	cf 92       	push	r12
    107e:	df 92       	push	r13
    1080:	ef 92       	push	r14
    1082:	ff 92       	push	r15
    1084:	0f 93       	push	r16
    1086:	1f 93       	push	r17
    1088:	cf 93       	push	r28
    108a:	df 93       	push	r29
    108c:	7c 01       	movw	r14, r24
    108e:	eb 01       	movw	r28, r22
    1090:	14 2f       	mov	r17, r20
    1092:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    1096:	81 11       	cpse	r24, r1
    1098:	18 c0       	rjmp	.+48     	; 0x10ca <progStern(unsigned int, int, unsigned char)+0x56>
    109a:	61 e0       	ldi	r22, 0x01	; 1
    109c:	8f eb       	ldi	r24, 0xBF	; 191
    109e:	9e e0       	ldi	r25, 0x0E	; 14
    10a0:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    10a4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    10a8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    10ac:	10 93 ab 08 	sts	0x08AB, r17	; 0x8008ab <nextSongPart>
    10b0:	81 e0       	ldi	r24, 0x01	; 1
    10b2:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    10b6:	75 dd       	rcall	.-1302   	; 0xba2 <getRandomColor()>
    10b8:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <col1+0x1>
    10bc:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <col1>
    10c0:	70 dd       	rcall	.-1312   	; 0xba2 <getRandomColor()>
    10c2:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <col2+0x1>
    10c6:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <col2>
    10ca:	1c 16       	cp	r1, r28
    10cc:	1d 06       	cpc	r1, r29
    10ce:	ac f4       	brge	.+42     	; 0x10fa <progStern(unsigned int, int, unsigned char)+0x86>
    10d0:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
    10d4:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
    10d8:	8c 17       	cp	r24, r28
    10da:	9d 07       	cpc	r25, r29
    10dc:	70 f0       	brcs	.+28     	; 0x10fa <progStern(unsigned int, int, unsigned char)+0x86>
    10de:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
    10e2:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
    10e6:	5d dd       	rcall	.-1350   	; 0xba2 <getRandomColor()>
    10e8:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <col1+0x1>
    10ec:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <col1>
    10f0:	58 dd       	rcall	.-1360   	; 0xba2 <getRandomColor()>
    10f2:	90 93 bc 08 	sts	0x08BC, r25	; 0x8008bc <col2+0x1>
    10f6:	80 93 bb 08 	sts	0x08BB, r24	; 0x8008bb <col2>
    10fa:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    10fe:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1102:	01 96       	adiw	r24, 0x01	; 1
    1104:	8a 30       	cpi	r24, 0x0A	; 10
    1106:	91 05       	cpc	r25, r1
    1108:	0c f0       	brlt	.+2      	; 0x110c <progStern(unsigned int, int, unsigned char)+0x98>
    110a:	fc c0       	rjmp	.+504    	; 0x1304 <progStern(unsigned int, int, unsigned char)+0x290>
    110c:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    1110:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    1114:	60 e0       	ldi	r22, 0x00	; 0
    1116:	8f eb       	ldi	r24, 0xBF	; 191
    1118:	9e e0       	ldi	r25, 0x0E	; 14
    111a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    111e:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1122:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1126:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    112a:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    112e:	e0 90 bd 08 	lds	r14, 0x08BD	; 0x8008bd <col1>
    1132:	f0 90 be 08 	lds	r15, 0x08BE	; 0x8008be <col1+0x1>
    1136:	9a 01       	movw	r18, r20
    1138:	26 5f       	subi	r18, 0xF6	; 246
    113a:	3f 4f       	sbci	r19, 0xFF	; 255
    113c:	6a e0       	ldi	r22, 0x0A	; 10
    113e:	a6 2e       	mov	r10, r22
    1140:	b1 2c       	mov	r11, r1
    1142:	b5 01       	movw	r22, r10
    1144:	64 1b       	sub	r22, r20
    1146:	75 0b       	sbc	r23, r21
    1148:	dc 01       	movw	r26, r24
    114a:	ed 91       	ld	r30, X+
    114c:	fc 91       	ld	r31, X
    114e:	04 a0       	ldd	r0, Z+36	; 0x24
    1150:	f5 a1       	ldd	r31, Z+37	; 0x25
    1152:	e0 2d       	mov	r30, r0
    1154:	06 e1       	ldi	r16, 0x16	; 22
    1156:	10 e0       	ldi	r17, 0x00	; 0
    1158:	50 e0       	ldi	r21, 0x00	; 0
    115a:	40 e0       	ldi	r20, 0x00	; 0
    115c:	09 95       	icall
    115e:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1162:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1166:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    116a:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    116e:	e0 90 bb 08 	lds	r14, 0x08BB	; 0x8008bb <col2>
    1172:	f0 90 bc 08 	lds	r15, 0x08BC	; 0x8008bc <col2+0x1>
    1176:	9a 01       	movw	r18, r20
    1178:	25 5f       	subi	r18, 0xF5	; 245
    117a:	3f 4f       	sbci	r19, 0xFF	; 255
    117c:	7b e0       	ldi	r23, 0x0B	; 11
    117e:	87 2e       	mov	r8, r23
    1180:	91 2c       	mov	r9, r1
    1182:	b4 01       	movw	r22, r8
    1184:	64 1b       	sub	r22, r20
    1186:	75 0b       	sbc	r23, r21
    1188:	dc 01       	movw	r26, r24
    118a:	ed 91       	ld	r30, X+
    118c:	fc 91       	ld	r31, X
    118e:	04 a0       	ldd	r0, Z+36	; 0x24
    1190:	f5 a1       	ldd	r31, Z+37	; 0x25
    1192:	e0 2d       	mov	r30, r0
    1194:	50 e0       	ldi	r21, 0x00	; 0
    1196:	40 e0       	ldi	r20, 0x00	; 0
    1198:	09 95       	icall
    119a:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    119e:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    11a2:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    11a6:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    11aa:	e0 90 bd 08 	lds	r14, 0x08BD	; 0x8008bd <col1>
    11ae:	f0 90 be 08 	lds	r15, 0x08BE	; 0x8008be <col1+0x1>
    11b2:	e6 e1       	ldi	r30, 0x16	; 22
    11b4:	ce 2e       	mov	r12, r30
    11b6:	d1 2c       	mov	r13, r1
    11b8:	04 1b       	sub	r16, r20
    11ba:	15 0b       	sbc	r17, r21
    11bc:	4f 5f       	subi	r20, 0xFF	; 255
    11be:	5f 4f       	sbci	r21, 0xFF	; 255
    11c0:	dc 01       	movw	r26, r24
    11c2:	ed 91       	ld	r30, X+
    11c4:	fc 91       	ld	r31, X
    11c6:	04 a0       	ldd	r0, Z+36	; 0x24
    11c8:	f5 a1       	ldd	r31, Z+37	; 0x25
    11ca:	e0 2d       	mov	r30, r0
    11cc:	25 e1       	ldi	r18, 0x15	; 21
    11ce:	30 e0       	ldi	r19, 0x00	; 0
    11d0:	70 e0       	ldi	r23, 0x00	; 0
    11d2:	60 e0       	ldi	r22, 0x00	; 0
    11d4:	09 95       	icall
    11d6:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    11da:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    11de:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    11e2:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    11e6:	e0 90 bb 08 	lds	r14, 0x08BB	; 0x8008bb <col2>
    11ea:	f0 90 bc 08 	lds	r15, 0x08BC	; 0x8008bc <col2+0x1>
    11ee:	c5 e1       	ldi	r28, 0x15	; 21
    11f0:	d0 e0       	ldi	r29, 0x00	; 0
    11f2:	8e 01       	movw	r16, r28
    11f4:	04 1b       	sub	r16, r20
    11f6:	15 0b       	sbc	r17, r21
    11f8:	dc 01       	movw	r26, r24
    11fa:	ed 91       	ld	r30, X+
    11fc:	fc 91       	ld	r31, X
    11fe:	04 a0       	ldd	r0, Z+36	; 0x24
    1200:	f5 a1       	ldd	r31, Z+37	; 0x25
    1202:	e0 2d       	mov	r30, r0
    1204:	25 e1       	ldi	r18, 0x15	; 21
    1206:	30 e0       	ldi	r19, 0x00	; 0
    1208:	70 e0       	ldi	r23, 0x00	; 0
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	09 95       	icall
    120e:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1212:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1216:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    121a:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    121e:	e0 90 bd 08 	lds	r14, 0x08BD	; 0x8008bd <col1>
    1222:	f0 90 be 08 	lds	r15, 0x08BE	; 0x8008be <col1+0x1>
    1226:	84 01       	movw	r16, r8
    1228:	04 1b       	sub	r16, r20
    122a:	15 0b       	sbc	r17, r21
    122c:	45 5f       	subi	r20, 0xF5	; 245
    122e:	5f 4f       	sbci	r21, 0xFF	; 255
    1230:	dc 01       	movw	r26, r24
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	04 a0       	ldd	r0, Z+36	; 0x24
    1238:	f5 a1       	ldd	r31, Z+37	; 0x25
    123a:	e0 2d       	mov	r30, r0
    123c:	25 e1       	ldi	r18, 0x15	; 21
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	70 e0       	ldi	r23, 0x00	; 0
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	09 95       	icall
    1246:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    124a:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    124e:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    1252:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1256:	e0 90 bb 08 	lds	r14, 0x08BB	; 0x8008bb <col2>
    125a:	f0 90 bc 08 	lds	r15, 0x08BC	; 0x8008bc <col2+0x1>
    125e:	85 01       	movw	r16, r10
    1260:	04 1b       	sub	r16, r20
    1262:	15 0b       	sbc	r17, r21
    1264:	46 5f       	subi	r20, 0xF6	; 246
    1266:	5f 4f       	sbci	r21, 0xFF	; 255
    1268:	dc 01       	movw	r26, r24
    126a:	ed 91       	ld	r30, X+
    126c:	fc 91       	ld	r31, X
    126e:	04 a0       	ldd	r0, Z+36	; 0x24
    1270:	f5 a1       	ldd	r31, Z+37	; 0x25
    1272:	e0 2d       	mov	r30, r0
    1274:	25 e1       	ldi	r18, 0x15	; 21
    1276:	30 e0       	ldi	r19, 0x00	; 0
    1278:	70 e0       	ldi	r23, 0x00	; 0
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	09 95       	icall
    127e:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1282:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1286:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <zaehler>
    128a:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <zaehler+0x1>
    128e:	e0 90 bd 08 	lds	r14, 0x08BD	; 0x8008bd <col1>
    1292:	f0 90 be 08 	lds	r15, 0x08BE	; 0x8008be <col1+0x1>
    1296:	96 01       	movw	r18, r12
    1298:	26 1b       	sub	r18, r22
    129a:	37 0b       	sbc	r19, r23
    129c:	dc 01       	movw	r26, r24
    129e:	ed 91       	ld	r30, X+
    12a0:	fc 91       	ld	r31, X
    12a2:	04 a0       	ldd	r0, Z+36	; 0x24
    12a4:	f5 a1       	ldd	r31, Z+37	; 0x25
    12a6:	e0 2d       	mov	r30, r0
    12a8:	10 e0       	ldi	r17, 0x00	; 0
    12aa:	00 e0       	ldi	r16, 0x00	; 0
    12ac:	46 e1       	ldi	r20, 0x16	; 22
    12ae:	50 e0       	ldi	r21, 0x00	; 0
    12b0:	09 95       	icall
    12b2:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    12b6:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    12ba:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <zaehler>
    12be:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <zaehler+0x1>
    12c2:	e0 90 bb 08 	lds	r14, 0x08BB	; 0x8008bb <col2>
    12c6:	f0 90 bc 08 	lds	r15, 0x08BC	; 0x8008bc <col2+0x1>
    12ca:	9e 01       	movw	r18, r28
    12cc:	26 1b       	sub	r18, r22
    12ce:	37 0b       	sbc	r19, r23
    12d0:	61 50       	subi	r22, 0x01	; 1
    12d2:	71 09       	sbc	r23, r1
    12d4:	dc 01       	movw	r26, r24
    12d6:	ed 91       	ld	r30, X+
    12d8:	fc 91       	ld	r31, X
    12da:	04 a0       	ldd	r0, Z+36	; 0x24
    12dc:	f5 a1       	ldd	r31, Z+37	; 0x25
    12de:	e0 2d       	mov	r30, r0
    12e0:	46 e1       	ldi	r20, 0x16	; 22
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	09 95       	icall
    12e6:	8f eb       	ldi	r24, 0xBF	; 191
    12e8:	9e e0       	ldi	r25, 0x0E	; 14
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	9f 90       	pop	r9
    1300:	8f 90       	pop	r8
    1302:	25 cc       	rjmp	.-1974   	; 0xb4e <CFastLED::show()>
    1304:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <zaehler+0x1>
    1308:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <zaehler>
    130c:	03 cf       	rjmp	.-506    	; 0x1114 <progStern(unsigned int, int, unsigned char)+0xa0>

0000130e <progStern(unsigned int, unsigned char)>:
    130e:	46 2f       	mov	r20, r22
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	60 e0       	ldi	r22, 0x00	; 0
    1314:	af ce       	rjmp	.-674    	; 0x1074 <progStern(unsigned int, int, unsigned char)>

00001316 <progBlack(unsigned int, unsigned char)>:
    1316:	0f 93       	push	r16
    1318:	1f 93       	push	r17
    131a:	cf 93       	push	r28
    131c:	8c 01       	movw	r16, r24
    131e:	c6 2f       	mov	r28, r22
    1320:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    1324:	81 11       	cpse	r24, r1
    1326:	0e c0       	rjmp	.+28     	; 0x1344 <progBlack(unsigned int, unsigned char)+0x2e>
    1328:	61 e0       	ldi	r22, 0x01	; 1
    132a:	8f eb       	ldi	r24, 0xBF	; 191
    132c:	9e e0       	ldi	r25, 0x0E	; 14
    132e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    1332:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1336:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    133a:	c0 93 ab 08 	sts	0x08AB, r28	; 0x8008ab <nextSongPart>
    133e:	81 e0       	ldi	r24, 0x01	; 1
    1340:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    1344:	60 e0       	ldi	r22, 0x00	; 0
    1346:	8f eb       	ldi	r24, 0xBF	; 191
    1348:	9e e0       	ldi	r25, 0x0E	; 14
    134a:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    134e:	8f eb       	ldi	r24, 0xBF	; 191
    1350:	9e e0       	ldi	r25, 0x0E	; 14
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	fa cb       	rjmp	.-2060   	; 0xb4e <CFastLED::show()>

0000135a <progCircles(unsigned int, unsigned char, unsigned int)>:
    135a:	8f 92       	push	r8
    135c:	9f 92       	push	r9
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	df 93       	push	r29
    1372:	7c 01       	movw	r14, r24
    1374:	16 2f       	mov	r17, r22
    1376:	ea 01       	movw	r28, r20
    1378:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    137c:	81 11       	cpse	r24, r1
    137e:	12 c0       	rjmp	.+36     	; 0x13a4 <progCircles(unsigned int, unsigned char, unsigned int)+0x4a>
    1380:	61 e0       	ldi	r22, 0x01	; 1
    1382:	8f eb       	ldi	r24, 0xBF	; 191
    1384:	9e e0       	ldi	r25, 0x0E	; 14
    1386:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    138a:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    138e:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1392:	10 93 ab 08 	sts	0x08AB, r17	; 0x8008ab <nextSongPart>
    1396:	81 e0       	ldi	r24, 0x01	; 1
    1398:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    139c:	d0 93 b3 08 	sts	0x08B3, r29	; 0x8008b3 <millisCounterTimer+0x1>
    13a0:	c0 93 b2 08 	sts	0x08B2, r28	; 0x8008b2 <millisCounterTimer>
    13a4:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
    13a8:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
    13ac:	8c 17       	cp	r24, r28
    13ae:	9d 07       	cpc	r25, r29
    13b0:	e0 f1       	brcs	.+120    	; 0x142a <progCircles(unsigned int, unsigned char, unsigned int)+0xd0>
    13b2:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
    13b6:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
    13ba:	c0 91 ae 0e 	lds	r28, 0x0EAE	; 0x800eae <matrix>
    13be:	d0 91 af 0e 	lds	r29, 0x0EAF	; 0x800eaf <matrix+0x1>
    13c2:	09 dc       	rcall	.-2030   	; 0xbd6 <getRandomColorIncludingBlack()>
    13c4:	8c 01       	movw	r16, r24
    13c6:	2a e0       	ldi	r18, 0x0A	; 10
    13c8:	30 e0       	ldi	r19, 0x00	; 0
    13ca:	40 e0       	ldi	r20, 0x00	; 0
    13cc:	50 e0       	ldi	r21, 0x00	; 0
    13ce:	63 e0       	ldi	r22, 0x03	; 3
    13d0:	70 e0       	ldi	r23, 0x00	; 0
    13d2:	80 e0       	ldi	r24, 0x00	; 0
    13d4:	90 e0       	ldi	r25, 0x00	; 0
    13d6:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
    13da:	4b 01       	movw	r8, r22
    13dc:	26 e1       	ldi	r18, 0x16	; 22
    13de:	30 e0       	ldi	r19, 0x00	; 0
    13e0:	40 e0       	ldi	r20, 0x00	; 0
    13e2:	50 e0       	ldi	r21, 0x00	; 0
    13e4:	60 e0       	ldi	r22, 0x00	; 0
    13e6:	70 e0       	ldi	r23, 0x00	; 0
    13e8:	cb 01       	movw	r24, r22
    13ea:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
    13ee:	6b 01       	movw	r12, r22
    13f0:	25 e1       	ldi	r18, 0x15	; 21
    13f2:	30 e0       	ldi	r19, 0x00	; 0
    13f4:	40 e0       	ldi	r20, 0x00	; 0
    13f6:	50 e0       	ldi	r21, 0x00	; 0
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	70 e0       	ldi	r23, 0x00	; 0
    13fc:	cb 01       	movw	r24, r22
    13fe:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
    1402:	94 01       	movw	r18, r8
    1404:	a6 01       	movw	r20, r12
    1406:	ce 01       	movw	r24, r28
    1408:	0e 94 bd 1e 	call	0x3d7a	; 0x3d7a <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    140c:	8f eb       	ldi	r24, 0xBF	; 191
    140e:	9e e0       	ldi	r25, 0x0E	; 14
    1410:	df 91       	pop	r29
    1412:	cf 91       	pop	r28
    1414:	1f 91       	pop	r17
    1416:	0f 91       	pop	r16
    1418:	ff 90       	pop	r15
    141a:	ef 90       	pop	r14
    141c:	df 90       	pop	r13
    141e:	cf 90       	pop	r12
    1420:	bf 90       	pop	r11
    1422:	af 90       	pop	r10
    1424:	9f 90       	pop	r9
    1426:	8f 90       	pop	r8
    1428:	92 cb       	rjmp	.-2268   	; 0xb4e <CFastLED::show()>
    142a:	df 91       	pop	r29
    142c:	cf 91       	pop	r28
    142e:	1f 91       	pop	r17
    1430:	0f 91       	pop	r16
    1432:	ff 90       	pop	r15
    1434:	ef 90       	pop	r14
    1436:	df 90       	pop	r13
    1438:	cf 90       	pop	r12
    143a:	bf 90       	pop	r11
    143c:	af 90       	pop	r10
    143e:	9f 90       	pop	r9
    1440:	8f 90       	pop	r8
    1442:	08 95       	ret

00001444 <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    1444:	cf 92       	push	r12
    1446:	df 92       	push	r13
    1448:	ef 92       	push	r14
    144a:	ff 92       	push	r15
    144c:	0f 93       	push	r16
    144e:	1f 93       	push	r17
    1450:	cf 93       	push	r28
    1452:	df 93       	push	r29
    1454:	6c 01       	movw	r12, r24
    1456:	f6 2e       	mov	r15, r22
    1458:	ea 01       	movw	r28, r20
    145a:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    145e:	81 11       	cpse	r24, r1
    1460:	12 c0       	rjmp	.+36     	; 0x1486 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x42>
    1462:	61 e0       	ldi	r22, 0x01	; 1
    1464:	8f eb       	ldi	r24, 0xBF	; 191
    1466:	9e e0       	ldi	r25, 0x0E	; 14
    1468:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    146c:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    1470:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    1474:	f0 92 ab 08 	sts	0x08AB, r15	; 0x8008ab <nextSongPart>
    1478:	81 e0       	ldi	r24, 0x01	; 1
    147a:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    147e:	d0 93 b3 08 	sts	0x08B3, r29	; 0x8008b3 <millisCounterTimer+0x1>
    1482:	c0 93 b2 08 	sts	0x08B2, r28	; 0x8008b2 <millisCounterTimer>
    1486:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
    148a:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
    148e:	8c 17       	cp	r24, r28
    1490:	9d 07       	cpc	r25, r29
    1492:	08 f4       	brcc	.+2      	; 0x1496 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x52>
    1494:	72 c0       	rjmp	.+228    	; 0x157a <progRandomLines(unsigned int, unsigned char, unsigned int)+0x136>
    1496:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
    149a:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
    149e:	25 e1       	ldi	r18, 0x15	; 21
    14a0:	30 e0       	ldi	r19, 0x00	; 0
    14a2:	40 e0       	ldi	r20, 0x00	; 0
    14a4:	50 e0       	ldi	r21, 0x00	; 0
    14a6:	60 e0       	ldi	r22, 0x00	; 0
    14a8:	70 e0       	ldi	r23, 0x00	; 0
    14aa:	cb 01       	movw	r24, r22
    14ac:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
    14b0:	c6 2f       	mov	r28, r22
    14b2:	25 e1       	ldi	r18, 0x15	; 21
    14b4:	30 e0       	ldi	r19, 0x00	; 0
    14b6:	40 e0       	ldi	r20, 0x00	; 0
    14b8:	50 e0       	ldi	r21, 0x00	; 0
    14ba:	60 e0       	ldi	r22, 0x00	; 0
    14bc:	70 e0       	ldi	r23, 0x00	; 0
    14be:	cb 01       	movw	r24, r22
    14c0:	0e 94 05 33 	call	0x660a	; 0x660a <random(long, long)>
    14c4:	c6 2e       	mov	r12, r22
    14c6:	6d db       	rcall	.-2342   	; 0xba2 <getRandomColor()>
    14c8:	90 93 be 08 	sts	0x08BE, r25	; 0x8008be <col1+0x1>
    14cc:	80 93 bd 08 	sts	0x08BD, r24	; 0x8008bd <col1>
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	8f eb       	ldi	r24, 0xBF	; 191
    14d4:	9e e0       	ldi	r25, 0x0E	; 14
    14d6:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    14da:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    14de:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    14e2:	d1 2c       	mov	r13, r1
    14e4:	d0 e0       	ldi	r29, 0x00	; 0
    14e6:	e0 90 bd 08 	lds	r14, 0x08BD	; 0x8008bd <col1>
    14ea:	f0 90 be 08 	lds	r15, 0x08BE	; 0x8008be <col1+0x1>
    14ee:	96 01       	movw	r18, r12
    14f0:	21 50       	subi	r18, 0x01	; 1
    14f2:	31 09       	sbc	r19, r1
    14f4:	be 01       	movw	r22, r28
    14f6:	61 50       	subi	r22, 0x01	; 1
    14f8:	71 09       	sbc	r23, r1
    14fa:	dc 01       	movw	r26, r24
    14fc:	ed 91       	ld	r30, X+
    14fe:	fc 91       	ld	r31, X
    1500:	04 a0       	ldd	r0, Z+36	; 0x24
    1502:	f5 a1       	ldd	r31, Z+37	; 0x25
    1504:	e0 2d       	mov	r30, r0
    1506:	06 e1       	ldi	r16, 0x16	; 22
    1508:	10 e0       	ldi	r17, 0x00	; 0
    150a:	50 e0       	ldi	r21, 0x00	; 0
    150c:	40 e0       	ldi	r20, 0x00	; 0
    150e:	09 95       	icall
    1510:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1514:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1518:	e0 90 bd 08 	lds	r14, 0x08BD	; 0x8008bd <col1>
    151c:	f0 90 be 08 	lds	r15, 0x08BE	; 0x8008be <col1+0x1>
    1520:	dc 01       	movw	r26, r24
    1522:	ed 91       	ld	r30, X+
    1524:	fc 91       	ld	r31, X
    1526:	04 a0       	ldd	r0, Z+36	; 0x24
    1528:	f5 a1       	ldd	r31, Z+37	; 0x25
    152a:	e0 2d       	mov	r30, r0
    152c:	96 01       	movw	r18, r12
    152e:	50 e0       	ldi	r21, 0x00	; 0
    1530:	40 e0       	ldi	r20, 0x00	; 0
    1532:	be 01       	movw	r22, r28
    1534:	09 95       	icall
    1536:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    153a:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    153e:	e0 90 bd 08 	lds	r14, 0x08BD	; 0x8008bd <col1>
    1542:	f0 90 be 08 	lds	r15, 0x08BE	; 0x8008be <col1+0x1>
    1546:	96 01       	movw	r18, r12
    1548:	2f 5f       	subi	r18, 0xFF	; 255
    154a:	3f 4f       	sbci	r19, 0xFF	; 255
    154c:	be 01       	movw	r22, r28
    154e:	6f 5f       	subi	r22, 0xFF	; 255
    1550:	7f 4f       	sbci	r23, 0xFF	; 255
    1552:	dc 01       	movw	r26, r24
    1554:	ed 91       	ld	r30, X+
    1556:	fc 91       	ld	r31, X
    1558:	04 a0       	ldd	r0, Z+36	; 0x24
    155a:	f5 a1       	ldd	r31, Z+37	; 0x25
    155c:	e0 2d       	mov	r30, r0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	09 95       	icall
    1564:	8f eb       	ldi	r24, 0xBF	; 191
    1566:	9e e0       	ldi	r25, 0x0E	; 14
    1568:	df 91       	pop	r29
    156a:	cf 91       	pop	r28
    156c:	1f 91       	pop	r17
    156e:	0f 91       	pop	r16
    1570:	ff 90       	pop	r15
    1572:	ef 90       	pop	r14
    1574:	df 90       	pop	r13
    1576:	cf 90       	pop	r12
    1578:	ea ca       	rjmp	.-2604   	; 0xb4e <CFastLED::show()>
    157a:	df 91       	pop	r29
    157c:	cf 91       	pop	r28
    157e:	1f 91       	pop	r17
    1580:	0f 91       	pop	r16
    1582:	ff 90       	pop	r15
    1584:	ef 90       	pop	r14
    1586:	df 90       	pop	r13
    1588:	cf 90       	pop	r12
    158a:	08 95       	ret

0000158c <progMovingLines(unsigned int, unsigned char)>:
    158c:	cf 92       	push	r12
    158e:	df 92       	push	r13
    1590:	ef 92       	push	r14
    1592:	ff 92       	push	r15
    1594:	0f 93       	push	r16
    1596:	1f 93       	push	r17
    1598:	cf 93       	push	r28
    159a:	df 93       	push	r29
    159c:	8c 01       	movw	r16, r24
    159e:	c6 2f       	mov	r28, r22
    15a0:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    15a4:	81 11       	cpse	r24, r1
    15a6:	0e c0       	rjmp	.+28     	; 0x15c4 <progMovingLines(unsigned int, unsigned char)+0x38>
    15a8:	61 e0       	ldi	r22, 0x01	; 1
    15aa:	8f eb       	ldi	r24, 0xBF	; 191
    15ac:	9e e0       	ldi	r25, 0x0E	; 14
    15ae:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    15b2:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    15b6:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    15ba:	c0 93 ab 08 	sts	0x08AB, r28	; 0x8008ab <nextSongPart>
    15be:	81 e0       	ldi	r24, 0x01	; 1
    15c0:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    15c4:	60 e0       	ldi	r22, 0x00	; 0
    15c6:	8f eb       	ldi	r24, 0xBF	; 191
    15c8:	9e e0       	ldi	r25, 0x0E	; 14
    15ca:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    15ce:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <stage>
    15d2:	90 91 a1 08 	lds	r25, 0x08A1	; 0x8008a1 <stage+0x1>
    15d6:	82 30       	cpi	r24, 0x02	; 2
    15d8:	91 05       	cpc	r25, r1
    15da:	09 f4       	brne	.+2      	; 0x15de <progMovingLines(unsigned int, unsigned char)+0x52>
    15dc:	59 c0       	rjmp	.+178    	; 0x1690 <progMovingLines(unsigned int, unsigned char)+0x104>
    15de:	7c f4       	brge	.+30     	; 0x15fe <progMovingLines(unsigned int, unsigned char)+0x72>
    15e0:	00 97       	sbiw	r24, 0x00	; 0
    15e2:	39 f1       	breq	.+78     	; 0x1632 <progMovingLines(unsigned int, unsigned char)+0xa6>
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	e1 f1       	breq	.+120    	; 0x1660 <progMovingLines(unsigned int, unsigned char)+0xd4>
    15e8:	8f eb       	ldi	r24, 0xBF	; 191
    15ea:	9e e0       	ldi	r25, 0x0E	; 14
    15ec:	df 91       	pop	r29
    15ee:	cf 91       	pop	r28
    15f0:	1f 91       	pop	r17
    15f2:	0f 91       	pop	r16
    15f4:	ff 90       	pop	r15
    15f6:	ef 90       	pop	r14
    15f8:	df 90       	pop	r13
    15fa:	cf 90       	pop	r12
    15fc:	a8 ca       	rjmp	.-2736   	; 0xb4e <CFastLED::show()>
    15fe:	84 30       	cpi	r24, 0x04	; 4
    1600:	91 05       	cpc	r25, r1
    1602:	09 f4       	brne	.+2      	; 0x1606 <progMovingLines(unsigned int, unsigned char)+0x7a>
    1604:	9a c0       	rjmp	.+308    	; 0x173a <progMovingLines(unsigned int, unsigned char)+0x1ae>
    1606:	0c f4       	brge	.+2      	; 0x160a <progMovingLines(unsigned int, unsigned char)+0x7e>
    1608:	72 c0       	rjmp	.+228    	; 0x16ee <progMovingLines(unsigned int, unsigned char)+0x162>
    160a:	05 97       	sbiw	r24, 0x05	; 5
    160c:	69 f7       	brne	.-38     	; 0x15e8 <progMovingLines(unsigned int, unsigned char)+0x5c>
    160e:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    1612:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    161c:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    1620:	18 16       	cp	r1, r24
    1622:	19 06       	cpc	r1, r25
    1624:	0c f4       	brge	.+2      	; 0x1628 <progMovingLines(unsigned int, unsigned char)+0x9c>
    1626:	9d c0       	rjmp	.+314    	; 0x1762 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1628:	10 92 a1 08 	sts	0x08A1, r1	; 0x8008a1 <stage+0x1>
    162c:	10 92 a0 08 	sts	0x08A0, r1	; 0x8008a0 <stage>
    1630:	12 c0       	rjmp	.+36     	; 0x1656 <progMovingLines(unsigned int, unsigned char)+0xca>
    1632:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    1636:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    163a:	01 96       	adiw	r24, 0x01	; 1
    163c:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    1640:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    1644:	4a 97       	sbiw	r24, 0x1a	; 26
    1646:	0c f4       	brge	.+2      	; 0x164a <progMovingLines(unsigned int, unsigned char)+0xbe>
    1648:	61 c0       	rjmp	.+194    	; 0x170c <progMovingLines(unsigned int, unsigned char)+0x180>
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <stage+0x1>
    1652:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <stage>
    1656:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <zaehler+0x1>
    165a:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <zaehler>
    165e:	c4 cf       	rjmp	.-120    	; 0x15e8 <progMovingLines(unsigned int, unsigned char)+0x5c>
    1660:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    1664:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1668:	01 96       	adiw	r24, 0x01	; 1
    166a:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    166e:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    1672:	0c 97       	sbiw	r24, 0x0c	; 12
    1674:	14 f1       	brlt	.+68     	; 0x16ba <progMovingLines(unsigned int, unsigned char)+0x12e>
    1676:	82 e0       	ldi	r24, 0x02	; 2
    1678:	90 e0       	ldi	r25, 0x00	; 0
    167a:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <stage+0x1>
    167e:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <stage>
    1682:	8c e0       	ldi	r24, 0x0C	; 12
    1684:	90 e0       	ldi	r25, 0x00	; 0
    1686:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    168a:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    168e:	ac cf       	rjmp	.-168    	; 0x15e8 <progMovingLines(unsigned int, unsigned char)+0x5c>
    1690:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    1694:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    169e:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    16a2:	18 16       	cp	r1, r24
    16a4:	19 06       	cpc	r1, r25
    16a6:	4c f0       	brlt	.+18     	; 0x16ba <progMovingLines(unsigned int, unsigned char)+0x12e>
    16a8:	83 e0       	ldi	r24, 0x03	; 3
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <stage+0x1>
    16b0:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <stage>
    16b4:	89 e1       	ldi	r24, 0x19	; 25
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	e6 cf       	rjmp	.-52     	; 0x1686 <progMovingLines(unsigned int, unsigned char)+0xfa>
    16ba:	c0 91 ae 0e 	lds	r28, 0x0EAE	; 0x800eae <matrix>
    16be:	d0 91 af 0e 	lds	r29, 0x0EAF	; 0x800eaf <matrix+0x1>
    16c2:	e8 81       	ld	r30, Y
    16c4:	f9 81       	ldd	r31, Y+1	; 0x01
    16c6:	c4 a0       	ldd	r12, Z+36	; 0x24
    16c8:	d5 a0       	ldd	r13, Z+37	; 0x25
    16ca:	6b da       	rcall	.-2858   	; 0xba2 <getRandomColor()>
    16cc:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    16d0:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    16d4:	06 e1       	ldi	r16, 0x16	; 22
    16d6:	10 e0       	ldi	r17, 0x00	; 0
    16d8:	04 1b       	sub	r16, r20
    16da:	15 0b       	sbc	r17, r21
    16dc:	7c 01       	movw	r14, r24
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	20 e0       	ldi	r18, 0x00	; 0
    16e2:	69 e1       	ldi	r22, 0x19	; 25
    16e4:	70 e0       	ldi	r23, 0x00	; 0
    16e6:	ce 01       	movw	r24, r28
    16e8:	f6 01       	movw	r30, r12
    16ea:	09 95       	icall
    16ec:	7d cf       	rjmp	.-262    	; 0x15e8 <progMovingLines(unsigned int, unsigned char)+0x5c>
    16ee:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    16f2:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    16fc:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    1700:	18 16       	cp	r1, r24
    1702:	19 06       	cpc	r1, r25
    1704:	1c f0       	brlt	.+6      	; 0x170c <progMovingLines(unsigned int, unsigned char)+0x180>
    1706:	84 e0       	ldi	r24, 0x04	; 4
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	a1 cf       	rjmp	.-190    	; 0x164e <progMovingLines(unsigned int, unsigned char)+0xc2>
    170c:	c0 91 ae 0e 	lds	r28, 0x0EAE	; 0x800eae <matrix>
    1710:	d0 91 af 0e 	lds	r29, 0x0EAF	; 0x800eaf <matrix+0x1>
    1714:	e8 81       	ld	r30, Y
    1716:	f9 81       	ldd	r31, Y+1	; 0x01
    1718:	c4 a0       	ldd	r12, Z+36	; 0x24
    171a:	d5 a0       	ldd	r13, Z+37	; 0x25
    171c:	42 da       	rcall	.-2940   	; 0xba2 <getRandomColor()>
    171e:	60 91 a3 08 	lds	r22, 0x08A3	; 0x8008a3 <zaehler>
    1722:	70 91 a4 08 	lds	r23, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1726:	29 e1       	ldi	r18, 0x19	; 25
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	26 1b       	sub	r18, r22
    172c:	37 0b       	sbc	r19, r23
    172e:	7c 01       	movw	r14, r24
    1730:	06 e1       	ldi	r16, 0x16	; 22
    1732:	10 e0       	ldi	r17, 0x00	; 0
    1734:	50 e0       	ldi	r21, 0x00	; 0
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	d6 cf       	rjmp	.-84     	; 0x16e6 <progMovingLines(unsigned int, unsigned char)+0x15a>
    173a:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    173e:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1742:	01 96       	adiw	r24, 0x01	; 1
    1744:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    1748:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    174c:	0b 97       	sbiw	r24, 0x0b	; 11
    174e:	4c f0       	brlt	.+18     	; 0x1762 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1750:	85 e0       	ldi	r24, 0x05	; 5
    1752:	90 e0       	ldi	r25, 0x00	; 0
    1754:	90 93 a1 08 	sts	0x08A1, r25	; 0x8008a1 <stage+0x1>
    1758:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <stage>
    175c:	8a e0       	ldi	r24, 0x0A	; 10
    175e:	90 e0       	ldi	r25, 0x00	; 0
    1760:	92 cf       	rjmp	.-220    	; 0x1686 <progMovingLines(unsigned int, unsigned char)+0xfa>
    1762:	c0 91 ae 0e 	lds	r28, 0x0EAE	; 0x800eae <matrix>
    1766:	d0 91 af 0e 	lds	r29, 0x0EAF	; 0x800eaf <matrix+0x1>
    176a:	e8 81       	ld	r30, Y
    176c:	f9 81       	ldd	r31, Y+1	; 0x01
    176e:	c4 a0       	ldd	r12, Z+36	; 0x24
    1770:	d5 a0       	ldd	r13, Z+37	; 0x25
    1772:	17 da       	rcall	.-3026   	; 0xba2 <getRandomColor()>
    1774:	40 91 a3 08 	lds	r20, 0x08A3	; 0x8008a3 <zaehler>
    1778:	50 91 a4 08 	lds	r21, 0x08A4	; 0x8008a4 <zaehler+0x1>
    177c:	06 e1       	ldi	r16, 0x16	; 22
    177e:	10 e0       	ldi	r17, 0x00	; 0
    1780:	04 1b       	sub	r16, r20
    1782:	15 0b       	sbc	r17, r21
    1784:	7c 01       	movw	r14, r24
    1786:	29 e1       	ldi	r18, 0x19	; 25
    1788:	30 e0       	ldi	r19, 0x00	; 0
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	60 e0       	ldi	r22, 0x00	; 0
    178e:	ab cf       	rjmp	.-170    	; 0x16e6 <progMovingLines(unsigned int, unsigned char)+0x15a>

00001790 <progOutline(unsigned int, unsigned char)>:
    1790:	cf 92       	push	r12
    1792:	df 92       	push	r13
    1794:	ef 92       	push	r14
    1796:	ff 92       	push	r15
    1798:	0f 93       	push	r16
    179a:	1f 93       	push	r17
    179c:	cf 93       	push	r28
    179e:	df 93       	push	r29
    17a0:	8c 01       	movw	r16, r24
    17a2:	c6 2f       	mov	r28, r22
    17a4:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    17a8:	81 11       	cpse	r24, r1
    17aa:	0e c0       	rjmp	.+28     	; 0x17c8 <progOutline(unsigned int, unsigned char)+0x38>
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	8f eb       	ldi	r24, 0xBF	; 191
    17b0:	9e e0       	ldi	r25, 0x0E	; 14
    17b2:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    17b6:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    17ba:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    17be:	c0 93 ab 08 	sts	0x08AB, r28	; 0x8008ab <nextSongPart>
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    17c8:	60 e0       	ldi	r22, 0x00	; 0
    17ca:	8f eb       	ldi	r24, 0xBF	; 191
    17cc:	9e e0       	ldi	r25, 0x0E	; 14
    17ce:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    17d2:	80 91 a2 08 	lds	r24, 0x08A2	; 0x8008a2 <scannerGoesBack>
    17d6:	e0 91 a3 08 	lds	r30, 0x08A3	; 0x8008a3 <zaehler>
    17da:	f0 91 a4 08 	lds	r31, 0x08A4	; 0x8008a4 <zaehler+0x1>
    17de:	81 11       	cpse	r24, r1
    17e0:	08 c1       	rjmp	.+528    	; 0x19f2 <progOutline(unsigned int, unsigned char)+0x262>
    17e2:	e9 30       	cpi	r30, 0x09	; 9
    17e4:	f1 05       	cpc	r31, r1
    17e6:	28 f5       	brcc	.+74     	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    17e8:	e8 50       	subi	r30, 0x08	; 8
    17ea:	f4 4f       	sbci	r31, 0xF4	; 244
    17ec:	0c 94 02 36 	jmp	0x6c04	; 0x6c04 <__tablejump2__>
    17f0:	01 0c       	add	r0, r1
    17f2:	33 0c       	add	r3, r3
    17f4:	4c 0c       	add	r4, r12
    17f6:	65 0c       	add	r6, r5
    17f8:	7e 0c       	add	r7, r14
    17fa:	97 0c       	add	r9, r7
    17fc:	af 0c       	add	r10, r15
    17fe:	c8 0c       	add	r12, r8
    1800:	e1 0c       	add	r14, r1
    1802:	cf e5       	ldi	r28, 0x5F	; 95
    1804:	d6 e0       	ldi	r29, 0x06	; 6
    1806:	0b ef       	ldi	r16, 0xFB	; 251
    1808:	16 e0       	ldi	r17, 0x06	; 6
    180a:	e9 90       	ld	r14, Y+
    180c:	f9 90       	ld	r15, Y+
    180e:	b0 d9       	rcall	.-3232   	; 0xb70 <getRandomColorValue()>
    1810:	d8 2e       	mov	r13, r24
    1812:	ae d9       	rcall	.-3236   	; 0xb70 <getRandomColorValue()>
    1814:	c8 2e       	mov	r12, r24
    1816:	ac d9       	rcall	.-3240   	; 0xb70 <getRandomColorValue()>
    1818:	f7 01       	movw	r30, r14
    181a:	ee 0f       	add	r30, r30
    181c:	ff 1f       	adc	r31, r31
    181e:	ee 0d       	add	r30, r14
    1820:	ff 1d       	adc	r31, r15
    1822:	e0 54       	subi	r30, 0x40	; 64
    1824:	f7 4f       	sbci	r31, 0xF7	; 247
    1826:	80 83       	st	Z, r24
    1828:	c1 82       	std	Z+1, r12	; 0x01
    182a:	d2 82       	std	Z+2, r13	; 0x02
    182c:	0c 17       	cp	r16, r28
    182e:	1d 07       	cpc	r17, r29
    1830:	61 f7       	brne	.-40     	; 0x180a <progOutline(unsigned int, unsigned char)+0x7a>
    1832:	8f eb       	ldi	r24, 0xBF	; 191
    1834:	9e e0       	ldi	r25, 0x0E	; 14
    1836:	8b d9       	rcall	.-3306   	; 0xb4e <CFastLED::show()>
    1838:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    183c:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    1846:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    184a:	09 97       	sbiw	r24, 0x09	; 9
    184c:	1c f0       	brlt	.+6      	; 0x1854 <progOutline(unsigned int, unsigned char)+0xc4>
    184e:	81 e0       	ldi	r24, 0x01	; 1
    1850:	80 93 a2 08 	sts	0x08A2, r24	; 0x8008a2 <scannerGoesBack>
    1854:	df 91       	pop	r29
    1856:	cf 91       	pop	r28
    1858:	1f 91       	pop	r17
    185a:	0f 91       	pop	r16
    185c:	ff 90       	pop	r15
    185e:	ef 90       	pop	r14
    1860:	df 90       	pop	r13
    1862:	cf 90       	pop	r12
    1864:	08 95       	ret
    1866:	c3 ed       	ldi	r28, 0xD3	; 211
    1868:	d5 e0       	ldi	r29, 0x05	; 5
    186a:	0f e5       	ldi	r16, 0x5F	; 95
    186c:	16 e0       	ldi	r17, 0x06	; 6
    186e:	e9 90       	ld	r14, Y+
    1870:	f9 90       	ld	r15, Y+
    1872:	7e d9       	rcall	.-3332   	; 0xb70 <getRandomColorValue()>
    1874:	d8 2e       	mov	r13, r24
    1876:	7c d9       	rcall	.-3336   	; 0xb70 <getRandomColorValue()>
    1878:	c8 2e       	mov	r12, r24
    187a:	7a d9       	rcall	.-3340   	; 0xb70 <getRandomColorValue()>
    187c:	f7 01       	movw	r30, r14
    187e:	ee 0f       	add	r30, r30
    1880:	ff 1f       	adc	r31, r31
    1882:	ee 0d       	add	r30, r14
    1884:	ff 1d       	adc	r31, r15
    1886:	e0 54       	subi	r30, 0x40	; 64
    1888:	f7 4f       	sbci	r31, 0xF7	; 247
    188a:	80 83       	st	Z, r24
    188c:	c1 82       	std	Z+1, r12	; 0x01
    188e:	d2 82       	std	Z+2, r13	; 0x02
    1890:	0c 17       	cp	r16, r28
    1892:	1d 07       	cpc	r17, r29
    1894:	61 f7       	brne	.-40     	; 0x186e <progOutline(unsigned int, unsigned char)+0xde>
    1896:	cd cf       	rjmp	.-102    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    1898:	c7 e6       	ldi	r28, 0x67	; 103
    189a:	d5 e0       	ldi	r29, 0x05	; 5
    189c:	03 ed       	ldi	r16, 0xD3	; 211
    189e:	15 e0       	ldi	r17, 0x05	; 5
    18a0:	e9 90       	ld	r14, Y+
    18a2:	f9 90       	ld	r15, Y+
    18a4:	65 d9       	rcall	.-3382   	; 0xb70 <getRandomColorValue()>
    18a6:	d8 2e       	mov	r13, r24
    18a8:	63 d9       	rcall	.-3386   	; 0xb70 <getRandomColorValue()>
    18aa:	c8 2e       	mov	r12, r24
    18ac:	61 d9       	rcall	.-3390   	; 0xb70 <getRandomColorValue()>
    18ae:	f7 01       	movw	r30, r14
    18b0:	ee 0f       	add	r30, r30
    18b2:	ff 1f       	adc	r31, r31
    18b4:	ee 0d       	add	r30, r14
    18b6:	ff 1d       	adc	r31, r15
    18b8:	e0 54       	subi	r30, 0x40	; 64
    18ba:	f7 4f       	sbci	r31, 0xF7	; 247
    18bc:	80 83       	st	Z, r24
    18be:	c1 82       	std	Z+1, r12	; 0x01
    18c0:	d2 82       	std	Z+2, r13	; 0x02
    18c2:	0c 17       	cp	r16, r28
    18c4:	1d 07       	cpc	r17, r29
    18c6:	61 f7       	brne	.-40     	; 0x18a0 <progOutline(unsigned int, unsigned char)+0x110>
    18c8:	b4 cf       	rjmp	.-152    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    18ca:	cd e1       	ldi	r28, 0x1D	; 29
    18cc:	d5 e0       	ldi	r29, 0x05	; 5
    18ce:	07 e6       	ldi	r16, 0x67	; 103
    18d0:	15 e0       	ldi	r17, 0x05	; 5
    18d2:	e9 90       	ld	r14, Y+
    18d4:	f9 90       	ld	r15, Y+
    18d6:	4c d9       	rcall	.-3432   	; 0xb70 <getRandomColorValue()>
    18d8:	d8 2e       	mov	r13, r24
    18da:	4a d9       	rcall	.-3436   	; 0xb70 <getRandomColorValue()>
    18dc:	c8 2e       	mov	r12, r24
    18de:	48 d9       	rcall	.-3440   	; 0xb70 <getRandomColorValue()>
    18e0:	f7 01       	movw	r30, r14
    18e2:	ee 0f       	add	r30, r30
    18e4:	ff 1f       	adc	r31, r31
    18e6:	ee 0d       	add	r30, r14
    18e8:	ff 1d       	adc	r31, r15
    18ea:	e0 54       	subi	r30, 0x40	; 64
    18ec:	f7 4f       	sbci	r31, 0xF7	; 247
    18ee:	80 83       	st	Z, r24
    18f0:	c1 82       	std	Z+1, r12	; 0x01
    18f2:	d2 82       	std	Z+2, r13	; 0x02
    18f4:	0c 17       	cp	r16, r28
    18f6:	1d 07       	cpc	r17, r29
    18f8:	61 f7       	brne	.-40     	; 0x18d2 <progOutline(unsigned int, unsigned char)+0x142>
    18fa:	9b cf       	rjmp	.-202    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    18fc:	cd ed       	ldi	r28, 0xDD	; 221
    18fe:	d4 e0       	ldi	r29, 0x04	; 4
    1900:	0d e1       	ldi	r16, 0x1D	; 29
    1902:	15 e0       	ldi	r17, 0x05	; 5
    1904:	e9 90       	ld	r14, Y+
    1906:	f9 90       	ld	r15, Y+
    1908:	33 d9       	rcall	.-3482   	; 0xb70 <getRandomColorValue()>
    190a:	d8 2e       	mov	r13, r24
    190c:	31 d9       	rcall	.-3486   	; 0xb70 <getRandomColorValue()>
    190e:	c8 2e       	mov	r12, r24
    1910:	2f d9       	rcall	.-3490   	; 0xb70 <getRandomColorValue()>
    1912:	f7 01       	movw	r30, r14
    1914:	ee 0f       	add	r30, r30
    1916:	ff 1f       	adc	r31, r31
    1918:	ee 0d       	add	r30, r14
    191a:	ff 1d       	adc	r31, r15
    191c:	e0 54       	subi	r30, 0x40	; 64
    191e:	f7 4f       	sbci	r31, 0xF7	; 247
    1920:	80 83       	st	Z, r24
    1922:	c1 82       	std	Z+1, r12	; 0x01
    1924:	d2 82       	std	Z+2, r13	; 0x02
    1926:	0c 17       	cp	r16, r28
    1928:	1d 07       	cpc	r17, r29
    192a:	61 f7       	brne	.-40     	; 0x1904 <progOutline(unsigned int, unsigned char)+0x174>
    192c:	82 cf       	rjmp	.-252    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    192e:	c1 ea       	ldi	r28, 0xA1	; 161
    1930:	d4 e0       	ldi	r29, 0x04	; 4
    1932:	09 91       	ld	r16, Y+
    1934:	19 91       	ld	r17, Y+
    1936:	1c d9       	rcall	.-3528   	; 0xb70 <getRandomColorValue()>
    1938:	f8 2e       	mov	r15, r24
    193a:	1a d9       	rcall	.-3532   	; 0xb70 <getRandomColorValue()>
    193c:	e8 2e       	mov	r14, r24
    193e:	18 d9       	rcall	.-3536   	; 0xb70 <getRandomColorValue()>
    1940:	f8 01       	movw	r30, r16
    1942:	ee 0f       	add	r30, r30
    1944:	ff 1f       	adc	r31, r31
    1946:	e0 0f       	add	r30, r16
    1948:	f1 1f       	adc	r31, r17
    194a:	e0 54       	subi	r30, 0x40	; 64
    194c:	f7 4f       	sbci	r31, 0xF7	; 247
    194e:	80 83       	st	Z, r24
    1950:	e1 82       	std	Z+1, r14	; 0x01
    1952:	f2 82       	std	Z+2, r15	; 0x02
    1954:	84 e0       	ldi	r24, 0x04	; 4
    1956:	cd 3d       	cpi	r28, 0xDD	; 221
    1958:	d8 07       	cpc	r29, r24
    195a:	59 f7       	brne	.-42     	; 0x1932 <progOutline(unsigned int, unsigned char)+0x1a2>
    195c:	6a cf       	rjmp	.-300    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    195e:	cb e6       	ldi	r28, 0x6B	; 107
    1960:	d4 e0       	ldi	r29, 0x04	; 4
    1962:	01 ea       	ldi	r16, 0xA1	; 161
    1964:	14 e0       	ldi	r17, 0x04	; 4
    1966:	e9 90       	ld	r14, Y+
    1968:	f9 90       	ld	r15, Y+
    196a:	02 d9       	rcall	.-3580   	; 0xb70 <getRandomColorValue()>
    196c:	d8 2e       	mov	r13, r24
    196e:	00 d9       	rcall	.-3584   	; 0xb70 <getRandomColorValue()>
    1970:	c8 2e       	mov	r12, r24
    1972:	fe d8       	rcall	.-3588   	; 0xb70 <getRandomColorValue()>
    1974:	f7 01       	movw	r30, r14
    1976:	ee 0f       	add	r30, r30
    1978:	ff 1f       	adc	r31, r31
    197a:	ee 0d       	add	r30, r14
    197c:	ff 1d       	adc	r31, r15
    197e:	e0 54       	subi	r30, 0x40	; 64
    1980:	f7 4f       	sbci	r31, 0xF7	; 247
    1982:	80 83       	st	Z, r24
    1984:	c1 82       	std	Z+1, r12	; 0x01
    1986:	d2 82       	std	Z+2, r13	; 0x02
    1988:	0c 17       	cp	r16, r28
    198a:	1d 07       	cpc	r17, r29
    198c:	61 f7       	brne	.-40     	; 0x1966 <progOutline(unsigned int, unsigned char)+0x1d6>
    198e:	51 cf       	rjmp	.-350    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    1990:	c7 e3       	ldi	r28, 0x37	; 55
    1992:	d4 e0       	ldi	r29, 0x04	; 4
    1994:	0b e6       	ldi	r16, 0x6B	; 107
    1996:	14 e0       	ldi	r17, 0x04	; 4
    1998:	e9 90       	ld	r14, Y+
    199a:	f9 90       	ld	r15, Y+
    199c:	e9 d8       	rcall	.-3630   	; 0xb70 <getRandomColorValue()>
    199e:	d8 2e       	mov	r13, r24
    19a0:	e7 d8       	rcall	.-3634   	; 0xb70 <getRandomColorValue()>
    19a2:	c8 2e       	mov	r12, r24
    19a4:	e5 d8       	rcall	.-3638   	; 0xb70 <getRandomColorValue()>
    19a6:	f7 01       	movw	r30, r14
    19a8:	ee 0f       	add	r30, r30
    19aa:	ff 1f       	adc	r31, r31
    19ac:	ee 0d       	add	r30, r14
    19ae:	ff 1d       	adc	r31, r15
    19b0:	e0 54       	subi	r30, 0x40	; 64
    19b2:	f7 4f       	sbci	r31, 0xF7	; 247
    19b4:	80 83       	st	Z, r24
    19b6:	c1 82       	std	Z+1, r12	; 0x01
    19b8:	d2 82       	std	Z+2, r13	; 0x02
    19ba:	0c 17       	cp	r16, r28
    19bc:	1d 07       	cpc	r17, r29
    19be:	61 f7       	brne	.-40     	; 0x1998 <progOutline(unsigned int, unsigned char)+0x208>
    19c0:	38 cf       	rjmp	.-400    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    19c2:	c7 e0       	ldi	r28, 0x07	; 7
    19c4:	d4 e0       	ldi	r29, 0x04	; 4
    19c6:	09 91       	ld	r16, Y+
    19c8:	19 91       	ld	r17, Y+
    19ca:	d2 d8       	rcall	.-3676   	; 0xb70 <getRandomColorValue()>
    19cc:	f8 2e       	mov	r15, r24
    19ce:	d0 d8       	rcall	.-3680   	; 0xb70 <getRandomColorValue()>
    19d0:	e8 2e       	mov	r14, r24
    19d2:	ce d8       	rcall	.-3684   	; 0xb70 <getRandomColorValue()>
    19d4:	f8 01       	movw	r30, r16
    19d6:	ee 0f       	add	r30, r30
    19d8:	ff 1f       	adc	r31, r31
    19da:	e0 0f       	add	r30, r16
    19dc:	f1 1f       	adc	r31, r17
    19de:	e0 54       	subi	r30, 0x40	; 64
    19e0:	f7 4f       	sbci	r31, 0xF7	; 247
    19e2:	80 83       	st	Z, r24
    19e4:	e1 82       	std	Z+1, r14	; 0x01
    19e6:	f2 82       	std	Z+2, r15	; 0x02
    19e8:	84 e0       	ldi	r24, 0x04	; 4
    19ea:	c7 33       	cpi	r28, 0x37	; 55
    19ec:	d8 07       	cpc	r29, r24
    19ee:	59 f7       	brne	.-42     	; 0x19c6 <progOutline(unsigned int, unsigned char)+0x236>
    19f0:	20 cf       	rjmp	.-448    	; 0x1832 <progOutline(unsigned int, unsigned char)+0xa2>
    19f2:	e9 30       	cpi	r30, 0x09	; 9
    19f4:	f1 05       	cpc	r31, r1
    19f6:	20 f5       	brcc	.+72     	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    19f8:	e0 50       	subi	r30, 0x00	; 0
    19fa:	f3 4f       	sbci	r31, 0xF3	; 243
    19fc:	0c 94 02 36 	jmp	0x6c04	; 0x6c04 <__tablejump2__>
    1a00:	09 0d       	add	r16, r9
    1a02:	33 0d       	add	r19, r3
    1a04:	4b 0d       	add	r20, r11
    1a06:	63 0d       	add	r22, r3
    1a08:	7b 0d       	add	r23, r11
    1a0a:	93 0d       	add	r25, r3
    1a0c:	ab 0d       	add	r26, r11
    1a0e:	c3 0d       	add	r28, r3
    1a10:	de 0d       	add	r29, r14
    1a12:	cf e5       	ldi	r28, 0x5F	; 95
    1a14:	d6 e0       	ldi	r29, 0x06	; 6
    1a16:	09 91       	ld	r16, Y+
    1a18:	19 91       	ld	r17, Y+
    1a1a:	aa d8       	rcall	.-3756   	; 0xb70 <getRandomColorValue()>
    1a1c:	f8 2e       	mov	r15, r24
    1a1e:	a8 d8       	rcall	.-3760   	; 0xb70 <getRandomColorValue()>
    1a20:	e8 2e       	mov	r14, r24
    1a22:	a6 d8       	rcall	.-3764   	; 0xb70 <getRandomColorValue()>
    1a24:	f8 01       	movw	r30, r16
    1a26:	ee 0f       	add	r30, r30
    1a28:	ff 1f       	adc	r31, r31
    1a2a:	e0 0f       	add	r30, r16
    1a2c:	f1 1f       	adc	r31, r17
    1a2e:	e0 54       	subi	r30, 0x40	; 64
    1a30:	f7 4f       	sbci	r31, 0xF7	; 247
    1a32:	80 83       	st	Z, r24
    1a34:	e1 82       	std	Z+1, r14	; 0x01
    1a36:	f2 82       	std	Z+2, r15	; 0x02
    1a38:	86 e0       	ldi	r24, 0x06	; 6
    1a3a:	cb 3f       	cpi	r28, 0xFB	; 251
    1a3c:	d8 07       	cpc	r29, r24
    1a3e:	59 f7       	brne	.-42     	; 0x1a16 <progOutline(unsigned int, unsigned char)+0x286>
    1a40:	8f eb       	ldi	r24, 0xBF	; 191
    1a42:	9e e0       	ldi	r25, 0x0E	; 14
    1a44:	84 d8       	rcall	.-3832   	; 0xb4e <CFastLED::show()>
    1a46:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    1a4a:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    1a4e:	01 97       	sbiw	r24, 0x01	; 1
    1a50:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    1a54:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    1a58:	18 16       	cp	r1, r24
    1a5a:	19 06       	cpc	r1, r25
    1a5c:	0c f4       	brge	.+2      	; 0x1a60 <progOutline(unsigned int, unsigned char)+0x2d0>
    1a5e:	fa ce       	rjmp	.-524    	; 0x1854 <progOutline(unsigned int, unsigned char)+0xc4>
    1a60:	10 92 a2 08 	sts	0x08A2, r1	; 0x8008a2 <scannerGoesBack>
    1a64:	f7 ce       	rjmp	.-530    	; 0x1854 <progOutline(unsigned int, unsigned char)+0xc4>
    1a66:	c3 ed       	ldi	r28, 0xD3	; 211
    1a68:	d5 e0       	ldi	r29, 0x05	; 5
    1a6a:	09 91       	ld	r16, Y+
    1a6c:	19 91       	ld	r17, Y+
    1a6e:	80 d8       	rcall	.-3840   	; 0xb70 <getRandomColorValue()>
    1a70:	f8 2e       	mov	r15, r24
    1a72:	7e d8       	rcall	.-3844   	; 0xb70 <getRandomColorValue()>
    1a74:	e8 2e       	mov	r14, r24
    1a76:	7c d8       	rcall	.-3848   	; 0xb70 <getRandomColorValue()>
    1a78:	f8 01       	movw	r30, r16
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	e0 0f       	add	r30, r16
    1a80:	f1 1f       	adc	r31, r17
    1a82:	e0 54       	subi	r30, 0x40	; 64
    1a84:	f7 4f       	sbci	r31, 0xF7	; 247
    1a86:	80 83       	st	Z, r24
    1a88:	e1 82       	std	Z+1, r14	; 0x01
    1a8a:	f2 82       	std	Z+2, r15	; 0x02
    1a8c:	86 e0       	ldi	r24, 0x06	; 6
    1a8e:	cf 35       	cpi	r28, 0x5F	; 95
    1a90:	d8 07       	cpc	r29, r24
    1a92:	59 f7       	brne	.-42     	; 0x1a6a <progOutline(unsigned int, unsigned char)+0x2da>
    1a94:	d5 cf       	rjmp	.-86     	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a96:	c7 e6       	ldi	r28, 0x67	; 103
    1a98:	d5 e0       	ldi	r29, 0x05	; 5
    1a9a:	09 91       	ld	r16, Y+
    1a9c:	19 91       	ld	r17, Y+
    1a9e:	68 d8       	rcall	.-3888   	; 0xb70 <getRandomColorValue()>
    1aa0:	f8 2e       	mov	r15, r24
    1aa2:	66 d8       	rcall	.-3892   	; 0xb70 <getRandomColorValue()>
    1aa4:	e8 2e       	mov	r14, r24
    1aa6:	64 d8       	rcall	.-3896   	; 0xb70 <getRandomColorValue()>
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	e0 0f       	add	r30, r16
    1ab0:	f1 1f       	adc	r31, r17
    1ab2:	e0 54       	subi	r30, 0x40	; 64
    1ab4:	f7 4f       	sbci	r31, 0xF7	; 247
    1ab6:	80 83       	st	Z, r24
    1ab8:	e1 82       	std	Z+1, r14	; 0x01
    1aba:	f2 82       	std	Z+2, r15	; 0x02
    1abc:	85 e0       	ldi	r24, 0x05	; 5
    1abe:	c3 3d       	cpi	r28, 0xD3	; 211
    1ac0:	d8 07       	cpc	r29, r24
    1ac2:	59 f7       	brne	.-42     	; 0x1a9a <progOutline(unsigned int, unsigned char)+0x30a>
    1ac4:	bd cf       	rjmp	.-134    	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    1ac6:	cd e1       	ldi	r28, 0x1D	; 29
    1ac8:	d5 e0       	ldi	r29, 0x05	; 5
    1aca:	09 91       	ld	r16, Y+
    1acc:	19 91       	ld	r17, Y+
    1ace:	50 d8       	rcall	.-3936   	; 0xb70 <getRandomColorValue()>
    1ad0:	f8 2e       	mov	r15, r24
    1ad2:	4e d8       	rcall	.-3940   	; 0xb70 <getRandomColorValue()>
    1ad4:	e8 2e       	mov	r14, r24
    1ad6:	4c d8       	rcall	.-3944   	; 0xb70 <getRandomColorValue()>
    1ad8:	f8 01       	movw	r30, r16
    1ada:	ee 0f       	add	r30, r30
    1adc:	ff 1f       	adc	r31, r31
    1ade:	e0 0f       	add	r30, r16
    1ae0:	f1 1f       	adc	r31, r17
    1ae2:	e0 54       	subi	r30, 0x40	; 64
    1ae4:	f7 4f       	sbci	r31, 0xF7	; 247
    1ae6:	80 83       	st	Z, r24
    1ae8:	e1 82       	std	Z+1, r14	; 0x01
    1aea:	f2 82       	std	Z+2, r15	; 0x02
    1aec:	85 e0       	ldi	r24, 0x05	; 5
    1aee:	c7 36       	cpi	r28, 0x67	; 103
    1af0:	d8 07       	cpc	r29, r24
    1af2:	59 f7       	brne	.-42     	; 0x1aca <progOutline(unsigned int, unsigned char)+0x33a>
    1af4:	a5 cf       	rjmp	.-182    	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    1af6:	cd ed       	ldi	r28, 0xDD	; 221
    1af8:	d4 e0       	ldi	r29, 0x04	; 4
    1afa:	09 91       	ld	r16, Y+
    1afc:	19 91       	ld	r17, Y+
    1afe:	38 d8       	rcall	.-3984   	; 0xb70 <getRandomColorValue()>
    1b00:	f8 2e       	mov	r15, r24
    1b02:	36 d8       	rcall	.-3988   	; 0xb70 <getRandomColorValue()>
    1b04:	e8 2e       	mov	r14, r24
    1b06:	34 d8       	rcall	.-3992   	; 0xb70 <getRandomColorValue()>
    1b08:	f8 01       	movw	r30, r16
    1b0a:	ee 0f       	add	r30, r30
    1b0c:	ff 1f       	adc	r31, r31
    1b0e:	e0 0f       	add	r30, r16
    1b10:	f1 1f       	adc	r31, r17
    1b12:	e0 54       	subi	r30, 0x40	; 64
    1b14:	f7 4f       	sbci	r31, 0xF7	; 247
    1b16:	80 83       	st	Z, r24
    1b18:	e1 82       	std	Z+1, r14	; 0x01
    1b1a:	f2 82       	std	Z+2, r15	; 0x02
    1b1c:	85 e0       	ldi	r24, 0x05	; 5
    1b1e:	cd 31       	cpi	r28, 0x1D	; 29
    1b20:	d8 07       	cpc	r29, r24
    1b22:	59 f7       	brne	.-42     	; 0x1afa <progOutline(unsigned int, unsigned char)+0x36a>
    1b24:	8d cf       	rjmp	.-230    	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    1b26:	c1 ea       	ldi	r28, 0xA1	; 161
    1b28:	d4 e0       	ldi	r29, 0x04	; 4
    1b2a:	09 91       	ld	r16, Y+
    1b2c:	19 91       	ld	r17, Y+
    1b2e:	20 d8       	rcall	.-4032   	; 0xb70 <getRandomColorValue()>
    1b30:	f8 2e       	mov	r15, r24
    1b32:	1e d8       	rcall	.-4036   	; 0xb70 <getRandomColorValue()>
    1b34:	e8 2e       	mov	r14, r24
    1b36:	1c d8       	rcall	.-4040   	; 0xb70 <getRandomColorValue()>
    1b38:	f8 01       	movw	r30, r16
    1b3a:	ee 0f       	add	r30, r30
    1b3c:	ff 1f       	adc	r31, r31
    1b3e:	e0 0f       	add	r30, r16
    1b40:	f1 1f       	adc	r31, r17
    1b42:	e0 54       	subi	r30, 0x40	; 64
    1b44:	f7 4f       	sbci	r31, 0xF7	; 247
    1b46:	80 83       	st	Z, r24
    1b48:	e1 82       	std	Z+1, r14	; 0x01
    1b4a:	f2 82       	std	Z+2, r15	; 0x02
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	cd 3d       	cpi	r28, 0xDD	; 221
    1b50:	d8 07       	cpc	r29, r24
    1b52:	59 f7       	brne	.-42     	; 0x1b2a <progOutline(unsigned int, unsigned char)+0x39a>
    1b54:	75 cf       	rjmp	.-278    	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    1b56:	cb e6       	ldi	r28, 0x6B	; 107
    1b58:	d4 e0       	ldi	r29, 0x04	; 4
    1b5a:	09 91       	ld	r16, Y+
    1b5c:	19 91       	ld	r17, Y+
    1b5e:	08 d8       	rcall	.-4080   	; 0xb70 <getRandomColorValue()>
    1b60:	f8 2e       	mov	r15, r24
    1b62:	06 d8       	rcall	.-4084   	; 0xb70 <getRandomColorValue()>
    1b64:	e8 2e       	mov	r14, r24
    1b66:	04 d8       	rcall	.-4088   	; 0xb70 <getRandomColorValue()>
    1b68:	f8 01       	movw	r30, r16
    1b6a:	ee 0f       	add	r30, r30
    1b6c:	ff 1f       	adc	r31, r31
    1b6e:	e0 0f       	add	r30, r16
    1b70:	f1 1f       	adc	r31, r17
    1b72:	e0 54       	subi	r30, 0x40	; 64
    1b74:	f7 4f       	sbci	r31, 0xF7	; 247
    1b76:	80 83       	st	Z, r24
    1b78:	e1 82       	std	Z+1, r14	; 0x01
    1b7a:	f2 82       	std	Z+2, r15	; 0x02
    1b7c:	84 e0       	ldi	r24, 0x04	; 4
    1b7e:	c1 3a       	cpi	r28, 0xA1	; 161
    1b80:	d8 07       	cpc	r29, r24
    1b82:	59 f7       	brne	.-42     	; 0x1b5a <progOutline(unsigned int, unsigned char)+0x3ca>
    1b84:	5d cf       	rjmp	.-326    	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    1b86:	c7 e3       	ldi	r28, 0x37	; 55
    1b88:	d4 e0       	ldi	r29, 0x04	; 4
    1b8a:	09 91       	ld	r16, Y+
    1b8c:	19 91       	ld	r17, Y+
    1b8e:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    1b92:	f8 2e       	mov	r15, r24
    1b94:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    1b98:	e8 2e       	mov	r14, r24
    1b9a:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    1b9e:	f8 01       	movw	r30, r16
    1ba0:	ee 0f       	add	r30, r30
    1ba2:	ff 1f       	adc	r31, r31
    1ba4:	e0 0f       	add	r30, r16
    1ba6:	f1 1f       	adc	r31, r17
    1ba8:	e0 54       	subi	r30, 0x40	; 64
    1baa:	f7 4f       	sbci	r31, 0xF7	; 247
    1bac:	80 83       	st	Z, r24
    1bae:	e1 82       	std	Z+1, r14	; 0x01
    1bb0:	f2 82       	std	Z+2, r15	; 0x02
    1bb2:	84 e0       	ldi	r24, 0x04	; 4
    1bb4:	cb 36       	cpi	r28, 0x6B	; 107
    1bb6:	d8 07       	cpc	r29, r24
    1bb8:	41 f7       	brne	.-48     	; 0x1b8a <progOutline(unsigned int, unsigned char)+0x3fa>
    1bba:	42 cf       	rjmp	.-380    	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>
    1bbc:	c7 e0       	ldi	r28, 0x07	; 7
    1bbe:	d4 e0       	ldi	r29, 0x04	; 4
    1bc0:	09 91       	ld	r16, Y+
    1bc2:	19 91       	ld	r17, Y+
    1bc4:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    1bc8:	f8 2e       	mov	r15, r24
    1bca:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    1bce:	e8 2e       	mov	r14, r24
    1bd0:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	ee 0f       	add	r30, r30
    1bd8:	ff 1f       	adc	r31, r31
    1bda:	e0 0f       	add	r30, r16
    1bdc:	f1 1f       	adc	r31, r17
    1bde:	e0 54       	subi	r30, 0x40	; 64
    1be0:	f7 4f       	sbci	r31, 0xF7	; 247
    1be2:	80 83       	st	Z, r24
    1be4:	e1 82       	std	Z+1, r14	; 0x01
    1be6:	f2 82       	std	Z+2, r15	; 0x02
    1be8:	84 e0       	ldi	r24, 0x04	; 4
    1bea:	c7 33       	cpi	r28, 0x37	; 55
    1bec:	d8 07       	cpc	r29, r24
    1bee:	41 f7       	brne	.-48     	; 0x1bc0 <progOutline(unsigned int, unsigned char)+0x430>
    1bf0:	27 cf       	rjmp	.-434    	; 0x1a40 <progOutline(unsigned int, unsigned char)+0x2b0>

00001bf2 <progScrollText(String, unsigned int, int, unsigned char)>:
    1bf2:	cf 92       	push	r12
    1bf4:	df 92       	push	r13
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	8c 01       	movw	r16, r24
    1c02:	6b 01       	movw	r12, r22
    1c04:	ea 01       	movw	r28, r20
    1c06:	f2 2e       	mov	r15, r18
    1c08:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    1c0c:	81 11       	cpse	r24, r1
    1c0e:	1a c0       	rjmp	.+52     	; 0x1c44 <progScrollText(String, unsigned int, int, unsigned char)+0x52>
    1c10:	61 e0       	ldi	r22, 0x01	; 1
    1c12:	8f eb       	ldi	r24, 0xBF	; 191
    1c14:	9e e0       	ldi	r25, 0x0E	; 14
    1c16:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    1c1a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    1c1e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    1c22:	f0 92 ab 08 	sts	0x08AB, r15	; 0x8008ab <nextSongPart>
    1c26:	81 e0       	ldi	r24, 0x01	; 1
    1c28:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    1c2c:	84 e6       	ldi	r24, 0x64	; 100
    1c2e:	90 e0       	ldi	r25, 0x00	; 0
    1c30:	90 93 b3 08 	sts	0x08B3, r25	; 0x8008b3 <millisCounterTimer+0x1>
    1c34:	80 93 b2 08 	sts	0x08B2, r24	; 0x8008b2 <millisCounterTimer>
    1c38:	87 e1       	ldi	r24, 0x17	; 23
    1c3a:	90 e0       	ldi	r25, 0x00	; 0
    1c3c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1c40:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1c44:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
    1c48:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
    1c4c:	84 36       	cpi	r24, 0x64	; 100
    1c4e:	91 05       	cpc	r25, r1
    1c50:	08 f4       	brcc	.+2      	; 0x1c54 <progScrollText(String, unsigned int, int, unsigned char)+0x62>
    1c52:	5e c0       	rjmp	.+188    	; 0x1d10 <progScrollText(String, unsigned int, int, unsigned char)+0x11e>
    1c54:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
    1c58:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
    1c5c:	85 e0       	ldi	r24, 0x05	; 5
    1c5e:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <FastLED>
    1c62:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1c66:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1c6a:	0e 94 af 05 	call	0xb5e	; 0xb5e <Framebuffer_GFX::clear()>
    1c6e:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1c72:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1c76:	dc 01       	movw	r26, r24
    1c78:	56 96       	adiw	r26, 0x16	; 22
    1c7a:	1c 92       	st	X, r1
    1c7c:	61 e0       	ldi	r22, 0x01	; 1
    1c7e:	0e 94 03 22 	call	0x4406	; 0x4406 <Adafruit_GFX::setTextSize(unsigned char)>
    1c82:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1c86:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1c8a:	dc 01       	movw	r26, r24
    1c8c:	ed 91       	ld	r30, X+
    1c8e:	fc 91       	ld	r31, X
    1c90:	00 8c       	ldd	r0, Z+24	; 0x18
    1c92:	f1 8d       	ldd	r31, Z+25	; 0x19
    1c94:	e0 2d       	mov	r30, r0
    1c96:	60 e0       	ldi	r22, 0x00	; 0
    1c98:	09 95       	icall
    1c9a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1c9e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1ca2:	01 97       	sbiw	r24, 0x01	; 1
    1ca4:	86 3a       	cpi	r24, 0xA6	; 166
    1ca6:	bf ef       	ldi	r27, 0xFF	; 255
    1ca8:	9b 07       	cpc	r25, r27
    1caa:	7c f1       	brlt	.+94     	; 0x1d0a <progScrollText(String, unsigned int, int, unsigned char)+0x118>
    1cac:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1cb0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1cb4:	0e 94 0b 34 	call	0x6816	; 0x6816 <yield>
    1cb8:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1cbc:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1cc0:	0e 94 af 05 	call	0xb5e	; 0xb5e <Framebuffer_GFX::clear()>
    1cc4:	e0 91 ae 0e 	lds	r30, 0x0EAE	; 0x800eae <matrix>
    1cc8:	f0 91 af 0e 	lds	r31, 0x0EAF	; 0x800eaf <matrix+0x1>
    1ccc:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1cd0:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1cd4:	94 87       	std	Z+12, r25	; 0x0c
    1cd6:	83 87       	std	Z+11, r24	; 0x0b
    1cd8:	8d e0       	ldi	r24, 0x0D	; 13
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	96 87       	std	Z+14, r25	; 0x0e
    1cde:	85 87       	std	Z+13, r24	; 0x0d
    1ce0:	d2 8b       	std	Z+18, r29	; 0x12
    1ce2:	c1 8b       	std	Z+17, r28	; 0x11
    1ce4:	d0 8b       	std	Z+16, r29	; 0x10
    1ce6:	c7 87       	std	Z+15, r28	; 0x0f
    1ce8:	b8 01       	movw	r22, r16
    1cea:	cf 01       	movw	r24, r30
    1cec:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <Print::print(String const&)>
    1cf0:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1cf4:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1cf8:	df 91       	pop	r29
    1cfa:	cf 91       	pop	r28
    1cfc:	1f 91       	pop	r17
    1cfe:	0f 91       	pop	r16
    1d00:	ff 90       	pop	r15
    1d02:	df 90       	pop	r13
    1d04:	cf 90       	pop	r12
    1d06:	0c 94 22 22 	jmp	0x4444	; 0x4444 <FastLED_NeoMatrix::show()>
    1d0a:	87 e1       	ldi	r24, 0x17	; 23
    1d0c:	90 e0       	ldi	r25, 0x00	; 0
    1d0e:	ce cf       	rjmp	.-100    	; 0x1cac <progScrollText(String, unsigned int, int, unsigned char)+0xba>
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	df 90       	pop	r13
    1d1c:	cf 90       	pop	r12
    1d1e:	08 95       	ret

00001d20 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    1d20:	8f 92       	push	r8
    1d22:	9f 92       	push	r9
    1d24:	af 92       	push	r10
    1d26:	bf 92       	push	r11
    1d28:	cf 92       	push	r12
    1d2a:	df 92       	push	r13
    1d2c:	ef 92       	push	r14
    1d2e:	0f 93       	push	r16
    1d30:	1f 93       	push	r17
    1d32:	cf 93       	push	r28
    1d34:	df 93       	push	r29
    1d36:	ec 01       	movw	r28, r24
    1d38:	5b 01       	movw	r10, r22
    1d3a:	6a 01       	movw	r12, r20
    1d3c:	49 01       	movw	r8, r18
    1d3e:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    1d42:	81 11       	cpse	r24, r1
    1d44:	16 c0       	rjmp	.+44     	; 0x1d72 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    1d46:	61 e0       	ldi	r22, 0x01	; 1
    1d48:	8f eb       	ldi	r24, 0xBF	; 191
    1d4a:	9e e0       	ldi	r25, 0x0E	; 14
    1d4c:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    1d50:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1d54:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1d58:	e0 92 ab 08 	sts	0x08AB, r14	; 0x8008ab <nextSongPart>
    1d5c:	81 e0       	ldi	r24, 0x01	; 1
    1d5e:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    1d62:	10 92 68 08 	sts	0x0868, r1	; 0x800868 <zaehlerWortArray+0x1>
    1d66:	10 92 67 08 	sts	0x0867, r1	; 0x800867 <zaehlerWortArray>
    1d6a:	d0 92 b3 08 	sts	0x08B3, r13	; 0x8008b3 <millisCounterTimer+0x1>
    1d6e:	c0 92 b2 08 	sts	0x08B2, r12	; 0x8008b2 <millisCounterTimer>
    1d72:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
    1d76:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
    1d7a:	8c 15       	cp	r24, r12
    1d7c:	9d 05       	cpc	r25, r13
    1d7e:	08 f4       	brcc	.+2      	; 0x1d82 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    1d80:	5b c0       	rjmp	.+182    	; 0x1e38 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1d82:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
    1d86:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
    1d8a:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <zaehlerWortArray>
    1d8e:	90 91 68 08 	lds	r25, 0x0868	; 0x800868 <zaehlerWortArray+0x1>
    1d92:	a8 16       	cp	r10, r24
    1d94:	b9 06       	cpc	r11, r25
    1d96:	0c f4       	brge	.+2      	; 0x1d9a <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    1d98:	4f c0       	rjmp	.+158    	; 0x1e38 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1d9a:	85 e0       	ldi	r24, 0x05	; 5
    1d9c:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <FastLED>
    1da0:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1da4:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1da8:	0e 94 af 05 	call	0xb5e	; 0xb5e <Framebuffer_GFX::clear()>
    1dac:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1db0:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1db4:	dc 01       	movw	r26, r24
    1db6:	56 96       	adiw	r26, 0x16	; 22
    1db8:	1c 92       	st	X, r1
    1dba:	61 e0       	ldi	r22, 0x01	; 1
    1dbc:	0e 94 03 22 	call	0x4406	; 0x4406 <Adafruit_GFX::setTextSize(unsigned char)>
    1dc0:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1dc4:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1dc8:	dc 01       	movw	r26, r24
    1dca:	ed 91       	ld	r30, X+
    1dcc:	fc 91       	ld	r31, X
    1dce:	00 8c       	ldd	r0, Z+24	; 0x18
    1dd0:	f1 8d       	ldd	r31, Z+25	; 0x19
    1dd2:	e0 2d       	mov	r30, r0
    1dd4:	60 e0       	ldi	r22, 0x00	; 0
    1dd6:	09 95       	icall
    1dd8:	0e 94 0b 34 	call	0x6816	; 0x6816 <yield>
    1ddc:	e0 91 ae 0e 	lds	r30, 0x0EAE	; 0x800eae <matrix>
    1de0:	f0 91 af 0e 	lds	r31, 0x0EAF	; 0x800eaf <matrix+0x1>
    1de4:	82 e0       	ldi	r24, 0x02	; 2
    1de6:	90 e0       	ldi	r25, 0x00	; 0
    1de8:	94 87       	std	Z+12, r25	; 0x0c
    1dea:	83 87       	std	Z+11, r24	; 0x0b
    1dec:	8d e0       	ldi	r24, 0x0D	; 13
    1dee:	90 e0       	ldi	r25, 0x00	; 0
    1df0:	96 87       	std	Z+14, r25	; 0x0e
    1df2:	85 87       	std	Z+13, r24	; 0x0d
    1df4:	12 8b       	std	Z+18, r17	; 0x12
    1df6:	01 8b       	std	Z+17, r16	; 0x11
    1df8:	10 8b       	std	Z+16, r17	; 0x10
    1dfa:	07 87       	std	Z+15, r16	; 0x0f
    1dfc:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <zaehlerWortArray>
    1e00:	90 91 68 08 	lds	r25, 0x0868	; 0x800868 <zaehlerWortArray+0x1>
    1e04:	27 e0       	ldi	r18, 0x07	; 7
    1e06:	28 9f       	mul	r18, r24
    1e08:	b0 01       	movw	r22, r0
    1e0a:	29 9f       	mul	r18, r25
    1e0c:	70 0d       	add	r23, r0
    1e0e:	11 24       	eor	r1, r1
    1e10:	6c 0f       	add	r22, r28
    1e12:	7d 1f       	adc	r23, r29
    1e14:	cf 01       	movw	r24, r30
    1e16:	0e 94 5c 30 	call	0x60b8	; 0x60b8 <Print::print(String const&)>
    1e1a:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    1e1e:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    1e22:	0e 94 22 22 	call	0x4444	; 0x4444 <FastLED_NeoMatrix::show()>
    1e26:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <zaehlerWortArray>
    1e2a:	90 91 68 08 	lds	r25, 0x0868	; 0x800868 <zaehlerWortArray+0x1>
    1e2e:	01 96       	adiw	r24, 0x01	; 1
    1e30:	90 93 68 08 	sts	0x0868, r25	; 0x800868 <zaehlerWortArray+0x1>
    1e34:	80 93 67 08 	sts	0x0867, r24	; 0x800867 <zaehlerWortArray>
    1e38:	df 91       	pop	r29
    1e3a:	cf 91       	pop	r28
    1e3c:	1f 91       	pop	r17
    1e3e:	0f 91       	pop	r16
    1e40:	ef 90       	pop	r14
    1e42:	df 90       	pop	r13
    1e44:	cf 90       	pop	r12
    1e46:	bf 90       	pop	r11
    1e48:	af 90       	pop	r10
    1e4a:	9f 90       	pop	r9
    1e4c:	8f 90       	pop	r8
    1e4e:	08 95       	ret

00001e50 <SetupTotallyRandomPalette()>:
}

// This function fills the palette with totally random colors.
void SetupTotallyRandomPalette()
    1e50:	bf 92       	push	r11
    1e52:	cf 92       	push	r12
    1e54:	df 92       	push	r13
    1e56:	ef 92       	push	r14
    1e58:	ff 92       	push	r15
    1e5a:	0f 93       	push	r16
    1e5c:	1f 93       	push	r17
    1e5e:	cf 93       	push	r28
    1e60:	df 93       	push	r29
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <SetupTotallyRandomPalette()+0x14>
    1e64:	1f 92       	push	r1
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    1e6a:	00 e7       	ldi	r16, 0x70	; 112
    1e6c:	18 e0       	ldi	r17, 0x08	; 8
    1e6e:	80 ea       	ldi	r24, 0xA0	; 160
    1e70:	e8 2e       	mov	r14, r24
    1e72:	88 e0       	ldi	r24, 0x08	; 8
    1e74:	f8 2e       	mov	r15, r24
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    1e76:	95 e0       	ldi	r25, 0x05	; 5
    1e78:	c9 2e       	mov	r12, r25
    1e7a:	98 e0       	ldi	r25, 0x08	; 8
    1e7c:	d9 2e       	mov	r13, r25
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    1e7e:	bb 24       	eor	r11, r11
    1e80:	ba 94       	dec	r11
    1e82:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    1e86:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    1e8a:	2c 9d       	mul	r18, r12
    1e8c:	c0 01       	movw	r24, r0
    1e8e:	2d 9d       	mul	r18, r13
    1e90:	90 0d       	add	r25, r0
    1e92:	3c 9d       	mul	r19, r12
    1e94:	90 0d       	add	r25, r0
    1e96:	11 24       	eor	r1, r1
    1e98:	87 5e       	subi	r24, 0xE7	; 231
    1e9a:	99 4c       	sbci	r25, 0xC9	; 201
    1e9c:	8c 9d       	mul	r24, r12
    1e9e:	90 01       	movw	r18, r0
    1ea0:	8d 9d       	mul	r24, r13
    1ea2:	30 0d       	add	r19, r0
    1ea4:	9c 9d       	mul	r25, r12
    1ea6:	30 0d       	add	r19, r0
    1ea8:	11 24       	eor	r1, r1
    1eaa:	27 5e       	subi	r18, 0xE7	; 231
    1eac:	39 4c       	sbci	r19, 0xC9	; 201
    1eae:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    1eb2:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    1eb6:	23 0f       	add	r18, r19
    1eb8:	29 83       	std	Y+1, r18	; 0x01
    1eba:	ba 82       	std	Y+2, r11	; 0x02
    1ebc:	89 0f       	add	r24, r25
    1ebe:	8b 83       	std	Y+3, r24	; 0x03
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    1ec0:	b8 01       	movw	r22, r16
    1ec2:	ce 01       	movw	r24, r28
    1ec4:	01 96       	adiw	r24, 0x01	; 1
    1ec6:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    1eca:	0d 5f       	subi	r16, 0xFD	; 253
    1ecc:	1f 4f       	sbci	r17, 0xFF	; 255
{
    1ece:	e0 16       	cp	r14, r16
    1ed0:	f1 06       	cpc	r15, r17
    1ed2:	b9 f6       	brne	.-82     	; 0x1e82 <SetupTotallyRandomPalette()+0x32>
	for (int i = 0; i < 16; i++) {
		currentPalette[i] = CHSV(random8(), 255, random8());
	}
    1ed4:	0f 90       	pop	r0
    1ed6:	0f 90       	pop	r0
    1ed8:	0f 90       	pop	r0
    1eda:	df 91       	pop	r29
    1edc:	cf 91       	pop	r28
    1ede:	1f 91       	pop	r17
    1ee0:	0f 91       	pop	r16
    1ee2:	ff 90       	pop	r15
    1ee4:	ef 90       	pop	r14
    1ee6:	df 90       	pop	r13
    1ee8:	cf 90       	pop	r12
    1eea:	bf 90       	pop	r11
    1eec:	08 95       	ret

00001eee <SetupBlackAndWhiteStripedPalette()>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    1eee:	cf 93       	push	r28
    1ef0:	df 93       	push	r29
    1ef2:	00 d0       	rcall	.+0      	; 0x1ef4 <SetupBlackAndWhiteStripedPalette()+0x6>
    1ef4:	1f 92       	push	r1
    1ef6:	cd b7       	in	r28, 0x3d	; 61
    1ef8:	de b7       	in	r29, 0x3e	; 62
    1efa:	19 82       	std	Y+1, r1	; 0x01
    1efc:	1a 82       	std	Y+2, r1	; 0x02
    1efe:	1b 82       	std	Y+3, r1	; 0x03
    1f00:	ae 01       	movw	r20, r28
    1f02:	4f 5f       	subi	r20, 0xFF	; 255
    1f04:	5f 4f       	sbci	r21, 0xFF	; 255
    1f06:	60 e1       	ldi	r22, 0x10	; 16
    1f08:	70 e0       	ldi	r23, 0x00	; 0
    1f0a:	80 e7       	ldi	r24, 0x70	; 112
    1f0c:	98 e0       	ldi	r25, 0x08	; 8
    1f0e:	0e 94 96 24 	call	0x492c	; 0x492c <fill_solid(CRGB*, int, CRGB const&)>
    1f12:	e0 e7       	ldi	r30, 0x70	; 112
    1f14:	f8 e0       	ldi	r31, 0x08	; 8
    1f16:	8f ef       	ldi	r24, 0xFF	; 255
    1f18:	80 83       	st	Z, r24
    1f1a:	81 83       	std	Z+1, r24	; 0x01
    1f1c:	82 83       	std	Z+2, r24	; 0x02
    1f1e:	84 87       	std	Z+12, r24	; 0x0c
    1f20:	85 87       	std	Z+13, r24	; 0x0d
    1f22:	86 87       	std	Z+14, r24	; 0x0e
    1f24:	80 8f       	std	Z+24, r24	; 0x18
    1f26:	81 8f       	std	Z+25, r24	; 0x19
    1f28:	82 8f       	std	Z+26, r24	; 0x1a
    1f2a:	84 a3       	std	Z+36, r24	; 0x24
    1f2c:	85 a3       	std	Z+37, r24	; 0x25
    1f2e:	86 a3       	std	Z+38, r24	; 0x26
    1f30:	0f 90       	pop	r0
    1f32:	0f 90       	pop	r0
    1f34:	0f 90       	pop	r0
    1f36:	df 91       	pop	r29
    1f38:	cf 91       	pop	r28
    1f3a:	08 95       	ret

00001f3c <SetupPurpleAndGreenPalette()>:
    1f3c:	1f 93       	push	r17
    1f3e:	cf 93       	push	r28
    1f40:	df 93       	push	r29
    1f42:	cd b7       	in	r28, 0x3d	; 61
    1f44:	de b7       	in	r29, 0x3e	; 62
    1f46:	e6 97       	sbiw	r28, 0x36	; 54
    1f48:	0f b6       	in	r0, 0x3f	; 63
    1f4a:	f8 94       	cli
    1f4c:	de bf       	out	0x3e, r29	; 62
    1f4e:	0f be       	out	0x3f, r0	; 63
    1f50:	cd bf       	out	0x3d, r28	; 61
    1f52:	80 ec       	ldi	r24, 0xC0	; 192
    1f54:	89 83       	std	Y+1, r24	; 0x01
    1f56:	1f ef       	ldi	r17, 0xFF	; 255
    1f58:	1a 83       	std	Y+2, r17	; 0x02
    1f5a:	1b 83       	std	Y+3, r17	; 0x03
    1f5c:	be 01       	movw	r22, r28
    1f5e:	6c 5c       	subi	r22, 0xCC	; 204
    1f60:	7f 4f       	sbci	r23, 0xFF	; 255
    1f62:	ce 01       	movw	r24, r28
    1f64:	01 96       	adiw	r24, 0x01	; 1
    1f66:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    1f6a:	80 e6       	ldi	r24, 0x60	; 96
    1f6c:	89 83       	std	Y+1, r24	; 0x01
    1f6e:	1a 83       	std	Y+2, r17	; 0x02
    1f70:	1b 83       	std	Y+3, r17	; 0x03
    1f72:	be 01       	movw	r22, r28
    1f74:	6f 5c       	subi	r22, 0xCF	; 207
    1f76:	7f 4f       	sbci	r23, 0xFF	; 255
    1f78:	ce 01       	movw	r24, r28
    1f7a:	01 96       	adiw	r24, 0x01	; 1
    1f7c:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    1f80:	59 a9       	ldd	r21, Y+49	; 0x31
    1f82:	59 83       	std	Y+1, r21	; 0x01
    1f84:	4a a9       	ldd	r20, Y+50	; 0x32
    1f86:	4a 83       	std	Y+2, r20	; 0x02
    1f88:	3b a9       	ldd	r19, Y+51	; 0x33
    1f8a:	3b 83       	std	Y+3, r19	; 0x03
    1f8c:	5c 83       	std	Y+4, r21	; 0x04
    1f8e:	4d 83       	std	Y+5, r20	; 0x05
    1f90:	3e 83       	std	Y+6, r19	; 0x06
    1f92:	1f 82       	std	Y+7, r1	; 0x07
    1f94:	18 86       	std	Y+8, r1	; 0x08
    1f96:	19 86       	std	Y+9, r1	; 0x09
    1f98:	1a 86       	std	Y+10, r1	; 0x0a
    1f9a:	1b 86       	std	Y+11, r1	; 0x0b
    1f9c:	1c 86       	std	Y+12, r1	; 0x0c
    1f9e:	2c a9       	ldd	r18, Y+52	; 0x34
    1fa0:	2d 87       	std	Y+13, r18	; 0x0d
    1fa2:	9d a9       	ldd	r25, Y+53	; 0x35
    1fa4:	9e 87       	std	Y+14, r25	; 0x0e
    1fa6:	8e a9       	ldd	r24, Y+54	; 0x36
    1fa8:	8f 87       	std	Y+15, r24	; 0x0f
    1faa:	28 8b       	std	Y+16, r18	; 0x10
    1fac:	99 8b       	std	Y+17, r25	; 0x11
    1fae:	8a 8b       	std	Y+18, r24	; 0x12
    1fb0:	1b 8a       	std	Y+19, r1	; 0x13
    1fb2:	1c 8a       	std	Y+20, r1	; 0x14
    1fb4:	1d 8a       	std	Y+21, r1	; 0x15
    1fb6:	1e 8a       	std	Y+22, r1	; 0x16
    1fb8:	1f 8a       	std	Y+23, r1	; 0x17
    1fba:	18 8e       	std	Y+24, r1	; 0x18
    1fbc:	59 8f       	std	Y+25, r21	; 0x19
    1fbe:	4a 8f       	std	Y+26, r20	; 0x1a
    1fc0:	3b 8f       	std	Y+27, r19	; 0x1b
    1fc2:	5c 8f       	std	Y+28, r21	; 0x1c
    1fc4:	4d 8f       	std	Y+29, r20	; 0x1d
    1fc6:	3e 8f       	std	Y+30, r19	; 0x1e
    1fc8:	1f 8e       	std	Y+31, r1	; 0x1f
    1fca:	18 a2       	std	Y+32, r1	; 0x20
    1fcc:	19 a2       	std	Y+33, r1	; 0x21
    1fce:	1a a2       	std	Y+34, r1	; 0x22
    1fd0:	1b a2       	std	Y+35, r1	; 0x23
    1fd2:	1c a2       	std	Y+36, r1	; 0x24
    1fd4:	2d a3       	std	Y+37, r18	; 0x25
    1fd6:	9e a3       	std	Y+38, r25	; 0x26
    1fd8:	8f a3       	std	Y+39, r24	; 0x27
    1fda:	28 a7       	std	Y+40, r18	; 0x28
    1fdc:	99 a7       	std	Y+41, r25	; 0x29
    1fde:	8a a7       	std	Y+42, r24	; 0x2a
    1fe0:	1b a6       	std	Y+43, r1	; 0x2b
    1fe2:	1c a6       	std	Y+44, r1	; 0x2c
    1fe4:	1d a6       	std	Y+45, r1	; 0x2d
    1fe6:	1e a6       	std	Y+46, r1	; 0x2e
    1fe8:	1f a6       	std	Y+47, r1	; 0x2f
    1fea:	18 aa       	std	Y+48, r1	; 0x30
    1fec:	40 e3       	ldi	r20, 0x30	; 48
    1fee:	50 e0       	ldi	r21, 0x00	; 0
    1ff0:	be 01       	movw	r22, r28
    1ff2:	6f 5f       	subi	r22, 0xFF	; 255
    1ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    1ff6:	80 e7       	ldi	r24, 0x70	; 112
    1ff8:	98 e0       	ldi	r25, 0x08	; 8
    1ffa:	0e 94 83 28 	call	0x5106	; 0x5106 <memmove8>
    1ffe:	e6 96       	adiw	r28, 0x36	; 54
    2000:	0f b6       	in	r0, 0x3f	; 63
    2002:	f8 94       	cli
    2004:	de bf       	out	0x3e, r29	; 62
    2006:	0f be       	out	0x3f, r0	; 63
    2008:	cd bf       	out	0x3d, r28	; 61
    200a:	df 91       	pop	r29
    200c:	cf 91       	pop	r28
    200e:	1f 91       	pop	r17
    2010:	08 95       	ret

00002012 <FillLEDsFromPaletteColors(unsigned char)>:
    2012:	df 92       	push	r13
    2014:	ef 92       	push	r14
    2016:	ff 92       	push	r15
    2018:	0f 93       	push	r16
    201a:	1f 93       	push	r17
    201c:	cf 93       	push	r28
    201e:	df 93       	push	r29
    2020:	00 d0       	rcall	.+0      	; 0x2022 <FillLEDsFromPaletteColors(unsigned char)+0x10>
    2022:	1f 92       	push	r1
    2024:	cd b7       	in	r28, 0x3d	; 61
    2026:	de b7       	in	r29, 0x3e	; 62
    2028:	d8 2e       	mov	r13, r24
    202a:	80 ec       	ldi	r24, 0xC0	; 192
    202c:	e8 2e       	mov	r14, r24
    202e:	88 e0       	ldi	r24, 0x08	; 8
    2030:	f8 2e       	mov	r15, r24
    2032:	00 91 6e 08 	lds	r16, 0x086E	; 0x80086e <currentBlending>
    2036:	10 91 6f 08 	lds	r17, 0x086F	; 0x80086f <currentBlending+0x1>
    203a:	2f ef       	ldi	r18, 0xFF	; 255
    203c:	4d 2d       	mov	r20, r13
    203e:	60 e7       	ldi	r22, 0x70	; 112
    2040:	78 e0       	ldi	r23, 0x08	; 8
    2042:	ce 01       	movw	r24, r28
    2044:	01 96       	adiw	r24, 0x01	; 1
    2046:	0e 94 ab 24 	call	0x4956	; 0x4956 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    204a:	89 81       	ldd	r24, Y+1	; 0x01
    204c:	f7 01       	movw	r30, r14
    204e:	80 83       	st	Z, r24
    2050:	8a 81       	ldd	r24, Y+2	; 0x02
    2052:	81 83       	std	Z+1, r24	; 0x01
    2054:	8b 81       	ldd	r24, Y+3	; 0x03
    2056:	82 83       	std	Z+2, r24	; 0x02
    2058:	f3 e0       	ldi	r31, 0x03	; 3
    205a:	df 0e       	add	r13, r31
    205c:	83 e0       	ldi	r24, 0x03	; 3
    205e:	e8 0e       	add	r14, r24
    2060:	f1 1c       	adc	r15, r1
    2062:	e2 e0       	ldi	r30, 0x02	; 2
    2064:	ee 16       	cp	r14, r30
    2066:	ec e0       	ldi	r30, 0x0C	; 12
    2068:	fe 06       	cpc	r15, r30
    206a:	19 f7       	brne	.-58     	; 0x2032 <FillLEDsFromPaletteColors(unsigned char)+0x20>
    206c:	0f 90       	pop	r0
    206e:	0f 90       	pop	r0
    2070:	0f 90       	pop	r0
    2072:	df 91       	pop	r29
    2074:	cf 91       	pop	r28
    2076:	1f 91       	pop	r17
    2078:	0f 91       	pop	r16
    207a:	ff 90       	pop	r15
    207c:	ef 90       	pop	r14
    207e:	df 90       	pop	r13
    2080:	08 95       	ret

00002082 <progPalette(unsigned int, unsigned char, unsigned char)>:
    2082:	0f 93       	push	r16
    2084:	1f 93       	push	r17
    2086:	cf 93       	push	r28
    2088:	df 93       	push	r29
    208a:	8c 01       	movw	r16, r24
    208c:	c6 2f       	mov	r28, r22
    208e:	d4 2f       	mov	r29, r20
    2090:	80 91 ac 08 	lds	r24, 0x08AC	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    2094:	81 11       	cpse	r24, r1
    2096:	42 c0       	rjmp	.+132    	; 0x211c <__stack+0x1d>
    2098:	61 e0       	ldi	r22, 0x01	; 1
    209a:	8f eb       	ldi	r24, 0xBF	; 191
    209c:	9e e0       	ldi	r25, 0x0E	; 14
    209e:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    20a2:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    20a6:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    20aa:	d0 93 ab 08 	sts	0x08AB, r29	; 0x8008ab <nextSongPart>
    20ae:	81 e0       	ldi	r24, 0x01	; 1
    20b0:	80 93 ac 08 	sts	0x08AC, r24	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    20b4:	cb 30       	cpi	r28, 0x0B	; 11
    20b6:	08 f0       	brcs	.+2      	; 0x20ba <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    20b8:	31 c0       	rjmp	.+98     	; 0x211c <__stack+0x1d>
    20ba:	ec 2f       	mov	r30, r28
    20bc:	f0 e0       	ldi	r31, 0x00	; 0
    20be:	ed 59       	subi	r30, 0x9D	; 157
    20c0:	ff 4e       	sbci	r31, 0xEF	; 239
    20c2:	0c 94 02 36 	jmp	0x6c04	; 0x6c04 <__tablejump2__>
    20c6:	6e 10       	cpse	r6, r14
    20c8:	75 10       	cpse	r7, r5
    20ca:	7c 10       	cpse	r7, r12
    20cc:	7f 10       	cpse	r7, r15
    20ce:	87 10       	cpse	r8, r7
    20d0:	89 10       	cpse	r8, r9
    20d2:	a6 10       	cpse	r10, r6
    20d4:	a8 10       	cpse	r10, r8
    20d6:	ab 10       	cpse	r10, r11
    20d8:	ae 10       	cpse	r10, r14
    20da:	b1 10       	cpse	r11, r1
    20dc:	68 e7       	ldi	r22, 0x78	; 120
    20de:	76 e0       	ldi	r23, 0x06	; 6
    20e0:	80 e7       	ldi	r24, 0x70	; 112
    20e2:	98 e0       	ldi	r25, 0x08	; 8
    20e4:	0e 94 8c 05 	call	0xb18	; 0xb18 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    20e8:	0b c0       	rjmp	.+22     	; 0x2100 <__stack+0x1>
    20ea:	68 e3       	ldi	r22, 0x38	; 56
    20ec:	76 e0       	ldi	r23, 0x06	; 6
    20ee:	80 e7       	ldi	r24, 0x70	; 112
    20f0:	98 e0       	ldi	r25, 0x08	; 8
    20f2:	0e 94 8c 05 	call	0xb18	; 0xb18 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    20f6:	0e c0       	rjmp	.+28     	; 0x2114 <__stack+0x15>
    20f8:	68 e3       	ldi	r22, 0x38	; 56
    20fa:	76 e0       	ldi	r23, 0x06	; 6
    20fc:	f1 cf       	rjmp	.-30     	; 0x20e0 <progPalette(unsigned int, unsigned char, unsigned char)+0x5e>
    20fe:	1e df       	rcall	.-452    	; 0x1f3c <SetupPurpleAndGreenPalette()>
    2100:	81 e0       	ldi	r24, 0x01	; 1
    2102:	90 e0       	ldi	r25, 0x00	; 0
    2104:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <currentBlending+0x1>
    2108:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <currentBlending>
    210c:	07 c0       	rjmp	.+14     	; 0x211c <__stack+0x1d>
    210e:	a0 de       	rcall	.-704    	; 0x1e50 <SetupTotallyRandomPalette()>
    2110:	f7 cf       	rjmp	.-18     	; 0x2100 <__stack+0x1>
    2112:	ed de       	rcall	.-550    	; 0x1eee <SetupBlackAndWhiteStripedPalette()>
    2114:	10 92 6f 08 	sts	0x086F, r1	; 0x80086f <currentBlending+0x1>
    2118:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <currentBlending>
    211c:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    2120:	90 91 a4 08 	lds	r25, 0x08A4	; 0x8008a4 <zaehler+0x1>
    2124:	01 96       	adiw	r24, 0x01	; 1
    2126:	89 3e       	cpi	r24, 0xE9	; 233
    2128:	23 e0       	ldi	r18, 0x03	; 3
    212a:	92 07       	cpc	r25, r18
    212c:	ec f4       	brge	.+58     	; 0x2168 <__stack+0x69>
    212e:	90 93 a4 08 	sts	0x08A4, r25	; 0x8008a4 <zaehler+0x1>
    2132:	80 93 a3 08 	sts	0x08A3, r24	; 0x8008a3 <zaehler>
    2136:	80 91 a3 08 	lds	r24, 0x08A3	; 0x8008a3 <zaehler>
    213a:	6b df       	rcall	.-298    	; 0x2012 <FillLEDsFromPaletteColors(unsigned char)>
    213c:	8f eb       	ldi	r24, 0xBF	; 191
    213e:	9e e0       	ldi	r25, 0x0E	; 14
    2140:	df 91       	pop	r29
    2142:	cf 91       	pop	r28
    2144:	1f 91       	pop	r17
    2146:	0f 91       	pop	r16
    2148:	0c 94 a7 05 	jmp	0xb4e	; 0xb4e <CFastLED::show()>
    214c:	d0 de       	rcall	.-608    	; 0x1eee <SetupBlackAndWhiteStripedPalette()>
    214e:	d8 cf       	rjmp	.-80     	; 0x2100 <__stack+0x1>
    2150:	68 eb       	ldi	r22, 0xB8	; 184
    2152:	76 e0       	ldi	r23, 0x06	; 6
    2154:	c5 cf       	rjmp	.-118    	; 0x20e0 <progPalette(unsigned int, unsigned char, unsigned char)+0x5e>
    2156:	68 ef       	ldi	r22, 0xF8	; 248
    2158:	75 e0       	ldi	r23, 0x05	; 5
    215a:	c2 cf       	rjmp	.-124    	; 0x20e0 <progPalette(unsigned int, unsigned char, unsigned char)+0x5e>
    215c:	67 ec       	ldi	r22, 0xC7	; 199
    215e:	73 e0       	ldi	r23, 0x03	; 3
    2160:	c6 cf       	rjmp	.-116    	; 0x20ee <progPalette(unsigned int, unsigned char, unsigned char)+0x6c>
    2162:	67 ec       	ldi	r22, 0xC7	; 199
    2164:	73 e0       	ldi	r23, 0x03	; 3
    2166:	bc cf       	rjmp	.-136    	; 0x20e0 <progPalette(unsigned int, unsigned char, unsigned char)+0x5e>
    2168:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <zaehler+0x1>
    216c:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <zaehler>
    2170:	e2 cf       	rjmp	.-60     	; 0x2136 <__stack+0x37>

00002172 <setupInterrupt()>:
    2172:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2176:	8b e0       	ldi	r24, 0x0B	; 11
    2178:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    217c:	8a e6       	ldi	r24, 0x6A	; 106
    217e:	98 e1       	ldi	r25, 0x18	; 24
    2180:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2184:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2188:	82 e0       	ldi	r24, 0x02	; 2
    218a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    218e:	08 95       	ret

00002190 <__vector_32>:
    2190:	1f 92       	push	r1
    2192:	0f 92       	push	r0
    2194:	0f b6       	in	r0, 0x3f	; 63
    2196:	0f 92       	push	r0
    2198:	11 24       	eor	r1, r1
    219a:	2f 93       	push	r18
    219c:	3f 93       	push	r19
    219e:	8f 93       	push	r24
    21a0:	9f 93       	push	r25
    21a2:	80 91 b2 08 	lds	r24, 0x08B2	; 0x8008b2 <millisCounterTimer>
    21a6:	90 91 b3 08 	lds	r25, 0x08B3	; 0x8008b3 <millisCounterTimer+0x1>
    21aa:	49 96       	adiw	r24, 0x19	; 25
    21ac:	90 93 b3 08 	sts	0x08B3, r25	; 0x8008b3 <millisCounterTimer+0x1>
    21b0:	80 93 b2 08 	sts	0x08B2, r24	; 0x8008b2 <millisCounterTimer>
    21b4:	80 91 ae 08 	lds	r24, 0x08AE	; 0x8008ae <millisCounterForSeconds>
    21b8:	90 91 af 08 	lds	r25, 0x08AF	; 0x8008af <millisCounterForSeconds+0x1>
    21bc:	49 96       	adiw	r24, 0x19	; 25
    21be:	90 93 af 08 	sts	0x08AF, r25	; 0x8008af <millisCounterForSeconds+0x1>
    21c2:	80 93 ae 08 	sts	0x08AE, r24	; 0x8008ae <millisCounterForSeconds>
    21c6:	80 91 b0 08 	lds	r24, 0x08B0	; 0x8008b0 <millisCounterForProgChange>
    21ca:	90 91 b1 08 	lds	r25, 0x08B1	; 0x8008b1 <millisCounterForProgChange+0x1>
    21ce:	49 96       	adiw	r24, 0x19	; 25
    21d0:	90 93 b1 08 	sts	0x08B1, r25	; 0x8008b1 <millisCounterForProgChange+0x1>
    21d4:	80 93 b0 08 	sts	0x08B0, r24	; 0x8008b0 <millisCounterForProgChange>
    21d8:	91 e0       	ldi	r25, 0x01	; 1
    21da:	90 93 ad 08 	sts	0x08AD, r25	; 0x8008ad <flag_processFastLED>
    21de:	8b b1       	in	r24, 0x0b	; 11
    21e0:	20 e4       	ldi	r18, 0x40	; 64
    21e2:	82 27       	eor	r24, r18
    21e4:	8b b9       	out	0x0b, r24	; 11
    21e6:	20 91 ae 08 	lds	r18, 0x08AE	; 0x8008ae <millisCounterForSeconds>
    21ea:	30 91 af 08 	lds	r19, 0x08AF	; 0x8008af <millisCounterForSeconds+0x1>
    21ee:	28 3e       	cpi	r18, 0xE8	; 232
    21f0:	33 40       	sbci	r19, 0x03	; 3
    21f2:	30 f0       	brcs	.+12     	; 0x2200 <__vector_32+0x70>
    21f4:	10 92 af 08 	sts	0x08AF, r1	; 0x8008af <millisCounterForSeconds+0x1>
    21f8:	10 92 ae 08 	sts	0x08AE, r1	; 0x8008ae <millisCounterForSeconds>
    21fc:	90 93 a9 08 	sts	0x08A9, r25	; 0x8008a9 <OneSecondHasPast>
    2200:	20 91 b0 08 	lds	r18, 0x08B0	; 0x8008b0 <millisCounterForProgChange>
    2204:	30 91 b1 08 	lds	r19, 0x08B1	; 0x8008b1 <millisCounterForProgChange+0x1>
    2208:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    220c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    2210:	28 17       	cp	r18, r24
    2212:	39 07       	cpc	r19, r25
    2214:	c0 f0       	brcs	.+48     	; 0x2246 <__vector_32+0xb6>
    2216:	80 91 ab 08 	lds	r24, 0x08AB	; 0x8008ab <nextSongPart>
    221a:	80 93 aa 08 	sts	0x08AA, r24	; 0x8008aa <prog>
    221e:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
    2222:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
    2226:	10 92 b1 08 	sts	0x08B1, r1	; 0x8008b1 <millisCounterForProgChange+0x1>
    222a:	10 92 b0 08 	sts	0x08B0, r1	; 0x8008b0 <millisCounterForProgChange>
    222e:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <zaehler+0x1>
    2232:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <zaehler>
    2236:	87 e1       	ldi	r24, 0x17	; 23
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    223e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    2242:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    2246:	9f 91       	pop	r25
    2248:	8f 91       	pop	r24
    224a:	3f 91       	pop	r19
    224c:	2f 91       	pop	r18
    224e:	0f 90       	pop	r0
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	0f 90       	pop	r0
    2254:	1f 90       	pop	r1
    2256:	18 95       	reti

00002258 <switchToSong(unsigned char)>:
    2258:	10 92 b3 08 	sts	0x08B3, r1	; 0x8008b3 <millisCounterTimer+0x1>
    225c:	10 92 b2 08 	sts	0x08B2, r1	; 0x8008b2 <millisCounterTimer>
    2260:	10 92 b1 08 	sts	0x08B1, r1	; 0x8008b1 <millisCounterForProgChange+0x1>
    2264:	10 92 b0 08 	sts	0x08B0, r1	; 0x8008b0 <millisCounterForProgChange>
    2268:	10 92 6a 08 	sts	0x086A, r1	; 0x80086a <progBlingBlingColoring_rounds+0x1>
    226c:	10 92 69 08 	sts	0x0869, r1	; 0x800869 <progBlingBlingColoring_rounds>
    2270:	10 92 66 08 	sts	0x0866, r1	; 0x800866 <progCLED_hue>
    2274:	10 92 65 08 	sts	0x0865, r1	; 0x800865 <progCLED_counter+0x1>
    2278:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <progCLED_counter>
    227c:	10 92 a4 08 	sts	0x08A4, r1	; 0x8008a4 <zaehler+0x1>
    2280:	10 92 a3 08 	sts	0x08A3, r1	; 0x8008a3 <zaehler>
    2284:	80 93 bf 08 	sts	0x08BF, r24	; 0x8008bf <songID>
    2288:	10 92 aa 08 	sts	0x08AA, r1	; 0x8008aa <prog>
    228c:	10 92 ac 08 	sts	0x08AC, r1	; 0x8008ac <nextChangeMillisAlreadyCalculated>
    2290:	69 e1       	ldi	r22, 0x19	; 25
    2292:	71 e0       	ldi	r23, 0x01	; 1
    2294:	8f e4       	ldi	r24, 0x4F	; 79
    2296:	9f e0       	ldi	r25, 0x0F	; 15
    2298:	0e 94 64 05 	call	0xac8	; 0xac8 <Print::write(char const*)>
    229c:	8f e4       	ldi	r24, 0x4F	; 79
    229e:	9f e0       	ldi	r25, 0x0F	; 15
    22a0:	0c 94 b1 30 	jmp	0x6162	; 0x6162 <Print::println()>

000022a4 <setup>:
    22a4:	af 92       	push	r10
    22a6:	bf 92       	push	r11
    22a8:	cf 92       	push	r12
    22aa:	df 92       	push	r13
    22ac:	ef 92       	push	r14
    22ae:	ff 92       	push	r15
    22b0:	0f 93       	push	r16
    22b2:	1f 93       	push	r17
    22b4:	cf 93       	push	r28
    22b6:	df 93       	push	r29
    22b8:	68 ee       	ldi	r22, 0xE8	; 232
    22ba:	73 e0       	ldi	r23, 0x03	; 3
    22bc:	80 e0       	ldi	r24, 0x00	; 0
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <delay>
    22c4:	4f ef       	ldi	r20, 0xFF	; 255
    22c6:	60 e4       	ldi	r22, 0x40	; 64
    22c8:	70 e0       	ldi	r23, 0x00	; 0
    22ca:	8a ed       	ldi	r24, 0xDA	; 218
    22cc:	9e e0       	ldi	r25, 0x0E	; 14
    22ce:	0e 94 5b 2f 	call	0x5eb6	; 0x5eb6 <HardwareSerial::_begin(unsigned int, unsigned char)>
    22d2:	56 9a       	sbi	0x0a, 6	; 10
    22d4:	88 e2       	ldi	r24, 0x28	; 40
    22d6:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <analogRead>
    22da:	bc 01       	movw	r22, r24
    22dc:	99 0f       	add	r25, r25
    22de:	88 0b       	sbc	r24, r24
    22e0:	99 0b       	sbc	r25, r25
    22e2:	1f 92       	push	r1
    22e4:	1f 92       	push	r1
    22e6:	1f 92       	push	r1
    22e8:	28 e7       	ldi	r18, 0x78	; 120
    22ea:	2f 93       	push	r18
    22ec:	a1 2c       	mov	r10, r1
    22ee:	b1 2c       	mov	r11, r1
    22f0:	65 01       	movw	r12, r10
    22f2:	ee 24       	eor	r14, r14
    22f4:	ea 94       	dec	r14
    22f6:	13 e0       	ldi	r17, 0x03	; 3
    22f8:	f1 2e       	mov	r15, r17
    22fa:	00 e0       	ldi	r16, 0x00	; 0
    22fc:	10 e0       	ldi	r17, 0x00	; 0
    22fe:	20 e0       	ldi	r18, 0x00	; 0
    2300:	30 e0       	ldi	r19, 0x00	; 0
    2302:	a9 01       	movw	r20, r18
    2304:	0e 94 22 33 	call	0x6644	; 0x6644 <map(long, long, long, long, long)>
    2308:	60 93 b6 08 	sts	0x08B6, r22	; 0x8008b6 <voltageSmooth>
    230c:	82 e3       	ldi	r24, 0x32	; 50
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	0e 94 25 30 	call	0x604a	; 0x604a <operator new(unsigned int)>
    2314:	ec 01       	movw	r28, r24
    2316:	0a e0       	ldi	r16, 0x0A	; 10
    2318:	27 e1       	ldi	r18, 0x17	; 23
    231a:	30 e0       	ldi	r19, 0x00	; 0
    231c:	46 e1       	ldi	r20, 0x16	; 22
    231e:	50 e0       	ldi	r21, 0x00	; 0
    2320:	60 ec       	ldi	r22, 0xC0	; 192
    2322:	78 e0       	ldi	r23, 0x08	; 8
    2324:	0e 94 05 22 	call	0x440a	; 0x440a <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    2328:	d0 93 af 0e 	sts	0x0EAF, r29	; 0x800eaf <matrix+0x1>
    232c:	c0 93 ae 0e 	sts	0x0EAE, r28	; 0x800eae <matrix>
    2330:	80 91 db 07 	lds	r24, 0x07DB	; 0x8007db <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    2334:	0f 90       	pop	r0
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	81 11       	cpse	r24, r1
    233e:	4d c0       	rjmp	.+154    	; 0x23da <setup+0x136>
    2340:	8b ed       	ldi	r24, 0xDB	; 219
    2342:	97 e0       	ldi	r25, 0x07	; 7
    2344:	0e 94 26 30 	call	0x604c	; 0x604c <__cxa_guard_acquire>
    2348:	89 2b       	or	r24, r25
    234a:	09 f4       	brne	.+2      	; 0x234e <setup+0xaa>
    234c:	46 c0       	rjmp	.+140    	; 0x23da <setup+0x136>
    234e:	10 92 e6 07 	sts	0x07E6, r1	; 0x8007e6 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    2352:	10 92 e5 07 	sts	0x07E5, r1	; 0x8007e5 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    2356:	8f ef       	ldi	r24, 0xFF	; 255
    2358:	80 93 e9 07 	sts	0x07E9, r24	; 0x8007e9 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    235c:	80 93 ea 07 	sts	0x07EA, r24	; 0x8007ea <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    2360:	80 93 eb 07 	sts	0x07EB, r24	; 0x8007eb <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    2364:	80 93 ec 07 	sts	0x07EC, r24	; 0x8007ec <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    2368:	80 93 ed 07 	sts	0x07ED, r24	; 0x8007ed <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    236c:	80 93 ee 07 	sts	0x07EE, r24	; 0x8007ee <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 ef 07 	sts	0x07EF, r24	; 0x8007ef <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    2376:	10 92 f1 07 	sts	0x07F1, r1	; 0x8007f1 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    237a:	10 92 f0 07 	sts	0x07F0, r1	; 0x8007f0 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    237e:	10 92 e8 07 	sts	0x07E8, r1	; 0x8007e8 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    2382:	10 92 e7 07 	sts	0x07E7, r1	; 0x8007e7 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    2386:	80 91 bd 0e 	lds	r24, 0x0EBD	; 0x800ebd <CLEDController::m_pHead>
    238a:	90 91 be 0e 	lds	r25, 0x0EBE	; 0x800ebe <CLEDController::m_pHead+0x1>
    238e:	89 2b       	or	r24, r25
    2390:	31 f4       	brne	.+12     	; 0x239e <setup+0xfa>
    2392:	83 ee       	ldi	r24, 0xE3	; 227
    2394:	97 e0       	ldi	r25, 0x07	; 7
    2396:	90 93 be 0e 	sts	0x0EBE, r25	; 0x800ebe <CLEDController::m_pHead+0x1>
    239a:	80 93 bd 0e 	sts	0x0EBD, r24	; 0x800ebd <CLEDController::m_pHead>
    239e:	e0 91 bb 0e 	lds	r30, 0x0EBB	; 0x800ebb <CLEDController::m_pTail>
    23a2:	f0 91 bc 0e 	lds	r31, 0x0EBC	; 0x800ebc <CLEDController::m_pTail+0x1>
    23a6:	30 97       	sbiw	r30, 0x00	; 0
    23a8:	21 f0       	breq	.+8      	; 0x23b2 <setup+0x10e>
    23aa:	83 ee       	ldi	r24, 0xE3	; 227
    23ac:	97 e0       	ldi	r25, 0x07	; 7
    23ae:	95 83       	std	Z+5, r25	; 0x05
    23b0:	84 83       	std	Z+4, r24	; 0x04
    23b2:	83 ee       	ldi	r24, 0xE3	; 227
    23b4:	97 e0       	ldi	r25, 0x07	; 7
    23b6:	90 93 bc 0e 	sts	0x0EBC, r25	; 0x800ebc <CLEDController::m_pTail+0x1>
    23ba:	80 93 bb 0e 	sts	0x0EBB, r24	; 0x800ebb <CLEDController::m_pTail>
    23be:	10 92 f3 07 	sts	0x07F3, r1	; 0x8007f3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    23c2:	10 92 f2 07 	sts	0x07F2, r1	; 0x8007f2 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    23c6:	89 e6       	ldi	r24, 0x69	; 105
    23c8:	93 e0       	ldi	r25, 0x03	; 3
    23ca:	90 93 e4 07 	sts	0x07E4, r25	; 0x8007e4 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    23ce:	80 93 e3 07 	sts	0x07E3, r24	; 0x8007e3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    23d2:	8b ed       	ldi	r24, 0xDB	; 219
    23d4:	97 e0       	ldi	r25, 0x07	; 7
    23d6:	0e 94 2f 30 	call	0x605e	; 0x605e <__cxa_guard_release>
    23da:	30 e0       	ldi	r19, 0x00	; 0
    23dc:	20 e0       	ldi	r18, 0x00	; 0
    23de:	4a ef       	ldi	r20, 0xFA	; 250
    23e0:	51 e0       	ldi	r21, 0x01	; 1
    23e2:	60 ec       	ldi	r22, 0xC0	; 192
    23e4:	78 e0       	ldi	r23, 0x08	; 8
    23e6:	83 ee       	ldi	r24, 0xE3	; 227
    23e8:	97 e0       	ldi	r25, 0x07	; 7
    23ea:	0e 94 7a 27 	call	0x4ef4	; 0x4ef4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    23ee:	fc 01       	movw	r30, r24
    23f0:	8f ef       	ldi	r24, 0xFF	; 255
    23f2:	86 83       	std	Z+6, r24	; 0x06
    23f4:	80 eb       	ldi	r24, 0xB0	; 176
    23f6:	87 83       	std	Z+7, r24	; 0x07
    23f8:	80 ef       	ldi	r24, 0xF0	; 240
    23fa:	80 87       	std	Z+8, r24	; 0x08
    23fc:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    2400:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    2404:	0e 94 7c 22 	call	0x44f8	; 0x44f8 <Framebuffer_GFX::begin()>
    2408:	80 91 ae 0e 	lds	r24, 0x0EAE	; 0x800eae <matrix>
    240c:	90 91 af 0e 	lds	r25, 0x0EAF	; 0x800eaf <matrix+0x1>
    2410:	2f e0       	ldi	r18, 0x0F	; 15
    2412:	20 93 bf 0e 	sts	0x0EBF, r18	; 0x800ebf <FastLED>
    2416:	fc 01       	movw	r30, r24
    2418:	16 8a       	std	Z+22, r1	; 0x16
    241a:	69 e6       	ldi	r22, 0x69	; 105
    241c:	74 e0       	ldi	r23, 0x04	; 4
    241e:	0e 94 90 24 	call	0x4920	; 0x4920 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    2422:	f8 94       	cli
    2424:	a6 de       	rcall	.-692    	; 0x2172 <setupInterrupt()>
    2426:	78 94       	sei
    2428:	68 e7       	ldi	r22, 0x78	; 120
    242a:	76 e0       	ldi	r23, 0x06	; 6
    242c:	80 e7       	ldi	r24, 0x70	; 112
    242e:	98 e0       	ldi	r25, 0x08	; 8
    2430:	0e 94 8c 05 	call	0xb18	; 0xb18 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	90 e0       	ldi	r25, 0x00	; 0
    2438:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <currentBlending+0x1>
    243c:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <currentBlending>
    2440:	80 e0       	ldi	r24, 0x00	; 0
    2442:	df 91       	pop	r29
    2444:	cf 91       	pop	r28
    2446:	1f 91       	pop	r17
    2448:	0f 91       	pop	r16
    244a:	ff 90       	pop	r15
    244c:	ef 90       	pop	r14
    244e:	df 90       	pop	r13
    2450:	cf 90       	pop	r12
    2452:	bf 90       	pop	r11
    2454:	af 90       	pop	r10
    2456:	00 cf       	rjmp	.-512    	; 0x2258 <switchToSong(unsigned char)>

00002458 <defaultLoop()>:
    2458:	ef 92       	push	r14
    245a:	ff 92       	push	r15
    245c:	0f 93       	push	r16
    245e:	1f 93       	push	r17
    2460:	cf 93       	push	r28
    2462:	df 93       	push	r29
    2464:	00 d0       	rcall	.+0      	; 0x2466 <defaultLoop()+0xe>
    2466:	00 d0       	rcall	.+0      	; 0x2468 <defaultLoop()+0x10>
    2468:	00 d0       	rcall	.+0      	; 0x246a <defaultLoop()+0x12>
    246a:	1f 92       	push	r1
    246c:	cd b7       	in	r28, 0x3d	; 61
    246e:	de b7       	in	r29, 0x3e	; 62
    2470:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <prog>
    2474:	86 30       	cpi	r24, 0x06	; 6
    2476:	09 f4       	brne	.+2      	; 0x247a <defaultLoop()+0x22>
    2478:	7c c0       	rjmp	.+248    	; 0x2572 <defaultLoop()+0x11a>
    247a:	18 f5       	brcc	.+70     	; 0x24c2 <defaultLoop()+0x6a>
    247c:	82 30       	cpi	r24, 0x02	; 2
    247e:	09 f4       	brne	.+2      	; 0x2482 <defaultLoop()+0x2a>
    2480:	4c c0       	rjmp	.+152    	; 0x251a <defaultLoop()+0xc2>
    2482:	90 f4       	brcc	.+36     	; 0x24a8 <defaultLoop()+0x50>
    2484:	88 23       	and	r24, r24
    2486:	d9 f1       	breq	.+118    	; 0x24fe <defaultLoop()+0xa6>
    2488:	81 30       	cpi	r24, 0x01	; 1
    248a:	09 f4       	brne	.+2      	; 0x248e <defaultLoop()+0x36>
    248c:	3e c0       	rjmp	.+124    	; 0x250a <defaultLoop()+0xb2>
    248e:	27 96       	adiw	r28, 0x07	; 7
    2490:	0f b6       	in	r0, 0x3f	; 63
    2492:	f8 94       	cli
    2494:	de bf       	out	0x3e, r29	; 62
    2496:	0f be       	out	0x3f, r0	; 63
    2498:	cd bf       	out	0x3d, r28	; 61
    249a:	df 91       	pop	r29
    249c:	cf 91       	pop	r28
    249e:	1f 91       	pop	r17
    24a0:	0f 91       	pop	r16
    24a2:	ff 90       	pop	r15
    24a4:	ef 90       	pop	r14
    24a6:	08 95       	ret
    24a8:	84 30       	cpi	r24, 0x04	; 4
    24aa:	09 f4       	brne	.+2      	; 0x24ae <defaultLoop()+0x56>
    24ac:	5c c0       	rjmp	.+184    	; 0x2566 <defaultLoop()+0x10e>
    24ae:	08 f4       	brcc	.+2      	; 0x24b2 <defaultLoop()+0x5a>
    24b0:	45 c0       	rjmp	.+138    	; 0x253c <defaultLoop()+0xe4>
    24b2:	40 ed       	ldi	r20, 0xD0	; 208
    24b4:	57 e0       	ldi	r21, 0x07	; 7
    24b6:	66 e0       	ldi	r22, 0x06	; 6
    24b8:	88 e9       	ldi	r24, 0x98	; 152
    24ba:	9a e3       	ldi	r25, 0x3A	; 58
    24bc:	0e 94 d6 06 	call	0xdac	; 0xdac <progFullColors(unsigned int, unsigned char, unsigned int)>
    24c0:	e6 cf       	rjmp	.-52     	; 0x248e <defaultLoop()+0x36>
    24c2:	89 30       	cpi	r24, 0x09	; 9
    24c4:	09 f4       	brne	.+2      	; 0x24c8 <defaultLoop()+0x70>
    24c6:	68 c0       	rjmp	.+208    	; 0x2598 <defaultLoop()+0x140>
    24c8:	58 f4       	brcc	.+22     	; 0x24e0 <defaultLoop()+0x88>
    24ca:	87 30       	cpi	r24, 0x07	; 7
    24cc:	09 f4       	brne	.+2      	; 0x24d0 <defaultLoop()+0x78>
    24ce:	5c c0       	rjmp	.+184    	; 0x2588 <defaultLoop()+0x130>
    24d0:	88 30       	cpi	r24, 0x08	; 8
    24d2:	e9 f6       	brne	.-70     	; 0x248e <defaultLoop()+0x36>
    24d4:	69 e0       	ldi	r22, 0x09	; 9
    24d6:	88 e9       	ldi	r24, 0x98	; 152
    24d8:	9a e3       	ldi	r25, 0x3A	; 58
    24da:	0e 94 96 06 	call	0xd2c	; 0xd2c <progFastBlingBling(unsigned int, unsigned char)>
    24de:	d7 cf       	rjmp	.-82     	; 0x248e <defaultLoop()+0x36>
    24e0:	8b 30       	cpi	r24, 0x0B	; 11
    24e2:	09 f4       	brne	.+2      	; 0x24e6 <defaultLoop()+0x8e>
    24e4:	64 c0       	rjmp	.+200    	; 0x25ae <defaultLoop()+0x156>
    24e6:	08 f4       	brcc	.+2      	; 0x24ea <defaultLoop()+0x92>
    24e8:	5c c0       	rjmp	.+184    	; 0x25a2 <defaultLoop()+0x14a>
    24ea:	84 36       	cpi	r24, 0x64	; 100
    24ec:	81 f6       	brne	.-96     	; 0x248e <defaultLoop()+0x36>
    24ee:	60 e0       	ldi	r22, 0x00	; 0
    24f0:	8f eb       	ldi	r24, 0xBF	; 191
    24f2:	9e e0       	ldi	r25, 0x0E	; 14
    24f4:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    24f8:	80 e0       	ldi	r24, 0x00	; 0
    24fa:	ae de       	rcall	.-676    	; 0x2258 <switchToSong(unsigned char)>
    24fc:	c8 cf       	rjmp	.-112    	; 0x248e <defaultLoop()+0x36>
    24fe:	42 e0       	ldi	r20, 0x02	; 2
    2500:	67 e0       	ldi	r22, 0x07	; 7
    2502:	80 e1       	ldi	r24, 0x10	; 16
    2504:	97 e2       	ldi	r25, 0x27	; 39
    2506:	bd dd       	rcall	.-1158   	; 0x2082 <progPalette(unsigned int, unsigned char, unsigned char)>
    2508:	c2 cf       	rjmp	.-124    	; 0x248e <defaultLoop()+0x36>
    250a:	42 e0       	ldi	r20, 0x02	; 2
    250c:	60 ea       	ldi	r22, 0xA0	; 160
    250e:	7f e0       	ldi	r23, 0x0F	; 15
    2510:	88 e9       	ldi	r24, 0x98	; 152
    2512:	9a e3       	ldi	r25, 0x3A	; 58
    2514:	0e 94 3a 08 	call	0x1074	; 0x1074 <progStern(unsigned int, int, unsigned char)>
    2518:	ba cf       	rjmp	.-140    	; 0x248e <defaultLoop()+0x36>
    251a:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    251e:	7c 01       	movw	r14, r24
    2520:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2524:	8c 01       	movw	r16, r24
    2526:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    252a:	9c 01       	movw	r18, r24
    252c:	42 e3       	ldi	r20, 0x32	; 50
    252e:	50 e0       	ldi	r21, 0x00	; 0
    2530:	63 e0       	ldi	r22, 0x03	; 3
    2532:	88 e8       	ldi	r24, 0x88	; 136
    2534:	93 e1       	ldi	r25, 0x13	; 19
    2536:	0e 94 3b 07 	call	0xe76	; 0xe76 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    253a:	a9 cf       	rjmp	.-174    	; 0x248e <defaultLoop()+0x36>
    253c:	0e 94 d1 05 	call	0xba2	; 0xba2 <getRandomColor()>
    2540:	8c 01       	movw	r16, r24
    2542:	6a e2       	ldi	r22, 0x2A	; 42
    2544:	71 e0       	ldi	r23, 0x01	; 1
    2546:	ce 01       	movw	r24, r28
    2548:	01 96       	adiw	r24, 0x01	; 1
    254a:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    254e:	24 e0       	ldi	r18, 0x04	; 4
    2550:	a8 01       	movw	r20, r16
    2552:	60 e3       	ldi	r22, 0x30	; 48
    2554:	75 e7       	ldi	r23, 0x75	; 117
    2556:	ce 01       	movw	r24, r28
    2558:	01 96       	adiw	r24, 0x01	; 1
    255a:	4b db       	rcall	.-2410   	; 0x1bf2 <progScrollText(String, unsigned int, int, unsigned char)>
    255c:	ce 01       	movw	r24, r28
    255e:	01 96       	adiw	r24, 0x01	; 1
    2560:	0e 94 61 33 	call	0x66c2	; 0x66c2 <String::~String()>
    2564:	94 cf       	rjmp	.-216    	; 0x248e <defaultLoop()+0x36>
    2566:	65 e0       	ldi	r22, 0x05	; 5
    2568:	88 e9       	ldi	r24, 0x98	; 152
    256a:	9a e3       	ldi	r25, 0x3A	; 58
    256c:	0e 94 98 07 	call	0xf30	; 0xf30 <progMatrixScanner(unsigned int, unsigned char)>
    2570:	8e cf       	rjmp	.-228    	; 0x248e <defaultLoop()+0x36>
    2572:	ee 24       	eor	r14, r14
    2574:	ea 94       	dec	r14
    2576:	f1 2c       	mov	r15, r1
    2578:	0f ef       	ldi	r16, 0xFF	; 255
    257a:	10 e0       	ldi	r17, 0x00	; 0
    257c:	2f ef       	ldi	r18, 0xFF	; 255
    257e:	30 e0       	ldi	r19, 0x00	; 0
    2580:	42 e3       	ldi	r20, 0x32	; 50
    2582:	50 e0       	ldi	r21, 0x00	; 0
    2584:	67 e0       	ldi	r22, 0x07	; 7
    2586:	d5 cf       	rjmp	.-86     	; 0x2532 <defaultLoop()+0xda>
    2588:	48 ee       	ldi	r20, 0xE8	; 232
    258a:	53 e0       	ldi	r21, 0x03	; 3
    258c:	68 e0       	ldi	r22, 0x08	; 8
    258e:	88 e9       	ldi	r24, 0x98	; 152
    2590:	9a e3       	ldi	r25, 0x3A	; 58
    2592:	0e 94 ad 09 	call	0x135a	; 0x135a <progCircles(unsigned int, unsigned char, unsigned int)>
    2596:	7b cf       	rjmp	.-266    	; 0x248e <defaultLoop()+0x36>
    2598:	6a e0       	ldi	r22, 0x0A	; 10
    259a:	80 e1       	ldi	r24, 0x10	; 16
    259c:	97 e2       	ldi	r25, 0x27	; 39
    259e:	f8 d8       	rcall	.-3600   	; 0x1790 <progOutline(unsigned int, unsigned char)>
    25a0:	76 cf       	rjmp	.-276    	; 0x248e <defaultLoop()+0x36>
    25a2:	6b e0       	ldi	r22, 0x0B	; 11
    25a4:	80 e1       	ldi	r24, 0x10	; 16
    25a6:	97 e2       	ldi	r25, 0x27	; 39
    25a8:	0e 94 c6 0a 	call	0x158c	; 0x158c <progMovingLines(unsigned int, unsigned char)>
    25ac:	70 cf       	rjmp	.-288    	; 0x248e <defaultLoop()+0x36>
    25ae:	44 ef       	ldi	r20, 0xF4	; 244
    25b0:	51 e0       	ldi	r21, 0x01	; 1
    25b2:	64 e6       	ldi	r22, 0x64	; 100
    25b4:	88 e9       	ldi	r24, 0x98	; 152
    25b6:	9a e3       	ldi	r25, 0x3A	; 58
    25b8:	0e 94 22 0a 	call	0x1444	; 0x1444 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    25bc:	68 cf       	rjmp	.-304    	; 0x248e <defaultLoop()+0x36>

000025be <LearnToFly()>:
    25be:	ef 92       	push	r14
    25c0:	ff 92       	push	r15
    25c2:	0f 93       	push	r16
    25c4:	1f 93       	push	r17
    25c6:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <prog>
    25ca:	86 30       	cpi	r24, 0x06	; 6
    25cc:	09 f4       	brne	.+2      	; 0x25d0 <LearnToFly()+0x12>
    25ce:	65 c0       	rjmp	.+202    	; 0x269a <LearnToFly()+0xdc>
    25d0:	e8 f4       	brcc	.+58     	; 0x260c <LearnToFly()+0x4e>
    25d2:	82 30       	cpi	r24, 0x02	; 2
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <LearnToFly()+0x1a>
    25d6:	52 c0       	rjmp	.+164    	; 0x267c <LearnToFly()+0xbe>
    25d8:	50 f4       	brcc	.+20     	; 0x25ee <LearnToFly()+0x30>
    25da:	88 23       	and	r24, r24
    25dc:	e9 f1       	breq	.+122    	; 0x2658 <LearnToFly()+0x9a>
    25de:	81 30       	cpi	r24, 0x01	; 1
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <LearnToFly()+0x26>
    25e2:	43 c0       	rjmp	.+134    	; 0x266a <LearnToFly()+0xac>
    25e4:	1f 91       	pop	r17
    25e6:	0f 91       	pop	r16
    25e8:	ff 90       	pop	r15
    25ea:	ef 90       	pop	r14
    25ec:	08 95       	ret
    25ee:	84 30       	cpi	r24, 0x04	; 4
    25f0:	09 f4       	brne	.+2      	; 0x25f4 <LearnToFly()+0x36>
    25f2:	48 c0       	rjmp	.+144    	; 0x2684 <LearnToFly()+0xc6>
    25f4:	64 e0       	ldi	r22, 0x04	; 4
    25f6:	85 30       	cpi	r24, 0x05	; 5
    25f8:	80 f1       	brcs	.+96     	; 0x265a <LearnToFly()+0x9c>
    25fa:	66 e0       	ldi	r22, 0x06	; 6
    25fc:	80 e3       	ldi	r24, 0x30	; 48
    25fe:	95 e7       	ldi	r25, 0x75	; 117
    2600:	1f 91       	pop	r17
    2602:	0f 91       	pop	r16
    2604:	ff 90       	pop	r15
    2606:	ef 90       	pop	r14
    2608:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <progFastBlingBling(unsigned int, unsigned char)>
    260c:	89 30       	cpi	r24, 0x09	; 9
    260e:	09 f4       	brne	.+2      	; 0x2612 <LearnToFly()+0x54>
    2610:	5c c0       	rjmp	.+184    	; 0x26ca <LearnToFly()+0x10c>
    2612:	80 f4       	brcc	.+32     	; 0x2634 <LearnToFly()+0x76>
    2614:	87 30       	cpi	r24, 0x07	; 7
    2616:	09 f4       	brne	.+2      	; 0x261a <LearnToFly()+0x5c>
    2618:	49 c0       	rjmp	.+146    	; 0x26ac <LearnToFly()+0xee>
    261a:	49 ea       	ldi	r20, 0xA9	; 169
    261c:	51 e0       	ldi	r21, 0x01	; 1
    261e:	69 e0       	ldi	r22, 0x09	; 9
    2620:	88 30       	cpi	r24, 0x08	; 8
    2622:	01 f7       	brne	.-64     	; 0x25e4 <LearnToFly()+0x26>
    2624:	82 e8       	ldi	r24, 0x82	; 130
    2626:	90 e6       	ldi	r25, 0x60	; 96
    2628:	1f 91       	pop	r17
    262a:	0f 91       	pop	r16
    262c:	ff 90       	pop	r15
    262e:	ef 90       	pop	r14
    2630:	0c 94 d6 06 	jmp	0xdac	; 0xdac <progFullColors(unsigned int, unsigned char, unsigned int)>
    2634:	8b 30       	cpi	r24, 0x0B	; 11
    2636:	09 f4       	brne	.+2      	; 0x263a <LearnToFly()+0x7c>
    2638:	5b c0       	rjmp	.+182    	; 0x26f0 <LearnToFly()+0x132>
    263a:	08 f4       	brcc	.+2      	; 0x263e <LearnToFly()+0x80>
    263c:	4a c0       	rjmp	.+148    	; 0x26d2 <LearnToFly()+0x114>
    263e:	84 36       	cpi	r24, 0x64	; 100
    2640:	89 f6       	brne	.-94     	; 0x25e4 <LearnToFly()+0x26>
    2642:	60 e0       	ldi	r22, 0x00	; 0
    2644:	8f eb       	ldi	r24, 0xBF	; 191
    2646:	9e e0       	ldi	r25, 0x0E	; 14
    2648:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    264c:	80 e0       	ldi	r24, 0x00	; 0
    264e:	1f 91       	pop	r17
    2650:	0f 91       	pop	r16
    2652:	ff 90       	pop	r15
    2654:	ef 90       	pop	r14
    2656:	00 ce       	rjmp	.-1024   	; 0x2258 <switchToSong(unsigned char)>
    2658:	61 e0       	ldi	r22, 0x01	; 1
    265a:	86 e2       	ldi	r24, 0x26	; 38
    265c:	97 e3       	ldi	r25, 0x37	; 55
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	0c 94 87 09 	jmp	0x130e	; 0x130e <progStern(unsigned int, unsigned char)>
    266a:	62 e0       	ldi	r22, 0x02	; 2
    266c:	8b e4       	ldi	r24, 0x4B	; 75
    266e:	9e e6       	ldi	r25, 0x6E	; 110
    2670:	1f 91       	pop	r17
    2672:	0f 91       	pop	r16
    2674:	ff 90       	pop	r15
    2676:	ef 90       	pop	r14
    2678:	0c 94 98 07 	jmp	0xf30	; 0xf30 <progMatrixScanner(unsigned int, unsigned char)>
    267c:	49 ea       	ldi	r20, 0xA9	; 169
    267e:	51 e0       	ldi	r21, 0x01	; 1
    2680:	63 e0       	ldi	r22, 0x03	; 3
    2682:	d0 cf       	rjmp	.-96     	; 0x2624 <LearnToFly()+0x66>
    2684:	49 ea       	ldi	r20, 0xA9	; 169
    2686:	51 e0       	ldi	r21, 0x01	; 1
    2688:	65 e0       	ldi	r22, 0x05	; 5
    268a:	8b e4       	ldi	r24, 0x4B	; 75
    268c:	9e e6       	ldi	r25, 0x6E	; 110
    268e:	1f 91       	pop	r17
    2690:	0f 91       	pop	r16
    2692:	ff 90       	pop	r15
    2694:	ef 90       	pop	r14
    2696:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    269a:	67 e0       	ldi	r22, 0x07	; 7
    269c:	8b e4       	ldi	r24, 0x4B	; 75
    269e:	9e e6       	ldi	r25, 0x6E	; 110
    26a0:	1f 91       	pop	r17
    26a2:	0f 91       	pop	r16
    26a4:	ff 90       	pop	r15
    26a6:	ef 90       	pop	r14
    26a8:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <progBlingBlingColoring(unsigned int, unsigned char)>
    26ac:	ee 24       	eor	r14, r14
    26ae:	ea 94       	dec	r14
    26b0:	f1 2c       	mov	r15, r1
    26b2:	0f ef       	ldi	r16, 0xFF	; 255
    26b4:	10 e0       	ldi	r17, 0x00	; 0
    26b6:	2f ef       	ldi	r18, 0xFF	; 255
    26b8:	30 e0       	ldi	r19, 0x00	; 0
    26ba:	4b e4       	ldi	r20, 0x4B	; 75
    26bc:	50 e0       	ldi	r21, 0x00	; 0
    26be:	68 e0       	ldi	r22, 0x08	; 8
    26c0:	89 ec       	ldi	r24, 0xC9	; 201
    26c2:	9d e0       	ldi	r25, 0x0D	; 13
    26c4:	0e 94 3b 07 	call	0xe76	; 0xe76 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    26c8:	8d cf       	rjmp	.-230    	; 0x25e4 <LearnToFly()+0x26>
    26ca:	6a e0       	ldi	r22, 0x0A	; 10
    26cc:	88 eb       	ldi	r24, 0xB8	; 184
    26ce:	92 e5       	ldi	r25, 0x52	; 82
    26d0:	97 cf       	rjmp	.-210    	; 0x2600 <LearnToFly()+0x42>
    26d2:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    26d6:	7c 01       	movw	r14, r24
    26d8:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    26dc:	8c 01       	movw	r16, r24
    26de:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    26e2:	9c 01       	movw	r18, r24
    26e4:	4b e4       	ldi	r20, 0x4B	; 75
    26e6:	50 e0       	ldi	r21, 0x00	; 0
    26e8:	6b e0       	ldi	r22, 0x0B	; 11
    26ea:	86 e2       	ldi	r24, 0x26	; 38
    26ec:	97 e3       	ldi	r25, 0x37	; 55
    26ee:	ea cf       	rjmp	.-44     	; 0x26c4 <LearnToFly()+0x106>
    26f0:	64 e6       	ldi	r22, 0x64	; 100
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
    26f4:	9f ef       	ldi	r25, 0xFF	; 255
    26f6:	d4 cf       	rjmp	.-88     	; 0x26a0 <LearnToFly()+0xe2>

000026f8 <Castle()>:
    26f8:	ef 92       	push	r14
    26fa:	ff 92       	push	r15
    26fc:	0f 93       	push	r16
    26fe:	1f 93       	push	r17
    2700:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <prog>
    2704:	87 33       	cpi	r24, 0x37	; 55
    2706:	09 f4       	brne	.+2      	; 0x270a <Castle()+0x12>
    2708:	d2 c0       	rjmp	.+420    	; 0x28ae <Castle()+0x1b6>
    270a:	08 f0       	brcs	.+2      	; 0x270e <Castle()+0x16>
    270c:	40 c0       	rjmp	.+128    	; 0x278e <Castle()+0x96>
    270e:	89 31       	cpi	r24, 0x19	; 25
    2710:	09 f4       	brne	.+2      	; 0x2714 <Castle()+0x1c>
    2712:	b0 c0       	rjmp	.+352    	; 0x2874 <Castle()+0x17c>
    2714:	18 f5       	brcc	.+70     	; 0x275c <Castle()+0x64>
    2716:	8a 30       	cpi	r24, 0x0A	; 10
    2718:	09 f4       	brne	.+2      	; 0x271c <Castle()+0x24>
    271a:	9a c0       	rjmp	.+308    	; 0x2850 <Castle()+0x158>
    271c:	58 f4       	brcc	.+22     	; 0x2734 <Castle()+0x3c>
    271e:	88 23       	and	r24, r24
    2720:	09 f4       	brne	.+2      	; 0x2724 <Castle()+0x2c>
    2722:	82 c0       	rjmp	.+260    	; 0x2828 <Castle()+0x130>
    2724:	85 30       	cpi	r24, 0x05	; 5
    2726:	09 f4       	brne	.+2      	; 0x272a <Castle()+0x32>
    2728:	88 c0       	rjmp	.+272    	; 0x283a <Castle()+0x142>
    272a:	1f 91       	pop	r17
    272c:	0f 91       	pop	r16
    272e:	ff 90       	pop	r15
    2730:	ef 90       	pop	r14
    2732:	08 95       	ret
    2734:	8f 30       	cpi	r24, 0x0F	; 15
    2736:	09 f4       	brne	.+2      	; 0x273a <Castle()+0x42>
    2738:	94 c0       	rjmp	.+296    	; 0x2862 <Castle()+0x16a>
    273a:	84 31       	cpi	r24, 0x14	; 20
    273c:	b1 f7       	brne	.-20     	; 0x272a <Castle()+0x32>
    273e:	0e 94 d1 05 	call	0xba2	; 0xba2 <getRandomColor()>
    2742:	59 e1       	ldi	r21, 0x19	; 25
    2744:	e5 2e       	mov	r14, r21
    2746:	8c 01       	movw	r16, r24
    2748:	26 e3       	ldi	r18, 0x36	; 54
    274a:	37 e0       	ldi	r19, 0x07	; 7
    274c:	45 e4       	ldi	r20, 0x45	; 69
    274e:	51 e0       	ldi	r21, 0x01	; 1
    2750:	66 e0       	ldi	r22, 0x06	; 6
    2752:	70 e0       	ldi	r23, 0x00	; 0
    2754:	84 ef       	ldi	r24, 0xF4	; 244
    2756:	97 e0       	ldi	r25, 0x07	; 7
    2758:	e3 da       	rcall	.-2618   	; 0x1d20 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    275a:	e7 cf       	rjmp	.-50     	; 0x272a <Castle()+0x32>
    275c:	88 32       	cpi	r24, 0x28	; 40
    275e:	09 f4       	brne	.+2      	; 0x2762 <Castle()+0x6a>
    2760:	a0 c0       	rjmp	.+320    	; 0x28a2 <Castle()+0x1aa>
    2762:	58 f4       	brcc	.+22     	; 0x277a <Castle()+0x82>
    2764:	8e 31       	cpi	r24, 0x1E	; 30
    2766:	09 f4       	brne	.+2      	; 0x276a <Castle()+0x72>
    2768:	8b c0       	rjmp	.+278    	; 0x2880 <Castle()+0x188>
    276a:	83 32       	cpi	r24, 0x23	; 35
    276c:	f1 f6       	brne	.-68     	; 0x272a <Castle()+0x32>
    276e:	42 ec       	ldi	r20, 0xC2	; 194
    2770:	51 e0       	ldi	r21, 0x01	; 1
    2772:	68 e2       	ldi	r22, 0x28	; 40
    2774:	81 eb       	ldi	r24, 0xB1	; 177
    2776:	99 e3       	ldi	r25, 0x39	; 57
    2778:	65 c0       	rjmp	.+202    	; 0x2844 <Castle()+0x14c>
    277a:	8d 32       	cpi	r24, 0x2D	; 45
    277c:	09 f4       	brne	.+2      	; 0x2780 <Castle()+0x88>
    277e:	93 c0       	rjmp	.+294    	; 0x28a6 <Castle()+0x1ae>
    2780:	82 33       	cpi	r24, 0x32	; 50
    2782:	99 f6       	brne	.-90     	; 0x272a <Castle()+0x32>
    2784:	0e 94 d1 05 	call	0xba2	; 0xba2 <getRandomColor()>
    2788:	47 e3       	ldi	r20, 0x37	; 55
    278a:	e4 2e       	mov	r14, r20
    278c:	dc cf       	rjmp	.-72     	; 0x2746 <Castle()+0x4e>
    278e:	8b 34       	cpi	r24, 0x4B	; 75
    2790:	09 f4       	brne	.+2      	; 0x2794 <Castle()+0x9c>
    2792:	bd c0       	rjmp	.+378    	; 0x290e <Castle()+0x216>
    2794:	28 f5       	brcc	.+74     	; 0x27e0 <Castle()+0xe8>
    2796:	8c 33       	cpi	r24, 0x3C	; 60
    2798:	09 f4       	brne	.+2      	; 0x279c <Castle()+0xa4>
    279a:	a1 c0       	rjmp	.+322    	; 0x28de <Castle()+0x1e6>
    279c:	60 f4       	brcc	.+24     	; 0x27b6 <Castle()+0xbe>
    279e:	88 33       	cpi	r24, 0x38	; 56
    27a0:	09 f4       	brne	.+2      	; 0x27a4 <Castle()+0xac>
    27a2:	90 c0       	rjmp	.+288    	; 0x28c4 <Castle()+0x1cc>
    27a4:	8a 33       	cpi	r24, 0x3A	; 58
    27a6:	09 f0       	breq	.+2      	; 0x27aa <Castle()+0xb2>
    27a8:	c0 cf       	rjmp	.-128    	; 0x272a <Castle()+0x32>
    27aa:	42 ec       	ldi	r20, 0xC2	; 194
    27ac:	51 e0       	ldi	r21, 0x01	; 1
    27ae:	6c e3       	ldi	r22, 0x3C	; 60
    27b0:	81 eb       	ldi	r24, 0xB1	; 177
    27b2:	99 e3       	ldi	r25, 0x39	; 57
    27b4:	81 c0       	rjmp	.+258    	; 0x28b8 <Castle()+0x1c0>
    27b6:	81 34       	cpi	r24, 0x41	; 65
    27b8:	09 f4       	brne	.+2      	; 0x27bc <Castle()+0xc4>
    27ba:	9c c0       	rjmp	.+312    	; 0x28f4 <Castle()+0x1fc>
    27bc:	86 34       	cpi	r24, 0x46	; 70
    27be:	09 f0       	breq	.+2      	; 0x27c2 <Castle()+0xca>
    27c0:	b4 cf       	rjmp	.-152    	; 0x272a <Castle()+0x32>
    27c2:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    27c6:	7c 01       	movw	r14, r24
    27c8:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    27cc:	8c 01       	movw	r16, r24
    27ce:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    27d2:	9c 01       	movw	r18, r24
    27d4:	42 e3       	ldi	r20, 0x32	; 50
    27d6:	50 e0       	ldi	r21, 0x00	; 0
    27d8:	6b e4       	ldi	r22, 0x4B	; 75
    27da:	80 e7       	ldi	r24, 0x70	; 112
    27dc:	97 e1       	ldi	r25, 0x17	; 23
    27de:	5e c0       	rjmp	.+188    	; 0x289c <Castle()+0x1a4>
    27e0:	8a 35       	cpi	r24, 0x5A	; 90
    27e2:	09 f4       	brne	.+2      	; 0x27e6 <Castle()+0xee>
    27e4:	a7 c0       	rjmp	.+334    	; 0x2934 <Castle()+0x23c>
    27e6:	78 f4       	brcc	.+30     	; 0x2806 <Castle()+0x10e>
    27e8:	80 35       	cpi	r24, 0x50	; 80
    27ea:	09 f4       	brne	.+2      	; 0x27ee <Castle()+0xf6>
    27ec:	96 c0       	rjmp	.+300    	; 0x291a <Castle()+0x222>
    27ee:	85 35       	cpi	r24, 0x55	; 85
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <Castle()+0xfc>
    27f2:	9b cf       	rjmp	.-202    	; 0x272a <Castle()+0x32>
    27f4:	6a e5       	ldi	r22, 0x5A	; 90
    27f6:	82 e6       	ldi	r24, 0x62	; 98
    27f8:	93 e7       	ldi	r25, 0x73	; 115
    27fa:	1f 91       	pop	r17
    27fc:	0f 91       	pop	r16
    27fe:	ff 90       	pop	r15
    2800:	ef 90       	pop	r14
    2802:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <progFastBlingBling(unsigned int, unsigned char)>
    2806:	8f 35       	cpi	r24, 0x5F	; 95
    2808:	09 f4       	brne	.+2      	; 0x280c <Castle()+0x114>
    280a:	9a c0       	rjmp	.+308    	; 0x2940 <Castle()+0x248>
    280c:	84 36       	cpi	r24, 0x64	; 100
    280e:	09 f0       	breq	.+2      	; 0x2812 <Castle()+0x11a>
    2810:	8c cf       	rjmp	.-232    	; 0x272a <Castle()+0x32>
    2812:	60 e0       	ldi	r22, 0x00	; 0
    2814:	8f eb       	ldi	r24, 0xBF	; 191
    2816:	9e e0       	ldi	r25, 0x0E	; 14
    2818:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    281c:	80 e0       	ldi	r24, 0x00	; 0
    281e:	1f 91       	pop	r17
    2820:	0f 91       	pop	r16
    2822:	ff 90       	pop	r15
    2824:	ef 90       	pop	r14
    2826:	18 cd       	rjmp	.-1488   	; 0x2258 <switchToSong(unsigned char)>
    2828:	65 e0       	ldi	r22, 0x05	; 5
    282a:	84 e5       	ldi	r24, 0x54	; 84
    282c:	9f e4       	ldi	r25, 0x4F	; 79
    282e:	1f 91       	pop	r17
    2830:	0f 91       	pop	r16
    2832:	ff 90       	pop	r15
    2834:	ef 90       	pop	r14
    2836:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <progBlingBlingColoring(unsigned int, unsigned char)>
    283a:	4d e9       	ldi	r20, 0x9D	; 157
    283c:	53 e0       	ldi	r21, 0x03	; 3
    283e:	6a e0       	ldi	r22, 0x0A	; 10
    2840:	89 ed       	ldi	r24, 0xD9	; 217
    2842:	9c e1       	ldi	r25, 0x1C	; 28
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	0c 94 ad 09 	jmp	0x135a	; 0x135a <progCircles(unsigned int, unsigned char, unsigned int)>
    2850:	6f e0       	ldi	r22, 0x0F	; 15
    2852:	82 e6       	ldi	r24, 0x62	; 98
    2854:	93 e7       	ldi	r25, 0x73	; 115
    2856:	1f 91       	pop	r17
    2858:	0f 91       	pop	r16
    285a:	ff 90       	pop	r15
    285c:	ef 90       	pop	r14
    285e:	0c 94 98 07 	jmp	0xf30	; 0xf30 <progMatrixScanner(unsigned int, unsigned char)>
    2862:	64 e1       	ldi	r22, 0x14	; 20
    2864:	87 ee       	ldi	r24, 0xE7	; 231
    2866:	90 e4       	ldi	r25, 0x40	; 64
    2868:	1f 91       	pop	r17
    286a:	0f 91       	pop	r16
    286c:	ff 90       	pop	r15
    286e:	ef 90       	pop	r14
    2870:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <progBlack(unsigned int, unsigned char)>
    2874:	42 ec       	ldi	r20, 0xC2	; 194
    2876:	51 e0       	ldi	r21, 0x01	; 1
    2878:	6e e1       	ldi	r22, 0x1E	; 30
    287a:	8b e7       	ldi	r24, 0x7B	; 123
    287c:	92 e3       	ldi	r25, 0x32	; 50
    287e:	e2 cf       	rjmp	.-60     	; 0x2844 <Castle()+0x14c>
    2880:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2884:	7c 01       	movw	r14, r24
    2886:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    288a:	8c 01       	movw	r16, r24
    288c:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2890:	9c 01       	movw	r18, r24
    2892:	42 e3       	ldi	r20, 0x32	; 50
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	63 e2       	ldi	r22, 0x23	; 35
    2898:	86 e3       	ldi	r24, 0x36	; 54
    289a:	97 e0       	ldi	r25, 0x07	; 7
    289c:	0e 94 3b 07 	call	0xe76	; 0xe76 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    28a0:	44 cf       	rjmp	.-376    	; 0x272a <Castle()+0x32>
    28a2:	6d e2       	ldi	r22, 0x2D	; 45
    28a4:	d6 cf       	rjmp	.-84     	; 0x2852 <Castle()+0x15a>
    28a6:	62 e3       	ldi	r22, 0x32	; 50
    28a8:	8b e7       	ldi	r24, 0x7B	; 123
    28aa:	92 e3       	ldi	r25, 0x32	; 50
    28ac:	dd cf       	rjmp	.-70     	; 0x2868 <Castle()+0x170>
    28ae:	42 ec       	ldi	r20, 0xC2	; 194
    28b0:	51 e0       	ldi	r21, 0x01	; 1
    28b2:	68 e3       	ldi	r22, 0x38	; 56
    28b4:	8b e7       	ldi	r24, 0x7B	; 123
    28b6:	92 e3       	ldi	r25, 0x32	; 50
    28b8:	1f 91       	pop	r17
    28ba:	0f 91       	pop	r16
    28bc:	ff 90       	pop	r15
    28be:	ef 90       	pop	r14
    28c0:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    28c4:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    28c8:	7c 01       	movw	r14, r24
    28ca:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    28ce:	8c 01       	movw	r16, r24
    28d0:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    28d4:	9c 01       	movw	r18, r24
    28d6:	42 e3       	ldi	r20, 0x32	; 50
    28d8:	50 e0       	ldi	r21, 0x00	; 0
    28da:	6a e3       	ldi	r22, 0x3A	; 58
    28dc:	dd cf       	rjmp	.-70     	; 0x2898 <Castle()+0x1a0>
    28de:	41 e4       	ldi	r20, 0x41	; 65
    28e0:	6a e3       	ldi	r22, 0x3A	; 58
    28e2:	77 e0       	ldi	r23, 0x07	; 7
    28e4:	86 e8       	ldi	r24, 0x86	; 134
    28e6:	9d e4       	ldi	r25, 0x4D	; 77
    28e8:	1f 91       	pop	r17
    28ea:	0f 91       	pop	r16
    28ec:	ff 90       	pop	r15
    28ee:	ef 90       	pop	r14
    28f0:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <progStern(unsigned int, int, unsigned char)>
    28f4:	ee 24       	eor	r14, r14
    28f6:	ea 94       	dec	r14
    28f8:	f1 2c       	mov	r15, r1
    28fa:	0f ef       	ldi	r16, 0xFF	; 255
    28fc:	10 e0       	ldi	r17, 0x00	; 0
    28fe:	2f ef       	ldi	r18, 0xFF	; 255
    2900:	30 e0       	ldi	r19, 0x00	; 0
    2902:	42 e3       	ldi	r20, 0x32	; 50
    2904:	50 e0       	ldi	r21, 0x00	; 0
    2906:	66 e4       	ldi	r22, 0x46	; 70
    2908:	8c e6       	ldi	r24, 0x6C	; 108
    290a:	9e e0       	ldi	r25, 0x0E	; 14
    290c:	c7 cf       	rjmp	.-114    	; 0x289c <Castle()+0x1a4>
    290e:	40 e5       	ldi	r20, 0x50	; 80
    2910:	6a e3       	ldi	r22, 0x3A	; 58
    2912:	77 e0       	ldi	r23, 0x07	; 7
    2914:	81 eb       	ldi	r24, 0xB1	; 177
    2916:	99 e3       	ldi	r25, 0x39	; 57
    2918:	e7 cf       	rjmp	.-50     	; 0x28e8 <Castle()+0x1f0>
    291a:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    291e:	7c 01       	movw	r14, r24
    2920:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2924:	8c 01       	movw	r16, r24
    2926:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    292a:	9c 01       	movw	r18, r24
    292c:	42 e3       	ldi	r20, 0x32	; 50
    292e:	50 e0       	ldi	r21, 0x00	; 0
    2930:	65 e5       	ldi	r22, 0x55	; 85
    2932:	ea cf       	rjmp	.-44     	; 0x2908 <Castle()+0x210>
    2934:	42 ec       	ldi	r20, 0xC2	; 194
    2936:	51 e0       	ldi	r21, 0x01	; 1
    2938:	6f e5       	ldi	r22, 0x5F	; 95
    293a:	87 ec       	ldi	r24, 0xC7	; 199
    293c:	9f e6       	ldi	r25, 0x6F	; 111
    293e:	82 cf       	rjmp	.-252    	; 0x2844 <Castle()+0x14c>
    2940:	0e 94 d1 05 	call	0xba2	; 0xba2 <getRandomColor()>
    2944:	29 e0       	ldi	r18, 0x09	; 9
    2946:	e2 2e       	mov	r14, r18
    2948:	8c 01       	movw	r16, r24
    294a:	20 e6       	ldi	r18, 0x60	; 96
    294c:	3a ee       	ldi	r19, 0xEA	; 234
    294e:	45 e4       	ldi	r20, 0x45	; 69
    2950:	51 e0       	ldi	r21, 0x01	; 1
    2952:	64 e6       	ldi	r22, 0x64	; 100
    2954:	70 e0       	ldi	r23, 0x00	; 0
    2956:	fe ce       	rjmp	.-516    	; 0x2754 <Castle()+0x5c>

00002958 <TooClose()>:
    2958:	ef 92       	push	r14
    295a:	ff 92       	push	r15
    295c:	0f 93       	push	r16
    295e:	1f 93       	push	r17
    2960:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <prog>
    2964:	86 30       	cpi	r24, 0x06	; 6
    2966:	09 f4       	brne	.+2      	; 0x296a <TooClose()+0x12>
    2968:	75 c0       	rjmp	.+234    	; 0x2a54 <TooClose()+0xfc>
    296a:	18 f5       	brcc	.+70     	; 0x29b2 <TooClose()+0x5a>
    296c:	82 30       	cpi	r24, 0x02	; 2
    296e:	09 f4       	brne	.+2      	; 0x2972 <TooClose()+0x1a>
    2970:	5a c0       	rjmp	.+180    	; 0x2a26 <TooClose()+0xce>
    2972:	58 f4       	brcc	.+22     	; 0x298a <TooClose()+0x32>
    2974:	88 23       	and	r24, r24
    2976:	09 f4       	brne	.+2      	; 0x297a <TooClose()+0x22>
    2978:	40 c0       	rjmp	.+128    	; 0x29fa <TooClose()+0xa2>
    297a:	81 30       	cpi	r24, 0x01	; 1
    297c:	09 f4       	brne	.+2      	; 0x2980 <TooClose()+0x28>
    297e:	48 c0       	rjmp	.+144    	; 0x2a10 <TooClose()+0xb8>
    2980:	1f 91       	pop	r17
    2982:	0f 91       	pop	r16
    2984:	ff 90       	pop	r15
    2986:	ef 90       	pop	r14
    2988:	08 95       	ret
    298a:	84 30       	cpi	r24, 0x04	; 4
    298c:	09 f4       	brne	.+2      	; 0x2990 <TooClose()+0x38>
    298e:	5c c0       	rjmp	.+184    	; 0x2a48 <TooClose()+0xf0>
    2990:	08 f4       	brcc	.+2      	; 0x2994 <TooClose()+0x3c>
    2992:	54 c0       	rjmp	.+168    	; 0x2a3c <TooClose()+0xe4>
    2994:	0e 94 d1 05 	call	0xba2	; 0xba2 <getRandomColor()>
    2998:	26 e0       	ldi	r18, 0x06	; 6
    299a:	e2 2e       	mov	r14, r18
    299c:	8c 01       	movw	r16, r24
    299e:	2b e2       	ldi	r18, 0x2B	; 43
    29a0:	36 e1       	ldi	r19, 0x16	; 22
    29a2:	4b ed       	ldi	r20, 0xDB	; 219
    29a4:	51 e0       	ldi	r21, 0x01	; 1
    29a6:	6a e0       	ldi	r22, 0x0A	; 10
    29a8:	70 e0       	ldi	r23, 0x00	; 0
    29aa:	8e e1       	ldi	r24, 0x1E	; 30
    29ac:	98 e0       	ldi	r25, 0x08	; 8
    29ae:	b8 d9       	rcall	.-3216   	; 0x1d20 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    29b0:	e7 cf       	rjmp	.-50     	; 0x2980 <TooClose()+0x28>
    29b2:	8a 30       	cpi	r24, 0x0A	; 10
    29b4:	09 f4       	brne	.+2      	; 0x29b8 <TooClose()+0x60>
    29b6:	6e c0       	rjmp	.+220    	; 0x2a94 <TooClose()+0x13c>
    29b8:	70 f4       	brcc	.+28     	; 0x29d6 <TooClose()+0x7e>
    29ba:	88 30       	cpi	r24, 0x08	; 8
    29bc:	09 f4       	brne	.+2      	; 0x29c0 <TooClose()+0x68>
    29be:	64 c0       	rjmp	.+200    	; 0x2a88 <TooClose()+0x130>
    29c0:	08 f4       	brcc	.+2      	; 0x29c4 <TooClose()+0x6c>
    29c2:	53 c0       	rjmp	.+166    	; 0x2a6a <TooClose()+0x112>
    29c4:	6a e0       	ldi	r22, 0x0A	; 10
    29c6:	80 eb       	ldi	r24, 0xB0	; 176
    29c8:	9d e1       	ldi	r25, 0x1D	; 29
    29ca:	1f 91       	pop	r17
    29cc:	0f 91       	pop	r16
    29ce:	ff 90       	pop	r15
    29d0:	ef 90       	pop	r14
    29d2:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <progFastBlingBling(unsigned int, unsigned char)>
    29d6:	8c 30       	cpi	r24, 0x0C	; 12
    29d8:	09 f4       	brne	.+2      	; 0x29dc <TooClose()+0x84>
    29da:	71 c0       	rjmp	.+226    	; 0x2abe <TooClose()+0x166>
    29dc:	08 f4       	brcc	.+2      	; 0x29e0 <TooClose()+0x88>
    29de:	60 c0       	rjmp	.+192    	; 0x2aa0 <TooClose()+0x148>
    29e0:	84 36       	cpi	r24, 0x64	; 100
    29e2:	71 f6       	brne	.-100    	; 0x2980 <TooClose()+0x28>
    29e4:	60 e0       	ldi	r22, 0x00	; 0
    29e6:	8f eb       	ldi	r24, 0xBF	; 191
    29e8:	9e e0       	ldi	r25, 0x0E	; 14
    29ea:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    29ee:	80 e0       	ldi	r24, 0x00	; 0
    29f0:	1f 91       	pop	r17
    29f2:	0f 91       	pop	r16
    29f4:	ff 90       	pop	r15
    29f6:	ef 90       	pop	r14
    29f8:	2f cc       	rjmp	.-1954   	; 0x2258 <switchToSong(unsigned char)>
    29fa:	46 eb       	ldi	r20, 0xB6	; 182
    29fc:	53 e0       	ldi	r21, 0x03	; 3
    29fe:	61 e0       	ldi	r22, 0x01	; 1
    2a00:	8b e0       	ldi	r24, 0x0B	; 11
    2a02:	97 e7       	ldi	r25, 0x77	; 119
    2a04:	1f 91       	pop	r17
    2a06:	0f 91       	pop	r16
    2a08:	ff 90       	pop	r15
    2a0a:	ef 90       	pop	r14
    2a0c:	0c 94 ad 09 	jmp	0x135a	; 0x135a <progCircles(unsigned int, unsigned char, unsigned int)>
    2a10:	4b ed       	ldi	r20, 0xDB	; 219
    2a12:	51 e0       	ldi	r21, 0x01	; 1
    2a14:	62 e0       	ldi	r22, 0x02	; 2
    2a16:	84 e8       	ldi	r24, 0x84	; 132
    2a18:	92 eb       	ldi	r25, 0xB2	; 178
    2a1a:	1f 91       	pop	r17
    2a1c:	0f 91       	pop	r16
    2a1e:	ff 90       	pop	r15
    2a20:	ef 90       	pop	r14
    2a22:	0c 94 22 0a 	jmp	0x1444	; 0x1444 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    2a26:	46 eb       	ldi	r20, 0xB6	; 182
    2a28:	53 e0       	ldi	r21, 0x03	; 3
    2a2a:	63 e0       	ldi	r22, 0x03	; 3
    2a2c:	8b e0       	ldi	r24, 0x0B	; 11
    2a2e:	97 e7       	ldi	r25, 0x77	; 119
    2a30:	1f 91       	pop	r17
    2a32:	0f 91       	pop	r16
    2a34:	ff 90       	pop	r15
    2a36:	ef 90       	pop	r14
    2a38:	0c 94 d6 06 	jmp	0xdac	; 0xdac <progFullColors(unsigned int, unsigned char, unsigned int)>
    2a3c:	46 eb       	ldi	r20, 0xB6	; 182
    2a3e:	53 e0       	ldi	r21, 0x03	; 3
    2a40:	64 e0       	ldi	r22, 0x04	; 4
    2a42:	89 e7       	ldi	r24, 0x79	; 121
    2a44:	9b e3       	ldi	r25, 0x3B	; 59
    2a46:	de cf       	rjmp	.-68     	; 0x2a04 <TooClose()+0xac>
    2a48:	4b ed       	ldi	r20, 0xDB	; 219
    2a4a:	51 e0       	ldi	r21, 0x01	; 1
    2a4c:	65 e0       	ldi	r22, 0x05	; 5
    2a4e:	8b e0       	ldi	r24, 0x0B	; 11
    2a50:	97 e7       	ldi	r25, 0x77	; 119
    2a52:	e3 cf       	rjmp	.-58     	; 0x2a1a <TooClose()+0xc2>
    2a54:	47 e0       	ldi	r20, 0x07	; 7
    2a56:	6c e6       	ldi	r22, 0x6C	; 108
    2a58:	77 e0       	ldi	r23, 0x07	; 7
    2a5a:	87 ec       	ldi	r24, 0xC7	; 199
    2a5c:	90 e6       	ldi	r25, 0x60	; 96
    2a5e:	1f 91       	pop	r17
    2a60:	0f 91       	pop	r16
    2a62:	ff 90       	pop	r15
    2a64:	ef 90       	pop	r14
    2a66:	0c 94 3a 08 	jmp	0x1074	; 0x1074 <progStern(unsigned int, int, unsigned char)>
    2a6a:	ee 24       	eor	r14, r14
    2a6c:	ea 94       	dec	r14
    2a6e:	f1 2c       	mov	r15, r1
    2a70:	0f ef       	ldi	r16, 0xFF	; 255
    2a72:	10 e0       	ldi	r17, 0x00	; 0
    2a74:	2f ef       	ldi	r18, 0xFF	; 255
    2a76:	30 e0       	ldi	r19, 0x00	; 0
    2a78:	4b e4       	ldi	r20, 0x4B	; 75
    2a7a:	50 e0       	ldi	r21, 0x00	; 0
    2a7c:	68 e0       	ldi	r22, 0x08	; 8
    2a7e:	89 e7       	ldi	r24, 0x79	; 121
    2a80:	9b e3       	ldi	r25, 0x3B	; 59
    2a82:	0e 94 3b 07 	call	0xe76	; 0xe76 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2a86:	7c cf       	rjmp	.-264    	; 0x2980 <TooClose()+0x28>
    2a88:	48 eb       	ldi	r20, 0xB8	; 184
    2a8a:	53 e0       	ldi	r21, 0x03	; 3
    2a8c:	69 e0       	ldi	r22, 0x09	; 9
    2a8e:	89 e7       	ldi	r24, 0x79	; 121
    2a90:	9b e3       	ldi	r25, 0x3B	; 59
    2a92:	ce cf       	rjmp	.-100    	; 0x2a30 <TooClose()+0xd8>
    2a94:	46 eb       	ldi	r20, 0xB6	; 182
    2a96:	53 e0       	ldi	r21, 0x03	; 3
    2a98:	6b e0       	ldi	r22, 0x0B	; 11
    2a9a:	80 eb       	ldi	r24, 0xB0	; 176
    2a9c:	9d e1       	ldi	r25, 0x1D	; 29
    2a9e:	c8 cf       	rjmp	.-112    	; 0x2a30 <TooClose()+0xd8>
    2aa0:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2aa4:	7c 01       	movw	r14, r24
    2aa6:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2aaa:	8c 01       	movw	r16, r24
    2aac:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2ab0:	9c 01       	movw	r18, r24
    2ab2:	4b e4       	ldi	r20, 0x4B	; 75
    2ab4:	50 e0       	ldi	r21, 0x00	; 0
    2ab6:	6c e0       	ldi	r22, 0x0C	; 12
    2ab8:	80 eb       	ldi	r24, 0xB0	; 176
    2aba:	9d e1       	ldi	r25, 0x1D	; 29
    2abc:	e2 cf       	rjmp	.-60     	; 0x2a82 <TooClose()+0x12a>
    2abe:	64 e6       	ldi	r22, 0x64	; 100
    2ac0:	8f ef       	ldi	r24, 0xFF	; 255
    2ac2:	9f ef       	ldi	r25, 0xFF	; 255
    2ac4:	1f 91       	pop	r17
    2ac6:	0f 91       	pop	r16
    2ac8:	ff 90       	pop	r15
    2aca:	ef 90       	pop	r14
    2acc:	0c 94 05 06 	jmp	0xc0a	; 0xc0a <progBlingBlingColoring(unsigned int, unsigned char)>

00002ad0 <Pokerface()>:
    2ad0:	ef 92       	push	r14
    2ad2:	ff 92       	push	r15
    2ad4:	0f 93       	push	r16
    2ad6:	1f 93       	push	r17
    2ad8:	80 91 aa 08 	lds	r24, 0x08AA	; 0x8008aa <prog>
    2adc:	83 32       	cpi	r24, 0x23	; 35
    2ade:	09 f4       	brne	.+2      	; 0x2ae2 <Pokerface()+0x12>
    2ae0:	86 c0       	rjmp	.+268    	; 0x2bee <Pokerface()+0x11e>
    2ae2:	90 f5       	brcc	.+100    	; 0x2b48 <Pokerface()+0x78>
    2ae4:	8f 30       	cpi	r24, 0x0F	; 15
    2ae6:	09 f4       	brne	.+2      	; 0x2aea <Pokerface()+0x1a>
    2ae8:	71 c0       	rjmp	.+226    	; 0x2bcc <Pokerface()+0xfc>
    2aea:	88 f4       	brcc	.+34     	; 0x2b0e <Pokerface()+0x3e>
    2aec:	85 30       	cpi	r24, 0x05	; 5
    2aee:	09 f4       	brne	.+2      	; 0x2af2 <Pokerface()+0x22>
    2af0:	59 c0       	rjmp	.+178    	; 0x2ba4 <Pokerface()+0xd4>
    2af2:	8a 30       	cpi	r24, 0x0A	; 10
    2af4:	09 f4       	brne	.+2      	; 0x2af8 <Pokerface()+0x28>
    2af6:	61 c0       	rjmp	.+194    	; 0x2bba <Pokerface()+0xea>
    2af8:	81 11       	cpse	r24, r1
    2afa:	21 c0       	rjmp	.+66     	; 0x2b3e <Pokerface()+0x6e>
    2afc:	65 e0       	ldi	r22, 0x05	; 5
    2afe:	8a e8       	ldi	r24, 0x8A	; 138
    2b00:	9e e5       	ldi	r25, 0x5E	; 94
    2b02:	1f 91       	pop	r17
    2b04:	0f 91       	pop	r16
    2b06:	ff 90       	pop	r15
    2b08:	ef 90       	pop	r14
    2b0a:	0c 94 98 07 	jmp	0xf30	; 0xf30 <progMatrixScanner(unsigned int, unsigned char)>
    2b0e:	89 31       	cpi	r24, 0x19	; 25
    2b10:	09 f4       	brne	.+2      	; 0x2b14 <Pokerface()+0x44>
    2b12:	67 c0       	rjmp	.+206    	; 0x2be2 <Pokerface()+0x112>
    2b14:	8e 31       	cpi	r24, 0x1E	; 30
    2b16:	09 f4       	brne	.+2      	; 0x2b1a <Pokerface()+0x4a>
    2b18:	68 c0       	rjmp	.+208    	; 0x2bea <Pokerface()+0x11a>
    2b1a:	84 31       	cpi	r24, 0x14	; 20
    2b1c:	81 f4       	brne	.+32     	; 0x2b3e <Pokerface()+0x6e>
    2b1e:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b22:	7c 01       	movw	r14, r24
    2b24:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b28:	8c 01       	movw	r16, r24
    2b2a:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b2e:	9c 01       	movw	r18, r24
    2b30:	4b e4       	ldi	r20, 0x4B	; 75
    2b32:	50 e0       	ldi	r21, 0x00	; 0
    2b34:	69 e1       	ldi	r22, 0x19	; 25
    2b36:	86 e0       	ldi	r24, 0x06	; 6
    2b38:	9f e3       	ldi	r25, 0x3F	; 63
    2b3a:	0e 94 3b 07 	call	0xe76	; 0xe76 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2b3e:	1f 91       	pop	r17
    2b40:	0f 91       	pop	r16
    2b42:	ff 90       	pop	r15
    2b44:	ef 90       	pop	r14
    2b46:	08 95       	ret
    2b48:	87 33       	cpi	r24, 0x37	; 55
    2b4a:	09 f4       	brne	.+2      	; 0x2b4e <Pokerface()+0x7e>
    2b4c:	61 c0       	rjmp	.+194    	; 0x2c10 <Pokerface()+0x140>
    2b4e:	a8 f4       	brcc	.+42     	; 0x2b7a <Pokerface()+0xaa>
    2b50:	8d 32       	cpi	r24, 0x2D	; 45
    2b52:	09 f4       	brne	.+2      	; 0x2b56 <Pokerface()+0x86>
    2b54:	50 c0       	rjmp	.+160    	; 0x2bf6 <Pokerface()+0x126>
    2b56:	82 33       	cpi	r24, 0x32	; 50
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <Pokerface()+0x8c>
    2b5a:	51 c0       	rjmp	.+162    	; 0x2bfe <Pokerface()+0x12e>
    2b5c:	88 32       	cpi	r24, 0x28	; 40
    2b5e:	79 f7       	brne	.-34     	; 0x2b3e <Pokerface()+0x6e>
    2b60:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b64:	7c 01       	movw	r14, r24
    2b66:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b6a:	8c 01       	movw	r16, r24
    2b6c:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b70:	9c 01       	movw	r18, r24
    2b72:	4b e4       	ldi	r20, 0x4B	; 75
    2b74:	50 e0       	ldi	r21, 0x00	; 0
    2b76:	6d e2       	ldi	r22, 0x2D	; 45
    2b78:	de cf       	rjmp	.-68     	; 0x2b36 <Pokerface()+0x66>
    2b7a:	86 34       	cpi	r24, 0x46	; 70
    2b7c:	09 f4       	brne	.+2      	; 0x2b80 <Pokerface()+0xb0>
    2b7e:	4c c0       	rjmp	.+152    	; 0x2c18 <Pokerface()+0x148>
    2b80:	84 36       	cpi	r24, 0x64	; 100
    2b82:	09 f4       	brne	.+2      	; 0x2b86 <Pokerface()+0xb6>
    2b84:	52 c0       	rjmp	.+164    	; 0x2c2a <Pokerface()+0x15a>
    2b86:	8c 33       	cpi	r24, 0x3C	; 60
    2b88:	d1 f6       	brne	.-76     	; 0x2b3e <Pokerface()+0x6e>
    2b8a:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b8e:	7c 01       	movw	r14, r24
    2b90:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b94:	8c 01       	movw	r16, r24
    2b96:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    2b9a:	9c 01       	movw	r18, r24
    2b9c:	4b e4       	ldi	r20, 0x4B	; 75
    2b9e:	50 e0       	ldi	r21, 0x00	; 0
    2ba0:	66 e4       	ldi	r22, 0x46	; 70
    2ba2:	c9 cf       	rjmp	.-110    	; 0x2b36 <Pokerface()+0x66>
    2ba4:	44 ef       	ldi	r20, 0xF4	; 244
    2ba6:	51 e0       	ldi	r21, 0x01	; 1
    2ba8:	6a e0       	ldi	r22, 0x0A	; 10
    2baa:	86 e0       	ldi	r24, 0x06	; 6
    2bac:	9f e3       	ldi	r25, 0x3F	; 63
    2bae:	1f 91       	pop	r17
    2bb0:	0f 91       	pop	r16
    2bb2:	ff 90       	pop	r15
    2bb4:	ef 90       	pop	r14
    2bb6:	0c 94 ad 09 	jmp	0x135a	; 0x135a <progCircles(unsigned int, unsigned char, unsigned int)>
    2bba:	6f e0       	ldi	r22, 0x0F	; 15
    2bbc:	86 e0       	ldi	r24, 0x06	; 6
    2bbe:	9f e3       	ldi	r25, 0x3F	; 63
    2bc0:	1f 91       	pop	r17
    2bc2:	0f 91       	pop	r16
    2bc4:	ff 90       	pop	r15
    2bc6:	ef 90       	pop	r14
    2bc8:	0c 94 c6 0a 	jmp	0x158c	; 0x158c <progMovingLines(unsigned int, unsigned char)>
    2bcc:	44 ef       	ldi	r20, 0xF4	; 244
    2bce:	51 e0       	ldi	r21, 0x01	; 1
    2bd0:	64 e1       	ldi	r22, 0x14	; 20
    2bd2:	86 e0       	ldi	r24, 0x06	; 6
    2bd4:	9f e3       	ldi	r25, 0x3F	; 63
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	ff 90       	pop	r15
    2bdc:	ef 90       	pop	r14
    2bde:	0c 94 d6 06 	jmp	0xdac	; 0xdac <progFullColors(unsigned int, unsigned char, unsigned int)>
    2be2:	44 ef       	ldi	r20, 0xF4	; 244
    2be4:	51 e0       	ldi	r21, 0x01	; 1
    2be6:	6e e1       	ldi	r22, 0x1E	; 30
    2be8:	e0 cf       	rjmp	.-64     	; 0x2baa <Pokerface()+0xda>
    2bea:	63 e2       	ldi	r22, 0x23	; 35
    2bec:	e7 cf       	rjmp	.-50     	; 0x2bbc <Pokerface()+0xec>
    2bee:	44 ef       	ldi	r20, 0xF4	; 244
    2bf0:	51 e0       	ldi	r21, 0x01	; 1
    2bf2:	68 e2       	ldi	r22, 0x28	; 40
    2bf4:	ee cf       	rjmp	.-36     	; 0x2bd2 <Pokerface()+0x102>
    2bf6:	62 e3       	ldi	r22, 0x32	; 50
    2bf8:	83 e8       	ldi	r24, 0x83	; 131
    2bfa:	9f e1       	ldi	r25, 0x1F	; 31
    2bfc:	82 cf       	rjmp	.-252    	; 0x2b02 <Pokerface()+0x32>
    2bfe:	67 e3       	ldi	r22, 0x37	; 55
    2c00:	86 e0       	ldi	r24, 0x06	; 6
    2c02:	9f e3       	ldi	r25, 0x3F	; 63
    2c04:	1f 91       	pop	r17
    2c06:	0f 91       	pop	r16
    2c08:	ff 90       	pop	r15
    2c0a:	ef 90       	pop	r14
    2c0c:	0c 94 96 06 	jmp	0xd2c	; 0xd2c <progFastBlingBling(unsigned int, unsigned char)>
    2c10:	44 ef       	ldi	r20, 0xF4	; 244
    2c12:	51 e0       	ldi	r21, 0x01	; 1
    2c14:	6c e3       	ldi	r22, 0x3C	; 60
    2c16:	dd cf       	rjmp	.-70     	; 0x2bd2 <Pokerface()+0x102>
    2c18:	64 e6       	ldi	r22, 0x64	; 100
    2c1a:	80 e1       	ldi	r24, 0x10	; 16
    2c1c:	97 e2       	ldi	r25, 0x27	; 39
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	0c 94 8b 09 	jmp	0x1316	; 0x1316 <progBlack(unsigned int, unsigned char)>
    2c2a:	60 e0       	ldi	r22, 0x00	; 0
    2c2c:	8f eb       	ldi	r24, 0xBF	; 191
    2c2e:	9e e0       	ldi	r25, 0x0E	; 14
    2c30:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    2c34:	80 e0       	ldi	r24, 0x00	; 0
    2c36:	1f 91       	pop	r17
    2c38:	0f 91       	pop	r16
    2c3a:	ff 90       	pop	r15
    2c3c:	ef 90       	pop	r14
    2c3e:	0c cb       	rjmp	.-2536   	; 0x2258 <switchToSong(unsigned char)>

00002c40 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    2c40:	9f 92       	push	r9
    2c42:	af 92       	push	r10
    2c44:	bf 92       	push	r11
    2c46:	cf 92       	push	r12
    2c48:	df 92       	push	r13
    2c4a:	ef 92       	push	r14
    2c4c:	ff 92       	push	r15
    2c4e:	0f 93       	push	r16
    2c50:	1f 93       	push	r17
    2c52:	cf 93       	push	r28
    2c54:	df 93       	push	r29
    2c56:	fc 01       	movw	r30, r24
    2c58:	c0 80       	ld	r12, Z
    2c5a:	d1 80       	ldd	r13, Z+1	; 0x01
    2c5c:	28 b1       	in	r18, 0x08	; 8
    2c5e:	b2 2e       	mov	r11, r18
    2c60:	68 94       	set
    2c62:	b2 f8       	bld	r11, 2
    2c64:	98 b1       	in	r25, 0x08	; 8
    2c66:	9b 7f       	andi	r25, 0xFB	; 251
    2c68:	98 b9       	out	0x08, r25	; 8
    2c6a:	62 85       	ldd	r22, Z+10	; 0x0a
    2c6c:	87 81       	ldd	r24, Z+7	; 0x07
    2c6e:	06 2f       	mov	r16, r22
    2c70:	08 1b       	sub	r16, r24
    2c72:	80 2f       	mov	r24, r16
    2c74:	07 83       	std	Z+7, r16	; 0x07
    2c76:	77 85       	ldd	r23, Z+15	; 0x0f
    2c78:	a2 81       	ldd	r26, Z+2	; 0x02
    2c7a:	b3 81       	ldd	r27, Z+3	; 0x03
    2c7c:	35 85       	ldd	r19, Z+13	; 0x0d
    2c7e:	44 85       	ldd	r20, Z+12	; 0x0c
    2c80:	56 85       	ldd	r21, Z+14	; 0x0e
    2c82:	99 24       	eor	r9, r9
    2c84:	93 94       	inc	r9
    2c86:	93 0e       	add	r9, r19
    2c88:	4f 5f       	subi	r20, 0xFF	; 255
    2c8a:	5f 5f       	subi	r21, 0xFF	; 255
    2c8c:	f6 80       	ldd	r15, Z+6	; 0x06
    2c8e:	e0 84       	ldd	r14, Z+8	; 0x08
    2c90:	c1 85       	ldd	r28, Z+9	; 0x09
    2c92:	d3 85       	ldd	r29, Z+11	; 0x0b
    2c94:	f6 01       	movw	r30, r12
    2c96:	11 81       	ldd	r17, Z+1	; 0x01
    2c98:	a1 2c       	mov	r10, r1
    2c9a:	0a 2d       	mov	r16, r10
    2c9c:	2a 2d       	mov	r18, r10
    2c9e:	3a 2d       	mov	r19, r10
    2ca0:	31 81       	ldd	r19, Z+1	; 0x01
    2ca2:	11 27       	eor	r17, r17
    2ca4:	88 94       	clc
    2ca6:	31 11       	cpse	r19, r1
    2ca8:	38 0f       	add	r19, r24
    2caa:	08 f4       	brcc	.+2      	; 0x2cae <L_9732>
    2cac:	3f ef       	ldi	r19, 0xFF	; 255

00002cae <L_9732>:
    2cae:	81 95       	neg	r24
    2cb0:	88 94       	clc
    2cb2:	90 fc       	sbrc	r9, 0
    2cb4:	13 0f       	add	r17, r19
    2cb6:	17 95       	ror	r17
    2cb8:	88 94       	clc
    2cba:	91 fc       	sbrc	r9, 1
    2cbc:	13 0f       	add	r17, r19
    2cbe:	17 95       	ror	r17
    2cc0:	88 94       	clc
    2cc2:	92 fc       	sbrc	r9, 2
    2cc4:	13 0f       	add	r17, r19
    2cc6:	17 95       	ror	r17
    2cc8:	88 94       	clc
    2cca:	93 fc       	sbrc	r9, 3
    2ccc:	13 0f       	add	r17, r19
    2cce:	17 95       	ror	r17
    2cd0:	88 94       	clc
    2cd2:	94 fc       	sbrc	r9, 4
    2cd4:	13 0f       	add	r17, r19
    2cd6:	17 95       	ror	r17
    2cd8:	88 94       	clc
    2cda:	95 fc       	sbrc	r9, 5
    2cdc:	13 0f       	add	r17, r19
    2cde:	17 95       	ror	r17
    2ce0:	88 94       	clc
    2ce2:	96 fc       	sbrc	r9, 6
    2ce4:	13 0f       	add	r17, r19
    2ce6:	17 95       	ror	r17
    2ce8:	88 94       	clc
    2cea:	97 fc       	sbrc	r9, 7
    2cec:	13 0f       	add	r17, r19
    2cee:	17 95       	ror	r17
    2cf0:	88 94       	clc
    2cf2:	03 2f       	mov	r16, r19
    2cf4:	91 10       	cpse	r9, r1
    2cf6:	01 2f       	mov	r16, r17
    2cf8:	86 0f       	add	r24, r22
    2cfa:	10 2f       	mov	r17, r16
    2cfc:	00 2c       	mov	r0, r0
    2cfe:	b8 b8       	out	0x08, r11	; 8
    2d00:	00 c0       	rjmp	.+0      	; 0x2d02 <L_9732+0x54>
    2d02:	17 ff       	sbrs	r17, 7
    2d04:	98 b9       	out	0x08, r25	; 8
    2d06:	30 81       	ld	r19, Z
    2d08:	00 27       	eor	r16, r16
    2d0a:	88 94       	clc
    2d0c:	00 c0       	rjmp	.+0      	; 0x2d0e <L_9732+0x60>
    2d0e:	00 c0       	rjmp	.+0      	; 0x2d10 <L_9732+0x62>
    2d10:	00 2c       	mov	r0, r0
    2d12:	98 b9       	out	0x08, r25	; 8
    2d14:	31 11       	cpse	r19, r1
    2d16:	3f 0d       	add	r19, r15
    2d18:	00 c0       	rjmp	.+0      	; 0x2d1a <L_9732+0x6c>
    2d1a:	00 2c       	mov	r0, r0
    2d1c:	b8 b8       	out	0x08, r11	; 8
    2d1e:	00 c0       	rjmp	.+0      	; 0x2d20 <L_9732+0x72>
    2d20:	16 ff       	sbrs	r17, 6
    2d22:	98 b9       	out	0x08, r25	; 8
    2d24:	08 f4       	brcc	.+2      	; 0x2d28 <L_10265>
    2d26:	3f ef       	ldi	r19, 0xFF	; 255

00002d28 <L_10265>:
    2d28:	f1 94       	neg	r15
    2d2a:	88 94       	clc
    2d2c:	00 c0       	rjmp	.+0      	; 0x2d2e <L_10265+0x6>
    2d2e:	00 c0       	rjmp	.+0      	; 0x2d30 <L_10265+0x8>
    2d30:	00 2c       	mov	r0, r0
    2d32:	98 b9       	out	0x08, r25	; 8
    2d34:	40 fd       	sbrc	r20, 0
    2d36:	03 0f       	add	r16, r19
    2d38:	00 c0       	rjmp	.+0      	; 0x2d3a <L_10265+0x12>
    2d3a:	00 2c       	mov	r0, r0
    2d3c:	b8 b8       	out	0x08, r11	; 8
    2d3e:	00 c0       	rjmp	.+0      	; 0x2d40 <L_10265+0x18>
    2d40:	15 ff       	sbrs	r17, 5
    2d42:	98 b9       	out	0x08, r25	; 8
    2d44:	07 95       	ror	r16
    2d46:	88 94       	clc
    2d48:	41 fd       	sbrc	r20, 1
    2d4a:	03 0f       	add	r16, r19
    2d4c:	00 c0       	rjmp	.+0      	; 0x2d4e <L_10265+0x26>
    2d4e:	00 c0       	rjmp	.+0      	; 0x2d50 <L_10265+0x28>
    2d50:	00 2c       	mov	r0, r0
    2d52:	98 b9       	out	0x08, r25	; 8
    2d54:	07 95       	ror	r16
    2d56:	88 94       	clc
    2d58:	00 c0       	rjmp	.+0      	; 0x2d5a <L_10265+0x32>
    2d5a:	00 2c       	mov	r0, r0
    2d5c:	b8 b8       	out	0x08, r11	; 8
    2d5e:	00 c0       	rjmp	.+0      	; 0x2d60 <L_10265+0x38>
    2d60:	14 ff       	sbrs	r17, 4
    2d62:	98 b9       	out	0x08, r25	; 8
    2d64:	42 fd       	sbrc	r20, 2
    2d66:	03 0f       	add	r16, r19
    2d68:	07 95       	ror	r16
    2d6a:	88 94       	clc
    2d6c:	00 c0       	rjmp	.+0      	; 0x2d6e <L_10265+0x46>
    2d6e:	00 c0       	rjmp	.+0      	; 0x2d70 <L_10265+0x48>
    2d70:	00 2c       	mov	r0, r0
    2d72:	98 b9       	out	0x08, r25	; 8
    2d74:	43 fd       	sbrc	r20, 3
    2d76:	03 0f       	add	r16, r19
    2d78:	00 c0       	rjmp	.+0      	; 0x2d7a <L_10265+0x52>
    2d7a:	00 2c       	mov	r0, r0
    2d7c:	b8 b8       	out	0x08, r11	; 8
    2d7e:	00 c0       	rjmp	.+0      	; 0x2d80 <L_10265+0x58>
    2d80:	13 ff       	sbrs	r17, 3
    2d82:	98 b9       	out	0x08, r25	; 8
    2d84:	07 95       	ror	r16
    2d86:	88 94       	clc
    2d88:	44 fd       	sbrc	r20, 4
    2d8a:	03 0f       	add	r16, r19
    2d8c:	00 c0       	rjmp	.+0      	; 0x2d8e <L_10265+0x66>
    2d8e:	00 c0       	rjmp	.+0      	; 0x2d90 <L_10265+0x68>
    2d90:	00 2c       	mov	r0, r0
    2d92:	98 b9       	out	0x08, r25	; 8
    2d94:	07 95       	ror	r16
    2d96:	88 94       	clc
    2d98:	00 c0       	rjmp	.+0      	; 0x2d9a <L_10265+0x72>
    2d9a:	00 2c       	mov	r0, r0
    2d9c:	b8 b8       	out	0x08, r11	; 8
    2d9e:	00 c0       	rjmp	.+0      	; 0x2da0 <L_10265+0x78>
    2da0:	12 ff       	sbrs	r17, 2
    2da2:	98 b9       	out	0x08, r25	; 8
    2da4:	45 fd       	sbrc	r20, 5
    2da6:	03 0f       	add	r16, r19
    2da8:	07 95       	ror	r16
    2daa:	88 94       	clc
    2dac:	00 c0       	rjmp	.+0      	; 0x2dae <L_10265+0x86>
    2dae:	00 c0       	rjmp	.+0      	; 0x2db0 <L_10265+0x88>
    2db0:	00 2c       	mov	r0, r0
    2db2:	98 b9       	out	0x08, r25	; 8
    2db4:	46 fd       	sbrc	r20, 6
    2db6:	03 0f       	add	r16, r19
    2db8:	00 c0       	rjmp	.+0      	; 0x2dba <L_10265+0x92>
    2dba:	00 2c       	mov	r0, r0
    2dbc:	b8 b8       	out	0x08, r11	; 8
    2dbe:	00 c0       	rjmp	.+0      	; 0x2dc0 <L_10265+0x98>
    2dc0:	11 ff       	sbrs	r17, 1
    2dc2:	98 b9       	out	0x08, r25	; 8
    2dc4:	07 95       	ror	r16
    2dc6:	88 94       	clc
    2dc8:	47 fd       	sbrc	r20, 7
    2dca:	03 0f       	add	r16, r19
    2dcc:	00 c0       	rjmp	.+0      	; 0x2dce <L_10265+0xa6>
    2dce:	00 c0       	rjmp	.+0      	; 0x2dd0 <L_10265+0xa8>
    2dd0:	00 2c       	mov	r0, r0
    2dd2:	98 b9       	out	0x08, r25	; 8
    2dd4:	07 95       	ror	r16
    2dd6:	88 94       	clc
    2dd8:	00 c0       	rjmp	.+0      	; 0x2dda <L_10265+0xb2>
    2dda:	00 2c       	mov	r0, r0
    2ddc:	b8 b8       	out	0x08, r11	; 8
    2dde:	00 c0       	rjmp	.+0      	; 0x2de0 <L_10265+0xb8>
    2de0:	10 ff       	sbrs	r17, 0
    2de2:	98 b9       	out	0x08, r25	; 8
    2de4:	13 2f       	mov	r17, r19
    2de6:	41 11       	cpse	r20, r1
    2de8:	10 2f       	mov	r17, r16
    2dea:	fc 0e       	add	r15, r28
    2dec:	00 c0       	rjmp	.+0      	; 0x2dee <L_10265+0xc6>
    2dee:	00 c0       	rjmp	.+0      	; 0x2df0 <L_10265+0xc8>
    2df0:	00 2c       	mov	r0, r0
    2df2:	98 b9       	out	0x08, r25	; 8
    2df4:	00 c0       	rjmp	.+0      	; 0x2df6 <L_10265+0xce>
    2df6:	00 c0       	rjmp	.+0      	; 0x2df8 <L_10265+0xd0>
    2df8:	00 2c       	mov	r0, r0
    2dfa:	b8 b8       	out	0x08, r11	; 8
    2dfc:	00 c0       	rjmp	.+0      	; 0x2dfe <L_10265+0xd6>
    2dfe:	17 ff       	sbrs	r17, 7
    2e00:	98 b9       	out	0x08, r25	; 8
    2e02:	32 81       	ldd	r19, Z+2	; 0x02
    2e04:	00 27       	eor	r16, r16
    2e06:	88 94       	clc
    2e08:	00 c0       	rjmp	.+0      	; 0x2e0a <L_10265+0xe2>
    2e0a:	00 c0       	rjmp	.+0      	; 0x2e0c <L_10265+0xe4>
    2e0c:	00 2c       	mov	r0, r0
    2e0e:	98 b9       	out	0x08, r25	; 8
    2e10:	31 11       	cpse	r19, r1
    2e12:	3e 0d       	add	r19, r14
    2e14:	00 c0       	rjmp	.+0      	; 0x2e16 <L_10265+0xee>
    2e16:	00 2c       	mov	r0, r0
    2e18:	b8 b8       	out	0x08, r11	; 8
    2e1a:	00 c0       	rjmp	.+0      	; 0x2e1c <L_10265+0xf4>
    2e1c:	16 ff       	sbrs	r17, 6
    2e1e:	98 b9       	out	0x08, r25	; 8
    2e20:	08 f4       	brcc	.+2      	; 0x2e24 <L_11483>
    2e22:	3f ef       	ldi	r19, 0xFF	; 255

00002e24 <L_11483>:
    2e24:	e7 0f       	add	r30, r23
    2e26:	f1 1d       	adc	r31, r1
    2e28:	00 c0       	rjmp	.+0      	; 0x2e2a <L_11483+0x6>
    2e2a:	00 c0       	rjmp	.+0      	; 0x2e2c <L_11483+0x8>
    2e2c:	00 2c       	mov	r0, r0
    2e2e:	98 b9       	out	0x08, r25	; 8
    2e30:	50 fd       	sbrc	r21, 0
    2e32:	03 0f       	add	r16, r19
    2e34:	00 c0       	rjmp	.+0      	; 0x2e36 <L_11483+0x12>
    2e36:	00 2c       	mov	r0, r0
    2e38:	b8 b8       	out	0x08, r11	; 8
    2e3a:	00 c0       	rjmp	.+0      	; 0x2e3c <L_11483+0x18>
    2e3c:	15 ff       	sbrs	r17, 5
    2e3e:	98 b9       	out	0x08, r25	; 8
    2e40:	07 95       	ror	r16
    2e42:	88 94       	clc
    2e44:	51 fd       	sbrc	r21, 1
    2e46:	03 0f       	add	r16, r19
    2e48:	00 c0       	rjmp	.+0      	; 0x2e4a <L_11483+0x26>
    2e4a:	00 c0       	rjmp	.+0      	; 0x2e4c <L_11483+0x28>
    2e4c:	00 2c       	mov	r0, r0
    2e4e:	98 b9       	out	0x08, r25	; 8
    2e50:	07 95       	ror	r16
    2e52:	88 94       	clc
    2e54:	00 c0       	rjmp	.+0      	; 0x2e56 <L_11483+0x32>
    2e56:	00 2c       	mov	r0, r0
    2e58:	b8 b8       	out	0x08, r11	; 8
    2e5a:	00 c0       	rjmp	.+0      	; 0x2e5c <L_11483+0x38>
    2e5c:	14 ff       	sbrs	r17, 4
    2e5e:	98 b9       	out	0x08, r25	; 8
    2e60:	52 fd       	sbrc	r21, 2
    2e62:	03 0f       	add	r16, r19
    2e64:	07 95       	ror	r16
    2e66:	88 94       	clc
    2e68:	00 c0       	rjmp	.+0      	; 0x2e6a <L_11483+0x46>
    2e6a:	00 c0       	rjmp	.+0      	; 0x2e6c <L_11483+0x48>
    2e6c:	00 2c       	mov	r0, r0
    2e6e:	98 b9       	out	0x08, r25	; 8
    2e70:	53 fd       	sbrc	r21, 3
    2e72:	03 0f       	add	r16, r19
    2e74:	00 c0       	rjmp	.+0      	; 0x2e76 <L_11483+0x52>
    2e76:	00 2c       	mov	r0, r0
    2e78:	b8 b8       	out	0x08, r11	; 8
    2e7a:	00 c0       	rjmp	.+0      	; 0x2e7c <L_11483+0x58>
    2e7c:	13 ff       	sbrs	r17, 3
    2e7e:	98 b9       	out	0x08, r25	; 8
    2e80:	07 95       	ror	r16
    2e82:	88 94       	clc
    2e84:	54 fd       	sbrc	r21, 4
    2e86:	03 0f       	add	r16, r19
    2e88:	00 c0       	rjmp	.+0      	; 0x2e8a <L_11483+0x66>
    2e8a:	00 c0       	rjmp	.+0      	; 0x2e8c <L_11483+0x68>
    2e8c:	00 2c       	mov	r0, r0
    2e8e:	98 b9       	out	0x08, r25	; 8
    2e90:	07 95       	ror	r16
    2e92:	88 94       	clc
    2e94:	00 c0       	rjmp	.+0      	; 0x2e96 <L_11483+0x72>
    2e96:	00 2c       	mov	r0, r0
    2e98:	b8 b8       	out	0x08, r11	; 8
    2e9a:	00 c0       	rjmp	.+0      	; 0x2e9c <L_11483+0x78>
    2e9c:	12 ff       	sbrs	r17, 2
    2e9e:	98 b9       	out	0x08, r25	; 8
    2ea0:	55 fd       	sbrc	r21, 5
    2ea2:	03 0f       	add	r16, r19
    2ea4:	07 95       	ror	r16
    2ea6:	88 94       	clc
    2ea8:	00 c0       	rjmp	.+0      	; 0x2eaa <L_11483+0x86>
    2eaa:	00 c0       	rjmp	.+0      	; 0x2eac <L_11483+0x88>
    2eac:	00 2c       	mov	r0, r0
    2eae:	98 b9       	out	0x08, r25	; 8
    2eb0:	56 fd       	sbrc	r21, 6
    2eb2:	03 0f       	add	r16, r19
    2eb4:	00 c0       	rjmp	.+0      	; 0x2eb6 <L_11483+0x92>
    2eb6:	00 2c       	mov	r0, r0
    2eb8:	b8 b8       	out	0x08, r11	; 8
    2eba:	00 c0       	rjmp	.+0      	; 0x2ebc <L_11483+0x98>
    2ebc:	11 ff       	sbrs	r17, 1
    2ebe:	98 b9       	out	0x08, r25	; 8
    2ec0:	07 95       	ror	r16
    2ec2:	88 94       	clc
    2ec4:	57 fd       	sbrc	r21, 7
    2ec6:	03 0f       	add	r16, r19
    2ec8:	00 c0       	rjmp	.+0      	; 0x2eca <L_11483+0xa6>
    2eca:	00 c0       	rjmp	.+0      	; 0x2ecc <L_11483+0xa8>
    2ecc:	00 2c       	mov	r0, r0
    2ece:	98 b9       	out	0x08, r25	; 8
    2ed0:	07 95       	ror	r16
    2ed2:	88 94       	clc
    2ed4:	00 c0       	rjmp	.+0      	; 0x2ed6 <L_11483+0xb2>
    2ed6:	00 2c       	mov	r0, r0
    2ed8:	b8 b8       	out	0x08, r11	; 8
    2eda:	00 c0       	rjmp	.+0      	; 0x2edc <L_11483+0xb8>
    2edc:	10 ff       	sbrs	r17, 0
    2ede:	98 b9       	out	0x08, r25	; 8
    2ee0:	13 2f       	mov	r17, r19
    2ee2:	51 11       	cpse	r21, r1
    2ee4:	10 2f       	mov	r17, r16
    2ee6:	e1 94       	neg	r14
    2ee8:	00 c0       	rjmp	.+0      	; 0x2eea <L_11483+0xc6>
    2eea:	00 c0       	rjmp	.+0      	; 0x2eec <L_11483+0xc8>
    2eec:	00 2c       	mov	r0, r0
    2eee:	98 b9       	out	0x08, r25	; 8
    2ef0:	ed 0e       	add	r14, r29
    2ef2:	00 c0       	rjmp	.+0      	; 0x2ef4 <L_11483+0xd0>
    2ef4:	00 c0       	rjmp	.+0      	; 0x2ef6 <L_11483+0xd2>
    2ef6:	b8 b8       	out	0x08, r11	; 8
    2ef8:	00 c0       	rjmp	.+0      	; 0x2efa <L_11483+0xd6>
    2efa:	17 ff       	sbrs	r17, 7
    2efc:	98 b9       	out	0x08, r25	; 8
    2efe:	31 81       	ldd	r19, Z+1	; 0x01
    2f00:	00 27       	eor	r16, r16
    2f02:	88 94       	clc
    2f04:	00 c0       	rjmp	.+0      	; 0x2f06 <L_11483+0xe2>
    2f06:	00 c0       	rjmp	.+0      	; 0x2f08 <L_11483+0xe4>
    2f08:	00 2c       	mov	r0, r0
    2f0a:	98 b9       	out	0x08, r25	; 8
    2f0c:	31 11       	cpse	r19, r1
    2f0e:	38 0f       	add	r19, r24
    2f10:	00 c0       	rjmp	.+0      	; 0x2f12 <L_11483+0xee>
    2f12:	00 2c       	mov	r0, r0
    2f14:	b8 b8       	out	0x08, r11	; 8
    2f16:	00 c0       	rjmp	.+0      	; 0x2f18 <L_11483+0xf4>
    2f18:	16 ff       	sbrs	r17, 6
    2f1a:	98 b9       	out	0x08, r25	; 8
    2f1c:	08 f4       	brcc	.+2      	; 0x2f20 <L_12707>
    2f1e:	3f ef       	ldi	r19, 0xFF	; 255

00002f20 <L_12707>:
    2f20:	81 95       	neg	r24
    2f22:	88 94       	clc
    2f24:	00 c0       	rjmp	.+0      	; 0x2f26 <L_12707+0x6>
    2f26:	00 c0       	rjmp	.+0      	; 0x2f28 <L_12707+0x8>
    2f28:	00 2c       	mov	r0, r0
    2f2a:	98 b9       	out	0x08, r25	; 8
    2f2c:	90 fc       	sbrc	r9, 0
    2f2e:	03 0f       	add	r16, r19
    2f30:	00 c0       	rjmp	.+0      	; 0x2f32 <L_12707+0x12>
    2f32:	00 2c       	mov	r0, r0
    2f34:	b8 b8       	out	0x08, r11	; 8
    2f36:	00 c0       	rjmp	.+0      	; 0x2f38 <L_12707+0x18>
    2f38:	15 ff       	sbrs	r17, 5
    2f3a:	98 b9       	out	0x08, r25	; 8
    2f3c:	07 95       	ror	r16
    2f3e:	88 94       	clc
    2f40:	91 fc       	sbrc	r9, 1
    2f42:	03 0f       	add	r16, r19
    2f44:	00 c0       	rjmp	.+0      	; 0x2f46 <L_12707+0x26>
    2f46:	00 c0       	rjmp	.+0      	; 0x2f48 <L_12707+0x28>
    2f48:	00 2c       	mov	r0, r0
    2f4a:	98 b9       	out	0x08, r25	; 8
    2f4c:	07 95       	ror	r16
    2f4e:	88 94       	clc
    2f50:	00 c0       	rjmp	.+0      	; 0x2f52 <L_12707+0x32>
    2f52:	00 2c       	mov	r0, r0
    2f54:	b8 b8       	out	0x08, r11	; 8
    2f56:	00 c0       	rjmp	.+0      	; 0x2f58 <L_12707+0x38>
    2f58:	14 ff       	sbrs	r17, 4
    2f5a:	98 b9       	out	0x08, r25	; 8
    2f5c:	92 fc       	sbrc	r9, 2
    2f5e:	03 0f       	add	r16, r19
    2f60:	07 95       	ror	r16
    2f62:	88 94       	clc
    2f64:	00 c0       	rjmp	.+0      	; 0x2f66 <L_12707+0x46>
    2f66:	00 c0       	rjmp	.+0      	; 0x2f68 <L_12707+0x48>
    2f68:	00 2c       	mov	r0, r0
    2f6a:	98 b9       	out	0x08, r25	; 8
    2f6c:	93 fc       	sbrc	r9, 3
    2f6e:	03 0f       	add	r16, r19
    2f70:	00 c0       	rjmp	.+0      	; 0x2f72 <L_12707+0x52>
    2f72:	00 2c       	mov	r0, r0
    2f74:	b8 b8       	out	0x08, r11	; 8
    2f76:	00 c0       	rjmp	.+0      	; 0x2f78 <L_12707+0x58>
    2f78:	13 ff       	sbrs	r17, 3
    2f7a:	98 b9       	out	0x08, r25	; 8
    2f7c:	07 95       	ror	r16
    2f7e:	88 94       	clc
    2f80:	94 fc       	sbrc	r9, 4
    2f82:	03 0f       	add	r16, r19
    2f84:	00 c0       	rjmp	.+0      	; 0x2f86 <L_12707+0x66>
    2f86:	00 c0       	rjmp	.+0      	; 0x2f88 <L_12707+0x68>
    2f88:	00 2c       	mov	r0, r0
    2f8a:	98 b9       	out	0x08, r25	; 8
    2f8c:	07 95       	ror	r16
    2f8e:	88 94       	clc
    2f90:	00 c0       	rjmp	.+0      	; 0x2f92 <L_12707+0x72>
    2f92:	00 2c       	mov	r0, r0
    2f94:	b8 b8       	out	0x08, r11	; 8
    2f96:	00 c0       	rjmp	.+0      	; 0x2f98 <L_12707+0x78>
    2f98:	12 ff       	sbrs	r17, 2
    2f9a:	98 b9       	out	0x08, r25	; 8
    2f9c:	95 fc       	sbrc	r9, 5
    2f9e:	03 0f       	add	r16, r19
    2fa0:	07 95       	ror	r16
    2fa2:	88 94       	clc
    2fa4:	00 c0       	rjmp	.+0      	; 0x2fa6 <L_12707+0x86>
    2fa6:	00 c0       	rjmp	.+0      	; 0x2fa8 <L_12707+0x88>
    2fa8:	00 2c       	mov	r0, r0
    2faa:	98 b9       	out	0x08, r25	; 8
    2fac:	96 fc       	sbrc	r9, 6
    2fae:	03 0f       	add	r16, r19
    2fb0:	00 c0       	rjmp	.+0      	; 0x2fb2 <L_12707+0x92>
    2fb2:	00 2c       	mov	r0, r0
    2fb4:	b8 b8       	out	0x08, r11	; 8
    2fb6:	00 c0       	rjmp	.+0      	; 0x2fb8 <L_12707+0x98>
    2fb8:	11 ff       	sbrs	r17, 1
    2fba:	98 b9       	out	0x08, r25	; 8
    2fbc:	07 95       	ror	r16
    2fbe:	88 94       	clc
    2fc0:	97 fc       	sbrc	r9, 7
    2fc2:	03 0f       	add	r16, r19
    2fc4:	00 c0       	rjmp	.+0      	; 0x2fc6 <L_12707+0xa6>
    2fc6:	00 c0       	rjmp	.+0      	; 0x2fc8 <L_12707+0xa8>
    2fc8:	00 2c       	mov	r0, r0
    2fca:	98 b9       	out	0x08, r25	; 8
    2fcc:	07 95       	ror	r16
    2fce:	88 94       	clc
    2fd0:	00 c0       	rjmp	.+0      	; 0x2fd2 <L_12707+0xb2>
    2fd2:	00 2c       	mov	r0, r0
    2fd4:	b8 b8       	out	0x08, r11	; 8
    2fd6:	00 c0       	rjmp	.+0      	; 0x2fd8 <L_12707+0xb8>
    2fd8:	10 ff       	sbrs	r17, 0
    2fda:	98 b9       	out	0x08, r25	; 8
    2fdc:	13 2f       	mov	r17, r19
    2fde:	91 10       	cpse	r9, r1
    2fe0:	10 2f       	mov	r17, r16
    2fe2:	86 0f       	add	r24, r22
    2fe4:	00 c0       	rjmp	.+0      	; 0x2fe6 <L_12707+0xc6>
    2fe6:	00 c0       	rjmp	.+0      	; 0x2fe8 <L_12707+0xc8>
    2fe8:	00 2c       	mov	r0, r0
    2fea:	98 b9       	out	0x08, r25	; 8
    2fec:	11 97       	sbiw	r26, 0x01	; 1
    2fee:	09 f0       	breq	.+2      	; 0x2ff2 <L_13687>
    2ff0:	86 ce       	rjmp	.-756    	; 0x2cfe <L_9732+0x50>

00002ff2 <L_13687>:
    2ff2:	df 91       	pop	r29
    2ff4:	cf 91       	pop	r28
    2ff6:	1f 91       	pop	r17
    2ff8:	0f 91       	pop	r16
    2ffa:	ff 90       	pop	r15
    2ffc:	ef 90       	pop	r14
    2ffe:	df 90       	pop	r13
    3000:	cf 90       	pop	r12
    3002:	bf 90       	pop	r11
    3004:	af 90       	pop	r10
    3006:	9f 90       	pop	r9
    3008:	08 95       	ret

0000300a <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    300a:	0f 93       	push	r16
    300c:	1f 93       	push	r17
    300e:	cf 93       	push	r28
    3010:	df 93       	push	r29
    3012:	ec 01       	movw	r28, r24
    3014:	8b 01       	movw	r16, r22
    3016:	0e 94 98 2c 	call	0x5930	; 0x5930 <_micros>
    301a:	2f 85       	ldd	r18, Y+15	; 0x0f
    301c:	38 89       	ldd	r19, Y+16	; 0x10
    301e:	62 1b       	sub	r22, r18
    3020:	73 0b       	sbc	r23, r19
    3022:	6a 30       	cpi	r22, 0x0A	; 10
    3024:	71 05       	cpc	r23, r1
    3026:	b8 f3       	brcs	.-18     	; 0x3016 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    3028:	f8 94       	cli
    302a:	c8 01       	movw	r24, r16
    302c:	09 de       	rcall	.-1006   	; 0x2c40 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    302e:	f8 01       	movw	r30, r16
    3030:	42 81       	ldd	r20, Z+2	; 0x02
    3032:	53 81       	ldd	r21, Z+3	; 0x03
    3034:	20 ee       	ldi	r18, 0xE0	; 224
    3036:	31 e0       	ldi	r19, 0x01	; 1
    3038:	da 01       	movw	r26, r20
    303a:	0e 94 1a 36 	call	0x6c34	; 0x6c34 <__usmulhisi3>
    303e:	dc 01       	movw	r26, r24
    3040:	cb 01       	movw	r24, r22
    3042:	f4 e0       	ldi	r31, 0x04	; 4
    3044:	b6 95       	lsr	r27
    3046:	a7 95       	ror	r26
    3048:	97 95       	ror	r25
    304a:	87 95       	ror	r24
    304c:	fa 95       	dec	r31
    304e:	d1 f7       	brne	.-12     	; 0x3044 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	20 e0       	ldi	r18, 0x00	; 0
    3054:	b9 01       	movw	r22, r18
    3056:	ea e9       	ldi	r30, 0x9A	; 154
    3058:	4e 9f       	mul	r20, r30
    305a:	04 0e       	add	r0, r20
    305c:	61 1d       	adc	r22, r1
    305e:	5e 9f       	mul	r21, r30
    3060:	60 0d       	add	r22, r0
    3062:	71 1d       	adc	r23, r1
    3064:	11 24       	eor	r1, r1
    3066:	65 0f       	add	r22, r21
    3068:	71 1d       	adc	r23, r1
    306a:	86 0f       	add	r24, r22
    306c:	97 1f       	adc	r25, r23
    306e:	a1 1d       	adc	r26, r1
    3070:	b1 1d       	adc	r27, r1
    3072:	89 3e       	cpi	r24, 0xE9	; 233
    3074:	f3 e0       	ldi	r31, 0x03	; 3
    3076:	9f 07       	cpc	r25, r31
    3078:	a1 05       	cpc	r26, r1
    307a:	b1 05       	cpc	r27, r1
    307c:	08 f4       	brcc	.+2      	; 0x3080 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    307e:	34 c0       	rjmp	.+104    	; 0x30e8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    3080:	88 5e       	subi	r24, 0xE8	; 232
    3082:	93 40       	sbci	r25, 0x03	; 3
    3084:	a1 09       	sbc	r26, r1
    3086:	b1 09       	sbc	r27, r1
    3088:	42 e0       	ldi	r20, 0x02	; 2
    308a:	b6 95       	lsr	r27
    308c:	a7 95       	ror	r26
    308e:	97 95       	ror	r25
    3090:	87 95       	ror	r24
    3092:	4a 95       	dec	r20
    3094:	d1 f7       	brne	.-12     	; 0x308a <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    3096:	47 e0       	ldi	r20, 0x07	; 7
    3098:	84 9f       	mul	r24, r20
    309a:	08 0e       	add	r0, r24
    309c:	21 1d       	adc	r18, r1
    309e:	94 9f       	mul	r25, r20
    30a0:	20 0d       	add	r18, r0
    30a2:	31 1d       	adc	r19, r1
    30a4:	11 24       	eor	r1, r1
    30a6:	29 0f       	add	r18, r25
    30a8:	31 1d       	adc	r19, r1
    30aa:	60 91 b0 0e 	lds	r22, 0x0EB0	; 0x800eb0 <gTimeErrorAccum256ths>
    30ae:	70 e0       	ldi	r23, 0x00	; 0
    30b0:	86 0f       	add	r24, r22
    30b2:	97 1f       	adc	r25, r23
    30b4:	82 0f       	add	r24, r18
    30b6:	93 1f       	adc	r25, r19
    30b8:	40 91 cf 0e 	lds	r20, 0x0ECF	; 0x800ecf <timer0_millis_count>
    30bc:	50 91 d0 0e 	lds	r21, 0x0ED0	; 0x800ed0 <timer0_millis_count+0x1>
    30c0:	60 91 d1 0e 	lds	r22, 0x0ED1	; 0x800ed1 <timer0_millis_count+0x2>
    30c4:	70 91 d2 0e 	lds	r23, 0x0ED2	; 0x800ed2 <timer0_millis_count+0x3>
    30c8:	29 2f       	mov	r18, r25
    30ca:	33 27       	eor	r19, r19
    30cc:	42 0f       	add	r20, r18
    30ce:	53 1f       	adc	r21, r19
    30d0:	61 1d       	adc	r22, r1
    30d2:	71 1d       	adc	r23, r1
    30d4:	40 93 cf 0e 	sts	0x0ECF, r20	; 0x800ecf <timer0_millis_count>
    30d8:	50 93 d0 0e 	sts	0x0ED0, r21	; 0x800ed0 <timer0_millis_count+0x1>
    30dc:	60 93 d1 0e 	sts	0x0ED1, r22	; 0x800ed1 <timer0_millis_count+0x2>
    30e0:	70 93 d2 0e 	sts	0x0ED2, r23	; 0x800ed2 <timer0_millis_count+0x3>
    30e4:	80 93 b0 0e 	sts	0x0EB0, r24	; 0x800eb0 <gTimeErrorAccum256ths>
    30e8:	78 94       	sei
    30ea:	0e 94 98 2c 	call	0x5930	; 0x5930 <_micros>
    30ee:	78 8b       	std	Y+16, r23	; 0x10
    30f0:	6f 87       	std	Y+15, r22	; 0x0f
    30f2:	df 91       	pop	r29
    30f4:	cf 91       	pop	r28
    30f6:	1f 91       	pop	r17
    30f8:	0f 91       	pop	r16
    30fa:	08 95       	ret

000030fc <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    30fc:	0f 93       	push	r16
    30fe:	1f 93       	push	r17
    3100:	cf 93       	push	r28
    3102:	df 93       	push	r29
    3104:	20 91 da 07 	lds	r18, 0x07DA	; 0x8007da <__data_end>
    3108:	2f 5f       	subi	r18, 0xFF	; 255
    310a:	32 2f       	mov	r19, r18
    310c:	37 70       	andi	r19, 0x07	; 7
    310e:	30 93 da 07 	sts	0x07DA, r19	; 0x8007da <__data_end>
    3112:	20 ff       	sbrs	r18, 0
    3114:	2b c0       	rjmp	.+86     	; 0x316c <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    3116:	20 e8       	ldi	r18, 0x80	; 128
    3118:	31 fd       	sbrc	r19, 1
    311a:	20 64       	ori	r18, 0x40	; 64
    311c:	34 70       	andi	r19, 0x04	; 4
    311e:	09 f0       	breq	.+2      	; 0x3122 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    3120:	20 62       	ori	r18, 0x20	; 32
    3122:	20 5f       	subi	r18, 0xF0	; 240
    3124:	fc 01       	movw	r30, r24
    3126:	ec 01       	movw	r28, r24
    3128:	23 96       	adiw	r28, 0x03	; 3
    312a:	00 e0       	ldi	r16, 0x00	; 0
    312c:	11 e0       	ldi	r17, 0x01	; 1
    312e:	64 85       	ldd	r22, Z+12	; 0x0c
    3130:	66 23       	and	r22, r22
    3132:	29 f0       	breq	.+10     	; 0x313e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    3134:	70 e0       	ldi	r23, 0x00	; 0
    3136:	c8 01       	movw	r24, r16
    3138:	0e 94 b1 35 	call	0x6b62	; 0x6b62 <__divmodhi4>
    313c:	6f 5f       	subi	r22, 0xFF	; 255
    313e:	61 87       	std	Z+9, r22	; 0x09
    3140:	32 2f       	mov	r19, r18
    3142:	36 9f       	mul	r19, r22
    3144:	03 0e       	add	r0, r19
    3146:	30 e0       	ldi	r19, 0x00	; 0
    3148:	31 1d       	adc	r19, r1
    314a:	11 24       	eor	r1, r1
    314c:	31 11       	cpse	r19, r1
    314e:	10 c0       	rjmp	.+32     	; 0x3170 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    3150:	16 82       	std	Z+6, r1	; 0x06
    3152:	66 23       	and	r22, r22
    3154:	11 f0       	breq	.+4      	; 0x315a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    3156:	61 50       	subi	r22, 0x01	; 1
    3158:	61 87       	std	Z+9, r22	; 0x09
    315a:	31 96       	adiw	r30, 0x01	; 1
    315c:	ec 17       	cp	r30, r28
    315e:	fd 07       	cpc	r31, r29
    3160:	31 f7       	brne	.-52     	; 0x312e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    3162:	df 91       	pop	r29
    3164:	cf 91       	pop	r28
    3166:	1f 91       	pop	r17
    3168:	0f 91       	pop	r16
    316a:	08 95       	ret
    316c:	20 e0       	ldi	r18, 0x00	; 0
    316e:	d4 cf       	rjmp	.-88     	; 0x3118 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    3170:	31 50       	subi	r19, 0x01	; 1
    3172:	36 83       	std	Z+6, r19	; 0x06
    3174:	ee cf       	rjmp	.-36     	; 0x3152 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

00003176 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    3176:	0f 93       	push	r16
    3178:	1f 93       	push	r17
    317a:	cf 93       	push	r28
    317c:	df 93       	push	r29
    317e:	cd b7       	in	r28, 0x3d	; 61
    3180:	de b7       	in	r29, 0x3e	; 62
    3182:	62 97       	sbiw	r28, 0x12	; 18
    3184:	0f b6       	in	r0, 0x3f	; 63
    3186:	f8 94       	cli
    3188:	de bf       	out	0x3e, r29	; 62
    318a:	0f be       	out	0x3f, r0	; 63
    318c:	cd bf       	out	0x3d, r28	; 61
    318e:	8c 01       	movw	r16, r24
    3190:	f9 01       	movw	r30, r18
    3192:	dc 01       	movw	r26, r24
    3194:	1c 96       	adiw	r26, 0x0c	; 12
    3196:	8c 91       	ld	r24, X
    3198:	7a 83       	std	Y+2, r23	; 0x02
    319a:	69 83       	std	Y+1, r22	; 0x01
    319c:	5c 83       	std	Y+4, r21	; 0x04
    319e:	4b 83       	std	Y+3, r20	; 0x03
    31a0:	5e 83       	std	Y+6, r21	; 0x06
    31a2:	4d 83       	std	Y+5, r20	; 0x05
    31a4:	90 81       	ld	r25, Z
    31a6:	9d 87       	std	Y+13, r25	; 0x0d
    31a8:	91 81       	ldd	r25, Z+1	; 0x01
    31aa:	9e 87       	std	Y+14, r25	; 0x0e
    31ac:	92 81       	ldd	r25, Z+2	; 0x02
    31ae:	9f 87       	std	Y+15, r25	; 0x0f
    31b0:	81 30       	cpi	r24, 0x01	; 1
    31b2:	e9 f4       	brne	.+58     	; 0x31ee <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    31b4:	ce 01       	movw	r24, r28
    31b6:	01 96       	adiw	r24, 0x01	; 1
    31b8:	a1 df       	rcall	.-190    	; 0x30fc <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    31ba:	83 e0       	ldi	r24, 0x03	; 3
    31bc:	88 8b       	std	Y+16, r24	; 0x10
    31be:	1a 8a       	std	Y+18, r1	; 0x12
    31c0:	19 8a       	std	Y+17, r1	; 0x11
    31c2:	d8 01       	movw	r26, r16
    31c4:	ed 91       	ld	r30, X+
    31c6:	fc 91       	ld	r31, X
    31c8:	04 84       	ldd	r0, Z+12	; 0x0c
    31ca:	f5 85       	ldd	r31, Z+13	; 0x0d
    31cc:	e0 2d       	mov	r30, r0
    31ce:	be 01       	movw	r22, r28
    31d0:	6f 5f       	subi	r22, 0xFF	; 255
    31d2:	7f 4f       	sbci	r23, 0xFF	; 255
    31d4:	c8 01       	movw	r24, r16
    31d6:	09 95       	icall
    31d8:	62 96       	adiw	r28, 0x12	; 18
    31da:	0f b6       	in	r0, 0x3f	; 63
    31dc:	f8 94       	cli
    31de:	de bf       	out	0x3e, r29	; 62
    31e0:	0f be       	out	0x3f, r0	; 63
    31e2:	cd bf       	out	0x3d, r28	; 61
    31e4:	df 91       	pop	r29
    31e6:	cf 91       	pop	r28
    31e8:	1f 91       	pop	r17
    31ea:	0f 91       	pop	r16
    31ec:	08 95       	ret
    31ee:	1c 86       	std	Y+12, r1	; 0x0c
    31f0:	1b 86       	std	Y+11, r1	; 0x0b
    31f2:	1a 86       	std	Y+10, r1	; 0x0a
    31f4:	19 86       	std	Y+9, r1	; 0x09
    31f6:	18 86       	std	Y+8, r1	; 0x08
    31f8:	1f 82       	std	Y+7, r1	; 0x07
    31fa:	df cf       	rjmp	.-66     	; 0x31ba <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

000031fc <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    31fc:	0f 93       	push	r16
    31fe:	1f 93       	push	r17
    3200:	cf 93       	push	r28
    3202:	df 93       	push	r29
    3204:	cd b7       	in	r28, 0x3d	; 61
    3206:	de b7       	in	r29, 0x3e	; 62
    3208:	62 97       	sbiw	r28, 0x12	; 18
    320a:	0f b6       	in	r0, 0x3f	; 63
    320c:	f8 94       	cli
    320e:	de bf       	out	0x3e, r29	; 62
    3210:	0f be       	out	0x3f, r0	; 63
    3212:	cd bf       	out	0x3d, r28	; 61
    3214:	8c 01       	movw	r16, r24
    3216:	f9 01       	movw	r30, r18
    3218:	dc 01       	movw	r26, r24
    321a:	1c 96       	adiw	r26, 0x0c	; 12
    321c:	8c 91       	ld	r24, X
    321e:	7a 83       	std	Y+2, r23	; 0x02
    3220:	69 83       	std	Y+1, r22	; 0x01
    3222:	5c 83       	std	Y+4, r21	; 0x04
    3224:	4b 83       	std	Y+3, r20	; 0x03
    3226:	5e 83       	std	Y+6, r21	; 0x06
    3228:	4d 83       	std	Y+5, r20	; 0x05
    322a:	90 81       	ld	r25, Z
    322c:	9d 87       	std	Y+13, r25	; 0x0d
    322e:	91 81       	ldd	r25, Z+1	; 0x01
    3230:	9e 87       	std	Y+14, r25	; 0x0e
    3232:	92 81       	ldd	r25, Z+2	; 0x02
    3234:	9f 87       	std	Y+15, r25	; 0x0f
    3236:	81 30       	cpi	r24, 0x01	; 1
    3238:	e1 f4       	brne	.+56     	; 0x3272 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    323a:	ce 01       	movw	r24, r28
    323c:	01 96       	adiw	r24, 0x01	; 1
    323e:	5e df       	rcall	.-324    	; 0x30fc <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    3240:	18 8a       	std	Y+16, r1	; 0x10
    3242:	1a 8a       	std	Y+18, r1	; 0x12
    3244:	19 8a       	std	Y+17, r1	; 0x11
    3246:	d8 01       	movw	r26, r16
    3248:	ed 91       	ld	r30, X+
    324a:	fc 91       	ld	r31, X
    324c:	04 84       	ldd	r0, Z+12	; 0x0c
    324e:	f5 85       	ldd	r31, Z+13	; 0x0d
    3250:	e0 2d       	mov	r30, r0
    3252:	be 01       	movw	r22, r28
    3254:	6f 5f       	subi	r22, 0xFF	; 255
    3256:	7f 4f       	sbci	r23, 0xFF	; 255
    3258:	c8 01       	movw	r24, r16
    325a:	09 95       	icall
    325c:	62 96       	adiw	r28, 0x12	; 18
    325e:	0f b6       	in	r0, 0x3f	; 63
    3260:	f8 94       	cli
    3262:	de bf       	out	0x3e, r29	; 62
    3264:	0f be       	out	0x3f, r0	; 63
    3266:	cd bf       	out	0x3d, r28	; 61
    3268:	df 91       	pop	r29
    326a:	cf 91       	pop	r28
    326c:	1f 91       	pop	r17
    326e:	0f 91       	pop	r16
    3270:	08 95       	ret
    3272:	1c 86       	std	Y+12, r1	; 0x0c
    3274:	1b 86       	std	Y+11, r1	; 0x0b
    3276:	1a 86       	std	Y+10, r1	; 0x0a
    3278:	19 86       	std	Y+9, r1	; 0x09
    327a:	18 86       	std	Y+8, r1	; 0x08
    327c:	1f 82       	std	Y+7, r1	; 0x07
    327e:	e0 cf       	rjmp	.-64     	; 0x3240 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

00003280 <_GLOBAL__sub_I_matrix>:
    3280:	0f b6       	in	r0, 0x3f	; 63
    3282:	f8 94       	cli
    3284:	80 91 cf 0e 	lds	r24, 0x0ECF	; 0x800ecf <timer0_millis_count>
    3288:	90 91 d0 0e 	lds	r25, 0x0ED0	; 0x800ed0 <timer0_millis_count+0x1>
    328c:	a0 91 d1 0e 	lds	r26, 0x0ED1	; 0x800ed1 <timer0_millis_count+0x2>
    3290:	b0 91 d2 0e 	lds	r27, 0x0ED2	; 0x800ed2 <timer0_millis_count+0x3>
    3294:	0f be       	out	0x3f, r0	; 63
    3296:	90 93 a6 08 	sts	0x08A6, r25	; 0x8008a6 <lastLEDchange+0x1>
    329a:	80 93 a5 08 	sts	0x08A5, r24	; 0x8008a5 <lastLEDchange>
    329e:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    32a2:	80 93 6d 08 	sts	0x086D, r24	; 0x80086d <r>
    32a6:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    32aa:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <g>
    32ae:	0e 94 b8 05 	call	0xb70	; 0xb70 <getRandomColorValue()>
    32b2:	80 93 6b 08 	sts	0x086B, r24	; 0x80086b <b>
    32b6:	61 ec       	ldi	r22, 0xC1	; 193
    32b8:	73 e0       	ldi	r23, 0x03	; 3
    32ba:	8e e1       	ldi	r24, 0x1E	; 30
    32bc:	98 e0       	ldi	r25, 0x08	; 8
    32be:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    32c2:	6c eb       	ldi	r22, 0xBC	; 188
    32c4:	73 e0       	ldi	r23, 0x03	; 3
    32c6:	85 e2       	ldi	r24, 0x25	; 37
    32c8:	98 e0       	ldi	r25, 0x08	; 8
    32ca:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    32ce:	6a eb       	ldi	r22, 0xBA	; 186
    32d0:	73 e0       	ldi	r23, 0x03	; 3
    32d2:	8c e2       	ldi	r24, 0x2C	; 44
    32d4:	98 e0       	ldi	r25, 0x08	; 8
    32d6:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    32da:	67 eb       	ldi	r22, 0xB7	; 183
    32dc:	73 e0       	ldi	r23, 0x03	; 3
    32de:	83 e3       	ldi	r24, 0x33	; 51
    32e0:	98 e0       	ldi	r25, 0x08	; 8
    32e2:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    32e6:	62 eb       	ldi	r22, 0xB2	; 178
    32e8:	73 e0       	ldi	r23, 0x03	; 3
    32ea:	8a e3       	ldi	r24, 0x3A	; 58
    32ec:	98 e0       	ldi	r25, 0x08	; 8
    32ee:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    32f2:	6e ea       	ldi	r22, 0xAE	; 174
    32f4:	73 e0       	ldi	r23, 0x03	; 3
    32f6:	81 e4       	ldi	r24, 0x41	; 65
    32f8:	98 e0       	ldi	r25, 0x08	; 8
    32fa:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    32fe:	68 ea       	ldi	r22, 0xA8	; 168
    3300:	73 e0       	ldi	r23, 0x03	; 3
    3302:	88 e4       	ldi	r24, 0x48	; 72
    3304:	98 e0       	ldi	r25, 0x08	; 8
    3306:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    330a:	65 ea       	ldi	r22, 0xA5	; 165
    330c:	73 e0       	ldi	r23, 0x03	; 3
    330e:	8f e4       	ldi	r24, 0x4F	; 79
    3310:	98 e0       	ldi	r25, 0x08	; 8
    3312:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    3316:	60 ea       	ldi	r22, 0xA0	; 160
    3318:	73 e0       	ldi	r23, 0x03	; 3
    331a:	86 e5       	ldi	r24, 0x56	; 86
    331c:	98 e0       	ldi	r25, 0x08	; 8
    331e:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    3322:	6b e9       	ldi	r22, 0x9B	; 155
    3324:	73 e0       	ldi	r23, 0x03	; 3
    3326:	8d e5       	ldi	r24, 0x5D	; 93
    3328:	98 e0       	ldi	r25, 0x08	; 8
    332a:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    332e:	66 e9       	ldi	r22, 0x96	; 150
    3330:	73 e0       	ldi	r23, 0x03	; 3
    3332:	84 ef       	ldi	r24, 0xF4	; 244
    3334:	97 e0       	ldi	r25, 0x07	; 7
    3336:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    333a:	6f e8       	ldi	r22, 0x8F	; 143
    333c:	73 e0       	ldi	r23, 0x03	; 3
    333e:	8b ef       	ldi	r24, 0xFB	; 251
    3340:	97 e0       	ldi	r25, 0x07	; 7
    3342:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    3346:	66 e8       	ldi	r22, 0x86	; 134
    3348:	73 e0       	ldi	r23, 0x03	; 3
    334a:	82 e0       	ldi	r24, 0x02	; 2
    334c:	98 e0       	ldi	r25, 0x08	; 8
    334e:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    3352:	62 e8       	ldi	r22, 0x82	; 130
    3354:	73 e0       	ldi	r23, 0x03	; 3
    3356:	89 e0       	ldi	r24, 0x09	; 9
    3358:	98 e0       	ldi	r25, 0x08	; 8
    335a:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    335e:	6e e7       	ldi	r22, 0x7E	; 126
    3360:	73 e0       	ldi	r23, 0x03	; 3
    3362:	80 e1       	ldi	r24, 0x10	; 16
    3364:	98 e0       	ldi	r25, 0x08	; 8
    3366:	0e 94 ca 33 	call	0x6794	; 0x6794 <String::String(char const*)>
    336a:	67 e7       	ldi	r22, 0x77	; 119
    336c:	73 e0       	ldi	r23, 0x03	; 3
    336e:	87 e1       	ldi	r24, 0x17	; 23
    3370:	98 e0       	ldi	r25, 0x08	; 8
    3372:	0c 94 ca 33 	jmp	0x6794	; 0x6794 <String::String(char const*)>

00003376 <_GLOBAL__sub_D_matrix>:
    3376:	cf 93       	push	r28
    3378:	df 93       	push	r29
    337a:	ce e1       	ldi	r28, 0x1E	; 30
    337c:	d8 e0       	ldi	r29, 0x08	; 8
    337e:	27 97       	sbiw	r28, 0x07	; 7
    3380:	ce 01       	movw	r24, r28
    3382:	0e 94 61 33 	call	0x66c2	; 0x66c2 <String::~String()>
    3386:	87 e0       	ldi	r24, 0x07	; 7
    3388:	c4 3f       	cpi	r28, 0xF4	; 244
    338a:	d8 07       	cpc	r29, r24
    338c:	c1 f7       	brne	.-16     	; 0x337e <_GLOBAL__sub_D_matrix+0x8>
    338e:	c4 e6       	ldi	r28, 0x64	; 100
    3390:	d8 e0       	ldi	r29, 0x08	; 8
    3392:	27 97       	sbiw	r28, 0x07	; 7
    3394:	ce 01       	movw	r24, r28
    3396:	0e 94 61 33 	call	0x66c2	; 0x66c2 <String::~String()>
    339a:	88 e0       	ldi	r24, 0x08	; 8
    339c:	ce 31       	cpi	r28, 0x1E	; 30
    339e:	d8 07       	cpc	r29, r24
    33a0:	c1 f7       	brne	.-16     	; 0x3392 <_GLOBAL__sub_D_matrix+0x1c>
    33a2:	df 91       	pop	r29
    33a4:	cf 91       	pop	r28
    33a6:	08 95       	ret

000033a8 <checkIncomingMIDI()>:
    33a8:	8a ed       	ldi	r24, 0xDA	; 218
    33aa:	9e e0       	ldi	r25, 0x0E	; 14
    33ac:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <HardwareSerial::available()>
    33b0:	89 2b       	or	r24, r25
    33b2:	d9 f0       	breq	.+54     	; 0x33ea <checkIncomingMIDI()+0x42>
    33b4:	8a ed       	ldi	r24, 0xDA	; 218
    33b6:	9e e0       	ldi	r25, 0x0E	; 14
    33b8:	0e 94 f8 2e 	call	0x5df0	; 0x5df0 <HardwareSerial::read()>
    33bc:	80 93 ba 08 	sts	0x08BA, r24	; 0x8008ba <incomingMidiByte>
    33c0:	68 2f       	mov	r22, r24
    33c2:	8f e4       	ldi	r24, 0x4F	; 79
    33c4:	9f e0       	ldi	r25, 0x0F	; 15
    33c6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Print::println(unsigned char)>
    33ca:	60 91 ba 08 	lds	r22, 0x08BA	; 0x8008ba <incomingMidiByte>
    33ce:	6f 3f       	cpi	r22, 0xFF	; 255
    33d0:	61 f0       	breq	.+24     	; 0x33ea <checkIncomingMIDI()+0x42>
    33d2:	67 ff       	sbrs	r22, 7
    33d4:	11 c0       	rjmp	.+34     	; 0x33f8 <checkIncomingMIDI()+0x50>
    33d6:	60 93 b9 08 	sts	0x08B9, r22	; 0x8008b9 <midiStatusByte>
    33da:	10 92 b8 08 	sts	0x08B8, r1	; 0x8008b8 <midiDataByte1>
    33de:	10 92 b7 08 	sts	0x08B7, r1	; 0x8008b7 <midiDataByte2>
    33e2:	8f e4       	ldi	r24, 0x4F	; 79
    33e4:	9f e0       	ldi	r25, 0x0F	; 15
    33e6:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Print::println(unsigned char)>
    33ea:	8a ed       	ldi	r24, 0xDA	; 218
    33ec:	9e e0       	ldi	r25, 0x0E	; 14
    33ee:	0e 94 c5 2e 	call	0x5d8a	; 0x5d8a <HardwareSerial::available()>
    33f2:	89 2b       	or	r24, r25
    33f4:	c9 f6       	brne	.-78     	; 0x33a8 <checkIncomingMIDI()>
    33f6:	08 95       	ret
    33f8:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <midiDataByte1>
    33fc:	81 11       	cpse	r24, r1
    33fe:	37 c0       	rjmp	.+110    	; 0x346e <checkIncomingMIDI()+0xc6>
    3400:	60 93 b8 08 	sts	0x08B8, r22	; 0x8008b8 <midiDataByte1>
    3404:	60 91 b9 08 	lds	r22, 0x08B9	; 0x8008b9 <midiStatusByte>
    3408:	8f e4       	ldi	r24, 0x4F	; 79
    340a:	9f e0       	ldi	r25, 0x0F	; 15
    340c:	0e 94 74 05 	call	0xae8	; 0xae8 <Print::print(unsigned char)>
    3410:	68 e3       	ldi	r22, 0x38	; 56
    3412:	71 e0       	ldi	r23, 0x01	; 1
    3414:	8f e4       	ldi	r24, 0x4F	; 79
    3416:	9f e0       	ldi	r25, 0x0F	; 15
    3418:	0e 94 73 05 	call	0xae6	; 0xae6 <Print::print(char const*)>
    341c:	60 91 b8 08 	lds	r22, 0x08B8	; 0x8008b8 <midiDataByte1>
    3420:	8f e4       	ldi	r24, 0x4F	; 79
    3422:	9f e0       	ldi	r25, 0x0F	; 15
    3424:	0e 94 74 05 	call	0xae8	; 0xae8 <Print::print(unsigned char)>
    3428:	68 e3       	ldi	r22, 0x38	; 56
    342a:	71 e0       	ldi	r23, 0x01	; 1
    342c:	8f e4       	ldi	r24, 0x4F	; 79
    342e:	9f e0       	ldi	r25, 0x0F	; 15
    3430:	0e 94 73 05 	call	0xae6	; 0xae6 <Print::print(char const*)>
    3434:	60 91 b7 08 	lds	r22, 0x08B7	; 0x8008b7 <midiDataByte2>
    3438:	8f e4       	ldi	r24, 0x4F	; 79
    343a:	9f e0       	ldi	r25, 0x0F	; 15
    343c:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Print::println(unsigned char)>
    3440:	80 91 b9 08 	lds	r24, 0x08B9	; 0x8008b9 <midiStatusByte>
    3444:	89 3b       	cpi	r24, 0xB9	; 185
    3446:	89 f6       	brne	.-94     	; 0x33ea <checkIncomingMIDI()+0x42>
    3448:	80 91 b8 08 	lds	r24, 0x08B8	; 0x8008b8 <midiDataByte1>
    344c:	86 31       	cpi	r24, 0x16	; 22
    344e:	69 f6       	brne	.-102    	; 0x33ea <checkIncomingMIDI()+0x42>
    3450:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <midiDataByte2>
    3454:	88 23       	and	r24, r24
    3456:	49 f2       	breq	.-110    	; 0x33ea <checkIncomingMIDI()+0x42>
    3458:	0e 94 2c 11 	call	0x2258	; 0x2258 <switchToSong(unsigned char)>
    345c:	6a e3       	ldi	r22, 0x3A	; 58
    345e:	71 e0       	ldi	r23, 0x01	; 1
    3460:	8f e4       	ldi	r24, 0x4F	; 79
    3462:	9f e0       	ldi	r25, 0x0F	; 15
    3464:	0e 94 73 05 	call	0xae6	; 0xae6 <Print::print(char const*)>
    3468:	60 91 b7 08 	lds	r22, 0x08B7	; 0x8008b7 <midiDataByte2>
    346c:	ba cf       	rjmp	.-140    	; 0x33e2 <checkIncomingMIDI()+0x3a>
    346e:	80 91 b7 08 	lds	r24, 0x08B7	; 0x8008b7 <midiDataByte2>
    3472:	81 11       	cpse	r24, r1
    3474:	c7 cf       	rjmp	.-114    	; 0x3404 <checkIncomingMIDI()+0x5c>
    3476:	60 93 b7 08 	sts	0x08B7, r22	; 0x8008b7 <midiDataByte2>
    347a:	c4 cf       	rjmp	.-120    	; 0x3404 <checkIncomingMIDI()+0x5c>

0000347c <loop>:
    347c:	8f 92       	push	r8
    347e:	9f 92       	push	r9
    3480:	af 92       	push	r10
    3482:	bf 92       	push	r11
    3484:	cf 92       	push	r12
    3486:	df 92       	push	r13
    3488:	ef 92       	push	r14
    348a:	ff 92       	push	r15
    348c:	0f 93       	push	r16
    348e:	1f 93       	push	r17
    3490:	cf 93       	push	r28
    3492:	80 91 a7 08 	lds	r24, 0x08A7	; 0x8008a7 <ISR_USART_got_a_byte>
    3496:	88 23       	and	r24, r24
    3498:	41 f0       	breq	.+16     	; 0x34aa <loop+0x2e>
    349a:	60 91 a8 08 	lds	r22, 0x08A8	; 0x8008a8 <ISR_received_USART_byte>
    349e:	8f e4       	ldi	r24, 0x4F	; 79
    34a0:	9f e0       	ldi	r25, 0x0F	; 15
    34a2:	0e 94 7b 05 	call	0xaf6	; 0xaf6 <Print::println(unsigned char)>
    34a6:	10 92 a7 08 	sts	0x08A7, r1	; 0x8008a7 <ISR_USART_got_a_byte>
    34aa:	80 91 a9 08 	lds	r24, 0x08A9	; 0x8008a9 <OneSecondHasPast>
    34ae:	88 23       	and	r24, r24
    34b0:	39 f0       	breq	.+14     	; 0x34c0 <loop+0x44>
    34b2:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <secondsForVoltage>
    34b6:	8f 5f       	subi	r24, 0xFF	; 255
    34b8:	80 93 b4 08 	sts	0x08B4, r24	; 0x8008b4 <secondsForVoltage>
    34bc:	10 92 a9 08 	sts	0x08A9, r1	; 0x8008a9 <OneSecondHasPast>
    34c0:	80 91 b4 08 	lds	r24, 0x08B4	; 0x8008b4 <secondsForVoltage>
    34c4:	88 23       	and	r24, r24
    34c6:	09 f4       	brne	.+2      	; 0x34ca <loop+0x4e>
    34c8:	46 c0       	rjmp	.+140    	; 0x3556 <loop+0xda>
    34ca:	c0 91 b6 08 	lds	r28, 0x08B6	; 0x8008b6 <voltageSmooth>
    34ce:	10 92 b4 08 	sts	0x08B4, r1	; 0x8008b4 <secondsForVoltage>
    34d2:	88 e2       	ldi	r24, 0x28	; 40
    34d4:	0e 94 e0 2a 	call	0x55c0	; 0x55c0 <analogRead>
    34d8:	bc 01       	movw	r22, r24
    34da:	99 0f       	add	r25, r25
    34dc:	88 0b       	sbc	r24, r24
    34de:	99 0b       	sbc	r25, r25
    34e0:	1f 92       	push	r1
    34e2:	1f 92       	push	r1
    34e4:	1f 92       	push	r1
    34e6:	28 e7       	ldi	r18, 0x78	; 120
    34e8:	2f 93       	push	r18
    34ea:	a1 2c       	mov	r10, r1
    34ec:	b1 2c       	mov	r11, r1
    34ee:	65 01       	movw	r12, r10
    34f0:	ee 24       	eor	r14, r14
    34f2:	ea 94       	dec	r14
    34f4:	13 e0       	ldi	r17, 0x03	; 3
    34f6:	f1 2e       	mov	r15, r17
    34f8:	00 e0       	ldi	r16, 0x00	; 0
    34fa:	10 e0       	ldi	r17, 0x00	; 0
    34fc:	20 e0       	ldi	r18, 0x00	; 0
    34fe:	30 e0       	ldi	r19, 0x00	; 0
    3500:	a9 01       	movw	r20, r18
    3502:	0e 94 22 33 	call	0x6644	; 0x6644 <map(long, long, long, long, long)>
    3506:	4b 01       	movw	r8, r22
    3508:	5c 01       	movw	r10, r24
    350a:	6c 2f       	mov	r22, r28
    350c:	70 e0       	ldi	r23, 0x00	; 0
    350e:	90 e0       	ldi	r25, 0x00	; 0
    3510:	80 e0       	ldi	r24, 0x00	; 0
    3512:	0e 94 9f 34 	call	0x693e	; 0x693e <__floatsisf>
    3516:	23 e3       	ldi	r18, 0x33	; 51
    3518:	33 e3       	ldi	r19, 0x33	; 51
    351a:	43 e3       	ldi	r20, 0x33	; 51
    351c:	5f e3       	ldi	r21, 0x3F	; 63
    351e:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <__mulsf3>
    3522:	6b 01       	movw	r12, r22
    3524:	7c 01       	movw	r14, r24
    3526:	c5 01       	movw	r24, r10
    3528:	b4 01       	movw	r22, r8
    352a:	0e 94 9f 34 	call	0x693e	; 0x693e <__floatsisf>
    352e:	2a e9       	ldi	r18, 0x9A	; 154
    3530:	39 e9       	ldi	r19, 0x99	; 153
    3532:	49 e9       	ldi	r20, 0x99	; 153
    3534:	5e e3       	ldi	r21, 0x3E	; 62
    3536:	0e 94 2b 35 	call	0x6a56	; 0x6a56 <__mulsf3>
    353a:	9b 01       	movw	r18, r22
    353c:	ac 01       	movw	r20, r24
    353e:	c7 01       	movw	r24, r14
    3540:	b6 01       	movw	r22, r12
    3542:	0e 94 0d 34 	call	0x681a	; 0x681a <__addsf3>
    3546:	0e 94 71 34 	call	0x68e2	; 0x68e2 <__fixunssfsi>
    354a:	60 93 b6 08 	sts	0x08B6, r22	; 0x8008b6 <voltageSmooth>
    354e:	0f 90       	pop	r0
    3550:	0f 90       	pop	r0
    3552:	0f 90       	pop	r0
    3554:	0f 90       	pop	r0
    3556:	80 91 b6 08 	lds	r24, 0x08B6	; 0x8008b6 <voltageSmooth>
    355a:	87 36       	cpi	r24, 0x67	; 103
    355c:	70 f1       	brcs	.+92     	; 0x35ba <loop+0x13e>
    355e:	24 df       	rcall	.-440    	; 0x33a8 <checkIncomingMIDI()>
    3560:	80 91 ad 08 	lds	r24, 0x08AD	; 0x8008ad <flag_processFastLED>
    3564:	88 23       	and	r24, r24
    3566:	71 f0       	breq	.+28     	; 0x3584 <loop+0x108>
    3568:	8f e0       	ldi	r24, 0x0F	; 15
    356a:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <FastLED>
    356e:	80 91 bf 08 	lds	r24, 0x08BF	; 0x8008bf <songID>
    3572:	82 30       	cpi	r24, 0x02	; 2
    3574:	f1 f0       	breq	.+60     	; 0x35b2 <loop+0x136>
    3576:	90 f4       	brcc	.+36     	; 0x359c <loop+0x120>
    3578:	88 23       	and	r24, r24
    357a:	b1 f0       	breq	.+44     	; 0x35a8 <loop+0x12c>
    357c:	81 30       	cpi	r24, 0x01	; 1
    357e:	b9 f0       	breq	.+46     	; 0x35ae <loop+0x132>
    3580:	10 92 ad 08 	sts	0x08AD, r1	; 0x8008ad <flag_processFastLED>
    3584:	cf 91       	pop	r28
    3586:	1f 91       	pop	r17
    3588:	0f 91       	pop	r16
    358a:	ff 90       	pop	r15
    358c:	ef 90       	pop	r14
    358e:	df 90       	pop	r13
    3590:	cf 90       	pop	r12
    3592:	bf 90       	pop	r11
    3594:	af 90       	pop	r10
    3596:	9f 90       	pop	r9
    3598:	8f 90       	pop	r8
    359a:	08 95       	ret
    359c:	83 30       	cpi	r24, 0x03	; 3
    359e:	59 f0       	breq	.+22     	; 0x35b6 <loop+0x13a>
    35a0:	84 30       	cpi	r24, 0x04	; 4
    35a2:	71 f7       	brne	.-36     	; 0x3580 <loop+0x104>
    35a4:	95 da       	rcall	.-2774   	; 0x2ad0 <Pokerface()>
    35a6:	ec cf       	rjmp	.-40     	; 0x3580 <loop+0x104>
    35a8:	0e 94 2c 12 	call	0x2458	; 0x2458 <defaultLoop()>
    35ac:	e9 cf       	rjmp	.-46     	; 0x3580 <loop+0x104>
    35ae:	07 d8       	rcall	.-4082   	; 0x25be <LearnToFly()>
    35b0:	e7 cf       	rjmp	.-50     	; 0x3580 <loop+0x104>
    35b2:	a2 d8       	rcall	.-3772   	; 0x26f8 <Castle()>
    35b4:	e5 cf       	rjmp	.-54     	; 0x3580 <loop+0x104>
    35b6:	d0 d9       	rcall	.-3168   	; 0x2958 <TooClose()>
    35b8:	e3 cf       	rjmp	.-58     	; 0x3580 <loop+0x104>
    35ba:	60 e0       	ldi	r22, 0x00	; 0
    35bc:	8f eb       	ldi	r24, 0xBF	; 191
    35be:	9e e0       	ldi	r25, 0x0E	; 14
    35c0:	0e 94 24 27 	call	0x4e48	; 0x4e48 <CFastLED::clear(bool)>
    35c4:	8f eb       	ldi	r24, 0xBF	; 191
    35c6:	9e e0       	ldi	r25, 0x0E	; 14
    35c8:	0e 94 a7 05 	call	0xb4e	; 0xb4e <CFastLED::show()>
    35cc:	64 ef       	ldi	r22, 0xF4	; 244
    35ce:	71 e0       	ldi	r23, 0x01	; 1
    35d0:	80 e0       	ldi	r24, 0x00	; 0
    35d2:	90 e0       	ldi	r25, 0x00	; 0
    35d4:	0e 94 78 2c 	call	0x58f0	; 0x58f0 <delay>
    35d8:	8f e0       	ldi	r24, 0x0F	; 15
    35da:	80 93 bf 0e 	sts	0x0EBF, r24	; 0x800ebf <FastLED>
    35de:	8f ef       	ldi	r24, 0xFF	; 255
    35e0:	80 93 c0 08 	sts	0x08C0, r24	; 0x8008c0 <leds>
    35e4:	10 92 c1 08 	sts	0x08C1, r1	; 0x8008c1 <leds+0x1>
    35e8:	10 92 c2 08 	sts	0x08C2, r1	; 0x8008c2 <leds+0x2>
    35ec:	8f eb       	ldi	r24, 0xBF	; 191
    35ee:	9e e0       	ldi	r25, 0x0E	; 14
    35f0:	0e 94 a7 05 	call	0xb4e	; 0xb4e <CFastLED::show()>
    35f4:	64 ef       	ldi	r22, 0xF4	; 244
    35f6:	71 e0       	ldi	r23, 0x01	; 1
    35f8:	80 e0       	ldi	r24, 0x00	; 0
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	cf 91       	pop	r28
    35fe:	1f 91       	pop	r17
    3600:	0f 91       	pop	r16
    3602:	ff 90       	pop	r15
    3604:	ef 90       	pop	r14
    3606:	df 90       	pop	r13
    3608:	cf 90       	pop	r12
    360a:	bf 90       	pop	r11
    360c:	af 90       	pop	r10
    360e:	9f 90       	pop	r9
    3610:	8f 90       	pop	r8
    3612:	0c 94 78 2c 	jmp	0x58f0	; 0x58f0 <delay>

00003616 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    3616:	90 e0       	ldi	r25, 0x00	; 0
    3618:	80 e0       	ldi	r24, 0x00	; 0
    361a:	08 95       	ret

0000361c <Print::flush()>:
    361c:	08 95       	ret

0000361e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    361e:	2f 92       	push	r2
    3620:	3f 92       	push	r3
    3622:	4f 92       	push	r4
    3624:	5f 92       	push	r5
    3626:	6f 92       	push	r6
    3628:	7f 92       	push	r7
    362a:	8f 92       	push	r8
    362c:	9f 92       	push	r9
    362e:	af 92       	push	r10
    3630:	bf 92       	push	r11
    3632:	cf 92       	push	r12
    3634:	df 92       	push	r13
    3636:	ef 92       	push	r14
    3638:	ff 92       	push	r15
    363a:	0f 93       	push	r16
    363c:	1f 93       	push	r17
    363e:	cf 93       	push	r28
    3640:	df 93       	push	r29
    3642:	00 d0       	rcall	.+0      	; 0x3644 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    3644:	00 d0       	rcall	.+0      	; 0x3646 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    3646:	00 d0       	rcall	.+0      	; 0x3648 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    3648:	cd b7       	in	r28, 0x3d	; 61
    364a:	de b7       	in	r29, 0x3e	; 62
    364c:	3c 01       	movw	r6, r24
    364e:	6a 01       	movw	r12, r20
    3650:	3e 83       	std	Y+6, r19	; 0x06
    3652:	2d 83       	std	Y+5, r18	; 0x05
    3654:	fc 82       	std	Y+4, r15	; 0x04
    3656:	eb 82       	std	Y+3, r14	; 0x03
    3658:	58 01       	movw	r10, r16
    365a:	a4 1a       	sub	r10, r20
    365c:	b5 0a       	sbc	r11, r21
    365e:	b7 fe       	sbrs	r11, 7
    3660:	03 c0       	rjmp	.+6      	; 0x3668 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    3662:	b1 94       	neg	r11
    3664:	a1 94       	neg	r10
    3666:	b1 08       	sbc	r11, r1
    3668:	8d 80       	ldd	r8, Y+5	; 0x05
    366a:	9e 80       	ldd	r9, Y+6	; 0x06
    366c:	86 1a       	sub	r8, r22
    366e:	97 0a       	sbc	r9, r23
    3670:	97 fe       	sbrs	r9, 7
    3672:	03 c0       	rjmp	.+6      	; 0x367a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    3674:	91 94       	neg	r9
    3676:	81 94       	neg	r8
    3678:	91 08       	sbc	r9, r1
    367a:	8a 14       	cp	r8, r10
    367c:	9b 04       	cpc	r9, r11
    367e:	5c f0       	brlt	.+22     	; 0x3696 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    3680:	90 2f       	mov	r25, r16
    3682:	81 2f       	mov	r24, r17
    3684:	0d 81       	ldd	r16, Y+5	; 0x05
    3686:	1e 81       	ldd	r17, Y+6	; 0x06
    3688:	9d 83       	std	Y+5, r25	; 0x05
    368a:	8e 83       	std	Y+6, r24	; 0x06
    368c:	9c 2d       	mov	r25, r12
    368e:	8d 2d       	mov	r24, r13
    3690:	6b 01       	movw	r12, r22
    3692:	69 2f       	mov	r22, r25
    3694:	78 2f       	mov	r23, r24
    3696:	0c 15       	cp	r16, r12
    3698:	1d 05       	cpc	r17, r13
    369a:	5c f0       	brlt	.+22     	; 0x36b2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    369c:	9d 81       	ldd	r25, Y+5	; 0x05
    369e:	8e 81       	ldd	r24, Y+6	; 0x06
    36a0:	7e 83       	std	Y+6, r23	; 0x06
    36a2:	6d 83       	std	Y+5, r22	; 0x05
    36a4:	69 2f       	mov	r22, r25
    36a6:	78 2f       	mov	r23, r24
    36a8:	90 2f       	mov	r25, r16
    36aa:	81 2f       	mov	r24, r17
    36ac:	86 01       	movw	r16, r12
    36ae:	c9 2e       	mov	r12, r25
    36b0:	d8 2e       	mov	r13, r24
    36b2:	16 01       	movw	r2, r12
    36b4:	20 1a       	sub	r2, r16
    36b6:	31 0a       	sbc	r3, r17
    36b8:	2b 01       	movw	r4, r22
    36ba:	2d 81       	ldd	r18, Y+5	; 0x05
    36bc:	3e 81       	ldd	r19, Y+6	; 0x06
    36be:	42 1a       	sub	r4, r18
    36c0:	53 0a       	sbc	r5, r19
    36c2:	57 fe       	sbrs	r5, 7
    36c4:	03 c0       	rjmp	.+6      	; 0x36cc <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    36c6:	51 94       	neg	r5
    36c8:	41 94       	neg	r4
    36ca:	51 08       	sbc	r5, r1
    36cc:	71 01       	movw	r14, r2
    36ce:	37 fe       	sbrs	r3, 7
    36d0:	03 c0       	rjmp	.+6      	; 0x36d8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    36d2:	3f ef       	ldi	r19, 0xFF	; 255
    36d4:	e3 1a       	sub	r14, r19
    36d6:	f3 0a       	sbc	r15, r19
    36d8:	f5 94       	asr	r15
    36da:	e7 94       	ror	r14
    36dc:	8d 81       	ldd	r24, Y+5	; 0x05
    36de:	9e 81       	ldd	r25, Y+6	; 0x06
    36e0:	86 17       	cp	r24, r22
    36e2:	97 07       	cpc	r25, r23
    36e4:	5c f5       	brge	.+86     	; 0x373c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    36e6:	a1 e0       	ldi	r26, 0x01	; 1
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	ba 83       	std	Y+2, r27	; 0x02
    36ec:	a9 83       	std	Y+1, r26	; 0x01
    36ee:	c0 16       	cp	r12, r16
    36f0:	d1 06       	cpc	r13, r17
    36f2:	4c f1       	brlt	.+82     	; 0x3746 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    36f4:	d3 01       	movw	r26, r6
    36f6:	ed 91       	ld	r30, X+
    36f8:	fc 91       	ld	r31, X
    36fa:	04 84       	ldd	r0, Z+12	; 0x0c
    36fc:	f5 85       	ldd	r31, Z+13	; 0x0d
    36fe:	e0 2d       	mov	r30, r0
    3700:	2b 81       	ldd	r18, Y+3	; 0x03
    3702:	3c 81       	ldd	r19, Y+4	; 0x04
    3704:	a8 01       	movw	r20, r16
    3706:	6d 81       	ldd	r22, Y+5	; 0x05
    3708:	7e 81       	ldd	r23, Y+6	; 0x06
    370a:	8a 14       	cp	r8, r10
    370c:	9b 04       	cpc	r9, r11
    370e:	1c f0       	brlt	.+6      	; 0x3716 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    3710:	4d 81       	ldd	r20, Y+5	; 0x05
    3712:	5e 81       	ldd	r21, Y+6	; 0x06
    3714:	b8 01       	movw	r22, r16
    3716:	c3 01       	movw	r24, r6
    3718:	09 95       	icall
    371a:	e4 18       	sub	r14, r4
    371c:	f5 08       	sbc	r15, r5
    371e:	f7 fe       	sbrs	r15, 7
    3720:	0a c0       	rjmp	.+20     	; 0x3736 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    3722:	2d 81       	ldd	r18, Y+5	; 0x05
    3724:	3e 81       	ldd	r19, Y+6	; 0x06
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	9a 81       	ldd	r25, Y+2	; 0x02
    372a:	28 0f       	add	r18, r24
    372c:	39 1f       	adc	r19, r25
    372e:	3e 83       	std	Y+6, r19	; 0x06
    3730:	2d 83       	std	Y+5, r18	; 0x05
    3732:	e2 0c       	add	r14, r2
    3734:	f3 1c       	adc	r15, r3
    3736:	0f 5f       	subi	r16, 0xFF	; 255
    3738:	1f 4f       	sbci	r17, 0xFF	; 255
    373a:	d9 cf       	rjmp	.-78     	; 0x36ee <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    373c:	2f ef       	ldi	r18, 0xFF	; 255
    373e:	3f ef       	ldi	r19, 0xFF	; 255
    3740:	3a 83       	std	Y+2, r19	; 0x02
    3742:	29 83       	std	Y+1, r18	; 0x01
    3744:	d4 cf       	rjmp	.-88     	; 0x36ee <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    3746:	26 96       	adiw	r28, 0x06	; 6
    3748:	0f b6       	in	r0, 0x3f	; 63
    374a:	f8 94       	cli
    374c:	de bf       	out	0x3e, r29	; 62
    374e:	0f be       	out	0x3f, r0	; 63
    3750:	cd bf       	out	0x3d, r28	; 61
    3752:	df 91       	pop	r29
    3754:	cf 91       	pop	r28
    3756:	1f 91       	pop	r17
    3758:	0f 91       	pop	r16
    375a:	ff 90       	pop	r15
    375c:	ef 90       	pop	r14
    375e:	df 90       	pop	r13
    3760:	cf 90       	pop	r12
    3762:	bf 90       	pop	r11
    3764:	af 90       	pop	r10
    3766:	9f 90       	pop	r9
    3768:	8f 90       	pop	r8
    376a:	7f 90       	pop	r7
    376c:	6f 90       	pop	r6
    376e:	5f 90       	pop	r5
    3770:	4f 90       	pop	r4
    3772:	3f 90       	pop	r3
    3774:	2f 90       	pop	r2
    3776:	08 95       	ret

00003778 <Adafruit_GFX::startWrite()>:
    3778:	08 95       	ret

0000377a <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    377a:	dc 01       	movw	r26, r24
    377c:	ed 91       	ld	r30, X+
    377e:	fc 91       	ld	r31, X
    3780:	00 84       	ldd	r0, Z+8	; 0x08
    3782:	f1 85       	ldd	r31, Z+9	; 0x09
    3784:	e0 2d       	mov	r30, r0
    3786:	09 94       	ijmp

00003788 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    3788:	0f 93       	push	r16
    378a:	1f 93       	push	r17
    378c:	dc 01       	movw	r26, r24
    378e:	ed 91       	ld	r30, X+
    3790:	fc 91       	ld	r31, X
    3792:	04 8c       	ldd	r0, Z+28	; 0x1c
    3794:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3796:	e0 2d       	mov	r30, r0
    3798:	09 95       	icall
    379a:	1f 91       	pop	r17
    379c:	0f 91       	pop	r16
    379e:	08 95       	ret

000037a0 <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    37a0:	0f 93       	push	r16
    37a2:	1f 93       	push	r17
    37a4:	dc 01       	movw	r26, r24
    37a6:	ed 91       	ld	r30, X+
    37a8:	fc 91       	ld	r31, X
    37aa:	06 8c       	ldd	r0, Z+30	; 0x1e
    37ac:	f7 8d       	ldd	r31, Z+31	; 0x1f
    37ae:	e0 2d       	mov	r30, r0
    37b0:	09 95       	icall
    37b2:	1f 91       	pop	r17
    37b4:	0f 91       	pop	r16
    37b6:	08 95       	ret

000037b8 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    37b8:	ef 92       	push	r14
    37ba:	ff 92       	push	r15
    37bc:	0f 93       	push	r16
    37be:	1f 93       	push	r17
    37c0:	dc 01       	movw	r26, r24
    37c2:	ed 91       	ld	r30, X+
    37c4:	fc 91       	ld	r31, X
    37c6:	00 a0       	ldd	r0, Z+32	; 0x20
    37c8:	f1 a1       	ldd	r31, Z+33	; 0x21
    37ca:	e0 2d       	mov	r30, r0
    37cc:	09 95       	icall
    37ce:	1f 91       	pop	r17
    37d0:	0f 91       	pop	r16
    37d2:	ff 90       	pop	r15
    37d4:	ef 90       	pop	r14
    37d6:	08 95       	ret

000037d8 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    37d8:	8f 92       	push	r8
    37da:	9f 92       	push	r9
    37dc:	af 92       	push	r10
    37de:	bf 92       	push	r11
    37e0:	cf 92       	push	r12
    37e2:	df 92       	push	r13
    37e4:	ef 92       	push	r14
    37e6:	ff 92       	push	r15
    37e8:	0f 93       	push	r16
    37ea:	1f 93       	push	r17
    37ec:	cf 93       	push	r28
    37ee:	df 93       	push	r29
    37f0:	ec 01       	movw	r28, r24
    37f2:	5b 01       	movw	r10, r22
    37f4:	4a 01       	movw	r8, r20
    37f6:	69 01       	movw	r12, r18
    37f8:	78 01       	movw	r14, r16
    37fa:	e8 81       	ld	r30, Y
    37fc:	f9 81       	ldd	r31, Y+1	; 0x01
    37fe:	02 84       	ldd	r0, Z+10	; 0x0a
    3800:	f3 85       	ldd	r31, Z+11	; 0x0b
    3802:	e0 2d       	mov	r30, r0
    3804:	09 95       	icall
    3806:	c8 0c       	add	r12, r8
    3808:	d9 1c       	adc	r13, r9
    380a:	86 01       	movw	r16, r12
    380c:	01 50       	subi	r16, 0x01	; 1
    380e:	11 09       	sbc	r17, r1
    3810:	e8 81       	ld	r30, Y
    3812:	f9 81       	ldd	r31, Y+1	; 0x01
    3814:	04 88       	ldd	r0, Z+20	; 0x14
    3816:	f5 89       	ldd	r31, Z+21	; 0x15
    3818:	e0 2d       	mov	r30, r0
    381a:	95 01       	movw	r18, r10
    381c:	a4 01       	movw	r20, r8
    381e:	b5 01       	movw	r22, r10
    3820:	ce 01       	movw	r24, r28
    3822:	09 95       	icall
    3824:	e8 81       	ld	r30, Y
    3826:	f9 81       	ldd	r31, Y+1	; 0x01
    3828:	06 88       	ldd	r0, Z+22	; 0x16
    382a:	f7 89       	ldd	r31, Z+23	; 0x17
    382c:	e0 2d       	mov	r30, r0
    382e:	ce 01       	movw	r24, r28
    3830:	df 91       	pop	r29
    3832:	cf 91       	pop	r28
    3834:	1f 91       	pop	r17
    3836:	0f 91       	pop	r16
    3838:	ff 90       	pop	r15
    383a:	ef 90       	pop	r14
    383c:	df 90       	pop	r13
    383e:	cf 90       	pop	r12
    3840:	bf 90       	pop	r11
    3842:	af 90       	pop	r10
    3844:	9f 90       	pop	r9
    3846:	8f 90       	pop	r8
    3848:	09 94       	ijmp

0000384a <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    384a:	8f 92       	push	r8
    384c:	9f 92       	push	r9
    384e:	af 92       	push	r10
    3850:	bf 92       	push	r11
    3852:	cf 92       	push	r12
    3854:	df 92       	push	r13
    3856:	ef 92       	push	r14
    3858:	ff 92       	push	r15
    385a:	0f 93       	push	r16
    385c:	1f 93       	push	r17
    385e:	cf 93       	push	r28
    3860:	df 93       	push	r29
    3862:	ec 01       	movw	r28, r24
    3864:	5b 01       	movw	r10, r22
    3866:	4a 01       	movw	r8, r20
    3868:	69 01       	movw	r12, r18
    386a:	e8 81       	ld	r30, Y
    386c:	f9 81       	ldd	r31, Y+1	; 0x01
    386e:	02 84       	ldd	r0, Z+10	; 0x0a
    3870:	f3 85       	ldd	r31, Z+11	; 0x0b
    3872:	e0 2d       	mov	r30, r0
    3874:	09 95       	icall
    3876:	95 01       	movw	r18, r10
    3878:	2c 0d       	add	r18, r12
    387a:	3d 1d       	adc	r19, r13
    387c:	21 50       	subi	r18, 0x01	; 1
    387e:	31 09       	sbc	r19, r1
    3880:	e8 81       	ld	r30, Y
    3882:	f9 81       	ldd	r31, Y+1	; 0x01
    3884:	04 88       	ldd	r0, Z+20	; 0x14
    3886:	f5 89       	ldd	r31, Z+21	; 0x15
    3888:	e0 2d       	mov	r30, r0
    388a:	78 01       	movw	r14, r16
    388c:	84 01       	movw	r16, r8
    388e:	a4 01       	movw	r20, r8
    3890:	b5 01       	movw	r22, r10
    3892:	ce 01       	movw	r24, r28
    3894:	09 95       	icall
    3896:	e8 81       	ld	r30, Y
    3898:	f9 81       	ldd	r31, Y+1	; 0x01
    389a:	06 88       	ldd	r0, Z+22	; 0x16
    389c:	f7 89       	ldd	r31, Z+23	; 0x17
    389e:	e0 2d       	mov	r30, r0
    38a0:	ce 01       	movw	r24, r28
    38a2:	df 91       	pop	r29
    38a4:	cf 91       	pop	r28
    38a6:	1f 91       	pop	r17
    38a8:	0f 91       	pop	r16
    38aa:	ff 90       	pop	r15
    38ac:	ef 90       	pop	r14
    38ae:	df 90       	pop	r13
    38b0:	cf 90       	pop	r12
    38b2:	bf 90       	pop	r11
    38b4:	af 90       	pop	r10
    38b6:	9f 90       	pop	r9
    38b8:	8f 90       	pop	r8
    38ba:	09 94       	ijmp

000038bc <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    38bc:	4f 92       	push	r4
    38be:	5f 92       	push	r5
    38c0:	6f 92       	push	r6
    38c2:	7f 92       	push	r7
    38c4:	8f 92       	push	r8
    38c6:	9f 92       	push	r9
    38c8:	af 92       	push	r10
    38ca:	bf 92       	push	r11
    38cc:	cf 92       	push	r12
    38ce:	df 92       	push	r13
    38d0:	ef 92       	push	r14
    38d2:	ff 92       	push	r15
    38d4:	0f 93       	push	r16
    38d6:	1f 93       	push	r17
    38d8:	cf 93       	push	r28
    38da:	df 93       	push	r29
    38dc:	6c 01       	movw	r12, r24
    38de:	2b 01       	movw	r4, r22
    38e0:	5a 01       	movw	r10, r20
    38e2:	39 01       	movw	r6, r18
    38e4:	48 01       	movw	r8, r16
    38e6:	dc 01       	movw	r26, r24
    38e8:	ed 91       	ld	r30, X+
    38ea:	fc 91       	ld	r31, X
    38ec:	02 84       	ldd	r0, Z+10	; 0x0a
    38ee:	f3 85       	ldd	r31, Z+11	; 0x0b
    38f0:	e0 2d       	mov	r30, r0
    38f2:	09 95       	icall
    38f4:	e2 01       	movw	r28, r4
    38f6:	64 0c       	add	r6, r4
    38f8:	75 1c       	adc	r7, r5
    38fa:	d6 01       	movw	r26, r12
    38fc:	ed 91       	ld	r30, X+
    38fe:	fc 91       	ld	r31, X
    3900:	c6 15       	cp	r28, r6
    3902:	d7 05       	cpc	r29, r7
    3904:	5c f4       	brge	.+22     	; 0x391c <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    3906:	00 88       	ldd	r0, Z+16	; 0x10
    3908:	f1 89       	ldd	r31, Z+17	; 0x11
    390a:	e0 2d       	mov	r30, r0
    390c:	87 01       	movw	r16, r14
    390e:	94 01       	movw	r18, r8
    3910:	a5 01       	movw	r20, r10
    3912:	be 01       	movw	r22, r28
    3914:	c6 01       	movw	r24, r12
    3916:	09 95       	icall
    3918:	21 96       	adiw	r28, 0x01	; 1
    391a:	ef cf       	rjmp	.-34     	; 0x38fa <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    391c:	06 88       	ldd	r0, Z+22	; 0x16
    391e:	f7 89       	ldd	r31, Z+23	; 0x17
    3920:	e0 2d       	mov	r30, r0
    3922:	c6 01       	movw	r24, r12
    3924:	df 91       	pop	r29
    3926:	cf 91       	pop	r28
    3928:	1f 91       	pop	r17
    392a:	0f 91       	pop	r16
    392c:	ff 90       	pop	r15
    392e:	ef 90       	pop	r14
    3930:	df 90       	pop	r13
    3932:	cf 90       	pop	r12
    3934:	bf 90       	pop	r11
    3936:	af 90       	pop	r10
    3938:	9f 90       	pop	r9
    393a:	8f 90       	pop	r8
    393c:	7f 90       	pop	r7
    393e:	6f 90       	pop	r6
    3940:	5f 90       	pop	r5
    3942:	4f 90       	pop	r4
    3944:	09 94       	ijmp

00003946 <Adafruit_GFX::fillScreen(unsigned int)>:
    3946:	ef 92       	push	r14
    3948:	ff 92       	push	r15
    394a:	0f 93       	push	r16
    394c:	1f 93       	push	r17
    394e:	dc 01       	movw	r26, r24
    3950:	19 96       	adiw	r26, 0x09	; 9
    3952:	0d 91       	ld	r16, X+
    3954:	1c 91       	ld	r17, X
    3956:	1a 97       	sbiw	r26, 0x0a	; 10
    3958:	17 96       	adiw	r26, 0x07	; 7
    395a:	2d 91       	ld	r18, X+
    395c:	3c 91       	ld	r19, X
    395e:	18 97       	sbiw	r26, 0x08	; 8
    3960:	ed 91       	ld	r30, X+
    3962:	fc 91       	ld	r31, X
    3964:	00 a0       	ldd	r0, Z+32	; 0x20
    3966:	f1 a1       	ldd	r31, Z+33	; 0x21
    3968:	e0 2d       	mov	r30, r0
    396a:	7b 01       	movw	r14, r22
    396c:	50 e0       	ldi	r21, 0x00	; 0
    396e:	40 e0       	ldi	r20, 0x00	; 0
    3970:	70 e0       	ldi	r23, 0x00	; 0
    3972:	60 e0       	ldi	r22, 0x00	; 0
    3974:	09 95       	icall
    3976:	1f 91       	pop	r17
    3978:	0f 91       	pop	r16
    397a:	ff 90       	pop	r15
    397c:	ef 90       	pop	r14
    397e:	08 95       	ret

00003980 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    3980:	6f 92       	push	r6
    3982:	7f 92       	push	r7
    3984:	8f 92       	push	r8
    3986:	9f 92       	push	r9
    3988:	af 92       	push	r10
    398a:	bf 92       	push	r11
    398c:	cf 92       	push	r12
    398e:	df 92       	push	r13
    3990:	ef 92       	push	r14
    3992:	ff 92       	push	r15
    3994:	0f 93       	push	r16
    3996:	1f 93       	push	r17
    3998:	cf 93       	push	r28
    399a:	df 93       	push	r29
    399c:	ec 01       	movw	r28, r24
    399e:	6b 01       	movw	r12, r22
    39a0:	5a 01       	movw	r10, r20
    39a2:	39 01       	movw	r6, r18
    39a4:	48 01       	movw	r8, r16
    39a6:	e8 81       	ld	r30, Y
    39a8:	f9 81       	ldd	r31, Y+1	; 0x01
    39aa:	02 84       	ldd	r0, Z+10	; 0x0a
    39ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    39ae:	e0 2d       	mov	r30, r0
    39b0:	09 95       	icall
    39b2:	e8 81       	ld	r30, Y
    39b4:	f9 81       	ldd	r31, Y+1	; 0x01
    39b6:	02 88       	ldd	r0, Z+18	; 0x12
    39b8:	f3 89       	ldd	r31, Z+19	; 0x13
    39ba:	e0 2d       	mov	r30, r0
    39bc:	87 01       	movw	r16, r14
    39be:	93 01       	movw	r18, r6
    39c0:	a5 01       	movw	r20, r10
    39c2:	b6 01       	movw	r22, r12
    39c4:	ce 01       	movw	r24, r28
    39c6:	09 95       	icall
    39c8:	a5 01       	movw	r20, r10
    39ca:	48 0d       	add	r20, r8
    39cc:	59 1d       	adc	r21, r9
    39ce:	41 50       	subi	r20, 0x01	; 1
    39d0:	51 09       	sbc	r21, r1
    39d2:	e8 81       	ld	r30, Y
    39d4:	f9 81       	ldd	r31, Y+1	; 0x01
    39d6:	02 88       	ldd	r0, Z+18	; 0x12
    39d8:	f3 89       	ldd	r31, Z+19	; 0x13
    39da:	e0 2d       	mov	r30, r0
    39dc:	93 01       	movw	r18, r6
    39de:	b6 01       	movw	r22, r12
    39e0:	ce 01       	movw	r24, r28
    39e2:	09 95       	icall
    39e4:	e8 81       	ld	r30, Y
    39e6:	f9 81       	ldd	r31, Y+1	; 0x01
    39e8:	00 88       	ldd	r0, Z+16	; 0x10
    39ea:	f1 89       	ldd	r31, Z+17	; 0x11
    39ec:	e0 2d       	mov	r30, r0
    39ee:	94 01       	movw	r18, r8
    39f0:	a5 01       	movw	r20, r10
    39f2:	b6 01       	movw	r22, r12
    39f4:	ce 01       	movw	r24, r28
    39f6:	09 95       	icall
    39f8:	c6 0c       	add	r12, r6
    39fa:	d7 1c       	adc	r13, r7
    39fc:	b6 01       	movw	r22, r12
    39fe:	61 50       	subi	r22, 0x01	; 1
    3a00:	71 09       	sbc	r23, r1
    3a02:	e8 81       	ld	r30, Y
    3a04:	f9 81       	ldd	r31, Y+1	; 0x01
    3a06:	00 88       	ldd	r0, Z+16	; 0x10
    3a08:	f1 89       	ldd	r31, Z+17	; 0x11
    3a0a:	e0 2d       	mov	r30, r0
    3a0c:	94 01       	movw	r18, r8
    3a0e:	a5 01       	movw	r20, r10
    3a10:	ce 01       	movw	r24, r28
    3a12:	09 95       	icall
    3a14:	e8 81       	ld	r30, Y
    3a16:	f9 81       	ldd	r31, Y+1	; 0x01
    3a18:	06 88       	ldd	r0, Z+22	; 0x16
    3a1a:	f7 89       	ldd	r31, Z+23	; 0x17
    3a1c:	e0 2d       	mov	r30, r0
    3a1e:	ce 01       	movw	r24, r28
    3a20:	df 91       	pop	r29
    3a22:	cf 91       	pop	r28
    3a24:	1f 91       	pop	r17
    3a26:	0f 91       	pop	r16
    3a28:	ff 90       	pop	r15
    3a2a:	ef 90       	pop	r14
    3a2c:	df 90       	pop	r13
    3a2e:	cf 90       	pop	r12
    3a30:	bf 90       	pop	r11
    3a32:	af 90       	pop	r10
    3a34:	9f 90       	pop	r9
    3a36:	8f 90       	pop	r8
    3a38:	7f 90       	pop	r7
    3a3a:	6f 90       	pop	r6
    3a3c:	09 94       	ijmp

00003a3e <Adafruit_GFX::invertDisplay(bool)>:
    3a3e:	08 95       	ret

00003a40 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    3a40:	6f 92       	push	r6
    3a42:	7f 92       	push	r7
    3a44:	8f 92       	push	r8
    3a46:	9f 92       	push	r9
    3a48:	af 92       	push	r10
    3a4a:	bf 92       	push	r11
    3a4c:	cf 92       	push	r12
    3a4e:	df 92       	push	r13
    3a50:	ef 92       	push	r14
    3a52:	ff 92       	push	r15
    3a54:	0f 93       	push	r16
    3a56:	1f 93       	push	r17
    3a58:	cf 93       	push	r28
    3a5a:	df 93       	push	r29
    3a5c:	5c 01       	movw	r10, r24
    3a5e:	eb 01       	movw	r28, r22
    3a60:	6a 01       	movw	r12, r20
    3a62:	49 01       	movw	r8, r18
    3a64:	38 01       	movw	r6, r16
    3a66:	87 01       	movw	r16, r14
    3a68:	dc 01       	movw	r26, r24
    3a6a:	ed 91       	ld	r30, X+
    3a6c:	fc 91       	ld	r31, X
    3a6e:	62 17       	cp	r22, r18
    3a70:	73 07       	cpc	r23, r19
    3a72:	19 f5       	brne	.+70     	; 0x3aba <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    3a74:	64 16       	cp	r6, r20
    3a76:	75 06       	cpc	r7, r21
    3a78:	2c f0       	brlt	.+10     	; 0x3a84 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    3a7a:	96 2d       	mov	r25, r6
    3a7c:	87 2d       	mov	r24, r7
    3a7e:	3a 01       	movw	r6, r20
    3a80:	c9 2e       	mov	r12, r25
    3a82:	d8 2e       	mov	r13, r24
    3a84:	96 01       	movw	r18, r12
    3a86:	26 19       	sub	r18, r6
    3a88:	37 09       	sbc	r19, r7
    3a8a:	2f 5f       	subi	r18, 0xFF	; 255
    3a8c:	3f 4f       	sbci	r19, 0xFF	; 255
    3a8e:	04 8c       	ldd	r0, Z+28	; 0x1c
    3a90:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3a92:	e0 2d       	mov	r30, r0
    3a94:	a3 01       	movw	r20, r6
    3a96:	be 01       	movw	r22, r28
    3a98:	c5 01       	movw	r24, r10
    3a9a:	09 95       	icall
    3a9c:	df 91       	pop	r29
    3a9e:	cf 91       	pop	r28
    3aa0:	1f 91       	pop	r17
    3aa2:	0f 91       	pop	r16
    3aa4:	ff 90       	pop	r15
    3aa6:	ef 90       	pop	r14
    3aa8:	df 90       	pop	r13
    3aaa:	cf 90       	pop	r12
    3aac:	bf 90       	pop	r11
    3aae:	af 90       	pop	r10
    3ab0:	9f 90       	pop	r9
    3ab2:	8f 90       	pop	r8
    3ab4:	7f 90       	pop	r7
    3ab6:	6f 90       	pop	r6
    3ab8:	08 95       	ret
    3aba:	46 15       	cp	r20, r6
    3abc:	57 05       	cpc	r21, r7
    3abe:	91 f4       	brne	.+36     	; 0x3ae4 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    3ac0:	26 17       	cp	r18, r22
    3ac2:	37 07       	cpc	r19, r23
    3ac4:	24 f0       	brlt	.+8      	; 0x3ace <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    3ac6:	89 2d       	mov	r24, r9
    3ac8:	4b 01       	movw	r8, r22
    3aca:	c2 2f       	mov	r28, r18
    3acc:	d8 2f       	mov	r29, r24
    3ace:	9e 01       	movw	r18, r28
    3ad0:	28 19       	sub	r18, r8
    3ad2:	39 09       	sbc	r19, r9
    3ad4:	2f 5f       	subi	r18, 0xFF	; 255
    3ad6:	3f 4f       	sbci	r19, 0xFF	; 255
    3ad8:	06 8c       	ldd	r0, Z+30	; 0x1e
    3ada:	f7 8d       	ldd	r31, Z+31	; 0x1f
    3adc:	e0 2d       	mov	r30, r0
    3ade:	a6 01       	movw	r20, r12
    3ae0:	b4 01       	movw	r22, r8
    3ae2:	da cf       	rjmp	.-76     	; 0x3a98 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    3ae4:	02 84       	ldd	r0, Z+10	; 0x0a
    3ae6:	f3 85       	ldd	r31, Z+11	; 0x0b
    3ae8:	e0 2d       	mov	r30, r0
    3aea:	09 95       	icall
    3aec:	d5 01       	movw	r26, r10
    3aee:	ed 91       	ld	r30, X+
    3af0:	fc 91       	ld	r31, X
    3af2:	04 88       	ldd	r0, Z+20	; 0x14
    3af4:	f5 89       	ldd	r31, Z+21	; 0x15
    3af6:	e0 2d       	mov	r30, r0
    3af8:	83 01       	movw	r16, r6
    3afa:	94 01       	movw	r18, r8
    3afc:	a6 01       	movw	r20, r12
    3afe:	be 01       	movw	r22, r28
    3b00:	c5 01       	movw	r24, r10
    3b02:	09 95       	icall
    3b04:	d5 01       	movw	r26, r10
    3b06:	ed 91       	ld	r30, X+
    3b08:	fc 91       	ld	r31, X
    3b0a:	06 88       	ldd	r0, Z+22	; 0x16
    3b0c:	f7 89       	ldd	r31, Z+23	; 0x17
    3b0e:	e0 2d       	mov	r30, r0
    3b10:	c5 01       	movw	r24, r10
    3b12:	df 91       	pop	r29
    3b14:	cf 91       	pop	r28
    3b16:	1f 91       	pop	r17
    3b18:	0f 91       	pop	r16
    3b1a:	ff 90       	pop	r15
    3b1c:	ef 90       	pop	r14
    3b1e:	df 90       	pop	r13
    3b20:	cf 90       	pop	r12
    3b22:	bf 90       	pop	r11
    3b24:	af 90       	pop	r10
    3b26:	9f 90       	pop	r9
    3b28:	8f 90       	pop	r8
    3b2a:	7f 90       	pop	r7
    3b2c:	6f 90       	pop	r6
    3b2e:	09 94       	ijmp

00003b30 <Adafruit_GFX::setRotation(unsigned char)>:
    3b30:	fc 01       	movw	r30, r24
    3b32:	63 70       	andi	r22, 0x03	; 3
    3b34:	65 8b       	std	Z+21, r22	; 0x15
    3b36:	83 81       	ldd	r24, Z+3	; 0x03
    3b38:	94 81       	ldd	r25, Z+4	; 0x04
    3b3a:	25 81       	ldd	r18, Z+5	; 0x05
    3b3c:	36 81       	ldd	r19, Z+6	; 0x06
    3b3e:	61 30       	cpi	r22, 0x01	; 1
    3b40:	39 f0       	breq	.+14     	; 0x3b50 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    3b42:	63 30       	cpi	r22, 0x03	; 3
    3b44:	29 f0       	breq	.+10     	; 0x3b50 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    3b46:	90 87       	std	Z+8, r25	; 0x08
    3b48:	87 83       	std	Z+7, r24	; 0x07
    3b4a:	32 87       	std	Z+10, r19	; 0x0a
    3b4c:	21 87       	std	Z+9, r18	; 0x09
    3b4e:	08 95       	ret
    3b50:	30 87       	std	Z+8, r19	; 0x08
    3b52:	27 83       	std	Z+7, r18	; 0x07
    3b54:	92 87       	std	Z+10, r25	; 0x0a
    3b56:	81 87       	std	Z+9, r24	; 0x09
    3b58:	08 95       	ret

00003b5a <Adafruit_GFX::Adafruit_GFX(int, int)>:
    3b5a:	fc 01       	movw	r30, r24
    3b5c:	12 82       	std	Z+2, r1	; 0x02
    3b5e:	8f ef       	ldi	r24, 0xFF	; 255
    3b60:	96 e0       	ldi	r25, 0x06	; 6
    3b62:	91 83       	std	Z+1, r25	; 0x01
    3b64:	80 83       	st	Z, r24
    3b66:	74 83       	std	Z+4, r23	; 0x04
    3b68:	63 83       	std	Z+3, r22	; 0x03
    3b6a:	56 83       	std	Z+6, r21	; 0x06
    3b6c:	45 83       	std	Z+5, r20	; 0x05
    3b6e:	70 87       	std	Z+8, r23	; 0x08
    3b70:	67 83       	std	Z+7, r22	; 0x07
    3b72:	52 87       	std	Z+10, r21	; 0x0a
    3b74:	41 87       	std	Z+9, r20	; 0x09
    3b76:	15 8a       	std	Z+21, r1	; 0x15
    3b78:	14 86       	std	Z+12, r1	; 0x0c
    3b7a:	13 86       	std	Z+11, r1	; 0x0b
    3b7c:	16 86       	std	Z+14, r1	; 0x0e
    3b7e:	15 86       	std	Z+13, r1	; 0x0d
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	84 8b       	std	Z+20, r24	; 0x14
    3b84:	83 8b       	std	Z+19, r24	; 0x13
    3b86:	2f ef       	ldi	r18, 0xFF	; 255
    3b88:	3f ef       	ldi	r19, 0xFF	; 255
    3b8a:	32 8b       	std	Z+18, r19	; 0x12
    3b8c:	21 8b       	std	Z+17, r18	; 0x11
    3b8e:	30 8b       	std	Z+16, r19	; 0x10
    3b90:	27 87       	std	Z+15, r18	; 0x0f
    3b92:	86 8b       	std	Z+22, r24	; 0x16
    3b94:	17 8a       	std	Z+23, r1	; 0x17
    3b96:	11 8e       	std	Z+25, r1	; 0x19
    3b98:	10 8e       	std	Z+24, r1	; 0x18
    3b9a:	08 95       	ret

00003b9c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    3b9c:	2f 92       	push	r2
    3b9e:	3f 92       	push	r3
    3ba0:	4f 92       	push	r4
    3ba2:	5f 92       	push	r5
    3ba4:	6f 92       	push	r6
    3ba6:	7f 92       	push	r7
    3ba8:	8f 92       	push	r8
    3baa:	9f 92       	push	r9
    3bac:	af 92       	push	r10
    3bae:	bf 92       	push	r11
    3bb0:	cf 92       	push	r12
    3bb2:	df 92       	push	r13
    3bb4:	ef 92       	push	r14
    3bb6:	ff 92       	push	r15
    3bb8:	0f 93       	push	r16
    3bba:	1f 93       	push	r17
    3bbc:	cf 93       	push	r28
    3bbe:	df 93       	push	r29
    3bc0:	cd b7       	in	r28, 0x3d	; 61
    3bc2:	de b7       	in	r29, 0x3e	; 62
    3bc4:	2e 97       	sbiw	r28, 0x0e	; 14
    3bc6:	0f b6       	in	r0, 0x3f	; 63
    3bc8:	f8 94       	cli
    3bca:	de bf       	out	0x3e, r29	; 62
    3bcc:	0f be       	out	0x3f, r0	; 63
    3bce:	cd bf       	out	0x3d, r28	; 61
    3bd0:	5c 01       	movw	r10, r24
    3bd2:	2b 01       	movw	r4, r22
    3bd4:	5c 83       	std	Y+4, r21	; 0x04
    3bd6:	4b 83       	std	Y+3, r20	; 0x03
    3bd8:	3e 87       	std	Y+14, r19	; 0x0e
    3bda:	2d 87       	std	Y+13, r18	; 0x0d
    3bdc:	fe 82       	std	Y+6, r15	; 0x06
    3bde:	ed 82       	std	Y+5, r14	; 0x05
    3be0:	16 01       	movw	r2, r12
    3be2:	81 e0       	ldi	r24, 0x01	; 1
    3be4:	90 e0       	ldi	r25, 0x00	; 0
    3be6:	4c 01       	movw	r8, r24
    3be8:	82 1a       	sub	r8, r18
    3bea:	93 0a       	sbc	r9, r19
    3bec:	c9 01       	movw	r24, r18
    3bee:	91 95       	neg	r25
    3bf0:	81 95       	neg	r24
    3bf2:	91 09       	sbc	r25, r1
    3bf4:	9c 01       	movw	r18, r24
    3bf6:	22 0f       	add	r18, r18
    3bf8:	33 1f       	adc	r19, r19
    3bfa:	3a 83       	std	Y+2, r19	; 0x02
    3bfc:	29 83       	std	Y+1, r18	; 0x01
    3bfe:	c7 01       	movw	r24, r14
    3c00:	01 96       	adiw	r24, 0x01	; 1
    3c02:	98 87       	std	Y+8, r25	; 0x08
    3c04:	8f 83       	std	Y+7, r24	; 0x07
    3c06:	f1 2c       	mov	r15, r1
    3c08:	e1 2c       	mov	r14, r1
    3c0a:	66 24       	eor	r6, r6
    3c0c:	63 94       	inc	r6
    3c0e:	71 2c       	mov	r7, r1
    3c10:	90 2f       	mov	r25, r16
    3c12:	91 70       	andi	r25, 0x01	; 1
    3c14:	99 87       	std	Y+9, r25	; 0x09
    3c16:	02 70       	andi	r16, 0x02	; 2
    3c18:	0a 87       	std	Y+10, r16	; 0x0a
    3c1a:	da 01       	movw	r26, r20
    3c1c:	11 96       	adiw	r26, 0x01	; 1
    3c1e:	bc 87       	std	Y+12, r27	; 0x0c
    3c20:	ab 87       	std	Y+11, r26	; 0x0b
    3c22:	2d 85       	ldd	r18, Y+13	; 0x0d
    3c24:	3e 85       	ldd	r19, Y+14	; 0x0e
    3c26:	e2 16       	cp	r14, r18
    3c28:	f3 06       	cpc	r15, r19
    3c2a:	0c f0       	brlt	.+2      	; 0x3c2e <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    3c2c:	8d c0       	rjmp	.+282    	; 0x3d48 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    3c2e:	cd 84       	ldd	r12, Y+13	; 0x0d
    3c30:	de 84       	ldd	r13, Y+14	; 0x0e
    3c32:	97 fc       	sbrc	r9, 7
    3c34:	0b c0       	rjmp	.+22     	; 0x3c4c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    3c36:	69 01       	movw	r12, r18
    3c38:	31 e0       	ldi	r19, 0x01	; 1
    3c3a:	c3 1a       	sub	r12, r19
    3c3c:	d1 08       	sbc	r13, r1
    3c3e:	89 81       	ldd	r24, Y+1	; 0x01
    3c40:	9a 81       	ldd	r25, Y+2	; 0x02
    3c42:	02 96       	adiw	r24, 0x02	; 2
    3c44:	9a 83       	std	Y+2, r25	; 0x02
    3c46:	89 83       	std	Y+1, r24	; 0x01
    3c48:	88 0e       	add	r8, r24
    3c4a:	99 1e       	adc	r9, r25
    3c4c:	9f ef       	ldi	r25, 0xFF	; 255
    3c4e:	e9 1a       	sub	r14, r25
    3c50:	f9 0a       	sbc	r15, r25
    3c52:	a2 e0       	ldi	r26, 0x02	; 2
    3c54:	6a 0e       	add	r6, r26
    3c56:	71 1c       	adc	r7, r1
    3c58:	86 0c       	add	r8, r6
    3c5a:	97 1c       	adc	r9, r7
    3c5c:	ce 14       	cp	r12, r14
    3c5e:	df 04       	cpc	r13, r15
    3c60:	a4 f1       	brlt	.+104    	; 0x3cca <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    3c62:	b9 85       	ldd	r27, Y+9	; 0x09
    3c64:	bb 23       	and	r27, r27
    3c66:	b9 f0       	breq	.+46     	; 0x3c96 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    3c68:	96 01       	movw	r18, r12
    3c6a:	22 0f       	add	r18, r18
    3c6c:	33 1f       	adc	r19, r19
    3c6e:	8f 81       	ldd	r24, Y+7	; 0x07
    3c70:	98 85       	ldd	r25, Y+8	; 0x08
    3c72:	28 0f       	add	r18, r24
    3c74:	39 1f       	adc	r19, r25
    3c76:	d5 01       	movw	r26, r10
    3c78:	ed 91       	ld	r30, X+
    3c7a:	fc 91       	ld	r31, X
    3c7c:	00 88       	ldd	r0, Z+16	; 0x10
    3c7e:	f1 89       	ldd	r31, Z+17	; 0x11
    3c80:	e0 2d       	mov	r30, r0
    3c82:	81 01       	movw	r16, r2
    3c84:	4b 81       	ldd	r20, Y+3	; 0x03
    3c86:	5c 81       	ldd	r21, Y+4	; 0x04
    3c88:	4c 19       	sub	r20, r12
    3c8a:	5d 09       	sbc	r21, r13
    3c8c:	b2 01       	movw	r22, r4
    3c8e:	6e 0d       	add	r22, r14
    3c90:	7f 1d       	adc	r23, r15
    3c92:	c5 01       	movw	r24, r10
    3c94:	09 95       	icall
    3c96:	ba 85       	ldd	r27, Y+10	; 0x0a
    3c98:	bb 23       	and	r27, r27
    3c9a:	b9 f0       	breq	.+46     	; 0x3cca <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    3c9c:	96 01       	movw	r18, r12
    3c9e:	22 0f       	add	r18, r18
    3ca0:	33 1f       	adc	r19, r19
    3ca2:	8f 81       	ldd	r24, Y+7	; 0x07
    3ca4:	98 85       	ldd	r25, Y+8	; 0x08
    3ca6:	28 0f       	add	r18, r24
    3ca8:	39 1f       	adc	r19, r25
    3caa:	d5 01       	movw	r26, r10
    3cac:	ed 91       	ld	r30, X+
    3cae:	fc 91       	ld	r31, X
    3cb0:	00 88       	ldd	r0, Z+16	; 0x10
    3cb2:	f1 89       	ldd	r31, Z+17	; 0x11
    3cb4:	e0 2d       	mov	r30, r0
    3cb6:	81 01       	movw	r16, r2
    3cb8:	4b 81       	ldd	r20, Y+3	; 0x03
    3cba:	5c 81       	ldd	r21, Y+4	; 0x04
    3cbc:	4c 19       	sub	r20, r12
    3cbe:	5d 09       	sbc	r21, r13
    3cc0:	b2 01       	movw	r22, r4
    3cc2:	6e 19       	sub	r22, r14
    3cc4:	7f 09       	sbc	r23, r15
    3cc6:	c5 01       	movw	r24, r10
    3cc8:	09 95       	icall
    3cca:	2d 85       	ldd	r18, Y+13	; 0x0d
    3ccc:	3e 85       	ldd	r19, Y+14	; 0x0e
    3cce:	2c 15       	cp	r18, r12
    3cd0:	3d 05       	cpc	r19, r13
    3cd2:	b9 f1       	breq	.+110    	; 0x3d42 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    3cd4:	39 85       	ldd	r19, Y+9	; 0x09
    3cd6:	33 23       	and	r19, r19
    3cd8:	c1 f0       	breq	.+48     	; 0x3d0a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    3cda:	93 01       	movw	r18, r6
    3cdc:	22 50       	subi	r18, 0x02	; 2
    3cde:	31 09       	sbc	r19, r1
    3ce0:	8d 81       	ldd	r24, Y+5	; 0x05
    3ce2:	9e 81       	ldd	r25, Y+6	; 0x06
    3ce4:	28 0f       	add	r18, r24
    3ce6:	39 1f       	adc	r19, r25
    3ce8:	d5 01       	movw	r26, r10
    3cea:	ed 91       	ld	r30, X+
    3cec:	fc 91       	ld	r31, X
    3cee:	00 88       	ldd	r0, Z+16	; 0x10
    3cf0:	f1 89       	ldd	r31, Z+17	; 0x11
    3cf2:	e0 2d       	mov	r30, r0
    3cf4:	81 01       	movw	r16, r2
    3cf6:	4b 85       	ldd	r20, Y+11	; 0x0b
    3cf8:	5c 85       	ldd	r21, Y+12	; 0x0c
    3cfa:	4e 19       	sub	r20, r14
    3cfc:	5f 09       	sbc	r21, r15
    3cfe:	6d 85       	ldd	r22, Y+13	; 0x0d
    3d00:	7e 85       	ldd	r23, Y+14	; 0x0e
    3d02:	64 0d       	add	r22, r4
    3d04:	75 1d       	adc	r23, r5
    3d06:	c5 01       	movw	r24, r10
    3d08:	09 95       	icall
    3d0a:	ba 85       	ldd	r27, Y+10	; 0x0a
    3d0c:	bb 23       	and	r27, r27
    3d0e:	c9 f0       	breq	.+50     	; 0x3d42 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    3d10:	93 01       	movw	r18, r6
    3d12:	22 50       	subi	r18, 0x02	; 2
    3d14:	31 09       	sbc	r19, r1
    3d16:	8d 81       	ldd	r24, Y+5	; 0x05
    3d18:	9e 81       	ldd	r25, Y+6	; 0x06
    3d1a:	28 0f       	add	r18, r24
    3d1c:	39 1f       	adc	r19, r25
    3d1e:	b2 01       	movw	r22, r4
    3d20:	ad 85       	ldd	r26, Y+13	; 0x0d
    3d22:	be 85       	ldd	r27, Y+14	; 0x0e
    3d24:	6a 1b       	sub	r22, r26
    3d26:	7b 0b       	sbc	r23, r27
    3d28:	d5 01       	movw	r26, r10
    3d2a:	ed 91       	ld	r30, X+
    3d2c:	fc 91       	ld	r31, X
    3d2e:	00 88       	ldd	r0, Z+16	; 0x10
    3d30:	f1 89       	ldd	r31, Z+17	; 0x11
    3d32:	e0 2d       	mov	r30, r0
    3d34:	81 01       	movw	r16, r2
    3d36:	4b 85       	ldd	r20, Y+11	; 0x0b
    3d38:	5c 85       	ldd	r21, Y+12	; 0x0c
    3d3a:	4e 19       	sub	r20, r14
    3d3c:	5f 09       	sbc	r21, r15
    3d3e:	c5 01       	movw	r24, r10
    3d40:	09 95       	icall
    3d42:	de 86       	std	Y+14, r13	; 0x0e
    3d44:	cd 86       	std	Y+13, r12	; 0x0d
    3d46:	6d cf       	rjmp	.-294    	; 0x3c22 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    3d48:	2e 96       	adiw	r28, 0x0e	; 14
    3d4a:	0f b6       	in	r0, 0x3f	; 63
    3d4c:	f8 94       	cli
    3d4e:	de bf       	out	0x3e, r29	; 62
    3d50:	0f be       	out	0x3f, r0	; 63
    3d52:	cd bf       	out	0x3d, r28	; 61
    3d54:	df 91       	pop	r29
    3d56:	cf 91       	pop	r28
    3d58:	1f 91       	pop	r17
    3d5a:	0f 91       	pop	r16
    3d5c:	ff 90       	pop	r15
    3d5e:	ef 90       	pop	r14
    3d60:	df 90       	pop	r13
    3d62:	cf 90       	pop	r12
    3d64:	bf 90       	pop	r11
    3d66:	af 90       	pop	r10
    3d68:	9f 90       	pop	r9
    3d6a:	8f 90       	pop	r8
    3d6c:	7f 90       	pop	r7
    3d6e:	6f 90       	pop	r6
    3d70:	5f 90       	pop	r5
    3d72:	4f 90       	pop	r4
    3d74:	3f 90       	pop	r3
    3d76:	2f 90       	pop	r2
    3d78:	08 95       	ret

00003d7a <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    3d7a:	6f 92       	push	r6
    3d7c:	7f 92       	push	r7
    3d7e:	8f 92       	push	r8
    3d80:	9f 92       	push	r9
    3d82:	af 92       	push	r10
    3d84:	bf 92       	push	r11
    3d86:	cf 92       	push	r12
    3d88:	df 92       	push	r13
    3d8a:	ef 92       	push	r14
    3d8c:	ff 92       	push	r15
    3d8e:	0f 93       	push	r16
    3d90:	1f 93       	push	r17
    3d92:	cf 93       	push	r28
    3d94:	df 93       	push	r29
    3d96:	ec 01       	movw	r28, r24
    3d98:	4b 01       	movw	r8, r22
    3d9a:	3a 01       	movw	r6, r20
    3d9c:	59 01       	movw	r10, r18
    3d9e:	68 01       	movw	r12, r16
    3da0:	e8 81       	ld	r30, Y
    3da2:	f9 81       	ldd	r31, Y+1	; 0x01
    3da4:	02 84       	ldd	r0, Z+10	; 0x0a
    3da6:	f3 85       	ldd	r31, Z+11	; 0x0b
    3da8:	e0 2d       	mov	r30, r0
    3daa:	09 95       	icall
    3dac:	95 01       	movw	r18, r10
    3dae:	22 0f       	add	r18, r18
    3db0:	33 1f       	adc	r19, r19
    3db2:	2f 5f       	subi	r18, 0xFF	; 255
    3db4:	3f 4f       	sbci	r19, 0xFF	; 255
    3db6:	a3 01       	movw	r20, r6
    3db8:	4a 19       	sub	r20, r10
    3dba:	5b 09       	sbc	r21, r11
    3dbc:	e8 81       	ld	r30, Y
    3dbe:	f9 81       	ldd	r31, Y+1	; 0x01
    3dc0:	00 88       	ldd	r0, Z+16	; 0x10
    3dc2:	f1 89       	ldd	r31, Z+17	; 0x11
    3dc4:	e0 2d       	mov	r30, r0
    3dc6:	b4 01       	movw	r22, r8
    3dc8:	ce 01       	movw	r24, r28
    3dca:	09 95       	icall
    3dcc:	f1 2c       	mov	r15, r1
    3dce:	e1 2c       	mov	r14, r1
    3dd0:	03 e0       	ldi	r16, 0x03	; 3
    3dd2:	95 01       	movw	r18, r10
    3dd4:	a3 01       	movw	r20, r6
    3dd6:	b4 01       	movw	r22, r8
    3dd8:	ce 01       	movw	r24, r28
    3dda:	e0 de       	rcall	.-576    	; 0x3b9c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    3ddc:	e8 81       	ld	r30, Y
    3dde:	f9 81       	ldd	r31, Y+1	; 0x01
    3de0:	06 88       	ldd	r0, Z+22	; 0x16
    3de2:	f7 89       	ldd	r31, Z+23	; 0x17
    3de4:	e0 2d       	mov	r30, r0
    3de6:	ce 01       	movw	r24, r28
    3de8:	df 91       	pop	r29
    3dea:	cf 91       	pop	r28
    3dec:	1f 91       	pop	r17
    3dee:	0f 91       	pop	r16
    3df0:	ff 90       	pop	r15
    3df2:	ef 90       	pop	r14
    3df4:	df 90       	pop	r13
    3df6:	cf 90       	pop	r12
    3df8:	bf 90       	pop	r11
    3dfa:	af 90       	pop	r10
    3dfc:	9f 90       	pop	r9
    3dfe:	8f 90       	pop	r8
    3e00:	7f 90       	pop	r7
    3e02:	6f 90       	pop	r6
    3e04:	09 94       	ijmp

00003e06 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    3e06:	2f 92       	push	r2
    3e08:	3f 92       	push	r3
    3e0a:	4f 92       	push	r4
    3e0c:	5f 92       	push	r5
    3e0e:	6f 92       	push	r6
    3e10:	7f 92       	push	r7
    3e12:	8f 92       	push	r8
    3e14:	9f 92       	push	r9
    3e16:	af 92       	push	r10
    3e18:	bf 92       	push	r11
    3e1a:	cf 92       	push	r12
    3e1c:	df 92       	push	r13
    3e1e:	ef 92       	push	r14
    3e20:	ff 92       	push	r15
    3e22:	0f 93       	push	r16
    3e24:	1f 93       	push	r17
    3e26:	cf 93       	push	r28
    3e28:	df 93       	push	r29
    3e2a:	cd b7       	in	r28, 0x3d	; 61
    3e2c:	de b7       	in	r29, 0x3e	; 62
    3e2e:	6a 97       	sbiw	r28, 0x1a	; 26
    3e30:	0f b6       	in	r0, 0x3f	; 63
    3e32:	f8 94       	cli
    3e34:	de bf       	out	0x3e, r29	; 62
    3e36:	0f be       	out	0x3f, r0	; 63
    3e38:	cd bf       	out	0x3d, r28	; 61
    3e3a:	9a 8f       	std	Y+26, r25	; 0x1a
    3e3c:	89 8f       	std	Y+25, r24	; 0x19
    3e3e:	7a 83       	std	Y+2, r23	; 0x02
    3e40:	69 83       	std	Y+1, r22	; 0x01
    3e42:	4a 01       	movw	r8, r20
    3e44:	d2 2e       	mov	r13, r18
    3e46:	18 87       	std	Y+8, r17	; 0x08
    3e48:	0f 83       	std	Y+7, r16	; 0x07
    3e4a:	37 01       	movw	r6, r14
    3e4c:	bc 2c       	mov	r11, r12
    3e4e:	dc 01       	movw	r26, r24
    3e50:	58 96       	adiw	r26, 0x18	; 24
    3e52:	2d 91       	ld	r18, X+
    3e54:	3c 91       	ld	r19, X
    3e56:	59 97       	sbiw	r26, 0x19	; 25
    3e58:	21 15       	cp	r18, r1
    3e5a:	31 05       	cpc	r19, r1
    3e5c:	09 f0       	breq	.+2      	; 0x3e60 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    3e5e:	15 c1       	rjmp	.+554    	; 0x408a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    3e60:	17 96       	adiw	r26, 0x07	; 7
    3e62:	8d 91       	ld	r24, X+
    3e64:	9c 91       	ld	r25, X
    3e66:	18 97       	sbiw	r26, 0x08	; 8
    3e68:	68 17       	cp	r22, r24
    3e6a:	79 07       	cpc	r23, r25
    3e6c:	0c f0       	brlt	.+2      	; 0x3e70 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    3e6e:	d7 c1       	rjmp	.+942    	; 0x421e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3e70:	19 96       	adiw	r26, 0x09	; 9
    3e72:	8d 91       	ld	r24, X+
    3e74:	9c 91       	ld	r25, X
    3e76:	48 17       	cp	r20, r24
    3e78:	59 07       	cpc	r21, r25
    3e7a:	0c f0       	brlt	.+2      	; 0x3e7e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    3e7c:	d0 c1       	rjmp	.+928    	; 0x421e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3e7e:	4c 2c       	mov	r4, r12
    3e80:	51 2c       	mov	r5, r1
    3e82:	b6 e0       	ldi	r27, 0x06	; 6
    3e84:	cb 9e       	mul	r12, r27
    3e86:	60 0d       	add	r22, r0
    3e88:	71 1d       	adc	r23, r1
    3e8a:	11 24       	eor	r1, r1
    3e8c:	7c 87       	std	Y+12, r23	; 0x0c
    3e8e:	6b 87       	std	Y+11, r22	; 0x0b
    3e90:	16 16       	cp	r1, r22
    3e92:	17 06       	cpc	r1, r23
    3e94:	0c f0       	brlt	.+2      	; 0x3e98 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    3e96:	c3 c1       	rjmp	.+902    	; 0x421e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3e98:	ea 2d       	mov	r30, r10
    3e9a:	f0 e0       	ldi	r31, 0x00	; 0
    3e9c:	fa 87       	std	Y+10, r31	; 0x0a
    3e9e:	e9 87       	std	Y+9, r30	; 0x09
    3ea0:	93 e0       	ldi	r25, 0x03	; 3
    3ea2:	ee 0f       	add	r30, r30
    3ea4:	ff 1f       	adc	r31, r31
    3ea6:	9a 95       	dec	r25
    3ea8:	e1 f7       	brne	.-8      	; 0x3ea2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    3eaa:	f8 8b       	std	Y+16, r31	; 0x10
    3eac:	ef 87       	std	Y+15, r30	; 0x0f
    3eae:	cf 01       	movw	r24, r30
    3eb0:	84 0f       	add	r24, r20
    3eb2:	95 1f       	adc	r25, r21
    3eb4:	18 16       	cp	r1, r24
    3eb6:	19 06       	cpc	r1, r25
    3eb8:	0c f0       	brlt	.+2      	; 0x3ebc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    3eba:	b1 c1       	rjmp	.+866    	; 0x421e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3ebc:	a9 8d       	ldd	r26, Y+25	; 0x19
    3ebe:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3ec0:	57 96       	adiw	r26, 0x17	; 23
    3ec2:	8c 91       	ld	r24, X
    3ec4:	81 11       	cpse	r24, r1
    3ec6:	04 c0       	rjmp	.+8      	; 0x3ed0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    3ec8:	bf ea       	ldi	r27, 0xAF	; 175
    3eca:	bd 15       	cp	r27, r13
    3ecc:	08 f4       	brcc	.+2      	; 0x3ed0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    3ece:	d3 94       	inc	r13
    3ed0:	a9 8d       	ldd	r26, Y+25	; 0x19
    3ed2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3ed4:	ed 91       	ld	r30, X+
    3ed6:	fc 91       	ld	r31, X
    3ed8:	11 97       	sbiw	r26, 0x01	; 1
    3eda:	02 84       	ldd	r0, Z+10	; 0x0a
    3edc:	f3 85       	ldd	r31, Z+11	; 0x0b
    3ede:	e0 2d       	mov	r30, r0
    3ee0:	cd 01       	movw	r24, r26
    3ee2:	09 95       	icall
    3ee4:	b5 e0       	ldi	r27, 0x05	; 5
    3ee6:	db 9e       	mul	r13, r27
    3ee8:	c0 01       	movw	r24, r0
    3eea:	11 24       	eor	r1, r1
    3eec:	e9 81       	ldd	r30, Y+1	; 0x01
    3eee:	fa 81       	ldd	r31, Y+2	; 0x02
    3ef0:	fc 83       	std	Y+4, r31	; 0x04
    3ef2:	eb 83       	std	Y+3, r30	; 0x03
    3ef4:	31 2c       	mov	r3, r1
    3ef6:	21 2c       	mov	r2, r1
    3ef8:	9c 01       	movw	r18, r24
    3efa:	28 56       	subi	r18, 0x68	; 104
    3efc:	3f 4f       	sbci	r19, 0xFF	; 255
    3efe:	38 8f       	std	Y+24, r19	; 0x18
    3f00:	2f 8b       	std	Y+23, r18	; 0x17
    3f02:	4a 2d       	mov	r20, r10
    3f04:	50 e0       	ldi	r21, 0x00	; 0
    3f06:	5e 8b       	std	Y+22, r21	; 0x16
    3f08:	4d 8b       	std	Y+21, r20	; 0x15
    3f0a:	ef 89       	ldd	r30, Y+23	; 0x17
    3f0c:	f8 8d       	ldd	r31, Y+24	; 0x18
    3f0e:	e2 0d       	add	r30, r2
    3f10:	f3 1d       	adc	r31, r3
    3f12:	44 91       	lpm	r20, Z
    3f14:	9e 82       	std	Y+6, r9	; 0x06
    3f16:	8d 82       	std	Y+5, r8	; 0x05
    3f18:	d1 2c       	mov	r13, r1
    3f1a:	c1 2c       	mov	r12, r1
    3f1c:	69 81       	ldd	r22, Y+1	; 0x01
    3f1e:	7a 81       	ldd	r23, Y+2	; 0x02
    3f20:	62 0d       	add	r22, r2
    3f22:	73 1d       	adc	r23, r3
    3f24:	7a 8b       	std	Y+18, r23	; 0x12
    3f26:	69 8b       	std	Y+17, r22	; 0x11
    3f28:	84 2f       	mov	r24, r20
    3f2a:	90 e0       	ldi	r25, 0x00	; 0
    3f2c:	9c 8b       	std	Y+20, r25	; 0x14
    3f2e:	8b 8b       	std	Y+19, r24	; 0x13
    3f30:	e9 8d       	ldd	r30, Y+25	; 0x19
    3f32:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3f34:	a0 81       	ld	r26, Z
    3f36:	b1 81       	ldd	r27, Z+1	; 0x01
    3f38:	40 ff       	sbrs	r20, 0
    3f3a:	82 c0       	rjmp	.+260    	; 0x4040 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    3f3c:	f1 e0       	ldi	r31, 0x01	; 1
    3f3e:	bf 12       	cpse	r11, r31
    3f40:	6f c0       	rjmp	.+222    	; 0x4020 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    3f42:	af 12       	cpse	r10, r31
    3f44:	6d c0       	rjmp	.+218    	; 0x4020 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    3f46:	1c 96       	adiw	r26, 0x0c	; 12
    3f48:	ed 91       	ld	r30, X+
    3f4a:	fc 91       	ld	r31, X
    3f4c:	2f 81       	ldd	r18, Y+7	; 0x07
    3f4e:	38 85       	ldd	r19, Y+8	; 0x08
    3f50:	a4 01       	movw	r20, r8
    3f52:	4c 0d       	add	r20, r12
    3f54:	5d 1d       	adc	r21, r13
    3f56:	69 89       	ldd	r22, Y+17	; 0x11
    3f58:	7a 89       	ldd	r23, Y+18	; 0x12
    3f5a:	89 8d       	ldd	r24, Y+25	; 0x19
    3f5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f5e:	09 95       	icall
    3f60:	eb 89       	ldd	r30, Y+19	; 0x13
    3f62:	fc 89       	ldd	r31, Y+20	; 0x14
    3f64:	f5 95       	asr	r31
    3f66:	e7 95       	ror	r30
    3f68:	4e 2f       	mov	r20, r30
    3f6a:	5f ef       	ldi	r21, 0xFF	; 255
    3f6c:	c5 1a       	sub	r12, r21
    3f6e:	d5 0a       	sbc	r13, r21
    3f70:	6d 81       	ldd	r22, Y+5	; 0x05
    3f72:	7e 81       	ldd	r23, Y+6	; 0x06
    3f74:	8d 89       	ldd	r24, Y+21	; 0x15
    3f76:	9e 89       	ldd	r25, Y+22	; 0x16
    3f78:	68 0f       	add	r22, r24
    3f7a:	79 1f       	adc	r23, r25
    3f7c:	7e 83       	std	Y+6, r23	; 0x06
    3f7e:	6d 83       	std	Y+5, r22	; 0x05
    3f80:	98 e0       	ldi	r25, 0x08	; 8
    3f82:	c9 16       	cp	r12, r25
    3f84:	d1 04       	cpc	r13, r1
    3f86:	81 f6       	brne	.-96     	; 0x3f28 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    3f88:	af ef       	ldi	r26, 0xFF	; 255
    3f8a:	2a 1a       	sub	r2, r26
    3f8c:	3a 0a       	sbc	r3, r26
    3f8e:	eb 81       	ldd	r30, Y+3	; 0x03
    3f90:	fc 81       	ldd	r31, Y+4	; 0x04
    3f92:	e4 0d       	add	r30, r4
    3f94:	f5 1d       	adc	r31, r5
    3f96:	fc 83       	std	Y+4, r31	; 0x04
    3f98:	eb 83       	std	Y+3, r30	; 0x03
    3f9a:	f5 e0       	ldi	r31, 0x05	; 5
    3f9c:	2f 16       	cp	r2, r31
    3f9e:	31 04       	cpc	r3, r1
    3fa0:	09 f0       	breq	.+2      	; 0x3fa4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    3fa2:	b3 cf       	rjmp	.-154    	; 0x3f0a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    3fa4:	2f 81       	ldd	r18, Y+7	; 0x07
    3fa6:	38 85       	ldd	r19, Y+8	; 0x08
    3fa8:	26 15       	cp	r18, r6
    3faa:	37 05       	cpc	r19, r7
    3fac:	b9 f0       	breq	.+46     	; 0x3fdc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    3fae:	a9 8d       	ldd	r26, Y+25	; 0x19
    3fb0:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3fb2:	ed 91       	ld	r30, X+
    3fb4:	fc 91       	ld	r31, X
    3fb6:	b1 e0       	ldi	r27, 0x01	; 1
    3fb8:	bb 12       	cpse	r11, r27
    3fba:	57 c0       	rjmp	.+174    	; 0x406a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    3fbc:	ab 12       	cpse	r10, r27
    3fbe:	55 c0       	rjmp	.+170    	; 0x406a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    3fc0:	69 81       	ldd	r22, Y+1	; 0x01
    3fc2:	7a 81       	ldd	r23, Y+2	; 0x02
    3fc4:	6b 5f       	subi	r22, 0xFB	; 251
    3fc6:	7f 4f       	sbci	r23, 0xFF	; 255
    3fc8:	00 88       	ldd	r0, Z+16	; 0x10
    3fca:	f1 89       	ldd	r31, Z+17	; 0x11
    3fcc:	e0 2d       	mov	r30, r0
    3fce:	83 01       	movw	r16, r6
    3fd0:	28 e0       	ldi	r18, 0x08	; 8
    3fd2:	30 e0       	ldi	r19, 0x00	; 0
    3fd4:	a4 01       	movw	r20, r8
    3fd6:	89 8d       	ldd	r24, Y+25	; 0x19
    3fd8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3fda:	09 95       	icall
    3fdc:	a9 8d       	ldd	r26, Y+25	; 0x19
    3fde:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3fe0:	ed 91       	ld	r30, X+
    3fe2:	fc 91       	ld	r31, X
    3fe4:	11 97       	sbiw	r26, 0x01	; 1
    3fe6:	06 88       	ldd	r0, Z+22	; 0x16
    3fe8:	f7 89       	ldd	r31, Z+23	; 0x17
    3fea:	e0 2d       	mov	r30, r0
    3fec:	cd 01       	movw	r24, r26
    3fee:	6a 96       	adiw	r28, 0x1a	; 26
    3ff0:	0f b6       	in	r0, 0x3f	; 63
    3ff2:	f8 94       	cli
    3ff4:	de bf       	out	0x3e, r29	; 62
    3ff6:	0f be       	out	0x3f, r0	; 63
    3ff8:	cd bf       	out	0x3d, r28	; 61
    3ffa:	df 91       	pop	r29
    3ffc:	cf 91       	pop	r28
    3ffe:	1f 91       	pop	r17
    4000:	0f 91       	pop	r16
    4002:	ff 90       	pop	r15
    4004:	ef 90       	pop	r14
    4006:	df 90       	pop	r13
    4008:	cf 90       	pop	r12
    400a:	bf 90       	pop	r11
    400c:	af 90       	pop	r10
    400e:	9f 90       	pop	r9
    4010:	8f 90       	pop	r8
    4012:	7f 90       	pop	r7
    4014:	6f 90       	pop	r6
    4016:	5f 90       	pop	r5
    4018:	4f 90       	pop	r4
    401a:	3f 90       	pop	r3
    401c:	2f 90       	pop	r2
    401e:	09 94       	ijmp
    4020:	1e 96       	adiw	r26, 0x0e	; 14
    4022:	ed 91       	ld	r30, X+
    4024:	fc 91       	ld	r31, X
    4026:	ef 80       	ldd	r14, Y+7	; 0x07
    4028:	f8 84       	ldd	r15, Y+8	; 0x08
    402a:	09 85       	ldd	r16, Y+9	; 0x09
    402c:	1a 85       	ldd	r17, Y+10	; 0x0a
    402e:	92 01       	movw	r18, r4
    4030:	4d 81       	ldd	r20, Y+5	; 0x05
    4032:	5e 81       	ldd	r21, Y+6	; 0x06
    4034:	6b 81       	ldd	r22, Y+3	; 0x03
    4036:	7c 81       	ldd	r23, Y+4	; 0x04
    4038:	89 8d       	ldd	r24, Y+25	; 0x19
    403a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    403c:	09 95       	icall
    403e:	90 cf       	rjmp	.-224    	; 0x3f60 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    4040:	2f 81       	ldd	r18, Y+7	; 0x07
    4042:	38 85       	ldd	r19, Y+8	; 0x08
    4044:	26 15       	cp	r18, r6
    4046:	37 05       	cpc	r19, r7
    4048:	09 f4       	brne	.+2      	; 0x404c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    404a:	8a cf       	rjmp	.-236    	; 0x3f60 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    404c:	31 e0       	ldi	r19, 0x01	; 1
    404e:	b3 12       	cpse	r11, r19
    4050:	07 c0       	rjmp	.+14     	; 0x4060 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    4052:	a3 12       	cpse	r10, r19
    4054:	05 c0       	rjmp	.+10     	; 0x4060 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    4056:	1c 96       	adiw	r26, 0x0c	; 12
    4058:	ed 91       	ld	r30, X+
    405a:	fc 91       	ld	r31, X
    405c:	93 01       	movw	r18, r6
    405e:	78 cf       	rjmp	.-272    	; 0x3f50 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    4060:	1e 96       	adiw	r26, 0x0e	; 14
    4062:	ed 91       	ld	r30, X+
    4064:	fc 91       	ld	r31, X
    4066:	73 01       	movw	r14, r6
    4068:	e0 cf       	rjmp	.-64     	; 0x402a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    406a:	6b 85       	ldd	r22, Y+11	; 0x0b
    406c:	7c 85       	ldd	r23, Y+12	; 0x0c
    406e:	64 19       	sub	r22, r4
    4070:	75 09       	sbc	r23, r5
    4072:	06 84       	ldd	r0, Z+14	; 0x0e
    4074:	f7 85       	ldd	r31, Z+15	; 0x0f
    4076:	e0 2d       	mov	r30, r0
    4078:	73 01       	movw	r14, r6
    407a:	0f 85       	ldd	r16, Y+15	; 0x0f
    407c:	18 89       	ldd	r17, Y+16	; 0x10
    407e:	92 01       	movw	r18, r4
    4080:	a4 01       	movw	r20, r8
    4082:	89 8d       	ldd	r24, Y+25	; 0x19
    4084:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4086:	09 95       	icall
    4088:	a9 cf       	rjmp	.-174    	; 0x3fdc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    408a:	f9 01       	movw	r30, r18
    408c:	34 96       	adiw	r30, 0x04	; 4
    408e:	94 91       	lpm	r25, Z
    4090:	32 97       	sbiw	r30, 0x02	; 2
    4092:	45 91       	lpm	r20, Z+
    4094:	54 91       	lpm	r21, Z
    4096:	d9 1a       	sub	r13, r25
    4098:	b7 e0       	ldi	r27, 0x07	; 7
    409a:	db 9e       	mul	r13, r27
    409c:	40 0d       	add	r20, r0
    409e:	51 1d       	adc	r21, r1
    40a0:	11 24       	eor	r1, r1
    40a2:	f9 01       	movw	r30, r18
    40a4:	25 91       	lpm	r18, Z+
    40a6:	34 91       	lpm	r19, Z
    40a8:	3c 8b       	std	Y+20, r19	; 0x14
    40aa:	2b 8b       	std	Y+19, r18	; 0x13
    40ac:	fa 01       	movw	r30, r20
    40ae:	25 90       	lpm	r2, Z+
    40b0:	34 90       	lpm	r3, Z
    40b2:	fa 01       	movw	r30, r20
    40b4:	32 96       	adiw	r30, 0x02	; 2
    40b6:	74 90       	lpm	r7, Z
    40b8:	31 96       	adiw	r30, 0x01	; 1
    40ba:	34 91       	lpm	r19, Z
    40bc:	39 8b       	std	Y+17, r19	; 0x11
    40be:	32 96       	adiw	r30, 0x02	; 2
    40c0:	64 90       	lpm	r6, Z
    40c2:	31 96       	adiw	r30, 0x01	; 1
    40c4:	44 90       	lpm	r4, Z
    40c6:	41 e0       	ldi	r20, 0x01	; 1
    40c8:	4c 15       	cp	r20, r12
    40ca:	18 f0       	brcs	.+6      	; 0x40d2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    40cc:	4a 15       	cp	r20, r10
    40ce:	08 f0       	brcs	.+2      	; 0x40d2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    40d0:	7f c0       	rjmp	.+254    	; 0x41d0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    40d2:	66 2d       	mov	r22, r6
    40d4:	06 2c       	mov	r0, r6
    40d6:	00 0c       	add	r0, r0
    40d8:	77 0b       	sbc	r23, r23
    40da:	7c 83       	std	Y+4, r23	; 0x04
    40dc:	6b 83       	std	Y+3, r22	; 0x03
    40de:	84 2d       	mov	r24, r4
    40e0:	04 2c       	mov	r0, r4
    40e2:	00 0c       	add	r0, r0
    40e4:	99 0b       	sbc	r25, r25
    40e6:	9e 83       	std	Y+6, r25	; 0x06
    40e8:	8d 83       	std	Y+5, r24	; 0x05
    40ea:	a9 8d       	ldd	r26, Y+25	; 0x19
    40ec:	ba 8d       	ldd	r27, Y+26	; 0x1a
    40ee:	ed 91       	ld	r30, X+
    40f0:	fc 91       	ld	r31, X
    40f2:	11 97       	sbiw	r26, 0x01	; 1
    40f4:	02 84       	ldd	r0, Z+10	; 0x0a
    40f6:	f3 85       	ldd	r31, Z+11	; 0x0b
    40f8:	e0 2d       	mov	r30, r0
    40fa:	cd 01       	movw	r24, r26
    40fc:	09 95       	icall
    40fe:	51 2c       	mov	r5, r1
    4100:	d1 2c       	mov	r13, r1
    4102:	c1 2c       	mov	r12, r1
    4104:	ea 2d       	mov	r30, r10
    4106:	f0 e0       	ldi	r31, 0x00	; 0
    4108:	fa 87       	std	Y+10, r31	; 0x0a
    410a:	e9 87       	std	Y+9, r30	; 0x09
    410c:	2b 2d       	mov	r18, r11
    410e:	30 e0       	ldi	r19, 0x00	; 0
    4110:	3c 87       	std	Y+12, r19	; 0x0c
    4112:	2b 87       	std	Y+11, r18	; 0x0b
    4114:	a4 01       	movw	r20, r8
    4116:	44 0d       	add	r20, r4
    4118:	51 1d       	adc	r21, r1
    411a:	47 fc       	sbrc	r4, 7
    411c:	5a 95       	dec	r21
    411e:	58 8f       	std	Y+24, r21	; 0x18
    4120:	4f 8b       	std	Y+23, r20	; 0x17
    4122:	69 81       	ldd	r22, Y+1	; 0x01
    4124:	7a 81       	ldd	r23, Y+2	; 0x02
    4126:	66 0d       	add	r22, r6
    4128:	71 1d       	adc	r23, r1
    412a:	67 fc       	sbrc	r6, 7
    412c:	7a 95       	dec	r23
    412e:	7e 87       	std	Y+14, r23	; 0x0e
    4130:	6d 87       	std	Y+13, r22	; 0x0d
    4132:	79 89       	ldd	r23, Y+17	; 0x11
    4134:	c7 16       	cp	r12, r23
    4136:	08 f0       	brcs	.+2      	; 0x413a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    4138:	51 cf       	rjmp	.-350    	; 0x3fdc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    413a:	2c 2d       	mov	r18, r12
    413c:	30 e0       	ldi	r19, 0x00	; 0
    413e:	4d 81       	ldd	r20, Y+5	; 0x05
    4140:	5e 81       	ldd	r21, Y+6	; 0x06
    4142:	42 0f       	add	r20, r18
    4144:	53 1f       	adc	r21, r19
    4146:	a9 85       	ldd	r26, Y+9	; 0x09
    4148:	ba 85       	ldd	r27, Y+10	; 0x0a
    414a:	4a 9f       	mul	r20, r26
    414c:	c0 01       	movw	r24, r0
    414e:	4b 9f       	mul	r20, r27
    4150:	90 0d       	add	r25, r0
    4152:	5a 9f       	mul	r21, r26
    4154:	90 0d       	add	r25, r0
    4156:	11 24       	eor	r1, r1
    4158:	fc 01       	movw	r30, r24
    415a:	e8 0d       	add	r30, r8
    415c:	f9 1d       	adc	r31, r9
    415e:	f8 8b       	std	Y+16, r31	; 0x10
    4160:	ef 87       	std	Y+15, r30	; 0x0f
    4162:	85 2d       	mov	r24, r5
    4164:	61 2c       	mov	r6, r1
    4166:	4f 89       	ldd	r20, Y+23	; 0x17
    4168:	58 8d       	ldd	r21, Y+24	; 0x18
    416a:	42 0f       	add	r20, r18
    416c:	53 1f       	adc	r21, r19
    416e:	5e 8b       	std	Y+22, r21	; 0x16
    4170:	4d 8b       	std	Y+21, r20	; 0x15
    4172:	67 14       	cp	r6, r7
    4174:	08 f0       	brcs	.+2      	; 0x4178 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    4176:	50 c0       	rjmp	.+160    	; 0x4218 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    4178:	44 24       	eor	r4, r4
    417a:	43 94       	inc	r4
    417c:	48 0e       	add	r4, r24
    417e:	87 70       	andi	r24, 0x07	; 7
    4180:	41 f4       	brne	.+16     	; 0x4192 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    4182:	c1 01       	movw	r24, r2
    4184:	01 96       	adiw	r24, 0x01	; 1
    4186:	eb 89       	ldd	r30, Y+19	; 0x13
    4188:	fc 89       	ldd	r31, Y+20	; 0x14
    418a:	e2 0d       	add	r30, r2
    418c:	f3 1d       	adc	r31, r3
    418e:	d4 90       	lpm	r13, Z
    4190:	1c 01       	movw	r2, r24
    4192:	d7 fe       	sbrs	r13, 7
    4194:	19 c0       	rjmp	.+50     	; 0x41c8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    4196:	a9 8d       	ldd	r26, Y+25	; 0x19
    4198:	ba 8d       	ldd	r27, Y+26	; 0x1a
    419a:	ed 91       	ld	r30, X+
    419c:	fc 91       	ld	r31, X
    419e:	66 2d       	mov	r22, r6
    41a0:	70 e0       	ldi	r23, 0x00	; 0
    41a2:	b1 e0       	ldi	r27, 0x01	; 1
    41a4:	bb 12       	cpse	r11, r27
    41a6:	19 c0       	rjmp	.+50     	; 0x41da <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    41a8:	ab 12       	cpse	r10, r27
    41aa:	17 c0       	rjmp	.+46     	; 0x41da <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    41ac:	2d 85       	ldd	r18, Y+13	; 0x0d
    41ae:	3e 85       	ldd	r19, Y+14	; 0x0e
    41b0:	62 0f       	add	r22, r18
    41b2:	73 1f       	adc	r23, r19
    41b4:	04 84       	ldd	r0, Z+12	; 0x0c
    41b6:	f5 85       	ldd	r31, Z+13	; 0x0d
    41b8:	e0 2d       	mov	r30, r0
    41ba:	2f 81       	ldd	r18, Y+7	; 0x07
    41bc:	38 85       	ldd	r19, Y+8	; 0x08
    41be:	4d 89       	ldd	r20, Y+21	; 0x15
    41c0:	5e 89       	ldd	r21, Y+22	; 0x16
    41c2:	89 8d       	ldd	r24, Y+25	; 0x19
    41c4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    41c6:	09 95       	icall
    41c8:	dd 0c       	add	r13, r13
    41ca:	63 94       	inc	r6
    41cc:	84 2d       	mov	r24, r4
    41ce:	d1 cf       	rjmp	.-94     	; 0x4172 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    41d0:	1e 82       	std	Y+6, r1	; 0x06
    41d2:	1d 82       	std	Y+5, r1	; 0x05
    41d4:	1c 82       	std	Y+4, r1	; 0x04
    41d6:	1b 82       	std	Y+3, r1	; 0x03
    41d8:	88 cf       	rjmp	.-240    	; 0x40ea <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    41da:	4b 81       	ldd	r20, Y+3	; 0x03
    41dc:	5c 81       	ldd	r21, Y+4	; 0x04
    41de:	64 0f       	add	r22, r20
    41e0:	75 1f       	adc	r23, r21
    41e2:	ab 85       	ldd	r26, Y+11	; 0x0b
    41e4:	bc 85       	ldd	r27, Y+12	; 0x0c
    41e6:	6a 9f       	mul	r22, r26
    41e8:	c0 01       	movw	r24, r0
    41ea:	6b 9f       	mul	r22, r27
    41ec:	90 0d       	add	r25, r0
    41ee:	7a 9f       	mul	r23, r26
    41f0:	90 0d       	add	r25, r0
    41f2:	11 24       	eor	r1, r1
    41f4:	69 81       	ldd	r22, Y+1	; 0x01
    41f6:	7a 81       	ldd	r23, Y+2	; 0x02
    41f8:	68 0f       	add	r22, r24
    41fa:	79 1f       	adc	r23, r25
    41fc:	06 84       	ldd	r0, Z+14	; 0x0e
    41fe:	f7 85       	ldd	r31, Z+15	; 0x0f
    4200:	e0 2d       	mov	r30, r0
    4202:	ef 80       	ldd	r14, Y+7	; 0x07
    4204:	f8 84       	ldd	r15, Y+8	; 0x08
    4206:	09 85       	ldd	r16, Y+9	; 0x09
    4208:	1a 85       	ldd	r17, Y+10	; 0x0a
    420a:	9d 01       	movw	r18, r26
    420c:	4f 85       	ldd	r20, Y+15	; 0x0f
    420e:	58 89       	ldd	r21, Y+16	; 0x10
    4210:	89 8d       	ldd	r24, Y+25	; 0x19
    4212:	9a 8d       	ldd	r25, Y+26	; 0x1a
    4214:	09 95       	icall
    4216:	d8 cf       	rjmp	.-80     	; 0x41c8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    4218:	57 0c       	add	r5, r7
    421a:	c3 94       	inc	r12
    421c:	8a cf       	rjmp	.-236    	; 0x4132 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    421e:	6a 96       	adiw	r28, 0x1a	; 26
    4220:	0f b6       	in	r0, 0x3f	; 63
    4222:	f8 94       	cli
    4224:	de bf       	out	0x3e, r29	; 62
    4226:	0f be       	out	0x3f, r0	; 63
    4228:	cd bf       	out	0x3d, r28	; 61
    422a:	df 91       	pop	r29
    422c:	cf 91       	pop	r28
    422e:	1f 91       	pop	r17
    4230:	0f 91       	pop	r16
    4232:	ff 90       	pop	r15
    4234:	ef 90       	pop	r14
    4236:	df 90       	pop	r13
    4238:	cf 90       	pop	r12
    423a:	bf 90       	pop	r11
    423c:	af 90       	pop	r10
    423e:	9f 90       	pop	r9
    4240:	8f 90       	pop	r8
    4242:	7f 90       	pop	r7
    4244:	6f 90       	pop	r6
    4246:	5f 90       	pop	r5
    4248:	4f 90       	pop	r4
    424a:	3f 90       	pop	r3
    424c:	2f 90       	pop	r2
    424e:	08 95       	ret

00004250 <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    4250:	8f 92       	push	r8
    4252:	9f 92       	push	r9
    4254:	af 92       	push	r10
    4256:	cf 92       	push	r12
    4258:	ef 92       	push	r14
    425a:	ff 92       	push	r15
    425c:	0f 93       	push	r16
    425e:	1f 93       	push	r17
    4260:	cf 93       	push	r28
    4262:	df 93       	push	r29
    4264:	ec 01       	movw	r28, r24
    4266:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    4268:	88 8d       	ldd	r24, Y+24	; 0x18
    426a:	99 8d       	ldd	r25, Y+25	; 0x19
    426c:	00 97       	sbiw	r24, 0x00	; 0
    426e:	09 f0       	breq	.+2      	; 0x4272 <Adafruit_GFX::write(unsigned char)+0x22>
    4270:	50 c0       	rjmp	.+160    	; 0x4312 <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    4272:	6a 30       	cpi	r22, 0x0A	; 10
    4274:	d1 f4       	brne	.+52     	; 0x42aa <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    4276:	1c 86       	std	Y+12, r1	; 0x0c
    4278:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    427a:	8c 89       	ldd	r24, Y+20	; 0x14
    427c:	48 e0       	ldi	r20, 0x08	; 8
    427e:	84 9f       	mul	r24, r20
    4280:	90 01       	movw	r18, r0
    4282:	11 24       	eor	r1, r1
    4284:	8d 85       	ldd	r24, Y+13	; 0x0d
    4286:	9e 85       	ldd	r25, Y+14	; 0x0e
    4288:	82 0f       	add	r24, r18
    428a:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    428c:	9e 87       	std	Y+14, r25	; 0x0e
    428e:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    4290:	81 e0       	ldi	r24, 0x01	; 1
    4292:	90 e0       	ldi	r25, 0x00	; 0
    4294:	df 91       	pop	r29
    4296:	cf 91       	pop	r28
    4298:	1f 91       	pop	r17
    429a:	0f 91       	pop	r16
    429c:	ff 90       	pop	r15
    429e:	ef 90       	pop	r14
    42a0:	cf 90       	pop	r12
    42a2:	af 90       	pop	r10
    42a4:	9f 90       	pop	r9
    42a6:	8f 90       	pop	r8
    42a8:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    42aa:	6d 30       	cpi	r22, 0x0D	; 13
    42ac:	89 f3       	breq	.-30     	; 0x4290 <Adafruit_GFX::write(unsigned char)+0x40>
    42ae:	cb 88       	ldd	r12, Y+19	; 0x13
    42b0:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    42b2:	8e 89       	ldd	r24, Y+22	; 0x16
    42b4:	88 23       	and	r24, r24
    42b6:	c1 f0       	breq	.+48     	; 0x42e8 <Adafruit_GFX::write(unsigned char)+0x98>
    42b8:	8b 85       	ldd	r24, Y+11	; 0x0b
    42ba:	9c 85       	ldd	r25, Y+12	; 0x0c
    42bc:	36 e0       	ldi	r19, 0x06	; 6
    42be:	c3 9e       	mul	r12, r19
    42c0:	80 0d       	add	r24, r0
    42c2:	91 1d       	adc	r25, r1
    42c4:	11 24       	eor	r1, r1
    42c6:	4f 81       	ldd	r20, Y+7	; 0x07
    42c8:	58 85       	ldd	r21, Y+8	; 0x08
    42ca:	48 17       	cp	r20, r24
    42cc:	59 07       	cpc	r21, r25
    42ce:	64 f4       	brge	.+24     	; 0x42e8 <Adafruit_GFX::write(unsigned char)+0x98>
    42d0:	4d 85       	ldd	r20, Y+13	; 0x0d
    42d2:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    42d4:	1c 86       	std	Y+12, r1	; 0x0c
    42d6:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    42d8:	38 e0       	ldi	r19, 0x08	; 8
    42da:	a3 9e       	mul	r10, r19
    42dc:	c0 01       	movw	r24, r0
    42de:	11 24       	eor	r1, r1
    42e0:	84 0f       	add	r24, r20
    42e2:	95 1f       	adc	r25, r21
    42e4:	9e 87       	std	Y+14, r25	; 0x0e
    42e6:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    42e8:	e9 88       	ldd	r14, Y+17	; 0x11
    42ea:	fa 88       	ldd	r15, Y+18	; 0x12
    42ec:	0f 85       	ldd	r16, Y+15	; 0x0f
    42ee:	18 89       	ldd	r17, Y+16	; 0x10
    42f0:	4d 85       	ldd	r20, Y+13	; 0x0d
    42f2:	5e 85       	ldd	r21, Y+14	; 0x0e
    42f4:	6b 85       	ldd	r22, Y+11	; 0x0b
    42f6:	7c 85       	ldd	r23, Y+12	; 0x0c
    42f8:	ce 01       	movw	r24, r28
    42fa:	85 dd       	rcall	.-1270   	; 0x3e06 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    42fc:	2b 89       	ldd	r18, Y+19	; 0x13
    42fe:	8b 85       	ldd	r24, Y+11	; 0x0b
    4300:	9c 85       	ldd	r25, Y+12	; 0x0c
    4302:	46 e0       	ldi	r20, 0x06	; 6
    4304:	24 9f       	mul	r18, r20
    4306:	80 0d       	add	r24, r0
    4308:	91 1d       	adc	r25, r1
    430a:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    430c:	9c 87       	std	Y+12, r25	; 0x0c
    430e:	8b 87       	std	Y+11, r24	; 0x0b
    4310:	bf cf       	rjmp	.-130    	; 0x4290 <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    4312:	6a 30       	cpi	r22, 0x0A	; 10
    4314:	69 f4       	brne	.+26     	; 0x4330 <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    4316:	1c 86       	std	Y+12, r1	; 0x0c
    4318:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    431a:	fc 01       	movw	r30, r24
    431c:	36 96       	adiw	r30, 0x06	; 6
    431e:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    4320:	2c 89       	ldd	r18, Y+20	; 0x14
    4322:	8d 85       	ldd	r24, Y+13	; 0x0d
    4324:	9e 85       	ldd	r25, Y+14	; 0x0e
    4326:	e2 9f       	mul	r30, r18
    4328:	80 0d       	add	r24, r0
    432a:	91 1d       	adc	r25, r1
    432c:	11 24       	eor	r1, r1
    432e:	ae cf       	rjmp	.-164    	; 0x428c <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    4330:	6d 30       	cpi	r22, 0x0D	; 13
    4332:	09 f4       	brne	.+2      	; 0x4336 <Adafruit_GFX::write(unsigned char)+0xe6>
    4334:	ad cf       	rjmp	.-166    	; 0x4290 <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    4336:	fc 01       	movw	r30, r24
    4338:	34 96       	adiw	r30, 0x04	; 4
    433a:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    433c:	63 17       	cp	r22, r19
    433e:	08 f4       	brcc	.+2      	; 0x4342 <Adafruit_GFX::write(unsigned char)+0xf2>
    4340:	a7 cf       	rjmp	.-178    	; 0x4290 <Adafruit_GFX::write(unsigned char)+0x40>
    4342:	31 96       	adiw	r30, 0x01	; 1
    4344:	e4 91       	lpm	r30, Z
    4346:	e6 17       	cp	r30, r22
    4348:	08 f4       	brcc	.+2      	; 0x434c <Adafruit_GFX::write(unsigned char)+0xfc>
    434a:	a2 cf       	rjmp	.-188    	; 0x4290 <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    434c:	fc 01       	movw	r30, r24
    434e:	32 96       	adiw	r30, 0x02	; 2
    4350:	85 90       	lpm	r8, Z+
    4352:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    4354:	46 2f       	mov	r20, r22
    4356:	43 1b       	sub	r20, r19
    4358:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    435a:	47 e0       	ldi	r20, 0x07	; 7
    435c:	34 9f       	mul	r19, r20
    435e:	80 0c       	add	r8, r0
    4360:	91 1c       	adc	r9, r1
    4362:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    4364:	f4 01       	movw	r30, r8
    4366:	32 96       	adiw	r30, 0x02	; 2
    4368:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    436a:	31 96       	adiw	r30, 0x01	; 1
    436c:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    436e:	33 23       	and	r19, r19
    4370:	a1 f1       	breq	.+104    	; 0x43da <Adafruit_GFX::write(unsigned char)+0x18a>
    4372:	ee 23       	and	r30, r30
    4374:	91 f1       	breq	.+100    	; 0x43da <Adafruit_GFX::write(unsigned char)+0x18a>
    4376:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    4378:	f4 01       	movw	r30, r8
    437a:	35 96       	adiw	r30, 0x05	; 5
    437c:	e4 91       	lpm	r30, Z
    437e:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    4380:	4e 89       	ldd	r20, Y+22	; 0x16
    4382:	44 23       	and	r20, r20
    4384:	01 f1       	breq	.+64     	; 0x43c6 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    4386:	0e 2e       	mov	r0, r30
    4388:	00 0c       	add	r0, r0
    438a:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    438c:	e3 0f       	add	r30, r19
    438e:	f1 1d       	adc	r31, r1
    4390:	ce 9e       	mul	r12, r30
    4392:	a0 01       	movw	r20, r0
    4394:	cf 9e       	mul	r12, r31
    4396:	50 0d       	add	r21, r0
    4398:	11 24       	eor	r1, r1
    439a:	6b 85       	ldd	r22, Y+11	; 0x0b
    439c:	7c 85       	ldd	r23, Y+12	; 0x0c
    439e:	46 0f       	add	r20, r22
    43a0:	57 1f       	adc	r21, r23
    43a2:	6f 81       	ldd	r22, Y+7	; 0x07
    43a4:	78 85       	ldd	r23, Y+8	; 0x08
    43a6:	64 17       	cp	r22, r20
    43a8:	75 07       	cpc	r23, r21
    43aa:	6c f4       	brge	.+26     	; 0x43c6 <Adafruit_GFX::write(unsigned char)+0x176>
    43ac:	4d 85       	ldd	r20, Y+13	; 0x0d
    43ae:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    43b0:	1c 86       	std	Y+12, r1	; 0x0c
    43b2:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    43b4:	fc 01       	movw	r30, r24
    43b6:	36 96       	adiw	r30, 0x06	; 6
    43b8:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    43ba:	ae 9e       	mul	r10, r30
    43bc:	40 0d       	add	r20, r0
    43be:	51 1d       	adc	r21, r1
    43c0:	11 24       	eor	r1, r1
    43c2:	5e 87       	std	Y+14, r21	; 0x0e
    43c4:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    43c6:	e9 88       	ldd	r14, Y+17	; 0x11
    43c8:	fa 88       	ldd	r15, Y+18	; 0x12
    43ca:	0f 85       	ldd	r16, Y+15	; 0x0f
    43cc:	18 89       	ldd	r17, Y+16	; 0x10
    43ce:	4d 85       	ldd	r20, Y+13	; 0x0d
    43d0:	5e 85       	ldd	r21, Y+14	; 0x0e
    43d2:	6b 85       	ldd	r22, Y+11	; 0x0b
    43d4:	7c 85       	ldd	r23, Y+12	; 0x0c
    43d6:	ce 01       	movw	r24, r28
    43d8:	16 dd       	rcall	.-1492   	; 0x3e06 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    43da:	f4 01       	movw	r30, r8
    43dc:	34 96       	adiw	r30, 0x04	; 4
    43de:	e4 91       	lpm	r30, Z
    43e0:	2b 89       	ldd	r18, Y+19	; 0x13
    43e2:	8b 85       	ldd	r24, Y+11	; 0x0b
    43e4:	9c 85       	ldd	r25, Y+12	; 0x0c
    43e6:	e2 9f       	mul	r30, r18
    43e8:	80 0d       	add	r24, r0
    43ea:	91 1d       	adc	r25, r1
    43ec:	11 24       	eor	r1, r1
    43ee:	8e cf       	rjmp	.-228    	; 0x430c <Adafruit_GFX::write(unsigned char)+0xbc>

000043f0 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    43f0:	61 11       	cpse	r22, r1
    43f2:	01 c0       	rjmp	.+2      	; 0x43f6 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    43f4:	61 e0       	ldi	r22, 0x01	; 1
    43f6:	fc 01       	movw	r30, r24
    43f8:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    43fa:	41 11       	cpse	r20, r1
    43fc:	01 c0       	rjmp	.+2      	; 0x4400 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    43fe:	41 e0       	ldi	r20, 0x01	; 1
    4400:	fc 01       	movw	r30, r24
    4402:	44 8b       	std	Z+20, r20	; 0x14
}
    4404:	08 95       	ret

00004406 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    4406:	46 2f       	mov	r20, r22
    4408:	f3 cf       	rjmp	.-26     	; 0x43f0 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

0000440a <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    440a:	ff 92       	push	r15
    440c:	0f 93       	push	r16
    440e:	1f 93       	push	r17
    4410:	cf 93       	push	r28
    4412:	df 93       	push	r29
    4414:	ec 01       	movw	r28, r24
    4416:	f0 2e       	mov	r15, r16
    4418:	10 e0       	ldi	r17, 0x00	; 0
    441a:	00 e0       	ldi	r16, 0x00	; 0
    441c:	20 d0       	rcall	.+64     	; 0x445e <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    441e:	8b e2       	ldi	r24, 0x2B	; 43
    4420:	97 e0       	ldi	r25, 0x07	; 7
    4422:	99 83       	std	Y+1, r25	; 0x01
    4424:	88 83       	st	Y, r24
    4426:	fe 01       	movw	r30, r28
    4428:	e6 5e       	subi	r30, 0xE6	; 230
    442a:	fe 4f       	sbci	r31, 0xFE	; 254
    442c:	f0 82       	st	Z, r15
    442e:	31 96       	adiw	r30, 0x01	; 1
    4430:	10 82       	st	Z, r1
    4432:	c4 5e       	subi	r28, 0xE4	; 228
    4434:	de 4f       	sbci	r29, 0xFE	; 254
    4436:	18 82       	st	Y, r1
    4438:	df 91       	pop	r29
    443a:	cf 91       	pop	r28
    443c:	1f 91       	pop	r17
    443e:	0f 91       	pop	r16
    4440:	ff 90       	pop	r15
    4442:	08 95       	ret

00004444 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    4444:	8d 5d       	subi	r24, 0xDD	; 221
    4446:	9e 4f       	sbci	r25, 0xFE	; 254
    4448:	dc 01       	movw	r26, r24
    444a:	ed 91       	ld	r30, X+
    444c:	fc 91       	ld	r31, X
    444e:	30 97       	sbiw	r30, 0x00	; 0
    4450:	09 f0       	breq	.+2      	; 0x4454 <FastLED_NeoMatrix::show()+0x10>
    4452:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    4454:	60 91 bf 0e 	lds	r22, 0x0EBF	; 0x800ebf <FastLED>
    4458:	8f eb       	ldi	r24, 0xBF	; 191
    445a:	9e e0       	ldi	r25, 0x0E	; 14
    445c:	cd c3       	rjmp	.+1946   	; 0x4bf8 <CFastLED::show(unsigned char)>

0000445e <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
  _fb[XY(x,y)] = color;
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
  drawPixel(x, y, CRGBtoint32(c));
}
    445e:	af 92       	push	r10
    4460:	bf 92       	push	r11
    4462:	cf 92       	push	r12
    4464:	df 92       	push	r13
    4466:	ef 92       	push	r14
    4468:	ff 92       	push	r15
    446a:	0f 93       	push	r16
    446c:	1f 93       	push	r17
    446e:	cf 93       	push	r28
    4470:	df 93       	push	r29
    4472:	ec 01       	movw	r28, r24
    4474:	5b 01       	movw	r10, r22
    4476:	7a 01       	movw	r14, r20
    4478:	69 01       	movw	r12, r18
    447a:	a9 01       	movw	r20, r18
    447c:	b7 01       	movw	r22, r14
    447e:	6d db       	rcall	.-2342   	; 0x3b5a <Adafruit_GFX::Adafruit_GFX(int, int)>
    4480:	8e e8       	ldi	r24, 0x8E	; 142
    4482:	97 e0       	ldi	r25, 0x07	; 7
    4484:	99 83       	std	Y+1, r25	; 0x01
    4486:	88 83       	st	Y, r24
    4488:	fe 01       	movw	r30, r28
    448a:	e3 5e       	subi	r30, 0xE3	; 227
    448c:	fe 4f       	sbci	r31, 0xFE	; 254
    448e:	f1 82       	std	Z+1, r15	; 0x01
    4490:	e0 82       	st	Z, r14
    4492:	32 96       	adiw	r30, 0x02	; 2
    4494:	d1 82       	std	Z+1, r13	; 0x01
    4496:	c0 82       	st	Z, r12
    4498:	32 96       	adiw	r30, 0x02	; 2
    449a:	80 e1       	ldi	r24, 0x10	; 16
    449c:	97 e2       	ldi	r25, 0x27	; 39
    449e:	91 83       	std	Z+1, r25	; 0x01
    44a0:	80 83       	st	Z, r24
    44a2:	36 96       	adiw	r30, 0x06	; 6
    44a4:	11 82       	std	Z+1, r1	; 0x01
    44a6:	10 82       	st	Z, r1
    44a8:	3a 96       	adiw	r30, 0x0a	; 10
    44aa:	10 82       	st	Z, r1
    44ac:	3c 97       	sbiw	r30, 0x0c	; 12
    44ae:	b1 82       	std	Z+1, r11	; 0x01
    44b0:	a0 82       	st	Z, r10
    44b2:	32 97       	sbiw	r30, 0x02	; 2
    44b4:	11 83       	std	Z+1, r17	; 0x01
    44b6:	00 83       	st	Z, r16
    44b8:	39 97       	sbiw	r30, 0x09	; 9
    44ba:	10 82       	st	Z, r1
    44bc:	31 96       	adiw	r30, 0x01	; 1
    44be:	10 82       	st	Z, r1
    44c0:	31 96       	adiw	r30, 0x01	; 1
    44c2:	10 82       	st	Z, r1
    44c4:	c7 5d       	subi	r28, 0xD7	; 215
    44c6:	de 4f       	sbci	r29, 0xFE	; 254
    44c8:	ce 9c       	mul	r12, r14
    44ca:	c0 01       	movw	r24, r0
    44cc:	cf 9c       	mul	r12, r15
    44ce:	90 0d       	add	r25, r0
    44d0:	de 9c       	mul	r13, r14
    44d2:	90 0d       	add	r25, r0
    44d4:	11 24       	eor	r1, r1
    44d6:	b0 e0       	ldi	r27, 0x00	; 0
    44d8:	a0 e0       	ldi	r26, 0x00	; 0
    44da:	88 83       	st	Y, r24
    44dc:	99 83       	std	Y+1, r25	; 0x01
    44de:	aa 83       	std	Y+2, r26	; 0x02
    44e0:	bb 83       	std	Y+3, r27	; 0x03
    44e2:	df 91       	pop	r29
    44e4:	cf 91       	pop	r28
    44e6:	1f 91       	pop	r17
    44e8:	0f 91       	pop	r16
    44ea:	ff 90       	pop	r15
    44ec:	ef 90       	pop	r14
    44ee:	df 90       	pop	r13
    44f0:	cf 90       	pop	r12
    44f2:	bf 90       	pop	r11
    44f4:	af 90       	pop	r10
    44f6:	08 95       	ret

000044f8 <Framebuffer_GFX::begin()>:
    44f8:	cf 93       	push	r28
    44fa:	df 93       	push	r29
    44fc:	ec 01       	movw	r28, r24
    44fe:	63 e5       	ldi	r22, 0x53	; 83
    4500:	77 e0       	ldi	r23, 0x07	; 7
    4502:	8f e4       	ldi	r24, 0x4F	; 79
    4504:	9f e0       	ldi	r25, 0x0F	; 15
    4506:	0e 94 64 05 	call	0xac8	; 0xac8 <Print::write(char const*)>
    450a:	fe 01       	movw	r30, r28
    450c:	e3 5e       	subi	r30, 0xE3	; 227
    450e:	fe 4f       	sbci	r31, 0xFE	; 254
    4510:	40 81       	ld	r20, Z
    4512:	51 81       	ldd	r21, Z+1	; 0x01
    4514:	70 e0       	ldi	r23, 0x00	; 0
    4516:	60 e0       	ldi	r22, 0x00	; 0
    4518:	20 e0       	ldi	r18, 0x00	; 0
    451a:	8f e4       	ldi	r24, 0x4F	; 79
    451c:	9f e0       	ldi	r25, 0x0F	; 15
    451e:	0e 94 cb 30 	call	0x6196	; 0x6196 <Print::printNumberDec(unsigned long, unsigned char)>
    4522:	62 e7       	ldi	r22, 0x72	; 114
    4524:	77 e0       	ldi	r23, 0x07	; 7
    4526:	8f e4       	ldi	r24, 0x4F	; 79
    4528:	9f e0       	ldi	r25, 0x0F	; 15
    452a:	0e 94 64 05 	call	0xac8	; 0xac8 <Print::write(char const*)>
    452e:	fe 01       	movw	r30, r28
    4530:	e1 5e       	subi	r30, 0xE1	; 225
    4532:	fe 4f       	sbci	r31, 0xFE	; 254
    4534:	40 81       	ld	r20, Z
    4536:	51 81       	ldd	r21, Z+1	; 0x01
    4538:	70 e0       	ldi	r23, 0x00	; 0
    453a:	60 e0       	ldi	r22, 0x00	; 0
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	8f e4       	ldi	r24, 0x4F	; 79
    4540:	9f e0       	ldi	r25, 0x0F	; 15
    4542:	0e 94 cb 30 	call	0x6196	; 0x6196 <Print::printNumberDec(unsigned long, unsigned char)>
    4546:	6c e7       	ldi	r22, 0x7C	; 124
    4548:	77 e0       	ldi	r23, 0x07	; 7
    454a:	8f e4       	ldi	r24, 0x4F	; 79
    454c:	9f e0       	ldi	r25, 0x0F	; 15
    454e:	0e 94 64 05 	call	0xac8	; 0xac8 <Print::write(char const*)>
    4552:	c7 5d       	subi	r28, 0xD7	; 215
    4554:	de 4f       	sbci	r29, 0xFE	; 254
    4556:	48 81       	ld	r20, Y
    4558:	59 81       	ldd	r21, Y+1	; 0x01
    455a:	6a 81       	ldd	r22, Y+2	; 0x02
    455c:	7b 81       	ldd	r23, Y+3	; 0x03
    455e:	20 e0       	ldi	r18, 0x00	; 0
    4560:	8f e4       	ldi	r24, 0x4F	; 79
    4562:	9f e0       	ldi	r25, 0x0F	; 15
    4564:	0e 94 cb 30 	call	0x6196	; 0x6196 <Print::printNumberDec(unsigned long, unsigned char)>
    4568:	8f e4       	ldi	r24, 0x4F	; 79
    456a:	9f e0       	ldi	r25, 0x0F	; 15
    456c:	df 91       	pop	r29
    456e:	cf 91       	pop	r28
    4570:	0c 94 b1 30 	jmp	0x6162	; 0x6162 <Print::println()>

00004574 <Framebuffer_GFX::expandColor(unsigned int)>:
    4574:	fc 01       	movw	r30, r24
    4576:	ef 2f       	mov	r30, r31
    4578:	ff 27       	eor	r31, r31
    457a:	e6 95       	lsr	r30
    457c:	e6 95       	lsr	r30
    457e:	e6 95       	lsr	r30
    4580:	e8 52       	subi	r30, 0x28	; 40
    4582:	fa 4f       	sbci	r31, 0xFA	; 250
    4584:	24 91       	lpm	r18, Z
    4586:	fc 01       	movw	r30, r24
    4588:	35 e0       	ldi	r19, 0x05	; 5
    458a:	f6 95       	lsr	r31
    458c:	e7 95       	ror	r30
    458e:	3a 95       	dec	r19
    4590:	e1 f7       	brne	.-8      	; 0x458a <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    4592:	ef 73       	andi	r30, 0x3F	; 63
    4594:	ff 27       	eor	r31, r31
    4596:	e8 56       	subi	r30, 0x68	; 104
    4598:	fa 4f       	sbci	r31, 0xFA	; 250
    459a:	64 91       	lpm	r22, Z
    459c:	8f 71       	andi	r24, 0x1F	; 31
    459e:	99 27       	eor	r25, r25
    45a0:	fc 01       	movw	r30, r24
    45a2:	e8 52       	subi	r30, 0x28	; 40
    45a4:	fa 4f       	sbci	r31, 0xFA	; 250
    45a6:	e4 91       	lpm	r30, Z
    45a8:	70 e0       	ldi	r23, 0x00	; 0
    45aa:	90 e0       	ldi	r25, 0x00	; 0
    45ac:	80 e0       	ldi	r24, 0x00	; 0
    45ae:	98 2f       	mov	r25, r24
    45b0:	87 2f       	mov	r24, r23
    45b2:	76 2f       	mov	r23, r22
    45b4:	66 27       	eor	r22, r22
    45b6:	82 2b       	or	r24, r18
    45b8:	6e 2b       	or	r22, r30
    45ba:	08 95       	ret

000045bc <Framebuffer_GFX::fillScreen(unsigned int)>:
    45bc:	8f 92       	push	r8
    45be:	9f 92       	push	r9
    45c0:	af 92       	push	r10
    45c2:	bf 92       	push	r11
    45c4:	cf 92       	push	r12
    45c6:	df 92       	push	r13
    45c8:	ef 92       	push	r14
    45ca:	ff 92       	push	r15
    45cc:	cf 93       	push	r28
    45ce:	df 93       	push	r29
    45d0:	ec 01       	movw	r28, r24
    45d2:	cb 01       	movw	r24, r22
    45d4:	fe 01       	movw	r30, r28
    45d6:	ef 5c       	subi	r30, 0xCF	; 207
    45d8:	fe 4f       	sbci	r31, 0xFE	; 254
    45da:	20 81       	ld	r18, Z
    45dc:	22 23       	and	r18, r18
    45de:	39 f1       	breq	.+78     	; 0x462e <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    45e0:	34 97       	sbiw	r30, 0x04	; 4
    45e2:	60 81       	ld	r22, Z
    45e4:	71 81       	ldd	r23, Z+1	; 0x01
    45e6:	82 81       	ldd	r24, Z+2	; 0x02
    45e8:	30 e0       	ldi	r19, 0x00	; 0
    45ea:	20 e0       	ldi	r18, 0x00	; 0
    45ec:	c1 2c       	mov	r12, r1
    45ee:	d1 2c       	mov	r13, r1
    45f0:	76 01       	movw	r14, r12
    45f2:	de 01       	movw	r26, r28
    45f4:	a7 5d       	subi	r26, 0xD7	; 215
    45f6:	be 4f       	sbci	r27, 0xFE	; 254
    45f8:	cb 5d       	subi	r28, 0xDB	; 219
    45fa:	de 4f       	sbci	r29, 0xFE	; 254
    45fc:	8d 90       	ld	r8, X+
    45fe:	9d 90       	ld	r9, X+
    4600:	ad 90       	ld	r10, X+
    4602:	bc 90       	ld	r11, X
    4604:	13 97       	sbiw	r26, 0x03	; 3
    4606:	c8 14       	cp	r12, r8
    4608:	d9 04       	cpc	r13, r9
    460a:	ea 04       	cpc	r14, r10
    460c:	fb 04       	cpc	r15, r11
    460e:	88 f4       	brcc	.+34     	; 0x4632 <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    4610:	e8 81       	ld	r30, Y
    4612:	f9 81       	ldd	r31, Y+1	; 0x01
    4614:	e2 0f       	add	r30, r18
    4616:	f3 1f       	adc	r31, r19
    4618:	80 83       	st	Z, r24
    461a:	71 83       	std	Z+1, r23	; 0x01
    461c:	62 83       	std	Z+2, r22	; 0x02
    461e:	9f ef       	ldi	r25, 0xFF	; 255
    4620:	c9 1a       	sub	r12, r25
    4622:	d9 0a       	sbc	r13, r25
    4624:	e9 0a       	sbc	r14, r25
    4626:	f9 0a       	sbc	r15, r25
    4628:	2d 5f       	subi	r18, 0xFD	; 253
    462a:	3f 4f       	sbci	r19, 0xFF	; 255
    462c:	e7 cf       	rjmp	.-50     	; 0x45fc <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    462e:	a2 df       	rcall	.-188    	; 0x4574 <Framebuffer_GFX::expandColor(unsigned int)>
    4630:	db cf       	rjmp	.-74     	; 0x45e8 <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    4632:	df 91       	pop	r29
    4634:	cf 91       	pop	r28
    4636:	ff 90       	pop	r15
    4638:	ef 90       	pop	r14
    463a:	df 90       	pop	r13
    463c:	cf 90       	pop	r12
    463e:	bf 90       	pop	r11
    4640:	af 90       	pop	r10
    4642:	9f 90       	pop	r9
    4644:	8f 90       	pop	r8
    4646:	08 95       	ret

00004648 <Framebuffer_GFX::XY(int, int)>:
    4648:	6f 92       	push	r6
    464a:	7f 92       	push	r7
    464c:	9f 92       	push	r9
    464e:	af 92       	push	r10
    4650:	bf 92       	push	r11
    4652:	cf 92       	push	r12
    4654:	df 92       	push	r13
    4656:	ef 92       	push	r14
    4658:	ff 92       	push	r15
    465a:	0f 93       	push	r16
    465c:	1f 93       	push	r17
    465e:	cf 93       	push	r28
    4660:	df 93       	push	r29
    4662:	ec 01       	movw	r28, r24
    4664:	cb 01       	movw	r24, r22
    4666:	8a 01       	movw	r16, r20
    4668:	77 fd       	sbrc	r23, 7
    466a:	0c c0       	rjmp	.+24     	; 0x4684 <Framebuffer_GFX::XY(int, int)+0x3c>
    466c:	57 fd       	sbrc	r21, 7
    466e:	0a c0       	rjmp	.+20     	; 0x4684 <Framebuffer_GFX::XY(int, int)+0x3c>
    4670:	2f 81       	ldd	r18, Y+7	; 0x07
    4672:	38 85       	ldd	r19, Y+8	; 0x08
    4674:	62 17       	cp	r22, r18
    4676:	73 07       	cpc	r23, r19
    4678:	2c f4       	brge	.+10     	; 0x4684 <Framebuffer_GFX::XY(int, int)+0x3c>
    467a:	29 85       	ldd	r18, Y+9	; 0x09
    467c:	3a 85       	ldd	r19, Y+10	; 0x0a
    467e:	42 17       	cp	r20, r18
    4680:	53 07       	cpc	r21, r19
    4682:	9c f0       	brlt	.+38     	; 0x46aa <Framebuffer_GFX::XY(int, int)+0x62>
    4684:	c7 5d       	subi	r28, 0xD7	; 215
    4686:	de 4f       	sbci	r29, 0xFE	; 254
    4688:	88 81       	ld	r24, Y
    468a:	99 81       	ldd	r25, Y+1	; 0x01
    468c:	01 97       	sbiw	r24, 0x01	; 1
    468e:	df 91       	pop	r29
    4690:	cf 91       	pop	r28
    4692:	1f 91       	pop	r17
    4694:	0f 91       	pop	r16
    4696:	ff 90       	pop	r15
    4698:	ef 90       	pop	r14
    469a:	df 90       	pop	r13
    469c:	cf 90       	pop	r12
    469e:	bf 90       	pop	r11
    46a0:	af 90       	pop	r10
    46a2:	9f 90       	pop	r9
    46a4:	7f 90       	pop	r7
    46a6:	6f 90       	pop	r6
    46a8:	08 95       	ret
    46aa:	2d 89       	ldd	r18, Y+21	; 0x15
    46ac:	22 30       	cpi	r18, 0x02	; 2
    46ae:	d9 f0       	breq	.+54     	; 0x46e6 <Framebuffer_GFX::XY(int, int)+0x9e>
    46b0:	23 30       	cpi	r18, 0x03	; 3
    46b2:	51 f1       	breq	.+84     	; 0x4708 <Framebuffer_GFX::XY(int, int)+0xc0>
    46b4:	21 30       	cpi	r18, 0x01	; 1
    46b6:	41 f4       	brne	.+16     	; 0x46c8 <Framebuffer_GFX::XY(int, int)+0x80>
    46b8:	2b 81       	ldd	r18, Y+3	; 0x03
    46ba:	3c 81       	ldd	r19, Y+4	; 0x04
    46bc:	21 50       	subi	r18, 0x01	; 1
    46be:	31 09       	sbc	r19, r1
    46c0:	24 1b       	sub	r18, r20
    46c2:	35 0b       	sbc	r19, r21
    46c4:	8b 01       	movw	r16, r22
    46c6:	c9 01       	movw	r24, r18
    46c8:	fe 01       	movw	r30, r28
    46ca:	e9 5d       	subi	r30, 0xD9	; 217
    46cc:	fe 4f       	sbci	r31, 0xFE	; 254
    46ce:	01 90       	ld	r0, Z+
    46d0:	f0 81       	ld	r31, Z
    46d2:	e0 2d       	mov	r30, r0
    46d4:	30 97       	sbiw	r30, 0x00	; 0
    46d6:	09 f1       	breq	.+66     	; 0x471a <Framebuffer_GFX::XY(int, int)+0xd2>
    46d8:	b8 01       	movw	r22, r16
    46da:	09 95       	icall
    46dc:	50 e0       	ldi	r21, 0x00	; 0
    46de:	40 e0       	ldi	r20, 0x00	; 0
    46e0:	84 0f       	add	r24, r20
    46e2:	95 1f       	adc	r25, r21
    46e4:	d4 cf       	rjmp	.-88     	; 0x468e <Framebuffer_GFX::XY(int, int)+0x46>
    46e6:	2b 81       	ldd	r18, Y+3	; 0x03
    46e8:	3c 81       	ldd	r19, Y+4	; 0x04
    46ea:	21 50       	subi	r18, 0x01	; 1
    46ec:	31 09       	sbc	r19, r1
    46ee:	a9 01       	movw	r20, r18
    46f0:	46 1b       	sub	r20, r22
    46f2:	57 0b       	sbc	r21, r23
    46f4:	ca 01       	movw	r24, r20
    46f6:	2d 81       	ldd	r18, Y+5	; 0x05
    46f8:	3e 81       	ldd	r19, Y+6	; 0x06
    46fa:	21 50       	subi	r18, 0x01	; 1
    46fc:	31 09       	sbc	r19, r1
    46fe:	f9 01       	movw	r30, r18
    4700:	e0 1b       	sub	r30, r16
    4702:	f1 0b       	sbc	r31, r17
    4704:	8f 01       	movw	r16, r30
    4706:	e0 cf       	rjmp	.-64     	; 0x46c8 <Framebuffer_GFX::XY(int, int)+0x80>
    4708:	2d 81       	ldd	r18, Y+5	; 0x05
    470a:	3e 81       	ldd	r19, Y+6	; 0x06
    470c:	21 50       	subi	r18, 0x01	; 1
    470e:	31 09       	sbc	r19, r1
    4710:	26 1b       	sub	r18, r22
    4712:	37 0b       	sbc	r19, r23
    4714:	ca 01       	movw	r24, r20
    4716:	89 01       	movw	r16, r18
    4718:	d7 cf       	rjmp	.-82     	; 0x46c8 <Framebuffer_GFX::XY(int, int)+0x80>
    471a:	fe 01       	movw	r30, r28
    471c:	e6 5e       	subi	r30, 0xE6	; 230
    471e:	fe 4f       	sbci	r31, 0xFE	; 254
    4720:	d0 80       	ld	r13, Z
    4722:	fd 2d       	mov	r31, r13
    4724:	f3 70       	andi	r31, 0x03	; 3
    4726:	cf 2e       	mov	r12, r31
    4728:	fe 01       	movw	r30, r28
    472a:	e5 5e       	subi	r30, 0xE5	; 229
    472c:	fe 4f       	sbci	r31, 0xFE	; 254
    472e:	b0 80       	ld	r11, Z
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	40 e0       	ldi	r20, 0x00	; 0
    4734:	bb 20       	and	r11, r11
    4736:	09 f4       	brne	.+2      	; 0x473a <Framebuffer_GFX::XY(int, int)+0xf2>
    4738:	64 c0       	rjmp	.+200    	; 0x4802 <Framebuffer_GFX::XY(int, int)+0x1ba>
    473a:	32 96       	adiw	r30, 0x02	; 2
    473c:	e0 80       	ld	r14, Z
    473e:	f1 80       	ldd	r15, Z+1	; 0x01
    4740:	b7 01       	movw	r22, r14
    4742:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <__udivmodhi4>
    4746:	9b 01       	movw	r18, r22
    4748:	98 2e       	mov	r9, r24
    474a:	a9 2e       	mov	r10, r25
    474c:	32 96       	adiw	r30, 0x02	; 2
    474e:	60 80       	ld	r6, Z
    4750:	71 80       	ldd	r7, Z+1	; 0x01
    4752:	c8 01       	movw	r24, r16
    4754:	b3 01       	movw	r22, r6
    4756:	0e 94 9d 35 	call	0x6b3a	; 0x6b3a <__udivmodhi4>
    475a:	db 01       	movw	r26, r22
    475c:	58 2f       	mov	r21, r24
    475e:	49 2f       	mov	r20, r25
    4760:	89 2d       	mov	r24, r9
    4762:	9a 2d       	mov	r25, r10
    4764:	05 2f       	mov	r16, r21
    4766:	14 2f       	mov	r17, r20
    4768:	d5 fe       	sbrs	r13, 5
    476a:	06 c0       	rjmp	.+12     	; 0x4778 <Framebuffer_GFX::XY(int, int)+0x130>
    476c:	4b 2d       	mov	r20, r11
    476e:	41 50       	subi	r20, 0x01	; 1
    4770:	55 0b       	sbc	r21, r21
    4772:	42 1b       	sub	r20, r18
    4774:	53 0b       	sbc	r21, r19
    4776:	9a 01       	movw	r18, r20
    4778:	d4 fe       	sbrs	r13, 4
    477a:	09 c0       	rjmp	.+18     	; 0x478e <Framebuffer_GFX::XY(int, int)+0x146>
    477c:	ae 01       	movw	r20, r28
    477e:	44 5e       	subi	r20, 0xE4	; 228
    4780:	5e 4f       	sbci	r21, 0xFE	; 254
    4782:	fa 01       	movw	r30, r20
    4784:	60 81       	ld	r22, Z
    4786:	61 50       	subi	r22, 0x01	; 1
    4788:	77 0b       	sbc	r23, r23
    478a:	6a 1b       	sub	r22, r26
    478c:	7b 0b       	sbc	r23, r27
    478e:	d6 fc       	sbrc	r13, 6
    4790:	11 c0       	rjmp	.+34     	; 0x47b4 <Framebuffer_GFX::XY(int, int)+0x16c>
    4792:	4b 2d       	mov	r20, r11
    4794:	50 e0       	ldi	r21, 0x00	; 0
    4796:	b6 2f       	mov	r27, r22
    4798:	a7 2f       	mov	r26, r23
    479a:	b9 01       	movw	r22, r18
    479c:	2b 2f       	mov	r18, r27
    479e:	3a 2f       	mov	r19, r26
    47a0:	d7 fc       	sbrc	r13, 7
    47a2:	0e c0       	rjmp	.+28     	; 0x47c0 <Framebuffer_GFX::XY(int, int)+0x178>
    47a4:	24 9f       	mul	r18, r20
    47a6:	d0 01       	movw	r26, r0
    47a8:	25 9f       	mul	r18, r21
    47aa:	b0 0d       	add	r27, r0
    47ac:	34 9f       	mul	r19, r20
    47ae:	b0 0d       	add	r27, r0
    47b0:	11 24       	eor	r1, r1
    47b2:	17 c0       	rjmp	.+46     	; 0x47e2 <Framebuffer_GFX::XY(int, int)+0x19a>
    47b4:	de 01       	movw	r26, r28
    47b6:	a4 5e       	subi	r26, 0xE4	; 228
    47b8:	be 4f       	sbci	r27, 0xFE	; 254
    47ba:	4c 91       	ld	r20, X
    47bc:	50 e0       	ldi	r21, 0x00	; 0
    47be:	f0 cf       	rjmp	.-32     	; 0x47a0 <Framebuffer_GFX::XY(int, int)+0x158>
    47c0:	20 ff       	sbrs	r18, 0
    47c2:	f0 cf       	rjmp	.-32     	; 0x47a4 <Framebuffer_GFX::XY(int, int)+0x15c>
    47c4:	ad 2d       	mov	r26, r13
    47c6:	a0 95       	com	r26
    47c8:	a3 70       	andi	r26, 0x03	; 3
    47ca:	ca 2e       	mov	r12, r26
    47cc:	2f 5f       	subi	r18, 0xFF	; 255
    47ce:	3f 4f       	sbci	r19, 0xFF	; 255
    47d0:	24 9f       	mul	r18, r20
    47d2:	d0 01       	movw	r26, r0
    47d4:	25 9f       	mul	r18, r21
    47d6:	b0 0d       	add	r27, r0
    47d8:	34 9f       	mul	r19, r20
    47da:	b0 0d       	add	r27, r0
    47dc:	11 24       	eor	r1, r1
    47de:	60 95       	com	r22
    47e0:	70 95       	com	r23
    47e2:	6a 0f       	add	r22, r26
    47e4:	7b 1f       	adc	r23, r27
    47e6:	e6 9c       	mul	r14, r6
    47e8:	90 01       	movw	r18, r0
    47ea:	e7 9c       	mul	r14, r7
    47ec:	30 0d       	add	r19, r0
    47ee:	f6 9c       	mul	r15, r6
    47f0:	30 0d       	add	r19, r0
    47f2:	11 24       	eor	r1, r1
    47f4:	26 9f       	mul	r18, r22
    47f6:	a0 01       	movw	r20, r0
    47f8:	27 9f       	mul	r18, r23
    47fa:	50 0d       	add	r21, r0
    47fc:	36 9f       	mul	r19, r22
    47fe:	50 0d       	add	r21, r0
    4800:	11 24       	eor	r1, r1
    4802:	98 01       	movw	r18, r16
    4804:	6c 2d       	mov	r22, r12
    4806:	62 70       	andi	r22, 0x02	; 2
    4808:	59 f0       	breq	.+22     	; 0x4820 <Framebuffer_GFX::XY(int, int)+0x1d8>
    480a:	fe 01       	movw	r30, r28
    480c:	e3 5e       	subi	r30, 0xE3	; 227
    480e:	fe 4f       	sbci	r31, 0xFE	; 254
    4810:	60 81       	ld	r22, Z
    4812:	71 81       	ldd	r23, Z+1	; 0x01
    4814:	61 50       	subi	r22, 0x01	; 1
    4816:	71 09       	sbc	r23, r1
    4818:	fb 01       	movw	r30, r22
    481a:	e8 1b       	sub	r30, r24
    481c:	f9 0b       	sbc	r31, r25
    481e:	cf 01       	movw	r24, r30
    4820:	c0 fe       	sbrs	r12, 0
    4822:	09 c0       	rjmp	.+18     	; 0x4836 <Framebuffer_GFX::XY(int, int)+0x1ee>
    4824:	fe 01       	movw	r30, r28
    4826:	e1 5e       	subi	r30, 0xE1	; 225
    4828:	fe 4f       	sbci	r31, 0xFE	; 254
    482a:	20 81       	ld	r18, Z
    482c:	31 81       	ldd	r19, Z+1	; 0x01
    482e:	21 50       	subi	r18, 0x01	; 1
    4830:	31 09       	sbc	r19, r1
    4832:	20 1b       	sub	r18, r16
    4834:	31 0b       	sbc	r19, r17
    4836:	d2 fc       	sbrc	r13, 2
    4838:	13 c0       	rjmp	.+38     	; 0x4860 <Framebuffer_GFX::XY(int, int)+0x218>
    483a:	c3 5e       	subi	r28, 0xE3	; 227
    483c:	de 4f       	sbci	r29, 0xFE	; 254
    483e:	68 81       	ld	r22, Y
    4840:	79 81       	ldd	r23, Y+1	; 0x01
    4842:	f2 2f       	mov	r31, r18
    4844:	e3 2f       	mov	r30, r19
    4846:	9c 01       	movw	r18, r24
    4848:	8f 2f       	mov	r24, r31
    484a:	9e 2f       	mov	r25, r30
    484c:	d3 fc       	sbrc	r13, 3
    484e:	0d c0       	rjmp	.+26     	; 0x486a <Framebuffer_GFX::XY(int, int)+0x222>
    4850:	86 9f       	mul	r24, r22
    4852:	f0 01       	movw	r30, r0
    4854:	87 9f       	mul	r24, r23
    4856:	f0 0d       	add	r31, r0
    4858:	96 9f       	mul	r25, r22
    485a:	f0 0d       	add	r31, r0
    485c:	11 24       	eor	r1, r1
    485e:	11 c0       	rjmp	.+34     	; 0x4882 <Framebuffer_GFX::XY(int, int)+0x23a>
    4860:	c1 5e       	subi	r28, 0xE1	; 225
    4862:	de 4f       	sbci	r29, 0xFE	; 254
    4864:	68 81       	ld	r22, Y
    4866:	79 81       	ldd	r23, Y+1	; 0x01
    4868:	f1 cf       	rjmp	.-30     	; 0x484c <Framebuffer_GFX::XY(int, int)+0x204>
    486a:	80 ff       	sbrs	r24, 0
    486c:	f1 cf       	rjmp	.-30     	; 0x4850 <Framebuffer_GFX::XY(int, int)+0x208>
    486e:	01 96       	adiw	r24, 0x01	; 1
    4870:	86 9f       	mul	r24, r22
    4872:	f0 01       	movw	r30, r0
    4874:	87 9f       	mul	r24, r23
    4876:	f0 0d       	add	r31, r0
    4878:	96 9f       	mul	r25, r22
    487a:	f0 0d       	add	r31, r0
    487c:	11 24       	eor	r1, r1
    487e:	20 95       	com	r18
    4880:	30 95       	com	r19
    4882:	cf 01       	movw	r24, r30
    4884:	82 0f       	add	r24, r18
    4886:	93 1f       	adc	r25, r19
    4888:	2b cf       	rjmp	.-426    	; 0x46e0 <Framebuffer_GFX::XY(int, int)+0x98>

0000488a <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
    488a:	9f 92       	push	r9
    488c:	af 92       	push	r10
    488e:	bf 92       	push	r11
    4890:	cf 92       	push	r12
    4892:	df 92       	push	r13
    4894:	ef 92       	push	r14
    4896:	ff 92       	push	r15
    4898:	0f 93       	push	r16
    489a:	1f 93       	push	r17
    489c:	cf 93       	push	r28
    489e:	df 93       	push	r29
    48a0:	ec 01       	movw	r28, r24
    48a2:	77 fd       	sbrc	r23, 7
    48a4:	2b c0       	rjmp	.+86     	; 0x48fc <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    48a6:	57 fd       	sbrc	r21, 7
    48a8:	29 c0       	rjmp	.+82     	; 0x48fc <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    48aa:	8f 81       	ldd	r24, Y+7	; 0x07
    48ac:	98 85       	ldd	r25, Y+8	; 0x08
    48ae:	68 17       	cp	r22, r24
    48b0:	79 07       	cpc	r23, r25
    48b2:	24 f5       	brge	.+72     	; 0x48fc <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    48b4:	89 85       	ldd	r24, Y+9	; 0x09
    48b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    48b8:	48 17       	cp	r20, r24
    48ba:	59 07       	cpc	r21, r25
    48bc:	fc f4       	brge	.+62     	; 0x48fc <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    48be:	6a 01       	movw	r12, r20
    48c0:	7b 01       	movw	r14, r22
    48c2:	fe 01       	movw	r30, r28
    48c4:	ef 5c       	subi	r30, 0xCF	; 207
    48c6:	fe 4f       	sbci	r31, 0xFE	; 254
    48c8:	80 81       	ld	r24, Z
    48ca:	88 23       	and	r24, r24
    48cc:	19 f1       	breq	.+70     	; 0x4914 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    48ce:	34 97       	sbiw	r30, 0x04	; 4
    48d0:	b0 80       	ld	r11, Z
    48d2:	a1 80       	ldd	r10, Z+1	; 0x01
    48d4:	92 80       	ldd	r9, Z+2	; 0x02
    48d6:	fe 01       	movw	r30, r28
    48d8:	eb 5d       	subi	r30, 0xDB	; 219
    48da:	fe 4f       	sbci	r31, 0xFE	; 254
    48dc:	00 81       	ld	r16, Z
    48de:	11 81       	ldd	r17, Z+1	; 0x01
    48e0:	a6 01       	movw	r20, r12
    48e2:	b7 01       	movw	r22, r14
    48e4:	ce 01       	movw	r24, r28
    48e6:	b0 de       	rcall	.-672    	; 0x4648 <Framebuffer_GFX::XY(int, int)>
    48e8:	fc 01       	movw	r30, r24
    48ea:	ee 0f       	add	r30, r30
    48ec:	ff 1f       	adc	r31, r31
    48ee:	e8 0f       	add	r30, r24
    48f0:	f9 1f       	adc	r31, r25
    48f2:	e0 0f       	add	r30, r16
    48f4:	f1 1f       	adc	r31, r17
    48f6:	90 82       	st	Z, r9
    48f8:	a1 82       	std	Z+1, r10	; 0x01
    48fa:	b2 82       	std	Z+2, r11	; 0x02
    48fc:	df 91       	pop	r29
    48fe:	cf 91       	pop	r28
    4900:	1f 91       	pop	r17
    4902:	0f 91       	pop	r16
    4904:	ff 90       	pop	r15
    4906:	ef 90       	pop	r14
    4908:	df 90       	pop	r13
    490a:	cf 90       	pop	r12
    490c:	bf 90       	pop	r11
    490e:	af 90       	pop	r10
    4910:	9f 90       	pop	r9
    4912:	08 95       	ret
    4914:	c9 01       	movw	r24, r18
    4916:	2e de       	rcall	.-932    	; 0x4574 <Framebuffer_GFX::expandColor(unsigned int)>
    4918:	b6 2e       	mov	r11, r22
    491a:	a7 2e       	mov	r10, r23
    491c:	98 2e       	mov	r9, r24
    491e:	db cf       	rjmp	.-74     	; 0x48d6 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

00004920 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    4920:	89 5d       	subi	r24, 0xD9	; 217
    4922:	9e 4f       	sbci	r25, 0xFE	; 254
    4924:	fc 01       	movw	r30, r24
    4926:	71 83       	std	Z+1, r23	; 0x01
    4928:	60 83       	st	Z, r22
}
    492a:	08 95       	ret

0000492c <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    492c:	da 01       	movw	r26, r20
    492e:	fc 01       	movw	r30, r24
    4930:	90 e0       	ldi	r25, 0x00	; 0
    4932:	80 e0       	ldi	r24, 0x00	; 0
    4934:	86 17       	cp	r24, r22
    4936:	97 07       	cpc	r25, r23
    4938:	6c f4       	brge	.+26     	; 0x4954 <fill_solid(CRGB*, int, CRGB const&)+0x28>
    493a:	2c 91       	ld	r18, X
    493c:	20 83       	st	Z, r18
    493e:	11 96       	adiw	r26, 0x01	; 1
    4940:	2c 91       	ld	r18, X
    4942:	11 97       	sbiw	r26, 0x01	; 1
    4944:	21 83       	std	Z+1, r18	; 0x01
    4946:	12 96       	adiw	r26, 0x02	; 2
    4948:	2c 91       	ld	r18, X
    494a:	12 97       	sbiw	r26, 0x02	; 2
    494c:	22 83       	std	Z+2, r18	; 0x02
    494e:	01 96       	adiw	r24, 0x01	; 1
    4950:	33 96       	adiw	r30, 0x03	; 3
    4952:	f0 cf       	rjmp	.-32     	; 0x4934 <fill_solid(CRGB*, int, CRGB const&)+0x8>
    4954:	08 95       	ret

00004956 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    4956:	0f 93       	push	r16
    4958:	1f 93       	push	r17
    495a:	cf 93       	push	r28
    495c:	df 93       	push	r29
    495e:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    4960:	84 2f       	mov	r24, r20
    4962:	82 95       	swap	r24
    4964:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    4966:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    4968:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    496a:	a8 2f       	mov	r26, r24
    496c:	aa 0f       	add	r26, r26
    496e:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    4970:	a6 0f       	add	r26, r22
    4972:	b7 2f       	mov	r27, r23
    4974:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    4976:	44 23       	and	r20, r20
    4978:	19 f0       	breq	.+6      	; 0x4980 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    497a:	31 e0       	ldi	r19, 0x01	; 1
    497c:	01 2b       	or	r16, r17
    497e:	09 f4       	brne	.+2      	; 0x4982 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    4980:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    4982:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    4984:	11 96       	adiw	r26, 0x01	; 1
    4986:	5c 91       	ld	r21, X
    4988:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    498a:	12 96       	adiw	r26, 0x02	; 2
    498c:	9c 91       	ld	r25, X
    498e:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    4990:	33 23       	and	r19, r19
    4992:	09 f4       	brne	.+2      	; 0x4996 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    4994:	2a c0       	rjmp	.+84     	; 0x49ea <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    4996:	8f 30       	cpi	r24, 0x0F	; 15
    4998:	11 f0       	breq	.+4      	; 0x499e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    499a:	ed 01       	movw	r28, r26
    499c:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    499e:	42 95       	swap	r20
    49a0:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    49a2:	74 2f       	mov	r23, r20
    49a4:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    49a6:	67 9f       	mul	r22, r23
    49a8:	06 0e       	add	r0, r22
    49aa:	60 e0       	ldi	r22, 0x00	; 0
    49ac:	61 1d       	adc	r22, r1
    49ae:	38 81       	ld	r19, Y
    49b0:	34 9f       	mul	r19, r20
    49b2:	03 0e       	add	r0, r19
    49b4:	30 e0       	ldi	r19, 0x00	; 0
    49b6:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    49b8:	63 0f       	add	r22, r19
    49ba:	57 9f       	mul	r21, r23
    49bc:	05 0e       	add	r0, r21
    49be:	50 e0       	ldi	r21, 0x00	; 0
    49c0:	51 1d       	adc	r21, r1
    49c2:	39 81       	ldd	r19, Y+1	; 0x01
    49c4:	34 9f       	mul	r19, r20
    49c6:	03 0e       	add	r0, r19
    49c8:	30 e0       	ldi	r19, 0x00	; 0
    49ca:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    49cc:	53 0f       	add	r21, r19
    49ce:	39 2f       	mov	r19, r25
    49d0:	37 9f       	mul	r19, r23
    49d2:	03 0e       	add	r0, r19
    49d4:	30 e0       	ldi	r19, 0x00	; 0
    49d6:	31 1d       	adc	r19, r1
    49d8:	9a 81       	ldd	r25, Y+2	; 0x02
    49da:	79 2f       	mov	r23, r25
    49dc:	74 9f       	mul	r23, r20
    49de:	07 0e       	add	r0, r23
    49e0:	70 e0       	ldi	r23, 0x00	; 0
    49e2:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    49e4:	93 2f       	mov	r25, r19
    49e6:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    49e8:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    49ea:	2f 3f       	cpi	r18, 0xFF	; 255
    49ec:	c1 f0       	breq	.+48     	; 0x4a1e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    49ee:	22 23       	and	r18, r18
    49f0:	f9 f0       	breq	.+62     	; 0x4a30 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    49f2:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    49f4:	66 23       	and	r22, r22
    49f6:	21 f0       	breq	.+8      	; 0x4a00 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    49f8:	62 9f       	mul	r22, r18
    49fa:	06 0e       	add	r0, r22
    49fc:	60 e0       	ldi	r22, 0x00	; 0
    49fe:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    4a00:	55 23       	and	r21, r21
    4a02:	21 f0       	breq	.+8      	; 0x4a0c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    4a04:	52 9f       	mul	r21, r18
    4a06:	05 0e       	add	r0, r21
    4a08:	50 e0       	ldi	r21, 0x00	; 0
    4a0a:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    4a0c:	99 23       	and	r25, r25
    4a0e:	31 f0       	breq	.+12     	; 0x4a1c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    4a10:	39 2f       	mov	r19, r25
    4a12:	32 9f       	mul	r19, r18
    4a14:	03 0e       	add	r0, r19
    4a16:	30 e0       	ldi	r19, 0x00	; 0
    4a18:	31 1d       	adc	r19, r1
    4a1a:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    4a1c:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    4a1e:	60 83       	st	Z, r22
    4a20:	51 83       	std	Z+1, r21	; 0x01
    4a22:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4a24:	cf 01       	movw	r24, r30
    4a26:	df 91       	pop	r29
    4a28:	cf 91       	pop	r28
    4a2a:	1f 91       	pop	r17
    4a2c:	0f 91       	pop	r16
    4a2e:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    4a30:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    4a32:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    4a34:	60 e0       	ldi	r22, 0x00	; 0
    4a36:	f3 cf       	rjmp	.-26     	; 0x4a1e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

00004a38 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    4a38:	7f 92       	push	r7
    4a3a:	8f 92       	push	r8
    4a3c:	9f 92       	push	r9
    4a3e:	af 92       	push	r10
    4a40:	bf 92       	push	r11
    4a42:	cf 92       	push	r12
    4a44:	df 92       	push	r13
    4a46:	ef 92       	push	r14
    4a48:	ff 92       	push	r15
    4a4a:	0f 93       	push	r16
    4a4c:	1f 93       	push	r17
    4a4e:	cf 93       	push	r28
    4a50:	df 93       	push	r29
    4a52:	fc 01       	movw	r30, r24
    4a54:	69 01       	movw	r12, r18
    4a56:	10 82       	st	Z, r1
    4a58:	11 82       	std	Z+1, r1	; 0x01
    4a5a:	12 82       	std	Z+2, r1	; 0x02
    4a5c:	66 23       	and	r22, r22
    4a5e:	b9 f1       	breq	.+110    	; 0x4ace <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    4a60:	8a 01       	movw	r16, r20
    4a62:	c1 e0       	ldi	r28, 0x01	; 1
    4a64:	d0 e0       	ldi	r29, 0x00	; 0
    4a66:	86 2e       	mov	r8, r22
    4a68:	91 2c       	mov	r9, r1
    4a6a:	b1 2c       	mov	r11, r1
    4a6c:	a1 2c       	mov	r10, r1
    4a6e:	d8 01       	movw	r26, r16
    4a70:	2d 91       	ld	r18, X+
    4a72:	8d 01       	movw	r16, r26
    4a74:	22 23       	and	r18, r18
    4a76:	39 f1       	breq	.+78     	; 0x4ac6 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    4a78:	7e 01       	movw	r14, r28
    4a7a:	b1 e0       	ldi	r27, 0x01	; 1
    4a7c:	eb 1a       	sub	r14, r27
    4a7e:	f1 08       	sbc	r15, r1
    4a80:	d6 01       	movw	r26, r12
    4a82:	ae 0d       	add	r26, r14
    4a84:	bf 1d       	adc	r27, r15
    4a86:	7c 90       	ld	r7, X
    4a88:	77 20       	and	r7, r7
    4a8a:	e9 f0       	breq	.+58     	; 0x4ac6 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    4a8c:	30 e0       	ldi	r19, 0x00	; 0
    4a8e:	50 e0       	ldi	r21, 0x00	; 0
    4a90:	40 e0       	ldi	r20, 0x00	; 0
    4a92:	2f 5f       	subi	r18, 0xFF	; 255
    4a94:	3f 4f       	sbci	r19, 0xFF	; 255
    4a96:	4f 4f       	sbci	r20, 0xFF	; 255
    4a98:	5f 4f       	sbci	r21, 0xFF	; 255
    4a9a:	c5 01       	movw	r24, r10
    4a9c:	b4 01       	movw	r22, r8
    4a9e:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <__mulsi3>
    4aa2:	9b 01       	movw	r18, r22
    4aa4:	ac 01       	movw	r20, r24
    4aa6:	87 2d       	mov	r24, r7
    4aa8:	90 e0       	ldi	r25, 0x00	; 0
    4aaa:	b0 e0       	ldi	r27, 0x00	; 0
    4aac:	a0 e0       	ldi	r26, 0x00	; 0
    4aae:	bc 01       	movw	r22, r24
    4ab0:	cd 01       	movw	r24, r26
    4ab2:	6f 5f       	subi	r22, 0xFF	; 255
    4ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    4ab6:	8f 4f       	sbci	r24, 0xFF	; 255
    4ab8:	9f 4f       	sbci	r25, 0xFF	; 255
    4aba:	0e 94 8e 35 	call	0x6b1c	; 0x6b1c <__mulsi3>
    4abe:	df 01       	movw	r26, r30
    4ac0:	ae 0d       	add	r26, r14
    4ac2:	bf 1d       	adc	r27, r15
    4ac4:	8c 93       	st	X, r24
    4ac6:	21 96       	adiw	r28, 0x01	; 1
    4ac8:	c4 30       	cpi	r28, 0x04	; 4
    4aca:	d1 05       	cpc	r29, r1
    4acc:	81 f6       	brne	.-96     	; 0x4a6e <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    4ace:	cf 01       	movw	r24, r30
    4ad0:	df 91       	pop	r29
    4ad2:	cf 91       	pop	r28
    4ad4:	1f 91       	pop	r17
    4ad6:	0f 91       	pop	r16
    4ad8:	ff 90       	pop	r15
    4ada:	ef 90       	pop	r14
    4adc:	df 90       	pop	r13
    4ade:	cf 90       	pop	r12
    4ae0:	bf 90       	pop	r11
    4ae2:	af 90       	pop	r10
    4ae4:	9f 90       	pop	r9
    4ae6:	8f 90       	pop	r8
    4ae8:	7f 90       	pop	r7
    4aea:	08 95       	ret

00004aec <CFastLED::CFastLED()>:
    4aec:	fc 01       	movw	r30, r24
    4aee:	8f ef       	ldi	r24, 0xFF	; 255
    4af0:	80 83       	st	Z, r24
    4af2:	12 82       	std	Z+2, r1	; 0x02
    4af4:	11 82       	std	Z+1, r1	; 0x01
    4af6:	14 86       	std	Z+12, r1	; 0x0c
    4af8:	13 86       	std	Z+11, r1	; 0x0b
    4afa:	8f ef       	ldi	r24, 0xFF	; 255
    4afc:	9f ef       	ldi	r25, 0xFF	; 255
    4afe:	dc 01       	movw	r26, r24
    4b00:	87 83       	std	Z+7, r24	; 0x07
    4b02:	90 87       	std	Z+8, r25	; 0x08
    4b04:	a1 87       	std	Z+9, r26	; 0x09
    4b06:	b2 87       	std	Z+10, r27	; 0x0a
    4b08:	08 95       	ret

00004b0a <CFastLED::clearData()>:
    4b0a:	cf 93       	push	r28
    4b0c:	df 93       	push	r29
    4b0e:	c0 91 bd 0e 	lds	r28, 0x0EBD	; 0x800ebd <CLEDController::m_pHead>
    4b12:	d0 91 be 0e 	lds	r29, 0x0EBE	; 0x800ebe <CLEDController::m_pHead+0x1>
    4b16:	20 97       	sbiw	r28, 0x00	; 0
    4b18:	89 f0       	breq	.+34     	; 0x4b3c <CFastLED::clearData()+0x32>
    4b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    4b1c:	9b 81       	ldd	r25, Y+3	; 0x03
    4b1e:	00 97       	sbiw	r24, 0x00	; 0
    4b20:	49 f0       	breq	.+18     	; 0x4b34 <CFastLED::clearData()+0x2a>
    4b22:	2d 85       	ldd	r18, Y+13	; 0x0d
    4b24:	3e 85       	ldd	r19, Y+14	; 0x0e
    4b26:	a9 01       	movw	r20, r18
    4b28:	44 0f       	add	r20, r20
    4b2a:	55 1f       	adc	r21, r21
    4b2c:	42 0f       	add	r20, r18
    4b2e:	53 1f       	adc	r21, r19
    4b30:	60 e0       	ldi	r22, 0x00	; 0
    4b32:	d0 d2       	rcall	.+1440   	; 0x50d4 <memset8>
    4b34:	0c 80       	ldd	r0, Y+4	; 0x04
    4b36:	dd 81       	ldd	r29, Y+5	; 0x05
    4b38:	c0 2d       	mov	r28, r0
    4b3a:	ed cf       	rjmp	.-38     	; 0x4b16 <CFastLED::clearData()+0xc>
    4b3c:	df 91       	pop	r29
    4b3e:	cf 91       	pop	r28
    4b40:	08 95       	ret

00004b42 <CFastLED::countFPS(int)>:
    4b42:	cf 92       	push	r12
    4b44:	df 92       	push	r13
    4b46:	ef 92       	push	r14
    4b48:	ff 92       	push	r15
    4b4a:	cf 93       	push	r28
    4b4c:	df 93       	push	r29
    4b4e:	ec 01       	movw	r28, r24
    4b50:	20 91 b5 0e 	lds	r18, 0x0EB5	; 0x800eb5 <CFastLED::countFPS(int)::br>
    4b54:	30 91 b6 0e 	lds	r19, 0x0EB6	; 0x800eb6 <CFastLED::countFPS(int)::br+0x1>
    4b58:	c9 01       	movw	r24, r18
    4b5a:	01 96       	adiw	r24, 0x01	; 1
    4b5c:	90 93 b6 0e 	sts	0x0EB6, r25	; 0x800eb6 <CFastLED::countFPS(int)::br+0x1>
    4b60:	80 93 b5 0e 	sts	0x0EB5, r24	; 0x800eb5 <CFastLED::countFPS(int)::br>
    4b64:	26 17       	cp	r18, r22
    4b66:	37 07       	cpc	r19, r23
    4b68:	0c f4       	brge	.+2      	; 0x4b6c <CFastLED::countFPS(int)+0x2a>
    4b6a:	3f c0       	rjmp	.+126    	; 0x4bea <CFastLED::countFPS(int)+0xa8>
    4b6c:	0f b6       	in	r0, 0x3f	; 63
    4b6e:	f8 94       	cli
    4b70:	20 91 cf 0e 	lds	r18, 0x0ECF	; 0x800ecf <timer0_millis_count>
    4b74:	30 91 d0 0e 	lds	r19, 0x0ED0	; 0x800ed0 <timer0_millis_count+0x1>
    4b78:	40 91 d1 0e 	lds	r20, 0x0ED1	; 0x800ed1 <timer0_millis_count+0x2>
    4b7c:	50 91 d2 0e 	lds	r21, 0x0ED2	; 0x800ed2 <timer0_millis_count+0x3>
    4b80:	0f be       	out	0x3f, r0	; 63
    4b82:	e8 ee       	ldi	r30, 0xE8	; 232
    4b84:	f3 e0       	ldi	r31, 0x03	; 3
    4b86:	8e 9f       	mul	r24, r30
    4b88:	b0 01       	movw	r22, r0
    4b8a:	8f 9f       	mul	r24, r31
    4b8c:	70 0d       	add	r23, r0
    4b8e:	9e 9f       	mul	r25, r30
    4b90:	70 0d       	add	r23, r0
    4b92:	11 24       	eor	r1, r1
    4b94:	07 2e       	mov	r0, r23
    4b96:	00 0c       	add	r0, r0
    4b98:	88 0b       	sbc	r24, r24
    4b9a:	99 0b       	sbc	r25, r25
    4b9c:	c0 90 b1 0e 	lds	r12, 0x0EB1	; 0x800eb1 <CFastLED::countFPS(int)::lastframe>
    4ba0:	d0 90 b2 0e 	lds	r13, 0x0EB2	; 0x800eb2 <CFastLED::countFPS(int)::lastframe+0x1>
    4ba4:	e0 90 b3 0e 	lds	r14, 0x0EB3	; 0x800eb3 <CFastLED::countFPS(int)::lastframe+0x2>
    4ba8:	f0 90 b4 0e 	lds	r15, 0x0EB4	; 0x800eb4 <CFastLED::countFPS(int)::lastframe+0x3>
    4bac:	2c 19       	sub	r18, r12
    4bae:	3d 09       	sbc	r19, r13
    4bb0:	4e 09       	sbc	r20, r14
    4bb2:	5f 09       	sbc	r21, r15
    4bb4:	0e 94 c4 35 	call	0x6b88	; 0x6b88 <__udivmodsi4>
    4bb8:	3a 83       	std	Y+2, r19	; 0x02
    4bba:	29 83       	std	Y+1, r18	; 0x01
    4bbc:	10 92 b6 0e 	sts	0x0EB6, r1	; 0x800eb6 <CFastLED::countFPS(int)::br+0x1>
    4bc0:	10 92 b5 0e 	sts	0x0EB5, r1	; 0x800eb5 <CFastLED::countFPS(int)::br>
    4bc4:	0f b6       	in	r0, 0x3f	; 63
    4bc6:	f8 94       	cli
    4bc8:	80 91 cf 0e 	lds	r24, 0x0ECF	; 0x800ecf <timer0_millis_count>
    4bcc:	90 91 d0 0e 	lds	r25, 0x0ED0	; 0x800ed0 <timer0_millis_count+0x1>
    4bd0:	a0 91 d1 0e 	lds	r26, 0x0ED1	; 0x800ed1 <timer0_millis_count+0x2>
    4bd4:	b0 91 d2 0e 	lds	r27, 0x0ED2	; 0x800ed2 <timer0_millis_count+0x3>
    4bd8:	0f be       	out	0x3f, r0	; 63
    4bda:	80 93 b1 0e 	sts	0x0EB1, r24	; 0x800eb1 <CFastLED::countFPS(int)::lastframe>
    4bde:	90 93 b2 0e 	sts	0x0EB2, r25	; 0x800eb2 <CFastLED::countFPS(int)::lastframe+0x1>
    4be2:	a0 93 b3 0e 	sts	0x0EB3, r26	; 0x800eb3 <CFastLED::countFPS(int)::lastframe+0x2>
    4be6:	b0 93 b4 0e 	sts	0x0EB4, r27	; 0x800eb4 <CFastLED::countFPS(int)::lastframe+0x3>
    4bea:	df 91       	pop	r29
    4bec:	cf 91       	pop	r28
    4bee:	ff 90       	pop	r15
    4bf0:	ef 90       	pop	r14
    4bf2:	df 90       	pop	r13
    4bf4:	cf 90       	pop	r12
    4bf6:	08 95       	ret

00004bf8 <CFastLED::show(unsigned char)>:
    4bf8:	8f 92       	push	r8
    4bfa:	9f 92       	push	r9
    4bfc:	af 92       	push	r10
    4bfe:	bf 92       	push	r11
    4c00:	cf 92       	push	r12
    4c02:	df 92       	push	r13
    4c04:	ef 92       	push	r14
    4c06:	ff 92       	push	r15
    4c08:	0f 93       	push	r16
    4c0a:	1f 93       	push	r17
    4c0c:	cf 93       	push	r28
    4c0e:	df 93       	push	r29
    4c10:	00 d0       	rcall	.+0      	; 0x4c12 <CFastLED::show(unsigned char)+0x1a>
    4c12:	1f 92       	push	r1
    4c14:	cd b7       	in	r28, 0x3d	; 61
    4c16:	de b7       	in	r29, 0x3e	; 62
    4c18:	7c 01       	movw	r14, r24
    4c1a:	d6 2e       	mov	r13, r22
    4c1c:	d7 01       	movw	r26, r14
    4c1e:	13 96       	adiw	r26, 0x03	; 3
    4c20:	0d 91       	ld	r16, X+
    4c22:	1d 91       	ld	r17, X+
    4c24:	2d 91       	ld	r18, X+
    4c26:	3c 91       	ld	r19, X
    4c28:	16 97       	sbiw	r26, 0x06	; 6
    4c2a:	01 15       	cp	r16, r1
    4c2c:	11 05       	cpc	r17, r1
    4c2e:	21 05       	cpc	r18, r1
    4c30:	31 05       	cpc	r19, r1
    4c32:	91 f0       	breq	.+36     	; 0x4c58 <CFastLED::show(unsigned char)+0x60>
    4c34:	7d d6       	rcall	.+3322   	; 0x5930 <_micros>
    4c36:	80 90 b7 0e 	lds	r8, 0x0EB7	; 0x800eb7 <lastshow>
    4c3a:	90 90 b8 0e 	lds	r9, 0x0EB8	; 0x800eb8 <lastshow+0x1>
    4c3e:	a0 90 b9 0e 	lds	r10, 0x0EB9	; 0x800eb9 <lastshow+0x2>
    4c42:	b0 90 ba 0e 	lds	r11, 0x0EBA	; 0x800eba <lastshow+0x3>
    4c46:	68 19       	sub	r22, r8
    4c48:	79 09       	sbc	r23, r9
    4c4a:	8a 09       	sbc	r24, r10
    4c4c:	9b 09       	sbc	r25, r11
    4c4e:	60 17       	cp	r22, r16
    4c50:	71 07       	cpc	r23, r17
    4c52:	82 07       	cpc	r24, r18
    4c54:	93 07       	cpc	r25, r19
    4c56:	10 f3       	brcs	.-60     	; 0x4c1c <CFastLED::show(unsigned char)+0x24>
    4c58:	6b d6       	rcall	.+3286   	; 0x5930 <_micros>
    4c5a:	60 93 b7 0e 	sts	0x0EB7, r22	; 0x800eb7 <lastshow>
    4c5e:	70 93 b8 0e 	sts	0x0EB8, r23	; 0x800eb8 <lastshow+0x1>
    4c62:	80 93 b9 0e 	sts	0x0EB9, r24	; 0x800eb9 <lastshow+0x2>
    4c66:	90 93 ba 0e 	sts	0x0EBA, r25	; 0x800eba <lastshow+0x3>
    4c6a:	d7 01       	movw	r26, r14
    4c6c:	1b 96       	adiw	r26, 0x0b	; 11
    4c6e:	ed 91       	ld	r30, X+
    4c70:	fc 91       	ld	r31, X
    4c72:	1c 97       	sbiw	r26, 0x0c	; 12
    4c74:	30 97       	sbiw	r30, 0x00	; 0
    4c76:	49 f0       	breq	.+18     	; 0x4c8a <CFastLED::show(unsigned char)+0x92>
    4c78:	17 96       	adiw	r26, 0x07	; 7
    4c7a:	4d 91       	ld	r20, X+
    4c7c:	5d 91       	ld	r21, X+
    4c7e:	6d 91       	ld	r22, X+
    4c80:	7c 91       	ld	r23, X
    4c82:	1a 97       	sbiw	r26, 0x0a	; 10
    4c84:	8d 2d       	mov	r24, r13
    4c86:	09 95       	icall
    4c88:	d8 2e       	mov	r13, r24
    4c8a:	00 91 bd 0e 	lds	r16, 0x0EBD	; 0x800ebd <CLEDController::m_pHead>
    4c8e:	10 91 be 0e 	lds	r17, 0x0EBE	; 0x800ebe <CLEDController::m_pHead+0x1>
    4c92:	01 15       	cp	r16, r1
    4c94:	11 05       	cpc	r17, r1
    4c96:	61 f1       	breq	.+88     	; 0x4cf0 <CFastLED::show(unsigned char)+0xf8>
    4c98:	f8 01       	movw	r30, r16
    4c9a:	c4 84       	ldd	r12, Z+12	; 0x0c
    4c9c:	d7 01       	movw	r26, r14
    4c9e:	11 96       	adiw	r26, 0x01	; 1
    4ca0:	8d 91       	ld	r24, X+
    4ca2:	9c 91       	ld	r25, X
    4ca4:	84 36       	cpi	r24, 0x64	; 100
    4ca6:	91 05       	cpc	r25, r1
    4ca8:	08 f4       	brcc	.+2      	; 0x4cac <CFastLED::show(unsigned char)+0xb4>
    4caa:	14 86       	std	Z+12, r1	; 0x0c
    4cac:	d8 01       	movw	r26, r16
    4cae:	ed 91       	ld	r30, X+
    4cb0:	fc 91       	ld	r31, X
    4cb2:	a2 80       	ldd	r10, Z+2	; 0x02
    4cb4:	b3 80       	ldd	r11, Z+3	; 0x03
    4cb6:	98 01       	movw	r18, r16
    4cb8:	27 5f       	subi	r18, 0xF7	; 247
    4cba:	3f 4f       	sbci	r19, 0xFF	; 255
    4cbc:	a8 01       	movw	r20, r16
    4cbe:	4a 5f       	subi	r20, 0xFA	; 250
    4cc0:	5f 4f       	sbci	r21, 0xFF	; 255
    4cc2:	6d 2d       	mov	r22, r13
    4cc4:	ce 01       	movw	r24, r28
    4cc6:	01 96       	adiw	r24, 0x01	; 1
    4cc8:	b7 de       	rcall	.-658    	; 0x4a38 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    4cca:	f8 01       	movw	r30, r16
    4ccc:	45 85       	ldd	r20, Z+13	; 0x0d
    4cce:	56 85       	ldd	r21, Z+14	; 0x0e
    4cd0:	62 81       	ldd	r22, Z+2	; 0x02
    4cd2:	73 81       	ldd	r23, Z+3	; 0x03
    4cd4:	9e 01       	movw	r18, r28
    4cd6:	2f 5f       	subi	r18, 0xFF	; 255
    4cd8:	3f 4f       	sbci	r19, 0xFF	; 255
    4cda:	c8 01       	movw	r24, r16
    4cdc:	f5 01       	movw	r30, r10
    4cde:	09 95       	icall
    4ce0:	d8 01       	movw	r26, r16
    4ce2:	1c 96       	adiw	r26, 0x0c	; 12
    4ce4:	cc 92       	st	X, r12
    4ce6:	1c 97       	sbiw	r26, 0x0c	; 12
    4ce8:	14 96       	adiw	r26, 0x04	; 4
    4cea:	0d 91       	ld	r16, X+
    4cec:	1c 91       	ld	r17, X
    4cee:	d1 cf       	rjmp	.-94     	; 0x4c92 <CFastLED::show(unsigned char)+0x9a>
    4cf0:	69 e1       	ldi	r22, 0x19	; 25
    4cf2:	70 e0       	ldi	r23, 0x00	; 0
    4cf4:	c7 01       	movw	r24, r14
    4cf6:	25 df       	rcall	.-438    	; 0x4b42 <CFastLED::countFPS(int)>
    4cf8:	0f 90       	pop	r0
    4cfa:	0f 90       	pop	r0
    4cfc:	0f 90       	pop	r0
    4cfe:	df 91       	pop	r29
    4d00:	cf 91       	pop	r28
    4d02:	1f 91       	pop	r17
    4d04:	0f 91       	pop	r16
    4d06:	ff 90       	pop	r15
    4d08:	ef 90       	pop	r14
    4d0a:	df 90       	pop	r13
    4d0c:	cf 90       	pop	r12
    4d0e:	bf 90       	pop	r11
    4d10:	af 90       	pop	r10
    4d12:	9f 90       	pop	r9
    4d14:	8f 90       	pop	r8
    4d16:	08 95       	ret

00004d18 <CFastLED::showColor(CRGB const&, unsigned char)>:
    4d18:	4f 92       	push	r4
    4d1a:	5f 92       	push	r5
    4d1c:	6f 92       	push	r6
    4d1e:	7f 92       	push	r7
    4d20:	8f 92       	push	r8
    4d22:	9f 92       	push	r9
    4d24:	af 92       	push	r10
    4d26:	bf 92       	push	r11
    4d28:	cf 92       	push	r12
    4d2a:	df 92       	push	r13
    4d2c:	ef 92       	push	r14
    4d2e:	ff 92       	push	r15
    4d30:	0f 93       	push	r16
    4d32:	1f 93       	push	r17
    4d34:	cf 93       	push	r28
    4d36:	df 93       	push	r29
    4d38:	00 d0       	rcall	.+0      	; 0x4d3a <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    4d3a:	1f 92       	push	r1
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
    4d40:	7c 01       	movw	r14, r24
    4d42:	5b 01       	movw	r10, r22
    4d44:	d4 2e       	mov	r13, r20
    4d46:	d7 01       	movw	r26, r14
    4d48:	13 96       	adiw	r26, 0x03	; 3
    4d4a:	0d 91       	ld	r16, X+
    4d4c:	1d 91       	ld	r17, X+
    4d4e:	2d 91       	ld	r18, X+
    4d50:	3c 91       	ld	r19, X
    4d52:	16 97       	sbiw	r26, 0x06	; 6
    4d54:	01 15       	cp	r16, r1
    4d56:	11 05       	cpc	r17, r1
    4d58:	21 05       	cpc	r18, r1
    4d5a:	31 05       	cpc	r19, r1
    4d5c:	91 f0       	breq	.+36     	; 0x4d82 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    4d5e:	e8 d5       	rcall	.+3024   	; 0x5930 <_micros>
    4d60:	40 90 b7 0e 	lds	r4, 0x0EB7	; 0x800eb7 <lastshow>
    4d64:	50 90 b8 0e 	lds	r5, 0x0EB8	; 0x800eb8 <lastshow+0x1>
    4d68:	60 90 b9 0e 	lds	r6, 0x0EB9	; 0x800eb9 <lastshow+0x2>
    4d6c:	70 90 ba 0e 	lds	r7, 0x0EBA	; 0x800eba <lastshow+0x3>
    4d70:	64 19       	sub	r22, r4
    4d72:	75 09       	sbc	r23, r5
    4d74:	86 09       	sbc	r24, r6
    4d76:	97 09       	sbc	r25, r7
    4d78:	60 17       	cp	r22, r16
    4d7a:	71 07       	cpc	r23, r17
    4d7c:	82 07       	cpc	r24, r18
    4d7e:	93 07       	cpc	r25, r19
    4d80:	10 f3       	brcs	.-60     	; 0x4d46 <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    4d82:	d6 d5       	rcall	.+2988   	; 0x5930 <_micros>
    4d84:	60 93 b7 0e 	sts	0x0EB7, r22	; 0x800eb7 <lastshow>
    4d88:	70 93 b8 0e 	sts	0x0EB8, r23	; 0x800eb8 <lastshow+0x1>
    4d8c:	80 93 b9 0e 	sts	0x0EB9, r24	; 0x800eb9 <lastshow+0x2>
    4d90:	90 93 ba 0e 	sts	0x0EBA, r25	; 0x800eba <lastshow+0x3>
    4d94:	d7 01       	movw	r26, r14
    4d96:	1b 96       	adiw	r26, 0x0b	; 11
    4d98:	ed 91       	ld	r30, X+
    4d9a:	fc 91       	ld	r31, X
    4d9c:	1c 97       	sbiw	r26, 0x0c	; 12
    4d9e:	30 97       	sbiw	r30, 0x00	; 0
    4da0:	49 f0       	breq	.+18     	; 0x4db4 <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    4da2:	17 96       	adiw	r26, 0x07	; 7
    4da4:	4d 91       	ld	r20, X+
    4da6:	5d 91       	ld	r21, X+
    4da8:	6d 91       	ld	r22, X+
    4daa:	7c 91       	ld	r23, X
    4dac:	1a 97       	sbiw	r26, 0x0a	; 10
    4dae:	8d 2d       	mov	r24, r13
    4db0:	09 95       	icall
    4db2:	d8 2e       	mov	r13, r24
    4db4:	00 91 bd 0e 	lds	r16, 0x0EBD	; 0x800ebd <CLEDController::m_pHead>
    4db8:	10 91 be 0e 	lds	r17, 0x0EBE	; 0x800ebe <CLEDController::m_pHead+0x1>
    4dbc:	01 15       	cp	r16, r1
    4dbe:	11 05       	cpc	r17, r1
    4dc0:	59 f1       	breq	.+86     	; 0x4e18 <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    4dc2:	f8 01       	movw	r30, r16
    4dc4:	c4 84       	ldd	r12, Z+12	; 0x0c
    4dc6:	d7 01       	movw	r26, r14
    4dc8:	11 96       	adiw	r26, 0x01	; 1
    4dca:	8d 91       	ld	r24, X+
    4dcc:	9c 91       	ld	r25, X
    4dce:	84 36       	cpi	r24, 0x64	; 100
    4dd0:	91 05       	cpc	r25, r1
    4dd2:	08 f4       	brcc	.+2      	; 0x4dd6 <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    4dd4:	14 86       	std	Z+12, r1	; 0x0c
    4dd6:	d8 01       	movw	r26, r16
    4dd8:	ed 91       	ld	r30, X+
    4dda:	fc 91       	ld	r31, X
    4ddc:	80 80       	ld	r8, Z
    4dde:	91 80       	ldd	r9, Z+1	; 0x01
    4de0:	98 01       	movw	r18, r16
    4de2:	27 5f       	subi	r18, 0xF7	; 247
    4de4:	3f 4f       	sbci	r19, 0xFF	; 255
    4de6:	a8 01       	movw	r20, r16
    4de8:	4a 5f       	subi	r20, 0xFA	; 250
    4dea:	5f 4f       	sbci	r21, 0xFF	; 255
    4dec:	6d 2d       	mov	r22, r13
    4dee:	ce 01       	movw	r24, r28
    4df0:	01 96       	adiw	r24, 0x01	; 1
    4df2:	22 de       	rcall	.-956    	; 0x4a38 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    4df4:	f8 01       	movw	r30, r16
    4df6:	45 85       	ldd	r20, Z+13	; 0x0d
    4df8:	56 85       	ldd	r21, Z+14	; 0x0e
    4dfa:	9e 01       	movw	r18, r28
    4dfc:	2f 5f       	subi	r18, 0xFF	; 255
    4dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    4e00:	b5 01       	movw	r22, r10
    4e02:	c8 01       	movw	r24, r16
    4e04:	f4 01       	movw	r30, r8
    4e06:	09 95       	icall
    4e08:	d8 01       	movw	r26, r16
    4e0a:	1c 96       	adiw	r26, 0x0c	; 12
    4e0c:	cc 92       	st	X, r12
    4e0e:	1c 97       	sbiw	r26, 0x0c	; 12
    4e10:	14 96       	adiw	r26, 0x04	; 4
    4e12:	0d 91       	ld	r16, X+
    4e14:	1c 91       	ld	r17, X
    4e16:	d2 cf       	rjmp	.-92     	; 0x4dbc <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    4e18:	69 e1       	ldi	r22, 0x19	; 25
    4e1a:	70 e0       	ldi	r23, 0x00	; 0
    4e1c:	c7 01       	movw	r24, r14
    4e1e:	91 de       	rcall	.-734    	; 0x4b42 <CFastLED::countFPS(int)>
    4e20:	0f 90       	pop	r0
    4e22:	0f 90       	pop	r0
    4e24:	0f 90       	pop	r0
    4e26:	df 91       	pop	r29
    4e28:	cf 91       	pop	r28
    4e2a:	1f 91       	pop	r17
    4e2c:	0f 91       	pop	r16
    4e2e:	ff 90       	pop	r15
    4e30:	ef 90       	pop	r14
    4e32:	df 90       	pop	r13
    4e34:	cf 90       	pop	r12
    4e36:	bf 90       	pop	r11
    4e38:	af 90       	pop	r10
    4e3a:	9f 90       	pop	r9
    4e3c:	8f 90       	pop	r8
    4e3e:	7f 90       	pop	r7
    4e40:	6f 90       	pop	r6
    4e42:	5f 90       	pop	r5
    4e44:	4f 90       	pop	r4
    4e46:	08 95       	ret

00004e48 <CFastLED::clear(bool)>:
    4e48:	0f 93       	push	r16
    4e4a:	1f 93       	push	r17
    4e4c:	cf 93       	push	r28
    4e4e:	df 93       	push	r29
    4e50:	00 d0       	rcall	.+0      	; 0x4e52 <CFastLED::clear(bool)+0xa>
    4e52:	1f 92       	push	r1
    4e54:	cd b7       	in	r28, 0x3d	; 61
    4e56:	de b7       	in	r29, 0x3e	; 62
    4e58:	8c 01       	movw	r16, r24
    4e5a:	66 23       	and	r22, r22
    4e5c:	41 f0       	breq	.+16     	; 0x4e6e <CFastLED::clear(bool)+0x26>
    4e5e:	19 82       	std	Y+1, r1	; 0x01
    4e60:	1a 82       	std	Y+2, r1	; 0x02
    4e62:	1b 82       	std	Y+3, r1	; 0x03
    4e64:	40 e0       	ldi	r20, 0x00	; 0
    4e66:	be 01       	movw	r22, r28
    4e68:	6f 5f       	subi	r22, 0xFF	; 255
    4e6a:	7f 4f       	sbci	r23, 0xFF	; 255
    4e6c:	55 df       	rcall	.-342    	; 0x4d18 <CFastLED::showColor(CRGB const&, unsigned char)>
    4e6e:	c8 01       	movw	r24, r16
    4e70:	4c de       	rcall	.-872    	; 0x4b0a <CFastLED::clearData()>
    4e72:	0f 90       	pop	r0
    4e74:	0f 90       	pop	r0
    4e76:	0f 90       	pop	r0
    4e78:	df 91       	pop	r29
    4e7a:	cf 91       	pop	r28
    4e7c:	1f 91       	pop	r17
    4e7e:	0f 91       	pop	r16
    4e80:	08 95       	ret

00004e82 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    4e82:	cf 93       	push	r28
    4e84:	df 93       	push	r29
    4e86:	ec 01       	movw	r28, r24
    4e88:	44 23       	and	r20, r20
    4e8a:	f1 f0       	breq	.+60     	; 0x4ec8 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    4e8c:	61 15       	cp	r22, r1
    4e8e:	71 05       	cpc	r23, r1
    4e90:	c1 f0       	breq	.+48     	; 0x4ec2 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    4e92:	9b 01       	movw	r18, r22
    4e94:	50 e0       	ldi	r21, 0x00	; 0
    4e96:	40 e0       	ldi	r20, 0x00	; 0
    4e98:	60 e4       	ldi	r22, 0x40	; 64
    4e9a:	72 e4       	ldi	r23, 0x42	; 66
    4e9c:	8f e0       	ldi	r24, 0x0F	; 15
    4e9e:	90 e0       	ldi	r25, 0x00	; 0
    4ea0:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__divmodsi4>
    4ea4:	8b 81       	ldd	r24, Y+3	; 0x03
    4ea6:	9c 81       	ldd	r25, Y+4	; 0x04
    4ea8:	ad 81       	ldd	r26, Y+5	; 0x05
    4eaa:	be 81       	ldd	r27, Y+6	; 0x06
    4eac:	82 17       	cp	r24, r18
    4eae:	93 07       	cpc	r25, r19
    4eb0:	a4 07       	cpc	r26, r20
    4eb2:	b5 07       	cpc	r27, r21
    4eb4:	10 f4       	brcc	.+4      	; 0x4eba <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    4eb6:	da 01       	movw	r26, r20
    4eb8:	c9 01       	movw	r24, r18
    4eba:	8b 83       	std	Y+3, r24	; 0x03
    4ebc:	9c 83       	std	Y+4, r25	; 0x04
    4ebe:	ad 83       	std	Y+5, r26	; 0x05
    4ec0:	be 83       	std	Y+6, r27	; 0x06
    4ec2:	df 91       	pop	r29
    4ec4:	cf 91       	pop	r28
    4ec6:	08 95       	ret
    4ec8:	61 15       	cp	r22, r1
    4eca:	71 05       	cpc	r23, r1
    4ecc:	71 f0       	breq	.+28     	; 0x4eea <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    4ece:	9b 01       	movw	r18, r22
    4ed0:	50 e0       	ldi	r21, 0x00	; 0
    4ed2:	40 e0       	ldi	r20, 0x00	; 0
    4ed4:	60 e4       	ldi	r22, 0x40	; 64
    4ed6:	72 e4       	ldi	r23, 0x42	; 66
    4ed8:	8f e0       	ldi	r24, 0x0F	; 15
    4eda:	90 e0       	ldi	r25, 0x00	; 0
    4edc:	0e 94 e6 35 	call	0x6bcc	; 0x6bcc <__divmodsi4>
    4ee0:	2b 83       	std	Y+3, r18	; 0x03
    4ee2:	3c 83       	std	Y+4, r19	; 0x04
    4ee4:	4d 83       	std	Y+5, r20	; 0x05
    4ee6:	5e 83       	std	Y+6, r21	; 0x06
    4ee8:	ec cf       	rjmp	.-40     	; 0x4ec2 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    4eea:	1b 82       	std	Y+3, r1	; 0x03
    4eec:	1c 82       	std	Y+4, r1	; 0x04
    4eee:	1d 82       	std	Y+5, r1	; 0x05
    4ef0:	1e 82       	std	Y+6, r1	; 0x06
    4ef2:	e7 cf       	rjmp	.-50     	; 0x4ec2 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

00004ef4 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    4ef4:	cf 92       	push	r12
    4ef6:	df 92       	push	r13
    4ef8:	ef 92       	push	r14
    4efa:	ff 92       	push	r15
    4efc:	0f 93       	push	r16
    4efe:	1f 93       	push	r17
    4f00:	cf 93       	push	r28
    4f02:	df 93       	push	r29
    4f04:	ec 01       	movw	r28, r24
    4f06:	6b 01       	movw	r12, r22
    4f08:	7a 01       	movw	r14, r20
    4f0a:	10 e0       	ldi	r17, 0x00	; 0
    4f0c:	00 e0       	ldi	r16, 0x00	; 0
    4f0e:	12 16       	cp	r1, r18
    4f10:	13 06       	cpc	r1, r19
    4f12:	14 f4       	brge	.+4      	; 0x4f18 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    4f14:	8a 01       	movw	r16, r20
    4f16:	79 01       	movw	r14, r18
    4f18:	e8 81       	ld	r30, Y
    4f1a:	f9 81       	ldd	r31, Y+1	; 0x01
    4f1c:	04 80       	ldd	r0, Z+4	; 0x04
    4f1e:	f5 81       	ldd	r31, Z+5	; 0x05
    4f20:	e0 2d       	mov	r30, r0
    4f22:	ce 01       	movw	r24, r28
    4f24:	09 95       	icall
    4f26:	c8 01       	movw	r24, r16
    4f28:	88 0f       	add	r24, r24
    4f2a:	99 1f       	adc	r25, r25
    4f2c:	08 0f       	add	r16, r24
    4f2e:	19 1f       	adc	r17, r25
    4f30:	c0 0e       	add	r12, r16
    4f32:	d1 1e       	adc	r13, r17
    4f34:	db 82       	std	Y+3, r13	; 0x03
    4f36:	ca 82       	std	Y+2, r12	; 0x02
    4f38:	ed 86       	std	Y+13, r14	; 0x0d
    4f3a:	fe 86       	std	Y+14, r15	; 0x0e
    4f3c:	e8 81       	ld	r30, Y
    4f3e:	f9 81       	ldd	r31, Y+1	; 0x01
    4f40:	02 84       	ldd	r0, Z+10	; 0x0a
    4f42:	f3 85       	ldd	r31, Z+11	; 0x0b
    4f44:	e0 2d       	mov	r30, r0
    4f46:	ce 01       	movw	r24, r28
    4f48:	09 95       	icall
    4f4a:	41 e0       	ldi	r20, 0x01	; 1
    4f4c:	bc 01       	movw	r22, r24
    4f4e:	8f eb       	ldi	r24, 0xBF	; 191
    4f50:	9e e0       	ldi	r25, 0x0E	; 14
    4f52:	97 df       	rcall	.-210    	; 0x4e82 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    4f54:	ce 01       	movw	r24, r28
    4f56:	df 91       	pop	r29
    4f58:	cf 91       	pop	r28
    4f5a:	1f 91       	pop	r17
    4f5c:	0f 91       	pop	r16
    4f5e:	ff 90       	pop	r15
    4f60:	ef 90       	pop	r14
    4f62:	df 90       	pop	r13
    4f64:	cf 90       	pop	r12
    4f66:	08 95       	ret

00004f68 <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    4f68:	8f eb       	ldi	r24, 0xBF	; 191
    4f6a:	9e e0       	ldi	r25, 0x0E	; 14
    4f6c:	bf cd       	rjmp	.-1154   	; 0x4aec <CFastLED::CFastLED()>

00004f6e <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    4f6e:	1f 93       	push	r17
    4f70:	dc 01       	movw	r26, r24
    4f72:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    4f74:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    4f76:	11 96       	adiw	r26, 0x01	; 1
    4f78:	4c 91       	ld	r20, X
    4f7a:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    4f7c:	12 96       	adiw	r26, 0x02	; 2
    4f7e:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    4f80:	97 2f       	mov	r25, r23
    4f82:	99 0f       	add	r25, r25
    4f84:	99 0f       	add	r25, r25
    4f86:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4f88:	35 e5       	ldi	r19, 0x55	; 85
    4f8a:	29 2f       	mov	r18, r25
    4f8c:	23 9f       	mul	r18, r19
    4f8e:	02 0e       	add	r0, r18
    4f90:	20 e0       	ldi	r18, 0x00	; 0
    4f92:	21 1d       	adc	r18, r1
    4f94:	11 24       	eor	r1, r1
    4f96:	82 2f       	mov	r24, r18
    4f98:	67 2f       	mov	r22, r23
    4f9a:	60 74       	andi	r22, 0x40	; 64
    4f9c:	57 2f       	mov	r21, r23
    4f9e:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    4fa0:	77 fd       	sbrc	r23, 7
    4fa2:	6f c0       	rjmp	.+222    	; 0x5082 <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    4fa4:	61 11       	cpse	r22, r1
    4fa6:	5b c0       	rjmp	.+182    	; 0x505e <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    4fa8:	51 11       	cpse	r21, r1
    4faa:	05 c0       	rjmp	.+10     	; 0x4fb6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    4fac:	92 2f       	mov	r25, r18
    4fae:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4fb0:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    4fb2:	90 e0       	ldi	r25, 0x00	; 0
    4fb4:	04 c0       	rjmp	.+8      	; 0x4fbe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    4fb6:	25 e5       	ldi	r18, 0x55	; 85
    4fb8:	28 0f       	add	r18, r24
                    b = 0;
    4fba:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    4fbc:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    4fbe:	4f 3f       	cpi	r20, 0xFF	; 255
    4fc0:	09 f4       	brne	.+2      	; 0x4fc4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    4fc2:	24 c0       	rjmp	.+72     	; 0x500c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    4fc4:	44 23       	and	r20, r20
    4fc6:	09 f4       	brne	.+2      	; 0x4fca <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    4fc8:	7d c0       	rjmp	.+250    	; 0x50c4 <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    4fca:	88 23       	and	r24, r24
    4fcc:	31 f0       	breq	.+12     	; 0x4fda <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4fce:	38 2f       	mov	r19, r24
    4fd0:	34 9f       	mul	r19, r20
    4fd2:	03 0e       	add	r0, r19
    4fd4:	30 e0       	ldi	r19, 0x00	; 0
    4fd6:	31 1d       	adc	r19, r1
    4fd8:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    4fda:	22 23       	and	r18, r18
    4fdc:	21 f0       	breq	.+8      	; 0x4fe6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    4fde:	24 9f       	mul	r18, r20
    4fe0:	02 0e       	add	r0, r18
    4fe2:	20 e0       	ldi	r18, 0x00	; 0
    4fe4:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    4fe6:	99 23       	and	r25, r25
    4fe8:	31 f0       	breq	.+12     	; 0x4ff6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    4fea:	39 2f       	mov	r19, r25
    4fec:	34 9f       	mul	r19, r20
    4fee:	03 0e       	add	r0, r19
    4ff0:	30 e0       	ldi	r19, 0x00	; 0
    4ff2:	31 1d       	adc	r19, r1
    4ff4:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    4ff6:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    4ff8:	34 2f       	mov	r19, r20
    4ffa:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4ffc:	33 9f       	mul	r19, r19
    4ffe:	03 0e       	add	r0, r19
    5000:	30 e0       	ldi	r19, 0x00	; 0
    5002:	31 1d       	adc	r19, r1
    5004:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    5006:	83 0f       	add	r24, r19
            g += brightness_floor;
    5008:	23 0f       	add	r18, r19
            b += brightness_floor;
    500a:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    500c:	1f 3f       	cpi	r17, 0xFF	; 255
    500e:	09 f4       	brne	.+2      	; 0x5012 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    5010:	21 c0       	rjmp	.+66     	; 0x5054 <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    5012:	30 e0       	ldi	r19, 0x00	; 0
    5014:	11 23       	and	r17, r17
    5016:	21 f0       	breq	.+8      	; 0x5020 <L_630>
    5018:	11 9f       	mul	r17, r17
    501a:	31 2d       	mov	r19, r1
    501c:	09 f0       	breq	.+2      	; 0x5020 <L_630>
    501e:	3f 5f       	subi	r19, 0xFF	; 255

00005020 <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    5020:	33 23       	and	r19, r19
    5022:	09 f4       	brne	.+2      	; 0x5026 <L_630+0x6>
    5024:	53 c0       	rjmp	.+166    	; 0x50cc <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    5026:	88 23       	and	r24, r24
    5028:	31 f0       	breq	.+12     	; 0x5036 <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    502a:	48 2f       	mov	r20, r24
    502c:	43 9f       	mul	r20, r19
    502e:	04 0e       	add	r0, r20
    5030:	40 e0       	ldi	r20, 0x00	; 0
    5032:	41 1d       	adc	r20, r1
    5034:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    5036:	22 23       	and	r18, r18
    5038:	21 f0       	breq	.+8      	; 0x5042 <L_630+0x22>
    503a:	23 9f       	mul	r18, r19
    503c:	02 0e       	add	r0, r18
    503e:	20 e0       	ldi	r18, 0x00	; 0
    5040:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    5042:	99 23       	and	r25, r25
    5044:	31 f0       	breq	.+12     	; 0x5052 <L_630+0x32>
    5046:	49 2f       	mov	r20, r25
    5048:	43 9f       	mul	r20, r19
    504a:	04 0e       	add	r0, r20
    504c:	40 e0       	ldi	r20, 0x00	; 0
    504e:	41 1d       	adc	r20, r1
    5050:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    5052:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    5054:	80 83       	st	Z, r24
    rgb.g = g;
    5056:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    5058:	92 83       	std	Z+2, r25	; 0x02
}
    505a:	1f 91       	pop	r17
    505c:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    505e:	51 11       	cpse	r21, r1
    5060:	0b c0       	rjmp	.+22     	; 0x5078 <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    5062:	39 2f       	mov	r19, r25
    5064:	2a ea       	ldi	r18, 0xAA	; 170
    5066:	32 9f       	mul	r19, r18
    5068:	03 0e       	add	r0, r19
    506a:	30 e0       	ldi	r19, 0x00	; 0
    506c:	31 1d       	adc	r19, r1
    506e:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    5070:	9b ea       	ldi	r25, 0xAB	; 171
    5072:	93 1b       	sub	r25, r19
                    g = K170 + third;
    5074:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    5076:	9c cf       	rjmp	.-200    	; 0x4fb0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    5078:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    507a:	20 95       	com	r18
                b = third;
    507c:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    507e:	80 e0       	ldi	r24, 0x00	; 0
    5080:	9e cf       	rjmp	.-196    	; 0x4fbe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    5082:	61 11       	cpse	r22, r1
    5084:	12 c0       	rjmp	.+36     	; 0x50aa <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    5086:	51 11       	cpse	r21, r1
    5088:	0c c0       	rjmp	.+24     	; 0x50a2 <L_630+0x82>
    508a:	39 2f       	mov	r19, r25
    508c:	2a ea       	ldi	r18, 0xAA	; 170
    508e:	32 9f       	mul	r19, r18
    5090:	03 0e       	add	r0, r19
    5092:	30 e0       	ldi	r19, 0x00	; 0
    5094:	31 1d       	adc	r19, r1
    5096:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    5098:	2b ea       	ldi	r18, 0xAB	; 171
    509a:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    509c:	95 e5       	ldi	r25, 0x55	; 85
    509e:	93 0f       	add	r25, r19
    50a0:	ee cf       	rjmp	.-36     	; 0x507e <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    50a2:	92 2f       	mov	r25, r18
    50a4:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    50a6:	20 e0       	ldi	r18, 0x00	; 0
    50a8:	8a cf       	rjmp	.-236    	; 0x4fbe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    50aa:	51 11       	cpse	r21, r1
    50ac:	06 c0       	rjmp	.+12     	; 0x50ba <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    50ae:	25 e5       	ldi	r18, 0x55	; 85
    50b0:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    50b2:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    50b4:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    50b6:	82 2f       	mov	r24, r18
    50b8:	f6 cf       	rjmp	.-20     	; 0x50a6 <L_630+0x86>
    50ba:	2a ea       	ldi	r18, 0xAA	; 170
    50bc:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    50be:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    50c0:	93 2f       	mov	r25, r19
    50c2:	f8 cf       	rjmp	.-16     	; 0x50b4 <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    50c4:	9f ef       	ldi	r25, 0xFF	; 255
    50c6:	2f ef       	ldi	r18, 0xFF	; 255
    50c8:	8f ef       	ldi	r24, 0xFF	; 255
    50ca:	a0 cf       	rjmp	.-192    	; 0x500c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    50cc:	90 e0       	ldi	r25, 0x00	; 0
    50ce:	20 e0       	ldi	r18, 0x00	; 0
    50d0:	80 e0       	ldi	r24, 0x00	; 0
    50d2:	c0 cf       	rjmp	.-128    	; 0x5054 <L_630+0x34>

000050d4 <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    50d4:	dc 01       	movw	r26, r24
    50d6:	40 ff       	sbrs	r20, 0
    50d8:	03 c0       	rjmp	.+6      	; 0x50e0 <Lseteven_8>
    50da:	01 c0       	rjmp	.+2      	; 0x50de <Lsetodd_8>

000050dc <Lsetloop_8>:
    50dc:	6d 93       	st	X+, r22

000050de <Lsetodd_8>:
    50de:	6d 93       	st	X+, r22

000050e0 <Lseteven_8>:
    50e0:	42 50       	subi	r20, 0x02	; 2
    50e2:	e0 f7       	brcc	.-8      	; 0x50dc <Lsetloop_8>
    50e4:	50 40       	sbci	r21, 0x00	; 0
    50e6:	d0 f7       	brcc	.-12     	; 0x50dc <Lsetloop_8>
    return ptr;
}
    50e8:	08 95       	ret

000050ea <memcpy8>:
         "  brcc Lcpyloop_%=        \n\t"
         : [num] "+r" (num)
         : [src] "r" (src),
           [dst] "r" (dst)
         : "memory"
         );
    50ea:	fb 01       	movw	r30, r22
    50ec:	dc 01       	movw	r26, r24
    50ee:	40 ff       	sbrs	r20, 0
    50f0:	05 c0       	rjmp	.+10     	; 0x50fc <Lcpyeven_23>
    50f2:	02 c0       	rjmp	.+4      	; 0x50f8 <Lcpyodd_23>

000050f4 <Lcpyloop_23>:
    50f4:	01 90       	ld	r0, Z+
    50f6:	0d 92       	st	X+, r0

000050f8 <Lcpyodd_23>:
    50f8:	01 90       	ld	r0, Z+
    50fa:	0d 92       	st	X+, r0

000050fc <Lcpyeven_23>:
    50fc:	42 50       	subi	r20, 0x02	; 2
    50fe:	d0 f7       	brcc	.-12     	; 0x50f4 <Lcpyloop_23>
    5100:	50 40       	sbci	r21, 0x00	; 0
    5102:	c0 f7       	brcc	.-16     	; 0x50f4 <Lcpyloop_23>
    return dst;
}
    5104:	08 95       	ret

00005106 <memmove8>:

//__attribute__ ((noinline))
void * memmove8 ( void * dst, const void* src, uint16_t num )
{
    if( src > dst) {
    5106:	86 17       	cp	r24, r22
    5108:	97 07       	cpc	r25, r23
    510a:	08 f4       	brcc	.+2      	; 0x510e <memmove8+0x8>
        // if src > dst then we can use the forward-stepping memcpy8
        return memcpy8( dst, src, num);
    510c:	ee cf       	rjmp	.-36     	; 0x50ea <memcpy8>
    } else {
        // if src < dst then we have to step backward:
        dst = (char*)dst + num;
    510e:	84 0f       	add	r24, r20
    5110:	95 1f       	adc	r25, r21
        src = (char*)src + num;
    5112:	64 0f       	add	r22, r20
    5114:	75 1f       	adc	r23, r21
             "  brcc Lmovloop_%=        \n\t"
             : [num] "+r" (num)
             : [src] "r" (src),
               [dst] "r" (dst)
             : "memory"
             );
    5116:	fb 01       	movw	r30, r22
    5118:	dc 01       	movw	r26, r24
    511a:	40 ff       	sbrs	r20, 0
    511c:	05 c0       	rjmp	.+10     	; 0x5128 <Lmoveven_58>
    511e:	02 c0       	rjmp	.+4      	; 0x5124 <Lmovodd_58>

00005120 <Lmovloop_58>:
    5120:	02 90       	ld	r0, -Z
    5122:	0e 92       	st	-X, r0

00005124 <Lmovodd_58>:
    5124:	02 90       	ld	r0, -Z
    5126:	0e 92       	st	-X, r0

00005128 <Lmoveven_58>:
    5128:	42 50       	subi	r20, 0x02	; 2
    512a:	d0 f7       	brcc	.-12     	; 0x5120 <Lmovloop_58>
    512c:	50 40       	sbci	r21, 0x00	; 0
    512e:	c0 f7       	brcc	.-16     	; 0x5120 <Lmovloop_58>
        return dst;
    }
}
    5130:	08 95       	ret

00005132 <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    5132:	0f 93       	push	r16
    5134:	1f 93       	push	r17
    5136:	cf 93       	push	r28
    5138:	df 93       	push	r29
    513a:	82 30       	cpi	r24, 0x02	; 2
    513c:	91 05       	cpc	r25, r1
    513e:	10 f4       	brcc	.+4      	; 0x5144 <malloc+0x12>
    5140:	82 e0       	ldi	r24, 0x02	; 2
    5142:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    5144:	e0 91 59 0f 	lds	r30, 0x0F59	; 0x800f59 <__flp>
    5148:	f0 91 5a 0f 	lds	r31, 0x0F5A	; 0x800f5a <__flp+0x1>
    514c:	30 e0       	ldi	r19, 0x00	; 0
    514e:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    5150:	70 e0       	ldi	r23, 0x00	; 0
    5152:	60 e0       	ldi	r22, 0x00	; 0
    5154:	d0 e0       	ldi	r29, 0x00	; 0
    5156:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    5158:	b0 e0       	ldi	r27, 0x00	; 0
    515a:	a0 e0       	ldi	r26, 0x00	; 0
    515c:	30 97       	sbiw	r30, 0x00	; 0
    515e:	99 f4       	brne	.+38     	; 0x5186 <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    5160:	21 15       	cp	r18, r1
    5162:	31 05       	cpc	r19, r1
    5164:	09 f4       	brne	.+2      	; 0x5168 <malloc+0x36>
    5166:	4a c0       	rjmp	.+148    	; 0x51fc <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    5168:	28 1b       	sub	r18, r24
    516a:	39 0b       	sbc	r19, r25
    516c:	24 30       	cpi	r18, 0x04	; 4
    516e:	31 05       	cpc	r19, r1
    5170:	d8 f5       	brcc	.+118    	; 0x51e8 <malloc+0xb6>
    5172:	8a 81       	ldd	r24, Y+2	; 0x02
    5174:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    5176:	61 15       	cp	r22, r1
    5178:	71 05       	cpc	r23, r1
    517a:	89 f1       	breq	.+98     	; 0x51de <malloc+0xac>
				sfp2->nx = sfp1->nx;
    517c:	fb 01       	movw	r30, r22
    517e:	93 83       	std	Z+3, r25	; 0x03
    5180:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    5182:	fe 01       	movw	r30, r28
    5184:	11 c0       	rjmp	.+34     	; 0x51a8 <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    5186:	40 81       	ld	r20, Z
    5188:	51 81       	ldd	r21, Z+1	; 0x01
    518a:	02 81       	ldd	r16, Z+2	; 0x02
    518c:	13 81       	ldd	r17, Z+3	; 0x03
    518e:	48 17       	cp	r20, r24
    5190:	59 07       	cpc	r21, r25
    5192:	e0 f0       	brcs	.+56     	; 0x51cc <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    5194:	48 17       	cp	r20, r24
    5196:	59 07       	cpc	r21, r25
    5198:	99 f4       	brne	.+38     	; 0x51c0 <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    519a:	10 97       	sbiw	r26, 0x00	; 0
    519c:	61 f0       	breq	.+24     	; 0x51b6 <malloc+0x84>
				fp2->nx = fp1->nx;
    519e:	12 96       	adiw	r26, 0x02	; 2
    51a0:	0c 93       	st	X, r16
    51a2:	12 97       	sbiw	r26, 0x02	; 2
    51a4:	13 96       	adiw	r26, 0x03	; 3
    51a6:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    51a8:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    51aa:	cf 01       	movw	r24, r30
    51ac:	df 91       	pop	r29
    51ae:	cf 91       	pop	r28
    51b0:	1f 91       	pop	r17
    51b2:	0f 91       	pop	r16
    51b4:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    51b6:	00 93 59 0f 	sts	0x0F59, r16	; 0x800f59 <__flp>
    51ba:	10 93 5a 0f 	sts	0x0F5A, r17	; 0x800f5a <__flp+0x1>
    51be:	f4 cf       	rjmp	.-24     	; 0x51a8 <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    51c0:	21 15       	cp	r18, r1
    51c2:	31 05       	cpc	r19, r1
    51c4:	51 f0       	breq	.+20     	; 0x51da <malloc+0xa8>
    51c6:	42 17       	cp	r20, r18
    51c8:	53 07       	cpc	r21, r19
    51ca:	38 f0       	brcs	.+14     	; 0x51da <malloc+0xa8>
    51cc:	a9 01       	movw	r20, r18
    51ce:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    51d0:	9a 01       	movw	r18, r20
    51d2:	bd 01       	movw	r22, r26
    51d4:	df 01       	movw	r26, r30
    51d6:	f8 01       	movw	r30, r16
    51d8:	c1 cf       	rjmp	.-126    	; 0x515c <malloc+0x2a>
    51da:	ef 01       	movw	r28, r30
    51dc:	f9 cf       	rjmp	.-14     	; 0x51d0 <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    51de:	90 93 5a 0f 	sts	0x0F5A, r25	; 0x800f5a <__flp+0x1>
    51e2:	80 93 59 0f 	sts	0x0F59, r24	; 0x800f59 <__flp>
    51e6:	cd cf       	rjmp	.-102    	; 0x5182 <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    51e8:	fe 01       	movw	r30, r28
    51ea:	e2 0f       	add	r30, r18
    51ec:	f3 1f       	adc	r31, r19
    51ee:	81 93       	st	Z+, r24
    51f0:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    51f2:	22 50       	subi	r18, 0x02	; 2
    51f4:	31 09       	sbc	r19, r1
    51f6:	39 83       	std	Y+1, r19	; 0x01
    51f8:	28 83       	st	Y, r18
		return &(sfp2->nx);
    51fa:	d7 cf       	rjmp	.-82     	; 0x51aa <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    51fc:	20 91 cc 0e 	lds	r18, 0x0ECC	; 0x800ecc <__brkval>
    5200:	30 91 cd 0e 	lds	r19, 0x0ECD	; 0x800ecd <__brkval+0x1>
    5204:	23 2b       	or	r18, r19
    5206:	41 f4       	brne	.+16     	; 0x5218 <malloc+0xe6>
		__brkval = __malloc_heap_start;
    5208:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    520c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    5210:	30 93 cd 0e 	sts	0x0ECD, r19	; 0x800ecd <__brkval+0x1>
    5214:	20 93 cc 0e 	sts	0x0ECC, r18	; 0x800ecc <__brkval>
	cp = __malloc_heap_end;
    5218:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    521c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    5220:	21 15       	cp	r18, r1
    5222:	31 05       	cpc	r19, r1
    5224:	41 f4       	brne	.+16     	; 0x5236 <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    5226:	2d b7       	in	r18, 0x3d	; 61
    5228:	3e b7       	in	r19, 0x3e	; 62
    522a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    522e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    5232:	24 1b       	sub	r18, r20
    5234:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    5236:	e0 91 cc 0e 	lds	r30, 0x0ECC	; 0x800ecc <__brkval>
    523a:	f0 91 cd 0e 	lds	r31, 0x0ECD	; 0x800ecd <__brkval+0x1>
    523e:	e2 17       	cp	r30, r18
    5240:	f3 07       	cpc	r31, r19
    5242:	a0 f4       	brcc	.+40     	; 0x526c <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    5244:	2e 1b       	sub	r18, r30
    5246:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    5248:	28 17       	cp	r18, r24
    524a:	39 07       	cpc	r19, r25
    524c:	78 f0       	brcs	.+30     	; 0x526c <malloc+0x13a>
    524e:	ac 01       	movw	r20, r24
    5250:	4e 5f       	subi	r20, 0xFE	; 254
    5252:	5f 4f       	sbci	r21, 0xFF	; 255
    5254:	24 17       	cp	r18, r20
    5256:	35 07       	cpc	r19, r21
    5258:	48 f0       	brcs	.+18     	; 0x526c <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    525a:	4e 0f       	add	r20, r30
    525c:	5f 1f       	adc	r21, r31
    525e:	50 93 cd 0e 	sts	0x0ECD, r21	; 0x800ecd <__brkval+0x1>
    5262:	40 93 cc 0e 	sts	0x0ECC, r20	; 0x800ecc <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    5266:	81 93       	st	Z+, r24
    5268:	91 93       	st	Z+, r25
		return &(fp1->nx);
    526a:	9f cf       	rjmp	.-194    	; 0x51aa <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    526c:	f0 e0       	ldi	r31, 0x00	; 0
    526e:	e0 e0       	ldi	r30, 0x00	; 0
    5270:	9c cf       	rjmp	.-200    	; 0x51aa <malloc+0x78>

00005272 <free>:
}


void
free(void *p)
{
    5272:	cf 93       	push	r28
    5274:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    5276:	00 97       	sbiw	r24, 0x00	; 0
    5278:	e9 f0       	breq	.+58     	; 0x52b4 <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    527a:	fc 01       	movw	r30, r24
    527c:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    527e:	13 82       	std	Z+3, r1	; 0x03
    5280:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    5282:	a0 91 59 0f 	lds	r26, 0x0F59	; 0x800f59 <__flp>
    5286:	b0 91 5a 0f 	lds	r27, 0x0F5A	; 0x800f5a <__flp+0x1>
    528a:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    528c:	30 e0       	ldi	r19, 0x00	; 0
    528e:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    5290:	10 97       	sbiw	r26, 0x00	; 0
    5292:	a1 f4       	brne	.+40     	; 0x52bc <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    5294:	20 81       	ld	r18, Z
    5296:	31 81       	ldd	r19, Z+1	; 0x01
    5298:	82 0f       	add	r24, r18
    529a:	93 1f       	adc	r25, r19
    529c:	20 91 cc 0e 	lds	r18, 0x0ECC	; 0x800ecc <__brkval>
    52a0:	30 91 cd 0e 	lds	r19, 0x0ECD	; 0x800ecd <__brkval+0x1>
    52a4:	28 17       	cp	r18, r24
    52a6:	39 07       	cpc	r19, r25
    52a8:	09 f0       	breq	.+2      	; 0x52ac <free+0x3a>
    52aa:	61 c0       	rjmp	.+194    	; 0x536e <free+0xfc>
			__brkval = cpnew;
    52ac:	f0 93 cd 0e 	sts	0x0ECD, r31	; 0x800ecd <__brkval+0x1>
    52b0:	e0 93 cc 0e 	sts	0x0ECC, r30	; 0x800ecc <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    52b4:	df 91       	pop	r29
    52b6:	cf 91       	pop	r28
    52b8:	08 95       	ret
    52ba:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    52bc:	ce 17       	cp	r28, r30
    52be:	df 07       	cpc	r29, r31
    52c0:	e8 f5       	brcc	.+122    	; 0x533c <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    52c2:	4a 81       	ldd	r20, Y+2	; 0x02
    52c4:	5b 81       	ldd	r21, Y+3	; 0x03
    52c6:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    52c8:	41 15       	cp	r20, r1
    52ca:	51 05       	cpc	r21, r1
    52cc:	b1 f7       	brne	.-20     	; 0x52ba <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    52ce:	e9 01       	movw	r28, r18
    52d0:	fb 83       	std	Y+3, r31	; 0x03
    52d2:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    52d4:	49 91       	ld	r20, Y+
    52d6:	59 91       	ld	r21, Y+
    52d8:	c4 0f       	add	r28, r20
    52da:	d5 1f       	adc	r29, r21
    52dc:	ec 17       	cp	r30, r28
    52de:	fd 07       	cpc	r31, r29
    52e0:	61 f4       	brne	.+24     	; 0x52fa <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    52e2:	80 81       	ld	r24, Z
    52e4:	91 81       	ldd	r25, Z+1	; 0x01
    52e6:	02 96       	adiw	r24, 0x02	; 2
    52e8:	84 0f       	add	r24, r20
    52ea:	95 1f       	adc	r25, r21
    52ec:	e9 01       	movw	r28, r18
    52ee:	99 83       	std	Y+1, r25	; 0x01
    52f0:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    52f2:	82 81       	ldd	r24, Z+2	; 0x02
    52f4:	93 81       	ldd	r25, Z+3	; 0x03
    52f6:	9b 83       	std	Y+3, r25	; 0x03
    52f8:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    52fa:	f0 e0       	ldi	r31, 0x00	; 0
    52fc:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    52fe:	12 96       	adiw	r26, 0x02	; 2
    5300:	8d 91       	ld	r24, X+
    5302:	9c 91       	ld	r25, X
    5304:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    5306:	00 97       	sbiw	r24, 0x00	; 0
    5308:	b9 f5       	brne	.+110    	; 0x5378 <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    530a:	2d 91       	ld	r18, X+
    530c:	3c 91       	ld	r19, X
    530e:	11 97       	sbiw	r26, 0x01	; 1
    5310:	cd 01       	movw	r24, r26
    5312:	02 96       	adiw	r24, 0x02	; 2
    5314:	82 0f       	add	r24, r18
    5316:	93 1f       	adc	r25, r19
    5318:	20 91 cc 0e 	lds	r18, 0x0ECC	; 0x800ecc <__brkval>
    531c:	30 91 cd 0e 	lds	r19, 0x0ECD	; 0x800ecd <__brkval+0x1>
    5320:	28 17       	cp	r18, r24
    5322:	39 07       	cpc	r19, r25
    5324:	39 f6       	brne	.-114    	; 0x52b4 <free+0x42>
		if (fp2 == NULL)
    5326:	30 97       	sbiw	r30, 0x00	; 0
    5328:	51 f5       	brne	.+84     	; 0x537e <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    532a:	10 92 5a 0f 	sts	0x0F5A, r1	; 0x800f5a <__flp+0x1>
    532e:	10 92 59 0f 	sts	0x0F59, r1	; 0x800f59 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    5332:	b0 93 cd 0e 	sts	0x0ECD, r27	; 0x800ecd <__brkval+0x1>
    5336:	a0 93 cc 0e 	sts	0x0ECC, r26	; 0x800ecc <__brkval>
    533a:	bc cf       	rjmp	.-136    	; 0x52b4 <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    533c:	d3 83       	std	Z+3, r29	; 0x03
    533e:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    5340:	40 81       	ld	r20, Z
    5342:	51 81       	ldd	r21, Z+1	; 0x01
    5344:	84 0f       	add	r24, r20
    5346:	95 1f       	adc	r25, r21
    5348:	c8 17       	cp	r28, r24
    534a:	d9 07       	cpc	r29, r25
    534c:	61 f4       	brne	.+24     	; 0x5366 <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    534e:	4e 5f       	subi	r20, 0xFE	; 254
    5350:	5f 4f       	sbci	r21, 0xFF	; 255
    5352:	88 81       	ld	r24, Y
    5354:	99 81       	ldd	r25, Y+1	; 0x01
    5356:	48 0f       	add	r20, r24
    5358:	59 1f       	adc	r21, r25
    535a:	51 83       	std	Z+1, r21	; 0x01
    535c:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    535e:	8a 81       	ldd	r24, Y+2	; 0x02
    5360:	9b 81       	ldd	r25, Y+3	; 0x03
    5362:	93 83       	std	Z+3, r25	; 0x03
    5364:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5366:	21 15       	cp	r18, r1
    5368:	31 05       	cpc	r19, r1
    536a:	09 f0       	breq	.+2      	; 0x536e <free+0xfc>
    536c:	b0 cf       	rjmp	.-160    	; 0x52ce <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    536e:	f0 93 5a 0f 	sts	0x0F5A, r31	; 0x800f5a <__flp+0x1>
    5372:	e0 93 59 0f 	sts	0x0F59, r30	; 0x800f59 <__flp>
			return;
    5376:	9e cf       	rjmp	.-196    	; 0x52b4 <free+0x42>
    5378:	fd 01       	movw	r30, r26
    537a:	dc 01       	movw	r26, r24
    537c:	c0 cf       	rjmp	.-128    	; 0x52fe <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    537e:	13 82       	std	Z+3, r1	; 0x03
    5380:	12 82       	std	Z+2, r1	; 0x02
    5382:	d7 cf       	rjmp	.-82     	; 0x5332 <free+0xc0>

00005384 <realloc>:



void *
realloc(void *ptr, size_t len)
{
    5384:	4f 92       	push	r4
    5386:	5f 92       	push	r5
    5388:	6f 92       	push	r6
    538a:	7f 92       	push	r7
    538c:	8f 92       	push	r8
    538e:	9f 92       	push	r9
    5390:	af 92       	push	r10
    5392:	bf 92       	push	r11
    5394:	cf 92       	push	r12
    5396:	df 92       	push	r13
    5398:	ef 92       	push	r14
    539a:	ff 92       	push	r15
    539c:	0f 93       	push	r16
    539e:	1f 93       	push	r17
    53a0:	cf 93       	push	r28
    53a2:	df 93       	push	r29
    53a4:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    53a6:	00 97       	sbiw	r24, 0x00	; 0
    53a8:	91 f4       	brne	.+36     	; 0x53ce <realloc+0x4a>
		return malloc(len);
    53aa:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    53ac:	df 91       	pop	r29
    53ae:	cf 91       	pop	r28
    53b0:	1f 91       	pop	r17
    53b2:	0f 91       	pop	r16
    53b4:	ff 90       	pop	r15
    53b6:	ef 90       	pop	r14
    53b8:	df 90       	pop	r13
    53ba:	cf 90       	pop	r12
    53bc:	bf 90       	pop	r11
    53be:	af 90       	pop	r10
    53c0:	9f 90       	pop	r9
    53c2:	8f 90       	pop	r8
    53c4:	7f 90       	pop	r7
    53c6:	6f 90       	pop	r6
    53c8:	5f 90       	pop	r5
    53ca:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    53cc:	b2 ce       	rjmp	.-668    	; 0x5132 <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    53ce:	fc 01       	movw	r30, r24
    53d0:	e6 0f       	add	r30, r22
    53d2:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    53d4:	9c 01       	movw	r18, r24
    53d6:	22 50       	subi	r18, 0x02	; 2
    53d8:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    53da:	e2 17       	cp	r30, r18
    53dc:	f3 07       	cpc	r31, r19
    53de:	08 f4       	brcc	.+2      	; 0x53e2 <realloc+0x5e>
    53e0:	a5 c0       	rjmp	.+330    	; 0x552c <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    53e2:	d9 01       	movw	r26, r18
    53e4:	cd 91       	ld	r28, X+
    53e6:	dc 91       	ld	r29, X
    53e8:	11 97       	sbiw	r26, 0x01	; 1
    53ea:	c6 17       	cp	r28, r22
    53ec:	d7 07       	cpc	r29, r23
    53ee:	18 f1       	brcs	.+70     	; 0x5436 <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    53f0:	c5 30       	cpi	r28, 0x05	; 5
    53f2:	d1 05       	cpc	r29, r1
    53f4:	70 f0       	brcs	.+28     	; 0x5412 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    53f6:	ce 01       	movw	r24, r28
    53f8:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    53fa:	86 17       	cp	r24, r22
    53fc:	97 07       	cpc	r25, r23
    53fe:	48 f0       	brcs	.+18     	; 0x5412 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    5400:	c6 1b       	sub	r28, r22
    5402:	d7 0b       	sbc	r29, r23
    5404:	22 97       	sbiw	r28, 0x02	; 2
    5406:	c1 93       	st	Z+, r28
    5408:	d1 93       	st	Z+, r29
		fp1->sz = len;
    540a:	6d 93       	st	X+, r22
    540c:	7c 93       	st	X, r23
		free(&(fp2->nx));
    540e:	cf 01       	movw	r24, r30
    5410:	30 df       	rcall	.-416    	; 0x5272 <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    5412:	c8 01       	movw	r24, r16
    5414:	df 91       	pop	r29
    5416:	cf 91       	pop	r28
    5418:	1f 91       	pop	r17
    541a:	0f 91       	pop	r16
    541c:	ff 90       	pop	r15
    541e:	ef 90       	pop	r14
    5420:	df 90       	pop	r13
    5422:	cf 90       	pop	r12
    5424:	bf 90       	pop	r11
    5426:	af 90       	pop	r10
    5428:	9f 90       	pop	r9
    542a:	8f 90       	pop	r8
    542c:	7f 90       	pop	r7
    542e:	6f 90       	pop	r6
    5430:	5f 90       	pop	r5
    5432:	4f 90       	pop	r4
    5434:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    5436:	5b 01       	movw	r10, r22
    5438:	ac 1a       	sub	r10, r28
    543a:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    543c:	4c 01       	movw	r8, r24
    543e:	8c 0e       	add	r8, r28
    5440:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    5442:	a0 91 59 0f 	lds	r26, 0x0F59	; 0x800f59 <__flp>
    5446:	b0 91 5a 0f 	lds	r27, 0x0F5A	; 0x800f5a <__flp+0x1>
    544a:	51 2c       	mov	r5, r1
    544c:	41 2c       	mov	r4, r1
    544e:	f1 2c       	mov	r15, r1
    5450:	e1 2c       	mov	r14, r1
    5452:	10 97       	sbiw	r26, 0x00	; 0
    5454:	01 f5       	brne	.+64     	; 0x5496 <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    5456:	80 91 cc 0e 	lds	r24, 0x0ECC	; 0x800ecc <__brkval>
    545a:	90 91 cd 0e 	lds	r25, 0x0ECD	; 0x800ecd <__brkval+0x1>
    545e:	88 15       	cp	r24, r8
    5460:	99 05       	cpc	r25, r9
    5462:	09 f0       	breq	.+2      	; 0x5466 <realloc+0xe2>
    5464:	56 c0       	rjmp	.+172    	; 0x5512 <realloc+0x18e>
    5466:	46 16       	cp	r4, r22
    5468:	57 06       	cpc	r5, r23
    546a:	08 f0       	brcs	.+2      	; 0x546e <realloc+0xea>
    546c:	52 c0       	rjmp	.+164    	; 0x5512 <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    546e:	8d b7       	in	r24, 0x3d	; 61
    5470:	9e b7       	in	r25, 0x3e	; 62
    5472:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    5476:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    547a:	84 1b       	sub	r24, r20
    547c:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    547e:	e8 17       	cp	r30, r24
    5480:	f9 07       	cpc	r31, r25
    5482:	08 f0       	brcs	.+2      	; 0x5486 <realloc+0x102>
    5484:	53 c0       	rjmp	.+166    	; 0x552c <realloc+0x1a8>
			__brkval = cp;
    5486:	f0 93 cd 0e 	sts	0x0ECD, r31	; 0x800ecd <__brkval+0x1>
    548a:	e0 93 cc 0e 	sts	0x0ECC, r30	; 0x800ecc <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    548e:	f9 01       	movw	r30, r18
    5490:	71 83       	std	Z+1, r23	; 0x01
    5492:	60 83       	st	Z, r22
			return ptr;
    5494:	be cf       	rjmp	.-132    	; 0x5412 <realloc+0x8e>
    5496:	8d 91       	ld	r24, X+
    5498:	9c 91       	ld	r25, X
    549a:	11 97       	sbiw	r26, 0x01	; 1
    549c:	12 96       	adiw	r26, 0x02	; 2
    549e:	6c 90       	ld	r6, X
    54a0:	12 97       	sbiw	r26, 0x02	; 2
    54a2:	13 96       	adiw	r26, 0x03	; 3
    54a4:	7c 90       	ld	r7, X
    54a6:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    54a8:	a8 15       	cp	r26, r8
    54aa:	b9 05       	cpc	r27, r9
    54ac:	59 f5       	brne	.+86     	; 0x5504 <realloc+0x180>
    54ae:	6c 01       	movw	r12, r24
    54b0:	42 e0       	ldi	r20, 0x02	; 2
    54b2:	c4 0e       	add	r12, r20
    54b4:	d1 1c       	adc	r13, r1
    54b6:	ca 14       	cp	r12, r10
    54b8:	db 04       	cpc	r13, r11
    54ba:	20 f1       	brcs	.+72     	; 0x5504 <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    54bc:	ac 01       	movw	r20, r24
    54be:	4a 19       	sub	r20, r10
    54c0:	5b 09       	sbc	r21, r11
    54c2:	da 01       	movw	r26, r20
    54c4:	12 96       	adiw	r26, 0x02	; 2
    54c6:	15 97       	sbiw	r26, 0x05	; 5
    54c8:	80 f0       	brcs	.+32     	; 0x54ea <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    54ca:	62 82       	std	Z+2, r6	; 0x02
    54cc:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    54ce:	51 83       	std	Z+1, r21	; 0x01
    54d0:	40 83       	st	Z, r20
				fp1->sz = len;
    54d2:	d9 01       	movw	r26, r18
    54d4:	6d 93       	st	X+, r22
    54d6:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    54d8:	e1 14       	cp	r14, r1
    54da:	f1 04       	cpc	r15, r1
    54dc:	71 f0       	breq	.+28     	; 0x54fa <realloc+0x176>
				ofp3->nx = fp2;
    54de:	d7 01       	movw	r26, r14
    54e0:	13 96       	adiw	r26, 0x03	; 3
    54e2:	fc 93       	st	X, r31
    54e4:	ee 93       	st	-X, r30
    54e6:	12 97       	sbiw	r26, 0x02	; 2
    54e8:	94 cf       	rjmp	.-216    	; 0x5412 <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    54ea:	22 96       	adiw	r28, 0x02	; 2
    54ec:	8c 0f       	add	r24, r28
    54ee:	9d 1f       	adc	r25, r29
    54f0:	f9 01       	movw	r30, r18
    54f2:	91 83       	std	Z+1, r25	; 0x01
    54f4:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    54f6:	f3 01       	movw	r30, r6
    54f8:	ef cf       	rjmp	.-34     	; 0x54d8 <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    54fa:	f0 93 5a 0f 	sts	0x0F5A, r31	; 0x800f5a <__flp+0x1>
    54fe:	e0 93 59 0f 	sts	0x0F59, r30	; 0x800f59 <__flp>
    5502:	87 cf       	rjmp	.-242    	; 0x5412 <realloc+0x8e>
    5504:	48 16       	cp	r4, r24
    5506:	59 06       	cpc	r5, r25
    5508:	08 f4       	brcc	.+2      	; 0x550c <realloc+0x188>
    550a:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    550c:	7d 01       	movw	r14, r26
    550e:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    5510:	a0 cf       	rjmp	.-192    	; 0x5452 <realloc+0xce>
    5512:	cb 01       	movw	r24, r22
    5514:	0e de       	rcall	.-996    	; 0x5132 <malloc>
    5516:	7c 01       	movw	r14, r24
    5518:	00 97       	sbiw	r24, 0x00	; 0
    551a:	41 f0       	breq	.+16     	; 0x552c <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    551c:	ae 01       	movw	r20, r28
    551e:	b8 01       	movw	r22, r16
    5520:	0e 94 c8 36 	call	0x6d90	; 0x6d90 <memcpy>
	free(ptr);
    5524:	c8 01       	movw	r24, r16
    5526:	a5 de       	rcall	.-694    	; 0x5272 <free>
	return memp;
    5528:	87 01       	movw	r16, r14
    552a:	73 cf       	rjmp	.-282    	; 0x5412 <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    552c:	10 e0       	ldi	r17, 0x00	; 0
    552e:	00 e0       	ldi	r16, 0x00	; 0
    5530:	70 cf       	rjmp	.-288    	; 0x5412 <realloc+0x8e>

00005532 <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    5532:	1d ba       	out	0x1d, r1	; 29
    5534:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    5538:	1c bc       	out	0x2c, r1	; 44
    553a:	10 be       	out	0x30, r1	; 48
    553c:	1f ba       	out	0x1f, r1	; 31
    553e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    5542:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    5546:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    554a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    554e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    5552:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5556:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    555a:	11 b8       	out	0x01, r1	; 1
    555c:	14 b8       	out	0x04, r1	; 4
    555e:	17 b8       	out	0x07, r1	; 7
    5560:	1a b8       	out	0x0a, r1	; 10
    5562:	1d b8       	out	0x0d, r1	; 13
    5564:	10 ba       	out	0x10, r1	; 16
    5566:	12 b8       	out	0x02, r1	; 2
    5568:	15 b8       	out	0x05, r1	; 5
    556a:	18 b8       	out	0x08, r1	; 8
    556c:	1b b8       	out	0x0b, r1	; 11
    556e:	1e b8       	out	0x0e, r1	; 14
    5570:	11 ba       	out	0x11, r1	; 17
    5572:	08 95       	ret

00005574 <_init_Teensyduino_internal_>:
    5574:	f8 94       	cli
    5576:	e1 e6       	ldi	r30, 0x61	; 97
    5578:	f0 e0       	ldi	r31, 0x00	; 0
    557a:	20 e8       	ldi	r18, 0x80	; 128
    557c:	20 83       	st	Z, r18
    557e:	10 82       	st	Z, r1
    5580:	83 e0       	ldi	r24, 0x03	; 3
    5582:	84 bd       	out	0x24, r24	; 36
    5584:	85 bd       	out	0x25, r24	; 37
    5586:	ee e6       	ldi	r30, 0x6E	; 110
    5588:	f0 e0       	ldi	r31, 0x00	; 0
    558a:	80 81       	ld	r24, Z
    558c:	81 60       	ori	r24, 0x01	; 1
    558e:	80 83       	st	Z, r24
    5590:	91 e0       	ldi	r25, 0x01	; 1
    5592:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5596:	82 e0       	ldi	r24, 0x02	; 2
    5598:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    559c:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    55a0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    55a4:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    55a8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    55ac:	86 e8       	ldi	r24, 0x86	; 134
    55ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    55b2:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    55b6:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    55ba:	d9 d1       	rcall	.+946    	; 0x596e <usb_init>
    55bc:	78 94       	sei
    55be:	08 95       	ret

000055c0 <analogRead>:
    55c0:	9a ed       	ldi	r25, 0xDA	; 218
    55c2:	98 0f       	add	r25, r24
    55c4:	98 30       	cpi	r25, 0x08	; 8
    55c6:	10 f1       	brcs	.+68     	; 0x560c <analogRead+0x4c>
    55c8:	88 30       	cpi	r24, 0x08	; 8
    55ca:	60 f4       	brcc	.+24     	; 0x55e4 <analogRead+0x24>
    55cc:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    55d0:	21 e0       	ldi	r18, 0x01	; 1
    55d2:	30 e0       	ldi	r19, 0x00	; 0
    55d4:	08 2e       	mov	r0, r24
    55d6:	01 c0       	rjmp	.+2      	; 0x55da <analogRead+0x1a>
    55d8:	22 0f       	add	r18, r18
    55da:	0a 94       	dec	r0
    55dc:	ea f7       	brpl	.-6      	; 0x55d8 <analogRead+0x18>
    55de:	92 2b       	or	r25, r18
    55e0:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    55e4:	8f 71       	andi	r24, 0x1F	; 31
    55e6:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    55ea:	89 2b       	or	r24, r25
    55ec:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    55f0:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    55f4:	80 64       	ori	r24, 0x40	; 64
    55f6:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    55fa:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    55fe:	86 fd       	sbrc	r24, 6
    5600:	fc cf       	rjmp	.-8      	; 0x55fa <analogRead+0x3a>
    5602:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    5606:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    560a:	08 95       	ret
    560c:	89 2f       	mov	r24, r25
    560e:	de cf       	rjmp	.-68     	; 0x55cc <analogRead+0xc>

00005610 <_pinMode_output>:
    5610:	8e 32       	cpi	r24, 0x2E	; 46
    5612:	70 f4       	brcc	.+28     	; 0x5630 <_pinMode_output+0x20>
    5614:	e8 ef       	ldi	r30, 0xF8	; 248
    5616:	f6 e0       	ldi	r31, 0x06	; 6
    5618:	88 0f       	add	r24, r24
    561a:	e8 0f       	add	r30, r24
    561c:	f1 1d       	adc	r31, r1
    561e:	25 91       	lpm	r18, Z+
    5620:	e4 91       	lpm	r30, Z
    5622:	f0 e0       	ldi	r31, 0x00	; 0
    5624:	9f b7       	in	r25, 0x3f	; 63
    5626:	f8 94       	cli
    5628:	81 81       	ldd	r24, Z+1	; 0x01
    562a:	82 2b       	or	r24, r18
    562c:	81 83       	std	Z+1, r24	; 0x01
    562e:	9f bf       	out	0x3f, r25	; 63
    5630:	08 95       	ret

00005632 <_digitalWrite_HIGH>:
    5632:	ee 32       	cpi	r30, 0x2E	; 46
    5634:	50 f4       	brcc	.+20     	; 0x564a <_digitalWrite_bailout>
    5636:	ee 0f       	add	r30, r30
    5638:	ea 5d       	subi	r30, 0xDA	; 218
    563a:	f4 4d       	sbci	r31, 0xD4	; 212
    563c:	09 94       	ijmp

0000563e <_digitalWrite_LOW>:
    563e:	ee 32       	cpi	r30, 0x2E	; 46
    5640:	20 f4       	brcc	.+8      	; 0x564a <_digitalWrite_bailout>
    5642:	ee 0f       	add	r30, r30
    5644:	ee 57       	subi	r30, 0x7E	; 126
    5646:	f4 4d       	sbci	r31, 0xD4	; 212
    5648:	09 94       	ijmp

0000564a <_digitalWrite_bailout>:
    564a:	08 95       	ret

0000564c <_digitalWrite_HIGH_TABLE>:
    564c:	58 9a       	sbi	0x0b, 0	; 11
    564e:	b6 c0       	rjmp	.+364    	; 0x57bc <_digitalWrite_OC0B>
    5650:	59 9a       	sbi	0x0b, 1	; 11
    5652:	d0 c0       	rjmp	.+416    	; 0x57f4 <_digitalWrite_OC2B>
    5654:	5a 9a       	sbi	0x0b, 2	; 11
    5656:	08 95       	ret
    5658:	5b 9a       	sbi	0x0b, 3	; 11
    565a:	08 95       	ret
    565c:	5c 9a       	sbi	0x0b, 4	; 11
    565e:	08 95       	ret
    5660:	5d 9a       	sbi	0x0b, 5	; 11
    5662:	08 95       	ret
    5664:	5e 9a       	sbi	0x0b, 6	; 11
    5666:	08 95       	ret
    5668:	5f 9a       	sbi	0x0b, 7	; 11
    566a:	08 95       	ret
    566c:	70 9a       	sbi	0x0e, 0	; 14
    566e:	08 95       	ret
    5670:	71 9a       	sbi	0x0e, 1	; 14
    5672:	08 95       	ret
    5674:	40 9a       	sbi	0x08, 0	; 8
    5676:	08 95       	ret
    5678:	41 9a       	sbi	0x08, 1	; 8
    567a:	08 95       	ret
    567c:	42 9a       	sbi	0x08, 2	; 8
    567e:	08 95       	ret
    5680:	43 9a       	sbi	0x08, 3	; 8
    5682:	08 95       	ret
    5684:	44 9a       	sbi	0x08, 4	; 8
    5686:	c8 c0       	rjmp	.+400    	; 0x5818 <_digitalWrite_OC3C>
    5688:	45 9a       	sbi	0x08, 5	; 8
    568a:	c0 c0       	rjmp	.+384    	; 0x580c <_digitalWrite_OC3B>
    568c:	46 9a       	sbi	0x08, 6	; 8
    568e:	b8 c0       	rjmp	.+368    	; 0x5800 <_digitalWrite_OC3A>
    5690:	47 9a       	sbi	0x08, 7	; 8
    5692:	08 95       	ret
    5694:	76 9a       	sbi	0x0e, 6	; 14
    5696:	08 95       	ret
    5698:	77 9a       	sbi	0x0e, 7	; 14
    569a:	08 95       	ret
    569c:	28 9a       	sbi	0x05, 0	; 5
    569e:	08 95       	ret
    56a0:	29 9a       	sbi	0x05, 1	; 5
    56a2:	08 95       	ret
    56a4:	2a 9a       	sbi	0x05, 2	; 5
    56a6:	08 95       	ret
    56a8:	2b 9a       	sbi	0x05, 3	; 5
    56aa:	08 95       	ret
    56ac:	2c 9a       	sbi	0x05, 4	; 5
    56ae:	9c c0       	rjmp	.+312    	; 0x57e8 <_digitalWrite_OC2A>
    56b0:	2d 9a       	sbi	0x05, 5	; 5
    56b2:	88 c0       	rjmp	.+272    	; 0x57c4 <_digitalWrite_OC1A>
    56b4:	2e 9a       	sbi	0x05, 6	; 5
    56b6:	8c c0       	rjmp	.+280    	; 0x57d0 <_digitalWrite_OC1B>
    56b8:	2f 9a       	sbi	0x05, 7	; 5
    56ba:	90 c0       	rjmp	.+288    	; 0x57dc <_digitalWrite_OC1C>
    56bc:	10 9a       	sbi	0x02, 0	; 2
    56be:	08 95       	ret
    56c0:	11 9a       	sbi	0x02, 1	; 2
    56c2:	08 95       	ret
    56c4:	12 9a       	sbi	0x02, 2	; 2
    56c6:	08 95       	ret
    56c8:	13 9a       	sbi	0x02, 3	; 2
    56ca:	08 95       	ret
    56cc:	14 9a       	sbi	0x02, 4	; 2
    56ce:	08 95       	ret
    56d0:	15 9a       	sbi	0x02, 5	; 2
    56d2:	08 95       	ret
    56d4:	16 9a       	sbi	0x02, 6	; 2
    56d6:	08 95       	ret
    56d8:	17 9a       	sbi	0x02, 7	; 2
    56da:	08 95       	ret
    56dc:	74 9a       	sbi	0x0e, 4	; 14
    56de:	08 95       	ret
    56e0:	75 9a       	sbi	0x0e, 5	; 14
    56e2:	08 95       	ret
    56e4:	88 9a       	sbi	0x11, 0	; 17
    56e6:	08 95       	ret
    56e8:	89 9a       	sbi	0x11, 1	; 17
    56ea:	08 95       	ret
    56ec:	8a 9a       	sbi	0x11, 2	; 17
    56ee:	08 95       	ret
    56f0:	8b 9a       	sbi	0x11, 3	; 17
    56f2:	08 95       	ret
    56f4:	8c 9a       	sbi	0x11, 4	; 17
    56f6:	08 95       	ret
    56f8:	8d 9a       	sbi	0x11, 5	; 17
    56fa:	08 95       	ret
    56fc:	8e 9a       	sbi	0x11, 6	; 17
    56fe:	08 95       	ret
    5700:	8f 9a       	sbi	0x11, 7	; 17
    5702:	08 95       	ret

00005704 <_digitalWrite_LOW_TABLE>:
    5704:	58 98       	cbi	0x0b, 0	; 11
    5706:	5a c0       	rjmp	.+180    	; 0x57bc <_digitalWrite_OC0B>
    5708:	59 98       	cbi	0x0b, 1	; 11
    570a:	74 c0       	rjmp	.+232    	; 0x57f4 <_digitalWrite_OC2B>
    570c:	5a 98       	cbi	0x0b, 2	; 11
    570e:	08 95       	ret
    5710:	5b 98       	cbi	0x0b, 3	; 11
    5712:	08 95       	ret
    5714:	5c 98       	cbi	0x0b, 4	; 11
    5716:	08 95       	ret
    5718:	5d 98       	cbi	0x0b, 5	; 11
    571a:	08 95       	ret
    571c:	5e 98       	cbi	0x0b, 6	; 11
    571e:	08 95       	ret
    5720:	5f 98       	cbi	0x0b, 7	; 11
    5722:	08 95       	ret
    5724:	70 98       	cbi	0x0e, 0	; 14
    5726:	08 95       	ret
    5728:	71 98       	cbi	0x0e, 1	; 14
    572a:	08 95       	ret
    572c:	40 98       	cbi	0x08, 0	; 8
    572e:	08 95       	ret
    5730:	41 98       	cbi	0x08, 1	; 8
    5732:	08 95       	ret
    5734:	42 98       	cbi	0x08, 2	; 8
    5736:	08 95       	ret
    5738:	43 98       	cbi	0x08, 3	; 8
    573a:	08 95       	ret
    573c:	44 98       	cbi	0x08, 4	; 8
    573e:	6c c0       	rjmp	.+216    	; 0x5818 <_digitalWrite_OC3C>
    5740:	45 98       	cbi	0x08, 5	; 8
    5742:	64 c0       	rjmp	.+200    	; 0x580c <_digitalWrite_OC3B>
    5744:	46 98       	cbi	0x08, 6	; 8
    5746:	5c c0       	rjmp	.+184    	; 0x5800 <_digitalWrite_OC3A>
    5748:	47 98       	cbi	0x08, 7	; 8
    574a:	08 95       	ret
    574c:	76 98       	cbi	0x0e, 6	; 14
    574e:	08 95       	ret
    5750:	77 98       	cbi	0x0e, 7	; 14
    5752:	08 95       	ret
    5754:	28 98       	cbi	0x05, 0	; 5
    5756:	08 95       	ret
    5758:	29 98       	cbi	0x05, 1	; 5
    575a:	08 95       	ret
    575c:	2a 98       	cbi	0x05, 2	; 5
    575e:	08 95       	ret
    5760:	2b 98       	cbi	0x05, 3	; 5
    5762:	08 95       	ret
    5764:	2c 98       	cbi	0x05, 4	; 5
    5766:	40 c0       	rjmp	.+128    	; 0x57e8 <_digitalWrite_OC2A>
    5768:	2d 98       	cbi	0x05, 5	; 5
    576a:	2c c0       	rjmp	.+88     	; 0x57c4 <_digitalWrite_OC1A>
    576c:	2e 98       	cbi	0x05, 6	; 5
    576e:	30 c0       	rjmp	.+96     	; 0x57d0 <_digitalWrite_OC1B>
    5770:	2f 98       	cbi	0x05, 7	; 5
    5772:	34 c0       	rjmp	.+104    	; 0x57dc <_digitalWrite_OC1C>
    5774:	10 98       	cbi	0x02, 0	; 2
    5776:	08 95       	ret
    5778:	11 98       	cbi	0x02, 1	; 2
    577a:	08 95       	ret
    577c:	12 98       	cbi	0x02, 2	; 2
    577e:	08 95       	ret
    5780:	13 98       	cbi	0x02, 3	; 2
    5782:	08 95       	ret
    5784:	14 98       	cbi	0x02, 4	; 2
    5786:	08 95       	ret
    5788:	15 98       	cbi	0x02, 5	; 2
    578a:	08 95       	ret
    578c:	16 98       	cbi	0x02, 6	; 2
    578e:	08 95       	ret
    5790:	17 98       	cbi	0x02, 7	; 2
    5792:	08 95       	ret
    5794:	74 98       	cbi	0x0e, 4	; 14
    5796:	08 95       	ret
    5798:	75 98       	cbi	0x0e, 5	; 14
    579a:	08 95       	ret
    579c:	88 98       	cbi	0x11, 0	; 17
    579e:	08 95       	ret
    57a0:	89 98       	cbi	0x11, 1	; 17
    57a2:	08 95       	ret
    57a4:	8a 98       	cbi	0x11, 2	; 17
    57a6:	08 95       	ret
    57a8:	8b 98       	cbi	0x11, 3	; 17
    57aa:	08 95       	ret
    57ac:	8c 98       	cbi	0x11, 4	; 17
    57ae:	08 95       	ret
    57b0:	8d 98       	cbi	0x11, 5	; 17
    57b2:	08 95       	ret
    57b4:	8e 98       	cbi	0x11, 6	; 17
    57b6:	08 95       	ret
    57b8:	8f 98       	cbi	0x11, 7	; 17
    57ba:	08 95       	ret

000057bc <_digitalWrite_OC0B>:
    57bc:	e4 b5       	in	r30, 0x24	; 36
    57be:	ef 7d       	andi	r30, 0xDF	; 223
    57c0:	e4 bd       	out	0x24, r30	; 36
    57c2:	08 95       	ret

000057c4 <_digitalWrite_OC1A>:
    57c4:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57c8:	ef 77       	andi	r30, 0x7F	; 127
    57ca:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57ce:	08 95       	ret

000057d0 <_digitalWrite_OC1B>:
    57d0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57d4:	ef 7d       	andi	r30, 0xDF	; 223
    57d6:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57da:	08 95       	ret

000057dc <_digitalWrite_OC1C>:
    57dc:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57e0:	e7 7f       	andi	r30, 0xF7	; 247
    57e2:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    57e6:	08 95       	ret

000057e8 <_digitalWrite_OC2A>:
    57e8:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57ec:	ef 77       	andi	r30, 0x7F	; 127
    57ee:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57f2:	08 95       	ret

000057f4 <_digitalWrite_OC2B>:
    57f4:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57f8:	ef 7d       	andi	r30, 0xDF	; 223
    57fa:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    57fe:	08 95       	ret

00005800 <_digitalWrite_OC3A>:
    5800:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5804:	ef 77       	andi	r30, 0x7F	; 127
    5806:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    580a:	08 95       	ret

0000580c <_digitalWrite_OC3B>:
    580c:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5810:	ef 7d       	andi	r30, 0xDF	; 223
    5812:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5816:	08 95       	ret

00005818 <_digitalWrite_OC3C>:
    5818:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    581c:	e7 7f       	andi	r30, 0xF7	; 247
    581e:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5822:	08 95       	ret

00005824 <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    5824:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    5826:	84 b7       	in	r24, 0x34	; 52
    5828:	87 7f       	andi	r24, 0xF7	; 247
    582a:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    582c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    5830:	80 61       	ori	r24, 0x10	; 16
    5832:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    5836:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    583a:	80 e2       	ldi	r24, 0x20	; 32
    583c:	9e e4       	ldi	r25, 0x4E	; 78

0000583e <L_1164_loop>:
    583e:	01 97       	sbiw	r24, 0x01	; 1
    5840:	f1 f7       	brne	.-4      	; 0x583e <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    5842:	81 e0       	ldi	r24, 0x01	; 1
    5844:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    5848:	80 e2       	ldi	r24, 0x20	; 32
    584a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    584e:	80 e6       	ldi	r24, 0x60	; 96
    5850:	9a ee       	ldi	r25, 0xEA	; 234

00005852 <L_1178_loop>:
    5852:	01 97       	sbiw	r24, 0x01	; 1
    5854:	f1 f7       	brne	.-4      	; 0x5852 <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    5856:	6d de       	rcall	.-806    	; 0x5532 <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    5858:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    585c:	ff cf       	rjmp	.-2      	; 0x585c <L_1178_loop+0xa>

0000585e <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    585e:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    5860:	68 de       	rcall	.-816    	; 0x5532 <disable_peripherals>
    5862:	80 e6       	ldi	r24, 0x60	; 96
    5864:	9a ee       	ldi	r25, 0xEA	; 234

00005866 <L_1203_loop>:
    5866:	01 97       	sbiw	r24, 0x01	; 1
    5868:	f1 f7       	brne	.-4      	; 0x5866 <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    586a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    586e:	ff cf       	rjmp	.-2      	; 0x586e <L_1203_loop+0x8>

00005870 <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    5870:	8f 93       	push	r24
    5872:	8f b7       	in	r24, 0x3f	; 63
    5874:	8f 93       	push	r24
    5876:	80 91 ce 0e 	lds	r24, 0x0ECE	; 0x800ece <timer0_fract_count>
    587a:	8d 5f       	subi	r24, 0xFD	; 253
    587c:	8d 37       	cpi	r24, 0x7D	; 125
    587e:	d0 f4       	brcc	.+52     	; 0x58b4 <L_1218_fract_roll>

00005880 <L_1218_fract_noroll>:
    5880:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <timer0_fract_count>
    5884:	80 91 cf 0e 	lds	r24, 0x0ECF	; 0x800ecf <timer0_millis_count>
    5888:	8f 5f       	subi	r24, 0xFF	; 255
    588a:	80 93 cf 0e 	sts	0x0ECF, r24	; 0x800ecf <timer0_millis_count>
    588e:	d8 f0       	brcs	.+54     	; 0x58c6 <L_1218_ovcount>

00005890 <L_1218_millis_inc_sext>:
    5890:	80 91 d0 0e 	lds	r24, 0x0ED0	; 0x800ed0 <timer0_millis_count+0x1>
    5894:	8f 4f       	sbci	r24, 0xFF	; 255
    5896:	80 93 d0 0e 	sts	0x0ED0, r24	; 0x800ed0 <timer0_millis_count+0x1>
    589a:	a8 f0       	brcs	.+42     	; 0x58c6 <L_1218_ovcount>
    589c:	80 91 d1 0e 	lds	r24, 0x0ED1	; 0x800ed1 <timer0_millis_count+0x2>
    58a0:	8f 4f       	sbci	r24, 0xFF	; 255
    58a2:	80 93 d1 0e 	sts	0x0ED1, r24	; 0x800ed1 <timer0_millis_count+0x2>
    58a6:	78 f0       	brcs	.+30     	; 0x58c6 <L_1218_ovcount>
    58a8:	80 91 d2 0e 	lds	r24, 0x0ED2	; 0x800ed2 <timer0_millis_count+0x3>
    58ac:	8f 4f       	sbci	r24, 0xFF	; 255
    58ae:	80 93 d2 0e 	sts	0x0ED2, r24	; 0x800ed2 <timer0_millis_count+0x3>
    58b2:	09 c0       	rjmp	.+18     	; 0x58c6 <L_1218_ovcount>

000058b4 <L_1218_fract_roll>:
    58b4:	8d 57       	subi	r24, 0x7D	; 125
    58b6:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <timer0_fract_count>
    58ba:	80 91 cf 0e 	lds	r24, 0x0ECF	; 0x800ecf <timer0_millis_count>
    58be:	8e 5f       	subi	r24, 0xFE	; 254
    58c0:	80 93 cf 0e 	sts	0x0ECF, r24	; 0x800ecf <timer0_millis_count>
    58c4:	28 f7       	brcc	.-54     	; 0x5890 <L_1218_millis_inc_sext>

000058c6 <L_1218_ovcount>:
    58c6:	80 91 d3 0e 	lds	r24, 0x0ED3	; 0x800ed3 <timer0_micros_count>
    58ca:	8c 5f       	subi	r24, 0xFC	; 252
    58cc:	80 93 d3 0e 	sts	0x0ED3, r24	; 0x800ed3 <timer0_micros_count>
    58d0:	58 f0       	brcs	.+22     	; 0x58e8 <L_1218_end>
    58d2:	80 91 d4 0e 	lds	r24, 0x0ED4	; 0x800ed4 <timer0_micros_count+0x1>
    58d6:	8f 4f       	sbci	r24, 0xFF	; 255
    58d8:	80 93 d4 0e 	sts	0x0ED4, r24	; 0x800ed4 <timer0_micros_count+0x1>
    58dc:	28 f0       	brcs	.+10     	; 0x58e8 <L_1218_end>
    58de:	80 91 d5 0e 	lds	r24, 0x0ED5	; 0x800ed5 <timer0_micros_count+0x2>
    58e2:	8f 4f       	sbci	r24, 0xFF	; 255
    58e4:	80 93 d5 0e 	sts	0x0ED5, r24	; 0x800ed5 <timer0_micros_count+0x2>

000058e8 <L_1218_end>:
    58e8:	8f 91       	pop	r24
    58ea:	8f bf       	out	0x3f, r24	; 63
    58ec:	8f 91       	pop	r24
    58ee:	18 95       	reti

000058f0 <delay>:
	);
}


void delay(uint32_t ms)
{
    58f0:	cf 92       	push	r12
    58f2:	df 92       	push	r13
    58f4:	ef 92       	push	r14
    58f6:	ff 92       	push	r15
    58f8:	6b 01       	movw	r12, r22
    58fa:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    58fc:	19 d0       	rcall	.+50     	; 0x5930 <_micros>
	uint16_t start = (uint16_t)micros();
    58fe:	9b 01       	movw	r18, r22

	while (ms > 0) {
    5900:	c1 14       	cp	r12, r1
    5902:	d1 04       	cpc	r13, r1
    5904:	e1 04       	cpc	r14, r1
    5906:	f1 04       	cpc	r15, r1
    5908:	29 f4       	brne	.+10     	; 0x5914 <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    590a:	ff 90       	pop	r15
    590c:	ef 90       	pop	r14
    590e:	df 90       	pop	r13
    5910:	cf 90       	pop	r12
    5912:	08 95       	ret
    5914:	0d d0       	rcall	.+26     	; 0x5930 <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    5916:	62 1b       	sub	r22, r18
    5918:	73 0b       	sbc	r23, r19
    591a:	68 3e       	cpi	r22, 0xE8	; 232
    591c:	73 40       	sbci	r23, 0x03	; 3
    591e:	80 f3       	brcs	.-32     	; 0x5900 <delay+0x10>
			ms--;
    5920:	81 e0       	ldi	r24, 0x01	; 1
    5922:	c8 1a       	sub	r12, r24
    5924:	d1 08       	sbc	r13, r1
    5926:	e1 08       	sbc	r14, r1
    5928:	f1 08       	sbc	r15, r1
			start += 1000;
    592a:	28 51       	subi	r18, 0x18	; 24
    592c:	3c 4f       	sbci	r19, 0xFC	; 252
    592e:	e8 cf       	rjmp	.-48     	; 0x5900 <delay+0x10>

00005930 <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    5930:	0f b6       	in	r0, 0x3f	; 63
    5932:	f8 94       	cli
    5934:	66 b5       	in	r22, 0x26	; 38
    5936:	15 b2       	in	r1, 0x15	; 21
    5938:	70 91 d3 0e 	lds	r23, 0x0ED3	; 0x800ed3 <timer0_micros_count>
    593c:	80 91 d4 0e 	lds	r24, 0x0ED4	; 0x800ed4 <timer0_micros_count+0x1>
    5940:	90 91 d5 0e 	lds	r25, 0x0ED5	; 0x800ed5 <timer0_micros_count+0x2>
    5944:	0f be       	out	0x3f, r0	; 63
    5946:	10 fe       	sbrs	r1, 0
    5948:	05 c0       	rjmp	.+10     	; 0x5954 <L_1296_skip>
    594a:	6f 3f       	cpi	r22, 0xFF	; 255
    594c:	19 f0       	breq	.+6      	; 0x5954 <L_1296_skip>
    594e:	7c 5f       	subi	r23, 0xFC	; 252
    5950:	8f 4f       	sbci	r24, 0xFF	; 255
    5952:	9f 4f       	sbci	r25, 0xFF	; 255

00005954 <L_1296_skip>:
    5954:	11 24       	eor	r1, r1
    5956:	00 24       	eor	r0, r0
    5958:	66 0f       	add	r22, r22
    595a:	00 1c       	adc	r0, r0
    595c:	66 0f       	add	r22, r22
    595e:	00 1c       	adc	r0, r0
    5960:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    5962:	08 95       	ret

00005964 <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    5964:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5968:	80 ff       	sbrs	r24, 0
    596a:	fc cf       	rjmp	.-8      	; 0x5964 <usb_wait_in_ready>
    596c:	08 95       	ret

0000596e <usb_init>:
    596e:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    5972:	87 ff       	sbrs	r24, 7
    5974:	02 c0       	rjmp	.+4      	; 0x597a <usb_init+0xc>
    5976:	85 ff       	sbrs	r24, 5
    5978:	1b c0       	rjmp	.+54     	; 0x59b0 <usb_init+0x42>
    597a:	81 e8       	ldi	r24, 0x81	; 129
    597c:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    5980:	80 ea       	ldi	r24, 0xA0	; 160
    5982:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    5986:	86 e1       	ldi	r24, 0x16	; 22
    5988:	89 bd       	out	0x29, r24	; 41
    598a:	09 b4       	in	r0, 0x29	; 41
    598c:	00 fe       	sbrs	r0, 0
    598e:	fd cf       	rjmp	.-6      	; 0x598a <usb_init+0x1c>
    5990:	80 e9       	ldi	r24, 0x90	; 144
    5992:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    5996:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    599a:	10 92 5d 0f 	sts	0x0F5D, r1	; 0x800f5d <usb_configuration>
    599e:	10 92 5c 0f 	sts	0x0F5C, r1	; 0x800f5c <usb_suspended>
    59a2:	10 92 5b 0f 	sts	0x0F5B, r1	; 0x800f5b <__bss_end>
    59a6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    59aa:	8d e0       	ldi	r24, 0x0D	; 13
    59ac:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    59b0:	08 95       	ret

000059b2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    59b2:	1f 92       	push	r1
    59b4:	0f 92       	push	r0
    59b6:	0f b6       	in	r0, 0x3f	; 63
    59b8:	0f 92       	push	r0
    59ba:	11 24       	eor	r1, r1
    59bc:	0b b6       	in	r0, 0x3b	; 59
    59be:	0f 92       	push	r0
    59c0:	2f 93       	push	r18
    59c2:	3f 93       	push	r19
    59c4:	4f 93       	push	r20
    59c6:	5f 93       	push	r21
    59c8:	6f 93       	push	r22
    59ca:	7f 93       	push	r23
    59cc:	8f 93       	push	r24
    59ce:	9f 93       	push	r25
    59d0:	af 93       	push	r26
    59d2:	bf 93       	push	r27
    59d4:	ef 93       	push	r30
    59d6:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    59d8:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    59dc:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    59e0:	93 ff       	sbrs	r25, 3
    59e2:	11 c0       	rjmp	.+34     	; 0x5a06 <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    59e4:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    59e8:	81 e0       	ldi	r24, 0x01	; 1
    59ea:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    59ee:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    59f2:	82 e2       	ldi	r24, 0x22	; 34
    59f4:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    59f8:	88 e0       	ldi	r24, 0x08	; 8
    59fa:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    59fe:	10 92 5d 0f 	sts	0x0F5D, r1	; 0x800f5d <usb_configuration>
		cdc_line_rtsdtr = 0;
    5a02:	10 92 5b 0f 	sts	0x0F5B, r1	; 0x800f5b <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    5a06:	92 ff       	sbrs	r25, 2
    5a08:	1d c0       	rjmp	.+58     	; 0x5a44 <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    5a0a:	80 91 5d 0f 	lds	r24, 0x0F5D	; 0x800f5d <usb_configuration>
    5a0e:	88 23       	and	r24, r24
    5a10:	c9 f0       	breq	.+50     	; 0x5a44 <__vector_10+0x92>
			t = transmit_flush_timer;
    5a12:	80 91 d9 0e 	lds	r24, 0x0ED9	; 0x800ed9 <transmit_flush_timer>
			if (t) {
    5a16:	88 23       	and	r24, r24
    5a18:	59 f0       	breq	.+22     	; 0x5a30 <__vector_10+0x7e>
				transmit_flush_timer = --t;
    5a1a:	81 50       	subi	r24, 0x01	; 1
    5a1c:	80 93 d9 0e 	sts	0x0ED9, r24	; 0x800ed9 <transmit_flush_timer>
				if (!t) {
    5a20:	81 11       	cpse	r24, r1
    5a22:	06 c0       	rjmp	.+12     	; 0x5a30 <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    5a24:	84 e0       	ldi	r24, 0x04	; 4
    5a26:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    5a2a:	8a e3       	ldi	r24, 0x3A	; 58
    5a2c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    5a30:	80 91 d8 0e 	lds	r24, 0x0ED8	; 0x800ed8 <reboot_timer>
			if (t) {
    5a34:	88 23       	and	r24, r24
    5a36:	31 f0       	breq	.+12     	; 0x5a44 <__vector_10+0x92>
				reboot_timer = --t;
    5a38:	81 50       	subi	r24, 0x01	; 1
    5a3a:	80 93 d8 0e 	sts	0x0ED8, r24	; 0x800ed8 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    5a3e:	81 11       	cpse	r24, r1
    5a40:	01 c0       	rjmp	.+2      	; 0x5a44 <__vector_10+0x92>
    5a42:	f0 de       	rcall	.-544    	; 0x5824 <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    5a44:	90 ff       	sbrs	r25, 0
    5a46:	0c c0       	rjmp	.+24     	; 0x5a60 <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    5a48:	80 e1       	ldi	r24, 0x10	; 16
    5a4a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    5a4e:	10 92 5d 0f 	sts	0x0F5D, r1	; 0x800f5d <usb_configuration>
		usb_suspended = 1;
    5a52:	81 e0       	ldi	r24, 0x01	; 1
    5a54:	80 93 5c 0f 	sts	0x0F5C, r24	; 0x800f5c <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    5a58:	80 ea       	ldi	r24, 0xA0	; 160
    5a5a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    5a5e:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    5a60:	80 91 5c 0f 	lds	r24, 0x0F5C	; 0x800f5c <usb_suspended>
    5a64:	88 23       	and	r24, r24
    5a66:	79 f0       	breq	.+30     	; 0x5a86 <__vector_10+0xd4>
    5a68:	94 ff       	sbrs	r25, 4
    5a6a:	0d c0       	rjmp	.+26     	; 0x5a86 <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    5a6c:	86 e1       	ldi	r24, 0x16	; 22
    5a6e:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    5a70:	09 b4       	in	r0, 0x29	; 41
    5a72:	00 fe       	sbrs	r0, 0
    5a74:	fd cf       	rjmp	.-6      	; 0x5a70 <__vector_10+0xbe>
		USB_CONFIG();
    5a76:	80 e9       	ldi	r24, 0x90	; 144
    5a78:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    5a7c:	8d e0       	ldi	r24, 0x0D	; 13
    5a7e:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    5a82:	10 92 5c 0f 	sts	0x0F5C, r1	; 0x800f5c <usb_suspended>
		return;
	}
}
    5a86:	ff 91       	pop	r31
    5a88:	ef 91       	pop	r30
    5a8a:	bf 91       	pop	r27
    5a8c:	af 91       	pop	r26
    5a8e:	9f 91       	pop	r25
    5a90:	8f 91       	pop	r24
    5a92:	7f 91       	pop	r23
    5a94:	6f 91       	pop	r22
    5a96:	5f 91       	pop	r21
    5a98:	4f 91       	pop	r20
    5a9a:	3f 91       	pop	r19
    5a9c:	2f 91       	pop	r18
    5a9e:	0f 90       	pop	r0
    5aa0:	0b be       	out	0x3b, r0	; 59
    5aa2:	0f 90       	pop	r0
    5aa4:	0f be       	out	0x3f, r0	; 63
    5aa6:	0f 90       	pop	r0
    5aa8:	1f 90       	pop	r1
    5aaa:	18 95       	reti

00005aac <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    5aac:	1f 92       	push	r1
    5aae:	0f 92       	push	r0
    5ab0:	0f b6       	in	r0, 0x3f	; 63
    5ab2:	0f 92       	push	r0
    5ab4:	11 24       	eor	r1, r1
    5ab6:	0b b6       	in	r0, 0x3b	; 59
    5ab8:	0f 92       	push	r0
    5aba:	ef 92       	push	r14
    5abc:	ff 92       	push	r15
    5abe:	0f 93       	push	r16
    5ac0:	1f 93       	push	r17
    5ac2:	2f 93       	push	r18
    5ac4:	3f 93       	push	r19
    5ac6:	4f 93       	push	r20
    5ac8:	5f 93       	push	r21
    5aca:	6f 93       	push	r22
    5acc:	7f 93       	push	r23
    5ace:	8f 93       	push	r24
    5ad0:	9f 93       	push	r25
    5ad2:	af 93       	push	r26
    5ad4:	bf 93       	push	r27
    5ad6:	cf 93       	push	r28
    5ad8:	df 93       	push	r29
    5ada:	ef 93       	push	r30
    5adc:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    5ade:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    5ae2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    5ae6:	83 ff       	sbrs	r24, 3
    5ae8:	20 c0       	rjmp	.+64     	; 0x5b2a <__vector_11+0x7e>
		bmRequestType = UEDATX;
    5aea:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    5aee:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    5af2:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5af6:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    5afa:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5afe:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    5b02:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5b06:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    5b0a:	82 ef       	ldi	r24, 0xF2	; 242
    5b0c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    5b10:	c6 30       	cpi	r28, 0x06	; 6
    5b12:	09 f0       	breq	.+2      	; 0x5b16 <__vector_11+0x6a>
    5b14:	5b c0       	rjmp	.+182    	; 0x5bcc <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    5b16:	e4 e5       	ldi	r30, 0x54	; 84
    5b18:	f7 e0       	ldi	r31, 0x07	; 7
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    5b1a:	85 91       	lpm	r24, Z+
    5b1c:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    5b1e:	e8 16       	cp	r14, r24
    5b20:	f9 06       	cpc	r15, r25
    5b22:	39 f0       	breq	.+14     	; 0x5b32 <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    5b24:	35 96       	adiw	r30, 0x05	; 5
    5b26:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    5b28:	c1 f7       	brne	.-16     	; 0x5b1a <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    5b2a:	81 e2       	ldi	r24, 0x21	; 33
    5b2c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    5b30:	2b c0       	rjmp	.+86     	; 0x5b88 <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    5b32:	85 91       	lpm	r24, Z+
    5b34:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    5b36:	08 17       	cp	r16, r24
    5b38:	19 07       	cpc	r17, r25
    5b3a:	11 f0       	breq	.+4      	; 0x5b40 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    5b3c:	33 96       	adiw	r30, 0x03	; 3
					continue;
    5b3e:	f3 cf       	rjmp	.-26     	; 0x5b26 <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    5b40:	45 91       	lpm	r20, Z+
    5b42:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    5b44:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    5b46:	2f 3f       	cpi	r18, 0xFF	; 255
    5b48:	31 05       	cpc	r19, r1
    5b4a:	19 f0       	breq	.+6      	; 0x5b52 <__vector_11+0xa6>
    5b4c:	10 f0       	brcs	.+4      	; 0x5b52 <__vector_11+0xa6>
    5b4e:	2f ef       	ldi	r18, 0xFF	; 255
    5b50:	30 e0       	ldi	r19, 0x00	; 0
    5b52:	82 17       	cp	r24, r18
    5b54:	08 f4       	brcc	.+2      	; 0x5b58 <__vector_11+0xac>
    5b56:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5b58:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    5b5a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    5b5e:	98 2f       	mov	r25, r24
    5b60:	95 70       	andi	r25, 0x05	; 5
    5b62:	d9 f3       	breq	.-10     	; 0x5b5a <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    5b64:	82 fd       	sbrc	r24, 2
    5b66:	10 c0       	rjmp	.+32     	; 0x5b88 <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    5b68:	82 2f       	mov	r24, r18
    5b6a:	21 32       	cpi	r18, 0x21	; 33
    5b6c:	08 f0       	brcs	.+2      	; 0x5b70 <__vector_11+0xc4>
    5b6e:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    5b70:	98 2f       	mov	r25, r24
    5b72:	91 11       	cpse	r25, r1
    5b74:	24 c0       	rjmp	.+72     	; 0x5bbe <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    5b76:	92 2f       	mov	r25, r18
    5b78:	98 1b       	sub	r25, r24
    5b7a:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5b7c:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    5b80:	91 11       	cpse	r25, r1
    5b82:	1b c0       	rjmp	.+54     	; 0x5bba <__vector_11+0x10e>
    5b84:	20 32       	cpi	r18, 0x20	; 32
    5b86:	c8 f4       	brcc	.+50     	; 0x5bba <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    5b88:	ff 91       	pop	r31
    5b8a:	ef 91       	pop	r30
    5b8c:	df 91       	pop	r29
    5b8e:	cf 91       	pop	r28
    5b90:	bf 91       	pop	r27
    5b92:	af 91       	pop	r26
    5b94:	9f 91       	pop	r25
    5b96:	8f 91       	pop	r24
    5b98:	7f 91       	pop	r23
    5b9a:	6f 91       	pop	r22
    5b9c:	5f 91       	pop	r21
    5b9e:	4f 91       	pop	r20
    5ba0:	3f 91       	pop	r19
    5ba2:	2f 91       	pop	r18
    5ba4:	1f 91       	pop	r17
    5ba6:	0f 91       	pop	r16
    5ba8:	ff 90       	pop	r15
    5baa:	ef 90       	pop	r14
    5bac:	0f 90       	pop	r0
    5bae:	0b be       	out	0x3b, r0	; 59
    5bb0:	0f 90       	pop	r0
    5bb2:	0f be       	out	0x3f, r0	; 63
    5bb4:	0f 90       	pop	r0
    5bb6:	1f 90       	pop	r1
    5bb8:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    5bba:	28 2f       	mov	r18, r24
    5bbc:	ce cf       	rjmp	.-100    	; 0x5b5a <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    5bbe:	fa 01       	movw	r30, r20
    5bc0:	45 91       	lpm	r20, Z+
    5bc2:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5bc6:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    5bc8:	91 50       	subi	r25, 0x01	; 1
    5bca:	d3 cf       	rjmp	.-90     	; 0x5b72 <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    5bcc:	c5 30       	cpi	r28, 0x05	; 5
    5bce:	49 f4       	brne	.+18     	; 0x5be2 <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5bd0:	8e ef       	ldi	r24, 0xFE	; 254
    5bd2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    5bd6:	c6 de       	rcall	.-628    	; 0x5964 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    5bd8:	8e 2d       	mov	r24, r14
    5bda:	80 68       	ori	r24, 0x80	; 128
    5bdc:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    5be0:	d3 cf       	rjmp	.-90     	; 0x5b88 <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    5be2:	c9 30       	cpi	r28, 0x09	; 9
    5be4:	21 f5       	brne	.+72     	; 0x5c2e <__vector_11+0x182>
    5be6:	d1 11       	cpse	r29, r1
    5be8:	a0 cf       	rjmp	.-192    	; 0x5b2a <__vector_11+0x7e>
			usb_configuration = wValue;
    5bea:	e0 92 5d 0f 	sts	0x0F5D, r14	; 0x800f5d <usb_configuration>
			cdc_line_rtsdtr = 0;
    5bee:	10 92 5b 0f 	sts	0x0F5B, r1	; 0x800f5b <__bss_end>
			transmit_flush_timer = 0;
    5bf2:	10 92 d9 0e 	sts	0x0ED9, r1	; 0x800ed9 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5bf6:	8e ef       	ldi	r24, 0xFE	; 254
    5bf8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    5bfc:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    5bfe:	e7 e1       	ldi	r30, 0x17	; 23
    5c00:	f8 e0       	ldi	r31, 0x08	; 8
			for (i=1; i<5; i++) {
				UENUM = i;
    5c02:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    5c06:	95 91       	lpm	r25, Z+
				UECONX = en;
    5c08:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    5c0c:	99 23       	and	r25, r25
    5c0e:	31 f0       	breq	.+12     	; 0x5c1c <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    5c10:	95 91       	lpm	r25, Z+
    5c12:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    5c16:	95 91       	lpm	r25, Z+
    5c18:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    5c1c:	8f 5f       	subi	r24, 0xFF	; 255
    5c1e:	85 30       	cpi	r24, 0x05	; 5
    5c20:	81 f7       	brne	.-32     	; 0x5c02 <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    5c22:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    5c24:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    5c28:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    5c2c:	ad cf       	rjmp	.-166    	; 0x5b88 <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    5c2e:	c8 30       	cpi	r28, 0x08	; 8
    5c30:	61 f4       	brne	.+24     	; 0x5c4a <__vector_11+0x19e>
    5c32:	d0 38       	cpi	r29, 0x80	; 128
    5c34:	09 f0       	breq	.+2      	; 0x5c38 <__vector_11+0x18c>
			usb_wait_in_ready();
    5c36:	79 cf       	rjmp	.-270    	; 0x5b2a <__vector_11+0x7e>
    5c38:	95 de       	rcall	.-726    	; 0x5964 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    5c3a:	80 91 5d 0f 	lds	r24, 0x0F5D	; 0x800f5d <usb_configuration>
    5c3e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5c42:	8e ef       	ldi	r24, 0xFE	; 254
    5c44:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5c48:	9f cf       	rjmp	.-194    	; 0x5b88 <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    5c4a:	c1 32       	cpi	r28, 0x21	; 33
    5c4c:	79 f4       	brne	.+30     	; 0x5c6c <__vector_11+0x1c0>
    5c4e:	d1 3a       	cpi	r29, 0xA1	; 161
    5c50:	09 f0       	breq	.+2      	; 0x5c54 <__vector_11+0x1a8>
			usb_wait_in_ready();
    5c52:	6b cf       	rjmp	.-298    	; 0x5b2a <__vector_11+0x7e>
    5c54:	87 de       	rcall	.-754    	; 0x5964 <usb_wait_in_ready>
			p = cdc_line_coding;
    5c56:	e1 e1       	ldi	r30, 0x11	; 17
    5c58:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    5c5a:	80 81       	ld	r24, Z
    5c5c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5c60:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    5c62:	81 e0       	ldi	r24, 0x01	; 1
    5c64:	e8 31       	cpi	r30, 0x18	; 24
    5c66:	f8 07       	cpc	r31, r24
    5c68:	c1 f7       	brne	.-16     	; 0x5c5a <__vector_11+0x1ae>
    5c6a:	eb cf       	rjmp	.-42     	; 0x5c42 <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    5c6c:	c0 32       	cpi	r28, 0x20	; 32
    5c6e:	09 f0       	breq	.+2      	; 0x5c72 <__vector_11+0x1c6>
    5c70:	47 c0       	rjmp	.+142    	; 0x5d00 <__vector_11+0x254>
    5c72:	d1 32       	cpi	r29, 0x21	; 33
    5c74:	09 f0       	breq	.+2      	; 0x5c78 <__vector_11+0x1cc>
    5c76:	59 cf       	rjmp	.-334    	; 0x5b2a <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    5c78:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5c7c:	82 ff       	sbrs	r24, 2
    5c7e:	fc cf       	rjmp	.-8      	; 0x5c78 <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    5c80:	e1 e1       	ldi	r30, 0x11	; 17
    5c82:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    5c84:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5c88:	80 83       	st	Z, r24
    5c8a:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    5c8c:	91 e0       	ldi	r25, 0x01	; 1
    5c8e:	e8 31       	cpi	r30, 0x18	; 24
    5c90:	f9 07       	cpc	r31, r25
    5c92:	c1 f7       	brne	.-16     	; 0x5c84 <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    5c94:	8b ef       	ldi	r24, 0xFB	; 251
    5c96:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5c9a:	8e ef       	ldi	r24, 0xFE	; 254
    5c9c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    5ca0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    5ca4:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    5ca8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    5cac:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    5cb0:	90 e0       	ldi	r25, 0x00	; 0
    5cb2:	b0 e0       	ldi	r27, 0x00	; 0
    5cb4:	a0 e0       	ldi	r26, 0x00	; 0
    5cb6:	dc 01       	movw	r26, r24
    5cb8:	99 27       	eor	r25, r25
    5cba:	88 27       	eor	r24, r24
    5cbc:	94 2b       	or	r25, r20
    5cbe:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    5cc0:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    5cc2:	86 38       	cpi	r24, 0x86	; 134
    5cc4:	91 05       	cpc	r25, r1
    5cc6:	a1 05       	cpc	r26, r1
    5cc8:	b1 05       	cpc	r27, r1
    5cca:	21 f4       	brne	.+8      	; 0x5cd4 <__vector_11+0x228>
    5ccc:	8f e0       	ldi	r24, 0x0F	; 15
    5cce:	80 93 d8 0e 	sts	0x0ED8, r24	; 0x800ed8 <reboot_timer>
    5cd2:	5a cf       	rjmp	.-332    	; 0x5b88 <__vector_11+0xdc>
			if (baud == 150UL) {
    5cd4:	86 39       	cpi	r24, 0x96	; 150
    5cd6:	91 05       	cpc	r25, r1
    5cd8:	a1 05       	cpc	r26, r1
    5cda:	b1 05       	cpc	r27, r1
    5cdc:	09 f0       	breq	.+2      	; 0x5ce0 <__vector_11+0x234>
    5cde:	54 cf       	rjmp	.-344    	; 0x5b88 <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    5ce0:	84 e0       	ldi	r24, 0x04	; 4
    5ce2:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    5ce6:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    5ce8:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    5cec:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    5cee:	09 f4       	brne	.+2      	; 0x5cf2 <__vector_11+0x246>
    5cf0:	b6 dd       	rcall	.-1172   	; 0x585e <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    5cf2:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    5cf6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5cfa:	82 fd       	sbrc	r24, 2
    5cfc:	fc cf       	rjmp	.-8      	; 0x5cf6 <__vector_11+0x24a>
    5cfe:	f4 cf       	rjmp	.-24     	; 0x5ce8 <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    5d00:	c2 32       	cpi	r28, 0x22	; 34
    5d02:	39 f4       	brne	.+14     	; 0x5d12 <__vector_11+0x266>
    5d04:	d1 32       	cpi	r29, 0x21	; 33
    5d06:	09 f0       	breq	.+2      	; 0x5d0a <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    5d08:	10 cf       	rjmp	.-480    	; 0x5b2a <__vector_11+0x7e>
    5d0a:	e0 92 5b 0f 	sts	0x0F5B, r14	; 0x800f5b <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    5d0e:	2a de       	rcall	.-940    	; 0x5964 <usb_wait_in_ready>
    5d10:	98 cf       	rjmp	.-208    	; 0x5c42 <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    5d12:	c3 32       	cpi	r28, 0x23	; 35
    5d14:	21 f4       	brne	.+8      	; 0x5d1e <__vector_11+0x272>
    5d16:	d1 32       	cpi	r29, 0x21	; 33
    5d18:	09 f0       	breq	.+2      	; 0x5d1c <__vector_11+0x270>
    5d1a:	07 cf       	rjmp	.-498    	; 0x5b2a <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    5d1c:	f8 cf       	rjmp	.-16     	; 0x5d0e <__vector_11+0x262>
    5d1e:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    5d20:	11 c0       	rjmp	.+34     	; 0x5d44 <__vector_11+0x298>
    5d22:	20 de       	rcall	.-960    	; 0x5964 <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    5d24:	d2 38       	cpi	r29, 0x82	; 130
    5d26:	49 f4       	brne	.+18     	; 0x5d3a <__vector_11+0x28e>
				UENUM = wIndex;
    5d28:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    5d2c:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    5d30:	c5 fb       	bst	r28, 5
    5d32:	cc 27       	eor	r28, r28
    5d34:	c0 f9       	bld	r28, 0
				UENUM = 0;
    5d36:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    5d3a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    5d3e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5d42:	7f cf       	rjmp	.-258    	; 0x5c42 <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    5d44:	8c 2f       	mov	r24, r28
    5d46:	8d 7f       	andi	r24, 0xFD	; 253
    5d48:	81 30       	cpi	r24, 0x01	; 1
    5d4a:	09 f0       	breq	.+2      	; 0x5d4e <__vector_11+0x2a2>
    5d4c:	ee ce       	rjmp	.-548    	; 0x5b2a <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    5d4e:	d2 30       	cpi	r29, 0x02	; 2
    5d50:	09 f0       	breq	.+2      	; 0x5d54 <__vector_11+0x2a8>
    5d52:	eb ce       	rjmp	.-554    	; 0x5b2a <__vector_11+0x7e>
    5d54:	ef 28       	or	r14, r15
    5d56:	09 f0       	breq	.+2      	; 0x5d5a <__vector_11+0x2ae>
    5d58:	e8 ce       	rjmp	.-560    	; 0x5b2a <__vector_11+0x7e>
			i = wIndex & 0x7F;
    5d5a:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    5d5c:	8f ef       	ldi	r24, 0xFF	; 255
    5d5e:	80 0f       	add	r24, r16
    5d60:	86 30       	cpi	r24, 0x06	; 6
    5d62:	08 f0       	brcs	.+2      	; 0x5d66 <__vector_11+0x2ba>
    5d64:	e2 ce       	rjmp	.-572    	; 0x5b2a <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5d66:	8e ef       	ldi	r24, 0xFE	; 254
    5d68:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    5d6c:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    5d70:	c3 30       	cpi	r28, 0x03	; 3
    5d72:	09 f4       	brne	.+2      	; 0x5d76 <__vector_11+0x2ca>
    5d74:	da ce       	rjmp	.-588    	; 0x5b2a <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    5d76:	89 e1       	ldi	r24, 0x19	; 25
    5d78:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    5d7c:	81 e0       	ldi	r24, 0x01	; 1
    5d7e:	90 e0       	ldi	r25, 0x00	; 0
    5d80:	01 c0       	rjmp	.+2      	; 0x5d84 <__vector_11+0x2d8>
    5d82:	88 0f       	add	r24, r24
    5d84:	0a 95       	dec	r16
    5d86:	ea f7       	brpl	.-6      	; 0x5d82 <__vector_11+0x2d6>
    5d88:	4d cf       	rjmp	.-358    	; 0x5c24 <__vector_11+0x178>

00005d8a <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    5d8a:	50 91 0e 0f 	lds	r21, 0x0F0E	; 0x800f0e <rx_buffer_head>
    5d8e:	40 91 0d 0f 	lds	r20, 0x0F0D	; 0x800f0d <rx_buffer_tail>
    5d92:	85 2f       	mov	r24, r21
    5d94:	90 e0       	ldi	r25, 0x00	; 0
    5d96:	24 2f       	mov	r18, r20
    5d98:	30 e0       	ldi	r19, 0x00	; 0
    5d9a:	54 17       	cp	r21, r20
    5d9c:	18 f0       	brcs	.+6      	; 0x5da4 <HardwareSerial::available()+0x1a>
    5d9e:	82 1b       	sub	r24, r18
    5da0:	93 0b       	sbc	r25, r19
    5da2:	08 95       	ret
    5da4:	80 5c       	subi	r24, 0xC0	; 192
    5da6:	9f 4f       	sbci	r25, 0xFF	; 255
    5da8:	fa cf       	rjmp	.-12     	; 0x5d9e <HardwareSerial::available()+0x14>

00005daa <HardwareSerial::availableForWrite()>:
    5daa:	50 91 0e 0f 	lds	r21, 0x0F0E	; 0x800f0e <rx_buffer_head>
    5dae:	40 91 0d 0f 	lds	r20, 0x0F0D	; 0x800f0d <rx_buffer_tail>
    5db2:	25 2f       	mov	r18, r21
    5db4:	30 e0       	ldi	r19, 0x00	; 0
    5db6:	84 2f       	mov	r24, r20
    5db8:	90 e0       	ldi	r25, 0x00	; 0
    5dba:	82 1b       	sub	r24, r18
    5dbc:	93 0b       	sbc	r25, r19
    5dbe:	54 17       	cp	r21, r20
    5dc0:	10 f0       	brcs	.+4      	; 0x5dc6 <HardwareSerial::availableForWrite()+0x1c>
    5dc2:	87 96       	adiw	r24, 0x27	; 39
    5dc4:	08 95       	ret
    5dc6:	01 97       	sbiw	r24, 0x01	; 1
    5dc8:	08 95       	ret

00005dca <HardwareSerial::peek()>:
    5dca:	80 91 0e 0f 	lds	r24, 0x0F0E	; 0x800f0e <rx_buffer_head>
    5dce:	e0 91 0d 0f 	lds	r30, 0x0F0D	; 0x800f0d <rx_buffer_tail>
    5dd2:	8e 17       	cp	r24, r30
    5dd4:	51 f0       	breq	.+20     	; 0x5dea <HardwareSerial::peek()+0x20>
    5dd6:	ef 5f       	subi	r30, 0xFF	; 255
    5dd8:	e0 34       	cpi	r30, 0x40	; 64
    5dda:	08 f0       	brcs	.+2      	; 0x5dde <HardwareSerial::peek()+0x14>
    5ddc:	e0 e0       	ldi	r30, 0x00	; 0
    5dde:	f0 e0       	ldi	r31, 0x00	; 0
    5de0:	e1 5f       	subi	r30, 0xF1	; 241
    5de2:	f0 4f       	sbci	r31, 0xF0	; 240
    5de4:	80 81       	ld	r24, Z
    5de6:	90 e0       	ldi	r25, 0x00	; 0
    5de8:	08 95       	ret
    5dea:	8f ef       	ldi	r24, 0xFF	; 255
    5dec:	9f ef       	ldi	r25, 0xFF	; 255
    5dee:	08 95       	ret

00005df0 <HardwareSerial::read()>:
    5df0:	90 91 0e 0f 	lds	r25, 0x0F0E	; 0x800f0e <rx_buffer_head>
    5df4:	80 91 0d 0f 	lds	r24, 0x0F0D	; 0x800f0d <rx_buffer_tail>
    5df8:	98 17       	cp	r25, r24
    5dfa:	79 f0       	breq	.+30     	; 0x5e1a <HardwareSerial::read()+0x2a>
    5dfc:	90 91 0d 0f 	lds	r25, 0x0F0D	; 0x800f0d <rx_buffer_tail>
    5e00:	9f 5f       	subi	r25, 0xFF	; 255
    5e02:	90 34       	cpi	r25, 0x40	; 64
    5e04:	08 f0       	brcs	.+2      	; 0x5e08 <HardwareSerial::read()+0x18>
    5e06:	90 e0       	ldi	r25, 0x00	; 0
    5e08:	e9 2f       	mov	r30, r25
    5e0a:	f0 e0       	ldi	r31, 0x00	; 0
    5e0c:	e1 5f       	subi	r30, 0xF1	; 241
    5e0e:	f0 4f       	sbci	r31, 0xF0	; 240
    5e10:	80 81       	ld	r24, Z
    5e12:	90 93 0d 0f 	sts	0x0F0D, r25	; 0x800f0d <rx_buffer_tail>
    5e16:	90 e0       	ldi	r25, 0x00	; 0
    5e18:	08 95       	ret
    5e1a:	8f ef       	ldi	r24, 0xFF	; 255
    5e1c:	9f ef       	ldi	r25, 0xFF	; 255
    5e1e:	08 95       	ret

00005e20 <HardwareSerial::flush()>:
    5e20:	80 91 e2 0e 	lds	r24, 0x0EE2	; 0x800ee2 <transmitting>
    5e24:	81 11       	cpse	r24, r1
    5e26:	fc cf       	rjmp	.-8      	; 0x5e20 <HardwareSerial::flush()>
    5e28:	08 95       	ret

00005e2a <HardwareSerial::write(unsigned char)>:
    5e2a:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5e2e:	23 fd       	sbrc	r18, 3
    5e30:	06 c0       	rjmp	.+12     	; 0x5e3e <HardwareSerial::write(unsigned char)+0x14>
    5e32:	21 e0       	ldi	r18, 0x01	; 1
    5e34:	fc 01       	movw	r30, r24
    5e36:	22 83       	std	Z+2, r18	; 0x02
    5e38:	90 e0       	ldi	r25, 0x00	; 0
    5e3a:	80 e0       	ldi	r24, 0x00	; 0
    5e3c:	08 95       	ret
    5e3e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    5e42:	8f 3f       	cpi	r24, 0xFF	; 255
    5e44:	41 f0       	breq	.+16     	; 0x5e56 <HardwareSerial::write(unsigned char)+0x2c>
    5e46:	80 91 e2 0e 	lds	r24, 0x0EE2	; 0x800ee2 <transmitting>
    5e4a:	81 11       	cpse	r24, r1
    5e4c:	04 c0       	rjmp	.+8      	; 0x5e56 <HardwareSerial::write(unsigned char)+0x2c>
    5e4e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    5e52:	f0 e0       	ldi	r31, 0x00	; 0
    5e54:	ee db       	rcall	.-2084   	; 0x5632 <_digitalWrite_HIGH>
    5e56:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <tx_buffer_head>
    5e5a:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <tx_buffer_tail>
    5e5e:	98 13       	cpse	r25, r24
    5e60:	04 c0       	rjmp	.+8      	; 0x5e6a <HardwareSerial::write(unsigned char)+0x40>
    5e62:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5e66:	85 fd       	sbrc	r24, 5
    5e68:	19 c0       	rjmp	.+50     	; 0x5e9c <HardwareSerial::write(unsigned char)+0x72>
    5e6a:	80 91 e4 0e 	lds	r24, 0x0EE4	; 0x800ee4 <tx_buffer_head>
    5e6e:	8f 5f       	subi	r24, 0xFF	; 255
    5e70:	88 32       	cpi	r24, 0x28	; 40
    5e72:	f8 f4       	brcc	.+62     	; 0x5eb2 <HardwareSerial::write(unsigned char)+0x88>
    5e74:	90 91 e3 0e 	lds	r25, 0x0EE3	; 0x800ee3 <tx_buffer_tail>
    5e78:	98 17       	cp	r25, r24
    5e7a:	e1 f3       	breq	.-8      	; 0x5e74 <HardwareSerial::write(unsigned char)+0x4a>
    5e7c:	e8 2f       	mov	r30, r24
    5e7e:	f0 e0       	ldi	r31, 0x00	; 0
    5e80:	eb 51       	subi	r30, 0x1B	; 27
    5e82:	f1 4f       	sbci	r31, 0xF1	; 241
    5e84:	60 83       	st	Z, r22
    5e86:	91 e0       	ldi	r25, 0x01	; 1
    5e88:	90 93 e2 0e 	sts	0x0EE2, r25	; 0x800ee2 <transmitting>
    5e8c:	80 93 e4 0e 	sts	0x0EE4, r24	; 0x800ee4 <tx_buffer_head>
    5e90:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5e94:	80 62       	ori	r24, 0x20	; 32
    5e96:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5e9a:	08 c0       	rjmp	.+16     	; 0x5eac <HardwareSerial::write(unsigned char)+0x82>
    5e9c:	8f b7       	in	r24, 0x3f	; 63
    5e9e:	f8 94       	cli
    5ea0:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5ea4:	91 e0       	ldi	r25, 0x01	; 1
    5ea6:	90 93 e2 0e 	sts	0x0EE2, r25	; 0x800ee2 <transmitting>
    5eaa:	8f bf       	out	0x3f, r24	; 63
    5eac:	81 e0       	ldi	r24, 0x01	; 1
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	08 95       	ret
    5eb2:	80 e0       	ldi	r24, 0x00	; 0
    5eb4:	df cf       	rjmp	.-66     	; 0x5e74 <HardwareSerial::write(unsigned char)+0x4a>

00005eb6 <HardwareSerial::_begin(unsigned int, unsigned char)>:
    5eb6:	1f 93       	push	r17
    5eb8:	cf 93       	push	r28
    5eba:	df 93       	push	r29
    5ebc:	eb 01       	movw	r28, r22
    5ebe:	14 2f       	mov	r17, r20
    5ec0:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    5ec4:	4f 3f       	cpi	r20, 0xFF	; 255
    5ec6:	29 f0       	breq	.+10     	; 0x5ed2 <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    5ec8:	84 2f       	mov	r24, r20
    5eca:	a2 db       	rcall	.-2236   	; 0x5610 <_pinMode_output>
    5ecc:	e1 2f       	mov	r30, r17
    5ece:	f0 e0       	ldi	r31, 0x00	; 0
    5ed0:	b6 db       	rcall	.-2196   	; 0x563e <_digitalWrite_LOW>
    5ed2:	c0 ff       	sbrs	r28, 0
    5ed4:	24 c0       	rjmp	.+72     	; 0x5f1e <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    5ed6:	c1 30       	cpi	r28, 0x01	; 1
    5ed8:	80 e1       	ldi	r24, 0x10	; 16
    5eda:	d8 07       	cpc	r29, r24
    5edc:	00 f5       	brcc	.+64     	; 0x5f1e <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    5ede:	82 e0       	ldi	r24, 0x02	; 2
    5ee0:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5ee4:	21 97       	sbiw	r28, 0x01	; 1
    5ee6:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    5eea:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    5eee:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5ef2:	83 fd       	sbrc	r24, 3
    5ef4:	10 c0       	rjmp	.+32     	; 0x5f16 <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    5ef6:	10 92 0e 0f 	sts	0x0F0E, r1	; 0x800f0e <rx_buffer_head>
    5efa:	10 92 0d 0f 	sts	0x0F0D, r1	; 0x800f0d <rx_buffer_tail>
    5efe:	10 92 e4 0e 	sts	0x0EE4, r1	; 0x800ee4 <tx_buffer_head>
    5f02:	10 92 e3 0e 	sts	0x0EE3, r1	; 0x800ee3 <tx_buffer_tail>
    5f06:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <transmitting>
    5f0a:	86 e0       	ldi	r24, 0x06	; 6
    5f0c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    5f10:	88 ed       	ldi	r24, 0xD8	; 216
    5f12:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5f16:	df 91       	pop	r29
    5f18:	cf 91       	pop	r28
    5f1a:	1f 91       	pop	r17
    5f1c:	08 95       	ret
    5f1e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5f22:	d6 95       	lsr	r29
    5f24:	c7 95       	ror	r28
    5f26:	de cf       	rjmp	.-68     	; 0x5ee4 <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

00005f28 <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    5f28:	1f 92       	push	r1
    5f2a:	0f 92       	push	r0
    5f2c:	0f b6       	in	r0, 0x3f	; 63
    5f2e:	0f 92       	push	r0
    5f30:	11 24       	eor	r1, r1
    5f32:	0b b6       	in	r0, 0x3b	; 59
    5f34:	0f 92       	push	r0
    5f36:	2f 93       	push	r18
    5f38:	8f 93       	push	r24
    5f3a:	9f 93       	push	r25
    5f3c:	ef 93       	push	r30
    5f3e:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    5f40:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    5f44:	80 91 0e 0f 	lds	r24, 0x0F0E	; 0x800f0e <rx_buffer_head>
    5f48:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    5f4a:	80 34       	cpi	r24, 0x40	; 64
    5f4c:	08 f0       	brcs	.+2      	; 0x5f50 <__vector_25+0x28>
    5f4e:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    5f50:	20 91 0d 0f 	lds	r18, 0x0F0D	; 0x800f0d <rx_buffer_tail>
    5f54:	28 17       	cp	r18, r24
    5f56:	39 f0       	breq	.+14     	; 0x5f66 <__vector_25+0x3e>
		rx_buffer[i] = c;
    5f58:	e8 2f       	mov	r30, r24
    5f5a:	f0 e0       	ldi	r31, 0x00	; 0
    5f5c:	e1 5f       	subi	r30, 0xF1	; 241
    5f5e:	f0 4f       	sbci	r31, 0xF0	; 240
    5f60:	90 83       	st	Z, r25
		rx_buffer_head = i;
    5f62:	80 93 0e 0f 	sts	0x0F0E, r24	; 0x800f0e <rx_buffer_head>
	}
}
    5f66:	ff 91       	pop	r31
    5f68:	ef 91       	pop	r30
    5f6a:	9f 91       	pop	r25
    5f6c:	8f 91       	pop	r24
    5f6e:	2f 91       	pop	r18
    5f70:	0f 90       	pop	r0
    5f72:	0b be       	out	0x3b, r0	; 59
    5f74:	0f 90       	pop	r0
    5f76:	0f be       	out	0x3f, r0	; 63
    5f78:	0f 90       	pop	r0
    5f7a:	1f 90       	pop	r1
    5f7c:	18 95       	reti

00005f7e <__vector_26>:

ISR(USART1_UDRE_vect)
{
    5f7e:	1f 92       	push	r1
    5f80:	0f 92       	push	r0
    5f82:	0f b6       	in	r0, 0x3f	; 63
    5f84:	0f 92       	push	r0
    5f86:	11 24       	eor	r1, r1
    5f88:	0b b6       	in	r0, 0x3b	; 59
    5f8a:	0f 92       	push	r0
    5f8c:	8f 93       	push	r24
    5f8e:	9f 93       	push	r25
    5f90:	ef 93       	push	r30
    5f92:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    5f94:	90 91 e4 0e 	lds	r25, 0x0EE4	; 0x800ee4 <tx_buffer_head>
    5f98:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <tx_buffer_tail>
    5f9c:	98 13       	cpse	r25, r24
    5f9e:	10 c0       	rjmp	.+32     	; 0x5fc0 <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    5fa0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5fa4:	8f 7d       	andi	r24, 0xDF	; 223
    5fa6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    5faa:	ff 91       	pop	r31
    5fac:	ef 91       	pop	r30
    5fae:	9f 91       	pop	r25
    5fb0:	8f 91       	pop	r24
    5fb2:	0f 90       	pop	r0
    5fb4:	0b be       	out	0x3b, r0	; 59
    5fb6:	0f 90       	pop	r0
    5fb8:	0f be       	out	0x3f, r0	; 63
    5fba:	0f 90       	pop	r0
    5fbc:	1f 90       	pop	r1
    5fbe:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    5fc0:	80 91 e3 0e 	lds	r24, 0x0EE3	; 0x800ee3 <tx_buffer_tail>
    5fc4:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    5fc6:	88 32       	cpi	r24, 0x28	; 40
    5fc8:	08 f0       	brcs	.+2      	; 0x5fcc <__vector_26+0x4e>
    5fca:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    5fcc:	e8 2f       	mov	r30, r24
    5fce:	f0 e0       	ldi	r31, 0x00	; 0
    5fd0:	eb 51       	subi	r30, 0x1B	; 27
    5fd2:	f1 4f       	sbci	r31, 0xF1	; 241
    5fd4:	90 81       	ld	r25, Z
    5fd6:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    5fda:	80 93 e3 0e 	sts	0x0EE3, r24	; 0x800ee3 <tx_buffer_tail>
	}
}
    5fde:	e5 cf       	rjmp	.-54     	; 0x5faa <__vector_26+0x2c>

00005fe0 <__vector_27>:

ISR(USART1_TX_vect)
{
    5fe0:	1f 92       	push	r1
    5fe2:	0f 92       	push	r0
    5fe4:	0f b6       	in	r0, 0x3f	; 63
    5fe6:	0f 92       	push	r0
    5fe8:	11 24       	eor	r1, r1
    5fea:	0b b6       	in	r0, 0x3b	; 59
    5fec:	0f 92       	push	r0
    5fee:	8f 93       	push	r24
    5ff0:	ef 93       	push	r30
    5ff2:	ff 93       	push	r31
	transmitting = 0;
    5ff4:	10 92 e2 0e 	sts	0x0EE2, r1	; 0x800ee2 <transmitting>
	if (tx_enable_pin < 255) {
    5ff8:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    5ffc:	8f 3f       	cpi	r24, 0xFF	; 255
    5ffe:	21 f0       	breq	.+8      	; 0x6008 <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    6000:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    6004:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    6006:	1b db       	rcall	.-2506   	; 0x563e <_digitalWrite_LOW>
	}
}
    6008:	ff 91       	pop	r31
    600a:	ef 91       	pop	r30
    600c:	8f 91       	pop	r24
    600e:	0f 90       	pop	r0
    6010:	0b be       	out	0x3b, r0	; 59
    6012:	0f 90       	pop	r0
    6014:	0f be       	out	0x3f, r0	; 63
    6016:	0f 90       	pop	r0
    6018:	1f 90       	pop	r1
    601a:	18 95       	reti

0000601c <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    601c:	ea ed       	ldi	r30, 0xDA	; 218
    601e:	fe e0       	ldi	r31, 0x0E	; 14
    6020:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    6022:	88 ee       	ldi	r24, 0xE8	; 232
    6024:	93 e0       	ldi	r25, 0x03	; 3
    6026:	a0 e0       	ldi	r26, 0x00	; 0
    6028:	b0 e0       	ldi	r27, 0x00	; 0
    602a:	83 83       	std	Z+3, r24	; 0x03
    602c:	94 83       	std	Z+4, r25	; 0x04
    602e:	a5 83       	std	Z+5, r26	; 0x05
    6030:	b6 83       	std	Z+6, r27	; 0x06
    6032:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    6034:	8a eb       	ldi	r24, 0xBA	; 186
    6036:	97 e0       	ldi	r25, 0x07	; 7
    6038:	91 83       	std	Z+1, r25	; 0x01
    603a:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    603c:	08 95       	ret

0000603e <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    603e:	9a da       	rcall	.-2764   	; 0x5574 <_init_Teensyduino_internal_>

	setup();
    6040:	0e 94 52 11 	call	0x22a4	; 0x22a4 <setup>
    
	while (1) {
		loop();
    6044:	0e 94 3e 1a 	call	0x347c	; 0x347c <loop>
    6048:	fd cf       	rjmp	.-6      	; 0x6044 <main+0x6>

0000604a <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    604a:	73 c8       	rjmp	.-3866   	; 0x5132 <malloc>

0000604c <__cxa_guard_acquire>:
    604c:	fc 01       	movw	r30, r24
    604e:	81 e0       	ldi	r24, 0x01	; 1
    6050:	90 e0       	ldi	r25, 0x00	; 0
    6052:	20 81       	ld	r18, Z
    6054:	22 23       	and	r18, r18
    6056:	11 f0       	breq	.+4      	; 0x605c <__cxa_guard_acquire+0x10>
    6058:	90 e0       	ldi	r25, 0x00	; 0
    605a:	80 e0       	ldi	r24, 0x00	; 0
    605c:	08 95       	ret

0000605e <__cxa_guard_release>:
    605e:	21 e0       	ldi	r18, 0x01	; 1
    6060:	fc 01       	movw	r30, r24
    6062:	20 83       	st	Z, r18
    6064:	08 95       	ret

00006066 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    6066:	08 95       	ret

00006068 <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    6068:	cf 92       	push	r12
    606a:	df 92       	push	r13
    606c:	ef 92       	push	r14
    606e:	ff 92       	push	r15
    6070:	0f 93       	push	r16
    6072:	1f 93       	push	r17
    6074:	cf 93       	push	r28
    6076:	df 93       	push	r29
    6078:	6c 01       	movw	r12, r24
    607a:	eb 01       	movw	r28, r22
    607c:	7b 01       	movw	r14, r22
    607e:	e4 0e       	add	r14, r20
    6080:	f5 1e       	adc	r15, r21
    6082:	10 e0       	ldi	r17, 0x00	; 0
    6084:	00 e0       	ldi	r16, 0x00	; 0
    6086:	ce 15       	cp	r28, r14
    6088:	df 05       	cpc	r29, r15
    608a:	61 f0       	breq	.+24     	; 0x60a4 <Print::write(unsigned char const*, unsigned int)+0x3c>
    608c:	69 91       	ld	r22, Y+
    608e:	d6 01       	movw	r26, r12
    6090:	ed 91       	ld	r30, X+
    6092:	fc 91       	ld	r31, X
    6094:	01 90       	ld	r0, Z+
    6096:	f0 81       	ld	r31, Z
    6098:	e0 2d       	mov	r30, r0
    609a:	c6 01       	movw	r24, r12
    609c:	09 95       	icall
    609e:	08 0f       	add	r16, r24
    60a0:	19 1f       	adc	r17, r25
    60a2:	f1 cf       	rjmp	.-30     	; 0x6086 <Print::write(unsigned char const*, unsigned int)+0x1e>
    60a4:	c8 01       	movw	r24, r16
    60a6:	df 91       	pop	r29
    60a8:	cf 91       	pop	r28
    60aa:	1f 91       	pop	r17
    60ac:	0f 91       	pop	r16
    60ae:	ff 90       	pop	r15
    60b0:	ef 90       	pop	r14
    60b2:	df 90       	pop	r13
    60b4:	cf 90       	pop	r12
    60b6:	08 95       	ret

000060b8 <Print::print(String const&)>:
    60b8:	8f 92       	push	r8
    60ba:	9f 92       	push	r9
    60bc:	af 92       	push	r10
    60be:	bf 92       	push	r11
    60c0:	cf 92       	push	r12
    60c2:	df 92       	push	r13
    60c4:	ef 92       	push	r14
    60c6:	ff 92       	push	r15
    60c8:	0f 93       	push	r16
    60ca:	1f 93       	push	r17
    60cc:	cf 93       	push	r28
    60ce:	df 93       	push	r29
    60d0:	cd b7       	in	r28, 0x3d	; 61
    60d2:	de b7       	in	r29, 0x3e	; 62
    60d4:	a1 97       	sbiw	r28, 0x21	; 33
    60d6:	0f b6       	in	r0, 0x3f	; 63
    60d8:	f8 94       	cli
    60da:	de bf       	out	0x3e, r29	; 62
    60dc:	0f be       	out	0x3f, r0	; 63
    60de:	cd bf       	out	0x3d, r28	; 61
    60e0:	5c 01       	movw	r10, r24
    60e2:	4b 01       	movw	r8, r22
    60e4:	db 01       	movw	r26, r22
    60e6:	14 96       	adiw	r26, 0x04	; 4
    60e8:	0d 91       	ld	r16, X+
    60ea:	1c 91       	ld	r17, X
    60ec:	d1 2c       	mov	r13, r1
    60ee:	c1 2c       	mov	r12, r1
    60f0:	f1 2c       	mov	r15, r1
    60f2:	e1 2c       	mov	r14, r1
    60f4:	01 15       	cp	r16, r1
    60f6:	11 05       	cpc	r17, r1
    60f8:	01 f1       	breq	.+64     	; 0x613a <Print::print(String const&)+0x82>
    60fa:	96 01       	movw	r18, r12
    60fc:	41 e2       	ldi	r20, 0x21	; 33
    60fe:	50 e0       	ldi	r21, 0x00	; 0
    6100:	be 01       	movw	r22, r28
    6102:	6f 5f       	subi	r22, 0xFF	; 255
    6104:	7f 4f       	sbci	r23, 0xFF	; 255
    6106:	c4 01       	movw	r24, r8
    6108:	5a d3       	rcall	.+1716   	; 0x67be <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    610a:	a8 01       	movw	r20, r16
    610c:	01 32       	cpi	r16, 0x21	; 33
    610e:	11 05       	cpc	r17, r1
    6110:	10 f0       	brcs	.+4      	; 0x6116 <Print::print(String const&)+0x5e>
    6112:	40 e2       	ldi	r20, 0x20	; 32
    6114:	50 e0       	ldi	r21, 0x00	; 0
    6116:	c4 0e       	add	r12, r20
    6118:	d5 1e       	adc	r13, r21
    611a:	04 1b       	sub	r16, r20
    611c:	15 0b       	sbc	r17, r21
    611e:	d5 01       	movw	r26, r10
    6120:	ed 91       	ld	r30, X+
    6122:	fc 91       	ld	r31, X
    6124:	02 80       	ldd	r0, Z+2	; 0x02
    6126:	f3 81       	ldd	r31, Z+3	; 0x03
    6128:	e0 2d       	mov	r30, r0
    612a:	be 01       	movw	r22, r28
    612c:	6f 5f       	subi	r22, 0xFF	; 255
    612e:	7f 4f       	sbci	r23, 0xFF	; 255
    6130:	c5 01       	movw	r24, r10
    6132:	09 95       	icall
    6134:	e8 0e       	add	r14, r24
    6136:	f9 1e       	adc	r15, r25
    6138:	dd cf       	rjmp	.-70     	; 0x60f4 <Print::print(String const&)+0x3c>
    613a:	c7 01       	movw	r24, r14
    613c:	a1 96       	adiw	r28, 0x21	; 33
    613e:	0f b6       	in	r0, 0x3f	; 63
    6140:	f8 94       	cli
    6142:	de bf       	out	0x3e, r29	; 62
    6144:	0f be       	out	0x3f, r0	; 63
    6146:	cd bf       	out	0x3d, r28	; 61
    6148:	df 91       	pop	r29
    614a:	cf 91       	pop	r28
    614c:	1f 91       	pop	r17
    614e:	0f 91       	pop	r16
    6150:	ff 90       	pop	r15
    6152:	ef 90       	pop	r14
    6154:	df 90       	pop	r13
    6156:	cf 90       	pop	r12
    6158:	bf 90       	pop	r11
    615a:	af 90       	pop	r10
    615c:	9f 90       	pop	r9
    615e:	8f 90       	pop	r8
    6160:	08 95       	ret

00006162 <Print::println()>:
    6162:	cf 93       	push	r28
    6164:	df 93       	push	r29
    6166:	00 d0       	rcall	.+0      	; 0x6168 <Print::println()+0x6>
    6168:	cd b7       	in	r28, 0x3d	; 61
    616a:	de b7       	in	r29, 0x3e	; 62
    616c:	2d e0       	ldi	r18, 0x0D	; 13
    616e:	29 83       	std	Y+1, r18	; 0x01
    6170:	2a e0       	ldi	r18, 0x0A	; 10
    6172:	2a 83       	std	Y+2, r18	; 0x02
    6174:	dc 01       	movw	r26, r24
    6176:	ed 91       	ld	r30, X+
    6178:	fc 91       	ld	r31, X
    617a:	02 80       	ldd	r0, Z+2	; 0x02
    617c:	f3 81       	ldd	r31, Z+3	; 0x03
    617e:	e0 2d       	mov	r30, r0
    6180:	42 e0       	ldi	r20, 0x02	; 2
    6182:	50 e0       	ldi	r21, 0x00	; 0
    6184:	be 01       	movw	r22, r28
    6186:	6f 5f       	subi	r22, 0xFF	; 255
    6188:	7f 4f       	sbci	r23, 0xFF	; 255
    618a:	09 95       	icall
    618c:	0f 90       	pop	r0
    618e:	0f 90       	pop	r0
    6190:	df 91       	pop	r29
    6192:	cf 91       	pop	r28
    6194:	08 95       	ret

00006196 <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    6196:	cf 93       	push	r28
    6198:	df 93       	push	r29
    619a:	cd b7       	in	r28, 0x3d	; 61
    619c:	de b7       	in	r29, 0x3e	; 62
    619e:	2b 97       	sbiw	r28, 0x0b	; 11
    61a0:	0f b6       	in	r0, 0x3f	; 63
    61a2:	f8 94       	cli
    61a4:	de bf       	out	0x3e, r29	; 62
    61a6:	0f be       	out	0x3f, r0	; 63
    61a8:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    61aa:	fe 01       	movw	r30, r28
    61ac:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    61ae:	a3 e3       	ldi	r26, 0x33	; 51
    61b0:	4a 9f       	mul	r20, r26
    61b2:	44 27       	eor	r20, r20
    61b4:	0a 0e       	add	r0, r26
    61b6:	41 1d       	adc	r20, r1
    61b8:	30 2d       	mov	r19, r0
    61ba:	5a 9f       	mul	r21, r26
    61bc:	55 27       	eor	r21, r21
    61be:	40 0d       	add	r20, r0
    61c0:	51 1d       	adc	r21, r1
    61c2:	6a 9f       	mul	r22, r26
    61c4:	66 27       	eor	r22, r22
    61c6:	50 0d       	add	r21, r0
    61c8:	61 1d       	adc	r22, r1
    61ca:	7a 9f       	mul	r23, r26
    61cc:	77 27       	eor	r23, r23
    61ce:	60 0d       	add	r22, r0
    61d0:	71 1d       	adc	r23, r1
    61d2:	11 24       	eor	r1, r1
    61d4:	34 0f       	add	r19, r20
    61d6:	45 1f       	adc	r20, r21
    61d8:	56 1f       	adc	r21, r22
    61da:	67 1f       	adc	r22, r23
    61dc:	71 1d       	adc	r23, r1
    61de:	35 0f       	add	r19, r21
    61e0:	46 1f       	adc	r20, r22
    61e2:	57 1f       	adc	r21, r23
    61e4:	61 1d       	adc	r22, r1
    61e6:	71 1d       	adc	r23, r1
    61e8:	37 0f       	add	r19, r23
    61ea:	41 1d       	adc	r20, r1
    61ec:	51 1d       	adc	r21, r1
    61ee:	61 1d       	adc	r22, r1
    61f0:	71 1d       	adc	r23, r1
    61f2:	76 95       	lsr	r23
    61f4:	67 95       	ror	r22
    61f6:	57 95       	ror	r21
    61f8:	47 95       	ror	r20
    61fa:	37 95       	ror	r19
    61fc:	aa e0       	ldi	r26, 0x0A	; 10
    61fe:	3a 9f       	mul	r19, r26
    6200:	31 2d       	mov	r19, r1
    6202:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    6204:	df 01       	movw	r26, r30
    6206:	30 5d       	subi	r19, 0xD0	; 208
    6208:	3e 93       	st	-X, r19
	} while (n);
    620a:	41 15       	cp	r20, r1
    620c:	51 05       	cpc	r21, r1
    620e:	61 05       	cpc	r22, r1
    6210:	71 05       	cpc	r23, r1
    6212:	09 f5       	brne	.+66     	; 0x6256 <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    6214:	22 23       	and	r18, r18
    6216:	41 f0       	breq	.+16     	; 0x6228 <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    6218:	bd 01       	movw	r22, r26
    621a:	61 50       	subi	r22, 0x01	; 1
    621c:	71 09       	sbc	r23, r1
    621e:	2d e2       	ldi	r18, 0x2D	; 45
    6220:	db 01       	movw	r26, r22
    6222:	2c 93       	st	X, r18
    6224:	df 01       	movw	r26, r30
    6226:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    6228:	ae 01       	movw	r20, r28
    622a:	4a 1b       	sub	r20, r26
    622c:	5b 0b       	sbc	r21, r27
    622e:	44 5f       	subi	r20, 0xF4	; 244
    6230:	5f 4f       	sbci	r21, 0xFF	; 255
    6232:	fc 01       	movw	r30, r24
    6234:	20 81       	ld	r18, Z
    6236:	31 81       	ldd	r19, Z+1	; 0x01
    6238:	f9 01       	movw	r30, r18
    623a:	22 81       	ldd	r18, Z+2	; 0x02
    623c:	33 81       	ldd	r19, Z+3	; 0x03
    623e:	bd 01       	movw	r22, r26
    6240:	f9 01       	movw	r30, r18
    6242:	09 95       	icall
}
    6244:	2b 96       	adiw	r28, 0x0b	; 11
    6246:	0f b6       	in	r0, 0x3f	; 63
    6248:	f8 94       	cli
    624a:	de bf       	out	0x3e, r29	; 62
    624c:	0f be       	out	0x3f, r0	; 63
    624e:	cd bf       	out	0x3d, r28	; 61
    6250:	df 91       	pop	r29
    6252:	cf 91       	pop	r28
    6254:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    6256:	fd 01       	movw	r30, r26
    6258:	aa cf       	rjmp	.-172    	; 0x61ae <Print::printNumberDec(unsigned long, unsigned char)+0x18>

0000625a <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    625a:	cf 93       	push	r28
    625c:	df 93       	push	r29
    625e:	1f 92       	push	r1
    6260:	cd b7       	in	r28, 0x3d	; 61
    6262:	de b7       	in	r29, 0x3e	; 62
    6264:	69 83       	std	Y+1, r22	; 0x01
    6266:	dc 01       	movw	r26, r24
    6268:	ed 91       	ld	r30, X+
    626a:	fc 91       	ld	r31, X
    626c:	02 80       	ldd	r0, Z+2	; 0x02
    626e:	f3 81       	ldd	r31, Z+3	; 0x03
    6270:	e0 2d       	mov	r30, r0
    6272:	41 e0       	ldi	r20, 0x01	; 1
    6274:	50 e0       	ldi	r21, 0x00	; 0
    6276:	be 01       	movw	r22, r28
    6278:	6f 5f       	subi	r22, 0xFF	; 255
    627a:	7f 4f       	sbci	r23, 0xFF	; 255
    627c:	09 95       	icall
    627e:	0f 90       	pop	r0
    6280:	df 91       	pop	r29
    6282:	cf 91       	pop	r28
    6284:	08 95       	ret

00006286 <usb_serial_class::available()>:
    6286:	fc 01       	movw	r30, r24
    6288:	8f b7       	in	r24, 0x3f	; 63
    628a:	f8 94       	cli
    628c:	90 91 5d 0f 	lds	r25, 0x0F5D	; 0x800f5d <usb_configuration>
    6290:	91 11       	cpse	r25, r1
    6292:	0c c0       	rjmp	.+24     	; 0x62ac <usb_serial_class::available()+0x26>
    6294:	90 e0       	ldi	r25, 0x00	; 0
    6296:	8f bf       	out	0x3f, r24	; 63
    6298:	20 85       	ldd	r18, Z+8	; 0x08
    629a:	31 85       	ldd	r19, Z+9	; 0x09
    629c:	37 fd       	sbrc	r19, 7
    629e:	03 c0       	rjmp	.+6      	; 0x62a6 <usb_serial_class::available()+0x20>
    62a0:	9f 3f       	cpi	r25, 0xFF	; 255
    62a2:	09 f0       	breq	.+2      	; 0x62a6 <usb_serial_class::available()+0x20>
    62a4:	9f 5f       	subi	r25, 0xFF	; 255
    62a6:	89 2f       	mov	r24, r25
    62a8:	90 e0       	ldi	r25, 0x00	; 0
    62aa:	08 95       	ret
    62ac:	93 e0       	ldi	r25, 0x03	; 3
    62ae:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    62b2:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    62b6:	91 11       	cpse	r25, r1
    62b8:	ee cf       	rjmp	.-36     	; 0x6296 <usb_serial_class::available()+0x10>
    62ba:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    62be:	22 ff       	sbrs	r18, 2
    62c0:	e9 cf       	rjmp	.-46     	; 0x6294 <usb_serial_class::available()+0xe>
    62c2:	25 fd       	sbrc	r18, 5
    62c4:	e7 cf       	rjmp	.-50     	; 0x6294 <usb_serial_class::available()+0xe>
    62c6:	2b e6       	ldi	r18, 0x6B	; 107
    62c8:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    62cc:	e4 cf       	rjmp	.-56     	; 0x6296 <usb_serial_class::available()+0x10>

000062ce <usb_serial_class::peek()>:
    62ce:	cf 93       	push	r28
    62d0:	df 93       	push	r29
    62d2:	ec 01       	movw	r28, r24
    62d4:	88 85       	ldd	r24, Y+8	; 0x08
    62d6:	99 85       	ldd	r25, Y+9	; 0x09
    62d8:	97 ff       	sbrs	r25, 7
    62da:	09 c0       	rjmp	.+18     	; 0x62ee <usb_serial_class::peek()+0x20>
    62dc:	e8 81       	ld	r30, Y
    62de:	f9 81       	ldd	r31, Y+1	; 0x01
    62e0:	02 84       	ldd	r0, Z+10	; 0x0a
    62e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    62e4:	e0 2d       	mov	r30, r0
    62e6:	ce 01       	movw	r24, r28
    62e8:	09 95       	icall
    62ea:	99 87       	std	Y+9, r25	; 0x09
    62ec:	88 87       	std	Y+8, r24	; 0x08
    62ee:	88 85       	ldd	r24, Y+8	; 0x08
    62f0:	99 85       	ldd	r25, Y+9	; 0x09
    62f2:	df 91       	pop	r29
    62f4:	cf 91       	pop	r28
    62f6:	08 95       	ret

000062f8 <usb_serial_class::read()>:
    62f8:	fc 01       	movw	r30, r24
    62fa:	20 85       	ldd	r18, Z+8	; 0x08
    62fc:	31 85       	ldd	r19, Z+9	; 0x09
    62fe:	37 fd       	sbrc	r19, 7
    6300:	07 c0       	rjmp	.+14     	; 0x6310 <usb_serial_class::read()+0x18>
    6302:	4f ef       	ldi	r20, 0xFF	; 255
    6304:	5f ef       	ldi	r21, 0xFF	; 255
    6306:	51 87       	std	Z+9, r21	; 0x09
    6308:	40 87       	std	Z+8, r20	; 0x08
    630a:	c9 01       	movw	r24, r18
    630c:	99 27       	eor	r25, r25
    630e:	08 95       	ret
    6310:	9f b7       	in	r25, 0x3f	; 63
    6312:	f8 94       	cli
    6314:	80 91 5d 0f 	lds	r24, 0x0F5D	; 0x800f5d <usb_configuration>
    6318:	81 11       	cpse	r24, r1
    631a:	04 c0       	rjmp	.+8      	; 0x6324 <usb_serial_class::read()+0x2c>
    631c:	9f bf       	out	0x3f, r25	; 63
    631e:	8f ef       	ldi	r24, 0xFF	; 255
    6320:	9f ef       	ldi	r25, 0xFF	; 255
    6322:	08 95       	ret
    6324:	83 e0       	ldi	r24, 0x03	; 3
    6326:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    632a:	2b e6       	ldi	r18, 0x6B	; 107
    632c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6330:	85 fd       	sbrc	r24, 5
    6332:	05 c0       	rjmp	.+10     	; 0x633e <usb_serial_class::read()+0x46>
    6334:	82 ff       	sbrs	r24, 2
    6336:	f2 cf       	rjmp	.-28     	; 0x631c <usb_serial_class::read()+0x24>
    6338:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    633c:	f7 cf       	rjmp	.-18     	; 0x632c <usb_serial_class::read()+0x34>
    633e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    6342:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6346:	25 fd       	sbrc	r18, 5
    6348:	03 c0       	rjmp	.+6      	; 0x6350 <usb_serial_class::read()+0x58>
    634a:	2b e6       	ldi	r18, 0x6B	; 107
    634c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6350:	9f bf       	out	0x3f, r25	; 63
    6352:	90 e0       	ldi	r25, 0x00	; 0
    6354:	08 95       	ret

00006356 <usb_serial_class::availableForWrite()>:
    6356:	80 91 5d 0f 	lds	r24, 0x0F5D	; 0x800f5d <usb_configuration>
    635a:	88 23       	and	r24, r24
    635c:	61 f0       	breq	.+24     	; 0x6376 <usb_serial_class::availableForWrite()+0x20>
    635e:	8f b7       	in	r24, 0x3f	; 63
    6360:	f8 94       	cli
    6362:	94 e0       	ldi	r25, 0x04	; 4
    6364:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6368:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    636c:	8f bf       	out	0x3f, r24	; 63
    636e:	80 e4       	ldi	r24, 0x40	; 64
    6370:	89 1b       	sub	r24, r25
    6372:	90 e0       	ldi	r25, 0x00	; 0
    6374:	08 95       	ret
    6376:	90 e0       	ldi	r25, 0x00	; 0
    6378:	80 e0       	ldi	r24, 0x00	; 0
    637a:	08 95       	ret

0000637c <usb_serial_class::write(unsigned char const*, unsigned int)>:
    637c:	bf 92       	push	r11
    637e:	cf 92       	push	r12
    6380:	df 92       	push	r13
    6382:	ef 92       	push	r14
    6384:	ff 92       	push	r15
    6386:	0f 93       	push	r16
    6388:	1f 93       	push	r17
    638a:	cf 93       	push	r28
    638c:	df 93       	push	r29
    638e:	7c 01       	movw	r14, r24
    6390:	80 91 5d 0f 	lds	r24, 0x0F5D	; 0x800f5d <usb_configuration>
    6394:	81 11       	cpse	r24, r1
    6396:	10 c0       	rjmp	.+32     	; 0x63b8 <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    6398:	81 e0       	ldi	r24, 0x01	; 1
    639a:	f7 01       	movw	r30, r14
    639c:	82 83       	std	Z+2, r24	; 0x02
    639e:	10 e0       	ldi	r17, 0x00	; 0
    63a0:	00 e0       	ldi	r16, 0x00	; 0
    63a2:	c8 01       	movw	r24, r16
    63a4:	df 91       	pop	r29
    63a6:	cf 91       	pop	r28
    63a8:	1f 91       	pop	r17
    63aa:	0f 91       	pop	r16
    63ac:	ff 90       	pop	r15
    63ae:	ef 90       	pop	r14
    63b0:	df 90       	pop	r13
    63b2:	cf 90       	pop	r12
    63b4:	bf 90       	pop	r11
    63b6:	08 95       	ret
    63b8:	2f b7       	in	r18, 0x3f	; 63
    63ba:	f8 94       	cli
    63bc:	84 e0       	ldi	r24, 0x04	; 4
    63be:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    63c2:	80 91 d7 0e 	lds	r24, 0x0ED7	; 0x800ed7 <transmit_previous_timeout>
    63c6:	88 23       	and	r24, r24
    63c8:	41 f0       	breq	.+16     	; 0x63da <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    63ca:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    63ce:	85 fd       	sbrc	r24, 5
    63d0:	02 c0       	rjmp	.+4      	; 0x63d6 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    63d2:	2f bf       	out	0x3f, r18	; 63
    63d4:	e1 cf       	rjmp	.-62     	; 0x6398 <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    63d6:	10 92 d7 0e 	sts	0x0ED7, r1	; 0x800ed7 <transmit_previous_timeout>
    63da:	10 e0       	ldi	r17, 0x00	; 0
    63dc:	00 e0       	ldi	r16, 0x00	; 0
    63de:	84 e0       	ldi	r24, 0x04	; 4
    63e0:	d8 2e       	mov	r13, r24
    63e2:	90 e4       	ldi	r25, 0x40	; 64
    63e4:	c9 2e       	mov	r12, r25
    63e6:	a1 ef       	ldi	r26, 0xF1	; 241
    63e8:	b0 e0       	ldi	r27, 0x00	; 0
    63ea:	3a e3       	ldi	r19, 0x3A	; 58
    63ec:	b3 2e       	mov	r11, r19
    63ee:	33 e0       	ldi	r19, 0x03	; 3
    63f0:	41 15       	cp	r20, r1
    63f2:	51 05       	cpc	r21, r1
    63f4:	09 f4       	brne	.+2      	; 0x63f8 <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    63f6:	c0 c0       	rjmp	.+384    	; 0x6578 <L548end+0x12>
    63f8:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    63fc:	81 5f       	subi	r24, 0xF1	; 241
    63fe:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6402:	95 fd       	sbrc	r25, 5
    6404:	16 c0       	rjmp	.+44     	; 0x6432 <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    6406:	2f bf       	out	0x3f, r18	; 63
    6408:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    640c:	89 13       	cpse	r24, r25
    640e:	06 c0       	rjmp	.+12     	; 0x641c <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    6410:	81 e0       	ldi	r24, 0x01	; 1
    6412:	80 93 d7 0e 	sts	0x0ED7, r24	; 0x800ed7 <transmit_previous_timeout>
    6416:	f7 01       	movw	r30, r14
    6418:	82 83       	std	Z+2, r24	; 0x02
    641a:	c3 cf       	rjmp	.-122    	; 0x63a2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    641c:	90 91 5d 0f 	lds	r25, 0x0F5D	; 0x800f5d <usb_configuration>
    6420:	91 11       	cpse	r25, r1
    6422:	02 c0       	rjmp	.+4      	; 0x6428 <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    6424:	81 e0       	ldi	r24, 0x01	; 1
    6426:	f7 cf       	rjmp	.-18     	; 0x6416 <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    6428:	2f b7       	in	r18, 0x3f	; 63
    642a:	f8 94       	cli
    642c:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6430:	e6 cf       	rjmp	.-52     	; 0x63fe <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    6432:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    6436:	9c 2d       	mov	r25, r12
    6438:	98 1b       	sub	r25, r24
    643a:	94 17       	cp	r25, r20
    643c:	15 06       	cpc	r1, r21
    643e:	11 f0       	breq	.+4      	; 0x6444 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    6440:	08 f0       	brcs	.+2      	; 0x6444 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    6442:	94 2f       	mov	r25, r20
    6444:	e9 2f       	mov	r30, r25
    6446:	f0 e0       	ldi	r31, 0x00	; 0
    6448:	4e 1b       	sub	r20, r30
    644a:	5f 0b       	sbc	r21, r31
    644c:	0e 0f       	add	r16, r30
    644e:	1f 1f       	adc	r17, r31
    6450:	eb 01       	movw	r28, r22

00006452 <L548begin>:
    6452:	e0 e4       	ldi	r30, 0x40	; 64
    6454:	e9 1b       	sub	r30, r25
    6456:	e0 34       	cpi	r30, 0x40	; 64
    6458:	28 f4       	brcc	.+10     	; 0x6464 <L548err>
    645a:	ee 0f       	add	r30, r30
    645c:	ff 27       	eor	r31, r31
    645e:	ed 5c       	subi	r30, 0xCD	; 205
    6460:	fd 4c       	sbci	r31, 0xCD	; 205
    6462:	09 94       	ijmp

00006464 <L548err>:
    6464:	80 c0       	rjmp	.+256    	; 0x6566 <L548end>

00006466 <L548table>:
    6466:	99 91       	ld	r25, Y+
    6468:	9c 93       	st	X, r25
    646a:	99 91       	ld	r25, Y+
    646c:	9c 93       	st	X, r25
    646e:	99 91       	ld	r25, Y+
    6470:	9c 93       	st	X, r25
    6472:	99 91       	ld	r25, Y+
    6474:	9c 93       	st	X, r25
    6476:	99 91       	ld	r25, Y+
    6478:	9c 93       	st	X, r25
    647a:	99 91       	ld	r25, Y+
    647c:	9c 93       	st	X, r25
    647e:	99 91       	ld	r25, Y+
    6480:	9c 93       	st	X, r25
    6482:	99 91       	ld	r25, Y+
    6484:	9c 93       	st	X, r25
    6486:	99 91       	ld	r25, Y+
    6488:	9c 93       	st	X, r25
    648a:	99 91       	ld	r25, Y+
    648c:	9c 93       	st	X, r25
    648e:	99 91       	ld	r25, Y+
    6490:	9c 93       	st	X, r25
    6492:	99 91       	ld	r25, Y+
    6494:	9c 93       	st	X, r25
    6496:	99 91       	ld	r25, Y+
    6498:	9c 93       	st	X, r25
    649a:	99 91       	ld	r25, Y+
    649c:	9c 93       	st	X, r25
    649e:	99 91       	ld	r25, Y+
    64a0:	9c 93       	st	X, r25
    64a2:	99 91       	ld	r25, Y+
    64a4:	9c 93       	st	X, r25
    64a6:	99 91       	ld	r25, Y+
    64a8:	9c 93       	st	X, r25
    64aa:	99 91       	ld	r25, Y+
    64ac:	9c 93       	st	X, r25
    64ae:	99 91       	ld	r25, Y+
    64b0:	9c 93       	st	X, r25
    64b2:	99 91       	ld	r25, Y+
    64b4:	9c 93       	st	X, r25
    64b6:	99 91       	ld	r25, Y+
    64b8:	9c 93       	st	X, r25
    64ba:	99 91       	ld	r25, Y+
    64bc:	9c 93       	st	X, r25
    64be:	99 91       	ld	r25, Y+
    64c0:	9c 93       	st	X, r25
    64c2:	99 91       	ld	r25, Y+
    64c4:	9c 93       	st	X, r25
    64c6:	99 91       	ld	r25, Y+
    64c8:	9c 93       	st	X, r25
    64ca:	99 91       	ld	r25, Y+
    64cc:	9c 93       	st	X, r25
    64ce:	99 91       	ld	r25, Y+
    64d0:	9c 93       	st	X, r25
    64d2:	99 91       	ld	r25, Y+
    64d4:	9c 93       	st	X, r25
    64d6:	99 91       	ld	r25, Y+
    64d8:	9c 93       	st	X, r25
    64da:	99 91       	ld	r25, Y+
    64dc:	9c 93       	st	X, r25
    64de:	99 91       	ld	r25, Y+
    64e0:	9c 93       	st	X, r25
    64e2:	99 91       	ld	r25, Y+
    64e4:	9c 93       	st	X, r25
    64e6:	99 91       	ld	r25, Y+
    64e8:	9c 93       	st	X, r25
    64ea:	99 91       	ld	r25, Y+
    64ec:	9c 93       	st	X, r25
    64ee:	99 91       	ld	r25, Y+
    64f0:	9c 93       	st	X, r25
    64f2:	99 91       	ld	r25, Y+
    64f4:	9c 93       	st	X, r25
    64f6:	99 91       	ld	r25, Y+
    64f8:	9c 93       	st	X, r25
    64fa:	99 91       	ld	r25, Y+
    64fc:	9c 93       	st	X, r25
    64fe:	99 91       	ld	r25, Y+
    6500:	9c 93       	st	X, r25
    6502:	99 91       	ld	r25, Y+
    6504:	9c 93       	st	X, r25
    6506:	99 91       	ld	r25, Y+
    6508:	9c 93       	st	X, r25
    650a:	99 91       	ld	r25, Y+
    650c:	9c 93       	st	X, r25
    650e:	99 91       	ld	r25, Y+
    6510:	9c 93       	st	X, r25
    6512:	99 91       	ld	r25, Y+
    6514:	9c 93       	st	X, r25
    6516:	99 91       	ld	r25, Y+
    6518:	9c 93       	st	X, r25
    651a:	99 91       	ld	r25, Y+
    651c:	9c 93       	st	X, r25
    651e:	99 91       	ld	r25, Y+
    6520:	9c 93       	st	X, r25
    6522:	99 91       	ld	r25, Y+
    6524:	9c 93       	st	X, r25
    6526:	99 91       	ld	r25, Y+
    6528:	9c 93       	st	X, r25
    652a:	99 91       	ld	r25, Y+
    652c:	9c 93       	st	X, r25
    652e:	99 91       	ld	r25, Y+
    6530:	9c 93       	st	X, r25
    6532:	99 91       	ld	r25, Y+
    6534:	9c 93       	st	X, r25
    6536:	99 91       	ld	r25, Y+
    6538:	9c 93       	st	X, r25
    653a:	99 91       	ld	r25, Y+
    653c:	9c 93       	st	X, r25
    653e:	99 91       	ld	r25, Y+
    6540:	9c 93       	st	X, r25
    6542:	99 91       	ld	r25, Y+
    6544:	9c 93       	st	X, r25
    6546:	99 91       	ld	r25, Y+
    6548:	9c 93       	st	X, r25
    654a:	99 91       	ld	r25, Y+
    654c:	9c 93       	st	X, r25
    654e:	99 91       	ld	r25, Y+
    6550:	9c 93       	st	X, r25
    6552:	99 91       	ld	r25, Y+
    6554:	9c 93       	st	X, r25
    6556:	99 91       	ld	r25, Y+
    6558:	9c 93       	st	X, r25
    655a:	99 91       	ld	r25, Y+
    655c:	9c 93       	st	X, r25
    655e:	99 91       	ld	r25, Y+
    6560:	9c 93       	st	X, r25
    6562:	99 91       	ld	r25, Y+
    6564:	9c 93       	st	X, r25

00006566 <L548end>:
    6566:	be 01       	movw	r22, r28
    6568:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    656c:	85 ff       	sbrs	r24, 5
    656e:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6572:	30 93 d9 0e 	sts	0x0ED9, r19	; 0x800ed9 <transmit_flush_timer>
    6576:	3c cf       	rjmp	.-392    	; 0x63f0 <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    6578:	2f bf       	out	0x3f, r18	; 63
    657a:	13 cf       	rjmp	.-474    	; 0x63a2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

0000657c <usb_serial_class::send_now()>:
    657c:	8f b7       	in	r24, 0x3f	; 63
    657e:	f8 94       	cli
    6580:	90 91 5d 0f 	lds	r25, 0x0F5D	; 0x800f5d <usb_configuration>
    6584:	99 23       	and	r25, r25
    6586:	61 f0       	breq	.+24     	; 0x65a0 <usb_serial_class::send_now()+0x24>
    6588:	90 91 d9 0e 	lds	r25, 0x0ED9	; 0x800ed9 <transmit_flush_timer>
    658c:	99 23       	and	r25, r25
    658e:	41 f0       	breq	.+16     	; 0x65a0 <usb_serial_class::send_now()+0x24>
    6590:	94 e0       	ldi	r25, 0x04	; 4
    6592:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6596:	9a e3       	ldi	r25, 0x3A	; 58
    6598:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    659c:	10 92 d9 0e 	sts	0x0ED9, r1	; 0x800ed9 <transmit_flush_timer>
    65a0:	8f bf       	out	0x3f, r24	; 63
    65a2:	08 95       	ret

000065a4 <usb_serial_class::flush()>:
    65a4:	eb cf       	rjmp	.-42     	; 0x657c <usb_serial_class::send_now()>

000065a6 <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    65a6:	ef e4       	ldi	r30, 0x4F	; 79
    65a8:	ff e0       	ldi	r31, 0x0F	; 15
    65aa:	11 86       	std	Z+9, r1	; 0x09
    65ac:	10 86       	std	Z+8, r1	; 0x08
    65ae:	12 82       	std	Z+2, r1	; 0x02
    65b0:	88 ee       	ldi	r24, 0xE8	; 232
    65b2:	93 e0       	ldi	r25, 0x03	; 3
    65b4:	a0 e0       	ldi	r26, 0x00	; 0
    65b6:	b0 e0       	ldi	r27, 0x00	; 0
    65b8:	83 83       	std	Z+3, r24	; 0x03
    65ba:	94 83       	std	Z+4, r25	; 0x04
    65bc:	a5 83       	std	Z+5, r26	; 0x05
    65be:	b6 83       	std	Z+6, r27	; 0x06
    65c0:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    65c2:	8c ec       	ldi	r24, 0xCC	; 204
    65c4:	97 e0       	ldi	r25, 0x07	; 7
    65c6:	91 83       	std	Z+1, r25	; 0x01
    65c8:	80 83       	st	Z, r24
    65ca:	08 95       	ret

000065cc <randomSeed(unsigned int)>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    65cc:	00 97       	sbiw	r24, 0x00	; 0
    65ce:	21 f0       	breq	.+8      	; 0x65d8 <randomSeed(unsigned int)+0xc>
    srandom(seed);
    65d0:	bc 01       	movw	r22, r24
    65d2:	90 e0       	ldi	r25, 0x00	; 0
    65d4:	80 e0       	ldi	r24, 0x00	; 0
    65d6:	d3 c3       	rjmp	.+1958   	; 0x6d7e <srandom>
  }
}
    65d8:	08 95       	ret

000065da <random(long)>:

long random(long howbig)
{
    65da:	cf 92       	push	r12
    65dc:	df 92       	push	r13
    65de:	ef 92       	push	r14
    65e0:	ff 92       	push	r15
    65e2:	6b 01       	movw	r12, r22
    65e4:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    65e6:	c1 14       	cp	r12, r1
    65e8:	d1 04       	cpc	r13, r1
    65ea:	e1 04       	cpc	r14, r1
    65ec:	f1 04       	cpc	r15, r1
    65ee:	31 f0       	breq	.+12     	; 0x65fc <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    65f0:	7a d3       	rcall	.+1780   	; 0x6ce6 <random>
    65f2:	a7 01       	movw	r20, r14
    65f4:	96 01       	movw	r18, r12
    65f6:	ea d2       	rcall	.+1492   	; 0x6bcc <__divmodsi4>
    65f8:	6b 01       	movw	r12, r22
    65fa:	7c 01       	movw	r14, r24
}
    65fc:	c7 01       	movw	r24, r14
    65fe:	b6 01       	movw	r22, r12
    6600:	ff 90       	pop	r15
    6602:	ef 90       	pop	r14
    6604:	df 90       	pop	r13
    6606:	cf 90       	pop	r12
    6608:	08 95       	ret

0000660a <random(long, long)>:

long random(long howsmall, long howbig)
{
    660a:	cf 92       	push	r12
    660c:	df 92       	push	r13
    660e:	ef 92       	push	r14
    6610:	ff 92       	push	r15
    6612:	6b 01       	movw	r12, r22
    6614:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    6616:	c2 16       	cp	r12, r18
    6618:	d3 06       	cpc	r13, r19
    661a:	e4 06       	cpc	r14, r20
    661c:	f5 06       	cpc	r15, r21
    661e:	5c f4       	brge	.+22     	; 0x6636 <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    6620:	ca 01       	movw	r24, r20
    6622:	b9 01       	movw	r22, r18
    6624:	6c 19       	sub	r22, r12
    6626:	7d 09       	sbc	r23, r13
    6628:	8e 09       	sbc	r24, r14
    662a:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    662c:	d6 df       	rcall	.-84     	; 0x65da <random(long)>
    662e:	c6 0e       	add	r12, r22
    6630:	d7 1e       	adc	r13, r23
    6632:	e8 1e       	adc	r14, r24
    6634:	f9 1e       	adc	r15, r25
}
    6636:	c7 01       	movw	r24, r14
    6638:	b6 01       	movw	r22, r12
    663a:	ff 90       	pop	r15
    663c:	ef 90       	pop	r14
    663e:	df 90       	pop	r13
    6640:	cf 90       	pop	r12
    6642:	08 95       	ret

00006644 <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6644:	4f 92       	push	r4
    6646:	5f 92       	push	r5
    6648:	6f 92       	push	r6
    664a:	7f 92       	push	r7
    664c:	af 92       	push	r10
    664e:	bf 92       	push	r11
    6650:	cf 92       	push	r12
    6652:	df 92       	push	r13
    6654:	ef 92       	push	r14
    6656:	ff 92       	push	r15
    6658:	0f 93       	push	r16
    665a:	1f 93       	push	r17
    665c:	cf 93       	push	r28
    665e:	df 93       	push	r29
    6660:	cd b7       	in	r28, 0x3d	; 61
    6662:	de b7       	in	r29, 0x3e	; 62
    6664:	29 01       	movw	r4, r18
    6666:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6668:	9b 01       	movw	r18, r22
    666a:	ac 01       	movw	r20, r24
    666c:	24 19       	sub	r18, r4
    666e:	35 09       	sbc	r19, r5
    6670:	46 09       	sbc	r20, r6
    6672:	57 09       	sbc	r21, r7
    6674:	89 89       	ldd	r24, Y+17	; 0x11
    6676:	9a 89       	ldd	r25, Y+18	; 0x12
    6678:	ab 89       	ldd	r26, Y+19	; 0x13
    667a:	bc 89       	ldd	r27, Y+20	; 0x14
    667c:	bc 01       	movw	r22, r24
    667e:	cd 01       	movw	r24, r26
    6680:	6a 19       	sub	r22, r10
    6682:	7b 09       	sbc	r23, r11
    6684:	8c 09       	sbc	r24, r12
    6686:	9d 09       	sbc	r25, r13
    6688:	49 d2       	rcall	.+1170   	; 0x6b1c <__mulsi3>
    668a:	a8 01       	movw	r20, r16
    668c:	97 01       	movw	r18, r14
    668e:	24 19       	sub	r18, r4
    6690:	35 09       	sbc	r19, r5
    6692:	46 09       	sbc	r20, r6
    6694:	57 09       	sbc	r21, r7
    6696:	9a d2       	rcall	.+1332   	; 0x6bcc <__divmodsi4>
    6698:	ca 01       	movw	r24, r20
    669a:	b9 01       	movw	r22, r18
    669c:	6a 0d       	add	r22, r10
    669e:	7b 1d       	adc	r23, r11
    66a0:	8c 1d       	adc	r24, r12
    66a2:	9d 1d       	adc	r25, r13
}
    66a4:	df 91       	pop	r29
    66a6:	cf 91       	pop	r28
    66a8:	1f 91       	pop	r17
    66aa:	0f 91       	pop	r16
    66ac:	ff 90       	pop	r15
    66ae:	ef 90       	pop	r14
    66b0:	df 90       	pop	r13
    66b2:	cf 90       	pop	r12
    66b4:	bf 90       	pop	r11
    66b6:	af 90       	pop	r10
    66b8:	7f 90       	pop	r7
    66ba:	6f 90       	pop	r6
    66bc:	5f 90       	pop	r5
    66be:	4f 90       	pop	r4
    66c0:	08 95       	ret

000066c2 <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    66c2:	fc 01       	movw	r30, r24
    66c4:	80 81       	ld	r24, Z
    66c6:	91 81       	ldd	r25, Z+1	; 0x01
    66c8:	0c 94 39 29 	jmp	0x5272	; 0x5272 <free>

000066cc <String::changeBuffer(unsigned int)>:
    66cc:	0f 93       	push	r16
    66ce:	1f 93       	push	r17
    66d0:	cf 93       	push	r28
    66d2:	df 93       	push	r29
    66d4:	ec 01       	movw	r28, r24
    66d6:	8b 01       	movw	r16, r22
    66d8:	6f 5f       	subi	r22, 0xFF	; 255
    66da:	7f 4f       	sbci	r23, 0xFF	; 255
    66dc:	88 81       	ld	r24, Y
    66de:	99 81       	ldd	r25, Y+1	; 0x01
    66e0:	0e 94 c2 29 	call	0x5384	; 0x5384 <realloc>
    66e4:	00 97       	sbiw	r24, 0x00	; 0
    66e6:	51 f0       	breq	.+20     	; 0x66fc <String::changeBuffer(unsigned int)+0x30>
    66e8:	99 83       	std	Y+1, r25	; 0x01
    66ea:	88 83       	st	Y, r24
    66ec:	1b 83       	std	Y+3, r17	; 0x03
    66ee:	0a 83       	std	Y+2, r16	; 0x02
    66f0:	81 e0       	ldi	r24, 0x01	; 1
    66f2:	df 91       	pop	r29
    66f4:	cf 91       	pop	r28
    66f6:	1f 91       	pop	r17
    66f8:	0f 91       	pop	r16
    66fa:	08 95       	ret
    66fc:	80 e0       	ldi	r24, 0x00	; 0
    66fe:	f9 cf       	rjmp	.-14     	; 0x66f2 <String::changeBuffer(unsigned int)+0x26>

00006700 <String::reserve(unsigned int)>:
    6700:	cf 93       	push	r28
    6702:	df 93       	push	r29
    6704:	fc 01       	movw	r30, r24
    6706:	22 81       	ldd	r18, Z+2	; 0x02
    6708:	33 81       	ldd	r19, Z+3	; 0x03
    670a:	26 17       	cp	r18, r22
    670c:	37 07       	cpc	r19, r23
    670e:	20 f0       	brcs	.+8      	; 0x6718 <String::reserve(unsigned int)+0x18>
    6710:	81 e0       	ldi	r24, 0x01	; 1
    6712:	df 91       	pop	r29
    6714:	cf 91       	pop	r28
    6716:	08 95       	ret
    6718:	ec 01       	movw	r28, r24
    671a:	d8 df       	rcall	.-80     	; 0x66cc <String::changeBuffer(unsigned int)>
    671c:	88 23       	and	r24, r24
    671e:	c9 f3       	breq	.-14     	; 0x6712 <String::reserve(unsigned int)+0x12>
    6720:	8c 81       	ldd	r24, Y+4	; 0x04
    6722:	9d 81       	ldd	r25, Y+5	; 0x05
    6724:	89 2b       	or	r24, r25
    6726:	a1 f7       	brne	.-24     	; 0x6710 <String::reserve(unsigned int)+0x10>
    6728:	e8 81       	ld	r30, Y
    672a:	f9 81       	ldd	r31, Y+1	; 0x01
    672c:	10 82       	st	Z, r1
    672e:	f0 cf       	rjmp	.-32     	; 0x6710 <String::reserve(unsigned int)+0x10>

00006730 <String::copy(char const*, unsigned int)>:
    6730:	ef 92       	push	r14
    6732:	ff 92       	push	r15
    6734:	0f 93       	push	r16
    6736:	1f 93       	push	r17
    6738:	cf 93       	push	r28
    673a:	df 93       	push	r29
    673c:	ec 01       	movw	r28, r24
    673e:	7b 01       	movw	r14, r22
    6740:	8a 01       	movw	r16, r20
    6742:	41 15       	cp	r20, r1
    6744:	51 05       	cpc	r21, r1
    6746:	79 f4       	brne	.+30     	; 0x6766 <String::copy(char const*, unsigned int)+0x36>
    6748:	e8 81       	ld	r30, Y
    674a:	f9 81       	ldd	r31, Y+1	; 0x01
    674c:	30 97       	sbiw	r30, 0x00	; 0
    674e:	09 f0       	breq	.+2      	; 0x6752 <String::copy(char const*, unsigned int)+0x22>
    6750:	10 82       	st	Z, r1
    6752:	1d 82       	std	Y+5, r1	; 0x05
    6754:	1c 82       	std	Y+4, r1	; 0x04
    6756:	ce 01       	movw	r24, r28
    6758:	df 91       	pop	r29
    675a:	cf 91       	pop	r28
    675c:	1f 91       	pop	r17
    675e:	0f 91       	pop	r16
    6760:	ff 90       	pop	r15
    6762:	ef 90       	pop	r14
    6764:	08 95       	ret
    6766:	ba 01       	movw	r22, r20
    6768:	cb df       	rcall	.-106    	; 0x6700 <String::reserve(unsigned int)>
    676a:	28 81       	ld	r18, Y
    676c:	39 81       	ldd	r19, Y+1	; 0x01
    676e:	81 11       	cpse	r24, r1
    6770:	0b c0       	rjmp	.+22     	; 0x6788 <String::copy(char const*, unsigned int)+0x58>
    6772:	21 15       	cp	r18, r1
    6774:	31 05       	cpc	r19, r1
    6776:	29 f0       	breq	.+10     	; 0x6782 <String::copy(char const*, unsigned int)+0x52>
    6778:	c9 01       	movw	r24, r18
    677a:	0e 94 39 29 	call	0x5272	; 0x5272 <free>
    677e:	19 82       	std	Y+1, r1	; 0x01
    6780:	18 82       	st	Y, r1
    6782:	1b 82       	std	Y+3, r1	; 0x03
    6784:	1a 82       	std	Y+2, r1	; 0x02
    6786:	e5 cf       	rjmp	.-54     	; 0x6752 <String::copy(char const*, unsigned int)+0x22>
    6788:	1d 83       	std	Y+5, r17	; 0x05
    678a:	0c 83       	std	Y+4, r16	; 0x04
    678c:	b7 01       	movw	r22, r14
    678e:	c9 01       	movw	r24, r18
    6790:	08 d3       	rcall	.+1552   	; 0x6da2 <strcpy>
    6792:	e1 cf       	rjmp	.-62     	; 0x6756 <String::copy(char const*, unsigned int)+0x26>

00006794 <String::String(char const*)>:
    6794:	fc 01       	movw	r30, r24
    6796:	11 82       	std	Z+1, r1	; 0x01
    6798:	10 82       	st	Z, r1
    679a:	13 82       	std	Z+3, r1	; 0x03
    679c:	12 82       	std	Z+2, r1	; 0x02
    679e:	15 82       	std	Z+5, r1	; 0x05
    67a0:	14 82       	std	Z+4, r1	; 0x04
    67a2:	16 82       	std	Z+6, r1	; 0x06
    67a4:	61 15       	cp	r22, r1
    67a6:	71 05       	cpc	r23, r1
    67a8:	49 f0       	breq	.+18     	; 0x67bc <String::String(char const*)+0x28>
    67aa:	fb 01       	movw	r30, r22
    67ac:	01 90       	ld	r0, Z+
    67ae:	00 20       	and	r0, r0
    67b0:	e9 f7       	brne	.-6      	; 0x67ac <String::String(char const*)+0x18>
    67b2:	31 97       	sbiw	r30, 0x01	; 1
    67b4:	af 01       	movw	r20, r30
    67b6:	46 1b       	sub	r20, r22
    67b8:	57 0b       	sbc	r21, r23
    67ba:	ba cf       	rjmp	.-140    	; 0x6730 <String::copy(char const*, unsigned int)>
    67bc:	08 95       	ret

000067be <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    67be:	0f 93       	push	r16
    67c0:	1f 93       	push	r17
    67c2:	cf 93       	push	r28
    67c4:	df 93       	push	r29
	if (!bufsize || !buf) return;
    67c6:	41 15       	cp	r20, r1
    67c8:	51 05       	cpc	r21, r1
    67ca:	59 f0       	breq	.+22     	; 0x67e2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    67cc:	61 15       	cp	r22, r1
    67ce:	71 05       	cpc	r23, r1
    67d0:	41 f0       	breq	.+16     	; 0x67e2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    67d2:	fc 01       	movw	r30, r24
    67d4:	04 81       	ldd	r16, Z+4	; 0x04
    67d6:	15 81       	ldd	r17, Z+5	; 0x05
    67d8:	20 17       	cp	r18, r16
    67da:	31 07       	cpc	r19, r17
    67dc:	38 f0       	brcs	.+14     	; 0x67ec <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    67de:	fb 01       	movw	r30, r22
    67e0:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    67e2:	df 91       	pop	r29
    67e4:	cf 91       	pop	r28
    67e6:	1f 91       	pop	r17
    67e8:	0f 91       	pop	r16
    67ea:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    67ec:	41 50       	subi	r20, 0x01	; 1
    67ee:	51 09       	sbc	r21, r1
    67f0:	02 1b       	sub	r16, r18
    67f2:	13 0b       	sbc	r17, r19
    67f4:	40 17       	cp	r20, r16
    67f6:	51 07       	cpc	r21, r17
    67f8:	08 f4       	brcc	.+2      	; 0x67fc <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    67fa:	8a 01       	movw	r16, r20
    67fc:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    67fe:	fc 01       	movw	r30, r24
    6800:	60 81       	ld	r22, Z
    6802:	71 81       	ldd	r23, Z+1	; 0x01
    6804:	62 0f       	add	r22, r18
    6806:	73 1f       	adc	r23, r19
    6808:	a8 01       	movw	r20, r16
    680a:	ce 01       	movw	r24, r28
    680c:	d1 d2       	rcall	.+1442   	; 0x6db0 <strncpy>
	buf[n] = 0;
    680e:	c0 0f       	add	r28, r16
    6810:	d1 1f       	adc	r29, r17
    6812:	18 82       	st	Y, r1
    6814:	e6 cf       	rjmp	.-52     	; 0x67e2 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

00006816 <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    6816:	08 95       	ret

00006818 <__subsf3>:
    6818:	50 58       	subi	r21, 0x80	; 128

0000681a <__addsf3>:
    681a:	bb 27       	eor	r27, r27
    681c:	aa 27       	eor	r26, r26
    681e:	0e d0       	rcall	.+28     	; 0x683c <__addsf3x>
    6820:	e0 c0       	rjmp	.+448    	; 0x69e2 <__fp_round>
    6822:	d1 d0       	rcall	.+418    	; 0x69c6 <__fp_pscA>
    6824:	30 f0       	brcs	.+12     	; 0x6832 <__addsf3+0x18>
    6826:	d6 d0       	rcall	.+428    	; 0x69d4 <__fp_pscB>
    6828:	20 f0       	brcs	.+8      	; 0x6832 <__addsf3+0x18>
    682a:	31 f4       	brne	.+12     	; 0x6838 <__addsf3+0x1e>
    682c:	9f 3f       	cpi	r25, 0xFF	; 255
    682e:	11 f4       	brne	.+4      	; 0x6834 <__addsf3+0x1a>
    6830:	1e f4       	brtc	.+6      	; 0x6838 <__addsf3+0x1e>
    6832:	c6 c0       	rjmp	.+396    	; 0x69c0 <__fp_nan>
    6834:	0e f4       	brtc	.+2      	; 0x6838 <__addsf3+0x1e>
    6836:	e0 95       	com	r30
    6838:	e7 fb       	bst	r30, 7
    683a:	bc c0       	rjmp	.+376    	; 0x69b4 <__fp_inf>

0000683c <__addsf3x>:
    683c:	e9 2f       	mov	r30, r25
    683e:	e2 d0       	rcall	.+452    	; 0x6a04 <__fp_split3>
    6840:	80 f3       	brcs	.-32     	; 0x6822 <__addsf3+0x8>
    6842:	ba 17       	cp	r27, r26
    6844:	62 07       	cpc	r22, r18
    6846:	73 07       	cpc	r23, r19
    6848:	84 07       	cpc	r24, r20
    684a:	95 07       	cpc	r25, r21
    684c:	18 f0       	brcs	.+6      	; 0x6854 <__addsf3x+0x18>
    684e:	71 f4       	brne	.+28     	; 0x686c <__addsf3x+0x30>
    6850:	9e f5       	brtc	.+102    	; 0x68b8 <__addsf3x+0x7c>
    6852:	fa c0       	rjmp	.+500    	; 0x6a48 <__fp_zero>
    6854:	0e f4       	brtc	.+2      	; 0x6858 <__addsf3x+0x1c>
    6856:	e0 95       	com	r30
    6858:	0b 2e       	mov	r0, r27
    685a:	ba 2f       	mov	r27, r26
    685c:	a0 2d       	mov	r26, r0
    685e:	0b 01       	movw	r0, r22
    6860:	b9 01       	movw	r22, r18
    6862:	90 01       	movw	r18, r0
    6864:	0c 01       	movw	r0, r24
    6866:	ca 01       	movw	r24, r20
    6868:	a0 01       	movw	r20, r0
    686a:	11 24       	eor	r1, r1
    686c:	ff 27       	eor	r31, r31
    686e:	59 1b       	sub	r21, r25
    6870:	99 f0       	breq	.+38     	; 0x6898 <__addsf3x+0x5c>
    6872:	59 3f       	cpi	r21, 0xF9	; 249
    6874:	50 f4       	brcc	.+20     	; 0x688a <__addsf3x+0x4e>
    6876:	50 3e       	cpi	r21, 0xE0	; 224
    6878:	68 f1       	brcs	.+90     	; 0x68d4 <__addsf3x+0x98>
    687a:	1a 16       	cp	r1, r26
    687c:	f0 40       	sbci	r31, 0x00	; 0
    687e:	a2 2f       	mov	r26, r18
    6880:	23 2f       	mov	r18, r19
    6882:	34 2f       	mov	r19, r20
    6884:	44 27       	eor	r20, r20
    6886:	58 5f       	subi	r21, 0xF8	; 248
    6888:	f3 cf       	rjmp	.-26     	; 0x6870 <__addsf3x+0x34>
    688a:	46 95       	lsr	r20
    688c:	37 95       	ror	r19
    688e:	27 95       	ror	r18
    6890:	a7 95       	ror	r26
    6892:	f0 40       	sbci	r31, 0x00	; 0
    6894:	53 95       	inc	r21
    6896:	c9 f7       	brne	.-14     	; 0x688a <__addsf3x+0x4e>
    6898:	7e f4       	brtc	.+30     	; 0x68b8 <__addsf3x+0x7c>
    689a:	1f 16       	cp	r1, r31
    689c:	ba 0b       	sbc	r27, r26
    689e:	62 0b       	sbc	r22, r18
    68a0:	73 0b       	sbc	r23, r19
    68a2:	84 0b       	sbc	r24, r20
    68a4:	ba f0       	brmi	.+46     	; 0x68d4 <__addsf3x+0x98>
    68a6:	91 50       	subi	r25, 0x01	; 1
    68a8:	a1 f0       	breq	.+40     	; 0x68d2 <__addsf3x+0x96>
    68aa:	ff 0f       	add	r31, r31
    68ac:	bb 1f       	adc	r27, r27
    68ae:	66 1f       	adc	r22, r22
    68b0:	77 1f       	adc	r23, r23
    68b2:	88 1f       	adc	r24, r24
    68b4:	c2 f7       	brpl	.-16     	; 0x68a6 <__addsf3x+0x6a>
    68b6:	0e c0       	rjmp	.+28     	; 0x68d4 <__addsf3x+0x98>
    68b8:	ba 0f       	add	r27, r26
    68ba:	62 1f       	adc	r22, r18
    68bc:	73 1f       	adc	r23, r19
    68be:	84 1f       	adc	r24, r20
    68c0:	48 f4       	brcc	.+18     	; 0x68d4 <__addsf3x+0x98>
    68c2:	87 95       	ror	r24
    68c4:	77 95       	ror	r23
    68c6:	67 95       	ror	r22
    68c8:	b7 95       	ror	r27
    68ca:	f7 95       	ror	r31
    68cc:	9e 3f       	cpi	r25, 0xFE	; 254
    68ce:	08 f0       	brcs	.+2      	; 0x68d2 <__addsf3x+0x96>
    68d0:	b3 cf       	rjmp	.-154    	; 0x6838 <__addsf3+0x1e>
    68d2:	93 95       	inc	r25
    68d4:	88 0f       	add	r24, r24
    68d6:	08 f0       	brcs	.+2      	; 0x68da <__addsf3x+0x9e>
    68d8:	99 27       	eor	r25, r25
    68da:	ee 0f       	add	r30, r30
    68dc:	97 95       	ror	r25
    68de:	87 95       	ror	r24
    68e0:	08 95       	ret

000068e2 <__fixunssfsi>:
    68e2:	98 d0       	rcall	.+304    	; 0x6a14 <__fp_splitA>
    68e4:	88 f0       	brcs	.+34     	; 0x6908 <__fixunssfsi+0x26>
    68e6:	9f 57       	subi	r25, 0x7F	; 127
    68e8:	90 f0       	brcs	.+36     	; 0x690e <__fixunssfsi+0x2c>
    68ea:	b9 2f       	mov	r27, r25
    68ec:	99 27       	eor	r25, r25
    68ee:	b7 51       	subi	r27, 0x17	; 23
    68f0:	a0 f0       	brcs	.+40     	; 0x691a <__fixunssfsi+0x38>
    68f2:	d1 f0       	breq	.+52     	; 0x6928 <__fixunssfsi+0x46>
    68f4:	66 0f       	add	r22, r22
    68f6:	77 1f       	adc	r23, r23
    68f8:	88 1f       	adc	r24, r24
    68fa:	99 1f       	adc	r25, r25
    68fc:	1a f0       	brmi	.+6      	; 0x6904 <__fixunssfsi+0x22>
    68fe:	ba 95       	dec	r27
    6900:	c9 f7       	brne	.-14     	; 0x68f4 <__fixunssfsi+0x12>
    6902:	12 c0       	rjmp	.+36     	; 0x6928 <__fixunssfsi+0x46>
    6904:	b1 30       	cpi	r27, 0x01	; 1
    6906:	81 f0       	breq	.+32     	; 0x6928 <__fixunssfsi+0x46>
    6908:	9f d0       	rcall	.+318    	; 0x6a48 <__fp_zero>
    690a:	b1 e0       	ldi	r27, 0x01	; 1
    690c:	08 95       	ret
    690e:	9c c0       	rjmp	.+312    	; 0x6a48 <__fp_zero>
    6910:	67 2f       	mov	r22, r23
    6912:	78 2f       	mov	r23, r24
    6914:	88 27       	eor	r24, r24
    6916:	b8 5f       	subi	r27, 0xF8	; 248
    6918:	39 f0       	breq	.+14     	; 0x6928 <__fixunssfsi+0x46>
    691a:	b9 3f       	cpi	r27, 0xF9	; 249
    691c:	cc f3       	brlt	.-14     	; 0x6910 <__fixunssfsi+0x2e>
    691e:	86 95       	lsr	r24
    6920:	77 95       	ror	r23
    6922:	67 95       	ror	r22
    6924:	b3 95       	inc	r27
    6926:	d9 f7       	brne	.-10     	; 0x691e <__fixunssfsi+0x3c>
    6928:	3e f4       	brtc	.+14     	; 0x6938 <__fixunssfsi+0x56>
    692a:	90 95       	com	r25
    692c:	80 95       	com	r24
    692e:	70 95       	com	r23
    6930:	61 95       	neg	r22
    6932:	7f 4f       	sbci	r23, 0xFF	; 255
    6934:	8f 4f       	sbci	r24, 0xFF	; 255
    6936:	9f 4f       	sbci	r25, 0xFF	; 255
    6938:	08 95       	ret

0000693a <__floatunsisf>:
    693a:	e8 94       	clt
    693c:	09 c0       	rjmp	.+18     	; 0x6950 <__floatsisf+0x12>

0000693e <__floatsisf>:
    693e:	97 fb       	bst	r25, 7
    6940:	3e f4       	brtc	.+14     	; 0x6950 <__floatsisf+0x12>
    6942:	90 95       	com	r25
    6944:	80 95       	com	r24
    6946:	70 95       	com	r23
    6948:	61 95       	neg	r22
    694a:	7f 4f       	sbci	r23, 0xFF	; 255
    694c:	8f 4f       	sbci	r24, 0xFF	; 255
    694e:	9f 4f       	sbci	r25, 0xFF	; 255
    6950:	99 23       	and	r25, r25
    6952:	a9 f0       	breq	.+42     	; 0x697e <__floatsisf+0x40>
    6954:	f9 2f       	mov	r31, r25
    6956:	96 e9       	ldi	r25, 0x96	; 150
    6958:	bb 27       	eor	r27, r27
    695a:	93 95       	inc	r25
    695c:	f6 95       	lsr	r31
    695e:	87 95       	ror	r24
    6960:	77 95       	ror	r23
    6962:	67 95       	ror	r22
    6964:	b7 95       	ror	r27
    6966:	f1 11       	cpse	r31, r1
    6968:	f8 cf       	rjmp	.-16     	; 0x695a <__floatsisf+0x1c>
    696a:	fa f4       	brpl	.+62     	; 0x69aa <__floatsisf+0x6c>
    696c:	bb 0f       	add	r27, r27
    696e:	11 f4       	brne	.+4      	; 0x6974 <__floatsisf+0x36>
    6970:	60 ff       	sbrs	r22, 0
    6972:	1b c0       	rjmp	.+54     	; 0x69aa <__floatsisf+0x6c>
    6974:	6f 5f       	subi	r22, 0xFF	; 255
    6976:	7f 4f       	sbci	r23, 0xFF	; 255
    6978:	8f 4f       	sbci	r24, 0xFF	; 255
    697a:	9f 4f       	sbci	r25, 0xFF	; 255
    697c:	16 c0       	rjmp	.+44     	; 0x69aa <__floatsisf+0x6c>
    697e:	88 23       	and	r24, r24
    6980:	11 f0       	breq	.+4      	; 0x6986 <__floatsisf+0x48>
    6982:	96 e9       	ldi	r25, 0x96	; 150
    6984:	11 c0       	rjmp	.+34     	; 0x69a8 <__floatsisf+0x6a>
    6986:	77 23       	and	r23, r23
    6988:	21 f0       	breq	.+8      	; 0x6992 <__floatsisf+0x54>
    698a:	9e e8       	ldi	r25, 0x8E	; 142
    698c:	87 2f       	mov	r24, r23
    698e:	76 2f       	mov	r23, r22
    6990:	05 c0       	rjmp	.+10     	; 0x699c <__floatsisf+0x5e>
    6992:	66 23       	and	r22, r22
    6994:	71 f0       	breq	.+28     	; 0x69b2 <__floatsisf+0x74>
    6996:	96 e8       	ldi	r25, 0x86	; 134
    6998:	86 2f       	mov	r24, r22
    699a:	70 e0       	ldi	r23, 0x00	; 0
    699c:	60 e0       	ldi	r22, 0x00	; 0
    699e:	2a f0       	brmi	.+10     	; 0x69aa <__floatsisf+0x6c>
    69a0:	9a 95       	dec	r25
    69a2:	66 0f       	add	r22, r22
    69a4:	77 1f       	adc	r23, r23
    69a6:	88 1f       	adc	r24, r24
    69a8:	da f7       	brpl	.-10     	; 0x69a0 <__floatsisf+0x62>
    69aa:	88 0f       	add	r24, r24
    69ac:	96 95       	lsr	r25
    69ae:	87 95       	ror	r24
    69b0:	97 f9       	bld	r25, 7
    69b2:	08 95       	ret

000069b4 <__fp_inf>:
    69b4:	97 f9       	bld	r25, 7
    69b6:	9f 67       	ori	r25, 0x7F	; 127
    69b8:	80 e8       	ldi	r24, 0x80	; 128
    69ba:	70 e0       	ldi	r23, 0x00	; 0
    69bc:	60 e0       	ldi	r22, 0x00	; 0
    69be:	08 95       	ret

000069c0 <__fp_nan>:
    69c0:	9f ef       	ldi	r25, 0xFF	; 255
    69c2:	80 ec       	ldi	r24, 0xC0	; 192
    69c4:	08 95       	ret

000069c6 <__fp_pscA>:
    69c6:	00 24       	eor	r0, r0
    69c8:	0a 94       	dec	r0
    69ca:	16 16       	cp	r1, r22
    69cc:	17 06       	cpc	r1, r23
    69ce:	18 06       	cpc	r1, r24
    69d0:	09 06       	cpc	r0, r25
    69d2:	08 95       	ret

000069d4 <__fp_pscB>:
    69d4:	00 24       	eor	r0, r0
    69d6:	0a 94       	dec	r0
    69d8:	12 16       	cp	r1, r18
    69da:	13 06       	cpc	r1, r19
    69dc:	14 06       	cpc	r1, r20
    69de:	05 06       	cpc	r0, r21
    69e0:	08 95       	ret

000069e2 <__fp_round>:
    69e2:	09 2e       	mov	r0, r25
    69e4:	03 94       	inc	r0
    69e6:	00 0c       	add	r0, r0
    69e8:	11 f4       	brne	.+4      	; 0x69ee <__fp_round+0xc>
    69ea:	88 23       	and	r24, r24
    69ec:	52 f0       	brmi	.+20     	; 0x6a02 <__fp_round+0x20>
    69ee:	bb 0f       	add	r27, r27
    69f0:	40 f4       	brcc	.+16     	; 0x6a02 <__fp_round+0x20>
    69f2:	bf 2b       	or	r27, r31
    69f4:	11 f4       	brne	.+4      	; 0x69fa <__fp_round+0x18>
    69f6:	60 ff       	sbrs	r22, 0
    69f8:	04 c0       	rjmp	.+8      	; 0x6a02 <__fp_round+0x20>
    69fa:	6f 5f       	subi	r22, 0xFF	; 255
    69fc:	7f 4f       	sbci	r23, 0xFF	; 255
    69fe:	8f 4f       	sbci	r24, 0xFF	; 255
    6a00:	9f 4f       	sbci	r25, 0xFF	; 255
    6a02:	08 95       	ret

00006a04 <__fp_split3>:
    6a04:	57 fd       	sbrc	r21, 7
    6a06:	90 58       	subi	r25, 0x80	; 128
    6a08:	44 0f       	add	r20, r20
    6a0a:	55 1f       	adc	r21, r21
    6a0c:	59 f0       	breq	.+22     	; 0x6a24 <__fp_splitA+0x10>
    6a0e:	5f 3f       	cpi	r21, 0xFF	; 255
    6a10:	71 f0       	breq	.+28     	; 0x6a2e <__fp_splitA+0x1a>
    6a12:	47 95       	ror	r20

00006a14 <__fp_splitA>:
    6a14:	88 0f       	add	r24, r24
    6a16:	97 fb       	bst	r25, 7
    6a18:	99 1f       	adc	r25, r25
    6a1a:	61 f0       	breq	.+24     	; 0x6a34 <__fp_splitA+0x20>
    6a1c:	9f 3f       	cpi	r25, 0xFF	; 255
    6a1e:	79 f0       	breq	.+30     	; 0x6a3e <__fp_splitA+0x2a>
    6a20:	87 95       	ror	r24
    6a22:	08 95       	ret
    6a24:	12 16       	cp	r1, r18
    6a26:	13 06       	cpc	r1, r19
    6a28:	14 06       	cpc	r1, r20
    6a2a:	55 1f       	adc	r21, r21
    6a2c:	f2 cf       	rjmp	.-28     	; 0x6a12 <__fp_split3+0xe>
    6a2e:	46 95       	lsr	r20
    6a30:	f1 df       	rcall	.-30     	; 0x6a14 <__fp_splitA>
    6a32:	08 c0       	rjmp	.+16     	; 0x6a44 <__fp_splitA+0x30>
    6a34:	16 16       	cp	r1, r22
    6a36:	17 06       	cpc	r1, r23
    6a38:	18 06       	cpc	r1, r24
    6a3a:	99 1f       	adc	r25, r25
    6a3c:	f1 cf       	rjmp	.-30     	; 0x6a20 <__fp_splitA+0xc>
    6a3e:	86 95       	lsr	r24
    6a40:	71 05       	cpc	r23, r1
    6a42:	61 05       	cpc	r22, r1
    6a44:	08 94       	sec
    6a46:	08 95       	ret

00006a48 <__fp_zero>:
    6a48:	e8 94       	clt

00006a4a <__fp_szero>:
    6a4a:	bb 27       	eor	r27, r27
    6a4c:	66 27       	eor	r22, r22
    6a4e:	77 27       	eor	r23, r23
    6a50:	cb 01       	movw	r24, r22
    6a52:	97 f9       	bld	r25, 7
    6a54:	08 95       	ret

00006a56 <__mulsf3>:
    6a56:	0b d0       	rcall	.+22     	; 0x6a6e <__mulsf3x>
    6a58:	c4 cf       	rjmp	.-120    	; 0x69e2 <__fp_round>
    6a5a:	b5 df       	rcall	.-150    	; 0x69c6 <__fp_pscA>
    6a5c:	28 f0       	brcs	.+10     	; 0x6a68 <__mulsf3+0x12>
    6a5e:	ba df       	rcall	.-140    	; 0x69d4 <__fp_pscB>
    6a60:	18 f0       	brcs	.+6      	; 0x6a68 <__mulsf3+0x12>
    6a62:	95 23       	and	r25, r21
    6a64:	09 f0       	breq	.+2      	; 0x6a68 <__mulsf3+0x12>
    6a66:	a6 cf       	rjmp	.-180    	; 0x69b4 <__fp_inf>
    6a68:	ab cf       	rjmp	.-170    	; 0x69c0 <__fp_nan>
    6a6a:	11 24       	eor	r1, r1
    6a6c:	ee cf       	rjmp	.-36     	; 0x6a4a <__fp_szero>

00006a6e <__mulsf3x>:
    6a6e:	ca df       	rcall	.-108    	; 0x6a04 <__fp_split3>
    6a70:	a0 f3       	brcs	.-24     	; 0x6a5a <__mulsf3+0x4>

00006a72 <__mulsf3_pse>:
    6a72:	95 9f       	mul	r25, r21
    6a74:	d1 f3       	breq	.-12     	; 0x6a6a <__mulsf3+0x14>
    6a76:	95 0f       	add	r25, r21
    6a78:	50 e0       	ldi	r21, 0x00	; 0
    6a7a:	55 1f       	adc	r21, r21
    6a7c:	62 9f       	mul	r22, r18
    6a7e:	f0 01       	movw	r30, r0
    6a80:	72 9f       	mul	r23, r18
    6a82:	bb 27       	eor	r27, r27
    6a84:	f0 0d       	add	r31, r0
    6a86:	b1 1d       	adc	r27, r1
    6a88:	63 9f       	mul	r22, r19
    6a8a:	aa 27       	eor	r26, r26
    6a8c:	f0 0d       	add	r31, r0
    6a8e:	b1 1d       	adc	r27, r1
    6a90:	aa 1f       	adc	r26, r26
    6a92:	64 9f       	mul	r22, r20
    6a94:	66 27       	eor	r22, r22
    6a96:	b0 0d       	add	r27, r0
    6a98:	a1 1d       	adc	r26, r1
    6a9a:	66 1f       	adc	r22, r22
    6a9c:	82 9f       	mul	r24, r18
    6a9e:	22 27       	eor	r18, r18
    6aa0:	b0 0d       	add	r27, r0
    6aa2:	a1 1d       	adc	r26, r1
    6aa4:	62 1f       	adc	r22, r18
    6aa6:	73 9f       	mul	r23, r19
    6aa8:	b0 0d       	add	r27, r0
    6aaa:	a1 1d       	adc	r26, r1
    6aac:	62 1f       	adc	r22, r18
    6aae:	83 9f       	mul	r24, r19
    6ab0:	a0 0d       	add	r26, r0
    6ab2:	61 1d       	adc	r22, r1
    6ab4:	22 1f       	adc	r18, r18
    6ab6:	74 9f       	mul	r23, r20
    6ab8:	33 27       	eor	r19, r19
    6aba:	a0 0d       	add	r26, r0
    6abc:	61 1d       	adc	r22, r1
    6abe:	23 1f       	adc	r18, r19
    6ac0:	84 9f       	mul	r24, r20
    6ac2:	60 0d       	add	r22, r0
    6ac4:	21 1d       	adc	r18, r1
    6ac6:	82 2f       	mov	r24, r18
    6ac8:	76 2f       	mov	r23, r22
    6aca:	6a 2f       	mov	r22, r26
    6acc:	11 24       	eor	r1, r1
    6ace:	9f 57       	subi	r25, 0x7F	; 127
    6ad0:	50 40       	sbci	r21, 0x00	; 0
    6ad2:	8a f0       	brmi	.+34     	; 0x6af6 <__mulsf3_pse+0x84>
    6ad4:	e1 f0       	breq	.+56     	; 0x6b0e <__mulsf3_pse+0x9c>
    6ad6:	88 23       	and	r24, r24
    6ad8:	4a f0       	brmi	.+18     	; 0x6aec <__mulsf3_pse+0x7a>
    6ada:	ee 0f       	add	r30, r30
    6adc:	ff 1f       	adc	r31, r31
    6ade:	bb 1f       	adc	r27, r27
    6ae0:	66 1f       	adc	r22, r22
    6ae2:	77 1f       	adc	r23, r23
    6ae4:	88 1f       	adc	r24, r24
    6ae6:	91 50       	subi	r25, 0x01	; 1
    6ae8:	50 40       	sbci	r21, 0x00	; 0
    6aea:	a9 f7       	brne	.-22     	; 0x6ad6 <__mulsf3_pse+0x64>
    6aec:	9e 3f       	cpi	r25, 0xFE	; 254
    6aee:	51 05       	cpc	r21, r1
    6af0:	70 f0       	brcs	.+28     	; 0x6b0e <__mulsf3_pse+0x9c>
    6af2:	60 cf       	rjmp	.-320    	; 0x69b4 <__fp_inf>
    6af4:	aa cf       	rjmp	.-172    	; 0x6a4a <__fp_szero>
    6af6:	5f 3f       	cpi	r21, 0xFF	; 255
    6af8:	ec f3       	brlt	.-6      	; 0x6af4 <__mulsf3_pse+0x82>
    6afa:	98 3e       	cpi	r25, 0xE8	; 232
    6afc:	dc f3       	brlt	.-10     	; 0x6af4 <__mulsf3_pse+0x82>
    6afe:	86 95       	lsr	r24
    6b00:	77 95       	ror	r23
    6b02:	67 95       	ror	r22
    6b04:	b7 95       	ror	r27
    6b06:	f7 95       	ror	r31
    6b08:	e7 95       	ror	r30
    6b0a:	9f 5f       	subi	r25, 0xFF	; 255
    6b0c:	c1 f7       	brne	.-16     	; 0x6afe <__mulsf3_pse+0x8c>
    6b0e:	fe 2b       	or	r31, r30
    6b10:	88 0f       	add	r24, r24
    6b12:	91 1d       	adc	r25, r1
    6b14:	96 95       	lsr	r25
    6b16:	87 95       	ror	r24
    6b18:	97 f9       	bld	r25, 7
    6b1a:	08 95       	ret

00006b1c <__mulsi3>:
    6b1c:	db 01       	movw	r26, r22
    6b1e:	8f 93       	push	r24
    6b20:	9f 93       	push	r25
    6b22:	8e d0       	rcall	.+284    	; 0x6c40 <__muluhisi3>
    6b24:	bf 91       	pop	r27
    6b26:	af 91       	pop	r26
    6b28:	a2 9f       	mul	r26, r18
    6b2a:	80 0d       	add	r24, r0
    6b2c:	91 1d       	adc	r25, r1
    6b2e:	a3 9f       	mul	r26, r19
    6b30:	90 0d       	add	r25, r0
    6b32:	b2 9f       	mul	r27, r18
    6b34:	90 0d       	add	r25, r0
    6b36:	11 24       	eor	r1, r1
    6b38:	08 95       	ret

00006b3a <__udivmodhi4>:
    6b3a:	aa 1b       	sub	r26, r26
    6b3c:	bb 1b       	sub	r27, r27
    6b3e:	51 e1       	ldi	r21, 0x11	; 17
    6b40:	07 c0       	rjmp	.+14     	; 0x6b50 <__udivmodhi4_ep>

00006b42 <__udivmodhi4_loop>:
    6b42:	aa 1f       	adc	r26, r26
    6b44:	bb 1f       	adc	r27, r27
    6b46:	a6 17       	cp	r26, r22
    6b48:	b7 07       	cpc	r27, r23
    6b4a:	10 f0       	brcs	.+4      	; 0x6b50 <__udivmodhi4_ep>
    6b4c:	a6 1b       	sub	r26, r22
    6b4e:	b7 0b       	sbc	r27, r23

00006b50 <__udivmodhi4_ep>:
    6b50:	88 1f       	adc	r24, r24
    6b52:	99 1f       	adc	r25, r25
    6b54:	5a 95       	dec	r21
    6b56:	a9 f7       	brne	.-22     	; 0x6b42 <__udivmodhi4_loop>
    6b58:	80 95       	com	r24
    6b5a:	90 95       	com	r25
    6b5c:	bc 01       	movw	r22, r24
    6b5e:	cd 01       	movw	r24, r26
    6b60:	08 95       	ret

00006b62 <__divmodhi4>:
    6b62:	97 fb       	bst	r25, 7
    6b64:	07 2e       	mov	r0, r23
    6b66:	16 f4       	brtc	.+4      	; 0x6b6c <__divmodhi4+0xa>
    6b68:	00 94       	com	r0
    6b6a:	06 d0       	rcall	.+12     	; 0x6b78 <__divmodhi4_neg1>
    6b6c:	77 fd       	sbrc	r23, 7
    6b6e:	08 d0       	rcall	.+16     	; 0x6b80 <__divmodhi4_neg2>
    6b70:	e4 df       	rcall	.-56     	; 0x6b3a <__udivmodhi4>
    6b72:	07 fc       	sbrc	r0, 7
    6b74:	05 d0       	rcall	.+10     	; 0x6b80 <__divmodhi4_neg2>
    6b76:	3e f4       	brtc	.+14     	; 0x6b86 <__divmodhi4_exit>

00006b78 <__divmodhi4_neg1>:
    6b78:	90 95       	com	r25
    6b7a:	81 95       	neg	r24
    6b7c:	9f 4f       	sbci	r25, 0xFF	; 255
    6b7e:	08 95       	ret

00006b80 <__divmodhi4_neg2>:
    6b80:	70 95       	com	r23
    6b82:	61 95       	neg	r22
    6b84:	7f 4f       	sbci	r23, 0xFF	; 255

00006b86 <__divmodhi4_exit>:
    6b86:	08 95       	ret

00006b88 <__udivmodsi4>:
    6b88:	a1 e2       	ldi	r26, 0x21	; 33
    6b8a:	1a 2e       	mov	r1, r26
    6b8c:	aa 1b       	sub	r26, r26
    6b8e:	bb 1b       	sub	r27, r27
    6b90:	fd 01       	movw	r30, r26
    6b92:	0d c0       	rjmp	.+26     	; 0x6bae <__udivmodsi4_ep>

00006b94 <__udivmodsi4_loop>:
    6b94:	aa 1f       	adc	r26, r26
    6b96:	bb 1f       	adc	r27, r27
    6b98:	ee 1f       	adc	r30, r30
    6b9a:	ff 1f       	adc	r31, r31
    6b9c:	a2 17       	cp	r26, r18
    6b9e:	b3 07       	cpc	r27, r19
    6ba0:	e4 07       	cpc	r30, r20
    6ba2:	f5 07       	cpc	r31, r21
    6ba4:	20 f0       	brcs	.+8      	; 0x6bae <__udivmodsi4_ep>
    6ba6:	a2 1b       	sub	r26, r18
    6ba8:	b3 0b       	sbc	r27, r19
    6baa:	e4 0b       	sbc	r30, r20
    6bac:	f5 0b       	sbc	r31, r21

00006bae <__udivmodsi4_ep>:
    6bae:	66 1f       	adc	r22, r22
    6bb0:	77 1f       	adc	r23, r23
    6bb2:	88 1f       	adc	r24, r24
    6bb4:	99 1f       	adc	r25, r25
    6bb6:	1a 94       	dec	r1
    6bb8:	69 f7       	brne	.-38     	; 0x6b94 <__udivmodsi4_loop>
    6bba:	60 95       	com	r22
    6bbc:	70 95       	com	r23
    6bbe:	80 95       	com	r24
    6bc0:	90 95       	com	r25
    6bc2:	9b 01       	movw	r18, r22
    6bc4:	ac 01       	movw	r20, r24
    6bc6:	bd 01       	movw	r22, r26
    6bc8:	cf 01       	movw	r24, r30
    6bca:	08 95       	ret

00006bcc <__divmodsi4>:
    6bcc:	05 2e       	mov	r0, r21
    6bce:	97 fb       	bst	r25, 7
    6bd0:	16 f4       	brtc	.+4      	; 0x6bd6 <__divmodsi4+0xa>
    6bd2:	00 94       	com	r0
    6bd4:	0f d0       	rcall	.+30     	; 0x6bf4 <__negsi2>
    6bd6:	57 fd       	sbrc	r21, 7
    6bd8:	05 d0       	rcall	.+10     	; 0x6be4 <__divmodsi4_neg2>
    6bda:	d6 df       	rcall	.-84     	; 0x6b88 <__udivmodsi4>
    6bdc:	07 fc       	sbrc	r0, 7
    6bde:	02 d0       	rcall	.+4      	; 0x6be4 <__divmodsi4_neg2>
    6be0:	46 f4       	brtc	.+16     	; 0x6bf2 <__divmodsi4_exit>
    6be2:	08 c0       	rjmp	.+16     	; 0x6bf4 <__negsi2>

00006be4 <__divmodsi4_neg2>:
    6be4:	50 95       	com	r21
    6be6:	40 95       	com	r20
    6be8:	30 95       	com	r19
    6bea:	21 95       	neg	r18
    6bec:	3f 4f       	sbci	r19, 0xFF	; 255
    6bee:	4f 4f       	sbci	r20, 0xFF	; 255
    6bf0:	5f 4f       	sbci	r21, 0xFF	; 255

00006bf2 <__divmodsi4_exit>:
    6bf2:	08 95       	ret

00006bf4 <__negsi2>:
    6bf4:	90 95       	com	r25
    6bf6:	80 95       	com	r24
    6bf8:	70 95       	com	r23
    6bfa:	61 95       	neg	r22
    6bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    6bfe:	8f 4f       	sbci	r24, 0xFF	; 255
    6c00:	9f 4f       	sbci	r25, 0xFF	; 255
    6c02:	08 95       	ret

00006c04 <__tablejump2__>:
    6c04:	ee 0f       	add	r30, r30
    6c06:	ff 1f       	adc	r31, r31
    6c08:	00 24       	eor	r0, r0
    6c0a:	00 1c       	adc	r0, r0
    6c0c:	0b be       	out	0x3b, r0	; 59
    6c0e:	07 90       	elpm	r0, Z+
    6c10:	f6 91       	elpm	r31, Z
    6c12:	e0 2d       	mov	r30, r0
    6c14:	09 94       	ijmp

00006c16 <__umulhisi3>:
    6c16:	a2 9f       	mul	r26, r18
    6c18:	b0 01       	movw	r22, r0
    6c1a:	b3 9f       	mul	r27, r19
    6c1c:	c0 01       	movw	r24, r0
    6c1e:	a3 9f       	mul	r26, r19
    6c20:	70 0d       	add	r23, r0
    6c22:	81 1d       	adc	r24, r1
    6c24:	11 24       	eor	r1, r1
    6c26:	91 1d       	adc	r25, r1
    6c28:	b2 9f       	mul	r27, r18
    6c2a:	70 0d       	add	r23, r0
    6c2c:	81 1d       	adc	r24, r1
    6c2e:	11 24       	eor	r1, r1
    6c30:	91 1d       	adc	r25, r1
    6c32:	08 95       	ret

00006c34 <__usmulhisi3>:
    6c34:	f0 df       	rcall	.-32     	; 0x6c16 <__umulhisi3>

00006c36 <__usmulhisi3_tail>:
    6c36:	b7 ff       	sbrs	r27, 7
    6c38:	08 95       	ret
    6c3a:	82 1b       	sub	r24, r18
    6c3c:	93 0b       	sbc	r25, r19
    6c3e:	08 95       	ret

00006c40 <__muluhisi3>:
    6c40:	ea df       	rcall	.-44     	; 0x6c16 <__umulhisi3>
    6c42:	a5 9f       	mul	r26, r21
    6c44:	90 0d       	add	r25, r0
    6c46:	b4 9f       	mul	r27, r20
    6c48:	90 0d       	add	r25, r0
    6c4a:	a4 9f       	mul	r26, r20
    6c4c:	80 0d       	add	r24, r0
    6c4e:	91 1d       	adc	r25, r1
    6c50:	11 24       	eor	r1, r1
    6c52:	08 95       	ret

00006c54 <random_r>:
    6c54:	8f 92       	push	r8
    6c56:	9f 92       	push	r9
    6c58:	af 92       	push	r10
    6c5a:	bf 92       	push	r11
    6c5c:	cf 92       	push	r12
    6c5e:	df 92       	push	r13
    6c60:	ef 92       	push	r14
    6c62:	ff 92       	push	r15
    6c64:	cf 93       	push	r28
    6c66:	df 93       	push	r29
    6c68:	ec 01       	movw	r28, r24
    6c6a:	68 81       	ld	r22, Y
    6c6c:	79 81       	ldd	r23, Y+1	; 0x01
    6c6e:	8a 81       	ldd	r24, Y+2	; 0x02
    6c70:	9b 81       	ldd	r25, Y+3	; 0x03
    6c72:	61 15       	cp	r22, r1
    6c74:	71 05       	cpc	r23, r1
    6c76:	81 05       	cpc	r24, r1
    6c78:	91 05       	cpc	r25, r1
    6c7a:	21 f4       	brne	.+8      	; 0x6c84 <random_r+0x30>
    6c7c:	64 e2       	ldi	r22, 0x24	; 36
    6c7e:	79 ed       	ldi	r23, 0xD9	; 217
    6c80:	8b e5       	ldi	r24, 0x5B	; 91
    6c82:	97 e0       	ldi	r25, 0x07	; 7
    6c84:	2d e1       	ldi	r18, 0x1D	; 29
    6c86:	33 ef       	ldi	r19, 0xF3	; 243
    6c88:	41 e0       	ldi	r20, 0x01	; 1
    6c8a:	50 e0       	ldi	r21, 0x00	; 0
    6c8c:	9f df       	rcall	.-194    	; 0x6bcc <__divmodsi4>
    6c8e:	49 01       	movw	r8, r18
    6c90:	5a 01       	movw	r10, r20
    6c92:	9b 01       	movw	r18, r22
    6c94:	ac 01       	movw	r20, r24
    6c96:	a7 ea       	ldi	r26, 0xA7	; 167
    6c98:	b1 e4       	ldi	r27, 0x41	; 65
    6c9a:	d2 df       	rcall	.-92     	; 0x6c40 <__muluhisi3>
    6c9c:	6b 01       	movw	r12, r22
    6c9e:	7c 01       	movw	r14, r24
    6ca0:	ac ee       	ldi	r26, 0xEC	; 236
    6ca2:	b4 ef       	ldi	r27, 0xF4	; 244
    6ca4:	a5 01       	movw	r20, r10
    6ca6:	94 01       	movw	r18, r8
    6ca8:	94 d0       	rcall	.+296    	; 0x6dd2 <__mulohisi3>
    6caa:	c6 0e       	add	r12, r22
    6cac:	d7 1e       	adc	r13, r23
    6cae:	e8 1e       	adc	r14, r24
    6cb0:	f9 1e       	adc	r15, r25
    6cb2:	f7 fe       	sbrs	r15, 7
    6cb4:	06 c0       	rjmp	.+12     	; 0x6cc2 <random_r+0x6e>
    6cb6:	81 e0       	ldi	r24, 0x01	; 1
    6cb8:	c8 1a       	sub	r12, r24
    6cba:	d1 08       	sbc	r13, r1
    6cbc:	e1 08       	sbc	r14, r1
    6cbe:	80 e8       	ldi	r24, 0x80	; 128
    6cc0:	f8 0a       	sbc	r15, r24
    6cc2:	c8 82       	st	Y, r12
    6cc4:	d9 82       	std	Y+1, r13	; 0x01
    6cc6:	ea 82       	std	Y+2, r14	; 0x02
    6cc8:	fb 82       	std	Y+3, r15	; 0x03
    6cca:	c7 01       	movw	r24, r14
    6ccc:	b6 01       	movw	r22, r12
    6cce:	9f 77       	andi	r25, 0x7F	; 127
    6cd0:	df 91       	pop	r29
    6cd2:	cf 91       	pop	r28
    6cd4:	ff 90       	pop	r15
    6cd6:	ef 90       	pop	r14
    6cd8:	df 90       	pop	r13
    6cda:	cf 90       	pop	r12
    6cdc:	bf 90       	pop	r11
    6cde:	af 90       	pop	r10
    6ce0:	9f 90       	pop	r9
    6ce2:	8f 90       	pop	r8
    6ce4:	08 95       	ret

00006ce6 <random>:
    6ce6:	8f 92       	push	r8
    6ce8:	9f 92       	push	r9
    6cea:	af 92       	push	r10
    6cec:	bf 92       	push	r11
    6cee:	cf 92       	push	r12
    6cf0:	df 92       	push	r13
    6cf2:	ef 92       	push	r14
    6cf4:	ff 92       	push	r15
    6cf6:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    6cfa:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    6cfe:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    6d02:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    6d06:	61 15       	cp	r22, r1
    6d08:	71 05       	cpc	r23, r1
    6d0a:	81 05       	cpc	r24, r1
    6d0c:	91 05       	cpc	r25, r1
    6d0e:	21 f4       	brne	.+8      	; 0x6d18 <random+0x32>
    6d10:	64 e2       	ldi	r22, 0x24	; 36
    6d12:	79 ed       	ldi	r23, 0xD9	; 217
    6d14:	8b e5       	ldi	r24, 0x5B	; 91
    6d16:	97 e0       	ldi	r25, 0x07	; 7
    6d18:	2d e1       	ldi	r18, 0x1D	; 29
    6d1a:	33 ef       	ldi	r19, 0xF3	; 243
    6d1c:	41 e0       	ldi	r20, 0x01	; 1
    6d1e:	50 e0       	ldi	r21, 0x00	; 0
    6d20:	55 df       	rcall	.-342    	; 0x6bcc <__divmodsi4>
    6d22:	49 01       	movw	r8, r18
    6d24:	5a 01       	movw	r10, r20
    6d26:	9b 01       	movw	r18, r22
    6d28:	ac 01       	movw	r20, r24
    6d2a:	a7 ea       	ldi	r26, 0xA7	; 167
    6d2c:	b1 e4       	ldi	r27, 0x41	; 65
    6d2e:	88 df       	rcall	.-240    	; 0x6c40 <__muluhisi3>
    6d30:	6b 01       	movw	r12, r22
    6d32:	7c 01       	movw	r14, r24
    6d34:	ac ee       	ldi	r26, 0xEC	; 236
    6d36:	b4 ef       	ldi	r27, 0xF4	; 244
    6d38:	a5 01       	movw	r20, r10
    6d3a:	94 01       	movw	r18, r8
    6d3c:	4a d0       	rcall	.+148    	; 0x6dd2 <__mulohisi3>
    6d3e:	c6 0e       	add	r12, r22
    6d40:	d7 1e       	adc	r13, r23
    6d42:	e8 1e       	adc	r14, r24
    6d44:	f9 1e       	adc	r15, r25
    6d46:	f7 fe       	sbrs	r15, 7
    6d48:	06 c0       	rjmp	.+12     	; 0x6d56 <random+0x70>
    6d4a:	81 e0       	ldi	r24, 0x01	; 1
    6d4c:	c8 1a       	sub	r12, r24
    6d4e:	d1 08       	sbc	r13, r1
    6d50:	e1 08       	sbc	r14, r1
    6d52:	80 e8       	ldi	r24, 0x80	; 128
    6d54:	f8 0a       	sbc	r15, r24
    6d56:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    6d5a:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    6d5e:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    6d62:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    6d66:	c7 01       	movw	r24, r14
    6d68:	b6 01       	movw	r22, r12
    6d6a:	9f 77       	andi	r25, 0x7F	; 127
    6d6c:	ff 90       	pop	r15
    6d6e:	ef 90       	pop	r14
    6d70:	df 90       	pop	r13
    6d72:	cf 90       	pop	r12
    6d74:	bf 90       	pop	r11
    6d76:	af 90       	pop	r10
    6d78:	9f 90       	pop	r9
    6d7a:	8f 90       	pop	r8
    6d7c:	08 95       	ret

00006d7e <srandom>:
    6d7e:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    6d82:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    6d86:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    6d8a:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    6d8e:	08 95       	ret

00006d90 <memcpy>:
    6d90:	fb 01       	movw	r30, r22
    6d92:	dc 01       	movw	r26, r24
    6d94:	02 c0       	rjmp	.+4      	; 0x6d9a <memcpy+0xa>
    6d96:	01 90       	ld	r0, Z+
    6d98:	0d 92       	st	X+, r0
    6d9a:	41 50       	subi	r20, 0x01	; 1
    6d9c:	50 40       	sbci	r21, 0x00	; 0
    6d9e:	d8 f7       	brcc	.-10     	; 0x6d96 <memcpy+0x6>
    6da0:	08 95       	ret

00006da2 <strcpy>:
    6da2:	fb 01       	movw	r30, r22
    6da4:	dc 01       	movw	r26, r24
    6da6:	01 90       	ld	r0, Z+
    6da8:	0d 92       	st	X+, r0
    6daa:	00 20       	and	r0, r0
    6dac:	e1 f7       	brne	.-8      	; 0x6da6 <strcpy+0x4>
    6dae:	08 95       	ret

00006db0 <strncpy>:
    6db0:	fb 01       	movw	r30, r22
    6db2:	dc 01       	movw	r26, r24
    6db4:	41 50       	subi	r20, 0x01	; 1
    6db6:	50 40       	sbci	r21, 0x00	; 0
    6db8:	48 f0       	brcs	.+18     	; 0x6dcc <strncpy+0x1c>
    6dba:	01 90       	ld	r0, Z+
    6dbc:	0d 92       	st	X+, r0
    6dbe:	00 20       	and	r0, r0
    6dc0:	c9 f7       	brne	.-14     	; 0x6db4 <strncpy+0x4>
    6dc2:	01 c0       	rjmp	.+2      	; 0x6dc6 <strncpy+0x16>
    6dc4:	1d 92       	st	X+, r1
    6dc6:	41 50       	subi	r20, 0x01	; 1
    6dc8:	50 40       	sbci	r21, 0x00	; 0
    6dca:	e0 f7       	brcc	.-8      	; 0x6dc4 <strncpy+0x14>
    6dcc:	08 95       	ret

00006dce <__mulshisi3>:
    6dce:	b7 ff       	sbrs	r27, 7
    6dd0:	37 cf       	rjmp	.-402    	; 0x6c40 <__muluhisi3>

00006dd2 <__mulohisi3>:
    6dd2:	36 df       	rcall	.-404    	; 0x6c40 <__muluhisi3>
    6dd4:	82 1b       	sub	r24, r18
    6dd6:	93 0b       	sbc	r25, r19
    6dd8:	08 95       	ret

00006dda <__do_global_dtors>:
    6dda:	14 e0       	ldi	r17, 0x04	; 4
    6ddc:	c5 e1       	ldi	r28, 0x15	; 21
    6dde:	d4 e0       	ldi	r29, 0x04	; 4
    6de0:	03 c0       	rjmp	.+6      	; 0x6de8 <__do_global_dtors+0xe>
    6de2:	fe 01       	movw	r30, r28
    6de4:	0f df       	rcall	.-482    	; 0x6c04 <__tablejump2__>
    6de6:	21 96       	adiw	r28, 0x01	; 1
    6de8:	c6 31       	cpi	r28, 0x16	; 22
    6dea:	d1 07       	cpc	r29, r17
    6dec:	d1 f7       	brne	.-12     	; 0x6de2 <__do_global_dtors+0x8>
    6dee:	f8 94       	cli

00006df0 <__stop_program>:
    6df0:	ff cf       	rjmp	.-2      	; 0x6df0 <__stop_program>
