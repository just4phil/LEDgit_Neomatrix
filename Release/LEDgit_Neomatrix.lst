
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	b5 c3       	rjmp	.+1898   	; 0x76c <__dtors_end>
       2:	00 00       	nop
       4:	dd c3       	rjmp	.+1978   	; 0x7c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	db c3       	rjmp	.+1974   	; 0x7c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	d9 c3       	rjmp	.+1970   	; 0x7c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	d7 c3       	rjmp	.+1966   	; 0x7c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	d5 c3       	rjmp	.+1962   	; 0x7c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	d3 c3       	rjmp	.+1958   	; 0x7c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	d1 c3       	rjmp	.+1954   	; 0x7c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	cf c3       	rjmp	.+1950   	; 0x7c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	cd c3       	rjmp	.+1946   	; 0x7c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 57 2b 	jmp	0x56ae	; 0x56ae <__vector_10>
      2c:	0c 94 d4 2b 	jmp	0x57a8	; 0x57a8 <__vector_11>
      30:	c7 c3       	rjmp	.+1934   	; 0x7c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	c5 c3       	rjmp	.+1930   	; 0x7c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	c3 c3       	rjmp	.+1926   	; 0x7c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	c1 c3       	rjmp	.+1922   	; 0x7c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	bf c3       	rjmp	.+1918   	; 0x7c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	bd c3       	rjmp	.+1914   	; 0x7c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	bb c3       	rjmp	.+1910   	; 0x7c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	b9 c3       	rjmp	.+1906   	; 0x7c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	b7 c3       	rjmp	.+1902   	; 0x7c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	b5 c3       	rjmp	.+1898   	; 0x7c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	b3 c3       	rjmp	.+1894   	; 0x7c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 b6 2a 	jmp	0x556c	; 0x556c <__vector_23>
      60:	af c3       	rjmp	.+1886   	; 0x7c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 12 2e 	jmp	0x5c24	; 0x5c24 <__vector_25>
      68:	0c 94 3d 2e 	jmp	0x5c7a	; 0x5c7a <__vector_26>
      6c:	0c 94 6e 2e 	jmp	0x5cdc	; 0x5cdc <__vector_27>
      70:	a7 c3       	rjmp	.+1870   	; 0x7c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	a5 c3       	rjmp	.+1866   	; 0x7c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	a3 c3       	rjmp	.+1862   	; 0x7c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	a1 c3       	rjmp	.+1858   	; 0x7c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 0f 0f 	jmp	0x1e1e	; 0x1e1e <__vector_32>
      84:	9d c3       	rjmp	.+1850   	; 0x7c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	9b c3       	rjmp	.+1846   	; 0x7c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	99 c3       	rjmp	.+1842   	; 0x7c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	97 c3       	rjmp	.+1838   	; 0x7c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	95 c3       	rjmp	.+1834   	; 0x7c0 <__bad_interrupt>
	...

00000098 <__trampolines_end>:
      98:	00 00       	nop
      9a:	00 00       	nop
      9c:	00 3e       	cpi	r16, 0xE0	; 224
      9e:	5b 4f       	sbci	r21, 0xFB	; 251
      a0:	5b 3e       	cpi	r21, 0xEB	; 235
      a2:	3e 6b       	ori	r19, 0xBE	; 190
      a4:	4f 6b       	ori	r20, 0xBF	; 191
      a6:	3e 1c       	adc	r3, r14
      a8:	3e 7c       	andi	r19, 0xCE	; 206
      aa:	3e 1c       	adc	r3, r14
      ac:	18 3c       	cpi	r17, 0xC8	; 200
      ae:	7e 3c       	cpi	r23, 0xCE	; 206
      b0:	18 1c       	adc	r1, r8
      b2:	57 7d       	andi	r21, 0xD7	; 215
      b4:	57 1c       	adc	r5, r7
      b6:	1c 5e       	subi	r17, 0xEC	; 236
      b8:	7f 5e       	subi	r23, 0xEF	; 239
      ba:	1c 00       	.word	0x001c	; ????
      bc:	18 3c       	cpi	r17, 0xC8	; 200
      be:	18 00       	.word	0x0018	; ????
      c0:	ff e7       	ldi	r31, 0x7F	; 127
      c2:	c3 e7       	ldi	r28, 0x73	; 115
      c4:	ff 00       	.word	0x00ff	; ????
      c6:	18 24       	eor	r1, r8
      c8:	18 00       	.word	0x0018	; ????
      ca:	ff e7       	ldi	r31, 0x7F	; 127
      cc:	db e7       	ldi	r29, 0x7B	; 123
      ce:	ff 30       	cpi	r31, 0x0F	; 15
      d0:	48 3a       	cpi	r20, 0xA8	; 168
      d2:	06 0e       	add	r0, r22
      d4:	26 29       	or	r18, r6
      d6:	79 29       	or	r23, r9
      d8:	26 40       	sbci	r18, 0x06	; 6
      da:	7f 05       	cpc	r23, r15
      dc:	05 07       	cpc	r16, r21
      de:	40 7f       	andi	r20, 0xF0	; 240
      e0:	05 25       	eor	r16, r5
      e2:	3f 5a       	subi	r19, 0xAF	; 175
      e4:	3c e7       	ldi	r19, 0x7C	; 124
      e6:	3c 5a       	subi	r19, 0xAC	; 172
      e8:	7f 3e       	cpi	r23, 0xEF	; 239
      ea:	1c 1c       	adc	r1, r12
      ec:	08 08       	sbc	r0, r8
      ee:	1c 1c       	adc	r1, r12
      f0:	3e 7f       	andi	r19, 0xFE	; 254
      f2:	14 22       	and	r1, r20
      f4:	7f 22       	and	r7, r31
      f6:	14 5f       	subi	r17, 0xF4	; 244
      f8:	5f 00       	.word	0x005f	; ????
      fa:	5f 5f       	subi	r21, 0xFF	; 255
      fc:	06 09       	sbc	r16, r6
      fe:	7f 01       	movw	r14, r30
     100:	7f 00       	.word	0x007f	; ????
     102:	66 89       	ldd	r22, Z+22	; 0x16
     104:	95 6a       	ori	r25, 0xA5	; 165
     106:	60 60       	ori	r22, 0x00	; 0
     108:	60 60       	ori	r22, 0x00	; 0
     10a:	60 94       	com	r6
     10c:	a2 ff       	sbrs	r26, 2
     10e:	a2 94       	swap	r10
     110:	08 04       	cpc	r0, r8
     112:	7e 04       	cpc	r7, r14
     114:	08 10       	cpse	r0, r8
     116:	20 7e       	andi	r18, 0xE0	; 224
     118:	20 10       	cpse	r2, r0
     11a:	08 08       	sbc	r0, r8
     11c:	2a 1c       	adc	r2, r10
     11e:	08 08       	sbc	r0, r8
     120:	1c 2a       	or	r1, r28
     122:	08 08       	sbc	r0, r8
     124:	1e 10       	cpse	r1, r14
     126:	10 10       	cpse	r1, r0
     128:	10 0c       	add	r1, r0
     12a:	1e 0c       	add	r1, r14
     12c:	1e 0c       	add	r1, r14
     12e:	30 38       	cpi	r19, 0x80	; 128
     130:	3e 38       	cpi	r19, 0x8E	; 142
     132:	30 06       	cpc	r3, r16
     134:	0e 3e       	cpi	r16, 0xEE	; 238
     136:	0e 06       	cpc	r0, r30
     138:	00 00       	nop
     13a:	00 00       	nop
     13c:	00 00       	nop
     13e:	00 5f       	subi	r16, 0xF0	; 240
     140:	00 00       	nop
     142:	00 07       	cpc	r16, r16
     144:	00 07       	cpc	r16, r16
     146:	00 14       	cp	r0, r0
     148:	7f 14       	cp	r7, r15
     14a:	7f 14       	cp	r7, r15
     14c:	24 2a       	or	r2, r20
     14e:	7f 2a       	or	r7, r31
     150:	12 23       	and	r17, r18
     152:	13 08       	sbc	r1, r3
     154:	64 62       	ori	r22, 0x24	; 36
     156:	36 49       	sbci	r19, 0x96	; 150
     158:	56 20       	and	r5, r6
     15a:	50 00       	.word	0x0050	; ????
     15c:	08 07       	cpc	r16, r24
     15e:	03 00       	.word	0x0003	; ????
     160:	00 1c       	adc	r0, r0
     162:	22 41       	sbci	r18, 0x12	; 18
     164:	00 00       	nop
     166:	41 22       	and	r4, r17
     168:	1c 00       	.word	0x001c	; ????
     16a:	2a 1c       	adc	r2, r10
     16c:	7f 1c       	adc	r7, r15
     16e:	2a 08       	sbc	r2, r10
     170:	08 3e       	cpi	r16, 0xE8	; 232
     172:	08 08       	sbc	r0, r8
     174:	00 80       	ld	r0, Z
     176:	70 30       	cpi	r23, 0x00	; 0
     178:	00 08       	sbc	r0, r0
     17a:	08 08       	sbc	r0, r8
     17c:	08 08       	sbc	r0, r8
     17e:	00 00       	nop
     180:	60 60       	ori	r22, 0x00	; 0
     182:	00 20       	and	r0, r0
     184:	10 08       	sbc	r1, r0
     186:	04 02       	muls	r16, r20
     188:	3e 51       	subi	r19, 0x1E	; 30
     18a:	49 45       	sbci	r20, 0x59	; 89
     18c:	3e 00       	.word	0x003e	; ????
     18e:	42 7f       	andi	r20, 0xF2	; 242
     190:	40 00       	.word	0x0040	; ????
     192:	72 49       	sbci	r23, 0x92	; 146
     194:	49 49       	sbci	r20, 0x99	; 153
     196:	46 21       	and	r20, r6
     198:	41 49       	sbci	r20, 0x91	; 145
     19a:	4d 33       	cpi	r20, 0x3D	; 61
     19c:	18 14       	cp	r1, r8
     19e:	12 7f       	andi	r17, 0xF2	; 242
     1a0:	10 27       	eor	r17, r16
     1a2:	45 45       	sbci	r20, 0x55	; 85
     1a4:	45 39       	cpi	r20, 0x95	; 149
     1a6:	3c 4a       	sbci	r19, 0xAC	; 172
     1a8:	49 49       	sbci	r20, 0x99	; 153
     1aa:	31 41       	sbci	r19, 0x11	; 17
     1ac:	21 11       	cpse	r18, r1
     1ae:	09 07       	cpc	r16, r25
     1b0:	36 49       	sbci	r19, 0x96	; 150
     1b2:	49 49       	sbci	r20, 0x99	; 153
     1b4:	36 46       	sbci	r19, 0x66	; 102
     1b6:	49 49       	sbci	r20, 0x99	; 153
     1b8:	29 1e       	adc	r2, r25
     1ba:	00 00       	nop
     1bc:	14 00       	.word	0x0014	; ????
     1be:	00 00       	nop
     1c0:	40 34       	cpi	r20, 0x40	; 64
     1c2:	00 00       	nop
     1c4:	00 08       	sbc	r0, r0
     1c6:	14 22       	and	r1, r20
     1c8:	41 14       	cp	r4, r1
     1ca:	14 14       	cp	r1, r4
     1cc:	14 14       	cp	r1, r4
     1ce:	00 41       	sbci	r16, 0x10	; 16
     1d0:	22 14       	cp	r2, r2
     1d2:	08 02       	muls	r16, r24
     1d4:	01 59       	subi	r16, 0x91	; 145
     1d6:	09 06       	cpc	r0, r25
     1d8:	3e 41       	sbci	r19, 0x1E	; 30
     1da:	5d 59       	subi	r21, 0x9D	; 157
     1dc:	4e 7c       	andi	r20, 0xCE	; 206
     1de:	12 11       	cpse	r17, r2
     1e0:	12 7c       	andi	r17, 0xC2	; 194
     1e2:	7f 49       	sbci	r23, 0x9F	; 159
     1e4:	49 49       	sbci	r20, 0x99	; 153
     1e6:	36 3e       	cpi	r19, 0xE6	; 230
     1e8:	41 41       	sbci	r20, 0x11	; 17
     1ea:	41 22       	and	r4, r17
     1ec:	7f 41       	sbci	r23, 0x1F	; 31
     1ee:	41 41       	sbci	r20, 0x11	; 17
     1f0:	3e 7f       	andi	r19, 0xFE	; 254
     1f2:	49 49       	sbci	r20, 0x99	; 153
     1f4:	49 41       	sbci	r20, 0x19	; 25
     1f6:	7f 09       	sbc	r23, r15
     1f8:	09 09       	sbc	r16, r9
     1fa:	01 3e       	cpi	r16, 0xE1	; 225
     1fc:	41 41       	sbci	r20, 0x11	; 17
     1fe:	51 73       	andi	r21, 0x31	; 49
     200:	7f 08       	sbc	r7, r15
     202:	08 08       	sbc	r0, r8
     204:	7f 00       	.word	0x007f	; ????
     206:	41 7f       	andi	r20, 0xF1	; 241
     208:	41 00       	.word	0x0041	; ????
     20a:	20 40       	sbci	r18, 0x00	; 0
     20c:	41 3f       	cpi	r20, 0xF1	; 241
     20e:	01 7f       	andi	r16, 0xF1	; 241
     210:	08 14       	cp	r0, r8
     212:	22 41       	sbci	r18, 0x12	; 18
     214:	7f 40       	sbci	r23, 0x0F	; 15
     216:	40 40       	sbci	r20, 0x00	; 0
     218:	40 7f       	andi	r20, 0xF0	; 240
     21a:	02 1c       	adc	r0, r2
     21c:	02 7f       	andi	r16, 0xF2	; 242
     21e:	7f 04       	cpc	r7, r15
     220:	08 10       	cpse	r0, r8
     222:	7f 3e       	cpi	r23, 0xEF	; 239
     224:	41 41       	sbci	r20, 0x11	; 17
     226:	41 3e       	cpi	r20, 0xE1	; 225
     228:	7f 09       	sbc	r23, r15
     22a:	09 09       	sbc	r16, r9
     22c:	06 3e       	cpi	r16, 0xE6	; 230
     22e:	41 51       	subi	r20, 0x11	; 17
     230:	21 5e       	subi	r18, 0xE1	; 225
     232:	7f 09       	sbc	r23, r15
     234:	19 29       	or	r17, r9
     236:	46 26       	eor	r4, r22
     238:	49 49       	sbci	r20, 0x99	; 153
     23a:	49 32       	cpi	r20, 0x29	; 41
     23c:	03 01       	movw	r0, r6
     23e:	7f 01       	movw	r14, r30
     240:	03 3f       	cpi	r16, 0xF3	; 243
     242:	40 40       	sbci	r20, 0x00	; 0
     244:	40 3f       	cpi	r20, 0xF0	; 240
     246:	1f 20       	and	r1, r15
     248:	40 20       	and	r4, r0
     24a:	1f 3f       	cpi	r17, 0xFF	; 255
     24c:	40 38       	cpi	r20, 0x80	; 128
     24e:	40 3f       	cpi	r20, 0xF0	; 240
     250:	63 14       	cp	r6, r3
     252:	08 14       	cp	r0, r8
     254:	63 03       	mulsu	r22, r19
     256:	04 78       	andi	r16, 0x84	; 132
     258:	04 03       	mulsu	r16, r20
     25a:	61 59       	subi	r22, 0x91	; 145
     25c:	49 4d       	sbci	r20, 0xD9	; 217
     25e:	43 00       	.word	0x0043	; ????
     260:	7f 41       	sbci	r23, 0x1F	; 31
     262:	41 41       	sbci	r20, 0x11	; 17
     264:	02 04       	cpc	r0, r2
     266:	08 10       	cpse	r0, r8
     268:	20 00       	.word	0x0020	; ????
     26a:	41 41       	sbci	r20, 0x11	; 17
     26c:	41 7f       	andi	r20, 0xF1	; 241
     26e:	04 02       	muls	r16, r20
     270:	01 02       	muls	r16, r17
     272:	04 40       	sbci	r16, 0x04	; 4
     274:	40 40       	sbci	r20, 0x00	; 0
     276:	40 40       	sbci	r20, 0x00	; 0
     278:	00 03       	mulsu	r16, r16
     27a:	07 08       	sbc	r0, r7
     27c:	00 20       	and	r0, r0
     27e:	54 54       	subi	r21, 0x44	; 68
     280:	78 40       	sbci	r23, 0x08	; 8
     282:	7f 28       	or	r7, r15
     284:	44 44       	sbci	r20, 0x44	; 68
     286:	38 38       	cpi	r19, 0x88	; 136
     288:	44 44       	sbci	r20, 0x44	; 68
     28a:	44 28       	or	r4, r4
     28c:	38 44       	sbci	r19, 0x48	; 72
     28e:	44 28       	or	r4, r4
     290:	7f 38       	cpi	r23, 0x8F	; 143
     292:	54 54       	subi	r21, 0x44	; 68
     294:	54 18       	sub	r5, r4
     296:	00 08       	sbc	r0, r0
     298:	7e 09       	sbc	r23, r14
     29a:	02 18       	sub	r0, r2
     29c:	a4 a4       	ldd	r10, Z+44	; 0x2c
     29e:	9c 78       	andi	r25, 0x8C	; 140
     2a0:	7f 08       	sbc	r7, r15
     2a2:	04 04       	cpc	r0, r4
     2a4:	78 00       	.word	0x0078	; ????
     2a6:	44 7d       	andi	r20, 0xD4	; 212
     2a8:	40 00       	.word	0x0040	; ????
     2aa:	20 40       	sbci	r18, 0x00	; 0
     2ac:	40 3d       	cpi	r20, 0xD0	; 208
     2ae:	00 7f       	andi	r16, 0xF0	; 240
     2b0:	10 28       	or	r1, r0
     2b2:	44 00       	.word	0x0044	; ????
     2b4:	00 41       	sbci	r16, 0x10	; 16
     2b6:	7f 40       	sbci	r23, 0x0F	; 15
     2b8:	00 7c       	andi	r16, 0xC0	; 192
     2ba:	04 78       	andi	r16, 0x84	; 132
     2bc:	04 78       	andi	r16, 0x84	; 132
     2be:	7c 08       	sbc	r7, r12
     2c0:	04 04       	cpc	r0, r4
     2c2:	78 38       	cpi	r23, 0x88	; 136
     2c4:	44 44       	sbci	r20, 0x44	; 68
     2c6:	44 38       	cpi	r20, 0x84	; 132
     2c8:	fc 18       	sub	r15, r12
     2ca:	24 24       	eor	r2, r4
     2cc:	18 18       	sub	r1, r8
     2ce:	24 24       	eor	r2, r4
     2d0:	18 fc       	.word	0xfc18	; ????
     2d2:	7c 08       	sbc	r7, r12
     2d4:	04 04       	cpc	r0, r4
     2d6:	08 48       	sbci	r16, 0x88	; 136
     2d8:	54 54       	subi	r21, 0x44	; 68
     2da:	54 24       	eor	r5, r4
     2dc:	04 04       	cpc	r0, r4
     2de:	3f 44       	sbci	r19, 0x4F	; 79
     2e0:	24 3c       	cpi	r18, 0xC4	; 196
     2e2:	40 40       	sbci	r20, 0x00	; 0
     2e4:	20 7c       	andi	r18, 0xC0	; 192
     2e6:	1c 20       	and	r1, r12
     2e8:	40 20       	and	r4, r0
     2ea:	1c 3c       	cpi	r17, 0xCC	; 204
     2ec:	40 30       	cpi	r20, 0x00	; 0
     2ee:	40 3c       	cpi	r20, 0xC0	; 192
     2f0:	44 28       	or	r4, r4
     2f2:	10 28       	or	r1, r0
     2f4:	44 4c       	sbci	r20, 0xC4	; 196
     2f6:	90 90 90 7c 	lds	r9, 0x7C90	; 0x807c90 <__heap_start+0x6d72>
     2fa:	44 64       	ori	r20, 0x44	; 68
     2fc:	54 4c       	sbci	r21, 0xC4	; 196
     2fe:	44 00       	.word	0x0044	; ????
     300:	08 36       	cpi	r16, 0x68	; 104
     302:	41 00       	.word	0x0041	; ????
     304:	00 00       	nop
     306:	77 00       	.word	0x0077	; ????
     308:	00 00       	nop
     30a:	41 36       	cpi	r20, 0x61	; 97
     30c:	08 00       	.word	0x0008	; ????
     30e:	02 01       	movw	r0, r4
     310:	02 04       	cpc	r0, r2
     312:	02 3c       	cpi	r16, 0xC2	; 194
     314:	26 23       	and	r18, r22
     316:	26 3c       	cpi	r18, 0xC6	; 198
     318:	1e a1       	ldd	r17, Y+38	; 0x26
     31a:	a1 61       	ori	r26, 0x11	; 17
     31c:	12 3a       	cpi	r17, 0xA2	; 162
     31e:	40 40       	sbci	r20, 0x00	; 0
     320:	20 7a       	andi	r18, 0xA0	; 160
     322:	38 54       	subi	r19, 0x48	; 72
     324:	54 55       	subi	r21, 0x54	; 84
     326:	59 21       	and	r21, r9
     328:	55 55       	subi	r21, 0x55	; 85
     32a:	79 41       	sbci	r23, 0x19	; 25
     32c:	22 54       	subi	r18, 0x42	; 66
     32e:	54 78       	andi	r21, 0x84	; 132
     330:	42 21       	and	r20, r2
     332:	55 54       	subi	r21, 0x45	; 69
     334:	78 40       	sbci	r23, 0x08	; 8
     336:	20 54       	subi	r18, 0x40	; 64
     338:	55 79       	andi	r21, 0x95	; 149
     33a:	40 0c       	add	r4, r0
     33c:	1e 52       	subi	r17, 0x2E	; 46
     33e:	72 12       	cpse	r7, r18
     340:	39 55       	subi	r19, 0x59	; 89
     342:	55 55       	subi	r21, 0x55	; 85
     344:	59 39       	cpi	r21, 0x99	; 153
     346:	54 54       	subi	r21, 0x44	; 68
     348:	54 59       	subi	r21, 0x94	; 148
     34a:	39 55       	subi	r19, 0x59	; 89
     34c:	54 54       	subi	r21, 0x44	; 68
     34e:	58 00       	.word	0x0058	; ????
     350:	00 45       	sbci	r16, 0x50	; 80
     352:	7c 41       	sbci	r23, 0x1C	; 28
     354:	00 02       	muls	r16, r16
     356:	45 7d       	andi	r20, 0xD5	; 213
     358:	42 00       	.word	0x0042	; ????
     35a:	01 45       	sbci	r16, 0x51	; 81
     35c:	7c 40       	sbci	r23, 0x0C	; 12
     35e:	7d 12       	cpse	r7, r29
     360:	11 12       	cpse	r1, r17
     362:	7d f0       	brhs	.+30     	; 0x382 <__trampolines_end+0x2ea>
     364:	28 25       	eor	r18, r8
     366:	28 f0       	brcs	.+10     	; 0x372 <__trampolines_end+0x2da>
     368:	7c 54       	subi	r23, 0x4C	; 76
     36a:	55 45       	sbci	r21, 0x55	; 85
     36c:	00 20       	and	r0, r0
     36e:	54 54       	subi	r21, 0x44	; 68
     370:	7c 54       	subi	r23, 0x4C	; 76
     372:	7c 0a       	sbc	r7, r28
     374:	09 7f       	andi	r16, 0xF9	; 249
     376:	49 32       	cpi	r20, 0x29	; 41
     378:	49 49       	sbci	r20, 0x99	; 153
     37a:	49 32       	cpi	r20, 0x29	; 41
     37c:	3a 44       	sbci	r19, 0x4A	; 74
     37e:	44 44       	sbci	r20, 0x44	; 68
     380:	3a 32       	cpi	r19, 0x2A	; 42
     382:	4a 48       	sbci	r20, 0x8A	; 138
     384:	48 30       	cpi	r20, 0x08	; 8
     386:	3a 41       	sbci	r19, 0x1A	; 26
     388:	41 21       	and	r20, r1
     38a:	7a 3a       	cpi	r23, 0xAA	; 170
     38c:	42 40       	sbci	r20, 0x02	; 2
     38e:	20 78       	andi	r18, 0x80	; 128
     390:	00 9d       	mul	r16, r0
     392:	a0 a0       	ldd	r10, Z+32	; 0x20
     394:	7d 3d       	cpi	r23, 0xDD	; 221
     396:	42 42       	sbci	r20, 0x22	; 34
     398:	42 3d       	cpi	r20, 0xD2	; 210
     39a:	3d 40       	sbci	r19, 0x0D	; 13
     39c:	40 40       	sbci	r20, 0x00	; 0
     39e:	3d 3c       	cpi	r19, 0xCD	; 205
     3a0:	24 ff       	sbrs	r18, 4
     3a2:	24 24       	eor	r2, r4
     3a4:	48 7e       	andi	r20, 0xE8	; 232
     3a6:	49 43       	sbci	r20, 0x39	; 57
     3a8:	66 2b       	or	r22, r22
     3aa:	2f fc       	.word	0xfc2f	; ????
     3ac:	2f 2b       	or	r18, r31
     3ae:	ff 09       	sbc	r31, r15
     3b0:	29 f6       	brne	.-118    	; 0x33c <__trampolines_end+0x2a4>
     3b2:	20 c0       	rjmp	.+64     	; 0x3f4 <__trampolines_end+0x35c>
     3b4:	88 7e       	andi	r24, 0xE8	; 232
     3b6:	09 03       	fmul	r16, r17
     3b8:	20 54       	subi	r18, 0x40	; 64
     3ba:	54 79       	andi	r21, 0x94	; 148
     3bc:	41 00       	.word	0x0041	; ????
     3be:	00 44       	sbci	r16, 0x40	; 64
     3c0:	7d 41       	sbci	r23, 0x1D	; 29
     3c2:	30 48       	sbci	r19, 0x80	; 128
     3c4:	48 4a       	sbci	r20, 0xA8	; 168
     3c6:	32 38       	cpi	r19, 0x82	; 130
     3c8:	40 40       	sbci	r20, 0x00	; 0
     3ca:	22 7a       	andi	r18, 0xA2	; 162
     3cc:	00 7a       	andi	r16, 0xA0	; 160
     3ce:	0a 0a       	sbc	r0, r26
     3d0:	72 7d       	andi	r23, 0xD2	; 210
     3d2:	0d 19       	sub	r16, r13
     3d4:	31 7d       	andi	r19, 0xD1	; 209
     3d6:	26 29       	or	r18, r6
     3d8:	29 2f       	mov	r18, r25
     3da:	28 26       	eor	r2, r24
     3dc:	29 29       	or	r18, r9
     3de:	29 26       	eor	r2, r25
     3e0:	30 48       	sbci	r19, 0x80	; 128
     3e2:	4d 40       	sbci	r20, 0x0D	; 13
     3e4:	20 38       	cpi	r18, 0x80	; 128
     3e6:	08 08       	sbc	r0, r8
     3e8:	08 08       	sbc	r0, r8
     3ea:	08 08       	sbc	r0, r8
     3ec:	08 08       	sbc	r0, r8
     3ee:	38 2f       	mov	r19, r24
     3f0:	10 c8       	rjmp	.-4064   	; 0xfffff412 <__eeprom_end+0xff7ef412>
     3f2:	ac ba       	out	0x1c, r10	; 28
     3f4:	2f 10       	cpse	r2, r15
     3f6:	28 34       	cpi	r18, 0x48	; 72
     3f8:	fa 00       	.word	0x00fa	; ????
     3fa:	00 7b       	andi	r16, 0xB0	; 176
     3fc:	00 00       	nop
     3fe:	08 14       	cp	r0, r8
     400:	2a 14       	cp	r2, r10
     402:	22 22       	and	r2, r18
     404:	14 2a       	or	r1, r20
     406:	14 08       	sbc	r1, r4
     408:	55 00       	.word	0x0055	; ????
     40a:	55 00       	.word	0x0055	; ????
     40c:	55 aa       	std	Z+53, r5	; 0x35
     40e:	55 aa       	std	Z+53, r5	; 0x35
     410:	55 aa       	std	Z+53, r5	; 0x35
     412:	ff 55       	subi	r31, 0x5F	; 95
     414:	ff 55       	subi	r31, 0x5F	; 95
     416:	ff 00       	.word	0x00ff	; ????
     418:	00 00       	nop
     41a:	ff 00       	.word	0x00ff	; ????
     41c:	10 10       	cpse	r1, r0
     41e:	10 ff       	sbrs	r17, 0
     420:	00 14       	cp	r0, r0
     422:	14 14       	cp	r1, r4
     424:	ff 00       	.word	0x00ff	; ????
     426:	10 10       	cpse	r1, r0
     428:	ff 00       	.word	0x00ff	; ????
     42a:	ff 10       	cpse	r15, r15
     42c:	10 f0       	brcs	.+4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
     42e:	10 f0       	brcs	.+4      	; 0x434 <__LOCK_REGION_LENGTH__+0x34>
     430:	14 14       	cp	r1, r4
     432:	14 fc       	sbrc	r1, 4
     434:	00 14       	cp	r0, r0
     436:	14 f7       	brge	.-60     	; 0x3fc <__trampolines_end+0x364>
     438:	00 ff       	sbrs	r16, 0
     43a:	00 00       	nop
     43c:	ff 00       	.word	0x00ff	; ????
     43e:	ff 14       	cp	r15, r15
     440:	14 f4       	brge	.+4      	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
     442:	04 fc       	sbrc	r0, 4
     444:	14 14       	cp	r1, r4
     446:	17 10       	cpse	r1, r7
     448:	1f 10       	cpse	r1, r15
     44a:	10 1f       	adc	r17, r16
     44c:	10 1f       	adc	r17, r16
     44e:	14 14       	cp	r1, r4
     450:	14 1f       	adc	r17, r20
     452:	00 10       	cpse	r0, r0
     454:	10 10       	cpse	r1, r0
     456:	f0 00       	.word	0x00f0	; ????
     458:	00 00       	nop
     45a:	00 1f       	adc	r16, r16
     45c:	10 10       	cpse	r1, r0
     45e:	10 10       	cpse	r1, r0
     460:	1f 10       	cpse	r1, r15
     462:	10 10       	cpse	r1, r0
     464:	10 f0       	brcs	.+4      	; 0x46a <__LOCK_REGION_LENGTH__+0x6a>
     466:	10 00       	.word	0x0010	; ????
     468:	00 00       	nop
     46a:	ff 10       	cpse	r15, r15
     46c:	10 10       	cpse	r1, r0
     46e:	10 10       	cpse	r1, r0
     470:	10 10       	cpse	r1, r0
     472:	10 10       	cpse	r1, r0
     474:	ff 10       	cpse	r15, r15
     476:	00 00       	nop
     478:	00 ff       	sbrs	r16, 0
     47a:	14 00       	.word	0x0014	; ????
     47c:	00 ff       	sbrs	r16, 0
     47e:	00 ff       	sbrs	r16, 0
     480:	00 00       	nop
     482:	1f 10       	cpse	r1, r15
     484:	17 00       	.word	0x0017	; ????
     486:	00 fc       	sbrc	r0, 0
     488:	04 f4       	brge	.+0      	; 0x48a <__LOCK_REGION_LENGTH__+0x8a>
     48a:	14 14       	cp	r1, r4
     48c:	17 10       	cpse	r1, r7
     48e:	17 14       	cp	r1, r7
     490:	14 f4       	brge	.+4      	; 0x496 <__LOCK_REGION_LENGTH__+0x96>
     492:	04 f4       	brge	.+0      	; 0x494 <__LOCK_REGION_LENGTH__+0x94>
     494:	00 00       	nop
     496:	ff 00       	.word	0x00ff	; ????
     498:	f7 14       	cp	r15, r7
     49a:	14 14       	cp	r1, r4
     49c:	14 14       	cp	r1, r4
     49e:	14 14       	cp	r1, r4
     4a0:	f7 00       	.word	0x00f7	; ????
     4a2:	f7 14       	cp	r15, r7
     4a4:	14 14       	cp	r1, r4
     4a6:	17 14       	cp	r1, r7
     4a8:	10 10       	cpse	r1, r0
     4aa:	1f 10       	cpse	r1, r15
     4ac:	1f 14       	cp	r1, r15
     4ae:	14 14       	cp	r1, r4
     4b0:	f4 14       	cp	r15, r4
     4b2:	10 10       	cpse	r1, r0
     4b4:	f0 10       	cpse	r15, r0
     4b6:	f0 00       	.word	0x00f0	; ????
     4b8:	00 1f       	adc	r16, r16
     4ba:	10 1f       	adc	r17, r16
     4bc:	00 00       	nop
     4be:	00 1f       	adc	r16, r16
     4c0:	14 00       	.word	0x0014	; ????
     4c2:	00 00       	nop
     4c4:	fc 14       	cp	r15, r12
     4c6:	00 00       	nop
     4c8:	f0 10       	cpse	r15, r0
     4ca:	f0 10       	cpse	r15, r0
     4cc:	10 ff       	sbrs	r17, 0
     4ce:	10 ff       	sbrs	r17, 0
     4d0:	14 14       	cp	r1, r4
     4d2:	14 ff       	sbrs	r17, 4
     4d4:	14 10       	cpse	r1, r4
     4d6:	10 10       	cpse	r1, r0
     4d8:	1f 00       	.word	0x001f	; ????
     4da:	00 00       	nop
     4dc:	00 f0       	brcs	.+0      	; 0x4de <__LOCK_REGION_LENGTH__+0xde>
     4de:	10 ff       	sbrs	r17, 0
     4e0:	ff ff       	.word	0xffff	; ????
     4e2:	ff ff       	.word	0xffff	; ????
     4e4:	f0 f0       	brcs	.+60     	; 0x522 <__LOCK_REGION_LENGTH__+0x122>
     4e6:	f0 f0       	brcs	.+60     	; 0x524 <__LOCK_REGION_LENGTH__+0x124>
     4e8:	f0 ff       	sbrs	r31, 0
     4ea:	ff ff       	.word	0xffff	; ????
     4ec:	00 00       	nop
     4ee:	00 00       	nop
     4f0:	00 ff       	sbrs	r16, 0
     4f2:	ff 0f       	add	r31, r31
     4f4:	0f 0f       	add	r16, r31
     4f6:	0f 0f       	add	r16, r31
     4f8:	38 44       	sbci	r19, 0x48	; 72
     4fa:	44 38       	cpi	r20, 0x84	; 132
     4fc:	44 fc       	sbrc	r4, 4
     4fe:	4a 4a       	sbci	r20, 0xAA	; 170
     500:	4a 34       	cpi	r20, 0x4A	; 74
     502:	7e 02       	muls	r23, r30
     504:	02 06       	cpc	r0, r18
     506:	06 02       	muls	r16, r22
     508:	7e 02       	muls	r23, r30
     50a:	7e 02       	muls	r23, r30
     50c:	63 55       	subi	r22, 0x53	; 83
     50e:	49 41       	sbci	r20, 0x19	; 25
     510:	63 38       	cpi	r22, 0x83	; 131
     512:	44 44       	sbci	r20, 0x44	; 68
     514:	3c 04       	cpc	r3, r12
     516:	40 7e       	andi	r20, 0xE0	; 224
     518:	20 1e       	adc	r2, r16
     51a:	20 06       	cpc	r2, r16
     51c:	02 7e       	andi	r16, 0xE2	; 226
     51e:	02 02       	muls	r16, r18
     520:	99 a5       	ldd	r25, Y+41	; 0x29
     522:	e7 a5       	ldd	r30, Z+47	; 0x2f
     524:	99 1c       	adc	r9, r9
     526:	2a 49       	sbci	r18, 0x9A	; 154
     528:	2a 1c       	adc	r2, r10
     52a:	4c 72       	andi	r20, 0x2C	; 44
     52c:	01 72       	andi	r16, 0x21	; 33
     52e:	4c 30       	cpi	r20, 0x0C	; 12
     530:	4a 4d       	sbci	r20, 0xDA	; 218
     532:	4d 30       	cpi	r20, 0x0D	; 13
     534:	30 48       	sbci	r19, 0x80	; 128
     536:	78 48       	sbci	r23, 0x88	; 136
     538:	30 bc       	out	0x20, r3	; 32
     53a:	62 5a       	subi	r22, 0xA2	; 162
     53c:	46 3d       	cpi	r20, 0xD6	; 214
     53e:	3e 49       	sbci	r19, 0x9E	; 158
     540:	49 49       	sbci	r20, 0x99	; 153
     542:	00 7e       	andi	r16, 0xE0	; 224
     544:	01 01       	movw	r0, r2
     546:	01 7e       	andi	r16, 0xE1	; 225
     548:	2a 2a       	or	r2, r26
     54a:	2a 2a       	or	r2, r26
     54c:	2a 44       	sbci	r18, 0x4A	; 74
     54e:	44 5f       	subi	r20, 0xF4	; 244
     550:	44 44       	sbci	r20, 0x44	; 68
     552:	40 51       	subi	r20, 0x10	; 16
     554:	4a 44       	sbci	r20, 0x4A	; 74
     556:	40 40       	sbci	r20, 0x00	; 0
     558:	44 4a       	sbci	r20, 0xA4	; 164
     55a:	51 40       	sbci	r21, 0x01	; 1
     55c:	00 00       	nop
     55e:	ff 01       	movw	r30, r30
     560:	03 e0       	ldi	r16, 0x03	; 3
     562:	80 ff       	sbrs	r24, 0
     564:	00 00       	nop
     566:	08 08       	sbc	r0, r8
     568:	6b 6b       	ori	r22, 0xBB	; 187
     56a:	08 36       	cpi	r16, 0x68	; 104
     56c:	12 36       	cpi	r17, 0x62	; 98
     56e:	24 36       	cpi	r18, 0x64	; 100
     570:	06 0f       	add	r16, r22
     572:	09 0f       	add	r16, r25
     574:	06 00       	.word	0x0006	; ????
     576:	00 18       	sub	r0, r0
     578:	18 00       	.word	0x0018	; ????
     57a:	00 00       	nop
     57c:	10 10       	cpse	r1, r0
     57e:	00 30       	cpi	r16, 0x00	; 0
     580:	40 ff       	sbrs	r20, 0
     582:	01 01       	movw	r0, r2
     584:	00 1f       	adc	r16, r16
     586:	01 01       	movw	r0, r2
     588:	1e 00       	.word	0x001e	; ????
     58a:	19 1d       	adc	r17, r9
     58c:	17 12       	cpse	r1, r23
     58e:	00 3c       	cpi	r16, 0xC0	; 192
     590:	3c 3c       	cpi	r19, 0xCC	; 204
     592:	3c 00       	.word	0x003c	; ????
     594:	00 00       	nop
	...

00000598 <gamma6>:
     598:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5a8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5b8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     5c8:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

000005d8 <gamma5>:
     5d8:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     5e8:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

000005f8 <RainbowColors_p>:
     5f8:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     608:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     618:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     628:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

00000638 <digital_pin_table_PGM>:
     638:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     648:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     658:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     668:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     678:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     688:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000694 <descriptor_list>:
     694:	00 01 00 00 45 07 12 00 02 00 00 02 07 43 00 03     ....E........C..
     6a4:	00 00 fe 06 04 01 03 09 04 e4 06 18 02 03 09 04     ................
     6b4:	cc 06 16 03 03 09 04 be 06 0c                       ..........

000006be <string3>:
     6be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000006cc <string2>:
     6cc:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     6dc:	69 00 61 00 6c 00 00 00                             i.a.l...

000006e4 <string1>:
     6e4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     6f4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000006fe <string0>:
     6fe:	04 03 09 04                                         ....

00000702 <config1_descriptor>:
     702:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     712:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     722:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     732:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     742:	40 00 00                                            @..

00000745 <device_descriptor>:
     745:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     755:	03 01                                               ..

00000757 <endpoint_config_table>:
     757:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000762 <__ctors_start>:
     762:	f6 17       	cp	r31, r22
     764:	56 26       	eor	r5, r22
     766:	8c 2e       	mov	r8, r28
     768:	51 31       	cpi	r21, 0x11	; 17

0000076a <__ctors_end>:
     76a:	71 18       	sub	r7, r1

0000076c <__dtors_end>:
     76c:	11 24       	eor	r1, r1
     76e:	1f be       	out	0x3f, r1	; 63
     770:	cf ef       	ldi	r28, 0xFF	; 255
     772:	d0 e2       	ldi	r29, 0x20	; 32
     774:	de bf       	out	0x3e, r29	; 62
     776:	cd bf       	out	0x3d, r28	; 61

00000778 <__do_copy_data>:
     778:	17 e0       	ldi	r17, 0x07	; 7
     77a:	a0 e0       	ldi	r26, 0x00	; 0
     77c:	b1 e0       	ldi	r27, 0x01	; 1
     77e:	ee ee       	ldi	r30, 0xEE	; 238
     780:	fa e6       	ldi	r31, 0x6A	; 106
     782:	00 e0       	ldi	r16, 0x00	; 0
     784:	0b bf       	out	0x3b, r16	; 59
     786:	02 c0       	rjmp	.+4      	; 0x78c <__do_copy_data+0x14>
     788:	07 90       	elpm	r0, Z+
     78a:	0d 92       	st	X+, r0
     78c:	aa 39       	cpi	r26, 0x9A	; 154
     78e:	b1 07       	cpc	r27, r17
     790:	d9 f7       	brne	.-10     	; 0x788 <__do_copy_data+0x10>

00000792 <__do_clear_bss>:
     792:	2f e0       	ldi	r18, 0x0F	; 15
     794:	aa e9       	ldi	r26, 0x9A	; 154
     796:	b7 e0       	ldi	r27, 0x07	; 7
     798:	01 c0       	rjmp	.+2      	; 0x79c <.do_clear_bss_start>

0000079a <.do_clear_bss_loop>:
     79a:	1d 92       	st	X+, r1

0000079c <.do_clear_bss_start>:
     79c:	ab 31       	cpi	r26, 0x1B	; 27
     79e:	b2 07       	cpc	r27, r18
     7a0:	e1 f7       	brne	.-8      	; 0x79a <.do_clear_bss_loop>

000007a2 <__do_global_ctors>:
     7a2:	13 e0       	ldi	r17, 0x03	; 3
     7a4:	c5 eb       	ldi	r28, 0xB5	; 181
     7a6:	d3 e0       	ldi	r29, 0x03	; 3
     7a8:	04 c0       	rjmp	.+8      	; 0x7b2 <__do_global_ctors+0x10>
     7aa:	21 97       	sbiw	r28, 0x01	; 1
     7ac:	fe 01       	movw	r30, r28
     7ae:	0e 94 80 34 	call	0x6900	; 0x6900 <__tablejump2__>
     7b2:	c1 3b       	cpi	r28, 0xB1	; 177
     7b4:	d1 07       	cpc	r29, r17
     7b6:	c9 f7       	brne	.-14     	; 0x7aa <__do_global_ctors+0x8>
     7b8:	0e 94 9d 2e 	call	0x5d3a	; 0x5d3a <main>
     7bc:	0c 94 6b 35 	jmp	0x6ad6	; 0x6ad6 <__do_global_dtors>

000007c0 <__bad_interrupt>:
     7c0:	1f cc       	rjmp	.-1986   	; 0x0 <__vectors>

000007c2 <CLEDController::size()>:
        if (secondHand == 15) { currentPalette = RainbowStripeColors_p;   currentBlending = LINEARBLEND; }
        if (secondHand == 20) { SetupPurpleAndGreenPalette();             currentBlending = LINEARBLEND; }
        if (secondHand == 25) { SetupTotallyRandomPalette();              currentBlending = LINEARBLEND; }
        if (secondHand == 30) { SetupBlackAndWhiteStripedPalette();       currentBlending = NOBLEND; }
        if (secondHand == 35) { SetupBlackAndWhiteStripedPalette();       currentBlending = LINEARBLEND; }
        if (secondHand == 40) { currentPalette = CloudColors_p;           currentBlending = LINEARBLEND; }
     7c2:	fc 01       	movw	r30, r24
     7c4:	85 85       	ldd	r24, Z+13	; 0x0d
     7c6:	96 85       	ldd	r25, Z+14	; 0x0e
     7c8:	08 95       	ret

000007ca <CLEDController::clearLeds(int)>:
     7ca:	cf 93       	push	r28
     7cc:	df 93       	push	r29
     7ce:	00 d0       	rcall	.+0      	; 0x7d0 <CLEDController::clearLeds(int)+0x6>
     7d0:	00 d0       	rcall	.+0      	; 0x7d2 <CLEDController::clearLeds(int)+0x8>
     7d2:	00 d0       	rcall	.+0      	; 0x7d4 <CLEDController::clearLeds(int)+0xa>
     7d4:	cd b7       	in	r28, 0x3d	; 61
     7d6:	de b7       	in	r29, 0x3e	; 62
     7d8:	ab 01       	movw	r20, r22
     7da:	1c 82       	std	Y+4, r1	; 0x04
     7dc:	1d 82       	std	Y+5, r1	; 0x05
     7de:	1e 82       	std	Y+6, r1	; 0x06
     7e0:	dc 01       	movw	r26, r24
     7e2:	ed 91       	ld	r30, X+
     7e4:	fc 91       	ld	r31, X
     7e6:	01 90       	ld	r0, Z+
     7e8:	f0 81       	ld	r31, Z
     7ea:	e0 2d       	mov	r30, r0
     7ec:	19 82       	std	Y+1, r1	; 0x01
     7ee:	1a 82       	std	Y+2, r1	; 0x02
     7f0:	1b 82       	std	Y+3, r1	; 0x03
     7f2:	9e 01       	movw	r18, r28
     7f4:	2f 5f       	subi	r18, 0xFF	; 255
     7f6:	3f 4f       	sbci	r19, 0xFF	; 255
     7f8:	be 01       	movw	r22, r28
     7fa:	6c 5f       	subi	r22, 0xFC	; 252
     7fc:	7f 4f       	sbci	r23, 0xFF	; 255
     7fe:	09 95       	icall
     800:	26 96       	adiw	r28, 0x06	; 6
     802:	0f b6       	in	r0, 0x3f	; 63
     804:	f8 94       	cli
     806:	de bf       	out	0x3e, r29	; 62
     808:	0f be       	out	0x3f, r0	; 63
     80a:	cd bf       	out	0x3d, r28	; 61
     80c:	df 91       	pop	r29
     80e:	cf 91       	pop	r28
     810:	08 95       	ret

00000812 <myRemapFn(unsigned int, unsigned int)>:
     812:	67 31       	cpi	r22, 0x17	; 23
     814:	71 05       	cpc	r23, r1
     816:	08 f0       	brcs	.+2      	; 0x81a <myRemapFn(unsigned int, unsigned int)+0x8>
     818:	ef c0       	rjmp	.+478    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     81a:	fb 01       	movw	r30, r22
     81c:	ee 5e       	subi	r30, 0xEE	; 238
     81e:	fb 4f       	sbci	r31, 0xFB	; 251
     820:	0c 94 80 34 	jmp	0x6900	; 0x6900 <__tablejump2__>
     824:	29 04       	cpc	r2, r9
     826:	34 04       	cpc	r3, r4
     828:	3c 04       	cpc	r3, r12
     82a:	49 04       	cpc	r4, r9
     82c:	54 04       	cpc	r5, r4
     82e:	5b 04       	cpc	r5, r11
     830:	62 04       	cpc	r6, r2
     832:	69 04       	cpc	r6, r9
     834:	73 04       	cpc	r7, r3
     836:	7d 04       	cpc	r7, r13
     838:	87 04       	cpc	r8, r7
     83a:	91 04       	cpc	r9, r1
     83c:	9b 04       	cpc	r9, r11
     83e:	a5 04       	cpc	r10, r5
     840:	af 04       	cpc	r10, r15
     842:	b7 04       	cpc	r11, r7
     844:	bf 04       	cpc	r11, r15
     846:	c6 04       	cpc	r12, r6
     848:	cd 04       	cpc	r12, r13
     84a:	d4 04       	cpc	r13, r4
     84c:	de 04       	cpc	r13, r14
     84e:	e8 04       	cpc	r14, r8
     850:	f2 04       	cpc	r15, r2
     852:	04 97       	sbiw	r24, 0x04	; 4
     854:	83 30       	cpi	r24, 0x03	; 3
     856:	91 05       	cpc	r25, r1
     858:	08 f0       	brcs	.+2      	; 0x85c <myRemapFn(unsigned int, unsigned int)+0x4a>
     85a:	ce c0       	rjmp	.+412    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     85c:	8e 59       	subi	r24, 0x9E	; 158
     85e:	9c 4f       	sbci	r25, 0xFC	; 252
     860:	fc 01       	movw	r30, r24
     862:	80 81       	ld	r24, Z
     864:	90 e0       	ldi	r25, 0x00	; 0
     866:	08 95       	ret
     868:	02 97       	sbiw	r24, 0x02	; 2
     86a:	86 30       	cpi	r24, 0x06	; 6
     86c:	91 05       	cpc	r25, r1
     86e:	08 f0       	brcs	.+2      	; 0x872 <myRemapFn(unsigned int, unsigned int)+0x60>
     870:	c3 c0       	rjmp	.+390    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     872:	84 5a       	subi	r24, 0xA4	; 164
     874:	9c 4f       	sbci	r25, 0xFC	; 252
     876:	f4 cf       	rjmp	.-24     	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     878:	01 97       	sbiw	r24, 0x01	; 1
     87a:	83 31       	cpi	r24, 0x13	; 19
     87c:	91 05       	cpc	r25, r1
     87e:	08 f0       	brcs	.+2      	; 0x882 <myRemapFn(unsigned int, unsigned int)+0x70>
     880:	bb c0       	rjmp	.+374    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     882:	88 0f       	add	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	fc 01       	movw	r30, r24
     888:	ea 5c       	subi	r30, 0xCA	; 202
     88a:	fc 4f       	sbci	r31, 0xFC	; 252
     88c:	80 81       	ld	r24, Z
     88e:	91 81       	ldd	r25, Z+1	; 0x01
     890:	08 95       	ret
     892:	01 97       	sbiw	r24, 0x01	; 1
     894:	85 31       	cpi	r24, 0x15	; 21
     896:	91 05       	cpc	r25, r1
     898:	08 f0       	brcs	.+2      	; 0x89c <myRemapFn(unsigned int, unsigned int)+0x8a>
     89a:	ae c0       	rjmp	.+348    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     89c:	88 0f       	add	r24, r24
     89e:	99 1f       	adc	r25, r25
     8a0:	fc 01       	movw	r30, r24
     8a2:	e4 5f       	subi	r30, 0xF4	; 244
     8a4:	fc 4f       	sbci	r31, 0xFC	; 252
     8a6:	f2 cf       	rjmp	.-28     	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     8a8:	84 31       	cpi	r24, 0x14	; 20
     8aa:	91 05       	cpc	r25, r1
     8ac:	08 f0       	brcs	.+2      	; 0x8b0 <myRemapFn(unsigned int, unsigned int)+0x9e>
     8ae:	a4 c0       	rjmp	.+328    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8b0:	88 50       	subi	r24, 0x08	; 8
     8b2:	9d 4f       	sbci	r25, 0xFD	; 253
     8b4:	d5 cf       	rjmp	.-86     	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     8b6:	84 31       	cpi	r24, 0x14	; 20
     8b8:	91 05       	cpc	r25, r1
     8ba:	08 f0       	brcs	.+2      	; 0x8be <myRemapFn(unsigned int, unsigned int)+0xac>
     8bc:	9d c0       	rjmp	.+314    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8be:	8c 51       	subi	r24, 0x1C	; 28
     8c0:	9d 4f       	sbci	r25, 0xFD	; 253
     8c2:	ce cf       	rjmp	.-100    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     8c4:	8f 30       	cpi	r24, 0x0F	; 15
     8c6:	91 05       	cpc	r25, r1
     8c8:	08 f0       	brcs	.+2      	; 0x8cc <myRemapFn(unsigned int, unsigned int)+0xba>
     8ca:	96 c0       	rjmp	.+300    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8cc:	8b 52       	subi	r24, 0x2B	; 43
     8ce:	9d 4f       	sbci	r25, 0xFD	; 253
     8d0:	c7 cf       	rjmp	.-114    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     8d2:	8f 30       	cpi	r24, 0x0F	; 15
     8d4:	91 05       	cpc	r25, r1
     8d6:	08 f0       	brcs	.+2      	; 0x8da <myRemapFn(unsigned int, unsigned int)+0xc8>
     8d8:	8f c0       	rjmp	.+286    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8da:	88 0f       	add	r24, r24
     8dc:	99 1f       	adc	r25, r25
     8de:	fc 01       	movw	r30, r24
     8e0:	e9 54       	subi	r30, 0x49	; 73
     8e2:	fd 4f       	sbci	r31, 0xFD	; 253
     8e4:	d3 cf       	rjmp	.-90     	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     8e6:	8f 30       	cpi	r24, 0x0F	; 15
     8e8:	91 05       	cpc	r25, r1
     8ea:	08 f0       	brcs	.+2      	; 0x8ee <myRemapFn(unsigned int, unsigned int)+0xdc>
     8ec:	85 c0       	rjmp	.+266    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     8ee:	88 0f       	add	r24, r24
     8f0:	99 1f       	adc	r25, r25
     8f2:	fc 01       	movw	r30, r24
     8f4:	e7 56       	subi	r30, 0x67	; 103
     8f6:	fd 4f       	sbci	r31, 0xFD	; 253
     8f8:	c9 cf       	rjmp	.-110    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     8fa:	8f 30       	cpi	r24, 0x0F	; 15
     8fc:	91 05       	cpc	r25, r1
     8fe:	08 f0       	brcs	.+2      	; 0x902 <myRemapFn(unsigned int, unsigned int)+0xf0>
     900:	7b c0       	rjmp	.+246    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     902:	88 0f       	add	r24, r24
     904:	99 1f       	adc	r25, r25
     906:	fc 01       	movw	r30, r24
     908:	e5 58       	subi	r30, 0x85	; 133
     90a:	fd 4f       	sbci	r31, 0xFD	; 253
     90c:	bf cf       	rjmp	.-130    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     90e:	8f 30       	cpi	r24, 0x0F	; 15
     910:	91 05       	cpc	r25, r1
     912:	08 f0       	brcs	.+2      	; 0x916 <myRemapFn(unsigned int, unsigned int)+0x104>
     914:	71 c0       	rjmp	.+226    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     916:	88 0f       	add	r24, r24
     918:	99 1f       	adc	r25, r25
     91a:	fc 01       	movw	r30, r24
     91c:	e3 5a       	subi	r30, 0xA3	; 163
     91e:	fd 4f       	sbci	r31, 0xFD	; 253
     920:	b5 cf       	rjmp	.-150    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     922:	8f 30       	cpi	r24, 0x0F	; 15
     924:	91 05       	cpc	r25, r1
     926:	08 f0       	brcs	.+2      	; 0x92a <myRemapFn(unsigned int, unsigned int)+0x118>
     928:	67 c0       	rjmp	.+206    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     92a:	88 0f       	add	r24, r24
     92c:	99 1f       	adc	r25, r25
     92e:	fc 01       	movw	r30, r24
     930:	e1 5c       	subi	r30, 0xC1	; 193
     932:	fd 4f       	sbci	r31, 0xFD	; 253
     934:	ab cf       	rjmp	.-170    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     936:	8f 30       	cpi	r24, 0x0F	; 15
     938:	91 05       	cpc	r25, r1
     93a:	08 f0       	brcs	.+2      	; 0x93e <myRemapFn(unsigned int, unsigned int)+0x12c>
     93c:	5d c0       	rjmp	.+186    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     93e:	88 0f       	add	r24, r24
     940:	99 1f       	adc	r25, r25
     942:	fc 01       	movw	r30, r24
     944:	ef 5d       	subi	r30, 0xDF	; 223
     946:	fd 4f       	sbci	r31, 0xFD	; 253
     948:	a1 cf       	rjmp	.-190    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     94a:	8f 30       	cpi	r24, 0x0F	; 15
     94c:	91 05       	cpc	r25, r1
     94e:	08 f0       	brcs	.+2      	; 0x952 <myRemapFn(unsigned int, unsigned int)+0x140>
     950:	53 c0       	rjmp	.+166    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     952:	88 0f       	add	r24, r24
     954:	99 1f       	adc	r25, r25
     956:	fc 01       	movw	r30, r24
     958:	ed 5f       	subi	r30, 0xFD	; 253
     95a:	fd 4f       	sbci	r31, 0xFD	; 253
     95c:	97 cf       	rjmp	.-210    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     95e:	01 97       	sbiw	r24, 0x01	; 1
     960:	8e 30       	cpi	r24, 0x0E	; 14
     962:	91 05       	cpc	r25, r1
     964:	08 f0       	brcs	.+2      	; 0x968 <myRemapFn(unsigned int, unsigned int)+0x156>
     966:	48 c0       	rjmp	.+144    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     968:	8b 50       	subi	r24, 0x0B	; 11
     96a:	9e 4f       	sbci	r25, 0xFE	; 254
     96c:	79 cf       	rjmp	.-270    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     96e:	02 97       	sbiw	r24, 0x02	; 2
     970:	81 31       	cpi	r24, 0x11	; 17
     972:	91 05       	cpc	r25, r1
     974:	08 f0       	brcs	.+2      	; 0x978 <myRemapFn(unsigned int, unsigned int)+0x166>
     976:	40 c0       	rjmp	.+128    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     978:	8c 51       	subi	r24, 0x1C	; 28
     97a:	9e 4f       	sbci	r25, 0xFE	; 254
     97c:	71 cf       	rjmp	.-286    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     97e:	01 97       	sbiw	r24, 0x01	; 1
     980:	82 31       	cpi	r24, 0x12	; 18
     982:	91 05       	cpc	r25, r1
     984:	c8 f5       	brcc	.+114    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     986:	8e 52       	subi	r24, 0x2E	; 46
     988:	9e 4f       	sbci	r25, 0xFE	; 254
     98a:	6a cf       	rjmp	.-300    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     98c:	01 97       	sbiw	r24, 0x01	; 1
     98e:	83 31       	cpi	r24, 0x13	; 19
     990:	91 05       	cpc	r25, r1
     992:	90 f5       	brcc	.+100    	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     994:	81 54       	subi	r24, 0x41	; 65
     996:	9e 4f       	sbci	r25, 0xFE	; 254
     998:	63 cf       	rjmp	.-314    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     99a:	01 97       	sbiw	r24, 0x01	; 1
     99c:	84 31       	cpi	r24, 0x14	; 20
     99e:	91 05       	cpc	r25, r1
     9a0:	58 f5       	brcc	.+86     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9a2:	85 55       	subi	r24, 0x55	; 85
     9a4:	9e 4f       	sbci	r25, 0xFE	; 254
     9a6:	5c cf       	rjmp	.-328    	; 0x860 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9a8:	01 97       	sbiw	r24, 0x01	; 1
     9aa:	83 31       	cpi	r24, 0x13	; 19
     9ac:	91 05       	cpc	r25, r1
     9ae:	20 f5       	brcc	.+72     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9b0:	88 0f       	add	r24, r24
     9b2:	99 1f       	adc	r25, r25
     9b4:	fc 01       	movw	r30, r24
     9b6:	eb 57       	subi	r30, 0x7B	; 123
     9b8:	fe 4f       	sbci	r31, 0xFE	; 254
     9ba:	68 cf       	rjmp	.-304    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9bc:	02 97       	sbiw	r24, 0x02	; 2
     9be:	87 30       	cpi	r24, 0x07	; 7
     9c0:	91 05       	cpc	r25, r1
     9c2:	d0 f4       	brcc	.+52     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9c4:	88 0f       	add	r24, r24
     9c6:	99 1f       	adc	r25, r25
     9c8:	fc 01       	movw	r30, r24
     9ca:	e9 58       	subi	r30, 0x89	; 137
     9cc:	fe 4f       	sbci	r31, 0xFE	; 254
     9ce:	5e cf       	rjmp	.-324    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9d0:	03 97       	sbiw	r24, 0x03	; 3
     9d2:	85 30       	cpi	r24, 0x05	; 5
     9d4:	91 05       	cpc	r25, r1
     9d6:	80 f4       	brcc	.+32     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9d8:	88 0f       	add	r24, r24
     9da:	99 1f       	adc	r25, r25
     9dc:	fc 01       	movw	r30, r24
     9de:	e3 59       	subi	r30, 0x93	; 147
     9e0:	fe 4f       	sbci	r31, 0xFE	; 254
     9e2:	54 cf       	rjmp	.-344    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e4:	04 97       	sbiw	r24, 0x04	; 4
     9e6:	83 30       	cpi	r24, 0x03	; 3
     9e8:	91 05       	cpc	r25, r1
     9ea:	30 f4       	brcc	.+12     	; 0x9f8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ec:	88 0f       	add	r24, r24
     9ee:	99 1f       	adc	r25, r25
     9f0:	fc 01       	movw	r30, r24
     9f2:	e9 59       	subi	r30, 0x99	; 153
     9f4:	fe 4f       	sbci	r31, 0xFE	; 254
     9f6:	4a cf       	rjmp	.-364    	; 0x88c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9f8:	8c e2       	ldi	r24, 0x2C	; 44
     9fa:	91 e0       	ldi	r25, 0x01	; 1
     9fc:	08 95       	ret

000009fe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     9fe:	80 e9       	ldi	r24, 0x90	; 144
     a00:	91 e0       	ldi	r25, 0x01	; 1
     a02:	08 95       	ret

00000a04 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     a04:	3a 9a       	sbi	0x07, 2	; 7
     a06:	08 95       	ret

00000a08 <Print::write(char const*)>:
     a08:	fb 01       	movw	r30, r22
     a0a:	01 90       	ld	r0, Z+
     a0c:	00 20       	and	r0, r0
     a0e:	e9 f7       	brne	.-6      	; 0xa0a <Print::write(char const*)+0x2>
     a10:	31 97       	sbiw	r30, 0x01	; 1
     a12:	af 01       	movw	r20, r30
     a14:	46 1b       	sub	r20, r22
     a16:	57 0b       	sbc	r21, r23
     a18:	dc 01       	movw	r26, r24
     a1a:	ed 91       	ld	r30, X+
     a1c:	fc 91       	ld	r31, X
     a1e:	02 80       	ldd	r0, Z+2	; 0x02
     a20:	f3 81       	ldd	r31, Z+3	; 0x03
     a22:	e0 2d       	mov	r30, r0
     a24:	09 94       	ijmp

00000a26 <Print::print(char const*)>:
     a26:	f0 cf       	rjmp	.-32     	; 0xa08 <Print::write(char const*)>

00000a28 <Print::print(unsigned char)>:
     a28:	46 2f       	mov	r20, r22
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	20 e0       	ldi	r18, 0x00	; 0
     a32:	0c 94 49 2f 	jmp	0x5e92	; 0x5e92 <Print::printNumberDec(unsigned long, unsigned char)>

00000a36 <Print::println(unsigned char)>:
     a36:	0f 93       	push	r16
     a38:	1f 93       	push	r17
     a3a:	cf 93       	push	r28
     a3c:	df 93       	push	r29
     a3e:	ec 01       	movw	r28, r24
     a40:	f3 df       	rcall	.-26     	; 0xa28 <Print::print(unsigned char)>
     a42:	8c 01       	movw	r16, r24
     a44:	ce 01       	movw	r24, r28
     a46:	0e 94 2f 2f 	call	0x5e5e	; 0x5e5e <Print::println()>
     a4a:	80 0f       	add	r24, r16
     a4c:	91 1f       	adc	r25, r17
     a4e:	df 91       	pop	r29
     a50:	cf 91       	pop	r28
     a52:	1f 91       	pop	r17
     a54:	0f 91       	pop	r16
     a56:	08 95       	ret

00000a58 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     a58:	0f 93       	push	r16
     a5a:	1f 93       	push	r17
     a5c:	dc 01       	movw	r26, r24
     a5e:	ac 01       	movw	r20, r24
     a60:	40 5d       	subi	r20, 0xD0	; 208
     a62:	5f 4f       	sbci	r21, 0xFF	; 255
     a64:	fb 01       	movw	r30, r22
     a66:	05 91       	lpm	r16, Z+
     a68:	15 91       	lpm	r17, Z+
     a6a:	25 91       	lpm	r18, Z+
     a6c:	34 91       	lpm	r19, Z
     a6e:	2c 93       	st	X, r18
     a70:	11 96       	adiw	r26, 0x01	; 1
     a72:	1c 93       	st	X, r17
     a74:	11 97       	sbiw	r26, 0x01	; 1
     a76:	12 96       	adiw	r26, 0x02	; 2
     a78:	0c 93       	st	X, r16
     a7a:	12 97       	sbiw	r26, 0x02	; 2
     a7c:	6c 5f       	subi	r22, 0xFC	; 252
     a7e:	7f 4f       	sbci	r23, 0xFF	; 255
     a80:	13 96       	adiw	r26, 0x03	; 3
     a82:	a4 17       	cp	r26, r20
     a84:	b5 07       	cpc	r27, r21
     a86:	71 f7       	brne	.-36     	; 0xa64 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     a88:	1f 91       	pop	r17
     a8a:	0f 91       	pop	r16
     a8c:	08 95       	ret

00000a8e <CFastLED::show()>:
     a8e:	fc 01       	movw	r30, r24
     a90:	60 81       	ld	r22, Z
     a92:	0c 94 9e 24 	jmp	0x493c	; 0x493c <CFastLED::show(unsigned char)>

00000a96 <CFastLED::showColor(CRGB const&)>:
     a96:	fc 01       	movw	r30, r24
     a98:	40 81       	ld	r20, Z
     a9a:	0c 94 2e 25 	jmp	0x4a5c	; 0x4a5c <CFastLED::showColor(CRGB const&, unsigned char)>

00000a9e <Framebuffer_GFX::clear()>:
     a9e:	dc 01       	movw	r26, r24
     aa0:	ed 91       	ld	r30, X+
     aa2:	fc 91       	ld	r31, X
     aa4:	02 a0       	ldd	r0, Z+34	; 0x22
     aa6:	f3 a1       	ldd	r31, Z+35	; 0x23
     aa8:	e0 2d       	mov	r30, r0
     aaa:	70 e0       	ldi	r23, 0x00	; 0
     aac:	60 e0       	ldi	r22, 0x00	; 0
     aae:	09 94       	ijmp

00000ab0 <getRandomColorValue()>:
     ab0:	24 e0       	ldi	r18, 0x04	; 4
     ab2:	30 e0       	ldi	r19, 0x00	; 0
     ab4:	40 e0       	ldi	r20, 0x00	; 0
     ab6:	50 e0       	ldi	r21, 0x00	; 0
     ab8:	61 e0       	ldi	r22, 0x01	; 1
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	80 e0       	ldi	r24, 0x00	; 0
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
     ac4:	62 30       	cpi	r22, 0x02	; 2
     ac6:	71 05       	cpc	r23, r1
     ac8:	31 f0       	breq	.+12     	; 0xad6 <getRandomColorValue()+0x26>
     aca:	63 30       	cpi	r22, 0x03	; 3
     acc:	71 05       	cpc	r23, r1
     ace:	31 f0       	breq	.+12     	; 0xadc <getRandomColorValue()+0x2c>
     ad0:	90 e0       	ldi	r25, 0x00	; 0
     ad2:	80 e0       	ldi	r24, 0x00	; 0
     ad4:	08 95       	ret
     ad6:	8f e7       	ldi	r24, 0x7F	; 127
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	08 95       	ret
     adc:	8f ef       	ldi	r24, 0xFF	; 255
     ade:	90 e0       	ldi	r25, 0x00	; 0
     ae0:	08 95       	ret

00000ae2 <getRandomColor()>:
     ae2:	27 e0       	ldi	r18, 0x07	; 7
     ae4:	30 e0       	ldi	r19, 0x00	; 0
     ae6:	40 e0       	ldi	r20, 0x00	; 0
     ae8:	50 e0       	ldi	r21, 0x00	; 0
     aea:	61 e0       	ldi	r22, 0x01	; 1
     aec:	70 e0       	ldi	r23, 0x00	; 0
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
     af6:	61 50       	subi	r22, 0x01	; 1
     af8:	71 09       	sbc	r23, r1
     afa:	67 30       	cpi	r22, 0x07	; 7
     afc:	71 05       	cpc	r23, r1
     afe:	40 f4       	brcc	.+16     	; 0xb10 <getRandomColor()+0x2e>
     b00:	66 0f       	add	r22, r22
     b02:	77 1f       	adc	r23, r23
     b04:	fb 01       	movw	r30, r22
     b06:	e7 5a       	subi	r30, 0xA7	; 167
     b08:	fe 4f       	sbci	r31, 0xFE	; 254
     b0a:	80 81       	ld	r24, Z
     b0c:	91 81       	ldd	r25, Z+1	; 0x01
     b0e:	08 95       	ret
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	80 e0       	ldi	r24, 0x00	; 0
     b14:	08 95       	ret

00000b16 <getRandomColorIncludingBlack()>:
     b16:	29 e0       	ldi	r18, 0x09	; 9
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e0       	ldi	r20, 0x00	; 0
     b1c:	50 e0       	ldi	r21, 0x00	; 0
     b1e:	61 e0       	ldi	r22, 0x01	; 1
     b20:	70 e0       	ldi	r23, 0x00	; 0
     b22:	80 e0       	ldi	r24, 0x00	; 0
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
     b2a:	61 50       	subi	r22, 0x01	; 1
     b2c:	71 09       	sbc	r23, r1
     b2e:	67 30       	cpi	r22, 0x07	; 7
     b30:	71 05       	cpc	r23, r1
     b32:	40 f4       	brcc	.+16     	; 0xb44 <getRandomColorIncludingBlack()+0x2e>
     b34:	66 0f       	add	r22, r22
     b36:	77 1f       	adc	r23, r23
     b38:	fb 01       	movw	r30, r22
     b3a:	e5 5b       	subi	r30, 0xB5	; 181
     b3c:	fe 4f       	sbci	r31, 0xFE	; 254
     b3e:	80 81       	ld	r24, Z
     b40:	91 81       	ldd	r25, Z+1	; 0x01
     b42:	08 95       	ret
     b44:	90 e0       	ldi	r25, 0x00	; 0
     b46:	80 e0       	ldi	r24, 0x00	; 0
     b48:	08 95       	ret

00000b4a <progBlingBlingColoring(unsigned int, unsigned char)>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	8c 01       	movw	r16, r24
     b54:	c6 2f       	mov	r28, r22
     b56:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
     b5a:	81 11       	cpse	r24, r1
     b5c:	0e c0       	rjmp	.+28     	; 0xb7a <progBlingBlingColoring(unsigned int, unsigned char)+0x30>
     b5e:	61 e0       	ldi	r22, 0x01	; 1
     b60:	8f e7       	ldi	r24, 0x7F	; 127
     b62:	9e e0       	ldi	r25, 0x0E	; 14
     b64:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
     b68:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     b6c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     b70:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <nextSongPart>
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
     b7a:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <progBlingBlingColoring_rounds>
     b7e:	90 91 2a 08 	lds	r25, 0x082A	; 0x80082a <progBlingBlingColoring_rounds+0x1>
     b82:	89 2b       	or	r24, r25
     b84:	49 f4       	brne	.+18     	; 0xb98 <progBlingBlingColoring(unsigned int, unsigned char)+0x4e>
     b86:	94 df       	rcall	.-216    	; 0xab0 <getRandomColorValue()>
     b88:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <r>
     b8c:	91 df       	rcall	.-222    	; 0xab0 <getRandomColorValue()>
     b8e:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <g>
     b92:	8e df       	rcall	.-228    	; 0xab0 <getRandomColorValue()>
     b94:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <b>
     b98:	c0 91 2b 08 	lds	r28, 0x082B	; 0x80082b <b>
     b9c:	d0 91 2c 08 	lds	r29, 0x082C	; 0x80082c <g>
     ba0:	10 91 2d 08 	lds	r17, 0x082D	; 0x80082d <r>
     ba4:	26 e1       	ldi	r18, 0x16	; 22
     ba6:	31 e0       	ldi	r19, 0x01	; 1
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	50 e0       	ldi	r21, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	70 e0       	ldi	r23, 0x00	; 0
     bb0:	cb 01       	movw	r24, r22
     bb2:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
     bb6:	fb 01       	movw	r30, r22
     bb8:	ee 0f       	add	r30, r30
     bba:	ff 1f       	adc	r31, r31
     bbc:	e6 0f       	add	r30, r22
     bbe:	f7 1f       	adc	r31, r23
     bc0:	e0 58       	subi	r30, 0x80	; 128
     bc2:	f7 4f       	sbci	r31, 0xF7	; 247
     bc4:	10 83       	st	Z, r17
     bc6:	d1 83       	std	Z+1, r29	; 0x01
     bc8:	c2 83       	std	Z+2, r28	; 0x02
     bca:	23 e0       	ldi	r18, 0x03	; 3
     bcc:	30 e0       	ldi	r19, 0x00	; 0
     bce:	40 e0       	ldi	r20, 0x00	; 0
     bd0:	50 e0       	ldi	r21, 0x00	; 0
     bd2:	60 e0       	ldi	r22, 0x00	; 0
     bd4:	70 e0       	ldi	r23, 0x00	; 0
     bd6:	cb 01       	movw	r24, r22
     bd8:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
     bdc:	61 30       	cpi	r22, 0x01	; 1
     bde:	71 05       	cpc	r23, r1
     be0:	81 05       	cpc	r24, r1
     be2:	91 05       	cpc	r25, r1
     be4:	99 f4       	brne	.+38     	; 0xc0c <progBlingBlingColoring(unsigned int, unsigned char)+0xc2>
     be6:	26 e1       	ldi	r18, 0x16	; 22
     be8:	31 e0       	ldi	r19, 0x01	; 1
     bea:	40 e0       	ldi	r20, 0x00	; 0
     bec:	50 e0       	ldi	r21, 0x00	; 0
     bee:	60 e0       	ldi	r22, 0x00	; 0
     bf0:	70 e0       	ldi	r23, 0x00	; 0
     bf2:	cb 01       	movw	r24, r22
     bf4:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
     bf8:	fb 01       	movw	r30, r22
     bfa:	ee 0f       	add	r30, r30
     bfc:	ff 1f       	adc	r31, r31
     bfe:	e6 0f       	add	r30, r22
     c00:	f7 1f       	adc	r31, r23
     c02:	e0 58       	subi	r30, 0x80	; 128
     c04:	f7 4f       	sbci	r31, 0xF7	; 247
     c06:	10 82       	st	Z, r1
     c08:	11 82       	std	Z+1, r1	; 0x01
     c0a:	12 82       	std	Z+2, r1	; 0x02
     c0c:	8f e7       	ldi	r24, 0x7F	; 127
     c0e:	9e e0       	ldi	r25, 0x0E	; 14
     c10:	3e df       	rcall	.-388    	; 0xa8e <CFastLED::show()>
     c12:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
     c16:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
     c1a:	88 39       	cpi	r24, 0x98	; 152
     c1c:	9a 43       	sbci	r25, 0x3A	; 58
     c1e:	f0 f0       	brcs	.+60     	; 0xc5c <progBlingBlingColoring(unsigned int, unsigned char)+0x112>
     c20:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
     c24:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
     c28:	84 e0       	ldi	r24, 0x04	; 4
     c2a:	0e 94 5e 29 	call	0x52bc	; 0x52bc <analogRead>
     c2e:	0e 94 64 31 	call	0x62c8	; 0x62c8 <randomSeed(unsigned int)>
     c32:	80 91 29 08 	lds	r24, 0x0829	; 0x800829 <progBlingBlingColoring_rounds>
     c36:	90 91 2a 08 	lds	r25, 0x082A	; 0x80082a <progBlingBlingColoring_rounds+0x1>
     c3a:	01 96       	adiw	r24, 0x01	; 1
     c3c:	84 30       	cpi	r24, 0x04	; 4
     c3e:	91 05       	cpc	r25, r1
     c40:	91 f0       	breq	.+36     	; 0xc66 <progBlingBlingColoring(unsigned int, unsigned char)+0x11c>
     c42:	90 93 2a 08 	sts	0x082A, r25	; 0x80082a <progBlingBlingColoring_rounds+0x1>
     c46:	80 93 29 08 	sts	0x0829, r24	; 0x800829 <progBlingBlingColoring_rounds>
     c4a:	32 df       	rcall	.-412    	; 0xab0 <getRandomColorValue()>
     c4c:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <r>
     c50:	2f df       	rcall	.-418    	; 0xab0 <getRandomColorValue()>
     c52:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <g>
     c56:	2c df       	rcall	.-424    	; 0xab0 <getRandomColorValue()>
     c58:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <b>
     c5c:	df 91       	pop	r29
     c5e:	cf 91       	pop	r28
     c60:	1f 91       	pop	r17
     c62:	0f 91       	pop	r16
     c64:	08 95       	ret
     c66:	81 e0       	ldi	r24, 0x01	; 1
     c68:	90 e0       	ldi	r25, 0x00	; 0
     c6a:	eb cf       	rjmp	.-42     	; 0xc42 <progBlingBlingColoring(unsigned int, unsigned char)+0xf8>

00000c6c <progFastBlingBling(unsigned int, unsigned char)>:
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
     c74:	8c 01       	movw	r16, r24
     c76:	c6 2f       	mov	r28, r22
     c78:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
     c7c:	81 11       	cpse	r24, r1
     c7e:	0e c0       	rjmp	.+28     	; 0xc9c <progFastBlingBling(unsigned int, unsigned char)+0x30>
     c80:	61 e0       	ldi	r22, 0x01	; 1
     c82:	8f e7       	ldi	r24, 0x7F	; 127
     c84:	9e e0       	ldi	r25, 0x0E	; 14
     c86:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
     c8a:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     c8e:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     c92:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <nextSongPart>
     c96:	81 e0       	ldi	r24, 0x01	; 1
     c98:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
     c9c:	60 e0       	ldi	r22, 0x00	; 0
     c9e:	8f e7       	ldi	r24, 0x7F	; 127
     ca0:	9e e0       	ldi	r25, 0x0E	; 14
     ca2:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
     ca6:	8f ef       	ldi	r24, 0xFF	; 255
     ca8:	80 93 7f 0e 	sts	0x0E7F, r24	; 0x800e7f <FastLED>
     cac:	01 df       	rcall	.-510    	; 0xab0 <getRandomColorValue()>
     cae:	c8 2f       	mov	r28, r24
     cb0:	ff de       	rcall	.-514    	; 0xab0 <getRandomColorValue()>
     cb2:	d8 2f       	mov	r29, r24
     cb4:	fd de       	rcall	.-518    	; 0xab0 <getRandomColorValue()>
     cb6:	18 2f       	mov	r17, r24
     cb8:	26 e1       	ldi	r18, 0x16	; 22
     cba:	31 e0       	ldi	r19, 0x01	; 1
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	50 e0       	ldi	r21, 0x00	; 0
     cc0:	60 e0       	ldi	r22, 0x00	; 0
     cc2:	70 e0       	ldi	r23, 0x00	; 0
     cc4:	cb 01       	movw	r24, r22
     cc6:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
     cca:	fb 01       	movw	r30, r22
     ccc:	ee 0f       	add	r30, r30
     cce:	ff 1f       	adc	r31, r31
     cd0:	e6 0f       	add	r30, r22
     cd2:	f7 1f       	adc	r31, r23
     cd4:	e0 58       	subi	r30, 0x80	; 128
     cd6:	f7 4f       	sbci	r31, 0xF7	; 247
     cd8:	10 83       	st	Z, r17
     cda:	d1 83       	std	Z+1, r29	; 0x01
     cdc:	c2 83       	std	Z+2, r28	; 0x02
     cde:	8f e7       	ldi	r24, 0x7F	; 127
     ce0:	9e e0       	ldi	r25, 0x0E	; 14
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	d1 ce       	rjmp	.-606    	; 0xa8e <CFastLED::show()>

00000cec <progFullColors(unsigned int, unsigned char, unsigned int)>:
     cec:	cf 92       	push	r12
     cee:	df 92       	push	r13
     cf0:	ff 92       	push	r15
     cf2:	0f 93       	push	r16
     cf4:	1f 93       	push	r17
     cf6:	cf 93       	push	r28
     cf8:	df 93       	push	r29
     cfa:	00 d0       	rcall	.+0      	; 0xcfc <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     cfc:	1f 92       	push	r1
     cfe:	cd b7       	in	r28, 0x3d	; 61
     d00:	de b7       	in	r29, 0x3e	; 62
     d02:	6c 01       	movw	r12, r24
     d04:	f6 2e       	mov	r15, r22
     d06:	8a 01       	movw	r16, r20
     d08:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
     d0c:	81 11       	cpse	r24, r1
     d0e:	12 c0       	rjmp	.+36     	; 0xd34 <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     d10:	61 e0       	ldi	r22, 0x01	; 1
     d12:	8f e7       	ldi	r24, 0x7F	; 127
     d14:	9e e0       	ldi	r25, 0x0E	; 14
     d16:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
     d1a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     d1e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     d22:	f0 92 6b 08 	sts	0x086B, r15	; 0x80086b <nextSongPart>
     d26:	81 e0       	ldi	r24, 0x01	; 1
     d28:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
     d2c:	10 93 73 08 	sts	0x0873, r17	; 0x800873 <millisCounterTimer+0x1>
     d30:	00 93 72 08 	sts	0x0872, r16	; 0x800872 <millisCounterTimer>
     d34:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
     d38:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
     d3c:	80 17       	cp	r24, r16
     d3e:	91 07       	cpc	r25, r17
     d40:	78 f1       	brcs	.+94     	; 0xda0 <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     d42:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
     d46:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
     d4a:	b2 de       	rcall	.-668    	; 0xab0 <getRandomColorValue()>
     d4c:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <r>
     d50:	af de       	rcall	.-674    	; 0xab0 <getRandomColorValue()>
     d52:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <g>
     d56:	ac de       	rcall	.-680    	; 0xab0 <getRandomColorValue()>
     d58:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <b>
     d5c:	90 91 2d 08 	lds	r25, 0x082D	; 0x80082d <r>
     d60:	91 11       	cpse	r25, r1
     d62:	0f c0       	rjmp	.+30     	; 0xd82 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     d64:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <g>
     d68:	91 11       	cpse	r25, r1
     d6a:	0b c0       	rjmp	.+22     	; 0xd82 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     d6c:	81 11       	cpse	r24, r1
     d6e:	09 c0       	rjmp	.+18     	; 0xd82 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     d70:	9f de       	rcall	.-706    	; 0xab0 <getRandomColorValue()>
     d72:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <r>
     d76:	9c de       	rcall	.-712    	; 0xab0 <getRandomColorValue()>
     d78:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <g>
     d7c:	99 de       	rcall	.-718    	; 0xab0 <getRandomColorValue()>
     d7e:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <b>
     d82:	80 91 2b 08 	lds	r24, 0x082B	; 0x80082b <b>
     d86:	90 91 2c 08 	lds	r25, 0x082C	; 0x80082c <g>
     d8a:	20 91 2d 08 	lds	r18, 0x082D	; 0x80082d <r>
     d8e:	29 83       	std	Y+1, r18	; 0x01
     d90:	9a 83       	std	Y+2, r25	; 0x02
     d92:	8b 83       	std	Y+3, r24	; 0x03
     d94:	be 01       	movw	r22, r28
     d96:	6f 5f       	subi	r22, 0xFF	; 255
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	8f e7       	ldi	r24, 0x7F	; 127
     d9c:	9e e0       	ldi	r25, 0x0E	; 14
     d9e:	7b de       	rcall	.-778    	; 0xa96 <CFastLED::showColor(CRGB const&)>
     da0:	0f 90       	pop	r0
     da2:	0f 90       	pop	r0
     da4:	0f 90       	pop	r0
     da6:	df 91       	pop	r29
     da8:	cf 91       	pop	r28
     daa:	1f 91       	pop	r17
     dac:	0f 91       	pop	r16
     dae:	ff 90       	pop	r15
     db0:	df 90       	pop	r13
     db2:	cf 90       	pop	r12
     db4:	08 95       	ret

00000db6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     db6:	af 92       	push	r10
     db8:	bf 92       	push	r11
     dba:	cf 92       	push	r12
     dbc:	df 92       	push	r13
     dbe:	ef 92       	push	r14
     dc0:	ff 92       	push	r15
     dc2:	0f 93       	push	r16
     dc4:	1f 93       	push	r17
     dc6:	cf 93       	push	r28
     dc8:	df 93       	push	r29
     dca:	00 d0       	rcall	.+0      	; 0xdcc <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     dcc:	1f 92       	push	r1
     dce:	cd b7       	in	r28, 0x3d	; 61
     dd0:	de b7       	in	r29, 0x3e	; 62
     dd2:	5c 01       	movw	r10, r24
     dd4:	f6 2e       	mov	r15, r22
     dd6:	6a 01       	movw	r12, r20
     dd8:	12 2f       	mov	r17, r18
     dda:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
     dde:	81 11       	cpse	r24, r1
     de0:	12 c0       	rjmp	.+36     	; 0xe06 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     de2:	61 e0       	ldi	r22, 0x01	; 1
     de4:	8f e7       	ldi	r24, 0x7F	; 127
     de6:	9e e0       	ldi	r25, 0x0E	; 14
     de8:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
     dec:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     df0:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     df4:	f0 92 6b 08 	sts	0x086B, r15	; 0x80086b <nextSongPart>
     df8:	81 e0       	ldi	r24, 0x01	; 1
     dfa:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
     dfe:	d0 92 73 08 	sts	0x0873, r13	; 0x800873 <millisCounterTimer+0x1>
     e02:	c0 92 72 08 	sts	0x0872, r12	; 0x800872 <millisCounterTimer>
     e06:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
     e0a:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
     e0e:	8c 15       	cp	r24, r12
     e10:	9d 05       	cpc	r25, r13
     e12:	98 f0       	brcs	.+38     	; 0xe3a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     e14:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
     e18:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
     e1c:	80 91 75 08 	lds	r24, 0x0875	; 0x800875 <progStroboIsBlack>
     e20:	88 23       	and	r24, r24
     e22:	c9 f0       	breq	.+50     	; 0xe56 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     e24:	19 83       	std	Y+1, r17	; 0x01
     e26:	0a 83       	std	Y+2, r16	; 0x02
     e28:	eb 82       	std	Y+3, r14	; 0x03
     e2a:	be 01       	movw	r22, r28
     e2c:	6f 5f       	subi	r22, 0xFF	; 255
     e2e:	7f 4f       	sbci	r23, 0xFF	; 255
     e30:	8f e7       	ldi	r24, 0x7F	; 127
     e32:	9e e0       	ldi	r25, 0x0E	; 14
     e34:	30 de       	rcall	.-928    	; 0xa96 <CFastLED::showColor(CRGB const&)>
     e36:	10 92 75 08 	sts	0x0875, r1	; 0x800875 <progStroboIsBlack>
     e3a:	0f 90       	pop	r0
     e3c:	0f 90       	pop	r0
     e3e:	0f 90       	pop	r0
     e40:	df 91       	pop	r29
     e42:	cf 91       	pop	r28
     e44:	1f 91       	pop	r17
     e46:	0f 91       	pop	r16
     e48:	ff 90       	pop	r15
     e4a:	ef 90       	pop	r14
     e4c:	df 90       	pop	r13
     e4e:	cf 90       	pop	r12
     e50:	bf 90       	pop	r11
     e52:	af 90       	pop	r10
     e54:	08 95       	ret
     e56:	19 82       	std	Y+1, r1	; 0x01
     e58:	1a 82       	std	Y+2, r1	; 0x02
     e5a:	1b 82       	std	Y+3, r1	; 0x03
     e5c:	be 01       	movw	r22, r28
     e5e:	6f 5f       	subi	r22, 0xFF	; 255
     e60:	7f 4f       	sbci	r23, 0xFF	; 255
     e62:	8f e7       	ldi	r24, 0x7F	; 127
     e64:	9e e0       	ldi	r25, 0x0E	; 14
     e66:	17 de       	rcall	.-978    	; 0xa96 <CFastLED::showColor(CRGB const&)>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	80 93 75 08 	sts	0x0875, r24	; 0x800875 <progStroboIsBlack>
     e6e:	e5 cf       	rjmp	.-54     	; 0xe3a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

00000e70 <progMatrixScanner(unsigned int, unsigned char)>:
     e70:	ef 92       	push	r14
     e72:	ff 92       	push	r15
     e74:	0f 93       	push	r16
     e76:	1f 93       	push	r17
     e78:	cf 93       	push	r28
     e7a:	8c 01       	movw	r16, r24
     e7c:	c6 2f       	mov	r28, r22
     e7e:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
     e82:	81 11       	cpse	r24, r1
     e84:	0e c0       	rjmp	.+28     	; 0xea2 <progMatrixScanner(unsigned int, unsigned char)+0x32>
     e86:	61 e0       	ldi	r22, 0x01	; 1
     e88:	8f e7       	ldi	r24, 0x7F	; 127
     e8a:	9e e0       	ldi	r25, 0x0E	; 14
     e8c:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
     e90:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     e94:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     e98:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <nextSongPart>
     e9c:	81 e0       	ldi	r24, 0x01	; 1
     e9e:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
     ea2:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <zaehler>
     ea6:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <zaehler+0x1>
     eaa:	9b 01       	movw	r18, r22
     eac:	2f 5f       	subi	r18, 0xFF	; 255
     eae:	3f 4f       	sbci	r19, 0xFF	; 255
     eb0:	40 91 62 08 	lds	r20, 0x0862	; 0x800862 <scannerGoesBack>
     eb4:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
     eb8:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
     ebc:	41 11       	cpse	r20, r1
     ebe:	52 c0       	rjmp	.+164    	; 0xf64 <progMatrixScanner(unsigned int, unsigned char)+0xf4>
     ec0:	30 93 64 08 	sts	0x0864, r19	; 0x800864 <zaehler+0x1>
     ec4:	20 93 63 08 	sts	0x0863, r18	; 0x800863 <zaehler>
     ec8:	27 31       	cpi	r18, 0x17	; 23
     eca:	31 05       	cpc	r19, r1
     ecc:	1c f0       	brlt	.+6      	; 0xed4 <progMatrixScanner(unsigned int, unsigned char)+0x64>
     ece:	21 e0       	ldi	r18, 0x01	; 1
     ed0:	20 93 62 08 	sts	0x0862, r18	; 0x800862 <scannerGoesBack>
     ed4:	9b 01       	movw	r18, r22
     ed6:	2d 5f       	subi	r18, 0xFD	; 253
     ed8:	3f 4f       	sbci	r19, 0xFF	; 255
     eda:	dc 01       	movw	r26, r24
     edc:	ed 91       	ld	r30, X+
     ede:	fc 91       	ld	r31, X
     ee0:	00 a0       	ldd	r0, Z+32	; 0x20
     ee2:	f1 a1       	ldd	r31, Z+33	; 0x21
     ee4:	e0 2d       	mov	r30, r0
     ee6:	e1 2c       	mov	r14, r1
     ee8:	58 ef       	ldi	r21, 0xF8	; 248
     eea:	f5 2e       	mov	r15, r21
     eec:	07 e1       	ldi	r16, 0x17	; 23
     eee:	10 e0       	ldi	r17, 0x00	; 0
     ef0:	50 e0       	ldi	r21, 0x00	; 0
     ef2:	40 e0       	ldi	r20, 0x00	; 0
     ef4:	09 95       	icall
     ef6:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
     efa:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
     efe:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <zaehler>
     f02:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <zaehler+0x1>
     f06:	9b 01       	movw	r18, r22
     f08:	2f 5f       	subi	r18, 0xFF	; 255
     f0a:	3f 4f       	sbci	r19, 0xFF	; 255
     f0c:	dc 01       	movw	r26, r24
     f0e:	ed 91       	ld	r30, X+
     f10:	fc 91       	ld	r31, X
     f12:	00 a0       	ldd	r0, Z+32	; 0x20
     f14:	f1 a1       	ldd	r31, Z+33	; 0x21
     f16:	e0 2d       	mov	r30, r0
     f18:	ee 24       	eor	r14, r14
     f1a:	ea 94       	dec	r14
     f1c:	fe 2c       	mov	r15, r14
     f1e:	50 e0       	ldi	r21, 0x00	; 0
     f20:	40 e0       	ldi	r20, 0x00	; 0
     f22:	09 95       	icall
     f24:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
     f28:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
     f2c:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <zaehler>
     f30:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <zaehler+0x1>
     f34:	9b 01       	movw	r18, r22
     f36:	22 50       	subi	r18, 0x02	; 2
     f38:	31 09       	sbc	r19, r1
     f3a:	65 50       	subi	r22, 0x05	; 5
     f3c:	71 09       	sbc	r23, r1
     f3e:	dc 01       	movw	r26, r24
     f40:	ed 91       	ld	r30, X+
     f42:	fc 91       	ld	r31, X
     f44:	00 a0       	ldd	r0, Z+32	; 0x20
     f46:	f1 a1       	ldd	r31, Z+33	; 0x21
     f48:	e0 2d       	mov	r30, r0
     f4a:	f1 2c       	mov	r15, r1
     f4c:	e1 2c       	mov	r14, r1
     f4e:	50 e0       	ldi	r21, 0x00	; 0
     f50:	40 e0       	ldi	r20, 0x00	; 0
     f52:	09 95       	icall
     f54:	8f e7       	ldi	r24, 0x7F	; 127
     f56:	9e e0       	ldi	r25, 0x0E	; 14
     f58:	cf 91       	pop	r28
     f5a:	1f 91       	pop	r17
     f5c:	0f 91       	pop	r16
     f5e:	ff 90       	pop	r15
     f60:	ef 90       	pop	r14
     f62:	95 cd       	rjmp	.-1238   	; 0xa8e <CFastLED::show()>
     f64:	61 50       	subi	r22, 0x01	; 1
     f66:	71 09       	sbc	r23, r1
     f68:	70 93 64 08 	sts	0x0864, r23	; 0x800864 <zaehler+0x1>
     f6c:	60 93 63 08 	sts	0x0863, r22	; 0x800863 <zaehler>
     f70:	6e 3f       	cpi	r22, 0xFE	; 254
     f72:	bf ef       	ldi	r27, 0xFF	; 255
     f74:	7b 07       	cpc	r23, r27
     f76:	14 f4       	brge	.+4      	; 0xf7c <progMatrixScanner(unsigned int, unsigned char)+0x10c>
     f78:	10 92 62 08 	sts	0x0862, r1	; 0x800862 <scannerGoesBack>
     f7c:	dc 01       	movw	r26, r24
     f7e:	ed 91       	ld	r30, X+
     f80:	fc 91       	ld	r31, X
     f82:	00 a0       	ldd	r0, Z+32	; 0x20
     f84:	f1 a1       	ldd	r31, Z+33	; 0x21
     f86:	e0 2d       	mov	r30, r0
     f88:	e1 2c       	mov	r14, r1
     f8a:	48 ef       	ldi	r20, 0xF8	; 248
     f8c:	f4 2e       	mov	r15, r20
     f8e:	07 e1       	ldi	r16, 0x17	; 23
     f90:	10 e0       	ldi	r17, 0x00	; 0
     f92:	50 e0       	ldi	r21, 0x00	; 0
     f94:	40 e0       	ldi	r20, 0x00	; 0
     f96:	09 95       	icall
     f98:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
     f9c:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
     fa0:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <zaehler>
     fa4:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <zaehler+0x1>
     fa8:	9b 01       	movw	r18, r22
     faa:	2c 5f       	subi	r18, 0xFC	; 252
     fac:	3f 4f       	sbci	r19, 0xFF	; 255
     fae:	6e 5f       	subi	r22, 0xFE	; 254
     fb0:	7f 4f       	sbci	r23, 0xFF	; 255
     fb2:	c5 cf       	rjmp	.-118    	; 0xf3e <progMatrixScanner(unsigned int, unsigned char)+0xce>

00000fb4 <progStern(unsigned int, int, unsigned char)>:
     fb4:	8f 92       	push	r8
     fb6:	9f 92       	push	r9
     fb8:	af 92       	push	r10
     fba:	bf 92       	push	r11
     fbc:	cf 92       	push	r12
     fbe:	df 92       	push	r13
     fc0:	ef 92       	push	r14
     fc2:	ff 92       	push	r15
     fc4:	0f 93       	push	r16
     fc6:	1f 93       	push	r17
     fc8:	cf 93       	push	r28
     fca:	df 93       	push	r29
     fcc:	7c 01       	movw	r14, r24
     fce:	eb 01       	movw	r28, r22
     fd0:	14 2f       	mov	r17, r20
     fd2:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
     fd6:	81 11       	cpse	r24, r1
     fd8:	18 c0       	rjmp	.+48     	; 0x100a <progStern(unsigned int, int, unsigned char)+0x56>
     fda:	61 e0       	ldi	r22, 0x01	; 1
     fdc:	8f e7       	ldi	r24, 0x7F	; 127
     fde:	9e e0       	ldi	r25, 0x0E	; 14
     fe0:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
     fe4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
     fe8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
     fec:	10 93 6b 08 	sts	0x086B, r17	; 0x80086b <nextSongPart>
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
     ff6:	75 dd       	rcall	.-1302   	; 0xae2 <getRandomColor()>
     ff8:	90 93 7e 08 	sts	0x087E, r25	; 0x80087e <col1+0x1>
     ffc:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <col1>
    1000:	70 dd       	rcall	.-1312   	; 0xae2 <getRandomColor()>
    1002:	90 93 7c 08 	sts	0x087C, r25	; 0x80087c <col2+0x1>
    1006:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <col2>
    100a:	1c 16       	cp	r1, r28
    100c:	1d 06       	cpc	r1, r29
    100e:	ac f4       	brge	.+42     	; 0x103a <progStern(unsigned int, int, unsigned char)+0x86>
    1010:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
    1014:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
    1018:	8c 17       	cp	r24, r28
    101a:	9d 07       	cpc	r25, r29
    101c:	70 f0       	brcs	.+28     	; 0x103a <progStern(unsigned int, int, unsigned char)+0x86>
    101e:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
    1022:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
    1026:	5d dd       	rcall	.-1350   	; 0xae2 <getRandomColor()>
    1028:	90 93 7e 08 	sts	0x087E, r25	; 0x80087e <col1+0x1>
    102c:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <col1>
    1030:	58 dd       	rcall	.-1360   	; 0xae2 <getRandomColor()>
    1032:	90 93 7c 08 	sts	0x087C, r25	; 0x80087c <col2+0x1>
    1036:	80 93 7b 08 	sts	0x087B, r24	; 0x80087b <col2>
    103a:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    103e:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    1042:	01 96       	adiw	r24, 0x01	; 1
    1044:	8a 30       	cpi	r24, 0x0A	; 10
    1046:	91 05       	cpc	r25, r1
    1048:	0c f0       	brlt	.+2      	; 0x104c <progStern(unsigned int, int, unsigned char)+0x98>
    104a:	fc c0       	rjmp	.+504    	; 0x1244 <progStern(unsigned int, int, unsigned char)+0x290>
    104c:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    1050:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    1054:	60 e0       	ldi	r22, 0x00	; 0
    1056:	8f e7       	ldi	r24, 0x7F	; 127
    1058:	9e e0       	ldi	r25, 0x0E	; 14
    105a:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    105e:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1062:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1066:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    106a:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    106e:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <col1>
    1072:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <col1+0x1>
    1076:	9a 01       	movw	r18, r20
    1078:	26 5f       	subi	r18, 0xF6	; 246
    107a:	3f 4f       	sbci	r19, 0xFF	; 255
    107c:	6a e0       	ldi	r22, 0x0A	; 10
    107e:	a6 2e       	mov	r10, r22
    1080:	b1 2c       	mov	r11, r1
    1082:	b5 01       	movw	r22, r10
    1084:	64 1b       	sub	r22, r20
    1086:	75 0b       	sbc	r23, r21
    1088:	dc 01       	movw	r26, r24
    108a:	ed 91       	ld	r30, X+
    108c:	fc 91       	ld	r31, X
    108e:	04 a0       	ldd	r0, Z+36	; 0x24
    1090:	f5 a1       	ldd	r31, Z+37	; 0x25
    1092:	e0 2d       	mov	r30, r0
    1094:	06 e1       	ldi	r16, 0x16	; 22
    1096:	10 e0       	ldi	r17, 0x00	; 0
    1098:	50 e0       	ldi	r21, 0x00	; 0
    109a:	40 e0       	ldi	r20, 0x00	; 0
    109c:	09 95       	icall
    109e:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    10a2:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    10a6:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    10aa:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    10ae:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col2>
    10b2:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col2+0x1>
    10b6:	9a 01       	movw	r18, r20
    10b8:	25 5f       	subi	r18, 0xF5	; 245
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	7b e0       	ldi	r23, 0x0B	; 11
    10be:	87 2e       	mov	r8, r23
    10c0:	91 2c       	mov	r9, r1
    10c2:	b4 01       	movw	r22, r8
    10c4:	64 1b       	sub	r22, r20
    10c6:	75 0b       	sbc	r23, r21
    10c8:	dc 01       	movw	r26, r24
    10ca:	ed 91       	ld	r30, X+
    10cc:	fc 91       	ld	r31, X
    10ce:	04 a0       	ldd	r0, Z+36	; 0x24
    10d0:	f5 a1       	ldd	r31, Z+37	; 0x25
    10d2:	e0 2d       	mov	r30, r0
    10d4:	50 e0       	ldi	r21, 0x00	; 0
    10d6:	40 e0       	ldi	r20, 0x00	; 0
    10d8:	09 95       	icall
    10da:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    10de:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    10e2:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    10e6:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    10ea:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <col1>
    10ee:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <col1+0x1>
    10f2:	e6 e1       	ldi	r30, 0x16	; 22
    10f4:	ce 2e       	mov	r12, r30
    10f6:	d1 2c       	mov	r13, r1
    10f8:	04 1b       	sub	r16, r20
    10fa:	15 0b       	sbc	r17, r21
    10fc:	4f 5f       	subi	r20, 0xFF	; 255
    10fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1100:	dc 01       	movw	r26, r24
    1102:	ed 91       	ld	r30, X+
    1104:	fc 91       	ld	r31, X
    1106:	04 a0       	ldd	r0, Z+36	; 0x24
    1108:	f5 a1       	ldd	r31, Z+37	; 0x25
    110a:	e0 2d       	mov	r30, r0
    110c:	25 e1       	ldi	r18, 0x15	; 21
    110e:	30 e0       	ldi	r19, 0x00	; 0
    1110:	70 e0       	ldi	r23, 0x00	; 0
    1112:	60 e0       	ldi	r22, 0x00	; 0
    1114:	09 95       	icall
    1116:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    111a:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    111e:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    1122:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    1126:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col2>
    112a:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col2+0x1>
    112e:	c5 e1       	ldi	r28, 0x15	; 21
    1130:	d0 e0       	ldi	r29, 0x00	; 0
    1132:	8e 01       	movw	r16, r28
    1134:	04 1b       	sub	r16, r20
    1136:	15 0b       	sbc	r17, r21
    1138:	dc 01       	movw	r26, r24
    113a:	ed 91       	ld	r30, X+
    113c:	fc 91       	ld	r31, X
    113e:	04 a0       	ldd	r0, Z+36	; 0x24
    1140:	f5 a1       	ldd	r31, Z+37	; 0x25
    1142:	e0 2d       	mov	r30, r0
    1144:	25 e1       	ldi	r18, 0x15	; 21
    1146:	30 e0       	ldi	r19, 0x00	; 0
    1148:	70 e0       	ldi	r23, 0x00	; 0
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	09 95       	icall
    114e:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1152:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1156:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    115a:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    115e:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <col1>
    1162:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <col1+0x1>
    1166:	84 01       	movw	r16, r8
    1168:	04 1b       	sub	r16, r20
    116a:	15 0b       	sbc	r17, r21
    116c:	45 5f       	subi	r20, 0xF5	; 245
    116e:	5f 4f       	sbci	r21, 0xFF	; 255
    1170:	dc 01       	movw	r26, r24
    1172:	ed 91       	ld	r30, X+
    1174:	fc 91       	ld	r31, X
    1176:	04 a0       	ldd	r0, Z+36	; 0x24
    1178:	f5 a1       	ldd	r31, Z+37	; 0x25
    117a:	e0 2d       	mov	r30, r0
    117c:	25 e1       	ldi	r18, 0x15	; 21
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	70 e0       	ldi	r23, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	09 95       	icall
    1186:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    118a:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    118e:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    1192:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    1196:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col2>
    119a:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col2+0x1>
    119e:	85 01       	movw	r16, r10
    11a0:	04 1b       	sub	r16, r20
    11a2:	15 0b       	sbc	r17, r21
    11a4:	46 5f       	subi	r20, 0xF6	; 246
    11a6:	5f 4f       	sbci	r21, 0xFF	; 255
    11a8:	dc 01       	movw	r26, r24
    11aa:	ed 91       	ld	r30, X+
    11ac:	fc 91       	ld	r31, X
    11ae:	04 a0       	ldd	r0, Z+36	; 0x24
    11b0:	f5 a1       	ldd	r31, Z+37	; 0x25
    11b2:	e0 2d       	mov	r30, r0
    11b4:	25 e1       	ldi	r18, 0x15	; 21
    11b6:	30 e0       	ldi	r19, 0x00	; 0
    11b8:	70 e0       	ldi	r23, 0x00	; 0
    11ba:	60 e0       	ldi	r22, 0x00	; 0
    11bc:	09 95       	icall
    11be:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    11c2:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    11c6:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <zaehler>
    11ca:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <zaehler+0x1>
    11ce:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <col1>
    11d2:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <col1+0x1>
    11d6:	96 01       	movw	r18, r12
    11d8:	26 1b       	sub	r18, r22
    11da:	37 0b       	sbc	r19, r23
    11dc:	dc 01       	movw	r26, r24
    11de:	ed 91       	ld	r30, X+
    11e0:	fc 91       	ld	r31, X
    11e2:	04 a0       	ldd	r0, Z+36	; 0x24
    11e4:	f5 a1       	ldd	r31, Z+37	; 0x25
    11e6:	e0 2d       	mov	r30, r0
    11e8:	10 e0       	ldi	r17, 0x00	; 0
    11ea:	00 e0       	ldi	r16, 0x00	; 0
    11ec:	46 e1       	ldi	r20, 0x16	; 22
    11ee:	50 e0       	ldi	r21, 0x00	; 0
    11f0:	09 95       	icall
    11f2:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    11f6:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    11fa:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <zaehler>
    11fe:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <zaehler+0x1>
    1202:	e0 90 7b 08 	lds	r14, 0x087B	; 0x80087b <col2>
    1206:	f0 90 7c 08 	lds	r15, 0x087C	; 0x80087c <col2+0x1>
    120a:	9e 01       	movw	r18, r28
    120c:	26 1b       	sub	r18, r22
    120e:	37 0b       	sbc	r19, r23
    1210:	61 50       	subi	r22, 0x01	; 1
    1212:	71 09       	sbc	r23, r1
    1214:	dc 01       	movw	r26, r24
    1216:	ed 91       	ld	r30, X+
    1218:	fc 91       	ld	r31, X
    121a:	04 a0       	ldd	r0, Z+36	; 0x24
    121c:	f5 a1       	ldd	r31, Z+37	; 0x25
    121e:	e0 2d       	mov	r30, r0
    1220:	46 e1       	ldi	r20, 0x16	; 22
    1222:	50 e0       	ldi	r21, 0x00	; 0
    1224:	09 95       	icall
    1226:	8f e7       	ldi	r24, 0x7F	; 127
    1228:	9e e0       	ldi	r25, 0x0E	; 14
    122a:	df 91       	pop	r29
    122c:	cf 91       	pop	r28
    122e:	1f 91       	pop	r17
    1230:	0f 91       	pop	r16
    1232:	ff 90       	pop	r15
    1234:	ef 90       	pop	r14
    1236:	df 90       	pop	r13
    1238:	cf 90       	pop	r12
    123a:	bf 90       	pop	r11
    123c:	af 90       	pop	r10
    123e:	9f 90       	pop	r9
    1240:	8f 90       	pop	r8
    1242:	25 cc       	rjmp	.-1974   	; 0xa8e <CFastLED::show()>
    1244:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <zaehler+0x1>
    1248:	10 92 63 08 	sts	0x0863, r1	; 0x800863 <zaehler>
    124c:	03 cf       	rjmp	.-506    	; 0x1054 <progStern(unsigned int, int, unsigned char)+0xa0>

0000124e <progStern(unsigned int, unsigned char)>:
    124e:	46 2f       	mov	r20, r22
    1250:	70 e0       	ldi	r23, 0x00	; 0
    1252:	60 e0       	ldi	r22, 0x00	; 0
    1254:	af ce       	rjmp	.-674    	; 0xfb4 <progStern(unsigned int, int, unsigned char)>

00001256 <progBlack(unsigned int, unsigned char)>:
    1256:	0f 93       	push	r16
    1258:	1f 93       	push	r17
    125a:	cf 93       	push	r28
    125c:	8c 01       	movw	r16, r24
    125e:	c6 2f       	mov	r28, r22
    1260:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1264:	81 11       	cpse	r24, r1
    1266:	0e c0       	rjmp	.+28     	; 0x1284 <progBlack(unsigned int, unsigned char)+0x2e>
    1268:	61 e0       	ldi	r22, 0x01	; 1
    126a:	8f e7       	ldi	r24, 0x7F	; 127
    126c:	9e e0       	ldi	r25, 0x0E	; 14
    126e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    1272:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1276:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    127a:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <nextSongPart>
    127e:	81 e0       	ldi	r24, 0x01	; 1
    1280:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	8f e7       	ldi	r24, 0x7F	; 127
    1288:	9e e0       	ldi	r25, 0x0E	; 14
    128a:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    128e:	8f e7       	ldi	r24, 0x7F	; 127
    1290:	9e e0       	ldi	r25, 0x0E	; 14
    1292:	cf 91       	pop	r28
    1294:	1f 91       	pop	r17
    1296:	0f 91       	pop	r16
    1298:	fa cb       	rjmp	.-2060   	; 0xa8e <CFastLED::show()>

0000129a <progCircles(unsigned int, unsigned char, unsigned int)>:
    129a:	8f 92       	push	r8
    129c:	9f 92       	push	r9
    129e:	af 92       	push	r10
    12a0:	bf 92       	push	r11
    12a2:	cf 92       	push	r12
    12a4:	df 92       	push	r13
    12a6:	ef 92       	push	r14
    12a8:	ff 92       	push	r15
    12aa:	0f 93       	push	r16
    12ac:	1f 93       	push	r17
    12ae:	cf 93       	push	r28
    12b0:	df 93       	push	r29
    12b2:	7c 01       	movw	r14, r24
    12b4:	16 2f       	mov	r17, r22
    12b6:	ea 01       	movw	r28, r20
    12b8:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    12bc:	81 11       	cpse	r24, r1
    12be:	12 c0       	rjmp	.+36     	; 0x12e4 <progCircles(unsigned int, unsigned char, unsigned int)+0x4a>
    12c0:	61 e0       	ldi	r22, 0x01	; 1
    12c2:	8f e7       	ldi	r24, 0x7F	; 127
    12c4:	9e e0       	ldi	r25, 0x0E	; 14
    12c6:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    12ca:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    12ce:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    12d2:	10 93 6b 08 	sts	0x086B, r17	; 0x80086b <nextSongPart>
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    12dc:	d0 93 73 08 	sts	0x0873, r29	; 0x800873 <millisCounterTimer+0x1>
    12e0:	c0 93 72 08 	sts	0x0872, r28	; 0x800872 <millisCounterTimer>
    12e4:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
    12e8:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
    12ec:	8c 17       	cp	r24, r28
    12ee:	9d 07       	cpc	r25, r29
    12f0:	e0 f1       	brcs	.+120    	; 0x136a <progCircles(unsigned int, unsigned char, unsigned int)+0xd0>
    12f2:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
    12f6:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
    12fa:	c0 91 6e 0e 	lds	r28, 0x0E6E	; 0x800e6e <matrix>
    12fe:	d0 91 6f 0e 	lds	r29, 0x0E6F	; 0x800e6f <matrix+0x1>
    1302:	09 dc       	rcall	.-2030   	; 0xb16 <getRandomColorIncludingBlack()>
    1304:	8c 01       	movw	r16, r24
    1306:	2a e0       	ldi	r18, 0x0A	; 10
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	40 e0       	ldi	r20, 0x00	; 0
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	63 e0       	ldi	r22, 0x03	; 3
    1310:	70 e0       	ldi	r23, 0x00	; 0
    1312:	80 e0       	ldi	r24, 0x00	; 0
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
    131a:	4b 01       	movw	r8, r22
    131c:	26 e1       	ldi	r18, 0x16	; 22
    131e:	30 e0       	ldi	r19, 0x00	; 0
    1320:	40 e0       	ldi	r20, 0x00	; 0
    1322:	50 e0       	ldi	r21, 0x00	; 0
    1324:	60 e0       	ldi	r22, 0x00	; 0
    1326:	70 e0       	ldi	r23, 0x00	; 0
    1328:	cb 01       	movw	r24, r22
    132a:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
    132e:	6b 01       	movw	r12, r22
    1330:	25 e1       	ldi	r18, 0x15	; 21
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e0       	ldi	r20, 0x00	; 0
    1336:	50 e0       	ldi	r21, 0x00	; 0
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	cb 01       	movw	r24, r22
    133e:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
    1342:	94 01       	movw	r18, r8
    1344:	a6 01       	movw	r20, r12
    1346:	ce 01       	movw	r24, r28
    1348:	0e 94 74 1d 	call	0x3ae8	; 0x3ae8 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    134c:	8f e7       	ldi	r24, 0x7F	; 127
    134e:	9e e0       	ldi	r25, 0x0E	; 14
    1350:	df 91       	pop	r29
    1352:	cf 91       	pop	r28
    1354:	1f 91       	pop	r17
    1356:	0f 91       	pop	r16
    1358:	ff 90       	pop	r15
    135a:	ef 90       	pop	r14
    135c:	df 90       	pop	r13
    135e:	cf 90       	pop	r12
    1360:	bf 90       	pop	r11
    1362:	af 90       	pop	r10
    1364:	9f 90       	pop	r9
    1366:	8f 90       	pop	r8
    1368:	92 cb       	rjmp	.-2268   	; 0xa8e <CFastLED::show()>
    136a:	df 91       	pop	r29
    136c:	cf 91       	pop	r28
    136e:	1f 91       	pop	r17
    1370:	0f 91       	pop	r16
    1372:	ff 90       	pop	r15
    1374:	ef 90       	pop	r14
    1376:	df 90       	pop	r13
    1378:	cf 90       	pop	r12
    137a:	bf 90       	pop	r11
    137c:	af 90       	pop	r10
    137e:	9f 90       	pop	r9
    1380:	8f 90       	pop	r8
    1382:	08 95       	ret

00001384 <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    1384:	cf 92       	push	r12
    1386:	df 92       	push	r13
    1388:	ef 92       	push	r14
    138a:	ff 92       	push	r15
    138c:	0f 93       	push	r16
    138e:	1f 93       	push	r17
    1390:	cf 93       	push	r28
    1392:	df 93       	push	r29
    1394:	6c 01       	movw	r12, r24
    1396:	f6 2e       	mov	r15, r22
    1398:	ea 01       	movw	r28, r20
    139a:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    139e:	81 11       	cpse	r24, r1
    13a0:	12 c0       	rjmp	.+36     	; 0x13c6 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x42>
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	8f e7       	ldi	r24, 0x7F	; 127
    13a6:	9e e0       	ldi	r25, 0x0E	; 14
    13a8:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    13ac:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    13b0:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    13b4:	f0 92 6b 08 	sts	0x086B, r15	; 0x80086b <nextSongPart>
    13b8:	81 e0       	ldi	r24, 0x01	; 1
    13ba:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    13be:	d0 93 73 08 	sts	0x0873, r29	; 0x800873 <millisCounterTimer+0x1>
    13c2:	c0 93 72 08 	sts	0x0872, r28	; 0x800872 <millisCounterTimer>
    13c6:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
    13ca:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
    13ce:	8c 17       	cp	r24, r28
    13d0:	9d 07       	cpc	r25, r29
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x52>
    13d4:	72 c0       	rjmp	.+228    	; 0x14ba <progRandomLines(unsigned int, unsigned char, unsigned int)+0x136>
    13d6:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
    13da:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
    13de:	25 e1       	ldi	r18, 0x15	; 21
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	40 e0       	ldi	r20, 0x00	; 0
    13e4:	50 e0       	ldi	r21, 0x00	; 0
    13e6:	60 e0       	ldi	r22, 0x00	; 0
    13e8:	70 e0       	ldi	r23, 0x00	; 0
    13ea:	cb 01       	movw	r24, r22
    13ec:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
    13f0:	c6 2f       	mov	r28, r22
    13f2:	25 e1       	ldi	r18, 0x15	; 21
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e0       	ldi	r20, 0x00	; 0
    13f8:	50 e0       	ldi	r21, 0x00	; 0
    13fa:	60 e0       	ldi	r22, 0x00	; 0
    13fc:	70 e0       	ldi	r23, 0x00	; 0
    13fe:	cb 01       	movw	r24, r22
    1400:	0e 94 83 31 	call	0x6306	; 0x6306 <random(long, long)>
    1404:	c6 2e       	mov	r12, r22
    1406:	6d db       	rcall	.-2342   	; 0xae2 <getRandomColor()>
    1408:	90 93 7e 08 	sts	0x087E, r25	; 0x80087e <col1+0x1>
    140c:	80 93 7d 08 	sts	0x087D, r24	; 0x80087d <col1>
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	8f e7       	ldi	r24, 0x7F	; 127
    1414:	9e e0       	ldi	r25, 0x0E	; 14
    1416:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    141a:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    141e:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1422:	d1 2c       	mov	r13, r1
    1424:	d0 e0       	ldi	r29, 0x00	; 0
    1426:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <col1>
    142a:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <col1+0x1>
    142e:	96 01       	movw	r18, r12
    1430:	21 50       	subi	r18, 0x01	; 1
    1432:	31 09       	sbc	r19, r1
    1434:	be 01       	movw	r22, r28
    1436:	61 50       	subi	r22, 0x01	; 1
    1438:	71 09       	sbc	r23, r1
    143a:	dc 01       	movw	r26, r24
    143c:	ed 91       	ld	r30, X+
    143e:	fc 91       	ld	r31, X
    1440:	04 a0       	ldd	r0, Z+36	; 0x24
    1442:	f5 a1       	ldd	r31, Z+37	; 0x25
    1444:	e0 2d       	mov	r30, r0
    1446:	06 e1       	ldi	r16, 0x16	; 22
    1448:	10 e0       	ldi	r17, 0x00	; 0
    144a:	50 e0       	ldi	r21, 0x00	; 0
    144c:	40 e0       	ldi	r20, 0x00	; 0
    144e:	09 95       	icall
    1450:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1454:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1458:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <col1>
    145c:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <col1+0x1>
    1460:	dc 01       	movw	r26, r24
    1462:	ed 91       	ld	r30, X+
    1464:	fc 91       	ld	r31, X
    1466:	04 a0       	ldd	r0, Z+36	; 0x24
    1468:	f5 a1       	ldd	r31, Z+37	; 0x25
    146a:	e0 2d       	mov	r30, r0
    146c:	96 01       	movw	r18, r12
    146e:	50 e0       	ldi	r21, 0x00	; 0
    1470:	40 e0       	ldi	r20, 0x00	; 0
    1472:	be 01       	movw	r22, r28
    1474:	09 95       	icall
    1476:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    147a:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    147e:	e0 90 7d 08 	lds	r14, 0x087D	; 0x80087d <col1>
    1482:	f0 90 7e 08 	lds	r15, 0x087E	; 0x80087e <col1+0x1>
    1486:	96 01       	movw	r18, r12
    1488:	2f 5f       	subi	r18, 0xFF	; 255
    148a:	3f 4f       	sbci	r19, 0xFF	; 255
    148c:	be 01       	movw	r22, r28
    148e:	6f 5f       	subi	r22, 0xFF	; 255
    1490:	7f 4f       	sbci	r23, 0xFF	; 255
    1492:	dc 01       	movw	r26, r24
    1494:	ed 91       	ld	r30, X+
    1496:	fc 91       	ld	r31, X
    1498:	04 a0       	ldd	r0, Z+36	; 0x24
    149a:	f5 a1       	ldd	r31, Z+37	; 0x25
    149c:	e0 2d       	mov	r30, r0
    149e:	50 e0       	ldi	r21, 0x00	; 0
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	09 95       	icall
    14a4:	8f e7       	ldi	r24, 0x7F	; 127
    14a6:	9e e0       	ldi	r25, 0x0E	; 14
    14a8:	df 91       	pop	r29
    14aa:	cf 91       	pop	r28
    14ac:	1f 91       	pop	r17
    14ae:	0f 91       	pop	r16
    14b0:	ff 90       	pop	r15
    14b2:	ef 90       	pop	r14
    14b4:	df 90       	pop	r13
    14b6:	cf 90       	pop	r12
    14b8:	ea ca       	rjmp	.-2604   	; 0xa8e <CFastLED::show()>
    14ba:	df 91       	pop	r29
    14bc:	cf 91       	pop	r28
    14be:	1f 91       	pop	r17
    14c0:	0f 91       	pop	r16
    14c2:	ff 90       	pop	r15
    14c4:	ef 90       	pop	r14
    14c6:	df 90       	pop	r13
    14c8:	cf 90       	pop	r12
    14ca:	08 95       	ret

000014cc <progMovingLines(unsigned int, unsigned char)>:
    14cc:	cf 92       	push	r12
    14ce:	df 92       	push	r13
    14d0:	ef 92       	push	r14
    14d2:	ff 92       	push	r15
    14d4:	0f 93       	push	r16
    14d6:	1f 93       	push	r17
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	8c 01       	movw	r16, r24
    14de:	c6 2f       	mov	r28, r22
    14e0:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    14e4:	81 11       	cpse	r24, r1
    14e6:	0e c0       	rjmp	.+28     	; 0x1504 <progMovingLines(unsigned int, unsigned char)+0x38>
    14e8:	61 e0       	ldi	r22, 0x01	; 1
    14ea:	8f e7       	ldi	r24, 0x7F	; 127
    14ec:	9e e0       	ldi	r25, 0x0E	; 14
    14ee:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    14f2:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    14f6:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    14fa:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <nextSongPart>
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	8f e7       	ldi	r24, 0x7F	; 127
    1508:	9e e0       	ldi	r25, 0x0E	; 14
    150a:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    150e:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <stage>
    1512:	90 91 61 08 	lds	r25, 0x0861	; 0x800861 <stage+0x1>
    1516:	82 30       	cpi	r24, 0x02	; 2
    1518:	91 05       	cpc	r25, r1
    151a:	09 f4       	brne	.+2      	; 0x151e <progMovingLines(unsigned int, unsigned char)+0x52>
    151c:	59 c0       	rjmp	.+178    	; 0x15d0 <progMovingLines(unsigned int, unsigned char)+0x104>
    151e:	7c f4       	brge	.+30     	; 0x153e <progMovingLines(unsigned int, unsigned char)+0x72>
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	39 f1       	breq	.+78     	; 0x1572 <progMovingLines(unsigned int, unsigned char)+0xa6>
    1524:	01 97       	sbiw	r24, 0x01	; 1
    1526:	e1 f1       	breq	.+120    	; 0x15a0 <progMovingLines(unsigned int, unsigned char)+0xd4>
    1528:	8f e7       	ldi	r24, 0x7F	; 127
    152a:	9e e0       	ldi	r25, 0x0E	; 14
    152c:	df 91       	pop	r29
    152e:	cf 91       	pop	r28
    1530:	1f 91       	pop	r17
    1532:	0f 91       	pop	r16
    1534:	ff 90       	pop	r15
    1536:	ef 90       	pop	r14
    1538:	df 90       	pop	r13
    153a:	cf 90       	pop	r12
    153c:	a8 ca       	rjmp	.-2736   	; 0xa8e <CFastLED::show()>
    153e:	84 30       	cpi	r24, 0x04	; 4
    1540:	91 05       	cpc	r25, r1
    1542:	09 f4       	brne	.+2      	; 0x1546 <progMovingLines(unsigned int, unsigned char)+0x7a>
    1544:	9a c0       	rjmp	.+308    	; 0x167a <progMovingLines(unsigned int, unsigned char)+0x1ae>
    1546:	0c f4       	brge	.+2      	; 0x154a <progMovingLines(unsigned int, unsigned char)+0x7e>
    1548:	72 c0       	rjmp	.+228    	; 0x162e <progMovingLines(unsigned int, unsigned char)+0x162>
    154a:	05 97       	sbiw	r24, 0x05	; 5
    154c:	69 f7       	brne	.-38     	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    154e:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    1552:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    1556:	01 97       	sbiw	r24, 0x01	; 1
    1558:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    155c:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    1560:	18 16       	cp	r1, r24
    1562:	19 06       	cpc	r1, r25
    1564:	0c f4       	brge	.+2      	; 0x1568 <progMovingLines(unsigned int, unsigned char)+0x9c>
    1566:	9d c0       	rjmp	.+314    	; 0x16a2 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1568:	10 92 61 08 	sts	0x0861, r1	; 0x800861 <stage+0x1>
    156c:	10 92 60 08 	sts	0x0860, r1	; 0x800860 <stage>
    1570:	12 c0       	rjmp	.+36     	; 0x1596 <progMovingLines(unsigned int, unsigned char)+0xca>
    1572:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    1576:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    157a:	01 96       	adiw	r24, 0x01	; 1
    157c:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    1580:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    1584:	4a 97       	sbiw	r24, 0x1a	; 26
    1586:	0c f4       	brge	.+2      	; 0x158a <progMovingLines(unsigned int, unsigned char)+0xbe>
    1588:	61 c0       	rjmp	.+194    	; 0x164c <progMovingLines(unsigned int, unsigned char)+0x180>
    158a:	81 e0       	ldi	r24, 0x01	; 1
    158c:	90 e0       	ldi	r25, 0x00	; 0
    158e:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <stage+0x1>
    1592:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <stage>
    1596:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <zaehler+0x1>
    159a:	10 92 63 08 	sts	0x0863, r1	; 0x800863 <zaehler>
    159e:	c4 cf       	rjmp	.-120    	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    15a0:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    15a4:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    15a8:	01 96       	adiw	r24, 0x01	; 1
    15aa:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    15ae:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    15b2:	0c 97       	sbiw	r24, 0x0c	; 12
    15b4:	14 f1       	brlt	.+68     	; 0x15fa <progMovingLines(unsigned int, unsigned char)+0x12e>
    15b6:	82 e0       	ldi	r24, 0x02	; 2
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <stage+0x1>
    15be:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <stage>
    15c2:	8c e0       	ldi	r24, 0x0C	; 12
    15c4:	90 e0       	ldi	r25, 0x00	; 0
    15c6:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    15ca:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    15ce:	ac cf       	rjmp	.-168    	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    15d0:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    15d4:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    15d8:	01 97       	sbiw	r24, 0x01	; 1
    15da:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    15de:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    15e2:	18 16       	cp	r1, r24
    15e4:	19 06       	cpc	r1, r25
    15e6:	4c f0       	brlt	.+18     	; 0x15fa <progMovingLines(unsigned int, unsigned char)+0x12e>
    15e8:	83 e0       	ldi	r24, 0x03	; 3
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <stage+0x1>
    15f0:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <stage>
    15f4:	89 e1       	ldi	r24, 0x19	; 25
    15f6:	90 e0       	ldi	r25, 0x00	; 0
    15f8:	e6 cf       	rjmp	.-52     	; 0x15c6 <progMovingLines(unsigned int, unsigned char)+0xfa>
    15fa:	c0 91 6e 0e 	lds	r28, 0x0E6E	; 0x800e6e <matrix>
    15fe:	d0 91 6f 0e 	lds	r29, 0x0E6F	; 0x800e6f <matrix+0x1>
    1602:	e8 81       	ld	r30, Y
    1604:	f9 81       	ldd	r31, Y+1	; 0x01
    1606:	c4 a0       	ldd	r12, Z+36	; 0x24
    1608:	d5 a0       	ldd	r13, Z+37	; 0x25
    160a:	6b da       	rcall	.-2858   	; 0xae2 <getRandomColor()>
    160c:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    1610:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    1614:	06 e1       	ldi	r16, 0x16	; 22
    1616:	10 e0       	ldi	r17, 0x00	; 0
    1618:	04 1b       	sub	r16, r20
    161a:	15 0b       	sbc	r17, r21
    161c:	7c 01       	movw	r14, r24
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	69 e1       	ldi	r22, 0x19	; 25
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	ce 01       	movw	r24, r28
    1628:	f6 01       	movw	r30, r12
    162a:	09 95       	icall
    162c:	7d cf       	rjmp	.-262    	; 0x1528 <progMovingLines(unsigned int, unsigned char)+0x5c>
    162e:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    1632:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    1636:	01 97       	sbiw	r24, 0x01	; 1
    1638:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    163c:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    1640:	18 16       	cp	r1, r24
    1642:	19 06       	cpc	r1, r25
    1644:	1c f0       	brlt	.+6      	; 0x164c <progMovingLines(unsigned int, unsigned char)+0x180>
    1646:	84 e0       	ldi	r24, 0x04	; 4
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	a1 cf       	rjmp	.-190    	; 0x158e <progMovingLines(unsigned int, unsigned char)+0xc2>
    164c:	c0 91 6e 0e 	lds	r28, 0x0E6E	; 0x800e6e <matrix>
    1650:	d0 91 6f 0e 	lds	r29, 0x0E6F	; 0x800e6f <matrix+0x1>
    1654:	e8 81       	ld	r30, Y
    1656:	f9 81       	ldd	r31, Y+1	; 0x01
    1658:	c4 a0       	ldd	r12, Z+36	; 0x24
    165a:	d5 a0       	ldd	r13, Z+37	; 0x25
    165c:	42 da       	rcall	.-2940   	; 0xae2 <getRandomColor()>
    165e:	60 91 63 08 	lds	r22, 0x0863	; 0x800863 <zaehler>
    1662:	70 91 64 08 	lds	r23, 0x0864	; 0x800864 <zaehler+0x1>
    1666:	29 e1       	ldi	r18, 0x19	; 25
    1668:	30 e0       	ldi	r19, 0x00	; 0
    166a:	26 1b       	sub	r18, r22
    166c:	37 0b       	sbc	r19, r23
    166e:	7c 01       	movw	r14, r24
    1670:	06 e1       	ldi	r16, 0x16	; 22
    1672:	10 e0       	ldi	r17, 0x00	; 0
    1674:	50 e0       	ldi	r21, 0x00	; 0
    1676:	40 e0       	ldi	r20, 0x00	; 0
    1678:	d6 cf       	rjmp	.-84     	; 0x1626 <progMovingLines(unsigned int, unsigned char)+0x15a>
    167a:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    167e:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    1682:	01 96       	adiw	r24, 0x01	; 1
    1684:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    1688:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    168c:	0b 97       	sbiw	r24, 0x0b	; 11
    168e:	4c f0       	brlt	.+18     	; 0x16a2 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1690:	85 e0       	ldi	r24, 0x05	; 5
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	90 93 61 08 	sts	0x0861, r25	; 0x800861 <stage+0x1>
    1698:	80 93 60 08 	sts	0x0860, r24	; 0x800860 <stage>
    169c:	8a e0       	ldi	r24, 0x0A	; 10
    169e:	90 e0       	ldi	r25, 0x00	; 0
    16a0:	92 cf       	rjmp	.-220    	; 0x15c6 <progMovingLines(unsigned int, unsigned char)+0xfa>
    16a2:	c0 91 6e 0e 	lds	r28, 0x0E6E	; 0x800e6e <matrix>
    16a6:	d0 91 6f 0e 	lds	r29, 0x0E6F	; 0x800e6f <matrix+0x1>
    16aa:	e8 81       	ld	r30, Y
    16ac:	f9 81       	ldd	r31, Y+1	; 0x01
    16ae:	c4 a0       	ldd	r12, Z+36	; 0x24
    16b0:	d5 a0       	ldd	r13, Z+37	; 0x25
    16b2:	17 da       	rcall	.-3026   	; 0xae2 <getRandomColor()>
    16b4:	40 91 63 08 	lds	r20, 0x0863	; 0x800863 <zaehler>
    16b8:	50 91 64 08 	lds	r21, 0x0864	; 0x800864 <zaehler+0x1>
    16bc:	06 e1       	ldi	r16, 0x16	; 22
    16be:	10 e0       	ldi	r17, 0x00	; 0
    16c0:	04 1b       	sub	r16, r20
    16c2:	15 0b       	sbc	r17, r21
    16c4:	7c 01       	movw	r14, r24
    16c6:	29 e1       	ldi	r18, 0x19	; 25
    16c8:	30 e0       	ldi	r19, 0x00	; 0
    16ca:	70 e0       	ldi	r23, 0x00	; 0
    16cc:	60 e0       	ldi	r22, 0x00	; 0
    16ce:	ab cf       	rjmp	.-170    	; 0x1626 <progMovingLines(unsigned int, unsigned char)+0x15a>

000016d0 <progOutline(unsigned int, unsigned char)>:
    16d0:	cf 92       	push	r12
    16d2:	df 92       	push	r13
    16d4:	ef 92       	push	r14
    16d6:	ff 92       	push	r15
    16d8:	0f 93       	push	r16
    16da:	1f 93       	push	r17
    16dc:	cf 93       	push	r28
    16de:	df 93       	push	r29
    16e0:	8c 01       	movw	r16, r24
    16e2:	c6 2f       	mov	r28, r22
    16e4:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    16e8:	81 11       	cpse	r24, r1
    16ea:	0e c0       	rjmp	.+28     	; 0x1708 <progOutline(unsigned int, unsigned char)+0x38>
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	8f e7       	ldi	r24, 0x7F	; 127
    16f0:	9e e0       	ldi	r25, 0x0E	; 14
    16f2:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    16f6:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    16fa:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    16fe:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <nextSongPart>
    1702:	81 e0       	ldi	r24, 0x01	; 1
    1704:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1708:	60 e0       	ldi	r22, 0x00	; 0
    170a:	8f e7       	ldi	r24, 0x7F	; 127
    170c:	9e e0       	ldi	r25, 0x0E	; 14
    170e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    1712:	80 91 62 08 	lds	r24, 0x0862	; 0x800862 <scannerGoesBack>
    1716:	e0 91 63 08 	lds	r30, 0x0863	; 0x800863 <zaehler>
    171a:	f0 91 64 08 	lds	r31, 0x0864	; 0x800864 <zaehler+0x1>
    171e:	81 11       	cpse	r24, r1
    1720:	08 c1       	rjmp	.+528    	; 0x1932 <progOutline(unsigned int, unsigned char)+0x262>
    1722:	e9 30       	cpi	r30, 0x09	; 9
    1724:	f1 05       	cpc	r31, r1
    1726:	28 f5       	brcc	.+74     	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    1728:	e8 56       	subi	r30, 0x68	; 104
    172a:	f4 4f       	sbci	r31, 0xF4	; 244
    172c:	0c 94 80 34 	jmp	0x6900	; 0x6900 <__tablejump2__>
    1730:	a1 0b       	sbc	r26, r17
    1732:	d3 0b       	sbc	r29, r19
    1734:	ec 0b       	sbc	r30, r28
    1736:	05 0c       	add	r0, r5
    1738:	1e 0c       	add	r1, r14
    173a:	37 0c       	add	r3, r7
    173c:	4f 0c       	add	r4, r15
    173e:	68 0c       	add	r6, r8
    1740:	81 0c       	add	r8, r1
    1742:	cf e1       	ldi	r28, 0x1F	; 31
    1744:	d6 e0       	ldi	r29, 0x06	; 6
    1746:	0b eb       	ldi	r16, 0xBB	; 187
    1748:	16 e0       	ldi	r17, 0x06	; 6
    174a:	e9 90       	ld	r14, Y+
    174c:	f9 90       	ld	r15, Y+
    174e:	b0 d9       	rcall	.-3232   	; 0xab0 <getRandomColorValue()>
    1750:	d8 2e       	mov	r13, r24
    1752:	ae d9       	rcall	.-3236   	; 0xab0 <getRandomColorValue()>
    1754:	c8 2e       	mov	r12, r24
    1756:	ac d9       	rcall	.-3240   	; 0xab0 <getRandomColorValue()>
    1758:	f7 01       	movw	r30, r14
    175a:	ee 0f       	add	r30, r30
    175c:	ff 1f       	adc	r31, r31
    175e:	ee 0d       	add	r30, r14
    1760:	ff 1d       	adc	r31, r15
    1762:	e0 58       	subi	r30, 0x80	; 128
    1764:	f7 4f       	sbci	r31, 0xF7	; 247
    1766:	80 83       	st	Z, r24
    1768:	c1 82       	std	Z+1, r12	; 0x01
    176a:	d2 82       	std	Z+2, r13	; 0x02
    176c:	0c 17       	cp	r16, r28
    176e:	1d 07       	cpc	r17, r29
    1770:	61 f7       	brne	.-40     	; 0x174a <progOutline(unsigned int, unsigned char)+0x7a>
    1772:	8f e7       	ldi	r24, 0x7F	; 127
    1774:	9e e0       	ldi	r25, 0x0E	; 14
    1776:	8b d9       	rcall	.-3306   	; 0xa8e <CFastLED::show()>
    1778:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    177c:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    1780:	01 96       	adiw	r24, 0x01	; 1
    1782:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    1786:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    178a:	09 97       	sbiw	r24, 0x09	; 9
    178c:	1c f0       	brlt	.+6      	; 0x1794 <progOutline(unsigned int, unsigned char)+0xc4>
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <scannerGoesBack>
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ff 90       	pop	r15
    179e:	ef 90       	pop	r14
    17a0:	df 90       	pop	r13
    17a2:	cf 90       	pop	r12
    17a4:	08 95       	ret
    17a6:	c3 e9       	ldi	r28, 0x93	; 147
    17a8:	d5 e0       	ldi	r29, 0x05	; 5
    17aa:	0f e1       	ldi	r16, 0x1F	; 31
    17ac:	16 e0       	ldi	r17, 0x06	; 6
    17ae:	e9 90       	ld	r14, Y+
    17b0:	f9 90       	ld	r15, Y+
    17b2:	7e d9       	rcall	.-3332   	; 0xab0 <getRandomColorValue()>
    17b4:	d8 2e       	mov	r13, r24
    17b6:	7c d9       	rcall	.-3336   	; 0xab0 <getRandomColorValue()>
    17b8:	c8 2e       	mov	r12, r24
    17ba:	7a d9       	rcall	.-3340   	; 0xab0 <getRandomColorValue()>
    17bc:	f7 01       	movw	r30, r14
    17be:	ee 0f       	add	r30, r30
    17c0:	ff 1f       	adc	r31, r31
    17c2:	ee 0d       	add	r30, r14
    17c4:	ff 1d       	adc	r31, r15
    17c6:	e0 58       	subi	r30, 0x80	; 128
    17c8:	f7 4f       	sbci	r31, 0xF7	; 247
    17ca:	80 83       	st	Z, r24
    17cc:	c1 82       	std	Z+1, r12	; 0x01
    17ce:	d2 82       	std	Z+2, r13	; 0x02
    17d0:	0c 17       	cp	r16, r28
    17d2:	1d 07       	cpc	r17, r29
    17d4:	61 f7       	brne	.-40     	; 0x17ae <progOutline(unsigned int, unsigned char)+0xde>
    17d6:	cd cf       	rjmp	.-102    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    17d8:	c7 e2       	ldi	r28, 0x27	; 39
    17da:	d5 e0       	ldi	r29, 0x05	; 5
    17dc:	03 e9       	ldi	r16, 0x93	; 147
    17de:	15 e0       	ldi	r17, 0x05	; 5
    17e0:	e9 90       	ld	r14, Y+
    17e2:	f9 90       	ld	r15, Y+
    17e4:	65 d9       	rcall	.-3382   	; 0xab0 <getRandomColorValue()>
    17e6:	d8 2e       	mov	r13, r24
    17e8:	63 d9       	rcall	.-3386   	; 0xab0 <getRandomColorValue()>
    17ea:	c8 2e       	mov	r12, r24
    17ec:	61 d9       	rcall	.-3390   	; 0xab0 <getRandomColorValue()>
    17ee:	f7 01       	movw	r30, r14
    17f0:	ee 0f       	add	r30, r30
    17f2:	ff 1f       	adc	r31, r31
    17f4:	ee 0d       	add	r30, r14
    17f6:	ff 1d       	adc	r31, r15
    17f8:	e0 58       	subi	r30, 0x80	; 128
    17fa:	f7 4f       	sbci	r31, 0xF7	; 247
    17fc:	80 83       	st	Z, r24
    17fe:	c1 82       	std	Z+1, r12	; 0x01
    1800:	d2 82       	std	Z+2, r13	; 0x02
    1802:	0c 17       	cp	r16, r28
    1804:	1d 07       	cpc	r17, r29
    1806:	61 f7       	brne	.-40     	; 0x17e0 <progOutline(unsigned int, unsigned char)+0x110>
    1808:	b4 cf       	rjmp	.-152    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    180a:	cd ed       	ldi	r28, 0xDD	; 221
    180c:	d4 e0       	ldi	r29, 0x04	; 4
    180e:	07 e2       	ldi	r16, 0x27	; 39
    1810:	15 e0       	ldi	r17, 0x05	; 5
    1812:	e9 90       	ld	r14, Y+
    1814:	f9 90       	ld	r15, Y+
    1816:	4c d9       	rcall	.-3432   	; 0xab0 <getRandomColorValue()>
    1818:	d8 2e       	mov	r13, r24
    181a:	4a d9       	rcall	.-3436   	; 0xab0 <getRandomColorValue()>
    181c:	c8 2e       	mov	r12, r24
    181e:	48 d9       	rcall	.-3440   	; 0xab0 <getRandomColorValue()>
    1820:	f7 01       	movw	r30, r14
    1822:	ee 0f       	add	r30, r30
    1824:	ff 1f       	adc	r31, r31
    1826:	ee 0d       	add	r30, r14
    1828:	ff 1d       	adc	r31, r15
    182a:	e0 58       	subi	r30, 0x80	; 128
    182c:	f7 4f       	sbci	r31, 0xF7	; 247
    182e:	80 83       	st	Z, r24
    1830:	c1 82       	std	Z+1, r12	; 0x01
    1832:	d2 82       	std	Z+2, r13	; 0x02
    1834:	0c 17       	cp	r16, r28
    1836:	1d 07       	cpc	r17, r29
    1838:	61 f7       	brne	.-40     	; 0x1812 <progOutline(unsigned int, unsigned char)+0x142>
    183a:	9b cf       	rjmp	.-202    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    183c:	cd e9       	ldi	r28, 0x9D	; 157
    183e:	d4 e0       	ldi	r29, 0x04	; 4
    1840:	0d ed       	ldi	r16, 0xDD	; 221
    1842:	14 e0       	ldi	r17, 0x04	; 4
    1844:	e9 90       	ld	r14, Y+
    1846:	f9 90       	ld	r15, Y+
    1848:	33 d9       	rcall	.-3482   	; 0xab0 <getRandomColorValue()>
    184a:	d8 2e       	mov	r13, r24
    184c:	31 d9       	rcall	.-3486   	; 0xab0 <getRandomColorValue()>
    184e:	c8 2e       	mov	r12, r24
    1850:	2f d9       	rcall	.-3490   	; 0xab0 <getRandomColorValue()>
    1852:	f7 01       	movw	r30, r14
    1854:	ee 0f       	add	r30, r30
    1856:	ff 1f       	adc	r31, r31
    1858:	ee 0d       	add	r30, r14
    185a:	ff 1d       	adc	r31, r15
    185c:	e0 58       	subi	r30, 0x80	; 128
    185e:	f7 4f       	sbci	r31, 0xF7	; 247
    1860:	80 83       	st	Z, r24
    1862:	c1 82       	std	Z+1, r12	; 0x01
    1864:	d2 82       	std	Z+2, r13	; 0x02
    1866:	0c 17       	cp	r16, r28
    1868:	1d 07       	cpc	r17, r29
    186a:	61 f7       	brne	.-40     	; 0x1844 <progOutline(unsigned int, unsigned char)+0x174>
    186c:	82 cf       	rjmp	.-252    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    186e:	c1 e6       	ldi	r28, 0x61	; 97
    1870:	d4 e0       	ldi	r29, 0x04	; 4
    1872:	09 91       	ld	r16, Y+
    1874:	19 91       	ld	r17, Y+
    1876:	1c d9       	rcall	.-3528   	; 0xab0 <getRandomColorValue()>
    1878:	f8 2e       	mov	r15, r24
    187a:	1a d9       	rcall	.-3532   	; 0xab0 <getRandomColorValue()>
    187c:	e8 2e       	mov	r14, r24
    187e:	18 d9       	rcall	.-3536   	; 0xab0 <getRandomColorValue()>
    1880:	f8 01       	movw	r30, r16
    1882:	ee 0f       	add	r30, r30
    1884:	ff 1f       	adc	r31, r31
    1886:	e0 0f       	add	r30, r16
    1888:	f1 1f       	adc	r31, r17
    188a:	e0 58       	subi	r30, 0x80	; 128
    188c:	f7 4f       	sbci	r31, 0xF7	; 247
    188e:	80 83       	st	Z, r24
    1890:	e1 82       	std	Z+1, r14	; 0x01
    1892:	f2 82       	std	Z+2, r15	; 0x02
    1894:	84 e0       	ldi	r24, 0x04	; 4
    1896:	cd 39       	cpi	r28, 0x9D	; 157
    1898:	d8 07       	cpc	r29, r24
    189a:	59 f7       	brne	.-42     	; 0x1872 <progOutline(unsigned int, unsigned char)+0x1a2>
    189c:	6a cf       	rjmp	.-300    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    189e:	cb e2       	ldi	r28, 0x2B	; 43
    18a0:	d4 e0       	ldi	r29, 0x04	; 4
    18a2:	01 e6       	ldi	r16, 0x61	; 97
    18a4:	14 e0       	ldi	r17, 0x04	; 4
    18a6:	e9 90       	ld	r14, Y+
    18a8:	f9 90       	ld	r15, Y+
    18aa:	02 d9       	rcall	.-3580   	; 0xab0 <getRandomColorValue()>
    18ac:	d8 2e       	mov	r13, r24
    18ae:	00 d9       	rcall	.-3584   	; 0xab0 <getRandomColorValue()>
    18b0:	c8 2e       	mov	r12, r24
    18b2:	fe d8       	rcall	.-3588   	; 0xab0 <getRandomColorValue()>
    18b4:	f7 01       	movw	r30, r14
    18b6:	ee 0f       	add	r30, r30
    18b8:	ff 1f       	adc	r31, r31
    18ba:	ee 0d       	add	r30, r14
    18bc:	ff 1d       	adc	r31, r15
    18be:	e0 58       	subi	r30, 0x80	; 128
    18c0:	f7 4f       	sbci	r31, 0xF7	; 247
    18c2:	80 83       	st	Z, r24
    18c4:	c1 82       	std	Z+1, r12	; 0x01
    18c6:	d2 82       	std	Z+2, r13	; 0x02
    18c8:	0c 17       	cp	r16, r28
    18ca:	1d 07       	cpc	r17, r29
    18cc:	61 f7       	brne	.-40     	; 0x18a6 <progOutline(unsigned int, unsigned char)+0x1d6>
    18ce:	51 cf       	rjmp	.-350    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    18d0:	c7 ef       	ldi	r28, 0xF7	; 247
    18d2:	d3 e0       	ldi	r29, 0x03	; 3
    18d4:	0b e2       	ldi	r16, 0x2B	; 43
    18d6:	14 e0       	ldi	r17, 0x04	; 4
    18d8:	e9 90       	ld	r14, Y+
    18da:	f9 90       	ld	r15, Y+
    18dc:	e9 d8       	rcall	.-3630   	; 0xab0 <getRandomColorValue()>
    18de:	d8 2e       	mov	r13, r24
    18e0:	e7 d8       	rcall	.-3634   	; 0xab0 <getRandomColorValue()>
    18e2:	c8 2e       	mov	r12, r24
    18e4:	e5 d8       	rcall	.-3638   	; 0xab0 <getRandomColorValue()>
    18e6:	f7 01       	movw	r30, r14
    18e8:	ee 0f       	add	r30, r30
    18ea:	ff 1f       	adc	r31, r31
    18ec:	ee 0d       	add	r30, r14
    18ee:	ff 1d       	adc	r31, r15
    18f0:	e0 58       	subi	r30, 0x80	; 128
    18f2:	f7 4f       	sbci	r31, 0xF7	; 247
    18f4:	80 83       	st	Z, r24
    18f6:	c1 82       	std	Z+1, r12	; 0x01
    18f8:	d2 82       	std	Z+2, r13	; 0x02
    18fa:	0c 17       	cp	r16, r28
    18fc:	1d 07       	cpc	r17, r29
    18fe:	61 f7       	brne	.-40     	; 0x18d8 <progOutline(unsigned int, unsigned char)+0x208>
    1900:	38 cf       	rjmp	.-400    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    1902:	c7 ec       	ldi	r28, 0xC7	; 199
    1904:	d3 e0       	ldi	r29, 0x03	; 3
    1906:	09 91       	ld	r16, Y+
    1908:	19 91       	ld	r17, Y+
    190a:	d2 d8       	rcall	.-3676   	; 0xab0 <getRandomColorValue()>
    190c:	f8 2e       	mov	r15, r24
    190e:	d0 d8       	rcall	.-3680   	; 0xab0 <getRandomColorValue()>
    1910:	e8 2e       	mov	r14, r24
    1912:	ce d8       	rcall	.-3684   	; 0xab0 <getRandomColorValue()>
    1914:	f8 01       	movw	r30, r16
    1916:	ee 0f       	add	r30, r30
    1918:	ff 1f       	adc	r31, r31
    191a:	e0 0f       	add	r30, r16
    191c:	f1 1f       	adc	r31, r17
    191e:	e0 58       	subi	r30, 0x80	; 128
    1920:	f7 4f       	sbci	r31, 0xF7	; 247
    1922:	80 83       	st	Z, r24
    1924:	e1 82       	std	Z+1, r14	; 0x01
    1926:	f2 82       	std	Z+2, r15	; 0x02
    1928:	83 e0       	ldi	r24, 0x03	; 3
    192a:	c7 3f       	cpi	r28, 0xF7	; 247
    192c:	d8 07       	cpc	r29, r24
    192e:	59 f7       	brne	.-42     	; 0x1906 <progOutline(unsigned int, unsigned char)+0x236>
    1930:	20 cf       	rjmp	.-448    	; 0x1772 <progOutline(unsigned int, unsigned char)+0xa2>
    1932:	e9 30       	cpi	r30, 0x09	; 9
    1934:	f1 05       	cpc	r31, r1
    1936:	20 f5       	brcc	.+72     	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1938:	e0 56       	subi	r30, 0x60	; 96
    193a:	f3 4f       	sbci	r31, 0xF3	; 243
    193c:	0c 94 80 34 	jmp	0x6900	; 0x6900 <__tablejump2__>
    1940:	a9 0c       	add	r10, r9
    1942:	d3 0c       	add	r13, r3
    1944:	eb 0c       	add	r14, r11
    1946:	03 0d       	add	r16, r3
    1948:	1b 0d       	add	r17, r11
    194a:	33 0d       	add	r19, r3
    194c:	4b 0d       	add	r20, r11
    194e:	63 0d       	add	r22, r3
    1950:	7e 0d       	add	r23, r14
    1952:	cf e1       	ldi	r28, 0x1F	; 31
    1954:	d6 e0       	ldi	r29, 0x06	; 6
    1956:	09 91       	ld	r16, Y+
    1958:	19 91       	ld	r17, Y+
    195a:	aa d8       	rcall	.-3756   	; 0xab0 <getRandomColorValue()>
    195c:	f8 2e       	mov	r15, r24
    195e:	a8 d8       	rcall	.-3760   	; 0xab0 <getRandomColorValue()>
    1960:	e8 2e       	mov	r14, r24
    1962:	a6 d8       	rcall	.-3764   	; 0xab0 <getRandomColorValue()>
    1964:	f8 01       	movw	r30, r16
    1966:	ee 0f       	add	r30, r30
    1968:	ff 1f       	adc	r31, r31
    196a:	e0 0f       	add	r30, r16
    196c:	f1 1f       	adc	r31, r17
    196e:	e0 58       	subi	r30, 0x80	; 128
    1970:	f7 4f       	sbci	r31, 0xF7	; 247
    1972:	80 83       	st	Z, r24
    1974:	e1 82       	std	Z+1, r14	; 0x01
    1976:	f2 82       	std	Z+2, r15	; 0x02
    1978:	86 e0       	ldi	r24, 0x06	; 6
    197a:	cb 3b       	cpi	r28, 0xBB	; 187
    197c:	d8 07       	cpc	r29, r24
    197e:	59 f7       	brne	.-42     	; 0x1956 <progOutline(unsigned int, unsigned char)+0x286>
    1980:	8f e7       	ldi	r24, 0x7F	; 127
    1982:	9e e0       	ldi	r25, 0x0E	; 14
    1984:	84 d8       	rcall	.-3832   	; 0xa8e <CFastLED::show()>
    1986:	80 91 63 08 	lds	r24, 0x0863	; 0x800863 <zaehler>
    198a:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <zaehler+0x1>
    198e:	01 97       	sbiw	r24, 0x01	; 1
    1990:	90 93 64 08 	sts	0x0864, r25	; 0x800864 <zaehler+0x1>
    1994:	80 93 63 08 	sts	0x0863, r24	; 0x800863 <zaehler>
    1998:	18 16       	cp	r1, r24
    199a:	19 06       	cpc	r1, r25
    199c:	0c f4       	brge	.+2      	; 0x19a0 <progOutline(unsigned int, unsigned char)+0x2d0>
    199e:	fa ce       	rjmp	.-524    	; 0x1794 <progOutline(unsigned int, unsigned char)+0xc4>
    19a0:	10 92 62 08 	sts	0x0862, r1	; 0x800862 <scannerGoesBack>
    19a4:	f7 ce       	rjmp	.-530    	; 0x1794 <progOutline(unsigned int, unsigned char)+0xc4>
    19a6:	c3 e9       	ldi	r28, 0x93	; 147
    19a8:	d5 e0       	ldi	r29, 0x05	; 5
    19aa:	09 91       	ld	r16, Y+
    19ac:	19 91       	ld	r17, Y+
    19ae:	80 d8       	rcall	.-3840   	; 0xab0 <getRandomColorValue()>
    19b0:	f8 2e       	mov	r15, r24
    19b2:	7e d8       	rcall	.-3844   	; 0xab0 <getRandomColorValue()>
    19b4:	e8 2e       	mov	r14, r24
    19b6:	7c d8       	rcall	.-3848   	; 0xab0 <getRandomColorValue()>
    19b8:	f8 01       	movw	r30, r16
    19ba:	ee 0f       	add	r30, r30
    19bc:	ff 1f       	adc	r31, r31
    19be:	e0 0f       	add	r30, r16
    19c0:	f1 1f       	adc	r31, r17
    19c2:	e0 58       	subi	r30, 0x80	; 128
    19c4:	f7 4f       	sbci	r31, 0xF7	; 247
    19c6:	80 83       	st	Z, r24
    19c8:	e1 82       	std	Z+1, r14	; 0x01
    19ca:	f2 82       	std	Z+2, r15	; 0x02
    19cc:	86 e0       	ldi	r24, 0x06	; 6
    19ce:	cf 31       	cpi	r28, 0x1F	; 31
    19d0:	d8 07       	cpc	r29, r24
    19d2:	59 f7       	brne	.-42     	; 0x19aa <progOutline(unsigned int, unsigned char)+0x2da>
    19d4:	d5 cf       	rjmp	.-86     	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    19d6:	c7 e2       	ldi	r28, 0x27	; 39
    19d8:	d5 e0       	ldi	r29, 0x05	; 5
    19da:	09 91       	ld	r16, Y+
    19dc:	19 91       	ld	r17, Y+
    19de:	68 d8       	rcall	.-3888   	; 0xab0 <getRandomColorValue()>
    19e0:	f8 2e       	mov	r15, r24
    19e2:	66 d8       	rcall	.-3892   	; 0xab0 <getRandomColorValue()>
    19e4:	e8 2e       	mov	r14, r24
    19e6:	64 d8       	rcall	.-3896   	; 0xab0 <getRandomColorValue()>
    19e8:	f8 01       	movw	r30, r16
    19ea:	ee 0f       	add	r30, r30
    19ec:	ff 1f       	adc	r31, r31
    19ee:	e0 0f       	add	r30, r16
    19f0:	f1 1f       	adc	r31, r17
    19f2:	e0 58       	subi	r30, 0x80	; 128
    19f4:	f7 4f       	sbci	r31, 0xF7	; 247
    19f6:	80 83       	st	Z, r24
    19f8:	e1 82       	std	Z+1, r14	; 0x01
    19fa:	f2 82       	std	Z+2, r15	; 0x02
    19fc:	85 e0       	ldi	r24, 0x05	; 5
    19fe:	c3 39       	cpi	r28, 0x93	; 147
    1a00:	d8 07       	cpc	r29, r24
    1a02:	59 f7       	brne	.-42     	; 0x19da <progOutline(unsigned int, unsigned char)+0x30a>
    1a04:	bd cf       	rjmp	.-134    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a06:	cd ed       	ldi	r28, 0xDD	; 221
    1a08:	d4 e0       	ldi	r29, 0x04	; 4
    1a0a:	09 91       	ld	r16, Y+
    1a0c:	19 91       	ld	r17, Y+
    1a0e:	50 d8       	rcall	.-3936   	; 0xab0 <getRandomColorValue()>
    1a10:	f8 2e       	mov	r15, r24
    1a12:	4e d8       	rcall	.-3940   	; 0xab0 <getRandomColorValue()>
    1a14:	e8 2e       	mov	r14, r24
    1a16:	4c d8       	rcall	.-3944   	; 0xab0 <getRandomColorValue()>
    1a18:	f8 01       	movw	r30, r16
    1a1a:	ee 0f       	add	r30, r30
    1a1c:	ff 1f       	adc	r31, r31
    1a1e:	e0 0f       	add	r30, r16
    1a20:	f1 1f       	adc	r31, r17
    1a22:	e0 58       	subi	r30, 0x80	; 128
    1a24:	f7 4f       	sbci	r31, 0xF7	; 247
    1a26:	80 83       	st	Z, r24
    1a28:	e1 82       	std	Z+1, r14	; 0x01
    1a2a:	f2 82       	std	Z+2, r15	; 0x02
    1a2c:	85 e0       	ldi	r24, 0x05	; 5
    1a2e:	c7 32       	cpi	r28, 0x27	; 39
    1a30:	d8 07       	cpc	r29, r24
    1a32:	59 f7       	brne	.-42     	; 0x1a0a <progOutline(unsigned int, unsigned char)+0x33a>
    1a34:	a5 cf       	rjmp	.-182    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a36:	cd e9       	ldi	r28, 0x9D	; 157
    1a38:	d4 e0       	ldi	r29, 0x04	; 4
    1a3a:	09 91       	ld	r16, Y+
    1a3c:	19 91       	ld	r17, Y+
    1a3e:	38 d8       	rcall	.-3984   	; 0xab0 <getRandomColorValue()>
    1a40:	f8 2e       	mov	r15, r24
    1a42:	36 d8       	rcall	.-3988   	; 0xab0 <getRandomColorValue()>
    1a44:	e8 2e       	mov	r14, r24
    1a46:	34 d8       	rcall	.-3992   	; 0xab0 <getRandomColorValue()>
    1a48:	f8 01       	movw	r30, r16
    1a4a:	ee 0f       	add	r30, r30
    1a4c:	ff 1f       	adc	r31, r31
    1a4e:	e0 0f       	add	r30, r16
    1a50:	f1 1f       	adc	r31, r17
    1a52:	e0 58       	subi	r30, 0x80	; 128
    1a54:	f7 4f       	sbci	r31, 0xF7	; 247
    1a56:	80 83       	st	Z, r24
    1a58:	e1 82       	std	Z+1, r14	; 0x01
    1a5a:	f2 82       	std	Z+2, r15	; 0x02
    1a5c:	84 e0       	ldi	r24, 0x04	; 4
    1a5e:	cd 3d       	cpi	r28, 0xDD	; 221
    1a60:	d8 07       	cpc	r29, r24
    1a62:	59 f7       	brne	.-42     	; 0x1a3a <progOutline(unsigned int, unsigned char)+0x36a>
    1a64:	8d cf       	rjmp	.-230    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a66:	c1 e6       	ldi	r28, 0x61	; 97
    1a68:	d4 e0       	ldi	r29, 0x04	; 4
    1a6a:	09 91       	ld	r16, Y+
    1a6c:	19 91       	ld	r17, Y+
    1a6e:	20 d8       	rcall	.-4032   	; 0xab0 <getRandomColorValue()>
    1a70:	f8 2e       	mov	r15, r24
    1a72:	1e d8       	rcall	.-4036   	; 0xab0 <getRandomColorValue()>
    1a74:	e8 2e       	mov	r14, r24
    1a76:	1c d8       	rcall	.-4040   	; 0xab0 <getRandomColorValue()>
    1a78:	f8 01       	movw	r30, r16
    1a7a:	ee 0f       	add	r30, r30
    1a7c:	ff 1f       	adc	r31, r31
    1a7e:	e0 0f       	add	r30, r16
    1a80:	f1 1f       	adc	r31, r17
    1a82:	e0 58       	subi	r30, 0x80	; 128
    1a84:	f7 4f       	sbci	r31, 0xF7	; 247
    1a86:	80 83       	st	Z, r24
    1a88:	e1 82       	std	Z+1, r14	; 0x01
    1a8a:	f2 82       	std	Z+2, r15	; 0x02
    1a8c:	84 e0       	ldi	r24, 0x04	; 4
    1a8e:	cd 39       	cpi	r28, 0x9D	; 157
    1a90:	d8 07       	cpc	r29, r24
    1a92:	59 f7       	brne	.-42     	; 0x1a6a <progOutline(unsigned int, unsigned char)+0x39a>
    1a94:	75 cf       	rjmp	.-278    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1a96:	cb e2       	ldi	r28, 0x2B	; 43
    1a98:	d4 e0       	ldi	r29, 0x04	; 4
    1a9a:	09 91       	ld	r16, Y+
    1a9c:	19 91       	ld	r17, Y+
    1a9e:	08 d8       	rcall	.-4080   	; 0xab0 <getRandomColorValue()>
    1aa0:	f8 2e       	mov	r15, r24
    1aa2:	06 d8       	rcall	.-4084   	; 0xab0 <getRandomColorValue()>
    1aa4:	e8 2e       	mov	r14, r24
    1aa6:	04 d8       	rcall	.-4088   	; 0xab0 <getRandomColorValue()>
    1aa8:	f8 01       	movw	r30, r16
    1aaa:	ee 0f       	add	r30, r30
    1aac:	ff 1f       	adc	r31, r31
    1aae:	e0 0f       	add	r30, r16
    1ab0:	f1 1f       	adc	r31, r17
    1ab2:	e0 58       	subi	r30, 0x80	; 128
    1ab4:	f7 4f       	sbci	r31, 0xF7	; 247
    1ab6:	80 83       	st	Z, r24
    1ab8:	e1 82       	std	Z+1, r14	; 0x01
    1aba:	f2 82       	std	Z+2, r15	; 0x02
    1abc:	84 e0       	ldi	r24, 0x04	; 4
    1abe:	c1 36       	cpi	r28, 0x61	; 97
    1ac0:	d8 07       	cpc	r29, r24
    1ac2:	59 f7       	brne	.-42     	; 0x1a9a <progOutline(unsigned int, unsigned char)+0x3ca>
    1ac4:	5d cf       	rjmp	.-326    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1ac6:	c7 ef       	ldi	r28, 0xF7	; 247
    1ac8:	d3 e0       	ldi	r29, 0x03	; 3
    1aca:	09 91       	ld	r16, Y+
    1acc:	19 91       	ld	r17, Y+
    1ace:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1ad2:	f8 2e       	mov	r15, r24
    1ad4:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1ad8:	e8 2e       	mov	r14, r24
    1ada:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1ade:	f8 01       	movw	r30, r16
    1ae0:	ee 0f       	add	r30, r30
    1ae2:	ff 1f       	adc	r31, r31
    1ae4:	e0 0f       	add	r30, r16
    1ae6:	f1 1f       	adc	r31, r17
    1ae8:	e0 58       	subi	r30, 0x80	; 128
    1aea:	f7 4f       	sbci	r31, 0xF7	; 247
    1aec:	80 83       	st	Z, r24
    1aee:	e1 82       	std	Z+1, r14	; 0x01
    1af0:	f2 82       	std	Z+2, r15	; 0x02
    1af2:	84 e0       	ldi	r24, 0x04	; 4
    1af4:	cb 32       	cpi	r28, 0x2B	; 43
    1af6:	d8 07       	cpc	r29, r24
    1af8:	41 f7       	brne	.-48     	; 0x1aca <progOutline(unsigned int, unsigned char)+0x3fa>
    1afa:	42 cf       	rjmp	.-380    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>
    1afc:	c7 ec       	ldi	r28, 0xC7	; 199
    1afe:	d3 e0       	ldi	r29, 0x03	; 3
    1b00:	09 91       	ld	r16, Y+
    1b02:	19 91       	ld	r17, Y+
    1b04:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1b08:	f8 2e       	mov	r15, r24
    1b0a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1b0e:	e8 2e       	mov	r14, r24
    1b10:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    1b14:	f8 01       	movw	r30, r16
    1b16:	ee 0f       	add	r30, r30
    1b18:	ff 1f       	adc	r31, r31
    1b1a:	e0 0f       	add	r30, r16
    1b1c:	f1 1f       	adc	r31, r17
    1b1e:	e0 58       	subi	r30, 0x80	; 128
    1b20:	f7 4f       	sbci	r31, 0xF7	; 247
    1b22:	80 83       	st	Z, r24
    1b24:	e1 82       	std	Z+1, r14	; 0x01
    1b26:	f2 82       	std	Z+2, r15	; 0x02
    1b28:	83 e0       	ldi	r24, 0x03	; 3
    1b2a:	c7 3f       	cpi	r28, 0xF7	; 247
    1b2c:	d8 07       	cpc	r29, r24
    1b2e:	41 f7       	brne	.-48     	; 0x1b00 <progOutline(unsigned int, unsigned char)+0x430>
    1b30:	27 cf       	rjmp	.-434    	; 0x1980 <progOutline(unsigned int, unsigned char)+0x2b0>

00001b32 <progScrollText(String, unsigned int, int, unsigned char)>:
    1b32:	cf 92       	push	r12
    1b34:	df 92       	push	r13
    1b36:	ff 92       	push	r15
    1b38:	0f 93       	push	r16
    1b3a:	1f 93       	push	r17
    1b3c:	cf 93       	push	r28
    1b3e:	df 93       	push	r29
    1b40:	8c 01       	movw	r16, r24
    1b42:	6b 01       	movw	r12, r22
    1b44:	ea 01       	movw	r28, r20
    1b46:	f2 2e       	mov	r15, r18
    1b48:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1b4c:	81 11       	cpse	r24, r1
    1b4e:	1a c0       	rjmp	.+52     	; 0x1b84 <progScrollText(String, unsigned int, int, unsigned char)+0x52>
    1b50:	61 e0       	ldi	r22, 0x01	; 1
    1b52:	8f e7       	ldi	r24, 0x7F	; 127
    1b54:	9e e0       	ldi	r25, 0x0E	; 14
    1b56:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    1b5a:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    1b5e:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    1b62:	f0 92 6b 08 	sts	0x086B, r15	; 0x80086b <nextSongPart>
    1b66:	81 e0       	ldi	r24, 0x01	; 1
    1b68:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1b6c:	84 e6       	ldi	r24, 0x64	; 100
    1b6e:	90 e0       	ldi	r25, 0x00	; 0
    1b70:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <millisCounterTimer+0x1>
    1b74:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <millisCounterTimer>
    1b78:	87 e1       	ldi	r24, 0x17	; 23
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1b80:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1b84:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
    1b88:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
    1b8c:	84 36       	cpi	r24, 0x64	; 100
    1b8e:	91 05       	cpc	r25, r1
    1b90:	08 f4       	brcc	.+2      	; 0x1b94 <progScrollText(String, unsigned int, int, unsigned char)+0x62>
    1b92:	5e c0       	rjmp	.+188    	; 0x1c50 <progScrollText(String, unsigned int, int, unsigned char)+0x11e>
    1b94:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
    1b98:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
    1b9c:	85 e0       	ldi	r24, 0x05	; 5
    1b9e:	80 93 7f 0e 	sts	0x0E7F, r24	; 0x800e7f <FastLED>
    1ba2:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1ba6:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1baa:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Framebuffer_GFX::clear()>
    1bae:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1bb2:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1bb6:	dc 01       	movw	r26, r24
    1bb8:	56 96       	adiw	r26, 0x16	; 22
    1bba:	1c 92       	st	X, r1
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	0e 94 ba 20 	call	0x4174	; 0x4174 <Adafruit_GFX::setTextSize(unsigned char)>
    1bc2:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1bc6:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1bca:	dc 01       	movw	r26, r24
    1bcc:	ed 91       	ld	r30, X+
    1bce:	fc 91       	ld	r31, X
    1bd0:	00 8c       	ldd	r0, Z+24	; 0x18
    1bd2:	f1 8d       	ldd	r31, Z+25	; 0x19
    1bd4:	e0 2d       	mov	r30, r0
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	09 95       	icall
    1bda:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1bde:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1be2:	01 97       	sbiw	r24, 0x01	; 1
    1be4:	86 3a       	cpi	r24, 0xA6	; 166
    1be6:	bf ef       	ldi	r27, 0xFF	; 255
    1be8:	9b 07       	cpc	r25, r27
    1bea:	7c f1       	brlt	.+94     	; 0x1c4a <progScrollText(String, unsigned int, int, unsigned char)+0x118>
    1bec:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1bf0:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1bf4:	0e 94 89 32 	call	0x6512	; 0x6512 <yield>
    1bf8:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1bfc:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1c00:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Framebuffer_GFX::clear()>
    1c04:	e0 91 6e 0e 	lds	r30, 0x0E6E	; 0x800e6e <matrix>
    1c08:	f0 91 6f 0e 	lds	r31, 0x0E6F	; 0x800e6f <matrix+0x1>
    1c0c:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1c10:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1c14:	94 87       	std	Z+12, r25	; 0x0c
    1c16:	83 87       	std	Z+11, r24	; 0x0b
    1c18:	8d e0       	ldi	r24, 0x0D	; 13
    1c1a:	90 e0       	ldi	r25, 0x00	; 0
    1c1c:	96 87       	std	Z+14, r25	; 0x0e
    1c1e:	85 87       	std	Z+13, r24	; 0x0d
    1c20:	d2 8b       	std	Z+18, r29	; 0x12
    1c22:	c1 8b       	std	Z+17, r28	; 0x11
    1c24:	d0 8b       	std	Z+16, r29	; 0x10
    1c26:	c7 87       	std	Z+15, r28	; 0x0f
    1c28:	b8 01       	movw	r22, r16
    1c2a:	cf 01       	movw	r24, r30
    1c2c:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <Print::print(String const&)>
    1c30:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1c34:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	df 90       	pop	r13
    1c44:	cf 90       	pop	r12
    1c46:	0c 94 d9 20 	jmp	0x41b2	; 0x41b2 <FastLED_NeoMatrix::show()>
    1c4a:	87 e1       	ldi	r24, 0x17	; 23
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
    1c4e:	ce cf       	rjmp	.-100    	; 0x1bec <progScrollText(String, unsigned int, int, unsigned char)+0xba>
    1c50:	df 91       	pop	r29
    1c52:	cf 91       	pop	r28
    1c54:	1f 91       	pop	r17
    1c56:	0f 91       	pop	r16
    1c58:	ff 90       	pop	r15
    1c5a:	df 90       	pop	r13
    1c5c:	cf 90       	pop	r12
    1c5e:	08 95       	ret

00001c60 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    1c60:	8f 92       	push	r8
    1c62:	9f 92       	push	r9
    1c64:	af 92       	push	r10
    1c66:	bf 92       	push	r11
    1c68:	cf 92       	push	r12
    1c6a:	df 92       	push	r13
    1c6c:	ef 92       	push	r14
    1c6e:	0f 93       	push	r16
    1c70:	1f 93       	push	r17
    1c72:	cf 93       	push	r28
    1c74:	df 93       	push	r29
    1c76:	ec 01       	movw	r28, r24
    1c78:	5b 01       	movw	r10, r22
    1c7a:	6a 01       	movw	r12, r20
    1c7c:	49 01       	movw	r8, r18
    1c7e:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1c82:	81 11       	cpse	r24, r1
    1c84:	16 c0       	rjmp	.+44     	; 0x1cb2 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    1c86:	61 e0       	ldi	r22, 0x01	; 1
    1c88:	8f e7       	ldi	r24, 0x7F	; 127
    1c8a:	9e e0       	ldi	r25, 0x0E	; 14
    1c8c:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    1c90:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1c94:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1c98:	e0 92 6b 08 	sts	0x086B, r14	; 0x80086b <nextSongPart>
    1c9c:	81 e0       	ldi	r24, 0x01	; 1
    1c9e:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1ca2:	10 92 28 08 	sts	0x0828, r1	; 0x800828 <zaehlerWortArray+0x1>
    1ca6:	10 92 27 08 	sts	0x0827, r1	; 0x800827 <zaehlerWortArray>
    1caa:	d0 92 73 08 	sts	0x0873, r13	; 0x800873 <millisCounterTimer+0x1>
    1cae:	c0 92 72 08 	sts	0x0872, r12	; 0x800872 <millisCounterTimer>
    1cb2:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
    1cb6:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
    1cba:	8c 15       	cp	r24, r12
    1cbc:	9d 05       	cpc	r25, r13
    1cbe:	08 f4       	brcc	.+2      	; 0x1cc2 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    1cc0:	5b c0       	rjmp	.+182    	; 0x1d78 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1cc2:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
    1cc6:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
    1cca:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <zaehlerWortArray>
    1cce:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <zaehlerWortArray+0x1>
    1cd2:	a8 16       	cp	r10, r24
    1cd4:	b9 06       	cpc	r11, r25
    1cd6:	0c f4       	brge	.+2      	; 0x1cda <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    1cd8:	4f c0       	rjmp	.+158    	; 0x1d78 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1cda:	85 e0       	ldi	r24, 0x05	; 5
    1cdc:	80 93 7f 0e 	sts	0x0E7F, r24	; 0x800e7f <FastLED>
    1ce0:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1ce4:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1ce8:	0e 94 4f 05 	call	0xa9e	; 0xa9e <Framebuffer_GFX::clear()>
    1cec:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1cf0:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1cf4:	dc 01       	movw	r26, r24
    1cf6:	56 96       	adiw	r26, 0x16	; 22
    1cf8:	1c 92       	st	X, r1
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 ba 20 	call	0x4174	; 0x4174 <Adafruit_GFX::setTextSize(unsigned char)>
    1d00:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1d04:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	00 8c       	ldd	r0, Z+24	; 0x18
    1d10:	f1 8d       	ldd	r31, Z+25	; 0x19
    1d12:	e0 2d       	mov	r30, r0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	09 95       	icall
    1d18:	0e 94 89 32 	call	0x6512	; 0x6512 <yield>
    1d1c:	e0 91 6e 0e 	lds	r30, 0x0E6E	; 0x800e6e <matrix>
    1d20:	f0 91 6f 0e 	lds	r31, 0x0E6F	; 0x800e6f <matrix+0x1>
    1d24:	82 e0       	ldi	r24, 0x02	; 2
    1d26:	90 e0       	ldi	r25, 0x00	; 0
    1d28:	94 87       	std	Z+12, r25	; 0x0c
    1d2a:	83 87       	std	Z+11, r24	; 0x0b
    1d2c:	8d e0       	ldi	r24, 0x0D	; 13
    1d2e:	90 e0       	ldi	r25, 0x00	; 0
    1d30:	96 87       	std	Z+14, r25	; 0x0e
    1d32:	85 87       	std	Z+13, r24	; 0x0d
    1d34:	12 8b       	std	Z+18, r17	; 0x12
    1d36:	01 8b       	std	Z+17, r16	; 0x11
    1d38:	10 8b       	std	Z+16, r17	; 0x10
    1d3a:	07 87       	std	Z+15, r16	; 0x0f
    1d3c:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <zaehlerWortArray>
    1d40:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <zaehlerWortArray+0x1>
    1d44:	27 e0       	ldi	r18, 0x07	; 7
    1d46:	28 9f       	mul	r18, r24
    1d48:	b0 01       	movw	r22, r0
    1d4a:	29 9f       	mul	r18, r25
    1d4c:	70 0d       	add	r23, r0
    1d4e:	11 24       	eor	r1, r1
    1d50:	6c 0f       	add	r22, r28
    1d52:	7d 1f       	adc	r23, r29
    1d54:	cf 01       	movw	r24, r30
    1d56:	0e 94 da 2e 	call	0x5db4	; 0x5db4 <Print::print(String const&)>
    1d5a:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    1d5e:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    1d62:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <FastLED_NeoMatrix::show()>
    1d66:	80 91 27 08 	lds	r24, 0x0827	; 0x800827 <zaehlerWortArray>
    1d6a:	90 91 28 08 	lds	r25, 0x0828	; 0x800828 <zaehlerWortArray+0x1>
    1d6e:	01 96       	adiw	r24, 0x01	; 1
    1d70:	90 93 28 08 	sts	0x0828, r25	; 0x800828 <zaehlerWortArray+0x1>
    1d74:	80 93 27 08 	sts	0x0827, r24	; 0x800827 <zaehlerWortArray>
    1d78:	df 91       	pop	r29
    1d7a:	cf 91       	pop	r28
    1d7c:	1f 91       	pop	r17
    1d7e:	0f 91       	pop	r16
    1d80:	ef 90       	pop	r14
    1d82:	df 90       	pop	r13
    1d84:	cf 90       	pop	r12
    1d86:	bf 90       	pop	r11
    1d88:	af 90       	pop	r10
    1d8a:	9f 90       	pop	r9
    1d8c:	8f 90       	pop	r8
    1d8e:	08 95       	ret

00001d90 <FillLEDsFromPaletteColors(unsigned char)>:
    1d90:	df 92       	push	r13
    1d92:	ef 92       	push	r14
    1d94:	ff 92       	push	r15
    1d96:	0f 93       	push	r16
    1d98:	1f 93       	push	r17
    1d9a:	cf 93       	push	r28
    1d9c:	df 93       	push	r29
    1d9e:	00 d0       	rcall	.+0      	; 0x1da0 <FillLEDsFromPaletteColors(unsigned char)+0x10>
    1da0:	1f 92       	push	r1
    1da2:	cd b7       	in	r28, 0x3d	; 61
    1da4:	de b7       	in	r29, 0x3e	; 62
    1da6:	d8 2e       	mov	r13, r24
    1da8:	80 e8       	ldi	r24, 0x80	; 128
    1daa:	e8 2e       	mov	r14, r24
    1dac:	88 e0       	ldi	r24, 0x08	; 8
    1dae:	f8 2e       	mov	r15, r24
    1db0:	00 91 2e 08 	lds	r16, 0x082E	; 0x80082e <currentBlending>
    1db4:	10 91 2f 08 	lds	r17, 0x082F	; 0x80082f <currentBlending+0x1>
    1db8:	25 e0       	ldi	r18, 0x05	; 5
    1dba:	4d 2d       	mov	r20, r13
    1dbc:	60 e3       	ldi	r22, 0x30	; 48
    1dbe:	78 e0       	ldi	r23, 0x08	; 8
    1dc0:	ce 01       	movw	r24, r28
    1dc2:	01 96       	adiw	r24, 0x01	; 1
    1dc4:	0e 94 4d 23 	call	0x469a	; 0x469a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    1dc8:	89 81       	ldd	r24, Y+1	; 0x01
    1dca:	f7 01       	movw	r30, r14
    1dcc:	80 83       	st	Z, r24
    1dce:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd0:	81 83       	std	Z+1, r24	; 0x01
    1dd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd4:	82 83       	std	Z+2, r24	; 0x02
    1dd6:	f3 e0       	ldi	r31, 0x03	; 3
    1dd8:	df 0e       	add	r13, r31
    1dda:	83 e0       	ldi	r24, 0x03	; 3
    1ddc:	e8 0e       	add	r14, r24
    1dde:	f1 1c       	adc	r15, r1
    1de0:	e2 ec       	ldi	r30, 0xC2	; 194
    1de2:	ee 16       	cp	r14, r30
    1de4:	eb e0       	ldi	r30, 0x0B	; 11
    1de6:	fe 06       	cpc	r15, r30
    1de8:	19 f7       	brne	.-58     	; 0x1db0 <FillLEDsFromPaletteColors(unsigned char)+0x20>
    1dea:	0f 90       	pop	r0
    1dec:	0f 90       	pop	r0
    1dee:	0f 90       	pop	r0
    1df0:	df 91       	pop	r29
    1df2:	cf 91       	pop	r28
    1df4:	1f 91       	pop	r17
    1df6:	0f 91       	pop	r16
    1df8:	ff 90       	pop	r15
    1dfa:	ef 90       	pop	r14
    1dfc:	df 90       	pop	r13
    1dfe:	08 95       	ret

00001e00 <setupInterrupt()>:
    1e00:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    1e04:	8b e0       	ldi	r24, 0x0B	; 11
    1e06:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    1e0a:	8a e6       	ldi	r24, 0x6A	; 106
    1e0c:	98 e1       	ldi	r25, 0x18	; 24
    1e0e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    1e12:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    1e16:	82 e0       	ldi	r24, 0x02	; 2
    1e18:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    1e1c:	08 95       	ret

00001e1e <__vector_32>:
    1e1e:	1f 92       	push	r1
    1e20:	0f 92       	push	r0
    1e22:	0f b6       	in	r0, 0x3f	; 63
    1e24:	0f 92       	push	r0
    1e26:	11 24       	eor	r1, r1
    1e28:	2f 93       	push	r18
    1e2a:	3f 93       	push	r19
    1e2c:	8f 93       	push	r24
    1e2e:	9f 93       	push	r25
    1e30:	80 91 72 08 	lds	r24, 0x0872	; 0x800872 <millisCounterTimer>
    1e34:	90 91 73 08 	lds	r25, 0x0873	; 0x800873 <millisCounterTimer+0x1>
    1e38:	49 96       	adiw	r24, 0x19	; 25
    1e3a:	90 93 73 08 	sts	0x0873, r25	; 0x800873 <millisCounterTimer+0x1>
    1e3e:	80 93 72 08 	sts	0x0872, r24	; 0x800872 <millisCounterTimer>
    1e42:	80 91 6e 08 	lds	r24, 0x086E	; 0x80086e <millisCounterForSeconds>
    1e46:	90 91 6f 08 	lds	r25, 0x086F	; 0x80086f <millisCounterForSeconds+0x1>
    1e4a:	49 96       	adiw	r24, 0x19	; 25
    1e4c:	90 93 6f 08 	sts	0x086F, r25	; 0x80086f <millisCounterForSeconds+0x1>
    1e50:	80 93 6e 08 	sts	0x086E, r24	; 0x80086e <millisCounterForSeconds>
    1e54:	80 91 70 08 	lds	r24, 0x0870	; 0x800870 <millisCounterForProgChange>
    1e58:	90 91 71 08 	lds	r25, 0x0871	; 0x800871 <millisCounterForProgChange+0x1>
    1e5c:	49 96       	adiw	r24, 0x19	; 25
    1e5e:	90 93 71 08 	sts	0x0871, r25	; 0x800871 <millisCounterForProgChange+0x1>
    1e62:	80 93 70 08 	sts	0x0870, r24	; 0x800870 <millisCounterForProgChange>
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	90 93 6d 08 	sts	0x086D, r25	; 0x80086d <flag_processFastLED>
    1e6c:	8b b1       	in	r24, 0x0b	; 11
    1e6e:	20 e4       	ldi	r18, 0x40	; 64
    1e70:	82 27       	eor	r24, r18
    1e72:	8b b9       	out	0x0b, r24	; 11
    1e74:	20 91 6e 08 	lds	r18, 0x086E	; 0x80086e <millisCounterForSeconds>
    1e78:	30 91 6f 08 	lds	r19, 0x086F	; 0x80086f <millisCounterForSeconds+0x1>
    1e7c:	28 3e       	cpi	r18, 0xE8	; 232
    1e7e:	33 40       	sbci	r19, 0x03	; 3
    1e80:	30 f0       	brcs	.+12     	; 0x1e8e <__vector_32+0x70>
    1e82:	10 92 6f 08 	sts	0x086F, r1	; 0x80086f <millisCounterForSeconds+0x1>
    1e86:	10 92 6e 08 	sts	0x086E, r1	; 0x80086e <millisCounterForSeconds>
    1e8a:	90 93 69 08 	sts	0x0869, r25	; 0x800869 <OneSecondHasPast>
    1e8e:	20 91 70 08 	lds	r18, 0x0870	; 0x800870 <millisCounterForProgChange>
    1e92:	30 91 71 08 	lds	r19, 0x0871	; 0x800871 <millisCounterForProgChange+0x1>
    1e96:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    1e9a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    1e9e:	28 17       	cp	r18, r24
    1ea0:	39 07       	cpc	r19, r25
    1ea2:	c0 f0       	brcs	.+48     	; 0x1ed4 <__vector_32+0xb6>
    1ea4:	80 91 6b 08 	lds	r24, 0x086B	; 0x80086b <nextSongPart>
    1ea8:	80 93 6a 08 	sts	0x086A, r24	; 0x80086a <prog>
    1eac:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
    1eb0:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
    1eb4:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterForProgChange+0x1>
    1eb8:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterForProgChange>
    1ebc:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <zaehler+0x1>
    1ec0:	10 92 63 08 	sts	0x0863, r1	; 0x800863 <zaehler>
    1ec4:	87 e1       	ldi	r24, 0x17	; 23
    1ec6:	90 e0       	ldi	r25, 0x00	; 0
    1ec8:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1ecc:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1ed0:	10 92 6c 08 	sts	0x086C, r1	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1ed4:	9f 91       	pop	r25
    1ed6:	8f 91       	pop	r24
    1ed8:	3f 91       	pop	r19
    1eda:	2f 91       	pop	r18
    1edc:	0f 90       	pop	r0
    1ede:	0f be       	out	0x3f, r0	; 63
    1ee0:	0f 90       	pop	r0
    1ee2:	1f 90       	pop	r1
    1ee4:	18 95       	reti

00001ee6 <switchToSong(unsigned char)>:
    1ee6:	10 92 73 08 	sts	0x0873, r1	; 0x800873 <millisCounterTimer+0x1>
    1eea:	10 92 72 08 	sts	0x0872, r1	; 0x800872 <millisCounterTimer>
    1eee:	10 92 71 08 	sts	0x0871, r1	; 0x800871 <millisCounterForProgChange+0x1>
    1ef2:	10 92 70 08 	sts	0x0870, r1	; 0x800870 <millisCounterForProgChange>
    1ef6:	10 92 2a 08 	sts	0x082A, r1	; 0x80082a <progBlingBlingColoring_rounds+0x1>
    1efa:	10 92 29 08 	sts	0x0829, r1	; 0x800829 <progBlingBlingColoring_rounds>
    1efe:	10 92 26 08 	sts	0x0826, r1	; 0x800826 <progCLED_hue>
    1f02:	10 92 25 08 	sts	0x0825, r1	; 0x800825 <progCLED_counter+0x1>
    1f06:	10 92 24 08 	sts	0x0824, r1	; 0x800824 <progCLED_counter>
    1f0a:	10 92 64 08 	sts	0x0864, r1	; 0x800864 <zaehler+0x1>
    1f0e:	10 92 63 08 	sts	0x0863, r1	; 0x800863 <zaehler>
    1f12:	80 93 7f 08 	sts	0x087F, r24	; 0x80087f <songID>
    1f16:	10 92 6a 08 	sts	0x086A, r1	; 0x80086a <prog>
    1f1a:	10 92 6c 08 	sts	0x086C, r1	; 0x80086c <nextChangeMillisAlreadyCalculated>
    1f1e:	69 e1       	ldi	r22, 0x19	; 25
    1f20:	71 e0       	ldi	r23, 0x01	; 1
    1f22:	8f e0       	ldi	r24, 0x0F	; 15
    1f24:	9f e0       	ldi	r25, 0x0F	; 15
    1f26:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    1f2a:	8f e0       	ldi	r24, 0x0F	; 15
    1f2c:	9f e0       	ldi	r25, 0x0F	; 15
    1f2e:	0c 94 2f 2f 	jmp	0x5e5e	; 0x5e5e <Print::println()>

00001f32 <setup>:
    1f32:	af 92       	push	r10
    1f34:	bf 92       	push	r11
    1f36:	cf 92       	push	r12
    1f38:	df 92       	push	r13
    1f3a:	ef 92       	push	r14
    1f3c:	ff 92       	push	r15
    1f3e:	0f 93       	push	r16
    1f40:	1f 93       	push	r17
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	68 ee       	ldi	r22, 0xE8	; 232
    1f48:	73 e0       	ldi	r23, 0x03	; 3
    1f4a:	80 e0       	ldi	r24, 0x00	; 0
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delay>
    1f52:	4f ef       	ldi	r20, 0xFF	; 255
    1f54:	60 e4       	ldi	r22, 0x40	; 64
    1f56:	70 e0       	ldi	r23, 0x00	; 0
    1f58:	8a e9       	ldi	r24, 0x9A	; 154
    1f5a:	9e e0       	ldi	r25, 0x0E	; 14
    1f5c:	0e 94 d9 2d 	call	0x5bb2	; 0x5bb2 <HardwareSerial::_begin(unsigned int, unsigned char)>
    1f60:	56 9a       	sbi	0x0a, 6	; 10
    1f62:	88 e2       	ldi	r24, 0x28	; 40
    1f64:	0e 94 5e 29 	call	0x52bc	; 0x52bc <analogRead>
    1f68:	bc 01       	movw	r22, r24
    1f6a:	99 0f       	add	r25, r25
    1f6c:	88 0b       	sbc	r24, r24
    1f6e:	99 0b       	sbc	r25, r25
    1f70:	1f 92       	push	r1
    1f72:	1f 92       	push	r1
    1f74:	1f 92       	push	r1
    1f76:	28 e7       	ldi	r18, 0x78	; 120
    1f78:	2f 93       	push	r18
    1f7a:	a1 2c       	mov	r10, r1
    1f7c:	b1 2c       	mov	r11, r1
    1f7e:	65 01       	movw	r12, r10
    1f80:	ee 24       	eor	r14, r14
    1f82:	ea 94       	dec	r14
    1f84:	13 e0       	ldi	r17, 0x03	; 3
    1f86:	f1 2e       	mov	r15, r17
    1f88:	00 e0       	ldi	r16, 0x00	; 0
    1f8a:	10 e0       	ldi	r17, 0x00	; 0
    1f8c:	20 e0       	ldi	r18, 0x00	; 0
    1f8e:	30 e0       	ldi	r19, 0x00	; 0
    1f90:	a9 01       	movw	r20, r18
    1f92:	0e 94 a0 31 	call	0x6340	; 0x6340 <map(long, long, long, long, long)>
    1f96:	60 93 76 08 	sts	0x0876, r22	; 0x800876 <voltageSmooth>
    1f9a:	82 e3       	ldi	r24, 0x32	; 50
    1f9c:	91 e0       	ldi	r25, 0x01	; 1
    1f9e:	0e 94 a3 2e 	call	0x5d46	; 0x5d46 <operator new(unsigned int)>
    1fa2:	ec 01       	movw	r28, r24
    1fa4:	0a e0       	ldi	r16, 0x0A	; 10
    1fa6:	27 e1       	ldi	r18, 0x17	; 23
    1fa8:	30 e0       	ldi	r19, 0x00	; 0
    1faa:	46 e1       	ldi	r20, 0x16	; 22
    1fac:	50 e0       	ldi	r21, 0x00	; 0
    1fae:	60 e8       	ldi	r22, 0x80	; 128
    1fb0:	78 e0       	ldi	r23, 0x08	; 8
    1fb2:	0e 94 bc 20 	call	0x4178	; 0x4178 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    1fb6:	d0 93 6f 0e 	sts	0x0E6F, r29	; 0x800e6f <matrix+0x1>
    1fba:	c0 93 6e 0e 	sts	0x0E6E, r28	; 0x800e6e <matrix>
    1fbe:	80 91 9b 07 	lds	r24, 0x079B	; 0x80079b <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    1fc2:	0f 90       	pop	r0
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	81 11       	cpse	r24, r1
    1fcc:	4d c0       	rjmp	.+154    	; 0x2068 <setup+0x136>
    1fce:	8b e9       	ldi	r24, 0x9B	; 155
    1fd0:	97 e0       	ldi	r25, 0x07	; 7
    1fd2:	0e 94 a4 2e 	call	0x5d48	; 0x5d48 <__cxa_guard_acquire>
    1fd6:	89 2b       	or	r24, r25
    1fd8:	09 f4       	brne	.+2      	; 0x1fdc <setup+0xaa>
    1fda:	46 c0       	rjmp	.+140    	; 0x2068 <setup+0x136>
    1fdc:	10 92 a6 07 	sts	0x07A6, r1	; 0x8007a6 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    1fe0:	10 92 a5 07 	sts	0x07A5, r1	; 0x8007a5 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    1fe4:	8f ef       	ldi	r24, 0xFF	; 255
    1fe6:	80 93 a9 07 	sts	0x07A9, r24	; 0x8007a9 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    1fea:	80 93 aa 07 	sts	0x07AA, r24	; 0x8007aa <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    1fee:	80 93 ab 07 	sts	0x07AB, r24	; 0x8007ab <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    1ff2:	80 93 ac 07 	sts	0x07AC, r24	; 0x8007ac <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    1ff6:	80 93 ad 07 	sts	0x07AD, r24	; 0x8007ad <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    1ffa:	80 93 ae 07 	sts	0x07AE, r24	; 0x8007ae <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    1ffe:	81 e0       	ldi	r24, 0x01	; 1
    2000:	80 93 af 07 	sts	0x07AF, r24	; 0x8007af <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    2004:	10 92 b1 07 	sts	0x07B1, r1	; 0x8007b1 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    2008:	10 92 b0 07 	sts	0x07B0, r1	; 0x8007b0 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    200c:	10 92 a8 07 	sts	0x07A8, r1	; 0x8007a8 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    2010:	10 92 a7 07 	sts	0x07A7, r1	; 0x8007a7 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    2014:	80 91 7d 0e 	lds	r24, 0x0E7D	; 0x800e7d <CLEDController::m_pHead>
    2018:	90 91 7e 0e 	lds	r25, 0x0E7E	; 0x800e7e <CLEDController::m_pHead+0x1>
    201c:	89 2b       	or	r24, r25
    201e:	31 f4       	brne	.+12     	; 0x202c <setup+0xfa>
    2020:	83 ea       	ldi	r24, 0xA3	; 163
    2022:	97 e0       	ldi	r25, 0x07	; 7
    2024:	90 93 7e 0e 	sts	0x0E7E, r25	; 0x800e7e <CLEDController::m_pHead+0x1>
    2028:	80 93 7d 0e 	sts	0x0E7D, r24	; 0x800e7d <CLEDController::m_pHead>
    202c:	e0 91 7b 0e 	lds	r30, 0x0E7B	; 0x800e7b <CLEDController::m_pTail>
    2030:	f0 91 7c 0e 	lds	r31, 0x0E7C	; 0x800e7c <CLEDController::m_pTail+0x1>
    2034:	30 97       	sbiw	r30, 0x00	; 0
    2036:	21 f0       	breq	.+8      	; 0x2040 <setup+0x10e>
    2038:	83 ea       	ldi	r24, 0xA3	; 163
    203a:	97 e0       	ldi	r25, 0x07	; 7
    203c:	95 83       	std	Z+5, r25	; 0x05
    203e:	84 83       	std	Z+4, r24	; 0x04
    2040:	83 ea       	ldi	r24, 0xA3	; 163
    2042:	97 e0       	ldi	r25, 0x07	; 7
    2044:	90 93 7c 0e 	sts	0x0E7C, r25	; 0x800e7c <CLEDController::m_pTail+0x1>
    2048:	80 93 7b 0e 	sts	0x0E7B, r24	; 0x800e7b <CLEDController::m_pTail>
    204c:	10 92 b3 07 	sts	0x07B3, r1	; 0x8007b3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    2050:	10 92 b2 07 	sts	0x07B2, r1	; 0x8007b2 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    2054:	89 e6       	ldi	r24, 0x69	; 105
    2056:	93 e0       	ldi	r25, 0x03	; 3
    2058:	90 93 a4 07 	sts	0x07A4, r25	; 0x8007a4 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    205c:	80 93 a3 07 	sts	0x07A3, r24	; 0x8007a3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    2060:	8b e9       	ldi	r24, 0x9B	; 155
    2062:	97 e0       	ldi	r25, 0x07	; 7
    2064:	0e 94 ad 2e 	call	0x5d5a	; 0x5d5a <__cxa_guard_release>
    2068:	30 e0       	ldi	r19, 0x00	; 0
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	4a ef       	ldi	r20, 0xFA	; 250
    206e:	51 e0       	ldi	r21, 0x01	; 1
    2070:	60 e8       	ldi	r22, 0x80	; 128
    2072:	78 e0       	ldi	r23, 0x08	; 8
    2074:	83 ea       	ldi	r24, 0xA3	; 163
    2076:	97 e0       	ldi	r25, 0x07	; 7
    2078:	0e 94 1c 26 	call	0x4c38	; 0x4c38 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    207c:	fc 01       	movw	r30, r24
    207e:	8f ef       	ldi	r24, 0xFF	; 255
    2080:	86 83       	std	Z+6, r24	; 0x06
    2082:	80 eb       	ldi	r24, 0xB0	; 176
    2084:	87 83       	std	Z+7, r24	; 0x07
    2086:	80 ef       	ldi	r24, 0xF0	; 240
    2088:	80 87       	std	Z+8, r24	; 0x08
    208a:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    208e:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    2092:	0e 94 33 21 	call	0x4266	; 0x4266 <Framebuffer_GFX::begin()>
    2096:	80 91 6e 0e 	lds	r24, 0x0E6E	; 0x800e6e <matrix>
    209a:	90 91 6f 0e 	lds	r25, 0x0E6F	; 0x800e6f <matrix+0x1>
    209e:	25 e0       	ldi	r18, 0x05	; 5
    20a0:	20 93 7f 0e 	sts	0x0E7F, r18	; 0x800e7f <FastLED>
    20a4:	fc 01       	movw	r30, r24
    20a6:	16 8a       	std	Z+22, r1	; 0x16
    20a8:	69 e0       	ldi	r22, 0x09	; 9
    20aa:	74 e0       	ldi	r23, 0x04	; 4
    20ac:	0e 94 47 23 	call	0x468e	; 0x468e <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    20b0:	f8 94       	cli
    20b2:	a6 de       	rcall	.-692    	; 0x1e00 <setupInterrupt()>
    20b4:	78 94       	sei
    20b6:	68 ef       	ldi	r22, 0xF8	; 248
    20b8:	75 e0       	ldi	r23, 0x05	; 5
    20ba:	80 e3       	ldi	r24, 0x30	; 48
    20bc:	98 e0       	ldi	r25, 0x08	; 8
    20be:	0e 94 2c 05 	call	0xa58	; 0xa58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    20c2:	81 e0       	ldi	r24, 0x01	; 1
    20c4:	90 e0       	ldi	r25, 0x00	; 0
    20c6:	90 93 2f 08 	sts	0x082F, r25	; 0x80082f <currentBlending+0x1>
    20ca:	80 93 2e 08 	sts	0x082E, r24	; 0x80082e <currentBlending>
    20ce:	80 e0       	ldi	r24, 0x00	; 0
    20d0:	df 91       	pop	r29
    20d2:	cf 91       	pop	r28
    20d4:	1f 91       	pop	r17
    20d6:	0f 91       	pop	r16
    20d8:	ff 90       	pop	r15
    20da:	ef 90       	pop	r14
    20dc:	df 90       	pop	r13
    20de:	cf 90       	pop	r12
    20e0:	bf 90       	pop	r11
    20e2:	af 90       	pop	r10
    20e4:	00 cf       	rjmp	.-512    	; 0x1ee6 <switchToSong(unsigned char)>

000020e6 <LearnToFly()>:
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <prog>
    20f2:	86 30       	cpi	r24, 0x06	; 6
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <LearnToFly()+0x12>
    20f6:	63 c0       	rjmp	.+198    	; 0x21be <__stack+0xbf>
    20f8:	e8 f4       	brcc	.+58     	; 0x2134 <__stack+0x35>
    20fa:	82 30       	cpi	r24, 0x02	; 2
    20fc:	09 f4       	brne	.+2      	; 0x2100 <__stack+0x1>
    20fe:	51 c0       	rjmp	.+162    	; 0x21a2 <__stack+0xa3>
    2100:	50 f4       	brcc	.+20     	; 0x2116 <__stack+0x17>
    2102:	88 23       	and	r24, r24
    2104:	e9 f1       	breq	.+122    	; 0x2180 <__stack+0x81>
    2106:	81 30       	cpi	r24, 0x01	; 1
    2108:	09 f4       	brne	.+2      	; 0x210c <__stack+0xd>
    210a:	42 c0       	rjmp	.+132    	; 0x2190 <__stack+0x91>
    210c:	1f 91       	pop	r17
    210e:	0f 91       	pop	r16
    2110:	ff 90       	pop	r15
    2112:	ef 90       	pop	r14
    2114:	08 95       	ret
    2116:	84 30       	cpi	r24, 0x04	; 4
    2118:	09 f4       	brne	.+2      	; 0x211c <__stack+0x1d>
    211a:	47 c0       	rjmp	.+142    	; 0x21aa <__stack+0xab>
    211c:	64 e0       	ldi	r22, 0x04	; 4
    211e:	85 30       	cpi	r24, 0x05	; 5
    2120:	80 f1       	brcs	.+96     	; 0x2182 <__stack+0x83>
    2122:	66 e0       	ldi	r22, 0x06	; 6
    2124:	80 e3       	ldi	r24, 0x30	; 48
    2126:	95 e7       	ldi	r25, 0x75	; 117
    2128:	1f 91       	pop	r17
    212a:	0f 91       	pop	r16
    212c:	ff 90       	pop	r15
    212e:	ef 90       	pop	r14
    2130:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    2134:	89 30       	cpi	r24, 0x09	; 9
    2136:	09 f4       	brne	.+2      	; 0x213a <__stack+0x3b>
    2138:	5a c0       	rjmp	.+180    	; 0x21ee <__stack+0xef>
    213a:	80 f4       	brcc	.+32     	; 0x215c <__stack+0x5d>
    213c:	87 30       	cpi	r24, 0x07	; 7
    213e:	09 f4       	brne	.+2      	; 0x2142 <__stack+0x43>
    2140:	47 c0       	rjmp	.+142    	; 0x21d0 <__stack+0xd1>
    2142:	49 ea       	ldi	r20, 0xA9	; 169
    2144:	51 e0       	ldi	r21, 0x01	; 1
    2146:	69 e0       	ldi	r22, 0x09	; 9
    2148:	88 30       	cpi	r24, 0x08	; 8
    214a:	01 f7       	brne	.-64     	; 0x210c <__stack+0xd>
    214c:	82 e8       	ldi	r24, 0x82	; 130
    214e:	90 e6       	ldi	r25, 0x60	; 96
    2150:	1f 91       	pop	r17
    2152:	0f 91       	pop	r16
    2154:	ff 90       	pop	r15
    2156:	ef 90       	pop	r14
    2158:	0c 94 76 06 	jmp	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    215c:	8b 30       	cpi	r24, 0x0B	; 11
    215e:	09 f4       	brne	.+2      	; 0x2162 <__stack+0x63>
    2160:	59 c0       	rjmp	.+178    	; 0x2214 <__stack+0x115>
    2162:	08 f4       	brcc	.+2      	; 0x2166 <__stack+0x67>
    2164:	48 c0       	rjmp	.+144    	; 0x21f6 <__stack+0xf7>
    2166:	84 36       	cpi	r24, 0x64	; 100
    2168:	89 f6       	brne	.-94     	; 0x210c <__stack+0xd>
    216a:	60 e0       	ldi	r22, 0x00	; 0
    216c:	8f e7       	ldi	r24, 0x7F	; 127
    216e:	9e e0       	ldi	r25, 0x0E	; 14
    2170:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    2174:	80 e0       	ldi	r24, 0x00	; 0
    2176:	1f 91       	pop	r17
    2178:	0f 91       	pop	r16
    217a:	ff 90       	pop	r15
    217c:	ef 90       	pop	r14
    217e:	b3 ce       	rjmp	.-666    	; 0x1ee6 <switchToSong(unsigned char)>
    2180:	61 e0       	ldi	r22, 0x01	; 1
    2182:	86 e2       	ldi	r24, 0x26	; 38
    2184:	97 e3       	ldi	r25, 0x37	; 55
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	5f c8       	rjmp	.-3906   	; 0x124e <progStern(unsigned int, unsigned char)>
    2190:	62 e0       	ldi	r22, 0x02	; 2
    2192:	8b e4       	ldi	r24, 0x4B	; 75
    2194:	9e e6       	ldi	r25, 0x6E	; 110
    2196:	1f 91       	pop	r17
    2198:	0f 91       	pop	r16
    219a:	ff 90       	pop	r15
    219c:	ef 90       	pop	r14
    219e:	0c 94 38 07 	jmp	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    21a2:	49 ea       	ldi	r20, 0xA9	; 169
    21a4:	51 e0       	ldi	r21, 0x01	; 1
    21a6:	63 e0       	ldi	r22, 0x03	; 3
    21a8:	d1 cf       	rjmp	.-94     	; 0x214c <__stack+0x4d>
    21aa:	49 ea       	ldi	r20, 0xA9	; 169
    21ac:	51 e0       	ldi	r21, 0x01	; 1
    21ae:	65 e0       	ldi	r22, 0x05	; 5
    21b0:	8b e4       	ldi	r24, 0x4B	; 75
    21b2:	9e e6       	ldi	r25, 0x6E	; 110
    21b4:	1f 91       	pop	r17
    21b6:	0f 91       	pop	r16
    21b8:	ff 90       	pop	r15
    21ba:	ef 90       	pop	r14
    21bc:	e3 c8       	rjmp	.-3642   	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    21be:	67 e0       	ldi	r22, 0x07	; 7
    21c0:	8b e4       	ldi	r24, 0x4B	; 75
    21c2:	9e e6       	ldi	r25, 0x6E	; 110
    21c4:	1f 91       	pop	r17
    21c6:	0f 91       	pop	r16
    21c8:	ff 90       	pop	r15
    21ca:	ef 90       	pop	r14
    21cc:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <progBlingBlingColoring(unsigned int, unsigned char)>
    21d0:	ee 24       	eor	r14, r14
    21d2:	ea 94       	dec	r14
    21d4:	f1 2c       	mov	r15, r1
    21d6:	0f ef       	ldi	r16, 0xFF	; 255
    21d8:	10 e0       	ldi	r17, 0x00	; 0
    21da:	2f ef       	ldi	r18, 0xFF	; 255
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	4b e4       	ldi	r20, 0x4B	; 75
    21e0:	50 e0       	ldi	r21, 0x00	; 0
    21e2:	68 e0       	ldi	r22, 0x08	; 8
    21e4:	89 ec       	ldi	r24, 0xC9	; 201
    21e6:	9d e0       	ldi	r25, 0x0D	; 13
    21e8:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    21ec:	8f cf       	rjmp	.-226    	; 0x210c <__stack+0xd>
    21ee:	6a e0       	ldi	r22, 0x0A	; 10
    21f0:	88 eb       	ldi	r24, 0xB8	; 184
    21f2:	92 e5       	ldi	r25, 0x52	; 82
    21f4:	99 cf       	rjmp	.-206    	; 0x2128 <__stack+0x29>
    21f6:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    21fa:	7c 01       	movw	r14, r24
    21fc:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2200:	8c 01       	movw	r16, r24
    2202:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2206:	9c 01       	movw	r18, r24
    2208:	4b e4       	ldi	r20, 0x4B	; 75
    220a:	50 e0       	ldi	r21, 0x00	; 0
    220c:	6b e0       	ldi	r22, 0x0B	; 11
    220e:	86 e2       	ldi	r24, 0x26	; 38
    2210:	97 e3       	ldi	r25, 0x37	; 55
    2212:	ea cf       	rjmp	.-44     	; 0x21e8 <__stack+0xe9>
    2214:	64 e6       	ldi	r22, 0x64	; 100
    2216:	8f ef       	ldi	r24, 0xFF	; 255
    2218:	9f ef       	ldi	r25, 0xFF	; 255
    221a:	d4 cf       	rjmp	.-88     	; 0x21c4 <__stack+0xc5>

0000221c <Castle()>:
    221c:	ef 92       	push	r14
    221e:	ff 92       	push	r15
    2220:	0f 93       	push	r16
    2222:	1f 93       	push	r17
    2224:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <prog>
    2228:	87 33       	cpi	r24, 0x37	; 55
    222a:	09 f4       	brne	.+2      	; 0x222e <Castle()+0x12>
    222c:	d2 c0       	rjmp	.+420    	; 0x23d2 <Castle()+0x1b6>
    222e:	08 f0       	brcs	.+2      	; 0x2232 <Castle()+0x16>
    2230:	40 c0       	rjmp	.+128    	; 0x22b2 <Castle()+0x96>
    2232:	89 31       	cpi	r24, 0x19	; 25
    2234:	09 f4       	brne	.+2      	; 0x2238 <Castle()+0x1c>
    2236:	b0 c0       	rjmp	.+352    	; 0x2398 <Castle()+0x17c>
    2238:	18 f5       	brcc	.+70     	; 0x2280 <Castle()+0x64>
    223a:	8a 30       	cpi	r24, 0x0A	; 10
    223c:	09 f4       	brne	.+2      	; 0x2240 <Castle()+0x24>
    223e:	9a c0       	rjmp	.+308    	; 0x2374 <Castle()+0x158>
    2240:	58 f4       	brcc	.+22     	; 0x2258 <Castle()+0x3c>
    2242:	88 23       	and	r24, r24
    2244:	09 f4       	brne	.+2      	; 0x2248 <Castle()+0x2c>
    2246:	82 c0       	rjmp	.+260    	; 0x234c <Castle()+0x130>
    2248:	85 30       	cpi	r24, 0x05	; 5
    224a:	09 f4       	brne	.+2      	; 0x224e <Castle()+0x32>
    224c:	88 c0       	rjmp	.+272    	; 0x235e <Castle()+0x142>
    224e:	1f 91       	pop	r17
    2250:	0f 91       	pop	r16
    2252:	ff 90       	pop	r15
    2254:	ef 90       	pop	r14
    2256:	08 95       	ret
    2258:	8f 30       	cpi	r24, 0x0F	; 15
    225a:	09 f4       	brne	.+2      	; 0x225e <Castle()+0x42>
    225c:	94 c0       	rjmp	.+296    	; 0x2386 <Castle()+0x16a>
    225e:	84 31       	cpi	r24, 0x14	; 20
    2260:	b1 f7       	brne	.-20     	; 0x224e <Castle()+0x32>
    2262:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    2266:	59 e1       	ldi	r21, 0x19	; 25
    2268:	e5 2e       	mov	r14, r21
    226a:	8c 01       	movw	r16, r24
    226c:	26 e3       	ldi	r18, 0x36	; 54
    226e:	37 e0       	ldi	r19, 0x07	; 7
    2270:	45 e4       	ldi	r20, 0x45	; 69
    2272:	51 e0       	ldi	r21, 0x01	; 1
    2274:	66 e0       	ldi	r22, 0x06	; 6
    2276:	70 e0       	ldi	r23, 0x00	; 0
    2278:	84 eb       	ldi	r24, 0xB4	; 180
    227a:	97 e0       	ldi	r25, 0x07	; 7
    227c:	f1 dc       	rcall	.-1566   	; 0x1c60 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    227e:	e7 cf       	rjmp	.-50     	; 0x224e <Castle()+0x32>
    2280:	88 32       	cpi	r24, 0x28	; 40
    2282:	09 f4       	brne	.+2      	; 0x2286 <Castle()+0x6a>
    2284:	a0 c0       	rjmp	.+320    	; 0x23c6 <Castle()+0x1aa>
    2286:	58 f4       	brcc	.+22     	; 0x229e <Castle()+0x82>
    2288:	8e 31       	cpi	r24, 0x1E	; 30
    228a:	09 f4       	brne	.+2      	; 0x228e <Castle()+0x72>
    228c:	8b c0       	rjmp	.+278    	; 0x23a4 <Castle()+0x188>
    228e:	83 32       	cpi	r24, 0x23	; 35
    2290:	f1 f6       	brne	.-68     	; 0x224e <Castle()+0x32>
    2292:	42 ec       	ldi	r20, 0xC2	; 194
    2294:	51 e0       	ldi	r21, 0x01	; 1
    2296:	68 e2       	ldi	r22, 0x28	; 40
    2298:	81 eb       	ldi	r24, 0xB1	; 177
    229a:	99 e3       	ldi	r25, 0x39	; 57
    229c:	65 c0       	rjmp	.+202    	; 0x2368 <Castle()+0x14c>
    229e:	8d 32       	cpi	r24, 0x2D	; 45
    22a0:	09 f4       	brne	.+2      	; 0x22a4 <Castle()+0x88>
    22a2:	93 c0       	rjmp	.+294    	; 0x23ca <Castle()+0x1ae>
    22a4:	82 33       	cpi	r24, 0x32	; 50
    22a6:	99 f6       	brne	.-90     	; 0x224e <Castle()+0x32>
    22a8:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    22ac:	47 e3       	ldi	r20, 0x37	; 55
    22ae:	e4 2e       	mov	r14, r20
    22b0:	dc cf       	rjmp	.-72     	; 0x226a <Castle()+0x4e>
    22b2:	8b 34       	cpi	r24, 0x4B	; 75
    22b4:	09 f4       	brne	.+2      	; 0x22b8 <Castle()+0x9c>
    22b6:	bd c0       	rjmp	.+378    	; 0x2432 <Castle()+0x216>
    22b8:	28 f5       	brcc	.+74     	; 0x2304 <Castle()+0xe8>
    22ba:	8c 33       	cpi	r24, 0x3C	; 60
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <Castle()+0xa4>
    22be:	a1 c0       	rjmp	.+322    	; 0x2402 <Castle()+0x1e6>
    22c0:	60 f4       	brcc	.+24     	; 0x22da <Castle()+0xbe>
    22c2:	88 33       	cpi	r24, 0x38	; 56
    22c4:	09 f4       	brne	.+2      	; 0x22c8 <Castle()+0xac>
    22c6:	90 c0       	rjmp	.+288    	; 0x23e8 <Castle()+0x1cc>
    22c8:	8a 33       	cpi	r24, 0x3A	; 58
    22ca:	09 f0       	breq	.+2      	; 0x22ce <Castle()+0xb2>
    22cc:	c0 cf       	rjmp	.-128    	; 0x224e <Castle()+0x32>
    22ce:	42 ec       	ldi	r20, 0xC2	; 194
    22d0:	51 e0       	ldi	r21, 0x01	; 1
    22d2:	6c e3       	ldi	r22, 0x3C	; 60
    22d4:	81 eb       	ldi	r24, 0xB1	; 177
    22d6:	99 e3       	ldi	r25, 0x39	; 57
    22d8:	81 c0       	rjmp	.+258    	; 0x23dc <Castle()+0x1c0>
    22da:	81 34       	cpi	r24, 0x41	; 65
    22dc:	09 f4       	brne	.+2      	; 0x22e0 <Castle()+0xc4>
    22de:	9c c0       	rjmp	.+312    	; 0x2418 <Castle()+0x1fc>
    22e0:	86 34       	cpi	r24, 0x46	; 70
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <Castle()+0xca>
    22e4:	b4 cf       	rjmp	.-152    	; 0x224e <Castle()+0x32>
    22e6:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    22ea:	7c 01       	movw	r14, r24
    22ec:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    22f0:	8c 01       	movw	r16, r24
    22f2:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    22f6:	9c 01       	movw	r18, r24
    22f8:	42 e3       	ldi	r20, 0x32	; 50
    22fa:	50 e0       	ldi	r21, 0x00	; 0
    22fc:	6b e4       	ldi	r22, 0x4B	; 75
    22fe:	80 e7       	ldi	r24, 0x70	; 112
    2300:	97 e1       	ldi	r25, 0x17	; 23
    2302:	5e c0       	rjmp	.+188    	; 0x23c0 <Castle()+0x1a4>
    2304:	8a 35       	cpi	r24, 0x5A	; 90
    2306:	09 f4       	brne	.+2      	; 0x230a <Castle()+0xee>
    2308:	a7 c0       	rjmp	.+334    	; 0x2458 <Castle()+0x23c>
    230a:	78 f4       	brcc	.+30     	; 0x232a <Castle()+0x10e>
    230c:	80 35       	cpi	r24, 0x50	; 80
    230e:	09 f4       	brne	.+2      	; 0x2312 <Castle()+0xf6>
    2310:	96 c0       	rjmp	.+300    	; 0x243e <Castle()+0x222>
    2312:	85 35       	cpi	r24, 0x55	; 85
    2314:	09 f0       	breq	.+2      	; 0x2318 <Castle()+0xfc>
    2316:	9b cf       	rjmp	.-202    	; 0x224e <Castle()+0x32>
    2318:	6a e5       	ldi	r22, 0x5A	; 90
    231a:	82 e6       	ldi	r24, 0x62	; 98
    231c:	93 e7       	ldi	r25, 0x73	; 115
    231e:	1f 91       	pop	r17
    2320:	0f 91       	pop	r16
    2322:	ff 90       	pop	r15
    2324:	ef 90       	pop	r14
    2326:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    232a:	8f 35       	cpi	r24, 0x5F	; 95
    232c:	09 f4       	brne	.+2      	; 0x2330 <Castle()+0x114>
    232e:	9a c0       	rjmp	.+308    	; 0x2464 <Castle()+0x248>
    2330:	84 36       	cpi	r24, 0x64	; 100
    2332:	09 f0       	breq	.+2      	; 0x2336 <Castle()+0x11a>
    2334:	8c cf       	rjmp	.-232    	; 0x224e <Castle()+0x32>
    2336:	60 e0       	ldi	r22, 0x00	; 0
    2338:	8f e7       	ldi	r24, 0x7F	; 127
    233a:	9e e0       	ldi	r25, 0x0E	; 14
    233c:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    2340:	80 e0       	ldi	r24, 0x00	; 0
    2342:	1f 91       	pop	r17
    2344:	0f 91       	pop	r16
    2346:	ff 90       	pop	r15
    2348:	ef 90       	pop	r14
    234a:	cd cd       	rjmp	.-1126   	; 0x1ee6 <switchToSong(unsigned char)>
    234c:	65 e0       	ldi	r22, 0x05	; 5
    234e:	84 e5       	ldi	r24, 0x54	; 84
    2350:	9f e4       	ldi	r25, 0x4F	; 79
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <progBlingBlingColoring(unsigned int, unsigned char)>
    235e:	4d e9       	ldi	r20, 0x9D	; 157
    2360:	53 e0       	ldi	r21, 0x03	; 3
    2362:	6a e0       	ldi	r22, 0x0A	; 10
    2364:	89 ed       	ldi	r24, 0xD9	; 217
    2366:	9c e1       	ldi	r25, 0x1C	; 28
    2368:	1f 91       	pop	r17
    236a:	0f 91       	pop	r16
    236c:	ff 90       	pop	r15
    236e:	ef 90       	pop	r14
    2370:	0c 94 4d 09 	jmp	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    2374:	6f e0       	ldi	r22, 0x0F	; 15
    2376:	82 e6       	ldi	r24, 0x62	; 98
    2378:	93 e7       	ldi	r25, 0x73	; 115
    237a:	1f 91       	pop	r17
    237c:	0f 91       	pop	r16
    237e:	ff 90       	pop	r15
    2380:	ef 90       	pop	r14
    2382:	0c 94 38 07 	jmp	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    2386:	64 e1       	ldi	r22, 0x14	; 20
    2388:	87 ee       	ldi	r24, 0xE7	; 231
    238a:	90 e4       	ldi	r25, 0x40	; 64
    238c:	1f 91       	pop	r17
    238e:	0f 91       	pop	r16
    2390:	ff 90       	pop	r15
    2392:	ef 90       	pop	r14
    2394:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <progBlack(unsigned int, unsigned char)>
    2398:	42 ec       	ldi	r20, 0xC2	; 194
    239a:	51 e0       	ldi	r21, 0x01	; 1
    239c:	6e e1       	ldi	r22, 0x1E	; 30
    239e:	8b e7       	ldi	r24, 0x7B	; 123
    23a0:	92 e3       	ldi	r25, 0x32	; 50
    23a2:	e2 cf       	rjmp	.-60     	; 0x2368 <Castle()+0x14c>
    23a4:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    23a8:	7c 01       	movw	r14, r24
    23aa:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    23ae:	8c 01       	movw	r16, r24
    23b0:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    23b4:	9c 01       	movw	r18, r24
    23b6:	42 e3       	ldi	r20, 0x32	; 50
    23b8:	50 e0       	ldi	r21, 0x00	; 0
    23ba:	63 e2       	ldi	r22, 0x23	; 35
    23bc:	86 e3       	ldi	r24, 0x36	; 54
    23be:	97 e0       	ldi	r25, 0x07	; 7
    23c0:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    23c4:	44 cf       	rjmp	.-376    	; 0x224e <Castle()+0x32>
    23c6:	6d e2       	ldi	r22, 0x2D	; 45
    23c8:	d6 cf       	rjmp	.-84     	; 0x2376 <Castle()+0x15a>
    23ca:	62 e3       	ldi	r22, 0x32	; 50
    23cc:	8b e7       	ldi	r24, 0x7B	; 123
    23ce:	92 e3       	ldi	r25, 0x32	; 50
    23d0:	dd cf       	rjmp	.-70     	; 0x238c <Castle()+0x170>
    23d2:	42 ec       	ldi	r20, 0xC2	; 194
    23d4:	51 e0       	ldi	r21, 0x01	; 1
    23d6:	68 e3       	ldi	r22, 0x38	; 56
    23d8:	8b e7       	ldi	r24, 0x7B	; 123
    23da:	92 e3       	ldi	r25, 0x32	; 50
    23dc:	1f 91       	pop	r17
    23de:	0f 91       	pop	r16
    23e0:	ff 90       	pop	r15
    23e2:	ef 90       	pop	r14
    23e4:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    23e8:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    23ec:	7c 01       	movw	r14, r24
    23ee:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    23f2:	8c 01       	movw	r16, r24
    23f4:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    23f8:	9c 01       	movw	r18, r24
    23fa:	42 e3       	ldi	r20, 0x32	; 50
    23fc:	50 e0       	ldi	r21, 0x00	; 0
    23fe:	6a e3       	ldi	r22, 0x3A	; 58
    2400:	dd cf       	rjmp	.-70     	; 0x23bc <Castle()+0x1a0>
    2402:	41 e4       	ldi	r20, 0x41	; 65
    2404:	6a e3       	ldi	r22, 0x3A	; 58
    2406:	77 e0       	ldi	r23, 0x07	; 7
    2408:	86 e8       	ldi	r24, 0x86	; 134
    240a:	9d e4       	ldi	r25, 0x4D	; 77
    240c:	1f 91       	pop	r17
    240e:	0f 91       	pop	r16
    2410:	ff 90       	pop	r15
    2412:	ef 90       	pop	r14
    2414:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <progStern(unsigned int, int, unsigned char)>
    2418:	ee 24       	eor	r14, r14
    241a:	ea 94       	dec	r14
    241c:	f1 2c       	mov	r15, r1
    241e:	0f ef       	ldi	r16, 0xFF	; 255
    2420:	10 e0       	ldi	r17, 0x00	; 0
    2422:	2f ef       	ldi	r18, 0xFF	; 255
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	42 e3       	ldi	r20, 0x32	; 50
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	66 e4       	ldi	r22, 0x46	; 70
    242c:	8c e6       	ldi	r24, 0x6C	; 108
    242e:	9e e0       	ldi	r25, 0x0E	; 14
    2430:	c7 cf       	rjmp	.-114    	; 0x23c0 <Castle()+0x1a4>
    2432:	40 e5       	ldi	r20, 0x50	; 80
    2434:	6a e3       	ldi	r22, 0x3A	; 58
    2436:	77 e0       	ldi	r23, 0x07	; 7
    2438:	81 eb       	ldi	r24, 0xB1	; 177
    243a:	99 e3       	ldi	r25, 0x39	; 57
    243c:	e7 cf       	rjmp	.-50     	; 0x240c <Castle()+0x1f0>
    243e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2442:	7c 01       	movw	r14, r24
    2444:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2448:	8c 01       	movw	r16, r24
    244a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    244e:	9c 01       	movw	r18, r24
    2450:	42 e3       	ldi	r20, 0x32	; 50
    2452:	50 e0       	ldi	r21, 0x00	; 0
    2454:	65 e5       	ldi	r22, 0x55	; 85
    2456:	ea cf       	rjmp	.-44     	; 0x242c <Castle()+0x210>
    2458:	42 ec       	ldi	r20, 0xC2	; 194
    245a:	51 e0       	ldi	r21, 0x01	; 1
    245c:	6f e5       	ldi	r22, 0x5F	; 95
    245e:	87 ec       	ldi	r24, 0xC7	; 199
    2460:	9f e6       	ldi	r25, 0x6F	; 111
    2462:	82 cf       	rjmp	.-252    	; 0x2368 <Castle()+0x14c>
    2464:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    2468:	29 e0       	ldi	r18, 0x09	; 9
    246a:	e2 2e       	mov	r14, r18
    246c:	8c 01       	movw	r16, r24
    246e:	20 e6       	ldi	r18, 0x60	; 96
    2470:	3a ee       	ldi	r19, 0xEA	; 234
    2472:	45 e4       	ldi	r20, 0x45	; 69
    2474:	51 e0       	ldi	r21, 0x01	; 1
    2476:	64 e6       	ldi	r22, 0x64	; 100
    2478:	70 e0       	ldi	r23, 0x00	; 0
    247a:	fe ce       	rjmp	.-516    	; 0x2278 <Castle()+0x5c>

0000247c <TooClose()>:
    247c:	ef 92       	push	r14
    247e:	ff 92       	push	r15
    2480:	0f 93       	push	r16
    2482:	1f 93       	push	r17
    2484:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <prog>
    2488:	86 30       	cpi	r24, 0x06	; 6
    248a:	09 f4       	brne	.+2      	; 0x248e <TooClose()+0x12>
    248c:	75 c0       	rjmp	.+234    	; 0x2578 <TooClose()+0xfc>
    248e:	18 f5       	brcc	.+70     	; 0x24d6 <TooClose()+0x5a>
    2490:	82 30       	cpi	r24, 0x02	; 2
    2492:	09 f4       	brne	.+2      	; 0x2496 <TooClose()+0x1a>
    2494:	5a c0       	rjmp	.+180    	; 0x254a <TooClose()+0xce>
    2496:	58 f4       	brcc	.+22     	; 0x24ae <TooClose()+0x32>
    2498:	88 23       	and	r24, r24
    249a:	09 f4       	brne	.+2      	; 0x249e <TooClose()+0x22>
    249c:	40 c0       	rjmp	.+128    	; 0x251e <TooClose()+0xa2>
    249e:	81 30       	cpi	r24, 0x01	; 1
    24a0:	09 f4       	brne	.+2      	; 0x24a4 <TooClose()+0x28>
    24a2:	48 c0       	rjmp	.+144    	; 0x2534 <TooClose()+0xb8>
    24a4:	1f 91       	pop	r17
    24a6:	0f 91       	pop	r16
    24a8:	ff 90       	pop	r15
    24aa:	ef 90       	pop	r14
    24ac:	08 95       	ret
    24ae:	84 30       	cpi	r24, 0x04	; 4
    24b0:	09 f4       	brne	.+2      	; 0x24b4 <TooClose()+0x38>
    24b2:	5c c0       	rjmp	.+184    	; 0x256c <TooClose()+0xf0>
    24b4:	08 f4       	brcc	.+2      	; 0x24b8 <TooClose()+0x3c>
    24b6:	54 c0       	rjmp	.+168    	; 0x2560 <TooClose()+0xe4>
    24b8:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    24bc:	26 e0       	ldi	r18, 0x06	; 6
    24be:	e2 2e       	mov	r14, r18
    24c0:	8c 01       	movw	r16, r24
    24c2:	2b e2       	ldi	r18, 0x2B	; 43
    24c4:	36 e1       	ldi	r19, 0x16	; 22
    24c6:	4b ed       	ldi	r20, 0xDB	; 219
    24c8:	51 e0       	ldi	r21, 0x01	; 1
    24ca:	6a e0       	ldi	r22, 0x0A	; 10
    24cc:	70 e0       	ldi	r23, 0x00	; 0
    24ce:	8e ed       	ldi	r24, 0xDE	; 222
    24d0:	97 e0       	ldi	r25, 0x07	; 7
    24d2:	c6 db       	rcall	.-2164   	; 0x1c60 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    24d4:	e7 cf       	rjmp	.-50     	; 0x24a4 <TooClose()+0x28>
    24d6:	8a 30       	cpi	r24, 0x0A	; 10
    24d8:	09 f4       	brne	.+2      	; 0x24dc <TooClose()+0x60>
    24da:	6e c0       	rjmp	.+220    	; 0x25b8 <TooClose()+0x13c>
    24dc:	70 f4       	brcc	.+28     	; 0x24fa <TooClose()+0x7e>
    24de:	88 30       	cpi	r24, 0x08	; 8
    24e0:	09 f4       	brne	.+2      	; 0x24e4 <TooClose()+0x68>
    24e2:	64 c0       	rjmp	.+200    	; 0x25ac <TooClose()+0x130>
    24e4:	08 f4       	brcc	.+2      	; 0x24e8 <TooClose()+0x6c>
    24e6:	53 c0       	rjmp	.+166    	; 0x258e <TooClose()+0x112>
    24e8:	6a e0       	ldi	r22, 0x0A	; 10
    24ea:	80 eb       	ldi	r24, 0xB0	; 176
    24ec:	9d e1       	ldi	r25, 0x1D	; 29
    24ee:	1f 91       	pop	r17
    24f0:	0f 91       	pop	r16
    24f2:	ff 90       	pop	r15
    24f4:	ef 90       	pop	r14
    24f6:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    24fa:	8c 30       	cpi	r24, 0x0C	; 12
    24fc:	09 f4       	brne	.+2      	; 0x2500 <TooClose()+0x84>
    24fe:	71 c0       	rjmp	.+226    	; 0x25e2 <TooClose()+0x166>
    2500:	08 f4       	brcc	.+2      	; 0x2504 <TooClose()+0x88>
    2502:	60 c0       	rjmp	.+192    	; 0x25c4 <TooClose()+0x148>
    2504:	84 36       	cpi	r24, 0x64	; 100
    2506:	71 f6       	brne	.-100    	; 0x24a4 <TooClose()+0x28>
    2508:	60 e0       	ldi	r22, 0x00	; 0
    250a:	8f e7       	ldi	r24, 0x7F	; 127
    250c:	9e e0       	ldi	r25, 0x0E	; 14
    250e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    2512:	80 e0       	ldi	r24, 0x00	; 0
    2514:	1f 91       	pop	r17
    2516:	0f 91       	pop	r16
    2518:	ff 90       	pop	r15
    251a:	ef 90       	pop	r14
    251c:	e4 cc       	rjmp	.-1592   	; 0x1ee6 <switchToSong(unsigned char)>
    251e:	46 eb       	ldi	r20, 0xB6	; 182
    2520:	53 e0       	ldi	r21, 0x03	; 3
    2522:	61 e0       	ldi	r22, 0x01	; 1
    2524:	8b e0       	ldi	r24, 0x0B	; 11
    2526:	97 e7       	ldi	r25, 0x77	; 119
    2528:	1f 91       	pop	r17
    252a:	0f 91       	pop	r16
    252c:	ff 90       	pop	r15
    252e:	ef 90       	pop	r14
    2530:	0c 94 4d 09 	jmp	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    2534:	4b ed       	ldi	r20, 0xDB	; 219
    2536:	51 e0       	ldi	r21, 0x01	; 1
    2538:	62 e0       	ldi	r22, 0x02	; 2
    253a:	84 e8       	ldi	r24, 0x84	; 132
    253c:	92 eb       	ldi	r25, 0xB2	; 178
    253e:	1f 91       	pop	r17
    2540:	0f 91       	pop	r16
    2542:	ff 90       	pop	r15
    2544:	ef 90       	pop	r14
    2546:	0c 94 c2 09 	jmp	0x1384	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    254a:	46 eb       	ldi	r20, 0xB6	; 182
    254c:	53 e0       	ldi	r21, 0x03	; 3
    254e:	63 e0       	ldi	r22, 0x03	; 3
    2550:	8b e0       	ldi	r24, 0x0B	; 11
    2552:	97 e7       	ldi	r25, 0x77	; 119
    2554:	1f 91       	pop	r17
    2556:	0f 91       	pop	r16
    2558:	ff 90       	pop	r15
    255a:	ef 90       	pop	r14
    255c:	0c 94 76 06 	jmp	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    2560:	46 eb       	ldi	r20, 0xB6	; 182
    2562:	53 e0       	ldi	r21, 0x03	; 3
    2564:	64 e0       	ldi	r22, 0x04	; 4
    2566:	89 e7       	ldi	r24, 0x79	; 121
    2568:	9b e3       	ldi	r25, 0x3B	; 59
    256a:	de cf       	rjmp	.-68     	; 0x2528 <TooClose()+0xac>
    256c:	4b ed       	ldi	r20, 0xDB	; 219
    256e:	51 e0       	ldi	r21, 0x01	; 1
    2570:	65 e0       	ldi	r22, 0x05	; 5
    2572:	8b e0       	ldi	r24, 0x0B	; 11
    2574:	97 e7       	ldi	r25, 0x77	; 119
    2576:	e3 cf       	rjmp	.-58     	; 0x253e <TooClose()+0xc2>
    2578:	47 e0       	ldi	r20, 0x07	; 7
    257a:	6c e6       	ldi	r22, 0x6C	; 108
    257c:	77 e0       	ldi	r23, 0x07	; 7
    257e:	87 ec       	ldi	r24, 0xC7	; 199
    2580:	90 e6       	ldi	r25, 0x60	; 96
    2582:	1f 91       	pop	r17
    2584:	0f 91       	pop	r16
    2586:	ff 90       	pop	r15
    2588:	ef 90       	pop	r14
    258a:	0c 94 da 07 	jmp	0xfb4	; 0xfb4 <progStern(unsigned int, int, unsigned char)>
    258e:	ee 24       	eor	r14, r14
    2590:	ea 94       	dec	r14
    2592:	f1 2c       	mov	r15, r1
    2594:	0f ef       	ldi	r16, 0xFF	; 255
    2596:	10 e0       	ldi	r17, 0x00	; 0
    2598:	2f ef       	ldi	r18, 0xFF	; 255
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	4b e4       	ldi	r20, 0x4B	; 75
    259e:	50 e0       	ldi	r21, 0x00	; 0
    25a0:	68 e0       	ldi	r22, 0x08	; 8
    25a2:	89 e7       	ldi	r24, 0x79	; 121
    25a4:	9b e3       	ldi	r25, 0x3B	; 59
    25a6:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    25aa:	7c cf       	rjmp	.-264    	; 0x24a4 <TooClose()+0x28>
    25ac:	48 eb       	ldi	r20, 0xB8	; 184
    25ae:	53 e0       	ldi	r21, 0x03	; 3
    25b0:	69 e0       	ldi	r22, 0x09	; 9
    25b2:	89 e7       	ldi	r24, 0x79	; 121
    25b4:	9b e3       	ldi	r25, 0x3B	; 59
    25b6:	ce cf       	rjmp	.-100    	; 0x2554 <TooClose()+0xd8>
    25b8:	46 eb       	ldi	r20, 0xB6	; 182
    25ba:	53 e0       	ldi	r21, 0x03	; 3
    25bc:	6b e0       	ldi	r22, 0x0B	; 11
    25be:	80 eb       	ldi	r24, 0xB0	; 176
    25c0:	9d e1       	ldi	r25, 0x1D	; 29
    25c2:	c8 cf       	rjmp	.-112    	; 0x2554 <TooClose()+0xd8>
    25c4:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    25c8:	7c 01       	movw	r14, r24
    25ca:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    25ce:	8c 01       	movw	r16, r24
    25d0:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    25d4:	9c 01       	movw	r18, r24
    25d6:	4b e4       	ldi	r20, 0x4B	; 75
    25d8:	50 e0       	ldi	r21, 0x00	; 0
    25da:	6c e0       	ldi	r22, 0x0C	; 12
    25dc:	80 eb       	ldi	r24, 0xB0	; 176
    25de:	9d e1       	ldi	r25, 0x1D	; 29
    25e0:	e2 cf       	rjmp	.-60     	; 0x25a6 <TooClose()+0x12a>
    25e2:	64 e6       	ldi	r22, 0x64	; 100
    25e4:	8f ef       	ldi	r24, 0xFF	; 255
    25e6:	9f ef       	ldi	r25, 0xFF	; 255
    25e8:	1f 91       	pop	r17
    25ea:	0f 91       	pop	r16
    25ec:	ff 90       	pop	r15
    25ee:	ef 90       	pop	r14
    25f0:	0c 94 a5 05 	jmp	0xb4a	; 0xb4a <progBlingBlingColoring(unsigned int, unsigned char)>

000025f4 <Pokerface()>:
    25f4:	ef 92       	push	r14
    25f6:	ff 92       	push	r15
    25f8:	0f 93       	push	r16
    25fa:	1f 93       	push	r17
    25fc:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <prog>
    2600:	83 32       	cpi	r24, 0x23	; 35
    2602:	09 f4       	brne	.+2      	; 0x2606 <Pokerface()+0x12>
    2604:	86 c0       	rjmp	.+268    	; 0x2712 <Pokerface()+0x11e>
    2606:	90 f5       	brcc	.+100    	; 0x266c <Pokerface()+0x78>
    2608:	8f 30       	cpi	r24, 0x0F	; 15
    260a:	09 f4       	brne	.+2      	; 0x260e <Pokerface()+0x1a>
    260c:	71 c0       	rjmp	.+226    	; 0x26f0 <Pokerface()+0xfc>
    260e:	88 f4       	brcc	.+34     	; 0x2632 <Pokerface()+0x3e>
    2610:	85 30       	cpi	r24, 0x05	; 5
    2612:	09 f4       	brne	.+2      	; 0x2616 <Pokerface()+0x22>
    2614:	59 c0       	rjmp	.+178    	; 0x26c8 <Pokerface()+0xd4>
    2616:	8a 30       	cpi	r24, 0x0A	; 10
    2618:	09 f4       	brne	.+2      	; 0x261c <Pokerface()+0x28>
    261a:	61 c0       	rjmp	.+194    	; 0x26de <Pokerface()+0xea>
    261c:	81 11       	cpse	r24, r1
    261e:	21 c0       	rjmp	.+66     	; 0x2662 <Pokerface()+0x6e>
    2620:	65 e0       	ldi	r22, 0x05	; 5
    2622:	8a e8       	ldi	r24, 0x8A	; 138
    2624:	9e e5       	ldi	r25, 0x5E	; 94
    2626:	1f 91       	pop	r17
    2628:	0f 91       	pop	r16
    262a:	ff 90       	pop	r15
    262c:	ef 90       	pop	r14
    262e:	0c 94 38 07 	jmp	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    2632:	89 31       	cpi	r24, 0x19	; 25
    2634:	09 f4       	brne	.+2      	; 0x2638 <Pokerface()+0x44>
    2636:	67 c0       	rjmp	.+206    	; 0x2706 <Pokerface()+0x112>
    2638:	8e 31       	cpi	r24, 0x1E	; 30
    263a:	09 f4       	brne	.+2      	; 0x263e <Pokerface()+0x4a>
    263c:	68 c0       	rjmp	.+208    	; 0x270e <Pokerface()+0x11a>
    263e:	84 31       	cpi	r24, 0x14	; 20
    2640:	81 f4       	brne	.+32     	; 0x2662 <Pokerface()+0x6e>
    2642:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2646:	7c 01       	movw	r14, r24
    2648:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    264c:	8c 01       	movw	r16, r24
    264e:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2652:	9c 01       	movw	r18, r24
    2654:	4b e4       	ldi	r20, 0x4B	; 75
    2656:	50 e0       	ldi	r21, 0x00	; 0
    2658:	69 e1       	ldi	r22, 0x19	; 25
    265a:	86 e0       	ldi	r24, 0x06	; 6
    265c:	9f e3       	ldi	r25, 0x3F	; 63
    265e:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2662:	1f 91       	pop	r17
    2664:	0f 91       	pop	r16
    2666:	ff 90       	pop	r15
    2668:	ef 90       	pop	r14
    266a:	08 95       	ret
    266c:	87 33       	cpi	r24, 0x37	; 55
    266e:	09 f4       	brne	.+2      	; 0x2672 <Pokerface()+0x7e>
    2670:	61 c0       	rjmp	.+194    	; 0x2734 <Pokerface()+0x140>
    2672:	a8 f4       	brcc	.+42     	; 0x269e <Pokerface()+0xaa>
    2674:	8d 32       	cpi	r24, 0x2D	; 45
    2676:	09 f4       	brne	.+2      	; 0x267a <Pokerface()+0x86>
    2678:	50 c0       	rjmp	.+160    	; 0x271a <Pokerface()+0x126>
    267a:	82 33       	cpi	r24, 0x32	; 50
    267c:	09 f4       	brne	.+2      	; 0x2680 <Pokerface()+0x8c>
    267e:	51 c0       	rjmp	.+162    	; 0x2722 <Pokerface()+0x12e>
    2680:	88 32       	cpi	r24, 0x28	; 40
    2682:	79 f7       	brne	.-34     	; 0x2662 <Pokerface()+0x6e>
    2684:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2688:	7c 01       	movw	r14, r24
    268a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    268e:	8c 01       	movw	r16, r24
    2690:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2694:	9c 01       	movw	r18, r24
    2696:	4b e4       	ldi	r20, 0x4B	; 75
    2698:	50 e0       	ldi	r21, 0x00	; 0
    269a:	6d e2       	ldi	r22, 0x2D	; 45
    269c:	de cf       	rjmp	.-68     	; 0x265a <Pokerface()+0x66>
    269e:	86 34       	cpi	r24, 0x46	; 70
    26a0:	09 f4       	brne	.+2      	; 0x26a4 <Pokerface()+0xb0>
    26a2:	4c c0       	rjmp	.+152    	; 0x273c <Pokerface()+0x148>
    26a4:	84 36       	cpi	r24, 0x64	; 100
    26a6:	09 f4       	brne	.+2      	; 0x26aa <Pokerface()+0xb6>
    26a8:	52 c0       	rjmp	.+164    	; 0x274e <Pokerface()+0x15a>
    26aa:	8c 33       	cpi	r24, 0x3C	; 60
    26ac:	d1 f6       	brne	.-76     	; 0x2662 <Pokerface()+0x6e>
    26ae:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    26b2:	7c 01       	movw	r14, r24
    26b4:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    26b8:	8c 01       	movw	r16, r24
    26ba:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    26be:	9c 01       	movw	r18, r24
    26c0:	4b e4       	ldi	r20, 0x4B	; 75
    26c2:	50 e0       	ldi	r21, 0x00	; 0
    26c4:	66 e4       	ldi	r22, 0x46	; 70
    26c6:	c9 cf       	rjmp	.-110    	; 0x265a <Pokerface()+0x66>
    26c8:	44 ef       	ldi	r20, 0xF4	; 244
    26ca:	51 e0       	ldi	r21, 0x01	; 1
    26cc:	6a e0       	ldi	r22, 0x0A	; 10
    26ce:	86 e0       	ldi	r24, 0x06	; 6
    26d0:	9f e3       	ldi	r25, 0x3F	; 63
    26d2:	1f 91       	pop	r17
    26d4:	0f 91       	pop	r16
    26d6:	ff 90       	pop	r15
    26d8:	ef 90       	pop	r14
    26da:	0c 94 4d 09 	jmp	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    26de:	6f e0       	ldi	r22, 0x0F	; 15
    26e0:	86 e0       	ldi	r24, 0x06	; 6
    26e2:	9f e3       	ldi	r25, 0x3F	; 63
    26e4:	1f 91       	pop	r17
    26e6:	0f 91       	pop	r16
    26e8:	ff 90       	pop	r15
    26ea:	ef 90       	pop	r14
    26ec:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <progMovingLines(unsigned int, unsigned char)>
    26f0:	44 ef       	ldi	r20, 0xF4	; 244
    26f2:	51 e0       	ldi	r21, 0x01	; 1
    26f4:	64 e1       	ldi	r22, 0x14	; 20
    26f6:	86 e0       	ldi	r24, 0x06	; 6
    26f8:	9f e3       	ldi	r25, 0x3F	; 63
    26fa:	1f 91       	pop	r17
    26fc:	0f 91       	pop	r16
    26fe:	ff 90       	pop	r15
    2700:	ef 90       	pop	r14
    2702:	0c 94 76 06 	jmp	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    2706:	44 ef       	ldi	r20, 0xF4	; 244
    2708:	51 e0       	ldi	r21, 0x01	; 1
    270a:	6e e1       	ldi	r22, 0x1E	; 30
    270c:	e0 cf       	rjmp	.-64     	; 0x26ce <Pokerface()+0xda>
    270e:	63 e2       	ldi	r22, 0x23	; 35
    2710:	e7 cf       	rjmp	.-50     	; 0x26e0 <Pokerface()+0xec>
    2712:	44 ef       	ldi	r20, 0xF4	; 244
    2714:	51 e0       	ldi	r21, 0x01	; 1
    2716:	68 e2       	ldi	r22, 0x28	; 40
    2718:	ee cf       	rjmp	.-36     	; 0x26f6 <Pokerface()+0x102>
    271a:	62 e3       	ldi	r22, 0x32	; 50
    271c:	83 e8       	ldi	r24, 0x83	; 131
    271e:	9f e1       	ldi	r25, 0x1F	; 31
    2720:	82 cf       	rjmp	.-252    	; 0x2626 <Pokerface()+0x32>
    2722:	67 e3       	ldi	r22, 0x37	; 55
    2724:	86 e0       	ldi	r24, 0x06	; 6
    2726:	9f e3       	ldi	r25, 0x3F	; 63
    2728:	1f 91       	pop	r17
    272a:	0f 91       	pop	r16
    272c:	ff 90       	pop	r15
    272e:	ef 90       	pop	r14
    2730:	0c 94 36 06 	jmp	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    2734:	44 ef       	ldi	r20, 0xF4	; 244
    2736:	51 e0       	ldi	r21, 0x01	; 1
    2738:	6c e3       	ldi	r22, 0x3C	; 60
    273a:	dd cf       	rjmp	.-70     	; 0x26f6 <Pokerface()+0x102>
    273c:	64 e6       	ldi	r22, 0x64	; 100
    273e:	80 e1       	ldi	r24, 0x10	; 16
    2740:	97 e2       	ldi	r25, 0x27	; 39
    2742:	1f 91       	pop	r17
    2744:	0f 91       	pop	r16
    2746:	ff 90       	pop	r15
    2748:	ef 90       	pop	r14
    274a:	0c 94 2b 09 	jmp	0x1256	; 0x1256 <progBlack(unsigned int, unsigned char)>
    274e:	60 e0       	ldi	r22, 0x00	; 0
    2750:	8f e7       	ldi	r24, 0x7F	; 127
    2752:	9e e0       	ldi	r25, 0x0E	; 14
    2754:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	1f 91       	pop	r17
    275c:	0f 91       	pop	r16
    275e:	ff 90       	pop	r15
    2760:	ef 90       	pop	r14
    2762:	c1 cb       	rjmp	.-2174   	; 0x1ee6 <switchToSong(unsigned char)>

00002764 <SetupTotallyRandomPalette()>:
    2764:	bf 92       	push	r11
    2766:	cf 92       	push	r12
    2768:	df 92       	push	r13
    276a:	ef 92       	push	r14
    276c:	ff 92       	push	r15
    276e:	0f 93       	push	r16
    2770:	1f 93       	push	r17
    2772:	cf 93       	push	r28
    2774:	df 93       	push	r29
    2776:	00 d0       	rcall	.+0      	; 0x2778 <SetupTotallyRandomPalette()+0x14>
    2778:	1f 92       	push	r1
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	00 e3       	ldi	r16, 0x30	; 48
    2780:	18 e0       	ldi	r17, 0x08	; 8
    2782:	80 e6       	ldi	r24, 0x60	; 96
    2784:	e8 2e       	mov	r14, r24
    2786:	88 e0       	ldi	r24, 0x08	; 8
    2788:	f8 2e       	mov	r15, r24
    278a:	95 e0       	ldi	r25, 0x05	; 5
    278c:	c9 2e       	mov	r12, r25
    278e:	98 e0       	ldi	r25, 0x08	; 8
    2790:	d9 2e       	mov	r13, r25
    2792:	bb 24       	eor	r11, r11
    2794:	ba 94       	dec	r11
    2796:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    279a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    279e:	2c 9d       	mul	r18, r12
    27a0:	c0 01       	movw	r24, r0
    27a2:	2d 9d       	mul	r18, r13
    27a4:	90 0d       	add	r25, r0
    27a6:	3c 9d       	mul	r19, r12
    27a8:	90 0d       	add	r25, r0
    27aa:	11 24       	eor	r1, r1
    27ac:	87 5e       	subi	r24, 0xE7	; 231
    27ae:	99 4c       	sbci	r25, 0xC9	; 201
    27b0:	8c 9d       	mul	r24, r12
    27b2:	90 01       	movw	r18, r0
    27b4:	8d 9d       	mul	r24, r13
    27b6:	30 0d       	add	r19, r0
    27b8:	9c 9d       	mul	r25, r12
    27ba:	30 0d       	add	r19, r0
    27bc:	11 24       	eor	r1, r1
    27be:	27 5e       	subi	r18, 0xE7	; 231
    27c0:	39 4c       	sbci	r19, 0xC9	; 201
    27c2:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    27c6:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    27ca:	23 0f       	add	r18, r19
    27cc:	29 83       	std	Y+1, r18	; 0x01
    27ce:	ba 82       	std	Y+2, r11	; 0x02
    27d0:	89 0f       	add	r24, r25
    27d2:	8b 83       	std	Y+3, r24	; 0x03
    27d4:	b8 01       	movw	r22, r16
    27d6:	ce 01       	movw	r24, r28
    27d8:	01 96       	adiw	r24, 0x01	; 1
    27da:	0e 94 59 26 	call	0x4cb2	; 0x4cb2 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    27de:	0d 5f       	subi	r16, 0xFD	; 253
    27e0:	1f 4f       	sbci	r17, 0xFF	; 255
    27e2:	e0 16       	cp	r14, r16
    27e4:	f1 06       	cpc	r15, r17
    27e6:	b9 f6       	brne	.-82     	; 0x2796 <SetupTotallyRandomPalette()+0x32>
    27e8:	0f 90       	pop	r0
    27ea:	0f 90       	pop	r0
    27ec:	0f 90       	pop	r0
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	1f 91       	pop	r17
    27f4:	0f 91       	pop	r16
    27f6:	ff 90       	pop	r15
    27f8:	ef 90       	pop	r14
    27fa:	df 90       	pop	r13
    27fc:	cf 90       	pop	r12
    27fe:	bf 90       	pop	r11
    2800:	08 95       	ret

00002802 <progPalette(unsigned int, unsigned char, unsigned char)>:
    2802:	0f 93       	push	r16
    2804:	1f 93       	push	r17
    2806:	cf 93       	push	r28
    2808:	8c 01       	movw	r16, r24
    280a:	c4 2f       	mov	r28, r20
    280c:	80 91 6c 08 	lds	r24, 0x086C	; 0x80086c <nextChangeMillisAlreadyCalculated>
    2810:	81 11       	cpse	r24, r1
    2812:	0f c0       	rjmp	.+30     	; 0x2832 <progPalette(unsigned int, unsigned char, unsigned char)+0x30>
    2814:	61 e0       	ldi	r22, 0x01	; 1
    2816:	8f e7       	ldi	r24, 0x7F	; 127
    2818:	9e e0       	ldi	r25, 0x0E	; 14
    281a:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    281e:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    2822:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    2826:	c0 93 6b 08 	sts	0x086B, r28	; 0x80086b <nextSongPart>
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	80 93 6c 08 	sts	0x086C, r24	; 0x80086c <nextChangeMillisAlreadyCalculated>
    2830:	99 df       	rcall	.-206    	; 0x2764 <SetupTotallyRandomPalette()>
    2832:	80 e0       	ldi	r24, 0x00	; 0
    2834:	ad da       	rcall	.-2726   	; 0x1d90 <FillLEDsFromPaletteColors(unsigned char)>
    2836:	8f e7       	ldi	r24, 0x7F	; 127
    2838:	9e e0       	ldi	r25, 0x0E	; 14
    283a:	cf 91       	pop	r28
    283c:	1f 91       	pop	r17
    283e:	0f 91       	pop	r16
    2840:	0c 94 47 05 	jmp	0xa8e	; 0xa8e <CFastLED::show()>

00002844 <defaultLoop()>:
    2844:	ef 92       	push	r14
    2846:	ff 92       	push	r15
    2848:	0f 93       	push	r16
    284a:	1f 93       	push	r17
    284c:	cf 93       	push	r28
    284e:	df 93       	push	r29
    2850:	00 d0       	rcall	.+0      	; 0x2852 <defaultLoop()+0xe>
    2852:	00 d0       	rcall	.+0      	; 0x2854 <defaultLoop()+0x10>
    2854:	00 d0       	rcall	.+0      	; 0x2856 <defaultLoop()+0x12>
    2856:	1f 92       	push	r1
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	80 91 6a 08 	lds	r24, 0x086A	; 0x80086a <prog>
    2860:	86 30       	cpi	r24, 0x06	; 6
    2862:	09 f4       	brne	.+2      	; 0x2866 <defaultLoop()+0x22>
    2864:	7c c0       	rjmp	.+248    	; 0x295e <defaultLoop()+0x11a>
    2866:	18 f5       	brcc	.+70     	; 0x28ae <defaultLoop()+0x6a>
    2868:	82 30       	cpi	r24, 0x02	; 2
    286a:	09 f4       	brne	.+2      	; 0x286e <defaultLoop()+0x2a>
    286c:	4c c0       	rjmp	.+152    	; 0x2906 <defaultLoop()+0xc2>
    286e:	90 f4       	brcc	.+36     	; 0x2894 <defaultLoop()+0x50>
    2870:	88 23       	and	r24, r24
    2872:	d9 f1       	breq	.+118    	; 0x28ea <defaultLoop()+0xa6>
    2874:	81 30       	cpi	r24, 0x01	; 1
    2876:	09 f4       	brne	.+2      	; 0x287a <defaultLoop()+0x36>
    2878:	3e c0       	rjmp	.+124    	; 0x28f6 <defaultLoop()+0xb2>
    287a:	27 96       	adiw	r28, 0x07	; 7
    287c:	0f b6       	in	r0, 0x3f	; 63
    287e:	f8 94       	cli
    2880:	de bf       	out	0x3e, r29	; 62
    2882:	0f be       	out	0x3f, r0	; 63
    2884:	cd bf       	out	0x3d, r28	; 61
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	0f 91       	pop	r16
    288e:	ff 90       	pop	r15
    2890:	ef 90       	pop	r14
    2892:	08 95       	ret
    2894:	84 30       	cpi	r24, 0x04	; 4
    2896:	09 f4       	brne	.+2      	; 0x289a <defaultLoop()+0x56>
    2898:	5c c0       	rjmp	.+184    	; 0x2952 <defaultLoop()+0x10e>
    289a:	08 f4       	brcc	.+2      	; 0x289e <defaultLoop()+0x5a>
    289c:	45 c0       	rjmp	.+138    	; 0x2928 <defaultLoop()+0xe4>
    289e:	40 ed       	ldi	r20, 0xD0	; 208
    28a0:	57 e0       	ldi	r21, 0x07	; 7
    28a2:	66 e0       	ldi	r22, 0x06	; 6
    28a4:	88 e9       	ldi	r24, 0x98	; 152
    28a6:	9a e3       	ldi	r25, 0x3A	; 58
    28a8:	0e 94 76 06 	call	0xcec	; 0xcec <progFullColors(unsigned int, unsigned char, unsigned int)>
    28ac:	e6 cf       	rjmp	.-52     	; 0x287a <defaultLoop()+0x36>
    28ae:	89 30       	cpi	r24, 0x09	; 9
    28b0:	09 f4       	brne	.+2      	; 0x28b4 <defaultLoop()+0x70>
    28b2:	68 c0       	rjmp	.+208    	; 0x2984 <defaultLoop()+0x140>
    28b4:	58 f4       	brcc	.+22     	; 0x28cc <defaultLoop()+0x88>
    28b6:	87 30       	cpi	r24, 0x07	; 7
    28b8:	09 f4       	brne	.+2      	; 0x28bc <defaultLoop()+0x78>
    28ba:	5c c0       	rjmp	.+184    	; 0x2974 <defaultLoop()+0x130>
    28bc:	88 30       	cpi	r24, 0x08	; 8
    28be:	e9 f6       	brne	.-70     	; 0x287a <defaultLoop()+0x36>
    28c0:	69 e0       	ldi	r22, 0x09	; 9
    28c2:	88 e9       	ldi	r24, 0x98	; 152
    28c4:	9a e3       	ldi	r25, 0x3A	; 58
    28c6:	0e 94 36 06 	call	0xc6c	; 0xc6c <progFastBlingBling(unsigned int, unsigned char)>
    28ca:	d7 cf       	rjmp	.-82     	; 0x287a <defaultLoop()+0x36>
    28cc:	8b 30       	cpi	r24, 0x0B	; 11
    28ce:	09 f4       	brne	.+2      	; 0x28d2 <defaultLoop()+0x8e>
    28d0:	65 c0       	rjmp	.+202    	; 0x299c <defaultLoop()+0x158>
    28d2:	08 f4       	brcc	.+2      	; 0x28d6 <defaultLoop()+0x92>
    28d4:	5d c0       	rjmp	.+186    	; 0x2990 <defaultLoop()+0x14c>
    28d6:	84 36       	cpi	r24, 0x64	; 100
    28d8:	81 f6       	brne	.-96     	; 0x287a <defaultLoop()+0x36>
    28da:	60 e0       	ldi	r22, 0x00	; 0
    28dc:	8f e7       	ldi	r24, 0x7F	; 127
    28de:	9e e0       	ldi	r25, 0x0E	; 14
    28e0:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    28e4:	80 e0       	ldi	r24, 0x00	; 0
    28e6:	ff da       	rcall	.-2562   	; 0x1ee6 <switchToSong(unsigned char)>
    28e8:	c8 cf       	rjmp	.-112    	; 0x287a <defaultLoop()+0x36>
    28ea:	42 e0       	ldi	r20, 0x02	; 2
    28ec:	60 e0       	ldi	r22, 0x00	; 0
    28ee:	88 e8       	ldi	r24, 0x88	; 136
    28f0:	93 e1       	ldi	r25, 0x13	; 19
    28f2:	87 df       	rcall	.-242    	; 0x2802 <progPalette(unsigned int, unsigned char, unsigned char)>
    28f4:	c2 cf       	rjmp	.-124    	; 0x287a <defaultLoop()+0x36>
    28f6:	42 e0       	ldi	r20, 0x02	; 2
    28f8:	60 ea       	ldi	r22, 0xA0	; 160
    28fa:	7f e0       	ldi	r23, 0x0F	; 15
    28fc:	88 e9       	ldi	r24, 0x98	; 152
    28fe:	9a e3       	ldi	r25, 0x3A	; 58
    2900:	0e 94 da 07 	call	0xfb4	; 0xfb4 <progStern(unsigned int, int, unsigned char)>
    2904:	ba cf       	rjmp	.-140    	; 0x287a <defaultLoop()+0x36>
    2906:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    290a:	7c 01       	movw	r14, r24
    290c:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2910:	8c 01       	movw	r16, r24
    2912:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    2916:	9c 01       	movw	r18, r24
    2918:	42 e3       	ldi	r20, 0x32	; 50
    291a:	50 e0       	ldi	r21, 0x00	; 0
    291c:	63 e0       	ldi	r22, 0x03	; 3
    291e:	88 e8       	ldi	r24, 0x88	; 136
    2920:	93 e1       	ldi	r25, 0x13	; 19
    2922:	0e 94 db 06 	call	0xdb6	; 0xdb6 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    2926:	a9 cf       	rjmp	.-174    	; 0x287a <defaultLoop()+0x36>
    2928:	0e 94 71 05 	call	0xae2	; 0xae2 <getRandomColor()>
    292c:	8c 01       	movw	r16, r24
    292e:	6a e2       	ldi	r22, 0x2A	; 42
    2930:	71 e0       	ldi	r23, 0x01	; 1
    2932:	ce 01       	movw	r24, r28
    2934:	01 96       	adiw	r24, 0x01	; 1
    2936:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    293a:	24 e0       	ldi	r18, 0x04	; 4
    293c:	a8 01       	movw	r20, r16
    293e:	60 e3       	ldi	r22, 0x30	; 48
    2940:	75 e7       	ldi	r23, 0x75	; 117
    2942:	ce 01       	movw	r24, r28
    2944:	01 96       	adiw	r24, 0x01	; 1
    2946:	f5 d8       	rcall	.-3606   	; 0x1b32 <progScrollText(String, unsigned int, int, unsigned char)>
    2948:	ce 01       	movw	r24, r28
    294a:	01 96       	adiw	r24, 0x01	; 1
    294c:	0e 94 df 31 	call	0x63be	; 0x63be <String::~String()>
    2950:	94 cf       	rjmp	.-216    	; 0x287a <defaultLoop()+0x36>
    2952:	65 e0       	ldi	r22, 0x05	; 5
    2954:	88 e9       	ldi	r24, 0x98	; 152
    2956:	9a e3       	ldi	r25, 0x3A	; 58
    2958:	0e 94 38 07 	call	0xe70	; 0xe70 <progMatrixScanner(unsigned int, unsigned char)>
    295c:	8e cf       	rjmp	.-228    	; 0x287a <defaultLoop()+0x36>
    295e:	ee 24       	eor	r14, r14
    2960:	ea 94       	dec	r14
    2962:	f1 2c       	mov	r15, r1
    2964:	0f ef       	ldi	r16, 0xFF	; 255
    2966:	10 e0       	ldi	r17, 0x00	; 0
    2968:	2f ef       	ldi	r18, 0xFF	; 255
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	42 e3       	ldi	r20, 0x32	; 50
    296e:	50 e0       	ldi	r21, 0x00	; 0
    2970:	67 e0       	ldi	r22, 0x07	; 7
    2972:	d5 cf       	rjmp	.-86     	; 0x291e <defaultLoop()+0xda>
    2974:	48 ee       	ldi	r20, 0xE8	; 232
    2976:	53 e0       	ldi	r21, 0x03	; 3
    2978:	68 e0       	ldi	r22, 0x08	; 8
    297a:	88 e9       	ldi	r24, 0x98	; 152
    297c:	9a e3       	ldi	r25, 0x3A	; 58
    297e:	0e 94 4d 09 	call	0x129a	; 0x129a <progCircles(unsigned int, unsigned char, unsigned int)>
    2982:	7b cf       	rjmp	.-266    	; 0x287a <defaultLoop()+0x36>
    2984:	6a e0       	ldi	r22, 0x0A	; 10
    2986:	80 e1       	ldi	r24, 0x10	; 16
    2988:	97 e2       	ldi	r25, 0x27	; 39
    298a:	0e 94 68 0b 	call	0x16d0	; 0x16d0 <progOutline(unsigned int, unsigned char)>
    298e:	75 cf       	rjmp	.-278    	; 0x287a <defaultLoop()+0x36>
    2990:	6b e0       	ldi	r22, 0x0B	; 11
    2992:	80 e1       	ldi	r24, 0x10	; 16
    2994:	97 e2       	ldi	r25, 0x27	; 39
    2996:	0e 94 66 0a 	call	0x14cc	; 0x14cc <progMovingLines(unsigned int, unsigned char)>
    299a:	6f cf       	rjmp	.-290    	; 0x287a <defaultLoop()+0x36>
    299c:	44 ef       	ldi	r20, 0xF4	; 244
    299e:	51 e0       	ldi	r21, 0x01	; 1
    29a0:	64 e6       	ldi	r22, 0x64	; 100
    29a2:	88 e9       	ldi	r24, 0x98	; 152
    29a4:	9a e3       	ldi	r25, 0x3A	; 58
    29a6:	0e 94 c2 09 	call	0x1384	; 0x1384 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    29aa:	67 cf       	rjmp	.-306    	; 0x287a <defaultLoop()+0x36>

000029ac <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
#define DADVANCE 3
#define DUSE (0xFF - (DADVANCE-1))

	// This method is made static to force making register Y available to use for data on AVR - if the method is non-static, then
	// gcc will use register Y for the this pointer.
	static void /*__attribute__((optimize("O0")))*/  /*__attribute__ ((always_inline))*/  showRGBInternal(PixelController<RGB_ORDER> & pixels)  {
    29ac:	9f 92       	push	r9
    29ae:	af 92       	push	r10
    29b0:	bf 92       	push	r11
    29b2:	cf 92       	push	r12
    29b4:	df 92       	push	r13
    29b6:	ef 92       	push	r14
    29b8:	ff 92       	push	r15
    29ba:	0f 93       	push	r16
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
    29c2:	fc 01       	movw	r30, r24
		uint8_t *data = (uint8_t*)pixels.mData;
    29c4:	c0 80       	ld	r12, Z
    29c6:	d1 80       	ldd	r13, Z+1	; 0x01
		data_ptr_t port = FastPin<DATA_PIN>::port();
		data_t mask = FastPin<DATA_PIN>::mask();
		uint8_t scale_base = 0;

		// register uint8_t *end = data + nLeds;
		data_t hi = *port | mask;
    29c8:	28 b1       	in	r18, 0x08	; 8
    29ca:	b2 2e       	mov	r11, r18
    29cc:	68 94       	set
    29ce:	b2 f8       	bld	r11, 2
		data_t lo = *port & ~mask;
    29d0:	98 b1       	in	r25, 0x08	; 8
    29d2:	9b 7f       	andi	r25, 0xFB	; 251
		*port = lo;
    29d4:	98 b9       	out	0x08, r25	; 8
                d[2] = e[2] - d[2];
        }

        // Some chipsets pre-cycle the first byte, which means we want to cycle byte 0's dithering separately
        __attribute__((always_inline)) inline void preStepFirstByteDithering() {
            d[RO(0)] = e[RO(0)] - d[RO(0)];
    29d6:	62 85       	ldd	r22, Z+10	; 0x0a
    29d8:	87 81       	ldd	r24, Z+7	; 0x07
    29da:	06 2f       	mov	r16, r22
    29dc:	08 1b       	sub	r16, r24
    29de:	80 2f       	mov	r24, r16
    29e0:	07 83       	std	Z+7, r16	; 0x07

		// Setup the pixel controller
		pixels.preStepFirstByteDithering();

		// pull the dithering/adjustment values out of the pixels object for direct asm access
		uint8_t advanceBy = pixels.advanceBy();
    29e2:	77 85       	ldd	r23, Z+15	; 0x0f
		uint16_t count = pixels.mLen;
    29e4:	a2 81       	ldd	r26, Z+2	; 0x02
    29e6:	b3 81       	ldd	r27, Z+3	; 0x03

		uint8_t s0 = pixels.mScale.raw[RO(0)];
    29e8:	35 85       	ldd	r19, Z+13	; 0x0d
		uint8_t s1 = pixels.mScale.raw[RO(1)];
    29ea:	44 85       	ldd	r20, Z+12	; 0x0c
		uint8_t s2 = pixels.mScale.raw[RO(2)];
    29ec:	56 85       	ldd	r21, Z+14	; 0x0e
#if (FASTLED_SCALE8_FIXED==1)
		s0++; s1++; s2++;
    29ee:	99 24       	eor	r9, r9
    29f0:	93 94       	inc	r9
    29f2:	93 0e       	add	r9, r19
    29f4:	4f 5f       	subi	r20, 0xFF	; 255
    29f6:	5f 5f       	subi	r21, 0xFF	; 255
#endif
		uint8_t d0 = pixels.d[RO(0)];
		uint8_t d1 = pixels.d[RO(1)];
    29f8:	f6 80       	ldd	r15, Z+6	; 0x06
		uint8_t d2 = pixels.d[RO(2)];
    29fa:	e0 84       	ldd	r14, Z+8	; 0x08
		uint8_t e0 = pixels.e[RO(0)];
		uint8_t e1 = pixels.e[RO(1)];
    29fc:	c1 85       	ldd	r28, Z+9	; 0x09
		uint8_t e2 = pixels.e[RO(2)];
    29fe:	d3 85       	ldd	r29, Z+11	; 0x0b

		uint8_t loopvar=0;

		// This has to be done in asm to keep gcc from messing up the asm code further down
		b0 = data[RO(0)];
    2a00:	f6 01       	movw	r30, r12
    2a02:	11 81       	ldd	r17, Z+1	; 0x01
		{
			LDSCL4(b0,O0) 	PRESCALEA2(d0)
    2a04:	a1 2c       	mov	r10, r1
    2a06:	0a 2d       	mov	r16, r10
    2a08:	2a 2d       	mov	r18, r10
    2a0a:	3a 2d       	mov	r19, r10
    2a0c:	31 81       	ldd	r19, Z+1	; 0x01
    2a0e:	11 27       	eor	r17, r17
    2a10:	88 94       	clc
    2a12:	31 11       	cpse	r19, r1
    2a14:	38 0f       	add	r19, r24
			PRESCALEB4(d0)	SCALE02(b0,0)
    2a16:	08 f4       	brcc	.+2      	; 0x2a1a <L_9740>
    2a18:	3f ef       	ldi	r19, 0xFF	; 255

00002a1a <L_9740>:
    2a1a:	81 95       	neg	r24
    2a1c:	88 94       	clc
    2a1e:	90 fc       	sbrc	r9, 0
    2a20:	13 0f       	add	r17, r19
			RORSC04(b0,1) 	ROR1(b0) CLC1
    2a22:	17 95       	ror	r17
    2a24:	88 94       	clc
    2a26:	91 fc       	sbrc	r9, 1
    2a28:	13 0f       	add	r17, r19
    2a2a:	17 95       	ror	r17
    2a2c:	88 94       	clc
			SCROR04(b0,2)		SCALE02(b0,3)
    2a2e:	92 fc       	sbrc	r9, 2
    2a30:	13 0f       	add	r17, r19
    2a32:	17 95       	ror	r17
    2a34:	88 94       	clc
    2a36:	93 fc       	sbrc	r9, 3
    2a38:	13 0f       	add	r17, r19
			RORSC04(b0,4) 	ROR1(b0) CLC1
    2a3a:	17 95       	ror	r17
    2a3c:	88 94       	clc
    2a3e:	94 fc       	sbrc	r9, 4
    2a40:	13 0f       	add	r17, r19
    2a42:	17 95       	ror	r17
    2a44:	88 94       	clc
			SCROR04(b0,5) 	SCALE02(b0,6)
    2a46:	95 fc       	sbrc	r9, 5
    2a48:	13 0f       	add	r17, r19
    2a4a:	17 95       	ror	r17
    2a4c:	88 94       	clc
    2a4e:	96 fc       	sbrc	r9, 6
    2a50:	13 0f       	add	r17, r19
			RORSC04(b0,7) 	ROR1(b0) CLC1
    2a52:	17 95       	ror	r17
    2a54:	88 94       	clc
    2a56:	97 fc       	sbrc	r9, 7
    2a58:	13 0f       	add	r17, r19
    2a5a:	17 95       	ror	r17
    2a5c:	88 94       	clc
			MOV_ADDDE04(b1,b0,d0,e0)
    2a5e:	03 2f       	mov	r16, r19
    2a60:	91 10       	cpse	r9, r1
    2a62:	01 2f       	mov	r16, r17
    2a64:	86 0f       	add	r24, r22
			MOV1(b0,b1)
    2a66:	10 2f       	mov	r17, r16

		{
			// while(--count)
			{
				// Loop beginning
				DNOP;
    2a68:	00 2c       	mov	r0, r0
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
    2a6a:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a6c:	00 c0       	rjmp	.+0      	; 0x2a6e <L_9740+0x54>
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
    2a6e:	17 ff       	sbrs	r17, 7
    2a70:	98 b9       	out	0x08, r25	; 8
    2a72:	30 81       	ld	r19, Z
    2a74:	00 27       	eor	r16, r16
    2a76:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a78:	00 c0       	rjmp	.+0      	; 0x2a7a <L_9740+0x60>
    2a7a:	00 c0       	rjmp	.+0      	; 0x2a7c <L_9740+0x62>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a7c:	00 2c       	mov	r0, r0
				// out.  When doing byte 1, we're doing the above for byte 2.  When we're doing byte 2,
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
    2a7e:	98 b9       	out	0x08, r25	; 8
    2a80:	31 11       	cpse	r19, r1
    2a82:	3f 0d       	add	r19, r15
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a84:	00 c0       	rjmp	.+0      	; 0x2a86 <L_9740+0x6c>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a86:	00 2c       	mov	r0, r0
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
    2a88:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a8a:	00 c0       	rjmp	.+0      	; 0x2a8c <L_9740+0x72>
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
    2a8c:	16 ff       	sbrs	r17, 6
    2a8e:	98 b9       	out	0x08, r25	; 8
    2a90:	08 f4       	brcc	.+2      	; 0x2a94 <L_10273>
    2a92:	3f ef       	ldi	r19, 0xFF	; 255

00002a94 <L_10273>:
    2a94:	f1 94       	neg	r15
    2a96:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2a98:	00 c0       	rjmp	.+0      	; 0x2a9a <L_10273+0x6>
    2a9a:	00 c0       	rjmp	.+0      	; 0x2a9c <L_10273+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2a9c:	00 2c       	mov	r0, r0
				// we're cycling back around and doing the above for byte 0.

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
    2a9e:	98 b9       	out	0x08, r25	; 8
    2aa0:	40 fd       	sbrc	r20, 0
    2aa2:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2aa4:	00 c0       	rjmp	.+0      	; 0x2aa6 <L_10273+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2aa6:	00 2c       	mov	r0, r0

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
    2aa8:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2aaa:	00 c0       	rjmp	.+0      	; 0x2aac <L_10273+0x18>

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
    2aac:	15 ff       	sbrs	r17, 5
    2aae:	98 b9       	out	0x08, r25	; 8
    2ab0:	07 95       	ror	r16
    2ab2:	88 94       	clc
    2ab4:	41 fd       	sbrc	r20, 1
    2ab6:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ab8:	00 c0       	rjmp	.+0      	; 0x2aba <L_10273+0x26>
    2aba:	00 c0       	rjmp	.+0      	; 0x2abc <L_10273+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2abc:	00 2c       	mov	r0, r0

				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
    2abe:	98 b9       	out	0x08, r25	; 8
    2ac0:	07 95       	ror	r16
    2ac2:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ac4:	00 c0       	rjmp	.+0      	; 0x2ac6 <L_10273+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ac6:	00 2c       	mov	r0, r0
				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
    2ac8:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2aca:	00 c0       	rjmp	.+0      	; 0x2acc <L_10273+0x38>
				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
    2acc:	14 ff       	sbrs	r17, 4
    2ace:	98 b9       	out	0x08, r25	; 8
    2ad0:	42 fd       	sbrc	r20, 2
    2ad2:	03 0f       	add	r16, r19
    2ad4:	07 95       	ror	r16
    2ad6:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ad8:	00 c0       	rjmp	.+0      	; 0x2ada <L_10273+0x46>
    2ada:	00 c0       	rjmp	.+0      	; 0x2adc <L_10273+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2adc:	00 2c       	mov	r0, r0
				// Inline scaling - RGB ordering
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
    2ade:	98 b9       	out	0x08, r25	; 8
    2ae0:	43 fd       	sbrc	r20, 3
    2ae2:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ae4:	00 c0       	rjmp	.+0      	; 0x2ae6 <L_10273+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ae6:	00 2c       	mov	r0, r0
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ae8:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2aea:	00 c0       	rjmp	.+0      	; 0x2aec <L_10273+0x58>
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2aec:	13 ff       	sbrs	r17, 3
    2aee:	98 b9       	out	0x08, r25	; 8
    2af0:	07 95       	ror	r16
    2af2:	88 94       	clc
    2af4:	44 fd       	sbrc	r20, 4
    2af6:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2af8:	00 c0       	rjmp	.+0      	; 0x2afa <L_10273+0x66>
    2afa:	00 c0       	rjmp	.+0      	; 0x2afc <L_10273+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2afc:	00 2c       	mov	r0, r0
				// DNOP
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2afe:	98 b9       	out	0x08, r25	; 8
    2b00:	07 95       	ror	r16
    2b02:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b04:	00 c0       	rjmp	.+0      	; 0x2b06 <L_10273+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b06:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
    2b08:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b0a:	00 c0       	rjmp	.+0      	; 0x2b0c <L_10273+0x78>
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
    2b0c:	12 ff       	sbrs	r17, 2
    2b0e:	98 b9       	out	0x08, r25	; 8
    2b10:	45 fd       	sbrc	r20, 5
    2b12:	03 0f       	add	r16, r19
    2b14:	07 95       	ror	r16
    2b16:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b18:	00 c0       	rjmp	.+0      	; 0x2b1a <L_10273+0x86>
    2b1a:	00 c0       	rjmp	.+0      	; 0x2b1c <L_10273+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b1c:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O1) 	_D2(4)	LO1	PRESCALEA2(d1)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
    2b1e:	98 b9       	out	0x08, r25	; 8
    2b20:	46 fd       	sbrc	r20, 6
    2b22:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b24:	00 c0       	rjmp	.+0      	; 0x2b26 <L_10273+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b26:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2b28:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b2a:	00 c0       	rjmp	.+0      	; 0x2b2c <L_10273+0x98>
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2b2c:	11 ff       	sbrs	r17, 1
    2b2e:	98 b9       	out	0x08, r25	; 8
    2b30:	07 95       	ror	r16
    2b32:	88 94       	clc
    2b34:	47 fd       	sbrc	r20, 7
    2b36:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b38:	00 c0       	rjmp	.+0      	; 0x2b3a <L_10273+0xa6>
    2b3a:	00 c0       	rjmp	.+0      	; 0x2b3c <L_10273+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b3c:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d1)	_D2(4)	LO1	SCALE12(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2b3e:	98 b9       	out	0x08, r25	; 8
    2b40:	07 95       	ror	r16
    2b42:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b44:	00 c0       	rjmp	.+0      	; 0x2b46 <L_10273+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b46:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2b48:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b4a:	00 c0       	rjmp	.+0      	; 0x2b4c <L_10273+0xb8>
				HI1 _D1(1) QLO2(b0, 5) RORSC14(b1,1) 	_D2(4)	LO1 RORCLC2(b1)		_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR14(b1,2)	_D2(4)	LO1 SCALE12(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC14(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR14(b1,5) 	_D2(4)	LO1 SCALE12(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC14(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2b4c:	10 ff       	sbrs	r17, 0
    2b4e:	98 b9       	out	0x08, r25	; 8
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)
    2b50:	13 2f       	mov	r17, r19
    2b52:	41 11       	cpse	r20, r1
    2b54:	10 2f       	mov	r17, r16
    2b56:	fc 0e       	add	r15, r28
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b58:	00 c0       	rjmp	.+0      	; 0x2b5a <L_10273+0xc6>
    2b5a:	00 c0       	rjmp	.+0      	; 0x2b5c <L_10273+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b5c:	00 2c       	mov	r0, r0
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)
    2b5e:	98 b9       	out	0x08, r25	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b60:	00 c0       	rjmp	.+0      	; 0x2b62 <L_10273+0xce>
    2b62:	00 c0       	rjmp	.+0      	; 0x2b64 <L_10273+0xd0>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b64:	00 2c       	mov	r0, r0
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
    2b66:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b68:	00 c0       	rjmp	.+0      	; 0x2b6a <L_10273+0xd6>
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
    2b6a:	17 ff       	sbrs	r17, 7
    2b6c:	98 b9       	out	0x08, r25	; 8
    2b6e:	32 81       	ldd	r19, Z+2	; 0x02
    2b70:	00 27       	eor	r16, r16
    2b72:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b74:	00 c0       	rjmp	.+0      	; 0x2b76 <L_10273+0xe2>
    2b76:	00 c0       	rjmp	.+0      	; 0x2b78 <L_10273+0xe4>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b78:	00 2c       	mov	r0, r0
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
    2b7a:	98 b9       	out	0x08, r25	; 8
    2b7c:	31 11       	cpse	r19, r1
    2b7e:	3e 0d       	add	r19, r14
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b80:	00 c0       	rjmp	.+0      	; 0x2b82 <L_10273+0xee>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b82:	00 2c       	mov	r0, r0
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
    2b84:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b86:	00 c0       	rjmp	.+0      	; 0x2b88 <L_10273+0xf4>
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
    2b88:	16 ff       	sbrs	r17, 6
    2b8a:	98 b9       	out	0x08, r25	; 8
    2b8c:	08 f4       	brcc	.+2      	; 0x2b90 <L_11491>
    2b8e:	3f ef       	ldi	r19, 0xFF	; 255

00002b90 <L_11491>:
    2b90:	e7 0f       	add	r30, r23
    2b92:	f1 1d       	adc	r31, r1
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2b94:	00 c0       	rjmp	.+0      	; 0x2b96 <L_11491+0x6>
    2b96:	00 c0       	rjmp	.+0      	; 0x2b98 <L_11491+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2b98:	00 2c       	mov	r0, r0
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
    2b9a:	98 b9       	out	0x08, r25	; 8
    2b9c:	50 fd       	sbrc	r21, 0
    2b9e:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ba0:	00 c0       	rjmp	.+0      	; 0x2ba2 <L_11491+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2ba2:	00 2c       	mov	r0, r0
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ba4:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ba6:	00 c0       	rjmp	.+0      	; 0x2ba8 <L_11491+0x18>
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ba8:	15 ff       	sbrs	r17, 5
    2baa:	98 b9       	out	0x08, r25	; 8
    2bac:	07 95       	ror	r16
    2bae:	88 94       	clc
    2bb0:	51 fd       	sbrc	r21, 1
    2bb2:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bb4:	00 c0       	rjmp	.+0      	; 0x2bb6 <L_11491+0x26>
    2bb6:	00 c0       	rjmp	.+0      	; 0x2bb8 <L_11491+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bb8:	00 2c       	mov	r0, r0
				}
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2bba:	98 b9       	out	0x08, r25	; 8
    2bbc:	07 95       	ror	r16
    2bbe:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bc0:	00 c0       	rjmp	.+0      	; 0x2bc2 <L_11491+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bc2:	00 2c       	mov	r0, r0
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
    2bc4:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bc6:	00 c0       	rjmp	.+0      	; 0x2bc8 <L_11491+0x38>
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
    2bc8:	14 ff       	sbrs	r17, 4
    2bca:	98 b9       	out	0x08, r25	; 8
    2bcc:	52 fd       	sbrc	r21, 2
    2bce:	03 0f       	add	r16, r19
    2bd0:	07 95       	ror	r16
    2bd2:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bd4:	00 c0       	rjmp	.+0      	; 0x2bd6 <L_11491+0x46>
    2bd6:	00 c0       	rjmp	.+0      	; 0x2bd8 <L_11491+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bd8:	00 2c       	mov	r0, r0
				MOV_ADDDE14(b0,b1,d1,e1) _D2(4) LO1 _D3(0)

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
    2bda:	98 b9       	out	0x08, r25	; 8
    2bdc:	53 fd       	sbrc	r21, 3
    2bde:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2be0:	00 c0       	rjmp	.+0      	; 0x2be2 <L_11491+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2be2:	00 2c       	mov	r0, r0

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2be4:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2be6:	00 c0       	rjmp	.+0      	; 0x2be8 <L_11491+0x58>

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2be8:	13 ff       	sbrs	r17, 3
    2bea:	98 b9       	out	0x08, r25	; 8
    2bec:	07 95       	ror	r16
    2bee:	88 94       	clc
    2bf0:	54 fd       	sbrc	r21, 4
    2bf2:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2bf4:	00 c0       	rjmp	.+0      	; 0x2bf6 <L_11491+0x66>
    2bf6:	00 c0       	rjmp	.+0      	; 0x2bf8 <L_11491+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2bf8:	00 2c       	mov	r0, r0

				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2bfa:	98 b9       	out	0x08, r25	; 8
    2bfc:	07 95       	ror	r16
    2bfe:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c00:	00 c0       	rjmp	.+0      	; 0x2c02 <L_11491+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c02:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
    2c04:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c06:	00 c0       	rjmp	.+0      	; 0x2c08 <L_11491+0x78>
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
    2c08:	12 ff       	sbrs	r17, 2
    2c0a:	98 b9       	out	0x08, r25	; 8
    2c0c:	55 fd       	sbrc	r21, 5
    2c0e:	03 0f       	add	r16, r19
    2c10:	07 95       	ror	r16
    2c12:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c14:	00 c0       	rjmp	.+0      	; 0x2c16 <L_11491+0x86>
    2c16:	00 c0       	rjmp	.+0      	; 0x2c18 <L_11491+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c18:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O2) 	_D2(4)	LO1	PRESCALEA2(d2)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
    2c1a:	98 b9       	out	0x08, r25	; 8
    2c1c:	56 fd       	sbrc	r21, 6
    2c1e:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c20:	00 c0       	rjmp	.+0      	; 0x2c22 <L_11491+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c22:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2c24:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c26:	00 c0       	rjmp	.+0      	; 0x2c28 <L_11491+0x98>
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2c28:	11 ff       	sbrs	r17, 1
    2c2a:	98 b9       	out	0x08, r25	; 8
    2c2c:	07 95       	ror	r16
    2c2e:	88 94       	clc
    2c30:	57 fd       	sbrc	r21, 7
    2c32:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c34:	00 c0       	rjmp	.+0      	; 0x2c36 <L_11491+0xa6>
    2c36:	00 c0       	rjmp	.+0      	; 0x2c38 <L_11491+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c38:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PSBIDATA4(d2)	_D2(4)	LO1	SCALE22(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2c3a:	98 b9       	out	0x08, r25	; 8
    2c3c:	07 95       	ror	r16
    2c3e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c40:	00 c0       	rjmp	.+0      	; 0x2c42 <L_11491+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c42:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2c44:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c46:	00 c0       	rjmp	.+0      	; 0x2c48 <L_11491+0xb8>
				HI1 _D1(1) QLO2(b0, 5) RORSC24(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR24(b1,2)	_D2(4)	LO1 SCALE22(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC24(b1,4) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR24(b1,5) 	_D2(4)	LO1 SCALE22(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC24(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2c48:	10 ff       	sbrs	r17, 0
    2c4a:	98 b9       	out	0x08, r25	; 8
				}

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
    2c4c:	13 2f       	mov	r17, r19
    2c4e:	51 11       	cpse	r21, r1
    2c50:	10 2f       	mov	r17, r16
    2c52:	e1 94       	neg	r14
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c54:	00 c0       	rjmp	.+0      	; 0x2c56 <L_11491+0xc6>
    2c56:	00 c0       	rjmp	.+0      	; 0x2c58 <L_11491+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c58:	00 2c       	mov	r0, r0
				}

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
    2c5a:	98 b9       	out	0x08, r25	; 8
    2c5c:	ed 0e       	add	r14, r29
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c5e:	00 c0       	rjmp	.+0      	; 0x2c60 <L_11491+0xd0>
    2c60:	00 c0       	rjmp	.+0      	; 0x2c62 <L_11491+0xd2>

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
    2c62:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c64:	00 c0       	rjmp	.+0      	; 0x2c66 <L_11491+0xd6>

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
    2c66:	17 ff       	sbrs	r17, 7
    2c68:	98 b9       	out	0x08, r25	; 8
    2c6a:	31 81       	ldd	r19, Z+1	; 0x01
    2c6c:	00 27       	eor	r16, r16
    2c6e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c70:	00 c0       	rjmp	.+0      	; 0x2c72 <L_11491+0xe2>
    2c72:	00 c0       	rjmp	.+0      	; 0x2c74 <L_11491+0xe4>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c74:	00 2c       	mov	r0, r0

				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
    2c76:	98 b9       	out	0x08, r25	; 8
    2c78:	31 11       	cpse	r19, r1
    2c7a:	38 0f       	add	r19, r24
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c7c:	00 c0       	rjmp	.+0      	; 0x2c7e <L_11491+0xee>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c7e:	00 2c       	mov	r0, r0
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
    2c80:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c82:	00 c0       	rjmp	.+0      	; 0x2c84 <L_11491+0xf4>
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
    2c84:	16 ff       	sbrs	r17, 6
    2c86:	98 b9       	out	0x08, r25	; 8
    2c88:	08 f4       	brcc	.+2      	; 0x2c8c <L_12715>
    2c8a:	3f ef       	ldi	r19, 0xFF	; 255

00002c8c <L_12715>:
    2c8c:	81 95       	neg	r24
    2c8e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c90:	00 c0       	rjmp	.+0      	; 0x2c92 <L_12715+0x6>
    2c92:	00 c0       	rjmp	.+0      	; 0x2c94 <L_12715+0x8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c94:	00 2c       	mov	r0, r0
				// Because Prescale on the middle byte also increments the data counter,
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
    2c96:	98 b9       	out	0x08, r25	; 8
    2c98:	90 fc       	sbrc	r9, 0
    2c9a:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2c9c:	00 c0       	rjmp	.+0      	; 0x2c9e <L_12715+0x12>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2c9e:	00 2c       	mov	r0, r0
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ca0:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ca2:	00 c0       	rjmp	.+0      	; 0x2ca4 <L_12715+0x18>
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2ca4:	15 ff       	sbrs	r17, 5
    2ca6:	98 b9       	out	0x08, r25	; 8
    2ca8:	07 95       	ror	r16
    2caa:	88 94       	clc
    2cac:	91 fc       	sbrc	r9, 1
    2cae:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cb0:	00 c0       	rjmp	.+0      	; 0x2cb2 <L_12715+0x26>
    2cb2:	00 c0       	rjmp	.+0      	; 0x2cb4 <L_12715+0x28>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cb4:	00 2c       	mov	r0, r0
				// we have to do both halves of updating d2 here - negating it (in the
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2cb6:	98 b9       	out	0x08, r25	; 8
    2cb8:	07 95       	ror	r16
    2cba:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cbc:	00 c0       	rjmp	.+0      	; 0x2cbe <L_12715+0x32>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cbe:	00 2c       	mov	r0, r0
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
    2cc0:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cc2:	00 c0       	rjmp	.+0      	; 0x2cc4 <L_12715+0x38>
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
    2cc4:	14 ff       	sbrs	r17, 4
    2cc6:	98 b9       	out	0x08, r25	; 8
    2cc8:	92 fc       	sbrc	r9, 2
    2cca:	03 0f       	add	r16, r19
    2ccc:	07 95       	ror	r16
    2cce:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cd0:	00 c0       	rjmp	.+0      	; 0x2cd2 <L_12715+0x46>
    2cd2:	00 c0       	rjmp	.+0      	; 0x2cd4 <L_12715+0x48>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cd4:	00 2c       	mov	r0, r0
				// MOV_NEGD24 macro) and then adding E back into it
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
    2cd6:	98 b9       	out	0x08, r25	; 8
    2cd8:	93 fc       	sbrc	r9, 3
    2cda:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cdc:	00 c0       	rjmp	.+0      	; 0x2cde <L_12715+0x52>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cde:	00 2c       	mov	r0, r0
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
    2ce0:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2ce2:	00 c0       	rjmp	.+0      	; 0x2ce4 <L_12715+0x58>
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
    2ce4:	13 ff       	sbrs	r17, 3
    2ce6:	98 b9       	out	0x08, r25	; 8
    2ce8:	07 95       	ror	r16
    2cea:	88 94       	clc
    2cec:	94 fc       	sbrc	r9, 4
    2cee:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cf0:	00 c0       	rjmp	.+0      	; 0x2cf2 <L_12715+0x66>
    2cf2:	00 c0       	rjmp	.+0      	; 0x2cf4 <L_12715+0x68>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cf4:	00 2c       	mov	r0, r0
				MOV_NEGD24(b0,b1,d2) _D2(4) LO1 ADDDE1(d2,e2) _D3(1)
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
    2cf6:	98 b9       	out	0x08, r25	; 8
    2cf8:	07 95       	ror	r16
    2cfa:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2cfc:	00 c0       	rjmp	.+0      	; 0x2cfe <L_12715+0x72>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2cfe:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
    2d00:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d02:	00 c0       	rjmp	.+0      	; 0x2d04 <L_12715+0x78>
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
    2d04:	12 ff       	sbrs	r17, 2
    2d06:	98 b9       	out	0x08, r25	; 8
    2d08:	95 fc       	sbrc	r9, 5
    2d0a:	03 0f       	add	r16, r19
    2d0c:	07 95       	ror	r16
    2d0e:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d10:	00 c0       	rjmp	.+0      	; 0x2d12 <L_12715+0x86>
    2d12:	00 c0       	rjmp	.+0      	; 0x2d14 <L_12715+0x88>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2d14:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 7) LDSCL4(b1,O0) 	_D2(4)	LO1	PRESCALEA2(d0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
    2d16:	98 b9       	out	0x08, r25	; 8
    2d18:	96 fc       	sbrc	r9, 6
    2d1a:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d1c:	00 c0       	rjmp	.+0      	; 0x2d1e <L_12715+0x92>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2d1e:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2d20:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d22:	00 c0       	rjmp	.+0      	; 0x2d24 <L_12715+0x98>
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2d24:	11 ff       	sbrs	r17, 1
    2d26:	98 b9       	out	0x08, r25	; 8
    2d28:	07 95       	ror	r16
    2d2a:	88 94       	clc
    2d2c:	97 fc       	sbrc	r9, 7
    2d2e:	03 0f       	add	r16, r19
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d30:	00 c0       	rjmp	.+0      	; 0x2d32 <L_12715+0xa6>
    2d32:	00 c0       	rjmp	.+0      	; 0x2d34 <L_12715+0xa8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2d34:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 6) PRESCALEB4(d0)	_D2(4)	LO1	SCALE02(b1,0)	_D3(2)
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
    2d36:	98 b9       	out	0x08, r25	; 8
    2d38:	07 95       	ror	r16
    2d3a:	88 94       	clc
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d3c:	00 c0       	rjmp	.+0      	; 0x2d3e <L_12715+0xb2>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2d3e:	00 2c       	mov	r0, r0
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2d40:	b8 b8       	out	0x08, r11	; 8
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d42:	00 c0       	rjmp	.+0      	; 0x2d44 <L_12715+0xb8>
				HI1 _D1(1) QLO2(b0, 5) RORSC04(b1,1) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 4) SCROR04(b1,2)	_D2(4)	LO1 SCALE02(b1,3)	_D3(2)
				HI1 _D1(1) QLO2(b0, 3) RORSC04(b1,4) 	_D2(4)	LO1 RORCLC2(b1)  	_D3(2)
				HI1 _D1(1) QLO2(b0, 2) SCROR04(b1,5) 	_D2(4)	LO1 SCALE02(b1,6)	_D3(2)
				HI1 _D1(1) QLO2(b0, 1) RORSC04(b1,7) 	_D2(4)	LO1 RORCLC2(b1) 	_D3(2)
				HI1 _D1(1) QLO2(b0, 0)
    2d44:	10 ff       	sbrs	r17, 0
    2d46:	98 b9       	out	0x08, r25	; 8
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE04(b0,b1,d0,e0) _D2(4) LO1 _D3(5)
    2d48:	13 2f       	mov	r17, r19
    2d4a:	91 10       	cpse	r9, r1
    2d4c:	10 2f       	mov	r17, r16
    2d4e:	86 0f       	add	r24, r22
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
template<> __attribute__((always_inline)) inline void _dc< 2>(register uint8_t & ) {asm __volatile__("rjmp .+0":::);}
    2d50:	00 c0       	rjmp	.+0      	; 0x2d52 <L_12715+0xc6>
    2d52:	00 c0       	rjmp	.+0      	; 0x2d54 <L_12715+0xc8>
template<> __attribute__((always_inline)) inline void _dc<-4>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-3>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-2>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc<-1>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 0>(register uint8_t & ) {}
template<> __attribute__((always_inline)) inline void _dc< 1>(register uint8_t & ) {asm __volatile__("mov r0,r0":::);}
    2d54:	00 2c       	mov	r0, r0
					case 4: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 3: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 2: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
					case 1: _D2(0) LO1 _D3(0) HI1 _D1(1) QLO2(b0,0)
				}
				MOV_ADDDE04(b0,b1,d0,e0) _D2(4) LO1 _D3(5)
    2d56:	98 b9       	out	0x08, r25	; 8
				ENDLOOP5
    2d58:	11 97       	sbiw	r26, 0x01	; 1
    2d5a:	09 f0       	breq	.+2      	; 0x2d5e <L_13695>
    2d5c:	86 ce       	rjmp	.-756    	; 0x2a6a <L_9740+0x50>

00002d5e <L_13695>:

		#if (FASTLED_ALLOW_INTERRUPTS == 1)
		// stop using the clock juggler
		TCCR0A &= ~0x30;
		#endif
	}
    2d5e:	df 91       	pop	r29
    2d60:	cf 91       	pop	r28
    2d62:	1f 91       	pop	r17
    2d64:	0f 91       	pop	r16
    2d66:	ff 90       	pop	r15
    2d68:	ef 90       	pop	r14
    2d6a:	df 90       	pop	r13
    2d6c:	cf 90       	pop	r12
    2d6e:	bf 90       	pop	r11
    2d70:	af 90       	pop	r10
    2d72:	9f 90       	pop	r9
    2d74:	08 95       	ret

00002d76 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    2d76:	0f 93       	push	r16
    2d78:	1f 93       	push	r17
    2d7a:	cf 93       	push	r28
    2d7c:	df 93       	push	r29
    2d7e:	ec 01       	movw	r28, r24
    2d80:	8b 01       	movw	r16, r22
    2d82:	0e 94 16 2b 	call	0x562c	; 0x562c <_micros>
    2d86:	2f 85       	ldd	r18, Y+15	; 0x0f
    2d88:	38 89       	ldd	r19, Y+16	; 0x10
    2d8a:	62 1b       	sub	r22, r18
    2d8c:	73 0b       	sbc	r23, r19
    2d8e:	6a 30       	cpi	r22, 0x0A	; 10
    2d90:	71 05       	cpc	r23, r1
    2d92:	b8 f3       	brcs	.-18     	; 0x2d82 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    2d94:	f8 94       	cli
    2d96:	c8 01       	movw	r24, r16
    2d98:	09 de       	rcall	.-1006   	; 0x29ac <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	42 81       	ldd	r20, Z+2	; 0x02
    2d9e:	53 81       	ldd	r21, Z+3	; 0x03
    2da0:	20 ee       	ldi	r18, 0xE0	; 224
    2da2:	31 e0       	ldi	r19, 0x01	; 1
    2da4:	da 01       	movw	r26, r20
    2da6:	0e 94 98 34 	call	0x6930	; 0x6930 <__usmulhisi3>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	f4 e0       	ldi	r31, 0x04	; 4
    2db0:	b6 95       	lsr	r27
    2db2:	a7 95       	ror	r26
    2db4:	97 95       	ror	r25
    2db6:	87 95       	ror	r24
    2db8:	fa 95       	dec	r31
    2dba:	d1 f7       	brne	.-12     	; 0x2db0 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    2dbc:	30 e0       	ldi	r19, 0x00	; 0
    2dbe:	20 e0       	ldi	r18, 0x00	; 0
    2dc0:	b9 01       	movw	r22, r18
    2dc2:	ea e9       	ldi	r30, 0x9A	; 154
    2dc4:	4e 9f       	mul	r20, r30
    2dc6:	04 0e       	add	r0, r20
    2dc8:	61 1d       	adc	r22, r1
    2dca:	5e 9f       	mul	r21, r30
    2dcc:	60 0d       	add	r22, r0
    2dce:	71 1d       	adc	r23, r1
    2dd0:	11 24       	eor	r1, r1
    2dd2:	65 0f       	add	r22, r21
    2dd4:	71 1d       	adc	r23, r1
    2dd6:	86 0f       	add	r24, r22
    2dd8:	97 1f       	adc	r25, r23
    2dda:	a1 1d       	adc	r26, r1
    2ddc:	b1 1d       	adc	r27, r1
    2dde:	89 3e       	cpi	r24, 0xE9	; 233
    2de0:	f3 e0       	ldi	r31, 0x03	; 3
    2de2:	9f 07       	cpc	r25, r31
    2de4:	a1 05       	cpc	r26, r1
    2de6:	b1 05       	cpc	r27, r1
    2de8:	08 f4       	brcc	.+2      	; 0x2dec <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    2dea:	34 c0       	rjmp	.+104    	; 0x2e54 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    2dec:	88 5e       	subi	r24, 0xE8	; 232
    2dee:	93 40       	sbci	r25, 0x03	; 3
    2df0:	a1 09       	sbc	r26, r1
    2df2:	b1 09       	sbc	r27, r1
    2df4:	42 e0       	ldi	r20, 0x02	; 2
    2df6:	b6 95       	lsr	r27
    2df8:	a7 95       	ror	r26
    2dfa:	97 95       	ror	r25
    2dfc:	87 95       	ror	r24
    2dfe:	4a 95       	dec	r20
    2e00:	d1 f7       	brne	.-12     	; 0x2df6 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    2e02:	47 e0       	ldi	r20, 0x07	; 7
    2e04:	84 9f       	mul	r24, r20
    2e06:	08 0e       	add	r0, r24
    2e08:	21 1d       	adc	r18, r1
    2e0a:	94 9f       	mul	r25, r20
    2e0c:	20 0d       	add	r18, r0
    2e0e:	31 1d       	adc	r19, r1
    2e10:	11 24       	eor	r1, r1
    2e12:	29 0f       	add	r18, r25
    2e14:	31 1d       	adc	r19, r1
    2e16:	60 91 70 0e 	lds	r22, 0x0E70	; 0x800e70 <gTimeErrorAccum256ths>
    2e1a:	70 e0       	ldi	r23, 0x00	; 0
    2e1c:	86 0f       	add	r24, r22
    2e1e:	97 1f       	adc	r25, r23
    2e20:	82 0f       	add	r24, r18
    2e22:	93 1f       	adc	r25, r19
    2e24:	40 91 8f 0e 	lds	r20, 0x0E8F	; 0x800e8f <timer0_millis_count>
    2e28:	50 91 90 0e 	lds	r21, 0x0E90	; 0x800e90 <timer0_millis_count+0x1>
    2e2c:	60 91 91 0e 	lds	r22, 0x0E91	; 0x800e91 <timer0_millis_count+0x2>
    2e30:	70 91 92 0e 	lds	r23, 0x0E92	; 0x800e92 <timer0_millis_count+0x3>
    2e34:	29 2f       	mov	r18, r25
    2e36:	33 27       	eor	r19, r19
    2e38:	42 0f       	add	r20, r18
    2e3a:	53 1f       	adc	r21, r19
    2e3c:	61 1d       	adc	r22, r1
    2e3e:	71 1d       	adc	r23, r1
    2e40:	40 93 8f 0e 	sts	0x0E8F, r20	; 0x800e8f <timer0_millis_count>
    2e44:	50 93 90 0e 	sts	0x0E90, r21	; 0x800e90 <timer0_millis_count+0x1>
    2e48:	60 93 91 0e 	sts	0x0E91, r22	; 0x800e91 <timer0_millis_count+0x2>
    2e4c:	70 93 92 0e 	sts	0x0E92, r23	; 0x800e92 <timer0_millis_count+0x3>
    2e50:	80 93 70 0e 	sts	0x0E70, r24	; 0x800e70 <gTimeErrorAccum256ths>
    2e54:	78 94       	sei
    2e56:	0e 94 16 2b 	call	0x562c	; 0x562c <_micros>
    2e5a:	78 8b       	std	Y+16, r23	; 0x10
    2e5c:	6f 87       	std	Y+15, r22	; 0x0f
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	0f 91       	pop	r16
    2e66:	08 95       	ret

00002e68 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    2e68:	0f 93       	push	r16
    2e6a:	1f 93       	push	r17
    2e6c:	cf 93       	push	r28
    2e6e:	df 93       	push	r29
    2e70:	20 91 9a 07 	lds	r18, 0x079A	; 0x80079a <__data_end>
    2e74:	2f 5f       	subi	r18, 0xFF	; 255
    2e76:	32 2f       	mov	r19, r18
    2e78:	37 70       	andi	r19, 0x07	; 7
    2e7a:	30 93 9a 07 	sts	0x079A, r19	; 0x80079a <__data_end>
    2e7e:	20 ff       	sbrs	r18, 0
    2e80:	2b c0       	rjmp	.+86     	; 0x2ed8 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    2e82:	20 e8       	ldi	r18, 0x80	; 128
    2e84:	31 fd       	sbrc	r19, 1
    2e86:	20 64       	ori	r18, 0x40	; 64
    2e88:	34 70       	andi	r19, 0x04	; 4
    2e8a:	09 f0       	breq	.+2      	; 0x2e8e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    2e8c:	20 62       	ori	r18, 0x20	; 32
    2e8e:	20 5f       	subi	r18, 0xF0	; 240
    2e90:	fc 01       	movw	r30, r24
    2e92:	ec 01       	movw	r28, r24
    2e94:	23 96       	adiw	r28, 0x03	; 3
    2e96:	00 e0       	ldi	r16, 0x00	; 0
    2e98:	11 e0       	ldi	r17, 0x01	; 1
    2e9a:	64 85       	ldd	r22, Z+12	; 0x0c
    2e9c:	66 23       	and	r22, r22
    2e9e:	29 f0       	breq	.+10     	; 0x2eaa <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    2ea0:	70 e0       	ldi	r23, 0x00	; 0
    2ea2:	c8 01       	movw	r24, r16
    2ea4:	0e 94 2f 34 	call	0x685e	; 0x685e <__divmodhi4>
    2ea8:	6f 5f       	subi	r22, 0xFF	; 255
    2eaa:	61 87       	std	Z+9, r22	; 0x09
    2eac:	32 2f       	mov	r19, r18
    2eae:	36 9f       	mul	r19, r22
    2eb0:	03 0e       	add	r0, r19
    2eb2:	30 e0       	ldi	r19, 0x00	; 0
    2eb4:	31 1d       	adc	r19, r1
    2eb6:	11 24       	eor	r1, r1
    2eb8:	31 11       	cpse	r19, r1
    2eba:	10 c0       	rjmp	.+32     	; 0x2edc <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    2ebc:	16 82       	std	Z+6, r1	; 0x06
    2ebe:	66 23       	and	r22, r22
    2ec0:	11 f0       	breq	.+4      	; 0x2ec6 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    2ec2:	61 50       	subi	r22, 0x01	; 1
    2ec4:	61 87       	std	Z+9, r22	; 0x09
    2ec6:	31 96       	adiw	r30, 0x01	; 1
    2ec8:	ec 17       	cp	r30, r28
    2eca:	fd 07       	cpc	r31, r29
    2ecc:	31 f7       	brne	.-52     	; 0x2e9a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    2ece:	df 91       	pop	r29
    2ed0:	cf 91       	pop	r28
    2ed2:	1f 91       	pop	r17
    2ed4:	0f 91       	pop	r16
    2ed6:	08 95       	ret
    2ed8:	20 e0       	ldi	r18, 0x00	; 0
    2eda:	d4 cf       	rjmp	.-88     	; 0x2e84 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    2edc:	31 50       	subi	r19, 0x01	; 1
    2ede:	36 83       	std	Z+6, r19	; 0x06
    2ee0:	ee cf       	rjmp	.-36     	; 0x2ebe <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

00002ee2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    2ee2:	0f 93       	push	r16
    2ee4:	1f 93       	push	r17
    2ee6:	cf 93       	push	r28
    2ee8:	df 93       	push	r29
    2eea:	cd b7       	in	r28, 0x3d	; 61
    2eec:	de b7       	in	r29, 0x3e	; 62
    2eee:	62 97       	sbiw	r28, 0x12	; 18
    2ef0:	0f b6       	in	r0, 0x3f	; 63
    2ef2:	f8 94       	cli
    2ef4:	de bf       	out	0x3e, r29	; 62
    2ef6:	0f be       	out	0x3f, r0	; 63
    2ef8:	cd bf       	out	0x3d, r28	; 61
    2efa:	8c 01       	movw	r16, r24
    2efc:	f9 01       	movw	r30, r18
    2efe:	dc 01       	movw	r26, r24
    2f00:	1c 96       	adiw	r26, 0x0c	; 12
    2f02:	8c 91       	ld	r24, X
    2f04:	7a 83       	std	Y+2, r23	; 0x02
    2f06:	69 83       	std	Y+1, r22	; 0x01
    2f08:	5c 83       	std	Y+4, r21	; 0x04
    2f0a:	4b 83       	std	Y+3, r20	; 0x03
    2f0c:	5e 83       	std	Y+6, r21	; 0x06
    2f0e:	4d 83       	std	Y+5, r20	; 0x05
    2f10:	90 81       	ld	r25, Z
    2f12:	9d 87       	std	Y+13, r25	; 0x0d
    2f14:	91 81       	ldd	r25, Z+1	; 0x01
    2f16:	9e 87       	std	Y+14, r25	; 0x0e
    2f18:	92 81       	ldd	r25, Z+2	; 0x02
    2f1a:	9f 87       	std	Y+15, r25	; 0x0f
    2f1c:	81 30       	cpi	r24, 0x01	; 1
    2f1e:	e1 f4       	brne	.+56     	; 0x2f58 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    2f20:	ce 01       	movw	r24, r28
    2f22:	01 96       	adiw	r24, 0x01	; 1
    2f24:	a1 df       	rcall	.-190    	; 0x2e68 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    2f26:	18 8a       	std	Y+16, r1	; 0x10
    2f28:	1a 8a       	std	Y+18, r1	; 0x12
    2f2a:	19 8a       	std	Y+17, r1	; 0x11
    2f2c:	d8 01       	movw	r26, r16
    2f2e:	ed 91       	ld	r30, X+
    2f30:	fc 91       	ld	r31, X
    2f32:	04 84       	ldd	r0, Z+12	; 0x0c
    2f34:	f5 85       	ldd	r31, Z+13	; 0x0d
    2f36:	e0 2d       	mov	r30, r0
    2f38:	be 01       	movw	r22, r28
    2f3a:	6f 5f       	subi	r22, 0xFF	; 255
    2f3c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f3e:	c8 01       	movw	r24, r16
    2f40:	09 95       	icall
    2f42:	62 96       	adiw	r28, 0x12	; 18
    2f44:	0f b6       	in	r0, 0x3f	; 63
    2f46:	f8 94       	cli
    2f48:	de bf       	out	0x3e, r29	; 62
    2f4a:	0f be       	out	0x3f, r0	; 63
    2f4c:	cd bf       	out	0x3d, r28	; 61
    2f4e:	df 91       	pop	r29
    2f50:	cf 91       	pop	r28
    2f52:	1f 91       	pop	r17
    2f54:	0f 91       	pop	r16
    2f56:	08 95       	ret
    2f58:	1c 86       	std	Y+12, r1	; 0x0c
    2f5a:	1b 86       	std	Y+11, r1	; 0x0b
    2f5c:	1a 86       	std	Y+10, r1	; 0x0a
    2f5e:	19 86       	std	Y+9, r1	; 0x09
    2f60:	18 86       	std	Y+8, r1	; 0x08
    2f62:	1f 82       	std	Y+7, r1	; 0x07
    2f64:	e0 cf       	rjmp	.-64     	; 0x2f26 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

00002f66 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    2f66:	0f 93       	push	r16
    2f68:	1f 93       	push	r17
    2f6a:	cf 93       	push	r28
    2f6c:	df 93       	push	r29
    2f6e:	cd b7       	in	r28, 0x3d	; 61
    2f70:	de b7       	in	r29, 0x3e	; 62
    2f72:	62 97       	sbiw	r28, 0x12	; 18
    2f74:	0f b6       	in	r0, 0x3f	; 63
    2f76:	f8 94       	cli
    2f78:	de bf       	out	0x3e, r29	; 62
    2f7a:	0f be       	out	0x3f, r0	; 63
    2f7c:	cd bf       	out	0x3d, r28	; 61
    2f7e:	8c 01       	movw	r16, r24
    2f80:	f9 01       	movw	r30, r18
    2f82:	dc 01       	movw	r26, r24
    2f84:	1c 96       	adiw	r26, 0x0c	; 12
    2f86:	8c 91       	ld	r24, X
    2f88:	7a 83       	std	Y+2, r23	; 0x02
    2f8a:	69 83       	std	Y+1, r22	; 0x01
    2f8c:	5c 83       	std	Y+4, r21	; 0x04
    2f8e:	4b 83       	std	Y+3, r20	; 0x03
    2f90:	5e 83       	std	Y+6, r21	; 0x06
    2f92:	4d 83       	std	Y+5, r20	; 0x05
    2f94:	90 81       	ld	r25, Z
    2f96:	9d 87       	std	Y+13, r25	; 0x0d
    2f98:	91 81       	ldd	r25, Z+1	; 0x01
    2f9a:	9e 87       	std	Y+14, r25	; 0x0e
    2f9c:	92 81       	ldd	r25, Z+2	; 0x02
    2f9e:	9f 87       	std	Y+15, r25	; 0x0f
    2fa0:	81 30       	cpi	r24, 0x01	; 1
    2fa2:	e9 f4       	brne	.+58     	; 0x2fde <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    2fa4:	ce 01       	movw	r24, r28
    2fa6:	01 96       	adiw	r24, 0x01	; 1
    2fa8:	5f df       	rcall	.-322    	; 0x2e68 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    2faa:	83 e0       	ldi	r24, 0x03	; 3
    2fac:	88 8b       	std	Y+16, r24	; 0x10
    2fae:	1a 8a       	std	Y+18, r1	; 0x12
    2fb0:	19 8a       	std	Y+17, r1	; 0x11
    2fb2:	d8 01       	movw	r26, r16
    2fb4:	ed 91       	ld	r30, X+
    2fb6:	fc 91       	ld	r31, X
    2fb8:	04 84       	ldd	r0, Z+12	; 0x0c
    2fba:	f5 85       	ldd	r31, Z+13	; 0x0d
    2fbc:	e0 2d       	mov	r30, r0
    2fbe:	be 01       	movw	r22, r28
    2fc0:	6f 5f       	subi	r22, 0xFF	; 255
    2fc2:	7f 4f       	sbci	r23, 0xFF	; 255
    2fc4:	c8 01       	movw	r24, r16
    2fc6:	09 95       	icall
    2fc8:	62 96       	adiw	r28, 0x12	; 18
    2fca:	0f b6       	in	r0, 0x3f	; 63
    2fcc:	f8 94       	cli
    2fce:	de bf       	out	0x3e, r29	; 62
    2fd0:	0f be       	out	0x3f, r0	; 63
    2fd2:	cd bf       	out	0x3d, r28	; 61
    2fd4:	df 91       	pop	r29
    2fd6:	cf 91       	pop	r28
    2fd8:	1f 91       	pop	r17
    2fda:	0f 91       	pop	r16
    2fdc:	08 95       	ret
    2fde:	1c 86       	std	Y+12, r1	; 0x0c
    2fe0:	1b 86       	std	Y+11, r1	; 0x0b
    2fe2:	1a 86       	std	Y+10, r1	; 0x0a
    2fe4:	19 86       	std	Y+9, r1	; 0x09
    2fe6:	18 86       	std	Y+8, r1	; 0x08
    2fe8:	1f 82       	std	Y+7, r1	; 0x07
    2fea:	df cf       	rjmp	.-66     	; 0x2faa <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

00002fec <_GLOBAL__sub_I_matrix>:
    2fec:	0f b6       	in	r0, 0x3f	; 63
    2fee:	f8 94       	cli
    2ff0:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <timer0_millis_count>
    2ff4:	90 91 90 0e 	lds	r25, 0x0E90	; 0x800e90 <timer0_millis_count+0x1>
    2ff8:	a0 91 91 0e 	lds	r26, 0x0E91	; 0x800e91 <timer0_millis_count+0x2>
    2ffc:	b0 91 92 0e 	lds	r27, 0x0E92	; 0x800e92 <timer0_millis_count+0x3>
    3000:	0f be       	out	0x3f, r0	; 63
    3002:	90 93 66 08 	sts	0x0866, r25	; 0x800866 <lastLEDchange+0x1>
    3006:	80 93 65 08 	sts	0x0865, r24	; 0x800865 <lastLEDchange>
    300a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    300e:	80 93 2d 08 	sts	0x082D, r24	; 0x80082d <r>
    3012:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    3016:	80 93 2c 08 	sts	0x082C, r24	; 0x80082c <g>
    301a:	0e 94 58 05 	call	0xab0	; 0xab0 <getRandomColorValue()>
    301e:	80 93 2b 08 	sts	0x082B, r24	; 0x80082b <b>
    3022:	61 ec       	ldi	r22, 0xC1	; 193
    3024:	73 e0       	ldi	r23, 0x03	; 3
    3026:	8e ed       	ldi	r24, 0xDE	; 222
    3028:	97 e0       	ldi	r25, 0x07	; 7
    302a:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    302e:	6c eb       	ldi	r22, 0xBC	; 188
    3030:	73 e0       	ldi	r23, 0x03	; 3
    3032:	85 ee       	ldi	r24, 0xE5	; 229
    3034:	97 e0       	ldi	r25, 0x07	; 7
    3036:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    303a:	6a eb       	ldi	r22, 0xBA	; 186
    303c:	73 e0       	ldi	r23, 0x03	; 3
    303e:	8c ee       	ldi	r24, 0xEC	; 236
    3040:	97 e0       	ldi	r25, 0x07	; 7
    3042:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    3046:	67 eb       	ldi	r22, 0xB7	; 183
    3048:	73 e0       	ldi	r23, 0x03	; 3
    304a:	83 ef       	ldi	r24, 0xF3	; 243
    304c:	97 e0       	ldi	r25, 0x07	; 7
    304e:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    3052:	62 eb       	ldi	r22, 0xB2	; 178
    3054:	73 e0       	ldi	r23, 0x03	; 3
    3056:	8a ef       	ldi	r24, 0xFA	; 250
    3058:	97 e0       	ldi	r25, 0x07	; 7
    305a:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    305e:	6e ea       	ldi	r22, 0xAE	; 174
    3060:	73 e0       	ldi	r23, 0x03	; 3
    3062:	81 e0       	ldi	r24, 0x01	; 1
    3064:	98 e0       	ldi	r25, 0x08	; 8
    3066:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    306a:	68 ea       	ldi	r22, 0xA8	; 168
    306c:	73 e0       	ldi	r23, 0x03	; 3
    306e:	88 e0       	ldi	r24, 0x08	; 8
    3070:	98 e0       	ldi	r25, 0x08	; 8
    3072:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    3076:	65 ea       	ldi	r22, 0xA5	; 165
    3078:	73 e0       	ldi	r23, 0x03	; 3
    307a:	8f e0       	ldi	r24, 0x0F	; 15
    307c:	98 e0       	ldi	r25, 0x08	; 8
    307e:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    3082:	60 ea       	ldi	r22, 0xA0	; 160
    3084:	73 e0       	ldi	r23, 0x03	; 3
    3086:	86 e1       	ldi	r24, 0x16	; 22
    3088:	98 e0       	ldi	r25, 0x08	; 8
    308a:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    308e:	6b e9       	ldi	r22, 0x9B	; 155
    3090:	73 e0       	ldi	r23, 0x03	; 3
    3092:	8d e1       	ldi	r24, 0x1D	; 29
    3094:	98 e0       	ldi	r25, 0x08	; 8
    3096:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    309a:	66 e9       	ldi	r22, 0x96	; 150
    309c:	73 e0       	ldi	r23, 0x03	; 3
    309e:	84 eb       	ldi	r24, 0xB4	; 180
    30a0:	97 e0       	ldi	r25, 0x07	; 7
    30a2:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    30a6:	6f e8       	ldi	r22, 0x8F	; 143
    30a8:	73 e0       	ldi	r23, 0x03	; 3
    30aa:	8b eb       	ldi	r24, 0xBB	; 187
    30ac:	97 e0       	ldi	r25, 0x07	; 7
    30ae:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    30b2:	66 e8       	ldi	r22, 0x86	; 134
    30b4:	73 e0       	ldi	r23, 0x03	; 3
    30b6:	82 ec       	ldi	r24, 0xC2	; 194
    30b8:	97 e0       	ldi	r25, 0x07	; 7
    30ba:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    30be:	62 e8       	ldi	r22, 0x82	; 130
    30c0:	73 e0       	ldi	r23, 0x03	; 3
    30c2:	89 ec       	ldi	r24, 0xC9	; 201
    30c4:	97 e0       	ldi	r25, 0x07	; 7
    30c6:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    30ca:	6e e7       	ldi	r22, 0x7E	; 126
    30cc:	73 e0       	ldi	r23, 0x03	; 3
    30ce:	80 ed       	ldi	r24, 0xD0	; 208
    30d0:	97 e0       	ldi	r25, 0x07	; 7
    30d2:	0e 94 48 32 	call	0x6490	; 0x6490 <String::String(char const*)>
    30d6:	67 e7       	ldi	r22, 0x77	; 119
    30d8:	73 e0       	ldi	r23, 0x03	; 3
    30da:	87 ed       	ldi	r24, 0xD7	; 215
    30dc:	97 e0       	ldi	r25, 0x07	; 7
    30de:	0c 94 48 32 	jmp	0x6490	; 0x6490 <String::String(char const*)>

000030e2 <_GLOBAL__sub_D_matrix>:
    30e2:	cf 93       	push	r28
    30e4:	df 93       	push	r29
    30e6:	ce ed       	ldi	r28, 0xDE	; 222
    30e8:	d7 e0       	ldi	r29, 0x07	; 7
    30ea:	27 97       	sbiw	r28, 0x07	; 7
    30ec:	ce 01       	movw	r24, r28
    30ee:	0e 94 df 31 	call	0x63be	; 0x63be <String::~String()>
    30f2:	87 e0       	ldi	r24, 0x07	; 7
    30f4:	c4 3b       	cpi	r28, 0xB4	; 180
    30f6:	d8 07       	cpc	r29, r24
    30f8:	c1 f7       	brne	.-16     	; 0x30ea <_GLOBAL__sub_D_matrix+0x8>
    30fa:	c4 e2       	ldi	r28, 0x24	; 36
    30fc:	d8 e0       	ldi	r29, 0x08	; 8
    30fe:	27 97       	sbiw	r28, 0x07	; 7
    3100:	ce 01       	movw	r24, r28
    3102:	0e 94 df 31 	call	0x63be	; 0x63be <String::~String()>
    3106:	87 e0       	ldi	r24, 0x07	; 7
    3108:	ce 3d       	cpi	r28, 0xDE	; 222
    310a:	d8 07       	cpc	r29, r24
    310c:	c1 f7       	brne	.-16     	; 0x30fe <_GLOBAL__sub_D_matrix+0x1c>
    310e:	df 91       	pop	r29
    3110:	cf 91       	pop	r28
    3112:	08 95       	ret

00003114 <checkIncomingMIDI()>:
    3114:	8a e9       	ldi	r24, 0x9A	; 154
    3116:	9e e0       	ldi	r25, 0x0E	; 14
    3118:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <HardwareSerial::available()>
    311c:	89 2b       	or	r24, r25
    311e:	d9 f0       	breq	.+54     	; 0x3156 <checkIncomingMIDI()+0x42>
    3120:	8a e9       	ldi	r24, 0x9A	; 154
    3122:	9e e0       	ldi	r25, 0x0E	; 14
    3124:	0e 94 76 2d 	call	0x5aec	; 0x5aec <HardwareSerial::read()>
    3128:	80 93 7a 08 	sts	0x087A, r24	; 0x80087a <incomingMidiByte>
    312c:	68 2f       	mov	r22, r24
    312e:	8f e0       	ldi	r24, 0x0F	; 15
    3130:	9f e0       	ldi	r25, 0x0F	; 15
    3132:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    3136:	60 91 7a 08 	lds	r22, 0x087A	; 0x80087a <incomingMidiByte>
    313a:	6f 3f       	cpi	r22, 0xFF	; 255
    313c:	61 f0       	breq	.+24     	; 0x3156 <checkIncomingMIDI()+0x42>
    313e:	67 ff       	sbrs	r22, 7
    3140:	11 c0       	rjmp	.+34     	; 0x3164 <checkIncomingMIDI()+0x50>
    3142:	60 93 79 08 	sts	0x0879, r22	; 0x800879 <midiStatusByte>
    3146:	10 92 78 08 	sts	0x0878, r1	; 0x800878 <midiDataByte1>
    314a:	10 92 77 08 	sts	0x0877, r1	; 0x800877 <midiDataByte2>
    314e:	8f e0       	ldi	r24, 0x0F	; 15
    3150:	9f e0       	ldi	r25, 0x0F	; 15
    3152:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    3156:	8a e9       	ldi	r24, 0x9A	; 154
    3158:	9e e0       	ldi	r25, 0x0E	; 14
    315a:	0e 94 43 2d 	call	0x5a86	; 0x5a86 <HardwareSerial::available()>
    315e:	89 2b       	or	r24, r25
    3160:	c9 f6       	brne	.-78     	; 0x3114 <checkIncomingMIDI()>
    3162:	08 95       	ret
    3164:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <midiDataByte1>
    3168:	81 11       	cpse	r24, r1
    316a:	37 c0       	rjmp	.+110    	; 0x31da <checkIncomingMIDI()+0xc6>
    316c:	60 93 78 08 	sts	0x0878, r22	; 0x800878 <midiDataByte1>
    3170:	60 91 79 08 	lds	r22, 0x0879	; 0x800879 <midiStatusByte>
    3174:	8f e0       	ldi	r24, 0x0F	; 15
    3176:	9f e0       	ldi	r25, 0x0F	; 15
    3178:	0e 94 14 05 	call	0xa28	; 0xa28 <Print::print(unsigned char)>
    317c:	68 e3       	ldi	r22, 0x38	; 56
    317e:	71 e0       	ldi	r23, 0x01	; 1
    3180:	8f e0       	ldi	r24, 0x0F	; 15
    3182:	9f e0       	ldi	r25, 0x0F	; 15
    3184:	0e 94 13 05 	call	0xa26	; 0xa26 <Print::print(char const*)>
    3188:	60 91 78 08 	lds	r22, 0x0878	; 0x800878 <midiDataByte1>
    318c:	8f e0       	ldi	r24, 0x0F	; 15
    318e:	9f e0       	ldi	r25, 0x0F	; 15
    3190:	0e 94 14 05 	call	0xa28	; 0xa28 <Print::print(unsigned char)>
    3194:	68 e3       	ldi	r22, 0x38	; 56
    3196:	71 e0       	ldi	r23, 0x01	; 1
    3198:	8f e0       	ldi	r24, 0x0F	; 15
    319a:	9f e0       	ldi	r25, 0x0F	; 15
    319c:	0e 94 13 05 	call	0xa26	; 0xa26 <Print::print(char const*)>
    31a0:	60 91 77 08 	lds	r22, 0x0877	; 0x800877 <midiDataByte2>
    31a4:	8f e0       	ldi	r24, 0x0F	; 15
    31a6:	9f e0       	ldi	r25, 0x0F	; 15
    31a8:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    31ac:	80 91 79 08 	lds	r24, 0x0879	; 0x800879 <midiStatusByte>
    31b0:	89 3b       	cpi	r24, 0xB9	; 185
    31b2:	89 f6       	brne	.-94     	; 0x3156 <checkIncomingMIDI()+0x42>
    31b4:	80 91 78 08 	lds	r24, 0x0878	; 0x800878 <midiDataByte1>
    31b8:	86 31       	cpi	r24, 0x16	; 22
    31ba:	69 f6       	brne	.-102    	; 0x3156 <checkIncomingMIDI()+0x42>
    31bc:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <midiDataByte2>
    31c0:	88 23       	and	r24, r24
    31c2:	49 f2       	breq	.-110    	; 0x3156 <checkIncomingMIDI()+0x42>
    31c4:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <switchToSong(unsigned char)>
    31c8:	6a e3       	ldi	r22, 0x3A	; 58
    31ca:	71 e0       	ldi	r23, 0x01	; 1
    31cc:	8f e0       	ldi	r24, 0x0F	; 15
    31ce:	9f e0       	ldi	r25, 0x0F	; 15
    31d0:	0e 94 13 05 	call	0xa26	; 0xa26 <Print::print(char const*)>
    31d4:	60 91 77 08 	lds	r22, 0x0877	; 0x800877 <midiDataByte2>
    31d8:	ba cf       	rjmp	.-140    	; 0x314e <checkIncomingMIDI()+0x3a>
    31da:	80 91 77 08 	lds	r24, 0x0877	; 0x800877 <midiDataByte2>
    31de:	81 11       	cpse	r24, r1
    31e0:	c7 cf       	rjmp	.-114    	; 0x3170 <checkIncomingMIDI()+0x5c>
    31e2:	60 93 77 08 	sts	0x0877, r22	; 0x800877 <midiDataByte2>
    31e6:	c4 cf       	rjmp	.-120    	; 0x3170 <checkIncomingMIDI()+0x5c>

000031e8 <loop>:
    31e8:	8f 92       	push	r8
    31ea:	9f 92       	push	r9
    31ec:	af 92       	push	r10
    31ee:	bf 92       	push	r11
    31f0:	cf 92       	push	r12
    31f2:	df 92       	push	r13
    31f4:	ef 92       	push	r14
    31f6:	ff 92       	push	r15
    31f8:	0f 93       	push	r16
    31fa:	1f 93       	push	r17
    31fc:	cf 93       	push	r28
    31fe:	80 91 67 08 	lds	r24, 0x0867	; 0x800867 <ISR_USART_got_a_byte>
    3202:	88 23       	and	r24, r24
    3204:	41 f0       	breq	.+16     	; 0x3216 <loop+0x2e>
    3206:	60 91 68 08 	lds	r22, 0x0868	; 0x800868 <ISR_received_USART_byte>
    320a:	8f e0       	ldi	r24, 0x0F	; 15
    320c:	9f e0       	ldi	r25, 0x0F	; 15
    320e:	0e 94 1b 05 	call	0xa36	; 0xa36 <Print::println(unsigned char)>
    3212:	10 92 67 08 	sts	0x0867, r1	; 0x800867 <ISR_USART_got_a_byte>
    3216:	80 91 69 08 	lds	r24, 0x0869	; 0x800869 <OneSecondHasPast>
    321a:	88 23       	and	r24, r24
    321c:	39 f0       	breq	.+14     	; 0x322c <loop+0x44>
    321e:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <secondsForVoltage>
    3222:	8f 5f       	subi	r24, 0xFF	; 255
    3224:	80 93 74 08 	sts	0x0874, r24	; 0x800874 <secondsForVoltage>
    3228:	10 92 69 08 	sts	0x0869, r1	; 0x800869 <OneSecondHasPast>
    322c:	80 91 74 08 	lds	r24, 0x0874	; 0x800874 <secondsForVoltage>
    3230:	88 23       	and	r24, r24
    3232:	09 f4       	brne	.+2      	; 0x3236 <loop+0x4e>
    3234:	46 c0       	rjmp	.+140    	; 0x32c2 <loop+0xda>
    3236:	c0 91 76 08 	lds	r28, 0x0876	; 0x800876 <voltageSmooth>
    323a:	10 92 74 08 	sts	0x0874, r1	; 0x800874 <secondsForVoltage>
    323e:	88 e2       	ldi	r24, 0x28	; 40
    3240:	0e 94 5e 29 	call	0x52bc	; 0x52bc <analogRead>
    3244:	bc 01       	movw	r22, r24
    3246:	99 0f       	add	r25, r25
    3248:	88 0b       	sbc	r24, r24
    324a:	99 0b       	sbc	r25, r25
    324c:	1f 92       	push	r1
    324e:	1f 92       	push	r1
    3250:	1f 92       	push	r1
    3252:	28 e7       	ldi	r18, 0x78	; 120
    3254:	2f 93       	push	r18
    3256:	a1 2c       	mov	r10, r1
    3258:	b1 2c       	mov	r11, r1
    325a:	65 01       	movw	r12, r10
    325c:	ee 24       	eor	r14, r14
    325e:	ea 94       	dec	r14
    3260:	13 e0       	ldi	r17, 0x03	; 3
    3262:	f1 2e       	mov	r15, r17
    3264:	00 e0       	ldi	r16, 0x00	; 0
    3266:	10 e0       	ldi	r17, 0x00	; 0
    3268:	20 e0       	ldi	r18, 0x00	; 0
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	a9 01       	movw	r20, r18
    326e:	0e 94 a0 31 	call	0x6340	; 0x6340 <map(long, long, long, long, long)>
    3272:	4b 01       	movw	r8, r22
    3274:	5c 01       	movw	r10, r24
    3276:	6c 2f       	mov	r22, r28
    3278:	70 e0       	ldi	r23, 0x00	; 0
    327a:	90 e0       	ldi	r25, 0x00	; 0
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	0e 94 1d 33 	call	0x663a	; 0x663a <__floatsisf>
    3282:	23 e3       	ldi	r18, 0x33	; 51
    3284:	33 e3       	ldi	r19, 0x33	; 51
    3286:	43 e3       	ldi	r20, 0x33	; 51
    3288:	5f e3       	ldi	r21, 0x3F	; 63
    328a:	0e 94 a9 33 	call	0x6752	; 0x6752 <__mulsf3>
    328e:	6b 01       	movw	r12, r22
    3290:	7c 01       	movw	r14, r24
    3292:	c5 01       	movw	r24, r10
    3294:	b4 01       	movw	r22, r8
    3296:	0e 94 1d 33 	call	0x663a	; 0x663a <__floatsisf>
    329a:	2a e9       	ldi	r18, 0x9A	; 154
    329c:	39 e9       	ldi	r19, 0x99	; 153
    329e:	49 e9       	ldi	r20, 0x99	; 153
    32a0:	5e e3       	ldi	r21, 0x3E	; 62
    32a2:	0e 94 a9 33 	call	0x6752	; 0x6752 <__mulsf3>
    32a6:	9b 01       	movw	r18, r22
    32a8:	ac 01       	movw	r20, r24
    32aa:	c7 01       	movw	r24, r14
    32ac:	b6 01       	movw	r22, r12
    32ae:	0e 94 8b 32 	call	0x6516	; 0x6516 <__addsf3>
    32b2:	0e 94 ef 32 	call	0x65de	; 0x65de <__fixunssfsi>
    32b6:	60 93 76 08 	sts	0x0876, r22	; 0x800876 <voltageSmooth>
    32ba:	0f 90       	pop	r0
    32bc:	0f 90       	pop	r0
    32be:	0f 90       	pop	r0
    32c0:	0f 90       	pop	r0
    32c2:	80 91 76 08 	lds	r24, 0x0876	; 0x800876 <voltageSmooth>
    32c6:	87 36       	cpi	r24, 0x67	; 103
    32c8:	78 f1       	brcs	.+94     	; 0x3328 <loop+0x140>
    32ca:	24 df       	rcall	.-440    	; 0x3114 <checkIncomingMIDI()>
    32cc:	80 91 6d 08 	lds	r24, 0x086D	; 0x80086d <flag_processFastLED>
    32d0:	88 23       	and	r24, r24
    32d2:	71 f0       	breq	.+28     	; 0x32f0 <loop+0x108>
    32d4:	85 e0       	ldi	r24, 0x05	; 5
    32d6:	80 93 7f 0e 	sts	0x0E7F, r24	; 0x800e7f <FastLED>
    32da:	80 91 7f 08 	lds	r24, 0x087F	; 0x80087f <songID>
    32de:	82 30       	cpi	r24, 0x02	; 2
    32e0:	f1 f0       	breq	.+60     	; 0x331e <loop+0x136>
    32e2:	90 f4       	brcc	.+36     	; 0x3308 <loop+0x120>
    32e4:	88 23       	and	r24, r24
    32e6:	b1 f0       	breq	.+44     	; 0x3314 <loop+0x12c>
    32e8:	81 30       	cpi	r24, 0x01	; 1
    32ea:	b1 f0       	breq	.+44     	; 0x3318 <loop+0x130>
    32ec:	10 92 6d 08 	sts	0x086D, r1	; 0x80086d <flag_processFastLED>
    32f0:	cf 91       	pop	r28
    32f2:	1f 91       	pop	r17
    32f4:	0f 91       	pop	r16
    32f6:	ff 90       	pop	r15
    32f8:	ef 90       	pop	r14
    32fa:	df 90       	pop	r13
    32fc:	cf 90       	pop	r12
    32fe:	bf 90       	pop	r11
    3300:	af 90       	pop	r10
    3302:	9f 90       	pop	r9
    3304:	8f 90       	pop	r8
    3306:	08 95       	ret
    3308:	83 30       	cpi	r24, 0x03	; 3
    330a:	61 f0       	breq	.+24     	; 0x3324 <loop+0x13c>
    330c:	84 30       	cpi	r24, 0x04	; 4
    330e:	71 f7       	brne	.-36     	; 0x32ec <loop+0x104>
    3310:	71 d9       	rcall	.-3358   	; 0x25f4 <Pokerface()>
    3312:	ec cf       	rjmp	.-40     	; 0x32ec <loop+0x104>
    3314:	97 da       	rcall	.-2770   	; 0x2844 <defaultLoop()>
    3316:	ea cf       	rjmp	.-44     	; 0x32ec <loop+0x104>
    3318:	0e 94 73 10 	call	0x20e6	; 0x20e6 <LearnToFly()>
    331c:	e7 cf       	rjmp	.-50     	; 0x32ec <loop+0x104>
    331e:	0e 94 0e 11 	call	0x221c	; 0x221c <Castle()>
    3322:	e4 cf       	rjmp	.-56     	; 0x32ec <loop+0x104>
    3324:	ab d8       	rcall	.-3754   	; 0x247c <TooClose()>
    3326:	e2 cf       	rjmp	.-60     	; 0x32ec <loop+0x104>
    3328:	60 e0       	ldi	r22, 0x00	; 0
    332a:	8f e7       	ldi	r24, 0x7F	; 127
    332c:	9e e0       	ldi	r25, 0x0E	; 14
    332e:	0e 94 c6 25 	call	0x4b8c	; 0x4b8c <CFastLED::clear(bool)>
    3332:	8f e7       	ldi	r24, 0x7F	; 127
    3334:	9e e0       	ldi	r25, 0x0E	; 14
    3336:	0e 94 47 05 	call	0xa8e	; 0xa8e <CFastLED::show()>
    333a:	64 ef       	ldi	r22, 0xF4	; 244
    333c:	71 e0       	ldi	r23, 0x01	; 1
    333e:	80 e0       	ldi	r24, 0x00	; 0
    3340:	90 e0       	ldi	r25, 0x00	; 0
    3342:	0e 94 f6 2a 	call	0x55ec	; 0x55ec <delay>
    3346:	85 e0       	ldi	r24, 0x05	; 5
    3348:	80 93 7f 0e 	sts	0x0E7F, r24	; 0x800e7f <FastLED>
    334c:	8f ef       	ldi	r24, 0xFF	; 255
    334e:	80 93 80 08 	sts	0x0880, r24	; 0x800880 <leds>
    3352:	10 92 81 08 	sts	0x0881, r1	; 0x800881 <leds+0x1>
    3356:	10 92 82 08 	sts	0x0882, r1	; 0x800882 <leds+0x2>
    335a:	8f e7       	ldi	r24, 0x7F	; 127
    335c:	9e e0       	ldi	r25, 0x0E	; 14
    335e:	0e 94 47 05 	call	0xa8e	; 0xa8e <CFastLED::show()>
    3362:	64 ef       	ldi	r22, 0xF4	; 244
    3364:	71 e0       	ldi	r23, 0x01	; 1
    3366:	80 e0       	ldi	r24, 0x00	; 0
    3368:	90 e0       	ldi	r25, 0x00	; 0
    336a:	cf 91       	pop	r28
    336c:	1f 91       	pop	r17
    336e:	0f 91       	pop	r16
    3370:	ff 90       	pop	r15
    3372:	ef 90       	pop	r14
    3374:	df 90       	pop	r13
    3376:	cf 90       	pop	r12
    3378:	bf 90       	pop	r11
    337a:	af 90       	pop	r10
    337c:	9f 90       	pop	r9
    337e:	8f 90       	pop	r8
    3380:	0c 94 f6 2a 	jmp	0x55ec	; 0x55ec <delay>

00003384 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    3384:	90 e0       	ldi	r25, 0x00	; 0
    3386:	80 e0       	ldi	r24, 0x00	; 0
    3388:	08 95       	ret

0000338a <Print::flush()>:
    338a:	08 95       	ret

0000338c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    338c:	2f 92       	push	r2
    338e:	3f 92       	push	r3
    3390:	4f 92       	push	r4
    3392:	5f 92       	push	r5
    3394:	6f 92       	push	r6
    3396:	7f 92       	push	r7
    3398:	8f 92       	push	r8
    339a:	9f 92       	push	r9
    339c:	af 92       	push	r10
    339e:	bf 92       	push	r11
    33a0:	cf 92       	push	r12
    33a2:	df 92       	push	r13
    33a4:	ef 92       	push	r14
    33a6:	ff 92       	push	r15
    33a8:	0f 93       	push	r16
    33aa:	1f 93       	push	r17
    33ac:	cf 93       	push	r28
    33ae:	df 93       	push	r29
    33b0:	00 d0       	rcall	.+0      	; 0x33b2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    33b2:	00 d0       	rcall	.+0      	; 0x33b4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    33b4:	00 d0       	rcall	.+0      	; 0x33b6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    33b6:	cd b7       	in	r28, 0x3d	; 61
    33b8:	de b7       	in	r29, 0x3e	; 62
    33ba:	3c 01       	movw	r6, r24
    33bc:	6a 01       	movw	r12, r20
    33be:	3e 83       	std	Y+6, r19	; 0x06
    33c0:	2d 83       	std	Y+5, r18	; 0x05
    33c2:	fc 82       	std	Y+4, r15	; 0x04
    33c4:	eb 82       	std	Y+3, r14	; 0x03
    33c6:	58 01       	movw	r10, r16
    33c8:	a4 1a       	sub	r10, r20
    33ca:	b5 0a       	sbc	r11, r21
    33cc:	b7 fe       	sbrs	r11, 7
    33ce:	03 c0       	rjmp	.+6      	; 0x33d6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    33d0:	b1 94       	neg	r11
    33d2:	a1 94       	neg	r10
    33d4:	b1 08       	sbc	r11, r1
    33d6:	8d 80       	ldd	r8, Y+5	; 0x05
    33d8:	9e 80       	ldd	r9, Y+6	; 0x06
    33da:	86 1a       	sub	r8, r22
    33dc:	97 0a       	sbc	r9, r23
    33de:	97 fe       	sbrs	r9, 7
    33e0:	03 c0       	rjmp	.+6      	; 0x33e8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    33e2:	91 94       	neg	r9
    33e4:	81 94       	neg	r8
    33e6:	91 08       	sbc	r9, r1
    33e8:	8a 14       	cp	r8, r10
    33ea:	9b 04       	cpc	r9, r11
    33ec:	5c f0       	brlt	.+22     	; 0x3404 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    33ee:	90 2f       	mov	r25, r16
    33f0:	81 2f       	mov	r24, r17
    33f2:	0d 81       	ldd	r16, Y+5	; 0x05
    33f4:	1e 81       	ldd	r17, Y+6	; 0x06
    33f6:	9d 83       	std	Y+5, r25	; 0x05
    33f8:	8e 83       	std	Y+6, r24	; 0x06
    33fa:	9c 2d       	mov	r25, r12
    33fc:	8d 2d       	mov	r24, r13
    33fe:	6b 01       	movw	r12, r22
    3400:	69 2f       	mov	r22, r25
    3402:	78 2f       	mov	r23, r24
    3404:	0c 15       	cp	r16, r12
    3406:	1d 05       	cpc	r17, r13
    3408:	5c f0       	brlt	.+22     	; 0x3420 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    340a:	9d 81       	ldd	r25, Y+5	; 0x05
    340c:	8e 81       	ldd	r24, Y+6	; 0x06
    340e:	7e 83       	std	Y+6, r23	; 0x06
    3410:	6d 83       	std	Y+5, r22	; 0x05
    3412:	69 2f       	mov	r22, r25
    3414:	78 2f       	mov	r23, r24
    3416:	90 2f       	mov	r25, r16
    3418:	81 2f       	mov	r24, r17
    341a:	86 01       	movw	r16, r12
    341c:	c9 2e       	mov	r12, r25
    341e:	d8 2e       	mov	r13, r24
    3420:	16 01       	movw	r2, r12
    3422:	20 1a       	sub	r2, r16
    3424:	31 0a       	sbc	r3, r17
    3426:	2b 01       	movw	r4, r22
    3428:	2d 81       	ldd	r18, Y+5	; 0x05
    342a:	3e 81       	ldd	r19, Y+6	; 0x06
    342c:	42 1a       	sub	r4, r18
    342e:	53 0a       	sbc	r5, r19
    3430:	57 fe       	sbrs	r5, 7
    3432:	03 c0       	rjmp	.+6      	; 0x343a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    3434:	51 94       	neg	r5
    3436:	41 94       	neg	r4
    3438:	51 08       	sbc	r5, r1
    343a:	71 01       	movw	r14, r2
    343c:	37 fe       	sbrs	r3, 7
    343e:	03 c0       	rjmp	.+6      	; 0x3446 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    3440:	3f ef       	ldi	r19, 0xFF	; 255
    3442:	e3 1a       	sub	r14, r19
    3444:	f3 0a       	sbc	r15, r19
    3446:	f5 94       	asr	r15
    3448:	e7 94       	ror	r14
    344a:	8d 81       	ldd	r24, Y+5	; 0x05
    344c:	9e 81       	ldd	r25, Y+6	; 0x06
    344e:	86 17       	cp	r24, r22
    3450:	97 07       	cpc	r25, r23
    3452:	5c f5       	brge	.+86     	; 0x34aa <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    3454:	a1 e0       	ldi	r26, 0x01	; 1
    3456:	b0 e0       	ldi	r27, 0x00	; 0
    3458:	ba 83       	std	Y+2, r27	; 0x02
    345a:	a9 83       	std	Y+1, r26	; 0x01
    345c:	c0 16       	cp	r12, r16
    345e:	d1 06       	cpc	r13, r17
    3460:	4c f1       	brlt	.+82     	; 0x34b4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    3462:	d3 01       	movw	r26, r6
    3464:	ed 91       	ld	r30, X+
    3466:	fc 91       	ld	r31, X
    3468:	04 84       	ldd	r0, Z+12	; 0x0c
    346a:	f5 85       	ldd	r31, Z+13	; 0x0d
    346c:	e0 2d       	mov	r30, r0
    346e:	2b 81       	ldd	r18, Y+3	; 0x03
    3470:	3c 81       	ldd	r19, Y+4	; 0x04
    3472:	a8 01       	movw	r20, r16
    3474:	6d 81       	ldd	r22, Y+5	; 0x05
    3476:	7e 81       	ldd	r23, Y+6	; 0x06
    3478:	8a 14       	cp	r8, r10
    347a:	9b 04       	cpc	r9, r11
    347c:	1c f0       	brlt	.+6      	; 0x3484 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    347e:	4d 81       	ldd	r20, Y+5	; 0x05
    3480:	5e 81       	ldd	r21, Y+6	; 0x06
    3482:	b8 01       	movw	r22, r16
    3484:	c3 01       	movw	r24, r6
    3486:	09 95       	icall
    3488:	e4 18       	sub	r14, r4
    348a:	f5 08       	sbc	r15, r5
    348c:	f7 fe       	sbrs	r15, 7
    348e:	0a c0       	rjmp	.+20     	; 0x34a4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    3490:	2d 81       	ldd	r18, Y+5	; 0x05
    3492:	3e 81       	ldd	r19, Y+6	; 0x06
    3494:	89 81       	ldd	r24, Y+1	; 0x01
    3496:	9a 81       	ldd	r25, Y+2	; 0x02
    3498:	28 0f       	add	r18, r24
    349a:	39 1f       	adc	r19, r25
    349c:	3e 83       	std	Y+6, r19	; 0x06
    349e:	2d 83       	std	Y+5, r18	; 0x05
    34a0:	e2 0c       	add	r14, r2
    34a2:	f3 1c       	adc	r15, r3
    34a4:	0f 5f       	subi	r16, 0xFF	; 255
    34a6:	1f 4f       	sbci	r17, 0xFF	; 255
    34a8:	d9 cf       	rjmp	.-78     	; 0x345c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    34aa:	2f ef       	ldi	r18, 0xFF	; 255
    34ac:	3f ef       	ldi	r19, 0xFF	; 255
    34ae:	3a 83       	std	Y+2, r19	; 0x02
    34b0:	29 83       	std	Y+1, r18	; 0x01
    34b2:	d4 cf       	rjmp	.-88     	; 0x345c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    34b4:	26 96       	adiw	r28, 0x06	; 6
    34b6:	0f b6       	in	r0, 0x3f	; 63
    34b8:	f8 94       	cli
    34ba:	de bf       	out	0x3e, r29	; 62
    34bc:	0f be       	out	0x3f, r0	; 63
    34be:	cd bf       	out	0x3d, r28	; 61
    34c0:	df 91       	pop	r29
    34c2:	cf 91       	pop	r28
    34c4:	1f 91       	pop	r17
    34c6:	0f 91       	pop	r16
    34c8:	ff 90       	pop	r15
    34ca:	ef 90       	pop	r14
    34cc:	df 90       	pop	r13
    34ce:	cf 90       	pop	r12
    34d0:	bf 90       	pop	r11
    34d2:	af 90       	pop	r10
    34d4:	9f 90       	pop	r9
    34d6:	8f 90       	pop	r8
    34d8:	7f 90       	pop	r7
    34da:	6f 90       	pop	r6
    34dc:	5f 90       	pop	r5
    34de:	4f 90       	pop	r4
    34e0:	3f 90       	pop	r3
    34e2:	2f 90       	pop	r2
    34e4:	08 95       	ret

000034e6 <Adafruit_GFX::startWrite()>:
    34e6:	08 95       	ret

000034e8 <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    34e8:	dc 01       	movw	r26, r24
    34ea:	ed 91       	ld	r30, X+
    34ec:	fc 91       	ld	r31, X
    34ee:	00 84       	ldd	r0, Z+8	; 0x08
    34f0:	f1 85       	ldd	r31, Z+9	; 0x09
    34f2:	e0 2d       	mov	r30, r0
    34f4:	09 94       	ijmp

000034f6 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    34f6:	0f 93       	push	r16
    34f8:	1f 93       	push	r17
    34fa:	dc 01       	movw	r26, r24
    34fc:	ed 91       	ld	r30, X+
    34fe:	fc 91       	ld	r31, X
    3500:	04 8c       	ldd	r0, Z+28	; 0x1c
    3502:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3504:	e0 2d       	mov	r30, r0
    3506:	09 95       	icall
    3508:	1f 91       	pop	r17
    350a:	0f 91       	pop	r16
    350c:	08 95       	ret

0000350e <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    350e:	0f 93       	push	r16
    3510:	1f 93       	push	r17
    3512:	dc 01       	movw	r26, r24
    3514:	ed 91       	ld	r30, X+
    3516:	fc 91       	ld	r31, X
    3518:	06 8c       	ldd	r0, Z+30	; 0x1e
    351a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    351c:	e0 2d       	mov	r30, r0
    351e:	09 95       	icall
    3520:	1f 91       	pop	r17
    3522:	0f 91       	pop	r16
    3524:	08 95       	ret

00003526 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    3526:	ef 92       	push	r14
    3528:	ff 92       	push	r15
    352a:	0f 93       	push	r16
    352c:	1f 93       	push	r17
    352e:	dc 01       	movw	r26, r24
    3530:	ed 91       	ld	r30, X+
    3532:	fc 91       	ld	r31, X
    3534:	00 a0       	ldd	r0, Z+32	; 0x20
    3536:	f1 a1       	ldd	r31, Z+33	; 0x21
    3538:	e0 2d       	mov	r30, r0
    353a:	09 95       	icall
    353c:	1f 91       	pop	r17
    353e:	0f 91       	pop	r16
    3540:	ff 90       	pop	r15
    3542:	ef 90       	pop	r14
    3544:	08 95       	ret

00003546 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    3546:	8f 92       	push	r8
    3548:	9f 92       	push	r9
    354a:	af 92       	push	r10
    354c:	bf 92       	push	r11
    354e:	cf 92       	push	r12
    3550:	df 92       	push	r13
    3552:	ef 92       	push	r14
    3554:	ff 92       	push	r15
    3556:	0f 93       	push	r16
    3558:	1f 93       	push	r17
    355a:	cf 93       	push	r28
    355c:	df 93       	push	r29
    355e:	ec 01       	movw	r28, r24
    3560:	5b 01       	movw	r10, r22
    3562:	4a 01       	movw	r8, r20
    3564:	69 01       	movw	r12, r18
    3566:	78 01       	movw	r14, r16
    3568:	e8 81       	ld	r30, Y
    356a:	f9 81       	ldd	r31, Y+1	; 0x01
    356c:	02 84       	ldd	r0, Z+10	; 0x0a
    356e:	f3 85       	ldd	r31, Z+11	; 0x0b
    3570:	e0 2d       	mov	r30, r0
    3572:	09 95       	icall
    3574:	c8 0c       	add	r12, r8
    3576:	d9 1c       	adc	r13, r9
    3578:	86 01       	movw	r16, r12
    357a:	01 50       	subi	r16, 0x01	; 1
    357c:	11 09       	sbc	r17, r1
    357e:	e8 81       	ld	r30, Y
    3580:	f9 81       	ldd	r31, Y+1	; 0x01
    3582:	04 88       	ldd	r0, Z+20	; 0x14
    3584:	f5 89       	ldd	r31, Z+21	; 0x15
    3586:	e0 2d       	mov	r30, r0
    3588:	95 01       	movw	r18, r10
    358a:	a4 01       	movw	r20, r8
    358c:	b5 01       	movw	r22, r10
    358e:	ce 01       	movw	r24, r28
    3590:	09 95       	icall
    3592:	e8 81       	ld	r30, Y
    3594:	f9 81       	ldd	r31, Y+1	; 0x01
    3596:	06 88       	ldd	r0, Z+22	; 0x16
    3598:	f7 89       	ldd	r31, Z+23	; 0x17
    359a:	e0 2d       	mov	r30, r0
    359c:	ce 01       	movw	r24, r28
    359e:	df 91       	pop	r29
    35a0:	cf 91       	pop	r28
    35a2:	1f 91       	pop	r17
    35a4:	0f 91       	pop	r16
    35a6:	ff 90       	pop	r15
    35a8:	ef 90       	pop	r14
    35aa:	df 90       	pop	r13
    35ac:	cf 90       	pop	r12
    35ae:	bf 90       	pop	r11
    35b0:	af 90       	pop	r10
    35b2:	9f 90       	pop	r9
    35b4:	8f 90       	pop	r8
    35b6:	09 94       	ijmp

000035b8 <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    35b8:	8f 92       	push	r8
    35ba:	9f 92       	push	r9
    35bc:	af 92       	push	r10
    35be:	bf 92       	push	r11
    35c0:	cf 92       	push	r12
    35c2:	df 92       	push	r13
    35c4:	ef 92       	push	r14
    35c6:	ff 92       	push	r15
    35c8:	0f 93       	push	r16
    35ca:	1f 93       	push	r17
    35cc:	cf 93       	push	r28
    35ce:	df 93       	push	r29
    35d0:	ec 01       	movw	r28, r24
    35d2:	5b 01       	movw	r10, r22
    35d4:	4a 01       	movw	r8, r20
    35d6:	69 01       	movw	r12, r18
    35d8:	e8 81       	ld	r30, Y
    35da:	f9 81       	ldd	r31, Y+1	; 0x01
    35dc:	02 84       	ldd	r0, Z+10	; 0x0a
    35de:	f3 85       	ldd	r31, Z+11	; 0x0b
    35e0:	e0 2d       	mov	r30, r0
    35e2:	09 95       	icall
    35e4:	95 01       	movw	r18, r10
    35e6:	2c 0d       	add	r18, r12
    35e8:	3d 1d       	adc	r19, r13
    35ea:	21 50       	subi	r18, 0x01	; 1
    35ec:	31 09       	sbc	r19, r1
    35ee:	e8 81       	ld	r30, Y
    35f0:	f9 81       	ldd	r31, Y+1	; 0x01
    35f2:	04 88       	ldd	r0, Z+20	; 0x14
    35f4:	f5 89       	ldd	r31, Z+21	; 0x15
    35f6:	e0 2d       	mov	r30, r0
    35f8:	78 01       	movw	r14, r16
    35fa:	84 01       	movw	r16, r8
    35fc:	a4 01       	movw	r20, r8
    35fe:	b5 01       	movw	r22, r10
    3600:	ce 01       	movw	r24, r28
    3602:	09 95       	icall
    3604:	e8 81       	ld	r30, Y
    3606:	f9 81       	ldd	r31, Y+1	; 0x01
    3608:	06 88       	ldd	r0, Z+22	; 0x16
    360a:	f7 89       	ldd	r31, Z+23	; 0x17
    360c:	e0 2d       	mov	r30, r0
    360e:	ce 01       	movw	r24, r28
    3610:	df 91       	pop	r29
    3612:	cf 91       	pop	r28
    3614:	1f 91       	pop	r17
    3616:	0f 91       	pop	r16
    3618:	ff 90       	pop	r15
    361a:	ef 90       	pop	r14
    361c:	df 90       	pop	r13
    361e:	cf 90       	pop	r12
    3620:	bf 90       	pop	r11
    3622:	af 90       	pop	r10
    3624:	9f 90       	pop	r9
    3626:	8f 90       	pop	r8
    3628:	09 94       	ijmp

0000362a <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    362a:	4f 92       	push	r4
    362c:	5f 92       	push	r5
    362e:	6f 92       	push	r6
    3630:	7f 92       	push	r7
    3632:	8f 92       	push	r8
    3634:	9f 92       	push	r9
    3636:	af 92       	push	r10
    3638:	bf 92       	push	r11
    363a:	cf 92       	push	r12
    363c:	df 92       	push	r13
    363e:	ef 92       	push	r14
    3640:	ff 92       	push	r15
    3642:	0f 93       	push	r16
    3644:	1f 93       	push	r17
    3646:	cf 93       	push	r28
    3648:	df 93       	push	r29
    364a:	6c 01       	movw	r12, r24
    364c:	2b 01       	movw	r4, r22
    364e:	5a 01       	movw	r10, r20
    3650:	39 01       	movw	r6, r18
    3652:	48 01       	movw	r8, r16
    3654:	dc 01       	movw	r26, r24
    3656:	ed 91       	ld	r30, X+
    3658:	fc 91       	ld	r31, X
    365a:	02 84       	ldd	r0, Z+10	; 0x0a
    365c:	f3 85       	ldd	r31, Z+11	; 0x0b
    365e:	e0 2d       	mov	r30, r0
    3660:	09 95       	icall
    3662:	e2 01       	movw	r28, r4
    3664:	64 0c       	add	r6, r4
    3666:	75 1c       	adc	r7, r5
    3668:	d6 01       	movw	r26, r12
    366a:	ed 91       	ld	r30, X+
    366c:	fc 91       	ld	r31, X
    366e:	c6 15       	cp	r28, r6
    3670:	d7 05       	cpc	r29, r7
    3672:	5c f4       	brge	.+22     	; 0x368a <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    3674:	00 88       	ldd	r0, Z+16	; 0x10
    3676:	f1 89       	ldd	r31, Z+17	; 0x11
    3678:	e0 2d       	mov	r30, r0
    367a:	87 01       	movw	r16, r14
    367c:	94 01       	movw	r18, r8
    367e:	a5 01       	movw	r20, r10
    3680:	be 01       	movw	r22, r28
    3682:	c6 01       	movw	r24, r12
    3684:	09 95       	icall
    3686:	21 96       	adiw	r28, 0x01	; 1
    3688:	ef cf       	rjmp	.-34     	; 0x3668 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    368a:	06 88       	ldd	r0, Z+22	; 0x16
    368c:	f7 89       	ldd	r31, Z+23	; 0x17
    368e:	e0 2d       	mov	r30, r0
    3690:	c6 01       	movw	r24, r12
    3692:	df 91       	pop	r29
    3694:	cf 91       	pop	r28
    3696:	1f 91       	pop	r17
    3698:	0f 91       	pop	r16
    369a:	ff 90       	pop	r15
    369c:	ef 90       	pop	r14
    369e:	df 90       	pop	r13
    36a0:	cf 90       	pop	r12
    36a2:	bf 90       	pop	r11
    36a4:	af 90       	pop	r10
    36a6:	9f 90       	pop	r9
    36a8:	8f 90       	pop	r8
    36aa:	7f 90       	pop	r7
    36ac:	6f 90       	pop	r6
    36ae:	5f 90       	pop	r5
    36b0:	4f 90       	pop	r4
    36b2:	09 94       	ijmp

000036b4 <Adafruit_GFX::fillScreen(unsigned int)>:
    36b4:	ef 92       	push	r14
    36b6:	ff 92       	push	r15
    36b8:	0f 93       	push	r16
    36ba:	1f 93       	push	r17
    36bc:	dc 01       	movw	r26, r24
    36be:	19 96       	adiw	r26, 0x09	; 9
    36c0:	0d 91       	ld	r16, X+
    36c2:	1c 91       	ld	r17, X
    36c4:	1a 97       	sbiw	r26, 0x0a	; 10
    36c6:	17 96       	adiw	r26, 0x07	; 7
    36c8:	2d 91       	ld	r18, X+
    36ca:	3c 91       	ld	r19, X
    36cc:	18 97       	sbiw	r26, 0x08	; 8
    36ce:	ed 91       	ld	r30, X+
    36d0:	fc 91       	ld	r31, X
    36d2:	00 a0       	ldd	r0, Z+32	; 0x20
    36d4:	f1 a1       	ldd	r31, Z+33	; 0x21
    36d6:	e0 2d       	mov	r30, r0
    36d8:	7b 01       	movw	r14, r22
    36da:	50 e0       	ldi	r21, 0x00	; 0
    36dc:	40 e0       	ldi	r20, 0x00	; 0
    36de:	70 e0       	ldi	r23, 0x00	; 0
    36e0:	60 e0       	ldi	r22, 0x00	; 0
    36e2:	09 95       	icall
    36e4:	1f 91       	pop	r17
    36e6:	0f 91       	pop	r16
    36e8:	ff 90       	pop	r15
    36ea:	ef 90       	pop	r14
    36ec:	08 95       	ret

000036ee <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    36ee:	6f 92       	push	r6
    36f0:	7f 92       	push	r7
    36f2:	8f 92       	push	r8
    36f4:	9f 92       	push	r9
    36f6:	af 92       	push	r10
    36f8:	bf 92       	push	r11
    36fa:	cf 92       	push	r12
    36fc:	df 92       	push	r13
    36fe:	ef 92       	push	r14
    3700:	ff 92       	push	r15
    3702:	0f 93       	push	r16
    3704:	1f 93       	push	r17
    3706:	cf 93       	push	r28
    3708:	df 93       	push	r29
    370a:	ec 01       	movw	r28, r24
    370c:	6b 01       	movw	r12, r22
    370e:	5a 01       	movw	r10, r20
    3710:	39 01       	movw	r6, r18
    3712:	48 01       	movw	r8, r16
    3714:	e8 81       	ld	r30, Y
    3716:	f9 81       	ldd	r31, Y+1	; 0x01
    3718:	02 84       	ldd	r0, Z+10	; 0x0a
    371a:	f3 85       	ldd	r31, Z+11	; 0x0b
    371c:	e0 2d       	mov	r30, r0
    371e:	09 95       	icall
    3720:	e8 81       	ld	r30, Y
    3722:	f9 81       	ldd	r31, Y+1	; 0x01
    3724:	02 88       	ldd	r0, Z+18	; 0x12
    3726:	f3 89       	ldd	r31, Z+19	; 0x13
    3728:	e0 2d       	mov	r30, r0
    372a:	87 01       	movw	r16, r14
    372c:	93 01       	movw	r18, r6
    372e:	a5 01       	movw	r20, r10
    3730:	b6 01       	movw	r22, r12
    3732:	ce 01       	movw	r24, r28
    3734:	09 95       	icall
    3736:	a5 01       	movw	r20, r10
    3738:	48 0d       	add	r20, r8
    373a:	59 1d       	adc	r21, r9
    373c:	41 50       	subi	r20, 0x01	; 1
    373e:	51 09       	sbc	r21, r1
    3740:	e8 81       	ld	r30, Y
    3742:	f9 81       	ldd	r31, Y+1	; 0x01
    3744:	02 88       	ldd	r0, Z+18	; 0x12
    3746:	f3 89       	ldd	r31, Z+19	; 0x13
    3748:	e0 2d       	mov	r30, r0
    374a:	93 01       	movw	r18, r6
    374c:	b6 01       	movw	r22, r12
    374e:	ce 01       	movw	r24, r28
    3750:	09 95       	icall
    3752:	e8 81       	ld	r30, Y
    3754:	f9 81       	ldd	r31, Y+1	; 0x01
    3756:	00 88       	ldd	r0, Z+16	; 0x10
    3758:	f1 89       	ldd	r31, Z+17	; 0x11
    375a:	e0 2d       	mov	r30, r0
    375c:	94 01       	movw	r18, r8
    375e:	a5 01       	movw	r20, r10
    3760:	b6 01       	movw	r22, r12
    3762:	ce 01       	movw	r24, r28
    3764:	09 95       	icall
    3766:	c6 0c       	add	r12, r6
    3768:	d7 1c       	adc	r13, r7
    376a:	b6 01       	movw	r22, r12
    376c:	61 50       	subi	r22, 0x01	; 1
    376e:	71 09       	sbc	r23, r1
    3770:	e8 81       	ld	r30, Y
    3772:	f9 81       	ldd	r31, Y+1	; 0x01
    3774:	00 88       	ldd	r0, Z+16	; 0x10
    3776:	f1 89       	ldd	r31, Z+17	; 0x11
    3778:	e0 2d       	mov	r30, r0
    377a:	94 01       	movw	r18, r8
    377c:	a5 01       	movw	r20, r10
    377e:	ce 01       	movw	r24, r28
    3780:	09 95       	icall
    3782:	e8 81       	ld	r30, Y
    3784:	f9 81       	ldd	r31, Y+1	; 0x01
    3786:	06 88       	ldd	r0, Z+22	; 0x16
    3788:	f7 89       	ldd	r31, Z+23	; 0x17
    378a:	e0 2d       	mov	r30, r0
    378c:	ce 01       	movw	r24, r28
    378e:	df 91       	pop	r29
    3790:	cf 91       	pop	r28
    3792:	1f 91       	pop	r17
    3794:	0f 91       	pop	r16
    3796:	ff 90       	pop	r15
    3798:	ef 90       	pop	r14
    379a:	df 90       	pop	r13
    379c:	cf 90       	pop	r12
    379e:	bf 90       	pop	r11
    37a0:	af 90       	pop	r10
    37a2:	9f 90       	pop	r9
    37a4:	8f 90       	pop	r8
    37a6:	7f 90       	pop	r7
    37a8:	6f 90       	pop	r6
    37aa:	09 94       	ijmp

000037ac <Adafruit_GFX::invertDisplay(bool)>:
    37ac:	08 95       	ret

000037ae <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    37ae:	6f 92       	push	r6
    37b0:	7f 92       	push	r7
    37b2:	8f 92       	push	r8
    37b4:	9f 92       	push	r9
    37b6:	af 92       	push	r10
    37b8:	bf 92       	push	r11
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	5c 01       	movw	r10, r24
    37cc:	eb 01       	movw	r28, r22
    37ce:	6a 01       	movw	r12, r20
    37d0:	49 01       	movw	r8, r18
    37d2:	38 01       	movw	r6, r16
    37d4:	87 01       	movw	r16, r14
    37d6:	dc 01       	movw	r26, r24
    37d8:	ed 91       	ld	r30, X+
    37da:	fc 91       	ld	r31, X
    37dc:	62 17       	cp	r22, r18
    37de:	73 07       	cpc	r23, r19
    37e0:	19 f5       	brne	.+70     	; 0x3828 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    37e2:	64 16       	cp	r6, r20
    37e4:	75 06       	cpc	r7, r21
    37e6:	2c f0       	brlt	.+10     	; 0x37f2 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    37e8:	96 2d       	mov	r25, r6
    37ea:	87 2d       	mov	r24, r7
    37ec:	3a 01       	movw	r6, r20
    37ee:	c9 2e       	mov	r12, r25
    37f0:	d8 2e       	mov	r13, r24
    37f2:	96 01       	movw	r18, r12
    37f4:	26 19       	sub	r18, r6
    37f6:	37 09       	sbc	r19, r7
    37f8:	2f 5f       	subi	r18, 0xFF	; 255
    37fa:	3f 4f       	sbci	r19, 0xFF	; 255
    37fc:	04 8c       	ldd	r0, Z+28	; 0x1c
    37fe:	f5 8d       	ldd	r31, Z+29	; 0x1d
    3800:	e0 2d       	mov	r30, r0
    3802:	a3 01       	movw	r20, r6
    3804:	be 01       	movw	r22, r28
    3806:	c5 01       	movw	r24, r10
    3808:	09 95       	icall
    380a:	df 91       	pop	r29
    380c:	cf 91       	pop	r28
    380e:	1f 91       	pop	r17
    3810:	0f 91       	pop	r16
    3812:	ff 90       	pop	r15
    3814:	ef 90       	pop	r14
    3816:	df 90       	pop	r13
    3818:	cf 90       	pop	r12
    381a:	bf 90       	pop	r11
    381c:	af 90       	pop	r10
    381e:	9f 90       	pop	r9
    3820:	8f 90       	pop	r8
    3822:	7f 90       	pop	r7
    3824:	6f 90       	pop	r6
    3826:	08 95       	ret
    3828:	46 15       	cp	r20, r6
    382a:	57 05       	cpc	r21, r7
    382c:	91 f4       	brne	.+36     	; 0x3852 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    382e:	26 17       	cp	r18, r22
    3830:	37 07       	cpc	r19, r23
    3832:	24 f0       	brlt	.+8      	; 0x383c <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    3834:	89 2d       	mov	r24, r9
    3836:	4b 01       	movw	r8, r22
    3838:	c2 2f       	mov	r28, r18
    383a:	d8 2f       	mov	r29, r24
    383c:	9e 01       	movw	r18, r28
    383e:	28 19       	sub	r18, r8
    3840:	39 09       	sbc	r19, r9
    3842:	2f 5f       	subi	r18, 0xFF	; 255
    3844:	3f 4f       	sbci	r19, 0xFF	; 255
    3846:	06 8c       	ldd	r0, Z+30	; 0x1e
    3848:	f7 8d       	ldd	r31, Z+31	; 0x1f
    384a:	e0 2d       	mov	r30, r0
    384c:	a6 01       	movw	r20, r12
    384e:	b4 01       	movw	r22, r8
    3850:	da cf       	rjmp	.-76     	; 0x3806 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    3852:	02 84       	ldd	r0, Z+10	; 0x0a
    3854:	f3 85       	ldd	r31, Z+11	; 0x0b
    3856:	e0 2d       	mov	r30, r0
    3858:	09 95       	icall
    385a:	d5 01       	movw	r26, r10
    385c:	ed 91       	ld	r30, X+
    385e:	fc 91       	ld	r31, X
    3860:	04 88       	ldd	r0, Z+20	; 0x14
    3862:	f5 89       	ldd	r31, Z+21	; 0x15
    3864:	e0 2d       	mov	r30, r0
    3866:	83 01       	movw	r16, r6
    3868:	94 01       	movw	r18, r8
    386a:	a6 01       	movw	r20, r12
    386c:	be 01       	movw	r22, r28
    386e:	c5 01       	movw	r24, r10
    3870:	09 95       	icall
    3872:	d5 01       	movw	r26, r10
    3874:	ed 91       	ld	r30, X+
    3876:	fc 91       	ld	r31, X
    3878:	06 88       	ldd	r0, Z+22	; 0x16
    387a:	f7 89       	ldd	r31, Z+23	; 0x17
    387c:	e0 2d       	mov	r30, r0
    387e:	c5 01       	movw	r24, r10
    3880:	df 91       	pop	r29
    3882:	cf 91       	pop	r28
    3884:	1f 91       	pop	r17
    3886:	0f 91       	pop	r16
    3888:	ff 90       	pop	r15
    388a:	ef 90       	pop	r14
    388c:	df 90       	pop	r13
    388e:	cf 90       	pop	r12
    3890:	bf 90       	pop	r11
    3892:	af 90       	pop	r10
    3894:	9f 90       	pop	r9
    3896:	8f 90       	pop	r8
    3898:	7f 90       	pop	r7
    389a:	6f 90       	pop	r6
    389c:	09 94       	ijmp

0000389e <Adafruit_GFX::setRotation(unsigned char)>:
    389e:	fc 01       	movw	r30, r24
    38a0:	63 70       	andi	r22, 0x03	; 3
    38a2:	65 8b       	std	Z+21, r22	; 0x15
    38a4:	83 81       	ldd	r24, Z+3	; 0x03
    38a6:	94 81       	ldd	r25, Z+4	; 0x04
    38a8:	25 81       	ldd	r18, Z+5	; 0x05
    38aa:	36 81       	ldd	r19, Z+6	; 0x06
    38ac:	61 30       	cpi	r22, 0x01	; 1
    38ae:	39 f0       	breq	.+14     	; 0x38be <Adafruit_GFX::setRotation(unsigned char)+0x20>
    38b0:	63 30       	cpi	r22, 0x03	; 3
    38b2:	29 f0       	breq	.+10     	; 0x38be <Adafruit_GFX::setRotation(unsigned char)+0x20>
    38b4:	90 87       	std	Z+8, r25	; 0x08
    38b6:	87 83       	std	Z+7, r24	; 0x07
    38b8:	32 87       	std	Z+10, r19	; 0x0a
    38ba:	21 87       	std	Z+9, r18	; 0x09
    38bc:	08 95       	ret
    38be:	30 87       	std	Z+8, r19	; 0x08
    38c0:	27 83       	std	Z+7, r18	; 0x07
    38c2:	92 87       	std	Z+10, r25	; 0x0a
    38c4:	81 87       	std	Z+9, r24	; 0x09
    38c6:	08 95       	ret

000038c8 <Adafruit_GFX::Adafruit_GFX(int, int)>:
    38c8:	fc 01       	movw	r30, r24
    38ca:	12 82       	std	Z+2, r1	; 0x02
    38cc:	8f eb       	ldi	r24, 0xBF	; 191
    38ce:	96 e0       	ldi	r25, 0x06	; 6
    38d0:	91 83       	std	Z+1, r25	; 0x01
    38d2:	80 83       	st	Z, r24
    38d4:	74 83       	std	Z+4, r23	; 0x04
    38d6:	63 83       	std	Z+3, r22	; 0x03
    38d8:	56 83       	std	Z+6, r21	; 0x06
    38da:	45 83       	std	Z+5, r20	; 0x05
    38dc:	70 87       	std	Z+8, r23	; 0x08
    38de:	67 83       	std	Z+7, r22	; 0x07
    38e0:	52 87       	std	Z+10, r21	; 0x0a
    38e2:	41 87       	std	Z+9, r20	; 0x09
    38e4:	15 8a       	std	Z+21, r1	; 0x15
    38e6:	14 86       	std	Z+12, r1	; 0x0c
    38e8:	13 86       	std	Z+11, r1	; 0x0b
    38ea:	16 86       	std	Z+14, r1	; 0x0e
    38ec:	15 86       	std	Z+13, r1	; 0x0d
    38ee:	81 e0       	ldi	r24, 0x01	; 1
    38f0:	84 8b       	std	Z+20, r24	; 0x14
    38f2:	83 8b       	std	Z+19, r24	; 0x13
    38f4:	2f ef       	ldi	r18, 0xFF	; 255
    38f6:	3f ef       	ldi	r19, 0xFF	; 255
    38f8:	32 8b       	std	Z+18, r19	; 0x12
    38fa:	21 8b       	std	Z+17, r18	; 0x11
    38fc:	30 8b       	std	Z+16, r19	; 0x10
    38fe:	27 87       	std	Z+15, r18	; 0x0f
    3900:	86 8b       	std	Z+22, r24	; 0x16
    3902:	17 8a       	std	Z+23, r1	; 0x17
    3904:	11 8e       	std	Z+25, r1	; 0x19
    3906:	10 8e       	std	Z+24, r1	; 0x18
    3908:	08 95       	ret

0000390a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    390a:	2f 92       	push	r2
    390c:	3f 92       	push	r3
    390e:	4f 92       	push	r4
    3910:	5f 92       	push	r5
    3912:	6f 92       	push	r6
    3914:	7f 92       	push	r7
    3916:	8f 92       	push	r8
    3918:	9f 92       	push	r9
    391a:	af 92       	push	r10
    391c:	bf 92       	push	r11
    391e:	cf 92       	push	r12
    3920:	df 92       	push	r13
    3922:	ef 92       	push	r14
    3924:	ff 92       	push	r15
    3926:	0f 93       	push	r16
    3928:	1f 93       	push	r17
    392a:	cf 93       	push	r28
    392c:	df 93       	push	r29
    392e:	cd b7       	in	r28, 0x3d	; 61
    3930:	de b7       	in	r29, 0x3e	; 62
    3932:	2e 97       	sbiw	r28, 0x0e	; 14
    3934:	0f b6       	in	r0, 0x3f	; 63
    3936:	f8 94       	cli
    3938:	de bf       	out	0x3e, r29	; 62
    393a:	0f be       	out	0x3f, r0	; 63
    393c:	cd bf       	out	0x3d, r28	; 61
    393e:	5c 01       	movw	r10, r24
    3940:	2b 01       	movw	r4, r22
    3942:	5c 83       	std	Y+4, r21	; 0x04
    3944:	4b 83       	std	Y+3, r20	; 0x03
    3946:	3e 87       	std	Y+14, r19	; 0x0e
    3948:	2d 87       	std	Y+13, r18	; 0x0d
    394a:	fe 82       	std	Y+6, r15	; 0x06
    394c:	ed 82       	std	Y+5, r14	; 0x05
    394e:	16 01       	movw	r2, r12
    3950:	81 e0       	ldi	r24, 0x01	; 1
    3952:	90 e0       	ldi	r25, 0x00	; 0
    3954:	4c 01       	movw	r8, r24
    3956:	82 1a       	sub	r8, r18
    3958:	93 0a       	sbc	r9, r19
    395a:	c9 01       	movw	r24, r18
    395c:	91 95       	neg	r25
    395e:	81 95       	neg	r24
    3960:	91 09       	sbc	r25, r1
    3962:	9c 01       	movw	r18, r24
    3964:	22 0f       	add	r18, r18
    3966:	33 1f       	adc	r19, r19
    3968:	3a 83       	std	Y+2, r19	; 0x02
    396a:	29 83       	std	Y+1, r18	; 0x01
    396c:	c7 01       	movw	r24, r14
    396e:	01 96       	adiw	r24, 0x01	; 1
    3970:	98 87       	std	Y+8, r25	; 0x08
    3972:	8f 83       	std	Y+7, r24	; 0x07
    3974:	f1 2c       	mov	r15, r1
    3976:	e1 2c       	mov	r14, r1
    3978:	66 24       	eor	r6, r6
    397a:	63 94       	inc	r6
    397c:	71 2c       	mov	r7, r1
    397e:	90 2f       	mov	r25, r16
    3980:	91 70       	andi	r25, 0x01	; 1
    3982:	99 87       	std	Y+9, r25	; 0x09
    3984:	02 70       	andi	r16, 0x02	; 2
    3986:	0a 87       	std	Y+10, r16	; 0x0a
    3988:	da 01       	movw	r26, r20
    398a:	11 96       	adiw	r26, 0x01	; 1
    398c:	bc 87       	std	Y+12, r27	; 0x0c
    398e:	ab 87       	std	Y+11, r26	; 0x0b
    3990:	2d 85       	ldd	r18, Y+13	; 0x0d
    3992:	3e 85       	ldd	r19, Y+14	; 0x0e
    3994:	e2 16       	cp	r14, r18
    3996:	f3 06       	cpc	r15, r19
    3998:	0c f0       	brlt	.+2      	; 0x399c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    399a:	8d c0       	rjmp	.+282    	; 0x3ab6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    399c:	cd 84       	ldd	r12, Y+13	; 0x0d
    399e:	de 84       	ldd	r13, Y+14	; 0x0e
    39a0:	97 fc       	sbrc	r9, 7
    39a2:	0b c0       	rjmp	.+22     	; 0x39ba <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    39a4:	69 01       	movw	r12, r18
    39a6:	31 e0       	ldi	r19, 0x01	; 1
    39a8:	c3 1a       	sub	r12, r19
    39aa:	d1 08       	sbc	r13, r1
    39ac:	89 81       	ldd	r24, Y+1	; 0x01
    39ae:	9a 81       	ldd	r25, Y+2	; 0x02
    39b0:	02 96       	adiw	r24, 0x02	; 2
    39b2:	9a 83       	std	Y+2, r25	; 0x02
    39b4:	89 83       	std	Y+1, r24	; 0x01
    39b6:	88 0e       	add	r8, r24
    39b8:	99 1e       	adc	r9, r25
    39ba:	9f ef       	ldi	r25, 0xFF	; 255
    39bc:	e9 1a       	sub	r14, r25
    39be:	f9 0a       	sbc	r15, r25
    39c0:	a2 e0       	ldi	r26, 0x02	; 2
    39c2:	6a 0e       	add	r6, r26
    39c4:	71 1c       	adc	r7, r1
    39c6:	86 0c       	add	r8, r6
    39c8:	97 1c       	adc	r9, r7
    39ca:	ce 14       	cp	r12, r14
    39cc:	df 04       	cpc	r13, r15
    39ce:	a4 f1       	brlt	.+104    	; 0x3a38 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    39d0:	b9 85       	ldd	r27, Y+9	; 0x09
    39d2:	bb 23       	and	r27, r27
    39d4:	b9 f0       	breq	.+46     	; 0x3a04 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    39d6:	96 01       	movw	r18, r12
    39d8:	22 0f       	add	r18, r18
    39da:	33 1f       	adc	r19, r19
    39dc:	8f 81       	ldd	r24, Y+7	; 0x07
    39de:	98 85       	ldd	r25, Y+8	; 0x08
    39e0:	28 0f       	add	r18, r24
    39e2:	39 1f       	adc	r19, r25
    39e4:	d5 01       	movw	r26, r10
    39e6:	ed 91       	ld	r30, X+
    39e8:	fc 91       	ld	r31, X
    39ea:	00 88       	ldd	r0, Z+16	; 0x10
    39ec:	f1 89       	ldd	r31, Z+17	; 0x11
    39ee:	e0 2d       	mov	r30, r0
    39f0:	81 01       	movw	r16, r2
    39f2:	4b 81       	ldd	r20, Y+3	; 0x03
    39f4:	5c 81       	ldd	r21, Y+4	; 0x04
    39f6:	4c 19       	sub	r20, r12
    39f8:	5d 09       	sbc	r21, r13
    39fa:	b2 01       	movw	r22, r4
    39fc:	6e 0d       	add	r22, r14
    39fe:	7f 1d       	adc	r23, r15
    3a00:	c5 01       	movw	r24, r10
    3a02:	09 95       	icall
    3a04:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a06:	bb 23       	and	r27, r27
    3a08:	b9 f0       	breq	.+46     	; 0x3a38 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    3a0a:	96 01       	movw	r18, r12
    3a0c:	22 0f       	add	r18, r18
    3a0e:	33 1f       	adc	r19, r19
    3a10:	8f 81       	ldd	r24, Y+7	; 0x07
    3a12:	98 85       	ldd	r25, Y+8	; 0x08
    3a14:	28 0f       	add	r18, r24
    3a16:	39 1f       	adc	r19, r25
    3a18:	d5 01       	movw	r26, r10
    3a1a:	ed 91       	ld	r30, X+
    3a1c:	fc 91       	ld	r31, X
    3a1e:	00 88       	ldd	r0, Z+16	; 0x10
    3a20:	f1 89       	ldd	r31, Z+17	; 0x11
    3a22:	e0 2d       	mov	r30, r0
    3a24:	81 01       	movw	r16, r2
    3a26:	4b 81       	ldd	r20, Y+3	; 0x03
    3a28:	5c 81       	ldd	r21, Y+4	; 0x04
    3a2a:	4c 19       	sub	r20, r12
    3a2c:	5d 09       	sbc	r21, r13
    3a2e:	b2 01       	movw	r22, r4
    3a30:	6e 19       	sub	r22, r14
    3a32:	7f 09       	sbc	r23, r15
    3a34:	c5 01       	movw	r24, r10
    3a36:	09 95       	icall
    3a38:	2d 85       	ldd	r18, Y+13	; 0x0d
    3a3a:	3e 85       	ldd	r19, Y+14	; 0x0e
    3a3c:	2c 15       	cp	r18, r12
    3a3e:	3d 05       	cpc	r19, r13
    3a40:	b9 f1       	breq	.+110    	; 0x3ab0 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    3a42:	39 85       	ldd	r19, Y+9	; 0x09
    3a44:	33 23       	and	r19, r19
    3a46:	c1 f0       	breq	.+48     	; 0x3a78 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    3a48:	93 01       	movw	r18, r6
    3a4a:	22 50       	subi	r18, 0x02	; 2
    3a4c:	31 09       	sbc	r19, r1
    3a4e:	8d 81       	ldd	r24, Y+5	; 0x05
    3a50:	9e 81       	ldd	r25, Y+6	; 0x06
    3a52:	28 0f       	add	r18, r24
    3a54:	39 1f       	adc	r19, r25
    3a56:	d5 01       	movw	r26, r10
    3a58:	ed 91       	ld	r30, X+
    3a5a:	fc 91       	ld	r31, X
    3a5c:	00 88       	ldd	r0, Z+16	; 0x10
    3a5e:	f1 89       	ldd	r31, Z+17	; 0x11
    3a60:	e0 2d       	mov	r30, r0
    3a62:	81 01       	movw	r16, r2
    3a64:	4b 85       	ldd	r20, Y+11	; 0x0b
    3a66:	5c 85       	ldd	r21, Y+12	; 0x0c
    3a68:	4e 19       	sub	r20, r14
    3a6a:	5f 09       	sbc	r21, r15
    3a6c:	6d 85       	ldd	r22, Y+13	; 0x0d
    3a6e:	7e 85       	ldd	r23, Y+14	; 0x0e
    3a70:	64 0d       	add	r22, r4
    3a72:	75 1d       	adc	r23, r5
    3a74:	c5 01       	movw	r24, r10
    3a76:	09 95       	icall
    3a78:	ba 85       	ldd	r27, Y+10	; 0x0a
    3a7a:	bb 23       	and	r27, r27
    3a7c:	c9 f0       	breq	.+50     	; 0x3ab0 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    3a7e:	93 01       	movw	r18, r6
    3a80:	22 50       	subi	r18, 0x02	; 2
    3a82:	31 09       	sbc	r19, r1
    3a84:	8d 81       	ldd	r24, Y+5	; 0x05
    3a86:	9e 81       	ldd	r25, Y+6	; 0x06
    3a88:	28 0f       	add	r18, r24
    3a8a:	39 1f       	adc	r19, r25
    3a8c:	b2 01       	movw	r22, r4
    3a8e:	ad 85       	ldd	r26, Y+13	; 0x0d
    3a90:	be 85       	ldd	r27, Y+14	; 0x0e
    3a92:	6a 1b       	sub	r22, r26
    3a94:	7b 0b       	sbc	r23, r27
    3a96:	d5 01       	movw	r26, r10
    3a98:	ed 91       	ld	r30, X+
    3a9a:	fc 91       	ld	r31, X
    3a9c:	00 88       	ldd	r0, Z+16	; 0x10
    3a9e:	f1 89       	ldd	r31, Z+17	; 0x11
    3aa0:	e0 2d       	mov	r30, r0
    3aa2:	81 01       	movw	r16, r2
    3aa4:	4b 85       	ldd	r20, Y+11	; 0x0b
    3aa6:	5c 85       	ldd	r21, Y+12	; 0x0c
    3aa8:	4e 19       	sub	r20, r14
    3aaa:	5f 09       	sbc	r21, r15
    3aac:	c5 01       	movw	r24, r10
    3aae:	09 95       	icall
    3ab0:	de 86       	std	Y+14, r13	; 0x0e
    3ab2:	cd 86       	std	Y+13, r12	; 0x0d
    3ab4:	6d cf       	rjmp	.-294    	; 0x3990 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    3ab6:	2e 96       	adiw	r28, 0x0e	; 14
    3ab8:	0f b6       	in	r0, 0x3f	; 63
    3aba:	f8 94       	cli
    3abc:	de bf       	out	0x3e, r29	; 62
    3abe:	0f be       	out	0x3f, r0	; 63
    3ac0:	cd bf       	out	0x3d, r28	; 61
    3ac2:	df 91       	pop	r29
    3ac4:	cf 91       	pop	r28
    3ac6:	1f 91       	pop	r17
    3ac8:	0f 91       	pop	r16
    3aca:	ff 90       	pop	r15
    3acc:	ef 90       	pop	r14
    3ace:	df 90       	pop	r13
    3ad0:	cf 90       	pop	r12
    3ad2:	bf 90       	pop	r11
    3ad4:	af 90       	pop	r10
    3ad6:	9f 90       	pop	r9
    3ad8:	8f 90       	pop	r8
    3ada:	7f 90       	pop	r7
    3adc:	6f 90       	pop	r6
    3ade:	5f 90       	pop	r5
    3ae0:	4f 90       	pop	r4
    3ae2:	3f 90       	pop	r3
    3ae4:	2f 90       	pop	r2
    3ae6:	08 95       	ret

00003ae8 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    3ae8:	6f 92       	push	r6
    3aea:	7f 92       	push	r7
    3aec:	8f 92       	push	r8
    3aee:	9f 92       	push	r9
    3af0:	af 92       	push	r10
    3af2:	bf 92       	push	r11
    3af4:	cf 92       	push	r12
    3af6:	df 92       	push	r13
    3af8:	ef 92       	push	r14
    3afa:	ff 92       	push	r15
    3afc:	0f 93       	push	r16
    3afe:	1f 93       	push	r17
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	ec 01       	movw	r28, r24
    3b06:	4b 01       	movw	r8, r22
    3b08:	3a 01       	movw	r6, r20
    3b0a:	59 01       	movw	r10, r18
    3b0c:	68 01       	movw	r12, r16
    3b0e:	e8 81       	ld	r30, Y
    3b10:	f9 81       	ldd	r31, Y+1	; 0x01
    3b12:	02 84       	ldd	r0, Z+10	; 0x0a
    3b14:	f3 85       	ldd	r31, Z+11	; 0x0b
    3b16:	e0 2d       	mov	r30, r0
    3b18:	09 95       	icall
    3b1a:	95 01       	movw	r18, r10
    3b1c:	22 0f       	add	r18, r18
    3b1e:	33 1f       	adc	r19, r19
    3b20:	2f 5f       	subi	r18, 0xFF	; 255
    3b22:	3f 4f       	sbci	r19, 0xFF	; 255
    3b24:	a3 01       	movw	r20, r6
    3b26:	4a 19       	sub	r20, r10
    3b28:	5b 09       	sbc	r21, r11
    3b2a:	e8 81       	ld	r30, Y
    3b2c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b2e:	00 88       	ldd	r0, Z+16	; 0x10
    3b30:	f1 89       	ldd	r31, Z+17	; 0x11
    3b32:	e0 2d       	mov	r30, r0
    3b34:	b4 01       	movw	r22, r8
    3b36:	ce 01       	movw	r24, r28
    3b38:	09 95       	icall
    3b3a:	f1 2c       	mov	r15, r1
    3b3c:	e1 2c       	mov	r14, r1
    3b3e:	03 e0       	ldi	r16, 0x03	; 3
    3b40:	95 01       	movw	r18, r10
    3b42:	a3 01       	movw	r20, r6
    3b44:	b4 01       	movw	r22, r8
    3b46:	ce 01       	movw	r24, r28
    3b48:	e0 de       	rcall	.-576    	; 0x390a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    3b4a:	e8 81       	ld	r30, Y
    3b4c:	f9 81       	ldd	r31, Y+1	; 0x01
    3b4e:	06 88       	ldd	r0, Z+22	; 0x16
    3b50:	f7 89       	ldd	r31, Z+23	; 0x17
    3b52:	e0 2d       	mov	r30, r0
    3b54:	ce 01       	movw	r24, r28
    3b56:	df 91       	pop	r29
    3b58:	cf 91       	pop	r28
    3b5a:	1f 91       	pop	r17
    3b5c:	0f 91       	pop	r16
    3b5e:	ff 90       	pop	r15
    3b60:	ef 90       	pop	r14
    3b62:	df 90       	pop	r13
    3b64:	cf 90       	pop	r12
    3b66:	bf 90       	pop	r11
    3b68:	af 90       	pop	r10
    3b6a:	9f 90       	pop	r9
    3b6c:	8f 90       	pop	r8
    3b6e:	7f 90       	pop	r7
    3b70:	6f 90       	pop	r6
    3b72:	09 94       	ijmp

00003b74 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    3b74:	2f 92       	push	r2
    3b76:	3f 92       	push	r3
    3b78:	4f 92       	push	r4
    3b7a:	5f 92       	push	r5
    3b7c:	6f 92       	push	r6
    3b7e:	7f 92       	push	r7
    3b80:	8f 92       	push	r8
    3b82:	9f 92       	push	r9
    3b84:	af 92       	push	r10
    3b86:	bf 92       	push	r11
    3b88:	cf 92       	push	r12
    3b8a:	df 92       	push	r13
    3b8c:	ef 92       	push	r14
    3b8e:	ff 92       	push	r15
    3b90:	0f 93       	push	r16
    3b92:	1f 93       	push	r17
    3b94:	cf 93       	push	r28
    3b96:	df 93       	push	r29
    3b98:	cd b7       	in	r28, 0x3d	; 61
    3b9a:	de b7       	in	r29, 0x3e	; 62
    3b9c:	6a 97       	sbiw	r28, 0x1a	; 26
    3b9e:	0f b6       	in	r0, 0x3f	; 63
    3ba0:	f8 94       	cli
    3ba2:	de bf       	out	0x3e, r29	; 62
    3ba4:	0f be       	out	0x3f, r0	; 63
    3ba6:	cd bf       	out	0x3d, r28	; 61
    3ba8:	9a 8f       	std	Y+26, r25	; 0x1a
    3baa:	89 8f       	std	Y+25, r24	; 0x19
    3bac:	7a 83       	std	Y+2, r23	; 0x02
    3bae:	69 83       	std	Y+1, r22	; 0x01
    3bb0:	4a 01       	movw	r8, r20
    3bb2:	d2 2e       	mov	r13, r18
    3bb4:	18 87       	std	Y+8, r17	; 0x08
    3bb6:	0f 83       	std	Y+7, r16	; 0x07
    3bb8:	37 01       	movw	r6, r14
    3bba:	bc 2c       	mov	r11, r12
    3bbc:	dc 01       	movw	r26, r24
    3bbe:	58 96       	adiw	r26, 0x18	; 24
    3bc0:	2d 91       	ld	r18, X+
    3bc2:	3c 91       	ld	r19, X
    3bc4:	59 97       	sbiw	r26, 0x19	; 25
    3bc6:	21 15       	cp	r18, r1
    3bc8:	31 05       	cpc	r19, r1
    3bca:	09 f0       	breq	.+2      	; 0x3bce <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    3bcc:	15 c1       	rjmp	.+554    	; 0x3df8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    3bce:	17 96       	adiw	r26, 0x07	; 7
    3bd0:	8d 91       	ld	r24, X+
    3bd2:	9c 91       	ld	r25, X
    3bd4:	18 97       	sbiw	r26, 0x08	; 8
    3bd6:	68 17       	cp	r22, r24
    3bd8:	79 07       	cpc	r23, r25
    3bda:	0c f0       	brlt	.+2      	; 0x3bde <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    3bdc:	d7 c1       	rjmp	.+942    	; 0x3f8c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3bde:	19 96       	adiw	r26, 0x09	; 9
    3be0:	8d 91       	ld	r24, X+
    3be2:	9c 91       	ld	r25, X
    3be4:	48 17       	cp	r20, r24
    3be6:	59 07       	cpc	r21, r25
    3be8:	0c f0       	brlt	.+2      	; 0x3bec <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    3bea:	d0 c1       	rjmp	.+928    	; 0x3f8c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3bec:	4c 2c       	mov	r4, r12
    3bee:	51 2c       	mov	r5, r1
    3bf0:	b6 e0       	ldi	r27, 0x06	; 6
    3bf2:	cb 9e       	mul	r12, r27
    3bf4:	60 0d       	add	r22, r0
    3bf6:	71 1d       	adc	r23, r1
    3bf8:	11 24       	eor	r1, r1
    3bfa:	7c 87       	std	Y+12, r23	; 0x0c
    3bfc:	6b 87       	std	Y+11, r22	; 0x0b
    3bfe:	16 16       	cp	r1, r22
    3c00:	17 06       	cpc	r1, r23
    3c02:	0c f0       	brlt	.+2      	; 0x3c06 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    3c04:	c3 c1       	rjmp	.+902    	; 0x3f8c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3c06:	ea 2d       	mov	r30, r10
    3c08:	f0 e0       	ldi	r31, 0x00	; 0
    3c0a:	fa 87       	std	Y+10, r31	; 0x0a
    3c0c:	e9 87       	std	Y+9, r30	; 0x09
    3c0e:	93 e0       	ldi	r25, 0x03	; 3
    3c10:	ee 0f       	add	r30, r30
    3c12:	ff 1f       	adc	r31, r31
    3c14:	9a 95       	dec	r25
    3c16:	e1 f7       	brne	.-8      	; 0x3c10 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    3c18:	f8 8b       	std	Y+16, r31	; 0x10
    3c1a:	ef 87       	std	Y+15, r30	; 0x0f
    3c1c:	cf 01       	movw	r24, r30
    3c1e:	84 0f       	add	r24, r20
    3c20:	95 1f       	adc	r25, r21
    3c22:	18 16       	cp	r1, r24
    3c24:	19 06       	cpc	r1, r25
    3c26:	0c f0       	brlt	.+2      	; 0x3c2a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    3c28:	b1 c1       	rjmp	.+866    	; 0x3f8c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    3c2a:	a9 8d       	ldd	r26, Y+25	; 0x19
    3c2c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3c2e:	57 96       	adiw	r26, 0x17	; 23
    3c30:	8c 91       	ld	r24, X
    3c32:	81 11       	cpse	r24, r1
    3c34:	04 c0       	rjmp	.+8      	; 0x3c3e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    3c36:	bf ea       	ldi	r27, 0xAF	; 175
    3c38:	bd 15       	cp	r27, r13
    3c3a:	08 f4       	brcc	.+2      	; 0x3c3e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    3c3c:	d3 94       	inc	r13
    3c3e:	a9 8d       	ldd	r26, Y+25	; 0x19
    3c40:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3c42:	ed 91       	ld	r30, X+
    3c44:	fc 91       	ld	r31, X
    3c46:	11 97       	sbiw	r26, 0x01	; 1
    3c48:	02 84       	ldd	r0, Z+10	; 0x0a
    3c4a:	f3 85       	ldd	r31, Z+11	; 0x0b
    3c4c:	e0 2d       	mov	r30, r0
    3c4e:	cd 01       	movw	r24, r26
    3c50:	09 95       	icall
    3c52:	b5 e0       	ldi	r27, 0x05	; 5
    3c54:	db 9e       	mul	r13, r27
    3c56:	c0 01       	movw	r24, r0
    3c58:	11 24       	eor	r1, r1
    3c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    3c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    3c5e:	fc 83       	std	Y+4, r31	; 0x04
    3c60:	eb 83       	std	Y+3, r30	; 0x03
    3c62:	31 2c       	mov	r3, r1
    3c64:	21 2c       	mov	r2, r1
    3c66:	9c 01       	movw	r18, r24
    3c68:	28 56       	subi	r18, 0x68	; 104
    3c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    3c6c:	38 8f       	std	Y+24, r19	; 0x18
    3c6e:	2f 8b       	std	Y+23, r18	; 0x17
    3c70:	4a 2d       	mov	r20, r10
    3c72:	50 e0       	ldi	r21, 0x00	; 0
    3c74:	5e 8b       	std	Y+22, r21	; 0x16
    3c76:	4d 8b       	std	Y+21, r20	; 0x15
    3c78:	ef 89       	ldd	r30, Y+23	; 0x17
    3c7a:	f8 8d       	ldd	r31, Y+24	; 0x18
    3c7c:	e2 0d       	add	r30, r2
    3c7e:	f3 1d       	adc	r31, r3
    3c80:	44 91       	lpm	r20, Z
    3c82:	9e 82       	std	Y+6, r9	; 0x06
    3c84:	8d 82       	std	Y+5, r8	; 0x05
    3c86:	d1 2c       	mov	r13, r1
    3c88:	c1 2c       	mov	r12, r1
    3c8a:	69 81       	ldd	r22, Y+1	; 0x01
    3c8c:	7a 81       	ldd	r23, Y+2	; 0x02
    3c8e:	62 0d       	add	r22, r2
    3c90:	73 1d       	adc	r23, r3
    3c92:	7a 8b       	std	Y+18, r23	; 0x12
    3c94:	69 8b       	std	Y+17, r22	; 0x11
    3c96:	84 2f       	mov	r24, r20
    3c98:	90 e0       	ldi	r25, 0x00	; 0
    3c9a:	9c 8b       	std	Y+20, r25	; 0x14
    3c9c:	8b 8b       	std	Y+19, r24	; 0x13
    3c9e:	e9 8d       	ldd	r30, Y+25	; 0x19
    3ca0:	fa 8d       	ldd	r31, Y+26	; 0x1a
    3ca2:	a0 81       	ld	r26, Z
    3ca4:	b1 81       	ldd	r27, Z+1	; 0x01
    3ca6:	40 ff       	sbrs	r20, 0
    3ca8:	82 c0       	rjmp	.+260    	; 0x3dae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    3caa:	f1 e0       	ldi	r31, 0x01	; 1
    3cac:	bf 12       	cpse	r11, r31
    3cae:	6f c0       	rjmp	.+222    	; 0x3d8e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    3cb0:	af 12       	cpse	r10, r31
    3cb2:	6d c0       	rjmp	.+218    	; 0x3d8e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    3cb4:	1c 96       	adiw	r26, 0x0c	; 12
    3cb6:	ed 91       	ld	r30, X+
    3cb8:	fc 91       	ld	r31, X
    3cba:	2f 81       	ldd	r18, Y+7	; 0x07
    3cbc:	38 85       	ldd	r19, Y+8	; 0x08
    3cbe:	a4 01       	movw	r20, r8
    3cc0:	4c 0d       	add	r20, r12
    3cc2:	5d 1d       	adc	r21, r13
    3cc4:	69 89       	ldd	r22, Y+17	; 0x11
    3cc6:	7a 89       	ldd	r23, Y+18	; 0x12
    3cc8:	89 8d       	ldd	r24, Y+25	; 0x19
    3cca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3ccc:	09 95       	icall
    3cce:	eb 89       	ldd	r30, Y+19	; 0x13
    3cd0:	fc 89       	ldd	r31, Y+20	; 0x14
    3cd2:	f5 95       	asr	r31
    3cd4:	e7 95       	ror	r30
    3cd6:	4e 2f       	mov	r20, r30
    3cd8:	5f ef       	ldi	r21, 0xFF	; 255
    3cda:	c5 1a       	sub	r12, r21
    3cdc:	d5 0a       	sbc	r13, r21
    3cde:	6d 81       	ldd	r22, Y+5	; 0x05
    3ce0:	7e 81       	ldd	r23, Y+6	; 0x06
    3ce2:	8d 89       	ldd	r24, Y+21	; 0x15
    3ce4:	9e 89       	ldd	r25, Y+22	; 0x16
    3ce6:	68 0f       	add	r22, r24
    3ce8:	79 1f       	adc	r23, r25
    3cea:	7e 83       	std	Y+6, r23	; 0x06
    3cec:	6d 83       	std	Y+5, r22	; 0x05
    3cee:	98 e0       	ldi	r25, 0x08	; 8
    3cf0:	c9 16       	cp	r12, r25
    3cf2:	d1 04       	cpc	r13, r1
    3cf4:	81 f6       	brne	.-96     	; 0x3c96 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    3cf6:	af ef       	ldi	r26, 0xFF	; 255
    3cf8:	2a 1a       	sub	r2, r26
    3cfa:	3a 0a       	sbc	r3, r26
    3cfc:	eb 81       	ldd	r30, Y+3	; 0x03
    3cfe:	fc 81       	ldd	r31, Y+4	; 0x04
    3d00:	e4 0d       	add	r30, r4
    3d02:	f5 1d       	adc	r31, r5
    3d04:	fc 83       	std	Y+4, r31	; 0x04
    3d06:	eb 83       	std	Y+3, r30	; 0x03
    3d08:	f5 e0       	ldi	r31, 0x05	; 5
    3d0a:	2f 16       	cp	r2, r31
    3d0c:	31 04       	cpc	r3, r1
    3d0e:	09 f0       	breq	.+2      	; 0x3d12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    3d10:	b3 cf       	rjmp	.-154    	; 0x3c78 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    3d12:	2f 81       	ldd	r18, Y+7	; 0x07
    3d14:	38 85       	ldd	r19, Y+8	; 0x08
    3d16:	26 15       	cp	r18, r6
    3d18:	37 05       	cpc	r19, r7
    3d1a:	b9 f0       	breq	.+46     	; 0x3d4a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    3d1c:	a9 8d       	ldd	r26, Y+25	; 0x19
    3d1e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3d20:	ed 91       	ld	r30, X+
    3d22:	fc 91       	ld	r31, X
    3d24:	b1 e0       	ldi	r27, 0x01	; 1
    3d26:	bb 12       	cpse	r11, r27
    3d28:	57 c0       	rjmp	.+174    	; 0x3dd8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    3d2a:	ab 12       	cpse	r10, r27
    3d2c:	55 c0       	rjmp	.+170    	; 0x3dd8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    3d2e:	69 81       	ldd	r22, Y+1	; 0x01
    3d30:	7a 81       	ldd	r23, Y+2	; 0x02
    3d32:	6b 5f       	subi	r22, 0xFB	; 251
    3d34:	7f 4f       	sbci	r23, 0xFF	; 255
    3d36:	00 88       	ldd	r0, Z+16	; 0x10
    3d38:	f1 89       	ldd	r31, Z+17	; 0x11
    3d3a:	e0 2d       	mov	r30, r0
    3d3c:	83 01       	movw	r16, r6
    3d3e:	28 e0       	ldi	r18, 0x08	; 8
    3d40:	30 e0       	ldi	r19, 0x00	; 0
    3d42:	a4 01       	movw	r20, r8
    3d44:	89 8d       	ldd	r24, Y+25	; 0x19
    3d46:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3d48:	09 95       	icall
    3d4a:	a9 8d       	ldd	r26, Y+25	; 0x19
    3d4c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3d4e:	ed 91       	ld	r30, X+
    3d50:	fc 91       	ld	r31, X
    3d52:	11 97       	sbiw	r26, 0x01	; 1
    3d54:	06 88       	ldd	r0, Z+22	; 0x16
    3d56:	f7 89       	ldd	r31, Z+23	; 0x17
    3d58:	e0 2d       	mov	r30, r0
    3d5a:	cd 01       	movw	r24, r26
    3d5c:	6a 96       	adiw	r28, 0x1a	; 26
    3d5e:	0f b6       	in	r0, 0x3f	; 63
    3d60:	f8 94       	cli
    3d62:	de bf       	out	0x3e, r29	; 62
    3d64:	0f be       	out	0x3f, r0	; 63
    3d66:	cd bf       	out	0x3d, r28	; 61
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	ff 90       	pop	r15
    3d72:	ef 90       	pop	r14
    3d74:	df 90       	pop	r13
    3d76:	cf 90       	pop	r12
    3d78:	bf 90       	pop	r11
    3d7a:	af 90       	pop	r10
    3d7c:	9f 90       	pop	r9
    3d7e:	8f 90       	pop	r8
    3d80:	7f 90       	pop	r7
    3d82:	6f 90       	pop	r6
    3d84:	5f 90       	pop	r5
    3d86:	4f 90       	pop	r4
    3d88:	3f 90       	pop	r3
    3d8a:	2f 90       	pop	r2
    3d8c:	09 94       	ijmp
    3d8e:	1e 96       	adiw	r26, 0x0e	; 14
    3d90:	ed 91       	ld	r30, X+
    3d92:	fc 91       	ld	r31, X
    3d94:	ef 80       	ldd	r14, Y+7	; 0x07
    3d96:	f8 84       	ldd	r15, Y+8	; 0x08
    3d98:	09 85       	ldd	r16, Y+9	; 0x09
    3d9a:	1a 85       	ldd	r17, Y+10	; 0x0a
    3d9c:	92 01       	movw	r18, r4
    3d9e:	4d 81       	ldd	r20, Y+5	; 0x05
    3da0:	5e 81       	ldd	r21, Y+6	; 0x06
    3da2:	6b 81       	ldd	r22, Y+3	; 0x03
    3da4:	7c 81       	ldd	r23, Y+4	; 0x04
    3da6:	89 8d       	ldd	r24, Y+25	; 0x19
    3da8:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3daa:	09 95       	icall
    3dac:	90 cf       	rjmp	.-224    	; 0x3cce <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    3dae:	2f 81       	ldd	r18, Y+7	; 0x07
    3db0:	38 85       	ldd	r19, Y+8	; 0x08
    3db2:	26 15       	cp	r18, r6
    3db4:	37 05       	cpc	r19, r7
    3db6:	09 f4       	brne	.+2      	; 0x3dba <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    3db8:	8a cf       	rjmp	.-236    	; 0x3cce <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    3dba:	31 e0       	ldi	r19, 0x01	; 1
    3dbc:	b3 12       	cpse	r11, r19
    3dbe:	07 c0       	rjmp	.+14     	; 0x3dce <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    3dc0:	a3 12       	cpse	r10, r19
    3dc2:	05 c0       	rjmp	.+10     	; 0x3dce <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    3dc4:	1c 96       	adiw	r26, 0x0c	; 12
    3dc6:	ed 91       	ld	r30, X+
    3dc8:	fc 91       	ld	r31, X
    3dca:	93 01       	movw	r18, r6
    3dcc:	78 cf       	rjmp	.-272    	; 0x3cbe <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    3dce:	1e 96       	adiw	r26, 0x0e	; 14
    3dd0:	ed 91       	ld	r30, X+
    3dd2:	fc 91       	ld	r31, X
    3dd4:	73 01       	movw	r14, r6
    3dd6:	e0 cf       	rjmp	.-64     	; 0x3d98 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    3dd8:	6b 85       	ldd	r22, Y+11	; 0x0b
    3dda:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ddc:	64 19       	sub	r22, r4
    3dde:	75 09       	sbc	r23, r5
    3de0:	06 84       	ldd	r0, Z+14	; 0x0e
    3de2:	f7 85       	ldd	r31, Z+15	; 0x0f
    3de4:	e0 2d       	mov	r30, r0
    3de6:	73 01       	movw	r14, r6
    3de8:	0f 85       	ldd	r16, Y+15	; 0x0f
    3dea:	18 89       	ldd	r17, Y+16	; 0x10
    3dec:	92 01       	movw	r18, r4
    3dee:	a4 01       	movw	r20, r8
    3df0:	89 8d       	ldd	r24, Y+25	; 0x19
    3df2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3df4:	09 95       	icall
    3df6:	a9 cf       	rjmp	.-174    	; 0x3d4a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    3df8:	f9 01       	movw	r30, r18
    3dfa:	34 96       	adiw	r30, 0x04	; 4
    3dfc:	94 91       	lpm	r25, Z
    3dfe:	32 97       	sbiw	r30, 0x02	; 2
    3e00:	45 91       	lpm	r20, Z+
    3e02:	54 91       	lpm	r21, Z
    3e04:	d9 1a       	sub	r13, r25
    3e06:	b7 e0       	ldi	r27, 0x07	; 7
    3e08:	db 9e       	mul	r13, r27
    3e0a:	40 0d       	add	r20, r0
    3e0c:	51 1d       	adc	r21, r1
    3e0e:	11 24       	eor	r1, r1
    3e10:	f9 01       	movw	r30, r18
    3e12:	25 91       	lpm	r18, Z+
    3e14:	34 91       	lpm	r19, Z
    3e16:	3c 8b       	std	Y+20, r19	; 0x14
    3e18:	2b 8b       	std	Y+19, r18	; 0x13
    3e1a:	fa 01       	movw	r30, r20
    3e1c:	25 90       	lpm	r2, Z+
    3e1e:	34 90       	lpm	r3, Z
    3e20:	fa 01       	movw	r30, r20
    3e22:	32 96       	adiw	r30, 0x02	; 2
    3e24:	74 90       	lpm	r7, Z
    3e26:	31 96       	adiw	r30, 0x01	; 1
    3e28:	34 91       	lpm	r19, Z
    3e2a:	39 8b       	std	Y+17, r19	; 0x11
    3e2c:	32 96       	adiw	r30, 0x02	; 2
    3e2e:	64 90       	lpm	r6, Z
    3e30:	31 96       	adiw	r30, 0x01	; 1
    3e32:	44 90       	lpm	r4, Z
    3e34:	41 e0       	ldi	r20, 0x01	; 1
    3e36:	4c 15       	cp	r20, r12
    3e38:	18 f0       	brcs	.+6      	; 0x3e40 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    3e3a:	4a 15       	cp	r20, r10
    3e3c:	08 f0       	brcs	.+2      	; 0x3e40 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    3e3e:	7f c0       	rjmp	.+254    	; 0x3f3e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    3e40:	66 2d       	mov	r22, r6
    3e42:	06 2c       	mov	r0, r6
    3e44:	00 0c       	add	r0, r0
    3e46:	77 0b       	sbc	r23, r23
    3e48:	7c 83       	std	Y+4, r23	; 0x04
    3e4a:	6b 83       	std	Y+3, r22	; 0x03
    3e4c:	84 2d       	mov	r24, r4
    3e4e:	04 2c       	mov	r0, r4
    3e50:	00 0c       	add	r0, r0
    3e52:	99 0b       	sbc	r25, r25
    3e54:	9e 83       	std	Y+6, r25	; 0x06
    3e56:	8d 83       	std	Y+5, r24	; 0x05
    3e58:	a9 8d       	ldd	r26, Y+25	; 0x19
    3e5a:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3e5c:	ed 91       	ld	r30, X+
    3e5e:	fc 91       	ld	r31, X
    3e60:	11 97       	sbiw	r26, 0x01	; 1
    3e62:	02 84       	ldd	r0, Z+10	; 0x0a
    3e64:	f3 85       	ldd	r31, Z+11	; 0x0b
    3e66:	e0 2d       	mov	r30, r0
    3e68:	cd 01       	movw	r24, r26
    3e6a:	09 95       	icall
    3e6c:	51 2c       	mov	r5, r1
    3e6e:	d1 2c       	mov	r13, r1
    3e70:	c1 2c       	mov	r12, r1
    3e72:	ea 2d       	mov	r30, r10
    3e74:	f0 e0       	ldi	r31, 0x00	; 0
    3e76:	fa 87       	std	Y+10, r31	; 0x0a
    3e78:	e9 87       	std	Y+9, r30	; 0x09
    3e7a:	2b 2d       	mov	r18, r11
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	3c 87       	std	Y+12, r19	; 0x0c
    3e80:	2b 87       	std	Y+11, r18	; 0x0b
    3e82:	a4 01       	movw	r20, r8
    3e84:	44 0d       	add	r20, r4
    3e86:	51 1d       	adc	r21, r1
    3e88:	47 fc       	sbrc	r4, 7
    3e8a:	5a 95       	dec	r21
    3e8c:	58 8f       	std	Y+24, r21	; 0x18
    3e8e:	4f 8b       	std	Y+23, r20	; 0x17
    3e90:	69 81       	ldd	r22, Y+1	; 0x01
    3e92:	7a 81       	ldd	r23, Y+2	; 0x02
    3e94:	66 0d       	add	r22, r6
    3e96:	71 1d       	adc	r23, r1
    3e98:	67 fc       	sbrc	r6, 7
    3e9a:	7a 95       	dec	r23
    3e9c:	7e 87       	std	Y+14, r23	; 0x0e
    3e9e:	6d 87       	std	Y+13, r22	; 0x0d
    3ea0:	79 89       	ldd	r23, Y+17	; 0x11
    3ea2:	c7 16       	cp	r12, r23
    3ea4:	08 f0       	brcs	.+2      	; 0x3ea8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    3ea6:	51 cf       	rjmp	.-350    	; 0x3d4a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    3ea8:	2c 2d       	mov	r18, r12
    3eaa:	30 e0       	ldi	r19, 0x00	; 0
    3eac:	4d 81       	ldd	r20, Y+5	; 0x05
    3eae:	5e 81       	ldd	r21, Y+6	; 0x06
    3eb0:	42 0f       	add	r20, r18
    3eb2:	53 1f       	adc	r21, r19
    3eb4:	a9 85       	ldd	r26, Y+9	; 0x09
    3eb6:	ba 85       	ldd	r27, Y+10	; 0x0a
    3eb8:	4a 9f       	mul	r20, r26
    3eba:	c0 01       	movw	r24, r0
    3ebc:	4b 9f       	mul	r20, r27
    3ebe:	90 0d       	add	r25, r0
    3ec0:	5a 9f       	mul	r21, r26
    3ec2:	90 0d       	add	r25, r0
    3ec4:	11 24       	eor	r1, r1
    3ec6:	fc 01       	movw	r30, r24
    3ec8:	e8 0d       	add	r30, r8
    3eca:	f9 1d       	adc	r31, r9
    3ecc:	f8 8b       	std	Y+16, r31	; 0x10
    3ece:	ef 87       	std	Y+15, r30	; 0x0f
    3ed0:	85 2d       	mov	r24, r5
    3ed2:	61 2c       	mov	r6, r1
    3ed4:	4f 89       	ldd	r20, Y+23	; 0x17
    3ed6:	58 8d       	ldd	r21, Y+24	; 0x18
    3ed8:	42 0f       	add	r20, r18
    3eda:	53 1f       	adc	r21, r19
    3edc:	5e 8b       	std	Y+22, r21	; 0x16
    3ede:	4d 8b       	std	Y+21, r20	; 0x15
    3ee0:	67 14       	cp	r6, r7
    3ee2:	08 f0       	brcs	.+2      	; 0x3ee6 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    3ee4:	50 c0       	rjmp	.+160    	; 0x3f86 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    3ee6:	44 24       	eor	r4, r4
    3ee8:	43 94       	inc	r4
    3eea:	48 0e       	add	r4, r24
    3eec:	87 70       	andi	r24, 0x07	; 7
    3eee:	41 f4       	brne	.+16     	; 0x3f00 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    3ef0:	c1 01       	movw	r24, r2
    3ef2:	01 96       	adiw	r24, 0x01	; 1
    3ef4:	eb 89       	ldd	r30, Y+19	; 0x13
    3ef6:	fc 89       	ldd	r31, Y+20	; 0x14
    3ef8:	e2 0d       	add	r30, r2
    3efa:	f3 1d       	adc	r31, r3
    3efc:	d4 90       	lpm	r13, Z
    3efe:	1c 01       	movw	r2, r24
    3f00:	d7 fe       	sbrs	r13, 7
    3f02:	19 c0       	rjmp	.+50     	; 0x3f36 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    3f04:	a9 8d       	ldd	r26, Y+25	; 0x19
    3f06:	ba 8d       	ldd	r27, Y+26	; 0x1a
    3f08:	ed 91       	ld	r30, X+
    3f0a:	fc 91       	ld	r31, X
    3f0c:	66 2d       	mov	r22, r6
    3f0e:	70 e0       	ldi	r23, 0x00	; 0
    3f10:	b1 e0       	ldi	r27, 0x01	; 1
    3f12:	bb 12       	cpse	r11, r27
    3f14:	19 c0       	rjmp	.+50     	; 0x3f48 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    3f16:	ab 12       	cpse	r10, r27
    3f18:	17 c0       	rjmp	.+46     	; 0x3f48 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    3f1a:	2d 85       	ldd	r18, Y+13	; 0x0d
    3f1c:	3e 85       	ldd	r19, Y+14	; 0x0e
    3f1e:	62 0f       	add	r22, r18
    3f20:	73 1f       	adc	r23, r19
    3f22:	04 84       	ldd	r0, Z+12	; 0x0c
    3f24:	f5 85       	ldd	r31, Z+13	; 0x0d
    3f26:	e0 2d       	mov	r30, r0
    3f28:	2f 81       	ldd	r18, Y+7	; 0x07
    3f2a:	38 85       	ldd	r19, Y+8	; 0x08
    3f2c:	4d 89       	ldd	r20, Y+21	; 0x15
    3f2e:	5e 89       	ldd	r21, Y+22	; 0x16
    3f30:	89 8d       	ldd	r24, Y+25	; 0x19
    3f32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f34:	09 95       	icall
    3f36:	dd 0c       	add	r13, r13
    3f38:	63 94       	inc	r6
    3f3a:	84 2d       	mov	r24, r4
    3f3c:	d1 cf       	rjmp	.-94     	; 0x3ee0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    3f3e:	1e 82       	std	Y+6, r1	; 0x06
    3f40:	1d 82       	std	Y+5, r1	; 0x05
    3f42:	1c 82       	std	Y+4, r1	; 0x04
    3f44:	1b 82       	std	Y+3, r1	; 0x03
    3f46:	88 cf       	rjmp	.-240    	; 0x3e58 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    3f48:	4b 81       	ldd	r20, Y+3	; 0x03
    3f4a:	5c 81       	ldd	r21, Y+4	; 0x04
    3f4c:	64 0f       	add	r22, r20
    3f4e:	75 1f       	adc	r23, r21
    3f50:	ab 85       	ldd	r26, Y+11	; 0x0b
    3f52:	bc 85       	ldd	r27, Y+12	; 0x0c
    3f54:	6a 9f       	mul	r22, r26
    3f56:	c0 01       	movw	r24, r0
    3f58:	6b 9f       	mul	r22, r27
    3f5a:	90 0d       	add	r25, r0
    3f5c:	7a 9f       	mul	r23, r26
    3f5e:	90 0d       	add	r25, r0
    3f60:	11 24       	eor	r1, r1
    3f62:	69 81       	ldd	r22, Y+1	; 0x01
    3f64:	7a 81       	ldd	r23, Y+2	; 0x02
    3f66:	68 0f       	add	r22, r24
    3f68:	79 1f       	adc	r23, r25
    3f6a:	06 84       	ldd	r0, Z+14	; 0x0e
    3f6c:	f7 85       	ldd	r31, Z+15	; 0x0f
    3f6e:	e0 2d       	mov	r30, r0
    3f70:	ef 80       	ldd	r14, Y+7	; 0x07
    3f72:	f8 84       	ldd	r15, Y+8	; 0x08
    3f74:	09 85       	ldd	r16, Y+9	; 0x09
    3f76:	1a 85       	ldd	r17, Y+10	; 0x0a
    3f78:	9d 01       	movw	r18, r26
    3f7a:	4f 85       	ldd	r20, Y+15	; 0x0f
    3f7c:	58 89       	ldd	r21, Y+16	; 0x10
    3f7e:	89 8d       	ldd	r24, Y+25	; 0x19
    3f80:	9a 8d       	ldd	r25, Y+26	; 0x1a
    3f82:	09 95       	icall
    3f84:	d8 cf       	rjmp	.-80     	; 0x3f36 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    3f86:	57 0c       	add	r5, r7
    3f88:	c3 94       	inc	r12
    3f8a:	8a cf       	rjmp	.-236    	; 0x3ea0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    3f8c:	6a 96       	adiw	r28, 0x1a	; 26
    3f8e:	0f b6       	in	r0, 0x3f	; 63
    3f90:	f8 94       	cli
    3f92:	de bf       	out	0x3e, r29	; 62
    3f94:	0f be       	out	0x3f, r0	; 63
    3f96:	cd bf       	out	0x3d, r28	; 61
    3f98:	df 91       	pop	r29
    3f9a:	cf 91       	pop	r28
    3f9c:	1f 91       	pop	r17
    3f9e:	0f 91       	pop	r16
    3fa0:	ff 90       	pop	r15
    3fa2:	ef 90       	pop	r14
    3fa4:	df 90       	pop	r13
    3fa6:	cf 90       	pop	r12
    3fa8:	bf 90       	pop	r11
    3faa:	af 90       	pop	r10
    3fac:	9f 90       	pop	r9
    3fae:	8f 90       	pop	r8
    3fb0:	7f 90       	pop	r7
    3fb2:	6f 90       	pop	r6
    3fb4:	5f 90       	pop	r5
    3fb6:	4f 90       	pop	r4
    3fb8:	3f 90       	pop	r3
    3fba:	2f 90       	pop	r2
    3fbc:	08 95       	ret

00003fbe <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    3fbe:	8f 92       	push	r8
    3fc0:	9f 92       	push	r9
    3fc2:	af 92       	push	r10
    3fc4:	cf 92       	push	r12
    3fc6:	ef 92       	push	r14
    3fc8:	ff 92       	push	r15
    3fca:	0f 93       	push	r16
    3fcc:	1f 93       	push	r17
    3fce:	cf 93       	push	r28
    3fd0:	df 93       	push	r29
    3fd2:	ec 01       	movw	r28, r24
    3fd4:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    3fd6:	88 8d       	ldd	r24, Y+24	; 0x18
    3fd8:	99 8d       	ldd	r25, Y+25	; 0x19
    3fda:	00 97       	sbiw	r24, 0x00	; 0
    3fdc:	09 f0       	breq	.+2      	; 0x3fe0 <Adafruit_GFX::write(unsigned char)+0x22>
    3fde:	50 c0       	rjmp	.+160    	; 0x4080 <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    3fe0:	6a 30       	cpi	r22, 0x0A	; 10
    3fe2:	d1 f4       	brne	.+52     	; 0x4018 <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    3fe4:	1c 86       	std	Y+12, r1	; 0x0c
    3fe6:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    3fe8:	8c 89       	ldd	r24, Y+20	; 0x14
    3fea:	48 e0       	ldi	r20, 0x08	; 8
    3fec:	84 9f       	mul	r24, r20
    3fee:	90 01       	movw	r18, r0
    3ff0:	11 24       	eor	r1, r1
    3ff2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ff4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ff6:	82 0f       	add	r24, r18
    3ff8:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    3ffa:	9e 87       	std	Y+14, r25	; 0x0e
    3ffc:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    3ffe:	81 e0       	ldi	r24, 0x01	; 1
    4000:	90 e0       	ldi	r25, 0x00	; 0
    4002:	df 91       	pop	r29
    4004:	cf 91       	pop	r28
    4006:	1f 91       	pop	r17
    4008:	0f 91       	pop	r16
    400a:	ff 90       	pop	r15
    400c:	ef 90       	pop	r14
    400e:	cf 90       	pop	r12
    4010:	af 90       	pop	r10
    4012:	9f 90       	pop	r9
    4014:	8f 90       	pop	r8
    4016:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    4018:	6d 30       	cpi	r22, 0x0D	; 13
    401a:	89 f3       	breq	.-30     	; 0x3ffe <Adafruit_GFX::write(unsigned char)+0x40>
    401c:	cb 88       	ldd	r12, Y+19	; 0x13
    401e:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    4020:	8e 89       	ldd	r24, Y+22	; 0x16
    4022:	88 23       	and	r24, r24
    4024:	c1 f0       	breq	.+48     	; 0x4056 <Adafruit_GFX::write(unsigned char)+0x98>
    4026:	8b 85       	ldd	r24, Y+11	; 0x0b
    4028:	9c 85       	ldd	r25, Y+12	; 0x0c
    402a:	36 e0       	ldi	r19, 0x06	; 6
    402c:	c3 9e       	mul	r12, r19
    402e:	80 0d       	add	r24, r0
    4030:	91 1d       	adc	r25, r1
    4032:	11 24       	eor	r1, r1
    4034:	4f 81       	ldd	r20, Y+7	; 0x07
    4036:	58 85       	ldd	r21, Y+8	; 0x08
    4038:	48 17       	cp	r20, r24
    403a:	59 07       	cpc	r21, r25
    403c:	64 f4       	brge	.+24     	; 0x4056 <Adafruit_GFX::write(unsigned char)+0x98>
    403e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4040:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    4042:	1c 86       	std	Y+12, r1	; 0x0c
    4044:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    4046:	38 e0       	ldi	r19, 0x08	; 8
    4048:	a3 9e       	mul	r10, r19
    404a:	c0 01       	movw	r24, r0
    404c:	11 24       	eor	r1, r1
    404e:	84 0f       	add	r24, r20
    4050:	95 1f       	adc	r25, r21
    4052:	9e 87       	std	Y+14, r25	; 0x0e
    4054:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    4056:	e9 88       	ldd	r14, Y+17	; 0x11
    4058:	fa 88       	ldd	r15, Y+18	; 0x12
    405a:	0f 85       	ldd	r16, Y+15	; 0x0f
    405c:	18 89       	ldd	r17, Y+16	; 0x10
    405e:	4d 85       	ldd	r20, Y+13	; 0x0d
    4060:	5e 85       	ldd	r21, Y+14	; 0x0e
    4062:	6b 85       	ldd	r22, Y+11	; 0x0b
    4064:	7c 85       	ldd	r23, Y+12	; 0x0c
    4066:	ce 01       	movw	r24, r28
    4068:	85 dd       	rcall	.-1270   	; 0x3b74 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    406a:	2b 89       	ldd	r18, Y+19	; 0x13
    406c:	8b 85       	ldd	r24, Y+11	; 0x0b
    406e:	9c 85       	ldd	r25, Y+12	; 0x0c
    4070:	46 e0       	ldi	r20, 0x06	; 6
    4072:	24 9f       	mul	r18, r20
    4074:	80 0d       	add	r24, r0
    4076:	91 1d       	adc	r25, r1
    4078:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    407a:	9c 87       	std	Y+12, r25	; 0x0c
    407c:	8b 87       	std	Y+11, r24	; 0x0b
    407e:	bf cf       	rjmp	.-130    	; 0x3ffe <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    4080:	6a 30       	cpi	r22, 0x0A	; 10
    4082:	69 f4       	brne	.+26     	; 0x409e <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    4084:	1c 86       	std	Y+12, r1	; 0x0c
    4086:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4088:	fc 01       	movw	r30, r24
    408a:	36 96       	adiw	r30, 0x06	; 6
    408c:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    408e:	2c 89       	ldd	r18, Y+20	; 0x14
    4090:	8d 85       	ldd	r24, Y+13	; 0x0d
    4092:	9e 85       	ldd	r25, Y+14	; 0x0e
    4094:	e2 9f       	mul	r30, r18
    4096:	80 0d       	add	r24, r0
    4098:	91 1d       	adc	r25, r1
    409a:	11 24       	eor	r1, r1
    409c:	ae cf       	rjmp	.-164    	; 0x3ffa <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    409e:	6d 30       	cpi	r22, 0x0D	; 13
    40a0:	09 f4       	brne	.+2      	; 0x40a4 <Adafruit_GFX::write(unsigned char)+0xe6>
    40a2:	ad cf       	rjmp	.-166    	; 0x3ffe <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    40a4:	fc 01       	movw	r30, r24
    40a6:	34 96       	adiw	r30, 0x04	; 4
    40a8:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    40aa:	63 17       	cp	r22, r19
    40ac:	08 f4       	brcc	.+2      	; 0x40b0 <Adafruit_GFX::write(unsigned char)+0xf2>
    40ae:	a7 cf       	rjmp	.-178    	; 0x3ffe <Adafruit_GFX::write(unsigned char)+0x40>
    40b0:	31 96       	adiw	r30, 0x01	; 1
    40b2:	e4 91       	lpm	r30, Z
    40b4:	e6 17       	cp	r30, r22
    40b6:	08 f4       	brcc	.+2      	; 0x40ba <Adafruit_GFX::write(unsigned char)+0xfc>
    40b8:	a2 cf       	rjmp	.-188    	; 0x3ffe <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    40ba:	fc 01       	movw	r30, r24
    40bc:	32 96       	adiw	r30, 0x02	; 2
    40be:	85 90       	lpm	r8, Z+
    40c0:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    40c2:	46 2f       	mov	r20, r22
    40c4:	43 1b       	sub	r20, r19
    40c6:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    40c8:	47 e0       	ldi	r20, 0x07	; 7
    40ca:	34 9f       	mul	r19, r20
    40cc:	80 0c       	add	r8, r0
    40ce:	91 1c       	adc	r9, r1
    40d0:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    40d2:	f4 01       	movw	r30, r8
    40d4:	32 96       	adiw	r30, 0x02	; 2
    40d6:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    40d8:	31 96       	adiw	r30, 0x01	; 1
    40da:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    40dc:	33 23       	and	r19, r19
    40de:	a1 f1       	breq	.+104    	; 0x4148 <Adafruit_GFX::write(unsigned char)+0x18a>
    40e0:	ee 23       	and	r30, r30
    40e2:	91 f1       	breq	.+100    	; 0x4148 <Adafruit_GFX::write(unsigned char)+0x18a>
    40e4:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    40e6:	f4 01       	movw	r30, r8
    40e8:	35 96       	adiw	r30, 0x05	; 5
    40ea:	e4 91       	lpm	r30, Z
    40ec:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    40ee:	4e 89       	ldd	r20, Y+22	; 0x16
    40f0:	44 23       	and	r20, r20
    40f2:	01 f1       	breq	.+64     	; 0x4134 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    40f4:	0e 2e       	mov	r0, r30
    40f6:	00 0c       	add	r0, r0
    40f8:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    40fa:	e3 0f       	add	r30, r19
    40fc:	f1 1d       	adc	r31, r1
    40fe:	ce 9e       	mul	r12, r30
    4100:	a0 01       	movw	r20, r0
    4102:	cf 9e       	mul	r12, r31
    4104:	50 0d       	add	r21, r0
    4106:	11 24       	eor	r1, r1
    4108:	6b 85       	ldd	r22, Y+11	; 0x0b
    410a:	7c 85       	ldd	r23, Y+12	; 0x0c
    410c:	46 0f       	add	r20, r22
    410e:	57 1f       	adc	r21, r23
    4110:	6f 81       	ldd	r22, Y+7	; 0x07
    4112:	78 85       	ldd	r23, Y+8	; 0x08
    4114:	64 17       	cp	r22, r20
    4116:	75 07       	cpc	r23, r21
    4118:	6c f4       	brge	.+26     	; 0x4134 <Adafruit_GFX::write(unsigned char)+0x176>
    411a:	4d 85       	ldd	r20, Y+13	; 0x0d
    411c:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    411e:	1c 86       	std	Y+12, r1	; 0x0c
    4120:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    4122:	fc 01       	movw	r30, r24
    4124:	36 96       	adiw	r30, 0x06	; 6
    4126:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    4128:	ae 9e       	mul	r10, r30
    412a:	40 0d       	add	r20, r0
    412c:	51 1d       	adc	r21, r1
    412e:	11 24       	eor	r1, r1
    4130:	5e 87       	std	Y+14, r21	; 0x0e
    4132:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    4134:	e9 88       	ldd	r14, Y+17	; 0x11
    4136:	fa 88       	ldd	r15, Y+18	; 0x12
    4138:	0f 85       	ldd	r16, Y+15	; 0x0f
    413a:	18 89       	ldd	r17, Y+16	; 0x10
    413c:	4d 85       	ldd	r20, Y+13	; 0x0d
    413e:	5e 85       	ldd	r21, Y+14	; 0x0e
    4140:	6b 85       	ldd	r22, Y+11	; 0x0b
    4142:	7c 85       	ldd	r23, Y+12	; 0x0c
    4144:	ce 01       	movw	r24, r28
    4146:	16 dd       	rcall	.-1492   	; 0x3b74 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    4148:	f4 01       	movw	r30, r8
    414a:	34 96       	adiw	r30, 0x04	; 4
    414c:	e4 91       	lpm	r30, Z
    414e:	2b 89       	ldd	r18, Y+19	; 0x13
    4150:	8b 85       	ldd	r24, Y+11	; 0x0b
    4152:	9c 85       	ldd	r25, Y+12	; 0x0c
    4154:	e2 9f       	mul	r30, r18
    4156:	80 0d       	add	r24, r0
    4158:	91 1d       	adc	r25, r1
    415a:	11 24       	eor	r1, r1
    415c:	8e cf       	rjmp	.-228    	; 0x407a <Adafruit_GFX::write(unsigned char)+0xbc>

0000415e <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    415e:	61 11       	cpse	r22, r1
    4160:	01 c0       	rjmp	.+2      	; 0x4164 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    4162:	61 e0       	ldi	r22, 0x01	; 1
    4164:	fc 01       	movw	r30, r24
    4166:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    4168:	41 11       	cpse	r20, r1
    416a:	01 c0       	rjmp	.+2      	; 0x416e <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    416c:	41 e0       	ldi	r20, 0x01	; 1
    416e:	fc 01       	movw	r30, r24
    4170:	44 8b       	std	Z+20, r20	; 0x14
}
    4172:	08 95       	ret

00004174 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    4174:	46 2f       	mov	r20, r22
    4176:	f3 cf       	rjmp	.-26     	; 0x415e <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

00004178 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    4178:	ff 92       	push	r15
    417a:	0f 93       	push	r16
    417c:	1f 93       	push	r17
    417e:	cf 93       	push	r28
    4180:	df 93       	push	r29
    4182:	ec 01       	movw	r28, r24
    4184:	f0 2e       	mov	r15, r16
    4186:	10 e0       	ldi	r17, 0x00	; 0
    4188:	00 e0       	ldi	r16, 0x00	; 0
    418a:	20 d0       	rcall	.+64     	; 0x41cc <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    418c:	8b ee       	ldi	r24, 0xEB	; 235
    418e:	96 e0       	ldi	r25, 0x06	; 6
    4190:	99 83       	std	Y+1, r25	; 0x01
    4192:	88 83       	st	Y, r24
    4194:	fe 01       	movw	r30, r28
    4196:	e6 5e       	subi	r30, 0xE6	; 230
    4198:	fe 4f       	sbci	r31, 0xFE	; 254
    419a:	f0 82       	st	Z, r15
    419c:	31 96       	adiw	r30, 0x01	; 1
    419e:	10 82       	st	Z, r1
    41a0:	c4 5e       	subi	r28, 0xE4	; 228
    41a2:	de 4f       	sbci	r29, 0xFE	; 254
    41a4:	18 82       	st	Y, r1
    41a6:	df 91       	pop	r29
    41a8:	cf 91       	pop	r28
    41aa:	1f 91       	pop	r17
    41ac:	0f 91       	pop	r16
    41ae:	ff 90       	pop	r15
    41b0:	08 95       	ret

000041b2 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    41b2:	8d 5d       	subi	r24, 0xDD	; 221
    41b4:	9e 4f       	sbci	r25, 0xFE	; 254
    41b6:	dc 01       	movw	r26, r24
    41b8:	ed 91       	ld	r30, X+
    41ba:	fc 91       	ld	r31, X
    41bc:	30 97       	sbiw	r30, 0x00	; 0
    41be:	09 f0       	breq	.+2      	; 0x41c2 <FastLED_NeoMatrix::show()+0x10>
    41c0:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    41c2:	60 91 7f 0e 	lds	r22, 0x0E7F	; 0x800e7f <FastLED>
    41c6:	8f e7       	ldi	r24, 0x7F	; 127
    41c8:	9e e0       	ldi	r25, 0x0E	; 14
    41ca:	b8 c3       	rjmp	.+1904   	; 0x493c <CFastLED::show(unsigned char)>

000041cc <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
  _fb[XY(x,y)] = color;
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
  drawPixel(x, y, CRGBtoint32(c));
}
    41cc:	af 92       	push	r10
    41ce:	bf 92       	push	r11
    41d0:	cf 92       	push	r12
    41d2:	df 92       	push	r13
    41d4:	ef 92       	push	r14
    41d6:	ff 92       	push	r15
    41d8:	0f 93       	push	r16
    41da:	1f 93       	push	r17
    41dc:	cf 93       	push	r28
    41de:	df 93       	push	r29
    41e0:	ec 01       	movw	r28, r24
    41e2:	5b 01       	movw	r10, r22
    41e4:	7a 01       	movw	r14, r20
    41e6:	69 01       	movw	r12, r18
    41e8:	a9 01       	movw	r20, r18
    41ea:	b7 01       	movw	r22, r14
    41ec:	6d db       	rcall	.-2342   	; 0x38c8 <Adafruit_GFX::Adafruit_GFX(int, int)>
    41ee:	8e e4       	ldi	r24, 0x4E	; 78
    41f0:	97 e0       	ldi	r25, 0x07	; 7
    41f2:	99 83       	std	Y+1, r25	; 0x01
    41f4:	88 83       	st	Y, r24
    41f6:	fe 01       	movw	r30, r28
    41f8:	e3 5e       	subi	r30, 0xE3	; 227
    41fa:	fe 4f       	sbci	r31, 0xFE	; 254
    41fc:	f1 82       	std	Z+1, r15	; 0x01
    41fe:	e0 82       	st	Z, r14
    4200:	32 96       	adiw	r30, 0x02	; 2
    4202:	d1 82       	std	Z+1, r13	; 0x01
    4204:	c0 82       	st	Z, r12
    4206:	32 96       	adiw	r30, 0x02	; 2
    4208:	80 e1       	ldi	r24, 0x10	; 16
    420a:	97 e2       	ldi	r25, 0x27	; 39
    420c:	91 83       	std	Z+1, r25	; 0x01
    420e:	80 83       	st	Z, r24
    4210:	36 96       	adiw	r30, 0x06	; 6
    4212:	11 82       	std	Z+1, r1	; 0x01
    4214:	10 82       	st	Z, r1
    4216:	3a 96       	adiw	r30, 0x0a	; 10
    4218:	10 82       	st	Z, r1
    421a:	3c 97       	sbiw	r30, 0x0c	; 12
    421c:	b1 82       	std	Z+1, r11	; 0x01
    421e:	a0 82       	st	Z, r10
    4220:	32 97       	sbiw	r30, 0x02	; 2
    4222:	11 83       	std	Z+1, r17	; 0x01
    4224:	00 83       	st	Z, r16
    4226:	39 97       	sbiw	r30, 0x09	; 9
    4228:	10 82       	st	Z, r1
    422a:	31 96       	adiw	r30, 0x01	; 1
    422c:	10 82       	st	Z, r1
    422e:	31 96       	adiw	r30, 0x01	; 1
    4230:	10 82       	st	Z, r1
    4232:	c7 5d       	subi	r28, 0xD7	; 215
    4234:	de 4f       	sbci	r29, 0xFE	; 254
    4236:	ce 9c       	mul	r12, r14
    4238:	c0 01       	movw	r24, r0
    423a:	cf 9c       	mul	r12, r15
    423c:	90 0d       	add	r25, r0
    423e:	de 9c       	mul	r13, r14
    4240:	90 0d       	add	r25, r0
    4242:	11 24       	eor	r1, r1
    4244:	b0 e0       	ldi	r27, 0x00	; 0
    4246:	a0 e0       	ldi	r26, 0x00	; 0
    4248:	88 83       	st	Y, r24
    424a:	99 83       	std	Y+1, r25	; 0x01
    424c:	aa 83       	std	Y+2, r26	; 0x02
    424e:	bb 83       	std	Y+3, r27	; 0x03
    4250:	df 91       	pop	r29
    4252:	cf 91       	pop	r28
    4254:	1f 91       	pop	r17
    4256:	0f 91       	pop	r16
    4258:	ff 90       	pop	r15
    425a:	ef 90       	pop	r14
    425c:	df 90       	pop	r13
    425e:	cf 90       	pop	r12
    4260:	bf 90       	pop	r11
    4262:	af 90       	pop	r10
    4264:	08 95       	ret

00004266 <Framebuffer_GFX::begin()>:
    4266:	cf 93       	push	r28
    4268:	df 93       	push	r29
    426a:	ec 01       	movw	r28, r24
    426c:	63 e1       	ldi	r22, 0x13	; 19
    426e:	77 e0       	ldi	r23, 0x07	; 7
    4270:	8f e0       	ldi	r24, 0x0F	; 15
    4272:	9f e0       	ldi	r25, 0x0F	; 15
    4274:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    4278:	fe 01       	movw	r30, r28
    427a:	e3 5e       	subi	r30, 0xE3	; 227
    427c:	fe 4f       	sbci	r31, 0xFE	; 254
    427e:	40 81       	ld	r20, Z
    4280:	51 81       	ldd	r21, Z+1	; 0x01
    4282:	70 e0       	ldi	r23, 0x00	; 0
    4284:	60 e0       	ldi	r22, 0x00	; 0
    4286:	20 e0       	ldi	r18, 0x00	; 0
    4288:	8f e0       	ldi	r24, 0x0F	; 15
    428a:	9f e0       	ldi	r25, 0x0F	; 15
    428c:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <Print::printNumberDec(unsigned long, unsigned char)>
    4290:	62 e3       	ldi	r22, 0x32	; 50
    4292:	77 e0       	ldi	r23, 0x07	; 7
    4294:	8f e0       	ldi	r24, 0x0F	; 15
    4296:	9f e0       	ldi	r25, 0x0F	; 15
    4298:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    429c:	fe 01       	movw	r30, r28
    429e:	e1 5e       	subi	r30, 0xE1	; 225
    42a0:	fe 4f       	sbci	r31, 0xFE	; 254
    42a2:	40 81       	ld	r20, Z
    42a4:	51 81       	ldd	r21, Z+1	; 0x01
    42a6:	70 e0       	ldi	r23, 0x00	; 0
    42a8:	60 e0       	ldi	r22, 0x00	; 0
    42aa:	20 e0       	ldi	r18, 0x00	; 0
    42ac:	8f e0       	ldi	r24, 0x0F	; 15
    42ae:	9f e0       	ldi	r25, 0x0F	; 15
    42b0:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <Print::printNumberDec(unsigned long, unsigned char)>
    42b4:	6c e3       	ldi	r22, 0x3C	; 60
    42b6:	77 e0       	ldi	r23, 0x07	; 7
    42b8:	8f e0       	ldi	r24, 0x0F	; 15
    42ba:	9f e0       	ldi	r25, 0x0F	; 15
    42bc:	0e 94 04 05 	call	0xa08	; 0xa08 <Print::write(char const*)>
    42c0:	c7 5d       	subi	r28, 0xD7	; 215
    42c2:	de 4f       	sbci	r29, 0xFE	; 254
    42c4:	48 81       	ld	r20, Y
    42c6:	59 81       	ldd	r21, Y+1	; 0x01
    42c8:	6a 81       	ldd	r22, Y+2	; 0x02
    42ca:	7b 81       	ldd	r23, Y+3	; 0x03
    42cc:	20 e0       	ldi	r18, 0x00	; 0
    42ce:	8f e0       	ldi	r24, 0x0F	; 15
    42d0:	9f e0       	ldi	r25, 0x0F	; 15
    42d2:	0e 94 49 2f 	call	0x5e92	; 0x5e92 <Print::printNumberDec(unsigned long, unsigned char)>
    42d6:	8f e0       	ldi	r24, 0x0F	; 15
    42d8:	9f e0       	ldi	r25, 0x0F	; 15
    42da:	df 91       	pop	r29
    42dc:	cf 91       	pop	r28
    42de:	0c 94 2f 2f 	jmp	0x5e5e	; 0x5e5e <Print::println()>

000042e2 <Framebuffer_GFX::expandColor(unsigned int)>:
    42e2:	fc 01       	movw	r30, r24
    42e4:	ef 2f       	mov	r30, r31
    42e6:	ff 27       	eor	r31, r31
    42e8:	e6 95       	lsr	r30
    42ea:	e6 95       	lsr	r30
    42ec:	e6 95       	lsr	r30
    42ee:	e8 52       	subi	r30, 0x28	; 40
    42f0:	fa 4f       	sbci	r31, 0xFA	; 250
    42f2:	24 91       	lpm	r18, Z
    42f4:	fc 01       	movw	r30, r24
    42f6:	35 e0       	ldi	r19, 0x05	; 5
    42f8:	f6 95       	lsr	r31
    42fa:	e7 95       	ror	r30
    42fc:	3a 95       	dec	r19
    42fe:	e1 f7       	brne	.-8      	; 0x42f8 <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    4300:	ef 73       	andi	r30, 0x3F	; 63
    4302:	ff 27       	eor	r31, r31
    4304:	e8 56       	subi	r30, 0x68	; 104
    4306:	fa 4f       	sbci	r31, 0xFA	; 250
    4308:	64 91       	lpm	r22, Z
    430a:	8f 71       	andi	r24, 0x1F	; 31
    430c:	99 27       	eor	r25, r25
    430e:	fc 01       	movw	r30, r24
    4310:	e8 52       	subi	r30, 0x28	; 40
    4312:	fa 4f       	sbci	r31, 0xFA	; 250
    4314:	e4 91       	lpm	r30, Z
    4316:	70 e0       	ldi	r23, 0x00	; 0
    4318:	90 e0       	ldi	r25, 0x00	; 0
    431a:	80 e0       	ldi	r24, 0x00	; 0
    431c:	98 2f       	mov	r25, r24
    431e:	87 2f       	mov	r24, r23
    4320:	76 2f       	mov	r23, r22
    4322:	66 27       	eor	r22, r22
    4324:	82 2b       	or	r24, r18
    4326:	6e 2b       	or	r22, r30
    4328:	08 95       	ret

0000432a <Framebuffer_GFX::fillScreen(unsigned int)>:
    432a:	8f 92       	push	r8
    432c:	9f 92       	push	r9
    432e:	af 92       	push	r10
    4330:	bf 92       	push	r11
    4332:	cf 92       	push	r12
    4334:	df 92       	push	r13
    4336:	ef 92       	push	r14
    4338:	ff 92       	push	r15
    433a:	cf 93       	push	r28
    433c:	df 93       	push	r29
    433e:	ec 01       	movw	r28, r24
    4340:	cb 01       	movw	r24, r22
    4342:	fe 01       	movw	r30, r28
    4344:	ef 5c       	subi	r30, 0xCF	; 207
    4346:	fe 4f       	sbci	r31, 0xFE	; 254
    4348:	20 81       	ld	r18, Z
    434a:	22 23       	and	r18, r18
    434c:	39 f1       	breq	.+78     	; 0x439c <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    434e:	34 97       	sbiw	r30, 0x04	; 4
    4350:	60 81       	ld	r22, Z
    4352:	71 81       	ldd	r23, Z+1	; 0x01
    4354:	82 81       	ldd	r24, Z+2	; 0x02
    4356:	30 e0       	ldi	r19, 0x00	; 0
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	c1 2c       	mov	r12, r1
    435c:	d1 2c       	mov	r13, r1
    435e:	76 01       	movw	r14, r12
    4360:	de 01       	movw	r26, r28
    4362:	a7 5d       	subi	r26, 0xD7	; 215
    4364:	be 4f       	sbci	r27, 0xFE	; 254
    4366:	cb 5d       	subi	r28, 0xDB	; 219
    4368:	de 4f       	sbci	r29, 0xFE	; 254
    436a:	8d 90       	ld	r8, X+
    436c:	9d 90       	ld	r9, X+
    436e:	ad 90       	ld	r10, X+
    4370:	bc 90       	ld	r11, X
    4372:	13 97       	sbiw	r26, 0x03	; 3
    4374:	c8 14       	cp	r12, r8
    4376:	d9 04       	cpc	r13, r9
    4378:	ea 04       	cpc	r14, r10
    437a:	fb 04       	cpc	r15, r11
    437c:	88 f4       	brcc	.+34     	; 0x43a0 <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    437e:	e8 81       	ld	r30, Y
    4380:	f9 81       	ldd	r31, Y+1	; 0x01
    4382:	e2 0f       	add	r30, r18
    4384:	f3 1f       	adc	r31, r19
    4386:	80 83       	st	Z, r24
    4388:	71 83       	std	Z+1, r23	; 0x01
    438a:	62 83       	std	Z+2, r22	; 0x02
    438c:	9f ef       	ldi	r25, 0xFF	; 255
    438e:	c9 1a       	sub	r12, r25
    4390:	d9 0a       	sbc	r13, r25
    4392:	e9 0a       	sbc	r14, r25
    4394:	f9 0a       	sbc	r15, r25
    4396:	2d 5f       	subi	r18, 0xFD	; 253
    4398:	3f 4f       	sbci	r19, 0xFF	; 255
    439a:	e7 cf       	rjmp	.-50     	; 0x436a <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    439c:	a2 df       	rcall	.-188    	; 0x42e2 <Framebuffer_GFX::expandColor(unsigned int)>
    439e:	db cf       	rjmp	.-74     	; 0x4356 <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    43a0:	df 91       	pop	r29
    43a2:	cf 91       	pop	r28
    43a4:	ff 90       	pop	r15
    43a6:	ef 90       	pop	r14
    43a8:	df 90       	pop	r13
    43aa:	cf 90       	pop	r12
    43ac:	bf 90       	pop	r11
    43ae:	af 90       	pop	r10
    43b0:	9f 90       	pop	r9
    43b2:	8f 90       	pop	r8
    43b4:	08 95       	ret

000043b6 <Framebuffer_GFX::XY(int, int)>:
    43b6:	6f 92       	push	r6
    43b8:	7f 92       	push	r7
    43ba:	9f 92       	push	r9
    43bc:	af 92       	push	r10
    43be:	bf 92       	push	r11
    43c0:	cf 92       	push	r12
    43c2:	df 92       	push	r13
    43c4:	ef 92       	push	r14
    43c6:	ff 92       	push	r15
    43c8:	0f 93       	push	r16
    43ca:	1f 93       	push	r17
    43cc:	cf 93       	push	r28
    43ce:	df 93       	push	r29
    43d0:	ec 01       	movw	r28, r24
    43d2:	cb 01       	movw	r24, r22
    43d4:	8a 01       	movw	r16, r20
    43d6:	77 fd       	sbrc	r23, 7
    43d8:	0c c0       	rjmp	.+24     	; 0x43f2 <Framebuffer_GFX::XY(int, int)+0x3c>
    43da:	57 fd       	sbrc	r21, 7
    43dc:	0a c0       	rjmp	.+20     	; 0x43f2 <Framebuffer_GFX::XY(int, int)+0x3c>
    43de:	2f 81       	ldd	r18, Y+7	; 0x07
    43e0:	38 85       	ldd	r19, Y+8	; 0x08
    43e2:	62 17       	cp	r22, r18
    43e4:	73 07       	cpc	r23, r19
    43e6:	2c f4       	brge	.+10     	; 0x43f2 <Framebuffer_GFX::XY(int, int)+0x3c>
    43e8:	29 85       	ldd	r18, Y+9	; 0x09
    43ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    43ec:	42 17       	cp	r20, r18
    43ee:	53 07       	cpc	r21, r19
    43f0:	9c f0       	brlt	.+38     	; 0x4418 <Framebuffer_GFX::XY(int, int)+0x62>
    43f2:	c7 5d       	subi	r28, 0xD7	; 215
    43f4:	de 4f       	sbci	r29, 0xFE	; 254
    43f6:	88 81       	ld	r24, Y
    43f8:	99 81       	ldd	r25, Y+1	; 0x01
    43fa:	01 97       	sbiw	r24, 0x01	; 1
    43fc:	df 91       	pop	r29
    43fe:	cf 91       	pop	r28
    4400:	1f 91       	pop	r17
    4402:	0f 91       	pop	r16
    4404:	ff 90       	pop	r15
    4406:	ef 90       	pop	r14
    4408:	df 90       	pop	r13
    440a:	cf 90       	pop	r12
    440c:	bf 90       	pop	r11
    440e:	af 90       	pop	r10
    4410:	9f 90       	pop	r9
    4412:	7f 90       	pop	r7
    4414:	6f 90       	pop	r6
    4416:	08 95       	ret
    4418:	2d 89       	ldd	r18, Y+21	; 0x15
    441a:	22 30       	cpi	r18, 0x02	; 2
    441c:	d9 f0       	breq	.+54     	; 0x4454 <Framebuffer_GFX::XY(int, int)+0x9e>
    441e:	23 30       	cpi	r18, 0x03	; 3
    4420:	51 f1       	breq	.+84     	; 0x4476 <Framebuffer_GFX::XY(int, int)+0xc0>
    4422:	21 30       	cpi	r18, 0x01	; 1
    4424:	41 f4       	brne	.+16     	; 0x4436 <Framebuffer_GFX::XY(int, int)+0x80>
    4426:	2b 81       	ldd	r18, Y+3	; 0x03
    4428:	3c 81       	ldd	r19, Y+4	; 0x04
    442a:	21 50       	subi	r18, 0x01	; 1
    442c:	31 09       	sbc	r19, r1
    442e:	24 1b       	sub	r18, r20
    4430:	35 0b       	sbc	r19, r21
    4432:	8b 01       	movw	r16, r22
    4434:	c9 01       	movw	r24, r18
    4436:	fe 01       	movw	r30, r28
    4438:	e9 5d       	subi	r30, 0xD9	; 217
    443a:	fe 4f       	sbci	r31, 0xFE	; 254
    443c:	01 90       	ld	r0, Z+
    443e:	f0 81       	ld	r31, Z
    4440:	e0 2d       	mov	r30, r0
    4442:	30 97       	sbiw	r30, 0x00	; 0
    4444:	09 f1       	breq	.+66     	; 0x4488 <Framebuffer_GFX::XY(int, int)+0xd2>
    4446:	b8 01       	movw	r22, r16
    4448:	09 95       	icall
    444a:	50 e0       	ldi	r21, 0x00	; 0
    444c:	40 e0       	ldi	r20, 0x00	; 0
    444e:	84 0f       	add	r24, r20
    4450:	95 1f       	adc	r25, r21
    4452:	d4 cf       	rjmp	.-88     	; 0x43fc <Framebuffer_GFX::XY(int, int)+0x46>
    4454:	2b 81       	ldd	r18, Y+3	; 0x03
    4456:	3c 81       	ldd	r19, Y+4	; 0x04
    4458:	21 50       	subi	r18, 0x01	; 1
    445a:	31 09       	sbc	r19, r1
    445c:	a9 01       	movw	r20, r18
    445e:	46 1b       	sub	r20, r22
    4460:	57 0b       	sbc	r21, r23
    4462:	ca 01       	movw	r24, r20
    4464:	2d 81       	ldd	r18, Y+5	; 0x05
    4466:	3e 81       	ldd	r19, Y+6	; 0x06
    4468:	21 50       	subi	r18, 0x01	; 1
    446a:	31 09       	sbc	r19, r1
    446c:	f9 01       	movw	r30, r18
    446e:	e0 1b       	sub	r30, r16
    4470:	f1 0b       	sbc	r31, r17
    4472:	8f 01       	movw	r16, r30
    4474:	e0 cf       	rjmp	.-64     	; 0x4436 <Framebuffer_GFX::XY(int, int)+0x80>
    4476:	2d 81       	ldd	r18, Y+5	; 0x05
    4478:	3e 81       	ldd	r19, Y+6	; 0x06
    447a:	21 50       	subi	r18, 0x01	; 1
    447c:	31 09       	sbc	r19, r1
    447e:	26 1b       	sub	r18, r22
    4480:	37 0b       	sbc	r19, r23
    4482:	ca 01       	movw	r24, r20
    4484:	89 01       	movw	r16, r18
    4486:	d7 cf       	rjmp	.-82     	; 0x4436 <Framebuffer_GFX::XY(int, int)+0x80>
    4488:	fe 01       	movw	r30, r28
    448a:	e6 5e       	subi	r30, 0xE6	; 230
    448c:	fe 4f       	sbci	r31, 0xFE	; 254
    448e:	d0 80       	ld	r13, Z
    4490:	fd 2d       	mov	r31, r13
    4492:	f3 70       	andi	r31, 0x03	; 3
    4494:	cf 2e       	mov	r12, r31
    4496:	fe 01       	movw	r30, r28
    4498:	e5 5e       	subi	r30, 0xE5	; 229
    449a:	fe 4f       	sbci	r31, 0xFE	; 254
    449c:	b0 80       	ld	r11, Z
    449e:	50 e0       	ldi	r21, 0x00	; 0
    44a0:	40 e0       	ldi	r20, 0x00	; 0
    44a2:	bb 20       	and	r11, r11
    44a4:	09 f4       	brne	.+2      	; 0x44a8 <Framebuffer_GFX::XY(int, int)+0xf2>
    44a6:	64 c0       	rjmp	.+200    	; 0x4570 <Framebuffer_GFX::XY(int, int)+0x1ba>
    44a8:	32 96       	adiw	r30, 0x02	; 2
    44aa:	e0 80       	ld	r14, Z
    44ac:	f1 80       	ldd	r15, Z+1	; 0x01
    44ae:	b7 01       	movw	r22, r14
    44b0:	0e 94 1b 34 	call	0x6836	; 0x6836 <__udivmodhi4>
    44b4:	9b 01       	movw	r18, r22
    44b6:	98 2e       	mov	r9, r24
    44b8:	a9 2e       	mov	r10, r25
    44ba:	32 96       	adiw	r30, 0x02	; 2
    44bc:	60 80       	ld	r6, Z
    44be:	71 80       	ldd	r7, Z+1	; 0x01
    44c0:	c8 01       	movw	r24, r16
    44c2:	b3 01       	movw	r22, r6
    44c4:	0e 94 1b 34 	call	0x6836	; 0x6836 <__udivmodhi4>
    44c8:	db 01       	movw	r26, r22
    44ca:	58 2f       	mov	r21, r24
    44cc:	49 2f       	mov	r20, r25
    44ce:	89 2d       	mov	r24, r9
    44d0:	9a 2d       	mov	r25, r10
    44d2:	05 2f       	mov	r16, r21
    44d4:	14 2f       	mov	r17, r20
    44d6:	d5 fe       	sbrs	r13, 5
    44d8:	06 c0       	rjmp	.+12     	; 0x44e6 <Framebuffer_GFX::XY(int, int)+0x130>
    44da:	4b 2d       	mov	r20, r11
    44dc:	41 50       	subi	r20, 0x01	; 1
    44de:	55 0b       	sbc	r21, r21
    44e0:	42 1b       	sub	r20, r18
    44e2:	53 0b       	sbc	r21, r19
    44e4:	9a 01       	movw	r18, r20
    44e6:	d4 fe       	sbrs	r13, 4
    44e8:	09 c0       	rjmp	.+18     	; 0x44fc <Framebuffer_GFX::XY(int, int)+0x146>
    44ea:	ae 01       	movw	r20, r28
    44ec:	44 5e       	subi	r20, 0xE4	; 228
    44ee:	5e 4f       	sbci	r21, 0xFE	; 254
    44f0:	fa 01       	movw	r30, r20
    44f2:	60 81       	ld	r22, Z
    44f4:	61 50       	subi	r22, 0x01	; 1
    44f6:	77 0b       	sbc	r23, r23
    44f8:	6a 1b       	sub	r22, r26
    44fa:	7b 0b       	sbc	r23, r27
    44fc:	d6 fc       	sbrc	r13, 6
    44fe:	11 c0       	rjmp	.+34     	; 0x4522 <Framebuffer_GFX::XY(int, int)+0x16c>
    4500:	4b 2d       	mov	r20, r11
    4502:	50 e0       	ldi	r21, 0x00	; 0
    4504:	b6 2f       	mov	r27, r22
    4506:	a7 2f       	mov	r26, r23
    4508:	b9 01       	movw	r22, r18
    450a:	2b 2f       	mov	r18, r27
    450c:	3a 2f       	mov	r19, r26
    450e:	d7 fc       	sbrc	r13, 7
    4510:	0e c0       	rjmp	.+28     	; 0x452e <Framebuffer_GFX::XY(int, int)+0x178>
    4512:	24 9f       	mul	r18, r20
    4514:	d0 01       	movw	r26, r0
    4516:	25 9f       	mul	r18, r21
    4518:	b0 0d       	add	r27, r0
    451a:	34 9f       	mul	r19, r20
    451c:	b0 0d       	add	r27, r0
    451e:	11 24       	eor	r1, r1
    4520:	17 c0       	rjmp	.+46     	; 0x4550 <Framebuffer_GFX::XY(int, int)+0x19a>
    4522:	de 01       	movw	r26, r28
    4524:	a4 5e       	subi	r26, 0xE4	; 228
    4526:	be 4f       	sbci	r27, 0xFE	; 254
    4528:	4c 91       	ld	r20, X
    452a:	50 e0       	ldi	r21, 0x00	; 0
    452c:	f0 cf       	rjmp	.-32     	; 0x450e <Framebuffer_GFX::XY(int, int)+0x158>
    452e:	20 ff       	sbrs	r18, 0
    4530:	f0 cf       	rjmp	.-32     	; 0x4512 <Framebuffer_GFX::XY(int, int)+0x15c>
    4532:	ad 2d       	mov	r26, r13
    4534:	a0 95       	com	r26
    4536:	a3 70       	andi	r26, 0x03	; 3
    4538:	ca 2e       	mov	r12, r26
    453a:	2f 5f       	subi	r18, 0xFF	; 255
    453c:	3f 4f       	sbci	r19, 0xFF	; 255
    453e:	24 9f       	mul	r18, r20
    4540:	d0 01       	movw	r26, r0
    4542:	25 9f       	mul	r18, r21
    4544:	b0 0d       	add	r27, r0
    4546:	34 9f       	mul	r19, r20
    4548:	b0 0d       	add	r27, r0
    454a:	11 24       	eor	r1, r1
    454c:	60 95       	com	r22
    454e:	70 95       	com	r23
    4550:	6a 0f       	add	r22, r26
    4552:	7b 1f       	adc	r23, r27
    4554:	e6 9c       	mul	r14, r6
    4556:	90 01       	movw	r18, r0
    4558:	e7 9c       	mul	r14, r7
    455a:	30 0d       	add	r19, r0
    455c:	f6 9c       	mul	r15, r6
    455e:	30 0d       	add	r19, r0
    4560:	11 24       	eor	r1, r1
    4562:	26 9f       	mul	r18, r22
    4564:	a0 01       	movw	r20, r0
    4566:	27 9f       	mul	r18, r23
    4568:	50 0d       	add	r21, r0
    456a:	36 9f       	mul	r19, r22
    456c:	50 0d       	add	r21, r0
    456e:	11 24       	eor	r1, r1
    4570:	98 01       	movw	r18, r16
    4572:	6c 2d       	mov	r22, r12
    4574:	62 70       	andi	r22, 0x02	; 2
    4576:	59 f0       	breq	.+22     	; 0x458e <Framebuffer_GFX::XY(int, int)+0x1d8>
    4578:	fe 01       	movw	r30, r28
    457a:	e3 5e       	subi	r30, 0xE3	; 227
    457c:	fe 4f       	sbci	r31, 0xFE	; 254
    457e:	60 81       	ld	r22, Z
    4580:	71 81       	ldd	r23, Z+1	; 0x01
    4582:	61 50       	subi	r22, 0x01	; 1
    4584:	71 09       	sbc	r23, r1
    4586:	fb 01       	movw	r30, r22
    4588:	e8 1b       	sub	r30, r24
    458a:	f9 0b       	sbc	r31, r25
    458c:	cf 01       	movw	r24, r30
    458e:	c0 fe       	sbrs	r12, 0
    4590:	09 c0       	rjmp	.+18     	; 0x45a4 <Framebuffer_GFX::XY(int, int)+0x1ee>
    4592:	fe 01       	movw	r30, r28
    4594:	e1 5e       	subi	r30, 0xE1	; 225
    4596:	fe 4f       	sbci	r31, 0xFE	; 254
    4598:	20 81       	ld	r18, Z
    459a:	31 81       	ldd	r19, Z+1	; 0x01
    459c:	21 50       	subi	r18, 0x01	; 1
    459e:	31 09       	sbc	r19, r1
    45a0:	20 1b       	sub	r18, r16
    45a2:	31 0b       	sbc	r19, r17
    45a4:	d2 fc       	sbrc	r13, 2
    45a6:	13 c0       	rjmp	.+38     	; 0x45ce <Framebuffer_GFX::XY(int, int)+0x218>
    45a8:	c3 5e       	subi	r28, 0xE3	; 227
    45aa:	de 4f       	sbci	r29, 0xFE	; 254
    45ac:	68 81       	ld	r22, Y
    45ae:	79 81       	ldd	r23, Y+1	; 0x01
    45b0:	f2 2f       	mov	r31, r18
    45b2:	e3 2f       	mov	r30, r19
    45b4:	9c 01       	movw	r18, r24
    45b6:	8f 2f       	mov	r24, r31
    45b8:	9e 2f       	mov	r25, r30
    45ba:	d3 fc       	sbrc	r13, 3
    45bc:	0d c0       	rjmp	.+26     	; 0x45d8 <Framebuffer_GFX::XY(int, int)+0x222>
    45be:	86 9f       	mul	r24, r22
    45c0:	f0 01       	movw	r30, r0
    45c2:	87 9f       	mul	r24, r23
    45c4:	f0 0d       	add	r31, r0
    45c6:	96 9f       	mul	r25, r22
    45c8:	f0 0d       	add	r31, r0
    45ca:	11 24       	eor	r1, r1
    45cc:	11 c0       	rjmp	.+34     	; 0x45f0 <Framebuffer_GFX::XY(int, int)+0x23a>
    45ce:	c1 5e       	subi	r28, 0xE1	; 225
    45d0:	de 4f       	sbci	r29, 0xFE	; 254
    45d2:	68 81       	ld	r22, Y
    45d4:	79 81       	ldd	r23, Y+1	; 0x01
    45d6:	f1 cf       	rjmp	.-30     	; 0x45ba <Framebuffer_GFX::XY(int, int)+0x204>
    45d8:	80 ff       	sbrs	r24, 0
    45da:	f1 cf       	rjmp	.-30     	; 0x45be <Framebuffer_GFX::XY(int, int)+0x208>
    45dc:	01 96       	adiw	r24, 0x01	; 1
    45de:	86 9f       	mul	r24, r22
    45e0:	f0 01       	movw	r30, r0
    45e2:	87 9f       	mul	r24, r23
    45e4:	f0 0d       	add	r31, r0
    45e6:	96 9f       	mul	r25, r22
    45e8:	f0 0d       	add	r31, r0
    45ea:	11 24       	eor	r1, r1
    45ec:	20 95       	com	r18
    45ee:	30 95       	com	r19
    45f0:	cf 01       	movw	r24, r30
    45f2:	82 0f       	add	r24, r18
    45f4:	93 1f       	adc	r25, r19
    45f6:	2b cf       	rjmp	.-426    	; 0x444e <Framebuffer_GFX::XY(int, int)+0x98>

000045f8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
    45f8:	9f 92       	push	r9
    45fa:	af 92       	push	r10
    45fc:	bf 92       	push	r11
    45fe:	cf 92       	push	r12
    4600:	df 92       	push	r13
    4602:	ef 92       	push	r14
    4604:	ff 92       	push	r15
    4606:	0f 93       	push	r16
    4608:	1f 93       	push	r17
    460a:	cf 93       	push	r28
    460c:	df 93       	push	r29
    460e:	ec 01       	movw	r28, r24
    4610:	77 fd       	sbrc	r23, 7
    4612:	2b c0       	rjmp	.+86     	; 0x466a <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    4614:	57 fd       	sbrc	r21, 7
    4616:	29 c0       	rjmp	.+82     	; 0x466a <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    4618:	8f 81       	ldd	r24, Y+7	; 0x07
    461a:	98 85       	ldd	r25, Y+8	; 0x08
    461c:	68 17       	cp	r22, r24
    461e:	79 07       	cpc	r23, r25
    4620:	24 f5       	brge	.+72     	; 0x466a <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    4622:	89 85       	ldd	r24, Y+9	; 0x09
    4624:	9a 85       	ldd	r25, Y+10	; 0x0a
    4626:	48 17       	cp	r20, r24
    4628:	59 07       	cpc	r21, r25
    462a:	fc f4       	brge	.+62     	; 0x466a <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    462c:	6a 01       	movw	r12, r20
    462e:	7b 01       	movw	r14, r22
    4630:	fe 01       	movw	r30, r28
    4632:	ef 5c       	subi	r30, 0xCF	; 207
    4634:	fe 4f       	sbci	r31, 0xFE	; 254
    4636:	80 81       	ld	r24, Z
    4638:	88 23       	and	r24, r24
    463a:	19 f1       	breq	.+70     	; 0x4682 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    463c:	34 97       	sbiw	r30, 0x04	; 4
    463e:	b0 80       	ld	r11, Z
    4640:	a1 80       	ldd	r10, Z+1	; 0x01
    4642:	92 80       	ldd	r9, Z+2	; 0x02
    4644:	fe 01       	movw	r30, r28
    4646:	eb 5d       	subi	r30, 0xDB	; 219
    4648:	fe 4f       	sbci	r31, 0xFE	; 254
    464a:	00 81       	ld	r16, Z
    464c:	11 81       	ldd	r17, Z+1	; 0x01
    464e:	a6 01       	movw	r20, r12
    4650:	b7 01       	movw	r22, r14
    4652:	ce 01       	movw	r24, r28
    4654:	b0 de       	rcall	.-672    	; 0x43b6 <Framebuffer_GFX::XY(int, int)>
    4656:	fc 01       	movw	r30, r24
    4658:	ee 0f       	add	r30, r30
    465a:	ff 1f       	adc	r31, r31
    465c:	e8 0f       	add	r30, r24
    465e:	f9 1f       	adc	r31, r25
    4660:	e0 0f       	add	r30, r16
    4662:	f1 1f       	adc	r31, r17
    4664:	90 82       	st	Z, r9
    4666:	a1 82       	std	Z+1, r10	; 0x01
    4668:	b2 82       	std	Z+2, r11	; 0x02
    466a:	df 91       	pop	r29
    466c:	cf 91       	pop	r28
    466e:	1f 91       	pop	r17
    4670:	0f 91       	pop	r16
    4672:	ff 90       	pop	r15
    4674:	ef 90       	pop	r14
    4676:	df 90       	pop	r13
    4678:	cf 90       	pop	r12
    467a:	bf 90       	pop	r11
    467c:	af 90       	pop	r10
    467e:	9f 90       	pop	r9
    4680:	08 95       	ret
    4682:	c9 01       	movw	r24, r18
    4684:	2e de       	rcall	.-932    	; 0x42e2 <Framebuffer_GFX::expandColor(unsigned int)>
    4686:	b6 2e       	mov	r11, r22
    4688:	a7 2e       	mov	r10, r23
    468a:	98 2e       	mov	r9, r24
    468c:	db cf       	rjmp	.-74     	; 0x4644 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

0000468e <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    468e:	89 5d       	subi	r24, 0xD9	; 217
    4690:	9e 4f       	sbci	r25, 0xFE	; 254
    4692:	fc 01       	movw	r30, r24
    4694:	71 83       	std	Z+1, r23	; 0x01
    4696:	60 83       	st	Z, r22
}
    4698:	08 95       	ret

0000469a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    469a:	0f 93       	push	r16
    469c:	1f 93       	push	r17
    469e:	cf 93       	push	r28
    46a0:	df 93       	push	r29
    46a2:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    46a4:	84 2f       	mov	r24, r20
    46a6:	82 95       	swap	r24
    46a8:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    46aa:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    46ac:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    46ae:	a8 2f       	mov	r26, r24
    46b0:	aa 0f       	add	r26, r26
    46b2:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    46b4:	a6 0f       	add	r26, r22
    46b6:	b7 2f       	mov	r27, r23
    46b8:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    46ba:	44 23       	and	r20, r20
    46bc:	19 f0       	breq	.+6      	; 0x46c4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    46be:	31 e0       	ldi	r19, 0x01	; 1
    46c0:	01 2b       	or	r16, r17
    46c2:	09 f4       	brne	.+2      	; 0x46c6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    46c4:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    46c6:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    46c8:	11 96       	adiw	r26, 0x01	; 1
    46ca:	5c 91       	ld	r21, X
    46cc:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    46ce:	12 96       	adiw	r26, 0x02	; 2
    46d0:	9c 91       	ld	r25, X
    46d2:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    46d4:	33 23       	and	r19, r19
    46d6:	09 f4       	brne	.+2      	; 0x46da <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    46d8:	2a c0       	rjmp	.+84     	; 0x472e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    46da:	8f 30       	cpi	r24, 0x0F	; 15
    46dc:	11 f0       	breq	.+4      	; 0x46e2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    46de:	ed 01       	movw	r28, r26
    46e0:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    46e2:	42 95       	swap	r20
    46e4:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    46e6:	74 2f       	mov	r23, r20
    46e8:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    46ea:	67 9f       	mul	r22, r23
    46ec:	06 0e       	add	r0, r22
    46ee:	60 e0       	ldi	r22, 0x00	; 0
    46f0:	61 1d       	adc	r22, r1
    46f2:	38 81       	ld	r19, Y
    46f4:	34 9f       	mul	r19, r20
    46f6:	03 0e       	add	r0, r19
    46f8:	30 e0       	ldi	r19, 0x00	; 0
    46fa:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    46fc:	63 0f       	add	r22, r19
    46fe:	57 9f       	mul	r21, r23
    4700:	05 0e       	add	r0, r21
    4702:	50 e0       	ldi	r21, 0x00	; 0
    4704:	51 1d       	adc	r21, r1
    4706:	39 81       	ldd	r19, Y+1	; 0x01
    4708:	34 9f       	mul	r19, r20
    470a:	03 0e       	add	r0, r19
    470c:	30 e0       	ldi	r19, 0x00	; 0
    470e:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    4710:	53 0f       	add	r21, r19
    4712:	39 2f       	mov	r19, r25
    4714:	37 9f       	mul	r19, r23
    4716:	03 0e       	add	r0, r19
    4718:	30 e0       	ldi	r19, 0x00	; 0
    471a:	31 1d       	adc	r19, r1
    471c:	9a 81       	ldd	r25, Y+2	; 0x02
    471e:	79 2f       	mov	r23, r25
    4720:	74 9f       	mul	r23, r20
    4722:	07 0e       	add	r0, r23
    4724:	70 e0       	ldi	r23, 0x00	; 0
    4726:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    4728:	93 2f       	mov	r25, r19
    472a:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    472c:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    472e:	2f 3f       	cpi	r18, 0xFF	; 255
    4730:	c1 f0       	breq	.+48     	; 0x4762 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    4732:	22 23       	and	r18, r18
    4734:	f9 f0       	breq	.+62     	; 0x4774 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    4736:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    4738:	66 23       	and	r22, r22
    473a:	21 f0       	breq	.+8      	; 0x4744 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    473c:	62 9f       	mul	r22, r18
    473e:	06 0e       	add	r0, r22
    4740:	60 e0       	ldi	r22, 0x00	; 0
    4742:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    4744:	55 23       	and	r21, r21
    4746:	21 f0       	breq	.+8      	; 0x4750 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    4748:	52 9f       	mul	r21, r18
    474a:	05 0e       	add	r0, r21
    474c:	50 e0       	ldi	r21, 0x00	; 0
    474e:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    4750:	99 23       	and	r25, r25
    4752:	31 f0       	breq	.+12     	; 0x4760 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    4754:	39 2f       	mov	r19, r25
    4756:	32 9f       	mul	r19, r18
    4758:	03 0e       	add	r0, r19
    475a:	30 e0       	ldi	r19, 0x00	; 0
    475c:	31 1d       	adc	r19, r1
    475e:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    4760:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    4762:	60 83       	st	Z, r22
    4764:	51 83       	std	Z+1, r21	; 0x01
    4766:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    4768:	cf 01       	movw	r24, r30
    476a:	df 91       	pop	r29
    476c:	cf 91       	pop	r28
    476e:	1f 91       	pop	r17
    4770:	0f 91       	pop	r16
    4772:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    4774:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    4776:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    4778:	60 e0       	ldi	r22, 0x00	; 0
    477a:	f3 cf       	rjmp	.-26     	; 0x4762 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

0000477c <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    477c:	7f 92       	push	r7
    477e:	8f 92       	push	r8
    4780:	9f 92       	push	r9
    4782:	af 92       	push	r10
    4784:	bf 92       	push	r11
    4786:	cf 92       	push	r12
    4788:	df 92       	push	r13
    478a:	ef 92       	push	r14
    478c:	ff 92       	push	r15
    478e:	0f 93       	push	r16
    4790:	1f 93       	push	r17
    4792:	cf 93       	push	r28
    4794:	df 93       	push	r29
    4796:	fc 01       	movw	r30, r24
    4798:	69 01       	movw	r12, r18
    479a:	10 82       	st	Z, r1
    479c:	11 82       	std	Z+1, r1	; 0x01
    479e:	12 82       	std	Z+2, r1	; 0x02
    47a0:	66 23       	and	r22, r22
    47a2:	b9 f1       	breq	.+110    	; 0x4812 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    47a4:	8a 01       	movw	r16, r20
    47a6:	c1 e0       	ldi	r28, 0x01	; 1
    47a8:	d0 e0       	ldi	r29, 0x00	; 0
    47aa:	86 2e       	mov	r8, r22
    47ac:	91 2c       	mov	r9, r1
    47ae:	b1 2c       	mov	r11, r1
    47b0:	a1 2c       	mov	r10, r1
    47b2:	d8 01       	movw	r26, r16
    47b4:	2d 91       	ld	r18, X+
    47b6:	8d 01       	movw	r16, r26
    47b8:	22 23       	and	r18, r18
    47ba:	39 f1       	breq	.+78     	; 0x480a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    47bc:	7e 01       	movw	r14, r28
    47be:	b1 e0       	ldi	r27, 0x01	; 1
    47c0:	eb 1a       	sub	r14, r27
    47c2:	f1 08       	sbc	r15, r1
    47c4:	d6 01       	movw	r26, r12
    47c6:	ae 0d       	add	r26, r14
    47c8:	bf 1d       	adc	r27, r15
    47ca:	7c 90       	ld	r7, X
    47cc:	77 20       	and	r7, r7
    47ce:	e9 f0       	breq	.+58     	; 0x480a <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    47d0:	30 e0       	ldi	r19, 0x00	; 0
    47d2:	50 e0       	ldi	r21, 0x00	; 0
    47d4:	40 e0       	ldi	r20, 0x00	; 0
    47d6:	2f 5f       	subi	r18, 0xFF	; 255
    47d8:	3f 4f       	sbci	r19, 0xFF	; 255
    47da:	4f 4f       	sbci	r20, 0xFF	; 255
    47dc:	5f 4f       	sbci	r21, 0xFF	; 255
    47de:	c5 01       	movw	r24, r10
    47e0:	b4 01       	movw	r22, r8
    47e2:	0e 94 0c 34 	call	0x6818	; 0x6818 <__mulsi3>
    47e6:	9b 01       	movw	r18, r22
    47e8:	ac 01       	movw	r20, r24
    47ea:	87 2d       	mov	r24, r7
    47ec:	90 e0       	ldi	r25, 0x00	; 0
    47ee:	b0 e0       	ldi	r27, 0x00	; 0
    47f0:	a0 e0       	ldi	r26, 0x00	; 0
    47f2:	bc 01       	movw	r22, r24
    47f4:	cd 01       	movw	r24, r26
    47f6:	6f 5f       	subi	r22, 0xFF	; 255
    47f8:	7f 4f       	sbci	r23, 0xFF	; 255
    47fa:	8f 4f       	sbci	r24, 0xFF	; 255
    47fc:	9f 4f       	sbci	r25, 0xFF	; 255
    47fe:	0e 94 0c 34 	call	0x6818	; 0x6818 <__mulsi3>
    4802:	df 01       	movw	r26, r30
    4804:	ae 0d       	add	r26, r14
    4806:	bf 1d       	adc	r27, r15
    4808:	8c 93       	st	X, r24
    480a:	21 96       	adiw	r28, 0x01	; 1
    480c:	c4 30       	cpi	r28, 0x04	; 4
    480e:	d1 05       	cpc	r29, r1
    4810:	81 f6       	brne	.-96     	; 0x47b2 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    4812:	cf 01       	movw	r24, r30
    4814:	df 91       	pop	r29
    4816:	cf 91       	pop	r28
    4818:	1f 91       	pop	r17
    481a:	0f 91       	pop	r16
    481c:	ff 90       	pop	r15
    481e:	ef 90       	pop	r14
    4820:	df 90       	pop	r13
    4822:	cf 90       	pop	r12
    4824:	bf 90       	pop	r11
    4826:	af 90       	pop	r10
    4828:	9f 90       	pop	r9
    482a:	8f 90       	pop	r8
    482c:	7f 90       	pop	r7
    482e:	08 95       	ret

00004830 <CFastLED::CFastLED()>:
    4830:	fc 01       	movw	r30, r24
    4832:	8f ef       	ldi	r24, 0xFF	; 255
    4834:	80 83       	st	Z, r24
    4836:	12 82       	std	Z+2, r1	; 0x02
    4838:	11 82       	std	Z+1, r1	; 0x01
    483a:	14 86       	std	Z+12, r1	; 0x0c
    483c:	13 86       	std	Z+11, r1	; 0x0b
    483e:	8f ef       	ldi	r24, 0xFF	; 255
    4840:	9f ef       	ldi	r25, 0xFF	; 255
    4842:	dc 01       	movw	r26, r24
    4844:	87 83       	std	Z+7, r24	; 0x07
    4846:	90 87       	std	Z+8, r25	; 0x08
    4848:	a1 87       	std	Z+9, r26	; 0x09
    484a:	b2 87       	std	Z+10, r27	; 0x0a
    484c:	08 95       	ret

0000484e <CFastLED::clearData()>:
    484e:	cf 93       	push	r28
    4850:	df 93       	push	r29
    4852:	c0 91 7d 0e 	lds	r28, 0x0E7D	; 0x800e7d <CLEDController::m_pHead>
    4856:	d0 91 7e 0e 	lds	r29, 0x0E7E	; 0x800e7e <CLEDController::m_pHead+0x1>
    485a:	20 97       	sbiw	r28, 0x00	; 0
    485c:	89 f0       	breq	.+34     	; 0x4880 <CFastLED::clearData()+0x32>
    485e:	8a 81       	ldd	r24, Y+2	; 0x02
    4860:	9b 81       	ldd	r25, Y+3	; 0x03
    4862:	00 97       	sbiw	r24, 0x00	; 0
    4864:	49 f0       	breq	.+18     	; 0x4878 <CFastLED::clearData()+0x2a>
    4866:	2d 85       	ldd	r18, Y+13	; 0x0d
    4868:	3e 85       	ldd	r19, Y+14	; 0x0e
    486a:	a9 01       	movw	r20, r18
    486c:	44 0f       	add	r20, r20
    486e:	55 1f       	adc	r21, r21
    4870:	42 0f       	add	r20, r18
    4872:	53 1f       	adc	r21, r19
    4874:	60 e0       	ldi	r22, 0x00	; 0
    4876:	d0 d2       	rcall	.+1440   	; 0x4e18 <memset8>
    4878:	0c 80       	ldd	r0, Y+4	; 0x04
    487a:	dd 81       	ldd	r29, Y+5	; 0x05
    487c:	c0 2d       	mov	r28, r0
    487e:	ed cf       	rjmp	.-38     	; 0x485a <CFastLED::clearData()+0xc>
    4880:	df 91       	pop	r29
    4882:	cf 91       	pop	r28
    4884:	08 95       	ret

00004886 <CFastLED::countFPS(int)>:
    4886:	cf 92       	push	r12
    4888:	df 92       	push	r13
    488a:	ef 92       	push	r14
    488c:	ff 92       	push	r15
    488e:	cf 93       	push	r28
    4890:	df 93       	push	r29
    4892:	ec 01       	movw	r28, r24
    4894:	20 91 75 0e 	lds	r18, 0x0E75	; 0x800e75 <CFastLED::countFPS(int)::br>
    4898:	30 91 76 0e 	lds	r19, 0x0E76	; 0x800e76 <CFastLED::countFPS(int)::br+0x1>
    489c:	c9 01       	movw	r24, r18
    489e:	01 96       	adiw	r24, 0x01	; 1
    48a0:	90 93 76 0e 	sts	0x0E76, r25	; 0x800e76 <CFastLED::countFPS(int)::br+0x1>
    48a4:	80 93 75 0e 	sts	0x0E75, r24	; 0x800e75 <CFastLED::countFPS(int)::br>
    48a8:	26 17       	cp	r18, r22
    48aa:	37 07       	cpc	r19, r23
    48ac:	0c f4       	brge	.+2      	; 0x48b0 <CFastLED::countFPS(int)+0x2a>
    48ae:	3f c0       	rjmp	.+126    	; 0x492e <CFastLED::countFPS(int)+0xa8>
    48b0:	0f b6       	in	r0, 0x3f	; 63
    48b2:	f8 94       	cli
    48b4:	20 91 8f 0e 	lds	r18, 0x0E8F	; 0x800e8f <timer0_millis_count>
    48b8:	30 91 90 0e 	lds	r19, 0x0E90	; 0x800e90 <timer0_millis_count+0x1>
    48bc:	40 91 91 0e 	lds	r20, 0x0E91	; 0x800e91 <timer0_millis_count+0x2>
    48c0:	50 91 92 0e 	lds	r21, 0x0E92	; 0x800e92 <timer0_millis_count+0x3>
    48c4:	0f be       	out	0x3f, r0	; 63
    48c6:	e8 ee       	ldi	r30, 0xE8	; 232
    48c8:	f3 e0       	ldi	r31, 0x03	; 3
    48ca:	8e 9f       	mul	r24, r30
    48cc:	b0 01       	movw	r22, r0
    48ce:	8f 9f       	mul	r24, r31
    48d0:	70 0d       	add	r23, r0
    48d2:	9e 9f       	mul	r25, r30
    48d4:	70 0d       	add	r23, r0
    48d6:	11 24       	eor	r1, r1
    48d8:	07 2e       	mov	r0, r23
    48da:	00 0c       	add	r0, r0
    48dc:	88 0b       	sbc	r24, r24
    48de:	99 0b       	sbc	r25, r25
    48e0:	c0 90 71 0e 	lds	r12, 0x0E71	; 0x800e71 <CFastLED::countFPS(int)::lastframe>
    48e4:	d0 90 72 0e 	lds	r13, 0x0E72	; 0x800e72 <CFastLED::countFPS(int)::lastframe+0x1>
    48e8:	e0 90 73 0e 	lds	r14, 0x0E73	; 0x800e73 <CFastLED::countFPS(int)::lastframe+0x2>
    48ec:	f0 90 74 0e 	lds	r15, 0x0E74	; 0x800e74 <CFastLED::countFPS(int)::lastframe+0x3>
    48f0:	2c 19       	sub	r18, r12
    48f2:	3d 09       	sbc	r19, r13
    48f4:	4e 09       	sbc	r20, r14
    48f6:	5f 09       	sbc	r21, r15
    48f8:	0e 94 42 34 	call	0x6884	; 0x6884 <__udivmodsi4>
    48fc:	3a 83       	std	Y+2, r19	; 0x02
    48fe:	29 83       	std	Y+1, r18	; 0x01
    4900:	10 92 76 0e 	sts	0x0E76, r1	; 0x800e76 <CFastLED::countFPS(int)::br+0x1>
    4904:	10 92 75 0e 	sts	0x0E75, r1	; 0x800e75 <CFastLED::countFPS(int)::br>
    4908:	0f b6       	in	r0, 0x3f	; 63
    490a:	f8 94       	cli
    490c:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <timer0_millis_count>
    4910:	90 91 90 0e 	lds	r25, 0x0E90	; 0x800e90 <timer0_millis_count+0x1>
    4914:	a0 91 91 0e 	lds	r26, 0x0E91	; 0x800e91 <timer0_millis_count+0x2>
    4918:	b0 91 92 0e 	lds	r27, 0x0E92	; 0x800e92 <timer0_millis_count+0x3>
    491c:	0f be       	out	0x3f, r0	; 63
    491e:	80 93 71 0e 	sts	0x0E71, r24	; 0x800e71 <CFastLED::countFPS(int)::lastframe>
    4922:	90 93 72 0e 	sts	0x0E72, r25	; 0x800e72 <CFastLED::countFPS(int)::lastframe+0x1>
    4926:	a0 93 73 0e 	sts	0x0E73, r26	; 0x800e73 <CFastLED::countFPS(int)::lastframe+0x2>
    492a:	b0 93 74 0e 	sts	0x0E74, r27	; 0x800e74 <CFastLED::countFPS(int)::lastframe+0x3>
    492e:	df 91       	pop	r29
    4930:	cf 91       	pop	r28
    4932:	ff 90       	pop	r15
    4934:	ef 90       	pop	r14
    4936:	df 90       	pop	r13
    4938:	cf 90       	pop	r12
    493a:	08 95       	ret

0000493c <CFastLED::show(unsigned char)>:
    493c:	8f 92       	push	r8
    493e:	9f 92       	push	r9
    4940:	af 92       	push	r10
    4942:	bf 92       	push	r11
    4944:	cf 92       	push	r12
    4946:	df 92       	push	r13
    4948:	ef 92       	push	r14
    494a:	ff 92       	push	r15
    494c:	0f 93       	push	r16
    494e:	1f 93       	push	r17
    4950:	cf 93       	push	r28
    4952:	df 93       	push	r29
    4954:	00 d0       	rcall	.+0      	; 0x4956 <CFastLED::show(unsigned char)+0x1a>
    4956:	1f 92       	push	r1
    4958:	cd b7       	in	r28, 0x3d	; 61
    495a:	de b7       	in	r29, 0x3e	; 62
    495c:	7c 01       	movw	r14, r24
    495e:	d6 2e       	mov	r13, r22
    4960:	d7 01       	movw	r26, r14
    4962:	13 96       	adiw	r26, 0x03	; 3
    4964:	0d 91       	ld	r16, X+
    4966:	1d 91       	ld	r17, X+
    4968:	2d 91       	ld	r18, X+
    496a:	3c 91       	ld	r19, X
    496c:	16 97       	sbiw	r26, 0x06	; 6
    496e:	01 15       	cp	r16, r1
    4970:	11 05       	cpc	r17, r1
    4972:	21 05       	cpc	r18, r1
    4974:	31 05       	cpc	r19, r1
    4976:	91 f0       	breq	.+36     	; 0x499c <CFastLED::show(unsigned char)+0x60>
    4978:	59 d6       	rcall	.+3250   	; 0x562c <_micros>
    497a:	80 90 77 0e 	lds	r8, 0x0E77	; 0x800e77 <lastshow>
    497e:	90 90 78 0e 	lds	r9, 0x0E78	; 0x800e78 <lastshow+0x1>
    4982:	a0 90 79 0e 	lds	r10, 0x0E79	; 0x800e79 <lastshow+0x2>
    4986:	b0 90 7a 0e 	lds	r11, 0x0E7A	; 0x800e7a <lastshow+0x3>
    498a:	68 19       	sub	r22, r8
    498c:	79 09       	sbc	r23, r9
    498e:	8a 09       	sbc	r24, r10
    4990:	9b 09       	sbc	r25, r11
    4992:	60 17       	cp	r22, r16
    4994:	71 07       	cpc	r23, r17
    4996:	82 07       	cpc	r24, r18
    4998:	93 07       	cpc	r25, r19
    499a:	10 f3       	brcs	.-60     	; 0x4960 <CFastLED::show(unsigned char)+0x24>
    499c:	47 d6       	rcall	.+3214   	; 0x562c <_micros>
    499e:	60 93 77 0e 	sts	0x0E77, r22	; 0x800e77 <lastshow>
    49a2:	70 93 78 0e 	sts	0x0E78, r23	; 0x800e78 <lastshow+0x1>
    49a6:	80 93 79 0e 	sts	0x0E79, r24	; 0x800e79 <lastshow+0x2>
    49aa:	90 93 7a 0e 	sts	0x0E7A, r25	; 0x800e7a <lastshow+0x3>
    49ae:	d7 01       	movw	r26, r14
    49b0:	1b 96       	adiw	r26, 0x0b	; 11
    49b2:	ed 91       	ld	r30, X+
    49b4:	fc 91       	ld	r31, X
    49b6:	1c 97       	sbiw	r26, 0x0c	; 12
    49b8:	30 97       	sbiw	r30, 0x00	; 0
    49ba:	49 f0       	breq	.+18     	; 0x49ce <CFastLED::show(unsigned char)+0x92>
    49bc:	17 96       	adiw	r26, 0x07	; 7
    49be:	4d 91       	ld	r20, X+
    49c0:	5d 91       	ld	r21, X+
    49c2:	6d 91       	ld	r22, X+
    49c4:	7c 91       	ld	r23, X
    49c6:	1a 97       	sbiw	r26, 0x0a	; 10
    49c8:	8d 2d       	mov	r24, r13
    49ca:	09 95       	icall
    49cc:	d8 2e       	mov	r13, r24
    49ce:	00 91 7d 0e 	lds	r16, 0x0E7D	; 0x800e7d <CLEDController::m_pHead>
    49d2:	10 91 7e 0e 	lds	r17, 0x0E7E	; 0x800e7e <CLEDController::m_pHead+0x1>
    49d6:	01 15       	cp	r16, r1
    49d8:	11 05       	cpc	r17, r1
    49da:	61 f1       	breq	.+88     	; 0x4a34 <CFastLED::show(unsigned char)+0xf8>
    49dc:	f8 01       	movw	r30, r16
    49de:	c4 84       	ldd	r12, Z+12	; 0x0c
    49e0:	d7 01       	movw	r26, r14
    49e2:	11 96       	adiw	r26, 0x01	; 1
    49e4:	8d 91       	ld	r24, X+
    49e6:	9c 91       	ld	r25, X
    49e8:	84 36       	cpi	r24, 0x64	; 100
    49ea:	91 05       	cpc	r25, r1
    49ec:	08 f4       	brcc	.+2      	; 0x49f0 <CFastLED::show(unsigned char)+0xb4>
    49ee:	14 86       	std	Z+12, r1	; 0x0c
    49f0:	d8 01       	movw	r26, r16
    49f2:	ed 91       	ld	r30, X+
    49f4:	fc 91       	ld	r31, X
    49f6:	a2 80       	ldd	r10, Z+2	; 0x02
    49f8:	b3 80       	ldd	r11, Z+3	; 0x03
    49fa:	98 01       	movw	r18, r16
    49fc:	27 5f       	subi	r18, 0xF7	; 247
    49fe:	3f 4f       	sbci	r19, 0xFF	; 255
    4a00:	a8 01       	movw	r20, r16
    4a02:	4a 5f       	subi	r20, 0xFA	; 250
    4a04:	5f 4f       	sbci	r21, 0xFF	; 255
    4a06:	6d 2d       	mov	r22, r13
    4a08:	ce 01       	movw	r24, r28
    4a0a:	01 96       	adiw	r24, 0x01	; 1
    4a0c:	b7 de       	rcall	.-658    	; 0x477c <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    4a0e:	f8 01       	movw	r30, r16
    4a10:	45 85       	ldd	r20, Z+13	; 0x0d
    4a12:	56 85       	ldd	r21, Z+14	; 0x0e
    4a14:	62 81       	ldd	r22, Z+2	; 0x02
    4a16:	73 81       	ldd	r23, Z+3	; 0x03
    4a18:	9e 01       	movw	r18, r28
    4a1a:	2f 5f       	subi	r18, 0xFF	; 255
    4a1c:	3f 4f       	sbci	r19, 0xFF	; 255
    4a1e:	c8 01       	movw	r24, r16
    4a20:	f5 01       	movw	r30, r10
    4a22:	09 95       	icall
    4a24:	d8 01       	movw	r26, r16
    4a26:	1c 96       	adiw	r26, 0x0c	; 12
    4a28:	cc 92       	st	X, r12
    4a2a:	1c 97       	sbiw	r26, 0x0c	; 12
    4a2c:	14 96       	adiw	r26, 0x04	; 4
    4a2e:	0d 91       	ld	r16, X+
    4a30:	1c 91       	ld	r17, X
    4a32:	d1 cf       	rjmp	.-94     	; 0x49d6 <CFastLED::show(unsigned char)+0x9a>
    4a34:	69 e1       	ldi	r22, 0x19	; 25
    4a36:	70 e0       	ldi	r23, 0x00	; 0
    4a38:	c7 01       	movw	r24, r14
    4a3a:	25 df       	rcall	.-438    	; 0x4886 <CFastLED::countFPS(int)>
    4a3c:	0f 90       	pop	r0
    4a3e:	0f 90       	pop	r0
    4a40:	0f 90       	pop	r0
    4a42:	df 91       	pop	r29
    4a44:	cf 91       	pop	r28
    4a46:	1f 91       	pop	r17
    4a48:	0f 91       	pop	r16
    4a4a:	ff 90       	pop	r15
    4a4c:	ef 90       	pop	r14
    4a4e:	df 90       	pop	r13
    4a50:	cf 90       	pop	r12
    4a52:	bf 90       	pop	r11
    4a54:	af 90       	pop	r10
    4a56:	9f 90       	pop	r9
    4a58:	8f 90       	pop	r8
    4a5a:	08 95       	ret

00004a5c <CFastLED::showColor(CRGB const&, unsigned char)>:
    4a5c:	4f 92       	push	r4
    4a5e:	5f 92       	push	r5
    4a60:	6f 92       	push	r6
    4a62:	7f 92       	push	r7
    4a64:	8f 92       	push	r8
    4a66:	9f 92       	push	r9
    4a68:	af 92       	push	r10
    4a6a:	bf 92       	push	r11
    4a6c:	cf 92       	push	r12
    4a6e:	df 92       	push	r13
    4a70:	ef 92       	push	r14
    4a72:	ff 92       	push	r15
    4a74:	0f 93       	push	r16
    4a76:	1f 93       	push	r17
    4a78:	cf 93       	push	r28
    4a7a:	df 93       	push	r29
    4a7c:	00 d0       	rcall	.+0      	; 0x4a7e <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    4a7e:	1f 92       	push	r1
    4a80:	cd b7       	in	r28, 0x3d	; 61
    4a82:	de b7       	in	r29, 0x3e	; 62
    4a84:	7c 01       	movw	r14, r24
    4a86:	5b 01       	movw	r10, r22
    4a88:	d4 2e       	mov	r13, r20
    4a8a:	d7 01       	movw	r26, r14
    4a8c:	13 96       	adiw	r26, 0x03	; 3
    4a8e:	0d 91       	ld	r16, X+
    4a90:	1d 91       	ld	r17, X+
    4a92:	2d 91       	ld	r18, X+
    4a94:	3c 91       	ld	r19, X
    4a96:	16 97       	sbiw	r26, 0x06	; 6
    4a98:	01 15       	cp	r16, r1
    4a9a:	11 05       	cpc	r17, r1
    4a9c:	21 05       	cpc	r18, r1
    4a9e:	31 05       	cpc	r19, r1
    4aa0:	91 f0       	breq	.+36     	; 0x4ac6 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    4aa2:	c4 d5       	rcall	.+2952   	; 0x562c <_micros>
    4aa4:	40 90 77 0e 	lds	r4, 0x0E77	; 0x800e77 <lastshow>
    4aa8:	50 90 78 0e 	lds	r5, 0x0E78	; 0x800e78 <lastshow+0x1>
    4aac:	60 90 79 0e 	lds	r6, 0x0E79	; 0x800e79 <lastshow+0x2>
    4ab0:	70 90 7a 0e 	lds	r7, 0x0E7A	; 0x800e7a <lastshow+0x3>
    4ab4:	64 19       	sub	r22, r4
    4ab6:	75 09       	sbc	r23, r5
    4ab8:	86 09       	sbc	r24, r6
    4aba:	97 09       	sbc	r25, r7
    4abc:	60 17       	cp	r22, r16
    4abe:	71 07       	cpc	r23, r17
    4ac0:	82 07       	cpc	r24, r18
    4ac2:	93 07       	cpc	r25, r19
    4ac4:	10 f3       	brcs	.-60     	; 0x4a8a <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    4ac6:	b2 d5       	rcall	.+2916   	; 0x562c <_micros>
    4ac8:	60 93 77 0e 	sts	0x0E77, r22	; 0x800e77 <lastshow>
    4acc:	70 93 78 0e 	sts	0x0E78, r23	; 0x800e78 <lastshow+0x1>
    4ad0:	80 93 79 0e 	sts	0x0E79, r24	; 0x800e79 <lastshow+0x2>
    4ad4:	90 93 7a 0e 	sts	0x0E7A, r25	; 0x800e7a <lastshow+0x3>
    4ad8:	d7 01       	movw	r26, r14
    4ada:	1b 96       	adiw	r26, 0x0b	; 11
    4adc:	ed 91       	ld	r30, X+
    4ade:	fc 91       	ld	r31, X
    4ae0:	1c 97       	sbiw	r26, 0x0c	; 12
    4ae2:	30 97       	sbiw	r30, 0x00	; 0
    4ae4:	49 f0       	breq	.+18     	; 0x4af8 <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    4ae6:	17 96       	adiw	r26, 0x07	; 7
    4ae8:	4d 91       	ld	r20, X+
    4aea:	5d 91       	ld	r21, X+
    4aec:	6d 91       	ld	r22, X+
    4aee:	7c 91       	ld	r23, X
    4af0:	1a 97       	sbiw	r26, 0x0a	; 10
    4af2:	8d 2d       	mov	r24, r13
    4af4:	09 95       	icall
    4af6:	d8 2e       	mov	r13, r24
    4af8:	00 91 7d 0e 	lds	r16, 0x0E7D	; 0x800e7d <CLEDController::m_pHead>
    4afc:	10 91 7e 0e 	lds	r17, 0x0E7E	; 0x800e7e <CLEDController::m_pHead+0x1>
    4b00:	01 15       	cp	r16, r1
    4b02:	11 05       	cpc	r17, r1
    4b04:	59 f1       	breq	.+86     	; 0x4b5c <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    4b06:	f8 01       	movw	r30, r16
    4b08:	c4 84       	ldd	r12, Z+12	; 0x0c
    4b0a:	d7 01       	movw	r26, r14
    4b0c:	11 96       	adiw	r26, 0x01	; 1
    4b0e:	8d 91       	ld	r24, X+
    4b10:	9c 91       	ld	r25, X
    4b12:	84 36       	cpi	r24, 0x64	; 100
    4b14:	91 05       	cpc	r25, r1
    4b16:	08 f4       	brcc	.+2      	; 0x4b1a <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    4b18:	14 86       	std	Z+12, r1	; 0x0c
    4b1a:	d8 01       	movw	r26, r16
    4b1c:	ed 91       	ld	r30, X+
    4b1e:	fc 91       	ld	r31, X
    4b20:	80 80       	ld	r8, Z
    4b22:	91 80       	ldd	r9, Z+1	; 0x01
    4b24:	98 01       	movw	r18, r16
    4b26:	27 5f       	subi	r18, 0xF7	; 247
    4b28:	3f 4f       	sbci	r19, 0xFF	; 255
    4b2a:	a8 01       	movw	r20, r16
    4b2c:	4a 5f       	subi	r20, 0xFA	; 250
    4b2e:	5f 4f       	sbci	r21, 0xFF	; 255
    4b30:	6d 2d       	mov	r22, r13
    4b32:	ce 01       	movw	r24, r28
    4b34:	01 96       	adiw	r24, 0x01	; 1
    4b36:	22 de       	rcall	.-956    	; 0x477c <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    4b38:	f8 01       	movw	r30, r16
    4b3a:	45 85       	ldd	r20, Z+13	; 0x0d
    4b3c:	56 85       	ldd	r21, Z+14	; 0x0e
    4b3e:	9e 01       	movw	r18, r28
    4b40:	2f 5f       	subi	r18, 0xFF	; 255
    4b42:	3f 4f       	sbci	r19, 0xFF	; 255
    4b44:	b5 01       	movw	r22, r10
    4b46:	c8 01       	movw	r24, r16
    4b48:	f4 01       	movw	r30, r8
    4b4a:	09 95       	icall
    4b4c:	d8 01       	movw	r26, r16
    4b4e:	1c 96       	adiw	r26, 0x0c	; 12
    4b50:	cc 92       	st	X, r12
    4b52:	1c 97       	sbiw	r26, 0x0c	; 12
    4b54:	14 96       	adiw	r26, 0x04	; 4
    4b56:	0d 91       	ld	r16, X+
    4b58:	1c 91       	ld	r17, X
    4b5a:	d2 cf       	rjmp	.-92     	; 0x4b00 <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    4b5c:	69 e1       	ldi	r22, 0x19	; 25
    4b5e:	70 e0       	ldi	r23, 0x00	; 0
    4b60:	c7 01       	movw	r24, r14
    4b62:	91 de       	rcall	.-734    	; 0x4886 <CFastLED::countFPS(int)>
    4b64:	0f 90       	pop	r0
    4b66:	0f 90       	pop	r0
    4b68:	0f 90       	pop	r0
    4b6a:	df 91       	pop	r29
    4b6c:	cf 91       	pop	r28
    4b6e:	1f 91       	pop	r17
    4b70:	0f 91       	pop	r16
    4b72:	ff 90       	pop	r15
    4b74:	ef 90       	pop	r14
    4b76:	df 90       	pop	r13
    4b78:	cf 90       	pop	r12
    4b7a:	bf 90       	pop	r11
    4b7c:	af 90       	pop	r10
    4b7e:	9f 90       	pop	r9
    4b80:	8f 90       	pop	r8
    4b82:	7f 90       	pop	r7
    4b84:	6f 90       	pop	r6
    4b86:	5f 90       	pop	r5
    4b88:	4f 90       	pop	r4
    4b8a:	08 95       	ret

00004b8c <CFastLED::clear(bool)>:
    4b8c:	0f 93       	push	r16
    4b8e:	1f 93       	push	r17
    4b90:	cf 93       	push	r28
    4b92:	df 93       	push	r29
    4b94:	00 d0       	rcall	.+0      	; 0x4b96 <CFastLED::clear(bool)+0xa>
    4b96:	1f 92       	push	r1
    4b98:	cd b7       	in	r28, 0x3d	; 61
    4b9a:	de b7       	in	r29, 0x3e	; 62
    4b9c:	8c 01       	movw	r16, r24
    4b9e:	66 23       	and	r22, r22
    4ba0:	41 f0       	breq	.+16     	; 0x4bb2 <CFastLED::clear(bool)+0x26>
    4ba2:	19 82       	std	Y+1, r1	; 0x01
    4ba4:	1a 82       	std	Y+2, r1	; 0x02
    4ba6:	1b 82       	std	Y+3, r1	; 0x03
    4ba8:	40 e0       	ldi	r20, 0x00	; 0
    4baa:	be 01       	movw	r22, r28
    4bac:	6f 5f       	subi	r22, 0xFF	; 255
    4bae:	7f 4f       	sbci	r23, 0xFF	; 255
    4bb0:	55 df       	rcall	.-342    	; 0x4a5c <CFastLED::showColor(CRGB const&, unsigned char)>
    4bb2:	c8 01       	movw	r24, r16
    4bb4:	4c de       	rcall	.-872    	; 0x484e <CFastLED::clearData()>
    4bb6:	0f 90       	pop	r0
    4bb8:	0f 90       	pop	r0
    4bba:	0f 90       	pop	r0
    4bbc:	df 91       	pop	r29
    4bbe:	cf 91       	pop	r28
    4bc0:	1f 91       	pop	r17
    4bc2:	0f 91       	pop	r16
    4bc4:	08 95       	ret

00004bc6 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    4bc6:	cf 93       	push	r28
    4bc8:	df 93       	push	r29
    4bca:	ec 01       	movw	r28, r24
    4bcc:	44 23       	and	r20, r20
    4bce:	f1 f0       	breq	.+60     	; 0x4c0c <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    4bd0:	61 15       	cp	r22, r1
    4bd2:	71 05       	cpc	r23, r1
    4bd4:	c1 f0       	breq	.+48     	; 0x4c06 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    4bd6:	9b 01       	movw	r18, r22
    4bd8:	50 e0       	ldi	r21, 0x00	; 0
    4bda:	40 e0       	ldi	r20, 0x00	; 0
    4bdc:	60 e4       	ldi	r22, 0x40	; 64
    4bde:	72 e4       	ldi	r23, 0x42	; 66
    4be0:	8f e0       	ldi	r24, 0x0F	; 15
    4be2:	90 e0       	ldi	r25, 0x00	; 0
    4be4:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__divmodsi4>
    4be8:	8b 81       	ldd	r24, Y+3	; 0x03
    4bea:	9c 81       	ldd	r25, Y+4	; 0x04
    4bec:	ad 81       	ldd	r26, Y+5	; 0x05
    4bee:	be 81       	ldd	r27, Y+6	; 0x06
    4bf0:	82 17       	cp	r24, r18
    4bf2:	93 07       	cpc	r25, r19
    4bf4:	a4 07       	cpc	r26, r20
    4bf6:	b5 07       	cpc	r27, r21
    4bf8:	10 f4       	brcc	.+4      	; 0x4bfe <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    4bfa:	da 01       	movw	r26, r20
    4bfc:	c9 01       	movw	r24, r18
    4bfe:	8b 83       	std	Y+3, r24	; 0x03
    4c00:	9c 83       	std	Y+4, r25	; 0x04
    4c02:	ad 83       	std	Y+5, r26	; 0x05
    4c04:	be 83       	std	Y+6, r27	; 0x06
    4c06:	df 91       	pop	r29
    4c08:	cf 91       	pop	r28
    4c0a:	08 95       	ret
    4c0c:	61 15       	cp	r22, r1
    4c0e:	71 05       	cpc	r23, r1
    4c10:	71 f0       	breq	.+28     	; 0x4c2e <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    4c12:	9b 01       	movw	r18, r22
    4c14:	50 e0       	ldi	r21, 0x00	; 0
    4c16:	40 e0       	ldi	r20, 0x00	; 0
    4c18:	60 e4       	ldi	r22, 0x40	; 64
    4c1a:	72 e4       	ldi	r23, 0x42	; 66
    4c1c:	8f e0       	ldi	r24, 0x0F	; 15
    4c1e:	90 e0       	ldi	r25, 0x00	; 0
    4c20:	0e 94 64 34 	call	0x68c8	; 0x68c8 <__divmodsi4>
    4c24:	2b 83       	std	Y+3, r18	; 0x03
    4c26:	3c 83       	std	Y+4, r19	; 0x04
    4c28:	4d 83       	std	Y+5, r20	; 0x05
    4c2a:	5e 83       	std	Y+6, r21	; 0x06
    4c2c:	ec cf       	rjmp	.-40     	; 0x4c06 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    4c2e:	1b 82       	std	Y+3, r1	; 0x03
    4c30:	1c 82       	std	Y+4, r1	; 0x04
    4c32:	1d 82       	std	Y+5, r1	; 0x05
    4c34:	1e 82       	std	Y+6, r1	; 0x06
    4c36:	e7 cf       	rjmp	.-50     	; 0x4c06 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

00004c38 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    4c38:	cf 92       	push	r12
    4c3a:	df 92       	push	r13
    4c3c:	ef 92       	push	r14
    4c3e:	ff 92       	push	r15
    4c40:	0f 93       	push	r16
    4c42:	1f 93       	push	r17
    4c44:	cf 93       	push	r28
    4c46:	df 93       	push	r29
    4c48:	ec 01       	movw	r28, r24
    4c4a:	6b 01       	movw	r12, r22
    4c4c:	7a 01       	movw	r14, r20
    4c4e:	10 e0       	ldi	r17, 0x00	; 0
    4c50:	00 e0       	ldi	r16, 0x00	; 0
    4c52:	12 16       	cp	r1, r18
    4c54:	13 06       	cpc	r1, r19
    4c56:	14 f4       	brge	.+4      	; 0x4c5c <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    4c58:	8a 01       	movw	r16, r20
    4c5a:	79 01       	movw	r14, r18
    4c5c:	e8 81       	ld	r30, Y
    4c5e:	f9 81       	ldd	r31, Y+1	; 0x01
    4c60:	04 80       	ldd	r0, Z+4	; 0x04
    4c62:	f5 81       	ldd	r31, Z+5	; 0x05
    4c64:	e0 2d       	mov	r30, r0
    4c66:	ce 01       	movw	r24, r28
    4c68:	09 95       	icall
    4c6a:	c8 01       	movw	r24, r16
    4c6c:	88 0f       	add	r24, r24
    4c6e:	99 1f       	adc	r25, r25
    4c70:	08 0f       	add	r16, r24
    4c72:	19 1f       	adc	r17, r25
    4c74:	c0 0e       	add	r12, r16
    4c76:	d1 1e       	adc	r13, r17
    4c78:	db 82       	std	Y+3, r13	; 0x03
    4c7a:	ca 82       	std	Y+2, r12	; 0x02
    4c7c:	ed 86       	std	Y+13, r14	; 0x0d
    4c7e:	fe 86       	std	Y+14, r15	; 0x0e
    4c80:	e8 81       	ld	r30, Y
    4c82:	f9 81       	ldd	r31, Y+1	; 0x01
    4c84:	02 84       	ldd	r0, Z+10	; 0x0a
    4c86:	f3 85       	ldd	r31, Z+11	; 0x0b
    4c88:	e0 2d       	mov	r30, r0
    4c8a:	ce 01       	movw	r24, r28
    4c8c:	09 95       	icall
    4c8e:	41 e0       	ldi	r20, 0x01	; 1
    4c90:	bc 01       	movw	r22, r24
    4c92:	8f e7       	ldi	r24, 0x7F	; 127
    4c94:	9e e0       	ldi	r25, 0x0E	; 14
    4c96:	97 df       	rcall	.-210    	; 0x4bc6 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    4c98:	ce 01       	movw	r24, r28
    4c9a:	df 91       	pop	r29
    4c9c:	cf 91       	pop	r28
    4c9e:	1f 91       	pop	r17
    4ca0:	0f 91       	pop	r16
    4ca2:	ff 90       	pop	r15
    4ca4:	ef 90       	pop	r14
    4ca6:	df 90       	pop	r13
    4ca8:	cf 90       	pop	r12
    4caa:	08 95       	ret

00004cac <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    4cac:	8f e7       	ldi	r24, 0x7F	; 127
    4cae:	9e e0       	ldi	r25, 0x0E	; 14
    4cb0:	bf cd       	rjmp	.-1154   	; 0x4830 <CFastLED::CFastLED()>

00004cb2 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    4cb2:	1f 93       	push	r17
    4cb4:	dc 01       	movw	r26, r24
    4cb6:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    4cb8:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    4cba:	11 96       	adiw	r26, 0x01	; 1
    4cbc:	4c 91       	ld	r20, X
    4cbe:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    4cc0:	12 96       	adiw	r26, 0x02	; 2
    4cc2:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    4cc4:	97 2f       	mov	r25, r23
    4cc6:	99 0f       	add	r25, r25
    4cc8:	99 0f       	add	r25, r25
    4cca:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4ccc:	35 e5       	ldi	r19, 0x55	; 85
    4cce:	29 2f       	mov	r18, r25
    4cd0:	23 9f       	mul	r18, r19
    4cd2:	02 0e       	add	r0, r18
    4cd4:	20 e0       	ldi	r18, 0x00	; 0
    4cd6:	21 1d       	adc	r18, r1
    4cd8:	11 24       	eor	r1, r1
    4cda:	82 2f       	mov	r24, r18
    4cdc:	67 2f       	mov	r22, r23
    4cde:	60 74       	andi	r22, 0x40	; 64
    4ce0:	57 2f       	mov	r21, r23
    4ce2:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    4ce4:	77 fd       	sbrc	r23, 7
    4ce6:	6f c0       	rjmp	.+222    	; 0x4dc6 <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    4ce8:	61 11       	cpse	r22, r1
    4cea:	5b c0       	rjmp	.+182    	; 0x4da2 <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    4cec:	51 11       	cpse	r21, r1
    4cee:	05 c0       	rjmp	.+10     	; 0x4cfa <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    4cf0:	92 2f       	mov	r25, r18
    4cf2:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4cf4:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    4cf6:	90 e0       	ldi	r25, 0x00	; 0
    4cf8:	04 c0       	rjmp	.+8      	; 0x4d02 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    4cfa:	25 e5       	ldi	r18, 0x55	; 85
    4cfc:	28 0f       	add	r18, r24
                    b = 0;
    4cfe:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    4d00:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    4d02:	4f 3f       	cpi	r20, 0xFF	; 255
    4d04:	09 f4       	brne	.+2      	; 0x4d08 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    4d06:	24 c0       	rjmp	.+72     	; 0x4d50 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    4d08:	44 23       	and	r20, r20
    4d0a:	09 f4       	brne	.+2      	; 0x4d0e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    4d0c:	7d c0       	rjmp	.+250    	; 0x4e08 <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    4d0e:	88 23       	and	r24, r24
    4d10:	31 f0       	breq	.+12     	; 0x4d1e <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4d12:	38 2f       	mov	r19, r24
    4d14:	34 9f       	mul	r19, r20
    4d16:	03 0e       	add	r0, r19
    4d18:	30 e0       	ldi	r19, 0x00	; 0
    4d1a:	31 1d       	adc	r19, r1
    4d1c:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    4d1e:	22 23       	and	r18, r18
    4d20:	21 f0       	breq	.+8      	; 0x4d2a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    4d22:	24 9f       	mul	r18, r20
    4d24:	02 0e       	add	r0, r18
    4d26:	20 e0       	ldi	r18, 0x00	; 0
    4d28:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    4d2a:	99 23       	and	r25, r25
    4d2c:	31 f0       	breq	.+12     	; 0x4d3a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    4d2e:	39 2f       	mov	r19, r25
    4d30:	34 9f       	mul	r19, r20
    4d32:	03 0e       	add	r0, r19
    4d34:	30 e0       	ldi	r19, 0x00	; 0
    4d36:	31 1d       	adc	r19, r1
    4d38:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    4d3a:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    4d3c:	34 2f       	mov	r19, r20
    4d3e:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4d40:	33 9f       	mul	r19, r19
    4d42:	03 0e       	add	r0, r19
    4d44:	30 e0       	ldi	r19, 0x00	; 0
    4d46:	31 1d       	adc	r19, r1
    4d48:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    4d4a:	83 0f       	add	r24, r19
            g += brightness_floor;
    4d4c:	23 0f       	add	r18, r19
            b += brightness_floor;
    4d4e:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    4d50:	1f 3f       	cpi	r17, 0xFF	; 255
    4d52:	09 f4       	brne	.+2      	; 0x4d56 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    4d54:	21 c0       	rjmp	.+66     	; 0x4d98 <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    4d56:	30 e0       	ldi	r19, 0x00	; 0
    4d58:	11 23       	and	r17, r17
    4d5a:	21 f0       	breq	.+8      	; 0x4d64 <L_630>
    4d5c:	11 9f       	mul	r17, r17
    4d5e:	31 2d       	mov	r19, r1
    4d60:	09 f0       	breq	.+2      	; 0x4d64 <L_630>
    4d62:	3f 5f       	subi	r19, 0xFF	; 255

00004d64 <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    4d64:	33 23       	and	r19, r19
    4d66:	09 f4       	brne	.+2      	; 0x4d6a <L_630+0x6>
    4d68:	53 c0       	rjmp	.+166    	; 0x4e10 <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    4d6a:	88 23       	and	r24, r24
    4d6c:	31 f0       	breq	.+12     	; 0x4d7a <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4d6e:	48 2f       	mov	r20, r24
    4d70:	43 9f       	mul	r20, r19
    4d72:	04 0e       	add	r0, r20
    4d74:	40 e0       	ldi	r20, 0x00	; 0
    4d76:	41 1d       	adc	r20, r1
    4d78:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    4d7a:	22 23       	and	r18, r18
    4d7c:	21 f0       	breq	.+8      	; 0x4d86 <L_630+0x22>
    4d7e:	23 9f       	mul	r18, r19
    4d80:	02 0e       	add	r0, r18
    4d82:	20 e0       	ldi	r18, 0x00	; 0
    4d84:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    4d86:	99 23       	and	r25, r25
    4d88:	31 f0       	breq	.+12     	; 0x4d96 <L_630+0x32>
    4d8a:	49 2f       	mov	r20, r25
    4d8c:	43 9f       	mul	r20, r19
    4d8e:	04 0e       	add	r0, r20
    4d90:	40 e0       	ldi	r20, 0x00	; 0
    4d92:	41 1d       	adc	r20, r1
    4d94:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    4d96:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    4d98:	80 83       	st	Z, r24
    rgb.g = g;
    4d9a:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    4d9c:	92 83       	std	Z+2, r25	; 0x02
}
    4d9e:	1f 91       	pop	r17
    4da0:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    4da2:	51 11       	cpse	r21, r1
    4da4:	0b c0       	rjmp	.+22     	; 0x4dbc <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    4da6:	39 2f       	mov	r19, r25
    4da8:	2a ea       	ldi	r18, 0xAA	; 170
    4daa:	32 9f       	mul	r19, r18
    4dac:	03 0e       	add	r0, r19
    4dae:	30 e0       	ldi	r19, 0x00	; 0
    4db0:	31 1d       	adc	r19, r1
    4db2:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    4db4:	9b ea       	ldi	r25, 0xAB	; 171
    4db6:	93 1b       	sub	r25, r19
                    g = K170 + third;
    4db8:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    4dba:	9c cf       	rjmp	.-200    	; 0x4cf4 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    4dbe:	20 95       	com	r18
                b = third;
    4dc0:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    4dc2:	80 e0       	ldi	r24, 0x00	; 0
    4dc4:	9e cf       	rjmp	.-196    	; 0x4d02 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    4dc6:	61 11       	cpse	r22, r1
    4dc8:	12 c0       	rjmp	.+36     	; 0x4dee <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    4dca:	51 11       	cpse	r21, r1
    4dcc:	0c c0       	rjmp	.+24     	; 0x4de6 <L_630+0x82>
    4dce:	39 2f       	mov	r19, r25
    4dd0:	2a ea       	ldi	r18, 0xAA	; 170
    4dd2:	32 9f       	mul	r19, r18
    4dd4:	03 0e       	add	r0, r19
    4dd6:	30 e0       	ldi	r19, 0x00	; 0
    4dd8:	31 1d       	adc	r19, r1
    4dda:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    4ddc:	2b ea       	ldi	r18, 0xAB	; 171
    4dde:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    4de0:	95 e5       	ldi	r25, 0x55	; 85
    4de2:	93 0f       	add	r25, r19
    4de4:	ee cf       	rjmp	.-36     	; 0x4dc2 <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    4de6:	92 2f       	mov	r25, r18
    4de8:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    4dea:	20 e0       	ldi	r18, 0x00	; 0
    4dec:	8a cf       	rjmp	.-236    	; 0x4d02 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    4dee:	51 11       	cpse	r21, r1
    4df0:	06 c0       	rjmp	.+12     	; 0x4dfe <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    4df2:	25 e5       	ldi	r18, 0x55	; 85
    4df4:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    4df6:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    4df8:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    4dfa:	82 2f       	mov	r24, r18
    4dfc:	f6 cf       	rjmp	.-20     	; 0x4dea <L_630+0x86>
    4dfe:	2a ea       	ldi	r18, 0xAA	; 170
    4e00:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    4e02:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    4e04:	93 2f       	mov	r25, r19
    4e06:	f8 cf       	rjmp	.-16     	; 0x4df8 <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    4e08:	9f ef       	ldi	r25, 0xFF	; 255
    4e0a:	2f ef       	ldi	r18, 0xFF	; 255
    4e0c:	8f ef       	ldi	r24, 0xFF	; 255
    4e0e:	a0 cf       	rjmp	.-192    	; 0x4d50 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    4e10:	90 e0       	ldi	r25, 0x00	; 0
    4e12:	20 e0       	ldi	r18, 0x00	; 0
    4e14:	80 e0       	ldi	r24, 0x00	; 0
    4e16:	c0 cf       	rjmp	.-128    	; 0x4d98 <L_630+0x34>

00004e18 <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    4e18:	dc 01       	movw	r26, r24
    4e1a:	40 ff       	sbrs	r20, 0
    4e1c:	03 c0       	rjmp	.+6      	; 0x4e24 <Lseteven_8>
    4e1e:	01 c0       	rjmp	.+2      	; 0x4e22 <Lsetodd_8>

00004e20 <Lsetloop_8>:
    4e20:	6d 93       	st	X+, r22

00004e22 <Lsetodd_8>:
    4e22:	6d 93       	st	X+, r22

00004e24 <Lseteven_8>:
    4e24:	42 50       	subi	r20, 0x02	; 2
    4e26:	e0 f7       	brcc	.-8      	; 0x4e20 <Lsetloop_8>
    4e28:	50 40       	sbci	r21, 0x00	; 0
    4e2a:	d0 f7       	brcc	.-12     	; 0x4e20 <Lsetloop_8>
    return ptr;
}
    4e2c:	08 95       	ret

00004e2e <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    4e2e:	0f 93       	push	r16
    4e30:	1f 93       	push	r17
    4e32:	cf 93       	push	r28
    4e34:	df 93       	push	r29
    4e36:	82 30       	cpi	r24, 0x02	; 2
    4e38:	91 05       	cpc	r25, r1
    4e3a:	10 f4       	brcc	.+4      	; 0x4e40 <malloc+0x12>
    4e3c:	82 e0       	ldi	r24, 0x02	; 2
    4e3e:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    4e40:	e0 91 19 0f 	lds	r30, 0x0F19	; 0x800f19 <__flp>
    4e44:	f0 91 1a 0f 	lds	r31, 0x0F1A	; 0x800f1a <__flp+0x1>
    4e48:	30 e0       	ldi	r19, 0x00	; 0
    4e4a:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    4e4c:	70 e0       	ldi	r23, 0x00	; 0
    4e4e:	60 e0       	ldi	r22, 0x00	; 0
    4e50:	d0 e0       	ldi	r29, 0x00	; 0
    4e52:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    4e54:	b0 e0       	ldi	r27, 0x00	; 0
    4e56:	a0 e0       	ldi	r26, 0x00	; 0
    4e58:	30 97       	sbiw	r30, 0x00	; 0
    4e5a:	99 f4       	brne	.+38     	; 0x4e82 <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    4e5c:	21 15       	cp	r18, r1
    4e5e:	31 05       	cpc	r19, r1
    4e60:	09 f4       	brne	.+2      	; 0x4e64 <malloc+0x36>
    4e62:	4a c0       	rjmp	.+148    	; 0x4ef8 <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    4e64:	28 1b       	sub	r18, r24
    4e66:	39 0b       	sbc	r19, r25
    4e68:	24 30       	cpi	r18, 0x04	; 4
    4e6a:	31 05       	cpc	r19, r1
    4e6c:	d8 f5       	brcc	.+118    	; 0x4ee4 <malloc+0xb6>
    4e6e:	8a 81       	ldd	r24, Y+2	; 0x02
    4e70:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    4e72:	61 15       	cp	r22, r1
    4e74:	71 05       	cpc	r23, r1
    4e76:	89 f1       	breq	.+98     	; 0x4eda <malloc+0xac>
				sfp2->nx = sfp1->nx;
    4e78:	fb 01       	movw	r30, r22
    4e7a:	93 83       	std	Z+3, r25	; 0x03
    4e7c:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    4e7e:	fe 01       	movw	r30, r28
    4e80:	11 c0       	rjmp	.+34     	; 0x4ea4 <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    4e82:	40 81       	ld	r20, Z
    4e84:	51 81       	ldd	r21, Z+1	; 0x01
    4e86:	02 81       	ldd	r16, Z+2	; 0x02
    4e88:	13 81       	ldd	r17, Z+3	; 0x03
    4e8a:	48 17       	cp	r20, r24
    4e8c:	59 07       	cpc	r21, r25
    4e8e:	e0 f0       	brcs	.+56     	; 0x4ec8 <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    4e90:	48 17       	cp	r20, r24
    4e92:	59 07       	cpc	r21, r25
    4e94:	99 f4       	brne	.+38     	; 0x4ebc <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    4e96:	10 97       	sbiw	r26, 0x00	; 0
    4e98:	61 f0       	breq	.+24     	; 0x4eb2 <malloc+0x84>
				fp2->nx = fp1->nx;
    4e9a:	12 96       	adiw	r26, 0x02	; 2
    4e9c:	0c 93       	st	X, r16
    4e9e:	12 97       	sbiw	r26, 0x02	; 2
    4ea0:	13 96       	adiw	r26, 0x03	; 3
    4ea2:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    4ea4:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    4ea6:	cf 01       	movw	r24, r30
    4ea8:	df 91       	pop	r29
    4eaa:	cf 91       	pop	r28
    4eac:	1f 91       	pop	r17
    4eae:	0f 91       	pop	r16
    4eb0:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    4eb2:	00 93 19 0f 	sts	0x0F19, r16	; 0x800f19 <__flp>
    4eb6:	10 93 1a 0f 	sts	0x0F1A, r17	; 0x800f1a <__flp+0x1>
    4eba:	f4 cf       	rjmp	.-24     	; 0x4ea4 <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    4ebc:	21 15       	cp	r18, r1
    4ebe:	31 05       	cpc	r19, r1
    4ec0:	51 f0       	breq	.+20     	; 0x4ed6 <malloc+0xa8>
    4ec2:	42 17       	cp	r20, r18
    4ec4:	53 07       	cpc	r21, r19
    4ec6:	38 f0       	brcs	.+14     	; 0x4ed6 <malloc+0xa8>
    4ec8:	a9 01       	movw	r20, r18
    4eca:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    4ecc:	9a 01       	movw	r18, r20
    4ece:	bd 01       	movw	r22, r26
    4ed0:	df 01       	movw	r26, r30
    4ed2:	f8 01       	movw	r30, r16
    4ed4:	c1 cf       	rjmp	.-126    	; 0x4e58 <malloc+0x2a>
    4ed6:	ef 01       	movw	r28, r30
    4ed8:	f9 cf       	rjmp	.-14     	; 0x4ecc <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    4eda:	90 93 1a 0f 	sts	0x0F1A, r25	; 0x800f1a <__flp+0x1>
    4ede:	80 93 19 0f 	sts	0x0F19, r24	; 0x800f19 <__flp>
    4ee2:	cd cf       	rjmp	.-102    	; 0x4e7e <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    4ee4:	fe 01       	movw	r30, r28
    4ee6:	e2 0f       	add	r30, r18
    4ee8:	f3 1f       	adc	r31, r19
    4eea:	81 93       	st	Z+, r24
    4eec:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    4eee:	22 50       	subi	r18, 0x02	; 2
    4ef0:	31 09       	sbc	r19, r1
    4ef2:	39 83       	std	Y+1, r19	; 0x01
    4ef4:	28 83       	st	Y, r18
		return &(sfp2->nx);
    4ef6:	d7 cf       	rjmp	.-82     	; 0x4ea6 <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    4ef8:	20 91 8c 0e 	lds	r18, 0x0E8C	; 0x800e8c <__brkval>
    4efc:	30 91 8d 0e 	lds	r19, 0x0E8D	; 0x800e8d <__brkval+0x1>
    4f00:	23 2b       	or	r18, r19
    4f02:	41 f4       	brne	.+16     	; 0x4f14 <malloc+0xe6>
		__brkval = __malloc_heap_start;
    4f04:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    4f08:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    4f0c:	30 93 8d 0e 	sts	0x0E8D, r19	; 0x800e8d <__brkval+0x1>
    4f10:	20 93 8c 0e 	sts	0x0E8C, r18	; 0x800e8c <__brkval>
	cp = __malloc_heap_end;
    4f14:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    4f18:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    4f1c:	21 15       	cp	r18, r1
    4f1e:	31 05       	cpc	r19, r1
    4f20:	41 f4       	brne	.+16     	; 0x4f32 <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    4f22:	2d b7       	in	r18, 0x3d	; 61
    4f24:	3e b7       	in	r19, 0x3e	; 62
    4f26:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    4f2a:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    4f2e:	24 1b       	sub	r18, r20
    4f30:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    4f32:	e0 91 8c 0e 	lds	r30, 0x0E8C	; 0x800e8c <__brkval>
    4f36:	f0 91 8d 0e 	lds	r31, 0x0E8D	; 0x800e8d <__brkval+0x1>
    4f3a:	e2 17       	cp	r30, r18
    4f3c:	f3 07       	cpc	r31, r19
    4f3e:	a0 f4       	brcc	.+40     	; 0x4f68 <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    4f40:	2e 1b       	sub	r18, r30
    4f42:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    4f44:	28 17       	cp	r18, r24
    4f46:	39 07       	cpc	r19, r25
    4f48:	78 f0       	brcs	.+30     	; 0x4f68 <malloc+0x13a>
    4f4a:	ac 01       	movw	r20, r24
    4f4c:	4e 5f       	subi	r20, 0xFE	; 254
    4f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    4f50:	24 17       	cp	r18, r20
    4f52:	35 07       	cpc	r19, r21
    4f54:	48 f0       	brcs	.+18     	; 0x4f68 <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    4f56:	4e 0f       	add	r20, r30
    4f58:	5f 1f       	adc	r21, r31
    4f5a:	50 93 8d 0e 	sts	0x0E8D, r21	; 0x800e8d <__brkval+0x1>
    4f5e:	40 93 8c 0e 	sts	0x0E8C, r20	; 0x800e8c <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    4f62:	81 93       	st	Z+, r24
    4f64:	91 93       	st	Z+, r25
		return &(fp1->nx);
    4f66:	9f cf       	rjmp	.-194    	; 0x4ea6 <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    4f68:	f0 e0       	ldi	r31, 0x00	; 0
    4f6a:	e0 e0       	ldi	r30, 0x00	; 0
    4f6c:	9c cf       	rjmp	.-200    	; 0x4ea6 <malloc+0x78>

00004f6e <free>:
}


void
free(void *p)
{
    4f6e:	cf 93       	push	r28
    4f70:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    4f72:	00 97       	sbiw	r24, 0x00	; 0
    4f74:	e9 f0       	breq	.+58     	; 0x4fb0 <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    4f76:	fc 01       	movw	r30, r24
    4f78:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    4f7a:	13 82       	std	Z+3, r1	; 0x03
    4f7c:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    4f7e:	a0 91 19 0f 	lds	r26, 0x0F19	; 0x800f19 <__flp>
    4f82:	b0 91 1a 0f 	lds	r27, 0x0F1A	; 0x800f1a <__flp+0x1>
    4f86:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    4f88:	30 e0       	ldi	r19, 0x00	; 0
    4f8a:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    4f8c:	10 97       	sbiw	r26, 0x00	; 0
    4f8e:	a1 f4       	brne	.+40     	; 0x4fb8 <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    4f90:	20 81       	ld	r18, Z
    4f92:	31 81       	ldd	r19, Z+1	; 0x01
    4f94:	82 0f       	add	r24, r18
    4f96:	93 1f       	adc	r25, r19
    4f98:	20 91 8c 0e 	lds	r18, 0x0E8C	; 0x800e8c <__brkval>
    4f9c:	30 91 8d 0e 	lds	r19, 0x0E8D	; 0x800e8d <__brkval+0x1>
    4fa0:	28 17       	cp	r18, r24
    4fa2:	39 07       	cpc	r19, r25
    4fa4:	09 f0       	breq	.+2      	; 0x4fa8 <free+0x3a>
    4fa6:	61 c0       	rjmp	.+194    	; 0x506a <free+0xfc>
			__brkval = cpnew;
    4fa8:	f0 93 8d 0e 	sts	0x0E8D, r31	; 0x800e8d <__brkval+0x1>
    4fac:	e0 93 8c 0e 	sts	0x0E8C, r30	; 0x800e8c <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    4fb0:	df 91       	pop	r29
    4fb2:	cf 91       	pop	r28
    4fb4:	08 95       	ret
    4fb6:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    4fb8:	ce 17       	cp	r28, r30
    4fba:	df 07       	cpc	r29, r31
    4fbc:	e8 f5       	brcc	.+122    	; 0x5038 <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    4fbe:	4a 81       	ldd	r20, Y+2	; 0x02
    4fc0:	5b 81       	ldd	r21, Y+3	; 0x03
    4fc2:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    4fc4:	41 15       	cp	r20, r1
    4fc6:	51 05       	cpc	r21, r1
    4fc8:	b1 f7       	brne	.-20     	; 0x4fb6 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    4fca:	e9 01       	movw	r28, r18
    4fcc:	fb 83       	std	Y+3, r31	; 0x03
    4fce:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    4fd0:	49 91       	ld	r20, Y+
    4fd2:	59 91       	ld	r21, Y+
    4fd4:	c4 0f       	add	r28, r20
    4fd6:	d5 1f       	adc	r29, r21
    4fd8:	ec 17       	cp	r30, r28
    4fda:	fd 07       	cpc	r31, r29
    4fdc:	61 f4       	brne	.+24     	; 0x4ff6 <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    4fde:	80 81       	ld	r24, Z
    4fe0:	91 81       	ldd	r25, Z+1	; 0x01
    4fe2:	02 96       	adiw	r24, 0x02	; 2
    4fe4:	84 0f       	add	r24, r20
    4fe6:	95 1f       	adc	r25, r21
    4fe8:	e9 01       	movw	r28, r18
    4fea:	99 83       	std	Y+1, r25	; 0x01
    4fec:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    4fee:	82 81       	ldd	r24, Z+2	; 0x02
    4ff0:	93 81       	ldd	r25, Z+3	; 0x03
    4ff2:	9b 83       	std	Y+3, r25	; 0x03
    4ff4:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    4ff6:	f0 e0       	ldi	r31, 0x00	; 0
    4ff8:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    4ffa:	12 96       	adiw	r26, 0x02	; 2
    4ffc:	8d 91       	ld	r24, X+
    4ffe:	9c 91       	ld	r25, X
    5000:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    5002:	00 97       	sbiw	r24, 0x00	; 0
    5004:	b9 f5       	brne	.+110    	; 0x5074 <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    5006:	2d 91       	ld	r18, X+
    5008:	3c 91       	ld	r19, X
    500a:	11 97       	sbiw	r26, 0x01	; 1
    500c:	cd 01       	movw	r24, r26
    500e:	02 96       	adiw	r24, 0x02	; 2
    5010:	82 0f       	add	r24, r18
    5012:	93 1f       	adc	r25, r19
    5014:	20 91 8c 0e 	lds	r18, 0x0E8C	; 0x800e8c <__brkval>
    5018:	30 91 8d 0e 	lds	r19, 0x0E8D	; 0x800e8d <__brkval+0x1>
    501c:	28 17       	cp	r18, r24
    501e:	39 07       	cpc	r19, r25
    5020:	39 f6       	brne	.-114    	; 0x4fb0 <free+0x42>
		if (fp2 == NULL)
    5022:	30 97       	sbiw	r30, 0x00	; 0
    5024:	51 f5       	brne	.+84     	; 0x507a <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    5026:	10 92 1a 0f 	sts	0x0F1A, r1	; 0x800f1a <__flp+0x1>
    502a:	10 92 19 0f 	sts	0x0F19, r1	; 0x800f19 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    502e:	b0 93 8d 0e 	sts	0x0E8D, r27	; 0x800e8d <__brkval+0x1>
    5032:	a0 93 8c 0e 	sts	0x0E8C, r26	; 0x800e8c <__brkval>
    5036:	bc cf       	rjmp	.-136    	; 0x4fb0 <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    5038:	d3 83       	std	Z+3, r29	; 0x03
    503a:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    503c:	40 81       	ld	r20, Z
    503e:	51 81       	ldd	r21, Z+1	; 0x01
    5040:	84 0f       	add	r24, r20
    5042:	95 1f       	adc	r25, r21
    5044:	c8 17       	cp	r28, r24
    5046:	d9 07       	cpc	r29, r25
    5048:	61 f4       	brne	.+24     	; 0x5062 <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    504a:	4e 5f       	subi	r20, 0xFE	; 254
    504c:	5f 4f       	sbci	r21, 0xFF	; 255
    504e:	88 81       	ld	r24, Y
    5050:	99 81       	ldd	r25, Y+1	; 0x01
    5052:	48 0f       	add	r20, r24
    5054:	59 1f       	adc	r21, r25
    5056:	51 83       	std	Z+1, r21	; 0x01
    5058:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    505a:	8a 81       	ldd	r24, Y+2	; 0x02
    505c:	9b 81       	ldd	r25, Y+3	; 0x03
    505e:	93 83       	std	Z+3, r25	; 0x03
    5060:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    5062:	21 15       	cp	r18, r1
    5064:	31 05       	cpc	r19, r1
    5066:	09 f0       	breq	.+2      	; 0x506a <free+0xfc>
    5068:	b0 cf       	rjmp	.-160    	; 0x4fca <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    506a:	f0 93 1a 0f 	sts	0x0F1A, r31	; 0x800f1a <__flp+0x1>
    506e:	e0 93 19 0f 	sts	0x0F19, r30	; 0x800f19 <__flp>
			return;
    5072:	9e cf       	rjmp	.-196    	; 0x4fb0 <free+0x42>
    5074:	fd 01       	movw	r30, r26
    5076:	dc 01       	movw	r26, r24
    5078:	c0 cf       	rjmp	.-128    	; 0x4ffa <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    507a:	13 82       	std	Z+3, r1	; 0x03
    507c:	12 82       	std	Z+2, r1	; 0x02
    507e:	d7 cf       	rjmp	.-82     	; 0x502e <free+0xc0>

00005080 <realloc>:



void *
realloc(void *ptr, size_t len)
{
    5080:	4f 92       	push	r4
    5082:	5f 92       	push	r5
    5084:	6f 92       	push	r6
    5086:	7f 92       	push	r7
    5088:	8f 92       	push	r8
    508a:	9f 92       	push	r9
    508c:	af 92       	push	r10
    508e:	bf 92       	push	r11
    5090:	cf 92       	push	r12
    5092:	df 92       	push	r13
    5094:	ef 92       	push	r14
    5096:	ff 92       	push	r15
    5098:	0f 93       	push	r16
    509a:	1f 93       	push	r17
    509c:	cf 93       	push	r28
    509e:	df 93       	push	r29
    50a0:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    50a2:	00 97       	sbiw	r24, 0x00	; 0
    50a4:	91 f4       	brne	.+36     	; 0x50ca <realloc+0x4a>
		return malloc(len);
    50a6:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    50a8:	df 91       	pop	r29
    50aa:	cf 91       	pop	r28
    50ac:	1f 91       	pop	r17
    50ae:	0f 91       	pop	r16
    50b0:	ff 90       	pop	r15
    50b2:	ef 90       	pop	r14
    50b4:	df 90       	pop	r13
    50b6:	cf 90       	pop	r12
    50b8:	bf 90       	pop	r11
    50ba:	af 90       	pop	r10
    50bc:	9f 90       	pop	r9
    50be:	8f 90       	pop	r8
    50c0:	7f 90       	pop	r7
    50c2:	6f 90       	pop	r6
    50c4:	5f 90       	pop	r5
    50c6:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    50c8:	b2 ce       	rjmp	.-668    	; 0x4e2e <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    50ca:	fc 01       	movw	r30, r24
    50cc:	e6 0f       	add	r30, r22
    50ce:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    50d0:	9c 01       	movw	r18, r24
    50d2:	22 50       	subi	r18, 0x02	; 2
    50d4:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    50d6:	e2 17       	cp	r30, r18
    50d8:	f3 07       	cpc	r31, r19
    50da:	08 f4       	brcc	.+2      	; 0x50de <realloc+0x5e>
    50dc:	a5 c0       	rjmp	.+330    	; 0x5228 <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    50de:	d9 01       	movw	r26, r18
    50e0:	cd 91       	ld	r28, X+
    50e2:	dc 91       	ld	r29, X
    50e4:	11 97       	sbiw	r26, 0x01	; 1
    50e6:	c6 17       	cp	r28, r22
    50e8:	d7 07       	cpc	r29, r23
    50ea:	18 f1       	brcs	.+70     	; 0x5132 <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    50ec:	c5 30       	cpi	r28, 0x05	; 5
    50ee:	d1 05       	cpc	r29, r1
    50f0:	70 f0       	brcs	.+28     	; 0x510e <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    50f2:	ce 01       	movw	r24, r28
    50f4:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    50f6:	86 17       	cp	r24, r22
    50f8:	97 07       	cpc	r25, r23
    50fa:	48 f0       	brcs	.+18     	; 0x510e <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    50fc:	c6 1b       	sub	r28, r22
    50fe:	d7 0b       	sbc	r29, r23
    5100:	22 97       	sbiw	r28, 0x02	; 2
    5102:	c1 93       	st	Z+, r28
    5104:	d1 93       	st	Z+, r29
		fp1->sz = len;
    5106:	6d 93       	st	X+, r22
    5108:	7c 93       	st	X, r23
		free(&(fp2->nx));
    510a:	cf 01       	movw	r24, r30
    510c:	30 df       	rcall	.-416    	; 0x4f6e <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    510e:	c8 01       	movw	r24, r16
    5110:	df 91       	pop	r29
    5112:	cf 91       	pop	r28
    5114:	1f 91       	pop	r17
    5116:	0f 91       	pop	r16
    5118:	ff 90       	pop	r15
    511a:	ef 90       	pop	r14
    511c:	df 90       	pop	r13
    511e:	cf 90       	pop	r12
    5120:	bf 90       	pop	r11
    5122:	af 90       	pop	r10
    5124:	9f 90       	pop	r9
    5126:	8f 90       	pop	r8
    5128:	7f 90       	pop	r7
    512a:	6f 90       	pop	r6
    512c:	5f 90       	pop	r5
    512e:	4f 90       	pop	r4
    5130:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    5132:	5b 01       	movw	r10, r22
    5134:	ac 1a       	sub	r10, r28
    5136:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    5138:	4c 01       	movw	r8, r24
    513a:	8c 0e       	add	r8, r28
    513c:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    513e:	a0 91 19 0f 	lds	r26, 0x0F19	; 0x800f19 <__flp>
    5142:	b0 91 1a 0f 	lds	r27, 0x0F1A	; 0x800f1a <__flp+0x1>
    5146:	51 2c       	mov	r5, r1
    5148:	41 2c       	mov	r4, r1
    514a:	f1 2c       	mov	r15, r1
    514c:	e1 2c       	mov	r14, r1
    514e:	10 97       	sbiw	r26, 0x00	; 0
    5150:	01 f5       	brne	.+64     	; 0x5192 <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    5152:	80 91 8c 0e 	lds	r24, 0x0E8C	; 0x800e8c <__brkval>
    5156:	90 91 8d 0e 	lds	r25, 0x0E8D	; 0x800e8d <__brkval+0x1>
    515a:	88 15       	cp	r24, r8
    515c:	99 05       	cpc	r25, r9
    515e:	09 f0       	breq	.+2      	; 0x5162 <realloc+0xe2>
    5160:	56 c0       	rjmp	.+172    	; 0x520e <realloc+0x18e>
    5162:	46 16       	cp	r4, r22
    5164:	57 06       	cpc	r5, r23
    5166:	08 f0       	brcs	.+2      	; 0x516a <realloc+0xea>
    5168:	52 c0       	rjmp	.+164    	; 0x520e <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    516a:	8d b7       	in	r24, 0x3d	; 61
    516c:	9e b7       	in	r25, 0x3e	; 62
    516e:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    5172:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    5176:	84 1b       	sub	r24, r20
    5178:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    517a:	e8 17       	cp	r30, r24
    517c:	f9 07       	cpc	r31, r25
    517e:	08 f0       	brcs	.+2      	; 0x5182 <realloc+0x102>
    5180:	53 c0       	rjmp	.+166    	; 0x5228 <realloc+0x1a8>
			__brkval = cp;
    5182:	f0 93 8d 0e 	sts	0x0E8D, r31	; 0x800e8d <__brkval+0x1>
    5186:	e0 93 8c 0e 	sts	0x0E8C, r30	; 0x800e8c <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    518a:	f9 01       	movw	r30, r18
    518c:	71 83       	std	Z+1, r23	; 0x01
    518e:	60 83       	st	Z, r22
			return ptr;
    5190:	be cf       	rjmp	.-132    	; 0x510e <realloc+0x8e>
    5192:	8d 91       	ld	r24, X+
    5194:	9c 91       	ld	r25, X
    5196:	11 97       	sbiw	r26, 0x01	; 1
    5198:	12 96       	adiw	r26, 0x02	; 2
    519a:	6c 90       	ld	r6, X
    519c:	12 97       	sbiw	r26, 0x02	; 2
    519e:	13 96       	adiw	r26, 0x03	; 3
    51a0:	7c 90       	ld	r7, X
    51a2:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    51a4:	a8 15       	cp	r26, r8
    51a6:	b9 05       	cpc	r27, r9
    51a8:	59 f5       	brne	.+86     	; 0x5200 <realloc+0x180>
    51aa:	6c 01       	movw	r12, r24
    51ac:	42 e0       	ldi	r20, 0x02	; 2
    51ae:	c4 0e       	add	r12, r20
    51b0:	d1 1c       	adc	r13, r1
    51b2:	ca 14       	cp	r12, r10
    51b4:	db 04       	cpc	r13, r11
    51b6:	20 f1       	brcs	.+72     	; 0x5200 <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    51b8:	ac 01       	movw	r20, r24
    51ba:	4a 19       	sub	r20, r10
    51bc:	5b 09       	sbc	r21, r11
    51be:	da 01       	movw	r26, r20
    51c0:	12 96       	adiw	r26, 0x02	; 2
    51c2:	15 97       	sbiw	r26, 0x05	; 5
    51c4:	80 f0       	brcs	.+32     	; 0x51e6 <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    51c6:	62 82       	std	Z+2, r6	; 0x02
    51c8:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    51ca:	51 83       	std	Z+1, r21	; 0x01
    51cc:	40 83       	st	Z, r20
				fp1->sz = len;
    51ce:	d9 01       	movw	r26, r18
    51d0:	6d 93       	st	X+, r22
    51d2:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    51d4:	e1 14       	cp	r14, r1
    51d6:	f1 04       	cpc	r15, r1
    51d8:	71 f0       	breq	.+28     	; 0x51f6 <realloc+0x176>
				ofp3->nx = fp2;
    51da:	d7 01       	movw	r26, r14
    51dc:	13 96       	adiw	r26, 0x03	; 3
    51de:	fc 93       	st	X, r31
    51e0:	ee 93       	st	-X, r30
    51e2:	12 97       	sbiw	r26, 0x02	; 2
    51e4:	94 cf       	rjmp	.-216    	; 0x510e <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    51e6:	22 96       	adiw	r28, 0x02	; 2
    51e8:	8c 0f       	add	r24, r28
    51ea:	9d 1f       	adc	r25, r29
    51ec:	f9 01       	movw	r30, r18
    51ee:	91 83       	std	Z+1, r25	; 0x01
    51f0:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    51f2:	f3 01       	movw	r30, r6
    51f4:	ef cf       	rjmp	.-34     	; 0x51d4 <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    51f6:	f0 93 1a 0f 	sts	0x0F1A, r31	; 0x800f1a <__flp+0x1>
    51fa:	e0 93 19 0f 	sts	0x0F19, r30	; 0x800f19 <__flp>
    51fe:	87 cf       	rjmp	.-242    	; 0x510e <realloc+0x8e>
    5200:	48 16       	cp	r4, r24
    5202:	59 06       	cpc	r5, r25
    5204:	08 f4       	brcc	.+2      	; 0x5208 <realloc+0x188>
    5206:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    5208:	7d 01       	movw	r14, r26
    520a:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    520c:	a0 cf       	rjmp	.-192    	; 0x514e <realloc+0xce>
    520e:	cb 01       	movw	r24, r22
    5210:	0e de       	rcall	.-996    	; 0x4e2e <malloc>
    5212:	7c 01       	movw	r14, r24
    5214:	00 97       	sbiw	r24, 0x00	; 0
    5216:	41 f0       	breq	.+16     	; 0x5228 <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    5218:	ae 01       	movw	r20, r28
    521a:	b8 01       	movw	r22, r16
    521c:	0e 94 46 35 	call	0x6a8c	; 0x6a8c <memcpy>
	free(ptr);
    5220:	c8 01       	movw	r24, r16
    5222:	a5 de       	rcall	.-694    	; 0x4f6e <free>
	return memp;
    5224:	87 01       	movw	r16, r14
    5226:	73 cf       	rjmp	.-282    	; 0x510e <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    5228:	10 e0       	ldi	r17, 0x00	; 0
    522a:	00 e0       	ldi	r16, 0x00	; 0
    522c:	70 cf       	rjmp	.-288    	; 0x510e <realloc+0x8e>

0000522e <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    522e:	1d ba       	out	0x1d, r1	; 29
    5230:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    5234:	1c bc       	out	0x2c, r1	; 44
    5236:	10 be       	out	0x30, r1	; 48
    5238:	1f ba       	out	0x1f, r1	; 31
    523a:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    523e:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    5242:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    5246:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    524a:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    524e:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5252:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    5256:	11 b8       	out	0x01, r1	; 1
    5258:	14 b8       	out	0x04, r1	; 4
    525a:	17 b8       	out	0x07, r1	; 7
    525c:	1a b8       	out	0x0a, r1	; 10
    525e:	1d b8       	out	0x0d, r1	; 13
    5260:	10 ba       	out	0x10, r1	; 16
    5262:	12 b8       	out	0x02, r1	; 2
    5264:	15 b8       	out	0x05, r1	; 5
    5266:	18 b8       	out	0x08, r1	; 8
    5268:	1b b8       	out	0x0b, r1	; 11
    526a:	1e b8       	out	0x0e, r1	; 14
    526c:	11 ba       	out	0x11, r1	; 17
    526e:	08 95       	ret

00005270 <_init_Teensyduino_internal_>:
    5270:	f8 94       	cli
    5272:	e1 e6       	ldi	r30, 0x61	; 97
    5274:	f0 e0       	ldi	r31, 0x00	; 0
    5276:	20 e8       	ldi	r18, 0x80	; 128
    5278:	20 83       	st	Z, r18
    527a:	10 82       	st	Z, r1
    527c:	83 e0       	ldi	r24, 0x03	; 3
    527e:	84 bd       	out	0x24, r24	; 36
    5280:	85 bd       	out	0x25, r24	; 37
    5282:	ee e6       	ldi	r30, 0x6E	; 110
    5284:	f0 e0       	ldi	r31, 0x00	; 0
    5286:	80 81       	ld	r24, Z
    5288:	81 60       	ori	r24, 0x01	; 1
    528a:	80 83       	st	Z, r24
    528c:	91 e0       	ldi	r25, 0x01	; 1
    528e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    5292:	82 e0       	ldi	r24, 0x02	; 2
    5294:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    5298:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    529c:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    52a0:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    52a4:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    52a8:	86 e8       	ldi	r24, 0x86	; 134
    52aa:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    52ae:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    52b2:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    52b6:	d9 d1       	rcall	.+946    	; 0x566a <usb_init>
    52b8:	78 94       	sei
    52ba:	08 95       	ret

000052bc <analogRead>:
    52bc:	9a ed       	ldi	r25, 0xDA	; 218
    52be:	98 0f       	add	r25, r24
    52c0:	98 30       	cpi	r25, 0x08	; 8
    52c2:	10 f1       	brcs	.+68     	; 0x5308 <analogRead+0x4c>
    52c4:	88 30       	cpi	r24, 0x08	; 8
    52c6:	60 f4       	brcc	.+24     	; 0x52e0 <analogRead+0x24>
    52c8:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    52cc:	21 e0       	ldi	r18, 0x01	; 1
    52ce:	30 e0       	ldi	r19, 0x00	; 0
    52d0:	08 2e       	mov	r0, r24
    52d2:	01 c0       	rjmp	.+2      	; 0x52d6 <analogRead+0x1a>
    52d4:	22 0f       	add	r18, r18
    52d6:	0a 94       	dec	r0
    52d8:	ea f7       	brpl	.-6      	; 0x52d4 <analogRead+0x18>
    52da:	92 2b       	or	r25, r18
    52dc:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    52e0:	8f 71       	andi	r24, 0x1F	; 31
    52e2:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    52e6:	89 2b       	or	r24, r25
    52e8:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    52ec:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    52f0:	80 64       	ori	r24, 0x40	; 64
    52f2:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    52f6:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    52fa:	86 fd       	sbrc	r24, 6
    52fc:	fc cf       	rjmp	.-8      	; 0x52f6 <analogRead+0x3a>
    52fe:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    5302:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    5306:	08 95       	ret
    5308:	89 2f       	mov	r24, r25
    530a:	de cf       	rjmp	.-68     	; 0x52c8 <analogRead+0xc>

0000530c <_pinMode_output>:
    530c:	8e 32       	cpi	r24, 0x2E	; 46
    530e:	70 f4       	brcc	.+28     	; 0x532c <_pinMode_output+0x20>
    5310:	e8 e3       	ldi	r30, 0x38	; 56
    5312:	f6 e0       	ldi	r31, 0x06	; 6
    5314:	88 0f       	add	r24, r24
    5316:	e8 0f       	add	r30, r24
    5318:	f1 1d       	adc	r31, r1
    531a:	25 91       	lpm	r18, Z+
    531c:	e4 91       	lpm	r30, Z
    531e:	f0 e0       	ldi	r31, 0x00	; 0
    5320:	9f b7       	in	r25, 0x3f	; 63
    5322:	f8 94       	cli
    5324:	81 81       	ldd	r24, Z+1	; 0x01
    5326:	82 2b       	or	r24, r18
    5328:	81 83       	std	Z+1, r24	; 0x01
    532a:	9f bf       	out	0x3f, r25	; 63
    532c:	08 95       	ret

0000532e <_digitalWrite_HIGH>:
    532e:	ee 32       	cpi	r30, 0x2E	; 46
    5330:	50 f4       	brcc	.+20     	; 0x5346 <_digitalWrite_bailout>
    5332:	ee 0f       	add	r30, r30
    5334:	ec 55       	subi	r30, 0x5C	; 92
    5336:	f6 4d       	sbci	r31, 0xD6	; 214
    5338:	09 94       	ijmp

0000533a <_digitalWrite_LOW>:
    533a:	ee 32       	cpi	r30, 0x2E	; 46
    533c:	20 f4       	brcc	.+8      	; 0x5346 <_digitalWrite_bailout>
    533e:	ee 0f       	add	r30, r30
    5340:	e0 50       	subi	r30, 0x00	; 0
    5342:	f6 4d       	sbci	r31, 0xD6	; 214
    5344:	09 94       	ijmp

00005346 <_digitalWrite_bailout>:
    5346:	08 95       	ret

00005348 <_digitalWrite_HIGH_TABLE>:
    5348:	58 9a       	sbi	0x0b, 0	; 11
    534a:	b6 c0       	rjmp	.+364    	; 0x54b8 <_digitalWrite_OC0B>
    534c:	59 9a       	sbi	0x0b, 1	; 11
    534e:	d0 c0       	rjmp	.+416    	; 0x54f0 <_digitalWrite_OC2B>
    5350:	5a 9a       	sbi	0x0b, 2	; 11
    5352:	08 95       	ret
    5354:	5b 9a       	sbi	0x0b, 3	; 11
    5356:	08 95       	ret
    5358:	5c 9a       	sbi	0x0b, 4	; 11
    535a:	08 95       	ret
    535c:	5d 9a       	sbi	0x0b, 5	; 11
    535e:	08 95       	ret
    5360:	5e 9a       	sbi	0x0b, 6	; 11
    5362:	08 95       	ret
    5364:	5f 9a       	sbi	0x0b, 7	; 11
    5366:	08 95       	ret
    5368:	70 9a       	sbi	0x0e, 0	; 14
    536a:	08 95       	ret
    536c:	71 9a       	sbi	0x0e, 1	; 14
    536e:	08 95       	ret
    5370:	40 9a       	sbi	0x08, 0	; 8
    5372:	08 95       	ret
    5374:	41 9a       	sbi	0x08, 1	; 8
    5376:	08 95       	ret
    5378:	42 9a       	sbi	0x08, 2	; 8
    537a:	08 95       	ret
    537c:	43 9a       	sbi	0x08, 3	; 8
    537e:	08 95       	ret
    5380:	44 9a       	sbi	0x08, 4	; 8
    5382:	c8 c0       	rjmp	.+400    	; 0x5514 <_digitalWrite_OC3C>
    5384:	45 9a       	sbi	0x08, 5	; 8
    5386:	c0 c0       	rjmp	.+384    	; 0x5508 <_digitalWrite_OC3B>
    5388:	46 9a       	sbi	0x08, 6	; 8
    538a:	b8 c0       	rjmp	.+368    	; 0x54fc <_digitalWrite_OC3A>
    538c:	47 9a       	sbi	0x08, 7	; 8
    538e:	08 95       	ret
    5390:	76 9a       	sbi	0x0e, 6	; 14
    5392:	08 95       	ret
    5394:	77 9a       	sbi	0x0e, 7	; 14
    5396:	08 95       	ret
    5398:	28 9a       	sbi	0x05, 0	; 5
    539a:	08 95       	ret
    539c:	29 9a       	sbi	0x05, 1	; 5
    539e:	08 95       	ret
    53a0:	2a 9a       	sbi	0x05, 2	; 5
    53a2:	08 95       	ret
    53a4:	2b 9a       	sbi	0x05, 3	; 5
    53a6:	08 95       	ret
    53a8:	2c 9a       	sbi	0x05, 4	; 5
    53aa:	9c c0       	rjmp	.+312    	; 0x54e4 <_digitalWrite_OC2A>
    53ac:	2d 9a       	sbi	0x05, 5	; 5
    53ae:	88 c0       	rjmp	.+272    	; 0x54c0 <_digitalWrite_OC1A>
    53b0:	2e 9a       	sbi	0x05, 6	; 5
    53b2:	8c c0       	rjmp	.+280    	; 0x54cc <_digitalWrite_OC1B>
    53b4:	2f 9a       	sbi	0x05, 7	; 5
    53b6:	90 c0       	rjmp	.+288    	; 0x54d8 <_digitalWrite_OC1C>
    53b8:	10 9a       	sbi	0x02, 0	; 2
    53ba:	08 95       	ret
    53bc:	11 9a       	sbi	0x02, 1	; 2
    53be:	08 95       	ret
    53c0:	12 9a       	sbi	0x02, 2	; 2
    53c2:	08 95       	ret
    53c4:	13 9a       	sbi	0x02, 3	; 2
    53c6:	08 95       	ret
    53c8:	14 9a       	sbi	0x02, 4	; 2
    53ca:	08 95       	ret
    53cc:	15 9a       	sbi	0x02, 5	; 2
    53ce:	08 95       	ret
    53d0:	16 9a       	sbi	0x02, 6	; 2
    53d2:	08 95       	ret
    53d4:	17 9a       	sbi	0x02, 7	; 2
    53d6:	08 95       	ret
    53d8:	74 9a       	sbi	0x0e, 4	; 14
    53da:	08 95       	ret
    53dc:	75 9a       	sbi	0x0e, 5	; 14
    53de:	08 95       	ret
    53e0:	88 9a       	sbi	0x11, 0	; 17
    53e2:	08 95       	ret
    53e4:	89 9a       	sbi	0x11, 1	; 17
    53e6:	08 95       	ret
    53e8:	8a 9a       	sbi	0x11, 2	; 17
    53ea:	08 95       	ret
    53ec:	8b 9a       	sbi	0x11, 3	; 17
    53ee:	08 95       	ret
    53f0:	8c 9a       	sbi	0x11, 4	; 17
    53f2:	08 95       	ret
    53f4:	8d 9a       	sbi	0x11, 5	; 17
    53f6:	08 95       	ret
    53f8:	8e 9a       	sbi	0x11, 6	; 17
    53fa:	08 95       	ret
    53fc:	8f 9a       	sbi	0x11, 7	; 17
    53fe:	08 95       	ret

00005400 <_digitalWrite_LOW_TABLE>:
    5400:	58 98       	cbi	0x0b, 0	; 11
    5402:	5a c0       	rjmp	.+180    	; 0x54b8 <_digitalWrite_OC0B>
    5404:	59 98       	cbi	0x0b, 1	; 11
    5406:	74 c0       	rjmp	.+232    	; 0x54f0 <_digitalWrite_OC2B>
    5408:	5a 98       	cbi	0x0b, 2	; 11
    540a:	08 95       	ret
    540c:	5b 98       	cbi	0x0b, 3	; 11
    540e:	08 95       	ret
    5410:	5c 98       	cbi	0x0b, 4	; 11
    5412:	08 95       	ret
    5414:	5d 98       	cbi	0x0b, 5	; 11
    5416:	08 95       	ret
    5418:	5e 98       	cbi	0x0b, 6	; 11
    541a:	08 95       	ret
    541c:	5f 98       	cbi	0x0b, 7	; 11
    541e:	08 95       	ret
    5420:	70 98       	cbi	0x0e, 0	; 14
    5422:	08 95       	ret
    5424:	71 98       	cbi	0x0e, 1	; 14
    5426:	08 95       	ret
    5428:	40 98       	cbi	0x08, 0	; 8
    542a:	08 95       	ret
    542c:	41 98       	cbi	0x08, 1	; 8
    542e:	08 95       	ret
    5430:	42 98       	cbi	0x08, 2	; 8
    5432:	08 95       	ret
    5434:	43 98       	cbi	0x08, 3	; 8
    5436:	08 95       	ret
    5438:	44 98       	cbi	0x08, 4	; 8
    543a:	6c c0       	rjmp	.+216    	; 0x5514 <_digitalWrite_OC3C>
    543c:	45 98       	cbi	0x08, 5	; 8
    543e:	64 c0       	rjmp	.+200    	; 0x5508 <_digitalWrite_OC3B>
    5440:	46 98       	cbi	0x08, 6	; 8
    5442:	5c c0       	rjmp	.+184    	; 0x54fc <_digitalWrite_OC3A>
    5444:	47 98       	cbi	0x08, 7	; 8
    5446:	08 95       	ret
    5448:	76 98       	cbi	0x0e, 6	; 14
    544a:	08 95       	ret
    544c:	77 98       	cbi	0x0e, 7	; 14
    544e:	08 95       	ret
    5450:	28 98       	cbi	0x05, 0	; 5
    5452:	08 95       	ret
    5454:	29 98       	cbi	0x05, 1	; 5
    5456:	08 95       	ret
    5458:	2a 98       	cbi	0x05, 2	; 5
    545a:	08 95       	ret
    545c:	2b 98       	cbi	0x05, 3	; 5
    545e:	08 95       	ret
    5460:	2c 98       	cbi	0x05, 4	; 5
    5462:	40 c0       	rjmp	.+128    	; 0x54e4 <_digitalWrite_OC2A>
    5464:	2d 98       	cbi	0x05, 5	; 5
    5466:	2c c0       	rjmp	.+88     	; 0x54c0 <_digitalWrite_OC1A>
    5468:	2e 98       	cbi	0x05, 6	; 5
    546a:	30 c0       	rjmp	.+96     	; 0x54cc <_digitalWrite_OC1B>
    546c:	2f 98       	cbi	0x05, 7	; 5
    546e:	34 c0       	rjmp	.+104    	; 0x54d8 <_digitalWrite_OC1C>
    5470:	10 98       	cbi	0x02, 0	; 2
    5472:	08 95       	ret
    5474:	11 98       	cbi	0x02, 1	; 2
    5476:	08 95       	ret
    5478:	12 98       	cbi	0x02, 2	; 2
    547a:	08 95       	ret
    547c:	13 98       	cbi	0x02, 3	; 2
    547e:	08 95       	ret
    5480:	14 98       	cbi	0x02, 4	; 2
    5482:	08 95       	ret
    5484:	15 98       	cbi	0x02, 5	; 2
    5486:	08 95       	ret
    5488:	16 98       	cbi	0x02, 6	; 2
    548a:	08 95       	ret
    548c:	17 98       	cbi	0x02, 7	; 2
    548e:	08 95       	ret
    5490:	74 98       	cbi	0x0e, 4	; 14
    5492:	08 95       	ret
    5494:	75 98       	cbi	0x0e, 5	; 14
    5496:	08 95       	ret
    5498:	88 98       	cbi	0x11, 0	; 17
    549a:	08 95       	ret
    549c:	89 98       	cbi	0x11, 1	; 17
    549e:	08 95       	ret
    54a0:	8a 98       	cbi	0x11, 2	; 17
    54a2:	08 95       	ret
    54a4:	8b 98       	cbi	0x11, 3	; 17
    54a6:	08 95       	ret
    54a8:	8c 98       	cbi	0x11, 4	; 17
    54aa:	08 95       	ret
    54ac:	8d 98       	cbi	0x11, 5	; 17
    54ae:	08 95       	ret
    54b0:	8e 98       	cbi	0x11, 6	; 17
    54b2:	08 95       	ret
    54b4:	8f 98       	cbi	0x11, 7	; 17
    54b6:	08 95       	ret

000054b8 <_digitalWrite_OC0B>:
    54b8:	e4 b5       	in	r30, 0x24	; 36
    54ba:	ef 7d       	andi	r30, 0xDF	; 223
    54bc:	e4 bd       	out	0x24, r30	; 36
    54be:	08 95       	ret

000054c0 <_digitalWrite_OC1A>:
    54c0:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    54c4:	ef 77       	andi	r30, 0x7F	; 127
    54c6:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    54ca:	08 95       	ret

000054cc <_digitalWrite_OC1B>:
    54cc:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    54d0:	ef 7d       	andi	r30, 0xDF	; 223
    54d2:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    54d6:	08 95       	ret

000054d8 <_digitalWrite_OC1C>:
    54d8:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    54dc:	e7 7f       	andi	r30, 0xF7	; 247
    54de:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    54e2:	08 95       	ret

000054e4 <_digitalWrite_OC2A>:
    54e4:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    54e8:	ef 77       	andi	r30, 0x7F	; 127
    54ea:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    54ee:	08 95       	ret

000054f0 <_digitalWrite_OC2B>:
    54f0:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    54f4:	ef 7d       	andi	r30, 0xDF	; 223
    54f6:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    54fa:	08 95       	ret

000054fc <_digitalWrite_OC3A>:
    54fc:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5500:	ef 77       	andi	r30, 0x7F	; 127
    5502:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5506:	08 95       	ret

00005508 <_digitalWrite_OC3B>:
    5508:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    550c:	ef 7d       	andi	r30, 0xDF	; 223
    550e:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5512:	08 95       	ret

00005514 <_digitalWrite_OC3C>:
    5514:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    5518:	e7 7f       	andi	r30, 0xF7	; 247
    551a:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    551e:	08 95       	ret

00005520 <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    5520:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    5522:	84 b7       	in	r24, 0x34	; 52
    5524:	87 7f       	andi	r24, 0xF7	; 247
    5526:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    5528:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    552c:	80 61       	ori	r24, 0x10	; 16
    552e:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    5532:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    5536:	80 e2       	ldi	r24, 0x20	; 32
    5538:	9e e4       	ldi	r25, 0x4E	; 78

0000553a <L_1164_loop>:
    553a:	01 97       	sbiw	r24, 0x01	; 1
    553c:	f1 f7       	brne	.-4      	; 0x553a <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    553e:	81 e0       	ldi	r24, 0x01	; 1
    5540:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    5544:	80 e2       	ldi	r24, 0x20	; 32
    5546:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    554a:	80 e6       	ldi	r24, 0x60	; 96
    554c:	9a ee       	ldi	r25, 0xEA	; 234

0000554e <L_1178_loop>:
    554e:	01 97       	sbiw	r24, 0x01	; 1
    5550:	f1 f7       	brne	.-4      	; 0x554e <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    5552:	6d de       	rcall	.-806    	; 0x522e <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    5554:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    5558:	ff cf       	rjmp	.-2      	; 0x5558 <L_1178_loop+0xa>

0000555a <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    555a:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    555c:	68 de       	rcall	.-816    	; 0x522e <disable_peripherals>
    555e:	80 e6       	ldi	r24, 0x60	; 96
    5560:	9a ee       	ldi	r25, 0xEA	; 234

00005562 <L_1203_loop>:
    5562:	01 97       	sbiw	r24, 0x01	; 1
    5564:	f1 f7       	brne	.-4      	; 0x5562 <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    5566:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    556a:	ff cf       	rjmp	.-2      	; 0x556a <L_1203_loop+0x8>

0000556c <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    556c:	8f 93       	push	r24
    556e:	8f b7       	in	r24, 0x3f	; 63
    5570:	8f 93       	push	r24
    5572:	80 91 8e 0e 	lds	r24, 0x0E8E	; 0x800e8e <timer0_fract_count>
    5576:	8d 5f       	subi	r24, 0xFD	; 253
    5578:	8d 37       	cpi	r24, 0x7D	; 125
    557a:	d0 f4       	brcc	.+52     	; 0x55b0 <L_1218_fract_roll>

0000557c <L_1218_fract_noroll>:
    557c:	80 93 8e 0e 	sts	0x0E8E, r24	; 0x800e8e <timer0_fract_count>
    5580:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <timer0_millis_count>
    5584:	8f 5f       	subi	r24, 0xFF	; 255
    5586:	80 93 8f 0e 	sts	0x0E8F, r24	; 0x800e8f <timer0_millis_count>
    558a:	d8 f0       	brcs	.+54     	; 0x55c2 <L_1218_ovcount>

0000558c <L_1218_millis_inc_sext>:
    558c:	80 91 90 0e 	lds	r24, 0x0E90	; 0x800e90 <timer0_millis_count+0x1>
    5590:	8f 4f       	sbci	r24, 0xFF	; 255
    5592:	80 93 90 0e 	sts	0x0E90, r24	; 0x800e90 <timer0_millis_count+0x1>
    5596:	a8 f0       	brcs	.+42     	; 0x55c2 <L_1218_ovcount>
    5598:	80 91 91 0e 	lds	r24, 0x0E91	; 0x800e91 <timer0_millis_count+0x2>
    559c:	8f 4f       	sbci	r24, 0xFF	; 255
    559e:	80 93 91 0e 	sts	0x0E91, r24	; 0x800e91 <timer0_millis_count+0x2>
    55a2:	78 f0       	brcs	.+30     	; 0x55c2 <L_1218_ovcount>
    55a4:	80 91 92 0e 	lds	r24, 0x0E92	; 0x800e92 <timer0_millis_count+0x3>
    55a8:	8f 4f       	sbci	r24, 0xFF	; 255
    55aa:	80 93 92 0e 	sts	0x0E92, r24	; 0x800e92 <timer0_millis_count+0x3>
    55ae:	09 c0       	rjmp	.+18     	; 0x55c2 <L_1218_ovcount>

000055b0 <L_1218_fract_roll>:
    55b0:	8d 57       	subi	r24, 0x7D	; 125
    55b2:	80 93 8e 0e 	sts	0x0E8E, r24	; 0x800e8e <timer0_fract_count>
    55b6:	80 91 8f 0e 	lds	r24, 0x0E8F	; 0x800e8f <timer0_millis_count>
    55ba:	8e 5f       	subi	r24, 0xFE	; 254
    55bc:	80 93 8f 0e 	sts	0x0E8F, r24	; 0x800e8f <timer0_millis_count>
    55c0:	28 f7       	brcc	.-54     	; 0x558c <L_1218_millis_inc_sext>

000055c2 <L_1218_ovcount>:
    55c2:	80 91 93 0e 	lds	r24, 0x0E93	; 0x800e93 <timer0_micros_count>
    55c6:	8c 5f       	subi	r24, 0xFC	; 252
    55c8:	80 93 93 0e 	sts	0x0E93, r24	; 0x800e93 <timer0_micros_count>
    55cc:	58 f0       	brcs	.+22     	; 0x55e4 <L_1218_end>
    55ce:	80 91 94 0e 	lds	r24, 0x0E94	; 0x800e94 <timer0_micros_count+0x1>
    55d2:	8f 4f       	sbci	r24, 0xFF	; 255
    55d4:	80 93 94 0e 	sts	0x0E94, r24	; 0x800e94 <timer0_micros_count+0x1>
    55d8:	28 f0       	brcs	.+10     	; 0x55e4 <L_1218_end>
    55da:	80 91 95 0e 	lds	r24, 0x0E95	; 0x800e95 <timer0_micros_count+0x2>
    55de:	8f 4f       	sbci	r24, 0xFF	; 255
    55e0:	80 93 95 0e 	sts	0x0E95, r24	; 0x800e95 <timer0_micros_count+0x2>

000055e4 <L_1218_end>:
    55e4:	8f 91       	pop	r24
    55e6:	8f bf       	out	0x3f, r24	; 63
    55e8:	8f 91       	pop	r24
    55ea:	18 95       	reti

000055ec <delay>:
	);
}


void delay(uint32_t ms)
{
    55ec:	cf 92       	push	r12
    55ee:	df 92       	push	r13
    55f0:	ef 92       	push	r14
    55f2:	ff 92       	push	r15
    55f4:	6b 01       	movw	r12, r22
    55f6:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    55f8:	19 d0       	rcall	.+50     	; 0x562c <_micros>
	uint16_t start = (uint16_t)micros();
    55fa:	9b 01       	movw	r18, r22

	while (ms > 0) {
    55fc:	c1 14       	cp	r12, r1
    55fe:	d1 04       	cpc	r13, r1
    5600:	e1 04       	cpc	r14, r1
    5602:	f1 04       	cpc	r15, r1
    5604:	29 f4       	brne	.+10     	; 0x5610 <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    5606:	ff 90       	pop	r15
    5608:	ef 90       	pop	r14
    560a:	df 90       	pop	r13
    560c:	cf 90       	pop	r12
    560e:	08 95       	ret
    5610:	0d d0       	rcall	.+26     	; 0x562c <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    5612:	62 1b       	sub	r22, r18
    5614:	73 0b       	sbc	r23, r19
    5616:	68 3e       	cpi	r22, 0xE8	; 232
    5618:	73 40       	sbci	r23, 0x03	; 3
    561a:	80 f3       	brcs	.-32     	; 0x55fc <delay+0x10>
			ms--;
    561c:	81 e0       	ldi	r24, 0x01	; 1
    561e:	c8 1a       	sub	r12, r24
    5620:	d1 08       	sbc	r13, r1
    5622:	e1 08       	sbc	r14, r1
    5624:	f1 08       	sbc	r15, r1
			start += 1000;
    5626:	28 51       	subi	r18, 0x18	; 24
    5628:	3c 4f       	sbci	r19, 0xFC	; 252
    562a:	e8 cf       	rjmp	.-48     	; 0x55fc <delay+0x10>

0000562c <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    562c:	0f b6       	in	r0, 0x3f	; 63
    562e:	f8 94       	cli
    5630:	66 b5       	in	r22, 0x26	; 38
    5632:	15 b2       	in	r1, 0x15	; 21
    5634:	70 91 93 0e 	lds	r23, 0x0E93	; 0x800e93 <timer0_micros_count>
    5638:	80 91 94 0e 	lds	r24, 0x0E94	; 0x800e94 <timer0_micros_count+0x1>
    563c:	90 91 95 0e 	lds	r25, 0x0E95	; 0x800e95 <timer0_micros_count+0x2>
    5640:	0f be       	out	0x3f, r0	; 63
    5642:	10 fe       	sbrs	r1, 0
    5644:	05 c0       	rjmp	.+10     	; 0x5650 <L_1296_skip>
    5646:	6f 3f       	cpi	r22, 0xFF	; 255
    5648:	19 f0       	breq	.+6      	; 0x5650 <L_1296_skip>
    564a:	7c 5f       	subi	r23, 0xFC	; 252
    564c:	8f 4f       	sbci	r24, 0xFF	; 255
    564e:	9f 4f       	sbci	r25, 0xFF	; 255

00005650 <L_1296_skip>:
    5650:	11 24       	eor	r1, r1
    5652:	00 24       	eor	r0, r0
    5654:	66 0f       	add	r22, r22
    5656:	00 1c       	adc	r0, r0
    5658:	66 0f       	add	r22, r22
    565a:	00 1c       	adc	r0, r0
    565c:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    565e:	08 95       	ret

00005660 <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    5660:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5664:	80 ff       	sbrs	r24, 0
    5666:	fc cf       	rjmp	.-8      	; 0x5660 <usb_wait_in_ready>
    5668:	08 95       	ret

0000566a <usb_init>:
    566a:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    566e:	87 ff       	sbrs	r24, 7
    5670:	02 c0       	rjmp	.+4      	; 0x5676 <usb_init+0xc>
    5672:	85 ff       	sbrs	r24, 5
    5674:	1b c0       	rjmp	.+54     	; 0x56ac <usb_init+0x42>
    5676:	81 e8       	ldi	r24, 0x81	; 129
    5678:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    567c:	80 ea       	ldi	r24, 0xA0	; 160
    567e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    5682:	86 e1       	ldi	r24, 0x16	; 22
    5684:	89 bd       	out	0x29, r24	; 41
    5686:	09 b4       	in	r0, 0x29	; 41
    5688:	00 fe       	sbrs	r0, 0
    568a:	fd cf       	rjmp	.-6      	; 0x5686 <usb_init+0x1c>
    568c:	80 e9       	ldi	r24, 0x90	; 144
    568e:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    5692:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    5696:	10 92 1d 0f 	sts	0x0F1D, r1	; 0x800f1d <usb_configuration>
    569a:	10 92 1c 0f 	sts	0x0F1C, r1	; 0x800f1c <usb_suspended>
    569e:	10 92 1b 0f 	sts	0x0F1B, r1	; 0x800f1b <__bss_end>
    56a2:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    56a6:	8d e0       	ldi	r24, 0x0D	; 13
    56a8:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    56ac:	08 95       	ret

000056ae <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    56ae:	1f 92       	push	r1
    56b0:	0f 92       	push	r0
    56b2:	0f b6       	in	r0, 0x3f	; 63
    56b4:	0f 92       	push	r0
    56b6:	11 24       	eor	r1, r1
    56b8:	0b b6       	in	r0, 0x3b	; 59
    56ba:	0f 92       	push	r0
    56bc:	2f 93       	push	r18
    56be:	3f 93       	push	r19
    56c0:	4f 93       	push	r20
    56c2:	5f 93       	push	r21
    56c4:	6f 93       	push	r22
    56c6:	7f 93       	push	r23
    56c8:	8f 93       	push	r24
    56ca:	9f 93       	push	r25
    56cc:	af 93       	push	r26
    56ce:	bf 93       	push	r27
    56d0:	ef 93       	push	r30
    56d2:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    56d4:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    56d8:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    56dc:	93 ff       	sbrs	r25, 3
    56de:	11 c0       	rjmp	.+34     	; 0x5702 <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    56e0:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    56e4:	81 e0       	ldi	r24, 0x01	; 1
    56e6:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    56ea:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    56ee:	82 e2       	ldi	r24, 0x22	; 34
    56f0:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    56f4:	88 e0       	ldi	r24, 0x08	; 8
    56f6:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    56fa:	10 92 1d 0f 	sts	0x0F1D, r1	; 0x800f1d <usb_configuration>
		cdc_line_rtsdtr = 0;
    56fe:	10 92 1b 0f 	sts	0x0F1B, r1	; 0x800f1b <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    5702:	92 ff       	sbrs	r25, 2
    5704:	1d c0       	rjmp	.+58     	; 0x5740 <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    5706:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <usb_configuration>
    570a:	88 23       	and	r24, r24
    570c:	c9 f0       	breq	.+50     	; 0x5740 <__vector_10+0x92>
			t = transmit_flush_timer;
    570e:	80 91 99 0e 	lds	r24, 0x0E99	; 0x800e99 <transmit_flush_timer>
			if (t) {
    5712:	88 23       	and	r24, r24
    5714:	59 f0       	breq	.+22     	; 0x572c <__vector_10+0x7e>
				transmit_flush_timer = --t;
    5716:	81 50       	subi	r24, 0x01	; 1
    5718:	80 93 99 0e 	sts	0x0E99, r24	; 0x800e99 <transmit_flush_timer>
				if (!t) {
    571c:	81 11       	cpse	r24, r1
    571e:	06 c0       	rjmp	.+12     	; 0x572c <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    5720:	84 e0       	ldi	r24, 0x04	; 4
    5722:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    5726:	8a e3       	ldi	r24, 0x3A	; 58
    5728:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    572c:	80 91 98 0e 	lds	r24, 0x0E98	; 0x800e98 <reboot_timer>
			if (t) {
    5730:	88 23       	and	r24, r24
    5732:	31 f0       	breq	.+12     	; 0x5740 <__vector_10+0x92>
				reboot_timer = --t;
    5734:	81 50       	subi	r24, 0x01	; 1
    5736:	80 93 98 0e 	sts	0x0E98, r24	; 0x800e98 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    573a:	81 11       	cpse	r24, r1
    573c:	01 c0       	rjmp	.+2      	; 0x5740 <__vector_10+0x92>
    573e:	f0 de       	rcall	.-544    	; 0x5520 <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    5740:	90 ff       	sbrs	r25, 0
    5742:	0c c0       	rjmp	.+24     	; 0x575c <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    5744:	80 e1       	ldi	r24, 0x10	; 16
    5746:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    574a:	10 92 1d 0f 	sts	0x0F1D, r1	; 0x800f1d <usb_configuration>
		usb_suspended = 1;
    574e:	81 e0       	ldi	r24, 0x01	; 1
    5750:	80 93 1c 0f 	sts	0x0F1C, r24	; 0x800f1c <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    5754:	80 ea       	ldi	r24, 0xA0	; 160
    5756:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    575a:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    575c:	80 91 1c 0f 	lds	r24, 0x0F1C	; 0x800f1c <usb_suspended>
    5760:	88 23       	and	r24, r24
    5762:	79 f0       	breq	.+30     	; 0x5782 <__vector_10+0xd4>
    5764:	94 ff       	sbrs	r25, 4
    5766:	0d c0       	rjmp	.+26     	; 0x5782 <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    5768:	86 e1       	ldi	r24, 0x16	; 22
    576a:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    576c:	09 b4       	in	r0, 0x29	; 41
    576e:	00 fe       	sbrs	r0, 0
    5770:	fd cf       	rjmp	.-6      	; 0x576c <__vector_10+0xbe>
		USB_CONFIG();
    5772:	80 e9       	ldi	r24, 0x90	; 144
    5774:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    5778:	8d e0       	ldi	r24, 0x0D	; 13
    577a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    577e:	10 92 1c 0f 	sts	0x0F1C, r1	; 0x800f1c <usb_suspended>
		return;
	}
}
    5782:	ff 91       	pop	r31
    5784:	ef 91       	pop	r30
    5786:	bf 91       	pop	r27
    5788:	af 91       	pop	r26
    578a:	9f 91       	pop	r25
    578c:	8f 91       	pop	r24
    578e:	7f 91       	pop	r23
    5790:	6f 91       	pop	r22
    5792:	5f 91       	pop	r21
    5794:	4f 91       	pop	r20
    5796:	3f 91       	pop	r19
    5798:	2f 91       	pop	r18
    579a:	0f 90       	pop	r0
    579c:	0b be       	out	0x3b, r0	; 59
    579e:	0f 90       	pop	r0
    57a0:	0f be       	out	0x3f, r0	; 63
    57a2:	0f 90       	pop	r0
    57a4:	1f 90       	pop	r1
    57a6:	18 95       	reti

000057a8 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    57a8:	1f 92       	push	r1
    57aa:	0f 92       	push	r0
    57ac:	0f b6       	in	r0, 0x3f	; 63
    57ae:	0f 92       	push	r0
    57b0:	11 24       	eor	r1, r1
    57b2:	0b b6       	in	r0, 0x3b	; 59
    57b4:	0f 92       	push	r0
    57b6:	ef 92       	push	r14
    57b8:	ff 92       	push	r15
    57ba:	0f 93       	push	r16
    57bc:	1f 93       	push	r17
    57be:	2f 93       	push	r18
    57c0:	3f 93       	push	r19
    57c2:	4f 93       	push	r20
    57c4:	5f 93       	push	r21
    57c6:	6f 93       	push	r22
    57c8:	7f 93       	push	r23
    57ca:	8f 93       	push	r24
    57cc:	9f 93       	push	r25
    57ce:	af 93       	push	r26
    57d0:	bf 93       	push	r27
    57d2:	cf 93       	push	r28
    57d4:	df 93       	push	r29
    57d6:	ef 93       	push	r30
    57d8:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    57da:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    57de:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    57e2:	83 ff       	sbrs	r24, 3
    57e4:	20 c0       	rjmp	.+64     	; 0x5826 <__vector_11+0x7e>
		bmRequestType = UEDATX;
    57e6:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    57ea:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    57ee:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    57f2:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    57f6:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    57fa:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    57fe:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5802:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    5806:	82 ef       	ldi	r24, 0xF2	; 242
    5808:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    580c:	c6 30       	cpi	r28, 0x06	; 6
    580e:	09 f0       	breq	.+2      	; 0x5812 <__vector_11+0x6a>
    5810:	5b c0       	rjmp	.+182    	; 0x58c8 <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    5812:	e4 e9       	ldi	r30, 0x94	; 148
    5814:	f6 e0       	ldi	r31, 0x06	; 6
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    5816:	85 91       	lpm	r24, Z+
    5818:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    581a:	e8 16       	cp	r14, r24
    581c:	f9 06       	cpc	r15, r25
    581e:	39 f0       	breq	.+14     	; 0x582e <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    5820:	35 96       	adiw	r30, 0x05	; 5
    5822:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    5824:	c1 f7       	brne	.-16     	; 0x5816 <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    5826:	81 e2       	ldi	r24, 0x21	; 33
    5828:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    582c:	2b c0       	rjmp	.+86     	; 0x5884 <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    582e:	85 91       	lpm	r24, Z+
    5830:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    5832:	08 17       	cp	r16, r24
    5834:	19 07       	cpc	r17, r25
    5836:	11 f0       	breq	.+4      	; 0x583c <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    5838:	33 96       	adiw	r30, 0x03	; 3
					continue;
    583a:	f3 cf       	rjmp	.-26     	; 0x5822 <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    583c:	45 91       	lpm	r20, Z+
    583e:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    5840:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    5842:	2f 3f       	cpi	r18, 0xFF	; 255
    5844:	31 05       	cpc	r19, r1
    5846:	19 f0       	breq	.+6      	; 0x584e <__vector_11+0xa6>
    5848:	10 f0       	brcs	.+4      	; 0x584e <__vector_11+0xa6>
    584a:	2f ef       	ldi	r18, 0xFF	; 255
    584c:	30 e0       	ldi	r19, 0x00	; 0
    584e:	82 17       	cp	r24, r18
    5850:	08 f4       	brcc	.+2      	; 0x5854 <__vector_11+0xac>
    5852:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5854:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    5856:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    585a:	98 2f       	mov	r25, r24
    585c:	95 70       	andi	r25, 0x05	; 5
    585e:	d9 f3       	breq	.-10     	; 0x5856 <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    5860:	82 fd       	sbrc	r24, 2
    5862:	10 c0       	rjmp	.+32     	; 0x5884 <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    5864:	82 2f       	mov	r24, r18
    5866:	21 32       	cpi	r18, 0x21	; 33
    5868:	08 f0       	brcs	.+2      	; 0x586c <__vector_11+0xc4>
    586a:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    586c:	98 2f       	mov	r25, r24
    586e:	91 11       	cpse	r25, r1
    5870:	24 c0       	rjmp	.+72     	; 0x58ba <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    5872:	92 2f       	mov	r25, r18
    5874:	98 1b       	sub	r25, r24
    5876:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5878:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    587c:	91 11       	cpse	r25, r1
    587e:	1b c0       	rjmp	.+54     	; 0x58b6 <__vector_11+0x10e>
    5880:	20 32       	cpi	r18, 0x20	; 32
    5882:	c8 f4       	brcc	.+50     	; 0x58b6 <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    5884:	ff 91       	pop	r31
    5886:	ef 91       	pop	r30
    5888:	df 91       	pop	r29
    588a:	cf 91       	pop	r28
    588c:	bf 91       	pop	r27
    588e:	af 91       	pop	r26
    5890:	9f 91       	pop	r25
    5892:	8f 91       	pop	r24
    5894:	7f 91       	pop	r23
    5896:	6f 91       	pop	r22
    5898:	5f 91       	pop	r21
    589a:	4f 91       	pop	r20
    589c:	3f 91       	pop	r19
    589e:	2f 91       	pop	r18
    58a0:	1f 91       	pop	r17
    58a2:	0f 91       	pop	r16
    58a4:	ff 90       	pop	r15
    58a6:	ef 90       	pop	r14
    58a8:	0f 90       	pop	r0
    58aa:	0b be       	out	0x3b, r0	; 59
    58ac:	0f 90       	pop	r0
    58ae:	0f be       	out	0x3f, r0	; 63
    58b0:	0f 90       	pop	r0
    58b2:	1f 90       	pop	r1
    58b4:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    58b6:	28 2f       	mov	r18, r24
    58b8:	ce cf       	rjmp	.-100    	; 0x5856 <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    58ba:	fa 01       	movw	r30, r20
    58bc:	45 91       	lpm	r20, Z+
    58be:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    58c2:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    58c4:	91 50       	subi	r25, 0x01	; 1
    58c6:	d3 cf       	rjmp	.-90     	; 0x586e <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    58c8:	c5 30       	cpi	r28, 0x05	; 5
    58ca:	49 f4       	brne	.+18     	; 0x58de <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    58cc:	8e ef       	ldi	r24, 0xFE	; 254
    58ce:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    58d2:	c6 de       	rcall	.-628    	; 0x5660 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    58d4:	8e 2d       	mov	r24, r14
    58d6:	80 68       	ori	r24, 0x80	; 128
    58d8:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    58dc:	d3 cf       	rjmp	.-90     	; 0x5884 <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    58de:	c9 30       	cpi	r28, 0x09	; 9
    58e0:	21 f5       	brne	.+72     	; 0x592a <__vector_11+0x182>
    58e2:	d1 11       	cpse	r29, r1
    58e4:	a0 cf       	rjmp	.-192    	; 0x5826 <__vector_11+0x7e>
			usb_configuration = wValue;
    58e6:	e0 92 1d 0f 	sts	0x0F1D, r14	; 0x800f1d <usb_configuration>
			cdc_line_rtsdtr = 0;
    58ea:	10 92 1b 0f 	sts	0x0F1B, r1	; 0x800f1b <__bss_end>
			transmit_flush_timer = 0;
    58ee:	10 92 99 0e 	sts	0x0E99, r1	; 0x800e99 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    58f2:	8e ef       	ldi	r24, 0xFE	; 254
    58f4:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    58f8:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    58fa:	e7 e5       	ldi	r30, 0x57	; 87
    58fc:	f7 e0       	ldi	r31, 0x07	; 7
			for (i=1; i<5; i++) {
				UENUM = i;
    58fe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    5902:	95 91       	lpm	r25, Z+
				UECONX = en;
    5904:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    5908:	99 23       	and	r25, r25
    590a:	31 f0       	breq	.+12     	; 0x5918 <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    590c:	95 91       	lpm	r25, Z+
    590e:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    5912:	95 91       	lpm	r25, Z+
    5914:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    5918:	8f 5f       	subi	r24, 0xFF	; 255
    591a:	85 30       	cpi	r24, 0x05	; 5
    591c:	81 f7       	brne	.-32     	; 0x58fe <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    591e:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    5920:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    5924:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    5928:	ad cf       	rjmp	.-166    	; 0x5884 <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    592a:	c8 30       	cpi	r28, 0x08	; 8
    592c:	61 f4       	brne	.+24     	; 0x5946 <__vector_11+0x19e>
    592e:	d0 38       	cpi	r29, 0x80	; 128
    5930:	09 f0       	breq	.+2      	; 0x5934 <__vector_11+0x18c>
			usb_wait_in_ready();
    5932:	79 cf       	rjmp	.-270    	; 0x5826 <__vector_11+0x7e>
    5934:	95 de       	rcall	.-726    	; 0x5660 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    5936:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <usb_configuration>
    593a:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    593e:	8e ef       	ldi	r24, 0xFE	; 254
    5940:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5944:	9f cf       	rjmp	.-194    	; 0x5884 <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    5946:	c1 32       	cpi	r28, 0x21	; 33
    5948:	79 f4       	brne	.+30     	; 0x5968 <__vector_11+0x1c0>
    594a:	d1 3a       	cpi	r29, 0xA1	; 161
    594c:	09 f0       	breq	.+2      	; 0x5950 <__vector_11+0x1a8>
			usb_wait_in_ready();
    594e:	6b cf       	rjmp	.-298    	; 0x5826 <__vector_11+0x7e>
    5950:	87 de       	rcall	.-754    	; 0x5660 <usb_wait_in_ready>
			p = cdc_line_coding;
    5952:	e1 e1       	ldi	r30, 0x11	; 17
    5954:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    5956:	80 81       	ld	r24, Z
    5958:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    595c:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    595e:	81 e0       	ldi	r24, 0x01	; 1
    5960:	e8 31       	cpi	r30, 0x18	; 24
    5962:	f8 07       	cpc	r31, r24
    5964:	c1 f7       	brne	.-16     	; 0x5956 <__vector_11+0x1ae>
    5966:	eb cf       	rjmp	.-42     	; 0x593e <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    5968:	c0 32       	cpi	r28, 0x20	; 32
    596a:	09 f0       	breq	.+2      	; 0x596e <__vector_11+0x1c6>
    596c:	47 c0       	rjmp	.+142    	; 0x59fc <__vector_11+0x254>
    596e:	d1 32       	cpi	r29, 0x21	; 33
    5970:	09 f0       	breq	.+2      	; 0x5974 <__vector_11+0x1cc>
    5972:	59 cf       	rjmp	.-334    	; 0x5826 <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    5974:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5978:	82 ff       	sbrs	r24, 2
    597a:	fc cf       	rjmp	.-8      	; 0x5974 <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    597c:	e1 e1       	ldi	r30, 0x11	; 17
    597e:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    5980:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5984:	80 83       	st	Z, r24
    5986:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    5988:	91 e0       	ldi	r25, 0x01	; 1
    598a:	e8 31       	cpi	r30, 0x18	; 24
    598c:	f9 07       	cpc	r31, r25
    598e:	c1 f7       	brne	.-16     	; 0x5980 <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    5990:	8b ef       	ldi	r24, 0xFB	; 251
    5992:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5996:	8e ef       	ldi	r24, 0xFE	; 254
    5998:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    599c:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    59a0:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    59a4:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    59a8:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	b0 e0       	ldi	r27, 0x00	; 0
    59b0:	a0 e0       	ldi	r26, 0x00	; 0
    59b2:	dc 01       	movw	r26, r24
    59b4:	99 27       	eor	r25, r25
    59b6:	88 27       	eor	r24, r24
    59b8:	94 2b       	or	r25, r20
    59ba:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    59bc:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    59be:	86 38       	cpi	r24, 0x86	; 134
    59c0:	91 05       	cpc	r25, r1
    59c2:	a1 05       	cpc	r26, r1
    59c4:	b1 05       	cpc	r27, r1
    59c6:	21 f4       	brne	.+8      	; 0x59d0 <__vector_11+0x228>
    59c8:	8f e0       	ldi	r24, 0x0F	; 15
    59ca:	80 93 98 0e 	sts	0x0E98, r24	; 0x800e98 <reboot_timer>
    59ce:	5a cf       	rjmp	.-332    	; 0x5884 <__vector_11+0xdc>
			if (baud == 150UL) {
    59d0:	86 39       	cpi	r24, 0x96	; 150
    59d2:	91 05       	cpc	r25, r1
    59d4:	a1 05       	cpc	r26, r1
    59d6:	b1 05       	cpc	r27, r1
    59d8:	09 f0       	breq	.+2      	; 0x59dc <__vector_11+0x234>
    59da:	54 cf       	rjmp	.-344    	; 0x5884 <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    59dc:	84 e0       	ldi	r24, 0x04	; 4
    59de:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    59e2:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    59e4:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    59e8:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    59ea:	09 f4       	brne	.+2      	; 0x59ee <__vector_11+0x246>
    59ec:	b6 dd       	rcall	.-1172   	; 0x555a <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    59ee:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    59f2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    59f6:	82 fd       	sbrc	r24, 2
    59f8:	fc cf       	rjmp	.-8      	; 0x59f2 <__vector_11+0x24a>
    59fa:	f4 cf       	rjmp	.-24     	; 0x59e4 <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    59fc:	c2 32       	cpi	r28, 0x22	; 34
    59fe:	39 f4       	brne	.+14     	; 0x5a0e <__vector_11+0x266>
    5a00:	d1 32       	cpi	r29, 0x21	; 33
    5a02:	09 f0       	breq	.+2      	; 0x5a06 <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    5a04:	10 cf       	rjmp	.-480    	; 0x5826 <__vector_11+0x7e>
    5a06:	e0 92 1b 0f 	sts	0x0F1B, r14	; 0x800f1b <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    5a0a:	2a de       	rcall	.-940    	; 0x5660 <usb_wait_in_ready>
    5a0c:	98 cf       	rjmp	.-208    	; 0x593e <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    5a0e:	c3 32       	cpi	r28, 0x23	; 35
    5a10:	21 f4       	brne	.+8      	; 0x5a1a <__vector_11+0x272>
    5a12:	d1 32       	cpi	r29, 0x21	; 33
    5a14:	09 f0       	breq	.+2      	; 0x5a18 <__vector_11+0x270>
    5a16:	07 cf       	rjmp	.-498    	; 0x5826 <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    5a18:	f8 cf       	rjmp	.-16     	; 0x5a0a <__vector_11+0x262>
    5a1a:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    5a1c:	11 c0       	rjmp	.+34     	; 0x5a40 <__vector_11+0x298>
    5a1e:	20 de       	rcall	.-960    	; 0x5660 <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    5a20:	d2 38       	cpi	r29, 0x82	; 130
    5a22:	49 f4       	brne	.+18     	; 0x5a36 <__vector_11+0x28e>
				UENUM = wIndex;
    5a24:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    5a28:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    5a2c:	c5 fb       	bst	r28, 5
    5a2e:	cc 27       	eor	r28, r28
    5a30:	c0 f9       	bld	r28, 0
				UENUM = 0;
    5a32:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    5a36:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    5a3a:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    5a3e:	7f cf       	rjmp	.-258    	; 0x593e <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    5a40:	8c 2f       	mov	r24, r28
    5a42:	8d 7f       	andi	r24, 0xFD	; 253
    5a44:	81 30       	cpi	r24, 0x01	; 1
    5a46:	09 f0       	breq	.+2      	; 0x5a4a <__vector_11+0x2a2>
    5a48:	ee ce       	rjmp	.-548    	; 0x5826 <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    5a4a:	d2 30       	cpi	r29, 0x02	; 2
    5a4c:	09 f0       	breq	.+2      	; 0x5a50 <__vector_11+0x2a8>
    5a4e:	eb ce       	rjmp	.-554    	; 0x5826 <__vector_11+0x7e>
    5a50:	ef 28       	or	r14, r15
    5a52:	09 f0       	breq	.+2      	; 0x5a56 <__vector_11+0x2ae>
    5a54:	e8 ce       	rjmp	.-560    	; 0x5826 <__vector_11+0x7e>
			i = wIndex & 0x7F;
    5a56:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    5a58:	8f ef       	ldi	r24, 0xFF	; 255
    5a5a:	80 0f       	add	r24, r16
    5a5c:	86 30       	cpi	r24, 0x06	; 6
    5a5e:	08 f0       	brcs	.+2      	; 0x5a62 <__vector_11+0x2ba>
    5a60:	e2 ce       	rjmp	.-572    	; 0x5826 <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    5a62:	8e ef       	ldi	r24, 0xFE	; 254
    5a64:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    5a68:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    5a6c:	c3 30       	cpi	r28, 0x03	; 3
    5a6e:	09 f4       	brne	.+2      	; 0x5a72 <__vector_11+0x2ca>
    5a70:	da ce       	rjmp	.-588    	; 0x5826 <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    5a72:	89 e1       	ldi	r24, 0x19	; 25
    5a74:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    5a78:	81 e0       	ldi	r24, 0x01	; 1
    5a7a:	90 e0       	ldi	r25, 0x00	; 0
    5a7c:	01 c0       	rjmp	.+2      	; 0x5a80 <__vector_11+0x2d8>
    5a7e:	88 0f       	add	r24, r24
    5a80:	0a 95       	dec	r16
    5a82:	ea f7       	brpl	.-6      	; 0x5a7e <__vector_11+0x2d6>
    5a84:	4d cf       	rjmp	.-358    	; 0x5920 <__vector_11+0x178>

00005a86 <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    5a86:	50 91 ce 0e 	lds	r21, 0x0ECE	; 0x800ece <rx_buffer_head>
    5a8a:	40 91 cd 0e 	lds	r20, 0x0ECD	; 0x800ecd <rx_buffer_tail>
    5a8e:	85 2f       	mov	r24, r21
    5a90:	90 e0       	ldi	r25, 0x00	; 0
    5a92:	24 2f       	mov	r18, r20
    5a94:	30 e0       	ldi	r19, 0x00	; 0
    5a96:	54 17       	cp	r21, r20
    5a98:	18 f0       	brcs	.+6      	; 0x5aa0 <HardwareSerial::available()+0x1a>
    5a9a:	82 1b       	sub	r24, r18
    5a9c:	93 0b       	sbc	r25, r19
    5a9e:	08 95       	ret
    5aa0:	80 5c       	subi	r24, 0xC0	; 192
    5aa2:	9f 4f       	sbci	r25, 0xFF	; 255
    5aa4:	fa cf       	rjmp	.-12     	; 0x5a9a <HardwareSerial::available()+0x14>

00005aa6 <HardwareSerial::availableForWrite()>:
    5aa6:	50 91 ce 0e 	lds	r21, 0x0ECE	; 0x800ece <rx_buffer_head>
    5aaa:	40 91 cd 0e 	lds	r20, 0x0ECD	; 0x800ecd <rx_buffer_tail>
    5aae:	25 2f       	mov	r18, r21
    5ab0:	30 e0       	ldi	r19, 0x00	; 0
    5ab2:	84 2f       	mov	r24, r20
    5ab4:	90 e0       	ldi	r25, 0x00	; 0
    5ab6:	82 1b       	sub	r24, r18
    5ab8:	93 0b       	sbc	r25, r19
    5aba:	54 17       	cp	r21, r20
    5abc:	10 f0       	brcs	.+4      	; 0x5ac2 <HardwareSerial::availableForWrite()+0x1c>
    5abe:	87 96       	adiw	r24, 0x27	; 39
    5ac0:	08 95       	ret
    5ac2:	01 97       	sbiw	r24, 0x01	; 1
    5ac4:	08 95       	ret

00005ac6 <HardwareSerial::peek()>:
    5ac6:	80 91 ce 0e 	lds	r24, 0x0ECE	; 0x800ece <rx_buffer_head>
    5aca:	e0 91 cd 0e 	lds	r30, 0x0ECD	; 0x800ecd <rx_buffer_tail>
    5ace:	8e 17       	cp	r24, r30
    5ad0:	51 f0       	breq	.+20     	; 0x5ae6 <HardwareSerial::peek()+0x20>
    5ad2:	ef 5f       	subi	r30, 0xFF	; 255
    5ad4:	e0 34       	cpi	r30, 0x40	; 64
    5ad6:	08 f0       	brcs	.+2      	; 0x5ada <HardwareSerial::peek()+0x14>
    5ad8:	e0 e0       	ldi	r30, 0x00	; 0
    5ada:	f0 e0       	ldi	r31, 0x00	; 0
    5adc:	e1 53       	subi	r30, 0x31	; 49
    5ade:	f1 4f       	sbci	r31, 0xF1	; 241
    5ae0:	80 81       	ld	r24, Z
    5ae2:	90 e0       	ldi	r25, 0x00	; 0
    5ae4:	08 95       	ret
    5ae6:	8f ef       	ldi	r24, 0xFF	; 255
    5ae8:	9f ef       	ldi	r25, 0xFF	; 255
    5aea:	08 95       	ret

00005aec <HardwareSerial::read()>:
    5aec:	90 91 ce 0e 	lds	r25, 0x0ECE	; 0x800ece <rx_buffer_head>
    5af0:	80 91 cd 0e 	lds	r24, 0x0ECD	; 0x800ecd <rx_buffer_tail>
    5af4:	98 17       	cp	r25, r24
    5af6:	79 f0       	breq	.+30     	; 0x5b16 <HardwareSerial::read()+0x2a>
    5af8:	90 91 cd 0e 	lds	r25, 0x0ECD	; 0x800ecd <rx_buffer_tail>
    5afc:	9f 5f       	subi	r25, 0xFF	; 255
    5afe:	90 34       	cpi	r25, 0x40	; 64
    5b00:	08 f0       	brcs	.+2      	; 0x5b04 <HardwareSerial::read()+0x18>
    5b02:	90 e0       	ldi	r25, 0x00	; 0
    5b04:	e9 2f       	mov	r30, r25
    5b06:	f0 e0       	ldi	r31, 0x00	; 0
    5b08:	e1 53       	subi	r30, 0x31	; 49
    5b0a:	f1 4f       	sbci	r31, 0xF1	; 241
    5b0c:	80 81       	ld	r24, Z
    5b0e:	90 93 cd 0e 	sts	0x0ECD, r25	; 0x800ecd <rx_buffer_tail>
    5b12:	90 e0       	ldi	r25, 0x00	; 0
    5b14:	08 95       	ret
    5b16:	8f ef       	ldi	r24, 0xFF	; 255
    5b18:	9f ef       	ldi	r25, 0xFF	; 255
    5b1a:	08 95       	ret

00005b1c <HardwareSerial::flush()>:
    5b1c:	80 91 a2 0e 	lds	r24, 0x0EA2	; 0x800ea2 <transmitting>
    5b20:	81 11       	cpse	r24, r1
    5b22:	fc cf       	rjmp	.-8      	; 0x5b1c <HardwareSerial::flush()>
    5b24:	08 95       	ret

00005b26 <HardwareSerial::write(unsigned char)>:
    5b26:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5b2a:	23 fd       	sbrc	r18, 3
    5b2c:	06 c0       	rjmp	.+12     	; 0x5b3a <HardwareSerial::write(unsigned char)+0x14>
    5b2e:	21 e0       	ldi	r18, 0x01	; 1
    5b30:	fc 01       	movw	r30, r24
    5b32:	22 83       	std	Z+2, r18	; 0x02
    5b34:	90 e0       	ldi	r25, 0x00	; 0
    5b36:	80 e0       	ldi	r24, 0x00	; 0
    5b38:	08 95       	ret
    5b3a:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    5b3e:	8f 3f       	cpi	r24, 0xFF	; 255
    5b40:	41 f0       	breq	.+16     	; 0x5b52 <HardwareSerial::write(unsigned char)+0x2c>
    5b42:	80 91 a2 0e 	lds	r24, 0x0EA2	; 0x800ea2 <transmitting>
    5b46:	81 11       	cpse	r24, r1
    5b48:	04 c0       	rjmp	.+8      	; 0x5b52 <HardwareSerial::write(unsigned char)+0x2c>
    5b4a:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    5b4e:	f0 e0       	ldi	r31, 0x00	; 0
    5b50:	ee db       	rcall	.-2084   	; 0x532e <_digitalWrite_HIGH>
    5b52:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <tx_buffer_head>
    5b56:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <tx_buffer_tail>
    5b5a:	98 13       	cpse	r25, r24
    5b5c:	04 c0       	rjmp	.+8      	; 0x5b66 <HardwareSerial::write(unsigned char)+0x40>
    5b5e:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5b62:	85 fd       	sbrc	r24, 5
    5b64:	19 c0       	rjmp	.+50     	; 0x5b98 <HardwareSerial::write(unsigned char)+0x72>
    5b66:	80 91 a4 0e 	lds	r24, 0x0EA4	; 0x800ea4 <tx_buffer_head>
    5b6a:	8f 5f       	subi	r24, 0xFF	; 255
    5b6c:	88 32       	cpi	r24, 0x28	; 40
    5b6e:	f8 f4       	brcc	.+62     	; 0x5bae <HardwareSerial::write(unsigned char)+0x88>
    5b70:	90 91 a3 0e 	lds	r25, 0x0EA3	; 0x800ea3 <tx_buffer_tail>
    5b74:	98 17       	cp	r25, r24
    5b76:	e1 f3       	breq	.-8      	; 0x5b70 <HardwareSerial::write(unsigned char)+0x4a>
    5b78:	e8 2f       	mov	r30, r24
    5b7a:	f0 e0       	ldi	r31, 0x00	; 0
    5b7c:	eb 55       	subi	r30, 0x5B	; 91
    5b7e:	f1 4f       	sbci	r31, 0xF1	; 241
    5b80:	60 83       	st	Z, r22
    5b82:	91 e0       	ldi	r25, 0x01	; 1
    5b84:	90 93 a2 0e 	sts	0x0EA2, r25	; 0x800ea2 <transmitting>
    5b88:	80 93 a4 0e 	sts	0x0EA4, r24	; 0x800ea4 <tx_buffer_head>
    5b8c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5b90:	80 62       	ori	r24, 0x20	; 32
    5b92:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5b96:	08 c0       	rjmp	.+16     	; 0x5ba8 <HardwareSerial::write(unsigned char)+0x82>
    5b98:	8f b7       	in	r24, 0x3f	; 63
    5b9a:	f8 94       	cli
    5b9c:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    5ba0:	91 e0       	ldi	r25, 0x01	; 1
    5ba2:	90 93 a2 0e 	sts	0x0EA2, r25	; 0x800ea2 <transmitting>
    5ba6:	8f bf       	out	0x3f, r24	; 63
    5ba8:	81 e0       	ldi	r24, 0x01	; 1
    5baa:	90 e0       	ldi	r25, 0x00	; 0
    5bac:	08 95       	ret
    5bae:	80 e0       	ldi	r24, 0x00	; 0
    5bb0:	df cf       	rjmp	.-66     	; 0x5b70 <HardwareSerial::write(unsigned char)+0x4a>

00005bb2 <HardwareSerial::_begin(unsigned int, unsigned char)>:
    5bb2:	1f 93       	push	r17
    5bb4:	cf 93       	push	r28
    5bb6:	df 93       	push	r29
    5bb8:	eb 01       	movw	r28, r22
    5bba:	14 2f       	mov	r17, r20
    5bbc:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    5bc0:	4f 3f       	cpi	r20, 0xFF	; 255
    5bc2:	29 f0       	breq	.+10     	; 0x5bce <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    5bc4:	84 2f       	mov	r24, r20
    5bc6:	a2 db       	rcall	.-2236   	; 0x530c <_pinMode_output>
    5bc8:	e1 2f       	mov	r30, r17
    5bca:	f0 e0       	ldi	r31, 0x00	; 0
    5bcc:	b6 db       	rcall	.-2196   	; 0x533a <_digitalWrite_LOW>
    5bce:	c0 ff       	sbrs	r28, 0
    5bd0:	24 c0       	rjmp	.+72     	; 0x5c1a <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    5bd2:	c1 30       	cpi	r28, 0x01	; 1
    5bd4:	80 e1       	ldi	r24, 0x10	; 16
    5bd6:	d8 07       	cpc	r29, r24
    5bd8:	00 f5       	brcc	.+64     	; 0x5c1a <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    5bda:	82 e0       	ldi	r24, 0x02	; 2
    5bdc:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5be0:	21 97       	sbiw	r28, 0x01	; 1
    5be2:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    5be6:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    5bea:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5bee:	83 fd       	sbrc	r24, 3
    5bf0:	10 c0       	rjmp	.+32     	; 0x5c12 <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    5bf2:	10 92 ce 0e 	sts	0x0ECE, r1	; 0x800ece <rx_buffer_head>
    5bf6:	10 92 cd 0e 	sts	0x0ECD, r1	; 0x800ecd <rx_buffer_tail>
    5bfa:	10 92 a4 0e 	sts	0x0EA4, r1	; 0x800ea4 <tx_buffer_head>
    5bfe:	10 92 a3 0e 	sts	0x0EA3, r1	; 0x800ea3 <tx_buffer_tail>
    5c02:	10 92 a2 0e 	sts	0x0EA2, r1	; 0x800ea2 <transmitting>
    5c06:	86 e0       	ldi	r24, 0x06	; 6
    5c08:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    5c0c:	88 ed       	ldi	r24, 0xD8	; 216
    5c0e:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5c12:	df 91       	pop	r29
    5c14:	cf 91       	pop	r28
    5c16:	1f 91       	pop	r17
    5c18:	08 95       	ret
    5c1a:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    5c1e:	d6 95       	lsr	r29
    5c20:	c7 95       	ror	r28
    5c22:	de cf       	rjmp	.-68     	; 0x5be0 <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

00005c24 <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    5c24:	1f 92       	push	r1
    5c26:	0f 92       	push	r0
    5c28:	0f b6       	in	r0, 0x3f	; 63
    5c2a:	0f 92       	push	r0
    5c2c:	11 24       	eor	r1, r1
    5c2e:	0b b6       	in	r0, 0x3b	; 59
    5c30:	0f 92       	push	r0
    5c32:	2f 93       	push	r18
    5c34:	8f 93       	push	r24
    5c36:	9f 93       	push	r25
    5c38:	ef 93       	push	r30
    5c3a:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    5c3c:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    5c40:	80 91 ce 0e 	lds	r24, 0x0ECE	; 0x800ece <rx_buffer_head>
    5c44:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    5c46:	80 34       	cpi	r24, 0x40	; 64
    5c48:	08 f0       	brcs	.+2      	; 0x5c4c <__vector_25+0x28>
    5c4a:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    5c4c:	20 91 cd 0e 	lds	r18, 0x0ECD	; 0x800ecd <rx_buffer_tail>
    5c50:	28 17       	cp	r18, r24
    5c52:	39 f0       	breq	.+14     	; 0x5c62 <__vector_25+0x3e>
		rx_buffer[i] = c;
    5c54:	e8 2f       	mov	r30, r24
    5c56:	f0 e0       	ldi	r31, 0x00	; 0
    5c58:	e1 53       	subi	r30, 0x31	; 49
    5c5a:	f1 4f       	sbci	r31, 0xF1	; 241
    5c5c:	90 83       	st	Z, r25
		rx_buffer_head = i;
    5c5e:	80 93 ce 0e 	sts	0x0ECE, r24	; 0x800ece <rx_buffer_head>
	}
}
    5c62:	ff 91       	pop	r31
    5c64:	ef 91       	pop	r30
    5c66:	9f 91       	pop	r25
    5c68:	8f 91       	pop	r24
    5c6a:	2f 91       	pop	r18
    5c6c:	0f 90       	pop	r0
    5c6e:	0b be       	out	0x3b, r0	; 59
    5c70:	0f 90       	pop	r0
    5c72:	0f be       	out	0x3f, r0	; 63
    5c74:	0f 90       	pop	r0
    5c76:	1f 90       	pop	r1
    5c78:	18 95       	reti

00005c7a <__vector_26>:

ISR(USART1_UDRE_vect)
{
    5c7a:	1f 92       	push	r1
    5c7c:	0f 92       	push	r0
    5c7e:	0f b6       	in	r0, 0x3f	; 63
    5c80:	0f 92       	push	r0
    5c82:	11 24       	eor	r1, r1
    5c84:	0b b6       	in	r0, 0x3b	; 59
    5c86:	0f 92       	push	r0
    5c88:	8f 93       	push	r24
    5c8a:	9f 93       	push	r25
    5c8c:	ef 93       	push	r30
    5c8e:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    5c90:	90 91 a4 0e 	lds	r25, 0x0EA4	; 0x800ea4 <tx_buffer_head>
    5c94:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <tx_buffer_tail>
    5c98:	98 13       	cpse	r25, r24
    5c9a:	10 c0       	rjmp	.+32     	; 0x5cbc <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    5c9c:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    5ca0:	8f 7d       	andi	r24, 0xDF	; 223
    5ca2:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    5ca6:	ff 91       	pop	r31
    5ca8:	ef 91       	pop	r30
    5caa:	9f 91       	pop	r25
    5cac:	8f 91       	pop	r24
    5cae:	0f 90       	pop	r0
    5cb0:	0b be       	out	0x3b, r0	; 59
    5cb2:	0f 90       	pop	r0
    5cb4:	0f be       	out	0x3f, r0	; 63
    5cb6:	0f 90       	pop	r0
    5cb8:	1f 90       	pop	r1
    5cba:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    5cbc:	80 91 a3 0e 	lds	r24, 0x0EA3	; 0x800ea3 <tx_buffer_tail>
    5cc0:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    5cc2:	88 32       	cpi	r24, 0x28	; 40
    5cc4:	08 f0       	brcs	.+2      	; 0x5cc8 <__vector_26+0x4e>
    5cc6:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    5cc8:	e8 2f       	mov	r30, r24
    5cca:	f0 e0       	ldi	r31, 0x00	; 0
    5ccc:	eb 55       	subi	r30, 0x5B	; 91
    5cce:	f1 4f       	sbci	r31, 0xF1	; 241
    5cd0:	90 81       	ld	r25, Z
    5cd2:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    5cd6:	80 93 a3 0e 	sts	0x0EA3, r24	; 0x800ea3 <tx_buffer_tail>
	}
}
    5cda:	e5 cf       	rjmp	.-54     	; 0x5ca6 <__vector_26+0x2c>

00005cdc <__vector_27>:

ISR(USART1_TX_vect)
{
    5cdc:	1f 92       	push	r1
    5cde:	0f 92       	push	r0
    5ce0:	0f b6       	in	r0, 0x3f	; 63
    5ce2:	0f 92       	push	r0
    5ce4:	11 24       	eor	r1, r1
    5ce6:	0b b6       	in	r0, 0x3b	; 59
    5ce8:	0f 92       	push	r0
    5cea:	8f 93       	push	r24
    5cec:	ef 93       	push	r30
    5cee:	ff 93       	push	r31
	transmitting = 0;
    5cf0:	10 92 a2 0e 	sts	0x0EA2, r1	; 0x800ea2 <transmitting>
	if (tx_enable_pin < 255) {
    5cf4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    5cf8:	8f 3f       	cpi	r24, 0xFF	; 255
    5cfa:	21 f0       	breq	.+8      	; 0x5d04 <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    5cfc:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    5d00:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    5d02:	1b db       	rcall	.-2506   	; 0x533a <_digitalWrite_LOW>
	}
}
    5d04:	ff 91       	pop	r31
    5d06:	ef 91       	pop	r30
    5d08:	8f 91       	pop	r24
    5d0a:	0f 90       	pop	r0
    5d0c:	0b be       	out	0x3b, r0	; 59
    5d0e:	0f 90       	pop	r0
    5d10:	0f be       	out	0x3f, r0	; 63
    5d12:	0f 90       	pop	r0
    5d14:	1f 90       	pop	r1
    5d16:	18 95       	reti

00005d18 <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    5d18:	ea e9       	ldi	r30, 0x9A	; 154
    5d1a:	fe e0       	ldi	r31, 0x0E	; 14
    5d1c:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    5d1e:	88 ee       	ldi	r24, 0xE8	; 232
    5d20:	93 e0       	ldi	r25, 0x03	; 3
    5d22:	a0 e0       	ldi	r26, 0x00	; 0
    5d24:	b0 e0       	ldi	r27, 0x00	; 0
    5d26:	83 83       	std	Z+3, r24	; 0x03
    5d28:	94 83       	std	Z+4, r25	; 0x04
    5d2a:	a5 83       	std	Z+5, r26	; 0x05
    5d2c:	b6 83       	std	Z+6, r27	; 0x06
    5d2e:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    5d30:	8a e7       	ldi	r24, 0x7A	; 122
    5d32:	97 e0       	ldi	r25, 0x07	; 7
    5d34:	91 83       	std	Z+1, r25	; 0x01
    5d36:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    5d38:	08 95       	ret

00005d3a <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    5d3a:	9a da       	rcall	.-2764   	; 0x5270 <_init_Teensyduino_internal_>

	setup();
    5d3c:	0e 94 99 0f 	call	0x1f32	; 0x1f32 <setup>
    
	while (1) {
		loop();
    5d40:	0e 94 f4 18 	call	0x31e8	; 0x31e8 <loop>
    5d44:	fd cf       	rjmp	.-6      	; 0x5d40 <main+0x6>

00005d46 <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    5d46:	73 c8       	rjmp	.-3866   	; 0x4e2e <malloc>

00005d48 <__cxa_guard_acquire>:
    5d48:	fc 01       	movw	r30, r24
    5d4a:	81 e0       	ldi	r24, 0x01	; 1
    5d4c:	90 e0       	ldi	r25, 0x00	; 0
    5d4e:	20 81       	ld	r18, Z
    5d50:	22 23       	and	r18, r18
    5d52:	11 f0       	breq	.+4      	; 0x5d58 <__cxa_guard_acquire+0x10>
    5d54:	90 e0       	ldi	r25, 0x00	; 0
    5d56:	80 e0       	ldi	r24, 0x00	; 0
    5d58:	08 95       	ret

00005d5a <__cxa_guard_release>:
    5d5a:	21 e0       	ldi	r18, 0x01	; 1
    5d5c:	fc 01       	movw	r30, r24
    5d5e:	20 83       	st	Z, r18
    5d60:	08 95       	ret

00005d62 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    5d62:	08 95       	ret

00005d64 <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    5d64:	cf 92       	push	r12
    5d66:	df 92       	push	r13
    5d68:	ef 92       	push	r14
    5d6a:	ff 92       	push	r15
    5d6c:	0f 93       	push	r16
    5d6e:	1f 93       	push	r17
    5d70:	cf 93       	push	r28
    5d72:	df 93       	push	r29
    5d74:	6c 01       	movw	r12, r24
    5d76:	eb 01       	movw	r28, r22
    5d78:	7b 01       	movw	r14, r22
    5d7a:	e4 0e       	add	r14, r20
    5d7c:	f5 1e       	adc	r15, r21
    5d7e:	10 e0       	ldi	r17, 0x00	; 0
    5d80:	00 e0       	ldi	r16, 0x00	; 0
    5d82:	ce 15       	cp	r28, r14
    5d84:	df 05       	cpc	r29, r15
    5d86:	61 f0       	breq	.+24     	; 0x5da0 <Print::write(unsigned char const*, unsigned int)+0x3c>
    5d88:	69 91       	ld	r22, Y+
    5d8a:	d6 01       	movw	r26, r12
    5d8c:	ed 91       	ld	r30, X+
    5d8e:	fc 91       	ld	r31, X
    5d90:	01 90       	ld	r0, Z+
    5d92:	f0 81       	ld	r31, Z
    5d94:	e0 2d       	mov	r30, r0
    5d96:	c6 01       	movw	r24, r12
    5d98:	09 95       	icall
    5d9a:	08 0f       	add	r16, r24
    5d9c:	19 1f       	adc	r17, r25
    5d9e:	f1 cf       	rjmp	.-30     	; 0x5d82 <Print::write(unsigned char const*, unsigned int)+0x1e>
    5da0:	c8 01       	movw	r24, r16
    5da2:	df 91       	pop	r29
    5da4:	cf 91       	pop	r28
    5da6:	1f 91       	pop	r17
    5da8:	0f 91       	pop	r16
    5daa:	ff 90       	pop	r15
    5dac:	ef 90       	pop	r14
    5dae:	df 90       	pop	r13
    5db0:	cf 90       	pop	r12
    5db2:	08 95       	ret

00005db4 <Print::print(String const&)>:
    5db4:	8f 92       	push	r8
    5db6:	9f 92       	push	r9
    5db8:	af 92       	push	r10
    5dba:	bf 92       	push	r11
    5dbc:	cf 92       	push	r12
    5dbe:	df 92       	push	r13
    5dc0:	ef 92       	push	r14
    5dc2:	ff 92       	push	r15
    5dc4:	0f 93       	push	r16
    5dc6:	1f 93       	push	r17
    5dc8:	cf 93       	push	r28
    5dca:	df 93       	push	r29
    5dcc:	cd b7       	in	r28, 0x3d	; 61
    5dce:	de b7       	in	r29, 0x3e	; 62
    5dd0:	a1 97       	sbiw	r28, 0x21	; 33
    5dd2:	0f b6       	in	r0, 0x3f	; 63
    5dd4:	f8 94       	cli
    5dd6:	de bf       	out	0x3e, r29	; 62
    5dd8:	0f be       	out	0x3f, r0	; 63
    5dda:	cd bf       	out	0x3d, r28	; 61
    5ddc:	5c 01       	movw	r10, r24
    5dde:	4b 01       	movw	r8, r22
    5de0:	db 01       	movw	r26, r22
    5de2:	14 96       	adiw	r26, 0x04	; 4
    5de4:	0d 91       	ld	r16, X+
    5de6:	1c 91       	ld	r17, X
    5de8:	d1 2c       	mov	r13, r1
    5dea:	c1 2c       	mov	r12, r1
    5dec:	f1 2c       	mov	r15, r1
    5dee:	e1 2c       	mov	r14, r1
    5df0:	01 15       	cp	r16, r1
    5df2:	11 05       	cpc	r17, r1
    5df4:	01 f1       	breq	.+64     	; 0x5e36 <Print::print(String const&)+0x82>
    5df6:	96 01       	movw	r18, r12
    5df8:	41 e2       	ldi	r20, 0x21	; 33
    5dfa:	50 e0       	ldi	r21, 0x00	; 0
    5dfc:	be 01       	movw	r22, r28
    5dfe:	6f 5f       	subi	r22, 0xFF	; 255
    5e00:	7f 4f       	sbci	r23, 0xFF	; 255
    5e02:	c4 01       	movw	r24, r8
    5e04:	5a d3       	rcall	.+1716   	; 0x64ba <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    5e06:	a8 01       	movw	r20, r16
    5e08:	01 32       	cpi	r16, 0x21	; 33
    5e0a:	11 05       	cpc	r17, r1
    5e0c:	10 f0       	brcs	.+4      	; 0x5e12 <Print::print(String const&)+0x5e>
    5e0e:	40 e2       	ldi	r20, 0x20	; 32
    5e10:	50 e0       	ldi	r21, 0x00	; 0
    5e12:	c4 0e       	add	r12, r20
    5e14:	d5 1e       	adc	r13, r21
    5e16:	04 1b       	sub	r16, r20
    5e18:	15 0b       	sbc	r17, r21
    5e1a:	d5 01       	movw	r26, r10
    5e1c:	ed 91       	ld	r30, X+
    5e1e:	fc 91       	ld	r31, X
    5e20:	02 80       	ldd	r0, Z+2	; 0x02
    5e22:	f3 81       	ldd	r31, Z+3	; 0x03
    5e24:	e0 2d       	mov	r30, r0
    5e26:	be 01       	movw	r22, r28
    5e28:	6f 5f       	subi	r22, 0xFF	; 255
    5e2a:	7f 4f       	sbci	r23, 0xFF	; 255
    5e2c:	c5 01       	movw	r24, r10
    5e2e:	09 95       	icall
    5e30:	e8 0e       	add	r14, r24
    5e32:	f9 1e       	adc	r15, r25
    5e34:	dd cf       	rjmp	.-70     	; 0x5df0 <Print::print(String const&)+0x3c>
    5e36:	c7 01       	movw	r24, r14
    5e38:	a1 96       	adiw	r28, 0x21	; 33
    5e3a:	0f b6       	in	r0, 0x3f	; 63
    5e3c:	f8 94       	cli
    5e3e:	de bf       	out	0x3e, r29	; 62
    5e40:	0f be       	out	0x3f, r0	; 63
    5e42:	cd bf       	out	0x3d, r28	; 61
    5e44:	df 91       	pop	r29
    5e46:	cf 91       	pop	r28
    5e48:	1f 91       	pop	r17
    5e4a:	0f 91       	pop	r16
    5e4c:	ff 90       	pop	r15
    5e4e:	ef 90       	pop	r14
    5e50:	df 90       	pop	r13
    5e52:	cf 90       	pop	r12
    5e54:	bf 90       	pop	r11
    5e56:	af 90       	pop	r10
    5e58:	9f 90       	pop	r9
    5e5a:	8f 90       	pop	r8
    5e5c:	08 95       	ret

00005e5e <Print::println()>:
    5e5e:	cf 93       	push	r28
    5e60:	df 93       	push	r29
    5e62:	00 d0       	rcall	.+0      	; 0x5e64 <Print::println()+0x6>
    5e64:	cd b7       	in	r28, 0x3d	; 61
    5e66:	de b7       	in	r29, 0x3e	; 62
    5e68:	2d e0       	ldi	r18, 0x0D	; 13
    5e6a:	29 83       	std	Y+1, r18	; 0x01
    5e6c:	2a e0       	ldi	r18, 0x0A	; 10
    5e6e:	2a 83       	std	Y+2, r18	; 0x02
    5e70:	dc 01       	movw	r26, r24
    5e72:	ed 91       	ld	r30, X+
    5e74:	fc 91       	ld	r31, X
    5e76:	02 80       	ldd	r0, Z+2	; 0x02
    5e78:	f3 81       	ldd	r31, Z+3	; 0x03
    5e7a:	e0 2d       	mov	r30, r0
    5e7c:	42 e0       	ldi	r20, 0x02	; 2
    5e7e:	50 e0       	ldi	r21, 0x00	; 0
    5e80:	be 01       	movw	r22, r28
    5e82:	6f 5f       	subi	r22, 0xFF	; 255
    5e84:	7f 4f       	sbci	r23, 0xFF	; 255
    5e86:	09 95       	icall
    5e88:	0f 90       	pop	r0
    5e8a:	0f 90       	pop	r0
    5e8c:	df 91       	pop	r29
    5e8e:	cf 91       	pop	r28
    5e90:	08 95       	ret

00005e92 <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    5e92:	cf 93       	push	r28
    5e94:	df 93       	push	r29
    5e96:	cd b7       	in	r28, 0x3d	; 61
    5e98:	de b7       	in	r29, 0x3e	; 62
    5e9a:	2b 97       	sbiw	r28, 0x0b	; 11
    5e9c:	0f b6       	in	r0, 0x3f	; 63
    5e9e:	f8 94       	cli
    5ea0:	de bf       	out	0x3e, r29	; 62
    5ea2:	0f be       	out	0x3f, r0	; 63
    5ea4:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    5ea6:	fe 01       	movw	r30, r28
    5ea8:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    5eaa:	a3 e3       	ldi	r26, 0x33	; 51
    5eac:	4a 9f       	mul	r20, r26
    5eae:	44 27       	eor	r20, r20
    5eb0:	0a 0e       	add	r0, r26
    5eb2:	41 1d       	adc	r20, r1
    5eb4:	30 2d       	mov	r19, r0
    5eb6:	5a 9f       	mul	r21, r26
    5eb8:	55 27       	eor	r21, r21
    5eba:	40 0d       	add	r20, r0
    5ebc:	51 1d       	adc	r21, r1
    5ebe:	6a 9f       	mul	r22, r26
    5ec0:	66 27       	eor	r22, r22
    5ec2:	50 0d       	add	r21, r0
    5ec4:	61 1d       	adc	r22, r1
    5ec6:	7a 9f       	mul	r23, r26
    5ec8:	77 27       	eor	r23, r23
    5eca:	60 0d       	add	r22, r0
    5ecc:	71 1d       	adc	r23, r1
    5ece:	11 24       	eor	r1, r1
    5ed0:	34 0f       	add	r19, r20
    5ed2:	45 1f       	adc	r20, r21
    5ed4:	56 1f       	adc	r21, r22
    5ed6:	67 1f       	adc	r22, r23
    5ed8:	71 1d       	adc	r23, r1
    5eda:	35 0f       	add	r19, r21
    5edc:	46 1f       	adc	r20, r22
    5ede:	57 1f       	adc	r21, r23
    5ee0:	61 1d       	adc	r22, r1
    5ee2:	71 1d       	adc	r23, r1
    5ee4:	37 0f       	add	r19, r23
    5ee6:	41 1d       	adc	r20, r1
    5ee8:	51 1d       	adc	r21, r1
    5eea:	61 1d       	adc	r22, r1
    5eec:	71 1d       	adc	r23, r1
    5eee:	76 95       	lsr	r23
    5ef0:	67 95       	ror	r22
    5ef2:	57 95       	ror	r21
    5ef4:	47 95       	ror	r20
    5ef6:	37 95       	ror	r19
    5ef8:	aa e0       	ldi	r26, 0x0A	; 10
    5efa:	3a 9f       	mul	r19, r26
    5efc:	31 2d       	mov	r19, r1
    5efe:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    5f00:	df 01       	movw	r26, r30
    5f02:	30 5d       	subi	r19, 0xD0	; 208
    5f04:	3e 93       	st	-X, r19
	} while (n);
    5f06:	41 15       	cp	r20, r1
    5f08:	51 05       	cpc	r21, r1
    5f0a:	61 05       	cpc	r22, r1
    5f0c:	71 05       	cpc	r23, r1
    5f0e:	09 f5       	brne	.+66     	; 0x5f52 <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    5f10:	22 23       	and	r18, r18
    5f12:	41 f0       	breq	.+16     	; 0x5f24 <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    5f14:	bd 01       	movw	r22, r26
    5f16:	61 50       	subi	r22, 0x01	; 1
    5f18:	71 09       	sbc	r23, r1
    5f1a:	2d e2       	ldi	r18, 0x2D	; 45
    5f1c:	db 01       	movw	r26, r22
    5f1e:	2c 93       	st	X, r18
    5f20:	df 01       	movw	r26, r30
    5f22:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    5f24:	ae 01       	movw	r20, r28
    5f26:	4a 1b       	sub	r20, r26
    5f28:	5b 0b       	sbc	r21, r27
    5f2a:	44 5f       	subi	r20, 0xF4	; 244
    5f2c:	5f 4f       	sbci	r21, 0xFF	; 255
    5f2e:	fc 01       	movw	r30, r24
    5f30:	20 81       	ld	r18, Z
    5f32:	31 81       	ldd	r19, Z+1	; 0x01
    5f34:	f9 01       	movw	r30, r18
    5f36:	22 81       	ldd	r18, Z+2	; 0x02
    5f38:	33 81       	ldd	r19, Z+3	; 0x03
    5f3a:	bd 01       	movw	r22, r26
    5f3c:	f9 01       	movw	r30, r18
    5f3e:	09 95       	icall
}
    5f40:	2b 96       	adiw	r28, 0x0b	; 11
    5f42:	0f b6       	in	r0, 0x3f	; 63
    5f44:	f8 94       	cli
    5f46:	de bf       	out	0x3e, r29	; 62
    5f48:	0f be       	out	0x3f, r0	; 63
    5f4a:	cd bf       	out	0x3d, r28	; 61
    5f4c:	df 91       	pop	r29
    5f4e:	cf 91       	pop	r28
    5f50:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    5f52:	fd 01       	movw	r30, r26
    5f54:	aa cf       	rjmp	.-172    	; 0x5eaa <Print::printNumberDec(unsigned long, unsigned char)+0x18>

00005f56 <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    5f56:	cf 93       	push	r28
    5f58:	df 93       	push	r29
    5f5a:	1f 92       	push	r1
    5f5c:	cd b7       	in	r28, 0x3d	; 61
    5f5e:	de b7       	in	r29, 0x3e	; 62
    5f60:	69 83       	std	Y+1, r22	; 0x01
    5f62:	dc 01       	movw	r26, r24
    5f64:	ed 91       	ld	r30, X+
    5f66:	fc 91       	ld	r31, X
    5f68:	02 80       	ldd	r0, Z+2	; 0x02
    5f6a:	f3 81       	ldd	r31, Z+3	; 0x03
    5f6c:	e0 2d       	mov	r30, r0
    5f6e:	41 e0       	ldi	r20, 0x01	; 1
    5f70:	50 e0       	ldi	r21, 0x00	; 0
    5f72:	be 01       	movw	r22, r28
    5f74:	6f 5f       	subi	r22, 0xFF	; 255
    5f76:	7f 4f       	sbci	r23, 0xFF	; 255
    5f78:	09 95       	icall
    5f7a:	0f 90       	pop	r0
    5f7c:	df 91       	pop	r29
    5f7e:	cf 91       	pop	r28
    5f80:	08 95       	ret

00005f82 <usb_serial_class::available()>:
    5f82:	fc 01       	movw	r30, r24
    5f84:	8f b7       	in	r24, 0x3f	; 63
    5f86:	f8 94       	cli
    5f88:	90 91 1d 0f 	lds	r25, 0x0F1D	; 0x800f1d <usb_configuration>
    5f8c:	91 11       	cpse	r25, r1
    5f8e:	0c c0       	rjmp	.+24     	; 0x5fa8 <usb_serial_class::available()+0x26>
    5f90:	90 e0       	ldi	r25, 0x00	; 0
    5f92:	8f bf       	out	0x3f, r24	; 63
    5f94:	20 85       	ldd	r18, Z+8	; 0x08
    5f96:	31 85       	ldd	r19, Z+9	; 0x09
    5f98:	37 fd       	sbrc	r19, 7
    5f9a:	03 c0       	rjmp	.+6      	; 0x5fa2 <usb_serial_class::available()+0x20>
    5f9c:	9f 3f       	cpi	r25, 0xFF	; 255
    5f9e:	09 f0       	breq	.+2      	; 0x5fa2 <usb_serial_class::available()+0x20>
    5fa0:	9f 5f       	subi	r25, 0xFF	; 255
    5fa2:	89 2f       	mov	r24, r25
    5fa4:	90 e0       	ldi	r25, 0x00	; 0
    5fa6:	08 95       	ret
    5fa8:	93 e0       	ldi	r25, 0x03	; 3
    5faa:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    5fae:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    5fb2:	91 11       	cpse	r25, r1
    5fb4:	ee cf       	rjmp	.-36     	; 0x5f92 <usb_serial_class::available()+0x10>
    5fb6:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5fba:	22 ff       	sbrs	r18, 2
    5fbc:	e9 cf       	rjmp	.-46     	; 0x5f90 <usb_serial_class::available()+0xe>
    5fbe:	25 fd       	sbrc	r18, 5
    5fc0:	e7 cf       	rjmp	.-50     	; 0x5f90 <usb_serial_class::available()+0xe>
    5fc2:	2b e6       	ldi	r18, 0x6B	; 107
    5fc4:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    5fc8:	e4 cf       	rjmp	.-56     	; 0x5f92 <usb_serial_class::available()+0x10>

00005fca <usb_serial_class::peek()>:
    5fca:	cf 93       	push	r28
    5fcc:	df 93       	push	r29
    5fce:	ec 01       	movw	r28, r24
    5fd0:	88 85       	ldd	r24, Y+8	; 0x08
    5fd2:	99 85       	ldd	r25, Y+9	; 0x09
    5fd4:	97 ff       	sbrs	r25, 7
    5fd6:	09 c0       	rjmp	.+18     	; 0x5fea <usb_serial_class::peek()+0x20>
    5fd8:	e8 81       	ld	r30, Y
    5fda:	f9 81       	ldd	r31, Y+1	; 0x01
    5fdc:	02 84       	ldd	r0, Z+10	; 0x0a
    5fde:	f3 85       	ldd	r31, Z+11	; 0x0b
    5fe0:	e0 2d       	mov	r30, r0
    5fe2:	ce 01       	movw	r24, r28
    5fe4:	09 95       	icall
    5fe6:	99 87       	std	Y+9, r25	; 0x09
    5fe8:	88 87       	std	Y+8, r24	; 0x08
    5fea:	88 85       	ldd	r24, Y+8	; 0x08
    5fec:	99 85       	ldd	r25, Y+9	; 0x09
    5fee:	df 91       	pop	r29
    5ff0:	cf 91       	pop	r28
    5ff2:	08 95       	ret

00005ff4 <usb_serial_class::read()>:
    5ff4:	fc 01       	movw	r30, r24
    5ff6:	20 85       	ldd	r18, Z+8	; 0x08
    5ff8:	31 85       	ldd	r19, Z+9	; 0x09
    5ffa:	37 fd       	sbrc	r19, 7
    5ffc:	07 c0       	rjmp	.+14     	; 0x600c <usb_serial_class::read()+0x18>
    5ffe:	4f ef       	ldi	r20, 0xFF	; 255
    6000:	5f ef       	ldi	r21, 0xFF	; 255
    6002:	51 87       	std	Z+9, r21	; 0x09
    6004:	40 87       	std	Z+8, r20	; 0x08
    6006:	c9 01       	movw	r24, r18
    6008:	99 27       	eor	r25, r25
    600a:	08 95       	ret
    600c:	9f b7       	in	r25, 0x3f	; 63
    600e:	f8 94       	cli
    6010:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <usb_configuration>
    6014:	81 11       	cpse	r24, r1
    6016:	04 c0       	rjmp	.+8      	; 0x6020 <usb_serial_class::read()+0x2c>
    6018:	9f bf       	out	0x3f, r25	; 63
    601a:	8f ef       	ldi	r24, 0xFF	; 255
    601c:	9f ef       	ldi	r25, 0xFF	; 255
    601e:	08 95       	ret
    6020:	83 e0       	ldi	r24, 0x03	; 3
    6022:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6026:	2b e6       	ldi	r18, 0x6B	; 107
    6028:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    602c:	85 fd       	sbrc	r24, 5
    602e:	05 c0       	rjmp	.+10     	; 0x603a <usb_serial_class::read()+0x46>
    6030:	82 ff       	sbrs	r24, 2
    6032:	f2 cf       	rjmp	.-28     	; 0x6018 <usb_serial_class::read()+0x24>
    6034:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6038:	f7 cf       	rjmp	.-18     	; 0x6028 <usb_serial_class::read()+0x34>
    603a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    603e:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6042:	25 fd       	sbrc	r18, 5
    6044:	03 c0       	rjmp	.+6      	; 0x604c <usb_serial_class::read()+0x58>
    6046:	2b e6       	ldi	r18, 0x6B	; 107
    6048:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    604c:	9f bf       	out	0x3f, r25	; 63
    604e:	90 e0       	ldi	r25, 0x00	; 0
    6050:	08 95       	ret

00006052 <usb_serial_class::availableForWrite()>:
    6052:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <usb_configuration>
    6056:	88 23       	and	r24, r24
    6058:	61 f0       	breq	.+24     	; 0x6072 <usb_serial_class::availableForWrite()+0x20>
    605a:	8f b7       	in	r24, 0x3f	; 63
    605c:	f8 94       	cli
    605e:	94 e0       	ldi	r25, 0x04	; 4
    6060:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6064:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    6068:	8f bf       	out	0x3f, r24	; 63
    606a:	80 e4       	ldi	r24, 0x40	; 64
    606c:	89 1b       	sub	r24, r25
    606e:	90 e0       	ldi	r25, 0x00	; 0
    6070:	08 95       	ret
    6072:	90 e0       	ldi	r25, 0x00	; 0
    6074:	80 e0       	ldi	r24, 0x00	; 0
    6076:	08 95       	ret

00006078 <usb_serial_class::write(unsigned char const*, unsigned int)>:
    6078:	bf 92       	push	r11
    607a:	cf 92       	push	r12
    607c:	df 92       	push	r13
    607e:	ef 92       	push	r14
    6080:	ff 92       	push	r15
    6082:	0f 93       	push	r16
    6084:	1f 93       	push	r17
    6086:	cf 93       	push	r28
    6088:	df 93       	push	r29
    608a:	7c 01       	movw	r14, r24
    608c:	80 91 1d 0f 	lds	r24, 0x0F1D	; 0x800f1d <usb_configuration>
    6090:	81 11       	cpse	r24, r1
    6092:	10 c0       	rjmp	.+32     	; 0x60b4 <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    6094:	81 e0       	ldi	r24, 0x01	; 1
    6096:	f7 01       	movw	r30, r14
    6098:	82 83       	std	Z+2, r24	; 0x02
    609a:	10 e0       	ldi	r17, 0x00	; 0
    609c:	00 e0       	ldi	r16, 0x00	; 0
    609e:	c8 01       	movw	r24, r16
    60a0:	df 91       	pop	r29
    60a2:	cf 91       	pop	r28
    60a4:	1f 91       	pop	r17
    60a6:	0f 91       	pop	r16
    60a8:	ff 90       	pop	r15
    60aa:	ef 90       	pop	r14
    60ac:	df 90       	pop	r13
    60ae:	cf 90       	pop	r12
    60b0:	bf 90       	pop	r11
    60b2:	08 95       	ret
    60b4:	2f b7       	in	r18, 0x3f	; 63
    60b6:	f8 94       	cli
    60b8:	84 e0       	ldi	r24, 0x04	; 4
    60ba:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    60be:	80 91 97 0e 	lds	r24, 0x0E97	; 0x800e97 <transmit_previous_timeout>
    60c2:	88 23       	and	r24, r24
    60c4:	41 f0       	breq	.+16     	; 0x60d6 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    60c6:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    60ca:	85 fd       	sbrc	r24, 5
    60cc:	02 c0       	rjmp	.+4      	; 0x60d2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    60ce:	2f bf       	out	0x3f, r18	; 63
    60d0:	e1 cf       	rjmp	.-62     	; 0x6094 <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    60d2:	10 92 97 0e 	sts	0x0E97, r1	; 0x800e97 <transmit_previous_timeout>
    60d6:	10 e0       	ldi	r17, 0x00	; 0
    60d8:	00 e0       	ldi	r16, 0x00	; 0
    60da:	84 e0       	ldi	r24, 0x04	; 4
    60dc:	d8 2e       	mov	r13, r24
    60de:	90 e4       	ldi	r25, 0x40	; 64
    60e0:	c9 2e       	mov	r12, r25
    60e2:	a1 ef       	ldi	r26, 0xF1	; 241
    60e4:	b0 e0       	ldi	r27, 0x00	; 0
    60e6:	3a e3       	ldi	r19, 0x3A	; 58
    60e8:	b3 2e       	mov	r11, r19
    60ea:	33 e0       	ldi	r19, 0x03	; 3
    60ec:	41 15       	cp	r20, r1
    60ee:	51 05       	cpc	r21, r1
    60f0:	09 f4       	brne	.+2      	; 0x60f4 <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    60f2:	c0 c0       	rjmp	.+384    	; 0x6274 <L548end+0x12>
    60f4:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    60f8:	81 5f       	subi	r24, 0xF1	; 241
    60fa:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    60fe:	95 fd       	sbrc	r25, 5
    6100:	16 c0       	rjmp	.+44     	; 0x612e <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    6102:	2f bf       	out	0x3f, r18	; 63
    6104:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    6108:	89 13       	cpse	r24, r25
    610a:	06 c0       	rjmp	.+12     	; 0x6118 <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    610c:	81 e0       	ldi	r24, 0x01	; 1
    610e:	80 93 97 0e 	sts	0x0E97, r24	; 0x800e97 <transmit_previous_timeout>
    6112:	f7 01       	movw	r30, r14
    6114:	82 83       	std	Z+2, r24	; 0x02
    6116:	c3 cf       	rjmp	.-122    	; 0x609e <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    6118:	90 91 1d 0f 	lds	r25, 0x0F1D	; 0x800f1d <usb_configuration>
    611c:	91 11       	cpse	r25, r1
    611e:	02 c0       	rjmp	.+4      	; 0x6124 <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    6120:	81 e0       	ldi	r24, 0x01	; 1
    6122:	f7 cf       	rjmp	.-18     	; 0x6112 <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    6124:	2f b7       	in	r18, 0x3f	; 63
    6126:	f8 94       	cli
    6128:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    612c:	e6 cf       	rjmp	.-52     	; 0x60fa <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    612e:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    6132:	9c 2d       	mov	r25, r12
    6134:	98 1b       	sub	r25, r24
    6136:	94 17       	cp	r25, r20
    6138:	15 06       	cpc	r1, r21
    613a:	11 f0       	breq	.+4      	; 0x6140 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    613c:	08 f0       	brcs	.+2      	; 0x6140 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    613e:	94 2f       	mov	r25, r20
    6140:	e9 2f       	mov	r30, r25
    6142:	f0 e0       	ldi	r31, 0x00	; 0
    6144:	4e 1b       	sub	r20, r30
    6146:	5f 0b       	sbc	r21, r31
    6148:	0e 0f       	add	r16, r30
    614a:	1f 1f       	adc	r17, r31
    614c:	eb 01       	movw	r28, r22

0000614e <L548begin>:
    614e:	e0 e4       	ldi	r30, 0x40	; 64
    6150:	e9 1b       	sub	r30, r25
    6152:	e0 34       	cpi	r30, 0x40	; 64
    6154:	28 f4       	brcc	.+10     	; 0x6160 <L548err>
    6156:	ee 0f       	add	r30, r30
    6158:	ff 27       	eor	r31, r31
    615a:	ef 54       	subi	r30, 0x4F	; 79
    615c:	ff 4c       	sbci	r31, 0xCF	; 207
    615e:	09 94       	ijmp

00006160 <L548err>:
    6160:	80 c0       	rjmp	.+256    	; 0x6262 <L548end>

00006162 <L548table>:
    6162:	99 91       	ld	r25, Y+
    6164:	9c 93       	st	X, r25
    6166:	99 91       	ld	r25, Y+
    6168:	9c 93       	st	X, r25
    616a:	99 91       	ld	r25, Y+
    616c:	9c 93       	st	X, r25
    616e:	99 91       	ld	r25, Y+
    6170:	9c 93       	st	X, r25
    6172:	99 91       	ld	r25, Y+
    6174:	9c 93       	st	X, r25
    6176:	99 91       	ld	r25, Y+
    6178:	9c 93       	st	X, r25
    617a:	99 91       	ld	r25, Y+
    617c:	9c 93       	st	X, r25
    617e:	99 91       	ld	r25, Y+
    6180:	9c 93       	st	X, r25
    6182:	99 91       	ld	r25, Y+
    6184:	9c 93       	st	X, r25
    6186:	99 91       	ld	r25, Y+
    6188:	9c 93       	st	X, r25
    618a:	99 91       	ld	r25, Y+
    618c:	9c 93       	st	X, r25
    618e:	99 91       	ld	r25, Y+
    6190:	9c 93       	st	X, r25
    6192:	99 91       	ld	r25, Y+
    6194:	9c 93       	st	X, r25
    6196:	99 91       	ld	r25, Y+
    6198:	9c 93       	st	X, r25
    619a:	99 91       	ld	r25, Y+
    619c:	9c 93       	st	X, r25
    619e:	99 91       	ld	r25, Y+
    61a0:	9c 93       	st	X, r25
    61a2:	99 91       	ld	r25, Y+
    61a4:	9c 93       	st	X, r25
    61a6:	99 91       	ld	r25, Y+
    61a8:	9c 93       	st	X, r25
    61aa:	99 91       	ld	r25, Y+
    61ac:	9c 93       	st	X, r25
    61ae:	99 91       	ld	r25, Y+
    61b0:	9c 93       	st	X, r25
    61b2:	99 91       	ld	r25, Y+
    61b4:	9c 93       	st	X, r25
    61b6:	99 91       	ld	r25, Y+
    61b8:	9c 93       	st	X, r25
    61ba:	99 91       	ld	r25, Y+
    61bc:	9c 93       	st	X, r25
    61be:	99 91       	ld	r25, Y+
    61c0:	9c 93       	st	X, r25
    61c2:	99 91       	ld	r25, Y+
    61c4:	9c 93       	st	X, r25
    61c6:	99 91       	ld	r25, Y+
    61c8:	9c 93       	st	X, r25
    61ca:	99 91       	ld	r25, Y+
    61cc:	9c 93       	st	X, r25
    61ce:	99 91       	ld	r25, Y+
    61d0:	9c 93       	st	X, r25
    61d2:	99 91       	ld	r25, Y+
    61d4:	9c 93       	st	X, r25
    61d6:	99 91       	ld	r25, Y+
    61d8:	9c 93       	st	X, r25
    61da:	99 91       	ld	r25, Y+
    61dc:	9c 93       	st	X, r25
    61de:	99 91       	ld	r25, Y+
    61e0:	9c 93       	st	X, r25
    61e2:	99 91       	ld	r25, Y+
    61e4:	9c 93       	st	X, r25
    61e6:	99 91       	ld	r25, Y+
    61e8:	9c 93       	st	X, r25
    61ea:	99 91       	ld	r25, Y+
    61ec:	9c 93       	st	X, r25
    61ee:	99 91       	ld	r25, Y+
    61f0:	9c 93       	st	X, r25
    61f2:	99 91       	ld	r25, Y+
    61f4:	9c 93       	st	X, r25
    61f6:	99 91       	ld	r25, Y+
    61f8:	9c 93       	st	X, r25
    61fa:	99 91       	ld	r25, Y+
    61fc:	9c 93       	st	X, r25
    61fe:	99 91       	ld	r25, Y+
    6200:	9c 93       	st	X, r25
    6202:	99 91       	ld	r25, Y+
    6204:	9c 93       	st	X, r25
    6206:	99 91       	ld	r25, Y+
    6208:	9c 93       	st	X, r25
    620a:	99 91       	ld	r25, Y+
    620c:	9c 93       	st	X, r25
    620e:	99 91       	ld	r25, Y+
    6210:	9c 93       	st	X, r25
    6212:	99 91       	ld	r25, Y+
    6214:	9c 93       	st	X, r25
    6216:	99 91       	ld	r25, Y+
    6218:	9c 93       	st	X, r25
    621a:	99 91       	ld	r25, Y+
    621c:	9c 93       	st	X, r25
    621e:	99 91       	ld	r25, Y+
    6220:	9c 93       	st	X, r25
    6222:	99 91       	ld	r25, Y+
    6224:	9c 93       	st	X, r25
    6226:	99 91       	ld	r25, Y+
    6228:	9c 93       	st	X, r25
    622a:	99 91       	ld	r25, Y+
    622c:	9c 93       	st	X, r25
    622e:	99 91       	ld	r25, Y+
    6230:	9c 93       	st	X, r25
    6232:	99 91       	ld	r25, Y+
    6234:	9c 93       	st	X, r25
    6236:	99 91       	ld	r25, Y+
    6238:	9c 93       	st	X, r25
    623a:	99 91       	ld	r25, Y+
    623c:	9c 93       	st	X, r25
    623e:	99 91       	ld	r25, Y+
    6240:	9c 93       	st	X, r25
    6242:	99 91       	ld	r25, Y+
    6244:	9c 93       	st	X, r25
    6246:	99 91       	ld	r25, Y+
    6248:	9c 93       	st	X, r25
    624a:	99 91       	ld	r25, Y+
    624c:	9c 93       	st	X, r25
    624e:	99 91       	ld	r25, Y+
    6250:	9c 93       	st	X, r25
    6252:	99 91       	ld	r25, Y+
    6254:	9c 93       	st	X, r25
    6256:	99 91       	ld	r25, Y+
    6258:	9c 93       	st	X, r25
    625a:	99 91       	ld	r25, Y+
    625c:	9c 93       	st	X, r25
    625e:	99 91       	ld	r25, Y+
    6260:	9c 93       	st	X, r25

00006262 <L548end>:
    6262:	be 01       	movw	r22, r28
    6264:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6268:	85 ff       	sbrs	r24, 5
    626a:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    626e:	30 93 99 0e 	sts	0x0E99, r19	; 0x800e99 <transmit_flush_timer>
    6272:	3c cf       	rjmp	.-392    	; 0x60ec <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    6274:	2f bf       	out	0x3f, r18	; 63
    6276:	13 cf       	rjmp	.-474    	; 0x609e <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00006278 <usb_serial_class::send_now()>:
    6278:	8f b7       	in	r24, 0x3f	; 63
    627a:	f8 94       	cli
    627c:	90 91 1d 0f 	lds	r25, 0x0F1D	; 0x800f1d <usb_configuration>
    6280:	99 23       	and	r25, r25
    6282:	61 f0       	breq	.+24     	; 0x629c <usb_serial_class::send_now()+0x24>
    6284:	90 91 99 0e 	lds	r25, 0x0E99	; 0x800e99 <transmit_flush_timer>
    6288:	99 23       	and	r25, r25
    628a:	41 f0       	breq	.+16     	; 0x629c <usb_serial_class::send_now()+0x24>
    628c:	94 e0       	ldi	r25, 0x04	; 4
    628e:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    6292:	9a e3       	ldi	r25, 0x3A	; 58
    6294:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    6298:	10 92 99 0e 	sts	0x0E99, r1	; 0x800e99 <transmit_flush_timer>
    629c:	8f bf       	out	0x3f, r24	; 63
    629e:	08 95       	ret

000062a0 <usb_serial_class::flush()>:
    62a0:	eb cf       	rjmp	.-42     	; 0x6278 <usb_serial_class::send_now()>

000062a2 <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    62a2:	ef e0       	ldi	r30, 0x0F	; 15
    62a4:	ff e0       	ldi	r31, 0x0F	; 15
    62a6:	11 86       	std	Z+9, r1	; 0x09
    62a8:	10 86       	std	Z+8, r1	; 0x08
    62aa:	12 82       	std	Z+2, r1	; 0x02
    62ac:	88 ee       	ldi	r24, 0xE8	; 232
    62ae:	93 e0       	ldi	r25, 0x03	; 3
    62b0:	a0 e0       	ldi	r26, 0x00	; 0
    62b2:	b0 e0       	ldi	r27, 0x00	; 0
    62b4:	83 83       	std	Z+3, r24	; 0x03
    62b6:	94 83       	std	Z+4, r25	; 0x04
    62b8:	a5 83       	std	Z+5, r26	; 0x05
    62ba:	b6 83       	std	Z+6, r27	; 0x06
    62bc:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    62be:	8c e8       	ldi	r24, 0x8C	; 140
    62c0:	97 e0       	ldi	r25, 0x07	; 7
    62c2:	91 83       	std	Z+1, r25	; 0x01
    62c4:	80 83       	st	Z, r24
    62c6:	08 95       	ret

000062c8 <randomSeed(unsigned int)>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    62c8:	00 97       	sbiw	r24, 0x00	; 0
    62ca:	21 f0       	breq	.+8      	; 0x62d4 <randomSeed(unsigned int)+0xc>
    srandom(seed);
    62cc:	bc 01       	movw	r22, r24
    62ce:	90 e0       	ldi	r25, 0x00	; 0
    62d0:	80 e0       	ldi	r24, 0x00	; 0
    62d2:	d3 c3       	rjmp	.+1958   	; 0x6a7a <srandom>
  }
}
    62d4:	08 95       	ret

000062d6 <random(long)>:

long random(long howbig)
{
    62d6:	cf 92       	push	r12
    62d8:	df 92       	push	r13
    62da:	ef 92       	push	r14
    62dc:	ff 92       	push	r15
    62de:	6b 01       	movw	r12, r22
    62e0:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    62e2:	c1 14       	cp	r12, r1
    62e4:	d1 04       	cpc	r13, r1
    62e6:	e1 04       	cpc	r14, r1
    62e8:	f1 04       	cpc	r15, r1
    62ea:	31 f0       	breq	.+12     	; 0x62f8 <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    62ec:	7a d3       	rcall	.+1780   	; 0x69e2 <random>
    62ee:	a7 01       	movw	r20, r14
    62f0:	96 01       	movw	r18, r12
    62f2:	ea d2       	rcall	.+1492   	; 0x68c8 <__divmodsi4>
    62f4:	6b 01       	movw	r12, r22
    62f6:	7c 01       	movw	r14, r24
}
    62f8:	c7 01       	movw	r24, r14
    62fa:	b6 01       	movw	r22, r12
    62fc:	ff 90       	pop	r15
    62fe:	ef 90       	pop	r14
    6300:	df 90       	pop	r13
    6302:	cf 90       	pop	r12
    6304:	08 95       	ret

00006306 <random(long, long)>:

long random(long howsmall, long howbig)
{
    6306:	cf 92       	push	r12
    6308:	df 92       	push	r13
    630a:	ef 92       	push	r14
    630c:	ff 92       	push	r15
    630e:	6b 01       	movw	r12, r22
    6310:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    6312:	c2 16       	cp	r12, r18
    6314:	d3 06       	cpc	r13, r19
    6316:	e4 06       	cpc	r14, r20
    6318:	f5 06       	cpc	r15, r21
    631a:	5c f4       	brge	.+22     	; 0x6332 <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    631c:	ca 01       	movw	r24, r20
    631e:	b9 01       	movw	r22, r18
    6320:	6c 19       	sub	r22, r12
    6322:	7d 09       	sbc	r23, r13
    6324:	8e 09       	sbc	r24, r14
    6326:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    6328:	d6 df       	rcall	.-84     	; 0x62d6 <random(long)>
    632a:	c6 0e       	add	r12, r22
    632c:	d7 1e       	adc	r13, r23
    632e:	e8 1e       	adc	r14, r24
    6330:	f9 1e       	adc	r15, r25
}
    6332:	c7 01       	movw	r24, r14
    6334:	b6 01       	movw	r22, r12
    6336:	ff 90       	pop	r15
    6338:	ef 90       	pop	r14
    633a:	df 90       	pop	r13
    633c:	cf 90       	pop	r12
    633e:	08 95       	ret

00006340 <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    6340:	4f 92       	push	r4
    6342:	5f 92       	push	r5
    6344:	6f 92       	push	r6
    6346:	7f 92       	push	r7
    6348:	af 92       	push	r10
    634a:	bf 92       	push	r11
    634c:	cf 92       	push	r12
    634e:	df 92       	push	r13
    6350:	ef 92       	push	r14
    6352:	ff 92       	push	r15
    6354:	0f 93       	push	r16
    6356:	1f 93       	push	r17
    6358:	cf 93       	push	r28
    635a:	df 93       	push	r29
    635c:	cd b7       	in	r28, 0x3d	; 61
    635e:	de b7       	in	r29, 0x3e	; 62
    6360:	29 01       	movw	r4, r18
    6362:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    6364:	9b 01       	movw	r18, r22
    6366:	ac 01       	movw	r20, r24
    6368:	24 19       	sub	r18, r4
    636a:	35 09       	sbc	r19, r5
    636c:	46 09       	sbc	r20, r6
    636e:	57 09       	sbc	r21, r7
    6370:	89 89       	ldd	r24, Y+17	; 0x11
    6372:	9a 89       	ldd	r25, Y+18	; 0x12
    6374:	ab 89       	ldd	r26, Y+19	; 0x13
    6376:	bc 89       	ldd	r27, Y+20	; 0x14
    6378:	bc 01       	movw	r22, r24
    637a:	cd 01       	movw	r24, r26
    637c:	6a 19       	sub	r22, r10
    637e:	7b 09       	sbc	r23, r11
    6380:	8c 09       	sbc	r24, r12
    6382:	9d 09       	sbc	r25, r13
    6384:	49 d2       	rcall	.+1170   	; 0x6818 <__mulsi3>
    6386:	a8 01       	movw	r20, r16
    6388:	97 01       	movw	r18, r14
    638a:	24 19       	sub	r18, r4
    638c:	35 09       	sbc	r19, r5
    638e:	46 09       	sbc	r20, r6
    6390:	57 09       	sbc	r21, r7
    6392:	9a d2       	rcall	.+1332   	; 0x68c8 <__divmodsi4>
    6394:	ca 01       	movw	r24, r20
    6396:	b9 01       	movw	r22, r18
    6398:	6a 0d       	add	r22, r10
    639a:	7b 1d       	adc	r23, r11
    639c:	8c 1d       	adc	r24, r12
    639e:	9d 1d       	adc	r25, r13
}
    63a0:	df 91       	pop	r29
    63a2:	cf 91       	pop	r28
    63a4:	1f 91       	pop	r17
    63a6:	0f 91       	pop	r16
    63a8:	ff 90       	pop	r15
    63aa:	ef 90       	pop	r14
    63ac:	df 90       	pop	r13
    63ae:	cf 90       	pop	r12
    63b0:	bf 90       	pop	r11
    63b2:	af 90       	pop	r10
    63b4:	7f 90       	pop	r7
    63b6:	6f 90       	pop	r6
    63b8:	5f 90       	pop	r5
    63ba:	4f 90       	pop	r4
    63bc:	08 95       	ret

000063be <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    63be:	fc 01       	movw	r30, r24
    63c0:	80 81       	ld	r24, Z
    63c2:	91 81       	ldd	r25, Z+1	; 0x01
    63c4:	0c 94 b7 27 	jmp	0x4f6e	; 0x4f6e <free>

000063c8 <String::changeBuffer(unsigned int)>:
    63c8:	0f 93       	push	r16
    63ca:	1f 93       	push	r17
    63cc:	cf 93       	push	r28
    63ce:	df 93       	push	r29
    63d0:	ec 01       	movw	r28, r24
    63d2:	8b 01       	movw	r16, r22
    63d4:	6f 5f       	subi	r22, 0xFF	; 255
    63d6:	7f 4f       	sbci	r23, 0xFF	; 255
    63d8:	88 81       	ld	r24, Y
    63da:	99 81       	ldd	r25, Y+1	; 0x01
    63dc:	0e 94 40 28 	call	0x5080	; 0x5080 <realloc>
    63e0:	00 97       	sbiw	r24, 0x00	; 0
    63e2:	51 f0       	breq	.+20     	; 0x63f8 <String::changeBuffer(unsigned int)+0x30>
    63e4:	99 83       	std	Y+1, r25	; 0x01
    63e6:	88 83       	st	Y, r24
    63e8:	1b 83       	std	Y+3, r17	; 0x03
    63ea:	0a 83       	std	Y+2, r16	; 0x02
    63ec:	81 e0       	ldi	r24, 0x01	; 1
    63ee:	df 91       	pop	r29
    63f0:	cf 91       	pop	r28
    63f2:	1f 91       	pop	r17
    63f4:	0f 91       	pop	r16
    63f6:	08 95       	ret
    63f8:	80 e0       	ldi	r24, 0x00	; 0
    63fa:	f9 cf       	rjmp	.-14     	; 0x63ee <String::changeBuffer(unsigned int)+0x26>

000063fc <String::reserve(unsigned int)>:
    63fc:	cf 93       	push	r28
    63fe:	df 93       	push	r29
    6400:	fc 01       	movw	r30, r24
    6402:	22 81       	ldd	r18, Z+2	; 0x02
    6404:	33 81       	ldd	r19, Z+3	; 0x03
    6406:	26 17       	cp	r18, r22
    6408:	37 07       	cpc	r19, r23
    640a:	20 f0       	brcs	.+8      	; 0x6414 <String::reserve(unsigned int)+0x18>
    640c:	81 e0       	ldi	r24, 0x01	; 1
    640e:	df 91       	pop	r29
    6410:	cf 91       	pop	r28
    6412:	08 95       	ret
    6414:	ec 01       	movw	r28, r24
    6416:	d8 df       	rcall	.-80     	; 0x63c8 <String::changeBuffer(unsigned int)>
    6418:	88 23       	and	r24, r24
    641a:	c9 f3       	breq	.-14     	; 0x640e <String::reserve(unsigned int)+0x12>
    641c:	8c 81       	ldd	r24, Y+4	; 0x04
    641e:	9d 81       	ldd	r25, Y+5	; 0x05
    6420:	89 2b       	or	r24, r25
    6422:	a1 f7       	brne	.-24     	; 0x640c <String::reserve(unsigned int)+0x10>
    6424:	e8 81       	ld	r30, Y
    6426:	f9 81       	ldd	r31, Y+1	; 0x01
    6428:	10 82       	st	Z, r1
    642a:	f0 cf       	rjmp	.-32     	; 0x640c <String::reserve(unsigned int)+0x10>

0000642c <String::copy(char const*, unsigned int)>:
    642c:	ef 92       	push	r14
    642e:	ff 92       	push	r15
    6430:	0f 93       	push	r16
    6432:	1f 93       	push	r17
    6434:	cf 93       	push	r28
    6436:	df 93       	push	r29
    6438:	ec 01       	movw	r28, r24
    643a:	7b 01       	movw	r14, r22
    643c:	8a 01       	movw	r16, r20
    643e:	41 15       	cp	r20, r1
    6440:	51 05       	cpc	r21, r1
    6442:	79 f4       	brne	.+30     	; 0x6462 <String::copy(char const*, unsigned int)+0x36>
    6444:	e8 81       	ld	r30, Y
    6446:	f9 81       	ldd	r31, Y+1	; 0x01
    6448:	30 97       	sbiw	r30, 0x00	; 0
    644a:	09 f0       	breq	.+2      	; 0x644e <String::copy(char const*, unsigned int)+0x22>
    644c:	10 82       	st	Z, r1
    644e:	1d 82       	std	Y+5, r1	; 0x05
    6450:	1c 82       	std	Y+4, r1	; 0x04
    6452:	ce 01       	movw	r24, r28
    6454:	df 91       	pop	r29
    6456:	cf 91       	pop	r28
    6458:	1f 91       	pop	r17
    645a:	0f 91       	pop	r16
    645c:	ff 90       	pop	r15
    645e:	ef 90       	pop	r14
    6460:	08 95       	ret
    6462:	ba 01       	movw	r22, r20
    6464:	cb df       	rcall	.-106    	; 0x63fc <String::reserve(unsigned int)>
    6466:	28 81       	ld	r18, Y
    6468:	39 81       	ldd	r19, Y+1	; 0x01
    646a:	81 11       	cpse	r24, r1
    646c:	0b c0       	rjmp	.+22     	; 0x6484 <String::copy(char const*, unsigned int)+0x58>
    646e:	21 15       	cp	r18, r1
    6470:	31 05       	cpc	r19, r1
    6472:	29 f0       	breq	.+10     	; 0x647e <String::copy(char const*, unsigned int)+0x52>
    6474:	c9 01       	movw	r24, r18
    6476:	0e 94 b7 27 	call	0x4f6e	; 0x4f6e <free>
    647a:	19 82       	std	Y+1, r1	; 0x01
    647c:	18 82       	st	Y, r1
    647e:	1b 82       	std	Y+3, r1	; 0x03
    6480:	1a 82       	std	Y+2, r1	; 0x02
    6482:	e5 cf       	rjmp	.-54     	; 0x644e <String::copy(char const*, unsigned int)+0x22>
    6484:	1d 83       	std	Y+5, r17	; 0x05
    6486:	0c 83       	std	Y+4, r16	; 0x04
    6488:	b7 01       	movw	r22, r14
    648a:	c9 01       	movw	r24, r18
    648c:	08 d3       	rcall	.+1552   	; 0x6a9e <strcpy>
    648e:	e1 cf       	rjmp	.-62     	; 0x6452 <String::copy(char const*, unsigned int)+0x26>

00006490 <String::String(char const*)>:
    6490:	fc 01       	movw	r30, r24
    6492:	11 82       	std	Z+1, r1	; 0x01
    6494:	10 82       	st	Z, r1
    6496:	13 82       	std	Z+3, r1	; 0x03
    6498:	12 82       	std	Z+2, r1	; 0x02
    649a:	15 82       	std	Z+5, r1	; 0x05
    649c:	14 82       	std	Z+4, r1	; 0x04
    649e:	16 82       	std	Z+6, r1	; 0x06
    64a0:	61 15       	cp	r22, r1
    64a2:	71 05       	cpc	r23, r1
    64a4:	49 f0       	breq	.+18     	; 0x64b8 <String::String(char const*)+0x28>
    64a6:	fb 01       	movw	r30, r22
    64a8:	01 90       	ld	r0, Z+
    64aa:	00 20       	and	r0, r0
    64ac:	e9 f7       	brne	.-6      	; 0x64a8 <String::String(char const*)+0x18>
    64ae:	31 97       	sbiw	r30, 0x01	; 1
    64b0:	af 01       	movw	r20, r30
    64b2:	46 1b       	sub	r20, r22
    64b4:	57 0b       	sbc	r21, r23
    64b6:	ba cf       	rjmp	.-140    	; 0x642c <String::copy(char const*, unsigned int)>
    64b8:	08 95       	ret

000064ba <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    64ba:	0f 93       	push	r16
    64bc:	1f 93       	push	r17
    64be:	cf 93       	push	r28
    64c0:	df 93       	push	r29
	if (!bufsize || !buf) return;
    64c2:	41 15       	cp	r20, r1
    64c4:	51 05       	cpc	r21, r1
    64c6:	59 f0       	breq	.+22     	; 0x64de <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    64c8:	61 15       	cp	r22, r1
    64ca:	71 05       	cpc	r23, r1
    64cc:	41 f0       	breq	.+16     	; 0x64de <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    64ce:	fc 01       	movw	r30, r24
    64d0:	04 81       	ldd	r16, Z+4	; 0x04
    64d2:	15 81       	ldd	r17, Z+5	; 0x05
    64d4:	20 17       	cp	r18, r16
    64d6:	31 07       	cpc	r19, r17
    64d8:	38 f0       	brcs	.+14     	; 0x64e8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    64da:	fb 01       	movw	r30, r22
    64dc:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    64de:	df 91       	pop	r29
    64e0:	cf 91       	pop	r28
    64e2:	1f 91       	pop	r17
    64e4:	0f 91       	pop	r16
    64e6:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    64e8:	41 50       	subi	r20, 0x01	; 1
    64ea:	51 09       	sbc	r21, r1
    64ec:	02 1b       	sub	r16, r18
    64ee:	13 0b       	sbc	r17, r19
    64f0:	40 17       	cp	r20, r16
    64f2:	51 07       	cpc	r21, r17
    64f4:	08 f4       	brcc	.+2      	; 0x64f8 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    64f6:	8a 01       	movw	r16, r20
    64f8:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    64fa:	fc 01       	movw	r30, r24
    64fc:	60 81       	ld	r22, Z
    64fe:	71 81       	ldd	r23, Z+1	; 0x01
    6500:	62 0f       	add	r22, r18
    6502:	73 1f       	adc	r23, r19
    6504:	a8 01       	movw	r20, r16
    6506:	ce 01       	movw	r24, r28
    6508:	d1 d2       	rcall	.+1442   	; 0x6aac <strncpy>
	buf[n] = 0;
    650a:	c0 0f       	add	r28, r16
    650c:	d1 1f       	adc	r29, r17
    650e:	18 82       	st	Y, r1
    6510:	e6 cf       	rjmp	.-52     	; 0x64de <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

00006512 <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    6512:	08 95       	ret

00006514 <__subsf3>:
    6514:	50 58       	subi	r21, 0x80	; 128

00006516 <__addsf3>:
    6516:	bb 27       	eor	r27, r27
    6518:	aa 27       	eor	r26, r26
    651a:	0e d0       	rcall	.+28     	; 0x6538 <__addsf3x>
    651c:	e0 c0       	rjmp	.+448    	; 0x66de <__fp_round>
    651e:	d1 d0       	rcall	.+418    	; 0x66c2 <__fp_pscA>
    6520:	30 f0       	brcs	.+12     	; 0x652e <__addsf3+0x18>
    6522:	d6 d0       	rcall	.+428    	; 0x66d0 <__fp_pscB>
    6524:	20 f0       	brcs	.+8      	; 0x652e <__addsf3+0x18>
    6526:	31 f4       	brne	.+12     	; 0x6534 <__addsf3+0x1e>
    6528:	9f 3f       	cpi	r25, 0xFF	; 255
    652a:	11 f4       	brne	.+4      	; 0x6530 <__addsf3+0x1a>
    652c:	1e f4       	brtc	.+6      	; 0x6534 <__addsf3+0x1e>
    652e:	c6 c0       	rjmp	.+396    	; 0x66bc <__fp_nan>
    6530:	0e f4       	brtc	.+2      	; 0x6534 <__addsf3+0x1e>
    6532:	e0 95       	com	r30
    6534:	e7 fb       	bst	r30, 7
    6536:	bc c0       	rjmp	.+376    	; 0x66b0 <__fp_inf>

00006538 <__addsf3x>:
    6538:	e9 2f       	mov	r30, r25
    653a:	e2 d0       	rcall	.+452    	; 0x6700 <__fp_split3>
    653c:	80 f3       	brcs	.-32     	; 0x651e <__addsf3+0x8>
    653e:	ba 17       	cp	r27, r26
    6540:	62 07       	cpc	r22, r18
    6542:	73 07       	cpc	r23, r19
    6544:	84 07       	cpc	r24, r20
    6546:	95 07       	cpc	r25, r21
    6548:	18 f0       	brcs	.+6      	; 0x6550 <__addsf3x+0x18>
    654a:	71 f4       	brne	.+28     	; 0x6568 <__addsf3x+0x30>
    654c:	9e f5       	brtc	.+102    	; 0x65b4 <__addsf3x+0x7c>
    654e:	fa c0       	rjmp	.+500    	; 0x6744 <__fp_zero>
    6550:	0e f4       	brtc	.+2      	; 0x6554 <__addsf3x+0x1c>
    6552:	e0 95       	com	r30
    6554:	0b 2e       	mov	r0, r27
    6556:	ba 2f       	mov	r27, r26
    6558:	a0 2d       	mov	r26, r0
    655a:	0b 01       	movw	r0, r22
    655c:	b9 01       	movw	r22, r18
    655e:	90 01       	movw	r18, r0
    6560:	0c 01       	movw	r0, r24
    6562:	ca 01       	movw	r24, r20
    6564:	a0 01       	movw	r20, r0
    6566:	11 24       	eor	r1, r1
    6568:	ff 27       	eor	r31, r31
    656a:	59 1b       	sub	r21, r25
    656c:	99 f0       	breq	.+38     	; 0x6594 <__addsf3x+0x5c>
    656e:	59 3f       	cpi	r21, 0xF9	; 249
    6570:	50 f4       	brcc	.+20     	; 0x6586 <__addsf3x+0x4e>
    6572:	50 3e       	cpi	r21, 0xE0	; 224
    6574:	68 f1       	brcs	.+90     	; 0x65d0 <__addsf3x+0x98>
    6576:	1a 16       	cp	r1, r26
    6578:	f0 40       	sbci	r31, 0x00	; 0
    657a:	a2 2f       	mov	r26, r18
    657c:	23 2f       	mov	r18, r19
    657e:	34 2f       	mov	r19, r20
    6580:	44 27       	eor	r20, r20
    6582:	58 5f       	subi	r21, 0xF8	; 248
    6584:	f3 cf       	rjmp	.-26     	; 0x656c <__addsf3x+0x34>
    6586:	46 95       	lsr	r20
    6588:	37 95       	ror	r19
    658a:	27 95       	ror	r18
    658c:	a7 95       	ror	r26
    658e:	f0 40       	sbci	r31, 0x00	; 0
    6590:	53 95       	inc	r21
    6592:	c9 f7       	brne	.-14     	; 0x6586 <__addsf3x+0x4e>
    6594:	7e f4       	brtc	.+30     	; 0x65b4 <__addsf3x+0x7c>
    6596:	1f 16       	cp	r1, r31
    6598:	ba 0b       	sbc	r27, r26
    659a:	62 0b       	sbc	r22, r18
    659c:	73 0b       	sbc	r23, r19
    659e:	84 0b       	sbc	r24, r20
    65a0:	ba f0       	brmi	.+46     	; 0x65d0 <__addsf3x+0x98>
    65a2:	91 50       	subi	r25, 0x01	; 1
    65a4:	a1 f0       	breq	.+40     	; 0x65ce <__addsf3x+0x96>
    65a6:	ff 0f       	add	r31, r31
    65a8:	bb 1f       	adc	r27, r27
    65aa:	66 1f       	adc	r22, r22
    65ac:	77 1f       	adc	r23, r23
    65ae:	88 1f       	adc	r24, r24
    65b0:	c2 f7       	brpl	.-16     	; 0x65a2 <__addsf3x+0x6a>
    65b2:	0e c0       	rjmp	.+28     	; 0x65d0 <__addsf3x+0x98>
    65b4:	ba 0f       	add	r27, r26
    65b6:	62 1f       	adc	r22, r18
    65b8:	73 1f       	adc	r23, r19
    65ba:	84 1f       	adc	r24, r20
    65bc:	48 f4       	brcc	.+18     	; 0x65d0 <__addsf3x+0x98>
    65be:	87 95       	ror	r24
    65c0:	77 95       	ror	r23
    65c2:	67 95       	ror	r22
    65c4:	b7 95       	ror	r27
    65c6:	f7 95       	ror	r31
    65c8:	9e 3f       	cpi	r25, 0xFE	; 254
    65ca:	08 f0       	brcs	.+2      	; 0x65ce <__addsf3x+0x96>
    65cc:	b3 cf       	rjmp	.-154    	; 0x6534 <__addsf3+0x1e>
    65ce:	93 95       	inc	r25
    65d0:	88 0f       	add	r24, r24
    65d2:	08 f0       	brcs	.+2      	; 0x65d6 <__addsf3x+0x9e>
    65d4:	99 27       	eor	r25, r25
    65d6:	ee 0f       	add	r30, r30
    65d8:	97 95       	ror	r25
    65da:	87 95       	ror	r24
    65dc:	08 95       	ret

000065de <__fixunssfsi>:
    65de:	98 d0       	rcall	.+304    	; 0x6710 <__fp_splitA>
    65e0:	88 f0       	brcs	.+34     	; 0x6604 <__fixunssfsi+0x26>
    65e2:	9f 57       	subi	r25, 0x7F	; 127
    65e4:	90 f0       	brcs	.+36     	; 0x660a <__fixunssfsi+0x2c>
    65e6:	b9 2f       	mov	r27, r25
    65e8:	99 27       	eor	r25, r25
    65ea:	b7 51       	subi	r27, 0x17	; 23
    65ec:	a0 f0       	brcs	.+40     	; 0x6616 <__fixunssfsi+0x38>
    65ee:	d1 f0       	breq	.+52     	; 0x6624 <__fixunssfsi+0x46>
    65f0:	66 0f       	add	r22, r22
    65f2:	77 1f       	adc	r23, r23
    65f4:	88 1f       	adc	r24, r24
    65f6:	99 1f       	adc	r25, r25
    65f8:	1a f0       	brmi	.+6      	; 0x6600 <__fixunssfsi+0x22>
    65fa:	ba 95       	dec	r27
    65fc:	c9 f7       	brne	.-14     	; 0x65f0 <__fixunssfsi+0x12>
    65fe:	12 c0       	rjmp	.+36     	; 0x6624 <__fixunssfsi+0x46>
    6600:	b1 30       	cpi	r27, 0x01	; 1
    6602:	81 f0       	breq	.+32     	; 0x6624 <__fixunssfsi+0x46>
    6604:	9f d0       	rcall	.+318    	; 0x6744 <__fp_zero>
    6606:	b1 e0       	ldi	r27, 0x01	; 1
    6608:	08 95       	ret
    660a:	9c c0       	rjmp	.+312    	; 0x6744 <__fp_zero>
    660c:	67 2f       	mov	r22, r23
    660e:	78 2f       	mov	r23, r24
    6610:	88 27       	eor	r24, r24
    6612:	b8 5f       	subi	r27, 0xF8	; 248
    6614:	39 f0       	breq	.+14     	; 0x6624 <__fixunssfsi+0x46>
    6616:	b9 3f       	cpi	r27, 0xF9	; 249
    6618:	cc f3       	brlt	.-14     	; 0x660c <__fixunssfsi+0x2e>
    661a:	86 95       	lsr	r24
    661c:	77 95       	ror	r23
    661e:	67 95       	ror	r22
    6620:	b3 95       	inc	r27
    6622:	d9 f7       	brne	.-10     	; 0x661a <__fixunssfsi+0x3c>
    6624:	3e f4       	brtc	.+14     	; 0x6634 <__fixunssfsi+0x56>
    6626:	90 95       	com	r25
    6628:	80 95       	com	r24
    662a:	70 95       	com	r23
    662c:	61 95       	neg	r22
    662e:	7f 4f       	sbci	r23, 0xFF	; 255
    6630:	8f 4f       	sbci	r24, 0xFF	; 255
    6632:	9f 4f       	sbci	r25, 0xFF	; 255
    6634:	08 95       	ret

00006636 <__floatunsisf>:
    6636:	e8 94       	clt
    6638:	09 c0       	rjmp	.+18     	; 0x664c <__floatsisf+0x12>

0000663a <__floatsisf>:
    663a:	97 fb       	bst	r25, 7
    663c:	3e f4       	brtc	.+14     	; 0x664c <__floatsisf+0x12>
    663e:	90 95       	com	r25
    6640:	80 95       	com	r24
    6642:	70 95       	com	r23
    6644:	61 95       	neg	r22
    6646:	7f 4f       	sbci	r23, 0xFF	; 255
    6648:	8f 4f       	sbci	r24, 0xFF	; 255
    664a:	9f 4f       	sbci	r25, 0xFF	; 255
    664c:	99 23       	and	r25, r25
    664e:	a9 f0       	breq	.+42     	; 0x667a <__floatsisf+0x40>
    6650:	f9 2f       	mov	r31, r25
    6652:	96 e9       	ldi	r25, 0x96	; 150
    6654:	bb 27       	eor	r27, r27
    6656:	93 95       	inc	r25
    6658:	f6 95       	lsr	r31
    665a:	87 95       	ror	r24
    665c:	77 95       	ror	r23
    665e:	67 95       	ror	r22
    6660:	b7 95       	ror	r27
    6662:	f1 11       	cpse	r31, r1
    6664:	f8 cf       	rjmp	.-16     	; 0x6656 <__floatsisf+0x1c>
    6666:	fa f4       	brpl	.+62     	; 0x66a6 <__floatsisf+0x6c>
    6668:	bb 0f       	add	r27, r27
    666a:	11 f4       	brne	.+4      	; 0x6670 <__floatsisf+0x36>
    666c:	60 ff       	sbrs	r22, 0
    666e:	1b c0       	rjmp	.+54     	; 0x66a6 <__floatsisf+0x6c>
    6670:	6f 5f       	subi	r22, 0xFF	; 255
    6672:	7f 4f       	sbci	r23, 0xFF	; 255
    6674:	8f 4f       	sbci	r24, 0xFF	; 255
    6676:	9f 4f       	sbci	r25, 0xFF	; 255
    6678:	16 c0       	rjmp	.+44     	; 0x66a6 <__floatsisf+0x6c>
    667a:	88 23       	and	r24, r24
    667c:	11 f0       	breq	.+4      	; 0x6682 <__floatsisf+0x48>
    667e:	96 e9       	ldi	r25, 0x96	; 150
    6680:	11 c0       	rjmp	.+34     	; 0x66a4 <__floatsisf+0x6a>
    6682:	77 23       	and	r23, r23
    6684:	21 f0       	breq	.+8      	; 0x668e <__floatsisf+0x54>
    6686:	9e e8       	ldi	r25, 0x8E	; 142
    6688:	87 2f       	mov	r24, r23
    668a:	76 2f       	mov	r23, r22
    668c:	05 c0       	rjmp	.+10     	; 0x6698 <__floatsisf+0x5e>
    668e:	66 23       	and	r22, r22
    6690:	71 f0       	breq	.+28     	; 0x66ae <__floatsisf+0x74>
    6692:	96 e8       	ldi	r25, 0x86	; 134
    6694:	86 2f       	mov	r24, r22
    6696:	70 e0       	ldi	r23, 0x00	; 0
    6698:	60 e0       	ldi	r22, 0x00	; 0
    669a:	2a f0       	brmi	.+10     	; 0x66a6 <__floatsisf+0x6c>
    669c:	9a 95       	dec	r25
    669e:	66 0f       	add	r22, r22
    66a0:	77 1f       	adc	r23, r23
    66a2:	88 1f       	adc	r24, r24
    66a4:	da f7       	brpl	.-10     	; 0x669c <__floatsisf+0x62>
    66a6:	88 0f       	add	r24, r24
    66a8:	96 95       	lsr	r25
    66aa:	87 95       	ror	r24
    66ac:	97 f9       	bld	r25, 7
    66ae:	08 95       	ret

000066b0 <__fp_inf>:
    66b0:	97 f9       	bld	r25, 7
    66b2:	9f 67       	ori	r25, 0x7F	; 127
    66b4:	80 e8       	ldi	r24, 0x80	; 128
    66b6:	70 e0       	ldi	r23, 0x00	; 0
    66b8:	60 e0       	ldi	r22, 0x00	; 0
    66ba:	08 95       	ret

000066bc <__fp_nan>:
    66bc:	9f ef       	ldi	r25, 0xFF	; 255
    66be:	80 ec       	ldi	r24, 0xC0	; 192
    66c0:	08 95       	ret

000066c2 <__fp_pscA>:
    66c2:	00 24       	eor	r0, r0
    66c4:	0a 94       	dec	r0
    66c6:	16 16       	cp	r1, r22
    66c8:	17 06       	cpc	r1, r23
    66ca:	18 06       	cpc	r1, r24
    66cc:	09 06       	cpc	r0, r25
    66ce:	08 95       	ret

000066d0 <__fp_pscB>:
    66d0:	00 24       	eor	r0, r0
    66d2:	0a 94       	dec	r0
    66d4:	12 16       	cp	r1, r18
    66d6:	13 06       	cpc	r1, r19
    66d8:	14 06       	cpc	r1, r20
    66da:	05 06       	cpc	r0, r21
    66dc:	08 95       	ret

000066de <__fp_round>:
    66de:	09 2e       	mov	r0, r25
    66e0:	03 94       	inc	r0
    66e2:	00 0c       	add	r0, r0
    66e4:	11 f4       	brne	.+4      	; 0x66ea <__fp_round+0xc>
    66e6:	88 23       	and	r24, r24
    66e8:	52 f0       	brmi	.+20     	; 0x66fe <__fp_round+0x20>
    66ea:	bb 0f       	add	r27, r27
    66ec:	40 f4       	brcc	.+16     	; 0x66fe <__fp_round+0x20>
    66ee:	bf 2b       	or	r27, r31
    66f0:	11 f4       	brne	.+4      	; 0x66f6 <__fp_round+0x18>
    66f2:	60 ff       	sbrs	r22, 0
    66f4:	04 c0       	rjmp	.+8      	; 0x66fe <__fp_round+0x20>
    66f6:	6f 5f       	subi	r22, 0xFF	; 255
    66f8:	7f 4f       	sbci	r23, 0xFF	; 255
    66fa:	8f 4f       	sbci	r24, 0xFF	; 255
    66fc:	9f 4f       	sbci	r25, 0xFF	; 255
    66fe:	08 95       	ret

00006700 <__fp_split3>:
    6700:	57 fd       	sbrc	r21, 7
    6702:	90 58       	subi	r25, 0x80	; 128
    6704:	44 0f       	add	r20, r20
    6706:	55 1f       	adc	r21, r21
    6708:	59 f0       	breq	.+22     	; 0x6720 <__fp_splitA+0x10>
    670a:	5f 3f       	cpi	r21, 0xFF	; 255
    670c:	71 f0       	breq	.+28     	; 0x672a <__fp_splitA+0x1a>
    670e:	47 95       	ror	r20

00006710 <__fp_splitA>:
    6710:	88 0f       	add	r24, r24
    6712:	97 fb       	bst	r25, 7
    6714:	99 1f       	adc	r25, r25
    6716:	61 f0       	breq	.+24     	; 0x6730 <__fp_splitA+0x20>
    6718:	9f 3f       	cpi	r25, 0xFF	; 255
    671a:	79 f0       	breq	.+30     	; 0x673a <__fp_splitA+0x2a>
    671c:	87 95       	ror	r24
    671e:	08 95       	ret
    6720:	12 16       	cp	r1, r18
    6722:	13 06       	cpc	r1, r19
    6724:	14 06       	cpc	r1, r20
    6726:	55 1f       	adc	r21, r21
    6728:	f2 cf       	rjmp	.-28     	; 0x670e <__fp_split3+0xe>
    672a:	46 95       	lsr	r20
    672c:	f1 df       	rcall	.-30     	; 0x6710 <__fp_splitA>
    672e:	08 c0       	rjmp	.+16     	; 0x6740 <__fp_splitA+0x30>
    6730:	16 16       	cp	r1, r22
    6732:	17 06       	cpc	r1, r23
    6734:	18 06       	cpc	r1, r24
    6736:	99 1f       	adc	r25, r25
    6738:	f1 cf       	rjmp	.-30     	; 0x671c <__fp_splitA+0xc>
    673a:	86 95       	lsr	r24
    673c:	71 05       	cpc	r23, r1
    673e:	61 05       	cpc	r22, r1
    6740:	08 94       	sec
    6742:	08 95       	ret

00006744 <__fp_zero>:
    6744:	e8 94       	clt

00006746 <__fp_szero>:
    6746:	bb 27       	eor	r27, r27
    6748:	66 27       	eor	r22, r22
    674a:	77 27       	eor	r23, r23
    674c:	cb 01       	movw	r24, r22
    674e:	97 f9       	bld	r25, 7
    6750:	08 95       	ret

00006752 <__mulsf3>:
    6752:	0b d0       	rcall	.+22     	; 0x676a <__mulsf3x>
    6754:	c4 cf       	rjmp	.-120    	; 0x66de <__fp_round>
    6756:	b5 df       	rcall	.-150    	; 0x66c2 <__fp_pscA>
    6758:	28 f0       	brcs	.+10     	; 0x6764 <__mulsf3+0x12>
    675a:	ba df       	rcall	.-140    	; 0x66d0 <__fp_pscB>
    675c:	18 f0       	brcs	.+6      	; 0x6764 <__mulsf3+0x12>
    675e:	95 23       	and	r25, r21
    6760:	09 f0       	breq	.+2      	; 0x6764 <__mulsf3+0x12>
    6762:	a6 cf       	rjmp	.-180    	; 0x66b0 <__fp_inf>
    6764:	ab cf       	rjmp	.-170    	; 0x66bc <__fp_nan>
    6766:	11 24       	eor	r1, r1
    6768:	ee cf       	rjmp	.-36     	; 0x6746 <__fp_szero>

0000676a <__mulsf3x>:
    676a:	ca df       	rcall	.-108    	; 0x6700 <__fp_split3>
    676c:	a0 f3       	brcs	.-24     	; 0x6756 <__mulsf3+0x4>

0000676e <__mulsf3_pse>:
    676e:	95 9f       	mul	r25, r21
    6770:	d1 f3       	breq	.-12     	; 0x6766 <__mulsf3+0x14>
    6772:	95 0f       	add	r25, r21
    6774:	50 e0       	ldi	r21, 0x00	; 0
    6776:	55 1f       	adc	r21, r21
    6778:	62 9f       	mul	r22, r18
    677a:	f0 01       	movw	r30, r0
    677c:	72 9f       	mul	r23, r18
    677e:	bb 27       	eor	r27, r27
    6780:	f0 0d       	add	r31, r0
    6782:	b1 1d       	adc	r27, r1
    6784:	63 9f       	mul	r22, r19
    6786:	aa 27       	eor	r26, r26
    6788:	f0 0d       	add	r31, r0
    678a:	b1 1d       	adc	r27, r1
    678c:	aa 1f       	adc	r26, r26
    678e:	64 9f       	mul	r22, r20
    6790:	66 27       	eor	r22, r22
    6792:	b0 0d       	add	r27, r0
    6794:	a1 1d       	adc	r26, r1
    6796:	66 1f       	adc	r22, r22
    6798:	82 9f       	mul	r24, r18
    679a:	22 27       	eor	r18, r18
    679c:	b0 0d       	add	r27, r0
    679e:	a1 1d       	adc	r26, r1
    67a0:	62 1f       	adc	r22, r18
    67a2:	73 9f       	mul	r23, r19
    67a4:	b0 0d       	add	r27, r0
    67a6:	a1 1d       	adc	r26, r1
    67a8:	62 1f       	adc	r22, r18
    67aa:	83 9f       	mul	r24, r19
    67ac:	a0 0d       	add	r26, r0
    67ae:	61 1d       	adc	r22, r1
    67b0:	22 1f       	adc	r18, r18
    67b2:	74 9f       	mul	r23, r20
    67b4:	33 27       	eor	r19, r19
    67b6:	a0 0d       	add	r26, r0
    67b8:	61 1d       	adc	r22, r1
    67ba:	23 1f       	adc	r18, r19
    67bc:	84 9f       	mul	r24, r20
    67be:	60 0d       	add	r22, r0
    67c0:	21 1d       	adc	r18, r1
    67c2:	82 2f       	mov	r24, r18
    67c4:	76 2f       	mov	r23, r22
    67c6:	6a 2f       	mov	r22, r26
    67c8:	11 24       	eor	r1, r1
    67ca:	9f 57       	subi	r25, 0x7F	; 127
    67cc:	50 40       	sbci	r21, 0x00	; 0
    67ce:	8a f0       	brmi	.+34     	; 0x67f2 <__mulsf3_pse+0x84>
    67d0:	e1 f0       	breq	.+56     	; 0x680a <__mulsf3_pse+0x9c>
    67d2:	88 23       	and	r24, r24
    67d4:	4a f0       	brmi	.+18     	; 0x67e8 <__mulsf3_pse+0x7a>
    67d6:	ee 0f       	add	r30, r30
    67d8:	ff 1f       	adc	r31, r31
    67da:	bb 1f       	adc	r27, r27
    67dc:	66 1f       	adc	r22, r22
    67de:	77 1f       	adc	r23, r23
    67e0:	88 1f       	adc	r24, r24
    67e2:	91 50       	subi	r25, 0x01	; 1
    67e4:	50 40       	sbci	r21, 0x00	; 0
    67e6:	a9 f7       	brne	.-22     	; 0x67d2 <__mulsf3_pse+0x64>
    67e8:	9e 3f       	cpi	r25, 0xFE	; 254
    67ea:	51 05       	cpc	r21, r1
    67ec:	70 f0       	brcs	.+28     	; 0x680a <__mulsf3_pse+0x9c>
    67ee:	60 cf       	rjmp	.-320    	; 0x66b0 <__fp_inf>
    67f0:	aa cf       	rjmp	.-172    	; 0x6746 <__fp_szero>
    67f2:	5f 3f       	cpi	r21, 0xFF	; 255
    67f4:	ec f3       	brlt	.-6      	; 0x67f0 <__mulsf3_pse+0x82>
    67f6:	98 3e       	cpi	r25, 0xE8	; 232
    67f8:	dc f3       	brlt	.-10     	; 0x67f0 <__mulsf3_pse+0x82>
    67fa:	86 95       	lsr	r24
    67fc:	77 95       	ror	r23
    67fe:	67 95       	ror	r22
    6800:	b7 95       	ror	r27
    6802:	f7 95       	ror	r31
    6804:	e7 95       	ror	r30
    6806:	9f 5f       	subi	r25, 0xFF	; 255
    6808:	c1 f7       	brne	.-16     	; 0x67fa <__mulsf3_pse+0x8c>
    680a:	fe 2b       	or	r31, r30
    680c:	88 0f       	add	r24, r24
    680e:	91 1d       	adc	r25, r1
    6810:	96 95       	lsr	r25
    6812:	87 95       	ror	r24
    6814:	97 f9       	bld	r25, 7
    6816:	08 95       	ret

00006818 <__mulsi3>:
    6818:	db 01       	movw	r26, r22
    681a:	8f 93       	push	r24
    681c:	9f 93       	push	r25
    681e:	8e d0       	rcall	.+284    	; 0x693c <__muluhisi3>
    6820:	bf 91       	pop	r27
    6822:	af 91       	pop	r26
    6824:	a2 9f       	mul	r26, r18
    6826:	80 0d       	add	r24, r0
    6828:	91 1d       	adc	r25, r1
    682a:	a3 9f       	mul	r26, r19
    682c:	90 0d       	add	r25, r0
    682e:	b2 9f       	mul	r27, r18
    6830:	90 0d       	add	r25, r0
    6832:	11 24       	eor	r1, r1
    6834:	08 95       	ret

00006836 <__udivmodhi4>:
    6836:	aa 1b       	sub	r26, r26
    6838:	bb 1b       	sub	r27, r27
    683a:	51 e1       	ldi	r21, 0x11	; 17
    683c:	07 c0       	rjmp	.+14     	; 0x684c <__udivmodhi4_ep>

0000683e <__udivmodhi4_loop>:
    683e:	aa 1f       	adc	r26, r26
    6840:	bb 1f       	adc	r27, r27
    6842:	a6 17       	cp	r26, r22
    6844:	b7 07       	cpc	r27, r23
    6846:	10 f0       	brcs	.+4      	; 0x684c <__udivmodhi4_ep>
    6848:	a6 1b       	sub	r26, r22
    684a:	b7 0b       	sbc	r27, r23

0000684c <__udivmodhi4_ep>:
    684c:	88 1f       	adc	r24, r24
    684e:	99 1f       	adc	r25, r25
    6850:	5a 95       	dec	r21
    6852:	a9 f7       	brne	.-22     	; 0x683e <__udivmodhi4_loop>
    6854:	80 95       	com	r24
    6856:	90 95       	com	r25
    6858:	bc 01       	movw	r22, r24
    685a:	cd 01       	movw	r24, r26
    685c:	08 95       	ret

0000685e <__divmodhi4>:
    685e:	97 fb       	bst	r25, 7
    6860:	07 2e       	mov	r0, r23
    6862:	16 f4       	brtc	.+4      	; 0x6868 <__divmodhi4+0xa>
    6864:	00 94       	com	r0
    6866:	06 d0       	rcall	.+12     	; 0x6874 <__divmodhi4_neg1>
    6868:	77 fd       	sbrc	r23, 7
    686a:	08 d0       	rcall	.+16     	; 0x687c <__divmodhi4_neg2>
    686c:	e4 df       	rcall	.-56     	; 0x6836 <__udivmodhi4>
    686e:	07 fc       	sbrc	r0, 7
    6870:	05 d0       	rcall	.+10     	; 0x687c <__divmodhi4_neg2>
    6872:	3e f4       	brtc	.+14     	; 0x6882 <__divmodhi4_exit>

00006874 <__divmodhi4_neg1>:
    6874:	90 95       	com	r25
    6876:	81 95       	neg	r24
    6878:	9f 4f       	sbci	r25, 0xFF	; 255
    687a:	08 95       	ret

0000687c <__divmodhi4_neg2>:
    687c:	70 95       	com	r23
    687e:	61 95       	neg	r22
    6880:	7f 4f       	sbci	r23, 0xFF	; 255

00006882 <__divmodhi4_exit>:
    6882:	08 95       	ret

00006884 <__udivmodsi4>:
    6884:	a1 e2       	ldi	r26, 0x21	; 33
    6886:	1a 2e       	mov	r1, r26
    6888:	aa 1b       	sub	r26, r26
    688a:	bb 1b       	sub	r27, r27
    688c:	fd 01       	movw	r30, r26
    688e:	0d c0       	rjmp	.+26     	; 0x68aa <__udivmodsi4_ep>

00006890 <__udivmodsi4_loop>:
    6890:	aa 1f       	adc	r26, r26
    6892:	bb 1f       	adc	r27, r27
    6894:	ee 1f       	adc	r30, r30
    6896:	ff 1f       	adc	r31, r31
    6898:	a2 17       	cp	r26, r18
    689a:	b3 07       	cpc	r27, r19
    689c:	e4 07       	cpc	r30, r20
    689e:	f5 07       	cpc	r31, r21
    68a0:	20 f0       	brcs	.+8      	; 0x68aa <__udivmodsi4_ep>
    68a2:	a2 1b       	sub	r26, r18
    68a4:	b3 0b       	sbc	r27, r19
    68a6:	e4 0b       	sbc	r30, r20
    68a8:	f5 0b       	sbc	r31, r21

000068aa <__udivmodsi4_ep>:
    68aa:	66 1f       	adc	r22, r22
    68ac:	77 1f       	adc	r23, r23
    68ae:	88 1f       	adc	r24, r24
    68b0:	99 1f       	adc	r25, r25
    68b2:	1a 94       	dec	r1
    68b4:	69 f7       	brne	.-38     	; 0x6890 <__udivmodsi4_loop>
    68b6:	60 95       	com	r22
    68b8:	70 95       	com	r23
    68ba:	80 95       	com	r24
    68bc:	90 95       	com	r25
    68be:	9b 01       	movw	r18, r22
    68c0:	ac 01       	movw	r20, r24
    68c2:	bd 01       	movw	r22, r26
    68c4:	cf 01       	movw	r24, r30
    68c6:	08 95       	ret

000068c8 <__divmodsi4>:
    68c8:	05 2e       	mov	r0, r21
    68ca:	97 fb       	bst	r25, 7
    68cc:	16 f4       	brtc	.+4      	; 0x68d2 <__divmodsi4+0xa>
    68ce:	00 94       	com	r0
    68d0:	0f d0       	rcall	.+30     	; 0x68f0 <__negsi2>
    68d2:	57 fd       	sbrc	r21, 7
    68d4:	05 d0       	rcall	.+10     	; 0x68e0 <__divmodsi4_neg2>
    68d6:	d6 df       	rcall	.-84     	; 0x6884 <__udivmodsi4>
    68d8:	07 fc       	sbrc	r0, 7
    68da:	02 d0       	rcall	.+4      	; 0x68e0 <__divmodsi4_neg2>
    68dc:	46 f4       	brtc	.+16     	; 0x68ee <__divmodsi4_exit>
    68de:	08 c0       	rjmp	.+16     	; 0x68f0 <__negsi2>

000068e0 <__divmodsi4_neg2>:
    68e0:	50 95       	com	r21
    68e2:	40 95       	com	r20
    68e4:	30 95       	com	r19
    68e6:	21 95       	neg	r18
    68e8:	3f 4f       	sbci	r19, 0xFF	; 255
    68ea:	4f 4f       	sbci	r20, 0xFF	; 255
    68ec:	5f 4f       	sbci	r21, 0xFF	; 255

000068ee <__divmodsi4_exit>:
    68ee:	08 95       	ret

000068f0 <__negsi2>:
    68f0:	90 95       	com	r25
    68f2:	80 95       	com	r24
    68f4:	70 95       	com	r23
    68f6:	61 95       	neg	r22
    68f8:	7f 4f       	sbci	r23, 0xFF	; 255
    68fa:	8f 4f       	sbci	r24, 0xFF	; 255
    68fc:	9f 4f       	sbci	r25, 0xFF	; 255
    68fe:	08 95       	ret

00006900 <__tablejump2__>:
    6900:	ee 0f       	add	r30, r30
    6902:	ff 1f       	adc	r31, r31
    6904:	00 24       	eor	r0, r0
    6906:	00 1c       	adc	r0, r0
    6908:	0b be       	out	0x3b, r0	; 59
    690a:	07 90       	elpm	r0, Z+
    690c:	f6 91       	elpm	r31, Z
    690e:	e0 2d       	mov	r30, r0
    6910:	09 94       	ijmp

00006912 <__umulhisi3>:
    6912:	a2 9f       	mul	r26, r18
    6914:	b0 01       	movw	r22, r0
    6916:	b3 9f       	mul	r27, r19
    6918:	c0 01       	movw	r24, r0
    691a:	a3 9f       	mul	r26, r19
    691c:	70 0d       	add	r23, r0
    691e:	81 1d       	adc	r24, r1
    6920:	11 24       	eor	r1, r1
    6922:	91 1d       	adc	r25, r1
    6924:	b2 9f       	mul	r27, r18
    6926:	70 0d       	add	r23, r0
    6928:	81 1d       	adc	r24, r1
    692a:	11 24       	eor	r1, r1
    692c:	91 1d       	adc	r25, r1
    692e:	08 95       	ret

00006930 <__usmulhisi3>:
    6930:	f0 df       	rcall	.-32     	; 0x6912 <__umulhisi3>

00006932 <__usmulhisi3_tail>:
    6932:	b7 ff       	sbrs	r27, 7
    6934:	08 95       	ret
    6936:	82 1b       	sub	r24, r18
    6938:	93 0b       	sbc	r25, r19
    693a:	08 95       	ret

0000693c <__muluhisi3>:
    693c:	ea df       	rcall	.-44     	; 0x6912 <__umulhisi3>
    693e:	a5 9f       	mul	r26, r21
    6940:	90 0d       	add	r25, r0
    6942:	b4 9f       	mul	r27, r20
    6944:	90 0d       	add	r25, r0
    6946:	a4 9f       	mul	r26, r20
    6948:	80 0d       	add	r24, r0
    694a:	91 1d       	adc	r25, r1
    694c:	11 24       	eor	r1, r1
    694e:	08 95       	ret

00006950 <random_r>:
    6950:	8f 92       	push	r8
    6952:	9f 92       	push	r9
    6954:	af 92       	push	r10
    6956:	bf 92       	push	r11
    6958:	cf 92       	push	r12
    695a:	df 92       	push	r13
    695c:	ef 92       	push	r14
    695e:	ff 92       	push	r15
    6960:	cf 93       	push	r28
    6962:	df 93       	push	r29
    6964:	ec 01       	movw	r28, r24
    6966:	68 81       	ld	r22, Y
    6968:	79 81       	ldd	r23, Y+1	; 0x01
    696a:	8a 81       	ldd	r24, Y+2	; 0x02
    696c:	9b 81       	ldd	r25, Y+3	; 0x03
    696e:	61 15       	cp	r22, r1
    6970:	71 05       	cpc	r23, r1
    6972:	81 05       	cpc	r24, r1
    6974:	91 05       	cpc	r25, r1
    6976:	21 f4       	brne	.+8      	; 0x6980 <random_r+0x30>
    6978:	64 e2       	ldi	r22, 0x24	; 36
    697a:	79 ed       	ldi	r23, 0xD9	; 217
    697c:	8b e5       	ldi	r24, 0x5B	; 91
    697e:	97 e0       	ldi	r25, 0x07	; 7
    6980:	2d e1       	ldi	r18, 0x1D	; 29
    6982:	33 ef       	ldi	r19, 0xF3	; 243
    6984:	41 e0       	ldi	r20, 0x01	; 1
    6986:	50 e0       	ldi	r21, 0x00	; 0
    6988:	9f df       	rcall	.-194    	; 0x68c8 <__divmodsi4>
    698a:	49 01       	movw	r8, r18
    698c:	5a 01       	movw	r10, r20
    698e:	9b 01       	movw	r18, r22
    6990:	ac 01       	movw	r20, r24
    6992:	a7 ea       	ldi	r26, 0xA7	; 167
    6994:	b1 e4       	ldi	r27, 0x41	; 65
    6996:	d2 df       	rcall	.-92     	; 0x693c <__muluhisi3>
    6998:	6b 01       	movw	r12, r22
    699a:	7c 01       	movw	r14, r24
    699c:	ac ee       	ldi	r26, 0xEC	; 236
    699e:	b4 ef       	ldi	r27, 0xF4	; 244
    69a0:	a5 01       	movw	r20, r10
    69a2:	94 01       	movw	r18, r8
    69a4:	94 d0       	rcall	.+296    	; 0x6ace <__mulohisi3>
    69a6:	c6 0e       	add	r12, r22
    69a8:	d7 1e       	adc	r13, r23
    69aa:	e8 1e       	adc	r14, r24
    69ac:	f9 1e       	adc	r15, r25
    69ae:	f7 fe       	sbrs	r15, 7
    69b0:	06 c0       	rjmp	.+12     	; 0x69be <random_r+0x6e>
    69b2:	81 e0       	ldi	r24, 0x01	; 1
    69b4:	c8 1a       	sub	r12, r24
    69b6:	d1 08       	sbc	r13, r1
    69b8:	e1 08       	sbc	r14, r1
    69ba:	80 e8       	ldi	r24, 0x80	; 128
    69bc:	f8 0a       	sbc	r15, r24
    69be:	c8 82       	st	Y, r12
    69c0:	d9 82       	std	Y+1, r13	; 0x01
    69c2:	ea 82       	std	Y+2, r14	; 0x02
    69c4:	fb 82       	std	Y+3, r15	; 0x03
    69c6:	c7 01       	movw	r24, r14
    69c8:	b6 01       	movw	r22, r12
    69ca:	9f 77       	andi	r25, 0x7F	; 127
    69cc:	df 91       	pop	r29
    69ce:	cf 91       	pop	r28
    69d0:	ff 90       	pop	r15
    69d2:	ef 90       	pop	r14
    69d4:	df 90       	pop	r13
    69d6:	cf 90       	pop	r12
    69d8:	bf 90       	pop	r11
    69da:	af 90       	pop	r10
    69dc:	9f 90       	pop	r9
    69de:	8f 90       	pop	r8
    69e0:	08 95       	ret

000069e2 <random>:
    69e2:	8f 92       	push	r8
    69e4:	9f 92       	push	r9
    69e6:	af 92       	push	r10
    69e8:	bf 92       	push	r11
    69ea:	cf 92       	push	r12
    69ec:	df 92       	push	r13
    69ee:	ef 92       	push	r14
    69f0:	ff 92       	push	r15
    69f2:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    69f6:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    69fa:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    69fe:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    6a02:	61 15       	cp	r22, r1
    6a04:	71 05       	cpc	r23, r1
    6a06:	81 05       	cpc	r24, r1
    6a08:	91 05       	cpc	r25, r1
    6a0a:	21 f4       	brne	.+8      	; 0x6a14 <random+0x32>
    6a0c:	64 e2       	ldi	r22, 0x24	; 36
    6a0e:	79 ed       	ldi	r23, 0xD9	; 217
    6a10:	8b e5       	ldi	r24, 0x5B	; 91
    6a12:	97 e0       	ldi	r25, 0x07	; 7
    6a14:	2d e1       	ldi	r18, 0x1D	; 29
    6a16:	33 ef       	ldi	r19, 0xF3	; 243
    6a18:	41 e0       	ldi	r20, 0x01	; 1
    6a1a:	50 e0       	ldi	r21, 0x00	; 0
    6a1c:	55 df       	rcall	.-342    	; 0x68c8 <__divmodsi4>
    6a1e:	49 01       	movw	r8, r18
    6a20:	5a 01       	movw	r10, r20
    6a22:	9b 01       	movw	r18, r22
    6a24:	ac 01       	movw	r20, r24
    6a26:	a7 ea       	ldi	r26, 0xA7	; 167
    6a28:	b1 e4       	ldi	r27, 0x41	; 65
    6a2a:	88 df       	rcall	.-240    	; 0x693c <__muluhisi3>
    6a2c:	6b 01       	movw	r12, r22
    6a2e:	7c 01       	movw	r14, r24
    6a30:	ac ee       	ldi	r26, 0xEC	; 236
    6a32:	b4 ef       	ldi	r27, 0xF4	; 244
    6a34:	a5 01       	movw	r20, r10
    6a36:	94 01       	movw	r18, r8
    6a38:	4a d0       	rcall	.+148    	; 0x6ace <__mulohisi3>
    6a3a:	c6 0e       	add	r12, r22
    6a3c:	d7 1e       	adc	r13, r23
    6a3e:	e8 1e       	adc	r14, r24
    6a40:	f9 1e       	adc	r15, r25
    6a42:	f7 fe       	sbrs	r15, 7
    6a44:	06 c0       	rjmp	.+12     	; 0x6a52 <random+0x70>
    6a46:	81 e0       	ldi	r24, 0x01	; 1
    6a48:	c8 1a       	sub	r12, r24
    6a4a:	d1 08       	sbc	r13, r1
    6a4c:	e1 08       	sbc	r14, r1
    6a4e:	80 e8       	ldi	r24, 0x80	; 128
    6a50:	f8 0a       	sbc	r15, r24
    6a52:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    6a56:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    6a5a:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    6a5e:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    6a62:	c7 01       	movw	r24, r14
    6a64:	b6 01       	movw	r22, r12
    6a66:	9f 77       	andi	r25, 0x7F	; 127
    6a68:	ff 90       	pop	r15
    6a6a:	ef 90       	pop	r14
    6a6c:	df 90       	pop	r13
    6a6e:	cf 90       	pop	r12
    6a70:	bf 90       	pop	r11
    6a72:	af 90       	pop	r10
    6a74:	9f 90       	pop	r9
    6a76:	8f 90       	pop	r8
    6a78:	08 95       	ret

00006a7a <srandom>:
    6a7a:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    6a7e:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    6a82:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    6a86:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    6a8a:	08 95       	ret

00006a8c <memcpy>:
    6a8c:	fb 01       	movw	r30, r22
    6a8e:	dc 01       	movw	r26, r24
    6a90:	02 c0       	rjmp	.+4      	; 0x6a96 <memcpy+0xa>
    6a92:	01 90       	ld	r0, Z+
    6a94:	0d 92       	st	X+, r0
    6a96:	41 50       	subi	r20, 0x01	; 1
    6a98:	50 40       	sbci	r21, 0x00	; 0
    6a9a:	d8 f7       	brcc	.-10     	; 0x6a92 <memcpy+0x6>
    6a9c:	08 95       	ret

00006a9e <strcpy>:
    6a9e:	fb 01       	movw	r30, r22
    6aa0:	dc 01       	movw	r26, r24
    6aa2:	01 90       	ld	r0, Z+
    6aa4:	0d 92       	st	X+, r0
    6aa6:	00 20       	and	r0, r0
    6aa8:	e1 f7       	brne	.-8      	; 0x6aa2 <strcpy+0x4>
    6aaa:	08 95       	ret

00006aac <strncpy>:
    6aac:	fb 01       	movw	r30, r22
    6aae:	dc 01       	movw	r26, r24
    6ab0:	41 50       	subi	r20, 0x01	; 1
    6ab2:	50 40       	sbci	r21, 0x00	; 0
    6ab4:	48 f0       	brcs	.+18     	; 0x6ac8 <strncpy+0x1c>
    6ab6:	01 90       	ld	r0, Z+
    6ab8:	0d 92       	st	X+, r0
    6aba:	00 20       	and	r0, r0
    6abc:	c9 f7       	brne	.-14     	; 0x6ab0 <strncpy+0x4>
    6abe:	01 c0       	rjmp	.+2      	; 0x6ac2 <strncpy+0x16>
    6ac0:	1d 92       	st	X+, r1
    6ac2:	41 50       	subi	r20, 0x01	; 1
    6ac4:	50 40       	sbci	r21, 0x00	; 0
    6ac6:	e0 f7       	brcc	.-8      	; 0x6ac0 <strncpy+0x14>
    6ac8:	08 95       	ret

00006aca <__mulshisi3>:
    6aca:	b7 ff       	sbrs	r27, 7
    6acc:	37 cf       	rjmp	.-402    	; 0x693c <__muluhisi3>

00006ace <__mulohisi3>:
    6ace:	36 df       	rcall	.-404    	; 0x693c <__muluhisi3>
    6ad0:	82 1b       	sub	r24, r18
    6ad2:	93 0b       	sbc	r25, r19
    6ad4:	08 95       	ret

00006ad6 <__do_global_dtors>:
    6ad6:	13 e0       	ldi	r17, 0x03	; 3
    6ad8:	c5 eb       	ldi	r28, 0xB5	; 181
    6ada:	d3 e0       	ldi	r29, 0x03	; 3
    6adc:	03 c0       	rjmp	.+6      	; 0x6ae4 <__do_global_dtors+0xe>
    6ade:	fe 01       	movw	r30, r28
    6ae0:	0f df       	rcall	.-482    	; 0x6900 <__tablejump2__>
    6ae2:	21 96       	adiw	r28, 0x01	; 1
    6ae4:	c6 3b       	cpi	r28, 0xB6	; 182
    6ae6:	d1 07       	cpc	r29, r17
    6ae8:	d1 f7       	brne	.-12     	; 0x6ade <__do_global_dtors+0x8>
    6aea:	f8 94       	cli

00006aec <__stop_program>:
    6aec:	ff cf       	rjmp	.-2      	; 0x6aec <__stop_program>
