
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c4       	rjmp	.+2154   	; 0x86c <__dtors_end>
       2:	00 00       	nop
       4:	5d c4       	rjmp	.+2234   	; 0x8c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c4       	rjmp	.+2230   	; 0x8c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c4       	rjmp	.+2226   	; 0x8c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c4       	rjmp	.+2222   	; 0x8c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c4       	rjmp	.+2218   	; 0x8c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c4       	rjmp	.+2214   	; 0x8c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c4       	rjmp	.+2210   	; 0x8c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c4       	rjmp	.+2206   	; 0x8c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c4       	rjmp	.+2202   	; 0x8c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 f9 42 	jmp	0x85f2	; 0x85f2 <__vector_10>
      2c:	0c 94 76 43 	jmp	0x86ec	; 0x86ec <__vector_11>
      30:	47 c4       	rjmp	.+2190   	; 0x8c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c4       	rjmp	.+2186   	; 0x8c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c4       	rjmp	.+2182   	; 0x8c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c4       	rjmp	.+2178   	; 0x8c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c4       	rjmp	.+2174   	; 0x8c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c4       	rjmp	.+2170   	; 0x8c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c4       	rjmp	.+2166   	; 0x8c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c4       	rjmp	.+2162   	; 0x8c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c4       	rjmp	.+2158   	; 0x8c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c4       	rjmp	.+2154   	; 0x8c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c4       	rjmp	.+2150   	; 0x8c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 58 42 	jmp	0x84b0	; 0x84b0 <__vector_23>
      60:	2f c4       	rjmp	.+2142   	; 0x8c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 b4 45 	jmp	0x8b68	; 0x8b68 <__vector_25>
      68:	0c 94 df 45 	jmp	0x8bbe	; 0x8bbe <__vector_26>
      6c:	0c 94 10 46 	jmp	0x8c20	; 0x8c20 <__vector_27>
      70:	27 c4       	rjmp	.+2126   	; 0x8c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c4       	rjmp	.+2122   	; 0x8c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c4       	rjmp	.+2118   	; 0x8c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c4       	rjmp	.+2114   	; 0x8c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 02 1b 	jmp	0x3604	; 0x3604 <__vector_32>
      84:	1d c4       	rjmp	.+2106   	; 0x8c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c4       	rjmp	.+2102   	; 0x8c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 c4       	rjmp	.+2098   	; 0x8c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	17 c4       	rjmp	.+2094   	; 0x8c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c4       	rjmp	.+2090   	; 0x8c0 <__bad_interrupt>
	...

00000098 <MatrixColors_p>:
      98:	00 10 00 00 00 30 00 00 00 50 00 00 00 70 00 00     .....0...P...p..
      a8:	00 80 00 00 00 80 00 00 00 80 00 00 19 8d 19 00     ................
      b8:	33 99 33 00 4d a6 4d 00 66 b3 66 00 80 c0 80 00     3.3.M.M.f.f.....
      c8:	99 cc 99 00 b3 d9 b3 00 cc e6 cc 00 e6 f2 e6 00     ................

000000d8 <font>:
      d8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      e8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      f8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     108:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     118:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     128:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     138:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     148:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     158:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     168:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     178:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     188:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     198:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1a8:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1b8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1c8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     1d8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1e8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1f8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     208:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     218:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     228:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     238:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     248:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     258:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     268:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     278:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     288:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     298:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2a8:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2b8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2c8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2d8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2e8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2f8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     308:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     318:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     328:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     338:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     348:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     358:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     368:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     378:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     388:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     398:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3a8:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3b8:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3c8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     3d8:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     3e8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3f8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     408:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     418:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     428:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     438:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     448:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     458:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     468:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     478:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     488:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     498:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4a8:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4b8:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4c8:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     4d8:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     4e8:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4f8:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     508:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     518:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     528:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     538:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     548:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     558:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     568:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     578:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     588:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     598:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5a8:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5b8:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5c8:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000005d8 <gamma6>:
     5d8:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5e8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5f8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     608:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

00000618 <gamma5>:
     618:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     628:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

00000638 <PartyColors_p>:
     638:	ab 00 55 00 7c 00 84 00 4b 00 b5 00 1b 00 e5 00     ..U.|...K.......
     648:	00 17 e8 00 00 47 b8 00 00 77 ab 00 00 ab ab 00     .....G...w......
     658:	00 55 ab 00 00 22 dd 00 0e 00 f2 00 3e 00 c2 00     .U..."......>...
     668:	71 00 8f 00 a1 00 5f 00 d0 00 2f 00 f9 07 00 00     q....._.../.....

00000678 <RainbowStripeColors_p>:
     678:	00 00 ff 00 00 00 00 00 00 55 ab 00 00 00 00 00     .........U......
     688:	00 ab ab 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     698:	55 ab 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     U...............
     6a8:	ab 00 55 00 00 00 00 00 55 00 ab 00 00 00 00 00     ..U.....U.......

000006b8 <RainbowColors_p>:
     6b8:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     6c8:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     6d8:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     6e8:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

000006f8 <CloudColors_p>:
     6f8:	ff 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     708:	8b 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     718:	ff 00 00 00 8b 00 00 00 eb ce 87 00 eb ce 87 00     ................
     728:	e6 d8 ad 00 ff ff ff 00 e6 d8 ad 00 eb ce 87 00     ................

00000738 <digital_pin_table_PGM>:
     738:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     748:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     758:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     768:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     778:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     788:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000794 <descriptor_list>:
     794:	00 01 00 00 45 08 12 00 02 00 00 02 08 43 00 03     ....E........C..
     7a4:	00 00 fe 07 04 01 03 09 04 e4 07 18 02 03 09 04     ................
     7b4:	cc 07 16 03 03 09 04 be 07 0c                       ..........

000007be <string3>:
     7be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000007cc <string2>:
     7cc:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     7dc:	69 00 61 00 6c 00 00 00                             i.a.l...

000007e4 <string1>:
     7e4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     7f4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000007fe <string0>:
     7fe:	04 03 09 04                                         ....

00000802 <config1_descriptor>:
     802:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     812:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     822:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     832:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     842:	40 00 00                                            @..

00000845 <device_descriptor>:
     845:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     855:	03 01                                               ..

00000857 <endpoint_config_table>:
     857:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000862 <__ctors_start>:
     862:	dc 2e       	mov	r13, r28
     864:	d4 3d       	cpi	r29, 0xD4	; 212
     866:	2e 46       	sbci	r18, 0x6E	; 110
     868:	f3 48       	sbci	r31, 0x83	; 131

0000086a <__ctors_end>:
     86a:	57 2f       	mov	r21, r23

0000086c <__dtors_end>:
     86c:	11 24       	eor	r1, r1
     86e:	1f be       	out	0x3f, r1	; 63
     870:	cf ef       	ldi	r28, 0xFF	; 255
     872:	d0 e2       	ldi	r29, 0x20	; 32
     874:	de bf       	out	0x3e, r29	; 62
     876:	cd bf       	out	0x3d, r28	; 61

00000878 <__do_copy_data>:
     878:	19 e0       	ldi	r17, 0x09	; 9
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b1 e0       	ldi	r27, 0x01	; 1
     87e:	e2 e3       	ldi	r30, 0x32	; 50
     880:	fa e9       	ldi	r31, 0x9A	; 154
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	0b bf       	out	0x3b, r16	; 59
     886:	02 c0       	rjmp	.+4      	; 0x88c <__do_copy_data+0x14>
     888:	07 90       	elpm	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	a4 35       	cpi	r26, 0x54	; 84
     88e:	b1 07       	cpc	r27, r17
     890:	d9 f7       	brne	.-10     	; 0x888 <__do_copy_data+0x10>

00000892 <__do_clear_bss>:
     892:	20 e1       	ldi	r18, 0x10	; 16
     894:	a4 e5       	ldi	r26, 0x54	; 84
     896:	b9 e0       	ldi	r27, 0x09	; 9
     898:	01 c0       	rjmp	.+2      	; 0x89c <.do_clear_bss_start>

0000089a <.do_clear_bss_loop>:
     89a:	1d 92       	st	X+, r1

0000089c <.do_clear_bss_start>:
     89c:	a9 3d       	cpi	r26, 0xD9	; 217
     89e:	b2 07       	cpc	r27, r18
     8a0:	e1 f7       	brne	.-8      	; 0x89a <.do_clear_bss_loop>

000008a2 <__do_global_ctors>:
     8a2:	14 e0       	ldi	r17, 0x04	; 4
     8a4:	c5 e3       	ldi	r28, 0x35	; 53
     8a6:	d4 e0       	ldi	r29, 0x04	; 4
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__do_global_ctors+0x10>
     8aa:	21 97       	sbiw	r28, 0x01	; 1
     8ac:	fe 01       	movw	r30, r28
     8ae:	0e 94 22 4c 	call	0x9844	; 0x9844 <__tablejump2__>
     8b2:	c1 33       	cpi	r28, 0x31	; 49
     8b4:	d1 07       	cpc	r29, r17
     8b6:	c9 f7       	brne	.-14     	; 0x8aa <__do_global_ctors+0x8>
     8b8:	0e 94 3f 46 	call	0x8c7e	; 0x8c7e <main>
     8bc:	0c 94 0d 4d 	jmp	0x9a1a	; 0x9a1a <__do_global_dtors>

000008c0 <__bad_interrupt>:
     8c0:	9f cb       	rjmp	.-2242   	; 0x0 <__vectors>

000008c2 <CLEDController::size()>:

		// delete 1 pixel sometimes
		//if (random(0, 3) == 1) leds[random(0, anz_LEDs)] = CRGB::Black;

		FastLED.show();
	}
     8c2:	fc 01       	movw	r30, r24
     8c4:	85 85       	ldd	r24, Z+13	; 0x0d
     8c6:	96 85       	ldd	r25, Z+14	; 0x0e
     8c8:	08 95       	ret

000008ca <CLEDController::clearLeds(int)>:
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <CLEDController::clearLeds(int)+0x6>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <CLEDController::clearLeds(int)+0x8>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <CLEDController::clearLeds(int)+0xa>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	ab 01       	movw	r20, r22
     8da:	1c 82       	std	Y+4, r1	; 0x04
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	1e 82       	std	Y+6, r1	; 0x06
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	1a 82       	std	Y+2, r1	; 0x02
     8f0:	1b 82       	std	Y+3, r1	; 0x03
     8f2:	9e 01       	movw	r18, r28
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	be 01       	movw	r22, r28
     8fa:	6c 5f       	subi	r22, 0xFC	; 252
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	09 95       	icall
     900:	26 96       	adiw	r28, 0x06	; 6
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <myRemapFn(unsigned int, unsigned int)>:
     912:	67 31       	cpi	r22, 0x17	; 23
     914:	71 05       	cpc	r23, r1
     916:	08 f0       	brcs	.+2      	; 0x91a <myRemapFn(unsigned int, unsigned int)+0x8>
     918:	ef c0       	rjmp	.+478    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     91a:	fb 01       	movw	r30, r22
     91c:	ee 56       	subi	r30, 0x6E	; 110
     91e:	fb 4f       	sbci	r31, 0xFB	; 251
     920:	0c 94 22 4c 	jmp	0x9844	; 0x9844 <__tablejump2__>
     924:	a9 04       	cpc	r10, r9
     926:	b4 04       	cpc	r11, r4
     928:	bc 04       	cpc	r11, r12
     92a:	c9 04       	cpc	r12, r9
     92c:	d4 04       	cpc	r13, r4
     92e:	db 04       	cpc	r13, r11
     930:	e2 04       	cpc	r14, r2
     932:	e9 04       	cpc	r14, r9
     934:	f3 04       	cpc	r15, r3
     936:	fd 04       	cpc	r15, r13
     938:	07 05       	cpc	r16, r7
     93a:	11 05       	cpc	r17, r1
     93c:	1b 05       	cpc	r17, r11
     93e:	25 05       	cpc	r18, r5
     940:	2f 05       	cpc	r18, r15
     942:	37 05       	cpc	r19, r7
     944:	3f 05       	cpc	r19, r15
     946:	46 05       	cpc	r20, r6
     948:	4d 05       	cpc	r20, r13
     94a:	54 05       	cpc	r21, r4
     94c:	5e 05       	cpc	r21, r14
     94e:	68 05       	cpc	r22, r8
     950:	72 05       	cpc	r23, r2
     952:	04 97       	sbiw	r24, 0x04	; 4
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	08 f0       	brcs	.+2      	; 0x95c <myRemapFn(unsigned int, unsigned int)+0x4a>
     95a:	ce c0       	rjmp	.+412    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     95c:	84 52       	subi	r24, 0x24	; 36
     95e:	9b 4f       	sbci	r25, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	08 95       	ret
     968:	02 97       	sbiw	r24, 0x02	; 2
     96a:	86 30       	cpi	r24, 0x06	; 6
     96c:	91 05       	cpc	r25, r1
     96e:	08 f0       	brcs	.+2      	; 0x972 <myRemapFn(unsigned int, unsigned int)+0x60>
     970:	c3 c0       	rjmp	.+390    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     972:	8a 52       	subi	r24, 0x2A	; 42
     974:	9b 4f       	sbci	r25, 0xFB	; 251
     976:	f4 cf       	rjmp	.-24     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	83 31       	cpi	r24, 0x13	; 19
     97c:	91 05       	cpc	r25, r1
     97e:	08 f0       	brcs	.+2      	; 0x982 <myRemapFn(unsigned int, unsigned int)+0x70>
     980:	bb c0       	rjmp	.+374    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	fc 01       	movw	r30, r24
     988:	e0 55       	subi	r30, 0x50	; 80
     98a:	fb 4f       	sbci	r31, 0xFB	; 251
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	08 95       	ret
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	85 31       	cpi	r24, 0x15	; 21
     996:	91 05       	cpc	r25, r1
     998:	08 f0       	brcs	.+2      	; 0x99c <myRemapFn(unsigned int, unsigned int)+0x8a>
     99a:	ae c0       	rjmp	.+348    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	fc 01       	movw	r30, r24
     9a2:	ea 57       	subi	r30, 0x7A	; 122
     9a4:	fb 4f       	sbci	r31, 0xFB	; 251
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9a8:	84 31       	cpi	r24, 0x14	; 20
     9aa:	91 05       	cpc	r25, r1
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <myRemapFn(unsigned int, unsigned int)+0x9e>
     9ae:	a4 c0       	rjmp	.+328    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9b0:	8e 58       	subi	r24, 0x8E	; 142
     9b2:	9b 4f       	sbci	r25, 0xFB	; 251
     9b4:	d5 cf       	rjmp	.-86     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9b6:	84 31       	cpi	r24, 0x14	; 20
     9b8:	91 05       	cpc	r25, r1
     9ba:	08 f0       	brcs	.+2      	; 0x9be <myRemapFn(unsigned int, unsigned int)+0xac>
     9bc:	9d c0       	rjmp	.+314    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9be:	82 5a       	subi	r24, 0xA2	; 162
     9c0:	9b 4f       	sbci	r25, 0xFB	; 251
     9c2:	ce cf       	rjmp	.-100    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9c4:	8f 30       	cpi	r24, 0x0F	; 15
     9c6:	91 05       	cpc	r25, r1
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <myRemapFn(unsigned int, unsigned int)+0xba>
     9ca:	96 c0       	rjmp	.+300    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9cc:	81 5b       	subi	r24, 0xB1	; 177
     9ce:	9b 4f       	sbci	r25, 0xFB	; 251
     9d0:	c7 cf       	rjmp	.-114    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9d2:	8f 30       	cpi	r24, 0x0F	; 15
     9d4:	91 05       	cpc	r25, r1
     9d6:	08 f0       	brcs	.+2      	; 0x9da <myRemapFn(unsigned int, unsigned int)+0xc8>
     9d8:	8f c0       	rjmp	.+286    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	fc 01       	movw	r30, r24
     9e0:	ef 5c       	subi	r30, 0xCF	; 207
     9e2:	fb 4f       	sbci	r31, 0xFB	; 251
     9e4:	d3 cf       	rjmp	.-90     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e6:	8f 30       	cpi	r24, 0x0F	; 15
     9e8:	91 05       	cpc	r25, r1
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <myRemapFn(unsigned int, unsigned int)+0xdc>
     9ec:	85 c0       	rjmp	.+266    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	ed 5e       	subi	r30, 0xED	; 237
     9f6:	fb 4f       	sbci	r31, 0xFB	; 251
     9f8:	c9 cf       	rjmp	.-110    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9fa:	8f 30       	cpi	r24, 0x0F	; 15
     9fc:	91 05       	cpc	r25, r1
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <myRemapFn(unsigned int, unsigned int)+0xf0>
     a00:	7b c0       	rjmp	.+246    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	fc 01       	movw	r30, r24
     a08:	eb 50       	subi	r30, 0x0B	; 11
     a0a:	fc 4f       	sbci	r31, 0xFC	; 252
     a0c:	bf cf       	rjmp	.-130    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a0e:	8f 30       	cpi	r24, 0x0F	; 15
     a10:	91 05       	cpc	r25, r1
     a12:	08 f0       	brcs	.+2      	; 0xa16 <myRemapFn(unsigned int, unsigned int)+0x104>
     a14:	71 c0       	rjmp	.+226    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	fc 01       	movw	r30, r24
     a1c:	e9 52       	subi	r30, 0x29	; 41
     a1e:	fc 4f       	sbci	r31, 0xFC	; 252
     a20:	b5 cf       	rjmp	.-150    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a22:	8f 30       	cpi	r24, 0x0F	; 15
     a24:	91 05       	cpc	r25, r1
     a26:	08 f0       	brcs	.+2      	; 0xa2a <myRemapFn(unsigned int, unsigned int)+0x118>
     a28:	67 c0       	rjmp	.+206    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	fc 01       	movw	r30, r24
     a30:	e7 54       	subi	r30, 0x47	; 71
     a32:	fc 4f       	sbci	r31, 0xFC	; 252
     a34:	ab cf       	rjmp	.-170    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a36:	8f 30       	cpi	r24, 0x0F	; 15
     a38:	91 05       	cpc	r25, r1
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <myRemapFn(unsigned int, unsigned int)+0x12c>
     a3c:	5d c0       	rjmp	.+186    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	fc 01       	movw	r30, r24
     a44:	e5 56       	subi	r30, 0x65	; 101
     a46:	fc 4f       	sbci	r31, 0xFC	; 252
     a48:	a1 cf       	rjmp	.-190    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a4a:	8f 30       	cpi	r24, 0x0F	; 15
     a4c:	91 05       	cpc	r25, r1
     a4e:	08 f0       	brcs	.+2      	; 0xa52 <myRemapFn(unsigned int, unsigned int)+0x140>
     a50:	53 c0       	rjmp	.+166    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	e3 58       	subi	r30, 0x83	; 131
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	97 cf       	rjmp	.-210    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	8e 30       	cpi	r24, 0x0E	; 14
     a62:	91 05       	cpc	r25, r1
     a64:	08 f0       	brcs	.+2      	; 0xa68 <myRemapFn(unsigned int, unsigned int)+0x156>
     a66:	48 c0       	rjmp	.+144    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a68:	81 59       	subi	r24, 0x91	; 145
     a6a:	9c 4f       	sbci	r25, 0xFC	; 252
     a6c:	79 cf       	rjmp	.-270    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a6e:	02 97       	sbiw	r24, 0x02	; 2
     a70:	81 31       	cpi	r24, 0x11	; 17
     a72:	91 05       	cpc	r25, r1
     a74:	08 f0       	brcs	.+2      	; 0xa78 <myRemapFn(unsigned int, unsigned int)+0x166>
     a76:	40 c0       	rjmp	.+128    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a78:	82 5a       	subi	r24, 0xA2	; 162
     a7a:	9c 4f       	sbci	r25, 0xFC	; 252
     a7c:	71 cf       	rjmp	.-286    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	82 31       	cpi	r24, 0x12	; 18
     a82:	91 05       	cpc	r25, r1
     a84:	c8 f5       	brcc	.+114    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a86:	84 5b       	subi	r24, 0xB4	; 180
     a88:	9c 4f       	sbci	r25, 0xFC	; 252
     a8a:	6a cf       	rjmp	.-300    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	83 31       	cpi	r24, 0x13	; 19
     a90:	91 05       	cpc	r25, r1
     a92:	90 f5       	brcc	.+100    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a94:	87 5c       	subi	r24, 0xC7	; 199
     a96:	9c 4f       	sbci	r25, 0xFC	; 252
     a98:	63 cf       	rjmp	.-314    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	84 31       	cpi	r24, 0x14	; 20
     a9e:	91 05       	cpc	r25, r1
     aa0:	58 f5       	brcc	.+86     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aa2:	8b 5d       	subi	r24, 0xDB	; 219
     aa4:	9c 4f       	sbci	r25, 0xFC	; 252
     aa6:	5c cf       	rjmp	.-328    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	83 31       	cpi	r24, 0x13	; 19
     aac:	91 05       	cpc	r25, r1
     aae:	20 f5       	brcc	.+72     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fc 01       	movw	r30, r24
     ab6:	e1 50       	subi	r30, 0x01	; 1
     ab8:	fd 4f       	sbci	r31, 0xFD	; 253
     aba:	68 cf       	rjmp	.-304    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     abc:	02 97       	sbiw	r24, 0x02	; 2
     abe:	87 30       	cpi	r24, 0x07	; 7
     ac0:	91 05       	cpc	r25, r1
     ac2:	d0 f4       	brcc	.+52     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	fc 01       	movw	r30, r24
     aca:	ef 50       	subi	r30, 0x0F	; 15
     acc:	fd 4f       	sbci	r31, 0xFD	; 253
     ace:	5e cf       	rjmp	.-324    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ad0:	03 97       	sbiw	r24, 0x03	; 3
     ad2:	85 30       	cpi	r24, 0x05	; 5
     ad4:	91 05       	cpc	r25, r1
     ad6:	80 f4       	brcc	.+32     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	fc 01       	movw	r30, r24
     ade:	e9 51       	subi	r30, 0x19	; 25
     ae0:	fd 4f       	sbci	r31, 0xFD	; 253
     ae2:	54 cf       	rjmp	.-344    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ae4:	04 97       	sbiw	r24, 0x04	; 4
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	91 05       	cpc	r25, r1
     aea:	30 f4       	brcc	.+12     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	fc 01       	movw	r30, r24
     af2:	ef 51       	subi	r30, 0x1F	; 31
     af4:	fd 4f       	sbci	r31, 0xFD	; 253
     af6:	4a cf       	rjmp	.-364    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     af8:	8c e2       	ldi	r24, 0x2C	; 44
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	08 95       	ret

00000afe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     afe:	80 e9       	ldi	r24, 0x90	; 144
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	08 95       	ret

00000b04 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     b04:	3a 9a       	sbi	0x07, 2	; 7
     b06:	08 95       	ret

00000b08 <Print::write(char const*)>:
     b08:	fb 01       	movw	r30, r22
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <Print::write(char const*)+0x2>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	af 01       	movw	r20, r30
     b14:	46 1b       	sub	r20, r22
     b16:	57 0b       	sbc	r21, r23
     b18:	dc 01       	movw	r26, r24
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	02 80       	ldd	r0, Z+2	; 0x02
     b20:	f3 81       	ldd	r31, Z+3	; 0x03
     b22:	e0 2d       	mov	r30, r0
     b24:	09 94       	ijmp

00000b26 <Print::print(char const*)>:
     b26:	f0 cf       	rjmp	.-32     	; 0xb08 <Print::write(char const*)>

00000b28 <Print::println(unsigned char)>:
     b28:	0f 93       	push	r16
     b2a:	1f 93       	push	r17
     b2c:	cf 93       	push	r28
     b2e:	df 93       	push	r29
     b30:	ec 01       	movw	r28, r24
     b32:	46 2f       	mov	r20, r22
     b34:	50 e0       	ldi	r21, 0x00	; 0
     b36:	70 e0       	ldi	r23, 0x00	; 0
     b38:	60 e0       	ldi	r22, 0x00	; 0
     b3a:	20 e0       	ldi	r18, 0x00	; 0
     b3c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <Print::printNumberDec(unsigned long, unsigned char)>
     b40:	8c 01       	movw	r16, r24
     b42:	ce 01       	movw	r24, r28
     b44:	0e 94 d1 46 	call	0x8da2	; 0x8da2 <Print::println()>
     b48:	80 0f       	add	r24, r16
     b4a:	91 1f       	adc	r25, r17
     b4c:	df 91       	pop	r29
     b4e:	cf 91       	pop	r28
     b50:	1f 91       	pop	r17
     b52:	0f 91       	pop	r16
     b54:	08 95       	ret

00000b56 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     b56:	0f 93       	push	r16
     b58:	1f 93       	push	r17
     b5a:	dc 01       	movw	r26, r24
     b5c:	ac 01       	movw	r20, r24
     b5e:	40 5d       	subi	r20, 0xD0	; 208
     b60:	5f 4f       	sbci	r21, 0xFF	; 255
     b62:	fb 01       	movw	r30, r22
     b64:	05 91       	lpm	r16, Z+
     b66:	15 91       	lpm	r17, Z+
     b68:	25 91       	lpm	r18, Z+
     b6a:	34 91       	lpm	r19, Z
     b6c:	2c 93       	st	X, r18
     b6e:	11 96       	adiw	r26, 0x01	; 1
     b70:	1c 93       	st	X, r17
     b72:	11 97       	sbiw	r26, 0x01	; 1
     b74:	12 96       	adiw	r26, 0x02	; 2
     b76:	0c 93       	st	X, r16
     b78:	12 97       	sbiw	r26, 0x02	; 2
     b7a:	6c 5f       	subi	r22, 0xFC	; 252
     b7c:	7f 4f       	sbci	r23, 0xFF	; 255
     b7e:	13 96       	adiw	r26, 0x03	; 3
     b80:	a4 17       	cp	r26, r20
     b82:	b5 07       	cpc	r27, r21
     b84:	71 f7       	brne	.-36     	; 0xb62 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     b86:	1f 91       	pop	r17
     b88:	0f 91       	pop	r16
     b8a:	08 95       	ret

00000b8c <CFastLED::show()>:
     b8c:	fc 01       	movw	r30, r24
     b8e:	60 81       	ld	r22, Z
     b90:	0c 94 1c 3c 	jmp	0x7838	; 0x7838 <CFastLED::show(unsigned char)>

00000b94 <CFastLED::showColor(CRGB const&)>:
     b94:	fc 01       	movw	r30, r24
     b96:	40 81       	ld	r20, Z
     b98:	0c 94 ac 3c 	jmp	0x7958	; 0x7958 <CFastLED::showColor(CRGB const&, unsigned char)>

00000b9c <Framebuffer_GFX::clear()>:
     b9c:	dc 01       	movw	r26, r24
     b9e:	ed 91       	ld	r30, X+
     ba0:	fc 91       	ld	r31, X
     ba2:	02 a0       	ldd	r0, Z+34	; 0x22
     ba4:	f3 a1       	ldd	r31, Z+35	; 0x23
     ba6:	e0 2d       	mov	r30, r0
     ba8:	70 e0       	ldi	r23, 0x00	; 0
     baa:	60 e0       	ldi	r22, 0x00	; 0
     bac:	09 94       	ijmp

00000bae <getRandomColorValue()>:
     bae:	24 e0       	ldi	r18, 0x04	; 4
     bb0:	30 e0       	ldi	r19, 0x00	; 0
     bb2:	40 e0       	ldi	r20, 0x00	; 0
     bb4:	50 e0       	ldi	r21, 0x00	; 0
     bb6:	61 e0       	ldi	r22, 0x01	; 1
     bb8:	70 e0       	ldi	r23, 0x00	; 0
     bba:	80 e0       	ldi	r24, 0x00	; 0
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
     bc2:	62 30       	cpi	r22, 0x02	; 2
     bc4:	71 05       	cpc	r23, r1
     bc6:	31 f0       	breq	.+12     	; 0xbd4 <getRandomColorValue()+0x26>
     bc8:	63 30       	cpi	r22, 0x03	; 3
     bca:	71 05       	cpc	r23, r1
     bcc:	31 f0       	breq	.+12     	; 0xbda <getRandomColorValue()+0x2c>
     bce:	90 e0       	ldi	r25, 0x00	; 0
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	08 95       	ret
     bd4:	8f e7       	ldi	r24, 0x7F	; 127
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	08 95       	ret
     bda:	8f ef       	ldi	r24, 0xFF	; 255
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	08 95       	ret

00000be0 <getRandomColor()>:
     be0:	27 e0       	ldi	r18, 0x07	; 7
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	40 e0       	ldi	r20, 0x00	; 0
     be6:	50 e0       	ldi	r21, 0x00	; 0
     be8:	61 e0       	ldi	r22, 0x01	; 1
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	80 e0       	ldi	r24, 0x00	; 0
     bee:	90 e0       	ldi	r25, 0x00	; 0
     bf0:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
     bf4:	61 50       	subi	r22, 0x01	; 1
     bf6:	71 09       	sbc	r23, r1
     bf8:	67 30       	cpi	r22, 0x07	; 7
     bfa:	71 05       	cpc	r23, r1
     bfc:	40 f4       	brcc	.+16     	; 0xc0e <getRandomColor()+0x2e>
     bfe:	66 0f       	add	r22, r22
     c00:	77 1f       	adc	r23, r23
     c02:	fb 01       	movw	r30, r22
     c04:	ed 52       	subi	r30, 0x2D	; 45
     c06:	fd 4f       	sbci	r31, 0xFD	; 253
     c08:	80 81       	ld	r24, Z
     c0a:	91 81       	ldd	r25, Z+1	; 0x01
     c0c:	08 95       	ret
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	80 e0       	ldi	r24, 0x00	; 0
     c12:	08 95       	ret

00000c14 <getRandomColorIncludingBlack()>:
     c14:	29 e0       	ldi	r18, 0x09	; 9
     c16:	30 e0       	ldi	r19, 0x00	; 0
     c18:	40 e0       	ldi	r20, 0x00	; 0
     c1a:	50 e0       	ldi	r21, 0x00	; 0
     c1c:	61 e0       	ldi	r22, 0x01	; 1
     c1e:	70 e0       	ldi	r23, 0x00	; 0
     c20:	80 e0       	ldi	r24, 0x00	; 0
     c22:	90 e0       	ldi	r25, 0x00	; 0
     c24:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
     c28:	61 50       	subi	r22, 0x01	; 1
     c2a:	71 09       	sbc	r23, r1
     c2c:	67 30       	cpi	r22, 0x07	; 7
     c2e:	71 05       	cpc	r23, r1
     c30:	40 f4       	brcc	.+16     	; 0xc42 <getRandomColorIncludingBlack()+0x2e>
     c32:	66 0f       	add	r22, r22
     c34:	77 1f       	adc	r23, r23
     c36:	fb 01       	movw	r30, r22
     c38:	eb 53       	subi	r30, 0x3B	; 59
     c3a:	fd 4f       	sbci	r31, 0xFD	; 253
     c3c:	80 81       	ld	r24, Z
     c3e:	91 81       	ldd	r25, Z+1	; 0x01
     c40:	08 95       	ret
     c42:	90 e0       	ldi	r25, 0x00	; 0
     c44:	80 e0       	ldi	r24, 0x00	; 0
     c46:	08 95       	ret

00000c48 <progBlingBlingColoring(unsigned int, unsigned char)>:
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	8c 01       	movw	r16, r24
     c52:	c6 2f       	mov	r28, r22
     c54:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     c58:	81 11       	cpse	r24, r1
     c5a:	0e c0       	rjmp	.+28     	; 0xc78 <progBlingBlingColoring(unsigned int, unsigned char)+0x30>
     c5c:	61 e0       	ldi	r22, 0x01	; 1
     c5e:	8d e3       	ldi	r24, 0x3D	; 61
     c60:	90 e1       	ldi	r25, 0x10	; 16
     c62:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
     c66:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     c6a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     c6e:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <nextSongPart>
     c72:	81 e0       	ldi	r24, 0x01	; 1
     c74:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     c78:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <progBlingBlingColoring_rounds>
     c7c:	90 91 e4 09 	lds	r25, 0x09E4	; 0x8009e4 <progBlingBlingColoring_rounds+0x1>
     c80:	89 2b       	or	r24, r25
     c82:	49 f4       	brne	.+18     	; 0xc96 <progBlingBlingColoring(unsigned int, unsigned char)+0x4e>
     c84:	94 df       	rcall	.-216    	; 0xbae <getRandomColorValue()>
     c86:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <r>
     c8a:	91 df       	rcall	.-222    	; 0xbae <getRandomColorValue()>
     c8c:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <g>
     c90:	8e df       	rcall	.-228    	; 0xbae <getRandomColorValue()>
     c92:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <b>
     c96:	c0 91 e5 09 	lds	r28, 0x09E5	; 0x8009e5 <b>
     c9a:	d0 91 e6 09 	lds	r29, 0x09E6	; 0x8009e6 <g>
     c9e:	10 91 e7 09 	lds	r17, 0x09E7	; 0x8009e7 <r>
     ca2:	26 e1       	ldi	r18, 0x16	; 22
     ca4:	31 e0       	ldi	r19, 0x01	; 1
     ca6:	40 e0       	ldi	r20, 0x00	; 0
     ca8:	50 e0       	ldi	r21, 0x00	; 0
     caa:	60 e0       	ldi	r22, 0x00	; 0
     cac:	70 e0       	ldi	r23, 0x00	; 0
     cae:	cb 01       	movw	r24, r22
     cb0:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
     cb4:	fb 01       	movw	r30, r22
     cb6:	ee 0f       	add	r30, r30
     cb8:	ff 1f       	adc	r31, r31
     cba:	e6 0f       	add	r30, r22
     cbc:	f7 1f       	adc	r31, r23
     cbe:	e2 5c       	subi	r30, 0xC2	; 194
     cc0:	f5 4f       	sbci	r31, 0xF5	; 245
     cc2:	10 83       	st	Z, r17
     cc4:	d1 83       	std	Z+1, r29	; 0x01
     cc6:	c2 83       	std	Z+2, r28	; 0x02
     cc8:	23 e0       	ldi	r18, 0x03	; 3
     cca:	30 e0       	ldi	r19, 0x00	; 0
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	50 e0       	ldi	r21, 0x00	; 0
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	70 e0       	ldi	r23, 0x00	; 0
     cd4:	cb 01       	movw	r24, r22
     cd6:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
     cda:	61 30       	cpi	r22, 0x01	; 1
     cdc:	71 05       	cpc	r23, r1
     cde:	81 05       	cpc	r24, r1
     ce0:	91 05       	cpc	r25, r1
     ce2:	99 f4       	brne	.+38     	; 0xd0a <progBlingBlingColoring(unsigned int, unsigned char)+0xc2>
     ce4:	26 e1       	ldi	r18, 0x16	; 22
     ce6:	31 e0       	ldi	r19, 0x01	; 1
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	60 e0       	ldi	r22, 0x00	; 0
     cee:	70 e0       	ldi	r23, 0x00	; 0
     cf0:	cb 01       	movw	r24, r22
     cf2:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
     cf6:	fb 01       	movw	r30, r22
     cf8:	ee 0f       	add	r30, r30
     cfa:	ff 1f       	adc	r31, r31
     cfc:	e6 0f       	add	r30, r22
     cfe:	f7 1f       	adc	r31, r23
     d00:	e2 5c       	subi	r30, 0xC2	; 194
     d02:	f5 4f       	sbci	r31, 0xF5	; 245
     d04:	10 82       	st	Z, r1
     d06:	11 82       	std	Z+1, r1	; 0x01
     d08:	12 82       	std	Z+2, r1	; 0x02
     d0a:	8d e3       	ldi	r24, 0x3D	; 61
     d0c:	90 e1       	ldi	r25, 0x10	; 16
     d0e:	3e df       	rcall	.-388    	; 0xb8c <CFastLED::show()>
     d10:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
     d14:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
     d18:	88 39       	cpi	r24, 0x98	; 152
     d1a:	9a 43       	sbci	r25, 0x3A	; 58
     d1c:	f0 f0       	brcs	.+60     	; 0xd5a <progBlingBlingColoring(unsigned int, unsigned char)+0x112>
     d1e:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
     d22:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
     d26:	84 e0       	ldi	r24, 0x04	; 4
     d28:	0e 94 00 41 	call	0x8200	; 0x8200 <analogRead>
     d2c:	0e 94 06 49 	call	0x920c	; 0x920c <randomSeed(unsigned int)>
     d30:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <progBlingBlingColoring_rounds>
     d34:	90 91 e4 09 	lds	r25, 0x09E4	; 0x8009e4 <progBlingBlingColoring_rounds+0x1>
     d38:	01 96       	adiw	r24, 0x01	; 1
     d3a:	84 30       	cpi	r24, 0x04	; 4
     d3c:	91 05       	cpc	r25, r1
     d3e:	91 f0       	breq	.+36     	; 0xd64 <progBlingBlingColoring(unsigned int, unsigned char)+0x11c>
     d40:	90 93 e4 09 	sts	0x09E4, r25	; 0x8009e4 <progBlingBlingColoring_rounds+0x1>
     d44:	80 93 e3 09 	sts	0x09E3, r24	; 0x8009e3 <progBlingBlingColoring_rounds>
     d48:	32 df       	rcall	.-412    	; 0xbae <getRandomColorValue()>
     d4a:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <r>
     d4e:	2f df       	rcall	.-418    	; 0xbae <getRandomColorValue()>
     d50:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <g>
     d54:	2c df       	rcall	.-424    	; 0xbae <getRandomColorValue()>
     d56:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <b>
     d5a:	df 91       	pop	r29
     d5c:	cf 91       	pop	r28
     d5e:	1f 91       	pop	r17
     d60:	0f 91       	pop	r16
     d62:	08 95       	ret
     d64:	81 e0       	ldi	r24, 0x01	; 1
     d66:	90 e0       	ldi	r25, 0x00	; 0
     d68:	eb cf       	rjmp	.-42     	; 0xd40 <progBlingBlingColoring(unsigned int, unsigned char)+0xf8>

00000d6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>:
     d6a:	df 92       	push	r13
     d6c:	ef 92       	push	r14
     d6e:	ff 92       	push	r15
     d70:	0f 93       	push	r16
     d72:	1f 93       	push	r17
     d74:	cf 93       	push	r28
     d76:	df 93       	push	r29
     d78:	7c 01       	movw	r14, r24
     d7a:	06 2f       	mov	r16, r22
     d7c:	c4 2f       	mov	r28, r20
     d7e:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     d82:	81 11       	cpse	r24, r1
     d84:	0e c0       	rjmp	.+28     	; 0xda2 <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x38>
     d86:	61 e0       	ldi	r22, 0x01	; 1
     d88:	8d e3       	ldi	r24, 0x3D	; 61
     d8a:	90 e1       	ldi	r25, 0x10	; 16
     d8c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
     d90:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
     d94:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
     d98:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <nextSongPart>
     d9c:	81 e0       	ldi	r24, 0x01	; 1
     d9e:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	8d e3       	ldi	r24, 0x3D	; 61
     da6:	90 e1       	ldi	r25, 0x10	; 16
     da8:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
     dac:	8f ef       	ldi	r24, 0xFF	; 255
     dae:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <FastLED>
     db2:	d0 e0       	ldi	r29, 0x00	; 0
     db4:	c0 e0       	ldi	r28, 0x00	; 0
     db6:	10 e0       	ldi	r17, 0x00	; 0
     db8:	c0 17       	cp	r28, r16
     dba:	d1 07       	cpc	r29, r17
     dbc:	dc f4       	brge	.+54     	; 0xdf4 <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x8a>
     dbe:	f7 de       	rcall	.-530    	; 0xbae <getRandomColorValue()>
     dc0:	f8 2e       	mov	r15, r24
     dc2:	f5 de       	rcall	.-534    	; 0xbae <getRandomColorValue()>
     dc4:	e8 2e       	mov	r14, r24
     dc6:	f3 de       	rcall	.-538    	; 0xbae <getRandomColorValue()>
     dc8:	d8 2e       	mov	r13, r24
     dca:	26 e1       	ldi	r18, 0x16	; 22
     dcc:	31 e0       	ldi	r19, 0x01	; 1
     dce:	40 e0       	ldi	r20, 0x00	; 0
     dd0:	50 e0       	ldi	r21, 0x00	; 0
     dd2:	60 e0       	ldi	r22, 0x00	; 0
     dd4:	70 e0       	ldi	r23, 0x00	; 0
     dd6:	cb 01       	movw	r24, r22
     dd8:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
     ddc:	fb 01       	movw	r30, r22
     dde:	ee 0f       	add	r30, r30
     de0:	ff 1f       	adc	r31, r31
     de2:	e6 0f       	add	r30, r22
     de4:	f7 1f       	adc	r31, r23
     de6:	e2 5c       	subi	r30, 0xC2	; 194
     de8:	f5 4f       	sbci	r31, 0xF5	; 245
     dea:	d0 82       	st	Z, r13
     dec:	e1 82       	std	Z+1, r14	; 0x01
     dee:	f2 82       	std	Z+2, r15	; 0x02
     df0:	21 96       	adiw	r28, 0x01	; 1
     df2:	e2 cf       	rjmp	.-60     	; 0xdb8 <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x4e>
     df4:	8d e3       	ldi	r24, 0x3D	; 61
     df6:	90 e1       	ldi	r25, 0x10	; 16
     df8:	df 91       	pop	r29
     dfa:	cf 91       	pop	r28
     dfc:	1f 91       	pop	r17
     dfe:	0f 91       	pop	r16
     e00:	ff 90       	pop	r15
     e02:	ef 90       	pop	r14
     e04:	df 90       	pop	r13
     e06:	c2 ce       	rjmp	.-636    	; 0xb8c <CFastLED::show()>

00000e08 <progFullColors(unsigned int, unsigned char, unsigned int)>:
     e08:	cf 92       	push	r12
     e0a:	df 92       	push	r13
     e0c:	ff 92       	push	r15
     e0e:	0f 93       	push	r16
     e10:	1f 93       	push	r17
     e12:	cf 93       	push	r28
     e14:	df 93       	push	r29
     e16:	00 d0       	rcall	.+0      	; 0xe18 <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     e18:	1f 92       	push	r1
     e1a:	cd b7       	in	r28, 0x3d	; 61
     e1c:	de b7       	in	r29, 0x3e	; 62
     e1e:	6c 01       	movw	r12, r24
     e20:	f6 2e       	mov	r15, r22
     e22:	8a 01       	movw	r16, r20
     e24:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     e28:	81 11       	cpse	r24, r1
     e2a:	12 c0       	rjmp	.+36     	; 0xe50 <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     e2c:	61 e0       	ldi	r22, 0x01	; 1
     e2e:	8d e3       	ldi	r24, 0x3D	; 61
     e30:	90 e1       	ldi	r25, 0x10	; 16
     e32:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
     e36:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     e3a:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     e3e:	f0 92 29 0a 	sts	0x0A29, r15	; 0x800a29 <nextSongPart>
     e42:	81 e0       	ldi	r24, 0x01	; 1
     e44:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     e48:	10 93 31 0a 	sts	0x0A31, r17	; 0x800a31 <millisCounterTimer+0x1>
     e4c:	00 93 30 0a 	sts	0x0A30, r16	; 0x800a30 <millisCounterTimer>
     e50:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
     e54:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
     e58:	80 17       	cp	r24, r16
     e5a:	91 07       	cpc	r25, r17
     e5c:	78 f1       	brcs	.+94     	; 0xebc <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     e5e:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
     e62:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
     e66:	a3 de       	rcall	.-698    	; 0xbae <getRandomColorValue()>
     e68:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <r>
     e6c:	a0 de       	rcall	.-704    	; 0xbae <getRandomColorValue()>
     e6e:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <g>
     e72:	9d de       	rcall	.-710    	; 0xbae <getRandomColorValue()>
     e74:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <b>
     e78:	90 91 e7 09 	lds	r25, 0x09E7	; 0x8009e7 <r>
     e7c:	91 11       	cpse	r25, r1
     e7e:	0f c0       	rjmp	.+30     	; 0xe9e <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e80:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <g>
     e84:	91 11       	cpse	r25, r1
     e86:	0b c0       	rjmp	.+22     	; 0xe9e <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e88:	81 11       	cpse	r24, r1
     e8a:	09 c0       	rjmp	.+18     	; 0xe9e <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e8c:	90 de       	rcall	.-736    	; 0xbae <getRandomColorValue()>
     e8e:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <r>
     e92:	8d de       	rcall	.-742    	; 0xbae <getRandomColorValue()>
     e94:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <g>
     e98:	8a de       	rcall	.-748    	; 0xbae <getRandomColorValue()>
     e9a:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <b>
     e9e:	80 91 e5 09 	lds	r24, 0x09E5	; 0x8009e5 <b>
     ea2:	90 91 e6 09 	lds	r25, 0x09E6	; 0x8009e6 <g>
     ea6:	20 91 e7 09 	lds	r18, 0x09E7	; 0x8009e7 <r>
     eaa:	29 83       	std	Y+1, r18	; 0x01
     eac:	9a 83       	std	Y+2, r25	; 0x02
     eae:	8b 83       	std	Y+3, r24	; 0x03
     eb0:	be 01       	movw	r22, r28
     eb2:	6f 5f       	subi	r22, 0xFF	; 255
     eb4:	7f 4f       	sbci	r23, 0xFF	; 255
     eb6:	8d e3       	ldi	r24, 0x3D	; 61
     eb8:	90 e1       	ldi	r25, 0x10	; 16
     eba:	6c de       	rcall	.-808    	; 0xb94 <CFastLED::showColor(CRGB const&)>
     ebc:	0f 90       	pop	r0
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	df 91       	pop	r29
     ec4:	cf 91       	pop	r28
     ec6:	1f 91       	pop	r17
     ec8:	0f 91       	pop	r16
     eca:	ff 90       	pop	r15
     ecc:	df 90       	pop	r13
     ece:	cf 90       	pop	r12
     ed0:	08 95       	ret

00000ed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     ed2:	af 92       	push	r10
     ed4:	bf 92       	push	r11
     ed6:	cf 92       	push	r12
     ed8:	df 92       	push	r13
     eda:	ef 92       	push	r14
     edc:	ff 92       	push	r15
     ede:	0f 93       	push	r16
     ee0:	1f 93       	push	r17
     ee2:	cf 93       	push	r28
     ee4:	df 93       	push	r29
     ee6:	00 d0       	rcall	.+0      	; 0xee8 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     ee8:	1f 92       	push	r1
     eea:	cd b7       	in	r28, 0x3d	; 61
     eec:	de b7       	in	r29, 0x3e	; 62
     eee:	5c 01       	movw	r10, r24
     ef0:	f6 2e       	mov	r15, r22
     ef2:	6a 01       	movw	r12, r20
     ef4:	12 2f       	mov	r17, r18
     ef6:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     efa:	81 11       	cpse	r24, r1
     efc:	12 c0       	rjmp	.+36     	; 0xf22 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     efe:	61 e0       	ldi	r22, 0x01	; 1
     f00:	8d e3       	ldi	r24, 0x3D	; 61
     f02:	90 e1       	ldi	r25, 0x10	; 16
     f04:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
     f08:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     f0c:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     f10:	f0 92 29 0a 	sts	0x0A29, r15	; 0x800a29 <nextSongPart>
     f14:	81 e0       	ldi	r24, 0x01	; 1
     f16:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     f1a:	d0 92 31 0a 	sts	0x0A31, r13	; 0x800a31 <millisCounterTimer+0x1>
     f1e:	c0 92 30 0a 	sts	0x0A30, r12	; 0x800a30 <millisCounterTimer>
     f22:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
     f26:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
     f2a:	8c 15       	cp	r24, r12
     f2c:	9d 05       	cpc	r25, r13
     f2e:	98 f0       	brcs	.+38     	; 0xf56 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     f30:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
     f34:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
     f38:	80 91 33 0a 	lds	r24, 0x0A33	; 0x800a33 <progStroboIsBlack>
     f3c:	88 23       	and	r24, r24
     f3e:	c9 f0       	breq	.+50     	; 0xf72 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     f40:	19 83       	std	Y+1, r17	; 0x01
     f42:	0a 83       	std	Y+2, r16	; 0x02
     f44:	eb 82       	std	Y+3, r14	; 0x03
     f46:	be 01       	movw	r22, r28
     f48:	6f 5f       	subi	r22, 0xFF	; 255
     f4a:	7f 4f       	sbci	r23, 0xFF	; 255
     f4c:	8d e3       	ldi	r24, 0x3D	; 61
     f4e:	90 e1       	ldi	r25, 0x10	; 16
     f50:	21 de       	rcall	.-958    	; 0xb94 <CFastLED::showColor(CRGB const&)>
     f52:	10 92 33 0a 	sts	0x0A33, r1	; 0x800a33 <progStroboIsBlack>
     f56:	0f 90       	pop	r0
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	df 91       	pop	r29
     f5e:	cf 91       	pop	r28
     f60:	1f 91       	pop	r17
     f62:	0f 91       	pop	r16
     f64:	ff 90       	pop	r15
     f66:	ef 90       	pop	r14
     f68:	df 90       	pop	r13
     f6a:	cf 90       	pop	r12
     f6c:	bf 90       	pop	r11
     f6e:	af 90       	pop	r10
     f70:	08 95       	ret
     f72:	19 82       	std	Y+1, r1	; 0x01
     f74:	1a 82       	std	Y+2, r1	; 0x02
     f76:	1b 82       	std	Y+3, r1	; 0x03
     f78:	be 01       	movw	r22, r28
     f7a:	6f 5f       	subi	r22, 0xFF	; 255
     f7c:	7f 4f       	sbci	r23, 0xFF	; 255
     f7e:	8d e3       	ldi	r24, 0x3D	; 61
     f80:	90 e1       	ldi	r25, 0x10	; 16
     f82:	08 de       	rcall	.-1008   	; 0xb94 <CFastLED::showColor(CRGB const&)>
     f84:	81 e0       	ldi	r24, 0x01	; 1
     f86:	80 93 33 0a 	sts	0x0A33, r24	; 0x800a33 <progStroboIsBlack>
     f8a:	e5 cf       	rjmp	.-54     	; 0xf56 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

00000f8c <progMatrixScanner(unsigned int, unsigned char)>:
     f8c:	ef 92       	push	r14
     f8e:	ff 92       	push	r15
     f90:	0f 93       	push	r16
     f92:	1f 93       	push	r17
     f94:	cf 93       	push	r28
     f96:	8c 01       	movw	r16, r24
     f98:	c6 2f       	mov	r28, r22
     f9a:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     f9e:	81 11       	cpse	r24, r1
     fa0:	0e c0       	rjmp	.+28     	; 0xfbe <progMatrixScanner(unsigned int, unsigned char)+0x32>
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	8d e3       	ldi	r24, 0x3D	; 61
     fa6:	90 e1       	ldi	r25, 0x10	; 16
     fa8:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
     fac:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     fb0:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     fb4:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <nextSongPart>
     fb8:	81 e0       	ldi	r24, 0x01	; 1
     fba:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	8d e3       	ldi	r24, 0x3D	; 61
     fc2:	90 e1       	ldi	r25, 0x10	; 16
     fc4:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
     fc8:	20 91 1c 0a 	lds	r18, 0x0A1C	; 0x800a1c <scannerGoesBack>
     fcc:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
     fd0:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
     fd4:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
     fd8:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
     fdc:	21 11       	cpse	r18, r1
     fde:	51 c0       	rjmp	.+162    	; 0x1082 <progMatrixScanner(unsigned int, unsigned char)+0xf6>
     fe0:	6f 5f       	subi	r22, 0xFF	; 255
     fe2:	7f 4f       	sbci	r23, 0xFF	; 255
     fe4:	70 93 22 0a 	sts	0x0A22, r23	; 0x800a22 <zaehler+0x1>
     fe8:	60 93 21 0a 	sts	0x0A21, r22	; 0x800a21 <zaehler>
     fec:	6c 31       	cpi	r22, 0x1C	; 28
     fee:	71 05       	cpc	r23, r1
     ff0:	1c f0       	brlt	.+6      	; 0xff8 <progMatrixScanner(unsigned int, unsigned char)+0x6c>
     ff2:	21 e0       	ldi	r18, 0x01	; 1
     ff4:	20 93 1c 0a 	sts	0x0A1C, r18	; 0x800a1c <scannerGoesBack>
     ff8:	dc 01       	movw	r26, r24
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	04 a0       	ldd	r0, Z+36	; 0x24
    1000:	f5 a1       	ldd	r31, Z+37	; 0x25
    1002:	e0 2d       	mov	r30, r0
    1004:	e1 2c       	mov	r14, r1
    1006:	58 ef       	ldi	r21, 0xF8	; 248
    1008:	f5 2e       	mov	r15, r21
    100a:	07 e1       	ldi	r16, 0x17	; 23
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	9b 01       	movw	r18, r22
    1010:	50 e0       	ldi	r21, 0x00	; 0
    1012:	40 e0       	ldi	r20, 0x00	; 0
    1014:	09 95       	icall
    1016:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    101a:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    101e:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
    1022:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
    1026:	61 50       	subi	r22, 0x01	; 1
    1028:	71 09       	sbc	r23, r1
    102a:	dc 01       	movw	r26, r24
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	04 a0       	ldd	r0, Z+36	; 0x24
    1032:	f5 a1       	ldd	r31, Z+37	; 0x25
    1034:	e0 2d       	mov	r30, r0
    1036:	ee 24       	eor	r14, r14
    1038:	ea 94       	dec	r14
    103a:	fe 2c       	mov	r15, r14
    103c:	9b 01       	movw	r18, r22
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	40 e0       	ldi	r20, 0x00	; 0
    1042:	09 95       	icall
    1044:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1048:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    104c:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
    1050:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
    1054:	62 50       	subi	r22, 0x02	; 2
    1056:	71 09       	sbc	r23, r1
    1058:	dc 01       	movw	r26, r24
    105a:	ed 91       	ld	r30, X+
    105c:	fc 91       	ld	r31, X
    105e:	04 a0       	ldd	r0, Z+36	; 0x24
    1060:	f5 a1       	ldd	r31, Z+37	; 0x25
    1062:	e0 2d       	mov	r30, r0
    1064:	e1 2c       	mov	r14, r1
    1066:	b8 ef       	ldi	r27, 0xF8	; 248
    1068:	fb 2e       	mov	r15, r27
    106a:	9b 01       	movw	r18, r22
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	09 95       	icall
    1072:	8d e3       	ldi	r24, 0x3D	; 61
    1074:	90 e1       	ldi	r25, 0x10	; 16
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	85 cd       	rjmp	.-1270   	; 0xb8c <CFastLED::show()>
    1082:	61 50       	subi	r22, 0x01	; 1
    1084:	71 09       	sbc	r23, r1
    1086:	70 93 22 0a 	sts	0x0A22, r23	; 0x800a22 <zaehler+0x1>
    108a:	60 93 21 0a 	sts	0x0A21, r22	; 0x800a21 <zaehler>
    108e:	6b 3f       	cpi	r22, 0xFB	; 251
    1090:	bf ef       	ldi	r27, 0xFF	; 255
    1092:	7b 07       	cpc	r23, r27
    1094:	14 f4       	brge	.+4      	; 0x109a <progMatrixScanner(unsigned int, unsigned char)+0x10e>
    1096:	10 92 1c 0a 	sts	0x0A1C, r1	; 0x800a1c <scannerGoesBack>
    109a:	dc 01       	movw	r26, r24
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	04 a0       	ldd	r0, Z+36	; 0x24
    10a2:	f5 a1       	ldd	r31, Z+37	; 0x25
    10a4:	e0 2d       	mov	r30, r0
    10a6:	ee 24       	eor	r14, r14
    10a8:	ea 94       	dec	r14
    10aa:	fe 2c       	mov	r15, r14
    10ac:	07 e1       	ldi	r16, 0x17	; 23
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	9b 01       	movw	r18, r22
    10b2:	50 e0       	ldi	r21, 0x00	; 0
    10b4:	40 e0       	ldi	r20, 0x00	; 0
    10b6:	09 95       	icall
    10b8:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    10bc:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    10c0:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
    10c4:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
    10c8:	61 50       	subi	r22, 0x01	; 1
    10ca:	71 09       	sbc	r23, r1
    10cc:	dc 01       	movw	r26, r24
    10ce:	ed 91       	ld	r30, X+
    10d0:	fc 91       	ld	r31, X
    10d2:	04 a0       	ldd	r0, Z+36	; 0x24
    10d4:	f5 a1       	ldd	r31, Z+37	; 0x25
    10d6:	e0 2d       	mov	r30, r0
    10d8:	e1 2c       	mov	r14, r1
    10da:	38 ef       	ldi	r19, 0xF8	; 248
    10dc:	f3 2e       	mov	r15, r19
    10de:	9b 01       	movw	r18, r22
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	40 e0       	ldi	r20, 0x00	; 0
    10e4:	09 95       	icall
    10e6:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    10ea:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    10ee:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
    10f2:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
    10f6:	62 50       	subi	r22, 0x02	; 2
    10f8:	71 09       	sbc	r23, r1
    10fa:	dc 01       	movw	r26, r24
    10fc:	ed 91       	ld	r30, X+
    10fe:	fc 91       	ld	r31, X
    1100:	04 a0       	ldd	r0, Z+36	; 0x24
    1102:	f5 a1       	ldd	r31, Z+37	; 0x25
    1104:	e0 2d       	mov	r30, r0
    1106:	ee 24       	eor	r14, r14
    1108:	ea 94       	dec	r14
    110a:	fe 2c       	mov	r15, r14
    110c:	ae cf       	rjmp	.-164    	; 0x106a <progMatrixScanner(unsigned int, unsigned char)+0xde>

0000110e <progStern(unsigned int, int, unsigned char)>:
    110e:	8f 92       	push	r8
    1110:	9f 92       	push	r9
    1112:	af 92       	push	r10
    1114:	bf 92       	push	r11
    1116:	cf 92       	push	r12
    1118:	df 92       	push	r13
    111a:	ef 92       	push	r14
    111c:	ff 92       	push	r15
    111e:	0f 93       	push	r16
    1120:	1f 93       	push	r17
    1122:	cf 93       	push	r28
    1124:	df 93       	push	r29
    1126:	7c 01       	movw	r14, r24
    1128:	eb 01       	movw	r28, r22
    112a:	14 2f       	mov	r17, r20
    112c:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1130:	81 11       	cpse	r24, r1
    1132:	18 c0       	rjmp	.+48     	; 0x1164 <progStern(unsigned int, int, unsigned char)+0x56>
    1134:	61 e0       	ldi	r22, 0x01	; 1
    1136:	8d e3       	ldi	r24, 0x3D	; 61
    1138:	90 e1       	ldi	r25, 0x10	; 16
    113a:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    113e:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1142:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1146:	10 93 29 0a 	sts	0x0A29, r17	; 0x800a29 <nextSongPart>
    114a:	81 e0       	ldi	r24, 0x01	; 1
    114c:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1150:	47 dd       	rcall	.-1394   	; 0xbe0 <getRandomColor()>
    1152:	90 93 3c 0a 	sts	0x0A3C, r25	; 0x800a3c <col1+0x1>
    1156:	80 93 3b 0a 	sts	0x0A3B, r24	; 0x800a3b <col1>
    115a:	42 dd       	rcall	.-1404   	; 0xbe0 <getRandomColor()>
    115c:	90 93 3a 0a 	sts	0x0A3A, r25	; 0x800a3a <col2+0x1>
    1160:	80 93 39 0a 	sts	0x0A39, r24	; 0x800a39 <col2>
    1164:	1c 16       	cp	r1, r28
    1166:	1d 06       	cpc	r1, r29
    1168:	ac f4       	brge	.+42     	; 0x1194 <progStern(unsigned int, int, unsigned char)+0x86>
    116a:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    116e:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    1172:	8c 17       	cp	r24, r28
    1174:	9d 07       	cpc	r25, r29
    1176:	70 f0       	brcs	.+28     	; 0x1194 <progStern(unsigned int, int, unsigned char)+0x86>
    1178:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    117c:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    1180:	2f dd       	rcall	.-1442   	; 0xbe0 <getRandomColor()>
    1182:	90 93 3c 0a 	sts	0x0A3C, r25	; 0x800a3c <col1+0x1>
    1186:	80 93 3b 0a 	sts	0x0A3B, r24	; 0x800a3b <col1>
    118a:	2a dd       	rcall	.-1452   	; 0xbe0 <getRandomColor()>
    118c:	90 93 3a 0a 	sts	0x0A3A, r25	; 0x800a3a <col2+0x1>
    1190:	80 93 39 0a 	sts	0x0A39, r24	; 0x800a39 <col2>
    1194:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    1198:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    119c:	01 96       	adiw	r24, 0x01	; 1
    119e:	8a 30       	cpi	r24, 0x0A	; 10
    11a0:	91 05       	cpc	r25, r1
    11a2:	0c f0       	brlt	.+2      	; 0x11a6 <progStern(unsigned int, int, unsigned char)+0x98>
    11a4:	fc c0       	rjmp	.+504    	; 0x139e <progStern(unsigned int, int, unsigned char)+0x290>
    11a6:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    11aa:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    11ae:	60 e0       	ldi	r22, 0x00	; 0
    11b0:	8d e3       	ldi	r24, 0x3D	; 61
    11b2:	90 e1       	ldi	r25, 0x10	; 16
    11b4:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    11b8:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    11bc:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    11c0:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    11c4:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    11c8:	e0 90 3b 0a 	lds	r14, 0x0A3B	; 0x800a3b <col1>
    11cc:	f0 90 3c 0a 	lds	r15, 0x0A3C	; 0x800a3c <col1+0x1>
    11d0:	9a 01       	movw	r18, r20
    11d2:	26 5f       	subi	r18, 0xF6	; 246
    11d4:	3f 4f       	sbci	r19, 0xFF	; 255
    11d6:	6a e0       	ldi	r22, 0x0A	; 10
    11d8:	a6 2e       	mov	r10, r22
    11da:	b1 2c       	mov	r11, r1
    11dc:	b5 01       	movw	r22, r10
    11de:	64 1b       	sub	r22, r20
    11e0:	75 0b       	sbc	r23, r21
    11e2:	dc 01       	movw	r26, r24
    11e4:	ed 91       	ld	r30, X+
    11e6:	fc 91       	ld	r31, X
    11e8:	04 a0       	ldd	r0, Z+36	; 0x24
    11ea:	f5 a1       	ldd	r31, Z+37	; 0x25
    11ec:	e0 2d       	mov	r30, r0
    11ee:	06 e1       	ldi	r16, 0x16	; 22
    11f0:	10 e0       	ldi	r17, 0x00	; 0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	09 95       	icall
    11f8:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    11fc:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1200:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    1204:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    1208:	e0 90 39 0a 	lds	r14, 0x0A39	; 0x800a39 <col2>
    120c:	f0 90 3a 0a 	lds	r15, 0x0A3A	; 0x800a3a <col2+0x1>
    1210:	9a 01       	movw	r18, r20
    1212:	25 5f       	subi	r18, 0xF5	; 245
    1214:	3f 4f       	sbci	r19, 0xFF	; 255
    1216:	7b e0       	ldi	r23, 0x0B	; 11
    1218:	87 2e       	mov	r8, r23
    121a:	91 2c       	mov	r9, r1
    121c:	b4 01       	movw	r22, r8
    121e:	64 1b       	sub	r22, r20
    1220:	75 0b       	sbc	r23, r21
    1222:	dc 01       	movw	r26, r24
    1224:	ed 91       	ld	r30, X+
    1226:	fc 91       	ld	r31, X
    1228:	04 a0       	ldd	r0, Z+36	; 0x24
    122a:	f5 a1       	ldd	r31, Z+37	; 0x25
    122c:	e0 2d       	mov	r30, r0
    122e:	50 e0       	ldi	r21, 0x00	; 0
    1230:	40 e0       	ldi	r20, 0x00	; 0
    1232:	09 95       	icall
    1234:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1238:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    123c:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    1240:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    1244:	e0 90 3b 0a 	lds	r14, 0x0A3B	; 0x800a3b <col1>
    1248:	f0 90 3c 0a 	lds	r15, 0x0A3C	; 0x800a3c <col1+0x1>
    124c:	e6 e1       	ldi	r30, 0x16	; 22
    124e:	ce 2e       	mov	r12, r30
    1250:	d1 2c       	mov	r13, r1
    1252:	04 1b       	sub	r16, r20
    1254:	15 0b       	sbc	r17, r21
    1256:	4f 5f       	subi	r20, 0xFF	; 255
    1258:	5f 4f       	sbci	r21, 0xFF	; 255
    125a:	dc 01       	movw	r26, r24
    125c:	ed 91       	ld	r30, X+
    125e:	fc 91       	ld	r31, X
    1260:	04 a0       	ldd	r0, Z+36	; 0x24
    1262:	f5 a1       	ldd	r31, Z+37	; 0x25
    1264:	e0 2d       	mov	r30, r0
    1266:	25 e1       	ldi	r18, 0x15	; 21
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	70 e0       	ldi	r23, 0x00	; 0
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	09 95       	icall
    1270:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1274:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1278:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    127c:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    1280:	e0 90 39 0a 	lds	r14, 0x0A39	; 0x800a39 <col2>
    1284:	f0 90 3a 0a 	lds	r15, 0x0A3A	; 0x800a3a <col2+0x1>
    1288:	c5 e1       	ldi	r28, 0x15	; 21
    128a:	d0 e0       	ldi	r29, 0x00	; 0
    128c:	8e 01       	movw	r16, r28
    128e:	04 1b       	sub	r16, r20
    1290:	15 0b       	sbc	r17, r21
    1292:	dc 01       	movw	r26, r24
    1294:	ed 91       	ld	r30, X+
    1296:	fc 91       	ld	r31, X
    1298:	04 a0       	ldd	r0, Z+36	; 0x24
    129a:	f5 a1       	ldd	r31, Z+37	; 0x25
    129c:	e0 2d       	mov	r30, r0
    129e:	25 e1       	ldi	r18, 0x15	; 21
    12a0:	30 e0       	ldi	r19, 0x00	; 0
    12a2:	70 e0       	ldi	r23, 0x00	; 0
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	09 95       	icall
    12a8:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    12ac:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    12b0:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    12b4:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    12b8:	e0 90 3b 0a 	lds	r14, 0x0A3B	; 0x800a3b <col1>
    12bc:	f0 90 3c 0a 	lds	r15, 0x0A3C	; 0x800a3c <col1+0x1>
    12c0:	84 01       	movw	r16, r8
    12c2:	04 1b       	sub	r16, r20
    12c4:	15 0b       	sbc	r17, r21
    12c6:	45 5f       	subi	r20, 0xF5	; 245
    12c8:	5f 4f       	sbci	r21, 0xFF	; 255
    12ca:	dc 01       	movw	r26, r24
    12cc:	ed 91       	ld	r30, X+
    12ce:	fc 91       	ld	r31, X
    12d0:	04 a0       	ldd	r0, Z+36	; 0x24
    12d2:	f5 a1       	ldd	r31, Z+37	; 0x25
    12d4:	e0 2d       	mov	r30, r0
    12d6:	25 e1       	ldi	r18, 0x15	; 21
    12d8:	30 e0       	ldi	r19, 0x00	; 0
    12da:	70 e0       	ldi	r23, 0x00	; 0
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	09 95       	icall
    12e0:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    12e4:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    12e8:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    12ec:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    12f0:	e0 90 39 0a 	lds	r14, 0x0A39	; 0x800a39 <col2>
    12f4:	f0 90 3a 0a 	lds	r15, 0x0A3A	; 0x800a3a <col2+0x1>
    12f8:	85 01       	movw	r16, r10
    12fa:	04 1b       	sub	r16, r20
    12fc:	15 0b       	sbc	r17, r21
    12fe:	46 5f       	subi	r20, 0xF6	; 246
    1300:	5f 4f       	sbci	r21, 0xFF	; 255
    1302:	dc 01       	movw	r26, r24
    1304:	ed 91       	ld	r30, X+
    1306:	fc 91       	ld	r31, X
    1308:	04 a0       	ldd	r0, Z+36	; 0x24
    130a:	f5 a1       	ldd	r31, Z+37	; 0x25
    130c:	e0 2d       	mov	r30, r0
    130e:	25 e1       	ldi	r18, 0x15	; 21
    1310:	30 e0       	ldi	r19, 0x00	; 0
    1312:	70 e0       	ldi	r23, 0x00	; 0
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	09 95       	icall
    1318:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    131c:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1320:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
    1324:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
    1328:	e0 90 3b 0a 	lds	r14, 0x0A3B	; 0x800a3b <col1>
    132c:	f0 90 3c 0a 	lds	r15, 0x0A3C	; 0x800a3c <col1+0x1>
    1330:	96 01       	movw	r18, r12
    1332:	26 1b       	sub	r18, r22
    1334:	37 0b       	sbc	r19, r23
    1336:	dc 01       	movw	r26, r24
    1338:	ed 91       	ld	r30, X+
    133a:	fc 91       	ld	r31, X
    133c:	04 a0       	ldd	r0, Z+36	; 0x24
    133e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1340:	e0 2d       	mov	r30, r0
    1342:	10 e0       	ldi	r17, 0x00	; 0
    1344:	00 e0       	ldi	r16, 0x00	; 0
    1346:	46 e1       	ldi	r20, 0x16	; 22
    1348:	50 e0       	ldi	r21, 0x00	; 0
    134a:	09 95       	icall
    134c:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1350:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1354:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
    1358:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
    135c:	e0 90 39 0a 	lds	r14, 0x0A39	; 0x800a39 <col2>
    1360:	f0 90 3a 0a 	lds	r15, 0x0A3A	; 0x800a3a <col2+0x1>
    1364:	9e 01       	movw	r18, r28
    1366:	26 1b       	sub	r18, r22
    1368:	37 0b       	sbc	r19, r23
    136a:	61 50       	subi	r22, 0x01	; 1
    136c:	71 09       	sbc	r23, r1
    136e:	dc 01       	movw	r26, r24
    1370:	ed 91       	ld	r30, X+
    1372:	fc 91       	ld	r31, X
    1374:	04 a0       	ldd	r0, Z+36	; 0x24
    1376:	f5 a1       	ldd	r31, Z+37	; 0x25
    1378:	e0 2d       	mov	r30, r0
    137a:	46 e1       	ldi	r20, 0x16	; 22
    137c:	50 e0       	ldi	r21, 0x00	; 0
    137e:	09 95       	icall
    1380:	8d e3       	ldi	r24, 0x3D	; 61
    1382:	90 e1       	ldi	r25, 0x10	; 16
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	ff 90       	pop	r15
    138e:	ef 90       	pop	r14
    1390:	df 90       	pop	r13
    1392:	cf 90       	pop	r12
    1394:	bf 90       	pop	r11
    1396:	af 90       	pop	r10
    1398:	9f 90       	pop	r9
    139a:	8f 90       	pop	r8
    139c:	f7 cb       	rjmp	.-2066   	; 0xb8c <CFastLED::show()>
    139e:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    13a2:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    13a6:	03 cf       	rjmp	.-506    	; 0x11ae <progStern(unsigned int, int, unsigned char)+0xa0>

000013a8 <progStern(unsigned int, unsigned char)>:
    13a8:	46 2f       	mov	r20, r22
    13aa:	70 e0       	ldi	r23, 0x00	; 0
    13ac:	60 e0       	ldi	r22, 0x00	; 0
    13ae:	af ce       	rjmp	.-674    	; 0x110e <progStern(unsigned int, int, unsigned char)>

000013b0 <progBlack(unsigned int, unsigned char)>:
    13b0:	0f 93       	push	r16
    13b2:	1f 93       	push	r17
    13b4:	cf 93       	push	r28
    13b6:	8c 01       	movw	r16, r24
    13b8:	c6 2f       	mov	r28, r22
    13ba:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    13be:	81 11       	cpse	r24, r1
    13c0:	0e c0       	rjmp	.+28     	; 0x13de <progBlack(unsigned int, unsigned char)+0x2e>
    13c2:	61 e0       	ldi	r22, 0x01	; 1
    13c4:	8d e3       	ldi	r24, 0x3D	; 61
    13c6:	90 e1       	ldi	r25, 0x10	; 16
    13c8:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    13cc:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    13d0:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    13d4:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <nextSongPart>
    13d8:	81 e0       	ldi	r24, 0x01	; 1
    13da:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    13de:	60 e0       	ldi	r22, 0x00	; 0
    13e0:	8d e3       	ldi	r24, 0x3D	; 61
    13e2:	90 e1       	ldi	r25, 0x10	; 16
    13e4:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    13e8:	8d e3       	ldi	r24, 0x3D	; 61
    13ea:	90 e1       	ldi	r25, 0x10	; 16
    13ec:	cf 91       	pop	r28
    13ee:	1f 91       	pop	r17
    13f0:	0f 91       	pop	r16
    13f2:	cc cb       	rjmp	.-2152   	; 0xb8c <CFastLED::show()>

000013f4 <progCircles(unsigned int, unsigned char, unsigned int)>:
    13f4:	8f 92       	push	r8
    13f6:	9f 92       	push	r9
    13f8:	af 92       	push	r10
    13fa:	bf 92       	push	r11
    13fc:	cf 92       	push	r12
    13fe:	df 92       	push	r13
    1400:	ef 92       	push	r14
    1402:	ff 92       	push	r15
    1404:	0f 93       	push	r16
    1406:	1f 93       	push	r17
    1408:	cf 93       	push	r28
    140a:	df 93       	push	r29
    140c:	7c 01       	movw	r14, r24
    140e:	16 2f       	mov	r17, r22
    1410:	ea 01       	movw	r28, r20
    1412:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1416:	81 11       	cpse	r24, r1
    1418:	12 c0       	rjmp	.+36     	; 0x143e <progCircles(unsigned int, unsigned char, unsigned int)+0x4a>
    141a:	61 e0       	ldi	r22, 0x01	; 1
    141c:	8d e3       	ldi	r24, 0x3D	; 61
    141e:	90 e1       	ldi	r25, 0x10	; 16
    1420:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1424:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1428:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    142c:	10 93 29 0a 	sts	0x0A29, r17	; 0x800a29 <nextSongPart>
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1436:	d0 93 31 0a 	sts	0x0A31, r29	; 0x800a31 <millisCounterTimer+0x1>
    143a:	c0 93 30 0a 	sts	0x0A30, r28	; 0x800a30 <millisCounterTimer>
    143e:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    1442:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    1446:	8c 17       	cp	r24, r28
    1448:	9d 07       	cpc	r25, r29
    144a:	e0 f1       	brcs	.+120    	; 0x14c4 <progCircles(unsigned int, unsigned char, unsigned int)+0xd0>
    144c:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    1450:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    1454:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1458:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    145c:	db db       	rcall	.-2122   	; 0xc14 <getRandomColorIncludingBlack()>
    145e:	8c 01       	movw	r16, r24
    1460:	2a e0       	ldi	r18, 0x0A	; 10
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e0       	ldi	r20, 0x00	; 0
    1466:	50 e0       	ldi	r21, 0x00	; 0
    1468:	63 e0       	ldi	r22, 0x03	; 3
    146a:	70 e0       	ldi	r23, 0x00	; 0
    146c:	80 e0       	ldi	r24, 0x00	; 0
    146e:	90 e0       	ldi	r25, 0x00	; 0
    1470:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
    1474:	4b 01       	movw	r8, r22
    1476:	26 e1       	ldi	r18, 0x16	; 22
    1478:	30 e0       	ldi	r19, 0x00	; 0
    147a:	40 e0       	ldi	r20, 0x00	; 0
    147c:	50 e0       	ldi	r21, 0x00	; 0
    147e:	60 e0       	ldi	r22, 0x00	; 0
    1480:	70 e0       	ldi	r23, 0x00	; 0
    1482:	cb 01       	movw	r24, r22
    1484:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
    1488:	6b 01       	movw	r12, r22
    148a:	25 e1       	ldi	r18, 0x15	; 21
    148c:	30 e0       	ldi	r19, 0x00	; 0
    148e:	40 e0       	ldi	r20, 0x00	; 0
    1490:	50 e0       	ldi	r21, 0x00	; 0
    1492:	60 e0       	ldi	r22, 0x00	; 0
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	cb 01       	movw	r24, r22
    1498:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
    149c:	94 01       	movw	r18, r8
    149e:	a6 01       	movw	r20, r12
    14a0:	ce 01       	movw	r24, r28
    14a2:	0e 94 62 34 	call	0x68c4	; 0x68c4 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    14a6:	8d e3       	ldi	r24, 0x3D	; 61
    14a8:	90 e1       	ldi	r25, 0x10	; 16
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	1f 91       	pop	r17
    14b0:	0f 91       	pop	r16
    14b2:	ff 90       	pop	r15
    14b4:	ef 90       	pop	r14
    14b6:	df 90       	pop	r13
    14b8:	cf 90       	pop	r12
    14ba:	bf 90       	pop	r11
    14bc:	af 90       	pop	r10
    14be:	9f 90       	pop	r9
    14c0:	8f 90       	pop	r8
    14c2:	64 cb       	rjmp	.-2360   	; 0xb8c <CFastLED::show()>
    14c4:	df 91       	pop	r29
    14c6:	cf 91       	pop	r28
    14c8:	1f 91       	pop	r17
    14ca:	0f 91       	pop	r16
    14cc:	ff 90       	pop	r15
    14ce:	ef 90       	pop	r14
    14d0:	df 90       	pop	r13
    14d2:	cf 90       	pop	r12
    14d4:	bf 90       	pop	r11
    14d6:	af 90       	pop	r10
    14d8:	9f 90       	pop	r9
    14da:	8f 90       	pop	r8
    14dc:	08 95       	ret

000014de <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    14de:	cf 92       	push	r12
    14e0:	df 92       	push	r13
    14e2:	ef 92       	push	r14
    14e4:	ff 92       	push	r15
    14e6:	0f 93       	push	r16
    14e8:	1f 93       	push	r17
    14ea:	cf 93       	push	r28
    14ec:	df 93       	push	r29
    14ee:	6c 01       	movw	r12, r24
    14f0:	f6 2e       	mov	r15, r22
    14f2:	ea 01       	movw	r28, r20
    14f4:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    14f8:	81 11       	cpse	r24, r1
    14fa:	12 c0       	rjmp	.+36     	; 0x1520 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x42>
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	8d e3       	ldi	r24, 0x3D	; 61
    1500:	90 e1       	ldi	r25, 0x10	; 16
    1502:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1506:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    150a:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    150e:	f0 92 29 0a 	sts	0x0A29, r15	; 0x800a29 <nextSongPart>
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1518:	d0 93 31 0a 	sts	0x0A31, r29	; 0x800a31 <millisCounterTimer+0x1>
    151c:	c0 93 30 0a 	sts	0x0A30, r28	; 0x800a30 <millisCounterTimer>
    1520:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    1524:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    1528:	8c 17       	cp	r24, r28
    152a:	9d 07       	cpc	r25, r29
    152c:	08 f4       	brcc	.+2      	; 0x1530 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x52>
    152e:	72 c0       	rjmp	.+228    	; 0x1614 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x136>
    1530:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    1534:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    1538:	25 e1       	ldi	r18, 0x15	; 21
    153a:	30 e0       	ldi	r19, 0x00	; 0
    153c:	40 e0       	ldi	r20, 0x00	; 0
    153e:	50 e0       	ldi	r21, 0x00	; 0
    1540:	60 e0       	ldi	r22, 0x00	; 0
    1542:	70 e0       	ldi	r23, 0x00	; 0
    1544:	cb 01       	movw	r24, r22
    1546:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
    154a:	c6 2f       	mov	r28, r22
    154c:	25 e1       	ldi	r18, 0x15	; 21
    154e:	30 e0       	ldi	r19, 0x00	; 0
    1550:	40 e0       	ldi	r20, 0x00	; 0
    1552:	50 e0       	ldi	r21, 0x00	; 0
    1554:	60 e0       	ldi	r22, 0x00	; 0
    1556:	70 e0       	ldi	r23, 0x00	; 0
    1558:	cb 01       	movw	r24, r22
    155a:	0e 94 25 49 	call	0x924a	; 0x924a <random(long, long)>
    155e:	c6 2e       	mov	r12, r22
    1560:	3f db       	rcall	.-2434   	; 0xbe0 <getRandomColor()>
    1562:	90 93 3c 0a 	sts	0x0A3C, r25	; 0x800a3c <col1+0x1>
    1566:	80 93 3b 0a 	sts	0x0A3B, r24	; 0x800a3b <col1>
    156a:	60 e0       	ldi	r22, 0x00	; 0
    156c:	8d e3       	ldi	r24, 0x3D	; 61
    156e:	90 e1       	ldi	r25, 0x10	; 16
    1570:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1574:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1578:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    157c:	d1 2c       	mov	r13, r1
    157e:	d0 e0       	ldi	r29, 0x00	; 0
    1580:	e0 90 3b 0a 	lds	r14, 0x0A3B	; 0x800a3b <col1>
    1584:	f0 90 3c 0a 	lds	r15, 0x0A3C	; 0x800a3c <col1+0x1>
    1588:	96 01       	movw	r18, r12
    158a:	21 50       	subi	r18, 0x01	; 1
    158c:	31 09       	sbc	r19, r1
    158e:	be 01       	movw	r22, r28
    1590:	61 50       	subi	r22, 0x01	; 1
    1592:	71 09       	sbc	r23, r1
    1594:	dc 01       	movw	r26, r24
    1596:	ed 91       	ld	r30, X+
    1598:	fc 91       	ld	r31, X
    159a:	04 a0       	ldd	r0, Z+36	; 0x24
    159c:	f5 a1       	ldd	r31, Z+37	; 0x25
    159e:	e0 2d       	mov	r30, r0
    15a0:	06 e1       	ldi	r16, 0x16	; 22
    15a2:	10 e0       	ldi	r17, 0x00	; 0
    15a4:	50 e0       	ldi	r21, 0x00	; 0
    15a6:	40 e0       	ldi	r20, 0x00	; 0
    15a8:	09 95       	icall
    15aa:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    15ae:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    15b2:	e0 90 3b 0a 	lds	r14, 0x0A3B	; 0x800a3b <col1>
    15b6:	f0 90 3c 0a 	lds	r15, 0x0A3C	; 0x800a3c <col1+0x1>
    15ba:	dc 01       	movw	r26, r24
    15bc:	ed 91       	ld	r30, X+
    15be:	fc 91       	ld	r31, X
    15c0:	04 a0       	ldd	r0, Z+36	; 0x24
    15c2:	f5 a1       	ldd	r31, Z+37	; 0x25
    15c4:	e0 2d       	mov	r30, r0
    15c6:	96 01       	movw	r18, r12
    15c8:	50 e0       	ldi	r21, 0x00	; 0
    15ca:	40 e0       	ldi	r20, 0x00	; 0
    15cc:	be 01       	movw	r22, r28
    15ce:	09 95       	icall
    15d0:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    15d4:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    15d8:	e0 90 3b 0a 	lds	r14, 0x0A3B	; 0x800a3b <col1>
    15dc:	f0 90 3c 0a 	lds	r15, 0x0A3C	; 0x800a3c <col1+0x1>
    15e0:	96 01       	movw	r18, r12
    15e2:	2f 5f       	subi	r18, 0xFF	; 255
    15e4:	3f 4f       	sbci	r19, 0xFF	; 255
    15e6:	be 01       	movw	r22, r28
    15e8:	6f 5f       	subi	r22, 0xFF	; 255
    15ea:	7f 4f       	sbci	r23, 0xFF	; 255
    15ec:	dc 01       	movw	r26, r24
    15ee:	ed 91       	ld	r30, X+
    15f0:	fc 91       	ld	r31, X
    15f2:	04 a0       	ldd	r0, Z+36	; 0x24
    15f4:	f5 a1       	ldd	r31, Z+37	; 0x25
    15f6:	e0 2d       	mov	r30, r0
    15f8:	50 e0       	ldi	r21, 0x00	; 0
    15fa:	40 e0       	ldi	r20, 0x00	; 0
    15fc:	09 95       	icall
    15fe:	8d e3       	ldi	r24, 0x3D	; 61
    1600:	90 e1       	ldi	r25, 0x10	; 16
    1602:	df 91       	pop	r29
    1604:	cf 91       	pop	r28
    1606:	1f 91       	pop	r17
    1608:	0f 91       	pop	r16
    160a:	ff 90       	pop	r15
    160c:	ef 90       	pop	r14
    160e:	df 90       	pop	r13
    1610:	cf 90       	pop	r12
    1612:	bc ca       	rjmp	.-2696   	; 0xb8c <CFastLED::show()>
    1614:	df 91       	pop	r29
    1616:	cf 91       	pop	r28
    1618:	1f 91       	pop	r17
    161a:	0f 91       	pop	r16
    161c:	ff 90       	pop	r15
    161e:	ef 90       	pop	r14
    1620:	df 90       	pop	r13
    1622:	cf 90       	pop	r12
    1624:	08 95       	ret

00001626 <progMovingLines(unsigned int, unsigned char)>:
    1626:	cf 92       	push	r12
    1628:	df 92       	push	r13
    162a:	ef 92       	push	r14
    162c:	ff 92       	push	r15
    162e:	0f 93       	push	r16
    1630:	1f 93       	push	r17
    1632:	cf 93       	push	r28
    1634:	df 93       	push	r29
    1636:	8c 01       	movw	r16, r24
    1638:	c6 2f       	mov	r28, r22
    163a:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    163e:	81 11       	cpse	r24, r1
    1640:	0e c0       	rjmp	.+28     	; 0x165e <progMovingLines(unsigned int, unsigned char)+0x38>
    1642:	61 e0       	ldi	r22, 0x01	; 1
    1644:	8d e3       	ldi	r24, 0x3D	; 61
    1646:	90 e1       	ldi	r25, 0x10	; 16
    1648:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    164c:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1650:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1654:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <nextSongPart>
    1658:	81 e0       	ldi	r24, 0x01	; 1
    165a:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    165e:	60 e0       	ldi	r22, 0x00	; 0
    1660:	8d e3       	ldi	r24, 0x3D	; 61
    1662:	90 e1       	ldi	r25, 0x10	; 16
    1664:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1668:	80 91 1a 0a 	lds	r24, 0x0A1A	; 0x800a1a <stage>
    166c:	90 91 1b 0a 	lds	r25, 0x0A1B	; 0x800a1b <stage+0x1>
    1670:	82 30       	cpi	r24, 0x02	; 2
    1672:	91 05       	cpc	r25, r1
    1674:	09 f4       	brne	.+2      	; 0x1678 <progMovingLines(unsigned int, unsigned char)+0x52>
    1676:	59 c0       	rjmp	.+178    	; 0x172a <progMovingLines(unsigned int, unsigned char)+0x104>
    1678:	7c f4       	brge	.+30     	; 0x1698 <progMovingLines(unsigned int, unsigned char)+0x72>
    167a:	00 97       	sbiw	r24, 0x00	; 0
    167c:	39 f1       	breq	.+78     	; 0x16cc <progMovingLines(unsigned int, unsigned char)+0xa6>
    167e:	01 97       	sbiw	r24, 0x01	; 1
    1680:	e1 f1       	breq	.+120    	; 0x16fa <progMovingLines(unsigned int, unsigned char)+0xd4>
    1682:	8d e3       	ldi	r24, 0x3D	; 61
    1684:	90 e1       	ldi	r25, 0x10	; 16
    1686:	df 91       	pop	r29
    1688:	cf 91       	pop	r28
    168a:	1f 91       	pop	r17
    168c:	0f 91       	pop	r16
    168e:	ff 90       	pop	r15
    1690:	ef 90       	pop	r14
    1692:	df 90       	pop	r13
    1694:	cf 90       	pop	r12
    1696:	7a ca       	rjmp	.-2828   	; 0xb8c <CFastLED::show()>
    1698:	84 30       	cpi	r24, 0x04	; 4
    169a:	91 05       	cpc	r25, r1
    169c:	09 f4       	brne	.+2      	; 0x16a0 <progMovingLines(unsigned int, unsigned char)+0x7a>
    169e:	9a c0       	rjmp	.+308    	; 0x17d4 <progMovingLines(unsigned int, unsigned char)+0x1ae>
    16a0:	0c f4       	brge	.+2      	; 0x16a4 <progMovingLines(unsigned int, unsigned char)+0x7e>
    16a2:	72 c0       	rjmp	.+228    	; 0x1788 <progMovingLines(unsigned int, unsigned char)+0x162>
    16a4:	05 97       	sbiw	r24, 0x05	; 5
    16a6:	69 f7       	brne	.-38     	; 0x1682 <progMovingLines(unsigned int, unsigned char)+0x5c>
    16a8:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    16ac:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    16b6:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    16ba:	18 16       	cp	r1, r24
    16bc:	19 06       	cpc	r1, r25
    16be:	0c f4       	brge	.+2      	; 0x16c2 <progMovingLines(unsigned int, unsigned char)+0x9c>
    16c0:	9d c0       	rjmp	.+314    	; 0x17fc <progMovingLines(unsigned int, unsigned char)+0x1d6>
    16c2:	10 92 1b 0a 	sts	0x0A1B, r1	; 0x800a1b <stage+0x1>
    16c6:	10 92 1a 0a 	sts	0x0A1A, r1	; 0x800a1a <stage>
    16ca:	12 c0       	rjmp	.+36     	; 0x16f0 <progMovingLines(unsigned int, unsigned char)+0xca>
    16cc:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    16d0:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    16d4:	01 96       	adiw	r24, 0x01	; 1
    16d6:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    16da:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    16de:	4a 97       	sbiw	r24, 0x1a	; 26
    16e0:	0c f4       	brge	.+2      	; 0x16e4 <progMovingLines(unsigned int, unsigned char)+0xbe>
    16e2:	61 c0       	rjmp	.+194    	; 0x17a6 <progMovingLines(unsigned int, unsigned char)+0x180>
    16e4:	81 e0       	ldi	r24, 0x01	; 1
    16e6:	90 e0       	ldi	r25, 0x00	; 0
    16e8:	90 93 1b 0a 	sts	0x0A1B, r25	; 0x800a1b <stage+0x1>
    16ec:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <stage>
    16f0:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    16f4:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    16f8:	c4 cf       	rjmp	.-120    	; 0x1682 <progMovingLines(unsigned int, unsigned char)+0x5c>
    16fa:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    16fe:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    1702:	01 96       	adiw	r24, 0x01	; 1
    1704:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    1708:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    170c:	0c 97       	sbiw	r24, 0x0c	; 12
    170e:	14 f1       	brlt	.+68     	; 0x1754 <progMovingLines(unsigned int, unsigned char)+0x12e>
    1710:	82 e0       	ldi	r24, 0x02	; 2
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	90 93 1b 0a 	sts	0x0A1B, r25	; 0x800a1b <stage+0x1>
    1718:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <stage>
    171c:	8c e0       	ldi	r24, 0x0C	; 12
    171e:	90 e0       	ldi	r25, 0x00	; 0
    1720:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    1724:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    1728:	ac cf       	rjmp	.-168    	; 0x1682 <progMovingLines(unsigned int, unsigned char)+0x5c>
    172a:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    172e:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    1732:	01 97       	sbiw	r24, 0x01	; 1
    1734:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    1738:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    173c:	18 16       	cp	r1, r24
    173e:	19 06       	cpc	r1, r25
    1740:	4c f0       	brlt	.+18     	; 0x1754 <progMovingLines(unsigned int, unsigned char)+0x12e>
    1742:	83 e0       	ldi	r24, 0x03	; 3
    1744:	90 e0       	ldi	r25, 0x00	; 0
    1746:	90 93 1b 0a 	sts	0x0A1B, r25	; 0x800a1b <stage+0x1>
    174a:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <stage>
    174e:	89 e1       	ldi	r24, 0x19	; 25
    1750:	90 e0       	ldi	r25, 0x00	; 0
    1752:	e6 cf       	rjmp	.-52     	; 0x1720 <progMovingLines(unsigned int, unsigned char)+0xfa>
    1754:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1758:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    175c:	e8 81       	ld	r30, Y
    175e:	f9 81       	ldd	r31, Y+1	; 0x01
    1760:	c4 a0       	ldd	r12, Z+36	; 0x24
    1762:	d5 a0       	ldd	r13, Z+37	; 0x25
    1764:	3d da       	rcall	.-2950   	; 0xbe0 <getRandomColor()>
    1766:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    176a:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    176e:	06 e1       	ldi	r16, 0x16	; 22
    1770:	10 e0       	ldi	r17, 0x00	; 0
    1772:	04 1b       	sub	r16, r20
    1774:	15 0b       	sbc	r17, r21
    1776:	7c 01       	movw	r14, r24
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	20 e0       	ldi	r18, 0x00	; 0
    177c:	69 e1       	ldi	r22, 0x19	; 25
    177e:	70 e0       	ldi	r23, 0x00	; 0
    1780:	ce 01       	movw	r24, r28
    1782:	f6 01       	movw	r30, r12
    1784:	09 95       	icall
    1786:	7d cf       	rjmp	.-262    	; 0x1682 <progMovingLines(unsigned int, unsigned char)+0x5c>
    1788:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    178c:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    1790:	01 97       	sbiw	r24, 0x01	; 1
    1792:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    1796:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    179a:	18 16       	cp	r1, r24
    179c:	19 06       	cpc	r1, r25
    179e:	1c f0       	brlt	.+6      	; 0x17a6 <progMovingLines(unsigned int, unsigned char)+0x180>
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a1 cf       	rjmp	.-190    	; 0x16e8 <progMovingLines(unsigned int, unsigned char)+0xc2>
    17a6:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    17aa:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    17ae:	e8 81       	ld	r30, Y
    17b0:	f9 81       	ldd	r31, Y+1	; 0x01
    17b2:	c4 a0       	ldd	r12, Z+36	; 0x24
    17b4:	d5 a0       	ldd	r13, Z+37	; 0x25
    17b6:	14 da       	rcall	.-3032   	; 0xbe0 <getRandomColor()>
    17b8:	60 91 21 0a 	lds	r22, 0x0A21	; 0x800a21 <zaehler>
    17bc:	70 91 22 0a 	lds	r23, 0x0A22	; 0x800a22 <zaehler+0x1>
    17c0:	29 e1       	ldi	r18, 0x19	; 25
    17c2:	30 e0       	ldi	r19, 0x00	; 0
    17c4:	26 1b       	sub	r18, r22
    17c6:	37 0b       	sbc	r19, r23
    17c8:	7c 01       	movw	r14, r24
    17ca:	06 e1       	ldi	r16, 0x16	; 22
    17cc:	10 e0       	ldi	r17, 0x00	; 0
    17ce:	50 e0       	ldi	r21, 0x00	; 0
    17d0:	40 e0       	ldi	r20, 0x00	; 0
    17d2:	d6 cf       	rjmp	.-84     	; 0x1780 <progMovingLines(unsigned int, unsigned char)+0x15a>
    17d4:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    17d8:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    17dc:	01 96       	adiw	r24, 0x01	; 1
    17de:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    17e2:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    17e6:	0b 97       	sbiw	r24, 0x0b	; 11
    17e8:	4c f0       	brlt	.+18     	; 0x17fc <progMovingLines(unsigned int, unsigned char)+0x1d6>
    17ea:	85 e0       	ldi	r24, 0x05	; 5
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	90 93 1b 0a 	sts	0x0A1B, r25	; 0x800a1b <stage+0x1>
    17f2:	80 93 1a 0a 	sts	0x0A1A, r24	; 0x800a1a <stage>
    17f6:	8a e0       	ldi	r24, 0x0A	; 10
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	92 cf       	rjmp	.-220    	; 0x1720 <progMovingLines(unsigned int, unsigned char)+0xfa>
    17fc:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1800:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    1804:	e8 81       	ld	r30, Y
    1806:	f9 81       	ldd	r31, Y+1	; 0x01
    1808:	c4 a0       	ldd	r12, Z+36	; 0x24
    180a:	d5 a0       	ldd	r13, Z+37	; 0x25
    180c:	e9 d9       	rcall	.-3118   	; 0xbe0 <getRandomColor()>
    180e:	40 91 21 0a 	lds	r20, 0x0A21	; 0x800a21 <zaehler>
    1812:	50 91 22 0a 	lds	r21, 0x0A22	; 0x800a22 <zaehler+0x1>
    1816:	06 e1       	ldi	r16, 0x16	; 22
    1818:	10 e0       	ldi	r17, 0x00	; 0
    181a:	04 1b       	sub	r16, r20
    181c:	15 0b       	sbc	r17, r21
    181e:	7c 01       	movw	r14, r24
    1820:	29 e1       	ldi	r18, 0x19	; 25
    1822:	30 e0       	ldi	r19, 0x00	; 0
    1824:	70 e0       	ldi	r23, 0x00	; 0
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	ab cf       	rjmp	.-170    	; 0x1780 <progMovingLines(unsigned int, unsigned char)+0x15a>

0000182a <progOutline(unsigned int, unsigned char)>:
    182a:	cf 92       	push	r12
    182c:	df 92       	push	r13
    182e:	ef 92       	push	r14
    1830:	ff 92       	push	r15
    1832:	0f 93       	push	r16
    1834:	1f 93       	push	r17
    1836:	cf 93       	push	r28
    1838:	df 93       	push	r29
    183a:	8c 01       	movw	r16, r24
    183c:	c6 2f       	mov	r28, r22
    183e:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1842:	81 11       	cpse	r24, r1
    1844:	0e c0       	rjmp	.+28     	; 0x1862 <progOutline(unsigned int, unsigned char)+0x38>
    1846:	61 e0       	ldi	r22, 0x01	; 1
    1848:	8d e3       	ldi	r24, 0x3D	; 61
    184a:	90 e1       	ldi	r25, 0x10	; 16
    184c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1850:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1854:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1858:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <nextSongPart>
    185c:	81 e0       	ldi	r24, 0x01	; 1
    185e:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1862:	60 e0       	ldi	r22, 0x00	; 0
    1864:	8d e3       	ldi	r24, 0x3D	; 61
    1866:	90 e1       	ldi	r25, 0x10	; 16
    1868:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    186c:	80 91 1c 0a 	lds	r24, 0x0A1C	; 0x800a1c <scannerGoesBack>
    1870:	e0 91 21 0a 	lds	r30, 0x0A21	; 0x800a21 <zaehler>
    1874:	f0 91 22 0a 	lds	r31, 0x0A22	; 0x800a22 <zaehler+0x1>
    1878:	81 11       	cpse	r24, r1
    187a:	08 c1       	rjmp	.+528    	; 0x1a8c <progOutline(unsigned int, unsigned char)+0x262>
    187c:	e9 30       	cpi	r30, 0x09	; 9
    187e:	f1 05       	cpc	r31, r1
    1880:	28 f5       	brcc	.+74     	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    1882:	eb 5b       	subi	r30, 0xBB	; 187
    1884:	f3 4f       	sbci	r31, 0xF3	; 243
    1886:	0c 94 22 4c 	jmp	0x9844	; 0x9844 <__tablejump2__>
    188a:	4e 0c       	add	r4, r14
    188c:	80 0c       	add	r8, r0
    188e:	99 0c       	add	r9, r9
    1890:	b2 0c       	add	r11, r2
    1892:	cb 0c       	add	r12, r11
    1894:	e4 0c       	add	r14, r4
    1896:	fc 0c       	add	r15, r12
    1898:	15 0d       	add	r17, r5
    189a:	2e 0d       	add	r18, r14
    189c:	c9 ed       	ldi	r28, 0xD9	; 217
    189e:	d7 e0       	ldi	r29, 0x07	; 7
    18a0:	05 e7       	ldi	r16, 0x75	; 117
    18a2:	18 e0       	ldi	r17, 0x08	; 8
    18a4:	e9 90       	ld	r14, Y+
    18a6:	f9 90       	ld	r15, Y+
    18a8:	82 d9       	rcall	.-3324   	; 0xbae <getRandomColorValue()>
    18aa:	d8 2e       	mov	r13, r24
    18ac:	80 d9       	rcall	.-3328   	; 0xbae <getRandomColorValue()>
    18ae:	c8 2e       	mov	r12, r24
    18b0:	7e d9       	rcall	.-3332   	; 0xbae <getRandomColorValue()>
    18b2:	f7 01       	movw	r30, r14
    18b4:	ee 0f       	add	r30, r30
    18b6:	ff 1f       	adc	r31, r31
    18b8:	ee 0d       	add	r30, r14
    18ba:	ff 1d       	adc	r31, r15
    18bc:	e2 5c       	subi	r30, 0xC2	; 194
    18be:	f5 4f       	sbci	r31, 0xF5	; 245
    18c0:	80 83       	st	Z, r24
    18c2:	c1 82       	std	Z+1, r12	; 0x01
    18c4:	d2 82       	std	Z+2, r13	; 0x02
    18c6:	0c 17       	cp	r16, r28
    18c8:	1d 07       	cpc	r17, r29
    18ca:	61 f7       	brne	.-40     	; 0x18a4 <progOutline(unsigned int, unsigned char)+0x7a>
    18cc:	8d e3       	ldi	r24, 0x3D	; 61
    18ce:	90 e1       	ldi	r25, 0x10	; 16
    18d0:	5d d9       	rcall	.-3398   	; 0xb8c <CFastLED::show()>
    18d2:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    18d6:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    18da:	01 96       	adiw	r24, 0x01	; 1
    18dc:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    18e0:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    18e4:	09 97       	sbiw	r24, 0x09	; 9
    18e6:	1c f0       	brlt	.+6      	; 0x18ee <progOutline(unsigned int, unsigned char)+0xc4>
    18e8:	81 e0       	ldi	r24, 0x01	; 1
    18ea:	80 93 1c 0a 	sts	0x0A1C, r24	; 0x800a1c <scannerGoesBack>
    18ee:	df 91       	pop	r29
    18f0:	cf 91       	pop	r28
    18f2:	1f 91       	pop	r17
    18f4:	0f 91       	pop	r16
    18f6:	ff 90       	pop	r15
    18f8:	ef 90       	pop	r14
    18fa:	df 90       	pop	r13
    18fc:	cf 90       	pop	r12
    18fe:	08 95       	ret
    1900:	cd e4       	ldi	r28, 0x4D	; 77
    1902:	d7 e0       	ldi	r29, 0x07	; 7
    1904:	09 ed       	ldi	r16, 0xD9	; 217
    1906:	17 e0       	ldi	r17, 0x07	; 7
    1908:	e9 90       	ld	r14, Y+
    190a:	f9 90       	ld	r15, Y+
    190c:	50 d9       	rcall	.-3424   	; 0xbae <getRandomColorValue()>
    190e:	d8 2e       	mov	r13, r24
    1910:	4e d9       	rcall	.-3428   	; 0xbae <getRandomColorValue()>
    1912:	c8 2e       	mov	r12, r24
    1914:	4c d9       	rcall	.-3432   	; 0xbae <getRandomColorValue()>
    1916:	f7 01       	movw	r30, r14
    1918:	ee 0f       	add	r30, r30
    191a:	ff 1f       	adc	r31, r31
    191c:	ee 0d       	add	r30, r14
    191e:	ff 1d       	adc	r31, r15
    1920:	e2 5c       	subi	r30, 0xC2	; 194
    1922:	f5 4f       	sbci	r31, 0xF5	; 245
    1924:	80 83       	st	Z, r24
    1926:	c1 82       	std	Z+1, r12	; 0x01
    1928:	d2 82       	std	Z+2, r13	; 0x02
    192a:	0c 17       	cp	r16, r28
    192c:	1d 07       	cpc	r17, r29
    192e:	61 f7       	brne	.-40     	; 0x1908 <progOutline(unsigned int, unsigned char)+0xde>
    1930:	cd cf       	rjmp	.-102    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    1932:	c1 ee       	ldi	r28, 0xE1	; 225
    1934:	d6 e0       	ldi	r29, 0x06	; 6
    1936:	0d e4       	ldi	r16, 0x4D	; 77
    1938:	17 e0       	ldi	r17, 0x07	; 7
    193a:	e9 90       	ld	r14, Y+
    193c:	f9 90       	ld	r15, Y+
    193e:	37 d9       	rcall	.-3474   	; 0xbae <getRandomColorValue()>
    1940:	d8 2e       	mov	r13, r24
    1942:	35 d9       	rcall	.-3478   	; 0xbae <getRandomColorValue()>
    1944:	c8 2e       	mov	r12, r24
    1946:	33 d9       	rcall	.-3482   	; 0xbae <getRandomColorValue()>
    1948:	f7 01       	movw	r30, r14
    194a:	ee 0f       	add	r30, r30
    194c:	ff 1f       	adc	r31, r31
    194e:	ee 0d       	add	r30, r14
    1950:	ff 1d       	adc	r31, r15
    1952:	e2 5c       	subi	r30, 0xC2	; 194
    1954:	f5 4f       	sbci	r31, 0xF5	; 245
    1956:	80 83       	st	Z, r24
    1958:	c1 82       	std	Z+1, r12	; 0x01
    195a:	d2 82       	std	Z+2, r13	; 0x02
    195c:	0c 17       	cp	r16, r28
    195e:	1d 07       	cpc	r17, r29
    1960:	61 f7       	brne	.-40     	; 0x193a <progOutline(unsigned int, unsigned char)+0x110>
    1962:	b4 cf       	rjmp	.-152    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    1964:	c7 e9       	ldi	r28, 0x97	; 151
    1966:	d6 e0       	ldi	r29, 0x06	; 6
    1968:	01 ee       	ldi	r16, 0xE1	; 225
    196a:	16 e0       	ldi	r17, 0x06	; 6
    196c:	e9 90       	ld	r14, Y+
    196e:	f9 90       	ld	r15, Y+
    1970:	1e d9       	rcall	.-3524   	; 0xbae <getRandomColorValue()>
    1972:	d8 2e       	mov	r13, r24
    1974:	1c d9       	rcall	.-3528   	; 0xbae <getRandomColorValue()>
    1976:	c8 2e       	mov	r12, r24
    1978:	1a d9       	rcall	.-3532   	; 0xbae <getRandomColorValue()>
    197a:	f7 01       	movw	r30, r14
    197c:	ee 0f       	add	r30, r30
    197e:	ff 1f       	adc	r31, r31
    1980:	ee 0d       	add	r30, r14
    1982:	ff 1d       	adc	r31, r15
    1984:	e2 5c       	subi	r30, 0xC2	; 194
    1986:	f5 4f       	sbci	r31, 0xF5	; 245
    1988:	80 83       	st	Z, r24
    198a:	c1 82       	std	Z+1, r12	; 0x01
    198c:	d2 82       	std	Z+2, r13	; 0x02
    198e:	0c 17       	cp	r16, r28
    1990:	1d 07       	cpc	r17, r29
    1992:	61 f7       	brne	.-40     	; 0x196c <progOutline(unsigned int, unsigned char)+0x142>
    1994:	9b cf       	rjmp	.-202    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    1996:	c7 e5       	ldi	r28, 0x57	; 87
    1998:	d6 e0       	ldi	r29, 0x06	; 6
    199a:	07 e9       	ldi	r16, 0x97	; 151
    199c:	16 e0       	ldi	r17, 0x06	; 6
    199e:	e9 90       	ld	r14, Y+
    19a0:	f9 90       	ld	r15, Y+
    19a2:	05 d9       	rcall	.-3574   	; 0xbae <getRandomColorValue()>
    19a4:	d8 2e       	mov	r13, r24
    19a6:	03 d9       	rcall	.-3578   	; 0xbae <getRandomColorValue()>
    19a8:	c8 2e       	mov	r12, r24
    19aa:	01 d9       	rcall	.-3582   	; 0xbae <getRandomColorValue()>
    19ac:	f7 01       	movw	r30, r14
    19ae:	ee 0f       	add	r30, r30
    19b0:	ff 1f       	adc	r31, r31
    19b2:	ee 0d       	add	r30, r14
    19b4:	ff 1d       	adc	r31, r15
    19b6:	e2 5c       	subi	r30, 0xC2	; 194
    19b8:	f5 4f       	sbci	r31, 0xF5	; 245
    19ba:	80 83       	st	Z, r24
    19bc:	c1 82       	std	Z+1, r12	; 0x01
    19be:	d2 82       	std	Z+2, r13	; 0x02
    19c0:	0c 17       	cp	r16, r28
    19c2:	1d 07       	cpc	r17, r29
    19c4:	61 f7       	brne	.-40     	; 0x199e <progOutline(unsigned int, unsigned char)+0x174>
    19c6:	82 cf       	rjmp	.-252    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    19c8:	cb e1       	ldi	r28, 0x1B	; 27
    19ca:	d6 e0       	ldi	r29, 0x06	; 6
    19cc:	09 91       	ld	r16, Y+
    19ce:	19 91       	ld	r17, Y+
    19d0:	ee d8       	rcall	.-3620   	; 0xbae <getRandomColorValue()>
    19d2:	f8 2e       	mov	r15, r24
    19d4:	ec d8       	rcall	.-3624   	; 0xbae <getRandomColorValue()>
    19d6:	e8 2e       	mov	r14, r24
    19d8:	ea d8       	rcall	.-3628   	; 0xbae <getRandomColorValue()>
    19da:	f8 01       	movw	r30, r16
    19dc:	ee 0f       	add	r30, r30
    19de:	ff 1f       	adc	r31, r31
    19e0:	e0 0f       	add	r30, r16
    19e2:	f1 1f       	adc	r31, r17
    19e4:	e2 5c       	subi	r30, 0xC2	; 194
    19e6:	f5 4f       	sbci	r31, 0xF5	; 245
    19e8:	80 83       	st	Z, r24
    19ea:	e1 82       	std	Z+1, r14	; 0x01
    19ec:	f2 82       	std	Z+2, r15	; 0x02
    19ee:	86 e0       	ldi	r24, 0x06	; 6
    19f0:	c7 35       	cpi	r28, 0x57	; 87
    19f2:	d8 07       	cpc	r29, r24
    19f4:	59 f7       	brne	.-42     	; 0x19cc <progOutline(unsigned int, unsigned char)+0x1a2>
    19f6:	6a cf       	rjmp	.-300    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    19f8:	c5 ee       	ldi	r28, 0xE5	; 229
    19fa:	d5 e0       	ldi	r29, 0x05	; 5
    19fc:	0b e1       	ldi	r16, 0x1B	; 27
    19fe:	16 e0       	ldi	r17, 0x06	; 6
    1a00:	e9 90       	ld	r14, Y+
    1a02:	f9 90       	ld	r15, Y+
    1a04:	d4 d8       	rcall	.-3672   	; 0xbae <getRandomColorValue()>
    1a06:	d8 2e       	mov	r13, r24
    1a08:	d2 d8       	rcall	.-3676   	; 0xbae <getRandomColorValue()>
    1a0a:	c8 2e       	mov	r12, r24
    1a0c:	d0 d8       	rcall	.-3680   	; 0xbae <getRandomColorValue()>
    1a0e:	f7 01       	movw	r30, r14
    1a10:	ee 0f       	add	r30, r30
    1a12:	ff 1f       	adc	r31, r31
    1a14:	ee 0d       	add	r30, r14
    1a16:	ff 1d       	adc	r31, r15
    1a18:	e2 5c       	subi	r30, 0xC2	; 194
    1a1a:	f5 4f       	sbci	r31, 0xF5	; 245
    1a1c:	80 83       	st	Z, r24
    1a1e:	c1 82       	std	Z+1, r12	; 0x01
    1a20:	d2 82       	std	Z+2, r13	; 0x02
    1a22:	0c 17       	cp	r16, r28
    1a24:	1d 07       	cpc	r17, r29
    1a26:	61 f7       	brne	.-40     	; 0x1a00 <progOutline(unsigned int, unsigned char)+0x1d6>
    1a28:	51 cf       	rjmp	.-350    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    1a2a:	c1 eb       	ldi	r28, 0xB1	; 177
    1a2c:	d5 e0       	ldi	r29, 0x05	; 5
    1a2e:	05 ee       	ldi	r16, 0xE5	; 229
    1a30:	15 e0       	ldi	r17, 0x05	; 5
    1a32:	e9 90       	ld	r14, Y+
    1a34:	f9 90       	ld	r15, Y+
    1a36:	bb d8       	rcall	.-3722   	; 0xbae <getRandomColorValue()>
    1a38:	d8 2e       	mov	r13, r24
    1a3a:	b9 d8       	rcall	.-3726   	; 0xbae <getRandomColorValue()>
    1a3c:	c8 2e       	mov	r12, r24
    1a3e:	b7 d8       	rcall	.-3730   	; 0xbae <getRandomColorValue()>
    1a40:	f7 01       	movw	r30, r14
    1a42:	ee 0f       	add	r30, r30
    1a44:	ff 1f       	adc	r31, r31
    1a46:	ee 0d       	add	r30, r14
    1a48:	ff 1d       	adc	r31, r15
    1a4a:	e2 5c       	subi	r30, 0xC2	; 194
    1a4c:	f5 4f       	sbci	r31, 0xF5	; 245
    1a4e:	80 83       	st	Z, r24
    1a50:	c1 82       	std	Z+1, r12	; 0x01
    1a52:	d2 82       	std	Z+2, r13	; 0x02
    1a54:	0c 17       	cp	r16, r28
    1a56:	1d 07       	cpc	r17, r29
    1a58:	61 f7       	brne	.-40     	; 0x1a32 <progOutline(unsigned int, unsigned char)+0x208>
    1a5a:	38 cf       	rjmp	.-400    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    1a5c:	c1 e8       	ldi	r28, 0x81	; 129
    1a5e:	d5 e0       	ldi	r29, 0x05	; 5
    1a60:	09 91       	ld	r16, Y+
    1a62:	19 91       	ld	r17, Y+
    1a64:	a4 d8       	rcall	.-3768   	; 0xbae <getRandomColorValue()>
    1a66:	f8 2e       	mov	r15, r24
    1a68:	a2 d8       	rcall	.-3772   	; 0xbae <getRandomColorValue()>
    1a6a:	e8 2e       	mov	r14, r24
    1a6c:	a0 d8       	rcall	.-3776   	; 0xbae <getRandomColorValue()>
    1a6e:	f8 01       	movw	r30, r16
    1a70:	ee 0f       	add	r30, r30
    1a72:	ff 1f       	adc	r31, r31
    1a74:	e0 0f       	add	r30, r16
    1a76:	f1 1f       	adc	r31, r17
    1a78:	e2 5c       	subi	r30, 0xC2	; 194
    1a7a:	f5 4f       	sbci	r31, 0xF5	; 245
    1a7c:	80 83       	st	Z, r24
    1a7e:	e1 82       	std	Z+1, r14	; 0x01
    1a80:	f2 82       	std	Z+2, r15	; 0x02
    1a82:	85 e0       	ldi	r24, 0x05	; 5
    1a84:	c1 3b       	cpi	r28, 0xB1	; 177
    1a86:	d8 07       	cpc	r29, r24
    1a88:	59 f7       	brne	.-42     	; 0x1a60 <progOutline(unsigned int, unsigned char)+0x236>
    1a8a:	20 cf       	rjmp	.-448    	; 0x18cc <progOutline(unsigned int, unsigned char)+0xa2>
    1a8c:	e9 30       	cpi	r30, 0x09	; 9
    1a8e:	f1 05       	cpc	r31, r1
    1a90:	20 f5       	brcc	.+72     	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1a92:	e3 5b       	subi	r30, 0xB3	; 179
    1a94:	f2 4f       	sbci	r31, 0xF2	; 242
    1a96:	0c 94 22 4c 	jmp	0x9844	; 0x9844 <__tablejump2__>
    1a9a:	56 0d       	add	r21, r6
    1a9c:	80 0d       	add	r24, r0
    1a9e:	98 0d       	add	r25, r8
    1aa0:	b0 0d       	add	r27, r0
    1aa2:	c8 0d       	add	r28, r8
    1aa4:	e0 0d       	add	r30, r0
    1aa6:	fb 0d       	add	r31, r11
    1aa8:	16 0e       	add	r1, r22
    1aaa:	31 0e       	add	r3, r17
    1aac:	c9 ed       	ldi	r28, 0xD9	; 217
    1aae:	d7 e0       	ldi	r29, 0x07	; 7
    1ab0:	09 91       	ld	r16, Y+
    1ab2:	19 91       	ld	r17, Y+
    1ab4:	7c d8       	rcall	.-3848   	; 0xbae <getRandomColorValue()>
    1ab6:	f8 2e       	mov	r15, r24
    1ab8:	7a d8       	rcall	.-3852   	; 0xbae <getRandomColorValue()>
    1aba:	e8 2e       	mov	r14, r24
    1abc:	78 d8       	rcall	.-3856   	; 0xbae <getRandomColorValue()>
    1abe:	f8 01       	movw	r30, r16
    1ac0:	ee 0f       	add	r30, r30
    1ac2:	ff 1f       	adc	r31, r31
    1ac4:	e0 0f       	add	r30, r16
    1ac6:	f1 1f       	adc	r31, r17
    1ac8:	e2 5c       	subi	r30, 0xC2	; 194
    1aca:	f5 4f       	sbci	r31, 0xF5	; 245
    1acc:	80 83       	st	Z, r24
    1ace:	e1 82       	std	Z+1, r14	; 0x01
    1ad0:	f2 82       	std	Z+2, r15	; 0x02
    1ad2:	88 e0       	ldi	r24, 0x08	; 8
    1ad4:	c5 37       	cpi	r28, 0x75	; 117
    1ad6:	d8 07       	cpc	r29, r24
    1ad8:	59 f7       	brne	.-42     	; 0x1ab0 <progOutline(unsigned int, unsigned char)+0x286>
    1ada:	8d e3       	ldi	r24, 0x3D	; 61
    1adc:	90 e1       	ldi	r25, 0x10	; 16
    1ade:	56 d8       	rcall	.-3924   	; 0xb8c <CFastLED::show()>
    1ae0:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    1ae4:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    1ae8:	01 97       	sbiw	r24, 0x01	; 1
    1aea:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    1aee:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    1af2:	18 16       	cp	r1, r24
    1af4:	19 06       	cpc	r1, r25
    1af6:	0c f4       	brge	.+2      	; 0x1afa <progOutline(unsigned int, unsigned char)+0x2d0>
    1af8:	fa ce       	rjmp	.-524    	; 0x18ee <progOutline(unsigned int, unsigned char)+0xc4>
    1afa:	10 92 1c 0a 	sts	0x0A1C, r1	; 0x800a1c <scannerGoesBack>
    1afe:	f7 ce       	rjmp	.-530    	; 0x18ee <progOutline(unsigned int, unsigned char)+0xc4>
    1b00:	cd e4       	ldi	r28, 0x4D	; 77
    1b02:	d7 e0       	ldi	r29, 0x07	; 7
    1b04:	09 91       	ld	r16, Y+
    1b06:	19 91       	ld	r17, Y+
    1b08:	52 d8       	rcall	.-3932   	; 0xbae <getRandomColorValue()>
    1b0a:	f8 2e       	mov	r15, r24
    1b0c:	50 d8       	rcall	.-3936   	; 0xbae <getRandomColorValue()>
    1b0e:	e8 2e       	mov	r14, r24
    1b10:	4e d8       	rcall	.-3940   	; 0xbae <getRandomColorValue()>
    1b12:	f8 01       	movw	r30, r16
    1b14:	ee 0f       	add	r30, r30
    1b16:	ff 1f       	adc	r31, r31
    1b18:	e0 0f       	add	r30, r16
    1b1a:	f1 1f       	adc	r31, r17
    1b1c:	e2 5c       	subi	r30, 0xC2	; 194
    1b1e:	f5 4f       	sbci	r31, 0xF5	; 245
    1b20:	80 83       	st	Z, r24
    1b22:	e1 82       	std	Z+1, r14	; 0x01
    1b24:	f2 82       	std	Z+2, r15	; 0x02
    1b26:	87 e0       	ldi	r24, 0x07	; 7
    1b28:	c9 3d       	cpi	r28, 0xD9	; 217
    1b2a:	d8 07       	cpc	r29, r24
    1b2c:	59 f7       	brne	.-42     	; 0x1b04 <progOutline(unsigned int, unsigned char)+0x2da>
    1b2e:	d5 cf       	rjmp	.-86     	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1b30:	c1 ee       	ldi	r28, 0xE1	; 225
    1b32:	d6 e0       	ldi	r29, 0x06	; 6
    1b34:	09 91       	ld	r16, Y+
    1b36:	19 91       	ld	r17, Y+
    1b38:	3a d8       	rcall	.-3980   	; 0xbae <getRandomColorValue()>
    1b3a:	f8 2e       	mov	r15, r24
    1b3c:	38 d8       	rcall	.-3984   	; 0xbae <getRandomColorValue()>
    1b3e:	e8 2e       	mov	r14, r24
    1b40:	36 d8       	rcall	.-3988   	; 0xbae <getRandomColorValue()>
    1b42:	f8 01       	movw	r30, r16
    1b44:	ee 0f       	add	r30, r30
    1b46:	ff 1f       	adc	r31, r31
    1b48:	e0 0f       	add	r30, r16
    1b4a:	f1 1f       	adc	r31, r17
    1b4c:	e2 5c       	subi	r30, 0xC2	; 194
    1b4e:	f5 4f       	sbci	r31, 0xF5	; 245
    1b50:	80 83       	st	Z, r24
    1b52:	e1 82       	std	Z+1, r14	; 0x01
    1b54:	f2 82       	std	Z+2, r15	; 0x02
    1b56:	87 e0       	ldi	r24, 0x07	; 7
    1b58:	cd 34       	cpi	r28, 0x4D	; 77
    1b5a:	d8 07       	cpc	r29, r24
    1b5c:	59 f7       	brne	.-42     	; 0x1b34 <progOutline(unsigned int, unsigned char)+0x30a>
    1b5e:	bd cf       	rjmp	.-134    	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1b60:	c7 e9       	ldi	r28, 0x97	; 151
    1b62:	d6 e0       	ldi	r29, 0x06	; 6
    1b64:	09 91       	ld	r16, Y+
    1b66:	19 91       	ld	r17, Y+
    1b68:	22 d8       	rcall	.-4028   	; 0xbae <getRandomColorValue()>
    1b6a:	f8 2e       	mov	r15, r24
    1b6c:	20 d8       	rcall	.-4032   	; 0xbae <getRandomColorValue()>
    1b6e:	e8 2e       	mov	r14, r24
    1b70:	1e d8       	rcall	.-4036   	; 0xbae <getRandomColorValue()>
    1b72:	f8 01       	movw	r30, r16
    1b74:	ee 0f       	add	r30, r30
    1b76:	ff 1f       	adc	r31, r31
    1b78:	e0 0f       	add	r30, r16
    1b7a:	f1 1f       	adc	r31, r17
    1b7c:	e2 5c       	subi	r30, 0xC2	; 194
    1b7e:	f5 4f       	sbci	r31, 0xF5	; 245
    1b80:	80 83       	st	Z, r24
    1b82:	e1 82       	std	Z+1, r14	; 0x01
    1b84:	f2 82       	std	Z+2, r15	; 0x02
    1b86:	86 e0       	ldi	r24, 0x06	; 6
    1b88:	c1 3e       	cpi	r28, 0xE1	; 225
    1b8a:	d8 07       	cpc	r29, r24
    1b8c:	59 f7       	brne	.-42     	; 0x1b64 <progOutline(unsigned int, unsigned char)+0x33a>
    1b8e:	a5 cf       	rjmp	.-182    	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1b90:	c7 e5       	ldi	r28, 0x57	; 87
    1b92:	d6 e0       	ldi	r29, 0x06	; 6
    1b94:	09 91       	ld	r16, Y+
    1b96:	19 91       	ld	r17, Y+
    1b98:	0a d8       	rcall	.-4076   	; 0xbae <getRandomColorValue()>
    1b9a:	f8 2e       	mov	r15, r24
    1b9c:	08 d8       	rcall	.-4080   	; 0xbae <getRandomColorValue()>
    1b9e:	e8 2e       	mov	r14, r24
    1ba0:	06 d8       	rcall	.-4084   	; 0xbae <getRandomColorValue()>
    1ba2:	f8 01       	movw	r30, r16
    1ba4:	ee 0f       	add	r30, r30
    1ba6:	ff 1f       	adc	r31, r31
    1ba8:	e0 0f       	add	r30, r16
    1baa:	f1 1f       	adc	r31, r17
    1bac:	e2 5c       	subi	r30, 0xC2	; 194
    1bae:	f5 4f       	sbci	r31, 0xF5	; 245
    1bb0:	80 83       	st	Z, r24
    1bb2:	e1 82       	std	Z+1, r14	; 0x01
    1bb4:	f2 82       	std	Z+2, r15	; 0x02
    1bb6:	86 e0       	ldi	r24, 0x06	; 6
    1bb8:	c7 39       	cpi	r28, 0x97	; 151
    1bba:	d8 07       	cpc	r29, r24
    1bbc:	59 f7       	brne	.-42     	; 0x1b94 <progOutline(unsigned int, unsigned char)+0x36a>
    1bbe:	8d cf       	rjmp	.-230    	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1bc0:	cb e1       	ldi	r28, 0x1B	; 27
    1bc2:	d6 e0       	ldi	r29, 0x06	; 6
    1bc4:	09 91       	ld	r16, Y+
    1bc6:	19 91       	ld	r17, Y+
    1bc8:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1bcc:	f8 2e       	mov	r15, r24
    1bce:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1bd2:	e8 2e       	mov	r14, r24
    1bd4:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1bd8:	f8 01       	movw	r30, r16
    1bda:	ee 0f       	add	r30, r30
    1bdc:	ff 1f       	adc	r31, r31
    1bde:	e0 0f       	add	r30, r16
    1be0:	f1 1f       	adc	r31, r17
    1be2:	e2 5c       	subi	r30, 0xC2	; 194
    1be4:	f5 4f       	sbci	r31, 0xF5	; 245
    1be6:	80 83       	st	Z, r24
    1be8:	e1 82       	std	Z+1, r14	; 0x01
    1bea:	f2 82       	std	Z+2, r15	; 0x02
    1bec:	86 e0       	ldi	r24, 0x06	; 6
    1bee:	c7 35       	cpi	r28, 0x57	; 87
    1bf0:	d8 07       	cpc	r29, r24
    1bf2:	41 f7       	brne	.-48     	; 0x1bc4 <progOutline(unsigned int, unsigned char)+0x39a>
    1bf4:	72 cf       	rjmp	.-284    	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1bf6:	c5 ee       	ldi	r28, 0xE5	; 229
    1bf8:	d5 e0       	ldi	r29, 0x05	; 5
    1bfa:	09 91       	ld	r16, Y+
    1bfc:	19 91       	ld	r17, Y+
    1bfe:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c02:	f8 2e       	mov	r15, r24
    1c04:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c08:	e8 2e       	mov	r14, r24
    1c0a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c0e:	f8 01       	movw	r30, r16
    1c10:	ee 0f       	add	r30, r30
    1c12:	ff 1f       	adc	r31, r31
    1c14:	e0 0f       	add	r30, r16
    1c16:	f1 1f       	adc	r31, r17
    1c18:	e2 5c       	subi	r30, 0xC2	; 194
    1c1a:	f5 4f       	sbci	r31, 0xF5	; 245
    1c1c:	80 83       	st	Z, r24
    1c1e:	e1 82       	std	Z+1, r14	; 0x01
    1c20:	f2 82       	std	Z+2, r15	; 0x02
    1c22:	86 e0       	ldi	r24, 0x06	; 6
    1c24:	cb 31       	cpi	r28, 0x1B	; 27
    1c26:	d8 07       	cpc	r29, r24
    1c28:	41 f7       	brne	.-48     	; 0x1bfa <progOutline(unsigned int, unsigned char)+0x3d0>
    1c2a:	57 cf       	rjmp	.-338    	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1c2c:	c1 eb       	ldi	r28, 0xB1	; 177
    1c2e:	d5 e0       	ldi	r29, 0x05	; 5
    1c30:	09 91       	ld	r16, Y+
    1c32:	19 91       	ld	r17, Y+
    1c34:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c38:	f8 2e       	mov	r15, r24
    1c3a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c3e:	e8 2e       	mov	r14, r24
    1c40:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c44:	f8 01       	movw	r30, r16
    1c46:	ee 0f       	add	r30, r30
    1c48:	ff 1f       	adc	r31, r31
    1c4a:	e0 0f       	add	r30, r16
    1c4c:	f1 1f       	adc	r31, r17
    1c4e:	e2 5c       	subi	r30, 0xC2	; 194
    1c50:	f5 4f       	sbci	r31, 0xF5	; 245
    1c52:	80 83       	st	Z, r24
    1c54:	e1 82       	std	Z+1, r14	; 0x01
    1c56:	f2 82       	std	Z+2, r15	; 0x02
    1c58:	85 e0       	ldi	r24, 0x05	; 5
    1c5a:	c5 3e       	cpi	r28, 0xE5	; 229
    1c5c:	d8 07       	cpc	r29, r24
    1c5e:	41 f7       	brne	.-48     	; 0x1c30 <progOutline(unsigned int, unsigned char)+0x406>
    1c60:	3c cf       	rjmp	.-392    	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>
    1c62:	c1 e8       	ldi	r28, 0x81	; 129
    1c64:	d5 e0       	ldi	r29, 0x05	; 5
    1c66:	09 91       	ld	r16, Y+
    1c68:	19 91       	ld	r17, Y+
    1c6a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c6e:	f8 2e       	mov	r15, r24
    1c70:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c74:	e8 2e       	mov	r14, r24
    1c76:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    1c7a:	f8 01       	movw	r30, r16
    1c7c:	ee 0f       	add	r30, r30
    1c7e:	ff 1f       	adc	r31, r31
    1c80:	e0 0f       	add	r30, r16
    1c82:	f1 1f       	adc	r31, r17
    1c84:	e2 5c       	subi	r30, 0xC2	; 194
    1c86:	f5 4f       	sbci	r31, 0xF5	; 245
    1c88:	80 83       	st	Z, r24
    1c8a:	e1 82       	std	Z+1, r14	; 0x01
    1c8c:	f2 82       	std	Z+2, r15	; 0x02
    1c8e:	85 e0       	ldi	r24, 0x05	; 5
    1c90:	c1 3b       	cpi	r28, 0xB1	; 177
    1c92:	d8 07       	cpc	r29, r24
    1c94:	41 f7       	brne	.-48     	; 0x1c66 <progOutline(unsigned int, unsigned char)+0x43c>
    1c96:	21 cf       	rjmp	.-446    	; 0x1ada <progOutline(unsigned int, unsigned char)+0x2b0>

00001c98 <progScrollText(String, unsigned int, int, int, unsigned char)>:
    1c98:	af 92       	push	r10
    1c9a:	bf 92       	push	r11
    1c9c:	cf 92       	push	r12
    1c9e:	df 92       	push	r13
    1ca0:	ef 92       	push	r14
    1ca2:	ff 92       	push	r15
    1ca4:	0f 93       	push	r16
    1ca6:	cf 93       	push	r28
    1ca8:	df 93       	push	r29
    1caa:	7c 01       	movw	r14, r24
    1cac:	5b 01       	movw	r10, r22
    1cae:	6a 01       	movw	r12, r20
    1cb0:	e9 01       	movw	r28, r18
    1cb2:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1cb6:	81 11       	cpse	r24, r1
    1cb8:	26 c0       	rjmp	.+76     	; 0x1d06 <progScrollText(String, unsigned int, int, int, unsigned char)+0x6e>
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	8d e3       	ldi	r24, 0x3D	; 61
    1cbe:	90 e1       	ldi	r25, 0x10	; 16
    1cc0:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1cc4:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
    1cc8:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
    1ccc:	00 93 29 0a 	sts	0x0A29, r16	; 0x800a29 <nextSongPart>
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1cd6:	d0 92 31 0a 	sts	0x0A31, r13	; 0x800a31 <millisCounterTimer+0x1>
    1cda:	c0 92 30 0a 	sts	0x0A30, r12	; 0x800a30 <millisCounterTimer>
    1cde:	84 e1       	ldi	r24, 0x14	; 20
    1ce0:	90 e0       	ldi	r25, 0x00	; 0
    1ce2:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1ce6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1cea:	d7 01       	movw	r26, r14
    1cec:	14 96       	adiw	r26, 0x04	; 4
    1cee:	2d 91       	ld	r18, X+
    1cf0:	3c 91       	ld	r19, X
    1cf2:	46 e0       	ldi	r20, 0x06	; 6
    1cf4:	42 9f       	mul	r20, r18
    1cf6:	c0 01       	movw	r24, r0
    1cf8:	43 9f       	mul	r20, r19
    1cfa:	90 0d       	add	r25, r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	90 93 1e 0a 	sts	0x0A1E, r25	; 0x800a1e <progScrollEnde+0x1>
    1d02:	80 93 1d 0a 	sts	0x0A1D, r24	; 0x800a1d <progScrollEnde>
    1d06:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    1d0a:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    1d0e:	8c 15       	cp	r24, r12
    1d10:	9d 05       	cpc	r25, r13
    1d12:	08 f4       	brcc	.+2      	; 0x1d16 <progScrollText(String, unsigned int, int, int, unsigned char)+0x7e>
    1d14:	68 c0       	rjmp	.+208    	; 0x1de6 <progScrollText(String, unsigned int, int, int, unsigned char)+0x14e>
    1d16:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    1d1a:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    1d1e:	85 e0       	ldi	r24, 0x05	; 5
    1d20:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <FastLED>
    1d24:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1d28:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1d2c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Framebuffer_GFX::clear()>
    1d30:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1d34:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1d38:	fc 01       	movw	r30, r24
    1d3a:	16 8a       	std	Z+22, r1	; 0x16
    1d3c:	61 e0       	ldi	r22, 0x01	; 1
    1d3e:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <Adafruit_GFX::setTextSize(unsigned char)>
    1d42:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1d46:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1d4a:	dc 01       	movw	r26, r24
    1d4c:	ed 91       	ld	r30, X+
    1d4e:	fc 91       	ld	r31, X
    1d50:	00 8c       	ldd	r0, Z+24	; 0x18
    1d52:	f1 8d       	ldd	r31, Z+25	; 0x19
    1d54:	e0 2d       	mov	r30, r0
    1d56:	60 e0       	ldi	r22, 0x00	; 0
    1d58:	09 95       	icall
    1d5a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1d5e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1d62:	01 97       	sbiw	r24, 0x01	; 1
    1d64:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1d68:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1d6c:	20 91 1d 0a 	lds	r18, 0x0A1D	; 0x800a1d <progScrollEnde>
    1d70:	30 91 1e 0a 	lds	r19, 0x0A1E	; 0x800a1e <progScrollEnde+0x1>
    1d74:	31 95       	neg	r19
    1d76:	21 95       	neg	r18
    1d78:	31 09       	sbc	r19, r1
    1d7a:	82 17       	cp	r24, r18
    1d7c:	93 07       	cpc	r25, r19
    1d7e:	34 f4       	brge	.+12     	; 0x1d8c <progScrollText(String, unsigned int, int, int, unsigned char)+0xf4>
    1d80:	84 e1       	ldi	r24, 0x14	; 20
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1d88:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1d8c:	0e 94 2b 4a 	call	0x9456	; 0x9456 <yield>
    1d90:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1d94:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1d98:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Framebuffer_GFX::clear()>
    1d9c:	e0 91 2c 10 	lds	r30, 0x102C	; 0x80102c <matrix>
    1da0:	f0 91 2d 10 	lds	r31, 0x102D	; 0x80102d <matrix+0x1>
    1da4:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1da8:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1dac:	94 87       	std	Z+12, r25	; 0x0c
    1dae:	83 87       	std	Z+11, r24	; 0x0b
    1db0:	8d e0       	ldi	r24, 0x0D	; 13
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	96 87       	std	Z+14, r25	; 0x0e
    1db6:	85 87       	std	Z+13, r24	; 0x0d
    1db8:	d2 8b       	std	Z+18, r29	; 0x12
    1dba:	c1 8b       	std	Z+17, r28	; 0x11
    1dbc:	d0 8b       	std	Z+16, r29	; 0x10
    1dbe:	c7 87       	std	Z+15, r28	; 0x0f
    1dc0:	b7 01       	movw	r22, r14
    1dc2:	cf 01       	movw	r24, r30
    1dc4:	0e 94 7c 46 	call	0x8cf8	; 0x8cf8 <Print::print(String const&)>
    1dc8:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1dcc:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1dd0:	df 91       	pop	r29
    1dd2:	cf 91       	pop	r28
    1dd4:	0f 91       	pop	r16
    1dd6:	ff 90       	pop	r15
    1dd8:	ef 90       	pop	r14
    1dda:	df 90       	pop	r13
    1ddc:	cf 90       	pop	r12
    1dde:	bf 90       	pop	r11
    1de0:	af 90       	pop	r10
    1de2:	0c 94 c7 37 	jmp	0x6f8e	; 0x6f8e <FastLED_NeoMatrix::show()>
    1de6:	df 91       	pop	r29
    1de8:	cf 91       	pop	r28
    1dea:	0f 91       	pop	r16
    1dec:	ff 90       	pop	r15
    1dee:	ef 90       	pop	r14
    1df0:	df 90       	pop	r13
    1df2:	cf 90       	pop	r12
    1df4:	bf 90       	pop	r11
    1df6:	af 90       	pop	r10
    1df8:	08 95       	ret

00001dfa <progShowROOTS(unsigned int, unsigned char)>:
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	8c 01       	movw	r16, r24
    1e04:	c6 2f       	mov	r28, r22
    1e06:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1e0a:	81 11       	cpse	r24, r1
    1e0c:	0e c0       	rjmp	.+28     	; 0x1e2a <progShowROOTS(unsigned int, unsigned char)+0x30>
    1e0e:	61 e0       	ldi	r22, 0x01	; 1
    1e10:	8d e3       	ldi	r24, 0x3D	; 61
    1e12:	90 e1       	ldi	r25, 0x10	; 16
    1e14:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1e18:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1e1c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1e20:	c0 93 29 0a 	sts	0x0A29, r28	; 0x800a29 <nextSongPart>
    1e24:	81 e0       	ldi	r24, 0x01	; 1
    1e26:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1e2a:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    1e2e:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    1e32:	84 3f       	cpi	r24, 0xF4	; 244
    1e34:	91 40       	sbci	r25, 0x01	; 1
    1e36:	08 f4       	brcc	.+2      	; 0x1e3a <progShowROOTS(unsigned int, unsigned char)+0x40>
    1e38:	b1 c0       	rjmp	.+354    	; 0x1f9c <progShowROOTS(unsigned int, unsigned char)+0x1a2>
    1e3a:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    1e3e:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    1e42:	8f e0       	ldi	r24, 0x0F	; 15
    1e44:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <FastLED>
    1e48:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1e4c:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1e50:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Framebuffer_GFX::clear()>
    1e54:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1e58:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	56 96       	adiw	r26, 0x16	; 22
    1e60:	1c 92       	st	X, r1
    1e62:	61 e0       	ldi	r22, 0x01	; 1
    1e64:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <Adafruit_GFX::setTextSize(unsigned char)>
    1e68:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1e6c:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1e70:	dc 01       	movw	r26, r24
    1e72:	ed 91       	ld	r30, X+
    1e74:	fc 91       	ld	r31, X
    1e76:	00 8c       	ldd	r0, Z+24	; 0x18
    1e78:	f1 8d       	ldd	r31, Z+25	; 0x19
    1e7a:	e0 2d       	mov	r30, r0
    1e7c:	60 e0       	ldi	r22, 0x00	; 0
    1e7e:	09 95       	icall
    1e80:	0e 94 2b 4a 	call	0x9456	; 0x9456 <yield>
    1e84:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1e88:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1e8c:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Framebuffer_GFX::clear()>
    1e90:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1e94:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    1e98:	1c 86       	std	Y+12, r1	; 0x0c
    1e9a:	1b 86       	std	Y+11, r1	; 0x0b
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	9e 87       	std	Y+14, r25	; 0x0e
    1ea2:	8d 87       	std	Y+13, r24	; 0x0d
    1ea4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    1ea8:	9a 8b       	std	Y+18, r25	; 0x12
    1eaa:	89 8b       	std	Y+17, r24	; 0x11
    1eac:	98 8b       	std	Y+16, r25	; 0x10
    1eae:	8f 87       	std	Y+15, r24	; 0x0f
    1eb0:	69 e1       	ldi	r22, 0x19	; 25
    1eb2:	71 e0       	ldi	r23, 0x01	; 1
    1eb4:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1eb8:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1ebc:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1ec0:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1ec4:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    1ec8:	1c 86       	std	Y+12, r1	; 0x0c
    1eca:	1b 86       	std	Y+11, r1	; 0x0b
    1ecc:	88 e0       	ldi	r24, 0x08	; 8
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	9e 87       	std	Y+14, r25	; 0x0e
    1ed2:	8d 87       	std	Y+13, r24	; 0x0d
    1ed4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    1ed8:	9a 8b       	std	Y+18, r25	; 0x12
    1eda:	89 8b       	std	Y+17, r24	; 0x11
    1edc:	98 8b       	std	Y+16, r25	; 0x10
    1ede:	8f 87       	std	Y+15, r24	; 0x0f
    1ee0:	6b e1       	ldi	r22, 0x1B	; 27
    1ee2:	71 e0       	ldi	r23, 0x01	; 1
    1ee4:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1ee8:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1eec:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1ef0:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1ef4:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    1ef8:	84 e0       	ldi	r24, 0x04	; 4
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9c 87       	std	Y+12, r25	; 0x0c
    1efe:	8b 87       	std	Y+11, r24	; 0x0b
    1f00:	0d e0       	ldi	r16, 0x0D	; 13
    1f02:	10 e0       	ldi	r17, 0x00	; 0
    1f04:	1e 87       	std	Y+14, r17	; 0x0e
    1f06:	0d 87       	std	Y+13, r16	; 0x0d
    1f08:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    1f0c:	9a 8b       	std	Y+18, r25	; 0x12
    1f0e:	89 8b       	std	Y+17, r24	; 0x11
    1f10:	98 8b       	std	Y+16, r25	; 0x10
    1f12:	8f 87       	std	Y+15, r24	; 0x0f
    1f14:	6b e1       	ldi	r22, 0x1B	; 27
    1f16:	71 e0       	ldi	r23, 0x01	; 1
    1f18:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1f1c:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1f20:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1f24:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1f28:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    1f2c:	8a e0       	ldi	r24, 0x0A	; 10
    1f2e:	90 e0       	ldi	r25, 0x00	; 0
    1f30:	9c 87       	std	Y+12, r25	; 0x0c
    1f32:	8b 87       	std	Y+11, r24	; 0x0b
    1f34:	8e e0       	ldi	r24, 0x0E	; 14
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	9e 87       	std	Y+14, r25	; 0x0e
    1f3a:	8d 87       	std	Y+13, r24	; 0x0d
    1f3c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    1f40:	9a 8b       	std	Y+18, r25	; 0x12
    1f42:	89 8b       	std	Y+17, r24	; 0x11
    1f44:	98 8b       	std	Y+16, r25	; 0x10
    1f46:	8f 87       	std	Y+15, r24	; 0x0f
    1f48:	6d e1       	ldi	r22, 0x1D	; 29
    1f4a:	71 e0       	ldi	r23, 0x01	; 1
    1f4c:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1f50:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1f54:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1f58:	c0 91 2c 10 	lds	r28, 0x102C	; 0x80102c <matrix>
    1f5c:	d0 91 2d 10 	lds	r29, 0x102D	; 0x80102d <matrix+0x1>
    1f60:	8f e0       	ldi	r24, 0x0F	; 15
    1f62:	90 e0       	ldi	r25, 0x00	; 0
    1f64:	9c 87       	std	Y+12, r25	; 0x0c
    1f66:	8b 87       	std	Y+11, r24	; 0x0b
    1f68:	1e 87       	std	Y+14, r17	; 0x0e
    1f6a:	0d 87       	std	Y+13, r16	; 0x0d
    1f6c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    1f70:	9a 8b       	std	Y+18, r25	; 0x12
    1f72:	89 8b       	std	Y+17, r24	; 0x11
    1f74:	98 8b       	std	Y+16, r25	; 0x10
    1f76:	8f 87       	std	Y+15, r24	; 0x0f
    1f78:	60 e6       	ldi	r22, 0x60	; 96
    1f7a:	71 e0       	ldi	r23, 0x01	; 1
    1f7c:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1f80:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1f84:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1f88:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    1f8c:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	1f 91       	pop	r17
    1f96:	0f 91       	pop	r16
    1f98:	0c 94 c7 37 	jmp	0x6f8e	; 0x6f8e <FastLED_NeoMatrix::show()>
    1f9c:	df 91       	pop	r29
    1f9e:	cf 91       	pop	r28
    1fa0:	1f 91       	pop	r17
    1fa2:	0f 91       	pop	r16
    1fa4:	08 95       	ret

00001fa6 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    1fa6:	8f 92       	push	r8
    1fa8:	9f 92       	push	r9
    1faa:	af 92       	push	r10
    1fac:	bf 92       	push	r11
    1fae:	cf 92       	push	r12
    1fb0:	df 92       	push	r13
    1fb2:	ef 92       	push	r14
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	cf 93       	push	r28
    1fba:	df 93       	push	r29
    1fbc:	ec 01       	movw	r28, r24
    1fbe:	5b 01       	movw	r10, r22
    1fc0:	6a 01       	movw	r12, r20
    1fc2:	49 01       	movw	r8, r18
    1fc4:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1fc8:	81 11       	cpse	r24, r1
    1fca:	16 c0       	rjmp	.+44     	; 0x1ff8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    1fcc:	61 e0       	ldi	r22, 0x01	; 1
    1fce:	8d e3       	ldi	r24, 0x3D	; 61
    1fd0:	90 e1       	ldi	r25, 0x10	; 16
    1fd2:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    1fd6:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1fda:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1fde:	e0 92 29 0a 	sts	0x0A29, r14	; 0x800a29 <nextSongPart>
    1fe2:	81 e0       	ldi	r24, 0x01	; 1
    1fe4:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    1fe8:	10 92 e2 09 	sts	0x09E2, r1	; 0x8009e2 <zaehlerWortArray+0x1>
    1fec:	10 92 e1 09 	sts	0x09E1, r1	; 0x8009e1 <zaehlerWortArray>
    1ff0:	d0 92 31 0a 	sts	0x0A31, r13	; 0x800a31 <millisCounterTimer+0x1>
    1ff4:	c0 92 30 0a 	sts	0x0A30, r12	; 0x800a30 <millisCounterTimer>
    1ff8:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    1ffc:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    2000:	8c 15       	cp	r24, r12
    2002:	9d 05       	cpc	r25, r13
    2004:	08 f4       	brcc	.+2      	; 0x2008 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    2006:	5b c0       	rjmp	.+182    	; 0x20be <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    2008:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    200c:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    2010:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <zaehlerWortArray>
    2014:	90 91 e2 09 	lds	r25, 0x09E2	; 0x8009e2 <zaehlerWortArray+0x1>
    2018:	a8 16       	cp	r10, r24
    201a:	b9 06       	cpc	r11, r25
    201c:	0c f4       	brge	.+2      	; 0x2020 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    201e:	4f c0       	rjmp	.+158    	; 0x20be <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    2020:	85 e0       	ldi	r24, 0x05	; 5
    2022:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <FastLED>
    2026:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    202a:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    202e:	0e 94 ce 05 	call	0xb9c	; 0xb9c <Framebuffer_GFX::clear()>
    2032:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    2036:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    203a:	dc 01       	movw	r26, r24
    203c:	56 96       	adiw	r26, 0x16	; 22
    203e:	1c 92       	st	X, r1
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	0e 94 a8 37 	call	0x6f50	; 0x6f50 <Adafruit_GFX::setTextSize(unsigned char)>
    2046:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    204a:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    204e:	dc 01       	movw	r26, r24
    2050:	ed 91       	ld	r30, X+
    2052:	fc 91       	ld	r31, X
    2054:	00 8c       	ldd	r0, Z+24	; 0x18
    2056:	f1 8d       	ldd	r31, Z+25	; 0x19
    2058:	e0 2d       	mov	r30, r0
    205a:	60 e0       	ldi	r22, 0x00	; 0
    205c:	09 95       	icall
    205e:	0e 94 2b 4a 	call	0x9456	; 0x9456 <yield>
    2062:	e0 91 2c 10 	lds	r30, 0x102C	; 0x80102c <matrix>
    2066:	f0 91 2d 10 	lds	r31, 0x102D	; 0x80102d <matrix+0x1>
    206a:	82 e0       	ldi	r24, 0x02	; 2
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	94 87       	std	Z+12, r25	; 0x0c
    2070:	83 87       	std	Z+11, r24	; 0x0b
    2072:	8d e0       	ldi	r24, 0x0D	; 13
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	96 87       	std	Z+14, r25	; 0x0e
    2078:	85 87       	std	Z+13, r24	; 0x0d
    207a:	12 8b       	std	Z+18, r17	; 0x12
    207c:	01 8b       	std	Z+17, r16	; 0x11
    207e:	10 8b       	std	Z+16, r17	; 0x10
    2080:	07 87       	std	Z+15, r16	; 0x0f
    2082:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <zaehlerWortArray>
    2086:	90 91 e2 09 	lds	r25, 0x09E2	; 0x8009e2 <zaehlerWortArray+0x1>
    208a:	27 e0       	ldi	r18, 0x07	; 7
    208c:	28 9f       	mul	r18, r24
    208e:	b0 01       	movw	r22, r0
    2090:	29 9f       	mul	r18, r25
    2092:	70 0d       	add	r23, r0
    2094:	11 24       	eor	r1, r1
    2096:	6c 0f       	add	r22, r28
    2098:	7d 1f       	adc	r23, r29
    209a:	cf 01       	movw	r24, r30
    209c:	0e 94 7c 46 	call	0x8cf8	; 0x8cf8 <Print::print(String const&)>
    20a0:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    20a4:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    20a8:	0e 94 c7 37 	call	0x6f8e	; 0x6f8e <FastLED_NeoMatrix::show()>
    20ac:	80 91 e1 09 	lds	r24, 0x09E1	; 0x8009e1 <zaehlerWortArray>
    20b0:	90 91 e2 09 	lds	r25, 0x09E2	; 0x8009e2 <zaehlerWortArray+0x1>
    20b4:	01 96       	adiw	r24, 0x01	; 1
    20b6:	90 93 e2 09 	sts	0x09E2, r25	; 0x8009e2 <zaehlerWortArray+0x1>
    20ba:	80 93 e1 09 	sts	0x09E1, r24	; 0x8009e1 <zaehlerWortArray>
    20be:	df 91       	pop	r29
    20c0:	cf 91       	pop	r28
    20c2:	1f 91       	pop	r17
    20c4:	0f 91       	pop	r16
    20c6:	ef 90       	pop	r14
    20c8:	df 90       	pop	r13
    20ca:	cf 90       	pop	r12
    20cc:	bf 90       	pop	r11
    20ce:	af 90       	pop	r10
    20d0:	9f 90       	pop	r9
    20d2:	8f 90       	pop	r8
    20d4:	08 95       	ret

000020d6 <SetupTotallyRandomPalette()>:
}

// This function fills the palette with totally random colors.
void SetupTotallyRandomPalette()
    20d6:	bf 92       	push	r11
    20d8:	cf 92       	push	r12
    20da:	df 92       	push	r13
    20dc:	ef 92       	push	r14
    20de:	ff 92       	push	r15
    20e0:	0f 93       	push	r16
    20e2:	1f 93       	push	r17
    20e4:	cf 93       	push	r28
    20e6:	df 93       	push	r29
    20e8:	00 d0       	rcall	.+0      	; 0x20ea <SetupTotallyRandomPalette()+0x14>
    20ea:	1f 92       	push	r1
    20ec:	cd b7       	in	r28, 0x3d	; 61
    20ee:	de b7       	in	r29, 0x3e	; 62
    20f0:	0a ee       	ldi	r16, 0xEA	; 234
    20f2:	19 e0       	ldi	r17, 0x09	; 9
    20f4:	8a e1       	ldi	r24, 0x1A	; 26
    20f6:	e8 2e       	mov	r14, r24
    20f8:	8a e0       	ldi	r24, 0x0A	; 10
    20fa:	f8 2e       	mov	r15, r24
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    20fc:	95 e0       	ldi	r25, 0x05	; 5
    20fe:	c9 2e       	mov	r12, r25
    2100:	98 e0       	ldi	r25, 0x08	; 8
    2102:	d9 2e       	mov	r13, r25
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    2104:	bb 24       	eor	r11, r11
    2106:	ba 94       	dec	r11
    2108:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    210c:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    2110:	2c 9d       	mul	r18, r12
    2112:	c0 01       	movw	r24, r0
    2114:	2d 9d       	mul	r18, r13
    2116:	90 0d       	add	r25, r0
    2118:	3c 9d       	mul	r19, r12
    211a:	90 0d       	add	r25, r0
    211c:	11 24       	eor	r1, r1
    211e:	87 5e       	subi	r24, 0xE7	; 231
    2120:	99 4c       	sbci	r25, 0xC9	; 201
    2122:	8c 9d       	mul	r24, r12
    2124:	90 01       	movw	r18, r0
    2126:	8d 9d       	mul	r24, r13
    2128:	30 0d       	add	r19, r0
    212a:	9c 9d       	mul	r25, r12
    212c:	30 0d       	add	r19, r0
    212e:	11 24       	eor	r1, r1
    2130:	27 5e       	subi	r18, 0xE7	; 231
    2132:	39 4c       	sbci	r19, 0xC9	; 201
    2134:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    2138:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    213c:	23 0f       	add	r18, r19
    213e:	29 83       	std	Y+1, r18	; 0x01
    2140:	ba 82       	std	Y+2, r11	; 0x02
    2142:	89 0f       	add	r24, r25
    2144:	8b 83       	std	Y+3, r24	; 0x03
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    2146:	b8 01       	movw	r22, r16
    2148:	ce 01       	movw	r24, r28
    214a:	01 96       	adiw	r24, 0x01	; 1
    214c:	0e 94 d7 3d 	call	0x7bae	; 0x7bae <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2150:	0d 5f       	subi	r16, 0xFD	; 253
    2152:	1f 4f       	sbci	r17, 0xFF	; 255
{
    2154:	e0 16       	cp	r14, r16
    2156:	f1 06       	cpc	r15, r17
    2158:	b9 f6       	brne	.-82     	; 0x2108 <__stack+0x9>
	for (int i = 0; i < 16; i++) {
		currentPalette[i] = CHSV(random8(), 255, random8());
	}
    215a:	0f 90       	pop	r0
    215c:	0f 90       	pop	r0
    215e:	0f 90       	pop	r0
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
    216c:	df 90       	pop	r13
    216e:	cf 90       	pop	r12
    2170:	bf 90       	pop	r11
    2172:	08 95       	ret

00002174 <SetupBlackAndWhiteStripedPalette()>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    2174:	cf 93       	push	r28
    2176:	df 93       	push	r29
    2178:	00 d0       	rcall	.+0      	; 0x217a <SetupBlackAndWhiteStripedPalette()+0x6>
    217a:	1f 92       	push	r1
    217c:	cd b7       	in	r28, 0x3d	; 61
    217e:	de b7       	in	r29, 0x3e	; 62
    2180:	19 82       	std	Y+1, r1	; 0x01
    2182:	1a 82       	std	Y+2, r1	; 0x02
    2184:	1b 82       	std	Y+3, r1	; 0x03
    2186:	ae 01       	movw	r20, r28
    2188:	4f 5f       	subi	r20, 0xFF	; 255
    218a:	5f 4f       	sbci	r21, 0xFF	; 255
    218c:	60 e1       	ldi	r22, 0x10	; 16
    218e:	70 e0       	ldi	r23, 0x00	; 0
    2190:	8a ee       	ldi	r24, 0xEA	; 234
    2192:	99 e0       	ldi	r25, 0x09	; 9
    2194:	0e 94 b6 3a 	call	0x756c	; 0x756c <fill_solid(CRGB*, int, CRGB const&)>
    2198:	ea ee       	ldi	r30, 0xEA	; 234
    219a:	f9 e0       	ldi	r31, 0x09	; 9
    219c:	8f ef       	ldi	r24, 0xFF	; 255
    219e:	80 83       	st	Z, r24
    21a0:	81 83       	std	Z+1, r24	; 0x01
    21a2:	82 83       	std	Z+2, r24	; 0x02
    21a4:	84 87       	std	Z+12, r24	; 0x0c
    21a6:	85 87       	std	Z+13, r24	; 0x0d
    21a8:	86 87       	std	Z+14, r24	; 0x0e
    21aa:	80 8f       	std	Z+24, r24	; 0x18
    21ac:	81 8f       	std	Z+25, r24	; 0x19
    21ae:	82 8f       	std	Z+26, r24	; 0x1a
    21b0:	84 a3       	std	Z+36, r24	; 0x24
    21b2:	85 a3       	std	Z+37, r24	; 0x25
    21b4:	86 a3       	std	Z+38, r24	; 0x26
    21b6:	0f 90       	pop	r0
    21b8:	0f 90       	pop	r0
    21ba:	0f 90       	pop	r0
    21bc:	df 91       	pop	r29
    21be:	cf 91       	pop	r28
    21c0:	08 95       	ret

000021c2 <SetupPurpleAndGreenPalette()>:
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	e6 97       	sbiw	r28, 0x36	; 54
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
    21d8:	80 ec       	ldi	r24, 0xC0	; 192
    21da:	89 83       	std	Y+1, r24	; 0x01
    21dc:	1f ef       	ldi	r17, 0xFF	; 255
    21de:	1a 83       	std	Y+2, r17	; 0x02
    21e0:	1b 83       	std	Y+3, r17	; 0x03
    21e2:	be 01       	movw	r22, r28
    21e4:	6c 5c       	subi	r22, 0xCC	; 204
    21e6:	7f 4f       	sbci	r23, 0xFF	; 255
    21e8:	ce 01       	movw	r24, r28
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	0e 94 d7 3d 	call	0x7bae	; 0x7bae <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    21f0:	80 e6       	ldi	r24, 0x60	; 96
    21f2:	89 83       	std	Y+1, r24	; 0x01
    21f4:	1a 83       	std	Y+2, r17	; 0x02
    21f6:	1b 83       	std	Y+3, r17	; 0x03
    21f8:	be 01       	movw	r22, r28
    21fa:	6f 5c       	subi	r22, 0xCF	; 207
    21fc:	7f 4f       	sbci	r23, 0xFF	; 255
    21fe:	ce 01       	movw	r24, r28
    2200:	01 96       	adiw	r24, 0x01	; 1
    2202:	0e 94 d7 3d 	call	0x7bae	; 0x7bae <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2206:	59 a9       	ldd	r21, Y+49	; 0x31
    2208:	59 83       	std	Y+1, r21	; 0x01
    220a:	4a a9       	ldd	r20, Y+50	; 0x32
    220c:	4a 83       	std	Y+2, r20	; 0x02
    220e:	3b a9       	ldd	r19, Y+51	; 0x33
    2210:	3b 83       	std	Y+3, r19	; 0x03
    2212:	5c 83       	std	Y+4, r21	; 0x04
    2214:	4d 83       	std	Y+5, r20	; 0x05
    2216:	3e 83       	std	Y+6, r19	; 0x06
    2218:	1f 82       	std	Y+7, r1	; 0x07
    221a:	18 86       	std	Y+8, r1	; 0x08
    221c:	19 86       	std	Y+9, r1	; 0x09
    221e:	1a 86       	std	Y+10, r1	; 0x0a
    2220:	1b 86       	std	Y+11, r1	; 0x0b
    2222:	1c 86       	std	Y+12, r1	; 0x0c
    2224:	2c a9       	ldd	r18, Y+52	; 0x34
    2226:	2d 87       	std	Y+13, r18	; 0x0d
    2228:	9d a9       	ldd	r25, Y+53	; 0x35
    222a:	9e 87       	std	Y+14, r25	; 0x0e
    222c:	8e a9       	ldd	r24, Y+54	; 0x36
    222e:	8f 87       	std	Y+15, r24	; 0x0f
    2230:	28 8b       	std	Y+16, r18	; 0x10
    2232:	99 8b       	std	Y+17, r25	; 0x11
    2234:	8a 8b       	std	Y+18, r24	; 0x12
    2236:	1b 8a       	std	Y+19, r1	; 0x13
    2238:	1c 8a       	std	Y+20, r1	; 0x14
    223a:	1d 8a       	std	Y+21, r1	; 0x15
    223c:	1e 8a       	std	Y+22, r1	; 0x16
    223e:	1f 8a       	std	Y+23, r1	; 0x17
    2240:	18 8e       	std	Y+24, r1	; 0x18
    2242:	59 8f       	std	Y+25, r21	; 0x19
    2244:	4a 8f       	std	Y+26, r20	; 0x1a
    2246:	3b 8f       	std	Y+27, r19	; 0x1b
    2248:	5c 8f       	std	Y+28, r21	; 0x1c
    224a:	4d 8f       	std	Y+29, r20	; 0x1d
    224c:	3e 8f       	std	Y+30, r19	; 0x1e
    224e:	1f 8e       	std	Y+31, r1	; 0x1f
    2250:	18 a2       	std	Y+32, r1	; 0x20
    2252:	19 a2       	std	Y+33, r1	; 0x21
    2254:	1a a2       	std	Y+34, r1	; 0x22
    2256:	1b a2       	std	Y+35, r1	; 0x23
    2258:	1c a2       	std	Y+36, r1	; 0x24
    225a:	2d a3       	std	Y+37, r18	; 0x25
    225c:	9e a3       	std	Y+38, r25	; 0x26
    225e:	8f a3       	std	Y+39, r24	; 0x27
    2260:	28 a7       	std	Y+40, r18	; 0x28
    2262:	99 a7       	std	Y+41, r25	; 0x29
    2264:	8a a7       	std	Y+42, r24	; 0x2a
    2266:	1b a6       	std	Y+43, r1	; 0x2b
    2268:	1c a6       	std	Y+44, r1	; 0x2c
    226a:	1d a6       	std	Y+45, r1	; 0x2d
    226c:	1e a6       	std	Y+46, r1	; 0x2e
    226e:	1f a6       	std	Y+47, r1	; 0x2f
    2270:	18 aa       	std	Y+48, r1	; 0x30
    2272:	40 e3       	ldi	r20, 0x30	; 48
    2274:	50 e0       	ldi	r21, 0x00	; 0
    2276:	be 01       	movw	r22, r28
    2278:	6f 5f       	subi	r22, 0xFF	; 255
    227a:	7f 4f       	sbci	r23, 0xFF	; 255
    227c:	8a ee       	ldi	r24, 0xEA	; 234
    227e:	99 e0       	ldi	r25, 0x09	; 9
    2280:	0e 94 a3 3e 	call	0x7d46	; 0x7d46 <memmove8>
    2284:	e6 96       	adiw	r28, 0x36	; 54
    2286:	0f b6       	in	r0, 0x3f	; 63
    2288:	f8 94       	cli
    228a:	de bf       	out	0x3e, r29	; 62
    228c:	0f be       	out	0x3f, r0	; 63
    228e:	cd bf       	out	0x3d, r28	; 61
    2290:	df 91       	pop	r29
    2292:	cf 91       	pop	r28
    2294:	1f 91       	pop	r17
    2296:	08 95       	ret

00002298 <FillLEDsFromPaletteColors(unsigned char)>:
    2298:	df 92       	push	r13
    229a:	ef 92       	push	r14
    229c:	ff 92       	push	r15
    229e:	0f 93       	push	r16
    22a0:	1f 93       	push	r17
    22a2:	cf 93       	push	r28
    22a4:	df 93       	push	r29
    22a6:	00 d0       	rcall	.+0      	; 0x22a8 <FillLEDsFromPaletteColors(unsigned char)+0x10>
    22a8:	1f 92       	push	r1
    22aa:	cd b7       	in	r28, 0x3d	; 61
    22ac:	de b7       	in	r29, 0x3e	; 62
    22ae:	d8 2e       	mov	r13, r24
    22b0:	8e e3       	ldi	r24, 0x3E	; 62
    22b2:	e8 2e       	mov	r14, r24
    22b4:	8a e0       	ldi	r24, 0x0A	; 10
    22b6:	f8 2e       	mov	r15, r24
    22b8:	00 91 e8 09 	lds	r16, 0x09E8	; 0x8009e8 <currentBlending>
    22bc:	10 91 e9 09 	lds	r17, 0x09E9	; 0x8009e9 <currentBlending+0x1>
    22c0:	2f ef       	ldi	r18, 0xFF	; 255
    22c2:	4d 2d       	mov	r20, r13
    22c4:	6a ee       	ldi	r22, 0xEA	; 234
    22c6:	79 e0       	ldi	r23, 0x09	; 9
    22c8:	ce 01       	movw	r24, r28
    22ca:	01 96       	adiw	r24, 0x01	; 1
    22cc:	0e 94 cb 3a 	call	0x7596	; 0x7596 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	f7 01       	movw	r30, r14
    22d4:	80 83       	st	Z, r24
    22d6:	8a 81       	ldd	r24, Y+2	; 0x02
    22d8:	81 83       	std	Z+1, r24	; 0x01
    22da:	8b 81       	ldd	r24, Y+3	; 0x03
    22dc:	82 83       	std	Z+2, r24	; 0x02
    22de:	f3 e0       	ldi	r31, 0x03	; 3
    22e0:	df 0e       	add	r13, r31
    22e2:	83 e0       	ldi	r24, 0x03	; 3
    22e4:	e8 0e       	add	r14, r24
    22e6:	f1 1c       	adc	r15, r1
    22e8:	e0 e8       	ldi	r30, 0x80	; 128
    22ea:	ee 16       	cp	r14, r30
    22ec:	ed e0       	ldi	r30, 0x0D	; 13
    22ee:	fe 06       	cpc	r15, r30
    22f0:	19 f7       	brne	.-58     	; 0x22b8 <FillLEDsFromPaletteColors(unsigned char)+0x20>
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	0f 90       	pop	r0
    22f8:	df 91       	pop	r29
    22fa:	cf 91       	pop	r28
    22fc:	1f 91       	pop	r17
    22fe:	0f 91       	pop	r16
    2300:	ff 90       	pop	r15
    2302:	ef 90       	pop	r14
    2304:	df 90       	pop	r13
    2306:	08 95       	ret

00002308 <progPalette(unsigned int, unsigned char, unsigned char)>:
    2308:	0f 93       	push	r16
    230a:	1f 93       	push	r17
    230c:	cf 93       	push	r28
    230e:	df 93       	push	r29
    2310:	8c 01       	movw	r16, r24
    2312:	c6 2f       	mov	r28, r22
    2314:	d4 2f       	mov	r29, r20
    2316:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    231a:	81 11       	cpse	r24, r1
    231c:	43 c0       	rjmp	.+134    	; 0x23a4 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    231e:	61 e0       	ldi	r22, 0x01	; 1
    2320:	8d e3       	ldi	r24, 0x3D	; 61
    2322:	90 e1       	ldi	r25, 0x10	; 16
    2324:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    2328:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    232c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    2330:	d0 93 29 0a 	sts	0x0A29, r29	; 0x800a29 <nextSongPart>
    2334:	81 e0       	ldi	r24, 0x01	; 1
    2336:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    233a:	cc 30       	cpi	r28, 0x0C	; 12
    233c:	08 f0       	brcs	.+2      	; 0x2340 <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    233e:	32 c0       	rjmp	.+100    	; 0x23a4 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2340:	ec 2f       	mov	r30, r28
    2342:	f0 e0       	ldi	r31, 0x00	; 0
    2344:	ea 55       	subi	r30, 0x5A	; 90
    2346:	fe 4e       	sbci	r31, 0xEE	; 238
    2348:	0c 94 22 4c 	jmp	0x9844	; 0x9844 <__tablejump2__>
    234c:	b2 11       	cpse	r27, r2
    234e:	b9 11       	cpse	r27, r9
    2350:	c0 11       	cpse	r28, r0
    2352:	c3 11       	cpse	r28, r3
    2354:	cb 11       	cpse	r28, r11
    2356:	cd 11       	cpse	r28, r13
    2358:	ea 11       	cpse	r30, r10
    235a:	ec 11       	cpse	r30, r12
    235c:	ef 11       	cpse	r30, r15
    235e:	f2 11       	cpse	r31, r2
    2360:	f5 11       	cpse	r31, r5
    2362:	f8 11       	cpse	r31, r8
    2364:	68 eb       	ldi	r22, 0xB8	; 184
    2366:	76 e0       	ldi	r23, 0x06	; 6
    2368:	8a ee       	ldi	r24, 0xEA	; 234
    236a:	99 e0       	ldi	r25, 0x09	; 9
    236c:	0e 94 ab 05 	call	0xb56	; 0xb56 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2370:	0b c0       	rjmp	.+22     	; 0x2388 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    2372:	68 e7       	ldi	r22, 0x78	; 120
    2374:	76 e0       	ldi	r23, 0x06	; 6
    2376:	8a ee       	ldi	r24, 0xEA	; 234
    2378:	99 e0       	ldi	r25, 0x09	; 9
    237a:	0e 94 ab 05 	call	0xb56	; 0xb56 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    237e:	0e c0       	rjmp	.+28     	; 0x239c <progPalette(unsigned int, unsigned char, unsigned char)+0x94>
    2380:	68 e7       	ldi	r22, 0x78	; 120
    2382:	76 e0       	ldi	r23, 0x06	; 6
    2384:	f1 cf       	rjmp	.-30     	; 0x2368 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2386:	1d df       	rcall	.-454    	; 0x21c2 <SetupPurpleAndGreenPalette()>
    2388:	81 e0       	ldi	r24, 0x01	; 1
    238a:	90 e0       	ldi	r25, 0x00	; 0
    238c:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <currentBlending+0x1>
    2390:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <currentBlending>
    2394:	07 c0       	rjmp	.+14     	; 0x23a4 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2396:	9f de       	rcall	.-706    	; 0x20d6 <SetupTotallyRandomPalette()>
    2398:	f7 cf       	rjmp	.-18     	; 0x2388 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    239a:	ec de       	rcall	.-552    	; 0x2174 <SetupBlackAndWhiteStripedPalette()>
    239c:	10 92 e9 09 	sts	0x09E9, r1	; 0x8009e9 <currentBlending+0x1>
    23a0:	10 92 e8 09 	sts	0x09E8, r1	; 0x8009e8 <currentBlending>
    23a4:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    23a8:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    23ac:	01 96       	adiw	r24, 0x01	; 1
    23ae:	89 3e       	cpi	r24, 0xE9	; 233
    23b0:	23 e0       	ldi	r18, 0x03	; 3
    23b2:	92 07       	cpc	r25, r18
    23b4:	04 f5       	brge	.+64     	; 0x23f6 <progPalette(unsigned int, unsigned char, unsigned char)+0xee>
    23b6:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    23ba:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    23be:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    23c2:	6a df       	rcall	.-300    	; 0x2298 <FillLEDsFromPaletteColors(unsigned char)>
    23c4:	8d e3       	ldi	r24, 0x3D	; 61
    23c6:	90 e1       	ldi	r25, 0x10	; 16
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	0c 94 c6 05 	jmp	0xb8c	; 0xb8c <CFastLED::show()>
    23d4:	cf de       	rcall	.-610    	; 0x2174 <SetupBlackAndWhiteStripedPalette()>
    23d6:	d8 cf       	rjmp	.-80     	; 0x2388 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    23d8:	68 ef       	ldi	r22, 0xF8	; 248
    23da:	76 e0       	ldi	r23, 0x06	; 6
    23dc:	c5 cf       	rjmp	.-118    	; 0x2368 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23de:	68 e3       	ldi	r22, 0x38	; 56
    23e0:	76 e0       	ldi	r23, 0x06	; 6
    23e2:	c2 cf       	rjmp	.-124    	; 0x2368 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23e4:	61 e4       	ldi	r22, 0x41	; 65
    23e6:	75 e0       	ldi	r23, 0x05	; 5
    23e8:	c6 cf       	rjmp	.-116    	; 0x2376 <progPalette(unsigned int, unsigned char, unsigned char)+0x6e>
    23ea:	61 e4       	ldi	r22, 0x41	; 65
    23ec:	75 e0       	ldi	r23, 0x05	; 5
    23ee:	bc cf       	rjmp	.-136    	; 0x2368 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23f0:	68 e9       	ldi	r22, 0x98	; 152
    23f2:	70 e0       	ldi	r23, 0x00	; 0
    23f4:	b9 cf       	rjmp	.-142    	; 0x2368 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23f6:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    23fa:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    23fe:	df cf       	rjmp	.-66     	; 0x23be <progPalette(unsigned int, unsigned char, unsigned char)+0xb6>

00002400 <getMatrixColor(int)>:
    2400:	dc 01       	movw	r26, r24
    2402:	60 31       	cpi	r22, 0x10	; 16
    2404:	71 05       	cpc	r23, r1
    2406:	08 f0       	brcs	.+2      	; 0x240a <getMatrixColor(int)+0xa>
    2408:	52 c0       	rjmp	.+164    	; 0x24ae <getMatrixColor(int)+0xae>
    240a:	fb 01       	movw	r30, r22
    240c:	e6 5f       	subi	r30, 0xF6	; 246
    240e:	fd 4e       	sbci	r31, 0xED	; 237
    2410:	0c 94 22 4c 	jmp	0x9844	; 0x9844 <__tablejump2__>
    2414:	57 12       	cpse	r5, r23
    2416:	1a 12       	cpse	r1, r26
    2418:	1a 12       	cpse	r1, r26
    241a:	25 12       	cpse	r2, r21
    241c:	29 12       	cpse	r2, r25
    241e:	2d 12       	cpse	r2, r29
    2420:	31 12       	cpse	r3, r17
    2422:	35 12       	cpse	r3, r21
    2424:	39 12       	cpse	r3, r25
    2426:	3d 12       	cpse	r3, r29
    2428:	41 12       	cpse	r4, r17
    242a:	45 12       	cpse	r4, r21
    242c:	49 12       	cpse	r4, r25
    242e:	4b 12       	cpse	r4, r27
    2430:	4f 12       	cpse	r4, r31
    2432:	51 12       	cpse	r5, r17
    2434:	81 e0       	ldi	r24, 0x01	; 1
    2436:	8c 93       	st	X, r24
    2438:	99 e1       	ldi	r25, 0x19	; 25
    243a:	11 96       	adiw	r26, 0x01	; 1
    243c:	9c 93       	st	X, r25
    243e:	11 97       	sbiw	r26, 0x01	; 1
    2440:	12 96       	adiw	r26, 0x02	; 2
    2442:	8c 93       	st	X, r24
    2444:	12 97       	sbiw	r26, 0x02	; 2
    2446:	cd 01       	movw	r24, r26
    2448:	08 95       	ret
    244a:	81 e0       	ldi	r24, 0x01	; 1
    244c:	8c 93       	st	X, r24
    244e:	98 e2       	ldi	r25, 0x28	; 40
    2450:	f4 cf       	rjmp	.-24     	; 0x243a <getMatrixColor(int)+0x3a>
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	8c 93       	st	X, r24
    2456:	90 e5       	ldi	r25, 0x50	; 80
    2458:	f0 cf       	rjmp	.-32     	; 0x243a <getMatrixColor(int)+0x3a>
    245a:	81 e0       	ldi	r24, 0x01	; 1
    245c:	8c 93       	st	X, r24
    245e:	98 e7       	ldi	r25, 0x78	; 120
    2460:	ec cf       	rjmp	.-40     	; 0x243a <getMatrixColor(int)+0x3a>
    2462:	81 e0       	ldi	r24, 0x01	; 1
    2464:	8c 93       	st	X, r24
    2466:	96 e9       	ldi	r25, 0x96	; 150
    2468:	e8 cf       	rjmp	.-48     	; 0x243a <getMatrixColor(int)+0x3a>
    246a:	81 e0       	ldi	r24, 0x01	; 1
    246c:	8c 93       	st	X, r24
    246e:	98 ec       	ldi	r25, 0xC8	; 200
    2470:	e4 cf       	rjmp	.-56     	; 0x243a <getMatrixColor(int)+0x3a>
    2472:	85 e0       	ldi	r24, 0x05	; 5
    2474:	8c 93       	st	X, r24
    2476:	9f ef       	ldi	r25, 0xFF	; 255
    2478:	e0 cf       	rjmp	.-64     	; 0x243a <getMatrixColor(int)+0x3a>
    247a:	8a e0       	ldi	r24, 0x0A	; 10
    247c:	8c 93       	st	X, r24
    247e:	94 eb       	ldi	r25, 0xB4	; 180
    2480:	dc cf       	rjmp	.-72     	; 0x243a <getMatrixColor(int)+0x3a>
    2482:	8a e0       	ldi	r24, 0x0A	; 10
    2484:	8c 93       	st	X, r24
    2486:	90 ea       	ldi	r25, 0xA0	; 160
    2488:	d8 cf       	rjmp	.-80     	; 0x243a <getMatrixColor(int)+0x3a>
    248a:	84 e1       	ldi	r24, 0x14	; 20
    248c:	8c 93       	st	X, r24
    248e:	9c e8       	ldi	r25, 0x8C	; 140
    2490:	d4 cf       	rjmp	.-88     	; 0x243a <getMatrixColor(int)+0x3a>
    2492:	8e e1       	ldi	r24, 0x1E	; 30
    2494:	e3 cf       	rjmp	.-58     	; 0x245c <getMatrixColor(int)+0x5c>
    2496:	82 e3       	ldi	r24, 0x32	; 50
    2498:	8c 93       	st	X, r24
    249a:	94 e6       	ldi	r25, 0x64	; 100
    249c:	ce cf       	rjmp	.-100    	; 0x243a <getMatrixColor(int)+0x3a>
    249e:	84 e6       	ldi	r24, 0x64	; 100
    24a0:	e1 cf       	rjmp	.-62     	; 0x2464 <getMatrixColor(int)+0x64>
    24a2:	84 eb       	ldi	r24, 0xB4	; 180
    24a4:	8c 93       	st	X, r24
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	8c 93       	st	X, r24
    24aa:	11 97       	sbiw	r26, 0x01	; 1
    24ac:	c9 cf       	rjmp	.-110    	; 0x2440 <getMatrixColor(int)+0x40>
    24ae:	1c 92       	st	X, r1
    24b0:	11 96       	adiw	r26, 0x01	; 1
    24b2:	1c 92       	st	X, r1
    24b4:	11 97       	sbiw	r26, 0x01	; 1
    24b6:	12 96       	adiw	r26, 0x02	; 2
    24b8:	1c 92       	st	X, r1
    24ba:	12 97       	sbiw	r26, 0x02	; 2
    24bc:	c4 cf       	rjmp	.-120    	; 0x2446 <getMatrixColor(int)+0x46>

000024be <progMatrixHorizontal(unsigned int, unsigned char)>:
    24be:	cf 92       	push	r12
    24c0:	df 92       	push	r13
    24c2:	ef 92       	push	r14
    24c4:	ff 92       	push	r15
    24c6:	0f 93       	push	r16
    24c8:	1f 93       	push	r17
    24ca:	cf 93       	push	r28
    24cc:	df 93       	push	r29
    24ce:	00 d0       	rcall	.+0      	; 0x24d0 <progMatrixHorizontal(unsigned int, unsigned char)+0x12>
    24d0:	1f 92       	push	r1
    24d2:	cd b7       	in	r28, 0x3d	; 61
    24d4:	de b7       	in	r29, 0x3e	; 62
    24d6:	7c 01       	movw	r14, r24
    24d8:	16 2f       	mov	r17, r22
    24da:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    24de:	81 11       	cpse	r24, r1
    24e0:	1e c0       	rjmp	.+60     	; 0x251e <progMatrixHorizontal(unsigned int, unsigned char)+0x60>
    24e2:	61 e0       	ldi	r22, 0x01	; 1
    24e4:	8d e3       	ldi	r24, 0x3D	; 61
    24e6:	90 e1       	ldi	r25, 0x10	; 16
    24e8:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    24ec:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    24f0:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    24f4:	10 93 29 0a 	sts	0x0A29, r17	; 0x800a29 <nextSongPart>
    24f8:	81 e0       	ldi	r24, 0x01	; 1
    24fa:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    24fe:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    2502:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    2506:	8b e1       	ldi	r24, 0x1B	; 27
    2508:	90 e0       	ldi	r25, 0x00	; 0
    250a:	90 93 20 0a 	sts	0x0A20, r25	; 0x800a20 <progMatrixZaehler+0x1>
    250e:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <progMatrixZaehler>
    2512:	84 e6       	ldi	r24, 0x64	; 100
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	90 93 31 0a 	sts	0x0A31, r25	; 0x800a31 <millisCounterTimer+0x1>
    251a:	80 93 30 0a 	sts	0x0A30, r24	; 0x800a30 <millisCounterTimer>
    251e:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    2522:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    2526:	84 36       	cpi	r24, 0x64	; 100
    2528:	91 05       	cpc	r25, r1
    252a:	08 f4       	brcc	.+2      	; 0x252e <progMatrixHorizontal(unsigned int, unsigned char)+0x70>
    252c:	ce c3       	rjmp	.+1948   	; 0x2cca <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>
    252e:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    2532:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    2536:	e0 90 21 0a 	lds	r14, 0x0A21	; 0x800a21 <zaehler>
    253a:	f0 90 22 0a 	lds	r15, 0x0A22	; 0x800a22 <zaehler+0x1>
    253e:	00 e1       	ldi	r16, 0x10	; 16
    2540:	10 e0       	ldi	r17, 0x00	; 0
    2542:	f7 fc       	sbrc	r15, 7
    2544:	1c c0       	rjmp	.+56     	; 0x257e <progMatrixHorizontal(unsigned int, unsigned char)+0xc0>
    2546:	01 50       	subi	r16, 0x01	; 1
    2548:	11 09       	sbc	r17, r1
    254a:	02 30       	cpi	r16, 0x02	; 2
    254c:	11 05       	cpc	r17, r1
    254e:	14 f4       	brge	.+4      	; 0x2554 <progMatrixHorizontal(unsigned int, unsigned char)+0x96>
    2550:	10 e0       	ldi	r17, 0x00	; 0
    2552:	00 e0       	ldi	r16, 0x00	; 0
    2554:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2558:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    255c:	b8 01       	movw	r22, r16
    255e:	ce 01       	movw	r24, r28
    2560:	01 96       	adiw	r24, 0x01	; 1
    2562:	4e df       	rcall	.-356    	; 0x2400 <getMatrixColor(int)>
    2564:	9e 01       	movw	r18, r28
    2566:	2f 5f       	subi	r18, 0xFF	; 255
    2568:	3f 4f       	sbci	r19, 0xFF	; 255
    256a:	a7 01       	movw	r20, r14
    256c:	70 e0       	ldi	r23, 0x00	; 0
    256e:	60 e0       	ldi	r22, 0x00	; 0
    2570:	c6 01       	movw	r24, r12
    2572:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	e8 1a       	sub	r14, r24
    257a:	f1 08       	sbc	r15, r1
    257c:	e2 cf       	rjmp	.-60     	; 0x2542 <progMatrixHorizontal(unsigned int, unsigned char)+0x84>
    257e:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    2582:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    2586:	04 51       	subi	r16, 0x14	; 20
    2588:	11 09       	sbc	r17, r1
    258a:	60 e1       	ldi	r22, 0x10	; 16
    258c:	e6 2e       	mov	r14, r22
    258e:	f1 2c       	mov	r15, r1
    2590:	0c 3e       	cpi	r16, 0xEC	; 236
    2592:	8f ef       	ldi	r24, 0xFF	; 255
    2594:	18 07       	cpc	r17, r24
    2596:	ec f0       	brlt	.+58     	; 0x25d2 <progMatrixHorizontal(unsigned int, unsigned char)+0x114>
    2598:	81 e0       	ldi	r24, 0x01	; 1
    259a:	e8 1a       	sub	r14, r24
    259c:	f1 08       	sbc	r15, r1
    259e:	82 e0       	ldi	r24, 0x02	; 2
    25a0:	e8 16       	cp	r14, r24
    25a2:	f1 04       	cpc	r15, r1
    25a4:	14 f4       	brge	.+4      	; 0x25aa <progMatrixHorizontal(unsigned int, unsigned char)+0xec>
    25a6:	f1 2c       	mov	r15, r1
    25a8:	e1 2c       	mov	r14, r1
    25aa:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    25ae:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    25b2:	b7 01       	movw	r22, r14
    25b4:	ce 01       	movw	r24, r28
    25b6:	01 96       	adiw	r24, 0x01	; 1
    25b8:	23 df       	rcall	.-442    	; 0x2400 <getMatrixColor(int)>
    25ba:	9e 01       	movw	r18, r28
    25bc:	2f 5f       	subi	r18, 0xFF	; 255
    25be:	3f 4f       	sbci	r19, 0xFF	; 255
    25c0:	a8 01       	movw	r20, r16
    25c2:	62 e0       	ldi	r22, 0x02	; 2
    25c4:	70 e0       	ldi	r23, 0x00	; 0
    25c6:	c6 01       	movw	r24, r12
    25c8:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    25cc:	01 50       	subi	r16, 0x01	; 1
    25ce:	11 09       	sbc	r17, r1
    25d0:	df cf       	rjmp	.-66     	; 0x2590 <progMatrixHorizontal(unsigned int, unsigned char)+0xd2>
    25d2:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    25d6:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    25da:	0f 50       	subi	r16, 0x0F	; 15
    25dc:	11 09       	sbc	r17, r1
    25de:	50 e1       	ldi	r21, 0x10	; 16
    25e0:	e5 2e       	mov	r14, r21
    25e2:	f1 2c       	mov	r15, r1
    25e4:	01 3f       	cpi	r16, 0xF1	; 241
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	18 07       	cpc	r17, r24
    25ea:	ec f0       	brlt	.+58     	; 0x2626 <progMatrixHorizontal(unsigned int, unsigned char)+0x168>
    25ec:	81 e0       	ldi	r24, 0x01	; 1
    25ee:	e8 1a       	sub	r14, r24
    25f0:	f1 08       	sbc	r15, r1
    25f2:	82 e0       	ldi	r24, 0x02	; 2
    25f4:	e8 16       	cp	r14, r24
    25f6:	f1 04       	cpc	r15, r1
    25f8:	14 f4       	brge	.+4      	; 0x25fe <progMatrixHorizontal(unsigned int, unsigned char)+0x140>
    25fa:	f1 2c       	mov	r15, r1
    25fc:	e1 2c       	mov	r14, r1
    25fe:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2602:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2606:	b7 01       	movw	r22, r14
    2608:	ce 01       	movw	r24, r28
    260a:	01 96       	adiw	r24, 0x01	; 1
    260c:	f9 de       	rcall	.-526    	; 0x2400 <getMatrixColor(int)>
    260e:	9e 01       	movw	r18, r28
    2610:	2f 5f       	subi	r18, 0xFF	; 255
    2612:	3f 4f       	sbci	r19, 0xFF	; 255
    2614:	a8 01       	movw	r20, r16
    2616:	64 e0       	ldi	r22, 0x04	; 4
    2618:	70 e0       	ldi	r23, 0x00	; 0
    261a:	c6 01       	movw	r24, r12
    261c:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2620:	01 50       	subi	r16, 0x01	; 1
    2622:	11 09       	sbc	r17, r1
    2624:	df cf       	rjmp	.-66     	; 0x25e4 <progMatrixHorizontal(unsigned int, unsigned char)+0x126>
    2626:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    262a:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    262e:	08 50       	subi	r16, 0x08	; 8
    2630:	11 09       	sbc	r17, r1
    2632:	40 e1       	ldi	r20, 0x10	; 16
    2634:	e4 2e       	mov	r14, r20
    2636:	f1 2c       	mov	r15, r1
    2638:	08 3f       	cpi	r16, 0xF8	; 248
    263a:	8f ef       	ldi	r24, 0xFF	; 255
    263c:	18 07       	cpc	r17, r24
    263e:	ec f0       	brlt	.+58     	; 0x267a <progMatrixHorizontal(unsigned int, unsigned char)+0x1bc>
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	e8 1a       	sub	r14, r24
    2644:	f1 08       	sbc	r15, r1
    2646:	82 e0       	ldi	r24, 0x02	; 2
    2648:	e8 16       	cp	r14, r24
    264a:	f1 04       	cpc	r15, r1
    264c:	14 f4       	brge	.+4      	; 0x2652 <progMatrixHorizontal(unsigned int, unsigned char)+0x194>
    264e:	f1 2c       	mov	r15, r1
    2650:	e1 2c       	mov	r14, r1
    2652:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2656:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    265a:	b7 01       	movw	r22, r14
    265c:	ce 01       	movw	r24, r28
    265e:	01 96       	adiw	r24, 0x01	; 1
    2660:	cf de       	rcall	.-610    	; 0x2400 <getMatrixColor(int)>
    2662:	9e 01       	movw	r18, r28
    2664:	2f 5f       	subi	r18, 0xFF	; 255
    2666:	3f 4f       	sbci	r19, 0xFF	; 255
    2668:	a8 01       	movw	r20, r16
    266a:	66 e0       	ldi	r22, 0x06	; 6
    266c:	70 e0       	ldi	r23, 0x00	; 0
    266e:	c6 01       	movw	r24, r12
    2670:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2674:	01 50       	subi	r16, 0x01	; 1
    2676:	11 09       	sbc	r17, r1
    2678:	df cf       	rjmp	.-66     	; 0x2638 <progMatrixHorizontal(unsigned int, unsigned char)+0x17a>
    267a:	e0 90 21 0a 	lds	r14, 0x0A21	; 0x800a21 <zaehler>
    267e:	f0 90 22 0a 	lds	r15, 0x0A22	; 0x800a22 <zaehler+0x1>
    2682:	00 e1       	ldi	r16, 0x10	; 16
    2684:	10 e0       	ldi	r17, 0x00	; 0
    2686:	f7 fc       	sbrc	r15, 7
    2688:	1c c0       	rjmp	.+56     	; 0x26c2 <progMatrixHorizontal(unsigned int, unsigned char)+0x204>
    268a:	01 50       	subi	r16, 0x01	; 1
    268c:	11 09       	sbc	r17, r1
    268e:	02 30       	cpi	r16, 0x02	; 2
    2690:	11 05       	cpc	r17, r1
    2692:	14 f4       	brge	.+4      	; 0x2698 <progMatrixHorizontal(unsigned int, unsigned char)+0x1da>
    2694:	10 e0       	ldi	r17, 0x00	; 0
    2696:	00 e0       	ldi	r16, 0x00	; 0
    2698:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    269c:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    26a0:	b8 01       	movw	r22, r16
    26a2:	ce 01       	movw	r24, r28
    26a4:	01 96       	adiw	r24, 0x01	; 1
    26a6:	ac de       	rcall	.-680    	; 0x2400 <getMatrixColor(int)>
    26a8:	9e 01       	movw	r18, r28
    26aa:	2f 5f       	subi	r18, 0xFF	; 255
    26ac:	3f 4f       	sbci	r19, 0xFF	; 255
    26ae:	a7 01       	movw	r20, r14
    26b0:	68 e0       	ldi	r22, 0x08	; 8
    26b2:	70 e0       	ldi	r23, 0x00	; 0
    26b4:	c6 01       	movw	r24, r12
    26b6:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	e8 1a       	sub	r14, r24
    26be:	f1 08       	sbc	r15, r1
    26c0:	e2 cf       	rjmp	.-60     	; 0x2686 <progMatrixHorizontal(unsigned int, unsigned char)+0x1c8>
    26c2:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    26c6:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    26ca:	0e 50       	subi	r16, 0x0E	; 14
    26cc:	11 09       	sbc	r17, r1
    26ce:	30 e1       	ldi	r19, 0x10	; 16
    26d0:	e3 2e       	mov	r14, r19
    26d2:	f1 2c       	mov	r15, r1
    26d4:	02 3f       	cpi	r16, 0xF2	; 242
    26d6:	8f ef       	ldi	r24, 0xFF	; 255
    26d8:	18 07       	cpc	r17, r24
    26da:	ec f0       	brlt	.+58     	; 0x2716 <progMatrixHorizontal(unsigned int, unsigned char)+0x258>
    26dc:	81 e0       	ldi	r24, 0x01	; 1
    26de:	e8 1a       	sub	r14, r24
    26e0:	f1 08       	sbc	r15, r1
    26e2:	82 e0       	ldi	r24, 0x02	; 2
    26e4:	e8 16       	cp	r14, r24
    26e6:	f1 04       	cpc	r15, r1
    26e8:	14 f4       	brge	.+4      	; 0x26ee <progMatrixHorizontal(unsigned int, unsigned char)+0x230>
    26ea:	f1 2c       	mov	r15, r1
    26ec:	e1 2c       	mov	r14, r1
    26ee:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    26f2:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    26f6:	b7 01       	movw	r22, r14
    26f8:	ce 01       	movw	r24, r28
    26fa:	01 96       	adiw	r24, 0x01	; 1
    26fc:	81 de       	rcall	.-766    	; 0x2400 <getMatrixColor(int)>
    26fe:	9e 01       	movw	r18, r28
    2700:	2f 5f       	subi	r18, 0xFF	; 255
    2702:	3f 4f       	sbci	r19, 0xFF	; 255
    2704:	a8 01       	movw	r20, r16
    2706:	6a e0       	ldi	r22, 0x0A	; 10
    2708:	70 e0       	ldi	r23, 0x00	; 0
    270a:	c6 01       	movw	r24, r12
    270c:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2710:	01 50       	subi	r16, 0x01	; 1
    2712:	11 09       	sbc	r17, r1
    2714:	df cf       	rjmp	.-66     	; 0x26d4 <progMatrixHorizontal(unsigned int, unsigned char)+0x216>
    2716:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    271a:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    271e:	05 51       	subi	r16, 0x15	; 21
    2720:	11 09       	sbc	r17, r1
    2722:	20 e1       	ldi	r18, 0x10	; 16
    2724:	e2 2e       	mov	r14, r18
    2726:	f1 2c       	mov	r15, r1
    2728:	0b 3e       	cpi	r16, 0xEB	; 235
    272a:	8f ef       	ldi	r24, 0xFF	; 255
    272c:	18 07       	cpc	r17, r24
    272e:	ec f0       	brlt	.+58     	; 0x276a <progMatrixHorizontal(unsigned int, unsigned char)+0x2ac>
    2730:	81 e0       	ldi	r24, 0x01	; 1
    2732:	e8 1a       	sub	r14, r24
    2734:	f1 08       	sbc	r15, r1
    2736:	82 e0       	ldi	r24, 0x02	; 2
    2738:	e8 16       	cp	r14, r24
    273a:	f1 04       	cpc	r15, r1
    273c:	14 f4       	brge	.+4      	; 0x2742 <progMatrixHorizontal(unsigned int, unsigned char)+0x284>
    273e:	f1 2c       	mov	r15, r1
    2740:	e1 2c       	mov	r14, r1
    2742:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2746:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    274a:	b7 01       	movw	r22, r14
    274c:	ce 01       	movw	r24, r28
    274e:	01 96       	adiw	r24, 0x01	; 1
    2750:	57 de       	rcall	.-850    	; 0x2400 <getMatrixColor(int)>
    2752:	9e 01       	movw	r18, r28
    2754:	2f 5f       	subi	r18, 0xFF	; 255
    2756:	3f 4f       	sbci	r19, 0xFF	; 255
    2758:	a8 01       	movw	r20, r16
    275a:	6c e0       	ldi	r22, 0x0C	; 12
    275c:	70 e0       	ldi	r23, 0x00	; 0
    275e:	c6 01       	movw	r24, r12
    2760:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2764:	01 50       	subi	r16, 0x01	; 1
    2766:	11 09       	sbc	r17, r1
    2768:	df cf       	rjmp	.-66     	; 0x2728 <progMatrixHorizontal(unsigned int, unsigned char)+0x26a>
    276a:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    276e:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    2772:	09 50       	subi	r16, 0x09	; 9
    2774:	11 09       	sbc	r17, r1
    2776:	90 e1       	ldi	r25, 0x10	; 16
    2778:	e9 2e       	mov	r14, r25
    277a:	f1 2c       	mov	r15, r1
    277c:	07 3f       	cpi	r16, 0xF7	; 247
    277e:	8f ef       	ldi	r24, 0xFF	; 255
    2780:	18 07       	cpc	r17, r24
    2782:	ec f0       	brlt	.+58     	; 0x27be <progMatrixHorizontal(unsigned int, unsigned char)+0x300>
    2784:	81 e0       	ldi	r24, 0x01	; 1
    2786:	e8 1a       	sub	r14, r24
    2788:	f1 08       	sbc	r15, r1
    278a:	82 e0       	ldi	r24, 0x02	; 2
    278c:	e8 16       	cp	r14, r24
    278e:	f1 04       	cpc	r15, r1
    2790:	14 f4       	brge	.+4      	; 0x2796 <progMatrixHorizontal(unsigned int, unsigned char)+0x2d8>
    2792:	f1 2c       	mov	r15, r1
    2794:	e1 2c       	mov	r14, r1
    2796:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    279a:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    279e:	b7 01       	movw	r22, r14
    27a0:	ce 01       	movw	r24, r28
    27a2:	01 96       	adiw	r24, 0x01	; 1
    27a4:	2d de       	rcall	.-934    	; 0x2400 <getMatrixColor(int)>
    27a6:	9e 01       	movw	r18, r28
    27a8:	2f 5f       	subi	r18, 0xFF	; 255
    27aa:	3f 4f       	sbci	r19, 0xFF	; 255
    27ac:	a8 01       	movw	r20, r16
    27ae:	6e e0       	ldi	r22, 0x0E	; 14
    27b0:	70 e0       	ldi	r23, 0x00	; 0
    27b2:	c6 01       	movw	r24, r12
    27b4:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    27b8:	01 50       	subi	r16, 0x01	; 1
    27ba:	11 09       	sbc	r17, r1
    27bc:	df cf       	rjmp	.-66     	; 0x277c <progMatrixHorizontal(unsigned int, unsigned char)+0x2be>
    27be:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    27c2:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    27c6:	01 50       	subi	r16, 0x01	; 1
    27c8:	11 09       	sbc	r17, r1
    27ca:	80 e1       	ldi	r24, 0x10	; 16
    27cc:	e8 2e       	mov	r14, r24
    27ce:	f1 2c       	mov	r15, r1
    27d0:	0f 3f       	cpi	r16, 0xFF	; 255
    27d2:	8f ef       	ldi	r24, 0xFF	; 255
    27d4:	18 07       	cpc	r17, r24
    27d6:	ec f0       	brlt	.+58     	; 0x2812 <progMatrixHorizontal(unsigned int, unsigned char)+0x354>
    27d8:	81 e0       	ldi	r24, 0x01	; 1
    27da:	e8 1a       	sub	r14, r24
    27dc:	f1 08       	sbc	r15, r1
    27de:	82 e0       	ldi	r24, 0x02	; 2
    27e0:	e8 16       	cp	r14, r24
    27e2:	f1 04       	cpc	r15, r1
    27e4:	14 f4       	brge	.+4      	; 0x27ea <progMatrixHorizontal(unsigned int, unsigned char)+0x32c>
    27e6:	f1 2c       	mov	r15, r1
    27e8:	e1 2c       	mov	r14, r1
    27ea:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    27ee:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    27f2:	b7 01       	movw	r22, r14
    27f4:	ce 01       	movw	r24, r28
    27f6:	01 96       	adiw	r24, 0x01	; 1
    27f8:	03 de       	rcall	.-1018   	; 0x2400 <getMatrixColor(int)>
    27fa:	9e 01       	movw	r18, r28
    27fc:	2f 5f       	subi	r18, 0xFF	; 255
    27fe:	3f 4f       	sbci	r19, 0xFF	; 255
    2800:	a8 01       	movw	r20, r16
    2802:	60 e1       	ldi	r22, 0x10	; 16
    2804:	70 e0       	ldi	r23, 0x00	; 0
    2806:	c6 01       	movw	r24, r12
    2808:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    280c:	01 50       	subi	r16, 0x01	; 1
    280e:	11 09       	sbc	r17, r1
    2810:	df cf       	rjmp	.-66     	; 0x27d0 <progMatrixHorizontal(unsigned int, unsigned char)+0x312>
    2812:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    2816:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    281a:	00 51       	subi	r16, 0x10	; 16
    281c:	11 09       	sbc	r17, r1
    281e:	b0 e1       	ldi	r27, 0x10	; 16
    2820:	eb 2e       	mov	r14, r27
    2822:	f1 2c       	mov	r15, r1
    2824:	00 3f       	cpi	r16, 0xF0	; 240
    2826:	8f ef       	ldi	r24, 0xFF	; 255
    2828:	18 07       	cpc	r17, r24
    282a:	ec f0       	brlt	.+58     	; 0x2866 <progMatrixHorizontal(unsigned int, unsigned char)+0x3a8>
    282c:	81 e0       	ldi	r24, 0x01	; 1
    282e:	e8 1a       	sub	r14, r24
    2830:	f1 08       	sbc	r15, r1
    2832:	82 e0       	ldi	r24, 0x02	; 2
    2834:	e8 16       	cp	r14, r24
    2836:	f1 04       	cpc	r15, r1
    2838:	14 f4       	brge	.+4      	; 0x283e <progMatrixHorizontal(unsigned int, unsigned char)+0x380>
    283a:	f1 2c       	mov	r15, r1
    283c:	e1 2c       	mov	r14, r1
    283e:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2842:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2846:	b7 01       	movw	r22, r14
    2848:	ce 01       	movw	r24, r28
    284a:	01 96       	adiw	r24, 0x01	; 1
    284c:	d9 dd       	rcall	.-1102   	; 0x2400 <getMatrixColor(int)>
    284e:	9e 01       	movw	r18, r28
    2850:	2f 5f       	subi	r18, 0xFF	; 255
    2852:	3f 4f       	sbci	r19, 0xFF	; 255
    2854:	a8 01       	movw	r20, r16
    2856:	62 e1       	ldi	r22, 0x12	; 18
    2858:	70 e0       	ldi	r23, 0x00	; 0
    285a:	c6 01       	movw	r24, r12
    285c:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2860:	01 50       	subi	r16, 0x01	; 1
    2862:	11 09       	sbc	r17, r1
    2864:	df cf       	rjmp	.-66     	; 0x2824 <progMatrixHorizontal(unsigned int, unsigned char)+0x366>
    2866:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    286a:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    286e:	07 51       	subi	r16, 0x17	; 23
    2870:	11 09       	sbc	r17, r1
    2872:	a0 e1       	ldi	r26, 0x10	; 16
    2874:	ea 2e       	mov	r14, r26
    2876:	f1 2c       	mov	r15, r1
    2878:	09 3e       	cpi	r16, 0xE9	; 233
    287a:	8f ef       	ldi	r24, 0xFF	; 255
    287c:	18 07       	cpc	r17, r24
    287e:	ec f0       	brlt	.+58     	; 0x28ba <progMatrixHorizontal(unsigned int, unsigned char)+0x3fc>
    2880:	81 e0       	ldi	r24, 0x01	; 1
    2882:	e8 1a       	sub	r14, r24
    2884:	f1 08       	sbc	r15, r1
    2886:	82 e0       	ldi	r24, 0x02	; 2
    2888:	e8 16       	cp	r14, r24
    288a:	f1 04       	cpc	r15, r1
    288c:	14 f4       	brge	.+4      	; 0x2892 <progMatrixHorizontal(unsigned int, unsigned char)+0x3d4>
    288e:	f1 2c       	mov	r15, r1
    2890:	e1 2c       	mov	r14, r1
    2892:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2896:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    289a:	b7 01       	movw	r22, r14
    289c:	ce 01       	movw	r24, r28
    289e:	01 96       	adiw	r24, 0x01	; 1
    28a0:	af dd       	rcall	.-1186   	; 0x2400 <getMatrixColor(int)>
    28a2:	9e 01       	movw	r18, r28
    28a4:	2f 5f       	subi	r18, 0xFF	; 255
    28a6:	3f 4f       	sbci	r19, 0xFF	; 255
    28a8:	a8 01       	movw	r20, r16
    28aa:	64 e1       	ldi	r22, 0x14	; 20
    28ac:	70 e0       	ldi	r23, 0x00	; 0
    28ae:	c6 01       	movw	r24, r12
    28b0:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    28b4:	01 50       	subi	r16, 0x01	; 1
    28b6:	11 09       	sbc	r17, r1
    28b8:	df cf       	rjmp	.-66     	; 0x2878 <progMatrixHorizontal(unsigned int, unsigned char)+0x3ba>
    28ba:	00 91 21 0a 	lds	r16, 0x0A21	; 0x800a21 <zaehler>
    28be:	10 91 22 0a 	lds	r17, 0x0A22	; 0x800a22 <zaehler+0x1>
    28c2:	0b 50       	subi	r16, 0x0B	; 11
    28c4:	11 09       	sbc	r17, r1
    28c6:	f0 e1       	ldi	r31, 0x10	; 16
    28c8:	ef 2e       	mov	r14, r31
    28ca:	f1 2c       	mov	r15, r1
    28cc:	05 3f       	cpi	r16, 0xF5	; 245
    28ce:	8f ef       	ldi	r24, 0xFF	; 255
    28d0:	18 07       	cpc	r17, r24
    28d2:	ec f0       	brlt	.+58     	; 0x290e <progMatrixHorizontal(unsigned int, unsigned char)+0x450>
    28d4:	81 e0       	ldi	r24, 0x01	; 1
    28d6:	e8 1a       	sub	r14, r24
    28d8:	f1 08       	sbc	r15, r1
    28da:	82 e0       	ldi	r24, 0x02	; 2
    28dc:	e8 16       	cp	r14, r24
    28de:	f1 04       	cpc	r15, r1
    28e0:	14 f4       	brge	.+4      	; 0x28e6 <progMatrixHorizontal(unsigned int, unsigned char)+0x428>
    28e2:	f1 2c       	mov	r15, r1
    28e4:	e1 2c       	mov	r14, r1
    28e6:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    28ea:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    28ee:	b7 01       	movw	r22, r14
    28f0:	ce 01       	movw	r24, r28
    28f2:	01 96       	adiw	r24, 0x01	; 1
    28f4:	85 dd       	rcall	.-1270   	; 0x2400 <getMatrixColor(int)>
    28f6:	9e 01       	movw	r18, r28
    28f8:	2f 5f       	subi	r18, 0xFF	; 255
    28fa:	3f 4f       	sbci	r19, 0xFF	; 255
    28fc:	a8 01       	movw	r20, r16
    28fe:	66 e1       	ldi	r22, 0x16	; 22
    2900:	70 e0       	ldi	r23, 0x00	; 0
    2902:	c6 01       	movw	r24, r12
    2904:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2908:	01 50       	subi	r16, 0x01	; 1
    290a:	11 09       	sbc	r17, r1
    290c:	df cf       	rjmp	.-66     	; 0x28cc <progMatrixHorizontal(unsigned int, unsigned char)+0x40e>
    290e:	e0 90 1f 0a 	lds	r14, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2912:	f0 90 20 0a 	lds	r15, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2916:	00 e1       	ldi	r16, 0x10	; 16
    2918:	10 e0       	ldi	r17, 0x00	; 0
    291a:	f7 fc       	sbrc	r15, 7
    291c:	1c c0       	rjmp	.+56     	; 0x2956 <progMatrixHorizontal(unsigned int, unsigned char)+0x498>
    291e:	01 50       	subi	r16, 0x01	; 1
    2920:	11 09       	sbc	r17, r1
    2922:	02 30       	cpi	r16, 0x02	; 2
    2924:	11 05       	cpc	r17, r1
    2926:	14 f4       	brge	.+4      	; 0x292c <progMatrixHorizontal(unsigned int, unsigned char)+0x46e>
    2928:	10 e0       	ldi	r17, 0x00	; 0
    292a:	00 e0       	ldi	r16, 0x00	; 0
    292c:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2930:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2934:	b8 01       	movw	r22, r16
    2936:	ce 01       	movw	r24, r28
    2938:	01 96       	adiw	r24, 0x01	; 1
    293a:	62 dd       	rcall	.-1340   	; 0x2400 <getMatrixColor(int)>
    293c:	9e 01       	movw	r18, r28
    293e:	2f 5f       	subi	r18, 0xFF	; 255
    2940:	3f 4f       	sbci	r19, 0xFF	; 255
    2942:	a7 01       	movw	r20, r14
    2944:	61 e0       	ldi	r22, 0x01	; 1
    2946:	70 e0       	ldi	r23, 0x00	; 0
    2948:	c6 01       	movw	r24, r12
    294a:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    294e:	81 e0       	ldi	r24, 0x01	; 1
    2950:	e8 1a       	sub	r14, r24
    2952:	f1 08       	sbc	r15, r1
    2954:	e2 cf       	rjmp	.-60     	; 0x291a <progMatrixHorizontal(unsigned int, unsigned char)+0x45c>
    2956:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    295a:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    295e:	04 51       	subi	r16, 0x14	; 20
    2960:	11 09       	sbc	r17, r1
    2962:	e0 e1       	ldi	r30, 0x10	; 16
    2964:	ee 2e       	mov	r14, r30
    2966:	f1 2c       	mov	r15, r1
    2968:	0c 3e       	cpi	r16, 0xEC	; 236
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	18 07       	cpc	r17, r24
    296e:	ec f0       	brlt	.+58     	; 0x29aa <progMatrixHorizontal(unsigned int, unsigned char)+0x4ec>
    2970:	81 e0       	ldi	r24, 0x01	; 1
    2972:	e8 1a       	sub	r14, r24
    2974:	f1 08       	sbc	r15, r1
    2976:	82 e0       	ldi	r24, 0x02	; 2
    2978:	e8 16       	cp	r14, r24
    297a:	f1 04       	cpc	r15, r1
    297c:	14 f4       	brge	.+4      	; 0x2982 <progMatrixHorizontal(unsigned int, unsigned char)+0x4c4>
    297e:	f1 2c       	mov	r15, r1
    2980:	e1 2c       	mov	r14, r1
    2982:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2986:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    298a:	b7 01       	movw	r22, r14
    298c:	ce 01       	movw	r24, r28
    298e:	01 96       	adiw	r24, 0x01	; 1
    2990:	37 dd       	rcall	.-1426   	; 0x2400 <getMatrixColor(int)>
    2992:	9e 01       	movw	r18, r28
    2994:	2f 5f       	subi	r18, 0xFF	; 255
    2996:	3f 4f       	sbci	r19, 0xFF	; 255
    2998:	a8 01       	movw	r20, r16
    299a:	63 e0       	ldi	r22, 0x03	; 3
    299c:	70 e0       	ldi	r23, 0x00	; 0
    299e:	c6 01       	movw	r24, r12
    29a0:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    29a4:	01 50       	subi	r16, 0x01	; 1
    29a6:	11 09       	sbc	r17, r1
    29a8:	df cf       	rjmp	.-66     	; 0x2968 <progMatrixHorizontal(unsigned int, unsigned char)+0x4aa>
    29aa:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    29ae:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    29b2:	0f 50       	subi	r16, 0x0F	; 15
    29b4:	11 09       	sbc	r17, r1
    29b6:	70 e1       	ldi	r23, 0x10	; 16
    29b8:	e7 2e       	mov	r14, r23
    29ba:	f1 2c       	mov	r15, r1
    29bc:	01 3f       	cpi	r16, 0xF1	; 241
    29be:	8f ef       	ldi	r24, 0xFF	; 255
    29c0:	18 07       	cpc	r17, r24
    29c2:	ec f0       	brlt	.+58     	; 0x29fe <progMatrixHorizontal(unsigned int, unsigned char)+0x540>
    29c4:	81 e0       	ldi	r24, 0x01	; 1
    29c6:	e8 1a       	sub	r14, r24
    29c8:	f1 08       	sbc	r15, r1
    29ca:	82 e0       	ldi	r24, 0x02	; 2
    29cc:	e8 16       	cp	r14, r24
    29ce:	f1 04       	cpc	r15, r1
    29d0:	14 f4       	brge	.+4      	; 0x29d6 <progMatrixHorizontal(unsigned int, unsigned char)+0x518>
    29d2:	f1 2c       	mov	r15, r1
    29d4:	e1 2c       	mov	r14, r1
    29d6:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    29da:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    29de:	b7 01       	movw	r22, r14
    29e0:	ce 01       	movw	r24, r28
    29e2:	01 96       	adiw	r24, 0x01	; 1
    29e4:	0d dd       	rcall	.-1510   	; 0x2400 <getMatrixColor(int)>
    29e6:	9e 01       	movw	r18, r28
    29e8:	2f 5f       	subi	r18, 0xFF	; 255
    29ea:	3f 4f       	sbci	r19, 0xFF	; 255
    29ec:	a8 01       	movw	r20, r16
    29ee:	65 e0       	ldi	r22, 0x05	; 5
    29f0:	70 e0       	ldi	r23, 0x00	; 0
    29f2:	c6 01       	movw	r24, r12
    29f4:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    29f8:	01 50       	subi	r16, 0x01	; 1
    29fa:	11 09       	sbc	r17, r1
    29fc:	df cf       	rjmp	.-66     	; 0x29bc <progMatrixHorizontal(unsigned int, unsigned char)+0x4fe>
    29fe:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2a02:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2a06:	08 50       	subi	r16, 0x08	; 8
    2a08:	11 09       	sbc	r17, r1
    2a0a:	60 e1       	ldi	r22, 0x10	; 16
    2a0c:	e6 2e       	mov	r14, r22
    2a0e:	f1 2c       	mov	r15, r1
    2a10:	08 3f       	cpi	r16, 0xF8	; 248
    2a12:	8f ef       	ldi	r24, 0xFF	; 255
    2a14:	18 07       	cpc	r17, r24
    2a16:	ec f0       	brlt	.+58     	; 0x2a52 <progMatrixHorizontal(unsigned int, unsigned char)+0x594>
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	e8 1a       	sub	r14, r24
    2a1c:	f1 08       	sbc	r15, r1
    2a1e:	82 e0       	ldi	r24, 0x02	; 2
    2a20:	e8 16       	cp	r14, r24
    2a22:	f1 04       	cpc	r15, r1
    2a24:	14 f4       	brge	.+4      	; 0x2a2a <progMatrixHorizontal(unsigned int, unsigned char)+0x56c>
    2a26:	f1 2c       	mov	r15, r1
    2a28:	e1 2c       	mov	r14, r1
    2a2a:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2a2e:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2a32:	b7 01       	movw	r22, r14
    2a34:	ce 01       	movw	r24, r28
    2a36:	01 96       	adiw	r24, 0x01	; 1
    2a38:	e3 dc       	rcall	.-1594   	; 0x2400 <getMatrixColor(int)>
    2a3a:	9e 01       	movw	r18, r28
    2a3c:	2f 5f       	subi	r18, 0xFF	; 255
    2a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a40:	a8 01       	movw	r20, r16
    2a42:	67 e0       	ldi	r22, 0x07	; 7
    2a44:	70 e0       	ldi	r23, 0x00	; 0
    2a46:	c6 01       	movw	r24, r12
    2a48:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a4c:	01 50       	subi	r16, 0x01	; 1
    2a4e:	11 09       	sbc	r17, r1
    2a50:	df cf       	rjmp	.-66     	; 0x2a10 <progMatrixHorizontal(unsigned int, unsigned char)+0x552>
    2a52:	e0 90 1f 0a 	lds	r14, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2a56:	f0 90 20 0a 	lds	r15, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2a5a:	00 e1       	ldi	r16, 0x10	; 16
    2a5c:	10 e0       	ldi	r17, 0x00	; 0
    2a5e:	f7 fc       	sbrc	r15, 7
    2a60:	1c c0       	rjmp	.+56     	; 0x2a9a <progMatrixHorizontal(unsigned int, unsigned char)+0x5dc>
    2a62:	01 50       	subi	r16, 0x01	; 1
    2a64:	11 09       	sbc	r17, r1
    2a66:	02 30       	cpi	r16, 0x02	; 2
    2a68:	11 05       	cpc	r17, r1
    2a6a:	14 f4       	brge	.+4      	; 0x2a70 <progMatrixHorizontal(unsigned int, unsigned char)+0x5b2>
    2a6c:	10 e0       	ldi	r17, 0x00	; 0
    2a6e:	00 e0       	ldi	r16, 0x00	; 0
    2a70:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2a74:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2a78:	b8 01       	movw	r22, r16
    2a7a:	ce 01       	movw	r24, r28
    2a7c:	01 96       	adiw	r24, 0x01	; 1
    2a7e:	c0 dc       	rcall	.-1664   	; 0x2400 <getMatrixColor(int)>
    2a80:	9e 01       	movw	r18, r28
    2a82:	2f 5f       	subi	r18, 0xFF	; 255
    2a84:	3f 4f       	sbci	r19, 0xFF	; 255
    2a86:	a7 01       	movw	r20, r14
    2a88:	69 e0       	ldi	r22, 0x09	; 9
    2a8a:	70 e0       	ldi	r23, 0x00	; 0
    2a8c:	c6 01       	movw	r24, r12
    2a8e:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	e8 1a       	sub	r14, r24
    2a96:	f1 08       	sbc	r15, r1
    2a98:	e2 cf       	rjmp	.-60     	; 0x2a5e <progMatrixHorizontal(unsigned int, unsigned char)+0x5a0>
    2a9a:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2a9e:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2aa2:	0e 50       	subi	r16, 0x0E	; 14
    2aa4:	11 09       	sbc	r17, r1
    2aa6:	50 e1       	ldi	r21, 0x10	; 16
    2aa8:	e5 2e       	mov	r14, r21
    2aaa:	f1 2c       	mov	r15, r1
    2aac:	02 3f       	cpi	r16, 0xF2	; 242
    2aae:	8f ef       	ldi	r24, 0xFF	; 255
    2ab0:	18 07       	cpc	r17, r24
    2ab2:	ec f0       	brlt	.+58     	; 0x2aee <progMatrixHorizontal(unsigned int, unsigned char)+0x630>
    2ab4:	81 e0       	ldi	r24, 0x01	; 1
    2ab6:	e8 1a       	sub	r14, r24
    2ab8:	f1 08       	sbc	r15, r1
    2aba:	82 e0       	ldi	r24, 0x02	; 2
    2abc:	e8 16       	cp	r14, r24
    2abe:	f1 04       	cpc	r15, r1
    2ac0:	14 f4       	brge	.+4      	; 0x2ac6 <progMatrixHorizontal(unsigned int, unsigned char)+0x608>
    2ac2:	f1 2c       	mov	r15, r1
    2ac4:	e1 2c       	mov	r14, r1
    2ac6:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2aca:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2ace:	b7 01       	movw	r22, r14
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	95 dc       	rcall	.-1750   	; 0x2400 <getMatrixColor(int)>
    2ad6:	9e 01       	movw	r18, r28
    2ad8:	2f 5f       	subi	r18, 0xFF	; 255
    2ada:	3f 4f       	sbci	r19, 0xFF	; 255
    2adc:	a8 01       	movw	r20, r16
    2ade:	6b e0       	ldi	r22, 0x0B	; 11
    2ae0:	70 e0       	ldi	r23, 0x00	; 0
    2ae2:	c6 01       	movw	r24, r12
    2ae4:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ae8:	01 50       	subi	r16, 0x01	; 1
    2aea:	11 09       	sbc	r17, r1
    2aec:	df cf       	rjmp	.-66     	; 0x2aac <progMatrixHorizontal(unsigned int, unsigned char)+0x5ee>
    2aee:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2af2:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2af6:	05 51       	subi	r16, 0x15	; 21
    2af8:	11 09       	sbc	r17, r1
    2afa:	40 e1       	ldi	r20, 0x10	; 16
    2afc:	e4 2e       	mov	r14, r20
    2afe:	f1 2c       	mov	r15, r1
    2b00:	0b 3e       	cpi	r16, 0xEB	; 235
    2b02:	8f ef       	ldi	r24, 0xFF	; 255
    2b04:	18 07       	cpc	r17, r24
    2b06:	ec f0       	brlt	.+58     	; 0x2b42 <progMatrixHorizontal(unsigned int, unsigned char)+0x684>
    2b08:	81 e0       	ldi	r24, 0x01	; 1
    2b0a:	e8 1a       	sub	r14, r24
    2b0c:	f1 08       	sbc	r15, r1
    2b0e:	82 e0       	ldi	r24, 0x02	; 2
    2b10:	e8 16       	cp	r14, r24
    2b12:	f1 04       	cpc	r15, r1
    2b14:	14 f4       	brge	.+4      	; 0x2b1a <progMatrixHorizontal(unsigned int, unsigned char)+0x65c>
    2b16:	f1 2c       	mov	r15, r1
    2b18:	e1 2c       	mov	r14, r1
    2b1a:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2b1e:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2b22:	b7 01       	movw	r22, r14
    2b24:	ce 01       	movw	r24, r28
    2b26:	01 96       	adiw	r24, 0x01	; 1
    2b28:	6b dc       	rcall	.-1834   	; 0x2400 <getMatrixColor(int)>
    2b2a:	9e 01       	movw	r18, r28
    2b2c:	2f 5f       	subi	r18, 0xFF	; 255
    2b2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2b30:	a8 01       	movw	r20, r16
    2b32:	6d e0       	ldi	r22, 0x0D	; 13
    2b34:	70 e0       	ldi	r23, 0x00	; 0
    2b36:	c6 01       	movw	r24, r12
    2b38:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b3c:	01 50       	subi	r16, 0x01	; 1
    2b3e:	11 09       	sbc	r17, r1
    2b40:	df cf       	rjmp	.-66     	; 0x2b00 <progMatrixHorizontal(unsigned int, unsigned char)+0x642>
    2b42:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2b46:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2b4a:	09 50       	subi	r16, 0x09	; 9
    2b4c:	11 09       	sbc	r17, r1
    2b4e:	30 e1       	ldi	r19, 0x10	; 16
    2b50:	e3 2e       	mov	r14, r19
    2b52:	f1 2c       	mov	r15, r1
    2b54:	07 3f       	cpi	r16, 0xF7	; 247
    2b56:	8f ef       	ldi	r24, 0xFF	; 255
    2b58:	18 07       	cpc	r17, r24
    2b5a:	ec f0       	brlt	.+58     	; 0x2b96 <progMatrixHorizontal(unsigned int, unsigned char)+0x6d8>
    2b5c:	81 e0       	ldi	r24, 0x01	; 1
    2b5e:	e8 1a       	sub	r14, r24
    2b60:	f1 08       	sbc	r15, r1
    2b62:	82 e0       	ldi	r24, 0x02	; 2
    2b64:	e8 16       	cp	r14, r24
    2b66:	f1 04       	cpc	r15, r1
    2b68:	14 f4       	brge	.+4      	; 0x2b6e <progMatrixHorizontal(unsigned int, unsigned char)+0x6b0>
    2b6a:	f1 2c       	mov	r15, r1
    2b6c:	e1 2c       	mov	r14, r1
    2b6e:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2b72:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2b76:	b7 01       	movw	r22, r14
    2b78:	ce 01       	movw	r24, r28
    2b7a:	01 96       	adiw	r24, 0x01	; 1
    2b7c:	41 dc       	rcall	.-1918   	; 0x2400 <getMatrixColor(int)>
    2b7e:	9e 01       	movw	r18, r28
    2b80:	2f 5f       	subi	r18, 0xFF	; 255
    2b82:	3f 4f       	sbci	r19, 0xFF	; 255
    2b84:	a8 01       	movw	r20, r16
    2b86:	6f e0       	ldi	r22, 0x0F	; 15
    2b88:	70 e0       	ldi	r23, 0x00	; 0
    2b8a:	c6 01       	movw	r24, r12
    2b8c:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b90:	01 50       	subi	r16, 0x01	; 1
    2b92:	11 09       	sbc	r17, r1
    2b94:	df cf       	rjmp	.-66     	; 0x2b54 <progMatrixHorizontal(unsigned int, unsigned char)+0x696>
    2b96:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2b9a:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2b9e:	01 50       	subi	r16, 0x01	; 1
    2ba0:	11 09       	sbc	r17, r1
    2ba2:	20 e1       	ldi	r18, 0x10	; 16
    2ba4:	e2 2e       	mov	r14, r18
    2ba6:	f1 2c       	mov	r15, r1
    2ba8:	0f 3f       	cpi	r16, 0xFF	; 255
    2baa:	8f ef       	ldi	r24, 0xFF	; 255
    2bac:	18 07       	cpc	r17, r24
    2bae:	ec f0       	brlt	.+58     	; 0x2bea <progMatrixHorizontal(unsigned int, unsigned char)+0x72c>
    2bb0:	81 e0       	ldi	r24, 0x01	; 1
    2bb2:	e8 1a       	sub	r14, r24
    2bb4:	f1 08       	sbc	r15, r1
    2bb6:	82 e0       	ldi	r24, 0x02	; 2
    2bb8:	e8 16       	cp	r14, r24
    2bba:	f1 04       	cpc	r15, r1
    2bbc:	14 f4       	brge	.+4      	; 0x2bc2 <progMatrixHorizontal(unsigned int, unsigned char)+0x704>
    2bbe:	f1 2c       	mov	r15, r1
    2bc0:	e1 2c       	mov	r14, r1
    2bc2:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2bc6:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2bca:	b7 01       	movw	r22, r14
    2bcc:	ce 01       	movw	r24, r28
    2bce:	01 96       	adiw	r24, 0x01	; 1
    2bd0:	17 dc       	rcall	.-2002   	; 0x2400 <getMatrixColor(int)>
    2bd2:	9e 01       	movw	r18, r28
    2bd4:	2f 5f       	subi	r18, 0xFF	; 255
    2bd6:	3f 4f       	sbci	r19, 0xFF	; 255
    2bd8:	a8 01       	movw	r20, r16
    2bda:	61 e1       	ldi	r22, 0x11	; 17
    2bdc:	70 e0       	ldi	r23, 0x00	; 0
    2bde:	c6 01       	movw	r24, r12
    2be0:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2be4:	01 50       	subi	r16, 0x01	; 1
    2be6:	11 09       	sbc	r17, r1
    2be8:	df cf       	rjmp	.-66     	; 0x2ba8 <progMatrixHorizontal(unsigned int, unsigned char)+0x6ea>
    2bea:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2bee:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2bf2:	00 51       	subi	r16, 0x10	; 16
    2bf4:	11 09       	sbc	r17, r1
    2bf6:	90 e1       	ldi	r25, 0x10	; 16
    2bf8:	e9 2e       	mov	r14, r25
    2bfa:	f1 2c       	mov	r15, r1
    2bfc:	00 3f       	cpi	r16, 0xF0	; 240
    2bfe:	8f ef       	ldi	r24, 0xFF	; 255
    2c00:	18 07       	cpc	r17, r24
    2c02:	ec f0       	brlt	.+58     	; 0x2c3e <progMatrixHorizontal(unsigned int, unsigned char)+0x780>
    2c04:	81 e0       	ldi	r24, 0x01	; 1
    2c06:	e8 1a       	sub	r14, r24
    2c08:	f1 08       	sbc	r15, r1
    2c0a:	82 e0       	ldi	r24, 0x02	; 2
    2c0c:	e8 16       	cp	r14, r24
    2c0e:	f1 04       	cpc	r15, r1
    2c10:	14 f4       	brge	.+4      	; 0x2c16 <progMatrixHorizontal(unsigned int, unsigned char)+0x758>
    2c12:	f1 2c       	mov	r15, r1
    2c14:	e1 2c       	mov	r14, r1
    2c16:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2c1a:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2c1e:	b7 01       	movw	r22, r14
    2c20:	ce 01       	movw	r24, r28
    2c22:	01 96       	adiw	r24, 0x01	; 1
    2c24:	ed db       	rcall	.-2086   	; 0x2400 <getMatrixColor(int)>
    2c26:	9e 01       	movw	r18, r28
    2c28:	2f 5f       	subi	r18, 0xFF	; 255
    2c2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c2c:	a8 01       	movw	r20, r16
    2c2e:	63 e1       	ldi	r22, 0x13	; 19
    2c30:	70 e0       	ldi	r23, 0x00	; 0
    2c32:	c6 01       	movw	r24, r12
    2c34:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c38:	01 50       	subi	r16, 0x01	; 1
    2c3a:	11 09       	sbc	r17, r1
    2c3c:	df cf       	rjmp	.-66     	; 0x2bfc <progMatrixHorizontal(unsigned int, unsigned char)+0x73e>
    2c3e:	00 91 1f 0a 	lds	r16, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2c42:	10 91 20 0a 	lds	r17, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2c46:	07 51       	subi	r16, 0x17	; 23
    2c48:	11 09       	sbc	r17, r1
    2c4a:	80 e1       	ldi	r24, 0x10	; 16
    2c4c:	e8 2e       	mov	r14, r24
    2c4e:	f1 2c       	mov	r15, r1
    2c50:	09 3e       	cpi	r16, 0xE9	; 233
    2c52:	8f ef       	ldi	r24, 0xFF	; 255
    2c54:	18 07       	cpc	r17, r24
    2c56:	ec f0       	brlt	.+58     	; 0x2c92 <progMatrixHorizontal(unsigned int, unsigned char)+0x7d4>
    2c58:	81 e0       	ldi	r24, 0x01	; 1
    2c5a:	e8 1a       	sub	r14, r24
    2c5c:	f1 08       	sbc	r15, r1
    2c5e:	82 e0       	ldi	r24, 0x02	; 2
    2c60:	e8 16       	cp	r14, r24
    2c62:	f1 04       	cpc	r15, r1
    2c64:	14 f4       	brge	.+4      	; 0x2c6a <progMatrixHorizontal(unsigned int, unsigned char)+0x7ac>
    2c66:	f1 2c       	mov	r15, r1
    2c68:	e1 2c       	mov	r14, r1
    2c6a:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2c6e:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2c72:	b7 01       	movw	r22, r14
    2c74:	ce 01       	movw	r24, r28
    2c76:	01 96       	adiw	r24, 0x01	; 1
    2c78:	c3 db       	rcall	.-2170   	; 0x2400 <getMatrixColor(int)>
    2c7a:	9e 01       	movw	r18, r28
    2c7c:	2f 5f       	subi	r18, 0xFF	; 255
    2c7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2c80:	a8 01       	movw	r20, r16
    2c82:	65 e1       	ldi	r22, 0x15	; 21
    2c84:	70 e0       	ldi	r23, 0x00	; 0
    2c86:	c6 01       	movw	r24, r12
    2c88:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c8c:	01 50       	subi	r16, 0x01	; 1
    2c8e:	11 09       	sbc	r17, r1
    2c90:	df cf       	rjmp	.-66     	; 0x2c50 <progMatrixHorizontal(unsigned int, unsigned char)+0x792>
    2c92:	8d e3       	ldi	r24, 0x3D	; 61
    2c94:	90 e1       	ldi	r25, 0x10	; 16
    2c96:	0e 94 c6 05 	call	0xb8c	; 0xb8c <CFastLED::show()>
    2c9a:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2c9e:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2ca2:	01 96       	adiw	r24, 0x01	; 1
    2ca4:	89 33       	cpi	r24, 0x39	; 57
    2ca6:	91 05       	cpc	r25, r1
    2ca8:	e4 f4       	brge	.+56     	; 0x2ce2 <progMatrixHorizontal(unsigned int, unsigned char)+0x824>
    2caa:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    2cae:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    2cb2:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    2cb6:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    2cba:	01 96       	adiw	r24, 0x01	; 1
    2cbc:	89 33       	cpi	r24, 0x39	; 57
    2cbe:	91 05       	cpc	r25, r1
    2cc0:	ac f4       	brge	.+42     	; 0x2cec <progMatrixHorizontal(unsigned int, unsigned char)+0x82e>
    2cc2:	90 93 20 0a 	sts	0x0A20, r25	; 0x800a20 <progMatrixZaehler+0x1>
    2cc6:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <progMatrixZaehler>
    2cca:	0f 90       	pop	r0
    2ccc:	0f 90       	pop	r0
    2cce:	0f 90       	pop	r0
    2cd0:	df 91       	pop	r29
    2cd2:	cf 91       	pop	r28
    2cd4:	1f 91       	pop	r17
    2cd6:	0f 91       	pop	r16
    2cd8:	ff 90       	pop	r15
    2cda:	ef 90       	pop	r14
    2cdc:	df 90       	pop	r13
    2cde:	cf 90       	pop	r12
    2ce0:	08 95       	ret
    2ce2:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    2ce6:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    2cea:	e3 cf       	rjmp	.-58     	; 0x2cb2 <progMatrixHorizontal(unsigned int, unsigned char)+0x7f4>
    2cec:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <progMatrixZaehler+0x1>
    2cf0:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <progMatrixZaehler>
    2cf4:	ea cf       	rjmp	.-44     	; 0x2cca <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>

00002cf6 <progMatrixVertical(unsigned int, unsigned char)>:
    2cf6:	cf 92       	push	r12
    2cf8:	df 92       	push	r13
    2cfa:	ef 92       	push	r14
    2cfc:	ff 92       	push	r15
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	cf 93       	push	r28
    2d04:	df 93       	push	r29
    2d06:	00 d0       	rcall	.+0      	; 0x2d08 <progMatrixVertical(unsigned int, unsigned char)+0x12>
    2d08:	1f 92       	push	r1
    2d0a:	cd b7       	in	r28, 0x3d	; 61
    2d0c:	de b7       	in	r29, 0x3e	; 62
    2d0e:	7c 01       	movw	r14, r24
    2d10:	16 2f       	mov	r17, r22
    2d12:	80 91 2a 0a 	lds	r24, 0x0A2A	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    2d16:	81 11       	cpse	r24, r1
    2d18:	1e c0       	rjmp	.+60     	; 0x2d56 <progMatrixVertical(unsigned int, unsigned char)+0x60>
    2d1a:	61 e0       	ldi	r22, 0x01	; 1
    2d1c:	8d e3       	ldi	r24, 0x3D	; 61
    2d1e:	90 e1       	ldi	r25, 0x10	; 16
    2d20:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    2d24:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    2d28:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    2d2c:	10 93 29 0a 	sts	0x0A29, r17	; 0x800a29 <nextSongPart>
    2d30:	81 e0       	ldi	r24, 0x01	; 1
    2d32:	80 93 2a 0a 	sts	0x0A2A, r24	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    2d36:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    2d3a:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    2d3e:	89 e1       	ldi	r24, 0x19	; 25
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	90 93 20 0a 	sts	0x0A20, r25	; 0x800a20 <progMatrixZaehler+0x1>
    2d46:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <progMatrixZaehler>
    2d4a:	84 e6       	ldi	r24, 0x64	; 100
    2d4c:	90 e0       	ldi	r25, 0x00	; 0
    2d4e:	90 93 31 0a 	sts	0x0A31, r25	; 0x800a31 <millisCounterTimer+0x1>
    2d52:	80 93 30 0a 	sts	0x0A30, r24	; 0x800a30 <millisCounterTimer>
    2d56:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    2d5a:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    2d5e:	84 36       	cpi	r24, 0x64	; 100
    2d60:	91 05       	cpc	r25, r1
    2d62:	08 f4       	brcc	.+2      	; 0x2d66 <progMatrixVertical(unsigned int, unsigned char)+0x70>
    2d64:	fc c3       	rjmp	.+2040   	; 0x355e <progMatrixVertical(unsigned int, unsigned char)+0x868>
    2d66:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    2d6a:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    2d6e:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2d72:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2d76:	07 e1       	ldi	r16, 0x17	; 23
    2d78:	10 e0       	ldi	r17, 0x00	; 0
    2d7a:	08 1b       	sub	r16, r24
    2d7c:	19 0b       	sbc	r17, r25
    2d7e:	b0 e1       	ldi	r27, 0x10	; 16
    2d80:	eb 2e       	mov	r14, r27
    2d82:	f1 2c       	mov	r15, r1
    2d84:	07 31       	cpi	r16, 0x17	; 23
    2d86:	11 05       	cpc	r17, r1
    2d88:	dc f4       	brge	.+54     	; 0x2dc0 <progMatrixVertical(unsigned int, unsigned char)+0xca>
    2d8a:	81 e0       	ldi	r24, 0x01	; 1
    2d8c:	e8 1a       	sub	r14, r24
    2d8e:	f1 08       	sbc	r15, r1
    2d90:	f7 fe       	sbrs	r15, 7
    2d92:	02 c0       	rjmp	.+4      	; 0x2d98 <progMatrixVertical(unsigned int, unsigned char)+0xa2>
    2d94:	f1 2c       	mov	r15, r1
    2d96:	e1 2c       	mov	r14, r1
    2d98:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2d9c:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2da0:	b7 01       	movw	r22, r14
    2da2:	ce 01       	movw	r24, r28
    2da4:	01 96       	adiw	r24, 0x01	; 1
    2da6:	2c db       	rcall	.-2472   	; 0x2400 <getMatrixColor(int)>
    2da8:	9e 01       	movw	r18, r28
    2daa:	2f 5f       	subi	r18, 0xFF	; 255
    2dac:	3f 4f       	sbci	r19, 0xFF	; 255
    2dae:	50 e0       	ldi	r21, 0x00	; 0
    2db0:	40 e0       	ldi	r20, 0x00	; 0
    2db2:	b8 01       	movw	r22, r16
    2db4:	c6 01       	movw	r24, r12
    2db6:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2dba:	0f 5f       	subi	r16, 0xFF	; 255
    2dbc:	1f 4f       	sbci	r17, 0xFF	; 255
    2dbe:	e2 cf       	rjmp	.-60     	; 0x2d84 <progMatrixVertical(unsigned int, unsigned char)+0x8e>
    2dc0:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2dc4:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2dc8:	06 e2       	ldi	r16, 0x26	; 38
    2dca:	10 e0       	ldi	r17, 0x00	; 0
    2dcc:	08 1b       	sub	r16, r24
    2dce:	19 0b       	sbc	r17, r25
    2dd0:	a0 e1       	ldi	r26, 0x10	; 16
    2dd2:	ea 2e       	mov	r14, r26
    2dd4:	f1 2c       	mov	r15, r1
    2dd6:	06 32       	cpi	r16, 0x26	; 38
    2dd8:	11 05       	cpc	r17, r1
    2dda:	dc f4       	brge	.+54     	; 0x2e12 <progMatrixVertical(unsigned int, unsigned char)+0x11c>
    2ddc:	81 e0       	ldi	r24, 0x01	; 1
    2dde:	e8 1a       	sub	r14, r24
    2de0:	f1 08       	sbc	r15, r1
    2de2:	f7 fe       	sbrs	r15, 7
    2de4:	02 c0       	rjmp	.+4      	; 0x2dea <progMatrixVertical(unsigned int, unsigned char)+0xf4>
    2de6:	f1 2c       	mov	r15, r1
    2de8:	e1 2c       	mov	r14, r1
    2dea:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2dee:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2df2:	b7 01       	movw	r22, r14
    2df4:	ce 01       	movw	r24, r28
    2df6:	01 96       	adiw	r24, 0x01	; 1
    2df8:	03 db       	rcall	.-2554   	; 0x2400 <getMatrixColor(int)>
    2dfa:	9e 01       	movw	r18, r28
    2dfc:	2f 5f       	subi	r18, 0xFF	; 255
    2dfe:	3f 4f       	sbci	r19, 0xFF	; 255
    2e00:	42 e0       	ldi	r20, 0x02	; 2
    2e02:	50 e0       	ldi	r21, 0x00	; 0
    2e04:	b8 01       	movw	r22, r16
    2e06:	c6 01       	movw	r24, r12
    2e08:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2e0c:	0f 5f       	subi	r16, 0xFF	; 255
    2e0e:	1f 4f       	sbci	r17, 0xFF	; 255
    2e10:	e2 cf       	rjmp	.-60     	; 0x2dd6 <progMatrixVertical(unsigned int, unsigned char)+0xe0>
    2e12:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2e16:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2e1a:	0e e1       	ldi	r16, 0x1E	; 30
    2e1c:	10 e0       	ldi	r17, 0x00	; 0
    2e1e:	08 1b       	sub	r16, r24
    2e20:	19 0b       	sbc	r17, r25
    2e22:	f0 e1       	ldi	r31, 0x10	; 16
    2e24:	ef 2e       	mov	r14, r31
    2e26:	f1 2c       	mov	r15, r1
    2e28:	0e 31       	cpi	r16, 0x1E	; 30
    2e2a:	11 05       	cpc	r17, r1
    2e2c:	dc f4       	brge	.+54     	; 0x2e64 <progMatrixVertical(unsigned int, unsigned char)+0x16e>
    2e2e:	81 e0       	ldi	r24, 0x01	; 1
    2e30:	e8 1a       	sub	r14, r24
    2e32:	f1 08       	sbc	r15, r1
    2e34:	f7 fe       	sbrs	r15, 7
    2e36:	02 c0       	rjmp	.+4      	; 0x2e3c <progMatrixVertical(unsigned int, unsigned char)+0x146>
    2e38:	f1 2c       	mov	r15, r1
    2e3a:	e1 2c       	mov	r14, r1
    2e3c:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2e40:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2e44:	b7 01       	movw	r22, r14
    2e46:	ce 01       	movw	r24, r28
    2e48:	01 96       	adiw	r24, 0x01	; 1
    2e4a:	da da       	rcall	.-2636   	; 0x2400 <getMatrixColor(int)>
    2e4c:	9e 01       	movw	r18, r28
    2e4e:	2f 5f       	subi	r18, 0xFF	; 255
    2e50:	3f 4f       	sbci	r19, 0xFF	; 255
    2e52:	44 e0       	ldi	r20, 0x04	; 4
    2e54:	50 e0       	ldi	r21, 0x00	; 0
    2e56:	b8 01       	movw	r22, r16
    2e58:	c6 01       	movw	r24, r12
    2e5a:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2e5e:	0f 5f       	subi	r16, 0xFF	; 255
    2e60:	1f 4f       	sbci	r17, 0xFF	; 255
    2e62:	e2 cf       	rjmp	.-60     	; 0x2e28 <progMatrixVertical(unsigned int, unsigned char)+0x132>
    2e64:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2e68:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2e6c:	0b e2       	ldi	r16, 0x2B	; 43
    2e6e:	10 e0       	ldi	r17, 0x00	; 0
    2e70:	08 1b       	sub	r16, r24
    2e72:	19 0b       	sbc	r17, r25
    2e74:	e0 e1       	ldi	r30, 0x10	; 16
    2e76:	ee 2e       	mov	r14, r30
    2e78:	f1 2c       	mov	r15, r1
    2e7a:	0b 32       	cpi	r16, 0x2B	; 43
    2e7c:	11 05       	cpc	r17, r1
    2e7e:	dc f4       	brge	.+54     	; 0x2eb6 <progMatrixVertical(unsigned int, unsigned char)+0x1c0>
    2e80:	81 e0       	ldi	r24, 0x01	; 1
    2e82:	e8 1a       	sub	r14, r24
    2e84:	f1 08       	sbc	r15, r1
    2e86:	f7 fe       	sbrs	r15, 7
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <progMatrixVertical(unsigned int, unsigned char)+0x198>
    2e8a:	f1 2c       	mov	r15, r1
    2e8c:	e1 2c       	mov	r14, r1
    2e8e:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2e92:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2e96:	b7 01       	movw	r22, r14
    2e98:	ce 01       	movw	r24, r28
    2e9a:	01 96       	adiw	r24, 0x01	; 1
    2e9c:	b1 da       	rcall	.-2718   	; 0x2400 <getMatrixColor(int)>
    2e9e:	9e 01       	movw	r18, r28
    2ea0:	2f 5f       	subi	r18, 0xFF	; 255
    2ea2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ea4:	46 e0       	ldi	r20, 0x06	; 6
    2ea6:	50 e0       	ldi	r21, 0x00	; 0
    2ea8:	b8 01       	movw	r22, r16
    2eaa:	c6 01       	movw	r24, r12
    2eac:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2eb0:	0f 5f       	subi	r16, 0xFF	; 255
    2eb2:	1f 4f       	sbci	r17, 0xFF	; 255
    2eb4:	e2 cf       	rjmp	.-60     	; 0x2e7a <progMatrixVertical(unsigned int, unsigned char)+0x184>
    2eb6:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2eba:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2ebe:	02 e2       	ldi	r16, 0x22	; 34
    2ec0:	10 e0       	ldi	r17, 0x00	; 0
    2ec2:	08 1b       	sub	r16, r24
    2ec4:	19 0b       	sbc	r17, r25
    2ec6:	70 e1       	ldi	r23, 0x10	; 16
    2ec8:	e7 2e       	mov	r14, r23
    2eca:	f1 2c       	mov	r15, r1
    2ecc:	02 32       	cpi	r16, 0x22	; 34
    2ece:	11 05       	cpc	r17, r1
    2ed0:	dc f4       	brge	.+54     	; 0x2f08 <progMatrixVertical(unsigned int, unsigned char)+0x212>
    2ed2:	81 e0       	ldi	r24, 0x01	; 1
    2ed4:	e8 1a       	sub	r14, r24
    2ed6:	f1 08       	sbc	r15, r1
    2ed8:	f7 fe       	sbrs	r15, 7
    2eda:	02 c0       	rjmp	.+4      	; 0x2ee0 <progMatrixVertical(unsigned int, unsigned char)+0x1ea>
    2edc:	f1 2c       	mov	r15, r1
    2ede:	e1 2c       	mov	r14, r1
    2ee0:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2ee4:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2ee8:	b7 01       	movw	r22, r14
    2eea:	ce 01       	movw	r24, r28
    2eec:	01 96       	adiw	r24, 0x01	; 1
    2eee:	88 da       	rcall	.-2800   	; 0x2400 <getMatrixColor(int)>
    2ef0:	9e 01       	movw	r18, r28
    2ef2:	2f 5f       	subi	r18, 0xFF	; 255
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	48 e0       	ldi	r20, 0x08	; 8
    2ef8:	50 e0       	ldi	r21, 0x00	; 0
    2efa:	b8 01       	movw	r22, r16
    2efc:	c6 01       	movw	r24, r12
    2efe:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2f02:	0f 5f       	subi	r16, 0xFF	; 255
    2f04:	1f 4f       	sbci	r17, 0xFF	; 255
    2f06:	e2 cf       	rjmp	.-60     	; 0x2ecc <progMatrixVertical(unsigned int, unsigned char)+0x1d6>
    2f08:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2f0c:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2f10:	0b e1       	ldi	r16, 0x1B	; 27
    2f12:	10 e0       	ldi	r17, 0x00	; 0
    2f14:	08 1b       	sub	r16, r24
    2f16:	19 0b       	sbc	r17, r25
    2f18:	60 e1       	ldi	r22, 0x10	; 16
    2f1a:	e6 2e       	mov	r14, r22
    2f1c:	f1 2c       	mov	r15, r1
    2f1e:	0b 31       	cpi	r16, 0x1B	; 27
    2f20:	11 05       	cpc	r17, r1
    2f22:	dc f4       	brge	.+54     	; 0x2f5a <progMatrixVertical(unsigned int, unsigned char)+0x264>
    2f24:	81 e0       	ldi	r24, 0x01	; 1
    2f26:	e8 1a       	sub	r14, r24
    2f28:	f1 08       	sbc	r15, r1
    2f2a:	f7 fe       	sbrs	r15, 7
    2f2c:	02 c0       	rjmp	.+4      	; 0x2f32 <progMatrixVertical(unsigned int, unsigned char)+0x23c>
    2f2e:	f1 2c       	mov	r15, r1
    2f30:	e1 2c       	mov	r14, r1
    2f32:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2f36:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2f3a:	b7 01       	movw	r22, r14
    2f3c:	ce 01       	movw	r24, r28
    2f3e:	01 96       	adiw	r24, 0x01	; 1
    2f40:	5f da       	rcall	.-2882   	; 0x2400 <getMatrixColor(int)>
    2f42:	9e 01       	movw	r18, r28
    2f44:	2f 5f       	subi	r18, 0xFF	; 255
    2f46:	3f 4f       	sbci	r19, 0xFF	; 255
    2f48:	4a e0       	ldi	r20, 0x0A	; 10
    2f4a:	50 e0       	ldi	r21, 0x00	; 0
    2f4c:	b8 01       	movw	r22, r16
    2f4e:	c6 01       	movw	r24, r12
    2f50:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2f54:	0f 5f       	subi	r16, 0xFF	; 255
    2f56:	1f 4f       	sbci	r17, 0xFF	; 255
    2f58:	e2 cf       	rjmp	.-60     	; 0x2f1e <progMatrixVertical(unsigned int, unsigned char)+0x228>
    2f5a:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2f5e:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2f62:	04 e2       	ldi	r16, 0x24	; 36
    2f64:	10 e0       	ldi	r17, 0x00	; 0
    2f66:	08 1b       	sub	r16, r24
    2f68:	19 0b       	sbc	r17, r25
    2f6a:	50 e1       	ldi	r21, 0x10	; 16
    2f6c:	e5 2e       	mov	r14, r21
    2f6e:	f1 2c       	mov	r15, r1
    2f70:	04 32       	cpi	r16, 0x24	; 36
    2f72:	11 05       	cpc	r17, r1
    2f74:	dc f4       	brge	.+54     	; 0x2fac <progMatrixVertical(unsigned int, unsigned char)+0x2b6>
    2f76:	81 e0       	ldi	r24, 0x01	; 1
    2f78:	e8 1a       	sub	r14, r24
    2f7a:	f1 08       	sbc	r15, r1
    2f7c:	f7 fe       	sbrs	r15, 7
    2f7e:	02 c0       	rjmp	.+4      	; 0x2f84 <progMatrixVertical(unsigned int, unsigned char)+0x28e>
    2f80:	f1 2c       	mov	r15, r1
    2f82:	e1 2c       	mov	r14, r1
    2f84:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2f88:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2f8c:	b7 01       	movw	r22, r14
    2f8e:	ce 01       	movw	r24, r28
    2f90:	01 96       	adiw	r24, 0x01	; 1
    2f92:	36 da       	rcall	.-2964   	; 0x2400 <getMatrixColor(int)>
    2f94:	9e 01       	movw	r18, r28
    2f96:	2f 5f       	subi	r18, 0xFF	; 255
    2f98:	3f 4f       	sbci	r19, 0xFF	; 255
    2f9a:	4c e0       	ldi	r20, 0x0C	; 12
    2f9c:	50 e0       	ldi	r21, 0x00	; 0
    2f9e:	b8 01       	movw	r22, r16
    2fa0:	c6 01       	movw	r24, r12
    2fa2:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2fa6:	0f 5f       	subi	r16, 0xFF	; 255
    2fa8:	1f 4f       	sbci	r17, 0xFF	; 255
    2faa:	e2 cf       	rjmp	.-60     	; 0x2f70 <progMatrixVertical(unsigned int, unsigned char)+0x27a>
    2fac:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    2fb0:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    2fb4:	0e e2       	ldi	r16, 0x2E	; 46
    2fb6:	10 e0       	ldi	r17, 0x00	; 0
    2fb8:	08 1b       	sub	r16, r24
    2fba:	19 0b       	sbc	r17, r25
    2fbc:	40 e1       	ldi	r20, 0x10	; 16
    2fbe:	e4 2e       	mov	r14, r20
    2fc0:	f1 2c       	mov	r15, r1
    2fc2:	0e 32       	cpi	r16, 0x2E	; 46
    2fc4:	11 05       	cpc	r17, r1
    2fc6:	dc f4       	brge	.+54     	; 0x2ffe <progMatrixVertical(unsigned int, unsigned char)+0x308>
    2fc8:	81 e0       	ldi	r24, 0x01	; 1
    2fca:	e8 1a       	sub	r14, r24
    2fcc:	f1 08       	sbc	r15, r1
    2fce:	f7 fe       	sbrs	r15, 7
    2fd0:	02 c0       	rjmp	.+4      	; 0x2fd6 <progMatrixVertical(unsigned int, unsigned char)+0x2e0>
    2fd2:	f1 2c       	mov	r15, r1
    2fd4:	e1 2c       	mov	r14, r1
    2fd6:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    2fda:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    2fde:	b7 01       	movw	r22, r14
    2fe0:	ce 01       	movw	r24, r28
    2fe2:	01 96       	adiw	r24, 0x01	; 1
    2fe4:	0d da       	rcall	.-3046   	; 0x2400 <getMatrixColor(int)>
    2fe6:	9e 01       	movw	r18, r28
    2fe8:	2f 5f       	subi	r18, 0xFF	; 255
    2fea:	3f 4f       	sbci	r19, 0xFF	; 255
    2fec:	4e e0       	ldi	r20, 0x0E	; 14
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	b8 01       	movw	r22, r16
    2ff2:	c6 01       	movw	r24, r12
    2ff4:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ff8:	0f 5f       	subi	r16, 0xFF	; 255
    2ffa:	1f 4f       	sbci	r17, 0xFF	; 255
    2ffc:	e2 cf       	rjmp	.-60     	; 0x2fc2 <progMatrixVertical(unsigned int, unsigned char)+0x2cc>
    2ffe:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    3002:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    3006:	0e e1       	ldi	r16, 0x1E	; 30
    3008:	10 e0       	ldi	r17, 0x00	; 0
    300a:	08 1b       	sub	r16, r24
    300c:	19 0b       	sbc	r17, r25
    300e:	30 e1       	ldi	r19, 0x10	; 16
    3010:	e3 2e       	mov	r14, r19
    3012:	f1 2c       	mov	r15, r1
    3014:	0e 31       	cpi	r16, 0x1E	; 30
    3016:	11 05       	cpc	r17, r1
    3018:	dc f4       	brge	.+54     	; 0x3050 <progMatrixVertical(unsigned int, unsigned char)+0x35a>
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	e8 1a       	sub	r14, r24
    301e:	f1 08       	sbc	r15, r1
    3020:	f7 fe       	sbrs	r15, 7
    3022:	02 c0       	rjmp	.+4      	; 0x3028 <progMatrixVertical(unsigned int, unsigned char)+0x332>
    3024:	f1 2c       	mov	r15, r1
    3026:	e1 2c       	mov	r14, r1
    3028:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    302c:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3030:	b7 01       	movw	r22, r14
    3032:	ce 01       	movw	r24, r28
    3034:	01 96       	adiw	r24, 0x01	; 1
    3036:	e4 d9       	rcall	.-3128   	; 0x2400 <getMatrixColor(int)>
    3038:	9e 01       	movw	r18, r28
    303a:	2f 5f       	subi	r18, 0xFF	; 255
    303c:	3f 4f       	sbci	r19, 0xFF	; 255
    303e:	40 e1       	ldi	r20, 0x10	; 16
    3040:	50 e0       	ldi	r21, 0x00	; 0
    3042:	b8 01       	movw	r22, r16
    3044:	c6 01       	movw	r24, r12
    3046:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    304a:	0f 5f       	subi	r16, 0xFF	; 255
    304c:	1f 4f       	sbci	r17, 0xFF	; 255
    304e:	e2 cf       	rjmp	.-60     	; 0x3014 <progMatrixVertical(unsigned int, unsigned char)+0x31e>
    3050:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    3054:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    3058:	0a e2       	ldi	r16, 0x2A	; 42
    305a:	10 e0       	ldi	r17, 0x00	; 0
    305c:	08 1b       	sub	r16, r24
    305e:	19 0b       	sbc	r17, r25
    3060:	20 e1       	ldi	r18, 0x10	; 16
    3062:	e2 2e       	mov	r14, r18
    3064:	f1 2c       	mov	r15, r1
    3066:	0a 32       	cpi	r16, 0x2A	; 42
    3068:	11 05       	cpc	r17, r1
    306a:	dc f4       	brge	.+54     	; 0x30a2 <progMatrixVertical(unsigned int, unsigned char)+0x3ac>
    306c:	81 e0       	ldi	r24, 0x01	; 1
    306e:	e8 1a       	sub	r14, r24
    3070:	f1 08       	sbc	r15, r1
    3072:	f7 fe       	sbrs	r15, 7
    3074:	02 c0       	rjmp	.+4      	; 0x307a <progMatrixVertical(unsigned int, unsigned char)+0x384>
    3076:	f1 2c       	mov	r15, r1
    3078:	e1 2c       	mov	r14, r1
    307a:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    307e:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3082:	b7 01       	movw	r22, r14
    3084:	ce 01       	movw	r24, r28
    3086:	01 96       	adiw	r24, 0x01	; 1
    3088:	bb d9       	rcall	.-3210   	; 0x2400 <getMatrixColor(int)>
    308a:	9e 01       	movw	r18, r28
    308c:	2f 5f       	subi	r18, 0xFF	; 255
    308e:	3f 4f       	sbci	r19, 0xFF	; 255
    3090:	42 e1       	ldi	r20, 0x12	; 18
    3092:	50 e0       	ldi	r21, 0x00	; 0
    3094:	b8 01       	movw	r22, r16
    3096:	c6 01       	movw	r24, r12
    3098:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    309c:	0f 5f       	subi	r16, 0xFF	; 255
    309e:	1f 4f       	sbci	r17, 0xFF	; 255
    30a0:	e2 cf       	rjmp	.-60     	; 0x3066 <progMatrixVertical(unsigned int, unsigned char)+0x370>
    30a2:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    30a6:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    30aa:	02 e2       	ldi	r16, 0x22	; 34
    30ac:	10 e0       	ldi	r17, 0x00	; 0
    30ae:	08 1b       	sub	r16, r24
    30b0:	19 0b       	sbc	r17, r25
    30b2:	90 e1       	ldi	r25, 0x10	; 16
    30b4:	e9 2e       	mov	r14, r25
    30b6:	f1 2c       	mov	r15, r1
    30b8:	02 32       	cpi	r16, 0x22	; 34
    30ba:	11 05       	cpc	r17, r1
    30bc:	dc f4       	brge	.+54     	; 0x30f4 <progMatrixVertical(unsigned int, unsigned char)+0x3fe>
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	e8 1a       	sub	r14, r24
    30c2:	f1 08       	sbc	r15, r1
    30c4:	f7 fe       	sbrs	r15, 7
    30c6:	02 c0       	rjmp	.+4      	; 0x30cc <progMatrixVertical(unsigned int, unsigned char)+0x3d6>
    30c8:	f1 2c       	mov	r15, r1
    30ca:	e1 2c       	mov	r14, r1
    30cc:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    30d0:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    30d4:	b7 01       	movw	r22, r14
    30d6:	ce 01       	movw	r24, r28
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	92 d9       	rcall	.-3292   	; 0x2400 <getMatrixColor(int)>
    30dc:	9e 01       	movw	r18, r28
    30de:	2f 5f       	subi	r18, 0xFF	; 255
    30e0:	3f 4f       	sbci	r19, 0xFF	; 255
    30e2:	44 e1       	ldi	r20, 0x14	; 20
    30e4:	50 e0       	ldi	r21, 0x00	; 0
    30e6:	b8 01       	movw	r22, r16
    30e8:	c6 01       	movw	r24, r12
    30ea:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    30ee:	0f 5f       	subi	r16, 0xFF	; 255
    30f0:	1f 4f       	sbci	r17, 0xFF	; 255
    30f2:	e2 cf       	rjmp	.-60     	; 0x30b8 <progMatrixVertical(unsigned int, unsigned char)+0x3c2>
    30f4:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    30f8:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    30fc:	0c e1       	ldi	r16, 0x1C	; 28
    30fe:	10 e0       	ldi	r17, 0x00	; 0
    3100:	08 1b       	sub	r16, r24
    3102:	19 0b       	sbc	r17, r25
    3104:	80 e1       	ldi	r24, 0x10	; 16
    3106:	e8 2e       	mov	r14, r24
    3108:	f1 2c       	mov	r15, r1
    310a:	0c 31       	cpi	r16, 0x1C	; 28
    310c:	11 05       	cpc	r17, r1
    310e:	dc f4       	brge	.+54     	; 0x3146 <progMatrixVertical(unsigned int, unsigned char)+0x450>
    3110:	81 e0       	ldi	r24, 0x01	; 1
    3112:	e8 1a       	sub	r14, r24
    3114:	f1 08       	sbc	r15, r1
    3116:	f7 fe       	sbrs	r15, 7
    3118:	02 c0       	rjmp	.+4      	; 0x311e <progMatrixVertical(unsigned int, unsigned char)+0x428>
    311a:	f1 2c       	mov	r15, r1
    311c:	e1 2c       	mov	r14, r1
    311e:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    3122:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3126:	b7 01       	movw	r22, r14
    3128:	ce 01       	movw	r24, r28
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	69 d9       	rcall	.-3374   	; 0x2400 <getMatrixColor(int)>
    312e:	9e 01       	movw	r18, r28
    3130:	2f 5f       	subi	r18, 0xFF	; 255
    3132:	3f 4f       	sbci	r19, 0xFF	; 255
    3134:	46 e1       	ldi	r20, 0x16	; 22
    3136:	50 e0       	ldi	r21, 0x00	; 0
    3138:	b8 01       	movw	r22, r16
    313a:	c6 01       	movw	r24, r12
    313c:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3140:	0f 5f       	subi	r16, 0xFF	; 255
    3142:	1f 4f       	sbci	r17, 0xFF	; 255
    3144:	e2 cf       	rjmp	.-60     	; 0x310a <progMatrixVertical(unsigned int, unsigned char)+0x414>
    3146:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    314a:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    314e:	08 e2       	ldi	r16, 0x28	; 40
    3150:	10 e0       	ldi	r17, 0x00	; 0
    3152:	08 1b       	sub	r16, r24
    3154:	19 0b       	sbc	r17, r25
    3156:	b0 e1       	ldi	r27, 0x10	; 16
    3158:	eb 2e       	mov	r14, r27
    315a:	f1 2c       	mov	r15, r1
    315c:	08 32       	cpi	r16, 0x28	; 40
    315e:	11 05       	cpc	r17, r1
    3160:	dc f4       	brge	.+54     	; 0x3198 <progMatrixVertical(unsigned int, unsigned char)+0x4a2>
    3162:	81 e0       	ldi	r24, 0x01	; 1
    3164:	e8 1a       	sub	r14, r24
    3166:	f1 08       	sbc	r15, r1
    3168:	f7 fe       	sbrs	r15, 7
    316a:	02 c0       	rjmp	.+4      	; 0x3170 <progMatrixVertical(unsigned int, unsigned char)+0x47a>
    316c:	f1 2c       	mov	r15, r1
    316e:	e1 2c       	mov	r14, r1
    3170:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    3174:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3178:	b7 01       	movw	r22, r14
    317a:	ce 01       	movw	r24, r28
    317c:	01 96       	adiw	r24, 0x01	; 1
    317e:	40 d9       	rcall	.-3456   	; 0x2400 <getMatrixColor(int)>
    3180:	9e 01       	movw	r18, r28
    3182:	2f 5f       	subi	r18, 0xFF	; 255
    3184:	3f 4f       	sbci	r19, 0xFF	; 255
    3186:	41 e0       	ldi	r20, 0x01	; 1
    3188:	50 e0       	ldi	r21, 0x00	; 0
    318a:	b8 01       	movw	r22, r16
    318c:	c6 01       	movw	r24, r12
    318e:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3192:	0f 5f       	subi	r16, 0xFF	; 255
    3194:	1f 4f       	sbci	r17, 0xFF	; 255
    3196:	e2 cf       	rjmp	.-60     	; 0x315c <progMatrixVertical(unsigned int, unsigned char)+0x466>
    3198:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    319c:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    31a0:	0a e1       	ldi	r16, 0x1A	; 26
    31a2:	10 e0       	ldi	r17, 0x00	; 0
    31a4:	08 1b       	sub	r16, r24
    31a6:	19 0b       	sbc	r17, r25
    31a8:	a0 e1       	ldi	r26, 0x10	; 16
    31aa:	ea 2e       	mov	r14, r26
    31ac:	f1 2c       	mov	r15, r1
    31ae:	0a 31       	cpi	r16, 0x1A	; 26
    31b0:	11 05       	cpc	r17, r1
    31b2:	dc f4       	brge	.+54     	; 0x31ea <progMatrixVertical(unsigned int, unsigned char)+0x4f4>
    31b4:	81 e0       	ldi	r24, 0x01	; 1
    31b6:	e8 1a       	sub	r14, r24
    31b8:	f1 08       	sbc	r15, r1
    31ba:	f7 fe       	sbrs	r15, 7
    31bc:	02 c0       	rjmp	.+4      	; 0x31c2 <progMatrixVertical(unsigned int, unsigned char)+0x4cc>
    31be:	f1 2c       	mov	r15, r1
    31c0:	e1 2c       	mov	r14, r1
    31c2:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    31c6:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    31ca:	b7 01       	movw	r22, r14
    31cc:	ce 01       	movw	r24, r28
    31ce:	01 96       	adiw	r24, 0x01	; 1
    31d0:	17 d9       	rcall	.-3538   	; 0x2400 <getMatrixColor(int)>
    31d2:	9e 01       	movw	r18, r28
    31d4:	2f 5f       	subi	r18, 0xFF	; 255
    31d6:	3f 4f       	sbci	r19, 0xFF	; 255
    31d8:	43 e0       	ldi	r20, 0x03	; 3
    31da:	50 e0       	ldi	r21, 0x00	; 0
    31dc:	b8 01       	movw	r22, r16
    31de:	c6 01       	movw	r24, r12
    31e0:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    31e4:	0f 5f       	subi	r16, 0xFF	; 255
    31e6:	1f 4f       	sbci	r17, 0xFF	; 255
    31e8:	e2 cf       	rjmp	.-60     	; 0x31ae <progMatrixVertical(unsigned int, unsigned char)+0x4b8>
    31ea:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    31ee:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    31f2:	02 e2       	ldi	r16, 0x22	; 34
    31f4:	10 e0       	ldi	r17, 0x00	; 0
    31f6:	08 1b       	sub	r16, r24
    31f8:	19 0b       	sbc	r17, r25
    31fa:	f0 e1       	ldi	r31, 0x10	; 16
    31fc:	ef 2e       	mov	r14, r31
    31fe:	f1 2c       	mov	r15, r1
    3200:	02 32       	cpi	r16, 0x22	; 34
    3202:	11 05       	cpc	r17, r1
    3204:	dc f4       	brge	.+54     	; 0x323c <progMatrixVertical(unsigned int, unsigned char)+0x546>
    3206:	81 e0       	ldi	r24, 0x01	; 1
    3208:	e8 1a       	sub	r14, r24
    320a:	f1 08       	sbc	r15, r1
    320c:	f7 fe       	sbrs	r15, 7
    320e:	02 c0       	rjmp	.+4      	; 0x3214 <progMatrixVertical(unsigned int, unsigned char)+0x51e>
    3210:	f1 2c       	mov	r15, r1
    3212:	e1 2c       	mov	r14, r1
    3214:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    3218:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    321c:	b7 01       	movw	r22, r14
    321e:	ce 01       	movw	r24, r28
    3220:	01 96       	adiw	r24, 0x01	; 1
    3222:	ee d8       	rcall	.-3620   	; 0x2400 <getMatrixColor(int)>
    3224:	9e 01       	movw	r18, r28
    3226:	2f 5f       	subi	r18, 0xFF	; 255
    3228:	3f 4f       	sbci	r19, 0xFF	; 255
    322a:	45 e0       	ldi	r20, 0x05	; 5
    322c:	50 e0       	ldi	r21, 0x00	; 0
    322e:	b8 01       	movw	r22, r16
    3230:	c6 01       	movw	r24, r12
    3232:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3236:	0f 5f       	subi	r16, 0xFF	; 255
    3238:	1f 4f       	sbci	r17, 0xFF	; 255
    323a:	e2 cf       	rjmp	.-60     	; 0x3200 <progMatrixVertical(unsigned int, unsigned char)+0x50a>
    323c:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    3240:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    3244:	00 e2       	ldi	r16, 0x20	; 32
    3246:	10 e0       	ldi	r17, 0x00	; 0
    3248:	08 1b       	sub	r16, r24
    324a:	19 0b       	sbc	r17, r25
    324c:	e0 e1       	ldi	r30, 0x10	; 16
    324e:	ee 2e       	mov	r14, r30
    3250:	f1 2c       	mov	r15, r1
    3252:	00 32       	cpi	r16, 0x20	; 32
    3254:	11 05       	cpc	r17, r1
    3256:	dc f4       	brge	.+54     	; 0x328e <progMatrixVertical(unsigned int, unsigned char)+0x598>
    3258:	81 e0       	ldi	r24, 0x01	; 1
    325a:	e8 1a       	sub	r14, r24
    325c:	f1 08       	sbc	r15, r1
    325e:	f7 fe       	sbrs	r15, 7
    3260:	02 c0       	rjmp	.+4      	; 0x3266 <progMatrixVertical(unsigned int, unsigned char)+0x570>
    3262:	f1 2c       	mov	r15, r1
    3264:	e1 2c       	mov	r14, r1
    3266:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    326a:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    326e:	b7 01       	movw	r22, r14
    3270:	ce 01       	movw	r24, r28
    3272:	01 96       	adiw	r24, 0x01	; 1
    3274:	c5 d8       	rcall	.-3702   	; 0x2400 <getMatrixColor(int)>
    3276:	9e 01       	movw	r18, r28
    3278:	2f 5f       	subi	r18, 0xFF	; 255
    327a:	3f 4f       	sbci	r19, 0xFF	; 255
    327c:	47 e0       	ldi	r20, 0x07	; 7
    327e:	50 e0       	ldi	r21, 0x00	; 0
    3280:	b8 01       	movw	r22, r16
    3282:	c6 01       	movw	r24, r12
    3284:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3288:	0f 5f       	subi	r16, 0xFF	; 255
    328a:	1f 4f       	sbci	r17, 0xFF	; 255
    328c:	e2 cf       	rjmp	.-60     	; 0x3252 <progMatrixVertical(unsigned int, unsigned char)+0x55c>
    328e:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    3292:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    3296:	0d e1       	ldi	r16, 0x1D	; 29
    3298:	10 e0       	ldi	r17, 0x00	; 0
    329a:	08 1b       	sub	r16, r24
    329c:	19 0b       	sbc	r17, r25
    329e:	70 e1       	ldi	r23, 0x10	; 16
    32a0:	e7 2e       	mov	r14, r23
    32a2:	f1 2c       	mov	r15, r1
    32a4:	0d 31       	cpi	r16, 0x1D	; 29
    32a6:	11 05       	cpc	r17, r1
    32a8:	dc f4       	brge	.+54     	; 0x32e0 <progMatrixVertical(unsigned int, unsigned char)+0x5ea>
    32aa:	81 e0       	ldi	r24, 0x01	; 1
    32ac:	e8 1a       	sub	r14, r24
    32ae:	f1 08       	sbc	r15, r1
    32b0:	f7 fe       	sbrs	r15, 7
    32b2:	02 c0       	rjmp	.+4      	; 0x32b8 <progMatrixVertical(unsigned int, unsigned char)+0x5c2>
    32b4:	f1 2c       	mov	r15, r1
    32b6:	e1 2c       	mov	r14, r1
    32b8:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    32bc:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    32c0:	b7 01       	movw	r22, r14
    32c2:	ce 01       	movw	r24, r28
    32c4:	01 96       	adiw	r24, 0x01	; 1
    32c6:	9c d8       	rcall	.-3784   	; 0x2400 <getMatrixColor(int)>
    32c8:	9e 01       	movw	r18, r28
    32ca:	2f 5f       	subi	r18, 0xFF	; 255
    32cc:	3f 4f       	sbci	r19, 0xFF	; 255
    32ce:	49 e0       	ldi	r20, 0x09	; 9
    32d0:	50 e0       	ldi	r21, 0x00	; 0
    32d2:	b8 01       	movw	r22, r16
    32d4:	c6 01       	movw	r24, r12
    32d6:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    32da:	0f 5f       	subi	r16, 0xFF	; 255
    32dc:	1f 4f       	sbci	r17, 0xFF	; 255
    32de:	e2 cf       	rjmp	.-60     	; 0x32a4 <progMatrixVertical(unsigned int, unsigned char)+0x5ae>
    32e0:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    32e4:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    32e8:	0a e2       	ldi	r16, 0x2A	; 42
    32ea:	10 e0       	ldi	r17, 0x00	; 0
    32ec:	08 1b       	sub	r16, r24
    32ee:	19 0b       	sbc	r17, r25
    32f0:	60 e1       	ldi	r22, 0x10	; 16
    32f2:	e6 2e       	mov	r14, r22
    32f4:	f1 2c       	mov	r15, r1
    32f6:	0a 32       	cpi	r16, 0x2A	; 42
    32f8:	11 05       	cpc	r17, r1
    32fa:	dc f4       	brge	.+54     	; 0x3332 <progMatrixVertical(unsigned int, unsigned char)+0x63c>
    32fc:	81 e0       	ldi	r24, 0x01	; 1
    32fe:	e8 1a       	sub	r14, r24
    3300:	f1 08       	sbc	r15, r1
    3302:	f7 fe       	sbrs	r15, 7
    3304:	02 c0       	rjmp	.+4      	; 0x330a <progMatrixVertical(unsigned int, unsigned char)+0x614>
    3306:	f1 2c       	mov	r15, r1
    3308:	e1 2c       	mov	r14, r1
    330a:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    330e:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3312:	b7 01       	movw	r22, r14
    3314:	ce 01       	movw	r24, r28
    3316:	01 96       	adiw	r24, 0x01	; 1
    3318:	73 d8       	rcall	.-3866   	; 0x2400 <getMatrixColor(int)>
    331a:	9e 01       	movw	r18, r28
    331c:	2f 5f       	subi	r18, 0xFF	; 255
    331e:	3f 4f       	sbci	r19, 0xFF	; 255
    3320:	4b e0       	ldi	r20, 0x0B	; 11
    3322:	50 e0       	ldi	r21, 0x00	; 0
    3324:	b8 01       	movw	r22, r16
    3326:	c6 01       	movw	r24, r12
    3328:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    332c:	0f 5f       	subi	r16, 0xFF	; 255
    332e:	1f 4f       	sbci	r17, 0xFF	; 255
    3330:	e2 cf       	rjmp	.-60     	; 0x32f6 <progMatrixVertical(unsigned int, unsigned char)+0x600>
    3332:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    3336:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    333a:	0d e1       	ldi	r16, 0x1D	; 29
    333c:	10 e0       	ldi	r17, 0x00	; 0
    333e:	08 1b       	sub	r16, r24
    3340:	19 0b       	sbc	r17, r25
    3342:	50 e1       	ldi	r21, 0x10	; 16
    3344:	e5 2e       	mov	r14, r21
    3346:	f1 2c       	mov	r15, r1
    3348:	0d 31       	cpi	r16, 0x1D	; 29
    334a:	11 05       	cpc	r17, r1
    334c:	dc f4       	brge	.+54     	; 0x3384 <progMatrixVertical(unsigned int, unsigned char)+0x68e>
    334e:	81 e0       	ldi	r24, 0x01	; 1
    3350:	e8 1a       	sub	r14, r24
    3352:	f1 08       	sbc	r15, r1
    3354:	f7 fe       	sbrs	r15, 7
    3356:	02 c0       	rjmp	.+4      	; 0x335c <progMatrixVertical(unsigned int, unsigned char)+0x666>
    3358:	f1 2c       	mov	r15, r1
    335a:	e1 2c       	mov	r14, r1
    335c:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    3360:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3364:	b7 01       	movw	r22, r14
    3366:	ce 01       	movw	r24, r28
    3368:	01 96       	adiw	r24, 0x01	; 1
    336a:	4a d8       	rcall	.-3948   	; 0x2400 <getMatrixColor(int)>
    336c:	9e 01       	movw	r18, r28
    336e:	2f 5f       	subi	r18, 0xFF	; 255
    3370:	3f 4f       	sbci	r19, 0xFF	; 255
    3372:	4d e0       	ldi	r20, 0x0D	; 13
    3374:	50 e0       	ldi	r21, 0x00	; 0
    3376:	b8 01       	movw	r22, r16
    3378:	c6 01       	movw	r24, r12
    337a:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    337e:	0f 5f       	subi	r16, 0xFF	; 255
    3380:	1f 4f       	sbci	r17, 0xFF	; 255
    3382:	e2 cf       	rjmp	.-60     	; 0x3348 <progMatrixVertical(unsigned int, unsigned char)+0x652>
    3384:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    3388:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    338c:	07 e1       	ldi	r16, 0x17	; 23
    338e:	10 e0       	ldi	r17, 0x00	; 0
    3390:	08 1b       	sub	r16, r24
    3392:	19 0b       	sbc	r17, r25
    3394:	40 e1       	ldi	r20, 0x10	; 16
    3396:	e4 2e       	mov	r14, r20
    3398:	f1 2c       	mov	r15, r1
    339a:	07 31       	cpi	r16, 0x17	; 23
    339c:	11 05       	cpc	r17, r1
    339e:	dc f4       	brge	.+54     	; 0x33d6 <progMatrixVertical(unsigned int, unsigned char)+0x6e0>
    33a0:	81 e0       	ldi	r24, 0x01	; 1
    33a2:	e8 1a       	sub	r14, r24
    33a4:	f1 08       	sbc	r15, r1
    33a6:	f7 fe       	sbrs	r15, 7
    33a8:	02 c0       	rjmp	.+4      	; 0x33ae <progMatrixVertical(unsigned int, unsigned char)+0x6b8>
    33aa:	f1 2c       	mov	r15, r1
    33ac:	e1 2c       	mov	r14, r1
    33ae:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    33b2:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    33b6:	b7 01       	movw	r22, r14
    33b8:	ce 01       	movw	r24, r28
    33ba:	01 96       	adiw	r24, 0x01	; 1
    33bc:	21 d8       	rcall	.-4030   	; 0x2400 <getMatrixColor(int)>
    33be:	9e 01       	movw	r18, r28
    33c0:	2f 5f       	subi	r18, 0xFF	; 255
    33c2:	3f 4f       	sbci	r19, 0xFF	; 255
    33c4:	4f e0       	ldi	r20, 0x0F	; 15
    33c6:	50 e0       	ldi	r21, 0x00	; 0
    33c8:	b8 01       	movw	r22, r16
    33ca:	c6 01       	movw	r24, r12
    33cc:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    33d0:	0f 5f       	subi	r16, 0xFF	; 255
    33d2:	1f 4f       	sbci	r17, 0xFF	; 255
    33d4:	e2 cf       	rjmp	.-60     	; 0x339a <progMatrixVertical(unsigned int, unsigned char)+0x6a4>
    33d6:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    33da:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    33de:	0f e1       	ldi	r16, 0x1F	; 31
    33e0:	10 e0       	ldi	r17, 0x00	; 0
    33e2:	08 1b       	sub	r16, r24
    33e4:	19 0b       	sbc	r17, r25
    33e6:	30 e1       	ldi	r19, 0x10	; 16
    33e8:	e3 2e       	mov	r14, r19
    33ea:	f1 2c       	mov	r15, r1
    33ec:	0f 31       	cpi	r16, 0x1F	; 31
    33ee:	11 05       	cpc	r17, r1
    33f0:	e4 f4       	brge	.+56     	; 0x342a <progMatrixVertical(unsigned int, unsigned char)+0x734>
    33f2:	81 e0       	ldi	r24, 0x01	; 1
    33f4:	e8 1a       	sub	r14, r24
    33f6:	f1 08       	sbc	r15, r1
    33f8:	f7 fe       	sbrs	r15, 7
    33fa:	02 c0       	rjmp	.+4      	; 0x3400 <progMatrixVertical(unsigned int, unsigned char)+0x70a>
    33fc:	f1 2c       	mov	r15, r1
    33fe:	e1 2c       	mov	r14, r1
    3400:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    3404:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3408:	b7 01       	movw	r22, r14
    340a:	ce 01       	movw	r24, r28
    340c:	01 96       	adiw	r24, 0x01	; 1
    340e:	0e 94 00 12 	call	0x2400	; 0x2400 <getMatrixColor(int)>
    3412:	9e 01       	movw	r18, r28
    3414:	2f 5f       	subi	r18, 0xFF	; 255
    3416:	3f 4f       	sbci	r19, 0xFF	; 255
    3418:	41 e1       	ldi	r20, 0x11	; 17
    341a:	50 e0       	ldi	r21, 0x00	; 0
    341c:	b8 01       	movw	r22, r16
    341e:	c6 01       	movw	r24, r12
    3420:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3424:	0f 5f       	subi	r16, 0xFF	; 255
    3426:	1f 4f       	sbci	r17, 0xFF	; 255
    3428:	e1 cf       	rjmp	.-62     	; 0x33ec <progMatrixVertical(unsigned int, unsigned char)+0x6f6>
    342a:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    342e:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    3432:	05 e2       	ldi	r16, 0x25	; 37
    3434:	10 e0       	ldi	r17, 0x00	; 0
    3436:	08 1b       	sub	r16, r24
    3438:	19 0b       	sbc	r17, r25
    343a:	20 e1       	ldi	r18, 0x10	; 16
    343c:	e2 2e       	mov	r14, r18
    343e:	f1 2c       	mov	r15, r1
    3440:	05 32       	cpi	r16, 0x25	; 37
    3442:	11 05       	cpc	r17, r1
    3444:	e4 f4       	brge	.+56     	; 0x347e <progMatrixVertical(unsigned int, unsigned char)+0x788>
    3446:	81 e0       	ldi	r24, 0x01	; 1
    3448:	e8 1a       	sub	r14, r24
    344a:	f1 08       	sbc	r15, r1
    344c:	f7 fe       	sbrs	r15, 7
    344e:	02 c0       	rjmp	.+4      	; 0x3454 <progMatrixVertical(unsigned int, unsigned char)+0x75e>
    3450:	f1 2c       	mov	r15, r1
    3452:	e1 2c       	mov	r14, r1
    3454:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    3458:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    345c:	b7 01       	movw	r22, r14
    345e:	ce 01       	movw	r24, r28
    3460:	01 96       	adiw	r24, 0x01	; 1
    3462:	0e 94 00 12 	call	0x2400	; 0x2400 <getMatrixColor(int)>
    3466:	9e 01       	movw	r18, r28
    3468:	2f 5f       	subi	r18, 0xFF	; 255
    346a:	3f 4f       	sbci	r19, 0xFF	; 255
    346c:	43 e1       	ldi	r20, 0x13	; 19
    346e:	50 e0       	ldi	r21, 0x00	; 0
    3470:	b8 01       	movw	r22, r16
    3472:	c6 01       	movw	r24, r12
    3474:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3478:	0f 5f       	subi	r16, 0xFF	; 255
    347a:	1f 4f       	sbci	r17, 0xFF	; 255
    347c:	e1 cf       	rjmp	.-62     	; 0x3440 <progMatrixVertical(unsigned int, unsigned char)+0x74a>
    347e:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    3482:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    3486:	0c e1       	ldi	r16, 0x1C	; 28
    3488:	10 e0       	ldi	r17, 0x00	; 0
    348a:	08 1b       	sub	r16, r24
    348c:	19 0b       	sbc	r17, r25
    348e:	90 e1       	ldi	r25, 0x10	; 16
    3490:	e9 2e       	mov	r14, r25
    3492:	f1 2c       	mov	r15, r1
    3494:	0c 31       	cpi	r16, 0x1C	; 28
    3496:	11 05       	cpc	r17, r1
    3498:	e4 f4       	brge	.+56     	; 0x34d2 <progMatrixVertical(unsigned int, unsigned char)+0x7dc>
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	e8 1a       	sub	r14, r24
    349e:	f1 08       	sbc	r15, r1
    34a0:	f7 fe       	sbrs	r15, 7
    34a2:	02 c0       	rjmp	.+4      	; 0x34a8 <progMatrixVertical(unsigned int, unsigned char)+0x7b2>
    34a4:	f1 2c       	mov	r15, r1
    34a6:	e1 2c       	mov	r14, r1
    34a8:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    34ac:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    34b0:	b7 01       	movw	r22, r14
    34b2:	ce 01       	movw	r24, r28
    34b4:	01 96       	adiw	r24, 0x01	; 1
    34b6:	0e 94 00 12 	call	0x2400	; 0x2400 <getMatrixColor(int)>
    34ba:	9e 01       	movw	r18, r28
    34bc:	2f 5f       	subi	r18, 0xFF	; 255
    34be:	3f 4f       	sbci	r19, 0xFF	; 255
    34c0:	45 e1       	ldi	r20, 0x15	; 21
    34c2:	50 e0       	ldi	r21, 0x00	; 0
    34c4:	b8 01       	movw	r22, r16
    34c6:	c6 01       	movw	r24, r12
    34c8:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    34cc:	0f 5f       	subi	r16, 0xFF	; 255
    34ce:	1f 4f       	sbci	r17, 0xFF	; 255
    34d0:	e1 cf       	rjmp	.-62     	; 0x3494 <progMatrixVertical(unsigned int, unsigned char)+0x79e>
    34d2:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    34d6:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    34da:	0b e2       	ldi	r16, 0x2B	; 43
    34dc:	10 e0       	ldi	r17, 0x00	; 0
    34de:	08 1b       	sub	r16, r24
    34e0:	19 0b       	sbc	r17, r25
    34e2:	80 e1       	ldi	r24, 0x10	; 16
    34e4:	e8 2e       	mov	r14, r24
    34e6:	f1 2c       	mov	r15, r1
    34e8:	0b 32       	cpi	r16, 0x2B	; 43
    34ea:	11 05       	cpc	r17, r1
    34ec:	e4 f4       	brge	.+56     	; 0x3526 <progMatrixVertical(unsigned int, unsigned char)+0x830>
    34ee:	81 e0       	ldi	r24, 0x01	; 1
    34f0:	e8 1a       	sub	r14, r24
    34f2:	f1 08       	sbc	r15, r1
    34f4:	f7 fe       	sbrs	r15, 7
    34f6:	02 c0       	rjmp	.+4      	; 0x34fc <progMatrixVertical(unsigned int, unsigned char)+0x806>
    34f8:	f1 2c       	mov	r15, r1
    34fa:	e1 2c       	mov	r14, r1
    34fc:	c0 90 2c 10 	lds	r12, 0x102C	; 0x80102c <matrix>
    3500:	d0 90 2d 10 	lds	r13, 0x102D	; 0x80102d <matrix+0x1>
    3504:	b7 01       	movw	r22, r14
    3506:	ce 01       	movw	r24, r28
    3508:	01 96       	adiw	r24, 0x01	; 1
    350a:	0e 94 00 12 	call	0x2400	; 0x2400 <getMatrixColor(int)>
    350e:	9e 01       	movw	r18, r28
    3510:	2f 5f       	subi	r18, 0xFF	; 255
    3512:	3f 4f       	sbci	r19, 0xFF	; 255
    3514:	47 e1       	ldi	r20, 0x17	; 23
    3516:	50 e0       	ldi	r21, 0x00	; 0
    3518:	b8 01       	movw	r22, r16
    351a:	c6 01       	movw	r24, r12
    351c:	0e 94 81 3a 	call	0x7502	; 0x7502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3520:	0f 5f       	subi	r16, 0xFF	; 255
    3522:	1f 4f       	sbci	r17, 0xFF	; 255
    3524:	e1 cf       	rjmp	.-62     	; 0x34e8 <progMatrixVertical(unsigned int, unsigned char)+0x7f2>
    3526:	8d e3       	ldi	r24, 0x3D	; 61
    3528:	90 e1       	ldi	r25, 0x10	; 16
    352a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <CFastLED::show()>
    352e:	80 91 21 0a 	lds	r24, 0x0A21	; 0x800a21 <zaehler>
    3532:	90 91 22 0a 	lds	r25, 0x0A22	; 0x800a22 <zaehler+0x1>
    3536:	01 96       	adiw	r24, 0x01	; 1
    3538:	8d 33       	cpi	r24, 0x3D	; 61
    353a:	91 05       	cpc	r25, r1
    353c:	e4 f4       	brge	.+56     	; 0x3576 <progMatrixVertical(unsigned int, unsigned char)+0x880>
    353e:	90 93 22 0a 	sts	0x0A22, r25	; 0x800a22 <zaehler+0x1>
    3542:	80 93 21 0a 	sts	0x0A21, r24	; 0x800a21 <zaehler>
    3546:	80 91 1f 0a 	lds	r24, 0x0A1F	; 0x800a1f <progMatrixZaehler>
    354a:	90 91 20 0a 	lds	r25, 0x0A20	; 0x800a20 <progMatrixZaehler+0x1>
    354e:	01 96       	adiw	r24, 0x01	; 1
    3550:	8d 33       	cpi	r24, 0x3D	; 61
    3552:	91 05       	cpc	r25, r1
    3554:	ac f4       	brge	.+42     	; 0x3580 <progMatrixVertical(unsigned int, unsigned char)+0x88a>
    3556:	90 93 20 0a 	sts	0x0A20, r25	; 0x800a20 <progMatrixZaehler+0x1>
    355a:	80 93 1f 0a 	sts	0x0A1F, r24	; 0x800a1f <progMatrixZaehler>
    355e:	0f 90       	pop	r0
    3560:	0f 90       	pop	r0
    3562:	0f 90       	pop	r0
    3564:	df 91       	pop	r29
    3566:	cf 91       	pop	r28
    3568:	1f 91       	pop	r17
    356a:	0f 91       	pop	r16
    356c:	ff 90       	pop	r15
    356e:	ef 90       	pop	r14
    3570:	df 90       	pop	r13
    3572:	cf 90       	pop	r12
    3574:	08 95       	ret
    3576:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    357a:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    357e:	e3 cf       	rjmp	.-58     	; 0x3546 <progMatrixVertical(unsigned int, unsigned char)+0x850>
    3580:	10 92 20 0a 	sts	0x0A20, r1	; 0x800a20 <progMatrixZaehler+0x1>
    3584:	10 92 1f 0a 	sts	0x0A1F, r1	; 0x800a1f <progMatrixZaehler>
    3588:	ea cf       	rjmp	.-44     	; 0x355e <progMatrixVertical(unsigned int, unsigned char)+0x868>

0000358a <setupInterrupt()>:
    358a:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    358e:	8b e0       	ldi	r24, 0x0B	; 11
    3590:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    3594:	8a e6       	ldi	r24, 0x6A	; 106
    3596:	98 e1       	ldi	r25, 0x18	; 24
    3598:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    359c:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    35a0:	82 e0       	ldi	r24, 0x02	; 2
    35a2:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    35a6:	08 95       	ret

000035a8 <switchToPart(unsigned char)>:
    35a8:	cf 93       	push	r28
    35aa:	c8 2f       	mov	r28, r24
    35ac:	80 93 28 0a 	sts	0x0A28, r24	; 0x800a28 <prog>
    35b0:	10 92 2a 0a 	sts	0x0A2A, r1	; 0x800a2a <nextChangeMillisAlreadyCalculated>
    35b4:	10 92 31 0a 	sts	0x0A31, r1	; 0x800a31 <millisCounterTimer+0x1>
    35b8:	10 92 30 0a 	sts	0x0A30, r1	; 0x800a30 <millisCounterTimer>
    35bc:	10 92 2f 0a 	sts	0x0A2F, r1	; 0x800a2f <millisCounterForProgChange+0x1>
    35c0:	10 92 2e 0a 	sts	0x0A2E, r1	; 0x800a2e <millisCounterForProgChange>
    35c4:	10 92 22 0a 	sts	0x0A22, r1	; 0x800a22 <zaehler+0x1>
    35c8:	10 92 21 0a 	sts	0x0A21, r1	; 0x800a21 <zaehler>
    35cc:	87 e1       	ldi	r24, 0x17	; 23
    35ce:	90 e0       	ldi	r25, 0x00	; 0
    35d0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    35d4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    35d8:	10 92 e4 09 	sts	0x09E4, r1	; 0x8009e4 <progBlingBlingColoring_rounds+0x1>
    35dc:	10 92 e3 09 	sts	0x09E3, r1	; 0x8009e3 <progBlingBlingColoring_rounds>
    35e0:	10 92 e0 09 	sts	0x09E0, r1	; 0x8009e0 <progCLED_hue>
    35e4:	10 92 df 09 	sts	0x09DF, r1	; 0x8009df <progCLED_counter+0x1>
    35e8:	10 92 de 09 	sts	0x09DE, r1	; 0x8009de <progCLED_counter>
    35ec:	6f e1       	ldi	r22, 0x1F	; 31
    35ee:	71 e0       	ldi	r23, 0x01	; 1
    35f0:	8d ec       	ldi	r24, 0xCD	; 205
    35f2:	90 e1       	ldi	r25, 0x10	; 16
    35f4:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    35f8:	6c 2f       	mov	r22, r28
    35fa:	8d ec       	ldi	r24, 0xCD	; 205
    35fc:	90 e1       	ldi	r25, 0x10	; 16
    35fe:	cf 91       	pop	r28
    3600:	0c 94 94 05 	jmp	0xb28	; 0xb28 <Print::println(unsigned char)>

00003604 <__vector_32>:
    3604:	1f 92       	push	r1
    3606:	0f 92       	push	r0
    3608:	0f b6       	in	r0, 0x3f	; 63
    360a:	0f 92       	push	r0
    360c:	11 24       	eor	r1, r1
    360e:	0b b6       	in	r0, 0x3b	; 59
    3610:	0f 92       	push	r0
    3612:	2f 93       	push	r18
    3614:	3f 93       	push	r19
    3616:	4f 93       	push	r20
    3618:	5f 93       	push	r21
    361a:	6f 93       	push	r22
    361c:	7f 93       	push	r23
    361e:	8f 93       	push	r24
    3620:	9f 93       	push	r25
    3622:	af 93       	push	r26
    3624:	bf 93       	push	r27
    3626:	ef 93       	push	r30
    3628:	ff 93       	push	r31
    362a:	80 91 30 0a 	lds	r24, 0x0A30	; 0x800a30 <millisCounterTimer>
    362e:	90 91 31 0a 	lds	r25, 0x0A31	; 0x800a31 <millisCounterTimer+0x1>
    3632:	49 96       	adiw	r24, 0x19	; 25
    3634:	90 93 31 0a 	sts	0x0A31, r25	; 0x800a31 <millisCounterTimer+0x1>
    3638:	80 93 30 0a 	sts	0x0A30, r24	; 0x800a30 <millisCounterTimer>
    363c:	80 91 2c 0a 	lds	r24, 0x0A2C	; 0x800a2c <millisCounterForSeconds>
    3640:	90 91 2d 0a 	lds	r25, 0x0A2D	; 0x800a2d <millisCounterForSeconds+0x1>
    3644:	49 96       	adiw	r24, 0x19	; 25
    3646:	90 93 2d 0a 	sts	0x0A2D, r25	; 0x800a2d <millisCounterForSeconds+0x1>
    364a:	80 93 2c 0a 	sts	0x0A2C, r24	; 0x800a2c <millisCounterForSeconds>
    364e:	80 91 2e 0a 	lds	r24, 0x0A2E	; 0x800a2e <millisCounterForProgChange>
    3652:	90 91 2f 0a 	lds	r25, 0x0A2F	; 0x800a2f <millisCounterForProgChange+0x1>
    3656:	49 96       	adiw	r24, 0x19	; 25
    3658:	90 93 2f 0a 	sts	0x0A2F, r25	; 0x800a2f <millisCounterForProgChange+0x1>
    365c:	80 93 2e 0a 	sts	0x0A2E, r24	; 0x800a2e <millisCounterForProgChange>
    3660:	91 e0       	ldi	r25, 0x01	; 1
    3662:	90 93 2b 0a 	sts	0x0A2B, r25	; 0x800a2b <flag_processFastLED>
    3666:	8b b1       	in	r24, 0x0b	; 11
    3668:	20 e4       	ldi	r18, 0x40	; 64
    366a:	82 27       	eor	r24, r18
    366c:	8b b9       	out	0x0b, r24	; 11
    366e:	20 91 2c 0a 	lds	r18, 0x0A2C	; 0x800a2c <millisCounterForSeconds>
    3672:	30 91 2d 0a 	lds	r19, 0x0A2D	; 0x800a2d <millisCounterForSeconds+0x1>
    3676:	28 3e       	cpi	r18, 0xE8	; 232
    3678:	33 40       	sbci	r19, 0x03	; 3
    367a:	30 f0       	brcs	.+12     	; 0x3688 <__vector_32+0x84>
    367c:	10 92 2d 0a 	sts	0x0A2D, r1	; 0x800a2d <millisCounterForSeconds+0x1>
    3680:	10 92 2c 0a 	sts	0x0A2C, r1	; 0x800a2c <millisCounterForSeconds>
    3684:	90 93 27 0a 	sts	0x0A27, r25	; 0x800a27 <OneSecondHasPast>
    3688:	20 91 2e 0a 	lds	r18, 0x0A2E	; 0x800a2e <millisCounterForProgChange>
    368c:	30 91 2f 0a 	lds	r19, 0x0A2F	; 0x800a2f <millisCounterForProgChange+0x1>
    3690:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    3694:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    3698:	28 17       	cp	r18, r24
    369a:	39 07       	cpc	r19, r25
    369c:	18 f0       	brcs	.+6      	; 0x36a4 <__vector_32+0xa0>
    369e:	80 91 29 0a 	lds	r24, 0x0A29	; 0x800a29 <nextSongPart>
    36a2:	82 df       	rcall	.-252    	; 0x35a8 <switchToPart(unsigned char)>
    36a4:	ff 91       	pop	r31
    36a6:	ef 91       	pop	r30
    36a8:	bf 91       	pop	r27
    36aa:	af 91       	pop	r26
    36ac:	9f 91       	pop	r25
    36ae:	8f 91       	pop	r24
    36b0:	7f 91       	pop	r23
    36b2:	6f 91       	pop	r22
    36b4:	5f 91       	pop	r21
    36b6:	4f 91       	pop	r20
    36b8:	3f 91       	pop	r19
    36ba:	2f 91       	pop	r18
    36bc:	0f 90       	pop	r0
    36be:	0b be       	out	0x3b, r0	; 59
    36c0:	0f 90       	pop	r0
    36c2:	0f be       	out	0x3f, r0	; 63
    36c4:	0f 90       	pop	r0
    36c6:	1f 90       	pop	r1
    36c8:	18 95       	reti

000036ca <switchToSong(unsigned char)>:
    36ca:	cf 93       	push	r28
    36cc:	c8 2f       	mov	r28, r24
    36ce:	80 93 3d 0a 	sts	0x0A3D, r24	; 0x800a3d <songID>
    36d2:	62 e3       	ldi	r22, 0x32	; 50
    36d4:	71 e0       	ldi	r23, 0x01	; 1
    36d6:	8d ec       	ldi	r24, 0xCD	; 205
    36d8:	90 e1       	ldi	r25, 0x10	; 16
    36da:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    36de:	6c 2f       	mov	r22, r28
    36e0:	8d ec       	ldi	r24, 0xCD	; 205
    36e2:	90 e1       	ldi	r25, 0x10	; 16
    36e4:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::println(unsigned char)>
    36e8:	80 e0       	ldi	r24, 0x00	; 0
    36ea:	cf 91       	pop	r28
    36ec:	5d cf       	rjmp	.-326    	; 0x35a8 <switchToPart(unsigned char)>

000036ee <setup>:
    36ee:	af 92       	push	r10
    36f0:	bf 92       	push	r11
    36f2:	cf 92       	push	r12
    36f4:	df 92       	push	r13
    36f6:	ef 92       	push	r14
    36f8:	ff 92       	push	r15
    36fa:	0f 93       	push	r16
    36fc:	1f 93       	push	r17
    36fe:	cf 93       	push	r28
    3700:	df 93       	push	r29
    3702:	68 ee       	ldi	r22, 0xE8	; 232
    3704:	73 e0       	ldi	r23, 0x03	; 3
    3706:	80 e0       	ldi	r24, 0x00	; 0
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	0e 94 98 42 	call	0x8530	; 0x8530 <delay>
    370e:	4f ef       	ldi	r20, 0xFF	; 255
    3710:	60 e4       	ldi	r22, 0x40	; 64
    3712:	70 e0       	ldi	r23, 0x00	; 0
    3714:	88 e5       	ldi	r24, 0x58	; 88
    3716:	90 e1       	ldi	r25, 0x10	; 16
    3718:	0e 94 7b 45 	call	0x8af6	; 0x8af6 <HardwareSerial::_begin(unsigned int, unsigned char)>
    371c:	56 9a       	sbi	0x0a, 6	; 10
    371e:	88 e2       	ldi	r24, 0x28	; 40
    3720:	0e 94 00 41 	call	0x8200	; 0x8200 <analogRead>
    3724:	bc 01       	movw	r22, r24
    3726:	99 0f       	add	r25, r25
    3728:	88 0b       	sbc	r24, r24
    372a:	99 0b       	sbc	r25, r25
    372c:	1f 92       	push	r1
    372e:	1f 92       	push	r1
    3730:	1f 92       	push	r1
    3732:	28 e7       	ldi	r18, 0x78	; 120
    3734:	2f 93       	push	r18
    3736:	a1 2c       	mov	r10, r1
    3738:	b1 2c       	mov	r11, r1
    373a:	65 01       	movw	r12, r10
    373c:	ee 24       	eor	r14, r14
    373e:	ea 94       	dec	r14
    3740:	13 e0       	ldi	r17, 0x03	; 3
    3742:	f1 2e       	mov	r15, r17
    3744:	00 e0       	ldi	r16, 0x00	; 0
    3746:	10 e0       	ldi	r17, 0x00	; 0
    3748:	20 e0       	ldi	r18, 0x00	; 0
    374a:	30 e0       	ldi	r19, 0x00	; 0
    374c:	a9 01       	movw	r20, r18
    374e:	0e 94 42 49 	call	0x9284	; 0x9284 <map(long, long, long, long, long)>
    3752:	60 93 34 0a 	sts	0x0A34, r22	; 0x800a34 <voltageSmooth>
    3756:	82 e3       	ldi	r24, 0x32	; 50
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	0e 94 45 46 	call	0x8c8a	; 0x8c8a <operator new(unsigned int)>
    375e:	ec 01       	movw	r28, r24
    3760:	0a e0       	ldi	r16, 0x0A	; 10
    3762:	27 e1       	ldi	r18, 0x17	; 23
    3764:	30 e0       	ldi	r19, 0x00	; 0
    3766:	46 e1       	ldi	r20, 0x16	; 22
    3768:	50 e0       	ldi	r21, 0x00	; 0
    376a:	6e e3       	ldi	r22, 0x3E	; 62
    376c:	7a e0       	ldi	r23, 0x0A	; 10
    376e:	0e 94 aa 37 	call	0x6f54	; 0x6f54 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    3772:	d0 93 2d 10 	sts	0x102D, r29	; 0x80102d <matrix+0x1>
    3776:	c0 93 2c 10 	sts	0x102C, r28	; 0x80102c <matrix>
    377a:	80 91 55 09 	lds	r24, 0x0955	; 0x800955 <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    377e:	0f 90       	pop	r0
    3780:	0f 90       	pop	r0
    3782:	0f 90       	pop	r0
    3784:	0f 90       	pop	r0
    3786:	81 11       	cpse	r24, r1
    3788:	4d c0       	rjmp	.+154    	; 0x3824 <setup+0x136>
    378a:	85 e5       	ldi	r24, 0x55	; 85
    378c:	99 e0       	ldi	r25, 0x09	; 9
    378e:	0e 94 46 46 	call	0x8c8c	; 0x8c8c <__cxa_guard_acquire>
    3792:	89 2b       	or	r24, r25
    3794:	09 f4       	brne	.+2      	; 0x3798 <setup+0xaa>
    3796:	46 c0       	rjmp	.+140    	; 0x3824 <setup+0x136>
    3798:	10 92 60 09 	sts	0x0960, r1	; 0x800960 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    379c:	10 92 5f 09 	sts	0x095F, r1	; 0x80095f <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    37a0:	8f ef       	ldi	r24, 0xFF	; 255
    37a2:	80 93 63 09 	sts	0x0963, r24	; 0x800963 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    37a6:	80 93 64 09 	sts	0x0964, r24	; 0x800964 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    37aa:	80 93 65 09 	sts	0x0965, r24	; 0x800965 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    37ae:	80 93 66 09 	sts	0x0966, r24	; 0x800966 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    37b2:	80 93 67 09 	sts	0x0967, r24	; 0x800967 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    37b6:	80 93 68 09 	sts	0x0968, r24	; 0x800968 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    37ba:	81 e0       	ldi	r24, 0x01	; 1
    37bc:	80 93 69 09 	sts	0x0969, r24	; 0x800969 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    37c0:	10 92 6b 09 	sts	0x096B, r1	; 0x80096b <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    37c4:	10 92 6a 09 	sts	0x096A, r1	; 0x80096a <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    37c8:	10 92 62 09 	sts	0x0962, r1	; 0x800962 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    37cc:	10 92 61 09 	sts	0x0961, r1	; 0x800961 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    37d0:	80 91 3b 10 	lds	r24, 0x103B	; 0x80103b <CLEDController::m_pHead>
    37d4:	90 91 3c 10 	lds	r25, 0x103C	; 0x80103c <CLEDController::m_pHead+0x1>
    37d8:	89 2b       	or	r24, r25
    37da:	31 f4       	brne	.+12     	; 0x37e8 <setup+0xfa>
    37dc:	8d e5       	ldi	r24, 0x5D	; 93
    37de:	99 e0       	ldi	r25, 0x09	; 9
    37e0:	90 93 3c 10 	sts	0x103C, r25	; 0x80103c <CLEDController::m_pHead+0x1>
    37e4:	80 93 3b 10 	sts	0x103B, r24	; 0x80103b <CLEDController::m_pHead>
    37e8:	e0 91 39 10 	lds	r30, 0x1039	; 0x801039 <CLEDController::m_pTail>
    37ec:	f0 91 3a 10 	lds	r31, 0x103A	; 0x80103a <CLEDController::m_pTail+0x1>
    37f0:	30 97       	sbiw	r30, 0x00	; 0
    37f2:	21 f0       	breq	.+8      	; 0x37fc <setup+0x10e>
    37f4:	8d e5       	ldi	r24, 0x5D	; 93
    37f6:	99 e0       	ldi	r25, 0x09	; 9
    37f8:	95 83       	std	Z+5, r25	; 0x05
    37fa:	84 83       	std	Z+4, r24	; 0x04
    37fc:	8d e5       	ldi	r24, 0x5D	; 93
    37fe:	99 e0       	ldi	r25, 0x09	; 9
    3800:	90 93 3a 10 	sts	0x103A, r25	; 0x80103a <CLEDController::m_pTail+0x1>
    3804:	80 93 39 10 	sts	0x1039, r24	; 0x801039 <CLEDController::m_pTail>
    3808:	10 92 6d 09 	sts	0x096D, r1	; 0x80096d <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    380c:	10 92 6c 09 	sts	0x096C, r1	; 0x80096c <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    3810:	83 ee       	ldi	r24, 0xE3	; 227
    3812:	94 e0       	ldi	r25, 0x04	; 4
    3814:	90 93 5e 09 	sts	0x095E, r25	; 0x80095e <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    3818:	80 93 5d 09 	sts	0x095D, r24	; 0x80095d <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    381c:	85 e5       	ldi	r24, 0x55	; 85
    381e:	99 e0       	ldi	r25, 0x09	; 9
    3820:	0e 94 4f 46 	call	0x8c9e	; 0x8c9e <__cxa_guard_release>
    3824:	30 e0       	ldi	r19, 0x00	; 0
    3826:	20 e0       	ldi	r18, 0x00	; 0
    3828:	4a ef       	ldi	r20, 0xFA	; 250
    382a:	51 e0       	ldi	r21, 0x01	; 1
    382c:	6e e3       	ldi	r22, 0x3E	; 62
    382e:	7a e0       	ldi	r23, 0x0A	; 10
    3830:	8d e5       	ldi	r24, 0x5D	; 93
    3832:	99 e0       	ldi	r25, 0x09	; 9
    3834:	0e 94 9a 3d 	call	0x7b34	; 0x7b34 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    3838:	fc 01       	movw	r30, r24
    383a:	8f ef       	ldi	r24, 0xFF	; 255
    383c:	86 83       	std	Z+6, r24	; 0x06
    383e:	80 eb       	ldi	r24, 0xB0	; 176
    3840:	87 83       	std	Z+7, r24	; 0x07
    3842:	80 ef       	ldi	r24, 0xF0	; 240
    3844:	80 87       	std	Z+8, r24	; 0x08
    3846:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    384a:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    384e:	0e 94 21 38 	call	0x7042	; 0x7042 <Framebuffer_GFX::begin()>
    3852:	80 91 2c 10 	lds	r24, 0x102C	; 0x80102c <matrix>
    3856:	90 91 2d 10 	lds	r25, 0x102D	; 0x80102d <matrix+0x1>
    385a:	2f e0       	ldi	r18, 0x0F	; 15
    385c:	20 93 3d 10 	sts	0x103D, r18	; 0x80103d <FastLED>
    3860:	fc 01       	movw	r30, r24
    3862:	16 8a       	std	Z+22, r1	; 0x16
    3864:	69 e8       	ldi	r22, 0x89	; 137
    3866:	74 e0       	ldi	r23, 0x04	; 4
    3868:	0e 94 b0 3a 	call	0x7560	; 0x7560 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    386c:	f8 94       	cli
    386e:	8d de       	rcall	.-742    	; 0x358a <setupInterrupt()>
    3870:	78 94       	sei
    3872:	68 eb       	ldi	r22, 0xB8	; 184
    3874:	76 e0       	ldi	r23, 0x06	; 6
    3876:	8a ee       	ldi	r24, 0xEA	; 234
    3878:	99 e0       	ldi	r25, 0x09	; 9
    387a:	0e 94 ab 05 	call	0xb56	; 0xb56 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    387e:	81 e0       	ldi	r24, 0x01	; 1
    3880:	90 e0       	ldi	r25, 0x00	; 0
    3882:	90 93 e9 09 	sts	0x09E9, r25	; 0x8009e9 <currentBlending+0x1>
    3886:	80 93 e8 09 	sts	0x09E8, r24	; 0x8009e8 <currentBlending>
    388a:	80 e0       	ldi	r24, 0x00	; 0
    388c:	df 91       	pop	r29
    388e:	cf 91       	pop	r28
    3890:	1f 91       	pop	r17
    3892:	0f 91       	pop	r16
    3894:	ff 90       	pop	r15
    3896:	ef 90       	pop	r14
    3898:	df 90       	pop	r13
    389a:	cf 90       	pop	r12
    389c:	bf 90       	pop	r11
    389e:	af 90       	pop	r10
    38a0:	14 cf       	rjmp	.-472    	; 0x36ca <switchToSong(unsigned char)>

000038a2 <defaultLoop()>:
    38a2:	ef 92       	push	r14
    38a4:	ff 92       	push	r15
    38a6:	0f 93       	push	r16
    38a8:	1f 93       	push	r17
    38aa:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    38ae:	8e 31       	cpi	r24, 0x1E	; 30
    38b0:	09 f4       	brne	.+2      	; 0x38b4 <defaultLoop()+0x12>
    38b2:	7e c0       	rjmp	.+252    	; 0x39b0 <defaultLoop()+0x10e>
    38b4:	40 f5       	brcc	.+80     	; 0x3906 <defaultLoop()+0x64>
    38b6:	8a 30       	cpi	r24, 0x0A	; 10
    38b8:	09 f4       	brne	.+2      	; 0x38bc <defaultLoop()+0x1a>
    38ba:	60 c0       	rjmp	.+192    	; 0x397c <defaultLoop()+0xda>
    38bc:	58 f4       	brcc	.+22     	; 0x38d4 <defaultLoop()+0x32>
    38be:	88 23       	and	r24, r24
    38c0:	09 f4       	brne	.+2      	; 0x38c4 <defaultLoop()+0x22>
    38c2:	4b c0       	rjmp	.+150    	; 0x395a <defaultLoop()+0xb8>
    38c4:	85 30       	cpi	r24, 0x05	; 5
    38c6:	09 f4       	brne	.+2      	; 0x38ca <defaultLoop()+0x28>
    38c8:	51 c0       	rjmp	.+162    	; 0x396c <defaultLoop()+0xca>
    38ca:	1f 91       	pop	r17
    38cc:	0f 91       	pop	r16
    38ce:	ff 90       	pop	r15
    38d0:	ef 90       	pop	r14
    38d2:	08 95       	ret
    38d4:	84 31       	cpi	r24, 0x14	; 20
    38d6:	09 f4       	brne	.+2      	; 0x38da <defaultLoop()+0x38>
    38d8:	5c c0       	rjmp	.+184    	; 0x3992 <defaultLoop()+0xf0>
    38da:	89 31       	cpi	r24, 0x19	; 25
    38dc:	09 f4       	brne	.+2      	; 0x38e0 <defaultLoop()+0x3e>
    38de:	5d c0       	rjmp	.+186    	; 0x399a <defaultLoop()+0xf8>
    38e0:	8f 30       	cpi	r24, 0x0F	; 15
    38e2:	99 f7       	brne	.-26     	; 0x38ca <defaultLoop()+0x28>
    38e4:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    38e8:	7c 01       	movw	r14, r24
    38ea:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    38ee:	8c 01       	movw	r16, r24
    38f0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    38f4:	9c 01       	movw	r18, r24
    38f6:	42 e3       	ldi	r20, 0x32	; 50
    38f8:	50 e0       	ldi	r21, 0x00	; 0
    38fa:	64 e1       	ldi	r22, 0x14	; 20
    38fc:	88 e8       	ldi	r24, 0x88	; 136
    38fe:	93 e1       	ldi	r25, 0x13	; 19
    3900:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3904:	e2 cf       	rjmp	.-60     	; 0x38ca <defaultLoop()+0x28>
    3906:	82 33       	cpi	r24, 0x32	; 50
    3908:	09 f4       	brne	.+2      	; 0x390c <defaultLoop()+0x6a>
    390a:	70 c0       	rjmp	.+224    	; 0x39ec <defaultLoop()+0x14a>
    390c:	98 f4       	brcc	.+38     	; 0x3934 <defaultLoop()+0x92>
    390e:	88 32       	cpi	r24, 0x28	; 40
    3910:	09 f4       	brne	.+2      	; 0x3914 <defaultLoop()+0x72>
    3912:	59 c0       	rjmp	.+178    	; 0x39c6 <defaultLoop()+0x124>
    3914:	8d 32       	cpi	r24, 0x2D	; 45
    3916:	09 f4       	brne	.+2      	; 0x391a <defaultLoop()+0x78>
    3918:	60 c0       	rjmp	.+192    	; 0x39da <defaultLoop()+0x138>
    391a:	83 32       	cpi	r24, 0x23	; 35
    391c:	b1 f6       	brne	.-84     	; 0x38ca <defaultLoop()+0x28>
    391e:	48 ee       	ldi	r20, 0xE8	; 232
    3920:	53 e0       	ldi	r21, 0x03	; 3
    3922:	68 e2       	ldi	r22, 0x28	; 40
    3924:	88 e9       	ldi	r24, 0x98	; 152
    3926:	9a e3       	ldi	r25, 0x3A	; 58
    3928:	1f 91       	pop	r17
    392a:	0f 91       	pop	r16
    392c:	ff 90       	pop	r15
    392e:	ef 90       	pop	r14
    3930:	0c 94 fa 09 	jmp	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3934:	8c 33       	cpi	r24, 0x3C	; 60
    3936:	09 f4       	brne	.+2      	; 0x393a <defaultLoop()+0x98>
    3938:	62 c0       	rjmp	.+196    	; 0x39fe <defaultLoop()+0x15c>
    393a:	84 36       	cpi	r24, 0x64	; 100
    393c:	09 f4       	brne	.+2      	; 0x3940 <defaultLoop()+0x9e>
    393e:	68 c0       	rjmp	.+208    	; 0x3a10 <defaultLoop()+0x16e>
    3940:	87 33       	cpi	r24, 0x37	; 55
    3942:	19 f6       	brne	.-122    	; 0x38ca <defaultLoop()+0x28>
    3944:	44 ef       	ldi	r20, 0xF4	; 244
    3946:	51 e0       	ldi	r21, 0x01	; 1
    3948:	6c e3       	ldi	r22, 0x3C	; 60
    394a:	88 e9       	ldi	r24, 0x98	; 152
    394c:	9a e3       	ldi	r25, 0x3A	; 58
    394e:	1f 91       	pop	r17
    3950:	0f 91       	pop	r16
    3952:	ff 90       	pop	r15
    3954:	ef 90       	pop	r14
    3956:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <progRandomLines(unsigned int, unsigned char, unsigned int)>
    395a:	65 e0       	ldi	r22, 0x05	; 5
    395c:	88 ed       	ldi	r24, 0xD8	; 216
    395e:	96 ed       	ldi	r25, 0xD6	; 214
    3960:	1f 91       	pop	r17
    3962:	0f 91       	pop	r16
    3964:	ff 90       	pop	r15
    3966:	ef 90       	pop	r14
    3968:	0c 94 c6 07 	jmp	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    396c:	6a e0       	ldi	r22, 0x0A	; 10
    396e:	80 e3       	ldi	r24, 0x30	; 48
    3970:	95 e7       	ldi	r25, 0x75	; 117
    3972:	1f 91       	pop	r17
    3974:	0f 91       	pop	r16
    3976:	ff 90       	pop	r15
    3978:	ef 90       	pop	r14
    397a:	bd c9       	rjmp	.-3206   	; 0x2cf6 <progMatrixVertical(unsigned int, unsigned char)>
    397c:	4f e0       	ldi	r20, 0x0F	; 15
    397e:	60 ed       	ldi	r22, 0xD0	; 208
    3980:	77 e0       	ldi	r23, 0x07	; 7
    3982:	88 e9       	ldi	r24, 0x98	; 152
    3984:	9a e3       	ldi	r25, 0x3A	; 58
    3986:	1f 91       	pop	r17
    3988:	0f 91       	pop	r16
    398a:	ff 90       	pop	r15
    398c:	ef 90       	pop	r14
    398e:	0c 94 87 08 	jmp	0x110e	; 0x110e <progStern(unsigned int, int, unsigned char)>
    3992:	69 e1       	ldi	r22, 0x19	; 25
    3994:	88 e9       	ldi	r24, 0x98	; 152
    3996:	9a e3       	ldi	r25, 0x3A	; 58
    3998:	e3 cf       	rjmp	.-58     	; 0x3960 <defaultLoop()+0xbe>
    399a:	40 ed       	ldi	r20, 0xD0	; 208
    399c:	57 e0       	ldi	r21, 0x07	; 7
    399e:	6e e1       	ldi	r22, 0x1E	; 30
    39a0:	88 e9       	ldi	r24, 0x98	; 152
    39a2:	9a e3       	ldi	r25, 0x3A	; 58
    39a4:	1f 91       	pop	r17
    39a6:	0f 91       	pop	r16
    39a8:	ff 90       	pop	r15
    39aa:	ef 90       	pop	r14
    39ac:	0c 94 04 07 	jmp	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    39b0:	ee 24       	eor	r14, r14
    39b2:	ea 94       	dec	r14
    39b4:	f1 2c       	mov	r15, r1
    39b6:	0f ef       	ldi	r16, 0xFF	; 255
    39b8:	10 e0       	ldi	r17, 0x00	; 0
    39ba:	2f ef       	ldi	r18, 0xFF	; 255
    39bc:	30 e0       	ldi	r19, 0x00	; 0
    39be:	42 e3       	ldi	r20, 0x32	; 50
    39c0:	50 e0       	ldi	r21, 0x00	; 0
    39c2:	63 e2       	ldi	r22, 0x23	; 35
    39c4:	9b cf       	rjmp	.-202    	; 0x38fc <defaultLoop()+0x5a>
    39c6:	4d e2       	ldi	r20, 0x2D	; 45
    39c8:	65 e0       	ldi	r22, 0x05	; 5
    39ca:	88 e9       	ldi	r24, 0x98	; 152
    39cc:	9a e3       	ldi	r25, 0x3A	; 58
    39ce:	1f 91       	pop	r17
    39d0:	0f 91       	pop	r16
    39d2:	ff 90       	pop	r15
    39d4:	ef 90       	pop	r14
    39d6:	0c 94 b5 06 	jmp	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    39da:	62 e3       	ldi	r22, 0x32	; 50
    39dc:	80 e1       	ldi	r24, 0x10	; 16
    39de:	97 e2       	ldi	r25, 0x27	; 39
    39e0:	1f 91       	pop	r17
    39e2:	0f 91       	pop	r16
    39e4:	ff 90       	pop	r15
    39e6:	ef 90       	pop	r14
    39e8:	0c 94 15 0c 	jmp	0x182a	; 0x182a <progOutline(unsigned int, unsigned char)>
    39ec:	67 e3       	ldi	r22, 0x37	; 55
    39ee:	80 e1       	ldi	r24, 0x10	; 16
    39f0:	97 e2       	ldi	r25, 0x27	; 39
    39f2:	1f 91       	pop	r17
    39f4:	0f 91       	pop	r16
    39f6:	ff 90       	pop	r15
    39f8:	ef 90       	pop	r14
    39fa:	0c 94 13 0b 	jmp	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    39fe:	64 e6       	ldi	r22, 0x64	; 100
    3a00:	80 e6       	ldi	r24, 0x60	; 96
    3a02:	9a ee       	ldi	r25, 0xEA	; 234
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	0c 94 24 06 	jmp	0xc48	; 0xc48 <progBlingBlingColoring(unsigned int, unsigned char)>
    3a10:	60 e0       	ldi	r22, 0x00	; 0
    3a12:	8d e3       	ldi	r24, 0x3D	; 61
    3a14:	90 e1       	ldi	r25, 0x10	; 16
    3a16:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    3a1a:	80 e0       	ldi	r24, 0x00	; 0
    3a1c:	1f 91       	pop	r17
    3a1e:	0f 91       	pop	r16
    3a20:	ff 90       	pop	r15
    3a22:	ef 90       	pop	r14
    3a24:	52 ce       	rjmp	.-860    	; 0x36ca <switchToSong(unsigned char)>

00003a26 <LearnToFly()>:
    3a26:	ef 92       	push	r14
    3a28:	ff 92       	push	r15
    3a2a:	0f 93       	push	r16
    3a2c:	1f 93       	push	r17
    3a2e:	cf 93       	push	r28
    3a30:	df 93       	push	r29
    3a32:	00 d0       	rcall	.+0      	; 0x3a34 <LearnToFly()+0xe>
    3a34:	00 d0       	rcall	.+0      	; 0x3a36 <LearnToFly()+0x10>
    3a36:	00 d0       	rcall	.+0      	; 0x3a38 <LearnToFly()+0x12>
    3a38:	1f 92       	push	r1
    3a3a:	cd b7       	in	r28, 0x3d	; 61
    3a3c:	de b7       	in	r29, 0x3e	; 62
    3a3e:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    3a42:	89 31       	cpi	r24, 0x19	; 25
    3a44:	09 f4       	brne	.+2      	; 0x3a48 <LearnToFly()+0x22>
    3a46:	85 c0       	rjmp	.+266    	; 0x3b52 <LearnToFly()+0x12c>
    3a48:	38 f5       	brcc	.+78     	; 0x3a98 <LearnToFly()+0x72>
    3a4a:	85 30       	cpi	r24, 0x05	; 5
    3a4c:	09 f4       	brne	.+2      	; 0x3a50 <LearnToFly()+0x2a>
    3a4e:	6d c0       	rjmp	.+218    	; 0x3b2a <LearnToFly()+0x104>
    3a50:	98 f4       	brcc	.+38     	; 0x3a78 <LearnToFly()+0x52>
    3a52:	88 23       	and	r24, r24
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <LearnToFly()+0x32>
    3a56:	49 c0       	rjmp	.+146    	; 0x3aea <LearnToFly()+0xc4>
    3a58:	82 30       	cpi	r24, 0x02	; 2
    3a5a:	09 f4       	brne	.+2      	; 0x3a5e <LearnToFly()+0x38>
    3a5c:	5e c0       	rjmp	.+188    	; 0x3b1a <LearnToFly()+0xf4>
    3a5e:	27 96       	adiw	r28, 0x07	; 7
    3a60:	0f b6       	in	r0, 0x3f	; 63
    3a62:	f8 94       	cli
    3a64:	de bf       	out	0x3e, r29	; 62
    3a66:	0f be       	out	0x3f, r0	; 63
    3a68:	cd bf       	out	0x3d, r28	; 61
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	08 95       	ret
    3a78:	8f 30       	cpi	r24, 0x0F	; 15
    3a7a:	09 f4       	brne	.+2      	; 0x3a7e <LearnToFly()+0x58>
    3a7c:	5c c0       	rjmp	.+184    	; 0x3b36 <LearnToFly()+0x110>
    3a7e:	84 31       	cpi	r24, 0x14	; 20
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <LearnToFly()+0x5e>
    3a82:	5f c0       	rjmp	.+190    	; 0x3b42 <LearnToFly()+0x11c>
    3a84:	8a 30       	cpi	r24, 0x0A	; 10
    3a86:	59 f7       	brne	.-42     	; 0x3a5e <LearnToFly()+0x38>
    3a88:	49 ea       	ldi	r20, 0xA9	; 169
    3a8a:	51 e0       	ldi	r21, 0x01	; 1
    3a8c:	6f e0       	ldi	r22, 0x0F	; 15
    3a8e:	82 e8       	ldi	r24, 0x82	; 130
    3a90:	90 e6       	ldi	r25, 0x60	; 96
    3a92:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3a96:	e3 cf       	rjmp	.-58     	; 0x3a5e <LearnToFly()+0x38>
    3a98:	8d 32       	cpi	r24, 0x2D	; 45
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <LearnToFly()+0x78>
    3a9c:	74 c0       	rjmp	.+232    	; 0x3b86 <LearnToFly()+0x160>
    3a9e:	70 f4       	brcc	.+28     	; 0x3abc <LearnToFly()+0x96>
    3aa0:	83 32       	cpi	r24, 0x23	; 35
    3aa2:	09 f4       	brne	.+2      	; 0x3aa6 <LearnToFly()+0x80>
    3aa4:	5d c0       	rjmp	.+186    	; 0x3b60 <LearnToFly()+0x13a>
    3aa6:	88 32       	cpi	r24, 0x28	; 40
    3aa8:	09 f4       	brne	.+2      	; 0x3aac <LearnToFly()+0x86>
    3aaa:	69 c0       	rjmp	.+210    	; 0x3b7e <LearnToFly()+0x158>
    3aac:	8e 31       	cpi	r24, 0x1E	; 30
    3aae:	b9 f6       	brne	.-82     	; 0x3a5e <LearnToFly()+0x38>
    3ab0:	63 e2       	ldi	r22, 0x23	; 35
    3ab2:	8b e4       	ldi	r24, 0x4B	; 75
    3ab4:	9e e6       	ldi	r25, 0x6E	; 110
    3ab6:	0e 94 24 06 	call	0xc48	; 0xc48 <progBlingBlingColoring(unsigned int, unsigned char)>
    3aba:	d1 cf       	rjmp	.-94     	; 0x3a5e <LearnToFly()+0x38>
    3abc:	87 33       	cpi	r24, 0x37	; 55
    3abe:	09 f4       	brne	.+2      	; 0x3ac2 <LearnToFly()+0x9c>
    3ac0:	67 c0       	rjmp	.+206    	; 0x3b90 <LearnToFly()+0x16a>
    3ac2:	84 36       	cpi	r24, 0x64	; 100
    3ac4:	09 f4       	brne	.+2      	; 0x3ac8 <LearnToFly()+0xa2>
    3ac6:	68 c0       	rjmp	.+208    	; 0x3b98 <LearnToFly()+0x172>
    3ac8:	82 33       	cpi	r24, 0x32	; 50
    3aca:	49 f6       	brne	.-110    	; 0x3a5e <LearnToFly()+0x38>
    3acc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3ad0:	7c 01       	movw	r14, r24
    3ad2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3ad6:	8c 01       	movw	r16, r24
    3ad8:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3adc:	9c 01       	movw	r18, r24
    3ade:	4b e4       	ldi	r20, 0x4B	; 75
    3ae0:	50 e0       	ldi	r21, 0x00	; 0
    3ae2:	67 e3       	ldi	r22, 0x37	; 55
    3ae4:	86 e2       	ldi	r24, 0x26	; 38
    3ae6:	97 e3       	ldi	r25, 0x37	; 55
    3ae8:	47 c0       	rjmp	.+142    	; 0x3b78 <LearnToFly()+0x152>
    3aea:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    3aee:	7c 01       	movw	r14, r24
    3af0:	65 e4       	ldi	r22, 0x45	; 69
    3af2:	71 e0       	ldi	r23, 0x01	; 1
    3af4:	ce 01       	movw	r24, r28
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    3afc:	02 e0       	ldi	r16, 0x02	; 2
    3afe:	97 01       	movw	r18, r14
    3b00:	4b e4       	ldi	r20, 0x4B	; 75
    3b02:	50 e0       	ldi	r21, 0x00	; 0
    3b04:	6c e6       	ldi	r22, 0x6C	; 108
    3b06:	75 e3       	ldi	r23, 0x35	; 53
    3b08:	ce 01       	movw	r24, r28
    3b0a:	01 96       	adiw	r24, 0x01	; 1
    3b0c:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3b10:	ce 01       	movw	r24, r28
    3b12:	01 96       	adiw	r24, 0x01	; 1
    3b14:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    3b18:	a2 cf       	rjmp	.-188    	; 0x3a5e <LearnToFly()+0x38>
    3b1a:	45 e0       	ldi	r20, 0x05	; 5
    3b1c:	68 eb       	ldi	r22, 0xB8	; 184
    3b1e:	71 e0       	ldi	r23, 0x01	; 1
    3b20:	83 e9       	ldi	r24, 0x93	; 147
    3b22:	9b e1       	ldi	r25, 0x1B	; 27
    3b24:	0e 94 87 08 	call	0x110e	; 0x110e <progStern(unsigned int, int, unsigned char)>
    3b28:	9a cf       	rjmp	.-204    	; 0x3a5e <LearnToFly()+0x38>
    3b2a:	6a e0       	ldi	r22, 0x0A	; 10
    3b2c:	8b e4       	ldi	r24, 0x4B	; 75
    3b2e:	9e e6       	ldi	r25, 0x6E	; 110
    3b30:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    3b34:	94 cf       	rjmp	.-216    	; 0x3a5e <LearnToFly()+0x38>
    3b36:	64 e1       	ldi	r22, 0x14	; 20
    3b38:	86 e2       	ldi	r24, 0x26	; 38
    3b3a:	97 e3       	ldi	r25, 0x37	; 55
    3b3c:	0e 94 d4 09 	call	0x13a8	; 0x13a8 <progStern(unsigned int, unsigned char)>
    3b40:	8e cf       	rjmp	.-228    	; 0x3a5e <LearnToFly()+0x38>
    3b42:	49 ea       	ldi	r20, 0xA9	; 169
    3b44:	51 e0       	ldi	r21, 0x01	; 1
    3b46:	69 e1       	ldi	r22, 0x19	; 25
    3b48:	8b e4       	ldi	r24, 0x4B	; 75
    3b4a:	9e e6       	ldi	r25, 0x6E	; 110
    3b4c:	0e 94 6f 0a 	call	0x14de	; 0x14de <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3b50:	86 cf       	rjmp	.-244    	; 0x3a5e <LearnToFly()+0x38>
    3b52:	4e e1       	ldi	r20, 0x1E	; 30
    3b54:	65 e0       	ldi	r22, 0x05	; 5
    3b56:	80 e3       	ldi	r24, 0x30	; 48
    3b58:	95 e7       	ldi	r25, 0x75	; 117
    3b5a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3b5e:	7f cf       	rjmp	.-258    	; 0x3a5e <LearnToFly()+0x38>
    3b60:	ee 24       	eor	r14, r14
    3b62:	ea 94       	dec	r14
    3b64:	f1 2c       	mov	r15, r1
    3b66:	0f ef       	ldi	r16, 0xFF	; 255
    3b68:	10 e0       	ldi	r17, 0x00	; 0
    3b6a:	2f ef       	ldi	r18, 0xFF	; 255
    3b6c:	30 e0       	ldi	r19, 0x00	; 0
    3b6e:	4b e4       	ldi	r20, 0x4B	; 75
    3b70:	50 e0       	ldi	r21, 0x00	; 0
    3b72:	68 e2       	ldi	r22, 0x28	; 40
    3b74:	89 ec       	ldi	r24, 0xC9	; 201
    3b76:	9d e0       	ldi	r25, 0x0D	; 13
    3b78:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3b7c:	70 cf       	rjmp	.-288    	; 0x3a5e <LearnToFly()+0x38>
    3b7e:	49 ea       	ldi	r20, 0xA9	; 169
    3b80:	51 e0       	ldi	r21, 0x01	; 1
    3b82:	6d e2       	ldi	r22, 0x2D	; 45
    3b84:	84 cf       	rjmp	.-248    	; 0x3a8e <LearnToFly()+0x68>
    3b86:	42 e3       	ldi	r20, 0x32	; 50
    3b88:	65 e0       	ldi	r22, 0x05	; 5
    3b8a:	88 eb       	ldi	r24, 0xB8	; 184
    3b8c:	92 e5       	ldi	r25, 0x52	; 82
    3b8e:	e5 cf       	rjmp	.-54     	; 0x3b5a <LearnToFly()+0x134>
    3b90:	64 e6       	ldi	r22, 0x64	; 100
    3b92:	8f ef       	ldi	r24, 0xFF	; 255
    3b94:	9f ef       	ldi	r25, 0xFF	; 255
    3b96:	8f cf       	rjmp	.-226    	; 0x3ab6 <LearnToFly()+0x90>
    3b98:	60 e0       	ldi	r22, 0x00	; 0
    3b9a:	8d e3       	ldi	r24, 0x3D	; 61
    3b9c:	90 e1       	ldi	r25, 0x10	; 16
    3b9e:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	92 dd       	rcall	.-1244   	; 0x36ca <switchToSong(unsigned char)>
    3ba6:	5b cf       	rjmp	.-330    	; 0x3a5e <LearnToFly()+0x38>

00003ba8 <Castle()>:
    3ba8:	ef 92       	push	r14
    3baa:	ff 92       	push	r15
    3bac:	0f 93       	push	r16
    3bae:	1f 93       	push	r17
    3bb0:	cf 93       	push	r28
    3bb2:	df 93       	push	r29
    3bb4:	00 d0       	rcall	.+0      	; 0x3bb6 <Castle()+0xe>
    3bb6:	00 d0       	rcall	.+0      	; 0x3bb8 <Castle()+0x10>
    3bb8:	00 d0       	rcall	.+0      	; 0x3bba <Castle()+0x12>
    3bba:	1f 92       	push	r1
    3bbc:	cd b7       	in	r28, 0x3d	; 61
    3bbe:	de b7       	in	r29, 0x3e	; 62
    3bc0:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    3bc4:	82 33       	cpi	r24, 0x32	; 50
    3bc6:	09 f4       	brne	.+2      	; 0x3bca <Castle()+0x22>
    3bc8:	e9 c0       	rjmp	.+466    	; 0x3d9c <Castle()+0x1f4>
    3bca:	08 f0       	brcs	.+2      	; 0x3bce <Castle()+0x26>
    3bcc:	49 c0       	rjmp	.+146    	; 0x3c60 <Castle()+0xb8>
    3bce:	84 31       	cpi	r24, 0x14	; 20
    3bd0:	09 f4       	brne	.+2      	; 0x3bd4 <Castle()+0x2c>
    3bd2:	c6 c0       	rjmp	.+396    	; 0x3d60 <Castle()+0x1b8>
    3bd4:	10 f5       	brcc	.+68     	; 0x3c1a <Castle()+0x72>
    3bd6:	85 30       	cpi	r24, 0x05	; 5
    3bd8:	09 f4       	brne	.+2      	; 0x3bdc <Castle()+0x34>
    3bda:	b4 c0       	rjmp	.+360    	; 0x3d44 <Castle()+0x19c>
    3bdc:	98 f4       	brcc	.+38     	; 0x3c04 <Castle()+0x5c>
    3bde:	88 23       	and	r24, r24
    3be0:	09 f4       	brne	.+2      	; 0x3be4 <Castle()+0x3c>
    3be2:	92 c0       	rjmp	.+292    	; 0x3d08 <Castle()+0x160>
    3be4:	81 30       	cpi	r24, 0x01	; 1
    3be6:	09 f4       	brne	.+2      	; 0x3bea <Castle()+0x42>
    3be8:	a7 c0       	rjmp	.+334    	; 0x3d38 <Castle()+0x190>
    3bea:	27 96       	adiw	r28, 0x07	; 7
    3bec:	0f b6       	in	r0, 0x3f	; 63
    3bee:	f8 94       	cli
    3bf0:	de bf       	out	0x3e, r29	; 62
    3bf2:	0f be       	out	0x3f, r0	; 63
    3bf4:	cd bf       	out	0x3d, r28	; 61
    3bf6:	df 91       	pop	r29
    3bf8:	cf 91       	pop	r28
    3bfa:	1f 91       	pop	r17
    3bfc:	0f 91       	pop	r16
    3bfe:	ff 90       	pop	r15
    3c00:	ef 90       	pop	r14
    3c02:	08 95       	ret
    3c04:	8a 30       	cpi	r24, 0x0A	; 10
    3c06:	09 f4       	brne	.+2      	; 0x3c0a <Castle()+0x62>
    3c08:	a5 c0       	rjmp	.+330    	; 0x3d54 <Castle()+0x1ac>
    3c0a:	8f 30       	cpi	r24, 0x0F	; 15
    3c0c:	71 f7       	brne	.-36     	; 0x3bea <Castle()+0x42>
    3c0e:	64 e1       	ldi	r22, 0x14	; 20
    3c10:	87 ee       	ldi	r24, 0xE7	; 231
    3c12:	90 e4       	ldi	r25, 0x40	; 64
    3c14:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    3c18:	e8 cf       	rjmp	.-48     	; 0x3bea <Castle()+0x42>
    3c1a:	83 32       	cpi	r24, 0x23	; 35
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <Castle()+0x78>
    3c1e:	b6 c0       	rjmp	.+364    	; 0x3d8c <Castle()+0x1e4>
    3c20:	b0 f4       	brcc	.+44     	; 0x3c4e <Castle()+0xa6>
    3c22:	89 31       	cpi	r24, 0x19	; 25
    3c24:	09 f4       	brne	.+2      	; 0x3c28 <Castle()+0x80>
    3c26:	ac c0       	rjmp	.+344    	; 0x3d80 <Castle()+0x1d8>
    3c28:	8e 31       	cpi	r24, 0x1E	; 30
    3c2a:	f9 f6       	brne	.-66     	; 0x3bea <Castle()+0x42>
    3c2c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3c30:	7c 01       	movw	r14, r24
    3c32:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3c36:	8c 01       	movw	r16, r24
    3c38:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3c3c:	9c 01       	movw	r18, r24
    3c3e:	42 e3       	ldi	r20, 0x32	; 50
    3c40:	50 e0       	ldi	r21, 0x00	; 0
    3c42:	63 e2       	ldi	r22, 0x23	; 35
    3c44:	86 e3       	ldi	r24, 0x36	; 54
    3c46:	97 e0       	ldi	r25, 0x07	; 7
    3c48:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3c4c:	ce cf       	rjmp	.-100    	; 0x3bea <Castle()+0x42>
    3c4e:	88 32       	cpi	r24, 0x28	; 40
    3c50:	09 f4       	brne	.+2      	; 0x3c54 <Castle()+0xac>
    3c52:	a2 c0       	rjmp	.+324    	; 0x3d98 <Castle()+0x1f0>
    3c54:	8d 32       	cpi	r24, 0x2D	; 45
    3c56:	49 f6       	brne	.-110    	; 0x3bea <Castle()+0x42>
    3c58:	62 e3       	ldi	r22, 0x32	; 50
    3c5a:	8b e7       	ldi	r24, 0x7B	; 123
    3c5c:	92 e3       	ldi	r25, 0x32	; 50
    3c5e:	da cf       	rjmp	.-76     	; 0x3c14 <Castle()+0x6c>
    3c60:	86 34       	cpi	r24, 0x46	; 70
    3c62:	09 f4       	brne	.+2      	; 0x3c66 <Castle()+0xbe>
    3c64:	b6 c0       	rjmp	.+364    	; 0x3dd2 <Castle()+0x22a>
    3c66:	50 f5       	brcc	.+84     	; 0x3cbc <Castle()+0x114>
    3c68:	8a 33       	cpi	r24, 0x3A	; 58
    3c6a:	09 f4       	brne	.+2      	; 0x3c6e <Castle()+0xc6>
    3c6c:	a4 c0       	rjmp	.+328    	; 0x3db6 <Castle()+0x20e>
    3c6e:	98 f4       	brcc	.+38     	; 0x3c96 <Castle()+0xee>
    3c70:	87 33       	cpi	r24, 0x37	; 55
    3c72:	09 f4       	brne	.+2      	; 0x3c76 <Castle()+0xce>
    3c74:	98 c0       	rjmp	.+304    	; 0x3da6 <Castle()+0x1fe>
    3c76:	88 33       	cpi	r24, 0x38	; 56
    3c78:	09 f0       	breq	.+2      	; 0x3c7c <Castle()+0xd4>
    3c7a:	b7 cf       	rjmp	.-146    	; 0x3bea <Castle()+0x42>
    3c7c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3c80:	7c 01       	movw	r14, r24
    3c82:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3c86:	8c 01       	movw	r16, r24
    3c88:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3c8c:	9c 01       	movw	r18, r24
    3c8e:	42 e3       	ldi	r20, 0x32	; 50
    3c90:	50 e0       	ldi	r21, 0x00	; 0
    3c92:	6a e3       	ldi	r22, 0x3A	; 58
    3c94:	d7 cf       	rjmp	.-82     	; 0x3c44 <Castle()+0x9c>
    3c96:	8c 33       	cpi	r24, 0x3C	; 60
    3c98:	09 f4       	brne	.+2      	; 0x3c9c <Castle()+0xf4>
    3c9a:	93 c0       	rjmp	.+294    	; 0x3dc2 <Castle()+0x21a>
    3c9c:	81 34       	cpi	r24, 0x41	; 65
    3c9e:	09 f0       	breq	.+2      	; 0x3ca2 <Castle()+0xfa>
    3ca0:	a4 cf       	rjmp	.-184    	; 0x3bea <Castle()+0x42>
    3ca2:	ee 24       	eor	r14, r14
    3ca4:	ea 94       	dec	r14
    3ca6:	f1 2c       	mov	r15, r1
    3ca8:	0f ef       	ldi	r16, 0xFF	; 255
    3caa:	10 e0       	ldi	r17, 0x00	; 0
    3cac:	2f ef       	ldi	r18, 0xFF	; 255
    3cae:	30 e0       	ldi	r19, 0x00	; 0
    3cb0:	42 e3       	ldi	r20, 0x32	; 50
    3cb2:	50 e0       	ldi	r21, 0x00	; 0
    3cb4:	66 e4       	ldi	r22, 0x46	; 70
    3cb6:	8c e6       	ldi	r24, 0x6C	; 108
    3cb8:	9e e0       	ldi	r25, 0x0E	; 14
    3cba:	c6 cf       	rjmp	.-116    	; 0x3c48 <Castle()+0xa0>
    3cbc:	85 35       	cpi	r24, 0x55	; 85
    3cbe:	09 f4       	brne	.+2      	; 0x3cc2 <Castle()+0x11a>
    3cc0:	9d c0       	rjmp	.+314    	; 0x3dfc <Castle()+0x254>
    3cc2:	98 f4       	brcc	.+38     	; 0x3cea <Castle()+0x142>
    3cc4:	8b 34       	cpi	r24, 0x4B	; 75
    3cc6:	09 f4       	brne	.+2      	; 0x3cca <Castle()+0x122>
    3cc8:	93 c0       	rjmp	.+294    	; 0x3df0 <Castle()+0x248>
    3cca:	80 35       	cpi	r24, 0x50	; 80
    3ccc:	09 f0       	breq	.+2      	; 0x3cd0 <Castle()+0x128>
    3cce:	8d cf       	rjmp	.-230    	; 0x3bea <Castle()+0x42>
    3cd0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3cd4:	7c 01       	movw	r14, r24
    3cd6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3cda:	8c 01       	movw	r16, r24
    3cdc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3ce0:	9c 01       	movw	r18, r24
    3ce2:	42 e3       	ldi	r20, 0x32	; 50
    3ce4:	50 e0       	ldi	r21, 0x00	; 0
    3ce6:	65 e5       	ldi	r22, 0x55	; 85
    3ce8:	e6 cf       	rjmp	.-52     	; 0x3cb6 <Castle()+0x10e>
    3cea:	8f 35       	cpi	r24, 0x5F	; 95
    3cec:	09 f4       	brne	.+2      	; 0x3cf0 <Castle()+0x148>
    3cee:	8d c0       	rjmp	.+282    	; 0x3e0a <Castle()+0x262>
    3cf0:	84 36       	cpi	r24, 0x64	; 100
    3cf2:	09 f4       	brne	.+2      	; 0x3cf6 <Castle()+0x14e>
    3cf4:	96 c0       	rjmp	.+300    	; 0x3e22 <Castle()+0x27a>
    3cf6:	8a 35       	cpi	r24, 0x5A	; 90
    3cf8:	09 f0       	breq	.+2      	; 0x3cfc <Castle()+0x154>
    3cfa:	77 cf       	rjmp	.-274    	; 0x3bea <Castle()+0x42>
    3cfc:	42 ec       	ldi	r20, 0xC2	; 194
    3cfe:	51 e0       	ldi	r21, 0x01	; 1
    3d00:	6f e5       	ldi	r22, 0x5F	; 95
    3d02:	87 ec       	ldi	r24, 0xC7	; 199
    3d04:	9f e6       	ldi	r25, 0x6F	; 111
    3d06:	23 c0       	rjmp	.+70     	; 0x3d4e <Castle()+0x1a6>
    3d08:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    3d0c:	7c 01       	movw	r14, r24
    3d0e:	62 e6       	ldi	r22, 0x62	; 98
    3d10:	71 e0       	ldi	r23, 0x01	; 1
    3d12:	ce 01       	movw	r24, r28
    3d14:	01 96       	adiw	r24, 0x01	; 1
    3d16:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    3d1a:	01 e0       	ldi	r16, 0x01	; 1
    3d1c:	97 01       	movw	r18, r14
    3d1e:	44 e6       	ldi	r20, 0x64	; 100
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	6b e7       	ldi	r22, 0x7B	; 123
    3d24:	72 e3       	ldi	r23, 0x32	; 50
    3d26:	ce 01       	movw	r24, r28
    3d28:	01 96       	adiw	r24, 0x01	; 1
    3d2a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3d2e:	ce 01       	movw	r24, r28
    3d30:	01 96       	adiw	r24, 0x01	; 1
    3d32:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    3d36:	59 cf       	rjmp	.-334    	; 0x3bea <Castle()+0x42>
    3d38:	65 e0       	ldi	r22, 0x05	; 5
    3d3a:	89 ed       	ldi	r24, 0xD9	; 217
    3d3c:	9c e1       	ldi	r25, 0x1C	; 28
    3d3e:	0e 94 24 06 	call	0xc48	; 0xc48 <progBlingBlingColoring(unsigned int, unsigned char)>
    3d42:	53 cf       	rjmp	.-346    	; 0x3bea <Castle()+0x42>
    3d44:	4d e9       	ldi	r20, 0x9D	; 157
    3d46:	53 e0       	ldi	r21, 0x03	; 3
    3d48:	6a e0       	ldi	r22, 0x0A	; 10
    3d4a:	89 ed       	ldi	r24, 0xD9	; 217
    3d4c:	9c e1       	ldi	r25, 0x1C	; 28
    3d4e:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3d52:	4b cf       	rjmp	.-362    	; 0x3bea <Castle()+0x42>
    3d54:	6f e0       	ldi	r22, 0x0F	; 15
    3d56:	82 e6       	ldi	r24, 0x62	; 98
    3d58:	93 e7       	ldi	r25, 0x73	; 115
    3d5a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    3d5e:	45 cf       	rjmp	.-374    	; 0x3bea <Castle()+0x42>
    3d60:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    3d64:	59 e1       	ldi	r21, 0x19	; 25
    3d66:	e5 2e       	mov	r14, r21
    3d68:	8c 01       	movw	r16, r24
    3d6a:	26 e3       	ldi	r18, 0x36	; 54
    3d6c:	37 e0       	ldi	r19, 0x07	; 7
    3d6e:	45 e4       	ldi	r20, 0x45	; 69
    3d70:	51 e0       	ldi	r21, 0x01	; 1
    3d72:	66 e0       	ldi	r22, 0x06	; 6
    3d74:	70 e0       	ldi	r23, 0x00	; 0
    3d76:	8e e6       	ldi	r24, 0x6E	; 110
    3d78:	99 e0       	ldi	r25, 0x09	; 9
    3d7a:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    3d7e:	35 cf       	rjmp	.-406    	; 0x3bea <Castle()+0x42>
    3d80:	42 ec       	ldi	r20, 0xC2	; 194
    3d82:	51 e0       	ldi	r21, 0x01	; 1
    3d84:	6e e1       	ldi	r22, 0x1E	; 30
    3d86:	8b e7       	ldi	r24, 0x7B	; 123
    3d88:	92 e3       	ldi	r25, 0x32	; 50
    3d8a:	e1 cf       	rjmp	.-62     	; 0x3d4e <Castle()+0x1a6>
    3d8c:	42 ec       	ldi	r20, 0xC2	; 194
    3d8e:	51 e0       	ldi	r21, 0x01	; 1
    3d90:	68 e2       	ldi	r22, 0x28	; 40
    3d92:	81 eb       	ldi	r24, 0xB1	; 177
    3d94:	99 e3       	ldi	r25, 0x39	; 57
    3d96:	db cf       	rjmp	.-74     	; 0x3d4e <Castle()+0x1a6>
    3d98:	6d e2       	ldi	r22, 0x2D	; 45
    3d9a:	dd cf       	rjmp	.-70     	; 0x3d56 <Castle()+0x1ae>
    3d9c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    3da0:	47 e3       	ldi	r20, 0x37	; 55
    3da2:	e4 2e       	mov	r14, r20
    3da4:	e1 cf       	rjmp	.-62     	; 0x3d68 <Castle()+0x1c0>
    3da6:	42 ec       	ldi	r20, 0xC2	; 194
    3da8:	51 e0       	ldi	r21, 0x01	; 1
    3daa:	68 e3       	ldi	r22, 0x38	; 56
    3dac:	8b e7       	ldi	r24, 0x7B	; 123
    3dae:	92 e3       	ldi	r25, 0x32	; 50
    3db0:	0e 94 6f 0a 	call	0x14de	; 0x14de <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3db4:	1a cf       	rjmp	.-460    	; 0x3bea <Castle()+0x42>
    3db6:	42 ec       	ldi	r20, 0xC2	; 194
    3db8:	51 e0       	ldi	r21, 0x01	; 1
    3dba:	6c e3       	ldi	r22, 0x3C	; 60
    3dbc:	81 eb       	ldi	r24, 0xB1	; 177
    3dbe:	99 e3       	ldi	r25, 0x39	; 57
    3dc0:	f7 cf       	rjmp	.-18     	; 0x3db0 <Castle()+0x208>
    3dc2:	41 e4       	ldi	r20, 0x41	; 65
    3dc4:	6a e3       	ldi	r22, 0x3A	; 58
    3dc6:	77 e0       	ldi	r23, 0x07	; 7
    3dc8:	86 e8       	ldi	r24, 0x86	; 134
    3dca:	9d e4       	ldi	r25, 0x4D	; 77
    3dcc:	0e 94 87 08 	call	0x110e	; 0x110e <progStern(unsigned int, int, unsigned char)>
    3dd0:	0c cf       	rjmp	.-488    	; 0x3bea <Castle()+0x42>
    3dd2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3dd6:	7c 01       	movw	r14, r24
    3dd8:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3ddc:	8c 01       	movw	r16, r24
    3dde:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3de2:	9c 01       	movw	r18, r24
    3de4:	42 e3       	ldi	r20, 0x32	; 50
    3de6:	50 e0       	ldi	r21, 0x00	; 0
    3de8:	6b e4       	ldi	r22, 0x4B	; 75
    3dea:	80 e7       	ldi	r24, 0x70	; 112
    3dec:	97 e1       	ldi	r25, 0x17	; 23
    3dee:	2c cf       	rjmp	.-424    	; 0x3c48 <Castle()+0xa0>
    3df0:	40 e5       	ldi	r20, 0x50	; 80
    3df2:	6a e3       	ldi	r22, 0x3A	; 58
    3df4:	77 e0       	ldi	r23, 0x07	; 7
    3df6:	81 eb       	ldi	r24, 0xB1	; 177
    3df8:	99 e3       	ldi	r25, 0x39	; 57
    3dfa:	e8 cf       	rjmp	.-48     	; 0x3dcc <Castle()+0x224>
    3dfc:	4a e5       	ldi	r20, 0x5A	; 90
    3dfe:	65 e0       	ldi	r22, 0x05	; 5
    3e00:	82 e6       	ldi	r24, 0x62	; 98
    3e02:	93 e7       	ldi	r25, 0x73	; 115
    3e04:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3e08:	f0 ce       	rjmp	.-544    	; 0x3bea <Castle()+0x42>
    3e0a:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    3e0e:	29 e0       	ldi	r18, 0x09	; 9
    3e10:	e2 2e       	mov	r14, r18
    3e12:	8c 01       	movw	r16, r24
    3e14:	20 e6       	ldi	r18, 0x60	; 96
    3e16:	3a ee       	ldi	r19, 0xEA	; 234
    3e18:	45 e4       	ldi	r20, 0x45	; 69
    3e1a:	51 e0       	ldi	r21, 0x01	; 1
    3e1c:	64 e6       	ldi	r22, 0x64	; 100
    3e1e:	70 e0       	ldi	r23, 0x00	; 0
    3e20:	aa cf       	rjmp	.-172    	; 0x3d76 <Castle()+0x1ce>
    3e22:	60 e0       	ldi	r22, 0x00	; 0
    3e24:	8d e3       	ldi	r24, 0x3D	; 61
    3e26:	90 e1       	ldi	r25, 0x10	; 16
    3e28:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    3e2c:	80 e0       	ldi	r24, 0x00	; 0
    3e2e:	4d dc       	rcall	.-1894   	; 0x36ca <switchToSong(unsigned char)>
    3e30:	dc ce       	rjmp	.-584    	; 0x3bea <Castle()+0x42>

00003e32 <TooClose()>:
    3e32:	ef 92       	push	r14
    3e34:	ff 92       	push	r15
    3e36:	0f 93       	push	r16
    3e38:	1f 93       	push	r17
    3e3a:	cf 93       	push	r28
    3e3c:	df 93       	push	r29
    3e3e:	00 d0       	rcall	.+0      	; 0x3e40 <TooClose()+0xe>
    3e40:	00 d0       	rcall	.+0      	; 0x3e42 <TooClose()+0x10>
    3e42:	00 d0       	rcall	.+0      	; 0x3e44 <TooClose()+0x12>
    3e44:	1f 92       	push	r1
    3e46:	cd b7       	in	r28, 0x3d	; 61
    3e48:	de b7       	in	r29, 0x3e	; 62
    3e4a:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    3e4e:	8e 31       	cpi	r24, 0x1E	; 30
    3e50:	09 f4       	brne	.+2      	; 0x3e54 <TooClose()+0x22>
    3e52:	9f c0       	rjmp	.+318    	; 0x3f92 <TooClose()+0x160>
    3e54:	f0 f5       	brcc	.+124    	; 0x3ed2 <TooClose()+0xa0>
    3e56:	8a 30       	cpi	r24, 0x0A	; 10
    3e58:	09 f4       	brne	.+2      	; 0x3e5c <TooClose()+0x2a>
    3e5a:	7d c0       	rjmp	.+250    	; 0x3f56 <TooClose()+0x124>
    3e5c:	60 f5       	brcc	.+88     	; 0x3eb6 <TooClose()+0x84>
    3e5e:	82 30       	cpi	r24, 0x02	; 2
    3e60:	09 f4       	brne	.+2      	; 0x3e64 <TooClose()+0x32>
    3e62:	69 c0       	rjmp	.+210    	; 0x3f36 <TooClose()+0x104>
    3e64:	85 30       	cpi	r24, 0x05	; 5
    3e66:	09 f4       	brne	.+2      	; 0x3e6a <TooClose()+0x38>
    3e68:	6e c0       	rjmp	.+220    	; 0x3f46 <TooClose()+0x114>
    3e6a:	81 11       	cpse	r24, r1
    3e6c:	17 c0       	rjmp	.+46     	; 0x3e9c <TooClose()+0x6a>
    3e6e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    3e72:	7c 01       	movw	r14, r24
    3e74:	63 e7       	ldi	r22, 0x73	; 115
    3e76:	71 e0       	ldi	r23, 0x01	; 1
    3e78:	ce 01       	movw	r24, r28
    3e7a:	01 96       	adiw	r24, 0x01	; 1
    3e7c:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    3e80:	02 e0       	ldi	r16, 0x02	; 2
    3e82:	97 01       	movw	r18, r14
    3e84:	4b e4       	ldi	r20, 0x4B	; 75
    3e86:	50 e0       	ldi	r21, 0x00	; 0
    3e88:	61 e8       	ldi	r22, 0x81	; 129
    3e8a:	7e e2       	ldi	r23, 0x2E	; 46
    3e8c:	ce 01       	movw	r24, r28
    3e8e:	01 96       	adiw	r24, 0x01	; 1
    3e90:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3e94:	ce 01       	movw	r24, r28
    3e96:	01 96       	adiw	r24, 0x01	; 1
    3e98:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    3e9c:	27 96       	adiw	r28, 0x07	; 7
    3e9e:	0f b6       	in	r0, 0x3f	; 63
    3ea0:	f8 94       	cli
    3ea2:	de bf       	out	0x3e, r29	; 62
    3ea4:	0f be       	out	0x3f, r0	; 63
    3ea6:	cd bf       	out	0x3d, r28	; 61
    3ea8:	df 91       	pop	r29
    3eaa:	cf 91       	pop	r28
    3eac:	1f 91       	pop	r17
    3eae:	0f 91       	pop	r16
    3eb0:	ff 90       	pop	r15
    3eb2:	ef 90       	pop	r14
    3eb4:	08 95       	ret
    3eb6:	84 31       	cpi	r24, 0x14	; 20
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <TooClose()+0x8a>
    3eba:	55 c0       	rjmp	.+170    	; 0x3f66 <TooClose()+0x134>
    3ebc:	89 31       	cpi	r24, 0x19	; 25
    3ebe:	09 f4       	brne	.+2      	; 0x3ec2 <TooClose()+0x90>
    3ec0:	58 c0       	rjmp	.+176    	; 0x3f72 <TooClose()+0x140>
    3ec2:	8f 30       	cpi	r24, 0x0F	; 15
    3ec4:	59 f7       	brne	.-42     	; 0x3e9c <TooClose()+0x6a>
    3ec6:	46 eb       	ldi	r20, 0xB6	; 182
    3ec8:	53 e0       	ldi	r21, 0x03	; 3
    3eca:	64 e1       	ldi	r22, 0x14	; 20
    3ecc:	89 e7       	ldi	r24, 0x79	; 121
    3ece:	9b e3       	ldi	r25, 0x3B	; 59
    3ed0:	37 c0       	rjmp	.+110    	; 0x3f40 <TooClose()+0x10e>
    3ed2:	82 33       	cpi	r24, 0x32	; 50
    3ed4:	09 f4       	brne	.+2      	; 0x3ed8 <TooClose()+0xa6>
    3ed6:	72 c0       	rjmp	.+228    	; 0x3fbc <TooClose()+0x18a>
    3ed8:	b8 f4       	brcc	.+46     	; 0x3f08 <TooClose()+0xd6>
    3eda:	88 32       	cpi	r24, 0x28	; 40
    3edc:	09 f4       	brne	.+2      	; 0x3ee0 <TooClose()+0xae>
    3ede:	61 c0       	rjmp	.+194    	; 0x3fa2 <TooClose()+0x170>
    3ee0:	8d 32       	cpi	r24, 0x2D	; 45
    3ee2:	09 f4       	brne	.+2      	; 0x3ee6 <TooClose()+0xb4>
    3ee4:	64 c0       	rjmp	.+200    	; 0x3fae <TooClose()+0x17c>
    3ee6:	83 32       	cpi	r24, 0x23	; 35
    3ee8:	c9 f6       	brne	.-78     	; 0x3e9c <TooClose()+0x6a>
    3eea:	ee 24       	eor	r14, r14
    3eec:	ea 94       	dec	r14
    3eee:	f1 2c       	mov	r15, r1
    3ef0:	0f ef       	ldi	r16, 0xFF	; 255
    3ef2:	10 e0       	ldi	r17, 0x00	; 0
    3ef4:	2f ef       	ldi	r18, 0xFF	; 255
    3ef6:	30 e0       	ldi	r19, 0x00	; 0
    3ef8:	4b e4       	ldi	r20, 0x4B	; 75
    3efa:	50 e0       	ldi	r21, 0x00	; 0
    3efc:	68 e2       	ldi	r22, 0x28	; 40
    3efe:	89 e7       	ldi	r24, 0x79	; 121
    3f00:	9b e3       	ldi	r25, 0x3B	; 59
    3f02:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3f06:	ca cf       	rjmp	.-108    	; 0x3e9c <TooClose()+0x6a>
    3f08:	8c 33       	cpi	r24, 0x3C	; 60
    3f0a:	09 f4       	brne	.+2      	; 0x3f0e <TooClose()+0xdc>
    3f0c:	5d c0       	rjmp	.+186    	; 0x3fc8 <TooClose()+0x196>
    3f0e:	84 36       	cpi	r24, 0x64	; 100
    3f10:	09 f4       	brne	.+2      	; 0x3f14 <TooClose()+0xe2>
    3f12:	60 c0       	rjmp	.+192    	; 0x3fd4 <TooClose()+0x1a2>
    3f14:	87 33       	cpi	r24, 0x37	; 55
    3f16:	11 f6       	brne	.-124    	; 0x3e9c <TooClose()+0x6a>
    3f18:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3f1c:	7c 01       	movw	r14, r24
    3f1e:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3f22:	8c 01       	movw	r16, r24
    3f24:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    3f28:	9c 01       	movw	r18, r24
    3f2a:	4b e4       	ldi	r20, 0x4B	; 75
    3f2c:	50 e0       	ldi	r21, 0x00	; 0
    3f2e:	6c e3       	ldi	r22, 0x3C	; 60
    3f30:	80 eb       	ldi	r24, 0xB0	; 176
    3f32:	9d e1       	ldi	r25, 0x1D	; 29
    3f34:	e6 cf       	rjmp	.-52     	; 0x3f02 <TooClose()+0xd0>
    3f36:	46 eb       	ldi	r20, 0xB6	; 182
    3f38:	53 e0       	ldi	r21, 0x03	; 3
    3f3a:	65 e0       	ldi	r22, 0x05	; 5
    3f3c:	82 e7       	ldi	r24, 0x72	; 114
    3f3e:	94 e6       	ldi	r25, 0x64	; 100
    3f40:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    3f44:	ab cf       	rjmp	.-170    	; 0x3e9c <TooClose()+0x6a>
    3f46:	4b ed       	ldi	r20, 0xDB	; 219
    3f48:	51 e0       	ldi	r21, 0x01	; 1
    3f4a:	6a e0       	ldi	r22, 0x0A	; 10
    3f4c:	84 e8       	ldi	r24, 0x84	; 132
    3f4e:	92 eb       	ldi	r25, 0xB2	; 178
    3f50:	0e 94 6f 0a 	call	0x14de	; 0x14de <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3f54:	a3 cf       	rjmp	.-186    	; 0x3e9c <TooClose()+0x6a>
    3f56:	46 eb       	ldi	r20, 0xB6	; 182
    3f58:	53 e0       	ldi	r21, 0x03	; 3
    3f5a:	6f e0       	ldi	r22, 0x0F	; 15
    3f5c:	8b e0       	ldi	r24, 0x0B	; 11
    3f5e:	97 e7       	ldi	r25, 0x77	; 119
    3f60:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3f64:	9b cf       	rjmp	.-202    	; 0x3e9c <TooClose()+0x6a>
    3f66:	4b ed       	ldi	r20, 0xDB	; 219
    3f68:	51 e0       	ldi	r21, 0x01	; 1
    3f6a:	69 e1       	ldi	r22, 0x19	; 25
    3f6c:	8b e0       	ldi	r24, 0x0B	; 11
    3f6e:	97 e7       	ldi	r25, 0x77	; 119
    3f70:	ef cf       	rjmp	.-34     	; 0x3f50 <TooClose()+0x11e>
    3f72:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    3f76:	2e e1       	ldi	r18, 0x1E	; 30
    3f78:	e2 2e       	mov	r14, r18
    3f7a:	8c 01       	movw	r16, r24
    3f7c:	2b e2       	ldi	r18, 0x2B	; 43
    3f7e:	36 e1       	ldi	r19, 0x16	; 22
    3f80:	4b ed       	ldi	r20, 0xDB	; 219
    3f82:	51 e0       	ldi	r21, 0x01	; 1
    3f84:	6a e0       	ldi	r22, 0x0A	; 10
    3f86:	70 e0       	ldi	r23, 0x00	; 0
    3f88:	88 e9       	ldi	r24, 0x98	; 152
    3f8a:	99 e0       	ldi	r25, 0x09	; 9
    3f8c:	0e 94 d3 0f 	call	0x1fa6	; 0x1fa6 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    3f90:	85 cf       	rjmp	.-246    	; 0x3e9c <TooClose()+0x6a>
    3f92:	43 e2       	ldi	r20, 0x23	; 35
    3f94:	6c e6       	ldi	r22, 0x6C	; 108
    3f96:	77 e0       	ldi	r23, 0x07	; 7
    3f98:	87 ec       	ldi	r24, 0xC7	; 199
    3f9a:	90 e6       	ldi	r25, 0x60	; 96
    3f9c:	0e 94 87 08 	call	0x110e	; 0x110e <progStern(unsigned int, int, unsigned char)>
    3fa0:	7d cf       	rjmp	.-262    	; 0x3e9c <TooClose()+0x6a>
    3fa2:	48 eb       	ldi	r20, 0xB8	; 184
    3fa4:	53 e0       	ldi	r21, 0x03	; 3
    3fa6:	6d e2       	ldi	r22, 0x2D	; 45
    3fa8:	89 e7       	ldi	r24, 0x79	; 121
    3faa:	9b e3       	ldi	r25, 0x3B	; 59
    3fac:	d9 cf       	rjmp	.-78     	; 0x3f60 <TooClose()+0x12e>
    3fae:	42 e3       	ldi	r20, 0x32	; 50
    3fb0:	65 e0       	ldi	r22, 0x05	; 5
    3fb2:	80 eb       	ldi	r24, 0xB0	; 176
    3fb4:	9d e1       	ldi	r25, 0x1D	; 29
    3fb6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3fba:	70 cf       	rjmp	.-288    	; 0x3e9c <TooClose()+0x6a>
    3fbc:	46 eb       	ldi	r20, 0xB6	; 182
    3fbe:	53 e0       	ldi	r21, 0x03	; 3
    3fc0:	67 e3       	ldi	r22, 0x37	; 55
    3fc2:	80 eb       	ldi	r24, 0xB0	; 176
    3fc4:	9d e1       	ldi	r25, 0x1D	; 29
    3fc6:	cc cf       	rjmp	.-104    	; 0x3f60 <TooClose()+0x12e>
    3fc8:	64 e6       	ldi	r22, 0x64	; 100
    3fca:	8f ef       	ldi	r24, 0xFF	; 255
    3fcc:	9f ef       	ldi	r25, 0xFF	; 255
    3fce:	0e 94 24 06 	call	0xc48	; 0xc48 <progBlingBlingColoring(unsigned int, unsigned char)>
    3fd2:	64 cf       	rjmp	.-312    	; 0x3e9c <TooClose()+0x6a>
    3fd4:	60 e0       	ldi	r22, 0x00	; 0
    3fd6:	8d e3       	ldi	r24, 0x3D	; 61
    3fd8:	90 e1       	ldi	r25, 0x10	; 16
    3fda:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    3fde:	80 e0       	ldi	r24, 0x00	; 0
    3fe0:	74 db       	rcall	.-2328   	; 0x36ca <switchToSong(unsigned char)>
    3fe2:	5c cf       	rjmp	.-328    	; 0x3e9c <TooClose()+0x6a>

00003fe4 <Pokerface()>:
    3fe4:	ef 92       	push	r14
    3fe6:	ff 92       	push	r15
    3fe8:	0f 93       	push	r16
    3fea:	1f 93       	push	r17
    3fec:	cf 93       	push	r28
    3fee:	df 93       	push	r29
    3ff0:	00 d0       	rcall	.+0      	; 0x3ff2 <Pokerface()+0xe>
    3ff2:	00 d0       	rcall	.+0      	; 0x3ff4 <Pokerface()+0x10>
    3ff4:	00 d0       	rcall	.+0      	; 0x3ff6 <Pokerface()+0x12>
    3ff6:	1f 92       	push	r1
    3ff8:	cd b7       	in	r28, 0x3d	; 61
    3ffa:	de b7       	in	r29, 0x3e	; 62
    3ffc:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    4000:	8e 31       	cpi	r24, 0x1E	; 30
    4002:	09 f4       	brne	.+2      	; 0x4006 <Pokerface()+0x22>
    4004:	af c0       	rjmp	.+350    	; 0x4164 <Pokerface()+0x180>
    4006:	a0 f5       	brcc	.+104    	; 0x4070 <Pokerface()+0x8c>
    4008:	85 30       	cpi	r24, 0x05	; 5
    400a:	09 f4       	brne	.+2      	; 0x400e <Pokerface()+0x2a>
    400c:	92 c0       	rjmp	.+292    	; 0x4132 <Pokerface()+0x14e>
    400e:	b8 f4       	brcc	.+46     	; 0x403e <Pokerface()+0x5a>
    4010:	81 30       	cpi	r24, 0x01	; 1
    4012:	09 f4       	brne	.+2      	; 0x4016 <Pokerface()+0x32>
    4014:	87 c0       	rjmp	.+270    	; 0x4124 <Pokerface()+0x140>
    4016:	08 f4       	brcc	.+2      	; 0x401a <Pokerface()+0x36>
    4018:	6d c0       	rjmp	.+218    	; 0x40f4 <Pokerface()+0x110>
    401a:	45 e0       	ldi	r20, 0x05	; 5
    401c:	64 e0       	ldi	r22, 0x04	; 4
    401e:	82 30       	cpi	r24, 0x02	; 2
    4020:	09 f4       	brne	.+2      	; 0x4024 <Pokerface()+0x40>
    4022:	82 c0       	rjmp	.+260    	; 0x4128 <Pokerface()+0x144>
    4024:	27 96       	adiw	r28, 0x07	; 7
    4026:	0f b6       	in	r0, 0x3f	; 63
    4028:	f8 94       	cli
    402a:	de bf       	out	0x3e, r29	; 62
    402c:	0f be       	out	0x3f, r0	; 63
    402e:	cd bf       	out	0x3d, r28	; 61
    4030:	df 91       	pop	r29
    4032:	cf 91       	pop	r28
    4034:	1f 91       	pop	r17
    4036:	0f 91       	pop	r16
    4038:	ff 90       	pop	r15
    403a:	ef 90       	pop	r14
    403c:	08 95       	ret
    403e:	8f 30       	cpi	r24, 0x0F	; 15
    4040:	09 f4       	brne	.+2      	; 0x4044 <Pokerface()+0x60>
    4042:	7b c0       	rjmp	.+246    	; 0x413a <Pokerface()+0x156>
    4044:	40 f4       	brcc	.+16     	; 0x4056 <Pokerface()+0x72>
    4046:	8a 30       	cpi	r24, 0x0A	; 10
    4048:	69 f7       	brne	.-38     	; 0x4024 <Pokerface()+0x40>
    404a:	6f e0       	ldi	r22, 0x0F	; 15
    404c:	86 e0       	ldi	r24, 0x06	; 6
    404e:	9f e3       	ldi	r25, 0x3F	; 63
    4050:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    4054:	e7 cf       	rjmp	.-50     	; 0x4024 <Pokerface()+0x40>
    4056:	84 31       	cpi	r24, 0x14	; 20
    4058:	09 f4       	brne	.+2      	; 0x405c <Pokerface()+0x78>
    405a:	73 c0       	rjmp	.+230    	; 0x4142 <Pokerface()+0x15e>
    405c:	44 ef       	ldi	r20, 0xF4	; 244
    405e:	51 e0       	ldi	r21, 0x01	; 1
    4060:	6e e1       	ldi	r22, 0x1E	; 30
    4062:	89 31       	cpi	r24, 0x19	; 25
    4064:	f9 f6       	brne	.-66     	; 0x4024 <Pokerface()+0x40>
    4066:	86 e0       	ldi	r24, 0x06	; 6
    4068:	9f e3       	ldi	r25, 0x3F	; 63
    406a:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    406e:	da cf       	rjmp	.-76     	; 0x4024 <Pokerface()+0x40>
    4070:	87 33       	cpi	r24, 0x37	; 55
    4072:	09 f4       	brne	.+2      	; 0x4076 <Pokerface()+0x92>
    4074:	8f c0       	rjmp	.+286    	; 0x4194 <Pokerface()+0x1b0>
    4076:	d0 f4       	brcc	.+52     	; 0x40ac <Pokerface()+0xc8>
    4078:	88 32       	cpi	r24, 0x28	; 40
    407a:	09 f4       	brne	.+2      	; 0x407e <Pokerface()+0x9a>
    407c:	78 c0       	rjmp	.+240    	; 0x416e <Pokerface()+0x18a>
    407e:	50 f4       	brcc	.+20     	; 0x4094 <Pokerface()+0xb0>
    4080:	44 ef       	ldi	r20, 0xF4	; 244
    4082:	51 e0       	ldi	r21, 0x01	; 1
    4084:	68 e2       	ldi	r22, 0x28	; 40
    4086:	83 32       	cpi	r24, 0x23	; 35
    4088:	69 f6       	brne	.-102    	; 0x4024 <Pokerface()+0x40>
    408a:	86 e0       	ldi	r24, 0x06	; 6
    408c:	9f e3       	ldi	r25, 0x3F	; 63
    408e:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4092:	c8 cf       	rjmp	.-112    	; 0x4024 <Pokerface()+0x40>
    4094:	8d 32       	cpi	r24, 0x2D	; 45
    4096:	09 f4       	brne	.+2      	; 0x409a <Pokerface()+0xb6>
    4098:	77 c0       	rjmp	.+238    	; 0x4188 <Pokerface()+0x1a4>
    409a:	82 33       	cpi	r24, 0x32	; 50
    409c:	19 f6       	brne	.-122    	; 0x4024 <Pokerface()+0x40>
    409e:	47 e3       	ldi	r20, 0x37	; 55
    40a0:	67 e0       	ldi	r22, 0x07	; 7
    40a2:	8d ef       	ldi	r24, 0xFD	; 253
    40a4:	9e e3       	ldi	r25, 0x3E	; 62
    40a6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    40aa:	bc cf       	rjmp	.-136    	; 0x4024 <Pokerface()+0x40>
    40ac:	81 34       	cpi	r24, 0x41	; 65
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <Pokerface()+0xce>
    40b0:	75 c0       	rjmp	.+234    	; 0x419c <Pokerface()+0x1b8>
    40b2:	90 f4       	brcc	.+36     	; 0x40d8 <Pokerface()+0xf4>
    40b4:	8c 33       	cpi	r24, 0x3C	; 60
    40b6:	09 f0       	breq	.+2      	; 0x40ba <Pokerface()+0xd6>
    40b8:	b5 cf       	rjmp	.-150    	; 0x4024 <Pokerface()+0x40>
    40ba:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    40be:	7c 01       	movw	r14, r24
    40c0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    40c4:	8c 01       	movw	r16, r24
    40c6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    40ca:	9c 01       	movw	r18, r24
    40cc:	4b e4       	ldi	r20, 0x4B	; 75
    40ce:	50 e0       	ldi	r21, 0x00	; 0
    40d0:	61 e4       	ldi	r22, 0x41	; 65
    40d2:	84 e4       	ldi	r24, 0x44	; 68
    40d4:	9f e2       	ldi	r25, 0x2F	; 47
    40d6:	43 c0       	rjmp	.+134    	; 0x415e <Pokerface()+0x17a>
    40d8:	86 34       	cpi	r24, 0x46	; 70
    40da:	09 f4       	brne	.+2      	; 0x40de <Pokerface()+0xfa>
    40dc:	64 c0       	rjmp	.+200    	; 0x41a6 <Pokerface()+0x1c2>
    40de:	84 36       	cpi	r24, 0x64	; 100
    40e0:	09 f0       	breq	.+2      	; 0x40e4 <Pokerface()+0x100>
    40e2:	a0 cf       	rjmp	.-192    	; 0x4024 <Pokerface()+0x40>
    40e4:	60 e0       	ldi	r22, 0x00	; 0
    40e6:	8d e3       	ldi	r24, 0x3D	; 61
    40e8:	90 e1       	ldi	r25, 0x10	; 16
    40ea:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    40ee:	80 e0       	ldi	r24, 0x00	; 0
    40f0:	ec da       	rcall	.-2600   	; 0x36ca <switchToSong(unsigned char)>
    40f2:	98 cf       	rjmp	.-208    	; 0x4024 <Pokerface()+0x40>
    40f4:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    40f8:	7c 01       	movw	r14, r24
    40fa:	6b e8       	ldi	r22, 0x8B	; 139
    40fc:	71 e0       	ldi	r23, 0x01	; 1
    40fe:	ce 01       	movw	r24, r28
    4100:	01 96       	adiw	r24, 0x01	; 1
    4102:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    4106:	01 e0       	ldi	r16, 0x01	; 1
    4108:	97 01       	movw	r18, r14
    410a:	4b e4       	ldi	r20, 0x4B	; 75
    410c:	50 e0       	ldi	r21, 0x00	; 0
    410e:	6e e0       	ldi	r22, 0x0E	; 14
    4110:	7d e3       	ldi	r23, 0x3D	; 61
    4112:	ce 01       	movw	r24, r28
    4114:	01 96       	adiw	r24, 0x01	; 1
    4116:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    411a:	ce 01       	movw	r24, r28
    411c:	01 96       	adiw	r24, 0x01	; 1
    411e:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    4122:	80 cf       	rjmp	.-256    	; 0x4024 <Pokerface()+0x40>
    4124:	42 e0       	ldi	r20, 0x02	; 2
    4126:	63 e0       	ldi	r22, 0x03	; 3
    4128:	83 e8       	ldi	r24, 0x83	; 131
    412a:	9f e1       	ldi	r25, 0x1F	; 31
    412c:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    4130:	79 cf       	rjmp	.-270    	; 0x4024 <Pokerface()+0x40>
    4132:	44 ef       	ldi	r20, 0xF4	; 244
    4134:	51 e0       	ldi	r21, 0x01	; 1
    4136:	6a e0       	ldi	r22, 0x0A	; 10
    4138:	96 cf       	rjmp	.-212    	; 0x4066 <Pokerface()+0x82>
    413a:	44 ef       	ldi	r20, 0xF4	; 244
    413c:	51 e0       	ldi	r21, 0x01	; 1
    413e:	64 e1       	ldi	r22, 0x14	; 20
    4140:	a4 cf       	rjmp	.-184    	; 0x408a <Pokerface()+0xa6>
    4142:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4146:	7c 01       	movw	r14, r24
    4148:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    414c:	8c 01       	movw	r16, r24
    414e:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4152:	9c 01       	movw	r18, r24
    4154:	4b e4       	ldi	r20, 0x4B	; 75
    4156:	50 e0       	ldi	r21, 0x00	; 0
    4158:	69 e1       	ldi	r22, 0x19	; 25
    415a:	86 e0       	ldi	r24, 0x06	; 6
    415c:	9f e3       	ldi	r25, 0x3F	; 63
    415e:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4162:	60 cf       	rjmp	.-320    	; 0x4024 <Pokerface()+0x40>
    4164:	43 e2       	ldi	r20, 0x23	; 35
    4166:	64 e0       	ldi	r22, 0x04	; 4
    4168:	86 e0       	ldi	r24, 0x06	; 6
    416a:	9f e3       	ldi	r25, 0x3F	; 63
    416c:	df cf       	rjmp	.-66     	; 0x412c <Pokerface()+0x148>
    416e:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4172:	7c 01       	movw	r14, r24
    4174:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4178:	8c 01       	movw	r16, r24
    417a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    417e:	9c 01       	movw	r18, r24
    4180:	4b e4       	ldi	r20, 0x4B	; 75
    4182:	50 e0       	ldi	r21, 0x00	; 0
    4184:	6d e2       	ldi	r22, 0x2D	; 45
    4186:	e9 cf       	rjmp	.-46     	; 0x415a <Pokerface()+0x176>
    4188:	62 e3       	ldi	r22, 0x32	; 50
    418a:	82 e7       	ldi	r24, 0x72	; 114
    418c:	9f e1       	ldi	r25, 0x1F	; 31
    418e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    4192:	48 cf       	rjmp	.-368    	; 0x4024 <Pokerface()+0x40>
    4194:	44 ef       	ldi	r20, 0xF4	; 244
    4196:	51 e0       	ldi	r21, 0x01	; 1
    4198:	6c e3       	ldi	r22, 0x3C	; 60
    419a:	77 cf       	rjmp	.-274    	; 0x408a <Pokerface()+0xa6>
    419c:	46 e4       	ldi	r20, 0x46	; 70
    419e:	6c e0       	ldi	r22, 0x0C	; 12
    41a0:	89 eb       	ldi	r24, 0xB9	; 185
    41a2:	9f e0       	ldi	r25, 0x0F	; 15
    41a4:	80 cf       	rjmp	.-256    	; 0x40a6 <Pokerface()+0xc2>
    41a6:	64 e6       	ldi	r22, 0x64	; 100
    41a8:	80 e1       	ldi	r24, 0x10	; 16
    41aa:	97 e2       	ldi	r25, 0x27	; 39
    41ac:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    41b0:	39 cf       	rjmp	.-398    	; 0x4024 <Pokerface()+0x40>

000041b2 <UseSomebody()>:
    41b2:	ef 92       	push	r14
    41b4:	ff 92       	push	r15
    41b6:	0f 93       	push	r16
    41b8:	1f 93       	push	r17
    41ba:	cf 93       	push	r28
    41bc:	df 93       	push	r29
    41be:	00 d0       	rcall	.+0      	; 0x41c0 <UseSomebody()+0xe>
    41c0:	00 d0       	rcall	.+0      	; 0x41c2 <UseSomebody()+0x10>
    41c2:	00 d0       	rcall	.+0      	; 0x41c4 <UseSomebody()+0x12>
    41c4:	1f 92       	push	r1
    41c6:	cd b7       	in	r28, 0x3d	; 61
    41c8:	de b7       	in	r29, 0x3e	; 62
    41ca:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    41ce:	84 31       	cpi	r24, 0x14	; 20
    41d0:	09 f4       	brne	.+2      	; 0x41d4 <UseSomebody()+0x22>
    41d2:	75 c0       	rjmp	.+234    	; 0x42be <UseSomebody()+0x10c>
    41d4:	48 f5       	brcc	.+82     	; 0x4228 <UseSomebody()+0x76>
    41d6:	82 30       	cpi	r24, 0x02	; 2
    41d8:	09 f4       	brne	.+2      	; 0x41dc <UseSomebody()+0x2a>
    41da:	5c c0       	rjmp	.+184    	; 0x4294 <UseSomebody()+0xe2>
    41dc:	a8 f4       	brcc	.+42     	; 0x4208 <UseSomebody()+0x56>
    41de:	88 23       	and	r24, r24
    41e0:	09 f4       	brne	.+2      	; 0x41e4 <UseSomebody()+0x32>
    41e2:	40 c0       	rjmp	.+128    	; 0x4264 <UseSomebody()+0xb2>
    41e4:	42 e0       	ldi	r20, 0x02	; 2
    41e6:	63 e0       	ldi	r22, 0x03	; 3
    41e8:	81 30       	cpi	r24, 0x01	; 1
    41ea:	09 f4       	brne	.+2      	; 0x41ee <UseSomebody()+0x3c>
    41ec:	7b c0       	rjmp	.+246    	; 0x42e4 <UseSomebody()+0x132>
    41ee:	27 96       	adiw	r28, 0x07	; 7
    41f0:	0f b6       	in	r0, 0x3f	; 63
    41f2:	f8 94       	cli
    41f4:	de bf       	out	0x3e, r29	; 62
    41f6:	0f be       	out	0x3f, r0	; 63
    41f8:	cd bf       	out	0x3d, r28	; 61
    41fa:	df 91       	pop	r29
    41fc:	cf 91       	pop	r28
    41fe:	1f 91       	pop	r17
    4200:	0f 91       	pop	r16
    4202:	ff 90       	pop	r15
    4204:	ef 90       	pop	r14
    4206:	08 95       	ret
    4208:	8a 30       	cpi	r24, 0x0A	; 10
    420a:	09 f4       	brne	.+2      	; 0x420e <UseSomebody()+0x5c>
    420c:	4a c0       	rjmp	.+148    	; 0x42a2 <UseSomebody()+0xf0>
    420e:	8f 30       	cpi	r24, 0x0F	; 15
    4210:	09 f4       	brne	.+2      	; 0x4214 <UseSomebody()+0x62>
    4212:	4d c0       	rjmp	.+154    	; 0x42ae <UseSomebody()+0xfc>
    4214:	85 30       	cpi	r24, 0x05	; 5
    4216:	59 f7       	brne	.-42     	; 0x41ee <UseSomebody()+0x3c>
    4218:	49 ea       	ldi	r20, 0xA9	; 169
    421a:	51 e0       	ldi	r21, 0x01	; 1
    421c:	6a e0       	ldi	r22, 0x0A	; 10
    421e:	82 eb       	ldi	r24, 0xB2	; 178
    4220:	9c e6       	ldi	r25, 0x6C	; 108
    4222:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4226:	e3 cf       	rjmp	.-58     	; 0x41ee <UseSomebody()+0x3c>
    4228:	88 32       	cpi	r24, 0x28	; 40
    422a:	09 f4       	brne	.+2      	; 0x422e <UseSomebody()+0x7c>
    422c:	62 c0       	rjmp	.+196    	; 0x42f2 <UseSomebody()+0x140>
    422e:	60 f4       	brcc	.+24     	; 0x4248 <UseSomebody()+0x96>
    4230:	8e 31       	cpi	r24, 0x1E	; 30
    4232:	09 f4       	brne	.+2      	; 0x4236 <UseSomebody()+0x84>
    4234:	55 c0       	rjmp	.+170    	; 0x42e0 <UseSomebody()+0x12e>
    4236:	83 32       	cpi	r24, 0x23	; 35
    4238:	09 f4       	brne	.+2      	; 0x423c <UseSomebody()+0x8a>
    423a:	57 c0       	rjmp	.+174    	; 0x42ea <UseSomebody()+0x138>
    423c:	89 31       	cpi	r24, 0x19	; 25
    423e:	b9 f6       	brne	.-82     	; 0x41ee <UseSomebody()+0x3c>
    4240:	49 ea       	ldi	r20, 0xA9	; 169
    4242:	51 e0       	ldi	r21, 0x01	; 1
    4244:	6e e1       	ldi	r22, 0x1E	; 30
    4246:	eb cf       	rjmp	.-42     	; 0x421e <UseSomebody()+0x6c>
    4248:	86 34       	cpi	r24, 0x46	; 70
    424a:	09 f4       	brne	.+2      	; 0x424e <UseSomebody()+0x9c>
    424c:	61 c0       	rjmp	.+194    	; 0x4310 <UseSomebody()+0x15e>
    424e:	84 36       	cpi	r24, 0x64	; 100
    4250:	09 f4       	brne	.+2      	; 0x4254 <UseSomebody()+0xa2>
    4252:	64 c0       	rjmp	.+200    	; 0x431c <UseSomebody()+0x16a>
    4254:	8d 32       	cpi	r24, 0x2D	; 45
    4256:	59 f6       	brne	.-106    	; 0x41ee <UseSomebody()+0x3c>
    4258:	62 e3       	ldi	r22, 0x32	; 50
    425a:	89 e5       	ldi	r24, 0x59	; 89
    425c:	96 e3       	ldi	r25, 0x36	; 54
    425e:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    4262:	c5 cf       	rjmp	.-118    	; 0x41ee <UseSomebody()+0x3c>
    4264:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    4268:	7c 01       	movw	r14, r24
    426a:	62 ea       	ldi	r22, 0xA2	; 162
    426c:	71 e0       	ldi	r23, 0x01	; 1
    426e:	ce 01       	movw	r24, r28
    4270:	01 96       	adiw	r24, 0x01	; 1
    4272:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    4276:	01 e0       	ldi	r16, 0x01	; 1
    4278:	97 01       	movw	r18, r14
    427a:	4b e4       	ldi	r20, 0x4B	; 75
    427c:	50 e0       	ldi	r21, 0x00	; 0
    427e:	63 ed       	ldi	r22, 0xD3	; 211
    4280:	7f e4       	ldi	r23, 0x4F	; 79
    4282:	ce 01       	movw	r24, r28
    4284:	01 96       	adiw	r24, 0x01	; 1
    4286:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    428a:	ce 01       	movw	r24, r28
    428c:	01 96       	adiw	r24, 0x01	; 1
    428e:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    4292:	ad cf       	rjmp	.-166    	; 0x41ee <UseSomebody()+0x3c>
    4294:	45 e0       	ldi	r20, 0x05	; 5
    4296:	64 e0       	ldi	r22, 0x04	; 4
    4298:	82 eb       	ldi	r24, 0xB2	; 178
    429a:	9c e6       	ldi	r25, 0x6C	; 108
    429c:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    42a0:	a6 cf       	rjmp	.-180    	; 0x41ee <UseSomebody()+0x3c>
    42a2:	6f e0       	ldi	r22, 0x0F	; 15
    42a4:	82 eb       	ldi	r24, 0xB2	; 178
    42a6:	9c e6       	ldi	r25, 0x6C	; 108
    42a8:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    42ac:	a0 cf       	rjmp	.-192    	; 0x41ee <UseSomebody()+0x3c>
    42ae:	49 ea       	ldi	r20, 0xA9	; 169
    42b0:	51 e0       	ldi	r21, 0x01	; 1
    42b2:	64 e1       	ldi	r22, 0x14	; 20
    42b4:	89 e5       	ldi	r24, 0x59	; 89
    42b6:	96 e3       	ldi	r25, 0x36	; 54
    42b8:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    42bc:	98 cf       	rjmp	.-208    	; 0x41ee <UseSomebody()+0x3c>
    42be:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    42c2:	7c 01       	movw	r14, r24
    42c4:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    42c8:	8c 01       	movw	r16, r24
    42ca:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    42ce:	9c 01       	movw	r18, r24
    42d0:	4b e4       	ldi	r20, 0x4B	; 75
    42d2:	50 e0       	ldi	r21, 0x00	; 0
    42d4:	69 e1       	ldi	r22, 0x19	; 25
    42d6:	89 e5       	ldi	r24, 0x59	; 89
    42d8:	96 e3       	ldi	r25, 0x36	; 54
    42da:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    42de:	87 cf       	rjmp	.-242    	; 0x41ee <UseSomebody()+0x3c>
    42e0:	43 e2       	ldi	r20, 0x23	; 35
    42e2:	64 e0       	ldi	r22, 0x04	; 4
    42e4:	89 e5       	ldi	r24, 0x59	; 89
    42e6:	96 e3       	ldi	r25, 0x36	; 54
    42e8:	d9 cf       	rjmp	.-78     	; 0x429c <UseSomebody()+0xea>
    42ea:	49 ea       	ldi	r20, 0xA9	; 169
    42ec:	51 e0       	ldi	r21, 0x01	; 1
    42ee:	68 e2       	ldi	r22, 0x28	; 40
    42f0:	e1 cf       	rjmp	.-62     	; 0x42b4 <UseSomebody()+0x102>
    42f2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    42f6:	7c 01       	movw	r14, r24
    42f8:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    42fc:	8c 01       	movw	r16, r24
    42fe:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4302:	9c 01       	movw	r18, r24
    4304:	4b e4       	ldi	r20, 0x4B	; 75
    4306:	50 e0       	ldi	r21, 0x00	; 0
    4308:	6d e2       	ldi	r22, 0x2D	; 45
    430a:	8f ee       	ldi	r24, 0xEF	; 239
    430c:	93 e4       	ldi	r25, 0x43	; 67
    430e:	e5 cf       	rjmp	.-54     	; 0x42da <UseSomebody()+0x128>
    4310:	64 e6       	ldi	r22, 0x64	; 100
    4312:	80 e1       	ldi	r24, 0x10	; 16
    4314:	97 e2       	ldi	r25, 0x27	; 39
    4316:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    431a:	69 cf       	rjmp	.-302    	; 0x41ee <UseSomebody()+0x3c>
    431c:	60 e0       	ldi	r22, 0x00	; 0
    431e:	8d e3       	ldi	r24, 0x3D	; 61
    4320:	90 e1       	ldi	r25, 0x10	; 16
    4322:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	d0 d9       	rcall	.-3168   	; 0x36ca <switchToSong(unsigned char)>
    432a:	61 cf       	rjmp	.-318    	; 0x41ee <UseSomebody()+0x3c>

0000432c <NoRoots()>:
    432c:	ef 92       	push	r14
    432e:	ff 92       	push	r15
    4330:	0f 93       	push	r16
    4332:	1f 93       	push	r17
    4334:	cf 93       	push	r28
    4336:	df 93       	push	r29
    4338:	00 d0       	rcall	.+0      	; 0x433a <NoRoots()+0xe>
    433a:	00 d0       	rcall	.+0      	; 0x433c <NoRoots()+0x10>
    433c:	00 d0       	rcall	.+0      	; 0x433e <NoRoots()+0x12>
    433e:	1f 92       	push	r1
    4340:	cd b7       	in	r28, 0x3d	; 61
    4342:	de b7       	in	r29, 0x3e	; 62
    4344:	e0 91 28 0a 	lds	r30, 0x0A28	; 0x800a28 <prog>
    4348:	e5 36       	cpi	r30, 0x65	; 101
    434a:	08 f0       	brcs	.+2      	; 0x434e <NoRoots()+0x22>
    434c:	81 c0       	rjmp	.+258    	; 0x4450 <NoRoots()+0x124>
    434e:	f0 e0       	ldi	r31, 0x00	; 0
    4350:	e4 55       	subi	r30, 0x54	; 84
    4352:	fe 4d       	sbci	r31, 0xDE	; 222
    4354:	0c 94 22 4c 	jmp	0x9844	; 0x9844 <__tablejump2__>
    4358:	11 22       	and	r1, r17
    435a:	35 22       	and	r3, r21
    435c:	3c 22       	and	r3, r28
    435e:	28 22       	and	r2, r24
    4360:	28 22       	and	r2, r24
    4362:	41 22       	and	r4, r17
    4364:	49 22       	and	r4, r25
    4366:	4f 22       	and	r4, r31
    4368:	55 22       	and	r5, r21
    436a:	5b 22       	and	r5, r27
    436c:	5d 22       	and	r5, r29
    436e:	65 22       	and	r6, r21
    4370:	76 22       	and	r7, r22
    4372:	78 22       	and	r7, r24
    4374:	7c 22       	and	r7, r28
    4376:	7e 22       	and	r7, r30
    4378:	28 22       	and	r2, r24
    437a:	28 22       	and	r2, r24
    437c:	82 22       	and	r8, r18
    437e:	28 22       	and	r2, r24
    4380:	91 22       	and	r9, r17
    4382:	28 22       	and	r2, r24
    4384:	28 22       	and	r2, r24
    4386:	28 22       	and	r2, r24
    4388:	28 22       	and	r2, r24
    438a:	94 22       	and	r9, r20
    438c:	28 22       	and	r2, r24
    438e:	98 22       	and	r9, r24
    4390:	28 22       	and	r2, r24
    4392:	9d 22       	and	r9, r29
    4394:	28 22       	and	r2, r24
    4396:	9f 22       	and	r9, r31
    4398:	28 22       	and	r2, r24
    439a:	a3 22       	and	r10, r19
    439c:	28 22       	and	r2, r24
    439e:	a5 22       	and	r10, r21
    43a0:	28 22       	and	r2, r24
    43a2:	a9 22       	and	r10, r25
    43a4:	28 22       	and	r2, r24
    43a6:	b6 22       	and	r11, r22
    43a8:	28 22       	and	r2, r24
    43aa:	b8 22       	and	r11, r24
    43ac:	28 22       	and	r2, r24
    43ae:	bc 22       	and	r11, r28
    43b0:	28 22       	and	r2, r24
    43b2:	be 22       	and	r11, r30
    43b4:	28 22       	and	r2, r24
    43b6:	c2 22       	and	r12, r18
    43b8:	28 22       	and	r2, r24
    43ba:	cf 22       	and	r12, r31
    43bc:	28 22       	and	r2, r24
    43be:	d5 22       	and	r13, r21
    43c0:	28 22       	and	r2, r24
    43c2:	db 22       	and	r13, r27
    43c4:	28 22       	and	r2, r24
    43c6:	e3 22       	and	r14, r19
    43c8:	28 22       	and	r2, r24
    43ca:	ea 22       	and	r14, r26
    43cc:	28 22       	and	r2, r24
    43ce:	ee 22       	and	r14, r30
    43d0:	28 22       	and	r2, r24
    43d2:	f3 22       	and	r15, r19
    43d4:	28 22       	and	r2, r24
    43d6:	28 22       	and	r2, r24
    43d8:	28 22       	and	r2, r24
    43da:	28 22       	and	r2, r24
    43dc:	28 22       	and	r2, r24
    43de:	28 22       	and	r2, r24
    43e0:	28 22       	and	r2, r24
    43e2:	28 22       	and	r2, r24
    43e4:	28 22       	and	r2, r24
    43e6:	28 22       	and	r2, r24
    43e8:	28 22       	and	r2, r24
    43ea:	28 22       	and	r2, r24
    43ec:	28 22       	and	r2, r24
    43ee:	28 22       	and	r2, r24
    43f0:	28 22       	and	r2, r24
    43f2:	28 22       	and	r2, r24
    43f4:	28 22       	and	r2, r24
    43f6:	28 22       	and	r2, r24
    43f8:	28 22       	and	r2, r24
    43fa:	28 22       	and	r2, r24
    43fc:	28 22       	and	r2, r24
    43fe:	28 22       	and	r2, r24
    4400:	28 22       	and	r2, r24
    4402:	28 22       	and	r2, r24
    4404:	28 22       	and	r2, r24
    4406:	28 22       	and	r2, r24
    4408:	28 22       	and	r2, r24
    440a:	28 22       	and	r2, r24
    440c:	28 22       	and	r2, r24
    440e:	28 22       	and	r2, r24
    4410:	28 22       	and	r2, r24
    4412:	28 22       	and	r2, r24
    4414:	28 22       	and	r2, r24
    4416:	28 22       	and	r2, r24
    4418:	28 22       	and	r2, r24
    441a:	28 22       	and	r2, r24
    441c:	28 22       	and	r2, r24
    441e:	28 22       	and	r2, r24
    4420:	f7 22       	and	r15, r23
    4422:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    4426:	7c 01       	movw	r14, r24
    4428:	60 ec       	ldi	r22, 0xC0	; 192
    442a:	71 e0       	ldi	r23, 0x01	; 1
    442c:	ce 01       	movw	r24, r28
    442e:	01 96       	adiw	r24, 0x01	; 1
    4430:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    4434:	01 e0       	ldi	r16, 0x01	; 1
    4436:	97 01       	movw	r18, r14
    4438:	4b e4       	ldi	r20, 0x4B	; 75
    443a:	50 e0       	ldi	r21, 0x00	; 0
    443c:	69 e7       	ldi	r22, 0x79	; 121
    443e:	7e e2       	ldi	r23, 0x2E	; 46
    4440:	ce 01       	movw	r24, r28
    4442:	01 96       	adiw	r24, 0x01	; 1
    4444:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4448:	ce 01       	movw	r24, r28
    444a:	01 96       	adiw	r24, 0x01	; 1
    444c:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    4450:	27 96       	adiw	r28, 0x07	; 7
    4452:	0f b6       	in	r0, 0x3f	; 63
    4454:	f8 94       	cli
    4456:	de bf       	out	0x3e, r29	; 62
    4458:	0f be       	out	0x3f, r0	; 63
    445a:	cd bf       	out	0x3d, r28	; 61
    445c:	df 91       	pop	r29
    445e:	cf 91       	pop	r28
    4460:	1f 91       	pop	r17
    4462:	0f 91       	pop	r16
    4464:	ff 90       	pop	r15
    4466:	ef 90       	pop	r14
    4468:	08 95       	ret
    446a:	42 e0       	ldi	r20, 0x02	; 2
    446c:	67 e0       	ldi	r22, 0x07	; 7
    446e:	83 e5       	ldi	r24, 0x53	; 83
    4470:	90 e2       	ldi	r25, 0x20	; 32
    4472:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    4476:	ec cf       	rjmp	.-40     	; 0x4450 <NoRoots()+0x124>
    4478:	45 e0       	ldi	r20, 0x05	; 5
    447a:	66 e0       	ldi	r22, 0x06	; 6
    447c:	86 ea       	ldi	r24, 0xA6	; 166
    447e:	90 e4       	ldi	r25, 0x40	; 64
    4480:	f8 cf       	rjmp	.-16     	; 0x4472 <NoRoots()+0x146>
    4482:	44 ef       	ldi	r20, 0xF4	; 244
    4484:	51 e0       	ldi	r21, 0x01	; 1
    4486:	66 e0       	ldi	r22, 0x06	; 6
    4488:	86 ea       	ldi	r24, 0xA6	; 166
    448a:	90 e4       	ldi	r25, 0x40	; 64
    448c:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4490:	df cf       	rjmp	.-66     	; 0x4450 <NoRoots()+0x124>
    4492:	67 e0       	ldi	r22, 0x07	; 7
    4494:	86 e4       	ldi	r24, 0x46	; 70
    4496:	9e e1       	ldi	r25, 0x1E	; 30
    4498:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    449c:	d9 cf       	rjmp	.-78     	; 0x4450 <NoRoots()+0x124>
    449e:	68 e0       	ldi	r22, 0x08	; 8
    44a0:	8e e0       	ldi	r24, 0x0E	; 14
    44a2:	96 e0       	ldi	r25, 0x06	; 6
    44a4:	0e 94 fd 0e 	call	0x1dfa	; 0x1dfa <progShowROOTS(unsigned int, unsigned char)>
    44a8:	d3 cf       	rjmp	.-90     	; 0x4450 <NoRoots()+0x124>
    44aa:	44 ef       	ldi	r20, 0xF4	; 244
    44ac:	51 e0       	ldi	r21, 0x01	; 1
    44ae:	69 e0       	ldi	r22, 0x09	; 9
    44b0:	8f e0       	ldi	r24, 0x0F	; 15
    44b2:	9a e0       	ldi	r25, 0x0A	; 10
    44b4:	07 c0       	rjmp	.+14     	; 0x44c4 <NoRoots()+0x198>
    44b6:	6a e0       	ldi	r22, 0x0A	; 10
    44b8:	f3 cf       	rjmp	.-26     	; 0x44a0 <NoRoots()+0x174>
    44ba:	44 ef       	ldi	r20, 0xF4	; 244
    44bc:	51 e0       	ldi	r21, 0x01	; 1
    44be:	6b e0       	ldi	r22, 0x0B	; 11
    44c0:	8c e1       	ldi	r24, 0x1C	; 28
    44c2:	9c e0       	ldi	r25, 0x0C	; 12
    44c4:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    44c8:	c3 cf       	rjmp	.-122    	; 0x4450 <NoRoots()+0x124>
    44ca:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    44ce:	7c 01       	movw	r14, r24
    44d0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    44d4:	8c 01       	movw	r16, r24
    44d6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    44da:	9c 01       	movw	r18, r24
    44dc:	4b e4       	ldi	r20, 0x4B	; 75
    44de:	50 e0       	ldi	r21, 0x00	; 0
    44e0:	6c e0       	ldi	r22, 0x0C	; 12
    44e2:	86 e4       	ldi	r24, 0x46	; 70
    44e4:	9e e1       	ldi	r25, 0x1E	; 30
    44e6:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    44ea:	b2 cf       	rjmp	.-156    	; 0x4450 <NoRoots()+0x124>
    44ec:	6d e0       	ldi	r22, 0x0D	; 13
    44ee:	d8 cf       	rjmp	.-80     	; 0x44a0 <NoRoots()+0x174>
    44f0:	44 ef       	ldi	r20, 0xF4	; 244
    44f2:	51 e0       	ldi	r21, 0x01	; 1
    44f4:	6e e0       	ldi	r22, 0x0E	; 14
    44f6:	dc cf       	rjmp	.-72     	; 0x44b0 <NoRoots()+0x184>
    44f8:	6f e0       	ldi	r22, 0x0F	; 15
    44fa:	d2 cf       	rjmp	.-92     	; 0x44a0 <NoRoots()+0x174>
    44fc:	44 ef       	ldi	r20, 0xF4	; 244
    44fe:	51 e0       	ldi	r21, 0x01	; 1
    4500:	62 e1       	ldi	r22, 0x12	; 18
    4502:	de cf       	rjmp	.-68     	; 0x44c0 <NoRoots()+0x194>
    4504:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4508:	7c 01       	movw	r14, r24
    450a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    450e:	8c 01       	movw	r16, r24
    4510:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4514:	9c 01       	movw	r18, r24
    4516:	4b e4       	ldi	r20, 0x4B	; 75
    4518:	50 e0       	ldi	r21, 0x00	; 0
    451a:	64 e1       	ldi	r22, 0x14	; 20
    451c:	83 e5       	ldi	r24, 0x53	; 83
    451e:	90 e2       	ldi	r25, 0x20	; 32
    4520:	e2 cf       	rjmp	.-60     	; 0x44e6 <NoRoots()+0x1ba>
    4522:	49 e1       	ldi	r20, 0x19	; 25
    4524:	68 e0       	ldi	r22, 0x08	; 8
    4526:	aa cf       	rjmp	.-172    	; 0x447c <NoRoots()+0x150>
    4528:	44 ef       	ldi	r20, 0xF4	; 244
    452a:	51 e0       	ldi	r21, 0x01	; 1
    452c:	6b e1       	ldi	r22, 0x1B	; 27
    452e:	ac cf       	rjmp	.-168    	; 0x4488 <NoRoots()+0x15c>
    4530:	4d e1       	ldi	r20, 0x1D	; 29
    4532:	64 e0       	ldi	r22, 0x04	; 4
    4534:	86 e4       	ldi	r24, 0x46	; 70
    4536:	9e e1       	ldi	r25, 0x1E	; 30
    4538:	9c cf       	rjmp	.-200    	; 0x4472 <NoRoots()+0x146>
    453a:	6f e1       	ldi	r22, 0x1F	; 31
    453c:	b1 cf       	rjmp	.-158    	; 0x44a0 <NoRoots()+0x174>
    453e:	44 ef       	ldi	r20, 0xF4	; 244
    4540:	51 e0       	ldi	r21, 0x01	; 1
    4542:	61 e2       	ldi	r22, 0x21	; 33
    4544:	b5 cf       	rjmp	.-150    	; 0x44b0 <NoRoots()+0x184>
    4546:	63 e2       	ldi	r22, 0x23	; 35
    4548:	ab cf       	rjmp	.-170    	; 0x44a0 <NoRoots()+0x174>
    454a:	44 ef       	ldi	r20, 0xF4	; 244
    454c:	51 e0       	ldi	r21, 0x01	; 1
    454e:	65 e2       	ldi	r22, 0x25	; 37
    4550:	b7 cf       	rjmp	.-146    	; 0x44c0 <NoRoots()+0x194>
    4552:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4556:	7c 01       	movw	r14, r24
    4558:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    455c:	8c 01       	movw	r16, r24
    455e:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4562:	9c 01       	movw	r18, r24
    4564:	4b e4       	ldi	r20, 0x4B	; 75
    4566:	50 e0       	ldi	r21, 0x00	; 0
    4568:	67 e2       	ldi	r22, 0x27	; 39
    456a:	bb cf       	rjmp	.-138    	; 0x44e2 <NoRoots()+0x1b6>
    456c:	69 e2       	ldi	r22, 0x29	; 41
    456e:	98 cf       	rjmp	.-208    	; 0x44a0 <NoRoots()+0x174>
    4570:	44 ef       	ldi	r20, 0xF4	; 244
    4572:	51 e0       	ldi	r21, 0x01	; 1
    4574:	6b e2       	ldi	r22, 0x2B	; 43
    4576:	9c cf       	rjmp	.-200    	; 0x44b0 <NoRoots()+0x184>
    4578:	6d e2       	ldi	r22, 0x2D	; 45
    457a:	92 cf       	rjmp	.-220    	; 0x44a0 <NoRoots()+0x174>
    457c:	44 ef       	ldi	r20, 0xF4	; 244
    457e:	51 e0       	ldi	r21, 0x01	; 1
    4580:	6f e2       	ldi	r22, 0x2F	; 47
    4582:	9e cf       	rjmp	.-196    	; 0x44c0 <NoRoots()+0x194>
    4584:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4588:	7c 01       	movw	r14, r24
    458a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    458e:	8c 01       	movw	r16, r24
    4590:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4594:	9c 01       	movw	r18, r24
    4596:	4b e4       	ldi	r20, 0x4B	; 75
    4598:	50 e0       	ldi	r21, 0x00	; 0
    459a:	61 e3       	ldi	r22, 0x31	; 49
    459c:	bf cf       	rjmp	.-130    	; 0x451c <NoRoots()+0x1f0>
    459e:	63 e3       	ldi	r22, 0x33	; 51
    45a0:	88 ea       	ldi	r24, 0xA8	; 168
    45a2:	98 e4       	ldi	r25, 0x48	; 72
    45a4:	0e 94 5f 12 	call	0x24be	; 0x24be <progMatrixHorizontal(unsigned int, unsigned char)>
    45a8:	53 cf       	rjmp	.-346    	; 0x4450 <NoRoots()+0x124>
    45aa:	65 e3       	ldi	r22, 0x35	; 53
    45ac:	86 ea       	ldi	r24, 0xA6	; 166
    45ae:	90 e4       	ldi	r25, 0x40	; 64
    45b0:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    45b4:	4d cf       	rjmp	.-358    	; 0x4450 <NoRoots()+0x124>
    45b6:	47 e3       	ldi	r20, 0x37	; 55
    45b8:	64 ef       	ldi	r22, 0xF4	; 244
    45ba:	71 e0       	ldi	r23, 0x01	; 1
    45bc:	83 e5       	ldi	r24, 0x53	; 83
    45be:	90 e2       	ldi	r25, 0x20	; 32
    45c0:	0e 94 87 08 	call	0x110e	; 0x110e <progStern(unsigned int, int, unsigned char)>
    45c4:	45 cf       	rjmp	.-374    	; 0x4450 <NoRoots()+0x124>
    45c6:	49 e3       	ldi	r20, 0x39	; 57
    45c8:	67 e0       	ldi	r22, 0x07	; 7
    45ca:	83 e5       	ldi	r24, 0x53	; 83
    45cc:	90 e2       	ldi	r25, 0x20	; 32
    45ce:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    45d2:	3e cf       	rjmp	.-388    	; 0x4450 <NoRoots()+0x124>
    45d4:	4b e3       	ldi	r20, 0x3B	; 59
    45d6:	6a ef       	ldi	r22, 0xFA	; 250
    45d8:	70 e0       	ldi	r23, 0x00	; 0
    45da:	f0 cf       	rjmp	.-32     	; 0x45bc <NoRoots()+0x290>
    45dc:	4d e3       	ldi	r20, 0x3D	; 61
    45de:	6c e0       	ldi	r22, 0x0C	; 12
    45e0:	8f e4       	ldi	r24, 0x4F	; 79
    45e2:	9e e1       	ldi	r25, 0x1E	; 30
    45e4:	f4 cf       	rjmp	.-24     	; 0x45ce <NoRoots()+0x2a2>
    45e6:	64 e6       	ldi	r22, 0x64	; 100
    45e8:	80 e3       	ldi	r24, 0x30	; 48
    45ea:	95 e7       	ldi	r25, 0x75	; 117
    45ec:	5b cf       	rjmp	.-330    	; 0x44a4 <NoRoots()+0x178>
    45ee:	60 e0       	ldi	r22, 0x00	; 0
    45f0:	8d e3       	ldi	r24, 0x3D	; 61
    45f2:	90 e1       	ldi	r25, 0x10	; 16
    45f4:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    45f8:	80 e0       	ldi	r24, 0x00	; 0
    45fa:	67 d8       	rcall	.-3890   	; 0x36ca <switchToSong(unsigned char)>
    45fc:	29 cf       	rjmp	.-430    	; 0x4450 <NoRoots()+0x124>

000045fe <Firework()>:
    45fe:	ef 92       	push	r14
    4600:	ff 92       	push	r15
    4602:	0f 93       	push	r16
    4604:	1f 93       	push	r17
    4606:	cf 93       	push	r28
    4608:	df 93       	push	r29
    460a:	00 d0       	rcall	.+0      	; 0x460c <Firework()+0xe>
    460c:	00 d0       	rcall	.+0      	; 0x460e <Firework()+0x10>
    460e:	00 d0       	rcall	.+0      	; 0x4610 <Firework()+0x12>
    4610:	1f 92       	push	r1
    4612:	cd b7       	in	r28, 0x3d	; 61
    4614:	de b7       	in	r29, 0x3e	; 62
    4616:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    461a:	83 32       	cpi	r24, 0x23	; 35
    461c:	09 f4       	brne	.+2      	; 0x4620 <Firework()+0x22>
    461e:	f5 c0       	rjmp	.+490    	; 0x480a <Firework()+0x20c>
    4620:	08 f0       	brcs	.+2      	; 0x4624 <Firework()+0x26>
    4622:	4b c0       	rjmp	.+150    	; 0x46ba <Firework()+0xbc>
    4624:	86 31       	cpi	r24, 0x16	; 22
    4626:	09 f4       	brne	.+2      	; 0x462a <Firework()+0x2c>
    4628:	cc c0       	rjmp	.+408    	; 0x47c2 <Firework()+0x1c4>
    462a:	18 f5       	brcc	.+70     	; 0x4672 <Firework()+0x74>
    462c:	8a 30       	cpi	r24, 0x0A	; 10
    462e:	09 f4       	brne	.+2      	; 0x4632 <Firework()+0x34>
    4630:	b8 c0       	rjmp	.+368    	; 0x47a2 <Firework()+0x1a4>
    4632:	98 f4       	brcc	.+38     	; 0x465a <Firework()+0x5c>
    4634:	88 23       	and	r24, r24
    4636:	09 f4       	brne	.+2      	; 0x463a <Firework()+0x3c>
    4638:	94 c0       	rjmp	.+296    	; 0x4762 <Firework()+0x164>
    463a:	85 30       	cpi	r24, 0x05	; 5
    463c:	09 f4       	brne	.+2      	; 0x4640 <Firework()+0x42>
    463e:	a9 c0       	rjmp	.+338    	; 0x4792 <Firework()+0x194>
    4640:	27 96       	adiw	r28, 0x07	; 7
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	f8 94       	cli
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	ff 90       	pop	r15
    4656:	ef 90       	pop	r14
    4658:	08 95       	ret
    465a:	8f 30       	cpi	r24, 0x0F	; 15
    465c:	09 f4       	brne	.+2      	; 0x4660 <Firework()+0x62>
    465e:	a9 c0       	rjmp	.+338    	; 0x47b2 <Firework()+0x1b4>
    4660:	46 e1       	ldi	r20, 0x16	; 22
    4662:	64 e0       	ldi	r22, 0x04	; 4
    4664:	84 31       	cpi	r24, 0x14	; 20
    4666:	61 f7       	brne	.-40     	; 0x4640 <Firework()+0x42>
    4668:	8e ee       	ldi	r24, 0xEE	; 238
    466a:	94 e3       	ldi	r25, 0x34	; 52
    466c:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    4670:	e7 cf       	rjmp	.-50     	; 0x4640 <Firework()+0x42>
    4672:	8c 31       	cpi	r24, 0x1C	; 28
    4674:	09 f4       	brne	.+2      	; 0x4678 <Firework()+0x7a>
    4676:	bb c0       	rjmp	.+374    	; 0x47ee <Firework()+0x1f0>
    4678:	a0 f4       	brcc	.+40     	; 0x46a2 <Firework()+0xa4>
    467a:	88 31       	cpi	r24, 0x18	; 24
    467c:	09 f4       	brne	.+2      	; 0x4680 <Firework()+0x82>
    467e:	b2 c0       	rjmp	.+356    	; 0x47e4 <Firework()+0x1e6>
    4680:	8a 31       	cpi	r24, 0x1A	; 26
    4682:	f1 f6       	brne	.-68     	; 0x4640 <Firework()+0x42>
    4684:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4688:	7c 01       	movw	r14, r24
    468a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    468e:	8c 01       	movw	r16, r24
    4690:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4694:	9c 01       	movw	r18, r24
    4696:	42 e3       	ldi	r20, 0x32	; 50
    4698:	50 e0       	ldi	r21, 0x00	; 0
    469a:	6c e1       	ldi	r22, 0x1C	; 28
    469c:	88 ee       	ldi	r24, 0xE8	; 232
    469e:	93 e0       	ldi	r25, 0x03	; 3
    46a0:	9e c0       	rjmp	.+316    	; 0x47de <Firework()+0x1e0>
    46a2:	80 32       	cpi	r24, 0x20	; 32
    46a4:	09 f4       	brne	.+2      	; 0x46a8 <Firework()+0xaa>
    46a6:	aa c0       	rjmp	.+340    	; 0x47fc <Firework()+0x1fe>
    46a8:	82 32       	cpi	r24, 0x22	; 34
    46aa:	09 f4       	brne	.+2      	; 0x46ae <Firework()+0xb0>
    46ac:	ab c0       	rjmp	.+342    	; 0x4804 <Firework()+0x206>
    46ae:	8e 31       	cpi	r24, 0x1E	; 30
    46b0:	39 f6       	brne	.-114    	; 0x4640 <Firework()+0x42>
    46b2:	4b ed       	ldi	r20, 0xDB	; 219
    46b4:	51 e0       	ldi	r21, 0x01	; 1
    46b6:	60 e2       	ldi	r22, 0x20	; 32
    46b8:	7f c0       	rjmp	.+254    	; 0x47b8 <Firework()+0x1ba>
    46ba:	8c 32       	cpi	r24, 0x2C	; 44
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <Firework()+0xc2>
    46be:	bb c0       	rjmp	.+374    	; 0x4836 <Firework()+0x238>
    46c0:	18 f5       	brcc	.+70     	; 0x4708 <Firework()+0x10a>
    46c2:	86 32       	cpi	r24, 0x26	; 38
    46c4:	09 f4       	brne	.+2      	; 0x46c8 <Firework()+0xca>
    46c6:	b0 c0       	rjmp	.+352    	; 0x4828 <Firework()+0x22a>
    46c8:	98 f4       	brcc	.+38     	; 0x46f0 <Firework()+0xf2>
    46ca:	84 32       	cpi	r24, 0x24	; 36
    46cc:	09 f4       	brne	.+2      	; 0x46d0 <Firework()+0xd2>
    46ce:	aa c0       	rjmp	.+340    	; 0x4824 <Firework()+0x226>
    46d0:	85 32       	cpi	r24, 0x25	; 37
    46d2:	09 f0       	breq	.+2      	; 0x46d6 <Firework()+0xd8>
    46d4:	b5 cf       	rjmp	.-150    	; 0x4640 <Firework()+0x42>
    46d6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    46da:	7c 01       	movw	r14, r24
    46dc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    46e0:	8c 01       	movw	r16, r24
    46e2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    46e6:	9c 01       	movw	r18, r24
    46e8:	42 e3       	ldi	r20, 0x32	; 50
    46ea:	50 e0       	ldi	r21, 0x00	; 0
    46ec:	66 e2       	ldi	r22, 0x26	; 38
    46ee:	d6 cf       	rjmp	.-84     	; 0x469c <Firework()+0x9e>
    46f0:	88 32       	cpi	r24, 0x28	; 40
    46f2:	09 f4       	brne	.+2      	; 0x46f6 <Firework()+0xf8>
    46f4:	9b c0       	rjmp	.+310    	; 0x482c <Firework()+0x22e>
    46f6:	8a 32       	cpi	r24, 0x2A	; 42
    46f8:	09 f0       	breq	.+2      	; 0x46fc <Firework()+0xfe>
    46fa:	a2 cf       	rjmp	.-188    	; 0x4640 <Firework()+0x42>
    46fc:	6c e2       	ldi	r22, 0x2C	; 44
    46fe:	84 ea       	ldi	r24, 0xA4	; 164
    4700:	98 e3       	ldi	r25, 0x38	; 56
    4702:	0e 94 5f 12 	call	0x24be	; 0x24be <progMatrixHorizontal(unsigned int, unsigned char)>
    4706:	9c cf       	rjmp	.-200    	; 0x4640 <Firework()+0x42>
    4708:	82 33       	cpi	r24, 0x32	; 50
    470a:	09 f4       	brne	.+2      	; 0x470e <Firework()+0x110>
    470c:	a4 c0       	rjmp	.+328    	; 0x4856 <Firework()+0x258>
    470e:	98 f4       	brcc	.+38     	; 0x4736 <Firework()+0x138>
    4710:	8e 32       	cpi	r24, 0x2E	; 46
    4712:	09 f4       	brne	.+2      	; 0x4716 <Firework()+0x118>
    4714:	9d c0       	rjmp	.+314    	; 0x4850 <Firework()+0x252>
    4716:	80 33       	cpi	r24, 0x30	; 48
    4718:	09 f0       	breq	.+2      	; 0x471c <Firework()+0x11e>
    471a:	92 cf       	rjmp	.-220    	; 0x4640 <Firework()+0x42>
    471c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4720:	7c 01       	movw	r14, r24
    4722:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4726:	8c 01       	movw	r16, r24
    4728:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    472c:	9c 01       	movw	r18, r24
    472e:	42 e3       	ldi	r20, 0x32	; 50
    4730:	50 e0       	ldi	r21, 0x00	; 0
    4732:	62 e3       	ldi	r22, 0x32	; 50
    4734:	b3 cf       	rjmp	.-154    	; 0x469c <Firework()+0x9e>
    4736:	8c 33       	cpi	r24, 0x3C	; 60
    4738:	09 f4       	brne	.+2      	; 0x473c <Firework()+0x13e>
    473a:	90 c0       	rjmp	.+288    	; 0x485c <Firework()+0x25e>
    473c:	84 36       	cpi	r24, 0x64	; 100
    473e:	09 f4       	brne	.+2      	; 0x4742 <Firework()+0x144>
    4740:	93 c0       	rjmp	.+294    	; 0x4868 <Firework()+0x26a>
    4742:	87 33       	cpi	r24, 0x37	; 55
    4744:	09 f0       	breq	.+2      	; 0x4748 <Firework()+0x14a>
    4746:	7c cf       	rjmp	.-264    	; 0x4640 <Firework()+0x42>
    4748:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    474c:	7c 01       	movw	r14, r24
    474e:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4752:	8c 01       	movw	r16, r24
    4754:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4758:	9c 01       	movw	r18, r24
    475a:	42 e3       	ldi	r20, 0x32	; 50
    475c:	50 e0       	ldi	r21, 0x00	; 0
    475e:	6c e3       	ldi	r22, 0x3C	; 60
    4760:	9d cf       	rjmp	.-198    	; 0x469c <Firework()+0x9e>
    4762:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    4766:	7c 01       	movw	r14, r24
    4768:	69 ed       	ldi	r22, 0xD9	; 217
    476a:	71 e0       	ldi	r23, 0x01	; 1
    476c:	ce 01       	movw	r24, r28
    476e:	01 96       	adiw	r24, 0x01	; 1
    4770:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    4774:	05 e0       	ldi	r16, 0x05	; 5
    4776:	97 01       	movw	r18, r14
    4778:	42 e3       	ldi	r20, 0x32	; 50
    477a:	50 e0       	ldi	r21, 0x00	; 0
    477c:	6c e4       	ldi	r22, 0x4C	; 76
    477e:	7d e1       	ldi	r23, 0x1D	; 29
    4780:	ce 01       	movw	r24, r28
    4782:	01 96       	adiw	r24, 0x01	; 1
    4784:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4788:	ce 01       	movw	r24, r28
    478a:	01 96       	adiw	r24, 0x01	; 1
    478c:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    4790:	57 cf       	rjmp	.-338    	; 0x4640 <Firework()+0x42>
    4792:	4a e0       	ldi	r20, 0x0A	; 10
    4794:	66 eb       	ldi	r22, 0xB6	; 182
    4796:	73 e0       	ldi	r23, 0x03	; 3
    4798:	83 e7       	ldi	r24, 0x73	; 115
    479a:	9c e3       	ldi	r25, 0x3C	; 60
    479c:	0e 94 87 08 	call	0x110e	; 0x110e <progStern(unsigned int, int, unsigned char)>
    47a0:	4f cf       	rjmp	.-354    	; 0x4640 <Firework()+0x42>
    47a2:	4b ed       	ldi	r20, 0xDB	; 219
    47a4:	51 e0       	ldi	r21, 0x01	; 1
    47a6:	6f e0       	ldi	r22, 0x0F	; 15
    47a8:	83 e7       	ldi	r24, 0x73	; 115
    47aa:	9c e3       	ldi	r25, 0x3C	; 60
    47ac:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    47b0:	47 cf       	rjmp	.-370    	; 0x4640 <Firework()+0x42>
    47b2:	4b ed       	ldi	r20, 0xDB	; 219
    47b4:	51 e0       	ldi	r21, 0x01	; 1
    47b6:	64 e1       	ldi	r22, 0x14	; 20
    47b8:	83 e7       	ldi	r24, 0x73	; 115
    47ba:	9c e3       	ldi	r25, 0x3C	; 60
    47bc:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    47c0:	3f cf       	rjmp	.-386    	; 0x4640 <Firework()+0x42>
    47c2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    47c6:	7c 01       	movw	r14, r24
    47c8:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    47cc:	8c 01       	movw	r16, r24
    47ce:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    47d2:	9c 01       	movw	r18, r24
    47d4:	42 e3       	ldi	r20, 0x32	; 50
    47d6:	50 e0       	ldi	r21, 0x00	; 0
    47d8:	68 e1       	ldi	r22, 0x18	; 24
    47da:	85 e8       	ldi	r24, 0x85	; 133
    47dc:	97 e0       	ldi	r25, 0x07	; 7
    47de:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    47e2:	2e cf       	rjmp	.-420    	; 0x4640 <Firework()+0x42>
    47e4:	4a e1       	ldi	r20, 0x1A	; 26
    47e6:	63 e0       	ldi	r22, 0x03	; 3
    47e8:	84 ea       	ldi	r24, 0xA4	; 164
    47ea:	98 e3       	ldi	r25, 0x38	; 56
    47ec:	04 c0       	rjmp	.+8      	; 0x47f6 <Firework()+0x1f8>
    47ee:	4e e1       	ldi	r20, 0x1E	; 30
    47f0:	67 e0       	ldi	r22, 0x07	; 7
    47f2:	8a e5       	ldi	r24, 0x5A	; 90
    47f4:	9c e3       	ldi	r25, 0x3C	; 60
    47f6:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    47fa:	22 cf       	rjmp	.-444    	; 0x4640 <Firework()+0x42>
    47fc:	4b ed       	ldi	r20, 0xDB	; 219
    47fe:	51 e0       	ldi	r21, 0x01	; 1
    4800:	62 e2       	ldi	r22, 0x22	; 34
    4802:	d2 cf       	rjmp	.-92     	; 0x47a8 <Firework()+0x1aa>
    4804:	43 e2       	ldi	r20, 0x23	; 35
    4806:	65 e0       	ldi	r22, 0x05	; 5
    4808:	2f cf       	rjmp	.-418    	; 0x4668 <Firework()+0x6a>
    480a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    480e:	7c 01       	movw	r14, r24
    4810:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4814:	8c 01       	movw	r16, r24
    4816:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    481a:	9c 01       	movw	r18, r24
    481c:	42 e3       	ldi	r20, 0x32	; 50
    481e:	50 e0       	ldi	r21, 0x00	; 0
    4820:	64 e2       	ldi	r22, 0x24	; 36
    4822:	db cf       	rjmp	.-74     	; 0x47da <Firework()+0x1dc>
    4824:	45 e2       	ldi	r20, 0x25	; 37
    4826:	df cf       	rjmp	.-66     	; 0x47e6 <Firework()+0x1e8>
    4828:	48 e2       	ldi	r20, 0x28	; 40
    482a:	e2 cf       	rjmp	.-60     	; 0x47f0 <Firework()+0x1f2>
    482c:	4a e2       	ldi	r20, 0x2A	; 42
    482e:	62 e0       	ldi	r22, 0x02	; 2
    4830:	83 e7       	ldi	r24, 0x73	; 115
    4832:	9c e3       	ldi	r25, 0x3C	; 60
    4834:	1b cf       	rjmp	.-458    	; 0x466c <Firework()+0x6e>
    4836:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    483a:	7c 01       	movw	r14, r24
    483c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4840:	8c 01       	movw	r16, r24
    4842:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4846:	9c 01       	movw	r18, r24
    4848:	42 e3       	ldi	r20, 0x32	; 50
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	6e e2       	ldi	r22, 0x2E	; 46
    484e:	26 cf       	rjmp	.-436    	; 0x469c <Firework()+0x9e>
    4850:	40 e3       	ldi	r20, 0x30	; 48
    4852:	65 e0       	ldi	r22, 0x05	; 5
    4854:	c9 cf       	rjmp	.-110    	; 0x47e8 <Firework()+0x1ea>
    4856:	47 e3       	ldi	r20, 0x37	; 55
    4858:	6a e0       	ldi	r22, 0x0A	; 10
    485a:	c6 cf       	rjmp	.-116    	; 0x47e8 <Firework()+0x1ea>
    485c:	64 e6       	ldi	r22, 0x64	; 100
    485e:	80 e1       	ldi	r24, 0x10	; 16
    4860:	97 e2       	ldi	r25, 0x27	; 39
    4862:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    4866:	ec ce       	rjmp	.-552    	; 0x4640 <Firework()+0x42>
    4868:	60 e0       	ldi	r22, 0x00	; 0
    486a:	8d e3       	ldi	r24, 0x3D	; 61
    486c:	90 e1       	ldi	r25, 0x10	; 16
    486e:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    4878:	e3 ce       	rjmp	.-570    	; 0x4640 <Firework()+0x42>

0000487a <Diamonds()>:
    487a:	ef 92       	push	r14
    487c:	ff 92       	push	r15
    487e:	0f 93       	push	r16
    4880:	1f 93       	push	r17
    4882:	cf 93       	push	r28
    4884:	df 93       	push	r29
    4886:	00 d0       	rcall	.+0      	; 0x4888 <Diamonds()+0xe>
    4888:	00 d0       	rcall	.+0      	; 0x488a <Diamonds()+0x10>
    488a:	00 d0       	rcall	.+0      	; 0x488c <Diamonds()+0x12>
    488c:	1f 92       	push	r1
    488e:	cd b7       	in	r28, 0x3d	; 61
    4890:	de b7       	in	r29, 0x3e	; 62
    4892:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    4896:	8e 31       	cpi	r24, 0x1E	; 30
    4898:	09 f4       	brne	.+2      	; 0x489c <Diamonds()+0x22>
    489a:	b0 c0       	rjmp	.+352    	; 0x49fc <Diamonds()+0x182>
    489c:	a0 f5       	brcc	.+104    	; 0x4906 <Diamonds()+0x8c>
    489e:	85 30       	cpi	r24, 0x05	; 5
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <Diamonds()+0x2a>
    48a2:	93 c0       	rjmp	.+294    	; 0x49ca <Diamonds()+0x150>
    48a4:	b8 f4       	brcc	.+46     	; 0x48d4 <Diamonds()+0x5a>
    48a6:	81 30       	cpi	r24, 0x01	; 1
    48a8:	09 f4       	brne	.+2      	; 0x48ac <Diamonds()+0x32>
    48aa:	88 c0       	rjmp	.+272    	; 0x49bc <Diamonds()+0x142>
    48ac:	08 f4       	brcc	.+2      	; 0x48b0 <Diamonds()+0x36>
    48ae:	6e c0       	rjmp	.+220    	; 0x498c <Diamonds()+0x112>
    48b0:	45 e0       	ldi	r20, 0x05	; 5
    48b2:	64 e0       	ldi	r22, 0x04	; 4
    48b4:	82 30       	cpi	r24, 0x02	; 2
    48b6:	09 f4       	brne	.+2      	; 0x48ba <Diamonds()+0x40>
    48b8:	83 c0       	rjmp	.+262    	; 0x49c0 <Diamonds()+0x146>
    48ba:	27 96       	adiw	r28, 0x07	; 7
    48bc:	0f b6       	in	r0, 0x3f	; 63
    48be:	f8 94       	cli
    48c0:	de bf       	out	0x3e, r29	; 62
    48c2:	0f be       	out	0x3f, r0	; 63
    48c4:	cd bf       	out	0x3d, r28	; 61
    48c6:	df 91       	pop	r29
    48c8:	cf 91       	pop	r28
    48ca:	1f 91       	pop	r17
    48cc:	0f 91       	pop	r16
    48ce:	ff 90       	pop	r15
    48d0:	ef 90       	pop	r14
    48d2:	08 95       	ret
    48d4:	8f 30       	cpi	r24, 0x0F	; 15
    48d6:	09 f4       	brne	.+2      	; 0x48da <Diamonds()+0x60>
    48d8:	7c c0       	rjmp	.+248    	; 0x49d2 <Diamonds()+0x158>
    48da:	40 f4       	brcc	.+16     	; 0x48ec <Diamonds()+0x72>
    48dc:	8a 30       	cpi	r24, 0x0A	; 10
    48de:	69 f7       	brne	.-38     	; 0x48ba <Diamonds()+0x40>
    48e0:	6f e0       	ldi	r22, 0x0F	; 15
    48e2:	86 e0       	ldi	r24, 0x06	; 6
    48e4:	9f e3       	ldi	r25, 0x3F	; 63
    48e6:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    48ea:	e7 cf       	rjmp	.-50     	; 0x48ba <Diamonds()+0x40>
    48ec:	84 31       	cpi	r24, 0x14	; 20
    48ee:	09 f4       	brne	.+2      	; 0x48f2 <Diamonds()+0x78>
    48f0:	74 c0       	rjmp	.+232    	; 0x49da <Diamonds()+0x160>
    48f2:	44 ef       	ldi	r20, 0xF4	; 244
    48f4:	51 e0       	ldi	r21, 0x01	; 1
    48f6:	6e e1       	ldi	r22, 0x1E	; 30
    48f8:	89 31       	cpi	r24, 0x19	; 25
    48fa:	f9 f6       	brne	.-66     	; 0x48ba <Diamonds()+0x40>
    48fc:	86 e0       	ldi	r24, 0x06	; 6
    48fe:	9f e3       	ldi	r25, 0x3F	; 63
    4900:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4904:	da cf       	rjmp	.-76     	; 0x48ba <Diamonds()+0x40>
    4906:	87 33       	cpi	r24, 0x37	; 55
    4908:	09 f4       	brne	.+2      	; 0x490c <Diamonds()+0x92>
    490a:	90 c0       	rjmp	.+288    	; 0x4a2c <Diamonds()+0x1b2>
    490c:	d0 f4       	brcc	.+52     	; 0x4942 <Diamonds()+0xc8>
    490e:	88 32       	cpi	r24, 0x28	; 40
    4910:	09 f4       	brne	.+2      	; 0x4914 <Diamonds()+0x9a>
    4912:	79 c0       	rjmp	.+242    	; 0x4a06 <Diamonds()+0x18c>
    4914:	50 f4       	brcc	.+20     	; 0x492a <Diamonds()+0xb0>
    4916:	44 ef       	ldi	r20, 0xF4	; 244
    4918:	51 e0       	ldi	r21, 0x01	; 1
    491a:	68 e2       	ldi	r22, 0x28	; 40
    491c:	83 32       	cpi	r24, 0x23	; 35
    491e:	69 f6       	brne	.-102    	; 0x48ba <Diamonds()+0x40>
    4920:	86 e0       	ldi	r24, 0x06	; 6
    4922:	9f e3       	ldi	r25, 0x3F	; 63
    4924:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4928:	c8 cf       	rjmp	.-112    	; 0x48ba <Diamonds()+0x40>
    492a:	8d 32       	cpi	r24, 0x2D	; 45
    492c:	09 f4       	brne	.+2      	; 0x4930 <Diamonds()+0xb6>
    492e:	78 c0       	rjmp	.+240    	; 0x4a20 <Diamonds()+0x1a6>
    4930:	82 33       	cpi	r24, 0x32	; 50
    4932:	19 f6       	brne	.-122    	; 0x48ba <Diamonds()+0x40>
    4934:	47 e3       	ldi	r20, 0x37	; 55
    4936:	67 e0       	ldi	r22, 0x07	; 7
    4938:	8d ef       	ldi	r24, 0xFD	; 253
    493a:	9e e3       	ldi	r25, 0x3E	; 62
    493c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4940:	bc cf       	rjmp	.-136    	; 0x48ba <Diamonds()+0x40>
    4942:	81 34       	cpi	r24, 0x41	; 65
    4944:	09 f4       	brne	.+2      	; 0x4948 <Diamonds()+0xce>
    4946:	76 c0       	rjmp	.+236    	; 0x4a34 <Diamonds()+0x1ba>
    4948:	90 f4       	brcc	.+36     	; 0x496e <Diamonds()+0xf4>
    494a:	8c 33       	cpi	r24, 0x3C	; 60
    494c:	09 f0       	breq	.+2      	; 0x4950 <Diamonds()+0xd6>
    494e:	b5 cf       	rjmp	.-150    	; 0x48ba <Diamonds()+0x40>
    4950:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4954:	7c 01       	movw	r14, r24
    4956:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    495a:	8c 01       	movw	r16, r24
    495c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4960:	9c 01       	movw	r18, r24
    4962:	4b e4       	ldi	r20, 0x4B	; 75
    4964:	50 e0       	ldi	r21, 0x00	; 0
    4966:	61 e4       	ldi	r22, 0x41	; 65
    4968:	84 e4       	ldi	r24, 0x44	; 68
    496a:	9f e2       	ldi	r25, 0x2F	; 47
    496c:	44 c0       	rjmp	.+136    	; 0x49f6 <Diamonds()+0x17c>
    496e:	86 34       	cpi	r24, 0x46	; 70
    4970:	09 f4       	brne	.+2      	; 0x4974 <Diamonds()+0xfa>
    4972:	65 c0       	rjmp	.+202    	; 0x4a3e <Diamonds()+0x1c4>
    4974:	84 36       	cpi	r24, 0x64	; 100
    4976:	09 f0       	breq	.+2      	; 0x497a <Diamonds()+0x100>
    4978:	a0 cf       	rjmp	.-192    	; 0x48ba <Diamonds()+0x40>
    497a:	60 e0       	ldi	r22, 0x00	; 0
    497c:	8d e3       	ldi	r24, 0x3D	; 61
    497e:	90 e1       	ldi	r25, 0x10	; 16
    4980:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    4984:	80 e0       	ldi	r24, 0x00	; 0
    4986:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    498a:	97 cf       	rjmp	.-210    	; 0x48ba <Diamonds()+0x40>
    498c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    4990:	7c 01       	movw	r14, r24
    4992:	61 ef       	ldi	r22, 0xF1	; 241
    4994:	71 e0       	ldi	r23, 0x01	; 1
    4996:	ce 01       	movw	r24, r28
    4998:	01 96       	adiw	r24, 0x01	; 1
    499a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    499e:	01 e0       	ldi	r16, 0x01	; 1
    49a0:	97 01       	movw	r18, r14
    49a2:	4b e4       	ldi	r20, 0x4B	; 75
    49a4:	50 e0       	ldi	r21, 0x00	; 0
    49a6:	6e e0       	ldi	r22, 0x0E	; 14
    49a8:	7d e3       	ldi	r23, 0x3D	; 61
    49aa:	ce 01       	movw	r24, r28
    49ac:	01 96       	adiw	r24, 0x01	; 1
    49ae:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    49b2:	ce 01       	movw	r24, r28
    49b4:	01 96       	adiw	r24, 0x01	; 1
    49b6:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    49ba:	7f cf       	rjmp	.-258    	; 0x48ba <Diamonds()+0x40>
    49bc:	42 e0       	ldi	r20, 0x02	; 2
    49be:	63 e0       	ldi	r22, 0x03	; 3
    49c0:	83 e8       	ldi	r24, 0x83	; 131
    49c2:	9f e1       	ldi	r25, 0x1F	; 31
    49c4:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    49c8:	78 cf       	rjmp	.-272    	; 0x48ba <Diamonds()+0x40>
    49ca:	44 ef       	ldi	r20, 0xF4	; 244
    49cc:	51 e0       	ldi	r21, 0x01	; 1
    49ce:	6a e0       	ldi	r22, 0x0A	; 10
    49d0:	95 cf       	rjmp	.-214    	; 0x48fc <Diamonds()+0x82>
    49d2:	44 ef       	ldi	r20, 0xF4	; 244
    49d4:	51 e0       	ldi	r21, 0x01	; 1
    49d6:	64 e1       	ldi	r22, 0x14	; 20
    49d8:	a3 cf       	rjmp	.-186    	; 0x4920 <Diamonds()+0xa6>
    49da:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    49de:	7c 01       	movw	r14, r24
    49e0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    49e4:	8c 01       	movw	r16, r24
    49e6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    49ea:	9c 01       	movw	r18, r24
    49ec:	4b e4       	ldi	r20, 0x4B	; 75
    49ee:	50 e0       	ldi	r21, 0x00	; 0
    49f0:	69 e1       	ldi	r22, 0x19	; 25
    49f2:	86 e0       	ldi	r24, 0x06	; 6
    49f4:	9f e3       	ldi	r25, 0x3F	; 63
    49f6:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    49fa:	5f cf       	rjmp	.-322    	; 0x48ba <Diamonds()+0x40>
    49fc:	43 e2       	ldi	r20, 0x23	; 35
    49fe:	64 e0       	ldi	r22, 0x04	; 4
    4a00:	86 e0       	ldi	r24, 0x06	; 6
    4a02:	9f e3       	ldi	r25, 0x3F	; 63
    4a04:	df cf       	rjmp	.-66     	; 0x49c4 <Diamonds()+0x14a>
    4a06:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4a0a:	7c 01       	movw	r14, r24
    4a0c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4a10:	8c 01       	movw	r16, r24
    4a12:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4a16:	9c 01       	movw	r18, r24
    4a18:	4b e4       	ldi	r20, 0x4B	; 75
    4a1a:	50 e0       	ldi	r21, 0x00	; 0
    4a1c:	6d e2       	ldi	r22, 0x2D	; 45
    4a1e:	e9 cf       	rjmp	.-46     	; 0x49f2 <Diamonds()+0x178>
    4a20:	62 e3       	ldi	r22, 0x32	; 50
    4a22:	82 e7       	ldi	r24, 0x72	; 114
    4a24:	9f e1       	ldi	r25, 0x1F	; 31
    4a26:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    4a2a:	47 cf       	rjmp	.-370    	; 0x48ba <Diamonds()+0x40>
    4a2c:	44 ef       	ldi	r20, 0xF4	; 244
    4a2e:	51 e0       	ldi	r21, 0x01	; 1
    4a30:	6c e3       	ldi	r22, 0x3C	; 60
    4a32:	76 cf       	rjmp	.-276    	; 0x4920 <Diamonds()+0xa6>
    4a34:	46 e4       	ldi	r20, 0x46	; 70
    4a36:	6c e0       	ldi	r22, 0x0C	; 12
    4a38:	89 eb       	ldi	r24, 0xB9	; 185
    4a3a:	9f e0       	ldi	r25, 0x0F	; 15
    4a3c:	7f cf       	rjmp	.-258    	; 0x493c <Diamonds()+0xc2>
    4a3e:	64 e6       	ldi	r22, 0x64	; 100
    4a40:	80 e1       	ldi	r24, 0x10	; 16
    4a42:	97 e2       	ldi	r25, 0x27	; 39
    4a44:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    4a48:	38 cf       	rjmp	.-400    	; 0x48ba <Diamonds()+0x40>

00004a4a <SetFire()>:
    4a4a:	ef 92       	push	r14
    4a4c:	ff 92       	push	r15
    4a4e:	0f 93       	push	r16
    4a50:	1f 93       	push	r17
    4a52:	cf 93       	push	r28
    4a54:	df 93       	push	r29
    4a56:	00 d0       	rcall	.+0      	; 0x4a58 <SetFire()+0xe>
    4a58:	00 d0       	rcall	.+0      	; 0x4a5a <SetFire()+0x10>
    4a5a:	00 d0       	rcall	.+0      	; 0x4a5c <SetFire()+0x12>
    4a5c:	1f 92       	push	r1
    4a5e:	cd b7       	in	r28, 0x3d	; 61
    4a60:	de b7       	in	r29, 0x3e	; 62
    4a62:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    4a66:	8e 31       	cpi	r24, 0x1E	; 30
    4a68:	09 f4       	brne	.+2      	; 0x4a6c <SetFire()+0x22>
    4a6a:	b0 c0       	rjmp	.+352    	; 0x4bcc <SetFire()+0x182>
    4a6c:	a0 f5       	brcc	.+104    	; 0x4ad6 <SetFire()+0x8c>
    4a6e:	85 30       	cpi	r24, 0x05	; 5
    4a70:	09 f4       	brne	.+2      	; 0x4a74 <SetFire()+0x2a>
    4a72:	93 c0       	rjmp	.+294    	; 0x4b9a <SetFire()+0x150>
    4a74:	b8 f4       	brcc	.+46     	; 0x4aa4 <SetFire()+0x5a>
    4a76:	81 30       	cpi	r24, 0x01	; 1
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <SetFire()+0x32>
    4a7a:	88 c0       	rjmp	.+272    	; 0x4b8c <SetFire()+0x142>
    4a7c:	08 f4       	brcc	.+2      	; 0x4a80 <SetFire()+0x36>
    4a7e:	6e c0       	rjmp	.+220    	; 0x4b5c <SetFire()+0x112>
    4a80:	45 e0       	ldi	r20, 0x05	; 5
    4a82:	64 e0       	ldi	r22, 0x04	; 4
    4a84:	82 30       	cpi	r24, 0x02	; 2
    4a86:	09 f4       	brne	.+2      	; 0x4a8a <SetFire()+0x40>
    4a88:	83 c0       	rjmp	.+262    	; 0x4b90 <SetFire()+0x146>
    4a8a:	27 96       	adiw	r28, 0x07	; 7
    4a8c:	0f b6       	in	r0, 0x3f	; 63
    4a8e:	f8 94       	cli
    4a90:	de bf       	out	0x3e, r29	; 62
    4a92:	0f be       	out	0x3f, r0	; 63
    4a94:	cd bf       	out	0x3d, r28	; 61
    4a96:	df 91       	pop	r29
    4a98:	cf 91       	pop	r28
    4a9a:	1f 91       	pop	r17
    4a9c:	0f 91       	pop	r16
    4a9e:	ff 90       	pop	r15
    4aa0:	ef 90       	pop	r14
    4aa2:	08 95       	ret
    4aa4:	8f 30       	cpi	r24, 0x0F	; 15
    4aa6:	09 f4       	brne	.+2      	; 0x4aaa <SetFire()+0x60>
    4aa8:	7c c0       	rjmp	.+248    	; 0x4ba2 <SetFire()+0x158>
    4aaa:	40 f4       	brcc	.+16     	; 0x4abc <SetFire()+0x72>
    4aac:	8a 30       	cpi	r24, 0x0A	; 10
    4aae:	69 f7       	brne	.-38     	; 0x4a8a <SetFire()+0x40>
    4ab0:	6f e0       	ldi	r22, 0x0F	; 15
    4ab2:	86 e0       	ldi	r24, 0x06	; 6
    4ab4:	9f e3       	ldi	r25, 0x3F	; 63
    4ab6:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    4aba:	e7 cf       	rjmp	.-50     	; 0x4a8a <SetFire()+0x40>
    4abc:	84 31       	cpi	r24, 0x14	; 20
    4abe:	09 f4       	brne	.+2      	; 0x4ac2 <SetFire()+0x78>
    4ac0:	74 c0       	rjmp	.+232    	; 0x4baa <SetFire()+0x160>
    4ac2:	44 ef       	ldi	r20, 0xF4	; 244
    4ac4:	51 e0       	ldi	r21, 0x01	; 1
    4ac6:	6e e1       	ldi	r22, 0x1E	; 30
    4ac8:	89 31       	cpi	r24, 0x19	; 25
    4aca:	f9 f6       	brne	.-66     	; 0x4a8a <SetFire()+0x40>
    4acc:	86 e0       	ldi	r24, 0x06	; 6
    4ace:	9f e3       	ldi	r25, 0x3F	; 63
    4ad0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4ad4:	da cf       	rjmp	.-76     	; 0x4a8a <SetFire()+0x40>
    4ad6:	87 33       	cpi	r24, 0x37	; 55
    4ad8:	09 f4       	brne	.+2      	; 0x4adc <SetFire()+0x92>
    4ada:	90 c0       	rjmp	.+288    	; 0x4bfc <SetFire()+0x1b2>
    4adc:	d0 f4       	brcc	.+52     	; 0x4b12 <SetFire()+0xc8>
    4ade:	88 32       	cpi	r24, 0x28	; 40
    4ae0:	09 f4       	brne	.+2      	; 0x4ae4 <SetFire()+0x9a>
    4ae2:	79 c0       	rjmp	.+242    	; 0x4bd6 <SetFire()+0x18c>
    4ae4:	50 f4       	brcc	.+20     	; 0x4afa <SetFire()+0xb0>
    4ae6:	44 ef       	ldi	r20, 0xF4	; 244
    4ae8:	51 e0       	ldi	r21, 0x01	; 1
    4aea:	68 e2       	ldi	r22, 0x28	; 40
    4aec:	83 32       	cpi	r24, 0x23	; 35
    4aee:	69 f6       	brne	.-102    	; 0x4a8a <SetFire()+0x40>
    4af0:	86 e0       	ldi	r24, 0x06	; 6
    4af2:	9f e3       	ldi	r25, 0x3F	; 63
    4af4:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4af8:	c8 cf       	rjmp	.-112    	; 0x4a8a <SetFire()+0x40>
    4afa:	8d 32       	cpi	r24, 0x2D	; 45
    4afc:	09 f4       	brne	.+2      	; 0x4b00 <SetFire()+0xb6>
    4afe:	78 c0       	rjmp	.+240    	; 0x4bf0 <SetFire()+0x1a6>
    4b00:	82 33       	cpi	r24, 0x32	; 50
    4b02:	19 f6       	brne	.-122    	; 0x4a8a <SetFire()+0x40>
    4b04:	47 e3       	ldi	r20, 0x37	; 55
    4b06:	67 e0       	ldi	r22, 0x07	; 7
    4b08:	8d ef       	ldi	r24, 0xFD	; 253
    4b0a:	9e e3       	ldi	r25, 0x3E	; 62
    4b0c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4b10:	bc cf       	rjmp	.-136    	; 0x4a8a <SetFire()+0x40>
    4b12:	81 34       	cpi	r24, 0x41	; 65
    4b14:	09 f4       	brne	.+2      	; 0x4b18 <SetFire()+0xce>
    4b16:	76 c0       	rjmp	.+236    	; 0x4c04 <SetFire()+0x1ba>
    4b18:	90 f4       	brcc	.+36     	; 0x4b3e <SetFire()+0xf4>
    4b1a:	8c 33       	cpi	r24, 0x3C	; 60
    4b1c:	09 f0       	breq	.+2      	; 0x4b20 <SetFire()+0xd6>
    4b1e:	b5 cf       	rjmp	.-150    	; 0x4a8a <SetFire()+0x40>
    4b20:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4b24:	7c 01       	movw	r14, r24
    4b26:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4b2a:	8c 01       	movw	r16, r24
    4b2c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4b30:	9c 01       	movw	r18, r24
    4b32:	4b e4       	ldi	r20, 0x4B	; 75
    4b34:	50 e0       	ldi	r21, 0x00	; 0
    4b36:	61 e4       	ldi	r22, 0x41	; 65
    4b38:	84 e4       	ldi	r24, 0x44	; 68
    4b3a:	9f e2       	ldi	r25, 0x2F	; 47
    4b3c:	44 c0       	rjmp	.+136    	; 0x4bc6 <SetFire()+0x17c>
    4b3e:	86 34       	cpi	r24, 0x46	; 70
    4b40:	09 f4       	brne	.+2      	; 0x4b44 <SetFire()+0xfa>
    4b42:	65 c0       	rjmp	.+202    	; 0x4c0e <SetFire()+0x1c4>
    4b44:	84 36       	cpi	r24, 0x64	; 100
    4b46:	09 f0       	breq	.+2      	; 0x4b4a <SetFire()+0x100>
    4b48:	a0 cf       	rjmp	.-192    	; 0x4a8a <SetFire()+0x40>
    4b4a:	60 e0       	ldi	r22, 0x00	; 0
    4b4c:	8d e3       	ldi	r24, 0x3D	; 61
    4b4e:	90 e1       	ldi	r25, 0x10	; 16
    4b50:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    4b54:	80 e0       	ldi	r24, 0x00	; 0
    4b56:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    4b5a:	97 cf       	rjmp	.-210    	; 0x4a8a <SetFire()+0x40>
    4b5c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    4b60:	7c 01       	movw	r14, r24
    4b62:	65 e0       	ldi	r22, 0x05	; 5
    4b64:	72 e0       	ldi	r23, 0x02	; 2
    4b66:	ce 01       	movw	r24, r28
    4b68:	01 96       	adiw	r24, 0x01	; 1
    4b6a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    4b6e:	01 e0       	ldi	r16, 0x01	; 1
    4b70:	97 01       	movw	r18, r14
    4b72:	4b e4       	ldi	r20, 0x4B	; 75
    4b74:	50 e0       	ldi	r21, 0x00	; 0
    4b76:	6e e0       	ldi	r22, 0x0E	; 14
    4b78:	7d e3       	ldi	r23, 0x3D	; 61
    4b7a:	ce 01       	movw	r24, r28
    4b7c:	01 96       	adiw	r24, 0x01	; 1
    4b7e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4b82:	ce 01       	movw	r24, r28
    4b84:	01 96       	adiw	r24, 0x01	; 1
    4b86:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    4b8a:	7f cf       	rjmp	.-258    	; 0x4a8a <SetFire()+0x40>
    4b8c:	42 e0       	ldi	r20, 0x02	; 2
    4b8e:	63 e0       	ldi	r22, 0x03	; 3
    4b90:	83 e8       	ldi	r24, 0x83	; 131
    4b92:	9f e1       	ldi	r25, 0x1F	; 31
    4b94:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    4b98:	78 cf       	rjmp	.-272    	; 0x4a8a <SetFire()+0x40>
    4b9a:	44 ef       	ldi	r20, 0xF4	; 244
    4b9c:	51 e0       	ldi	r21, 0x01	; 1
    4b9e:	6a e0       	ldi	r22, 0x0A	; 10
    4ba0:	95 cf       	rjmp	.-214    	; 0x4acc <SetFire()+0x82>
    4ba2:	44 ef       	ldi	r20, 0xF4	; 244
    4ba4:	51 e0       	ldi	r21, 0x01	; 1
    4ba6:	64 e1       	ldi	r22, 0x14	; 20
    4ba8:	a3 cf       	rjmp	.-186    	; 0x4af0 <SetFire()+0xa6>
    4baa:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4bae:	7c 01       	movw	r14, r24
    4bb0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4bb4:	8c 01       	movw	r16, r24
    4bb6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4bba:	9c 01       	movw	r18, r24
    4bbc:	4b e4       	ldi	r20, 0x4B	; 75
    4bbe:	50 e0       	ldi	r21, 0x00	; 0
    4bc0:	69 e1       	ldi	r22, 0x19	; 25
    4bc2:	86 e0       	ldi	r24, 0x06	; 6
    4bc4:	9f e3       	ldi	r25, 0x3F	; 63
    4bc6:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4bca:	5f cf       	rjmp	.-322    	; 0x4a8a <SetFire()+0x40>
    4bcc:	43 e2       	ldi	r20, 0x23	; 35
    4bce:	64 e0       	ldi	r22, 0x04	; 4
    4bd0:	86 e0       	ldi	r24, 0x06	; 6
    4bd2:	9f e3       	ldi	r25, 0x3F	; 63
    4bd4:	df cf       	rjmp	.-66     	; 0x4b94 <SetFire()+0x14a>
    4bd6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4bda:	7c 01       	movw	r14, r24
    4bdc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4be0:	8c 01       	movw	r16, r24
    4be2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4be6:	9c 01       	movw	r18, r24
    4be8:	4b e4       	ldi	r20, 0x4B	; 75
    4bea:	50 e0       	ldi	r21, 0x00	; 0
    4bec:	6d e2       	ldi	r22, 0x2D	; 45
    4bee:	e9 cf       	rjmp	.-46     	; 0x4bc2 <SetFire()+0x178>
    4bf0:	62 e3       	ldi	r22, 0x32	; 50
    4bf2:	82 e7       	ldi	r24, 0x72	; 114
    4bf4:	9f e1       	ldi	r25, 0x1F	; 31
    4bf6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    4bfa:	47 cf       	rjmp	.-370    	; 0x4a8a <SetFire()+0x40>
    4bfc:	44 ef       	ldi	r20, 0xF4	; 244
    4bfe:	51 e0       	ldi	r21, 0x01	; 1
    4c00:	6c e3       	ldi	r22, 0x3C	; 60
    4c02:	76 cf       	rjmp	.-276    	; 0x4af0 <SetFire()+0xa6>
    4c04:	46 e4       	ldi	r20, 0x46	; 70
    4c06:	6c e0       	ldi	r22, 0x0C	; 12
    4c08:	89 eb       	ldi	r24, 0xB9	; 185
    4c0a:	9f e0       	ldi	r25, 0x0F	; 15
    4c0c:	7f cf       	rjmp	.-258    	; 0x4b0c <SetFire()+0xc2>
    4c0e:	64 e6       	ldi	r22, 0x64	; 100
    4c10:	80 e1       	ldi	r24, 0x10	; 16
    4c12:	97 e2       	ldi	r25, 0x27	; 39
    4c14:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    4c18:	38 cf       	rjmp	.-400    	; 0x4a8a <SetFire()+0x40>

00004c1a <Chandelier()>:
    4c1a:	ef 92       	push	r14
    4c1c:	ff 92       	push	r15
    4c1e:	0f 93       	push	r16
    4c20:	1f 93       	push	r17
    4c22:	cf 93       	push	r28
    4c24:	df 93       	push	r29
    4c26:	00 d0       	rcall	.+0      	; 0x4c28 <Chandelier()+0xe>
    4c28:	00 d0       	rcall	.+0      	; 0x4c2a <Chandelier()+0x10>
    4c2a:	00 d0       	rcall	.+0      	; 0x4c2c <Chandelier()+0x12>
    4c2c:	1f 92       	push	r1
    4c2e:	cd b7       	in	r28, 0x3d	; 61
    4c30:	de b7       	in	r29, 0x3e	; 62
    4c32:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    4c36:	8e 31       	cpi	r24, 0x1E	; 30
    4c38:	09 f4       	brne	.+2      	; 0x4c3c <Chandelier()+0x22>
    4c3a:	b0 c0       	rjmp	.+352    	; 0x4d9c <Chandelier()+0x182>
    4c3c:	a0 f5       	brcc	.+104    	; 0x4ca6 <Chandelier()+0x8c>
    4c3e:	85 30       	cpi	r24, 0x05	; 5
    4c40:	09 f4       	brne	.+2      	; 0x4c44 <Chandelier()+0x2a>
    4c42:	93 c0       	rjmp	.+294    	; 0x4d6a <Chandelier()+0x150>
    4c44:	b8 f4       	brcc	.+46     	; 0x4c74 <Chandelier()+0x5a>
    4c46:	81 30       	cpi	r24, 0x01	; 1
    4c48:	09 f4       	brne	.+2      	; 0x4c4c <Chandelier()+0x32>
    4c4a:	88 c0       	rjmp	.+272    	; 0x4d5c <Chandelier()+0x142>
    4c4c:	08 f4       	brcc	.+2      	; 0x4c50 <Chandelier()+0x36>
    4c4e:	6e c0       	rjmp	.+220    	; 0x4d2c <Chandelier()+0x112>
    4c50:	45 e0       	ldi	r20, 0x05	; 5
    4c52:	64 e0       	ldi	r22, 0x04	; 4
    4c54:	82 30       	cpi	r24, 0x02	; 2
    4c56:	09 f4       	brne	.+2      	; 0x4c5a <Chandelier()+0x40>
    4c58:	83 c0       	rjmp	.+262    	; 0x4d60 <Chandelier()+0x146>
    4c5a:	27 96       	adiw	r28, 0x07	; 7
    4c5c:	0f b6       	in	r0, 0x3f	; 63
    4c5e:	f8 94       	cli
    4c60:	de bf       	out	0x3e, r29	; 62
    4c62:	0f be       	out	0x3f, r0	; 63
    4c64:	cd bf       	out	0x3d, r28	; 61
    4c66:	df 91       	pop	r29
    4c68:	cf 91       	pop	r28
    4c6a:	1f 91       	pop	r17
    4c6c:	0f 91       	pop	r16
    4c6e:	ff 90       	pop	r15
    4c70:	ef 90       	pop	r14
    4c72:	08 95       	ret
    4c74:	8f 30       	cpi	r24, 0x0F	; 15
    4c76:	09 f4       	brne	.+2      	; 0x4c7a <Chandelier()+0x60>
    4c78:	7c c0       	rjmp	.+248    	; 0x4d72 <Chandelier()+0x158>
    4c7a:	40 f4       	brcc	.+16     	; 0x4c8c <Chandelier()+0x72>
    4c7c:	8a 30       	cpi	r24, 0x0A	; 10
    4c7e:	69 f7       	brne	.-38     	; 0x4c5a <Chandelier()+0x40>
    4c80:	6f e0       	ldi	r22, 0x0F	; 15
    4c82:	86 e0       	ldi	r24, 0x06	; 6
    4c84:	9f e3       	ldi	r25, 0x3F	; 63
    4c86:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    4c8a:	e7 cf       	rjmp	.-50     	; 0x4c5a <Chandelier()+0x40>
    4c8c:	84 31       	cpi	r24, 0x14	; 20
    4c8e:	09 f4       	brne	.+2      	; 0x4c92 <Chandelier()+0x78>
    4c90:	74 c0       	rjmp	.+232    	; 0x4d7a <Chandelier()+0x160>
    4c92:	44 ef       	ldi	r20, 0xF4	; 244
    4c94:	51 e0       	ldi	r21, 0x01	; 1
    4c96:	6e e1       	ldi	r22, 0x1E	; 30
    4c98:	89 31       	cpi	r24, 0x19	; 25
    4c9a:	f9 f6       	brne	.-66     	; 0x4c5a <Chandelier()+0x40>
    4c9c:	86 e0       	ldi	r24, 0x06	; 6
    4c9e:	9f e3       	ldi	r25, 0x3F	; 63
    4ca0:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4ca4:	da cf       	rjmp	.-76     	; 0x4c5a <Chandelier()+0x40>
    4ca6:	87 33       	cpi	r24, 0x37	; 55
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <Chandelier()+0x92>
    4caa:	90 c0       	rjmp	.+288    	; 0x4dcc <Chandelier()+0x1b2>
    4cac:	d0 f4       	brcc	.+52     	; 0x4ce2 <Chandelier()+0xc8>
    4cae:	88 32       	cpi	r24, 0x28	; 40
    4cb0:	09 f4       	brne	.+2      	; 0x4cb4 <Chandelier()+0x9a>
    4cb2:	79 c0       	rjmp	.+242    	; 0x4da6 <Chandelier()+0x18c>
    4cb4:	50 f4       	brcc	.+20     	; 0x4cca <Chandelier()+0xb0>
    4cb6:	44 ef       	ldi	r20, 0xF4	; 244
    4cb8:	51 e0       	ldi	r21, 0x01	; 1
    4cba:	68 e2       	ldi	r22, 0x28	; 40
    4cbc:	83 32       	cpi	r24, 0x23	; 35
    4cbe:	69 f6       	brne	.-102    	; 0x4c5a <Chandelier()+0x40>
    4cc0:	86 e0       	ldi	r24, 0x06	; 6
    4cc2:	9f e3       	ldi	r25, 0x3F	; 63
    4cc4:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4cc8:	c8 cf       	rjmp	.-112    	; 0x4c5a <Chandelier()+0x40>
    4cca:	8d 32       	cpi	r24, 0x2D	; 45
    4ccc:	09 f4       	brne	.+2      	; 0x4cd0 <Chandelier()+0xb6>
    4cce:	78 c0       	rjmp	.+240    	; 0x4dc0 <Chandelier()+0x1a6>
    4cd0:	82 33       	cpi	r24, 0x32	; 50
    4cd2:	19 f6       	brne	.-122    	; 0x4c5a <Chandelier()+0x40>
    4cd4:	47 e3       	ldi	r20, 0x37	; 55
    4cd6:	67 e0       	ldi	r22, 0x07	; 7
    4cd8:	8d ef       	ldi	r24, 0xFD	; 253
    4cda:	9e e3       	ldi	r25, 0x3E	; 62
    4cdc:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4ce0:	bc cf       	rjmp	.-136    	; 0x4c5a <Chandelier()+0x40>
    4ce2:	81 34       	cpi	r24, 0x41	; 65
    4ce4:	09 f4       	brne	.+2      	; 0x4ce8 <Chandelier()+0xce>
    4ce6:	76 c0       	rjmp	.+236    	; 0x4dd4 <Chandelier()+0x1ba>
    4ce8:	90 f4       	brcc	.+36     	; 0x4d0e <Chandelier()+0xf4>
    4cea:	8c 33       	cpi	r24, 0x3C	; 60
    4cec:	09 f0       	breq	.+2      	; 0x4cf0 <Chandelier()+0xd6>
    4cee:	b5 cf       	rjmp	.-150    	; 0x4c5a <Chandelier()+0x40>
    4cf0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4cf4:	7c 01       	movw	r14, r24
    4cf6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4cfa:	8c 01       	movw	r16, r24
    4cfc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4d00:	9c 01       	movw	r18, r24
    4d02:	4b e4       	ldi	r20, 0x4B	; 75
    4d04:	50 e0       	ldi	r21, 0x00	; 0
    4d06:	61 e4       	ldi	r22, 0x41	; 65
    4d08:	84 e4       	ldi	r24, 0x44	; 68
    4d0a:	9f e2       	ldi	r25, 0x2F	; 47
    4d0c:	44 c0       	rjmp	.+136    	; 0x4d96 <Chandelier()+0x17c>
    4d0e:	86 34       	cpi	r24, 0x46	; 70
    4d10:	09 f4       	brne	.+2      	; 0x4d14 <Chandelier()+0xfa>
    4d12:	65 c0       	rjmp	.+202    	; 0x4dde <Chandelier()+0x1c4>
    4d14:	84 36       	cpi	r24, 0x64	; 100
    4d16:	09 f0       	breq	.+2      	; 0x4d1a <Chandelier()+0x100>
    4d18:	a0 cf       	rjmp	.-192    	; 0x4c5a <Chandelier()+0x40>
    4d1a:	60 e0       	ldi	r22, 0x00	; 0
    4d1c:	8d e3       	ldi	r24, 0x3D	; 61
    4d1e:	90 e1       	ldi	r25, 0x10	; 16
    4d20:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    4d24:	80 e0       	ldi	r24, 0x00	; 0
    4d26:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    4d2a:	97 cf       	rjmp	.-210    	; 0x4c5a <Chandelier()+0x40>
    4d2c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    4d30:	7c 01       	movw	r14, r24
    4d32:	63 e2       	ldi	r22, 0x23	; 35
    4d34:	72 e0       	ldi	r23, 0x02	; 2
    4d36:	ce 01       	movw	r24, r28
    4d38:	01 96       	adiw	r24, 0x01	; 1
    4d3a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    4d3e:	01 e0       	ldi	r16, 0x01	; 1
    4d40:	97 01       	movw	r18, r14
    4d42:	4b e4       	ldi	r20, 0x4B	; 75
    4d44:	50 e0       	ldi	r21, 0x00	; 0
    4d46:	6e e0       	ldi	r22, 0x0E	; 14
    4d48:	7d e3       	ldi	r23, 0x3D	; 61
    4d4a:	ce 01       	movw	r24, r28
    4d4c:	01 96       	adiw	r24, 0x01	; 1
    4d4e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4d52:	ce 01       	movw	r24, r28
    4d54:	01 96       	adiw	r24, 0x01	; 1
    4d56:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    4d5a:	7f cf       	rjmp	.-258    	; 0x4c5a <Chandelier()+0x40>
    4d5c:	42 e0       	ldi	r20, 0x02	; 2
    4d5e:	63 e0       	ldi	r22, 0x03	; 3
    4d60:	83 e8       	ldi	r24, 0x83	; 131
    4d62:	9f e1       	ldi	r25, 0x1F	; 31
    4d64:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    4d68:	78 cf       	rjmp	.-272    	; 0x4c5a <Chandelier()+0x40>
    4d6a:	44 ef       	ldi	r20, 0xF4	; 244
    4d6c:	51 e0       	ldi	r21, 0x01	; 1
    4d6e:	6a e0       	ldi	r22, 0x0A	; 10
    4d70:	95 cf       	rjmp	.-214    	; 0x4c9c <Chandelier()+0x82>
    4d72:	44 ef       	ldi	r20, 0xF4	; 244
    4d74:	51 e0       	ldi	r21, 0x01	; 1
    4d76:	64 e1       	ldi	r22, 0x14	; 20
    4d78:	a3 cf       	rjmp	.-186    	; 0x4cc0 <Chandelier()+0xa6>
    4d7a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4d7e:	7c 01       	movw	r14, r24
    4d80:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4d84:	8c 01       	movw	r16, r24
    4d86:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4d8a:	9c 01       	movw	r18, r24
    4d8c:	4b e4       	ldi	r20, 0x4B	; 75
    4d8e:	50 e0       	ldi	r21, 0x00	; 0
    4d90:	69 e1       	ldi	r22, 0x19	; 25
    4d92:	86 e0       	ldi	r24, 0x06	; 6
    4d94:	9f e3       	ldi	r25, 0x3F	; 63
    4d96:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4d9a:	5f cf       	rjmp	.-322    	; 0x4c5a <Chandelier()+0x40>
    4d9c:	43 e2       	ldi	r20, 0x23	; 35
    4d9e:	64 e0       	ldi	r22, 0x04	; 4
    4da0:	86 e0       	ldi	r24, 0x06	; 6
    4da2:	9f e3       	ldi	r25, 0x3F	; 63
    4da4:	df cf       	rjmp	.-66     	; 0x4d64 <Chandelier()+0x14a>
    4da6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4daa:	7c 01       	movw	r14, r24
    4dac:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4db0:	8c 01       	movw	r16, r24
    4db2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4db6:	9c 01       	movw	r18, r24
    4db8:	4b e4       	ldi	r20, 0x4B	; 75
    4dba:	50 e0       	ldi	r21, 0x00	; 0
    4dbc:	6d e2       	ldi	r22, 0x2D	; 45
    4dbe:	e9 cf       	rjmp	.-46     	; 0x4d92 <Chandelier()+0x178>
    4dc0:	62 e3       	ldi	r22, 0x32	; 50
    4dc2:	82 e7       	ldi	r24, 0x72	; 114
    4dc4:	9f e1       	ldi	r25, 0x1F	; 31
    4dc6:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    4dca:	47 cf       	rjmp	.-370    	; 0x4c5a <Chandelier()+0x40>
    4dcc:	44 ef       	ldi	r20, 0xF4	; 244
    4dce:	51 e0       	ldi	r21, 0x01	; 1
    4dd0:	6c e3       	ldi	r22, 0x3C	; 60
    4dd2:	76 cf       	rjmp	.-276    	; 0x4cc0 <Chandelier()+0xa6>
    4dd4:	46 e4       	ldi	r20, 0x46	; 70
    4dd6:	6c e0       	ldi	r22, 0x0C	; 12
    4dd8:	89 eb       	ldi	r24, 0xB9	; 185
    4dda:	9f e0       	ldi	r25, 0x0F	; 15
    4ddc:	7f cf       	rjmp	.-258    	; 0x4cdc <Chandelier()+0xc2>
    4dde:	64 e6       	ldi	r22, 0x64	; 100
    4de0:	80 e1       	ldi	r24, 0x10	; 16
    4de2:	97 e2       	ldi	r25, 0x27	; 39
    4de4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    4de8:	38 cf       	rjmp	.-400    	; 0x4c5a <Chandelier()+0x40>

00004dea <Titanium()>:
    4dea:	ef 92       	push	r14
    4dec:	ff 92       	push	r15
    4dee:	0f 93       	push	r16
    4df0:	1f 93       	push	r17
    4df2:	cf 93       	push	r28
    4df4:	df 93       	push	r29
    4df6:	00 d0       	rcall	.+0      	; 0x4df8 <Titanium()+0xe>
    4df8:	00 d0       	rcall	.+0      	; 0x4dfa <Titanium()+0x10>
    4dfa:	00 d0       	rcall	.+0      	; 0x4dfc <Titanium()+0x12>
    4dfc:	1f 92       	push	r1
    4dfe:	cd b7       	in	r28, 0x3d	; 61
    4e00:	de b7       	in	r29, 0x3e	; 62
    4e02:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    4e06:	8e 31       	cpi	r24, 0x1E	; 30
    4e08:	09 f4       	brne	.+2      	; 0x4e0c <Titanium()+0x22>
    4e0a:	b0 c0       	rjmp	.+352    	; 0x4f6c <Titanium()+0x182>
    4e0c:	a0 f5       	brcc	.+104    	; 0x4e76 <Titanium()+0x8c>
    4e0e:	85 30       	cpi	r24, 0x05	; 5
    4e10:	09 f4       	brne	.+2      	; 0x4e14 <Titanium()+0x2a>
    4e12:	93 c0       	rjmp	.+294    	; 0x4f3a <Titanium()+0x150>
    4e14:	b8 f4       	brcc	.+46     	; 0x4e44 <Titanium()+0x5a>
    4e16:	81 30       	cpi	r24, 0x01	; 1
    4e18:	09 f4       	brne	.+2      	; 0x4e1c <Titanium()+0x32>
    4e1a:	88 c0       	rjmp	.+272    	; 0x4f2c <Titanium()+0x142>
    4e1c:	08 f4       	brcc	.+2      	; 0x4e20 <Titanium()+0x36>
    4e1e:	6e c0       	rjmp	.+220    	; 0x4efc <Titanium()+0x112>
    4e20:	45 e0       	ldi	r20, 0x05	; 5
    4e22:	64 e0       	ldi	r22, 0x04	; 4
    4e24:	82 30       	cpi	r24, 0x02	; 2
    4e26:	09 f4       	brne	.+2      	; 0x4e2a <Titanium()+0x40>
    4e28:	83 c0       	rjmp	.+262    	; 0x4f30 <Titanium()+0x146>
    4e2a:	27 96       	adiw	r28, 0x07	; 7
    4e2c:	0f b6       	in	r0, 0x3f	; 63
    4e2e:	f8 94       	cli
    4e30:	de bf       	out	0x3e, r29	; 62
    4e32:	0f be       	out	0x3f, r0	; 63
    4e34:	cd bf       	out	0x3d, r28	; 61
    4e36:	df 91       	pop	r29
    4e38:	cf 91       	pop	r28
    4e3a:	1f 91       	pop	r17
    4e3c:	0f 91       	pop	r16
    4e3e:	ff 90       	pop	r15
    4e40:	ef 90       	pop	r14
    4e42:	08 95       	ret
    4e44:	8f 30       	cpi	r24, 0x0F	; 15
    4e46:	09 f4       	brne	.+2      	; 0x4e4a <Titanium()+0x60>
    4e48:	7c c0       	rjmp	.+248    	; 0x4f42 <Titanium()+0x158>
    4e4a:	40 f4       	brcc	.+16     	; 0x4e5c <Titanium()+0x72>
    4e4c:	8a 30       	cpi	r24, 0x0A	; 10
    4e4e:	69 f7       	brne	.-38     	; 0x4e2a <Titanium()+0x40>
    4e50:	6f e0       	ldi	r22, 0x0F	; 15
    4e52:	86 e0       	ldi	r24, 0x06	; 6
    4e54:	9f e3       	ldi	r25, 0x3F	; 63
    4e56:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    4e5a:	e7 cf       	rjmp	.-50     	; 0x4e2a <Titanium()+0x40>
    4e5c:	84 31       	cpi	r24, 0x14	; 20
    4e5e:	09 f4       	brne	.+2      	; 0x4e62 <Titanium()+0x78>
    4e60:	74 c0       	rjmp	.+232    	; 0x4f4a <Titanium()+0x160>
    4e62:	44 ef       	ldi	r20, 0xF4	; 244
    4e64:	51 e0       	ldi	r21, 0x01	; 1
    4e66:	6e e1       	ldi	r22, 0x1E	; 30
    4e68:	89 31       	cpi	r24, 0x19	; 25
    4e6a:	f9 f6       	brne	.-66     	; 0x4e2a <Titanium()+0x40>
    4e6c:	86 e0       	ldi	r24, 0x06	; 6
    4e6e:	9f e3       	ldi	r25, 0x3F	; 63
    4e70:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    4e74:	da cf       	rjmp	.-76     	; 0x4e2a <Titanium()+0x40>
    4e76:	87 33       	cpi	r24, 0x37	; 55
    4e78:	09 f4       	brne	.+2      	; 0x4e7c <Titanium()+0x92>
    4e7a:	90 c0       	rjmp	.+288    	; 0x4f9c <Titanium()+0x1b2>
    4e7c:	d0 f4       	brcc	.+52     	; 0x4eb2 <Titanium()+0xc8>
    4e7e:	88 32       	cpi	r24, 0x28	; 40
    4e80:	09 f4       	brne	.+2      	; 0x4e84 <Titanium()+0x9a>
    4e82:	79 c0       	rjmp	.+242    	; 0x4f76 <Titanium()+0x18c>
    4e84:	50 f4       	brcc	.+20     	; 0x4e9a <Titanium()+0xb0>
    4e86:	44 ef       	ldi	r20, 0xF4	; 244
    4e88:	51 e0       	ldi	r21, 0x01	; 1
    4e8a:	68 e2       	ldi	r22, 0x28	; 40
    4e8c:	83 32       	cpi	r24, 0x23	; 35
    4e8e:	69 f6       	brne	.-102    	; 0x4e2a <Titanium()+0x40>
    4e90:	86 e0       	ldi	r24, 0x06	; 6
    4e92:	9f e3       	ldi	r25, 0x3F	; 63
    4e94:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4e98:	c8 cf       	rjmp	.-112    	; 0x4e2a <Titanium()+0x40>
    4e9a:	8d 32       	cpi	r24, 0x2D	; 45
    4e9c:	09 f4       	brne	.+2      	; 0x4ea0 <Titanium()+0xb6>
    4e9e:	78 c0       	rjmp	.+240    	; 0x4f90 <Titanium()+0x1a6>
    4ea0:	82 33       	cpi	r24, 0x32	; 50
    4ea2:	19 f6       	brne	.-122    	; 0x4e2a <Titanium()+0x40>
    4ea4:	47 e3       	ldi	r20, 0x37	; 55
    4ea6:	67 e0       	ldi	r22, 0x07	; 7
    4ea8:	8d ef       	ldi	r24, 0xFD	; 253
    4eaa:	9e e3       	ldi	r25, 0x3E	; 62
    4eac:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4eb0:	bc cf       	rjmp	.-136    	; 0x4e2a <Titanium()+0x40>
    4eb2:	81 34       	cpi	r24, 0x41	; 65
    4eb4:	09 f4       	brne	.+2      	; 0x4eb8 <Titanium()+0xce>
    4eb6:	76 c0       	rjmp	.+236    	; 0x4fa4 <Titanium()+0x1ba>
    4eb8:	90 f4       	brcc	.+36     	; 0x4ede <Titanium()+0xf4>
    4eba:	8c 33       	cpi	r24, 0x3C	; 60
    4ebc:	09 f0       	breq	.+2      	; 0x4ec0 <Titanium()+0xd6>
    4ebe:	b5 cf       	rjmp	.-150    	; 0x4e2a <Titanium()+0x40>
    4ec0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4ec4:	7c 01       	movw	r14, r24
    4ec6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4eca:	8c 01       	movw	r16, r24
    4ecc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4ed0:	9c 01       	movw	r18, r24
    4ed2:	4b e4       	ldi	r20, 0x4B	; 75
    4ed4:	50 e0       	ldi	r21, 0x00	; 0
    4ed6:	61 e4       	ldi	r22, 0x41	; 65
    4ed8:	84 e4       	ldi	r24, 0x44	; 68
    4eda:	9f e2       	ldi	r25, 0x2F	; 47
    4edc:	44 c0       	rjmp	.+136    	; 0x4f66 <Titanium()+0x17c>
    4ede:	86 34       	cpi	r24, 0x46	; 70
    4ee0:	09 f4       	brne	.+2      	; 0x4ee4 <Titanium()+0xfa>
    4ee2:	65 c0       	rjmp	.+202    	; 0x4fae <Titanium()+0x1c4>
    4ee4:	84 36       	cpi	r24, 0x64	; 100
    4ee6:	09 f0       	breq	.+2      	; 0x4eea <Titanium()+0x100>
    4ee8:	a0 cf       	rjmp	.-192    	; 0x4e2a <Titanium()+0x40>
    4eea:	60 e0       	ldi	r22, 0x00	; 0
    4eec:	8d e3       	ldi	r24, 0x3D	; 61
    4eee:	90 e1       	ldi	r25, 0x10	; 16
    4ef0:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    4ef4:	80 e0       	ldi	r24, 0x00	; 0
    4ef6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    4efa:	97 cf       	rjmp	.-210    	; 0x4e2a <Titanium()+0x40>
    4efc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    4f00:	7c 01       	movw	r14, r24
    4f02:	65 e3       	ldi	r22, 0x35	; 53
    4f04:	72 e0       	ldi	r23, 0x02	; 2
    4f06:	ce 01       	movw	r24, r28
    4f08:	01 96       	adiw	r24, 0x01	; 1
    4f0a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    4f0e:	01 e0       	ldi	r16, 0x01	; 1
    4f10:	97 01       	movw	r18, r14
    4f12:	4b e4       	ldi	r20, 0x4B	; 75
    4f14:	50 e0       	ldi	r21, 0x00	; 0
    4f16:	6e e0       	ldi	r22, 0x0E	; 14
    4f18:	7d e3       	ldi	r23, 0x3D	; 61
    4f1a:	ce 01       	movw	r24, r28
    4f1c:	01 96       	adiw	r24, 0x01	; 1
    4f1e:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4f22:	ce 01       	movw	r24, r28
    4f24:	01 96       	adiw	r24, 0x01	; 1
    4f26:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    4f2a:	7f cf       	rjmp	.-258    	; 0x4e2a <Titanium()+0x40>
    4f2c:	42 e0       	ldi	r20, 0x02	; 2
    4f2e:	63 e0       	ldi	r22, 0x03	; 3
    4f30:	83 e8       	ldi	r24, 0x83	; 131
    4f32:	9f e1       	ldi	r25, 0x1F	; 31
    4f34:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    4f38:	78 cf       	rjmp	.-272    	; 0x4e2a <Titanium()+0x40>
    4f3a:	44 ef       	ldi	r20, 0xF4	; 244
    4f3c:	51 e0       	ldi	r21, 0x01	; 1
    4f3e:	6a e0       	ldi	r22, 0x0A	; 10
    4f40:	95 cf       	rjmp	.-214    	; 0x4e6c <Titanium()+0x82>
    4f42:	44 ef       	ldi	r20, 0xF4	; 244
    4f44:	51 e0       	ldi	r21, 0x01	; 1
    4f46:	64 e1       	ldi	r22, 0x14	; 20
    4f48:	a3 cf       	rjmp	.-186    	; 0x4e90 <Titanium()+0xa6>
    4f4a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4f4e:	7c 01       	movw	r14, r24
    4f50:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4f54:	8c 01       	movw	r16, r24
    4f56:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4f5a:	9c 01       	movw	r18, r24
    4f5c:	4b e4       	ldi	r20, 0x4B	; 75
    4f5e:	50 e0       	ldi	r21, 0x00	; 0
    4f60:	69 e1       	ldi	r22, 0x19	; 25
    4f62:	86 e0       	ldi	r24, 0x06	; 6
    4f64:	9f e3       	ldi	r25, 0x3F	; 63
    4f66:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4f6a:	5f cf       	rjmp	.-322    	; 0x4e2a <Titanium()+0x40>
    4f6c:	43 e2       	ldi	r20, 0x23	; 35
    4f6e:	64 e0       	ldi	r22, 0x04	; 4
    4f70:	86 e0       	ldi	r24, 0x06	; 6
    4f72:	9f e3       	ldi	r25, 0x3F	; 63
    4f74:	df cf       	rjmp	.-66     	; 0x4f34 <Titanium()+0x14a>
    4f76:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4f7a:	7c 01       	movw	r14, r24
    4f7c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4f80:	8c 01       	movw	r16, r24
    4f82:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    4f86:	9c 01       	movw	r18, r24
    4f88:	4b e4       	ldi	r20, 0x4B	; 75
    4f8a:	50 e0       	ldi	r21, 0x00	; 0
    4f8c:	6d e2       	ldi	r22, 0x2D	; 45
    4f8e:	e9 cf       	rjmp	.-46     	; 0x4f62 <Titanium()+0x178>
    4f90:	62 e3       	ldi	r22, 0x32	; 50
    4f92:	82 e7       	ldi	r24, 0x72	; 114
    4f94:	9f e1       	ldi	r25, 0x1F	; 31
    4f96:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    4f9a:	47 cf       	rjmp	.-370    	; 0x4e2a <Titanium()+0x40>
    4f9c:	44 ef       	ldi	r20, 0xF4	; 244
    4f9e:	51 e0       	ldi	r21, 0x01	; 1
    4fa0:	6c e3       	ldi	r22, 0x3C	; 60
    4fa2:	76 cf       	rjmp	.-276    	; 0x4e90 <Titanium()+0xa6>
    4fa4:	46 e4       	ldi	r20, 0x46	; 70
    4fa6:	6c e0       	ldi	r22, 0x0C	; 12
    4fa8:	89 eb       	ldi	r24, 0xB9	; 185
    4faa:	9f e0       	ldi	r25, 0x0F	; 15
    4fac:	7f cf       	rjmp	.-258    	; 0x4eac <Titanium()+0xc2>
    4fae:	64 e6       	ldi	r22, 0x64	; 100
    4fb0:	80 e1       	ldi	r24, 0x10	; 16
    4fb2:	97 e2       	ldi	r25, 0x27	; 39
    4fb4:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    4fb8:	38 cf       	rjmp	.-400    	; 0x4e2a <Titanium()+0x40>

00004fba <SomeoneYouLoved()>:
    4fba:	ef 92       	push	r14
    4fbc:	ff 92       	push	r15
    4fbe:	0f 93       	push	r16
    4fc0:	1f 93       	push	r17
    4fc2:	cf 93       	push	r28
    4fc4:	df 93       	push	r29
    4fc6:	00 d0       	rcall	.+0      	; 0x4fc8 <SomeoneYouLoved()+0xe>
    4fc8:	00 d0       	rcall	.+0      	; 0x4fca <SomeoneYouLoved()+0x10>
    4fca:	00 d0       	rcall	.+0      	; 0x4fcc <SomeoneYouLoved()+0x12>
    4fcc:	1f 92       	push	r1
    4fce:	cd b7       	in	r28, 0x3d	; 61
    4fd0:	de b7       	in	r29, 0x3e	; 62
    4fd2:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    4fd6:	8e 31       	cpi	r24, 0x1E	; 30
    4fd8:	09 f4       	brne	.+2      	; 0x4fdc <SomeoneYouLoved()+0x22>
    4fda:	b0 c0       	rjmp	.+352    	; 0x513c <SomeoneYouLoved()+0x182>
    4fdc:	a0 f5       	brcc	.+104    	; 0x5046 <SomeoneYouLoved()+0x8c>
    4fde:	85 30       	cpi	r24, 0x05	; 5
    4fe0:	09 f4       	brne	.+2      	; 0x4fe4 <SomeoneYouLoved()+0x2a>
    4fe2:	93 c0       	rjmp	.+294    	; 0x510a <SomeoneYouLoved()+0x150>
    4fe4:	b8 f4       	brcc	.+46     	; 0x5014 <SomeoneYouLoved()+0x5a>
    4fe6:	81 30       	cpi	r24, 0x01	; 1
    4fe8:	09 f4       	brne	.+2      	; 0x4fec <SomeoneYouLoved()+0x32>
    4fea:	88 c0       	rjmp	.+272    	; 0x50fc <SomeoneYouLoved()+0x142>
    4fec:	08 f4       	brcc	.+2      	; 0x4ff0 <SomeoneYouLoved()+0x36>
    4fee:	6e c0       	rjmp	.+220    	; 0x50cc <SomeoneYouLoved()+0x112>
    4ff0:	45 e0       	ldi	r20, 0x05	; 5
    4ff2:	64 e0       	ldi	r22, 0x04	; 4
    4ff4:	82 30       	cpi	r24, 0x02	; 2
    4ff6:	09 f4       	brne	.+2      	; 0x4ffa <SomeoneYouLoved()+0x40>
    4ff8:	83 c0       	rjmp	.+262    	; 0x5100 <SomeoneYouLoved()+0x146>
    4ffa:	27 96       	adiw	r28, 0x07	; 7
    4ffc:	0f b6       	in	r0, 0x3f	; 63
    4ffe:	f8 94       	cli
    5000:	de bf       	out	0x3e, r29	; 62
    5002:	0f be       	out	0x3f, r0	; 63
    5004:	cd bf       	out	0x3d, r28	; 61
    5006:	df 91       	pop	r29
    5008:	cf 91       	pop	r28
    500a:	1f 91       	pop	r17
    500c:	0f 91       	pop	r16
    500e:	ff 90       	pop	r15
    5010:	ef 90       	pop	r14
    5012:	08 95       	ret
    5014:	8f 30       	cpi	r24, 0x0F	; 15
    5016:	09 f4       	brne	.+2      	; 0x501a <SomeoneYouLoved()+0x60>
    5018:	7c c0       	rjmp	.+248    	; 0x5112 <SomeoneYouLoved()+0x158>
    501a:	40 f4       	brcc	.+16     	; 0x502c <SomeoneYouLoved()+0x72>
    501c:	8a 30       	cpi	r24, 0x0A	; 10
    501e:	69 f7       	brne	.-38     	; 0x4ffa <SomeoneYouLoved()+0x40>
    5020:	6f e0       	ldi	r22, 0x0F	; 15
    5022:	86 e0       	ldi	r24, 0x06	; 6
    5024:	9f e3       	ldi	r25, 0x3F	; 63
    5026:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    502a:	e7 cf       	rjmp	.-50     	; 0x4ffa <SomeoneYouLoved()+0x40>
    502c:	84 31       	cpi	r24, 0x14	; 20
    502e:	09 f4       	brne	.+2      	; 0x5032 <SomeoneYouLoved()+0x78>
    5030:	74 c0       	rjmp	.+232    	; 0x511a <SomeoneYouLoved()+0x160>
    5032:	44 ef       	ldi	r20, 0xF4	; 244
    5034:	51 e0       	ldi	r21, 0x01	; 1
    5036:	6e e1       	ldi	r22, 0x1E	; 30
    5038:	89 31       	cpi	r24, 0x19	; 25
    503a:	f9 f6       	brne	.-66     	; 0x4ffa <SomeoneYouLoved()+0x40>
    503c:	86 e0       	ldi	r24, 0x06	; 6
    503e:	9f e3       	ldi	r25, 0x3F	; 63
    5040:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    5044:	da cf       	rjmp	.-76     	; 0x4ffa <SomeoneYouLoved()+0x40>
    5046:	87 33       	cpi	r24, 0x37	; 55
    5048:	09 f4       	brne	.+2      	; 0x504c <SomeoneYouLoved()+0x92>
    504a:	90 c0       	rjmp	.+288    	; 0x516c <SomeoneYouLoved()+0x1b2>
    504c:	d0 f4       	brcc	.+52     	; 0x5082 <SomeoneYouLoved()+0xc8>
    504e:	88 32       	cpi	r24, 0x28	; 40
    5050:	09 f4       	brne	.+2      	; 0x5054 <SomeoneYouLoved()+0x9a>
    5052:	79 c0       	rjmp	.+242    	; 0x5146 <SomeoneYouLoved()+0x18c>
    5054:	50 f4       	brcc	.+20     	; 0x506a <SomeoneYouLoved()+0xb0>
    5056:	44 ef       	ldi	r20, 0xF4	; 244
    5058:	51 e0       	ldi	r21, 0x01	; 1
    505a:	68 e2       	ldi	r22, 0x28	; 40
    505c:	83 32       	cpi	r24, 0x23	; 35
    505e:	69 f6       	brne	.-102    	; 0x4ffa <SomeoneYouLoved()+0x40>
    5060:	86 e0       	ldi	r24, 0x06	; 6
    5062:	9f e3       	ldi	r25, 0x3F	; 63
    5064:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5068:	c8 cf       	rjmp	.-112    	; 0x4ffa <SomeoneYouLoved()+0x40>
    506a:	8d 32       	cpi	r24, 0x2D	; 45
    506c:	09 f4       	brne	.+2      	; 0x5070 <SomeoneYouLoved()+0xb6>
    506e:	78 c0       	rjmp	.+240    	; 0x5160 <SomeoneYouLoved()+0x1a6>
    5070:	82 33       	cpi	r24, 0x32	; 50
    5072:	19 f6       	brne	.-122    	; 0x4ffa <SomeoneYouLoved()+0x40>
    5074:	47 e3       	ldi	r20, 0x37	; 55
    5076:	67 e0       	ldi	r22, 0x07	; 7
    5078:	8d ef       	ldi	r24, 0xFD	; 253
    507a:	9e e3       	ldi	r25, 0x3E	; 62
    507c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5080:	bc cf       	rjmp	.-136    	; 0x4ffa <SomeoneYouLoved()+0x40>
    5082:	81 34       	cpi	r24, 0x41	; 65
    5084:	09 f4       	brne	.+2      	; 0x5088 <SomeoneYouLoved()+0xce>
    5086:	76 c0       	rjmp	.+236    	; 0x5174 <SomeoneYouLoved()+0x1ba>
    5088:	90 f4       	brcc	.+36     	; 0x50ae <SomeoneYouLoved()+0xf4>
    508a:	8c 33       	cpi	r24, 0x3C	; 60
    508c:	09 f0       	breq	.+2      	; 0x5090 <SomeoneYouLoved()+0xd6>
    508e:	b5 cf       	rjmp	.-150    	; 0x4ffa <SomeoneYouLoved()+0x40>
    5090:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5094:	7c 01       	movw	r14, r24
    5096:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    509a:	8c 01       	movw	r16, r24
    509c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    50a0:	9c 01       	movw	r18, r24
    50a2:	4b e4       	ldi	r20, 0x4B	; 75
    50a4:	50 e0       	ldi	r21, 0x00	; 0
    50a6:	61 e4       	ldi	r22, 0x41	; 65
    50a8:	84 e4       	ldi	r24, 0x44	; 68
    50aa:	9f e2       	ldi	r25, 0x2F	; 47
    50ac:	44 c0       	rjmp	.+136    	; 0x5136 <SomeoneYouLoved()+0x17c>
    50ae:	86 34       	cpi	r24, 0x46	; 70
    50b0:	09 f4       	brne	.+2      	; 0x50b4 <SomeoneYouLoved()+0xfa>
    50b2:	65 c0       	rjmp	.+202    	; 0x517e <SomeoneYouLoved()+0x1c4>
    50b4:	84 36       	cpi	r24, 0x64	; 100
    50b6:	09 f0       	breq	.+2      	; 0x50ba <SomeoneYouLoved()+0x100>
    50b8:	a0 cf       	rjmp	.-192    	; 0x4ffa <SomeoneYouLoved()+0x40>
    50ba:	60 e0       	ldi	r22, 0x00	; 0
    50bc:	8d e3       	ldi	r24, 0x3D	; 61
    50be:	90 e1       	ldi	r25, 0x10	; 16
    50c0:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    50c4:	80 e0       	ldi	r24, 0x00	; 0
    50c6:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    50ca:	97 cf       	rjmp	.-210    	; 0x4ffa <SomeoneYouLoved()+0x40>
    50cc:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    50d0:	7c 01       	movw	r14, r24
    50d2:	6e e4       	ldi	r22, 0x4E	; 78
    50d4:	72 e0       	ldi	r23, 0x02	; 2
    50d6:	ce 01       	movw	r24, r28
    50d8:	01 96       	adiw	r24, 0x01	; 1
    50da:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    50de:	01 e0       	ldi	r16, 0x01	; 1
    50e0:	97 01       	movw	r18, r14
    50e2:	4b e4       	ldi	r20, 0x4B	; 75
    50e4:	50 e0       	ldi	r21, 0x00	; 0
    50e6:	6e e0       	ldi	r22, 0x0E	; 14
    50e8:	7d e3       	ldi	r23, 0x3D	; 61
    50ea:	ce 01       	movw	r24, r28
    50ec:	01 96       	adiw	r24, 0x01	; 1
    50ee:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    50f2:	ce 01       	movw	r24, r28
    50f4:	01 96       	adiw	r24, 0x01	; 1
    50f6:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    50fa:	7f cf       	rjmp	.-258    	; 0x4ffa <SomeoneYouLoved()+0x40>
    50fc:	42 e0       	ldi	r20, 0x02	; 2
    50fe:	63 e0       	ldi	r22, 0x03	; 3
    5100:	83 e8       	ldi	r24, 0x83	; 131
    5102:	9f e1       	ldi	r25, 0x1F	; 31
    5104:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    5108:	78 cf       	rjmp	.-272    	; 0x4ffa <SomeoneYouLoved()+0x40>
    510a:	44 ef       	ldi	r20, 0xF4	; 244
    510c:	51 e0       	ldi	r21, 0x01	; 1
    510e:	6a e0       	ldi	r22, 0x0A	; 10
    5110:	95 cf       	rjmp	.-214    	; 0x503c <SomeoneYouLoved()+0x82>
    5112:	44 ef       	ldi	r20, 0xF4	; 244
    5114:	51 e0       	ldi	r21, 0x01	; 1
    5116:	64 e1       	ldi	r22, 0x14	; 20
    5118:	a3 cf       	rjmp	.-186    	; 0x5060 <SomeoneYouLoved()+0xa6>
    511a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    511e:	7c 01       	movw	r14, r24
    5120:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5124:	8c 01       	movw	r16, r24
    5126:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    512a:	9c 01       	movw	r18, r24
    512c:	4b e4       	ldi	r20, 0x4B	; 75
    512e:	50 e0       	ldi	r21, 0x00	; 0
    5130:	69 e1       	ldi	r22, 0x19	; 25
    5132:	86 e0       	ldi	r24, 0x06	; 6
    5134:	9f e3       	ldi	r25, 0x3F	; 63
    5136:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    513a:	5f cf       	rjmp	.-322    	; 0x4ffa <SomeoneYouLoved()+0x40>
    513c:	43 e2       	ldi	r20, 0x23	; 35
    513e:	64 e0       	ldi	r22, 0x04	; 4
    5140:	86 e0       	ldi	r24, 0x06	; 6
    5142:	9f e3       	ldi	r25, 0x3F	; 63
    5144:	df cf       	rjmp	.-66     	; 0x5104 <SomeoneYouLoved()+0x14a>
    5146:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    514a:	7c 01       	movw	r14, r24
    514c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5150:	8c 01       	movw	r16, r24
    5152:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5156:	9c 01       	movw	r18, r24
    5158:	4b e4       	ldi	r20, 0x4B	; 75
    515a:	50 e0       	ldi	r21, 0x00	; 0
    515c:	6d e2       	ldi	r22, 0x2D	; 45
    515e:	e9 cf       	rjmp	.-46     	; 0x5132 <SomeoneYouLoved()+0x178>
    5160:	62 e3       	ldi	r22, 0x32	; 50
    5162:	82 e7       	ldi	r24, 0x72	; 114
    5164:	9f e1       	ldi	r25, 0x1F	; 31
    5166:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    516a:	47 cf       	rjmp	.-370    	; 0x4ffa <SomeoneYouLoved()+0x40>
    516c:	44 ef       	ldi	r20, 0xF4	; 244
    516e:	51 e0       	ldi	r21, 0x01	; 1
    5170:	6c e3       	ldi	r22, 0x3C	; 60
    5172:	76 cf       	rjmp	.-276    	; 0x5060 <SomeoneYouLoved()+0xa6>
    5174:	46 e4       	ldi	r20, 0x46	; 70
    5176:	6c e0       	ldi	r22, 0x0C	; 12
    5178:	89 eb       	ldi	r24, 0xB9	; 185
    517a:	9f e0       	ldi	r25, 0x0F	; 15
    517c:	7f cf       	rjmp	.-258    	; 0x507c <SomeoneYouLoved()+0xc2>
    517e:	64 e6       	ldi	r22, 0x64	; 100
    5180:	80 e1       	ldi	r24, 0x10	; 16
    5182:	97 e2       	ldi	r25, 0x27	; 39
    5184:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    5188:	38 cf       	rjmp	.-400    	; 0x4ffa <SomeoneYouLoved()+0x40>

0000518a <ShouldntStop()>:
    518a:	ef 92       	push	r14
    518c:	ff 92       	push	r15
    518e:	0f 93       	push	r16
    5190:	1f 93       	push	r17
    5192:	cf 93       	push	r28
    5194:	df 93       	push	r29
    5196:	00 d0       	rcall	.+0      	; 0x5198 <ShouldntStop()+0xe>
    5198:	00 d0       	rcall	.+0      	; 0x519a <ShouldntStop()+0x10>
    519a:	00 d0       	rcall	.+0      	; 0x519c <ShouldntStop()+0x12>
    519c:	1f 92       	push	r1
    519e:	cd b7       	in	r28, 0x3d	; 61
    51a0:	de b7       	in	r29, 0x3e	; 62
    51a2:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    51a6:	8e 31       	cpi	r24, 0x1E	; 30
    51a8:	09 f4       	brne	.+2      	; 0x51ac <ShouldntStop()+0x22>
    51aa:	b0 c0       	rjmp	.+352    	; 0x530c <ShouldntStop()+0x182>
    51ac:	a0 f5       	brcc	.+104    	; 0x5216 <ShouldntStop()+0x8c>
    51ae:	85 30       	cpi	r24, 0x05	; 5
    51b0:	09 f4       	brne	.+2      	; 0x51b4 <ShouldntStop()+0x2a>
    51b2:	93 c0       	rjmp	.+294    	; 0x52da <ShouldntStop()+0x150>
    51b4:	b8 f4       	brcc	.+46     	; 0x51e4 <ShouldntStop()+0x5a>
    51b6:	81 30       	cpi	r24, 0x01	; 1
    51b8:	09 f4       	brne	.+2      	; 0x51bc <ShouldntStop()+0x32>
    51ba:	88 c0       	rjmp	.+272    	; 0x52cc <ShouldntStop()+0x142>
    51bc:	08 f4       	brcc	.+2      	; 0x51c0 <ShouldntStop()+0x36>
    51be:	6e c0       	rjmp	.+220    	; 0x529c <ShouldntStop()+0x112>
    51c0:	45 e0       	ldi	r20, 0x05	; 5
    51c2:	64 e0       	ldi	r22, 0x04	; 4
    51c4:	82 30       	cpi	r24, 0x02	; 2
    51c6:	09 f4       	brne	.+2      	; 0x51ca <ShouldntStop()+0x40>
    51c8:	83 c0       	rjmp	.+262    	; 0x52d0 <ShouldntStop()+0x146>
    51ca:	27 96       	adiw	r28, 0x07	; 7
    51cc:	0f b6       	in	r0, 0x3f	; 63
    51ce:	f8 94       	cli
    51d0:	de bf       	out	0x3e, r29	; 62
    51d2:	0f be       	out	0x3f, r0	; 63
    51d4:	cd bf       	out	0x3d, r28	; 61
    51d6:	df 91       	pop	r29
    51d8:	cf 91       	pop	r28
    51da:	1f 91       	pop	r17
    51dc:	0f 91       	pop	r16
    51de:	ff 90       	pop	r15
    51e0:	ef 90       	pop	r14
    51e2:	08 95       	ret
    51e4:	8f 30       	cpi	r24, 0x0F	; 15
    51e6:	09 f4       	brne	.+2      	; 0x51ea <ShouldntStop()+0x60>
    51e8:	7c c0       	rjmp	.+248    	; 0x52e2 <ShouldntStop()+0x158>
    51ea:	40 f4       	brcc	.+16     	; 0x51fc <ShouldntStop()+0x72>
    51ec:	8a 30       	cpi	r24, 0x0A	; 10
    51ee:	69 f7       	brne	.-38     	; 0x51ca <ShouldntStop()+0x40>
    51f0:	6f e0       	ldi	r22, 0x0F	; 15
    51f2:	86 e0       	ldi	r24, 0x06	; 6
    51f4:	9f e3       	ldi	r25, 0x3F	; 63
    51f6:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    51fa:	e7 cf       	rjmp	.-50     	; 0x51ca <ShouldntStop()+0x40>
    51fc:	84 31       	cpi	r24, 0x14	; 20
    51fe:	09 f4       	brne	.+2      	; 0x5202 <ShouldntStop()+0x78>
    5200:	74 c0       	rjmp	.+232    	; 0x52ea <ShouldntStop()+0x160>
    5202:	44 ef       	ldi	r20, 0xF4	; 244
    5204:	51 e0       	ldi	r21, 0x01	; 1
    5206:	6e e1       	ldi	r22, 0x1E	; 30
    5208:	89 31       	cpi	r24, 0x19	; 25
    520a:	f9 f6       	brne	.-66     	; 0x51ca <ShouldntStop()+0x40>
    520c:	86 e0       	ldi	r24, 0x06	; 6
    520e:	9f e3       	ldi	r25, 0x3F	; 63
    5210:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    5214:	da cf       	rjmp	.-76     	; 0x51ca <ShouldntStop()+0x40>
    5216:	87 33       	cpi	r24, 0x37	; 55
    5218:	09 f4       	brne	.+2      	; 0x521c <ShouldntStop()+0x92>
    521a:	90 c0       	rjmp	.+288    	; 0x533c <ShouldntStop()+0x1b2>
    521c:	d0 f4       	brcc	.+52     	; 0x5252 <ShouldntStop()+0xc8>
    521e:	88 32       	cpi	r24, 0x28	; 40
    5220:	09 f4       	brne	.+2      	; 0x5224 <ShouldntStop()+0x9a>
    5222:	79 c0       	rjmp	.+242    	; 0x5316 <ShouldntStop()+0x18c>
    5224:	50 f4       	brcc	.+20     	; 0x523a <ShouldntStop()+0xb0>
    5226:	44 ef       	ldi	r20, 0xF4	; 244
    5228:	51 e0       	ldi	r21, 0x01	; 1
    522a:	68 e2       	ldi	r22, 0x28	; 40
    522c:	83 32       	cpi	r24, 0x23	; 35
    522e:	69 f6       	brne	.-102    	; 0x51ca <ShouldntStop()+0x40>
    5230:	86 e0       	ldi	r24, 0x06	; 6
    5232:	9f e3       	ldi	r25, 0x3F	; 63
    5234:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5238:	c8 cf       	rjmp	.-112    	; 0x51ca <ShouldntStop()+0x40>
    523a:	8d 32       	cpi	r24, 0x2D	; 45
    523c:	09 f4       	brne	.+2      	; 0x5240 <ShouldntStop()+0xb6>
    523e:	78 c0       	rjmp	.+240    	; 0x5330 <ShouldntStop()+0x1a6>
    5240:	82 33       	cpi	r24, 0x32	; 50
    5242:	19 f6       	brne	.-122    	; 0x51ca <ShouldntStop()+0x40>
    5244:	47 e3       	ldi	r20, 0x37	; 55
    5246:	67 e0       	ldi	r22, 0x07	; 7
    5248:	8d ef       	ldi	r24, 0xFD	; 253
    524a:	9e e3       	ldi	r25, 0x3E	; 62
    524c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5250:	bc cf       	rjmp	.-136    	; 0x51ca <ShouldntStop()+0x40>
    5252:	81 34       	cpi	r24, 0x41	; 65
    5254:	09 f4       	brne	.+2      	; 0x5258 <ShouldntStop()+0xce>
    5256:	76 c0       	rjmp	.+236    	; 0x5344 <ShouldntStop()+0x1ba>
    5258:	90 f4       	brcc	.+36     	; 0x527e <ShouldntStop()+0xf4>
    525a:	8c 33       	cpi	r24, 0x3C	; 60
    525c:	09 f0       	breq	.+2      	; 0x5260 <ShouldntStop()+0xd6>
    525e:	b5 cf       	rjmp	.-150    	; 0x51ca <ShouldntStop()+0x40>
    5260:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5264:	7c 01       	movw	r14, r24
    5266:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    526a:	8c 01       	movw	r16, r24
    526c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5270:	9c 01       	movw	r18, r24
    5272:	4b e4       	ldi	r20, 0x4B	; 75
    5274:	50 e0       	ldi	r21, 0x00	; 0
    5276:	61 e4       	ldi	r22, 0x41	; 65
    5278:	84 e4       	ldi	r24, 0x44	; 68
    527a:	9f e2       	ldi	r25, 0x2F	; 47
    527c:	44 c0       	rjmp	.+136    	; 0x5306 <ShouldntStop()+0x17c>
    527e:	86 34       	cpi	r24, 0x46	; 70
    5280:	09 f4       	brne	.+2      	; 0x5284 <ShouldntStop()+0xfa>
    5282:	65 c0       	rjmp	.+202    	; 0x534e <ShouldntStop()+0x1c4>
    5284:	84 36       	cpi	r24, 0x64	; 100
    5286:	09 f0       	breq	.+2      	; 0x528a <ShouldntStop()+0x100>
    5288:	a0 cf       	rjmp	.-192    	; 0x51ca <ShouldntStop()+0x40>
    528a:	60 e0       	ldi	r22, 0x00	; 0
    528c:	8d e3       	ldi	r24, 0x3D	; 61
    528e:	90 e1       	ldi	r25, 0x10	; 16
    5290:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    5294:	80 e0       	ldi	r24, 0x00	; 0
    5296:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    529a:	97 cf       	rjmp	.-210    	; 0x51ca <ShouldntStop()+0x40>
    529c:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    52a0:	7c 01       	movw	r14, r24
    52a2:	61 e7       	ldi	r22, 0x71	; 113
    52a4:	72 e0       	ldi	r23, 0x02	; 2
    52a6:	ce 01       	movw	r24, r28
    52a8:	01 96       	adiw	r24, 0x01	; 1
    52aa:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    52ae:	01 e0       	ldi	r16, 0x01	; 1
    52b0:	97 01       	movw	r18, r14
    52b2:	4b e4       	ldi	r20, 0x4B	; 75
    52b4:	50 e0       	ldi	r21, 0x00	; 0
    52b6:	6e e0       	ldi	r22, 0x0E	; 14
    52b8:	7d e3       	ldi	r23, 0x3D	; 61
    52ba:	ce 01       	movw	r24, r28
    52bc:	01 96       	adiw	r24, 0x01	; 1
    52be:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    52c2:	ce 01       	movw	r24, r28
    52c4:	01 96       	adiw	r24, 0x01	; 1
    52c6:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    52ca:	7f cf       	rjmp	.-258    	; 0x51ca <ShouldntStop()+0x40>
    52cc:	42 e0       	ldi	r20, 0x02	; 2
    52ce:	63 e0       	ldi	r22, 0x03	; 3
    52d0:	83 e8       	ldi	r24, 0x83	; 131
    52d2:	9f e1       	ldi	r25, 0x1F	; 31
    52d4:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    52d8:	78 cf       	rjmp	.-272    	; 0x51ca <ShouldntStop()+0x40>
    52da:	44 ef       	ldi	r20, 0xF4	; 244
    52dc:	51 e0       	ldi	r21, 0x01	; 1
    52de:	6a e0       	ldi	r22, 0x0A	; 10
    52e0:	95 cf       	rjmp	.-214    	; 0x520c <ShouldntStop()+0x82>
    52e2:	44 ef       	ldi	r20, 0xF4	; 244
    52e4:	51 e0       	ldi	r21, 0x01	; 1
    52e6:	64 e1       	ldi	r22, 0x14	; 20
    52e8:	a3 cf       	rjmp	.-186    	; 0x5230 <ShouldntStop()+0xa6>
    52ea:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    52ee:	7c 01       	movw	r14, r24
    52f0:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    52f4:	8c 01       	movw	r16, r24
    52f6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    52fa:	9c 01       	movw	r18, r24
    52fc:	4b e4       	ldi	r20, 0x4B	; 75
    52fe:	50 e0       	ldi	r21, 0x00	; 0
    5300:	69 e1       	ldi	r22, 0x19	; 25
    5302:	86 e0       	ldi	r24, 0x06	; 6
    5304:	9f e3       	ldi	r25, 0x3F	; 63
    5306:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    530a:	5f cf       	rjmp	.-322    	; 0x51ca <ShouldntStop()+0x40>
    530c:	43 e2       	ldi	r20, 0x23	; 35
    530e:	64 e0       	ldi	r22, 0x04	; 4
    5310:	86 e0       	ldi	r24, 0x06	; 6
    5312:	9f e3       	ldi	r25, 0x3F	; 63
    5314:	df cf       	rjmp	.-66     	; 0x52d4 <ShouldntStop()+0x14a>
    5316:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    531a:	7c 01       	movw	r14, r24
    531c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5320:	8c 01       	movw	r16, r24
    5322:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5326:	9c 01       	movw	r18, r24
    5328:	4b e4       	ldi	r20, 0x4B	; 75
    532a:	50 e0       	ldi	r21, 0x00	; 0
    532c:	6d e2       	ldi	r22, 0x2D	; 45
    532e:	e9 cf       	rjmp	.-46     	; 0x5302 <ShouldntStop()+0x178>
    5330:	62 e3       	ldi	r22, 0x32	; 50
    5332:	82 e7       	ldi	r24, 0x72	; 114
    5334:	9f e1       	ldi	r25, 0x1F	; 31
    5336:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    533a:	47 cf       	rjmp	.-370    	; 0x51ca <ShouldntStop()+0x40>
    533c:	44 ef       	ldi	r20, 0xF4	; 244
    533e:	51 e0       	ldi	r21, 0x01	; 1
    5340:	6c e3       	ldi	r22, 0x3C	; 60
    5342:	76 cf       	rjmp	.-276    	; 0x5230 <ShouldntStop()+0xa6>
    5344:	46 e4       	ldi	r20, 0x46	; 70
    5346:	6c e0       	ldi	r22, 0x0C	; 12
    5348:	89 eb       	ldi	r24, 0xB9	; 185
    534a:	9f e0       	ldi	r25, 0x0F	; 15
    534c:	7f cf       	rjmp	.-258    	; 0x524c <ShouldntStop()+0xc2>
    534e:	64 e6       	ldi	r22, 0x64	; 100
    5350:	80 e1       	ldi	r24, 0x10	; 16
    5352:	97 e2       	ldi	r25, 0x27	; 39
    5354:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    5358:	38 cf       	rjmp	.-400    	; 0x51ca <ShouldntStop()+0x40>

0000535a <SunAlwaysShinesOnTV()>:
    535a:	ef 92       	push	r14
    535c:	ff 92       	push	r15
    535e:	0f 93       	push	r16
    5360:	1f 93       	push	r17
    5362:	cf 93       	push	r28
    5364:	df 93       	push	r29
    5366:	00 d0       	rcall	.+0      	; 0x5368 <SunAlwaysShinesOnTV()+0xe>
    5368:	00 d0       	rcall	.+0      	; 0x536a <SunAlwaysShinesOnTV()+0x10>
    536a:	00 d0       	rcall	.+0      	; 0x536c <SunAlwaysShinesOnTV()+0x12>
    536c:	1f 92       	push	r1
    536e:	cd b7       	in	r28, 0x3d	; 61
    5370:	de b7       	in	r29, 0x3e	; 62
    5372:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    5376:	8e 31       	cpi	r24, 0x1E	; 30
    5378:	09 f4       	brne	.+2      	; 0x537c <SunAlwaysShinesOnTV()+0x22>
    537a:	8a c0       	rjmp	.+276    	; 0x5490 <SunAlwaysShinesOnTV()+0x136>
    537c:	80 f5       	brcc	.+96     	; 0x53de <SunAlwaysShinesOnTV()+0x84>
    537e:	8a 30       	cpi	r24, 0x0A	; 10
    5380:	09 f4       	brne	.+2      	; 0x5384 <SunAlwaysShinesOnTV()+0x2a>
    5382:	70 c0       	rjmp	.+224    	; 0x5464 <SunAlwaysShinesOnTV()+0x10a>
    5384:	98 f4       	brcc	.+38     	; 0x53ac <SunAlwaysShinesOnTV()+0x52>
    5386:	88 23       	and	r24, r24
    5388:	09 f4       	brne	.+2      	; 0x538c <SunAlwaysShinesOnTV()+0x32>
    538a:	4e c0       	rjmp	.+156    	; 0x5428 <SunAlwaysShinesOnTV()+0xce>
    538c:	85 30       	cpi	r24, 0x05	; 5
    538e:	09 f4       	brne	.+2      	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5390:	63 c0       	rjmp	.+198    	; 0x5458 <SunAlwaysShinesOnTV()+0xfe>
    5392:	27 96       	adiw	r28, 0x07	; 7
    5394:	0f b6       	in	r0, 0x3f	; 63
    5396:	f8 94       	cli
    5398:	de bf       	out	0x3e, r29	; 62
    539a:	0f be       	out	0x3f, r0	; 63
    539c:	cd bf       	out	0x3d, r28	; 61
    539e:	df 91       	pop	r29
    53a0:	cf 91       	pop	r28
    53a2:	1f 91       	pop	r17
    53a4:	0f 91       	pop	r16
    53a6:	ff 90       	pop	r15
    53a8:	ef 90       	pop	r14
    53aa:	08 95       	ret
    53ac:	84 31       	cpi	r24, 0x14	; 20
    53ae:	09 f4       	brne	.+2      	; 0x53b2 <SunAlwaysShinesOnTV()+0x58>
    53b0:	61 c0       	rjmp	.+194    	; 0x5474 <SunAlwaysShinesOnTV()+0x11a>
    53b2:	89 31       	cpi	r24, 0x19	; 25
    53b4:	09 f4       	brne	.+2      	; 0x53b8 <SunAlwaysShinesOnTV()+0x5e>
    53b6:	64 c0       	rjmp	.+200    	; 0x5480 <SunAlwaysShinesOnTV()+0x126>
    53b8:	8f 30       	cpi	r24, 0x0F	; 15
    53ba:	59 f7       	brne	.-42     	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    53bc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    53c0:	7c 01       	movw	r14, r24
    53c2:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    53c6:	8c 01       	movw	r16, r24
    53c8:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    53cc:	9c 01       	movw	r18, r24
    53ce:	42 e3       	ldi	r20, 0x32	; 50
    53d0:	50 e0       	ldi	r21, 0x00	; 0
    53d2:	64 e1       	ldi	r22, 0x14	; 20
    53d4:	88 e8       	ldi	r24, 0x88	; 136
    53d6:	93 e1       	ldi	r25, 0x13	; 19
    53d8:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    53dc:	da cf       	rjmp	.-76     	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    53de:	82 33       	cpi	r24, 0x32	; 50
    53e0:	09 f4       	brne	.+2      	; 0x53e4 <SunAlwaysShinesOnTV()+0x8a>
    53e2:	6e c0       	rjmp	.+220    	; 0x54c0 <SunAlwaysShinesOnTV()+0x166>
    53e4:	80 f4       	brcc	.+32     	; 0x5406 <SunAlwaysShinesOnTV()+0xac>
    53e6:	88 32       	cpi	r24, 0x28	; 40
    53e8:	09 f4       	brne	.+2      	; 0x53ec <SunAlwaysShinesOnTV()+0x92>
    53ea:	5d c0       	rjmp	.+186    	; 0x54a6 <SunAlwaysShinesOnTV()+0x14c>
    53ec:	8d 32       	cpi	r24, 0x2D	; 45
    53ee:	09 f4       	brne	.+2      	; 0x53f2 <SunAlwaysShinesOnTV()+0x98>
    53f0:	61 c0       	rjmp	.+194    	; 0x54b4 <SunAlwaysShinesOnTV()+0x15a>
    53f2:	83 32       	cpi	r24, 0x23	; 35
    53f4:	71 f6       	brne	.-100    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    53f6:	48 ee       	ldi	r20, 0xE8	; 232
    53f8:	53 e0       	ldi	r21, 0x03	; 3
    53fa:	68 e2       	ldi	r22, 0x28	; 40
    53fc:	88 e9       	ldi	r24, 0x98	; 152
    53fe:	9a e3       	ldi	r25, 0x3A	; 58
    5400:	0e 94 fa 09 	call	0x13f4	; 0x13f4 <progCircles(unsigned int, unsigned char, unsigned int)>
    5404:	c6 cf       	rjmp	.-116    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5406:	8c 33       	cpi	r24, 0x3C	; 60
    5408:	09 f4       	brne	.+2      	; 0x540c <SunAlwaysShinesOnTV()+0xb2>
    540a:	60 c0       	rjmp	.+192    	; 0x54cc <SunAlwaysShinesOnTV()+0x172>
    540c:	84 36       	cpi	r24, 0x64	; 100
    540e:	09 f4       	brne	.+2      	; 0x5412 <SunAlwaysShinesOnTV()+0xb8>
    5410:	63 c0       	rjmp	.+198    	; 0x54d8 <SunAlwaysShinesOnTV()+0x17e>
    5412:	87 33       	cpi	r24, 0x37	; 55
    5414:	09 f0       	breq	.+2      	; 0x5418 <SunAlwaysShinesOnTV()+0xbe>
    5416:	bd cf       	rjmp	.-134    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5418:	44 ef       	ldi	r20, 0xF4	; 244
    541a:	51 e0       	ldi	r21, 0x01	; 1
    541c:	6c e3       	ldi	r22, 0x3C	; 60
    541e:	88 e9       	ldi	r24, 0x98	; 152
    5420:	9a e3       	ldi	r25, 0x3A	; 58
    5422:	0e 94 6f 0a 	call	0x14de	; 0x14de <progRandomLines(unsigned int, unsigned char, unsigned int)>
    5426:	b5 cf       	rjmp	.-150    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5428:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    542c:	7c 01       	movw	r14, r24
    542e:	6a e8       	ldi	r22, 0x8A	; 138
    5430:	72 e0       	ldi	r23, 0x02	; 2
    5432:	ce 01       	movw	r24, r28
    5434:	01 96       	adiw	r24, 0x01	; 1
    5436:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    543a:	05 e0       	ldi	r16, 0x05	; 5
    543c:	97 01       	movw	r18, r14
    543e:	4a e5       	ldi	r20, 0x5A	; 90
    5440:	50 e0       	ldi	r21, 0x00	; 0
    5442:	60 e3       	ldi	r22, 0x30	; 48
    5444:	75 e7       	ldi	r23, 0x75	; 117
    5446:	ce 01       	movw	r24, r28
    5448:	01 96       	adiw	r24, 0x01	; 1
    544a:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    544e:	ce 01       	movw	r24, r28
    5450:	01 96       	adiw	r24, 0x01	; 1
    5452:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    5456:	9d cf       	rjmp	.-198    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5458:	6a e0       	ldi	r22, 0x0A	; 10
    545a:	80 e3       	ldi	r24, 0x30	; 48
    545c:	95 e7       	ldi	r25, 0x75	; 117
    545e:	0e 94 7b 16 	call	0x2cf6	; 0x2cf6 <progMatrixVertical(unsigned int, unsigned char)>
    5462:	97 cf       	rjmp	.-210    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5464:	4f e0       	ldi	r20, 0x0F	; 15
    5466:	60 ed       	ldi	r22, 0xD0	; 208
    5468:	77 e0       	ldi	r23, 0x07	; 7
    546a:	88 e9       	ldi	r24, 0x98	; 152
    546c:	9a e3       	ldi	r25, 0x3A	; 58
    546e:	0e 94 87 08 	call	0x110e	; 0x110e <progStern(unsigned int, int, unsigned char)>
    5472:	8f cf       	rjmp	.-226    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5474:	69 e1       	ldi	r22, 0x19	; 25
    5476:	88 e9       	ldi	r24, 0x98	; 152
    5478:	9a e3       	ldi	r25, 0x3A	; 58
    547a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <progMatrixScanner(unsigned int, unsigned char)>
    547e:	89 cf       	rjmp	.-238    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5480:	40 ed       	ldi	r20, 0xD0	; 208
    5482:	57 e0       	ldi	r21, 0x07	; 7
    5484:	6e e1       	ldi	r22, 0x1E	; 30
    5486:	88 e9       	ldi	r24, 0x98	; 152
    5488:	9a e3       	ldi	r25, 0x3A	; 58
    548a:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    548e:	81 cf       	rjmp	.-254    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    5490:	ee 24       	eor	r14, r14
    5492:	ea 94       	dec	r14
    5494:	f1 2c       	mov	r15, r1
    5496:	0f ef       	ldi	r16, 0xFF	; 255
    5498:	10 e0       	ldi	r17, 0x00	; 0
    549a:	2f ef       	ldi	r18, 0xFF	; 255
    549c:	30 e0       	ldi	r19, 0x00	; 0
    549e:	42 e3       	ldi	r20, 0x32	; 50
    54a0:	50 e0       	ldi	r21, 0x00	; 0
    54a2:	63 e2       	ldi	r22, 0x23	; 35
    54a4:	97 cf       	rjmp	.-210    	; 0x53d4 <SunAlwaysShinesOnTV()+0x7a>
    54a6:	4d e2       	ldi	r20, 0x2D	; 45
    54a8:	65 e0       	ldi	r22, 0x05	; 5
    54aa:	88 e9       	ldi	r24, 0x98	; 152
    54ac:	9a e3       	ldi	r25, 0x3A	; 58
    54ae:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    54b2:	6f cf       	rjmp	.-290    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    54b4:	62 e3       	ldi	r22, 0x32	; 50
    54b6:	80 e1       	ldi	r24, 0x10	; 16
    54b8:	97 e2       	ldi	r25, 0x27	; 39
    54ba:	0e 94 15 0c 	call	0x182a	; 0x182a <progOutline(unsigned int, unsigned char)>
    54be:	69 cf       	rjmp	.-302    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    54c0:	67 e3       	ldi	r22, 0x37	; 55
    54c2:	80 e1       	ldi	r24, 0x10	; 16
    54c4:	97 e2       	ldi	r25, 0x27	; 39
    54c6:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    54ca:	63 cf       	rjmp	.-314    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    54cc:	64 e6       	ldi	r22, 0x64	; 100
    54ce:	80 e6       	ldi	r24, 0x60	; 96
    54d0:	9a ee       	ldi	r25, 0xEA	; 234
    54d2:	0e 94 24 06 	call	0xc48	; 0xc48 <progBlingBlingColoring(unsigned int, unsigned char)>
    54d6:	5d cf       	rjmp	.-326    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>
    54d8:	60 e0       	ldi	r22, 0x00	; 0
    54da:	8d e3       	ldi	r24, 0x3D	; 61
    54dc:	90 e1       	ldi	r25, 0x10	; 16
    54de:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    54e2:	80 e0       	ldi	r24, 0x00	; 0
    54e4:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    54e8:	54 cf       	rjmp	.-344    	; 0x5392 <SunAlwaysShinesOnTV()+0x38>

000054ea <enjoyTheSilence()>:
    54ea:	ef 92       	push	r14
    54ec:	ff 92       	push	r15
    54ee:	0f 93       	push	r16
    54f0:	1f 93       	push	r17
    54f2:	cf 93       	push	r28
    54f4:	df 93       	push	r29
    54f6:	00 d0       	rcall	.+0      	; 0x54f8 <enjoyTheSilence()+0xe>
    54f8:	00 d0       	rcall	.+0      	; 0x54fa <enjoyTheSilence()+0x10>
    54fa:	00 d0       	rcall	.+0      	; 0x54fc <enjoyTheSilence()+0x12>
    54fc:	1f 92       	push	r1
    54fe:	cd b7       	in	r28, 0x3d	; 61
    5500:	de b7       	in	r29, 0x3e	; 62
    5502:	80 91 28 0a 	lds	r24, 0x0A28	; 0x800a28 <prog>
    5506:	86 34       	cpi	r24, 0x46	; 70
    5508:	09 f4       	brne	.+2      	; 0x550c <enjoyTheSilence()+0x22>
    550a:	ed c0       	rjmp	.+474    	; 0x56e6 <enjoyTheSilence()+0x1fc>
    550c:	08 f0       	brcs	.+2      	; 0x5510 <enjoyTheSilence()+0x26>
    550e:	53 c0       	rjmp	.+166    	; 0x55b6 <enjoyTheSilence()+0xcc>
    5510:	8e 31       	cpi	r24, 0x1E	; 30
    5512:	09 f4       	brne	.+2      	; 0x5516 <enjoyTheSilence()+0x2c>
    5514:	c2 c0       	rjmp	.+388    	; 0x569a <enjoyTheSilence()+0x1b0>
    5516:	28 f5       	brcc	.+74     	; 0x5562 <enjoyTheSilence()+0x78>
    5518:	8a 30       	cpi	r24, 0x0A	; 10
    551a:	09 f4       	brne	.+2      	; 0x551e <enjoyTheSilence()+0x34>
    551c:	a0 c0       	rjmp	.+320    	; 0x565e <enjoyTheSilence()+0x174>
    551e:	a8 f4       	brcc	.+42     	; 0x554a <enjoyTheSilence()+0x60>
    5520:	88 23       	and	r24, r24
    5522:	09 f4       	brne	.+2      	; 0x5526 <enjoyTheSilence()+0x3c>
    5524:	84 c0       	rjmp	.+264    	; 0x562e <enjoyTheSilence()+0x144>
    5526:	4a e0       	ldi	r20, 0x0A	; 10
    5528:	6b e0       	ldi	r22, 0x0B	; 11
    552a:	85 30       	cpi	r24, 0x05	; 5
    552c:	09 f4       	brne	.+2      	; 0x5530 <enjoyTheSilence()+0x46>
    552e:	99 c0       	rjmp	.+306    	; 0x5662 <enjoyTheSilence()+0x178>
    5530:	27 96       	adiw	r28, 0x07	; 7
    5532:	0f b6       	in	r0, 0x3f	; 63
    5534:	f8 94       	cli
    5536:	de bf       	out	0x3e, r29	; 62
    5538:	0f be       	out	0x3f, r0	; 63
    553a:	cd bf       	out	0x3d, r28	; 61
    553c:	df 91       	pop	r29
    553e:	cf 91       	pop	r28
    5540:	1f 91       	pop	r17
    5542:	0f 91       	pop	r16
    5544:	ff 90       	pop	r15
    5546:	ef 90       	pop	r14
    5548:	08 95       	ret
    554a:	84 31       	cpi	r24, 0x14	; 20
    554c:	09 f4       	brne	.+2      	; 0x5550 <enjoyTheSilence()+0x66>
    554e:	8e c0       	rjmp	.+284    	; 0x566c <enjoyTheSilence()+0x182>
    5550:	89 31       	cpi	r24, 0x19	; 25
    5552:	09 f4       	brne	.+2      	; 0x5556 <enjoyTheSilence()+0x6c>
    5554:	9c c0       	rjmp	.+312    	; 0x568e <enjoyTheSilence()+0x1a4>
    5556:	8f 30       	cpi	r24, 0x0F	; 15
    5558:	59 f7       	brne	.-42     	; 0x5530 <enjoyTheSilence()+0x46>
    555a:	4a e1       	ldi	r20, 0x1A	; 26
    555c:	54 e0       	ldi	r21, 0x04	; 4
    555e:	64 e1       	ldi	r22, 0x14	; 20
    5560:	3b c0       	rjmp	.+118    	; 0x55d8 <enjoyTheSilence()+0xee>
    5562:	82 33       	cpi	r24, 0x32	; 50
    5564:	09 f4       	brne	.+2      	; 0x5568 <enjoyTheSilence()+0x7e>
    5566:	a4 c0       	rjmp	.+328    	; 0x56b0 <enjoyTheSilence()+0x1c6>
    5568:	78 f4       	brcc	.+30     	; 0x5588 <enjoyTheSilence()+0x9e>
    556a:	88 32       	cpi	r24, 0x28	; 40
    556c:	09 f4       	brne	.+2      	; 0x5570 <enjoyTheSilence()+0x86>
    556e:	9b c0       	rjmp	.+310    	; 0x56a6 <enjoyTheSilence()+0x1bc>
    5570:	8d 32       	cpi	r24, 0x2D	; 45
    5572:	09 f4       	brne	.+2      	; 0x5576 <enjoyTheSilence()+0x8c>
    5574:	9b c0       	rjmp	.+310    	; 0x56ac <enjoyTheSilence()+0x1c2>
    5576:	83 32       	cpi	r24, 0x23	; 35
    5578:	d9 f6       	brne	.-74     	; 0x5530 <enjoyTheSilence()+0x46>
    557a:	48 e2       	ldi	r20, 0x28	; 40
    557c:	65 e0       	ldi	r22, 0x05	; 5
    557e:	88 e6       	ldi	r24, 0x68	; 104
    5580:	92 e4       	ldi	r25, 0x42	; 66
    5582:	0e 94 b5 06 	call	0xd6a	; 0xd6a <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5586:	d4 cf       	rjmp	.-88     	; 0x5530 <enjoyTheSilence()+0x46>
    5588:	8c 33       	cpi	r24, 0x3C	; 60
    558a:	09 f4       	brne	.+2      	; 0x558e <enjoyTheSilence()+0xa4>
    558c:	99 c0       	rjmp	.+306    	; 0x56c0 <enjoyTheSilence()+0x1d6>
    558e:	81 34       	cpi	r24, 0x41	; 65
    5590:	09 f4       	brne	.+2      	; 0x5594 <enjoyTheSilence()+0xaa>
    5592:	a6 c0       	rjmp	.+332    	; 0x56e0 <enjoyTheSilence()+0x1f6>
    5594:	87 33       	cpi	r24, 0x37	; 55
    5596:	61 f6       	brne	.-104    	; 0x5530 <enjoyTheSilence()+0x46>
    5598:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    559c:	7c 01       	movw	r14, r24
    559e:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    55a2:	8c 01       	movw	r16, r24
    55a4:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    55a8:	9c 01       	movw	r18, r24
    55aa:	42 e3       	ldi	r20, 0x32	; 50
    55ac:	50 e0       	ldi	r21, 0x00	; 0
    55ae:	6c e3       	ldi	r22, 0x3C	; 60
    55b0:	80 e3       	ldi	r24, 0x30	; 48
    55b2:	91 e2       	ldi	r25, 0x21	; 33
    55b4:	69 c0       	rjmp	.+210    	; 0x5688 <enjoyTheSilence()+0x19e>
    55b6:	89 36       	cpi	r24, 0x69	; 105
    55b8:	09 f4       	brne	.+2      	; 0x55bc <enjoyTheSilence()+0xd2>
    55ba:	c4 c0       	rjmp	.+392    	; 0x5744 <enjoyTheSilence()+0x25a>
    55bc:	e8 f4       	brcc	.+58     	; 0x55f8 <enjoyTheSilence()+0x10e>
    55be:	85 35       	cpi	r24, 0x55	; 85
    55c0:	09 f4       	brne	.+2      	; 0x55c4 <enjoyTheSilence()+0xda>
    55c2:	99 c0       	rjmp	.+306    	; 0x56f6 <enjoyTheSilence()+0x20c>
    55c4:	60 f4       	brcc	.+24     	; 0x55de <enjoyTheSilence()+0xf4>
    55c6:	8b 34       	cpi	r24, 0x4B	; 75
    55c8:	09 f4       	brne	.+2      	; 0x55cc <enjoyTheSilence()+0xe2>
    55ca:	90 c0       	rjmp	.+288    	; 0x56ec <enjoyTheSilence()+0x202>
    55cc:	4a e1       	ldi	r20, 0x1A	; 26
    55ce:	54 e0       	ldi	r21, 0x04	; 4
    55d0:	65 e5       	ldi	r22, 0x55	; 85
    55d2:	80 35       	cpi	r24, 0x50	; 80
    55d4:	09 f0       	breq	.+2      	; 0x55d8 <enjoyTheSilence()+0xee>
    55d6:	ac cf       	rjmp	.-168    	; 0x5530 <enjoyTheSilence()+0x46>
    55d8:	84 e3       	ldi	r24, 0x34	; 52
    55da:	91 e2       	ldi	r25, 0x21	; 33
    55dc:	6e c0       	rjmp	.+220    	; 0x56ba <enjoyTheSilence()+0x1d0>
    55de:	8f 35       	cpi	r24, 0x5F	; 95
    55e0:	09 f4       	brne	.+2      	; 0x55e4 <enjoyTheSilence()+0xfa>
    55e2:	98 c0       	rjmp	.+304    	; 0x5714 <enjoyTheSilence()+0x22a>
    55e4:	84 36       	cpi	r24, 0x64	; 100
    55e6:	09 f4       	brne	.+2      	; 0x55ea <enjoyTheSilence()+0x100>
    55e8:	a2 c0       	rjmp	.+324    	; 0x572e <enjoyTheSilence()+0x244>
    55ea:	8a 35       	cpi	r24, 0x5A	; 90
    55ec:	09 f0       	breq	.+2      	; 0x55f0 <enjoyTheSilence()+0x106>
    55ee:	a0 cf       	rjmp	.-192    	; 0x5530 <enjoyTheSilence()+0x46>
    55f0:	4a e1       	ldi	r20, 0x1A	; 26
    55f2:	54 e0       	ldi	r21, 0x04	; 4
    55f4:	6f e5       	ldi	r22, 0x5F	; 95
    55f6:	f0 cf       	rjmp	.-32     	; 0x55d8 <enjoyTheSilence()+0xee>
    55f8:	8d 37       	cpi	r24, 0x7D	; 125
    55fa:	09 f4       	brne	.+2      	; 0x55fe <enjoyTheSilence()+0x114>
    55fc:	ad c0       	rjmp	.+346    	; 0x5758 <enjoyTheSilence()+0x26e>
    55fe:	58 f4       	brcc	.+22     	; 0x5616 <enjoyTheSilence()+0x12c>
    5600:	83 37       	cpi	r24, 0x73	; 115
    5602:	09 f4       	brne	.+2      	; 0x5606 <enjoyTheSilence()+0x11c>
    5604:	a4 c0       	rjmp	.+328    	; 0x574e <enjoyTheSilence()+0x264>
    5606:	88 37       	cpi	r24, 0x78	; 120
    5608:	09 f4       	brne	.+2      	; 0x560c <enjoyTheSilence()+0x122>
    560a:	a4 c0       	rjmp	.+328    	; 0x5754 <enjoyTheSilence()+0x26a>
    560c:	8e 36       	cpi	r24, 0x6E	; 110
    560e:	09 f0       	breq	.+2      	; 0x5612 <enjoyTheSilence()+0x128>
    5610:	8f cf       	rjmp	.-226    	; 0x5530 <enjoyTheSilence()+0x46>
    5612:	43 e7       	ldi	r20, 0x73	; 115
    5614:	66 c0       	rjmp	.+204    	; 0x56e2 <enjoyTheSilence()+0x1f8>
    5616:	87 38       	cpi	r24, 0x87	; 135
    5618:	09 f4       	brne	.+2      	; 0x561c <enjoyTheSilence()+0x132>
    561a:	a1 c0       	rjmp	.+322    	; 0x575e <enjoyTheSilence()+0x274>
    561c:	88 3c       	cpi	r24, 0xC8	; 200
    561e:	09 f4       	brne	.+2      	; 0x5622 <enjoyTheSilence()+0x138>
    5620:	a2 c0       	rjmp	.+324    	; 0x5766 <enjoyTheSilence()+0x27c>
    5622:	82 38       	cpi	r24, 0x82	; 130
    5624:	09 f0       	breq	.+2      	; 0x5628 <enjoyTheSilence()+0x13e>
    5626:	84 cf       	rjmp	.-248    	; 0x5530 <enjoyTheSilence()+0x46>
    5628:	47 e8       	ldi	r20, 0x87	; 135
    562a:	66 e0       	ldi	r22, 0x06	; 6
    562c:	8d c0       	rjmp	.+282    	; 0x5748 <enjoyTheSilence()+0x25e>
    562e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    5632:	7c 01       	movw	r14, r24
    5634:	68 e9       	ldi	r22, 0x98	; 152
    5636:	72 e0       	ldi	r23, 0x02	; 2
    5638:	ce 01       	movw	r24, r28
    563a:	01 96       	adiw	r24, 0x01	; 1
    563c:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5640:	05 e0       	ldi	r16, 0x05	; 5
    5642:	97 01       	movw	r18, r14
    5644:	4a e5       	ldi	r20, 0x5A	; 90
    5646:	50 e0       	ldi	r21, 0x00	; 0
    5648:	6f e0       	ldi	r22, 0x0F	; 15
    564a:	75 e5       	ldi	r23, 0x55	; 85
    564c:	ce 01       	movw	r24, r28
    564e:	01 96       	adiw	r24, 0x01	; 1
    5650:	0e 94 4c 0e 	call	0x1c98	; 0x1c98 <progScrollText(String, unsigned int, int, int, unsigned char)>
    5654:	ce 01       	movw	r24, r28
    5656:	01 96       	adiw	r24, 0x01	; 1
    5658:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    565c:	69 cf       	rjmp	.-302    	; 0x5530 <enjoyTheSilence()+0x46>
    565e:	4f e0       	ldi	r20, 0x0F	; 15
    5660:	63 e0       	ldi	r22, 0x03	; 3
    5662:	84 e3       	ldi	r24, 0x34	; 52
    5664:	91 e2       	ldi	r25, 0x21	; 33
    5666:	0e 94 84 11 	call	0x2308	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)>
    566a:	62 cf       	rjmp	.-316    	; 0x5530 <enjoyTheSilence()+0x46>
    566c:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5670:	7c 01       	movw	r14, r24
    5672:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5676:	8c 01       	movw	r16, r24
    5678:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    567c:	9c 01       	movw	r18, r24
    567e:	42 e3       	ldi	r20, 0x32	; 50
    5680:	50 e0       	ldi	r21, 0x00	; 0
    5682:	69 e1       	ldi	r22, 0x19	; 25
    5684:	8e e0       	ldi	r24, 0x0E	; 14
    5686:	9f e1       	ldi	r25, 0x1F	; 31
    5688:	0e 94 69 07 	call	0xed2	; 0xed2 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    568c:	51 cf       	rjmp	.-350    	; 0x5530 <enjoyTheSilence()+0x46>
    568e:	6e e1       	ldi	r22, 0x1E	; 30
    5690:	8d e0       	ldi	r24, 0x0D	; 13
    5692:	92 e0       	ldi	r25, 0x02	; 2
    5694:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <progBlack(unsigned int, unsigned char)>
    5698:	4b cf       	rjmp	.-362    	; 0x5530 <enjoyTheSilence()+0x46>
    569a:	63 e2       	ldi	r22, 0x23	; 35
    569c:	8d e4       	ldi	r24, 0x4D	; 77
    569e:	98 e0       	ldi	r25, 0x08	; 8
    56a0:	0e 94 13 0b 	call	0x1626	; 0x1626 <progMovingLines(unsigned int, unsigned char)>
    56a4:	45 cf       	rjmp	.-374    	; 0x5530 <enjoyTheSilence()+0x46>
    56a6:	4d e2       	ldi	r20, 0x2D	; 45
    56a8:	62 e0       	ldi	r22, 0x02	; 2
    56aa:	db cf       	rjmp	.-74     	; 0x5662 <enjoyTheSilence()+0x178>
    56ac:	42 e3       	ldi	r20, 0x32	; 50
    56ae:	d8 cf       	rjmp	.-80     	; 0x5660 <enjoyTheSilence()+0x176>
    56b0:	4a e1       	ldi	r20, 0x1A	; 26
    56b2:	54 e0       	ldi	r21, 0x04	; 4
    56b4:	67 e3       	ldi	r22, 0x37	; 55
    56b6:	80 e3       	ldi	r24, 0x30	; 48
    56b8:	91 e2       	ldi	r25, 0x21	; 33
    56ba:	0e 94 04 07 	call	0xe08	; 0xe08 <progFullColors(unsigned int, unsigned char, unsigned int)>
    56be:	38 cf       	rjmp	.-400    	; 0x5530 <enjoyTheSilence()+0x46>
    56c0:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    56c4:	7c 01       	movw	r14, r24
    56c6:	6a eb       	ldi	r22, 0xBA	; 186
    56c8:	72 e0       	ldi	r23, 0x02	; 2
    56ca:	ce 01       	movw	r24, r28
    56cc:	01 96       	adiw	r24, 0x01	; 1
    56ce:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    56d2:	01 e4       	ldi	r16, 0x41	; 65
    56d4:	97 01       	movw	r18, r14
    56d6:	49 e1       	ldi	r20, 0x19	; 25
    56d8:	50 e0       	ldi	r21, 0x00	; 0
    56da:	6d e4       	ldi	r22, 0x4D	; 77
    56dc:	78 e0       	ldi	r23, 0x08	; 8
    56de:	b6 cf       	rjmp	.-148    	; 0x564c <enjoyTheSilence()+0x162>
    56e0:	46 e4       	ldi	r20, 0x46	; 70
    56e2:	62 e0       	ldi	r22, 0x02	; 2
    56e4:	31 c0       	rjmp	.+98     	; 0x5748 <enjoyTheSilence()+0x25e>
    56e6:	4b e4       	ldi	r20, 0x4B	; 75
    56e8:	64 e0       	ldi	r22, 0x04	; 4
    56ea:	2e c0       	rjmp	.+92     	; 0x5748 <enjoyTheSilence()+0x25e>
    56ec:	40 e5       	ldi	r20, 0x50	; 80
    56ee:	69 e0       	ldi	r22, 0x09	; 9
    56f0:	8f e5       	ldi	r24, 0x5F	; 95
    56f2:	92 e4       	ldi	r25, 0x42	; 66
    56f4:	b8 cf       	rjmp	.-144    	; 0x5666 <enjoyTheSilence()+0x17c>
    56f6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    56fa:	7c 01       	movw	r14, r24
    56fc:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5700:	8c 01       	movw	r16, r24
    5702:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5706:	9c 01       	movw	r18, r24
    5708:	42 e3       	ldi	r20, 0x32	; 50
    570a:	50 e0       	ldi	r21, 0x00	; 0
    570c:	6a e5       	ldi	r22, 0x5A	; 90
    570e:	84 e3       	ldi	r24, 0x34	; 52
    5710:	91 e2       	ldi	r25, 0x21	; 33
    5712:	ba cf       	rjmp	.-140    	; 0x5688 <enjoyTheSilence()+0x19e>
    5714:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5718:	7c 01       	movw	r14, r24
    571a:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    571e:	8c 01       	movw	r16, r24
    5720:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5724:	9c 01       	movw	r18, r24
    5726:	42 e3       	ldi	r20, 0x32	; 50
    5728:	50 e0       	ldi	r21, 0x00	; 0
    572a:	64 e6       	ldi	r22, 0x64	; 100
    572c:	f0 cf       	rjmp	.-32     	; 0x570e <enjoyTheSilence()+0x224>
    572e:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <getRandomColor()>
    5732:	7c 01       	movw	r14, r24
    5734:	6a eb       	ldi	r22, 0xBA	; 186
    5736:	72 e0       	ldi	r23, 0x02	; 2
    5738:	ce 01       	movw	r24, r28
    573a:	01 96       	adiw	r24, 0x01	; 1
    573c:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5740:	09 e6       	ldi	r16, 0x69	; 105
    5742:	c8 cf       	rjmp	.-112    	; 0x56d4 <enjoyTheSilence()+0x1ea>
    5744:	4e e6       	ldi	r20, 0x6E	; 110
    5746:	61 e0       	ldi	r22, 0x01	; 1
    5748:	8a e2       	ldi	r24, 0x2A	; 42
    574a:	91 e2       	ldi	r25, 0x21	; 33
    574c:	1a cf       	rjmp	.-460    	; 0x5582 <enjoyTheSilence()+0x98>
    574e:	48 e7       	ldi	r20, 0x78	; 120
    5750:	63 e0       	ldi	r22, 0x03	; 3
    5752:	fa cf       	rjmp	.-12     	; 0x5748 <enjoyTheSilence()+0x25e>
    5754:	4d e7       	ldi	r20, 0x7D	; 125
    5756:	c8 cf       	rjmp	.-112    	; 0x56e8 <enjoyTheSilence()+0x1fe>
    5758:	42 e8       	ldi	r20, 0x82	; 130
    575a:	65 e0       	ldi	r22, 0x05	; 5
    575c:	f5 cf       	rjmp	.-22     	; 0x5748 <enjoyTheSilence()+0x25e>
    575e:	68 ec       	ldi	r22, 0xC8	; 200
    5760:	80 e5       	ldi	r24, 0x50	; 80
    5762:	93 ec       	ldi	r25, 0xC3	; 195
    5764:	97 cf       	rjmp	.-210    	; 0x5694 <enjoyTheSilence()+0x1aa>
    5766:	60 e0       	ldi	r22, 0x00	; 0
    5768:	8d e3       	ldi	r24, 0x3D	; 61
    576a:	90 e1       	ldi	r25, 0x10	; 16
    576c:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    5770:	80 e0       	ldi	r24, 0x00	; 0
    5772:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    5776:	dc ce       	rjmp	.-584    	; 0x5530 <enjoyTheSilence()+0x46>

00005778 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    5778:	9f 92       	push	r9
    577a:	af 92       	push	r10
    577c:	bf 92       	push	r11
    577e:	cf 92       	push	r12
    5780:	df 92       	push	r13
    5782:	ef 92       	push	r14
    5784:	ff 92       	push	r15
    5786:	0f 93       	push	r16
    5788:	1f 93       	push	r17
    578a:	cf 93       	push	r28
    578c:	df 93       	push	r29
    578e:	fc 01       	movw	r30, r24
    5790:	c0 80       	ld	r12, Z
    5792:	d1 80       	ldd	r13, Z+1	; 0x01
    5794:	28 b1       	in	r18, 0x08	; 8
    5796:	b2 2e       	mov	r11, r18
    5798:	68 94       	set
    579a:	b2 f8       	bld	r11, 2
    579c:	98 b1       	in	r25, 0x08	; 8
    579e:	9b 7f       	andi	r25, 0xFB	; 251
    57a0:	98 b9       	out	0x08, r25	; 8
    57a2:	62 85       	ldd	r22, Z+10	; 0x0a
    57a4:	87 81       	ldd	r24, Z+7	; 0x07
    57a6:	06 2f       	mov	r16, r22
    57a8:	08 1b       	sub	r16, r24
    57aa:	80 2f       	mov	r24, r16
    57ac:	07 83       	std	Z+7, r16	; 0x07
    57ae:	77 85       	ldd	r23, Z+15	; 0x0f
    57b0:	a2 81       	ldd	r26, Z+2	; 0x02
    57b2:	b3 81       	ldd	r27, Z+3	; 0x03
    57b4:	35 85       	ldd	r19, Z+13	; 0x0d
    57b6:	44 85       	ldd	r20, Z+12	; 0x0c
    57b8:	56 85       	ldd	r21, Z+14	; 0x0e
    57ba:	99 24       	eor	r9, r9
    57bc:	93 94       	inc	r9
    57be:	93 0e       	add	r9, r19
    57c0:	4f 5f       	subi	r20, 0xFF	; 255
    57c2:	5f 5f       	subi	r21, 0xFF	; 255
    57c4:	f6 80       	ldd	r15, Z+6	; 0x06
    57c6:	e0 84       	ldd	r14, Z+8	; 0x08
    57c8:	c1 85       	ldd	r28, Z+9	; 0x09
    57ca:	d3 85       	ldd	r29, Z+11	; 0x0b
    57cc:	f6 01       	movw	r30, r12
    57ce:	11 81       	ldd	r17, Z+1	; 0x01
    57d0:	a1 2c       	mov	r10, r1
    57d2:	0a 2d       	mov	r16, r10
    57d4:	2a 2d       	mov	r18, r10
    57d6:	3a 2d       	mov	r19, r10
    57d8:	31 81       	ldd	r19, Z+1	; 0x01
    57da:	11 27       	eor	r17, r17
    57dc:	88 94       	clc
    57de:	31 11       	cpse	r19, r1
    57e0:	38 0f       	add	r19, r24
    57e2:	08 f4       	brcc	.+2      	; 0x57e6 <L_17251>
    57e4:	3f ef       	ldi	r19, 0xFF	; 255

000057e6 <L_17251>:
    57e6:	81 95       	neg	r24
    57e8:	88 94       	clc
    57ea:	90 fc       	sbrc	r9, 0
    57ec:	13 0f       	add	r17, r19
    57ee:	17 95       	ror	r17
    57f0:	88 94       	clc
    57f2:	91 fc       	sbrc	r9, 1
    57f4:	13 0f       	add	r17, r19
    57f6:	17 95       	ror	r17
    57f8:	88 94       	clc
    57fa:	92 fc       	sbrc	r9, 2
    57fc:	13 0f       	add	r17, r19
    57fe:	17 95       	ror	r17
    5800:	88 94       	clc
    5802:	93 fc       	sbrc	r9, 3
    5804:	13 0f       	add	r17, r19
    5806:	17 95       	ror	r17
    5808:	88 94       	clc
    580a:	94 fc       	sbrc	r9, 4
    580c:	13 0f       	add	r17, r19
    580e:	17 95       	ror	r17
    5810:	88 94       	clc
    5812:	95 fc       	sbrc	r9, 5
    5814:	13 0f       	add	r17, r19
    5816:	17 95       	ror	r17
    5818:	88 94       	clc
    581a:	96 fc       	sbrc	r9, 6
    581c:	13 0f       	add	r17, r19
    581e:	17 95       	ror	r17
    5820:	88 94       	clc
    5822:	97 fc       	sbrc	r9, 7
    5824:	13 0f       	add	r17, r19
    5826:	17 95       	ror	r17
    5828:	88 94       	clc
    582a:	03 2f       	mov	r16, r19
    582c:	91 10       	cpse	r9, r1
    582e:	01 2f       	mov	r16, r17
    5830:	86 0f       	add	r24, r22
    5832:	10 2f       	mov	r17, r16
    5834:	00 2c       	mov	r0, r0
    5836:	b8 b8       	out	0x08, r11	; 8
    5838:	00 c0       	rjmp	.+0      	; 0x583a <L_17251+0x54>
    583a:	17 ff       	sbrs	r17, 7
    583c:	98 b9       	out	0x08, r25	; 8
    583e:	30 81       	ld	r19, Z
    5840:	00 27       	eor	r16, r16
    5842:	88 94       	clc
    5844:	00 c0       	rjmp	.+0      	; 0x5846 <L_17251+0x60>
    5846:	00 c0       	rjmp	.+0      	; 0x5848 <L_17251+0x62>
    5848:	00 2c       	mov	r0, r0
    584a:	98 b9       	out	0x08, r25	; 8
    584c:	31 11       	cpse	r19, r1
    584e:	3f 0d       	add	r19, r15
    5850:	00 c0       	rjmp	.+0      	; 0x5852 <L_17251+0x6c>
    5852:	00 2c       	mov	r0, r0
    5854:	b8 b8       	out	0x08, r11	; 8
    5856:	00 c0       	rjmp	.+0      	; 0x5858 <L_17251+0x72>
    5858:	16 ff       	sbrs	r17, 6
    585a:	98 b9       	out	0x08, r25	; 8
    585c:	08 f4       	brcc	.+2      	; 0x5860 <L_17784>
    585e:	3f ef       	ldi	r19, 0xFF	; 255

00005860 <L_17784>:
    5860:	f1 94       	neg	r15
    5862:	88 94       	clc
    5864:	00 c0       	rjmp	.+0      	; 0x5866 <L_17784+0x6>
    5866:	00 c0       	rjmp	.+0      	; 0x5868 <L_17784+0x8>
    5868:	00 2c       	mov	r0, r0
    586a:	98 b9       	out	0x08, r25	; 8
    586c:	40 fd       	sbrc	r20, 0
    586e:	03 0f       	add	r16, r19
    5870:	00 c0       	rjmp	.+0      	; 0x5872 <L_17784+0x12>
    5872:	00 2c       	mov	r0, r0
    5874:	b8 b8       	out	0x08, r11	; 8
    5876:	00 c0       	rjmp	.+0      	; 0x5878 <L_17784+0x18>
    5878:	15 ff       	sbrs	r17, 5
    587a:	98 b9       	out	0x08, r25	; 8
    587c:	07 95       	ror	r16
    587e:	88 94       	clc
    5880:	41 fd       	sbrc	r20, 1
    5882:	03 0f       	add	r16, r19
    5884:	00 c0       	rjmp	.+0      	; 0x5886 <L_17784+0x26>
    5886:	00 c0       	rjmp	.+0      	; 0x5888 <L_17784+0x28>
    5888:	00 2c       	mov	r0, r0
    588a:	98 b9       	out	0x08, r25	; 8
    588c:	07 95       	ror	r16
    588e:	88 94       	clc
    5890:	00 c0       	rjmp	.+0      	; 0x5892 <L_17784+0x32>
    5892:	00 2c       	mov	r0, r0
    5894:	b8 b8       	out	0x08, r11	; 8
    5896:	00 c0       	rjmp	.+0      	; 0x5898 <L_17784+0x38>
    5898:	14 ff       	sbrs	r17, 4
    589a:	98 b9       	out	0x08, r25	; 8
    589c:	42 fd       	sbrc	r20, 2
    589e:	03 0f       	add	r16, r19
    58a0:	07 95       	ror	r16
    58a2:	88 94       	clc
    58a4:	00 c0       	rjmp	.+0      	; 0x58a6 <L_17784+0x46>
    58a6:	00 c0       	rjmp	.+0      	; 0x58a8 <L_17784+0x48>
    58a8:	00 2c       	mov	r0, r0
    58aa:	98 b9       	out	0x08, r25	; 8
    58ac:	43 fd       	sbrc	r20, 3
    58ae:	03 0f       	add	r16, r19
    58b0:	00 c0       	rjmp	.+0      	; 0x58b2 <L_17784+0x52>
    58b2:	00 2c       	mov	r0, r0
    58b4:	b8 b8       	out	0x08, r11	; 8
    58b6:	00 c0       	rjmp	.+0      	; 0x58b8 <L_17784+0x58>
    58b8:	13 ff       	sbrs	r17, 3
    58ba:	98 b9       	out	0x08, r25	; 8
    58bc:	07 95       	ror	r16
    58be:	88 94       	clc
    58c0:	44 fd       	sbrc	r20, 4
    58c2:	03 0f       	add	r16, r19
    58c4:	00 c0       	rjmp	.+0      	; 0x58c6 <L_17784+0x66>
    58c6:	00 c0       	rjmp	.+0      	; 0x58c8 <L_17784+0x68>
    58c8:	00 2c       	mov	r0, r0
    58ca:	98 b9       	out	0x08, r25	; 8
    58cc:	07 95       	ror	r16
    58ce:	88 94       	clc
    58d0:	00 c0       	rjmp	.+0      	; 0x58d2 <L_17784+0x72>
    58d2:	00 2c       	mov	r0, r0
    58d4:	b8 b8       	out	0x08, r11	; 8
    58d6:	00 c0       	rjmp	.+0      	; 0x58d8 <L_17784+0x78>
    58d8:	12 ff       	sbrs	r17, 2
    58da:	98 b9       	out	0x08, r25	; 8
    58dc:	45 fd       	sbrc	r20, 5
    58de:	03 0f       	add	r16, r19
    58e0:	07 95       	ror	r16
    58e2:	88 94       	clc
    58e4:	00 c0       	rjmp	.+0      	; 0x58e6 <L_17784+0x86>
    58e6:	00 c0       	rjmp	.+0      	; 0x58e8 <L_17784+0x88>
    58e8:	00 2c       	mov	r0, r0
    58ea:	98 b9       	out	0x08, r25	; 8
    58ec:	46 fd       	sbrc	r20, 6
    58ee:	03 0f       	add	r16, r19
    58f0:	00 c0       	rjmp	.+0      	; 0x58f2 <L_17784+0x92>
    58f2:	00 2c       	mov	r0, r0
    58f4:	b8 b8       	out	0x08, r11	; 8
    58f6:	00 c0       	rjmp	.+0      	; 0x58f8 <L_17784+0x98>
    58f8:	11 ff       	sbrs	r17, 1
    58fa:	98 b9       	out	0x08, r25	; 8
    58fc:	07 95       	ror	r16
    58fe:	88 94       	clc
    5900:	47 fd       	sbrc	r20, 7
    5902:	03 0f       	add	r16, r19
    5904:	00 c0       	rjmp	.+0      	; 0x5906 <L_17784+0xa6>
    5906:	00 c0       	rjmp	.+0      	; 0x5908 <L_17784+0xa8>
    5908:	00 2c       	mov	r0, r0
    590a:	98 b9       	out	0x08, r25	; 8
    590c:	07 95       	ror	r16
    590e:	88 94       	clc
    5910:	00 c0       	rjmp	.+0      	; 0x5912 <L_17784+0xb2>
    5912:	00 2c       	mov	r0, r0
    5914:	b8 b8       	out	0x08, r11	; 8
    5916:	00 c0       	rjmp	.+0      	; 0x5918 <L_17784+0xb8>
    5918:	10 ff       	sbrs	r17, 0
    591a:	98 b9       	out	0x08, r25	; 8
    591c:	13 2f       	mov	r17, r19
    591e:	41 11       	cpse	r20, r1
    5920:	10 2f       	mov	r17, r16
    5922:	fc 0e       	add	r15, r28
    5924:	00 c0       	rjmp	.+0      	; 0x5926 <L_17784+0xc6>
    5926:	00 c0       	rjmp	.+0      	; 0x5928 <L_17784+0xc8>
    5928:	00 2c       	mov	r0, r0
    592a:	98 b9       	out	0x08, r25	; 8
    592c:	00 c0       	rjmp	.+0      	; 0x592e <L_17784+0xce>
    592e:	00 c0       	rjmp	.+0      	; 0x5930 <L_17784+0xd0>
    5930:	00 2c       	mov	r0, r0
    5932:	b8 b8       	out	0x08, r11	; 8
    5934:	00 c0       	rjmp	.+0      	; 0x5936 <L_17784+0xd6>
    5936:	17 ff       	sbrs	r17, 7
    5938:	98 b9       	out	0x08, r25	; 8
    593a:	32 81       	ldd	r19, Z+2	; 0x02
    593c:	00 27       	eor	r16, r16
    593e:	88 94       	clc
    5940:	00 c0       	rjmp	.+0      	; 0x5942 <L_17784+0xe2>
    5942:	00 c0       	rjmp	.+0      	; 0x5944 <L_17784+0xe4>
    5944:	00 2c       	mov	r0, r0
    5946:	98 b9       	out	0x08, r25	; 8
    5948:	31 11       	cpse	r19, r1
    594a:	3e 0d       	add	r19, r14
    594c:	00 c0       	rjmp	.+0      	; 0x594e <L_17784+0xee>
    594e:	00 2c       	mov	r0, r0
    5950:	b8 b8       	out	0x08, r11	; 8
    5952:	00 c0       	rjmp	.+0      	; 0x5954 <L_17784+0xf4>
    5954:	16 ff       	sbrs	r17, 6
    5956:	98 b9       	out	0x08, r25	; 8
    5958:	08 f4       	brcc	.+2      	; 0x595c <L_19002>
    595a:	3f ef       	ldi	r19, 0xFF	; 255

0000595c <L_19002>:
    595c:	e7 0f       	add	r30, r23
    595e:	f1 1d       	adc	r31, r1
    5960:	00 c0       	rjmp	.+0      	; 0x5962 <L_19002+0x6>
    5962:	00 c0       	rjmp	.+0      	; 0x5964 <L_19002+0x8>
    5964:	00 2c       	mov	r0, r0
    5966:	98 b9       	out	0x08, r25	; 8
    5968:	50 fd       	sbrc	r21, 0
    596a:	03 0f       	add	r16, r19
    596c:	00 c0       	rjmp	.+0      	; 0x596e <L_19002+0x12>
    596e:	00 2c       	mov	r0, r0
    5970:	b8 b8       	out	0x08, r11	; 8
    5972:	00 c0       	rjmp	.+0      	; 0x5974 <L_19002+0x18>
    5974:	15 ff       	sbrs	r17, 5
    5976:	98 b9       	out	0x08, r25	; 8
    5978:	07 95       	ror	r16
    597a:	88 94       	clc
    597c:	51 fd       	sbrc	r21, 1
    597e:	03 0f       	add	r16, r19
    5980:	00 c0       	rjmp	.+0      	; 0x5982 <L_19002+0x26>
    5982:	00 c0       	rjmp	.+0      	; 0x5984 <L_19002+0x28>
    5984:	00 2c       	mov	r0, r0
    5986:	98 b9       	out	0x08, r25	; 8
    5988:	07 95       	ror	r16
    598a:	88 94       	clc
    598c:	00 c0       	rjmp	.+0      	; 0x598e <L_19002+0x32>
    598e:	00 2c       	mov	r0, r0
    5990:	b8 b8       	out	0x08, r11	; 8
    5992:	00 c0       	rjmp	.+0      	; 0x5994 <L_19002+0x38>
    5994:	14 ff       	sbrs	r17, 4
    5996:	98 b9       	out	0x08, r25	; 8
    5998:	52 fd       	sbrc	r21, 2
    599a:	03 0f       	add	r16, r19
    599c:	07 95       	ror	r16
    599e:	88 94       	clc
    59a0:	00 c0       	rjmp	.+0      	; 0x59a2 <L_19002+0x46>
    59a2:	00 c0       	rjmp	.+0      	; 0x59a4 <L_19002+0x48>
    59a4:	00 2c       	mov	r0, r0
    59a6:	98 b9       	out	0x08, r25	; 8
    59a8:	53 fd       	sbrc	r21, 3
    59aa:	03 0f       	add	r16, r19
    59ac:	00 c0       	rjmp	.+0      	; 0x59ae <L_19002+0x52>
    59ae:	00 2c       	mov	r0, r0
    59b0:	b8 b8       	out	0x08, r11	; 8
    59b2:	00 c0       	rjmp	.+0      	; 0x59b4 <L_19002+0x58>
    59b4:	13 ff       	sbrs	r17, 3
    59b6:	98 b9       	out	0x08, r25	; 8
    59b8:	07 95       	ror	r16
    59ba:	88 94       	clc
    59bc:	54 fd       	sbrc	r21, 4
    59be:	03 0f       	add	r16, r19
    59c0:	00 c0       	rjmp	.+0      	; 0x59c2 <L_19002+0x66>
    59c2:	00 c0       	rjmp	.+0      	; 0x59c4 <L_19002+0x68>
    59c4:	00 2c       	mov	r0, r0
    59c6:	98 b9       	out	0x08, r25	; 8
    59c8:	07 95       	ror	r16
    59ca:	88 94       	clc
    59cc:	00 c0       	rjmp	.+0      	; 0x59ce <L_19002+0x72>
    59ce:	00 2c       	mov	r0, r0
    59d0:	b8 b8       	out	0x08, r11	; 8
    59d2:	00 c0       	rjmp	.+0      	; 0x59d4 <L_19002+0x78>
    59d4:	12 ff       	sbrs	r17, 2
    59d6:	98 b9       	out	0x08, r25	; 8
    59d8:	55 fd       	sbrc	r21, 5
    59da:	03 0f       	add	r16, r19
    59dc:	07 95       	ror	r16
    59de:	88 94       	clc
    59e0:	00 c0       	rjmp	.+0      	; 0x59e2 <L_19002+0x86>
    59e2:	00 c0       	rjmp	.+0      	; 0x59e4 <L_19002+0x88>
    59e4:	00 2c       	mov	r0, r0
    59e6:	98 b9       	out	0x08, r25	; 8
    59e8:	56 fd       	sbrc	r21, 6
    59ea:	03 0f       	add	r16, r19
    59ec:	00 c0       	rjmp	.+0      	; 0x59ee <L_19002+0x92>
    59ee:	00 2c       	mov	r0, r0
    59f0:	b8 b8       	out	0x08, r11	; 8
    59f2:	00 c0       	rjmp	.+0      	; 0x59f4 <L_19002+0x98>
    59f4:	11 ff       	sbrs	r17, 1
    59f6:	98 b9       	out	0x08, r25	; 8
    59f8:	07 95       	ror	r16
    59fa:	88 94       	clc
    59fc:	57 fd       	sbrc	r21, 7
    59fe:	03 0f       	add	r16, r19
    5a00:	00 c0       	rjmp	.+0      	; 0x5a02 <L_19002+0xa6>
    5a02:	00 c0       	rjmp	.+0      	; 0x5a04 <L_19002+0xa8>
    5a04:	00 2c       	mov	r0, r0
    5a06:	98 b9       	out	0x08, r25	; 8
    5a08:	07 95       	ror	r16
    5a0a:	88 94       	clc
    5a0c:	00 c0       	rjmp	.+0      	; 0x5a0e <L_19002+0xb2>
    5a0e:	00 2c       	mov	r0, r0
    5a10:	b8 b8       	out	0x08, r11	; 8
    5a12:	00 c0       	rjmp	.+0      	; 0x5a14 <L_19002+0xb8>
    5a14:	10 ff       	sbrs	r17, 0
    5a16:	98 b9       	out	0x08, r25	; 8
    5a18:	13 2f       	mov	r17, r19
    5a1a:	51 11       	cpse	r21, r1
    5a1c:	10 2f       	mov	r17, r16
    5a1e:	e1 94       	neg	r14
    5a20:	00 c0       	rjmp	.+0      	; 0x5a22 <L_19002+0xc6>
    5a22:	00 c0       	rjmp	.+0      	; 0x5a24 <L_19002+0xc8>
    5a24:	00 2c       	mov	r0, r0
    5a26:	98 b9       	out	0x08, r25	; 8
    5a28:	ed 0e       	add	r14, r29
    5a2a:	00 c0       	rjmp	.+0      	; 0x5a2c <L_19002+0xd0>
    5a2c:	00 c0       	rjmp	.+0      	; 0x5a2e <L_19002+0xd2>
    5a2e:	b8 b8       	out	0x08, r11	; 8
    5a30:	00 c0       	rjmp	.+0      	; 0x5a32 <L_19002+0xd6>
    5a32:	17 ff       	sbrs	r17, 7
    5a34:	98 b9       	out	0x08, r25	; 8
    5a36:	31 81       	ldd	r19, Z+1	; 0x01
    5a38:	00 27       	eor	r16, r16
    5a3a:	88 94       	clc
    5a3c:	00 c0       	rjmp	.+0      	; 0x5a3e <L_19002+0xe2>
    5a3e:	00 c0       	rjmp	.+0      	; 0x5a40 <L_19002+0xe4>
    5a40:	00 2c       	mov	r0, r0
    5a42:	98 b9       	out	0x08, r25	; 8
    5a44:	31 11       	cpse	r19, r1
    5a46:	38 0f       	add	r19, r24
    5a48:	00 c0       	rjmp	.+0      	; 0x5a4a <L_19002+0xee>
    5a4a:	00 2c       	mov	r0, r0
    5a4c:	b8 b8       	out	0x08, r11	; 8
    5a4e:	00 c0       	rjmp	.+0      	; 0x5a50 <L_19002+0xf4>
    5a50:	16 ff       	sbrs	r17, 6
    5a52:	98 b9       	out	0x08, r25	; 8
    5a54:	08 f4       	brcc	.+2      	; 0x5a58 <L_20226>
    5a56:	3f ef       	ldi	r19, 0xFF	; 255

00005a58 <L_20226>:
    5a58:	81 95       	neg	r24
    5a5a:	88 94       	clc
    5a5c:	00 c0       	rjmp	.+0      	; 0x5a5e <L_20226+0x6>
    5a5e:	00 c0       	rjmp	.+0      	; 0x5a60 <L_20226+0x8>
    5a60:	00 2c       	mov	r0, r0
    5a62:	98 b9       	out	0x08, r25	; 8
    5a64:	90 fc       	sbrc	r9, 0
    5a66:	03 0f       	add	r16, r19
    5a68:	00 c0       	rjmp	.+0      	; 0x5a6a <L_20226+0x12>
    5a6a:	00 2c       	mov	r0, r0
    5a6c:	b8 b8       	out	0x08, r11	; 8
    5a6e:	00 c0       	rjmp	.+0      	; 0x5a70 <L_20226+0x18>
    5a70:	15 ff       	sbrs	r17, 5
    5a72:	98 b9       	out	0x08, r25	; 8
    5a74:	07 95       	ror	r16
    5a76:	88 94       	clc
    5a78:	91 fc       	sbrc	r9, 1
    5a7a:	03 0f       	add	r16, r19
    5a7c:	00 c0       	rjmp	.+0      	; 0x5a7e <L_20226+0x26>
    5a7e:	00 c0       	rjmp	.+0      	; 0x5a80 <L_20226+0x28>
    5a80:	00 2c       	mov	r0, r0
    5a82:	98 b9       	out	0x08, r25	; 8
    5a84:	07 95       	ror	r16
    5a86:	88 94       	clc
    5a88:	00 c0       	rjmp	.+0      	; 0x5a8a <L_20226+0x32>
    5a8a:	00 2c       	mov	r0, r0
    5a8c:	b8 b8       	out	0x08, r11	; 8
    5a8e:	00 c0       	rjmp	.+0      	; 0x5a90 <L_20226+0x38>
    5a90:	14 ff       	sbrs	r17, 4
    5a92:	98 b9       	out	0x08, r25	; 8
    5a94:	92 fc       	sbrc	r9, 2
    5a96:	03 0f       	add	r16, r19
    5a98:	07 95       	ror	r16
    5a9a:	88 94       	clc
    5a9c:	00 c0       	rjmp	.+0      	; 0x5a9e <L_20226+0x46>
    5a9e:	00 c0       	rjmp	.+0      	; 0x5aa0 <L_20226+0x48>
    5aa0:	00 2c       	mov	r0, r0
    5aa2:	98 b9       	out	0x08, r25	; 8
    5aa4:	93 fc       	sbrc	r9, 3
    5aa6:	03 0f       	add	r16, r19
    5aa8:	00 c0       	rjmp	.+0      	; 0x5aaa <L_20226+0x52>
    5aaa:	00 2c       	mov	r0, r0
    5aac:	b8 b8       	out	0x08, r11	; 8
    5aae:	00 c0       	rjmp	.+0      	; 0x5ab0 <L_20226+0x58>
    5ab0:	13 ff       	sbrs	r17, 3
    5ab2:	98 b9       	out	0x08, r25	; 8
    5ab4:	07 95       	ror	r16
    5ab6:	88 94       	clc
    5ab8:	94 fc       	sbrc	r9, 4
    5aba:	03 0f       	add	r16, r19
    5abc:	00 c0       	rjmp	.+0      	; 0x5abe <L_20226+0x66>
    5abe:	00 c0       	rjmp	.+0      	; 0x5ac0 <L_20226+0x68>
    5ac0:	00 2c       	mov	r0, r0
    5ac2:	98 b9       	out	0x08, r25	; 8
    5ac4:	07 95       	ror	r16
    5ac6:	88 94       	clc
    5ac8:	00 c0       	rjmp	.+0      	; 0x5aca <L_20226+0x72>
    5aca:	00 2c       	mov	r0, r0
    5acc:	b8 b8       	out	0x08, r11	; 8
    5ace:	00 c0       	rjmp	.+0      	; 0x5ad0 <L_20226+0x78>
    5ad0:	12 ff       	sbrs	r17, 2
    5ad2:	98 b9       	out	0x08, r25	; 8
    5ad4:	95 fc       	sbrc	r9, 5
    5ad6:	03 0f       	add	r16, r19
    5ad8:	07 95       	ror	r16
    5ada:	88 94       	clc
    5adc:	00 c0       	rjmp	.+0      	; 0x5ade <L_20226+0x86>
    5ade:	00 c0       	rjmp	.+0      	; 0x5ae0 <L_20226+0x88>
    5ae0:	00 2c       	mov	r0, r0
    5ae2:	98 b9       	out	0x08, r25	; 8
    5ae4:	96 fc       	sbrc	r9, 6
    5ae6:	03 0f       	add	r16, r19
    5ae8:	00 c0       	rjmp	.+0      	; 0x5aea <L_20226+0x92>
    5aea:	00 2c       	mov	r0, r0
    5aec:	b8 b8       	out	0x08, r11	; 8
    5aee:	00 c0       	rjmp	.+0      	; 0x5af0 <L_20226+0x98>
    5af0:	11 ff       	sbrs	r17, 1
    5af2:	98 b9       	out	0x08, r25	; 8
    5af4:	07 95       	ror	r16
    5af6:	88 94       	clc
    5af8:	97 fc       	sbrc	r9, 7
    5afa:	03 0f       	add	r16, r19
    5afc:	00 c0       	rjmp	.+0      	; 0x5afe <L_20226+0xa6>
    5afe:	00 c0       	rjmp	.+0      	; 0x5b00 <L_20226+0xa8>
    5b00:	00 2c       	mov	r0, r0
    5b02:	98 b9       	out	0x08, r25	; 8
    5b04:	07 95       	ror	r16
    5b06:	88 94       	clc
    5b08:	00 c0       	rjmp	.+0      	; 0x5b0a <L_20226+0xb2>
    5b0a:	00 2c       	mov	r0, r0
    5b0c:	b8 b8       	out	0x08, r11	; 8
    5b0e:	00 c0       	rjmp	.+0      	; 0x5b10 <L_20226+0xb8>
    5b10:	10 ff       	sbrs	r17, 0
    5b12:	98 b9       	out	0x08, r25	; 8
    5b14:	13 2f       	mov	r17, r19
    5b16:	91 10       	cpse	r9, r1
    5b18:	10 2f       	mov	r17, r16
    5b1a:	86 0f       	add	r24, r22
    5b1c:	00 c0       	rjmp	.+0      	; 0x5b1e <L_20226+0xc6>
    5b1e:	00 c0       	rjmp	.+0      	; 0x5b20 <L_20226+0xc8>
    5b20:	00 2c       	mov	r0, r0
    5b22:	98 b9       	out	0x08, r25	; 8
    5b24:	11 97       	sbiw	r26, 0x01	; 1
    5b26:	09 f0       	breq	.+2      	; 0x5b2a <L_21206>
    5b28:	86 ce       	rjmp	.-756    	; 0x5836 <L_17251+0x50>

00005b2a <L_21206>:
    5b2a:	df 91       	pop	r29
    5b2c:	cf 91       	pop	r28
    5b2e:	1f 91       	pop	r17
    5b30:	0f 91       	pop	r16
    5b32:	ff 90       	pop	r15
    5b34:	ef 90       	pop	r14
    5b36:	df 90       	pop	r13
    5b38:	cf 90       	pop	r12
    5b3a:	bf 90       	pop	r11
    5b3c:	af 90       	pop	r10
    5b3e:	9f 90       	pop	r9
    5b40:	08 95       	ret

00005b42 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    5b42:	0f 93       	push	r16
    5b44:	1f 93       	push	r17
    5b46:	cf 93       	push	r28
    5b48:	df 93       	push	r29
    5b4a:	ec 01       	movw	r28, r24
    5b4c:	8b 01       	movw	r16, r22
    5b4e:	0e 94 b8 42 	call	0x8570	; 0x8570 <_micros>
    5b52:	2f 85       	ldd	r18, Y+15	; 0x0f
    5b54:	38 89       	ldd	r19, Y+16	; 0x10
    5b56:	62 1b       	sub	r22, r18
    5b58:	73 0b       	sbc	r23, r19
    5b5a:	6a 30       	cpi	r22, 0x0A	; 10
    5b5c:	71 05       	cpc	r23, r1
    5b5e:	b8 f3       	brcs	.-18     	; 0x5b4e <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    5b60:	f8 94       	cli
    5b62:	c8 01       	movw	r24, r16
    5b64:	09 de       	rcall	.-1006   	; 0x5778 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    5b66:	f8 01       	movw	r30, r16
    5b68:	42 81       	ldd	r20, Z+2	; 0x02
    5b6a:	53 81       	ldd	r21, Z+3	; 0x03
    5b6c:	20 ee       	ldi	r18, 0xE0	; 224
    5b6e:	31 e0       	ldi	r19, 0x01	; 1
    5b70:	da 01       	movw	r26, r20
    5b72:	0e 94 3a 4c 	call	0x9874	; 0x9874 <__usmulhisi3>
    5b76:	dc 01       	movw	r26, r24
    5b78:	cb 01       	movw	r24, r22
    5b7a:	f4 e0       	ldi	r31, 0x04	; 4
    5b7c:	b6 95       	lsr	r27
    5b7e:	a7 95       	ror	r26
    5b80:	97 95       	ror	r25
    5b82:	87 95       	ror	r24
    5b84:	fa 95       	dec	r31
    5b86:	d1 f7       	brne	.-12     	; 0x5b7c <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    5b88:	30 e0       	ldi	r19, 0x00	; 0
    5b8a:	20 e0       	ldi	r18, 0x00	; 0
    5b8c:	b9 01       	movw	r22, r18
    5b8e:	ea e9       	ldi	r30, 0x9A	; 154
    5b90:	4e 9f       	mul	r20, r30
    5b92:	04 0e       	add	r0, r20
    5b94:	61 1d       	adc	r22, r1
    5b96:	5e 9f       	mul	r21, r30
    5b98:	60 0d       	add	r22, r0
    5b9a:	71 1d       	adc	r23, r1
    5b9c:	11 24       	eor	r1, r1
    5b9e:	65 0f       	add	r22, r21
    5ba0:	71 1d       	adc	r23, r1
    5ba2:	86 0f       	add	r24, r22
    5ba4:	97 1f       	adc	r25, r23
    5ba6:	a1 1d       	adc	r26, r1
    5ba8:	b1 1d       	adc	r27, r1
    5baa:	89 3e       	cpi	r24, 0xE9	; 233
    5bac:	f3 e0       	ldi	r31, 0x03	; 3
    5bae:	9f 07       	cpc	r25, r31
    5bb0:	a1 05       	cpc	r26, r1
    5bb2:	b1 05       	cpc	r27, r1
    5bb4:	08 f4       	brcc	.+2      	; 0x5bb8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    5bb6:	34 c0       	rjmp	.+104    	; 0x5c20 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    5bb8:	88 5e       	subi	r24, 0xE8	; 232
    5bba:	93 40       	sbci	r25, 0x03	; 3
    5bbc:	a1 09       	sbc	r26, r1
    5bbe:	b1 09       	sbc	r27, r1
    5bc0:	42 e0       	ldi	r20, 0x02	; 2
    5bc2:	b6 95       	lsr	r27
    5bc4:	a7 95       	ror	r26
    5bc6:	97 95       	ror	r25
    5bc8:	87 95       	ror	r24
    5bca:	4a 95       	dec	r20
    5bcc:	d1 f7       	brne	.-12     	; 0x5bc2 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    5bce:	47 e0       	ldi	r20, 0x07	; 7
    5bd0:	84 9f       	mul	r24, r20
    5bd2:	08 0e       	add	r0, r24
    5bd4:	21 1d       	adc	r18, r1
    5bd6:	94 9f       	mul	r25, r20
    5bd8:	20 0d       	add	r18, r0
    5bda:	31 1d       	adc	r19, r1
    5bdc:	11 24       	eor	r1, r1
    5bde:	29 0f       	add	r18, r25
    5be0:	31 1d       	adc	r19, r1
    5be2:	60 91 2e 10 	lds	r22, 0x102E	; 0x80102e <gTimeErrorAccum256ths>
    5be6:	70 e0       	ldi	r23, 0x00	; 0
    5be8:	86 0f       	add	r24, r22
    5bea:	97 1f       	adc	r25, r23
    5bec:	82 0f       	add	r24, r18
    5bee:	93 1f       	adc	r25, r19
    5bf0:	40 91 4d 10 	lds	r20, 0x104D	; 0x80104d <timer0_millis_count>
    5bf4:	50 91 4e 10 	lds	r21, 0x104E	; 0x80104e <timer0_millis_count+0x1>
    5bf8:	60 91 4f 10 	lds	r22, 0x104F	; 0x80104f <timer0_millis_count+0x2>
    5bfc:	70 91 50 10 	lds	r23, 0x1050	; 0x801050 <timer0_millis_count+0x3>
    5c00:	29 2f       	mov	r18, r25
    5c02:	33 27       	eor	r19, r19
    5c04:	42 0f       	add	r20, r18
    5c06:	53 1f       	adc	r21, r19
    5c08:	61 1d       	adc	r22, r1
    5c0a:	71 1d       	adc	r23, r1
    5c0c:	40 93 4d 10 	sts	0x104D, r20	; 0x80104d <timer0_millis_count>
    5c10:	50 93 4e 10 	sts	0x104E, r21	; 0x80104e <timer0_millis_count+0x1>
    5c14:	60 93 4f 10 	sts	0x104F, r22	; 0x80104f <timer0_millis_count+0x2>
    5c18:	70 93 50 10 	sts	0x1050, r23	; 0x801050 <timer0_millis_count+0x3>
    5c1c:	80 93 2e 10 	sts	0x102E, r24	; 0x80102e <gTimeErrorAccum256ths>
    5c20:	78 94       	sei
    5c22:	0e 94 b8 42 	call	0x8570	; 0x8570 <_micros>
    5c26:	78 8b       	std	Y+16, r23	; 0x10
    5c28:	6f 87       	std	Y+15, r22	; 0x0f
    5c2a:	df 91       	pop	r29
    5c2c:	cf 91       	pop	r28
    5c2e:	1f 91       	pop	r17
    5c30:	0f 91       	pop	r16
    5c32:	08 95       	ret

00005c34 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    5c34:	0f 93       	push	r16
    5c36:	1f 93       	push	r17
    5c38:	cf 93       	push	r28
    5c3a:	df 93       	push	r29
    5c3c:	20 91 54 09 	lds	r18, 0x0954	; 0x800954 <__data_end>
    5c40:	2f 5f       	subi	r18, 0xFF	; 255
    5c42:	32 2f       	mov	r19, r18
    5c44:	37 70       	andi	r19, 0x07	; 7
    5c46:	30 93 54 09 	sts	0x0954, r19	; 0x800954 <__data_end>
    5c4a:	20 ff       	sbrs	r18, 0
    5c4c:	2b c0       	rjmp	.+86     	; 0x5ca4 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    5c4e:	20 e8       	ldi	r18, 0x80	; 128
    5c50:	31 fd       	sbrc	r19, 1
    5c52:	20 64       	ori	r18, 0x40	; 64
    5c54:	34 70       	andi	r19, 0x04	; 4
    5c56:	09 f0       	breq	.+2      	; 0x5c5a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    5c58:	20 62       	ori	r18, 0x20	; 32
    5c5a:	20 5f       	subi	r18, 0xF0	; 240
    5c5c:	fc 01       	movw	r30, r24
    5c5e:	ec 01       	movw	r28, r24
    5c60:	23 96       	adiw	r28, 0x03	; 3
    5c62:	00 e0       	ldi	r16, 0x00	; 0
    5c64:	11 e0       	ldi	r17, 0x01	; 1
    5c66:	64 85       	ldd	r22, Z+12	; 0x0c
    5c68:	66 23       	and	r22, r22
    5c6a:	29 f0       	breq	.+10     	; 0x5c76 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    5c6c:	70 e0       	ldi	r23, 0x00	; 0
    5c6e:	c8 01       	movw	r24, r16
    5c70:	0e 94 d1 4b 	call	0x97a2	; 0x97a2 <__divmodhi4>
    5c74:	6f 5f       	subi	r22, 0xFF	; 255
    5c76:	61 87       	std	Z+9, r22	; 0x09
    5c78:	32 2f       	mov	r19, r18
    5c7a:	36 9f       	mul	r19, r22
    5c7c:	03 0e       	add	r0, r19
    5c7e:	30 e0       	ldi	r19, 0x00	; 0
    5c80:	31 1d       	adc	r19, r1
    5c82:	11 24       	eor	r1, r1
    5c84:	31 11       	cpse	r19, r1
    5c86:	10 c0       	rjmp	.+32     	; 0x5ca8 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    5c88:	16 82       	std	Z+6, r1	; 0x06
    5c8a:	66 23       	and	r22, r22
    5c8c:	11 f0       	breq	.+4      	; 0x5c92 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    5c8e:	61 50       	subi	r22, 0x01	; 1
    5c90:	61 87       	std	Z+9, r22	; 0x09
    5c92:	31 96       	adiw	r30, 0x01	; 1
    5c94:	ec 17       	cp	r30, r28
    5c96:	fd 07       	cpc	r31, r29
    5c98:	31 f7       	brne	.-52     	; 0x5c66 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    5c9a:	df 91       	pop	r29
    5c9c:	cf 91       	pop	r28
    5c9e:	1f 91       	pop	r17
    5ca0:	0f 91       	pop	r16
    5ca2:	08 95       	ret
    5ca4:	20 e0       	ldi	r18, 0x00	; 0
    5ca6:	d4 cf       	rjmp	.-88     	; 0x5c50 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    5ca8:	31 50       	subi	r19, 0x01	; 1
    5caa:	36 83       	std	Z+6, r19	; 0x06
    5cac:	ee cf       	rjmp	.-36     	; 0x5c8a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

00005cae <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    5cae:	0f 93       	push	r16
    5cb0:	1f 93       	push	r17
    5cb2:	cf 93       	push	r28
    5cb4:	df 93       	push	r29
    5cb6:	cd b7       	in	r28, 0x3d	; 61
    5cb8:	de b7       	in	r29, 0x3e	; 62
    5cba:	62 97       	sbiw	r28, 0x12	; 18
    5cbc:	0f b6       	in	r0, 0x3f	; 63
    5cbe:	f8 94       	cli
    5cc0:	de bf       	out	0x3e, r29	; 62
    5cc2:	0f be       	out	0x3f, r0	; 63
    5cc4:	cd bf       	out	0x3d, r28	; 61
    5cc6:	8c 01       	movw	r16, r24
    5cc8:	f9 01       	movw	r30, r18
    5cca:	dc 01       	movw	r26, r24
    5ccc:	1c 96       	adiw	r26, 0x0c	; 12
    5cce:	8c 91       	ld	r24, X
    5cd0:	7a 83       	std	Y+2, r23	; 0x02
    5cd2:	69 83       	std	Y+1, r22	; 0x01
    5cd4:	5c 83       	std	Y+4, r21	; 0x04
    5cd6:	4b 83       	std	Y+3, r20	; 0x03
    5cd8:	5e 83       	std	Y+6, r21	; 0x06
    5cda:	4d 83       	std	Y+5, r20	; 0x05
    5cdc:	90 81       	ld	r25, Z
    5cde:	9d 87       	std	Y+13, r25	; 0x0d
    5ce0:	91 81       	ldd	r25, Z+1	; 0x01
    5ce2:	9e 87       	std	Y+14, r25	; 0x0e
    5ce4:	92 81       	ldd	r25, Z+2	; 0x02
    5ce6:	9f 87       	std	Y+15, r25	; 0x0f
    5ce8:	81 30       	cpi	r24, 0x01	; 1
    5cea:	e9 f4       	brne	.+58     	; 0x5d26 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    5cec:	ce 01       	movw	r24, r28
    5cee:	01 96       	adiw	r24, 0x01	; 1
    5cf0:	a1 df       	rcall	.-190    	; 0x5c34 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    5cf2:	83 e0       	ldi	r24, 0x03	; 3
    5cf4:	88 8b       	std	Y+16, r24	; 0x10
    5cf6:	1a 8a       	std	Y+18, r1	; 0x12
    5cf8:	19 8a       	std	Y+17, r1	; 0x11
    5cfa:	d8 01       	movw	r26, r16
    5cfc:	ed 91       	ld	r30, X+
    5cfe:	fc 91       	ld	r31, X
    5d00:	04 84       	ldd	r0, Z+12	; 0x0c
    5d02:	f5 85       	ldd	r31, Z+13	; 0x0d
    5d04:	e0 2d       	mov	r30, r0
    5d06:	be 01       	movw	r22, r28
    5d08:	6f 5f       	subi	r22, 0xFF	; 255
    5d0a:	7f 4f       	sbci	r23, 0xFF	; 255
    5d0c:	c8 01       	movw	r24, r16
    5d0e:	09 95       	icall
    5d10:	62 96       	adiw	r28, 0x12	; 18
    5d12:	0f b6       	in	r0, 0x3f	; 63
    5d14:	f8 94       	cli
    5d16:	de bf       	out	0x3e, r29	; 62
    5d18:	0f be       	out	0x3f, r0	; 63
    5d1a:	cd bf       	out	0x3d, r28	; 61
    5d1c:	df 91       	pop	r29
    5d1e:	cf 91       	pop	r28
    5d20:	1f 91       	pop	r17
    5d22:	0f 91       	pop	r16
    5d24:	08 95       	ret
    5d26:	1c 86       	std	Y+12, r1	; 0x0c
    5d28:	1b 86       	std	Y+11, r1	; 0x0b
    5d2a:	1a 86       	std	Y+10, r1	; 0x0a
    5d2c:	19 86       	std	Y+9, r1	; 0x09
    5d2e:	18 86       	std	Y+8, r1	; 0x08
    5d30:	1f 82       	std	Y+7, r1	; 0x07
    5d32:	df cf       	rjmp	.-66     	; 0x5cf2 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

00005d34 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    5d34:	0f 93       	push	r16
    5d36:	1f 93       	push	r17
    5d38:	cf 93       	push	r28
    5d3a:	df 93       	push	r29
    5d3c:	cd b7       	in	r28, 0x3d	; 61
    5d3e:	de b7       	in	r29, 0x3e	; 62
    5d40:	62 97       	sbiw	r28, 0x12	; 18
    5d42:	0f b6       	in	r0, 0x3f	; 63
    5d44:	f8 94       	cli
    5d46:	de bf       	out	0x3e, r29	; 62
    5d48:	0f be       	out	0x3f, r0	; 63
    5d4a:	cd bf       	out	0x3d, r28	; 61
    5d4c:	8c 01       	movw	r16, r24
    5d4e:	f9 01       	movw	r30, r18
    5d50:	dc 01       	movw	r26, r24
    5d52:	1c 96       	adiw	r26, 0x0c	; 12
    5d54:	8c 91       	ld	r24, X
    5d56:	7a 83       	std	Y+2, r23	; 0x02
    5d58:	69 83       	std	Y+1, r22	; 0x01
    5d5a:	5c 83       	std	Y+4, r21	; 0x04
    5d5c:	4b 83       	std	Y+3, r20	; 0x03
    5d5e:	5e 83       	std	Y+6, r21	; 0x06
    5d60:	4d 83       	std	Y+5, r20	; 0x05
    5d62:	90 81       	ld	r25, Z
    5d64:	9d 87       	std	Y+13, r25	; 0x0d
    5d66:	91 81       	ldd	r25, Z+1	; 0x01
    5d68:	9e 87       	std	Y+14, r25	; 0x0e
    5d6a:	92 81       	ldd	r25, Z+2	; 0x02
    5d6c:	9f 87       	std	Y+15, r25	; 0x0f
    5d6e:	81 30       	cpi	r24, 0x01	; 1
    5d70:	e1 f4       	brne	.+56     	; 0x5daa <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    5d72:	ce 01       	movw	r24, r28
    5d74:	01 96       	adiw	r24, 0x01	; 1
    5d76:	5e df       	rcall	.-324    	; 0x5c34 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    5d78:	18 8a       	std	Y+16, r1	; 0x10
    5d7a:	1a 8a       	std	Y+18, r1	; 0x12
    5d7c:	19 8a       	std	Y+17, r1	; 0x11
    5d7e:	d8 01       	movw	r26, r16
    5d80:	ed 91       	ld	r30, X+
    5d82:	fc 91       	ld	r31, X
    5d84:	04 84       	ldd	r0, Z+12	; 0x0c
    5d86:	f5 85       	ldd	r31, Z+13	; 0x0d
    5d88:	e0 2d       	mov	r30, r0
    5d8a:	be 01       	movw	r22, r28
    5d8c:	6f 5f       	subi	r22, 0xFF	; 255
    5d8e:	7f 4f       	sbci	r23, 0xFF	; 255
    5d90:	c8 01       	movw	r24, r16
    5d92:	09 95       	icall
    5d94:	62 96       	adiw	r28, 0x12	; 18
    5d96:	0f b6       	in	r0, 0x3f	; 63
    5d98:	f8 94       	cli
    5d9a:	de bf       	out	0x3e, r29	; 62
    5d9c:	0f be       	out	0x3f, r0	; 63
    5d9e:	cd bf       	out	0x3d, r28	; 61
    5da0:	df 91       	pop	r29
    5da2:	cf 91       	pop	r28
    5da4:	1f 91       	pop	r17
    5da6:	0f 91       	pop	r16
    5da8:	08 95       	ret
    5daa:	1c 86       	std	Y+12, r1	; 0x0c
    5dac:	1b 86       	std	Y+11, r1	; 0x0b
    5dae:	1a 86       	std	Y+10, r1	; 0x0a
    5db0:	19 86       	std	Y+9, r1	; 0x09
    5db2:	18 86       	std	Y+8, r1	; 0x08
    5db4:	1f 82       	std	Y+7, r1	; 0x07
    5db6:	e0 cf       	rjmp	.-64     	; 0x5d78 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

00005db8 <_GLOBAL__sub_I_matrix>:
    5db8:	0f b6       	in	r0, 0x3f	; 63
    5dba:	f8 94       	cli
    5dbc:	80 91 4d 10 	lds	r24, 0x104D	; 0x80104d <timer0_millis_count>
    5dc0:	90 91 4e 10 	lds	r25, 0x104E	; 0x80104e <timer0_millis_count+0x1>
    5dc4:	a0 91 4f 10 	lds	r26, 0x104F	; 0x80104f <timer0_millis_count+0x2>
    5dc8:	b0 91 50 10 	lds	r27, 0x1050	; 0x801050 <timer0_millis_count+0x3>
    5dcc:	0f be       	out	0x3f, r0	; 63
    5dce:	90 93 24 0a 	sts	0x0A24, r25	; 0x800a24 <lastLEDchange+0x1>
    5dd2:	80 93 23 0a 	sts	0x0A23, r24	; 0x800a23 <lastLEDchange>
    5dd6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5dda:	80 93 e7 09 	sts	0x09E7, r24	; 0x8009e7 <r>
    5dde:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5de2:	80 93 e6 09 	sts	0x09E6, r24	; 0x8009e6 <g>
    5de6:	0e 94 d7 05 	call	0xbae	; 0xbae <getRandomColorValue()>
    5dea:	80 93 e5 09 	sts	0x09E5, r24	; 0x8009e5 <b>
    5dee:	6b e3       	ldi	r22, 0x3B	; 59
    5df0:	75 e0       	ldi	r23, 0x05	; 5
    5df2:	88 e9       	ldi	r24, 0x98	; 152
    5df4:	99 e0       	ldi	r25, 0x09	; 9
    5df6:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5dfa:	66 e3       	ldi	r22, 0x36	; 54
    5dfc:	75 e0       	ldi	r23, 0x05	; 5
    5dfe:	8f e9       	ldi	r24, 0x9F	; 159
    5e00:	99 e0       	ldi	r25, 0x09	; 9
    5e02:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e06:	64 e3       	ldi	r22, 0x34	; 52
    5e08:	75 e0       	ldi	r23, 0x05	; 5
    5e0a:	86 ea       	ldi	r24, 0xA6	; 166
    5e0c:	99 e0       	ldi	r25, 0x09	; 9
    5e0e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e12:	61 e3       	ldi	r22, 0x31	; 49
    5e14:	75 e0       	ldi	r23, 0x05	; 5
    5e16:	8d ea       	ldi	r24, 0xAD	; 173
    5e18:	99 e0       	ldi	r25, 0x09	; 9
    5e1a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e1e:	6c e2       	ldi	r22, 0x2C	; 44
    5e20:	75 e0       	ldi	r23, 0x05	; 5
    5e22:	84 eb       	ldi	r24, 0xB4	; 180
    5e24:	99 e0       	ldi	r25, 0x09	; 9
    5e26:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e2a:	68 e2       	ldi	r22, 0x28	; 40
    5e2c:	75 e0       	ldi	r23, 0x05	; 5
    5e2e:	8b eb       	ldi	r24, 0xBB	; 187
    5e30:	99 e0       	ldi	r25, 0x09	; 9
    5e32:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e36:	62 e2       	ldi	r22, 0x22	; 34
    5e38:	75 e0       	ldi	r23, 0x05	; 5
    5e3a:	82 ec       	ldi	r24, 0xC2	; 194
    5e3c:	99 e0       	ldi	r25, 0x09	; 9
    5e3e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e42:	6f e1       	ldi	r22, 0x1F	; 31
    5e44:	75 e0       	ldi	r23, 0x05	; 5
    5e46:	89 ec       	ldi	r24, 0xC9	; 201
    5e48:	99 e0       	ldi	r25, 0x09	; 9
    5e4a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e4e:	6a e1       	ldi	r22, 0x1A	; 26
    5e50:	75 e0       	ldi	r23, 0x05	; 5
    5e52:	80 ed       	ldi	r24, 0xD0	; 208
    5e54:	99 e0       	ldi	r25, 0x09	; 9
    5e56:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e5a:	65 e1       	ldi	r22, 0x15	; 21
    5e5c:	75 e0       	ldi	r23, 0x05	; 5
    5e5e:	87 ed       	ldi	r24, 0xD7	; 215
    5e60:	99 e0       	ldi	r25, 0x09	; 9
    5e62:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e66:	60 e1       	ldi	r22, 0x10	; 16
    5e68:	75 e0       	ldi	r23, 0x05	; 5
    5e6a:	8e e6       	ldi	r24, 0x6E	; 110
    5e6c:	99 e0       	ldi	r25, 0x09	; 9
    5e6e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e72:	69 e0       	ldi	r22, 0x09	; 9
    5e74:	75 e0       	ldi	r23, 0x05	; 5
    5e76:	85 e7       	ldi	r24, 0x75	; 117
    5e78:	99 e0       	ldi	r25, 0x09	; 9
    5e7a:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e7e:	60 e0       	ldi	r22, 0x00	; 0
    5e80:	75 e0       	ldi	r23, 0x05	; 5
    5e82:	8c e7       	ldi	r24, 0x7C	; 124
    5e84:	99 e0       	ldi	r25, 0x09	; 9
    5e86:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e8a:	6c ef       	ldi	r22, 0xFC	; 252
    5e8c:	74 e0       	ldi	r23, 0x04	; 4
    5e8e:	83 e8       	ldi	r24, 0x83	; 131
    5e90:	99 e0       	ldi	r25, 0x09	; 9
    5e92:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5e96:	68 ef       	ldi	r22, 0xF8	; 248
    5e98:	74 e0       	ldi	r23, 0x04	; 4
    5e9a:	8a e8       	ldi	r24, 0x8A	; 138
    5e9c:	99 e0       	ldi	r25, 0x09	; 9
    5e9e:	0e 94 ea 49 	call	0x93d4	; 0x93d4 <String::String(char const*)>
    5ea2:	61 ef       	ldi	r22, 0xF1	; 241
    5ea4:	74 e0       	ldi	r23, 0x04	; 4
    5ea6:	81 e9       	ldi	r24, 0x91	; 145
    5ea8:	99 e0       	ldi	r25, 0x09	; 9
    5eaa:	0c 94 ea 49 	jmp	0x93d4	; 0x93d4 <String::String(char const*)>

00005eae <_GLOBAL__sub_D_matrix>:
    5eae:	cf 93       	push	r28
    5eb0:	df 93       	push	r29
    5eb2:	c8 e9       	ldi	r28, 0x98	; 152
    5eb4:	d9 e0       	ldi	r29, 0x09	; 9
    5eb6:	27 97       	sbiw	r28, 0x07	; 7
    5eb8:	ce 01       	movw	r24, r28
    5eba:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    5ebe:	89 e0       	ldi	r24, 0x09	; 9
    5ec0:	ce 36       	cpi	r28, 0x6E	; 110
    5ec2:	d8 07       	cpc	r29, r24
    5ec4:	c1 f7       	brne	.-16     	; 0x5eb6 <_GLOBAL__sub_D_matrix+0x8>
    5ec6:	ce ed       	ldi	r28, 0xDE	; 222
    5ec8:	d9 e0       	ldi	r29, 0x09	; 9
    5eca:	27 97       	sbiw	r28, 0x07	; 7
    5ecc:	ce 01       	movw	r24, r28
    5ece:	0e 94 81 49 	call	0x9302	; 0x9302 <String::~String()>
    5ed2:	89 e0       	ldi	r24, 0x09	; 9
    5ed4:	c8 39       	cpi	r28, 0x98	; 152
    5ed6:	d8 07       	cpc	r29, r24
    5ed8:	c1 f7       	brne	.-16     	; 0x5eca <_GLOBAL__sub_D_matrix+0x1c>
    5eda:	df 91       	pop	r29
    5edc:	cf 91       	pop	r28
    5ede:	08 95       	ret

00005ee0 <checkIncomingMIDI()>:
    5ee0:	88 e5       	ldi	r24, 0x58	; 88
    5ee2:	90 e1       	ldi	r25, 0x10	; 16
    5ee4:	0e 94 e5 44 	call	0x89ca	; 0x89ca <HardwareSerial::available()>
    5ee8:	89 2b       	or	r24, r25
    5eea:	81 f0       	breq	.+32     	; 0x5f0c <checkIncomingMIDI()+0x2c>
    5eec:	88 e5       	ldi	r24, 0x58	; 88
    5eee:	90 e1       	ldi	r25, 0x10	; 16
    5ef0:	0e 94 18 45 	call	0x8a30	; 0x8a30 <HardwareSerial::read()>
    5ef4:	80 93 38 0a 	sts	0x0A38, r24	; 0x800a38 <incomingMidiByte>
    5ef8:	8f 3f       	cpi	r24, 0xFF	; 255
    5efa:	41 f0       	breq	.+16     	; 0x5f0c <checkIncomingMIDI()+0x2c>
    5efc:	87 ff       	sbrs	r24, 7
    5efe:	0d c0       	rjmp	.+26     	; 0x5f1a <checkIncomingMIDI()+0x3a>
    5f00:	80 93 37 0a 	sts	0x0A37, r24	; 0x800a37 <midiStatusByte>
    5f04:	10 92 36 0a 	sts	0x0A36, r1	; 0x800a36 <midiDataByte1>
    5f08:	10 92 35 0a 	sts	0x0A35, r1	; 0x800a35 <midiDataByte2>
    5f0c:	88 e5       	ldi	r24, 0x58	; 88
    5f0e:	90 e1       	ldi	r25, 0x10	; 16
    5f10:	0e 94 e5 44 	call	0x89ca	; 0x89ca <HardwareSerial::available()>
    5f14:	89 2b       	or	r24, r25
    5f16:	21 f7       	brne	.-56     	; 0x5ee0 <checkIncomingMIDI()>
    5f18:	08 95       	ret
    5f1a:	90 91 36 0a 	lds	r25, 0x0A36	; 0x800a36 <midiDataByte1>
    5f1e:	91 11       	cpse	r25, r1
    5f20:	11 c0       	rjmp	.+34     	; 0x5f44 <checkIncomingMIDI()+0x64>
    5f22:	80 93 36 0a 	sts	0x0A36, r24	; 0x800a36 <midiDataByte1>
    5f26:	80 91 37 0a 	lds	r24, 0x0A37	; 0x800a37 <midiStatusByte>
    5f2a:	89 3b       	cpi	r24, 0xB9	; 185
    5f2c:	79 f7       	brne	.-34     	; 0x5f0c <checkIncomingMIDI()+0x2c>
    5f2e:	80 91 36 0a 	lds	r24, 0x0A36	; 0x800a36 <midiDataByte1>
    5f32:	86 31       	cpi	r24, 0x16	; 22
    5f34:	71 f4       	brne	.+28     	; 0x5f52 <checkIncomingMIDI()+0x72>
    5f36:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <midiDataByte2>
    5f3a:	88 23       	and	r24, r24
    5f3c:	39 f3       	breq	.-50     	; 0x5f0c <checkIncomingMIDI()+0x2c>
    5f3e:	0e 94 65 1b 	call	0x36ca	; 0x36ca <switchToSong(unsigned char)>
    5f42:	e4 cf       	rjmp	.-56     	; 0x5f0c <checkIncomingMIDI()+0x2c>
    5f44:	90 91 35 0a 	lds	r25, 0x0A35	; 0x800a35 <midiDataByte2>
    5f48:	91 11       	cpse	r25, r1
    5f4a:	ed cf       	rjmp	.-38     	; 0x5f26 <checkIncomingMIDI()+0x46>
    5f4c:	80 93 35 0a 	sts	0x0A35, r24	; 0x800a35 <midiDataByte2>
    5f50:	ea cf       	rjmp	.-44     	; 0x5f26 <checkIncomingMIDI()+0x46>
    5f52:	87 31       	cpi	r24, 0x17	; 23
    5f54:	d9 f6       	brne	.-74     	; 0x5f0c <checkIncomingMIDI()+0x2c>
    5f56:	80 91 35 0a 	lds	r24, 0x0A35	; 0x800a35 <midiDataByte2>
    5f5a:	0e 94 d4 1a 	call	0x35a8	; 0x35a8 <switchToPart(unsigned char)>
    5f5e:	d6 cf       	rjmp	.-84     	; 0x5f0c <checkIncomingMIDI()+0x2c>

00005f60 <loop>:
    5f60:	8f 92       	push	r8
    5f62:	9f 92       	push	r9
    5f64:	af 92       	push	r10
    5f66:	bf 92       	push	r11
    5f68:	cf 92       	push	r12
    5f6a:	df 92       	push	r13
    5f6c:	ef 92       	push	r14
    5f6e:	ff 92       	push	r15
    5f70:	0f 93       	push	r16
    5f72:	1f 93       	push	r17
    5f74:	cf 93       	push	r28
    5f76:	80 91 25 0a 	lds	r24, 0x0A25	; 0x800a25 <ISR_USART_got_a_byte>
    5f7a:	88 23       	and	r24, r24
    5f7c:	41 f0       	breq	.+16     	; 0x5f8e <loop+0x2e>
    5f7e:	60 91 26 0a 	lds	r22, 0x0A26	; 0x800a26 <ISR_received_USART_byte>
    5f82:	8d ec       	ldi	r24, 0xCD	; 205
    5f84:	90 e1       	ldi	r25, 0x10	; 16
    5f86:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::println(unsigned char)>
    5f8a:	10 92 25 0a 	sts	0x0A25, r1	; 0x800a25 <ISR_USART_got_a_byte>
    5f8e:	80 91 27 0a 	lds	r24, 0x0A27	; 0x800a27 <OneSecondHasPast>
    5f92:	88 23       	and	r24, r24
    5f94:	39 f0       	breq	.+14     	; 0x5fa4 <loop+0x44>
    5f96:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <secondsForVoltage>
    5f9a:	8f 5f       	subi	r24, 0xFF	; 255
    5f9c:	80 93 32 0a 	sts	0x0A32, r24	; 0x800a32 <secondsForVoltage>
    5fa0:	10 92 27 0a 	sts	0x0A27, r1	; 0x800a27 <OneSecondHasPast>
    5fa4:	80 91 32 0a 	lds	r24, 0x0A32	; 0x800a32 <secondsForVoltage>
    5fa8:	88 23       	and	r24, r24
    5faa:	09 f4       	brne	.+2      	; 0x5fae <loop+0x4e>
    5fac:	46 c0       	rjmp	.+140    	; 0x603a <loop+0xda>
    5fae:	c0 91 34 0a 	lds	r28, 0x0A34	; 0x800a34 <voltageSmooth>
    5fb2:	10 92 32 0a 	sts	0x0A32, r1	; 0x800a32 <secondsForVoltage>
    5fb6:	88 e2       	ldi	r24, 0x28	; 40
    5fb8:	0e 94 00 41 	call	0x8200	; 0x8200 <analogRead>
    5fbc:	bc 01       	movw	r22, r24
    5fbe:	99 0f       	add	r25, r25
    5fc0:	88 0b       	sbc	r24, r24
    5fc2:	99 0b       	sbc	r25, r25
    5fc4:	1f 92       	push	r1
    5fc6:	1f 92       	push	r1
    5fc8:	1f 92       	push	r1
    5fca:	28 e7       	ldi	r18, 0x78	; 120
    5fcc:	2f 93       	push	r18
    5fce:	a1 2c       	mov	r10, r1
    5fd0:	b1 2c       	mov	r11, r1
    5fd2:	65 01       	movw	r12, r10
    5fd4:	ee 24       	eor	r14, r14
    5fd6:	ea 94       	dec	r14
    5fd8:	13 e0       	ldi	r17, 0x03	; 3
    5fda:	f1 2e       	mov	r15, r17
    5fdc:	00 e0       	ldi	r16, 0x00	; 0
    5fde:	10 e0       	ldi	r17, 0x00	; 0
    5fe0:	20 e0       	ldi	r18, 0x00	; 0
    5fe2:	30 e0       	ldi	r19, 0x00	; 0
    5fe4:	a9 01       	movw	r20, r18
    5fe6:	0e 94 42 49 	call	0x9284	; 0x9284 <map(long, long, long, long, long)>
    5fea:	4b 01       	movw	r8, r22
    5fec:	5c 01       	movw	r10, r24
    5fee:	6c 2f       	mov	r22, r28
    5ff0:	70 e0       	ldi	r23, 0x00	; 0
    5ff2:	90 e0       	ldi	r25, 0x00	; 0
    5ff4:	80 e0       	ldi	r24, 0x00	; 0
    5ff6:	0e 94 bf 4a 	call	0x957e	; 0x957e <__floatsisf>
    5ffa:	23 e3       	ldi	r18, 0x33	; 51
    5ffc:	33 e3       	ldi	r19, 0x33	; 51
    5ffe:	43 e3       	ldi	r20, 0x33	; 51
    6000:	5f e3       	ldi	r21, 0x3F	; 63
    6002:	0e 94 4b 4b 	call	0x9696	; 0x9696 <__mulsf3>
    6006:	6b 01       	movw	r12, r22
    6008:	7c 01       	movw	r14, r24
    600a:	c5 01       	movw	r24, r10
    600c:	b4 01       	movw	r22, r8
    600e:	0e 94 bf 4a 	call	0x957e	; 0x957e <__floatsisf>
    6012:	2a e9       	ldi	r18, 0x9A	; 154
    6014:	39 e9       	ldi	r19, 0x99	; 153
    6016:	49 e9       	ldi	r20, 0x99	; 153
    6018:	5e e3       	ldi	r21, 0x3E	; 62
    601a:	0e 94 4b 4b 	call	0x9696	; 0x9696 <__mulsf3>
    601e:	9b 01       	movw	r18, r22
    6020:	ac 01       	movw	r20, r24
    6022:	c7 01       	movw	r24, r14
    6024:	b6 01       	movw	r22, r12
    6026:	0e 94 2d 4a 	call	0x945a	; 0x945a <__addsf3>
    602a:	0e 94 91 4a 	call	0x9522	; 0x9522 <__fixunssfsi>
    602e:	60 93 34 0a 	sts	0x0A34, r22	; 0x800a34 <voltageSmooth>
    6032:	0f 90       	pop	r0
    6034:	0f 90       	pop	r0
    6036:	0f 90       	pop	r0
    6038:	0f 90       	pop	r0
    603a:	80 91 34 0a 	lds	r24, 0x0A34	; 0x800a34 <voltageSmooth>
    603e:	87 36       	cpi	r24, 0x67	; 103
    6040:	08 f4       	brcc	.+2      	; 0x6044 <loop+0xe4>
    6042:	60 c0       	rjmp	.+192    	; 0x6104 <loop+0x1a4>
    6044:	4d df       	rcall	.-358    	; 0x5ee0 <checkIncomingMIDI()>
    6046:	80 91 2b 0a 	lds	r24, 0x0A2B	; 0x800a2b <flag_processFastLED>
    604a:	88 23       	and	r24, r24
    604c:	29 f1       	breq	.+74     	; 0x6098 <loop+0x138>
    604e:	8f e0       	ldi	r24, 0x0F	; 15
    6050:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <FastLED>
    6054:	e0 91 3d 0a 	lds	r30, 0x0A3D	; 0x800a3d <songID>
    6058:	e1 50       	subi	r30, 0x01	; 1
    605a:	e4 31       	cpi	r30, 0x14	; 20
    605c:	c8 f4       	brcc	.+50     	; 0x6090 <loop+0x130>
    605e:	f0 e0       	ldi	r31, 0x00	; 0
    6060:	ec 5c       	subi	r30, 0xCC	; 204
    6062:	ff 4c       	sbci	r31, 0xCF	; 207
    6064:	0c 94 22 4c 	jmp	0x9844	; 0x9844 <__tablejump2__>
    6068:	58 30       	cpi	r21, 0x08	; 8
    606a:	5b 30       	cpi	r21, 0x0B	; 11
    606c:	5e 30       	cpi	r21, 0x0E	; 14
    606e:	61 30       	cpi	r22, 0x01	; 1
    6070:	64 30       	cpi	r22, 0x04	; 4
    6072:	67 30       	cpi	r22, 0x07	; 7
    6074:	6a 30       	cpi	r22, 0x0A	; 10
    6076:	6d 30       	cpi	r22, 0x0D	; 13
    6078:	70 30       	cpi	r23, 0x00	; 0
    607a:	73 30       	cpi	r23, 0x03	; 3
    607c:	76 30       	cpi	r23, 0x06	; 6
    607e:	79 30       	cpi	r23, 0x09	; 9
    6080:	7c 30       	cpi	r23, 0x0C	; 12
    6082:	7e 30       	cpi	r23, 0x0E	; 14
    6084:	7e 30       	cpi	r23, 0x0E	; 14
    6086:	80 30       	cpi	r24, 0x00	; 0
    6088:	48 30       	cpi	r20, 0x08	; 8
    608a:	48 30       	cpi	r20, 0x08	; 8
    608c:	48 30       	cpi	r20, 0x08	; 8
    608e:	7c 30       	cpi	r23, 0x0C	; 12
    6090:	0e 94 51 1c 	call	0x38a2	; 0x38a2 <defaultLoop()>
    6094:	10 92 2b 0a 	sts	0x0A2B, r1	; 0x800a2b <flag_processFastLED>
    6098:	cf 91       	pop	r28
    609a:	1f 91       	pop	r17
    609c:	0f 91       	pop	r16
    609e:	ff 90       	pop	r15
    60a0:	ef 90       	pop	r14
    60a2:	df 90       	pop	r13
    60a4:	cf 90       	pop	r12
    60a6:	bf 90       	pop	r11
    60a8:	af 90       	pop	r10
    60aa:	9f 90       	pop	r9
    60ac:	8f 90       	pop	r8
    60ae:	08 95       	ret
    60b0:	0e 94 13 1d 	call	0x3a26	; 0x3a26 <LearnToFly()>
    60b4:	ef cf       	rjmp	.-34     	; 0x6094 <loop+0x134>
    60b6:	0e 94 d4 1d 	call	0x3ba8	; 0x3ba8 <Castle()>
    60ba:	ec cf       	rjmp	.-40     	; 0x6094 <loop+0x134>
    60bc:	0e 94 19 1f 	call	0x3e32	; 0x3e32 <TooClose()>
    60c0:	e9 cf       	rjmp	.-46     	; 0x6094 <loop+0x134>
    60c2:	0e 94 f2 1f 	call	0x3fe4	; 0x3fe4 <Pokerface()>
    60c6:	e6 cf       	rjmp	.-52     	; 0x6094 <loop+0x134>
    60c8:	0e 94 d9 20 	call	0x41b2	; 0x41b2 <UseSomebody()>
    60cc:	e3 cf       	rjmp	.-58     	; 0x6094 <loop+0x134>
    60ce:	0e 94 96 21 	call	0x432c	; 0x432c <NoRoots()>
    60d2:	e0 cf       	rjmp	.-64     	; 0x6094 <loop+0x134>
    60d4:	0e 94 ff 22 	call	0x45fe	; 0x45fe <Firework()>
    60d8:	dd cf       	rjmp	.-70     	; 0x6094 <loop+0x134>
    60da:	0e 94 3d 24 	call	0x487a	; 0x487a <Diamonds()>
    60de:	da cf       	rjmp	.-76     	; 0x6094 <loop+0x134>
    60e0:	0e 94 25 25 	call	0x4a4a	; 0x4a4a <SetFire()>
    60e4:	d7 cf       	rjmp	.-82     	; 0x6094 <loop+0x134>
    60e6:	0e 94 0d 26 	call	0x4c1a	; 0x4c1a <Chandelier()>
    60ea:	d4 cf       	rjmp	.-88     	; 0x6094 <loop+0x134>
    60ec:	0e 94 f5 26 	call	0x4dea	; 0x4dea <Titanium()>
    60f0:	d1 cf       	rjmp	.-94     	; 0x6094 <loop+0x134>
    60f2:	0e 94 dd 27 	call	0x4fba	; 0x4fba <SomeoneYouLoved()>
    60f6:	ce cf       	rjmp	.-100    	; 0x6094 <loop+0x134>
    60f8:	48 d8       	rcall	.-3952   	; 0x518a <ShouldntStop()>
    60fa:	cc cf       	rjmp	.-104    	; 0x6094 <loop+0x134>
    60fc:	2e d9       	rcall	.-3492   	; 0x535a <SunAlwaysShinesOnTV()>
    60fe:	ca cf       	rjmp	.-108    	; 0x6094 <loop+0x134>
    6100:	f4 d9       	rcall	.-3096   	; 0x54ea <enjoyTheSilence()>
    6102:	c8 cf       	rjmp	.-112    	; 0x6094 <loop+0x134>
    6104:	60 e0       	ldi	r22, 0x00	; 0
    6106:	8d e3       	ldi	r24, 0x3D	; 61
    6108:	90 e1       	ldi	r25, 0x10	; 16
    610a:	0e 94 44 3d 	call	0x7a88	; 0x7a88 <CFastLED::clear(bool)>
    610e:	8d e3       	ldi	r24, 0x3D	; 61
    6110:	90 e1       	ldi	r25, 0x10	; 16
    6112:	0e 94 c6 05 	call	0xb8c	; 0xb8c <CFastLED::show()>
    6116:	64 ef       	ldi	r22, 0xF4	; 244
    6118:	71 e0       	ldi	r23, 0x01	; 1
    611a:	80 e0       	ldi	r24, 0x00	; 0
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0e 94 98 42 	call	0x8530	; 0x8530 <delay>
    6122:	8f e0       	ldi	r24, 0x0F	; 15
    6124:	80 93 3d 10 	sts	0x103D, r24	; 0x80103d <FastLED>
    6128:	8f ef       	ldi	r24, 0xFF	; 255
    612a:	80 93 3e 0a 	sts	0x0A3E, r24	; 0x800a3e <leds>
    612e:	10 92 3f 0a 	sts	0x0A3F, r1	; 0x800a3f <leds+0x1>
    6132:	10 92 40 0a 	sts	0x0A40, r1	; 0x800a40 <leds+0x2>
    6136:	8d e3       	ldi	r24, 0x3D	; 61
    6138:	90 e1       	ldi	r25, 0x10	; 16
    613a:	0e 94 c6 05 	call	0xb8c	; 0xb8c <CFastLED::show()>
    613e:	64 ef       	ldi	r22, 0xF4	; 244
    6140:	71 e0       	ldi	r23, 0x01	; 1
    6142:	80 e0       	ldi	r24, 0x00	; 0
    6144:	90 e0       	ldi	r25, 0x00	; 0
    6146:	cf 91       	pop	r28
    6148:	1f 91       	pop	r17
    614a:	0f 91       	pop	r16
    614c:	ff 90       	pop	r15
    614e:	ef 90       	pop	r14
    6150:	df 90       	pop	r13
    6152:	cf 90       	pop	r12
    6154:	bf 90       	pop	r11
    6156:	af 90       	pop	r10
    6158:	9f 90       	pop	r9
    615a:	8f 90       	pop	r8
    615c:	0c 94 98 42 	jmp	0x8530	; 0x8530 <delay>

00006160 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    6160:	90 e0       	ldi	r25, 0x00	; 0
    6162:	80 e0       	ldi	r24, 0x00	; 0
    6164:	08 95       	ret

00006166 <Print::flush()>:
    6166:	08 95       	ret

00006168 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    6168:	2f 92       	push	r2
    616a:	3f 92       	push	r3
    616c:	4f 92       	push	r4
    616e:	5f 92       	push	r5
    6170:	6f 92       	push	r6
    6172:	7f 92       	push	r7
    6174:	8f 92       	push	r8
    6176:	9f 92       	push	r9
    6178:	af 92       	push	r10
    617a:	bf 92       	push	r11
    617c:	cf 92       	push	r12
    617e:	df 92       	push	r13
    6180:	ef 92       	push	r14
    6182:	ff 92       	push	r15
    6184:	0f 93       	push	r16
    6186:	1f 93       	push	r17
    6188:	cf 93       	push	r28
    618a:	df 93       	push	r29
    618c:	00 d0       	rcall	.+0      	; 0x618e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    618e:	00 d0       	rcall	.+0      	; 0x6190 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    6190:	00 d0       	rcall	.+0      	; 0x6192 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    6192:	cd b7       	in	r28, 0x3d	; 61
    6194:	de b7       	in	r29, 0x3e	; 62
    6196:	3c 01       	movw	r6, r24
    6198:	6a 01       	movw	r12, r20
    619a:	3e 83       	std	Y+6, r19	; 0x06
    619c:	2d 83       	std	Y+5, r18	; 0x05
    619e:	fc 82       	std	Y+4, r15	; 0x04
    61a0:	eb 82       	std	Y+3, r14	; 0x03
    61a2:	58 01       	movw	r10, r16
    61a4:	a4 1a       	sub	r10, r20
    61a6:	b5 0a       	sbc	r11, r21
    61a8:	b7 fe       	sbrs	r11, 7
    61aa:	03 c0       	rjmp	.+6      	; 0x61b2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    61ac:	b1 94       	neg	r11
    61ae:	a1 94       	neg	r10
    61b0:	b1 08       	sbc	r11, r1
    61b2:	8d 80       	ldd	r8, Y+5	; 0x05
    61b4:	9e 80       	ldd	r9, Y+6	; 0x06
    61b6:	86 1a       	sub	r8, r22
    61b8:	97 0a       	sbc	r9, r23
    61ba:	97 fe       	sbrs	r9, 7
    61bc:	03 c0       	rjmp	.+6      	; 0x61c4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    61be:	91 94       	neg	r9
    61c0:	81 94       	neg	r8
    61c2:	91 08       	sbc	r9, r1
    61c4:	8a 14       	cp	r8, r10
    61c6:	9b 04       	cpc	r9, r11
    61c8:	5c f0       	brlt	.+22     	; 0x61e0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    61ca:	90 2f       	mov	r25, r16
    61cc:	81 2f       	mov	r24, r17
    61ce:	0d 81       	ldd	r16, Y+5	; 0x05
    61d0:	1e 81       	ldd	r17, Y+6	; 0x06
    61d2:	9d 83       	std	Y+5, r25	; 0x05
    61d4:	8e 83       	std	Y+6, r24	; 0x06
    61d6:	9c 2d       	mov	r25, r12
    61d8:	8d 2d       	mov	r24, r13
    61da:	6b 01       	movw	r12, r22
    61dc:	69 2f       	mov	r22, r25
    61de:	78 2f       	mov	r23, r24
    61e0:	0c 15       	cp	r16, r12
    61e2:	1d 05       	cpc	r17, r13
    61e4:	5c f0       	brlt	.+22     	; 0x61fc <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    61e6:	9d 81       	ldd	r25, Y+5	; 0x05
    61e8:	8e 81       	ldd	r24, Y+6	; 0x06
    61ea:	7e 83       	std	Y+6, r23	; 0x06
    61ec:	6d 83       	std	Y+5, r22	; 0x05
    61ee:	69 2f       	mov	r22, r25
    61f0:	78 2f       	mov	r23, r24
    61f2:	90 2f       	mov	r25, r16
    61f4:	81 2f       	mov	r24, r17
    61f6:	86 01       	movw	r16, r12
    61f8:	c9 2e       	mov	r12, r25
    61fa:	d8 2e       	mov	r13, r24
    61fc:	16 01       	movw	r2, r12
    61fe:	20 1a       	sub	r2, r16
    6200:	31 0a       	sbc	r3, r17
    6202:	2b 01       	movw	r4, r22
    6204:	2d 81       	ldd	r18, Y+5	; 0x05
    6206:	3e 81       	ldd	r19, Y+6	; 0x06
    6208:	42 1a       	sub	r4, r18
    620a:	53 0a       	sbc	r5, r19
    620c:	57 fe       	sbrs	r5, 7
    620e:	03 c0       	rjmp	.+6      	; 0x6216 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    6210:	51 94       	neg	r5
    6212:	41 94       	neg	r4
    6214:	51 08       	sbc	r5, r1
    6216:	71 01       	movw	r14, r2
    6218:	37 fe       	sbrs	r3, 7
    621a:	03 c0       	rjmp	.+6      	; 0x6222 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    621c:	3f ef       	ldi	r19, 0xFF	; 255
    621e:	e3 1a       	sub	r14, r19
    6220:	f3 0a       	sbc	r15, r19
    6222:	f5 94       	asr	r15
    6224:	e7 94       	ror	r14
    6226:	8d 81       	ldd	r24, Y+5	; 0x05
    6228:	9e 81       	ldd	r25, Y+6	; 0x06
    622a:	86 17       	cp	r24, r22
    622c:	97 07       	cpc	r25, r23
    622e:	5c f5       	brge	.+86     	; 0x6286 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    6230:	a1 e0       	ldi	r26, 0x01	; 1
    6232:	b0 e0       	ldi	r27, 0x00	; 0
    6234:	ba 83       	std	Y+2, r27	; 0x02
    6236:	a9 83       	std	Y+1, r26	; 0x01
    6238:	c0 16       	cp	r12, r16
    623a:	d1 06       	cpc	r13, r17
    623c:	4c f1       	brlt	.+82     	; 0x6290 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    623e:	d3 01       	movw	r26, r6
    6240:	ed 91       	ld	r30, X+
    6242:	fc 91       	ld	r31, X
    6244:	04 84       	ldd	r0, Z+12	; 0x0c
    6246:	f5 85       	ldd	r31, Z+13	; 0x0d
    6248:	e0 2d       	mov	r30, r0
    624a:	2b 81       	ldd	r18, Y+3	; 0x03
    624c:	3c 81       	ldd	r19, Y+4	; 0x04
    624e:	a8 01       	movw	r20, r16
    6250:	6d 81       	ldd	r22, Y+5	; 0x05
    6252:	7e 81       	ldd	r23, Y+6	; 0x06
    6254:	8a 14       	cp	r8, r10
    6256:	9b 04       	cpc	r9, r11
    6258:	1c f0       	brlt	.+6      	; 0x6260 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    625a:	4d 81       	ldd	r20, Y+5	; 0x05
    625c:	5e 81       	ldd	r21, Y+6	; 0x06
    625e:	b8 01       	movw	r22, r16
    6260:	c3 01       	movw	r24, r6
    6262:	09 95       	icall
    6264:	e4 18       	sub	r14, r4
    6266:	f5 08       	sbc	r15, r5
    6268:	f7 fe       	sbrs	r15, 7
    626a:	0a c0       	rjmp	.+20     	; 0x6280 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    626c:	2d 81       	ldd	r18, Y+5	; 0x05
    626e:	3e 81       	ldd	r19, Y+6	; 0x06
    6270:	89 81       	ldd	r24, Y+1	; 0x01
    6272:	9a 81       	ldd	r25, Y+2	; 0x02
    6274:	28 0f       	add	r18, r24
    6276:	39 1f       	adc	r19, r25
    6278:	3e 83       	std	Y+6, r19	; 0x06
    627a:	2d 83       	std	Y+5, r18	; 0x05
    627c:	e2 0c       	add	r14, r2
    627e:	f3 1c       	adc	r15, r3
    6280:	0f 5f       	subi	r16, 0xFF	; 255
    6282:	1f 4f       	sbci	r17, 0xFF	; 255
    6284:	d9 cf       	rjmp	.-78     	; 0x6238 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    6286:	2f ef       	ldi	r18, 0xFF	; 255
    6288:	3f ef       	ldi	r19, 0xFF	; 255
    628a:	3a 83       	std	Y+2, r19	; 0x02
    628c:	29 83       	std	Y+1, r18	; 0x01
    628e:	d4 cf       	rjmp	.-88     	; 0x6238 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    6290:	26 96       	adiw	r28, 0x06	; 6
    6292:	0f b6       	in	r0, 0x3f	; 63
    6294:	f8 94       	cli
    6296:	de bf       	out	0x3e, r29	; 62
    6298:	0f be       	out	0x3f, r0	; 63
    629a:	cd bf       	out	0x3d, r28	; 61
    629c:	df 91       	pop	r29
    629e:	cf 91       	pop	r28
    62a0:	1f 91       	pop	r17
    62a2:	0f 91       	pop	r16
    62a4:	ff 90       	pop	r15
    62a6:	ef 90       	pop	r14
    62a8:	df 90       	pop	r13
    62aa:	cf 90       	pop	r12
    62ac:	bf 90       	pop	r11
    62ae:	af 90       	pop	r10
    62b0:	9f 90       	pop	r9
    62b2:	8f 90       	pop	r8
    62b4:	7f 90       	pop	r7
    62b6:	6f 90       	pop	r6
    62b8:	5f 90       	pop	r5
    62ba:	4f 90       	pop	r4
    62bc:	3f 90       	pop	r3
    62be:	2f 90       	pop	r2
    62c0:	08 95       	ret

000062c2 <Adafruit_GFX::startWrite()>:
    62c2:	08 95       	ret

000062c4 <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    62c4:	dc 01       	movw	r26, r24
    62c6:	ed 91       	ld	r30, X+
    62c8:	fc 91       	ld	r31, X
    62ca:	00 84       	ldd	r0, Z+8	; 0x08
    62cc:	f1 85       	ldd	r31, Z+9	; 0x09
    62ce:	e0 2d       	mov	r30, r0
    62d0:	09 94       	ijmp

000062d2 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    62d2:	0f 93       	push	r16
    62d4:	1f 93       	push	r17
    62d6:	dc 01       	movw	r26, r24
    62d8:	ed 91       	ld	r30, X+
    62da:	fc 91       	ld	r31, X
    62dc:	04 8c       	ldd	r0, Z+28	; 0x1c
    62de:	f5 8d       	ldd	r31, Z+29	; 0x1d
    62e0:	e0 2d       	mov	r30, r0
    62e2:	09 95       	icall
    62e4:	1f 91       	pop	r17
    62e6:	0f 91       	pop	r16
    62e8:	08 95       	ret

000062ea <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    62ea:	0f 93       	push	r16
    62ec:	1f 93       	push	r17
    62ee:	dc 01       	movw	r26, r24
    62f0:	ed 91       	ld	r30, X+
    62f2:	fc 91       	ld	r31, X
    62f4:	06 8c       	ldd	r0, Z+30	; 0x1e
    62f6:	f7 8d       	ldd	r31, Z+31	; 0x1f
    62f8:	e0 2d       	mov	r30, r0
    62fa:	09 95       	icall
    62fc:	1f 91       	pop	r17
    62fe:	0f 91       	pop	r16
    6300:	08 95       	ret

00006302 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    6302:	ef 92       	push	r14
    6304:	ff 92       	push	r15
    6306:	0f 93       	push	r16
    6308:	1f 93       	push	r17
    630a:	dc 01       	movw	r26, r24
    630c:	ed 91       	ld	r30, X+
    630e:	fc 91       	ld	r31, X
    6310:	00 a0       	ldd	r0, Z+32	; 0x20
    6312:	f1 a1       	ldd	r31, Z+33	; 0x21
    6314:	e0 2d       	mov	r30, r0
    6316:	09 95       	icall
    6318:	1f 91       	pop	r17
    631a:	0f 91       	pop	r16
    631c:	ff 90       	pop	r15
    631e:	ef 90       	pop	r14
    6320:	08 95       	ret

00006322 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    6322:	8f 92       	push	r8
    6324:	9f 92       	push	r9
    6326:	af 92       	push	r10
    6328:	bf 92       	push	r11
    632a:	cf 92       	push	r12
    632c:	df 92       	push	r13
    632e:	ef 92       	push	r14
    6330:	ff 92       	push	r15
    6332:	0f 93       	push	r16
    6334:	1f 93       	push	r17
    6336:	cf 93       	push	r28
    6338:	df 93       	push	r29
    633a:	ec 01       	movw	r28, r24
    633c:	5b 01       	movw	r10, r22
    633e:	4a 01       	movw	r8, r20
    6340:	69 01       	movw	r12, r18
    6342:	78 01       	movw	r14, r16
    6344:	e8 81       	ld	r30, Y
    6346:	f9 81       	ldd	r31, Y+1	; 0x01
    6348:	02 84       	ldd	r0, Z+10	; 0x0a
    634a:	f3 85       	ldd	r31, Z+11	; 0x0b
    634c:	e0 2d       	mov	r30, r0
    634e:	09 95       	icall
    6350:	c8 0c       	add	r12, r8
    6352:	d9 1c       	adc	r13, r9
    6354:	86 01       	movw	r16, r12
    6356:	01 50       	subi	r16, 0x01	; 1
    6358:	11 09       	sbc	r17, r1
    635a:	e8 81       	ld	r30, Y
    635c:	f9 81       	ldd	r31, Y+1	; 0x01
    635e:	04 88       	ldd	r0, Z+20	; 0x14
    6360:	f5 89       	ldd	r31, Z+21	; 0x15
    6362:	e0 2d       	mov	r30, r0
    6364:	95 01       	movw	r18, r10
    6366:	a4 01       	movw	r20, r8
    6368:	b5 01       	movw	r22, r10
    636a:	ce 01       	movw	r24, r28
    636c:	09 95       	icall
    636e:	e8 81       	ld	r30, Y
    6370:	f9 81       	ldd	r31, Y+1	; 0x01
    6372:	06 88       	ldd	r0, Z+22	; 0x16
    6374:	f7 89       	ldd	r31, Z+23	; 0x17
    6376:	e0 2d       	mov	r30, r0
    6378:	ce 01       	movw	r24, r28
    637a:	df 91       	pop	r29
    637c:	cf 91       	pop	r28
    637e:	1f 91       	pop	r17
    6380:	0f 91       	pop	r16
    6382:	ff 90       	pop	r15
    6384:	ef 90       	pop	r14
    6386:	df 90       	pop	r13
    6388:	cf 90       	pop	r12
    638a:	bf 90       	pop	r11
    638c:	af 90       	pop	r10
    638e:	9f 90       	pop	r9
    6390:	8f 90       	pop	r8
    6392:	09 94       	ijmp

00006394 <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    6394:	8f 92       	push	r8
    6396:	9f 92       	push	r9
    6398:	af 92       	push	r10
    639a:	bf 92       	push	r11
    639c:	cf 92       	push	r12
    639e:	df 92       	push	r13
    63a0:	ef 92       	push	r14
    63a2:	ff 92       	push	r15
    63a4:	0f 93       	push	r16
    63a6:	1f 93       	push	r17
    63a8:	cf 93       	push	r28
    63aa:	df 93       	push	r29
    63ac:	ec 01       	movw	r28, r24
    63ae:	5b 01       	movw	r10, r22
    63b0:	4a 01       	movw	r8, r20
    63b2:	69 01       	movw	r12, r18
    63b4:	e8 81       	ld	r30, Y
    63b6:	f9 81       	ldd	r31, Y+1	; 0x01
    63b8:	02 84       	ldd	r0, Z+10	; 0x0a
    63ba:	f3 85       	ldd	r31, Z+11	; 0x0b
    63bc:	e0 2d       	mov	r30, r0
    63be:	09 95       	icall
    63c0:	95 01       	movw	r18, r10
    63c2:	2c 0d       	add	r18, r12
    63c4:	3d 1d       	adc	r19, r13
    63c6:	21 50       	subi	r18, 0x01	; 1
    63c8:	31 09       	sbc	r19, r1
    63ca:	e8 81       	ld	r30, Y
    63cc:	f9 81       	ldd	r31, Y+1	; 0x01
    63ce:	04 88       	ldd	r0, Z+20	; 0x14
    63d0:	f5 89       	ldd	r31, Z+21	; 0x15
    63d2:	e0 2d       	mov	r30, r0
    63d4:	78 01       	movw	r14, r16
    63d6:	84 01       	movw	r16, r8
    63d8:	a4 01       	movw	r20, r8
    63da:	b5 01       	movw	r22, r10
    63dc:	ce 01       	movw	r24, r28
    63de:	09 95       	icall
    63e0:	e8 81       	ld	r30, Y
    63e2:	f9 81       	ldd	r31, Y+1	; 0x01
    63e4:	06 88       	ldd	r0, Z+22	; 0x16
    63e6:	f7 89       	ldd	r31, Z+23	; 0x17
    63e8:	e0 2d       	mov	r30, r0
    63ea:	ce 01       	movw	r24, r28
    63ec:	df 91       	pop	r29
    63ee:	cf 91       	pop	r28
    63f0:	1f 91       	pop	r17
    63f2:	0f 91       	pop	r16
    63f4:	ff 90       	pop	r15
    63f6:	ef 90       	pop	r14
    63f8:	df 90       	pop	r13
    63fa:	cf 90       	pop	r12
    63fc:	bf 90       	pop	r11
    63fe:	af 90       	pop	r10
    6400:	9f 90       	pop	r9
    6402:	8f 90       	pop	r8
    6404:	09 94       	ijmp

00006406 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    6406:	4f 92       	push	r4
    6408:	5f 92       	push	r5
    640a:	6f 92       	push	r6
    640c:	7f 92       	push	r7
    640e:	8f 92       	push	r8
    6410:	9f 92       	push	r9
    6412:	af 92       	push	r10
    6414:	bf 92       	push	r11
    6416:	cf 92       	push	r12
    6418:	df 92       	push	r13
    641a:	ef 92       	push	r14
    641c:	ff 92       	push	r15
    641e:	0f 93       	push	r16
    6420:	1f 93       	push	r17
    6422:	cf 93       	push	r28
    6424:	df 93       	push	r29
    6426:	6c 01       	movw	r12, r24
    6428:	2b 01       	movw	r4, r22
    642a:	5a 01       	movw	r10, r20
    642c:	39 01       	movw	r6, r18
    642e:	48 01       	movw	r8, r16
    6430:	dc 01       	movw	r26, r24
    6432:	ed 91       	ld	r30, X+
    6434:	fc 91       	ld	r31, X
    6436:	02 84       	ldd	r0, Z+10	; 0x0a
    6438:	f3 85       	ldd	r31, Z+11	; 0x0b
    643a:	e0 2d       	mov	r30, r0
    643c:	09 95       	icall
    643e:	e2 01       	movw	r28, r4
    6440:	64 0c       	add	r6, r4
    6442:	75 1c       	adc	r7, r5
    6444:	d6 01       	movw	r26, r12
    6446:	ed 91       	ld	r30, X+
    6448:	fc 91       	ld	r31, X
    644a:	c6 15       	cp	r28, r6
    644c:	d7 05       	cpc	r29, r7
    644e:	5c f4       	brge	.+22     	; 0x6466 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    6450:	00 88       	ldd	r0, Z+16	; 0x10
    6452:	f1 89       	ldd	r31, Z+17	; 0x11
    6454:	e0 2d       	mov	r30, r0
    6456:	87 01       	movw	r16, r14
    6458:	94 01       	movw	r18, r8
    645a:	a5 01       	movw	r20, r10
    645c:	be 01       	movw	r22, r28
    645e:	c6 01       	movw	r24, r12
    6460:	09 95       	icall
    6462:	21 96       	adiw	r28, 0x01	; 1
    6464:	ef cf       	rjmp	.-34     	; 0x6444 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    6466:	06 88       	ldd	r0, Z+22	; 0x16
    6468:	f7 89       	ldd	r31, Z+23	; 0x17
    646a:	e0 2d       	mov	r30, r0
    646c:	c6 01       	movw	r24, r12
    646e:	df 91       	pop	r29
    6470:	cf 91       	pop	r28
    6472:	1f 91       	pop	r17
    6474:	0f 91       	pop	r16
    6476:	ff 90       	pop	r15
    6478:	ef 90       	pop	r14
    647a:	df 90       	pop	r13
    647c:	cf 90       	pop	r12
    647e:	bf 90       	pop	r11
    6480:	af 90       	pop	r10
    6482:	9f 90       	pop	r9
    6484:	8f 90       	pop	r8
    6486:	7f 90       	pop	r7
    6488:	6f 90       	pop	r6
    648a:	5f 90       	pop	r5
    648c:	4f 90       	pop	r4
    648e:	09 94       	ijmp

00006490 <Adafruit_GFX::fillScreen(unsigned int)>:
    6490:	ef 92       	push	r14
    6492:	ff 92       	push	r15
    6494:	0f 93       	push	r16
    6496:	1f 93       	push	r17
    6498:	dc 01       	movw	r26, r24
    649a:	19 96       	adiw	r26, 0x09	; 9
    649c:	0d 91       	ld	r16, X+
    649e:	1c 91       	ld	r17, X
    64a0:	1a 97       	sbiw	r26, 0x0a	; 10
    64a2:	17 96       	adiw	r26, 0x07	; 7
    64a4:	2d 91       	ld	r18, X+
    64a6:	3c 91       	ld	r19, X
    64a8:	18 97       	sbiw	r26, 0x08	; 8
    64aa:	ed 91       	ld	r30, X+
    64ac:	fc 91       	ld	r31, X
    64ae:	00 a0       	ldd	r0, Z+32	; 0x20
    64b0:	f1 a1       	ldd	r31, Z+33	; 0x21
    64b2:	e0 2d       	mov	r30, r0
    64b4:	7b 01       	movw	r14, r22
    64b6:	50 e0       	ldi	r21, 0x00	; 0
    64b8:	40 e0       	ldi	r20, 0x00	; 0
    64ba:	70 e0       	ldi	r23, 0x00	; 0
    64bc:	60 e0       	ldi	r22, 0x00	; 0
    64be:	09 95       	icall
    64c0:	1f 91       	pop	r17
    64c2:	0f 91       	pop	r16
    64c4:	ff 90       	pop	r15
    64c6:	ef 90       	pop	r14
    64c8:	08 95       	ret

000064ca <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    64ca:	6f 92       	push	r6
    64cc:	7f 92       	push	r7
    64ce:	8f 92       	push	r8
    64d0:	9f 92       	push	r9
    64d2:	af 92       	push	r10
    64d4:	bf 92       	push	r11
    64d6:	cf 92       	push	r12
    64d8:	df 92       	push	r13
    64da:	ef 92       	push	r14
    64dc:	ff 92       	push	r15
    64de:	0f 93       	push	r16
    64e0:	1f 93       	push	r17
    64e2:	cf 93       	push	r28
    64e4:	df 93       	push	r29
    64e6:	ec 01       	movw	r28, r24
    64e8:	6b 01       	movw	r12, r22
    64ea:	5a 01       	movw	r10, r20
    64ec:	39 01       	movw	r6, r18
    64ee:	48 01       	movw	r8, r16
    64f0:	e8 81       	ld	r30, Y
    64f2:	f9 81       	ldd	r31, Y+1	; 0x01
    64f4:	02 84       	ldd	r0, Z+10	; 0x0a
    64f6:	f3 85       	ldd	r31, Z+11	; 0x0b
    64f8:	e0 2d       	mov	r30, r0
    64fa:	09 95       	icall
    64fc:	e8 81       	ld	r30, Y
    64fe:	f9 81       	ldd	r31, Y+1	; 0x01
    6500:	02 88       	ldd	r0, Z+18	; 0x12
    6502:	f3 89       	ldd	r31, Z+19	; 0x13
    6504:	e0 2d       	mov	r30, r0
    6506:	87 01       	movw	r16, r14
    6508:	93 01       	movw	r18, r6
    650a:	a5 01       	movw	r20, r10
    650c:	b6 01       	movw	r22, r12
    650e:	ce 01       	movw	r24, r28
    6510:	09 95       	icall
    6512:	a5 01       	movw	r20, r10
    6514:	48 0d       	add	r20, r8
    6516:	59 1d       	adc	r21, r9
    6518:	41 50       	subi	r20, 0x01	; 1
    651a:	51 09       	sbc	r21, r1
    651c:	e8 81       	ld	r30, Y
    651e:	f9 81       	ldd	r31, Y+1	; 0x01
    6520:	02 88       	ldd	r0, Z+18	; 0x12
    6522:	f3 89       	ldd	r31, Z+19	; 0x13
    6524:	e0 2d       	mov	r30, r0
    6526:	93 01       	movw	r18, r6
    6528:	b6 01       	movw	r22, r12
    652a:	ce 01       	movw	r24, r28
    652c:	09 95       	icall
    652e:	e8 81       	ld	r30, Y
    6530:	f9 81       	ldd	r31, Y+1	; 0x01
    6532:	00 88       	ldd	r0, Z+16	; 0x10
    6534:	f1 89       	ldd	r31, Z+17	; 0x11
    6536:	e0 2d       	mov	r30, r0
    6538:	94 01       	movw	r18, r8
    653a:	a5 01       	movw	r20, r10
    653c:	b6 01       	movw	r22, r12
    653e:	ce 01       	movw	r24, r28
    6540:	09 95       	icall
    6542:	c6 0c       	add	r12, r6
    6544:	d7 1c       	adc	r13, r7
    6546:	b6 01       	movw	r22, r12
    6548:	61 50       	subi	r22, 0x01	; 1
    654a:	71 09       	sbc	r23, r1
    654c:	e8 81       	ld	r30, Y
    654e:	f9 81       	ldd	r31, Y+1	; 0x01
    6550:	00 88       	ldd	r0, Z+16	; 0x10
    6552:	f1 89       	ldd	r31, Z+17	; 0x11
    6554:	e0 2d       	mov	r30, r0
    6556:	94 01       	movw	r18, r8
    6558:	a5 01       	movw	r20, r10
    655a:	ce 01       	movw	r24, r28
    655c:	09 95       	icall
    655e:	e8 81       	ld	r30, Y
    6560:	f9 81       	ldd	r31, Y+1	; 0x01
    6562:	06 88       	ldd	r0, Z+22	; 0x16
    6564:	f7 89       	ldd	r31, Z+23	; 0x17
    6566:	e0 2d       	mov	r30, r0
    6568:	ce 01       	movw	r24, r28
    656a:	df 91       	pop	r29
    656c:	cf 91       	pop	r28
    656e:	1f 91       	pop	r17
    6570:	0f 91       	pop	r16
    6572:	ff 90       	pop	r15
    6574:	ef 90       	pop	r14
    6576:	df 90       	pop	r13
    6578:	cf 90       	pop	r12
    657a:	bf 90       	pop	r11
    657c:	af 90       	pop	r10
    657e:	9f 90       	pop	r9
    6580:	8f 90       	pop	r8
    6582:	7f 90       	pop	r7
    6584:	6f 90       	pop	r6
    6586:	09 94       	ijmp

00006588 <Adafruit_GFX::invertDisplay(bool)>:
    6588:	08 95       	ret

0000658a <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    658a:	6f 92       	push	r6
    658c:	7f 92       	push	r7
    658e:	8f 92       	push	r8
    6590:	9f 92       	push	r9
    6592:	af 92       	push	r10
    6594:	bf 92       	push	r11
    6596:	cf 92       	push	r12
    6598:	df 92       	push	r13
    659a:	ef 92       	push	r14
    659c:	ff 92       	push	r15
    659e:	0f 93       	push	r16
    65a0:	1f 93       	push	r17
    65a2:	cf 93       	push	r28
    65a4:	df 93       	push	r29
    65a6:	5c 01       	movw	r10, r24
    65a8:	eb 01       	movw	r28, r22
    65aa:	6a 01       	movw	r12, r20
    65ac:	49 01       	movw	r8, r18
    65ae:	38 01       	movw	r6, r16
    65b0:	87 01       	movw	r16, r14
    65b2:	dc 01       	movw	r26, r24
    65b4:	ed 91       	ld	r30, X+
    65b6:	fc 91       	ld	r31, X
    65b8:	62 17       	cp	r22, r18
    65ba:	73 07       	cpc	r23, r19
    65bc:	19 f5       	brne	.+70     	; 0x6604 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    65be:	64 16       	cp	r6, r20
    65c0:	75 06       	cpc	r7, r21
    65c2:	2c f0       	brlt	.+10     	; 0x65ce <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    65c4:	96 2d       	mov	r25, r6
    65c6:	87 2d       	mov	r24, r7
    65c8:	3a 01       	movw	r6, r20
    65ca:	c9 2e       	mov	r12, r25
    65cc:	d8 2e       	mov	r13, r24
    65ce:	96 01       	movw	r18, r12
    65d0:	26 19       	sub	r18, r6
    65d2:	37 09       	sbc	r19, r7
    65d4:	2f 5f       	subi	r18, 0xFF	; 255
    65d6:	3f 4f       	sbci	r19, 0xFF	; 255
    65d8:	04 8c       	ldd	r0, Z+28	; 0x1c
    65da:	f5 8d       	ldd	r31, Z+29	; 0x1d
    65dc:	e0 2d       	mov	r30, r0
    65de:	a3 01       	movw	r20, r6
    65e0:	be 01       	movw	r22, r28
    65e2:	c5 01       	movw	r24, r10
    65e4:	09 95       	icall
    65e6:	df 91       	pop	r29
    65e8:	cf 91       	pop	r28
    65ea:	1f 91       	pop	r17
    65ec:	0f 91       	pop	r16
    65ee:	ff 90       	pop	r15
    65f0:	ef 90       	pop	r14
    65f2:	df 90       	pop	r13
    65f4:	cf 90       	pop	r12
    65f6:	bf 90       	pop	r11
    65f8:	af 90       	pop	r10
    65fa:	9f 90       	pop	r9
    65fc:	8f 90       	pop	r8
    65fe:	7f 90       	pop	r7
    6600:	6f 90       	pop	r6
    6602:	08 95       	ret
    6604:	46 15       	cp	r20, r6
    6606:	57 05       	cpc	r21, r7
    6608:	91 f4       	brne	.+36     	; 0x662e <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    660a:	26 17       	cp	r18, r22
    660c:	37 07       	cpc	r19, r23
    660e:	24 f0       	brlt	.+8      	; 0x6618 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    6610:	89 2d       	mov	r24, r9
    6612:	4b 01       	movw	r8, r22
    6614:	c2 2f       	mov	r28, r18
    6616:	d8 2f       	mov	r29, r24
    6618:	9e 01       	movw	r18, r28
    661a:	28 19       	sub	r18, r8
    661c:	39 09       	sbc	r19, r9
    661e:	2f 5f       	subi	r18, 0xFF	; 255
    6620:	3f 4f       	sbci	r19, 0xFF	; 255
    6622:	06 8c       	ldd	r0, Z+30	; 0x1e
    6624:	f7 8d       	ldd	r31, Z+31	; 0x1f
    6626:	e0 2d       	mov	r30, r0
    6628:	a6 01       	movw	r20, r12
    662a:	b4 01       	movw	r22, r8
    662c:	da cf       	rjmp	.-76     	; 0x65e2 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    662e:	02 84       	ldd	r0, Z+10	; 0x0a
    6630:	f3 85       	ldd	r31, Z+11	; 0x0b
    6632:	e0 2d       	mov	r30, r0
    6634:	09 95       	icall
    6636:	d5 01       	movw	r26, r10
    6638:	ed 91       	ld	r30, X+
    663a:	fc 91       	ld	r31, X
    663c:	04 88       	ldd	r0, Z+20	; 0x14
    663e:	f5 89       	ldd	r31, Z+21	; 0x15
    6640:	e0 2d       	mov	r30, r0
    6642:	83 01       	movw	r16, r6
    6644:	94 01       	movw	r18, r8
    6646:	a6 01       	movw	r20, r12
    6648:	be 01       	movw	r22, r28
    664a:	c5 01       	movw	r24, r10
    664c:	09 95       	icall
    664e:	d5 01       	movw	r26, r10
    6650:	ed 91       	ld	r30, X+
    6652:	fc 91       	ld	r31, X
    6654:	06 88       	ldd	r0, Z+22	; 0x16
    6656:	f7 89       	ldd	r31, Z+23	; 0x17
    6658:	e0 2d       	mov	r30, r0
    665a:	c5 01       	movw	r24, r10
    665c:	df 91       	pop	r29
    665e:	cf 91       	pop	r28
    6660:	1f 91       	pop	r17
    6662:	0f 91       	pop	r16
    6664:	ff 90       	pop	r15
    6666:	ef 90       	pop	r14
    6668:	df 90       	pop	r13
    666a:	cf 90       	pop	r12
    666c:	bf 90       	pop	r11
    666e:	af 90       	pop	r10
    6670:	9f 90       	pop	r9
    6672:	8f 90       	pop	r8
    6674:	7f 90       	pop	r7
    6676:	6f 90       	pop	r6
    6678:	09 94       	ijmp

0000667a <Adafruit_GFX::setRotation(unsigned char)>:
    667a:	fc 01       	movw	r30, r24
    667c:	63 70       	andi	r22, 0x03	; 3
    667e:	65 8b       	std	Z+21, r22	; 0x15
    6680:	83 81       	ldd	r24, Z+3	; 0x03
    6682:	94 81       	ldd	r25, Z+4	; 0x04
    6684:	25 81       	ldd	r18, Z+5	; 0x05
    6686:	36 81       	ldd	r19, Z+6	; 0x06
    6688:	61 30       	cpi	r22, 0x01	; 1
    668a:	39 f0       	breq	.+14     	; 0x669a <Adafruit_GFX::setRotation(unsigned char)+0x20>
    668c:	63 30       	cpi	r22, 0x03	; 3
    668e:	29 f0       	breq	.+10     	; 0x669a <Adafruit_GFX::setRotation(unsigned char)+0x20>
    6690:	90 87       	std	Z+8, r25	; 0x08
    6692:	87 83       	std	Z+7, r24	; 0x07
    6694:	32 87       	std	Z+10, r19	; 0x0a
    6696:	21 87       	std	Z+9, r18	; 0x09
    6698:	08 95       	ret
    669a:	30 87       	std	Z+8, r19	; 0x08
    669c:	27 83       	std	Z+7, r18	; 0x07
    669e:	92 87       	std	Z+10, r25	; 0x0a
    66a0:	81 87       	std	Z+9, r24	; 0x09
    66a2:	08 95       	ret

000066a4 <Adafruit_GFX::Adafruit_GFX(int, int)>:
    66a4:	fc 01       	movw	r30, r24
    66a6:	12 82       	std	Z+2, r1	; 0x02
    66a8:	89 e7       	ldi	r24, 0x79	; 121
    66aa:	98 e0       	ldi	r25, 0x08	; 8
    66ac:	91 83       	std	Z+1, r25	; 0x01
    66ae:	80 83       	st	Z, r24
    66b0:	74 83       	std	Z+4, r23	; 0x04
    66b2:	63 83       	std	Z+3, r22	; 0x03
    66b4:	56 83       	std	Z+6, r21	; 0x06
    66b6:	45 83       	std	Z+5, r20	; 0x05
    66b8:	70 87       	std	Z+8, r23	; 0x08
    66ba:	67 83       	std	Z+7, r22	; 0x07
    66bc:	52 87       	std	Z+10, r21	; 0x0a
    66be:	41 87       	std	Z+9, r20	; 0x09
    66c0:	15 8a       	std	Z+21, r1	; 0x15
    66c2:	14 86       	std	Z+12, r1	; 0x0c
    66c4:	13 86       	std	Z+11, r1	; 0x0b
    66c6:	16 86       	std	Z+14, r1	; 0x0e
    66c8:	15 86       	std	Z+13, r1	; 0x0d
    66ca:	81 e0       	ldi	r24, 0x01	; 1
    66cc:	84 8b       	std	Z+20, r24	; 0x14
    66ce:	83 8b       	std	Z+19, r24	; 0x13
    66d0:	2f ef       	ldi	r18, 0xFF	; 255
    66d2:	3f ef       	ldi	r19, 0xFF	; 255
    66d4:	32 8b       	std	Z+18, r19	; 0x12
    66d6:	21 8b       	std	Z+17, r18	; 0x11
    66d8:	30 8b       	std	Z+16, r19	; 0x10
    66da:	27 87       	std	Z+15, r18	; 0x0f
    66dc:	86 8b       	std	Z+22, r24	; 0x16
    66de:	17 8a       	std	Z+23, r1	; 0x17
    66e0:	11 8e       	std	Z+25, r1	; 0x19
    66e2:	10 8e       	std	Z+24, r1	; 0x18
    66e4:	08 95       	ret

000066e6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    66e6:	2f 92       	push	r2
    66e8:	3f 92       	push	r3
    66ea:	4f 92       	push	r4
    66ec:	5f 92       	push	r5
    66ee:	6f 92       	push	r6
    66f0:	7f 92       	push	r7
    66f2:	8f 92       	push	r8
    66f4:	9f 92       	push	r9
    66f6:	af 92       	push	r10
    66f8:	bf 92       	push	r11
    66fa:	cf 92       	push	r12
    66fc:	df 92       	push	r13
    66fe:	ef 92       	push	r14
    6700:	ff 92       	push	r15
    6702:	0f 93       	push	r16
    6704:	1f 93       	push	r17
    6706:	cf 93       	push	r28
    6708:	df 93       	push	r29
    670a:	cd b7       	in	r28, 0x3d	; 61
    670c:	de b7       	in	r29, 0x3e	; 62
    670e:	2e 97       	sbiw	r28, 0x0e	; 14
    6710:	0f b6       	in	r0, 0x3f	; 63
    6712:	f8 94       	cli
    6714:	de bf       	out	0x3e, r29	; 62
    6716:	0f be       	out	0x3f, r0	; 63
    6718:	cd bf       	out	0x3d, r28	; 61
    671a:	5c 01       	movw	r10, r24
    671c:	2b 01       	movw	r4, r22
    671e:	5c 83       	std	Y+4, r21	; 0x04
    6720:	4b 83       	std	Y+3, r20	; 0x03
    6722:	3e 87       	std	Y+14, r19	; 0x0e
    6724:	2d 87       	std	Y+13, r18	; 0x0d
    6726:	fe 82       	std	Y+6, r15	; 0x06
    6728:	ed 82       	std	Y+5, r14	; 0x05
    672a:	16 01       	movw	r2, r12
    672c:	81 e0       	ldi	r24, 0x01	; 1
    672e:	90 e0       	ldi	r25, 0x00	; 0
    6730:	4c 01       	movw	r8, r24
    6732:	82 1a       	sub	r8, r18
    6734:	93 0a       	sbc	r9, r19
    6736:	c9 01       	movw	r24, r18
    6738:	91 95       	neg	r25
    673a:	81 95       	neg	r24
    673c:	91 09       	sbc	r25, r1
    673e:	9c 01       	movw	r18, r24
    6740:	22 0f       	add	r18, r18
    6742:	33 1f       	adc	r19, r19
    6744:	3a 83       	std	Y+2, r19	; 0x02
    6746:	29 83       	std	Y+1, r18	; 0x01
    6748:	c7 01       	movw	r24, r14
    674a:	01 96       	adiw	r24, 0x01	; 1
    674c:	98 87       	std	Y+8, r25	; 0x08
    674e:	8f 83       	std	Y+7, r24	; 0x07
    6750:	f1 2c       	mov	r15, r1
    6752:	e1 2c       	mov	r14, r1
    6754:	66 24       	eor	r6, r6
    6756:	63 94       	inc	r6
    6758:	71 2c       	mov	r7, r1
    675a:	90 2f       	mov	r25, r16
    675c:	91 70       	andi	r25, 0x01	; 1
    675e:	99 87       	std	Y+9, r25	; 0x09
    6760:	02 70       	andi	r16, 0x02	; 2
    6762:	0a 87       	std	Y+10, r16	; 0x0a
    6764:	da 01       	movw	r26, r20
    6766:	11 96       	adiw	r26, 0x01	; 1
    6768:	bc 87       	std	Y+12, r27	; 0x0c
    676a:	ab 87       	std	Y+11, r26	; 0x0b
    676c:	2d 85       	ldd	r18, Y+13	; 0x0d
    676e:	3e 85       	ldd	r19, Y+14	; 0x0e
    6770:	e2 16       	cp	r14, r18
    6772:	f3 06       	cpc	r15, r19
    6774:	0c f0       	brlt	.+2      	; 0x6778 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    6776:	8d c0       	rjmp	.+282    	; 0x6892 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    6778:	cd 84       	ldd	r12, Y+13	; 0x0d
    677a:	de 84       	ldd	r13, Y+14	; 0x0e
    677c:	97 fc       	sbrc	r9, 7
    677e:	0b c0       	rjmp	.+22     	; 0x6796 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    6780:	69 01       	movw	r12, r18
    6782:	31 e0       	ldi	r19, 0x01	; 1
    6784:	c3 1a       	sub	r12, r19
    6786:	d1 08       	sbc	r13, r1
    6788:	89 81       	ldd	r24, Y+1	; 0x01
    678a:	9a 81       	ldd	r25, Y+2	; 0x02
    678c:	02 96       	adiw	r24, 0x02	; 2
    678e:	9a 83       	std	Y+2, r25	; 0x02
    6790:	89 83       	std	Y+1, r24	; 0x01
    6792:	88 0e       	add	r8, r24
    6794:	99 1e       	adc	r9, r25
    6796:	9f ef       	ldi	r25, 0xFF	; 255
    6798:	e9 1a       	sub	r14, r25
    679a:	f9 0a       	sbc	r15, r25
    679c:	a2 e0       	ldi	r26, 0x02	; 2
    679e:	6a 0e       	add	r6, r26
    67a0:	71 1c       	adc	r7, r1
    67a2:	86 0c       	add	r8, r6
    67a4:	97 1c       	adc	r9, r7
    67a6:	ce 14       	cp	r12, r14
    67a8:	df 04       	cpc	r13, r15
    67aa:	a4 f1       	brlt	.+104    	; 0x6814 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    67ac:	b9 85       	ldd	r27, Y+9	; 0x09
    67ae:	bb 23       	and	r27, r27
    67b0:	b9 f0       	breq	.+46     	; 0x67e0 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    67b2:	96 01       	movw	r18, r12
    67b4:	22 0f       	add	r18, r18
    67b6:	33 1f       	adc	r19, r19
    67b8:	8f 81       	ldd	r24, Y+7	; 0x07
    67ba:	98 85       	ldd	r25, Y+8	; 0x08
    67bc:	28 0f       	add	r18, r24
    67be:	39 1f       	adc	r19, r25
    67c0:	d5 01       	movw	r26, r10
    67c2:	ed 91       	ld	r30, X+
    67c4:	fc 91       	ld	r31, X
    67c6:	00 88       	ldd	r0, Z+16	; 0x10
    67c8:	f1 89       	ldd	r31, Z+17	; 0x11
    67ca:	e0 2d       	mov	r30, r0
    67cc:	81 01       	movw	r16, r2
    67ce:	4b 81       	ldd	r20, Y+3	; 0x03
    67d0:	5c 81       	ldd	r21, Y+4	; 0x04
    67d2:	4c 19       	sub	r20, r12
    67d4:	5d 09       	sbc	r21, r13
    67d6:	b2 01       	movw	r22, r4
    67d8:	6e 0d       	add	r22, r14
    67da:	7f 1d       	adc	r23, r15
    67dc:	c5 01       	movw	r24, r10
    67de:	09 95       	icall
    67e0:	ba 85       	ldd	r27, Y+10	; 0x0a
    67e2:	bb 23       	and	r27, r27
    67e4:	b9 f0       	breq	.+46     	; 0x6814 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    67e6:	96 01       	movw	r18, r12
    67e8:	22 0f       	add	r18, r18
    67ea:	33 1f       	adc	r19, r19
    67ec:	8f 81       	ldd	r24, Y+7	; 0x07
    67ee:	98 85       	ldd	r25, Y+8	; 0x08
    67f0:	28 0f       	add	r18, r24
    67f2:	39 1f       	adc	r19, r25
    67f4:	d5 01       	movw	r26, r10
    67f6:	ed 91       	ld	r30, X+
    67f8:	fc 91       	ld	r31, X
    67fa:	00 88       	ldd	r0, Z+16	; 0x10
    67fc:	f1 89       	ldd	r31, Z+17	; 0x11
    67fe:	e0 2d       	mov	r30, r0
    6800:	81 01       	movw	r16, r2
    6802:	4b 81       	ldd	r20, Y+3	; 0x03
    6804:	5c 81       	ldd	r21, Y+4	; 0x04
    6806:	4c 19       	sub	r20, r12
    6808:	5d 09       	sbc	r21, r13
    680a:	b2 01       	movw	r22, r4
    680c:	6e 19       	sub	r22, r14
    680e:	7f 09       	sbc	r23, r15
    6810:	c5 01       	movw	r24, r10
    6812:	09 95       	icall
    6814:	2d 85       	ldd	r18, Y+13	; 0x0d
    6816:	3e 85       	ldd	r19, Y+14	; 0x0e
    6818:	2c 15       	cp	r18, r12
    681a:	3d 05       	cpc	r19, r13
    681c:	b9 f1       	breq	.+110    	; 0x688c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    681e:	39 85       	ldd	r19, Y+9	; 0x09
    6820:	33 23       	and	r19, r19
    6822:	c1 f0       	breq	.+48     	; 0x6854 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    6824:	93 01       	movw	r18, r6
    6826:	22 50       	subi	r18, 0x02	; 2
    6828:	31 09       	sbc	r19, r1
    682a:	8d 81       	ldd	r24, Y+5	; 0x05
    682c:	9e 81       	ldd	r25, Y+6	; 0x06
    682e:	28 0f       	add	r18, r24
    6830:	39 1f       	adc	r19, r25
    6832:	d5 01       	movw	r26, r10
    6834:	ed 91       	ld	r30, X+
    6836:	fc 91       	ld	r31, X
    6838:	00 88       	ldd	r0, Z+16	; 0x10
    683a:	f1 89       	ldd	r31, Z+17	; 0x11
    683c:	e0 2d       	mov	r30, r0
    683e:	81 01       	movw	r16, r2
    6840:	4b 85       	ldd	r20, Y+11	; 0x0b
    6842:	5c 85       	ldd	r21, Y+12	; 0x0c
    6844:	4e 19       	sub	r20, r14
    6846:	5f 09       	sbc	r21, r15
    6848:	6d 85       	ldd	r22, Y+13	; 0x0d
    684a:	7e 85       	ldd	r23, Y+14	; 0x0e
    684c:	64 0d       	add	r22, r4
    684e:	75 1d       	adc	r23, r5
    6850:	c5 01       	movw	r24, r10
    6852:	09 95       	icall
    6854:	ba 85       	ldd	r27, Y+10	; 0x0a
    6856:	bb 23       	and	r27, r27
    6858:	c9 f0       	breq	.+50     	; 0x688c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    685a:	93 01       	movw	r18, r6
    685c:	22 50       	subi	r18, 0x02	; 2
    685e:	31 09       	sbc	r19, r1
    6860:	8d 81       	ldd	r24, Y+5	; 0x05
    6862:	9e 81       	ldd	r25, Y+6	; 0x06
    6864:	28 0f       	add	r18, r24
    6866:	39 1f       	adc	r19, r25
    6868:	b2 01       	movw	r22, r4
    686a:	ad 85       	ldd	r26, Y+13	; 0x0d
    686c:	be 85       	ldd	r27, Y+14	; 0x0e
    686e:	6a 1b       	sub	r22, r26
    6870:	7b 0b       	sbc	r23, r27
    6872:	d5 01       	movw	r26, r10
    6874:	ed 91       	ld	r30, X+
    6876:	fc 91       	ld	r31, X
    6878:	00 88       	ldd	r0, Z+16	; 0x10
    687a:	f1 89       	ldd	r31, Z+17	; 0x11
    687c:	e0 2d       	mov	r30, r0
    687e:	81 01       	movw	r16, r2
    6880:	4b 85       	ldd	r20, Y+11	; 0x0b
    6882:	5c 85       	ldd	r21, Y+12	; 0x0c
    6884:	4e 19       	sub	r20, r14
    6886:	5f 09       	sbc	r21, r15
    6888:	c5 01       	movw	r24, r10
    688a:	09 95       	icall
    688c:	de 86       	std	Y+14, r13	; 0x0e
    688e:	cd 86       	std	Y+13, r12	; 0x0d
    6890:	6d cf       	rjmp	.-294    	; 0x676c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    6892:	2e 96       	adiw	r28, 0x0e	; 14
    6894:	0f b6       	in	r0, 0x3f	; 63
    6896:	f8 94       	cli
    6898:	de bf       	out	0x3e, r29	; 62
    689a:	0f be       	out	0x3f, r0	; 63
    689c:	cd bf       	out	0x3d, r28	; 61
    689e:	df 91       	pop	r29
    68a0:	cf 91       	pop	r28
    68a2:	1f 91       	pop	r17
    68a4:	0f 91       	pop	r16
    68a6:	ff 90       	pop	r15
    68a8:	ef 90       	pop	r14
    68aa:	df 90       	pop	r13
    68ac:	cf 90       	pop	r12
    68ae:	bf 90       	pop	r11
    68b0:	af 90       	pop	r10
    68b2:	9f 90       	pop	r9
    68b4:	8f 90       	pop	r8
    68b6:	7f 90       	pop	r7
    68b8:	6f 90       	pop	r6
    68ba:	5f 90       	pop	r5
    68bc:	4f 90       	pop	r4
    68be:	3f 90       	pop	r3
    68c0:	2f 90       	pop	r2
    68c2:	08 95       	ret

000068c4 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    68c4:	6f 92       	push	r6
    68c6:	7f 92       	push	r7
    68c8:	8f 92       	push	r8
    68ca:	9f 92       	push	r9
    68cc:	af 92       	push	r10
    68ce:	bf 92       	push	r11
    68d0:	cf 92       	push	r12
    68d2:	df 92       	push	r13
    68d4:	ef 92       	push	r14
    68d6:	ff 92       	push	r15
    68d8:	0f 93       	push	r16
    68da:	1f 93       	push	r17
    68dc:	cf 93       	push	r28
    68de:	df 93       	push	r29
    68e0:	ec 01       	movw	r28, r24
    68e2:	4b 01       	movw	r8, r22
    68e4:	3a 01       	movw	r6, r20
    68e6:	59 01       	movw	r10, r18
    68e8:	68 01       	movw	r12, r16
    68ea:	e8 81       	ld	r30, Y
    68ec:	f9 81       	ldd	r31, Y+1	; 0x01
    68ee:	02 84       	ldd	r0, Z+10	; 0x0a
    68f0:	f3 85       	ldd	r31, Z+11	; 0x0b
    68f2:	e0 2d       	mov	r30, r0
    68f4:	09 95       	icall
    68f6:	95 01       	movw	r18, r10
    68f8:	22 0f       	add	r18, r18
    68fa:	33 1f       	adc	r19, r19
    68fc:	2f 5f       	subi	r18, 0xFF	; 255
    68fe:	3f 4f       	sbci	r19, 0xFF	; 255
    6900:	a3 01       	movw	r20, r6
    6902:	4a 19       	sub	r20, r10
    6904:	5b 09       	sbc	r21, r11
    6906:	e8 81       	ld	r30, Y
    6908:	f9 81       	ldd	r31, Y+1	; 0x01
    690a:	00 88       	ldd	r0, Z+16	; 0x10
    690c:	f1 89       	ldd	r31, Z+17	; 0x11
    690e:	e0 2d       	mov	r30, r0
    6910:	b4 01       	movw	r22, r8
    6912:	ce 01       	movw	r24, r28
    6914:	09 95       	icall
    6916:	f1 2c       	mov	r15, r1
    6918:	e1 2c       	mov	r14, r1
    691a:	03 e0       	ldi	r16, 0x03	; 3
    691c:	95 01       	movw	r18, r10
    691e:	a3 01       	movw	r20, r6
    6920:	b4 01       	movw	r22, r8
    6922:	ce 01       	movw	r24, r28
    6924:	e0 de       	rcall	.-576    	; 0x66e6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    6926:	e8 81       	ld	r30, Y
    6928:	f9 81       	ldd	r31, Y+1	; 0x01
    692a:	06 88       	ldd	r0, Z+22	; 0x16
    692c:	f7 89       	ldd	r31, Z+23	; 0x17
    692e:	e0 2d       	mov	r30, r0
    6930:	ce 01       	movw	r24, r28
    6932:	df 91       	pop	r29
    6934:	cf 91       	pop	r28
    6936:	1f 91       	pop	r17
    6938:	0f 91       	pop	r16
    693a:	ff 90       	pop	r15
    693c:	ef 90       	pop	r14
    693e:	df 90       	pop	r13
    6940:	cf 90       	pop	r12
    6942:	bf 90       	pop	r11
    6944:	af 90       	pop	r10
    6946:	9f 90       	pop	r9
    6948:	8f 90       	pop	r8
    694a:	7f 90       	pop	r7
    694c:	6f 90       	pop	r6
    694e:	09 94       	ijmp

00006950 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    6950:	2f 92       	push	r2
    6952:	3f 92       	push	r3
    6954:	4f 92       	push	r4
    6956:	5f 92       	push	r5
    6958:	6f 92       	push	r6
    695a:	7f 92       	push	r7
    695c:	8f 92       	push	r8
    695e:	9f 92       	push	r9
    6960:	af 92       	push	r10
    6962:	bf 92       	push	r11
    6964:	cf 92       	push	r12
    6966:	df 92       	push	r13
    6968:	ef 92       	push	r14
    696a:	ff 92       	push	r15
    696c:	0f 93       	push	r16
    696e:	1f 93       	push	r17
    6970:	cf 93       	push	r28
    6972:	df 93       	push	r29
    6974:	cd b7       	in	r28, 0x3d	; 61
    6976:	de b7       	in	r29, 0x3e	; 62
    6978:	6a 97       	sbiw	r28, 0x1a	; 26
    697a:	0f b6       	in	r0, 0x3f	; 63
    697c:	f8 94       	cli
    697e:	de bf       	out	0x3e, r29	; 62
    6980:	0f be       	out	0x3f, r0	; 63
    6982:	cd bf       	out	0x3d, r28	; 61
    6984:	9a 8f       	std	Y+26, r25	; 0x1a
    6986:	89 8f       	std	Y+25, r24	; 0x19
    6988:	7a 83       	std	Y+2, r23	; 0x02
    698a:	69 83       	std	Y+1, r22	; 0x01
    698c:	4a 01       	movw	r8, r20
    698e:	d2 2e       	mov	r13, r18
    6990:	18 87       	std	Y+8, r17	; 0x08
    6992:	0f 83       	std	Y+7, r16	; 0x07
    6994:	37 01       	movw	r6, r14
    6996:	bc 2c       	mov	r11, r12
    6998:	dc 01       	movw	r26, r24
    699a:	58 96       	adiw	r26, 0x18	; 24
    699c:	2d 91       	ld	r18, X+
    699e:	3c 91       	ld	r19, X
    69a0:	59 97       	sbiw	r26, 0x19	; 25
    69a2:	21 15       	cp	r18, r1
    69a4:	31 05       	cpc	r19, r1
    69a6:	09 f0       	breq	.+2      	; 0x69aa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    69a8:	15 c1       	rjmp	.+554    	; 0x6bd4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    69aa:	17 96       	adiw	r26, 0x07	; 7
    69ac:	8d 91       	ld	r24, X+
    69ae:	9c 91       	ld	r25, X
    69b0:	18 97       	sbiw	r26, 0x08	; 8
    69b2:	68 17       	cp	r22, r24
    69b4:	79 07       	cpc	r23, r25
    69b6:	0c f0       	brlt	.+2      	; 0x69ba <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    69b8:	d7 c1       	rjmp	.+942    	; 0x6d68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    69ba:	19 96       	adiw	r26, 0x09	; 9
    69bc:	8d 91       	ld	r24, X+
    69be:	9c 91       	ld	r25, X
    69c0:	48 17       	cp	r20, r24
    69c2:	59 07       	cpc	r21, r25
    69c4:	0c f0       	brlt	.+2      	; 0x69c8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    69c6:	d0 c1       	rjmp	.+928    	; 0x6d68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    69c8:	4c 2c       	mov	r4, r12
    69ca:	51 2c       	mov	r5, r1
    69cc:	b6 e0       	ldi	r27, 0x06	; 6
    69ce:	cb 9e       	mul	r12, r27
    69d0:	60 0d       	add	r22, r0
    69d2:	71 1d       	adc	r23, r1
    69d4:	11 24       	eor	r1, r1
    69d6:	7c 87       	std	Y+12, r23	; 0x0c
    69d8:	6b 87       	std	Y+11, r22	; 0x0b
    69da:	16 16       	cp	r1, r22
    69dc:	17 06       	cpc	r1, r23
    69de:	0c f0       	brlt	.+2      	; 0x69e2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    69e0:	c3 c1       	rjmp	.+902    	; 0x6d68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    69e2:	ea 2d       	mov	r30, r10
    69e4:	f0 e0       	ldi	r31, 0x00	; 0
    69e6:	fa 87       	std	Y+10, r31	; 0x0a
    69e8:	e9 87       	std	Y+9, r30	; 0x09
    69ea:	93 e0       	ldi	r25, 0x03	; 3
    69ec:	ee 0f       	add	r30, r30
    69ee:	ff 1f       	adc	r31, r31
    69f0:	9a 95       	dec	r25
    69f2:	e1 f7       	brne	.-8      	; 0x69ec <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    69f4:	f8 8b       	std	Y+16, r31	; 0x10
    69f6:	ef 87       	std	Y+15, r30	; 0x0f
    69f8:	cf 01       	movw	r24, r30
    69fa:	84 0f       	add	r24, r20
    69fc:	95 1f       	adc	r25, r21
    69fe:	18 16       	cp	r1, r24
    6a00:	19 06       	cpc	r1, r25
    6a02:	0c f0       	brlt	.+2      	; 0x6a06 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    6a04:	b1 c1       	rjmp	.+866    	; 0x6d68 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    6a06:	a9 8d       	ldd	r26, Y+25	; 0x19
    6a08:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6a0a:	57 96       	adiw	r26, 0x17	; 23
    6a0c:	8c 91       	ld	r24, X
    6a0e:	81 11       	cpse	r24, r1
    6a10:	04 c0       	rjmp	.+8      	; 0x6a1a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    6a12:	bf ea       	ldi	r27, 0xAF	; 175
    6a14:	bd 15       	cp	r27, r13
    6a16:	08 f4       	brcc	.+2      	; 0x6a1a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    6a18:	d3 94       	inc	r13
    6a1a:	a9 8d       	ldd	r26, Y+25	; 0x19
    6a1c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6a1e:	ed 91       	ld	r30, X+
    6a20:	fc 91       	ld	r31, X
    6a22:	11 97       	sbiw	r26, 0x01	; 1
    6a24:	02 84       	ldd	r0, Z+10	; 0x0a
    6a26:	f3 85       	ldd	r31, Z+11	; 0x0b
    6a28:	e0 2d       	mov	r30, r0
    6a2a:	cd 01       	movw	r24, r26
    6a2c:	09 95       	icall
    6a2e:	b5 e0       	ldi	r27, 0x05	; 5
    6a30:	db 9e       	mul	r13, r27
    6a32:	c0 01       	movw	r24, r0
    6a34:	11 24       	eor	r1, r1
    6a36:	e9 81       	ldd	r30, Y+1	; 0x01
    6a38:	fa 81       	ldd	r31, Y+2	; 0x02
    6a3a:	fc 83       	std	Y+4, r31	; 0x04
    6a3c:	eb 83       	std	Y+3, r30	; 0x03
    6a3e:	31 2c       	mov	r3, r1
    6a40:	21 2c       	mov	r2, r1
    6a42:	9c 01       	movw	r18, r24
    6a44:	28 52       	subi	r18, 0x28	; 40
    6a46:	3f 4f       	sbci	r19, 0xFF	; 255
    6a48:	38 8f       	std	Y+24, r19	; 0x18
    6a4a:	2f 8b       	std	Y+23, r18	; 0x17
    6a4c:	4a 2d       	mov	r20, r10
    6a4e:	50 e0       	ldi	r21, 0x00	; 0
    6a50:	5e 8b       	std	Y+22, r21	; 0x16
    6a52:	4d 8b       	std	Y+21, r20	; 0x15
    6a54:	ef 89       	ldd	r30, Y+23	; 0x17
    6a56:	f8 8d       	ldd	r31, Y+24	; 0x18
    6a58:	e2 0d       	add	r30, r2
    6a5a:	f3 1d       	adc	r31, r3
    6a5c:	44 91       	lpm	r20, Z
    6a5e:	9e 82       	std	Y+6, r9	; 0x06
    6a60:	8d 82       	std	Y+5, r8	; 0x05
    6a62:	d1 2c       	mov	r13, r1
    6a64:	c1 2c       	mov	r12, r1
    6a66:	69 81       	ldd	r22, Y+1	; 0x01
    6a68:	7a 81       	ldd	r23, Y+2	; 0x02
    6a6a:	62 0d       	add	r22, r2
    6a6c:	73 1d       	adc	r23, r3
    6a6e:	7a 8b       	std	Y+18, r23	; 0x12
    6a70:	69 8b       	std	Y+17, r22	; 0x11
    6a72:	84 2f       	mov	r24, r20
    6a74:	90 e0       	ldi	r25, 0x00	; 0
    6a76:	9c 8b       	std	Y+20, r25	; 0x14
    6a78:	8b 8b       	std	Y+19, r24	; 0x13
    6a7a:	e9 8d       	ldd	r30, Y+25	; 0x19
    6a7c:	fa 8d       	ldd	r31, Y+26	; 0x1a
    6a7e:	a0 81       	ld	r26, Z
    6a80:	b1 81       	ldd	r27, Z+1	; 0x01
    6a82:	40 ff       	sbrs	r20, 0
    6a84:	82 c0       	rjmp	.+260    	; 0x6b8a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    6a86:	f1 e0       	ldi	r31, 0x01	; 1
    6a88:	bf 12       	cpse	r11, r31
    6a8a:	6f c0       	rjmp	.+222    	; 0x6b6a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    6a8c:	af 12       	cpse	r10, r31
    6a8e:	6d c0       	rjmp	.+218    	; 0x6b6a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    6a90:	1c 96       	adiw	r26, 0x0c	; 12
    6a92:	ed 91       	ld	r30, X+
    6a94:	fc 91       	ld	r31, X
    6a96:	2f 81       	ldd	r18, Y+7	; 0x07
    6a98:	38 85       	ldd	r19, Y+8	; 0x08
    6a9a:	a4 01       	movw	r20, r8
    6a9c:	4c 0d       	add	r20, r12
    6a9e:	5d 1d       	adc	r21, r13
    6aa0:	69 89       	ldd	r22, Y+17	; 0x11
    6aa2:	7a 89       	ldd	r23, Y+18	; 0x12
    6aa4:	89 8d       	ldd	r24, Y+25	; 0x19
    6aa6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6aa8:	09 95       	icall
    6aaa:	eb 89       	ldd	r30, Y+19	; 0x13
    6aac:	fc 89       	ldd	r31, Y+20	; 0x14
    6aae:	f5 95       	asr	r31
    6ab0:	e7 95       	ror	r30
    6ab2:	4e 2f       	mov	r20, r30
    6ab4:	5f ef       	ldi	r21, 0xFF	; 255
    6ab6:	c5 1a       	sub	r12, r21
    6ab8:	d5 0a       	sbc	r13, r21
    6aba:	6d 81       	ldd	r22, Y+5	; 0x05
    6abc:	7e 81       	ldd	r23, Y+6	; 0x06
    6abe:	8d 89       	ldd	r24, Y+21	; 0x15
    6ac0:	9e 89       	ldd	r25, Y+22	; 0x16
    6ac2:	68 0f       	add	r22, r24
    6ac4:	79 1f       	adc	r23, r25
    6ac6:	7e 83       	std	Y+6, r23	; 0x06
    6ac8:	6d 83       	std	Y+5, r22	; 0x05
    6aca:	98 e0       	ldi	r25, 0x08	; 8
    6acc:	c9 16       	cp	r12, r25
    6ace:	d1 04       	cpc	r13, r1
    6ad0:	81 f6       	brne	.-96     	; 0x6a72 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    6ad2:	af ef       	ldi	r26, 0xFF	; 255
    6ad4:	2a 1a       	sub	r2, r26
    6ad6:	3a 0a       	sbc	r3, r26
    6ad8:	eb 81       	ldd	r30, Y+3	; 0x03
    6ada:	fc 81       	ldd	r31, Y+4	; 0x04
    6adc:	e4 0d       	add	r30, r4
    6ade:	f5 1d       	adc	r31, r5
    6ae0:	fc 83       	std	Y+4, r31	; 0x04
    6ae2:	eb 83       	std	Y+3, r30	; 0x03
    6ae4:	f5 e0       	ldi	r31, 0x05	; 5
    6ae6:	2f 16       	cp	r2, r31
    6ae8:	31 04       	cpc	r3, r1
    6aea:	09 f0       	breq	.+2      	; 0x6aee <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    6aec:	b3 cf       	rjmp	.-154    	; 0x6a54 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    6aee:	2f 81       	ldd	r18, Y+7	; 0x07
    6af0:	38 85       	ldd	r19, Y+8	; 0x08
    6af2:	26 15       	cp	r18, r6
    6af4:	37 05       	cpc	r19, r7
    6af6:	b9 f0       	breq	.+46     	; 0x6b26 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    6af8:	a9 8d       	ldd	r26, Y+25	; 0x19
    6afa:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6afc:	ed 91       	ld	r30, X+
    6afe:	fc 91       	ld	r31, X
    6b00:	b1 e0       	ldi	r27, 0x01	; 1
    6b02:	bb 12       	cpse	r11, r27
    6b04:	57 c0       	rjmp	.+174    	; 0x6bb4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    6b06:	ab 12       	cpse	r10, r27
    6b08:	55 c0       	rjmp	.+170    	; 0x6bb4 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    6b0a:	69 81       	ldd	r22, Y+1	; 0x01
    6b0c:	7a 81       	ldd	r23, Y+2	; 0x02
    6b0e:	6b 5f       	subi	r22, 0xFB	; 251
    6b10:	7f 4f       	sbci	r23, 0xFF	; 255
    6b12:	00 88       	ldd	r0, Z+16	; 0x10
    6b14:	f1 89       	ldd	r31, Z+17	; 0x11
    6b16:	e0 2d       	mov	r30, r0
    6b18:	83 01       	movw	r16, r6
    6b1a:	28 e0       	ldi	r18, 0x08	; 8
    6b1c:	30 e0       	ldi	r19, 0x00	; 0
    6b1e:	a4 01       	movw	r20, r8
    6b20:	89 8d       	ldd	r24, Y+25	; 0x19
    6b22:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6b24:	09 95       	icall
    6b26:	a9 8d       	ldd	r26, Y+25	; 0x19
    6b28:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6b2a:	ed 91       	ld	r30, X+
    6b2c:	fc 91       	ld	r31, X
    6b2e:	11 97       	sbiw	r26, 0x01	; 1
    6b30:	06 88       	ldd	r0, Z+22	; 0x16
    6b32:	f7 89       	ldd	r31, Z+23	; 0x17
    6b34:	e0 2d       	mov	r30, r0
    6b36:	cd 01       	movw	r24, r26
    6b38:	6a 96       	adiw	r28, 0x1a	; 26
    6b3a:	0f b6       	in	r0, 0x3f	; 63
    6b3c:	f8 94       	cli
    6b3e:	de bf       	out	0x3e, r29	; 62
    6b40:	0f be       	out	0x3f, r0	; 63
    6b42:	cd bf       	out	0x3d, r28	; 61
    6b44:	df 91       	pop	r29
    6b46:	cf 91       	pop	r28
    6b48:	1f 91       	pop	r17
    6b4a:	0f 91       	pop	r16
    6b4c:	ff 90       	pop	r15
    6b4e:	ef 90       	pop	r14
    6b50:	df 90       	pop	r13
    6b52:	cf 90       	pop	r12
    6b54:	bf 90       	pop	r11
    6b56:	af 90       	pop	r10
    6b58:	9f 90       	pop	r9
    6b5a:	8f 90       	pop	r8
    6b5c:	7f 90       	pop	r7
    6b5e:	6f 90       	pop	r6
    6b60:	5f 90       	pop	r5
    6b62:	4f 90       	pop	r4
    6b64:	3f 90       	pop	r3
    6b66:	2f 90       	pop	r2
    6b68:	09 94       	ijmp
    6b6a:	1e 96       	adiw	r26, 0x0e	; 14
    6b6c:	ed 91       	ld	r30, X+
    6b6e:	fc 91       	ld	r31, X
    6b70:	ef 80       	ldd	r14, Y+7	; 0x07
    6b72:	f8 84       	ldd	r15, Y+8	; 0x08
    6b74:	09 85       	ldd	r16, Y+9	; 0x09
    6b76:	1a 85       	ldd	r17, Y+10	; 0x0a
    6b78:	92 01       	movw	r18, r4
    6b7a:	4d 81       	ldd	r20, Y+5	; 0x05
    6b7c:	5e 81       	ldd	r21, Y+6	; 0x06
    6b7e:	6b 81       	ldd	r22, Y+3	; 0x03
    6b80:	7c 81       	ldd	r23, Y+4	; 0x04
    6b82:	89 8d       	ldd	r24, Y+25	; 0x19
    6b84:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6b86:	09 95       	icall
    6b88:	90 cf       	rjmp	.-224    	; 0x6aaa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    6b8a:	2f 81       	ldd	r18, Y+7	; 0x07
    6b8c:	38 85       	ldd	r19, Y+8	; 0x08
    6b8e:	26 15       	cp	r18, r6
    6b90:	37 05       	cpc	r19, r7
    6b92:	09 f4       	brne	.+2      	; 0x6b96 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    6b94:	8a cf       	rjmp	.-236    	; 0x6aaa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    6b96:	31 e0       	ldi	r19, 0x01	; 1
    6b98:	b3 12       	cpse	r11, r19
    6b9a:	07 c0       	rjmp	.+14     	; 0x6baa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    6b9c:	a3 12       	cpse	r10, r19
    6b9e:	05 c0       	rjmp	.+10     	; 0x6baa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    6ba0:	1c 96       	adiw	r26, 0x0c	; 12
    6ba2:	ed 91       	ld	r30, X+
    6ba4:	fc 91       	ld	r31, X
    6ba6:	93 01       	movw	r18, r6
    6ba8:	78 cf       	rjmp	.-272    	; 0x6a9a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    6baa:	1e 96       	adiw	r26, 0x0e	; 14
    6bac:	ed 91       	ld	r30, X+
    6bae:	fc 91       	ld	r31, X
    6bb0:	73 01       	movw	r14, r6
    6bb2:	e0 cf       	rjmp	.-64     	; 0x6b74 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    6bb4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6bb6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6bb8:	64 19       	sub	r22, r4
    6bba:	75 09       	sbc	r23, r5
    6bbc:	06 84       	ldd	r0, Z+14	; 0x0e
    6bbe:	f7 85       	ldd	r31, Z+15	; 0x0f
    6bc0:	e0 2d       	mov	r30, r0
    6bc2:	73 01       	movw	r14, r6
    6bc4:	0f 85       	ldd	r16, Y+15	; 0x0f
    6bc6:	18 89       	ldd	r17, Y+16	; 0x10
    6bc8:	92 01       	movw	r18, r4
    6bca:	a4 01       	movw	r20, r8
    6bcc:	89 8d       	ldd	r24, Y+25	; 0x19
    6bce:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6bd0:	09 95       	icall
    6bd2:	a9 cf       	rjmp	.-174    	; 0x6b26 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    6bd4:	f9 01       	movw	r30, r18
    6bd6:	34 96       	adiw	r30, 0x04	; 4
    6bd8:	94 91       	lpm	r25, Z
    6bda:	32 97       	sbiw	r30, 0x02	; 2
    6bdc:	45 91       	lpm	r20, Z+
    6bde:	54 91       	lpm	r21, Z
    6be0:	d9 1a       	sub	r13, r25
    6be2:	b7 e0       	ldi	r27, 0x07	; 7
    6be4:	db 9e       	mul	r13, r27
    6be6:	40 0d       	add	r20, r0
    6be8:	51 1d       	adc	r21, r1
    6bea:	11 24       	eor	r1, r1
    6bec:	f9 01       	movw	r30, r18
    6bee:	25 91       	lpm	r18, Z+
    6bf0:	34 91       	lpm	r19, Z
    6bf2:	3c 8b       	std	Y+20, r19	; 0x14
    6bf4:	2b 8b       	std	Y+19, r18	; 0x13
    6bf6:	fa 01       	movw	r30, r20
    6bf8:	25 90       	lpm	r2, Z+
    6bfa:	34 90       	lpm	r3, Z
    6bfc:	fa 01       	movw	r30, r20
    6bfe:	32 96       	adiw	r30, 0x02	; 2
    6c00:	74 90       	lpm	r7, Z
    6c02:	31 96       	adiw	r30, 0x01	; 1
    6c04:	34 91       	lpm	r19, Z
    6c06:	39 8b       	std	Y+17, r19	; 0x11
    6c08:	32 96       	adiw	r30, 0x02	; 2
    6c0a:	64 90       	lpm	r6, Z
    6c0c:	31 96       	adiw	r30, 0x01	; 1
    6c0e:	44 90       	lpm	r4, Z
    6c10:	41 e0       	ldi	r20, 0x01	; 1
    6c12:	4c 15       	cp	r20, r12
    6c14:	18 f0       	brcs	.+6      	; 0x6c1c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    6c16:	4a 15       	cp	r20, r10
    6c18:	08 f0       	brcs	.+2      	; 0x6c1c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    6c1a:	7f c0       	rjmp	.+254    	; 0x6d1a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    6c1c:	66 2d       	mov	r22, r6
    6c1e:	06 2c       	mov	r0, r6
    6c20:	00 0c       	add	r0, r0
    6c22:	77 0b       	sbc	r23, r23
    6c24:	7c 83       	std	Y+4, r23	; 0x04
    6c26:	6b 83       	std	Y+3, r22	; 0x03
    6c28:	84 2d       	mov	r24, r4
    6c2a:	04 2c       	mov	r0, r4
    6c2c:	00 0c       	add	r0, r0
    6c2e:	99 0b       	sbc	r25, r25
    6c30:	9e 83       	std	Y+6, r25	; 0x06
    6c32:	8d 83       	std	Y+5, r24	; 0x05
    6c34:	a9 8d       	ldd	r26, Y+25	; 0x19
    6c36:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6c38:	ed 91       	ld	r30, X+
    6c3a:	fc 91       	ld	r31, X
    6c3c:	11 97       	sbiw	r26, 0x01	; 1
    6c3e:	02 84       	ldd	r0, Z+10	; 0x0a
    6c40:	f3 85       	ldd	r31, Z+11	; 0x0b
    6c42:	e0 2d       	mov	r30, r0
    6c44:	cd 01       	movw	r24, r26
    6c46:	09 95       	icall
    6c48:	51 2c       	mov	r5, r1
    6c4a:	d1 2c       	mov	r13, r1
    6c4c:	c1 2c       	mov	r12, r1
    6c4e:	ea 2d       	mov	r30, r10
    6c50:	f0 e0       	ldi	r31, 0x00	; 0
    6c52:	fa 87       	std	Y+10, r31	; 0x0a
    6c54:	e9 87       	std	Y+9, r30	; 0x09
    6c56:	2b 2d       	mov	r18, r11
    6c58:	30 e0       	ldi	r19, 0x00	; 0
    6c5a:	3c 87       	std	Y+12, r19	; 0x0c
    6c5c:	2b 87       	std	Y+11, r18	; 0x0b
    6c5e:	a4 01       	movw	r20, r8
    6c60:	44 0d       	add	r20, r4
    6c62:	51 1d       	adc	r21, r1
    6c64:	47 fc       	sbrc	r4, 7
    6c66:	5a 95       	dec	r21
    6c68:	58 8f       	std	Y+24, r21	; 0x18
    6c6a:	4f 8b       	std	Y+23, r20	; 0x17
    6c6c:	69 81       	ldd	r22, Y+1	; 0x01
    6c6e:	7a 81       	ldd	r23, Y+2	; 0x02
    6c70:	66 0d       	add	r22, r6
    6c72:	71 1d       	adc	r23, r1
    6c74:	67 fc       	sbrc	r6, 7
    6c76:	7a 95       	dec	r23
    6c78:	7e 87       	std	Y+14, r23	; 0x0e
    6c7a:	6d 87       	std	Y+13, r22	; 0x0d
    6c7c:	79 89       	ldd	r23, Y+17	; 0x11
    6c7e:	c7 16       	cp	r12, r23
    6c80:	08 f0       	brcs	.+2      	; 0x6c84 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    6c82:	51 cf       	rjmp	.-350    	; 0x6b26 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    6c84:	2c 2d       	mov	r18, r12
    6c86:	30 e0       	ldi	r19, 0x00	; 0
    6c88:	4d 81       	ldd	r20, Y+5	; 0x05
    6c8a:	5e 81       	ldd	r21, Y+6	; 0x06
    6c8c:	42 0f       	add	r20, r18
    6c8e:	53 1f       	adc	r21, r19
    6c90:	a9 85       	ldd	r26, Y+9	; 0x09
    6c92:	ba 85       	ldd	r27, Y+10	; 0x0a
    6c94:	4a 9f       	mul	r20, r26
    6c96:	c0 01       	movw	r24, r0
    6c98:	4b 9f       	mul	r20, r27
    6c9a:	90 0d       	add	r25, r0
    6c9c:	5a 9f       	mul	r21, r26
    6c9e:	90 0d       	add	r25, r0
    6ca0:	11 24       	eor	r1, r1
    6ca2:	fc 01       	movw	r30, r24
    6ca4:	e8 0d       	add	r30, r8
    6ca6:	f9 1d       	adc	r31, r9
    6ca8:	f8 8b       	std	Y+16, r31	; 0x10
    6caa:	ef 87       	std	Y+15, r30	; 0x0f
    6cac:	85 2d       	mov	r24, r5
    6cae:	61 2c       	mov	r6, r1
    6cb0:	4f 89       	ldd	r20, Y+23	; 0x17
    6cb2:	58 8d       	ldd	r21, Y+24	; 0x18
    6cb4:	42 0f       	add	r20, r18
    6cb6:	53 1f       	adc	r21, r19
    6cb8:	5e 8b       	std	Y+22, r21	; 0x16
    6cba:	4d 8b       	std	Y+21, r20	; 0x15
    6cbc:	67 14       	cp	r6, r7
    6cbe:	08 f0       	brcs	.+2      	; 0x6cc2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    6cc0:	50 c0       	rjmp	.+160    	; 0x6d62 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    6cc2:	44 24       	eor	r4, r4
    6cc4:	43 94       	inc	r4
    6cc6:	48 0e       	add	r4, r24
    6cc8:	87 70       	andi	r24, 0x07	; 7
    6cca:	41 f4       	brne	.+16     	; 0x6cdc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    6ccc:	c1 01       	movw	r24, r2
    6cce:	01 96       	adiw	r24, 0x01	; 1
    6cd0:	eb 89       	ldd	r30, Y+19	; 0x13
    6cd2:	fc 89       	ldd	r31, Y+20	; 0x14
    6cd4:	e2 0d       	add	r30, r2
    6cd6:	f3 1d       	adc	r31, r3
    6cd8:	d4 90       	lpm	r13, Z
    6cda:	1c 01       	movw	r2, r24
    6cdc:	d7 fe       	sbrs	r13, 7
    6cde:	19 c0       	rjmp	.+50     	; 0x6d12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    6ce0:	a9 8d       	ldd	r26, Y+25	; 0x19
    6ce2:	ba 8d       	ldd	r27, Y+26	; 0x1a
    6ce4:	ed 91       	ld	r30, X+
    6ce6:	fc 91       	ld	r31, X
    6ce8:	66 2d       	mov	r22, r6
    6cea:	70 e0       	ldi	r23, 0x00	; 0
    6cec:	b1 e0       	ldi	r27, 0x01	; 1
    6cee:	bb 12       	cpse	r11, r27
    6cf0:	19 c0       	rjmp	.+50     	; 0x6d24 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    6cf2:	ab 12       	cpse	r10, r27
    6cf4:	17 c0       	rjmp	.+46     	; 0x6d24 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    6cf6:	2d 85       	ldd	r18, Y+13	; 0x0d
    6cf8:	3e 85       	ldd	r19, Y+14	; 0x0e
    6cfa:	62 0f       	add	r22, r18
    6cfc:	73 1f       	adc	r23, r19
    6cfe:	04 84       	ldd	r0, Z+12	; 0x0c
    6d00:	f5 85       	ldd	r31, Z+13	; 0x0d
    6d02:	e0 2d       	mov	r30, r0
    6d04:	2f 81       	ldd	r18, Y+7	; 0x07
    6d06:	38 85       	ldd	r19, Y+8	; 0x08
    6d08:	4d 89       	ldd	r20, Y+21	; 0x15
    6d0a:	5e 89       	ldd	r21, Y+22	; 0x16
    6d0c:	89 8d       	ldd	r24, Y+25	; 0x19
    6d0e:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d10:	09 95       	icall
    6d12:	dd 0c       	add	r13, r13
    6d14:	63 94       	inc	r6
    6d16:	84 2d       	mov	r24, r4
    6d18:	d1 cf       	rjmp	.-94     	; 0x6cbc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    6d1a:	1e 82       	std	Y+6, r1	; 0x06
    6d1c:	1d 82       	std	Y+5, r1	; 0x05
    6d1e:	1c 82       	std	Y+4, r1	; 0x04
    6d20:	1b 82       	std	Y+3, r1	; 0x03
    6d22:	88 cf       	rjmp	.-240    	; 0x6c34 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    6d24:	4b 81       	ldd	r20, Y+3	; 0x03
    6d26:	5c 81       	ldd	r21, Y+4	; 0x04
    6d28:	64 0f       	add	r22, r20
    6d2a:	75 1f       	adc	r23, r21
    6d2c:	ab 85       	ldd	r26, Y+11	; 0x0b
    6d2e:	bc 85       	ldd	r27, Y+12	; 0x0c
    6d30:	6a 9f       	mul	r22, r26
    6d32:	c0 01       	movw	r24, r0
    6d34:	6b 9f       	mul	r22, r27
    6d36:	90 0d       	add	r25, r0
    6d38:	7a 9f       	mul	r23, r26
    6d3a:	90 0d       	add	r25, r0
    6d3c:	11 24       	eor	r1, r1
    6d3e:	69 81       	ldd	r22, Y+1	; 0x01
    6d40:	7a 81       	ldd	r23, Y+2	; 0x02
    6d42:	68 0f       	add	r22, r24
    6d44:	79 1f       	adc	r23, r25
    6d46:	06 84       	ldd	r0, Z+14	; 0x0e
    6d48:	f7 85       	ldd	r31, Z+15	; 0x0f
    6d4a:	e0 2d       	mov	r30, r0
    6d4c:	ef 80       	ldd	r14, Y+7	; 0x07
    6d4e:	f8 84       	ldd	r15, Y+8	; 0x08
    6d50:	09 85       	ldd	r16, Y+9	; 0x09
    6d52:	1a 85       	ldd	r17, Y+10	; 0x0a
    6d54:	9d 01       	movw	r18, r26
    6d56:	4f 85       	ldd	r20, Y+15	; 0x0f
    6d58:	58 89       	ldd	r21, Y+16	; 0x10
    6d5a:	89 8d       	ldd	r24, Y+25	; 0x19
    6d5c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    6d5e:	09 95       	icall
    6d60:	d8 cf       	rjmp	.-80     	; 0x6d12 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    6d62:	57 0c       	add	r5, r7
    6d64:	c3 94       	inc	r12
    6d66:	8a cf       	rjmp	.-236    	; 0x6c7c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    6d68:	6a 96       	adiw	r28, 0x1a	; 26
    6d6a:	0f b6       	in	r0, 0x3f	; 63
    6d6c:	f8 94       	cli
    6d6e:	de bf       	out	0x3e, r29	; 62
    6d70:	0f be       	out	0x3f, r0	; 63
    6d72:	cd bf       	out	0x3d, r28	; 61
    6d74:	df 91       	pop	r29
    6d76:	cf 91       	pop	r28
    6d78:	1f 91       	pop	r17
    6d7a:	0f 91       	pop	r16
    6d7c:	ff 90       	pop	r15
    6d7e:	ef 90       	pop	r14
    6d80:	df 90       	pop	r13
    6d82:	cf 90       	pop	r12
    6d84:	bf 90       	pop	r11
    6d86:	af 90       	pop	r10
    6d88:	9f 90       	pop	r9
    6d8a:	8f 90       	pop	r8
    6d8c:	7f 90       	pop	r7
    6d8e:	6f 90       	pop	r6
    6d90:	5f 90       	pop	r5
    6d92:	4f 90       	pop	r4
    6d94:	3f 90       	pop	r3
    6d96:	2f 90       	pop	r2
    6d98:	08 95       	ret

00006d9a <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    6d9a:	8f 92       	push	r8
    6d9c:	9f 92       	push	r9
    6d9e:	af 92       	push	r10
    6da0:	cf 92       	push	r12
    6da2:	ef 92       	push	r14
    6da4:	ff 92       	push	r15
    6da6:	0f 93       	push	r16
    6da8:	1f 93       	push	r17
    6daa:	cf 93       	push	r28
    6dac:	df 93       	push	r29
    6dae:	ec 01       	movw	r28, r24
    6db0:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    6db2:	88 8d       	ldd	r24, Y+24	; 0x18
    6db4:	99 8d       	ldd	r25, Y+25	; 0x19
    6db6:	00 97       	sbiw	r24, 0x00	; 0
    6db8:	09 f0       	breq	.+2      	; 0x6dbc <Adafruit_GFX::write(unsigned char)+0x22>
    6dba:	50 c0       	rjmp	.+160    	; 0x6e5c <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    6dbc:	6a 30       	cpi	r22, 0x0A	; 10
    6dbe:	d1 f4       	brne	.+52     	; 0x6df4 <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    6dc0:	1c 86       	std	Y+12, r1	; 0x0c
    6dc2:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    6dc4:	8c 89       	ldd	r24, Y+20	; 0x14
    6dc6:	48 e0       	ldi	r20, 0x08	; 8
    6dc8:	84 9f       	mul	r24, r20
    6dca:	90 01       	movw	r18, r0
    6dcc:	11 24       	eor	r1, r1
    6dce:	8d 85       	ldd	r24, Y+13	; 0x0d
    6dd0:	9e 85       	ldd	r25, Y+14	; 0x0e
    6dd2:	82 0f       	add	r24, r18
    6dd4:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    6dd6:	9e 87       	std	Y+14, r25	; 0x0e
    6dd8:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    6dda:	81 e0       	ldi	r24, 0x01	; 1
    6ddc:	90 e0       	ldi	r25, 0x00	; 0
    6dde:	df 91       	pop	r29
    6de0:	cf 91       	pop	r28
    6de2:	1f 91       	pop	r17
    6de4:	0f 91       	pop	r16
    6de6:	ff 90       	pop	r15
    6de8:	ef 90       	pop	r14
    6dea:	cf 90       	pop	r12
    6dec:	af 90       	pop	r10
    6dee:	9f 90       	pop	r9
    6df0:	8f 90       	pop	r8
    6df2:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    6df4:	6d 30       	cpi	r22, 0x0D	; 13
    6df6:	89 f3       	breq	.-30     	; 0x6dda <Adafruit_GFX::write(unsigned char)+0x40>
    6df8:	cb 88       	ldd	r12, Y+19	; 0x13
    6dfa:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    6dfc:	8e 89       	ldd	r24, Y+22	; 0x16
    6dfe:	88 23       	and	r24, r24
    6e00:	c1 f0       	breq	.+48     	; 0x6e32 <Adafruit_GFX::write(unsigned char)+0x98>
    6e02:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e04:	9c 85       	ldd	r25, Y+12	; 0x0c
    6e06:	36 e0       	ldi	r19, 0x06	; 6
    6e08:	c3 9e       	mul	r12, r19
    6e0a:	80 0d       	add	r24, r0
    6e0c:	91 1d       	adc	r25, r1
    6e0e:	11 24       	eor	r1, r1
    6e10:	4f 81       	ldd	r20, Y+7	; 0x07
    6e12:	58 85       	ldd	r21, Y+8	; 0x08
    6e14:	48 17       	cp	r20, r24
    6e16:	59 07       	cpc	r21, r25
    6e18:	64 f4       	brge	.+24     	; 0x6e32 <Adafruit_GFX::write(unsigned char)+0x98>
    6e1a:	4d 85       	ldd	r20, Y+13	; 0x0d
    6e1c:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    6e1e:	1c 86       	std	Y+12, r1	; 0x0c
    6e20:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    6e22:	38 e0       	ldi	r19, 0x08	; 8
    6e24:	a3 9e       	mul	r10, r19
    6e26:	c0 01       	movw	r24, r0
    6e28:	11 24       	eor	r1, r1
    6e2a:	84 0f       	add	r24, r20
    6e2c:	95 1f       	adc	r25, r21
    6e2e:	9e 87       	std	Y+14, r25	; 0x0e
    6e30:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    6e32:	e9 88       	ldd	r14, Y+17	; 0x11
    6e34:	fa 88       	ldd	r15, Y+18	; 0x12
    6e36:	0f 85       	ldd	r16, Y+15	; 0x0f
    6e38:	18 89       	ldd	r17, Y+16	; 0x10
    6e3a:	4d 85       	ldd	r20, Y+13	; 0x0d
    6e3c:	5e 85       	ldd	r21, Y+14	; 0x0e
    6e3e:	6b 85       	ldd	r22, Y+11	; 0x0b
    6e40:	7c 85       	ldd	r23, Y+12	; 0x0c
    6e42:	ce 01       	movw	r24, r28
    6e44:	85 dd       	rcall	.-1270   	; 0x6950 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    6e46:	2b 89       	ldd	r18, Y+19	; 0x13
    6e48:	8b 85       	ldd	r24, Y+11	; 0x0b
    6e4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    6e4c:	46 e0       	ldi	r20, 0x06	; 6
    6e4e:	24 9f       	mul	r18, r20
    6e50:	80 0d       	add	r24, r0
    6e52:	91 1d       	adc	r25, r1
    6e54:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    6e56:	9c 87       	std	Y+12, r25	; 0x0c
    6e58:	8b 87       	std	Y+11, r24	; 0x0b
    6e5a:	bf cf       	rjmp	.-130    	; 0x6dda <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    6e5c:	6a 30       	cpi	r22, 0x0A	; 10
    6e5e:	69 f4       	brne	.+26     	; 0x6e7a <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    6e60:	1c 86       	std	Y+12, r1	; 0x0c
    6e62:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    6e64:	fc 01       	movw	r30, r24
    6e66:	36 96       	adiw	r30, 0x06	; 6
    6e68:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    6e6a:	2c 89       	ldd	r18, Y+20	; 0x14
    6e6c:	8d 85       	ldd	r24, Y+13	; 0x0d
    6e6e:	9e 85       	ldd	r25, Y+14	; 0x0e
    6e70:	e2 9f       	mul	r30, r18
    6e72:	80 0d       	add	r24, r0
    6e74:	91 1d       	adc	r25, r1
    6e76:	11 24       	eor	r1, r1
    6e78:	ae cf       	rjmp	.-164    	; 0x6dd6 <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    6e7a:	6d 30       	cpi	r22, 0x0D	; 13
    6e7c:	09 f4       	brne	.+2      	; 0x6e80 <Adafruit_GFX::write(unsigned char)+0xe6>
    6e7e:	ad cf       	rjmp	.-166    	; 0x6dda <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    6e80:	fc 01       	movw	r30, r24
    6e82:	34 96       	adiw	r30, 0x04	; 4
    6e84:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    6e86:	63 17       	cp	r22, r19
    6e88:	08 f4       	brcc	.+2      	; 0x6e8c <Adafruit_GFX::write(unsigned char)+0xf2>
    6e8a:	a7 cf       	rjmp	.-178    	; 0x6dda <Adafruit_GFX::write(unsigned char)+0x40>
    6e8c:	31 96       	adiw	r30, 0x01	; 1
    6e8e:	e4 91       	lpm	r30, Z
    6e90:	e6 17       	cp	r30, r22
    6e92:	08 f4       	brcc	.+2      	; 0x6e96 <Adafruit_GFX::write(unsigned char)+0xfc>
    6e94:	a2 cf       	rjmp	.-188    	; 0x6dda <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    6e96:	fc 01       	movw	r30, r24
    6e98:	32 96       	adiw	r30, 0x02	; 2
    6e9a:	85 90       	lpm	r8, Z+
    6e9c:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    6e9e:	46 2f       	mov	r20, r22
    6ea0:	43 1b       	sub	r20, r19
    6ea2:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    6ea4:	47 e0       	ldi	r20, 0x07	; 7
    6ea6:	34 9f       	mul	r19, r20
    6ea8:	80 0c       	add	r8, r0
    6eaa:	91 1c       	adc	r9, r1
    6eac:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    6eae:	f4 01       	movw	r30, r8
    6eb0:	32 96       	adiw	r30, 0x02	; 2
    6eb2:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    6eb4:	31 96       	adiw	r30, 0x01	; 1
    6eb6:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    6eb8:	33 23       	and	r19, r19
    6eba:	a1 f1       	breq	.+104    	; 0x6f24 <Adafruit_GFX::write(unsigned char)+0x18a>
    6ebc:	ee 23       	and	r30, r30
    6ebe:	91 f1       	breq	.+100    	; 0x6f24 <Adafruit_GFX::write(unsigned char)+0x18a>
    6ec0:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    6ec2:	f4 01       	movw	r30, r8
    6ec4:	35 96       	adiw	r30, 0x05	; 5
    6ec6:	e4 91       	lpm	r30, Z
    6ec8:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    6eca:	4e 89       	ldd	r20, Y+22	; 0x16
    6ecc:	44 23       	and	r20, r20
    6ece:	01 f1       	breq	.+64     	; 0x6f10 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    6ed0:	0e 2e       	mov	r0, r30
    6ed2:	00 0c       	add	r0, r0
    6ed4:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    6ed6:	e3 0f       	add	r30, r19
    6ed8:	f1 1d       	adc	r31, r1
    6eda:	ce 9e       	mul	r12, r30
    6edc:	a0 01       	movw	r20, r0
    6ede:	cf 9e       	mul	r12, r31
    6ee0:	50 0d       	add	r21, r0
    6ee2:	11 24       	eor	r1, r1
    6ee4:	6b 85       	ldd	r22, Y+11	; 0x0b
    6ee6:	7c 85       	ldd	r23, Y+12	; 0x0c
    6ee8:	46 0f       	add	r20, r22
    6eea:	57 1f       	adc	r21, r23
    6eec:	6f 81       	ldd	r22, Y+7	; 0x07
    6eee:	78 85       	ldd	r23, Y+8	; 0x08
    6ef0:	64 17       	cp	r22, r20
    6ef2:	75 07       	cpc	r23, r21
    6ef4:	6c f4       	brge	.+26     	; 0x6f10 <Adafruit_GFX::write(unsigned char)+0x176>
    6ef6:	4d 85       	ldd	r20, Y+13	; 0x0d
    6ef8:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    6efa:	1c 86       	std	Y+12, r1	; 0x0c
    6efc:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    6efe:	fc 01       	movw	r30, r24
    6f00:	36 96       	adiw	r30, 0x06	; 6
    6f02:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    6f04:	ae 9e       	mul	r10, r30
    6f06:	40 0d       	add	r20, r0
    6f08:	51 1d       	adc	r21, r1
    6f0a:	11 24       	eor	r1, r1
    6f0c:	5e 87       	std	Y+14, r21	; 0x0e
    6f0e:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    6f10:	e9 88       	ldd	r14, Y+17	; 0x11
    6f12:	fa 88       	ldd	r15, Y+18	; 0x12
    6f14:	0f 85       	ldd	r16, Y+15	; 0x0f
    6f16:	18 89       	ldd	r17, Y+16	; 0x10
    6f18:	4d 85       	ldd	r20, Y+13	; 0x0d
    6f1a:	5e 85       	ldd	r21, Y+14	; 0x0e
    6f1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    6f1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    6f20:	ce 01       	movw	r24, r28
    6f22:	16 dd       	rcall	.-1492   	; 0x6950 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    6f24:	f4 01       	movw	r30, r8
    6f26:	34 96       	adiw	r30, 0x04	; 4
    6f28:	e4 91       	lpm	r30, Z
    6f2a:	2b 89       	ldd	r18, Y+19	; 0x13
    6f2c:	8b 85       	ldd	r24, Y+11	; 0x0b
    6f2e:	9c 85       	ldd	r25, Y+12	; 0x0c
    6f30:	e2 9f       	mul	r30, r18
    6f32:	80 0d       	add	r24, r0
    6f34:	91 1d       	adc	r25, r1
    6f36:	11 24       	eor	r1, r1
    6f38:	8e cf       	rjmp	.-228    	; 0x6e56 <Adafruit_GFX::write(unsigned char)+0xbc>

00006f3a <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    6f3a:	61 11       	cpse	r22, r1
    6f3c:	01 c0       	rjmp	.+2      	; 0x6f40 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    6f3e:	61 e0       	ldi	r22, 0x01	; 1
    6f40:	fc 01       	movw	r30, r24
    6f42:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    6f44:	41 11       	cpse	r20, r1
    6f46:	01 c0       	rjmp	.+2      	; 0x6f4a <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    6f48:	41 e0       	ldi	r20, 0x01	; 1
    6f4a:	fc 01       	movw	r30, r24
    6f4c:	44 8b       	std	Z+20, r20	; 0x14
}
    6f4e:	08 95       	ret

00006f50 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    6f50:	46 2f       	mov	r20, r22
    6f52:	f3 cf       	rjmp	.-26     	; 0x6f3a <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

00006f54 <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    6f54:	ff 92       	push	r15
    6f56:	0f 93       	push	r16
    6f58:	1f 93       	push	r17
    6f5a:	cf 93       	push	r28
    6f5c:	df 93       	push	r29
    6f5e:	ec 01       	movw	r28, r24
    6f60:	f0 2e       	mov	r15, r16
    6f62:	10 e0       	ldi	r17, 0x00	; 0
    6f64:	00 e0       	ldi	r16, 0x00	; 0
    6f66:	20 d0       	rcall	.+64     	; 0x6fa8 <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    6f68:	85 ea       	ldi	r24, 0xA5	; 165
    6f6a:	98 e0       	ldi	r25, 0x08	; 8
    6f6c:	99 83       	std	Y+1, r25	; 0x01
    6f6e:	88 83       	st	Y, r24
    6f70:	fe 01       	movw	r30, r28
    6f72:	e6 5e       	subi	r30, 0xE6	; 230
    6f74:	fe 4f       	sbci	r31, 0xFE	; 254
    6f76:	f0 82       	st	Z, r15
    6f78:	31 96       	adiw	r30, 0x01	; 1
    6f7a:	10 82       	st	Z, r1
    6f7c:	c4 5e       	subi	r28, 0xE4	; 228
    6f7e:	de 4f       	sbci	r29, 0xFE	; 254
    6f80:	18 82       	st	Y, r1
    6f82:	df 91       	pop	r29
    6f84:	cf 91       	pop	r28
    6f86:	1f 91       	pop	r17
    6f88:	0f 91       	pop	r16
    6f8a:	ff 90       	pop	r15
    6f8c:	08 95       	ret

00006f8e <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    6f8e:	8d 5d       	subi	r24, 0xDD	; 221
    6f90:	9e 4f       	sbci	r25, 0xFE	; 254
    6f92:	dc 01       	movw	r26, r24
    6f94:	ed 91       	ld	r30, X+
    6f96:	fc 91       	ld	r31, X
    6f98:	30 97       	sbiw	r30, 0x00	; 0
    6f9a:	09 f0       	breq	.+2      	; 0x6f9e <FastLED_NeoMatrix::show()+0x10>
    6f9c:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    6f9e:	60 91 3d 10 	lds	r22, 0x103D	; 0x80103d <FastLED>
    6fa2:	8d e3       	ldi	r24, 0x3D	; 61
    6fa4:	90 e1       	ldi	r25, 0x10	; 16
    6fa6:	48 c4       	rjmp	.+2192   	; 0x7838 <CFastLED::show(unsigned char)>

00006fa8 <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
}

// Call without a value to reset (disable passthrough)
void Framebuffer_GFX::setPassThruColor(void) {
  passThruFlag = false;
}
    6fa8:	af 92       	push	r10
    6faa:	bf 92       	push	r11
    6fac:	cf 92       	push	r12
    6fae:	df 92       	push	r13
    6fb0:	ef 92       	push	r14
    6fb2:	ff 92       	push	r15
    6fb4:	0f 93       	push	r16
    6fb6:	1f 93       	push	r17
    6fb8:	cf 93       	push	r28
    6fba:	df 93       	push	r29
    6fbc:	ec 01       	movw	r28, r24
    6fbe:	5b 01       	movw	r10, r22
    6fc0:	7a 01       	movw	r14, r20
    6fc2:	69 01       	movw	r12, r18
    6fc4:	a9 01       	movw	r20, r18
    6fc6:	b7 01       	movw	r22, r14
    6fc8:	6d db       	rcall	.-2342   	; 0x66a4 <Adafruit_GFX::Adafruit_GFX(int, int)>
    6fca:	88 e0       	ldi	r24, 0x08	; 8
    6fcc:	99 e0       	ldi	r25, 0x09	; 9
    6fce:	99 83       	std	Y+1, r25	; 0x01
    6fd0:	88 83       	st	Y, r24
    6fd2:	fe 01       	movw	r30, r28
    6fd4:	e3 5e       	subi	r30, 0xE3	; 227
    6fd6:	fe 4f       	sbci	r31, 0xFE	; 254
    6fd8:	f1 82       	std	Z+1, r15	; 0x01
    6fda:	e0 82       	st	Z, r14
    6fdc:	32 96       	adiw	r30, 0x02	; 2
    6fde:	d1 82       	std	Z+1, r13	; 0x01
    6fe0:	c0 82       	st	Z, r12
    6fe2:	32 96       	adiw	r30, 0x02	; 2
    6fe4:	80 e1       	ldi	r24, 0x10	; 16
    6fe6:	97 e2       	ldi	r25, 0x27	; 39
    6fe8:	91 83       	std	Z+1, r25	; 0x01
    6fea:	80 83       	st	Z, r24
    6fec:	36 96       	adiw	r30, 0x06	; 6
    6fee:	11 82       	std	Z+1, r1	; 0x01
    6ff0:	10 82       	st	Z, r1
    6ff2:	3a 96       	adiw	r30, 0x0a	; 10
    6ff4:	10 82       	st	Z, r1
    6ff6:	3c 97       	sbiw	r30, 0x0c	; 12
    6ff8:	b1 82       	std	Z+1, r11	; 0x01
    6ffa:	a0 82       	st	Z, r10
    6ffc:	32 97       	sbiw	r30, 0x02	; 2
    6ffe:	11 83       	std	Z+1, r17	; 0x01
    7000:	00 83       	st	Z, r16
    7002:	39 97       	sbiw	r30, 0x09	; 9
    7004:	10 82       	st	Z, r1
    7006:	31 96       	adiw	r30, 0x01	; 1
    7008:	10 82       	st	Z, r1
    700a:	31 96       	adiw	r30, 0x01	; 1
    700c:	10 82       	st	Z, r1
    700e:	c7 5d       	subi	r28, 0xD7	; 215
    7010:	de 4f       	sbci	r29, 0xFE	; 254
    7012:	ce 9c       	mul	r12, r14
    7014:	c0 01       	movw	r24, r0
    7016:	cf 9c       	mul	r12, r15
    7018:	90 0d       	add	r25, r0
    701a:	de 9c       	mul	r13, r14
    701c:	90 0d       	add	r25, r0
    701e:	11 24       	eor	r1, r1
    7020:	b0 e0       	ldi	r27, 0x00	; 0
    7022:	a0 e0       	ldi	r26, 0x00	; 0
    7024:	88 83       	st	Y, r24
    7026:	99 83       	std	Y+1, r25	; 0x01
    7028:	aa 83       	std	Y+2, r26	; 0x02
    702a:	bb 83       	std	Y+3, r27	; 0x03
    702c:	df 91       	pop	r29
    702e:	cf 91       	pop	r28
    7030:	1f 91       	pop	r17
    7032:	0f 91       	pop	r16
    7034:	ff 90       	pop	r15
    7036:	ef 90       	pop	r14
    7038:	df 90       	pop	r13
    703a:	cf 90       	pop	r12
    703c:	bf 90       	pop	r11
    703e:	af 90       	pop	r10
    7040:	08 95       	ret

00007042 <Framebuffer_GFX::begin()>:
    7042:	cf 93       	push	r28
    7044:	df 93       	push	r29
    7046:	ec 01       	movw	r28, r24
    7048:	6d ec       	ldi	r22, 0xCD	; 205
    704a:	78 e0       	ldi	r23, 0x08	; 8
    704c:	8d ec       	ldi	r24, 0xCD	; 205
    704e:	90 e1       	ldi	r25, 0x10	; 16
    7050:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    7054:	fe 01       	movw	r30, r28
    7056:	e3 5e       	subi	r30, 0xE3	; 227
    7058:	fe 4f       	sbci	r31, 0xFE	; 254
    705a:	40 81       	ld	r20, Z
    705c:	51 81       	ldd	r21, Z+1	; 0x01
    705e:	70 e0       	ldi	r23, 0x00	; 0
    7060:	60 e0       	ldi	r22, 0x00	; 0
    7062:	20 e0       	ldi	r18, 0x00	; 0
    7064:	8d ec       	ldi	r24, 0xCD	; 205
    7066:	90 e1       	ldi	r25, 0x10	; 16
    7068:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <Print::printNumberDec(unsigned long, unsigned char)>
    706c:	6c ee       	ldi	r22, 0xEC	; 236
    706e:	78 e0       	ldi	r23, 0x08	; 8
    7070:	8d ec       	ldi	r24, 0xCD	; 205
    7072:	90 e1       	ldi	r25, 0x10	; 16
    7074:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    7078:	fe 01       	movw	r30, r28
    707a:	e1 5e       	subi	r30, 0xE1	; 225
    707c:	fe 4f       	sbci	r31, 0xFE	; 254
    707e:	40 81       	ld	r20, Z
    7080:	51 81       	ldd	r21, Z+1	; 0x01
    7082:	70 e0       	ldi	r23, 0x00	; 0
    7084:	60 e0       	ldi	r22, 0x00	; 0
    7086:	20 e0       	ldi	r18, 0x00	; 0
    7088:	8d ec       	ldi	r24, 0xCD	; 205
    708a:	90 e1       	ldi	r25, 0x10	; 16
    708c:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <Print::printNumberDec(unsigned long, unsigned char)>
    7090:	66 ef       	ldi	r22, 0xF6	; 246
    7092:	78 e0       	ldi	r23, 0x08	; 8
    7094:	8d ec       	ldi	r24, 0xCD	; 205
    7096:	90 e1       	ldi	r25, 0x10	; 16
    7098:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    709c:	c7 5d       	subi	r28, 0xD7	; 215
    709e:	de 4f       	sbci	r29, 0xFE	; 254
    70a0:	48 81       	ld	r20, Y
    70a2:	59 81       	ldd	r21, Y+1	; 0x01
    70a4:	6a 81       	ldd	r22, Y+2	; 0x02
    70a6:	7b 81       	ldd	r23, Y+3	; 0x03
    70a8:	20 e0       	ldi	r18, 0x00	; 0
    70aa:	8d ec       	ldi	r24, 0xCD	; 205
    70ac:	90 e1       	ldi	r25, 0x10	; 16
    70ae:	0e 94 eb 46 	call	0x8dd6	; 0x8dd6 <Print::printNumberDec(unsigned long, unsigned char)>
    70b2:	8d ec       	ldi	r24, 0xCD	; 205
    70b4:	90 e1       	ldi	r25, 0x10	; 16
    70b6:	df 91       	pop	r29
    70b8:	cf 91       	pop	r28
    70ba:	0c 94 d1 46 	jmp	0x8da2	; 0x8da2 <Print::println()>

000070be <Framebuffer_GFX::expandColor(unsigned int)>:
    70be:	fc 01       	movw	r30, r24
    70c0:	ef 2f       	mov	r30, r31
    70c2:	ff 27       	eor	r31, r31
    70c4:	e6 95       	lsr	r30
    70c6:	e6 95       	lsr	r30
    70c8:	e6 95       	lsr	r30
    70ca:	e8 5e       	subi	r30, 0xE8	; 232
    70cc:	f9 4f       	sbci	r31, 0xF9	; 249
    70ce:	24 91       	lpm	r18, Z
    70d0:	fc 01       	movw	r30, r24
    70d2:	35 e0       	ldi	r19, 0x05	; 5
    70d4:	f6 95       	lsr	r31
    70d6:	e7 95       	ror	r30
    70d8:	3a 95       	dec	r19
    70da:	e1 f7       	brne	.-8      	; 0x70d4 <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    70dc:	ef 73       	andi	r30, 0x3F	; 63
    70de:	ff 27       	eor	r31, r31
    70e0:	e8 52       	subi	r30, 0x28	; 40
    70e2:	fa 4f       	sbci	r31, 0xFA	; 250
    70e4:	64 91       	lpm	r22, Z
    70e6:	8f 71       	andi	r24, 0x1F	; 31
    70e8:	99 27       	eor	r25, r25
    70ea:	fc 01       	movw	r30, r24
    70ec:	e8 5e       	subi	r30, 0xE8	; 232
    70ee:	f9 4f       	sbci	r31, 0xF9	; 249
    70f0:	e4 91       	lpm	r30, Z
    70f2:	70 e0       	ldi	r23, 0x00	; 0
    70f4:	90 e0       	ldi	r25, 0x00	; 0
    70f6:	80 e0       	ldi	r24, 0x00	; 0
    70f8:	98 2f       	mov	r25, r24
    70fa:	87 2f       	mov	r24, r23
    70fc:	76 2f       	mov	r23, r22
    70fe:	66 27       	eor	r22, r22
    7100:	82 2b       	or	r24, r18
    7102:	6e 2b       	or	r22, r30
    7104:	08 95       	ret

00007106 <Framebuffer_GFX::fillScreen(unsigned int)>:
    7106:	8f 92       	push	r8
    7108:	9f 92       	push	r9
    710a:	af 92       	push	r10
    710c:	bf 92       	push	r11
    710e:	cf 92       	push	r12
    7110:	df 92       	push	r13
    7112:	ef 92       	push	r14
    7114:	ff 92       	push	r15
    7116:	cf 93       	push	r28
    7118:	df 93       	push	r29
    711a:	ec 01       	movw	r28, r24
    711c:	cb 01       	movw	r24, r22
    711e:	fe 01       	movw	r30, r28
    7120:	ef 5c       	subi	r30, 0xCF	; 207
    7122:	fe 4f       	sbci	r31, 0xFE	; 254
    7124:	20 81       	ld	r18, Z
    7126:	22 23       	and	r18, r18
    7128:	39 f1       	breq	.+78     	; 0x7178 <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    712a:	34 97       	sbiw	r30, 0x04	; 4
    712c:	60 81       	ld	r22, Z
    712e:	71 81       	ldd	r23, Z+1	; 0x01
    7130:	82 81       	ldd	r24, Z+2	; 0x02
    7132:	30 e0       	ldi	r19, 0x00	; 0
    7134:	20 e0       	ldi	r18, 0x00	; 0
    7136:	c1 2c       	mov	r12, r1
    7138:	d1 2c       	mov	r13, r1
    713a:	76 01       	movw	r14, r12
    713c:	de 01       	movw	r26, r28
    713e:	a7 5d       	subi	r26, 0xD7	; 215
    7140:	be 4f       	sbci	r27, 0xFE	; 254
    7142:	cb 5d       	subi	r28, 0xDB	; 219
    7144:	de 4f       	sbci	r29, 0xFE	; 254
    7146:	8d 90       	ld	r8, X+
    7148:	9d 90       	ld	r9, X+
    714a:	ad 90       	ld	r10, X+
    714c:	bc 90       	ld	r11, X
    714e:	13 97       	sbiw	r26, 0x03	; 3
    7150:	c8 14       	cp	r12, r8
    7152:	d9 04       	cpc	r13, r9
    7154:	ea 04       	cpc	r14, r10
    7156:	fb 04       	cpc	r15, r11
    7158:	88 f4       	brcc	.+34     	; 0x717c <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    715a:	e8 81       	ld	r30, Y
    715c:	f9 81       	ldd	r31, Y+1	; 0x01
    715e:	e2 0f       	add	r30, r18
    7160:	f3 1f       	adc	r31, r19
    7162:	80 83       	st	Z, r24
    7164:	71 83       	std	Z+1, r23	; 0x01
    7166:	62 83       	std	Z+2, r22	; 0x02
    7168:	9f ef       	ldi	r25, 0xFF	; 255
    716a:	c9 1a       	sub	r12, r25
    716c:	d9 0a       	sbc	r13, r25
    716e:	e9 0a       	sbc	r14, r25
    7170:	f9 0a       	sbc	r15, r25
    7172:	2d 5f       	subi	r18, 0xFD	; 253
    7174:	3f 4f       	sbci	r19, 0xFF	; 255
    7176:	e7 cf       	rjmp	.-50     	; 0x7146 <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    7178:	a2 df       	rcall	.-188    	; 0x70be <Framebuffer_GFX::expandColor(unsigned int)>
    717a:	db cf       	rjmp	.-74     	; 0x7132 <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    717c:	df 91       	pop	r29
    717e:	cf 91       	pop	r28
    7180:	ff 90       	pop	r15
    7182:	ef 90       	pop	r14
    7184:	df 90       	pop	r13
    7186:	cf 90       	pop	r12
    7188:	bf 90       	pop	r11
    718a:	af 90       	pop	r10
    718c:	9f 90       	pop	r9
    718e:	8f 90       	pop	r8
    7190:	08 95       	ret

00007192 <Framebuffer_GFX::CRGBtoint32(CRGB)>:
    7192:	0f 93       	push	r16
    7194:	1f 93       	push	r17
    7196:	fc 01       	movw	r30, r24
    7198:	60 81       	ld	r22, Z
    719a:	70 e0       	ldi	r23, 0x00	; 0
    719c:	90 e0       	ldi	r25, 0x00	; 0
    719e:	80 e0       	ldi	r24, 0x00	; 0
    71a0:	cb 01       	movw	r24, r22
    71a2:	77 27       	eor	r23, r23
    71a4:	66 27       	eor	r22, r22
    71a6:	01 81       	ldd	r16, Z+1	; 0x01
    71a8:	10 e0       	ldi	r17, 0x00	; 0
    71aa:	10 2f       	mov	r17, r16
    71ac:	00 27       	eor	r16, r16
    71ae:	01 2e       	mov	r0, r17
    71b0:	00 0c       	add	r0, r0
    71b2:	22 0b       	sbc	r18, r18
    71b4:	33 0b       	sbc	r19, r19
    71b6:	60 0f       	add	r22, r16
    71b8:	71 1f       	adc	r23, r17
    71ba:	82 1f       	adc	r24, r18
    71bc:	93 1f       	adc	r25, r19
    71be:	22 81       	ldd	r18, Z+2	; 0x02
    71c0:	62 0f       	add	r22, r18
    71c2:	71 1d       	adc	r23, r1
    71c4:	81 1d       	adc	r24, r1
    71c6:	91 1d       	adc	r25, r1
    71c8:	1f 91       	pop	r17
    71ca:	0f 91       	pop	r16
    71cc:	08 95       	ret

000071ce <Framebuffer_GFX::XY(int, int)>:

int Framebuffer_GFX::XY(int16_t x, int16_t y) {
    71ce:	6f 92       	push	r6
    71d0:	7f 92       	push	r7
    71d2:	9f 92       	push	r9
    71d4:	af 92       	push	r10
    71d6:	bf 92       	push	r11
    71d8:	cf 92       	push	r12
    71da:	df 92       	push	r13
    71dc:	ef 92       	push	r14
    71de:	ff 92       	push	r15
    71e0:	0f 93       	push	r16
    71e2:	1f 93       	push	r17
    71e4:	cf 93       	push	r28
    71e6:	df 93       	push	r29
    71e8:	ec 01       	movw	r28, r24
    71ea:	cb 01       	movw	r24, r22
    71ec:	8a 01       	movw	r16, r20
  // If you send an out of bounds value, you get an special result 
  // pointing to the last pixel. It doesn't look great, but better
  // than crashing. Still, fix the upstream code.
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;
    71ee:	77 fd       	sbrc	r23, 7
    71f0:	0c c0       	rjmp	.+24     	; 0x720a <Framebuffer_GFX::XY(int, int)+0x3c>
    71f2:	57 fd       	sbrc	r21, 7
    71f4:	0a c0       	rjmp	.+20     	; 0x720a <Framebuffer_GFX::XY(int, int)+0x3c>
    71f6:	2f 81       	ldd	r18, Y+7	; 0x07
    71f8:	38 85       	ldd	r19, Y+8	; 0x08
    71fa:	62 17       	cp	r22, r18
    71fc:	73 07       	cpc	r23, r19
    71fe:	2c f4       	brge	.+10     	; 0x720a <Framebuffer_GFX::XY(int, int)+0x3c>
    7200:	29 85       	ldd	r18, Y+9	; 0x09
    7202:	3a 85       	ldd	r19, Y+10	; 0x0a
    7204:	42 17       	cp	r20, r18
    7206:	53 07       	cpc	r21, r19
    7208:	9c f0       	brlt	.+38     	; 0x7230 <Framebuffer_GFX::XY(int, int)+0x62>
    720a:	c7 5d       	subi	r28, 0xD7	; 215
    720c:	de 4f       	sbci	r29, 0xFE	; 254
    720e:	88 81       	ld	r24, Y
    7210:	99 81       	ldd	r25, Y+1	; 0x01
    7212:	01 97       	sbiw	r24, 0x01	; 1
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}
    7214:	df 91       	pop	r29
    7216:	cf 91       	pop	r28
    7218:	1f 91       	pop	r17
    721a:	0f 91       	pop	r16
    721c:	ff 90       	pop	r15
    721e:	ef 90       	pop	r14
    7220:	df 90       	pop	r13
    7222:	cf 90       	pop	r12
    7224:	bf 90       	pop	r11
    7226:	af 90       	pop	r10
    7228:	9f 90       	pop	r9
    722a:	7f 90       	pop	r7
    722c:	6f 90       	pop	r6
    722e:	08 95       	ret
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;

  int16_t t;
  switch(rotation) {
    7230:	2d 89       	ldd	r18, Y+21	; 0x15
    7232:	22 30       	cpi	r18, 0x02	; 2
    7234:	d9 f0       	breq	.+54     	; 0x726c <Framebuffer_GFX::XY(int, int)+0x9e>
    7236:	23 30       	cpi	r18, 0x03	; 3
    7238:	51 f1       	breq	.+84     	; 0x728e <Framebuffer_GFX::XY(int, int)+0xc0>
    723a:	21 30       	cpi	r18, 0x01	; 1
    723c:	41 f4       	brne	.+16     	; 0x724e <Framebuffer_GFX::XY(int, int)+0x80>
   case 1:
    t = x;
    x = WIDTH  - 1 - y;
    723e:	2b 81       	ldd	r18, Y+3	; 0x03
    7240:	3c 81       	ldd	r19, Y+4	; 0x04
    7242:	21 50       	subi	r18, 0x01	; 1
    7244:	31 09       	sbc	r19, r1
    7246:	24 1b       	sub	r18, r20
    7248:	35 0b       	sbc	r19, r21
    724a:	8b 01       	movw	r16, r22
    724c:	c9 01       	movw	r24, r18
    break;
  }

  int tileOffset = 0, pixelOffset;

  if(remapFn) { // Custom X/Y remapping function
    724e:	fe 01       	movw	r30, r28
    7250:	e9 5d       	subi	r30, 0xD9	; 217
    7252:	fe 4f       	sbci	r31, 0xFE	; 254
    7254:	01 90       	ld	r0, Z+
    7256:	f0 81       	ld	r31, Z
    7258:	e0 2d       	mov	r30, r0
    725a:	30 97       	sbiw	r30, 0x00	; 0
    725c:	09 f1       	breq	.+66     	; 0x72a0 <Framebuffer_GFX::XY(int, int)+0xd2>
    pixelOffset = (*remapFn)(x, y);
    725e:	b8 01       	movw	r22, r16
    7260:	09 95       	icall
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    7262:	50 e0       	ldi	r21, 0x00	; 0
    7264:	40 e0       	ldi	r20, 0x00	; 0
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
    7266:	84 0f       	add	r24, r20
    7268:	95 1f       	adc	r25, r21
    726a:	d4 cf       	rjmp	.-88     	; 0x7214 <Framebuffer_GFX::XY(int, int)+0x46>
    t = x;
    x = WIDTH  - 1 - y;
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
    726c:	2b 81       	ldd	r18, Y+3	; 0x03
    726e:	3c 81       	ldd	r19, Y+4	; 0x04
    7270:	21 50       	subi	r18, 0x01	; 1
    7272:	31 09       	sbc	r19, r1
    7274:	a9 01       	movw	r20, r18
    7276:	46 1b       	sub	r20, r22
    7278:	57 0b       	sbc	r21, r23
    727a:	ca 01       	movw	r24, r20
    y = HEIGHT - 1 - y;
    727c:	2d 81       	ldd	r18, Y+5	; 0x05
    727e:	3e 81       	ldd	r19, Y+6	; 0x06
    7280:	21 50       	subi	r18, 0x01	; 1
    7282:	31 09       	sbc	r19, r1
    7284:	f9 01       	movw	r30, r18
    7286:	e0 1b       	sub	r30, r16
    7288:	f1 0b       	sbc	r31, r17
    728a:	8f 01       	movw	r16, r30
    728c:	e0 cf       	rjmp	.-64     	; 0x724e <Framebuffer_GFX::XY(int, int)+0x80>
    break;
   case 3:
    t = x;
    x = y;
    y = HEIGHT - 1 - t;
    728e:	2d 81       	ldd	r18, Y+5	; 0x05
    7290:	3e 81       	ldd	r19, Y+6	; 0x06
    7292:	21 50       	subi	r18, 0x01	; 1
    7294:	31 09       	sbc	r19, r1
    7296:	26 1b       	sub	r18, r22
    7298:	37 0b       	sbc	r19, r23
    729a:	ca 01       	movw	r24, r20
    729c:	89 01       	movw	r16, r18
    729e:	d7 cf       	rjmp	.-82     	; 0x724e <Framebuffer_GFX::XY(int, int)+0x80>

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    72a0:	fe 01       	movw	r30, r28
    72a2:	e6 5e       	subi	r30, 0xE6	; 230
    72a4:	fe 4f       	sbci	r31, 0xFE	; 254
    72a6:	d0 80       	ld	r13, Z
    72a8:	fd 2d       	mov	r31, r13
    72aa:	f3 70       	andi	r31, 0x03	; 3
    72ac:	cf 2e       	mov	r12, r31
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    72ae:	fe 01       	movw	r30, r28
    72b0:	e5 5e       	subi	r30, 0xE5	; 229
    72b2:	fe 4f       	sbci	r31, 0xFE	; 254
    72b4:	b0 80       	ld	r11, Z
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    72b6:	50 e0       	ldi	r21, 0x00	; 0
    72b8:	40 e0       	ldi	r20, 0x00	; 0
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    72ba:	bb 20       	and	r11, r11
    72bc:	09 f4       	brne	.+2      	; 0x72c0 <Framebuffer_GFX::XY(int, int)+0xf2>
    72be:	64 c0       	rjmp	.+200    	; 0x7388 <Framebuffer_GFX::XY(int, int)+0x1ba>
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
    72c0:	32 96       	adiw	r30, 0x02	; 2
    72c2:	e0 80       	ld	r14, Z
    72c4:	f1 80       	ldd	r15, Z+1	; 0x01
    72c6:	b7 01       	movw	r22, r14
    72c8:	0e 94 bd 4b 	call	0x977a	; 0x977a <__udivmodhi4>
    72cc:	9b 01       	movw	r18, r22
    72ce:	98 2e       	mov	r9, r24
    72d0:	a9 2e       	mov	r10, r25
      major = y / matrixHeight,           // start (will swap later if needed)
    72d2:	32 96       	adiw	r30, 0x02	; 2
    72d4:	60 80       	ld	r6, Z
    72d6:	71 80       	ldd	r7, Z+1	; 0x01
    72d8:	c8 01       	movw	r24, r16
    72da:	b3 01       	movw	r22, r6
    72dc:	0e 94 bd 4b 	call	0x977a	; 0x977a <__udivmodhi4>
    72e0:	db 01       	movw	r26, r22
    72e2:	58 2f       	mov	r21, r24
    72e4:	49 2f       	mov	r20, r25
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
    72e6:	89 2d       	mov	r24, r9
    72e8:	9a 2d       	mov	r25, r10
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
    72ea:	05 2f       	mov	r16, r21
    72ec:	14 2f       	mov	r17, r20

      // Determine corner of entry, flip axes if needed
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
    72ee:	d5 fe       	sbrs	r13, 5
    72f0:	06 c0       	rjmp	.+12     	; 0x72fe <Framebuffer_GFX::XY(int, int)+0x130>
    72f2:	4b 2d       	mov	r20, r11
    72f4:	41 50       	subi	r20, 0x01	; 1
    72f6:	55 0b       	sbc	r21, r21
    72f8:	42 1b       	sub	r20, r18
    72fa:	53 0b       	sbc	r21, r19
    72fc:	9a 01       	movw	r18, r20
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
    72fe:	d4 fe       	sbrs	r13, 4
    7300:	09 c0       	rjmp	.+18     	; 0x7314 <Framebuffer_GFX::XY(int, int)+0x146>
    7302:	ae 01       	movw	r20, r28
    7304:	44 5e       	subi	r20, 0xE4	; 228
    7306:	5e 4f       	sbci	r21, 0xFE	; 254
    7308:	fa 01       	movw	r30, r20
    730a:	60 81       	ld	r22, Z
    730c:	61 50       	subi	r22, 0x01	; 1
    730e:	77 0b       	sbc	r23, r23
    7310:	6a 1b       	sub	r22, r26
    7312:	7b 0b       	sbc	r23, r27

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
    7314:	d6 fc       	sbrc	r13, 6
    7316:	11 c0       	rjmp	.+34     	; 0x733a <Framebuffer_GFX::XY(int, int)+0x16c>
        majorScale = tilesX;
    7318:	4b 2d       	mov	r20, r11
    731a:	50 e0       	ldi	r21, 0x00	; 0
    731c:	b6 2f       	mov	r27, r22
    731e:	a7 2f       	mov	r26, r23
    7320:	b9 01       	movw	r22, r18
    7322:	2b 2f       	mov	r18, r27
    7324:	3a 2f       	mov	r19, r26
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
    7326:	d7 fc       	sbrc	r13, 7
    7328:	0e c0       	rjmp	.+28     	; 0x7346 <Framebuffer_GFX::XY(int, int)+0x178>
        // pixel math later.
        if(major & 1) {
          corner ^= NEO_MATRIX_CORNER;
          tile = (major + 1) * majorScale - 1 - minor;
        } else {
          tile =  major      * majorScale     + minor;
    732a:	24 9f       	mul	r18, r20
    732c:	d0 01       	movw	r26, r0
    732e:	25 9f       	mul	r18, r21
    7330:	b0 0d       	add	r27, r0
    7332:	34 9f       	mul	r19, r20
    7334:	b0 0d       	add	r27, r0
    7336:	11 24       	eor	r1, r1
    7338:	17 c0       	rjmp	.+46     	; 0x7368 <Framebuffer_GFX::XY(int, int)+0x19a>
      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
        majorScale = tilesX;
      } else {
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
    733a:	de 01       	movw	r26, r28
    733c:	a4 5e       	subi	r26, 0xE4	; 228
    733e:	be 4f       	sbci	r27, 0xFE	; 254
    7340:	4c 91       	ld	r20, X
    7342:	50 e0       	ldi	r21, 0x00	; 0
    7344:	f0 cf       	rjmp	.-32     	; 0x7326 <Framebuffer_GFX::XY(int, int)+0x158>
        tile = major * majorScale + minor;
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
    7346:	20 ff       	sbrs	r18, 0
    7348:	f0 cf       	rjmp	.-32     	; 0x732a <Framebuffer_GFX::XY(int, int)+0x15c>
          corner ^= NEO_MATRIX_CORNER;
    734a:	ad 2d       	mov	r26, r13
    734c:	a0 95       	com	r26
    734e:	a3 70       	andi	r26, 0x03	; 3
    7350:	ca 2e       	mov	r12, r26
          tile = (major + 1) * majorScale - 1 - minor;
    7352:	2f 5f       	subi	r18, 0xFF	; 255
    7354:	3f 4f       	sbci	r19, 0xFF	; 255
    7356:	24 9f       	mul	r18, r20
    7358:	d0 01       	movw	r26, r0
    735a:	25 9f       	mul	r18, r21
    735c:	b0 0d       	add	r27, r0
    735e:	34 9f       	mul	r19, r20
    7360:	b0 0d       	add	r27, r0
    7362:	11 24       	eor	r1, r1
    7364:	60 95       	com	r22
    7366:	70 95       	com	r23
        } else {
          tile =  major      * majorScale     + minor;
    7368:	6a 0f       	add	r22, r26
    736a:	7b 1f       	adc	r23, r27
        }
      }

      // Index of first pixel in tile
      tileOffset = tile * matrixWidth * matrixHeight;
    736c:	e6 9c       	mul	r14, r6
    736e:	90 01       	movw	r18, r0
    7370:	e7 9c       	mul	r14, r7
    7372:	30 0d       	add	r19, r0
    7374:	f6 9c       	mul	r15, r6
    7376:	30 0d       	add	r19, r0
    7378:	11 24       	eor	r1, r1
    737a:	26 9f       	mul	r18, r22
    737c:	a0 01       	movw	r20, r0
    737e:	27 9f       	mul	r18, r23
    7380:	50 0d       	add	r21, r0
    7382:	36 9f       	mul	r19, r22
    7384:	50 0d       	add	r21, r0
    7386:	11 24       	eor	r1, r1

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;
    7388:	98 01       	movw	r18, r16

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    738a:	6c 2d       	mov	r22, r12
    738c:	62 70       	andi	r22, 0x02	; 2
    738e:	59 f0       	breq	.+22     	; 0x73a6 <Framebuffer_GFX::XY(int, int)+0x1d8>
    7390:	fe 01       	movw	r30, r28
    7392:	e3 5e       	subi	r30, 0xE3	; 227
    7394:	fe 4f       	sbci	r31, 0xFE	; 254
    7396:	60 81       	ld	r22, Z
    7398:	71 81       	ldd	r23, Z+1	; 0x01
    739a:	61 50       	subi	r22, 0x01	; 1
    739c:	71 09       	sbc	r23, r1
    739e:	fb 01       	movw	r30, r22
    73a0:	e8 1b       	sub	r30, r24
    73a2:	f9 0b       	sbc	r31, r25
    73a4:	cf 01       	movw	r24, r30
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
    73a6:	c0 fe       	sbrs	r12, 0
    73a8:	09 c0       	rjmp	.+18     	; 0x73bc <Framebuffer_GFX::XY(int, int)+0x1ee>
    73aa:	fe 01       	movw	r30, r28
    73ac:	e1 5e       	subi	r30, 0xE1	; 225
    73ae:	fe 4f       	sbci	r31, 0xFE	; 254
    73b0:	20 81       	ld	r18, Z
    73b2:	31 81       	ldd	r19, Z+1	; 0x01
    73b4:	21 50       	subi	r18, 0x01	; 1
    73b6:	31 09       	sbc	r19, r1
    73b8:	20 1b       	sub	r18, r16
    73ba:	31 0b       	sbc	r19, r17

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
    73bc:	d2 fc       	sbrc	r13, 2
    73be:	13 c0       	rjmp	.+38     	; 0x73e6 <Framebuffer_GFX::XY(int, int)+0x218>
      majorScale = matrixWidth;
    73c0:	c3 5e       	subi	r28, 0xE3	; 227
    73c2:	de 4f       	sbci	r29, 0xFE	; 254
    73c4:	68 81       	ld	r22, Y
    73c6:	79 81       	ldd	r23, Y+1	; 0x01
    73c8:	f2 2f       	mov	r31, r18
    73ca:	e3 2f       	mov	r30, r19
    73cc:	9c 01       	movw	r18, r24
    73ce:	8f 2f       	mov	r24, r31
    73d0:	9e 2f       	mov	r25, r30
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    }

    // Determine pixel number within tile/matrix
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
    73d2:	d3 fc       	sbrc	r13, 3
    73d4:	0d c0       	rjmp	.+26     	; 0x73f0 <Framebuffer_GFX::XY(int, int)+0x222>
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
      else          pixelOffset =  major      * majorScale     + minor;
    73d6:	86 9f       	mul	r24, r22
    73d8:	f0 01       	movw	r30, r0
    73da:	87 9f       	mul	r24, r23
    73dc:	f0 0d       	add	r31, r0
    73de:	96 9f       	mul	r25, r22
    73e0:	f0 0d       	add	r31, r0
    73e2:	11 24       	eor	r1, r1
    73e4:	11 c0       	rjmp	.+34     	; 0x7408 <Framebuffer_GFX::XY(int, int)+0x23a>
    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
      majorScale = matrixWidth;
    } else {
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    73e6:	c1 5e       	subi	r28, 0xE1	; 225
    73e8:	de 4f       	sbci	r29, 0xFE	; 254
    73ea:	68 81       	ld	r22, Y
    73ec:	79 81       	ldd	r23, Y+1	; 0x01
    73ee:	f1 cf       	rjmp	.-30     	; 0x73d2 <Framebuffer_GFX::XY(int, int)+0x204>
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
    73f0:	80 ff       	sbrs	r24, 0
    73f2:	f1 cf       	rjmp	.-30     	; 0x73d6 <Framebuffer_GFX::XY(int, int)+0x208>
    73f4:	01 96       	adiw	r24, 0x01	; 1
    73f6:	86 9f       	mul	r24, r22
    73f8:	f0 01       	movw	r30, r0
    73fa:	87 9f       	mul	r24, r23
    73fc:	f0 0d       	add	r31, r0
    73fe:	96 9f       	mul	r25, r22
    7400:	f0 0d       	add	r31, r0
    7402:	11 24       	eor	r1, r1
    7404:	20 95       	com	r18
    7406:	30 95       	com	r19
      else          pixelOffset =  major      * majorScale     + minor;
    7408:	cf 01       	movw	r24, r30
    740a:	82 0f       	add	r24, r18
    740c:	93 1f       	adc	r25, r19
    740e:	2b cf       	rjmp	.-426    	; 0x7266 <Framebuffer_GFX::XY(int, int)+0x98>

00007410 <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {
    7410:	9f 92       	push	r9
    7412:	af 92       	push	r10
    7414:	bf 92       	push	r11
    7416:	cf 92       	push	r12
    7418:	df 92       	push	r13
    741a:	ef 92       	push	r14
    741c:	ff 92       	push	r15
    741e:	0f 93       	push	r16
    7420:	1f 93       	push	r17
    7422:	cf 93       	push	r28
    7424:	df 93       	push	r29
    7426:	ec 01       	movw	r28, r24

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    7428:	77 fd       	sbrc	r23, 7
    742a:	2b c0       	rjmp	.+86     	; 0x7482 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    742c:	57 fd       	sbrc	r21, 7
    742e:	29 c0       	rjmp	.+82     	; 0x7482 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    7430:	8f 81       	ldd	r24, Y+7	; 0x07
    7432:	98 85       	ldd	r25, Y+8	; 0x08
    7434:	68 17       	cp	r22, r24
    7436:	79 07       	cpc	r23, r25
    7438:	24 f5       	brge	.+72     	; 0x7482 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    743a:	89 85       	ldd	r24, Y+9	; 0x09
    743c:	9a 85       	ldd	r25, Y+10	; 0x0a
    743e:	48 17       	cp	r20, r24
    7440:	59 07       	cpc	r21, r25
    7442:	fc f4       	brge	.+62     	; 0x7482 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    7444:	6a 01       	movw	r12, r20
    7446:	7b 01       	movw	r14, r22

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    7448:	fe 01       	movw	r30, r28
    744a:	ef 5c       	subi	r30, 0xCF	; 207
    744c:	fe 4f       	sbci	r31, 0xFE	; 254
    744e:	80 81       	ld	r24, Z
    7450:	88 23       	and	r24, r24
    7452:	19 f1       	breq	.+70     	; 0x749a <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    7454:	34 97       	sbiw	r30, 0x04	; 4
    7456:	b0 80       	ld	r11, Z
    7458:	a1 80       	ldd	r10, Z+1	; 0x01
    745a:	92 80       	ldd	r9, Z+2	; 0x02
    745c:	fe 01       	movw	r30, r28
    745e:	eb 5d       	subi	r30, 0xDB	; 219
    7460:	fe 4f       	sbci	r31, 0xFE	; 254
    7462:	00 81       	ld	r16, Z
    7464:	11 81       	ldd	r17, Z+1	; 0x01
    7466:	a6 01       	movw	r20, r12
    7468:	b7 01       	movw	r22, r14
    746a:	ce 01       	movw	r24, r28
    746c:	b0 de       	rcall	.-672    	; 0x71ce <Framebuffer_GFX::XY(int, int)>
    746e:	fc 01       	movw	r30, r24
    7470:	ee 0f       	add	r30, r30
    7472:	ff 1f       	adc	r31, r31
    7474:	e8 0f       	add	r30, r24
    7476:	f9 1f       	adc	r31, r25
    7478:	e0 0f       	add	r30, r16
    747a:	f1 1f       	adc	r31, r17
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    747c:	90 82       	st	Z, r9
        g = (colorcode >>  8) & 0xFF;
    747e:	a1 82       	std	Z+1, r10	; 0x01
        b = (colorcode >>  0) & 0xFF;
    7480:	b2 82       	std	Z+2, r11	; 0x02
}
    7482:	df 91       	pop	r29
    7484:	cf 91       	pop	r28
    7486:	1f 91       	pop	r17
    7488:	0f 91       	pop	r16
    748a:	ff 90       	pop	r15
    748c:	ef 90       	pop	r14
    748e:	df 90       	pop	r13
    7490:	cf 90       	pop	r12
    7492:	bf 90       	pop	r11
    7494:	af 90       	pop	r10
    7496:	9f 90       	pop	r9
    7498:	08 95       	ret

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    749a:	c9 01       	movw	r24, r18
    749c:	10 de       	rcall	.-992    	; 0x70be <Framebuffer_GFX::expandColor(unsigned int)>
    749e:	b6 2e       	mov	r11, r22
    74a0:	a7 2e       	mov	r10, r23
    74a2:	98 2e       	mov	r9, r24
    74a4:	db cf       	rjmp	.-74     	; 0x745c <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

000074a6 <Framebuffer_GFX::drawPixel(int, int, unsigned long)>:
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint32_t color) {
    74a6:	ff 92       	push	r15
    74a8:	0f 93       	push	r16
    74aa:	1f 93       	push	r17
    74ac:	cf 93       	push	r28
    74ae:	df 93       	push	r29
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    74b0:	77 fd       	sbrc	r23, 7
    74b2:	21 c0       	rjmp	.+66     	; 0x74f6 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    74b4:	57 fd       	sbrc	r21, 7
    74b6:	1f c0       	rjmp	.+62     	; 0x74f6 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    74b8:	dc 01       	movw	r26, r24
    74ba:	17 96       	adiw	r26, 0x07	; 7
    74bc:	ed 91       	ld	r30, X+
    74be:	fc 91       	ld	r31, X
    74c0:	18 97       	sbiw	r26, 0x08	; 8
    74c2:	6e 17       	cp	r22, r30
    74c4:	7f 07       	cpc	r23, r31
    74c6:	bc f4       	brge	.+46     	; 0x74f6 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    74c8:	19 96       	adiw	r26, 0x09	; 9
    74ca:	ed 91       	ld	r30, X+
    74cc:	fc 91       	ld	r31, X
    74ce:	4e 17       	cp	r20, r30
    74d0:	5f 07       	cpc	r21, r31
    74d2:	8c f4       	brge	.+34     	; 0x74f6 <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    74d4:	f2 2e       	mov	r15, r18
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif

  _fb[XY(x,y)] = color;
    74d6:	fc 01       	movw	r30, r24
    74d8:	eb 5d       	subi	r30, 0xDB	; 219
    74da:	fe 4f       	sbci	r31, 0xFE	; 254
    74dc:	c0 81       	ld	r28, Z
    74de:	d1 81       	ldd	r29, Z+1	; 0x01
    74e0:	76 de       	rcall	.-788    	; 0x71ce <Framebuffer_GFX::XY(int, int)>
    74e2:	fc 01       	movw	r30, r24
    74e4:	ee 0f       	add	r30, r30
    74e6:	ff 1f       	adc	r31, r31
    74e8:	e8 0f       	add	r30, r24
    74ea:	f9 1f       	adc	r31, r25
    74ec:	ec 0f       	add	r30, r28
    74ee:	fd 1f       	adc	r31, r29
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    74f0:	f0 82       	st	Z, r15
        g = (colorcode >>  8) & 0xFF;
    74f2:	11 83       	std	Z+1, r17	; 0x01
        b = (colorcode >>  0) & 0xFF;
    74f4:	02 83       	std	Z+2, r16	; 0x02
}
    74f6:	df 91       	pop	r29
    74f8:	cf 91       	pop	r28
    74fa:	1f 91       	pop	r17
    74fc:	0f 91       	pop	r16
    74fe:	ff 90       	pop	r15
    7500:	08 95       	ret

00007502 <Framebuffer_GFX::drawPixel(int, int, CRGB)>:

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
    7502:	af 92       	push	r10
    7504:	bf 92       	push	r11
    7506:	cf 92       	push	r12
    7508:	df 92       	push	r13
    750a:	ef 92       	push	r14
    750c:	ff 92       	push	r15
    750e:	0f 93       	push	r16
    7510:	1f 93       	push	r17
    7512:	cf 93       	push	r28
    7514:	df 93       	push	r29
    7516:	00 d0       	rcall	.+0      	; 0x7518 <Framebuffer_GFX::drawPixel(int, int, CRGB)+0x16>
    7518:	1f 92       	push	r1
    751a:	cd b7       	in	r28, 0x3d	; 61
    751c:	de b7       	in	r29, 0x3e	; 62
    751e:	7c 01       	movw	r14, r24
    7520:	6b 01       	movw	r12, r22
    7522:	5a 01       	movw	r10, r20
    7524:	f9 01       	movw	r30, r18
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    7526:	80 81       	ld	r24, Z
    7528:	89 83       	std	Y+1, r24	; 0x01
        g = rhs.g;
    752a:	81 81       	ldd	r24, Z+1	; 0x01
    752c:	8a 83       	std	Y+2, r24	; 0x02
        b = rhs.b;
    752e:	82 81       	ldd	r24, Z+2	; 0x02
    7530:	8b 83       	std	Y+3, r24	; 0x03
  drawPixel(x, y, CRGBtoint32(c));
    7532:	ce 01       	movw	r24, r28
    7534:	01 96       	adiw	r24, 0x01	; 1
    7536:	2d de       	rcall	.-934    	; 0x7192 <Framebuffer_GFX::CRGBtoint32(CRGB)>
    7538:	8b 01       	movw	r16, r22
    753a:	9c 01       	movw	r18, r24
    753c:	a5 01       	movw	r20, r10
    753e:	b6 01       	movw	r22, r12
    7540:	c7 01       	movw	r24, r14
    7542:	b1 df       	rcall	.-158    	; 0x74a6 <Framebuffer_GFX::drawPixel(int, int, unsigned long)>
}
    7544:	0f 90       	pop	r0
    7546:	0f 90       	pop	r0
    7548:	0f 90       	pop	r0
    754a:	df 91       	pop	r29
    754c:	cf 91       	pop	r28
    754e:	1f 91       	pop	r17
    7550:	0f 91       	pop	r16
    7552:	ff 90       	pop	r15
    7554:	ef 90       	pop	r14
    7556:	df 90       	pop	r13
    7558:	cf 90       	pop	r12
    755a:	bf 90       	pop	r11
    755c:	af 90       	pop	r10
    755e:	08 95       	ret

00007560 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    7560:	89 5d       	subi	r24, 0xD9	; 217
    7562:	9e 4f       	sbci	r25, 0xFE	; 254
    7564:	fc 01       	movw	r30, r24
    7566:	71 83       	std	Z+1, r23	; 0x01
    7568:	60 83       	st	Z, r22
}
    756a:	08 95       	ret

0000756c <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    756c:	da 01       	movw	r26, r20
    756e:	fc 01       	movw	r30, r24
    7570:	90 e0       	ldi	r25, 0x00	; 0
    7572:	80 e0       	ldi	r24, 0x00	; 0
    7574:	86 17       	cp	r24, r22
    7576:	97 07       	cpc	r25, r23
    7578:	6c f4       	brge	.+26     	; 0x7594 <fill_solid(CRGB*, int, CRGB const&)+0x28>
    757a:	2c 91       	ld	r18, X
    757c:	20 83       	st	Z, r18
    757e:	11 96       	adiw	r26, 0x01	; 1
    7580:	2c 91       	ld	r18, X
    7582:	11 97       	sbiw	r26, 0x01	; 1
    7584:	21 83       	std	Z+1, r18	; 0x01
    7586:	12 96       	adiw	r26, 0x02	; 2
    7588:	2c 91       	ld	r18, X
    758a:	12 97       	sbiw	r26, 0x02	; 2
    758c:	22 83       	std	Z+2, r18	; 0x02
    758e:	01 96       	adiw	r24, 0x01	; 1
    7590:	33 96       	adiw	r30, 0x03	; 3
    7592:	f0 cf       	rjmp	.-32     	; 0x7574 <fill_solid(CRGB*, int, CRGB const&)+0x8>
    7594:	08 95       	ret

00007596 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    7596:	0f 93       	push	r16
    7598:	1f 93       	push	r17
    759a:	cf 93       	push	r28
    759c:	df 93       	push	r29
    759e:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    75a0:	84 2f       	mov	r24, r20
    75a2:	82 95       	swap	r24
    75a4:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    75a6:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    75a8:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    75aa:	a8 2f       	mov	r26, r24
    75ac:	aa 0f       	add	r26, r26
    75ae:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    75b0:	a6 0f       	add	r26, r22
    75b2:	b7 2f       	mov	r27, r23
    75b4:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    75b6:	44 23       	and	r20, r20
    75b8:	19 f0       	breq	.+6      	; 0x75c0 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    75ba:	31 e0       	ldi	r19, 0x01	; 1
    75bc:	01 2b       	or	r16, r17
    75be:	09 f4       	brne	.+2      	; 0x75c2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    75c0:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    75c2:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    75c4:	11 96       	adiw	r26, 0x01	; 1
    75c6:	5c 91       	ld	r21, X
    75c8:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    75ca:	12 96       	adiw	r26, 0x02	; 2
    75cc:	9c 91       	ld	r25, X
    75ce:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    75d0:	33 23       	and	r19, r19
    75d2:	09 f4       	brne	.+2      	; 0x75d6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    75d4:	2a c0       	rjmp	.+84     	; 0x762a <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    75d6:	8f 30       	cpi	r24, 0x0F	; 15
    75d8:	11 f0       	breq	.+4      	; 0x75de <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    75da:	ed 01       	movw	r28, r26
    75dc:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    75de:	42 95       	swap	r20
    75e0:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    75e2:	74 2f       	mov	r23, r20
    75e4:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    75e6:	67 9f       	mul	r22, r23
    75e8:	06 0e       	add	r0, r22
    75ea:	60 e0       	ldi	r22, 0x00	; 0
    75ec:	61 1d       	adc	r22, r1
    75ee:	38 81       	ld	r19, Y
    75f0:	34 9f       	mul	r19, r20
    75f2:	03 0e       	add	r0, r19
    75f4:	30 e0       	ldi	r19, 0x00	; 0
    75f6:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    75f8:	63 0f       	add	r22, r19
    75fa:	57 9f       	mul	r21, r23
    75fc:	05 0e       	add	r0, r21
    75fe:	50 e0       	ldi	r21, 0x00	; 0
    7600:	51 1d       	adc	r21, r1
    7602:	39 81       	ldd	r19, Y+1	; 0x01
    7604:	34 9f       	mul	r19, r20
    7606:	03 0e       	add	r0, r19
    7608:	30 e0       	ldi	r19, 0x00	; 0
    760a:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    760c:	53 0f       	add	r21, r19
    760e:	39 2f       	mov	r19, r25
    7610:	37 9f       	mul	r19, r23
    7612:	03 0e       	add	r0, r19
    7614:	30 e0       	ldi	r19, 0x00	; 0
    7616:	31 1d       	adc	r19, r1
    7618:	9a 81       	ldd	r25, Y+2	; 0x02
    761a:	79 2f       	mov	r23, r25
    761c:	74 9f       	mul	r23, r20
    761e:	07 0e       	add	r0, r23
    7620:	70 e0       	ldi	r23, 0x00	; 0
    7622:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    7624:	93 2f       	mov	r25, r19
    7626:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    7628:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    762a:	2f 3f       	cpi	r18, 0xFF	; 255
    762c:	c1 f0       	breq	.+48     	; 0x765e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    762e:	22 23       	and	r18, r18
    7630:	f9 f0       	breq	.+62     	; 0x7670 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    7632:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    7634:	66 23       	and	r22, r22
    7636:	21 f0       	breq	.+8      	; 0x7640 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7638:	62 9f       	mul	r22, r18
    763a:	06 0e       	add	r0, r22
    763c:	60 e0       	ldi	r22, 0x00	; 0
    763e:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    7640:	55 23       	and	r21, r21
    7642:	21 f0       	breq	.+8      	; 0x764c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    7644:	52 9f       	mul	r21, r18
    7646:	05 0e       	add	r0, r21
    7648:	50 e0       	ldi	r21, 0x00	; 0
    764a:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    764c:	99 23       	and	r25, r25
    764e:	31 f0       	breq	.+12     	; 0x765c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    7650:	39 2f       	mov	r19, r25
    7652:	32 9f       	mul	r19, r18
    7654:	03 0e       	add	r0, r19
    7656:	30 e0       	ldi	r19, 0x00	; 0
    7658:	31 1d       	adc	r19, r1
    765a:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    765c:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    765e:	60 83       	st	Z, r22
    7660:	51 83       	std	Z+1, r21	; 0x01
    7662:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    7664:	cf 01       	movw	r24, r30
    7666:	df 91       	pop	r29
    7668:	cf 91       	pop	r28
    766a:	1f 91       	pop	r17
    766c:	0f 91       	pop	r16
    766e:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    7670:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    7672:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    7674:	60 e0       	ldi	r22, 0x00	; 0
    7676:	f3 cf       	rjmp	.-26     	; 0x765e <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

00007678 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    7678:	7f 92       	push	r7
    767a:	8f 92       	push	r8
    767c:	9f 92       	push	r9
    767e:	af 92       	push	r10
    7680:	bf 92       	push	r11
    7682:	cf 92       	push	r12
    7684:	df 92       	push	r13
    7686:	ef 92       	push	r14
    7688:	ff 92       	push	r15
    768a:	0f 93       	push	r16
    768c:	1f 93       	push	r17
    768e:	cf 93       	push	r28
    7690:	df 93       	push	r29
    7692:	fc 01       	movw	r30, r24
    7694:	69 01       	movw	r12, r18
    7696:	10 82       	st	Z, r1
    7698:	11 82       	std	Z+1, r1	; 0x01
    769a:	12 82       	std	Z+2, r1	; 0x02
    769c:	66 23       	and	r22, r22
    769e:	b9 f1       	breq	.+110    	; 0x770e <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    76a0:	8a 01       	movw	r16, r20
    76a2:	c1 e0       	ldi	r28, 0x01	; 1
    76a4:	d0 e0       	ldi	r29, 0x00	; 0
    76a6:	86 2e       	mov	r8, r22
    76a8:	91 2c       	mov	r9, r1
    76aa:	b1 2c       	mov	r11, r1
    76ac:	a1 2c       	mov	r10, r1
    76ae:	d8 01       	movw	r26, r16
    76b0:	2d 91       	ld	r18, X+
    76b2:	8d 01       	movw	r16, r26
    76b4:	22 23       	and	r18, r18
    76b6:	39 f1       	breq	.+78     	; 0x7706 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    76b8:	7e 01       	movw	r14, r28
    76ba:	b1 e0       	ldi	r27, 0x01	; 1
    76bc:	eb 1a       	sub	r14, r27
    76be:	f1 08       	sbc	r15, r1
    76c0:	d6 01       	movw	r26, r12
    76c2:	ae 0d       	add	r26, r14
    76c4:	bf 1d       	adc	r27, r15
    76c6:	7c 90       	ld	r7, X
    76c8:	77 20       	and	r7, r7
    76ca:	e9 f0       	breq	.+58     	; 0x7706 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    76cc:	30 e0       	ldi	r19, 0x00	; 0
    76ce:	50 e0       	ldi	r21, 0x00	; 0
    76d0:	40 e0       	ldi	r20, 0x00	; 0
    76d2:	2f 5f       	subi	r18, 0xFF	; 255
    76d4:	3f 4f       	sbci	r19, 0xFF	; 255
    76d6:	4f 4f       	sbci	r20, 0xFF	; 255
    76d8:	5f 4f       	sbci	r21, 0xFF	; 255
    76da:	c5 01       	movw	r24, r10
    76dc:	b4 01       	movw	r22, r8
    76de:	0e 94 ae 4b 	call	0x975c	; 0x975c <__mulsi3>
    76e2:	9b 01       	movw	r18, r22
    76e4:	ac 01       	movw	r20, r24
    76e6:	87 2d       	mov	r24, r7
    76e8:	90 e0       	ldi	r25, 0x00	; 0
    76ea:	b0 e0       	ldi	r27, 0x00	; 0
    76ec:	a0 e0       	ldi	r26, 0x00	; 0
    76ee:	bc 01       	movw	r22, r24
    76f0:	cd 01       	movw	r24, r26
    76f2:	6f 5f       	subi	r22, 0xFF	; 255
    76f4:	7f 4f       	sbci	r23, 0xFF	; 255
    76f6:	8f 4f       	sbci	r24, 0xFF	; 255
    76f8:	9f 4f       	sbci	r25, 0xFF	; 255
    76fa:	0e 94 ae 4b 	call	0x975c	; 0x975c <__mulsi3>
    76fe:	df 01       	movw	r26, r30
    7700:	ae 0d       	add	r26, r14
    7702:	bf 1d       	adc	r27, r15
    7704:	8c 93       	st	X, r24
    7706:	21 96       	adiw	r28, 0x01	; 1
    7708:	c4 30       	cpi	r28, 0x04	; 4
    770a:	d1 05       	cpc	r29, r1
    770c:	81 f6       	brne	.-96     	; 0x76ae <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    770e:	cf 01       	movw	r24, r30
    7710:	df 91       	pop	r29
    7712:	cf 91       	pop	r28
    7714:	1f 91       	pop	r17
    7716:	0f 91       	pop	r16
    7718:	ff 90       	pop	r15
    771a:	ef 90       	pop	r14
    771c:	df 90       	pop	r13
    771e:	cf 90       	pop	r12
    7720:	bf 90       	pop	r11
    7722:	af 90       	pop	r10
    7724:	9f 90       	pop	r9
    7726:	8f 90       	pop	r8
    7728:	7f 90       	pop	r7
    772a:	08 95       	ret

0000772c <CFastLED::CFastLED()>:
    772c:	fc 01       	movw	r30, r24
    772e:	8f ef       	ldi	r24, 0xFF	; 255
    7730:	80 83       	st	Z, r24
    7732:	12 82       	std	Z+2, r1	; 0x02
    7734:	11 82       	std	Z+1, r1	; 0x01
    7736:	14 86       	std	Z+12, r1	; 0x0c
    7738:	13 86       	std	Z+11, r1	; 0x0b
    773a:	8f ef       	ldi	r24, 0xFF	; 255
    773c:	9f ef       	ldi	r25, 0xFF	; 255
    773e:	dc 01       	movw	r26, r24
    7740:	87 83       	std	Z+7, r24	; 0x07
    7742:	90 87       	std	Z+8, r25	; 0x08
    7744:	a1 87       	std	Z+9, r26	; 0x09
    7746:	b2 87       	std	Z+10, r27	; 0x0a
    7748:	08 95       	ret

0000774a <CFastLED::clearData()>:
    774a:	cf 93       	push	r28
    774c:	df 93       	push	r29
    774e:	c0 91 3b 10 	lds	r28, 0x103B	; 0x80103b <CLEDController::m_pHead>
    7752:	d0 91 3c 10 	lds	r29, 0x103C	; 0x80103c <CLEDController::m_pHead+0x1>
    7756:	20 97       	sbiw	r28, 0x00	; 0
    7758:	89 f0       	breq	.+34     	; 0x777c <CFastLED::clearData()+0x32>
    775a:	8a 81       	ldd	r24, Y+2	; 0x02
    775c:	9b 81       	ldd	r25, Y+3	; 0x03
    775e:	00 97       	sbiw	r24, 0x00	; 0
    7760:	49 f0       	breq	.+18     	; 0x7774 <CFastLED::clearData()+0x2a>
    7762:	2d 85       	ldd	r18, Y+13	; 0x0d
    7764:	3e 85       	ldd	r19, Y+14	; 0x0e
    7766:	a9 01       	movw	r20, r18
    7768:	44 0f       	add	r20, r20
    776a:	55 1f       	adc	r21, r21
    776c:	42 0f       	add	r20, r18
    776e:	53 1f       	adc	r21, r19
    7770:	60 e0       	ldi	r22, 0x00	; 0
    7772:	d0 d2       	rcall	.+1440   	; 0x7d14 <memset8>
    7774:	0c 80       	ldd	r0, Y+4	; 0x04
    7776:	dd 81       	ldd	r29, Y+5	; 0x05
    7778:	c0 2d       	mov	r28, r0
    777a:	ed cf       	rjmp	.-38     	; 0x7756 <CFastLED::clearData()+0xc>
    777c:	df 91       	pop	r29
    777e:	cf 91       	pop	r28
    7780:	08 95       	ret

00007782 <CFastLED::countFPS(int)>:
    7782:	cf 92       	push	r12
    7784:	df 92       	push	r13
    7786:	ef 92       	push	r14
    7788:	ff 92       	push	r15
    778a:	cf 93       	push	r28
    778c:	df 93       	push	r29
    778e:	ec 01       	movw	r28, r24
    7790:	20 91 33 10 	lds	r18, 0x1033	; 0x801033 <CFastLED::countFPS(int)::br>
    7794:	30 91 34 10 	lds	r19, 0x1034	; 0x801034 <CFastLED::countFPS(int)::br+0x1>
    7798:	c9 01       	movw	r24, r18
    779a:	01 96       	adiw	r24, 0x01	; 1
    779c:	90 93 34 10 	sts	0x1034, r25	; 0x801034 <CFastLED::countFPS(int)::br+0x1>
    77a0:	80 93 33 10 	sts	0x1033, r24	; 0x801033 <CFastLED::countFPS(int)::br>
    77a4:	26 17       	cp	r18, r22
    77a6:	37 07       	cpc	r19, r23
    77a8:	0c f4       	brge	.+2      	; 0x77ac <CFastLED::countFPS(int)+0x2a>
    77aa:	3f c0       	rjmp	.+126    	; 0x782a <CFastLED::countFPS(int)+0xa8>
    77ac:	0f b6       	in	r0, 0x3f	; 63
    77ae:	f8 94       	cli
    77b0:	20 91 4d 10 	lds	r18, 0x104D	; 0x80104d <timer0_millis_count>
    77b4:	30 91 4e 10 	lds	r19, 0x104E	; 0x80104e <timer0_millis_count+0x1>
    77b8:	40 91 4f 10 	lds	r20, 0x104F	; 0x80104f <timer0_millis_count+0x2>
    77bc:	50 91 50 10 	lds	r21, 0x1050	; 0x801050 <timer0_millis_count+0x3>
    77c0:	0f be       	out	0x3f, r0	; 63
    77c2:	e8 ee       	ldi	r30, 0xE8	; 232
    77c4:	f3 e0       	ldi	r31, 0x03	; 3
    77c6:	8e 9f       	mul	r24, r30
    77c8:	b0 01       	movw	r22, r0
    77ca:	8f 9f       	mul	r24, r31
    77cc:	70 0d       	add	r23, r0
    77ce:	9e 9f       	mul	r25, r30
    77d0:	70 0d       	add	r23, r0
    77d2:	11 24       	eor	r1, r1
    77d4:	07 2e       	mov	r0, r23
    77d6:	00 0c       	add	r0, r0
    77d8:	88 0b       	sbc	r24, r24
    77da:	99 0b       	sbc	r25, r25
    77dc:	c0 90 2f 10 	lds	r12, 0x102F	; 0x80102f <CFastLED::countFPS(int)::lastframe>
    77e0:	d0 90 30 10 	lds	r13, 0x1030	; 0x801030 <CFastLED::countFPS(int)::lastframe+0x1>
    77e4:	e0 90 31 10 	lds	r14, 0x1031	; 0x801031 <CFastLED::countFPS(int)::lastframe+0x2>
    77e8:	f0 90 32 10 	lds	r15, 0x1032	; 0x801032 <CFastLED::countFPS(int)::lastframe+0x3>
    77ec:	2c 19       	sub	r18, r12
    77ee:	3d 09       	sbc	r19, r13
    77f0:	4e 09       	sbc	r20, r14
    77f2:	5f 09       	sbc	r21, r15
    77f4:	0e 94 e4 4b 	call	0x97c8	; 0x97c8 <__udivmodsi4>
    77f8:	3a 83       	std	Y+2, r19	; 0x02
    77fa:	29 83       	std	Y+1, r18	; 0x01
    77fc:	10 92 34 10 	sts	0x1034, r1	; 0x801034 <CFastLED::countFPS(int)::br+0x1>
    7800:	10 92 33 10 	sts	0x1033, r1	; 0x801033 <CFastLED::countFPS(int)::br>
    7804:	0f b6       	in	r0, 0x3f	; 63
    7806:	f8 94       	cli
    7808:	80 91 4d 10 	lds	r24, 0x104D	; 0x80104d <timer0_millis_count>
    780c:	90 91 4e 10 	lds	r25, 0x104E	; 0x80104e <timer0_millis_count+0x1>
    7810:	a0 91 4f 10 	lds	r26, 0x104F	; 0x80104f <timer0_millis_count+0x2>
    7814:	b0 91 50 10 	lds	r27, 0x1050	; 0x801050 <timer0_millis_count+0x3>
    7818:	0f be       	out	0x3f, r0	; 63
    781a:	80 93 2f 10 	sts	0x102F, r24	; 0x80102f <CFastLED::countFPS(int)::lastframe>
    781e:	90 93 30 10 	sts	0x1030, r25	; 0x801030 <CFastLED::countFPS(int)::lastframe+0x1>
    7822:	a0 93 31 10 	sts	0x1031, r26	; 0x801031 <CFastLED::countFPS(int)::lastframe+0x2>
    7826:	b0 93 32 10 	sts	0x1032, r27	; 0x801032 <CFastLED::countFPS(int)::lastframe+0x3>
    782a:	df 91       	pop	r29
    782c:	cf 91       	pop	r28
    782e:	ff 90       	pop	r15
    7830:	ef 90       	pop	r14
    7832:	df 90       	pop	r13
    7834:	cf 90       	pop	r12
    7836:	08 95       	ret

00007838 <CFastLED::show(unsigned char)>:
    7838:	8f 92       	push	r8
    783a:	9f 92       	push	r9
    783c:	af 92       	push	r10
    783e:	bf 92       	push	r11
    7840:	cf 92       	push	r12
    7842:	df 92       	push	r13
    7844:	ef 92       	push	r14
    7846:	ff 92       	push	r15
    7848:	0f 93       	push	r16
    784a:	1f 93       	push	r17
    784c:	cf 93       	push	r28
    784e:	df 93       	push	r29
    7850:	00 d0       	rcall	.+0      	; 0x7852 <CFastLED::show(unsigned char)+0x1a>
    7852:	1f 92       	push	r1
    7854:	cd b7       	in	r28, 0x3d	; 61
    7856:	de b7       	in	r29, 0x3e	; 62
    7858:	7c 01       	movw	r14, r24
    785a:	d6 2e       	mov	r13, r22
    785c:	d7 01       	movw	r26, r14
    785e:	13 96       	adiw	r26, 0x03	; 3
    7860:	0d 91       	ld	r16, X+
    7862:	1d 91       	ld	r17, X+
    7864:	2d 91       	ld	r18, X+
    7866:	3c 91       	ld	r19, X
    7868:	16 97       	sbiw	r26, 0x06	; 6
    786a:	01 15       	cp	r16, r1
    786c:	11 05       	cpc	r17, r1
    786e:	21 05       	cpc	r18, r1
    7870:	31 05       	cpc	r19, r1
    7872:	91 f0       	breq	.+36     	; 0x7898 <CFastLED::show(unsigned char)+0x60>
    7874:	7d d6       	rcall	.+3322   	; 0x8570 <_micros>
    7876:	80 90 35 10 	lds	r8, 0x1035	; 0x801035 <lastshow>
    787a:	90 90 36 10 	lds	r9, 0x1036	; 0x801036 <lastshow+0x1>
    787e:	a0 90 37 10 	lds	r10, 0x1037	; 0x801037 <lastshow+0x2>
    7882:	b0 90 38 10 	lds	r11, 0x1038	; 0x801038 <lastshow+0x3>
    7886:	68 19       	sub	r22, r8
    7888:	79 09       	sbc	r23, r9
    788a:	8a 09       	sbc	r24, r10
    788c:	9b 09       	sbc	r25, r11
    788e:	60 17       	cp	r22, r16
    7890:	71 07       	cpc	r23, r17
    7892:	82 07       	cpc	r24, r18
    7894:	93 07       	cpc	r25, r19
    7896:	10 f3       	brcs	.-60     	; 0x785c <CFastLED::show(unsigned char)+0x24>
    7898:	6b d6       	rcall	.+3286   	; 0x8570 <_micros>
    789a:	60 93 35 10 	sts	0x1035, r22	; 0x801035 <lastshow>
    789e:	70 93 36 10 	sts	0x1036, r23	; 0x801036 <lastshow+0x1>
    78a2:	80 93 37 10 	sts	0x1037, r24	; 0x801037 <lastshow+0x2>
    78a6:	90 93 38 10 	sts	0x1038, r25	; 0x801038 <lastshow+0x3>
    78aa:	d7 01       	movw	r26, r14
    78ac:	1b 96       	adiw	r26, 0x0b	; 11
    78ae:	ed 91       	ld	r30, X+
    78b0:	fc 91       	ld	r31, X
    78b2:	1c 97       	sbiw	r26, 0x0c	; 12
    78b4:	30 97       	sbiw	r30, 0x00	; 0
    78b6:	49 f0       	breq	.+18     	; 0x78ca <CFastLED::show(unsigned char)+0x92>
    78b8:	17 96       	adiw	r26, 0x07	; 7
    78ba:	4d 91       	ld	r20, X+
    78bc:	5d 91       	ld	r21, X+
    78be:	6d 91       	ld	r22, X+
    78c0:	7c 91       	ld	r23, X
    78c2:	1a 97       	sbiw	r26, 0x0a	; 10
    78c4:	8d 2d       	mov	r24, r13
    78c6:	09 95       	icall
    78c8:	d8 2e       	mov	r13, r24
    78ca:	00 91 3b 10 	lds	r16, 0x103B	; 0x80103b <CLEDController::m_pHead>
    78ce:	10 91 3c 10 	lds	r17, 0x103C	; 0x80103c <CLEDController::m_pHead+0x1>
    78d2:	01 15       	cp	r16, r1
    78d4:	11 05       	cpc	r17, r1
    78d6:	61 f1       	breq	.+88     	; 0x7930 <CFastLED::show(unsigned char)+0xf8>
    78d8:	f8 01       	movw	r30, r16
    78da:	c4 84       	ldd	r12, Z+12	; 0x0c
    78dc:	d7 01       	movw	r26, r14
    78de:	11 96       	adiw	r26, 0x01	; 1
    78e0:	8d 91       	ld	r24, X+
    78e2:	9c 91       	ld	r25, X
    78e4:	84 36       	cpi	r24, 0x64	; 100
    78e6:	91 05       	cpc	r25, r1
    78e8:	08 f4       	brcc	.+2      	; 0x78ec <CFastLED::show(unsigned char)+0xb4>
    78ea:	14 86       	std	Z+12, r1	; 0x0c
    78ec:	d8 01       	movw	r26, r16
    78ee:	ed 91       	ld	r30, X+
    78f0:	fc 91       	ld	r31, X
    78f2:	a2 80       	ldd	r10, Z+2	; 0x02
    78f4:	b3 80       	ldd	r11, Z+3	; 0x03
    78f6:	98 01       	movw	r18, r16
    78f8:	27 5f       	subi	r18, 0xF7	; 247
    78fa:	3f 4f       	sbci	r19, 0xFF	; 255
    78fc:	a8 01       	movw	r20, r16
    78fe:	4a 5f       	subi	r20, 0xFA	; 250
    7900:	5f 4f       	sbci	r21, 0xFF	; 255
    7902:	6d 2d       	mov	r22, r13
    7904:	ce 01       	movw	r24, r28
    7906:	01 96       	adiw	r24, 0x01	; 1
    7908:	b7 de       	rcall	.-658    	; 0x7678 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    790a:	f8 01       	movw	r30, r16
    790c:	45 85       	ldd	r20, Z+13	; 0x0d
    790e:	56 85       	ldd	r21, Z+14	; 0x0e
    7910:	62 81       	ldd	r22, Z+2	; 0x02
    7912:	73 81       	ldd	r23, Z+3	; 0x03
    7914:	9e 01       	movw	r18, r28
    7916:	2f 5f       	subi	r18, 0xFF	; 255
    7918:	3f 4f       	sbci	r19, 0xFF	; 255
    791a:	c8 01       	movw	r24, r16
    791c:	f5 01       	movw	r30, r10
    791e:	09 95       	icall
    7920:	d8 01       	movw	r26, r16
    7922:	1c 96       	adiw	r26, 0x0c	; 12
    7924:	cc 92       	st	X, r12
    7926:	1c 97       	sbiw	r26, 0x0c	; 12
    7928:	14 96       	adiw	r26, 0x04	; 4
    792a:	0d 91       	ld	r16, X+
    792c:	1c 91       	ld	r17, X
    792e:	d1 cf       	rjmp	.-94     	; 0x78d2 <CFastLED::show(unsigned char)+0x9a>
    7930:	69 e1       	ldi	r22, 0x19	; 25
    7932:	70 e0       	ldi	r23, 0x00	; 0
    7934:	c7 01       	movw	r24, r14
    7936:	25 df       	rcall	.-438    	; 0x7782 <CFastLED::countFPS(int)>
    7938:	0f 90       	pop	r0
    793a:	0f 90       	pop	r0
    793c:	0f 90       	pop	r0
    793e:	df 91       	pop	r29
    7940:	cf 91       	pop	r28
    7942:	1f 91       	pop	r17
    7944:	0f 91       	pop	r16
    7946:	ff 90       	pop	r15
    7948:	ef 90       	pop	r14
    794a:	df 90       	pop	r13
    794c:	cf 90       	pop	r12
    794e:	bf 90       	pop	r11
    7950:	af 90       	pop	r10
    7952:	9f 90       	pop	r9
    7954:	8f 90       	pop	r8
    7956:	08 95       	ret

00007958 <CFastLED::showColor(CRGB const&, unsigned char)>:
    7958:	4f 92       	push	r4
    795a:	5f 92       	push	r5
    795c:	6f 92       	push	r6
    795e:	7f 92       	push	r7
    7960:	8f 92       	push	r8
    7962:	9f 92       	push	r9
    7964:	af 92       	push	r10
    7966:	bf 92       	push	r11
    7968:	cf 92       	push	r12
    796a:	df 92       	push	r13
    796c:	ef 92       	push	r14
    796e:	ff 92       	push	r15
    7970:	0f 93       	push	r16
    7972:	1f 93       	push	r17
    7974:	cf 93       	push	r28
    7976:	df 93       	push	r29
    7978:	00 d0       	rcall	.+0      	; 0x797a <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    797a:	1f 92       	push	r1
    797c:	cd b7       	in	r28, 0x3d	; 61
    797e:	de b7       	in	r29, 0x3e	; 62
    7980:	7c 01       	movw	r14, r24
    7982:	5b 01       	movw	r10, r22
    7984:	d4 2e       	mov	r13, r20
    7986:	d7 01       	movw	r26, r14
    7988:	13 96       	adiw	r26, 0x03	; 3
    798a:	0d 91       	ld	r16, X+
    798c:	1d 91       	ld	r17, X+
    798e:	2d 91       	ld	r18, X+
    7990:	3c 91       	ld	r19, X
    7992:	16 97       	sbiw	r26, 0x06	; 6
    7994:	01 15       	cp	r16, r1
    7996:	11 05       	cpc	r17, r1
    7998:	21 05       	cpc	r18, r1
    799a:	31 05       	cpc	r19, r1
    799c:	91 f0       	breq	.+36     	; 0x79c2 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    799e:	e8 d5       	rcall	.+3024   	; 0x8570 <_micros>
    79a0:	40 90 35 10 	lds	r4, 0x1035	; 0x801035 <lastshow>
    79a4:	50 90 36 10 	lds	r5, 0x1036	; 0x801036 <lastshow+0x1>
    79a8:	60 90 37 10 	lds	r6, 0x1037	; 0x801037 <lastshow+0x2>
    79ac:	70 90 38 10 	lds	r7, 0x1038	; 0x801038 <lastshow+0x3>
    79b0:	64 19       	sub	r22, r4
    79b2:	75 09       	sbc	r23, r5
    79b4:	86 09       	sbc	r24, r6
    79b6:	97 09       	sbc	r25, r7
    79b8:	60 17       	cp	r22, r16
    79ba:	71 07       	cpc	r23, r17
    79bc:	82 07       	cpc	r24, r18
    79be:	93 07       	cpc	r25, r19
    79c0:	10 f3       	brcs	.-60     	; 0x7986 <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    79c2:	d6 d5       	rcall	.+2988   	; 0x8570 <_micros>
    79c4:	60 93 35 10 	sts	0x1035, r22	; 0x801035 <lastshow>
    79c8:	70 93 36 10 	sts	0x1036, r23	; 0x801036 <lastshow+0x1>
    79cc:	80 93 37 10 	sts	0x1037, r24	; 0x801037 <lastshow+0x2>
    79d0:	90 93 38 10 	sts	0x1038, r25	; 0x801038 <lastshow+0x3>
    79d4:	d7 01       	movw	r26, r14
    79d6:	1b 96       	adiw	r26, 0x0b	; 11
    79d8:	ed 91       	ld	r30, X+
    79da:	fc 91       	ld	r31, X
    79dc:	1c 97       	sbiw	r26, 0x0c	; 12
    79de:	30 97       	sbiw	r30, 0x00	; 0
    79e0:	49 f0       	breq	.+18     	; 0x79f4 <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    79e2:	17 96       	adiw	r26, 0x07	; 7
    79e4:	4d 91       	ld	r20, X+
    79e6:	5d 91       	ld	r21, X+
    79e8:	6d 91       	ld	r22, X+
    79ea:	7c 91       	ld	r23, X
    79ec:	1a 97       	sbiw	r26, 0x0a	; 10
    79ee:	8d 2d       	mov	r24, r13
    79f0:	09 95       	icall
    79f2:	d8 2e       	mov	r13, r24
    79f4:	00 91 3b 10 	lds	r16, 0x103B	; 0x80103b <CLEDController::m_pHead>
    79f8:	10 91 3c 10 	lds	r17, 0x103C	; 0x80103c <CLEDController::m_pHead+0x1>
    79fc:	01 15       	cp	r16, r1
    79fe:	11 05       	cpc	r17, r1
    7a00:	59 f1       	breq	.+86     	; 0x7a58 <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    7a02:	f8 01       	movw	r30, r16
    7a04:	c4 84       	ldd	r12, Z+12	; 0x0c
    7a06:	d7 01       	movw	r26, r14
    7a08:	11 96       	adiw	r26, 0x01	; 1
    7a0a:	8d 91       	ld	r24, X+
    7a0c:	9c 91       	ld	r25, X
    7a0e:	84 36       	cpi	r24, 0x64	; 100
    7a10:	91 05       	cpc	r25, r1
    7a12:	08 f4       	brcc	.+2      	; 0x7a16 <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    7a14:	14 86       	std	Z+12, r1	; 0x0c
    7a16:	d8 01       	movw	r26, r16
    7a18:	ed 91       	ld	r30, X+
    7a1a:	fc 91       	ld	r31, X
    7a1c:	80 80       	ld	r8, Z
    7a1e:	91 80       	ldd	r9, Z+1	; 0x01
    7a20:	98 01       	movw	r18, r16
    7a22:	27 5f       	subi	r18, 0xF7	; 247
    7a24:	3f 4f       	sbci	r19, 0xFF	; 255
    7a26:	a8 01       	movw	r20, r16
    7a28:	4a 5f       	subi	r20, 0xFA	; 250
    7a2a:	5f 4f       	sbci	r21, 0xFF	; 255
    7a2c:	6d 2d       	mov	r22, r13
    7a2e:	ce 01       	movw	r24, r28
    7a30:	01 96       	adiw	r24, 0x01	; 1
    7a32:	22 de       	rcall	.-956    	; 0x7678 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    7a34:	f8 01       	movw	r30, r16
    7a36:	45 85       	ldd	r20, Z+13	; 0x0d
    7a38:	56 85       	ldd	r21, Z+14	; 0x0e
    7a3a:	9e 01       	movw	r18, r28
    7a3c:	2f 5f       	subi	r18, 0xFF	; 255
    7a3e:	3f 4f       	sbci	r19, 0xFF	; 255
    7a40:	b5 01       	movw	r22, r10
    7a42:	c8 01       	movw	r24, r16
    7a44:	f4 01       	movw	r30, r8
    7a46:	09 95       	icall
    7a48:	d8 01       	movw	r26, r16
    7a4a:	1c 96       	adiw	r26, 0x0c	; 12
    7a4c:	cc 92       	st	X, r12
    7a4e:	1c 97       	sbiw	r26, 0x0c	; 12
    7a50:	14 96       	adiw	r26, 0x04	; 4
    7a52:	0d 91       	ld	r16, X+
    7a54:	1c 91       	ld	r17, X
    7a56:	d2 cf       	rjmp	.-92     	; 0x79fc <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    7a58:	69 e1       	ldi	r22, 0x19	; 25
    7a5a:	70 e0       	ldi	r23, 0x00	; 0
    7a5c:	c7 01       	movw	r24, r14
    7a5e:	91 de       	rcall	.-734    	; 0x7782 <CFastLED::countFPS(int)>
    7a60:	0f 90       	pop	r0
    7a62:	0f 90       	pop	r0
    7a64:	0f 90       	pop	r0
    7a66:	df 91       	pop	r29
    7a68:	cf 91       	pop	r28
    7a6a:	1f 91       	pop	r17
    7a6c:	0f 91       	pop	r16
    7a6e:	ff 90       	pop	r15
    7a70:	ef 90       	pop	r14
    7a72:	df 90       	pop	r13
    7a74:	cf 90       	pop	r12
    7a76:	bf 90       	pop	r11
    7a78:	af 90       	pop	r10
    7a7a:	9f 90       	pop	r9
    7a7c:	8f 90       	pop	r8
    7a7e:	7f 90       	pop	r7
    7a80:	6f 90       	pop	r6
    7a82:	5f 90       	pop	r5
    7a84:	4f 90       	pop	r4
    7a86:	08 95       	ret

00007a88 <CFastLED::clear(bool)>:
    7a88:	0f 93       	push	r16
    7a8a:	1f 93       	push	r17
    7a8c:	cf 93       	push	r28
    7a8e:	df 93       	push	r29
    7a90:	00 d0       	rcall	.+0      	; 0x7a92 <CFastLED::clear(bool)+0xa>
    7a92:	1f 92       	push	r1
    7a94:	cd b7       	in	r28, 0x3d	; 61
    7a96:	de b7       	in	r29, 0x3e	; 62
    7a98:	8c 01       	movw	r16, r24
    7a9a:	66 23       	and	r22, r22
    7a9c:	41 f0       	breq	.+16     	; 0x7aae <CFastLED::clear(bool)+0x26>
    7a9e:	19 82       	std	Y+1, r1	; 0x01
    7aa0:	1a 82       	std	Y+2, r1	; 0x02
    7aa2:	1b 82       	std	Y+3, r1	; 0x03
    7aa4:	40 e0       	ldi	r20, 0x00	; 0
    7aa6:	be 01       	movw	r22, r28
    7aa8:	6f 5f       	subi	r22, 0xFF	; 255
    7aaa:	7f 4f       	sbci	r23, 0xFF	; 255
    7aac:	55 df       	rcall	.-342    	; 0x7958 <CFastLED::showColor(CRGB const&, unsigned char)>
    7aae:	c8 01       	movw	r24, r16
    7ab0:	4c de       	rcall	.-872    	; 0x774a <CFastLED::clearData()>
    7ab2:	0f 90       	pop	r0
    7ab4:	0f 90       	pop	r0
    7ab6:	0f 90       	pop	r0
    7ab8:	df 91       	pop	r29
    7aba:	cf 91       	pop	r28
    7abc:	1f 91       	pop	r17
    7abe:	0f 91       	pop	r16
    7ac0:	08 95       	ret

00007ac2 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    7ac2:	cf 93       	push	r28
    7ac4:	df 93       	push	r29
    7ac6:	ec 01       	movw	r28, r24
    7ac8:	44 23       	and	r20, r20
    7aca:	f1 f0       	breq	.+60     	; 0x7b08 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    7acc:	61 15       	cp	r22, r1
    7ace:	71 05       	cpc	r23, r1
    7ad0:	c1 f0       	breq	.+48     	; 0x7b02 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    7ad2:	9b 01       	movw	r18, r22
    7ad4:	50 e0       	ldi	r21, 0x00	; 0
    7ad6:	40 e0       	ldi	r20, 0x00	; 0
    7ad8:	60 e4       	ldi	r22, 0x40	; 64
    7ada:	72 e4       	ldi	r23, 0x42	; 66
    7adc:	8f e0       	ldi	r24, 0x0F	; 15
    7ade:	90 e0       	ldi	r25, 0x00	; 0
    7ae0:	0e 94 06 4c 	call	0x980c	; 0x980c <__divmodsi4>
    7ae4:	8b 81       	ldd	r24, Y+3	; 0x03
    7ae6:	9c 81       	ldd	r25, Y+4	; 0x04
    7ae8:	ad 81       	ldd	r26, Y+5	; 0x05
    7aea:	be 81       	ldd	r27, Y+6	; 0x06
    7aec:	82 17       	cp	r24, r18
    7aee:	93 07       	cpc	r25, r19
    7af0:	a4 07       	cpc	r26, r20
    7af2:	b5 07       	cpc	r27, r21
    7af4:	10 f4       	brcc	.+4      	; 0x7afa <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    7af6:	da 01       	movw	r26, r20
    7af8:	c9 01       	movw	r24, r18
    7afa:	8b 83       	std	Y+3, r24	; 0x03
    7afc:	9c 83       	std	Y+4, r25	; 0x04
    7afe:	ad 83       	std	Y+5, r26	; 0x05
    7b00:	be 83       	std	Y+6, r27	; 0x06
    7b02:	df 91       	pop	r29
    7b04:	cf 91       	pop	r28
    7b06:	08 95       	ret
    7b08:	61 15       	cp	r22, r1
    7b0a:	71 05       	cpc	r23, r1
    7b0c:	71 f0       	breq	.+28     	; 0x7b2a <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    7b0e:	9b 01       	movw	r18, r22
    7b10:	50 e0       	ldi	r21, 0x00	; 0
    7b12:	40 e0       	ldi	r20, 0x00	; 0
    7b14:	60 e4       	ldi	r22, 0x40	; 64
    7b16:	72 e4       	ldi	r23, 0x42	; 66
    7b18:	8f e0       	ldi	r24, 0x0F	; 15
    7b1a:	90 e0       	ldi	r25, 0x00	; 0
    7b1c:	0e 94 06 4c 	call	0x980c	; 0x980c <__divmodsi4>
    7b20:	2b 83       	std	Y+3, r18	; 0x03
    7b22:	3c 83       	std	Y+4, r19	; 0x04
    7b24:	4d 83       	std	Y+5, r20	; 0x05
    7b26:	5e 83       	std	Y+6, r21	; 0x06
    7b28:	ec cf       	rjmp	.-40     	; 0x7b02 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    7b2a:	1b 82       	std	Y+3, r1	; 0x03
    7b2c:	1c 82       	std	Y+4, r1	; 0x04
    7b2e:	1d 82       	std	Y+5, r1	; 0x05
    7b30:	1e 82       	std	Y+6, r1	; 0x06
    7b32:	e7 cf       	rjmp	.-50     	; 0x7b02 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

00007b34 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    7b34:	cf 92       	push	r12
    7b36:	df 92       	push	r13
    7b38:	ef 92       	push	r14
    7b3a:	ff 92       	push	r15
    7b3c:	0f 93       	push	r16
    7b3e:	1f 93       	push	r17
    7b40:	cf 93       	push	r28
    7b42:	df 93       	push	r29
    7b44:	ec 01       	movw	r28, r24
    7b46:	6b 01       	movw	r12, r22
    7b48:	7a 01       	movw	r14, r20
    7b4a:	10 e0       	ldi	r17, 0x00	; 0
    7b4c:	00 e0       	ldi	r16, 0x00	; 0
    7b4e:	12 16       	cp	r1, r18
    7b50:	13 06       	cpc	r1, r19
    7b52:	14 f4       	brge	.+4      	; 0x7b58 <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    7b54:	8a 01       	movw	r16, r20
    7b56:	79 01       	movw	r14, r18
    7b58:	e8 81       	ld	r30, Y
    7b5a:	f9 81       	ldd	r31, Y+1	; 0x01
    7b5c:	04 80       	ldd	r0, Z+4	; 0x04
    7b5e:	f5 81       	ldd	r31, Z+5	; 0x05
    7b60:	e0 2d       	mov	r30, r0
    7b62:	ce 01       	movw	r24, r28
    7b64:	09 95       	icall
    7b66:	c8 01       	movw	r24, r16
    7b68:	88 0f       	add	r24, r24
    7b6a:	99 1f       	adc	r25, r25
    7b6c:	08 0f       	add	r16, r24
    7b6e:	19 1f       	adc	r17, r25
    7b70:	c0 0e       	add	r12, r16
    7b72:	d1 1e       	adc	r13, r17
    7b74:	db 82       	std	Y+3, r13	; 0x03
    7b76:	ca 82       	std	Y+2, r12	; 0x02
    7b78:	ed 86       	std	Y+13, r14	; 0x0d
    7b7a:	fe 86       	std	Y+14, r15	; 0x0e
    7b7c:	e8 81       	ld	r30, Y
    7b7e:	f9 81       	ldd	r31, Y+1	; 0x01
    7b80:	02 84       	ldd	r0, Z+10	; 0x0a
    7b82:	f3 85       	ldd	r31, Z+11	; 0x0b
    7b84:	e0 2d       	mov	r30, r0
    7b86:	ce 01       	movw	r24, r28
    7b88:	09 95       	icall
    7b8a:	41 e0       	ldi	r20, 0x01	; 1
    7b8c:	bc 01       	movw	r22, r24
    7b8e:	8d e3       	ldi	r24, 0x3D	; 61
    7b90:	90 e1       	ldi	r25, 0x10	; 16
    7b92:	97 df       	rcall	.-210    	; 0x7ac2 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    7b94:	ce 01       	movw	r24, r28
    7b96:	df 91       	pop	r29
    7b98:	cf 91       	pop	r28
    7b9a:	1f 91       	pop	r17
    7b9c:	0f 91       	pop	r16
    7b9e:	ff 90       	pop	r15
    7ba0:	ef 90       	pop	r14
    7ba2:	df 90       	pop	r13
    7ba4:	cf 90       	pop	r12
    7ba6:	08 95       	ret

00007ba8 <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    7ba8:	8d e3       	ldi	r24, 0x3D	; 61
    7baa:	90 e1       	ldi	r25, 0x10	; 16
    7bac:	bf cd       	rjmp	.-1154   	; 0x772c <CFastLED::CFastLED()>

00007bae <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    7bae:	1f 93       	push	r17
    7bb0:	dc 01       	movw	r26, r24
    7bb2:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    7bb4:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    7bb6:	11 96       	adiw	r26, 0x01	; 1
    7bb8:	4c 91       	ld	r20, X
    7bba:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    7bbc:	12 96       	adiw	r26, 0x02	; 2
    7bbe:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    7bc0:	97 2f       	mov	r25, r23
    7bc2:	99 0f       	add	r25, r25
    7bc4:	99 0f       	add	r25, r25
    7bc6:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7bc8:	35 e5       	ldi	r19, 0x55	; 85
    7bca:	29 2f       	mov	r18, r25
    7bcc:	23 9f       	mul	r18, r19
    7bce:	02 0e       	add	r0, r18
    7bd0:	20 e0       	ldi	r18, 0x00	; 0
    7bd2:	21 1d       	adc	r18, r1
    7bd4:	11 24       	eor	r1, r1
    7bd6:	82 2f       	mov	r24, r18
    7bd8:	67 2f       	mov	r22, r23
    7bda:	60 74       	andi	r22, 0x40	; 64
    7bdc:	57 2f       	mov	r21, r23
    7bde:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    7be0:	77 fd       	sbrc	r23, 7
    7be2:	6f c0       	rjmp	.+222    	; 0x7cc2 <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    7be4:	61 11       	cpse	r22, r1
    7be6:	5b c0       	rjmp	.+182    	; 0x7c9e <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    7be8:	51 11       	cpse	r21, r1
    7bea:	05 c0       	rjmp	.+10     	; 0x7bf6 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    7bec:	92 2f       	mov	r25, r18
    7bee:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    7bf0:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    7bf2:	90 e0       	ldi	r25, 0x00	; 0
    7bf4:	04 c0       	rjmp	.+8      	; 0x7bfe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    7bf6:	25 e5       	ldi	r18, 0x55	; 85
    7bf8:	28 0f       	add	r18, r24
                    b = 0;
    7bfa:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    7bfc:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    7bfe:	4f 3f       	cpi	r20, 0xFF	; 255
    7c00:	09 f4       	brne	.+2      	; 0x7c04 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    7c02:	24 c0       	rjmp	.+72     	; 0x7c4c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    7c04:	44 23       	and	r20, r20
    7c06:	09 f4       	brne	.+2      	; 0x7c0a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    7c08:	7d c0       	rjmp	.+250    	; 0x7d04 <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    7c0a:	88 23       	and	r24, r24
    7c0c:	31 f0       	breq	.+12     	; 0x7c1a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7c0e:	38 2f       	mov	r19, r24
    7c10:	34 9f       	mul	r19, r20
    7c12:	03 0e       	add	r0, r19
    7c14:	30 e0       	ldi	r19, 0x00	; 0
    7c16:	31 1d       	adc	r19, r1
    7c18:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    7c1a:	22 23       	and	r18, r18
    7c1c:	21 f0       	breq	.+8      	; 0x7c26 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    7c1e:	24 9f       	mul	r18, r20
    7c20:	02 0e       	add	r0, r18
    7c22:	20 e0       	ldi	r18, 0x00	; 0
    7c24:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    7c26:	99 23       	and	r25, r25
    7c28:	31 f0       	breq	.+12     	; 0x7c36 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    7c2a:	39 2f       	mov	r19, r25
    7c2c:	34 9f       	mul	r19, r20
    7c2e:	03 0e       	add	r0, r19
    7c30:	30 e0       	ldi	r19, 0x00	; 0
    7c32:	31 1d       	adc	r19, r1
    7c34:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    7c36:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    7c38:	34 2f       	mov	r19, r20
    7c3a:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7c3c:	33 9f       	mul	r19, r19
    7c3e:	03 0e       	add	r0, r19
    7c40:	30 e0       	ldi	r19, 0x00	; 0
    7c42:	31 1d       	adc	r19, r1
    7c44:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    7c46:	83 0f       	add	r24, r19
            g += brightness_floor;
    7c48:	23 0f       	add	r18, r19
            b += brightness_floor;
    7c4a:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    7c4c:	1f 3f       	cpi	r17, 0xFF	; 255
    7c4e:	09 f4       	brne	.+2      	; 0x7c52 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    7c50:	21 c0       	rjmp	.+66     	; 0x7c94 <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    7c52:	30 e0       	ldi	r19, 0x00	; 0
    7c54:	11 23       	and	r17, r17
    7c56:	21 f0       	breq	.+8      	; 0x7c60 <L_630>
    7c58:	11 9f       	mul	r17, r17
    7c5a:	31 2d       	mov	r19, r1
    7c5c:	09 f0       	breq	.+2      	; 0x7c60 <L_630>
    7c5e:	3f 5f       	subi	r19, 0xFF	; 255

00007c60 <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    7c60:	33 23       	and	r19, r19
    7c62:	09 f4       	brne	.+2      	; 0x7c66 <L_630+0x6>
    7c64:	53 c0       	rjmp	.+166    	; 0x7d0c <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    7c66:	88 23       	and	r24, r24
    7c68:	31 f0       	breq	.+12     	; 0x7c76 <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7c6a:	48 2f       	mov	r20, r24
    7c6c:	43 9f       	mul	r20, r19
    7c6e:	04 0e       	add	r0, r20
    7c70:	40 e0       	ldi	r20, 0x00	; 0
    7c72:	41 1d       	adc	r20, r1
    7c74:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    7c76:	22 23       	and	r18, r18
    7c78:	21 f0       	breq	.+8      	; 0x7c82 <L_630+0x22>
    7c7a:	23 9f       	mul	r18, r19
    7c7c:	02 0e       	add	r0, r18
    7c7e:	20 e0       	ldi	r18, 0x00	; 0
    7c80:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    7c82:	99 23       	and	r25, r25
    7c84:	31 f0       	breq	.+12     	; 0x7c92 <L_630+0x32>
    7c86:	49 2f       	mov	r20, r25
    7c88:	43 9f       	mul	r20, r19
    7c8a:	04 0e       	add	r0, r20
    7c8c:	40 e0       	ldi	r20, 0x00	; 0
    7c8e:	41 1d       	adc	r20, r1
    7c90:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    7c92:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    7c94:	80 83       	st	Z, r24
    rgb.g = g;
    7c96:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    7c98:	92 83       	std	Z+2, r25	; 0x02
}
    7c9a:	1f 91       	pop	r17
    7c9c:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    7c9e:	51 11       	cpse	r21, r1
    7ca0:	0b c0       	rjmp	.+22     	; 0x7cb8 <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    7ca2:	39 2f       	mov	r19, r25
    7ca4:	2a ea       	ldi	r18, 0xAA	; 170
    7ca6:	32 9f       	mul	r19, r18
    7ca8:	03 0e       	add	r0, r19
    7caa:	30 e0       	ldi	r19, 0x00	; 0
    7cac:	31 1d       	adc	r19, r1
    7cae:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    7cb0:	9b ea       	ldi	r25, 0xAB	; 171
    7cb2:	93 1b       	sub	r25, r19
                    g = K170 + third;
    7cb4:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    7cb6:	9c cf       	rjmp	.-200    	; 0x7bf0 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    7cb8:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    7cba:	20 95       	com	r18
                b = third;
    7cbc:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    7cbe:	80 e0       	ldi	r24, 0x00	; 0
    7cc0:	9e cf       	rjmp	.-196    	; 0x7bfe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    7cc2:	61 11       	cpse	r22, r1
    7cc4:	12 c0       	rjmp	.+36     	; 0x7cea <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    7cc6:	51 11       	cpse	r21, r1
    7cc8:	0c c0       	rjmp	.+24     	; 0x7ce2 <L_630+0x82>
    7cca:	39 2f       	mov	r19, r25
    7ccc:	2a ea       	ldi	r18, 0xAA	; 170
    7cce:	32 9f       	mul	r19, r18
    7cd0:	03 0e       	add	r0, r19
    7cd2:	30 e0       	ldi	r19, 0x00	; 0
    7cd4:	31 1d       	adc	r19, r1
    7cd6:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    7cd8:	2b ea       	ldi	r18, 0xAB	; 171
    7cda:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    7cdc:	95 e5       	ldi	r25, 0x55	; 85
    7cde:	93 0f       	add	r25, r19
    7ce0:	ee cf       	rjmp	.-36     	; 0x7cbe <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    7ce2:	92 2f       	mov	r25, r18
    7ce4:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    7ce6:	20 e0       	ldi	r18, 0x00	; 0
    7ce8:	8a cf       	rjmp	.-236    	; 0x7bfe <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    7cea:	51 11       	cpse	r21, r1
    7cec:	06 c0       	rjmp	.+12     	; 0x7cfa <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    7cee:	25 e5       	ldi	r18, 0x55	; 85
    7cf0:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    7cf2:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    7cf4:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    7cf6:	82 2f       	mov	r24, r18
    7cf8:	f6 cf       	rjmp	.-20     	; 0x7ce6 <L_630+0x86>
    7cfa:	2a ea       	ldi	r18, 0xAA	; 170
    7cfc:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    7cfe:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    7d00:	93 2f       	mov	r25, r19
    7d02:	f8 cf       	rjmp	.-16     	; 0x7cf4 <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    7d04:	9f ef       	ldi	r25, 0xFF	; 255
    7d06:	2f ef       	ldi	r18, 0xFF	; 255
    7d08:	8f ef       	ldi	r24, 0xFF	; 255
    7d0a:	a0 cf       	rjmp	.-192    	; 0x7c4c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    7d0c:	90 e0       	ldi	r25, 0x00	; 0
    7d0e:	20 e0       	ldi	r18, 0x00	; 0
    7d10:	80 e0       	ldi	r24, 0x00	; 0
    7d12:	c0 cf       	rjmp	.-128    	; 0x7c94 <L_630+0x34>

00007d14 <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    7d14:	dc 01       	movw	r26, r24
    7d16:	40 ff       	sbrs	r20, 0
    7d18:	03 c0       	rjmp	.+6      	; 0x7d20 <Lseteven_8>
    7d1a:	01 c0       	rjmp	.+2      	; 0x7d1e <Lsetodd_8>

00007d1c <Lsetloop_8>:
    7d1c:	6d 93       	st	X+, r22

00007d1e <Lsetodd_8>:
    7d1e:	6d 93       	st	X+, r22

00007d20 <Lseteven_8>:
    7d20:	42 50       	subi	r20, 0x02	; 2
    7d22:	e0 f7       	brcc	.-8      	; 0x7d1c <Lsetloop_8>
    7d24:	50 40       	sbci	r21, 0x00	; 0
    7d26:	d0 f7       	brcc	.-12     	; 0x7d1c <Lsetloop_8>
    return ptr;
}
    7d28:	08 95       	ret

00007d2a <memcpy8>:
         "  brcc Lcpyloop_%=        \n\t"
         : [num] "+r" (num)
         : [src] "r" (src),
           [dst] "r" (dst)
         : "memory"
         );
    7d2a:	fb 01       	movw	r30, r22
    7d2c:	dc 01       	movw	r26, r24
    7d2e:	40 ff       	sbrs	r20, 0
    7d30:	05 c0       	rjmp	.+10     	; 0x7d3c <Lcpyeven_23>
    7d32:	02 c0       	rjmp	.+4      	; 0x7d38 <Lcpyodd_23>

00007d34 <Lcpyloop_23>:
    7d34:	01 90       	ld	r0, Z+
    7d36:	0d 92       	st	X+, r0

00007d38 <Lcpyodd_23>:
    7d38:	01 90       	ld	r0, Z+
    7d3a:	0d 92       	st	X+, r0

00007d3c <Lcpyeven_23>:
    7d3c:	42 50       	subi	r20, 0x02	; 2
    7d3e:	d0 f7       	brcc	.-12     	; 0x7d34 <Lcpyloop_23>
    7d40:	50 40       	sbci	r21, 0x00	; 0
    7d42:	c0 f7       	brcc	.-16     	; 0x7d34 <Lcpyloop_23>
    return dst;
}
    7d44:	08 95       	ret

00007d46 <memmove8>:

//__attribute__ ((noinline))
void * memmove8 ( void * dst, const void* src, uint16_t num )
{
    if( src > dst) {
    7d46:	86 17       	cp	r24, r22
    7d48:	97 07       	cpc	r25, r23
    7d4a:	08 f4       	brcc	.+2      	; 0x7d4e <memmove8+0x8>
        // if src > dst then we can use the forward-stepping memcpy8
        return memcpy8( dst, src, num);
    7d4c:	ee cf       	rjmp	.-36     	; 0x7d2a <memcpy8>
    } else {
        // if src < dst then we have to step backward:
        dst = (char*)dst + num;
    7d4e:	84 0f       	add	r24, r20
    7d50:	95 1f       	adc	r25, r21
        src = (char*)src + num;
    7d52:	64 0f       	add	r22, r20
    7d54:	75 1f       	adc	r23, r21
             "  brcc Lmovloop_%=        \n\t"
             : [num] "+r" (num)
             : [src] "r" (src),
               [dst] "r" (dst)
             : "memory"
             );
    7d56:	fb 01       	movw	r30, r22
    7d58:	dc 01       	movw	r26, r24
    7d5a:	40 ff       	sbrs	r20, 0
    7d5c:	05 c0       	rjmp	.+10     	; 0x7d68 <Lmoveven_58>
    7d5e:	02 c0       	rjmp	.+4      	; 0x7d64 <Lmovodd_58>

00007d60 <Lmovloop_58>:
    7d60:	02 90       	ld	r0, -Z
    7d62:	0e 92       	st	-X, r0

00007d64 <Lmovodd_58>:
    7d64:	02 90       	ld	r0, -Z
    7d66:	0e 92       	st	-X, r0

00007d68 <Lmoveven_58>:
    7d68:	42 50       	subi	r20, 0x02	; 2
    7d6a:	d0 f7       	brcc	.-12     	; 0x7d60 <Lmovloop_58>
    7d6c:	50 40       	sbci	r21, 0x00	; 0
    7d6e:	c0 f7       	brcc	.-16     	; 0x7d60 <Lmovloop_58>
        return dst;
    }
}
    7d70:	08 95       	ret

00007d72 <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    7d72:	0f 93       	push	r16
    7d74:	1f 93       	push	r17
    7d76:	cf 93       	push	r28
    7d78:	df 93       	push	r29
    7d7a:	82 30       	cpi	r24, 0x02	; 2
    7d7c:	91 05       	cpc	r25, r1
    7d7e:	10 f4       	brcc	.+4      	; 0x7d84 <malloc+0x12>
    7d80:	82 e0       	ldi	r24, 0x02	; 2
    7d82:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    7d84:	e0 91 d7 10 	lds	r30, 0x10D7	; 0x8010d7 <__flp>
    7d88:	f0 91 d8 10 	lds	r31, 0x10D8	; 0x8010d8 <__flp+0x1>
    7d8c:	30 e0       	ldi	r19, 0x00	; 0
    7d8e:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    7d90:	70 e0       	ldi	r23, 0x00	; 0
    7d92:	60 e0       	ldi	r22, 0x00	; 0
    7d94:	d0 e0       	ldi	r29, 0x00	; 0
    7d96:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    7d98:	b0 e0       	ldi	r27, 0x00	; 0
    7d9a:	a0 e0       	ldi	r26, 0x00	; 0
    7d9c:	30 97       	sbiw	r30, 0x00	; 0
    7d9e:	99 f4       	brne	.+38     	; 0x7dc6 <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    7da0:	21 15       	cp	r18, r1
    7da2:	31 05       	cpc	r19, r1
    7da4:	09 f4       	brne	.+2      	; 0x7da8 <malloc+0x36>
    7da6:	4a c0       	rjmp	.+148    	; 0x7e3c <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    7da8:	28 1b       	sub	r18, r24
    7daa:	39 0b       	sbc	r19, r25
    7dac:	24 30       	cpi	r18, 0x04	; 4
    7dae:	31 05       	cpc	r19, r1
    7db0:	d8 f5       	brcc	.+118    	; 0x7e28 <malloc+0xb6>
    7db2:	8a 81       	ldd	r24, Y+2	; 0x02
    7db4:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    7db6:	61 15       	cp	r22, r1
    7db8:	71 05       	cpc	r23, r1
    7dba:	89 f1       	breq	.+98     	; 0x7e1e <malloc+0xac>
				sfp2->nx = sfp1->nx;
    7dbc:	fb 01       	movw	r30, r22
    7dbe:	93 83       	std	Z+3, r25	; 0x03
    7dc0:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    7dc2:	fe 01       	movw	r30, r28
    7dc4:	11 c0       	rjmp	.+34     	; 0x7de8 <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    7dc6:	40 81       	ld	r20, Z
    7dc8:	51 81       	ldd	r21, Z+1	; 0x01
    7dca:	02 81       	ldd	r16, Z+2	; 0x02
    7dcc:	13 81       	ldd	r17, Z+3	; 0x03
    7dce:	48 17       	cp	r20, r24
    7dd0:	59 07       	cpc	r21, r25
    7dd2:	e0 f0       	brcs	.+56     	; 0x7e0c <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    7dd4:	48 17       	cp	r20, r24
    7dd6:	59 07       	cpc	r21, r25
    7dd8:	99 f4       	brne	.+38     	; 0x7e00 <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    7dda:	10 97       	sbiw	r26, 0x00	; 0
    7ddc:	61 f0       	breq	.+24     	; 0x7df6 <malloc+0x84>
				fp2->nx = fp1->nx;
    7dde:	12 96       	adiw	r26, 0x02	; 2
    7de0:	0c 93       	st	X, r16
    7de2:	12 97       	sbiw	r26, 0x02	; 2
    7de4:	13 96       	adiw	r26, 0x03	; 3
    7de6:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    7de8:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    7dea:	cf 01       	movw	r24, r30
    7dec:	df 91       	pop	r29
    7dee:	cf 91       	pop	r28
    7df0:	1f 91       	pop	r17
    7df2:	0f 91       	pop	r16
    7df4:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    7df6:	00 93 d7 10 	sts	0x10D7, r16	; 0x8010d7 <__flp>
    7dfa:	10 93 d8 10 	sts	0x10D8, r17	; 0x8010d8 <__flp+0x1>
    7dfe:	f4 cf       	rjmp	.-24     	; 0x7de8 <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    7e00:	21 15       	cp	r18, r1
    7e02:	31 05       	cpc	r19, r1
    7e04:	51 f0       	breq	.+20     	; 0x7e1a <malloc+0xa8>
    7e06:	42 17       	cp	r20, r18
    7e08:	53 07       	cpc	r21, r19
    7e0a:	38 f0       	brcs	.+14     	; 0x7e1a <malloc+0xa8>
    7e0c:	a9 01       	movw	r20, r18
    7e0e:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    7e10:	9a 01       	movw	r18, r20
    7e12:	bd 01       	movw	r22, r26
    7e14:	df 01       	movw	r26, r30
    7e16:	f8 01       	movw	r30, r16
    7e18:	c1 cf       	rjmp	.-126    	; 0x7d9c <malloc+0x2a>
    7e1a:	ef 01       	movw	r28, r30
    7e1c:	f9 cf       	rjmp	.-14     	; 0x7e10 <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    7e1e:	90 93 d8 10 	sts	0x10D8, r25	; 0x8010d8 <__flp+0x1>
    7e22:	80 93 d7 10 	sts	0x10D7, r24	; 0x8010d7 <__flp>
    7e26:	cd cf       	rjmp	.-102    	; 0x7dc2 <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    7e28:	fe 01       	movw	r30, r28
    7e2a:	e2 0f       	add	r30, r18
    7e2c:	f3 1f       	adc	r31, r19
    7e2e:	81 93       	st	Z+, r24
    7e30:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    7e32:	22 50       	subi	r18, 0x02	; 2
    7e34:	31 09       	sbc	r19, r1
    7e36:	39 83       	std	Y+1, r19	; 0x01
    7e38:	28 83       	st	Y, r18
		return &(sfp2->nx);
    7e3a:	d7 cf       	rjmp	.-82     	; 0x7dea <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    7e3c:	20 91 4a 10 	lds	r18, 0x104A	; 0x80104a <__brkval>
    7e40:	30 91 4b 10 	lds	r19, 0x104B	; 0x80104b <__brkval+0x1>
    7e44:	23 2b       	or	r18, r19
    7e46:	41 f4       	brne	.+16     	; 0x7e58 <malloc+0xe6>
		__brkval = __malloc_heap_start;
    7e48:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    7e4c:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    7e50:	30 93 4b 10 	sts	0x104B, r19	; 0x80104b <__brkval+0x1>
    7e54:	20 93 4a 10 	sts	0x104A, r18	; 0x80104a <__brkval>
	cp = __malloc_heap_end;
    7e58:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    7e5c:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    7e60:	21 15       	cp	r18, r1
    7e62:	31 05       	cpc	r19, r1
    7e64:	41 f4       	brne	.+16     	; 0x7e76 <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    7e66:	2d b7       	in	r18, 0x3d	; 61
    7e68:	3e b7       	in	r19, 0x3e	; 62
    7e6a:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    7e6e:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    7e72:	24 1b       	sub	r18, r20
    7e74:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    7e76:	e0 91 4a 10 	lds	r30, 0x104A	; 0x80104a <__brkval>
    7e7a:	f0 91 4b 10 	lds	r31, 0x104B	; 0x80104b <__brkval+0x1>
    7e7e:	e2 17       	cp	r30, r18
    7e80:	f3 07       	cpc	r31, r19
    7e82:	a0 f4       	brcc	.+40     	; 0x7eac <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    7e84:	2e 1b       	sub	r18, r30
    7e86:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    7e88:	28 17       	cp	r18, r24
    7e8a:	39 07       	cpc	r19, r25
    7e8c:	78 f0       	brcs	.+30     	; 0x7eac <malloc+0x13a>
    7e8e:	ac 01       	movw	r20, r24
    7e90:	4e 5f       	subi	r20, 0xFE	; 254
    7e92:	5f 4f       	sbci	r21, 0xFF	; 255
    7e94:	24 17       	cp	r18, r20
    7e96:	35 07       	cpc	r19, r21
    7e98:	48 f0       	brcs	.+18     	; 0x7eac <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    7e9a:	4e 0f       	add	r20, r30
    7e9c:	5f 1f       	adc	r21, r31
    7e9e:	50 93 4b 10 	sts	0x104B, r21	; 0x80104b <__brkval+0x1>
    7ea2:	40 93 4a 10 	sts	0x104A, r20	; 0x80104a <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    7ea6:	81 93       	st	Z+, r24
    7ea8:	91 93       	st	Z+, r25
		return &(fp1->nx);
    7eaa:	9f cf       	rjmp	.-194    	; 0x7dea <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    7eac:	f0 e0       	ldi	r31, 0x00	; 0
    7eae:	e0 e0       	ldi	r30, 0x00	; 0
    7eb0:	9c cf       	rjmp	.-200    	; 0x7dea <malloc+0x78>

00007eb2 <free>:
}


void
free(void *p)
{
    7eb2:	cf 93       	push	r28
    7eb4:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    7eb6:	00 97       	sbiw	r24, 0x00	; 0
    7eb8:	e9 f0       	breq	.+58     	; 0x7ef4 <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    7eba:	fc 01       	movw	r30, r24
    7ebc:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    7ebe:	13 82       	std	Z+3, r1	; 0x03
    7ec0:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    7ec2:	a0 91 d7 10 	lds	r26, 0x10D7	; 0x8010d7 <__flp>
    7ec6:	b0 91 d8 10 	lds	r27, 0x10D8	; 0x8010d8 <__flp+0x1>
    7eca:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    7ecc:	30 e0       	ldi	r19, 0x00	; 0
    7ece:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    7ed0:	10 97       	sbiw	r26, 0x00	; 0
    7ed2:	a1 f4       	brne	.+40     	; 0x7efc <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    7ed4:	20 81       	ld	r18, Z
    7ed6:	31 81       	ldd	r19, Z+1	; 0x01
    7ed8:	82 0f       	add	r24, r18
    7eda:	93 1f       	adc	r25, r19
    7edc:	20 91 4a 10 	lds	r18, 0x104A	; 0x80104a <__brkval>
    7ee0:	30 91 4b 10 	lds	r19, 0x104B	; 0x80104b <__brkval+0x1>
    7ee4:	28 17       	cp	r18, r24
    7ee6:	39 07       	cpc	r19, r25
    7ee8:	09 f0       	breq	.+2      	; 0x7eec <free+0x3a>
    7eea:	61 c0       	rjmp	.+194    	; 0x7fae <free+0xfc>
			__brkval = cpnew;
    7eec:	f0 93 4b 10 	sts	0x104B, r31	; 0x80104b <__brkval+0x1>
    7ef0:	e0 93 4a 10 	sts	0x104A, r30	; 0x80104a <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    7ef4:	df 91       	pop	r29
    7ef6:	cf 91       	pop	r28
    7ef8:	08 95       	ret
    7efa:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    7efc:	ce 17       	cp	r28, r30
    7efe:	df 07       	cpc	r29, r31
    7f00:	e8 f5       	brcc	.+122    	; 0x7f7c <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    7f02:	4a 81       	ldd	r20, Y+2	; 0x02
    7f04:	5b 81       	ldd	r21, Y+3	; 0x03
    7f06:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    7f08:	41 15       	cp	r20, r1
    7f0a:	51 05       	cpc	r21, r1
    7f0c:	b1 f7       	brne	.-20     	; 0x7efa <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    7f0e:	e9 01       	movw	r28, r18
    7f10:	fb 83       	std	Y+3, r31	; 0x03
    7f12:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    7f14:	49 91       	ld	r20, Y+
    7f16:	59 91       	ld	r21, Y+
    7f18:	c4 0f       	add	r28, r20
    7f1a:	d5 1f       	adc	r29, r21
    7f1c:	ec 17       	cp	r30, r28
    7f1e:	fd 07       	cpc	r31, r29
    7f20:	61 f4       	brne	.+24     	; 0x7f3a <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    7f22:	80 81       	ld	r24, Z
    7f24:	91 81       	ldd	r25, Z+1	; 0x01
    7f26:	02 96       	adiw	r24, 0x02	; 2
    7f28:	84 0f       	add	r24, r20
    7f2a:	95 1f       	adc	r25, r21
    7f2c:	e9 01       	movw	r28, r18
    7f2e:	99 83       	std	Y+1, r25	; 0x01
    7f30:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    7f32:	82 81       	ldd	r24, Z+2	; 0x02
    7f34:	93 81       	ldd	r25, Z+3	; 0x03
    7f36:	9b 83       	std	Y+3, r25	; 0x03
    7f38:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    7f3a:	f0 e0       	ldi	r31, 0x00	; 0
    7f3c:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    7f3e:	12 96       	adiw	r26, 0x02	; 2
    7f40:	8d 91       	ld	r24, X+
    7f42:	9c 91       	ld	r25, X
    7f44:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    7f46:	00 97       	sbiw	r24, 0x00	; 0
    7f48:	b9 f5       	brne	.+110    	; 0x7fb8 <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    7f4a:	2d 91       	ld	r18, X+
    7f4c:	3c 91       	ld	r19, X
    7f4e:	11 97       	sbiw	r26, 0x01	; 1
    7f50:	cd 01       	movw	r24, r26
    7f52:	02 96       	adiw	r24, 0x02	; 2
    7f54:	82 0f       	add	r24, r18
    7f56:	93 1f       	adc	r25, r19
    7f58:	20 91 4a 10 	lds	r18, 0x104A	; 0x80104a <__brkval>
    7f5c:	30 91 4b 10 	lds	r19, 0x104B	; 0x80104b <__brkval+0x1>
    7f60:	28 17       	cp	r18, r24
    7f62:	39 07       	cpc	r19, r25
    7f64:	39 f6       	brne	.-114    	; 0x7ef4 <free+0x42>
		if (fp2 == NULL)
    7f66:	30 97       	sbiw	r30, 0x00	; 0
    7f68:	51 f5       	brne	.+84     	; 0x7fbe <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    7f6a:	10 92 d8 10 	sts	0x10D8, r1	; 0x8010d8 <__flp+0x1>
    7f6e:	10 92 d7 10 	sts	0x10D7, r1	; 0x8010d7 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    7f72:	b0 93 4b 10 	sts	0x104B, r27	; 0x80104b <__brkval+0x1>
    7f76:	a0 93 4a 10 	sts	0x104A, r26	; 0x80104a <__brkval>
    7f7a:	bc cf       	rjmp	.-136    	; 0x7ef4 <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    7f7c:	d3 83       	std	Z+3, r29	; 0x03
    7f7e:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    7f80:	40 81       	ld	r20, Z
    7f82:	51 81       	ldd	r21, Z+1	; 0x01
    7f84:	84 0f       	add	r24, r20
    7f86:	95 1f       	adc	r25, r21
    7f88:	c8 17       	cp	r28, r24
    7f8a:	d9 07       	cpc	r29, r25
    7f8c:	61 f4       	brne	.+24     	; 0x7fa6 <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    7f8e:	4e 5f       	subi	r20, 0xFE	; 254
    7f90:	5f 4f       	sbci	r21, 0xFF	; 255
    7f92:	88 81       	ld	r24, Y
    7f94:	99 81       	ldd	r25, Y+1	; 0x01
    7f96:	48 0f       	add	r20, r24
    7f98:	59 1f       	adc	r21, r25
    7f9a:	51 83       	std	Z+1, r21	; 0x01
    7f9c:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    7f9e:	8a 81       	ldd	r24, Y+2	; 0x02
    7fa0:	9b 81       	ldd	r25, Y+3	; 0x03
    7fa2:	93 83       	std	Z+3, r25	; 0x03
    7fa4:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    7fa6:	21 15       	cp	r18, r1
    7fa8:	31 05       	cpc	r19, r1
    7faa:	09 f0       	breq	.+2      	; 0x7fae <free+0xfc>
    7fac:	b0 cf       	rjmp	.-160    	; 0x7f0e <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    7fae:	f0 93 d8 10 	sts	0x10D8, r31	; 0x8010d8 <__flp+0x1>
    7fb2:	e0 93 d7 10 	sts	0x10D7, r30	; 0x8010d7 <__flp>
			return;
    7fb6:	9e cf       	rjmp	.-196    	; 0x7ef4 <free+0x42>
    7fb8:	fd 01       	movw	r30, r26
    7fba:	dc 01       	movw	r26, r24
    7fbc:	c0 cf       	rjmp	.-128    	; 0x7f3e <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    7fbe:	13 82       	std	Z+3, r1	; 0x03
    7fc0:	12 82       	std	Z+2, r1	; 0x02
    7fc2:	d7 cf       	rjmp	.-82     	; 0x7f72 <free+0xc0>

00007fc4 <realloc>:



void *
realloc(void *ptr, size_t len)
{
    7fc4:	4f 92       	push	r4
    7fc6:	5f 92       	push	r5
    7fc8:	6f 92       	push	r6
    7fca:	7f 92       	push	r7
    7fcc:	8f 92       	push	r8
    7fce:	9f 92       	push	r9
    7fd0:	af 92       	push	r10
    7fd2:	bf 92       	push	r11
    7fd4:	cf 92       	push	r12
    7fd6:	df 92       	push	r13
    7fd8:	ef 92       	push	r14
    7fda:	ff 92       	push	r15
    7fdc:	0f 93       	push	r16
    7fde:	1f 93       	push	r17
    7fe0:	cf 93       	push	r28
    7fe2:	df 93       	push	r29
    7fe4:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    7fe6:	00 97       	sbiw	r24, 0x00	; 0
    7fe8:	91 f4       	brne	.+36     	; 0x800e <realloc+0x4a>
		return malloc(len);
    7fea:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    7fec:	df 91       	pop	r29
    7fee:	cf 91       	pop	r28
    7ff0:	1f 91       	pop	r17
    7ff2:	0f 91       	pop	r16
    7ff4:	ff 90       	pop	r15
    7ff6:	ef 90       	pop	r14
    7ff8:	df 90       	pop	r13
    7ffa:	cf 90       	pop	r12
    7ffc:	bf 90       	pop	r11
    7ffe:	af 90       	pop	r10
    8000:	9f 90       	pop	r9
    8002:	8f 90       	pop	r8
    8004:	7f 90       	pop	r7
    8006:	6f 90       	pop	r6
    8008:	5f 90       	pop	r5
    800a:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    800c:	b2 ce       	rjmp	.-668    	; 0x7d72 <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    800e:	fc 01       	movw	r30, r24
    8010:	e6 0f       	add	r30, r22
    8012:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    8014:	9c 01       	movw	r18, r24
    8016:	22 50       	subi	r18, 0x02	; 2
    8018:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    801a:	e2 17       	cp	r30, r18
    801c:	f3 07       	cpc	r31, r19
    801e:	08 f4       	brcc	.+2      	; 0x8022 <realloc+0x5e>
    8020:	a5 c0       	rjmp	.+330    	; 0x816c <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    8022:	d9 01       	movw	r26, r18
    8024:	cd 91       	ld	r28, X+
    8026:	dc 91       	ld	r29, X
    8028:	11 97       	sbiw	r26, 0x01	; 1
    802a:	c6 17       	cp	r28, r22
    802c:	d7 07       	cpc	r29, r23
    802e:	18 f1       	brcs	.+70     	; 0x8076 <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    8030:	c5 30       	cpi	r28, 0x05	; 5
    8032:	d1 05       	cpc	r29, r1
    8034:	70 f0       	brcs	.+28     	; 0x8052 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    8036:	ce 01       	movw	r24, r28
    8038:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    803a:	86 17       	cp	r24, r22
    803c:	97 07       	cpc	r25, r23
    803e:	48 f0       	brcs	.+18     	; 0x8052 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    8040:	c6 1b       	sub	r28, r22
    8042:	d7 0b       	sbc	r29, r23
    8044:	22 97       	sbiw	r28, 0x02	; 2
    8046:	c1 93       	st	Z+, r28
    8048:	d1 93       	st	Z+, r29
		fp1->sz = len;
    804a:	6d 93       	st	X+, r22
    804c:	7c 93       	st	X, r23
		free(&(fp2->nx));
    804e:	cf 01       	movw	r24, r30
    8050:	30 df       	rcall	.-416    	; 0x7eb2 <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    8052:	c8 01       	movw	r24, r16
    8054:	df 91       	pop	r29
    8056:	cf 91       	pop	r28
    8058:	1f 91       	pop	r17
    805a:	0f 91       	pop	r16
    805c:	ff 90       	pop	r15
    805e:	ef 90       	pop	r14
    8060:	df 90       	pop	r13
    8062:	cf 90       	pop	r12
    8064:	bf 90       	pop	r11
    8066:	af 90       	pop	r10
    8068:	9f 90       	pop	r9
    806a:	8f 90       	pop	r8
    806c:	7f 90       	pop	r7
    806e:	6f 90       	pop	r6
    8070:	5f 90       	pop	r5
    8072:	4f 90       	pop	r4
    8074:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    8076:	5b 01       	movw	r10, r22
    8078:	ac 1a       	sub	r10, r28
    807a:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    807c:	4c 01       	movw	r8, r24
    807e:	8c 0e       	add	r8, r28
    8080:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    8082:	a0 91 d7 10 	lds	r26, 0x10D7	; 0x8010d7 <__flp>
    8086:	b0 91 d8 10 	lds	r27, 0x10D8	; 0x8010d8 <__flp+0x1>
    808a:	51 2c       	mov	r5, r1
    808c:	41 2c       	mov	r4, r1
    808e:	f1 2c       	mov	r15, r1
    8090:	e1 2c       	mov	r14, r1
    8092:	10 97       	sbiw	r26, 0x00	; 0
    8094:	01 f5       	brne	.+64     	; 0x80d6 <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    8096:	80 91 4a 10 	lds	r24, 0x104A	; 0x80104a <__brkval>
    809a:	90 91 4b 10 	lds	r25, 0x104B	; 0x80104b <__brkval+0x1>
    809e:	88 15       	cp	r24, r8
    80a0:	99 05       	cpc	r25, r9
    80a2:	09 f0       	breq	.+2      	; 0x80a6 <realloc+0xe2>
    80a4:	56 c0       	rjmp	.+172    	; 0x8152 <realloc+0x18e>
    80a6:	46 16       	cp	r4, r22
    80a8:	57 06       	cpc	r5, r23
    80aa:	08 f0       	brcs	.+2      	; 0x80ae <realloc+0xea>
    80ac:	52 c0       	rjmp	.+164    	; 0x8152 <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    80ae:	8d b7       	in	r24, 0x3d	; 61
    80b0:	9e b7       	in	r25, 0x3e	; 62
    80b2:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    80b6:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    80ba:	84 1b       	sub	r24, r20
    80bc:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    80be:	e8 17       	cp	r30, r24
    80c0:	f9 07       	cpc	r31, r25
    80c2:	08 f0       	brcs	.+2      	; 0x80c6 <realloc+0x102>
    80c4:	53 c0       	rjmp	.+166    	; 0x816c <realloc+0x1a8>
			__brkval = cp;
    80c6:	f0 93 4b 10 	sts	0x104B, r31	; 0x80104b <__brkval+0x1>
    80ca:	e0 93 4a 10 	sts	0x104A, r30	; 0x80104a <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    80ce:	f9 01       	movw	r30, r18
    80d0:	71 83       	std	Z+1, r23	; 0x01
    80d2:	60 83       	st	Z, r22
			return ptr;
    80d4:	be cf       	rjmp	.-132    	; 0x8052 <realloc+0x8e>
    80d6:	8d 91       	ld	r24, X+
    80d8:	9c 91       	ld	r25, X
    80da:	11 97       	sbiw	r26, 0x01	; 1
    80dc:	12 96       	adiw	r26, 0x02	; 2
    80de:	6c 90       	ld	r6, X
    80e0:	12 97       	sbiw	r26, 0x02	; 2
    80e2:	13 96       	adiw	r26, 0x03	; 3
    80e4:	7c 90       	ld	r7, X
    80e6:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    80e8:	a8 15       	cp	r26, r8
    80ea:	b9 05       	cpc	r27, r9
    80ec:	59 f5       	brne	.+86     	; 0x8144 <realloc+0x180>
    80ee:	6c 01       	movw	r12, r24
    80f0:	42 e0       	ldi	r20, 0x02	; 2
    80f2:	c4 0e       	add	r12, r20
    80f4:	d1 1c       	adc	r13, r1
    80f6:	ca 14       	cp	r12, r10
    80f8:	db 04       	cpc	r13, r11
    80fa:	20 f1       	brcs	.+72     	; 0x8144 <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    80fc:	ac 01       	movw	r20, r24
    80fe:	4a 19       	sub	r20, r10
    8100:	5b 09       	sbc	r21, r11
    8102:	da 01       	movw	r26, r20
    8104:	12 96       	adiw	r26, 0x02	; 2
    8106:	15 97       	sbiw	r26, 0x05	; 5
    8108:	80 f0       	brcs	.+32     	; 0x812a <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    810a:	62 82       	std	Z+2, r6	; 0x02
    810c:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    810e:	51 83       	std	Z+1, r21	; 0x01
    8110:	40 83       	st	Z, r20
				fp1->sz = len;
    8112:	d9 01       	movw	r26, r18
    8114:	6d 93       	st	X+, r22
    8116:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    8118:	e1 14       	cp	r14, r1
    811a:	f1 04       	cpc	r15, r1
    811c:	71 f0       	breq	.+28     	; 0x813a <realloc+0x176>
				ofp3->nx = fp2;
    811e:	d7 01       	movw	r26, r14
    8120:	13 96       	adiw	r26, 0x03	; 3
    8122:	fc 93       	st	X, r31
    8124:	ee 93       	st	-X, r30
    8126:	12 97       	sbiw	r26, 0x02	; 2
    8128:	94 cf       	rjmp	.-216    	; 0x8052 <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    812a:	22 96       	adiw	r28, 0x02	; 2
    812c:	8c 0f       	add	r24, r28
    812e:	9d 1f       	adc	r25, r29
    8130:	f9 01       	movw	r30, r18
    8132:	91 83       	std	Z+1, r25	; 0x01
    8134:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    8136:	f3 01       	movw	r30, r6
    8138:	ef cf       	rjmp	.-34     	; 0x8118 <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    813a:	f0 93 d8 10 	sts	0x10D8, r31	; 0x8010d8 <__flp+0x1>
    813e:	e0 93 d7 10 	sts	0x10D7, r30	; 0x8010d7 <__flp>
    8142:	87 cf       	rjmp	.-242    	; 0x8052 <realloc+0x8e>
    8144:	48 16       	cp	r4, r24
    8146:	59 06       	cpc	r5, r25
    8148:	08 f4       	brcc	.+2      	; 0x814c <realloc+0x188>
    814a:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    814c:	7d 01       	movw	r14, r26
    814e:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    8150:	a0 cf       	rjmp	.-192    	; 0x8092 <realloc+0xce>
    8152:	cb 01       	movw	r24, r22
    8154:	0e de       	rcall	.-996    	; 0x7d72 <malloc>
    8156:	7c 01       	movw	r14, r24
    8158:	00 97       	sbiw	r24, 0x00	; 0
    815a:	41 f0       	breq	.+16     	; 0x816c <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    815c:	ae 01       	movw	r20, r28
    815e:	b8 01       	movw	r22, r16
    8160:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <memcpy>
	free(ptr);
    8164:	c8 01       	movw	r24, r16
    8166:	a5 de       	rcall	.-694    	; 0x7eb2 <free>
	return memp;
    8168:	87 01       	movw	r16, r14
    816a:	73 cf       	rjmp	.-282    	; 0x8052 <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    816c:	10 e0       	ldi	r17, 0x00	; 0
    816e:	00 e0       	ldi	r16, 0x00	; 0
    8170:	70 cf       	rjmp	.-288    	; 0x8052 <realloc+0x8e>

00008172 <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    8172:	1d ba       	out	0x1d, r1	; 29
    8174:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    8178:	1c bc       	out	0x2c, r1	; 44
    817a:	10 be       	out	0x30, r1	; 48
    817c:	1f ba       	out	0x1f, r1	; 31
    817e:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8182:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    8186:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    818a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    818e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    8192:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8196:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    819a:	11 b8       	out	0x01, r1	; 1
    819c:	14 b8       	out	0x04, r1	; 4
    819e:	17 b8       	out	0x07, r1	; 7
    81a0:	1a b8       	out	0x0a, r1	; 10
    81a2:	1d b8       	out	0x0d, r1	; 13
    81a4:	10 ba       	out	0x10, r1	; 16
    81a6:	12 b8       	out	0x02, r1	; 2
    81a8:	15 b8       	out	0x05, r1	; 5
    81aa:	18 b8       	out	0x08, r1	; 8
    81ac:	1b b8       	out	0x0b, r1	; 11
    81ae:	1e b8       	out	0x0e, r1	; 14
    81b0:	11 ba       	out	0x11, r1	; 17
    81b2:	08 95       	ret

000081b4 <_init_Teensyduino_internal_>:
    81b4:	f8 94       	cli
    81b6:	e1 e6       	ldi	r30, 0x61	; 97
    81b8:	f0 e0       	ldi	r31, 0x00	; 0
    81ba:	20 e8       	ldi	r18, 0x80	; 128
    81bc:	20 83       	st	Z, r18
    81be:	10 82       	st	Z, r1
    81c0:	83 e0       	ldi	r24, 0x03	; 3
    81c2:	84 bd       	out	0x24, r24	; 36
    81c4:	85 bd       	out	0x25, r24	; 37
    81c6:	ee e6       	ldi	r30, 0x6E	; 110
    81c8:	f0 e0       	ldi	r31, 0x00	; 0
    81ca:	80 81       	ld	r24, Z
    81cc:	81 60       	ori	r24, 0x01	; 1
    81ce:	80 83       	st	Z, r24
    81d0:	91 e0       	ldi	r25, 0x01	; 1
    81d2:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    81d6:	82 e0       	ldi	r24, 0x02	; 2
    81d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    81dc:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    81e0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    81e4:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    81e8:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    81ec:	86 e8       	ldi	r24, 0x86	; 134
    81ee:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    81f2:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    81f6:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    81fa:	d9 d1       	rcall	.+946    	; 0x85ae <usb_init>
    81fc:	78 94       	sei
    81fe:	08 95       	ret

00008200 <analogRead>:
    8200:	9a ed       	ldi	r25, 0xDA	; 218
    8202:	98 0f       	add	r25, r24
    8204:	98 30       	cpi	r25, 0x08	; 8
    8206:	10 f1       	brcs	.+68     	; 0x824c <analogRead+0x4c>
    8208:	88 30       	cpi	r24, 0x08	; 8
    820a:	60 f4       	brcc	.+24     	; 0x8224 <analogRead+0x24>
    820c:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8210:	21 e0       	ldi	r18, 0x01	; 1
    8212:	30 e0       	ldi	r19, 0x00	; 0
    8214:	08 2e       	mov	r0, r24
    8216:	01 c0       	rjmp	.+2      	; 0x821a <analogRead+0x1a>
    8218:	22 0f       	add	r18, r18
    821a:	0a 94       	dec	r0
    821c:	ea f7       	brpl	.-6      	; 0x8218 <analogRead+0x18>
    821e:	92 2b       	or	r25, r18
    8220:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8224:	8f 71       	andi	r24, 0x1F	; 31
    8226:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    822a:	89 2b       	or	r24, r25
    822c:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    8230:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8234:	80 64       	ori	r24, 0x40	; 64
    8236:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    823a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    823e:	86 fd       	sbrc	r24, 6
    8240:	fc cf       	rjmp	.-8      	; 0x823a <analogRead+0x3a>
    8242:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    8246:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    824a:	08 95       	ret
    824c:	89 2f       	mov	r24, r25
    824e:	de cf       	rjmp	.-68     	; 0x820c <analogRead+0xc>

00008250 <_pinMode_output>:
    8250:	8e 32       	cpi	r24, 0x2E	; 46
    8252:	70 f4       	brcc	.+28     	; 0x8270 <_pinMode_output+0x20>
    8254:	e8 e3       	ldi	r30, 0x38	; 56
    8256:	f7 e0       	ldi	r31, 0x07	; 7
    8258:	88 0f       	add	r24, r24
    825a:	e8 0f       	add	r30, r24
    825c:	f1 1d       	adc	r31, r1
    825e:	25 91       	lpm	r18, Z+
    8260:	e4 91       	lpm	r30, Z
    8262:	f0 e0       	ldi	r31, 0x00	; 0
    8264:	9f b7       	in	r25, 0x3f	; 63
    8266:	f8 94       	cli
    8268:	81 81       	ldd	r24, Z+1	; 0x01
    826a:	82 2b       	or	r24, r18
    826c:	81 83       	std	Z+1, r24	; 0x01
    826e:	9f bf       	out	0x3f, r25	; 63
    8270:	08 95       	ret

00008272 <_digitalWrite_HIGH>:
    8272:	ee 32       	cpi	r30, 0x2E	; 46
    8274:	50 f4       	brcc	.+20     	; 0x828a <_digitalWrite_bailout>
    8276:	ee 0f       	add	r30, r30
    8278:	ea 5b       	subi	r30, 0xBA	; 186
    827a:	fe 4b       	sbci	r31, 0xBE	; 190
    827c:	09 94       	ijmp

0000827e <_digitalWrite_LOW>:
    827e:	ee 32       	cpi	r30, 0x2E	; 46
    8280:	20 f4       	brcc	.+8      	; 0x828a <_digitalWrite_bailout>
    8282:	ee 0f       	add	r30, r30
    8284:	ee 55       	subi	r30, 0x5E	; 94
    8286:	fe 4b       	sbci	r31, 0xBE	; 190
    8288:	09 94       	ijmp

0000828a <_digitalWrite_bailout>:
    828a:	08 95       	ret

0000828c <_digitalWrite_HIGH_TABLE>:
    828c:	58 9a       	sbi	0x0b, 0	; 11
    828e:	b6 c0       	rjmp	.+364    	; 0x83fc <_digitalWrite_OC0B>
    8290:	59 9a       	sbi	0x0b, 1	; 11
    8292:	d0 c0       	rjmp	.+416    	; 0x8434 <_digitalWrite_OC2B>
    8294:	5a 9a       	sbi	0x0b, 2	; 11
    8296:	08 95       	ret
    8298:	5b 9a       	sbi	0x0b, 3	; 11
    829a:	08 95       	ret
    829c:	5c 9a       	sbi	0x0b, 4	; 11
    829e:	08 95       	ret
    82a0:	5d 9a       	sbi	0x0b, 5	; 11
    82a2:	08 95       	ret
    82a4:	5e 9a       	sbi	0x0b, 6	; 11
    82a6:	08 95       	ret
    82a8:	5f 9a       	sbi	0x0b, 7	; 11
    82aa:	08 95       	ret
    82ac:	70 9a       	sbi	0x0e, 0	; 14
    82ae:	08 95       	ret
    82b0:	71 9a       	sbi	0x0e, 1	; 14
    82b2:	08 95       	ret
    82b4:	40 9a       	sbi	0x08, 0	; 8
    82b6:	08 95       	ret
    82b8:	41 9a       	sbi	0x08, 1	; 8
    82ba:	08 95       	ret
    82bc:	42 9a       	sbi	0x08, 2	; 8
    82be:	08 95       	ret
    82c0:	43 9a       	sbi	0x08, 3	; 8
    82c2:	08 95       	ret
    82c4:	44 9a       	sbi	0x08, 4	; 8
    82c6:	c8 c0       	rjmp	.+400    	; 0x8458 <_digitalWrite_OC3C>
    82c8:	45 9a       	sbi	0x08, 5	; 8
    82ca:	c0 c0       	rjmp	.+384    	; 0x844c <_digitalWrite_OC3B>
    82cc:	46 9a       	sbi	0x08, 6	; 8
    82ce:	b8 c0       	rjmp	.+368    	; 0x8440 <_digitalWrite_OC3A>
    82d0:	47 9a       	sbi	0x08, 7	; 8
    82d2:	08 95       	ret
    82d4:	76 9a       	sbi	0x0e, 6	; 14
    82d6:	08 95       	ret
    82d8:	77 9a       	sbi	0x0e, 7	; 14
    82da:	08 95       	ret
    82dc:	28 9a       	sbi	0x05, 0	; 5
    82de:	08 95       	ret
    82e0:	29 9a       	sbi	0x05, 1	; 5
    82e2:	08 95       	ret
    82e4:	2a 9a       	sbi	0x05, 2	; 5
    82e6:	08 95       	ret
    82e8:	2b 9a       	sbi	0x05, 3	; 5
    82ea:	08 95       	ret
    82ec:	2c 9a       	sbi	0x05, 4	; 5
    82ee:	9c c0       	rjmp	.+312    	; 0x8428 <_digitalWrite_OC2A>
    82f0:	2d 9a       	sbi	0x05, 5	; 5
    82f2:	88 c0       	rjmp	.+272    	; 0x8404 <_digitalWrite_OC1A>
    82f4:	2e 9a       	sbi	0x05, 6	; 5
    82f6:	8c c0       	rjmp	.+280    	; 0x8410 <_digitalWrite_OC1B>
    82f8:	2f 9a       	sbi	0x05, 7	; 5
    82fa:	90 c0       	rjmp	.+288    	; 0x841c <_digitalWrite_OC1C>
    82fc:	10 9a       	sbi	0x02, 0	; 2
    82fe:	08 95       	ret
    8300:	11 9a       	sbi	0x02, 1	; 2
    8302:	08 95       	ret
    8304:	12 9a       	sbi	0x02, 2	; 2
    8306:	08 95       	ret
    8308:	13 9a       	sbi	0x02, 3	; 2
    830a:	08 95       	ret
    830c:	14 9a       	sbi	0x02, 4	; 2
    830e:	08 95       	ret
    8310:	15 9a       	sbi	0x02, 5	; 2
    8312:	08 95       	ret
    8314:	16 9a       	sbi	0x02, 6	; 2
    8316:	08 95       	ret
    8318:	17 9a       	sbi	0x02, 7	; 2
    831a:	08 95       	ret
    831c:	74 9a       	sbi	0x0e, 4	; 14
    831e:	08 95       	ret
    8320:	75 9a       	sbi	0x0e, 5	; 14
    8322:	08 95       	ret
    8324:	88 9a       	sbi	0x11, 0	; 17
    8326:	08 95       	ret
    8328:	89 9a       	sbi	0x11, 1	; 17
    832a:	08 95       	ret
    832c:	8a 9a       	sbi	0x11, 2	; 17
    832e:	08 95       	ret
    8330:	8b 9a       	sbi	0x11, 3	; 17
    8332:	08 95       	ret
    8334:	8c 9a       	sbi	0x11, 4	; 17
    8336:	08 95       	ret
    8338:	8d 9a       	sbi	0x11, 5	; 17
    833a:	08 95       	ret
    833c:	8e 9a       	sbi	0x11, 6	; 17
    833e:	08 95       	ret
    8340:	8f 9a       	sbi	0x11, 7	; 17
    8342:	08 95       	ret

00008344 <_digitalWrite_LOW_TABLE>:
    8344:	58 98       	cbi	0x0b, 0	; 11
    8346:	5a c0       	rjmp	.+180    	; 0x83fc <_digitalWrite_OC0B>
    8348:	59 98       	cbi	0x0b, 1	; 11
    834a:	74 c0       	rjmp	.+232    	; 0x8434 <_digitalWrite_OC2B>
    834c:	5a 98       	cbi	0x0b, 2	; 11
    834e:	08 95       	ret
    8350:	5b 98       	cbi	0x0b, 3	; 11
    8352:	08 95       	ret
    8354:	5c 98       	cbi	0x0b, 4	; 11
    8356:	08 95       	ret
    8358:	5d 98       	cbi	0x0b, 5	; 11
    835a:	08 95       	ret
    835c:	5e 98       	cbi	0x0b, 6	; 11
    835e:	08 95       	ret
    8360:	5f 98       	cbi	0x0b, 7	; 11
    8362:	08 95       	ret
    8364:	70 98       	cbi	0x0e, 0	; 14
    8366:	08 95       	ret
    8368:	71 98       	cbi	0x0e, 1	; 14
    836a:	08 95       	ret
    836c:	40 98       	cbi	0x08, 0	; 8
    836e:	08 95       	ret
    8370:	41 98       	cbi	0x08, 1	; 8
    8372:	08 95       	ret
    8374:	42 98       	cbi	0x08, 2	; 8
    8376:	08 95       	ret
    8378:	43 98       	cbi	0x08, 3	; 8
    837a:	08 95       	ret
    837c:	44 98       	cbi	0x08, 4	; 8
    837e:	6c c0       	rjmp	.+216    	; 0x8458 <_digitalWrite_OC3C>
    8380:	45 98       	cbi	0x08, 5	; 8
    8382:	64 c0       	rjmp	.+200    	; 0x844c <_digitalWrite_OC3B>
    8384:	46 98       	cbi	0x08, 6	; 8
    8386:	5c c0       	rjmp	.+184    	; 0x8440 <_digitalWrite_OC3A>
    8388:	47 98       	cbi	0x08, 7	; 8
    838a:	08 95       	ret
    838c:	76 98       	cbi	0x0e, 6	; 14
    838e:	08 95       	ret
    8390:	77 98       	cbi	0x0e, 7	; 14
    8392:	08 95       	ret
    8394:	28 98       	cbi	0x05, 0	; 5
    8396:	08 95       	ret
    8398:	29 98       	cbi	0x05, 1	; 5
    839a:	08 95       	ret
    839c:	2a 98       	cbi	0x05, 2	; 5
    839e:	08 95       	ret
    83a0:	2b 98       	cbi	0x05, 3	; 5
    83a2:	08 95       	ret
    83a4:	2c 98       	cbi	0x05, 4	; 5
    83a6:	40 c0       	rjmp	.+128    	; 0x8428 <_digitalWrite_OC2A>
    83a8:	2d 98       	cbi	0x05, 5	; 5
    83aa:	2c c0       	rjmp	.+88     	; 0x8404 <_digitalWrite_OC1A>
    83ac:	2e 98       	cbi	0x05, 6	; 5
    83ae:	30 c0       	rjmp	.+96     	; 0x8410 <_digitalWrite_OC1B>
    83b0:	2f 98       	cbi	0x05, 7	; 5
    83b2:	34 c0       	rjmp	.+104    	; 0x841c <_digitalWrite_OC1C>
    83b4:	10 98       	cbi	0x02, 0	; 2
    83b6:	08 95       	ret
    83b8:	11 98       	cbi	0x02, 1	; 2
    83ba:	08 95       	ret
    83bc:	12 98       	cbi	0x02, 2	; 2
    83be:	08 95       	ret
    83c0:	13 98       	cbi	0x02, 3	; 2
    83c2:	08 95       	ret
    83c4:	14 98       	cbi	0x02, 4	; 2
    83c6:	08 95       	ret
    83c8:	15 98       	cbi	0x02, 5	; 2
    83ca:	08 95       	ret
    83cc:	16 98       	cbi	0x02, 6	; 2
    83ce:	08 95       	ret
    83d0:	17 98       	cbi	0x02, 7	; 2
    83d2:	08 95       	ret
    83d4:	74 98       	cbi	0x0e, 4	; 14
    83d6:	08 95       	ret
    83d8:	75 98       	cbi	0x0e, 5	; 14
    83da:	08 95       	ret
    83dc:	88 98       	cbi	0x11, 0	; 17
    83de:	08 95       	ret
    83e0:	89 98       	cbi	0x11, 1	; 17
    83e2:	08 95       	ret
    83e4:	8a 98       	cbi	0x11, 2	; 17
    83e6:	08 95       	ret
    83e8:	8b 98       	cbi	0x11, 3	; 17
    83ea:	08 95       	ret
    83ec:	8c 98       	cbi	0x11, 4	; 17
    83ee:	08 95       	ret
    83f0:	8d 98       	cbi	0x11, 5	; 17
    83f2:	08 95       	ret
    83f4:	8e 98       	cbi	0x11, 6	; 17
    83f6:	08 95       	ret
    83f8:	8f 98       	cbi	0x11, 7	; 17
    83fa:	08 95       	ret

000083fc <_digitalWrite_OC0B>:
    83fc:	e4 b5       	in	r30, 0x24	; 36
    83fe:	ef 7d       	andi	r30, 0xDF	; 223
    8400:	e4 bd       	out	0x24, r30	; 36
    8402:	08 95       	ret

00008404 <_digitalWrite_OC1A>:
    8404:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8408:	ef 77       	andi	r30, 0x7F	; 127
    840a:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    840e:	08 95       	ret

00008410 <_digitalWrite_OC1B>:
    8410:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8414:	ef 7d       	andi	r30, 0xDF	; 223
    8416:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    841a:	08 95       	ret

0000841c <_digitalWrite_OC1C>:
    841c:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8420:	e7 7f       	andi	r30, 0xF7	; 247
    8422:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8426:	08 95       	ret

00008428 <_digitalWrite_OC2A>:
    8428:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    842c:	ef 77       	andi	r30, 0x7F	; 127
    842e:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8432:	08 95       	ret

00008434 <_digitalWrite_OC2B>:
    8434:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8438:	ef 7d       	andi	r30, 0xDF	; 223
    843a:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    843e:	08 95       	ret

00008440 <_digitalWrite_OC3A>:
    8440:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8444:	ef 77       	andi	r30, 0x7F	; 127
    8446:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    844a:	08 95       	ret

0000844c <_digitalWrite_OC3B>:
    844c:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8450:	ef 7d       	andi	r30, 0xDF	; 223
    8452:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8456:	08 95       	ret

00008458 <_digitalWrite_OC3C>:
    8458:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    845c:	e7 7f       	andi	r30, 0xF7	; 247
    845e:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8462:	08 95       	ret

00008464 <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    8464:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    8466:	84 b7       	in	r24, 0x34	; 52
    8468:	87 7f       	andi	r24, 0xF7	; 247
    846a:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    846c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    8470:	80 61       	ori	r24, 0x10	; 16
    8472:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    8476:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    847a:	80 e2       	ldi	r24, 0x20	; 32
    847c:	9e e4       	ldi	r25, 0x4E	; 78

0000847e <L_1164_loop>:
    847e:	01 97       	sbiw	r24, 0x01	; 1
    8480:	f1 f7       	brne	.-4      	; 0x847e <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    8482:	81 e0       	ldi	r24, 0x01	; 1
    8484:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    8488:	80 e2       	ldi	r24, 0x20	; 32
    848a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    848e:	80 e6       	ldi	r24, 0x60	; 96
    8490:	9a ee       	ldi	r25, 0xEA	; 234

00008492 <L_1178_loop>:
    8492:	01 97       	sbiw	r24, 0x01	; 1
    8494:	f1 f7       	brne	.-4      	; 0x8492 <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    8496:	6d de       	rcall	.-806    	; 0x8172 <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    8498:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    849c:	ff cf       	rjmp	.-2      	; 0x849c <L_1178_loop+0xa>

0000849e <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    849e:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    84a0:	68 de       	rcall	.-816    	; 0x8172 <disable_peripherals>
    84a2:	80 e6       	ldi	r24, 0x60	; 96
    84a4:	9a ee       	ldi	r25, 0xEA	; 234

000084a6 <L_1203_loop>:
    84a6:	01 97       	sbiw	r24, 0x01	; 1
    84a8:	f1 f7       	brne	.-4      	; 0x84a6 <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    84aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    84ae:	ff cf       	rjmp	.-2      	; 0x84ae <L_1203_loop+0x8>

000084b0 <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    84b0:	8f 93       	push	r24
    84b2:	8f b7       	in	r24, 0x3f	; 63
    84b4:	8f 93       	push	r24
    84b6:	80 91 4c 10 	lds	r24, 0x104C	; 0x80104c <timer0_fract_count>
    84ba:	8d 5f       	subi	r24, 0xFD	; 253
    84bc:	8d 37       	cpi	r24, 0x7D	; 125
    84be:	d0 f4       	brcc	.+52     	; 0x84f4 <L_1218_fract_roll>

000084c0 <L_1218_fract_noroll>:
    84c0:	80 93 4c 10 	sts	0x104C, r24	; 0x80104c <timer0_fract_count>
    84c4:	80 91 4d 10 	lds	r24, 0x104D	; 0x80104d <timer0_millis_count>
    84c8:	8f 5f       	subi	r24, 0xFF	; 255
    84ca:	80 93 4d 10 	sts	0x104D, r24	; 0x80104d <timer0_millis_count>
    84ce:	d8 f0       	brcs	.+54     	; 0x8506 <L_1218_ovcount>

000084d0 <L_1218_millis_inc_sext>:
    84d0:	80 91 4e 10 	lds	r24, 0x104E	; 0x80104e <timer0_millis_count+0x1>
    84d4:	8f 4f       	sbci	r24, 0xFF	; 255
    84d6:	80 93 4e 10 	sts	0x104E, r24	; 0x80104e <timer0_millis_count+0x1>
    84da:	a8 f0       	brcs	.+42     	; 0x8506 <L_1218_ovcount>
    84dc:	80 91 4f 10 	lds	r24, 0x104F	; 0x80104f <timer0_millis_count+0x2>
    84e0:	8f 4f       	sbci	r24, 0xFF	; 255
    84e2:	80 93 4f 10 	sts	0x104F, r24	; 0x80104f <timer0_millis_count+0x2>
    84e6:	78 f0       	brcs	.+30     	; 0x8506 <L_1218_ovcount>
    84e8:	80 91 50 10 	lds	r24, 0x1050	; 0x801050 <timer0_millis_count+0x3>
    84ec:	8f 4f       	sbci	r24, 0xFF	; 255
    84ee:	80 93 50 10 	sts	0x1050, r24	; 0x801050 <timer0_millis_count+0x3>
    84f2:	09 c0       	rjmp	.+18     	; 0x8506 <L_1218_ovcount>

000084f4 <L_1218_fract_roll>:
    84f4:	8d 57       	subi	r24, 0x7D	; 125
    84f6:	80 93 4c 10 	sts	0x104C, r24	; 0x80104c <timer0_fract_count>
    84fa:	80 91 4d 10 	lds	r24, 0x104D	; 0x80104d <timer0_millis_count>
    84fe:	8e 5f       	subi	r24, 0xFE	; 254
    8500:	80 93 4d 10 	sts	0x104D, r24	; 0x80104d <timer0_millis_count>
    8504:	28 f7       	brcc	.-54     	; 0x84d0 <L_1218_millis_inc_sext>

00008506 <L_1218_ovcount>:
    8506:	80 91 51 10 	lds	r24, 0x1051	; 0x801051 <timer0_micros_count>
    850a:	8c 5f       	subi	r24, 0xFC	; 252
    850c:	80 93 51 10 	sts	0x1051, r24	; 0x801051 <timer0_micros_count>
    8510:	58 f0       	brcs	.+22     	; 0x8528 <L_1218_end>
    8512:	80 91 52 10 	lds	r24, 0x1052	; 0x801052 <timer0_micros_count+0x1>
    8516:	8f 4f       	sbci	r24, 0xFF	; 255
    8518:	80 93 52 10 	sts	0x1052, r24	; 0x801052 <timer0_micros_count+0x1>
    851c:	28 f0       	brcs	.+10     	; 0x8528 <L_1218_end>
    851e:	80 91 53 10 	lds	r24, 0x1053	; 0x801053 <timer0_micros_count+0x2>
    8522:	8f 4f       	sbci	r24, 0xFF	; 255
    8524:	80 93 53 10 	sts	0x1053, r24	; 0x801053 <timer0_micros_count+0x2>

00008528 <L_1218_end>:
    8528:	8f 91       	pop	r24
    852a:	8f bf       	out	0x3f, r24	; 63
    852c:	8f 91       	pop	r24
    852e:	18 95       	reti

00008530 <delay>:
	);
}


void delay(uint32_t ms)
{
    8530:	cf 92       	push	r12
    8532:	df 92       	push	r13
    8534:	ef 92       	push	r14
    8536:	ff 92       	push	r15
    8538:	6b 01       	movw	r12, r22
    853a:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    853c:	19 d0       	rcall	.+50     	; 0x8570 <_micros>
	uint16_t start = (uint16_t)micros();
    853e:	9b 01       	movw	r18, r22

	while (ms > 0) {
    8540:	c1 14       	cp	r12, r1
    8542:	d1 04       	cpc	r13, r1
    8544:	e1 04       	cpc	r14, r1
    8546:	f1 04       	cpc	r15, r1
    8548:	29 f4       	brne	.+10     	; 0x8554 <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    854a:	ff 90       	pop	r15
    854c:	ef 90       	pop	r14
    854e:	df 90       	pop	r13
    8550:	cf 90       	pop	r12
    8552:	08 95       	ret
    8554:	0d d0       	rcall	.+26     	; 0x8570 <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    8556:	62 1b       	sub	r22, r18
    8558:	73 0b       	sbc	r23, r19
    855a:	68 3e       	cpi	r22, 0xE8	; 232
    855c:	73 40       	sbci	r23, 0x03	; 3
    855e:	80 f3       	brcs	.-32     	; 0x8540 <delay+0x10>
			ms--;
    8560:	81 e0       	ldi	r24, 0x01	; 1
    8562:	c8 1a       	sub	r12, r24
    8564:	d1 08       	sbc	r13, r1
    8566:	e1 08       	sbc	r14, r1
    8568:	f1 08       	sbc	r15, r1
			start += 1000;
    856a:	28 51       	subi	r18, 0x18	; 24
    856c:	3c 4f       	sbci	r19, 0xFC	; 252
    856e:	e8 cf       	rjmp	.-48     	; 0x8540 <delay+0x10>

00008570 <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    8570:	0f b6       	in	r0, 0x3f	; 63
    8572:	f8 94       	cli
    8574:	66 b5       	in	r22, 0x26	; 38
    8576:	15 b2       	in	r1, 0x15	; 21
    8578:	70 91 51 10 	lds	r23, 0x1051	; 0x801051 <timer0_micros_count>
    857c:	80 91 52 10 	lds	r24, 0x1052	; 0x801052 <timer0_micros_count+0x1>
    8580:	90 91 53 10 	lds	r25, 0x1053	; 0x801053 <timer0_micros_count+0x2>
    8584:	0f be       	out	0x3f, r0	; 63
    8586:	10 fe       	sbrs	r1, 0
    8588:	05 c0       	rjmp	.+10     	; 0x8594 <L_1296_skip>
    858a:	6f 3f       	cpi	r22, 0xFF	; 255
    858c:	19 f0       	breq	.+6      	; 0x8594 <L_1296_skip>
    858e:	7c 5f       	subi	r23, 0xFC	; 252
    8590:	8f 4f       	sbci	r24, 0xFF	; 255
    8592:	9f 4f       	sbci	r25, 0xFF	; 255

00008594 <L_1296_skip>:
    8594:	11 24       	eor	r1, r1
    8596:	00 24       	eor	r0, r0
    8598:	66 0f       	add	r22, r22
    859a:	00 1c       	adc	r0, r0
    859c:	66 0f       	add	r22, r22
    859e:	00 1c       	adc	r0, r0
    85a0:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    85a2:	08 95       	ret

000085a4 <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    85a4:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    85a8:	80 ff       	sbrs	r24, 0
    85aa:	fc cf       	rjmp	.-8      	; 0x85a4 <usb_wait_in_ready>
    85ac:	08 95       	ret

000085ae <usb_init>:
    85ae:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    85b2:	87 ff       	sbrs	r24, 7
    85b4:	02 c0       	rjmp	.+4      	; 0x85ba <usb_init+0xc>
    85b6:	85 ff       	sbrs	r24, 5
    85b8:	1b c0       	rjmp	.+54     	; 0x85f0 <usb_init+0x42>
    85ba:	81 e8       	ldi	r24, 0x81	; 129
    85bc:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    85c0:	80 ea       	ldi	r24, 0xA0	; 160
    85c2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    85c6:	86 e1       	ldi	r24, 0x16	; 22
    85c8:	89 bd       	out	0x29, r24	; 41
    85ca:	09 b4       	in	r0, 0x29	; 41
    85cc:	00 fe       	sbrs	r0, 0
    85ce:	fd cf       	rjmp	.-6      	; 0x85ca <usb_init+0x1c>
    85d0:	80 e9       	ldi	r24, 0x90	; 144
    85d2:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    85d6:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    85da:	10 92 db 10 	sts	0x10DB, r1	; 0x8010db <usb_configuration>
    85de:	10 92 da 10 	sts	0x10DA, r1	; 0x8010da <usb_suspended>
    85e2:	10 92 d9 10 	sts	0x10D9, r1	; 0x8010d9 <__bss_end>
    85e6:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    85ea:	8d e0       	ldi	r24, 0x0D	; 13
    85ec:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    85f0:	08 95       	ret

000085f2 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    85f2:	1f 92       	push	r1
    85f4:	0f 92       	push	r0
    85f6:	0f b6       	in	r0, 0x3f	; 63
    85f8:	0f 92       	push	r0
    85fa:	11 24       	eor	r1, r1
    85fc:	0b b6       	in	r0, 0x3b	; 59
    85fe:	0f 92       	push	r0
    8600:	2f 93       	push	r18
    8602:	3f 93       	push	r19
    8604:	4f 93       	push	r20
    8606:	5f 93       	push	r21
    8608:	6f 93       	push	r22
    860a:	7f 93       	push	r23
    860c:	8f 93       	push	r24
    860e:	9f 93       	push	r25
    8610:	af 93       	push	r26
    8612:	bf 93       	push	r27
    8614:	ef 93       	push	r30
    8616:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    8618:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    861c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    8620:	93 ff       	sbrs	r25, 3
    8622:	11 c0       	rjmp	.+34     	; 0x8646 <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    8624:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    8628:	81 e0       	ldi	r24, 0x01	; 1
    862a:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    862e:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    8632:	82 e2       	ldi	r24, 0x22	; 34
    8634:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    8638:	88 e0       	ldi	r24, 0x08	; 8
    863a:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    863e:	10 92 db 10 	sts	0x10DB, r1	; 0x8010db <usb_configuration>
		cdc_line_rtsdtr = 0;
    8642:	10 92 d9 10 	sts	0x10D9, r1	; 0x8010d9 <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    8646:	92 ff       	sbrs	r25, 2
    8648:	1d c0       	rjmp	.+58     	; 0x8684 <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    864a:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <usb_configuration>
    864e:	88 23       	and	r24, r24
    8650:	c9 f0       	breq	.+50     	; 0x8684 <__vector_10+0x92>
			t = transmit_flush_timer;
    8652:	80 91 57 10 	lds	r24, 0x1057	; 0x801057 <transmit_flush_timer>
			if (t) {
    8656:	88 23       	and	r24, r24
    8658:	59 f0       	breq	.+22     	; 0x8670 <__vector_10+0x7e>
				transmit_flush_timer = --t;
    865a:	81 50       	subi	r24, 0x01	; 1
    865c:	80 93 57 10 	sts	0x1057, r24	; 0x801057 <transmit_flush_timer>
				if (!t) {
    8660:	81 11       	cpse	r24, r1
    8662:	06 c0       	rjmp	.+12     	; 0x8670 <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    8664:	84 e0       	ldi	r24, 0x04	; 4
    8666:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    866a:	8a e3       	ldi	r24, 0x3A	; 58
    866c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    8670:	80 91 56 10 	lds	r24, 0x1056	; 0x801056 <reboot_timer>
			if (t) {
    8674:	88 23       	and	r24, r24
    8676:	31 f0       	breq	.+12     	; 0x8684 <__vector_10+0x92>
				reboot_timer = --t;
    8678:	81 50       	subi	r24, 0x01	; 1
    867a:	80 93 56 10 	sts	0x1056, r24	; 0x801056 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    867e:	81 11       	cpse	r24, r1
    8680:	01 c0       	rjmp	.+2      	; 0x8684 <__vector_10+0x92>
    8682:	f0 de       	rcall	.-544    	; 0x8464 <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    8684:	90 ff       	sbrs	r25, 0
    8686:	0c c0       	rjmp	.+24     	; 0x86a0 <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    8688:	80 e1       	ldi	r24, 0x10	; 16
    868a:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    868e:	10 92 db 10 	sts	0x10DB, r1	; 0x8010db <usb_configuration>
		usb_suspended = 1;
    8692:	81 e0       	ldi	r24, 0x01	; 1
    8694:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    8698:	80 ea       	ldi	r24, 0xA0	; 160
    869a:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    869e:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    86a0:	80 91 da 10 	lds	r24, 0x10DA	; 0x8010da <usb_suspended>
    86a4:	88 23       	and	r24, r24
    86a6:	79 f0       	breq	.+30     	; 0x86c6 <__vector_10+0xd4>
    86a8:	94 ff       	sbrs	r25, 4
    86aa:	0d c0       	rjmp	.+26     	; 0x86c6 <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    86ac:	86 e1       	ldi	r24, 0x16	; 22
    86ae:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    86b0:	09 b4       	in	r0, 0x29	; 41
    86b2:	00 fe       	sbrs	r0, 0
    86b4:	fd cf       	rjmp	.-6      	; 0x86b0 <__vector_10+0xbe>
		USB_CONFIG();
    86b6:	80 e9       	ldi	r24, 0x90	; 144
    86b8:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    86bc:	8d e0       	ldi	r24, 0x0D	; 13
    86be:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    86c2:	10 92 da 10 	sts	0x10DA, r1	; 0x8010da <usb_suspended>
		return;
	}
}
    86c6:	ff 91       	pop	r31
    86c8:	ef 91       	pop	r30
    86ca:	bf 91       	pop	r27
    86cc:	af 91       	pop	r26
    86ce:	9f 91       	pop	r25
    86d0:	8f 91       	pop	r24
    86d2:	7f 91       	pop	r23
    86d4:	6f 91       	pop	r22
    86d6:	5f 91       	pop	r21
    86d8:	4f 91       	pop	r20
    86da:	3f 91       	pop	r19
    86dc:	2f 91       	pop	r18
    86de:	0f 90       	pop	r0
    86e0:	0b be       	out	0x3b, r0	; 59
    86e2:	0f 90       	pop	r0
    86e4:	0f be       	out	0x3f, r0	; 63
    86e6:	0f 90       	pop	r0
    86e8:	1f 90       	pop	r1
    86ea:	18 95       	reti

000086ec <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    86ec:	1f 92       	push	r1
    86ee:	0f 92       	push	r0
    86f0:	0f b6       	in	r0, 0x3f	; 63
    86f2:	0f 92       	push	r0
    86f4:	11 24       	eor	r1, r1
    86f6:	0b b6       	in	r0, 0x3b	; 59
    86f8:	0f 92       	push	r0
    86fa:	ef 92       	push	r14
    86fc:	ff 92       	push	r15
    86fe:	0f 93       	push	r16
    8700:	1f 93       	push	r17
    8702:	2f 93       	push	r18
    8704:	3f 93       	push	r19
    8706:	4f 93       	push	r20
    8708:	5f 93       	push	r21
    870a:	6f 93       	push	r22
    870c:	7f 93       	push	r23
    870e:	8f 93       	push	r24
    8710:	9f 93       	push	r25
    8712:	af 93       	push	r26
    8714:	bf 93       	push	r27
    8716:	cf 93       	push	r28
    8718:	df 93       	push	r29
    871a:	ef 93       	push	r30
    871c:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    871e:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    8722:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    8726:	83 ff       	sbrs	r24, 3
    8728:	20 c0       	rjmp	.+64     	; 0x876a <__vector_11+0x7e>
		bmRequestType = UEDATX;
    872a:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    872e:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    8732:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8736:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    873a:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    873e:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    8742:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8746:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    874a:	82 ef       	ldi	r24, 0xF2	; 242
    874c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    8750:	c6 30       	cpi	r28, 0x06	; 6
    8752:	09 f0       	breq	.+2      	; 0x8756 <__vector_11+0x6a>
    8754:	5b c0       	rjmp	.+182    	; 0x880c <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    8756:	e4 e9       	ldi	r30, 0x94	; 148
    8758:	f7 e0       	ldi	r31, 0x07	; 7
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    875a:	85 91       	lpm	r24, Z+
    875c:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    875e:	e8 16       	cp	r14, r24
    8760:	f9 06       	cpc	r15, r25
    8762:	39 f0       	breq	.+14     	; 0x8772 <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    8764:	35 96       	adiw	r30, 0x05	; 5
    8766:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    8768:	c1 f7       	brne	.-16     	; 0x875a <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    876a:	81 e2       	ldi	r24, 0x21	; 33
    876c:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    8770:	2b c0       	rjmp	.+86     	; 0x87c8 <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    8772:	85 91       	lpm	r24, Z+
    8774:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    8776:	08 17       	cp	r16, r24
    8778:	19 07       	cpc	r17, r25
    877a:	11 f0       	breq	.+4      	; 0x8780 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    877c:	33 96       	adiw	r30, 0x03	; 3
					continue;
    877e:	f3 cf       	rjmp	.-26     	; 0x8766 <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    8780:	45 91       	lpm	r20, Z+
    8782:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    8784:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    8786:	2f 3f       	cpi	r18, 0xFF	; 255
    8788:	31 05       	cpc	r19, r1
    878a:	19 f0       	breq	.+6      	; 0x8792 <__vector_11+0xa6>
    878c:	10 f0       	brcs	.+4      	; 0x8792 <__vector_11+0xa6>
    878e:	2f ef       	ldi	r18, 0xFF	; 255
    8790:	30 e0       	ldi	r19, 0x00	; 0
    8792:	82 17       	cp	r24, r18
    8794:	08 f4       	brcc	.+2      	; 0x8798 <__vector_11+0xac>
    8796:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8798:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    879a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    879e:	98 2f       	mov	r25, r24
    87a0:	95 70       	andi	r25, 0x05	; 5
    87a2:	d9 f3       	breq	.-10     	; 0x879a <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    87a4:	82 fd       	sbrc	r24, 2
    87a6:	10 c0       	rjmp	.+32     	; 0x87c8 <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    87a8:	82 2f       	mov	r24, r18
    87aa:	21 32       	cpi	r18, 0x21	; 33
    87ac:	08 f0       	brcs	.+2      	; 0x87b0 <__vector_11+0xc4>
    87ae:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    87b0:	98 2f       	mov	r25, r24
    87b2:	91 11       	cpse	r25, r1
    87b4:	24 c0       	rjmp	.+72     	; 0x87fe <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    87b6:	92 2f       	mov	r25, r18
    87b8:	98 1b       	sub	r25, r24
    87ba:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    87bc:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    87c0:	91 11       	cpse	r25, r1
    87c2:	1b c0       	rjmp	.+54     	; 0x87fa <__vector_11+0x10e>
    87c4:	20 32       	cpi	r18, 0x20	; 32
    87c6:	c8 f4       	brcc	.+50     	; 0x87fa <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    87c8:	ff 91       	pop	r31
    87ca:	ef 91       	pop	r30
    87cc:	df 91       	pop	r29
    87ce:	cf 91       	pop	r28
    87d0:	bf 91       	pop	r27
    87d2:	af 91       	pop	r26
    87d4:	9f 91       	pop	r25
    87d6:	8f 91       	pop	r24
    87d8:	7f 91       	pop	r23
    87da:	6f 91       	pop	r22
    87dc:	5f 91       	pop	r21
    87de:	4f 91       	pop	r20
    87e0:	3f 91       	pop	r19
    87e2:	2f 91       	pop	r18
    87e4:	1f 91       	pop	r17
    87e6:	0f 91       	pop	r16
    87e8:	ff 90       	pop	r15
    87ea:	ef 90       	pop	r14
    87ec:	0f 90       	pop	r0
    87ee:	0b be       	out	0x3b, r0	; 59
    87f0:	0f 90       	pop	r0
    87f2:	0f be       	out	0x3f, r0	; 63
    87f4:	0f 90       	pop	r0
    87f6:	1f 90       	pop	r1
    87f8:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    87fa:	28 2f       	mov	r18, r24
    87fc:	ce cf       	rjmp	.-100    	; 0x879a <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    87fe:	fa 01       	movw	r30, r20
    8800:	45 91       	lpm	r20, Z+
    8802:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8806:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    8808:	91 50       	subi	r25, 0x01	; 1
    880a:	d3 cf       	rjmp	.-90     	; 0x87b2 <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    880c:	c5 30       	cpi	r28, 0x05	; 5
    880e:	49 f4       	brne	.+18     	; 0x8822 <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8810:	8e ef       	ldi	r24, 0xFE	; 254
    8812:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    8816:	c6 de       	rcall	.-628    	; 0x85a4 <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    8818:	8e 2d       	mov	r24, r14
    881a:	80 68       	ori	r24, 0x80	; 128
    881c:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    8820:	d3 cf       	rjmp	.-90     	; 0x87c8 <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    8822:	c9 30       	cpi	r28, 0x09	; 9
    8824:	21 f5       	brne	.+72     	; 0x886e <__vector_11+0x182>
    8826:	d1 11       	cpse	r29, r1
    8828:	a0 cf       	rjmp	.-192    	; 0x876a <__vector_11+0x7e>
			usb_configuration = wValue;
    882a:	e0 92 db 10 	sts	0x10DB, r14	; 0x8010db <usb_configuration>
			cdc_line_rtsdtr = 0;
    882e:	10 92 d9 10 	sts	0x10D9, r1	; 0x8010d9 <__bss_end>
			transmit_flush_timer = 0;
    8832:	10 92 57 10 	sts	0x1057, r1	; 0x801057 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8836:	8e ef       	ldi	r24, 0xFE	; 254
    8838:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    883c:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    883e:	e7 e5       	ldi	r30, 0x57	; 87
    8840:	f8 e0       	ldi	r31, 0x08	; 8
			for (i=1; i<5; i++) {
				UENUM = i;
    8842:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    8846:	95 91       	lpm	r25, Z+
				UECONX = en;
    8848:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    884c:	99 23       	and	r25, r25
    884e:	31 f0       	breq	.+12     	; 0x885c <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    8850:	95 91       	lpm	r25, Z+
    8852:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    8856:	95 91       	lpm	r25, Z+
    8858:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    885c:	8f 5f       	subi	r24, 0xFF	; 255
    885e:	85 30       	cpi	r24, 0x05	; 5
    8860:	81 f7       	brne	.-32     	; 0x8842 <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    8862:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    8864:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    8868:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    886c:	ad cf       	rjmp	.-166    	; 0x87c8 <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    886e:	c8 30       	cpi	r28, 0x08	; 8
    8870:	61 f4       	brne	.+24     	; 0x888a <__vector_11+0x19e>
    8872:	d0 38       	cpi	r29, 0x80	; 128
    8874:	09 f0       	breq	.+2      	; 0x8878 <__vector_11+0x18c>
			usb_wait_in_ready();
    8876:	79 cf       	rjmp	.-270    	; 0x876a <__vector_11+0x7e>
    8878:	95 de       	rcall	.-726    	; 0x85a4 <usb_wait_in_ready>
			UEDATX = usb_configuration;
    887a:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <usb_configuration>
    887e:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    8882:	8e ef       	ldi	r24, 0xFE	; 254
    8884:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8888:	9f cf       	rjmp	.-194    	; 0x87c8 <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    888a:	c1 32       	cpi	r28, 0x21	; 33
    888c:	79 f4       	brne	.+30     	; 0x88ac <__vector_11+0x1c0>
    888e:	d1 3a       	cpi	r29, 0xA1	; 161
    8890:	09 f0       	breq	.+2      	; 0x8894 <__vector_11+0x1a8>
			usb_wait_in_ready();
    8892:	6b cf       	rjmp	.-298    	; 0x876a <__vector_11+0x7e>
    8894:	87 de       	rcall	.-754    	; 0x85a4 <usb_wait_in_ready>
			p = cdc_line_coding;
    8896:	e1 e1       	ldi	r30, 0x11	; 17
    8898:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    889a:	80 81       	ld	r24, Z
    889c:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    88a0:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    88a2:	81 e0       	ldi	r24, 0x01	; 1
    88a4:	e8 31       	cpi	r30, 0x18	; 24
    88a6:	f8 07       	cpc	r31, r24
    88a8:	c1 f7       	brne	.-16     	; 0x889a <__vector_11+0x1ae>
    88aa:	eb cf       	rjmp	.-42     	; 0x8882 <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    88ac:	c0 32       	cpi	r28, 0x20	; 32
    88ae:	09 f0       	breq	.+2      	; 0x88b2 <__vector_11+0x1c6>
    88b0:	47 c0       	rjmp	.+142    	; 0x8940 <__vector_11+0x254>
    88b2:	d1 32       	cpi	r29, 0x21	; 33
    88b4:	09 f0       	breq	.+2      	; 0x88b8 <__vector_11+0x1cc>
    88b6:	59 cf       	rjmp	.-334    	; 0x876a <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    88b8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    88bc:	82 ff       	sbrs	r24, 2
    88be:	fc cf       	rjmp	.-8      	; 0x88b8 <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    88c0:	e1 e1       	ldi	r30, 0x11	; 17
    88c2:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    88c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    88c8:	80 83       	st	Z, r24
    88ca:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    88cc:	91 e0       	ldi	r25, 0x01	; 1
    88ce:	e8 31       	cpi	r30, 0x18	; 24
    88d0:	f9 07       	cpc	r31, r25
    88d2:	c1 f7       	brne	.-16     	; 0x88c4 <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    88d4:	8b ef       	ldi	r24, 0xFB	; 251
    88d6:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    88da:	8e ef       	ldi	r24, 0xFE	; 254
    88dc:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    88e0:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    88e4:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    88e8:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    88ec:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    88f0:	90 e0       	ldi	r25, 0x00	; 0
    88f2:	b0 e0       	ldi	r27, 0x00	; 0
    88f4:	a0 e0       	ldi	r26, 0x00	; 0
    88f6:	dc 01       	movw	r26, r24
    88f8:	99 27       	eor	r25, r25
    88fa:	88 27       	eor	r24, r24
    88fc:	94 2b       	or	r25, r20
    88fe:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    8900:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    8902:	86 38       	cpi	r24, 0x86	; 134
    8904:	91 05       	cpc	r25, r1
    8906:	a1 05       	cpc	r26, r1
    8908:	b1 05       	cpc	r27, r1
    890a:	21 f4       	brne	.+8      	; 0x8914 <__vector_11+0x228>
    890c:	8f e0       	ldi	r24, 0x0F	; 15
    890e:	80 93 56 10 	sts	0x1056, r24	; 0x801056 <reboot_timer>
    8912:	5a cf       	rjmp	.-332    	; 0x87c8 <__vector_11+0xdc>
			if (baud == 150UL) {
    8914:	86 39       	cpi	r24, 0x96	; 150
    8916:	91 05       	cpc	r25, r1
    8918:	a1 05       	cpc	r26, r1
    891a:	b1 05       	cpc	r27, r1
    891c:	09 f0       	breq	.+2      	; 0x8920 <__vector_11+0x234>
    891e:	54 cf       	rjmp	.-344    	; 0x87c8 <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    8920:	84 e0       	ldi	r24, 0x04	; 4
    8922:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    8926:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    8928:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    892c:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    892e:	09 f4       	brne	.+2      	; 0x8932 <__vector_11+0x246>
    8930:	b6 dd       	rcall	.-1172   	; 0x849e <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    8932:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    8936:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    893a:	82 fd       	sbrc	r24, 2
    893c:	fc cf       	rjmp	.-8      	; 0x8936 <__vector_11+0x24a>
    893e:	f4 cf       	rjmp	.-24     	; 0x8928 <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    8940:	c2 32       	cpi	r28, 0x22	; 34
    8942:	39 f4       	brne	.+14     	; 0x8952 <__vector_11+0x266>
    8944:	d1 32       	cpi	r29, 0x21	; 33
    8946:	09 f0       	breq	.+2      	; 0x894a <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    8948:	10 cf       	rjmp	.-480    	; 0x876a <__vector_11+0x7e>
    894a:	e0 92 d9 10 	sts	0x10D9, r14	; 0x8010d9 <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    894e:	2a de       	rcall	.-940    	; 0x85a4 <usb_wait_in_ready>
    8950:	98 cf       	rjmp	.-208    	; 0x8882 <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    8952:	c3 32       	cpi	r28, 0x23	; 35
    8954:	21 f4       	brne	.+8      	; 0x895e <__vector_11+0x272>
    8956:	d1 32       	cpi	r29, 0x21	; 33
    8958:	09 f0       	breq	.+2      	; 0x895c <__vector_11+0x270>
    895a:	07 cf       	rjmp	.-498    	; 0x876a <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    895c:	f8 cf       	rjmp	.-16     	; 0x894e <__vector_11+0x262>
    895e:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    8960:	11 c0       	rjmp	.+34     	; 0x8984 <__vector_11+0x298>
    8962:	20 de       	rcall	.-960    	; 0x85a4 <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    8964:	d2 38       	cpi	r29, 0x82	; 130
    8966:	49 f4       	brne	.+18     	; 0x897a <__vector_11+0x28e>
				UENUM = wIndex;
    8968:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    896c:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    8970:	c5 fb       	bst	r28, 5
    8972:	cc 27       	eor	r28, r28
    8974:	c0 f9       	bld	r28, 0
				UENUM = 0;
    8976:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    897a:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    897e:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8982:	7f cf       	rjmp	.-258    	; 0x8882 <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    8984:	8c 2f       	mov	r24, r28
    8986:	8d 7f       	andi	r24, 0xFD	; 253
    8988:	81 30       	cpi	r24, 0x01	; 1
    898a:	09 f0       	breq	.+2      	; 0x898e <__vector_11+0x2a2>
    898c:	ee ce       	rjmp	.-548    	; 0x876a <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    898e:	d2 30       	cpi	r29, 0x02	; 2
    8990:	09 f0       	breq	.+2      	; 0x8994 <__vector_11+0x2a8>
    8992:	eb ce       	rjmp	.-554    	; 0x876a <__vector_11+0x7e>
    8994:	ef 28       	or	r14, r15
    8996:	09 f0       	breq	.+2      	; 0x899a <__vector_11+0x2ae>
    8998:	e8 ce       	rjmp	.-560    	; 0x876a <__vector_11+0x7e>
			i = wIndex & 0x7F;
    899a:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    899c:	8f ef       	ldi	r24, 0xFF	; 255
    899e:	80 0f       	add	r24, r16
    89a0:	86 30       	cpi	r24, 0x06	; 6
    89a2:	08 f0       	brcs	.+2      	; 0x89a6 <__vector_11+0x2ba>
    89a4:	e2 ce       	rjmp	.-572    	; 0x876a <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    89a6:	8e ef       	ldi	r24, 0xFE	; 254
    89a8:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    89ac:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    89b0:	c3 30       	cpi	r28, 0x03	; 3
    89b2:	09 f4       	brne	.+2      	; 0x89b6 <__vector_11+0x2ca>
    89b4:	da ce       	rjmp	.-588    	; 0x876a <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    89b6:	89 e1       	ldi	r24, 0x19	; 25
    89b8:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    89bc:	81 e0       	ldi	r24, 0x01	; 1
    89be:	90 e0       	ldi	r25, 0x00	; 0
    89c0:	01 c0       	rjmp	.+2      	; 0x89c4 <__vector_11+0x2d8>
    89c2:	88 0f       	add	r24, r24
    89c4:	0a 95       	dec	r16
    89c6:	ea f7       	brpl	.-6      	; 0x89c2 <__vector_11+0x2d6>
    89c8:	4d cf       	rjmp	.-358    	; 0x8864 <__vector_11+0x178>

000089ca <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    89ca:	50 91 8c 10 	lds	r21, 0x108C	; 0x80108c <rx_buffer_head>
    89ce:	40 91 8b 10 	lds	r20, 0x108B	; 0x80108b <rx_buffer_tail>
    89d2:	85 2f       	mov	r24, r21
    89d4:	90 e0       	ldi	r25, 0x00	; 0
    89d6:	24 2f       	mov	r18, r20
    89d8:	30 e0       	ldi	r19, 0x00	; 0
    89da:	54 17       	cp	r21, r20
    89dc:	18 f0       	brcs	.+6      	; 0x89e4 <HardwareSerial::available()+0x1a>
    89de:	82 1b       	sub	r24, r18
    89e0:	93 0b       	sbc	r25, r19
    89e2:	08 95       	ret
    89e4:	80 5c       	subi	r24, 0xC0	; 192
    89e6:	9f 4f       	sbci	r25, 0xFF	; 255
    89e8:	fa cf       	rjmp	.-12     	; 0x89de <HardwareSerial::available()+0x14>

000089ea <HardwareSerial::availableForWrite()>:
    89ea:	50 91 8c 10 	lds	r21, 0x108C	; 0x80108c <rx_buffer_head>
    89ee:	40 91 8b 10 	lds	r20, 0x108B	; 0x80108b <rx_buffer_tail>
    89f2:	25 2f       	mov	r18, r21
    89f4:	30 e0       	ldi	r19, 0x00	; 0
    89f6:	84 2f       	mov	r24, r20
    89f8:	90 e0       	ldi	r25, 0x00	; 0
    89fa:	82 1b       	sub	r24, r18
    89fc:	93 0b       	sbc	r25, r19
    89fe:	54 17       	cp	r21, r20
    8a00:	10 f0       	brcs	.+4      	; 0x8a06 <HardwareSerial::availableForWrite()+0x1c>
    8a02:	87 96       	adiw	r24, 0x27	; 39
    8a04:	08 95       	ret
    8a06:	01 97       	sbiw	r24, 0x01	; 1
    8a08:	08 95       	ret

00008a0a <HardwareSerial::peek()>:
    8a0a:	80 91 8c 10 	lds	r24, 0x108C	; 0x80108c <rx_buffer_head>
    8a0e:	e0 91 8b 10 	lds	r30, 0x108B	; 0x80108b <rx_buffer_tail>
    8a12:	8e 17       	cp	r24, r30
    8a14:	51 f0       	breq	.+20     	; 0x8a2a <HardwareSerial::peek()+0x20>
    8a16:	ef 5f       	subi	r30, 0xFF	; 255
    8a18:	e0 34       	cpi	r30, 0x40	; 64
    8a1a:	08 f0       	brcs	.+2      	; 0x8a1e <HardwareSerial::peek()+0x14>
    8a1c:	e0 e0       	ldi	r30, 0x00	; 0
    8a1e:	f0 e0       	ldi	r31, 0x00	; 0
    8a20:	e3 57       	subi	r30, 0x73	; 115
    8a22:	ff 4e       	sbci	r31, 0xEF	; 239
    8a24:	80 81       	ld	r24, Z
    8a26:	90 e0       	ldi	r25, 0x00	; 0
    8a28:	08 95       	ret
    8a2a:	8f ef       	ldi	r24, 0xFF	; 255
    8a2c:	9f ef       	ldi	r25, 0xFF	; 255
    8a2e:	08 95       	ret

00008a30 <HardwareSerial::read()>:
    8a30:	90 91 8c 10 	lds	r25, 0x108C	; 0x80108c <rx_buffer_head>
    8a34:	80 91 8b 10 	lds	r24, 0x108B	; 0x80108b <rx_buffer_tail>
    8a38:	98 17       	cp	r25, r24
    8a3a:	79 f0       	breq	.+30     	; 0x8a5a <HardwareSerial::read()+0x2a>
    8a3c:	90 91 8b 10 	lds	r25, 0x108B	; 0x80108b <rx_buffer_tail>
    8a40:	9f 5f       	subi	r25, 0xFF	; 255
    8a42:	90 34       	cpi	r25, 0x40	; 64
    8a44:	08 f0       	brcs	.+2      	; 0x8a48 <HardwareSerial::read()+0x18>
    8a46:	90 e0       	ldi	r25, 0x00	; 0
    8a48:	e9 2f       	mov	r30, r25
    8a4a:	f0 e0       	ldi	r31, 0x00	; 0
    8a4c:	e3 57       	subi	r30, 0x73	; 115
    8a4e:	ff 4e       	sbci	r31, 0xEF	; 239
    8a50:	80 81       	ld	r24, Z
    8a52:	90 93 8b 10 	sts	0x108B, r25	; 0x80108b <rx_buffer_tail>
    8a56:	90 e0       	ldi	r25, 0x00	; 0
    8a58:	08 95       	ret
    8a5a:	8f ef       	ldi	r24, 0xFF	; 255
    8a5c:	9f ef       	ldi	r25, 0xFF	; 255
    8a5e:	08 95       	ret

00008a60 <HardwareSerial::flush()>:
    8a60:	80 91 60 10 	lds	r24, 0x1060	; 0x801060 <transmitting>
    8a64:	81 11       	cpse	r24, r1
    8a66:	fc cf       	rjmp	.-8      	; 0x8a60 <HardwareSerial::flush()>
    8a68:	08 95       	ret

00008a6a <HardwareSerial::write(unsigned char)>:
    8a6a:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8a6e:	23 fd       	sbrc	r18, 3
    8a70:	06 c0       	rjmp	.+12     	; 0x8a7e <HardwareSerial::write(unsigned char)+0x14>
    8a72:	21 e0       	ldi	r18, 0x01	; 1
    8a74:	fc 01       	movw	r30, r24
    8a76:	22 83       	std	Z+2, r18	; 0x02
    8a78:	90 e0       	ldi	r25, 0x00	; 0
    8a7a:	80 e0       	ldi	r24, 0x00	; 0
    8a7c:	08 95       	ret
    8a7e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    8a82:	8f 3f       	cpi	r24, 0xFF	; 255
    8a84:	41 f0       	breq	.+16     	; 0x8a96 <HardwareSerial::write(unsigned char)+0x2c>
    8a86:	80 91 60 10 	lds	r24, 0x1060	; 0x801060 <transmitting>
    8a8a:	81 11       	cpse	r24, r1
    8a8c:	04 c0       	rjmp	.+8      	; 0x8a96 <HardwareSerial::write(unsigned char)+0x2c>
    8a8e:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    8a92:	f0 e0       	ldi	r31, 0x00	; 0
    8a94:	ee db       	rcall	.-2084   	; 0x8272 <_digitalWrite_HIGH>
    8a96:	90 91 62 10 	lds	r25, 0x1062	; 0x801062 <tx_buffer_head>
    8a9a:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <tx_buffer_tail>
    8a9e:	98 13       	cpse	r25, r24
    8aa0:	04 c0       	rjmp	.+8      	; 0x8aaa <HardwareSerial::write(unsigned char)+0x40>
    8aa2:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    8aa6:	85 fd       	sbrc	r24, 5
    8aa8:	19 c0       	rjmp	.+50     	; 0x8adc <HardwareSerial::write(unsigned char)+0x72>
    8aaa:	80 91 62 10 	lds	r24, 0x1062	; 0x801062 <tx_buffer_head>
    8aae:	8f 5f       	subi	r24, 0xFF	; 255
    8ab0:	88 32       	cpi	r24, 0x28	; 40
    8ab2:	f8 f4       	brcc	.+62     	; 0x8af2 <HardwareSerial::write(unsigned char)+0x88>
    8ab4:	90 91 61 10 	lds	r25, 0x1061	; 0x801061 <tx_buffer_tail>
    8ab8:	98 17       	cp	r25, r24
    8aba:	e1 f3       	breq	.-8      	; 0x8ab4 <HardwareSerial::write(unsigned char)+0x4a>
    8abc:	e8 2f       	mov	r30, r24
    8abe:	f0 e0       	ldi	r31, 0x00	; 0
    8ac0:	ed 59       	subi	r30, 0x9D	; 157
    8ac2:	ff 4e       	sbci	r31, 0xEF	; 239
    8ac4:	60 83       	st	Z, r22
    8ac6:	91 e0       	ldi	r25, 0x01	; 1
    8ac8:	90 93 60 10 	sts	0x1060, r25	; 0x801060 <transmitting>
    8acc:	80 93 62 10 	sts	0x1062, r24	; 0x801062 <tx_buffer_head>
    8ad0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8ad4:	80 62       	ori	r24, 0x20	; 32
    8ad6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8ada:	08 c0       	rjmp	.+16     	; 0x8aec <HardwareSerial::write(unsigned char)+0x82>
    8adc:	8f b7       	in	r24, 0x3f	; 63
    8ade:	f8 94       	cli
    8ae0:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    8ae4:	91 e0       	ldi	r25, 0x01	; 1
    8ae6:	90 93 60 10 	sts	0x1060, r25	; 0x801060 <transmitting>
    8aea:	8f bf       	out	0x3f, r24	; 63
    8aec:	81 e0       	ldi	r24, 0x01	; 1
    8aee:	90 e0       	ldi	r25, 0x00	; 0
    8af0:	08 95       	ret
    8af2:	80 e0       	ldi	r24, 0x00	; 0
    8af4:	df cf       	rjmp	.-66     	; 0x8ab4 <HardwareSerial::write(unsigned char)+0x4a>

00008af6 <HardwareSerial::_begin(unsigned int, unsigned char)>:
    8af6:	1f 93       	push	r17
    8af8:	cf 93       	push	r28
    8afa:	df 93       	push	r29
    8afc:	eb 01       	movw	r28, r22
    8afe:	14 2f       	mov	r17, r20
    8b00:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    8b04:	4f 3f       	cpi	r20, 0xFF	; 255
    8b06:	29 f0       	breq	.+10     	; 0x8b12 <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    8b08:	84 2f       	mov	r24, r20
    8b0a:	a2 db       	rcall	.-2236   	; 0x8250 <_pinMode_output>
    8b0c:	e1 2f       	mov	r30, r17
    8b0e:	f0 e0       	ldi	r31, 0x00	; 0
    8b10:	b6 db       	rcall	.-2196   	; 0x827e <_digitalWrite_LOW>
    8b12:	c0 ff       	sbrs	r28, 0
    8b14:	24 c0       	rjmp	.+72     	; 0x8b5e <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    8b16:	c1 30       	cpi	r28, 0x01	; 1
    8b18:	80 e1       	ldi	r24, 0x10	; 16
    8b1a:	d8 07       	cpc	r29, r24
    8b1c:	00 f5       	brcc	.+64     	; 0x8b5e <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    8b1e:	82 e0       	ldi	r24, 0x02	; 2
    8b20:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    8b24:	21 97       	sbiw	r28, 0x01	; 1
    8b26:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    8b2a:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    8b2e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8b32:	83 fd       	sbrc	r24, 3
    8b34:	10 c0       	rjmp	.+32     	; 0x8b56 <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    8b36:	10 92 8c 10 	sts	0x108C, r1	; 0x80108c <rx_buffer_head>
    8b3a:	10 92 8b 10 	sts	0x108B, r1	; 0x80108b <rx_buffer_tail>
    8b3e:	10 92 62 10 	sts	0x1062, r1	; 0x801062 <tx_buffer_head>
    8b42:	10 92 61 10 	sts	0x1061, r1	; 0x801061 <tx_buffer_tail>
    8b46:	10 92 60 10 	sts	0x1060, r1	; 0x801060 <transmitting>
    8b4a:	86 e0       	ldi	r24, 0x06	; 6
    8b4c:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    8b50:	88 ed       	ldi	r24, 0xD8	; 216
    8b52:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8b56:	df 91       	pop	r29
    8b58:	cf 91       	pop	r28
    8b5a:	1f 91       	pop	r17
    8b5c:	08 95       	ret
    8b5e:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    8b62:	d6 95       	lsr	r29
    8b64:	c7 95       	ror	r28
    8b66:	de cf       	rjmp	.-68     	; 0x8b24 <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

00008b68 <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    8b68:	1f 92       	push	r1
    8b6a:	0f 92       	push	r0
    8b6c:	0f b6       	in	r0, 0x3f	; 63
    8b6e:	0f 92       	push	r0
    8b70:	11 24       	eor	r1, r1
    8b72:	0b b6       	in	r0, 0x3b	; 59
    8b74:	0f 92       	push	r0
    8b76:	2f 93       	push	r18
    8b78:	8f 93       	push	r24
    8b7a:	9f 93       	push	r25
    8b7c:	ef 93       	push	r30
    8b7e:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    8b80:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    8b84:	80 91 8c 10 	lds	r24, 0x108C	; 0x80108c <rx_buffer_head>
    8b88:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    8b8a:	80 34       	cpi	r24, 0x40	; 64
    8b8c:	08 f0       	brcs	.+2      	; 0x8b90 <__vector_25+0x28>
    8b8e:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    8b90:	20 91 8b 10 	lds	r18, 0x108B	; 0x80108b <rx_buffer_tail>
    8b94:	28 17       	cp	r18, r24
    8b96:	39 f0       	breq	.+14     	; 0x8ba6 <__vector_25+0x3e>
		rx_buffer[i] = c;
    8b98:	e8 2f       	mov	r30, r24
    8b9a:	f0 e0       	ldi	r31, 0x00	; 0
    8b9c:	e3 57       	subi	r30, 0x73	; 115
    8b9e:	ff 4e       	sbci	r31, 0xEF	; 239
    8ba0:	90 83       	st	Z, r25
		rx_buffer_head = i;
    8ba2:	80 93 8c 10 	sts	0x108C, r24	; 0x80108c <rx_buffer_head>
	}
}
    8ba6:	ff 91       	pop	r31
    8ba8:	ef 91       	pop	r30
    8baa:	9f 91       	pop	r25
    8bac:	8f 91       	pop	r24
    8bae:	2f 91       	pop	r18
    8bb0:	0f 90       	pop	r0
    8bb2:	0b be       	out	0x3b, r0	; 59
    8bb4:	0f 90       	pop	r0
    8bb6:	0f be       	out	0x3f, r0	; 63
    8bb8:	0f 90       	pop	r0
    8bba:	1f 90       	pop	r1
    8bbc:	18 95       	reti

00008bbe <__vector_26>:

ISR(USART1_UDRE_vect)
{
    8bbe:	1f 92       	push	r1
    8bc0:	0f 92       	push	r0
    8bc2:	0f b6       	in	r0, 0x3f	; 63
    8bc4:	0f 92       	push	r0
    8bc6:	11 24       	eor	r1, r1
    8bc8:	0b b6       	in	r0, 0x3b	; 59
    8bca:	0f 92       	push	r0
    8bcc:	8f 93       	push	r24
    8bce:	9f 93       	push	r25
    8bd0:	ef 93       	push	r30
    8bd2:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    8bd4:	90 91 62 10 	lds	r25, 0x1062	; 0x801062 <tx_buffer_head>
    8bd8:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <tx_buffer_tail>
    8bdc:	98 13       	cpse	r25, r24
    8bde:	10 c0       	rjmp	.+32     	; 0x8c00 <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    8be0:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8be4:	8f 7d       	andi	r24, 0xDF	; 223
    8be6:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    8bea:	ff 91       	pop	r31
    8bec:	ef 91       	pop	r30
    8bee:	9f 91       	pop	r25
    8bf0:	8f 91       	pop	r24
    8bf2:	0f 90       	pop	r0
    8bf4:	0b be       	out	0x3b, r0	; 59
    8bf6:	0f 90       	pop	r0
    8bf8:	0f be       	out	0x3f, r0	; 63
    8bfa:	0f 90       	pop	r0
    8bfc:	1f 90       	pop	r1
    8bfe:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    8c00:	80 91 61 10 	lds	r24, 0x1061	; 0x801061 <tx_buffer_tail>
    8c04:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    8c06:	88 32       	cpi	r24, 0x28	; 40
    8c08:	08 f0       	brcs	.+2      	; 0x8c0c <__vector_26+0x4e>
    8c0a:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    8c0c:	e8 2f       	mov	r30, r24
    8c0e:	f0 e0       	ldi	r31, 0x00	; 0
    8c10:	ed 59       	subi	r30, 0x9D	; 157
    8c12:	ff 4e       	sbci	r31, 0xEF	; 239
    8c14:	90 81       	ld	r25, Z
    8c16:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    8c1a:	80 93 61 10 	sts	0x1061, r24	; 0x801061 <tx_buffer_tail>
	}
}
    8c1e:	e5 cf       	rjmp	.-54     	; 0x8bea <__vector_26+0x2c>

00008c20 <__vector_27>:

ISR(USART1_TX_vect)
{
    8c20:	1f 92       	push	r1
    8c22:	0f 92       	push	r0
    8c24:	0f b6       	in	r0, 0x3f	; 63
    8c26:	0f 92       	push	r0
    8c28:	11 24       	eor	r1, r1
    8c2a:	0b b6       	in	r0, 0x3b	; 59
    8c2c:	0f 92       	push	r0
    8c2e:	8f 93       	push	r24
    8c30:	ef 93       	push	r30
    8c32:	ff 93       	push	r31
	transmitting = 0;
    8c34:	10 92 60 10 	sts	0x1060, r1	; 0x801060 <transmitting>
	if (tx_enable_pin < 255) {
    8c38:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    8c3c:	8f 3f       	cpi	r24, 0xFF	; 255
    8c3e:	21 f0       	breq	.+8      	; 0x8c48 <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    8c40:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    8c44:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    8c46:	1b db       	rcall	.-2506   	; 0x827e <_digitalWrite_LOW>
	}
}
    8c48:	ff 91       	pop	r31
    8c4a:	ef 91       	pop	r30
    8c4c:	8f 91       	pop	r24
    8c4e:	0f 90       	pop	r0
    8c50:	0b be       	out	0x3b, r0	; 59
    8c52:	0f 90       	pop	r0
    8c54:	0f be       	out	0x3f, r0	; 63
    8c56:	0f 90       	pop	r0
    8c58:	1f 90       	pop	r1
    8c5a:	18 95       	reti

00008c5c <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    8c5c:	e8 e5       	ldi	r30, 0x58	; 88
    8c5e:	f0 e1       	ldi	r31, 0x10	; 16
    8c60:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    8c62:	88 ee       	ldi	r24, 0xE8	; 232
    8c64:	93 e0       	ldi	r25, 0x03	; 3
    8c66:	a0 e0       	ldi	r26, 0x00	; 0
    8c68:	b0 e0       	ldi	r27, 0x00	; 0
    8c6a:	83 83       	std	Z+3, r24	; 0x03
    8c6c:	94 83       	std	Z+4, r25	; 0x04
    8c6e:	a5 83       	std	Z+5, r26	; 0x05
    8c70:	b6 83       	std	Z+6, r27	; 0x06
    8c72:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    8c74:	84 e3       	ldi	r24, 0x34	; 52
    8c76:	99 e0       	ldi	r25, 0x09	; 9
    8c78:	91 83       	std	Z+1, r25	; 0x01
    8c7a:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    8c7c:	08 95       	ret

00008c7e <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    8c7e:	9a da       	rcall	.-2764   	; 0x81b4 <_init_Teensyduino_internal_>

	setup();
    8c80:	0e 94 77 1b 	call	0x36ee	; 0x36ee <setup>
    
	while (1) {
		loop();
    8c84:	0e 94 b0 2f 	call	0x5f60	; 0x5f60 <loop>
    8c88:	fd cf       	rjmp	.-6      	; 0x8c84 <main+0x6>

00008c8a <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    8c8a:	73 c8       	rjmp	.-3866   	; 0x7d72 <malloc>

00008c8c <__cxa_guard_acquire>:
    8c8c:	fc 01       	movw	r30, r24
    8c8e:	81 e0       	ldi	r24, 0x01	; 1
    8c90:	90 e0       	ldi	r25, 0x00	; 0
    8c92:	20 81       	ld	r18, Z
    8c94:	22 23       	and	r18, r18
    8c96:	11 f0       	breq	.+4      	; 0x8c9c <__cxa_guard_acquire+0x10>
    8c98:	90 e0       	ldi	r25, 0x00	; 0
    8c9a:	80 e0       	ldi	r24, 0x00	; 0
    8c9c:	08 95       	ret

00008c9e <__cxa_guard_release>:
    8c9e:	21 e0       	ldi	r18, 0x01	; 1
    8ca0:	fc 01       	movw	r30, r24
    8ca2:	20 83       	st	Z, r18
    8ca4:	08 95       	ret

00008ca6 <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    8ca6:	08 95       	ret

00008ca8 <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    8ca8:	cf 92       	push	r12
    8caa:	df 92       	push	r13
    8cac:	ef 92       	push	r14
    8cae:	ff 92       	push	r15
    8cb0:	0f 93       	push	r16
    8cb2:	1f 93       	push	r17
    8cb4:	cf 93       	push	r28
    8cb6:	df 93       	push	r29
    8cb8:	6c 01       	movw	r12, r24
    8cba:	eb 01       	movw	r28, r22
    8cbc:	7b 01       	movw	r14, r22
    8cbe:	e4 0e       	add	r14, r20
    8cc0:	f5 1e       	adc	r15, r21
    8cc2:	10 e0       	ldi	r17, 0x00	; 0
    8cc4:	00 e0       	ldi	r16, 0x00	; 0
    8cc6:	ce 15       	cp	r28, r14
    8cc8:	df 05       	cpc	r29, r15
    8cca:	61 f0       	breq	.+24     	; 0x8ce4 <Print::write(unsigned char const*, unsigned int)+0x3c>
    8ccc:	69 91       	ld	r22, Y+
    8cce:	d6 01       	movw	r26, r12
    8cd0:	ed 91       	ld	r30, X+
    8cd2:	fc 91       	ld	r31, X
    8cd4:	01 90       	ld	r0, Z+
    8cd6:	f0 81       	ld	r31, Z
    8cd8:	e0 2d       	mov	r30, r0
    8cda:	c6 01       	movw	r24, r12
    8cdc:	09 95       	icall
    8cde:	08 0f       	add	r16, r24
    8ce0:	19 1f       	adc	r17, r25
    8ce2:	f1 cf       	rjmp	.-30     	; 0x8cc6 <Print::write(unsigned char const*, unsigned int)+0x1e>
    8ce4:	c8 01       	movw	r24, r16
    8ce6:	df 91       	pop	r29
    8ce8:	cf 91       	pop	r28
    8cea:	1f 91       	pop	r17
    8cec:	0f 91       	pop	r16
    8cee:	ff 90       	pop	r15
    8cf0:	ef 90       	pop	r14
    8cf2:	df 90       	pop	r13
    8cf4:	cf 90       	pop	r12
    8cf6:	08 95       	ret

00008cf8 <Print::print(String const&)>:
    8cf8:	8f 92       	push	r8
    8cfa:	9f 92       	push	r9
    8cfc:	af 92       	push	r10
    8cfe:	bf 92       	push	r11
    8d00:	cf 92       	push	r12
    8d02:	df 92       	push	r13
    8d04:	ef 92       	push	r14
    8d06:	ff 92       	push	r15
    8d08:	0f 93       	push	r16
    8d0a:	1f 93       	push	r17
    8d0c:	cf 93       	push	r28
    8d0e:	df 93       	push	r29
    8d10:	cd b7       	in	r28, 0x3d	; 61
    8d12:	de b7       	in	r29, 0x3e	; 62
    8d14:	a1 97       	sbiw	r28, 0x21	; 33
    8d16:	0f b6       	in	r0, 0x3f	; 63
    8d18:	f8 94       	cli
    8d1a:	de bf       	out	0x3e, r29	; 62
    8d1c:	0f be       	out	0x3f, r0	; 63
    8d1e:	cd bf       	out	0x3d, r28	; 61
    8d20:	5c 01       	movw	r10, r24
    8d22:	4b 01       	movw	r8, r22
    8d24:	db 01       	movw	r26, r22
    8d26:	14 96       	adiw	r26, 0x04	; 4
    8d28:	0d 91       	ld	r16, X+
    8d2a:	1c 91       	ld	r17, X
    8d2c:	d1 2c       	mov	r13, r1
    8d2e:	c1 2c       	mov	r12, r1
    8d30:	f1 2c       	mov	r15, r1
    8d32:	e1 2c       	mov	r14, r1
    8d34:	01 15       	cp	r16, r1
    8d36:	11 05       	cpc	r17, r1
    8d38:	01 f1       	breq	.+64     	; 0x8d7a <Print::print(String const&)+0x82>
    8d3a:	96 01       	movw	r18, r12
    8d3c:	41 e2       	ldi	r20, 0x21	; 33
    8d3e:	50 e0       	ldi	r21, 0x00	; 0
    8d40:	be 01       	movw	r22, r28
    8d42:	6f 5f       	subi	r22, 0xFF	; 255
    8d44:	7f 4f       	sbci	r23, 0xFF	; 255
    8d46:	c4 01       	movw	r24, r8
    8d48:	5a d3       	rcall	.+1716   	; 0x93fe <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    8d4a:	a8 01       	movw	r20, r16
    8d4c:	01 32       	cpi	r16, 0x21	; 33
    8d4e:	11 05       	cpc	r17, r1
    8d50:	10 f0       	brcs	.+4      	; 0x8d56 <Print::print(String const&)+0x5e>
    8d52:	40 e2       	ldi	r20, 0x20	; 32
    8d54:	50 e0       	ldi	r21, 0x00	; 0
    8d56:	c4 0e       	add	r12, r20
    8d58:	d5 1e       	adc	r13, r21
    8d5a:	04 1b       	sub	r16, r20
    8d5c:	15 0b       	sbc	r17, r21
    8d5e:	d5 01       	movw	r26, r10
    8d60:	ed 91       	ld	r30, X+
    8d62:	fc 91       	ld	r31, X
    8d64:	02 80       	ldd	r0, Z+2	; 0x02
    8d66:	f3 81       	ldd	r31, Z+3	; 0x03
    8d68:	e0 2d       	mov	r30, r0
    8d6a:	be 01       	movw	r22, r28
    8d6c:	6f 5f       	subi	r22, 0xFF	; 255
    8d6e:	7f 4f       	sbci	r23, 0xFF	; 255
    8d70:	c5 01       	movw	r24, r10
    8d72:	09 95       	icall
    8d74:	e8 0e       	add	r14, r24
    8d76:	f9 1e       	adc	r15, r25
    8d78:	dd cf       	rjmp	.-70     	; 0x8d34 <Print::print(String const&)+0x3c>
    8d7a:	c7 01       	movw	r24, r14
    8d7c:	a1 96       	adiw	r28, 0x21	; 33
    8d7e:	0f b6       	in	r0, 0x3f	; 63
    8d80:	f8 94       	cli
    8d82:	de bf       	out	0x3e, r29	; 62
    8d84:	0f be       	out	0x3f, r0	; 63
    8d86:	cd bf       	out	0x3d, r28	; 61
    8d88:	df 91       	pop	r29
    8d8a:	cf 91       	pop	r28
    8d8c:	1f 91       	pop	r17
    8d8e:	0f 91       	pop	r16
    8d90:	ff 90       	pop	r15
    8d92:	ef 90       	pop	r14
    8d94:	df 90       	pop	r13
    8d96:	cf 90       	pop	r12
    8d98:	bf 90       	pop	r11
    8d9a:	af 90       	pop	r10
    8d9c:	9f 90       	pop	r9
    8d9e:	8f 90       	pop	r8
    8da0:	08 95       	ret

00008da2 <Print::println()>:
    8da2:	cf 93       	push	r28
    8da4:	df 93       	push	r29
    8da6:	00 d0       	rcall	.+0      	; 0x8da8 <Print::println()+0x6>
    8da8:	cd b7       	in	r28, 0x3d	; 61
    8daa:	de b7       	in	r29, 0x3e	; 62
    8dac:	2d e0       	ldi	r18, 0x0D	; 13
    8dae:	29 83       	std	Y+1, r18	; 0x01
    8db0:	2a e0       	ldi	r18, 0x0A	; 10
    8db2:	2a 83       	std	Y+2, r18	; 0x02
    8db4:	dc 01       	movw	r26, r24
    8db6:	ed 91       	ld	r30, X+
    8db8:	fc 91       	ld	r31, X
    8dba:	02 80       	ldd	r0, Z+2	; 0x02
    8dbc:	f3 81       	ldd	r31, Z+3	; 0x03
    8dbe:	e0 2d       	mov	r30, r0
    8dc0:	42 e0       	ldi	r20, 0x02	; 2
    8dc2:	50 e0       	ldi	r21, 0x00	; 0
    8dc4:	be 01       	movw	r22, r28
    8dc6:	6f 5f       	subi	r22, 0xFF	; 255
    8dc8:	7f 4f       	sbci	r23, 0xFF	; 255
    8dca:	09 95       	icall
    8dcc:	0f 90       	pop	r0
    8dce:	0f 90       	pop	r0
    8dd0:	df 91       	pop	r29
    8dd2:	cf 91       	pop	r28
    8dd4:	08 95       	ret

00008dd6 <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    8dd6:	cf 93       	push	r28
    8dd8:	df 93       	push	r29
    8dda:	cd b7       	in	r28, 0x3d	; 61
    8ddc:	de b7       	in	r29, 0x3e	; 62
    8dde:	2b 97       	sbiw	r28, 0x0b	; 11
    8de0:	0f b6       	in	r0, 0x3f	; 63
    8de2:	f8 94       	cli
    8de4:	de bf       	out	0x3e, r29	; 62
    8de6:	0f be       	out	0x3f, r0	; 63
    8de8:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    8dea:	fe 01       	movw	r30, r28
    8dec:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    8dee:	a3 e3       	ldi	r26, 0x33	; 51
    8df0:	4a 9f       	mul	r20, r26
    8df2:	44 27       	eor	r20, r20
    8df4:	0a 0e       	add	r0, r26
    8df6:	41 1d       	adc	r20, r1
    8df8:	30 2d       	mov	r19, r0
    8dfa:	5a 9f       	mul	r21, r26
    8dfc:	55 27       	eor	r21, r21
    8dfe:	40 0d       	add	r20, r0
    8e00:	51 1d       	adc	r21, r1
    8e02:	6a 9f       	mul	r22, r26
    8e04:	66 27       	eor	r22, r22
    8e06:	50 0d       	add	r21, r0
    8e08:	61 1d       	adc	r22, r1
    8e0a:	7a 9f       	mul	r23, r26
    8e0c:	77 27       	eor	r23, r23
    8e0e:	60 0d       	add	r22, r0
    8e10:	71 1d       	adc	r23, r1
    8e12:	11 24       	eor	r1, r1
    8e14:	34 0f       	add	r19, r20
    8e16:	45 1f       	adc	r20, r21
    8e18:	56 1f       	adc	r21, r22
    8e1a:	67 1f       	adc	r22, r23
    8e1c:	71 1d       	adc	r23, r1
    8e1e:	35 0f       	add	r19, r21
    8e20:	46 1f       	adc	r20, r22
    8e22:	57 1f       	adc	r21, r23
    8e24:	61 1d       	adc	r22, r1
    8e26:	71 1d       	adc	r23, r1
    8e28:	37 0f       	add	r19, r23
    8e2a:	41 1d       	adc	r20, r1
    8e2c:	51 1d       	adc	r21, r1
    8e2e:	61 1d       	adc	r22, r1
    8e30:	71 1d       	adc	r23, r1
    8e32:	76 95       	lsr	r23
    8e34:	67 95       	ror	r22
    8e36:	57 95       	ror	r21
    8e38:	47 95       	ror	r20
    8e3a:	37 95       	ror	r19
    8e3c:	aa e0       	ldi	r26, 0x0A	; 10
    8e3e:	3a 9f       	mul	r19, r26
    8e40:	31 2d       	mov	r19, r1
    8e42:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    8e44:	df 01       	movw	r26, r30
    8e46:	30 5d       	subi	r19, 0xD0	; 208
    8e48:	3e 93       	st	-X, r19
	} while (n);
    8e4a:	41 15       	cp	r20, r1
    8e4c:	51 05       	cpc	r21, r1
    8e4e:	61 05       	cpc	r22, r1
    8e50:	71 05       	cpc	r23, r1
    8e52:	09 f5       	brne	.+66     	; 0x8e96 <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    8e54:	22 23       	and	r18, r18
    8e56:	41 f0       	breq	.+16     	; 0x8e68 <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    8e58:	bd 01       	movw	r22, r26
    8e5a:	61 50       	subi	r22, 0x01	; 1
    8e5c:	71 09       	sbc	r23, r1
    8e5e:	2d e2       	ldi	r18, 0x2D	; 45
    8e60:	db 01       	movw	r26, r22
    8e62:	2c 93       	st	X, r18
    8e64:	df 01       	movw	r26, r30
    8e66:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    8e68:	ae 01       	movw	r20, r28
    8e6a:	4a 1b       	sub	r20, r26
    8e6c:	5b 0b       	sbc	r21, r27
    8e6e:	44 5f       	subi	r20, 0xF4	; 244
    8e70:	5f 4f       	sbci	r21, 0xFF	; 255
    8e72:	fc 01       	movw	r30, r24
    8e74:	20 81       	ld	r18, Z
    8e76:	31 81       	ldd	r19, Z+1	; 0x01
    8e78:	f9 01       	movw	r30, r18
    8e7a:	22 81       	ldd	r18, Z+2	; 0x02
    8e7c:	33 81       	ldd	r19, Z+3	; 0x03
    8e7e:	bd 01       	movw	r22, r26
    8e80:	f9 01       	movw	r30, r18
    8e82:	09 95       	icall
}
    8e84:	2b 96       	adiw	r28, 0x0b	; 11
    8e86:	0f b6       	in	r0, 0x3f	; 63
    8e88:	f8 94       	cli
    8e8a:	de bf       	out	0x3e, r29	; 62
    8e8c:	0f be       	out	0x3f, r0	; 63
    8e8e:	cd bf       	out	0x3d, r28	; 61
    8e90:	df 91       	pop	r29
    8e92:	cf 91       	pop	r28
    8e94:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    8e96:	fd 01       	movw	r30, r26
    8e98:	aa cf       	rjmp	.-172    	; 0x8dee <Print::printNumberDec(unsigned long, unsigned char)+0x18>

00008e9a <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    8e9a:	cf 93       	push	r28
    8e9c:	df 93       	push	r29
    8e9e:	1f 92       	push	r1
    8ea0:	cd b7       	in	r28, 0x3d	; 61
    8ea2:	de b7       	in	r29, 0x3e	; 62
    8ea4:	69 83       	std	Y+1, r22	; 0x01
    8ea6:	dc 01       	movw	r26, r24
    8ea8:	ed 91       	ld	r30, X+
    8eaa:	fc 91       	ld	r31, X
    8eac:	02 80       	ldd	r0, Z+2	; 0x02
    8eae:	f3 81       	ldd	r31, Z+3	; 0x03
    8eb0:	e0 2d       	mov	r30, r0
    8eb2:	41 e0       	ldi	r20, 0x01	; 1
    8eb4:	50 e0       	ldi	r21, 0x00	; 0
    8eb6:	be 01       	movw	r22, r28
    8eb8:	6f 5f       	subi	r22, 0xFF	; 255
    8eba:	7f 4f       	sbci	r23, 0xFF	; 255
    8ebc:	09 95       	icall
    8ebe:	0f 90       	pop	r0
    8ec0:	df 91       	pop	r29
    8ec2:	cf 91       	pop	r28
    8ec4:	08 95       	ret

00008ec6 <usb_serial_class::available()>:
    8ec6:	fc 01       	movw	r30, r24
    8ec8:	8f b7       	in	r24, 0x3f	; 63
    8eca:	f8 94       	cli
    8ecc:	90 91 db 10 	lds	r25, 0x10DB	; 0x8010db <usb_configuration>
    8ed0:	91 11       	cpse	r25, r1
    8ed2:	0c c0       	rjmp	.+24     	; 0x8eec <usb_serial_class::available()+0x26>
    8ed4:	90 e0       	ldi	r25, 0x00	; 0
    8ed6:	8f bf       	out	0x3f, r24	; 63
    8ed8:	20 85       	ldd	r18, Z+8	; 0x08
    8eda:	31 85       	ldd	r19, Z+9	; 0x09
    8edc:	37 fd       	sbrc	r19, 7
    8ede:	03 c0       	rjmp	.+6      	; 0x8ee6 <usb_serial_class::available()+0x20>
    8ee0:	9f 3f       	cpi	r25, 0xFF	; 255
    8ee2:	09 f0       	breq	.+2      	; 0x8ee6 <usb_serial_class::available()+0x20>
    8ee4:	9f 5f       	subi	r25, 0xFF	; 255
    8ee6:	89 2f       	mov	r24, r25
    8ee8:	90 e0       	ldi	r25, 0x00	; 0
    8eea:	08 95       	ret
    8eec:	93 e0       	ldi	r25, 0x03	; 3
    8eee:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    8ef2:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    8ef6:	91 11       	cpse	r25, r1
    8ef8:	ee cf       	rjmp	.-36     	; 0x8ed6 <usb_serial_class::available()+0x10>
    8efa:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8efe:	22 ff       	sbrs	r18, 2
    8f00:	e9 cf       	rjmp	.-46     	; 0x8ed4 <usb_serial_class::available()+0xe>
    8f02:	25 fd       	sbrc	r18, 5
    8f04:	e7 cf       	rjmp	.-50     	; 0x8ed4 <usb_serial_class::available()+0xe>
    8f06:	2b e6       	ldi	r18, 0x6B	; 107
    8f08:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8f0c:	e4 cf       	rjmp	.-56     	; 0x8ed6 <usb_serial_class::available()+0x10>

00008f0e <usb_serial_class::peek()>:
    8f0e:	cf 93       	push	r28
    8f10:	df 93       	push	r29
    8f12:	ec 01       	movw	r28, r24
    8f14:	88 85       	ldd	r24, Y+8	; 0x08
    8f16:	99 85       	ldd	r25, Y+9	; 0x09
    8f18:	97 ff       	sbrs	r25, 7
    8f1a:	09 c0       	rjmp	.+18     	; 0x8f2e <usb_serial_class::peek()+0x20>
    8f1c:	e8 81       	ld	r30, Y
    8f1e:	f9 81       	ldd	r31, Y+1	; 0x01
    8f20:	02 84       	ldd	r0, Z+10	; 0x0a
    8f22:	f3 85       	ldd	r31, Z+11	; 0x0b
    8f24:	e0 2d       	mov	r30, r0
    8f26:	ce 01       	movw	r24, r28
    8f28:	09 95       	icall
    8f2a:	99 87       	std	Y+9, r25	; 0x09
    8f2c:	88 87       	std	Y+8, r24	; 0x08
    8f2e:	88 85       	ldd	r24, Y+8	; 0x08
    8f30:	99 85       	ldd	r25, Y+9	; 0x09
    8f32:	df 91       	pop	r29
    8f34:	cf 91       	pop	r28
    8f36:	08 95       	ret

00008f38 <usb_serial_class::read()>:
    8f38:	fc 01       	movw	r30, r24
    8f3a:	20 85       	ldd	r18, Z+8	; 0x08
    8f3c:	31 85       	ldd	r19, Z+9	; 0x09
    8f3e:	37 fd       	sbrc	r19, 7
    8f40:	07 c0       	rjmp	.+14     	; 0x8f50 <usb_serial_class::read()+0x18>
    8f42:	4f ef       	ldi	r20, 0xFF	; 255
    8f44:	5f ef       	ldi	r21, 0xFF	; 255
    8f46:	51 87       	std	Z+9, r21	; 0x09
    8f48:	40 87       	std	Z+8, r20	; 0x08
    8f4a:	c9 01       	movw	r24, r18
    8f4c:	99 27       	eor	r25, r25
    8f4e:	08 95       	ret
    8f50:	9f b7       	in	r25, 0x3f	; 63
    8f52:	f8 94       	cli
    8f54:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <usb_configuration>
    8f58:	81 11       	cpse	r24, r1
    8f5a:	04 c0       	rjmp	.+8      	; 0x8f64 <usb_serial_class::read()+0x2c>
    8f5c:	9f bf       	out	0x3f, r25	; 63
    8f5e:	8f ef       	ldi	r24, 0xFF	; 255
    8f60:	9f ef       	ldi	r25, 0xFF	; 255
    8f62:	08 95       	ret
    8f64:	83 e0       	ldi	r24, 0x03	; 3
    8f66:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    8f6a:	2b e6       	ldi	r18, 0x6B	; 107
    8f6c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8f70:	85 fd       	sbrc	r24, 5
    8f72:	05 c0       	rjmp	.+10     	; 0x8f7e <usb_serial_class::read()+0x46>
    8f74:	82 ff       	sbrs	r24, 2
    8f76:	f2 cf       	rjmp	.-28     	; 0x8f5c <usb_serial_class::read()+0x24>
    8f78:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8f7c:	f7 cf       	rjmp	.-18     	; 0x8f6c <usb_serial_class::read()+0x34>
    8f7e:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    8f82:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8f86:	25 fd       	sbrc	r18, 5
    8f88:	03 c0       	rjmp	.+6      	; 0x8f90 <usb_serial_class::read()+0x58>
    8f8a:	2b e6       	ldi	r18, 0x6B	; 107
    8f8c:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8f90:	9f bf       	out	0x3f, r25	; 63
    8f92:	90 e0       	ldi	r25, 0x00	; 0
    8f94:	08 95       	ret

00008f96 <usb_serial_class::availableForWrite()>:
    8f96:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <usb_configuration>
    8f9a:	88 23       	and	r24, r24
    8f9c:	61 f0       	breq	.+24     	; 0x8fb6 <usb_serial_class::availableForWrite()+0x20>
    8f9e:	8f b7       	in	r24, 0x3f	; 63
    8fa0:	f8 94       	cli
    8fa2:	94 e0       	ldi	r25, 0x04	; 4
    8fa4:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    8fa8:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    8fac:	8f bf       	out	0x3f, r24	; 63
    8fae:	80 e4       	ldi	r24, 0x40	; 64
    8fb0:	89 1b       	sub	r24, r25
    8fb2:	90 e0       	ldi	r25, 0x00	; 0
    8fb4:	08 95       	ret
    8fb6:	90 e0       	ldi	r25, 0x00	; 0
    8fb8:	80 e0       	ldi	r24, 0x00	; 0
    8fba:	08 95       	ret

00008fbc <usb_serial_class::write(unsigned char const*, unsigned int)>:
    8fbc:	bf 92       	push	r11
    8fbe:	cf 92       	push	r12
    8fc0:	df 92       	push	r13
    8fc2:	ef 92       	push	r14
    8fc4:	ff 92       	push	r15
    8fc6:	0f 93       	push	r16
    8fc8:	1f 93       	push	r17
    8fca:	cf 93       	push	r28
    8fcc:	df 93       	push	r29
    8fce:	7c 01       	movw	r14, r24
    8fd0:	80 91 db 10 	lds	r24, 0x10DB	; 0x8010db <usb_configuration>
    8fd4:	81 11       	cpse	r24, r1
    8fd6:	10 c0       	rjmp	.+32     	; 0x8ff8 <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    8fd8:	81 e0       	ldi	r24, 0x01	; 1
    8fda:	f7 01       	movw	r30, r14
    8fdc:	82 83       	std	Z+2, r24	; 0x02
    8fde:	10 e0       	ldi	r17, 0x00	; 0
    8fe0:	00 e0       	ldi	r16, 0x00	; 0
    8fe2:	c8 01       	movw	r24, r16
    8fe4:	df 91       	pop	r29
    8fe6:	cf 91       	pop	r28
    8fe8:	1f 91       	pop	r17
    8fea:	0f 91       	pop	r16
    8fec:	ff 90       	pop	r15
    8fee:	ef 90       	pop	r14
    8ff0:	df 90       	pop	r13
    8ff2:	cf 90       	pop	r12
    8ff4:	bf 90       	pop	r11
    8ff6:	08 95       	ret
    8ff8:	2f b7       	in	r18, 0x3f	; 63
    8ffa:	f8 94       	cli
    8ffc:	84 e0       	ldi	r24, 0x04	; 4
    8ffe:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9002:	80 91 55 10 	lds	r24, 0x1055	; 0x801055 <transmit_previous_timeout>
    9006:	88 23       	and	r24, r24
    9008:	41 f0       	breq	.+16     	; 0x901a <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    900a:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    900e:	85 fd       	sbrc	r24, 5
    9010:	02 c0       	rjmp	.+4      	; 0x9016 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    9012:	2f bf       	out	0x3f, r18	; 63
    9014:	e1 cf       	rjmp	.-62     	; 0x8fd8 <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    9016:	10 92 55 10 	sts	0x1055, r1	; 0x801055 <transmit_previous_timeout>
    901a:	10 e0       	ldi	r17, 0x00	; 0
    901c:	00 e0       	ldi	r16, 0x00	; 0
    901e:	84 e0       	ldi	r24, 0x04	; 4
    9020:	d8 2e       	mov	r13, r24
    9022:	90 e4       	ldi	r25, 0x40	; 64
    9024:	c9 2e       	mov	r12, r25
    9026:	a1 ef       	ldi	r26, 0xF1	; 241
    9028:	b0 e0       	ldi	r27, 0x00	; 0
    902a:	3a e3       	ldi	r19, 0x3A	; 58
    902c:	b3 2e       	mov	r11, r19
    902e:	33 e0       	ldi	r19, 0x03	; 3
    9030:	41 15       	cp	r20, r1
    9032:	51 05       	cpc	r21, r1
    9034:	09 f4       	brne	.+2      	; 0x9038 <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    9036:	c0 c0       	rjmp	.+384    	; 0x91b8 <L548end+0x12>
    9038:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    903c:	81 5f       	subi	r24, 0xF1	; 241
    903e:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9042:	95 fd       	sbrc	r25, 5
    9044:	16 c0       	rjmp	.+44     	; 0x9072 <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    9046:	2f bf       	out	0x3f, r18	; 63
    9048:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    904c:	89 13       	cpse	r24, r25
    904e:	06 c0       	rjmp	.+12     	; 0x905c <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    9050:	81 e0       	ldi	r24, 0x01	; 1
    9052:	80 93 55 10 	sts	0x1055, r24	; 0x801055 <transmit_previous_timeout>
    9056:	f7 01       	movw	r30, r14
    9058:	82 83       	std	Z+2, r24	; 0x02
    905a:	c3 cf       	rjmp	.-122    	; 0x8fe2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    905c:	90 91 db 10 	lds	r25, 0x10DB	; 0x8010db <usb_configuration>
    9060:	91 11       	cpse	r25, r1
    9062:	02 c0       	rjmp	.+4      	; 0x9068 <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    9064:	81 e0       	ldi	r24, 0x01	; 1
    9066:	f7 cf       	rjmp	.-18     	; 0x9056 <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    9068:	2f b7       	in	r18, 0x3f	; 63
    906a:	f8 94       	cli
    906c:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9070:	e6 cf       	rjmp	.-52     	; 0x903e <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    9072:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9076:	9c 2d       	mov	r25, r12
    9078:	98 1b       	sub	r25, r24
    907a:	94 17       	cp	r25, r20
    907c:	15 06       	cpc	r1, r21
    907e:	11 f0       	breq	.+4      	; 0x9084 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    9080:	08 f0       	brcs	.+2      	; 0x9084 <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    9082:	94 2f       	mov	r25, r20
    9084:	e9 2f       	mov	r30, r25
    9086:	f0 e0       	ldi	r31, 0x00	; 0
    9088:	4e 1b       	sub	r20, r30
    908a:	5f 0b       	sbc	r21, r31
    908c:	0e 0f       	add	r16, r30
    908e:	1f 1f       	adc	r17, r31
    9090:	eb 01       	movw	r28, r22

00009092 <L548begin>:
    9092:	e0 e4       	ldi	r30, 0x40	; 64
    9094:	e9 1b       	sub	r30, r25
    9096:	e0 34       	cpi	r30, 0x40	; 64
    9098:	28 f4       	brcc	.+10     	; 0x90a4 <L548err>
    909a:	ee 0f       	add	r30, r30
    909c:	ff 27       	eor	r31, r31
    909e:	ed 5a       	subi	r30, 0xAD	; 173
    90a0:	f7 4b       	sbci	r31, 0xB7	; 183
    90a2:	09 94       	ijmp

000090a4 <L548err>:
    90a4:	80 c0       	rjmp	.+256    	; 0x91a6 <L548end>

000090a6 <L548table>:
    90a6:	99 91       	ld	r25, Y+
    90a8:	9c 93       	st	X, r25
    90aa:	99 91       	ld	r25, Y+
    90ac:	9c 93       	st	X, r25
    90ae:	99 91       	ld	r25, Y+
    90b0:	9c 93       	st	X, r25
    90b2:	99 91       	ld	r25, Y+
    90b4:	9c 93       	st	X, r25
    90b6:	99 91       	ld	r25, Y+
    90b8:	9c 93       	st	X, r25
    90ba:	99 91       	ld	r25, Y+
    90bc:	9c 93       	st	X, r25
    90be:	99 91       	ld	r25, Y+
    90c0:	9c 93       	st	X, r25
    90c2:	99 91       	ld	r25, Y+
    90c4:	9c 93       	st	X, r25
    90c6:	99 91       	ld	r25, Y+
    90c8:	9c 93       	st	X, r25
    90ca:	99 91       	ld	r25, Y+
    90cc:	9c 93       	st	X, r25
    90ce:	99 91       	ld	r25, Y+
    90d0:	9c 93       	st	X, r25
    90d2:	99 91       	ld	r25, Y+
    90d4:	9c 93       	st	X, r25
    90d6:	99 91       	ld	r25, Y+
    90d8:	9c 93       	st	X, r25
    90da:	99 91       	ld	r25, Y+
    90dc:	9c 93       	st	X, r25
    90de:	99 91       	ld	r25, Y+
    90e0:	9c 93       	st	X, r25
    90e2:	99 91       	ld	r25, Y+
    90e4:	9c 93       	st	X, r25
    90e6:	99 91       	ld	r25, Y+
    90e8:	9c 93       	st	X, r25
    90ea:	99 91       	ld	r25, Y+
    90ec:	9c 93       	st	X, r25
    90ee:	99 91       	ld	r25, Y+
    90f0:	9c 93       	st	X, r25
    90f2:	99 91       	ld	r25, Y+
    90f4:	9c 93       	st	X, r25
    90f6:	99 91       	ld	r25, Y+
    90f8:	9c 93       	st	X, r25
    90fa:	99 91       	ld	r25, Y+
    90fc:	9c 93       	st	X, r25
    90fe:	99 91       	ld	r25, Y+
    9100:	9c 93       	st	X, r25
    9102:	99 91       	ld	r25, Y+
    9104:	9c 93       	st	X, r25
    9106:	99 91       	ld	r25, Y+
    9108:	9c 93       	st	X, r25
    910a:	99 91       	ld	r25, Y+
    910c:	9c 93       	st	X, r25
    910e:	99 91       	ld	r25, Y+
    9110:	9c 93       	st	X, r25
    9112:	99 91       	ld	r25, Y+
    9114:	9c 93       	st	X, r25
    9116:	99 91       	ld	r25, Y+
    9118:	9c 93       	st	X, r25
    911a:	99 91       	ld	r25, Y+
    911c:	9c 93       	st	X, r25
    911e:	99 91       	ld	r25, Y+
    9120:	9c 93       	st	X, r25
    9122:	99 91       	ld	r25, Y+
    9124:	9c 93       	st	X, r25
    9126:	99 91       	ld	r25, Y+
    9128:	9c 93       	st	X, r25
    912a:	99 91       	ld	r25, Y+
    912c:	9c 93       	st	X, r25
    912e:	99 91       	ld	r25, Y+
    9130:	9c 93       	st	X, r25
    9132:	99 91       	ld	r25, Y+
    9134:	9c 93       	st	X, r25
    9136:	99 91       	ld	r25, Y+
    9138:	9c 93       	st	X, r25
    913a:	99 91       	ld	r25, Y+
    913c:	9c 93       	st	X, r25
    913e:	99 91       	ld	r25, Y+
    9140:	9c 93       	st	X, r25
    9142:	99 91       	ld	r25, Y+
    9144:	9c 93       	st	X, r25
    9146:	99 91       	ld	r25, Y+
    9148:	9c 93       	st	X, r25
    914a:	99 91       	ld	r25, Y+
    914c:	9c 93       	st	X, r25
    914e:	99 91       	ld	r25, Y+
    9150:	9c 93       	st	X, r25
    9152:	99 91       	ld	r25, Y+
    9154:	9c 93       	st	X, r25
    9156:	99 91       	ld	r25, Y+
    9158:	9c 93       	st	X, r25
    915a:	99 91       	ld	r25, Y+
    915c:	9c 93       	st	X, r25
    915e:	99 91       	ld	r25, Y+
    9160:	9c 93       	st	X, r25
    9162:	99 91       	ld	r25, Y+
    9164:	9c 93       	st	X, r25
    9166:	99 91       	ld	r25, Y+
    9168:	9c 93       	st	X, r25
    916a:	99 91       	ld	r25, Y+
    916c:	9c 93       	st	X, r25
    916e:	99 91       	ld	r25, Y+
    9170:	9c 93       	st	X, r25
    9172:	99 91       	ld	r25, Y+
    9174:	9c 93       	st	X, r25
    9176:	99 91       	ld	r25, Y+
    9178:	9c 93       	st	X, r25
    917a:	99 91       	ld	r25, Y+
    917c:	9c 93       	st	X, r25
    917e:	99 91       	ld	r25, Y+
    9180:	9c 93       	st	X, r25
    9182:	99 91       	ld	r25, Y+
    9184:	9c 93       	st	X, r25
    9186:	99 91       	ld	r25, Y+
    9188:	9c 93       	st	X, r25
    918a:	99 91       	ld	r25, Y+
    918c:	9c 93       	st	X, r25
    918e:	99 91       	ld	r25, Y+
    9190:	9c 93       	st	X, r25
    9192:	99 91       	ld	r25, Y+
    9194:	9c 93       	st	X, r25
    9196:	99 91       	ld	r25, Y+
    9198:	9c 93       	st	X, r25
    919a:	99 91       	ld	r25, Y+
    919c:	9c 93       	st	X, r25
    919e:	99 91       	ld	r25, Y+
    91a0:	9c 93       	st	X, r25
    91a2:	99 91       	ld	r25, Y+
    91a4:	9c 93       	st	X, r25

000091a6 <L548end>:
    91a6:	be 01       	movw	r22, r28
    91a8:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    91ac:	85 ff       	sbrs	r24, 5
    91ae:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    91b2:	30 93 57 10 	sts	0x1057, r19	; 0x801057 <transmit_flush_timer>
    91b6:	3c cf       	rjmp	.-392    	; 0x9030 <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    91b8:	2f bf       	out	0x3f, r18	; 63
    91ba:	13 cf       	rjmp	.-474    	; 0x8fe2 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

000091bc <usb_serial_class::send_now()>:
    91bc:	8f b7       	in	r24, 0x3f	; 63
    91be:	f8 94       	cli
    91c0:	90 91 db 10 	lds	r25, 0x10DB	; 0x8010db <usb_configuration>
    91c4:	99 23       	and	r25, r25
    91c6:	61 f0       	breq	.+24     	; 0x91e0 <usb_serial_class::send_now()+0x24>
    91c8:	90 91 57 10 	lds	r25, 0x1057	; 0x801057 <transmit_flush_timer>
    91cc:	99 23       	and	r25, r25
    91ce:	41 f0       	breq	.+16     	; 0x91e0 <usb_serial_class::send_now()+0x24>
    91d0:	94 e0       	ldi	r25, 0x04	; 4
    91d2:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    91d6:	9a e3       	ldi	r25, 0x3A	; 58
    91d8:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    91dc:	10 92 57 10 	sts	0x1057, r1	; 0x801057 <transmit_flush_timer>
    91e0:	8f bf       	out	0x3f, r24	; 63
    91e2:	08 95       	ret

000091e4 <usb_serial_class::flush()>:
    91e4:	eb cf       	rjmp	.-42     	; 0x91bc <usb_serial_class::send_now()>

000091e6 <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    91e6:	ed ec       	ldi	r30, 0xCD	; 205
    91e8:	f0 e1       	ldi	r31, 0x10	; 16
    91ea:	11 86       	std	Z+9, r1	; 0x09
    91ec:	10 86       	std	Z+8, r1	; 0x08
    91ee:	12 82       	std	Z+2, r1	; 0x02
    91f0:	88 ee       	ldi	r24, 0xE8	; 232
    91f2:	93 e0       	ldi	r25, 0x03	; 3
    91f4:	a0 e0       	ldi	r26, 0x00	; 0
    91f6:	b0 e0       	ldi	r27, 0x00	; 0
    91f8:	83 83       	std	Z+3, r24	; 0x03
    91fa:	94 83       	std	Z+4, r25	; 0x04
    91fc:	a5 83       	std	Z+5, r26	; 0x05
    91fe:	b6 83       	std	Z+6, r27	; 0x06
    9200:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    9202:	86 e4       	ldi	r24, 0x46	; 70
    9204:	99 e0       	ldi	r25, 0x09	; 9
    9206:	91 83       	std	Z+1, r25	; 0x01
    9208:	80 83       	st	Z, r24
    920a:	08 95       	ret

0000920c <randomSeed(unsigned int)>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    920c:	00 97       	sbiw	r24, 0x00	; 0
    920e:	21 f0       	breq	.+8      	; 0x9218 <randomSeed(unsigned int)+0xc>
    srandom(seed);
    9210:	bc 01       	movw	r22, r24
    9212:	90 e0       	ldi	r25, 0x00	; 0
    9214:	80 e0       	ldi	r24, 0x00	; 0
    9216:	d3 c3       	rjmp	.+1958   	; 0x99be <srandom>
  }
}
    9218:	08 95       	ret

0000921a <random(long)>:

long random(long howbig)
{
    921a:	cf 92       	push	r12
    921c:	df 92       	push	r13
    921e:	ef 92       	push	r14
    9220:	ff 92       	push	r15
    9222:	6b 01       	movw	r12, r22
    9224:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    9226:	c1 14       	cp	r12, r1
    9228:	d1 04       	cpc	r13, r1
    922a:	e1 04       	cpc	r14, r1
    922c:	f1 04       	cpc	r15, r1
    922e:	31 f0       	breq	.+12     	; 0x923c <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    9230:	7a d3       	rcall	.+1780   	; 0x9926 <random>
    9232:	a7 01       	movw	r20, r14
    9234:	96 01       	movw	r18, r12
    9236:	ea d2       	rcall	.+1492   	; 0x980c <__divmodsi4>
    9238:	6b 01       	movw	r12, r22
    923a:	7c 01       	movw	r14, r24
}
    923c:	c7 01       	movw	r24, r14
    923e:	b6 01       	movw	r22, r12
    9240:	ff 90       	pop	r15
    9242:	ef 90       	pop	r14
    9244:	df 90       	pop	r13
    9246:	cf 90       	pop	r12
    9248:	08 95       	ret

0000924a <random(long, long)>:

long random(long howsmall, long howbig)
{
    924a:	cf 92       	push	r12
    924c:	df 92       	push	r13
    924e:	ef 92       	push	r14
    9250:	ff 92       	push	r15
    9252:	6b 01       	movw	r12, r22
    9254:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    9256:	c2 16       	cp	r12, r18
    9258:	d3 06       	cpc	r13, r19
    925a:	e4 06       	cpc	r14, r20
    925c:	f5 06       	cpc	r15, r21
    925e:	5c f4       	brge	.+22     	; 0x9276 <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    9260:	ca 01       	movw	r24, r20
    9262:	b9 01       	movw	r22, r18
    9264:	6c 19       	sub	r22, r12
    9266:	7d 09       	sbc	r23, r13
    9268:	8e 09       	sbc	r24, r14
    926a:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    926c:	d6 df       	rcall	.-84     	; 0x921a <random(long)>
    926e:	c6 0e       	add	r12, r22
    9270:	d7 1e       	adc	r13, r23
    9272:	e8 1e       	adc	r14, r24
    9274:	f9 1e       	adc	r15, r25
}
    9276:	c7 01       	movw	r24, r14
    9278:	b6 01       	movw	r22, r12
    927a:	ff 90       	pop	r15
    927c:	ef 90       	pop	r14
    927e:	df 90       	pop	r13
    9280:	cf 90       	pop	r12
    9282:	08 95       	ret

00009284 <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    9284:	4f 92       	push	r4
    9286:	5f 92       	push	r5
    9288:	6f 92       	push	r6
    928a:	7f 92       	push	r7
    928c:	af 92       	push	r10
    928e:	bf 92       	push	r11
    9290:	cf 92       	push	r12
    9292:	df 92       	push	r13
    9294:	ef 92       	push	r14
    9296:	ff 92       	push	r15
    9298:	0f 93       	push	r16
    929a:	1f 93       	push	r17
    929c:	cf 93       	push	r28
    929e:	df 93       	push	r29
    92a0:	cd b7       	in	r28, 0x3d	; 61
    92a2:	de b7       	in	r29, 0x3e	; 62
    92a4:	29 01       	movw	r4, r18
    92a6:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    92a8:	9b 01       	movw	r18, r22
    92aa:	ac 01       	movw	r20, r24
    92ac:	24 19       	sub	r18, r4
    92ae:	35 09       	sbc	r19, r5
    92b0:	46 09       	sbc	r20, r6
    92b2:	57 09       	sbc	r21, r7
    92b4:	89 89       	ldd	r24, Y+17	; 0x11
    92b6:	9a 89       	ldd	r25, Y+18	; 0x12
    92b8:	ab 89       	ldd	r26, Y+19	; 0x13
    92ba:	bc 89       	ldd	r27, Y+20	; 0x14
    92bc:	bc 01       	movw	r22, r24
    92be:	cd 01       	movw	r24, r26
    92c0:	6a 19       	sub	r22, r10
    92c2:	7b 09       	sbc	r23, r11
    92c4:	8c 09       	sbc	r24, r12
    92c6:	9d 09       	sbc	r25, r13
    92c8:	49 d2       	rcall	.+1170   	; 0x975c <__mulsi3>
    92ca:	a8 01       	movw	r20, r16
    92cc:	97 01       	movw	r18, r14
    92ce:	24 19       	sub	r18, r4
    92d0:	35 09       	sbc	r19, r5
    92d2:	46 09       	sbc	r20, r6
    92d4:	57 09       	sbc	r21, r7
    92d6:	9a d2       	rcall	.+1332   	; 0x980c <__divmodsi4>
    92d8:	ca 01       	movw	r24, r20
    92da:	b9 01       	movw	r22, r18
    92dc:	6a 0d       	add	r22, r10
    92de:	7b 1d       	adc	r23, r11
    92e0:	8c 1d       	adc	r24, r12
    92e2:	9d 1d       	adc	r25, r13
}
    92e4:	df 91       	pop	r29
    92e6:	cf 91       	pop	r28
    92e8:	1f 91       	pop	r17
    92ea:	0f 91       	pop	r16
    92ec:	ff 90       	pop	r15
    92ee:	ef 90       	pop	r14
    92f0:	df 90       	pop	r13
    92f2:	cf 90       	pop	r12
    92f4:	bf 90       	pop	r11
    92f6:	af 90       	pop	r10
    92f8:	7f 90       	pop	r7
    92fa:	6f 90       	pop	r6
    92fc:	5f 90       	pop	r5
    92fe:	4f 90       	pop	r4
    9300:	08 95       	ret

00009302 <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    9302:	fc 01       	movw	r30, r24
    9304:	80 81       	ld	r24, Z
    9306:	91 81       	ldd	r25, Z+1	; 0x01
    9308:	0c 94 59 3f 	jmp	0x7eb2	; 0x7eb2 <free>

0000930c <String::changeBuffer(unsigned int)>:
    930c:	0f 93       	push	r16
    930e:	1f 93       	push	r17
    9310:	cf 93       	push	r28
    9312:	df 93       	push	r29
    9314:	ec 01       	movw	r28, r24
    9316:	8b 01       	movw	r16, r22
    9318:	6f 5f       	subi	r22, 0xFF	; 255
    931a:	7f 4f       	sbci	r23, 0xFF	; 255
    931c:	88 81       	ld	r24, Y
    931e:	99 81       	ldd	r25, Y+1	; 0x01
    9320:	0e 94 e2 3f 	call	0x7fc4	; 0x7fc4 <realloc>
    9324:	00 97       	sbiw	r24, 0x00	; 0
    9326:	51 f0       	breq	.+20     	; 0x933c <String::changeBuffer(unsigned int)+0x30>
    9328:	99 83       	std	Y+1, r25	; 0x01
    932a:	88 83       	st	Y, r24
    932c:	1b 83       	std	Y+3, r17	; 0x03
    932e:	0a 83       	std	Y+2, r16	; 0x02
    9330:	81 e0       	ldi	r24, 0x01	; 1
    9332:	df 91       	pop	r29
    9334:	cf 91       	pop	r28
    9336:	1f 91       	pop	r17
    9338:	0f 91       	pop	r16
    933a:	08 95       	ret
    933c:	80 e0       	ldi	r24, 0x00	; 0
    933e:	f9 cf       	rjmp	.-14     	; 0x9332 <String::changeBuffer(unsigned int)+0x26>

00009340 <String::reserve(unsigned int)>:
    9340:	cf 93       	push	r28
    9342:	df 93       	push	r29
    9344:	fc 01       	movw	r30, r24
    9346:	22 81       	ldd	r18, Z+2	; 0x02
    9348:	33 81       	ldd	r19, Z+3	; 0x03
    934a:	26 17       	cp	r18, r22
    934c:	37 07       	cpc	r19, r23
    934e:	20 f0       	brcs	.+8      	; 0x9358 <String::reserve(unsigned int)+0x18>
    9350:	81 e0       	ldi	r24, 0x01	; 1
    9352:	df 91       	pop	r29
    9354:	cf 91       	pop	r28
    9356:	08 95       	ret
    9358:	ec 01       	movw	r28, r24
    935a:	d8 df       	rcall	.-80     	; 0x930c <String::changeBuffer(unsigned int)>
    935c:	88 23       	and	r24, r24
    935e:	c9 f3       	breq	.-14     	; 0x9352 <String::reserve(unsigned int)+0x12>
    9360:	8c 81       	ldd	r24, Y+4	; 0x04
    9362:	9d 81       	ldd	r25, Y+5	; 0x05
    9364:	89 2b       	or	r24, r25
    9366:	a1 f7       	brne	.-24     	; 0x9350 <String::reserve(unsigned int)+0x10>
    9368:	e8 81       	ld	r30, Y
    936a:	f9 81       	ldd	r31, Y+1	; 0x01
    936c:	10 82       	st	Z, r1
    936e:	f0 cf       	rjmp	.-32     	; 0x9350 <String::reserve(unsigned int)+0x10>

00009370 <String::copy(char const*, unsigned int)>:
    9370:	ef 92       	push	r14
    9372:	ff 92       	push	r15
    9374:	0f 93       	push	r16
    9376:	1f 93       	push	r17
    9378:	cf 93       	push	r28
    937a:	df 93       	push	r29
    937c:	ec 01       	movw	r28, r24
    937e:	7b 01       	movw	r14, r22
    9380:	8a 01       	movw	r16, r20
    9382:	41 15       	cp	r20, r1
    9384:	51 05       	cpc	r21, r1
    9386:	79 f4       	brne	.+30     	; 0x93a6 <String::copy(char const*, unsigned int)+0x36>
    9388:	e8 81       	ld	r30, Y
    938a:	f9 81       	ldd	r31, Y+1	; 0x01
    938c:	30 97       	sbiw	r30, 0x00	; 0
    938e:	09 f0       	breq	.+2      	; 0x9392 <String::copy(char const*, unsigned int)+0x22>
    9390:	10 82       	st	Z, r1
    9392:	1d 82       	std	Y+5, r1	; 0x05
    9394:	1c 82       	std	Y+4, r1	; 0x04
    9396:	ce 01       	movw	r24, r28
    9398:	df 91       	pop	r29
    939a:	cf 91       	pop	r28
    939c:	1f 91       	pop	r17
    939e:	0f 91       	pop	r16
    93a0:	ff 90       	pop	r15
    93a2:	ef 90       	pop	r14
    93a4:	08 95       	ret
    93a6:	ba 01       	movw	r22, r20
    93a8:	cb df       	rcall	.-106    	; 0x9340 <String::reserve(unsigned int)>
    93aa:	28 81       	ld	r18, Y
    93ac:	39 81       	ldd	r19, Y+1	; 0x01
    93ae:	81 11       	cpse	r24, r1
    93b0:	0b c0       	rjmp	.+22     	; 0x93c8 <String::copy(char const*, unsigned int)+0x58>
    93b2:	21 15       	cp	r18, r1
    93b4:	31 05       	cpc	r19, r1
    93b6:	29 f0       	breq	.+10     	; 0x93c2 <String::copy(char const*, unsigned int)+0x52>
    93b8:	c9 01       	movw	r24, r18
    93ba:	0e 94 59 3f 	call	0x7eb2	; 0x7eb2 <free>
    93be:	19 82       	std	Y+1, r1	; 0x01
    93c0:	18 82       	st	Y, r1
    93c2:	1b 82       	std	Y+3, r1	; 0x03
    93c4:	1a 82       	std	Y+2, r1	; 0x02
    93c6:	e5 cf       	rjmp	.-54     	; 0x9392 <String::copy(char const*, unsigned int)+0x22>
    93c8:	1d 83       	std	Y+5, r17	; 0x05
    93ca:	0c 83       	std	Y+4, r16	; 0x04
    93cc:	b7 01       	movw	r22, r14
    93ce:	c9 01       	movw	r24, r18
    93d0:	08 d3       	rcall	.+1552   	; 0x99e2 <strcpy>
    93d2:	e1 cf       	rjmp	.-62     	; 0x9396 <String::copy(char const*, unsigned int)+0x26>

000093d4 <String::String(char const*)>:
    93d4:	fc 01       	movw	r30, r24
    93d6:	11 82       	std	Z+1, r1	; 0x01
    93d8:	10 82       	st	Z, r1
    93da:	13 82       	std	Z+3, r1	; 0x03
    93dc:	12 82       	std	Z+2, r1	; 0x02
    93de:	15 82       	std	Z+5, r1	; 0x05
    93e0:	14 82       	std	Z+4, r1	; 0x04
    93e2:	16 82       	std	Z+6, r1	; 0x06
    93e4:	61 15       	cp	r22, r1
    93e6:	71 05       	cpc	r23, r1
    93e8:	49 f0       	breq	.+18     	; 0x93fc <String::String(char const*)+0x28>
    93ea:	fb 01       	movw	r30, r22
    93ec:	01 90       	ld	r0, Z+
    93ee:	00 20       	and	r0, r0
    93f0:	e9 f7       	brne	.-6      	; 0x93ec <String::String(char const*)+0x18>
    93f2:	31 97       	sbiw	r30, 0x01	; 1
    93f4:	af 01       	movw	r20, r30
    93f6:	46 1b       	sub	r20, r22
    93f8:	57 0b       	sbc	r21, r23
    93fa:	ba cf       	rjmp	.-140    	; 0x9370 <String::copy(char const*, unsigned int)>
    93fc:	08 95       	ret

000093fe <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    93fe:	0f 93       	push	r16
    9400:	1f 93       	push	r17
    9402:	cf 93       	push	r28
    9404:	df 93       	push	r29
	if (!bufsize || !buf) return;
    9406:	41 15       	cp	r20, r1
    9408:	51 05       	cpc	r21, r1
    940a:	59 f0       	breq	.+22     	; 0x9422 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    940c:	61 15       	cp	r22, r1
    940e:	71 05       	cpc	r23, r1
    9410:	41 f0       	breq	.+16     	; 0x9422 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    9412:	fc 01       	movw	r30, r24
    9414:	04 81       	ldd	r16, Z+4	; 0x04
    9416:	15 81       	ldd	r17, Z+5	; 0x05
    9418:	20 17       	cp	r18, r16
    941a:	31 07       	cpc	r19, r17
    941c:	38 f0       	brcs	.+14     	; 0x942c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    941e:	fb 01       	movw	r30, r22
    9420:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    9422:	df 91       	pop	r29
    9424:	cf 91       	pop	r28
    9426:	1f 91       	pop	r17
    9428:	0f 91       	pop	r16
    942a:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    942c:	41 50       	subi	r20, 0x01	; 1
    942e:	51 09       	sbc	r21, r1
    9430:	02 1b       	sub	r16, r18
    9432:	13 0b       	sbc	r17, r19
    9434:	40 17       	cp	r20, r16
    9436:	51 07       	cpc	r21, r17
    9438:	08 f4       	brcc	.+2      	; 0x943c <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    943a:	8a 01       	movw	r16, r20
    943c:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    943e:	fc 01       	movw	r30, r24
    9440:	60 81       	ld	r22, Z
    9442:	71 81       	ldd	r23, Z+1	; 0x01
    9444:	62 0f       	add	r22, r18
    9446:	73 1f       	adc	r23, r19
    9448:	a8 01       	movw	r20, r16
    944a:	ce 01       	movw	r24, r28
    944c:	d1 d2       	rcall	.+1442   	; 0x99f0 <strncpy>
	buf[n] = 0;
    944e:	c0 0f       	add	r28, r16
    9450:	d1 1f       	adc	r29, r17
    9452:	18 82       	st	Y, r1
    9454:	e6 cf       	rjmp	.-52     	; 0x9422 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

00009456 <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    9456:	08 95       	ret

00009458 <__subsf3>:
    9458:	50 58       	subi	r21, 0x80	; 128

0000945a <__addsf3>:
    945a:	bb 27       	eor	r27, r27
    945c:	aa 27       	eor	r26, r26
    945e:	0e d0       	rcall	.+28     	; 0x947c <__addsf3x>
    9460:	e0 c0       	rjmp	.+448    	; 0x9622 <__fp_round>
    9462:	d1 d0       	rcall	.+418    	; 0x9606 <__fp_pscA>
    9464:	30 f0       	brcs	.+12     	; 0x9472 <__addsf3+0x18>
    9466:	d6 d0       	rcall	.+428    	; 0x9614 <__fp_pscB>
    9468:	20 f0       	brcs	.+8      	; 0x9472 <__addsf3+0x18>
    946a:	31 f4       	brne	.+12     	; 0x9478 <__addsf3+0x1e>
    946c:	9f 3f       	cpi	r25, 0xFF	; 255
    946e:	11 f4       	brne	.+4      	; 0x9474 <__addsf3+0x1a>
    9470:	1e f4       	brtc	.+6      	; 0x9478 <__addsf3+0x1e>
    9472:	c6 c0       	rjmp	.+396    	; 0x9600 <__fp_nan>
    9474:	0e f4       	brtc	.+2      	; 0x9478 <__addsf3+0x1e>
    9476:	e0 95       	com	r30
    9478:	e7 fb       	bst	r30, 7
    947a:	bc c0       	rjmp	.+376    	; 0x95f4 <__fp_inf>

0000947c <__addsf3x>:
    947c:	e9 2f       	mov	r30, r25
    947e:	e2 d0       	rcall	.+452    	; 0x9644 <__fp_split3>
    9480:	80 f3       	brcs	.-32     	; 0x9462 <__addsf3+0x8>
    9482:	ba 17       	cp	r27, r26
    9484:	62 07       	cpc	r22, r18
    9486:	73 07       	cpc	r23, r19
    9488:	84 07       	cpc	r24, r20
    948a:	95 07       	cpc	r25, r21
    948c:	18 f0       	brcs	.+6      	; 0x9494 <__addsf3x+0x18>
    948e:	71 f4       	brne	.+28     	; 0x94ac <__addsf3x+0x30>
    9490:	9e f5       	brtc	.+102    	; 0x94f8 <__addsf3x+0x7c>
    9492:	fa c0       	rjmp	.+500    	; 0x9688 <__fp_zero>
    9494:	0e f4       	brtc	.+2      	; 0x9498 <__addsf3x+0x1c>
    9496:	e0 95       	com	r30
    9498:	0b 2e       	mov	r0, r27
    949a:	ba 2f       	mov	r27, r26
    949c:	a0 2d       	mov	r26, r0
    949e:	0b 01       	movw	r0, r22
    94a0:	b9 01       	movw	r22, r18
    94a2:	90 01       	movw	r18, r0
    94a4:	0c 01       	movw	r0, r24
    94a6:	ca 01       	movw	r24, r20
    94a8:	a0 01       	movw	r20, r0
    94aa:	11 24       	eor	r1, r1
    94ac:	ff 27       	eor	r31, r31
    94ae:	59 1b       	sub	r21, r25
    94b0:	99 f0       	breq	.+38     	; 0x94d8 <__addsf3x+0x5c>
    94b2:	59 3f       	cpi	r21, 0xF9	; 249
    94b4:	50 f4       	brcc	.+20     	; 0x94ca <__addsf3x+0x4e>
    94b6:	50 3e       	cpi	r21, 0xE0	; 224
    94b8:	68 f1       	brcs	.+90     	; 0x9514 <__addsf3x+0x98>
    94ba:	1a 16       	cp	r1, r26
    94bc:	f0 40       	sbci	r31, 0x00	; 0
    94be:	a2 2f       	mov	r26, r18
    94c0:	23 2f       	mov	r18, r19
    94c2:	34 2f       	mov	r19, r20
    94c4:	44 27       	eor	r20, r20
    94c6:	58 5f       	subi	r21, 0xF8	; 248
    94c8:	f3 cf       	rjmp	.-26     	; 0x94b0 <__addsf3x+0x34>
    94ca:	46 95       	lsr	r20
    94cc:	37 95       	ror	r19
    94ce:	27 95       	ror	r18
    94d0:	a7 95       	ror	r26
    94d2:	f0 40       	sbci	r31, 0x00	; 0
    94d4:	53 95       	inc	r21
    94d6:	c9 f7       	brne	.-14     	; 0x94ca <__addsf3x+0x4e>
    94d8:	7e f4       	brtc	.+30     	; 0x94f8 <__addsf3x+0x7c>
    94da:	1f 16       	cp	r1, r31
    94dc:	ba 0b       	sbc	r27, r26
    94de:	62 0b       	sbc	r22, r18
    94e0:	73 0b       	sbc	r23, r19
    94e2:	84 0b       	sbc	r24, r20
    94e4:	ba f0       	brmi	.+46     	; 0x9514 <__addsf3x+0x98>
    94e6:	91 50       	subi	r25, 0x01	; 1
    94e8:	a1 f0       	breq	.+40     	; 0x9512 <__addsf3x+0x96>
    94ea:	ff 0f       	add	r31, r31
    94ec:	bb 1f       	adc	r27, r27
    94ee:	66 1f       	adc	r22, r22
    94f0:	77 1f       	adc	r23, r23
    94f2:	88 1f       	adc	r24, r24
    94f4:	c2 f7       	brpl	.-16     	; 0x94e6 <__addsf3x+0x6a>
    94f6:	0e c0       	rjmp	.+28     	; 0x9514 <__addsf3x+0x98>
    94f8:	ba 0f       	add	r27, r26
    94fa:	62 1f       	adc	r22, r18
    94fc:	73 1f       	adc	r23, r19
    94fe:	84 1f       	adc	r24, r20
    9500:	48 f4       	brcc	.+18     	; 0x9514 <__addsf3x+0x98>
    9502:	87 95       	ror	r24
    9504:	77 95       	ror	r23
    9506:	67 95       	ror	r22
    9508:	b7 95       	ror	r27
    950a:	f7 95       	ror	r31
    950c:	9e 3f       	cpi	r25, 0xFE	; 254
    950e:	08 f0       	brcs	.+2      	; 0x9512 <__addsf3x+0x96>
    9510:	b3 cf       	rjmp	.-154    	; 0x9478 <__addsf3+0x1e>
    9512:	93 95       	inc	r25
    9514:	88 0f       	add	r24, r24
    9516:	08 f0       	brcs	.+2      	; 0x951a <__addsf3x+0x9e>
    9518:	99 27       	eor	r25, r25
    951a:	ee 0f       	add	r30, r30
    951c:	97 95       	ror	r25
    951e:	87 95       	ror	r24
    9520:	08 95       	ret

00009522 <__fixunssfsi>:
    9522:	98 d0       	rcall	.+304    	; 0x9654 <__fp_splitA>
    9524:	88 f0       	brcs	.+34     	; 0x9548 <__fixunssfsi+0x26>
    9526:	9f 57       	subi	r25, 0x7F	; 127
    9528:	90 f0       	brcs	.+36     	; 0x954e <__fixunssfsi+0x2c>
    952a:	b9 2f       	mov	r27, r25
    952c:	99 27       	eor	r25, r25
    952e:	b7 51       	subi	r27, 0x17	; 23
    9530:	a0 f0       	brcs	.+40     	; 0x955a <__fixunssfsi+0x38>
    9532:	d1 f0       	breq	.+52     	; 0x9568 <__fixunssfsi+0x46>
    9534:	66 0f       	add	r22, r22
    9536:	77 1f       	adc	r23, r23
    9538:	88 1f       	adc	r24, r24
    953a:	99 1f       	adc	r25, r25
    953c:	1a f0       	brmi	.+6      	; 0x9544 <__fixunssfsi+0x22>
    953e:	ba 95       	dec	r27
    9540:	c9 f7       	brne	.-14     	; 0x9534 <__fixunssfsi+0x12>
    9542:	12 c0       	rjmp	.+36     	; 0x9568 <__fixunssfsi+0x46>
    9544:	b1 30       	cpi	r27, 0x01	; 1
    9546:	81 f0       	breq	.+32     	; 0x9568 <__fixunssfsi+0x46>
    9548:	9f d0       	rcall	.+318    	; 0x9688 <__fp_zero>
    954a:	b1 e0       	ldi	r27, 0x01	; 1
    954c:	08 95       	ret
    954e:	9c c0       	rjmp	.+312    	; 0x9688 <__fp_zero>
    9550:	67 2f       	mov	r22, r23
    9552:	78 2f       	mov	r23, r24
    9554:	88 27       	eor	r24, r24
    9556:	b8 5f       	subi	r27, 0xF8	; 248
    9558:	39 f0       	breq	.+14     	; 0x9568 <__fixunssfsi+0x46>
    955a:	b9 3f       	cpi	r27, 0xF9	; 249
    955c:	cc f3       	brlt	.-14     	; 0x9550 <__fixunssfsi+0x2e>
    955e:	86 95       	lsr	r24
    9560:	77 95       	ror	r23
    9562:	67 95       	ror	r22
    9564:	b3 95       	inc	r27
    9566:	d9 f7       	brne	.-10     	; 0x955e <__fixunssfsi+0x3c>
    9568:	3e f4       	brtc	.+14     	; 0x9578 <__fixunssfsi+0x56>
    956a:	90 95       	com	r25
    956c:	80 95       	com	r24
    956e:	70 95       	com	r23
    9570:	61 95       	neg	r22
    9572:	7f 4f       	sbci	r23, 0xFF	; 255
    9574:	8f 4f       	sbci	r24, 0xFF	; 255
    9576:	9f 4f       	sbci	r25, 0xFF	; 255
    9578:	08 95       	ret

0000957a <__floatunsisf>:
    957a:	e8 94       	clt
    957c:	09 c0       	rjmp	.+18     	; 0x9590 <__floatsisf+0x12>

0000957e <__floatsisf>:
    957e:	97 fb       	bst	r25, 7
    9580:	3e f4       	brtc	.+14     	; 0x9590 <__floatsisf+0x12>
    9582:	90 95       	com	r25
    9584:	80 95       	com	r24
    9586:	70 95       	com	r23
    9588:	61 95       	neg	r22
    958a:	7f 4f       	sbci	r23, 0xFF	; 255
    958c:	8f 4f       	sbci	r24, 0xFF	; 255
    958e:	9f 4f       	sbci	r25, 0xFF	; 255
    9590:	99 23       	and	r25, r25
    9592:	a9 f0       	breq	.+42     	; 0x95be <__floatsisf+0x40>
    9594:	f9 2f       	mov	r31, r25
    9596:	96 e9       	ldi	r25, 0x96	; 150
    9598:	bb 27       	eor	r27, r27
    959a:	93 95       	inc	r25
    959c:	f6 95       	lsr	r31
    959e:	87 95       	ror	r24
    95a0:	77 95       	ror	r23
    95a2:	67 95       	ror	r22
    95a4:	b7 95       	ror	r27
    95a6:	f1 11       	cpse	r31, r1
    95a8:	f8 cf       	rjmp	.-16     	; 0x959a <__floatsisf+0x1c>
    95aa:	fa f4       	brpl	.+62     	; 0x95ea <__floatsisf+0x6c>
    95ac:	bb 0f       	add	r27, r27
    95ae:	11 f4       	brne	.+4      	; 0x95b4 <__floatsisf+0x36>
    95b0:	60 ff       	sbrs	r22, 0
    95b2:	1b c0       	rjmp	.+54     	; 0x95ea <__floatsisf+0x6c>
    95b4:	6f 5f       	subi	r22, 0xFF	; 255
    95b6:	7f 4f       	sbci	r23, 0xFF	; 255
    95b8:	8f 4f       	sbci	r24, 0xFF	; 255
    95ba:	9f 4f       	sbci	r25, 0xFF	; 255
    95bc:	16 c0       	rjmp	.+44     	; 0x95ea <__floatsisf+0x6c>
    95be:	88 23       	and	r24, r24
    95c0:	11 f0       	breq	.+4      	; 0x95c6 <__floatsisf+0x48>
    95c2:	96 e9       	ldi	r25, 0x96	; 150
    95c4:	11 c0       	rjmp	.+34     	; 0x95e8 <__floatsisf+0x6a>
    95c6:	77 23       	and	r23, r23
    95c8:	21 f0       	breq	.+8      	; 0x95d2 <__floatsisf+0x54>
    95ca:	9e e8       	ldi	r25, 0x8E	; 142
    95cc:	87 2f       	mov	r24, r23
    95ce:	76 2f       	mov	r23, r22
    95d0:	05 c0       	rjmp	.+10     	; 0x95dc <__floatsisf+0x5e>
    95d2:	66 23       	and	r22, r22
    95d4:	71 f0       	breq	.+28     	; 0x95f2 <__floatsisf+0x74>
    95d6:	96 e8       	ldi	r25, 0x86	; 134
    95d8:	86 2f       	mov	r24, r22
    95da:	70 e0       	ldi	r23, 0x00	; 0
    95dc:	60 e0       	ldi	r22, 0x00	; 0
    95de:	2a f0       	brmi	.+10     	; 0x95ea <__floatsisf+0x6c>
    95e0:	9a 95       	dec	r25
    95e2:	66 0f       	add	r22, r22
    95e4:	77 1f       	adc	r23, r23
    95e6:	88 1f       	adc	r24, r24
    95e8:	da f7       	brpl	.-10     	; 0x95e0 <__floatsisf+0x62>
    95ea:	88 0f       	add	r24, r24
    95ec:	96 95       	lsr	r25
    95ee:	87 95       	ror	r24
    95f0:	97 f9       	bld	r25, 7
    95f2:	08 95       	ret

000095f4 <__fp_inf>:
    95f4:	97 f9       	bld	r25, 7
    95f6:	9f 67       	ori	r25, 0x7F	; 127
    95f8:	80 e8       	ldi	r24, 0x80	; 128
    95fa:	70 e0       	ldi	r23, 0x00	; 0
    95fc:	60 e0       	ldi	r22, 0x00	; 0
    95fe:	08 95       	ret

00009600 <__fp_nan>:
    9600:	9f ef       	ldi	r25, 0xFF	; 255
    9602:	80 ec       	ldi	r24, 0xC0	; 192
    9604:	08 95       	ret

00009606 <__fp_pscA>:
    9606:	00 24       	eor	r0, r0
    9608:	0a 94       	dec	r0
    960a:	16 16       	cp	r1, r22
    960c:	17 06       	cpc	r1, r23
    960e:	18 06       	cpc	r1, r24
    9610:	09 06       	cpc	r0, r25
    9612:	08 95       	ret

00009614 <__fp_pscB>:
    9614:	00 24       	eor	r0, r0
    9616:	0a 94       	dec	r0
    9618:	12 16       	cp	r1, r18
    961a:	13 06       	cpc	r1, r19
    961c:	14 06       	cpc	r1, r20
    961e:	05 06       	cpc	r0, r21
    9620:	08 95       	ret

00009622 <__fp_round>:
    9622:	09 2e       	mov	r0, r25
    9624:	03 94       	inc	r0
    9626:	00 0c       	add	r0, r0
    9628:	11 f4       	brne	.+4      	; 0x962e <__fp_round+0xc>
    962a:	88 23       	and	r24, r24
    962c:	52 f0       	brmi	.+20     	; 0x9642 <__fp_round+0x20>
    962e:	bb 0f       	add	r27, r27
    9630:	40 f4       	brcc	.+16     	; 0x9642 <__fp_round+0x20>
    9632:	bf 2b       	or	r27, r31
    9634:	11 f4       	brne	.+4      	; 0x963a <__fp_round+0x18>
    9636:	60 ff       	sbrs	r22, 0
    9638:	04 c0       	rjmp	.+8      	; 0x9642 <__fp_round+0x20>
    963a:	6f 5f       	subi	r22, 0xFF	; 255
    963c:	7f 4f       	sbci	r23, 0xFF	; 255
    963e:	8f 4f       	sbci	r24, 0xFF	; 255
    9640:	9f 4f       	sbci	r25, 0xFF	; 255
    9642:	08 95       	ret

00009644 <__fp_split3>:
    9644:	57 fd       	sbrc	r21, 7
    9646:	90 58       	subi	r25, 0x80	; 128
    9648:	44 0f       	add	r20, r20
    964a:	55 1f       	adc	r21, r21
    964c:	59 f0       	breq	.+22     	; 0x9664 <__fp_splitA+0x10>
    964e:	5f 3f       	cpi	r21, 0xFF	; 255
    9650:	71 f0       	breq	.+28     	; 0x966e <__fp_splitA+0x1a>
    9652:	47 95       	ror	r20

00009654 <__fp_splitA>:
    9654:	88 0f       	add	r24, r24
    9656:	97 fb       	bst	r25, 7
    9658:	99 1f       	adc	r25, r25
    965a:	61 f0       	breq	.+24     	; 0x9674 <__fp_splitA+0x20>
    965c:	9f 3f       	cpi	r25, 0xFF	; 255
    965e:	79 f0       	breq	.+30     	; 0x967e <__fp_splitA+0x2a>
    9660:	87 95       	ror	r24
    9662:	08 95       	ret
    9664:	12 16       	cp	r1, r18
    9666:	13 06       	cpc	r1, r19
    9668:	14 06       	cpc	r1, r20
    966a:	55 1f       	adc	r21, r21
    966c:	f2 cf       	rjmp	.-28     	; 0x9652 <__fp_split3+0xe>
    966e:	46 95       	lsr	r20
    9670:	f1 df       	rcall	.-30     	; 0x9654 <__fp_splitA>
    9672:	08 c0       	rjmp	.+16     	; 0x9684 <__fp_splitA+0x30>
    9674:	16 16       	cp	r1, r22
    9676:	17 06       	cpc	r1, r23
    9678:	18 06       	cpc	r1, r24
    967a:	99 1f       	adc	r25, r25
    967c:	f1 cf       	rjmp	.-30     	; 0x9660 <__fp_splitA+0xc>
    967e:	86 95       	lsr	r24
    9680:	71 05       	cpc	r23, r1
    9682:	61 05       	cpc	r22, r1
    9684:	08 94       	sec
    9686:	08 95       	ret

00009688 <__fp_zero>:
    9688:	e8 94       	clt

0000968a <__fp_szero>:
    968a:	bb 27       	eor	r27, r27
    968c:	66 27       	eor	r22, r22
    968e:	77 27       	eor	r23, r23
    9690:	cb 01       	movw	r24, r22
    9692:	97 f9       	bld	r25, 7
    9694:	08 95       	ret

00009696 <__mulsf3>:
    9696:	0b d0       	rcall	.+22     	; 0x96ae <__mulsf3x>
    9698:	c4 cf       	rjmp	.-120    	; 0x9622 <__fp_round>
    969a:	b5 df       	rcall	.-150    	; 0x9606 <__fp_pscA>
    969c:	28 f0       	brcs	.+10     	; 0x96a8 <__mulsf3+0x12>
    969e:	ba df       	rcall	.-140    	; 0x9614 <__fp_pscB>
    96a0:	18 f0       	brcs	.+6      	; 0x96a8 <__mulsf3+0x12>
    96a2:	95 23       	and	r25, r21
    96a4:	09 f0       	breq	.+2      	; 0x96a8 <__mulsf3+0x12>
    96a6:	a6 cf       	rjmp	.-180    	; 0x95f4 <__fp_inf>
    96a8:	ab cf       	rjmp	.-170    	; 0x9600 <__fp_nan>
    96aa:	11 24       	eor	r1, r1
    96ac:	ee cf       	rjmp	.-36     	; 0x968a <__fp_szero>

000096ae <__mulsf3x>:
    96ae:	ca df       	rcall	.-108    	; 0x9644 <__fp_split3>
    96b0:	a0 f3       	brcs	.-24     	; 0x969a <__mulsf3+0x4>

000096b2 <__mulsf3_pse>:
    96b2:	95 9f       	mul	r25, r21
    96b4:	d1 f3       	breq	.-12     	; 0x96aa <__mulsf3+0x14>
    96b6:	95 0f       	add	r25, r21
    96b8:	50 e0       	ldi	r21, 0x00	; 0
    96ba:	55 1f       	adc	r21, r21
    96bc:	62 9f       	mul	r22, r18
    96be:	f0 01       	movw	r30, r0
    96c0:	72 9f       	mul	r23, r18
    96c2:	bb 27       	eor	r27, r27
    96c4:	f0 0d       	add	r31, r0
    96c6:	b1 1d       	adc	r27, r1
    96c8:	63 9f       	mul	r22, r19
    96ca:	aa 27       	eor	r26, r26
    96cc:	f0 0d       	add	r31, r0
    96ce:	b1 1d       	adc	r27, r1
    96d0:	aa 1f       	adc	r26, r26
    96d2:	64 9f       	mul	r22, r20
    96d4:	66 27       	eor	r22, r22
    96d6:	b0 0d       	add	r27, r0
    96d8:	a1 1d       	adc	r26, r1
    96da:	66 1f       	adc	r22, r22
    96dc:	82 9f       	mul	r24, r18
    96de:	22 27       	eor	r18, r18
    96e0:	b0 0d       	add	r27, r0
    96e2:	a1 1d       	adc	r26, r1
    96e4:	62 1f       	adc	r22, r18
    96e6:	73 9f       	mul	r23, r19
    96e8:	b0 0d       	add	r27, r0
    96ea:	a1 1d       	adc	r26, r1
    96ec:	62 1f       	adc	r22, r18
    96ee:	83 9f       	mul	r24, r19
    96f0:	a0 0d       	add	r26, r0
    96f2:	61 1d       	adc	r22, r1
    96f4:	22 1f       	adc	r18, r18
    96f6:	74 9f       	mul	r23, r20
    96f8:	33 27       	eor	r19, r19
    96fa:	a0 0d       	add	r26, r0
    96fc:	61 1d       	adc	r22, r1
    96fe:	23 1f       	adc	r18, r19
    9700:	84 9f       	mul	r24, r20
    9702:	60 0d       	add	r22, r0
    9704:	21 1d       	adc	r18, r1
    9706:	82 2f       	mov	r24, r18
    9708:	76 2f       	mov	r23, r22
    970a:	6a 2f       	mov	r22, r26
    970c:	11 24       	eor	r1, r1
    970e:	9f 57       	subi	r25, 0x7F	; 127
    9710:	50 40       	sbci	r21, 0x00	; 0
    9712:	8a f0       	brmi	.+34     	; 0x9736 <__mulsf3_pse+0x84>
    9714:	e1 f0       	breq	.+56     	; 0x974e <__mulsf3_pse+0x9c>
    9716:	88 23       	and	r24, r24
    9718:	4a f0       	brmi	.+18     	; 0x972c <__mulsf3_pse+0x7a>
    971a:	ee 0f       	add	r30, r30
    971c:	ff 1f       	adc	r31, r31
    971e:	bb 1f       	adc	r27, r27
    9720:	66 1f       	adc	r22, r22
    9722:	77 1f       	adc	r23, r23
    9724:	88 1f       	adc	r24, r24
    9726:	91 50       	subi	r25, 0x01	; 1
    9728:	50 40       	sbci	r21, 0x00	; 0
    972a:	a9 f7       	brne	.-22     	; 0x9716 <__mulsf3_pse+0x64>
    972c:	9e 3f       	cpi	r25, 0xFE	; 254
    972e:	51 05       	cpc	r21, r1
    9730:	70 f0       	brcs	.+28     	; 0x974e <__mulsf3_pse+0x9c>
    9732:	60 cf       	rjmp	.-320    	; 0x95f4 <__fp_inf>
    9734:	aa cf       	rjmp	.-172    	; 0x968a <__fp_szero>
    9736:	5f 3f       	cpi	r21, 0xFF	; 255
    9738:	ec f3       	brlt	.-6      	; 0x9734 <__mulsf3_pse+0x82>
    973a:	98 3e       	cpi	r25, 0xE8	; 232
    973c:	dc f3       	brlt	.-10     	; 0x9734 <__mulsf3_pse+0x82>
    973e:	86 95       	lsr	r24
    9740:	77 95       	ror	r23
    9742:	67 95       	ror	r22
    9744:	b7 95       	ror	r27
    9746:	f7 95       	ror	r31
    9748:	e7 95       	ror	r30
    974a:	9f 5f       	subi	r25, 0xFF	; 255
    974c:	c1 f7       	brne	.-16     	; 0x973e <__mulsf3_pse+0x8c>
    974e:	fe 2b       	or	r31, r30
    9750:	88 0f       	add	r24, r24
    9752:	91 1d       	adc	r25, r1
    9754:	96 95       	lsr	r25
    9756:	87 95       	ror	r24
    9758:	97 f9       	bld	r25, 7
    975a:	08 95       	ret

0000975c <__mulsi3>:
    975c:	db 01       	movw	r26, r22
    975e:	8f 93       	push	r24
    9760:	9f 93       	push	r25
    9762:	8e d0       	rcall	.+284    	; 0x9880 <__muluhisi3>
    9764:	bf 91       	pop	r27
    9766:	af 91       	pop	r26
    9768:	a2 9f       	mul	r26, r18
    976a:	80 0d       	add	r24, r0
    976c:	91 1d       	adc	r25, r1
    976e:	a3 9f       	mul	r26, r19
    9770:	90 0d       	add	r25, r0
    9772:	b2 9f       	mul	r27, r18
    9774:	90 0d       	add	r25, r0
    9776:	11 24       	eor	r1, r1
    9778:	08 95       	ret

0000977a <__udivmodhi4>:
    977a:	aa 1b       	sub	r26, r26
    977c:	bb 1b       	sub	r27, r27
    977e:	51 e1       	ldi	r21, 0x11	; 17
    9780:	07 c0       	rjmp	.+14     	; 0x9790 <__udivmodhi4_ep>

00009782 <__udivmodhi4_loop>:
    9782:	aa 1f       	adc	r26, r26
    9784:	bb 1f       	adc	r27, r27
    9786:	a6 17       	cp	r26, r22
    9788:	b7 07       	cpc	r27, r23
    978a:	10 f0       	brcs	.+4      	; 0x9790 <__udivmodhi4_ep>
    978c:	a6 1b       	sub	r26, r22
    978e:	b7 0b       	sbc	r27, r23

00009790 <__udivmodhi4_ep>:
    9790:	88 1f       	adc	r24, r24
    9792:	99 1f       	adc	r25, r25
    9794:	5a 95       	dec	r21
    9796:	a9 f7       	brne	.-22     	; 0x9782 <__udivmodhi4_loop>
    9798:	80 95       	com	r24
    979a:	90 95       	com	r25
    979c:	bc 01       	movw	r22, r24
    979e:	cd 01       	movw	r24, r26
    97a0:	08 95       	ret

000097a2 <__divmodhi4>:
    97a2:	97 fb       	bst	r25, 7
    97a4:	07 2e       	mov	r0, r23
    97a6:	16 f4       	brtc	.+4      	; 0x97ac <__divmodhi4+0xa>
    97a8:	00 94       	com	r0
    97aa:	06 d0       	rcall	.+12     	; 0x97b8 <__divmodhi4_neg1>
    97ac:	77 fd       	sbrc	r23, 7
    97ae:	08 d0       	rcall	.+16     	; 0x97c0 <__divmodhi4_neg2>
    97b0:	e4 df       	rcall	.-56     	; 0x977a <__udivmodhi4>
    97b2:	07 fc       	sbrc	r0, 7
    97b4:	05 d0       	rcall	.+10     	; 0x97c0 <__divmodhi4_neg2>
    97b6:	3e f4       	brtc	.+14     	; 0x97c6 <__divmodhi4_exit>

000097b8 <__divmodhi4_neg1>:
    97b8:	90 95       	com	r25
    97ba:	81 95       	neg	r24
    97bc:	9f 4f       	sbci	r25, 0xFF	; 255
    97be:	08 95       	ret

000097c0 <__divmodhi4_neg2>:
    97c0:	70 95       	com	r23
    97c2:	61 95       	neg	r22
    97c4:	7f 4f       	sbci	r23, 0xFF	; 255

000097c6 <__divmodhi4_exit>:
    97c6:	08 95       	ret

000097c8 <__udivmodsi4>:
    97c8:	a1 e2       	ldi	r26, 0x21	; 33
    97ca:	1a 2e       	mov	r1, r26
    97cc:	aa 1b       	sub	r26, r26
    97ce:	bb 1b       	sub	r27, r27
    97d0:	fd 01       	movw	r30, r26
    97d2:	0d c0       	rjmp	.+26     	; 0x97ee <__udivmodsi4_ep>

000097d4 <__udivmodsi4_loop>:
    97d4:	aa 1f       	adc	r26, r26
    97d6:	bb 1f       	adc	r27, r27
    97d8:	ee 1f       	adc	r30, r30
    97da:	ff 1f       	adc	r31, r31
    97dc:	a2 17       	cp	r26, r18
    97de:	b3 07       	cpc	r27, r19
    97e0:	e4 07       	cpc	r30, r20
    97e2:	f5 07       	cpc	r31, r21
    97e4:	20 f0       	brcs	.+8      	; 0x97ee <__udivmodsi4_ep>
    97e6:	a2 1b       	sub	r26, r18
    97e8:	b3 0b       	sbc	r27, r19
    97ea:	e4 0b       	sbc	r30, r20
    97ec:	f5 0b       	sbc	r31, r21

000097ee <__udivmodsi4_ep>:
    97ee:	66 1f       	adc	r22, r22
    97f0:	77 1f       	adc	r23, r23
    97f2:	88 1f       	adc	r24, r24
    97f4:	99 1f       	adc	r25, r25
    97f6:	1a 94       	dec	r1
    97f8:	69 f7       	brne	.-38     	; 0x97d4 <__udivmodsi4_loop>
    97fa:	60 95       	com	r22
    97fc:	70 95       	com	r23
    97fe:	80 95       	com	r24
    9800:	90 95       	com	r25
    9802:	9b 01       	movw	r18, r22
    9804:	ac 01       	movw	r20, r24
    9806:	bd 01       	movw	r22, r26
    9808:	cf 01       	movw	r24, r30
    980a:	08 95       	ret

0000980c <__divmodsi4>:
    980c:	05 2e       	mov	r0, r21
    980e:	97 fb       	bst	r25, 7
    9810:	16 f4       	brtc	.+4      	; 0x9816 <__divmodsi4+0xa>
    9812:	00 94       	com	r0
    9814:	0f d0       	rcall	.+30     	; 0x9834 <__negsi2>
    9816:	57 fd       	sbrc	r21, 7
    9818:	05 d0       	rcall	.+10     	; 0x9824 <__divmodsi4_neg2>
    981a:	d6 df       	rcall	.-84     	; 0x97c8 <__udivmodsi4>
    981c:	07 fc       	sbrc	r0, 7
    981e:	02 d0       	rcall	.+4      	; 0x9824 <__divmodsi4_neg2>
    9820:	46 f4       	brtc	.+16     	; 0x9832 <__divmodsi4_exit>
    9822:	08 c0       	rjmp	.+16     	; 0x9834 <__negsi2>

00009824 <__divmodsi4_neg2>:
    9824:	50 95       	com	r21
    9826:	40 95       	com	r20
    9828:	30 95       	com	r19
    982a:	21 95       	neg	r18
    982c:	3f 4f       	sbci	r19, 0xFF	; 255
    982e:	4f 4f       	sbci	r20, 0xFF	; 255
    9830:	5f 4f       	sbci	r21, 0xFF	; 255

00009832 <__divmodsi4_exit>:
    9832:	08 95       	ret

00009834 <__negsi2>:
    9834:	90 95       	com	r25
    9836:	80 95       	com	r24
    9838:	70 95       	com	r23
    983a:	61 95       	neg	r22
    983c:	7f 4f       	sbci	r23, 0xFF	; 255
    983e:	8f 4f       	sbci	r24, 0xFF	; 255
    9840:	9f 4f       	sbci	r25, 0xFF	; 255
    9842:	08 95       	ret

00009844 <__tablejump2__>:
    9844:	ee 0f       	add	r30, r30
    9846:	ff 1f       	adc	r31, r31
    9848:	00 24       	eor	r0, r0
    984a:	00 1c       	adc	r0, r0
    984c:	0b be       	out	0x3b, r0	; 59
    984e:	07 90       	elpm	r0, Z+
    9850:	f6 91       	elpm	r31, Z
    9852:	e0 2d       	mov	r30, r0
    9854:	09 94       	ijmp

00009856 <__umulhisi3>:
    9856:	a2 9f       	mul	r26, r18
    9858:	b0 01       	movw	r22, r0
    985a:	b3 9f       	mul	r27, r19
    985c:	c0 01       	movw	r24, r0
    985e:	a3 9f       	mul	r26, r19
    9860:	70 0d       	add	r23, r0
    9862:	81 1d       	adc	r24, r1
    9864:	11 24       	eor	r1, r1
    9866:	91 1d       	adc	r25, r1
    9868:	b2 9f       	mul	r27, r18
    986a:	70 0d       	add	r23, r0
    986c:	81 1d       	adc	r24, r1
    986e:	11 24       	eor	r1, r1
    9870:	91 1d       	adc	r25, r1
    9872:	08 95       	ret

00009874 <__usmulhisi3>:
    9874:	f0 df       	rcall	.-32     	; 0x9856 <__umulhisi3>

00009876 <__usmulhisi3_tail>:
    9876:	b7 ff       	sbrs	r27, 7
    9878:	08 95       	ret
    987a:	82 1b       	sub	r24, r18
    987c:	93 0b       	sbc	r25, r19
    987e:	08 95       	ret

00009880 <__muluhisi3>:
    9880:	ea df       	rcall	.-44     	; 0x9856 <__umulhisi3>
    9882:	a5 9f       	mul	r26, r21
    9884:	90 0d       	add	r25, r0
    9886:	b4 9f       	mul	r27, r20
    9888:	90 0d       	add	r25, r0
    988a:	a4 9f       	mul	r26, r20
    988c:	80 0d       	add	r24, r0
    988e:	91 1d       	adc	r25, r1
    9890:	11 24       	eor	r1, r1
    9892:	08 95       	ret

00009894 <random_r>:
    9894:	8f 92       	push	r8
    9896:	9f 92       	push	r9
    9898:	af 92       	push	r10
    989a:	bf 92       	push	r11
    989c:	cf 92       	push	r12
    989e:	df 92       	push	r13
    98a0:	ef 92       	push	r14
    98a2:	ff 92       	push	r15
    98a4:	cf 93       	push	r28
    98a6:	df 93       	push	r29
    98a8:	ec 01       	movw	r28, r24
    98aa:	68 81       	ld	r22, Y
    98ac:	79 81       	ldd	r23, Y+1	; 0x01
    98ae:	8a 81       	ldd	r24, Y+2	; 0x02
    98b0:	9b 81       	ldd	r25, Y+3	; 0x03
    98b2:	61 15       	cp	r22, r1
    98b4:	71 05       	cpc	r23, r1
    98b6:	81 05       	cpc	r24, r1
    98b8:	91 05       	cpc	r25, r1
    98ba:	21 f4       	brne	.+8      	; 0x98c4 <random_r+0x30>
    98bc:	64 e2       	ldi	r22, 0x24	; 36
    98be:	79 ed       	ldi	r23, 0xD9	; 217
    98c0:	8b e5       	ldi	r24, 0x5B	; 91
    98c2:	97 e0       	ldi	r25, 0x07	; 7
    98c4:	2d e1       	ldi	r18, 0x1D	; 29
    98c6:	33 ef       	ldi	r19, 0xF3	; 243
    98c8:	41 e0       	ldi	r20, 0x01	; 1
    98ca:	50 e0       	ldi	r21, 0x00	; 0
    98cc:	9f df       	rcall	.-194    	; 0x980c <__divmodsi4>
    98ce:	49 01       	movw	r8, r18
    98d0:	5a 01       	movw	r10, r20
    98d2:	9b 01       	movw	r18, r22
    98d4:	ac 01       	movw	r20, r24
    98d6:	a7 ea       	ldi	r26, 0xA7	; 167
    98d8:	b1 e4       	ldi	r27, 0x41	; 65
    98da:	d2 df       	rcall	.-92     	; 0x9880 <__muluhisi3>
    98dc:	6b 01       	movw	r12, r22
    98de:	7c 01       	movw	r14, r24
    98e0:	ac ee       	ldi	r26, 0xEC	; 236
    98e2:	b4 ef       	ldi	r27, 0xF4	; 244
    98e4:	a5 01       	movw	r20, r10
    98e6:	94 01       	movw	r18, r8
    98e8:	94 d0       	rcall	.+296    	; 0x9a12 <__mulohisi3>
    98ea:	c6 0e       	add	r12, r22
    98ec:	d7 1e       	adc	r13, r23
    98ee:	e8 1e       	adc	r14, r24
    98f0:	f9 1e       	adc	r15, r25
    98f2:	f7 fe       	sbrs	r15, 7
    98f4:	06 c0       	rjmp	.+12     	; 0x9902 <random_r+0x6e>
    98f6:	81 e0       	ldi	r24, 0x01	; 1
    98f8:	c8 1a       	sub	r12, r24
    98fa:	d1 08       	sbc	r13, r1
    98fc:	e1 08       	sbc	r14, r1
    98fe:	80 e8       	ldi	r24, 0x80	; 128
    9900:	f8 0a       	sbc	r15, r24
    9902:	c8 82       	st	Y, r12
    9904:	d9 82       	std	Y+1, r13	; 0x01
    9906:	ea 82       	std	Y+2, r14	; 0x02
    9908:	fb 82       	std	Y+3, r15	; 0x03
    990a:	c7 01       	movw	r24, r14
    990c:	b6 01       	movw	r22, r12
    990e:	9f 77       	andi	r25, 0x7F	; 127
    9910:	df 91       	pop	r29
    9912:	cf 91       	pop	r28
    9914:	ff 90       	pop	r15
    9916:	ef 90       	pop	r14
    9918:	df 90       	pop	r13
    991a:	cf 90       	pop	r12
    991c:	bf 90       	pop	r11
    991e:	af 90       	pop	r10
    9920:	9f 90       	pop	r9
    9922:	8f 90       	pop	r8
    9924:	08 95       	ret

00009926 <random>:
    9926:	8f 92       	push	r8
    9928:	9f 92       	push	r9
    992a:	af 92       	push	r10
    992c:	bf 92       	push	r11
    992e:	cf 92       	push	r12
    9930:	df 92       	push	r13
    9932:	ef 92       	push	r14
    9934:	ff 92       	push	r15
    9936:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    993a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    993e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    9942:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    9946:	61 15       	cp	r22, r1
    9948:	71 05       	cpc	r23, r1
    994a:	81 05       	cpc	r24, r1
    994c:	91 05       	cpc	r25, r1
    994e:	21 f4       	brne	.+8      	; 0x9958 <random+0x32>
    9950:	64 e2       	ldi	r22, 0x24	; 36
    9952:	79 ed       	ldi	r23, 0xD9	; 217
    9954:	8b e5       	ldi	r24, 0x5B	; 91
    9956:	97 e0       	ldi	r25, 0x07	; 7
    9958:	2d e1       	ldi	r18, 0x1D	; 29
    995a:	33 ef       	ldi	r19, 0xF3	; 243
    995c:	41 e0       	ldi	r20, 0x01	; 1
    995e:	50 e0       	ldi	r21, 0x00	; 0
    9960:	55 df       	rcall	.-342    	; 0x980c <__divmodsi4>
    9962:	49 01       	movw	r8, r18
    9964:	5a 01       	movw	r10, r20
    9966:	9b 01       	movw	r18, r22
    9968:	ac 01       	movw	r20, r24
    996a:	a7 ea       	ldi	r26, 0xA7	; 167
    996c:	b1 e4       	ldi	r27, 0x41	; 65
    996e:	88 df       	rcall	.-240    	; 0x9880 <__muluhisi3>
    9970:	6b 01       	movw	r12, r22
    9972:	7c 01       	movw	r14, r24
    9974:	ac ee       	ldi	r26, 0xEC	; 236
    9976:	b4 ef       	ldi	r27, 0xF4	; 244
    9978:	a5 01       	movw	r20, r10
    997a:	94 01       	movw	r18, r8
    997c:	4a d0       	rcall	.+148    	; 0x9a12 <__mulohisi3>
    997e:	c6 0e       	add	r12, r22
    9980:	d7 1e       	adc	r13, r23
    9982:	e8 1e       	adc	r14, r24
    9984:	f9 1e       	adc	r15, r25
    9986:	f7 fe       	sbrs	r15, 7
    9988:	06 c0       	rjmp	.+12     	; 0x9996 <random+0x70>
    998a:	81 e0       	ldi	r24, 0x01	; 1
    998c:	c8 1a       	sub	r12, r24
    998e:	d1 08       	sbc	r13, r1
    9990:	e1 08       	sbc	r14, r1
    9992:	80 e8       	ldi	r24, 0x80	; 128
    9994:	f8 0a       	sbc	r15, r24
    9996:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    999a:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    999e:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    99a2:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    99a6:	c7 01       	movw	r24, r14
    99a8:	b6 01       	movw	r22, r12
    99aa:	9f 77       	andi	r25, 0x7F	; 127
    99ac:	ff 90       	pop	r15
    99ae:	ef 90       	pop	r14
    99b0:	df 90       	pop	r13
    99b2:	cf 90       	pop	r12
    99b4:	bf 90       	pop	r11
    99b6:	af 90       	pop	r10
    99b8:	9f 90       	pop	r9
    99ba:	8f 90       	pop	r8
    99bc:	08 95       	ret

000099be <srandom>:
    99be:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    99c2:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    99c6:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    99ca:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    99ce:	08 95       	ret

000099d0 <memcpy>:
    99d0:	fb 01       	movw	r30, r22
    99d2:	dc 01       	movw	r26, r24
    99d4:	02 c0       	rjmp	.+4      	; 0x99da <memcpy+0xa>
    99d6:	01 90       	ld	r0, Z+
    99d8:	0d 92       	st	X+, r0
    99da:	41 50       	subi	r20, 0x01	; 1
    99dc:	50 40       	sbci	r21, 0x00	; 0
    99de:	d8 f7       	brcc	.-10     	; 0x99d6 <memcpy+0x6>
    99e0:	08 95       	ret

000099e2 <strcpy>:
    99e2:	fb 01       	movw	r30, r22
    99e4:	dc 01       	movw	r26, r24
    99e6:	01 90       	ld	r0, Z+
    99e8:	0d 92       	st	X+, r0
    99ea:	00 20       	and	r0, r0
    99ec:	e1 f7       	brne	.-8      	; 0x99e6 <strcpy+0x4>
    99ee:	08 95       	ret

000099f0 <strncpy>:
    99f0:	fb 01       	movw	r30, r22
    99f2:	dc 01       	movw	r26, r24
    99f4:	41 50       	subi	r20, 0x01	; 1
    99f6:	50 40       	sbci	r21, 0x00	; 0
    99f8:	48 f0       	brcs	.+18     	; 0x9a0c <strncpy+0x1c>
    99fa:	01 90       	ld	r0, Z+
    99fc:	0d 92       	st	X+, r0
    99fe:	00 20       	and	r0, r0
    9a00:	c9 f7       	brne	.-14     	; 0x99f4 <strncpy+0x4>
    9a02:	01 c0       	rjmp	.+2      	; 0x9a06 <strncpy+0x16>
    9a04:	1d 92       	st	X+, r1
    9a06:	41 50       	subi	r20, 0x01	; 1
    9a08:	50 40       	sbci	r21, 0x00	; 0
    9a0a:	e0 f7       	brcc	.-8      	; 0x9a04 <strncpy+0x14>
    9a0c:	08 95       	ret

00009a0e <__mulshisi3>:
    9a0e:	b7 ff       	sbrs	r27, 7
    9a10:	37 cf       	rjmp	.-402    	; 0x9880 <__muluhisi3>

00009a12 <__mulohisi3>:
    9a12:	36 df       	rcall	.-404    	; 0x9880 <__muluhisi3>
    9a14:	82 1b       	sub	r24, r18
    9a16:	93 0b       	sbc	r25, r19
    9a18:	08 95       	ret

00009a1a <__do_global_dtors>:
    9a1a:	14 e0       	ldi	r17, 0x04	; 4
    9a1c:	c5 e3       	ldi	r28, 0x35	; 53
    9a1e:	d4 e0       	ldi	r29, 0x04	; 4
    9a20:	03 c0       	rjmp	.+6      	; 0x9a28 <__do_global_dtors+0xe>
    9a22:	fe 01       	movw	r30, r28
    9a24:	0f df       	rcall	.-482    	; 0x9844 <__tablejump2__>
    9a26:	21 96       	adiw	r28, 0x01	; 1
    9a28:	c6 33       	cpi	r28, 0x36	; 54
    9a2a:	d1 07       	cpc	r29, r17
    9a2c:	d1 f7       	brne	.-12     	; 0x9a22 <__do_global_dtors+0x8>
    9a2e:	f8 94       	cli

00009a30 <__stop_program>:
    9a30:	ff cf       	rjmp	.-2      	; 0x9a30 <__stop_program>
