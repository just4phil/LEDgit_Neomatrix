
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	f5 c6       	rjmp	.+3562   	; 0xdec <__dtors_end>
       2:	00 00       	nop
       4:	1d c7       	rjmp	.+3642   	; 0xe40 <__bad_interrupt>
       6:	00 00       	nop
       8:	1b c7       	rjmp	.+3638   	; 0xe40 <__bad_interrupt>
       a:	00 00       	nop
       c:	19 c7       	rjmp	.+3634   	; 0xe40 <__bad_interrupt>
       e:	00 00       	nop
      10:	17 c7       	rjmp	.+3630   	; 0xe40 <__bad_interrupt>
      12:	00 00       	nop
      14:	15 c7       	rjmp	.+3626   	; 0xe40 <__bad_interrupt>
      16:	00 00       	nop
      18:	13 c7       	rjmp	.+3622   	; 0xe40 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	11 c7       	rjmp	.+3618   	; 0xe40 <__bad_interrupt>
      1e:	00 00       	nop
      20:	0f c7       	rjmp	.+3614   	; 0xe40 <__bad_interrupt>
      22:	00 00       	nop
      24:	0d c7       	rjmp	.+3610   	; 0xe40 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 9c 49 	jmp	0x9338	; 0x9338 <__vector_10>
      2c:	0c 94 19 4a 	jmp	0x9432	; 0x9432 <__vector_11>
      30:	07 c7       	rjmp	.+3598   	; 0xe40 <__bad_interrupt>
      32:	00 00       	nop
      34:	05 c7       	rjmp	.+3594   	; 0xe40 <__bad_interrupt>
      36:	00 00       	nop
      38:	03 c7       	rjmp	.+3590   	; 0xe40 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	01 c7       	rjmp	.+3586   	; 0xe40 <__bad_interrupt>
      3e:	00 00       	nop
      40:	ff c6       	rjmp	.+3582   	; 0xe40 <__bad_interrupt>
      42:	00 00       	nop
      44:	fd c6       	rjmp	.+3578   	; 0xe40 <__bad_interrupt>
      46:	00 00       	nop
      48:	fb c6       	rjmp	.+3574   	; 0xe40 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	f9 c6       	rjmp	.+3570   	; 0xe40 <__bad_interrupt>
      4e:	00 00       	nop
      50:	f7 c6       	rjmp	.+3566   	; 0xe40 <__bad_interrupt>
      52:	00 00       	nop
      54:	f5 c6       	rjmp	.+3562   	; 0xe40 <__bad_interrupt>
      56:	00 00       	nop
      58:	f3 c6       	rjmp	.+3558   	; 0xe40 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 fb 48 	jmp	0x91f6	; 0x91f6 <__vector_23>
      60:	ef c6       	rjmp	.+3550   	; 0xe40 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 57 4c 	jmp	0x98ae	; 0x98ae <__vector_25>
      68:	0c 94 82 4c 	jmp	0x9904	; 0x9904 <__vector_26>
      6c:	0c 94 b3 4c 	jmp	0x9966	; 0x9966 <__vector_27>
      70:	e7 c6       	rjmp	.+3534   	; 0xe40 <__bad_interrupt>
      72:	00 00       	nop
      74:	e5 c6       	rjmp	.+3530   	; 0xe40 <__bad_interrupt>
      76:	00 00       	nop
      78:	e3 c6       	rjmp	.+3526   	; 0xe40 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	e1 c6       	rjmp	.+3522   	; 0xe40 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 b7 1b 	jmp	0x376e	; 0x376e <__vector_32>
      84:	dd c6       	rjmp	.+3514   	; 0xe40 <__bad_interrupt>
      86:	00 00       	nop
      88:	db c6       	rjmp	.+3510   	; 0xe40 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	d9 c6       	rjmp	.+3506   	; 0xe40 <__bad_interrupt>
      8e:	00 00       	nop
      90:	d7 c6       	rjmp	.+3502   	; 0xe40 <__bad_interrupt>
      92:	00 00       	nop
      94:	d5 c6       	rjmp	.+3498   	; 0xe40 <__bad_interrupt>
	...

00000098 <MatrixColors_p>:
      98:	00 10 00 00 00 30 00 00 00 50 00 00 00 70 00 00     .....0...P...p..
      a8:	00 80 00 00 00 80 00 00 00 80 00 00 19 8d 19 00     ................
      b8:	33 99 33 00 4d a6 4d 00 66 b3 66 00 80 c0 80 00     3.3.M.M.f.f.....
      c8:	99 cc 99 00 b3 d9 b3 00 cc e6 cc 00 e6 f2 e6 00     ................

000000d8 <RGB_bmp>:
      d8:	00 01 00 02 00 03 00 04 00 06 00 08 00 0a 00 0f     ................
      e8:	01 01 02 02 03 03 04 04 06 06 08 08 0a 0a 0f 0f     ................
      f8:	01 00 02 00 03 00 04 00 06 00 08 00 0a 00 0f 00     ................
     108:	11 00 22 00 33 00 44 00 66 00 88 00 aa 00 ff 00     ..".3.D.f.......
     118:	10 00 20 00 30 00 40 00 60 00 80 00 a0 00 f0 00     .. .0.@.`.......
     128:	10 01 20 02 30 03 40 04 60 06 80 08 a0 0a f0 0f     .. .0.@.`.......
     138:	00 01 00 02 00 03 00 04 00 06 00 08 00 0a 00 0f     ................
     148:	11 01 22 02 33 03 44 04 66 06 88 08 aa 0a ff 0f     ..".3.D.f.......
     158:	11 01 22 02 33 03 55 05 77 07 99 09 aa 0a ff 0f     ..".3.U.w.......
     168:	22 02 22 02 33 03 55 05 77 07 99 09 aa 0a ff 0f     ".".3.U.w.......
     178:	33 03 33 03 33 03 55 05 77 07 99 09 aa 0a ff 0f     3.3.3.U.w.......
     188:	55 05 55 05 55 05 55 05 77 07 99 09 aa 0a ff 0f     U.U.U.U.w.......
     198:	77 07 77 07 77 07 77 07 77 07 99 09 aa 0a ff 0f     w.w.w.w.w.......
     1a8:	99 09 99 09 99 09 99 09 99 09 99 09 aa 0a ff 0f     ................
     1b8:	aa 0a aa 0a aa 0a aa 0a aa 0a aa 0a aa 0a ff 0f     ................
     1c8:	ff 0f ff 0f ff 0f ff 0f ff 0f ff 0f ff 0f ff 0f     ................
     1d8:	01 00 02 00 03 00 05 00 07 00 09 00 0a 00 0f 00     ................
     1e8:	02 00 02 00 03 00 05 00 07 00 09 00 0a 00 0f 00     ................
     1f8:	03 00 03 00 03 00 05 00 07 00 09 00 0a 00 0f 00     ................
     208:	05 00 05 00 05 00 05 00 07 00 09 00 0a 00 0f 00     ................
     218:	07 00 07 00 07 00 07 00 07 00 09 00 0a 00 0f 00     ................
     228:	09 00 09 00 09 00 09 00 09 00 09 00 0a 00 0f 00     ................
     238:	0a 00 0a 00 0a 00 0a 00 0a 00 0a 00 0a 00 0f 00     ................
     248:	0f 00 0f 00 0f 00 0f 00 0f 00 0f 00 0f 00 0f 00     ................
     258:	10 00 20 00 30 00 50 00 70 00 90 00 a0 00 f0 00     .. .0.P.p.......
     268:	20 00 20 00 30 00 50 00 70 00 90 00 a0 00 f0 00      . .0.P.p.......
     278:	30 00 30 00 30 00 50 00 70 00 90 00 a0 00 f0 00     0.0.0.P.p.......
     288:	50 00 50 00 50 00 50 00 70 00 90 00 a0 00 f0 00     P.P.P.P.p.......
     298:	70 00 70 00 70 00 70 00 70 00 90 00 a0 00 f0 00     p.p.p.p.p.......
     2a8:	90 00 90 00 90 00 90 00 90 00 90 00 a0 00 f0 00     ................
     2b8:	a0 00 a0 00 a0 00 a0 00 a0 00 a0 00 a0 00 f0 00     ................
     2c8:	f0 00 f0 00 f0 00 f0 00 f0 00 f0 00 f0 00 f0 00     ................
     2d8:	00 01 00 02 00 03 00 05 00 07 00 09 00 0a 00 0f     ................
     2e8:	00 02 00 02 00 03 00 05 00 07 00 09 00 0a 00 0f     ................
     2f8:	00 03 00 03 00 03 00 05 00 07 00 09 00 0a 00 0f     ................
     308:	00 05 00 05 00 05 00 05 00 07 00 09 00 0a 00 0f     ................
     318:	00 07 00 07 00 07 00 07 00 07 00 09 00 0a 00 0f     ................
     328:	00 09 00 09 00 09 00 09 00 09 00 09 00 0a 00 0f     ................
     338:	00 0a 00 0a 00 0a 00 0a 00 0a 00 0a 00 0a 00 0f     ................
     348:	00 0f 00 0f 00 0f 00 0f 00 0f 00 0f 00 0f 00 0f     ................
     358:	00 00 00 02 00 00 00 04 00 00 00 08 00 00 00 0f     ................
     368:	00 00 01 02 02 00 03 04 04 00 05 08 06 00 07 0f     ................
     378:	08 00 09 02 0a 00 0b 04 0c 00 0d 08 0e 00 0f 0f     ................
     388:	00 00 11 02 22 00 33 04 44 00 55 08 66 00 77 0f     ....".3.D.U.f.w.
     398:	88 00 99 02 aa 00 bb 04 cc 00 dd 08 ee 00 ff 0f     ................
     3a8:	00 00 10 02 20 00 30 04 40 00 50 08 60 00 70 0f     .... .0.@.P.`.p.
     3b8:	80 00 90 02 a0 00 b0 04 c0 00 d0 08 e0 00 f0 0f     ................
     3c8:	00 00 00 02 00 00 00 05 00 00 00 08 00 00 00 0f     ................
     3d8:	00 00 00 00 01 00 01 00 02 00 02 00 03 00 03 00     ................
     3e8:	04 00 04 00 05 00 05 00 06 00 06 00 07 00 07 00     ................
     3f8:	08 00 08 00 09 00 09 00 0a 00 0a 00 0b 00 0b 00     ................
     408:	0c 00 0c 00 0d 00 0d 00 0e 00 0e 00 0f 00 0f 00     ................
     418:	00 00 00 00 10 00 10 00 20 00 20 00 30 00 30 00     ........ . .0.0.
     428:	40 00 40 00 50 00 50 00 60 00 60 00 70 00 70 00     @.@.P.P.`.`.p.p.
     438:	80 00 80 00 90 00 90 00 a0 00 a0 00 b0 00 b0 00     ................
     448:	c0 00 c0 00 d0 00 d0 00 e0 00 e0 00 f0 00 f0 00     ................
     458:	00 00 00 00 01 00 01 00 02 00 02 00 03 00 03 00     ................
     468:	04 00 04 00 05 00 05 00 06 00 06 00 07 00 07 00     ................
     478:	08 00 08 00 09 00 09 00 0a 00 0a 00 0b 00 0b 00     ................
     488:	0c 00 0c 00 0d 00 0d 00 0e 00 0e 00 0f 00 0f 00     ................
     498:	00 00 00 00 00 01 00 01 00 02 00 02 00 03 00 03     ................
     4a8:	00 04 00 04 00 05 00 05 00 06 00 06 00 07 00 07     ................
     4b8:	00 08 00 08 00 09 00 09 00 0a 00 0a 00 0b 00 0b     ................
     4c8:	00 0c 00 0c 00 0d 00 0d 00 0e 00 0e 00 0f 00 0f     ................
     4d8:	00 0f 01 00 03 00 05 00 07 00 0a 00 0f 00 00 00     ................
     4e8:	20 00 21 0f 23 00 25 00 27 00 2a 00 2f 00 20 00      .!.#.%.'.*./. .
     4f8:	40 00 41 00 43 0f 45 00 47 00 4a 00 4f 00 40 00     @.A.C.E.G.J.O.@.
     508:	60 00 61 00 63 00 65 0f 67 00 6a 00 6f 00 60 00     `.a.c.e.g.j.o.`.
     518:	80 00 81 00 83 00 85 00 87 0f 8a 00 8f 00 80 00     ................
     528:	a0 00 a1 00 a3 00 a5 00 a7 00 aa 0f af 00 a0 00     ................
     538:	f0 00 f1 00 f3 00 f5 00 f7 00 fa 00 ff 0f f0 00     ................
     548:	00 00 01 00 03 00 05 00 07 00 0a 00 0f 00 00 0f     ................
     558:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     568:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     578:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     588:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     598:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     5a8:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     5b8:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     5c8:	f0 00 f0 00 ff 00 ff 00 0f 00 0f 00 f0 00 f0 00     ................
     5d8:	00 00 00 00 0f 00 0f 00 0f 00 0f 00 00 00 00 00     ................
     5e8:	00 00 0f 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
     5f8:	0f 00 00 00 00 0f 00 00 00 00 00 0f 00 00 0f 00     ................
     608:	0f 00 00 00 00 00 00 00 00 00 00 00 00 00 0f 00     ................
     618:	0f 00 00 00 f0 00 00 00 00 00 f0 00 00 00 0f 00     ................
     628:	0f 00 00 00 00 00 f4 00 f3 00 00 00 00 00 0f 00     ................
     638:	00 00 0f 00 00 00 00 00 00 00 00 00 0f 00 00 00     ................
     648:	00 00 00 00 0f 00 0f 00 0f 00 0f 00 00 00 00 00     ................

00000658 <font>:
     658:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
     668:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
     678:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     688:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     698:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     6a8:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     6b8:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     6c8:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     6d8:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     6e8:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     6f8:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     708:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     718:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     728:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     738:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     748:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     758:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     768:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     778:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     788:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     798:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     7a8:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     7b8:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     7c8:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     7d8:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     7e8:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     7f8:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     808:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     818:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     828:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     838:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     848:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     858:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     868:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     878:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     888:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     898:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     8a8:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     8b8:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     8c8:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     8d8:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     8e8:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     8f8:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     908:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     918:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     928:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     938:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     948:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     958:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     968:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     978:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     988:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     998:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     9a8:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     9b8:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     9c8:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     9d8:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     9e8:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     9f8:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     a08:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     a18:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     a28:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     a38:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     a48:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     a58:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     a68:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     a78:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     a88:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     a98:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     aa8:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     ab8:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     ac8:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     ad8:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     ae8:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     af8:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     b08:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     b18:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     b28:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     b38:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     b48:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

00000b58 <gamma6>:
     b58:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     b68:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     b78:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     b88:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

00000b98 <gamma5>:
     b98:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     ba8:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

00000bb8 <PartyColors_p>:
     bb8:	ab 00 55 00 7c 00 84 00 4b 00 b5 00 1b 00 e5 00     ..U.|...K.......
     bc8:	00 17 e8 00 00 47 b8 00 00 77 ab 00 00 ab ab 00     .....G...w......
     bd8:	00 55 ab 00 00 22 dd 00 0e 00 f2 00 3e 00 c2 00     .U..."......>...
     be8:	71 00 8f 00 a1 00 5f 00 d0 00 2f 00 f9 07 00 00     q....._.../.....

00000bf8 <RainbowStripeColors_p>:
     bf8:	00 00 ff 00 00 00 00 00 00 55 ab 00 00 00 00 00     .........U......
     c08:	00 ab ab 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     c18:	55 ab 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     U...............
     c28:	ab 00 55 00 00 00 00 00 55 00 ab 00 00 00 00 00     ..U.....U.......

00000c38 <RainbowColors_p>:
     c38:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     c48:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     c58:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     c68:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

00000c78 <CloudColors_p>:
     c78:	ff 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     c88:	8b 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     c98:	ff 00 00 00 8b 00 00 00 eb ce 87 00 eb ce 87 00     ................
     ca8:	e6 d8 ad 00 ff ff ff 00 e6 d8 ad 00 eb ce 87 00     ................

00000cb8 <digital_pin_table_PGM>:
     cb8:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     cc8:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     cd8:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     ce8:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     cf8:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     d08:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000d14 <descriptor_list>:
     d14:	00 01 00 00 c5 0d 12 00 02 00 00 82 0d 43 00 03     .............C..
     d24:	00 00 7e 0d 04 01 03 09 04 64 0d 18 02 03 09 04     ..~......d......
     d34:	4c 0d 16 03 03 09 04 3e 0d 0c                       L......>..

00000d3e <string3>:
     d3e:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

00000d4c <string2>:
     d4c:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     d5c:	69 00 61 00 6c 00 00 00                             i.a.l...

00000d64 <string1>:
     d64:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     d74:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

00000d7e <string0>:
     d7e:	04 03 09 04                                         ....

00000d82 <config1_descriptor>:
     d82:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     d92:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     da2:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     db2:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     dc2:	40 00 00                                            @..

00000dc5 <device_descriptor>:
     dc5:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     dd5:	03 01                                               ..

00000dd7 <endpoint_config_table>:
     dd7:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000de2 <__ctors_start>:
     de2:	fa 34       	cpi	r31, 0x4A	; 74
     de4:	77 44       	sbci	r23, 0x47	; 71
     de6:	d1 4c       	sbci	r29, 0xC1	; 193
     de8:	96 4f       	sbci	r25, 0xF6	; 246

00000dea <__ctors_end>:
     dea:	75 35       	cpi	r23, 0x55	; 85

00000dec <__dtors_end>:
     dec:	11 24       	eor	r1, r1
     dee:	1f be       	out	0x3f, r1	; 63
     df0:	cf ef       	ldi	r28, 0xFF	; 255
     df2:	d0 e2       	ldi	r29, 0x20	; 32
     df4:	de bf       	out	0x3e, r29	; 62
     df6:	cd bf       	out	0x3d, r28	; 61

00000df8 <__do_copy_data>:
     df8:	19 e0       	ldi	r17, 0x09	; 9
     dfa:	a0 e0       	ldi	r26, 0x00	; 0
     dfc:	b1 e0       	ldi	r27, 0x01	; 1
     dfe:	ea e6       	ldi	r30, 0x6A	; 106
     e00:	f7 ea       	ldi	r31, 0xA7	; 167
     e02:	00 e0       	ldi	r16, 0x00	; 0
     e04:	0b bf       	out	0x3b, r16	; 59
     e06:	02 c0       	rjmp	.+4      	; 0xe0c <__do_copy_data+0x14>
     e08:	07 90       	elpm	r0, Z+
     e0a:	0d 92       	st	X+, r0
     e0c:	a2 3e       	cpi	r26, 0xE2	; 226
     e0e:	b1 07       	cpc	r27, r17
     e10:	d9 f7       	brne	.-10     	; 0xe08 <__do_copy_data+0x10>

00000e12 <__do_clear_bss>:
     e12:	21 e1       	ldi	r18, 0x11	; 17
     e14:	a2 ee       	ldi	r26, 0xE2	; 226
     e16:	b9 e0       	ldi	r27, 0x09	; 9
     e18:	01 c0       	rjmp	.+2      	; 0xe1c <.do_clear_bss_start>

00000e1a <.do_clear_bss_loop>:
     e1a:	1d 92       	st	X+, r1

00000e1c <.do_clear_bss_start>:
     e1c:	a6 37       	cpi	r26, 0x76	; 118
     e1e:	b2 07       	cpc	r27, r18
     e20:	e1 f7       	brne	.-8      	; 0xe1a <.do_clear_bss_loop>

00000e22 <__do_global_ctors>:
     e22:	16 e0       	ldi	r17, 0x06	; 6
     e24:	c5 ef       	ldi	r28, 0xF5	; 245
     e26:	d6 e0       	ldi	r29, 0x06	; 6
     e28:	04 c0       	rjmp	.+8      	; 0xe32 <__do_global_ctors+0x10>
     e2a:	21 97       	sbiw	r28, 0x01	; 1
     e2c:	fe 01       	movw	r30, r28
     e2e:	0e 94 be 52 	call	0xa57c	; 0xa57c <__tablejump2__>
     e32:	c1 3f       	cpi	r28, 0xF1	; 241
     e34:	d1 07       	cpc	r29, r17
     e36:	c9 f7       	brne	.-14     	; 0xe2a <__do_global_ctors+0x8>
     e38:	0e 94 e2 4c 	call	0x99c4	; 0x99c4 <main>
     e3c:	0c 94 a9 53 	jmp	0xa752	; 0xa752 <__do_global_dtors>

00000e40 <__bad_interrupt>:
     e40:	df c8       	rjmp	.-3650   	; 0x0 <__vectors>

00000e42 <CLEDController::size()>:
	//--- standard-part um dauer und naechstes programm zu speichern ----
	if (!nextChangeMillisAlreadyCalculated) {
		nextChangeMillis = 0;
		nextSongPart = nextPart;
		nextChangeMillisAlreadyCalculated = true;
	}
     e42:	fc 01       	movw	r30, r24
     e44:	85 85       	ldd	r24, Z+13	; 0x0d
     e46:	96 85       	ldd	r25, Z+14	; 0x0e
     e48:	08 95       	ret

00000e4a <CLEDController::clearLeds(int)>:
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	00 d0       	rcall	.+0      	; 0xe50 <CLEDController::clearLeds(int)+0x6>
     e50:	00 d0       	rcall	.+0      	; 0xe52 <CLEDController::clearLeds(int)+0x8>
     e52:	00 d0       	rcall	.+0      	; 0xe54 <CLEDController::clearLeds(int)+0xa>
     e54:	cd b7       	in	r28, 0x3d	; 61
     e56:	de b7       	in	r29, 0x3e	; 62
     e58:	ab 01       	movw	r20, r22
     e5a:	1c 82       	std	Y+4, r1	; 0x04
     e5c:	1d 82       	std	Y+5, r1	; 0x05
     e5e:	1e 82       	std	Y+6, r1	; 0x06
     e60:	dc 01       	movw	r26, r24
     e62:	ed 91       	ld	r30, X+
     e64:	fc 91       	ld	r31, X
     e66:	01 90       	ld	r0, Z+
     e68:	f0 81       	ld	r31, Z
     e6a:	e0 2d       	mov	r30, r0
     e6c:	19 82       	std	Y+1, r1	; 0x01
     e6e:	1a 82       	std	Y+2, r1	; 0x02
     e70:	1b 82       	std	Y+3, r1	; 0x03
     e72:	9e 01       	movw	r18, r28
     e74:	2f 5f       	subi	r18, 0xFF	; 255
     e76:	3f 4f       	sbci	r19, 0xFF	; 255
     e78:	be 01       	movw	r22, r28
     e7a:	6c 5f       	subi	r22, 0xFC	; 252
     e7c:	7f 4f       	sbci	r23, 0xFF	; 255
     e7e:	09 95       	icall
     e80:	26 96       	adiw	r28, 0x06	; 6
     e82:	0f b6       	in	r0, 0x3f	; 63
     e84:	f8 94       	cli
     e86:	de bf       	out	0x3e, r29	; 62
     e88:	0f be       	out	0x3f, r0	; 63
     e8a:	cd bf       	out	0x3d, r28	; 61
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	08 95       	ret

00000e92 <myRemapFn(unsigned int, unsigned int)>:
     e92:	67 31       	cpi	r22, 0x17	; 23
     e94:	71 05       	cpc	r23, r1
     e96:	08 f0       	brcs	.+2      	; 0xe9a <myRemapFn(unsigned int, unsigned int)+0x8>
     e98:	ef c0       	rjmp	.+478    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     e9a:	fb 01       	movw	r30, r22
     e9c:	ee 5a       	subi	r30, 0xAE	; 174
     e9e:	f8 4f       	sbci	r31, 0xF8	; 248
     ea0:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
     ea4:	69 07       	cpc	r22, r25
     ea6:	74 07       	cpc	r23, r20
     ea8:	7c 07       	cpc	r23, r28
     eaa:	89 07       	cpc	r24, r25
     eac:	94 07       	cpc	r25, r20
     eae:	9b 07       	cpc	r25, r27
     eb0:	a2 07       	cpc	r26, r18
     eb2:	a9 07       	cpc	r26, r25
     eb4:	b3 07       	cpc	r27, r19
     eb6:	bd 07       	cpc	r27, r29
     eb8:	c7 07       	cpc	r28, r23
     eba:	d1 07       	cpc	r29, r17
     ebc:	db 07       	cpc	r29, r27
     ebe:	e5 07       	cpc	r30, r21
     ec0:	ef 07       	cpc	r30, r31
     ec2:	f7 07       	cpc	r31, r23
     ec4:	ff 07       	cpc	r31, r31
     ec6:	06 08       	sbc	r0, r6
     ec8:	0d 08       	sbc	r0, r13
     eca:	14 08       	sbc	r1, r4
     ecc:	1e 08       	sbc	r1, r14
     ece:	28 08       	sbc	r2, r8
     ed0:	32 08       	sbc	r3, r2
     ed2:	04 97       	sbiw	r24, 0x04	; 4
     ed4:	83 30       	cpi	r24, 0x03	; 3
     ed6:	91 05       	cpc	r25, r1
     ed8:	08 f0       	brcs	.+2      	; 0xedc <myRemapFn(unsigned int, unsigned int)+0x4a>
     eda:	ce c0       	rjmp	.+412    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     edc:	86 59       	subi	r24, 0x96	; 150
     ede:	9a 4f       	sbci	r25, 0xFA	; 250
     ee0:	fc 01       	movw	r30, r24
     ee2:	80 81       	ld	r24, Z
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	08 95       	ret
     ee8:	02 97       	sbiw	r24, 0x02	; 2
     eea:	86 30       	cpi	r24, 0x06	; 6
     eec:	91 05       	cpc	r25, r1
     eee:	08 f0       	brcs	.+2      	; 0xef2 <myRemapFn(unsigned int, unsigned int)+0x60>
     ef0:	c3 c0       	rjmp	.+390    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ef2:	8c 59       	subi	r24, 0x9C	; 156
     ef4:	9a 4f       	sbci	r25, 0xFA	; 250
     ef6:	f4 cf       	rjmp	.-24     	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
     ef8:	01 97       	sbiw	r24, 0x01	; 1
     efa:	83 31       	cpi	r24, 0x13	; 19
     efc:	91 05       	cpc	r25, r1
     efe:	08 f0       	brcs	.+2      	; 0xf02 <myRemapFn(unsigned int, unsigned int)+0x70>
     f00:	bb c0       	rjmp	.+374    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f02:	88 0f       	add	r24, r24
     f04:	99 1f       	adc	r25, r25
     f06:	fc 01       	movw	r30, r24
     f08:	e2 5c       	subi	r30, 0xC2	; 194
     f0a:	fa 4f       	sbci	r31, 0xFA	; 250
     f0c:	80 81       	ld	r24, Z
     f0e:	91 81       	ldd	r25, Z+1	; 0x01
     f10:	08 95       	ret
     f12:	01 97       	sbiw	r24, 0x01	; 1
     f14:	85 31       	cpi	r24, 0x15	; 21
     f16:	91 05       	cpc	r25, r1
     f18:	08 f0       	brcs	.+2      	; 0xf1c <myRemapFn(unsigned int, unsigned int)+0x8a>
     f1a:	ae c0       	rjmp	.+348    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f1c:	88 0f       	add	r24, r24
     f1e:	99 1f       	adc	r25, r25
     f20:	fc 01       	movw	r30, r24
     f22:	ec 5e       	subi	r30, 0xEC	; 236
     f24:	fa 4f       	sbci	r31, 0xFA	; 250
     f26:	f2 cf       	rjmp	.-28     	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     f28:	84 31       	cpi	r24, 0x14	; 20
     f2a:	91 05       	cpc	r25, r1
     f2c:	08 f0       	brcs	.+2      	; 0xf30 <myRemapFn(unsigned int, unsigned int)+0x9e>
     f2e:	a4 c0       	rjmp	.+328    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f30:	80 50       	subi	r24, 0x00	; 0
     f32:	9b 4f       	sbci	r25, 0xFB	; 251
     f34:	d5 cf       	rjmp	.-86     	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
     f36:	84 31       	cpi	r24, 0x14	; 20
     f38:	91 05       	cpc	r25, r1
     f3a:	08 f0       	brcs	.+2      	; 0xf3e <myRemapFn(unsigned int, unsigned int)+0xac>
     f3c:	9d c0       	rjmp	.+314    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f3e:	84 51       	subi	r24, 0x14	; 20
     f40:	9b 4f       	sbci	r25, 0xFB	; 251
     f42:	ce cf       	rjmp	.-100    	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
     f44:	8f 30       	cpi	r24, 0x0F	; 15
     f46:	91 05       	cpc	r25, r1
     f48:	08 f0       	brcs	.+2      	; 0xf4c <myRemapFn(unsigned int, unsigned int)+0xba>
     f4a:	96 c0       	rjmp	.+300    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f4c:	83 52       	subi	r24, 0x23	; 35
     f4e:	9b 4f       	sbci	r25, 0xFB	; 251
     f50:	c7 cf       	rjmp	.-114    	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
     f52:	8f 30       	cpi	r24, 0x0F	; 15
     f54:	91 05       	cpc	r25, r1
     f56:	08 f0       	brcs	.+2      	; 0xf5a <myRemapFn(unsigned int, unsigned int)+0xc8>
     f58:	8f c0       	rjmp	.+286    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f5a:	88 0f       	add	r24, r24
     f5c:	99 1f       	adc	r25, r25
     f5e:	fc 01       	movw	r30, r24
     f60:	e1 54       	subi	r30, 0x41	; 65
     f62:	fb 4f       	sbci	r31, 0xFB	; 251
     f64:	d3 cf       	rjmp	.-90     	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     f66:	8f 30       	cpi	r24, 0x0F	; 15
     f68:	91 05       	cpc	r25, r1
     f6a:	08 f0       	brcs	.+2      	; 0xf6e <myRemapFn(unsigned int, unsigned int)+0xdc>
     f6c:	85 c0       	rjmp	.+266    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f6e:	88 0f       	add	r24, r24
     f70:	99 1f       	adc	r25, r25
     f72:	fc 01       	movw	r30, r24
     f74:	ef 55       	subi	r30, 0x5F	; 95
     f76:	fb 4f       	sbci	r31, 0xFB	; 251
     f78:	c9 cf       	rjmp	.-110    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     f7a:	8f 30       	cpi	r24, 0x0F	; 15
     f7c:	91 05       	cpc	r25, r1
     f7e:	08 f0       	brcs	.+2      	; 0xf82 <myRemapFn(unsigned int, unsigned int)+0xf0>
     f80:	7b c0       	rjmp	.+246    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f82:	88 0f       	add	r24, r24
     f84:	99 1f       	adc	r25, r25
     f86:	fc 01       	movw	r30, r24
     f88:	ed 57       	subi	r30, 0x7D	; 125
     f8a:	fb 4f       	sbci	r31, 0xFB	; 251
     f8c:	bf cf       	rjmp	.-130    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     f8e:	8f 30       	cpi	r24, 0x0F	; 15
     f90:	91 05       	cpc	r25, r1
     f92:	08 f0       	brcs	.+2      	; 0xf96 <myRemapFn(unsigned int, unsigned int)+0x104>
     f94:	71 c0       	rjmp	.+226    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     f96:	88 0f       	add	r24, r24
     f98:	99 1f       	adc	r25, r25
     f9a:	fc 01       	movw	r30, r24
     f9c:	eb 59       	subi	r30, 0x9B	; 155
     f9e:	fb 4f       	sbci	r31, 0xFB	; 251
     fa0:	b5 cf       	rjmp	.-150    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     fa2:	8f 30       	cpi	r24, 0x0F	; 15
     fa4:	91 05       	cpc	r25, r1
     fa6:	08 f0       	brcs	.+2      	; 0xfaa <myRemapFn(unsigned int, unsigned int)+0x118>
     fa8:	67 c0       	rjmp	.+206    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     faa:	88 0f       	add	r24, r24
     fac:	99 1f       	adc	r25, r25
     fae:	fc 01       	movw	r30, r24
     fb0:	e9 5b       	subi	r30, 0xB9	; 185
     fb2:	fb 4f       	sbci	r31, 0xFB	; 251
     fb4:	ab cf       	rjmp	.-170    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     fb6:	8f 30       	cpi	r24, 0x0F	; 15
     fb8:	91 05       	cpc	r25, r1
     fba:	08 f0       	brcs	.+2      	; 0xfbe <myRemapFn(unsigned int, unsigned int)+0x12c>
     fbc:	5d c0       	rjmp	.+186    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     fbe:	88 0f       	add	r24, r24
     fc0:	99 1f       	adc	r25, r25
     fc2:	fc 01       	movw	r30, r24
     fc4:	e7 5d       	subi	r30, 0xD7	; 215
     fc6:	fb 4f       	sbci	r31, 0xFB	; 251
     fc8:	a1 cf       	rjmp	.-190    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     fca:	8f 30       	cpi	r24, 0x0F	; 15
     fcc:	91 05       	cpc	r25, r1
     fce:	08 f0       	brcs	.+2      	; 0xfd2 <myRemapFn(unsigned int, unsigned int)+0x140>
     fd0:	53 c0       	rjmp	.+166    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     fd2:	88 0f       	add	r24, r24
     fd4:	99 1f       	adc	r25, r25
     fd6:	fc 01       	movw	r30, r24
     fd8:	e5 5f       	subi	r30, 0xF5	; 245
     fda:	fb 4f       	sbci	r31, 0xFB	; 251
     fdc:	97 cf       	rjmp	.-210    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
     fde:	01 97       	sbiw	r24, 0x01	; 1
     fe0:	8e 30       	cpi	r24, 0x0E	; 14
     fe2:	91 05       	cpc	r25, r1
     fe4:	08 f0       	brcs	.+2      	; 0xfe8 <myRemapFn(unsigned int, unsigned int)+0x156>
     fe6:	48 c0       	rjmp	.+144    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     fe8:	83 50       	subi	r24, 0x03	; 3
     fea:	9c 4f       	sbci	r25, 0xFC	; 252
     fec:	79 cf       	rjmp	.-270    	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
     fee:	02 97       	sbiw	r24, 0x02	; 2
     ff0:	81 31       	cpi	r24, 0x11	; 17
     ff2:	91 05       	cpc	r25, r1
     ff4:	08 f0       	brcs	.+2      	; 0xff8 <myRemapFn(unsigned int, unsigned int)+0x166>
     ff6:	40 c0       	rjmp	.+128    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ff8:	84 51       	subi	r24, 0x14	; 20
     ffa:	9c 4f       	sbci	r25, 0xFC	; 252
     ffc:	71 cf       	rjmp	.-286    	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
     ffe:	01 97       	sbiw	r24, 0x01	; 1
    1000:	82 31       	cpi	r24, 0x12	; 18
    1002:	91 05       	cpc	r25, r1
    1004:	c8 f5       	brcc	.+114    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
    1006:	86 52       	subi	r24, 0x26	; 38
    1008:	9c 4f       	sbci	r25, 0xFC	; 252
    100a:	6a cf       	rjmp	.-300    	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
    100c:	01 97       	sbiw	r24, 0x01	; 1
    100e:	83 31       	cpi	r24, 0x13	; 19
    1010:	91 05       	cpc	r25, r1
    1012:	90 f5       	brcc	.+100    	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
    1014:	89 53       	subi	r24, 0x39	; 57
    1016:	9c 4f       	sbci	r25, 0xFC	; 252
    1018:	63 cf       	rjmp	.-314    	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
    101a:	01 97       	sbiw	r24, 0x01	; 1
    101c:	84 31       	cpi	r24, 0x14	; 20
    101e:	91 05       	cpc	r25, r1
    1020:	58 f5       	brcc	.+86     	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
    1022:	8d 54       	subi	r24, 0x4D	; 77
    1024:	9c 4f       	sbci	r25, 0xFC	; 252
    1026:	5c cf       	rjmp	.-328    	; 0xee0 <myRemapFn(unsigned int, unsigned int)+0x4e>
    1028:	01 97       	sbiw	r24, 0x01	; 1
    102a:	83 31       	cpi	r24, 0x13	; 19
    102c:	91 05       	cpc	r25, r1
    102e:	20 f5       	brcc	.+72     	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
    1030:	88 0f       	add	r24, r24
    1032:	99 1f       	adc	r25, r25
    1034:	fc 01       	movw	r30, r24
    1036:	e3 57       	subi	r30, 0x73	; 115
    1038:	fc 4f       	sbci	r31, 0xFC	; 252
    103a:	68 cf       	rjmp	.-304    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
    103c:	02 97       	sbiw	r24, 0x02	; 2
    103e:	87 30       	cpi	r24, 0x07	; 7
    1040:	91 05       	cpc	r25, r1
    1042:	d0 f4       	brcc	.+52     	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	fc 01       	movw	r30, r24
    104a:	e1 58       	subi	r30, 0x81	; 129
    104c:	fc 4f       	sbci	r31, 0xFC	; 252
    104e:	5e cf       	rjmp	.-324    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
    1050:	03 97       	sbiw	r24, 0x03	; 3
    1052:	85 30       	cpi	r24, 0x05	; 5
    1054:	91 05       	cpc	r25, r1
    1056:	80 f4       	brcc	.+32     	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
    1058:	88 0f       	add	r24, r24
    105a:	99 1f       	adc	r25, r25
    105c:	fc 01       	movw	r30, r24
    105e:	eb 58       	subi	r30, 0x8B	; 139
    1060:	fc 4f       	sbci	r31, 0xFC	; 252
    1062:	54 cf       	rjmp	.-344    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
    1064:	04 97       	sbiw	r24, 0x04	; 4
    1066:	83 30       	cpi	r24, 0x03	; 3
    1068:	91 05       	cpc	r25, r1
    106a:	30 f4       	brcc	.+12     	; 0x1078 <myRemapFn(unsigned int, unsigned int)+0x1e6>
    106c:	88 0f       	add	r24, r24
    106e:	99 1f       	adc	r25, r25
    1070:	fc 01       	movw	r30, r24
    1072:	e1 59       	subi	r30, 0x91	; 145
    1074:	fc 4f       	sbci	r31, 0xFC	; 252
    1076:	4a cf       	rjmp	.-364    	; 0xf0c <myRemapFn(unsigned int, unsigned int)+0x7a>
    1078:	8c e2       	ldi	r24, 0x2C	; 44
    107a:	91 e0       	ldi	r25, 0x01	; 1
    107c:	08 95       	ret

0000107e <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
    107e:	80 e9       	ldi	r24, 0x90	; 144
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	08 95       	ret

00001084 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
    1084:	3a 9a       	sbi	0x07, 2	; 7
    1086:	08 95       	ret

00001088 <Print::write(char const*)>:
    1088:	fb 01       	movw	r30, r22
    108a:	01 90       	ld	r0, Z+
    108c:	00 20       	and	r0, r0
    108e:	e9 f7       	brne	.-6      	; 0x108a <Print::write(char const*)+0x2>
    1090:	31 97       	sbiw	r30, 0x01	; 1
    1092:	af 01       	movw	r20, r30
    1094:	46 1b       	sub	r20, r22
    1096:	57 0b       	sbc	r21, r23
    1098:	dc 01       	movw	r26, r24
    109a:	ed 91       	ld	r30, X+
    109c:	fc 91       	ld	r31, X
    109e:	02 80       	ldd	r0, Z+2	; 0x02
    10a0:	f3 81       	ldd	r31, Z+3	; 0x03
    10a2:	e0 2d       	mov	r30, r0
    10a4:	09 94       	ijmp

000010a6 <Print::print(char const*)>:
    10a6:	f0 cf       	rjmp	.-32     	; 0x1088 <Print::write(char const*)>

000010a8 <Print::println(char const*)>:
    10a8:	0f 93       	push	r16
    10aa:	1f 93       	push	r17
    10ac:	cf 93       	push	r28
    10ae:	df 93       	push	r29
    10b0:	ec 01       	movw	r28, r24
    10b2:	ea df       	rcall	.-44     	; 0x1088 <Print::write(char const*)>
    10b4:	8c 01       	movw	r16, r24
    10b6:	ce 01       	movw	r24, r28
    10b8:	0e 94 74 4d 	call	0x9ae8	; 0x9ae8 <Print::println()>
    10bc:	80 0f       	add	r24, r16
    10be:	91 1f       	adc	r25, r17
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	1f 91       	pop	r17
    10c6:	0f 91       	pop	r16
    10c8:	08 95       	ret

000010ca <Print::println(unsigned char)>:
    10ca:	0f 93       	push	r16
    10cc:	1f 93       	push	r17
    10ce:	cf 93       	push	r28
    10d0:	df 93       	push	r29
    10d2:	ec 01       	movw	r28, r24
    10d4:	46 2f       	mov	r20, r22
    10d6:	50 e0       	ldi	r21, 0x00	; 0
    10d8:	70 e0       	ldi	r23, 0x00	; 0
    10da:	60 e0       	ldi	r22, 0x00	; 0
    10dc:	20 e0       	ldi	r18, 0x00	; 0
    10de:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <Print::printNumberDec(unsigned long, unsigned char)>
    10e2:	8c 01       	movw	r16, r24
    10e4:	ce 01       	movw	r24, r28
    10e6:	0e 94 74 4d 	call	0x9ae8	; 0x9ae8 <Print::println()>
    10ea:	80 0f       	add	r24, r16
    10ec:	91 1f       	adc	r25, r17
    10ee:	df 91       	pop	r29
    10f0:	cf 91       	pop	r28
    10f2:	1f 91       	pop	r17
    10f4:	0f 91       	pop	r16
    10f6:	08 95       	ret

000010f8 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
    10f8:	0f 93       	push	r16
    10fa:	1f 93       	push	r17
    10fc:	dc 01       	movw	r26, r24
    10fe:	ac 01       	movw	r20, r24
    1100:	40 5d       	subi	r20, 0xD0	; 208
    1102:	5f 4f       	sbci	r21, 0xFF	; 255
    1104:	fb 01       	movw	r30, r22
    1106:	05 91       	lpm	r16, Z+
    1108:	15 91       	lpm	r17, Z+
    110a:	25 91       	lpm	r18, Z+
    110c:	34 91       	lpm	r19, Z
    110e:	2c 93       	st	X, r18
    1110:	11 96       	adiw	r26, 0x01	; 1
    1112:	1c 93       	st	X, r17
    1114:	11 97       	sbiw	r26, 0x01	; 1
    1116:	12 96       	adiw	r26, 0x02	; 2
    1118:	0c 93       	st	X, r16
    111a:	12 97       	sbiw	r26, 0x02	; 2
    111c:	6c 5f       	subi	r22, 0xFC	; 252
    111e:	7f 4f       	sbci	r23, 0xFF	; 255
    1120:	13 96       	adiw	r26, 0x03	; 3
    1122:	a4 17       	cp	r26, r20
    1124:	b5 07       	cpc	r27, r21
    1126:	71 f7       	brne	.-36     	; 0x1104 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
    1128:	1f 91       	pop	r17
    112a:	0f 91       	pop	r16
    112c:	08 95       	ret

0000112e <CFastLED::show()>:
    112e:	fc 01       	movw	r30, r24
    1130:	60 81       	ld	r22, Z
    1132:	0c 94 bf 42 	jmp	0x857e	; 0x857e <CFastLED::show(unsigned char)>

00001136 <CFastLED::showColor(CRGB const&)>:
    1136:	fc 01       	movw	r30, r24
    1138:	40 81       	ld	r20, Z
    113a:	0c 94 4f 43 	jmp	0x869e	; 0x869e <CFastLED::showColor(CRGB const&, unsigned char)>

0000113e <Framebuffer_GFX::clear()>:
    113e:	dc 01       	movw	r26, r24
    1140:	ed 91       	ld	r30, X+
    1142:	fc 91       	ld	r31, X
    1144:	02 a0       	ldd	r0, Z+34	; 0x22
    1146:	f3 a1       	ldd	r31, Z+35	; 0x23
    1148:	e0 2d       	mov	r30, r0
    114a:	70 e0       	ldi	r23, 0x00	; 0
    114c:	60 e0       	ldi	r22, 0x00	; 0
    114e:	09 94       	ijmp

00001150 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)>:
    1150:	2f 92       	push	r2
    1152:	3f 92       	push	r3
    1154:	4f 92       	push	r4
    1156:	5f 92       	push	r5
    1158:	6f 92       	push	r6
    115a:	7f 92       	push	r7
    115c:	8f 92       	push	r8
    115e:	9f 92       	push	r9
    1160:	af 92       	push	r10
    1162:	bf 92       	push	r11
    1164:	cf 92       	push	r12
    1166:	df 92       	push	r13
    1168:	ef 92       	push	r14
    116a:	ff 92       	push	r15
    116c:	0f 93       	push	r16
    116e:	1f 93       	push	r17
    1170:	cf 93       	push	r28
    1172:	df 93       	push	r29
    1174:	cd b7       	in	r28, 0x3d	; 61
    1176:	de b7       	in	r29, 0x3e	; 62
    1178:	2c 97       	sbiw	r28, 0x0c	; 12
    117a:	0f b6       	in	r0, 0x3f	; 63
    117c:	f8 94       	cli
    117e:	de bf       	out	0x3e, r29	; 62
    1180:	0f be       	out	0x3f, r0	; 63
    1182:	cd bf       	out	0x3d, r28	; 61
    1184:	9c 83       	std	Y+4, r25	; 0x04
    1186:	8b 83       	std	Y+3, r24	; 0x03
    1188:	7e 83       	std	Y+6, r23	; 0x06
    118a:	6d 83       	std	Y+5, r22	; 0x05
    118c:	58 87       	std	Y+8, r21	; 0x08
    118e:	4f 83       	std	Y+7, r20	; 0x07
    1190:	29 01       	movw	r4, r18
    1192:	38 01       	movw	r6, r16
    1194:	80 91 7a 0a 	lds	r24, 0x0A7A	; 0x800a7a <guard variable for fixdrawRGBBitmap(int, int, unsigned int const*, int, int)::RGB_bmp_fixed>
    1198:	40 9e       	mul	r4, r16
    119a:	90 01       	movw	r18, r0
    119c:	41 9e       	mul	r4, r17
    119e:	30 0d       	add	r19, r0
    11a0:	50 9e       	mul	r5, r16
    11a2:	30 0d       	add	r19, r0
    11a4:	11 24       	eor	r1, r1
    11a6:	3a 83       	std	Y+2, r19	; 0x02
    11a8:	29 83       	std	Y+1, r18	; 0x01
    11aa:	81 11       	cpse	r24, r1
    11ac:	14 c0       	rjmp	.+40     	; 0x11d6 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)+0x86>
    11ae:	8a e7       	ldi	r24, 0x7A	; 122
    11b0:	9a e0       	ldi	r25, 0x0A	; 10
    11b2:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <__cxa_guard_acquire>
    11b6:	89 2b       	or	r24, r25
    11b8:	71 f0       	breq	.+28     	; 0x11d6 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)+0x86>
    11ba:	89 81       	ldd	r24, Y+1	; 0x01
    11bc:	9a 81       	ldd	r25, Y+2	; 0x02
    11be:	88 0f       	add	r24, r24
    11c0:	99 1f       	adc	r25, r25
    11c2:	0e 94 5c 45 	call	0x8ab8	; 0x8ab8 <malloc>
    11c6:	90 93 83 0a 	sts	0x0A83, r25	; 0x800a83 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)::RGB_bmp_fixed+0x1>
    11ca:	80 93 82 0a 	sts	0x0A82, r24	; 0x800a82 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)::RGB_bmp_fixed>
    11ce:	8a e7       	ldi	r24, 0x7A	; 122
    11d0:	9a e0       	ldi	r25, 0x0A	; 10
    11d2:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <__cxa_guard_release>
    11d6:	91 2c       	mov	r9, r1
    11d8:	81 2c       	mov	r8, r1
    11da:	89 81       	ldd	r24, Y+1	; 0x01
    11dc:	9a 81       	ldd	r25, Y+2	; 0x02
    11de:	88 15       	cp	r24, r8
    11e0:	99 05       	cpc	r25, r9
    11e2:	09 f4       	brne	.+2      	; 0x11e6 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)+0x96>
    11e4:	6a c0       	rjmp	.+212    	; 0x12ba <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)+0x16a>
    11e6:	14 01       	movw	r2, r8
    11e8:	22 0c       	add	r2, r2
    11ea:	33 1c       	adc	r3, r3
    11ec:	ef 81       	ldd	r30, Y+7	; 0x07
    11ee:	f8 85       	ldd	r31, Y+8	; 0x08
    11f0:	e2 0d       	add	r30, r2
    11f2:	f3 1d       	adc	r31, r3
    11f4:	25 91       	lpm	r18, Z+
    11f6:	34 91       	lpm	r19, Z
    11f8:	3b 87       	std	Y+11, r19	; 0x0b
    11fa:	2a 87       	std	Y+10, r18	; 0x0a
    11fc:	63 2f       	mov	r22, r19
    11fe:	6f 70       	andi	r22, 0x0F	; 15
    1200:	70 e0       	ldi	r23, 0x00	; 0
    1202:	90 e0       	ldi	r25, 0x00	; 0
    1204:	80 e0       	ldi	r24, 0x00	; 0
    1206:	1f 92       	push	r1
    1208:	1f 92       	push	r1
    120a:	1f 92       	push	r1
    120c:	3f e1       	ldi	r19, 0x1F	; 31
    120e:	3f 93       	push	r19
    1210:	a1 2c       	mov	r10, r1
    1212:	b1 2c       	mov	r11, r1
    1214:	65 01       	movw	r12, r10
    1216:	1f e0       	ldi	r17, 0x0F	; 15
    1218:	e1 2e       	mov	r14, r17
    121a:	f1 2c       	mov	r15, r1
    121c:	00 e0       	ldi	r16, 0x00	; 0
    121e:	10 e0       	ldi	r17, 0x00	; 0
    1220:	20 e0       	ldi	r18, 0x00	; 0
    1222:	30 e0       	ldi	r19, 0x00	; 0
    1224:	a9 01       	movw	r20, r18
    1226:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <map(long, long, long, long, long)>
    122a:	69 87       	std	Y+9, r22	; 0x09
    122c:	6a 85       	ldd	r22, Y+10	; 0x0a
    122e:	7b 85       	ldd	r23, Y+11	; 0x0b
    1230:	34 e0       	ldi	r19, 0x04	; 4
    1232:	76 95       	lsr	r23
    1234:	67 95       	ror	r22
    1236:	3a 95       	dec	r19
    1238:	e1 f7       	brne	.-8      	; 0x1232 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)+0xe2>
    123a:	6f 70       	andi	r22, 0x0F	; 15
    123c:	70 e0       	ldi	r23, 0x00	; 0
    123e:	90 e0       	ldi	r25, 0x00	; 0
    1240:	80 e0       	ldi	r24, 0x00	; 0
    1242:	1f 92       	push	r1
    1244:	1f 92       	push	r1
    1246:	1f 92       	push	r1
    1248:	2f e3       	ldi	r18, 0x3F	; 63
    124a:	2f 93       	push	r18
    124c:	20 e0       	ldi	r18, 0x00	; 0
    124e:	30 e0       	ldi	r19, 0x00	; 0
    1250:	a9 01       	movw	r20, r18
    1252:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <map(long, long, long, long, long)>
    1256:	6c 87       	std	Y+12, r22	; 0x0c
    1258:	3a 85       	ldd	r19, Y+10	; 0x0a
    125a:	3f 70       	andi	r19, 0x0F	; 15
    125c:	63 2f       	mov	r22, r19
    125e:	70 e0       	ldi	r23, 0x00	; 0
    1260:	90 e0       	ldi	r25, 0x00	; 0
    1262:	80 e0       	ldi	r24, 0x00	; 0
    1264:	1f 92       	push	r1
    1266:	1f 92       	push	r1
    1268:	1f 92       	push	r1
    126a:	2f e1       	ldi	r18, 0x1F	; 31
    126c:	2f 93       	push	r18
    126e:	20 e0       	ldi	r18, 0x00	; 0
    1270:	30 e0       	ldi	r19, 0x00	; 0
    1272:	a9 01       	movw	r20, r18
    1274:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <map(long, long, long, long, long)>
    1278:	e0 91 82 0a 	lds	r30, 0x0A82	; 0x800a82 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)::RGB_bmp_fixed>
    127c:	f0 91 83 0a 	lds	r31, 0x0A83	; 0x800a83 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)::RGB_bmp_fixed+0x1>
    1280:	e2 0d       	add	r30, r2
    1282:	f3 1d       	adc	r31, r3
    1284:	70 e0       	ldi	r23, 0x00	; 0
    1286:	76 2f       	mov	r23, r22
    1288:	66 27       	eor	r22, r22
    128a:	77 0f       	add	r23, r23
    128c:	77 0f       	add	r23, r23
    128e:	77 0f       	add	r23, r23
    1290:	2c 85       	ldd	r18, Y+12	; 0x0c
    1292:	30 e2       	ldi	r19, 0x20	; 32
    1294:	23 9f       	mul	r18, r19
    1296:	c0 01       	movw	r24, r0
    1298:	11 24       	eor	r1, r1
    129a:	68 0f       	add	r22, r24
    129c:	79 1f       	adc	r23, r25
    129e:	39 85       	ldd	r19, Y+9	; 0x09
    12a0:	63 0f       	add	r22, r19
    12a2:	71 1d       	adc	r23, r1
    12a4:	71 83       	std	Z+1, r23	; 0x01
    12a6:	60 83       	st	Z, r22
    12a8:	8f ef       	ldi	r24, 0xFF	; 255
    12aa:	88 1a       	sub	r8, r24
    12ac:	98 0a       	sbc	r9, r24
    12ae:	0f b6       	in	r0, 0x3f	; 63
    12b0:	f8 94       	cli
    12b2:	de bf       	out	0x3e, r29	; 62
    12b4:	0f be       	out	0x3f, r0	; 63
    12b6:	cd bf       	out	0x3d, r28	; 61
    12b8:	90 cf       	rjmp	.-224    	; 0x11da <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)+0x8a>
    12ba:	20 91 82 0a 	lds	r18, 0x0A82	; 0x800a82 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)::RGB_bmp_fixed>
    12be:	30 91 83 0a 	lds	r19, 0x0A83	; 0x800a83 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)::RGB_bmp_fixed+0x1>
    12c2:	73 01       	movw	r14, r6
    12c4:	82 01       	movw	r16, r4
    12c6:	4d 81       	ldd	r20, Y+5	; 0x05
    12c8:	5e 81       	ldd	r21, Y+6	; 0x06
    12ca:	6b 81       	ldd	r22, Y+3	; 0x03
    12cc:	7c 81       	ldd	r23, Y+4	; 0x04
    12ce:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    12d2:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    12d6:	0e 94 d0 3a 	call	0x75a0	; 0x75a0 <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)>
    12da:	2c 96       	adiw	r28, 0x0c	; 12
    12dc:	0f b6       	in	r0, 0x3f	; 63
    12de:	f8 94       	cli
    12e0:	de bf       	out	0x3e, r29	; 62
    12e2:	0f be       	out	0x3f, r0	; 63
    12e4:	cd bf       	out	0x3d, r28	; 61
    12e6:	df 91       	pop	r29
    12e8:	cf 91       	pop	r28
    12ea:	1f 91       	pop	r17
    12ec:	0f 91       	pop	r16
    12ee:	ff 90       	pop	r15
    12f0:	ef 90       	pop	r14
    12f2:	df 90       	pop	r13
    12f4:	cf 90       	pop	r12
    12f6:	bf 90       	pop	r11
    12f8:	af 90       	pop	r10
    12fa:	9f 90       	pop	r9
    12fc:	8f 90       	pop	r8
    12fe:	7f 90       	pop	r7
    1300:	6f 90       	pop	r6
    1302:	5f 90       	pop	r5
    1304:	4f 90       	pop	r4
    1306:	3f 90       	pop	r3
    1308:	2f 90       	pop	r2
    130a:	08 95       	ret

0000130c <display_rgbBitmap(unsigned char)>:
    130c:	0f 93       	push	r16
    130e:	1f 93       	push	r17
    1310:	90 e8       	ldi	r25, 0x80	; 128
    1312:	89 9f       	mul	r24, r25
    1314:	a0 01       	movw	r20, r0
    1316:	11 24       	eor	r1, r1
    1318:	48 52       	subi	r20, 0x28	; 40
    131a:	5f 4f       	sbci	r21, 0xFF	; 255
    131c:	60 91 76 0a 	lds	r22, 0x0A76	; 0x800a76 <display_rgbBitmap(unsigned char)::bmy>
    1320:	70 91 77 0a 	lds	r23, 0x0A77	; 0x800a77 <display_rgbBitmap(unsigned char)::bmy+0x1>
    1324:	08 e0       	ldi	r16, 0x08	; 8
    1326:	10 e0       	ldi	r17, 0x00	; 0
    1328:	28 e0       	ldi	r18, 0x08	; 8
    132a:	30 e0       	ldi	r19, 0x00	; 0
    132c:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <display_rgbBitmap(unsigned char)::bmx>
    1330:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <display_rgbBitmap(unsigned char)::bmx+0x1>
    1334:	0d df       	rcall	.-486    	; 0x1150 <fixdrawRGBBitmap(int, int, unsigned int const*, int, int)>
    1336:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <display_rgbBitmap(unsigned char)::bmx>
    133a:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <display_rgbBitmap(unsigned char)::bmx+0x1>
    133e:	08 96       	adiw	r24, 0x08	; 8
    1340:	86 31       	cpi	r24, 0x16	; 22
    1342:	91 05       	cpc	r25, r1
    1344:	28 f5       	brcc	.+74     	; 0x1390 <display_rgbBitmap(unsigned char)+0x84>
    1346:	90 93 79 0a 	sts	0x0A79, r25	; 0x800a79 <display_rgbBitmap(unsigned char)::bmx+0x1>
    134a:	80 93 78 0a 	sts	0x0A78, r24	; 0x800a78 <display_rgbBitmap(unsigned char)::bmx>
    134e:	80 91 78 0a 	lds	r24, 0x0A78	; 0x800a78 <display_rgbBitmap(unsigned char)::bmx>
    1352:	90 91 79 0a 	lds	r25, 0x0A79	; 0x800a79 <display_rgbBitmap(unsigned char)::bmx+0x1>
    1356:	89 2b       	or	r24, r25
    1358:	49 f4       	brne	.+18     	; 0x136c <display_rgbBitmap(unsigned char)+0x60>
    135a:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <display_rgbBitmap(unsigned char)::bmy>
    135e:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <display_rgbBitmap(unsigned char)::bmy+0x1>
    1362:	08 96       	adiw	r24, 0x08	; 8
    1364:	90 93 77 0a 	sts	0x0A77, r25	; 0x800a77 <display_rgbBitmap(unsigned char)::bmy+0x1>
    1368:	80 93 76 0a 	sts	0x0A76, r24	; 0x800a76 <display_rgbBitmap(unsigned char)::bmy>
    136c:	80 91 76 0a 	lds	r24, 0x0A76	; 0x800a76 <display_rgbBitmap(unsigned char)::bmy>
    1370:	90 91 77 0a 	lds	r25, 0x0A77	; 0x800a77 <display_rgbBitmap(unsigned char)::bmy+0x1>
    1374:	47 97       	sbiw	r24, 0x17	; 23
    1376:	20 f0       	brcs	.+8      	; 0x1380 <display_rgbBitmap(unsigned char)+0x74>
    1378:	10 92 77 0a 	sts	0x0A77, r1	; 0x800a77 <display_rgbBitmap(unsigned char)::bmy+0x1>
    137c:	10 92 76 0a 	sts	0x0A76, r1	; 0x800a76 <display_rgbBitmap(unsigned char)::bmy>
    1380:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1384:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1388:	1f 91       	pop	r17
    138a:	0f 91       	pop	r16
    138c:	0c 94 6a 3e 	jmp	0x7cd4	; 0x7cd4 <FastLED_NeoMatrix::show()>
    1390:	10 92 79 0a 	sts	0x0A79, r1	; 0x800a79 <display_rgbBitmap(unsigned char)::bmx+0x1>
    1394:	10 92 78 0a 	sts	0x0A78, r1	; 0x800a78 <display_rgbBitmap(unsigned char)::bmx>
    1398:	da cf       	rjmp	.-76     	; 0x134e <display_rgbBitmap(unsigned char)+0x42>

0000139a <getRandomColorValue()>:
    139a:	24 e0       	ldi	r18, 0x04	; 4
    139c:	30 e0       	ldi	r19, 0x00	; 0
    139e:	40 e0       	ldi	r20, 0x00	; 0
    13a0:	50 e0       	ldi	r21, 0x00	; 0
    13a2:	61 e0       	ldi	r22, 0x01	; 1
    13a4:	70 e0       	ldi	r23, 0x00	; 0
    13a6:	80 e0       	ldi	r24, 0x00	; 0
    13a8:	90 e0       	ldi	r25, 0x00	; 0
    13aa:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    13ae:	62 30       	cpi	r22, 0x02	; 2
    13b0:	71 05       	cpc	r23, r1
    13b2:	31 f0       	breq	.+12     	; 0x13c0 <getRandomColorValue()+0x26>
    13b4:	63 30       	cpi	r22, 0x03	; 3
    13b6:	71 05       	cpc	r23, r1
    13b8:	31 f0       	breq	.+12     	; 0x13c6 <getRandomColorValue()+0x2c>
    13ba:	90 e0       	ldi	r25, 0x00	; 0
    13bc:	80 e0       	ldi	r24, 0x00	; 0
    13be:	08 95       	ret
    13c0:	8f e7       	ldi	r24, 0x7F	; 127
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	08 95       	ret
    13c6:	8f ef       	ldi	r24, 0xFF	; 255
    13c8:	90 e0       	ldi	r25, 0x00	; 0
    13ca:	08 95       	ret

000013cc <getRandomColor()>:
    13cc:	27 e0       	ldi	r18, 0x07	; 7
    13ce:	30 e0       	ldi	r19, 0x00	; 0
    13d0:	40 e0       	ldi	r20, 0x00	; 0
    13d2:	50 e0       	ldi	r21, 0x00	; 0
    13d4:	61 e0       	ldi	r22, 0x01	; 1
    13d6:	70 e0       	ldi	r23, 0x00	; 0
    13d8:	80 e0       	ldi	r24, 0x00	; 0
    13da:	90 e0       	ldi	r25, 0x00	; 0
    13dc:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    13e0:	61 50       	subi	r22, 0x01	; 1
    13e2:	71 09       	sbc	r23, r1
    13e4:	67 30       	cpi	r22, 0x07	; 7
    13e6:	71 05       	cpc	r23, r1
    13e8:	40 f4       	brcc	.+16     	; 0x13fa <getRandomColor()+0x2e>
    13ea:	66 0f       	add	r22, r22
    13ec:	77 1f       	adc	r23, r23
    13ee:	fb 01       	movw	r30, r22
    13f0:	ef 59       	subi	r30, 0x9F	; 159
    13f2:	fc 4f       	sbci	r31, 0xFC	; 252
    13f4:	80 81       	ld	r24, Z
    13f6:	91 81       	ldd	r25, Z+1	; 0x01
    13f8:	08 95       	ret
    13fa:	90 e0       	ldi	r25, 0x00	; 0
    13fc:	80 e0       	ldi	r24, 0x00	; 0
    13fe:	08 95       	ret

00001400 <getRandomColorIncludingBlack()>:
    1400:	29 e0       	ldi	r18, 0x09	; 9
    1402:	30 e0       	ldi	r19, 0x00	; 0
    1404:	40 e0       	ldi	r20, 0x00	; 0
    1406:	50 e0       	ldi	r21, 0x00	; 0
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	70 e0       	ldi	r23, 0x00	; 0
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    1414:	61 50       	subi	r22, 0x01	; 1
    1416:	71 09       	sbc	r23, r1
    1418:	67 30       	cpi	r22, 0x07	; 7
    141a:	71 05       	cpc	r23, r1
    141c:	40 f4       	brcc	.+16     	; 0x142e <getRandomColorIncludingBlack()+0x2e>
    141e:	66 0f       	add	r22, r22
    1420:	77 1f       	adc	r23, r23
    1422:	fb 01       	movw	r30, r22
    1424:	ed 5a       	subi	r30, 0xAD	; 173
    1426:	fc 4f       	sbci	r31, 0xFC	; 252
    1428:	80 81       	ld	r24, Z
    142a:	91 81       	ldd	r25, Z+1	; 0x01
    142c:	08 95       	ret
    142e:	90 e0       	ldi	r25, 0x00	; 0
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	08 95       	ret

00001434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>:
    1434:	ef 92       	push	r14
    1436:	ff 92       	push	r15
    1438:	0f 93       	push	r16
    143a:	1f 93       	push	r17
    143c:	cf 93       	push	r28
    143e:	df 93       	push	r29
    1440:	7c 01       	movw	r14, r24
    1442:	16 2f       	mov	r17, r22
    1444:	ea 01       	movw	r28, r20
    1446:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    144a:	81 11       	cpse	r24, r1
    144c:	12 c0       	rjmp	.+36     	; 0x1472 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x3e>
    144e:	61 e0       	ldi	r22, 0x01	; 1
    1450:	8a ed       	ldi	r24, 0xDA	; 218
    1452:	90 e1       	ldi	r25, 0x10	; 16
    1454:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1458:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    145c:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1460:	10 93 c6 0a 	sts	0x0AC6, r17	; 0x800ac6 <nextSongPart>
    1464:	81 e0       	ldi	r24, 0x01	; 1
    1466:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    146a:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    146e:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <progBlingBlingColoring_rounds>
    1472:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
    1476:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    147a:	89 2b       	or	r24, r25
    147c:	49 f4       	brne	.+18     	; 0x1490 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x5c>
    147e:	8d df       	rcall	.-230    	; 0x139a <getRandomColorValue()>
    1480:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
    1484:	8a df       	rcall	.-236    	; 0x139a <getRandomColorValue()>
    1486:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
    148a:	87 df       	rcall	.-242    	; 0x139a <getRandomColorValue()>
    148c:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
    1490:	10 91 73 0a 	lds	r17, 0x0A73	; 0x800a73 <b>
    1494:	00 91 74 0a 	lds	r16, 0x0A74	; 0x800a74 <g>
    1498:	f0 90 75 0a 	lds	r15, 0x0A75	; 0x800a75 <r>
    149c:	26 e1       	ldi	r18, 0x16	; 22
    149e:	31 e0       	ldi	r19, 0x01	; 1
    14a0:	40 e0       	ldi	r20, 0x00	; 0
    14a2:	50 e0       	ldi	r21, 0x00	; 0
    14a4:	60 e0       	ldi	r22, 0x00	; 0
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	cb 01       	movw	r24, r22
    14aa:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    14ae:	fb 01       	movw	r30, r22
    14b0:	ee 0f       	add	r30, r30
    14b2:	ff 1f       	adc	r31, r31
    14b4:	e6 0f       	add	r30, r22
    14b6:	f7 1f       	adc	r31, r23
    14b8:	e5 52       	subi	r30, 0x25	; 37
    14ba:	f5 4f       	sbci	r31, 0xF5	; 245
    14bc:	f0 82       	st	Z, r15
    14be:	01 83       	std	Z+1, r16	; 0x01
    14c0:	12 83       	std	Z+2, r17	; 0x02
    14c2:	23 e0       	ldi	r18, 0x03	; 3
    14c4:	30 e0       	ldi	r19, 0x00	; 0
    14c6:	40 e0       	ldi	r20, 0x00	; 0
    14c8:	50 e0       	ldi	r21, 0x00	; 0
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	70 e0       	ldi	r23, 0x00	; 0
    14ce:	cb 01       	movw	r24, r22
    14d0:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    14d4:	61 30       	cpi	r22, 0x01	; 1
    14d6:	71 05       	cpc	r23, r1
    14d8:	81 05       	cpc	r24, r1
    14da:	91 05       	cpc	r25, r1
    14dc:	99 f4       	brne	.+38     	; 0x1504 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0xd0>
    14de:	26 e1       	ldi	r18, 0x16	; 22
    14e0:	31 e0       	ldi	r19, 0x01	; 1
    14e2:	40 e0       	ldi	r20, 0x00	; 0
    14e4:	50 e0       	ldi	r21, 0x00	; 0
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	70 e0       	ldi	r23, 0x00	; 0
    14ea:	cb 01       	movw	r24, r22
    14ec:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    14f0:	fb 01       	movw	r30, r22
    14f2:	ee 0f       	add	r30, r30
    14f4:	ff 1f       	adc	r31, r31
    14f6:	e6 0f       	add	r30, r22
    14f8:	f7 1f       	adc	r31, r23
    14fa:	e5 52       	subi	r30, 0x25	; 37
    14fc:	f5 4f       	sbci	r31, 0xF5	; 245
    14fe:	10 82       	st	Z, r1
    1500:	11 82       	std	Z+1, r1	; 0x01
    1502:	12 82       	std	Z+2, r1	; 0x02
    1504:	8a ed       	ldi	r24, 0xDA	; 218
    1506:	90 e1       	ldi	r25, 0x10	; 16
    1508:	12 de       	rcall	.-988    	; 0x112e <CFastLED::show()>
    150a:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    150e:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    1512:	8c 17       	cp	r24, r28
    1514:	9d 07       	cpc	r25, r29
    1516:	d0 f0       	brcs	.+52     	; 0x154c <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
    1518:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    151c:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    1520:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
    1524:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    1528:	01 96       	adiw	r24, 0x01	; 1
    152a:	84 30       	cpi	r24, 0x04	; 4
    152c:	91 05       	cpc	r25, r1
    152e:	a9 f0       	breq	.+42     	; 0x155a <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x126>
    1530:	90 93 72 0a 	sts	0x0A72, r25	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    1534:	80 93 71 0a 	sts	0x0A71, r24	; 0x800a71 <progBlingBlingColoring_rounds>
    1538:	80 91 71 0a 	lds	r24, 0x0A71	; 0x800a71 <progBlingBlingColoring_rounds>
    153c:	90 91 72 0a 	lds	r25, 0x0A72	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	91 05       	cpc	r25, r1
    1544:	69 f4       	brne	.+26     	; 0x1560 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x12c>
    1546:	29 df       	rcall	.-430    	; 0x139a <getRandomColorValue()>
    1548:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
    154c:	df 91       	pop	r29
    154e:	cf 91       	pop	r28
    1550:	1f 91       	pop	r17
    1552:	0f 91       	pop	r16
    1554:	ff 90       	pop	r15
    1556:	ef 90       	pop	r14
    1558:	08 95       	ret
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	e8 cf       	rjmp	.-48     	; 0x1530 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0xfc>
    1560:	82 30       	cpi	r24, 0x02	; 2
    1562:	91 05       	cpc	r25, r1
    1564:	21 f4       	brne	.+8      	; 0x156e <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x13a>
    1566:	19 df       	rcall	.-462    	; 0x139a <getRandomColorValue()>
    1568:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
    156c:	ef cf       	rjmp	.-34     	; 0x154c <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
    156e:	03 97       	sbiw	r24, 0x03	; 3
    1570:	69 f7       	brne	.-38     	; 0x154c <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>
    1572:	13 df       	rcall	.-474    	; 0x139a <getRandomColorValue()>
    1574:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
    1578:	e9 cf       	rjmp	.-46     	; 0x154c <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)+0x118>

0000157a <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>:
    157a:	cf 92       	push	r12
    157c:	df 92       	push	r13
    157e:	ef 92       	push	r14
    1580:	ff 92       	push	r15
    1582:	0f 93       	push	r16
    1584:	1f 93       	push	r17
    1586:	cf 93       	push	r28
    1588:	df 93       	push	r29
    158a:	6c 01       	movw	r12, r24
    158c:	d6 2f       	mov	r29, r22
    158e:	14 2f       	mov	r17, r20
    1590:	c2 2f       	mov	r28, r18
    1592:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1596:	81 11       	cpse	r24, r1
    1598:	10 c0       	rjmp	.+32     	; 0x15ba <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x40>
    159a:	61 e0       	ldi	r22, 0x01	; 1
    159c:	8a ed       	ldi	r24, 0xDA	; 218
    159e:	90 e1       	ldi	r25, 0x10	; 16
    15a0:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    15a4:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    15a8:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    15ac:	10 93 c6 0a 	sts	0x0AC6, r17	; 0x800ac6 <nextSongPart>
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    15b6:	d0 93 b6 0a 	sts	0x0AB6, r29	; 0x800ab6 <actualAnzahlLEDs>
    15ba:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    15be:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    15c2:	8e 15       	cp	r24, r14
    15c4:	9f 05       	cpc	r25, r15
    15c6:	90 f0       	brcs	.+36     	; 0x15ec <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
    15c8:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    15cc:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    15d0:	cc 23       	and	r28, r28
    15d2:	61 f0       	breq	.+24     	; 0x15ec <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
    15d4:	20 91 b6 0a 	lds	r18, 0x0AB6	; 0x800ab6 <actualAnzahlLEDs>
    15d8:	42 2f       	mov	r20, r18
    15da:	4c 0f       	add	r20, r28
    15dc:	55 27       	eor	r21, r21
    15de:	55 1f       	adc	r21, r21
    15e0:	04 17       	cp	r16, r20
    15e2:	15 06       	cpc	r1, r21
    15e4:	1c f0       	brlt	.+6      	; 0x15ec <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x72>
    15e6:	2c 0f       	add	r18, r28
    15e8:	20 93 b6 0a 	sts	0x0AB6, r18	; 0x800ab6 <actualAnzahlLEDs>
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	8a ed       	ldi	r24, 0xDA	; 218
    15f0:	90 e1       	ldi	r25, 0x10	; 16
    15f2:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    15f6:	8f ef       	ldi	r24, 0xFF	; 255
    15f8:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <FastLED>
    15fc:	d0 e0       	ldi	r29, 0x00	; 0
    15fe:	c0 e0       	ldi	r28, 0x00	; 0
    1600:	80 91 b6 0a 	lds	r24, 0x0AB6	; 0x800ab6 <actualAnzahlLEDs>
    1604:	8c 17       	cp	r24, r28
    1606:	1d 06       	cpc	r1, r29
    1608:	e1 f0       	breq	.+56     	; 0x1642 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0xc8>
    160a:	dc f0       	brlt	.+54     	; 0x1642 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0xc8>
    160c:	c6 de       	rcall	.-628    	; 0x139a <getRandomColorValue()>
    160e:	18 2f       	mov	r17, r24
    1610:	c4 de       	rcall	.-632    	; 0x139a <getRandomColorValue()>
    1612:	08 2f       	mov	r16, r24
    1614:	c2 de       	rcall	.-636    	; 0x139a <getRandomColorValue()>
    1616:	f8 2e       	mov	r15, r24
    1618:	26 e1       	ldi	r18, 0x16	; 22
    161a:	31 e0       	ldi	r19, 0x01	; 1
    161c:	40 e0       	ldi	r20, 0x00	; 0
    161e:	50 e0       	ldi	r21, 0x00	; 0
    1620:	60 e0       	ldi	r22, 0x00	; 0
    1622:	70 e0       	ldi	r23, 0x00	; 0
    1624:	cb 01       	movw	r24, r22
    1626:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    162a:	fb 01       	movw	r30, r22
    162c:	ee 0f       	add	r30, r30
    162e:	ff 1f       	adc	r31, r31
    1630:	e6 0f       	add	r30, r22
    1632:	f7 1f       	adc	r31, r23
    1634:	e5 52       	subi	r30, 0x25	; 37
    1636:	f5 4f       	sbci	r31, 0xF5	; 245
    1638:	f0 82       	st	Z, r15
    163a:	01 83       	std	Z+1, r16	; 0x01
    163c:	12 83       	std	Z+2, r17	; 0x02
    163e:	21 96       	adiw	r28, 0x01	; 1
    1640:	df cf       	rjmp	.-66     	; 0x1600 <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)+0x86>
    1642:	8a ed       	ldi	r24, 0xDA	; 218
    1644:	90 e1       	ldi	r25, 0x10	; 16
    1646:	df 91       	pop	r29
    1648:	cf 91       	pop	r28
    164a:	1f 91       	pop	r17
    164c:	0f 91       	pop	r16
    164e:	ff 90       	pop	r15
    1650:	ef 90       	pop	r14
    1652:	df 90       	pop	r13
    1654:	cf 90       	pop	r12
    1656:	6b cd       	rjmp	.-1322   	; 0x112e <CFastLED::show()>

00001658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>:
    1658:	ef 92       	push	r14
    165a:	ff 92       	push	r15
    165c:	0f 93       	push	r16
    165e:	f1 2c       	mov	r15, r1
    1660:	e1 2c       	mov	r14, r1
    1662:	00 e0       	ldi	r16, 0x00	; 0
    1664:	20 e0       	ldi	r18, 0x00	; 0
    1666:	89 df       	rcall	.-238    	; 0x157a <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    1668:	0f 91       	pop	r16
    166a:	ff 90       	pop	r15
    166c:	ef 90       	pop	r14
    166e:	08 95       	ret

00001670 <progFullColors(unsigned int, unsigned char, unsigned int)>:
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ff 92       	push	r15
    1676:	0f 93       	push	r16
    1678:	1f 93       	push	r17
    167a:	cf 93       	push	r28
    167c:	df 93       	push	r29
    167e:	00 d0       	rcall	.+0      	; 0x1680 <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
    1680:	1f 92       	push	r1
    1682:	cd b7       	in	r28, 0x3d	; 61
    1684:	de b7       	in	r29, 0x3e	; 62
    1686:	6c 01       	movw	r12, r24
    1688:	f6 2e       	mov	r15, r22
    168a:	8a 01       	movw	r16, r20
    168c:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1690:	81 11       	cpse	r24, r1
    1692:	12 c0       	rjmp	.+36     	; 0x16b8 <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
    1694:	61 e0       	ldi	r22, 0x01	; 1
    1696:	8a ed       	ldi	r24, 0xDA	; 218
    1698:	90 e1       	ldi	r25, 0x10	; 16
    169a:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    169e:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    16a2:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    16a6:	f0 92 c6 0a 	sts	0x0AC6, r15	; 0x800ac6 <nextSongPart>
    16aa:	81 e0       	ldi	r24, 0x01	; 1
    16ac:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    16b0:	10 93 ce 0a 	sts	0x0ACE, r17	; 0x800ace <millisCounterTimer+0x1>
    16b4:	00 93 cd 0a 	sts	0x0ACD, r16	; 0x800acd <millisCounterTimer>
    16b8:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    16bc:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    16c0:	80 17       	cp	r24, r16
    16c2:	91 07       	cpc	r25, r17
    16c4:	78 f1       	brcs	.+94     	; 0x1724 <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
    16c6:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    16ca:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    16ce:	65 de       	rcall	.-822    	; 0x139a <getRandomColorValue()>
    16d0:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
    16d4:	62 de       	rcall	.-828    	; 0x139a <getRandomColorValue()>
    16d6:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
    16da:	5f de       	rcall	.-834    	; 0x139a <getRandomColorValue()>
    16dc:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
    16e0:	90 91 75 0a 	lds	r25, 0x0A75	; 0x800a75 <r>
    16e4:	91 11       	cpse	r25, r1
    16e6:	0f c0       	rjmp	.+30     	; 0x1706 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
    16e8:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <g>
    16ec:	91 11       	cpse	r25, r1
    16ee:	0b c0       	rjmp	.+22     	; 0x1706 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
    16f0:	81 11       	cpse	r24, r1
    16f2:	09 c0       	rjmp	.+18     	; 0x1706 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
    16f4:	52 de       	rcall	.-860    	; 0x139a <getRandomColorValue()>
    16f6:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
    16fa:	4f de       	rcall	.-866    	; 0x139a <getRandomColorValue()>
    16fc:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
    1700:	4c de       	rcall	.-872    	; 0x139a <getRandomColorValue()>
    1702:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
    1706:	80 91 73 0a 	lds	r24, 0x0A73	; 0x800a73 <b>
    170a:	90 91 74 0a 	lds	r25, 0x0A74	; 0x800a74 <g>
    170e:	20 91 75 0a 	lds	r18, 0x0A75	; 0x800a75 <r>
    1712:	29 83       	std	Y+1, r18	; 0x01
    1714:	9a 83       	std	Y+2, r25	; 0x02
    1716:	8b 83       	std	Y+3, r24	; 0x03
    1718:	be 01       	movw	r22, r28
    171a:	6f 5f       	subi	r22, 0xFF	; 255
    171c:	7f 4f       	sbci	r23, 0xFF	; 255
    171e:	8a ed       	ldi	r24, 0xDA	; 218
    1720:	90 e1       	ldi	r25, 0x10	; 16
    1722:	09 dd       	rcall	.-1518   	; 0x1136 <CFastLED::showColor(CRGB const&)>
    1724:	0f 90       	pop	r0
    1726:	0f 90       	pop	r0
    1728:	0f 90       	pop	r0
    172a:	df 91       	pop	r29
    172c:	cf 91       	pop	r28
    172e:	1f 91       	pop	r17
    1730:	0f 91       	pop	r16
    1732:	ff 90       	pop	r15
    1734:	df 90       	pop	r13
    1736:	cf 90       	pop	r12
    1738:	08 95       	ret

0000173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
    173a:	af 92       	push	r10
    173c:	bf 92       	push	r11
    173e:	cf 92       	push	r12
    1740:	df 92       	push	r13
    1742:	ef 92       	push	r14
    1744:	ff 92       	push	r15
    1746:	0f 93       	push	r16
    1748:	1f 93       	push	r17
    174a:	cf 93       	push	r28
    174c:	df 93       	push	r29
    174e:	00 d0       	rcall	.+0      	; 0x1750 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
    1750:	1f 92       	push	r1
    1752:	cd b7       	in	r28, 0x3d	; 61
    1754:	de b7       	in	r29, 0x3e	; 62
    1756:	5c 01       	movw	r10, r24
    1758:	f6 2e       	mov	r15, r22
    175a:	6a 01       	movw	r12, r20
    175c:	12 2f       	mov	r17, r18
    175e:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1762:	81 11       	cpse	r24, r1
    1764:	12 c0       	rjmp	.+36     	; 0x178a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
    1766:	61 e0       	ldi	r22, 0x01	; 1
    1768:	8a ed       	ldi	r24, 0xDA	; 218
    176a:	90 e1       	ldi	r25, 0x10	; 16
    176c:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1770:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
    1774:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
    1778:	f0 92 c6 0a 	sts	0x0AC6, r15	; 0x800ac6 <nextSongPart>
    177c:	81 e0       	ldi	r24, 0x01	; 1
    177e:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1782:	d0 92 ce 0a 	sts	0x0ACE, r13	; 0x800ace <millisCounterTimer+0x1>
    1786:	c0 92 cd 0a 	sts	0x0ACD, r12	; 0x800acd <millisCounterTimer>
    178a:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    178e:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    1792:	8c 15       	cp	r24, r12
    1794:	9d 05       	cpc	r25, r13
    1796:	98 f0       	brcs	.+38     	; 0x17be <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
    1798:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    179c:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    17a0:	80 91 d0 0a 	lds	r24, 0x0AD0	; 0x800ad0 <progStroboIsBlack>
    17a4:	88 23       	and	r24, r24
    17a6:	c9 f0       	breq	.+50     	; 0x17da <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
    17a8:	19 83       	std	Y+1, r17	; 0x01
    17aa:	0a 83       	std	Y+2, r16	; 0x02
    17ac:	eb 82       	std	Y+3, r14	; 0x03
    17ae:	be 01       	movw	r22, r28
    17b0:	6f 5f       	subi	r22, 0xFF	; 255
    17b2:	7f 4f       	sbci	r23, 0xFF	; 255
    17b4:	8a ed       	ldi	r24, 0xDA	; 218
    17b6:	90 e1       	ldi	r25, 0x10	; 16
    17b8:	be dc       	rcall	.-1668   	; 0x1136 <CFastLED::showColor(CRGB const&)>
    17ba:	10 92 d0 0a 	sts	0x0AD0, r1	; 0x800ad0 <progStroboIsBlack>
    17be:	0f 90       	pop	r0
    17c0:	0f 90       	pop	r0
    17c2:	0f 90       	pop	r0
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0f 91       	pop	r16
    17cc:	ff 90       	pop	r15
    17ce:	ef 90       	pop	r14
    17d0:	df 90       	pop	r13
    17d2:	cf 90       	pop	r12
    17d4:	bf 90       	pop	r11
    17d6:	af 90       	pop	r10
    17d8:	08 95       	ret
    17da:	19 82       	std	Y+1, r1	; 0x01
    17dc:	1a 82       	std	Y+2, r1	; 0x02
    17de:	1b 82       	std	Y+3, r1	; 0x03
    17e0:	be 01       	movw	r22, r28
    17e2:	6f 5f       	subi	r22, 0xFF	; 255
    17e4:	7f 4f       	sbci	r23, 0xFF	; 255
    17e6:	8a ed       	ldi	r24, 0xDA	; 218
    17e8:	90 e1       	ldi	r25, 0x10	; 16
    17ea:	a5 dc       	rcall	.-1718   	; 0x1136 <CFastLED::showColor(CRGB const&)>
    17ec:	81 e0       	ldi	r24, 0x01	; 1
    17ee:	80 93 d0 0a 	sts	0x0AD0, r24	; 0x800ad0 <progStroboIsBlack>
    17f2:	e5 cf       	rjmp	.-54     	; 0x17be <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

000017f4 <progMatrixScanner(unsigned int, unsigned char, unsigned int)>:
    17f4:	ef 92       	push	r14
    17f6:	ff 92       	push	r15
    17f8:	0f 93       	push	r16
    17fa:	1f 93       	push	r17
    17fc:	cf 93       	push	r28
    17fe:	df 93       	push	r29
    1800:	7c 01       	movw	r14, r24
    1802:	16 2f       	mov	r17, r22
    1804:	ea 01       	movw	r28, r20
    1806:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    180a:	81 11       	cpse	r24, r1
    180c:	0e c0       	rjmp	.+28     	; 0x182a <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x36>
    180e:	61 e0       	ldi	r22, 0x01	; 1
    1810:	8a ed       	ldi	r24, 0xDA	; 218
    1812:	90 e1       	ldi	r25, 0x10	; 16
    1814:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1818:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    181c:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1820:	10 93 c6 0a 	sts	0x0AC6, r17	; 0x800ac6 <nextSongPart>
    1824:	81 e0       	ldi	r24, 0x01	; 1
    1826:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    182a:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    182e:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    1832:	8c 17       	cp	r24, r28
    1834:	9d 07       	cpc	r25, r29
    1836:	08 f4       	brcc	.+2      	; 0x183a <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x46>
    1838:	ad c0       	rjmp	.+346    	; 0x1994 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x1a0>
    183a:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    183e:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	8a ed       	ldi	r24, 0xDA	; 218
    1846:	90 e1       	ldi	r25, 0x10	; 16
    1848:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    184c:	20 91 b9 0a 	lds	r18, 0x0AB9	; 0x800ab9 <scannerGoesBack>
    1850:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    1854:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    1858:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    185c:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1860:	21 11       	cpse	r18, r1
    1862:	52 c0       	rjmp	.+164    	; 0x1908 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x114>
    1864:	6f 5f       	subi	r22, 0xFF	; 255
    1866:	7f 4f       	sbci	r23, 0xFF	; 255
    1868:	70 93 bf 0a 	sts	0x0ABF, r23	; 0x800abf <zaehler+0x1>
    186c:	60 93 be 0a 	sts	0x0ABE, r22	; 0x800abe <zaehler>
    1870:	6c 31       	cpi	r22, 0x1C	; 28
    1872:	71 05       	cpc	r23, r1
    1874:	1c f0       	brlt	.+6      	; 0x187c <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x88>
    1876:	21 e0       	ldi	r18, 0x01	; 1
    1878:	20 93 b9 0a 	sts	0x0AB9, r18	; 0x800ab9 <scannerGoesBack>
    187c:	dc 01       	movw	r26, r24
    187e:	ed 91       	ld	r30, X+
    1880:	fc 91       	ld	r31, X
    1882:	04 a0       	ldd	r0, Z+36	; 0x24
    1884:	f5 a1       	ldd	r31, Z+37	; 0x25
    1886:	e0 2d       	mov	r30, r0
    1888:	e1 2c       	mov	r14, r1
    188a:	58 ef       	ldi	r21, 0xF8	; 248
    188c:	f5 2e       	mov	r15, r21
    188e:	07 e1       	ldi	r16, 0x17	; 23
    1890:	10 e0       	ldi	r17, 0x00	; 0
    1892:	9b 01       	movw	r18, r22
    1894:	50 e0       	ldi	r21, 0x00	; 0
    1896:	40 e0       	ldi	r20, 0x00	; 0
    1898:	09 95       	icall
    189a:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    189e:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    18a2:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    18a6:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    18aa:	61 50       	subi	r22, 0x01	; 1
    18ac:	71 09       	sbc	r23, r1
    18ae:	dc 01       	movw	r26, r24
    18b0:	ed 91       	ld	r30, X+
    18b2:	fc 91       	ld	r31, X
    18b4:	04 a0       	ldd	r0, Z+36	; 0x24
    18b6:	f5 a1       	ldd	r31, Z+37	; 0x25
    18b8:	e0 2d       	mov	r30, r0
    18ba:	ee 24       	eor	r14, r14
    18bc:	ea 94       	dec	r14
    18be:	fe 2c       	mov	r15, r14
    18c0:	9b 01       	movw	r18, r22
    18c2:	50 e0       	ldi	r21, 0x00	; 0
    18c4:	40 e0       	ldi	r20, 0x00	; 0
    18c6:	09 95       	icall
    18c8:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    18cc:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    18d0:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    18d4:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    18d8:	62 50       	subi	r22, 0x02	; 2
    18da:	71 09       	sbc	r23, r1
    18dc:	dc 01       	movw	r26, r24
    18de:	ed 91       	ld	r30, X+
    18e0:	fc 91       	ld	r31, X
    18e2:	04 a0       	ldd	r0, Z+36	; 0x24
    18e4:	f5 a1       	ldd	r31, Z+37	; 0x25
    18e6:	e0 2d       	mov	r30, r0
    18e8:	e1 2c       	mov	r14, r1
    18ea:	b8 ef       	ldi	r27, 0xF8	; 248
    18ec:	fb 2e       	mov	r15, r27
    18ee:	9b 01       	movw	r18, r22
    18f0:	50 e0       	ldi	r21, 0x00	; 0
    18f2:	40 e0       	ldi	r20, 0x00	; 0
    18f4:	09 95       	icall
    18f6:	8a ed       	ldi	r24, 0xDA	; 218
    18f8:	90 e1       	ldi	r25, 0x10	; 16
    18fa:	df 91       	pop	r29
    18fc:	cf 91       	pop	r28
    18fe:	1f 91       	pop	r17
    1900:	0f 91       	pop	r16
    1902:	ff 90       	pop	r15
    1904:	ef 90       	pop	r14
    1906:	13 cc       	rjmp	.-2010   	; 0x112e <CFastLED::show()>
    1908:	61 50       	subi	r22, 0x01	; 1
    190a:	71 09       	sbc	r23, r1
    190c:	70 93 bf 0a 	sts	0x0ABF, r23	; 0x800abf <zaehler+0x1>
    1910:	60 93 be 0a 	sts	0x0ABE, r22	; 0x800abe <zaehler>
    1914:	6b 3f       	cpi	r22, 0xFB	; 251
    1916:	bf ef       	ldi	r27, 0xFF	; 255
    1918:	7b 07       	cpc	r23, r27
    191a:	14 f4       	brge	.+4      	; 0x1920 <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0x12c>
    191c:	10 92 b9 0a 	sts	0x0AB9, r1	; 0x800ab9 <scannerGoesBack>
    1920:	dc 01       	movw	r26, r24
    1922:	ed 91       	ld	r30, X+
    1924:	fc 91       	ld	r31, X
    1926:	04 a0       	ldd	r0, Z+36	; 0x24
    1928:	f5 a1       	ldd	r31, Z+37	; 0x25
    192a:	e0 2d       	mov	r30, r0
    192c:	ee 24       	eor	r14, r14
    192e:	ea 94       	dec	r14
    1930:	fe 2c       	mov	r15, r14
    1932:	07 e1       	ldi	r16, 0x17	; 23
    1934:	10 e0       	ldi	r17, 0x00	; 0
    1936:	9b 01       	movw	r18, r22
    1938:	50 e0       	ldi	r21, 0x00	; 0
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	09 95       	icall
    193e:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1942:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1946:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    194a:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    194e:	61 50       	subi	r22, 0x01	; 1
    1950:	71 09       	sbc	r23, r1
    1952:	dc 01       	movw	r26, r24
    1954:	ed 91       	ld	r30, X+
    1956:	fc 91       	ld	r31, X
    1958:	04 a0       	ldd	r0, Z+36	; 0x24
    195a:	f5 a1       	ldd	r31, Z+37	; 0x25
    195c:	e0 2d       	mov	r30, r0
    195e:	e1 2c       	mov	r14, r1
    1960:	38 ef       	ldi	r19, 0xF8	; 248
    1962:	f3 2e       	mov	r15, r19
    1964:	9b 01       	movw	r18, r22
    1966:	50 e0       	ldi	r21, 0x00	; 0
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	09 95       	icall
    196c:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1970:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1974:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    1978:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    197c:	62 50       	subi	r22, 0x02	; 2
    197e:	71 09       	sbc	r23, r1
    1980:	dc 01       	movw	r26, r24
    1982:	ed 91       	ld	r30, X+
    1984:	fc 91       	ld	r31, X
    1986:	04 a0       	ldd	r0, Z+36	; 0x24
    1988:	f5 a1       	ldd	r31, Z+37	; 0x25
    198a:	e0 2d       	mov	r30, r0
    198c:	ee 24       	eor	r14, r14
    198e:	ea 94       	dec	r14
    1990:	fe 2c       	mov	r15, r14
    1992:	ad cf       	rjmp	.-166    	; 0x18ee <progMatrixScanner(unsigned int, unsigned char, unsigned int)+0xfa>
    1994:	df 91       	pop	r29
    1996:	cf 91       	pop	r28
    1998:	1f 91       	pop	r17
    199a:	0f 91       	pop	r16
    199c:	ff 90       	pop	r15
    199e:	ef 90       	pop	r14
    19a0:	08 95       	ret

000019a2 <progMatrixScanner(unsigned int, unsigned char)>:
    19a2:	50 e0       	ldi	r21, 0x00	; 0
    19a4:	40 e0       	ldi	r20, 0x00	; 0
    19a6:	26 cf       	rjmp	.-436    	; 0x17f4 <progMatrixScanner(unsigned int, unsigned char, unsigned int)>

000019a8 <progStern(unsigned int, int, unsigned char)>:
    19a8:	8f 92       	push	r8
    19aa:	9f 92       	push	r9
    19ac:	af 92       	push	r10
    19ae:	bf 92       	push	r11
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	7c 01       	movw	r14, r24
    19c2:	eb 01       	movw	r28, r22
    19c4:	14 2f       	mov	r17, r20
    19c6:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    19ca:	81 11       	cpse	r24, r1
    19cc:	18 c0       	rjmp	.+48     	; 0x19fe <progStern(unsigned int, int, unsigned char)+0x56>
    19ce:	61 e0       	ldi	r22, 0x01	; 1
    19d0:	8a ed       	ldi	r24, 0xDA	; 218
    19d2:	90 e1       	ldi	r25, 0x10	; 16
    19d4:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    19d8:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    19dc:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    19e0:	10 93 c6 0a 	sts	0x0AC6, r17	; 0x800ac6 <nextSongPart>
    19e4:	81 e0       	ldi	r24, 0x01	; 1
    19e6:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    19ea:	f0 dc       	rcall	.-1568   	; 0x13cc <getRandomColor()>
    19ec:	90 93 d9 0a 	sts	0x0AD9, r25	; 0x800ad9 <col1+0x1>
    19f0:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <col1>
    19f4:	eb dc       	rcall	.-1578   	; 0x13cc <getRandomColor()>
    19f6:	90 93 d7 0a 	sts	0x0AD7, r25	; 0x800ad7 <col2+0x1>
    19fa:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <col2>
    19fe:	1c 16       	cp	r1, r28
    1a00:	1d 06       	cpc	r1, r29
    1a02:	ac f4       	brge	.+42     	; 0x1a2e <progStern(unsigned int, int, unsigned char)+0x86>
    1a04:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    1a08:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    1a0c:	8c 17       	cp	r24, r28
    1a0e:	9d 07       	cpc	r25, r29
    1a10:	70 f0       	brcs	.+28     	; 0x1a2e <progStern(unsigned int, int, unsigned char)+0x86>
    1a12:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    1a16:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    1a1a:	d8 dc       	rcall	.-1616   	; 0x13cc <getRandomColor()>
    1a1c:	90 93 d9 0a 	sts	0x0AD9, r25	; 0x800ad9 <col1+0x1>
    1a20:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <col1>
    1a24:	d3 dc       	rcall	.-1626   	; 0x13cc <getRandomColor()>
    1a26:	90 93 d7 0a 	sts	0x0AD7, r25	; 0x800ad7 <col2+0x1>
    1a2a:	80 93 d6 0a 	sts	0x0AD6, r24	; 0x800ad6 <col2>
    1a2e:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    1a32:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	8a 30       	cpi	r24, 0x0A	; 10
    1a3a:	91 05       	cpc	r25, r1
    1a3c:	0c f0       	brlt	.+2      	; 0x1a40 <progStern(unsigned int, int, unsigned char)+0x98>
    1a3e:	fc c0       	rjmp	.+504    	; 0x1c38 <progStern(unsigned int, int, unsigned char)+0x290>
    1a40:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    1a44:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    1a48:	60 e0       	ldi	r22, 0x00	; 0
    1a4a:	8a ed       	ldi	r24, 0xDA	; 218
    1a4c:	90 e1       	ldi	r25, 0x10	; 16
    1a4e:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1a52:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1a56:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1a5a:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    1a5e:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    1a62:	e0 90 d8 0a 	lds	r14, 0x0AD8	; 0x800ad8 <col1>
    1a66:	f0 90 d9 0a 	lds	r15, 0x0AD9	; 0x800ad9 <col1+0x1>
    1a6a:	9a 01       	movw	r18, r20
    1a6c:	26 5f       	subi	r18, 0xF6	; 246
    1a6e:	3f 4f       	sbci	r19, 0xFF	; 255
    1a70:	6a e0       	ldi	r22, 0x0A	; 10
    1a72:	a6 2e       	mov	r10, r22
    1a74:	b1 2c       	mov	r11, r1
    1a76:	b5 01       	movw	r22, r10
    1a78:	64 1b       	sub	r22, r20
    1a7a:	75 0b       	sbc	r23, r21
    1a7c:	dc 01       	movw	r26, r24
    1a7e:	ed 91       	ld	r30, X+
    1a80:	fc 91       	ld	r31, X
    1a82:	04 a0       	ldd	r0, Z+36	; 0x24
    1a84:	f5 a1       	ldd	r31, Z+37	; 0x25
    1a86:	e0 2d       	mov	r30, r0
    1a88:	06 e1       	ldi	r16, 0x16	; 22
    1a8a:	10 e0       	ldi	r17, 0x00	; 0
    1a8c:	50 e0       	ldi	r21, 0x00	; 0
    1a8e:	40 e0       	ldi	r20, 0x00	; 0
    1a90:	09 95       	icall
    1a92:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1a96:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1a9a:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    1a9e:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    1aa2:	e0 90 d6 0a 	lds	r14, 0x0AD6	; 0x800ad6 <col2>
    1aa6:	f0 90 d7 0a 	lds	r15, 0x0AD7	; 0x800ad7 <col2+0x1>
    1aaa:	9a 01       	movw	r18, r20
    1aac:	25 5f       	subi	r18, 0xF5	; 245
    1aae:	3f 4f       	sbci	r19, 0xFF	; 255
    1ab0:	7b e0       	ldi	r23, 0x0B	; 11
    1ab2:	87 2e       	mov	r8, r23
    1ab4:	91 2c       	mov	r9, r1
    1ab6:	b4 01       	movw	r22, r8
    1ab8:	64 1b       	sub	r22, r20
    1aba:	75 0b       	sbc	r23, r21
    1abc:	dc 01       	movw	r26, r24
    1abe:	ed 91       	ld	r30, X+
    1ac0:	fc 91       	ld	r31, X
    1ac2:	04 a0       	ldd	r0, Z+36	; 0x24
    1ac4:	f5 a1       	ldd	r31, Z+37	; 0x25
    1ac6:	e0 2d       	mov	r30, r0
    1ac8:	50 e0       	ldi	r21, 0x00	; 0
    1aca:	40 e0       	ldi	r20, 0x00	; 0
    1acc:	09 95       	icall
    1ace:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1ad2:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1ad6:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    1ada:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    1ade:	e0 90 d8 0a 	lds	r14, 0x0AD8	; 0x800ad8 <col1>
    1ae2:	f0 90 d9 0a 	lds	r15, 0x0AD9	; 0x800ad9 <col1+0x1>
    1ae6:	e6 e1       	ldi	r30, 0x16	; 22
    1ae8:	ce 2e       	mov	r12, r30
    1aea:	d1 2c       	mov	r13, r1
    1aec:	04 1b       	sub	r16, r20
    1aee:	15 0b       	sbc	r17, r21
    1af0:	4f 5f       	subi	r20, 0xFF	; 255
    1af2:	5f 4f       	sbci	r21, 0xFF	; 255
    1af4:	dc 01       	movw	r26, r24
    1af6:	ed 91       	ld	r30, X+
    1af8:	fc 91       	ld	r31, X
    1afa:	04 a0       	ldd	r0, Z+36	; 0x24
    1afc:	f5 a1       	ldd	r31, Z+37	; 0x25
    1afe:	e0 2d       	mov	r30, r0
    1b00:	25 e1       	ldi	r18, 0x15	; 21
    1b02:	30 e0       	ldi	r19, 0x00	; 0
    1b04:	70 e0       	ldi	r23, 0x00	; 0
    1b06:	60 e0       	ldi	r22, 0x00	; 0
    1b08:	09 95       	icall
    1b0a:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1b0e:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1b12:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    1b16:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    1b1a:	e0 90 d6 0a 	lds	r14, 0x0AD6	; 0x800ad6 <col2>
    1b1e:	f0 90 d7 0a 	lds	r15, 0x0AD7	; 0x800ad7 <col2+0x1>
    1b22:	c5 e1       	ldi	r28, 0x15	; 21
    1b24:	d0 e0       	ldi	r29, 0x00	; 0
    1b26:	8e 01       	movw	r16, r28
    1b28:	04 1b       	sub	r16, r20
    1b2a:	15 0b       	sbc	r17, r21
    1b2c:	dc 01       	movw	r26, r24
    1b2e:	ed 91       	ld	r30, X+
    1b30:	fc 91       	ld	r31, X
    1b32:	04 a0       	ldd	r0, Z+36	; 0x24
    1b34:	f5 a1       	ldd	r31, Z+37	; 0x25
    1b36:	e0 2d       	mov	r30, r0
    1b38:	25 e1       	ldi	r18, 0x15	; 21
    1b3a:	30 e0       	ldi	r19, 0x00	; 0
    1b3c:	70 e0       	ldi	r23, 0x00	; 0
    1b3e:	60 e0       	ldi	r22, 0x00	; 0
    1b40:	09 95       	icall
    1b42:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1b46:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1b4a:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    1b4e:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    1b52:	e0 90 d8 0a 	lds	r14, 0x0AD8	; 0x800ad8 <col1>
    1b56:	f0 90 d9 0a 	lds	r15, 0x0AD9	; 0x800ad9 <col1+0x1>
    1b5a:	84 01       	movw	r16, r8
    1b5c:	04 1b       	sub	r16, r20
    1b5e:	15 0b       	sbc	r17, r21
    1b60:	45 5f       	subi	r20, 0xF5	; 245
    1b62:	5f 4f       	sbci	r21, 0xFF	; 255
    1b64:	dc 01       	movw	r26, r24
    1b66:	ed 91       	ld	r30, X+
    1b68:	fc 91       	ld	r31, X
    1b6a:	04 a0       	ldd	r0, Z+36	; 0x24
    1b6c:	f5 a1       	ldd	r31, Z+37	; 0x25
    1b6e:	e0 2d       	mov	r30, r0
    1b70:	25 e1       	ldi	r18, 0x15	; 21
    1b72:	30 e0       	ldi	r19, 0x00	; 0
    1b74:	70 e0       	ldi	r23, 0x00	; 0
    1b76:	60 e0       	ldi	r22, 0x00	; 0
    1b78:	09 95       	icall
    1b7a:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1b7e:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1b82:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    1b86:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    1b8a:	e0 90 d6 0a 	lds	r14, 0x0AD6	; 0x800ad6 <col2>
    1b8e:	f0 90 d7 0a 	lds	r15, 0x0AD7	; 0x800ad7 <col2+0x1>
    1b92:	85 01       	movw	r16, r10
    1b94:	04 1b       	sub	r16, r20
    1b96:	15 0b       	sbc	r17, r21
    1b98:	46 5f       	subi	r20, 0xF6	; 246
    1b9a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b9c:	dc 01       	movw	r26, r24
    1b9e:	ed 91       	ld	r30, X+
    1ba0:	fc 91       	ld	r31, X
    1ba2:	04 a0       	ldd	r0, Z+36	; 0x24
    1ba4:	f5 a1       	ldd	r31, Z+37	; 0x25
    1ba6:	e0 2d       	mov	r30, r0
    1ba8:	25 e1       	ldi	r18, 0x15	; 21
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	70 e0       	ldi	r23, 0x00	; 0
    1bae:	60 e0       	ldi	r22, 0x00	; 0
    1bb0:	09 95       	icall
    1bb2:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1bb6:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1bba:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    1bbe:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    1bc2:	e0 90 d8 0a 	lds	r14, 0x0AD8	; 0x800ad8 <col1>
    1bc6:	f0 90 d9 0a 	lds	r15, 0x0AD9	; 0x800ad9 <col1+0x1>
    1bca:	96 01       	movw	r18, r12
    1bcc:	26 1b       	sub	r18, r22
    1bce:	37 0b       	sbc	r19, r23
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	ed 91       	ld	r30, X+
    1bd4:	fc 91       	ld	r31, X
    1bd6:	04 a0       	ldd	r0, Z+36	; 0x24
    1bd8:	f5 a1       	ldd	r31, Z+37	; 0x25
    1bda:	e0 2d       	mov	r30, r0
    1bdc:	10 e0       	ldi	r17, 0x00	; 0
    1bde:	00 e0       	ldi	r16, 0x00	; 0
    1be0:	46 e1       	ldi	r20, 0x16	; 22
    1be2:	50 e0       	ldi	r21, 0x00	; 0
    1be4:	09 95       	icall
    1be6:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1bea:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1bee:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    1bf2:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    1bf6:	e0 90 d6 0a 	lds	r14, 0x0AD6	; 0x800ad6 <col2>
    1bfa:	f0 90 d7 0a 	lds	r15, 0x0AD7	; 0x800ad7 <col2+0x1>
    1bfe:	9e 01       	movw	r18, r28
    1c00:	26 1b       	sub	r18, r22
    1c02:	37 0b       	sbc	r19, r23
    1c04:	61 50       	subi	r22, 0x01	; 1
    1c06:	71 09       	sbc	r23, r1
    1c08:	dc 01       	movw	r26, r24
    1c0a:	ed 91       	ld	r30, X+
    1c0c:	fc 91       	ld	r31, X
    1c0e:	04 a0       	ldd	r0, Z+36	; 0x24
    1c10:	f5 a1       	ldd	r31, Z+37	; 0x25
    1c12:	e0 2d       	mov	r30, r0
    1c14:	46 e1       	ldi	r20, 0x16	; 22
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	09 95       	icall
    1c1a:	8a ed       	ldi	r24, 0xDA	; 218
    1c1c:	90 e1       	ldi	r25, 0x10	; 16
    1c1e:	df 91       	pop	r29
    1c20:	cf 91       	pop	r28
    1c22:	1f 91       	pop	r17
    1c24:	0f 91       	pop	r16
    1c26:	ff 90       	pop	r15
    1c28:	ef 90       	pop	r14
    1c2a:	df 90       	pop	r13
    1c2c:	cf 90       	pop	r12
    1c2e:	bf 90       	pop	r11
    1c30:	af 90       	pop	r10
    1c32:	9f 90       	pop	r9
    1c34:	8f 90       	pop	r8
    1c36:	7b ca       	rjmp	.-2826   	; 0x112e <CFastLED::show()>
    1c38:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <zaehler+0x1>
    1c3c:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <zaehler>
    1c40:	03 cf       	rjmp	.-506    	; 0x1a48 <progStern(unsigned int, int, unsigned char)+0xa0>

00001c42 <progStern(unsigned int, unsigned char)>:
    1c42:	46 2f       	mov	r20, r22
    1c44:	70 e0       	ldi	r23, 0x00	; 0
    1c46:	60 e0       	ldi	r22, 0x00	; 0
    1c48:	af ce       	rjmp	.-674    	; 0x19a8 <progStern(unsigned int, int, unsigned char)>

00001c4a <progBlack(unsigned int, unsigned char)>:
    1c4a:	0f 93       	push	r16
    1c4c:	1f 93       	push	r17
    1c4e:	cf 93       	push	r28
    1c50:	8c 01       	movw	r16, r24
    1c52:	c6 2f       	mov	r28, r22
    1c54:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1c58:	81 11       	cpse	r24, r1
    1c5a:	0e c0       	rjmp	.+28     	; 0x1c78 <progBlack(unsigned int, unsigned char)+0x2e>
    1c5c:	61 e0       	ldi	r22, 0x01	; 1
    1c5e:	8a ed       	ldi	r24, 0xDA	; 218
    1c60:	90 e1       	ldi	r25, 0x10	; 16
    1c62:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1c66:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1c6a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1c6e:	c0 93 c6 0a 	sts	0x0AC6, r28	; 0x800ac6 <nextSongPart>
    1c72:	81 e0       	ldi	r24, 0x01	; 1
    1c74:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	8a ed       	ldi	r24, 0xDA	; 218
    1c7c:	90 e1       	ldi	r25, 0x10	; 16
    1c7e:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1c82:	8a ed       	ldi	r24, 0xDA	; 218
    1c84:	90 e1       	ldi	r25, 0x10	; 16
    1c86:	cf 91       	pop	r28
    1c88:	1f 91       	pop	r17
    1c8a:	0f 91       	pop	r16
    1c8c:	50 ca       	rjmp	.-2912   	; 0x112e <CFastLED::show()>

00001c8e <progCircles(unsigned int, unsigned char, unsigned int, bool)>:
    1c8e:	8f 92       	push	r8
    1c90:	9f 92       	push	r9
    1c92:	af 92       	push	r10
    1c94:	bf 92       	push	r11
    1c96:	cf 92       	push	r12
    1c98:	df 92       	push	r13
    1c9a:	ef 92       	push	r14
    1c9c:	ff 92       	push	r15
    1c9e:	0f 93       	push	r16
    1ca0:	1f 93       	push	r17
    1ca2:	cf 93       	push	r28
    1ca4:	df 93       	push	r29
    1ca6:	7c 01       	movw	r14, r24
    1ca8:	06 2f       	mov	r16, r22
    1caa:	ea 01       	movw	r28, r20
    1cac:	12 2f       	mov	r17, r18
    1cae:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1cb2:	81 11       	cpse	r24, r1
    1cb4:	12 c0       	rjmp	.+36     	; 0x1cda <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x4c>
    1cb6:	61 e0       	ldi	r22, 0x01	; 1
    1cb8:	8a ed       	ldi	r24, 0xDA	; 218
    1cba:	90 e1       	ldi	r25, 0x10	; 16
    1cbc:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1cc0:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1cc4:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    1cc8:	00 93 c6 0a 	sts	0x0AC6, r16	; 0x800ac6 <nextSongPart>
    1ccc:	81 e0       	ldi	r24, 0x01	; 1
    1cce:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1cd2:	d0 93 ce 0a 	sts	0x0ACE, r29	; 0x800ace <millisCounterTimer+0x1>
    1cd6:	c0 93 cd 0a 	sts	0x0ACD, r28	; 0x800acd <millisCounterTimer>
    1cda:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    1cde:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    1ce2:	8c 17       	cp	r24, r28
    1ce4:	9d 07       	cpc	r25, r29
    1ce6:	08 f4       	brcc	.+2      	; 0x1cea <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x5c>
    1ce8:	4d c0       	rjmp	.+154    	; 0x1d84 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0xf6>
    1cea:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    1cee:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    1cf2:	11 23       	and	r17, r17
    1cf4:	09 f4       	brne	.+2      	; 0x1cf8 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x6a>
    1cf6:	44 c0       	rjmp	.+136    	; 0x1d80 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0xf2>
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	8a ed       	ldi	r24, 0xDA	; 218
    1cfc:	90 e1       	ldi	r25, 0x10	; 16
    1cfe:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1d02:	64 db       	rcall	.-2360   	; 0x13cc <getRandomColor()>
    1d04:	90 93 d9 0a 	sts	0x0AD9, r25	; 0x800ad9 <col1+0x1>
    1d08:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <col1>
    1d0c:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    1d10:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    1d14:	00 91 d8 0a 	lds	r16, 0x0AD8	; 0x800ad8 <col1>
    1d18:	10 91 d9 0a 	lds	r17, 0x0AD9	; 0x800ad9 <col1+0x1>
    1d1c:	2a e0       	ldi	r18, 0x0A	; 10
    1d1e:	30 e0       	ldi	r19, 0x00	; 0
    1d20:	40 e0       	ldi	r20, 0x00	; 0
    1d22:	50 e0       	ldi	r21, 0x00	; 0
    1d24:	63 e0       	ldi	r22, 0x03	; 3
    1d26:	70 e0       	ldi	r23, 0x00	; 0
    1d28:	80 e0       	ldi	r24, 0x00	; 0
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    1d30:	4b 01       	movw	r8, r22
    1d32:	26 e1       	ldi	r18, 0x16	; 22
    1d34:	30 e0       	ldi	r19, 0x00	; 0
    1d36:	40 e0       	ldi	r20, 0x00	; 0
    1d38:	50 e0       	ldi	r21, 0x00	; 0
    1d3a:	60 e0       	ldi	r22, 0x00	; 0
    1d3c:	70 e0       	ldi	r23, 0x00	; 0
    1d3e:	cb 01       	movw	r24, r22
    1d40:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    1d44:	6b 01       	movw	r12, r22
    1d46:	25 e1       	ldi	r18, 0x15	; 21
    1d48:	30 e0       	ldi	r19, 0x00	; 0
    1d4a:	40 e0       	ldi	r20, 0x00	; 0
    1d4c:	50 e0       	ldi	r21, 0x00	; 0
    1d4e:	60 e0       	ldi	r22, 0x00	; 0
    1d50:	70 e0       	ldi	r23, 0x00	; 0
    1d52:	cb 01       	movw	r24, r22
    1d54:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    1d58:	94 01       	movw	r18, r8
    1d5a:	a6 01       	movw	r20, r12
    1d5c:	ce 01       	movw	r24, r28
    1d5e:	0e 94 8a 3a 	call	0x7514	; 0x7514 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    1d62:	8a ed       	ldi	r24, 0xDA	; 218
    1d64:	90 e1       	ldi	r25, 0x10	; 16
    1d66:	df 91       	pop	r29
    1d68:	cf 91       	pop	r28
    1d6a:	1f 91       	pop	r17
    1d6c:	0f 91       	pop	r16
    1d6e:	ff 90       	pop	r15
    1d70:	ef 90       	pop	r14
    1d72:	df 90       	pop	r13
    1d74:	cf 90       	pop	r12
    1d76:	bf 90       	pop	r11
    1d78:	af 90       	pop	r10
    1d7a:	9f 90       	pop	r9
    1d7c:	8f 90       	pop	r8
    1d7e:	d7 c9       	rjmp	.-3154   	; 0x112e <CFastLED::show()>
    1d80:	3f db       	rcall	.-2434   	; 0x1400 <getRandomColorIncludingBlack()>
    1d82:	c0 cf       	rjmp	.-128    	; 0x1d04 <progCircles(unsigned int, unsigned char, unsigned int, bool)+0x76>
    1d84:	df 91       	pop	r29
    1d86:	cf 91       	pop	r28
    1d88:	1f 91       	pop	r17
    1d8a:	0f 91       	pop	r16
    1d8c:	ff 90       	pop	r15
    1d8e:	ef 90       	pop	r14
    1d90:	df 90       	pop	r13
    1d92:	cf 90       	pop	r12
    1d94:	bf 90       	pop	r11
    1d96:	af 90       	pop	r10
    1d98:	9f 90       	pop	r9
    1d9a:	8f 90       	pop	r8
    1d9c:	08 95       	ret

00001d9e <progCircles(unsigned int, unsigned char, unsigned int)>:
    1d9e:	21 e0       	ldi	r18, 0x01	; 1
    1da0:	76 cf       	rjmp	.-276    	; 0x1c8e <progCircles(unsigned int, unsigned char, unsigned int, bool)>

00001da2 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>:
    1da2:	cf 92       	push	r12
    1da4:	df 92       	push	r13
    1da6:	ef 92       	push	r14
    1da8:	ff 92       	push	r15
    1daa:	0f 93       	push	r16
    1dac:	1f 93       	push	r17
    1dae:	cf 93       	push	r28
    1db0:	df 93       	push	r29
    1db2:	6c 01       	movw	r12, r24
    1db4:	e6 2e       	mov	r14, r22
    1db6:	ea 01       	movw	r28, r20
    1db8:	f2 2e       	mov	r15, r18
    1dba:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1dbe:	81 11       	cpse	r24, r1
    1dc0:	12 c0       	rjmp	.+36     	; 0x1de6 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x44>
    1dc2:	61 e0       	ldi	r22, 0x01	; 1
    1dc4:	8a ed       	ldi	r24, 0xDA	; 218
    1dc6:	90 e1       	ldi	r25, 0x10	; 16
    1dc8:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1dcc:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    1dd0:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    1dd4:	e0 92 c6 0a 	sts	0x0AC6, r14	; 0x800ac6 <nextSongPart>
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1dde:	d0 93 ce 0a 	sts	0x0ACE, r29	; 0x800ace <millisCounterTimer+0x1>
    1de2:	c0 93 cd 0a 	sts	0x0ACD, r28	; 0x800acd <millisCounterTimer>
    1de6:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    1dea:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    1dee:	8c 17       	cp	r24, r28
    1df0:	9d 07       	cpc	r25, r29
    1df2:	08 f4       	brcc	.+2      	; 0x1df6 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x54>
    1df4:	77 c0       	rjmp	.+238    	; 0x1ee4 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x142>
    1df6:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    1dfa:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    1dfe:	25 e1       	ldi	r18, 0x15	; 21
    1e00:	30 e0       	ldi	r19, 0x00	; 0
    1e02:	40 e0       	ldi	r20, 0x00	; 0
    1e04:	50 e0       	ldi	r21, 0x00	; 0
    1e06:	60 e0       	ldi	r22, 0x00	; 0
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    1e10:	c6 2f       	mov	r28, r22
    1e12:	25 e1       	ldi	r18, 0x15	; 21
    1e14:	30 e0       	ldi	r19, 0x00	; 0
    1e16:	40 e0       	ldi	r20, 0x00	; 0
    1e18:	50 e0       	ldi	r21, 0x00	; 0
    1e1a:	60 e0       	ldi	r22, 0x00	; 0
    1e1c:	70 e0       	ldi	r23, 0x00	; 0
    1e1e:	cb 01       	movw	r24, r22
    1e20:	0e 94 c1 4f 	call	0x9f82	; 0x9f82 <random(long, long)>
    1e24:	c6 2e       	mov	r12, r22
    1e26:	ff 20       	and	r15, r15
    1e28:	09 f4       	brne	.+2      	; 0x1e2c <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x8a>
    1e2a:	5a c0       	rjmp	.+180    	; 0x1ee0 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x13e>
    1e2c:	60 e0       	ldi	r22, 0x00	; 0
    1e2e:	8a ed       	ldi	r24, 0xDA	; 218
    1e30:	90 e1       	ldi	r25, 0x10	; 16
    1e32:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1e36:	ca da       	rcall	.-2668   	; 0x13cc <getRandomColor()>
    1e38:	90 93 d9 0a 	sts	0x0AD9, r25	; 0x800ad9 <col1+0x1>
    1e3c:	80 93 d8 0a 	sts	0x0AD8, r24	; 0x800ad8 <col1>
    1e40:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1e44:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1e48:	d1 2c       	mov	r13, r1
    1e4a:	d0 e0       	ldi	r29, 0x00	; 0
    1e4c:	e0 90 d8 0a 	lds	r14, 0x0AD8	; 0x800ad8 <col1>
    1e50:	f0 90 d9 0a 	lds	r15, 0x0AD9	; 0x800ad9 <col1+0x1>
    1e54:	96 01       	movw	r18, r12
    1e56:	21 50       	subi	r18, 0x01	; 1
    1e58:	31 09       	sbc	r19, r1
    1e5a:	be 01       	movw	r22, r28
    1e5c:	61 50       	subi	r22, 0x01	; 1
    1e5e:	71 09       	sbc	r23, r1
    1e60:	dc 01       	movw	r26, r24
    1e62:	ed 91       	ld	r30, X+
    1e64:	fc 91       	ld	r31, X
    1e66:	04 a0       	ldd	r0, Z+36	; 0x24
    1e68:	f5 a1       	ldd	r31, Z+37	; 0x25
    1e6a:	e0 2d       	mov	r30, r0
    1e6c:	06 e1       	ldi	r16, 0x16	; 22
    1e6e:	10 e0       	ldi	r17, 0x00	; 0
    1e70:	50 e0       	ldi	r21, 0x00	; 0
    1e72:	40 e0       	ldi	r20, 0x00	; 0
    1e74:	09 95       	icall
    1e76:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1e7a:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1e7e:	e0 90 d8 0a 	lds	r14, 0x0AD8	; 0x800ad8 <col1>
    1e82:	f0 90 d9 0a 	lds	r15, 0x0AD9	; 0x800ad9 <col1+0x1>
    1e86:	dc 01       	movw	r26, r24
    1e88:	ed 91       	ld	r30, X+
    1e8a:	fc 91       	ld	r31, X
    1e8c:	04 a0       	ldd	r0, Z+36	; 0x24
    1e8e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1e90:	e0 2d       	mov	r30, r0
    1e92:	96 01       	movw	r18, r12
    1e94:	50 e0       	ldi	r21, 0x00	; 0
    1e96:	40 e0       	ldi	r20, 0x00	; 0
    1e98:	be 01       	movw	r22, r28
    1e9a:	09 95       	icall
    1e9c:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    1ea0:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    1ea4:	e0 90 d8 0a 	lds	r14, 0x0AD8	; 0x800ad8 <col1>
    1ea8:	f0 90 d9 0a 	lds	r15, 0x0AD9	; 0x800ad9 <col1+0x1>
    1eac:	96 01       	movw	r18, r12
    1eae:	2f 5f       	subi	r18, 0xFF	; 255
    1eb0:	3f 4f       	sbci	r19, 0xFF	; 255
    1eb2:	be 01       	movw	r22, r28
    1eb4:	6f 5f       	subi	r22, 0xFF	; 255
    1eb6:	7f 4f       	sbci	r23, 0xFF	; 255
    1eb8:	dc 01       	movw	r26, r24
    1eba:	ed 91       	ld	r30, X+
    1ebc:	fc 91       	ld	r31, X
    1ebe:	04 a0       	ldd	r0, Z+36	; 0x24
    1ec0:	f5 a1       	ldd	r31, Z+37	; 0x25
    1ec2:	e0 2d       	mov	r30, r0
    1ec4:	50 e0       	ldi	r21, 0x00	; 0
    1ec6:	40 e0       	ldi	r20, 0x00	; 0
    1ec8:	09 95       	icall
    1eca:	8a ed       	ldi	r24, 0xDA	; 218
    1ecc:	90 e1       	ldi	r25, 0x10	; 16
    1ece:	df 91       	pop	r29
    1ed0:	cf 91       	pop	r28
    1ed2:	1f 91       	pop	r17
    1ed4:	0f 91       	pop	r16
    1ed6:	ff 90       	pop	r15
    1ed8:	ef 90       	pop	r14
    1eda:	df 90       	pop	r13
    1edc:	cf 90       	pop	r12
    1ede:	27 c9       	rjmp	.-3506   	; 0x112e <CFastLED::show()>
    1ee0:	8f da       	rcall	.-2786   	; 0x1400 <getRandomColorIncludingBlack()>
    1ee2:	aa cf       	rjmp	.-172    	; 0x1e38 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)+0x96>
    1ee4:	df 91       	pop	r29
    1ee6:	cf 91       	pop	r28
    1ee8:	1f 91       	pop	r17
    1eea:	0f 91       	pop	r16
    1eec:	ff 90       	pop	r15
    1eee:	ef 90       	pop	r14
    1ef0:	df 90       	pop	r13
    1ef2:	cf 90       	pop	r12
    1ef4:	08 95       	ret

00001ef6 <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    1ef6:	21 e0       	ldi	r18, 0x01	; 1
    1ef8:	54 cf       	rjmp	.-344    	; 0x1da2 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>

00001efa <progMovingLines(unsigned int, unsigned char)>:
    1efa:	cf 92       	push	r12
    1efc:	df 92       	push	r13
    1efe:	ef 92       	push	r14
    1f00:	ff 92       	push	r15
    1f02:	0f 93       	push	r16
    1f04:	1f 93       	push	r17
    1f06:	cf 93       	push	r28
    1f08:	df 93       	push	r29
    1f0a:	8c 01       	movw	r16, r24
    1f0c:	c6 2f       	mov	r28, r22
    1f0e:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1f12:	81 11       	cpse	r24, r1
    1f14:	0e c0       	rjmp	.+28     	; 0x1f32 <progMovingLines(unsigned int, unsigned char)+0x38>
    1f16:	61 e0       	ldi	r22, 0x01	; 1
    1f18:	8a ed       	ldi	r24, 0xDA	; 218
    1f1a:	90 e1       	ldi	r25, 0x10	; 16
    1f1c:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1f20:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1f24:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1f28:	c0 93 c6 0a 	sts	0x0AC6, r28	; 0x800ac6 <nextSongPart>
    1f2c:	81 e0       	ldi	r24, 0x01	; 1
    1f2e:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    1f32:	60 e0       	ldi	r22, 0x00	; 0
    1f34:	8a ed       	ldi	r24, 0xDA	; 218
    1f36:	90 e1       	ldi	r25, 0x10	; 16
    1f38:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    1f3c:	80 91 b7 0a 	lds	r24, 0x0AB7	; 0x800ab7 <stage>
    1f40:	90 91 b8 0a 	lds	r25, 0x0AB8	; 0x800ab8 <stage+0x1>
    1f44:	82 30       	cpi	r24, 0x02	; 2
    1f46:	91 05       	cpc	r25, r1
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <progMovingLines(unsigned int, unsigned char)+0x52>
    1f4a:	59 c0       	rjmp	.+178    	; 0x1ffe <progMovingLines(unsigned int, unsigned char)+0x104>
    1f4c:	7c f4       	brge	.+30     	; 0x1f6c <progMovingLines(unsigned int, unsigned char)+0x72>
    1f4e:	00 97       	sbiw	r24, 0x00	; 0
    1f50:	39 f1       	breq	.+78     	; 0x1fa0 <progMovingLines(unsigned int, unsigned char)+0xa6>
    1f52:	01 97       	sbiw	r24, 0x01	; 1
    1f54:	e1 f1       	breq	.+120    	; 0x1fce <progMovingLines(unsigned int, unsigned char)+0xd4>
    1f56:	8a ed       	ldi	r24, 0xDA	; 218
    1f58:	90 e1       	ldi	r25, 0x10	; 16
    1f5a:	df 91       	pop	r29
    1f5c:	cf 91       	pop	r28
    1f5e:	1f 91       	pop	r17
    1f60:	0f 91       	pop	r16
    1f62:	ff 90       	pop	r15
    1f64:	ef 90       	pop	r14
    1f66:	df 90       	pop	r13
    1f68:	cf 90       	pop	r12
    1f6a:	e1 c8       	rjmp	.-3646   	; 0x112e <CFastLED::show()>
    1f6c:	84 30       	cpi	r24, 0x04	; 4
    1f6e:	91 05       	cpc	r25, r1
    1f70:	09 f4       	brne	.+2      	; 0x1f74 <progMovingLines(unsigned int, unsigned char)+0x7a>
    1f72:	9a c0       	rjmp	.+308    	; 0x20a8 <progMovingLines(unsigned int, unsigned char)+0x1ae>
    1f74:	0c f4       	brge	.+2      	; 0x1f78 <progMovingLines(unsigned int, unsigned char)+0x7e>
    1f76:	72 c0       	rjmp	.+228    	; 0x205c <progMovingLines(unsigned int, unsigned char)+0x162>
    1f78:	05 97       	sbiw	r24, 0x05	; 5
    1f7a:	69 f7       	brne	.-38     	; 0x1f56 <progMovingLines(unsigned int, unsigned char)+0x5c>
    1f7c:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    1f80:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    1f84:	01 97       	sbiw	r24, 0x01	; 1
    1f86:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    1f8a:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    1f8e:	18 16       	cp	r1, r24
    1f90:	19 06       	cpc	r1, r25
    1f92:	0c f4       	brge	.+2      	; 0x1f96 <progMovingLines(unsigned int, unsigned char)+0x9c>
    1f94:	9d c0       	rjmp	.+314    	; 0x20d0 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1f96:	10 92 b8 0a 	sts	0x0AB8, r1	; 0x800ab8 <stage+0x1>
    1f9a:	10 92 b7 0a 	sts	0x0AB7, r1	; 0x800ab7 <stage>
    1f9e:	12 c0       	rjmp	.+36     	; 0x1fc4 <progMovingLines(unsigned int, unsigned char)+0xca>
    1fa0:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    1fa4:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    1fa8:	01 96       	adiw	r24, 0x01	; 1
    1faa:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    1fae:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    1fb2:	4a 97       	sbiw	r24, 0x1a	; 26
    1fb4:	0c f4       	brge	.+2      	; 0x1fb8 <progMovingLines(unsigned int, unsigned char)+0xbe>
    1fb6:	61 c0       	rjmp	.+194    	; 0x207a <progMovingLines(unsigned int, unsigned char)+0x180>
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	90 e0       	ldi	r25, 0x00	; 0
    1fbc:	90 93 b8 0a 	sts	0x0AB8, r25	; 0x800ab8 <stage+0x1>
    1fc0:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <stage>
    1fc4:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <zaehler+0x1>
    1fc8:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <zaehler>
    1fcc:	c4 cf       	rjmp	.-120    	; 0x1f56 <progMovingLines(unsigned int, unsigned char)+0x5c>
    1fce:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    1fd2:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    1fdc:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    1fe0:	0c 97       	sbiw	r24, 0x0c	; 12
    1fe2:	14 f1       	brlt	.+68     	; 0x2028 <progMovingLines(unsigned int, unsigned char)+0x12e>
    1fe4:	82 e0       	ldi	r24, 0x02	; 2
    1fe6:	90 e0       	ldi	r25, 0x00	; 0
    1fe8:	90 93 b8 0a 	sts	0x0AB8, r25	; 0x800ab8 <stage+0x1>
    1fec:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <stage>
    1ff0:	8c e0       	ldi	r24, 0x0C	; 12
    1ff2:	90 e0       	ldi	r25, 0x00	; 0
    1ff4:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    1ff8:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    1ffc:	ac cf       	rjmp	.-168    	; 0x1f56 <progMovingLines(unsigned int, unsigned char)+0x5c>
    1ffe:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    2002:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    2006:	01 97       	sbiw	r24, 0x01	; 1
    2008:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    200c:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    2010:	18 16       	cp	r1, r24
    2012:	19 06       	cpc	r1, r25
    2014:	4c f0       	brlt	.+18     	; 0x2028 <progMovingLines(unsigned int, unsigned char)+0x12e>
    2016:	83 e0       	ldi	r24, 0x03	; 3
    2018:	90 e0       	ldi	r25, 0x00	; 0
    201a:	90 93 b8 0a 	sts	0x0AB8, r25	; 0x800ab8 <stage+0x1>
    201e:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <stage>
    2022:	89 e1       	ldi	r24, 0x19	; 25
    2024:	90 e0       	ldi	r25, 0x00	; 0
    2026:	e6 cf       	rjmp	.-52     	; 0x1ff4 <progMovingLines(unsigned int, unsigned char)+0xfa>
    2028:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    202c:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    2030:	e8 81       	ld	r30, Y
    2032:	f9 81       	ldd	r31, Y+1	; 0x01
    2034:	c4 a0       	ldd	r12, Z+36	; 0x24
    2036:	d5 a0       	ldd	r13, Z+37	; 0x25
    2038:	c9 d9       	rcall	.-3182   	; 0x13cc <getRandomColor()>
    203a:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    203e:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    2042:	06 e1       	ldi	r16, 0x16	; 22
    2044:	10 e0       	ldi	r17, 0x00	; 0
    2046:	04 1b       	sub	r16, r20
    2048:	15 0b       	sbc	r17, r21
    204a:	7c 01       	movw	r14, r24
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	20 e0       	ldi	r18, 0x00	; 0
    2050:	69 e1       	ldi	r22, 0x19	; 25
    2052:	70 e0       	ldi	r23, 0x00	; 0
    2054:	ce 01       	movw	r24, r28
    2056:	f6 01       	movw	r30, r12
    2058:	09 95       	icall
    205a:	7d cf       	rjmp	.-262    	; 0x1f56 <progMovingLines(unsigned int, unsigned char)+0x5c>
    205c:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    2060:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    2064:	01 97       	sbiw	r24, 0x01	; 1
    2066:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    206a:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    206e:	18 16       	cp	r1, r24
    2070:	19 06       	cpc	r1, r25
    2072:	1c f0       	brlt	.+6      	; 0x207a <progMovingLines(unsigned int, unsigned char)+0x180>
    2074:	84 e0       	ldi	r24, 0x04	; 4
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	a1 cf       	rjmp	.-190    	; 0x1fbc <progMovingLines(unsigned int, unsigned char)+0xc2>
    207a:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    207e:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    2082:	e8 81       	ld	r30, Y
    2084:	f9 81       	ldd	r31, Y+1	; 0x01
    2086:	c4 a0       	ldd	r12, Z+36	; 0x24
    2088:	d5 a0       	ldd	r13, Z+37	; 0x25
    208a:	a0 d9       	rcall	.-3264   	; 0x13cc <getRandomColor()>
    208c:	60 91 be 0a 	lds	r22, 0x0ABE	; 0x800abe <zaehler>
    2090:	70 91 bf 0a 	lds	r23, 0x0ABF	; 0x800abf <zaehler+0x1>
    2094:	29 e1       	ldi	r18, 0x19	; 25
    2096:	30 e0       	ldi	r19, 0x00	; 0
    2098:	26 1b       	sub	r18, r22
    209a:	37 0b       	sbc	r19, r23
    209c:	7c 01       	movw	r14, r24
    209e:	06 e1       	ldi	r16, 0x16	; 22
    20a0:	10 e0       	ldi	r17, 0x00	; 0
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	40 e0       	ldi	r20, 0x00	; 0
    20a6:	d6 cf       	rjmp	.-84     	; 0x2054 <progMovingLines(unsigned int, unsigned char)+0x15a>
    20a8:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    20ac:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    20b0:	01 96       	adiw	r24, 0x01	; 1
    20b2:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    20b6:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    20ba:	0b 97       	sbiw	r24, 0x0b	; 11
    20bc:	4c f0       	brlt	.+18     	; 0x20d0 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    20be:	85 e0       	ldi	r24, 0x05	; 5
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	90 93 b8 0a 	sts	0x0AB8, r25	; 0x800ab8 <stage+0x1>
    20c6:	80 93 b7 0a 	sts	0x0AB7, r24	; 0x800ab7 <stage>
    20ca:	8a e0       	ldi	r24, 0x0A	; 10
    20cc:	90 e0       	ldi	r25, 0x00	; 0
    20ce:	92 cf       	rjmp	.-220    	; 0x1ff4 <progMovingLines(unsigned int, unsigned char)+0xfa>
    20d0:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    20d4:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    20d8:	e8 81       	ld	r30, Y
    20da:	f9 81       	ldd	r31, Y+1	; 0x01
    20dc:	c4 a0       	ldd	r12, Z+36	; 0x24
    20de:	d5 a0       	ldd	r13, Z+37	; 0x25
    20e0:	75 d9       	rcall	.-3350   	; 0x13cc <getRandomColor()>
    20e2:	40 91 be 0a 	lds	r20, 0x0ABE	; 0x800abe <zaehler>
    20e6:	50 91 bf 0a 	lds	r21, 0x0ABF	; 0x800abf <zaehler+0x1>
    20ea:	06 e1       	ldi	r16, 0x16	; 22
    20ec:	10 e0       	ldi	r17, 0x00	; 0
    20ee:	04 1b       	sub	r16, r20
    20f0:	15 0b       	sbc	r17, r21
    20f2:	7c 01       	movw	r14, r24
    20f4:	29 e1       	ldi	r18, 0x19	; 25
    20f6:	30 e0       	ldi	r19, 0x00	; 0
    20f8:	70 e0       	ldi	r23, 0x00	; 0
    20fa:	60 e0       	ldi	r22, 0x00	; 0
    20fc:	ab cf       	rjmp	.-170    	; 0x2054 <progMovingLines(unsigned int, unsigned char)+0x15a>

000020fe <progOutline(unsigned int, unsigned char)>:
    20fe:	cf 92       	push	r12
    2100:	df 92       	push	r13
    2102:	ef 92       	push	r14
    2104:	ff 92       	push	r15
    2106:	0f 93       	push	r16
    2108:	1f 93       	push	r17
    210a:	cf 93       	push	r28
    210c:	df 93       	push	r29
    210e:	8c 01       	movw	r16, r24
    2110:	c6 2f       	mov	r28, r22
    2112:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2116:	81 11       	cpse	r24, r1
    2118:	0e c0       	rjmp	.+28     	; 0x2136 <__stack+0x37>
    211a:	61 e0       	ldi	r22, 0x01	; 1
    211c:	8a ed       	ldi	r24, 0xDA	; 218
    211e:	90 e1       	ldi	r25, 0x10	; 16
    2120:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    2124:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    2128:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    212c:	c0 93 c6 0a 	sts	0x0AC6, r28	; 0x800ac6 <nextSongPart>
    2130:	81 e0       	ldi	r24, 0x01	; 1
    2132:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2136:	60 e0       	ldi	r22, 0x00	; 0
    2138:	8a ed       	ldi	r24, 0xDA	; 218
    213a:	90 e1       	ldi	r25, 0x10	; 16
    213c:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    2140:	80 91 b9 0a 	lds	r24, 0x0AB9	; 0x800ab9 <scannerGoesBack>
    2144:	e0 91 be 0a 	lds	r30, 0x0ABE	; 0x800abe <zaehler>
    2148:	f0 91 bf 0a 	lds	r31, 0x0ABF	; 0x800abf <zaehler+0x1>
    214c:	81 11       	cpse	r24, r1
    214e:	09 c1       	rjmp	.+530    	; 0x2362 <__stack+0x263>
    2150:	e9 30       	cpi	r30, 0x09	; 9
    2152:	f1 05       	cpc	r31, r1
    2154:	28 f5       	brcc	.+74     	; 0x21a0 <__stack+0xa1>
    2156:	e1 55       	subi	r30, 0x51	; 81
    2158:	ff 4e       	sbci	r31, 0xEF	; 239
    215a:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    215e:	b8 10       	cpse	r11, r8
    2160:	eb 10       	cpse	r14, r11
    2162:	04 11       	cpse	r16, r4
    2164:	1d 11       	cpse	r17, r13
    2166:	36 11       	cpse	r19, r6
    2168:	4f 11       	cpse	r20, r15
    216a:	67 11       	cpse	r22, r7
    216c:	80 11       	cpse	r24, r0
    216e:	99 11       	cpse	r25, r9
    2170:	c7 e6       	ldi	r28, 0x67	; 103
    2172:	d8 e0       	ldi	r29, 0x08	; 8
    2174:	03 e0       	ldi	r16, 0x03	; 3
    2176:	19 e0       	ldi	r17, 0x09	; 9
    2178:	e9 90       	ld	r14, Y+
    217a:	f9 90       	ld	r15, Y+
    217c:	0e d9       	rcall	.-3556   	; 0x139a <getRandomColorValue()>
    217e:	d8 2e       	mov	r13, r24
    2180:	0c d9       	rcall	.-3560   	; 0x139a <getRandomColorValue()>
    2182:	c8 2e       	mov	r12, r24
    2184:	0a d9       	rcall	.-3564   	; 0x139a <getRandomColorValue()>
    2186:	f7 01       	movw	r30, r14
    2188:	ee 0f       	add	r30, r30
    218a:	ff 1f       	adc	r31, r31
    218c:	ee 0d       	add	r30, r14
    218e:	ff 1d       	adc	r31, r15
    2190:	e5 52       	subi	r30, 0x25	; 37
    2192:	f5 4f       	sbci	r31, 0xF5	; 245
    2194:	80 83       	st	Z, r24
    2196:	c1 82       	std	Z+1, r12	; 0x01
    2198:	d2 82       	std	Z+2, r13	; 0x02
    219a:	0c 17       	cp	r16, r28
    219c:	1d 07       	cpc	r17, r29
    219e:	61 f7       	brne	.-40     	; 0x2178 <__stack+0x79>
    21a0:	8a ed       	ldi	r24, 0xDA	; 218
    21a2:	90 e1       	ldi	r25, 0x10	; 16
    21a4:	0e 94 97 08 	call	0x112e	; 0x112e <CFastLED::show()>
    21a8:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    21ac:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    21b0:	01 96       	adiw	r24, 0x01	; 1
    21b2:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    21b6:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    21ba:	09 97       	sbiw	r24, 0x09	; 9
    21bc:	1c f0       	brlt	.+6      	; 0x21c4 <__stack+0xc5>
    21be:	81 e0       	ldi	r24, 0x01	; 1
    21c0:	80 93 b9 0a 	sts	0x0AB9, r24	; 0x800ab9 <scannerGoesBack>
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	ff 90       	pop	r15
    21ce:	ef 90       	pop	r14
    21d0:	df 90       	pop	r13
    21d2:	cf 90       	pop	r12
    21d4:	08 95       	ret
    21d6:	cb ed       	ldi	r28, 0xDB	; 219
    21d8:	d7 e0       	ldi	r29, 0x07	; 7
    21da:	07 e6       	ldi	r16, 0x67	; 103
    21dc:	18 e0       	ldi	r17, 0x08	; 8
    21de:	e9 90       	ld	r14, Y+
    21e0:	f9 90       	ld	r15, Y+
    21e2:	db d8       	rcall	.-3658   	; 0x139a <getRandomColorValue()>
    21e4:	d8 2e       	mov	r13, r24
    21e6:	d9 d8       	rcall	.-3662   	; 0x139a <getRandomColorValue()>
    21e8:	c8 2e       	mov	r12, r24
    21ea:	d7 d8       	rcall	.-3666   	; 0x139a <getRandomColorValue()>
    21ec:	f7 01       	movw	r30, r14
    21ee:	ee 0f       	add	r30, r30
    21f0:	ff 1f       	adc	r31, r31
    21f2:	ee 0d       	add	r30, r14
    21f4:	ff 1d       	adc	r31, r15
    21f6:	e5 52       	subi	r30, 0x25	; 37
    21f8:	f5 4f       	sbci	r31, 0xF5	; 245
    21fa:	80 83       	st	Z, r24
    21fc:	c1 82       	std	Z+1, r12	; 0x01
    21fe:	d2 82       	std	Z+2, r13	; 0x02
    2200:	0c 17       	cp	r16, r28
    2202:	1d 07       	cpc	r17, r29
    2204:	61 f7       	brne	.-40     	; 0x21de <__stack+0xdf>
    2206:	cc cf       	rjmp	.-104    	; 0x21a0 <__stack+0xa1>
    2208:	cf e6       	ldi	r28, 0x6F	; 111
    220a:	d7 e0       	ldi	r29, 0x07	; 7
    220c:	0b ed       	ldi	r16, 0xDB	; 219
    220e:	17 e0       	ldi	r17, 0x07	; 7
    2210:	e9 90       	ld	r14, Y+
    2212:	f9 90       	ld	r15, Y+
    2214:	c2 d8       	rcall	.-3708   	; 0x139a <getRandomColorValue()>
    2216:	d8 2e       	mov	r13, r24
    2218:	c0 d8       	rcall	.-3712   	; 0x139a <getRandomColorValue()>
    221a:	c8 2e       	mov	r12, r24
    221c:	be d8       	rcall	.-3716   	; 0x139a <getRandomColorValue()>
    221e:	f7 01       	movw	r30, r14
    2220:	ee 0f       	add	r30, r30
    2222:	ff 1f       	adc	r31, r31
    2224:	ee 0d       	add	r30, r14
    2226:	ff 1d       	adc	r31, r15
    2228:	e5 52       	subi	r30, 0x25	; 37
    222a:	f5 4f       	sbci	r31, 0xF5	; 245
    222c:	80 83       	st	Z, r24
    222e:	c1 82       	std	Z+1, r12	; 0x01
    2230:	d2 82       	std	Z+2, r13	; 0x02
    2232:	0c 17       	cp	r16, r28
    2234:	1d 07       	cpc	r17, r29
    2236:	61 f7       	brne	.-40     	; 0x2210 <__stack+0x111>
    2238:	b3 cf       	rjmp	.-154    	; 0x21a0 <__stack+0xa1>
    223a:	c5 e2       	ldi	r28, 0x25	; 37
    223c:	d7 e0       	ldi	r29, 0x07	; 7
    223e:	0f e6       	ldi	r16, 0x6F	; 111
    2240:	17 e0       	ldi	r17, 0x07	; 7
    2242:	e9 90       	ld	r14, Y+
    2244:	f9 90       	ld	r15, Y+
    2246:	a9 d8       	rcall	.-3758   	; 0x139a <getRandomColorValue()>
    2248:	d8 2e       	mov	r13, r24
    224a:	a7 d8       	rcall	.-3762   	; 0x139a <getRandomColorValue()>
    224c:	c8 2e       	mov	r12, r24
    224e:	a5 d8       	rcall	.-3766   	; 0x139a <getRandomColorValue()>
    2250:	f7 01       	movw	r30, r14
    2252:	ee 0f       	add	r30, r30
    2254:	ff 1f       	adc	r31, r31
    2256:	ee 0d       	add	r30, r14
    2258:	ff 1d       	adc	r31, r15
    225a:	e5 52       	subi	r30, 0x25	; 37
    225c:	f5 4f       	sbci	r31, 0xF5	; 245
    225e:	80 83       	st	Z, r24
    2260:	c1 82       	std	Z+1, r12	; 0x01
    2262:	d2 82       	std	Z+2, r13	; 0x02
    2264:	0c 17       	cp	r16, r28
    2266:	1d 07       	cpc	r17, r29
    2268:	61 f7       	brne	.-40     	; 0x2242 <__stack+0x143>
    226a:	9a cf       	rjmp	.-204    	; 0x21a0 <__stack+0xa1>
    226c:	c5 ee       	ldi	r28, 0xE5	; 229
    226e:	d6 e0       	ldi	r29, 0x06	; 6
    2270:	05 e2       	ldi	r16, 0x25	; 37
    2272:	17 e0       	ldi	r17, 0x07	; 7
    2274:	e9 90       	ld	r14, Y+
    2276:	f9 90       	ld	r15, Y+
    2278:	90 d8       	rcall	.-3808   	; 0x139a <getRandomColorValue()>
    227a:	d8 2e       	mov	r13, r24
    227c:	8e d8       	rcall	.-3812   	; 0x139a <getRandomColorValue()>
    227e:	c8 2e       	mov	r12, r24
    2280:	8c d8       	rcall	.-3816   	; 0x139a <getRandomColorValue()>
    2282:	f7 01       	movw	r30, r14
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	ee 0d       	add	r30, r14
    228a:	ff 1d       	adc	r31, r15
    228c:	e5 52       	subi	r30, 0x25	; 37
    228e:	f5 4f       	sbci	r31, 0xF5	; 245
    2290:	80 83       	st	Z, r24
    2292:	c1 82       	std	Z+1, r12	; 0x01
    2294:	d2 82       	std	Z+2, r13	; 0x02
    2296:	0c 17       	cp	r16, r28
    2298:	1d 07       	cpc	r17, r29
    229a:	61 f7       	brne	.-40     	; 0x2274 <__stack+0x175>
    229c:	81 cf       	rjmp	.-254    	; 0x21a0 <__stack+0xa1>
    229e:	c9 ea       	ldi	r28, 0xA9	; 169
    22a0:	d6 e0       	ldi	r29, 0x06	; 6
    22a2:	09 91       	ld	r16, Y+
    22a4:	19 91       	ld	r17, Y+
    22a6:	79 d8       	rcall	.-3854   	; 0x139a <getRandomColorValue()>
    22a8:	f8 2e       	mov	r15, r24
    22aa:	77 d8       	rcall	.-3858   	; 0x139a <getRandomColorValue()>
    22ac:	e8 2e       	mov	r14, r24
    22ae:	75 d8       	rcall	.-3862   	; 0x139a <getRandomColorValue()>
    22b0:	f8 01       	movw	r30, r16
    22b2:	ee 0f       	add	r30, r30
    22b4:	ff 1f       	adc	r31, r31
    22b6:	e0 0f       	add	r30, r16
    22b8:	f1 1f       	adc	r31, r17
    22ba:	e5 52       	subi	r30, 0x25	; 37
    22bc:	f5 4f       	sbci	r31, 0xF5	; 245
    22be:	80 83       	st	Z, r24
    22c0:	e1 82       	std	Z+1, r14	; 0x01
    22c2:	f2 82       	std	Z+2, r15	; 0x02
    22c4:	86 e0       	ldi	r24, 0x06	; 6
    22c6:	c5 3e       	cpi	r28, 0xE5	; 229
    22c8:	d8 07       	cpc	r29, r24
    22ca:	59 f7       	brne	.-42     	; 0x22a2 <__stack+0x1a3>
    22cc:	69 cf       	rjmp	.-302    	; 0x21a0 <__stack+0xa1>
    22ce:	c3 e7       	ldi	r28, 0x73	; 115
    22d0:	d6 e0       	ldi	r29, 0x06	; 6
    22d2:	09 ea       	ldi	r16, 0xA9	; 169
    22d4:	16 e0       	ldi	r17, 0x06	; 6
    22d6:	e9 90       	ld	r14, Y+
    22d8:	f9 90       	ld	r15, Y+
    22da:	5f d8       	rcall	.-3906   	; 0x139a <getRandomColorValue()>
    22dc:	d8 2e       	mov	r13, r24
    22de:	5d d8       	rcall	.-3910   	; 0x139a <getRandomColorValue()>
    22e0:	c8 2e       	mov	r12, r24
    22e2:	5b d8       	rcall	.-3914   	; 0x139a <getRandomColorValue()>
    22e4:	f7 01       	movw	r30, r14
    22e6:	ee 0f       	add	r30, r30
    22e8:	ff 1f       	adc	r31, r31
    22ea:	ee 0d       	add	r30, r14
    22ec:	ff 1d       	adc	r31, r15
    22ee:	e5 52       	subi	r30, 0x25	; 37
    22f0:	f5 4f       	sbci	r31, 0xF5	; 245
    22f2:	80 83       	st	Z, r24
    22f4:	c1 82       	std	Z+1, r12	; 0x01
    22f6:	d2 82       	std	Z+2, r13	; 0x02
    22f8:	0c 17       	cp	r16, r28
    22fa:	1d 07       	cpc	r17, r29
    22fc:	61 f7       	brne	.-40     	; 0x22d6 <__stack+0x1d7>
    22fe:	50 cf       	rjmp	.-352    	; 0x21a0 <__stack+0xa1>
    2300:	cf e3       	ldi	r28, 0x3F	; 63
    2302:	d6 e0       	ldi	r29, 0x06	; 6
    2304:	03 e7       	ldi	r16, 0x73	; 115
    2306:	16 e0       	ldi	r17, 0x06	; 6
    2308:	e9 90       	ld	r14, Y+
    230a:	f9 90       	ld	r15, Y+
    230c:	46 d8       	rcall	.-3956   	; 0x139a <getRandomColorValue()>
    230e:	d8 2e       	mov	r13, r24
    2310:	44 d8       	rcall	.-3960   	; 0x139a <getRandomColorValue()>
    2312:	c8 2e       	mov	r12, r24
    2314:	42 d8       	rcall	.-3964   	; 0x139a <getRandomColorValue()>
    2316:	f7 01       	movw	r30, r14
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	ee 0d       	add	r30, r14
    231e:	ff 1d       	adc	r31, r15
    2320:	e5 52       	subi	r30, 0x25	; 37
    2322:	f5 4f       	sbci	r31, 0xF5	; 245
    2324:	80 83       	st	Z, r24
    2326:	c1 82       	std	Z+1, r12	; 0x01
    2328:	d2 82       	std	Z+2, r13	; 0x02
    232a:	0c 17       	cp	r16, r28
    232c:	1d 07       	cpc	r17, r29
    232e:	61 f7       	brne	.-40     	; 0x2308 <__stack+0x209>
    2330:	37 cf       	rjmp	.-402    	; 0x21a0 <__stack+0xa1>
    2332:	cf e0       	ldi	r28, 0x0F	; 15
    2334:	d6 e0       	ldi	r29, 0x06	; 6
    2336:	09 91       	ld	r16, Y+
    2338:	19 91       	ld	r17, Y+
    233a:	2f d8       	rcall	.-4002   	; 0x139a <getRandomColorValue()>
    233c:	f8 2e       	mov	r15, r24
    233e:	2d d8       	rcall	.-4006   	; 0x139a <getRandomColorValue()>
    2340:	e8 2e       	mov	r14, r24
    2342:	2b d8       	rcall	.-4010   	; 0x139a <getRandomColorValue()>
    2344:	f8 01       	movw	r30, r16
    2346:	ee 0f       	add	r30, r30
    2348:	ff 1f       	adc	r31, r31
    234a:	e0 0f       	add	r30, r16
    234c:	f1 1f       	adc	r31, r17
    234e:	e5 52       	subi	r30, 0x25	; 37
    2350:	f5 4f       	sbci	r31, 0xF5	; 245
    2352:	80 83       	st	Z, r24
    2354:	e1 82       	std	Z+1, r14	; 0x01
    2356:	f2 82       	std	Z+2, r15	; 0x02
    2358:	86 e0       	ldi	r24, 0x06	; 6
    235a:	cf 33       	cpi	r28, 0x3F	; 63
    235c:	d8 07       	cpc	r29, r24
    235e:	59 f7       	brne	.-42     	; 0x2336 <__stack+0x237>
    2360:	1f cf       	rjmp	.-450    	; 0x21a0 <__stack+0xa1>
    2362:	e9 30       	cpi	r30, 0x09	; 9
    2364:	f1 05       	cpc	r31, r1
    2366:	20 f5       	brcc	.+72     	; 0x23b0 <__stack+0x2b1>
    2368:	e8 54       	subi	r30, 0x48	; 72
    236a:	fe 4e       	sbci	r31, 0xEE	; 238
    236c:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    2370:	c1 11       	cpse	r28, r1
    2372:	ec 11       	cpse	r30, r12
    2374:	07 12       	cpse	r0, r23
    2376:	22 12       	cpse	r2, r18
    2378:	3d 12       	cpse	r3, r29
    237a:	58 12       	cpse	r5, r24
    237c:	73 12       	cpse	r7, r19
    237e:	8e 12       	cpse	r8, r30
    2380:	a9 12       	cpse	r10, r25
    2382:	c7 e6       	ldi	r28, 0x67	; 103
    2384:	d8 e0       	ldi	r29, 0x08	; 8
    2386:	09 91       	ld	r16, Y+
    2388:	19 91       	ld	r17, Y+
    238a:	07 d8       	rcall	.-4082   	; 0x139a <getRandomColorValue()>
    238c:	f8 2e       	mov	r15, r24
    238e:	05 d8       	rcall	.-4086   	; 0x139a <getRandomColorValue()>
    2390:	e8 2e       	mov	r14, r24
    2392:	03 d8       	rcall	.-4090   	; 0x139a <getRandomColorValue()>
    2394:	f8 01       	movw	r30, r16
    2396:	ee 0f       	add	r30, r30
    2398:	ff 1f       	adc	r31, r31
    239a:	e0 0f       	add	r30, r16
    239c:	f1 1f       	adc	r31, r17
    239e:	e5 52       	subi	r30, 0x25	; 37
    23a0:	f5 4f       	sbci	r31, 0xF5	; 245
    23a2:	80 83       	st	Z, r24
    23a4:	e1 82       	std	Z+1, r14	; 0x01
    23a6:	f2 82       	std	Z+2, r15	; 0x02
    23a8:	89 e0       	ldi	r24, 0x09	; 9
    23aa:	c3 30       	cpi	r28, 0x03	; 3
    23ac:	d8 07       	cpc	r29, r24
    23ae:	59 f7       	brne	.-42     	; 0x2386 <__stack+0x287>
    23b0:	8a ed       	ldi	r24, 0xDA	; 218
    23b2:	90 e1       	ldi	r25, 0x10	; 16
    23b4:	0e 94 97 08 	call	0x112e	; 0x112e <CFastLED::show()>
    23b8:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    23bc:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    23c0:	01 97       	sbiw	r24, 0x01	; 1
    23c2:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    23c6:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    23ca:	18 16       	cp	r1, r24
    23cc:	19 06       	cpc	r1, r25
    23ce:	0c f4       	brge	.+2      	; 0x23d2 <__stack+0x2d3>
    23d0:	f9 ce       	rjmp	.-526    	; 0x21c4 <__stack+0xc5>
    23d2:	10 92 b9 0a 	sts	0x0AB9, r1	; 0x800ab9 <scannerGoesBack>
    23d6:	f6 ce       	rjmp	.-532    	; 0x21c4 <__stack+0xc5>
    23d8:	cb ed       	ldi	r28, 0xDB	; 219
    23da:	d7 e0       	ldi	r29, 0x07	; 7
    23dc:	09 91       	ld	r16, Y+
    23de:	19 91       	ld	r17, Y+
    23e0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    23e4:	f8 2e       	mov	r15, r24
    23e6:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    23ea:	e8 2e       	mov	r14, r24
    23ec:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    23f0:	f8 01       	movw	r30, r16
    23f2:	ee 0f       	add	r30, r30
    23f4:	ff 1f       	adc	r31, r31
    23f6:	e0 0f       	add	r30, r16
    23f8:	f1 1f       	adc	r31, r17
    23fa:	e5 52       	subi	r30, 0x25	; 37
    23fc:	f5 4f       	sbci	r31, 0xF5	; 245
    23fe:	80 83       	st	Z, r24
    2400:	e1 82       	std	Z+1, r14	; 0x01
    2402:	f2 82       	std	Z+2, r15	; 0x02
    2404:	88 e0       	ldi	r24, 0x08	; 8
    2406:	c7 36       	cpi	r28, 0x67	; 103
    2408:	d8 07       	cpc	r29, r24
    240a:	41 f7       	brne	.-48     	; 0x23dc <__stack+0x2dd>
    240c:	d1 cf       	rjmp	.-94     	; 0x23b0 <__stack+0x2b1>
    240e:	cf e6       	ldi	r28, 0x6F	; 111
    2410:	d7 e0       	ldi	r29, 0x07	; 7
    2412:	09 91       	ld	r16, Y+
    2414:	19 91       	ld	r17, Y+
    2416:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    241a:	f8 2e       	mov	r15, r24
    241c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2420:	e8 2e       	mov	r14, r24
    2422:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2426:	f8 01       	movw	r30, r16
    2428:	ee 0f       	add	r30, r30
    242a:	ff 1f       	adc	r31, r31
    242c:	e0 0f       	add	r30, r16
    242e:	f1 1f       	adc	r31, r17
    2430:	e5 52       	subi	r30, 0x25	; 37
    2432:	f5 4f       	sbci	r31, 0xF5	; 245
    2434:	80 83       	st	Z, r24
    2436:	e1 82       	std	Z+1, r14	; 0x01
    2438:	f2 82       	std	Z+2, r15	; 0x02
    243a:	87 e0       	ldi	r24, 0x07	; 7
    243c:	cb 3d       	cpi	r28, 0xDB	; 219
    243e:	d8 07       	cpc	r29, r24
    2440:	41 f7       	brne	.-48     	; 0x2412 <__stack+0x313>
    2442:	b6 cf       	rjmp	.-148    	; 0x23b0 <__stack+0x2b1>
    2444:	c5 e2       	ldi	r28, 0x25	; 37
    2446:	d7 e0       	ldi	r29, 0x07	; 7
    2448:	09 91       	ld	r16, Y+
    244a:	19 91       	ld	r17, Y+
    244c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2450:	f8 2e       	mov	r15, r24
    2452:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2456:	e8 2e       	mov	r14, r24
    2458:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    245c:	f8 01       	movw	r30, r16
    245e:	ee 0f       	add	r30, r30
    2460:	ff 1f       	adc	r31, r31
    2462:	e0 0f       	add	r30, r16
    2464:	f1 1f       	adc	r31, r17
    2466:	e5 52       	subi	r30, 0x25	; 37
    2468:	f5 4f       	sbci	r31, 0xF5	; 245
    246a:	80 83       	st	Z, r24
    246c:	e1 82       	std	Z+1, r14	; 0x01
    246e:	f2 82       	std	Z+2, r15	; 0x02
    2470:	87 e0       	ldi	r24, 0x07	; 7
    2472:	cf 36       	cpi	r28, 0x6F	; 111
    2474:	d8 07       	cpc	r29, r24
    2476:	41 f7       	brne	.-48     	; 0x2448 <__stack+0x349>
    2478:	9b cf       	rjmp	.-202    	; 0x23b0 <__stack+0x2b1>
    247a:	c5 ee       	ldi	r28, 0xE5	; 229
    247c:	d6 e0       	ldi	r29, 0x06	; 6
    247e:	09 91       	ld	r16, Y+
    2480:	19 91       	ld	r17, Y+
    2482:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2486:	f8 2e       	mov	r15, r24
    2488:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    248c:	e8 2e       	mov	r14, r24
    248e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2492:	f8 01       	movw	r30, r16
    2494:	ee 0f       	add	r30, r30
    2496:	ff 1f       	adc	r31, r31
    2498:	e0 0f       	add	r30, r16
    249a:	f1 1f       	adc	r31, r17
    249c:	e5 52       	subi	r30, 0x25	; 37
    249e:	f5 4f       	sbci	r31, 0xF5	; 245
    24a0:	80 83       	st	Z, r24
    24a2:	e1 82       	std	Z+1, r14	; 0x01
    24a4:	f2 82       	std	Z+2, r15	; 0x02
    24a6:	87 e0       	ldi	r24, 0x07	; 7
    24a8:	c5 32       	cpi	r28, 0x25	; 37
    24aa:	d8 07       	cpc	r29, r24
    24ac:	41 f7       	brne	.-48     	; 0x247e <__stack+0x37f>
    24ae:	80 cf       	rjmp	.-256    	; 0x23b0 <__stack+0x2b1>
    24b0:	c9 ea       	ldi	r28, 0xA9	; 169
    24b2:	d6 e0       	ldi	r29, 0x06	; 6
    24b4:	09 91       	ld	r16, Y+
    24b6:	19 91       	ld	r17, Y+
    24b8:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    24bc:	f8 2e       	mov	r15, r24
    24be:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    24c2:	e8 2e       	mov	r14, r24
    24c4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    24c8:	f8 01       	movw	r30, r16
    24ca:	ee 0f       	add	r30, r30
    24cc:	ff 1f       	adc	r31, r31
    24ce:	e0 0f       	add	r30, r16
    24d0:	f1 1f       	adc	r31, r17
    24d2:	e5 52       	subi	r30, 0x25	; 37
    24d4:	f5 4f       	sbci	r31, 0xF5	; 245
    24d6:	80 83       	st	Z, r24
    24d8:	e1 82       	std	Z+1, r14	; 0x01
    24da:	f2 82       	std	Z+2, r15	; 0x02
    24dc:	86 e0       	ldi	r24, 0x06	; 6
    24de:	c5 3e       	cpi	r28, 0xE5	; 229
    24e0:	d8 07       	cpc	r29, r24
    24e2:	41 f7       	brne	.-48     	; 0x24b4 <__stack+0x3b5>
    24e4:	65 cf       	rjmp	.-310    	; 0x23b0 <__stack+0x2b1>
    24e6:	c3 e7       	ldi	r28, 0x73	; 115
    24e8:	d6 e0       	ldi	r29, 0x06	; 6
    24ea:	09 91       	ld	r16, Y+
    24ec:	19 91       	ld	r17, Y+
    24ee:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    24f2:	f8 2e       	mov	r15, r24
    24f4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    24f8:	e8 2e       	mov	r14, r24
    24fa:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    24fe:	f8 01       	movw	r30, r16
    2500:	ee 0f       	add	r30, r30
    2502:	ff 1f       	adc	r31, r31
    2504:	e0 0f       	add	r30, r16
    2506:	f1 1f       	adc	r31, r17
    2508:	e5 52       	subi	r30, 0x25	; 37
    250a:	f5 4f       	sbci	r31, 0xF5	; 245
    250c:	80 83       	st	Z, r24
    250e:	e1 82       	std	Z+1, r14	; 0x01
    2510:	f2 82       	std	Z+2, r15	; 0x02
    2512:	86 e0       	ldi	r24, 0x06	; 6
    2514:	c9 3a       	cpi	r28, 0xA9	; 169
    2516:	d8 07       	cpc	r29, r24
    2518:	41 f7       	brne	.-48     	; 0x24ea <__stack+0x3eb>
    251a:	4a cf       	rjmp	.-364    	; 0x23b0 <__stack+0x2b1>
    251c:	cf e3       	ldi	r28, 0x3F	; 63
    251e:	d6 e0       	ldi	r29, 0x06	; 6
    2520:	09 91       	ld	r16, Y+
    2522:	19 91       	ld	r17, Y+
    2524:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2528:	f8 2e       	mov	r15, r24
    252a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    252e:	e8 2e       	mov	r14, r24
    2530:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2534:	f8 01       	movw	r30, r16
    2536:	ee 0f       	add	r30, r30
    2538:	ff 1f       	adc	r31, r31
    253a:	e0 0f       	add	r30, r16
    253c:	f1 1f       	adc	r31, r17
    253e:	e5 52       	subi	r30, 0x25	; 37
    2540:	f5 4f       	sbci	r31, 0xF5	; 245
    2542:	80 83       	st	Z, r24
    2544:	e1 82       	std	Z+1, r14	; 0x01
    2546:	f2 82       	std	Z+2, r15	; 0x02
    2548:	86 e0       	ldi	r24, 0x06	; 6
    254a:	c3 37       	cpi	r28, 0x73	; 115
    254c:	d8 07       	cpc	r29, r24
    254e:	41 f7       	brne	.-48     	; 0x2520 <__stack+0x421>
    2550:	2f cf       	rjmp	.-418    	; 0x23b0 <__stack+0x2b1>
    2552:	cf e0       	ldi	r28, 0x0F	; 15
    2554:	d6 e0       	ldi	r29, 0x06	; 6
    2556:	09 91       	ld	r16, Y+
    2558:	19 91       	ld	r17, Y+
    255a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    255e:	f8 2e       	mov	r15, r24
    2560:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    2564:	e8 2e       	mov	r14, r24
    2566:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    256a:	f8 01       	movw	r30, r16
    256c:	ee 0f       	add	r30, r30
    256e:	ff 1f       	adc	r31, r31
    2570:	e0 0f       	add	r30, r16
    2572:	f1 1f       	adc	r31, r17
    2574:	e5 52       	subi	r30, 0x25	; 37
    2576:	f5 4f       	sbci	r31, 0xF5	; 245
    2578:	80 83       	st	Z, r24
    257a:	e1 82       	std	Z+1, r14	; 0x01
    257c:	f2 82       	std	Z+2, r15	; 0x02
    257e:	86 e0       	ldi	r24, 0x06	; 6
    2580:	cf 33       	cpi	r28, 0x3F	; 63
    2582:	d8 07       	cpc	r29, r24
    2584:	41 f7       	brne	.-48     	; 0x2556 <__stack+0x457>
    2586:	14 cf       	rjmp	.-472    	; 0x23b0 <__stack+0x2b1>

00002588 <progShowText(String, unsigned int, int, int, int, unsigned char)>:
    2588:	8f 92       	push	r8
    258a:	9f 92       	push	r9
    258c:	af 92       	push	r10
    258e:	bf 92       	push	r11
    2590:	cf 92       	push	r12
    2592:	df 92       	push	r13
    2594:	ef 92       	push	r14
    2596:	0f 93       	push	r16
    2598:	1f 93       	push	r17
    259a:	cf 93       	push	r28
    259c:	df 93       	push	r29
    259e:	ec 01       	movw	r28, r24
    25a0:	4b 01       	movw	r8, r22
    25a2:	5a 01       	movw	r10, r20
    25a4:	69 01       	movw	r12, r18
    25a6:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    25aa:	81 11       	cpse	r24, r1
    25ac:	14 c0       	rjmp	.+40     	; 0x25d6 <progShowText(String, unsigned int, int, int, int, unsigned char)+0x4e>
    25ae:	61 e0       	ldi	r22, 0x01	; 1
    25b0:	8a ed       	ldi	r24, 0xDA	; 218
    25b2:	90 e1       	ldi	r25, 0x10	; 16
    25b4:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    25b8:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    25bc:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    25c0:	e0 92 c6 0a 	sts	0x0AC6, r14	; 0x800ac6 <nextSongPart>
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    25ca:	84 e6       	ldi	r24, 0x64	; 100
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	90 93 ce 0a 	sts	0x0ACE, r25	; 0x800ace <millisCounterTimer+0x1>
    25d2:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <millisCounterTimer>
    25d6:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    25da:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    25de:	84 36       	cpi	r24, 0x64	; 100
    25e0:	91 05       	cpc	r25, r1
    25e2:	08 f4       	brcc	.+2      	; 0x25e6 <progShowText(String, unsigned int, int, int, int, unsigned char)+0x5e>
    25e4:	4c c0       	rjmp	.+152    	; 0x267e <progShowText(String, unsigned int, int, int, int, unsigned char)+0xf6>
    25e6:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    25ea:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    25ee:	85 e0       	ldi	r24, 0x05	; 5
    25f0:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <FastLED>
    25f4:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    25f8:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    25fc:	0e 94 9f 08 	call	0x113e	; 0x113e <Framebuffer_GFX::clear()>
    2600:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2604:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2608:	dc 01       	movw	r26, r24
    260a:	56 96       	adiw	r26, 0x16	; 22
    260c:	1c 92       	st	X, r1
    260e:	61 e0       	ldi	r22, 0x01	; 1
    2610:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <Adafruit_GFX::setTextSize(unsigned char)>
    2614:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2618:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    261c:	dc 01       	movw	r26, r24
    261e:	ed 91       	ld	r30, X+
    2620:	fc 91       	ld	r31, X
    2622:	00 8c       	ldd	r0, Z+24	; 0x18
    2624:	f1 8d       	ldd	r31, Z+25	; 0x19
    2626:	e0 2d       	mov	r30, r0
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	09 95       	icall
    262c:	0e 94 c7 50 	call	0xa18e	; 0xa18e <yield>
    2630:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2634:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2638:	0e 94 9f 08 	call	0x113e	; 0x113e <Framebuffer_GFX::clear()>
    263c:	e0 91 c9 10 	lds	r30, 0x10C9	; 0x8010c9 <matrix>
    2640:	f0 91 ca 10 	lds	r31, 0x10CA	; 0x8010ca <matrix+0x1>
    2644:	b4 86       	std	Z+12, r11	; 0x0c
    2646:	a3 86       	std	Z+11, r10	; 0x0b
    2648:	d6 86       	std	Z+14, r13	; 0x0e
    264a:	c5 86       	std	Z+13, r12	; 0x0d
    264c:	12 8b       	std	Z+18, r17	; 0x12
    264e:	01 8b       	std	Z+17, r16	; 0x11
    2650:	10 8b       	std	Z+16, r17	; 0x10
    2652:	07 87       	std	Z+15, r16	; 0x0f
    2654:	be 01       	movw	r22, r28
    2656:	cf 01       	movw	r24, r30
    2658:	0e 94 1f 4d 	call	0x9a3e	; 0x9a3e <Print::print(String const&)>
    265c:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2660:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2664:	df 91       	pop	r29
    2666:	cf 91       	pop	r28
    2668:	1f 91       	pop	r17
    266a:	0f 91       	pop	r16
    266c:	ef 90       	pop	r14
    266e:	df 90       	pop	r13
    2670:	cf 90       	pop	r12
    2672:	bf 90       	pop	r11
    2674:	af 90       	pop	r10
    2676:	9f 90       	pop	r9
    2678:	8f 90       	pop	r8
    267a:	0c 94 6a 3e 	jmp	0x7cd4	; 0x7cd4 <FastLED_NeoMatrix::show()>
    267e:	df 91       	pop	r29
    2680:	cf 91       	pop	r28
    2682:	1f 91       	pop	r17
    2684:	0f 91       	pop	r16
    2686:	ef 90       	pop	r14
    2688:	df 90       	pop	r13
    268a:	cf 90       	pop	r12
    268c:	bf 90       	pop	r11
    268e:	af 90       	pop	r10
    2690:	9f 90       	pop	r9
    2692:	8f 90       	pop	r8
    2694:	08 95       	ret

00002696 <progScrollText(String, unsigned int, int, int, unsigned char)>:
    2696:	af 92       	push	r10
    2698:	bf 92       	push	r11
    269a:	cf 92       	push	r12
    269c:	df 92       	push	r13
    269e:	ef 92       	push	r14
    26a0:	ff 92       	push	r15
    26a2:	0f 93       	push	r16
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	7c 01       	movw	r14, r24
    26aa:	5b 01       	movw	r10, r22
    26ac:	6a 01       	movw	r12, r20
    26ae:	e9 01       	movw	r28, r18
    26b0:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    26b4:	81 11       	cpse	r24, r1
    26b6:	26 c0       	rjmp	.+76     	; 0x2704 <progScrollText(String, unsigned int, int, int, unsigned char)+0x6e>
    26b8:	61 e0       	ldi	r22, 0x01	; 1
    26ba:	8a ed       	ldi	r24, 0xDA	; 218
    26bc:	90 e1       	ldi	r25, 0x10	; 16
    26be:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    26c2:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
    26c6:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
    26ca:	00 93 c6 0a 	sts	0x0AC6, r16	; 0x800ac6 <nextSongPart>
    26ce:	81 e0       	ldi	r24, 0x01	; 1
    26d0:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    26d4:	d0 92 ce 0a 	sts	0x0ACE, r13	; 0x800ace <millisCounterTimer+0x1>
    26d8:	c0 92 cd 0a 	sts	0x0ACD, r12	; 0x800acd <millisCounterTimer>
    26dc:	84 e1       	ldi	r24, 0x14	; 20
    26de:	90 e0       	ldi	r25, 0x00	; 0
    26e0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    26e4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    26e8:	d7 01       	movw	r26, r14
    26ea:	14 96       	adiw	r26, 0x04	; 4
    26ec:	2d 91       	ld	r18, X+
    26ee:	3c 91       	ld	r19, X
    26f0:	46 e0       	ldi	r20, 0x06	; 6
    26f2:	42 9f       	mul	r20, r18
    26f4:	c0 01       	movw	r24, r0
    26f6:	43 9f       	mul	r20, r19
    26f8:	90 0d       	add	r25, r0
    26fa:	11 24       	eor	r1, r1
    26fc:	90 93 bb 0a 	sts	0x0ABB, r25	; 0x800abb <progScrollEnde+0x1>
    2700:	80 93 ba 0a 	sts	0x0ABA, r24	; 0x800aba <progScrollEnde>
    2704:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    2708:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    270c:	8c 15       	cp	r24, r12
    270e:	9d 05       	cpc	r25, r13
    2710:	08 f4       	brcc	.+2      	; 0x2714 <progScrollText(String, unsigned int, int, int, unsigned char)+0x7e>
    2712:	68 c0       	rjmp	.+208    	; 0x27e4 <progScrollText(String, unsigned int, int, int, unsigned char)+0x14e>
    2714:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    2718:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    271c:	85 e0       	ldi	r24, 0x05	; 5
    271e:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <FastLED>
    2722:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2726:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    272a:	0e 94 9f 08 	call	0x113e	; 0x113e <Framebuffer_GFX::clear()>
    272e:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2732:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2736:	fc 01       	movw	r30, r24
    2738:	16 8a       	std	Z+22, r1	; 0x16
    273a:	61 e0       	ldi	r22, 0x01	; 1
    273c:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <Adafruit_GFX::setTextSize(unsigned char)>
    2740:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2744:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2748:	dc 01       	movw	r26, r24
    274a:	ed 91       	ld	r30, X+
    274c:	fc 91       	ld	r31, X
    274e:	00 8c       	ldd	r0, Z+24	; 0x18
    2750:	f1 8d       	ldd	r31, Z+25	; 0x19
    2752:	e0 2d       	mov	r30, r0
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	09 95       	icall
    2758:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    275c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    2760:	01 97       	sbiw	r24, 0x01	; 1
    2762:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    2766:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    276a:	20 91 ba 0a 	lds	r18, 0x0ABA	; 0x800aba <progScrollEnde>
    276e:	30 91 bb 0a 	lds	r19, 0x0ABB	; 0x800abb <progScrollEnde+0x1>
    2772:	31 95       	neg	r19
    2774:	21 95       	neg	r18
    2776:	31 09       	sbc	r19, r1
    2778:	82 17       	cp	r24, r18
    277a:	93 07       	cpc	r25, r19
    277c:	34 f4       	brge	.+12     	; 0x278a <progScrollText(String, unsigned int, int, int, unsigned char)+0xf4>
    277e:	84 e1       	ldi	r24, 0x14	; 20
    2780:	90 e0       	ldi	r25, 0x00	; 0
    2782:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    2786:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    278a:	0e 94 c7 50 	call	0xa18e	; 0xa18e <yield>
    278e:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2792:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2796:	0e 94 9f 08 	call	0x113e	; 0x113e <Framebuffer_GFX::clear()>
    279a:	e0 91 c9 10 	lds	r30, 0x10C9	; 0x8010c9 <matrix>
    279e:	f0 91 ca 10 	lds	r31, 0x10CA	; 0x8010ca <matrix+0x1>
    27a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    27a6:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    27aa:	94 87       	std	Z+12, r25	; 0x0c
    27ac:	83 87       	std	Z+11, r24	; 0x0b
    27ae:	8d e0       	ldi	r24, 0x0D	; 13
    27b0:	90 e0       	ldi	r25, 0x00	; 0
    27b2:	96 87       	std	Z+14, r25	; 0x0e
    27b4:	85 87       	std	Z+13, r24	; 0x0d
    27b6:	d2 8b       	std	Z+18, r29	; 0x12
    27b8:	c1 8b       	std	Z+17, r28	; 0x11
    27ba:	d0 8b       	std	Z+16, r29	; 0x10
    27bc:	c7 87       	std	Z+15, r28	; 0x0f
    27be:	b7 01       	movw	r22, r14
    27c0:	cf 01       	movw	r24, r30
    27c2:	0e 94 1f 4d 	call	0x9a3e	; 0x9a3e <Print::print(String const&)>
    27c6:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    27ca:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    27ce:	df 91       	pop	r29
    27d0:	cf 91       	pop	r28
    27d2:	0f 91       	pop	r16
    27d4:	ff 90       	pop	r15
    27d6:	ef 90       	pop	r14
    27d8:	df 90       	pop	r13
    27da:	cf 90       	pop	r12
    27dc:	bf 90       	pop	r11
    27de:	af 90       	pop	r10
    27e0:	0c 94 6a 3e 	jmp	0x7cd4	; 0x7cd4 <FastLED_NeoMatrix::show()>
    27e4:	df 91       	pop	r29
    27e6:	cf 91       	pop	r28
    27e8:	0f 91       	pop	r16
    27ea:	ff 90       	pop	r15
    27ec:	ef 90       	pop	r14
    27ee:	df 90       	pop	r13
    27f0:	cf 90       	pop	r12
    27f2:	bf 90       	pop	r11
    27f4:	af 90       	pop	r10
    27f6:	08 95       	ret

000027f8 <progShowROOTS(unsigned int, unsigned char)>:
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	8c 01       	movw	r16, r24
    2802:	c6 2f       	mov	r28, r22
    2804:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2808:	81 11       	cpse	r24, r1
    280a:	0e c0       	rjmp	.+28     	; 0x2828 <progShowROOTS(unsigned int, unsigned char)+0x30>
    280c:	61 e0       	ldi	r22, 0x01	; 1
    280e:	8a ed       	ldi	r24, 0xDA	; 218
    2810:	90 e1       	ldi	r25, 0x10	; 16
    2812:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    2816:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    281a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    281e:	c0 93 c6 0a 	sts	0x0AC6, r28	; 0x800ac6 <nextSongPart>
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2828:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    282c:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    2830:	84 3f       	cpi	r24, 0xF4	; 244
    2832:	91 40       	sbci	r25, 0x01	; 1
    2834:	08 f4       	brcc	.+2      	; 0x2838 <progShowROOTS(unsigned int, unsigned char)+0x40>
    2836:	b1 c0       	rjmp	.+354    	; 0x299a <progShowROOTS(unsigned int, unsigned char)+0x1a2>
    2838:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    283c:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    2840:	8f e0       	ldi	r24, 0x0F	; 15
    2842:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <FastLED>
    2846:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    284a:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    284e:	0e 94 9f 08 	call	0x113e	; 0x113e <Framebuffer_GFX::clear()>
    2852:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2856:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    285a:	dc 01       	movw	r26, r24
    285c:	56 96       	adiw	r26, 0x16	; 22
    285e:	1c 92       	st	X, r1
    2860:	61 e0       	ldi	r22, 0x01	; 1
    2862:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <Adafruit_GFX::setTextSize(unsigned char)>
    2866:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    286a:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    286e:	dc 01       	movw	r26, r24
    2870:	ed 91       	ld	r30, X+
    2872:	fc 91       	ld	r31, X
    2874:	00 8c       	ldd	r0, Z+24	; 0x18
    2876:	f1 8d       	ldd	r31, Z+25	; 0x19
    2878:	e0 2d       	mov	r30, r0
    287a:	60 e0       	ldi	r22, 0x00	; 0
    287c:	09 95       	icall
    287e:	0e 94 c7 50 	call	0xa18e	; 0xa18e <yield>
    2882:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2886:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    288a:	0e 94 9f 08 	call	0x113e	; 0x113e <Framebuffer_GFX::clear()>
    288e:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    2892:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    2896:	1c 86       	std	Y+12, r1	; 0x0c
    2898:	1b 86       	std	Y+11, r1	; 0x0b
    289a:	83 e0       	ldi	r24, 0x03	; 3
    289c:	90 e0       	ldi	r25, 0x00	; 0
    289e:	9e 87       	std	Y+14, r25	; 0x0e
    28a0:	8d 87       	std	Y+13, r24	; 0x0d
    28a2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    28a6:	9a 8b       	std	Y+18, r25	; 0x12
    28a8:	89 8b       	std	Y+17, r24	; 0x11
    28aa:	98 8b       	std	Y+16, r25	; 0x10
    28ac:	8f 87       	std	Y+15, r24	; 0x0f
    28ae:	69 e1       	ldi	r22, 0x19	; 25
    28b0:	71 e0       	ldi	r23, 0x01	; 1
    28b2:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    28b6:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    28ba:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Print::print(char const*)>
    28be:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    28c2:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    28c6:	1c 86       	std	Y+12, r1	; 0x0c
    28c8:	1b 86       	std	Y+11, r1	; 0x0b
    28ca:	88 e0       	ldi	r24, 0x08	; 8
    28cc:	90 e0       	ldi	r25, 0x00	; 0
    28ce:	9e 87       	std	Y+14, r25	; 0x0e
    28d0:	8d 87       	std	Y+13, r24	; 0x0d
    28d2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    28d6:	9a 8b       	std	Y+18, r25	; 0x12
    28d8:	89 8b       	std	Y+17, r24	; 0x11
    28da:	98 8b       	std	Y+16, r25	; 0x10
    28dc:	8f 87       	std	Y+15, r24	; 0x0f
    28de:	6b e1       	ldi	r22, 0x1B	; 27
    28e0:	71 e0       	ldi	r23, 0x01	; 1
    28e2:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    28e6:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    28ea:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Print::print(char const*)>
    28ee:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    28f2:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    28f6:	84 e0       	ldi	r24, 0x04	; 4
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	9c 87       	std	Y+12, r25	; 0x0c
    28fc:	8b 87       	std	Y+11, r24	; 0x0b
    28fe:	0d e0       	ldi	r16, 0x0D	; 13
    2900:	10 e0       	ldi	r17, 0x00	; 0
    2902:	1e 87       	std	Y+14, r17	; 0x0e
    2904:	0d 87       	std	Y+13, r16	; 0x0d
    2906:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    290a:	9a 8b       	std	Y+18, r25	; 0x12
    290c:	89 8b       	std	Y+17, r24	; 0x11
    290e:	98 8b       	std	Y+16, r25	; 0x10
    2910:	8f 87       	std	Y+15, r24	; 0x0f
    2912:	6b e1       	ldi	r22, 0x1B	; 27
    2914:	71 e0       	ldi	r23, 0x01	; 1
    2916:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    291a:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    291e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Print::print(char const*)>
    2922:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    2926:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    292a:	8a e0       	ldi	r24, 0x0A	; 10
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	9c 87       	std	Y+12, r25	; 0x0c
    2930:	8b 87       	std	Y+11, r24	; 0x0b
    2932:	8e e0       	ldi	r24, 0x0E	; 14
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	9e 87       	std	Y+14, r25	; 0x0e
    2938:	8d 87       	std	Y+13, r24	; 0x0d
    293a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    293e:	9a 8b       	std	Y+18, r25	; 0x12
    2940:	89 8b       	std	Y+17, r24	; 0x11
    2942:	98 8b       	std	Y+16, r25	; 0x10
    2944:	8f 87       	std	Y+15, r24	; 0x0f
    2946:	6d e1       	ldi	r22, 0x1D	; 29
    2948:	71 e0       	ldi	r23, 0x01	; 1
    294a:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    294e:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2952:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Print::print(char const*)>
    2956:	c0 91 c9 10 	lds	r28, 0x10C9	; 0x8010c9 <matrix>
    295a:	d0 91 ca 10 	lds	r29, 0x10CA	; 0x8010ca <matrix+0x1>
    295e:	8f e0       	ldi	r24, 0x0F	; 15
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	9c 87       	std	Y+12, r25	; 0x0c
    2964:	8b 87       	std	Y+11, r24	; 0x0b
    2966:	1e 87       	std	Y+14, r17	; 0x0e
    2968:	0d 87       	std	Y+13, r16	; 0x0d
    296a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    296e:	9a 8b       	std	Y+18, r25	; 0x12
    2970:	89 8b       	std	Y+17, r24	; 0x11
    2972:	98 8b       	std	Y+16, r25	; 0x10
    2974:	8f 87       	std	Y+15, r24	; 0x0f
    2976:	64 e7       	ldi	r22, 0x74	; 116
    2978:	71 e0       	ldi	r23, 0x01	; 1
    297a:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    297e:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2982:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Print::print(char const*)>
    2986:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    298a:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    298e:	df 91       	pop	r29
    2990:	cf 91       	pop	r28
    2992:	1f 91       	pop	r17
    2994:	0f 91       	pop	r16
    2996:	0c 94 6a 3e 	jmp	0x7cd4	; 0x7cd4 <FastLED_NeoMatrix::show()>
    299a:	df 91       	pop	r29
    299c:	cf 91       	pop	r28
    299e:	1f 91       	pop	r17
    29a0:	0f 91       	pop	r16
    29a2:	08 95       	ret

000029a4 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    29a4:	8f 92       	push	r8
    29a6:	9f 92       	push	r9
    29a8:	af 92       	push	r10
    29aa:	bf 92       	push	r11
    29ac:	cf 92       	push	r12
    29ae:	df 92       	push	r13
    29b0:	ef 92       	push	r14
    29b2:	0f 93       	push	r16
    29b4:	1f 93       	push	r17
    29b6:	cf 93       	push	r28
    29b8:	df 93       	push	r29
    29ba:	ec 01       	movw	r28, r24
    29bc:	5b 01       	movw	r10, r22
    29be:	6a 01       	movw	r12, r20
    29c0:	49 01       	movw	r8, r18
    29c2:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    29c6:	81 11       	cpse	r24, r1
    29c8:	16 c0       	rjmp	.+44     	; 0x29f6 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    29ca:	61 e0       	ldi	r22, 0x01	; 1
    29cc:	8a ed       	ldi	r24, 0xDA	; 218
    29ce:	90 e1       	ldi	r25, 0x10	; 16
    29d0:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    29d4:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    29d8:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    29dc:	e0 92 c6 0a 	sts	0x0AC6, r14	; 0x800ac6 <nextSongPart>
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    29e6:	10 92 70 0a 	sts	0x0A70, r1	; 0x800a70 <zaehlerWortArray+0x1>
    29ea:	10 92 6f 0a 	sts	0x0A6F, r1	; 0x800a6f <zaehlerWortArray>
    29ee:	d0 92 ce 0a 	sts	0x0ACE, r13	; 0x800ace <millisCounterTimer+0x1>
    29f2:	c0 92 cd 0a 	sts	0x0ACD, r12	; 0x800acd <millisCounterTimer>
    29f6:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    29fa:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    29fe:	8c 15       	cp	r24, r12
    2a00:	9d 05       	cpc	r25, r13
    2a02:	08 f4       	brcc	.+2      	; 0x2a06 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    2a04:	5b c0       	rjmp	.+182    	; 0x2abc <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    2a06:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    2a0a:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    2a0e:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    2a12:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    2a16:	a8 16       	cp	r10, r24
    2a18:	b9 06       	cpc	r11, r25
    2a1a:	0c f4       	brge	.+2      	; 0x2a1e <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    2a1c:	4f c0       	rjmp	.+158    	; 0x2abc <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    2a1e:	85 e0       	ldi	r24, 0x05	; 5
    2a20:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <FastLED>
    2a24:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2a28:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2a2c:	0e 94 9f 08 	call	0x113e	; 0x113e <Framebuffer_GFX::clear()>
    2a30:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2a34:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	56 96       	adiw	r26, 0x16	; 22
    2a3c:	1c 92       	st	X, r1
    2a3e:	61 e0       	ldi	r22, 0x01	; 1
    2a40:	0e 94 4b 3e 	call	0x7c96	; 0x7c96 <Adafruit_GFX::setTextSize(unsigned char)>
    2a44:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2a48:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2a4c:	dc 01       	movw	r26, r24
    2a4e:	ed 91       	ld	r30, X+
    2a50:	fc 91       	ld	r31, X
    2a52:	00 8c       	ldd	r0, Z+24	; 0x18
    2a54:	f1 8d       	ldd	r31, Z+25	; 0x19
    2a56:	e0 2d       	mov	r30, r0
    2a58:	60 e0       	ldi	r22, 0x00	; 0
    2a5a:	09 95       	icall
    2a5c:	0e 94 c7 50 	call	0xa18e	; 0xa18e <yield>
    2a60:	e0 91 c9 10 	lds	r30, 0x10C9	; 0x8010c9 <matrix>
    2a64:	f0 91 ca 10 	lds	r31, 0x10CA	; 0x8010ca <matrix+0x1>
    2a68:	82 e0       	ldi	r24, 0x02	; 2
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	94 87       	std	Z+12, r25	; 0x0c
    2a6e:	83 87       	std	Z+11, r24	; 0x0b
    2a70:	8d e0       	ldi	r24, 0x0D	; 13
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	96 87       	std	Z+14, r25	; 0x0e
    2a76:	85 87       	std	Z+13, r24	; 0x0d
    2a78:	12 8b       	std	Z+18, r17	; 0x12
    2a7a:	01 8b       	std	Z+17, r16	; 0x11
    2a7c:	10 8b       	std	Z+16, r17	; 0x10
    2a7e:	07 87       	std	Z+15, r16	; 0x0f
    2a80:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    2a84:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    2a88:	27 e0       	ldi	r18, 0x07	; 7
    2a8a:	28 9f       	mul	r18, r24
    2a8c:	b0 01       	movw	r22, r0
    2a8e:	29 9f       	mul	r18, r25
    2a90:	70 0d       	add	r23, r0
    2a92:	11 24       	eor	r1, r1
    2a94:	6c 0f       	add	r22, r28
    2a96:	7d 1f       	adc	r23, r29
    2a98:	cf 01       	movw	r24, r30
    2a9a:	0e 94 1f 4d 	call	0x9a3e	; 0x9a3e <Print::print(String const&)>
    2a9e:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    2aa2:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    2aa6:	0e 94 6a 3e 	call	0x7cd4	; 0x7cd4 <FastLED_NeoMatrix::show()>
    2aaa:	80 91 6f 0a 	lds	r24, 0x0A6F	; 0x800a6f <zaehlerWortArray>
    2aae:	90 91 70 0a 	lds	r25, 0x0A70	; 0x800a70 <zaehlerWortArray+0x1>
    2ab2:	01 96       	adiw	r24, 0x01	; 1
    2ab4:	90 93 70 0a 	sts	0x0A70, r25	; 0x800a70 <zaehlerWortArray+0x1>
    2ab8:	80 93 6f 0a 	sts	0x0A6F, r24	; 0x800a6f <zaehlerWortArray>
    2abc:	df 91       	pop	r29
    2abe:	cf 91       	pop	r28
    2ac0:	1f 91       	pop	r17
    2ac2:	0f 91       	pop	r16
    2ac4:	ef 90       	pop	r14
    2ac6:	df 90       	pop	r13
    2ac8:	cf 90       	pop	r12
    2aca:	bf 90       	pop	r11
    2acc:	af 90       	pop	r10
    2ace:	9f 90       	pop	r9
    2ad0:	8f 90       	pop	r8
    2ad2:	08 95       	ret

00002ad4 <SetupTotallyRandomPalette()>:
    2ad4:	bf 92       	push	r11
    2ad6:	cf 92       	push	r12
    2ad8:	df 92       	push	r13
    2ada:	ef 92       	push	r14
    2adc:	ff 92       	push	r15
    2ade:	0f 93       	push	r16
    2ae0:	1f 93       	push	r17
    2ae2:	cf 93       	push	r28
    2ae4:	df 93       	push	r29
    2ae6:	00 d0       	rcall	.+0      	; 0x2ae8 <SetupTotallyRandomPalette()+0x14>
    2ae8:	1f 92       	push	r1
    2aea:	cd b7       	in	r28, 0x3d	; 61
    2aec:	de b7       	in	r29, 0x3e	; 62
    2aee:	06 e8       	ldi	r16, 0x86	; 134
    2af0:	1a e0       	ldi	r17, 0x0A	; 10
    2af2:	86 eb       	ldi	r24, 0xB6	; 182
    2af4:	e8 2e       	mov	r14, r24
    2af6:	8a e0       	ldi	r24, 0x0A	; 10
    2af8:	f8 2e       	mov	r15, r24
    2afa:	95 e0       	ldi	r25, 0x05	; 5
    2afc:	c9 2e       	mov	r12, r25
    2afe:	98 e0       	ldi	r25, 0x08	; 8
    2b00:	d9 2e       	mov	r13, r25
    2b02:	bb 24       	eor	r11, r11
    2b04:	ba 94       	dec	r11
    2b06:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    2b0a:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    2b0e:	2c 9d       	mul	r18, r12
    2b10:	c0 01       	movw	r24, r0
    2b12:	2d 9d       	mul	r18, r13
    2b14:	90 0d       	add	r25, r0
    2b16:	3c 9d       	mul	r19, r12
    2b18:	90 0d       	add	r25, r0
    2b1a:	11 24       	eor	r1, r1
    2b1c:	87 5e       	subi	r24, 0xE7	; 231
    2b1e:	99 4c       	sbci	r25, 0xC9	; 201
    2b20:	8c 9d       	mul	r24, r12
    2b22:	90 01       	movw	r18, r0
    2b24:	8d 9d       	mul	r24, r13
    2b26:	30 0d       	add	r19, r0
    2b28:	9c 9d       	mul	r25, r12
    2b2a:	30 0d       	add	r19, r0
    2b2c:	11 24       	eor	r1, r1
    2b2e:	27 5e       	subi	r18, 0xE7	; 231
    2b30:	39 4c       	sbci	r19, 0xC9	; 201
    2b32:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    2b36:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    2b3a:	23 0f       	add	r18, r19
    2b3c:	29 83       	std	Y+1, r18	; 0x01
    2b3e:	ba 82       	std	Y+2, r11	; 0x02
    2b40:	89 0f       	add	r24, r25
    2b42:	8b 83       	std	Y+3, r24	; 0x03
    2b44:	b8 01       	movw	r22, r16
    2b46:	ce 01       	movw	r24, r28
    2b48:	01 96       	adiw	r24, 0x01	; 1
    2b4a:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2b4e:	0d 5f       	subi	r16, 0xFD	; 253
    2b50:	1f 4f       	sbci	r17, 0xFF	; 255
    2b52:	e0 16       	cp	r14, r16
    2b54:	f1 06       	cpc	r15, r17
    2b56:	b9 f6       	brne	.-82     	; 0x2b06 <SetupTotallyRandomPalette()+0x32>
    2b58:	0f 90       	pop	r0
    2b5a:	0f 90       	pop	r0
    2b5c:	0f 90       	pop	r0
    2b5e:	df 91       	pop	r29
    2b60:	cf 91       	pop	r28
    2b62:	1f 91       	pop	r17
    2b64:	0f 91       	pop	r16
    2b66:	ff 90       	pop	r15
    2b68:	ef 90       	pop	r14
    2b6a:	df 90       	pop	r13
    2b6c:	cf 90       	pop	r12
    2b6e:	bf 90       	pop	r11
    2b70:	08 95       	ret

00002b72 <SetupBlackAndWhiteStripedPalette()>:
    2b72:	cf 93       	push	r28
    2b74:	df 93       	push	r29
    2b76:	00 d0       	rcall	.+0      	; 0x2b78 <SetupBlackAndWhiteStripedPalette()+0x6>
    2b78:	1f 92       	push	r1
    2b7a:	cd b7       	in	r28, 0x3d	; 61
    2b7c:	de b7       	in	r29, 0x3e	; 62
    2b7e:	19 82       	std	Y+1, r1	; 0x01
    2b80:	1a 82       	std	Y+2, r1	; 0x02
    2b82:	1b 82       	std	Y+3, r1	; 0x03
    2b84:	ae 01       	movw	r20, r28
    2b86:	4f 5f       	subi	r20, 0xFF	; 255
    2b88:	5f 4f       	sbci	r21, 0xFF	; 255
    2b8a:	60 e1       	ldi	r22, 0x10	; 16
    2b8c:	70 e0       	ldi	r23, 0x00	; 0
    2b8e:	86 e8       	ldi	r24, 0x86	; 134
    2b90:	9a e0       	ldi	r25, 0x0A	; 10
    2b92:	0e 94 59 41 	call	0x82b2	; 0x82b2 <fill_solid(CRGB*, int, CRGB const&)>
    2b96:	e6 e8       	ldi	r30, 0x86	; 134
    2b98:	fa e0       	ldi	r31, 0x0A	; 10
    2b9a:	8f ef       	ldi	r24, 0xFF	; 255
    2b9c:	80 83       	st	Z, r24
    2b9e:	81 83       	std	Z+1, r24	; 0x01
    2ba0:	82 83       	std	Z+2, r24	; 0x02
    2ba2:	84 87       	std	Z+12, r24	; 0x0c
    2ba4:	85 87       	std	Z+13, r24	; 0x0d
    2ba6:	86 87       	std	Z+14, r24	; 0x0e
    2ba8:	80 8f       	std	Z+24, r24	; 0x18
    2baa:	81 8f       	std	Z+25, r24	; 0x19
    2bac:	82 8f       	std	Z+26, r24	; 0x1a
    2bae:	84 a3       	std	Z+36, r24	; 0x24
    2bb0:	85 a3       	std	Z+37, r24	; 0x25
    2bb2:	86 a3       	std	Z+38, r24	; 0x26
    2bb4:	0f 90       	pop	r0
    2bb6:	0f 90       	pop	r0
    2bb8:	0f 90       	pop	r0
    2bba:	df 91       	pop	r29
    2bbc:	cf 91       	pop	r28
    2bbe:	08 95       	ret

00002bc0 <SetupPurpleAndGreenPalette()>:
    2bc0:	1f 93       	push	r17
    2bc2:	cf 93       	push	r28
    2bc4:	df 93       	push	r29
    2bc6:	cd b7       	in	r28, 0x3d	; 61
    2bc8:	de b7       	in	r29, 0x3e	; 62
    2bca:	e6 97       	sbiw	r28, 0x36	; 54
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
    2bd6:	80 ec       	ldi	r24, 0xC0	; 192
    2bd8:	89 83       	std	Y+1, r24	; 0x01
    2bda:	1f ef       	ldi	r17, 0xFF	; 255
    2bdc:	1a 83       	std	Y+2, r17	; 0x02
    2bde:	1b 83       	std	Y+3, r17	; 0x03
    2be0:	be 01       	movw	r22, r28
    2be2:	6c 5c       	subi	r22, 0xCC	; 204
    2be4:	7f 4f       	sbci	r23, 0xFF	; 255
    2be6:	ce 01       	movw	r24, r28
    2be8:	01 96       	adiw	r24, 0x01	; 1
    2bea:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2bee:	80 e6       	ldi	r24, 0x60	; 96
    2bf0:	89 83       	std	Y+1, r24	; 0x01
    2bf2:	1a 83       	std	Y+2, r17	; 0x02
    2bf4:	1b 83       	std	Y+3, r17	; 0x03
    2bf6:	be 01       	movw	r22, r28
    2bf8:	6f 5c       	subi	r22, 0xCF	; 207
    2bfa:	7f 4f       	sbci	r23, 0xFF	; 255
    2bfc:	ce 01       	movw	r24, r28
    2bfe:	01 96       	adiw	r24, 0x01	; 1
    2c00:	0e 94 7a 44 	call	0x88f4	; 0x88f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2c04:	59 a9       	ldd	r21, Y+49	; 0x31
    2c06:	59 83       	std	Y+1, r21	; 0x01
    2c08:	4a a9       	ldd	r20, Y+50	; 0x32
    2c0a:	4a 83       	std	Y+2, r20	; 0x02
    2c0c:	3b a9       	ldd	r19, Y+51	; 0x33
    2c0e:	3b 83       	std	Y+3, r19	; 0x03
    2c10:	5c 83       	std	Y+4, r21	; 0x04
    2c12:	4d 83       	std	Y+5, r20	; 0x05
    2c14:	3e 83       	std	Y+6, r19	; 0x06
    2c16:	1f 82       	std	Y+7, r1	; 0x07
    2c18:	18 86       	std	Y+8, r1	; 0x08
    2c1a:	19 86       	std	Y+9, r1	; 0x09
    2c1c:	1a 86       	std	Y+10, r1	; 0x0a
    2c1e:	1b 86       	std	Y+11, r1	; 0x0b
    2c20:	1c 86       	std	Y+12, r1	; 0x0c
    2c22:	2c a9       	ldd	r18, Y+52	; 0x34
    2c24:	2d 87       	std	Y+13, r18	; 0x0d
    2c26:	9d a9       	ldd	r25, Y+53	; 0x35
    2c28:	9e 87       	std	Y+14, r25	; 0x0e
    2c2a:	8e a9       	ldd	r24, Y+54	; 0x36
    2c2c:	8f 87       	std	Y+15, r24	; 0x0f
    2c2e:	28 8b       	std	Y+16, r18	; 0x10
    2c30:	99 8b       	std	Y+17, r25	; 0x11
    2c32:	8a 8b       	std	Y+18, r24	; 0x12
    2c34:	1b 8a       	std	Y+19, r1	; 0x13
    2c36:	1c 8a       	std	Y+20, r1	; 0x14
    2c38:	1d 8a       	std	Y+21, r1	; 0x15
    2c3a:	1e 8a       	std	Y+22, r1	; 0x16
    2c3c:	1f 8a       	std	Y+23, r1	; 0x17
    2c3e:	18 8e       	std	Y+24, r1	; 0x18
    2c40:	59 8f       	std	Y+25, r21	; 0x19
    2c42:	4a 8f       	std	Y+26, r20	; 0x1a
    2c44:	3b 8f       	std	Y+27, r19	; 0x1b
    2c46:	5c 8f       	std	Y+28, r21	; 0x1c
    2c48:	4d 8f       	std	Y+29, r20	; 0x1d
    2c4a:	3e 8f       	std	Y+30, r19	; 0x1e
    2c4c:	1f 8e       	std	Y+31, r1	; 0x1f
    2c4e:	18 a2       	std	Y+32, r1	; 0x20
    2c50:	19 a2       	std	Y+33, r1	; 0x21
    2c52:	1a a2       	std	Y+34, r1	; 0x22
    2c54:	1b a2       	std	Y+35, r1	; 0x23
    2c56:	1c a2       	std	Y+36, r1	; 0x24
    2c58:	2d a3       	std	Y+37, r18	; 0x25
    2c5a:	9e a3       	std	Y+38, r25	; 0x26
    2c5c:	8f a3       	std	Y+39, r24	; 0x27
    2c5e:	28 a7       	std	Y+40, r18	; 0x28
    2c60:	99 a7       	std	Y+41, r25	; 0x29
    2c62:	8a a7       	std	Y+42, r24	; 0x2a
    2c64:	1b a6       	std	Y+43, r1	; 0x2b
    2c66:	1c a6       	std	Y+44, r1	; 0x2c
    2c68:	1d a6       	std	Y+45, r1	; 0x2d
    2c6a:	1e a6       	std	Y+46, r1	; 0x2e
    2c6c:	1f a6       	std	Y+47, r1	; 0x2f
    2c6e:	18 aa       	std	Y+48, r1	; 0x30
    2c70:	40 e3       	ldi	r20, 0x30	; 48
    2c72:	50 e0       	ldi	r21, 0x00	; 0
    2c74:	be 01       	movw	r22, r28
    2c76:	6f 5f       	subi	r22, 0xFF	; 255
    2c78:	7f 4f       	sbci	r23, 0xFF	; 255
    2c7a:	86 e8       	ldi	r24, 0x86	; 134
    2c7c:	9a e0       	ldi	r25, 0x0A	; 10
    2c7e:	0e 94 46 45 	call	0x8a8c	; 0x8a8c <memmove8>
    2c82:	e6 96       	adiw	r28, 0x36	; 54
    2c84:	0f b6       	in	r0, 0x3f	; 63
    2c86:	f8 94       	cli
    2c88:	de bf       	out	0x3e, r29	; 62
    2c8a:	0f be       	out	0x3f, r0	; 63
    2c8c:	cd bf       	out	0x3d, r28	; 61
    2c8e:	df 91       	pop	r29
    2c90:	cf 91       	pop	r28
    2c92:	1f 91       	pop	r17
    2c94:	08 95       	ret

00002c96 <FillLEDsFromPaletteColors(unsigned char)>:
    2c96:	df 92       	push	r13
    2c98:	ef 92       	push	r14
    2c9a:	ff 92       	push	r15
    2c9c:	0f 93       	push	r16
    2c9e:	1f 93       	push	r17
    2ca0:	cf 93       	push	r28
    2ca2:	df 93       	push	r29
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <FillLEDsFromPaletteColors(unsigned char)+0x10>
    2ca6:	1f 92       	push	r1
    2ca8:	cd b7       	in	r28, 0x3d	; 61
    2caa:	de b7       	in	r29, 0x3e	; 62
    2cac:	d8 2e       	mov	r13, r24
    2cae:	8b ed       	ldi	r24, 0xDB	; 219
    2cb0:	e8 2e       	mov	r14, r24
    2cb2:	8a e0       	ldi	r24, 0x0A	; 10
    2cb4:	f8 2e       	mov	r15, r24
    2cb6:	00 91 84 0a 	lds	r16, 0x0A84	; 0x800a84 <currentBlending>
    2cba:	10 91 85 0a 	lds	r17, 0x0A85	; 0x800a85 <currentBlending+0x1>
    2cbe:	2f ef       	ldi	r18, 0xFF	; 255
    2cc0:	4d 2d       	mov	r20, r13
    2cc2:	66 e8       	ldi	r22, 0x86	; 134
    2cc4:	7a e0       	ldi	r23, 0x0A	; 10
    2cc6:	ce 01       	movw	r24, r28
    2cc8:	01 96       	adiw	r24, 0x01	; 1
    2cca:	0e 94 6e 41 	call	0x82dc	; 0x82dc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	f7 01       	movw	r30, r14
    2cd2:	80 83       	st	Z, r24
    2cd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2cd6:	81 83       	std	Z+1, r24	; 0x01
    2cd8:	8b 81       	ldd	r24, Y+3	; 0x03
    2cda:	82 83       	std	Z+2, r24	; 0x02
    2cdc:	f3 e0       	ldi	r31, 0x03	; 3
    2cde:	df 0e       	add	r13, r31
    2ce0:	83 e0       	ldi	r24, 0x03	; 3
    2ce2:	e8 0e       	add	r14, r24
    2ce4:	f1 1c       	adc	r15, r1
    2ce6:	ed e1       	ldi	r30, 0x1D	; 29
    2ce8:	ee 16       	cp	r14, r30
    2cea:	ee e0       	ldi	r30, 0x0E	; 14
    2cec:	fe 06       	cpc	r15, r30
    2cee:	19 f7       	brne	.-58     	; 0x2cb6 <FillLEDsFromPaletteColors(unsigned char)+0x20>
    2cf0:	0f 90       	pop	r0
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	1f 91       	pop	r17
    2cfc:	0f 91       	pop	r16
    2cfe:	ff 90       	pop	r15
    2d00:	ef 90       	pop	r14
    2d02:	df 90       	pop	r13
    2d04:	08 95       	ret

00002d06 <progPalette(unsigned int, unsigned char, unsigned char)>:
    2d06:	0f 93       	push	r16
    2d08:	1f 93       	push	r17
    2d0a:	cf 93       	push	r28
    2d0c:	df 93       	push	r29
    2d0e:	8c 01       	movw	r16, r24
    2d10:	c6 2f       	mov	r28, r22
    2d12:	d4 2f       	mov	r29, r20
    2d14:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2d18:	81 11       	cpse	r24, r1
    2d1a:	43 c0       	rjmp	.+134    	; 0x2da2 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2d1c:	61 e0       	ldi	r22, 0x01	; 1
    2d1e:	8a ed       	ldi	r24, 0xDA	; 218
    2d20:	90 e1       	ldi	r25, 0x10	; 16
    2d22:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    2d26:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    2d2a:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    2d2e:	d0 93 c6 0a 	sts	0x0AC6, r29	; 0x800ac6 <nextSongPart>
    2d32:	81 e0       	ldi	r24, 0x01	; 1
    2d34:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2d38:	cc 30       	cpi	r28, 0x0C	; 12
    2d3a:	08 f0       	brcs	.+2      	; 0x2d3e <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    2d3c:	32 c0       	rjmp	.+100    	; 0x2da2 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2d3e:	ec 2f       	mov	r30, r28
    2d40:	f0 e0       	ldi	r31, 0x00	; 0
    2d42:	eb 55       	subi	r30, 0x5B	; 91
    2d44:	f9 4e       	sbci	r31, 0xE9	; 233
    2d46:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    2d4a:	b1 16       	cp	r11, r17
    2d4c:	b8 16       	cp	r11, r24
    2d4e:	bf 16       	cp	r11, r31
    2d50:	c2 16       	cp	r12, r18
    2d52:	ca 16       	cp	r12, r26
    2d54:	cc 16       	cp	r12, r28
    2d56:	e9 16       	cp	r14, r25
    2d58:	eb 16       	cp	r14, r27
    2d5a:	ee 16       	cp	r14, r30
    2d5c:	f1 16       	cp	r15, r17
    2d5e:	f4 16       	cp	r15, r20
    2d60:	f7 16       	cp	r15, r23
    2d62:	68 e3       	ldi	r22, 0x38	; 56
    2d64:	7c e0       	ldi	r23, 0x0C	; 12
    2d66:	86 e8       	ldi	r24, 0x86	; 134
    2d68:	9a e0       	ldi	r25, 0x0A	; 10
    2d6a:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2d6e:	0b c0       	rjmp	.+22     	; 0x2d86 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    2d70:	68 ef       	ldi	r22, 0xF8	; 248
    2d72:	7b e0       	ldi	r23, 0x0B	; 11
    2d74:	86 e8       	ldi	r24, 0x86	; 134
    2d76:	9a e0       	ldi	r25, 0x0A	; 10
    2d78:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2d7c:	0e c0       	rjmp	.+28     	; 0x2d9a <progPalette(unsigned int, unsigned char, unsigned char)+0x94>
    2d7e:	68 ef       	ldi	r22, 0xF8	; 248
    2d80:	7b e0       	ldi	r23, 0x0B	; 11
    2d82:	f1 cf       	rjmp	.-30     	; 0x2d66 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2d84:	1d df       	rcall	.-454    	; 0x2bc0 <SetupPurpleAndGreenPalette()>
    2d86:	81 e0       	ldi	r24, 0x01	; 1
    2d88:	90 e0       	ldi	r25, 0x00	; 0
    2d8a:	90 93 85 0a 	sts	0x0A85, r25	; 0x800a85 <currentBlending+0x1>
    2d8e:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <currentBlending>
    2d92:	07 c0       	rjmp	.+14     	; 0x2da2 <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2d94:	9f de       	rcall	.-706    	; 0x2ad4 <SetupTotallyRandomPalette()>
    2d96:	f7 cf       	rjmp	.-18     	; 0x2d86 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    2d98:	ec de       	rcall	.-552    	; 0x2b72 <SetupBlackAndWhiteStripedPalette()>
    2d9a:	10 92 85 0a 	sts	0x0A85, r1	; 0x800a85 <currentBlending+0x1>
    2d9e:	10 92 84 0a 	sts	0x0A84, r1	; 0x800a84 <currentBlending>
    2da2:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    2da6:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    2daa:	01 96       	adiw	r24, 0x01	; 1
    2dac:	89 3e       	cpi	r24, 0xE9	; 233
    2dae:	23 e0       	ldi	r18, 0x03	; 3
    2db0:	92 07       	cpc	r25, r18
    2db2:	04 f5       	brge	.+64     	; 0x2df4 <progPalette(unsigned int, unsigned char, unsigned char)+0xee>
    2db4:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    2db8:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    2dbc:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    2dc0:	6a df       	rcall	.-300    	; 0x2c96 <FillLEDsFromPaletteColors(unsigned char)>
    2dc2:	8a ed       	ldi	r24, 0xDA	; 218
    2dc4:	90 e1       	ldi	r25, 0x10	; 16
    2dc6:	df 91       	pop	r29
    2dc8:	cf 91       	pop	r28
    2dca:	1f 91       	pop	r17
    2dcc:	0f 91       	pop	r16
    2dce:	0c 94 97 08 	jmp	0x112e	; 0x112e <CFastLED::show()>
    2dd2:	cf de       	rcall	.-610    	; 0x2b72 <SetupBlackAndWhiteStripedPalette()>
    2dd4:	d8 cf       	rjmp	.-80     	; 0x2d86 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    2dd6:	68 e7       	ldi	r22, 0x78	; 120
    2dd8:	7c e0       	ldi	r23, 0x0C	; 12
    2dda:	c5 cf       	rjmp	.-118    	; 0x2d66 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2ddc:	68 eb       	ldi	r22, 0xB8	; 184
    2dde:	7b e0       	ldi	r23, 0x0B	; 11
    2de0:	c2 cf       	rjmp	.-124    	; 0x2d66 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2de2:	6f ec       	ldi	r22, 0xCF	; 207
    2de4:	75 e0       	ldi	r23, 0x05	; 5
    2de6:	c6 cf       	rjmp	.-116    	; 0x2d74 <progPalette(unsigned int, unsigned char, unsigned char)+0x6e>
    2de8:	6f ec       	ldi	r22, 0xCF	; 207
    2dea:	75 e0       	ldi	r23, 0x05	; 5
    2dec:	bc cf       	rjmp	.-136    	; 0x2d66 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2dee:	68 e9       	ldi	r22, 0x98	; 152
    2df0:	70 e0       	ldi	r23, 0x00	; 0
    2df2:	b9 cf       	rjmp	.-142    	; 0x2d66 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    2df4:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <zaehler+0x1>
    2df8:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <zaehler>
    2dfc:	df cf       	rjmp	.-66     	; 0x2dbc <progPalette(unsigned int, unsigned char, unsigned char)+0xb6>

00002dfe <getMatrixColor(int)>:
    2dfe:	dc 01       	movw	r26, r24
    2e00:	60 31       	cpi	r22, 0x10	; 16
    2e02:	71 05       	cpc	r23, r1
    2e04:	08 f0       	brcs	.+2      	; 0x2e08 <getMatrixColor(int)+0xa>
    2e06:	52 c0       	rjmp	.+164    	; 0x2eac <getMatrixColor(int)+0xae>
    2e08:	fb 01       	movw	r30, r22
    2e0a:	e7 5f       	subi	r30, 0xF7	; 247
    2e0c:	f8 4e       	sbci	r31, 0xE8	; 232
    2e0e:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    2e12:	56 17       	cp	r21, r22
    2e14:	19 17       	cp	r17, r25
    2e16:	19 17       	cp	r17, r25
    2e18:	24 17       	cp	r18, r20
    2e1a:	28 17       	cp	r18, r24
    2e1c:	2c 17       	cp	r18, r28
    2e1e:	30 17       	cp	r19, r16
    2e20:	34 17       	cp	r19, r20
    2e22:	38 17       	cp	r19, r24
    2e24:	3c 17       	cp	r19, r28
    2e26:	40 17       	cp	r20, r16
    2e28:	44 17       	cp	r20, r20
    2e2a:	48 17       	cp	r20, r24
    2e2c:	4a 17       	cp	r20, r26
    2e2e:	4e 17       	cp	r20, r30
    2e30:	50 17       	cp	r21, r16
    2e32:	81 e0       	ldi	r24, 0x01	; 1
    2e34:	8c 93       	st	X, r24
    2e36:	99 e1       	ldi	r25, 0x19	; 25
    2e38:	11 96       	adiw	r26, 0x01	; 1
    2e3a:	9c 93       	st	X, r25
    2e3c:	11 97       	sbiw	r26, 0x01	; 1
    2e3e:	12 96       	adiw	r26, 0x02	; 2
    2e40:	8c 93       	st	X, r24
    2e42:	12 97       	sbiw	r26, 0x02	; 2
    2e44:	cd 01       	movw	r24, r26
    2e46:	08 95       	ret
    2e48:	81 e0       	ldi	r24, 0x01	; 1
    2e4a:	8c 93       	st	X, r24
    2e4c:	98 e2       	ldi	r25, 0x28	; 40
    2e4e:	f4 cf       	rjmp	.-24     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e50:	81 e0       	ldi	r24, 0x01	; 1
    2e52:	8c 93       	st	X, r24
    2e54:	90 e5       	ldi	r25, 0x50	; 80
    2e56:	f0 cf       	rjmp	.-32     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	8c 93       	st	X, r24
    2e5c:	98 e7       	ldi	r25, 0x78	; 120
    2e5e:	ec cf       	rjmp	.-40     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e60:	81 e0       	ldi	r24, 0x01	; 1
    2e62:	8c 93       	st	X, r24
    2e64:	96 e9       	ldi	r25, 0x96	; 150
    2e66:	e8 cf       	rjmp	.-48     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	8c 93       	st	X, r24
    2e6c:	98 ec       	ldi	r25, 0xC8	; 200
    2e6e:	e4 cf       	rjmp	.-56     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e70:	85 e0       	ldi	r24, 0x05	; 5
    2e72:	8c 93       	st	X, r24
    2e74:	9f ef       	ldi	r25, 0xFF	; 255
    2e76:	e0 cf       	rjmp	.-64     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e78:	8a e0       	ldi	r24, 0x0A	; 10
    2e7a:	8c 93       	st	X, r24
    2e7c:	94 eb       	ldi	r25, 0xB4	; 180
    2e7e:	dc cf       	rjmp	.-72     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e80:	8a e0       	ldi	r24, 0x0A	; 10
    2e82:	8c 93       	st	X, r24
    2e84:	90 ea       	ldi	r25, 0xA0	; 160
    2e86:	d8 cf       	rjmp	.-80     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e88:	84 e1       	ldi	r24, 0x14	; 20
    2e8a:	8c 93       	st	X, r24
    2e8c:	9c e8       	ldi	r25, 0x8C	; 140
    2e8e:	d4 cf       	rjmp	.-88     	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e90:	8e e1       	ldi	r24, 0x1E	; 30
    2e92:	e3 cf       	rjmp	.-58     	; 0x2e5a <getMatrixColor(int)+0x5c>
    2e94:	82 e3       	ldi	r24, 0x32	; 50
    2e96:	8c 93       	st	X, r24
    2e98:	94 e6       	ldi	r25, 0x64	; 100
    2e9a:	ce cf       	rjmp	.-100    	; 0x2e38 <getMatrixColor(int)+0x3a>
    2e9c:	84 e6       	ldi	r24, 0x64	; 100
    2e9e:	e1 cf       	rjmp	.-62     	; 0x2e62 <getMatrixColor(int)+0x64>
    2ea0:	84 eb       	ldi	r24, 0xB4	; 180
    2ea2:	8c 93       	st	X, r24
    2ea4:	11 96       	adiw	r26, 0x01	; 1
    2ea6:	8c 93       	st	X, r24
    2ea8:	11 97       	sbiw	r26, 0x01	; 1
    2eaa:	c9 cf       	rjmp	.-110    	; 0x2e3e <getMatrixColor(int)+0x40>
    2eac:	1c 92       	st	X, r1
    2eae:	11 96       	adiw	r26, 0x01	; 1
    2eb0:	1c 92       	st	X, r1
    2eb2:	11 97       	sbiw	r26, 0x01	; 1
    2eb4:	12 96       	adiw	r26, 0x02	; 2
    2eb6:	1c 92       	st	X, r1
    2eb8:	12 97       	sbiw	r26, 0x02	; 2
    2eba:	c4 cf       	rjmp	.-120    	; 0x2e44 <getMatrixColor(int)+0x46>

00002ebc <progMatrixHorizontal(unsigned int, unsigned char)>:
    2ebc:	cf 92       	push	r12
    2ebe:	df 92       	push	r13
    2ec0:	ef 92       	push	r14
    2ec2:	ff 92       	push	r15
    2ec4:	0f 93       	push	r16
    2ec6:	1f 93       	push	r17
    2ec8:	cf 93       	push	r28
    2eca:	df 93       	push	r29
    2ecc:	00 d0       	rcall	.+0      	; 0x2ece <progMatrixHorizontal(unsigned int, unsigned char)+0x12>
    2ece:	1f 92       	push	r1
    2ed0:	cd b7       	in	r28, 0x3d	; 61
    2ed2:	de b7       	in	r29, 0x3e	; 62
    2ed4:	7c 01       	movw	r14, r24
    2ed6:	16 2f       	mov	r17, r22
    2ed8:	80 91 c7 0a 	lds	r24, 0x0AC7	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2edc:	81 11       	cpse	r24, r1
    2ede:	1e c0       	rjmp	.+60     	; 0x2f1c <progMatrixHorizontal(unsigned int, unsigned char)+0x60>
    2ee0:	61 e0       	ldi	r22, 0x01	; 1
    2ee2:	8a ed       	ldi	r24, 0xDA	; 218
    2ee4:	90 e1       	ldi	r25, 0x10	; 16
    2ee6:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    2eea:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    2eee:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    2ef2:	10 93 c6 0a 	sts	0x0AC6, r17	; 0x800ac6 <nextSongPart>
    2ef6:	81 e0       	ldi	r24, 0x01	; 1
    2ef8:	80 93 c7 0a 	sts	0x0AC7, r24	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    2efc:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <zaehler+0x1>
    2f00:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <zaehler>
    2f04:	8b e1       	ldi	r24, 0x1B	; 27
    2f06:	90 e0       	ldi	r25, 0x00	; 0
    2f08:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <progMatrixZaehler+0x1>
    2f0c:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <progMatrixZaehler>
    2f10:	84 e6       	ldi	r24, 0x64	; 100
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	90 93 ce 0a 	sts	0x0ACE, r25	; 0x800ace <millisCounterTimer+0x1>
    2f18:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <millisCounterTimer>
    2f1c:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    2f20:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    2f24:	84 36       	cpi	r24, 0x64	; 100
    2f26:	91 05       	cpc	r25, r1
    2f28:	08 f4       	brcc	.+2      	; 0x2f2c <progMatrixHorizontal(unsigned int, unsigned char)+0x70>
    2f2a:	ce c3       	rjmp	.+1948   	; 0x36c8 <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>
    2f2c:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    2f30:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    2f34:	e0 90 be 0a 	lds	r14, 0x0ABE	; 0x800abe <zaehler>
    2f38:	f0 90 bf 0a 	lds	r15, 0x0ABF	; 0x800abf <zaehler+0x1>
    2f3c:	00 e1       	ldi	r16, 0x10	; 16
    2f3e:	10 e0       	ldi	r17, 0x00	; 0
    2f40:	f7 fc       	sbrc	r15, 7
    2f42:	1c c0       	rjmp	.+56     	; 0x2f7c <progMatrixHorizontal(unsigned int, unsigned char)+0xc0>
    2f44:	01 50       	subi	r16, 0x01	; 1
    2f46:	11 09       	sbc	r17, r1
    2f48:	02 30       	cpi	r16, 0x02	; 2
    2f4a:	11 05       	cpc	r17, r1
    2f4c:	14 f4       	brge	.+4      	; 0x2f52 <progMatrixHorizontal(unsigned int, unsigned char)+0x96>
    2f4e:	10 e0       	ldi	r17, 0x00	; 0
    2f50:	00 e0       	ldi	r16, 0x00	; 0
    2f52:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    2f56:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    2f5a:	b8 01       	movw	r22, r16
    2f5c:	ce 01       	movw	r24, r28
    2f5e:	01 96       	adiw	r24, 0x01	; 1
    2f60:	4e df       	rcall	.-356    	; 0x2dfe <getMatrixColor(int)>
    2f62:	9e 01       	movw	r18, r28
    2f64:	2f 5f       	subi	r18, 0xFF	; 255
    2f66:	3f 4f       	sbci	r19, 0xFF	; 255
    2f68:	a7 01       	movw	r20, r14
    2f6a:	70 e0       	ldi	r23, 0x00	; 0
    2f6c:	60 e0       	ldi	r22, 0x00	; 0
    2f6e:	c6 01       	movw	r24, r12
    2f70:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	e8 1a       	sub	r14, r24
    2f78:	f1 08       	sbc	r15, r1
    2f7a:	e2 cf       	rjmp	.-60     	; 0x2f40 <progMatrixHorizontal(unsigned int, unsigned char)+0x84>
    2f7c:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    2f80:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    2f84:	04 51       	subi	r16, 0x14	; 20
    2f86:	11 09       	sbc	r17, r1
    2f88:	60 e1       	ldi	r22, 0x10	; 16
    2f8a:	e6 2e       	mov	r14, r22
    2f8c:	f1 2c       	mov	r15, r1
    2f8e:	0c 3e       	cpi	r16, 0xEC	; 236
    2f90:	8f ef       	ldi	r24, 0xFF	; 255
    2f92:	18 07       	cpc	r17, r24
    2f94:	ec f0       	brlt	.+58     	; 0x2fd0 <progMatrixHorizontal(unsigned int, unsigned char)+0x114>
    2f96:	81 e0       	ldi	r24, 0x01	; 1
    2f98:	e8 1a       	sub	r14, r24
    2f9a:	f1 08       	sbc	r15, r1
    2f9c:	82 e0       	ldi	r24, 0x02	; 2
    2f9e:	e8 16       	cp	r14, r24
    2fa0:	f1 04       	cpc	r15, r1
    2fa2:	14 f4       	brge	.+4      	; 0x2fa8 <progMatrixHorizontal(unsigned int, unsigned char)+0xec>
    2fa4:	f1 2c       	mov	r15, r1
    2fa6:	e1 2c       	mov	r14, r1
    2fa8:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    2fac:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    2fb0:	b7 01       	movw	r22, r14
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	01 96       	adiw	r24, 0x01	; 1
    2fb6:	23 df       	rcall	.-442    	; 0x2dfe <getMatrixColor(int)>
    2fb8:	9e 01       	movw	r18, r28
    2fba:	2f 5f       	subi	r18, 0xFF	; 255
    2fbc:	3f 4f       	sbci	r19, 0xFF	; 255
    2fbe:	a8 01       	movw	r20, r16
    2fc0:	62 e0       	ldi	r22, 0x02	; 2
    2fc2:	70 e0       	ldi	r23, 0x00	; 0
    2fc4:	c6 01       	movw	r24, r12
    2fc6:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2fca:	01 50       	subi	r16, 0x01	; 1
    2fcc:	11 09       	sbc	r17, r1
    2fce:	df cf       	rjmp	.-66     	; 0x2f8e <progMatrixHorizontal(unsigned int, unsigned char)+0xd2>
    2fd0:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    2fd4:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    2fd8:	0f 50       	subi	r16, 0x0F	; 15
    2fda:	11 09       	sbc	r17, r1
    2fdc:	50 e1       	ldi	r21, 0x10	; 16
    2fde:	e5 2e       	mov	r14, r21
    2fe0:	f1 2c       	mov	r15, r1
    2fe2:	01 3f       	cpi	r16, 0xF1	; 241
    2fe4:	8f ef       	ldi	r24, 0xFF	; 255
    2fe6:	18 07       	cpc	r17, r24
    2fe8:	ec f0       	brlt	.+58     	; 0x3024 <progMatrixHorizontal(unsigned int, unsigned char)+0x168>
    2fea:	81 e0       	ldi	r24, 0x01	; 1
    2fec:	e8 1a       	sub	r14, r24
    2fee:	f1 08       	sbc	r15, r1
    2ff0:	82 e0       	ldi	r24, 0x02	; 2
    2ff2:	e8 16       	cp	r14, r24
    2ff4:	f1 04       	cpc	r15, r1
    2ff6:	14 f4       	brge	.+4      	; 0x2ffc <progMatrixHorizontal(unsigned int, unsigned char)+0x140>
    2ff8:	f1 2c       	mov	r15, r1
    2ffa:	e1 2c       	mov	r14, r1
    2ffc:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3000:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3004:	b7 01       	movw	r22, r14
    3006:	ce 01       	movw	r24, r28
    3008:	01 96       	adiw	r24, 0x01	; 1
    300a:	f9 de       	rcall	.-526    	; 0x2dfe <getMatrixColor(int)>
    300c:	9e 01       	movw	r18, r28
    300e:	2f 5f       	subi	r18, 0xFF	; 255
    3010:	3f 4f       	sbci	r19, 0xFF	; 255
    3012:	a8 01       	movw	r20, r16
    3014:	64 e0       	ldi	r22, 0x04	; 4
    3016:	70 e0       	ldi	r23, 0x00	; 0
    3018:	c6 01       	movw	r24, r12
    301a:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    301e:	01 50       	subi	r16, 0x01	; 1
    3020:	11 09       	sbc	r17, r1
    3022:	df cf       	rjmp	.-66     	; 0x2fe2 <progMatrixHorizontal(unsigned int, unsigned char)+0x126>
    3024:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    3028:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    302c:	08 50       	subi	r16, 0x08	; 8
    302e:	11 09       	sbc	r17, r1
    3030:	40 e1       	ldi	r20, 0x10	; 16
    3032:	e4 2e       	mov	r14, r20
    3034:	f1 2c       	mov	r15, r1
    3036:	08 3f       	cpi	r16, 0xF8	; 248
    3038:	8f ef       	ldi	r24, 0xFF	; 255
    303a:	18 07       	cpc	r17, r24
    303c:	ec f0       	brlt	.+58     	; 0x3078 <progMatrixHorizontal(unsigned int, unsigned char)+0x1bc>
    303e:	81 e0       	ldi	r24, 0x01	; 1
    3040:	e8 1a       	sub	r14, r24
    3042:	f1 08       	sbc	r15, r1
    3044:	82 e0       	ldi	r24, 0x02	; 2
    3046:	e8 16       	cp	r14, r24
    3048:	f1 04       	cpc	r15, r1
    304a:	14 f4       	brge	.+4      	; 0x3050 <progMatrixHorizontal(unsigned int, unsigned char)+0x194>
    304c:	f1 2c       	mov	r15, r1
    304e:	e1 2c       	mov	r14, r1
    3050:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3054:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3058:	b7 01       	movw	r22, r14
    305a:	ce 01       	movw	r24, r28
    305c:	01 96       	adiw	r24, 0x01	; 1
    305e:	cf de       	rcall	.-610    	; 0x2dfe <getMatrixColor(int)>
    3060:	9e 01       	movw	r18, r28
    3062:	2f 5f       	subi	r18, 0xFF	; 255
    3064:	3f 4f       	sbci	r19, 0xFF	; 255
    3066:	a8 01       	movw	r20, r16
    3068:	66 e0       	ldi	r22, 0x06	; 6
    306a:	70 e0       	ldi	r23, 0x00	; 0
    306c:	c6 01       	movw	r24, r12
    306e:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3072:	01 50       	subi	r16, 0x01	; 1
    3074:	11 09       	sbc	r17, r1
    3076:	df cf       	rjmp	.-66     	; 0x3036 <progMatrixHorizontal(unsigned int, unsigned char)+0x17a>
    3078:	e0 90 be 0a 	lds	r14, 0x0ABE	; 0x800abe <zaehler>
    307c:	f0 90 bf 0a 	lds	r15, 0x0ABF	; 0x800abf <zaehler+0x1>
    3080:	00 e1       	ldi	r16, 0x10	; 16
    3082:	10 e0       	ldi	r17, 0x00	; 0
    3084:	f7 fc       	sbrc	r15, 7
    3086:	1c c0       	rjmp	.+56     	; 0x30c0 <progMatrixHorizontal(unsigned int, unsigned char)+0x204>
    3088:	01 50       	subi	r16, 0x01	; 1
    308a:	11 09       	sbc	r17, r1
    308c:	02 30       	cpi	r16, 0x02	; 2
    308e:	11 05       	cpc	r17, r1
    3090:	14 f4       	brge	.+4      	; 0x3096 <progMatrixHorizontal(unsigned int, unsigned char)+0x1da>
    3092:	10 e0       	ldi	r17, 0x00	; 0
    3094:	00 e0       	ldi	r16, 0x00	; 0
    3096:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    309a:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    309e:	b8 01       	movw	r22, r16
    30a0:	ce 01       	movw	r24, r28
    30a2:	01 96       	adiw	r24, 0x01	; 1
    30a4:	ac de       	rcall	.-680    	; 0x2dfe <getMatrixColor(int)>
    30a6:	9e 01       	movw	r18, r28
    30a8:	2f 5f       	subi	r18, 0xFF	; 255
    30aa:	3f 4f       	sbci	r19, 0xFF	; 255
    30ac:	a7 01       	movw	r20, r14
    30ae:	68 e0       	ldi	r22, 0x08	; 8
    30b0:	70 e0       	ldi	r23, 0x00	; 0
    30b2:	c6 01       	movw	r24, r12
    30b4:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    30b8:	81 e0       	ldi	r24, 0x01	; 1
    30ba:	e8 1a       	sub	r14, r24
    30bc:	f1 08       	sbc	r15, r1
    30be:	e2 cf       	rjmp	.-60     	; 0x3084 <progMatrixHorizontal(unsigned int, unsigned char)+0x1c8>
    30c0:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    30c4:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    30c8:	0e 50       	subi	r16, 0x0E	; 14
    30ca:	11 09       	sbc	r17, r1
    30cc:	30 e1       	ldi	r19, 0x10	; 16
    30ce:	e3 2e       	mov	r14, r19
    30d0:	f1 2c       	mov	r15, r1
    30d2:	02 3f       	cpi	r16, 0xF2	; 242
    30d4:	8f ef       	ldi	r24, 0xFF	; 255
    30d6:	18 07       	cpc	r17, r24
    30d8:	ec f0       	brlt	.+58     	; 0x3114 <progMatrixHorizontal(unsigned int, unsigned char)+0x258>
    30da:	81 e0       	ldi	r24, 0x01	; 1
    30dc:	e8 1a       	sub	r14, r24
    30de:	f1 08       	sbc	r15, r1
    30e0:	82 e0       	ldi	r24, 0x02	; 2
    30e2:	e8 16       	cp	r14, r24
    30e4:	f1 04       	cpc	r15, r1
    30e6:	14 f4       	brge	.+4      	; 0x30ec <progMatrixHorizontal(unsigned int, unsigned char)+0x230>
    30e8:	f1 2c       	mov	r15, r1
    30ea:	e1 2c       	mov	r14, r1
    30ec:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    30f0:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    30f4:	b7 01       	movw	r22, r14
    30f6:	ce 01       	movw	r24, r28
    30f8:	01 96       	adiw	r24, 0x01	; 1
    30fa:	81 de       	rcall	.-766    	; 0x2dfe <getMatrixColor(int)>
    30fc:	9e 01       	movw	r18, r28
    30fe:	2f 5f       	subi	r18, 0xFF	; 255
    3100:	3f 4f       	sbci	r19, 0xFF	; 255
    3102:	a8 01       	movw	r20, r16
    3104:	6a e0       	ldi	r22, 0x0A	; 10
    3106:	70 e0       	ldi	r23, 0x00	; 0
    3108:	c6 01       	movw	r24, r12
    310a:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    310e:	01 50       	subi	r16, 0x01	; 1
    3110:	11 09       	sbc	r17, r1
    3112:	df cf       	rjmp	.-66     	; 0x30d2 <progMatrixHorizontal(unsigned int, unsigned char)+0x216>
    3114:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    3118:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    311c:	05 51       	subi	r16, 0x15	; 21
    311e:	11 09       	sbc	r17, r1
    3120:	20 e1       	ldi	r18, 0x10	; 16
    3122:	e2 2e       	mov	r14, r18
    3124:	f1 2c       	mov	r15, r1
    3126:	0b 3e       	cpi	r16, 0xEB	; 235
    3128:	8f ef       	ldi	r24, 0xFF	; 255
    312a:	18 07       	cpc	r17, r24
    312c:	ec f0       	brlt	.+58     	; 0x3168 <progMatrixHorizontal(unsigned int, unsigned char)+0x2ac>
    312e:	81 e0       	ldi	r24, 0x01	; 1
    3130:	e8 1a       	sub	r14, r24
    3132:	f1 08       	sbc	r15, r1
    3134:	82 e0       	ldi	r24, 0x02	; 2
    3136:	e8 16       	cp	r14, r24
    3138:	f1 04       	cpc	r15, r1
    313a:	14 f4       	brge	.+4      	; 0x3140 <progMatrixHorizontal(unsigned int, unsigned char)+0x284>
    313c:	f1 2c       	mov	r15, r1
    313e:	e1 2c       	mov	r14, r1
    3140:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3144:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3148:	b7 01       	movw	r22, r14
    314a:	ce 01       	movw	r24, r28
    314c:	01 96       	adiw	r24, 0x01	; 1
    314e:	57 de       	rcall	.-850    	; 0x2dfe <getMatrixColor(int)>
    3150:	9e 01       	movw	r18, r28
    3152:	2f 5f       	subi	r18, 0xFF	; 255
    3154:	3f 4f       	sbci	r19, 0xFF	; 255
    3156:	a8 01       	movw	r20, r16
    3158:	6c e0       	ldi	r22, 0x0C	; 12
    315a:	70 e0       	ldi	r23, 0x00	; 0
    315c:	c6 01       	movw	r24, r12
    315e:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3162:	01 50       	subi	r16, 0x01	; 1
    3164:	11 09       	sbc	r17, r1
    3166:	df cf       	rjmp	.-66     	; 0x3126 <progMatrixHorizontal(unsigned int, unsigned char)+0x26a>
    3168:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    316c:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    3170:	09 50       	subi	r16, 0x09	; 9
    3172:	11 09       	sbc	r17, r1
    3174:	90 e1       	ldi	r25, 0x10	; 16
    3176:	e9 2e       	mov	r14, r25
    3178:	f1 2c       	mov	r15, r1
    317a:	07 3f       	cpi	r16, 0xF7	; 247
    317c:	8f ef       	ldi	r24, 0xFF	; 255
    317e:	18 07       	cpc	r17, r24
    3180:	ec f0       	brlt	.+58     	; 0x31bc <progMatrixHorizontal(unsigned int, unsigned char)+0x300>
    3182:	81 e0       	ldi	r24, 0x01	; 1
    3184:	e8 1a       	sub	r14, r24
    3186:	f1 08       	sbc	r15, r1
    3188:	82 e0       	ldi	r24, 0x02	; 2
    318a:	e8 16       	cp	r14, r24
    318c:	f1 04       	cpc	r15, r1
    318e:	14 f4       	brge	.+4      	; 0x3194 <progMatrixHorizontal(unsigned int, unsigned char)+0x2d8>
    3190:	f1 2c       	mov	r15, r1
    3192:	e1 2c       	mov	r14, r1
    3194:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3198:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    319c:	b7 01       	movw	r22, r14
    319e:	ce 01       	movw	r24, r28
    31a0:	01 96       	adiw	r24, 0x01	; 1
    31a2:	2d de       	rcall	.-934    	; 0x2dfe <getMatrixColor(int)>
    31a4:	9e 01       	movw	r18, r28
    31a6:	2f 5f       	subi	r18, 0xFF	; 255
    31a8:	3f 4f       	sbci	r19, 0xFF	; 255
    31aa:	a8 01       	movw	r20, r16
    31ac:	6e e0       	ldi	r22, 0x0E	; 14
    31ae:	70 e0       	ldi	r23, 0x00	; 0
    31b0:	c6 01       	movw	r24, r12
    31b2:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    31b6:	01 50       	subi	r16, 0x01	; 1
    31b8:	11 09       	sbc	r17, r1
    31ba:	df cf       	rjmp	.-66     	; 0x317a <progMatrixHorizontal(unsigned int, unsigned char)+0x2be>
    31bc:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    31c0:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    31c4:	01 50       	subi	r16, 0x01	; 1
    31c6:	11 09       	sbc	r17, r1
    31c8:	80 e1       	ldi	r24, 0x10	; 16
    31ca:	e8 2e       	mov	r14, r24
    31cc:	f1 2c       	mov	r15, r1
    31ce:	0f 3f       	cpi	r16, 0xFF	; 255
    31d0:	8f ef       	ldi	r24, 0xFF	; 255
    31d2:	18 07       	cpc	r17, r24
    31d4:	ec f0       	brlt	.+58     	; 0x3210 <progMatrixHorizontal(unsigned int, unsigned char)+0x354>
    31d6:	81 e0       	ldi	r24, 0x01	; 1
    31d8:	e8 1a       	sub	r14, r24
    31da:	f1 08       	sbc	r15, r1
    31dc:	82 e0       	ldi	r24, 0x02	; 2
    31de:	e8 16       	cp	r14, r24
    31e0:	f1 04       	cpc	r15, r1
    31e2:	14 f4       	brge	.+4      	; 0x31e8 <progMatrixHorizontal(unsigned int, unsigned char)+0x32c>
    31e4:	f1 2c       	mov	r15, r1
    31e6:	e1 2c       	mov	r14, r1
    31e8:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    31ec:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    31f0:	b7 01       	movw	r22, r14
    31f2:	ce 01       	movw	r24, r28
    31f4:	01 96       	adiw	r24, 0x01	; 1
    31f6:	03 de       	rcall	.-1018   	; 0x2dfe <getMatrixColor(int)>
    31f8:	9e 01       	movw	r18, r28
    31fa:	2f 5f       	subi	r18, 0xFF	; 255
    31fc:	3f 4f       	sbci	r19, 0xFF	; 255
    31fe:	a8 01       	movw	r20, r16
    3200:	60 e1       	ldi	r22, 0x10	; 16
    3202:	70 e0       	ldi	r23, 0x00	; 0
    3204:	c6 01       	movw	r24, r12
    3206:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    320a:	01 50       	subi	r16, 0x01	; 1
    320c:	11 09       	sbc	r17, r1
    320e:	df cf       	rjmp	.-66     	; 0x31ce <progMatrixHorizontal(unsigned int, unsigned char)+0x312>
    3210:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    3214:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    3218:	00 51       	subi	r16, 0x10	; 16
    321a:	11 09       	sbc	r17, r1
    321c:	b0 e1       	ldi	r27, 0x10	; 16
    321e:	eb 2e       	mov	r14, r27
    3220:	f1 2c       	mov	r15, r1
    3222:	00 3f       	cpi	r16, 0xF0	; 240
    3224:	8f ef       	ldi	r24, 0xFF	; 255
    3226:	18 07       	cpc	r17, r24
    3228:	ec f0       	brlt	.+58     	; 0x3264 <progMatrixHorizontal(unsigned int, unsigned char)+0x3a8>
    322a:	81 e0       	ldi	r24, 0x01	; 1
    322c:	e8 1a       	sub	r14, r24
    322e:	f1 08       	sbc	r15, r1
    3230:	82 e0       	ldi	r24, 0x02	; 2
    3232:	e8 16       	cp	r14, r24
    3234:	f1 04       	cpc	r15, r1
    3236:	14 f4       	brge	.+4      	; 0x323c <progMatrixHorizontal(unsigned int, unsigned char)+0x380>
    3238:	f1 2c       	mov	r15, r1
    323a:	e1 2c       	mov	r14, r1
    323c:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3240:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3244:	b7 01       	movw	r22, r14
    3246:	ce 01       	movw	r24, r28
    3248:	01 96       	adiw	r24, 0x01	; 1
    324a:	d9 dd       	rcall	.-1102   	; 0x2dfe <getMatrixColor(int)>
    324c:	9e 01       	movw	r18, r28
    324e:	2f 5f       	subi	r18, 0xFF	; 255
    3250:	3f 4f       	sbci	r19, 0xFF	; 255
    3252:	a8 01       	movw	r20, r16
    3254:	62 e1       	ldi	r22, 0x12	; 18
    3256:	70 e0       	ldi	r23, 0x00	; 0
    3258:	c6 01       	movw	r24, r12
    325a:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    325e:	01 50       	subi	r16, 0x01	; 1
    3260:	11 09       	sbc	r17, r1
    3262:	df cf       	rjmp	.-66     	; 0x3222 <progMatrixHorizontal(unsigned int, unsigned char)+0x366>
    3264:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    3268:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    326c:	07 51       	subi	r16, 0x17	; 23
    326e:	11 09       	sbc	r17, r1
    3270:	a0 e1       	ldi	r26, 0x10	; 16
    3272:	ea 2e       	mov	r14, r26
    3274:	f1 2c       	mov	r15, r1
    3276:	09 3e       	cpi	r16, 0xE9	; 233
    3278:	8f ef       	ldi	r24, 0xFF	; 255
    327a:	18 07       	cpc	r17, r24
    327c:	ec f0       	brlt	.+58     	; 0x32b8 <progMatrixHorizontal(unsigned int, unsigned char)+0x3fc>
    327e:	81 e0       	ldi	r24, 0x01	; 1
    3280:	e8 1a       	sub	r14, r24
    3282:	f1 08       	sbc	r15, r1
    3284:	82 e0       	ldi	r24, 0x02	; 2
    3286:	e8 16       	cp	r14, r24
    3288:	f1 04       	cpc	r15, r1
    328a:	14 f4       	brge	.+4      	; 0x3290 <progMatrixHorizontal(unsigned int, unsigned char)+0x3d4>
    328c:	f1 2c       	mov	r15, r1
    328e:	e1 2c       	mov	r14, r1
    3290:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3294:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3298:	b7 01       	movw	r22, r14
    329a:	ce 01       	movw	r24, r28
    329c:	01 96       	adiw	r24, 0x01	; 1
    329e:	af dd       	rcall	.-1186   	; 0x2dfe <getMatrixColor(int)>
    32a0:	9e 01       	movw	r18, r28
    32a2:	2f 5f       	subi	r18, 0xFF	; 255
    32a4:	3f 4f       	sbci	r19, 0xFF	; 255
    32a6:	a8 01       	movw	r20, r16
    32a8:	64 e1       	ldi	r22, 0x14	; 20
    32aa:	70 e0       	ldi	r23, 0x00	; 0
    32ac:	c6 01       	movw	r24, r12
    32ae:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    32b2:	01 50       	subi	r16, 0x01	; 1
    32b4:	11 09       	sbc	r17, r1
    32b6:	df cf       	rjmp	.-66     	; 0x3276 <progMatrixHorizontal(unsigned int, unsigned char)+0x3ba>
    32b8:	00 91 be 0a 	lds	r16, 0x0ABE	; 0x800abe <zaehler>
    32bc:	10 91 bf 0a 	lds	r17, 0x0ABF	; 0x800abf <zaehler+0x1>
    32c0:	0b 50       	subi	r16, 0x0B	; 11
    32c2:	11 09       	sbc	r17, r1
    32c4:	f0 e1       	ldi	r31, 0x10	; 16
    32c6:	ef 2e       	mov	r14, r31
    32c8:	f1 2c       	mov	r15, r1
    32ca:	05 3f       	cpi	r16, 0xF5	; 245
    32cc:	8f ef       	ldi	r24, 0xFF	; 255
    32ce:	18 07       	cpc	r17, r24
    32d0:	ec f0       	brlt	.+58     	; 0x330c <progMatrixHorizontal(unsigned int, unsigned char)+0x450>
    32d2:	81 e0       	ldi	r24, 0x01	; 1
    32d4:	e8 1a       	sub	r14, r24
    32d6:	f1 08       	sbc	r15, r1
    32d8:	82 e0       	ldi	r24, 0x02	; 2
    32da:	e8 16       	cp	r14, r24
    32dc:	f1 04       	cpc	r15, r1
    32de:	14 f4       	brge	.+4      	; 0x32e4 <progMatrixHorizontal(unsigned int, unsigned char)+0x428>
    32e0:	f1 2c       	mov	r15, r1
    32e2:	e1 2c       	mov	r14, r1
    32e4:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    32e8:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    32ec:	b7 01       	movw	r22, r14
    32ee:	ce 01       	movw	r24, r28
    32f0:	01 96       	adiw	r24, 0x01	; 1
    32f2:	85 dd       	rcall	.-1270   	; 0x2dfe <getMatrixColor(int)>
    32f4:	9e 01       	movw	r18, r28
    32f6:	2f 5f       	subi	r18, 0xFF	; 255
    32f8:	3f 4f       	sbci	r19, 0xFF	; 255
    32fa:	a8 01       	movw	r20, r16
    32fc:	66 e1       	ldi	r22, 0x16	; 22
    32fe:	70 e0       	ldi	r23, 0x00	; 0
    3300:	c6 01       	movw	r24, r12
    3302:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3306:	01 50       	subi	r16, 0x01	; 1
    3308:	11 09       	sbc	r17, r1
    330a:	df cf       	rjmp	.-66     	; 0x32ca <progMatrixHorizontal(unsigned int, unsigned char)+0x40e>
    330c:	e0 90 bc 0a 	lds	r14, 0x0ABC	; 0x800abc <progMatrixZaehler>
    3310:	f0 90 bd 0a 	lds	r15, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    3314:	00 e1       	ldi	r16, 0x10	; 16
    3316:	10 e0       	ldi	r17, 0x00	; 0
    3318:	f7 fc       	sbrc	r15, 7
    331a:	1c c0       	rjmp	.+56     	; 0x3354 <progMatrixHorizontal(unsigned int, unsigned char)+0x498>
    331c:	01 50       	subi	r16, 0x01	; 1
    331e:	11 09       	sbc	r17, r1
    3320:	02 30       	cpi	r16, 0x02	; 2
    3322:	11 05       	cpc	r17, r1
    3324:	14 f4       	brge	.+4      	; 0x332a <progMatrixHorizontal(unsigned int, unsigned char)+0x46e>
    3326:	10 e0       	ldi	r17, 0x00	; 0
    3328:	00 e0       	ldi	r16, 0x00	; 0
    332a:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    332e:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3332:	b8 01       	movw	r22, r16
    3334:	ce 01       	movw	r24, r28
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	62 dd       	rcall	.-1340   	; 0x2dfe <getMatrixColor(int)>
    333a:	9e 01       	movw	r18, r28
    333c:	2f 5f       	subi	r18, 0xFF	; 255
    333e:	3f 4f       	sbci	r19, 0xFF	; 255
    3340:	a7 01       	movw	r20, r14
    3342:	61 e0       	ldi	r22, 0x01	; 1
    3344:	70 e0       	ldi	r23, 0x00	; 0
    3346:	c6 01       	movw	r24, r12
    3348:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    334c:	81 e0       	ldi	r24, 0x01	; 1
    334e:	e8 1a       	sub	r14, r24
    3350:	f1 08       	sbc	r15, r1
    3352:	e2 cf       	rjmp	.-60     	; 0x3318 <progMatrixHorizontal(unsigned int, unsigned char)+0x45c>
    3354:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    3358:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    335c:	04 51       	subi	r16, 0x14	; 20
    335e:	11 09       	sbc	r17, r1
    3360:	e0 e1       	ldi	r30, 0x10	; 16
    3362:	ee 2e       	mov	r14, r30
    3364:	f1 2c       	mov	r15, r1
    3366:	0c 3e       	cpi	r16, 0xEC	; 236
    3368:	8f ef       	ldi	r24, 0xFF	; 255
    336a:	18 07       	cpc	r17, r24
    336c:	ec f0       	brlt	.+58     	; 0x33a8 <progMatrixHorizontal(unsigned int, unsigned char)+0x4ec>
    336e:	81 e0       	ldi	r24, 0x01	; 1
    3370:	e8 1a       	sub	r14, r24
    3372:	f1 08       	sbc	r15, r1
    3374:	82 e0       	ldi	r24, 0x02	; 2
    3376:	e8 16       	cp	r14, r24
    3378:	f1 04       	cpc	r15, r1
    337a:	14 f4       	brge	.+4      	; 0x3380 <progMatrixHorizontal(unsigned int, unsigned char)+0x4c4>
    337c:	f1 2c       	mov	r15, r1
    337e:	e1 2c       	mov	r14, r1
    3380:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3384:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3388:	b7 01       	movw	r22, r14
    338a:	ce 01       	movw	r24, r28
    338c:	01 96       	adiw	r24, 0x01	; 1
    338e:	37 dd       	rcall	.-1426   	; 0x2dfe <getMatrixColor(int)>
    3390:	9e 01       	movw	r18, r28
    3392:	2f 5f       	subi	r18, 0xFF	; 255
    3394:	3f 4f       	sbci	r19, 0xFF	; 255
    3396:	a8 01       	movw	r20, r16
    3398:	63 e0       	ldi	r22, 0x03	; 3
    339a:	70 e0       	ldi	r23, 0x00	; 0
    339c:	c6 01       	movw	r24, r12
    339e:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    33a2:	01 50       	subi	r16, 0x01	; 1
    33a4:	11 09       	sbc	r17, r1
    33a6:	df cf       	rjmp	.-66     	; 0x3366 <progMatrixHorizontal(unsigned int, unsigned char)+0x4aa>
    33a8:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    33ac:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    33b0:	0f 50       	subi	r16, 0x0F	; 15
    33b2:	11 09       	sbc	r17, r1
    33b4:	70 e1       	ldi	r23, 0x10	; 16
    33b6:	e7 2e       	mov	r14, r23
    33b8:	f1 2c       	mov	r15, r1
    33ba:	01 3f       	cpi	r16, 0xF1	; 241
    33bc:	8f ef       	ldi	r24, 0xFF	; 255
    33be:	18 07       	cpc	r17, r24
    33c0:	ec f0       	brlt	.+58     	; 0x33fc <progMatrixHorizontal(unsigned int, unsigned char)+0x540>
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	e8 1a       	sub	r14, r24
    33c6:	f1 08       	sbc	r15, r1
    33c8:	82 e0       	ldi	r24, 0x02	; 2
    33ca:	e8 16       	cp	r14, r24
    33cc:	f1 04       	cpc	r15, r1
    33ce:	14 f4       	brge	.+4      	; 0x33d4 <progMatrixHorizontal(unsigned int, unsigned char)+0x518>
    33d0:	f1 2c       	mov	r15, r1
    33d2:	e1 2c       	mov	r14, r1
    33d4:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    33d8:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    33dc:	b7 01       	movw	r22, r14
    33de:	ce 01       	movw	r24, r28
    33e0:	01 96       	adiw	r24, 0x01	; 1
    33e2:	0d dd       	rcall	.-1510   	; 0x2dfe <getMatrixColor(int)>
    33e4:	9e 01       	movw	r18, r28
    33e6:	2f 5f       	subi	r18, 0xFF	; 255
    33e8:	3f 4f       	sbci	r19, 0xFF	; 255
    33ea:	a8 01       	movw	r20, r16
    33ec:	65 e0       	ldi	r22, 0x05	; 5
    33ee:	70 e0       	ldi	r23, 0x00	; 0
    33f0:	c6 01       	movw	r24, r12
    33f2:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    33f6:	01 50       	subi	r16, 0x01	; 1
    33f8:	11 09       	sbc	r17, r1
    33fa:	df cf       	rjmp	.-66     	; 0x33ba <progMatrixHorizontal(unsigned int, unsigned char)+0x4fe>
    33fc:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    3400:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    3404:	08 50       	subi	r16, 0x08	; 8
    3406:	11 09       	sbc	r17, r1
    3408:	60 e1       	ldi	r22, 0x10	; 16
    340a:	e6 2e       	mov	r14, r22
    340c:	f1 2c       	mov	r15, r1
    340e:	08 3f       	cpi	r16, 0xF8	; 248
    3410:	8f ef       	ldi	r24, 0xFF	; 255
    3412:	18 07       	cpc	r17, r24
    3414:	ec f0       	brlt	.+58     	; 0x3450 <progMatrixHorizontal(unsigned int, unsigned char)+0x594>
    3416:	81 e0       	ldi	r24, 0x01	; 1
    3418:	e8 1a       	sub	r14, r24
    341a:	f1 08       	sbc	r15, r1
    341c:	82 e0       	ldi	r24, 0x02	; 2
    341e:	e8 16       	cp	r14, r24
    3420:	f1 04       	cpc	r15, r1
    3422:	14 f4       	brge	.+4      	; 0x3428 <progMatrixHorizontal(unsigned int, unsigned char)+0x56c>
    3424:	f1 2c       	mov	r15, r1
    3426:	e1 2c       	mov	r14, r1
    3428:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    342c:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3430:	b7 01       	movw	r22, r14
    3432:	ce 01       	movw	r24, r28
    3434:	01 96       	adiw	r24, 0x01	; 1
    3436:	e3 dc       	rcall	.-1594   	; 0x2dfe <getMatrixColor(int)>
    3438:	9e 01       	movw	r18, r28
    343a:	2f 5f       	subi	r18, 0xFF	; 255
    343c:	3f 4f       	sbci	r19, 0xFF	; 255
    343e:	a8 01       	movw	r20, r16
    3440:	67 e0       	ldi	r22, 0x07	; 7
    3442:	70 e0       	ldi	r23, 0x00	; 0
    3444:	c6 01       	movw	r24, r12
    3446:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    344a:	01 50       	subi	r16, 0x01	; 1
    344c:	11 09       	sbc	r17, r1
    344e:	df cf       	rjmp	.-66     	; 0x340e <progMatrixHorizontal(unsigned int, unsigned char)+0x552>
    3450:	e0 90 bc 0a 	lds	r14, 0x0ABC	; 0x800abc <progMatrixZaehler>
    3454:	f0 90 bd 0a 	lds	r15, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    3458:	00 e1       	ldi	r16, 0x10	; 16
    345a:	10 e0       	ldi	r17, 0x00	; 0
    345c:	f7 fc       	sbrc	r15, 7
    345e:	1c c0       	rjmp	.+56     	; 0x3498 <progMatrixHorizontal(unsigned int, unsigned char)+0x5dc>
    3460:	01 50       	subi	r16, 0x01	; 1
    3462:	11 09       	sbc	r17, r1
    3464:	02 30       	cpi	r16, 0x02	; 2
    3466:	11 05       	cpc	r17, r1
    3468:	14 f4       	brge	.+4      	; 0x346e <progMatrixHorizontal(unsigned int, unsigned char)+0x5b2>
    346a:	10 e0       	ldi	r17, 0x00	; 0
    346c:	00 e0       	ldi	r16, 0x00	; 0
    346e:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3472:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3476:	b8 01       	movw	r22, r16
    3478:	ce 01       	movw	r24, r28
    347a:	01 96       	adiw	r24, 0x01	; 1
    347c:	c0 dc       	rcall	.-1664   	; 0x2dfe <getMatrixColor(int)>
    347e:	9e 01       	movw	r18, r28
    3480:	2f 5f       	subi	r18, 0xFF	; 255
    3482:	3f 4f       	sbci	r19, 0xFF	; 255
    3484:	a7 01       	movw	r20, r14
    3486:	69 e0       	ldi	r22, 0x09	; 9
    3488:	70 e0       	ldi	r23, 0x00	; 0
    348a:	c6 01       	movw	r24, r12
    348c:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3490:	81 e0       	ldi	r24, 0x01	; 1
    3492:	e8 1a       	sub	r14, r24
    3494:	f1 08       	sbc	r15, r1
    3496:	e2 cf       	rjmp	.-60     	; 0x345c <progMatrixHorizontal(unsigned int, unsigned char)+0x5a0>
    3498:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    349c:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    34a0:	0e 50       	subi	r16, 0x0E	; 14
    34a2:	11 09       	sbc	r17, r1
    34a4:	50 e1       	ldi	r21, 0x10	; 16
    34a6:	e5 2e       	mov	r14, r21
    34a8:	f1 2c       	mov	r15, r1
    34aa:	02 3f       	cpi	r16, 0xF2	; 242
    34ac:	8f ef       	ldi	r24, 0xFF	; 255
    34ae:	18 07       	cpc	r17, r24
    34b0:	ec f0       	brlt	.+58     	; 0x34ec <progMatrixHorizontal(unsigned int, unsigned char)+0x630>
    34b2:	81 e0       	ldi	r24, 0x01	; 1
    34b4:	e8 1a       	sub	r14, r24
    34b6:	f1 08       	sbc	r15, r1
    34b8:	82 e0       	ldi	r24, 0x02	; 2
    34ba:	e8 16       	cp	r14, r24
    34bc:	f1 04       	cpc	r15, r1
    34be:	14 f4       	brge	.+4      	; 0x34c4 <progMatrixHorizontal(unsigned int, unsigned char)+0x608>
    34c0:	f1 2c       	mov	r15, r1
    34c2:	e1 2c       	mov	r14, r1
    34c4:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    34c8:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    34cc:	b7 01       	movw	r22, r14
    34ce:	ce 01       	movw	r24, r28
    34d0:	01 96       	adiw	r24, 0x01	; 1
    34d2:	95 dc       	rcall	.-1750   	; 0x2dfe <getMatrixColor(int)>
    34d4:	9e 01       	movw	r18, r28
    34d6:	2f 5f       	subi	r18, 0xFF	; 255
    34d8:	3f 4f       	sbci	r19, 0xFF	; 255
    34da:	a8 01       	movw	r20, r16
    34dc:	6b e0       	ldi	r22, 0x0B	; 11
    34de:	70 e0       	ldi	r23, 0x00	; 0
    34e0:	c6 01       	movw	r24, r12
    34e2:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    34e6:	01 50       	subi	r16, 0x01	; 1
    34e8:	11 09       	sbc	r17, r1
    34ea:	df cf       	rjmp	.-66     	; 0x34aa <progMatrixHorizontal(unsigned int, unsigned char)+0x5ee>
    34ec:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    34f0:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    34f4:	05 51       	subi	r16, 0x15	; 21
    34f6:	11 09       	sbc	r17, r1
    34f8:	40 e1       	ldi	r20, 0x10	; 16
    34fa:	e4 2e       	mov	r14, r20
    34fc:	f1 2c       	mov	r15, r1
    34fe:	0b 3e       	cpi	r16, 0xEB	; 235
    3500:	8f ef       	ldi	r24, 0xFF	; 255
    3502:	18 07       	cpc	r17, r24
    3504:	ec f0       	brlt	.+58     	; 0x3540 <progMatrixHorizontal(unsigned int, unsigned char)+0x684>
    3506:	81 e0       	ldi	r24, 0x01	; 1
    3508:	e8 1a       	sub	r14, r24
    350a:	f1 08       	sbc	r15, r1
    350c:	82 e0       	ldi	r24, 0x02	; 2
    350e:	e8 16       	cp	r14, r24
    3510:	f1 04       	cpc	r15, r1
    3512:	14 f4       	brge	.+4      	; 0x3518 <progMatrixHorizontal(unsigned int, unsigned char)+0x65c>
    3514:	f1 2c       	mov	r15, r1
    3516:	e1 2c       	mov	r14, r1
    3518:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    351c:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3520:	b7 01       	movw	r22, r14
    3522:	ce 01       	movw	r24, r28
    3524:	01 96       	adiw	r24, 0x01	; 1
    3526:	6b dc       	rcall	.-1834   	; 0x2dfe <getMatrixColor(int)>
    3528:	9e 01       	movw	r18, r28
    352a:	2f 5f       	subi	r18, 0xFF	; 255
    352c:	3f 4f       	sbci	r19, 0xFF	; 255
    352e:	a8 01       	movw	r20, r16
    3530:	6d e0       	ldi	r22, 0x0D	; 13
    3532:	70 e0       	ldi	r23, 0x00	; 0
    3534:	c6 01       	movw	r24, r12
    3536:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    353a:	01 50       	subi	r16, 0x01	; 1
    353c:	11 09       	sbc	r17, r1
    353e:	df cf       	rjmp	.-66     	; 0x34fe <progMatrixHorizontal(unsigned int, unsigned char)+0x642>
    3540:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    3544:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    3548:	09 50       	subi	r16, 0x09	; 9
    354a:	11 09       	sbc	r17, r1
    354c:	30 e1       	ldi	r19, 0x10	; 16
    354e:	e3 2e       	mov	r14, r19
    3550:	f1 2c       	mov	r15, r1
    3552:	07 3f       	cpi	r16, 0xF7	; 247
    3554:	8f ef       	ldi	r24, 0xFF	; 255
    3556:	18 07       	cpc	r17, r24
    3558:	ec f0       	brlt	.+58     	; 0x3594 <progMatrixHorizontal(unsigned int, unsigned char)+0x6d8>
    355a:	81 e0       	ldi	r24, 0x01	; 1
    355c:	e8 1a       	sub	r14, r24
    355e:	f1 08       	sbc	r15, r1
    3560:	82 e0       	ldi	r24, 0x02	; 2
    3562:	e8 16       	cp	r14, r24
    3564:	f1 04       	cpc	r15, r1
    3566:	14 f4       	brge	.+4      	; 0x356c <progMatrixHorizontal(unsigned int, unsigned char)+0x6b0>
    3568:	f1 2c       	mov	r15, r1
    356a:	e1 2c       	mov	r14, r1
    356c:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3570:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3574:	b7 01       	movw	r22, r14
    3576:	ce 01       	movw	r24, r28
    3578:	01 96       	adiw	r24, 0x01	; 1
    357a:	41 dc       	rcall	.-1918   	; 0x2dfe <getMatrixColor(int)>
    357c:	9e 01       	movw	r18, r28
    357e:	2f 5f       	subi	r18, 0xFF	; 255
    3580:	3f 4f       	sbci	r19, 0xFF	; 255
    3582:	a8 01       	movw	r20, r16
    3584:	6f e0       	ldi	r22, 0x0F	; 15
    3586:	70 e0       	ldi	r23, 0x00	; 0
    3588:	c6 01       	movw	r24, r12
    358a:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    358e:	01 50       	subi	r16, 0x01	; 1
    3590:	11 09       	sbc	r17, r1
    3592:	df cf       	rjmp	.-66     	; 0x3552 <progMatrixHorizontal(unsigned int, unsigned char)+0x696>
    3594:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    3598:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    359c:	01 50       	subi	r16, 0x01	; 1
    359e:	11 09       	sbc	r17, r1
    35a0:	20 e1       	ldi	r18, 0x10	; 16
    35a2:	e2 2e       	mov	r14, r18
    35a4:	f1 2c       	mov	r15, r1
    35a6:	0f 3f       	cpi	r16, 0xFF	; 255
    35a8:	8f ef       	ldi	r24, 0xFF	; 255
    35aa:	18 07       	cpc	r17, r24
    35ac:	ec f0       	brlt	.+58     	; 0x35e8 <progMatrixHorizontal(unsigned int, unsigned char)+0x72c>
    35ae:	81 e0       	ldi	r24, 0x01	; 1
    35b0:	e8 1a       	sub	r14, r24
    35b2:	f1 08       	sbc	r15, r1
    35b4:	82 e0       	ldi	r24, 0x02	; 2
    35b6:	e8 16       	cp	r14, r24
    35b8:	f1 04       	cpc	r15, r1
    35ba:	14 f4       	brge	.+4      	; 0x35c0 <progMatrixHorizontal(unsigned int, unsigned char)+0x704>
    35bc:	f1 2c       	mov	r15, r1
    35be:	e1 2c       	mov	r14, r1
    35c0:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    35c4:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    35c8:	b7 01       	movw	r22, r14
    35ca:	ce 01       	movw	r24, r28
    35cc:	01 96       	adiw	r24, 0x01	; 1
    35ce:	17 dc       	rcall	.-2002   	; 0x2dfe <getMatrixColor(int)>
    35d0:	9e 01       	movw	r18, r28
    35d2:	2f 5f       	subi	r18, 0xFF	; 255
    35d4:	3f 4f       	sbci	r19, 0xFF	; 255
    35d6:	a8 01       	movw	r20, r16
    35d8:	61 e1       	ldi	r22, 0x11	; 17
    35da:	70 e0       	ldi	r23, 0x00	; 0
    35dc:	c6 01       	movw	r24, r12
    35de:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    35e2:	01 50       	subi	r16, 0x01	; 1
    35e4:	11 09       	sbc	r17, r1
    35e6:	df cf       	rjmp	.-66     	; 0x35a6 <progMatrixHorizontal(unsigned int, unsigned char)+0x6ea>
    35e8:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    35ec:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    35f0:	00 51       	subi	r16, 0x10	; 16
    35f2:	11 09       	sbc	r17, r1
    35f4:	90 e1       	ldi	r25, 0x10	; 16
    35f6:	e9 2e       	mov	r14, r25
    35f8:	f1 2c       	mov	r15, r1
    35fa:	00 3f       	cpi	r16, 0xF0	; 240
    35fc:	8f ef       	ldi	r24, 0xFF	; 255
    35fe:	18 07       	cpc	r17, r24
    3600:	ec f0       	brlt	.+58     	; 0x363c <progMatrixHorizontal(unsigned int, unsigned char)+0x780>
    3602:	81 e0       	ldi	r24, 0x01	; 1
    3604:	e8 1a       	sub	r14, r24
    3606:	f1 08       	sbc	r15, r1
    3608:	82 e0       	ldi	r24, 0x02	; 2
    360a:	e8 16       	cp	r14, r24
    360c:	f1 04       	cpc	r15, r1
    360e:	14 f4       	brge	.+4      	; 0x3614 <progMatrixHorizontal(unsigned int, unsigned char)+0x758>
    3610:	f1 2c       	mov	r15, r1
    3612:	e1 2c       	mov	r14, r1
    3614:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    3618:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    361c:	b7 01       	movw	r22, r14
    361e:	ce 01       	movw	r24, r28
    3620:	01 96       	adiw	r24, 0x01	; 1
    3622:	ed db       	rcall	.-2086   	; 0x2dfe <getMatrixColor(int)>
    3624:	9e 01       	movw	r18, r28
    3626:	2f 5f       	subi	r18, 0xFF	; 255
    3628:	3f 4f       	sbci	r19, 0xFF	; 255
    362a:	a8 01       	movw	r20, r16
    362c:	63 e1       	ldi	r22, 0x13	; 19
    362e:	70 e0       	ldi	r23, 0x00	; 0
    3630:	c6 01       	movw	r24, r12
    3632:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    3636:	01 50       	subi	r16, 0x01	; 1
    3638:	11 09       	sbc	r17, r1
    363a:	df cf       	rjmp	.-66     	; 0x35fa <progMatrixHorizontal(unsigned int, unsigned char)+0x73e>
    363c:	00 91 bc 0a 	lds	r16, 0x0ABC	; 0x800abc <progMatrixZaehler>
    3640:	10 91 bd 0a 	lds	r17, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    3644:	07 51       	subi	r16, 0x17	; 23
    3646:	11 09       	sbc	r17, r1
    3648:	80 e1       	ldi	r24, 0x10	; 16
    364a:	e8 2e       	mov	r14, r24
    364c:	f1 2c       	mov	r15, r1
    364e:	09 3e       	cpi	r16, 0xE9	; 233
    3650:	8f ef       	ldi	r24, 0xFF	; 255
    3652:	18 07       	cpc	r17, r24
    3654:	ec f0       	brlt	.+58     	; 0x3690 <progMatrixHorizontal(unsigned int, unsigned char)+0x7d4>
    3656:	81 e0       	ldi	r24, 0x01	; 1
    3658:	e8 1a       	sub	r14, r24
    365a:	f1 08       	sbc	r15, r1
    365c:	82 e0       	ldi	r24, 0x02	; 2
    365e:	e8 16       	cp	r14, r24
    3660:	f1 04       	cpc	r15, r1
    3662:	14 f4       	brge	.+4      	; 0x3668 <progMatrixHorizontal(unsigned int, unsigned char)+0x7ac>
    3664:	f1 2c       	mov	r15, r1
    3666:	e1 2c       	mov	r14, r1
    3668:	c0 90 c9 10 	lds	r12, 0x10C9	; 0x8010c9 <matrix>
    366c:	d0 90 ca 10 	lds	r13, 0x10CA	; 0x8010ca <matrix+0x1>
    3670:	b7 01       	movw	r22, r14
    3672:	ce 01       	movw	r24, r28
    3674:	01 96       	adiw	r24, 0x01	; 1
    3676:	c3 db       	rcall	.-2170   	; 0x2dfe <getMatrixColor(int)>
    3678:	9e 01       	movw	r18, r28
    367a:	2f 5f       	subi	r18, 0xFF	; 255
    367c:	3f 4f       	sbci	r19, 0xFF	; 255
    367e:	a8 01       	movw	r20, r16
    3680:	65 e1       	ldi	r22, 0x15	; 21
    3682:	70 e0       	ldi	r23, 0x00	; 0
    3684:	c6 01       	movw	r24, r12
    3686:	0e 94 24 41 	call	0x8248	; 0x8248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    368a:	01 50       	subi	r16, 0x01	; 1
    368c:	11 09       	sbc	r17, r1
    368e:	df cf       	rjmp	.-66     	; 0x364e <progMatrixHorizontal(unsigned int, unsigned char)+0x792>
    3690:	8a ed       	ldi	r24, 0xDA	; 218
    3692:	90 e1       	ldi	r25, 0x10	; 16
    3694:	0e 94 97 08 	call	0x112e	; 0x112e <CFastLED::show()>
    3698:	80 91 be 0a 	lds	r24, 0x0ABE	; 0x800abe <zaehler>
    369c:	90 91 bf 0a 	lds	r25, 0x0ABF	; 0x800abf <zaehler+0x1>
    36a0:	01 96       	adiw	r24, 0x01	; 1
    36a2:	89 33       	cpi	r24, 0x39	; 57
    36a4:	91 05       	cpc	r25, r1
    36a6:	e4 f4       	brge	.+56     	; 0x36e0 <progMatrixHorizontal(unsigned int, unsigned char)+0x824>
    36a8:	90 93 bf 0a 	sts	0x0ABF, r25	; 0x800abf <zaehler+0x1>
    36ac:	80 93 be 0a 	sts	0x0ABE, r24	; 0x800abe <zaehler>
    36b0:	80 91 bc 0a 	lds	r24, 0x0ABC	; 0x800abc <progMatrixZaehler>
    36b4:	90 91 bd 0a 	lds	r25, 0x0ABD	; 0x800abd <progMatrixZaehler+0x1>
    36b8:	01 96       	adiw	r24, 0x01	; 1
    36ba:	89 33       	cpi	r24, 0x39	; 57
    36bc:	91 05       	cpc	r25, r1
    36be:	ac f4       	brge	.+42     	; 0x36ea <progMatrixHorizontal(unsigned int, unsigned char)+0x82e>
    36c0:	90 93 bd 0a 	sts	0x0ABD, r25	; 0x800abd <progMatrixZaehler+0x1>
    36c4:	80 93 bc 0a 	sts	0x0ABC, r24	; 0x800abc <progMatrixZaehler>
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	df 91       	pop	r29
    36d0:	cf 91       	pop	r28
    36d2:	1f 91       	pop	r17
    36d4:	0f 91       	pop	r16
    36d6:	ff 90       	pop	r15
    36d8:	ef 90       	pop	r14
    36da:	df 90       	pop	r13
    36dc:	cf 90       	pop	r12
    36de:	08 95       	ret
    36e0:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <zaehler+0x1>
    36e4:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <zaehler>
    36e8:	e3 cf       	rjmp	.-58     	; 0x36b0 <progMatrixHorizontal(unsigned int, unsigned char)+0x7f4>
    36ea:	10 92 bd 0a 	sts	0x0ABD, r1	; 0x800abd <progMatrixZaehler+0x1>
    36ee:	10 92 bc 0a 	sts	0x0ABC, r1	; 0x800abc <progMatrixZaehler>
    36f2:	ea cf       	rjmp	.-44     	; 0x36c8 <progMatrixHorizontal(unsigned int, unsigned char)+0x80c>

000036f4 <setupInterrupt()>:
}

//====================================================

// interrupt every 25 ms so that fastLED can process uninterrupted (takes about 18 ms)
void setupInterrupt() {
    36f4:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    TCCR3A = 0;
    36f8:	8b e0       	ldi	r24, 0x0B	; 11
    36fa:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    TCCR3B = 0x0B;      // WGM32 (CTC), Prescaler: // 0x0C = 256 // 0x0B = 64
    36fe:	8a e6       	ldi	r24, 0x6A	; 106
    3700:	98 e1       	ldi	r25, 0x18	; 24
    3702:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    3706:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    OCR3A = 6250;      // 16M/64(prescaler) * 0,025 sec (=25 ms) = 6250 [10ms = 2.500 / 15ms = 3.750 / 20ms = 5.000]
    370a:	82 e0       	ldi	r24, 0x02	; 2
    370c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    TIMSK3 = 0x02;      // enable compare interrupt
    3710:	08 95       	ret

00003712 <switchToPart(unsigned char)>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    3712:	cf 93       	push	r28
    3714:	c8 2f       	mov	r28, r24
    3716:	80 93 c5 0a 	sts	0x0AC5, r24	; 0x800ac5 <prog>
    371a:	10 92 c7 0a 	sts	0x0AC7, r1	; 0x800ac7 <nextChangeMillisAlreadyCalculated>
    371e:	10 92 ce 0a 	sts	0x0ACE, r1	; 0x800ace <millisCounterTimer+0x1>
    3722:	10 92 cd 0a 	sts	0x0ACD, r1	; 0x800acd <millisCounterTimer>
    3726:	10 92 cc 0a 	sts	0x0ACC, r1	; 0x800acc <millisCounterForProgChange+0x1>
    372a:	10 92 cb 0a 	sts	0x0ACB, r1	; 0x800acb <millisCounterForProgChange>
    372e:	10 92 bf 0a 	sts	0x0ABF, r1	; 0x800abf <zaehler+0x1>
    3732:	10 92 be 0a 	sts	0x0ABE, r1	; 0x800abe <zaehler>
    3736:	87 e1       	ldi	r24, 0x17	; 23
    3738:	90 e0       	ldi	r25, 0x00	; 0
    373a:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    373e:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    3742:	10 92 72 0a 	sts	0x0A72, r1	; 0x800a72 <progBlingBlingColoring_rounds+0x1>
    3746:	10 92 71 0a 	sts	0x0A71, r1	; 0x800a71 <progBlingBlingColoring_rounds>
    374a:	10 92 6e 0a 	sts	0x0A6E, r1	; 0x800a6e <progCLED_hue>
    374e:	10 92 6d 0a 	sts	0x0A6D, r1	; 0x800a6d <progCLED_counter+0x1>
    3752:	10 92 6c 0a 	sts	0x0A6C, r1	; 0x800a6c <progCLED_counter>
    3756:	6f e1       	ldi	r22, 0x1F	; 31
    3758:	71 e0       	ldi	r23, 0x01	; 1
    375a:	8a e6       	ldi	r24, 0x6A	; 106
    375c:	91 e1       	ldi	r25, 0x11	; 17
    375e:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Print::print(char const*)>
    3762:	6c 2f       	mov	r22, r28
    3764:	8a e6       	ldi	r24, 0x6A	; 106
    3766:	91 e1       	ldi	r25, 0x11	; 17
    3768:	cf 91       	pop	r28
    376a:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <Print::println(unsigned char)>

0000376e <__vector_32>:
    376e:	1f 92       	push	r1
    3770:	0f 92       	push	r0
    3772:	0f b6       	in	r0, 0x3f	; 63
    3774:	0f 92       	push	r0
    3776:	11 24       	eor	r1, r1
    3778:	0b b6       	in	r0, 0x3b	; 59
    377a:	0f 92       	push	r0
    377c:	2f 93       	push	r18
    377e:	3f 93       	push	r19
    3780:	4f 93       	push	r20
    3782:	5f 93       	push	r21
    3784:	6f 93       	push	r22
    3786:	7f 93       	push	r23
    3788:	8f 93       	push	r24
    378a:	9f 93       	push	r25
    378c:	af 93       	push	r26
    378e:	bf 93       	push	r27
    3790:	ef 93       	push	r30
    3792:	ff 93       	push	r31
    3794:	80 91 cd 0a 	lds	r24, 0x0ACD	; 0x800acd <millisCounterTimer>
    3798:	90 91 ce 0a 	lds	r25, 0x0ACE	; 0x800ace <millisCounterTimer+0x1>
    379c:	49 96       	adiw	r24, 0x19	; 25
    379e:	90 93 ce 0a 	sts	0x0ACE, r25	; 0x800ace <millisCounterTimer+0x1>
    37a2:	80 93 cd 0a 	sts	0x0ACD, r24	; 0x800acd <millisCounterTimer>
    37a6:	80 91 c9 0a 	lds	r24, 0x0AC9	; 0x800ac9 <millisCounterForSeconds>
    37aa:	90 91 ca 0a 	lds	r25, 0x0ACA	; 0x800aca <millisCounterForSeconds+0x1>
    37ae:	49 96       	adiw	r24, 0x19	; 25
    37b0:	90 93 ca 0a 	sts	0x0ACA, r25	; 0x800aca <millisCounterForSeconds+0x1>
    37b4:	80 93 c9 0a 	sts	0x0AC9, r24	; 0x800ac9 <millisCounterForSeconds>
    37b8:	80 91 cb 0a 	lds	r24, 0x0ACB	; 0x800acb <millisCounterForProgChange>
    37bc:	90 91 cc 0a 	lds	r25, 0x0ACC	; 0x800acc <millisCounterForProgChange+0x1>
    37c0:	49 96       	adiw	r24, 0x19	; 25
    37c2:	90 93 cc 0a 	sts	0x0ACC, r25	; 0x800acc <millisCounterForProgChange+0x1>
    37c6:	80 93 cb 0a 	sts	0x0ACB, r24	; 0x800acb <millisCounterForProgChange>
    37ca:	91 e0       	ldi	r25, 0x01	; 1
    37cc:	90 93 c8 0a 	sts	0x0AC8, r25	; 0x800ac8 <flag_processFastLED>
    37d0:	8b b1       	in	r24, 0x0b	; 11
    37d2:	20 e4       	ldi	r18, 0x40	; 64
    37d4:	82 27       	eor	r24, r18
    37d6:	8b b9       	out	0x0b, r24	; 11
    37d8:	20 91 c9 0a 	lds	r18, 0x0AC9	; 0x800ac9 <millisCounterForSeconds>
    37dc:	30 91 ca 0a 	lds	r19, 0x0ACA	; 0x800aca <millisCounterForSeconds+0x1>
    37e0:	28 3e       	cpi	r18, 0xE8	; 232
    37e2:	33 40       	sbci	r19, 0x03	; 3
    37e4:	30 f0       	brcs	.+12     	; 0x37f2 <__vector_32+0x84>
    37e6:	10 92 ca 0a 	sts	0x0ACA, r1	; 0x800aca <millisCounterForSeconds+0x1>
    37ea:	10 92 c9 0a 	sts	0x0AC9, r1	; 0x800ac9 <millisCounterForSeconds>
    37ee:	90 93 c4 0a 	sts	0x0AC4, r25	; 0x800ac4 <OneSecondHasPast>
    37f2:	20 91 cb 0a 	lds	r18, 0x0ACB	; 0x800acb <millisCounterForProgChange>
    37f6:	30 91 cc 0a 	lds	r19, 0x0ACC	; 0x800acc <millisCounterForProgChange+0x1>
    37fa:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    37fe:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    3802:	28 17       	cp	r18, r24
    3804:	39 07       	cpc	r19, r25
    3806:	18 f0       	brcs	.+6      	; 0x380e <__vector_32+0xa0>
    3808:	80 91 c6 0a 	lds	r24, 0x0AC6	; 0x800ac6 <nextSongPart>
    380c:	82 df       	rcall	.-252    	; 0x3712 <switchToPart(unsigned char)>
    380e:	ff 91       	pop	r31
    3810:	ef 91       	pop	r30
    3812:	bf 91       	pop	r27
    3814:	af 91       	pop	r26
    3816:	9f 91       	pop	r25
    3818:	8f 91       	pop	r24
    381a:	7f 91       	pop	r23
    381c:	6f 91       	pop	r22
    381e:	5f 91       	pop	r21
    3820:	4f 91       	pop	r20
    3822:	3f 91       	pop	r19
    3824:	2f 91       	pop	r18
    3826:	0f 90       	pop	r0
    3828:	0b be       	out	0x3b, r0	; 59
    382a:	0f 90       	pop	r0
    382c:	0f be       	out	0x3f, r0	; 63
    382e:	0f 90       	pop	r0
    3830:	1f 90       	pop	r1
    3832:	18 95       	reti

00003834 <switchToSong(unsigned char)>:
    3834:	cf 93       	push	r28
    3836:	c8 2f       	mov	r28, r24
    3838:	80 93 da 0a 	sts	0x0ADA, r24	; 0x800ada <songID>
    383c:	62 e3       	ldi	r22, 0x32	; 50
    383e:	71 e0       	ldi	r23, 0x01	; 1
    3840:	8a e6       	ldi	r24, 0x6A	; 106
    3842:	91 e1       	ldi	r25, 0x11	; 17
    3844:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Print::println(char const*)>
    3848:	66 e4       	ldi	r22, 0x46	; 70
    384a:	71 e0       	ldi	r23, 0x01	; 1
    384c:	8a e6       	ldi	r24, 0x6A	; 106
    384e:	91 e1       	ldi	r25, 0x11	; 17
    3850:	0e 94 53 08 	call	0x10a6	; 0x10a6 <Print::print(char const*)>
    3854:	6c 2f       	mov	r22, r28
    3856:	8a e6       	ldi	r24, 0x6A	; 106
    3858:	91 e1       	ldi	r25, 0x11	; 17
    385a:	0e 94 65 08 	call	0x10ca	; 0x10ca <Print::println(unsigned char)>
    385e:	62 e3       	ldi	r22, 0x32	; 50
    3860:	71 e0       	ldi	r23, 0x01	; 1
    3862:	8a e6       	ldi	r24, 0x6A	; 106
    3864:	91 e1       	ldi	r25, 0x11	; 17
    3866:	0e 94 54 08 	call	0x10a8	; 0x10a8 <Print::println(char const*)>
    386a:	80 e0       	ldi	r24, 0x00	; 0
    386c:	cf 91       	pop	r28
    386e:	51 cf       	rjmp	.-350    	; 0x3712 <switchToPart(unsigned char)>

00003870 <setup>:
    3870:	af 92       	push	r10
    3872:	bf 92       	push	r11
    3874:	cf 92       	push	r12
    3876:	df 92       	push	r13
    3878:	ef 92       	push	r14
    387a:	ff 92       	push	r15
    387c:	0f 93       	push	r16
    387e:	1f 93       	push	r17
    3880:	cf 93       	push	r28
    3882:	df 93       	push	r29
    3884:	68 ee       	ldi	r22, 0xE8	; 232
    3886:	73 e0       	ldi	r23, 0x03	; 3
    3888:	80 e0       	ldi	r24, 0x00	; 0
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	0e 94 3b 49 	call	0x9276	; 0x9276 <delay>
    3890:	4f ef       	ldi	r20, 0xFF	; 255
    3892:	60 e4       	ldi	r22, 0x40	; 64
    3894:	70 e0       	ldi	r23, 0x00	; 0
    3896:	85 ef       	ldi	r24, 0xF5	; 245
    3898:	90 e1       	ldi	r25, 0x10	; 16
    389a:	0e 94 1e 4c 	call	0x983c	; 0x983c <HardwareSerial::_begin(unsigned int, unsigned char)>
    389e:	56 9a       	sbi	0x0a, 6	; 10
    38a0:	88 e2       	ldi	r24, 0x28	; 40
    38a2:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <analogRead>
    38a6:	bc 01       	movw	r22, r24
    38a8:	99 0f       	add	r25, r25
    38aa:	88 0b       	sbc	r24, r24
    38ac:	99 0b       	sbc	r25, r25
    38ae:	1f 92       	push	r1
    38b0:	1f 92       	push	r1
    38b2:	1f 92       	push	r1
    38b4:	28 e7       	ldi	r18, 0x78	; 120
    38b6:	2f 93       	push	r18
    38b8:	a1 2c       	mov	r10, r1
    38ba:	b1 2c       	mov	r11, r1
    38bc:	65 01       	movw	r12, r10
    38be:	ee 24       	eor	r14, r14
    38c0:	ea 94       	dec	r14
    38c2:	13 e0       	ldi	r17, 0x03	; 3
    38c4:	f1 2e       	mov	r15, r17
    38c6:	00 e0       	ldi	r16, 0x00	; 0
    38c8:	10 e0       	ldi	r17, 0x00	; 0
    38ca:	20 e0       	ldi	r18, 0x00	; 0
    38cc:	30 e0       	ldi	r19, 0x00	; 0
    38ce:	a9 01       	movw	r20, r18
    38d0:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <map(long, long, long, long, long)>
    38d4:	60 93 d1 0a 	sts	0x0AD1, r22	; 0x800ad1 <voltageSmooth>
    38d8:	82 e3       	ldi	r24, 0x32	; 50
    38da:	91 e0       	ldi	r25, 0x01	; 1
    38dc:	0e 94 e8 4c 	call	0x99d0	; 0x99d0 <operator new(unsigned int)>
    38e0:	ec 01       	movw	r28, r24
    38e2:	0a e0       	ldi	r16, 0x0A	; 10
    38e4:	27 e1       	ldi	r18, 0x17	; 23
    38e6:	30 e0       	ldi	r19, 0x00	; 0
    38e8:	46 e1       	ldi	r20, 0x16	; 22
    38ea:	50 e0       	ldi	r21, 0x00	; 0
    38ec:	6b ed       	ldi	r22, 0xDB	; 219
    38ee:	7a e0       	ldi	r23, 0x0A	; 10
    38f0:	0e 94 4d 3e 	call	0x7c9a	; 0x7c9a <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    38f4:	d0 93 ca 10 	sts	0x10CA, r29	; 0x8010ca <matrix+0x1>
    38f8:	c0 93 c9 10 	sts	0x10C9, r28	; 0x8010c9 <matrix>
    38fc:	80 91 e3 09 	lds	r24, 0x09E3	; 0x8009e3 <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    3900:	0f 90       	pop	r0
    3902:	0f 90       	pop	r0
    3904:	0f 90       	pop	r0
    3906:	0f 90       	pop	r0
    3908:	81 11       	cpse	r24, r1
    390a:	4d c0       	rjmp	.+154    	; 0x39a6 <setup+0x136>
    390c:	83 ee       	ldi	r24, 0xE3	; 227
    390e:	99 e0       	ldi	r25, 0x09	; 9
    3910:	0e 94 e9 4c 	call	0x99d2	; 0x99d2 <__cxa_guard_acquire>
    3914:	89 2b       	or	r24, r25
    3916:	09 f4       	brne	.+2      	; 0x391a <setup+0xaa>
    3918:	46 c0       	rjmp	.+140    	; 0x39a6 <setup+0x136>
    391a:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    391e:	10 92 ed 09 	sts	0x09ED, r1	; 0x8009ed <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    3922:	8f ef       	ldi	r24, 0xFF	; 255
    3924:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    3928:	80 93 f2 09 	sts	0x09F2, r24	; 0x8009f2 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    392c:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    3930:	80 93 f4 09 	sts	0x09F4, r24	; 0x8009f4 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    3934:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    3938:	80 93 f6 09 	sts	0x09F6, r24	; 0x8009f6 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    393c:	81 e0       	ldi	r24, 0x01	; 1
    393e:	80 93 f7 09 	sts	0x09F7, r24	; 0x8009f7 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    3942:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    3946:	10 92 f8 09 	sts	0x09F8, r1	; 0x8009f8 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    394a:	10 92 f0 09 	sts	0x09F0, r1	; 0x8009f0 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    394e:	10 92 ef 09 	sts	0x09EF, r1	; 0x8009ef <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    3952:	80 91 d8 10 	lds	r24, 0x10D8	; 0x8010d8 <CLEDController::m_pHead>
    3956:	90 91 d9 10 	lds	r25, 0x10D9	; 0x8010d9 <CLEDController::m_pHead+0x1>
    395a:	89 2b       	or	r24, r25
    395c:	31 f4       	brne	.+12     	; 0x396a <setup+0xfa>
    395e:	8b ee       	ldi	r24, 0xEB	; 235
    3960:	99 e0       	ldi	r25, 0x09	; 9
    3962:	90 93 d9 10 	sts	0x10D9, r25	; 0x8010d9 <CLEDController::m_pHead+0x1>
    3966:	80 93 d8 10 	sts	0x10D8, r24	; 0x8010d8 <CLEDController::m_pHead>
    396a:	e0 91 d6 10 	lds	r30, 0x10D6	; 0x8010d6 <CLEDController::m_pTail>
    396e:	f0 91 d7 10 	lds	r31, 0x10D7	; 0x8010d7 <CLEDController::m_pTail+0x1>
    3972:	30 97       	sbiw	r30, 0x00	; 0
    3974:	21 f0       	breq	.+8      	; 0x397e <setup+0x10e>
    3976:	8b ee       	ldi	r24, 0xEB	; 235
    3978:	99 e0       	ldi	r25, 0x09	; 9
    397a:	95 83       	std	Z+5, r25	; 0x05
    397c:	84 83       	std	Z+4, r24	; 0x04
    397e:	8b ee       	ldi	r24, 0xEB	; 235
    3980:	99 e0       	ldi	r25, 0x09	; 9
    3982:	90 93 d7 10 	sts	0x10D7, r25	; 0x8010d7 <CLEDController::m_pTail+0x1>
    3986:	80 93 d6 10 	sts	0x10D6, r24	; 0x8010d6 <CLEDController::m_pTail>
    398a:	10 92 fb 09 	sts	0x09FB, r1	; 0x8009fb <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    398e:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    3992:	81 e7       	ldi	r24, 0x71	; 113
    3994:	95 e0       	ldi	r25, 0x05	; 5
    3996:	90 93 ec 09 	sts	0x09EC, r25	; 0x8009ec <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    399a:	80 93 eb 09 	sts	0x09EB, r24	; 0x8009eb <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    399e:	83 ee       	ldi	r24, 0xE3	; 227
    39a0:	99 e0       	ldi	r25, 0x09	; 9
    39a2:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <__cxa_guard_release>
    39a6:	30 e0       	ldi	r19, 0x00	; 0
    39a8:	20 e0       	ldi	r18, 0x00	; 0
    39aa:	4a ef       	ldi	r20, 0xFA	; 250
    39ac:	51 e0       	ldi	r21, 0x01	; 1
    39ae:	6b ed       	ldi	r22, 0xDB	; 219
    39b0:	7a e0       	ldi	r23, 0x0A	; 10
    39b2:	8b ee       	ldi	r24, 0xEB	; 235
    39b4:	99 e0       	ldi	r25, 0x09	; 9
    39b6:	0e 94 3d 44 	call	0x887a	; 0x887a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    39ba:	fc 01       	movw	r30, r24
    39bc:	8f ef       	ldi	r24, 0xFF	; 255
    39be:	86 83       	std	Z+6, r24	; 0x06
    39c0:	80 eb       	ldi	r24, 0xB0	; 176
    39c2:	87 83       	std	Z+7, r24	; 0x07
    39c4:	80 ef       	ldi	r24, 0xF0	; 240
    39c6:	80 87       	std	Z+8, r24	; 0x08
    39c8:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    39cc:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    39d0:	0e 94 c4 3e 	call	0x7d88	; 0x7d88 <Framebuffer_GFX::begin()>
    39d4:	80 91 c9 10 	lds	r24, 0x10C9	; 0x8010c9 <matrix>
    39d8:	90 91 ca 10 	lds	r25, 0x10CA	; 0x8010ca <matrix+0x1>
    39dc:	2f e0       	ldi	r18, 0x0F	; 15
    39de:	20 93 da 10 	sts	0x10DA, r18	; 0x8010da <FastLED>
    39e2:	fc 01       	movw	r30, r24
    39e4:	16 8a       	std	Z+22, r1	; 0x16
    39e6:	69 e4       	ldi	r22, 0x49	; 73
    39e8:	77 e0       	ldi	r23, 0x07	; 7
    39ea:	0e 94 53 41 	call	0x82a6	; 0x82a6 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    39ee:	f8 94       	cli
    39f0:	81 de       	rcall	.-766    	; 0x36f4 <setupInterrupt()>
    39f2:	78 94       	sei
    39f4:	68 e3       	ldi	r22, 0x38	; 56
    39f6:	7c e0       	ldi	r23, 0x0C	; 12
    39f8:	86 e8       	ldi	r24, 0x86	; 134
    39fa:	9a e0       	ldi	r25, 0x0A	; 10
    39fc:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    3a00:	81 e0       	ldi	r24, 0x01	; 1
    3a02:	90 e0       	ldi	r25, 0x00	; 0
    3a04:	90 93 85 0a 	sts	0x0A85, r25	; 0x800a85 <currentBlending+0x1>
    3a08:	80 93 84 0a 	sts	0x0A84, r24	; 0x800a84 <currentBlending>
    3a0c:	80 e1       	ldi	r24, 0x10	; 16
    3a0e:	df 91       	pop	r29
    3a10:	cf 91       	pop	r28
    3a12:	1f 91       	pop	r17
    3a14:	0f 91       	pop	r16
    3a16:	ff 90       	pop	r15
    3a18:	ef 90       	pop	r14
    3a1a:	df 90       	pop	r13
    3a1c:	cf 90       	pop	r12
    3a1e:	bf 90       	pop	r11
    3a20:	af 90       	pop	r10
    3a22:	08 cf       	rjmp	.-496    	; 0x3834 <switchToSong(unsigned char)>

00003a24 <defaultLoop()>:
    3a24:	ef 92       	push	r14
    3a26:	ff 92       	push	r15
    3a28:	0f 93       	push	r16
    3a2a:	cf 93       	push	r28
    3a2c:	df 93       	push	r29
    3a2e:	00 d0       	rcall	.+0      	; 0x3a30 <defaultLoop()+0xc>
    3a30:	00 d0       	rcall	.+0      	; 0x3a32 <defaultLoop()+0xe>
    3a32:	00 d0       	rcall	.+0      	; 0x3a34 <defaultLoop()+0x10>
    3a34:	1f 92       	push	r1
    3a36:	cd b7       	in	r28, 0x3d	; 61
    3a38:	de b7       	in	r29, 0x3e	; 62
    3a3a:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    3a3e:	83 32       	cpi	r24, 0x23	; 35
    3a40:	09 f4       	brne	.+2      	; 0x3a44 <defaultLoop()+0x20>
    3a42:	78 c0       	rjmp	.+240    	; 0x3b34 <defaultLoop()+0x110>
    3a44:	28 f5       	brcc	.+74     	; 0x3a90 <defaultLoop()+0x6c>
    3a46:	8a 30       	cpi	r24, 0x0A	; 10
    3a48:	09 f4       	brne	.+2      	; 0x3a4c <defaultLoop()+0x28>
    3a4a:	5e c0       	rjmp	.+188    	; 0x3b08 <defaultLoop()+0xe4>
    3a4c:	88 f4       	brcc	.+34     	; 0x3a70 <defaultLoop()+0x4c>
    3a4e:	88 23       	and	r24, r24
    3a50:	f1 f1       	breq	.+124    	; 0x3ace <defaultLoop()+0xaa>
    3a52:	85 30       	cpi	r24, 0x05	; 5
    3a54:	09 f4       	brne	.+2      	; 0x3a58 <defaultLoop()+0x34>
    3a56:	53 c0       	rjmp	.+166    	; 0x3afe <defaultLoop()+0xda>
    3a58:	27 96       	adiw	r28, 0x07	; 7
    3a5a:	0f b6       	in	r0, 0x3f	; 63
    3a5c:	f8 94       	cli
    3a5e:	de bf       	out	0x3e, r29	; 62
    3a60:	0f be       	out	0x3f, r0	; 63
    3a62:	cd bf       	out	0x3d, r28	; 61
    3a64:	df 91       	pop	r29
    3a66:	cf 91       	pop	r28
    3a68:	0f 91       	pop	r16
    3a6a:	ff 90       	pop	r15
    3a6c:	ef 90       	pop	r14
    3a6e:	08 95       	ret
    3a70:	84 31       	cpi	r24, 0x14	; 20
    3a72:	09 f4       	brne	.+2      	; 0x3a76 <defaultLoop()+0x52>
    3a74:	51 c0       	rjmp	.+162    	; 0x3b18 <defaultLoop()+0xf4>
    3a76:	89 31       	cpi	r24, 0x19	; 25
    3a78:	09 f4       	brne	.+2      	; 0x3a7c <defaultLoop()+0x58>
    3a7a:	54 c0       	rjmp	.+168    	; 0x3b24 <defaultLoop()+0x100>
    3a7c:	8f 30       	cpi	r24, 0x0F	; 15
    3a7e:	61 f7       	brne	.-40     	; 0x3a58 <defaultLoop()+0x34>
    3a80:	44 ef       	ldi	r20, 0xF4	; 244
    3a82:	51 e0       	ldi	r21, 0x01	; 1
    3a84:	64 e1       	ldi	r22, 0x14	; 20
    3a86:	80 e1       	ldi	r24, 0x10	; 16
    3a88:	97 e2       	ldi	r25, 0x27	; 39
    3a8a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    3a8e:	e4 cf       	rjmp	.-56     	; 0x3a58 <defaultLoop()+0x34>
    3a90:	82 33       	cpi	r24, 0x32	; 50
    3a92:	09 f4       	brne	.+2      	; 0x3a96 <defaultLoop()+0x72>
    3a94:	5e c0       	rjmp	.+188    	; 0x3b52 <defaultLoop()+0x12e>
    3a96:	58 f4       	brcc	.+22     	; 0x3aae <defaultLoop()+0x8a>
    3a98:	88 32       	cpi	r24, 0x28	; 40
    3a9a:	09 f4       	brne	.+2      	; 0x3a9e <defaultLoop()+0x7a>
    3a9c:	53 c0       	rjmp	.+166    	; 0x3b44 <defaultLoop()+0x120>
    3a9e:	8d 32       	cpi	r24, 0x2D	; 45
    3aa0:	d9 f6       	brne	.-74     	; 0x3a58 <defaultLoop()+0x34>
    3aa2:	62 e3       	ldi	r22, 0x32	; 50
    3aa4:	80 e1       	ldi	r24, 0x10	; 16
    3aa6:	97 e2       	ldi	r25, 0x27	; 39
    3aa8:	0e 94 7f 10 	call	0x20fe	; 0x20fe <progOutline(unsigned int, unsigned char)>
    3aac:	d5 cf       	rjmp	.-86     	; 0x3a58 <defaultLoop()+0x34>
    3aae:	8c 33       	cpi	r24, 0x3C	; 60
    3ab0:	09 f4       	brne	.+2      	; 0x3ab4 <defaultLoop()+0x90>
    3ab2:	55 c0       	rjmp	.+170    	; 0x3b5e <defaultLoop()+0x13a>
    3ab4:	84 36       	cpi	r24, 0x64	; 100
    3ab6:	09 f4       	brne	.+2      	; 0x3aba <defaultLoop()+0x96>
    3ab8:	58 c0       	rjmp	.+176    	; 0x3b6a <defaultLoop()+0x146>
    3aba:	87 33       	cpi	r24, 0x37	; 55
    3abc:	69 f6       	brne	.-102    	; 0x3a58 <defaultLoop()+0x34>
    3abe:	44 ef       	ldi	r20, 0xF4	; 244
    3ac0:	51 e0       	ldi	r21, 0x01	; 1
    3ac2:	6c e3       	ldi	r22, 0x3C	; 60
    3ac4:	88 e9       	ldi	r24, 0x98	; 152
    3ac6:	9a e3       	ldi	r25, 0x3A	; 58
    3ac8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3acc:	c5 cf       	rjmp	.-118    	; 0x3a58 <defaultLoop()+0x34>
    3ace:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    3ad2:	7c 01       	movw	r14, r24
    3ad4:	6e e9       	ldi	r22, 0x9E	; 158
    3ad6:	72 e0       	ldi	r23, 0x02	; 2
    3ad8:	ce 01       	movw	r24, r28
    3ada:	01 96       	adiw	r24, 0x01	; 1
    3adc:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    3ae0:	05 e0       	ldi	r16, 0x05	; 5
    3ae2:	97 01       	movw	r18, r14
    3ae4:	4a e5       	ldi	r20, 0x5A	; 90
    3ae6:	50 e0       	ldi	r21, 0x00	; 0
    3ae8:	6c e2       	ldi	r22, 0x2C	; 44
    3aea:	7c e4       	ldi	r23, 0x4C	; 76
    3aec:	ce 01       	movw	r24, r28
    3aee:	01 96       	adiw	r24, 0x01	; 1
    3af0:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3af4:	ce 01       	movw	r24, r28
    3af6:	01 96       	adiw	r24, 0x01	; 1
    3af8:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    3afc:	ad cf       	rjmp	.-166    	; 0x3a58 <defaultLoop()+0x34>
    3afe:	6a e0       	ldi	r22, 0x0A	; 10
    3b00:	80 e3       	ldi	r24, 0x30	; 48
    3b02:	95 e7       	ldi	r25, 0x75	; 117
    3b04:	db d9       	rcall	.-3146   	; 0x2ebc <progMatrixHorizontal(unsigned int, unsigned char)>
    3b06:	a8 cf       	rjmp	.-176    	; 0x3a58 <defaultLoop()+0x34>
    3b08:	4f e0       	ldi	r20, 0x0F	; 15
    3b0a:	60 ed       	ldi	r22, 0xD0	; 208
    3b0c:	77 e0       	ldi	r23, 0x07	; 7
    3b0e:	88 e9       	ldi	r24, 0x98	; 152
    3b10:	9a e3       	ldi	r25, 0x3A	; 58
    3b12:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    3b16:	a0 cf       	rjmp	.-192    	; 0x3a58 <defaultLoop()+0x34>
    3b18:	69 e1       	ldi	r22, 0x19	; 25
    3b1a:	88 e9       	ldi	r24, 0x98	; 152
    3b1c:	9a e3       	ldi	r25, 0x3A	; 58
    3b1e:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    3b22:	9a cf       	rjmp	.-204    	; 0x3a58 <defaultLoop()+0x34>
    3b24:	40 ed       	ldi	r20, 0xD0	; 208
    3b26:	57 e0       	ldi	r21, 0x07	; 7
    3b28:	63 e2       	ldi	r22, 0x23	; 35
    3b2a:	88 e9       	ldi	r24, 0x98	; 152
    3b2c:	9a e3       	ldi	r25, 0x3A	; 58
    3b2e:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3b32:	92 cf       	rjmp	.-220    	; 0x3a58 <defaultLoop()+0x34>
    3b34:	48 ee       	ldi	r20, 0xE8	; 232
    3b36:	53 e0       	ldi	r21, 0x03	; 3
    3b38:	68 e2       	ldi	r22, 0x28	; 40
    3b3a:	88 e9       	ldi	r24, 0x98	; 152
    3b3c:	9a e3       	ldi	r25, 0x3A	; 58
    3b3e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    3b42:	8a cf       	rjmp	.-236    	; 0x3a58 <defaultLoop()+0x34>
    3b44:	4d e2       	ldi	r20, 0x2D	; 45
    3b46:	65 e0       	ldi	r22, 0x05	; 5
    3b48:	88 e9       	ldi	r24, 0x98	; 152
    3b4a:	9a e3       	ldi	r25, 0x3A	; 58
    3b4c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3b50:	83 cf       	rjmp	.-250    	; 0x3a58 <defaultLoop()+0x34>
    3b52:	67 e3       	ldi	r22, 0x37	; 55
    3b54:	80 e1       	ldi	r24, 0x10	; 16
    3b56:	97 e2       	ldi	r25, 0x27	; 39
    3b58:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    3b5c:	7d cf       	rjmp	.-262    	; 0x3a58 <defaultLoop()+0x34>
    3b5e:	49 ec       	ldi	r20, 0xC9	; 201
    3b60:	5d e1       	ldi	r21, 0x1D	; 29
    3b62:	64 e6       	ldi	r22, 0x64	; 100
    3b64:	80 e6       	ldi	r24, 0x60	; 96
    3b66:	9a ee       	ldi	r25, 0xEA	; 234
    3b68:	90 cf       	rjmp	.-224    	; 0x3a8a <defaultLoop()+0x66>
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	8a ed       	ldi	r24, 0xDA	; 218
    3b6e:	90 e1       	ldi	r25, 0x10	; 16
    3b70:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    3b74:	80 e0       	ldi	r24, 0x00	; 0
    3b76:	5e de       	rcall	.-836    	; 0x3834 <switchToSong(unsigned char)>
    3b78:	6f cf       	rjmp	.-290    	; 0x3a58 <defaultLoop()+0x34>

00003b7a <LearnToFly()>:
    3b7a:	ef 92       	push	r14
    3b7c:	ff 92       	push	r15
    3b7e:	0f 93       	push	r16
    3b80:	1f 93       	push	r17
    3b82:	cf 93       	push	r28
    3b84:	df 93       	push	r29
    3b86:	00 d0       	rcall	.+0      	; 0x3b88 <LearnToFly()+0xe>
    3b88:	00 d0       	rcall	.+0      	; 0x3b8a <LearnToFly()+0x10>
    3b8a:	00 d0       	rcall	.+0      	; 0x3b8c <LearnToFly()+0x12>
    3b8c:	1f 92       	push	r1
    3b8e:	cd b7       	in	r28, 0x3d	; 61
    3b90:	de b7       	in	r29, 0x3e	; 62
    3b92:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    3b96:	89 31       	cpi	r24, 0x19	; 25
    3b98:	09 f4       	brne	.+2      	; 0x3b9c <LearnToFly()+0x22>
    3b9a:	87 c0       	rjmp	.+270    	; 0x3caa <LearnToFly()+0x130>
    3b9c:	38 f5       	brcc	.+78     	; 0x3bec <LearnToFly()+0x72>
    3b9e:	85 30       	cpi	r24, 0x05	; 5
    3ba0:	09 f4       	brne	.+2      	; 0x3ba4 <LearnToFly()+0x2a>
    3ba2:	6f c0       	rjmp	.+222    	; 0x3c82 <LearnToFly()+0x108>
    3ba4:	98 f4       	brcc	.+38     	; 0x3bcc <LearnToFly()+0x52>
    3ba6:	88 23       	and	r24, r24
    3ba8:	09 f4       	brne	.+2      	; 0x3bac <LearnToFly()+0x32>
    3baa:	4b c0       	rjmp	.+150    	; 0x3c42 <LearnToFly()+0xc8>
    3bac:	82 30       	cpi	r24, 0x02	; 2
    3bae:	09 f4       	brne	.+2      	; 0x3bb2 <LearnToFly()+0x38>
    3bb0:	60 c0       	rjmp	.+192    	; 0x3c72 <LearnToFly()+0xf8>
    3bb2:	27 96       	adiw	r28, 0x07	; 7
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	df 91       	pop	r29
    3bc0:	cf 91       	pop	r28
    3bc2:	1f 91       	pop	r17
    3bc4:	0f 91       	pop	r16
    3bc6:	ff 90       	pop	r15
    3bc8:	ef 90       	pop	r14
    3bca:	08 95       	ret
    3bcc:	8f 30       	cpi	r24, 0x0F	; 15
    3bce:	09 f4       	brne	.+2      	; 0x3bd2 <LearnToFly()+0x58>
    3bd0:	5e c0       	rjmp	.+188    	; 0x3c8e <LearnToFly()+0x114>
    3bd2:	84 31       	cpi	r24, 0x14	; 20
    3bd4:	09 f4       	brne	.+2      	; 0x3bd8 <LearnToFly()+0x5e>
    3bd6:	61 c0       	rjmp	.+194    	; 0x3c9a <LearnToFly()+0x120>
    3bd8:	8a 30       	cpi	r24, 0x0A	; 10
    3bda:	59 f7       	brne	.-42     	; 0x3bb2 <LearnToFly()+0x38>
    3bdc:	49 ea       	ldi	r20, 0xA9	; 169
    3bde:	51 e0       	ldi	r21, 0x01	; 1
    3be0:	6f e0       	ldi	r22, 0x0F	; 15
    3be2:	82 e8       	ldi	r24, 0x82	; 130
    3be4:	90 e6       	ldi	r25, 0x60	; 96
    3be6:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    3bea:	e3 cf       	rjmp	.-58     	; 0x3bb2 <LearnToFly()+0x38>
    3bec:	8d 32       	cpi	r24, 0x2D	; 45
    3bee:	09 f4       	brne	.+2      	; 0x3bf2 <LearnToFly()+0x78>
    3bf0:	76 c0       	rjmp	.+236    	; 0x3cde <LearnToFly()+0x164>
    3bf2:	80 f4       	brcc	.+32     	; 0x3c14 <LearnToFly()+0x9a>
    3bf4:	83 32       	cpi	r24, 0x23	; 35
    3bf6:	09 f4       	brne	.+2      	; 0x3bfa <LearnToFly()+0x80>
    3bf8:	5f c0       	rjmp	.+190    	; 0x3cb8 <LearnToFly()+0x13e>
    3bfa:	88 32       	cpi	r24, 0x28	; 40
    3bfc:	09 f4       	brne	.+2      	; 0x3c00 <LearnToFly()+0x86>
    3bfe:	6b c0       	rjmp	.+214    	; 0x3cd6 <LearnToFly()+0x15c>
    3c00:	8e 31       	cpi	r24, 0x1E	; 30
    3c02:	b9 f6       	brne	.-82     	; 0x3bb2 <LearnToFly()+0x38>
    3c04:	49 ec       	ldi	r20, 0xC9	; 201
    3c06:	5d e1       	ldi	r21, 0x1D	; 29
    3c08:	63 e2       	ldi	r22, 0x23	; 35
    3c0a:	8b e4       	ldi	r24, 0x4B	; 75
    3c0c:	9e e6       	ldi	r25, 0x6E	; 110
    3c0e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    3c12:	cf cf       	rjmp	.-98     	; 0x3bb2 <LearnToFly()+0x38>
    3c14:	87 33       	cpi	r24, 0x37	; 55
    3c16:	09 f4       	brne	.+2      	; 0x3c1a <LearnToFly()+0xa0>
    3c18:	67 c0       	rjmp	.+206    	; 0x3ce8 <LearnToFly()+0x16e>
    3c1a:	84 36       	cpi	r24, 0x64	; 100
    3c1c:	09 f4       	brne	.+2      	; 0x3c20 <LearnToFly()+0xa6>
    3c1e:	6a c0       	rjmp	.+212    	; 0x3cf4 <LearnToFly()+0x17a>
    3c20:	82 33       	cpi	r24, 0x32	; 50
    3c22:	39 f6       	brne	.-114    	; 0x3bb2 <LearnToFly()+0x38>
    3c24:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3c28:	7c 01       	movw	r14, r24
    3c2a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3c2e:	8c 01       	movw	r16, r24
    3c30:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3c34:	9c 01       	movw	r18, r24
    3c36:	4b e4       	ldi	r20, 0x4B	; 75
    3c38:	50 e0       	ldi	r21, 0x00	; 0
    3c3a:	67 e3       	ldi	r22, 0x37	; 55
    3c3c:	86 e2       	ldi	r24, 0x26	; 38
    3c3e:	97 e3       	ldi	r25, 0x37	; 55
    3c40:	47 c0       	rjmp	.+142    	; 0x3cd0 <LearnToFly()+0x156>
    3c42:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    3c46:	7c 01       	movw	r14, r24
    3c48:	69 e5       	ldi	r22, 0x59	; 89
    3c4a:	71 e0       	ldi	r23, 0x01	; 1
    3c4c:	ce 01       	movw	r24, r28
    3c4e:	01 96       	adiw	r24, 0x01	; 1
    3c50:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    3c54:	02 e0       	ldi	r16, 0x02	; 2
    3c56:	97 01       	movw	r18, r14
    3c58:	4b e4       	ldi	r20, 0x4B	; 75
    3c5a:	50 e0       	ldi	r21, 0x00	; 0
    3c5c:	6c e6       	ldi	r22, 0x6C	; 108
    3c5e:	75 e3       	ldi	r23, 0x35	; 53
    3c60:	ce 01       	movw	r24, r28
    3c62:	01 96       	adiw	r24, 0x01	; 1
    3c64:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3c68:	ce 01       	movw	r24, r28
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    3c70:	a0 cf       	rjmp	.-192    	; 0x3bb2 <LearnToFly()+0x38>
    3c72:	45 e0       	ldi	r20, 0x05	; 5
    3c74:	68 eb       	ldi	r22, 0xB8	; 184
    3c76:	71 e0       	ldi	r23, 0x01	; 1
    3c78:	83 e9       	ldi	r24, 0x93	; 147
    3c7a:	9b e1       	ldi	r25, 0x1B	; 27
    3c7c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    3c80:	98 cf       	rjmp	.-208    	; 0x3bb2 <LearnToFly()+0x38>
    3c82:	6a e0       	ldi	r22, 0x0A	; 10
    3c84:	8b e4       	ldi	r24, 0x4B	; 75
    3c86:	9e e6       	ldi	r25, 0x6E	; 110
    3c88:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    3c8c:	92 cf       	rjmp	.-220    	; 0x3bb2 <LearnToFly()+0x38>
    3c8e:	64 e1       	ldi	r22, 0x14	; 20
    3c90:	86 e2       	ldi	r24, 0x26	; 38
    3c92:	97 e3       	ldi	r25, 0x37	; 55
    3c94:	0e 94 21 0e 	call	0x1c42	; 0x1c42 <progStern(unsigned int, unsigned char)>
    3c98:	8c cf       	rjmp	.-232    	; 0x3bb2 <LearnToFly()+0x38>
    3c9a:	49 ea       	ldi	r20, 0xA9	; 169
    3c9c:	51 e0       	ldi	r21, 0x01	; 1
    3c9e:	69 e1       	ldi	r22, 0x19	; 25
    3ca0:	8b e4       	ldi	r24, 0x4B	; 75
    3ca2:	9e e6       	ldi	r25, 0x6E	; 110
    3ca4:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3ca8:	84 cf       	rjmp	.-248    	; 0x3bb2 <LearnToFly()+0x38>
    3caa:	4e e1       	ldi	r20, 0x1E	; 30
    3cac:	65 e0       	ldi	r22, 0x05	; 5
    3cae:	80 e3       	ldi	r24, 0x30	; 48
    3cb0:	95 e7       	ldi	r25, 0x75	; 117
    3cb2:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3cb6:	7d cf       	rjmp	.-262    	; 0x3bb2 <LearnToFly()+0x38>
    3cb8:	ee 24       	eor	r14, r14
    3cba:	ea 94       	dec	r14
    3cbc:	f1 2c       	mov	r15, r1
    3cbe:	0f ef       	ldi	r16, 0xFF	; 255
    3cc0:	10 e0       	ldi	r17, 0x00	; 0
    3cc2:	2f ef       	ldi	r18, 0xFF	; 255
    3cc4:	30 e0       	ldi	r19, 0x00	; 0
    3cc6:	4b e4       	ldi	r20, 0x4B	; 75
    3cc8:	50 e0       	ldi	r21, 0x00	; 0
    3cca:	68 e2       	ldi	r22, 0x28	; 40
    3ccc:	89 ec       	ldi	r24, 0xC9	; 201
    3cce:	9d e0       	ldi	r25, 0x0D	; 13
    3cd0:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3cd4:	6e cf       	rjmp	.-292    	; 0x3bb2 <LearnToFly()+0x38>
    3cd6:	49 ea       	ldi	r20, 0xA9	; 169
    3cd8:	51 e0       	ldi	r21, 0x01	; 1
    3cda:	6d e2       	ldi	r22, 0x2D	; 45
    3cdc:	82 cf       	rjmp	.-252    	; 0x3be2 <LearnToFly()+0x68>
    3cde:	42 e3       	ldi	r20, 0x32	; 50
    3ce0:	65 e0       	ldi	r22, 0x05	; 5
    3ce2:	88 eb       	ldi	r24, 0xB8	; 184
    3ce4:	92 e5       	ldi	r25, 0x52	; 82
    3ce6:	e5 cf       	rjmp	.-54     	; 0x3cb2 <LearnToFly()+0x138>
    3ce8:	49 ec       	ldi	r20, 0xC9	; 201
    3cea:	5d e1       	ldi	r21, 0x1D	; 29
    3cec:	64 e6       	ldi	r22, 0x64	; 100
    3cee:	8f ef       	ldi	r24, 0xFF	; 255
    3cf0:	9f ef       	ldi	r25, 0xFF	; 255
    3cf2:	8d cf       	rjmp	.-230    	; 0x3c0e <LearnToFly()+0x94>
    3cf4:	60 e0       	ldi	r22, 0x00	; 0
    3cf6:	8a ed       	ldi	r24, 0xDA	; 218
    3cf8:	90 e1       	ldi	r25, 0x10	; 16
    3cfa:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    3cfe:	80 e0       	ldi	r24, 0x00	; 0
    3d00:	99 dd       	rcall	.-1230   	; 0x3834 <switchToSong(unsigned char)>
    3d02:	57 cf       	rjmp	.-338    	; 0x3bb2 <LearnToFly()+0x38>

00003d04 <Castle()>:
    3d04:	ef 92       	push	r14
    3d06:	ff 92       	push	r15
    3d08:	0f 93       	push	r16
    3d0a:	1f 93       	push	r17
    3d0c:	cf 93       	push	r28
    3d0e:	df 93       	push	r29
    3d10:	00 d0       	rcall	.+0      	; 0x3d12 <Castle()+0xe>
    3d12:	00 d0       	rcall	.+0      	; 0x3d14 <Castle()+0x10>
    3d14:	00 d0       	rcall	.+0      	; 0x3d16 <Castle()+0x12>
    3d16:	1f 92       	push	r1
    3d18:	cd b7       	in	r28, 0x3d	; 61
    3d1a:	de b7       	in	r29, 0x3e	; 62
    3d1c:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    3d20:	82 33       	cpi	r24, 0x32	; 50
    3d22:	09 f4       	brne	.+2      	; 0x3d26 <Castle()+0x22>
    3d24:	eb c0       	rjmp	.+470    	; 0x3efc <Castle()+0x1f8>
    3d26:	08 f0       	brcs	.+2      	; 0x3d2a <Castle()+0x26>
    3d28:	49 c0       	rjmp	.+146    	; 0x3dbc <Castle()+0xb8>
    3d2a:	84 31       	cpi	r24, 0x14	; 20
    3d2c:	09 f4       	brne	.+2      	; 0x3d30 <Castle()+0x2c>
    3d2e:	c8 c0       	rjmp	.+400    	; 0x3ec0 <Castle()+0x1bc>
    3d30:	10 f5       	brcc	.+68     	; 0x3d76 <Castle()+0x72>
    3d32:	85 30       	cpi	r24, 0x05	; 5
    3d34:	09 f4       	brne	.+2      	; 0x3d38 <Castle()+0x34>
    3d36:	b6 c0       	rjmp	.+364    	; 0x3ea4 <Castle()+0x1a0>
    3d38:	98 f4       	brcc	.+38     	; 0x3d60 <Castle()+0x5c>
    3d3a:	88 23       	and	r24, r24
    3d3c:	09 f4       	brne	.+2      	; 0x3d40 <Castle()+0x3c>
    3d3e:	92 c0       	rjmp	.+292    	; 0x3e64 <Castle()+0x160>
    3d40:	81 30       	cpi	r24, 0x01	; 1
    3d42:	09 f4       	brne	.+2      	; 0x3d46 <Castle()+0x42>
    3d44:	a7 c0       	rjmp	.+334    	; 0x3e94 <Castle()+0x190>
    3d46:	27 96       	adiw	r28, 0x07	; 7
    3d48:	0f b6       	in	r0, 0x3f	; 63
    3d4a:	f8 94       	cli
    3d4c:	de bf       	out	0x3e, r29	; 62
    3d4e:	0f be       	out	0x3f, r0	; 63
    3d50:	cd bf       	out	0x3d, r28	; 61
    3d52:	df 91       	pop	r29
    3d54:	cf 91       	pop	r28
    3d56:	1f 91       	pop	r17
    3d58:	0f 91       	pop	r16
    3d5a:	ff 90       	pop	r15
    3d5c:	ef 90       	pop	r14
    3d5e:	08 95       	ret
    3d60:	8a 30       	cpi	r24, 0x0A	; 10
    3d62:	09 f4       	brne	.+2      	; 0x3d66 <Castle()+0x62>
    3d64:	a7 c0       	rjmp	.+334    	; 0x3eb4 <Castle()+0x1b0>
    3d66:	8f 30       	cpi	r24, 0x0F	; 15
    3d68:	71 f7       	brne	.-36     	; 0x3d46 <Castle()+0x42>
    3d6a:	64 e1       	ldi	r22, 0x14	; 20
    3d6c:	87 ee       	ldi	r24, 0xE7	; 231
    3d6e:	90 e4       	ldi	r25, 0x40	; 64
    3d70:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    3d74:	e8 cf       	rjmp	.-48     	; 0x3d46 <Castle()+0x42>
    3d76:	83 32       	cpi	r24, 0x23	; 35
    3d78:	09 f4       	brne	.+2      	; 0x3d7c <Castle()+0x78>
    3d7a:	b8 c0       	rjmp	.+368    	; 0x3eec <Castle()+0x1e8>
    3d7c:	b0 f4       	brcc	.+44     	; 0x3daa <Castle()+0xa6>
    3d7e:	89 31       	cpi	r24, 0x19	; 25
    3d80:	09 f4       	brne	.+2      	; 0x3d84 <Castle()+0x80>
    3d82:	ae c0       	rjmp	.+348    	; 0x3ee0 <Castle()+0x1dc>
    3d84:	8e 31       	cpi	r24, 0x1E	; 30
    3d86:	f9 f6       	brne	.-66     	; 0x3d46 <Castle()+0x42>
    3d88:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3d8c:	7c 01       	movw	r14, r24
    3d8e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3d92:	8c 01       	movw	r16, r24
    3d94:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3d98:	9c 01       	movw	r18, r24
    3d9a:	42 e3       	ldi	r20, 0x32	; 50
    3d9c:	50 e0       	ldi	r21, 0x00	; 0
    3d9e:	63 e2       	ldi	r22, 0x23	; 35
    3da0:	86 e3       	ldi	r24, 0x36	; 54
    3da2:	97 e0       	ldi	r25, 0x07	; 7
    3da4:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3da8:	ce cf       	rjmp	.-100    	; 0x3d46 <Castle()+0x42>
    3daa:	88 32       	cpi	r24, 0x28	; 40
    3dac:	09 f4       	brne	.+2      	; 0x3db0 <Castle()+0xac>
    3dae:	a4 c0       	rjmp	.+328    	; 0x3ef8 <Castle()+0x1f4>
    3db0:	8d 32       	cpi	r24, 0x2D	; 45
    3db2:	49 f6       	brne	.-110    	; 0x3d46 <Castle()+0x42>
    3db4:	62 e3       	ldi	r22, 0x32	; 50
    3db6:	8b e7       	ldi	r24, 0x7B	; 123
    3db8:	92 e3       	ldi	r25, 0x32	; 50
    3dba:	da cf       	rjmp	.-76     	; 0x3d70 <Castle()+0x6c>
    3dbc:	86 34       	cpi	r24, 0x46	; 70
    3dbe:	09 f4       	brne	.+2      	; 0x3dc2 <Castle()+0xbe>
    3dc0:	b8 c0       	rjmp	.+368    	; 0x3f32 <Castle()+0x22e>
    3dc2:	50 f5       	brcc	.+84     	; 0x3e18 <Castle()+0x114>
    3dc4:	8a 33       	cpi	r24, 0x3A	; 58
    3dc6:	09 f4       	brne	.+2      	; 0x3dca <Castle()+0xc6>
    3dc8:	a6 c0       	rjmp	.+332    	; 0x3f16 <Castle()+0x212>
    3dca:	98 f4       	brcc	.+38     	; 0x3df2 <Castle()+0xee>
    3dcc:	87 33       	cpi	r24, 0x37	; 55
    3dce:	09 f4       	brne	.+2      	; 0x3dd2 <Castle()+0xce>
    3dd0:	9a c0       	rjmp	.+308    	; 0x3f06 <Castle()+0x202>
    3dd2:	88 33       	cpi	r24, 0x38	; 56
    3dd4:	09 f0       	breq	.+2      	; 0x3dd8 <Castle()+0xd4>
    3dd6:	b7 cf       	rjmp	.-146    	; 0x3d46 <Castle()+0x42>
    3dd8:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3ddc:	7c 01       	movw	r14, r24
    3dde:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3de2:	8c 01       	movw	r16, r24
    3de4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3de8:	9c 01       	movw	r18, r24
    3dea:	42 e3       	ldi	r20, 0x32	; 50
    3dec:	50 e0       	ldi	r21, 0x00	; 0
    3dee:	6a e3       	ldi	r22, 0x3A	; 58
    3df0:	d7 cf       	rjmp	.-82     	; 0x3da0 <Castle()+0x9c>
    3df2:	8c 33       	cpi	r24, 0x3C	; 60
    3df4:	09 f4       	brne	.+2      	; 0x3df8 <Castle()+0xf4>
    3df6:	95 c0       	rjmp	.+298    	; 0x3f22 <Castle()+0x21e>
    3df8:	81 34       	cpi	r24, 0x41	; 65
    3dfa:	09 f0       	breq	.+2      	; 0x3dfe <Castle()+0xfa>
    3dfc:	a4 cf       	rjmp	.-184    	; 0x3d46 <Castle()+0x42>
    3dfe:	ee 24       	eor	r14, r14
    3e00:	ea 94       	dec	r14
    3e02:	f1 2c       	mov	r15, r1
    3e04:	0f ef       	ldi	r16, 0xFF	; 255
    3e06:	10 e0       	ldi	r17, 0x00	; 0
    3e08:	2f ef       	ldi	r18, 0xFF	; 255
    3e0a:	30 e0       	ldi	r19, 0x00	; 0
    3e0c:	42 e3       	ldi	r20, 0x32	; 50
    3e0e:	50 e0       	ldi	r21, 0x00	; 0
    3e10:	66 e4       	ldi	r22, 0x46	; 70
    3e12:	8c e6       	ldi	r24, 0x6C	; 108
    3e14:	9e e0       	ldi	r25, 0x0E	; 14
    3e16:	c6 cf       	rjmp	.-116    	; 0x3da4 <Castle()+0xa0>
    3e18:	85 35       	cpi	r24, 0x55	; 85
    3e1a:	09 f4       	brne	.+2      	; 0x3e1e <Castle()+0x11a>
    3e1c:	9f c0       	rjmp	.+318    	; 0x3f5c <Castle()+0x258>
    3e1e:	98 f4       	brcc	.+38     	; 0x3e46 <Castle()+0x142>
    3e20:	8b 34       	cpi	r24, 0x4B	; 75
    3e22:	09 f4       	brne	.+2      	; 0x3e26 <Castle()+0x122>
    3e24:	95 c0       	rjmp	.+298    	; 0x3f50 <Castle()+0x24c>
    3e26:	80 35       	cpi	r24, 0x50	; 80
    3e28:	09 f0       	breq	.+2      	; 0x3e2c <Castle()+0x128>
    3e2a:	8d cf       	rjmp	.-230    	; 0x3d46 <Castle()+0x42>
    3e2c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3e30:	7c 01       	movw	r14, r24
    3e32:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3e36:	8c 01       	movw	r16, r24
    3e38:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3e3c:	9c 01       	movw	r18, r24
    3e3e:	42 e3       	ldi	r20, 0x32	; 50
    3e40:	50 e0       	ldi	r21, 0x00	; 0
    3e42:	65 e5       	ldi	r22, 0x55	; 85
    3e44:	e6 cf       	rjmp	.-52     	; 0x3e12 <Castle()+0x10e>
    3e46:	8f 35       	cpi	r24, 0x5F	; 95
    3e48:	09 f4       	brne	.+2      	; 0x3e4c <Castle()+0x148>
    3e4a:	8f c0       	rjmp	.+286    	; 0x3f6a <Castle()+0x266>
    3e4c:	84 36       	cpi	r24, 0x64	; 100
    3e4e:	09 f4       	brne	.+2      	; 0x3e52 <Castle()+0x14e>
    3e50:	98 c0       	rjmp	.+304    	; 0x3f82 <Castle()+0x27e>
    3e52:	8a 35       	cpi	r24, 0x5A	; 90
    3e54:	09 f0       	breq	.+2      	; 0x3e58 <Castle()+0x154>
    3e56:	77 cf       	rjmp	.-274    	; 0x3d46 <Castle()+0x42>
    3e58:	42 ec       	ldi	r20, 0xC2	; 194
    3e5a:	51 e0       	ldi	r21, 0x01	; 1
    3e5c:	6f e5       	ldi	r22, 0x5F	; 95
    3e5e:	87 ec       	ldi	r24, 0xC7	; 199
    3e60:	9f e6       	ldi	r25, 0x6F	; 111
    3e62:	25 c0       	rjmp	.+74     	; 0x3eae <Castle()+0x1aa>
    3e64:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    3e68:	7c 01       	movw	r14, r24
    3e6a:	66 e7       	ldi	r22, 0x76	; 118
    3e6c:	71 e0       	ldi	r23, 0x01	; 1
    3e6e:	ce 01       	movw	r24, r28
    3e70:	01 96       	adiw	r24, 0x01	; 1
    3e72:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    3e76:	01 e0       	ldi	r16, 0x01	; 1
    3e78:	97 01       	movw	r18, r14
    3e7a:	44 e6       	ldi	r20, 0x64	; 100
    3e7c:	50 e0       	ldi	r21, 0x00	; 0
    3e7e:	6b e7       	ldi	r22, 0x7B	; 123
    3e80:	72 e3       	ldi	r23, 0x32	; 50
    3e82:	ce 01       	movw	r24, r28
    3e84:	01 96       	adiw	r24, 0x01	; 1
    3e86:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3e8a:	ce 01       	movw	r24, r28
    3e8c:	01 96       	adiw	r24, 0x01	; 1
    3e8e:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    3e92:	59 cf       	rjmp	.-334    	; 0x3d46 <Castle()+0x42>
    3e94:	49 ec       	ldi	r20, 0xC9	; 201
    3e96:	5d e1       	ldi	r21, 0x1D	; 29
    3e98:	65 e0       	ldi	r22, 0x05	; 5
    3e9a:	89 ed       	ldi	r24, 0xD9	; 217
    3e9c:	9c e1       	ldi	r25, 0x1C	; 28
    3e9e:	0e 94 1a 0a 	call	0x1434	; 0x1434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    3ea2:	51 cf       	rjmp	.-350    	; 0x3d46 <Castle()+0x42>
    3ea4:	4d e9       	ldi	r20, 0x9D	; 157
    3ea6:	53 e0       	ldi	r21, 0x03	; 3
    3ea8:	6a e0       	ldi	r22, 0x0A	; 10
    3eaa:	89 ed       	ldi	r24, 0xD9	; 217
    3eac:	9c e1       	ldi	r25, 0x1C	; 28
    3eae:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    3eb2:	49 cf       	rjmp	.-366    	; 0x3d46 <Castle()+0x42>
    3eb4:	6f e0       	ldi	r22, 0x0F	; 15
    3eb6:	82 e6       	ldi	r24, 0x62	; 98
    3eb8:	93 e7       	ldi	r25, 0x73	; 115
    3eba:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    3ebe:	43 cf       	rjmp	.-378    	; 0x3d46 <Castle()+0x42>
    3ec0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    3ec4:	59 e1       	ldi	r21, 0x19	; 25
    3ec6:	e5 2e       	mov	r14, r21
    3ec8:	8c 01       	movw	r16, r24
    3eca:	26 e3       	ldi	r18, 0x36	; 54
    3ecc:	37 e0       	ldi	r19, 0x07	; 7
    3ece:	45 e4       	ldi	r20, 0x45	; 69
    3ed0:	51 e0       	ldi	r21, 0x01	; 1
    3ed2:	66 e0       	ldi	r22, 0x06	; 6
    3ed4:	70 e0       	ldi	r23, 0x00	; 0
    3ed6:	8c ef       	ldi	r24, 0xFC	; 252
    3ed8:	99 e0       	ldi	r25, 0x09	; 9
    3eda:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    3ede:	33 cf       	rjmp	.-410    	; 0x3d46 <Castle()+0x42>
    3ee0:	42 ec       	ldi	r20, 0xC2	; 194
    3ee2:	51 e0       	ldi	r21, 0x01	; 1
    3ee4:	6e e1       	ldi	r22, 0x1E	; 30
    3ee6:	8b e7       	ldi	r24, 0x7B	; 123
    3ee8:	92 e3       	ldi	r25, 0x32	; 50
    3eea:	e1 cf       	rjmp	.-62     	; 0x3eae <Castle()+0x1aa>
    3eec:	42 ec       	ldi	r20, 0xC2	; 194
    3eee:	51 e0       	ldi	r21, 0x01	; 1
    3ef0:	68 e2       	ldi	r22, 0x28	; 40
    3ef2:	81 eb       	ldi	r24, 0xB1	; 177
    3ef4:	99 e3       	ldi	r25, 0x39	; 57
    3ef6:	db cf       	rjmp	.-74     	; 0x3eae <Castle()+0x1aa>
    3ef8:	6d e2       	ldi	r22, 0x2D	; 45
    3efa:	dd cf       	rjmp	.-70     	; 0x3eb6 <Castle()+0x1b2>
    3efc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    3f00:	47 e3       	ldi	r20, 0x37	; 55
    3f02:	e4 2e       	mov	r14, r20
    3f04:	e1 cf       	rjmp	.-62     	; 0x3ec8 <Castle()+0x1c4>
    3f06:	42 ec       	ldi	r20, 0xC2	; 194
    3f08:	51 e0       	ldi	r21, 0x01	; 1
    3f0a:	68 e3       	ldi	r22, 0x38	; 56
    3f0c:	8b e7       	ldi	r24, 0x7B	; 123
    3f0e:	92 e3       	ldi	r25, 0x32	; 50
    3f10:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3f14:	18 cf       	rjmp	.-464    	; 0x3d46 <Castle()+0x42>
    3f16:	42 ec       	ldi	r20, 0xC2	; 194
    3f18:	51 e0       	ldi	r21, 0x01	; 1
    3f1a:	6c e3       	ldi	r22, 0x3C	; 60
    3f1c:	81 eb       	ldi	r24, 0xB1	; 177
    3f1e:	99 e3       	ldi	r25, 0x39	; 57
    3f20:	f7 cf       	rjmp	.-18     	; 0x3f10 <Castle()+0x20c>
    3f22:	41 e4       	ldi	r20, 0x41	; 65
    3f24:	6a e3       	ldi	r22, 0x3A	; 58
    3f26:	77 e0       	ldi	r23, 0x07	; 7
    3f28:	86 e8       	ldi	r24, 0x86	; 134
    3f2a:	9d e4       	ldi	r25, 0x4D	; 77
    3f2c:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    3f30:	0a cf       	rjmp	.-492    	; 0x3d46 <Castle()+0x42>
    3f32:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3f36:	7c 01       	movw	r14, r24
    3f38:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3f3c:	8c 01       	movw	r16, r24
    3f3e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    3f42:	9c 01       	movw	r18, r24
    3f44:	42 e3       	ldi	r20, 0x32	; 50
    3f46:	50 e0       	ldi	r21, 0x00	; 0
    3f48:	6b e4       	ldi	r22, 0x4B	; 75
    3f4a:	80 e7       	ldi	r24, 0x70	; 112
    3f4c:	97 e1       	ldi	r25, 0x17	; 23
    3f4e:	2a cf       	rjmp	.-428    	; 0x3da4 <Castle()+0xa0>
    3f50:	40 e5       	ldi	r20, 0x50	; 80
    3f52:	6a e3       	ldi	r22, 0x3A	; 58
    3f54:	77 e0       	ldi	r23, 0x07	; 7
    3f56:	81 eb       	ldi	r24, 0xB1	; 177
    3f58:	99 e3       	ldi	r25, 0x39	; 57
    3f5a:	e8 cf       	rjmp	.-48     	; 0x3f2c <Castle()+0x228>
    3f5c:	4a e5       	ldi	r20, 0x5A	; 90
    3f5e:	65 e0       	ldi	r22, 0x05	; 5
    3f60:	82 e6       	ldi	r24, 0x62	; 98
    3f62:	93 e7       	ldi	r25, 0x73	; 115
    3f64:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3f68:	ee ce       	rjmp	.-548    	; 0x3d46 <Castle()+0x42>
    3f6a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    3f6e:	29 e0       	ldi	r18, 0x09	; 9
    3f70:	e2 2e       	mov	r14, r18
    3f72:	8c 01       	movw	r16, r24
    3f74:	20 e6       	ldi	r18, 0x60	; 96
    3f76:	3a ee       	ldi	r19, 0xEA	; 234
    3f78:	45 e4       	ldi	r20, 0x45	; 69
    3f7a:	51 e0       	ldi	r21, 0x01	; 1
    3f7c:	64 e6       	ldi	r22, 0x64	; 100
    3f7e:	70 e0       	ldi	r23, 0x00	; 0
    3f80:	aa cf       	rjmp	.-172    	; 0x3ed6 <Castle()+0x1d2>
    3f82:	60 e0       	ldi	r22, 0x00	; 0
    3f84:	8a ed       	ldi	r24, 0xDA	; 218
    3f86:	90 e1       	ldi	r25, 0x10	; 16
    3f88:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    3f8c:	80 e0       	ldi	r24, 0x00	; 0
    3f8e:	52 dc       	rcall	.-1884   	; 0x3834 <switchToSong(unsigned char)>
    3f90:	da ce       	rjmp	.-588    	; 0x3d46 <Castle()+0x42>

00003f92 <TooClose()>:
    3f92:	ef 92       	push	r14
    3f94:	ff 92       	push	r15
    3f96:	0f 93       	push	r16
    3f98:	1f 93       	push	r17
    3f9a:	cf 93       	push	r28
    3f9c:	df 93       	push	r29
    3f9e:	00 d0       	rcall	.+0      	; 0x3fa0 <TooClose()+0xe>
    3fa0:	00 d0       	rcall	.+0      	; 0x3fa2 <TooClose()+0x10>
    3fa2:	00 d0       	rcall	.+0      	; 0x3fa4 <TooClose()+0x12>
    3fa4:	1f 92       	push	r1
    3fa6:	cd b7       	in	r28, 0x3d	; 61
    3fa8:	de b7       	in	r29, 0x3e	; 62
    3faa:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    3fae:	8e 31       	cpi	r24, 0x1E	; 30
    3fb0:	09 f4       	brne	.+2      	; 0x3fb4 <TooClose()+0x22>
    3fb2:	9f c0       	rjmp	.+318    	; 0x40f2 <TooClose()+0x160>
    3fb4:	f0 f5       	brcc	.+124    	; 0x4032 <TooClose()+0xa0>
    3fb6:	8a 30       	cpi	r24, 0x0A	; 10
    3fb8:	09 f4       	brne	.+2      	; 0x3fbc <TooClose()+0x2a>
    3fba:	7d c0       	rjmp	.+250    	; 0x40b6 <TooClose()+0x124>
    3fbc:	60 f5       	brcc	.+88     	; 0x4016 <TooClose()+0x84>
    3fbe:	82 30       	cpi	r24, 0x02	; 2
    3fc0:	09 f4       	brne	.+2      	; 0x3fc4 <TooClose()+0x32>
    3fc2:	69 c0       	rjmp	.+210    	; 0x4096 <TooClose()+0x104>
    3fc4:	85 30       	cpi	r24, 0x05	; 5
    3fc6:	09 f4       	brne	.+2      	; 0x3fca <TooClose()+0x38>
    3fc8:	6e c0       	rjmp	.+220    	; 0x40a6 <TooClose()+0x114>
    3fca:	81 11       	cpse	r24, r1
    3fcc:	17 c0       	rjmp	.+46     	; 0x3ffc <TooClose()+0x6a>
    3fce:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    3fd2:	7c 01       	movw	r14, r24
    3fd4:	67 e8       	ldi	r22, 0x87	; 135
    3fd6:	71 e0       	ldi	r23, 0x01	; 1
    3fd8:	ce 01       	movw	r24, r28
    3fda:	01 96       	adiw	r24, 0x01	; 1
    3fdc:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    3fe0:	02 e0       	ldi	r16, 0x02	; 2
    3fe2:	97 01       	movw	r18, r14
    3fe4:	4b e4       	ldi	r20, 0x4B	; 75
    3fe6:	50 e0       	ldi	r21, 0x00	; 0
    3fe8:	61 e8       	ldi	r22, 0x81	; 129
    3fea:	7e e2       	ldi	r23, 0x2E	; 46
    3fec:	ce 01       	movw	r24, r28
    3fee:	01 96       	adiw	r24, 0x01	; 1
    3ff0:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3ff4:	ce 01       	movw	r24, r28
    3ff6:	01 96       	adiw	r24, 0x01	; 1
    3ff8:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    3ffc:	27 96       	adiw	r28, 0x07	; 7
    3ffe:	0f b6       	in	r0, 0x3f	; 63
    4000:	f8 94       	cli
    4002:	de bf       	out	0x3e, r29	; 62
    4004:	0f be       	out	0x3f, r0	; 63
    4006:	cd bf       	out	0x3d, r28	; 61
    4008:	df 91       	pop	r29
    400a:	cf 91       	pop	r28
    400c:	1f 91       	pop	r17
    400e:	0f 91       	pop	r16
    4010:	ff 90       	pop	r15
    4012:	ef 90       	pop	r14
    4014:	08 95       	ret
    4016:	84 31       	cpi	r24, 0x14	; 20
    4018:	09 f4       	brne	.+2      	; 0x401c <TooClose()+0x8a>
    401a:	55 c0       	rjmp	.+170    	; 0x40c6 <TooClose()+0x134>
    401c:	89 31       	cpi	r24, 0x19	; 25
    401e:	09 f4       	brne	.+2      	; 0x4022 <TooClose()+0x90>
    4020:	58 c0       	rjmp	.+176    	; 0x40d2 <TooClose()+0x140>
    4022:	8f 30       	cpi	r24, 0x0F	; 15
    4024:	59 f7       	brne	.-42     	; 0x3ffc <TooClose()+0x6a>
    4026:	46 eb       	ldi	r20, 0xB6	; 182
    4028:	53 e0       	ldi	r21, 0x03	; 3
    402a:	64 e1       	ldi	r22, 0x14	; 20
    402c:	89 e7       	ldi	r24, 0x79	; 121
    402e:	9b e3       	ldi	r25, 0x3B	; 59
    4030:	37 c0       	rjmp	.+110    	; 0x40a0 <TooClose()+0x10e>
    4032:	82 33       	cpi	r24, 0x32	; 50
    4034:	09 f4       	brne	.+2      	; 0x4038 <TooClose()+0xa6>
    4036:	72 c0       	rjmp	.+228    	; 0x411c <TooClose()+0x18a>
    4038:	b8 f4       	brcc	.+46     	; 0x4068 <TooClose()+0xd6>
    403a:	88 32       	cpi	r24, 0x28	; 40
    403c:	09 f4       	brne	.+2      	; 0x4040 <TooClose()+0xae>
    403e:	61 c0       	rjmp	.+194    	; 0x4102 <TooClose()+0x170>
    4040:	8d 32       	cpi	r24, 0x2D	; 45
    4042:	09 f4       	brne	.+2      	; 0x4046 <TooClose()+0xb4>
    4044:	64 c0       	rjmp	.+200    	; 0x410e <TooClose()+0x17c>
    4046:	83 32       	cpi	r24, 0x23	; 35
    4048:	c9 f6       	brne	.-78     	; 0x3ffc <TooClose()+0x6a>
    404a:	ee 24       	eor	r14, r14
    404c:	ea 94       	dec	r14
    404e:	f1 2c       	mov	r15, r1
    4050:	0f ef       	ldi	r16, 0xFF	; 255
    4052:	10 e0       	ldi	r17, 0x00	; 0
    4054:	2f ef       	ldi	r18, 0xFF	; 255
    4056:	30 e0       	ldi	r19, 0x00	; 0
    4058:	4b e4       	ldi	r20, 0x4B	; 75
    405a:	50 e0       	ldi	r21, 0x00	; 0
    405c:	68 e2       	ldi	r22, 0x28	; 40
    405e:	89 e7       	ldi	r24, 0x79	; 121
    4060:	9b e3       	ldi	r25, 0x3B	; 59
    4062:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4066:	ca cf       	rjmp	.-108    	; 0x3ffc <TooClose()+0x6a>
    4068:	8c 33       	cpi	r24, 0x3C	; 60
    406a:	09 f4       	brne	.+2      	; 0x406e <TooClose()+0xdc>
    406c:	5d c0       	rjmp	.+186    	; 0x4128 <TooClose()+0x196>
    406e:	84 36       	cpi	r24, 0x64	; 100
    4070:	09 f4       	brne	.+2      	; 0x4074 <TooClose()+0xe2>
    4072:	62 c0       	rjmp	.+196    	; 0x4138 <TooClose()+0x1a6>
    4074:	87 33       	cpi	r24, 0x37	; 55
    4076:	11 f6       	brne	.-124    	; 0x3ffc <TooClose()+0x6a>
    4078:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    407c:	7c 01       	movw	r14, r24
    407e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4082:	8c 01       	movw	r16, r24
    4084:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4088:	9c 01       	movw	r18, r24
    408a:	4b e4       	ldi	r20, 0x4B	; 75
    408c:	50 e0       	ldi	r21, 0x00	; 0
    408e:	6c e3       	ldi	r22, 0x3C	; 60
    4090:	80 eb       	ldi	r24, 0xB0	; 176
    4092:	9d e1       	ldi	r25, 0x1D	; 29
    4094:	e6 cf       	rjmp	.-52     	; 0x4062 <TooClose()+0xd0>
    4096:	46 eb       	ldi	r20, 0xB6	; 182
    4098:	53 e0       	ldi	r21, 0x03	; 3
    409a:	65 e0       	ldi	r22, 0x05	; 5
    409c:	82 e7       	ldi	r24, 0x72	; 114
    409e:	94 e6       	ldi	r25, 0x64	; 100
    40a0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    40a4:	ab cf       	rjmp	.-170    	; 0x3ffc <TooClose()+0x6a>
    40a6:	4b ed       	ldi	r20, 0xDB	; 219
    40a8:	51 e0       	ldi	r21, 0x01	; 1
    40aa:	6a e0       	ldi	r22, 0x0A	; 10
    40ac:	84 e8       	ldi	r24, 0x84	; 132
    40ae:	92 eb       	ldi	r25, 0xB2	; 178
    40b0:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    40b4:	a3 cf       	rjmp	.-186    	; 0x3ffc <TooClose()+0x6a>
    40b6:	46 eb       	ldi	r20, 0xB6	; 182
    40b8:	53 e0       	ldi	r21, 0x03	; 3
    40ba:	6f e0       	ldi	r22, 0x0F	; 15
    40bc:	8b e0       	ldi	r24, 0x0B	; 11
    40be:	97 e7       	ldi	r25, 0x77	; 119
    40c0:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    40c4:	9b cf       	rjmp	.-202    	; 0x3ffc <TooClose()+0x6a>
    40c6:	4b ed       	ldi	r20, 0xDB	; 219
    40c8:	51 e0       	ldi	r21, 0x01	; 1
    40ca:	69 e1       	ldi	r22, 0x19	; 25
    40cc:	8b e0       	ldi	r24, 0x0B	; 11
    40ce:	97 e7       	ldi	r25, 0x77	; 119
    40d0:	ef cf       	rjmp	.-34     	; 0x40b0 <TooClose()+0x11e>
    40d2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    40d6:	2e e1       	ldi	r18, 0x1E	; 30
    40d8:	e2 2e       	mov	r14, r18
    40da:	8c 01       	movw	r16, r24
    40dc:	2b e2       	ldi	r18, 0x2B	; 43
    40de:	36 e1       	ldi	r19, 0x16	; 22
    40e0:	4b ed       	ldi	r20, 0xDB	; 219
    40e2:	51 e0       	ldi	r21, 0x01	; 1
    40e4:	6a e0       	ldi	r22, 0x0A	; 10
    40e6:	70 e0       	ldi	r23, 0x00	; 0
    40e8:	86 e2       	ldi	r24, 0x26	; 38
    40ea:	9a e0       	ldi	r25, 0x0A	; 10
    40ec:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    40f0:	85 cf       	rjmp	.-246    	; 0x3ffc <TooClose()+0x6a>
    40f2:	43 e2       	ldi	r20, 0x23	; 35
    40f4:	6c e6       	ldi	r22, 0x6C	; 108
    40f6:	77 e0       	ldi	r23, 0x07	; 7
    40f8:	87 ec       	ldi	r24, 0xC7	; 199
    40fa:	90 e6       	ldi	r25, 0x60	; 96
    40fc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    4100:	7d cf       	rjmp	.-262    	; 0x3ffc <TooClose()+0x6a>
    4102:	48 eb       	ldi	r20, 0xB8	; 184
    4104:	53 e0       	ldi	r21, 0x03	; 3
    4106:	6d e2       	ldi	r22, 0x2D	; 45
    4108:	89 e7       	ldi	r24, 0x79	; 121
    410a:	9b e3       	ldi	r25, 0x3B	; 59
    410c:	d9 cf       	rjmp	.-78     	; 0x40c0 <TooClose()+0x12e>
    410e:	42 e3       	ldi	r20, 0x32	; 50
    4110:	65 e0       	ldi	r22, 0x05	; 5
    4112:	80 eb       	ldi	r24, 0xB0	; 176
    4114:	9d e1       	ldi	r25, 0x1D	; 29
    4116:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    411a:	70 cf       	rjmp	.-288    	; 0x3ffc <TooClose()+0x6a>
    411c:	46 eb       	ldi	r20, 0xB6	; 182
    411e:	53 e0       	ldi	r21, 0x03	; 3
    4120:	67 e3       	ldi	r22, 0x37	; 55
    4122:	80 eb       	ldi	r24, 0xB0	; 176
    4124:	9d e1       	ldi	r25, 0x1D	; 29
    4126:	cc cf       	rjmp	.-104    	; 0x40c0 <TooClose()+0x12e>
    4128:	49 ec       	ldi	r20, 0xC9	; 201
    412a:	5d e1       	ldi	r21, 0x1D	; 29
    412c:	64 e6       	ldi	r22, 0x64	; 100
    412e:	8f ef       	ldi	r24, 0xFF	; 255
    4130:	9f ef       	ldi	r25, 0xFF	; 255
    4132:	0e 94 1a 0a 	call	0x1434	; 0x1434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    4136:	62 cf       	rjmp	.-316    	; 0x3ffc <TooClose()+0x6a>
    4138:	60 e0       	ldi	r22, 0x00	; 0
    413a:	8a ed       	ldi	r24, 0xDA	; 218
    413c:	90 e1       	ldi	r25, 0x10	; 16
    413e:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    4142:	80 e0       	ldi	r24, 0x00	; 0
    4144:	77 db       	rcall	.-2322   	; 0x3834 <switchToSong(unsigned char)>
    4146:	5a cf       	rjmp	.-332    	; 0x3ffc <TooClose()+0x6a>

00004148 <Pokerface()>:
    4148:	ef 92       	push	r14
    414a:	ff 92       	push	r15
    414c:	0f 93       	push	r16
    414e:	1f 93       	push	r17
    4150:	cf 93       	push	r28
    4152:	df 93       	push	r29
    4154:	00 d0       	rcall	.+0      	; 0x4156 <Pokerface()+0xe>
    4156:	00 d0       	rcall	.+0      	; 0x4158 <Pokerface()+0x10>
    4158:	00 d0       	rcall	.+0      	; 0x415a <Pokerface()+0x12>
    415a:	1f 92       	push	r1
    415c:	cd b7       	in	r28, 0x3d	; 61
    415e:	de b7       	in	r29, 0x3e	; 62
    4160:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    4164:	8e 31       	cpi	r24, 0x1E	; 30
    4166:	09 f4       	brne	.+2      	; 0x416a <Pokerface()+0x22>
    4168:	ad c0       	rjmp	.+346    	; 0x42c4 <Pokerface()+0x17c>
    416a:	90 f5       	brcc	.+100    	; 0x41d0 <Pokerface()+0x88>
    416c:	85 30       	cpi	r24, 0x05	; 5
    416e:	09 f4       	brne	.+2      	; 0x4172 <Pokerface()+0x2a>
    4170:	90 c0       	rjmp	.+288    	; 0x4292 <Pokerface()+0x14a>
    4172:	b8 f4       	brcc	.+46     	; 0x41a2 <Pokerface()+0x5a>
    4174:	81 30       	cpi	r24, 0x01	; 1
    4176:	09 f4       	brne	.+2      	; 0x417a <Pokerface()+0x32>
    4178:	85 c0       	rjmp	.+266    	; 0x4284 <Pokerface()+0x13c>
    417a:	08 f4       	brcc	.+2      	; 0x417e <Pokerface()+0x36>
    417c:	6b c0       	rjmp	.+214    	; 0x4254 <Pokerface()+0x10c>
    417e:	45 e0       	ldi	r20, 0x05	; 5
    4180:	64 e0       	ldi	r22, 0x04	; 4
    4182:	82 30       	cpi	r24, 0x02	; 2
    4184:	09 f4       	brne	.+2      	; 0x4188 <Pokerface()+0x40>
    4186:	80 c0       	rjmp	.+256    	; 0x4288 <Pokerface()+0x140>
    4188:	27 96       	adiw	r28, 0x07	; 7
    418a:	0f b6       	in	r0, 0x3f	; 63
    418c:	f8 94       	cli
    418e:	de bf       	out	0x3e, r29	; 62
    4190:	0f be       	out	0x3f, r0	; 63
    4192:	cd bf       	out	0x3d, r28	; 61
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	1f 91       	pop	r17
    419a:	0f 91       	pop	r16
    419c:	ff 90       	pop	r15
    419e:	ef 90       	pop	r14
    41a0:	08 95       	ret
    41a2:	8f 30       	cpi	r24, 0x0F	; 15
    41a4:	09 f4       	brne	.+2      	; 0x41a8 <Pokerface()+0x60>
    41a6:	79 c0       	rjmp	.+242    	; 0x429a <Pokerface()+0x152>
    41a8:	30 f4       	brcc	.+12     	; 0x41b6 <Pokerface()+0x6e>
    41aa:	8a 30       	cpi	r24, 0x0A	; 10
    41ac:	69 f7       	brne	.-38     	; 0x4188 <Pokerface()+0x40>
    41ae:	89 e0       	ldi	r24, 0x09	; 9
    41b0:	0e 94 86 09 	call	0x130c	; 0x130c <display_rgbBitmap(unsigned char)>
    41b4:	e9 cf       	rjmp	.-46     	; 0x4188 <Pokerface()+0x40>
    41b6:	84 31       	cpi	r24, 0x14	; 20
    41b8:	09 f4       	brne	.+2      	; 0x41bc <Pokerface()+0x74>
    41ba:	73 c0       	rjmp	.+230    	; 0x42a2 <Pokerface()+0x15a>
    41bc:	44 ef       	ldi	r20, 0xF4	; 244
    41be:	51 e0       	ldi	r21, 0x01	; 1
    41c0:	6e e1       	ldi	r22, 0x1E	; 30
    41c2:	89 31       	cpi	r24, 0x19	; 25
    41c4:	09 f7       	brne	.-62     	; 0x4188 <Pokerface()+0x40>
    41c6:	86 e0       	ldi	r24, 0x06	; 6
    41c8:	9f e3       	ldi	r25, 0x3F	; 63
    41ca:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    41ce:	dc cf       	rjmp	.-72     	; 0x4188 <Pokerface()+0x40>
    41d0:	87 33       	cpi	r24, 0x37	; 55
    41d2:	09 f4       	brne	.+2      	; 0x41d6 <Pokerface()+0x8e>
    41d4:	8f c0       	rjmp	.+286    	; 0x42f4 <Pokerface()+0x1ac>
    41d6:	d0 f4       	brcc	.+52     	; 0x420c <Pokerface()+0xc4>
    41d8:	88 32       	cpi	r24, 0x28	; 40
    41da:	09 f4       	brne	.+2      	; 0x41de <Pokerface()+0x96>
    41dc:	78 c0       	rjmp	.+240    	; 0x42ce <Pokerface()+0x186>
    41de:	50 f4       	brcc	.+20     	; 0x41f4 <Pokerface()+0xac>
    41e0:	44 ef       	ldi	r20, 0xF4	; 244
    41e2:	51 e0       	ldi	r21, 0x01	; 1
    41e4:	68 e2       	ldi	r22, 0x28	; 40
    41e6:	83 32       	cpi	r24, 0x23	; 35
    41e8:	79 f6       	brne	.-98     	; 0x4188 <Pokerface()+0x40>
    41ea:	86 e0       	ldi	r24, 0x06	; 6
    41ec:	9f e3       	ldi	r25, 0x3F	; 63
    41ee:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    41f2:	ca cf       	rjmp	.-108    	; 0x4188 <Pokerface()+0x40>
    41f4:	8d 32       	cpi	r24, 0x2D	; 45
    41f6:	09 f4       	brne	.+2      	; 0x41fa <Pokerface()+0xb2>
    41f8:	77 c0       	rjmp	.+238    	; 0x42e8 <Pokerface()+0x1a0>
    41fa:	82 33       	cpi	r24, 0x32	; 50
    41fc:	29 f6       	brne	.-118    	; 0x4188 <Pokerface()+0x40>
    41fe:	47 e3       	ldi	r20, 0x37	; 55
    4200:	67 e0       	ldi	r22, 0x07	; 7
    4202:	8d ef       	ldi	r24, 0xFD	; 253
    4204:	9e e3       	ldi	r25, 0x3E	; 62
    4206:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    420a:	be cf       	rjmp	.-132    	; 0x4188 <Pokerface()+0x40>
    420c:	81 34       	cpi	r24, 0x41	; 65
    420e:	09 f4       	brne	.+2      	; 0x4212 <Pokerface()+0xca>
    4210:	75 c0       	rjmp	.+234    	; 0x42fc <Pokerface()+0x1b4>
    4212:	90 f4       	brcc	.+36     	; 0x4238 <Pokerface()+0xf0>
    4214:	8c 33       	cpi	r24, 0x3C	; 60
    4216:	09 f0       	breq	.+2      	; 0x421a <Pokerface()+0xd2>
    4218:	b7 cf       	rjmp	.-146    	; 0x4188 <Pokerface()+0x40>
    421a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    421e:	7c 01       	movw	r14, r24
    4220:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4224:	8c 01       	movw	r16, r24
    4226:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    422a:	9c 01       	movw	r18, r24
    422c:	4b e4       	ldi	r20, 0x4B	; 75
    422e:	50 e0       	ldi	r21, 0x00	; 0
    4230:	61 e4       	ldi	r22, 0x41	; 65
    4232:	84 e4       	ldi	r24, 0x44	; 68
    4234:	9f e2       	ldi	r25, 0x2F	; 47
    4236:	43 c0       	rjmp	.+134    	; 0x42be <Pokerface()+0x176>
    4238:	86 34       	cpi	r24, 0x46	; 70
    423a:	09 f4       	brne	.+2      	; 0x423e <Pokerface()+0xf6>
    423c:	64 c0       	rjmp	.+200    	; 0x4306 <Pokerface()+0x1be>
    423e:	84 36       	cpi	r24, 0x64	; 100
    4240:	09 f0       	breq	.+2      	; 0x4244 <Pokerface()+0xfc>
    4242:	a2 cf       	rjmp	.-188    	; 0x4188 <Pokerface()+0x40>
    4244:	60 e0       	ldi	r22, 0x00	; 0
    4246:	8a ed       	ldi	r24, 0xDA	; 218
    4248:	90 e1       	ldi	r25, 0x10	; 16
    424a:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    424e:	80 e0       	ldi	r24, 0x00	; 0
    4250:	f1 da       	rcall	.-2590   	; 0x3834 <switchToSong(unsigned char)>
    4252:	9a cf       	rjmp	.-204    	; 0x4188 <Pokerface()+0x40>
    4254:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    4258:	7c 01       	movw	r14, r24
    425a:	6f e9       	ldi	r22, 0x9F	; 159
    425c:	71 e0       	ldi	r23, 0x01	; 1
    425e:	ce 01       	movw	r24, r28
    4260:	01 96       	adiw	r24, 0x01	; 1
    4262:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    4266:	01 e0       	ldi	r16, 0x01	; 1
    4268:	97 01       	movw	r18, r14
    426a:	4b e4       	ldi	r20, 0x4B	; 75
    426c:	50 e0       	ldi	r21, 0x00	; 0
    426e:	6e e0       	ldi	r22, 0x0E	; 14
    4270:	7d e3       	ldi	r23, 0x3D	; 61
    4272:	ce 01       	movw	r24, r28
    4274:	01 96       	adiw	r24, 0x01	; 1
    4276:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    427a:	ce 01       	movw	r24, r28
    427c:	01 96       	adiw	r24, 0x01	; 1
    427e:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    4282:	82 cf       	rjmp	.-252    	; 0x4188 <Pokerface()+0x40>
    4284:	42 e0       	ldi	r20, 0x02	; 2
    4286:	63 e0       	ldi	r22, 0x03	; 3
    4288:	83 e8       	ldi	r24, 0x83	; 131
    428a:	9f e1       	ldi	r25, 0x1F	; 31
    428c:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    4290:	7b cf       	rjmp	.-266    	; 0x4188 <Pokerface()+0x40>
    4292:	44 ef       	ldi	r20, 0xF4	; 244
    4294:	51 e0       	ldi	r21, 0x01	; 1
    4296:	6a e0       	ldi	r22, 0x0A	; 10
    4298:	96 cf       	rjmp	.-212    	; 0x41c6 <Pokerface()+0x7e>
    429a:	44 ef       	ldi	r20, 0xF4	; 244
    429c:	51 e0       	ldi	r21, 0x01	; 1
    429e:	64 e1       	ldi	r22, 0x14	; 20
    42a0:	a4 cf       	rjmp	.-184    	; 0x41ea <Pokerface()+0xa2>
    42a2:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    42a6:	7c 01       	movw	r14, r24
    42a8:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    42ac:	8c 01       	movw	r16, r24
    42ae:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    42b2:	9c 01       	movw	r18, r24
    42b4:	4b e4       	ldi	r20, 0x4B	; 75
    42b6:	50 e0       	ldi	r21, 0x00	; 0
    42b8:	69 e1       	ldi	r22, 0x19	; 25
    42ba:	86 e0       	ldi	r24, 0x06	; 6
    42bc:	9f e3       	ldi	r25, 0x3F	; 63
    42be:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    42c2:	62 cf       	rjmp	.-316    	; 0x4188 <Pokerface()+0x40>
    42c4:	43 e2       	ldi	r20, 0x23	; 35
    42c6:	64 e0       	ldi	r22, 0x04	; 4
    42c8:	86 e0       	ldi	r24, 0x06	; 6
    42ca:	9f e3       	ldi	r25, 0x3F	; 63
    42cc:	df cf       	rjmp	.-66     	; 0x428c <Pokerface()+0x144>
    42ce:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    42d2:	7c 01       	movw	r14, r24
    42d4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    42d8:	8c 01       	movw	r16, r24
    42da:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    42de:	9c 01       	movw	r18, r24
    42e0:	4b e4       	ldi	r20, 0x4B	; 75
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	6d e2       	ldi	r22, 0x2D	; 45
    42e6:	e9 cf       	rjmp	.-46     	; 0x42ba <Pokerface()+0x172>
    42e8:	62 e3       	ldi	r22, 0x32	; 50
    42ea:	82 e7       	ldi	r24, 0x72	; 114
    42ec:	9f e1       	ldi	r25, 0x1F	; 31
    42ee:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    42f2:	4a cf       	rjmp	.-364    	; 0x4188 <Pokerface()+0x40>
    42f4:	44 ef       	ldi	r20, 0xF4	; 244
    42f6:	51 e0       	ldi	r21, 0x01	; 1
    42f8:	6c e3       	ldi	r22, 0x3C	; 60
    42fa:	77 cf       	rjmp	.-274    	; 0x41ea <Pokerface()+0xa2>
    42fc:	46 e4       	ldi	r20, 0x46	; 70
    42fe:	6c e0       	ldi	r22, 0x0C	; 12
    4300:	89 eb       	ldi	r24, 0xB9	; 185
    4302:	9f e0       	ldi	r25, 0x0F	; 15
    4304:	80 cf       	rjmp	.-256    	; 0x4206 <Pokerface()+0xbe>
    4306:	64 e6       	ldi	r22, 0x64	; 100
    4308:	80 e1       	ldi	r24, 0x10	; 16
    430a:	97 e2       	ldi	r25, 0x27	; 39
    430c:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    4310:	3b cf       	rjmp	.-394    	; 0x4188 <Pokerface()+0x40>

00004312 <UseSomebody()>:
    4312:	ef 92       	push	r14
    4314:	ff 92       	push	r15
    4316:	0f 93       	push	r16
    4318:	1f 93       	push	r17
    431a:	cf 93       	push	r28
    431c:	df 93       	push	r29
    431e:	00 d0       	rcall	.+0      	; 0x4320 <UseSomebody()+0xe>
    4320:	00 d0       	rcall	.+0      	; 0x4322 <UseSomebody()+0x10>
    4322:	00 d0       	rcall	.+0      	; 0x4324 <UseSomebody()+0x12>
    4324:	1f 92       	push	r1
    4326:	cd b7       	in	r28, 0x3d	; 61
    4328:	de b7       	in	r29, 0x3e	; 62
    432a:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    432e:	84 31       	cpi	r24, 0x14	; 20
    4330:	09 f4       	brne	.+2      	; 0x4334 <UseSomebody()+0x22>
    4332:	75 c0       	rjmp	.+234    	; 0x441e <UseSomebody()+0x10c>
    4334:	48 f5       	brcc	.+82     	; 0x4388 <UseSomebody()+0x76>
    4336:	82 30       	cpi	r24, 0x02	; 2
    4338:	09 f4       	brne	.+2      	; 0x433c <UseSomebody()+0x2a>
    433a:	5c c0       	rjmp	.+184    	; 0x43f4 <UseSomebody()+0xe2>
    433c:	a8 f4       	brcc	.+42     	; 0x4368 <UseSomebody()+0x56>
    433e:	88 23       	and	r24, r24
    4340:	09 f4       	brne	.+2      	; 0x4344 <UseSomebody()+0x32>
    4342:	40 c0       	rjmp	.+128    	; 0x43c4 <UseSomebody()+0xb2>
    4344:	42 e0       	ldi	r20, 0x02	; 2
    4346:	63 e0       	ldi	r22, 0x03	; 3
    4348:	81 30       	cpi	r24, 0x01	; 1
    434a:	09 f4       	brne	.+2      	; 0x434e <UseSomebody()+0x3c>
    434c:	7b c0       	rjmp	.+246    	; 0x4444 <UseSomebody()+0x132>
    434e:	27 96       	adiw	r28, 0x07	; 7
    4350:	0f b6       	in	r0, 0x3f	; 63
    4352:	f8 94       	cli
    4354:	de bf       	out	0x3e, r29	; 62
    4356:	0f be       	out	0x3f, r0	; 63
    4358:	cd bf       	out	0x3d, r28	; 61
    435a:	df 91       	pop	r29
    435c:	cf 91       	pop	r28
    435e:	1f 91       	pop	r17
    4360:	0f 91       	pop	r16
    4362:	ff 90       	pop	r15
    4364:	ef 90       	pop	r14
    4366:	08 95       	ret
    4368:	8a 30       	cpi	r24, 0x0A	; 10
    436a:	09 f4       	brne	.+2      	; 0x436e <UseSomebody()+0x5c>
    436c:	4a c0       	rjmp	.+148    	; 0x4402 <UseSomebody()+0xf0>
    436e:	8f 30       	cpi	r24, 0x0F	; 15
    4370:	09 f4       	brne	.+2      	; 0x4374 <UseSomebody()+0x62>
    4372:	4d c0       	rjmp	.+154    	; 0x440e <UseSomebody()+0xfc>
    4374:	85 30       	cpi	r24, 0x05	; 5
    4376:	59 f7       	brne	.-42     	; 0x434e <UseSomebody()+0x3c>
    4378:	49 ea       	ldi	r20, 0xA9	; 169
    437a:	51 e0       	ldi	r21, 0x01	; 1
    437c:	6a e0       	ldi	r22, 0x0A	; 10
    437e:	82 eb       	ldi	r24, 0xB2	; 178
    4380:	9c e6       	ldi	r25, 0x6C	; 108
    4382:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    4386:	e3 cf       	rjmp	.-58     	; 0x434e <UseSomebody()+0x3c>
    4388:	88 32       	cpi	r24, 0x28	; 40
    438a:	09 f4       	brne	.+2      	; 0x438e <UseSomebody()+0x7c>
    438c:	62 c0       	rjmp	.+196    	; 0x4452 <UseSomebody()+0x140>
    438e:	60 f4       	brcc	.+24     	; 0x43a8 <UseSomebody()+0x96>
    4390:	8e 31       	cpi	r24, 0x1E	; 30
    4392:	09 f4       	brne	.+2      	; 0x4396 <UseSomebody()+0x84>
    4394:	55 c0       	rjmp	.+170    	; 0x4440 <UseSomebody()+0x12e>
    4396:	83 32       	cpi	r24, 0x23	; 35
    4398:	09 f4       	brne	.+2      	; 0x439c <UseSomebody()+0x8a>
    439a:	57 c0       	rjmp	.+174    	; 0x444a <UseSomebody()+0x138>
    439c:	89 31       	cpi	r24, 0x19	; 25
    439e:	b9 f6       	brne	.-82     	; 0x434e <UseSomebody()+0x3c>
    43a0:	49 ea       	ldi	r20, 0xA9	; 169
    43a2:	51 e0       	ldi	r21, 0x01	; 1
    43a4:	6e e1       	ldi	r22, 0x1E	; 30
    43a6:	eb cf       	rjmp	.-42     	; 0x437e <UseSomebody()+0x6c>
    43a8:	86 34       	cpi	r24, 0x46	; 70
    43aa:	09 f4       	brne	.+2      	; 0x43ae <UseSomebody()+0x9c>
    43ac:	61 c0       	rjmp	.+194    	; 0x4470 <UseSomebody()+0x15e>
    43ae:	84 36       	cpi	r24, 0x64	; 100
    43b0:	09 f4       	brne	.+2      	; 0x43b4 <UseSomebody()+0xa2>
    43b2:	64 c0       	rjmp	.+200    	; 0x447c <UseSomebody()+0x16a>
    43b4:	8d 32       	cpi	r24, 0x2D	; 45
    43b6:	59 f6       	brne	.-106    	; 0x434e <UseSomebody()+0x3c>
    43b8:	66 e4       	ldi	r22, 0x46	; 70
    43ba:	89 e5       	ldi	r24, 0x59	; 89
    43bc:	96 e3       	ldi	r25, 0x36	; 54
    43be:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    43c2:	c5 cf       	rjmp	.-118    	; 0x434e <UseSomebody()+0x3c>
    43c4:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    43c8:	7c 01       	movw	r14, r24
    43ca:	66 eb       	ldi	r22, 0xB6	; 182
    43cc:	71 e0       	ldi	r23, 0x01	; 1
    43ce:	ce 01       	movw	r24, r28
    43d0:	01 96       	adiw	r24, 0x01	; 1
    43d2:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    43d6:	01 e0       	ldi	r16, 0x01	; 1
    43d8:	97 01       	movw	r18, r14
    43da:	4b e4       	ldi	r20, 0x4B	; 75
    43dc:	50 e0       	ldi	r21, 0x00	; 0
    43de:	63 ed       	ldi	r22, 0xD3	; 211
    43e0:	7f e4       	ldi	r23, 0x4F	; 79
    43e2:	ce 01       	movw	r24, r28
    43e4:	01 96       	adiw	r24, 0x01	; 1
    43e6:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    43ea:	ce 01       	movw	r24, r28
    43ec:	01 96       	adiw	r24, 0x01	; 1
    43ee:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    43f2:	ad cf       	rjmp	.-166    	; 0x434e <UseSomebody()+0x3c>
    43f4:	45 e0       	ldi	r20, 0x05	; 5
    43f6:	64 e0       	ldi	r22, 0x04	; 4
    43f8:	82 eb       	ldi	r24, 0xB2	; 178
    43fa:	9c e6       	ldi	r25, 0x6C	; 108
    43fc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    4400:	a6 cf       	rjmp	.-180    	; 0x434e <UseSomebody()+0x3c>
    4402:	6f e0       	ldi	r22, 0x0F	; 15
    4404:	82 eb       	ldi	r24, 0xB2	; 178
    4406:	9c e6       	ldi	r25, 0x6C	; 108
    4408:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    440c:	a0 cf       	rjmp	.-192    	; 0x434e <UseSomebody()+0x3c>
    440e:	49 ea       	ldi	r20, 0xA9	; 169
    4410:	51 e0       	ldi	r21, 0x01	; 1
    4412:	64 e1       	ldi	r22, 0x14	; 20
    4414:	89 e5       	ldi	r24, 0x59	; 89
    4416:	96 e3       	ldi	r25, 0x36	; 54
    4418:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    441c:	98 cf       	rjmp	.-208    	; 0x434e <UseSomebody()+0x3c>
    441e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4422:	7c 01       	movw	r14, r24
    4424:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4428:	8c 01       	movw	r16, r24
    442a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    442e:	9c 01       	movw	r18, r24
    4430:	4b e4       	ldi	r20, 0x4B	; 75
    4432:	50 e0       	ldi	r21, 0x00	; 0
    4434:	69 e1       	ldi	r22, 0x19	; 25
    4436:	89 e5       	ldi	r24, 0x59	; 89
    4438:	96 e3       	ldi	r25, 0x36	; 54
    443a:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    443e:	87 cf       	rjmp	.-242    	; 0x434e <UseSomebody()+0x3c>
    4440:	43 e2       	ldi	r20, 0x23	; 35
    4442:	64 e0       	ldi	r22, 0x04	; 4
    4444:	89 e5       	ldi	r24, 0x59	; 89
    4446:	96 e3       	ldi	r25, 0x36	; 54
    4448:	d9 cf       	rjmp	.-78     	; 0x43fc <UseSomebody()+0xea>
    444a:	49 ea       	ldi	r20, 0xA9	; 169
    444c:	51 e0       	ldi	r21, 0x01	; 1
    444e:	68 e2       	ldi	r22, 0x28	; 40
    4450:	e1 cf       	rjmp	.-62     	; 0x4414 <UseSomebody()+0x102>
    4452:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4456:	7c 01       	movw	r14, r24
    4458:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    445c:	8c 01       	movw	r16, r24
    445e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4462:	9c 01       	movw	r18, r24
    4464:	4b e4       	ldi	r20, 0x4B	; 75
    4466:	50 e0       	ldi	r21, 0x00	; 0
    4468:	6d e2       	ldi	r22, 0x2D	; 45
    446a:	8f ee       	ldi	r24, 0xEF	; 239
    446c:	93 e4       	ldi	r25, 0x43	; 67
    446e:	e5 cf       	rjmp	.-54     	; 0x443a <UseSomebody()+0x128>
    4470:	64 e6       	ldi	r22, 0x64	; 100
    4472:	80 e1       	ldi	r24, 0x10	; 16
    4474:	97 e2       	ldi	r25, 0x27	; 39
    4476:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    447a:	69 cf       	rjmp	.-302    	; 0x434e <UseSomebody()+0x3c>
    447c:	60 e0       	ldi	r22, 0x00	; 0
    447e:	8a ed       	ldi	r24, 0xDA	; 218
    4480:	90 e1       	ldi	r25, 0x10	; 16
    4482:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    4486:	80 e0       	ldi	r24, 0x00	; 0
    4488:	d5 d9       	rcall	.-3158   	; 0x3834 <switchToSong(unsigned char)>
    448a:	61 cf       	rjmp	.-318    	; 0x434e <UseSomebody()+0x3c>

0000448c <NoRoots()>:
    448c:	ef 92       	push	r14
    448e:	ff 92       	push	r15
    4490:	0f 93       	push	r16
    4492:	1f 93       	push	r17
    4494:	cf 93       	push	r28
    4496:	df 93       	push	r29
    4498:	00 d0       	rcall	.+0      	; 0x449a <NoRoots()+0xe>
    449a:	00 d0       	rcall	.+0      	; 0x449c <NoRoots()+0x10>
    449c:	00 d0       	rcall	.+0      	; 0x449e <NoRoots()+0x12>
    449e:	1f 92       	push	r1
    44a0:	cd b7       	in	r28, 0x3d	; 61
    44a2:	de b7       	in	r29, 0x3e	; 62
    44a4:	e0 91 c5 0a 	lds	r30, 0x0AC5	; 0x800ac5 <prog>
    44a8:	e5 36       	cpi	r30, 0x65	; 101
    44aa:	08 f0       	brcs	.+2      	; 0x44ae <NoRoots()+0x22>
    44ac:	81 c0       	rjmp	.+258    	; 0x45b0 <NoRoots()+0x124>
    44ae:	f0 e0       	ldi	r31, 0x00	; 0
    44b0:	e4 5a       	subi	r30, 0xA4	; 164
    44b2:	fd 4d       	sbci	r31, 0xDD	; 221
    44b4:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    44b8:	c1 22       	and	r12, r17
    44ba:	e5 22       	and	r14, r21
    44bc:	ec 22       	and	r14, r28
    44be:	d8 22       	and	r13, r24
    44c0:	d8 22       	and	r13, r24
    44c2:	f1 22       	and	r15, r17
    44c4:	f9 22       	and	r15, r25
    44c6:	ff 22       	and	r15, r31
    44c8:	05 23       	and	r16, r21
    44ca:	0b 23       	and	r16, r27
    44cc:	0d 23       	and	r16, r29
    44ce:	15 23       	and	r17, r21
    44d0:	26 23       	and	r18, r22
    44d2:	28 23       	and	r18, r24
    44d4:	2c 23       	and	r18, r28
    44d6:	2e 23       	and	r18, r30
    44d8:	d8 22       	and	r13, r24
    44da:	d8 22       	and	r13, r24
    44dc:	32 23       	and	r19, r18
    44de:	d8 22       	and	r13, r24
    44e0:	41 23       	and	r20, r17
    44e2:	d8 22       	and	r13, r24
    44e4:	d8 22       	and	r13, r24
    44e6:	d8 22       	and	r13, r24
    44e8:	d8 22       	and	r13, r24
    44ea:	44 23       	and	r20, r20
    44ec:	d8 22       	and	r13, r24
    44ee:	48 23       	and	r20, r24
    44f0:	d8 22       	and	r13, r24
    44f2:	4d 23       	and	r20, r29
    44f4:	d8 22       	and	r13, r24
    44f6:	4f 23       	and	r20, r31
    44f8:	d8 22       	and	r13, r24
    44fa:	53 23       	and	r21, r19
    44fc:	d8 22       	and	r13, r24
    44fe:	55 23       	and	r21, r21
    4500:	d8 22       	and	r13, r24
    4502:	59 23       	and	r21, r25
    4504:	d8 22       	and	r13, r24
    4506:	66 23       	and	r22, r22
    4508:	d8 22       	and	r13, r24
    450a:	68 23       	and	r22, r24
    450c:	d8 22       	and	r13, r24
    450e:	6c 23       	and	r22, r28
    4510:	d8 22       	and	r13, r24
    4512:	6e 23       	and	r22, r30
    4514:	d8 22       	and	r13, r24
    4516:	72 23       	and	r23, r18
    4518:	d8 22       	and	r13, r24
    451a:	7f 23       	and	r23, r31
    451c:	d8 22       	and	r13, r24
    451e:	85 23       	and	r24, r21
    4520:	d8 22       	and	r13, r24
    4522:	8b 23       	and	r24, r27
    4524:	d8 22       	and	r13, r24
    4526:	93 23       	and	r25, r19
    4528:	d8 22       	and	r13, r24
    452a:	9a 23       	and	r25, r26
    452c:	d8 22       	and	r13, r24
    452e:	9e 23       	and	r25, r30
    4530:	d8 22       	and	r13, r24
    4532:	a3 23       	and	r26, r19
    4534:	d8 22       	and	r13, r24
    4536:	d8 22       	and	r13, r24
    4538:	d8 22       	and	r13, r24
    453a:	d8 22       	and	r13, r24
    453c:	d8 22       	and	r13, r24
    453e:	d8 22       	and	r13, r24
    4540:	d8 22       	and	r13, r24
    4542:	d8 22       	and	r13, r24
    4544:	d8 22       	and	r13, r24
    4546:	d8 22       	and	r13, r24
    4548:	d8 22       	and	r13, r24
    454a:	d8 22       	and	r13, r24
    454c:	d8 22       	and	r13, r24
    454e:	d8 22       	and	r13, r24
    4550:	d8 22       	and	r13, r24
    4552:	d8 22       	and	r13, r24
    4554:	d8 22       	and	r13, r24
    4556:	d8 22       	and	r13, r24
    4558:	d8 22       	and	r13, r24
    455a:	d8 22       	and	r13, r24
    455c:	d8 22       	and	r13, r24
    455e:	d8 22       	and	r13, r24
    4560:	d8 22       	and	r13, r24
    4562:	d8 22       	and	r13, r24
    4564:	d8 22       	and	r13, r24
    4566:	d8 22       	and	r13, r24
    4568:	d8 22       	and	r13, r24
    456a:	d8 22       	and	r13, r24
    456c:	d8 22       	and	r13, r24
    456e:	d8 22       	and	r13, r24
    4570:	d8 22       	and	r13, r24
    4572:	d8 22       	and	r13, r24
    4574:	d8 22       	and	r13, r24
    4576:	d8 22       	and	r13, r24
    4578:	d8 22       	and	r13, r24
    457a:	d8 22       	and	r13, r24
    457c:	d8 22       	and	r13, r24
    457e:	d8 22       	and	r13, r24
    4580:	a7 23       	and	r26, r23
    4582:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    4586:	7c 01       	movw	r14, r24
    4588:	64 ed       	ldi	r22, 0xD4	; 212
    458a:	71 e0       	ldi	r23, 0x01	; 1
    458c:	ce 01       	movw	r24, r28
    458e:	01 96       	adiw	r24, 0x01	; 1
    4590:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    4594:	01 e0       	ldi	r16, 0x01	; 1
    4596:	97 01       	movw	r18, r14
    4598:	4b e4       	ldi	r20, 0x4B	; 75
    459a:	50 e0       	ldi	r21, 0x00	; 0
    459c:	69 e7       	ldi	r22, 0x79	; 121
    459e:	7e e2       	ldi	r23, 0x2E	; 46
    45a0:	ce 01       	movw	r24, r28
    45a2:	01 96       	adiw	r24, 0x01	; 1
    45a4:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    45a8:	ce 01       	movw	r24, r28
    45aa:	01 96       	adiw	r24, 0x01	; 1
    45ac:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    45b0:	27 96       	adiw	r28, 0x07	; 7
    45b2:	0f b6       	in	r0, 0x3f	; 63
    45b4:	f8 94       	cli
    45b6:	de bf       	out	0x3e, r29	; 62
    45b8:	0f be       	out	0x3f, r0	; 63
    45ba:	cd bf       	out	0x3d, r28	; 61
    45bc:	df 91       	pop	r29
    45be:	cf 91       	pop	r28
    45c0:	1f 91       	pop	r17
    45c2:	0f 91       	pop	r16
    45c4:	ff 90       	pop	r15
    45c6:	ef 90       	pop	r14
    45c8:	08 95       	ret
    45ca:	42 e0       	ldi	r20, 0x02	; 2
    45cc:	67 e0       	ldi	r22, 0x07	; 7
    45ce:	83 e5       	ldi	r24, 0x53	; 83
    45d0:	90 e2       	ldi	r25, 0x20	; 32
    45d2:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    45d6:	ec cf       	rjmp	.-40     	; 0x45b0 <NoRoots()+0x124>
    45d8:	45 e0       	ldi	r20, 0x05	; 5
    45da:	66 e0       	ldi	r22, 0x06	; 6
    45dc:	86 ea       	ldi	r24, 0xA6	; 166
    45de:	90 e4       	ldi	r25, 0x40	; 64
    45e0:	f8 cf       	rjmp	.-16     	; 0x45d2 <NoRoots()+0x146>
    45e2:	44 ef       	ldi	r20, 0xF4	; 244
    45e4:	51 e0       	ldi	r21, 0x01	; 1
    45e6:	66 e0       	ldi	r22, 0x06	; 6
    45e8:	86 ea       	ldi	r24, 0xA6	; 166
    45ea:	90 e4       	ldi	r25, 0x40	; 64
    45ec:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    45f0:	df cf       	rjmp	.-66     	; 0x45b0 <NoRoots()+0x124>
    45f2:	67 e0       	ldi	r22, 0x07	; 7
    45f4:	86 e4       	ldi	r24, 0x46	; 70
    45f6:	9e e1       	ldi	r25, 0x1E	; 30
    45f8:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    45fc:	d9 cf       	rjmp	.-78     	; 0x45b0 <NoRoots()+0x124>
    45fe:	68 e0       	ldi	r22, 0x08	; 8
    4600:	8e e0       	ldi	r24, 0x0E	; 14
    4602:	96 e0       	ldi	r25, 0x06	; 6
    4604:	0e 94 fc 13 	call	0x27f8	; 0x27f8 <progShowROOTS(unsigned int, unsigned char)>
    4608:	d3 cf       	rjmp	.-90     	; 0x45b0 <NoRoots()+0x124>
    460a:	44 ef       	ldi	r20, 0xF4	; 244
    460c:	51 e0       	ldi	r21, 0x01	; 1
    460e:	69 e0       	ldi	r22, 0x09	; 9
    4610:	8f e0       	ldi	r24, 0x0F	; 15
    4612:	9a e0       	ldi	r25, 0x0A	; 10
    4614:	07 c0       	rjmp	.+14     	; 0x4624 <NoRoots()+0x198>
    4616:	6a e0       	ldi	r22, 0x0A	; 10
    4618:	f3 cf       	rjmp	.-26     	; 0x4600 <NoRoots()+0x174>
    461a:	44 ef       	ldi	r20, 0xF4	; 244
    461c:	51 e0       	ldi	r21, 0x01	; 1
    461e:	6b e0       	ldi	r22, 0x0B	; 11
    4620:	8c e1       	ldi	r24, 0x1C	; 28
    4622:	9c e0       	ldi	r25, 0x0C	; 12
    4624:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4628:	c3 cf       	rjmp	.-122    	; 0x45b0 <NoRoots()+0x124>
    462a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    462e:	7c 01       	movw	r14, r24
    4630:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4634:	8c 01       	movw	r16, r24
    4636:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    463a:	9c 01       	movw	r18, r24
    463c:	4b e4       	ldi	r20, 0x4B	; 75
    463e:	50 e0       	ldi	r21, 0x00	; 0
    4640:	6c e0       	ldi	r22, 0x0C	; 12
    4642:	86 e4       	ldi	r24, 0x46	; 70
    4644:	9e e1       	ldi	r25, 0x1E	; 30
    4646:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    464a:	b2 cf       	rjmp	.-156    	; 0x45b0 <NoRoots()+0x124>
    464c:	6d e0       	ldi	r22, 0x0D	; 13
    464e:	d8 cf       	rjmp	.-80     	; 0x4600 <NoRoots()+0x174>
    4650:	44 ef       	ldi	r20, 0xF4	; 244
    4652:	51 e0       	ldi	r21, 0x01	; 1
    4654:	6e e0       	ldi	r22, 0x0E	; 14
    4656:	dc cf       	rjmp	.-72     	; 0x4610 <NoRoots()+0x184>
    4658:	6f e0       	ldi	r22, 0x0F	; 15
    465a:	d2 cf       	rjmp	.-92     	; 0x4600 <NoRoots()+0x174>
    465c:	44 ef       	ldi	r20, 0xF4	; 244
    465e:	51 e0       	ldi	r21, 0x01	; 1
    4660:	62 e1       	ldi	r22, 0x12	; 18
    4662:	de cf       	rjmp	.-68     	; 0x4620 <NoRoots()+0x194>
    4664:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4668:	7c 01       	movw	r14, r24
    466a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    466e:	8c 01       	movw	r16, r24
    4670:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4674:	9c 01       	movw	r18, r24
    4676:	4b e4       	ldi	r20, 0x4B	; 75
    4678:	50 e0       	ldi	r21, 0x00	; 0
    467a:	64 e1       	ldi	r22, 0x14	; 20
    467c:	83 e5       	ldi	r24, 0x53	; 83
    467e:	90 e2       	ldi	r25, 0x20	; 32
    4680:	e2 cf       	rjmp	.-60     	; 0x4646 <NoRoots()+0x1ba>
    4682:	49 e1       	ldi	r20, 0x19	; 25
    4684:	68 e0       	ldi	r22, 0x08	; 8
    4686:	aa cf       	rjmp	.-172    	; 0x45dc <NoRoots()+0x150>
    4688:	44 ef       	ldi	r20, 0xF4	; 244
    468a:	51 e0       	ldi	r21, 0x01	; 1
    468c:	6b e1       	ldi	r22, 0x1B	; 27
    468e:	ac cf       	rjmp	.-168    	; 0x45e8 <NoRoots()+0x15c>
    4690:	4d e1       	ldi	r20, 0x1D	; 29
    4692:	64 e0       	ldi	r22, 0x04	; 4
    4694:	86 e4       	ldi	r24, 0x46	; 70
    4696:	9e e1       	ldi	r25, 0x1E	; 30
    4698:	9c cf       	rjmp	.-200    	; 0x45d2 <NoRoots()+0x146>
    469a:	6f e1       	ldi	r22, 0x1F	; 31
    469c:	b1 cf       	rjmp	.-158    	; 0x4600 <NoRoots()+0x174>
    469e:	44 ef       	ldi	r20, 0xF4	; 244
    46a0:	51 e0       	ldi	r21, 0x01	; 1
    46a2:	61 e2       	ldi	r22, 0x21	; 33
    46a4:	b5 cf       	rjmp	.-150    	; 0x4610 <NoRoots()+0x184>
    46a6:	63 e2       	ldi	r22, 0x23	; 35
    46a8:	ab cf       	rjmp	.-170    	; 0x4600 <NoRoots()+0x174>
    46aa:	44 ef       	ldi	r20, 0xF4	; 244
    46ac:	51 e0       	ldi	r21, 0x01	; 1
    46ae:	65 e2       	ldi	r22, 0x25	; 37
    46b0:	b7 cf       	rjmp	.-146    	; 0x4620 <NoRoots()+0x194>
    46b2:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    46b6:	7c 01       	movw	r14, r24
    46b8:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    46bc:	8c 01       	movw	r16, r24
    46be:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    46c2:	9c 01       	movw	r18, r24
    46c4:	4b e4       	ldi	r20, 0x4B	; 75
    46c6:	50 e0       	ldi	r21, 0x00	; 0
    46c8:	67 e2       	ldi	r22, 0x27	; 39
    46ca:	bb cf       	rjmp	.-138    	; 0x4642 <NoRoots()+0x1b6>
    46cc:	69 e2       	ldi	r22, 0x29	; 41
    46ce:	98 cf       	rjmp	.-208    	; 0x4600 <NoRoots()+0x174>
    46d0:	44 ef       	ldi	r20, 0xF4	; 244
    46d2:	51 e0       	ldi	r21, 0x01	; 1
    46d4:	6b e2       	ldi	r22, 0x2B	; 43
    46d6:	9c cf       	rjmp	.-200    	; 0x4610 <NoRoots()+0x184>
    46d8:	6d e2       	ldi	r22, 0x2D	; 45
    46da:	92 cf       	rjmp	.-220    	; 0x4600 <NoRoots()+0x174>
    46dc:	44 ef       	ldi	r20, 0xF4	; 244
    46de:	51 e0       	ldi	r21, 0x01	; 1
    46e0:	6f e2       	ldi	r22, 0x2F	; 47
    46e2:	9e cf       	rjmp	.-196    	; 0x4620 <NoRoots()+0x194>
    46e4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    46e8:	7c 01       	movw	r14, r24
    46ea:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    46ee:	8c 01       	movw	r16, r24
    46f0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    46f4:	9c 01       	movw	r18, r24
    46f6:	4b e4       	ldi	r20, 0x4B	; 75
    46f8:	50 e0       	ldi	r21, 0x00	; 0
    46fa:	61 e3       	ldi	r22, 0x31	; 49
    46fc:	bf cf       	rjmp	.-130    	; 0x467c <NoRoots()+0x1f0>
    46fe:	63 e3       	ldi	r22, 0x33	; 51
    4700:	88 ea       	ldi	r24, 0xA8	; 168
    4702:	98 e4       	ldi	r25, 0x48	; 72
    4704:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <progMatrixHorizontal(unsigned int, unsigned char)>
    4708:	53 cf       	rjmp	.-346    	; 0x45b0 <NoRoots()+0x124>
    470a:	65 e3       	ldi	r22, 0x35	; 53
    470c:	86 ea       	ldi	r24, 0xA6	; 166
    470e:	90 e4       	ldi	r25, 0x40	; 64
    4710:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    4714:	4d cf       	rjmp	.-358    	; 0x45b0 <NoRoots()+0x124>
    4716:	47 e3       	ldi	r20, 0x37	; 55
    4718:	64 ef       	ldi	r22, 0xF4	; 244
    471a:	71 e0       	ldi	r23, 0x01	; 1
    471c:	83 e5       	ldi	r24, 0x53	; 83
    471e:	90 e2       	ldi	r25, 0x20	; 32
    4720:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    4724:	45 cf       	rjmp	.-374    	; 0x45b0 <NoRoots()+0x124>
    4726:	49 e3       	ldi	r20, 0x39	; 57
    4728:	67 e0       	ldi	r22, 0x07	; 7
    472a:	83 e5       	ldi	r24, 0x53	; 83
    472c:	90 e2       	ldi	r25, 0x20	; 32
    472e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4732:	3e cf       	rjmp	.-388    	; 0x45b0 <NoRoots()+0x124>
    4734:	4b e3       	ldi	r20, 0x3B	; 59
    4736:	6a ef       	ldi	r22, 0xFA	; 250
    4738:	70 e0       	ldi	r23, 0x00	; 0
    473a:	f0 cf       	rjmp	.-32     	; 0x471c <NoRoots()+0x290>
    473c:	4d e3       	ldi	r20, 0x3D	; 61
    473e:	6c e0       	ldi	r22, 0x0C	; 12
    4740:	8f e4       	ldi	r24, 0x4F	; 79
    4742:	9e e1       	ldi	r25, 0x1E	; 30
    4744:	f4 cf       	rjmp	.-24     	; 0x472e <NoRoots()+0x2a2>
    4746:	64 e6       	ldi	r22, 0x64	; 100
    4748:	80 e3       	ldi	r24, 0x30	; 48
    474a:	95 e7       	ldi	r25, 0x75	; 117
    474c:	5b cf       	rjmp	.-330    	; 0x4604 <NoRoots()+0x178>
    474e:	60 e0       	ldi	r22, 0x00	; 0
    4750:	8a ed       	ldi	r24, 0xDA	; 218
    4752:	90 e1       	ldi	r25, 0x10	; 16
    4754:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    4758:	80 e0       	ldi	r24, 0x00	; 0
    475a:	6c d8       	rcall	.-3880   	; 0x3834 <switchToSong(unsigned char)>
    475c:	29 cf       	rjmp	.-430    	; 0x45b0 <NoRoots()+0x124>

0000475e <Firework()>:
    475e:	ef 92       	push	r14
    4760:	ff 92       	push	r15
    4762:	0f 93       	push	r16
    4764:	1f 93       	push	r17
    4766:	cf 93       	push	r28
    4768:	df 93       	push	r29
    476a:	00 d0       	rcall	.+0      	; 0x476c <Firework()+0xe>
    476c:	00 d0       	rcall	.+0      	; 0x476e <Firework()+0x10>
    476e:	00 d0       	rcall	.+0      	; 0x4770 <Firework()+0x12>
    4770:	1f 92       	push	r1
    4772:	cd b7       	in	r28, 0x3d	; 61
    4774:	de b7       	in	r29, 0x3e	; 62
    4776:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    477a:	83 32       	cpi	r24, 0x23	; 35
    477c:	09 f4       	brne	.+2      	; 0x4780 <Firework()+0x22>
    477e:	f5 c0       	rjmp	.+490    	; 0x496a <Firework()+0x20c>
    4780:	08 f0       	brcs	.+2      	; 0x4784 <Firework()+0x26>
    4782:	4b c0       	rjmp	.+150    	; 0x481a <Firework()+0xbc>
    4784:	86 31       	cpi	r24, 0x16	; 22
    4786:	09 f4       	brne	.+2      	; 0x478a <Firework()+0x2c>
    4788:	cc c0       	rjmp	.+408    	; 0x4922 <Firework()+0x1c4>
    478a:	18 f5       	brcc	.+70     	; 0x47d2 <Firework()+0x74>
    478c:	8a 30       	cpi	r24, 0x0A	; 10
    478e:	09 f4       	brne	.+2      	; 0x4792 <Firework()+0x34>
    4790:	b8 c0       	rjmp	.+368    	; 0x4902 <Firework()+0x1a4>
    4792:	98 f4       	brcc	.+38     	; 0x47ba <Firework()+0x5c>
    4794:	88 23       	and	r24, r24
    4796:	09 f4       	brne	.+2      	; 0x479a <Firework()+0x3c>
    4798:	94 c0       	rjmp	.+296    	; 0x48c2 <Firework()+0x164>
    479a:	85 30       	cpi	r24, 0x05	; 5
    479c:	09 f4       	brne	.+2      	; 0x47a0 <Firework()+0x42>
    479e:	a9 c0       	rjmp	.+338    	; 0x48f2 <Firework()+0x194>
    47a0:	27 96       	adiw	r28, 0x07	; 7
    47a2:	0f b6       	in	r0, 0x3f	; 63
    47a4:	f8 94       	cli
    47a6:	de bf       	out	0x3e, r29	; 62
    47a8:	0f be       	out	0x3f, r0	; 63
    47aa:	cd bf       	out	0x3d, r28	; 61
    47ac:	df 91       	pop	r29
    47ae:	cf 91       	pop	r28
    47b0:	1f 91       	pop	r17
    47b2:	0f 91       	pop	r16
    47b4:	ff 90       	pop	r15
    47b6:	ef 90       	pop	r14
    47b8:	08 95       	ret
    47ba:	8f 30       	cpi	r24, 0x0F	; 15
    47bc:	09 f4       	brne	.+2      	; 0x47c0 <Firework()+0x62>
    47be:	a9 c0       	rjmp	.+338    	; 0x4912 <Firework()+0x1b4>
    47c0:	46 e1       	ldi	r20, 0x16	; 22
    47c2:	64 e0       	ldi	r22, 0x04	; 4
    47c4:	84 31       	cpi	r24, 0x14	; 20
    47c6:	61 f7       	brne	.-40     	; 0x47a0 <Firework()+0x42>
    47c8:	8e ee       	ldi	r24, 0xEE	; 238
    47ca:	94 e3       	ldi	r25, 0x34	; 52
    47cc:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    47d0:	e7 cf       	rjmp	.-50     	; 0x47a0 <Firework()+0x42>
    47d2:	8c 31       	cpi	r24, 0x1C	; 28
    47d4:	09 f4       	brne	.+2      	; 0x47d8 <Firework()+0x7a>
    47d6:	bb c0       	rjmp	.+374    	; 0x494e <Firework()+0x1f0>
    47d8:	a0 f4       	brcc	.+40     	; 0x4802 <Firework()+0xa4>
    47da:	88 31       	cpi	r24, 0x18	; 24
    47dc:	09 f4       	brne	.+2      	; 0x47e0 <Firework()+0x82>
    47de:	b2 c0       	rjmp	.+356    	; 0x4944 <Firework()+0x1e6>
    47e0:	8a 31       	cpi	r24, 0x1A	; 26
    47e2:	f1 f6       	brne	.-68     	; 0x47a0 <Firework()+0x42>
    47e4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    47e8:	7c 01       	movw	r14, r24
    47ea:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    47ee:	8c 01       	movw	r16, r24
    47f0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    47f4:	9c 01       	movw	r18, r24
    47f6:	42 e3       	ldi	r20, 0x32	; 50
    47f8:	50 e0       	ldi	r21, 0x00	; 0
    47fa:	6c e1       	ldi	r22, 0x1C	; 28
    47fc:	88 ee       	ldi	r24, 0xE8	; 232
    47fe:	93 e0       	ldi	r25, 0x03	; 3
    4800:	9e c0       	rjmp	.+316    	; 0x493e <Firework()+0x1e0>
    4802:	80 32       	cpi	r24, 0x20	; 32
    4804:	09 f4       	brne	.+2      	; 0x4808 <Firework()+0xaa>
    4806:	aa c0       	rjmp	.+340    	; 0x495c <Firework()+0x1fe>
    4808:	82 32       	cpi	r24, 0x22	; 34
    480a:	09 f4       	brne	.+2      	; 0x480e <Firework()+0xb0>
    480c:	ab c0       	rjmp	.+342    	; 0x4964 <Firework()+0x206>
    480e:	8e 31       	cpi	r24, 0x1E	; 30
    4810:	39 f6       	brne	.-114    	; 0x47a0 <Firework()+0x42>
    4812:	44 ef       	ldi	r20, 0xF4	; 244
    4814:	51 e0       	ldi	r21, 0x01	; 1
    4816:	60 e2       	ldi	r22, 0x20	; 32
    4818:	7f c0       	rjmp	.+254    	; 0x4918 <Firework()+0x1ba>
    481a:	8c 32       	cpi	r24, 0x2C	; 44
    481c:	09 f4       	brne	.+2      	; 0x4820 <Firework()+0xc2>
    481e:	bb c0       	rjmp	.+374    	; 0x4996 <Firework()+0x238>
    4820:	18 f5       	brcc	.+70     	; 0x4868 <Firework()+0x10a>
    4822:	86 32       	cpi	r24, 0x26	; 38
    4824:	09 f4       	brne	.+2      	; 0x4828 <Firework()+0xca>
    4826:	b0 c0       	rjmp	.+352    	; 0x4988 <Firework()+0x22a>
    4828:	98 f4       	brcc	.+38     	; 0x4850 <Firework()+0xf2>
    482a:	84 32       	cpi	r24, 0x24	; 36
    482c:	09 f4       	brne	.+2      	; 0x4830 <Firework()+0xd2>
    482e:	aa c0       	rjmp	.+340    	; 0x4984 <Firework()+0x226>
    4830:	85 32       	cpi	r24, 0x25	; 37
    4832:	09 f0       	breq	.+2      	; 0x4836 <Firework()+0xd8>
    4834:	b5 cf       	rjmp	.-150    	; 0x47a0 <Firework()+0x42>
    4836:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    483a:	7c 01       	movw	r14, r24
    483c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4840:	8c 01       	movw	r16, r24
    4842:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4846:	9c 01       	movw	r18, r24
    4848:	42 e3       	ldi	r20, 0x32	; 50
    484a:	50 e0       	ldi	r21, 0x00	; 0
    484c:	66 e2       	ldi	r22, 0x26	; 38
    484e:	d6 cf       	rjmp	.-84     	; 0x47fc <Firework()+0x9e>
    4850:	88 32       	cpi	r24, 0x28	; 40
    4852:	09 f4       	brne	.+2      	; 0x4856 <Firework()+0xf8>
    4854:	9b c0       	rjmp	.+310    	; 0x498c <Firework()+0x22e>
    4856:	8a 32       	cpi	r24, 0x2A	; 42
    4858:	09 f0       	breq	.+2      	; 0x485c <Firework()+0xfe>
    485a:	a2 cf       	rjmp	.-188    	; 0x47a0 <Firework()+0x42>
    485c:	6c e2       	ldi	r22, 0x2C	; 44
    485e:	84 ea       	ldi	r24, 0xA4	; 164
    4860:	98 e3       	ldi	r25, 0x38	; 56
    4862:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <progMatrixHorizontal(unsigned int, unsigned char)>
    4866:	9c cf       	rjmp	.-200    	; 0x47a0 <Firework()+0x42>
    4868:	82 33       	cpi	r24, 0x32	; 50
    486a:	09 f4       	brne	.+2      	; 0x486e <Firework()+0x110>
    486c:	a4 c0       	rjmp	.+328    	; 0x49b6 <Firework()+0x258>
    486e:	98 f4       	brcc	.+38     	; 0x4896 <Firework()+0x138>
    4870:	8e 32       	cpi	r24, 0x2E	; 46
    4872:	09 f4       	brne	.+2      	; 0x4876 <Firework()+0x118>
    4874:	9d c0       	rjmp	.+314    	; 0x49b0 <Firework()+0x252>
    4876:	80 33       	cpi	r24, 0x30	; 48
    4878:	09 f0       	breq	.+2      	; 0x487c <Firework()+0x11e>
    487a:	92 cf       	rjmp	.-220    	; 0x47a0 <Firework()+0x42>
    487c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4880:	7c 01       	movw	r14, r24
    4882:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4886:	8c 01       	movw	r16, r24
    4888:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    488c:	9c 01       	movw	r18, r24
    488e:	42 e3       	ldi	r20, 0x32	; 50
    4890:	50 e0       	ldi	r21, 0x00	; 0
    4892:	62 e3       	ldi	r22, 0x32	; 50
    4894:	b3 cf       	rjmp	.-154    	; 0x47fc <Firework()+0x9e>
    4896:	8c 33       	cpi	r24, 0x3C	; 60
    4898:	09 f4       	brne	.+2      	; 0x489c <Firework()+0x13e>
    489a:	90 c0       	rjmp	.+288    	; 0x49bc <Firework()+0x25e>
    489c:	84 36       	cpi	r24, 0x64	; 100
    489e:	09 f4       	brne	.+2      	; 0x48a2 <Firework()+0x144>
    48a0:	93 c0       	rjmp	.+294    	; 0x49c8 <Firework()+0x26a>
    48a2:	87 33       	cpi	r24, 0x37	; 55
    48a4:	09 f0       	breq	.+2      	; 0x48a8 <Firework()+0x14a>
    48a6:	7c cf       	rjmp	.-264    	; 0x47a0 <Firework()+0x42>
    48a8:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    48ac:	7c 01       	movw	r14, r24
    48ae:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    48b2:	8c 01       	movw	r16, r24
    48b4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    48b8:	9c 01       	movw	r18, r24
    48ba:	42 e3       	ldi	r20, 0x32	; 50
    48bc:	50 e0       	ldi	r21, 0x00	; 0
    48be:	6c e3       	ldi	r22, 0x3C	; 60
    48c0:	9d cf       	rjmp	.-198    	; 0x47fc <Firework()+0x9e>
    48c2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    48c6:	7c 01       	movw	r14, r24
    48c8:	6d ee       	ldi	r22, 0xED	; 237
    48ca:	71 e0       	ldi	r23, 0x01	; 1
    48cc:	ce 01       	movw	r24, r28
    48ce:	01 96       	adiw	r24, 0x01	; 1
    48d0:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    48d4:	05 e0       	ldi	r16, 0x05	; 5
    48d6:	97 01       	movw	r18, r14
    48d8:	42 e3       	ldi	r20, 0x32	; 50
    48da:	50 e0       	ldi	r21, 0x00	; 0
    48dc:	6c e4       	ldi	r22, 0x4C	; 76
    48de:	7d e1       	ldi	r23, 0x1D	; 29
    48e0:	ce 01       	movw	r24, r28
    48e2:	01 96       	adiw	r24, 0x01	; 1
    48e4:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    48e8:	ce 01       	movw	r24, r28
    48ea:	01 96       	adiw	r24, 0x01	; 1
    48ec:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    48f0:	57 cf       	rjmp	.-338    	; 0x47a0 <Firework()+0x42>
    48f2:	4a e0       	ldi	r20, 0x0A	; 10
    48f4:	66 eb       	ldi	r22, 0xB6	; 182
    48f6:	73 e0       	ldi	r23, 0x03	; 3
    48f8:	83 e7       	ldi	r24, 0x73	; 115
    48fa:	9c e3       	ldi	r25, 0x3C	; 60
    48fc:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    4900:	4f cf       	rjmp	.-354    	; 0x47a0 <Firework()+0x42>
    4902:	44 ef       	ldi	r20, 0xF4	; 244
    4904:	51 e0       	ldi	r21, 0x01	; 1
    4906:	6f e0       	ldi	r22, 0x0F	; 15
    4908:	83 e7       	ldi	r24, 0x73	; 115
    490a:	9c e3       	ldi	r25, 0x3C	; 60
    490c:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    4910:	47 cf       	rjmp	.-370    	; 0x47a0 <Firework()+0x42>
    4912:	44 ef       	ldi	r20, 0xF4	; 244
    4914:	51 e0       	ldi	r21, 0x01	; 1
    4916:	64 e1       	ldi	r22, 0x14	; 20
    4918:	83 e7       	ldi	r24, 0x73	; 115
    491a:	9c e3       	ldi	r25, 0x3C	; 60
    491c:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4920:	3f cf       	rjmp	.-386    	; 0x47a0 <Firework()+0x42>
    4922:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4926:	7c 01       	movw	r14, r24
    4928:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    492c:	8c 01       	movw	r16, r24
    492e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4932:	9c 01       	movw	r18, r24
    4934:	42 e3       	ldi	r20, 0x32	; 50
    4936:	50 e0       	ldi	r21, 0x00	; 0
    4938:	68 e1       	ldi	r22, 0x18	; 24
    493a:	85 e8       	ldi	r24, 0x85	; 133
    493c:	97 e0       	ldi	r25, 0x07	; 7
    493e:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4942:	2e cf       	rjmp	.-420    	; 0x47a0 <Firework()+0x42>
    4944:	4a e1       	ldi	r20, 0x1A	; 26
    4946:	63 e0       	ldi	r22, 0x03	; 3
    4948:	84 ea       	ldi	r24, 0xA4	; 164
    494a:	98 e3       	ldi	r25, 0x38	; 56
    494c:	04 c0       	rjmp	.+8      	; 0x4956 <Firework()+0x1f8>
    494e:	4e e1       	ldi	r20, 0x1E	; 30
    4950:	67 e0       	ldi	r22, 0x07	; 7
    4952:	8a e5       	ldi	r24, 0x5A	; 90
    4954:	9c e3       	ldi	r25, 0x3C	; 60
    4956:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    495a:	22 cf       	rjmp	.-444    	; 0x47a0 <Firework()+0x42>
    495c:	44 ef       	ldi	r20, 0xF4	; 244
    495e:	51 e0       	ldi	r21, 0x01	; 1
    4960:	62 e2       	ldi	r22, 0x22	; 34
    4962:	d2 cf       	rjmp	.-92     	; 0x4908 <Firework()+0x1aa>
    4964:	43 e2       	ldi	r20, 0x23	; 35
    4966:	65 e0       	ldi	r22, 0x05	; 5
    4968:	2f cf       	rjmp	.-418    	; 0x47c8 <Firework()+0x6a>
    496a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    496e:	7c 01       	movw	r14, r24
    4970:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4974:	8c 01       	movw	r16, r24
    4976:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    497a:	9c 01       	movw	r18, r24
    497c:	42 e3       	ldi	r20, 0x32	; 50
    497e:	50 e0       	ldi	r21, 0x00	; 0
    4980:	64 e2       	ldi	r22, 0x24	; 36
    4982:	db cf       	rjmp	.-74     	; 0x493a <Firework()+0x1dc>
    4984:	45 e2       	ldi	r20, 0x25	; 37
    4986:	df cf       	rjmp	.-66     	; 0x4946 <Firework()+0x1e8>
    4988:	48 e2       	ldi	r20, 0x28	; 40
    498a:	e2 cf       	rjmp	.-60     	; 0x4950 <Firework()+0x1f2>
    498c:	4a e2       	ldi	r20, 0x2A	; 42
    498e:	62 e0       	ldi	r22, 0x02	; 2
    4990:	83 e7       	ldi	r24, 0x73	; 115
    4992:	9c e3       	ldi	r25, 0x3C	; 60
    4994:	1b cf       	rjmp	.-458    	; 0x47cc <Firework()+0x6e>
    4996:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    499a:	7c 01       	movw	r14, r24
    499c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    49a0:	8c 01       	movw	r16, r24
    49a2:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    49a6:	9c 01       	movw	r18, r24
    49a8:	42 e3       	ldi	r20, 0x32	; 50
    49aa:	50 e0       	ldi	r21, 0x00	; 0
    49ac:	6e e2       	ldi	r22, 0x2E	; 46
    49ae:	26 cf       	rjmp	.-436    	; 0x47fc <Firework()+0x9e>
    49b0:	40 e3       	ldi	r20, 0x30	; 48
    49b2:	65 e0       	ldi	r22, 0x05	; 5
    49b4:	c9 cf       	rjmp	.-110    	; 0x4948 <Firework()+0x1ea>
    49b6:	47 e3       	ldi	r20, 0x37	; 55
    49b8:	6a e0       	ldi	r22, 0x0A	; 10
    49ba:	c6 cf       	rjmp	.-116    	; 0x4948 <Firework()+0x1ea>
    49bc:	64 e6       	ldi	r22, 0x64	; 100
    49be:	80 e1       	ldi	r24, 0x10	; 16
    49c0:	97 e2       	ldi	r25, 0x27	; 39
    49c2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    49c6:	ec ce       	rjmp	.-552    	; 0x47a0 <Firework()+0x42>
    49c8:	60 e0       	ldi	r22, 0x00	; 0
    49ca:	8a ed       	ldi	r24, 0xDA	; 218
    49cc:	90 e1       	ldi	r25, 0x10	; 16
    49ce:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    49d2:	80 e0       	ldi	r24, 0x00	; 0
    49d4:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    49d8:	e3 ce       	rjmp	.-570    	; 0x47a0 <Firework()+0x42>

000049da <Diamonds()>:
    49da:	ef 92       	push	r14
    49dc:	ff 92       	push	r15
    49de:	0f 93       	push	r16
    49e0:	1f 93       	push	r17
    49e2:	cf 93       	push	r28
    49e4:	df 93       	push	r29
    49e6:	00 d0       	rcall	.+0      	; 0x49e8 <Diamonds()+0xe>
    49e8:	00 d0       	rcall	.+0      	; 0x49ea <Diamonds()+0x10>
    49ea:	00 d0       	rcall	.+0      	; 0x49ec <Diamonds()+0x12>
    49ec:	1f 92       	push	r1
    49ee:	cd b7       	in	r28, 0x3d	; 61
    49f0:	de b7       	in	r29, 0x3e	; 62
    49f2:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    49f6:	89 31       	cpi	r24, 0x19	; 25
    49f8:	09 f4       	brne	.+2      	; 0x49fc <Diamonds()+0x22>
    49fa:	86 c0       	rjmp	.+268    	; 0x4b08 <Diamonds()+0x12e>
    49fc:	58 f5       	brcc	.+86     	; 0x4a54 <Diamonds()+0x7a>
    49fe:	85 30       	cpi	r24, 0x05	; 5
    4a00:	09 f4       	brne	.+2      	; 0x4a04 <Diamonds()+0x2a>
    4a02:	74 c0       	rjmp	.+232    	; 0x4aec <Diamonds()+0x112>
    4a04:	b8 f4       	brcc	.+46     	; 0x4a34 <Diamonds()+0x5a>
    4a06:	81 30       	cpi	r24, 0x01	; 1
    4a08:	09 f4       	brne	.+2      	; 0x4a0c <Diamonds()+0x32>
    4a0a:	69 c0       	rjmp	.+210    	; 0x4ade <Diamonds()+0x104>
    4a0c:	08 f4       	brcc	.+2      	; 0x4a10 <Diamonds()+0x36>
    4a0e:	4f c0       	rjmp	.+158    	; 0x4aae <Diamonds()+0xd4>
    4a10:	45 e0       	ldi	r20, 0x05	; 5
    4a12:	64 e0       	ldi	r22, 0x04	; 4
    4a14:	82 30       	cpi	r24, 0x02	; 2
    4a16:	09 f4       	brne	.+2      	; 0x4a1a <Diamonds()+0x40>
    4a18:	64 c0       	rjmp	.+200    	; 0x4ae2 <Diamonds()+0x108>
    4a1a:	27 96       	adiw	r28, 0x07	; 7
    4a1c:	0f b6       	in	r0, 0x3f	; 63
    4a1e:	f8 94       	cli
    4a20:	de bf       	out	0x3e, r29	; 62
    4a22:	0f be       	out	0x3f, r0	; 63
    4a24:	cd bf       	out	0x3d, r28	; 61
    4a26:	df 91       	pop	r29
    4a28:	cf 91       	pop	r28
    4a2a:	1f 91       	pop	r17
    4a2c:	0f 91       	pop	r16
    4a2e:	ff 90       	pop	r15
    4a30:	ef 90       	pop	r14
    4a32:	08 95       	ret
    4a34:	8f 30       	cpi	r24, 0x0F	; 15
    4a36:	09 f4       	brne	.+2      	; 0x4a3a <Diamonds()+0x60>
    4a38:	5c c0       	rjmp	.+184    	; 0x4af2 <Diamonds()+0x118>
    4a3a:	84 31       	cpi	r24, 0x14	; 20
    4a3c:	09 f4       	brne	.+2      	; 0x4a40 <Diamonds()+0x66>
    4a3e:	61 c0       	rjmp	.+194    	; 0x4b02 <Diamonds()+0x128>
    4a40:	8a 30       	cpi	r24, 0x0A	; 10
    4a42:	59 f7       	brne	.-42     	; 0x4a1a <Diamonds()+0x40>
    4a44:	46 e9       	ldi	r20, 0x96	; 150
    4a46:	50 e0       	ldi	r21, 0x00	; 0
    4a48:	6f e0       	ldi	r22, 0x0F	; 15
    4a4a:	80 e0       	ldi	r24, 0x00	; 0
    4a4c:	9b e4       	ldi	r25, 0x4B	; 75
    4a4e:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    4a52:	e3 cf       	rjmp	.-58     	; 0x4a1a <Diamonds()+0x40>
    4a54:	8d 32       	cpi	r24, 0x2D	; 45
    4a56:	09 f4       	brne	.+2      	; 0x4a5a <Diamonds()+0x80>
    4a58:	76 c0       	rjmp	.+236    	; 0x4b46 <Diamonds()+0x16c>
    4a5a:	68 f4       	brcc	.+26     	; 0x4a76 <Diamonds()+0x9c>
    4a5c:	83 32       	cpi	r24, 0x23	; 35
    4a5e:	09 f4       	brne	.+2      	; 0x4a62 <Diamonds()+0x88>
    4a60:	5b c0       	rjmp	.+182    	; 0x4b18 <Diamonds()+0x13e>
    4a62:	88 32       	cpi	r24, 0x28	; 40
    4a64:	09 f4       	brne	.+2      	; 0x4a68 <Diamonds()+0x8e>
    4a66:	5e c0       	rjmp	.+188    	; 0x4b24 <Diamonds()+0x14a>
    4a68:	8e 31       	cpi	r24, 0x1E	; 30
    4a6a:	b9 f6       	brne	.-82     	; 0x4a1a <Diamonds()+0x40>
    4a6c:	43 e2       	ldi	r20, 0x23	; 35
    4a6e:	64 e0       	ldi	r22, 0x04	; 4
    4a70:	80 e2       	ldi	r24, 0x20	; 32
    4a72:	97 e6       	ldi	r25, 0x67	; 103
    4a74:	38 c0       	rjmp	.+112    	; 0x4ae6 <Diamonds()+0x10c>
    4a76:	87 33       	cpi	r24, 0x37	; 55
    4a78:	09 f4       	brne	.+2      	; 0x4a7c <Diamonds()+0xa2>
    4a7a:	6b c0       	rjmp	.+214    	; 0x4b52 <Diamonds()+0x178>
    4a7c:	48 f4       	brcc	.+18     	; 0x4a90 <Diamonds()+0xb6>
    4a7e:	82 33       	cpi	r24, 0x32	; 50
    4a80:	61 f6       	brne	.-104    	; 0x4a1a <Diamonds()+0x40>
    4a82:	47 e3       	ldi	r20, 0x37	; 55
    4a84:	67 e0       	ldi	r22, 0x07	; 7
    4a86:	80 e0       	ldi	r24, 0x00	; 0
    4a88:	9b e4       	ldi	r25, 0x4B	; 75
    4a8a:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4a8e:	c5 cf       	rjmp	.-118    	; 0x4a1a <Diamonds()+0x40>
    4a90:	8c 33       	cpi	r24, 0x3C	; 60
    4a92:	09 f4       	brne	.+2      	; 0x4a96 <Diamonds()+0xbc>
    4a94:	63 c0       	rjmp	.+198    	; 0x4b5c <Diamonds()+0x182>
    4a96:	84 36       	cpi	r24, 0x64	; 100
    4a98:	09 f0       	breq	.+2      	; 0x4a9c <Diamonds()+0xc2>
    4a9a:	bf cf       	rjmp	.-130    	; 0x4a1a <Diamonds()+0x40>
    4a9c:	60 e0       	ldi	r22, 0x00	; 0
    4a9e:	8a ed       	ldi	r24, 0xDA	; 218
    4aa0:	90 e1       	ldi	r25, 0x10	; 16
    4aa2:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    4aa6:	80 e0       	ldi	r24, 0x00	; 0
    4aa8:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    4aac:	b6 cf       	rjmp	.-148    	; 0x4a1a <Diamonds()+0x40>
    4aae:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    4ab2:	7c 01       	movw	r14, r24
    4ab4:	65 e0       	ldi	r22, 0x05	; 5
    4ab6:	72 e0       	ldi	r23, 0x02	; 2
    4ab8:	ce 01       	movw	r24, r28
    4aba:	01 96       	adiw	r24, 0x01	; 1
    4abc:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    4ac0:	01 e0       	ldi	r16, 0x01	; 1
    4ac2:	97 01       	movw	r18, r14
    4ac4:	4b e4       	ldi	r20, 0x4B	; 75
    4ac6:	50 e0       	ldi	r21, 0x00	; 0
    4ac8:	60 e8       	ldi	r22, 0x80	; 128
    4aca:	75 e2       	ldi	r23, 0x25	; 37
    4acc:	ce 01       	movw	r24, r28
    4ace:	01 96       	adiw	r24, 0x01	; 1
    4ad0:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4ad4:	ce 01       	movw	r24, r28
    4ad6:	01 96       	adiw	r24, 0x01	; 1
    4ad8:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    4adc:	9e cf       	rjmp	.-196    	; 0x4a1a <Diamonds()+0x40>
    4ade:	42 e0       	ldi	r20, 0x02	; 2
    4ae0:	63 e0       	ldi	r22, 0x03	; 3
    4ae2:	80 e0       	ldi	r24, 0x00	; 0
    4ae4:	9b e4       	ldi	r25, 0x4B	; 75
    4ae6:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    4aea:	97 cf       	rjmp	.-210    	; 0x4a1a <Diamonds()+0x40>
    4aec:	4a e0       	ldi	r20, 0x0A	; 10
    4aee:	67 e0       	ldi	r22, 0x07	; 7
    4af0:	f8 cf       	rjmp	.-16     	; 0x4ae2 <Diamonds()+0x108>
    4af2:	48 e5       	ldi	r20, 0x58	; 88
    4af4:	52 e0       	ldi	r21, 0x02	; 2
    4af6:	64 e1       	ldi	r22, 0x14	; 20
    4af8:	80 e8       	ldi	r24, 0x80	; 128
    4afa:	90 e7       	ldi	r25, 0x70	; 112
    4afc:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4b00:	8c cf       	rjmp	.-232    	; 0x4a1a <Diamonds()+0x40>
    4b02:	49 e1       	ldi	r20, 0x19	; 25
    4b04:	68 e0       	ldi	r22, 0x08	; 8
    4b06:	ed cf       	rjmp	.-38     	; 0x4ae2 <Diamonds()+0x108>
    4b08:	46 e9       	ldi	r20, 0x96	; 150
    4b0a:	50 e0       	ldi	r21, 0x00	; 0
    4b0c:	6e e1       	ldi	r22, 0x1E	; 30
    4b0e:	80 e0       	ldi	r24, 0x00	; 0
    4b10:	9b e4       	ldi	r25, 0x4B	; 75
    4b12:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    4b16:	81 cf       	rjmp	.-254    	; 0x4a1a <Diamonds()+0x40>
    4b18:	68 e2       	ldi	r22, 0x28	; 40
    4b1a:	80 eb       	ldi	r24, 0xB0	; 176
    4b1c:	94 e0       	ldi	r25, 0x04	; 4
    4b1e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    4b22:	7b cf       	rjmp	.-266    	; 0x4a1a <Diamonds()+0x40>
    4b24:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4b28:	7c 01       	movw	r14, r24
    4b2a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4b2e:	8c 01       	movw	r16, r24
    4b30:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4b34:	9c 01       	movw	r18, r24
    4b36:	42 e3       	ldi	r20, 0x32	; 50
    4b38:	50 e0       	ldi	r21, 0x00	; 0
    4b3a:	6d e2       	ldi	r22, 0x2D	; 45
    4b3c:	80 eb       	ldi	r24, 0xB0	; 176
    4b3e:	94 e0       	ldi	r25, 0x04	; 4
    4b40:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4b44:	6a cf       	rjmp	.-300    	; 0x4a1a <Diamonds()+0x40>
    4b46:	46 e9       	ldi	r20, 0x96	; 150
    4b48:	50 e0       	ldi	r21, 0x00	; 0
    4b4a:	62 e3       	ldi	r22, 0x32	; 50
    4b4c:	80 e0       	ldi	r24, 0x00	; 0
    4b4e:	9b e4       	ldi	r25, 0x4B	; 75
    4b50:	d5 cf       	rjmp	.-86     	; 0x4afc <Diamonds()+0x122>
    4b52:	4c e3       	ldi	r20, 0x3C	; 60
    4b54:	65 e0       	ldi	r22, 0x05	; 5
    4b56:	80 ee       	ldi	r24, 0xE0	; 224
    4b58:	9e e2       	ldi	r25, 0x2E	; 46
    4b5a:	c5 cf       	rjmp	.-118    	; 0x4ae6 <Diamonds()+0x10c>
    4b5c:	42 e3       	ldi	r20, 0x32	; 50
    4b5e:	50 e0       	ldi	r21, 0x00	; 0
    4b60:	64 e6       	ldi	r22, 0x64	; 100
    4b62:	80 e0       	ldi	r24, 0x00	; 0
    4b64:	96 e9       	ldi	r25, 0x96	; 150
    4b66:	0e 94 1a 0a 	call	0x1434	; 0x1434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    4b6a:	57 cf       	rjmp	.-338    	; 0x4a1a <Diamonds()+0x40>

00004b6c <SetFire()>:
    4b6c:	ef 92       	push	r14
    4b6e:	ff 92       	push	r15
    4b70:	0f 93       	push	r16
    4b72:	cf 93       	push	r28
    4b74:	df 93       	push	r29
    4b76:	00 d0       	rcall	.+0      	; 0x4b78 <SetFire()+0xc>
    4b78:	00 d0       	rcall	.+0      	; 0x4b7a <SetFire()+0xe>
    4b7a:	00 d0       	rcall	.+0      	; 0x4b7c <SetFire()+0x10>
    4b7c:	1f 92       	push	r1
    4b7e:	cd b7       	in	r28, 0x3d	; 61
    4b80:	de b7       	in	r29, 0x3e	; 62
    4b82:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    4b86:	83 32       	cpi	r24, 0x23	; 35
    4b88:	09 f4       	brne	.+2      	; 0x4b8c <SetFire()+0x20>
    4b8a:	a5 c0       	rjmp	.+330    	; 0x4cd6 <SetFire()+0x16a>
    4b8c:	a0 f5       	brcc	.+104    	; 0x4bf6 <SetFire()+0x8a>
    4b8e:	8a 30       	cpi	r24, 0x0A	; 10
    4b90:	09 f4       	brne	.+2      	; 0x4b94 <SetFire()+0x28>
    4b92:	92 c0       	rjmp	.+292    	; 0x4cb8 <SetFire()+0x14c>
    4b94:	c0 f4       	brcc	.+48     	; 0x4bc6 <SetFire()+0x5a>
    4b96:	81 30       	cpi	r24, 0x01	; 1
    4b98:	09 f4       	brne	.+2      	; 0x4b9c <SetFire()+0x30>
    4b9a:	84 c0       	rjmp	.+264    	; 0x4ca4 <SetFire()+0x138>
    4b9c:	08 f4       	brcc	.+2      	; 0x4ba0 <SetFire()+0x34>
    4b9e:	6a c0       	rjmp	.+212    	; 0x4c74 <SetFire()+0x108>
    4ba0:	82 30       	cpi	r24, 0x02	; 2
    4ba2:	09 f4       	brne	.+2      	; 0x4ba6 <SetFire()+0x3a>
    4ba4:	86 c0       	rjmp	.+268    	; 0x4cb2 <SetFire()+0x146>
    4ba6:	4a e0       	ldi	r20, 0x0A	; 10
    4ba8:	85 30       	cpi	r24, 0x05	; 5
    4baa:	09 f4       	brne	.+2      	; 0x4bae <SetFire()+0x42>
    4bac:	88 c0       	rjmp	.+272    	; 0x4cbe <SetFire()+0x152>
    4bae:	27 96       	adiw	r28, 0x07	; 7
    4bb0:	0f b6       	in	r0, 0x3f	; 63
    4bb2:	f8 94       	cli
    4bb4:	de bf       	out	0x3e, r29	; 62
    4bb6:	0f be       	out	0x3f, r0	; 63
    4bb8:	cd bf       	out	0x3d, r28	; 61
    4bba:	df 91       	pop	r29
    4bbc:	cf 91       	pop	r28
    4bbe:	0f 91       	pop	r16
    4bc0:	ff 90       	pop	r15
    4bc2:	ef 90       	pop	r14
    4bc4:	08 95       	ret
    4bc6:	84 31       	cpi	r24, 0x14	; 20
    4bc8:	09 f4       	brne	.+2      	; 0x4bcc <SetFire()+0x60>
    4bca:	78 c0       	rjmp	.+240    	; 0x4cbc <SetFire()+0x150>
    4bcc:	38 f4       	brcc	.+14     	; 0x4bdc <SetFire()+0x70>
    4bce:	44 e1       	ldi	r20, 0x14	; 20
    4bd0:	6b e0       	ldi	r22, 0x0B	; 11
    4bd2:	8f 30       	cpi	r24, 0x0F	; 15
    4bd4:	61 f7       	brne	.-40     	; 0x4bae <SetFire()+0x42>
    4bd6:	88 e3       	ldi	r24, 0x38	; 56
    4bd8:	91 e4       	ldi	r25, 0x41	; 65
    4bda:	68 c0       	rjmp	.+208    	; 0x4cac <SetFire()+0x140>
    4bdc:	89 31       	cpi	r24, 0x19	; 25
    4bde:	09 f4       	brne	.+2      	; 0x4be2 <SetFire()+0x76>
    4be0:	72 c0       	rjmp	.+228    	; 0x4cc6 <SetFire()+0x15a>
    4be2:	43 e2       	ldi	r20, 0x23	; 35
    4be4:	8e 31       	cpi	r24, 0x1E	; 30
    4be6:	19 f7       	brne	.-58     	; 0x4bae <SetFire()+0x42>
    4be8:	6d e0       	ldi	r22, 0x0D	; 13
    4bea:	72 e0       	ldi	r23, 0x02	; 2
    4bec:	88 e3       	ldi	r24, 0x38	; 56
    4bee:	91 e4       	ldi	r25, 0x41	; 65
    4bf0:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    4bf4:	dc cf       	rjmp	.-72     	; 0x4bae <SetFire()+0x42>
    4bf6:	8c 33       	cpi	r24, 0x3C	; 60
    4bf8:	09 f4       	brne	.+2      	; 0x4bfc <SetFire()+0x90>
    4bfa:	7e c0       	rjmp	.+252    	; 0x4cf8 <SetFire()+0x18c>
    4bfc:	c8 f4       	brcc	.+50     	; 0x4c30 <SetFire()+0xc4>
    4bfe:	8d 32       	cpi	r24, 0x2D	; 45
    4c00:	09 f4       	brne	.+2      	; 0x4c04 <SetFire()+0x98>
    4c02:	6d c0       	rjmp	.+218    	; 0x4cde <SetFire()+0x172>
    4c04:	40 f4       	brcc	.+16     	; 0x4c16 <SetFire()+0xaa>
    4c06:	88 32       	cpi	r24, 0x28	; 40
    4c08:	91 f6       	brne	.-92     	; 0x4bae <SetFire()+0x42>
    4c0a:	6d e2       	ldi	r22, 0x2D	; 45
    4c0c:	87 e2       	ldi	r24, 0x27	; 39
    4c0e:	98 e0       	ldi	r25, 0x08	; 8
    4c10:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    4c14:	cc cf       	rjmp	.-104    	; 0x4bae <SetFire()+0x42>
    4c16:	82 33       	cpi	r24, 0x32	; 50
    4c18:	09 f4       	brne	.+2      	; 0x4c1c <SetFire()+0xb0>
    4c1a:	65 c0       	rjmp	.+202    	; 0x4ce6 <SetFire()+0x17a>
    4c1c:	4d e0       	ldi	r20, 0x0D	; 13
    4c1e:	52 e0       	ldi	r21, 0x02	; 2
    4c20:	6c e3       	ldi	r22, 0x3C	; 60
    4c22:	87 33       	cpi	r24, 0x37	; 55
    4c24:	21 f6       	brne	.-120    	; 0x4bae <SetFire()+0x42>
    4c26:	88 e3       	ldi	r24, 0x38	; 56
    4c28:	91 e4       	ldi	r25, 0x41	; 65
    4c2a:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4c2e:	bf cf       	rjmp	.-130    	; 0x4bae <SetFire()+0x42>
    4c30:	8b 34       	cpi	r24, 0x4B	; 75
    4c32:	09 f4       	brne	.+2      	; 0x4c36 <SetFire()+0xca>
    4c34:	6d c0       	rjmp	.+218    	; 0x4d10 <SetFire()+0x1a4>
    4c36:	78 f4       	brcc	.+30     	; 0x4c56 <SetFire()+0xea>
    4c38:	81 34       	cpi	r24, 0x41	; 65
    4c3a:	09 f4       	brne	.+2      	; 0x4c3e <SetFire()+0xd2>
    4c3c:	64 c0       	rjmp	.+200    	; 0x4d06 <SetFire()+0x19a>
    4c3e:	86 34       	cpi	r24, 0x46	; 70
    4c40:	09 f0       	breq	.+2      	; 0x4c44 <SetFire()+0xd8>
    4c42:	b5 cf       	rjmp	.-150    	; 0x4bae <SetFire()+0x42>
    4c44:	20 e0       	ldi	r18, 0x00	; 0
    4c46:	4a ef       	ldi	r20, 0xFA	; 250
    4c48:	50 e0       	ldi	r21, 0x00	; 0
    4c4a:	6b e4       	ldi	r22, 0x4B	; 75
    4c4c:	88 e3       	ldi	r24, 0x38	; 56
    4c4e:	91 e4       	ldi	r25, 0x41	; 65
    4c50:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <progCircles(unsigned int, unsigned char, unsigned int, bool)>
    4c54:	ac cf       	rjmp	.-168    	; 0x4bae <SetFire()+0x42>
    4c56:	80 35       	cpi	r24, 0x50	; 80
    4c58:	09 f4       	brne	.+2      	; 0x4c5c <SetFire()+0xf0>
    4c5a:	60 c0       	rjmp	.+192    	; 0x4d1c <SetFire()+0x1b0>
    4c5c:	84 36       	cpi	r24, 0x64	; 100
    4c5e:	09 f0       	breq	.+2      	; 0x4c62 <SetFire()+0xf6>
    4c60:	a6 cf       	rjmp	.-180    	; 0x4bae <SetFire()+0x42>
    4c62:	60 e0       	ldi	r22, 0x00	; 0
    4c64:	8a ed       	ldi	r24, 0xDA	; 218
    4c66:	90 e1       	ldi	r25, 0x10	; 16
    4c68:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    4c6c:	80 e0       	ldi	r24, 0x00	; 0
    4c6e:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    4c72:	9d cf       	rjmp	.-198    	; 0x4bae <SetFire()+0x42>
    4c74:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    4c78:	7c 01       	movw	r14, r24
    4c7a:	69 e1       	ldi	r22, 0x19	; 25
    4c7c:	72 e0       	ldi	r23, 0x02	; 2
    4c7e:	ce 01       	movw	r24, r28
    4c80:	01 96       	adiw	r24, 0x01	; 1
    4c82:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    4c86:	01 e0       	ldi	r16, 0x01	; 1
    4c88:	97 01       	movw	r18, r14
    4c8a:	4b e4       	ldi	r20, 0x4B	; 75
    4c8c:	50 e0       	ldi	r21, 0x00	; 0
    4c8e:	6c e0       	ldi	r22, 0x0C	; 12
    4c90:	78 e3       	ldi	r23, 0x38	; 56
    4c92:	ce 01       	movw	r24, r28
    4c94:	01 96       	adiw	r24, 0x01	; 1
    4c96:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4c9a:	ce 01       	movw	r24, r28
    4c9c:	01 96       	adiw	r24, 0x01	; 1
    4c9e:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    4ca2:	85 cf       	rjmp	.-246    	; 0x4bae <SetFire()+0x42>
    4ca4:	42 e0       	ldi	r20, 0x02	; 2
    4ca6:	64 e0       	ldi	r22, 0x04	; 4
    4ca8:	88 ec       	ldi	r24, 0xC8	; 200
    4caa:	99 e2       	ldi	r25, 0x29	; 41
    4cac:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    4cb0:	7e cf       	rjmp	.-260    	; 0x4bae <SetFire()+0x42>
    4cb2:	45 e0       	ldi	r20, 0x05	; 5
    4cb4:	68 e0       	ldi	r22, 0x08	; 8
    4cb6:	8f cf       	rjmp	.-226    	; 0x4bd6 <SetFire()+0x6a>
    4cb8:	4f e0       	ldi	r20, 0x0F	; 15
    4cba:	96 cf       	rjmp	.-212    	; 0x4be8 <SetFire()+0x7c>
    4cbc:	49 e1       	ldi	r20, 0x19	; 25
    4cbe:	61 e0       	ldi	r22, 0x01	; 1
    4cc0:	81 e1       	ldi	r24, 0x11	; 17
    4cc2:	99 e3       	ldi	r25, 0x39	; 57
    4cc4:	f3 cf       	rjmp	.-26     	; 0x4cac <SetFire()+0x140>
    4cc6:	4d e0       	ldi	r20, 0x0D	; 13
    4cc8:	52 e0       	ldi	r21, 0x02	; 2
    4cca:	6e e1       	ldi	r22, 0x1E	; 30
    4ccc:	88 e3       	ldi	r24, 0x38	; 56
    4cce:	91 e4       	ldi	r25, 0x41	; 65
    4cd0:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    4cd4:	6c cf       	rjmp	.-296    	; 0x4bae <SetFire()+0x42>
    4cd6:	4d e0       	ldi	r20, 0x0D	; 13
    4cd8:	52 e0       	ldi	r21, 0x02	; 2
    4cda:	68 e2       	ldi	r22, 0x28	; 40
    4cdc:	a4 cf       	rjmp	.-184    	; 0x4c26 <SetFire()+0xba>
    4cde:	4a ef       	ldi	r20, 0xFA	; 250
    4ce0:	50 e0       	ldi	r21, 0x00	; 0
    4ce2:	62 e3       	ldi	r22, 0x32	; 50
    4ce4:	f3 cf       	rjmp	.-26     	; 0x4ccc <SetFire()+0x160>
    4ce6:	21 e0       	ldi	r18, 0x01	; 1
    4ce8:	4a ef       	ldi	r20, 0xFA	; 250
    4cea:	50 e0       	ldi	r21, 0x00	; 0
    4cec:	67 e3       	ldi	r22, 0x37	; 55
    4cee:	88 e3       	ldi	r24, 0x38	; 56
    4cf0:	91 e4       	ldi	r25, 0x41	; 65
    4cf2:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>
    4cf6:	5b cf       	rjmp	.-330    	; 0x4bae <SetFire()+0x42>
    4cf8:	41 e4       	ldi	r20, 0x41	; 65
    4cfa:	6c e0       	ldi	r22, 0x0C	; 12
    4cfc:	88 e3       	ldi	r24, 0x38	; 56
    4cfe:	91 e4       	ldi	r25, 0x41	; 65
    4d00:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4d04:	54 cf       	rjmp	.-344    	; 0x4bae <SetFire()+0x42>
    4d06:	20 e0       	ldi	r18, 0x00	; 0
    4d08:	4a ef       	ldi	r20, 0xFA	; 250
    4d0a:	50 e0       	ldi	r21, 0x00	; 0
    4d0c:	66 e4       	ldi	r22, 0x46	; 70
    4d0e:	ef cf       	rjmp	.-34     	; 0x4cee <SetFire()+0x182>
    4d10:	60 e5       	ldi	r22, 0x50	; 80
    4d12:	8d eb       	ldi	r24, 0xBD	; 189
    4d14:	92 e9       	ldi	r25, 0x92	; 146
    4d16:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <progMatrixHorizontal(unsigned int, unsigned char)>
    4d1a:	49 cf       	rjmp	.-366    	; 0x4bae <SetFire()+0x42>
    4d1c:	64 e6       	ldi	r22, 0x64	; 100
    4d1e:	80 e1       	ldi	r24, 0x10	; 16
    4d20:	97 e2       	ldi	r25, 0x27	; 39
    4d22:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    4d26:	43 cf       	rjmp	.-378    	; 0x4bae <SetFire()+0x42>

00004d28 <Chandelier()>:
    4d28:	ef 92       	push	r14
    4d2a:	ff 92       	push	r15
    4d2c:	0f 93       	push	r16
    4d2e:	1f 93       	push	r17
    4d30:	cf 93       	push	r28
    4d32:	df 93       	push	r29
    4d34:	00 d0       	rcall	.+0      	; 0x4d36 <Chandelier()+0xe>
    4d36:	00 d0       	rcall	.+0      	; 0x4d38 <Chandelier()+0x10>
    4d38:	00 d0       	rcall	.+0      	; 0x4d3a <Chandelier()+0x12>
    4d3a:	1f 92       	push	r1
    4d3c:	cd b7       	in	r28, 0x3d	; 61
    4d3e:	de b7       	in	r29, 0x3e	; 62
    4d40:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    4d44:	8e 31       	cpi	r24, 0x1E	; 30
    4d46:	09 f4       	brne	.+2      	; 0x4d4a <Chandelier()+0x22>
    4d48:	b0 c0       	rjmp	.+352    	; 0x4eaa <Chandelier()+0x182>
    4d4a:	a0 f5       	brcc	.+104    	; 0x4db4 <Chandelier()+0x8c>
    4d4c:	85 30       	cpi	r24, 0x05	; 5
    4d4e:	09 f4       	brne	.+2      	; 0x4d52 <Chandelier()+0x2a>
    4d50:	93 c0       	rjmp	.+294    	; 0x4e78 <Chandelier()+0x150>
    4d52:	b8 f4       	brcc	.+46     	; 0x4d82 <Chandelier()+0x5a>
    4d54:	81 30       	cpi	r24, 0x01	; 1
    4d56:	09 f4       	brne	.+2      	; 0x4d5a <Chandelier()+0x32>
    4d58:	88 c0       	rjmp	.+272    	; 0x4e6a <Chandelier()+0x142>
    4d5a:	08 f4       	brcc	.+2      	; 0x4d5e <Chandelier()+0x36>
    4d5c:	6e c0       	rjmp	.+220    	; 0x4e3a <Chandelier()+0x112>
    4d5e:	45 e0       	ldi	r20, 0x05	; 5
    4d60:	64 e0       	ldi	r22, 0x04	; 4
    4d62:	82 30       	cpi	r24, 0x02	; 2
    4d64:	09 f4       	brne	.+2      	; 0x4d68 <Chandelier()+0x40>
    4d66:	83 c0       	rjmp	.+262    	; 0x4e6e <Chandelier()+0x146>
    4d68:	27 96       	adiw	r28, 0x07	; 7
    4d6a:	0f b6       	in	r0, 0x3f	; 63
    4d6c:	f8 94       	cli
    4d6e:	de bf       	out	0x3e, r29	; 62
    4d70:	0f be       	out	0x3f, r0	; 63
    4d72:	cd bf       	out	0x3d, r28	; 61
    4d74:	df 91       	pop	r29
    4d76:	cf 91       	pop	r28
    4d78:	1f 91       	pop	r17
    4d7a:	0f 91       	pop	r16
    4d7c:	ff 90       	pop	r15
    4d7e:	ef 90       	pop	r14
    4d80:	08 95       	ret
    4d82:	8f 30       	cpi	r24, 0x0F	; 15
    4d84:	09 f4       	brne	.+2      	; 0x4d88 <Chandelier()+0x60>
    4d86:	7c c0       	rjmp	.+248    	; 0x4e80 <Chandelier()+0x158>
    4d88:	40 f4       	brcc	.+16     	; 0x4d9a <Chandelier()+0x72>
    4d8a:	8a 30       	cpi	r24, 0x0A	; 10
    4d8c:	69 f7       	brne	.-38     	; 0x4d68 <Chandelier()+0x40>
    4d8e:	6f e0       	ldi	r22, 0x0F	; 15
    4d90:	86 e0       	ldi	r24, 0x06	; 6
    4d92:	9f e3       	ldi	r25, 0x3F	; 63
    4d94:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    4d98:	e7 cf       	rjmp	.-50     	; 0x4d68 <Chandelier()+0x40>
    4d9a:	84 31       	cpi	r24, 0x14	; 20
    4d9c:	09 f4       	brne	.+2      	; 0x4da0 <Chandelier()+0x78>
    4d9e:	74 c0       	rjmp	.+232    	; 0x4e88 <Chandelier()+0x160>
    4da0:	44 ef       	ldi	r20, 0xF4	; 244
    4da2:	51 e0       	ldi	r21, 0x01	; 1
    4da4:	6e e1       	ldi	r22, 0x1E	; 30
    4da6:	89 31       	cpi	r24, 0x19	; 25
    4da8:	f9 f6       	brne	.-66     	; 0x4d68 <Chandelier()+0x40>
    4daa:	86 e0       	ldi	r24, 0x06	; 6
    4dac:	9f e3       	ldi	r25, 0x3F	; 63
    4dae:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    4db2:	da cf       	rjmp	.-76     	; 0x4d68 <Chandelier()+0x40>
    4db4:	87 33       	cpi	r24, 0x37	; 55
    4db6:	09 f4       	brne	.+2      	; 0x4dba <Chandelier()+0x92>
    4db8:	90 c0       	rjmp	.+288    	; 0x4eda <Chandelier()+0x1b2>
    4dba:	d0 f4       	brcc	.+52     	; 0x4df0 <Chandelier()+0xc8>
    4dbc:	88 32       	cpi	r24, 0x28	; 40
    4dbe:	09 f4       	brne	.+2      	; 0x4dc2 <Chandelier()+0x9a>
    4dc0:	79 c0       	rjmp	.+242    	; 0x4eb4 <Chandelier()+0x18c>
    4dc2:	50 f4       	brcc	.+20     	; 0x4dd8 <Chandelier()+0xb0>
    4dc4:	44 ef       	ldi	r20, 0xF4	; 244
    4dc6:	51 e0       	ldi	r21, 0x01	; 1
    4dc8:	68 e2       	ldi	r22, 0x28	; 40
    4dca:	83 32       	cpi	r24, 0x23	; 35
    4dcc:	69 f6       	brne	.-102    	; 0x4d68 <Chandelier()+0x40>
    4dce:	86 e0       	ldi	r24, 0x06	; 6
    4dd0:	9f e3       	ldi	r25, 0x3F	; 63
    4dd2:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    4dd6:	c8 cf       	rjmp	.-112    	; 0x4d68 <Chandelier()+0x40>
    4dd8:	8d 32       	cpi	r24, 0x2D	; 45
    4dda:	09 f4       	brne	.+2      	; 0x4dde <Chandelier()+0xb6>
    4ddc:	78 c0       	rjmp	.+240    	; 0x4ece <Chandelier()+0x1a6>
    4dde:	82 33       	cpi	r24, 0x32	; 50
    4de0:	19 f6       	brne	.-122    	; 0x4d68 <Chandelier()+0x40>
    4de2:	47 e3       	ldi	r20, 0x37	; 55
    4de4:	67 e0       	ldi	r22, 0x07	; 7
    4de6:	8d ef       	ldi	r24, 0xFD	; 253
    4de8:	9e e3       	ldi	r25, 0x3E	; 62
    4dea:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4dee:	bc cf       	rjmp	.-136    	; 0x4d68 <Chandelier()+0x40>
    4df0:	81 34       	cpi	r24, 0x41	; 65
    4df2:	09 f4       	brne	.+2      	; 0x4df6 <Chandelier()+0xce>
    4df4:	76 c0       	rjmp	.+236    	; 0x4ee2 <Chandelier()+0x1ba>
    4df6:	90 f4       	brcc	.+36     	; 0x4e1c <Chandelier()+0xf4>
    4df8:	8c 33       	cpi	r24, 0x3C	; 60
    4dfa:	09 f0       	breq	.+2      	; 0x4dfe <Chandelier()+0xd6>
    4dfc:	b5 cf       	rjmp	.-150    	; 0x4d68 <Chandelier()+0x40>
    4dfe:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4e02:	7c 01       	movw	r14, r24
    4e04:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4e08:	8c 01       	movw	r16, r24
    4e0a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4e0e:	9c 01       	movw	r18, r24
    4e10:	4b e4       	ldi	r20, 0x4B	; 75
    4e12:	50 e0       	ldi	r21, 0x00	; 0
    4e14:	61 e4       	ldi	r22, 0x41	; 65
    4e16:	84 e4       	ldi	r24, 0x44	; 68
    4e18:	9f e2       	ldi	r25, 0x2F	; 47
    4e1a:	44 c0       	rjmp	.+136    	; 0x4ea4 <Chandelier()+0x17c>
    4e1c:	86 34       	cpi	r24, 0x46	; 70
    4e1e:	09 f4       	brne	.+2      	; 0x4e22 <Chandelier()+0xfa>
    4e20:	65 c0       	rjmp	.+202    	; 0x4eec <Chandelier()+0x1c4>
    4e22:	84 36       	cpi	r24, 0x64	; 100
    4e24:	09 f0       	breq	.+2      	; 0x4e28 <Chandelier()+0x100>
    4e26:	a0 cf       	rjmp	.-192    	; 0x4d68 <Chandelier()+0x40>
    4e28:	60 e0       	ldi	r22, 0x00	; 0
    4e2a:	8a ed       	ldi	r24, 0xDA	; 218
    4e2c:	90 e1       	ldi	r25, 0x10	; 16
    4e2e:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    4e32:	80 e0       	ldi	r24, 0x00	; 0
    4e34:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    4e38:	97 cf       	rjmp	.-210    	; 0x4d68 <Chandelier()+0x40>
    4e3a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    4e3e:	7c 01       	movw	r14, r24
    4e40:	67 e3       	ldi	r22, 0x37	; 55
    4e42:	72 e0       	ldi	r23, 0x02	; 2
    4e44:	ce 01       	movw	r24, r28
    4e46:	01 96       	adiw	r24, 0x01	; 1
    4e48:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    4e4c:	01 e0       	ldi	r16, 0x01	; 1
    4e4e:	97 01       	movw	r18, r14
    4e50:	4b e4       	ldi	r20, 0x4B	; 75
    4e52:	50 e0       	ldi	r21, 0x00	; 0
    4e54:	6e e0       	ldi	r22, 0x0E	; 14
    4e56:	7d e3       	ldi	r23, 0x3D	; 61
    4e58:	ce 01       	movw	r24, r28
    4e5a:	01 96       	adiw	r24, 0x01	; 1
    4e5c:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4e60:	ce 01       	movw	r24, r28
    4e62:	01 96       	adiw	r24, 0x01	; 1
    4e64:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    4e68:	7f cf       	rjmp	.-258    	; 0x4d68 <Chandelier()+0x40>
    4e6a:	42 e0       	ldi	r20, 0x02	; 2
    4e6c:	63 e0       	ldi	r22, 0x03	; 3
    4e6e:	83 e8       	ldi	r24, 0x83	; 131
    4e70:	9f e1       	ldi	r25, 0x1F	; 31
    4e72:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    4e76:	78 cf       	rjmp	.-272    	; 0x4d68 <Chandelier()+0x40>
    4e78:	44 ef       	ldi	r20, 0xF4	; 244
    4e7a:	51 e0       	ldi	r21, 0x01	; 1
    4e7c:	6a e0       	ldi	r22, 0x0A	; 10
    4e7e:	95 cf       	rjmp	.-214    	; 0x4daa <Chandelier()+0x82>
    4e80:	44 ef       	ldi	r20, 0xF4	; 244
    4e82:	51 e0       	ldi	r21, 0x01	; 1
    4e84:	64 e1       	ldi	r22, 0x14	; 20
    4e86:	a3 cf       	rjmp	.-186    	; 0x4dce <Chandelier()+0xa6>
    4e88:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4e8c:	7c 01       	movw	r14, r24
    4e8e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4e92:	8c 01       	movw	r16, r24
    4e94:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4e98:	9c 01       	movw	r18, r24
    4e9a:	4b e4       	ldi	r20, 0x4B	; 75
    4e9c:	50 e0       	ldi	r21, 0x00	; 0
    4e9e:	69 e1       	ldi	r22, 0x19	; 25
    4ea0:	86 e0       	ldi	r24, 0x06	; 6
    4ea2:	9f e3       	ldi	r25, 0x3F	; 63
    4ea4:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4ea8:	5f cf       	rjmp	.-322    	; 0x4d68 <Chandelier()+0x40>
    4eaa:	43 e2       	ldi	r20, 0x23	; 35
    4eac:	64 e0       	ldi	r22, 0x04	; 4
    4eae:	86 e0       	ldi	r24, 0x06	; 6
    4eb0:	9f e3       	ldi	r25, 0x3F	; 63
    4eb2:	df cf       	rjmp	.-66     	; 0x4e72 <Chandelier()+0x14a>
    4eb4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4eb8:	7c 01       	movw	r14, r24
    4eba:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4ebe:	8c 01       	movw	r16, r24
    4ec0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    4ec4:	9c 01       	movw	r18, r24
    4ec6:	4b e4       	ldi	r20, 0x4B	; 75
    4ec8:	50 e0       	ldi	r21, 0x00	; 0
    4eca:	6d e2       	ldi	r22, 0x2D	; 45
    4ecc:	e9 cf       	rjmp	.-46     	; 0x4ea0 <Chandelier()+0x178>
    4ece:	62 e3       	ldi	r22, 0x32	; 50
    4ed0:	82 e7       	ldi	r24, 0x72	; 114
    4ed2:	9f e1       	ldi	r25, 0x1F	; 31
    4ed4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    4ed8:	47 cf       	rjmp	.-370    	; 0x4d68 <Chandelier()+0x40>
    4eda:	44 ef       	ldi	r20, 0xF4	; 244
    4edc:	51 e0       	ldi	r21, 0x01	; 1
    4ede:	6c e3       	ldi	r22, 0x3C	; 60
    4ee0:	76 cf       	rjmp	.-276    	; 0x4dce <Chandelier()+0xa6>
    4ee2:	46 e4       	ldi	r20, 0x46	; 70
    4ee4:	6c e0       	ldi	r22, 0x0C	; 12
    4ee6:	89 eb       	ldi	r24, 0xB9	; 185
    4ee8:	9f e0       	ldi	r25, 0x0F	; 15
    4eea:	7f cf       	rjmp	.-258    	; 0x4dea <Chandelier()+0xc2>
    4eec:	64 e6       	ldi	r22, 0x64	; 100
    4eee:	80 e1       	ldi	r24, 0x10	; 16
    4ef0:	97 e2       	ldi	r25, 0x27	; 39
    4ef2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    4ef6:	38 cf       	rjmp	.-400    	; 0x4d68 <Chandelier()+0x40>

00004ef8 <Titanium()>:
    4ef8:	ef 92       	push	r14
    4efa:	ff 92       	push	r15
    4efc:	0f 93       	push	r16
    4efe:	1f 93       	push	r17
    4f00:	cf 93       	push	r28
    4f02:	df 93       	push	r29
    4f04:	00 d0       	rcall	.+0      	; 0x4f06 <Titanium()+0xe>
    4f06:	00 d0       	rcall	.+0      	; 0x4f08 <Titanium()+0x10>
    4f08:	00 d0       	rcall	.+0      	; 0x4f0a <Titanium()+0x12>
    4f0a:	1f 92       	push	r1
    4f0c:	cd b7       	in	r28, 0x3d	; 61
    4f0e:	de b7       	in	r29, 0x3e	; 62
    4f10:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    4f14:	88 32       	cpi	r24, 0x28	; 40
    4f16:	09 f4       	brne	.+2      	; 0x4f1a <Titanium()+0x22>
    4f18:	a8 c0       	rjmp	.+336    	; 0x506a <Titanium()+0x172>
    4f1a:	08 f0       	brcs	.+2      	; 0x4f1e <Titanium()+0x26>
    4f1c:	44 c0       	rjmp	.+136    	; 0x4fa6 <Titanium()+0xae>
    4f1e:	8f 30       	cpi	r24, 0x0F	; 15
    4f20:	09 f4       	brne	.+2      	; 0x4f24 <Titanium()+0x2c>
    4f22:	8b c0       	rjmp	.+278    	; 0x503a <Titanium()+0x142>
    4f24:	00 f5       	brcc	.+64     	; 0x4f66 <Titanium()+0x6e>
    4f26:	85 30       	cpi	r24, 0x05	; 5
    4f28:	09 f4       	brne	.+2      	; 0x4f2c <Titanium()+0x34>
    4f2a:	7a c0       	rjmp	.+244    	; 0x5020 <Titanium()+0x128>
    4f2c:	8a 30       	cpi	r24, 0x0A	; 10
    4f2e:	09 f4       	brne	.+2      	; 0x4f32 <Titanium()+0x3a>
    4f30:	7f c0       	rjmp	.+254    	; 0x5030 <Titanium()+0x138>
    4f32:	81 11       	cpse	r24, r1
    4f34:	1f c0       	rjmp	.+62     	; 0x4f74 <Titanium()+0x7c>
    4f36:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    4f3a:	7c 01       	movw	r14, r24
    4f3c:	69 e4       	ldi	r22, 0x49	; 73
    4f3e:	72 e0       	ldi	r23, 0x02	; 2
    4f40:	ce 01       	movw	r24, r28
    4f42:	01 96       	adiw	r24, 0x01	; 1
    4f44:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    4f48:	05 e0       	ldi	r16, 0x05	; 5
    4f4a:	97 01       	movw	r18, r14
    4f4c:	4b e4       	ldi	r20, 0x4B	; 75
    4f4e:	50 e0       	ldi	r21, 0x00	; 0
    4f50:	6c e7       	ldi	r22, 0x7C	; 124
    4f52:	7e e2       	ldi	r23, 0x2E	; 46
    4f54:	ce 01       	movw	r24, r28
    4f56:	01 96       	adiw	r24, 0x01	; 1
    4f58:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    4f5c:	ce 01       	movw	r24, r28
    4f5e:	01 96       	adiw	r24, 0x01	; 1
    4f60:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    4f64:	07 c0       	rjmp	.+14     	; 0x4f74 <Titanium()+0x7c>
    4f66:	89 31       	cpi	r24, 0x19	; 25
    4f68:	09 f4       	brne	.+2      	; 0x4f6c <Titanium()+0x74>
    4f6a:	70 c0       	rjmp	.+224    	; 0x504c <Titanium()+0x154>
    4f6c:	80 f4       	brcc	.+32     	; 0x4f8e <Titanium()+0x96>
    4f6e:	84 31       	cpi	r24, 0x14	; 20
    4f70:	09 f4       	brne	.+2      	; 0x4f74 <Titanium()+0x7c>
    4f72:	66 c0       	rjmp	.+204    	; 0x5040 <Titanium()+0x148>
    4f74:	27 96       	adiw	r28, 0x07	; 7
    4f76:	0f b6       	in	r0, 0x3f	; 63
    4f78:	f8 94       	cli
    4f7a:	de bf       	out	0x3e, r29	; 62
    4f7c:	0f be       	out	0x3f, r0	; 63
    4f7e:	cd bf       	out	0x3d, r28	; 61
    4f80:	df 91       	pop	r29
    4f82:	cf 91       	pop	r28
    4f84:	1f 91       	pop	r17
    4f86:	0f 91       	pop	r16
    4f88:	ff 90       	pop	r15
    4f8a:	ef 90       	pop	r14
    4f8c:	08 95       	ret
    4f8e:	8e 31       	cpi	r24, 0x1E	; 30
    4f90:	09 f4       	brne	.+2      	; 0x4f94 <Titanium()+0x9c>
    4f92:	64 c0       	rjmp	.+200    	; 0x505c <Titanium()+0x164>
    4f94:	48 e2       	ldi	r20, 0x28	; 40
    4f96:	69 e0       	ldi	r22, 0x09	; 9
    4f98:	83 32       	cpi	r24, 0x23	; 35
    4f9a:	61 f7       	brne	.-40     	; 0x4f74 <Titanium()+0x7c>
    4f9c:	89 e7       	ldi	r24, 0x79	; 121
    4f9e:	9b e3       	ldi	r25, 0x3B	; 59
    4fa0:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    4fa4:	e7 cf       	rjmp	.-50     	; 0x4f74 <Titanium()+0x7c>
    4fa6:	81 34       	cpi	r24, 0x41	; 65
    4fa8:	09 f4       	brne	.+2      	; 0x4fac <Titanium()+0xb4>
    4faa:	6d c0       	rjmp	.+218    	; 0x5086 <Titanium()+0x18e>
    4fac:	a8 f4       	brcc	.+42     	; 0x4fd8 <Titanium()+0xe0>
    4fae:	82 33       	cpi	r24, 0x32	; 50
    4fb0:	09 f4       	brne	.+2      	; 0x4fb4 <Titanium()+0xbc>
    4fb2:	5e c0       	rjmp	.+188    	; 0x5070 <Titanium()+0x178>
    4fb4:	30 f4       	brcc	.+12     	; 0x4fc2 <Titanium()+0xca>
    4fb6:	8d 32       	cpi	r24, 0x2D	; 45
    4fb8:	e9 f6       	brne	.-70     	; 0x4f74 <Titanium()+0x7c>
    4fba:	62 e3       	ldi	r22, 0x32	; 50
    4fbc:	89 e7       	ldi	r24, 0x79	; 121
    4fbe:	9b e3       	ldi	r25, 0x3B	; 59
    4fc0:	42 c0       	rjmp	.+132    	; 0x5046 <Titanium()+0x14e>
    4fc2:	87 33       	cpi	r24, 0x37	; 55
    4fc4:	09 f4       	brne	.+2      	; 0x4fc8 <Titanium()+0xd0>
    4fc6:	5a c0       	rjmp	.+180    	; 0x507c <Titanium()+0x184>
    4fc8:	8c 33       	cpi	r24, 0x3C	; 60
    4fca:	a1 f6       	brne	.-88     	; 0x4f74 <Titanium()+0x7c>
    4fcc:	61 e4       	ldi	r22, 0x41	; 65
    4fce:	8d e6       	ldi	r24, 0x6D	; 109
    4fd0:	9d e3       	ldi	r25, 0x3D	; 61
    4fd2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    4fd6:	ce cf       	rjmp	.-100    	; 0x4f74 <Titanium()+0x7c>
    4fd8:	80 35       	cpi	r24, 0x50	; 80
    4fda:	09 f4       	brne	.+2      	; 0x4fde <Titanium()+0xe6>
    4fdc:	61 c0       	rjmp	.+194    	; 0x50a0 <Titanium()+0x1a8>
    4fde:	88 f4       	brcc	.+34     	; 0x5002 <Titanium()+0x10a>
    4fe0:	8b 34       	cpi	r24, 0x4B	; 75
    4fe2:	41 f6       	brne	.-112    	; 0x4f74 <Titanium()+0x7c>
    4fe4:	ee 24       	eor	r14, r14
    4fe6:	ea 94       	dec	r14
    4fe8:	f1 2c       	mov	r15, r1
    4fea:	0f ef       	ldi	r16, 0xFF	; 255
    4fec:	10 e0       	ldi	r17, 0x00	; 0
    4fee:	2f ef       	ldi	r18, 0xFF	; 255
    4ff0:	30 e0       	ldi	r19, 0x00	; 0
    4ff2:	4f ea       	ldi	r20, 0xAF	; 175
    4ff4:	50 e0       	ldi	r21, 0x00	; 0
    4ff6:	60 e5       	ldi	r22, 0x50	; 80
    4ff8:	8d e0       	ldi	r24, 0x0D	; 13
    4ffa:	94 e3       	ldi	r25, 0x34	; 52
    4ffc:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    5000:	b9 cf       	rjmp	.-142    	; 0x4f74 <Titanium()+0x7c>
    5002:	85 35       	cpi	r24, 0x55	; 85
    5004:	09 f4       	brne	.+2      	; 0x5008 <Titanium()+0x110>
    5006:	52 c0       	rjmp	.+164    	; 0x50ac <Titanium()+0x1b4>
    5008:	84 36       	cpi	r24, 0x64	; 100
    500a:	09 f0       	breq	.+2      	; 0x500e <Titanium()+0x116>
    500c:	b3 cf       	rjmp	.-154    	; 0x4f74 <Titanium()+0x7c>
    500e:	60 e0       	ldi	r22, 0x00	; 0
    5010:	8a ed       	ldi	r24, 0xDA	; 218
    5012:	90 e1       	ldi	r25, 0x10	; 16
    5014:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    5018:	80 e0       	ldi	r24, 0x00	; 0
    501a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    501e:	aa cf       	rjmp	.-172    	; 0x4f74 <Titanium()+0x7c>
    5020:	4b ed       	ldi	r20, 0xDB	; 219
    5022:	51 e0       	ldi	r21, 0x01	; 1
    5024:	6a e0       	ldi	r22, 0x0A	; 10
    5026:	8a e5       	ldi	r24, 0x5A	; 90
    5028:	93 e2       	ldi	r25, 0x23	; 35
    502a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    502e:	a2 cf       	rjmp	.-188    	; 0x4f74 <Titanium()+0x7c>
    5030:	4f e0       	ldi	r20, 0x0F	; 15
    5032:	66 e0       	ldi	r22, 0x06	; 6
    5034:	82 e9       	ldi	r24, 0x92	; 146
    5036:	9b e3       	ldi	r25, 0x3B	; 59
    5038:	b3 cf       	rjmp	.-154    	; 0x4fa0 <Titanium()+0xa8>
    503a:	44 e1       	ldi	r20, 0x14	; 20
    503c:	63 e0       	ldi	r22, 0x03	; 3
    503e:	ae cf       	rjmp	.-164    	; 0x4f9c <Titanium()+0xa4>
    5040:	69 e1       	ldi	r22, 0x19	; 25
    5042:	82 e9       	ldi	r24, 0x92	; 146
    5044:	9b e3       	ldi	r25, 0x3B	; 59
    5046:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    504a:	94 cf       	rjmp	.-216    	; 0x4f74 <Titanium()+0x7c>
    504c:	4b ed       	ldi	r20, 0xDB	; 219
    504e:	51 e0       	ldi	r21, 0x01	; 1
    5050:	6e e1       	ldi	r22, 0x1E	; 30
    5052:	89 e7       	ldi	r24, 0x79	; 121
    5054:	9b e3       	ldi	r25, 0x3B	; 59
    5056:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    505a:	8c cf       	rjmp	.-232    	; 0x4f74 <Titanium()+0x7c>
    505c:	43 e2       	ldi	r20, 0x23	; 35
    505e:	64 e0       	ldi	r22, 0x04	; 4
    5060:	82 e9       	ldi	r24, 0x92	; 146
    5062:	9b e3       	ldi	r25, 0x3B	; 59
    5064:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5068:	85 cf       	rjmp	.-246    	; 0x4f74 <Titanium()+0x7c>
    506a:	4d e2       	ldi	r20, 0x2D	; 45
    506c:	63 e0       	ldi	r22, 0x03	; 3
    506e:	e2 cf       	rjmp	.-60     	; 0x5034 <Titanium()+0x13c>
    5070:	4b ed       	ldi	r20, 0xDB	; 219
    5072:	51 e0       	ldi	r21, 0x01	; 1
    5074:	67 e3       	ldi	r22, 0x37	; 55
    5076:	82 e9       	ldi	r24, 0x92	; 146
    5078:	9b e3       	ldi	r25, 0x3B	; 59
    507a:	ed cf       	rjmp	.-38     	; 0x5056 <Titanium()+0x15e>
    507c:	4c e3       	ldi	r20, 0x3C	; 60
    507e:	68 e0       	ldi	r22, 0x08	; 8
    5080:	8e e9       	ldi	r24, 0x9E	; 158
    5082:	99 e3       	ldi	r25, 0x39	; 57
    5084:	ef cf       	rjmp	.-34     	; 0x5064 <Titanium()+0x16c>
    5086:	90 ed       	ldi	r25, 0xD0	; 208
    5088:	e9 2e       	mov	r14, r25
    508a:	97 e0       	ldi	r25, 0x07	; 7
    508c:	f9 2e       	mov	r15, r25
    508e:	04 e6       	ldi	r16, 0x64	; 100
    5090:	21 e0       	ldi	r18, 0x01	; 1
    5092:	4b e4       	ldi	r20, 0x4B	; 75
    5094:	61 e0       	ldi	r22, 0x01	; 1
    5096:	8b e0       	ldi	r24, 0x0B	; 11
    5098:	97 e7       	ldi	r25, 0x77	; 119
    509a:	0e 94 bd 0a 	call	0x157a	; 0x157a <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    509e:	6a cf       	rjmp	.-300    	; 0x4f74 <Titanium()+0x7c>
    50a0:	65 e5       	ldi	r22, 0x55	; 85
    50a2:	89 ec       	ldi	r24, 0xC9	; 201
    50a4:	9d e1       	ldi	r25, 0x1D	; 29
    50a6:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <progMatrixHorizontal(unsigned int, unsigned char)>
    50aa:	64 cf       	rjmp	.-312    	; 0x4f74 <Titanium()+0x7c>
    50ac:	64 e6       	ldi	r22, 0x64	; 100
    50ae:	80 e1       	ldi	r24, 0x10	; 16
    50b0:	97 e2       	ldi	r25, 0x27	; 39
    50b2:	8f cf       	rjmp	.-226    	; 0x4fd2 <Titanium()+0xda>

000050b4 <SomeoneYouLoved()>:
    50b4:	ef 92       	push	r14
    50b6:	ff 92       	push	r15
    50b8:	0f 93       	push	r16
    50ba:	1f 93       	push	r17
    50bc:	cf 93       	push	r28
    50be:	df 93       	push	r29
    50c0:	00 d0       	rcall	.+0      	; 0x50c2 <SomeoneYouLoved()+0xe>
    50c2:	00 d0       	rcall	.+0      	; 0x50c4 <SomeoneYouLoved()+0x10>
    50c4:	00 d0       	rcall	.+0      	; 0x50c6 <SomeoneYouLoved()+0x12>
    50c6:	1f 92       	push	r1
    50c8:	cd b7       	in	r28, 0x3d	; 61
    50ca:	de b7       	in	r29, 0x3e	; 62
    50cc:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    50d0:	8e 31       	cpi	r24, 0x1E	; 30
    50d2:	09 f4       	brne	.+2      	; 0x50d6 <SomeoneYouLoved()+0x22>
    50d4:	b0 c0       	rjmp	.+352    	; 0x5236 <SomeoneYouLoved()+0x182>
    50d6:	a0 f5       	brcc	.+104    	; 0x5140 <SomeoneYouLoved()+0x8c>
    50d8:	85 30       	cpi	r24, 0x05	; 5
    50da:	09 f4       	brne	.+2      	; 0x50de <SomeoneYouLoved()+0x2a>
    50dc:	93 c0       	rjmp	.+294    	; 0x5204 <SomeoneYouLoved()+0x150>
    50de:	b8 f4       	brcc	.+46     	; 0x510e <SomeoneYouLoved()+0x5a>
    50e0:	81 30       	cpi	r24, 0x01	; 1
    50e2:	09 f4       	brne	.+2      	; 0x50e6 <SomeoneYouLoved()+0x32>
    50e4:	88 c0       	rjmp	.+272    	; 0x51f6 <SomeoneYouLoved()+0x142>
    50e6:	08 f4       	brcc	.+2      	; 0x50ea <SomeoneYouLoved()+0x36>
    50e8:	6e c0       	rjmp	.+220    	; 0x51c6 <SomeoneYouLoved()+0x112>
    50ea:	45 e0       	ldi	r20, 0x05	; 5
    50ec:	64 e0       	ldi	r22, 0x04	; 4
    50ee:	82 30       	cpi	r24, 0x02	; 2
    50f0:	09 f4       	brne	.+2      	; 0x50f4 <SomeoneYouLoved()+0x40>
    50f2:	83 c0       	rjmp	.+262    	; 0x51fa <SomeoneYouLoved()+0x146>
    50f4:	27 96       	adiw	r28, 0x07	; 7
    50f6:	0f b6       	in	r0, 0x3f	; 63
    50f8:	f8 94       	cli
    50fa:	de bf       	out	0x3e, r29	; 62
    50fc:	0f be       	out	0x3f, r0	; 63
    50fe:	cd bf       	out	0x3d, r28	; 61
    5100:	df 91       	pop	r29
    5102:	cf 91       	pop	r28
    5104:	1f 91       	pop	r17
    5106:	0f 91       	pop	r16
    5108:	ff 90       	pop	r15
    510a:	ef 90       	pop	r14
    510c:	08 95       	ret
    510e:	8f 30       	cpi	r24, 0x0F	; 15
    5110:	09 f4       	brne	.+2      	; 0x5114 <SomeoneYouLoved()+0x60>
    5112:	7c c0       	rjmp	.+248    	; 0x520c <SomeoneYouLoved()+0x158>
    5114:	40 f4       	brcc	.+16     	; 0x5126 <SomeoneYouLoved()+0x72>
    5116:	8a 30       	cpi	r24, 0x0A	; 10
    5118:	69 f7       	brne	.-38     	; 0x50f4 <SomeoneYouLoved()+0x40>
    511a:	6f e0       	ldi	r22, 0x0F	; 15
    511c:	86 e0       	ldi	r24, 0x06	; 6
    511e:	9f e3       	ldi	r25, 0x3F	; 63
    5120:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    5124:	e7 cf       	rjmp	.-50     	; 0x50f4 <SomeoneYouLoved()+0x40>
    5126:	84 31       	cpi	r24, 0x14	; 20
    5128:	09 f4       	brne	.+2      	; 0x512c <SomeoneYouLoved()+0x78>
    512a:	74 c0       	rjmp	.+232    	; 0x5214 <SomeoneYouLoved()+0x160>
    512c:	44 ef       	ldi	r20, 0xF4	; 244
    512e:	51 e0       	ldi	r21, 0x01	; 1
    5130:	6e e1       	ldi	r22, 0x1E	; 30
    5132:	89 31       	cpi	r24, 0x19	; 25
    5134:	f9 f6       	brne	.-66     	; 0x50f4 <SomeoneYouLoved()+0x40>
    5136:	86 e0       	ldi	r24, 0x06	; 6
    5138:	9f e3       	ldi	r25, 0x3F	; 63
    513a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    513e:	da cf       	rjmp	.-76     	; 0x50f4 <SomeoneYouLoved()+0x40>
    5140:	87 33       	cpi	r24, 0x37	; 55
    5142:	09 f4       	brne	.+2      	; 0x5146 <SomeoneYouLoved()+0x92>
    5144:	90 c0       	rjmp	.+288    	; 0x5266 <SomeoneYouLoved()+0x1b2>
    5146:	d0 f4       	brcc	.+52     	; 0x517c <SomeoneYouLoved()+0xc8>
    5148:	88 32       	cpi	r24, 0x28	; 40
    514a:	09 f4       	brne	.+2      	; 0x514e <SomeoneYouLoved()+0x9a>
    514c:	79 c0       	rjmp	.+242    	; 0x5240 <SomeoneYouLoved()+0x18c>
    514e:	50 f4       	brcc	.+20     	; 0x5164 <SomeoneYouLoved()+0xb0>
    5150:	44 ef       	ldi	r20, 0xF4	; 244
    5152:	51 e0       	ldi	r21, 0x01	; 1
    5154:	68 e2       	ldi	r22, 0x28	; 40
    5156:	83 32       	cpi	r24, 0x23	; 35
    5158:	69 f6       	brne	.-102    	; 0x50f4 <SomeoneYouLoved()+0x40>
    515a:	86 e0       	ldi	r24, 0x06	; 6
    515c:	9f e3       	ldi	r25, 0x3F	; 63
    515e:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5162:	c8 cf       	rjmp	.-112    	; 0x50f4 <SomeoneYouLoved()+0x40>
    5164:	8d 32       	cpi	r24, 0x2D	; 45
    5166:	09 f4       	brne	.+2      	; 0x516a <SomeoneYouLoved()+0xb6>
    5168:	78 c0       	rjmp	.+240    	; 0x525a <SomeoneYouLoved()+0x1a6>
    516a:	82 33       	cpi	r24, 0x32	; 50
    516c:	19 f6       	brne	.-122    	; 0x50f4 <SomeoneYouLoved()+0x40>
    516e:	47 e3       	ldi	r20, 0x37	; 55
    5170:	67 e0       	ldi	r22, 0x07	; 7
    5172:	8d ef       	ldi	r24, 0xFD	; 253
    5174:	9e e3       	ldi	r25, 0x3E	; 62
    5176:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    517a:	bc cf       	rjmp	.-136    	; 0x50f4 <SomeoneYouLoved()+0x40>
    517c:	81 34       	cpi	r24, 0x41	; 65
    517e:	09 f4       	brne	.+2      	; 0x5182 <SomeoneYouLoved()+0xce>
    5180:	76 c0       	rjmp	.+236    	; 0x526e <SomeoneYouLoved()+0x1ba>
    5182:	90 f4       	brcc	.+36     	; 0x51a8 <SomeoneYouLoved()+0xf4>
    5184:	8c 33       	cpi	r24, 0x3C	; 60
    5186:	09 f0       	breq	.+2      	; 0x518a <SomeoneYouLoved()+0xd6>
    5188:	b5 cf       	rjmp	.-150    	; 0x50f4 <SomeoneYouLoved()+0x40>
    518a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    518e:	7c 01       	movw	r14, r24
    5190:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5194:	8c 01       	movw	r16, r24
    5196:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    519a:	9c 01       	movw	r18, r24
    519c:	4b e4       	ldi	r20, 0x4B	; 75
    519e:	50 e0       	ldi	r21, 0x00	; 0
    51a0:	61 e4       	ldi	r22, 0x41	; 65
    51a2:	84 e4       	ldi	r24, 0x44	; 68
    51a4:	9f e2       	ldi	r25, 0x2F	; 47
    51a6:	44 c0       	rjmp	.+136    	; 0x5230 <SomeoneYouLoved()+0x17c>
    51a8:	86 34       	cpi	r24, 0x46	; 70
    51aa:	09 f4       	brne	.+2      	; 0x51ae <SomeoneYouLoved()+0xfa>
    51ac:	65 c0       	rjmp	.+202    	; 0x5278 <SomeoneYouLoved()+0x1c4>
    51ae:	84 36       	cpi	r24, 0x64	; 100
    51b0:	09 f0       	breq	.+2      	; 0x51b4 <SomeoneYouLoved()+0x100>
    51b2:	a0 cf       	rjmp	.-192    	; 0x50f4 <SomeoneYouLoved()+0x40>
    51b4:	60 e0       	ldi	r22, 0x00	; 0
    51b6:	8a ed       	ldi	r24, 0xDA	; 218
    51b8:	90 e1       	ldi	r25, 0x10	; 16
    51ba:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    51be:	80 e0       	ldi	r24, 0x00	; 0
    51c0:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    51c4:	97 cf       	rjmp	.-210    	; 0x50f4 <SomeoneYouLoved()+0x40>
    51c6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    51ca:	7c 01       	movw	r14, r24
    51cc:	62 e6       	ldi	r22, 0x62	; 98
    51ce:	72 e0       	ldi	r23, 0x02	; 2
    51d0:	ce 01       	movw	r24, r28
    51d2:	01 96       	adiw	r24, 0x01	; 1
    51d4:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    51d8:	01 e0       	ldi	r16, 0x01	; 1
    51da:	97 01       	movw	r18, r14
    51dc:	4b e4       	ldi	r20, 0x4B	; 75
    51de:	50 e0       	ldi	r21, 0x00	; 0
    51e0:	6e e0       	ldi	r22, 0x0E	; 14
    51e2:	7d e3       	ldi	r23, 0x3D	; 61
    51e4:	ce 01       	movw	r24, r28
    51e6:	01 96       	adiw	r24, 0x01	; 1
    51e8:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    51ec:	ce 01       	movw	r24, r28
    51ee:	01 96       	adiw	r24, 0x01	; 1
    51f0:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    51f4:	7f cf       	rjmp	.-258    	; 0x50f4 <SomeoneYouLoved()+0x40>
    51f6:	42 e0       	ldi	r20, 0x02	; 2
    51f8:	63 e0       	ldi	r22, 0x03	; 3
    51fa:	83 e8       	ldi	r24, 0x83	; 131
    51fc:	9f e1       	ldi	r25, 0x1F	; 31
    51fe:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    5202:	78 cf       	rjmp	.-272    	; 0x50f4 <SomeoneYouLoved()+0x40>
    5204:	44 ef       	ldi	r20, 0xF4	; 244
    5206:	51 e0       	ldi	r21, 0x01	; 1
    5208:	6a e0       	ldi	r22, 0x0A	; 10
    520a:	95 cf       	rjmp	.-214    	; 0x5136 <SomeoneYouLoved()+0x82>
    520c:	44 ef       	ldi	r20, 0xF4	; 244
    520e:	51 e0       	ldi	r21, 0x01	; 1
    5210:	64 e1       	ldi	r22, 0x14	; 20
    5212:	a3 cf       	rjmp	.-186    	; 0x515a <SomeoneYouLoved()+0xa6>
    5214:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5218:	7c 01       	movw	r14, r24
    521a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    521e:	8c 01       	movw	r16, r24
    5220:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5224:	9c 01       	movw	r18, r24
    5226:	4b e4       	ldi	r20, 0x4B	; 75
    5228:	50 e0       	ldi	r21, 0x00	; 0
    522a:	69 e1       	ldi	r22, 0x19	; 25
    522c:	86 e0       	ldi	r24, 0x06	; 6
    522e:	9f e3       	ldi	r25, 0x3F	; 63
    5230:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    5234:	5f cf       	rjmp	.-322    	; 0x50f4 <SomeoneYouLoved()+0x40>
    5236:	43 e2       	ldi	r20, 0x23	; 35
    5238:	64 e0       	ldi	r22, 0x04	; 4
    523a:	86 e0       	ldi	r24, 0x06	; 6
    523c:	9f e3       	ldi	r25, 0x3F	; 63
    523e:	df cf       	rjmp	.-66     	; 0x51fe <SomeoneYouLoved()+0x14a>
    5240:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5244:	7c 01       	movw	r14, r24
    5246:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    524a:	8c 01       	movw	r16, r24
    524c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5250:	9c 01       	movw	r18, r24
    5252:	4b e4       	ldi	r20, 0x4B	; 75
    5254:	50 e0       	ldi	r21, 0x00	; 0
    5256:	6d e2       	ldi	r22, 0x2D	; 45
    5258:	e9 cf       	rjmp	.-46     	; 0x522c <SomeoneYouLoved()+0x178>
    525a:	62 e3       	ldi	r22, 0x32	; 50
    525c:	82 e7       	ldi	r24, 0x72	; 114
    525e:	9f e1       	ldi	r25, 0x1F	; 31
    5260:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    5264:	47 cf       	rjmp	.-370    	; 0x50f4 <SomeoneYouLoved()+0x40>
    5266:	44 ef       	ldi	r20, 0xF4	; 244
    5268:	51 e0       	ldi	r21, 0x01	; 1
    526a:	6c e3       	ldi	r22, 0x3C	; 60
    526c:	76 cf       	rjmp	.-276    	; 0x515a <SomeoneYouLoved()+0xa6>
    526e:	46 e4       	ldi	r20, 0x46	; 70
    5270:	6c e0       	ldi	r22, 0x0C	; 12
    5272:	89 eb       	ldi	r24, 0xB9	; 185
    5274:	9f e0       	ldi	r25, 0x0F	; 15
    5276:	7f cf       	rjmp	.-258    	; 0x5176 <SomeoneYouLoved()+0xc2>
    5278:	64 e6       	ldi	r22, 0x64	; 100
    527a:	80 e1       	ldi	r24, 0x10	; 16
    527c:	97 e2       	ldi	r25, 0x27	; 39
    527e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    5282:	38 cf       	rjmp	.-400    	; 0x50f4 <SomeoneYouLoved()+0x40>

00005284 <ShouldntStop()>:
    5284:	ef 92       	push	r14
    5286:	ff 92       	push	r15
    5288:	0f 93       	push	r16
    528a:	1f 93       	push	r17
    528c:	cf 93       	push	r28
    528e:	df 93       	push	r29
    5290:	00 d0       	rcall	.+0      	; 0x5292 <ShouldntStop()+0xe>
    5292:	00 d0       	rcall	.+0      	; 0x5294 <ShouldntStop()+0x10>
    5294:	00 d0       	rcall	.+0      	; 0x5296 <ShouldntStop()+0x12>
    5296:	1f 92       	push	r1
    5298:	cd b7       	in	r28, 0x3d	; 61
    529a:	de b7       	in	r29, 0x3e	; 62
    529c:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    52a0:	8e 31       	cpi	r24, 0x1E	; 30
    52a2:	09 f4       	brne	.+2      	; 0x52a6 <ShouldntStop()+0x22>
    52a4:	b0 c0       	rjmp	.+352    	; 0x5406 <ShouldntStop()+0x182>
    52a6:	a0 f5       	brcc	.+104    	; 0x5310 <ShouldntStop()+0x8c>
    52a8:	85 30       	cpi	r24, 0x05	; 5
    52aa:	09 f4       	brne	.+2      	; 0x52ae <ShouldntStop()+0x2a>
    52ac:	93 c0       	rjmp	.+294    	; 0x53d4 <ShouldntStop()+0x150>
    52ae:	b8 f4       	brcc	.+46     	; 0x52de <ShouldntStop()+0x5a>
    52b0:	81 30       	cpi	r24, 0x01	; 1
    52b2:	09 f4       	brne	.+2      	; 0x52b6 <ShouldntStop()+0x32>
    52b4:	88 c0       	rjmp	.+272    	; 0x53c6 <ShouldntStop()+0x142>
    52b6:	08 f4       	brcc	.+2      	; 0x52ba <ShouldntStop()+0x36>
    52b8:	6e c0       	rjmp	.+220    	; 0x5396 <ShouldntStop()+0x112>
    52ba:	45 e0       	ldi	r20, 0x05	; 5
    52bc:	64 e0       	ldi	r22, 0x04	; 4
    52be:	82 30       	cpi	r24, 0x02	; 2
    52c0:	09 f4       	brne	.+2      	; 0x52c4 <ShouldntStop()+0x40>
    52c2:	83 c0       	rjmp	.+262    	; 0x53ca <ShouldntStop()+0x146>
    52c4:	27 96       	adiw	r28, 0x07	; 7
    52c6:	0f b6       	in	r0, 0x3f	; 63
    52c8:	f8 94       	cli
    52ca:	de bf       	out	0x3e, r29	; 62
    52cc:	0f be       	out	0x3f, r0	; 63
    52ce:	cd bf       	out	0x3d, r28	; 61
    52d0:	df 91       	pop	r29
    52d2:	cf 91       	pop	r28
    52d4:	1f 91       	pop	r17
    52d6:	0f 91       	pop	r16
    52d8:	ff 90       	pop	r15
    52da:	ef 90       	pop	r14
    52dc:	08 95       	ret
    52de:	8f 30       	cpi	r24, 0x0F	; 15
    52e0:	09 f4       	brne	.+2      	; 0x52e4 <ShouldntStop()+0x60>
    52e2:	7c c0       	rjmp	.+248    	; 0x53dc <ShouldntStop()+0x158>
    52e4:	40 f4       	brcc	.+16     	; 0x52f6 <ShouldntStop()+0x72>
    52e6:	8a 30       	cpi	r24, 0x0A	; 10
    52e8:	69 f7       	brne	.-38     	; 0x52c4 <ShouldntStop()+0x40>
    52ea:	6f e0       	ldi	r22, 0x0F	; 15
    52ec:	86 e0       	ldi	r24, 0x06	; 6
    52ee:	9f e3       	ldi	r25, 0x3F	; 63
    52f0:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    52f4:	e7 cf       	rjmp	.-50     	; 0x52c4 <ShouldntStop()+0x40>
    52f6:	84 31       	cpi	r24, 0x14	; 20
    52f8:	09 f4       	brne	.+2      	; 0x52fc <ShouldntStop()+0x78>
    52fa:	74 c0       	rjmp	.+232    	; 0x53e4 <ShouldntStop()+0x160>
    52fc:	44 ef       	ldi	r20, 0xF4	; 244
    52fe:	51 e0       	ldi	r21, 0x01	; 1
    5300:	6e e1       	ldi	r22, 0x1E	; 30
    5302:	89 31       	cpi	r24, 0x19	; 25
    5304:	f9 f6       	brne	.-66     	; 0x52c4 <ShouldntStop()+0x40>
    5306:	86 e0       	ldi	r24, 0x06	; 6
    5308:	9f e3       	ldi	r25, 0x3F	; 63
    530a:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    530e:	da cf       	rjmp	.-76     	; 0x52c4 <ShouldntStop()+0x40>
    5310:	87 33       	cpi	r24, 0x37	; 55
    5312:	09 f4       	brne	.+2      	; 0x5316 <ShouldntStop()+0x92>
    5314:	90 c0       	rjmp	.+288    	; 0x5436 <ShouldntStop()+0x1b2>
    5316:	d0 f4       	brcc	.+52     	; 0x534c <ShouldntStop()+0xc8>
    5318:	88 32       	cpi	r24, 0x28	; 40
    531a:	09 f4       	brne	.+2      	; 0x531e <ShouldntStop()+0x9a>
    531c:	79 c0       	rjmp	.+242    	; 0x5410 <ShouldntStop()+0x18c>
    531e:	50 f4       	brcc	.+20     	; 0x5334 <ShouldntStop()+0xb0>
    5320:	44 ef       	ldi	r20, 0xF4	; 244
    5322:	51 e0       	ldi	r21, 0x01	; 1
    5324:	68 e2       	ldi	r22, 0x28	; 40
    5326:	83 32       	cpi	r24, 0x23	; 35
    5328:	69 f6       	brne	.-102    	; 0x52c4 <ShouldntStop()+0x40>
    532a:	86 e0       	ldi	r24, 0x06	; 6
    532c:	9f e3       	ldi	r25, 0x3F	; 63
    532e:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5332:	c8 cf       	rjmp	.-112    	; 0x52c4 <ShouldntStop()+0x40>
    5334:	8d 32       	cpi	r24, 0x2D	; 45
    5336:	09 f4       	brne	.+2      	; 0x533a <ShouldntStop()+0xb6>
    5338:	78 c0       	rjmp	.+240    	; 0x542a <ShouldntStop()+0x1a6>
    533a:	82 33       	cpi	r24, 0x32	; 50
    533c:	19 f6       	brne	.-122    	; 0x52c4 <ShouldntStop()+0x40>
    533e:	47 e3       	ldi	r20, 0x37	; 55
    5340:	67 e0       	ldi	r22, 0x07	; 7
    5342:	8d ef       	ldi	r24, 0xFD	; 253
    5344:	9e e3       	ldi	r25, 0x3E	; 62
    5346:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    534a:	bc cf       	rjmp	.-136    	; 0x52c4 <ShouldntStop()+0x40>
    534c:	81 34       	cpi	r24, 0x41	; 65
    534e:	09 f4       	brne	.+2      	; 0x5352 <ShouldntStop()+0xce>
    5350:	76 c0       	rjmp	.+236    	; 0x543e <ShouldntStop()+0x1ba>
    5352:	90 f4       	brcc	.+36     	; 0x5378 <ShouldntStop()+0xf4>
    5354:	8c 33       	cpi	r24, 0x3C	; 60
    5356:	09 f0       	breq	.+2      	; 0x535a <ShouldntStop()+0xd6>
    5358:	b5 cf       	rjmp	.-150    	; 0x52c4 <ShouldntStop()+0x40>
    535a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    535e:	7c 01       	movw	r14, r24
    5360:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5364:	8c 01       	movw	r16, r24
    5366:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    536a:	9c 01       	movw	r18, r24
    536c:	4b e4       	ldi	r20, 0x4B	; 75
    536e:	50 e0       	ldi	r21, 0x00	; 0
    5370:	61 e4       	ldi	r22, 0x41	; 65
    5372:	84 e4       	ldi	r24, 0x44	; 68
    5374:	9f e2       	ldi	r25, 0x2F	; 47
    5376:	44 c0       	rjmp	.+136    	; 0x5400 <ShouldntStop()+0x17c>
    5378:	86 34       	cpi	r24, 0x46	; 70
    537a:	09 f4       	brne	.+2      	; 0x537e <ShouldntStop()+0xfa>
    537c:	65 c0       	rjmp	.+202    	; 0x5448 <ShouldntStop()+0x1c4>
    537e:	84 36       	cpi	r24, 0x64	; 100
    5380:	09 f0       	breq	.+2      	; 0x5384 <ShouldntStop()+0x100>
    5382:	a0 cf       	rjmp	.-192    	; 0x52c4 <ShouldntStop()+0x40>
    5384:	60 e0       	ldi	r22, 0x00	; 0
    5386:	8a ed       	ldi	r24, 0xDA	; 218
    5388:	90 e1       	ldi	r25, 0x10	; 16
    538a:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    538e:	80 e0       	ldi	r24, 0x00	; 0
    5390:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    5394:	97 cf       	rjmp	.-210    	; 0x52c4 <ShouldntStop()+0x40>
    5396:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    539a:	7c 01       	movw	r14, r24
    539c:	65 e8       	ldi	r22, 0x85	; 133
    539e:	72 e0       	ldi	r23, 0x02	; 2
    53a0:	ce 01       	movw	r24, r28
    53a2:	01 96       	adiw	r24, 0x01	; 1
    53a4:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    53a8:	01 e0       	ldi	r16, 0x01	; 1
    53aa:	97 01       	movw	r18, r14
    53ac:	4b e4       	ldi	r20, 0x4B	; 75
    53ae:	50 e0       	ldi	r21, 0x00	; 0
    53b0:	6e e0       	ldi	r22, 0x0E	; 14
    53b2:	7d e3       	ldi	r23, 0x3D	; 61
    53b4:	ce 01       	movw	r24, r28
    53b6:	01 96       	adiw	r24, 0x01	; 1
    53b8:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    53bc:	ce 01       	movw	r24, r28
    53be:	01 96       	adiw	r24, 0x01	; 1
    53c0:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    53c4:	7f cf       	rjmp	.-258    	; 0x52c4 <ShouldntStop()+0x40>
    53c6:	42 e0       	ldi	r20, 0x02	; 2
    53c8:	63 e0       	ldi	r22, 0x03	; 3
    53ca:	83 e8       	ldi	r24, 0x83	; 131
    53cc:	9f e1       	ldi	r25, 0x1F	; 31
    53ce:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    53d2:	78 cf       	rjmp	.-272    	; 0x52c4 <ShouldntStop()+0x40>
    53d4:	44 ef       	ldi	r20, 0xF4	; 244
    53d6:	51 e0       	ldi	r21, 0x01	; 1
    53d8:	6a e0       	ldi	r22, 0x0A	; 10
    53da:	95 cf       	rjmp	.-214    	; 0x5306 <ShouldntStop()+0x82>
    53dc:	44 ef       	ldi	r20, 0xF4	; 244
    53de:	51 e0       	ldi	r21, 0x01	; 1
    53e0:	64 e1       	ldi	r22, 0x14	; 20
    53e2:	a3 cf       	rjmp	.-186    	; 0x532a <ShouldntStop()+0xa6>
    53e4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    53e8:	7c 01       	movw	r14, r24
    53ea:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    53ee:	8c 01       	movw	r16, r24
    53f0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    53f4:	9c 01       	movw	r18, r24
    53f6:	4b e4       	ldi	r20, 0x4B	; 75
    53f8:	50 e0       	ldi	r21, 0x00	; 0
    53fa:	69 e1       	ldi	r22, 0x19	; 25
    53fc:	86 e0       	ldi	r24, 0x06	; 6
    53fe:	9f e3       	ldi	r25, 0x3F	; 63
    5400:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    5404:	5f cf       	rjmp	.-322    	; 0x52c4 <ShouldntStop()+0x40>
    5406:	43 e2       	ldi	r20, 0x23	; 35
    5408:	64 e0       	ldi	r22, 0x04	; 4
    540a:	86 e0       	ldi	r24, 0x06	; 6
    540c:	9f e3       	ldi	r25, 0x3F	; 63
    540e:	df cf       	rjmp	.-66     	; 0x53ce <ShouldntStop()+0x14a>
    5410:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5414:	7c 01       	movw	r14, r24
    5416:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    541a:	8c 01       	movw	r16, r24
    541c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5420:	9c 01       	movw	r18, r24
    5422:	4b e4       	ldi	r20, 0x4B	; 75
    5424:	50 e0       	ldi	r21, 0x00	; 0
    5426:	6d e2       	ldi	r22, 0x2D	; 45
    5428:	e9 cf       	rjmp	.-46     	; 0x53fc <ShouldntStop()+0x178>
    542a:	62 e3       	ldi	r22, 0x32	; 50
    542c:	82 e7       	ldi	r24, 0x72	; 114
    542e:	9f e1       	ldi	r25, 0x1F	; 31
    5430:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    5434:	47 cf       	rjmp	.-370    	; 0x52c4 <ShouldntStop()+0x40>
    5436:	44 ef       	ldi	r20, 0xF4	; 244
    5438:	51 e0       	ldi	r21, 0x01	; 1
    543a:	6c e3       	ldi	r22, 0x3C	; 60
    543c:	76 cf       	rjmp	.-276    	; 0x532a <ShouldntStop()+0xa6>
    543e:	46 e4       	ldi	r20, 0x46	; 70
    5440:	6c e0       	ldi	r22, 0x0C	; 12
    5442:	89 eb       	ldi	r24, 0xB9	; 185
    5444:	9f e0       	ldi	r25, 0x0F	; 15
    5446:	7f cf       	rjmp	.-258    	; 0x5346 <ShouldntStop()+0xc2>
    5448:	64 e6       	ldi	r22, 0x64	; 100
    544a:	80 e1       	ldi	r24, 0x10	; 16
    544c:	97 e2       	ldi	r25, 0x27	; 39
    544e:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    5452:	38 cf       	rjmp	.-400    	; 0x52c4 <ShouldntStop()+0x40>

00005454 <SunAlwaysShinesOnTV()>:
    5454:	ef 92       	push	r14
    5456:	ff 92       	push	r15
    5458:	0f 93       	push	r16
    545a:	1f 93       	push	r17
    545c:	cf 93       	push	r28
    545e:	df 93       	push	r29
    5460:	00 d0       	rcall	.+0      	; 0x5462 <SunAlwaysShinesOnTV()+0xe>
    5462:	00 d0       	rcall	.+0      	; 0x5464 <SunAlwaysShinesOnTV()+0x10>
    5464:	00 d0       	rcall	.+0      	; 0x5466 <SunAlwaysShinesOnTV()+0x12>
    5466:	1f 92       	push	r1
    5468:	cd b7       	in	r28, 0x3d	; 61
    546a:	de b7       	in	r29, 0x3e	; 62
    546c:	e0 91 c5 0a 	lds	r30, 0x0AC5	; 0x800ac5 <prog>
    5470:	e5 36       	cpi	r30, 0x65	; 101
    5472:	08 f0       	brcs	.+2      	; 0x5476 <SunAlwaysShinesOnTV()+0x22>
    5474:	81 c0       	rjmp	.+258    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    5476:	f0 e0       	ldi	r31, 0x00	; 0
    5478:	e0 5c       	subi	r30, 0xC0	; 192
    547a:	f5 4d       	sbci	r31, 0xD5	; 213
    547c:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    5480:	a5 2a       	or	r10, r21
    5482:	bc 2a       	or	r11, r28
    5484:	c9 2a       	or	r12, r25
    5486:	bc 2a       	or	r11, r28
    5488:	cf 2a       	or	r12, r31
    548a:	bc 2a       	or	r11, r28
    548c:	e5 2a       	or	r14, r21
    548e:	bc 2a       	or	r11, r28
    5490:	f5 2a       	or	r15, r21
    5492:	bc 2a       	or	r11, r28
    5494:	fe 2a       	or	r15, r30
    5496:	bc 2a       	or	r11, r28
    5498:	10 2b       	or	r17, r16
    549a:	bc 2a       	or	r11, r28
    549c:	22 2b       	or	r18, r18
    549e:	bc 2a       	or	r11, r28
    54a0:	27 2b       	or	r18, r23
    54a2:	bc 2a       	or	r11, r28
    54a4:	34 2b       	or	r19, r20
    54a6:	bc 2a       	or	r11, r28
    54a8:	3c 2b       	or	r19, r28
    54aa:	bc 2a       	or	r11, r28
    54ac:	45 2b       	or	r20, r21
    54ae:	bc 2a       	or	r11, r28
    54b0:	4d 2b       	or	r20, r29
    54b2:	bc 2a       	or	r11, r28
    54b4:	59 2b       	or	r21, r25
    54b6:	bc 2a       	or	r11, r28
    54b8:	65 2b       	or	r22, r21
    54ba:	bc 2a       	or	r11, r28
    54bc:	76 2b       	or	r23, r22
    54be:	bc 2a       	or	r11, r28
    54c0:	7a 2b       	or	r23, r26
    54c2:	bc 2a       	or	r11, r28
    54c4:	82 2b       	or	r24, r18
    54c6:	bc 2a       	or	r11, r28
    54c8:	8f 2b       	or	r24, r31
    54ca:	bc 2a       	or	r11, r28
    54cc:	95 2b       	or	r25, r21
    54ce:	bc 2a       	or	r11, r28
    54d0:	9c 2b       	or	r25, r28
    54d2:	bc 2a       	or	r11, r28
    54d4:	a0 2b       	or	r26, r16
    54d6:	bc 2a       	or	r11, r28
    54d8:	ac 2b       	or	r26, r28
    54da:	bc 2a       	or	r11, r28
    54dc:	b8 2b       	or	r27, r24
    54de:	bc 2a       	or	r11, r28
    54e0:	c7 2b       	or	r28, r23
    54e2:	bc 2a       	or	r11, r28
    54e4:	cb 2b       	or	r28, r27
    54e6:	bc 2a       	or	r11, r28
    54e8:	cd 2b       	or	r28, r29
    54ea:	bc 2a       	or	r11, r28
    54ec:	d8 2b       	or	r29, r24
    54ee:	bc 2a       	or	r11, r28
    54f0:	dc 2b       	or	r29, r28
    54f2:	bc 2a       	or	r11, r28
    54f4:	e2 2b       	or	r30, r18
    54f6:	bc 2a       	or	r11, r28
    54f8:	ed 2b       	or	r30, r29
    54fa:	bc 2a       	or	r11, r28
    54fc:	fa 2b       	or	r31, r26
    54fe:	bc 2a       	or	r11, r28
    5500:	fe 2b       	or	r31, r30
    5502:	bc 2a       	or	r11, r28
    5504:	04 2c       	mov	r0, r4
    5506:	bc 2a       	or	r11, r28
    5508:	11 2c       	mov	r1, r1
    550a:	bc 2a       	or	r11, r28
    550c:	17 2c       	mov	r1, r7
    550e:	bc 2a       	or	r11, r28
    5510:	22 2c       	mov	r2, r2
    5512:	bc 2a       	or	r11, r28
    5514:	28 2c       	mov	r2, r8
    5516:	bc 2a       	or	r11, r28
    5518:	33 2c       	mov	r3, r3
    551a:	bc 2a       	or	r11, r28
    551c:	bc 2a       	or	r11, r28
    551e:	bc 2a       	or	r11, r28
    5520:	bc 2a       	or	r11, r28
    5522:	bc 2a       	or	r11, r28
    5524:	bc 2a       	or	r11, r28
    5526:	bc 2a       	or	r11, r28
    5528:	bc 2a       	or	r11, r28
    552a:	bc 2a       	or	r11, r28
    552c:	bc 2a       	or	r11, r28
    552e:	bc 2a       	or	r11, r28
    5530:	bc 2a       	or	r11, r28
    5532:	bc 2a       	or	r11, r28
    5534:	bc 2a       	or	r11, r28
    5536:	bc 2a       	or	r11, r28
    5538:	bc 2a       	or	r11, r28
    553a:	bc 2a       	or	r11, r28
    553c:	bc 2a       	or	r11, r28
    553e:	bc 2a       	or	r11, r28
    5540:	bc 2a       	or	r11, r28
    5542:	bc 2a       	or	r11, r28
    5544:	bc 2a       	or	r11, r28
    5546:	bc 2a       	or	r11, r28
    5548:	37 2c       	mov	r3, r7
    554a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    554e:	7c 01       	movw	r14, r24
    5550:	6c ea       	ldi	r22, 0xAC	; 172
    5552:	72 e0       	ldi	r23, 0x02	; 2
    5554:	ce 01       	movw	r24, r28
    5556:	01 96       	adiw	r24, 0x01	; 1
    5558:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    555c:	02 e0       	ldi	r16, 0x02	; 2
    555e:	97 01       	movw	r18, r14
    5560:	4b e4       	ldi	r20, 0x4B	; 75
    5562:	50 e0       	ldi	r21, 0x00	; 0
    5564:	64 e0       	ldi	r22, 0x04	; 4
    5566:	72 e4       	ldi	r23, 0x42	; 66
    5568:	ce 01       	movw	r24, r28
    556a:	01 96       	adiw	r24, 0x01	; 1
    556c:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    5570:	ce 01       	movw	r24, r28
    5572:	01 96       	adiw	r24, 0x01	; 1
    5574:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    5578:	27 96       	adiw	r28, 0x07	; 7
    557a:	0f b6       	in	r0, 0x3f	; 63
    557c:	f8 94       	cli
    557e:	de bf       	out	0x3e, r29	; 62
    5580:	0f be       	out	0x3f, r0	; 63
    5582:	cd bf       	out	0x3d, r28	; 61
    5584:	df 91       	pop	r29
    5586:	cf 91       	pop	r28
    5588:	1f 91       	pop	r17
    558a:	0f 91       	pop	r16
    558c:	ff 90       	pop	r15
    558e:	ef 90       	pop	r14
    5590:	08 95       	ret
    5592:	64 e0       	ldi	r22, 0x04	; 4
    5594:	82 e8       	ldi	r24, 0x82	; 130
    5596:	94 e1       	ldi	r25, 0x14	; 20
    5598:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    559c:	ed cf       	rjmp	.-38     	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    559e:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    55a2:	8c 01       	movw	r16, r24
    55a4:	60 ed       	ldi	r22, 0xD0	; 208
    55a6:	72 e0       	ldi	r23, 0x02	; 2
    55a8:	ce 01       	movw	r24, r28
    55aa:	01 96       	adiw	r24, 0x01	; 1
    55ac:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    55b0:	36 e0       	ldi	r19, 0x06	; 6
    55b2:	e3 2e       	mov	r14, r19
    55b4:	2d e0       	ldi	r18, 0x0D	; 13
    55b6:	30 e0       	ldi	r19, 0x00	; 0
    55b8:	50 e0       	ldi	r21, 0x00	; 0
    55ba:	40 e0       	ldi	r20, 0x00	; 0
    55bc:	66 eb       	ldi	r22, 0xB6	; 182
    55be:	73 e0       	ldi	r23, 0x03	; 3
    55c0:	ce 01       	movw	r24, r28
    55c2:	01 96       	adiw	r24, 0x01	; 1
    55c4:	0e 94 c4 12 	call	0x2588	; 0x2588 <progShowText(String, unsigned int, int, int, int, unsigned char)>
    55c8:	d3 cf       	rjmp	.-90     	; 0x5570 <SunAlwaysShinesOnTV()+0x11c>
    55ca:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    55ce:	8c 01       	movw	r16, r24
    55d0:	66 ed       	ldi	r22, 0xD6	; 214
    55d2:	72 e0       	ldi	r23, 0x02	; 2
    55d4:	ce 01       	movw	r24, r28
    55d6:	01 96       	adiw	r24, 0x01	; 1
    55d8:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    55dc:	28 e0       	ldi	r18, 0x08	; 8
    55de:	e2 2e       	mov	r14, r18
    55e0:	2d e0       	ldi	r18, 0x0D	; 13
    55e2:	30 e0       	ldi	r19, 0x00	; 0
    55e4:	46 e0       	ldi	r20, 0x06	; 6
    55e6:	50 e0       	ldi	r21, 0x00	; 0
    55e8:	e9 cf       	rjmp	.-46     	; 0x55bc <SunAlwaysShinesOnTV()+0x168>
    55ea:	21 e0       	ldi	r18, 0x01	; 1
    55ec:	4c e6       	ldi	r20, 0x6C	; 108
    55ee:	57 e0       	ldi	r21, 0x07	; 7
    55f0:	6a e0       	ldi	r22, 0x0A	; 10
    55f2:	8d e0       	ldi	r24, 0x0D	; 13
    55f4:	94 e3       	ldi	r25, 0x34	; 52
    55f6:	0e 94 47 0e 	call	0x1c8e	; 0x1c8e <progCircles(unsigned int, unsigned char, unsigned int, bool)>
    55fa:	be cf       	rjmp	.-132    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    55fc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    5600:	8c 01       	movw	r16, r24
    5602:	69 ed       	ldi	r22, 0xD9	; 217
    5604:	72 e0       	ldi	r23, 0x02	; 2
    5606:	ce 01       	movw	r24, r28
    5608:	01 96       	adiw	r24, 0x01	; 1
    560a:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    560e:	9c e0       	ldi	r25, 0x0C	; 12
    5610:	e9 2e       	mov	r14, r25
    5612:	2d e0       	ldi	r18, 0x0D	; 13
    5614:	30 e0       	ldi	r19, 0x00	; 0
    5616:	50 e0       	ldi	r21, 0x00	; 0
    5618:	40 e0       	ldi	r20, 0x00	; 0
    561a:	6c e6       	ldi	r22, 0x6C	; 108
    561c:	77 e0       	ldi	r23, 0x07	; 7
    561e:	d0 cf       	rjmp	.-96     	; 0x55c0 <SunAlwaysShinesOnTV()+0x16c>
    5620:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    5624:	8c 01       	movw	r16, r24
    5626:	66 ed       	ldi	r22, 0xD6	; 214
    5628:	72 e0       	ldi	r23, 0x02	; 2
    562a:	ce 01       	movw	r24, r28
    562c:	01 96       	adiw	r24, 0x01	; 1
    562e:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    5632:	8e e0       	ldi	r24, 0x0E	; 14
    5634:	e8 2e       	mov	r14, r24
    5636:	2d e0       	ldi	r18, 0x0D	; 13
    5638:	30 e0       	ldi	r19, 0x00	; 0
    563a:	46 e0       	ldi	r20, 0x06	; 6
    563c:	50 e0       	ldi	r21, 0x00	; 0
    563e:	65 e8       	ldi	r22, 0x85	; 133
    5640:	77 e0       	ldi	r23, 0x07	; 7
    5642:	be cf       	rjmp	.-132    	; 0x55c0 <SunAlwaysShinesOnTV()+0x16c>
    5644:	20 e0       	ldi	r18, 0x00	; 0
    5646:	4c e6       	ldi	r20, 0x6C	; 108
    5648:	57 e0       	ldi	r21, 0x07	; 7
    564a:	60 e1       	ldi	r22, 0x10	; 16
    564c:	d2 cf       	rjmp	.-92     	; 0x55f2 <SunAlwaysShinesOnTV()+0x19e>
    564e:	b0 ed       	ldi	r27, 0xD0	; 208
    5650:	eb 2e       	mov	r14, r27
    5652:	b7 e0       	ldi	r27, 0x07	; 7
    5654:	fb 2e       	mov	r15, r27
    5656:	04 e6       	ldi	r16, 0x64	; 100
    5658:	21 e0       	ldi	r18, 0x01	; 1
    565a:	42 e1       	ldi	r20, 0x12	; 18
    565c:	61 e0       	ldi	r22, 0x01	; 1
    565e:	89 e7       	ldi	r24, 0x79	; 121
    5660:	9b e3       	ldi	r25, 0x3B	; 59
    5662:	0e 94 bd 0a 	call	0x157a	; 0x157a <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    5666:	88 cf       	rjmp	.-240    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    5668:	4b ed       	ldi	r20, 0xDB	; 219
    566a:	51 e0       	ldi	r21, 0x01	; 1
    566c:	64 e1       	ldi	r22, 0x14	; 20
    566e:	89 ec       	ldi	r24, 0xC9	; 201
    5670:	9d e1       	ldi	r25, 0x1D	; 29
    5672:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5676:	80 cf       	rjmp	.-256    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    5678:	20 e0       	ldi	r18, 0x00	; 0
    567a:	4b ed       	ldi	r20, 0xDB	; 219
    567c:	51 e0       	ldi	r21, 0x01	; 1
    567e:	66 e1       	ldi	r22, 0x16	; 22
    5680:	82 e9       	ldi	r24, 0x92	; 146
    5682:	9b e3       	ldi	r25, 0x3B	; 59
    5684:	0e 94 d1 0e 	call	0x1da2	; 0x1da2 <progRandomLines(unsigned int, unsigned char, unsigned int, bool)>
    5688:	77 cf       	rjmp	.-274    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    568a:	48 e8       	ldi	r20, 0x88	; 136
    568c:	53 e1       	ldi	r21, 0x13	; 19
    568e:	68 e1       	ldi	r22, 0x18	; 24
    5690:	8b e0       	ldi	r24, 0x0B	; 11
    5692:	97 e7       	ldi	r25, 0x77	; 119
    5694:	0e 94 1a 0a 	call	0x1434	; 0x1434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    5698:	6f cf       	rjmp	.-290    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    569a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    569e:	8c 01       	movw	r16, r24
    56a0:	60 ed       	ldi	r22, 0xD0	; 208
    56a2:	72 e0       	ldi	r23, 0x02	; 2
    56a4:	ce 01       	movw	r24, r28
    56a6:	01 96       	adiw	r24, 0x01	; 1
    56a8:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    56ac:	aa e1       	ldi	r26, 0x1A	; 26
    56ae:	ea 2e       	mov	r14, r26
    56b0:	81 cf       	rjmp	.-254    	; 0x55b4 <SunAlwaysShinesOnTV()+0x160>
    56b2:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    56b6:	8c 01       	movw	r16, r24
    56b8:	66 ed       	ldi	r22, 0xD6	; 214
    56ba:	72 e0       	ldi	r23, 0x02	; 2
    56bc:	ce 01       	movw	r24, r28
    56be:	01 96       	adiw	r24, 0x01	; 1
    56c0:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    56c4:	fc e1       	ldi	r31, 0x1C	; 28
    56c6:	ef 2e       	mov	r14, r31
    56c8:	8b cf       	rjmp	.-234    	; 0x55e0 <SunAlwaysShinesOnTV()+0x18c>
    56ca:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    56ce:	7c 01       	movw	r14, r24
    56d0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    56d4:	8c 01       	movw	r16, r24
    56d6:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    56da:	9c 01       	movw	r18, r24
    56dc:	4a ef       	ldi	r20, 0xFA	; 250
    56de:	50 e0       	ldi	r21, 0x00	; 0
    56e0:	6e e1       	ldi	r22, 0x1E	; 30
    56e2:	82 e8       	ldi	r24, 0x82	; 130
    56e4:	94 e1       	ldi	r25, 0x14	; 20
    56e6:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    56ea:	46 cf       	rjmp	.-372    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    56ec:	60 e2       	ldi	r22, 0x20	; 32
    56ee:	87 e4       	ldi	r24, 0x47	; 71
    56f0:	99 e0       	ldi	r25, 0x09	; 9
    56f2:	52 cf       	rjmp	.-348    	; 0x5598 <SunAlwaysShinesOnTV()+0x144>
    56f4:	42 e2       	ldi	r20, 0x22	; 34
    56f6:	6b ed       	ldi	r22, 0xDB	; 219
    56f8:	71 e0       	ldi	r23, 0x01	; 1
    56fa:	8d e0       	ldi	r24, 0x0D	; 13
    56fc:	94 e3       	ldi	r25, 0x34	; 52
    56fe:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    5702:	3a cf       	rjmp	.-396    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    5704:	ee 24       	eor	r14, r14
    5706:	ea 94       	dec	r14
    5708:	f1 2c       	mov	r15, r1
    570a:	0f ef       	ldi	r16, 0xFF	; 255
    570c:	10 e0       	ldi	r17, 0x00	; 0
    570e:	2f ef       	ldi	r18, 0xFF	; 255
    5710:	30 e0       	ldi	r19, 0x00	; 0
    5712:	4b e4       	ldi	r20, 0x4B	; 75
    5714:	50 e0       	ldi	r21, 0x00	; 0
    5716:	64 e2       	ldi	r22, 0x24	; 36
    5718:	88 ed       	ldi	r24, 0xD8	; 216
    571a:	9e e0       	ldi	r25, 0x0E	; 14
    571c:	e4 cf       	rjmp	.-56     	; 0x56e6 <SunAlwaysShinesOnTV()+0x292>
    571e:	4b ed       	ldi	r20, 0xDB	; 219
    5720:	51 e0       	ldi	r21, 0x01	; 1
    5722:	66 e2       	ldi	r22, 0x26	; 38
    5724:	81 ef       	ldi	r24, 0xF1	; 241
    5726:	9e e0       	ldi	r25, 0x0E	; 14
    5728:	a4 cf       	rjmp	.-184    	; 0x5672 <SunAlwaysShinesOnTV()+0x21e>
    572a:	20 e0       	ldi	r18, 0x00	; 0
    572c:	4b ed       	ldi	r20, 0xDB	; 219
    572e:	51 e0       	ldi	r21, 0x01	; 1
    5730:	68 e2       	ldi	r22, 0x28	; 40
    5732:	89 ec       	ldi	r24, 0xC9	; 201
    5734:	9d e1       	ldi	r25, 0x1D	; 29
    5736:	a6 cf       	rjmp	.-180    	; 0x5684 <SunAlwaysShinesOnTV()+0x230>
    5738:	48 e8       	ldi	r20, 0x88	; 136
    573a:	53 e1       	ldi	r21, 0x13	; 19
    573c:	6a e2       	ldi	r22, 0x2A	; 42
    573e:	a8 cf       	rjmp	.-176    	; 0x5690 <SunAlwaysShinesOnTV()+0x23c>
    5740:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    5744:	8c 01       	movw	r16, r24
    5746:	60 ed       	ldi	r22, 0xD0	; 208
    5748:	72 e0       	ldi	r23, 0x02	; 2
    574a:	ce 01       	movw	r24, r28
    574c:	01 96       	adiw	r24, 0x01	; 1
    574e:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    5752:	7c e2       	ldi	r23, 0x2C	; 44
    5754:	e7 2e       	mov	r14, r23
    5756:	2e cf       	rjmp	.-420    	; 0x55b4 <SunAlwaysShinesOnTV()+0x160>
    5758:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    575c:	8c 01       	movw	r16, r24
    575e:	66 ed       	ldi	r22, 0xD6	; 214
    5760:	72 e0       	ldi	r23, 0x02	; 2
    5762:	ce 01       	movw	r24, r28
    5764:	01 96       	adiw	r24, 0x01	; 1
    5766:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    576a:	6e e2       	ldi	r22, 0x2E	; 46
    576c:	e6 2e       	mov	r14, r22
    576e:	38 cf       	rjmp	.-400    	; 0x55e0 <SunAlwaysShinesOnTV()+0x18c>
    5770:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5774:	7c 01       	movw	r14, r24
    5776:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    577a:	8c 01       	movw	r16, r24
    577c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5780:	9c 01       	movw	r18, r24
    5782:	4a ef       	ldi	r20, 0xFA	; 250
    5784:	50 e0       	ldi	r21, 0x00	; 0
    5786:	60 e3       	ldi	r22, 0x30	; 48
    5788:	89 e6       	ldi	r24, 0x69	; 105
    578a:	94 e1       	ldi	r25, 0x14	; 20
    578c:	ac cf       	rjmp	.-168    	; 0x56e6 <SunAlwaysShinesOnTV()+0x292>
    578e:	62 e3       	ldi	r22, 0x32	; 50
    5790:	80 e6       	ldi	r24, 0x60	; 96
    5792:	99 e0       	ldi	r25, 0x09	; 9
    5794:	01 cf       	rjmp	.-510    	; 0x5598 <SunAlwaysShinesOnTV()+0x144>
    5796:	44 e3       	ldi	r20, 0x34	; 52
    5798:	ae cf       	rjmp	.-164    	; 0x56f6 <SunAlwaysShinesOnTV()+0x2a2>
    579a:	ee 24       	eor	r14, r14
    579c:	ea 94       	dec	r14
    579e:	f1 2c       	mov	r15, r1
    57a0:	0f ef       	ldi	r16, 0xFF	; 255
    57a2:	10 e0       	ldi	r17, 0x00	; 0
    57a4:	2f ef       	ldi	r18, 0xFF	; 255
    57a6:	30 e0       	ldi	r19, 0x00	; 0
    57a8:	4b e4       	ldi	r20, 0x4B	; 75
    57aa:	50 e0       	ldi	r21, 0x00	; 0
    57ac:	66 e3       	ldi	r22, 0x36	; 54
    57ae:	b4 cf       	rjmp	.-152    	; 0x5718 <SunAlwaysShinesOnTV()+0x2c4>
    57b0:	4b ed       	ldi	r20, 0xDB	; 219
    57b2:	51 e0       	ldi	r21, 0x01	; 1
    57b4:	68 e3       	ldi	r22, 0x38	; 56
    57b6:	b6 cf       	rjmp	.-148    	; 0x5724 <SunAlwaysShinesOnTV()+0x2d0>
    57b8:	6a e3       	ldi	r22, 0x3A	; 58
    57ba:	81 ea       	ldi	r24, 0xA1	; 161
    57bc:	9c e2       	ldi	r25, 0x2C	; 44
    57be:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    57c2:	da ce       	rjmp	.-588    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>
    57c4:	40 ed       	ldi	r20, 0xD0	; 208
    57c6:	e4 2e       	mov	r14, r20
    57c8:	47 e0       	ldi	r20, 0x07	; 7
    57ca:	f4 2e       	mov	r15, r20
    57cc:	04 e6       	ldi	r16, 0x64	; 100
    57ce:	21 e0       	ldi	r18, 0x01	; 1
    57d0:	4c e3       	ldi	r20, 0x3C	; 60
    57d2:	61 e0       	ldi	r22, 0x01	; 1
    57d4:	8d e0       	ldi	r24, 0x0D	; 13
    57d6:	94 e3       	ldi	r25, 0x34	; 52
    57d8:	44 cf       	rjmp	.-376    	; 0x5662 <SunAlwaysShinesOnTV()+0x20e>
    57da:	ee 24       	eor	r14, r14
    57dc:	ea 94       	dec	r14
    57de:	f1 2c       	mov	r15, r1
    57e0:	0f ef       	ldi	r16, 0xFF	; 255
    57e2:	10 e0       	ldi	r17, 0x00	; 0
    57e4:	2f ef       	ldi	r18, 0xFF	; 255
    57e6:	30 e0       	ldi	r19, 0x00	; 0
    57e8:	42 e3       	ldi	r20, 0x32	; 50
    57ea:	50 e0       	ldi	r21, 0x00	; 0
    57ec:	6e e3       	ldi	r22, 0x3E	; 62
    57ee:	8c e6       	ldi	r24, 0x6C	; 108
    57f0:	97 e0       	ldi	r25, 0x07	; 7
    57f2:	79 cf       	rjmp	.-270    	; 0x56e6 <SunAlwaysShinesOnTV()+0x292>
    57f4:	46 eb       	ldi	r20, 0xB6	; 182
    57f6:	53 e0       	ldi	r21, 0x03	; 3
    57f8:	60 e4       	ldi	r22, 0x40	; 64
    57fa:	94 cf       	rjmp	.-216    	; 0x5724 <SunAlwaysShinesOnTV()+0x2d0>
    57fc:	42 e4       	ldi	r20, 0x42	; 66
    57fe:	6b ed       	ldi	r22, 0xDB	; 219
    5800:	71 e0       	ldi	r23, 0x01	; 1
    5802:	82 e2       	ldi	r24, 0x22	; 34
    5804:	9b e0       	ldi	r25, 0x0B	; 11
    5806:	7b cf       	rjmp	.-266    	; 0x56fe <SunAlwaysShinesOnTV()+0x2aa>
    5808:	ee 24       	eor	r14, r14
    580a:	ea 94       	dec	r14
    580c:	f1 2c       	mov	r15, r1
    580e:	0f ef       	ldi	r16, 0xFF	; 255
    5810:	10 e0       	ldi	r17, 0x00	; 0
    5812:	2f ef       	ldi	r18, 0xFF	; 255
    5814:	30 e0       	ldi	r19, 0x00	; 0
    5816:	42 e3       	ldi	r20, 0x32	; 50
    5818:	50 e0       	ldi	r21, 0x00	; 0
    581a:	64 e4       	ldi	r22, 0x44	; 68
    581c:	86 eb       	ldi	r24, 0xB6	; 182
    581e:	93 e0       	ldi	r25, 0x03	; 3
    5820:	62 cf       	rjmp	.-316    	; 0x56e6 <SunAlwaysShinesOnTV()+0x292>
    5822:	46 e4       	ldi	r20, 0x46	; 70
    5824:	6b ed       	ldi	r22, 0xDB	; 219
    5826:	71 e0       	ldi	r23, 0x01	; 1
    5828:	8b ee       	ldi	r24, 0xEB	; 235
    582a:	98 e2       	ldi	r25, 0x28	; 40
    582c:	68 cf       	rjmp	.-304    	; 0x56fe <SunAlwaysShinesOnTV()+0x2aa>
    582e:	ee 24       	eor	r14, r14
    5830:	ea 94       	dec	r14
    5832:	f1 2c       	mov	r15, r1
    5834:	0f ef       	ldi	r16, 0xFF	; 255
    5836:	10 e0       	ldi	r17, 0x00	; 0
    5838:	2f ef       	ldi	r18, 0xFF	; 255
    583a:	30 e0       	ldi	r19, 0x00	; 0
    583c:	42 e3       	ldi	r20, 0x32	; 50
    583e:	50 e0       	ldi	r21, 0x00	; 0
    5840:	68 e4       	ldi	r22, 0x48	; 72
    5842:	ec cf       	rjmp	.-40     	; 0x581c <SunAlwaysShinesOnTV()+0x3c8>
    5844:	4a e4       	ldi	r20, 0x4A	; 74
    5846:	6b ed       	ldi	r22, 0xDB	; 219
    5848:	71 e0       	ldi	r23, 0x01	; 1
    584a:	8c ed       	ldi	r24, 0xDC	; 220
    584c:	97 e3       	ldi	r25, 0x37	; 55
    584e:	57 cf       	rjmp	.-338    	; 0x56fe <SunAlwaysShinesOnTV()+0x2aa>
    5850:	ee 24       	eor	r14, r14
    5852:	ea 94       	dec	r14
    5854:	f1 2c       	mov	r15, r1
    5856:	0f ef       	ldi	r16, 0xFF	; 255
    5858:	10 e0       	ldi	r17, 0x00	; 0
    585a:	2f ef       	ldi	r18, 0xFF	; 255
    585c:	30 e0       	ldi	r19, 0x00	; 0
    585e:	42 e3       	ldi	r20, 0x32	; 50
    5860:	50 e0       	ldi	r21, 0x00	; 0
    5862:	6c e4       	ldi	r22, 0x4C	; 76
    5864:	db cf       	rjmp	.-74     	; 0x581c <SunAlwaysShinesOnTV()+0x3c8>
    5866:	64 e6       	ldi	r22, 0x64	; 100
    5868:	8c e4       	ldi	r24, 0x4C	; 76
    586a:	9d e1       	ldi	r25, 0x1D	; 29
    586c:	95 ce       	rjmp	.-726    	; 0x5598 <SunAlwaysShinesOnTV()+0x144>
    586e:	60 e0       	ldi	r22, 0x00	; 0
    5870:	8a ed       	ldi	r24, 0xDA	; 218
    5872:	90 e1       	ldi	r25, 0x10	; 16
    5874:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    5878:	80 e0       	ldi	r24, 0x00	; 0
    587a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    587e:	7c ce       	rjmp	.-776    	; 0x5578 <SunAlwaysShinesOnTV()+0x124>

00005880 <peopleArePeople()>:
    5880:	ef 92       	push	r14
    5882:	ff 92       	push	r15
    5884:	0f 93       	push	r16
    5886:	1f 93       	push	r17
    5888:	cf 93       	push	r28
    588a:	df 93       	push	r29
    588c:	00 d0       	rcall	.+0      	; 0x588e <peopleArePeople()+0xe>
    588e:	00 d0       	rcall	.+0      	; 0x5890 <peopleArePeople()+0x10>
    5890:	00 d0       	rcall	.+0      	; 0x5892 <peopleArePeople()+0x12>
    5892:	1f 92       	push	r1
    5894:	cd b7       	in	r28, 0x3d	; 61
    5896:	de b7       	in	r29, 0x3e	; 62
    5898:	e0 91 c5 0a 	lds	r30, 0x0AC5	; 0x800ac5 <prog>
    589c:	e5 36       	cpi	r30, 0x65	; 101
    589e:	08 f0       	brcs	.+2      	; 0x58a2 <peopleArePeople()+0x22>
    58a0:	81 c0       	rjmp	.+258    	; 0x59a4 <peopleArePeople()+0x124>
    58a2:	f0 e0       	ldi	r31, 0x00	; 0
    58a4:	ea 5a       	subi	r30, 0xAA	; 170
    58a6:	f3 4d       	sbci	r31, 0xD3	; 211
    58a8:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    58ac:	bb 2c       	mov	r11, r11
    58ae:	d2 2c       	mov	r13, r2
    58b0:	df 2c       	mov	r13, r15
    58b2:	d2 2c       	mov	r13, r2
    58b4:	e5 2c       	mov	r14, r5
    58b6:	ed 2c       	mov	r14, r13
    58b8:	fc 2c       	mov	r15, r12
    58ba:	04 2d       	mov	r16, r4
    58bc:	0f 2d       	mov	r16, r15
    58be:	15 2d       	mov	r17, r5
    58c0:	1d 2d       	mov	r17, r13
    58c2:	d2 2c       	mov	r13, r2
    58c4:	24 2d       	mov	r18, r4
    58c6:	d2 2c       	mov	r13, r2
    58c8:	31 2d       	mov	r19, r1
    58ca:	d2 2c       	mov	r13, r2
    58cc:	37 2d       	mov	r19, r7
    58ce:	d2 2c       	mov	r13, r2
    58d0:	3d 2d       	mov	r19, r13
    58d2:	d2 2c       	mov	r13, r2
    58d4:	41 2d       	mov	r20, r1
    58d6:	d2 2c       	mov	r13, r2
    58d8:	4f 2d       	mov	r20, r15
    58da:	d2 2c       	mov	r13, r2
    58dc:	d2 2c       	mov	r13, r2
    58de:	d2 2c       	mov	r13, r2
    58e0:	57 2d       	mov	r21, r7
    58e2:	d2 2c       	mov	r13, r2
    58e4:	5f 2d       	mov	r21, r15
    58e6:	d2 2c       	mov	r13, r2
    58e8:	62 2d       	mov	r22, r2
    58ea:	d2 2c       	mov	r13, r2
    58ec:	6f 2d       	mov	r22, r15
    58ee:	d2 2c       	mov	r13, r2
    58f0:	71 2d       	mov	r23, r1
    58f2:	d2 2c       	mov	r13, r2
    58f4:	7e 2d       	mov	r23, r14
    58f6:	d2 2c       	mov	r13, r2
    58f8:	84 2d       	mov	r24, r4
    58fa:	d2 2c       	mov	r13, r2
    58fc:	88 2d       	mov	r24, r8
    58fe:	d2 2c       	mov	r13, r2
    5900:	95 2d       	mov	r25, r5
    5902:	d2 2c       	mov	r13, r2
    5904:	9b 2d       	mov	r25, r11
    5906:	d2 2c       	mov	r13, r2
    5908:	a8 2d       	mov	r26, r8
    590a:	d2 2c       	mov	r13, r2
    590c:	ac 2d       	mov	r26, r12
    590e:	d2 2c       	mov	r13, r2
    5910:	b9 2d       	mov	r27, r9
    5912:	d2 2c       	mov	r13, r2
    5914:	bb 2d       	mov	r27, r11
    5916:	d2 2c       	mov	r13, r2
    5918:	bf 2d       	mov	r27, r15
    591a:	c5 2d       	mov	r28, r5
    591c:	d0 2d       	mov	r29, r0
    591e:	d2 2c       	mov	r13, r2
    5920:	dd 2d       	mov	r29, r13
    5922:	d2 2c       	mov	r13, r2
    5924:	e8 2d       	mov	r30, r8
    5926:	d2 2c       	mov	r13, r2
    5928:	d2 2c       	mov	r13, r2
    592a:	d2 2c       	mov	r13, r2
    592c:	d2 2c       	mov	r13, r2
    592e:	d2 2c       	mov	r13, r2
    5930:	d2 2c       	mov	r13, r2
    5932:	d2 2c       	mov	r13, r2
    5934:	d2 2c       	mov	r13, r2
    5936:	d2 2c       	mov	r13, r2
    5938:	d2 2c       	mov	r13, r2
    593a:	d2 2c       	mov	r13, r2
    593c:	d2 2c       	mov	r13, r2
    593e:	d2 2c       	mov	r13, r2
    5940:	d2 2c       	mov	r13, r2
    5942:	d2 2c       	mov	r13, r2
    5944:	d2 2c       	mov	r13, r2
    5946:	d2 2c       	mov	r13, r2
    5948:	d2 2c       	mov	r13, r2
    594a:	d2 2c       	mov	r13, r2
    594c:	d2 2c       	mov	r13, r2
    594e:	d2 2c       	mov	r13, r2
    5950:	d2 2c       	mov	r13, r2
    5952:	d2 2c       	mov	r13, r2
    5954:	d2 2c       	mov	r13, r2
    5956:	d2 2c       	mov	r13, r2
    5958:	d2 2c       	mov	r13, r2
    595a:	d2 2c       	mov	r13, r2
    595c:	d2 2c       	mov	r13, r2
    595e:	d2 2c       	mov	r13, r2
    5960:	d2 2c       	mov	r13, r2
    5962:	d2 2c       	mov	r13, r2
    5964:	d2 2c       	mov	r13, r2
    5966:	d2 2c       	mov	r13, r2
    5968:	d2 2c       	mov	r13, r2
    596a:	d2 2c       	mov	r13, r2
    596c:	d2 2c       	mov	r13, r2
    596e:	d2 2c       	mov	r13, r2
    5970:	d2 2c       	mov	r13, r2
    5972:	d2 2c       	mov	r13, r2
    5974:	ec 2d       	mov	r30, r12
    5976:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    597a:	7c 01       	movw	r14, r24
    597c:	6e ed       	ldi	r22, 0xDE	; 222
    597e:	72 e0       	ldi	r23, 0x02	; 2
    5980:	ce 01       	movw	r24, r28
    5982:	01 96       	adiw	r24, 0x01	; 1
    5984:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    5988:	02 e0       	ldi	r16, 0x02	; 2
    598a:	97 01       	movw	r18, r14
    598c:	4a e5       	ldi	r20, 0x5A	; 90
    598e:	50 e0       	ldi	r21, 0x00	; 0
    5990:	6c ef       	ldi	r22, 0xFC	; 252
    5992:	73 e5       	ldi	r23, 0x53	; 83
    5994:	ce 01       	movw	r24, r28
    5996:	01 96       	adiw	r24, 0x01	; 1
    5998:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    599c:	ce 01       	movw	r24, r28
    599e:	01 96       	adiw	r24, 0x01	; 1
    59a0:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    59a4:	27 96       	adiw	r28, 0x07	; 7
    59a6:	0f b6       	in	r0, 0x3f	; 63
    59a8:	f8 94       	cli
    59aa:	de bf       	out	0x3e, r29	; 62
    59ac:	0f be       	out	0x3f, r0	; 63
    59ae:	cd bf       	out	0x3d, r28	; 61
    59b0:	df 91       	pop	r29
    59b2:	cf 91       	pop	r28
    59b4:	1f 91       	pop	r17
    59b6:	0f 91       	pop	r16
    59b8:	ff 90       	pop	r15
    59ba:	ef 90       	pop	r14
    59bc:	08 95       	ret
    59be:	64 e0       	ldi	r22, 0x04	; 4
    59c0:	86 e5       	ldi	r24, 0x56	; 86
    59c2:	95 e4       	ldi	r25, 0x45	; 69
    59c4:	0e 94 d1 0c 	call	0x19a2	; 0x19a2 <progMatrixScanner(unsigned int, unsigned char)>
    59c8:	ed cf       	rjmp	.-38     	; 0x59a4 <peopleArePeople()+0x124>
    59ca:	4a ef       	ldi	r20, 0xFA	; 250
    59cc:	50 e0       	ldi	r21, 0x00	; 0
    59ce:	65 e0       	ldi	r22, 0x05	; 5
    59d0:	82 e9       	ldi	r24, 0x92	; 146
    59d2:	9b e3       	ldi	r25, 0x3B	; 59
    59d4:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    59d8:	e5 cf       	rjmp	.-54     	; 0x59a4 <peopleArePeople()+0x124>
    59da:	ee 24       	eor	r14, r14
    59dc:	ea 94       	dec	r14
    59de:	f1 2c       	mov	r15, r1
    59e0:	0f ef       	ldi	r16, 0xFF	; 255
    59e2:	10 e0       	ldi	r17, 0x00	; 0
    59e4:	2f ef       	ldi	r18, 0xFF	; 255
    59e6:	30 e0       	ldi	r19, 0x00	; 0
    59e8:	4d e7       	ldi	r20, 0x7D	; 125
    59ea:	50 e0       	ldi	r21, 0x00	; 0
    59ec:	66 e0       	ldi	r22, 0x06	; 6
    59ee:	8b e6       	ldi	r24, 0x6B	; 107
    59f0:	93 e0       	ldi	r25, 0x03	; 3
    59f2:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    59f6:	d6 cf       	rjmp	.-84     	; 0x59a4 <peopleArePeople()+0x124>
    59f8:	47 e0       	ldi	r20, 0x07	; 7
    59fa:	68 ee       	ldi	r22, 0xE8	; 232
    59fc:	73 e0       	ldi	r23, 0x03	; 3
    59fe:	85 e3       	ldi	r24, 0x35	; 53
    5a00:	9c e0       	ldi	r25, 0x0C	; 12
    5a02:	0e 94 d4 0c 	call	0x19a8	; 0x19a8 <progStern(unsigned int, int, unsigned char)>
    5a06:	ce cf       	rjmp	.-100    	; 0x59a4 <peopleArePeople()+0x124>
    5a08:	ee 24       	eor	r14, r14
    5a0a:	ea 94       	dec	r14
    5a0c:	f1 2c       	mov	r15, r1
    5a0e:	0f ef       	ldi	r16, 0xFF	; 255
    5a10:	10 e0       	ldi	r17, 0x00	; 0
    5a12:	2f ef       	ldi	r18, 0xFF	; 255
    5a14:	30 e0       	ldi	r19, 0x00	; 0
    5a16:	4d e7       	ldi	r20, 0x7D	; 125
    5a18:	50 e0       	ldi	r21, 0x00	; 0
    5a1a:	68 e0       	ldi	r22, 0x08	; 8
    5a1c:	e8 cf       	rjmp	.-48     	; 0x59ee <peopleArePeople()+0x16e>
    5a1e:	49 e0       	ldi	r20, 0x09	; 9
    5a20:	68 ee       	ldi	r22, 0xE8	; 232
    5a22:	73 e0       	ldi	r23, 0x03	; 3
    5a24:	83 e5       	ldi	r24, 0x53	; 83
    5a26:	97 e0       	ldi	r25, 0x07	; 7
    5a28:	ec cf       	rjmp	.-40     	; 0x5a02 <peopleArePeople()+0x182>
    5a2a:	44 ef       	ldi	r20, 0xF4	; 244
    5a2c:	51 e0       	ldi	r21, 0x01	; 1
    5a2e:	6a e0       	ldi	r22, 0x0A	; 10
    5a30:	80 e8       	ldi	r24, 0x80	; 128
    5a32:	9e e3       	ldi	r25, 0x3E	; 62
    5a34:	0e 94 cf 0e 	call	0x1d9e	; 0x1d9e <progCircles(unsigned int, unsigned char, unsigned int)>
    5a38:	b5 cf       	rjmp	.-150    	; 0x59a4 <peopleArePeople()+0x124>
    5a3a:	4c e0       	ldi	r20, 0x0C	; 12
    5a3c:	67 e0       	ldi	r22, 0x07	; 7
    5a3e:	80 e7       	ldi	r24, 0x70	; 112
    5a40:	97 e1       	ldi	r25, 0x17	; 23
    5a42:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    5a46:	ae cf       	rjmp	.-164    	; 0x59a4 <peopleArePeople()+0x124>
    5a48:	ee 24       	eor	r14, r14
    5a4a:	ea 94       	dec	r14
    5a4c:	f1 2c       	mov	r15, r1
    5a4e:	0f ef       	ldi	r16, 0xFF	; 255
    5a50:	10 e0       	ldi	r17, 0x00	; 0
    5a52:	2f ef       	ldi	r18, 0xFF	; 255
    5a54:	30 e0       	ldi	r19, 0x00	; 0
    5a56:	4d e7       	ldi	r20, 0x7D	; 125
    5a58:	50 e0       	ldi	r21, 0x00	; 0
    5a5a:	6e e0       	ldi	r22, 0x0E	; 14
    5a5c:	84 ef       	ldi	r24, 0xF4	; 244
    5a5e:	91 e0       	ldi	r25, 0x01	; 1
    5a60:	c8 cf       	rjmp	.-112    	; 0x59f2 <peopleArePeople()+0x172>
    5a62:	60 e1       	ldi	r22, 0x10	; 16
    5a64:	84 ef       	ldi	r24, 0xF4	; 244
    5a66:	91 e0       	ldi	r25, 0x01	; 1
    5a68:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    5a6c:	9b cf       	rjmp	.-202    	; 0x59a4 <peopleArePeople()+0x124>
    5a6e:	42 e3       	ldi	r20, 0x32	; 50
    5a70:	50 e0       	ldi	r21, 0x00	; 0
    5a72:	62 e1       	ldi	r22, 0x12	; 18
    5a74:	88 ee       	ldi	r24, 0xE8	; 232
    5a76:	93 e0       	ldi	r25, 0x03	; 3
    5a78:	dd cf       	rjmp	.-70     	; 0x5a34 <peopleArePeople()+0x1b4>
    5a7a:	4a ef       	ldi	r20, 0xFA	; 250
    5a7c:	50 e0       	ldi	r21, 0x00	; 0
    5a7e:	64 e1       	ldi	r22, 0x14	; 20
    5a80:	a7 cf       	rjmp	.-178    	; 0x59d0 <peopleArePeople()+0x150>
    5a82:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5a86:	7c 01       	movw	r14, r24
    5a88:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5a8c:	0f ef       	ldi	r16, 0xFF	; 255
    5a8e:	10 e0       	ldi	r17, 0x00	; 0
    5a90:	9c 01       	movw	r18, r24
    5a92:	4d e7       	ldi	r20, 0x7D	; 125
    5a94:	50 e0       	ldi	r21, 0x00	; 0
    5a96:	66 e1       	ldi	r22, 0x16	; 22
    5a98:	8e ee       	ldi	r24, 0xEE	; 238
    5a9a:	92 e0       	ldi	r25, 0x02	; 2
    5a9c:	aa cf       	rjmp	.-172    	; 0x59f2 <peopleArePeople()+0x172>
    5a9e:	40 ed       	ldi	r20, 0xD0	; 208
    5aa0:	57 e0       	ldi	r21, 0x07	; 7
    5aa2:	6a e1       	ldi	r22, 0x1A	; 26
    5aa4:	80 e6       	ldi	r24, 0x60	; 96
    5aa6:	9d e6       	ldi	r25, 0x6D	; 109
    5aa8:	0e 94 1a 0a 	call	0x1434	; 0x1434 <progBlingBlingColoring(unsigned int, unsigned char, unsigned int)>
    5aac:	7b cf       	rjmp	.-266    	; 0x59a4 <peopleArePeople()+0x124>
    5aae:	44 ef       	ldi	r20, 0xF4	; 244
    5ab0:	51 e0       	ldi	r21, 0x01	; 1
    5ab2:	6c e1       	ldi	r22, 0x1C	; 28
    5ab4:	80 e8       	ldi	r24, 0x80	; 128
    5ab6:	9e e3       	ldi	r25, 0x3E	; 62
    5ab8:	0e 94 7b 0f 	call	0x1ef6	; 0x1ef6 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    5abc:	73 cf       	rjmp	.-282    	; 0x59a4 <peopleArePeople()+0x124>
    5abe:	4e e1       	ldi	r20, 0x1E	; 30
    5ac0:	68 e0       	ldi	r22, 0x08	; 8
    5ac2:	bd cf       	rjmp	.-134    	; 0x5a3e <peopleArePeople()+0x1be>
    5ac4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5ac8:	8c 01       	movw	r16, r24
    5aca:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5ace:	ee 24       	eor	r14, r14
    5ad0:	ea 94       	dec	r14
    5ad2:	f1 2c       	mov	r15, r1
    5ad4:	9c 01       	movw	r18, r24
    5ad6:	4d e7       	ldi	r20, 0x7D	; 125
    5ad8:	50 e0       	ldi	r21, 0x00	; 0
    5ada:	60 e2       	ldi	r22, 0x20	; 32
    5adc:	bf cf       	rjmp	.-130    	; 0x5a5c <peopleArePeople()+0x1dc>
    5ade:	62 e2       	ldi	r22, 0x22	; 34
    5ae0:	c1 cf       	rjmp	.-126    	; 0x5a64 <peopleArePeople()+0x1e4>
    5ae2:	ee 24       	eor	r14, r14
    5ae4:	ea 94       	dec	r14
    5ae6:	f1 2c       	mov	r15, r1
    5ae8:	0f ef       	ldi	r16, 0xFF	; 255
    5aea:	10 e0       	ldi	r17, 0x00	; 0
    5aec:	2f ef       	ldi	r18, 0xFF	; 255
    5aee:	30 e0       	ldi	r19, 0x00	; 0
    5af0:	42 e3       	ldi	r20, 0x32	; 50
    5af2:	50 e0       	ldi	r21, 0x00	; 0
    5af4:	64 e2       	ldi	r22, 0x24	; 36
    5af6:	88 ee       	ldi	r24, 0xE8	; 232
    5af8:	93 e0       	ldi	r25, 0x03	; 3
    5afa:	7b cf       	rjmp	.-266    	; 0x59f2 <peopleArePeople()+0x172>
    5afc:	46 e2       	ldi	r20, 0x26	; 38
    5afe:	64 ef       	ldi	r22, 0xF4	; 244
    5b00:	71 e0       	ldi	r23, 0x01	; 1
    5b02:	80 e8       	ldi	r24, 0x80	; 128
    5b04:	9e e3       	ldi	r25, 0x3E	; 62
    5b06:	7d cf       	rjmp	.-262    	; 0x5a02 <peopleArePeople()+0x182>
    5b08:	68 e2       	ldi	r22, 0x28	; 40
    5b0a:	82 eb       	ldi	r24, 0xB2	; 178
    5b0c:	9c e0       	ldi	r25, 0x0C	; 12
    5b0e:	5a cf       	rjmp	.-332    	; 0x59c4 <peopleArePeople()+0x144>
    5b10:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5b14:	8c 01       	movw	r16, r24
    5b16:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5b1a:	ee 24       	eor	r14, r14
    5b1c:	ea 94       	dec	r14
    5b1e:	f1 2c       	mov	r15, r1
    5b20:	9c 01       	movw	r18, r24
    5b22:	4d e7       	ldi	r20, 0x7D	; 125
    5b24:	50 e0       	ldi	r21, 0x00	; 0
    5b26:	6a e2       	ldi	r22, 0x2A	; 42
    5b28:	b7 cf       	rjmp	.-146    	; 0x5a98 <peopleArePeople()+0x218>
    5b2a:	6c e2       	ldi	r22, 0x2C	; 44
    5b2c:	80 e4       	ldi	r24, 0x40	; 64
    5b2e:	9f e1       	ldi	r25, 0x1F	; 31
    5b30:	0e 94 5e 17 	call	0x2ebc	; 0x2ebc <progMatrixHorizontal(unsigned int, unsigned char)>
    5b34:	37 cf       	rjmp	.-402    	; 0x59a4 <peopleArePeople()+0x124>
    5b36:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5b3a:	8c 01       	movw	r16, r24
    5b3c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5b40:	ee 24       	eor	r14, r14
    5b42:	ea 94       	dec	r14
    5b44:	f1 2c       	mov	r15, r1
    5b46:	9c 01       	movw	r18, r24
    5b48:	4d e7       	ldi	r20, 0x7D	; 125
    5b4a:	50 e0       	ldi	r21, 0x00	; 0
    5b4c:	6e e2       	ldi	r22, 0x2E	; 46
    5b4e:	86 cf       	rjmp	.-244    	; 0x5a5c <peopleArePeople()+0x1dc>
    5b50:	60 e3       	ldi	r22, 0x30	; 48
    5b52:	8c e4       	ldi	r24, 0x4C	; 76
    5b54:	9d e1       	ldi	r25, 0x1D	; 29
    5b56:	ec cf       	rjmp	.-40     	; 0x5b30 <peopleArePeople()+0x2b0>
    5b58:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5b5c:	8c 01       	movw	r16, r24
    5b5e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5b62:	ee 24       	eor	r14, r14
    5b64:	ea 94       	dec	r14
    5b66:	f1 2c       	mov	r15, r1
    5b68:	9c 01       	movw	r18, r24
    5b6a:	4d e7       	ldi	r20, 0x7D	; 125
    5b6c:	50 e0       	ldi	r21, 0x00	; 0
    5b6e:	62 e3       	ldi	r22, 0x32	; 50
    5b70:	75 cf       	rjmp	.-278    	; 0x5a5c <peopleArePeople()+0x1dc>
    5b72:	64 e3       	ldi	r22, 0x34	; 52
    5b74:	77 cf       	rjmp	.-274    	; 0x5a64 <peopleArePeople()+0x1e4>
    5b76:	42 e3       	ldi	r20, 0x32	; 50
    5b78:	50 e0       	ldi	r21, 0x00	; 0
    5b7a:	66 e3       	ldi	r22, 0x36	; 54
    5b7c:	7b cf       	rjmp	.-266    	; 0x5a74 <peopleArePeople()+0x1f4>
    5b7e:	4a ef       	ldi	r20, 0xFA	; 250
    5b80:	50 e0       	ldi	r21, 0x00	; 0
    5b82:	67 e3       	ldi	r22, 0x37	; 55
    5b84:	8c e8       	ldi	r24, 0x8C	; 140
    5b86:	9c e3       	ldi	r25, 0x3C	; 60
    5b88:	25 cf       	rjmp	.-438    	; 0x59d4 <peopleArePeople()+0x154>
    5b8a:	ee 24       	eor	r14, r14
    5b8c:	ea 94       	dec	r14
    5b8e:	f1 2c       	mov	r15, r1
    5b90:	0f ef       	ldi	r16, 0xFF	; 255
    5b92:	10 e0       	ldi	r17, 0x00	; 0
    5b94:	2f ef       	ldi	r18, 0xFF	; 255
    5b96:	30 e0       	ldi	r19, 0x00	; 0
    5b98:	44 e6       	ldi	r20, 0x64	; 100
    5b9a:	50 e0       	ldi	r21, 0x00	; 0
    5b9c:	68 e3       	ldi	r22, 0x38	; 56
    5b9e:	5e cf       	rjmp	.-324    	; 0x5a5c <peopleArePeople()+0x1dc>
    5ba0:	9c ed       	ldi	r25, 0xDC	; 220
    5ba2:	e9 2e       	mov	r14, r25
    5ba4:	95 e0       	ldi	r25, 0x05	; 5
    5ba6:	f9 2e       	mov	r15, r25
    5ba8:	04 e6       	ldi	r16, 0x64	; 100
    5baa:	21 e0       	ldi	r18, 0x01	; 1
    5bac:	4a e3       	ldi	r20, 0x3A	; 58
    5bae:	61 e0       	ldi	r22, 0x01	; 1
    5bb0:	88 e9       	ldi	r24, 0x98	; 152
    5bb2:	9a e3       	ldi	r25, 0x3A	; 58
    5bb4:	0e 94 bd 0a 	call	0x157a	; 0x157a <progFastBlingBling(unsigned int, unsigned char, unsigned char, unsigned char, unsigned char, unsigned int)>
    5bb8:	f5 ce       	rjmp	.-534    	; 0x59a4 <peopleArePeople()+0x124>
    5bba:	ee 24       	eor	r14, r14
    5bbc:	ea 94       	dec	r14
    5bbe:	f1 2c       	mov	r15, r1
    5bc0:	0f ef       	ldi	r16, 0xFF	; 255
    5bc2:	10 e0       	ldi	r17, 0x00	; 0
    5bc4:	2f ef       	ldi	r18, 0xFF	; 255
    5bc6:	30 e0       	ldi	r19, 0x00	; 0
    5bc8:	42 e3       	ldi	r20, 0x32	; 50
    5bca:	50 e0       	ldi	r21, 0x00	; 0
    5bcc:	6c e3       	ldi	r22, 0x3C	; 60
    5bce:	93 cf       	rjmp	.-218    	; 0x5af6 <peopleArePeople()+0x276>
    5bd0:	64 e6       	ldi	r22, 0x64	; 100
    5bd2:	80 e1       	ldi	r24, 0x10	; 16
    5bd4:	97 e2       	ldi	r25, 0x27	; 39
    5bd6:	48 cf       	rjmp	.-368    	; 0x5a68 <peopleArePeople()+0x1e8>
    5bd8:	60 e0       	ldi	r22, 0x00	; 0
    5bda:	8a ed       	ldi	r24, 0xDA	; 218
    5bdc:	90 e1       	ldi	r25, 0x10	; 16
    5bde:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    5be2:	80 e0       	ldi	r24, 0x00	; 0
    5be4:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    5be8:	dd ce       	rjmp	.-582    	; 0x59a4 <peopleArePeople()+0x124>

00005bea <enjoyTheSilence()>:
    5bea:	ef 92       	push	r14
    5bec:	ff 92       	push	r15
    5bee:	0f 93       	push	r16
    5bf0:	1f 93       	push	r17
    5bf2:	cf 93       	push	r28
    5bf4:	df 93       	push	r29
    5bf6:	00 d0       	rcall	.+0      	; 0x5bf8 <enjoyTheSilence()+0xe>
    5bf8:	00 d0       	rcall	.+0      	; 0x5bfa <enjoyTheSilence()+0x10>
    5bfa:	00 d0       	rcall	.+0      	; 0x5bfc <enjoyTheSilence()+0x12>
    5bfc:	1f 92       	push	r1
    5bfe:	cd b7       	in	r28, 0x3d	; 61
    5c00:	de b7       	in	r29, 0x3e	; 62
    5c02:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    5c06:	86 34       	cpi	r24, 0x46	; 70
    5c08:	09 f4       	brne	.+2      	; 0x5c0c <enjoyTheSilence()+0x22>
    5c0a:	f0 c0       	rjmp	.+480    	; 0x5dec <enjoyTheSilence()+0x202>
    5c0c:	08 f0       	brcs	.+2      	; 0x5c10 <enjoyTheSilence()+0x26>
    5c0e:	51 c0       	rjmp	.+162    	; 0x5cb2 <enjoyTheSilence()+0xc8>
    5c10:	8e 31       	cpi	r24, 0x1E	; 30
    5c12:	09 f4       	brne	.+2      	; 0x5c16 <enjoyTheSilence()+0x2c>
    5c14:	c9 c0       	rjmp	.+402    	; 0x5da8 <enjoyTheSilence()+0x1be>
    5c16:	18 f5       	brcc	.+70     	; 0x5c5e <enjoyTheSilence()+0x74>
    5c18:	8a 30       	cpi	r24, 0x0A	; 10
    5c1a:	09 f4       	brne	.+2      	; 0x5c1e <enjoyTheSilence()+0x34>
    5c1c:	a9 c0       	rjmp	.+338    	; 0x5d70 <enjoyTheSilence()+0x186>
    5c1e:	98 f4       	brcc	.+38     	; 0x5c46 <enjoyTheSilence()+0x5c>
    5c20:	88 23       	and	r24, r24
    5c22:	09 f4       	brne	.+2      	; 0x5c26 <enjoyTheSilence()+0x3c>
    5c24:	86 c0       	rjmp	.+268    	; 0x5d32 <enjoyTheSilence()+0x148>
    5c26:	85 30       	cpi	r24, 0x05	; 5
    5c28:	09 f4       	brne	.+2      	; 0x5c2c <enjoyTheSilence()+0x42>
    5c2a:	9b c0       	rjmp	.+310    	; 0x5d62 <enjoyTheSilence()+0x178>
    5c2c:	27 96       	adiw	r28, 0x07	; 7
    5c2e:	0f b6       	in	r0, 0x3f	; 63
    5c30:	f8 94       	cli
    5c32:	de bf       	out	0x3e, r29	; 62
    5c34:	0f be       	out	0x3f, r0	; 63
    5c36:	cd bf       	out	0x3d, r28	; 61
    5c38:	df 91       	pop	r29
    5c3a:	cf 91       	pop	r28
    5c3c:	1f 91       	pop	r17
    5c3e:	0f 91       	pop	r16
    5c40:	ff 90       	pop	r15
    5c42:	ef 90       	pop	r14
    5c44:	08 95       	ret
    5c46:	84 31       	cpi	r24, 0x14	; 20
    5c48:	09 f4       	brne	.+2      	; 0x5c4c <enjoyTheSilence()+0x62>
    5c4a:	97 c0       	rjmp	.+302    	; 0x5d7a <enjoyTheSilence()+0x190>
    5c4c:	89 31       	cpi	r24, 0x19	; 25
    5c4e:	09 f4       	brne	.+2      	; 0x5c52 <enjoyTheSilence()+0x68>
    5c50:	a5 c0       	rjmp	.+330    	; 0x5d9c <enjoyTheSilence()+0x1b2>
    5c52:	8f 30       	cpi	r24, 0x0F	; 15
    5c54:	59 f7       	brne	.-42     	; 0x5c2c <enjoyTheSilence()+0x42>
    5c56:	4a e1       	ldi	r20, 0x1A	; 26
    5c58:	54 e0       	ldi	r21, 0x04	; 4
    5c5a:	64 e1       	ldi	r22, 0x14	; 20
    5c5c:	3b c0       	rjmp	.+118    	; 0x5cd4 <enjoyTheSilence()+0xea>
    5c5e:	82 33       	cpi	r24, 0x32	; 50
    5c60:	09 f4       	brne	.+2      	; 0x5c64 <enjoyTheSilence()+0x7a>
    5c62:	ad c0       	rjmp	.+346    	; 0x5dbe <enjoyTheSilence()+0x1d4>
    5c64:	78 f4       	brcc	.+30     	; 0x5c84 <enjoyTheSilence()+0x9a>
    5c66:	88 32       	cpi	r24, 0x28	; 40
    5c68:	09 f4       	brne	.+2      	; 0x5c6c <enjoyTheSilence()+0x82>
    5c6a:	a4 c0       	rjmp	.+328    	; 0x5db4 <enjoyTheSilence()+0x1ca>
    5c6c:	8d 32       	cpi	r24, 0x2D	; 45
    5c6e:	09 f4       	brne	.+2      	; 0x5c72 <enjoyTheSilence()+0x88>
    5c70:	a4 c0       	rjmp	.+328    	; 0x5dba <enjoyTheSilence()+0x1d0>
    5c72:	83 32       	cpi	r24, 0x23	; 35
    5c74:	d9 f6       	brne	.-74     	; 0x5c2c <enjoyTheSilence()+0x42>
    5c76:	48 e2       	ldi	r20, 0x28	; 40
    5c78:	65 e0       	ldi	r22, 0x05	; 5
    5c7a:	8f e4       	ldi	r24, 0x4F	; 79
    5c7c:	92 e4       	ldi	r25, 0x42	; 66
    5c7e:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5c82:	d4 cf       	rjmp	.-88     	; 0x5c2c <enjoyTheSilence()+0x42>
    5c84:	8c 33       	cpi	r24, 0x3C	; 60
    5c86:	09 f4       	brne	.+2      	; 0x5c8a <enjoyTheSilence()+0xa0>
    5c88:	9e c0       	rjmp	.+316    	; 0x5dc6 <enjoyTheSilence()+0x1dc>
    5c8a:	81 34       	cpi	r24, 0x41	; 65
    5c8c:	09 f4       	brne	.+2      	; 0x5c90 <enjoyTheSilence()+0xa6>
    5c8e:	ab c0       	rjmp	.+342    	; 0x5de6 <enjoyTheSilence()+0x1fc>
    5c90:	87 33       	cpi	r24, 0x37	; 55
    5c92:	61 f6       	brne	.-104    	; 0x5c2c <enjoyTheSilence()+0x42>
    5c94:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5c98:	7c 01       	movw	r14, r24
    5c9a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5c9e:	8c 01       	movw	r16, r24
    5ca0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5ca4:	9c 01       	movw	r18, r24
    5ca6:	42 e3       	ldi	r20, 0x32	; 50
    5ca8:	50 e0       	ldi	r21, 0x00	; 0
    5caa:	6c e3       	ldi	r22, 0x3C	; 60
    5cac:	84 e3       	ldi	r24, 0x34	; 52
    5cae:	91 e2       	ldi	r25, 0x21	; 33
    5cb0:	72 c0       	rjmp	.+228    	; 0x5d96 <enjoyTheSilence()+0x1ac>
    5cb2:	89 36       	cpi	r24, 0x69	; 105
    5cb4:	09 f4       	brne	.+2      	; 0x5cb8 <enjoyTheSilence()+0xce>
    5cb6:	c9 c0       	rjmp	.+402    	; 0x5e4a <enjoyTheSilence()+0x260>
    5cb8:	08 f5       	brcc	.+66     	; 0x5cfc <enjoyTheSilence()+0x112>
    5cba:	85 35       	cpi	r24, 0x55	; 85
    5cbc:	09 f4       	brne	.+2      	; 0x5cc0 <enjoyTheSilence()+0xd6>
    5cbe:	a0 c0       	rjmp	.+320    	; 0x5e00 <enjoyTheSilence()+0x216>
    5cc0:	70 f4       	brcc	.+28     	; 0x5cde <enjoyTheSilence()+0xf4>
    5cc2:	8b 34       	cpi	r24, 0x4B	; 75
    5cc4:	09 f4       	brne	.+2      	; 0x5cc8 <enjoyTheSilence()+0xde>
    5cc6:	97 c0       	rjmp	.+302    	; 0x5df6 <enjoyTheSilence()+0x20c>
    5cc8:	4a e1       	ldi	r20, 0x1A	; 26
    5cca:	54 e0       	ldi	r21, 0x04	; 4
    5ccc:	65 e5       	ldi	r22, 0x55	; 85
    5cce:	80 35       	cpi	r24, 0x50	; 80
    5cd0:	09 f0       	breq	.+2      	; 0x5cd4 <enjoyTheSilence()+0xea>
    5cd2:	ac cf       	rjmp	.-168    	; 0x5c2c <enjoyTheSilence()+0x42>
    5cd4:	84 e3       	ldi	r24, 0x34	; 52
    5cd6:	91 e2       	ldi	r25, 0x21	; 33
    5cd8:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5cdc:	a7 cf       	rjmp	.-178    	; 0x5c2c <enjoyTheSilence()+0x42>
    5cde:	8f 35       	cpi	r24, 0x5F	; 95
    5ce0:	09 f4       	brne	.+2      	; 0x5ce4 <enjoyTheSilence()+0xfa>
    5ce2:	9b c0       	rjmp	.+310    	; 0x5e1a <enjoyTheSilence()+0x230>
    5ce4:	84 36       	cpi	r24, 0x64	; 100
    5ce6:	09 f4       	brne	.+2      	; 0x5cea <enjoyTheSilence()+0x100>
    5ce8:	a5 c0       	rjmp	.+330    	; 0x5e34 <enjoyTheSilence()+0x24a>
    5cea:	8a 35       	cpi	r24, 0x5A	; 90
    5cec:	09 f0       	breq	.+2      	; 0x5cf0 <enjoyTheSilence()+0x106>
    5cee:	9e cf       	rjmp	.-196    	; 0x5c2c <enjoyTheSilence()+0x42>
    5cf0:	4a e1       	ldi	r20, 0x1A	; 26
    5cf2:	54 e0       	ldi	r21, 0x04	; 4
    5cf4:	6f e5       	ldi	r22, 0x5F	; 95
    5cf6:	8b e1       	ldi	r24, 0x1B	; 27
    5cf8:	91 e2       	ldi	r25, 0x21	; 33
    5cfa:	ee cf       	rjmp	.-36     	; 0x5cd8 <enjoyTheSilence()+0xee>
    5cfc:	8d 37       	cpi	r24, 0x7D	; 125
    5cfe:	09 f4       	brne	.+2      	; 0x5d02 <enjoyTheSilence()+0x118>
    5d00:	af c0       	rjmp	.+350    	; 0x5e60 <enjoyTheSilence()+0x276>
    5d02:	58 f4       	brcc	.+22     	; 0x5d1a <enjoyTheSilence()+0x130>
    5d04:	83 37       	cpi	r24, 0x73	; 115
    5d06:	09 f4       	brne	.+2      	; 0x5d0a <enjoyTheSilence()+0x120>
    5d08:	a5 c0       	rjmp	.+330    	; 0x5e54 <enjoyTheSilence()+0x26a>
    5d0a:	88 37       	cpi	r24, 0x78	; 120
    5d0c:	09 f4       	brne	.+2      	; 0x5d10 <enjoyTheSilence()+0x126>
    5d0e:	a5 c0       	rjmp	.+330    	; 0x5e5a <enjoyTheSilence()+0x270>
    5d10:	8e 36       	cpi	r24, 0x6E	; 110
    5d12:	09 f0       	breq	.+2      	; 0x5d16 <enjoyTheSilence()+0x12c>
    5d14:	8b cf       	rjmp	.-234    	; 0x5c2c <enjoyTheSilence()+0x42>
    5d16:	43 e7       	ldi	r20, 0x73	; 115
    5d18:	67 c0       	rjmp	.+206    	; 0x5de8 <enjoyTheSilence()+0x1fe>
    5d1a:	87 38       	cpi	r24, 0x87	; 135
    5d1c:	09 f4       	brne	.+2      	; 0x5d20 <enjoyTheSilence()+0x136>
    5d1e:	a3 c0       	rjmp	.+326    	; 0x5e66 <enjoyTheSilence()+0x27c>
    5d20:	88 3c       	cpi	r24, 0xC8	; 200
    5d22:	09 f4       	brne	.+2      	; 0x5d26 <enjoyTheSilence()+0x13c>
    5d24:	a4 c0       	rjmp	.+328    	; 0x5e6e <enjoyTheSilence()+0x284>
    5d26:	82 38       	cpi	r24, 0x82	; 130
    5d28:	09 f0       	breq	.+2      	; 0x5d2c <enjoyTheSilence()+0x142>
    5d2a:	80 cf       	rjmp	.-256    	; 0x5c2c <enjoyTheSilence()+0x42>
    5d2c:	47 e8       	ldi	r20, 0x87	; 135
    5d2e:	66 e0       	ldi	r22, 0x06	; 6
    5d30:	8e c0       	rjmp	.+284    	; 0x5e4e <enjoyTheSilence()+0x264>
    5d32:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    5d36:	7c 01       	movw	r14, r24
    5d38:	60 e0       	ldi	r22, 0x00	; 0
    5d3a:	73 e0       	ldi	r23, 0x03	; 3
    5d3c:	ce 01       	movw	r24, r28
    5d3e:	01 96       	adiw	r24, 0x01	; 1
    5d40:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    5d44:	05 e0       	ldi	r16, 0x05	; 5
    5d46:	97 01       	movw	r18, r14
    5d48:	4a e5       	ldi	r20, 0x5A	; 90
    5d4a:	50 e0       	ldi	r21, 0x00	; 0
    5d4c:	6c ef       	ldi	r22, 0xFC	; 252
    5d4e:	73 e5       	ldi	r23, 0x53	; 83
    5d50:	ce 01       	movw	r24, r28
    5d52:	01 96       	adiw	r24, 0x01	; 1
    5d54:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    5d58:	ce 01       	movw	r24, r28
    5d5a:	01 96       	adiw	r24, 0x01	; 1
    5d5c:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    5d60:	65 cf       	rjmp	.-310    	; 0x5c2c <enjoyTheSilence()+0x42>
    5d62:	4a e0       	ldi	r20, 0x0A	; 10
    5d64:	6b e0       	ldi	r22, 0x0B	; 11
    5d66:	8b e9       	ldi	r24, 0x9B	; 155
    5d68:	9d e2       	ldi	r25, 0x2D	; 45
    5d6a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    5d6e:	5e cf       	rjmp	.-324    	; 0x5c2c <enjoyTheSilence()+0x42>
    5d70:	4f e0       	ldi	r20, 0x0F	; 15
    5d72:	63 e0       	ldi	r22, 0x03	; 3
    5d74:	84 e3       	ldi	r24, 0x34	; 52
    5d76:	91 e2       	ldi	r25, 0x21	; 33
    5d78:	f8 cf       	rjmp	.-16     	; 0x5d6a <enjoyTheSilence()+0x180>
    5d7a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5d7e:	7c 01       	movw	r14, r24
    5d80:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5d84:	8c 01       	movw	r16, r24
    5d86:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5d8a:	9c 01       	movw	r18, r24
    5d8c:	42 e3       	ldi	r20, 0x32	; 50
    5d8e:	50 e0       	ldi	r21, 0x00	; 0
    5d90:	69 e1       	ldi	r22, 0x19	; 25
    5d92:	87 e2       	ldi	r24, 0x27	; 39
    5d94:	9f e1       	ldi	r25, 0x1F	; 31
    5d96:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    5d9a:	48 cf       	rjmp	.-368    	; 0x5c2c <enjoyTheSilence()+0x42>
    5d9c:	6e e1       	ldi	r22, 0x1E	; 30
    5d9e:	8d e0       	ldi	r24, 0x0D	; 13
    5da0:	92 e0       	ldi	r25, 0x02	; 2
    5da2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    5da6:	42 cf       	rjmp	.-380    	; 0x5c2c <enjoyTheSilence()+0x42>
    5da8:	63 e2       	ldi	r22, 0x23	; 35
    5daa:	8d e4       	ldi	r24, 0x4D	; 77
    5dac:	98 e0       	ldi	r25, 0x08	; 8
    5dae:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    5db2:	3c cf       	rjmp	.-392    	; 0x5c2c <enjoyTheSilence()+0x42>
    5db4:	4d e2       	ldi	r20, 0x2D	; 45
    5db6:	62 e0       	ldi	r22, 0x02	; 2
    5db8:	dd cf       	rjmp	.-70     	; 0x5d74 <enjoyTheSilence()+0x18a>
    5dba:	42 e3       	ldi	r20, 0x32	; 50
    5dbc:	da cf       	rjmp	.-76     	; 0x5d72 <enjoyTheSilence()+0x188>
    5dbe:	4a e1       	ldi	r20, 0x1A	; 26
    5dc0:	54 e0       	ldi	r21, 0x04	; 4
    5dc2:	67 e3       	ldi	r22, 0x37	; 55
    5dc4:	87 cf       	rjmp	.-242    	; 0x5cd4 <enjoyTheSilence()+0xea>
    5dc6:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    5dca:	7c 01       	movw	r14, r24
    5dcc:	62 e2       	ldi	r22, 0x22	; 34
    5dce:	73 e0       	ldi	r23, 0x03	; 3
    5dd0:	ce 01       	movw	r24, r28
    5dd2:	01 96       	adiw	r24, 0x01	; 1
    5dd4:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    5dd8:	01 e4       	ldi	r16, 0x41	; 65
    5dda:	97 01       	movw	r18, r14
    5ddc:	49 e1       	ldi	r20, 0x19	; 25
    5dde:	50 e0       	ldi	r21, 0x00	; 0
    5de0:	6d e4       	ldi	r22, 0x4D	; 77
    5de2:	78 e0       	ldi	r23, 0x08	; 8
    5de4:	b5 cf       	rjmp	.-150    	; 0x5d50 <enjoyTheSilence()+0x166>
    5de6:	46 e4       	ldi	r20, 0x46	; 70
    5de8:	62 e0       	ldi	r22, 0x02	; 2
    5dea:	31 c0       	rjmp	.+98     	; 0x5e4e <enjoyTheSilence()+0x264>
    5dec:	4b e4       	ldi	r20, 0x4B	; 75
    5dee:	64 e0       	ldi	r22, 0x04	; 4
    5df0:	8b e1       	ldi	r24, 0x1B	; 27
    5df2:	91 e2       	ldi	r25, 0x21	; 33
    5df4:	44 cf       	rjmp	.-376    	; 0x5c7e <enjoyTheSilence()+0x94>
    5df6:	40 e5       	ldi	r20, 0x50	; 80
    5df8:	69 e0       	ldi	r22, 0x09	; 9
    5dfa:	88 e6       	ldi	r24, 0x68	; 104
    5dfc:	92 e4       	ldi	r25, 0x42	; 66
    5dfe:	b5 cf       	rjmp	.-150    	; 0x5d6a <enjoyTheSilence()+0x180>
    5e00:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5e04:	7c 01       	movw	r14, r24
    5e06:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5e0a:	8c 01       	movw	r16, r24
    5e0c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5e10:	9c 01       	movw	r18, r24
    5e12:	42 e3       	ldi	r20, 0x32	; 50
    5e14:	50 e0       	ldi	r21, 0x00	; 0
    5e16:	6a e5       	ldi	r22, 0x5A	; 90
    5e18:	49 cf       	rjmp	.-366    	; 0x5cac <enjoyTheSilence()+0xc2>
    5e1a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5e1e:	7c 01       	movw	r14, r24
    5e20:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5e24:	8c 01       	movw	r16, r24
    5e26:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5e2a:	9c 01       	movw	r18, r24
    5e2c:	42 e3       	ldi	r20, 0x32	; 50
    5e2e:	50 e0       	ldi	r21, 0x00	; 0
    5e30:	64 e6       	ldi	r22, 0x64	; 100
    5e32:	3c cf       	rjmp	.-392    	; 0x5cac <enjoyTheSilence()+0xc2>
    5e34:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    5e38:	7c 01       	movw	r14, r24
    5e3a:	62 e2       	ldi	r22, 0x22	; 34
    5e3c:	73 e0       	ldi	r23, 0x03	; 3
    5e3e:	ce 01       	movw	r24, r28
    5e40:	01 96       	adiw	r24, 0x01	; 1
    5e42:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    5e46:	09 e6       	ldi	r16, 0x69	; 105
    5e48:	c8 cf       	rjmp	.-112    	; 0x5dda <enjoyTheSilence()+0x1f0>
    5e4a:	4e e6       	ldi	r20, 0x6E	; 110
    5e4c:	61 e0       	ldi	r22, 0x01	; 1
    5e4e:	84 e3       	ldi	r24, 0x34	; 52
    5e50:	91 e2       	ldi	r25, 0x21	; 33
    5e52:	15 cf       	rjmp	.-470    	; 0x5c7e <enjoyTheSilence()+0x94>
    5e54:	48 e7       	ldi	r20, 0x78	; 120
    5e56:	63 e0       	ldi	r22, 0x03	; 3
    5e58:	fa cf       	rjmp	.-12     	; 0x5e4e <enjoyTheSilence()+0x264>
    5e5a:	4d e7       	ldi	r20, 0x7D	; 125
    5e5c:	64 e0       	ldi	r22, 0x04	; 4
    5e5e:	f7 cf       	rjmp	.-18     	; 0x5e4e <enjoyTheSilence()+0x264>
    5e60:	42 e8       	ldi	r20, 0x82	; 130
    5e62:	65 e0       	ldi	r22, 0x05	; 5
    5e64:	c5 cf       	rjmp	.-118    	; 0x5df0 <enjoyTheSilence()+0x206>
    5e66:	68 ec       	ldi	r22, 0xC8	; 200
    5e68:	80 e1       	ldi	r24, 0x10	; 16
    5e6a:	97 e2       	ldi	r25, 0x27	; 39
    5e6c:	9a cf       	rjmp	.-204    	; 0x5da2 <enjoyTheSilence()+0x1b8>
    5e6e:	60 e0       	ldi	r22, 0x00	; 0
    5e70:	8a ed       	ldi	r24, 0xDA	; 218
    5e72:	90 e1       	ldi	r25, 0x10	; 16
    5e74:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    5e78:	80 e0       	ldi	r24, 0x00	; 0
    5e7a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    5e7e:	d6 ce       	rjmp	.-596    	; 0x5c2c <enjoyTheSilence()+0x42>

00005e80 <sober()>:
    5e80:	ef 92       	push	r14
    5e82:	ff 92       	push	r15
    5e84:	0f 93       	push	r16
    5e86:	1f 93       	push	r17
    5e88:	cf 93       	push	r28
    5e8a:	df 93       	push	r29
    5e8c:	00 d0       	rcall	.+0      	; 0x5e8e <sober()+0xe>
    5e8e:	00 d0       	rcall	.+0      	; 0x5e90 <sober()+0x10>
    5e90:	00 d0       	rcall	.+0      	; 0x5e92 <sober()+0x12>
    5e92:	1f 92       	push	r1
    5e94:	cd b7       	in	r28, 0x3d	; 61
    5e96:	de b7       	in	r29, 0x3e	; 62
    5e98:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    5e9c:	86 34       	cpi	r24, 0x46	; 70
    5e9e:	09 f4       	brne	.+2      	; 0x5ea2 <sober()+0x22>
    5ea0:	f3 c0       	rjmp	.+486    	; 0x6088 <sober()+0x208>
    5ea2:	08 f0       	brcs	.+2      	; 0x5ea6 <sober()+0x26>
    5ea4:	55 c0       	rjmp	.+170    	; 0x5f50 <sober()+0xd0>
    5ea6:	8e 31       	cpi	r24, 0x1E	; 30
    5ea8:	09 f4       	brne	.+2      	; 0x5eac <sober()+0x2c>
    5eaa:	c9 c0       	rjmp	.+402    	; 0x603e <sober()+0x1be>
    5eac:	38 f5       	brcc	.+78     	; 0x5efc <sober()+0x7c>
    5eae:	8a 30       	cpi	r24, 0x0A	; 10
    5eb0:	09 f4       	brne	.+2      	; 0x5eb4 <sober()+0x34>
    5eb2:	a9 c0       	rjmp	.+338    	; 0x6006 <sober()+0x186>
    5eb4:	98 f4       	brcc	.+38     	; 0x5edc <sober()+0x5c>
    5eb6:	88 23       	and	r24, r24
    5eb8:	09 f4       	brne	.+2      	; 0x5ebc <sober()+0x3c>
    5eba:	86 c0       	rjmp	.+268    	; 0x5fc8 <sober()+0x148>
    5ebc:	85 30       	cpi	r24, 0x05	; 5
    5ebe:	09 f4       	brne	.+2      	; 0x5ec2 <sober()+0x42>
    5ec0:	9b c0       	rjmp	.+310    	; 0x5ff8 <sober()+0x178>
    5ec2:	27 96       	adiw	r28, 0x07	; 7
    5ec4:	0f b6       	in	r0, 0x3f	; 63
    5ec6:	f8 94       	cli
    5ec8:	de bf       	out	0x3e, r29	; 62
    5eca:	0f be       	out	0x3f, r0	; 63
    5ecc:	cd bf       	out	0x3d, r28	; 61
    5ece:	df 91       	pop	r29
    5ed0:	cf 91       	pop	r28
    5ed2:	1f 91       	pop	r17
    5ed4:	0f 91       	pop	r16
    5ed6:	ff 90       	pop	r15
    5ed8:	ef 90       	pop	r14
    5eda:	08 95       	ret
    5edc:	84 31       	cpi	r24, 0x14	; 20
    5ede:	09 f4       	brne	.+2      	; 0x5ee2 <sober()+0x62>
    5ee0:	97 c0       	rjmp	.+302    	; 0x6010 <sober()+0x190>
    5ee2:	89 31       	cpi	r24, 0x19	; 25
    5ee4:	09 f4       	brne	.+2      	; 0x5ee8 <sober()+0x68>
    5ee6:	a5 c0       	rjmp	.+330    	; 0x6032 <sober()+0x1b2>
    5ee8:	8f 30       	cpi	r24, 0x0F	; 15
    5eea:	59 f7       	brne	.-42     	; 0x5ec2 <sober()+0x42>
    5eec:	4a e1       	ldi	r20, 0x1A	; 26
    5eee:	54 e0       	ldi	r21, 0x04	; 4
    5ef0:	64 e1       	ldi	r22, 0x14	; 20
    5ef2:	80 e3       	ldi	r24, 0x30	; 48
    5ef4:	91 e2       	ldi	r25, 0x21	; 33
    5ef6:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    5efa:	e3 cf       	rjmp	.-58     	; 0x5ec2 <sober()+0x42>
    5efc:	82 33       	cpi	r24, 0x32	; 50
    5efe:	09 f4       	brne	.+2      	; 0x5f02 <sober()+0x82>
    5f00:	ac c0       	rjmp	.+344    	; 0x605a <sober()+0x1da>
    5f02:	78 f4       	brcc	.+30     	; 0x5f22 <sober()+0xa2>
    5f04:	88 32       	cpi	r24, 0x28	; 40
    5f06:	09 f4       	brne	.+2      	; 0x5f0a <sober()+0x8a>
    5f08:	a0 c0       	rjmp	.+320    	; 0x604a <sober()+0x1ca>
    5f0a:	8d 32       	cpi	r24, 0x2D	; 45
    5f0c:	09 f4       	brne	.+2      	; 0x5f10 <sober()+0x90>
    5f0e:	a2 c0       	rjmp	.+324    	; 0x6054 <sober()+0x1d4>
    5f10:	83 32       	cpi	r24, 0x23	; 35
    5f12:	b9 f6       	brne	.-82     	; 0x5ec2 <sober()+0x42>
    5f14:	48 e2       	ldi	r20, 0x28	; 40
    5f16:	65 e0       	ldi	r22, 0x05	; 5
    5f18:	88 e6       	ldi	r24, 0x68	; 104
    5f1a:	92 e4       	ldi	r25, 0x42	; 66
    5f1c:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    5f20:	d0 cf       	rjmp	.-96     	; 0x5ec2 <sober()+0x42>
    5f22:	8c 33       	cpi	r24, 0x3C	; 60
    5f24:	09 f4       	brne	.+2      	; 0x5f28 <sober()+0xa8>
    5f26:	9d c0       	rjmp	.+314    	; 0x6062 <sober()+0x1e2>
    5f28:	81 34       	cpi	r24, 0x41	; 65
    5f2a:	09 f4       	brne	.+2      	; 0x5f2e <sober()+0xae>
    5f2c:	aa c0       	rjmp	.+340    	; 0x6082 <sober()+0x202>
    5f2e:	87 33       	cpi	r24, 0x37	; 55
    5f30:	41 f6       	brne	.-112    	; 0x5ec2 <sober()+0x42>
    5f32:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5f36:	7c 01       	movw	r14, r24
    5f38:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5f3c:	8c 01       	movw	r16, r24
    5f3e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    5f42:	9c 01       	movw	r18, r24
    5f44:	42 e3       	ldi	r20, 0x32	; 50
    5f46:	50 e0       	ldi	r21, 0x00	; 0
    5f48:	6c e3       	ldi	r22, 0x3C	; 60
    5f4a:	80 e3       	ldi	r24, 0x30	; 48
    5f4c:	91 e2       	ldi	r25, 0x21	; 33
    5f4e:	6e c0       	rjmp	.+220    	; 0x602c <sober()+0x1ac>
    5f50:	89 36       	cpi	r24, 0x69	; 105
    5f52:	09 f4       	brne	.+2      	; 0x5f56 <sober()+0xd6>
    5f54:	c8 c0       	rjmp	.+400    	; 0x60e6 <sober()+0x266>
    5f56:	e8 f4       	brcc	.+58     	; 0x5f92 <sober()+0x112>
    5f58:	85 35       	cpi	r24, 0x55	; 85
    5f5a:	09 f4       	brne	.+2      	; 0x5f5e <sober()+0xde>
    5f5c:	9d c0       	rjmp	.+314    	; 0x6098 <sober()+0x218>
    5f5e:	60 f4       	brcc	.+24     	; 0x5f78 <sober()+0xf8>
    5f60:	8b 34       	cpi	r24, 0x4B	; 75
    5f62:	09 f4       	brne	.+2      	; 0x5f66 <sober()+0xe6>
    5f64:	94 c0       	rjmp	.+296    	; 0x608e <sober()+0x20e>
    5f66:	4a e1       	ldi	r20, 0x1A	; 26
    5f68:	54 e0       	ldi	r21, 0x04	; 4
    5f6a:	65 e5       	ldi	r22, 0x55	; 85
    5f6c:	80 35       	cpi	r24, 0x50	; 80
    5f6e:	09 f0       	breq	.+2      	; 0x5f72 <sober()+0xf2>
    5f70:	a8 cf       	rjmp	.-176    	; 0x5ec2 <sober()+0x42>
    5f72:	84 e3       	ldi	r24, 0x34	; 52
    5f74:	91 e2       	ldi	r25, 0x21	; 33
    5f76:	bf cf       	rjmp	.-130    	; 0x5ef6 <sober()+0x76>
    5f78:	8f 35       	cpi	r24, 0x5F	; 95
    5f7a:	09 f4       	brne	.+2      	; 0x5f7e <sober()+0xfe>
    5f7c:	9c c0       	rjmp	.+312    	; 0x60b6 <sober()+0x236>
    5f7e:	84 36       	cpi	r24, 0x64	; 100
    5f80:	09 f4       	brne	.+2      	; 0x5f84 <sober()+0x104>
    5f82:	a6 c0       	rjmp	.+332    	; 0x60d0 <sober()+0x250>
    5f84:	8a 35       	cpi	r24, 0x5A	; 90
    5f86:	09 f0       	breq	.+2      	; 0x5f8a <sober()+0x10a>
    5f88:	9c cf       	rjmp	.-200    	; 0x5ec2 <sober()+0x42>
    5f8a:	4a e1       	ldi	r20, 0x1A	; 26
    5f8c:	54 e0       	ldi	r21, 0x04	; 4
    5f8e:	6f e5       	ldi	r22, 0x5F	; 95
    5f90:	f0 cf       	rjmp	.-32     	; 0x5f72 <sober()+0xf2>
    5f92:	8d 37       	cpi	r24, 0x7D	; 125
    5f94:	09 f4       	brne	.+2      	; 0x5f98 <sober()+0x118>
    5f96:	b1 c0       	rjmp	.+354    	; 0x60fa <sober()+0x27a>
    5f98:	58 f4       	brcc	.+22     	; 0x5fb0 <sober()+0x130>
    5f9a:	83 37       	cpi	r24, 0x73	; 115
    5f9c:	09 f4       	brne	.+2      	; 0x5fa0 <sober()+0x120>
    5f9e:	a8 c0       	rjmp	.+336    	; 0x60f0 <sober()+0x270>
    5fa0:	88 37       	cpi	r24, 0x78	; 120
    5fa2:	09 f4       	brne	.+2      	; 0x5fa6 <sober()+0x126>
    5fa4:	a8 c0       	rjmp	.+336    	; 0x60f6 <sober()+0x276>
    5fa6:	8e 36       	cpi	r24, 0x6E	; 110
    5fa8:	09 f0       	breq	.+2      	; 0x5fac <sober()+0x12c>
    5faa:	8b cf       	rjmp	.-234    	; 0x5ec2 <sober()+0x42>
    5fac:	43 e7       	ldi	r20, 0x73	; 115
    5fae:	6a c0       	rjmp	.+212    	; 0x6084 <sober()+0x204>
    5fb0:	87 38       	cpi	r24, 0x87	; 135
    5fb2:	09 f4       	brne	.+2      	; 0x5fb6 <sober()+0x136>
    5fb4:	a5 c0       	rjmp	.+330    	; 0x6100 <sober()+0x280>
    5fb6:	88 3c       	cpi	r24, 0xC8	; 200
    5fb8:	09 f4       	brne	.+2      	; 0x5fbc <sober()+0x13c>
    5fba:	a6 c0       	rjmp	.+332    	; 0x6108 <sober()+0x288>
    5fbc:	82 38       	cpi	r24, 0x82	; 130
    5fbe:	09 f0       	breq	.+2      	; 0x5fc2 <sober()+0x142>
    5fc0:	80 cf       	rjmp	.-256    	; 0x5ec2 <sober()+0x42>
    5fc2:	47 e8       	ldi	r20, 0x87	; 135
    5fc4:	66 e0       	ldi	r22, 0x06	; 6
    5fc6:	91 c0       	rjmp	.+290    	; 0x60ea <sober()+0x26a>
    5fc8:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    5fcc:	7c 01       	movw	r14, r24
    5fce:	6d e2       	ldi	r22, 0x2D	; 45
    5fd0:	73 e0       	ldi	r23, 0x03	; 3
    5fd2:	ce 01       	movw	r24, r28
    5fd4:	01 96       	adiw	r24, 0x01	; 1
    5fd6:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    5fda:	05 e0       	ldi	r16, 0x05	; 5
    5fdc:	97 01       	movw	r18, r14
    5fde:	4a e5       	ldi	r20, 0x5A	; 90
    5fe0:	50 e0       	ldi	r21, 0x00	; 0
    5fe2:	60 e0       	ldi	r22, 0x00	; 0
    5fe4:	74 e5       	ldi	r23, 0x54	; 84
    5fe6:	ce 01       	movw	r24, r28
    5fe8:	01 96       	adiw	r24, 0x01	; 1
    5fea:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    5fee:	ce 01       	movw	r24, r28
    5ff0:	01 96       	adiw	r24, 0x01	; 1
    5ff2:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    5ff6:	65 cf       	rjmp	.-310    	; 0x5ec2 <sober()+0x42>
    5ff8:	4a e0       	ldi	r20, 0x0A	; 10
    5ffa:	6b e0       	ldi	r22, 0x0B	; 11
    5ffc:	81 ea       	ldi	r24, 0xA1	; 161
    5ffe:	9d e2       	ldi	r25, 0x2D	; 45
    6000:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    6004:	5e cf       	rjmp	.-324    	; 0x5ec2 <sober()+0x42>
    6006:	4f e0       	ldi	r20, 0x0F	; 15
    6008:	63 e0       	ldi	r22, 0x03	; 3
    600a:	80 e3       	ldi	r24, 0x30	; 48
    600c:	91 e2       	ldi	r25, 0x21	; 33
    600e:	f8 cf       	rjmp	.-16     	; 0x6000 <sober()+0x180>
    6010:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6014:	7c 01       	movw	r14, r24
    6016:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    601a:	8c 01       	movw	r16, r24
    601c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6020:	9c 01       	movw	r18, r24
    6022:	42 e3       	ldi	r20, 0x32	; 50
    6024:	50 e0       	ldi	r21, 0x00	; 0
    6026:	69 e1       	ldi	r22, 0x19	; 25
    6028:	8e e0       	ldi	r24, 0x0E	; 14
    602a:	9f e1       	ldi	r25, 0x1F	; 31
    602c:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    6030:	48 cf       	rjmp	.-368    	; 0x5ec2 <sober()+0x42>
    6032:	6e e1       	ldi	r22, 0x1E	; 30
    6034:	8d e0       	ldi	r24, 0x0D	; 13
    6036:	92 e0       	ldi	r25, 0x02	; 2
    6038:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    603c:	42 cf       	rjmp	.-380    	; 0x5ec2 <sober()+0x42>
    603e:	63 e2       	ldi	r22, 0x23	; 35
    6040:	8d e4       	ldi	r24, 0x4D	; 77
    6042:	98 e0       	ldi	r25, 0x08	; 8
    6044:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    6048:	3c cf       	rjmp	.-392    	; 0x5ec2 <sober()+0x42>
    604a:	4d e2       	ldi	r20, 0x2D	; 45
    604c:	62 e0       	ldi	r22, 0x02	; 2
    604e:	84 e3       	ldi	r24, 0x34	; 52
    6050:	91 e2       	ldi	r25, 0x21	; 33
    6052:	d6 cf       	rjmp	.-84     	; 0x6000 <sober()+0x180>
    6054:	42 e3       	ldi	r20, 0x32	; 50
    6056:	63 e0       	ldi	r22, 0x03	; 3
    6058:	fa cf       	rjmp	.-12     	; 0x604e <sober()+0x1ce>
    605a:	4a e1       	ldi	r20, 0x1A	; 26
    605c:	54 e0       	ldi	r21, 0x04	; 4
    605e:	67 e3       	ldi	r22, 0x37	; 55
    6060:	48 cf       	rjmp	.-368    	; 0x5ef2 <sober()+0x72>
    6062:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    6066:	7c 01       	movw	r14, r24
    6068:	62 e2       	ldi	r22, 0x22	; 34
    606a:	73 e0       	ldi	r23, 0x03	; 3
    606c:	ce 01       	movw	r24, r28
    606e:	01 96       	adiw	r24, 0x01	; 1
    6070:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6074:	01 e4       	ldi	r16, 0x41	; 65
    6076:	97 01       	movw	r18, r14
    6078:	49 e1       	ldi	r20, 0x19	; 25
    607a:	50 e0       	ldi	r21, 0x00	; 0
    607c:	6d e4       	ldi	r22, 0x4D	; 77
    607e:	78 e0       	ldi	r23, 0x08	; 8
    6080:	b2 cf       	rjmp	.-156    	; 0x5fe6 <sober()+0x166>
    6082:	46 e4       	ldi	r20, 0x46	; 70
    6084:	62 e0       	ldi	r22, 0x02	; 2
    6086:	31 c0       	rjmp	.+98     	; 0x60ea <sober()+0x26a>
    6088:	4b e4       	ldi	r20, 0x4B	; 75
    608a:	64 e0       	ldi	r22, 0x04	; 4
    608c:	2e c0       	rjmp	.+92     	; 0x60ea <sober()+0x26a>
    608e:	40 e5       	ldi	r20, 0x50	; 80
    6090:	69 e0       	ldi	r22, 0x09	; 9
    6092:	8f e5       	ldi	r24, 0x5F	; 95
    6094:	92 e4       	ldi	r25, 0x42	; 66
    6096:	b4 cf       	rjmp	.-152    	; 0x6000 <sober()+0x180>
    6098:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    609c:	7c 01       	movw	r14, r24
    609e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    60a2:	8c 01       	movw	r16, r24
    60a4:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    60a8:	9c 01       	movw	r18, r24
    60aa:	42 e3       	ldi	r20, 0x32	; 50
    60ac:	50 e0       	ldi	r21, 0x00	; 0
    60ae:	6a e5       	ldi	r22, 0x5A	; 90
    60b0:	84 e3       	ldi	r24, 0x34	; 52
    60b2:	91 e2       	ldi	r25, 0x21	; 33
    60b4:	bb cf       	rjmp	.-138    	; 0x602c <sober()+0x1ac>
    60b6:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    60ba:	7c 01       	movw	r14, r24
    60bc:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    60c0:	8c 01       	movw	r16, r24
    60c2:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    60c6:	9c 01       	movw	r18, r24
    60c8:	42 e3       	ldi	r20, 0x32	; 50
    60ca:	50 e0       	ldi	r21, 0x00	; 0
    60cc:	64 e6       	ldi	r22, 0x64	; 100
    60ce:	f0 cf       	rjmp	.-32     	; 0x60b0 <sober()+0x230>
    60d0:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    60d4:	7c 01       	movw	r14, r24
    60d6:	62 e2       	ldi	r22, 0x22	; 34
    60d8:	73 e0       	ldi	r23, 0x03	; 3
    60da:	ce 01       	movw	r24, r28
    60dc:	01 96       	adiw	r24, 0x01	; 1
    60de:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    60e2:	09 e6       	ldi	r16, 0x69	; 105
    60e4:	c8 cf       	rjmp	.-112    	; 0x6076 <sober()+0x1f6>
    60e6:	4e e6       	ldi	r20, 0x6E	; 110
    60e8:	61 e0       	ldi	r22, 0x01	; 1
    60ea:	8a e2       	ldi	r24, 0x2A	; 42
    60ec:	91 e2       	ldi	r25, 0x21	; 33
    60ee:	16 cf       	rjmp	.-468    	; 0x5f1c <sober()+0x9c>
    60f0:	48 e7       	ldi	r20, 0x78	; 120
    60f2:	63 e0       	ldi	r22, 0x03	; 3
    60f4:	fa cf       	rjmp	.-12     	; 0x60ea <sober()+0x26a>
    60f6:	4d e7       	ldi	r20, 0x7D	; 125
    60f8:	c8 cf       	rjmp	.-112    	; 0x608a <sober()+0x20a>
    60fa:	42 e8       	ldi	r20, 0x82	; 130
    60fc:	65 e0       	ldi	r22, 0x05	; 5
    60fe:	f5 cf       	rjmp	.-22     	; 0x60ea <sober()+0x26a>
    6100:	68 ec       	ldi	r22, 0xC8	; 200
    6102:	80 e5       	ldi	r24, 0x50	; 80
    6104:	93 ec       	ldi	r25, 0xC3	; 195
    6106:	98 cf       	rjmp	.-208    	; 0x6038 <sober()+0x1b8>
    6108:	60 e0       	ldi	r22, 0x00	; 0
    610a:	8a ed       	ldi	r24, 0xDA	; 218
    610c:	90 e1       	ldi	r25, 0x10	; 16
    610e:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    6112:	80 e0       	ldi	r24, 0x00	; 0
    6114:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    6118:	d4 ce       	rjmp	.-600    	; 0x5ec2 <sober()+0x42>

0000611a <prisoner()>:
    611a:	ef 92       	push	r14
    611c:	ff 92       	push	r15
    611e:	0f 93       	push	r16
    6120:	1f 93       	push	r17
    6122:	cf 93       	push	r28
    6124:	df 93       	push	r29
    6126:	00 d0       	rcall	.+0      	; 0x6128 <prisoner()+0xe>
    6128:	00 d0       	rcall	.+0      	; 0x612a <prisoner()+0x10>
    612a:	00 d0       	rcall	.+0      	; 0x612c <prisoner()+0x12>
    612c:	1f 92       	push	r1
    612e:	cd b7       	in	r28, 0x3d	; 61
    6130:	de b7       	in	r29, 0x3e	; 62
    6132:	80 91 c5 0a 	lds	r24, 0x0AC5	; 0x800ac5 <prog>
    6136:	86 34       	cpi	r24, 0x46	; 70
    6138:	09 f4       	brne	.+2      	; 0x613c <prisoner()+0x22>
    613a:	f3 c0       	rjmp	.+486    	; 0x6322 <prisoner()+0x208>
    613c:	08 f0       	brcs	.+2      	; 0x6140 <prisoner()+0x26>
    613e:	55 c0       	rjmp	.+170    	; 0x61ea <prisoner()+0xd0>
    6140:	8e 31       	cpi	r24, 0x1E	; 30
    6142:	09 f4       	brne	.+2      	; 0x6146 <prisoner()+0x2c>
    6144:	c9 c0       	rjmp	.+402    	; 0x62d8 <prisoner()+0x1be>
    6146:	38 f5       	brcc	.+78     	; 0x6196 <prisoner()+0x7c>
    6148:	8a 30       	cpi	r24, 0x0A	; 10
    614a:	09 f4       	brne	.+2      	; 0x614e <prisoner()+0x34>
    614c:	a9 c0       	rjmp	.+338    	; 0x62a0 <prisoner()+0x186>
    614e:	98 f4       	brcc	.+38     	; 0x6176 <prisoner()+0x5c>
    6150:	88 23       	and	r24, r24
    6152:	09 f4       	brne	.+2      	; 0x6156 <prisoner()+0x3c>
    6154:	86 c0       	rjmp	.+268    	; 0x6262 <prisoner()+0x148>
    6156:	85 30       	cpi	r24, 0x05	; 5
    6158:	09 f4       	brne	.+2      	; 0x615c <prisoner()+0x42>
    615a:	9b c0       	rjmp	.+310    	; 0x6292 <prisoner()+0x178>
    615c:	27 96       	adiw	r28, 0x07	; 7
    615e:	0f b6       	in	r0, 0x3f	; 63
    6160:	f8 94       	cli
    6162:	de bf       	out	0x3e, r29	; 62
    6164:	0f be       	out	0x3f, r0	; 63
    6166:	cd bf       	out	0x3d, r28	; 61
    6168:	df 91       	pop	r29
    616a:	cf 91       	pop	r28
    616c:	1f 91       	pop	r17
    616e:	0f 91       	pop	r16
    6170:	ff 90       	pop	r15
    6172:	ef 90       	pop	r14
    6174:	08 95       	ret
    6176:	84 31       	cpi	r24, 0x14	; 20
    6178:	09 f4       	brne	.+2      	; 0x617c <prisoner()+0x62>
    617a:	97 c0       	rjmp	.+302    	; 0x62aa <prisoner()+0x190>
    617c:	89 31       	cpi	r24, 0x19	; 25
    617e:	09 f4       	brne	.+2      	; 0x6182 <prisoner()+0x68>
    6180:	a5 c0       	rjmp	.+330    	; 0x62cc <prisoner()+0x1b2>
    6182:	8f 30       	cpi	r24, 0x0F	; 15
    6184:	59 f7       	brne	.-42     	; 0x615c <prisoner()+0x42>
    6186:	4a e1       	ldi	r20, 0x1A	; 26
    6188:	54 e0       	ldi	r21, 0x04	; 4
    618a:	64 e1       	ldi	r22, 0x14	; 20
    618c:	80 e3       	ldi	r24, 0x30	; 48
    618e:	91 e2       	ldi	r25, 0x21	; 33
    6190:	0e 94 38 0b 	call	0x1670	; 0x1670 <progFullColors(unsigned int, unsigned char, unsigned int)>
    6194:	e3 cf       	rjmp	.-58     	; 0x615c <prisoner()+0x42>
    6196:	82 33       	cpi	r24, 0x32	; 50
    6198:	09 f4       	brne	.+2      	; 0x619c <prisoner()+0x82>
    619a:	ac c0       	rjmp	.+344    	; 0x62f4 <prisoner()+0x1da>
    619c:	78 f4       	brcc	.+30     	; 0x61bc <prisoner()+0xa2>
    619e:	88 32       	cpi	r24, 0x28	; 40
    61a0:	09 f4       	brne	.+2      	; 0x61a4 <prisoner()+0x8a>
    61a2:	a0 c0       	rjmp	.+320    	; 0x62e4 <prisoner()+0x1ca>
    61a4:	8d 32       	cpi	r24, 0x2D	; 45
    61a6:	09 f4       	brne	.+2      	; 0x61aa <prisoner()+0x90>
    61a8:	a2 c0       	rjmp	.+324    	; 0x62ee <prisoner()+0x1d4>
    61aa:	83 32       	cpi	r24, 0x23	; 35
    61ac:	b9 f6       	brne	.-82     	; 0x615c <prisoner()+0x42>
    61ae:	48 e2       	ldi	r20, 0x28	; 40
    61b0:	65 e0       	ldi	r22, 0x05	; 5
    61b2:	88 e6       	ldi	r24, 0x68	; 104
    61b4:	92 e4       	ldi	r25, 0x42	; 66
    61b6:	0e 94 2c 0b 	call	0x1658	; 0x1658 <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    61ba:	d0 cf       	rjmp	.-96     	; 0x615c <prisoner()+0x42>
    61bc:	8c 33       	cpi	r24, 0x3C	; 60
    61be:	09 f4       	brne	.+2      	; 0x61c2 <prisoner()+0xa8>
    61c0:	9d c0       	rjmp	.+314    	; 0x62fc <prisoner()+0x1e2>
    61c2:	81 34       	cpi	r24, 0x41	; 65
    61c4:	09 f4       	brne	.+2      	; 0x61c8 <prisoner()+0xae>
    61c6:	aa c0       	rjmp	.+340    	; 0x631c <prisoner()+0x202>
    61c8:	87 33       	cpi	r24, 0x37	; 55
    61ca:	41 f6       	brne	.-112    	; 0x615c <prisoner()+0x42>
    61cc:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    61d0:	7c 01       	movw	r14, r24
    61d2:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    61d6:	8c 01       	movw	r16, r24
    61d8:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    61dc:	9c 01       	movw	r18, r24
    61de:	42 e3       	ldi	r20, 0x32	; 50
    61e0:	50 e0       	ldi	r21, 0x00	; 0
    61e2:	6c e3       	ldi	r22, 0x3C	; 60
    61e4:	80 e3       	ldi	r24, 0x30	; 48
    61e6:	91 e2       	ldi	r25, 0x21	; 33
    61e8:	6e c0       	rjmp	.+220    	; 0x62c6 <prisoner()+0x1ac>
    61ea:	89 36       	cpi	r24, 0x69	; 105
    61ec:	09 f4       	brne	.+2      	; 0x61f0 <prisoner()+0xd6>
    61ee:	c8 c0       	rjmp	.+400    	; 0x6380 <prisoner()+0x266>
    61f0:	e8 f4       	brcc	.+58     	; 0x622c <prisoner()+0x112>
    61f2:	85 35       	cpi	r24, 0x55	; 85
    61f4:	09 f4       	brne	.+2      	; 0x61f8 <prisoner()+0xde>
    61f6:	9d c0       	rjmp	.+314    	; 0x6332 <prisoner()+0x218>
    61f8:	60 f4       	brcc	.+24     	; 0x6212 <prisoner()+0xf8>
    61fa:	8b 34       	cpi	r24, 0x4B	; 75
    61fc:	09 f4       	brne	.+2      	; 0x6200 <prisoner()+0xe6>
    61fe:	94 c0       	rjmp	.+296    	; 0x6328 <prisoner()+0x20e>
    6200:	4a e1       	ldi	r20, 0x1A	; 26
    6202:	54 e0       	ldi	r21, 0x04	; 4
    6204:	65 e5       	ldi	r22, 0x55	; 85
    6206:	80 35       	cpi	r24, 0x50	; 80
    6208:	09 f0       	breq	.+2      	; 0x620c <prisoner()+0xf2>
    620a:	a8 cf       	rjmp	.-176    	; 0x615c <prisoner()+0x42>
    620c:	84 e3       	ldi	r24, 0x34	; 52
    620e:	91 e2       	ldi	r25, 0x21	; 33
    6210:	bf cf       	rjmp	.-130    	; 0x6190 <prisoner()+0x76>
    6212:	8f 35       	cpi	r24, 0x5F	; 95
    6214:	09 f4       	brne	.+2      	; 0x6218 <prisoner()+0xfe>
    6216:	9c c0       	rjmp	.+312    	; 0x6350 <prisoner()+0x236>
    6218:	84 36       	cpi	r24, 0x64	; 100
    621a:	09 f4       	brne	.+2      	; 0x621e <prisoner()+0x104>
    621c:	a6 c0       	rjmp	.+332    	; 0x636a <prisoner()+0x250>
    621e:	8a 35       	cpi	r24, 0x5A	; 90
    6220:	09 f0       	breq	.+2      	; 0x6224 <prisoner()+0x10a>
    6222:	9c cf       	rjmp	.-200    	; 0x615c <prisoner()+0x42>
    6224:	4a e1       	ldi	r20, 0x1A	; 26
    6226:	54 e0       	ldi	r21, 0x04	; 4
    6228:	6f e5       	ldi	r22, 0x5F	; 95
    622a:	f0 cf       	rjmp	.-32     	; 0x620c <prisoner()+0xf2>
    622c:	8d 37       	cpi	r24, 0x7D	; 125
    622e:	09 f4       	brne	.+2      	; 0x6232 <prisoner()+0x118>
    6230:	b1 c0       	rjmp	.+354    	; 0x6394 <prisoner()+0x27a>
    6232:	58 f4       	brcc	.+22     	; 0x624a <prisoner()+0x130>
    6234:	83 37       	cpi	r24, 0x73	; 115
    6236:	09 f4       	brne	.+2      	; 0x623a <prisoner()+0x120>
    6238:	a8 c0       	rjmp	.+336    	; 0x638a <prisoner()+0x270>
    623a:	88 37       	cpi	r24, 0x78	; 120
    623c:	09 f4       	brne	.+2      	; 0x6240 <prisoner()+0x126>
    623e:	a8 c0       	rjmp	.+336    	; 0x6390 <prisoner()+0x276>
    6240:	8e 36       	cpi	r24, 0x6E	; 110
    6242:	09 f0       	breq	.+2      	; 0x6246 <prisoner()+0x12c>
    6244:	8b cf       	rjmp	.-234    	; 0x615c <prisoner()+0x42>
    6246:	43 e7       	ldi	r20, 0x73	; 115
    6248:	6a c0       	rjmp	.+212    	; 0x631e <prisoner()+0x204>
    624a:	87 38       	cpi	r24, 0x87	; 135
    624c:	09 f4       	brne	.+2      	; 0x6250 <prisoner()+0x136>
    624e:	a5 c0       	rjmp	.+330    	; 0x639a <prisoner()+0x280>
    6250:	88 3c       	cpi	r24, 0xC8	; 200
    6252:	09 f4       	brne	.+2      	; 0x6256 <prisoner()+0x13c>
    6254:	a6 c0       	rjmp	.+332    	; 0x63a2 <prisoner()+0x288>
    6256:	82 38       	cpi	r24, 0x82	; 130
    6258:	09 f0       	breq	.+2      	; 0x625c <prisoner()+0x142>
    625a:	80 cf       	rjmp	.-256    	; 0x615c <prisoner()+0x42>
    625c:	47 e8       	ldi	r20, 0x87	; 135
    625e:	66 e0       	ldi	r22, 0x06	; 6
    6260:	91 c0       	rjmp	.+290    	; 0x6384 <prisoner()+0x26a>
    6262:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    6266:	7c 01       	movw	r14, r24
    6268:	6b e3       	ldi	r22, 0x3B	; 59
    626a:	73 e0       	ldi	r23, 0x03	; 3
    626c:	ce 01       	movw	r24, r28
    626e:	01 96       	adiw	r24, 0x01	; 1
    6270:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6274:	05 e0       	ldi	r16, 0x05	; 5
    6276:	97 01       	movw	r18, r14
    6278:	4a e5       	ldi	r20, 0x5A	; 90
    627a:	50 e0       	ldi	r21, 0x00	; 0
    627c:	60 e0       	ldi	r22, 0x00	; 0
    627e:	74 e5       	ldi	r23, 0x54	; 84
    6280:	ce 01       	movw	r24, r28
    6282:	01 96       	adiw	r24, 0x01	; 1
    6284:	0e 94 4b 13 	call	0x2696	; 0x2696 <progScrollText(String, unsigned int, int, int, unsigned char)>
    6288:	ce 01       	movw	r24, r28
    628a:	01 96       	adiw	r24, 0x01	; 1
    628c:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    6290:	65 cf       	rjmp	.-310    	; 0x615c <prisoner()+0x42>
    6292:	4a e0       	ldi	r20, 0x0A	; 10
    6294:	6b e0       	ldi	r22, 0x0B	; 11
    6296:	81 ea       	ldi	r24, 0xA1	; 161
    6298:	9d e2       	ldi	r25, 0x2D	; 45
    629a:	0e 94 83 16 	call	0x2d06	; 0x2d06 <progPalette(unsigned int, unsigned char, unsigned char)>
    629e:	5e cf       	rjmp	.-324    	; 0x615c <prisoner()+0x42>
    62a0:	4f e0       	ldi	r20, 0x0F	; 15
    62a2:	63 e0       	ldi	r22, 0x03	; 3
    62a4:	80 e3       	ldi	r24, 0x30	; 48
    62a6:	91 e2       	ldi	r25, 0x21	; 33
    62a8:	f8 cf       	rjmp	.-16     	; 0x629a <prisoner()+0x180>
    62aa:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    62ae:	7c 01       	movw	r14, r24
    62b0:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    62b4:	8c 01       	movw	r16, r24
    62b6:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    62ba:	9c 01       	movw	r18, r24
    62bc:	42 e3       	ldi	r20, 0x32	; 50
    62be:	50 e0       	ldi	r21, 0x00	; 0
    62c0:	69 e1       	ldi	r22, 0x19	; 25
    62c2:	8e e0       	ldi	r24, 0x0E	; 14
    62c4:	9f e1       	ldi	r25, 0x1F	; 31
    62c6:	0e 94 9d 0b 	call	0x173a	; 0x173a <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    62ca:	48 cf       	rjmp	.-368    	; 0x615c <prisoner()+0x42>
    62cc:	6e e1       	ldi	r22, 0x1E	; 30
    62ce:	8d e0       	ldi	r24, 0x0D	; 13
    62d0:	92 e0       	ldi	r25, 0x02	; 2
    62d2:	0e 94 25 0e 	call	0x1c4a	; 0x1c4a <progBlack(unsigned int, unsigned char)>
    62d6:	42 cf       	rjmp	.-380    	; 0x615c <prisoner()+0x42>
    62d8:	63 e2       	ldi	r22, 0x23	; 35
    62da:	8d e4       	ldi	r24, 0x4D	; 77
    62dc:	98 e0       	ldi	r25, 0x08	; 8
    62de:	0e 94 7d 0f 	call	0x1efa	; 0x1efa <progMovingLines(unsigned int, unsigned char)>
    62e2:	3c cf       	rjmp	.-392    	; 0x615c <prisoner()+0x42>
    62e4:	4d e2       	ldi	r20, 0x2D	; 45
    62e6:	62 e0       	ldi	r22, 0x02	; 2
    62e8:	84 e3       	ldi	r24, 0x34	; 52
    62ea:	91 e2       	ldi	r25, 0x21	; 33
    62ec:	d6 cf       	rjmp	.-84     	; 0x629a <prisoner()+0x180>
    62ee:	42 e3       	ldi	r20, 0x32	; 50
    62f0:	63 e0       	ldi	r22, 0x03	; 3
    62f2:	fa cf       	rjmp	.-12     	; 0x62e8 <prisoner()+0x1ce>
    62f4:	4a e1       	ldi	r20, 0x1A	; 26
    62f6:	54 e0       	ldi	r21, 0x04	; 4
    62f8:	67 e3       	ldi	r22, 0x37	; 55
    62fa:	48 cf       	rjmp	.-368    	; 0x618c <prisoner()+0x72>
    62fc:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    6300:	7c 01       	movw	r14, r24
    6302:	62 e2       	ldi	r22, 0x22	; 34
    6304:	73 e0       	ldi	r23, 0x03	; 3
    6306:	ce 01       	movw	r24, r28
    6308:	01 96       	adiw	r24, 0x01	; 1
    630a:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    630e:	01 e4       	ldi	r16, 0x41	; 65
    6310:	97 01       	movw	r18, r14
    6312:	49 e1       	ldi	r20, 0x19	; 25
    6314:	50 e0       	ldi	r21, 0x00	; 0
    6316:	6d e4       	ldi	r22, 0x4D	; 77
    6318:	78 e0       	ldi	r23, 0x08	; 8
    631a:	b2 cf       	rjmp	.-156    	; 0x6280 <prisoner()+0x166>
    631c:	46 e4       	ldi	r20, 0x46	; 70
    631e:	62 e0       	ldi	r22, 0x02	; 2
    6320:	31 c0       	rjmp	.+98     	; 0x6384 <prisoner()+0x26a>
    6322:	4b e4       	ldi	r20, 0x4B	; 75
    6324:	64 e0       	ldi	r22, 0x04	; 4
    6326:	2e c0       	rjmp	.+92     	; 0x6384 <prisoner()+0x26a>
    6328:	40 e5       	ldi	r20, 0x50	; 80
    632a:	69 e0       	ldi	r22, 0x09	; 9
    632c:	8f e5       	ldi	r24, 0x5F	; 95
    632e:	92 e4       	ldi	r25, 0x42	; 66
    6330:	b4 cf       	rjmp	.-152    	; 0x629a <prisoner()+0x180>
    6332:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6336:	7c 01       	movw	r14, r24
    6338:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    633c:	8c 01       	movw	r16, r24
    633e:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6342:	9c 01       	movw	r18, r24
    6344:	42 e3       	ldi	r20, 0x32	; 50
    6346:	50 e0       	ldi	r21, 0x00	; 0
    6348:	6a e5       	ldi	r22, 0x5A	; 90
    634a:	84 e3       	ldi	r24, 0x34	; 52
    634c:	91 e2       	ldi	r25, 0x21	; 33
    634e:	bb cf       	rjmp	.-138    	; 0x62c6 <prisoner()+0x1ac>
    6350:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6354:	7c 01       	movw	r14, r24
    6356:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    635a:	8c 01       	movw	r16, r24
    635c:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6360:	9c 01       	movw	r18, r24
    6362:	42 e3       	ldi	r20, 0x32	; 50
    6364:	50 e0       	ldi	r21, 0x00	; 0
    6366:	64 e6       	ldi	r22, 0x64	; 100
    6368:	f0 cf       	rjmp	.-32     	; 0x634a <prisoner()+0x230>
    636a:	0e 94 e6 09 	call	0x13cc	; 0x13cc <getRandomColor()>
    636e:	7c 01       	movw	r14, r24
    6370:	62 e2       	ldi	r22, 0x22	; 34
    6372:	73 e0       	ldi	r23, 0x03	; 3
    6374:	ce 01       	movw	r24, r28
    6376:	01 96       	adiw	r24, 0x01	; 1
    6378:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    637c:	09 e6       	ldi	r16, 0x69	; 105
    637e:	c8 cf       	rjmp	.-112    	; 0x6310 <prisoner()+0x1f6>
    6380:	4e e6       	ldi	r20, 0x6E	; 110
    6382:	61 e0       	ldi	r22, 0x01	; 1
    6384:	8a e2       	ldi	r24, 0x2A	; 42
    6386:	91 e2       	ldi	r25, 0x21	; 33
    6388:	16 cf       	rjmp	.-468    	; 0x61b6 <prisoner()+0x9c>
    638a:	48 e7       	ldi	r20, 0x78	; 120
    638c:	63 e0       	ldi	r22, 0x03	; 3
    638e:	fa cf       	rjmp	.-12     	; 0x6384 <prisoner()+0x26a>
    6390:	4d e7       	ldi	r20, 0x7D	; 125
    6392:	c8 cf       	rjmp	.-112    	; 0x6324 <prisoner()+0x20a>
    6394:	42 e8       	ldi	r20, 0x82	; 130
    6396:	65 e0       	ldi	r22, 0x05	; 5
    6398:	f5 cf       	rjmp	.-22     	; 0x6384 <prisoner()+0x26a>
    639a:	68 ec       	ldi	r22, 0xC8	; 200
    639c:	80 e5       	ldi	r24, 0x50	; 80
    639e:	93 ec       	ldi	r25, 0xC3	; 195
    63a0:	98 cf       	rjmp	.-208    	; 0x62d2 <prisoner()+0x1b8>
    63a2:	60 e0       	ldi	r22, 0x00	; 0
    63a4:	8a ed       	ldi	r24, 0xDA	; 218
    63a6:	90 e1       	ldi	r25, 0x10	; 16
    63a8:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    63ac:	80 e0       	ldi	r24, 0x00	; 0
    63ae:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    63b2:	d4 ce       	rjmp	.-600    	; 0x615c <prisoner()+0x42>

000063b4 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    63b4:	9f 92       	push	r9
    63b6:	af 92       	push	r10
    63b8:	bf 92       	push	r11
    63ba:	cf 92       	push	r12
    63bc:	df 92       	push	r13
    63be:	ef 92       	push	r14
    63c0:	ff 92       	push	r15
    63c2:	0f 93       	push	r16
    63c4:	1f 93       	push	r17
    63c6:	cf 93       	push	r28
    63c8:	df 93       	push	r29
    63ca:	fc 01       	movw	r30, r24
    63cc:	c0 80       	ld	r12, Z
    63ce:	d1 80       	ldd	r13, Z+1	; 0x01
    63d0:	28 b1       	in	r18, 0x08	; 8
    63d2:	b2 2e       	mov	r11, r18
    63d4:	68 94       	set
    63d6:	b2 f8       	bld	r11, 2
    63d8:	98 b1       	in	r25, 0x08	; 8
    63da:	9b 7f       	andi	r25, 0xFB	; 251
    63dc:	98 b9       	out	0x08, r25	; 8
    63de:	62 85       	ldd	r22, Z+10	; 0x0a
    63e0:	87 81       	ldd	r24, Z+7	; 0x07
    63e2:	06 2f       	mov	r16, r22
    63e4:	08 1b       	sub	r16, r24
    63e6:	80 2f       	mov	r24, r16
    63e8:	07 83       	std	Z+7, r16	; 0x07
    63ea:	77 85       	ldd	r23, Z+15	; 0x0f
    63ec:	a2 81       	ldd	r26, Z+2	; 0x02
    63ee:	b3 81       	ldd	r27, Z+3	; 0x03
    63f0:	35 85       	ldd	r19, Z+13	; 0x0d
    63f2:	44 85       	ldd	r20, Z+12	; 0x0c
    63f4:	56 85       	ldd	r21, Z+14	; 0x0e
    63f6:	99 24       	eor	r9, r9
    63f8:	93 94       	inc	r9
    63fa:	93 0e       	add	r9, r19
    63fc:	4f 5f       	subi	r20, 0xFF	; 255
    63fe:	5f 5f       	subi	r21, 0xFF	; 255
    6400:	f6 80       	ldd	r15, Z+6	; 0x06
    6402:	e0 84       	ldd	r14, Z+8	; 0x08
    6404:	c1 85       	ldd	r28, Z+9	; 0x09
    6406:	d3 85       	ldd	r29, Z+11	; 0x0b
    6408:	f6 01       	movw	r30, r12
    640a:	11 81       	ldd	r17, Z+1	; 0x01
    640c:	a1 2c       	mov	r10, r1
    640e:	0a 2d       	mov	r16, r10
    6410:	2a 2d       	mov	r18, r10
    6412:	3a 2d       	mov	r19, r10
    6414:	31 81       	ldd	r19, Z+1	; 0x01
    6416:	11 27       	eor	r17, r17
    6418:	88 94       	clc
    641a:	31 11       	cpse	r19, r1
    641c:	38 0f       	add	r19, r24
    641e:	08 f4       	brcc	.+2      	; 0x6422 <L_19174>
    6420:	3f ef       	ldi	r19, 0xFF	; 255

00006422 <L_19174>:
    6422:	81 95       	neg	r24
    6424:	88 94       	clc
    6426:	90 fc       	sbrc	r9, 0
    6428:	13 0f       	add	r17, r19
    642a:	17 95       	ror	r17
    642c:	88 94       	clc
    642e:	91 fc       	sbrc	r9, 1
    6430:	13 0f       	add	r17, r19
    6432:	17 95       	ror	r17
    6434:	88 94       	clc
    6436:	92 fc       	sbrc	r9, 2
    6438:	13 0f       	add	r17, r19
    643a:	17 95       	ror	r17
    643c:	88 94       	clc
    643e:	93 fc       	sbrc	r9, 3
    6440:	13 0f       	add	r17, r19
    6442:	17 95       	ror	r17
    6444:	88 94       	clc
    6446:	94 fc       	sbrc	r9, 4
    6448:	13 0f       	add	r17, r19
    644a:	17 95       	ror	r17
    644c:	88 94       	clc
    644e:	95 fc       	sbrc	r9, 5
    6450:	13 0f       	add	r17, r19
    6452:	17 95       	ror	r17
    6454:	88 94       	clc
    6456:	96 fc       	sbrc	r9, 6
    6458:	13 0f       	add	r17, r19
    645a:	17 95       	ror	r17
    645c:	88 94       	clc
    645e:	97 fc       	sbrc	r9, 7
    6460:	13 0f       	add	r17, r19
    6462:	17 95       	ror	r17
    6464:	88 94       	clc
    6466:	03 2f       	mov	r16, r19
    6468:	91 10       	cpse	r9, r1
    646a:	01 2f       	mov	r16, r17
    646c:	86 0f       	add	r24, r22
    646e:	10 2f       	mov	r17, r16
    6470:	00 2c       	mov	r0, r0
    6472:	b8 b8       	out	0x08, r11	; 8
    6474:	00 c0       	rjmp	.+0      	; 0x6476 <L_19174+0x54>
    6476:	17 ff       	sbrs	r17, 7
    6478:	98 b9       	out	0x08, r25	; 8
    647a:	30 81       	ld	r19, Z
    647c:	00 27       	eor	r16, r16
    647e:	88 94       	clc
    6480:	00 c0       	rjmp	.+0      	; 0x6482 <L_19174+0x60>
    6482:	00 c0       	rjmp	.+0      	; 0x6484 <L_19174+0x62>
    6484:	00 2c       	mov	r0, r0
    6486:	98 b9       	out	0x08, r25	; 8
    6488:	31 11       	cpse	r19, r1
    648a:	3f 0d       	add	r19, r15
    648c:	00 c0       	rjmp	.+0      	; 0x648e <L_19174+0x6c>
    648e:	00 2c       	mov	r0, r0
    6490:	b8 b8       	out	0x08, r11	; 8
    6492:	00 c0       	rjmp	.+0      	; 0x6494 <L_19174+0x72>
    6494:	16 ff       	sbrs	r17, 6
    6496:	98 b9       	out	0x08, r25	; 8
    6498:	08 f4       	brcc	.+2      	; 0x649c <L_19707>
    649a:	3f ef       	ldi	r19, 0xFF	; 255

0000649c <L_19707>:
    649c:	f1 94       	neg	r15
    649e:	88 94       	clc
    64a0:	00 c0       	rjmp	.+0      	; 0x64a2 <L_19707+0x6>
    64a2:	00 c0       	rjmp	.+0      	; 0x64a4 <L_19707+0x8>
    64a4:	00 2c       	mov	r0, r0
    64a6:	98 b9       	out	0x08, r25	; 8
    64a8:	40 fd       	sbrc	r20, 0
    64aa:	03 0f       	add	r16, r19
    64ac:	00 c0       	rjmp	.+0      	; 0x64ae <L_19707+0x12>
    64ae:	00 2c       	mov	r0, r0
    64b0:	b8 b8       	out	0x08, r11	; 8
    64b2:	00 c0       	rjmp	.+0      	; 0x64b4 <L_19707+0x18>
    64b4:	15 ff       	sbrs	r17, 5
    64b6:	98 b9       	out	0x08, r25	; 8
    64b8:	07 95       	ror	r16
    64ba:	88 94       	clc
    64bc:	41 fd       	sbrc	r20, 1
    64be:	03 0f       	add	r16, r19
    64c0:	00 c0       	rjmp	.+0      	; 0x64c2 <L_19707+0x26>
    64c2:	00 c0       	rjmp	.+0      	; 0x64c4 <L_19707+0x28>
    64c4:	00 2c       	mov	r0, r0
    64c6:	98 b9       	out	0x08, r25	; 8
    64c8:	07 95       	ror	r16
    64ca:	88 94       	clc
    64cc:	00 c0       	rjmp	.+0      	; 0x64ce <L_19707+0x32>
    64ce:	00 2c       	mov	r0, r0
    64d0:	b8 b8       	out	0x08, r11	; 8
    64d2:	00 c0       	rjmp	.+0      	; 0x64d4 <L_19707+0x38>
    64d4:	14 ff       	sbrs	r17, 4
    64d6:	98 b9       	out	0x08, r25	; 8
    64d8:	42 fd       	sbrc	r20, 2
    64da:	03 0f       	add	r16, r19
    64dc:	07 95       	ror	r16
    64de:	88 94       	clc
    64e0:	00 c0       	rjmp	.+0      	; 0x64e2 <L_19707+0x46>
    64e2:	00 c0       	rjmp	.+0      	; 0x64e4 <L_19707+0x48>
    64e4:	00 2c       	mov	r0, r0
    64e6:	98 b9       	out	0x08, r25	; 8
    64e8:	43 fd       	sbrc	r20, 3
    64ea:	03 0f       	add	r16, r19
    64ec:	00 c0       	rjmp	.+0      	; 0x64ee <L_19707+0x52>
    64ee:	00 2c       	mov	r0, r0
    64f0:	b8 b8       	out	0x08, r11	; 8
    64f2:	00 c0       	rjmp	.+0      	; 0x64f4 <L_19707+0x58>
    64f4:	13 ff       	sbrs	r17, 3
    64f6:	98 b9       	out	0x08, r25	; 8
    64f8:	07 95       	ror	r16
    64fa:	88 94       	clc
    64fc:	44 fd       	sbrc	r20, 4
    64fe:	03 0f       	add	r16, r19
    6500:	00 c0       	rjmp	.+0      	; 0x6502 <L_19707+0x66>
    6502:	00 c0       	rjmp	.+0      	; 0x6504 <L_19707+0x68>
    6504:	00 2c       	mov	r0, r0
    6506:	98 b9       	out	0x08, r25	; 8
    6508:	07 95       	ror	r16
    650a:	88 94       	clc
    650c:	00 c0       	rjmp	.+0      	; 0x650e <L_19707+0x72>
    650e:	00 2c       	mov	r0, r0
    6510:	b8 b8       	out	0x08, r11	; 8
    6512:	00 c0       	rjmp	.+0      	; 0x6514 <L_19707+0x78>
    6514:	12 ff       	sbrs	r17, 2
    6516:	98 b9       	out	0x08, r25	; 8
    6518:	45 fd       	sbrc	r20, 5
    651a:	03 0f       	add	r16, r19
    651c:	07 95       	ror	r16
    651e:	88 94       	clc
    6520:	00 c0       	rjmp	.+0      	; 0x6522 <L_19707+0x86>
    6522:	00 c0       	rjmp	.+0      	; 0x6524 <L_19707+0x88>
    6524:	00 2c       	mov	r0, r0
    6526:	98 b9       	out	0x08, r25	; 8
    6528:	46 fd       	sbrc	r20, 6
    652a:	03 0f       	add	r16, r19
    652c:	00 c0       	rjmp	.+0      	; 0x652e <L_19707+0x92>
    652e:	00 2c       	mov	r0, r0
    6530:	b8 b8       	out	0x08, r11	; 8
    6532:	00 c0       	rjmp	.+0      	; 0x6534 <L_19707+0x98>
    6534:	11 ff       	sbrs	r17, 1
    6536:	98 b9       	out	0x08, r25	; 8
    6538:	07 95       	ror	r16
    653a:	88 94       	clc
    653c:	47 fd       	sbrc	r20, 7
    653e:	03 0f       	add	r16, r19
    6540:	00 c0       	rjmp	.+0      	; 0x6542 <L_19707+0xa6>
    6542:	00 c0       	rjmp	.+0      	; 0x6544 <L_19707+0xa8>
    6544:	00 2c       	mov	r0, r0
    6546:	98 b9       	out	0x08, r25	; 8
    6548:	07 95       	ror	r16
    654a:	88 94       	clc
    654c:	00 c0       	rjmp	.+0      	; 0x654e <L_19707+0xb2>
    654e:	00 2c       	mov	r0, r0
    6550:	b8 b8       	out	0x08, r11	; 8
    6552:	00 c0       	rjmp	.+0      	; 0x6554 <L_19707+0xb8>
    6554:	10 ff       	sbrs	r17, 0
    6556:	98 b9       	out	0x08, r25	; 8
    6558:	13 2f       	mov	r17, r19
    655a:	41 11       	cpse	r20, r1
    655c:	10 2f       	mov	r17, r16
    655e:	fc 0e       	add	r15, r28
    6560:	00 c0       	rjmp	.+0      	; 0x6562 <L_19707+0xc6>
    6562:	00 c0       	rjmp	.+0      	; 0x6564 <L_19707+0xc8>
    6564:	00 2c       	mov	r0, r0
    6566:	98 b9       	out	0x08, r25	; 8
    6568:	00 c0       	rjmp	.+0      	; 0x656a <L_19707+0xce>
    656a:	00 c0       	rjmp	.+0      	; 0x656c <L_19707+0xd0>
    656c:	00 2c       	mov	r0, r0
    656e:	b8 b8       	out	0x08, r11	; 8
    6570:	00 c0       	rjmp	.+0      	; 0x6572 <L_19707+0xd6>
    6572:	17 ff       	sbrs	r17, 7
    6574:	98 b9       	out	0x08, r25	; 8
    6576:	32 81       	ldd	r19, Z+2	; 0x02
    6578:	00 27       	eor	r16, r16
    657a:	88 94       	clc
    657c:	00 c0       	rjmp	.+0      	; 0x657e <L_19707+0xe2>
    657e:	00 c0       	rjmp	.+0      	; 0x6580 <L_19707+0xe4>
    6580:	00 2c       	mov	r0, r0
    6582:	98 b9       	out	0x08, r25	; 8
    6584:	31 11       	cpse	r19, r1
    6586:	3e 0d       	add	r19, r14
    6588:	00 c0       	rjmp	.+0      	; 0x658a <L_19707+0xee>
    658a:	00 2c       	mov	r0, r0
    658c:	b8 b8       	out	0x08, r11	; 8
    658e:	00 c0       	rjmp	.+0      	; 0x6590 <L_19707+0xf4>
    6590:	16 ff       	sbrs	r17, 6
    6592:	98 b9       	out	0x08, r25	; 8
    6594:	08 f4       	brcc	.+2      	; 0x6598 <L_20925>
    6596:	3f ef       	ldi	r19, 0xFF	; 255

00006598 <L_20925>:
    6598:	e7 0f       	add	r30, r23
    659a:	f1 1d       	adc	r31, r1
    659c:	00 c0       	rjmp	.+0      	; 0x659e <L_20925+0x6>
    659e:	00 c0       	rjmp	.+0      	; 0x65a0 <L_20925+0x8>
    65a0:	00 2c       	mov	r0, r0
    65a2:	98 b9       	out	0x08, r25	; 8
    65a4:	50 fd       	sbrc	r21, 0
    65a6:	03 0f       	add	r16, r19
    65a8:	00 c0       	rjmp	.+0      	; 0x65aa <L_20925+0x12>
    65aa:	00 2c       	mov	r0, r0
    65ac:	b8 b8       	out	0x08, r11	; 8
    65ae:	00 c0       	rjmp	.+0      	; 0x65b0 <L_20925+0x18>
    65b0:	15 ff       	sbrs	r17, 5
    65b2:	98 b9       	out	0x08, r25	; 8
    65b4:	07 95       	ror	r16
    65b6:	88 94       	clc
    65b8:	51 fd       	sbrc	r21, 1
    65ba:	03 0f       	add	r16, r19
    65bc:	00 c0       	rjmp	.+0      	; 0x65be <L_20925+0x26>
    65be:	00 c0       	rjmp	.+0      	; 0x65c0 <L_20925+0x28>
    65c0:	00 2c       	mov	r0, r0
    65c2:	98 b9       	out	0x08, r25	; 8
    65c4:	07 95       	ror	r16
    65c6:	88 94       	clc
    65c8:	00 c0       	rjmp	.+0      	; 0x65ca <L_20925+0x32>
    65ca:	00 2c       	mov	r0, r0
    65cc:	b8 b8       	out	0x08, r11	; 8
    65ce:	00 c0       	rjmp	.+0      	; 0x65d0 <L_20925+0x38>
    65d0:	14 ff       	sbrs	r17, 4
    65d2:	98 b9       	out	0x08, r25	; 8
    65d4:	52 fd       	sbrc	r21, 2
    65d6:	03 0f       	add	r16, r19
    65d8:	07 95       	ror	r16
    65da:	88 94       	clc
    65dc:	00 c0       	rjmp	.+0      	; 0x65de <L_20925+0x46>
    65de:	00 c0       	rjmp	.+0      	; 0x65e0 <L_20925+0x48>
    65e0:	00 2c       	mov	r0, r0
    65e2:	98 b9       	out	0x08, r25	; 8
    65e4:	53 fd       	sbrc	r21, 3
    65e6:	03 0f       	add	r16, r19
    65e8:	00 c0       	rjmp	.+0      	; 0x65ea <L_20925+0x52>
    65ea:	00 2c       	mov	r0, r0
    65ec:	b8 b8       	out	0x08, r11	; 8
    65ee:	00 c0       	rjmp	.+0      	; 0x65f0 <L_20925+0x58>
    65f0:	13 ff       	sbrs	r17, 3
    65f2:	98 b9       	out	0x08, r25	; 8
    65f4:	07 95       	ror	r16
    65f6:	88 94       	clc
    65f8:	54 fd       	sbrc	r21, 4
    65fa:	03 0f       	add	r16, r19
    65fc:	00 c0       	rjmp	.+0      	; 0x65fe <L_20925+0x66>
    65fe:	00 c0       	rjmp	.+0      	; 0x6600 <L_20925+0x68>
    6600:	00 2c       	mov	r0, r0
    6602:	98 b9       	out	0x08, r25	; 8
    6604:	07 95       	ror	r16
    6606:	88 94       	clc
    6608:	00 c0       	rjmp	.+0      	; 0x660a <L_20925+0x72>
    660a:	00 2c       	mov	r0, r0
    660c:	b8 b8       	out	0x08, r11	; 8
    660e:	00 c0       	rjmp	.+0      	; 0x6610 <L_20925+0x78>
    6610:	12 ff       	sbrs	r17, 2
    6612:	98 b9       	out	0x08, r25	; 8
    6614:	55 fd       	sbrc	r21, 5
    6616:	03 0f       	add	r16, r19
    6618:	07 95       	ror	r16
    661a:	88 94       	clc
    661c:	00 c0       	rjmp	.+0      	; 0x661e <L_20925+0x86>
    661e:	00 c0       	rjmp	.+0      	; 0x6620 <L_20925+0x88>
    6620:	00 2c       	mov	r0, r0
    6622:	98 b9       	out	0x08, r25	; 8
    6624:	56 fd       	sbrc	r21, 6
    6626:	03 0f       	add	r16, r19
    6628:	00 c0       	rjmp	.+0      	; 0x662a <L_20925+0x92>
    662a:	00 2c       	mov	r0, r0
    662c:	b8 b8       	out	0x08, r11	; 8
    662e:	00 c0       	rjmp	.+0      	; 0x6630 <L_20925+0x98>
    6630:	11 ff       	sbrs	r17, 1
    6632:	98 b9       	out	0x08, r25	; 8
    6634:	07 95       	ror	r16
    6636:	88 94       	clc
    6638:	57 fd       	sbrc	r21, 7
    663a:	03 0f       	add	r16, r19
    663c:	00 c0       	rjmp	.+0      	; 0x663e <L_20925+0xa6>
    663e:	00 c0       	rjmp	.+0      	; 0x6640 <L_20925+0xa8>
    6640:	00 2c       	mov	r0, r0
    6642:	98 b9       	out	0x08, r25	; 8
    6644:	07 95       	ror	r16
    6646:	88 94       	clc
    6648:	00 c0       	rjmp	.+0      	; 0x664a <L_20925+0xb2>
    664a:	00 2c       	mov	r0, r0
    664c:	b8 b8       	out	0x08, r11	; 8
    664e:	00 c0       	rjmp	.+0      	; 0x6650 <L_20925+0xb8>
    6650:	10 ff       	sbrs	r17, 0
    6652:	98 b9       	out	0x08, r25	; 8
    6654:	13 2f       	mov	r17, r19
    6656:	51 11       	cpse	r21, r1
    6658:	10 2f       	mov	r17, r16
    665a:	e1 94       	neg	r14
    665c:	00 c0       	rjmp	.+0      	; 0x665e <L_20925+0xc6>
    665e:	00 c0       	rjmp	.+0      	; 0x6660 <L_20925+0xc8>
    6660:	00 2c       	mov	r0, r0
    6662:	98 b9       	out	0x08, r25	; 8
    6664:	ed 0e       	add	r14, r29
    6666:	00 c0       	rjmp	.+0      	; 0x6668 <L_20925+0xd0>
    6668:	00 c0       	rjmp	.+0      	; 0x666a <L_20925+0xd2>
    666a:	b8 b8       	out	0x08, r11	; 8
    666c:	00 c0       	rjmp	.+0      	; 0x666e <L_20925+0xd6>
    666e:	17 ff       	sbrs	r17, 7
    6670:	98 b9       	out	0x08, r25	; 8
    6672:	31 81       	ldd	r19, Z+1	; 0x01
    6674:	00 27       	eor	r16, r16
    6676:	88 94       	clc
    6678:	00 c0       	rjmp	.+0      	; 0x667a <L_20925+0xe2>
    667a:	00 c0       	rjmp	.+0      	; 0x667c <L_20925+0xe4>
    667c:	00 2c       	mov	r0, r0
    667e:	98 b9       	out	0x08, r25	; 8
    6680:	31 11       	cpse	r19, r1
    6682:	38 0f       	add	r19, r24
    6684:	00 c0       	rjmp	.+0      	; 0x6686 <L_20925+0xee>
    6686:	00 2c       	mov	r0, r0
    6688:	b8 b8       	out	0x08, r11	; 8
    668a:	00 c0       	rjmp	.+0      	; 0x668c <L_20925+0xf4>
    668c:	16 ff       	sbrs	r17, 6
    668e:	98 b9       	out	0x08, r25	; 8
    6690:	08 f4       	brcc	.+2      	; 0x6694 <L_22149>
    6692:	3f ef       	ldi	r19, 0xFF	; 255

00006694 <L_22149>:
    6694:	81 95       	neg	r24
    6696:	88 94       	clc
    6698:	00 c0       	rjmp	.+0      	; 0x669a <L_22149+0x6>
    669a:	00 c0       	rjmp	.+0      	; 0x669c <L_22149+0x8>
    669c:	00 2c       	mov	r0, r0
    669e:	98 b9       	out	0x08, r25	; 8
    66a0:	90 fc       	sbrc	r9, 0
    66a2:	03 0f       	add	r16, r19
    66a4:	00 c0       	rjmp	.+0      	; 0x66a6 <L_22149+0x12>
    66a6:	00 2c       	mov	r0, r0
    66a8:	b8 b8       	out	0x08, r11	; 8
    66aa:	00 c0       	rjmp	.+0      	; 0x66ac <L_22149+0x18>
    66ac:	15 ff       	sbrs	r17, 5
    66ae:	98 b9       	out	0x08, r25	; 8
    66b0:	07 95       	ror	r16
    66b2:	88 94       	clc
    66b4:	91 fc       	sbrc	r9, 1
    66b6:	03 0f       	add	r16, r19
    66b8:	00 c0       	rjmp	.+0      	; 0x66ba <L_22149+0x26>
    66ba:	00 c0       	rjmp	.+0      	; 0x66bc <L_22149+0x28>
    66bc:	00 2c       	mov	r0, r0
    66be:	98 b9       	out	0x08, r25	; 8
    66c0:	07 95       	ror	r16
    66c2:	88 94       	clc
    66c4:	00 c0       	rjmp	.+0      	; 0x66c6 <L_22149+0x32>
    66c6:	00 2c       	mov	r0, r0
    66c8:	b8 b8       	out	0x08, r11	; 8
    66ca:	00 c0       	rjmp	.+0      	; 0x66cc <L_22149+0x38>
    66cc:	14 ff       	sbrs	r17, 4
    66ce:	98 b9       	out	0x08, r25	; 8
    66d0:	92 fc       	sbrc	r9, 2
    66d2:	03 0f       	add	r16, r19
    66d4:	07 95       	ror	r16
    66d6:	88 94       	clc
    66d8:	00 c0       	rjmp	.+0      	; 0x66da <L_22149+0x46>
    66da:	00 c0       	rjmp	.+0      	; 0x66dc <L_22149+0x48>
    66dc:	00 2c       	mov	r0, r0
    66de:	98 b9       	out	0x08, r25	; 8
    66e0:	93 fc       	sbrc	r9, 3
    66e2:	03 0f       	add	r16, r19
    66e4:	00 c0       	rjmp	.+0      	; 0x66e6 <L_22149+0x52>
    66e6:	00 2c       	mov	r0, r0
    66e8:	b8 b8       	out	0x08, r11	; 8
    66ea:	00 c0       	rjmp	.+0      	; 0x66ec <L_22149+0x58>
    66ec:	13 ff       	sbrs	r17, 3
    66ee:	98 b9       	out	0x08, r25	; 8
    66f0:	07 95       	ror	r16
    66f2:	88 94       	clc
    66f4:	94 fc       	sbrc	r9, 4
    66f6:	03 0f       	add	r16, r19
    66f8:	00 c0       	rjmp	.+0      	; 0x66fa <L_22149+0x66>
    66fa:	00 c0       	rjmp	.+0      	; 0x66fc <L_22149+0x68>
    66fc:	00 2c       	mov	r0, r0
    66fe:	98 b9       	out	0x08, r25	; 8
    6700:	07 95       	ror	r16
    6702:	88 94       	clc
    6704:	00 c0       	rjmp	.+0      	; 0x6706 <L_22149+0x72>
    6706:	00 2c       	mov	r0, r0
    6708:	b8 b8       	out	0x08, r11	; 8
    670a:	00 c0       	rjmp	.+0      	; 0x670c <L_22149+0x78>
    670c:	12 ff       	sbrs	r17, 2
    670e:	98 b9       	out	0x08, r25	; 8
    6710:	95 fc       	sbrc	r9, 5
    6712:	03 0f       	add	r16, r19
    6714:	07 95       	ror	r16
    6716:	88 94       	clc
    6718:	00 c0       	rjmp	.+0      	; 0x671a <L_22149+0x86>
    671a:	00 c0       	rjmp	.+0      	; 0x671c <L_22149+0x88>
    671c:	00 2c       	mov	r0, r0
    671e:	98 b9       	out	0x08, r25	; 8
    6720:	96 fc       	sbrc	r9, 6
    6722:	03 0f       	add	r16, r19
    6724:	00 c0       	rjmp	.+0      	; 0x6726 <L_22149+0x92>
    6726:	00 2c       	mov	r0, r0
    6728:	b8 b8       	out	0x08, r11	; 8
    672a:	00 c0       	rjmp	.+0      	; 0x672c <L_22149+0x98>
    672c:	11 ff       	sbrs	r17, 1
    672e:	98 b9       	out	0x08, r25	; 8
    6730:	07 95       	ror	r16
    6732:	88 94       	clc
    6734:	97 fc       	sbrc	r9, 7
    6736:	03 0f       	add	r16, r19
    6738:	00 c0       	rjmp	.+0      	; 0x673a <L_22149+0xa6>
    673a:	00 c0       	rjmp	.+0      	; 0x673c <L_22149+0xa8>
    673c:	00 2c       	mov	r0, r0
    673e:	98 b9       	out	0x08, r25	; 8
    6740:	07 95       	ror	r16
    6742:	88 94       	clc
    6744:	00 c0       	rjmp	.+0      	; 0x6746 <L_22149+0xb2>
    6746:	00 2c       	mov	r0, r0
    6748:	b8 b8       	out	0x08, r11	; 8
    674a:	00 c0       	rjmp	.+0      	; 0x674c <L_22149+0xb8>
    674c:	10 ff       	sbrs	r17, 0
    674e:	98 b9       	out	0x08, r25	; 8
    6750:	13 2f       	mov	r17, r19
    6752:	91 10       	cpse	r9, r1
    6754:	10 2f       	mov	r17, r16
    6756:	86 0f       	add	r24, r22
    6758:	00 c0       	rjmp	.+0      	; 0x675a <L_22149+0xc6>
    675a:	00 c0       	rjmp	.+0      	; 0x675c <L_22149+0xc8>
    675c:	00 2c       	mov	r0, r0
    675e:	98 b9       	out	0x08, r25	; 8
    6760:	11 97       	sbiw	r26, 0x01	; 1
    6762:	09 f0       	breq	.+2      	; 0x6766 <L_23129>
    6764:	86 ce       	rjmp	.-756    	; 0x6472 <L_19174+0x50>

00006766 <L_23129>:
    6766:	df 91       	pop	r29
    6768:	cf 91       	pop	r28
    676a:	1f 91       	pop	r17
    676c:	0f 91       	pop	r16
    676e:	ff 90       	pop	r15
    6770:	ef 90       	pop	r14
    6772:	df 90       	pop	r13
    6774:	cf 90       	pop	r12
    6776:	bf 90       	pop	r11
    6778:	af 90       	pop	r10
    677a:	9f 90       	pop	r9
    677c:	08 95       	ret

0000677e <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    677e:	0f 93       	push	r16
    6780:	1f 93       	push	r17
    6782:	cf 93       	push	r28
    6784:	df 93       	push	r29
    6786:	ec 01       	movw	r28, r24
    6788:	8b 01       	movw	r16, r22
    678a:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <_micros>
    678e:	2f 85       	ldd	r18, Y+15	; 0x0f
    6790:	38 89       	ldd	r19, Y+16	; 0x10
    6792:	62 1b       	sub	r22, r18
    6794:	73 0b       	sbc	r23, r19
    6796:	6a 30       	cpi	r22, 0x0A	; 10
    6798:	71 05       	cpc	r23, r1
    679a:	b8 f3       	brcs	.-18     	; 0x678a <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    679c:	f8 94       	cli
    679e:	c8 01       	movw	r24, r16
    67a0:	09 de       	rcall	.-1006   	; 0x63b4 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    67a2:	f8 01       	movw	r30, r16
    67a4:	42 81       	ldd	r20, Z+2	; 0x02
    67a6:	53 81       	ldd	r21, Z+3	; 0x03
    67a8:	20 ee       	ldi	r18, 0xE0	; 224
    67aa:	31 e0       	ldi	r19, 0x01	; 1
    67ac:	da 01       	movw	r26, r20
    67ae:	0e 94 d6 52 	call	0xa5ac	; 0xa5ac <__usmulhisi3>
    67b2:	dc 01       	movw	r26, r24
    67b4:	cb 01       	movw	r24, r22
    67b6:	f4 e0       	ldi	r31, 0x04	; 4
    67b8:	b6 95       	lsr	r27
    67ba:	a7 95       	ror	r26
    67bc:	97 95       	ror	r25
    67be:	87 95       	ror	r24
    67c0:	fa 95       	dec	r31
    67c2:	d1 f7       	brne	.-12     	; 0x67b8 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    67c4:	30 e0       	ldi	r19, 0x00	; 0
    67c6:	20 e0       	ldi	r18, 0x00	; 0
    67c8:	b9 01       	movw	r22, r18
    67ca:	ea e9       	ldi	r30, 0x9A	; 154
    67cc:	4e 9f       	mul	r20, r30
    67ce:	04 0e       	add	r0, r20
    67d0:	61 1d       	adc	r22, r1
    67d2:	5e 9f       	mul	r21, r30
    67d4:	60 0d       	add	r22, r0
    67d6:	71 1d       	adc	r23, r1
    67d8:	11 24       	eor	r1, r1
    67da:	65 0f       	add	r22, r21
    67dc:	71 1d       	adc	r23, r1
    67de:	86 0f       	add	r24, r22
    67e0:	97 1f       	adc	r25, r23
    67e2:	a1 1d       	adc	r26, r1
    67e4:	b1 1d       	adc	r27, r1
    67e6:	89 3e       	cpi	r24, 0xE9	; 233
    67e8:	f3 e0       	ldi	r31, 0x03	; 3
    67ea:	9f 07       	cpc	r25, r31
    67ec:	a1 05       	cpc	r26, r1
    67ee:	b1 05       	cpc	r27, r1
    67f0:	08 f4       	brcc	.+2      	; 0x67f4 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    67f2:	34 c0       	rjmp	.+104    	; 0x685c <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    67f4:	88 5e       	subi	r24, 0xE8	; 232
    67f6:	93 40       	sbci	r25, 0x03	; 3
    67f8:	a1 09       	sbc	r26, r1
    67fa:	b1 09       	sbc	r27, r1
    67fc:	42 e0       	ldi	r20, 0x02	; 2
    67fe:	b6 95       	lsr	r27
    6800:	a7 95       	ror	r26
    6802:	97 95       	ror	r25
    6804:	87 95       	ror	r24
    6806:	4a 95       	dec	r20
    6808:	d1 f7       	brne	.-12     	; 0x67fe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    680a:	47 e0       	ldi	r20, 0x07	; 7
    680c:	84 9f       	mul	r24, r20
    680e:	08 0e       	add	r0, r24
    6810:	21 1d       	adc	r18, r1
    6812:	94 9f       	mul	r25, r20
    6814:	20 0d       	add	r18, r0
    6816:	31 1d       	adc	r19, r1
    6818:	11 24       	eor	r1, r1
    681a:	29 0f       	add	r18, r25
    681c:	31 1d       	adc	r19, r1
    681e:	60 91 cb 10 	lds	r22, 0x10CB	; 0x8010cb <gTimeErrorAccum256ths>
    6822:	70 e0       	ldi	r23, 0x00	; 0
    6824:	86 0f       	add	r24, r22
    6826:	97 1f       	adc	r25, r23
    6828:	82 0f       	add	r24, r18
    682a:	93 1f       	adc	r25, r19
    682c:	40 91 ea 10 	lds	r20, 0x10EA	; 0x8010ea <timer0_millis_count>
    6830:	50 91 eb 10 	lds	r21, 0x10EB	; 0x8010eb <timer0_millis_count+0x1>
    6834:	60 91 ec 10 	lds	r22, 0x10EC	; 0x8010ec <timer0_millis_count+0x2>
    6838:	70 91 ed 10 	lds	r23, 0x10ED	; 0x8010ed <timer0_millis_count+0x3>
    683c:	29 2f       	mov	r18, r25
    683e:	33 27       	eor	r19, r19
    6840:	42 0f       	add	r20, r18
    6842:	53 1f       	adc	r21, r19
    6844:	61 1d       	adc	r22, r1
    6846:	71 1d       	adc	r23, r1
    6848:	40 93 ea 10 	sts	0x10EA, r20	; 0x8010ea <timer0_millis_count>
    684c:	50 93 eb 10 	sts	0x10EB, r21	; 0x8010eb <timer0_millis_count+0x1>
    6850:	60 93 ec 10 	sts	0x10EC, r22	; 0x8010ec <timer0_millis_count+0x2>
    6854:	70 93 ed 10 	sts	0x10ED, r23	; 0x8010ed <timer0_millis_count+0x3>
    6858:	80 93 cb 10 	sts	0x10CB, r24	; 0x8010cb <gTimeErrorAccum256ths>
    685c:	78 94       	sei
    685e:	0e 94 5b 49 	call	0x92b6	; 0x92b6 <_micros>
    6862:	78 8b       	std	Y+16, r23	; 0x10
    6864:	6f 87       	std	Y+15, r22	; 0x0f
    6866:	df 91       	pop	r29
    6868:	cf 91       	pop	r28
    686a:	1f 91       	pop	r17
    686c:	0f 91       	pop	r16
    686e:	08 95       	ret

00006870 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    6870:	0f 93       	push	r16
    6872:	1f 93       	push	r17
    6874:	cf 93       	push	r28
    6876:	df 93       	push	r29
    6878:	20 91 e2 09 	lds	r18, 0x09E2	; 0x8009e2 <__data_end>
    687c:	2f 5f       	subi	r18, 0xFF	; 255
    687e:	32 2f       	mov	r19, r18
    6880:	37 70       	andi	r19, 0x07	; 7
    6882:	30 93 e2 09 	sts	0x09E2, r19	; 0x8009e2 <__data_end>
    6886:	20 ff       	sbrs	r18, 0
    6888:	2b c0       	rjmp	.+86     	; 0x68e0 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    688a:	20 e8       	ldi	r18, 0x80	; 128
    688c:	31 fd       	sbrc	r19, 1
    688e:	20 64       	ori	r18, 0x40	; 64
    6890:	34 70       	andi	r19, 0x04	; 4
    6892:	09 f0       	breq	.+2      	; 0x6896 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    6894:	20 62       	ori	r18, 0x20	; 32
    6896:	20 5f       	subi	r18, 0xF0	; 240
    6898:	fc 01       	movw	r30, r24
    689a:	ec 01       	movw	r28, r24
    689c:	23 96       	adiw	r28, 0x03	; 3
    689e:	00 e0       	ldi	r16, 0x00	; 0
    68a0:	11 e0       	ldi	r17, 0x01	; 1
    68a2:	64 85       	ldd	r22, Z+12	; 0x0c
    68a4:	66 23       	and	r22, r22
    68a6:	29 f0       	breq	.+10     	; 0x68b2 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    68a8:	70 e0       	ldi	r23, 0x00	; 0
    68aa:	c8 01       	movw	r24, r16
    68ac:	0e 94 6d 52 	call	0xa4da	; 0xa4da <__divmodhi4>
    68b0:	6f 5f       	subi	r22, 0xFF	; 255
    68b2:	61 87       	std	Z+9, r22	; 0x09
    68b4:	32 2f       	mov	r19, r18
    68b6:	36 9f       	mul	r19, r22
    68b8:	03 0e       	add	r0, r19
    68ba:	30 e0       	ldi	r19, 0x00	; 0
    68bc:	31 1d       	adc	r19, r1
    68be:	11 24       	eor	r1, r1
    68c0:	31 11       	cpse	r19, r1
    68c2:	10 c0       	rjmp	.+32     	; 0x68e4 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    68c4:	16 82       	std	Z+6, r1	; 0x06
    68c6:	66 23       	and	r22, r22
    68c8:	11 f0       	breq	.+4      	; 0x68ce <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    68ca:	61 50       	subi	r22, 0x01	; 1
    68cc:	61 87       	std	Z+9, r22	; 0x09
    68ce:	31 96       	adiw	r30, 0x01	; 1
    68d0:	ec 17       	cp	r30, r28
    68d2:	fd 07       	cpc	r31, r29
    68d4:	31 f7       	brne	.-52     	; 0x68a2 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    68d6:	df 91       	pop	r29
    68d8:	cf 91       	pop	r28
    68da:	1f 91       	pop	r17
    68dc:	0f 91       	pop	r16
    68de:	08 95       	ret
    68e0:	20 e0       	ldi	r18, 0x00	; 0
    68e2:	d4 cf       	rjmp	.-88     	; 0x688c <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    68e4:	31 50       	subi	r19, 0x01	; 1
    68e6:	36 83       	std	Z+6, r19	; 0x06
    68e8:	ee cf       	rjmp	.-36     	; 0x68c6 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

000068ea <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    68ea:	0f 93       	push	r16
    68ec:	1f 93       	push	r17
    68ee:	cf 93       	push	r28
    68f0:	df 93       	push	r29
    68f2:	cd b7       	in	r28, 0x3d	; 61
    68f4:	de b7       	in	r29, 0x3e	; 62
    68f6:	62 97       	sbiw	r28, 0x12	; 18
    68f8:	0f b6       	in	r0, 0x3f	; 63
    68fa:	f8 94       	cli
    68fc:	de bf       	out	0x3e, r29	; 62
    68fe:	0f be       	out	0x3f, r0	; 63
    6900:	cd bf       	out	0x3d, r28	; 61
    6902:	8c 01       	movw	r16, r24
    6904:	f9 01       	movw	r30, r18
    6906:	dc 01       	movw	r26, r24
    6908:	1c 96       	adiw	r26, 0x0c	; 12
    690a:	8c 91       	ld	r24, X
    690c:	7a 83       	std	Y+2, r23	; 0x02
    690e:	69 83       	std	Y+1, r22	; 0x01
    6910:	5c 83       	std	Y+4, r21	; 0x04
    6912:	4b 83       	std	Y+3, r20	; 0x03
    6914:	5e 83       	std	Y+6, r21	; 0x06
    6916:	4d 83       	std	Y+5, r20	; 0x05
    6918:	90 81       	ld	r25, Z
    691a:	9d 87       	std	Y+13, r25	; 0x0d
    691c:	91 81       	ldd	r25, Z+1	; 0x01
    691e:	9e 87       	std	Y+14, r25	; 0x0e
    6920:	92 81       	ldd	r25, Z+2	; 0x02
    6922:	9f 87       	std	Y+15, r25	; 0x0f
    6924:	81 30       	cpi	r24, 0x01	; 1
    6926:	e9 f4       	brne	.+58     	; 0x6962 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    6928:	ce 01       	movw	r24, r28
    692a:	01 96       	adiw	r24, 0x01	; 1
    692c:	a1 df       	rcall	.-190    	; 0x6870 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    692e:	83 e0       	ldi	r24, 0x03	; 3
    6930:	88 8b       	std	Y+16, r24	; 0x10
    6932:	1a 8a       	std	Y+18, r1	; 0x12
    6934:	19 8a       	std	Y+17, r1	; 0x11
    6936:	d8 01       	movw	r26, r16
    6938:	ed 91       	ld	r30, X+
    693a:	fc 91       	ld	r31, X
    693c:	04 84       	ldd	r0, Z+12	; 0x0c
    693e:	f5 85       	ldd	r31, Z+13	; 0x0d
    6940:	e0 2d       	mov	r30, r0
    6942:	be 01       	movw	r22, r28
    6944:	6f 5f       	subi	r22, 0xFF	; 255
    6946:	7f 4f       	sbci	r23, 0xFF	; 255
    6948:	c8 01       	movw	r24, r16
    694a:	09 95       	icall
    694c:	62 96       	adiw	r28, 0x12	; 18
    694e:	0f b6       	in	r0, 0x3f	; 63
    6950:	f8 94       	cli
    6952:	de bf       	out	0x3e, r29	; 62
    6954:	0f be       	out	0x3f, r0	; 63
    6956:	cd bf       	out	0x3d, r28	; 61
    6958:	df 91       	pop	r29
    695a:	cf 91       	pop	r28
    695c:	1f 91       	pop	r17
    695e:	0f 91       	pop	r16
    6960:	08 95       	ret
    6962:	1c 86       	std	Y+12, r1	; 0x0c
    6964:	1b 86       	std	Y+11, r1	; 0x0b
    6966:	1a 86       	std	Y+10, r1	; 0x0a
    6968:	19 86       	std	Y+9, r1	; 0x09
    696a:	18 86       	std	Y+8, r1	; 0x08
    696c:	1f 82       	std	Y+7, r1	; 0x07
    696e:	df cf       	rjmp	.-66     	; 0x692e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

00006970 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    6970:	0f 93       	push	r16
    6972:	1f 93       	push	r17
    6974:	cf 93       	push	r28
    6976:	df 93       	push	r29
    6978:	cd b7       	in	r28, 0x3d	; 61
    697a:	de b7       	in	r29, 0x3e	; 62
    697c:	62 97       	sbiw	r28, 0x12	; 18
    697e:	0f b6       	in	r0, 0x3f	; 63
    6980:	f8 94       	cli
    6982:	de bf       	out	0x3e, r29	; 62
    6984:	0f be       	out	0x3f, r0	; 63
    6986:	cd bf       	out	0x3d, r28	; 61
    6988:	8c 01       	movw	r16, r24
    698a:	f9 01       	movw	r30, r18
    698c:	dc 01       	movw	r26, r24
    698e:	1c 96       	adiw	r26, 0x0c	; 12
    6990:	8c 91       	ld	r24, X
    6992:	7a 83       	std	Y+2, r23	; 0x02
    6994:	69 83       	std	Y+1, r22	; 0x01
    6996:	5c 83       	std	Y+4, r21	; 0x04
    6998:	4b 83       	std	Y+3, r20	; 0x03
    699a:	5e 83       	std	Y+6, r21	; 0x06
    699c:	4d 83       	std	Y+5, r20	; 0x05
    699e:	90 81       	ld	r25, Z
    69a0:	9d 87       	std	Y+13, r25	; 0x0d
    69a2:	91 81       	ldd	r25, Z+1	; 0x01
    69a4:	9e 87       	std	Y+14, r25	; 0x0e
    69a6:	92 81       	ldd	r25, Z+2	; 0x02
    69a8:	9f 87       	std	Y+15, r25	; 0x0f
    69aa:	81 30       	cpi	r24, 0x01	; 1
    69ac:	e1 f4       	brne	.+56     	; 0x69e6 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    69ae:	ce 01       	movw	r24, r28
    69b0:	01 96       	adiw	r24, 0x01	; 1
    69b2:	5e df       	rcall	.-324    	; 0x6870 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    69b4:	18 8a       	std	Y+16, r1	; 0x10
    69b6:	1a 8a       	std	Y+18, r1	; 0x12
    69b8:	19 8a       	std	Y+17, r1	; 0x11
    69ba:	d8 01       	movw	r26, r16
    69bc:	ed 91       	ld	r30, X+
    69be:	fc 91       	ld	r31, X
    69c0:	04 84       	ldd	r0, Z+12	; 0x0c
    69c2:	f5 85       	ldd	r31, Z+13	; 0x0d
    69c4:	e0 2d       	mov	r30, r0
    69c6:	be 01       	movw	r22, r28
    69c8:	6f 5f       	subi	r22, 0xFF	; 255
    69ca:	7f 4f       	sbci	r23, 0xFF	; 255
    69cc:	c8 01       	movw	r24, r16
    69ce:	09 95       	icall
    69d0:	62 96       	adiw	r28, 0x12	; 18
    69d2:	0f b6       	in	r0, 0x3f	; 63
    69d4:	f8 94       	cli
    69d6:	de bf       	out	0x3e, r29	; 62
    69d8:	0f be       	out	0x3f, r0	; 63
    69da:	cd bf       	out	0x3d, r28	; 61
    69dc:	df 91       	pop	r29
    69de:	cf 91       	pop	r28
    69e0:	1f 91       	pop	r17
    69e2:	0f 91       	pop	r16
    69e4:	08 95       	ret
    69e6:	1c 86       	std	Y+12, r1	; 0x0c
    69e8:	1b 86       	std	Y+11, r1	; 0x0b
    69ea:	1a 86       	std	Y+10, r1	; 0x0a
    69ec:	19 86       	std	Y+9, r1	; 0x09
    69ee:	18 86       	std	Y+8, r1	; 0x08
    69f0:	1f 82       	std	Y+7, r1	; 0x07
    69f2:	e0 cf       	rjmp	.-64     	; 0x69b4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

000069f4 <_GLOBAL__sub_I_matrix>:
    69f4:	0f b6       	in	r0, 0x3f	; 63
    69f6:	f8 94       	cli
    69f8:	80 91 ea 10 	lds	r24, 0x10EA	; 0x8010ea <timer0_millis_count>
    69fc:	90 91 eb 10 	lds	r25, 0x10EB	; 0x8010eb <timer0_millis_count+0x1>
    6a00:	a0 91 ec 10 	lds	r26, 0x10EC	; 0x8010ec <timer0_millis_count+0x2>
    6a04:	b0 91 ed 10 	lds	r27, 0x10ED	; 0x8010ed <timer0_millis_count+0x3>
    6a08:	0f be       	out	0x3f, r0	; 63
    6a0a:	90 93 c1 0a 	sts	0x0AC1, r25	; 0x800ac1 <lastLEDchange+0x1>
    6a0e:	80 93 c0 0a 	sts	0x0AC0, r24	; 0x800ac0 <lastLEDchange>
    6a12:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6a16:	80 93 75 0a 	sts	0x0A75, r24	; 0x800a75 <r>
    6a1a:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6a1e:	80 93 74 0a 	sts	0x0A74, r24	; 0x800a74 <g>
    6a22:	0e 94 cd 09 	call	0x139a	; 0x139a <getRandomColorValue()>
    6a26:	80 93 73 0a 	sts	0x0A73, r24	; 0x800a73 <b>
    6a2a:	69 ec       	ldi	r22, 0xC9	; 201
    6a2c:	75 e0       	ldi	r23, 0x05	; 5
    6a2e:	86 e2       	ldi	r24, 0x26	; 38
    6a30:	9a e0       	ldi	r25, 0x0A	; 10
    6a32:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a36:	64 ec       	ldi	r22, 0xC4	; 196
    6a38:	75 e0       	ldi	r23, 0x05	; 5
    6a3a:	8d e2       	ldi	r24, 0x2D	; 45
    6a3c:	9a e0       	ldi	r25, 0x0A	; 10
    6a3e:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a42:	62 ec       	ldi	r22, 0xC2	; 194
    6a44:	75 e0       	ldi	r23, 0x05	; 5
    6a46:	84 e3       	ldi	r24, 0x34	; 52
    6a48:	9a e0       	ldi	r25, 0x0A	; 10
    6a4a:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a4e:	6f eb       	ldi	r22, 0xBF	; 191
    6a50:	75 e0       	ldi	r23, 0x05	; 5
    6a52:	8b e3       	ldi	r24, 0x3B	; 59
    6a54:	9a e0       	ldi	r25, 0x0A	; 10
    6a56:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a5a:	6a eb       	ldi	r22, 0xBA	; 186
    6a5c:	75 e0       	ldi	r23, 0x05	; 5
    6a5e:	82 e4       	ldi	r24, 0x42	; 66
    6a60:	9a e0       	ldi	r25, 0x0A	; 10
    6a62:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a66:	66 eb       	ldi	r22, 0xB6	; 182
    6a68:	75 e0       	ldi	r23, 0x05	; 5
    6a6a:	89 e4       	ldi	r24, 0x49	; 73
    6a6c:	9a e0       	ldi	r25, 0x0A	; 10
    6a6e:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a72:	60 eb       	ldi	r22, 0xB0	; 176
    6a74:	75 e0       	ldi	r23, 0x05	; 5
    6a76:	80 e5       	ldi	r24, 0x50	; 80
    6a78:	9a e0       	ldi	r25, 0x0A	; 10
    6a7a:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a7e:	6d ea       	ldi	r22, 0xAD	; 173
    6a80:	75 e0       	ldi	r23, 0x05	; 5
    6a82:	87 e5       	ldi	r24, 0x57	; 87
    6a84:	9a e0       	ldi	r25, 0x0A	; 10
    6a86:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a8a:	68 ea       	ldi	r22, 0xA8	; 168
    6a8c:	75 e0       	ldi	r23, 0x05	; 5
    6a8e:	8e e5       	ldi	r24, 0x5E	; 94
    6a90:	9a e0       	ldi	r25, 0x0A	; 10
    6a92:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6a96:	63 ea       	ldi	r22, 0xA3	; 163
    6a98:	75 e0       	ldi	r23, 0x05	; 5
    6a9a:	85 e6       	ldi	r24, 0x65	; 101
    6a9c:	9a e0       	ldi	r25, 0x0A	; 10
    6a9e:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6aa2:	6e e9       	ldi	r22, 0x9E	; 158
    6aa4:	75 e0       	ldi	r23, 0x05	; 5
    6aa6:	8c ef       	ldi	r24, 0xFC	; 252
    6aa8:	99 e0       	ldi	r25, 0x09	; 9
    6aaa:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6aae:	67 e9       	ldi	r22, 0x97	; 151
    6ab0:	75 e0       	ldi	r23, 0x05	; 5
    6ab2:	83 e0       	ldi	r24, 0x03	; 3
    6ab4:	9a e0       	ldi	r25, 0x0A	; 10
    6ab6:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6aba:	6e e8       	ldi	r22, 0x8E	; 142
    6abc:	75 e0       	ldi	r23, 0x05	; 5
    6abe:	8a e0       	ldi	r24, 0x0A	; 10
    6ac0:	9a e0       	ldi	r25, 0x0A	; 10
    6ac2:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6ac6:	6a e8       	ldi	r22, 0x8A	; 138
    6ac8:	75 e0       	ldi	r23, 0x05	; 5
    6aca:	81 e1       	ldi	r24, 0x11	; 17
    6acc:	9a e0       	ldi	r25, 0x0A	; 10
    6ace:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6ad2:	66 e8       	ldi	r22, 0x86	; 134
    6ad4:	75 e0       	ldi	r23, 0x05	; 5
    6ad6:	88 e1       	ldi	r24, 0x18	; 24
    6ad8:	9a e0       	ldi	r25, 0x0A	; 10
    6ada:	0e 94 86 50 	call	0xa10c	; 0xa10c <String::String(char const*)>
    6ade:	6f e7       	ldi	r22, 0x7F	; 127
    6ae0:	75 e0       	ldi	r23, 0x05	; 5
    6ae2:	8f e1       	ldi	r24, 0x1F	; 31
    6ae4:	9a e0       	ldi	r25, 0x0A	; 10
    6ae6:	0c 94 86 50 	jmp	0xa10c	; 0xa10c <String::String(char const*)>

00006aea <_GLOBAL__sub_D_matrix>:
    6aea:	cf 93       	push	r28
    6aec:	df 93       	push	r29
    6aee:	c6 e2       	ldi	r28, 0x26	; 38
    6af0:	da e0       	ldi	r29, 0x0A	; 10
    6af2:	27 97       	sbiw	r28, 0x07	; 7
    6af4:	ce 01       	movw	r24, r28
    6af6:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    6afa:	89 e0       	ldi	r24, 0x09	; 9
    6afc:	cc 3f       	cpi	r28, 0xFC	; 252
    6afe:	d8 07       	cpc	r29, r24
    6b00:	c1 f7       	brne	.-16     	; 0x6af2 <_GLOBAL__sub_D_matrix+0x8>
    6b02:	cc e6       	ldi	r28, 0x6C	; 108
    6b04:	da e0       	ldi	r29, 0x0A	; 10
    6b06:	27 97       	sbiw	r28, 0x07	; 7
    6b08:	ce 01       	movw	r24, r28
    6b0a:	0e 94 1d 50 	call	0xa03a	; 0xa03a <String::~String()>
    6b0e:	8a e0       	ldi	r24, 0x0A	; 10
    6b10:	c6 32       	cpi	r28, 0x26	; 38
    6b12:	d8 07       	cpc	r29, r24
    6b14:	c1 f7       	brne	.-16     	; 0x6b06 <_GLOBAL__sub_D_matrix+0x1c>
    6b16:	df 91       	pop	r29
    6b18:	cf 91       	pop	r28
    6b1a:	08 95       	ret

00006b1c <checkIncomingMIDI()>:
    6b1c:	85 ef       	ldi	r24, 0xF5	; 245
    6b1e:	90 e1       	ldi	r25, 0x10	; 16
    6b20:	0e 94 88 4b 	call	0x9710	; 0x9710 <HardwareSerial::available()>
    6b24:	89 2b       	or	r24, r25
    6b26:	81 f0       	breq	.+32     	; 0x6b48 <checkIncomingMIDI()+0x2c>
    6b28:	85 ef       	ldi	r24, 0xF5	; 245
    6b2a:	90 e1       	ldi	r25, 0x10	; 16
    6b2c:	0e 94 bb 4b 	call	0x9776	; 0x9776 <HardwareSerial::read()>
    6b30:	80 93 d5 0a 	sts	0x0AD5, r24	; 0x800ad5 <incomingMidiByte>
    6b34:	8f 3f       	cpi	r24, 0xFF	; 255
    6b36:	41 f0       	breq	.+16     	; 0x6b48 <checkIncomingMIDI()+0x2c>
    6b38:	87 ff       	sbrs	r24, 7
    6b3a:	0d c0       	rjmp	.+26     	; 0x6b56 <checkIncomingMIDI()+0x3a>
    6b3c:	80 93 d4 0a 	sts	0x0AD4, r24	; 0x800ad4 <midiStatusByte>
    6b40:	10 92 d3 0a 	sts	0x0AD3, r1	; 0x800ad3 <midiDataByte1>
    6b44:	10 92 d2 0a 	sts	0x0AD2, r1	; 0x800ad2 <midiDataByte2>
    6b48:	85 ef       	ldi	r24, 0xF5	; 245
    6b4a:	90 e1       	ldi	r25, 0x10	; 16
    6b4c:	0e 94 88 4b 	call	0x9710	; 0x9710 <HardwareSerial::available()>
    6b50:	89 2b       	or	r24, r25
    6b52:	21 f7       	brne	.-56     	; 0x6b1c <checkIncomingMIDI()>
    6b54:	08 95       	ret
    6b56:	90 91 d3 0a 	lds	r25, 0x0AD3	; 0x800ad3 <midiDataByte1>
    6b5a:	91 11       	cpse	r25, r1
    6b5c:	11 c0       	rjmp	.+34     	; 0x6b80 <checkIncomingMIDI()+0x64>
    6b5e:	80 93 d3 0a 	sts	0x0AD3, r24	; 0x800ad3 <midiDataByte1>
    6b62:	80 91 d4 0a 	lds	r24, 0x0AD4	; 0x800ad4 <midiStatusByte>
    6b66:	89 3b       	cpi	r24, 0xB9	; 185
    6b68:	79 f7       	brne	.-34     	; 0x6b48 <checkIncomingMIDI()+0x2c>
    6b6a:	80 91 d3 0a 	lds	r24, 0x0AD3	; 0x800ad3 <midiDataByte1>
    6b6e:	86 31       	cpi	r24, 0x16	; 22
    6b70:	71 f4       	brne	.+28     	; 0x6b8e <checkIncomingMIDI()+0x72>
    6b72:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <midiDataByte2>
    6b76:	88 23       	and	r24, r24
    6b78:	39 f3       	breq	.-50     	; 0x6b48 <checkIncomingMIDI()+0x2c>
    6b7a:	0e 94 1a 1c 	call	0x3834	; 0x3834 <switchToSong(unsigned char)>
    6b7e:	e4 cf       	rjmp	.-56     	; 0x6b48 <checkIncomingMIDI()+0x2c>
    6b80:	90 91 d2 0a 	lds	r25, 0x0AD2	; 0x800ad2 <midiDataByte2>
    6b84:	91 11       	cpse	r25, r1
    6b86:	ed cf       	rjmp	.-38     	; 0x6b62 <checkIncomingMIDI()+0x46>
    6b88:	80 93 d2 0a 	sts	0x0AD2, r24	; 0x800ad2 <midiDataByte2>
    6b8c:	ea cf       	rjmp	.-44     	; 0x6b62 <checkIncomingMIDI()+0x46>
    6b8e:	87 31       	cpi	r24, 0x17	; 23
    6b90:	d9 f6       	brne	.-74     	; 0x6b48 <checkIncomingMIDI()+0x2c>
    6b92:	80 91 d2 0a 	lds	r24, 0x0AD2	; 0x800ad2 <midiDataByte2>
    6b96:	0e 94 89 1b 	call	0x3712	; 0x3712 <switchToPart(unsigned char)>
    6b9a:	d6 cf       	rjmp	.-84     	; 0x6b48 <checkIncomingMIDI()+0x2c>

00006b9c <loop>:
    6b9c:	8f 92       	push	r8
    6b9e:	9f 92       	push	r9
    6ba0:	af 92       	push	r10
    6ba2:	bf 92       	push	r11
    6ba4:	cf 92       	push	r12
    6ba6:	df 92       	push	r13
    6ba8:	ef 92       	push	r14
    6baa:	ff 92       	push	r15
    6bac:	0f 93       	push	r16
    6bae:	1f 93       	push	r17
    6bb0:	cf 93       	push	r28
    6bb2:	80 91 c2 0a 	lds	r24, 0x0AC2	; 0x800ac2 <ISR_USART_got_a_byte>
    6bb6:	88 23       	and	r24, r24
    6bb8:	41 f0       	breq	.+16     	; 0x6bca <loop+0x2e>
    6bba:	60 91 c3 0a 	lds	r22, 0x0AC3	; 0x800ac3 <ISR_received_USART_byte>
    6bbe:	8a e6       	ldi	r24, 0x6A	; 106
    6bc0:	91 e1       	ldi	r25, 0x11	; 17
    6bc2:	0e 94 65 08 	call	0x10ca	; 0x10ca <Print::println(unsigned char)>
    6bc6:	10 92 c2 0a 	sts	0x0AC2, r1	; 0x800ac2 <ISR_USART_got_a_byte>
    6bca:	80 91 c4 0a 	lds	r24, 0x0AC4	; 0x800ac4 <OneSecondHasPast>
    6bce:	88 23       	and	r24, r24
    6bd0:	39 f0       	breq	.+14     	; 0x6be0 <loop+0x44>
    6bd2:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <secondsForVoltage>
    6bd6:	8f 5f       	subi	r24, 0xFF	; 255
    6bd8:	80 93 cf 0a 	sts	0x0ACF, r24	; 0x800acf <secondsForVoltage>
    6bdc:	10 92 c4 0a 	sts	0x0AC4, r1	; 0x800ac4 <OneSecondHasPast>
    6be0:	80 91 cf 0a 	lds	r24, 0x0ACF	; 0x800acf <secondsForVoltage>
    6be4:	88 23       	and	r24, r24
    6be6:	09 f4       	brne	.+2      	; 0x6bea <loop+0x4e>
    6be8:	46 c0       	rjmp	.+140    	; 0x6c76 <loop+0xda>
    6bea:	c0 91 d1 0a 	lds	r28, 0x0AD1	; 0x800ad1 <voltageSmooth>
    6bee:	10 92 cf 0a 	sts	0x0ACF, r1	; 0x800acf <secondsForVoltage>
    6bf2:	88 e2       	ldi	r24, 0x28	; 40
    6bf4:	0e 94 a3 47 	call	0x8f46	; 0x8f46 <analogRead>
    6bf8:	bc 01       	movw	r22, r24
    6bfa:	99 0f       	add	r25, r25
    6bfc:	88 0b       	sbc	r24, r24
    6bfe:	99 0b       	sbc	r25, r25
    6c00:	1f 92       	push	r1
    6c02:	1f 92       	push	r1
    6c04:	1f 92       	push	r1
    6c06:	28 e7       	ldi	r18, 0x78	; 120
    6c08:	2f 93       	push	r18
    6c0a:	a1 2c       	mov	r10, r1
    6c0c:	b1 2c       	mov	r11, r1
    6c0e:	65 01       	movw	r12, r10
    6c10:	ee 24       	eor	r14, r14
    6c12:	ea 94       	dec	r14
    6c14:	13 e0       	ldi	r17, 0x03	; 3
    6c16:	f1 2e       	mov	r15, r17
    6c18:	00 e0       	ldi	r16, 0x00	; 0
    6c1a:	10 e0       	ldi	r17, 0x00	; 0
    6c1c:	20 e0       	ldi	r18, 0x00	; 0
    6c1e:	30 e0       	ldi	r19, 0x00	; 0
    6c20:	a9 01       	movw	r20, r18
    6c22:	0e 94 de 4f 	call	0x9fbc	; 0x9fbc <map(long, long, long, long, long)>
    6c26:	4b 01       	movw	r8, r22
    6c28:	5c 01       	movw	r10, r24
    6c2a:	6c 2f       	mov	r22, r28
    6c2c:	70 e0       	ldi	r23, 0x00	; 0
    6c2e:	90 e0       	ldi	r25, 0x00	; 0
    6c30:	80 e0       	ldi	r24, 0x00	; 0
    6c32:	0e 94 5b 51 	call	0xa2b6	; 0xa2b6 <__floatsisf>
    6c36:	23 e3       	ldi	r18, 0x33	; 51
    6c38:	33 e3       	ldi	r19, 0x33	; 51
    6c3a:	43 e3       	ldi	r20, 0x33	; 51
    6c3c:	5f e3       	ldi	r21, 0x3F	; 63
    6c3e:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__mulsf3>
    6c42:	6b 01       	movw	r12, r22
    6c44:	7c 01       	movw	r14, r24
    6c46:	c5 01       	movw	r24, r10
    6c48:	b4 01       	movw	r22, r8
    6c4a:	0e 94 5b 51 	call	0xa2b6	; 0xa2b6 <__floatsisf>
    6c4e:	2a e9       	ldi	r18, 0x9A	; 154
    6c50:	39 e9       	ldi	r19, 0x99	; 153
    6c52:	49 e9       	ldi	r20, 0x99	; 153
    6c54:	5e e3       	ldi	r21, 0x3E	; 62
    6c56:	0e 94 e7 51 	call	0xa3ce	; 0xa3ce <__mulsf3>
    6c5a:	9b 01       	movw	r18, r22
    6c5c:	ac 01       	movw	r20, r24
    6c5e:	c7 01       	movw	r24, r14
    6c60:	b6 01       	movw	r22, r12
    6c62:	0e 94 c9 50 	call	0xa192	; 0xa192 <__addsf3>
    6c66:	0e 94 2d 51 	call	0xa25a	; 0xa25a <__fixunssfsi>
    6c6a:	60 93 d1 0a 	sts	0x0AD1, r22	; 0x800ad1 <voltageSmooth>
    6c6e:	0f 90       	pop	r0
    6c70:	0f 90       	pop	r0
    6c72:	0f 90       	pop	r0
    6c74:	0f 90       	pop	r0
    6c76:	80 91 d1 0a 	lds	r24, 0x0AD1	; 0x800ad1 <voltageSmooth>
    6c7a:	87 36       	cpi	r24, 0x67	; 103
    6c7c:	08 f4       	brcc	.+2      	; 0x6c80 <loop+0xe4>
    6c7e:	6a c0       	rjmp	.+212    	; 0x6d54 <loop+0x1b8>
    6c80:	4d df       	rcall	.-358    	; 0x6b1c <checkIncomingMIDI()>
    6c82:	80 91 c8 0a 	lds	r24, 0x0AC8	; 0x800ac8 <flag_processFastLED>
    6c86:	88 23       	and	r24, r24
    6c88:	29 f1       	breq	.+74     	; 0x6cd4 <loop+0x138>
    6c8a:	8f e0       	ldi	r24, 0x0F	; 15
    6c8c:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <FastLED>
    6c90:	e0 91 da 0a 	lds	r30, 0x0ADA	; 0x800ada <songID>
    6c94:	e1 50       	subi	r30, 0x01	; 1
    6c96:	e4 31       	cpi	r30, 0x14	; 20
    6c98:	c8 f4       	brcc	.+50     	; 0x6ccc <loop+0x130>
    6c9a:	f0 e0       	ldi	r31, 0x00	; 0
    6c9c:	ee 5a       	subi	r30, 0xAE	; 174
    6c9e:	f9 4c       	sbci	r31, 0xC9	; 201
    6ca0:	0c 94 be 52 	jmp	0xa57c	; 0xa57c <__tablejump2__>
    6ca4:	76 36       	cpi	r23, 0x66	; 102
    6ca6:	79 36       	cpi	r23, 0x69	; 105
    6ca8:	7c 36       	cpi	r23, 0x6C	; 108
    6caa:	7f 36       	cpi	r23, 0x6F	; 111
    6cac:	82 36       	cpi	r24, 0x62	; 98
    6cae:	85 36       	cpi	r24, 0x65	; 101
    6cb0:	88 36       	cpi	r24, 0x68	; 104
    6cb2:	8b 36       	cpi	r24, 0x6B	; 107
    6cb4:	8e 36       	cpi	r24, 0x6E	; 110
    6cb6:	91 36       	cpi	r25, 0x61	; 97
    6cb8:	94 36       	cpi	r25, 0x64	; 100
    6cba:	97 36       	cpi	r25, 0x67	; 103
    6cbc:	9a 36       	cpi	r25, 0x6A	; 106
    6cbe:	9d 36       	cpi	r25, 0x6D	; 109
    6cc0:	a0 36       	cpi	r26, 0x60	; 96
    6cc2:	a3 36       	cpi	r26, 0x63	; 99
    6cc4:	a6 36       	cpi	r26, 0x66	; 102
    6cc6:	a8 36       	cpi	r26, 0x68	; 104
    6cc8:	66 36       	cpi	r22, 0x66	; 102
    6cca:	9a 36       	cpi	r25, 0x6A	; 106
    6ccc:	0e 94 12 1d 	call	0x3a24	; 0x3a24 <defaultLoop()>
    6cd0:	10 92 c8 0a 	sts	0x0AC8, r1	; 0x800ac8 <flag_processFastLED>
    6cd4:	cf 91       	pop	r28
    6cd6:	1f 91       	pop	r17
    6cd8:	0f 91       	pop	r16
    6cda:	ff 90       	pop	r15
    6cdc:	ef 90       	pop	r14
    6cde:	df 90       	pop	r13
    6ce0:	cf 90       	pop	r12
    6ce2:	bf 90       	pop	r11
    6ce4:	af 90       	pop	r10
    6ce6:	9f 90       	pop	r9
    6ce8:	8f 90       	pop	r8
    6cea:	08 95       	ret
    6cec:	0e 94 bd 1d 	call	0x3b7a	; 0x3b7a <LearnToFly()>
    6cf0:	ef cf       	rjmp	.-34     	; 0x6cd0 <loop+0x134>
    6cf2:	0e 94 82 1e 	call	0x3d04	; 0x3d04 <Castle()>
    6cf6:	ec cf       	rjmp	.-40     	; 0x6cd0 <loop+0x134>
    6cf8:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <TooClose()>
    6cfc:	e9 cf       	rjmp	.-46     	; 0x6cd0 <loop+0x134>
    6cfe:	0e 94 a4 20 	call	0x4148	; 0x4148 <Pokerface()>
    6d02:	e6 cf       	rjmp	.-52     	; 0x6cd0 <loop+0x134>
    6d04:	0e 94 89 21 	call	0x4312	; 0x4312 <UseSomebody()>
    6d08:	e3 cf       	rjmp	.-58     	; 0x6cd0 <loop+0x134>
    6d0a:	0e 94 46 22 	call	0x448c	; 0x448c <NoRoots()>
    6d0e:	e0 cf       	rjmp	.-64     	; 0x6cd0 <loop+0x134>
    6d10:	0e 94 af 23 	call	0x475e	; 0x475e <Firework()>
    6d14:	dd cf       	rjmp	.-70     	; 0x6cd0 <loop+0x134>
    6d16:	0e 94 ed 24 	call	0x49da	; 0x49da <Diamonds()>
    6d1a:	da cf       	rjmp	.-76     	; 0x6cd0 <loop+0x134>
    6d1c:	0e 94 b6 25 	call	0x4b6c	; 0x4b6c <SetFire()>
    6d20:	d7 cf       	rjmp	.-82     	; 0x6cd0 <loop+0x134>
    6d22:	0e 94 94 26 	call	0x4d28	; 0x4d28 <Chandelier()>
    6d26:	d4 cf       	rjmp	.-88     	; 0x6cd0 <loop+0x134>
    6d28:	0e 94 7c 27 	call	0x4ef8	; 0x4ef8 <Titanium()>
    6d2c:	d1 cf       	rjmp	.-94     	; 0x6cd0 <loop+0x134>
    6d2e:	0e 94 5a 28 	call	0x50b4	; 0x50b4 <SomeoneYouLoved()>
    6d32:	ce cf       	rjmp	.-100    	; 0x6cd0 <loop+0x134>
    6d34:	0e 94 42 29 	call	0x5284	; 0x5284 <ShouldntStop()>
    6d38:	cb cf       	rjmp	.-106    	; 0x6cd0 <loop+0x134>
    6d3a:	0e 94 2a 2a 	call	0x5454	; 0x5454 <SunAlwaysShinesOnTV()>
    6d3e:	c8 cf       	rjmp	.-112    	; 0x6cd0 <loop+0x134>
    6d40:	0e 94 40 2c 	call	0x5880	; 0x5880 <peopleArePeople()>
    6d44:	c5 cf       	rjmp	.-118    	; 0x6cd0 <loop+0x134>
    6d46:	0e 94 f5 2d 	call	0x5bea	; 0x5bea <enjoyTheSilence()>
    6d4a:	c2 cf       	rjmp	.-124    	; 0x6cd0 <loop+0x134>
    6d4c:	99 d8       	rcall	.-3790   	; 0x5e80 <sober()>
    6d4e:	c0 cf       	rjmp	.-128    	; 0x6cd0 <loop+0x134>
    6d50:	e4 d9       	rcall	.-3128   	; 0x611a <prisoner()>
    6d52:	be cf       	rjmp	.-132    	; 0x6cd0 <loop+0x134>
    6d54:	60 e0       	ldi	r22, 0x00	; 0
    6d56:	8a ed       	ldi	r24, 0xDA	; 218
    6d58:	90 e1       	ldi	r25, 0x10	; 16
    6d5a:	0e 94 e7 43 	call	0x87ce	; 0x87ce <CFastLED::clear(bool)>
    6d5e:	8a ed       	ldi	r24, 0xDA	; 218
    6d60:	90 e1       	ldi	r25, 0x10	; 16
    6d62:	0e 94 97 08 	call	0x112e	; 0x112e <CFastLED::show()>
    6d66:	64 ef       	ldi	r22, 0xF4	; 244
    6d68:	71 e0       	ldi	r23, 0x01	; 1
    6d6a:	80 e0       	ldi	r24, 0x00	; 0
    6d6c:	90 e0       	ldi	r25, 0x00	; 0
    6d6e:	0e 94 3b 49 	call	0x9276	; 0x9276 <delay>
    6d72:	8f e0       	ldi	r24, 0x0F	; 15
    6d74:	80 93 da 10 	sts	0x10DA, r24	; 0x8010da <FastLED>
    6d78:	8f ef       	ldi	r24, 0xFF	; 255
    6d7a:	80 93 db 0a 	sts	0x0ADB, r24	; 0x800adb <leds>
    6d7e:	10 92 dc 0a 	sts	0x0ADC, r1	; 0x800adc <leds+0x1>
    6d82:	10 92 dd 0a 	sts	0x0ADD, r1	; 0x800add <leds+0x2>
    6d86:	8a ed       	ldi	r24, 0xDA	; 218
    6d88:	90 e1       	ldi	r25, 0x10	; 16
    6d8a:	0e 94 97 08 	call	0x112e	; 0x112e <CFastLED::show()>
    6d8e:	64 ef       	ldi	r22, 0xF4	; 244
    6d90:	71 e0       	ldi	r23, 0x01	; 1
    6d92:	80 e0       	ldi	r24, 0x00	; 0
    6d94:	90 e0       	ldi	r25, 0x00	; 0
    6d96:	cf 91       	pop	r28
    6d98:	1f 91       	pop	r17
    6d9a:	0f 91       	pop	r16
    6d9c:	ff 90       	pop	r15
    6d9e:	ef 90       	pop	r14
    6da0:	df 90       	pop	r13
    6da2:	cf 90       	pop	r12
    6da4:	bf 90       	pop	r11
    6da6:	af 90       	pop	r10
    6da8:	9f 90       	pop	r9
    6daa:	8f 90       	pop	r8
    6dac:	0c 94 3b 49 	jmp	0x9276	; 0x9276 <delay>

00006db0 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    6db0:	90 e0       	ldi	r25, 0x00	; 0
    6db2:	80 e0       	ldi	r24, 0x00	; 0
    6db4:	08 95       	ret

00006db6 <Print::flush()>:
    6db6:	08 95       	ret

00006db8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    6db8:	2f 92       	push	r2
    6dba:	3f 92       	push	r3
    6dbc:	4f 92       	push	r4
    6dbe:	5f 92       	push	r5
    6dc0:	6f 92       	push	r6
    6dc2:	7f 92       	push	r7
    6dc4:	8f 92       	push	r8
    6dc6:	9f 92       	push	r9
    6dc8:	af 92       	push	r10
    6dca:	bf 92       	push	r11
    6dcc:	cf 92       	push	r12
    6dce:	df 92       	push	r13
    6dd0:	ef 92       	push	r14
    6dd2:	ff 92       	push	r15
    6dd4:	0f 93       	push	r16
    6dd6:	1f 93       	push	r17
    6dd8:	cf 93       	push	r28
    6dda:	df 93       	push	r29
    6ddc:	00 d0       	rcall	.+0      	; 0x6dde <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    6dde:	00 d0       	rcall	.+0      	; 0x6de0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    6de0:	00 d0       	rcall	.+0      	; 0x6de2 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    6de2:	cd b7       	in	r28, 0x3d	; 61
    6de4:	de b7       	in	r29, 0x3e	; 62
    6de6:	3c 01       	movw	r6, r24
    6de8:	6a 01       	movw	r12, r20
    6dea:	3e 83       	std	Y+6, r19	; 0x06
    6dec:	2d 83       	std	Y+5, r18	; 0x05
    6dee:	fc 82       	std	Y+4, r15	; 0x04
    6df0:	eb 82       	std	Y+3, r14	; 0x03
    6df2:	58 01       	movw	r10, r16
    6df4:	a4 1a       	sub	r10, r20
    6df6:	b5 0a       	sbc	r11, r21
    6df8:	b7 fe       	sbrs	r11, 7
    6dfa:	03 c0       	rjmp	.+6      	; 0x6e02 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    6dfc:	b1 94       	neg	r11
    6dfe:	a1 94       	neg	r10
    6e00:	b1 08       	sbc	r11, r1
    6e02:	8d 80       	ldd	r8, Y+5	; 0x05
    6e04:	9e 80       	ldd	r9, Y+6	; 0x06
    6e06:	86 1a       	sub	r8, r22
    6e08:	97 0a       	sbc	r9, r23
    6e0a:	97 fe       	sbrs	r9, 7
    6e0c:	03 c0       	rjmp	.+6      	; 0x6e14 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    6e0e:	91 94       	neg	r9
    6e10:	81 94       	neg	r8
    6e12:	91 08       	sbc	r9, r1
    6e14:	8a 14       	cp	r8, r10
    6e16:	9b 04       	cpc	r9, r11
    6e18:	5c f0       	brlt	.+22     	; 0x6e30 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    6e1a:	90 2f       	mov	r25, r16
    6e1c:	81 2f       	mov	r24, r17
    6e1e:	0d 81       	ldd	r16, Y+5	; 0x05
    6e20:	1e 81       	ldd	r17, Y+6	; 0x06
    6e22:	9d 83       	std	Y+5, r25	; 0x05
    6e24:	8e 83       	std	Y+6, r24	; 0x06
    6e26:	9c 2d       	mov	r25, r12
    6e28:	8d 2d       	mov	r24, r13
    6e2a:	6b 01       	movw	r12, r22
    6e2c:	69 2f       	mov	r22, r25
    6e2e:	78 2f       	mov	r23, r24
    6e30:	0c 15       	cp	r16, r12
    6e32:	1d 05       	cpc	r17, r13
    6e34:	5c f0       	brlt	.+22     	; 0x6e4c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    6e36:	9d 81       	ldd	r25, Y+5	; 0x05
    6e38:	8e 81       	ldd	r24, Y+6	; 0x06
    6e3a:	7e 83       	std	Y+6, r23	; 0x06
    6e3c:	6d 83       	std	Y+5, r22	; 0x05
    6e3e:	69 2f       	mov	r22, r25
    6e40:	78 2f       	mov	r23, r24
    6e42:	90 2f       	mov	r25, r16
    6e44:	81 2f       	mov	r24, r17
    6e46:	86 01       	movw	r16, r12
    6e48:	c9 2e       	mov	r12, r25
    6e4a:	d8 2e       	mov	r13, r24
    6e4c:	16 01       	movw	r2, r12
    6e4e:	20 1a       	sub	r2, r16
    6e50:	31 0a       	sbc	r3, r17
    6e52:	2b 01       	movw	r4, r22
    6e54:	2d 81       	ldd	r18, Y+5	; 0x05
    6e56:	3e 81       	ldd	r19, Y+6	; 0x06
    6e58:	42 1a       	sub	r4, r18
    6e5a:	53 0a       	sbc	r5, r19
    6e5c:	57 fe       	sbrs	r5, 7
    6e5e:	03 c0       	rjmp	.+6      	; 0x6e66 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    6e60:	51 94       	neg	r5
    6e62:	41 94       	neg	r4
    6e64:	51 08       	sbc	r5, r1
    6e66:	71 01       	movw	r14, r2
    6e68:	37 fe       	sbrs	r3, 7
    6e6a:	03 c0       	rjmp	.+6      	; 0x6e72 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    6e6c:	3f ef       	ldi	r19, 0xFF	; 255
    6e6e:	e3 1a       	sub	r14, r19
    6e70:	f3 0a       	sbc	r15, r19
    6e72:	f5 94       	asr	r15
    6e74:	e7 94       	ror	r14
    6e76:	8d 81       	ldd	r24, Y+5	; 0x05
    6e78:	9e 81       	ldd	r25, Y+6	; 0x06
    6e7a:	86 17       	cp	r24, r22
    6e7c:	97 07       	cpc	r25, r23
    6e7e:	5c f5       	brge	.+86     	; 0x6ed6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    6e80:	a1 e0       	ldi	r26, 0x01	; 1
    6e82:	b0 e0       	ldi	r27, 0x00	; 0
    6e84:	ba 83       	std	Y+2, r27	; 0x02
    6e86:	a9 83       	std	Y+1, r26	; 0x01
    6e88:	c0 16       	cp	r12, r16
    6e8a:	d1 06       	cpc	r13, r17
    6e8c:	4c f1       	brlt	.+82     	; 0x6ee0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    6e8e:	d3 01       	movw	r26, r6
    6e90:	ed 91       	ld	r30, X+
    6e92:	fc 91       	ld	r31, X
    6e94:	04 84       	ldd	r0, Z+12	; 0x0c
    6e96:	f5 85       	ldd	r31, Z+13	; 0x0d
    6e98:	e0 2d       	mov	r30, r0
    6e9a:	2b 81       	ldd	r18, Y+3	; 0x03
    6e9c:	3c 81       	ldd	r19, Y+4	; 0x04
    6e9e:	a8 01       	movw	r20, r16
    6ea0:	6d 81       	ldd	r22, Y+5	; 0x05
    6ea2:	7e 81       	ldd	r23, Y+6	; 0x06
    6ea4:	8a 14       	cp	r8, r10
    6ea6:	9b 04       	cpc	r9, r11
    6ea8:	1c f0       	brlt	.+6      	; 0x6eb0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    6eaa:	4d 81       	ldd	r20, Y+5	; 0x05
    6eac:	5e 81       	ldd	r21, Y+6	; 0x06
    6eae:	b8 01       	movw	r22, r16
    6eb0:	c3 01       	movw	r24, r6
    6eb2:	09 95       	icall
    6eb4:	e4 18       	sub	r14, r4
    6eb6:	f5 08       	sbc	r15, r5
    6eb8:	f7 fe       	sbrs	r15, 7
    6eba:	0a c0       	rjmp	.+20     	; 0x6ed0 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    6ebc:	2d 81       	ldd	r18, Y+5	; 0x05
    6ebe:	3e 81       	ldd	r19, Y+6	; 0x06
    6ec0:	89 81       	ldd	r24, Y+1	; 0x01
    6ec2:	9a 81       	ldd	r25, Y+2	; 0x02
    6ec4:	28 0f       	add	r18, r24
    6ec6:	39 1f       	adc	r19, r25
    6ec8:	3e 83       	std	Y+6, r19	; 0x06
    6eca:	2d 83       	std	Y+5, r18	; 0x05
    6ecc:	e2 0c       	add	r14, r2
    6ece:	f3 1c       	adc	r15, r3
    6ed0:	0f 5f       	subi	r16, 0xFF	; 255
    6ed2:	1f 4f       	sbci	r17, 0xFF	; 255
    6ed4:	d9 cf       	rjmp	.-78     	; 0x6e88 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    6ed6:	2f ef       	ldi	r18, 0xFF	; 255
    6ed8:	3f ef       	ldi	r19, 0xFF	; 255
    6eda:	3a 83       	std	Y+2, r19	; 0x02
    6edc:	29 83       	std	Y+1, r18	; 0x01
    6ede:	d4 cf       	rjmp	.-88     	; 0x6e88 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    6ee0:	26 96       	adiw	r28, 0x06	; 6
    6ee2:	0f b6       	in	r0, 0x3f	; 63
    6ee4:	f8 94       	cli
    6ee6:	de bf       	out	0x3e, r29	; 62
    6ee8:	0f be       	out	0x3f, r0	; 63
    6eea:	cd bf       	out	0x3d, r28	; 61
    6eec:	df 91       	pop	r29
    6eee:	cf 91       	pop	r28
    6ef0:	1f 91       	pop	r17
    6ef2:	0f 91       	pop	r16
    6ef4:	ff 90       	pop	r15
    6ef6:	ef 90       	pop	r14
    6ef8:	df 90       	pop	r13
    6efa:	cf 90       	pop	r12
    6efc:	bf 90       	pop	r11
    6efe:	af 90       	pop	r10
    6f00:	9f 90       	pop	r9
    6f02:	8f 90       	pop	r8
    6f04:	7f 90       	pop	r7
    6f06:	6f 90       	pop	r6
    6f08:	5f 90       	pop	r5
    6f0a:	4f 90       	pop	r4
    6f0c:	3f 90       	pop	r3
    6f0e:	2f 90       	pop	r2
    6f10:	08 95       	ret

00006f12 <Adafruit_GFX::startWrite()>:
    6f12:	08 95       	ret

00006f14 <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    6f14:	dc 01       	movw	r26, r24
    6f16:	ed 91       	ld	r30, X+
    6f18:	fc 91       	ld	r31, X
    6f1a:	00 84       	ldd	r0, Z+8	; 0x08
    6f1c:	f1 85       	ldd	r31, Z+9	; 0x09
    6f1e:	e0 2d       	mov	r30, r0
    6f20:	09 94       	ijmp

00006f22 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    6f22:	0f 93       	push	r16
    6f24:	1f 93       	push	r17
    6f26:	dc 01       	movw	r26, r24
    6f28:	ed 91       	ld	r30, X+
    6f2a:	fc 91       	ld	r31, X
    6f2c:	04 8c       	ldd	r0, Z+28	; 0x1c
    6f2e:	f5 8d       	ldd	r31, Z+29	; 0x1d
    6f30:	e0 2d       	mov	r30, r0
    6f32:	09 95       	icall
    6f34:	1f 91       	pop	r17
    6f36:	0f 91       	pop	r16
    6f38:	08 95       	ret

00006f3a <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    6f3a:	0f 93       	push	r16
    6f3c:	1f 93       	push	r17
    6f3e:	dc 01       	movw	r26, r24
    6f40:	ed 91       	ld	r30, X+
    6f42:	fc 91       	ld	r31, X
    6f44:	06 8c       	ldd	r0, Z+30	; 0x1e
    6f46:	f7 8d       	ldd	r31, Z+31	; 0x1f
    6f48:	e0 2d       	mov	r30, r0
    6f4a:	09 95       	icall
    6f4c:	1f 91       	pop	r17
    6f4e:	0f 91       	pop	r16
    6f50:	08 95       	ret

00006f52 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    6f52:	ef 92       	push	r14
    6f54:	ff 92       	push	r15
    6f56:	0f 93       	push	r16
    6f58:	1f 93       	push	r17
    6f5a:	dc 01       	movw	r26, r24
    6f5c:	ed 91       	ld	r30, X+
    6f5e:	fc 91       	ld	r31, X
    6f60:	00 a0       	ldd	r0, Z+32	; 0x20
    6f62:	f1 a1       	ldd	r31, Z+33	; 0x21
    6f64:	e0 2d       	mov	r30, r0
    6f66:	09 95       	icall
    6f68:	1f 91       	pop	r17
    6f6a:	0f 91       	pop	r16
    6f6c:	ff 90       	pop	r15
    6f6e:	ef 90       	pop	r14
    6f70:	08 95       	ret

00006f72 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    6f72:	8f 92       	push	r8
    6f74:	9f 92       	push	r9
    6f76:	af 92       	push	r10
    6f78:	bf 92       	push	r11
    6f7a:	cf 92       	push	r12
    6f7c:	df 92       	push	r13
    6f7e:	ef 92       	push	r14
    6f80:	ff 92       	push	r15
    6f82:	0f 93       	push	r16
    6f84:	1f 93       	push	r17
    6f86:	cf 93       	push	r28
    6f88:	df 93       	push	r29
    6f8a:	ec 01       	movw	r28, r24
    6f8c:	5b 01       	movw	r10, r22
    6f8e:	4a 01       	movw	r8, r20
    6f90:	69 01       	movw	r12, r18
    6f92:	78 01       	movw	r14, r16
    6f94:	e8 81       	ld	r30, Y
    6f96:	f9 81       	ldd	r31, Y+1	; 0x01
    6f98:	02 84       	ldd	r0, Z+10	; 0x0a
    6f9a:	f3 85       	ldd	r31, Z+11	; 0x0b
    6f9c:	e0 2d       	mov	r30, r0
    6f9e:	09 95       	icall
    6fa0:	c8 0c       	add	r12, r8
    6fa2:	d9 1c       	adc	r13, r9
    6fa4:	86 01       	movw	r16, r12
    6fa6:	01 50       	subi	r16, 0x01	; 1
    6fa8:	11 09       	sbc	r17, r1
    6faa:	e8 81       	ld	r30, Y
    6fac:	f9 81       	ldd	r31, Y+1	; 0x01
    6fae:	04 88       	ldd	r0, Z+20	; 0x14
    6fb0:	f5 89       	ldd	r31, Z+21	; 0x15
    6fb2:	e0 2d       	mov	r30, r0
    6fb4:	95 01       	movw	r18, r10
    6fb6:	a4 01       	movw	r20, r8
    6fb8:	b5 01       	movw	r22, r10
    6fba:	ce 01       	movw	r24, r28
    6fbc:	09 95       	icall
    6fbe:	e8 81       	ld	r30, Y
    6fc0:	f9 81       	ldd	r31, Y+1	; 0x01
    6fc2:	06 88       	ldd	r0, Z+22	; 0x16
    6fc4:	f7 89       	ldd	r31, Z+23	; 0x17
    6fc6:	e0 2d       	mov	r30, r0
    6fc8:	ce 01       	movw	r24, r28
    6fca:	df 91       	pop	r29
    6fcc:	cf 91       	pop	r28
    6fce:	1f 91       	pop	r17
    6fd0:	0f 91       	pop	r16
    6fd2:	ff 90       	pop	r15
    6fd4:	ef 90       	pop	r14
    6fd6:	df 90       	pop	r13
    6fd8:	cf 90       	pop	r12
    6fda:	bf 90       	pop	r11
    6fdc:	af 90       	pop	r10
    6fde:	9f 90       	pop	r9
    6fe0:	8f 90       	pop	r8
    6fe2:	09 94       	ijmp

00006fe4 <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    6fe4:	8f 92       	push	r8
    6fe6:	9f 92       	push	r9
    6fe8:	af 92       	push	r10
    6fea:	bf 92       	push	r11
    6fec:	cf 92       	push	r12
    6fee:	df 92       	push	r13
    6ff0:	ef 92       	push	r14
    6ff2:	ff 92       	push	r15
    6ff4:	0f 93       	push	r16
    6ff6:	1f 93       	push	r17
    6ff8:	cf 93       	push	r28
    6ffa:	df 93       	push	r29
    6ffc:	ec 01       	movw	r28, r24
    6ffe:	5b 01       	movw	r10, r22
    7000:	4a 01       	movw	r8, r20
    7002:	69 01       	movw	r12, r18
    7004:	e8 81       	ld	r30, Y
    7006:	f9 81       	ldd	r31, Y+1	; 0x01
    7008:	02 84       	ldd	r0, Z+10	; 0x0a
    700a:	f3 85       	ldd	r31, Z+11	; 0x0b
    700c:	e0 2d       	mov	r30, r0
    700e:	09 95       	icall
    7010:	95 01       	movw	r18, r10
    7012:	2c 0d       	add	r18, r12
    7014:	3d 1d       	adc	r19, r13
    7016:	21 50       	subi	r18, 0x01	; 1
    7018:	31 09       	sbc	r19, r1
    701a:	e8 81       	ld	r30, Y
    701c:	f9 81       	ldd	r31, Y+1	; 0x01
    701e:	04 88       	ldd	r0, Z+20	; 0x14
    7020:	f5 89       	ldd	r31, Z+21	; 0x15
    7022:	e0 2d       	mov	r30, r0
    7024:	78 01       	movw	r14, r16
    7026:	84 01       	movw	r16, r8
    7028:	a4 01       	movw	r20, r8
    702a:	b5 01       	movw	r22, r10
    702c:	ce 01       	movw	r24, r28
    702e:	09 95       	icall
    7030:	e8 81       	ld	r30, Y
    7032:	f9 81       	ldd	r31, Y+1	; 0x01
    7034:	06 88       	ldd	r0, Z+22	; 0x16
    7036:	f7 89       	ldd	r31, Z+23	; 0x17
    7038:	e0 2d       	mov	r30, r0
    703a:	ce 01       	movw	r24, r28
    703c:	df 91       	pop	r29
    703e:	cf 91       	pop	r28
    7040:	1f 91       	pop	r17
    7042:	0f 91       	pop	r16
    7044:	ff 90       	pop	r15
    7046:	ef 90       	pop	r14
    7048:	df 90       	pop	r13
    704a:	cf 90       	pop	r12
    704c:	bf 90       	pop	r11
    704e:	af 90       	pop	r10
    7050:	9f 90       	pop	r9
    7052:	8f 90       	pop	r8
    7054:	09 94       	ijmp

00007056 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    7056:	4f 92       	push	r4
    7058:	5f 92       	push	r5
    705a:	6f 92       	push	r6
    705c:	7f 92       	push	r7
    705e:	8f 92       	push	r8
    7060:	9f 92       	push	r9
    7062:	af 92       	push	r10
    7064:	bf 92       	push	r11
    7066:	cf 92       	push	r12
    7068:	df 92       	push	r13
    706a:	ef 92       	push	r14
    706c:	ff 92       	push	r15
    706e:	0f 93       	push	r16
    7070:	1f 93       	push	r17
    7072:	cf 93       	push	r28
    7074:	df 93       	push	r29
    7076:	6c 01       	movw	r12, r24
    7078:	2b 01       	movw	r4, r22
    707a:	5a 01       	movw	r10, r20
    707c:	39 01       	movw	r6, r18
    707e:	48 01       	movw	r8, r16
    7080:	dc 01       	movw	r26, r24
    7082:	ed 91       	ld	r30, X+
    7084:	fc 91       	ld	r31, X
    7086:	02 84       	ldd	r0, Z+10	; 0x0a
    7088:	f3 85       	ldd	r31, Z+11	; 0x0b
    708a:	e0 2d       	mov	r30, r0
    708c:	09 95       	icall
    708e:	e2 01       	movw	r28, r4
    7090:	64 0c       	add	r6, r4
    7092:	75 1c       	adc	r7, r5
    7094:	d6 01       	movw	r26, r12
    7096:	ed 91       	ld	r30, X+
    7098:	fc 91       	ld	r31, X
    709a:	c6 15       	cp	r28, r6
    709c:	d7 05       	cpc	r29, r7
    709e:	5c f4       	brge	.+22     	; 0x70b6 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    70a0:	00 88       	ldd	r0, Z+16	; 0x10
    70a2:	f1 89       	ldd	r31, Z+17	; 0x11
    70a4:	e0 2d       	mov	r30, r0
    70a6:	87 01       	movw	r16, r14
    70a8:	94 01       	movw	r18, r8
    70aa:	a5 01       	movw	r20, r10
    70ac:	be 01       	movw	r22, r28
    70ae:	c6 01       	movw	r24, r12
    70b0:	09 95       	icall
    70b2:	21 96       	adiw	r28, 0x01	; 1
    70b4:	ef cf       	rjmp	.-34     	; 0x7094 <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    70b6:	06 88       	ldd	r0, Z+22	; 0x16
    70b8:	f7 89       	ldd	r31, Z+23	; 0x17
    70ba:	e0 2d       	mov	r30, r0
    70bc:	c6 01       	movw	r24, r12
    70be:	df 91       	pop	r29
    70c0:	cf 91       	pop	r28
    70c2:	1f 91       	pop	r17
    70c4:	0f 91       	pop	r16
    70c6:	ff 90       	pop	r15
    70c8:	ef 90       	pop	r14
    70ca:	df 90       	pop	r13
    70cc:	cf 90       	pop	r12
    70ce:	bf 90       	pop	r11
    70d0:	af 90       	pop	r10
    70d2:	9f 90       	pop	r9
    70d4:	8f 90       	pop	r8
    70d6:	7f 90       	pop	r7
    70d8:	6f 90       	pop	r6
    70da:	5f 90       	pop	r5
    70dc:	4f 90       	pop	r4
    70de:	09 94       	ijmp

000070e0 <Adafruit_GFX::fillScreen(unsigned int)>:
    70e0:	ef 92       	push	r14
    70e2:	ff 92       	push	r15
    70e4:	0f 93       	push	r16
    70e6:	1f 93       	push	r17
    70e8:	dc 01       	movw	r26, r24
    70ea:	19 96       	adiw	r26, 0x09	; 9
    70ec:	0d 91       	ld	r16, X+
    70ee:	1c 91       	ld	r17, X
    70f0:	1a 97       	sbiw	r26, 0x0a	; 10
    70f2:	17 96       	adiw	r26, 0x07	; 7
    70f4:	2d 91       	ld	r18, X+
    70f6:	3c 91       	ld	r19, X
    70f8:	18 97       	sbiw	r26, 0x08	; 8
    70fa:	ed 91       	ld	r30, X+
    70fc:	fc 91       	ld	r31, X
    70fe:	00 a0       	ldd	r0, Z+32	; 0x20
    7100:	f1 a1       	ldd	r31, Z+33	; 0x21
    7102:	e0 2d       	mov	r30, r0
    7104:	7b 01       	movw	r14, r22
    7106:	50 e0       	ldi	r21, 0x00	; 0
    7108:	40 e0       	ldi	r20, 0x00	; 0
    710a:	70 e0       	ldi	r23, 0x00	; 0
    710c:	60 e0       	ldi	r22, 0x00	; 0
    710e:	09 95       	icall
    7110:	1f 91       	pop	r17
    7112:	0f 91       	pop	r16
    7114:	ff 90       	pop	r15
    7116:	ef 90       	pop	r14
    7118:	08 95       	ret

0000711a <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    711a:	6f 92       	push	r6
    711c:	7f 92       	push	r7
    711e:	8f 92       	push	r8
    7120:	9f 92       	push	r9
    7122:	af 92       	push	r10
    7124:	bf 92       	push	r11
    7126:	cf 92       	push	r12
    7128:	df 92       	push	r13
    712a:	ef 92       	push	r14
    712c:	ff 92       	push	r15
    712e:	0f 93       	push	r16
    7130:	1f 93       	push	r17
    7132:	cf 93       	push	r28
    7134:	df 93       	push	r29
    7136:	ec 01       	movw	r28, r24
    7138:	6b 01       	movw	r12, r22
    713a:	5a 01       	movw	r10, r20
    713c:	39 01       	movw	r6, r18
    713e:	48 01       	movw	r8, r16
    7140:	e8 81       	ld	r30, Y
    7142:	f9 81       	ldd	r31, Y+1	; 0x01
    7144:	02 84       	ldd	r0, Z+10	; 0x0a
    7146:	f3 85       	ldd	r31, Z+11	; 0x0b
    7148:	e0 2d       	mov	r30, r0
    714a:	09 95       	icall
    714c:	e8 81       	ld	r30, Y
    714e:	f9 81       	ldd	r31, Y+1	; 0x01
    7150:	02 88       	ldd	r0, Z+18	; 0x12
    7152:	f3 89       	ldd	r31, Z+19	; 0x13
    7154:	e0 2d       	mov	r30, r0
    7156:	87 01       	movw	r16, r14
    7158:	93 01       	movw	r18, r6
    715a:	a5 01       	movw	r20, r10
    715c:	b6 01       	movw	r22, r12
    715e:	ce 01       	movw	r24, r28
    7160:	09 95       	icall
    7162:	a5 01       	movw	r20, r10
    7164:	48 0d       	add	r20, r8
    7166:	59 1d       	adc	r21, r9
    7168:	41 50       	subi	r20, 0x01	; 1
    716a:	51 09       	sbc	r21, r1
    716c:	e8 81       	ld	r30, Y
    716e:	f9 81       	ldd	r31, Y+1	; 0x01
    7170:	02 88       	ldd	r0, Z+18	; 0x12
    7172:	f3 89       	ldd	r31, Z+19	; 0x13
    7174:	e0 2d       	mov	r30, r0
    7176:	93 01       	movw	r18, r6
    7178:	b6 01       	movw	r22, r12
    717a:	ce 01       	movw	r24, r28
    717c:	09 95       	icall
    717e:	e8 81       	ld	r30, Y
    7180:	f9 81       	ldd	r31, Y+1	; 0x01
    7182:	00 88       	ldd	r0, Z+16	; 0x10
    7184:	f1 89       	ldd	r31, Z+17	; 0x11
    7186:	e0 2d       	mov	r30, r0
    7188:	94 01       	movw	r18, r8
    718a:	a5 01       	movw	r20, r10
    718c:	b6 01       	movw	r22, r12
    718e:	ce 01       	movw	r24, r28
    7190:	09 95       	icall
    7192:	c6 0c       	add	r12, r6
    7194:	d7 1c       	adc	r13, r7
    7196:	b6 01       	movw	r22, r12
    7198:	61 50       	subi	r22, 0x01	; 1
    719a:	71 09       	sbc	r23, r1
    719c:	e8 81       	ld	r30, Y
    719e:	f9 81       	ldd	r31, Y+1	; 0x01
    71a0:	00 88       	ldd	r0, Z+16	; 0x10
    71a2:	f1 89       	ldd	r31, Z+17	; 0x11
    71a4:	e0 2d       	mov	r30, r0
    71a6:	94 01       	movw	r18, r8
    71a8:	a5 01       	movw	r20, r10
    71aa:	ce 01       	movw	r24, r28
    71ac:	09 95       	icall
    71ae:	e8 81       	ld	r30, Y
    71b0:	f9 81       	ldd	r31, Y+1	; 0x01
    71b2:	06 88       	ldd	r0, Z+22	; 0x16
    71b4:	f7 89       	ldd	r31, Z+23	; 0x17
    71b6:	e0 2d       	mov	r30, r0
    71b8:	ce 01       	movw	r24, r28
    71ba:	df 91       	pop	r29
    71bc:	cf 91       	pop	r28
    71be:	1f 91       	pop	r17
    71c0:	0f 91       	pop	r16
    71c2:	ff 90       	pop	r15
    71c4:	ef 90       	pop	r14
    71c6:	df 90       	pop	r13
    71c8:	cf 90       	pop	r12
    71ca:	bf 90       	pop	r11
    71cc:	af 90       	pop	r10
    71ce:	9f 90       	pop	r9
    71d0:	8f 90       	pop	r8
    71d2:	7f 90       	pop	r7
    71d4:	6f 90       	pop	r6
    71d6:	09 94       	ijmp

000071d8 <Adafruit_GFX::invertDisplay(bool)>:
    71d8:	08 95       	ret

000071da <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    71da:	6f 92       	push	r6
    71dc:	7f 92       	push	r7
    71de:	8f 92       	push	r8
    71e0:	9f 92       	push	r9
    71e2:	af 92       	push	r10
    71e4:	bf 92       	push	r11
    71e6:	cf 92       	push	r12
    71e8:	df 92       	push	r13
    71ea:	ef 92       	push	r14
    71ec:	ff 92       	push	r15
    71ee:	0f 93       	push	r16
    71f0:	1f 93       	push	r17
    71f2:	cf 93       	push	r28
    71f4:	df 93       	push	r29
    71f6:	5c 01       	movw	r10, r24
    71f8:	eb 01       	movw	r28, r22
    71fa:	6a 01       	movw	r12, r20
    71fc:	49 01       	movw	r8, r18
    71fe:	38 01       	movw	r6, r16
    7200:	87 01       	movw	r16, r14
    7202:	dc 01       	movw	r26, r24
    7204:	ed 91       	ld	r30, X+
    7206:	fc 91       	ld	r31, X
    7208:	62 17       	cp	r22, r18
    720a:	73 07       	cpc	r23, r19
    720c:	19 f5       	brne	.+70     	; 0x7254 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    720e:	64 16       	cp	r6, r20
    7210:	75 06       	cpc	r7, r21
    7212:	2c f0       	brlt	.+10     	; 0x721e <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    7214:	96 2d       	mov	r25, r6
    7216:	87 2d       	mov	r24, r7
    7218:	3a 01       	movw	r6, r20
    721a:	c9 2e       	mov	r12, r25
    721c:	d8 2e       	mov	r13, r24
    721e:	96 01       	movw	r18, r12
    7220:	26 19       	sub	r18, r6
    7222:	37 09       	sbc	r19, r7
    7224:	2f 5f       	subi	r18, 0xFF	; 255
    7226:	3f 4f       	sbci	r19, 0xFF	; 255
    7228:	04 8c       	ldd	r0, Z+28	; 0x1c
    722a:	f5 8d       	ldd	r31, Z+29	; 0x1d
    722c:	e0 2d       	mov	r30, r0
    722e:	a3 01       	movw	r20, r6
    7230:	be 01       	movw	r22, r28
    7232:	c5 01       	movw	r24, r10
    7234:	09 95       	icall
    7236:	df 91       	pop	r29
    7238:	cf 91       	pop	r28
    723a:	1f 91       	pop	r17
    723c:	0f 91       	pop	r16
    723e:	ff 90       	pop	r15
    7240:	ef 90       	pop	r14
    7242:	df 90       	pop	r13
    7244:	cf 90       	pop	r12
    7246:	bf 90       	pop	r11
    7248:	af 90       	pop	r10
    724a:	9f 90       	pop	r9
    724c:	8f 90       	pop	r8
    724e:	7f 90       	pop	r7
    7250:	6f 90       	pop	r6
    7252:	08 95       	ret
    7254:	46 15       	cp	r20, r6
    7256:	57 05       	cpc	r21, r7
    7258:	91 f4       	brne	.+36     	; 0x727e <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    725a:	26 17       	cp	r18, r22
    725c:	37 07       	cpc	r19, r23
    725e:	24 f0       	brlt	.+8      	; 0x7268 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    7260:	89 2d       	mov	r24, r9
    7262:	4b 01       	movw	r8, r22
    7264:	c2 2f       	mov	r28, r18
    7266:	d8 2f       	mov	r29, r24
    7268:	9e 01       	movw	r18, r28
    726a:	28 19       	sub	r18, r8
    726c:	39 09       	sbc	r19, r9
    726e:	2f 5f       	subi	r18, 0xFF	; 255
    7270:	3f 4f       	sbci	r19, 0xFF	; 255
    7272:	06 8c       	ldd	r0, Z+30	; 0x1e
    7274:	f7 8d       	ldd	r31, Z+31	; 0x1f
    7276:	e0 2d       	mov	r30, r0
    7278:	a6 01       	movw	r20, r12
    727a:	b4 01       	movw	r22, r8
    727c:	da cf       	rjmp	.-76     	; 0x7232 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    727e:	02 84       	ldd	r0, Z+10	; 0x0a
    7280:	f3 85       	ldd	r31, Z+11	; 0x0b
    7282:	e0 2d       	mov	r30, r0
    7284:	09 95       	icall
    7286:	d5 01       	movw	r26, r10
    7288:	ed 91       	ld	r30, X+
    728a:	fc 91       	ld	r31, X
    728c:	04 88       	ldd	r0, Z+20	; 0x14
    728e:	f5 89       	ldd	r31, Z+21	; 0x15
    7290:	e0 2d       	mov	r30, r0
    7292:	83 01       	movw	r16, r6
    7294:	94 01       	movw	r18, r8
    7296:	a6 01       	movw	r20, r12
    7298:	be 01       	movw	r22, r28
    729a:	c5 01       	movw	r24, r10
    729c:	09 95       	icall
    729e:	d5 01       	movw	r26, r10
    72a0:	ed 91       	ld	r30, X+
    72a2:	fc 91       	ld	r31, X
    72a4:	06 88       	ldd	r0, Z+22	; 0x16
    72a6:	f7 89       	ldd	r31, Z+23	; 0x17
    72a8:	e0 2d       	mov	r30, r0
    72aa:	c5 01       	movw	r24, r10
    72ac:	df 91       	pop	r29
    72ae:	cf 91       	pop	r28
    72b0:	1f 91       	pop	r17
    72b2:	0f 91       	pop	r16
    72b4:	ff 90       	pop	r15
    72b6:	ef 90       	pop	r14
    72b8:	df 90       	pop	r13
    72ba:	cf 90       	pop	r12
    72bc:	bf 90       	pop	r11
    72be:	af 90       	pop	r10
    72c0:	9f 90       	pop	r9
    72c2:	8f 90       	pop	r8
    72c4:	7f 90       	pop	r7
    72c6:	6f 90       	pop	r6
    72c8:	09 94       	ijmp

000072ca <Adafruit_GFX::setRotation(unsigned char)>:
    72ca:	fc 01       	movw	r30, r24
    72cc:	63 70       	andi	r22, 0x03	; 3
    72ce:	65 8b       	std	Z+21, r22	; 0x15
    72d0:	83 81       	ldd	r24, Z+3	; 0x03
    72d2:	94 81       	ldd	r25, Z+4	; 0x04
    72d4:	25 81       	ldd	r18, Z+5	; 0x05
    72d6:	36 81       	ldd	r19, Z+6	; 0x06
    72d8:	61 30       	cpi	r22, 0x01	; 1
    72da:	39 f0       	breq	.+14     	; 0x72ea <Adafruit_GFX::setRotation(unsigned char)+0x20>
    72dc:	63 30       	cpi	r22, 0x03	; 3
    72de:	29 f0       	breq	.+10     	; 0x72ea <Adafruit_GFX::setRotation(unsigned char)+0x20>
    72e0:	90 87       	std	Z+8, r25	; 0x08
    72e2:	87 83       	std	Z+7, r24	; 0x07
    72e4:	32 87       	std	Z+10, r19	; 0x0a
    72e6:	21 87       	std	Z+9, r18	; 0x09
    72e8:	08 95       	ret
    72ea:	30 87       	std	Z+8, r19	; 0x08
    72ec:	27 83       	std	Z+7, r18	; 0x07
    72ee:	92 87       	std	Z+10, r25	; 0x0a
    72f0:	81 87       	std	Z+9, r24	; 0x09
    72f2:	08 95       	ret

000072f4 <Adafruit_GFX::Adafruit_GFX(int, int)>:
    72f4:	fc 01       	movw	r30, r24
    72f6:	12 82       	std	Z+2, r1	; 0x02
    72f8:	87 e0       	ldi	r24, 0x07	; 7
    72fa:	99 e0       	ldi	r25, 0x09	; 9
    72fc:	91 83       	std	Z+1, r25	; 0x01
    72fe:	80 83       	st	Z, r24
    7300:	74 83       	std	Z+4, r23	; 0x04
    7302:	63 83       	std	Z+3, r22	; 0x03
    7304:	56 83       	std	Z+6, r21	; 0x06
    7306:	45 83       	std	Z+5, r20	; 0x05
    7308:	70 87       	std	Z+8, r23	; 0x08
    730a:	67 83       	std	Z+7, r22	; 0x07
    730c:	52 87       	std	Z+10, r21	; 0x0a
    730e:	41 87       	std	Z+9, r20	; 0x09
    7310:	15 8a       	std	Z+21, r1	; 0x15
    7312:	14 86       	std	Z+12, r1	; 0x0c
    7314:	13 86       	std	Z+11, r1	; 0x0b
    7316:	16 86       	std	Z+14, r1	; 0x0e
    7318:	15 86       	std	Z+13, r1	; 0x0d
    731a:	81 e0       	ldi	r24, 0x01	; 1
    731c:	84 8b       	std	Z+20, r24	; 0x14
    731e:	83 8b       	std	Z+19, r24	; 0x13
    7320:	2f ef       	ldi	r18, 0xFF	; 255
    7322:	3f ef       	ldi	r19, 0xFF	; 255
    7324:	32 8b       	std	Z+18, r19	; 0x12
    7326:	21 8b       	std	Z+17, r18	; 0x11
    7328:	30 8b       	std	Z+16, r19	; 0x10
    732a:	27 87       	std	Z+15, r18	; 0x0f
    732c:	86 8b       	std	Z+22, r24	; 0x16
    732e:	17 8a       	std	Z+23, r1	; 0x17
    7330:	11 8e       	std	Z+25, r1	; 0x19
    7332:	10 8e       	std	Z+24, r1	; 0x18
    7334:	08 95       	ret

00007336 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    7336:	2f 92       	push	r2
    7338:	3f 92       	push	r3
    733a:	4f 92       	push	r4
    733c:	5f 92       	push	r5
    733e:	6f 92       	push	r6
    7340:	7f 92       	push	r7
    7342:	8f 92       	push	r8
    7344:	9f 92       	push	r9
    7346:	af 92       	push	r10
    7348:	bf 92       	push	r11
    734a:	cf 92       	push	r12
    734c:	df 92       	push	r13
    734e:	ef 92       	push	r14
    7350:	ff 92       	push	r15
    7352:	0f 93       	push	r16
    7354:	1f 93       	push	r17
    7356:	cf 93       	push	r28
    7358:	df 93       	push	r29
    735a:	cd b7       	in	r28, 0x3d	; 61
    735c:	de b7       	in	r29, 0x3e	; 62
    735e:	2e 97       	sbiw	r28, 0x0e	; 14
    7360:	0f b6       	in	r0, 0x3f	; 63
    7362:	f8 94       	cli
    7364:	de bf       	out	0x3e, r29	; 62
    7366:	0f be       	out	0x3f, r0	; 63
    7368:	cd bf       	out	0x3d, r28	; 61
    736a:	5c 01       	movw	r10, r24
    736c:	2b 01       	movw	r4, r22
    736e:	5c 83       	std	Y+4, r21	; 0x04
    7370:	4b 83       	std	Y+3, r20	; 0x03
    7372:	3e 87       	std	Y+14, r19	; 0x0e
    7374:	2d 87       	std	Y+13, r18	; 0x0d
    7376:	fe 82       	std	Y+6, r15	; 0x06
    7378:	ed 82       	std	Y+5, r14	; 0x05
    737a:	16 01       	movw	r2, r12
    737c:	81 e0       	ldi	r24, 0x01	; 1
    737e:	90 e0       	ldi	r25, 0x00	; 0
    7380:	4c 01       	movw	r8, r24
    7382:	82 1a       	sub	r8, r18
    7384:	93 0a       	sbc	r9, r19
    7386:	c9 01       	movw	r24, r18
    7388:	91 95       	neg	r25
    738a:	81 95       	neg	r24
    738c:	91 09       	sbc	r25, r1
    738e:	9c 01       	movw	r18, r24
    7390:	22 0f       	add	r18, r18
    7392:	33 1f       	adc	r19, r19
    7394:	3a 83       	std	Y+2, r19	; 0x02
    7396:	29 83       	std	Y+1, r18	; 0x01
    7398:	c7 01       	movw	r24, r14
    739a:	01 96       	adiw	r24, 0x01	; 1
    739c:	98 87       	std	Y+8, r25	; 0x08
    739e:	8f 83       	std	Y+7, r24	; 0x07
    73a0:	f1 2c       	mov	r15, r1
    73a2:	e1 2c       	mov	r14, r1
    73a4:	66 24       	eor	r6, r6
    73a6:	63 94       	inc	r6
    73a8:	71 2c       	mov	r7, r1
    73aa:	90 2f       	mov	r25, r16
    73ac:	91 70       	andi	r25, 0x01	; 1
    73ae:	99 87       	std	Y+9, r25	; 0x09
    73b0:	02 70       	andi	r16, 0x02	; 2
    73b2:	0a 87       	std	Y+10, r16	; 0x0a
    73b4:	da 01       	movw	r26, r20
    73b6:	11 96       	adiw	r26, 0x01	; 1
    73b8:	bc 87       	std	Y+12, r27	; 0x0c
    73ba:	ab 87       	std	Y+11, r26	; 0x0b
    73bc:	2d 85       	ldd	r18, Y+13	; 0x0d
    73be:	3e 85       	ldd	r19, Y+14	; 0x0e
    73c0:	e2 16       	cp	r14, r18
    73c2:	f3 06       	cpc	r15, r19
    73c4:	0c f0       	brlt	.+2      	; 0x73c8 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    73c6:	8d c0       	rjmp	.+282    	; 0x74e2 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    73c8:	cd 84       	ldd	r12, Y+13	; 0x0d
    73ca:	de 84       	ldd	r13, Y+14	; 0x0e
    73cc:	97 fc       	sbrc	r9, 7
    73ce:	0b c0       	rjmp	.+22     	; 0x73e6 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    73d0:	69 01       	movw	r12, r18
    73d2:	31 e0       	ldi	r19, 0x01	; 1
    73d4:	c3 1a       	sub	r12, r19
    73d6:	d1 08       	sbc	r13, r1
    73d8:	89 81       	ldd	r24, Y+1	; 0x01
    73da:	9a 81       	ldd	r25, Y+2	; 0x02
    73dc:	02 96       	adiw	r24, 0x02	; 2
    73de:	9a 83       	std	Y+2, r25	; 0x02
    73e0:	89 83       	std	Y+1, r24	; 0x01
    73e2:	88 0e       	add	r8, r24
    73e4:	99 1e       	adc	r9, r25
    73e6:	9f ef       	ldi	r25, 0xFF	; 255
    73e8:	e9 1a       	sub	r14, r25
    73ea:	f9 0a       	sbc	r15, r25
    73ec:	a2 e0       	ldi	r26, 0x02	; 2
    73ee:	6a 0e       	add	r6, r26
    73f0:	71 1c       	adc	r7, r1
    73f2:	86 0c       	add	r8, r6
    73f4:	97 1c       	adc	r9, r7
    73f6:	ce 14       	cp	r12, r14
    73f8:	df 04       	cpc	r13, r15
    73fa:	a4 f1       	brlt	.+104    	; 0x7464 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    73fc:	b9 85       	ldd	r27, Y+9	; 0x09
    73fe:	bb 23       	and	r27, r27
    7400:	b9 f0       	breq	.+46     	; 0x7430 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    7402:	96 01       	movw	r18, r12
    7404:	22 0f       	add	r18, r18
    7406:	33 1f       	adc	r19, r19
    7408:	8f 81       	ldd	r24, Y+7	; 0x07
    740a:	98 85       	ldd	r25, Y+8	; 0x08
    740c:	28 0f       	add	r18, r24
    740e:	39 1f       	adc	r19, r25
    7410:	d5 01       	movw	r26, r10
    7412:	ed 91       	ld	r30, X+
    7414:	fc 91       	ld	r31, X
    7416:	00 88       	ldd	r0, Z+16	; 0x10
    7418:	f1 89       	ldd	r31, Z+17	; 0x11
    741a:	e0 2d       	mov	r30, r0
    741c:	81 01       	movw	r16, r2
    741e:	4b 81       	ldd	r20, Y+3	; 0x03
    7420:	5c 81       	ldd	r21, Y+4	; 0x04
    7422:	4c 19       	sub	r20, r12
    7424:	5d 09       	sbc	r21, r13
    7426:	b2 01       	movw	r22, r4
    7428:	6e 0d       	add	r22, r14
    742a:	7f 1d       	adc	r23, r15
    742c:	c5 01       	movw	r24, r10
    742e:	09 95       	icall
    7430:	ba 85       	ldd	r27, Y+10	; 0x0a
    7432:	bb 23       	and	r27, r27
    7434:	b9 f0       	breq	.+46     	; 0x7464 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    7436:	96 01       	movw	r18, r12
    7438:	22 0f       	add	r18, r18
    743a:	33 1f       	adc	r19, r19
    743c:	8f 81       	ldd	r24, Y+7	; 0x07
    743e:	98 85       	ldd	r25, Y+8	; 0x08
    7440:	28 0f       	add	r18, r24
    7442:	39 1f       	adc	r19, r25
    7444:	d5 01       	movw	r26, r10
    7446:	ed 91       	ld	r30, X+
    7448:	fc 91       	ld	r31, X
    744a:	00 88       	ldd	r0, Z+16	; 0x10
    744c:	f1 89       	ldd	r31, Z+17	; 0x11
    744e:	e0 2d       	mov	r30, r0
    7450:	81 01       	movw	r16, r2
    7452:	4b 81       	ldd	r20, Y+3	; 0x03
    7454:	5c 81       	ldd	r21, Y+4	; 0x04
    7456:	4c 19       	sub	r20, r12
    7458:	5d 09       	sbc	r21, r13
    745a:	b2 01       	movw	r22, r4
    745c:	6e 19       	sub	r22, r14
    745e:	7f 09       	sbc	r23, r15
    7460:	c5 01       	movw	r24, r10
    7462:	09 95       	icall
    7464:	2d 85       	ldd	r18, Y+13	; 0x0d
    7466:	3e 85       	ldd	r19, Y+14	; 0x0e
    7468:	2c 15       	cp	r18, r12
    746a:	3d 05       	cpc	r19, r13
    746c:	b9 f1       	breq	.+110    	; 0x74dc <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    746e:	39 85       	ldd	r19, Y+9	; 0x09
    7470:	33 23       	and	r19, r19
    7472:	c1 f0       	breq	.+48     	; 0x74a4 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    7474:	93 01       	movw	r18, r6
    7476:	22 50       	subi	r18, 0x02	; 2
    7478:	31 09       	sbc	r19, r1
    747a:	8d 81       	ldd	r24, Y+5	; 0x05
    747c:	9e 81       	ldd	r25, Y+6	; 0x06
    747e:	28 0f       	add	r18, r24
    7480:	39 1f       	adc	r19, r25
    7482:	d5 01       	movw	r26, r10
    7484:	ed 91       	ld	r30, X+
    7486:	fc 91       	ld	r31, X
    7488:	00 88       	ldd	r0, Z+16	; 0x10
    748a:	f1 89       	ldd	r31, Z+17	; 0x11
    748c:	e0 2d       	mov	r30, r0
    748e:	81 01       	movw	r16, r2
    7490:	4b 85       	ldd	r20, Y+11	; 0x0b
    7492:	5c 85       	ldd	r21, Y+12	; 0x0c
    7494:	4e 19       	sub	r20, r14
    7496:	5f 09       	sbc	r21, r15
    7498:	6d 85       	ldd	r22, Y+13	; 0x0d
    749a:	7e 85       	ldd	r23, Y+14	; 0x0e
    749c:	64 0d       	add	r22, r4
    749e:	75 1d       	adc	r23, r5
    74a0:	c5 01       	movw	r24, r10
    74a2:	09 95       	icall
    74a4:	ba 85       	ldd	r27, Y+10	; 0x0a
    74a6:	bb 23       	and	r27, r27
    74a8:	c9 f0       	breq	.+50     	; 0x74dc <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    74aa:	93 01       	movw	r18, r6
    74ac:	22 50       	subi	r18, 0x02	; 2
    74ae:	31 09       	sbc	r19, r1
    74b0:	8d 81       	ldd	r24, Y+5	; 0x05
    74b2:	9e 81       	ldd	r25, Y+6	; 0x06
    74b4:	28 0f       	add	r18, r24
    74b6:	39 1f       	adc	r19, r25
    74b8:	b2 01       	movw	r22, r4
    74ba:	ad 85       	ldd	r26, Y+13	; 0x0d
    74bc:	be 85       	ldd	r27, Y+14	; 0x0e
    74be:	6a 1b       	sub	r22, r26
    74c0:	7b 0b       	sbc	r23, r27
    74c2:	d5 01       	movw	r26, r10
    74c4:	ed 91       	ld	r30, X+
    74c6:	fc 91       	ld	r31, X
    74c8:	00 88       	ldd	r0, Z+16	; 0x10
    74ca:	f1 89       	ldd	r31, Z+17	; 0x11
    74cc:	e0 2d       	mov	r30, r0
    74ce:	81 01       	movw	r16, r2
    74d0:	4b 85       	ldd	r20, Y+11	; 0x0b
    74d2:	5c 85       	ldd	r21, Y+12	; 0x0c
    74d4:	4e 19       	sub	r20, r14
    74d6:	5f 09       	sbc	r21, r15
    74d8:	c5 01       	movw	r24, r10
    74da:	09 95       	icall
    74dc:	de 86       	std	Y+14, r13	; 0x0e
    74de:	cd 86       	std	Y+13, r12	; 0x0d
    74e0:	6d cf       	rjmp	.-294    	; 0x73bc <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    74e2:	2e 96       	adiw	r28, 0x0e	; 14
    74e4:	0f b6       	in	r0, 0x3f	; 63
    74e6:	f8 94       	cli
    74e8:	de bf       	out	0x3e, r29	; 62
    74ea:	0f be       	out	0x3f, r0	; 63
    74ec:	cd bf       	out	0x3d, r28	; 61
    74ee:	df 91       	pop	r29
    74f0:	cf 91       	pop	r28
    74f2:	1f 91       	pop	r17
    74f4:	0f 91       	pop	r16
    74f6:	ff 90       	pop	r15
    74f8:	ef 90       	pop	r14
    74fa:	df 90       	pop	r13
    74fc:	cf 90       	pop	r12
    74fe:	bf 90       	pop	r11
    7500:	af 90       	pop	r10
    7502:	9f 90       	pop	r9
    7504:	8f 90       	pop	r8
    7506:	7f 90       	pop	r7
    7508:	6f 90       	pop	r6
    750a:	5f 90       	pop	r5
    750c:	4f 90       	pop	r4
    750e:	3f 90       	pop	r3
    7510:	2f 90       	pop	r2
    7512:	08 95       	ret

00007514 <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    7514:	6f 92       	push	r6
    7516:	7f 92       	push	r7
    7518:	8f 92       	push	r8
    751a:	9f 92       	push	r9
    751c:	af 92       	push	r10
    751e:	bf 92       	push	r11
    7520:	cf 92       	push	r12
    7522:	df 92       	push	r13
    7524:	ef 92       	push	r14
    7526:	ff 92       	push	r15
    7528:	0f 93       	push	r16
    752a:	1f 93       	push	r17
    752c:	cf 93       	push	r28
    752e:	df 93       	push	r29
    7530:	ec 01       	movw	r28, r24
    7532:	4b 01       	movw	r8, r22
    7534:	3a 01       	movw	r6, r20
    7536:	59 01       	movw	r10, r18
    7538:	68 01       	movw	r12, r16
    753a:	e8 81       	ld	r30, Y
    753c:	f9 81       	ldd	r31, Y+1	; 0x01
    753e:	02 84       	ldd	r0, Z+10	; 0x0a
    7540:	f3 85       	ldd	r31, Z+11	; 0x0b
    7542:	e0 2d       	mov	r30, r0
    7544:	09 95       	icall
    7546:	95 01       	movw	r18, r10
    7548:	22 0f       	add	r18, r18
    754a:	33 1f       	adc	r19, r19
    754c:	2f 5f       	subi	r18, 0xFF	; 255
    754e:	3f 4f       	sbci	r19, 0xFF	; 255
    7550:	a3 01       	movw	r20, r6
    7552:	4a 19       	sub	r20, r10
    7554:	5b 09       	sbc	r21, r11
    7556:	e8 81       	ld	r30, Y
    7558:	f9 81       	ldd	r31, Y+1	; 0x01
    755a:	00 88       	ldd	r0, Z+16	; 0x10
    755c:	f1 89       	ldd	r31, Z+17	; 0x11
    755e:	e0 2d       	mov	r30, r0
    7560:	b4 01       	movw	r22, r8
    7562:	ce 01       	movw	r24, r28
    7564:	09 95       	icall
    7566:	f1 2c       	mov	r15, r1
    7568:	e1 2c       	mov	r14, r1
    756a:	03 e0       	ldi	r16, 0x03	; 3
    756c:	95 01       	movw	r18, r10
    756e:	a3 01       	movw	r20, r6
    7570:	b4 01       	movw	r22, r8
    7572:	ce 01       	movw	r24, r28
    7574:	e0 de       	rcall	.-576    	; 0x7336 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    7576:	e8 81       	ld	r30, Y
    7578:	f9 81       	ldd	r31, Y+1	; 0x01
    757a:	06 88       	ldd	r0, Z+22	; 0x16
    757c:	f7 89       	ldd	r31, Z+23	; 0x17
    757e:	e0 2d       	mov	r30, r0
    7580:	ce 01       	movw	r24, r28
    7582:	df 91       	pop	r29
    7584:	cf 91       	pop	r28
    7586:	1f 91       	pop	r17
    7588:	0f 91       	pop	r16
    758a:	ff 90       	pop	r15
    758c:	ef 90       	pop	r14
    758e:	df 90       	pop	r13
    7590:	cf 90       	pop	r12
    7592:	bf 90       	pop	r11
    7594:	af 90       	pop	r10
    7596:	9f 90       	pop	r9
    7598:	8f 90       	pop	r8
    759a:	7f 90       	pop	r7
    759c:	6f 90       	pop	r6
    759e:	09 94       	ijmp

000075a0 <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)>:
    75a0:	2f 92       	push	r2
    75a2:	3f 92       	push	r3
    75a4:	4f 92       	push	r4
    75a6:	5f 92       	push	r5
    75a8:	6f 92       	push	r6
    75aa:	7f 92       	push	r7
    75ac:	8f 92       	push	r8
    75ae:	9f 92       	push	r9
    75b0:	af 92       	push	r10
    75b2:	bf 92       	push	r11
    75b4:	cf 92       	push	r12
    75b6:	df 92       	push	r13
    75b8:	ef 92       	push	r14
    75ba:	ff 92       	push	r15
    75bc:	0f 93       	push	r16
    75be:	1f 93       	push	r17
    75c0:	cf 93       	push	r28
    75c2:	df 93       	push	r29
    75c4:	00 d0       	rcall	.+0      	; 0x75c6 <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)+0x26>
    75c6:	00 d0       	rcall	.+0      	; 0x75c8 <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)+0x28>
    75c8:	00 d0       	rcall	.+0      	; 0x75ca <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)+0x2a>
    75ca:	cd b7       	in	r28, 0x3d	; 61
    75cc:	de b7       	in	r29, 0x3e	; 62
    75ce:	9e 83       	std	Y+6, r25	; 0x06
    75d0:	8d 83       	std	Y+5, r24	; 0x05
    75d2:	1b 01       	movw	r2, r22
    75d4:	2a 01       	movw	r4, r20
    75d6:	69 01       	movw	r12, r18
    75d8:	37 01       	movw	r6, r14
    75da:	dc 01       	movw	r26, r24
    75dc:	ed 91       	ld	r30, X+
    75de:	fc 91       	ld	r31, X
    75e0:	02 84       	ldd	r0, Z+10	; 0x0a
    75e2:	f3 85       	ldd	r31, Z+11	; 0x0b
    75e4:	e0 2d       	mov	r30, r0
    75e6:	09 95       	icall
    75e8:	c8 01       	movw	r24, r16
    75ea:	88 0f       	add	r24, r24
    75ec:	99 1f       	adc	r25, r25
    75ee:	9a 83       	std	Y+2, r25	; 0x02
    75f0:	89 83       	std	Y+1, r24	; 0x01
    75f2:	76 01       	movw	r14, r12
    75f4:	d1 2c       	mov	r13, r1
    75f6:	c1 2c       	mov	r12, r1
    75f8:	d6 01       	movw	r26, r12
    75fa:	a4 0d       	add	r26, r4
    75fc:	b5 1d       	adc	r27, r5
    75fe:	bc 83       	std	Y+4, r27	; 0x04
    7600:	ab 83       	std	Y+3, r26	; 0x03
    7602:	c6 14       	cp	r12, r6
    7604:	d7 04       	cpc	r13, r7
    7606:	2c f5       	brge	.+74     	; 0x7652 <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)+0xb2>
    7608:	47 01       	movw	r8, r14
    760a:	b1 2c       	mov	r11, r1
    760c:	a1 2c       	mov	r10, r1
    760e:	ad 81       	ldd	r26, Y+5	; 0x05
    7610:	be 81       	ldd	r27, Y+6	; 0x06
    7612:	ed 91       	ld	r30, X+
    7614:	fc 91       	ld	r31, X
    7616:	a0 16       	cp	r10, r16
    7618:	b1 06       	cpc	r11, r17
    761a:	9c f4       	brge	.+38     	; 0x7642 <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)+0xa2>
    761c:	d4 01       	movw	r26, r8
    761e:	2d 91       	ld	r18, X+
    7620:	3d 91       	ld	r19, X+
    7622:	4d 01       	movw	r8, r26
    7624:	b5 01       	movw	r22, r10
    7626:	62 0d       	add	r22, r2
    7628:	73 1d       	adc	r23, r3
    762a:	04 84       	ldd	r0, Z+12	; 0x0c
    762c:	f5 85       	ldd	r31, Z+13	; 0x0d
    762e:	e0 2d       	mov	r30, r0
    7630:	4b 81       	ldd	r20, Y+3	; 0x03
    7632:	5c 81       	ldd	r21, Y+4	; 0x04
    7634:	8d 81       	ldd	r24, Y+5	; 0x05
    7636:	9e 81       	ldd	r25, Y+6	; 0x06
    7638:	09 95       	icall
    763a:	bf ef       	ldi	r27, 0xFF	; 255
    763c:	ab 1a       	sub	r10, r27
    763e:	bb 0a       	sbc	r11, r27
    7640:	e6 cf       	rjmp	.-52     	; 0x760e <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)+0x6e>
    7642:	8f ef       	ldi	r24, 0xFF	; 255
    7644:	c8 1a       	sub	r12, r24
    7646:	d8 0a       	sbc	r13, r24
    7648:	a9 81       	ldd	r26, Y+1	; 0x01
    764a:	ba 81       	ldd	r27, Y+2	; 0x02
    764c:	ea 0e       	add	r14, r26
    764e:	fb 1e       	adc	r15, r27
    7650:	d3 cf       	rjmp	.-90     	; 0x75f8 <Adafruit_GFX::drawRGBBitmap(int, int, unsigned int*, int, int)+0x58>
    7652:	ad 81       	ldd	r26, Y+5	; 0x05
    7654:	be 81       	ldd	r27, Y+6	; 0x06
    7656:	ed 91       	ld	r30, X+
    7658:	fc 91       	ld	r31, X
    765a:	11 97       	sbiw	r26, 0x01	; 1
    765c:	06 88       	ldd	r0, Z+22	; 0x16
    765e:	f7 89       	ldd	r31, Z+23	; 0x17
    7660:	e0 2d       	mov	r30, r0
    7662:	cd 01       	movw	r24, r26
    7664:	26 96       	adiw	r28, 0x06	; 6
    7666:	0f b6       	in	r0, 0x3f	; 63
    7668:	f8 94       	cli
    766a:	de bf       	out	0x3e, r29	; 62
    766c:	0f be       	out	0x3f, r0	; 63
    766e:	cd bf       	out	0x3d, r28	; 61
    7670:	df 91       	pop	r29
    7672:	cf 91       	pop	r28
    7674:	1f 91       	pop	r17
    7676:	0f 91       	pop	r16
    7678:	ff 90       	pop	r15
    767a:	ef 90       	pop	r14
    767c:	df 90       	pop	r13
    767e:	cf 90       	pop	r12
    7680:	bf 90       	pop	r11
    7682:	af 90       	pop	r10
    7684:	9f 90       	pop	r9
    7686:	8f 90       	pop	r8
    7688:	7f 90       	pop	r7
    768a:	6f 90       	pop	r6
    768c:	5f 90       	pop	r5
    768e:	4f 90       	pop	r4
    7690:	3f 90       	pop	r3
    7692:	2f 90       	pop	r2
    7694:	09 94       	ijmp

00007696 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    7696:	2f 92       	push	r2
    7698:	3f 92       	push	r3
    769a:	4f 92       	push	r4
    769c:	5f 92       	push	r5
    769e:	6f 92       	push	r6
    76a0:	7f 92       	push	r7
    76a2:	8f 92       	push	r8
    76a4:	9f 92       	push	r9
    76a6:	af 92       	push	r10
    76a8:	bf 92       	push	r11
    76aa:	cf 92       	push	r12
    76ac:	df 92       	push	r13
    76ae:	ef 92       	push	r14
    76b0:	ff 92       	push	r15
    76b2:	0f 93       	push	r16
    76b4:	1f 93       	push	r17
    76b6:	cf 93       	push	r28
    76b8:	df 93       	push	r29
    76ba:	cd b7       	in	r28, 0x3d	; 61
    76bc:	de b7       	in	r29, 0x3e	; 62
    76be:	6a 97       	sbiw	r28, 0x1a	; 26
    76c0:	0f b6       	in	r0, 0x3f	; 63
    76c2:	f8 94       	cli
    76c4:	de bf       	out	0x3e, r29	; 62
    76c6:	0f be       	out	0x3f, r0	; 63
    76c8:	cd bf       	out	0x3d, r28	; 61
    76ca:	9a 8f       	std	Y+26, r25	; 0x1a
    76cc:	89 8f       	std	Y+25, r24	; 0x19
    76ce:	7a 83       	std	Y+2, r23	; 0x02
    76d0:	69 83       	std	Y+1, r22	; 0x01
    76d2:	4a 01       	movw	r8, r20
    76d4:	d2 2e       	mov	r13, r18
    76d6:	18 87       	std	Y+8, r17	; 0x08
    76d8:	0f 83       	std	Y+7, r16	; 0x07
    76da:	37 01       	movw	r6, r14
    76dc:	bc 2c       	mov	r11, r12
    76de:	dc 01       	movw	r26, r24
    76e0:	58 96       	adiw	r26, 0x18	; 24
    76e2:	2d 91       	ld	r18, X+
    76e4:	3c 91       	ld	r19, X
    76e6:	59 97       	sbiw	r26, 0x19	; 25
    76e8:	21 15       	cp	r18, r1
    76ea:	31 05       	cpc	r19, r1
    76ec:	09 f0       	breq	.+2      	; 0x76f0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    76ee:	15 c1       	rjmp	.+554    	; 0x791a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    76f0:	17 96       	adiw	r26, 0x07	; 7
    76f2:	8d 91       	ld	r24, X+
    76f4:	9c 91       	ld	r25, X
    76f6:	18 97       	sbiw	r26, 0x08	; 8
    76f8:	68 17       	cp	r22, r24
    76fa:	79 07       	cpc	r23, r25
    76fc:	0c f0       	brlt	.+2      	; 0x7700 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    76fe:	d7 c1       	rjmp	.+942    	; 0x7aae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    7700:	19 96       	adiw	r26, 0x09	; 9
    7702:	8d 91       	ld	r24, X+
    7704:	9c 91       	ld	r25, X
    7706:	48 17       	cp	r20, r24
    7708:	59 07       	cpc	r21, r25
    770a:	0c f0       	brlt	.+2      	; 0x770e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    770c:	d0 c1       	rjmp	.+928    	; 0x7aae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    770e:	4c 2c       	mov	r4, r12
    7710:	51 2c       	mov	r5, r1
    7712:	b6 e0       	ldi	r27, 0x06	; 6
    7714:	cb 9e       	mul	r12, r27
    7716:	60 0d       	add	r22, r0
    7718:	71 1d       	adc	r23, r1
    771a:	11 24       	eor	r1, r1
    771c:	7c 87       	std	Y+12, r23	; 0x0c
    771e:	6b 87       	std	Y+11, r22	; 0x0b
    7720:	16 16       	cp	r1, r22
    7722:	17 06       	cpc	r1, r23
    7724:	0c f0       	brlt	.+2      	; 0x7728 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    7726:	c3 c1       	rjmp	.+902    	; 0x7aae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    7728:	ea 2d       	mov	r30, r10
    772a:	f0 e0       	ldi	r31, 0x00	; 0
    772c:	fa 87       	std	Y+10, r31	; 0x0a
    772e:	e9 87       	std	Y+9, r30	; 0x09
    7730:	93 e0       	ldi	r25, 0x03	; 3
    7732:	ee 0f       	add	r30, r30
    7734:	ff 1f       	adc	r31, r31
    7736:	9a 95       	dec	r25
    7738:	e1 f7       	brne	.-8      	; 0x7732 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    773a:	f8 8b       	std	Y+16, r31	; 0x10
    773c:	ef 87       	std	Y+15, r30	; 0x0f
    773e:	cf 01       	movw	r24, r30
    7740:	84 0f       	add	r24, r20
    7742:	95 1f       	adc	r25, r21
    7744:	18 16       	cp	r1, r24
    7746:	19 06       	cpc	r1, r25
    7748:	0c f0       	brlt	.+2      	; 0x774c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    774a:	b1 c1       	rjmp	.+866    	; 0x7aae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    774c:	a9 8d       	ldd	r26, Y+25	; 0x19
    774e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7750:	57 96       	adiw	r26, 0x17	; 23
    7752:	8c 91       	ld	r24, X
    7754:	81 11       	cpse	r24, r1
    7756:	04 c0       	rjmp	.+8      	; 0x7760 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    7758:	bf ea       	ldi	r27, 0xAF	; 175
    775a:	bd 15       	cp	r27, r13
    775c:	08 f4       	brcc	.+2      	; 0x7760 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    775e:	d3 94       	inc	r13
    7760:	a9 8d       	ldd	r26, Y+25	; 0x19
    7762:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7764:	ed 91       	ld	r30, X+
    7766:	fc 91       	ld	r31, X
    7768:	11 97       	sbiw	r26, 0x01	; 1
    776a:	02 84       	ldd	r0, Z+10	; 0x0a
    776c:	f3 85       	ldd	r31, Z+11	; 0x0b
    776e:	e0 2d       	mov	r30, r0
    7770:	cd 01       	movw	r24, r26
    7772:	09 95       	icall
    7774:	b5 e0       	ldi	r27, 0x05	; 5
    7776:	db 9e       	mul	r13, r27
    7778:	c0 01       	movw	r24, r0
    777a:	11 24       	eor	r1, r1
    777c:	e9 81       	ldd	r30, Y+1	; 0x01
    777e:	fa 81       	ldd	r31, Y+2	; 0x02
    7780:	fc 83       	std	Y+4, r31	; 0x04
    7782:	eb 83       	std	Y+3, r30	; 0x03
    7784:	31 2c       	mov	r3, r1
    7786:	21 2c       	mov	r2, r1
    7788:	9c 01       	movw	r18, r24
    778a:	28 5a       	subi	r18, 0xA8	; 168
    778c:	39 4f       	sbci	r19, 0xF9	; 249
    778e:	38 8f       	std	Y+24, r19	; 0x18
    7790:	2f 8b       	std	Y+23, r18	; 0x17
    7792:	4a 2d       	mov	r20, r10
    7794:	50 e0       	ldi	r21, 0x00	; 0
    7796:	5e 8b       	std	Y+22, r21	; 0x16
    7798:	4d 8b       	std	Y+21, r20	; 0x15
    779a:	ef 89       	ldd	r30, Y+23	; 0x17
    779c:	f8 8d       	ldd	r31, Y+24	; 0x18
    779e:	e2 0d       	add	r30, r2
    77a0:	f3 1d       	adc	r31, r3
    77a2:	44 91       	lpm	r20, Z
    77a4:	9e 82       	std	Y+6, r9	; 0x06
    77a6:	8d 82       	std	Y+5, r8	; 0x05
    77a8:	d1 2c       	mov	r13, r1
    77aa:	c1 2c       	mov	r12, r1
    77ac:	69 81       	ldd	r22, Y+1	; 0x01
    77ae:	7a 81       	ldd	r23, Y+2	; 0x02
    77b0:	62 0d       	add	r22, r2
    77b2:	73 1d       	adc	r23, r3
    77b4:	7a 8b       	std	Y+18, r23	; 0x12
    77b6:	69 8b       	std	Y+17, r22	; 0x11
    77b8:	84 2f       	mov	r24, r20
    77ba:	90 e0       	ldi	r25, 0x00	; 0
    77bc:	9c 8b       	std	Y+20, r25	; 0x14
    77be:	8b 8b       	std	Y+19, r24	; 0x13
    77c0:	e9 8d       	ldd	r30, Y+25	; 0x19
    77c2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    77c4:	a0 81       	ld	r26, Z
    77c6:	b1 81       	ldd	r27, Z+1	; 0x01
    77c8:	40 ff       	sbrs	r20, 0
    77ca:	82 c0       	rjmp	.+260    	; 0x78d0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    77cc:	f1 e0       	ldi	r31, 0x01	; 1
    77ce:	bf 12       	cpse	r11, r31
    77d0:	6f c0       	rjmp	.+222    	; 0x78b0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    77d2:	af 12       	cpse	r10, r31
    77d4:	6d c0       	rjmp	.+218    	; 0x78b0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    77d6:	1c 96       	adiw	r26, 0x0c	; 12
    77d8:	ed 91       	ld	r30, X+
    77da:	fc 91       	ld	r31, X
    77dc:	2f 81       	ldd	r18, Y+7	; 0x07
    77de:	38 85       	ldd	r19, Y+8	; 0x08
    77e0:	a4 01       	movw	r20, r8
    77e2:	4c 0d       	add	r20, r12
    77e4:	5d 1d       	adc	r21, r13
    77e6:	69 89       	ldd	r22, Y+17	; 0x11
    77e8:	7a 89       	ldd	r23, Y+18	; 0x12
    77ea:	89 8d       	ldd	r24, Y+25	; 0x19
    77ec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    77ee:	09 95       	icall
    77f0:	eb 89       	ldd	r30, Y+19	; 0x13
    77f2:	fc 89       	ldd	r31, Y+20	; 0x14
    77f4:	f5 95       	asr	r31
    77f6:	e7 95       	ror	r30
    77f8:	4e 2f       	mov	r20, r30
    77fa:	5f ef       	ldi	r21, 0xFF	; 255
    77fc:	c5 1a       	sub	r12, r21
    77fe:	d5 0a       	sbc	r13, r21
    7800:	6d 81       	ldd	r22, Y+5	; 0x05
    7802:	7e 81       	ldd	r23, Y+6	; 0x06
    7804:	8d 89       	ldd	r24, Y+21	; 0x15
    7806:	9e 89       	ldd	r25, Y+22	; 0x16
    7808:	68 0f       	add	r22, r24
    780a:	79 1f       	adc	r23, r25
    780c:	7e 83       	std	Y+6, r23	; 0x06
    780e:	6d 83       	std	Y+5, r22	; 0x05
    7810:	98 e0       	ldi	r25, 0x08	; 8
    7812:	c9 16       	cp	r12, r25
    7814:	d1 04       	cpc	r13, r1
    7816:	81 f6       	brne	.-96     	; 0x77b8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    7818:	af ef       	ldi	r26, 0xFF	; 255
    781a:	2a 1a       	sub	r2, r26
    781c:	3a 0a       	sbc	r3, r26
    781e:	eb 81       	ldd	r30, Y+3	; 0x03
    7820:	fc 81       	ldd	r31, Y+4	; 0x04
    7822:	e4 0d       	add	r30, r4
    7824:	f5 1d       	adc	r31, r5
    7826:	fc 83       	std	Y+4, r31	; 0x04
    7828:	eb 83       	std	Y+3, r30	; 0x03
    782a:	f5 e0       	ldi	r31, 0x05	; 5
    782c:	2f 16       	cp	r2, r31
    782e:	31 04       	cpc	r3, r1
    7830:	09 f0       	breq	.+2      	; 0x7834 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    7832:	b3 cf       	rjmp	.-154    	; 0x779a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    7834:	2f 81       	ldd	r18, Y+7	; 0x07
    7836:	38 85       	ldd	r19, Y+8	; 0x08
    7838:	26 15       	cp	r18, r6
    783a:	37 05       	cpc	r19, r7
    783c:	b9 f0       	breq	.+46     	; 0x786c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    783e:	a9 8d       	ldd	r26, Y+25	; 0x19
    7840:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7842:	ed 91       	ld	r30, X+
    7844:	fc 91       	ld	r31, X
    7846:	b1 e0       	ldi	r27, 0x01	; 1
    7848:	bb 12       	cpse	r11, r27
    784a:	57 c0       	rjmp	.+174    	; 0x78fa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    784c:	ab 12       	cpse	r10, r27
    784e:	55 c0       	rjmp	.+170    	; 0x78fa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    7850:	69 81       	ldd	r22, Y+1	; 0x01
    7852:	7a 81       	ldd	r23, Y+2	; 0x02
    7854:	6b 5f       	subi	r22, 0xFB	; 251
    7856:	7f 4f       	sbci	r23, 0xFF	; 255
    7858:	00 88       	ldd	r0, Z+16	; 0x10
    785a:	f1 89       	ldd	r31, Z+17	; 0x11
    785c:	e0 2d       	mov	r30, r0
    785e:	83 01       	movw	r16, r6
    7860:	28 e0       	ldi	r18, 0x08	; 8
    7862:	30 e0       	ldi	r19, 0x00	; 0
    7864:	a4 01       	movw	r20, r8
    7866:	89 8d       	ldd	r24, Y+25	; 0x19
    7868:	9a 8d       	ldd	r25, Y+26	; 0x1a
    786a:	09 95       	icall
    786c:	a9 8d       	ldd	r26, Y+25	; 0x19
    786e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7870:	ed 91       	ld	r30, X+
    7872:	fc 91       	ld	r31, X
    7874:	11 97       	sbiw	r26, 0x01	; 1
    7876:	06 88       	ldd	r0, Z+22	; 0x16
    7878:	f7 89       	ldd	r31, Z+23	; 0x17
    787a:	e0 2d       	mov	r30, r0
    787c:	cd 01       	movw	r24, r26
    787e:	6a 96       	adiw	r28, 0x1a	; 26
    7880:	0f b6       	in	r0, 0x3f	; 63
    7882:	f8 94       	cli
    7884:	de bf       	out	0x3e, r29	; 62
    7886:	0f be       	out	0x3f, r0	; 63
    7888:	cd bf       	out	0x3d, r28	; 61
    788a:	df 91       	pop	r29
    788c:	cf 91       	pop	r28
    788e:	1f 91       	pop	r17
    7890:	0f 91       	pop	r16
    7892:	ff 90       	pop	r15
    7894:	ef 90       	pop	r14
    7896:	df 90       	pop	r13
    7898:	cf 90       	pop	r12
    789a:	bf 90       	pop	r11
    789c:	af 90       	pop	r10
    789e:	9f 90       	pop	r9
    78a0:	8f 90       	pop	r8
    78a2:	7f 90       	pop	r7
    78a4:	6f 90       	pop	r6
    78a6:	5f 90       	pop	r5
    78a8:	4f 90       	pop	r4
    78aa:	3f 90       	pop	r3
    78ac:	2f 90       	pop	r2
    78ae:	09 94       	ijmp
    78b0:	1e 96       	adiw	r26, 0x0e	; 14
    78b2:	ed 91       	ld	r30, X+
    78b4:	fc 91       	ld	r31, X
    78b6:	ef 80       	ldd	r14, Y+7	; 0x07
    78b8:	f8 84       	ldd	r15, Y+8	; 0x08
    78ba:	09 85       	ldd	r16, Y+9	; 0x09
    78bc:	1a 85       	ldd	r17, Y+10	; 0x0a
    78be:	92 01       	movw	r18, r4
    78c0:	4d 81       	ldd	r20, Y+5	; 0x05
    78c2:	5e 81       	ldd	r21, Y+6	; 0x06
    78c4:	6b 81       	ldd	r22, Y+3	; 0x03
    78c6:	7c 81       	ldd	r23, Y+4	; 0x04
    78c8:	89 8d       	ldd	r24, Y+25	; 0x19
    78ca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    78cc:	09 95       	icall
    78ce:	90 cf       	rjmp	.-224    	; 0x77f0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    78d0:	2f 81       	ldd	r18, Y+7	; 0x07
    78d2:	38 85       	ldd	r19, Y+8	; 0x08
    78d4:	26 15       	cp	r18, r6
    78d6:	37 05       	cpc	r19, r7
    78d8:	09 f4       	brne	.+2      	; 0x78dc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    78da:	8a cf       	rjmp	.-236    	; 0x77f0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    78dc:	31 e0       	ldi	r19, 0x01	; 1
    78de:	b3 12       	cpse	r11, r19
    78e0:	07 c0       	rjmp	.+14     	; 0x78f0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    78e2:	a3 12       	cpse	r10, r19
    78e4:	05 c0       	rjmp	.+10     	; 0x78f0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    78e6:	1c 96       	adiw	r26, 0x0c	; 12
    78e8:	ed 91       	ld	r30, X+
    78ea:	fc 91       	ld	r31, X
    78ec:	93 01       	movw	r18, r6
    78ee:	78 cf       	rjmp	.-272    	; 0x77e0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    78f0:	1e 96       	adiw	r26, 0x0e	; 14
    78f2:	ed 91       	ld	r30, X+
    78f4:	fc 91       	ld	r31, X
    78f6:	73 01       	movw	r14, r6
    78f8:	e0 cf       	rjmp	.-64     	; 0x78ba <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    78fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    78fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    78fe:	64 19       	sub	r22, r4
    7900:	75 09       	sbc	r23, r5
    7902:	06 84       	ldd	r0, Z+14	; 0x0e
    7904:	f7 85       	ldd	r31, Z+15	; 0x0f
    7906:	e0 2d       	mov	r30, r0
    7908:	73 01       	movw	r14, r6
    790a:	0f 85       	ldd	r16, Y+15	; 0x0f
    790c:	18 89       	ldd	r17, Y+16	; 0x10
    790e:	92 01       	movw	r18, r4
    7910:	a4 01       	movw	r20, r8
    7912:	89 8d       	ldd	r24, Y+25	; 0x19
    7914:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7916:	09 95       	icall
    7918:	a9 cf       	rjmp	.-174    	; 0x786c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    791a:	f9 01       	movw	r30, r18
    791c:	34 96       	adiw	r30, 0x04	; 4
    791e:	94 91       	lpm	r25, Z
    7920:	32 97       	sbiw	r30, 0x02	; 2
    7922:	45 91       	lpm	r20, Z+
    7924:	54 91       	lpm	r21, Z
    7926:	d9 1a       	sub	r13, r25
    7928:	b7 e0       	ldi	r27, 0x07	; 7
    792a:	db 9e       	mul	r13, r27
    792c:	40 0d       	add	r20, r0
    792e:	51 1d       	adc	r21, r1
    7930:	11 24       	eor	r1, r1
    7932:	f9 01       	movw	r30, r18
    7934:	25 91       	lpm	r18, Z+
    7936:	34 91       	lpm	r19, Z
    7938:	3c 8b       	std	Y+20, r19	; 0x14
    793a:	2b 8b       	std	Y+19, r18	; 0x13
    793c:	fa 01       	movw	r30, r20
    793e:	25 90       	lpm	r2, Z+
    7940:	34 90       	lpm	r3, Z
    7942:	fa 01       	movw	r30, r20
    7944:	32 96       	adiw	r30, 0x02	; 2
    7946:	74 90       	lpm	r7, Z
    7948:	31 96       	adiw	r30, 0x01	; 1
    794a:	34 91       	lpm	r19, Z
    794c:	39 8b       	std	Y+17, r19	; 0x11
    794e:	32 96       	adiw	r30, 0x02	; 2
    7950:	64 90       	lpm	r6, Z
    7952:	31 96       	adiw	r30, 0x01	; 1
    7954:	44 90       	lpm	r4, Z
    7956:	41 e0       	ldi	r20, 0x01	; 1
    7958:	4c 15       	cp	r20, r12
    795a:	18 f0       	brcs	.+6      	; 0x7962 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    795c:	4a 15       	cp	r20, r10
    795e:	08 f0       	brcs	.+2      	; 0x7962 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    7960:	7f c0       	rjmp	.+254    	; 0x7a60 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    7962:	66 2d       	mov	r22, r6
    7964:	06 2c       	mov	r0, r6
    7966:	00 0c       	add	r0, r0
    7968:	77 0b       	sbc	r23, r23
    796a:	7c 83       	std	Y+4, r23	; 0x04
    796c:	6b 83       	std	Y+3, r22	; 0x03
    796e:	84 2d       	mov	r24, r4
    7970:	04 2c       	mov	r0, r4
    7972:	00 0c       	add	r0, r0
    7974:	99 0b       	sbc	r25, r25
    7976:	9e 83       	std	Y+6, r25	; 0x06
    7978:	8d 83       	std	Y+5, r24	; 0x05
    797a:	a9 8d       	ldd	r26, Y+25	; 0x19
    797c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    797e:	ed 91       	ld	r30, X+
    7980:	fc 91       	ld	r31, X
    7982:	11 97       	sbiw	r26, 0x01	; 1
    7984:	02 84       	ldd	r0, Z+10	; 0x0a
    7986:	f3 85       	ldd	r31, Z+11	; 0x0b
    7988:	e0 2d       	mov	r30, r0
    798a:	cd 01       	movw	r24, r26
    798c:	09 95       	icall
    798e:	51 2c       	mov	r5, r1
    7990:	d1 2c       	mov	r13, r1
    7992:	c1 2c       	mov	r12, r1
    7994:	ea 2d       	mov	r30, r10
    7996:	f0 e0       	ldi	r31, 0x00	; 0
    7998:	fa 87       	std	Y+10, r31	; 0x0a
    799a:	e9 87       	std	Y+9, r30	; 0x09
    799c:	2b 2d       	mov	r18, r11
    799e:	30 e0       	ldi	r19, 0x00	; 0
    79a0:	3c 87       	std	Y+12, r19	; 0x0c
    79a2:	2b 87       	std	Y+11, r18	; 0x0b
    79a4:	a4 01       	movw	r20, r8
    79a6:	44 0d       	add	r20, r4
    79a8:	51 1d       	adc	r21, r1
    79aa:	47 fc       	sbrc	r4, 7
    79ac:	5a 95       	dec	r21
    79ae:	58 8f       	std	Y+24, r21	; 0x18
    79b0:	4f 8b       	std	Y+23, r20	; 0x17
    79b2:	69 81       	ldd	r22, Y+1	; 0x01
    79b4:	7a 81       	ldd	r23, Y+2	; 0x02
    79b6:	66 0d       	add	r22, r6
    79b8:	71 1d       	adc	r23, r1
    79ba:	67 fc       	sbrc	r6, 7
    79bc:	7a 95       	dec	r23
    79be:	7e 87       	std	Y+14, r23	; 0x0e
    79c0:	6d 87       	std	Y+13, r22	; 0x0d
    79c2:	79 89       	ldd	r23, Y+17	; 0x11
    79c4:	c7 16       	cp	r12, r23
    79c6:	08 f0       	brcs	.+2      	; 0x79ca <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    79c8:	51 cf       	rjmp	.-350    	; 0x786c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    79ca:	2c 2d       	mov	r18, r12
    79cc:	30 e0       	ldi	r19, 0x00	; 0
    79ce:	4d 81       	ldd	r20, Y+5	; 0x05
    79d0:	5e 81       	ldd	r21, Y+6	; 0x06
    79d2:	42 0f       	add	r20, r18
    79d4:	53 1f       	adc	r21, r19
    79d6:	a9 85       	ldd	r26, Y+9	; 0x09
    79d8:	ba 85       	ldd	r27, Y+10	; 0x0a
    79da:	4a 9f       	mul	r20, r26
    79dc:	c0 01       	movw	r24, r0
    79de:	4b 9f       	mul	r20, r27
    79e0:	90 0d       	add	r25, r0
    79e2:	5a 9f       	mul	r21, r26
    79e4:	90 0d       	add	r25, r0
    79e6:	11 24       	eor	r1, r1
    79e8:	fc 01       	movw	r30, r24
    79ea:	e8 0d       	add	r30, r8
    79ec:	f9 1d       	adc	r31, r9
    79ee:	f8 8b       	std	Y+16, r31	; 0x10
    79f0:	ef 87       	std	Y+15, r30	; 0x0f
    79f2:	85 2d       	mov	r24, r5
    79f4:	61 2c       	mov	r6, r1
    79f6:	4f 89       	ldd	r20, Y+23	; 0x17
    79f8:	58 8d       	ldd	r21, Y+24	; 0x18
    79fa:	42 0f       	add	r20, r18
    79fc:	53 1f       	adc	r21, r19
    79fe:	5e 8b       	std	Y+22, r21	; 0x16
    7a00:	4d 8b       	std	Y+21, r20	; 0x15
    7a02:	67 14       	cp	r6, r7
    7a04:	08 f0       	brcs	.+2      	; 0x7a08 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    7a06:	50 c0       	rjmp	.+160    	; 0x7aa8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    7a08:	44 24       	eor	r4, r4
    7a0a:	43 94       	inc	r4
    7a0c:	48 0e       	add	r4, r24
    7a0e:	87 70       	andi	r24, 0x07	; 7
    7a10:	41 f4       	brne	.+16     	; 0x7a22 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    7a12:	c1 01       	movw	r24, r2
    7a14:	01 96       	adiw	r24, 0x01	; 1
    7a16:	eb 89       	ldd	r30, Y+19	; 0x13
    7a18:	fc 89       	ldd	r31, Y+20	; 0x14
    7a1a:	e2 0d       	add	r30, r2
    7a1c:	f3 1d       	adc	r31, r3
    7a1e:	d4 90       	lpm	r13, Z
    7a20:	1c 01       	movw	r2, r24
    7a22:	d7 fe       	sbrs	r13, 7
    7a24:	19 c0       	rjmp	.+50     	; 0x7a58 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    7a26:	a9 8d       	ldd	r26, Y+25	; 0x19
    7a28:	ba 8d       	ldd	r27, Y+26	; 0x1a
    7a2a:	ed 91       	ld	r30, X+
    7a2c:	fc 91       	ld	r31, X
    7a2e:	66 2d       	mov	r22, r6
    7a30:	70 e0       	ldi	r23, 0x00	; 0
    7a32:	b1 e0       	ldi	r27, 0x01	; 1
    7a34:	bb 12       	cpse	r11, r27
    7a36:	19 c0       	rjmp	.+50     	; 0x7a6a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    7a38:	ab 12       	cpse	r10, r27
    7a3a:	17 c0       	rjmp	.+46     	; 0x7a6a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    7a3c:	2d 85       	ldd	r18, Y+13	; 0x0d
    7a3e:	3e 85       	ldd	r19, Y+14	; 0x0e
    7a40:	62 0f       	add	r22, r18
    7a42:	73 1f       	adc	r23, r19
    7a44:	04 84       	ldd	r0, Z+12	; 0x0c
    7a46:	f5 85       	ldd	r31, Z+13	; 0x0d
    7a48:	e0 2d       	mov	r30, r0
    7a4a:	2f 81       	ldd	r18, Y+7	; 0x07
    7a4c:	38 85       	ldd	r19, Y+8	; 0x08
    7a4e:	4d 89       	ldd	r20, Y+21	; 0x15
    7a50:	5e 89       	ldd	r21, Y+22	; 0x16
    7a52:	89 8d       	ldd	r24, Y+25	; 0x19
    7a54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7a56:	09 95       	icall
    7a58:	dd 0c       	add	r13, r13
    7a5a:	63 94       	inc	r6
    7a5c:	84 2d       	mov	r24, r4
    7a5e:	d1 cf       	rjmp	.-94     	; 0x7a02 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    7a60:	1e 82       	std	Y+6, r1	; 0x06
    7a62:	1d 82       	std	Y+5, r1	; 0x05
    7a64:	1c 82       	std	Y+4, r1	; 0x04
    7a66:	1b 82       	std	Y+3, r1	; 0x03
    7a68:	88 cf       	rjmp	.-240    	; 0x797a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    7a6a:	4b 81       	ldd	r20, Y+3	; 0x03
    7a6c:	5c 81       	ldd	r21, Y+4	; 0x04
    7a6e:	64 0f       	add	r22, r20
    7a70:	75 1f       	adc	r23, r21
    7a72:	ab 85       	ldd	r26, Y+11	; 0x0b
    7a74:	bc 85       	ldd	r27, Y+12	; 0x0c
    7a76:	6a 9f       	mul	r22, r26
    7a78:	c0 01       	movw	r24, r0
    7a7a:	6b 9f       	mul	r22, r27
    7a7c:	90 0d       	add	r25, r0
    7a7e:	7a 9f       	mul	r23, r26
    7a80:	90 0d       	add	r25, r0
    7a82:	11 24       	eor	r1, r1
    7a84:	69 81       	ldd	r22, Y+1	; 0x01
    7a86:	7a 81       	ldd	r23, Y+2	; 0x02
    7a88:	68 0f       	add	r22, r24
    7a8a:	79 1f       	adc	r23, r25
    7a8c:	06 84       	ldd	r0, Z+14	; 0x0e
    7a8e:	f7 85       	ldd	r31, Z+15	; 0x0f
    7a90:	e0 2d       	mov	r30, r0
    7a92:	ef 80       	ldd	r14, Y+7	; 0x07
    7a94:	f8 84       	ldd	r15, Y+8	; 0x08
    7a96:	09 85       	ldd	r16, Y+9	; 0x09
    7a98:	1a 85       	ldd	r17, Y+10	; 0x0a
    7a9a:	9d 01       	movw	r18, r26
    7a9c:	4f 85       	ldd	r20, Y+15	; 0x0f
    7a9e:	58 89       	ldd	r21, Y+16	; 0x10
    7aa0:	89 8d       	ldd	r24, Y+25	; 0x19
    7aa2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    7aa4:	09 95       	icall
    7aa6:	d8 cf       	rjmp	.-80     	; 0x7a58 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    7aa8:	57 0c       	add	r5, r7
    7aaa:	c3 94       	inc	r12
    7aac:	8a cf       	rjmp	.-236    	; 0x79c2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    7aae:	6a 96       	adiw	r28, 0x1a	; 26
    7ab0:	0f b6       	in	r0, 0x3f	; 63
    7ab2:	f8 94       	cli
    7ab4:	de bf       	out	0x3e, r29	; 62
    7ab6:	0f be       	out	0x3f, r0	; 63
    7ab8:	cd bf       	out	0x3d, r28	; 61
    7aba:	df 91       	pop	r29
    7abc:	cf 91       	pop	r28
    7abe:	1f 91       	pop	r17
    7ac0:	0f 91       	pop	r16
    7ac2:	ff 90       	pop	r15
    7ac4:	ef 90       	pop	r14
    7ac6:	df 90       	pop	r13
    7ac8:	cf 90       	pop	r12
    7aca:	bf 90       	pop	r11
    7acc:	af 90       	pop	r10
    7ace:	9f 90       	pop	r9
    7ad0:	8f 90       	pop	r8
    7ad2:	7f 90       	pop	r7
    7ad4:	6f 90       	pop	r6
    7ad6:	5f 90       	pop	r5
    7ad8:	4f 90       	pop	r4
    7ada:	3f 90       	pop	r3
    7adc:	2f 90       	pop	r2
    7ade:	08 95       	ret

00007ae0 <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    7ae0:	8f 92       	push	r8
    7ae2:	9f 92       	push	r9
    7ae4:	af 92       	push	r10
    7ae6:	cf 92       	push	r12
    7ae8:	ef 92       	push	r14
    7aea:	ff 92       	push	r15
    7aec:	0f 93       	push	r16
    7aee:	1f 93       	push	r17
    7af0:	cf 93       	push	r28
    7af2:	df 93       	push	r29
    7af4:	ec 01       	movw	r28, r24
    7af6:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    7af8:	88 8d       	ldd	r24, Y+24	; 0x18
    7afa:	99 8d       	ldd	r25, Y+25	; 0x19
    7afc:	00 97       	sbiw	r24, 0x00	; 0
    7afe:	09 f0       	breq	.+2      	; 0x7b02 <Adafruit_GFX::write(unsigned char)+0x22>
    7b00:	50 c0       	rjmp	.+160    	; 0x7ba2 <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    7b02:	6a 30       	cpi	r22, 0x0A	; 10
    7b04:	d1 f4       	brne	.+52     	; 0x7b3a <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    7b06:	1c 86       	std	Y+12, r1	; 0x0c
    7b08:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    7b0a:	8c 89       	ldd	r24, Y+20	; 0x14
    7b0c:	48 e0       	ldi	r20, 0x08	; 8
    7b0e:	84 9f       	mul	r24, r20
    7b10:	90 01       	movw	r18, r0
    7b12:	11 24       	eor	r1, r1
    7b14:	8d 85       	ldd	r24, Y+13	; 0x0d
    7b16:	9e 85       	ldd	r25, Y+14	; 0x0e
    7b18:	82 0f       	add	r24, r18
    7b1a:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    7b1c:	9e 87       	std	Y+14, r25	; 0x0e
    7b1e:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    7b20:	81 e0       	ldi	r24, 0x01	; 1
    7b22:	90 e0       	ldi	r25, 0x00	; 0
    7b24:	df 91       	pop	r29
    7b26:	cf 91       	pop	r28
    7b28:	1f 91       	pop	r17
    7b2a:	0f 91       	pop	r16
    7b2c:	ff 90       	pop	r15
    7b2e:	ef 90       	pop	r14
    7b30:	cf 90       	pop	r12
    7b32:	af 90       	pop	r10
    7b34:	9f 90       	pop	r9
    7b36:	8f 90       	pop	r8
    7b38:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    7b3a:	6d 30       	cpi	r22, 0x0D	; 13
    7b3c:	89 f3       	breq	.-30     	; 0x7b20 <Adafruit_GFX::write(unsigned char)+0x40>
    7b3e:	cb 88       	ldd	r12, Y+19	; 0x13
    7b40:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    7b42:	8e 89       	ldd	r24, Y+22	; 0x16
    7b44:	88 23       	and	r24, r24
    7b46:	c1 f0       	breq	.+48     	; 0x7b78 <Adafruit_GFX::write(unsigned char)+0x98>
    7b48:	8b 85       	ldd	r24, Y+11	; 0x0b
    7b4a:	9c 85       	ldd	r25, Y+12	; 0x0c
    7b4c:	36 e0       	ldi	r19, 0x06	; 6
    7b4e:	c3 9e       	mul	r12, r19
    7b50:	80 0d       	add	r24, r0
    7b52:	91 1d       	adc	r25, r1
    7b54:	11 24       	eor	r1, r1
    7b56:	4f 81       	ldd	r20, Y+7	; 0x07
    7b58:	58 85       	ldd	r21, Y+8	; 0x08
    7b5a:	48 17       	cp	r20, r24
    7b5c:	59 07       	cpc	r21, r25
    7b5e:	64 f4       	brge	.+24     	; 0x7b78 <Adafruit_GFX::write(unsigned char)+0x98>
    7b60:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b62:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    7b64:	1c 86       	std	Y+12, r1	; 0x0c
    7b66:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    7b68:	38 e0       	ldi	r19, 0x08	; 8
    7b6a:	a3 9e       	mul	r10, r19
    7b6c:	c0 01       	movw	r24, r0
    7b6e:	11 24       	eor	r1, r1
    7b70:	84 0f       	add	r24, r20
    7b72:	95 1f       	adc	r25, r21
    7b74:	9e 87       	std	Y+14, r25	; 0x0e
    7b76:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    7b78:	e9 88       	ldd	r14, Y+17	; 0x11
    7b7a:	fa 88       	ldd	r15, Y+18	; 0x12
    7b7c:	0f 85       	ldd	r16, Y+15	; 0x0f
    7b7e:	18 89       	ldd	r17, Y+16	; 0x10
    7b80:	4d 85       	ldd	r20, Y+13	; 0x0d
    7b82:	5e 85       	ldd	r21, Y+14	; 0x0e
    7b84:	6b 85       	ldd	r22, Y+11	; 0x0b
    7b86:	7c 85       	ldd	r23, Y+12	; 0x0c
    7b88:	ce 01       	movw	r24, r28
    7b8a:	85 dd       	rcall	.-1270   	; 0x7696 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    7b8c:	2b 89       	ldd	r18, Y+19	; 0x13
    7b8e:	8b 85       	ldd	r24, Y+11	; 0x0b
    7b90:	9c 85       	ldd	r25, Y+12	; 0x0c
    7b92:	46 e0       	ldi	r20, 0x06	; 6
    7b94:	24 9f       	mul	r18, r20
    7b96:	80 0d       	add	r24, r0
    7b98:	91 1d       	adc	r25, r1
    7b9a:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    7b9c:	9c 87       	std	Y+12, r25	; 0x0c
    7b9e:	8b 87       	std	Y+11, r24	; 0x0b
    7ba0:	bf cf       	rjmp	.-130    	; 0x7b20 <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    7ba2:	6a 30       	cpi	r22, 0x0A	; 10
    7ba4:	69 f4       	brne	.+26     	; 0x7bc0 <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    7ba6:	1c 86       	std	Y+12, r1	; 0x0c
    7ba8:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    7baa:	fc 01       	movw	r30, r24
    7bac:	36 96       	adiw	r30, 0x06	; 6
    7bae:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    7bb0:	2c 89       	ldd	r18, Y+20	; 0x14
    7bb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    7bb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    7bb6:	e2 9f       	mul	r30, r18
    7bb8:	80 0d       	add	r24, r0
    7bba:	91 1d       	adc	r25, r1
    7bbc:	11 24       	eor	r1, r1
    7bbe:	ae cf       	rjmp	.-164    	; 0x7b1c <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    7bc0:	6d 30       	cpi	r22, 0x0D	; 13
    7bc2:	09 f4       	brne	.+2      	; 0x7bc6 <Adafruit_GFX::write(unsigned char)+0xe6>
    7bc4:	ad cf       	rjmp	.-166    	; 0x7b20 <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    7bc6:	fc 01       	movw	r30, r24
    7bc8:	34 96       	adiw	r30, 0x04	; 4
    7bca:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    7bcc:	63 17       	cp	r22, r19
    7bce:	08 f4       	brcc	.+2      	; 0x7bd2 <Adafruit_GFX::write(unsigned char)+0xf2>
    7bd0:	a7 cf       	rjmp	.-178    	; 0x7b20 <Adafruit_GFX::write(unsigned char)+0x40>
    7bd2:	31 96       	adiw	r30, 0x01	; 1
    7bd4:	e4 91       	lpm	r30, Z
    7bd6:	e6 17       	cp	r30, r22
    7bd8:	08 f4       	brcc	.+2      	; 0x7bdc <Adafruit_GFX::write(unsigned char)+0xfc>
    7bda:	a2 cf       	rjmp	.-188    	; 0x7b20 <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    7bdc:	fc 01       	movw	r30, r24
    7bde:	32 96       	adiw	r30, 0x02	; 2
    7be0:	85 90       	lpm	r8, Z+
    7be2:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    7be4:	46 2f       	mov	r20, r22
    7be6:	43 1b       	sub	r20, r19
    7be8:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    7bea:	47 e0       	ldi	r20, 0x07	; 7
    7bec:	34 9f       	mul	r19, r20
    7bee:	80 0c       	add	r8, r0
    7bf0:	91 1c       	adc	r9, r1
    7bf2:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    7bf4:	f4 01       	movw	r30, r8
    7bf6:	32 96       	adiw	r30, 0x02	; 2
    7bf8:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    7bfa:	31 96       	adiw	r30, 0x01	; 1
    7bfc:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    7bfe:	33 23       	and	r19, r19
    7c00:	a1 f1       	breq	.+104    	; 0x7c6a <Adafruit_GFX::write(unsigned char)+0x18a>
    7c02:	ee 23       	and	r30, r30
    7c04:	91 f1       	breq	.+100    	; 0x7c6a <Adafruit_GFX::write(unsigned char)+0x18a>
    7c06:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    7c08:	f4 01       	movw	r30, r8
    7c0a:	35 96       	adiw	r30, 0x05	; 5
    7c0c:	e4 91       	lpm	r30, Z
    7c0e:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    7c10:	4e 89       	ldd	r20, Y+22	; 0x16
    7c12:	44 23       	and	r20, r20
    7c14:	01 f1       	breq	.+64     	; 0x7c56 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    7c16:	0e 2e       	mov	r0, r30
    7c18:	00 0c       	add	r0, r0
    7c1a:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    7c1c:	e3 0f       	add	r30, r19
    7c1e:	f1 1d       	adc	r31, r1
    7c20:	ce 9e       	mul	r12, r30
    7c22:	a0 01       	movw	r20, r0
    7c24:	cf 9e       	mul	r12, r31
    7c26:	50 0d       	add	r21, r0
    7c28:	11 24       	eor	r1, r1
    7c2a:	6b 85       	ldd	r22, Y+11	; 0x0b
    7c2c:	7c 85       	ldd	r23, Y+12	; 0x0c
    7c2e:	46 0f       	add	r20, r22
    7c30:	57 1f       	adc	r21, r23
    7c32:	6f 81       	ldd	r22, Y+7	; 0x07
    7c34:	78 85       	ldd	r23, Y+8	; 0x08
    7c36:	64 17       	cp	r22, r20
    7c38:	75 07       	cpc	r23, r21
    7c3a:	6c f4       	brge	.+26     	; 0x7c56 <Adafruit_GFX::write(unsigned char)+0x176>
    7c3c:	4d 85       	ldd	r20, Y+13	; 0x0d
    7c3e:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    7c40:	1c 86       	std	Y+12, r1	; 0x0c
    7c42:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    7c44:	fc 01       	movw	r30, r24
    7c46:	36 96       	adiw	r30, 0x06	; 6
    7c48:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    7c4a:	ae 9e       	mul	r10, r30
    7c4c:	40 0d       	add	r20, r0
    7c4e:	51 1d       	adc	r21, r1
    7c50:	11 24       	eor	r1, r1
    7c52:	5e 87       	std	Y+14, r21	; 0x0e
    7c54:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    7c56:	e9 88       	ldd	r14, Y+17	; 0x11
    7c58:	fa 88       	ldd	r15, Y+18	; 0x12
    7c5a:	0f 85       	ldd	r16, Y+15	; 0x0f
    7c5c:	18 89       	ldd	r17, Y+16	; 0x10
    7c5e:	4d 85       	ldd	r20, Y+13	; 0x0d
    7c60:	5e 85       	ldd	r21, Y+14	; 0x0e
    7c62:	6b 85       	ldd	r22, Y+11	; 0x0b
    7c64:	7c 85       	ldd	r23, Y+12	; 0x0c
    7c66:	ce 01       	movw	r24, r28
    7c68:	16 dd       	rcall	.-1492   	; 0x7696 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    7c6a:	f4 01       	movw	r30, r8
    7c6c:	34 96       	adiw	r30, 0x04	; 4
    7c6e:	e4 91       	lpm	r30, Z
    7c70:	2b 89       	ldd	r18, Y+19	; 0x13
    7c72:	8b 85       	ldd	r24, Y+11	; 0x0b
    7c74:	9c 85       	ldd	r25, Y+12	; 0x0c
    7c76:	e2 9f       	mul	r30, r18
    7c78:	80 0d       	add	r24, r0
    7c7a:	91 1d       	adc	r25, r1
    7c7c:	11 24       	eor	r1, r1
    7c7e:	8e cf       	rjmp	.-228    	; 0x7b9c <Adafruit_GFX::write(unsigned char)+0xbc>

00007c80 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    7c80:	61 11       	cpse	r22, r1
    7c82:	01 c0       	rjmp	.+2      	; 0x7c86 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    7c84:	61 e0       	ldi	r22, 0x01	; 1
    7c86:	fc 01       	movw	r30, r24
    7c88:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    7c8a:	41 11       	cpse	r20, r1
    7c8c:	01 c0       	rjmp	.+2      	; 0x7c90 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    7c8e:	41 e0       	ldi	r20, 0x01	; 1
    7c90:	fc 01       	movw	r30, r24
    7c92:	44 8b       	std	Z+20, r20	; 0x14
}
    7c94:	08 95       	ret

00007c96 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    7c96:	46 2f       	mov	r20, r22
    7c98:	f3 cf       	rjmp	.-26     	; 0x7c80 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

00007c9a <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    7c9a:	ff 92       	push	r15
    7c9c:	0f 93       	push	r16
    7c9e:	1f 93       	push	r17
    7ca0:	cf 93       	push	r28
    7ca2:	df 93       	push	r29
    7ca4:	ec 01       	movw	r28, r24
    7ca6:	f0 2e       	mov	r15, r16
    7ca8:	10 e0       	ldi	r17, 0x00	; 0
    7caa:	00 e0       	ldi	r16, 0x00	; 0
    7cac:	20 d0       	rcall	.+64     	; 0x7cee <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    7cae:	83 e3       	ldi	r24, 0x33	; 51
    7cb0:	99 e0       	ldi	r25, 0x09	; 9
    7cb2:	99 83       	std	Y+1, r25	; 0x01
    7cb4:	88 83       	st	Y, r24
    7cb6:	fe 01       	movw	r30, r28
    7cb8:	e6 5e       	subi	r30, 0xE6	; 230
    7cba:	fe 4f       	sbci	r31, 0xFE	; 254
    7cbc:	f0 82       	st	Z, r15
    7cbe:	31 96       	adiw	r30, 0x01	; 1
    7cc0:	10 82       	st	Z, r1
    7cc2:	c4 5e       	subi	r28, 0xE4	; 228
    7cc4:	de 4f       	sbci	r29, 0xFE	; 254
    7cc6:	18 82       	st	Y, r1
    7cc8:	df 91       	pop	r29
    7cca:	cf 91       	pop	r28
    7ccc:	1f 91       	pop	r17
    7cce:	0f 91       	pop	r16
    7cd0:	ff 90       	pop	r15
    7cd2:	08 95       	ret

00007cd4 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    7cd4:	8d 5d       	subi	r24, 0xDD	; 221
    7cd6:	9e 4f       	sbci	r25, 0xFE	; 254
    7cd8:	dc 01       	movw	r26, r24
    7cda:	ed 91       	ld	r30, X+
    7cdc:	fc 91       	ld	r31, X
    7cde:	30 97       	sbiw	r30, 0x00	; 0
    7ce0:	09 f0       	breq	.+2      	; 0x7ce4 <FastLED_NeoMatrix::show()+0x10>
    7ce2:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    7ce4:	60 91 da 10 	lds	r22, 0x10DA	; 0x8010da <FastLED>
    7ce8:	8a ed       	ldi	r24, 0xDA	; 218
    7cea:	90 e1       	ldi	r25, 0x10	; 16
    7cec:	48 c4       	rjmp	.+2192   	; 0x857e <CFastLED::show(unsigned char)>

00007cee <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
}

// Call without a value to reset (disable passthrough)
void Framebuffer_GFX::setPassThruColor(void) {
  passThruFlag = false;
}
    7cee:	af 92       	push	r10
    7cf0:	bf 92       	push	r11
    7cf2:	cf 92       	push	r12
    7cf4:	df 92       	push	r13
    7cf6:	ef 92       	push	r14
    7cf8:	ff 92       	push	r15
    7cfa:	0f 93       	push	r16
    7cfc:	1f 93       	push	r17
    7cfe:	cf 93       	push	r28
    7d00:	df 93       	push	r29
    7d02:	ec 01       	movw	r28, r24
    7d04:	5b 01       	movw	r10, r22
    7d06:	7a 01       	movw	r14, r20
    7d08:	69 01       	movw	r12, r18
    7d0a:	a9 01       	movw	r20, r18
    7d0c:	b7 01       	movw	r22, r14
    7d0e:	f2 da       	rcall	.-2588   	; 0x72f4 <Adafruit_GFX::Adafruit_GFX(int, int)>
    7d10:	86 e9       	ldi	r24, 0x96	; 150
    7d12:	99 e0       	ldi	r25, 0x09	; 9
    7d14:	99 83       	std	Y+1, r25	; 0x01
    7d16:	88 83       	st	Y, r24
    7d18:	fe 01       	movw	r30, r28
    7d1a:	e3 5e       	subi	r30, 0xE3	; 227
    7d1c:	fe 4f       	sbci	r31, 0xFE	; 254
    7d1e:	f1 82       	std	Z+1, r15	; 0x01
    7d20:	e0 82       	st	Z, r14
    7d22:	32 96       	adiw	r30, 0x02	; 2
    7d24:	d1 82       	std	Z+1, r13	; 0x01
    7d26:	c0 82       	st	Z, r12
    7d28:	32 96       	adiw	r30, 0x02	; 2
    7d2a:	80 e1       	ldi	r24, 0x10	; 16
    7d2c:	97 e2       	ldi	r25, 0x27	; 39
    7d2e:	91 83       	std	Z+1, r25	; 0x01
    7d30:	80 83       	st	Z, r24
    7d32:	36 96       	adiw	r30, 0x06	; 6
    7d34:	11 82       	std	Z+1, r1	; 0x01
    7d36:	10 82       	st	Z, r1
    7d38:	3a 96       	adiw	r30, 0x0a	; 10
    7d3a:	10 82       	st	Z, r1
    7d3c:	3c 97       	sbiw	r30, 0x0c	; 12
    7d3e:	b1 82       	std	Z+1, r11	; 0x01
    7d40:	a0 82       	st	Z, r10
    7d42:	32 97       	sbiw	r30, 0x02	; 2
    7d44:	11 83       	std	Z+1, r17	; 0x01
    7d46:	00 83       	st	Z, r16
    7d48:	39 97       	sbiw	r30, 0x09	; 9
    7d4a:	10 82       	st	Z, r1
    7d4c:	31 96       	adiw	r30, 0x01	; 1
    7d4e:	10 82       	st	Z, r1
    7d50:	31 96       	adiw	r30, 0x01	; 1
    7d52:	10 82       	st	Z, r1
    7d54:	c7 5d       	subi	r28, 0xD7	; 215
    7d56:	de 4f       	sbci	r29, 0xFE	; 254
    7d58:	ce 9c       	mul	r12, r14
    7d5a:	c0 01       	movw	r24, r0
    7d5c:	cf 9c       	mul	r12, r15
    7d5e:	90 0d       	add	r25, r0
    7d60:	de 9c       	mul	r13, r14
    7d62:	90 0d       	add	r25, r0
    7d64:	11 24       	eor	r1, r1
    7d66:	b0 e0       	ldi	r27, 0x00	; 0
    7d68:	a0 e0       	ldi	r26, 0x00	; 0
    7d6a:	88 83       	st	Y, r24
    7d6c:	99 83       	std	Y+1, r25	; 0x01
    7d6e:	aa 83       	std	Y+2, r26	; 0x02
    7d70:	bb 83       	std	Y+3, r27	; 0x03
    7d72:	df 91       	pop	r29
    7d74:	cf 91       	pop	r28
    7d76:	1f 91       	pop	r17
    7d78:	0f 91       	pop	r16
    7d7a:	ff 90       	pop	r15
    7d7c:	ef 90       	pop	r14
    7d7e:	df 90       	pop	r13
    7d80:	cf 90       	pop	r12
    7d82:	bf 90       	pop	r11
    7d84:	af 90       	pop	r10
    7d86:	08 95       	ret

00007d88 <Framebuffer_GFX::begin()>:
    7d88:	cf 93       	push	r28
    7d8a:	df 93       	push	r29
    7d8c:	ec 01       	movw	r28, r24
    7d8e:	6b e5       	ldi	r22, 0x5B	; 91
    7d90:	79 e0       	ldi	r23, 0x09	; 9
    7d92:	8a e6       	ldi	r24, 0x6A	; 106
    7d94:	91 e1       	ldi	r25, 0x11	; 17
    7d96:	0e 94 44 08 	call	0x1088	; 0x1088 <Print::write(char const*)>
    7d9a:	fe 01       	movw	r30, r28
    7d9c:	e3 5e       	subi	r30, 0xE3	; 227
    7d9e:	fe 4f       	sbci	r31, 0xFE	; 254
    7da0:	40 81       	ld	r20, Z
    7da2:	51 81       	ldd	r21, Z+1	; 0x01
    7da4:	70 e0       	ldi	r23, 0x00	; 0
    7da6:	60 e0       	ldi	r22, 0x00	; 0
    7da8:	20 e0       	ldi	r18, 0x00	; 0
    7daa:	8a e6       	ldi	r24, 0x6A	; 106
    7dac:	91 e1       	ldi	r25, 0x11	; 17
    7dae:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <Print::printNumberDec(unsigned long, unsigned char)>
    7db2:	6a e7       	ldi	r22, 0x7A	; 122
    7db4:	79 e0       	ldi	r23, 0x09	; 9
    7db6:	8a e6       	ldi	r24, 0x6A	; 106
    7db8:	91 e1       	ldi	r25, 0x11	; 17
    7dba:	0e 94 44 08 	call	0x1088	; 0x1088 <Print::write(char const*)>
    7dbe:	fe 01       	movw	r30, r28
    7dc0:	e1 5e       	subi	r30, 0xE1	; 225
    7dc2:	fe 4f       	sbci	r31, 0xFE	; 254
    7dc4:	40 81       	ld	r20, Z
    7dc6:	51 81       	ldd	r21, Z+1	; 0x01
    7dc8:	70 e0       	ldi	r23, 0x00	; 0
    7dca:	60 e0       	ldi	r22, 0x00	; 0
    7dcc:	20 e0       	ldi	r18, 0x00	; 0
    7dce:	8a e6       	ldi	r24, 0x6A	; 106
    7dd0:	91 e1       	ldi	r25, 0x11	; 17
    7dd2:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <Print::printNumberDec(unsigned long, unsigned char)>
    7dd6:	64 e8       	ldi	r22, 0x84	; 132
    7dd8:	79 e0       	ldi	r23, 0x09	; 9
    7dda:	8a e6       	ldi	r24, 0x6A	; 106
    7ddc:	91 e1       	ldi	r25, 0x11	; 17
    7dde:	0e 94 44 08 	call	0x1088	; 0x1088 <Print::write(char const*)>
    7de2:	c7 5d       	subi	r28, 0xD7	; 215
    7de4:	de 4f       	sbci	r29, 0xFE	; 254
    7de6:	48 81       	ld	r20, Y
    7de8:	59 81       	ldd	r21, Y+1	; 0x01
    7dea:	6a 81       	ldd	r22, Y+2	; 0x02
    7dec:	7b 81       	ldd	r23, Y+3	; 0x03
    7dee:	20 e0       	ldi	r18, 0x00	; 0
    7df0:	8a e6       	ldi	r24, 0x6A	; 106
    7df2:	91 e1       	ldi	r25, 0x11	; 17
    7df4:	0e 94 8e 4d 	call	0x9b1c	; 0x9b1c <Print::printNumberDec(unsigned long, unsigned char)>
    7df8:	8a e6       	ldi	r24, 0x6A	; 106
    7dfa:	91 e1       	ldi	r25, 0x11	; 17
    7dfc:	df 91       	pop	r29
    7dfe:	cf 91       	pop	r28
    7e00:	0c 94 74 4d 	jmp	0x9ae8	; 0x9ae8 <Print::println()>

00007e04 <Framebuffer_GFX::expandColor(unsigned int)>:
    7e04:	fc 01       	movw	r30, r24
    7e06:	ef 2f       	mov	r30, r31
    7e08:	ff 27       	eor	r31, r31
    7e0a:	e6 95       	lsr	r30
    7e0c:	e6 95       	lsr	r30
    7e0e:	e6 95       	lsr	r30
    7e10:	e8 56       	subi	r30, 0x68	; 104
    7e12:	f4 4f       	sbci	r31, 0xF4	; 244
    7e14:	24 91       	lpm	r18, Z
    7e16:	fc 01       	movw	r30, r24
    7e18:	35 e0       	ldi	r19, 0x05	; 5
    7e1a:	f6 95       	lsr	r31
    7e1c:	e7 95       	ror	r30
    7e1e:	3a 95       	dec	r19
    7e20:	e1 f7       	brne	.-8      	; 0x7e1a <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    7e22:	ef 73       	andi	r30, 0x3F	; 63
    7e24:	ff 27       	eor	r31, r31
    7e26:	e8 5a       	subi	r30, 0xA8	; 168
    7e28:	f4 4f       	sbci	r31, 0xF4	; 244
    7e2a:	64 91       	lpm	r22, Z
    7e2c:	8f 71       	andi	r24, 0x1F	; 31
    7e2e:	99 27       	eor	r25, r25
    7e30:	fc 01       	movw	r30, r24
    7e32:	e8 56       	subi	r30, 0x68	; 104
    7e34:	f4 4f       	sbci	r31, 0xF4	; 244
    7e36:	e4 91       	lpm	r30, Z
    7e38:	70 e0       	ldi	r23, 0x00	; 0
    7e3a:	90 e0       	ldi	r25, 0x00	; 0
    7e3c:	80 e0       	ldi	r24, 0x00	; 0
    7e3e:	98 2f       	mov	r25, r24
    7e40:	87 2f       	mov	r24, r23
    7e42:	76 2f       	mov	r23, r22
    7e44:	66 27       	eor	r22, r22
    7e46:	82 2b       	or	r24, r18
    7e48:	6e 2b       	or	r22, r30
    7e4a:	08 95       	ret

00007e4c <Framebuffer_GFX::fillScreen(unsigned int)>:
    7e4c:	8f 92       	push	r8
    7e4e:	9f 92       	push	r9
    7e50:	af 92       	push	r10
    7e52:	bf 92       	push	r11
    7e54:	cf 92       	push	r12
    7e56:	df 92       	push	r13
    7e58:	ef 92       	push	r14
    7e5a:	ff 92       	push	r15
    7e5c:	cf 93       	push	r28
    7e5e:	df 93       	push	r29
    7e60:	ec 01       	movw	r28, r24
    7e62:	cb 01       	movw	r24, r22
    7e64:	fe 01       	movw	r30, r28
    7e66:	ef 5c       	subi	r30, 0xCF	; 207
    7e68:	fe 4f       	sbci	r31, 0xFE	; 254
    7e6a:	20 81       	ld	r18, Z
    7e6c:	22 23       	and	r18, r18
    7e6e:	39 f1       	breq	.+78     	; 0x7ebe <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    7e70:	34 97       	sbiw	r30, 0x04	; 4
    7e72:	60 81       	ld	r22, Z
    7e74:	71 81       	ldd	r23, Z+1	; 0x01
    7e76:	82 81       	ldd	r24, Z+2	; 0x02
    7e78:	30 e0       	ldi	r19, 0x00	; 0
    7e7a:	20 e0       	ldi	r18, 0x00	; 0
    7e7c:	c1 2c       	mov	r12, r1
    7e7e:	d1 2c       	mov	r13, r1
    7e80:	76 01       	movw	r14, r12
    7e82:	de 01       	movw	r26, r28
    7e84:	a7 5d       	subi	r26, 0xD7	; 215
    7e86:	be 4f       	sbci	r27, 0xFE	; 254
    7e88:	cb 5d       	subi	r28, 0xDB	; 219
    7e8a:	de 4f       	sbci	r29, 0xFE	; 254
    7e8c:	8d 90       	ld	r8, X+
    7e8e:	9d 90       	ld	r9, X+
    7e90:	ad 90       	ld	r10, X+
    7e92:	bc 90       	ld	r11, X
    7e94:	13 97       	sbiw	r26, 0x03	; 3
    7e96:	c8 14       	cp	r12, r8
    7e98:	d9 04       	cpc	r13, r9
    7e9a:	ea 04       	cpc	r14, r10
    7e9c:	fb 04       	cpc	r15, r11
    7e9e:	88 f4       	brcc	.+34     	; 0x7ec2 <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    7ea0:	e8 81       	ld	r30, Y
    7ea2:	f9 81       	ldd	r31, Y+1	; 0x01
    7ea4:	e2 0f       	add	r30, r18
    7ea6:	f3 1f       	adc	r31, r19
    7ea8:	80 83       	st	Z, r24
    7eaa:	71 83       	std	Z+1, r23	; 0x01
    7eac:	62 83       	std	Z+2, r22	; 0x02
    7eae:	9f ef       	ldi	r25, 0xFF	; 255
    7eb0:	c9 1a       	sub	r12, r25
    7eb2:	d9 0a       	sbc	r13, r25
    7eb4:	e9 0a       	sbc	r14, r25
    7eb6:	f9 0a       	sbc	r15, r25
    7eb8:	2d 5f       	subi	r18, 0xFD	; 253
    7eba:	3f 4f       	sbci	r19, 0xFF	; 255
    7ebc:	e7 cf       	rjmp	.-50     	; 0x7e8c <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    7ebe:	a2 df       	rcall	.-188    	; 0x7e04 <Framebuffer_GFX::expandColor(unsigned int)>
    7ec0:	db cf       	rjmp	.-74     	; 0x7e78 <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    7ec2:	df 91       	pop	r29
    7ec4:	cf 91       	pop	r28
    7ec6:	ff 90       	pop	r15
    7ec8:	ef 90       	pop	r14
    7eca:	df 90       	pop	r13
    7ecc:	cf 90       	pop	r12
    7ece:	bf 90       	pop	r11
    7ed0:	af 90       	pop	r10
    7ed2:	9f 90       	pop	r9
    7ed4:	8f 90       	pop	r8
    7ed6:	08 95       	ret

00007ed8 <Framebuffer_GFX::CRGBtoint32(CRGB)>:
    7ed8:	0f 93       	push	r16
    7eda:	1f 93       	push	r17
    7edc:	fc 01       	movw	r30, r24
    7ede:	60 81       	ld	r22, Z
    7ee0:	70 e0       	ldi	r23, 0x00	; 0
    7ee2:	90 e0       	ldi	r25, 0x00	; 0
    7ee4:	80 e0       	ldi	r24, 0x00	; 0
    7ee6:	cb 01       	movw	r24, r22
    7ee8:	77 27       	eor	r23, r23
    7eea:	66 27       	eor	r22, r22
    7eec:	01 81       	ldd	r16, Z+1	; 0x01
    7eee:	10 e0       	ldi	r17, 0x00	; 0
    7ef0:	10 2f       	mov	r17, r16
    7ef2:	00 27       	eor	r16, r16
    7ef4:	01 2e       	mov	r0, r17
    7ef6:	00 0c       	add	r0, r0
    7ef8:	22 0b       	sbc	r18, r18
    7efa:	33 0b       	sbc	r19, r19
    7efc:	60 0f       	add	r22, r16
    7efe:	71 1f       	adc	r23, r17
    7f00:	82 1f       	adc	r24, r18
    7f02:	93 1f       	adc	r25, r19
    7f04:	22 81       	ldd	r18, Z+2	; 0x02
    7f06:	62 0f       	add	r22, r18
    7f08:	71 1d       	adc	r23, r1
    7f0a:	81 1d       	adc	r24, r1
    7f0c:	91 1d       	adc	r25, r1
    7f0e:	1f 91       	pop	r17
    7f10:	0f 91       	pop	r16
    7f12:	08 95       	ret

00007f14 <Framebuffer_GFX::XY(int, int)>:

int Framebuffer_GFX::XY(int16_t x, int16_t y) {
    7f14:	6f 92       	push	r6
    7f16:	7f 92       	push	r7
    7f18:	9f 92       	push	r9
    7f1a:	af 92       	push	r10
    7f1c:	bf 92       	push	r11
    7f1e:	cf 92       	push	r12
    7f20:	df 92       	push	r13
    7f22:	ef 92       	push	r14
    7f24:	ff 92       	push	r15
    7f26:	0f 93       	push	r16
    7f28:	1f 93       	push	r17
    7f2a:	cf 93       	push	r28
    7f2c:	df 93       	push	r29
    7f2e:	ec 01       	movw	r28, r24
    7f30:	cb 01       	movw	r24, r22
    7f32:	8a 01       	movw	r16, r20
  // If you send an out of bounds value, you get an special result 
  // pointing to the last pixel. It doesn't look great, but better
  // than crashing. Still, fix the upstream code.
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;
    7f34:	77 fd       	sbrc	r23, 7
    7f36:	0c c0       	rjmp	.+24     	; 0x7f50 <Framebuffer_GFX::XY(int, int)+0x3c>
    7f38:	57 fd       	sbrc	r21, 7
    7f3a:	0a c0       	rjmp	.+20     	; 0x7f50 <Framebuffer_GFX::XY(int, int)+0x3c>
    7f3c:	2f 81       	ldd	r18, Y+7	; 0x07
    7f3e:	38 85       	ldd	r19, Y+8	; 0x08
    7f40:	62 17       	cp	r22, r18
    7f42:	73 07       	cpc	r23, r19
    7f44:	2c f4       	brge	.+10     	; 0x7f50 <Framebuffer_GFX::XY(int, int)+0x3c>
    7f46:	29 85       	ldd	r18, Y+9	; 0x09
    7f48:	3a 85       	ldd	r19, Y+10	; 0x0a
    7f4a:	42 17       	cp	r20, r18
    7f4c:	53 07       	cpc	r21, r19
    7f4e:	9c f0       	brlt	.+38     	; 0x7f76 <Framebuffer_GFX::XY(int, int)+0x62>
    7f50:	c7 5d       	subi	r28, 0xD7	; 215
    7f52:	de 4f       	sbci	r29, 0xFE	; 254
    7f54:	88 81       	ld	r24, Y
    7f56:	99 81       	ldd	r25, Y+1	; 0x01
    7f58:	01 97       	sbiw	r24, 0x01	; 1
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}
    7f5a:	df 91       	pop	r29
    7f5c:	cf 91       	pop	r28
    7f5e:	1f 91       	pop	r17
    7f60:	0f 91       	pop	r16
    7f62:	ff 90       	pop	r15
    7f64:	ef 90       	pop	r14
    7f66:	df 90       	pop	r13
    7f68:	cf 90       	pop	r12
    7f6a:	bf 90       	pop	r11
    7f6c:	af 90       	pop	r10
    7f6e:	9f 90       	pop	r9
    7f70:	7f 90       	pop	r7
    7f72:	6f 90       	pop	r6
    7f74:	08 95       	ret
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;

  int16_t t;
  switch(rotation) {
    7f76:	2d 89       	ldd	r18, Y+21	; 0x15
    7f78:	22 30       	cpi	r18, 0x02	; 2
    7f7a:	d9 f0       	breq	.+54     	; 0x7fb2 <Framebuffer_GFX::XY(int, int)+0x9e>
    7f7c:	23 30       	cpi	r18, 0x03	; 3
    7f7e:	51 f1       	breq	.+84     	; 0x7fd4 <Framebuffer_GFX::XY(int, int)+0xc0>
    7f80:	21 30       	cpi	r18, 0x01	; 1
    7f82:	41 f4       	brne	.+16     	; 0x7f94 <Framebuffer_GFX::XY(int, int)+0x80>
   case 1:
    t = x;
    x = WIDTH  - 1 - y;
    7f84:	2b 81       	ldd	r18, Y+3	; 0x03
    7f86:	3c 81       	ldd	r19, Y+4	; 0x04
    7f88:	21 50       	subi	r18, 0x01	; 1
    7f8a:	31 09       	sbc	r19, r1
    7f8c:	24 1b       	sub	r18, r20
    7f8e:	35 0b       	sbc	r19, r21
    7f90:	8b 01       	movw	r16, r22
    7f92:	c9 01       	movw	r24, r18
    break;
  }

  int tileOffset = 0, pixelOffset;

  if(remapFn) { // Custom X/Y remapping function
    7f94:	fe 01       	movw	r30, r28
    7f96:	e9 5d       	subi	r30, 0xD9	; 217
    7f98:	fe 4f       	sbci	r31, 0xFE	; 254
    7f9a:	01 90       	ld	r0, Z+
    7f9c:	f0 81       	ld	r31, Z
    7f9e:	e0 2d       	mov	r30, r0
    7fa0:	30 97       	sbiw	r30, 0x00	; 0
    7fa2:	09 f1       	breq	.+66     	; 0x7fe6 <Framebuffer_GFX::XY(int, int)+0xd2>
    pixelOffset = (*remapFn)(x, y);
    7fa4:	b8 01       	movw	r22, r16
    7fa6:	09 95       	icall
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    7fa8:	50 e0       	ldi	r21, 0x00	; 0
    7faa:	40 e0       	ldi	r20, 0x00	; 0
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
    7fac:	84 0f       	add	r24, r20
    7fae:	95 1f       	adc	r25, r21
    7fb0:	d4 cf       	rjmp	.-88     	; 0x7f5a <Framebuffer_GFX::XY(int, int)+0x46>
    t = x;
    x = WIDTH  - 1 - y;
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
    7fb2:	2b 81       	ldd	r18, Y+3	; 0x03
    7fb4:	3c 81       	ldd	r19, Y+4	; 0x04
    7fb6:	21 50       	subi	r18, 0x01	; 1
    7fb8:	31 09       	sbc	r19, r1
    7fba:	a9 01       	movw	r20, r18
    7fbc:	46 1b       	sub	r20, r22
    7fbe:	57 0b       	sbc	r21, r23
    7fc0:	ca 01       	movw	r24, r20
    y = HEIGHT - 1 - y;
    7fc2:	2d 81       	ldd	r18, Y+5	; 0x05
    7fc4:	3e 81       	ldd	r19, Y+6	; 0x06
    7fc6:	21 50       	subi	r18, 0x01	; 1
    7fc8:	31 09       	sbc	r19, r1
    7fca:	f9 01       	movw	r30, r18
    7fcc:	e0 1b       	sub	r30, r16
    7fce:	f1 0b       	sbc	r31, r17
    7fd0:	8f 01       	movw	r16, r30
    7fd2:	e0 cf       	rjmp	.-64     	; 0x7f94 <Framebuffer_GFX::XY(int, int)+0x80>
    break;
   case 3:
    t = x;
    x = y;
    y = HEIGHT - 1 - t;
    7fd4:	2d 81       	ldd	r18, Y+5	; 0x05
    7fd6:	3e 81       	ldd	r19, Y+6	; 0x06
    7fd8:	21 50       	subi	r18, 0x01	; 1
    7fda:	31 09       	sbc	r19, r1
    7fdc:	26 1b       	sub	r18, r22
    7fde:	37 0b       	sbc	r19, r23
    7fe0:	ca 01       	movw	r24, r20
    7fe2:	89 01       	movw	r16, r18
    7fe4:	d7 cf       	rjmp	.-82     	; 0x7f94 <Framebuffer_GFX::XY(int, int)+0x80>

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    7fe6:	fe 01       	movw	r30, r28
    7fe8:	e6 5e       	subi	r30, 0xE6	; 230
    7fea:	fe 4f       	sbci	r31, 0xFE	; 254
    7fec:	d0 80       	ld	r13, Z
    7fee:	fd 2d       	mov	r31, r13
    7ff0:	f3 70       	andi	r31, 0x03	; 3
    7ff2:	cf 2e       	mov	r12, r31
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    7ff4:	fe 01       	movw	r30, r28
    7ff6:	e5 5e       	subi	r30, 0xE5	; 229
    7ff8:	fe 4f       	sbci	r31, 0xFE	; 254
    7ffa:	b0 80       	ld	r11, Z
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    7ffc:	50 e0       	ldi	r21, 0x00	; 0
    7ffe:	40 e0       	ldi	r20, 0x00	; 0
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    8000:	bb 20       	and	r11, r11
    8002:	09 f4       	brne	.+2      	; 0x8006 <Framebuffer_GFX::XY(int, int)+0xf2>
    8004:	64 c0       	rjmp	.+200    	; 0x80ce <Framebuffer_GFX::XY(int, int)+0x1ba>
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
    8006:	32 96       	adiw	r30, 0x02	; 2
    8008:	e0 80       	ld	r14, Z
    800a:	f1 80       	ldd	r15, Z+1	; 0x01
    800c:	b7 01       	movw	r22, r14
    800e:	0e 94 59 52 	call	0xa4b2	; 0xa4b2 <__udivmodhi4>
    8012:	9b 01       	movw	r18, r22
    8014:	98 2e       	mov	r9, r24
    8016:	a9 2e       	mov	r10, r25
      major = y / matrixHeight,           // start (will swap later if needed)
    8018:	32 96       	adiw	r30, 0x02	; 2
    801a:	60 80       	ld	r6, Z
    801c:	71 80       	ldd	r7, Z+1	; 0x01
    801e:	c8 01       	movw	r24, r16
    8020:	b3 01       	movw	r22, r6
    8022:	0e 94 59 52 	call	0xa4b2	; 0xa4b2 <__udivmodhi4>
    8026:	db 01       	movw	r26, r22
    8028:	58 2f       	mov	r21, r24
    802a:	49 2f       	mov	r20, r25
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
    802c:	89 2d       	mov	r24, r9
    802e:	9a 2d       	mov	r25, r10
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
    8030:	05 2f       	mov	r16, r21
    8032:	14 2f       	mov	r17, r20

      // Determine corner of entry, flip axes if needed
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
    8034:	d5 fe       	sbrs	r13, 5
    8036:	06 c0       	rjmp	.+12     	; 0x8044 <Framebuffer_GFX::XY(int, int)+0x130>
    8038:	4b 2d       	mov	r20, r11
    803a:	41 50       	subi	r20, 0x01	; 1
    803c:	55 0b       	sbc	r21, r21
    803e:	42 1b       	sub	r20, r18
    8040:	53 0b       	sbc	r21, r19
    8042:	9a 01       	movw	r18, r20
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
    8044:	d4 fe       	sbrs	r13, 4
    8046:	09 c0       	rjmp	.+18     	; 0x805a <Framebuffer_GFX::XY(int, int)+0x146>
    8048:	ae 01       	movw	r20, r28
    804a:	44 5e       	subi	r20, 0xE4	; 228
    804c:	5e 4f       	sbci	r21, 0xFE	; 254
    804e:	fa 01       	movw	r30, r20
    8050:	60 81       	ld	r22, Z
    8052:	61 50       	subi	r22, 0x01	; 1
    8054:	77 0b       	sbc	r23, r23
    8056:	6a 1b       	sub	r22, r26
    8058:	7b 0b       	sbc	r23, r27

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
    805a:	d6 fc       	sbrc	r13, 6
    805c:	11 c0       	rjmp	.+34     	; 0x8080 <Framebuffer_GFX::XY(int, int)+0x16c>
        majorScale = tilesX;
    805e:	4b 2d       	mov	r20, r11
    8060:	50 e0       	ldi	r21, 0x00	; 0
    8062:	b6 2f       	mov	r27, r22
    8064:	a7 2f       	mov	r26, r23
    8066:	b9 01       	movw	r22, r18
    8068:	2b 2f       	mov	r18, r27
    806a:	3a 2f       	mov	r19, r26
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
    806c:	d7 fc       	sbrc	r13, 7
    806e:	0e c0       	rjmp	.+28     	; 0x808c <Framebuffer_GFX::XY(int, int)+0x178>
        // pixel math later.
        if(major & 1) {
          corner ^= NEO_MATRIX_CORNER;
          tile = (major + 1) * majorScale - 1 - minor;
        } else {
          tile =  major      * majorScale     + minor;
    8070:	24 9f       	mul	r18, r20
    8072:	d0 01       	movw	r26, r0
    8074:	25 9f       	mul	r18, r21
    8076:	b0 0d       	add	r27, r0
    8078:	34 9f       	mul	r19, r20
    807a:	b0 0d       	add	r27, r0
    807c:	11 24       	eor	r1, r1
    807e:	17 c0       	rjmp	.+46     	; 0x80ae <Framebuffer_GFX::XY(int, int)+0x19a>
      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
        majorScale = tilesX;
      } else {
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
    8080:	de 01       	movw	r26, r28
    8082:	a4 5e       	subi	r26, 0xE4	; 228
    8084:	be 4f       	sbci	r27, 0xFE	; 254
    8086:	4c 91       	ld	r20, X
    8088:	50 e0       	ldi	r21, 0x00	; 0
    808a:	f0 cf       	rjmp	.-32     	; 0x806c <Framebuffer_GFX::XY(int, int)+0x158>
        tile = major * majorScale + minor;
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
    808c:	20 ff       	sbrs	r18, 0
    808e:	f0 cf       	rjmp	.-32     	; 0x8070 <Framebuffer_GFX::XY(int, int)+0x15c>
          corner ^= NEO_MATRIX_CORNER;
    8090:	ad 2d       	mov	r26, r13
    8092:	a0 95       	com	r26
    8094:	a3 70       	andi	r26, 0x03	; 3
    8096:	ca 2e       	mov	r12, r26
          tile = (major + 1) * majorScale - 1 - minor;
    8098:	2f 5f       	subi	r18, 0xFF	; 255
    809a:	3f 4f       	sbci	r19, 0xFF	; 255
    809c:	24 9f       	mul	r18, r20
    809e:	d0 01       	movw	r26, r0
    80a0:	25 9f       	mul	r18, r21
    80a2:	b0 0d       	add	r27, r0
    80a4:	34 9f       	mul	r19, r20
    80a6:	b0 0d       	add	r27, r0
    80a8:	11 24       	eor	r1, r1
    80aa:	60 95       	com	r22
    80ac:	70 95       	com	r23
        } else {
          tile =  major      * majorScale     + minor;
    80ae:	6a 0f       	add	r22, r26
    80b0:	7b 1f       	adc	r23, r27
        }
      }

      // Index of first pixel in tile
      tileOffset = tile * matrixWidth * matrixHeight;
    80b2:	e6 9c       	mul	r14, r6
    80b4:	90 01       	movw	r18, r0
    80b6:	e7 9c       	mul	r14, r7
    80b8:	30 0d       	add	r19, r0
    80ba:	f6 9c       	mul	r15, r6
    80bc:	30 0d       	add	r19, r0
    80be:	11 24       	eor	r1, r1
    80c0:	26 9f       	mul	r18, r22
    80c2:	a0 01       	movw	r20, r0
    80c4:	27 9f       	mul	r18, r23
    80c6:	50 0d       	add	r21, r0
    80c8:	36 9f       	mul	r19, r22
    80ca:	50 0d       	add	r21, r0
    80cc:	11 24       	eor	r1, r1

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;
    80ce:	98 01       	movw	r18, r16

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    80d0:	6c 2d       	mov	r22, r12
    80d2:	62 70       	andi	r22, 0x02	; 2
    80d4:	59 f0       	breq	.+22     	; 0x80ec <Framebuffer_GFX::XY(int, int)+0x1d8>
    80d6:	fe 01       	movw	r30, r28
    80d8:	e3 5e       	subi	r30, 0xE3	; 227
    80da:	fe 4f       	sbci	r31, 0xFE	; 254
    80dc:	60 81       	ld	r22, Z
    80de:	71 81       	ldd	r23, Z+1	; 0x01
    80e0:	61 50       	subi	r22, 0x01	; 1
    80e2:	71 09       	sbc	r23, r1
    80e4:	fb 01       	movw	r30, r22
    80e6:	e8 1b       	sub	r30, r24
    80e8:	f9 0b       	sbc	r31, r25
    80ea:	cf 01       	movw	r24, r30
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
    80ec:	c0 fe       	sbrs	r12, 0
    80ee:	09 c0       	rjmp	.+18     	; 0x8102 <Framebuffer_GFX::XY(int, int)+0x1ee>
    80f0:	fe 01       	movw	r30, r28
    80f2:	e1 5e       	subi	r30, 0xE1	; 225
    80f4:	fe 4f       	sbci	r31, 0xFE	; 254
    80f6:	20 81       	ld	r18, Z
    80f8:	31 81       	ldd	r19, Z+1	; 0x01
    80fa:	21 50       	subi	r18, 0x01	; 1
    80fc:	31 09       	sbc	r19, r1
    80fe:	20 1b       	sub	r18, r16
    8100:	31 0b       	sbc	r19, r17

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
    8102:	d2 fc       	sbrc	r13, 2
    8104:	13 c0       	rjmp	.+38     	; 0x812c <Framebuffer_GFX::XY(int, int)+0x218>
      majorScale = matrixWidth;
    8106:	c3 5e       	subi	r28, 0xE3	; 227
    8108:	de 4f       	sbci	r29, 0xFE	; 254
    810a:	68 81       	ld	r22, Y
    810c:	79 81       	ldd	r23, Y+1	; 0x01
    810e:	f2 2f       	mov	r31, r18
    8110:	e3 2f       	mov	r30, r19
    8112:	9c 01       	movw	r18, r24
    8114:	8f 2f       	mov	r24, r31
    8116:	9e 2f       	mov	r25, r30
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    }

    // Determine pixel number within tile/matrix
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
    8118:	d3 fc       	sbrc	r13, 3
    811a:	0d c0       	rjmp	.+26     	; 0x8136 <Framebuffer_GFX::XY(int, int)+0x222>
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
      else          pixelOffset =  major      * majorScale     + minor;
    811c:	86 9f       	mul	r24, r22
    811e:	f0 01       	movw	r30, r0
    8120:	87 9f       	mul	r24, r23
    8122:	f0 0d       	add	r31, r0
    8124:	96 9f       	mul	r25, r22
    8126:	f0 0d       	add	r31, r0
    8128:	11 24       	eor	r1, r1
    812a:	11 c0       	rjmp	.+34     	; 0x814e <Framebuffer_GFX::XY(int, int)+0x23a>
    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
      majorScale = matrixWidth;
    } else {
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    812c:	c1 5e       	subi	r28, 0xE1	; 225
    812e:	de 4f       	sbci	r29, 0xFE	; 254
    8130:	68 81       	ld	r22, Y
    8132:	79 81       	ldd	r23, Y+1	; 0x01
    8134:	f1 cf       	rjmp	.-30     	; 0x8118 <Framebuffer_GFX::XY(int, int)+0x204>
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
    8136:	80 ff       	sbrs	r24, 0
    8138:	f1 cf       	rjmp	.-30     	; 0x811c <Framebuffer_GFX::XY(int, int)+0x208>
    813a:	01 96       	adiw	r24, 0x01	; 1
    813c:	86 9f       	mul	r24, r22
    813e:	f0 01       	movw	r30, r0
    8140:	87 9f       	mul	r24, r23
    8142:	f0 0d       	add	r31, r0
    8144:	96 9f       	mul	r25, r22
    8146:	f0 0d       	add	r31, r0
    8148:	11 24       	eor	r1, r1
    814a:	20 95       	com	r18
    814c:	30 95       	com	r19
      else          pixelOffset =  major      * majorScale     + minor;
    814e:	cf 01       	movw	r24, r30
    8150:	82 0f       	add	r24, r18
    8152:	93 1f       	adc	r25, r19
    8154:	2b cf       	rjmp	.-426    	; 0x7fac <Framebuffer_GFX::XY(int, int)+0x98>

00008156 <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {
    8156:	9f 92       	push	r9
    8158:	af 92       	push	r10
    815a:	bf 92       	push	r11
    815c:	cf 92       	push	r12
    815e:	df 92       	push	r13
    8160:	ef 92       	push	r14
    8162:	ff 92       	push	r15
    8164:	0f 93       	push	r16
    8166:	1f 93       	push	r17
    8168:	cf 93       	push	r28
    816a:	df 93       	push	r29
    816c:	ec 01       	movw	r28, r24

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    816e:	77 fd       	sbrc	r23, 7
    8170:	2b c0       	rjmp	.+86     	; 0x81c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    8172:	57 fd       	sbrc	r21, 7
    8174:	29 c0       	rjmp	.+82     	; 0x81c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    8176:	8f 81       	ldd	r24, Y+7	; 0x07
    8178:	98 85       	ldd	r25, Y+8	; 0x08
    817a:	68 17       	cp	r22, r24
    817c:	79 07       	cpc	r23, r25
    817e:	24 f5       	brge	.+72     	; 0x81c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    8180:	89 85       	ldd	r24, Y+9	; 0x09
    8182:	9a 85       	ldd	r25, Y+10	; 0x0a
    8184:	48 17       	cp	r20, r24
    8186:	59 07       	cpc	r21, r25
    8188:	fc f4       	brge	.+62     	; 0x81c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    818a:	6a 01       	movw	r12, r20
    818c:	7b 01       	movw	r14, r22

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    818e:	fe 01       	movw	r30, r28
    8190:	ef 5c       	subi	r30, 0xCF	; 207
    8192:	fe 4f       	sbci	r31, 0xFE	; 254
    8194:	80 81       	ld	r24, Z
    8196:	88 23       	and	r24, r24
    8198:	19 f1       	breq	.+70     	; 0x81e0 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    819a:	34 97       	sbiw	r30, 0x04	; 4
    819c:	b0 80       	ld	r11, Z
    819e:	a1 80       	ldd	r10, Z+1	; 0x01
    81a0:	92 80       	ldd	r9, Z+2	; 0x02
    81a2:	fe 01       	movw	r30, r28
    81a4:	eb 5d       	subi	r30, 0xDB	; 219
    81a6:	fe 4f       	sbci	r31, 0xFE	; 254
    81a8:	00 81       	ld	r16, Z
    81aa:	11 81       	ldd	r17, Z+1	; 0x01
    81ac:	a6 01       	movw	r20, r12
    81ae:	b7 01       	movw	r22, r14
    81b0:	ce 01       	movw	r24, r28
    81b2:	b0 de       	rcall	.-672    	; 0x7f14 <Framebuffer_GFX::XY(int, int)>
    81b4:	fc 01       	movw	r30, r24
    81b6:	ee 0f       	add	r30, r30
    81b8:	ff 1f       	adc	r31, r31
    81ba:	e8 0f       	add	r30, r24
    81bc:	f9 1f       	adc	r31, r25
    81be:	e0 0f       	add	r30, r16
    81c0:	f1 1f       	adc	r31, r17
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    81c2:	90 82       	st	Z, r9
        g = (colorcode >>  8) & 0xFF;
    81c4:	a1 82       	std	Z+1, r10	; 0x01
        b = (colorcode >>  0) & 0xFF;
    81c6:	b2 82       	std	Z+2, r11	; 0x02
}
    81c8:	df 91       	pop	r29
    81ca:	cf 91       	pop	r28
    81cc:	1f 91       	pop	r17
    81ce:	0f 91       	pop	r16
    81d0:	ff 90       	pop	r15
    81d2:	ef 90       	pop	r14
    81d4:	df 90       	pop	r13
    81d6:	cf 90       	pop	r12
    81d8:	bf 90       	pop	r11
    81da:	af 90       	pop	r10
    81dc:	9f 90       	pop	r9
    81de:	08 95       	ret

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    81e0:	c9 01       	movw	r24, r18
    81e2:	10 de       	rcall	.-992    	; 0x7e04 <Framebuffer_GFX::expandColor(unsigned int)>
    81e4:	b6 2e       	mov	r11, r22
    81e6:	a7 2e       	mov	r10, r23
    81e8:	98 2e       	mov	r9, r24
    81ea:	db cf       	rjmp	.-74     	; 0x81a2 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

000081ec <Framebuffer_GFX::drawPixel(int, int, unsigned long)>:
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint32_t color) {
    81ec:	ff 92       	push	r15
    81ee:	0f 93       	push	r16
    81f0:	1f 93       	push	r17
    81f2:	cf 93       	push	r28
    81f4:	df 93       	push	r29
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    81f6:	77 fd       	sbrc	r23, 7
    81f8:	21 c0       	rjmp	.+66     	; 0x823c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    81fa:	57 fd       	sbrc	r21, 7
    81fc:	1f c0       	rjmp	.+62     	; 0x823c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    81fe:	dc 01       	movw	r26, r24
    8200:	17 96       	adiw	r26, 0x07	; 7
    8202:	ed 91       	ld	r30, X+
    8204:	fc 91       	ld	r31, X
    8206:	18 97       	sbiw	r26, 0x08	; 8
    8208:	6e 17       	cp	r22, r30
    820a:	7f 07       	cpc	r23, r31
    820c:	bc f4       	brge	.+46     	; 0x823c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    820e:	19 96       	adiw	r26, 0x09	; 9
    8210:	ed 91       	ld	r30, X+
    8212:	fc 91       	ld	r31, X
    8214:	4e 17       	cp	r20, r30
    8216:	5f 07       	cpc	r21, r31
    8218:	8c f4       	brge	.+34     	; 0x823c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    821a:	f2 2e       	mov	r15, r18
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif

  _fb[XY(x,y)] = color;
    821c:	fc 01       	movw	r30, r24
    821e:	eb 5d       	subi	r30, 0xDB	; 219
    8220:	fe 4f       	sbci	r31, 0xFE	; 254
    8222:	c0 81       	ld	r28, Z
    8224:	d1 81       	ldd	r29, Z+1	; 0x01
    8226:	76 de       	rcall	.-788    	; 0x7f14 <Framebuffer_GFX::XY(int, int)>
    8228:	fc 01       	movw	r30, r24
    822a:	ee 0f       	add	r30, r30
    822c:	ff 1f       	adc	r31, r31
    822e:	e8 0f       	add	r30, r24
    8230:	f9 1f       	adc	r31, r25
    8232:	ec 0f       	add	r30, r28
    8234:	fd 1f       	adc	r31, r29
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    8236:	f0 82       	st	Z, r15
        g = (colorcode >>  8) & 0xFF;
    8238:	11 83       	std	Z+1, r17	; 0x01
        b = (colorcode >>  0) & 0xFF;
    823a:	02 83       	std	Z+2, r16	; 0x02
}
    823c:	df 91       	pop	r29
    823e:	cf 91       	pop	r28
    8240:	1f 91       	pop	r17
    8242:	0f 91       	pop	r16
    8244:	ff 90       	pop	r15
    8246:	08 95       	ret

00008248 <Framebuffer_GFX::drawPixel(int, int, CRGB)>:

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
    8248:	af 92       	push	r10
    824a:	bf 92       	push	r11
    824c:	cf 92       	push	r12
    824e:	df 92       	push	r13
    8250:	ef 92       	push	r14
    8252:	ff 92       	push	r15
    8254:	0f 93       	push	r16
    8256:	1f 93       	push	r17
    8258:	cf 93       	push	r28
    825a:	df 93       	push	r29
    825c:	00 d0       	rcall	.+0      	; 0x825e <Framebuffer_GFX::drawPixel(int, int, CRGB)+0x16>
    825e:	1f 92       	push	r1
    8260:	cd b7       	in	r28, 0x3d	; 61
    8262:	de b7       	in	r29, 0x3e	; 62
    8264:	7c 01       	movw	r14, r24
    8266:	6b 01       	movw	r12, r22
    8268:	5a 01       	movw	r10, r20
    826a:	f9 01       	movw	r30, r18
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    826c:	80 81       	ld	r24, Z
    826e:	89 83       	std	Y+1, r24	; 0x01
        g = rhs.g;
    8270:	81 81       	ldd	r24, Z+1	; 0x01
    8272:	8a 83       	std	Y+2, r24	; 0x02
        b = rhs.b;
    8274:	82 81       	ldd	r24, Z+2	; 0x02
    8276:	8b 83       	std	Y+3, r24	; 0x03
  drawPixel(x, y, CRGBtoint32(c));
    8278:	ce 01       	movw	r24, r28
    827a:	01 96       	adiw	r24, 0x01	; 1
    827c:	2d de       	rcall	.-934    	; 0x7ed8 <Framebuffer_GFX::CRGBtoint32(CRGB)>
    827e:	8b 01       	movw	r16, r22
    8280:	9c 01       	movw	r18, r24
    8282:	a5 01       	movw	r20, r10
    8284:	b6 01       	movw	r22, r12
    8286:	c7 01       	movw	r24, r14
    8288:	b1 df       	rcall	.-158    	; 0x81ec <Framebuffer_GFX::drawPixel(int, int, unsigned long)>
}
    828a:	0f 90       	pop	r0
    828c:	0f 90       	pop	r0
    828e:	0f 90       	pop	r0
    8290:	df 91       	pop	r29
    8292:	cf 91       	pop	r28
    8294:	1f 91       	pop	r17
    8296:	0f 91       	pop	r16
    8298:	ff 90       	pop	r15
    829a:	ef 90       	pop	r14
    829c:	df 90       	pop	r13
    829e:	cf 90       	pop	r12
    82a0:	bf 90       	pop	r11
    82a2:	af 90       	pop	r10
    82a4:	08 95       	ret

000082a6 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    82a6:	89 5d       	subi	r24, 0xD9	; 217
    82a8:	9e 4f       	sbci	r25, 0xFE	; 254
    82aa:	fc 01       	movw	r30, r24
    82ac:	71 83       	std	Z+1, r23	; 0x01
    82ae:	60 83       	st	Z, r22
}
    82b0:	08 95       	ret

000082b2 <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    82b2:	da 01       	movw	r26, r20
    82b4:	fc 01       	movw	r30, r24
    82b6:	90 e0       	ldi	r25, 0x00	; 0
    82b8:	80 e0       	ldi	r24, 0x00	; 0
    82ba:	86 17       	cp	r24, r22
    82bc:	97 07       	cpc	r25, r23
    82be:	6c f4       	brge	.+26     	; 0x82da <fill_solid(CRGB*, int, CRGB const&)+0x28>
    82c0:	2c 91       	ld	r18, X
    82c2:	20 83       	st	Z, r18
    82c4:	11 96       	adiw	r26, 0x01	; 1
    82c6:	2c 91       	ld	r18, X
    82c8:	11 97       	sbiw	r26, 0x01	; 1
    82ca:	21 83       	std	Z+1, r18	; 0x01
    82cc:	12 96       	adiw	r26, 0x02	; 2
    82ce:	2c 91       	ld	r18, X
    82d0:	12 97       	sbiw	r26, 0x02	; 2
    82d2:	22 83       	std	Z+2, r18	; 0x02
    82d4:	01 96       	adiw	r24, 0x01	; 1
    82d6:	33 96       	adiw	r30, 0x03	; 3
    82d8:	f0 cf       	rjmp	.-32     	; 0x82ba <fill_solid(CRGB*, int, CRGB const&)+0x8>
    82da:	08 95       	ret

000082dc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    82dc:	0f 93       	push	r16
    82de:	1f 93       	push	r17
    82e0:	cf 93       	push	r28
    82e2:	df 93       	push	r29
    82e4:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    82e6:	84 2f       	mov	r24, r20
    82e8:	82 95       	swap	r24
    82ea:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    82ec:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    82ee:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    82f0:	a8 2f       	mov	r26, r24
    82f2:	aa 0f       	add	r26, r26
    82f4:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    82f6:	a6 0f       	add	r26, r22
    82f8:	b7 2f       	mov	r27, r23
    82fa:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    82fc:	44 23       	and	r20, r20
    82fe:	19 f0       	breq	.+6      	; 0x8306 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    8300:	31 e0       	ldi	r19, 0x01	; 1
    8302:	01 2b       	or	r16, r17
    8304:	09 f4       	brne	.+2      	; 0x8308 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    8306:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    8308:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    830a:	11 96       	adiw	r26, 0x01	; 1
    830c:	5c 91       	ld	r21, X
    830e:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    8310:	12 96       	adiw	r26, 0x02	; 2
    8312:	9c 91       	ld	r25, X
    8314:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    8316:	33 23       	and	r19, r19
    8318:	09 f4       	brne	.+2      	; 0x831c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    831a:	2a c0       	rjmp	.+84     	; 0x8370 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    831c:	8f 30       	cpi	r24, 0x0F	; 15
    831e:	11 f0       	breq	.+4      	; 0x8324 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    8320:	ed 01       	movw	r28, r26
    8322:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    8324:	42 95       	swap	r20
    8326:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    8328:	74 2f       	mov	r23, r20
    832a:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    832c:	67 9f       	mul	r22, r23
    832e:	06 0e       	add	r0, r22
    8330:	60 e0       	ldi	r22, 0x00	; 0
    8332:	61 1d       	adc	r22, r1
    8334:	38 81       	ld	r19, Y
    8336:	34 9f       	mul	r19, r20
    8338:	03 0e       	add	r0, r19
    833a:	30 e0       	ldi	r19, 0x00	; 0
    833c:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    833e:	63 0f       	add	r22, r19
    8340:	57 9f       	mul	r21, r23
    8342:	05 0e       	add	r0, r21
    8344:	50 e0       	ldi	r21, 0x00	; 0
    8346:	51 1d       	adc	r21, r1
    8348:	39 81       	ldd	r19, Y+1	; 0x01
    834a:	34 9f       	mul	r19, r20
    834c:	03 0e       	add	r0, r19
    834e:	30 e0       	ldi	r19, 0x00	; 0
    8350:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    8352:	53 0f       	add	r21, r19
    8354:	39 2f       	mov	r19, r25
    8356:	37 9f       	mul	r19, r23
    8358:	03 0e       	add	r0, r19
    835a:	30 e0       	ldi	r19, 0x00	; 0
    835c:	31 1d       	adc	r19, r1
    835e:	9a 81       	ldd	r25, Y+2	; 0x02
    8360:	79 2f       	mov	r23, r25
    8362:	74 9f       	mul	r23, r20
    8364:	07 0e       	add	r0, r23
    8366:	70 e0       	ldi	r23, 0x00	; 0
    8368:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    836a:	93 2f       	mov	r25, r19
    836c:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    836e:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    8370:	2f 3f       	cpi	r18, 0xFF	; 255
    8372:	c1 f0       	breq	.+48     	; 0x83a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    8374:	22 23       	and	r18, r18
    8376:	f9 f0       	breq	.+62     	; 0x83b6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    8378:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    837a:	66 23       	and	r22, r22
    837c:	21 f0       	breq	.+8      	; 0x8386 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    837e:	62 9f       	mul	r22, r18
    8380:	06 0e       	add	r0, r22
    8382:	60 e0       	ldi	r22, 0x00	; 0
    8384:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    8386:	55 23       	and	r21, r21
    8388:	21 f0       	breq	.+8      	; 0x8392 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    838a:	52 9f       	mul	r21, r18
    838c:	05 0e       	add	r0, r21
    838e:	50 e0       	ldi	r21, 0x00	; 0
    8390:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    8392:	99 23       	and	r25, r25
    8394:	31 f0       	breq	.+12     	; 0x83a2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    8396:	39 2f       	mov	r19, r25
    8398:	32 9f       	mul	r19, r18
    839a:	03 0e       	add	r0, r19
    839c:	30 e0       	ldi	r19, 0x00	; 0
    839e:	31 1d       	adc	r19, r1
    83a0:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    83a2:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    83a4:	60 83       	st	Z, r22
    83a6:	51 83       	std	Z+1, r21	; 0x01
    83a8:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    83aa:	cf 01       	movw	r24, r30
    83ac:	df 91       	pop	r29
    83ae:	cf 91       	pop	r28
    83b0:	1f 91       	pop	r17
    83b2:	0f 91       	pop	r16
    83b4:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    83b6:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    83b8:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    83ba:	60 e0       	ldi	r22, 0x00	; 0
    83bc:	f3 cf       	rjmp	.-26     	; 0x83a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

000083be <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    83be:	7f 92       	push	r7
    83c0:	8f 92       	push	r8
    83c2:	9f 92       	push	r9
    83c4:	af 92       	push	r10
    83c6:	bf 92       	push	r11
    83c8:	cf 92       	push	r12
    83ca:	df 92       	push	r13
    83cc:	ef 92       	push	r14
    83ce:	ff 92       	push	r15
    83d0:	0f 93       	push	r16
    83d2:	1f 93       	push	r17
    83d4:	cf 93       	push	r28
    83d6:	df 93       	push	r29
    83d8:	fc 01       	movw	r30, r24
    83da:	69 01       	movw	r12, r18
    83dc:	10 82       	st	Z, r1
    83de:	11 82       	std	Z+1, r1	; 0x01
    83e0:	12 82       	std	Z+2, r1	; 0x02
    83e2:	66 23       	and	r22, r22
    83e4:	b9 f1       	breq	.+110    	; 0x8454 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    83e6:	8a 01       	movw	r16, r20
    83e8:	c1 e0       	ldi	r28, 0x01	; 1
    83ea:	d0 e0       	ldi	r29, 0x00	; 0
    83ec:	86 2e       	mov	r8, r22
    83ee:	91 2c       	mov	r9, r1
    83f0:	b1 2c       	mov	r11, r1
    83f2:	a1 2c       	mov	r10, r1
    83f4:	d8 01       	movw	r26, r16
    83f6:	2d 91       	ld	r18, X+
    83f8:	8d 01       	movw	r16, r26
    83fa:	22 23       	and	r18, r18
    83fc:	39 f1       	breq	.+78     	; 0x844c <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    83fe:	7e 01       	movw	r14, r28
    8400:	b1 e0       	ldi	r27, 0x01	; 1
    8402:	eb 1a       	sub	r14, r27
    8404:	f1 08       	sbc	r15, r1
    8406:	d6 01       	movw	r26, r12
    8408:	ae 0d       	add	r26, r14
    840a:	bf 1d       	adc	r27, r15
    840c:	7c 90       	ld	r7, X
    840e:	77 20       	and	r7, r7
    8410:	e9 f0       	breq	.+58     	; 0x844c <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    8412:	30 e0       	ldi	r19, 0x00	; 0
    8414:	50 e0       	ldi	r21, 0x00	; 0
    8416:	40 e0       	ldi	r20, 0x00	; 0
    8418:	2f 5f       	subi	r18, 0xFF	; 255
    841a:	3f 4f       	sbci	r19, 0xFF	; 255
    841c:	4f 4f       	sbci	r20, 0xFF	; 255
    841e:	5f 4f       	sbci	r21, 0xFF	; 255
    8420:	c5 01       	movw	r24, r10
    8422:	b4 01       	movw	r22, r8
    8424:	0e 94 4a 52 	call	0xa494	; 0xa494 <__mulsi3>
    8428:	9b 01       	movw	r18, r22
    842a:	ac 01       	movw	r20, r24
    842c:	87 2d       	mov	r24, r7
    842e:	90 e0       	ldi	r25, 0x00	; 0
    8430:	b0 e0       	ldi	r27, 0x00	; 0
    8432:	a0 e0       	ldi	r26, 0x00	; 0
    8434:	bc 01       	movw	r22, r24
    8436:	cd 01       	movw	r24, r26
    8438:	6f 5f       	subi	r22, 0xFF	; 255
    843a:	7f 4f       	sbci	r23, 0xFF	; 255
    843c:	8f 4f       	sbci	r24, 0xFF	; 255
    843e:	9f 4f       	sbci	r25, 0xFF	; 255
    8440:	0e 94 4a 52 	call	0xa494	; 0xa494 <__mulsi3>
    8444:	df 01       	movw	r26, r30
    8446:	ae 0d       	add	r26, r14
    8448:	bf 1d       	adc	r27, r15
    844a:	8c 93       	st	X, r24
    844c:	21 96       	adiw	r28, 0x01	; 1
    844e:	c4 30       	cpi	r28, 0x04	; 4
    8450:	d1 05       	cpc	r29, r1
    8452:	81 f6       	brne	.-96     	; 0x83f4 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    8454:	cf 01       	movw	r24, r30
    8456:	df 91       	pop	r29
    8458:	cf 91       	pop	r28
    845a:	1f 91       	pop	r17
    845c:	0f 91       	pop	r16
    845e:	ff 90       	pop	r15
    8460:	ef 90       	pop	r14
    8462:	df 90       	pop	r13
    8464:	cf 90       	pop	r12
    8466:	bf 90       	pop	r11
    8468:	af 90       	pop	r10
    846a:	9f 90       	pop	r9
    846c:	8f 90       	pop	r8
    846e:	7f 90       	pop	r7
    8470:	08 95       	ret

00008472 <CFastLED::CFastLED()>:
    8472:	fc 01       	movw	r30, r24
    8474:	8f ef       	ldi	r24, 0xFF	; 255
    8476:	80 83       	st	Z, r24
    8478:	12 82       	std	Z+2, r1	; 0x02
    847a:	11 82       	std	Z+1, r1	; 0x01
    847c:	14 86       	std	Z+12, r1	; 0x0c
    847e:	13 86       	std	Z+11, r1	; 0x0b
    8480:	8f ef       	ldi	r24, 0xFF	; 255
    8482:	9f ef       	ldi	r25, 0xFF	; 255
    8484:	dc 01       	movw	r26, r24
    8486:	87 83       	std	Z+7, r24	; 0x07
    8488:	90 87       	std	Z+8, r25	; 0x08
    848a:	a1 87       	std	Z+9, r26	; 0x09
    848c:	b2 87       	std	Z+10, r27	; 0x0a
    848e:	08 95       	ret

00008490 <CFastLED::clearData()>:
    8490:	cf 93       	push	r28
    8492:	df 93       	push	r29
    8494:	c0 91 d8 10 	lds	r28, 0x10D8	; 0x8010d8 <CLEDController::m_pHead>
    8498:	d0 91 d9 10 	lds	r29, 0x10D9	; 0x8010d9 <CLEDController::m_pHead+0x1>
    849c:	20 97       	sbiw	r28, 0x00	; 0
    849e:	89 f0       	breq	.+34     	; 0x84c2 <CFastLED::clearData()+0x32>
    84a0:	8a 81       	ldd	r24, Y+2	; 0x02
    84a2:	9b 81       	ldd	r25, Y+3	; 0x03
    84a4:	00 97       	sbiw	r24, 0x00	; 0
    84a6:	49 f0       	breq	.+18     	; 0x84ba <CFastLED::clearData()+0x2a>
    84a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    84aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    84ac:	a9 01       	movw	r20, r18
    84ae:	44 0f       	add	r20, r20
    84b0:	55 1f       	adc	r21, r21
    84b2:	42 0f       	add	r20, r18
    84b4:	53 1f       	adc	r21, r19
    84b6:	60 e0       	ldi	r22, 0x00	; 0
    84b8:	d0 d2       	rcall	.+1440   	; 0x8a5a <memset8>
    84ba:	0c 80       	ldd	r0, Y+4	; 0x04
    84bc:	dd 81       	ldd	r29, Y+5	; 0x05
    84be:	c0 2d       	mov	r28, r0
    84c0:	ed cf       	rjmp	.-38     	; 0x849c <CFastLED::clearData()+0xc>
    84c2:	df 91       	pop	r29
    84c4:	cf 91       	pop	r28
    84c6:	08 95       	ret

000084c8 <CFastLED::countFPS(int)>:
    84c8:	cf 92       	push	r12
    84ca:	df 92       	push	r13
    84cc:	ef 92       	push	r14
    84ce:	ff 92       	push	r15
    84d0:	cf 93       	push	r28
    84d2:	df 93       	push	r29
    84d4:	ec 01       	movw	r28, r24
    84d6:	20 91 d0 10 	lds	r18, 0x10D0	; 0x8010d0 <CFastLED::countFPS(int)::br>
    84da:	30 91 d1 10 	lds	r19, 0x10D1	; 0x8010d1 <CFastLED::countFPS(int)::br+0x1>
    84de:	c9 01       	movw	r24, r18
    84e0:	01 96       	adiw	r24, 0x01	; 1
    84e2:	90 93 d1 10 	sts	0x10D1, r25	; 0x8010d1 <CFastLED::countFPS(int)::br+0x1>
    84e6:	80 93 d0 10 	sts	0x10D0, r24	; 0x8010d0 <CFastLED::countFPS(int)::br>
    84ea:	26 17       	cp	r18, r22
    84ec:	37 07       	cpc	r19, r23
    84ee:	0c f4       	brge	.+2      	; 0x84f2 <CFastLED::countFPS(int)+0x2a>
    84f0:	3f c0       	rjmp	.+126    	; 0x8570 <CFastLED::countFPS(int)+0xa8>
    84f2:	0f b6       	in	r0, 0x3f	; 63
    84f4:	f8 94       	cli
    84f6:	20 91 ea 10 	lds	r18, 0x10EA	; 0x8010ea <timer0_millis_count>
    84fa:	30 91 eb 10 	lds	r19, 0x10EB	; 0x8010eb <timer0_millis_count+0x1>
    84fe:	40 91 ec 10 	lds	r20, 0x10EC	; 0x8010ec <timer0_millis_count+0x2>
    8502:	50 91 ed 10 	lds	r21, 0x10ED	; 0x8010ed <timer0_millis_count+0x3>
    8506:	0f be       	out	0x3f, r0	; 63
    8508:	e8 ee       	ldi	r30, 0xE8	; 232
    850a:	f3 e0       	ldi	r31, 0x03	; 3
    850c:	8e 9f       	mul	r24, r30
    850e:	b0 01       	movw	r22, r0
    8510:	8f 9f       	mul	r24, r31
    8512:	70 0d       	add	r23, r0
    8514:	9e 9f       	mul	r25, r30
    8516:	70 0d       	add	r23, r0
    8518:	11 24       	eor	r1, r1
    851a:	07 2e       	mov	r0, r23
    851c:	00 0c       	add	r0, r0
    851e:	88 0b       	sbc	r24, r24
    8520:	99 0b       	sbc	r25, r25
    8522:	c0 90 cc 10 	lds	r12, 0x10CC	; 0x8010cc <CFastLED::countFPS(int)::lastframe>
    8526:	d0 90 cd 10 	lds	r13, 0x10CD	; 0x8010cd <CFastLED::countFPS(int)::lastframe+0x1>
    852a:	e0 90 ce 10 	lds	r14, 0x10CE	; 0x8010ce <CFastLED::countFPS(int)::lastframe+0x2>
    852e:	f0 90 cf 10 	lds	r15, 0x10CF	; 0x8010cf <CFastLED::countFPS(int)::lastframe+0x3>
    8532:	2c 19       	sub	r18, r12
    8534:	3d 09       	sbc	r19, r13
    8536:	4e 09       	sbc	r20, r14
    8538:	5f 09       	sbc	r21, r15
    853a:	0e 94 80 52 	call	0xa500	; 0xa500 <__udivmodsi4>
    853e:	3a 83       	std	Y+2, r19	; 0x02
    8540:	29 83       	std	Y+1, r18	; 0x01
    8542:	10 92 d1 10 	sts	0x10D1, r1	; 0x8010d1 <CFastLED::countFPS(int)::br+0x1>
    8546:	10 92 d0 10 	sts	0x10D0, r1	; 0x8010d0 <CFastLED::countFPS(int)::br>
    854a:	0f b6       	in	r0, 0x3f	; 63
    854c:	f8 94       	cli
    854e:	80 91 ea 10 	lds	r24, 0x10EA	; 0x8010ea <timer0_millis_count>
    8552:	90 91 eb 10 	lds	r25, 0x10EB	; 0x8010eb <timer0_millis_count+0x1>
    8556:	a0 91 ec 10 	lds	r26, 0x10EC	; 0x8010ec <timer0_millis_count+0x2>
    855a:	b0 91 ed 10 	lds	r27, 0x10ED	; 0x8010ed <timer0_millis_count+0x3>
    855e:	0f be       	out	0x3f, r0	; 63
    8560:	80 93 cc 10 	sts	0x10CC, r24	; 0x8010cc <CFastLED::countFPS(int)::lastframe>
    8564:	90 93 cd 10 	sts	0x10CD, r25	; 0x8010cd <CFastLED::countFPS(int)::lastframe+0x1>
    8568:	a0 93 ce 10 	sts	0x10CE, r26	; 0x8010ce <CFastLED::countFPS(int)::lastframe+0x2>
    856c:	b0 93 cf 10 	sts	0x10CF, r27	; 0x8010cf <CFastLED::countFPS(int)::lastframe+0x3>
    8570:	df 91       	pop	r29
    8572:	cf 91       	pop	r28
    8574:	ff 90       	pop	r15
    8576:	ef 90       	pop	r14
    8578:	df 90       	pop	r13
    857a:	cf 90       	pop	r12
    857c:	08 95       	ret

0000857e <CFastLED::show(unsigned char)>:
    857e:	8f 92       	push	r8
    8580:	9f 92       	push	r9
    8582:	af 92       	push	r10
    8584:	bf 92       	push	r11
    8586:	cf 92       	push	r12
    8588:	df 92       	push	r13
    858a:	ef 92       	push	r14
    858c:	ff 92       	push	r15
    858e:	0f 93       	push	r16
    8590:	1f 93       	push	r17
    8592:	cf 93       	push	r28
    8594:	df 93       	push	r29
    8596:	00 d0       	rcall	.+0      	; 0x8598 <CFastLED::show(unsigned char)+0x1a>
    8598:	1f 92       	push	r1
    859a:	cd b7       	in	r28, 0x3d	; 61
    859c:	de b7       	in	r29, 0x3e	; 62
    859e:	7c 01       	movw	r14, r24
    85a0:	d6 2e       	mov	r13, r22
    85a2:	d7 01       	movw	r26, r14
    85a4:	13 96       	adiw	r26, 0x03	; 3
    85a6:	0d 91       	ld	r16, X+
    85a8:	1d 91       	ld	r17, X+
    85aa:	2d 91       	ld	r18, X+
    85ac:	3c 91       	ld	r19, X
    85ae:	16 97       	sbiw	r26, 0x06	; 6
    85b0:	01 15       	cp	r16, r1
    85b2:	11 05       	cpc	r17, r1
    85b4:	21 05       	cpc	r18, r1
    85b6:	31 05       	cpc	r19, r1
    85b8:	91 f0       	breq	.+36     	; 0x85de <CFastLED::show(unsigned char)+0x60>
    85ba:	7d d6       	rcall	.+3322   	; 0x92b6 <_micros>
    85bc:	80 90 d2 10 	lds	r8, 0x10D2	; 0x8010d2 <lastshow>
    85c0:	90 90 d3 10 	lds	r9, 0x10D3	; 0x8010d3 <lastshow+0x1>
    85c4:	a0 90 d4 10 	lds	r10, 0x10D4	; 0x8010d4 <lastshow+0x2>
    85c8:	b0 90 d5 10 	lds	r11, 0x10D5	; 0x8010d5 <lastshow+0x3>
    85cc:	68 19       	sub	r22, r8
    85ce:	79 09       	sbc	r23, r9
    85d0:	8a 09       	sbc	r24, r10
    85d2:	9b 09       	sbc	r25, r11
    85d4:	60 17       	cp	r22, r16
    85d6:	71 07       	cpc	r23, r17
    85d8:	82 07       	cpc	r24, r18
    85da:	93 07       	cpc	r25, r19
    85dc:	10 f3       	brcs	.-60     	; 0x85a2 <CFastLED::show(unsigned char)+0x24>
    85de:	6b d6       	rcall	.+3286   	; 0x92b6 <_micros>
    85e0:	60 93 d2 10 	sts	0x10D2, r22	; 0x8010d2 <lastshow>
    85e4:	70 93 d3 10 	sts	0x10D3, r23	; 0x8010d3 <lastshow+0x1>
    85e8:	80 93 d4 10 	sts	0x10D4, r24	; 0x8010d4 <lastshow+0x2>
    85ec:	90 93 d5 10 	sts	0x10D5, r25	; 0x8010d5 <lastshow+0x3>
    85f0:	d7 01       	movw	r26, r14
    85f2:	1b 96       	adiw	r26, 0x0b	; 11
    85f4:	ed 91       	ld	r30, X+
    85f6:	fc 91       	ld	r31, X
    85f8:	1c 97       	sbiw	r26, 0x0c	; 12
    85fa:	30 97       	sbiw	r30, 0x00	; 0
    85fc:	49 f0       	breq	.+18     	; 0x8610 <CFastLED::show(unsigned char)+0x92>
    85fe:	17 96       	adiw	r26, 0x07	; 7
    8600:	4d 91       	ld	r20, X+
    8602:	5d 91       	ld	r21, X+
    8604:	6d 91       	ld	r22, X+
    8606:	7c 91       	ld	r23, X
    8608:	1a 97       	sbiw	r26, 0x0a	; 10
    860a:	8d 2d       	mov	r24, r13
    860c:	09 95       	icall
    860e:	d8 2e       	mov	r13, r24
    8610:	00 91 d8 10 	lds	r16, 0x10D8	; 0x8010d8 <CLEDController::m_pHead>
    8614:	10 91 d9 10 	lds	r17, 0x10D9	; 0x8010d9 <CLEDController::m_pHead+0x1>
    8618:	01 15       	cp	r16, r1
    861a:	11 05       	cpc	r17, r1
    861c:	61 f1       	breq	.+88     	; 0x8676 <CFastLED::show(unsigned char)+0xf8>
    861e:	f8 01       	movw	r30, r16
    8620:	c4 84       	ldd	r12, Z+12	; 0x0c
    8622:	d7 01       	movw	r26, r14
    8624:	11 96       	adiw	r26, 0x01	; 1
    8626:	8d 91       	ld	r24, X+
    8628:	9c 91       	ld	r25, X
    862a:	84 36       	cpi	r24, 0x64	; 100
    862c:	91 05       	cpc	r25, r1
    862e:	08 f4       	brcc	.+2      	; 0x8632 <CFastLED::show(unsigned char)+0xb4>
    8630:	14 86       	std	Z+12, r1	; 0x0c
    8632:	d8 01       	movw	r26, r16
    8634:	ed 91       	ld	r30, X+
    8636:	fc 91       	ld	r31, X
    8638:	a2 80       	ldd	r10, Z+2	; 0x02
    863a:	b3 80       	ldd	r11, Z+3	; 0x03
    863c:	98 01       	movw	r18, r16
    863e:	27 5f       	subi	r18, 0xF7	; 247
    8640:	3f 4f       	sbci	r19, 0xFF	; 255
    8642:	a8 01       	movw	r20, r16
    8644:	4a 5f       	subi	r20, 0xFA	; 250
    8646:	5f 4f       	sbci	r21, 0xFF	; 255
    8648:	6d 2d       	mov	r22, r13
    864a:	ce 01       	movw	r24, r28
    864c:	01 96       	adiw	r24, 0x01	; 1
    864e:	b7 de       	rcall	.-658    	; 0x83be <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    8650:	f8 01       	movw	r30, r16
    8652:	45 85       	ldd	r20, Z+13	; 0x0d
    8654:	56 85       	ldd	r21, Z+14	; 0x0e
    8656:	62 81       	ldd	r22, Z+2	; 0x02
    8658:	73 81       	ldd	r23, Z+3	; 0x03
    865a:	9e 01       	movw	r18, r28
    865c:	2f 5f       	subi	r18, 0xFF	; 255
    865e:	3f 4f       	sbci	r19, 0xFF	; 255
    8660:	c8 01       	movw	r24, r16
    8662:	f5 01       	movw	r30, r10
    8664:	09 95       	icall
    8666:	d8 01       	movw	r26, r16
    8668:	1c 96       	adiw	r26, 0x0c	; 12
    866a:	cc 92       	st	X, r12
    866c:	1c 97       	sbiw	r26, 0x0c	; 12
    866e:	14 96       	adiw	r26, 0x04	; 4
    8670:	0d 91       	ld	r16, X+
    8672:	1c 91       	ld	r17, X
    8674:	d1 cf       	rjmp	.-94     	; 0x8618 <CFastLED::show(unsigned char)+0x9a>
    8676:	69 e1       	ldi	r22, 0x19	; 25
    8678:	70 e0       	ldi	r23, 0x00	; 0
    867a:	c7 01       	movw	r24, r14
    867c:	25 df       	rcall	.-438    	; 0x84c8 <CFastLED::countFPS(int)>
    867e:	0f 90       	pop	r0
    8680:	0f 90       	pop	r0
    8682:	0f 90       	pop	r0
    8684:	df 91       	pop	r29
    8686:	cf 91       	pop	r28
    8688:	1f 91       	pop	r17
    868a:	0f 91       	pop	r16
    868c:	ff 90       	pop	r15
    868e:	ef 90       	pop	r14
    8690:	df 90       	pop	r13
    8692:	cf 90       	pop	r12
    8694:	bf 90       	pop	r11
    8696:	af 90       	pop	r10
    8698:	9f 90       	pop	r9
    869a:	8f 90       	pop	r8
    869c:	08 95       	ret

0000869e <CFastLED::showColor(CRGB const&, unsigned char)>:
    869e:	4f 92       	push	r4
    86a0:	5f 92       	push	r5
    86a2:	6f 92       	push	r6
    86a4:	7f 92       	push	r7
    86a6:	8f 92       	push	r8
    86a8:	9f 92       	push	r9
    86aa:	af 92       	push	r10
    86ac:	bf 92       	push	r11
    86ae:	cf 92       	push	r12
    86b0:	df 92       	push	r13
    86b2:	ef 92       	push	r14
    86b4:	ff 92       	push	r15
    86b6:	0f 93       	push	r16
    86b8:	1f 93       	push	r17
    86ba:	cf 93       	push	r28
    86bc:	df 93       	push	r29
    86be:	00 d0       	rcall	.+0      	; 0x86c0 <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    86c0:	1f 92       	push	r1
    86c2:	cd b7       	in	r28, 0x3d	; 61
    86c4:	de b7       	in	r29, 0x3e	; 62
    86c6:	7c 01       	movw	r14, r24
    86c8:	5b 01       	movw	r10, r22
    86ca:	d4 2e       	mov	r13, r20
    86cc:	d7 01       	movw	r26, r14
    86ce:	13 96       	adiw	r26, 0x03	; 3
    86d0:	0d 91       	ld	r16, X+
    86d2:	1d 91       	ld	r17, X+
    86d4:	2d 91       	ld	r18, X+
    86d6:	3c 91       	ld	r19, X
    86d8:	16 97       	sbiw	r26, 0x06	; 6
    86da:	01 15       	cp	r16, r1
    86dc:	11 05       	cpc	r17, r1
    86de:	21 05       	cpc	r18, r1
    86e0:	31 05       	cpc	r19, r1
    86e2:	91 f0       	breq	.+36     	; 0x8708 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    86e4:	e8 d5       	rcall	.+3024   	; 0x92b6 <_micros>
    86e6:	40 90 d2 10 	lds	r4, 0x10D2	; 0x8010d2 <lastshow>
    86ea:	50 90 d3 10 	lds	r5, 0x10D3	; 0x8010d3 <lastshow+0x1>
    86ee:	60 90 d4 10 	lds	r6, 0x10D4	; 0x8010d4 <lastshow+0x2>
    86f2:	70 90 d5 10 	lds	r7, 0x10D5	; 0x8010d5 <lastshow+0x3>
    86f6:	64 19       	sub	r22, r4
    86f8:	75 09       	sbc	r23, r5
    86fa:	86 09       	sbc	r24, r6
    86fc:	97 09       	sbc	r25, r7
    86fe:	60 17       	cp	r22, r16
    8700:	71 07       	cpc	r23, r17
    8702:	82 07       	cpc	r24, r18
    8704:	93 07       	cpc	r25, r19
    8706:	10 f3       	brcs	.-60     	; 0x86cc <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    8708:	d6 d5       	rcall	.+2988   	; 0x92b6 <_micros>
    870a:	60 93 d2 10 	sts	0x10D2, r22	; 0x8010d2 <lastshow>
    870e:	70 93 d3 10 	sts	0x10D3, r23	; 0x8010d3 <lastshow+0x1>
    8712:	80 93 d4 10 	sts	0x10D4, r24	; 0x8010d4 <lastshow+0x2>
    8716:	90 93 d5 10 	sts	0x10D5, r25	; 0x8010d5 <lastshow+0x3>
    871a:	d7 01       	movw	r26, r14
    871c:	1b 96       	adiw	r26, 0x0b	; 11
    871e:	ed 91       	ld	r30, X+
    8720:	fc 91       	ld	r31, X
    8722:	1c 97       	sbiw	r26, 0x0c	; 12
    8724:	30 97       	sbiw	r30, 0x00	; 0
    8726:	49 f0       	breq	.+18     	; 0x873a <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    8728:	17 96       	adiw	r26, 0x07	; 7
    872a:	4d 91       	ld	r20, X+
    872c:	5d 91       	ld	r21, X+
    872e:	6d 91       	ld	r22, X+
    8730:	7c 91       	ld	r23, X
    8732:	1a 97       	sbiw	r26, 0x0a	; 10
    8734:	8d 2d       	mov	r24, r13
    8736:	09 95       	icall
    8738:	d8 2e       	mov	r13, r24
    873a:	00 91 d8 10 	lds	r16, 0x10D8	; 0x8010d8 <CLEDController::m_pHead>
    873e:	10 91 d9 10 	lds	r17, 0x10D9	; 0x8010d9 <CLEDController::m_pHead+0x1>
    8742:	01 15       	cp	r16, r1
    8744:	11 05       	cpc	r17, r1
    8746:	59 f1       	breq	.+86     	; 0x879e <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    8748:	f8 01       	movw	r30, r16
    874a:	c4 84       	ldd	r12, Z+12	; 0x0c
    874c:	d7 01       	movw	r26, r14
    874e:	11 96       	adiw	r26, 0x01	; 1
    8750:	8d 91       	ld	r24, X+
    8752:	9c 91       	ld	r25, X
    8754:	84 36       	cpi	r24, 0x64	; 100
    8756:	91 05       	cpc	r25, r1
    8758:	08 f4       	brcc	.+2      	; 0x875c <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    875a:	14 86       	std	Z+12, r1	; 0x0c
    875c:	d8 01       	movw	r26, r16
    875e:	ed 91       	ld	r30, X+
    8760:	fc 91       	ld	r31, X
    8762:	80 80       	ld	r8, Z
    8764:	91 80       	ldd	r9, Z+1	; 0x01
    8766:	98 01       	movw	r18, r16
    8768:	27 5f       	subi	r18, 0xF7	; 247
    876a:	3f 4f       	sbci	r19, 0xFF	; 255
    876c:	a8 01       	movw	r20, r16
    876e:	4a 5f       	subi	r20, 0xFA	; 250
    8770:	5f 4f       	sbci	r21, 0xFF	; 255
    8772:	6d 2d       	mov	r22, r13
    8774:	ce 01       	movw	r24, r28
    8776:	01 96       	adiw	r24, 0x01	; 1
    8778:	22 de       	rcall	.-956    	; 0x83be <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    877a:	f8 01       	movw	r30, r16
    877c:	45 85       	ldd	r20, Z+13	; 0x0d
    877e:	56 85       	ldd	r21, Z+14	; 0x0e
    8780:	9e 01       	movw	r18, r28
    8782:	2f 5f       	subi	r18, 0xFF	; 255
    8784:	3f 4f       	sbci	r19, 0xFF	; 255
    8786:	b5 01       	movw	r22, r10
    8788:	c8 01       	movw	r24, r16
    878a:	f4 01       	movw	r30, r8
    878c:	09 95       	icall
    878e:	d8 01       	movw	r26, r16
    8790:	1c 96       	adiw	r26, 0x0c	; 12
    8792:	cc 92       	st	X, r12
    8794:	1c 97       	sbiw	r26, 0x0c	; 12
    8796:	14 96       	adiw	r26, 0x04	; 4
    8798:	0d 91       	ld	r16, X+
    879a:	1c 91       	ld	r17, X
    879c:	d2 cf       	rjmp	.-92     	; 0x8742 <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    879e:	69 e1       	ldi	r22, 0x19	; 25
    87a0:	70 e0       	ldi	r23, 0x00	; 0
    87a2:	c7 01       	movw	r24, r14
    87a4:	91 de       	rcall	.-734    	; 0x84c8 <CFastLED::countFPS(int)>
    87a6:	0f 90       	pop	r0
    87a8:	0f 90       	pop	r0
    87aa:	0f 90       	pop	r0
    87ac:	df 91       	pop	r29
    87ae:	cf 91       	pop	r28
    87b0:	1f 91       	pop	r17
    87b2:	0f 91       	pop	r16
    87b4:	ff 90       	pop	r15
    87b6:	ef 90       	pop	r14
    87b8:	df 90       	pop	r13
    87ba:	cf 90       	pop	r12
    87bc:	bf 90       	pop	r11
    87be:	af 90       	pop	r10
    87c0:	9f 90       	pop	r9
    87c2:	8f 90       	pop	r8
    87c4:	7f 90       	pop	r7
    87c6:	6f 90       	pop	r6
    87c8:	5f 90       	pop	r5
    87ca:	4f 90       	pop	r4
    87cc:	08 95       	ret

000087ce <CFastLED::clear(bool)>:
    87ce:	0f 93       	push	r16
    87d0:	1f 93       	push	r17
    87d2:	cf 93       	push	r28
    87d4:	df 93       	push	r29
    87d6:	00 d0       	rcall	.+0      	; 0x87d8 <CFastLED::clear(bool)+0xa>
    87d8:	1f 92       	push	r1
    87da:	cd b7       	in	r28, 0x3d	; 61
    87dc:	de b7       	in	r29, 0x3e	; 62
    87de:	8c 01       	movw	r16, r24
    87e0:	66 23       	and	r22, r22
    87e2:	41 f0       	breq	.+16     	; 0x87f4 <CFastLED::clear(bool)+0x26>
    87e4:	19 82       	std	Y+1, r1	; 0x01
    87e6:	1a 82       	std	Y+2, r1	; 0x02
    87e8:	1b 82       	std	Y+3, r1	; 0x03
    87ea:	40 e0       	ldi	r20, 0x00	; 0
    87ec:	be 01       	movw	r22, r28
    87ee:	6f 5f       	subi	r22, 0xFF	; 255
    87f0:	7f 4f       	sbci	r23, 0xFF	; 255
    87f2:	55 df       	rcall	.-342    	; 0x869e <CFastLED::showColor(CRGB const&, unsigned char)>
    87f4:	c8 01       	movw	r24, r16
    87f6:	4c de       	rcall	.-872    	; 0x8490 <CFastLED::clearData()>
    87f8:	0f 90       	pop	r0
    87fa:	0f 90       	pop	r0
    87fc:	0f 90       	pop	r0
    87fe:	df 91       	pop	r29
    8800:	cf 91       	pop	r28
    8802:	1f 91       	pop	r17
    8804:	0f 91       	pop	r16
    8806:	08 95       	ret

00008808 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    8808:	cf 93       	push	r28
    880a:	df 93       	push	r29
    880c:	ec 01       	movw	r28, r24
    880e:	44 23       	and	r20, r20
    8810:	f1 f0       	breq	.+60     	; 0x884e <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    8812:	61 15       	cp	r22, r1
    8814:	71 05       	cpc	r23, r1
    8816:	c1 f0       	breq	.+48     	; 0x8848 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    8818:	9b 01       	movw	r18, r22
    881a:	50 e0       	ldi	r21, 0x00	; 0
    881c:	40 e0       	ldi	r20, 0x00	; 0
    881e:	60 e4       	ldi	r22, 0x40	; 64
    8820:	72 e4       	ldi	r23, 0x42	; 66
    8822:	8f e0       	ldi	r24, 0x0F	; 15
    8824:	90 e0       	ldi	r25, 0x00	; 0
    8826:	0e 94 a2 52 	call	0xa544	; 0xa544 <__divmodsi4>
    882a:	8b 81       	ldd	r24, Y+3	; 0x03
    882c:	9c 81       	ldd	r25, Y+4	; 0x04
    882e:	ad 81       	ldd	r26, Y+5	; 0x05
    8830:	be 81       	ldd	r27, Y+6	; 0x06
    8832:	82 17       	cp	r24, r18
    8834:	93 07       	cpc	r25, r19
    8836:	a4 07       	cpc	r26, r20
    8838:	b5 07       	cpc	r27, r21
    883a:	10 f4       	brcc	.+4      	; 0x8840 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    883c:	da 01       	movw	r26, r20
    883e:	c9 01       	movw	r24, r18
    8840:	8b 83       	std	Y+3, r24	; 0x03
    8842:	9c 83       	std	Y+4, r25	; 0x04
    8844:	ad 83       	std	Y+5, r26	; 0x05
    8846:	be 83       	std	Y+6, r27	; 0x06
    8848:	df 91       	pop	r29
    884a:	cf 91       	pop	r28
    884c:	08 95       	ret
    884e:	61 15       	cp	r22, r1
    8850:	71 05       	cpc	r23, r1
    8852:	71 f0       	breq	.+28     	; 0x8870 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    8854:	9b 01       	movw	r18, r22
    8856:	50 e0       	ldi	r21, 0x00	; 0
    8858:	40 e0       	ldi	r20, 0x00	; 0
    885a:	60 e4       	ldi	r22, 0x40	; 64
    885c:	72 e4       	ldi	r23, 0x42	; 66
    885e:	8f e0       	ldi	r24, 0x0F	; 15
    8860:	90 e0       	ldi	r25, 0x00	; 0
    8862:	0e 94 a2 52 	call	0xa544	; 0xa544 <__divmodsi4>
    8866:	2b 83       	std	Y+3, r18	; 0x03
    8868:	3c 83       	std	Y+4, r19	; 0x04
    886a:	4d 83       	std	Y+5, r20	; 0x05
    886c:	5e 83       	std	Y+6, r21	; 0x06
    886e:	ec cf       	rjmp	.-40     	; 0x8848 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    8870:	1b 82       	std	Y+3, r1	; 0x03
    8872:	1c 82       	std	Y+4, r1	; 0x04
    8874:	1d 82       	std	Y+5, r1	; 0x05
    8876:	1e 82       	std	Y+6, r1	; 0x06
    8878:	e7 cf       	rjmp	.-50     	; 0x8848 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

0000887a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    887a:	cf 92       	push	r12
    887c:	df 92       	push	r13
    887e:	ef 92       	push	r14
    8880:	ff 92       	push	r15
    8882:	0f 93       	push	r16
    8884:	1f 93       	push	r17
    8886:	cf 93       	push	r28
    8888:	df 93       	push	r29
    888a:	ec 01       	movw	r28, r24
    888c:	6b 01       	movw	r12, r22
    888e:	7a 01       	movw	r14, r20
    8890:	10 e0       	ldi	r17, 0x00	; 0
    8892:	00 e0       	ldi	r16, 0x00	; 0
    8894:	12 16       	cp	r1, r18
    8896:	13 06       	cpc	r1, r19
    8898:	14 f4       	brge	.+4      	; 0x889e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    889a:	8a 01       	movw	r16, r20
    889c:	79 01       	movw	r14, r18
    889e:	e8 81       	ld	r30, Y
    88a0:	f9 81       	ldd	r31, Y+1	; 0x01
    88a2:	04 80       	ldd	r0, Z+4	; 0x04
    88a4:	f5 81       	ldd	r31, Z+5	; 0x05
    88a6:	e0 2d       	mov	r30, r0
    88a8:	ce 01       	movw	r24, r28
    88aa:	09 95       	icall
    88ac:	c8 01       	movw	r24, r16
    88ae:	88 0f       	add	r24, r24
    88b0:	99 1f       	adc	r25, r25
    88b2:	08 0f       	add	r16, r24
    88b4:	19 1f       	adc	r17, r25
    88b6:	c0 0e       	add	r12, r16
    88b8:	d1 1e       	adc	r13, r17
    88ba:	db 82       	std	Y+3, r13	; 0x03
    88bc:	ca 82       	std	Y+2, r12	; 0x02
    88be:	ed 86       	std	Y+13, r14	; 0x0d
    88c0:	fe 86       	std	Y+14, r15	; 0x0e
    88c2:	e8 81       	ld	r30, Y
    88c4:	f9 81       	ldd	r31, Y+1	; 0x01
    88c6:	02 84       	ldd	r0, Z+10	; 0x0a
    88c8:	f3 85       	ldd	r31, Z+11	; 0x0b
    88ca:	e0 2d       	mov	r30, r0
    88cc:	ce 01       	movw	r24, r28
    88ce:	09 95       	icall
    88d0:	41 e0       	ldi	r20, 0x01	; 1
    88d2:	bc 01       	movw	r22, r24
    88d4:	8a ed       	ldi	r24, 0xDA	; 218
    88d6:	90 e1       	ldi	r25, 0x10	; 16
    88d8:	97 df       	rcall	.-210    	; 0x8808 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    88da:	ce 01       	movw	r24, r28
    88dc:	df 91       	pop	r29
    88de:	cf 91       	pop	r28
    88e0:	1f 91       	pop	r17
    88e2:	0f 91       	pop	r16
    88e4:	ff 90       	pop	r15
    88e6:	ef 90       	pop	r14
    88e8:	df 90       	pop	r13
    88ea:	cf 90       	pop	r12
    88ec:	08 95       	ret

000088ee <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    88ee:	8a ed       	ldi	r24, 0xDA	; 218
    88f0:	90 e1       	ldi	r25, 0x10	; 16
    88f2:	bf cd       	rjmp	.-1154   	; 0x8472 <CFastLED::CFastLED()>

000088f4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    88f4:	1f 93       	push	r17
    88f6:	dc 01       	movw	r26, r24
    88f8:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    88fa:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    88fc:	11 96       	adiw	r26, 0x01	; 1
    88fe:	4c 91       	ld	r20, X
    8900:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    8902:	12 96       	adiw	r26, 0x02	; 2
    8904:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    8906:	97 2f       	mov	r25, r23
    8908:	99 0f       	add	r25, r25
    890a:	99 0f       	add	r25, r25
    890c:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    890e:	35 e5       	ldi	r19, 0x55	; 85
    8910:	29 2f       	mov	r18, r25
    8912:	23 9f       	mul	r18, r19
    8914:	02 0e       	add	r0, r18
    8916:	20 e0       	ldi	r18, 0x00	; 0
    8918:	21 1d       	adc	r18, r1
    891a:	11 24       	eor	r1, r1
    891c:	82 2f       	mov	r24, r18
    891e:	67 2f       	mov	r22, r23
    8920:	60 74       	andi	r22, 0x40	; 64
    8922:	57 2f       	mov	r21, r23
    8924:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    8926:	77 fd       	sbrc	r23, 7
    8928:	6f c0       	rjmp	.+222    	; 0x8a08 <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    892a:	61 11       	cpse	r22, r1
    892c:	5b c0       	rjmp	.+182    	; 0x89e4 <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    892e:	51 11       	cpse	r21, r1
    8930:	05 c0       	rjmp	.+10     	; 0x893c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    8932:	92 2f       	mov	r25, r18
    8934:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    8936:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    8938:	90 e0       	ldi	r25, 0x00	; 0
    893a:	04 c0       	rjmp	.+8      	; 0x8944 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    893c:	25 e5       	ldi	r18, 0x55	; 85
    893e:	28 0f       	add	r18, r24
                    b = 0;
    8940:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    8942:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    8944:	4f 3f       	cpi	r20, 0xFF	; 255
    8946:	09 f4       	brne	.+2      	; 0x894a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    8948:	24 c0       	rjmp	.+72     	; 0x8992 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    894a:	44 23       	and	r20, r20
    894c:	09 f4       	brne	.+2      	; 0x8950 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    894e:	7d c0       	rjmp	.+250    	; 0x8a4a <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    8950:	88 23       	and	r24, r24
    8952:	31 f0       	breq	.+12     	; 0x8960 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    8954:	38 2f       	mov	r19, r24
    8956:	34 9f       	mul	r19, r20
    8958:	03 0e       	add	r0, r19
    895a:	30 e0       	ldi	r19, 0x00	; 0
    895c:	31 1d       	adc	r19, r1
    895e:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    8960:	22 23       	and	r18, r18
    8962:	21 f0       	breq	.+8      	; 0x896c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    8964:	24 9f       	mul	r18, r20
    8966:	02 0e       	add	r0, r18
    8968:	20 e0       	ldi	r18, 0x00	; 0
    896a:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    896c:	99 23       	and	r25, r25
    896e:	31 f0       	breq	.+12     	; 0x897c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    8970:	39 2f       	mov	r19, r25
    8972:	34 9f       	mul	r19, r20
    8974:	03 0e       	add	r0, r19
    8976:	30 e0       	ldi	r19, 0x00	; 0
    8978:	31 1d       	adc	r19, r1
    897a:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    897c:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    897e:	34 2f       	mov	r19, r20
    8980:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    8982:	33 9f       	mul	r19, r19
    8984:	03 0e       	add	r0, r19
    8986:	30 e0       	ldi	r19, 0x00	; 0
    8988:	31 1d       	adc	r19, r1
    898a:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    898c:	83 0f       	add	r24, r19
            g += brightness_floor;
    898e:	23 0f       	add	r18, r19
            b += brightness_floor;
    8990:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    8992:	1f 3f       	cpi	r17, 0xFF	; 255
    8994:	09 f4       	brne	.+2      	; 0x8998 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    8996:	21 c0       	rjmp	.+66     	; 0x89da <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    8998:	30 e0       	ldi	r19, 0x00	; 0
    899a:	11 23       	and	r17, r17
    899c:	21 f0       	breq	.+8      	; 0x89a6 <L_630>
    899e:	11 9f       	mul	r17, r17
    89a0:	31 2d       	mov	r19, r1
    89a2:	09 f0       	breq	.+2      	; 0x89a6 <L_630>
    89a4:	3f 5f       	subi	r19, 0xFF	; 255

000089a6 <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    89a6:	33 23       	and	r19, r19
    89a8:	09 f4       	brne	.+2      	; 0x89ac <L_630+0x6>
    89aa:	53 c0       	rjmp	.+166    	; 0x8a52 <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    89ac:	88 23       	and	r24, r24
    89ae:	31 f0       	breq	.+12     	; 0x89bc <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    89b0:	48 2f       	mov	r20, r24
    89b2:	43 9f       	mul	r20, r19
    89b4:	04 0e       	add	r0, r20
    89b6:	40 e0       	ldi	r20, 0x00	; 0
    89b8:	41 1d       	adc	r20, r1
    89ba:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    89bc:	22 23       	and	r18, r18
    89be:	21 f0       	breq	.+8      	; 0x89c8 <L_630+0x22>
    89c0:	23 9f       	mul	r18, r19
    89c2:	02 0e       	add	r0, r18
    89c4:	20 e0       	ldi	r18, 0x00	; 0
    89c6:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    89c8:	99 23       	and	r25, r25
    89ca:	31 f0       	breq	.+12     	; 0x89d8 <L_630+0x32>
    89cc:	49 2f       	mov	r20, r25
    89ce:	43 9f       	mul	r20, r19
    89d0:	04 0e       	add	r0, r20
    89d2:	40 e0       	ldi	r20, 0x00	; 0
    89d4:	41 1d       	adc	r20, r1
    89d6:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    89d8:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    89da:	80 83       	st	Z, r24
    rgb.g = g;
    89dc:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    89de:	92 83       	std	Z+2, r25	; 0x02
}
    89e0:	1f 91       	pop	r17
    89e2:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    89e4:	51 11       	cpse	r21, r1
    89e6:	0b c0       	rjmp	.+22     	; 0x89fe <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    89e8:	39 2f       	mov	r19, r25
    89ea:	2a ea       	ldi	r18, 0xAA	; 170
    89ec:	32 9f       	mul	r19, r18
    89ee:	03 0e       	add	r0, r19
    89f0:	30 e0       	ldi	r19, 0x00	; 0
    89f2:	31 1d       	adc	r19, r1
    89f4:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    89f6:	9b ea       	ldi	r25, 0xAB	; 171
    89f8:	93 1b       	sub	r25, r19
                    g = K170 + third;
    89fa:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    89fc:	9c cf       	rjmp	.-200    	; 0x8936 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    89fe:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    8a00:	20 95       	com	r18
                b = third;
    8a02:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    8a04:	80 e0       	ldi	r24, 0x00	; 0
    8a06:	9e cf       	rjmp	.-196    	; 0x8944 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    8a08:	61 11       	cpse	r22, r1
    8a0a:	12 c0       	rjmp	.+36     	; 0x8a30 <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    8a0c:	51 11       	cpse	r21, r1
    8a0e:	0c c0       	rjmp	.+24     	; 0x8a28 <L_630+0x82>
    8a10:	39 2f       	mov	r19, r25
    8a12:	2a ea       	ldi	r18, 0xAA	; 170
    8a14:	32 9f       	mul	r19, r18
    8a16:	03 0e       	add	r0, r19
    8a18:	30 e0       	ldi	r19, 0x00	; 0
    8a1a:	31 1d       	adc	r19, r1
    8a1c:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    8a1e:	2b ea       	ldi	r18, 0xAB	; 171
    8a20:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    8a22:	95 e5       	ldi	r25, 0x55	; 85
    8a24:	93 0f       	add	r25, r19
    8a26:	ee cf       	rjmp	.-36     	; 0x8a04 <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    8a28:	92 2f       	mov	r25, r18
    8a2a:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    8a2c:	20 e0       	ldi	r18, 0x00	; 0
    8a2e:	8a cf       	rjmp	.-236    	; 0x8944 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    8a30:	51 11       	cpse	r21, r1
    8a32:	06 c0       	rjmp	.+12     	; 0x8a40 <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    8a34:	25 e5       	ldi	r18, 0x55	; 85
    8a36:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    8a38:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    8a3a:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    8a3c:	82 2f       	mov	r24, r18
    8a3e:	f6 cf       	rjmp	.-20     	; 0x8a2c <L_630+0x86>
    8a40:	2a ea       	ldi	r18, 0xAA	; 170
    8a42:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    8a44:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    8a46:	93 2f       	mov	r25, r19
    8a48:	f8 cf       	rjmp	.-16     	; 0x8a3a <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    8a4a:	9f ef       	ldi	r25, 0xFF	; 255
    8a4c:	2f ef       	ldi	r18, 0xFF	; 255
    8a4e:	8f ef       	ldi	r24, 0xFF	; 255
    8a50:	a0 cf       	rjmp	.-192    	; 0x8992 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    8a52:	90 e0       	ldi	r25, 0x00	; 0
    8a54:	20 e0       	ldi	r18, 0x00	; 0
    8a56:	80 e0       	ldi	r24, 0x00	; 0
    8a58:	c0 cf       	rjmp	.-128    	; 0x89da <L_630+0x34>

00008a5a <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    8a5a:	dc 01       	movw	r26, r24
    8a5c:	40 ff       	sbrs	r20, 0
    8a5e:	03 c0       	rjmp	.+6      	; 0x8a66 <Lseteven_8>
    8a60:	01 c0       	rjmp	.+2      	; 0x8a64 <Lsetodd_8>

00008a62 <Lsetloop_8>:
    8a62:	6d 93       	st	X+, r22

00008a64 <Lsetodd_8>:
    8a64:	6d 93       	st	X+, r22

00008a66 <Lseteven_8>:
    8a66:	42 50       	subi	r20, 0x02	; 2
    8a68:	e0 f7       	brcc	.-8      	; 0x8a62 <Lsetloop_8>
    8a6a:	50 40       	sbci	r21, 0x00	; 0
    8a6c:	d0 f7       	brcc	.-12     	; 0x8a62 <Lsetloop_8>
    return ptr;
}
    8a6e:	08 95       	ret

00008a70 <memcpy8>:
         "  brcc Lcpyloop_%=        \n\t"
         : [num] "+r" (num)
         : [src] "r" (src),
           [dst] "r" (dst)
         : "memory"
         );
    8a70:	fb 01       	movw	r30, r22
    8a72:	dc 01       	movw	r26, r24
    8a74:	40 ff       	sbrs	r20, 0
    8a76:	05 c0       	rjmp	.+10     	; 0x8a82 <Lcpyeven_23>
    8a78:	02 c0       	rjmp	.+4      	; 0x8a7e <Lcpyodd_23>

00008a7a <Lcpyloop_23>:
    8a7a:	01 90       	ld	r0, Z+
    8a7c:	0d 92       	st	X+, r0

00008a7e <Lcpyodd_23>:
    8a7e:	01 90       	ld	r0, Z+
    8a80:	0d 92       	st	X+, r0

00008a82 <Lcpyeven_23>:
    8a82:	42 50       	subi	r20, 0x02	; 2
    8a84:	d0 f7       	brcc	.-12     	; 0x8a7a <Lcpyloop_23>
    8a86:	50 40       	sbci	r21, 0x00	; 0
    8a88:	c0 f7       	brcc	.-16     	; 0x8a7a <Lcpyloop_23>
    return dst;
}
    8a8a:	08 95       	ret

00008a8c <memmove8>:

//__attribute__ ((noinline))
void * memmove8 ( void * dst, const void* src, uint16_t num )
{
    if( src > dst) {
    8a8c:	86 17       	cp	r24, r22
    8a8e:	97 07       	cpc	r25, r23
    8a90:	08 f4       	brcc	.+2      	; 0x8a94 <memmove8+0x8>
        // if src > dst then we can use the forward-stepping memcpy8
        return memcpy8( dst, src, num);
    8a92:	ee cf       	rjmp	.-36     	; 0x8a70 <memcpy8>
    } else {
        // if src < dst then we have to step backward:
        dst = (char*)dst + num;
    8a94:	84 0f       	add	r24, r20
    8a96:	95 1f       	adc	r25, r21
        src = (char*)src + num;
    8a98:	64 0f       	add	r22, r20
    8a9a:	75 1f       	adc	r23, r21
             "  brcc Lmovloop_%=        \n\t"
             : [num] "+r" (num)
             : [src] "r" (src),
               [dst] "r" (dst)
             : "memory"
             );
    8a9c:	fb 01       	movw	r30, r22
    8a9e:	dc 01       	movw	r26, r24
    8aa0:	40 ff       	sbrs	r20, 0
    8aa2:	05 c0       	rjmp	.+10     	; 0x8aae <Lmoveven_58>
    8aa4:	02 c0       	rjmp	.+4      	; 0x8aaa <Lmovodd_58>

00008aa6 <Lmovloop_58>:
    8aa6:	02 90       	ld	r0, -Z
    8aa8:	0e 92       	st	-X, r0

00008aaa <Lmovodd_58>:
    8aaa:	02 90       	ld	r0, -Z
    8aac:	0e 92       	st	-X, r0

00008aae <Lmoveven_58>:
    8aae:	42 50       	subi	r20, 0x02	; 2
    8ab0:	d0 f7       	brcc	.-12     	; 0x8aa6 <Lmovloop_58>
    8ab2:	50 40       	sbci	r21, 0x00	; 0
    8ab4:	c0 f7       	brcc	.-16     	; 0x8aa6 <Lmovloop_58>
        return dst;
    }
}
    8ab6:	08 95       	ret

00008ab8 <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    8ab8:	0f 93       	push	r16
    8aba:	1f 93       	push	r17
    8abc:	cf 93       	push	r28
    8abe:	df 93       	push	r29
    8ac0:	82 30       	cpi	r24, 0x02	; 2
    8ac2:	91 05       	cpc	r25, r1
    8ac4:	10 f4       	brcc	.+4      	; 0x8aca <malloc+0x12>
    8ac6:	82 e0       	ldi	r24, 0x02	; 2
    8ac8:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    8aca:	e0 91 74 11 	lds	r30, 0x1174	; 0x801174 <__flp>
    8ace:	f0 91 75 11 	lds	r31, 0x1175	; 0x801175 <__flp+0x1>
    8ad2:	30 e0       	ldi	r19, 0x00	; 0
    8ad4:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    8ad6:	70 e0       	ldi	r23, 0x00	; 0
    8ad8:	60 e0       	ldi	r22, 0x00	; 0
    8ada:	d0 e0       	ldi	r29, 0x00	; 0
    8adc:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    8ade:	b0 e0       	ldi	r27, 0x00	; 0
    8ae0:	a0 e0       	ldi	r26, 0x00	; 0
    8ae2:	30 97       	sbiw	r30, 0x00	; 0
    8ae4:	99 f4       	brne	.+38     	; 0x8b0c <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    8ae6:	21 15       	cp	r18, r1
    8ae8:	31 05       	cpc	r19, r1
    8aea:	09 f4       	brne	.+2      	; 0x8aee <malloc+0x36>
    8aec:	4a c0       	rjmp	.+148    	; 0x8b82 <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    8aee:	28 1b       	sub	r18, r24
    8af0:	39 0b       	sbc	r19, r25
    8af2:	24 30       	cpi	r18, 0x04	; 4
    8af4:	31 05       	cpc	r19, r1
    8af6:	d8 f5       	brcc	.+118    	; 0x8b6e <malloc+0xb6>
    8af8:	8a 81       	ldd	r24, Y+2	; 0x02
    8afa:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    8afc:	61 15       	cp	r22, r1
    8afe:	71 05       	cpc	r23, r1
    8b00:	89 f1       	breq	.+98     	; 0x8b64 <malloc+0xac>
				sfp2->nx = sfp1->nx;
    8b02:	fb 01       	movw	r30, r22
    8b04:	93 83       	std	Z+3, r25	; 0x03
    8b06:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    8b08:	fe 01       	movw	r30, r28
    8b0a:	11 c0       	rjmp	.+34     	; 0x8b2e <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    8b0c:	40 81       	ld	r20, Z
    8b0e:	51 81       	ldd	r21, Z+1	; 0x01
    8b10:	02 81       	ldd	r16, Z+2	; 0x02
    8b12:	13 81       	ldd	r17, Z+3	; 0x03
    8b14:	48 17       	cp	r20, r24
    8b16:	59 07       	cpc	r21, r25
    8b18:	e0 f0       	brcs	.+56     	; 0x8b52 <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    8b1a:	48 17       	cp	r20, r24
    8b1c:	59 07       	cpc	r21, r25
    8b1e:	99 f4       	brne	.+38     	; 0x8b46 <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    8b20:	10 97       	sbiw	r26, 0x00	; 0
    8b22:	61 f0       	breq	.+24     	; 0x8b3c <malloc+0x84>
				fp2->nx = fp1->nx;
    8b24:	12 96       	adiw	r26, 0x02	; 2
    8b26:	0c 93       	st	X, r16
    8b28:	12 97       	sbiw	r26, 0x02	; 2
    8b2a:	13 96       	adiw	r26, 0x03	; 3
    8b2c:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    8b2e:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    8b30:	cf 01       	movw	r24, r30
    8b32:	df 91       	pop	r29
    8b34:	cf 91       	pop	r28
    8b36:	1f 91       	pop	r17
    8b38:	0f 91       	pop	r16
    8b3a:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    8b3c:	00 93 74 11 	sts	0x1174, r16	; 0x801174 <__flp>
    8b40:	10 93 75 11 	sts	0x1175, r17	; 0x801175 <__flp+0x1>
    8b44:	f4 cf       	rjmp	.-24     	; 0x8b2e <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    8b46:	21 15       	cp	r18, r1
    8b48:	31 05       	cpc	r19, r1
    8b4a:	51 f0       	breq	.+20     	; 0x8b60 <malloc+0xa8>
    8b4c:	42 17       	cp	r20, r18
    8b4e:	53 07       	cpc	r21, r19
    8b50:	38 f0       	brcs	.+14     	; 0x8b60 <malloc+0xa8>
    8b52:	a9 01       	movw	r20, r18
    8b54:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    8b56:	9a 01       	movw	r18, r20
    8b58:	bd 01       	movw	r22, r26
    8b5a:	df 01       	movw	r26, r30
    8b5c:	f8 01       	movw	r30, r16
    8b5e:	c1 cf       	rjmp	.-126    	; 0x8ae2 <malloc+0x2a>
    8b60:	ef 01       	movw	r28, r30
    8b62:	f9 cf       	rjmp	.-14     	; 0x8b56 <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    8b64:	90 93 75 11 	sts	0x1175, r25	; 0x801175 <__flp+0x1>
    8b68:	80 93 74 11 	sts	0x1174, r24	; 0x801174 <__flp>
    8b6c:	cd cf       	rjmp	.-102    	; 0x8b08 <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    8b6e:	fe 01       	movw	r30, r28
    8b70:	e2 0f       	add	r30, r18
    8b72:	f3 1f       	adc	r31, r19
    8b74:	81 93       	st	Z+, r24
    8b76:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    8b78:	22 50       	subi	r18, 0x02	; 2
    8b7a:	31 09       	sbc	r19, r1
    8b7c:	39 83       	std	Y+1, r19	; 0x01
    8b7e:	28 83       	st	Y, r18
		return &(sfp2->nx);
    8b80:	d7 cf       	rjmp	.-82     	; 0x8b30 <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    8b82:	20 91 e7 10 	lds	r18, 0x10E7	; 0x8010e7 <__brkval>
    8b86:	30 91 e8 10 	lds	r19, 0x10E8	; 0x8010e8 <__brkval+0x1>
    8b8a:	23 2b       	or	r18, r19
    8b8c:	41 f4       	brne	.+16     	; 0x8b9e <malloc+0xe6>
		__brkval = __malloc_heap_start;
    8b8e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    8b92:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    8b96:	30 93 e8 10 	sts	0x10E8, r19	; 0x8010e8 <__brkval+0x1>
    8b9a:	20 93 e7 10 	sts	0x10E7, r18	; 0x8010e7 <__brkval>
	cp = __malloc_heap_end;
    8b9e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    8ba2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    8ba6:	21 15       	cp	r18, r1
    8ba8:	31 05       	cpc	r19, r1
    8baa:	41 f4       	brne	.+16     	; 0x8bbc <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    8bac:	2d b7       	in	r18, 0x3d	; 61
    8bae:	3e b7       	in	r19, 0x3e	; 62
    8bb0:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    8bb4:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    8bb8:	24 1b       	sub	r18, r20
    8bba:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    8bbc:	e0 91 e7 10 	lds	r30, 0x10E7	; 0x8010e7 <__brkval>
    8bc0:	f0 91 e8 10 	lds	r31, 0x10E8	; 0x8010e8 <__brkval+0x1>
    8bc4:	e2 17       	cp	r30, r18
    8bc6:	f3 07       	cpc	r31, r19
    8bc8:	a0 f4       	brcc	.+40     	; 0x8bf2 <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    8bca:	2e 1b       	sub	r18, r30
    8bcc:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    8bce:	28 17       	cp	r18, r24
    8bd0:	39 07       	cpc	r19, r25
    8bd2:	78 f0       	brcs	.+30     	; 0x8bf2 <malloc+0x13a>
    8bd4:	ac 01       	movw	r20, r24
    8bd6:	4e 5f       	subi	r20, 0xFE	; 254
    8bd8:	5f 4f       	sbci	r21, 0xFF	; 255
    8bda:	24 17       	cp	r18, r20
    8bdc:	35 07       	cpc	r19, r21
    8bde:	48 f0       	brcs	.+18     	; 0x8bf2 <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    8be0:	4e 0f       	add	r20, r30
    8be2:	5f 1f       	adc	r21, r31
    8be4:	50 93 e8 10 	sts	0x10E8, r21	; 0x8010e8 <__brkval+0x1>
    8be8:	40 93 e7 10 	sts	0x10E7, r20	; 0x8010e7 <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    8bec:	81 93       	st	Z+, r24
    8bee:	91 93       	st	Z+, r25
		return &(fp1->nx);
    8bf0:	9f cf       	rjmp	.-194    	; 0x8b30 <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    8bf2:	f0 e0       	ldi	r31, 0x00	; 0
    8bf4:	e0 e0       	ldi	r30, 0x00	; 0
    8bf6:	9c cf       	rjmp	.-200    	; 0x8b30 <malloc+0x78>

00008bf8 <free>:
}


void
free(void *p)
{
    8bf8:	cf 93       	push	r28
    8bfa:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    8bfc:	00 97       	sbiw	r24, 0x00	; 0
    8bfe:	e9 f0       	breq	.+58     	; 0x8c3a <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    8c00:	fc 01       	movw	r30, r24
    8c02:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    8c04:	13 82       	std	Z+3, r1	; 0x03
    8c06:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    8c08:	a0 91 74 11 	lds	r26, 0x1174	; 0x801174 <__flp>
    8c0c:	b0 91 75 11 	lds	r27, 0x1175	; 0x801175 <__flp+0x1>
    8c10:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    8c12:	30 e0       	ldi	r19, 0x00	; 0
    8c14:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    8c16:	10 97       	sbiw	r26, 0x00	; 0
    8c18:	a1 f4       	brne	.+40     	; 0x8c42 <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    8c1a:	20 81       	ld	r18, Z
    8c1c:	31 81       	ldd	r19, Z+1	; 0x01
    8c1e:	82 0f       	add	r24, r18
    8c20:	93 1f       	adc	r25, r19
    8c22:	20 91 e7 10 	lds	r18, 0x10E7	; 0x8010e7 <__brkval>
    8c26:	30 91 e8 10 	lds	r19, 0x10E8	; 0x8010e8 <__brkval+0x1>
    8c2a:	28 17       	cp	r18, r24
    8c2c:	39 07       	cpc	r19, r25
    8c2e:	09 f0       	breq	.+2      	; 0x8c32 <free+0x3a>
    8c30:	61 c0       	rjmp	.+194    	; 0x8cf4 <free+0xfc>
			__brkval = cpnew;
    8c32:	f0 93 e8 10 	sts	0x10E8, r31	; 0x8010e8 <__brkval+0x1>
    8c36:	e0 93 e7 10 	sts	0x10E7, r30	; 0x8010e7 <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    8c3a:	df 91       	pop	r29
    8c3c:	cf 91       	pop	r28
    8c3e:	08 95       	ret
    8c40:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    8c42:	ce 17       	cp	r28, r30
    8c44:	df 07       	cpc	r29, r31
    8c46:	e8 f5       	brcc	.+122    	; 0x8cc2 <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    8c48:	4a 81       	ldd	r20, Y+2	; 0x02
    8c4a:	5b 81       	ldd	r21, Y+3	; 0x03
    8c4c:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    8c4e:	41 15       	cp	r20, r1
    8c50:	51 05       	cpc	r21, r1
    8c52:	b1 f7       	brne	.-20     	; 0x8c40 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    8c54:	e9 01       	movw	r28, r18
    8c56:	fb 83       	std	Y+3, r31	; 0x03
    8c58:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    8c5a:	49 91       	ld	r20, Y+
    8c5c:	59 91       	ld	r21, Y+
    8c5e:	c4 0f       	add	r28, r20
    8c60:	d5 1f       	adc	r29, r21
    8c62:	ec 17       	cp	r30, r28
    8c64:	fd 07       	cpc	r31, r29
    8c66:	61 f4       	brne	.+24     	; 0x8c80 <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    8c68:	80 81       	ld	r24, Z
    8c6a:	91 81       	ldd	r25, Z+1	; 0x01
    8c6c:	02 96       	adiw	r24, 0x02	; 2
    8c6e:	84 0f       	add	r24, r20
    8c70:	95 1f       	adc	r25, r21
    8c72:	e9 01       	movw	r28, r18
    8c74:	99 83       	std	Y+1, r25	; 0x01
    8c76:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    8c78:	82 81       	ldd	r24, Z+2	; 0x02
    8c7a:	93 81       	ldd	r25, Z+3	; 0x03
    8c7c:	9b 83       	std	Y+3, r25	; 0x03
    8c7e:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    8c80:	f0 e0       	ldi	r31, 0x00	; 0
    8c82:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    8c84:	12 96       	adiw	r26, 0x02	; 2
    8c86:	8d 91       	ld	r24, X+
    8c88:	9c 91       	ld	r25, X
    8c8a:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    8c8c:	00 97       	sbiw	r24, 0x00	; 0
    8c8e:	b9 f5       	brne	.+110    	; 0x8cfe <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    8c90:	2d 91       	ld	r18, X+
    8c92:	3c 91       	ld	r19, X
    8c94:	11 97       	sbiw	r26, 0x01	; 1
    8c96:	cd 01       	movw	r24, r26
    8c98:	02 96       	adiw	r24, 0x02	; 2
    8c9a:	82 0f       	add	r24, r18
    8c9c:	93 1f       	adc	r25, r19
    8c9e:	20 91 e7 10 	lds	r18, 0x10E7	; 0x8010e7 <__brkval>
    8ca2:	30 91 e8 10 	lds	r19, 0x10E8	; 0x8010e8 <__brkval+0x1>
    8ca6:	28 17       	cp	r18, r24
    8ca8:	39 07       	cpc	r19, r25
    8caa:	39 f6       	brne	.-114    	; 0x8c3a <free+0x42>
		if (fp2 == NULL)
    8cac:	30 97       	sbiw	r30, 0x00	; 0
    8cae:	51 f5       	brne	.+84     	; 0x8d04 <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    8cb0:	10 92 75 11 	sts	0x1175, r1	; 0x801175 <__flp+0x1>
    8cb4:	10 92 74 11 	sts	0x1174, r1	; 0x801174 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    8cb8:	b0 93 e8 10 	sts	0x10E8, r27	; 0x8010e8 <__brkval+0x1>
    8cbc:	a0 93 e7 10 	sts	0x10E7, r26	; 0x8010e7 <__brkval>
    8cc0:	bc cf       	rjmp	.-136    	; 0x8c3a <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    8cc2:	d3 83       	std	Z+3, r29	; 0x03
    8cc4:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    8cc6:	40 81       	ld	r20, Z
    8cc8:	51 81       	ldd	r21, Z+1	; 0x01
    8cca:	84 0f       	add	r24, r20
    8ccc:	95 1f       	adc	r25, r21
    8cce:	c8 17       	cp	r28, r24
    8cd0:	d9 07       	cpc	r29, r25
    8cd2:	61 f4       	brne	.+24     	; 0x8cec <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    8cd4:	4e 5f       	subi	r20, 0xFE	; 254
    8cd6:	5f 4f       	sbci	r21, 0xFF	; 255
    8cd8:	88 81       	ld	r24, Y
    8cda:	99 81       	ldd	r25, Y+1	; 0x01
    8cdc:	48 0f       	add	r20, r24
    8cde:	59 1f       	adc	r21, r25
    8ce0:	51 83       	std	Z+1, r21	; 0x01
    8ce2:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    8ce4:	8a 81       	ldd	r24, Y+2	; 0x02
    8ce6:	9b 81       	ldd	r25, Y+3	; 0x03
    8ce8:	93 83       	std	Z+3, r25	; 0x03
    8cea:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    8cec:	21 15       	cp	r18, r1
    8cee:	31 05       	cpc	r19, r1
    8cf0:	09 f0       	breq	.+2      	; 0x8cf4 <free+0xfc>
    8cf2:	b0 cf       	rjmp	.-160    	; 0x8c54 <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    8cf4:	f0 93 75 11 	sts	0x1175, r31	; 0x801175 <__flp+0x1>
    8cf8:	e0 93 74 11 	sts	0x1174, r30	; 0x801174 <__flp>
			return;
    8cfc:	9e cf       	rjmp	.-196    	; 0x8c3a <free+0x42>
    8cfe:	fd 01       	movw	r30, r26
    8d00:	dc 01       	movw	r26, r24
    8d02:	c0 cf       	rjmp	.-128    	; 0x8c84 <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    8d04:	13 82       	std	Z+3, r1	; 0x03
    8d06:	12 82       	std	Z+2, r1	; 0x02
    8d08:	d7 cf       	rjmp	.-82     	; 0x8cb8 <free+0xc0>

00008d0a <realloc>:



void *
realloc(void *ptr, size_t len)
{
    8d0a:	4f 92       	push	r4
    8d0c:	5f 92       	push	r5
    8d0e:	6f 92       	push	r6
    8d10:	7f 92       	push	r7
    8d12:	8f 92       	push	r8
    8d14:	9f 92       	push	r9
    8d16:	af 92       	push	r10
    8d18:	bf 92       	push	r11
    8d1a:	cf 92       	push	r12
    8d1c:	df 92       	push	r13
    8d1e:	ef 92       	push	r14
    8d20:	ff 92       	push	r15
    8d22:	0f 93       	push	r16
    8d24:	1f 93       	push	r17
    8d26:	cf 93       	push	r28
    8d28:	df 93       	push	r29
    8d2a:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    8d2c:	00 97       	sbiw	r24, 0x00	; 0
    8d2e:	91 f4       	brne	.+36     	; 0x8d54 <realloc+0x4a>
		return malloc(len);
    8d30:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    8d32:	df 91       	pop	r29
    8d34:	cf 91       	pop	r28
    8d36:	1f 91       	pop	r17
    8d38:	0f 91       	pop	r16
    8d3a:	ff 90       	pop	r15
    8d3c:	ef 90       	pop	r14
    8d3e:	df 90       	pop	r13
    8d40:	cf 90       	pop	r12
    8d42:	bf 90       	pop	r11
    8d44:	af 90       	pop	r10
    8d46:	9f 90       	pop	r9
    8d48:	8f 90       	pop	r8
    8d4a:	7f 90       	pop	r7
    8d4c:	6f 90       	pop	r6
    8d4e:	5f 90       	pop	r5
    8d50:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    8d52:	b2 ce       	rjmp	.-668    	; 0x8ab8 <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    8d54:	fc 01       	movw	r30, r24
    8d56:	e6 0f       	add	r30, r22
    8d58:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    8d5a:	9c 01       	movw	r18, r24
    8d5c:	22 50       	subi	r18, 0x02	; 2
    8d5e:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    8d60:	e2 17       	cp	r30, r18
    8d62:	f3 07       	cpc	r31, r19
    8d64:	08 f4       	brcc	.+2      	; 0x8d68 <realloc+0x5e>
    8d66:	a5 c0       	rjmp	.+330    	; 0x8eb2 <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    8d68:	d9 01       	movw	r26, r18
    8d6a:	cd 91       	ld	r28, X+
    8d6c:	dc 91       	ld	r29, X
    8d6e:	11 97       	sbiw	r26, 0x01	; 1
    8d70:	c6 17       	cp	r28, r22
    8d72:	d7 07       	cpc	r29, r23
    8d74:	18 f1       	brcs	.+70     	; 0x8dbc <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    8d76:	c5 30       	cpi	r28, 0x05	; 5
    8d78:	d1 05       	cpc	r29, r1
    8d7a:	70 f0       	brcs	.+28     	; 0x8d98 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    8d7c:	ce 01       	movw	r24, r28
    8d7e:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    8d80:	86 17       	cp	r24, r22
    8d82:	97 07       	cpc	r25, r23
    8d84:	48 f0       	brcs	.+18     	; 0x8d98 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    8d86:	c6 1b       	sub	r28, r22
    8d88:	d7 0b       	sbc	r29, r23
    8d8a:	22 97       	sbiw	r28, 0x02	; 2
    8d8c:	c1 93       	st	Z+, r28
    8d8e:	d1 93       	st	Z+, r29
		fp1->sz = len;
    8d90:	6d 93       	st	X+, r22
    8d92:	7c 93       	st	X, r23
		free(&(fp2->nx));
    8d94:	cf 01       	movw	r24, r30
    8d96:	30 df       	rcall	.-416    	; 0x8bf8 <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    8d98:	c8 01       	movw	r24, r16
    8d9a:	df 91       	pop	r29
    8d9c:	cf 91       	pop	r28
    8d9e:	1f 91       	pop	r17
    8da0:	0f 91       	pop	r16
    8da2:	ff 90       	pop	r15
    8da4:	ef 90       	pop	r14
    8da6:	df 90       	pop	r13
    8da8:	cf 90       	pop	r12
    8daa:	bf 90       	pop	r11
    8dac:	af 90       	pop	r10
    8dae:	9f 90       	pop	r9
    8db0:	8f 90       	pop	r8
    8db2:	7f 90       	pop	r7
    8db4:	6f 90       	pop	r6
    8db6:	5f 90       	pop	r5
    8db8:	4f 90       	pop	r4
    8dba:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    8dbc:	5b 01       	movw	r10, r22
    8dbe:	ac 1a       	sub	r10, r28
    8dc0:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    8dc2:	4c 01       	movw	r8, r24
    8dc4:	8c 0e       	add	r8, r28
    8dc6:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    8dc8:	a0 91 74 11 	lds	r26, 0x1174	; 0x801174 <__flp>
    8dcc:	b0 91 75 11 	lds	r27, 0x1175	; 0x801175 <__flp+0x1>
    8dd0:	51 2c       	mov	r5, r1
    8dd2:	41 2c       	mov	r4, r1
    8dd4:	f1 2c       	mov	r15, r1
    8dd6:	e1 2c       	mov	r14, r1
    8dd8:	10 97       	sbiw	r26, 0x00	; 0
    8dda:	01 f5       	brne	.+64     	; 0x8e1c <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    8ddc:	80 91 e7 10 	lds	r24, 0x10E7	; 0x8010e7 <__brkval>
    8de0:	90 91 e8 10 	lds	r25, 0x10E8	; 0x8010e8 <__brkval+0x1>
    8de4:	88 15       	cp	r24, r8
    8de6:	99 05       	cpc	r25, r9
    8de8:	09 f0       	breq	.+2      	; 0x8dec <realloc+0xe2>
    8dea:	56 c0       	rjmp	.+172    	; 0x8e98 <realloc+0x18e>
    8dec:	46 16       	cp	r4, r22
    8dee:	57 06       	cpc	r5, r23
    8df0:	08 f0       	brcs	.+2      	; 0x8df4 <realloc+0xea>
    8df2:	52 c0       	rjmp	.+164    	; 0x8e98 <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    8df4:	8d b7       	in	r24, 0x3d	; 61
    8df6:	9e b7       	in	r25, 0x3e	; 62
    8df8:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    8dfc:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    8e00:	84 1b       	sub	r24, r20
    8e02:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    8e04:	e8 17       	cp	r30, r24
    8e06:	f9 07       	cpc	r31, r25
    8e08:	08 f0       	brcs	.+2      	; 0x8e0c <realloc+0x102>
    8e0a:	53 c0       	rjmp	.+166    	; 0x8eb2 <realloc+0x1a8>
			__brkval = cp;
    8e0c:	f0 93 e8 10 	sts	0x10E8, r31	; 0x8010e8 <__brkval+0x1>
    8e10:	e0 93 e7 10 	sts	0x10E7, r30	; 0x8010e7 <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    8e14:	f9 01       	movw	r30, r18
    8e16:	71 83       	std	Z+1, r23	; 0x01
    8e18:	60 83       	st	Z, r22
			return ptr;
    8e1a:	be cf       	rjmp	.-132    	; 0x8d98 <realloc+0x8e>
    8e1c:	8d 91       	ld	r24, X+
    8e1e:	9c 91       	ld	r25, X
    8e20:	11 97       	sbiw	r26, 0x01	; 1
    8e22:	12 96       	adiw	r26, 0x02	; 2
    8e24:	6c 90       	ld	r6, X
    8e26:	12 97       	sbiw	r26, 0x02	; 2
    8e28:	13 96       	adiw	r26, 0x03	; 3
    8e2a:	7c 90       	ld	r7, X
    8e2c:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    8e2e:	a8 15       	cp	r26, r8
    8e30:	b9 05       	cpc	r27, r9
    8e32:	59 f5       	brne	.+86     	; 0x8e8a <realloc+0x180>
    8e34:	6c 01       	movw	r12, r24
    8e36:	42 e0       	ldi	r20, 0x02	; 2
    8e38:	c4 0e       	add	r12, r20
    8e3a:	d1 1c       	adc	r13, r1
    8e3c:	ca 14       	cp	r12, r10
    8e3e:	db 04       	cpc	r13, r11
    8e40:	20 f1       	brcs	.+72     	; 0x8e8a <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    8e42:	ac 01       	movw	r20, r24
    8e44:	4a 19       	sub	r20, r10
    8e46:	5b 09       	sbc	r21, r11
    8e48:	da 01       	movw	r26, r20
    8e4a:	12 96       	adiw	r26, 0x02	; 2
    8e4c:	15 97       	sbiw	r26, 0x05	; 5
    8e4e:	80 f0       	brcs	.+32     	; 0x8e70 <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    8e50:	62 82       	std	Z+2, r6	; 0x02
    8e52:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    8e54:	51 83       	std	Z+1, r21	; 0x01
    8e56:	40 83       	st	Z, r20
				fp1->sz = len;
    8e58:	d9 01       	movw	r26, r18
    8e5a:	6d 93       	st	X+, r22
    8e5c:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    8e5e:	e1 14       	cp	r14, r1
    8e60:	f1 04       	cpc	r15, r1
    8e62:	71 f0       	breq	.+28     	; 0x8e80 <realloc+0x176>
				ofp3->nx = fp2;
    8e64:	d7 01       	movw	r26, r14
    8e66:	13 96       	adiw	r26, 0x03	; 3
    8e68:	fc 93       	st	X, r31
    8e6a:	ee 93       	st	-X, r30
    8e6c:	12 97       	sbiw	r26, 0x02	; 2
    8e6e:	94 cf       	rjmp	.-216    	; 0x8d98 <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    8e70:	22 96       	adiw	r28, 0x02	; 2
    8e72:	8c 0f       	add	r24, r28
    8e74:	9d 1f       	adc	r25, r29
    8e76:	f9 01       	movw	r30, r18
    8e78:	91 83       	std	Z+1, r25	; 0x01
    8e7a:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    8e7c:	f3 01       	movw	r30, r6
    8e7e:	ef cf       	rjmp	.-34     	; 0x8e5e <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    8e80:	f0 93 75 11 	sts	0x1175, r31	; 0x801175 <__flp+0x1>
    8e84:	e0 93 74 11 	sts	0x1174, r30	; 0x801174 <__flp>
    8e88:	87 cf       	rjmp	.-242    	; 0x8d98 <realloc+0x8e>
    8e8a:	48 16       	cp	r4, r24
    8e8c:	59 06       	cpc	r5, r25
    8e8e:	08 f4       	brcc	.+2      	; 0x8e92 <realloc+0x188>
    8e90:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    8e92:	7d 01       	movw	r14, r26
    8e94:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    8e96:	a0 cf       	rjmp	.-192    	; 0x8dd8 <realloc+0xce>
    8e98:	cb 01       	movw	r24, r22
    8e9a:	0e de       	rcall	.-996    	; 0x8ab8 <malloc>
    8e9c:	7c 01       	movw	r14, r24
    8e9e:	00 97       	sbiw	r24, 0x00	; 0
    8ea0:	41 f0       	breq	.+16     	; 0x8eb2 <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    8ea2:	ae 01       	movw	r20, r28
    8ea4:	b8 01       	movw	r22, r16
    8ea6:	0e 94 84 53 	call	0xa708	; 0xa708 <memcpy>
	free(ptr);
    8eaa:	c8 01       	movw	r24, r16
    8eac:	a5 de       	rcall	.-694    	; 0x8bf8 <free>
	return memp;
    8eae:	87 01       	movw	r16, r14
    8eb0:	73 cf       	rjmp	.-282    	; 0x8d98 <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    8eb2:	10 e0       	ldi	r17, 0x00	; 0
    8eb4:	00 e0       	ldi	r16, 0x00	; 0
    8eb6:	70 cf       	rjmp	.-288    	; 0x8d98 <realloc+0x8e>

00008eb8 <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    8eb8:	1d ba       	out	0x1d, r1	; 29
    8eba:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    8ebe:	1c bc       	out	0x2c, r1	; 44
    8ec0:	10 be       	out	0x30, r1	; 48
    8ec2:	1f ba       	out	0x1f, r1	; 31
    8ec4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8ec8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    8ecc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    8ed0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    8ed4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    8ed8:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    8edc:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    8ee0:	11 b8       	out	0x01, r1	; 1
    8ee2:	14 b8       	out	0x04, r1	; 4
    8ee4:	17 b8       	out	0x07, r1	; 7
    8ee6:	1a b8       	out	0x0a, r1	; 10
    8ee8:	1d b8       	out	0x0d, r1	; 13
    8eea:	10 ba       	out	0x10, r1	; 16
    8eec:	12 b8       	out	0x02, r1	; 2
    8eee:	15 b8       	out	0x05, r1	; 5
    8ef0:	18 b8       	out	0x08, r1	; 8
    8ef2:	1b b8       	out	0x0b, r1	; 11
    8ef4:	1e b8       	out	0x0e, r1	; 14
    8ef6:	11 ba       	out	0x11, r1	; 17
    8ef8:	08 95       	ret

00008efa <_init_Teensyduino_internal_>:
    8efa:	f8 94       	cli
    8efc:	e1 e6       	ldi	r30, 0x61	; 97
    8efe:	f0 e0       	ldi	r31, 0x00	; 0
    8f00:	20 e8       	ldi	r18, 0x80	; 128
    8f02:	20 83       	st	Z, r18
    8f04:	10 82       	st	Z, r1
    8f06:	83 e0       	ldi	r24, 0x03	; 3
    8f08:	84 bd       	out	0x24, r24	; 36
    8f0a:	85 bd       	out	0x25, r24	; 37
    8f0c:	ee e6       	ldi	r30, 0x6E	; 110
    8f0e:	f0 e0       	ldi	r31, 0x00	; 0
    8f10:	80 81       	ld	r24, Z
    8f12:	81 60       	ori	r24, 0x01	; 1
    8f14:	80 83       	st	Z, r24
    8f16:	91 e0       	ldi	r25, 0x01	; 1
    8f18:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    8f1c:	82 e0       	ldi	r24, 0x02	; 2
    8f1e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    8f22:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    8f26:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    8f2a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    8f2e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    8f32:	86 e8       	ldi	r24, 0x86	; 134
    8f34:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8f38:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    8f3c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8f40:	d9 d1       	rcall	.+946    	; 0x92f4 <usb_init>
    8f42:	78 94       	sei
    8f44:	08 95       	ret

00008f46 <analogRead>:
    8f46:	9a ed       	ldi	r25, 0xDA	; 218
    8f48:	98 0f       	add	r25, r24
    8f4a:	98 30       	cpi	r25, 0x08	; 8
    8f4c:	10 f1       	brcs	.+68     	; 0x8f92 <analogRead+0x4c>
    8f4e:	88 30       	cpi	r24, 0x08	; 8
    8f50:	60 f4       	brcc	.+24     	; 0x8f6a <analogRead+0x24>
    8f52:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8f56:	21 e0       	ldi	r18, 0x01	; 1
    8f58:	30 e0       	ldi	r19, 0x00	; 0
    8f5a:	08 2e       	mov	r0, r24
    8f5c:	01 c0       	rjmp	.+2      	; 0x8f60 <analogRead+0x1a>
    8f5e:	22 0f       	add	r18, r18
    8f60:	0a 94       	dec	r0
    8f62:	ea f7       	brpl	.-6      	; 0x8f5e <analogRead+0x18>
    8f64:	92 2b       	or	r25, r18
    8f66:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    8f6a:	8f 71       	andi	r24, 0x1F	; 31
    8f6c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    8f70:	89 2b       	or	r24, r25
    8f72:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    8f76:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8f7a:	80 64       	ori	r24, 0x40	; 64
    8f7c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8f80:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    8f84:	86 fd       	sbrc	r24, 6
    8f86:	fc cf       	rjmp	.-8      	; 0x8f80 <analogRead+0x3a>
    8f88:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    8f8c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    8f90:	08 95       	ret
    8f92:	89 2f       	mov	r24, r25
    8f94:	de cf       	rjmp	.-68     	; 0x8f52 <analogRead+0xc>

00008f96 <_pinMode_output>:
    8f96:	8e 32       	cpi	r24, 0x2E	; 46
    8f98:	70 f4       	brcc	.+28     	; 0x8fb6 <_pinMode_output+0x20>
    8f9a:	e8 eb       	ldi	r30, 0xB8	; 184
    8f9c:	fc e0       	ldi	r31, 0x0C	; 12
    8f9e:	88 0f       	add	r24, r24
    8fa0:	e8 0f       	add	r30, r24
    8fa2:	f1 1d       	adc	r31, r1
    8fa4:	25 91       	lpm	r18, Z+
    8fa6:	e4 91       	lpm	r30, Z
    8fa8:	f0 e0       	ldi	r31, 0x00	; 0
    8faa:	9f b7       	in	r25, 0x3f	; 63
    8fac:	f8 94       	cli
    8fae:	81 81       	ldd	r24, Z+1	; 0x01
    8fb0:	82 2b       	or	r24, r18
    8fb2:	81 83       	std	Z+1, r24	; 0x01
    8fb4:	9f bf       	out	0x3f, r25	; 63
    8fb6:	08 95       	ret

00008fb8 <_digitalWrite_HIGH>:
    8fb8:	ee 32       	cpi	r30, 0x2E	; 46
    8fba:	50 f4       	brcc	.+20     	; 0x8fd0 <_digitalWrite_bailout>
    8fbc:	ee 0f       	add	r30, r30
    8fbe:	e7 51       	subi	r30, 0x17	; 23
    8fc0:	f8 4b       	sbci	r31, 0xB8	; 184
    8fc2:	09 94       	ijmp

00008fc4 <_digitalWrite_LOW>:
    8fc4:	ee 32       	cpi	r30, 0x2E	; 46
    8fc6:	20 f4       	brcc	.+8      	; 0x8fd0 <_digitalWrite_bailout>
    8fc8:	ee 0f       	add	r30, r30
    8fca:	eb 5b       	subi	r30, 0xBB	; 187
    8fcc:	f7 4b       	sbci	r31, 0xB7	; 183
    8fce:	09 94       	ijmp

00008fd0 <_digitalWrite_bailout>:
    8fd0:	08 95       	ret

00008fd2 <_digitalWrite_HIGH_TABLE>:
    8fd2:	58 9a       	sbi	0x0b, 0	; 11
    8fd4:	b6 c0       	rjmp	.+364    	; 0x9142 <_digitalWrite_OC0B>
    8fd6:	59 9a       	sbi	0x0b, 1	; 11
    8fd8:	d0 c0       	rjmp	.+416    	; 0x917a <_digitalWrite_OC2B>
    8fda:	5a 9a       	sbi	0x0b, 2	; 11
    8fdc:	08 95       	ret
    8fde:	5b 9a       	sbi	0x0b, 3	; 11
    8fe0:	08 95       	ret
    8fe2:	5c 9a       	sbi	0x0b, 4	; 11
    8fe4:	08 95       	ret
    8fe6:	5d 9a       	sbi	0x0b, 5	; 11
    8fe8:	08 95       	ret
    8fea:	5e 9a       	sbi	0x0b, 6	; 11
    8fec:	08 95       	ret
    8fee:	5f 9a       	sbi	0x0b, 7	; 11
    8ff0:	08 95       	ret
    8ff2:	70 9a       	sbi	0x0e, 0	; 14
    8ff4:	08 95       	ret
    8ff6:	71 9a       	sbi	0x0e, 1	; 14
    8ff8:	08 95       	ret
    8ffa:	40 9a       	sbi	0x08, 0	; 8
    8ffc:	08 95       	ret
    8ffe:	41 9a       	sbi	0x08, 1	; 8
    9000:	08 95       	ret
    9002:	42 9a       	sbi	0x08, 2	; 8
    9004:	08 95       	ret
    9006:	43 9a       	sbi	0x08, 3	; 8
    9008:	08 95       	ret
    900a:	44 9a       	sbi	0x08, 4	; 8
    900c:	c8 c0       	rjmp	.+400    	; 0x919e <_digitalWrite_OC3C>
    900e:	45 9a       	sbi	0x08, 5	; 8
    9010:	c0 c0       	rjmp	.+384    	; 0x9192 <_digitalWrite_OC3B>
    9012:	46 9a       	sbi	0x08, 6	; 8
    9014:	b8 c0       	rjmp	.+368    	; 0x9186 <_digitalWrite_OC3A>
    9016:	47 9a       	sbi	0x08, 7	; 8
    9018:	08 95       	ret
    901a:	76 9a       	sbi	0x0e, 6	; 14
    901c:	08 95       	ret
    901e:	77 9a       	sbi	0x0e, 7	; 14
    9020:	08 95       	ret
    9022:	28 9a       	sbi	0x05, 0	; 5
    9024:	08 95       	ret
    9026:	29 9a       	sbi	0x05, 1	; 5
    9028:	08 95       	ret
    902a:	2a 9a       	sbi	0x05, 2	; 5
    902c:	08 95       	ret
    902e:	2b 9a       	sbi	0x05, 3	; 5
    9030:	08 95       	ret
    9032:	2c 9a       	sbi	0x05, 4	; 5
    9034:	9c c0       	rjmp	.+312    	; 0x916e <_digitalWrite_OC2A>
    9036:	2d 9a       	sbi	0x05, 5	; 5
    9038:	88 c0       	rjmp	.+272    	; 0x914a <_digitalWrite_OC1A>
    903a:	2e 9a       	sbi	0x05, 6	; 5
    903c:	8c c0       	rjmp	.+280    	; 0x9156 <_digitalWrite_OC1B>
    903e:	2f 9a       	sbi	0x05, 7	; 5
    9040:	90 c0       	rjmp	.+288    	; 0x9162 <_digitalWrite_OC1C>
    9042:	10 9a       	sbi	0x02, 0	; 2
    9044:	08 95       	ret
    9046:	11 9a       	sbi	0x02, 1	; 2
    9048:	08 95       	ret
    904a:	12 9a       	sbi	0x02, 2	; 2
    904c:	08 95       	ret
    904e:	13 9a       	sbi	0x02, 3	; 2
    9050:	08 95       	ret
    9052:	14 9a       	sbi	0x02, 4	; 2
    9054:	08 95       	ret
    9056:	15 9a       	sbi	0x02, 5	; 2
    9058:	08 95       	ret
    905a:	16 9a       	sbi	0x02, 6	; 2
    905c:	08 95       	ret
    905e:	17 9a       	sbi	0x02, 7	; 2
    9060:	08 95       	ret
    9062:	74 9a       	sbi	0x0e, 4	; 14
    9064:	08 95       	ret
    9066:	75 9a       	sbi	0x0e, 5	; 14
    9068:	08 95       	ret
    906a:	88 9a       	sbi	0x11, 0	; 17
    906c:	08 95       	ret
    906e:	89 9a       	sbi	0x11, 1	; 17
    9070:	08 95       	ret
    9072:	8a 9a       	sbi	0x11, 2	; 17
    9074:	08 95       	ret
    9076:	8b 9a       	sbi	0x11, 3	; 17
    9078:	08 95       	ret
    907a:	8c 9a       	sbi	0x11, 4	; 17
    907c:	08 95       	ret
    907e:	8d 9a       	sbi	0x11, 5	; 17
    9080:	08 95       	ret
    9082:	8e 9a       	sbi	0x11, 6	; 17
    9084:	08 95       	ret
    9086:	8f 9a       	sbi	0x11, 7	; 17
    9088:	08 95       	ret

0000908a <_digitalWrite_LOW_TABLE>:
    908a:	58 98       	cbi	0x0b, 0	; 11
    908c:	5a c0       	rjmp	.+180    	; 0x9142 <_digitalWrite_OC0B>
    908e:	59 98       	cbi	0x0b, 1	; 11
    9090:	74 c0       	rjmp	.+232    	; 0x917a <_digitalWrite_OC2B>
    9092:	5a 98       	cbi	0x0b, 2	; 11
    9094:	08 95       	ret
    9096:	5b 98       	cbi	0x0b, 3	; 11
    9098:	08 95       	ret
    909a:	5c 98       	cbi	0x0b, 4	; 11
    909c:	08 95       	ret
    909e:	5d 98       	cbi	0x0b, 5	; 11
    90a0:	08 95       	ret
    90a2:	5e 98       	cbi	0x0b, 6	; 11
    90a4:	08 95       	ret
    90a6:	5f 98       	cbi	0x0b, 7	; 11
    90a8:	08 95       	ret
    90aa:	70 98       	cbi	0x0e, 0	; 14
    90ac:	08 95       	ret
    90ae:	71 98       	cbi	0x0e, 1	; 14
    90b0:	08 95       	ret
    90b2:	40 98       	cbi	0x08, 0	; 8
    90b4:	08 95       	ret
    90b6:	41 98       	cbi	0x08, 1	; 8
    90b8:	08 95       	ret
    90ba:	42 98       	cbi	0x08, 2	; 8
    90bc:	08 95       	ret
    90be:	43 98       	cbi	0x08, 3	; 8
    90c0:	08 95       	ret
    90c2:	44 98       	cbi	0x08, 4	; 8
    90c4:	6c c0       	rjmp	.+216    	; 0x919e <_digitalWrite_OC3C>
    90c6:	45 98       	cbi	0x08, 5	; 8
    90c8:	64 c0       	rjmp	.+200    	; 0x9192 <_digitalWrite_OC3B>
    90ca:	46 98       	cbi	0x08, 6	; 8
    90cc:	5c c0       	rjmp	.+184    	; 0x9186 <_digitalWrite_OC3A>
    90ce:	47 98       	cbi	0x08, 7	; 8
    90d0:	08 95       	ret
    90d2:	76 98       	cbi	0x0e, 6	; 14
    90d4:	08 95       	ret
    90d6:	77 98       	cbi	0x0e, 7	; 14
    90d8:	08 95       	ret
    90da:	28 98       	cbi	0x05, 0	; 5
    90dc:	08 95       	ret
    90de:	29 98       	cbi	0x05, 1	; 5
    90e0:	08 95       	ret
    90e2:	2a 98       	cbi	0x05, 2	; 5
    90e4:	08 95       	ret
    90e6:	2b 98       	cbi	0x05, 3	; 5
    90e8:	08 95       	ret
    90ea:	2c 98       	cbi	0x05, 4	; 5
    90ec:	40 c0       	rjmp	.+128    	; 0x916e <_digitalWrite_OC2A>
    90ee:	2d 98       	cbi	0x05, 5	; 5
    90f0:	2c c0       	rjmp	.+88     	; 0x914a <_digitalWrite_OC1A>
    90f2:	2e 98       	cbi	0x05, 6	; 5
    90f4:	30 c0       	rjmp	.+96     	; 0x9156 <_digitalWrite_OC1B>
    90f6:	2f 98       	cbi	0x05, 7	; 5
    90f8:	34 c0       	rjmp	.+104    	; 0x9162 <_digitalWrite_OC1C>
    90fa:	10 98       	cbi	0x02, 0	; 2
    90fc:	08 95       	ret
    90fe:	11 98       	cbi	0x02, 1	; 2
    9100:	08 95       	ret
    9102:	12 98       	cbi	0x02, 2	; 2
    9104:	08 95       	ret
    9106:	13 98       	cbi	0x02, 3	; 2
    9108:	08 95       	ret
    910a:	14 98       	cbi	0x02, 4	; 2
    910c:	08 95       	ret
    910e:	15 98       	cbi	0x02, 5	; 2
    9110:	08 95       	ret
    9112:	16 98       	cbi	0x02, 6	; 2
    9114:	08 95       	ret
    9116:	17 98       	cbi	0x02, 7	; 2
    9118:	08 95       	ret
    911a:	74 98       	cbi	0x0e, 4	; 14
    911c:	08 95       	ret
    911e:	75 98       	cbi	0x0e, 5	; 14
    9120:	08 95       	ret
    9122:	88 98       	cbi	0x11, 0	; 17
    9124:	08 95       	ret
    9126:	89 98       	cbi	0x11, 1	; 17
    9128:	08 95       	ret
    912a:	8a 98       	cbi	0x11, 2	; 17
    912c:	08 95       	ret
    912e:	8b 98       	cbi	0x11, 3	; 17
    9130:	08 95       	ret
    9132:	8c 98       	cbi	0x11, 4	; 17
    9134:	08 95       	ret
    9136:	8d 98       	cbi	0x11, 5	; 17
    9138:	08 95       	ret
    913a:	8e 98       	cbi	0x11, 6	; 17
    913c:	08 95       	ret
    913e:	8f 98       	cbi	0x11, 7	; 17
    9140:	08 95       	ret

00009142 <_digitalWrite_OC0B>:
    9142:	e4 b5       	in	r30, 0x24	; 36
    9144:	ef 7d       	andi	r30, 0xDF	; 223
    9146:	e4 bd       	out	0x24, r30	; 36
    9148:	08 95       	ret

0000914a <_digitalWrite_OC1A>:
    914a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    914e:	ef 77       	andi	r30, 0x7F	; 127
    9150:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    9154:	08 95       	ret

00009156 <_digitalWrite_OC1B>:
    9156:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    915a:	ef 7d       	andi	r30, 0xDF	; 223
    915c:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    9160:	08 95       	ret

00009162 <_digitalWrite_OC1C>:
    9162:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    9166:	e7 7f       	andi	r30, 0xF7	; 247
    9168:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    916c:	08 95       	ret

0000916e <_digitalWrite_OC2A>:
    916e:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    9172:	ef 77       	andi	r30, 0x7F	; 127
    9174:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    9178:	08 95       	ret

0000917a <_digitalWrite_OC2B>:
    917a:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    917e:	ef 7d       	andi	r30, 0xDF	; 223
    9180:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    9184:	08 95       	ret

00009186 <_digitalWrite_OC3A>:
    9186:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    918a:	ef 77       	andi	r30, 0x7F	; 127
    918c:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    9190:	08 95       	ret

00009192 <_digitalWrite_OC3B>:
    9192:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    9196:	ef 7d       	andi	r30, 0xDF	; 223
    9198:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    919c:	08 95       	ret

0000919e <_digitalWrite_OC3C>:
    919e:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    91a2:	e7 7f       	andi	r30, 0xF7	; 247
    91a4:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    91a8:	08 95       	ret

000091aa <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    91aa:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    91ac:	84 b7       	in	r24, 0x34	; 52
    91ae:	87 7f       	andi	r24, 0xF7	; 247
    91b0:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    91b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    91b6:	80 61       	ori	r24, 0x10	; 16
    91b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    91bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    91c0:	80 e2       	ldi	r24, 0x20	; 32
    91c2:	9e e4       	ldi	r25, 0x4E	; 78

000091c4 <L_1164_loop>:
    91c4:	01 97       	sbiw	r24, 0x01	; 1
    91c6:	f1 f7       	brne	.-4      	; 0x91c4 <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    91c8:	81 e0       	ldi	r24, 0x01	; 1
    91ca:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    91ce:	80 e2       	ldi	r24, 0x20	; 32
    91d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    91d4:	80 e6       	ldi	r24, 0x60	; 96
    91d6:	9a ee       	ldi	r25, 0xEA	; 234

000091d8 <L_1178_loop>:
    91d8:	01 97       	sbiw	r24, 0x01	; 1
    91da:	f1 f7       	brne	.-4      	; 0x91d8 <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    91dc:	6d de       	rcall	.-806    	; 0x8eb8 <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    91de:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    91e2:	ff cf       	rjmp	.-2      	; 0x91e2 <L_1178_loop+0xa>

000091e4 <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    91e4:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    91e6:	68 de       	rcall	.-816    	; 0x8eb8 <disable_peripherals>
    91e8:	80 e6       	ldi	r24, 0x60	; 96
    91ea:	9a ee       	ldi	r25, 0xEA	; 234

000091ec <L_1203_loop>:
    91ec:	01 97       	sbiw	r24, 0x01	; 1
    91ee:	f1 f7       	brne	.-4      	; 0x91ec <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    91f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    91f4:	ff cf       	rjmp	.-2      	; 0x91f4 <L_1203_loop+0x8>

000091f6 <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    91f6:	8f 93       	push	r24
    91f8:	8f b7       	in	r24, 0x3f	; 63
    91fa:	8f 93       	push	r24
    91fc:	80 91 e9 10 	lds	r24, 0x10E9	; 0x8010e9 <timer0_fract_count>
    9200:	8d 5f       	subi	r24, 0xFD	; 253
    9202:	8d 37       	cpi	r24, 0x7D	; 125
    9204:	d0 f4       	brcc	.+52     	; 0x923a <L_1218_fract_roll>

00009206 <L_1218_fract_noroll>:
    9206:	80 93 e9 10 	sts	0x10E9, r24	; 0x8010e9 <timer0_fract_count>
    920a:	80 91 ea 10 	lds	r24, 0x10EA	; 0x8010ea <timer0_millis_count>
    920e:	8f 5f       	subi	r24, 0xFF	; 255
    9210:	80 93 ea 10 	sts	0x10EA, r24	; 0x8010ea <timer0_millis_count>
    9214:	d8 f0       	brcs	.+54     	; 0x924c <L_1218_ovcount>

00009216 <L_1218_millis_inc_sext>:
    9216:	80 91 eb 10 	lds	r24, 0x10EB	; 0x8010eb <timer0_millis_count+0x1>
    921a:	8f 4f       	sbci	r24, 0xFF	; 255
    921c:	80 93 eb 10 	sts	0x10EB, r24	; 0x8010eb <timer0_millis_count+0x1>
    9220:	a8 f0       	brcs	.+42     	; 0x924c <L_1218_ovcount>
    9222:	80 91 ec 10 	lds	r24, 0x10EC	; 0x8010ec <timer0_millis_count+0x2>
    9226:	8f 4f       	sbci	r24, 0xFF	; 255
    9228:	80 93 ec 10 	sts	0x10EC, r24	; 0x8010ec <timer0_millis_count+0x2>
    922c:	78 f0       	brcs	.+30     	; 0x924c <L_1218_ovcount>
    922e:	80 91 ed 10 	lds	r24, 0x10ED	; 0x8010ed <timer0_millis_count+0x3>
    9232:	8f 4f       	sbci	r24, 0xFF	; 255
    9234:	80 93 ed 10 	sts	0x10ED, r24	; 0x8010ed <timer0_millis_count+0x3>
    9238:	09 c0       	rjmp	.+18     	; 0x924c <L_1218_ovcount>

0000923a <L_1218_fract_roll>:
    923a:	8d 57       	subi	r24, 0x7D	; 125
    923c:	80 93 e9 10 	sts	0x10E9, r24	; 0x8010e9 <timer0_fract_count>
    9240:	80 91 ea 10 	lds	r24, 0x10EA	; 0x8010ea <timer0_millis_count>
    9244:	8e 5f       	subi	r24, 0xFE	; 254
    9246:	80 93 ea 10 	sts	0x10EA, r24	; 0x8010ea <timer0_millis_count>
    924a:	28 f7       	brcc	.-54     	; 0x9216 <L_1218_millis_inc_sext>

0000924c <L_1218_ovcount>:
    924c:	80 91 ee 10 	lds	r24, 0x10EE	; 0x8010ee <timer0_micros_count>
    9250:	8c 5f       	subi	r24, 0xFC	; 252
    9252:	80 93 ee 10 	sts	0x10EE, r24	; 0x8010ee <timer0_micros_count>
    9256:	58 f0       	brcs	.+22     	; 0x926e <L_1218_end>
    9258:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <timer0_micros_count+0x1>
    925c:	8f 4f       	sbci	r24, 0xFF	; 255
    925e:	80 93 ef 10 	sts	0x10EF, r24	; 0x8010ef <timer0_micros_count+0x1>
    9262:	28 f0       	brcs	.+10     	; 0x926e <L_1218_end>
    9264:	80 91 f0 10 	lds	r24, 0x10F0	; 0x8010f0 <timer0_micros_count+0x2>
    9268:	8f 4f       	sbci	r24, 0xFF	; 255
    926a:	80 93 f0 10 	sts	0x10F0, r24	; 0x8010f0 <timer0_micros_count+0x2>

0000926e <L_1218_end>:
    926e:	8f 91       	pop	r24
    9270:	8f bf       	out	0x3f, r24	; 63
    9272:	8f 91       	pop	r24
    9274:	18 95       	reti

00009276 <delay>:
	);
}


void delay(uint32_t ms)
{
    9276:	cf 92       	push	r12
    9278:	df 92       	push	r13
    927a:	ef 92       	push	r14
    927c:	ff 92       	push	r15
    927e:	6b 01       	movw	r12, r22
    9280:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    9282:	19 d0       	rcall	.+50     	; 0x92b6 <_micros>
	uint16_t start = (uint16_t)micros();
    9284:	9b 01       	movw	r18, r22

	while (ms > 0) {
    9286:	c1 14       	cp	r12, r1
    9288:	d1 04       	cpc	r13, r1
    928a:	e1 04       	cpc	r14, r1
    928c:	f1 04       	cpc	r15, r1
    928e:	29 f4       	brne	.+10     	; 0x929a <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    9290:	ff 90       	pop	r15
    9292:	ef 90       	pop	r14
    9294:	df 90       	pop	r13
    9296:	cf 90       	pop	r12
    9298:	08 95       	ret
    929a:	0d d0       	rcall	.+26     	; 0x92b6 <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    929c:	62 1b       	sub	r22, r18
    929e:	73 0b       	sbc	r23, r19
    92a0:	68 3e       	cpi	r22, 0xE8	; 232
    92a2:	73 40       	sbci	r23, 0x03	; 3
    92a4:	80 f3       	brcs	.-32     	; 0x9286 <delay+0x10>
			ms--;
    92a6:	81 e0       	ldi	r24, 0x01	; 1
    92a8:	c8 1a       	sub	r12, r24
    92aa:	d1 08       	sbc	r13, r1
    92ac:	e1 08       	sbc	r14, r1
    92ae:	f1 08       	sbc	r15, r1
			start += 1000;
    92b0:	28 51       	subi	r18, 0x18	; 24
    92b2:	3c 4f       	sbci	r19, 0xFC	; 252
    92b4:	e8 cf       	rjmp	.-48     	; 0x9286 <delay+0x10>

000092b6 <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    92b6:	0f b6       	in	r0, 0x3f	; 63
    92b8:	f8 94       	cli
    92ba:	66 b5       	in	r22, 0x26	; 38
    92bc:	15 b2       	in	r1, 0x15	; 21
    92be:	70 91 ee 10 	lds	r23, 0x10EE	; 0x8010ee <timer0_micros_count>
    92c2:	80 91 ef 10 	lds	r24, 0x10EF	; 0x8010ef <timer0_micros_count+0x1>
    92c6:	90 91 f0 10 	lds	r25, 0x10F0	; 0x8010f0 <timer0_micros_count+0x2>
    92ca:	0f be       	out	0x3f, r0	; 63
    92cc:	10 fe       	sbrs	r1, 0
    92ce:	05 c0       	rjmp	.+10     	; 0x92da <L_1296_skip>
    92d0:	6f 3f       	cpi	r22, 0xFF	; 255
    92d2:	19 f0       	breq	.+6      	; 0x92da <L_1296_skip>
    92d4:	7c 5f       	subi	r23, 0xFC	; 252
    92d6:	8f 4f       	sbci	r24, 0xFF	; 255
    92d8:	9f 4f       	sbci	r25, 0xFF	; 255

000092da <L_1296_skip>:
    92da:	11 24       	eor	r1, r1
    92dc:	00 24       	eor	r0, r0
    92de:	66 0f       	add	r22, r22
    92e0:	00 1c       	adc	r0, r0
    92e2:	66 0f       	add	r22, r22
    92e4:	00 1c       	adc	r0, r0
    92e6:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    92e8:	08 95       	ret

000092ea <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    92ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    92ee:	80 ff       	sbrs	r24, 0
    92f0:	fc cf       	rjmp	.-8      	; 0x92ea <usb_wait_in_ready>
    92f2:	08 95       	ret

000092f4 <usb_init>:
    92f4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    92f8:	87 ff       	sbrs	r24, 7
    92fa:	02 c0       	rjmp	.+4      	; 0x9300 <usb_init+0xc>
    92fc:	85 ff       	sbrs	r24, 5
    92fe:	1b c0       	rjmp	.+54     	; 0x9336 <usb_init+0x42>
    9300:	81 e8       	ldi	r24, 0x81	; 129
    9302:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    9306:	80 ea       	ldi	r24, 0xA0	; 160
    9308:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    930c:	86 e1       	ldi	r24, 0x16	; 22
    930e:	89 bd       	out	0x29, r24	; 41
    9310:	09 b4       	in	r0, 0x29	; 41
    9312:	00 fe       	sbrs	r0, 0
    9314:	fd cf       	rjmp	.-6      	; 0x9310 <usb_init+0x1c>
    9316:	80 e9       	ldi	r24, 0x90	; 144
    9318:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    931c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    9320:	10 92 78 11 	sts	0x1178, r1	; 0x801178 <usb_configuration>
    9324:	10 92 77 11 	sts	0x1177, r1	; 0x801177 <usb_suspended>
    9328:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <__bss_end>
    932c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    9330:	8d e0       	ldi	r24, 0x0D	; 13
    9332:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    9336:	08 95       	ret

00009338 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    9338:	1f 92       	push	r1
    933a:	0f 92       	push	r0
    933c:	0f b6       	in	r0, 0x3f	; 63
    933e:	0f 92       	push	r0
    9340:	11 24       	eor	r1, r1
    9342:	0b b6       	in	r0, 0x3b	; 59
    9344:	0f 92       	push	r0
    9346:	2f 93       	push	r18
    9348:	3f 93       	push	r19
    934a:	4f 93       	push	r20
    934c:	5f 93       	push	r21
    934e:	6f 93       	push	r22
    9350:	7f 93       	push	r23
    9352:	8f 93       	push	r24
    9354:	9f 93       	push	r25
    9356:	af 93       	push	r26
    9358:	bf 93       	push	r27
    935a:	ef 93       	push	r30
    935c:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    935e:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    9362:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    9366:	93 ff       	sbrs	r25, 3
    9368:	11 c0       	rjmp	.+34     	; 0x938c <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    936a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    936e:	81 e0       	ldi	r24, 0x01	; 1
    9370:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    9374:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    9378:	82 e2       	ldi	r24, 0x22	; 34
    937a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    937e:	88 e0       	ldi	r24, 0x08	; 8
    9380:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    9384:	10 92 78 11 	sts	0x1178, r1	; 0x801178 <usb_configuration>
		cdc_line_rtsdtr = 0;
    9388:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    938c:	92 ff       	sbrs	r25, 2
    938e:	1d c0       	rjmp	.+58     	; 0x93ca <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    9390:	80 91 78 11 	lds	r24, 0x1178	; 0x801178 <usb_configuration>
    9394:	88 23       	and	r24, r24
    9396:	c9 f0       	breq	.+50     	; 0x93ca <__vector_10+0x92>
			t = transmit_flush_timer;
    9398:	80 91 f4 10 	lds	r24, 0x10F4	; 0x8010f4 <transmit_flush_timer>
			if (t) {
    939c:	88 23       	and	r24, r24
    939e:	59 f0       	breq	.+22     	; 0x93b6 <__vector_10+0x7e>
				transmit_flush_timer = --t;
    93a0:	81 50       	subi	r24, 0x01	; 1
    93a2:	80 93 f4 10 	sts	0x10F4, r24	; 0x8010f4 <transmit_flush_timer>
				if (!t) {
    93a6:	81 11       	cpse	r24, r1
    93a8:	06 c0       	rjmp	.+12     	; 0x93b6 <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    93aa:	84 e0       	ldi	r24, 0x04	; 4
    93ac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    93b0:	8a e3       	ldi	r24, 0x3A	; 58
    93b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    93b6:	80 91 f3 10 	lds	r24, 0x10F3	; 0x8010f3 <reboot_timer>
			if (t) {
    93ba:	88 23       	and	r24, r24
    93bc:	31 f0       	breq	.+12     	; 0x93ca <__vector_10+0x92>
				reboot_timer = --t;
    93be:	81 50       	subi	r24, 0x01	; 1
    93c0:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    93c4:	81 11       	cpse	r24, r1
    93c6:	01 c0       	rjmp	.+2      	; 0x93ca <__vector_10+0x92>
    93c8:	f0 de       	rcall	.-544    	; 0x91aa <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    93ca:	90 ff       	sbrs	r25, 0
    93cc:	0c c0       	rjmp	.+24     	; 0x93e6 <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    93ce:	80 e1       	ldi	r24, 0x10	; 16
    93d0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    93d4:	10 92 78 11 	sts	0x1178, r1	; 0x801178 <usb_configuration>
		usb_suspended = 1;
    93d8:	81 e0       	ldi	r24, 0x01	; 1
    93da:	80 93 77 11 	sts	0x1177, r24	; 0x801177 <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    93de:	80 ea       	ldi	r24, 0xA0	; 160
    93e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    93e4:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    93e6:	80 91 77 11 	lds	r24, 0x1177	; 0x801177 <usb_suspended>
    93ea:	88 23       	and	r24, r24
    93ec:	79 f0       	breq	.+30     	; 0x940c <__vector_10+0xd4>
    93ee:	94 ff       	sbrs	r25, 4
    93f0:	0d c0       	rjmp	.+26     	; 0x940c <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    93f2:	86 e1       	ldi	r24, 0x16	; 22
    93f4:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    93f6:	09 b4       	in	r0, 0x29	; 41
    93f8:	00 fe       	sbrs	r0, 0
    93fa:	fd cf       	rjmp	.-6      	; 0x93f6 <__vector_10+0xbe>
		USB_CONFIG();
    93fc:	80 e9       	ldi	r24, 0x90	; 144
    93fe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    9402:	8d e0       	ldi	r24, 0x0D	; 13
    9404:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    9408:	10 92 77 11 	sts	0x1177, r1	; 0x801177 <usb_suspended>
		return;
	}
}
    940c:	ff 91       	pop	r31
    940e:	ef 91       	pop	r30
    9410:	bf 91       	pop	r27
    9412:	af 91       	pop	r26
    9414:	9f 91       	pop	r25
    9416:	8f 91       	pop	r24
    9418:	7f 91       	pop	r23
    941a:	6f 91       	pop	r22
    941c:	5f 91       	pop	r21
    941e:	4f 91       	pop	r20
    9420:	3f 91       	pop	r19
    9422:	2f 91       	pop	r18
    9424:	0f 90       	pop	r0
    9426:	0b be       	out	0x3b, r0	; 59
    9428:	0f 90       	pop	r0
    942a:	0f be       	out	0x3f, r0	; 63
    942c:	0f 90       	pop	r0
    942e:	1f 90       	pop	r1
    9430:	18 95       	reti

00009432 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    9432:	1f 92       	push	r1
    9434:	0f 92       	push	r0
    9436:	0f b6       	in	r0, 0x3f	; 63
    9438:	0f 92       	push	r0
    943a:	11 24       	eor	r1, r1
    943c:	0b b6       	in	r0, 0x3b	; 59
    943e:	0f 92       	push	r0
    9440:	ef 92       	push	r14
    9442:	ff 92       	push	r15
    9444:	0f 93       	push	r16
    9446:	1f 93       	push	r17
    9448:	2f 93       	push	r18
    944a:	3f 93       	push	r19
    944c:	4f 93       	push	r20
    944e:	5f 93       	push	r21
    9450:	6f 93       	push	r22
    9452:	7f 93       	push	r23
    9454:	8f 93       	push	r24
    9456:	9f 93       	push	r25
    9458:	af 93       	push	r26
    945a:	bf 93       	push	r27
    945c:	cf 93       	push	r28
    945e:	df 93       	push	r29
    9460:	ef 93       	push	r30
    9462:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    9464:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    9468:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    946c:	83 ff       	sbrs	r24, 3
    946e:	20 c0       	rjmp	.+64     	; 0x94b0 <__vector_11+0x7e>
		bmRequestType = UEDATX;
    9470:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    9474:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    9478:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    947c:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    9480:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    9484:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    9488:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    948c:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    9490:	82 ef       	ldi	r24, 0xF2	; 242
    9492:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    9496:	c6 30       	cpi	r28, 0x06	; 6
    9498:	09 f0       	breq	.+2      	; 0x949c <__vector_11+0x6a>
    949a:	5b c0       	rjmp	.+182    	; 0x9552 <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    949c:	e4 e1       	ldi	r30, 0x14	; 20
    949e:	fd e0       	ldi	r31, 0x0D	; 13
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    94a0:	85 91       	lpm	r24, Z+
    94a2:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    94a4:	e8 16       	cp	r14, r24
    94a6:	f9 06       	cpc	r15, r25
    94a8:	39 f0       	breq	.+14     	; 0x94b8 <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    94aa:	35 96       	adiw	r30, 0x05	; 5
    94ac:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    94ae:	c1 f7       	brne	.-16     	; 0x94a0 <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    94b0:	81 e2       	ldi	r24, 0x21	; 33
    94b2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    94b6:	2b c0       	rjmp	.+86     	; 0x950e <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    94b8:	85 91       	lpm	r24, Z+
    94ba:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    94bc:	08 17       	cp	r16, r24
    94be:	19 07       	cpc	r17, r25
    94c0:	11 f0       	breq	.+4      	; 0x94c6 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    94c2:	33 96       	adiw	r30, 0x03	; 3
					continue;
    94c4:	f3 cf       	rjmp	.-26     	; 0x94ac <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    94c6:	45 91       	lpm	r20, Z+
    94c8:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    94ca:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    94cc:	2f 3f       	cpi	r18, 0xFF	; 255
    94ce:	31 05       	cpc	r19, r1
    94d0:	19 f0       	breq	.+6      	; 0x94d8 <__vector_11+0xa6>
    94d2:	10 f0       	brcs	.+4      	; 0x94d8 <__vector_11+0xa6>
    94d4:	2f ef       	ldi	r18, 0xFF	; 255
    94d6:	30 e0       	ldi	r19, 0x00	; 0
    94d8:	82 17       	cp	r24, r18
    94da:	08 f4       	brcc	.+2      	; 0x94de <__vector_11+0xac>
    94dc:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    94de:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    94e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    94e4:	98 2f       	mov	r25, r24
    94e6:	95 70       	andi	r25, 0x05	; 5
    94e8:	d9 f3       	breq	.-10     	; 0x94e0 <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    94ea:	82 fd       	sbrc	r24, 2
    94ec:	10 c0       	rjmp	.+32     	; 0x950e <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    94ee:	82 2f       	mov	r24, r18
    94f0:	21 32       	cpi	r18, 0x21	; 33
    94f2:	08 f0       	brcs	.+2      	; 0x94f6 <__vector_11+0xc4>
    94f4:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    94f6:	98 2f       	mov	r25, r24
    94f8:	91 11       	cpse	r25, r1
    94fa:	24 c0       	rjmp	.+72     	; 0x9544 <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    94fc:	92 2f       	mov	r25, r18
    94fe:	98 1b       	sub	r25, r24
    9500:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    9502:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    9506:	91 11       	cpse	r25, r1
    9508:	1b c0       	rjmp	.+54     	; 0x9540 <__vector_11+0x10e>
    950a:	20 32       	cpi	r18, 0x20	; 32
    950c:	c8 f4       	brcc	.+50     	; 0x9540 <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    950e:	ff 91       	pop	r31
    9510:	ef 91       	pop	r30
    9512:	df 91       	pop	r29
    9514:	cf 91       	pop	r28
    9516:	bf 91       	pop	r27
    9518:	af 91       	pop	r26
    951a:	9f 91       	pop	r25
    951c:	8f 91       	pop	r24
    951e:	7f 91       	pop	r23
    9520:	6f 91       	pop	r22
    9522:	5f 91       	pop	r21
    9524:	4f 91       	pop	r20
    9526:	3f 91       	pop	r19
    9528:	2f 91       	pop	r18
    952a:	1f 91       	pop	r17
    952c:	0f 91       	pop	r16
    952e:	ff 90       	pop	r15
    9530:	ef 90       	pop	r14
    9532:	0f 90       	pop	r0
    9534:	0b be       	out	0x3b, r0	; 59
    9536:	0f 90       	pop	r0
    9538:	0f be       	out	0x3f, r0	; 63
    953a:	0f 90       	pop	r0
    953c:	1f 90       	pop	r1
    953e:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    9540:	28 2f       	mov	r18, r24
    9542:	ce cf       	rjmp	.-100    	; 0x94e0 <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    9544:	fa 01       	movw	r30, r20
    9546:	45 91       	lpm	r20, Z+
    9548:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    954c:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    954e:	91 50       	subi	r25, 0x01	; 1
    9550:	d3 cf       	rjmp	.-90     	; 0x94f8 <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    9552:	c5 30       	cpi	r28, 0x05	; 5
    9554:	49 f4       	brne	.+18     	; 0x9568 <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    9556:	8e ef       	ldi	r24, 0xFE	; 254
    9558:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    955c:	c6 de       	rcall	.-628    	; 0x92ea <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    955e:	8e 2d       	mov	r24, r14
    9560:	80 68       	ori	r24, 0x80	; 128
    9562:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    9566:	d3 cf       	rjmp	.-90     	; 0x950e <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    9568:	c9 30       	cpi	r28, 0x09	; 9
    956a:	21 f5       	brne	.+72     	; 0x95b4 <__vector_11+0x182>
    956c:	d1 11       	cpse	r29, r1
    956e:	a0 cf       	rjmp	.-192    	; 0x94b0 <__vector_11+0x7e>
			usb_configuration = wValue;
    9570:	e0 92 78 11 	sts	0x1178, r14	; 0x801178 <usb_configuration>
			cdc_line_rtsdtr = 0;
    9574:	10 92 76 11 	sts	0x1176, r1	; 0x801176 <__bss_end>
			transmit_flush_timer = 0;
    9578:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    957c:	8e ef       	ldi	r24, 0xFE	; 254
    957e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    9582:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    9584:	e7 ed       	ldi	r30, 0xD7	; 215
    9586:	fd e0       	ldi	r31, 0x0D	; 13
			for (i=1; i<5; i++) {
				UENUM = i;
    9588:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    958c:	95 91       	lpm	r25, Z+
				UECONX = en;
    958e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    9592:	99 23       	and	r25, r25
    9594:	31 f0       	breq	.+12     	; 0x95a2 <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    9596:	95 91       	lpm	r25, Z+
    9598:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    959c:	95 91       	lpm	r25, Z+
    959e:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    95a2:	8f 5f       	subi	r24, 0xFF	; 255
    95a4:	85 30       	cpi	r24, 0x05	; 5
    95a6:	81 f7       	brne	.-32     	; 0x9588 <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    95a8:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    95aa:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    95ae:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    95b2:	ad cf       	rjmp	.-166    	; 0x950e <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    95b4:	c8 30       	cpi	r28, 0x08	; 8
    95b6:	61 f4       	brne	.+24     	; 0x95d0 <__vector_11+0x19e>
    95b8:	d0 38       	cpi	r29, 0x80	; 128
    95ba:	09 f0       	breq	.+2      	; 0x95be <__vector_11+0x18c>
			usb_wait_in_ready();
    95bc:	79 cf       	rjmp	.-270    	; 0x94b0 <__vector_11+0x7e>
    95be:	95 de       	rcall	.-726    	; 0x92ea <usb_wait_in_ready>
			UEDATX = usb_configuration;
    95c0:	80 91 78 11 	lds	r24, 0x1178	; 0x801178 <usb_configuration>
    95c4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    95c8:	8e ef       	ldi	r24, 0xFE	; 254
    95ca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    95ce:	9f cf       	rjmp	.-194    	; 0x950e <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    95d0:	c1 32       	cpi	r28, 0x21	; 33
    95d2:	79 f4       	brne	.+30     	; 0x95f2 <__vector_11+0x1c0>
    95d4:	d1 3a       	cpi	r29, 0xA1	; 161
    95d6:	09 f0       	breq	.+2      	; 0x95da <__vector_11+0x1a8>
			usb_wait_in_ready();
    95d8:	6b cf       	rjmp	.-298    	; 0x94b0 <__vector_11+0x7e>
    95da:	87 de       	rcall	.-754    	; 0x92ea <usb_wait_in_ready>
			p = cdc_line_coding;
    95dc:	e1 e1       	ldi	r30, 0x11	; 17
    95de:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    95e0:	80 81       	ld	r24, Z
    95e2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    95e6:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    95e8:	81 e0       	ldi	r24, 0x01	; 1
    95ea:	e8 31       	cpi	r30, 0x18	; 24
    95ec:	f8 07       	cpc	r31, r24
    95ee:	c1 f7       	brne	.-16     	; 0x95e0 <__vector_11+0x1ae>
    95f0:	eb cf       	rjmp	.-42     	; 0x95c8 <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    95f2:	c0 32       	cpi	r28, 0x20	; 32
    95f4:	09 f0       	breq	.+2      	; 0x95f8 <__vector_11+0x1c6>
    95f6:	47 c0       	rjmp	.+142    	; 0x9686 <__vector_11+0x254>
    95f8:	d1 32       	cpi	r29, 0x21	; 33
    95fa:	09 f0       	breq	.+2      	; 0x95fe <__vector_11+0x1cc>
    95fc:	59 cf       	rjmp	.-334    	; 0x94b0 <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    95fe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9602:	82 ff       	sbrs	r24, 2
    9604:	fc cf       	rjmp	.-8      	; 0x95fe <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    9606:	e1 e1       	ldi	r30, 0x11	; 17
    9608:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    960a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    960e:	80 83       	st	Z, r24
    9610:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    9612:	91 e0       	ldi	r25, 0x01	; 1
    9614:	e8 31       	cpi	r30, 0x18	; 24
    9616:	f9 07       	cpc	r31, r25
    9618:	c1 f7       	brne	.-16     	; 0x960a <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    961a:	8b ef       	ldi	r24, 0xFB	; 251
    961c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    9620:	8e ef       	ldi	r24, 0xFE	; 254
    9622:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    9626:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    962a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    962e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    9632:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    9636:	90 e0       	ldi	r25, 0x00	; 0
    9638:	b0 e0       	ldi	r27, 0x00	; 0
    963a:	a0 e0       	ldi	r26, 0x00	; 0
    963c:	dc 01       	movw	r26, r24
    963e:	99 27       	eor	r25, r25
    9640:	88 27       	eor	r24, r24
    9642:	94 2b       	or	r25, r20
    9644:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    9646:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    9648:	86 38       	cpi	r24, 0x86	; 134
    964a:	91 05       	cpc	r25, r1
    964c:	a1 05       	cpc	r26, r1
    964e:	b1 05       	cpc	r27, r1
    9650:	21 f4       	brne	.+8      	; 0x965a <__vector_11+0x228>
    9652:	8f e0       	ldi	r24, 0x0F	; 15
    9654:	80 93 f3 10 	sts	0x10F3, r24	; 0x8010f3 <reboot_timer>
    9658:	5a cf       	rjmp	.-332    	; 0x950e <__vector_11+0xdc>
			if (baud == 150UL) {
    965a:	86 39       	cpi	r24, 0x96	; 150
    965c:	91 05       	cpc	r25, r1
    965e:	a1 05       	cpc	r26, r1
    9660:	b1 05       	cpc	r27, r1
    9662:	09 f0       	breq	.+2      	; 0x9666 <__vector_11+0x234>
    9664:	54 cf       	rjmp	.-344    	; 0x950e <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    9666:	84 e0       	ldi	r24, 0x04	; 4
    9668:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    966c:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    966e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    9672:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    9674:	09 f4       	brne	.+2      	; 0x9678 <__vector_11+0x246>
    9676:	b6 dd       	rcall	.-1172   	; 0x91e4 <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    9678:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    967c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9680:	82 fd       	sbrc	r24, 2
    9682:	fc cf       	rjmp	.-8      	; 0x967c <__vector_11+0x24a>
    9684:	f4 cf       	rjmp	.-24     	; 0x966e <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    9686:	c2 32       	cpi	r28, 0x22	; 34
    9688:	39 f4       	brne	.+14     	; 0x9698 <__vector_11+0x266>
    968a:	d1 32       	cpi	r29, 0x21	; 33
    968c:	09 f0       	breq	.+2      	; 0x9690 <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    968e:	10 cf       	rjmp	.-480    	; 0x94b0 <__vector_11+0x7e>
    9690:	e0 92 76 11 	sts	0x1176, r14	; 0x801176 <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    9694:	2a de       	rcall	.-940    	; 0x92ea <usb_wait_in_ready>
    9696:	98 cf       	rjmp	.-208    	; 0x95c8 <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    9698:	c3 32       	cpi	r28, 0x23	; 35
    969a:	21 f4       	brne	.+8      	; 0x96a4 <__vector_11+0x272>
    969c:	d1 32       	cpi	r29, 0x21	; 33
    969e:	09 f0       	breq	.+2      	; 0x96a2 <__vector_11+0x270>
    96a0:	07 cf       	rjmp	.-498    	; 0x94b0 <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    96a2:	f8 cf       	rjmp	.-16     	; 0x9694 <__vector_11+0x262>
    96a4:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    96a6:	11 c0       	rjmp	.+34     	; 0x96ca <__vector_11+0x298>
    96a8:	20 de       	rcall	.-960    	; 0x92ea <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    96aa:	d2 38       	cpi	r29, 0x82	; 130
    96ac:	49 f4       	brne	.+18     	; 0x96c0 <__vector_11+0x28e>
				UENUM = wIndex;
    96ae:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    96b2:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    96b6:	c5 fb       	bst	r28, 5
    96b8:	cc 27       	eor	r28, r28
    96ba:	c0 f9       	bld	r28, 0
				UENUM = 0;
    96bc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    96c0:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    96c4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    96c8:	7f cf       	rjmp	.-258    	; 0x95c8 <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    96ca:	8c 2f       	mov	r24, r28
    96cc:	8d 7f       	andi	r24, 0xFD	; 253
    96ce:	81 30       	cpi	r24, 0x01	; 1
    96d0:	09 f0       	breq	.+2      	; 0x96d4 <__vector_11+0x2a2>
    96d2:	ee ce       	rjmp	.-548    	; 0x94b0 <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    96d4:	d2 30       	cpi	r29, 0x02	; 2
    96d6:	09 f0       	breq	.+2      	; 0x96da <__vector_11+0x2a8>
    96d8:	eb ce       	rjmp	.-554    	; 0x94b0 <__vector_11+0x7e>
    96da:	ef 28       	or	r14, r15
    96dc:	09 f0       	breq	.+2      	; 0x96e0 <__vector_11+0x2ae>
    96de:	e8 ce       	rjmp	.-560    	; 0x94b0 <__vector_11+0x7e>
			i = wIndex & 0x7F;
    96e0:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    96e2:	8f ef       	ldi	r24, 0xFF	; 255
    96e4:	80 0f       	add	r24, r16
    96e6:	86 30       	cpi	r24, 0x06	; 6
    96e8:	08 f0       	brcs	.+2      	; 0x96ec <__vector_11+0x2ba>
    96ea:	e2 ce       	rjmp	.-572    	; 0x94b0 <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    96ec:	8e ef       	ldi	r24, 0xFE	; 254
    96ee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    96f2:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    96f6:	c3 30       	cpi	r28, 0x03	; 3
    96f8:	09 f4       	brne	.+2      	; 0x96fc <__vector_11+0x2ca>
    96fa:	da ce       	rjmp	.-588    	; 0x94b0 <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    96fc:	89 e1       	ldi	r24, 0x19	; 25
    96fe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    9702:	81 e0       	ldi	r24, 0x01	; 1
    9704:	90 e0       	ldi	r25, 0x00	; 0
    9706:	01 c0       	rjmp	.+2      	; 0x970a <__vector_11+0x2d8>
    9708:	88 0f       	add	r24, r24
    970a:	0a 95       	dec	r16
    970c:	ea f7       	brpl	.-6      	; 0x9708 <__vector_11+0x2d6>
    970e:	4d cf       	rjmp	.-358    	; 0x95aa <__vector_11+0x178>

00009710 <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    9710:	50 91 29 11 	lds	r21, 0x1129	; 0x801129 <rx_buffer_head>
    9714:	40 91 28 11 	lds	r20, 0x1128	; 0x801128 <rx_buffer_tail>
    9718:	85 2f       	mov	r24, r21
    971a:	90 e0       	ldi	r25, 0x00	; 0
    971c:	24 2f       	mov	r18, r20
    971e:	30 e0       	ldi	r19, 0x00	; 0
    9720:	54 17       	cp	r21, r20
    9722:	18 f0       	brcs	.+6      	; 0x972a <HardwareSerial::available()+0x1a>
    9724:	82 1b       	sub	r24, r18
    9726:	93 0b       	sbc	r25, r19
    9728:	08 95       	ret
    972a:	80 5c       	subi	r24, 0xC0	; 192
    972c:	9f 4f       	sbci	r25, 0xFF	; 255
    972e:	fa cf       	rjmp	.-12     	; 0x9724 <HardwareSerial::available()+0x14>

00009730 <HardwareSerial::availableForWrite()>:
    9730:	50 91 29 11 	lds	r21, 0x1129	; 0x801129 <rx_buffer_head>
    9734:	40 91 28 11 	lds	r20, 0x1128	; 0x801128 <rx_buffer_tail>
    9738:	25 2f       	mov	r18, r21
    973a:	30 e0       	ldi	r19, 0x00	; 0
    973c:	84 2f       	mov	r24, r20
    973e:	90 e0       	ldi	r25, 0x00	; 0
    9740:	82 1b       	sub	r24, r18
    9742:	93 0b       	sbc	r25, r19
    9744:	54 17       	cp	r21, r20
    9746:	10 f0       	brcs	.+4      	; 0x974c <HardwareSerial::availableForWrite()+0x1c>
    9748:	87 96       	adiw	r24, 0x27	; 39
    974a:	08 95       	ret
    974c:	01 97       	sbiw	r24, 0x01	; 1
    974e:	08 95       	ret

00009750 <HardwareSerial::peek()>:
    9750:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <rx_buffer_head>
    9754:	e0 91 28 11 	lds	r30, 0x1128	; 0x801128 <rx_buffer_tail>
    9758:	8e 17       	cp	r24, r30
    975a:	51 f0       	breq	.+20     	; 0x9770 <HardwareSerial::peek()+0x20>
    975c:	ef 5f       	subi	r30, 0xFF	; 255
    975e:	e0 34       	cpi	r30, 0x40	; 64
    9760:	08 f0       	brcs	.+2      	; 0x9764 <HardwareSerial::peek()+0x14>
    9762:	e0 e0       	ldi	r30, 0x00	; 0
    9764:	f0 e0       	ldi	r31, 0x00	; 0
    9766:	e6 5d       	subi	r30, 0xD6	; 214
    9768:	fe 4e       	sbci	r31, 0xEE	; 238
    976a:	80 81       	ld	r24, Z
    976c:	90 e0       	ldi	r25, 0x00	; 0
    976e:	08 95       	ret
    9770:	8f ef       	ldi	r24, 0xFF	; 255
    9772:	9f ef       	ldi	r25, 0xFF	; 255
    9774:	08 95       	ret

00009776 <HardwareSerial::read()>:
    9776:	90 91 29 11 	lds	r25, 0x1129	; 0x801129 <rx_buffer_head>
    977a:	80 91 28 11 	lds	r24, 0x1128	; 0x801128 <rx_buffer_tail>
    977e:	98 17       	cp	r25, r24
    9780:	79 f0       	breq	.+30     	; 0x97a0 <HardwareSerial::read()+0x2a>
    9782:	90 91 28 11 	lds	r25, 0x1128	; 0x801128 <rx_buffer_tail>
    9786:	9f 5f       	subi	r25, 0xFF	; 255
    9788:	90 34       	cpi	r25, 0x40	; 64
    978a:	08 f0       	brcs	.+2      	; 0x978e <HardwareSerial::read()+0x18>
    978c:	90 e0       	ldi	r25, 0x00	; 0
    978e:	e9 2f       	mov	r30, r25
    9790:	f0 e0       	ldi	r31, 0x00	; 0
    9792:	e6 5d       	subi	r30, 0xD6	; 214
    9794:	fe 4e       	sbci	r31, 0xEE	; 238
    9796:	80 81       	ld	r24, Z
    9798:	90 93 28 11 	sts	0x1128, r25	; 0x801128 <rx_buffer_tail>
    979c:	90 e0       	ldi	r25, 0x00	; 0
    979e:	08 95       	ret
    97a0:	8f ef       	ldi	r24, 0xFF	; 255
    97a2:	9f ef       	ldi	r25, 0xFF	; 255
    97a4:	08 95       	ret

000097a6 <HardwareSerial::flush()>:
    97a6:	80 91 fd 10 	lds	r24, 0x10FD	; 0x8010fd <transmitting>
    97aa:	81 11       	cpse	r24, r1
    97ac:	fc cf       	rjmp	.-8      	; 0x97a6 <HardwareSerial::flush()>
    97ae:	08 95       	ret

000097b0 <HardwareSerial::write(unsigned char)>:
    97b0:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    97b4:	23 fd       	sbrc	r18, 3
    97b6:	06 c0       	rjmp	.+12     	; 0x97c4 <HardwareSerial::write(unsigned char)+0x14>
    97b8:	21 e0       	ldi	r18, 0x01	; 1
    97ba:	fc 01       	movw	r30, r24
    97bc:	22 83       	std	Z+2, r18	; 0x02
    97be:	90 e0       	ldi	r25, 0x00	; 0
    97c0:	80 e0       	ldi	r24, 0x00	; 0
    97c2:	08 95       	ret
    97c4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    97c8:	8f 3f       	cpi	r24, 0xFF	; 255
    97ca:	41 f0       	breq	.+16     	; 0x97dc <HardwareSerial::write(unsigned char)+0x2c>
    97cc:	80 91 fd 10 	lds	r24, 0x10FD	; 0x8010fd <transmitting>
    97d0:	81 11       	cpse	r24, r1
    97d2:	04 c0       	rjmp	.+8      	; 0x97dc <HardwareSerial::write(unsigned char)+0x2c>
    97d4:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    97d8:	f0 e0       	ldi	r31, 0x00	; 0
    97da:	ee db       	rcall	.-2084   	; 0x8fb8 <_digitalWrite_HIGH>
    97dc:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <tx_buffer_head>
    97e0:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <tx_buffer_tail>
    97e4:	98 13       	cpse	r25, r24
    97e6:	04 c0       	rjmp	.+8      	; 0x97f0 <HardwareSerial::write(unsigned char)+0x40>
    97e8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    97ec:	85 fd       	sbrc	r24, 5
    97ee:	19 c0       	rjmp	.+50     	; 0x9822 <HardwareSerial::write(unsigned char)+0x72>
    97f0:	80 91 ff 10 	lds	r24, 0x10FF	; 0x8010ff <tx_buffer_head>
    97f4:	8f 5f       	subi	r24, 0xFF	; 255
    97f6:	88 32       	cpi	r24, 0x28	; 40
    97f8:	f8 f4       	brcc	.+62     	; 0x9838 <HardwareSerial::write(unsigned char)+0x88>
    97fa:	90 91 fe 10 	lds	r25, 0x10FE	; 0x8010fe <tx_buffer_tail>
    97fe:	98 17       	cp	r25, r24
    9800:	e1 f3       	breq	.-8      	; 0x97fa <HardwareSerial::write(unsigned char)+0x4a>
    9802:	e8 2f       	mov	r30, r24
    9804:	f0 e0       	ldi	r31, 0x00	; 0
    9806:	e0 50       	subi	r30, 0x00	; 0
    9808:	ff 4e       	sbci	r31, 0xEF	; 239
    980a:	60 83       	st	Z, r22
    980c:	91 e0       	ldi	r25, 0x01	; 1
    980e:	90 93 fd 10 	sts	0x10FD, r25	; 0x8010fd <transmitting>
    9812:	80 93 ff 10 	sts	0x10FF, r24	; 0x8010ff <tx_buffer_head>
    9816:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    981a:	80 62       	ori	r24, 0x20	; 32
    981c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    9820:	08 c0       	rjmp	.+16     	; 0x9832 <HardwareSerial::write(unsigned char)+0x82>
    9822:	8f b7       	in	r24, 0x3f	; 63
    9824:	f8 94       	cli
    9826:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    982a:	91 e0       	ldi	r25, 0x01	; 1
    982c:	90 93 fd 10 	sts	0x10FD, r25	; 0x8010fd <transmitting>
    9830:	8f bf       	out	0x3f, r24	; 63
    9832:	81 e0       	ldi	r24, 0x01	; 1
    9834:	90 e0       	ldi	r25, 0x00	; 0
    9836:	08 95       	ret
    9838:	80 e0       	ldi	r24, 0x00	; 0
    983a:	df cf       	rjmp	.-66     	; 0x97fa <HardwareSerial::write(unsigned char)+0x4a>

0000983c <HardwareSerial::_begin(unsigned int, unsigned char)>:
    983c:	1f 93       	push	r17
    983e:	cf 93       	push	r28
    9840:	df 93       	push	r29
    9842:	eb 01       	movw	r28, r22
    9844:	14 2f       	mov	r17, r20
    9846:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    984a:	4f 3f       	cpi	r20, 0xFF	; 255
    984c:	29 f0       	breq	.+10     	; 0x9858 <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    984e:	84 2f       	mov	r24, r20
    9850:	a2 db       	rcall	.-2236   	; 0x8f96 <_pinMode_output>
    9852:	e1 2f       	mov	r30, r17
    9854:	f0 e0       	ldi	r31, 0x00	; 0
    9856:	b6 db       	rcall	.-2196   	; 0x8fc4 <_digitalWrite_LOW>
    9858:	c0 ff       	sbrs	r28, 0
    985a:	24 c0       	rjmp	.+72     	; 0x98a4 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    985c:	c1 30       	cpi	r28, 0x01	; 1
    985e:	80 e1       	ldi	r24, 0x10	; 16
    9860:	d8 07       	cpc	r29, r24
    9862:	00 f5       	brcc	.+64     	; 0x98a4 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    9864:	82 e0       	ldi	r24, 0x02	; 2
    9866:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    986a:	21 97       	sbiw	r28, 0x01	; 1
    986c:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    9870:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    9874:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    9878:	83 fd       	sbrc	r24, 3
    987a:	10 c0       	rjmp	.+32     	; 0x989c <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    987c:	10 92 29 11 	sts	0x1129, r1	; 0x801129 <rx_buffer_head>
    9880:	10 92 28 11 	sts	0x1128, r1	; 0x801128 <rx_buffer_tail>
    9884:	10 92 ff 10 	sts	0x10FF, r1	; 0x8010ff <tx_buffer_head>
    9888:	10 92 fe 10 	sts	0x10FE, r1	; 0x8010fe <tx_buffer_tail>
    988c:	10 92 fd 10 	sts	0x10FD, r1	; 0x8010fd <transmitting>
    9890:	86 e0       	ldi	r24, 0x06	; 6
    9892:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    9896:	88 ed       	ldi	r24, 0xD8	; 216
    9898:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    989c:	df 91       	pop	r29
    989e:	cf 91       	pop	r28
    98a0:	1f 91       	pop	r17
    98a2:	08 95       	ret
    98a4:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    98a8:	d6 95       	lsr	r29
    98aa:	c7 95       	ror	r28
    98ac:	de cf       	rjmp	.-68     	; 0x986a <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

000098ae <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    98ae:	1f 92       	push	r1
    98b0:	0f 92       	push	r0
    98b2:	0f b6       	in	r0, 0x3f	; 63
    98b4:	0f 92       	push	r0
    98b6:	11 24       	eor	r1, r1
    98b8:	0b b6       	in	r0, 0x3b	; 59
    98ba:	0f 92       	push	r0
    98bc:	2f 93       	push	r18
    98be:	8f 93       	push	r24
    98c0:	9f 93       	push	r25
    98c2:	ef 93       	push	r30
    98c4:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    98c6:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    98ca:	80 91 29 11 	lds	r24, 0x1129	; 0x801129 <rx_buffer_head>
    98ce:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    98d0:	80 34       	cpi	r24, 0x40	; 64
    98d2:	08 f0       	brcs	.+2      	; 0x98d6 <__vector_25+0x28>
    98d4:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    98d6:	20 91 28 11 	lds	r18, 0x1128	; 0x801128 <rx_buffer_tail>
    98da:	28 17       	cp	r18, r24
    98dc:	39 f0       	breq	.+14     	; 0x98ec <__vector_25+0x3e>
		rx_buffer[i] = c;
    98de:	e8 2f       	mov	r30, r24
    98e0:	f0 e0       	ldi	r31, 0x00	; 0
    98e2:	e6 5d       	subi	r30, 0xD6	; 214
    98e4:	fe 4e       	sbci	r31, 0xEE	; 238
    98e6:	90 83       	st	Z, r25
		rx_buffer_head = i;
    98e8:	80 93 29 11 	sts	0x1129, r24	; 0x801129 <rx_buffer_head>
	}
}
    98ec:	ff 91       	pop	r31
    98ee:	ef 91       	pop	r30
    98f0:	9f 91       	pop	r25
    98f2:	8f 91       	pop	r24
    98f4:	2f 91       	pop	r18
    98f6:	0f 90       	pop	r0
    98f8:	0b be       	out	0x3b, r0	; 59
    98fa:	0f 90       	pop	r0
    98fc:	0f be       	out	0x3f, r0	; 63
    98fe:	0f 90       	pop	r0
    9900:	1f 90       	pop	r1
    9902:	18 95       	reti

00009904 <__vector_26>:

ISR(USART1_UDRE_vect)
{
    9904:	1f 92       	push	r1
    9906:	0f 92       	push	r0
    9908:	0f b6       	in	r0, 0x3f	; 63
    990a:	0f 92       	push	r0
    990c:	11 24       	eor	r1, r1
    990e:	0b b6       	in	r0, 0x3b	; 59
    9910:	0f 92       	push	r0
    9912:	8f 93       	push	r24
    9914:	9f 93       	push	r25
    9916:	ef 93       	push	r30
    9918:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    991a:	90 91 ff 10 	lds	r25, 0x10FF	; 0x8010ff <tx_buffer_head>
    991e:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <tx_buffer_tail>
    9922:	98 13       	cpse	r25, r24
    9924:	10 c0       	rjmp	.+32     	; 0x9946 <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    9926:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    992a:	8f 7d       	andi	r24, 0xDF	; 223
    992c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    9930:	ff 91       	pop	r31
    9932:	ef 91       	pop	r30
    9934:	9f 91       	pop	r25
    9936:	8f 91       	pop	r24
    9938:	0f 90       	pop	r0
    993a:	0b be       	out	0x3b, r0	; 59
    993c:	0f 90       	pop	r0
    993e:	0f be       	out	0x3f, r0	; 63
    9940:	0f 90       	pop	r0
    9942:	1f 90       	pop	r1
    9944:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    9946:	80 91 fe 10 	lds	r24, 0x10FE	; 0x8010fe <tx_buffer_tail>
    994a:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    994c:	88 32       	cpi	r24, 0x28	; 40
    994e:	08 f0       	brcs	.+2      	; 0x9952 <__vector_26+0x4e>
    9950:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    9952:	e8 2f       	mov	r30, r24
    9954:	f0 e0       	ldi	r31, 0x00	; 0
    9956:	e0 50       	subi	r30, 0x00	; 0
    9958:	ff 4e       	sbci	r31, 0xEF	; 239
    995a:	90 81       	ld	r25, Z
    995c:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    9960:	80 93 fe 10 	sts	0x10FE, r24	; 0x8010fe <tx_buffer_tail>
	}
}
    9964:	e5 cf       	rjmp	.-54     	; 0x9930 <__vector_26+0x2c>

00009966 <__vector_27>:

ISR(USART1_TX_vect)
{
    9966:	1f 92       	push	r1
    9968:	0f 92       	push	r0
    996a:	0f b6       	in	r0, 0x3f	; 63
    996c:	0f 92       	push	r0
    996e:	11 24       	eor	r1, r1
    9970:	0b b6       	in	r0, 0x3b	; 59
    9972:	0f 92       	push	r0
    9974:	8f 93       	push	r24
    9976:	ef 93       	push	r30
    9978:	ff 93       	push	r31
	transmitting = 0;
    997a:	10 92 fd 10 	sts	0x10FD, r1	; 0x8010fd <transmitting>
	if (tx_enable_pin < 255) {
    997e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    9982:	8f 3f       	cpi	r24, 0xFF	; 255
    9984:	21 f0       	breq	.+8      	; 0x998e <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    9986:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    998a:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    998c:	1b db       	rcall	.-2506   	; 0x8fc4 <_digitalWrite_LOW>
	}
}
    998e:	ff 91       	pop	r31
    9990:	ef 91       	pop	r30
    9992:	8f 91       	pop	r24
    9994:	0f 90       	pop	r0
    9996:	0b be       	out	0x3b, r0	; 59
    9998:	0f 90       	pop	r0
    999a:	0f be       	out	0x3f, r0	; 63
    999c:	0f 90       	pop	r0
    999e:	1f 90       	pop	r1
    99a0:	18 95       	reti

000099a2 <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    99a2:	e5 ef       	ldi	r30, 0xF5	; 245
    99a4:	f0 e1       	ldi	r31, 0x10	; 16
    99a6:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    99a8:	88 ee       	ldi	r24, 0xE8	; 232
    99aa:	93 e0       	ldi	r25, 0x03	; 3
    99ac:	a0 e0       	ldi	r26, 0x00	; 0
    99ae:	b0 e0       	ldi	r27, 0x00	; 0
    99b0:	83 83       	std	Z+3, r24	; 0x03
    99b2:	94 83       	std	Z+4, r25	; 0x04
    99b4:	a5 83       	std	Z+5, r26	; 0x05
    99b6:	b6 83       	std	Z+6, r27	; 0x06
    99b8:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    99ba:	82 ec       	ldi	r24, 0xC2	; 194
    99bc:	99 e0       	ldi	r25, 0x09	; 9
    99be:	91 83       	std	Z+1, r25	; 0x01
    99c0:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    99c2:	08 95       	ret

000099c4 <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    99c4:	9a da       	rcall	.-2764   	; 0x8efa <_init_Teensyduino_internal_>

	setup();
    99c6:	0e 94 38 1c 	call	0x3870	; 0x3870 <setup>
    
	while (1) {
		loop();
    99ca:	0e 94 ce 35 	call	0x6b9c	; 0x6b9c <loop>
    99ce:	fd cf       	rjmp	.-6      	; 0x99ca <main+0x6>

000099d0 <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    99d0:	73 c8       	rjmp	.-3866   	; 0x8ab8 <malloc>

000099d2 <__cxa_guard_acquire>:
    99d2:	fc 01       	movw	r30, r24
    99d4:	81 e0       	ldi	r24, 0x01	; 1
    99d6:	90 e0       	ldi	r25, 0x00	; 0
    99d8:	20 81       	ld	r18, Z
    99da:	22 23       	and	r18, r18
    99dc:	11 f0       	breq	.+4      	; 0x99e2 <__cxa_guard_acquire+0x10>
    99de:	90 e0       	ldi	r25, 0x00	; 0
    99e0:	80 e0       	ldi	r24, 0x00	; 0
    99e2:	08 95       	ret

000099e4 <__cxa_guard_release>:
    99e4:	21 e0       	ldi	r18, 0x01	; 1
    99e6:	fc 01       	movw	r30, r24
    99e8:	20 83       	st	Z, r18
    99ea:	08 95       	ret

000099ec <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    99ec:	08 95       	ret

000099ee <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    99ee:	cf 92       	push	r12
    99f0:	df 92       	push	r13
    99f2:	ef 92       	push	r14
    99f4:	ff 92       	push	r15
    99f6:	0f 93       	push	r16
    99f8:	1f 93       	push	r17
    99fa:	cf 93       	push	r28
    99fc:	df 93       	push	r29
    99fe:	6c 01       	movw	r12, r24
    9a00:	eb 01       	movw	r28, r22
    9a02:	7b 01       	movw	r14, r22
    9a04:	e4 0e       	add	r14, r20
    9a06:	f5 1e       	adc	r15, r21
    9a08:	10 e0       	ldi	r17, 0x00	; 0
    9a0a:	00 e0       	ldi	r16, 0x00	; 0
    9a0c:	ce 15       	cp	r28, r14
    9a0e:	df 05       	cpc	r29, r15
    9a10:	61 f0       	breq	.+24     	; 0x9a2a <Print::write(unsigned char const*, unsigned int)+0x3c>
    9a12:	69 91       	ld	r22, Y+
    9a14:	d6 01       	movw	r26, r12
    9a16:	ed 91       	ld	r30, X+
    9a18:	fc 91       	ld	r31, X
    9a1a:	01 90       	ld	r0, Z+
    9a1c:	f0 81       	ld	r31, Z
    9a1e:	e0 2d       	mov	r30, r0
    9a20:	c6 01       	movw	r24, r12
    9a22:	09 95       	icall
    9a24:	08 0f       	add	r16, r24
    9a26:	19 1f       	adc	r17, r25
    9a28:	f1 cf       	rjmp	.-30     	; 0x9a0c <Print::write(unsigned char const*, unsigned int)+0x1e>
    9a2a:	c8 01       	movw	r24, r16
    9a2c:	df 91       	pop	r29
    9a2e:	cf 91       	pop	r28
    9a30:	1f 91       	pop	r17
    9a32:	0f 91       	pop	r16
    9a34:	ff 90       	pop	r15
    9a36:	ef 90       	pop	r14
    9a38:	df 90       	pop	r13
    9a3a:	cf 90       	pop	r12
    9a3c:	08 95       	ret

00009a3e <Print::print(String const&)>:
    9a3e:	8f 92       	push	r8
    9a40:	9f 92       	push	r9
    9a42:	af 92       	push	r10
    9a44:	bf 92       	push	r11
    9a46:	cf 92       	push	r12
    9a48:	df 92       	push	r13
    9a4a:	ef 92       	push	r14
    9a4c:	ff 92       	push	r15
    9a4e:	0f 93       	push	r16
    9a50:	1f 93       	push	r17
    9a52:	cf 93       	push	r28
    9a54:	df 93       	push	r29
    9a56:	cd b7       	in	r28, 0x3d	; 61
    9a58:	de b7       	in	r29, 0x3e	; 62
    9a5a:	a1 97       	sbiw	r28, 0x21	; 33
    9a5c:	0f b6       	in	r0, 0x3f	; 63
    9a5e:	f8 94       	cli
    9a60:	de bf       	out	0x3e, r29	; 62
    9a62:	0f be       	out	0x3f, r0	; 63
    9a64:	cd bf       	out	0x3d, r28	; 61
    9a66:	5c 01       	movw	r10, r24
    9a68:	4b 01       	movw	r8, r22
    9a6a:	db 01       	movw	r26, r22
    9a6c:	14 96       	adiw	r26, 0x04	; 4
    9a6e:	0d 91       	ld	r16, X+
    9a70:	1c 91       	ld	r17, X
    9a72:	d1 2c       	mov	r13, r1
    9a74:	c1 2c       	mov	r12, r1
    9a76:	f1 2c       	mov	r15, r1
    9a78:	e1 2c       	mov	r14, r1
    9a7a:	01 15       	cp	r16, r1
    9a7c:	11 05       	cpc	r17, r1
    9a7e:	01 f1       	breq	.+64     	; 0x9ac0 <Print::print(String const&)+0x82>
    9a80:	96 01       	movw	r18, r12
    9a82:	41 e2       	ldi	r20, 0x21	; 33
    9a84:	50 e0       	ldi	r21, 0x00	; 0
    9a86:	be 01       	movw	r22, r28
    9a88:	6f 5f       	subi	r22, 0xFF	; 255
    9a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    9a8c:	c4 01       	movw	r24, r8
    9a8e:	53 d3       	rcall	.+1702   	; 0xa136 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    9a90:	a8 01       	movw	r20, r16
    9a92:	01 32       	cpi	r16, 0x21	; 33
    9a94:	11 05       	cpc	r17, r1
    9a96:	10 f0       	brcs	.+4      	; 0x9a9c <Print::print(String const&)+0x5e>
    9a98:	40 e2       	ldi	r20, 0x20	; 32
    9a9a:	50 e0       	ldi	r21, 0x00	; 0
    9a9c:	c4 0e       	add	r12, r20
    9a9e:	d5 1e       	adc	r13, r21
    9aa0:	04 1b       	sub	r16, r20
    9aa2:	15 0b       	sbc	r17, r21
    9aa4:	d5 01       	movw	r26, r10
    9aa6:	ed 91       	ld	r30, X+
    9aa8:	fc 91       	ld	r31, X
    9aaa:	02 80       	ldd	r0, Z+2	; 0x02
    9aac:	f3 81       	ldd	r31, Z+3	; 0x03
    9aae:	e0 2d       	mov	r30, r0
    9ab0:	be 01       	movw	r22, r28
    9ab2:	6f 5f       	subi	r22, 0xFF	; 255
    9ab4:	7f 4f       	sbci	r23, 0xFF	; 255
    9ab6:	c5 01       	movw	r24, r10
    9ab8:	09 95       	icall
    9aba:	e8 0e       	add	r14, r24
    9abc:	f9 1e       	adc	r15, r25
    9abe:	dd cf       	rjmp	.-70     	; 0x9a7a <Print::print(String const&)+0x3c>
    9ac0:	c7 01       	movw	r24, r14
    9ac2:	a1 96       	adiw	r28, 0x21	; 33
    9ac4:	0f b6       	in	r0, 0x3f	; 63
    9ac6:	f8 94       	cli
    9ac8:	de bf       	out	0x3e, r29	; 62
    9aca:	0f be       	out	0x3f, r0	; 63
    9acc:	cd bf       	out	0x3d, r28	; 61
    9ace:	df 91       	pop	r29
    9ad0:	cf 91       	pop	r28
    9ad2:	1f 91       	pop	r17
    9ad4:	0f 91       	pop	r16
    9ad6:	ff 90       	pop	r15
    9ad8:	ef 90       	pop	r14
    9ada:	df 90       	pop	r13
    9adc:	cf 90       	pop	r12
    9ade:	bf 90       	pop	r11
    9ae0:	af 90       	pop	r10
    9ae2:	9f 90       	pop	r9
    9ae4:	8f 90       	pop	r8
    9ae6:	08 95       	ret

00009ae8 <Print::println()>:
    9ae8:	cf 93       	push	r28
    9aea:	df 93       	push	r29
    9aec:	00 d0       	rcall	.+0      	; 0x9aee <Print::println()+0x6>
    9aee:	cd b7       	in	r28, 0x3d	; 61
    9af0:	de b7       	in	r29, 0x3e	; 62
    9af2:	2d e0       	ldi	r18, 0x0D	; 13
    9af4:	29 83       	std	Y+1, r18	; 0x01
    9af6:	2a e0       	ldi	r18, 0x0A	; 10
    9af8:	2a 83       	std	Y+2, r18	; 0x02
    9afa:	dc 01       	movw	r26, r24
    9afc:	ed 91       	ld	r30, X+
    9afe:	fc 91       	ld	r31, X
    9b00:	02 80       	ldd	r0, Z+2	; 0x02
    9b02:	f3 81       	ldd	r31, Z+3	; 0x03
    9b04:	e0 2d       	mov	r30, r0
    9b06:	42 e0       	ldi	r20, 0x02	; 2
    9b08:	50 e0       	ldi	r21, 0x00	; 0
    9b0a:	be 01       	movw	r22, r28
    9b0c:	6f 5f       	subi	r22, 0xFF	; 255
    9b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    9b10:	09 95       	icall
    9b12:	0f 90       	pop	r0
    9b14:	0f 90       	pop	r0
    9b16:	df 91       	pop	r29
    9b18:	cf 91       	pop	r28
    9b1a:	08 95       	ret

00009b1c <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    9b1c:	cf 93       	push	r28
    9b1e:	df 93       	push	r29
    9b20:	cd b7       	in	r28, 0x3d	; 61
    9b22:	de b7       	in	r29, 0x3e	; 62
    9b24:	2b 97       	sbiw	r28, 0x0b	; 11
    9b26:	0f b6       	in	r0, 0x3f	; 63
    9b28:	f8 94       	cli
    9b2a:	de bf       	out	0x3e, r29	; 62
    9b2c:	0f be       	out	0x3f, r0	; 63
    9b2e:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    9b30:	fe 01       	movw	r30, r28
    9b32:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    9b34:	a3 e3       	ldi	r26, 0x33	; 51
    9b36:	4a 9f       	mul	r20, r26
    9b38:	44 27       	eor	r20, r20
    9b3a:	0a 0e       	add	r0, r26
    9b3c:	41 1d       	adc	r20, r1
    9b3e:	30 2d       	mov	r19, r0
    9b40:	5a 9f       	mul	r21, r26
    9b42:	55 27       	eor	r21, r21
    9b44:	40 0d       	add	r20, r0
    9b46:	51 1d       	adc	r21, r1
    9b48:	6a 9f       	mul	r22, r26
    9b4a:	66 27       	eor	r22, r22
    9b4c:	50 0d       	add	r21, r0
    9b4e:	61 1d       	adc	r22, r1
    9b50:	7a 9f       	mul	r23, r26
    9b52:	77 27       	eor	r23, r23
    9b54:	60 0d       	add	r22, r0
    9b56:	71 1d       	adc	r23, r1
    9b58:	11 24       	eor	r1, r1
    9b5a:	34 0f       	add	r19, r20
    9b5c:	45 1f       	adc	r20, r21
    9b5e:	56 1f       	adc	r21, r22
    9b60:	67 1f       	adc	r22, r23
    9b62:	71 1d       	adc	r23, r1
    9b64:	35 0f       	add	r19, r21
    9b66:	46 1f       	adc	r20, r22
    9b68:	57 1f       	adc	r21, r23
    9b6a:	61 1d       	adc	r22, r1
    9b6c:	71 1d       	adc	r23, r1
    9b6e:	37 0f       	add	r19, r23
    9b70:	41 1d       	adc	r20, r1
    9b72:	51 1d       	adc	r21, r1
    9b74:	61 1d       	adc	r22, r1
    9b76:	71 1d       	adc	r23, r1
    9b78:	76 95       	lsr	r23
    9b7a:	67 95       	ror	r22
    9b7c:	57 95       	ror	r21
    9b7e:	47 95       	ror	r20
    9b80:	37 95       	ror	r19
    9b82:	aa e0       	ldi	r26, 0x0A	; 10
    9b84:	3a 9f       	mul	r19, r26
    9b86:	31 2d       	mov	r19, r1
    9b88:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    9b8a:	df 01       	movw	r26, r30
    9b8c:	30 5d       	subi	r19, 0xD0	; 208
    9b8e:	3e 93       	st	-X, r19
	} while (n);
    9b90:	41 15       	cp	r20, r1
    9b92:	51 05       	cpc	r21, r1
    9b94:	61 05       	cpc	r22, r1
    9b96:	71 05       	cpc	r23, r1
    9b98:	09 f5       	brne	.+66     	; 0x9bdc <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    9b9a:	22 23       	and	r18, r18
    9b9c:	41 f0       	breq	.+16     	; 0x9bae <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    9b9e:	bd 01       	movw	r22, r26
    9ba0:	61 50       	subi	r22, 0x01	; 1
    9ba2:	71 09       	sbc	r23, r1
    9ba4:	2d e2       	ldi	r18, 0x2D	; 45
    9ba6:	db 01       	movw	r26, r22
    9ba8:	2c 93       	st	X, r18
    9baa:	df 01       	movw	r26, r30
    9bac:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    9bae:	ae 01       	movw	r20, r28
    9bb0:	4a 1b       	sub	r20, r26
    9bb2:	5b 0b       	sbc	r21, r27
    9bb4:	44 5f       	subi	r20, 0xF4	; 244
    9bb6:	5f 4f       	sbci	r21, 0xFF	; 255
    9bb8:	fc 01       	movw	r30, r24
    9bba:	20 81       	ld	r18, Z
    9bbc:	31 81       	ldd	r19, Z+1	; 0x01
    9bbe:	f9 01       	movw	r30, r18
    9bc0:	22 81       	ldd	r18, Z+2	; 0x02
    9bc2:	33 81       	ldd	r19, Z+3	; 0x03
    9bc4:	bd 01       	movw	r22, r26
    9bc6:	f9 01       	movw	r30, r18
    9bc8:	09 95       	icall
}
    9bca:	2b 96       	adiw	r28, 0x0b	; 11
    9bcc:	0f b6       	in	r0, 0x3f	; 63
    9bce:	f8 94       	cli
    9bd0:	de bf       	out	0x3e, r29	; 62
    9bd2:	0f be       	out	0x3f, r0	; 63
    9bd4:	cd bf       	out	0x3d, r28	; 61
    9bd6:	df 91       	pop	r29
    9bd8:	cf 91       	pop	r28
    9bda:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    9bdc:	fd 01       	movw	r30, r26
    9bde:	aa cf       	rjmp	.-172    	; 0x9b34 <Print::printNumberDec(unsigned long, unsigned char)+0x18>

00009be0 <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    9be0:	cf 93       	push	r28
    9be2:	df 93       	push	r29
    9be4:	1f 92       	push	r1
    9be6:	cd b7       	in	r28, 0x3d	; 61
    9be8:	de b7       	in	r29, 0x3e	; 62
    9bea:	69 83       	std	Y+1, r22	; 0x01
    9bec:	dc 01       	movw	r26, r24
    9bee:	ed 91       	ld	r30, X+
    9bf0:	fc 91       	ld	r31, X
    9bf2:	02 80       	ldd	r0, Z+2	; 0x02
    9bf4:	f3 81       	ldd	r31, Z+3	; 0x03
    9bf6:	e0 2d       	mov	r30, r0
    9bf8:	41 e0       	ldi	r20, 0x01	; 1
    9bfa:	50 e0       	ldi	r21, 0x00	; 0
    9bfc:	be 01       	movw	r22, r28
    9bfe:	6f 5f       	subi	r22, 0xFF	; 255
    9c00:	7f 4f       	sbci	r23, 0xFF	; 255
    9c02:	09 95       	icall
    9c04:	0f 90       	pop	r0
    9c06:	df 91       	pop	r29
    9c08:	cf 91       	pop	r28
    9c0a:	08 95       	ret

00009c0c <usb_serial_class::available()>:
    9c0c:	fc 01       	movw	r30, r24
    9c0e:	8f b7       	in	r24, 0x3f	; 63
    9c10:	f8 94       	cli
    9c12:	90 91 78 11 	lds	r25, 0x1178	; 0x801178 <usb_configuration>
    9c16:	91 11       	cpse	r25, r1
    9c18:	0c c0       	rjmp	.+24     	; 0x9c32 <usb_serial_class::available()+0x26>
    9c1a:	90 e0       	ldi	r25, 0x00	; 0
    9c1c:	8f bf       	out	0x3f, r24	; 63
    9c1e:	20 85       	ldd	r18, Z+8	; 0x08
    9c20:	31 85       	ldd	r19, Z+9	; 0x09
    9c22:	37 fd       	sbrc	r19, 7
    9c24:	03 c0       	rjmp	.+6      	; 0x9c2c <usb_serial_class::available()+0x20>
    9c26:	9f 3f       	cpi	r25, 0xFF	; 255
    9c28:	09 f0       	breq	.+2      	; 0x9c2c <usb_serial_class::available()+0x20>
    9c2a:	9f 5f       	subi	r25, 0xFF	; 255
    9c2c:	89 2f       	mov	r24, r25
    9c2e:	90 e0       	ldi	r25, 0x00	; 0
    9c30:	08 95       	ret
    9c32:	93 e0       	ldi	r25, 0x03	; 3
    9c34:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9c38:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9c3c:	91 11       	cpse	r25, r1
    9c3e:	ee cf       	rjmp	.-36     	; 0x9c1c <usb_serial_class::available()+0x10>
    9c40:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9c44:	22 ff       	sbrs	r18, 2
    9c46:	e9 cf       	rjmp	.-46     	; 0x9c1a <usb_serial_class::available()+0xe>
    9c48:	25 fd       	sbrc	r18, 5
    9c4a:	e7 cf       	rjmp	.-50     	; 0x9c1a <usb_serial_class::available()+0xe>
    9c4c:	2b e6       	ldi	r18, 0x6B	; 107
    9c4e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9c52:	e4 cf       	rjmp	.-56     	; 0x9c1c <usb_serial_class::available()+0x10>

00009c54 <usb_serial_class::peek()>:
    9c54:	cf 93       	push	r28
    9c56:	df 93       	push	r29
    9c58:	ec 01       	movw	r28, r24
    9c5a:	88 85       	ldd	r24, Y+8	; 0x08
    9c5c:	99 85       	ldd	r25, Y+9	; 0x09
    9c5e:	97 ff       	sbrs	r25, 7
    9c60:	09 c0       	rjmp	.+18     	; 0x9c74 <usb_serial_class::peek()+0x20>
    9c62:	e8 81       	ld	r30, Y
    9c64:	f9 81       	ldd	r31, Y+1	; 0x01
    9c66:	02 84       	ldd	r0, Z+10	; 0x0a
    9c68:	f3 85       	ldd	r31, Z+11	; 0x0b
    9c6a:	e0 2d       	mov	r30, r0
    9c6c:	ce 01       	movw	r24, r28
    9c6e:	09 95       	icall
    9c70:	99 87       	std	Y+9, r25	; 0x09
    9c72:	88 87       	std	Y+8, r24	; 0x08
    9c74:	88 85       	ldd	r24, Y+8	; 0x08
    9c76:	99 85       	ldd	r25, Y+9	; 0x09
    9c78:	df 91       	pop	r29
    9c7a:	cf 91       	pop	r28
    9c7c:	08 95       	ret

00009c7e <usb_serial_class::read()>:
    9c7e:	fc 01       	movw	r30, r24
    9c80:	20 85       	ldd	r18, Z+8	; 0x08
    9c82:	31 85       	ldd	r19, Z+9	; 0x09
    9c84:	37 fd       	sbrc	r19, 7
    9c86:	07 c0       	rjmp	.+14     	; 0x9c96 <usb_serial_class::read()+0x18>
    9c88:	4f ef       	ldi	r20, 0xFF	; 255
    9c8a:	5f ef       	ldi	r21, 0xFF	; 255
    9c8c:	51 87       	std	Z+9, r21	; 0x09
    9c8e:	40 87       	std	Z+8, r20	; 0x08
    9c90:	c9 01       	movw	r24, r18
    9c92:	99 27       	eor	r25, r25
    9c94:	08 95       	ret
    9c96:	9f b7       	in	r25, 0x3f	; 63
    9c98:	f8 94       	cli
    9c9a:	80 91 78 11 	lds	r24, 0x1178	; 0x801178 <usb_configuration>
    9c9e:	81 11       	cpse	r24, r1
    9ca0:	04 c0       	rjmp	.+8      	; 0x9caa <usb_serial_class::read()+0x2c>
    9ca2:	9f bf       	out	0x3f, r25	; 63
    9ca4:	8f ef       	ldi	r24, 0xFF	; 255
    9ca6:	9f ef       	ldi	r25, 0xFF	; 255
    9ca8:	08 95       	ret
    9caa:	83 e0       	ldi	r24, 0x03	; 3
    9cac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9cb0:	2b e6       	ldi	r18, 0x6B	; 107
    9cb2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9cb6:	85 fd       	sbrc	r24, 5
    9cb8:	05 c0       	rjmp	.+10     	; 0x9cc4 <usb_serial_class::read()+0x46>
    9cba:	82 ff       	sbrs	r24, 2
    9cbc:	f2 cf       	rjmp	.-28     	; 0x9ca2 <usb_serial_class::read()+0x24>
    9cbe:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9cc2:	f7 cf       	rjmp	.-18     	; 0x9cb2 <usb_serial_class::read()+0x34>
    9cc4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    9cc8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9ccc:	25 fd       	sbrc	r18, 5
    9cce:	03 c0       	rjmp	.+6      	; 0x9cd6 <usb_serial_class::read()+0x58>
    9cd0:	2b e6       	ldi	r18, 0x6B	; 107
    9cd2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9cd6:	9f bf       	out	0x3f, r25	; 63
    9cd8:	90 e0       	ldi	r25, 0x00	; 0
    9cda:	08 95       	ret

00009cdc <usb_serial_class::availableForWrite()>:
    9cdc:	80 91 78 11 	lds	r24, 0x1178	; 0x801178 <usb_configuration>
    9ce0:	88 23       	and	r24, r24
    9ce2:	61 f0       	breq	.+24     	; 0x9cfc <usb_serial_class::availableForWrite()+0x20>
    9ce4:	8f b7       	in	r24, 0x3f	; 63
    9ce6:	f8 94       	cli
    9ce8:	94 e0       	ldi	r25, 0x04	; 4
    9cea:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9cee:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9cf2:	8f bf       	out	0x3f, r24	; 63
    9cf4:	80 e4       	ldi	r24, 0x40	; 64
    9cf6:	89 1b       	sub	r24, r25
    9cf8:	90 e0       	ldi	r25, 0x00	; 0
    9cfa:	08 95       	ret
    9cfc:	90 e0       	ldi	r25, 0x00	; 0
    9cfe:	80 e0       	ldi	r24, 0x00	; 0
    9d00:	08 95       	ret

00009d02 <usb_serial_class::write(unsigned char const*, unsigned int)>:
    9d02:	bf 92       	push	r11
    9d04:	cf 92       	push	r12
    9d06:	df 92       	push	r13
    9d08:	ef 92       	push	r14
    9d0a:	ff 92       	push	r15
    9d0c:	0f 93       	push	r16
    9d0e:	1f 93       	push	r17
    9d10:	cf 93       	push	r28
    9d12:	df 93       	push	r29
    9d14:	7c 01       	movw	r14, r24
    9d16:	80 91 78 11 	lds	r24, 0x1178	; 0x801178 <usb_configuration>
    9d1a:	81 11       	cpse	r24, r1
    9d1c:	10 c0       	rjmp	.+32     	; 0x9d3e <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    9d1e:	81 e0       	ldi	r24, 0x01	; 1
    9d20:	f7 01       	movw	r30, r14
    9d22:	82 83       	std	Z+2, r24	; 0x02
    9d24:	10 e0       	ldi	r17, 0x00	; 0
    9d26:	00 e0       	ldi	r16, 0x00	; 0
    9d28:	c8 01       	movw	r24, r16
    9d2a:	df 91       	pop	r29
    9d2c:	cf 91       	pop	r28
    9d2e:	1f 91       	pop	r17
    9d30:	0f 91       	pop	r16
    9d32:	ff 90       	pop	r15
    9d34:	ef 90       	pop	r14
    9d36:	df 90       	pop	r13
    9d38:	cf 90       	pop	r12
    9d3a:	bf 90       	pop	r11
    9d3c:	08 95       	ret
    9d3e:	2f b7       	in	r18, 0x3f	; 63
    9d40:	f8 94       	cli
    9d42:	84 e0       	ldi	r24, 0x04	; 4
    9d44:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9d48:	80 91 f2 10 	lds	r24, 0x10F2	; 0x8010f2 <transmit_previous_timeout>
    9d4c:	88 23       	and	r24, r24
    9d4e:	41 f0       	breq	.+16     	; 0x9d60 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    9d50:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9d54:	85 fd       	sbrc	r24, 5
    9d56:	02 c0       	rjmp	.+4      	; 0x9d5c <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    9d58:	2f bf       	out	0x3f, r18	; 63
    9d5a:	e1 cf       	rjmp	.-62     	; 0x9d1e <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    9d5c:	10 92 f2 10 	sts	0x10F2, r1	; 0x8010f2 <transmit_previous_timeout>
    9d60:	10 e0       	ldi	r17, 0x00	; 0
    9d62:	00 e0       	ldi	r16, 0x00	; 0
    9d64:	84 e0       	ldi	r24, 0x04	; 4
    9d66:	d8 2e       	mov	r13, r24
    9d68:	90 e4       	ldi	r25, 0x40	; 64
    9d6a:	c9 2e       	mov	r12, r25
    9d6c:	a1 ef       	ldi	r26, 0xF1	; 241
    9d6e:	b0 e0       	ldi	r27, 0x00	; 0
    9d70:	3a e3       	ldi	r19, 0x3A	; 58
    9d72:	b3 2e       	mov	r11, r19
    9d74:	33 e0       	ldi	r19, 0x03	; 3
    9d76:	41 15       	cp	r20, r1
    9d78:	51 05       	cpc	r21, r1
    9d7a:	09 f4       	brne	.+2      	; 0x9d7e <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    9d7c:	c0 c0       	rjmp	.+384    	; 0x9efe <L548end+0x12>
    9d7e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    9d82:	81 5f       	subi	r24, 0xF1	; 241
    9d84:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9d88:	95 fd       	sbrc	r25, 5
    9d8a:	16 c0       	rjmp	.+44     	; 0x9db8 <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    9d8c:	2f bf       	out	0x3f, r18	; 63
    9d8e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    9d92:	89 13       	cpse	r24, r25
    9d94:	06 c0       	rjmp	.+12     	; 0x9da2 <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    9d96:	81 e0       	ldi	r24, 0x01	; 1
    9d98:	80 93 f2 10 	sts	0x10F2, r24	; 0x8010f2 <transmit_previous_timeout>
    9d9c:	f7 01       	movw	r30, r14
    9d9e:	82 83       	std	Z+2, r24	; 0x02
    9da0:	c3 cf       	rjmp	.-122    	; 0x9d28 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    9da2:	90 91 78 11 	lds	r25, 0x1178	; 0x801178 <usb_configuration>
    9da6:	91 11       	cpse	r25, r1
    9da8:	02 c0       	rjmp	.+4      	; 0x9dae <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    9daa:	81 e0       	ldi	r24, 0x01	; 1
    9dac:	f7 cf       	rjmp	.-18     	; 0x9d9c <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    9dae:	2f b7       	in	r18, 0x3f	; 63
    9db0:	f8 94       	cli
    9db2:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9db6:	e6 cf       	rjmp	.-52     	; 0x9d84 <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    9db8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    9dbc:	9c 2d       	mov	r25, r12
    9dbe:	98 1b       	sub	r25, r24
    9dc0:	94 17       	cp	r25, r20
    9dc2:	15 06       	cpc	r1, r21
    9dc4:	11 f0       	breq	.+4      	; 0x9dca <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    9dc6:	08 f0       	brcs	.+2      	; 0x9dca <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    9dc8:	94 2f       	mov	r25, r20
    9dca:	e9 2f       	mov	r30, r25
    9dcc:	f0 e0       	ldi	r31, 0x00	; 0
    9dce:	4e 1b       	sub	r20, r30
    9dd0:	5f 0b       	sbc	r21, r31
    9dd2:	0e 0f       	add	r16, r30
    9dd4:	1f 1f       	adc	r17, r31
    9dd6:	eb 01       	movw	r28, r22

00009dd8 <L548begin>:
    9dd8:	e0 e4       	ldi	r30, 0x40	; 64
    9dda:	e9 1b       	sub	r30, r25
    9ddc:	e0 34       	cpi	r30, 0x40	; 64
    9dde:	28 f4       	brcc	.+10     	; 0x9dea <L548err>
    9de0:	ee 0f       	add	r30, r30
    9de2:	ff 27       	eor	r31, r31
    9de4:	ea 50       	subi	r30, 0x0A	; 10
    9de6:	f1 4b       	sbci	r31, 0xB1	; 177
    9de8:	09 94       	ijmp

00009dea <L548err>:
    9dea:	80 c0       	rjmp	.+256    	; 0x9eec <L548end>

00009dec <L548table>:
    9dec:	99 91       	ld	r25, Y+
    9dee:	9c 93       	st	X, r25
    9df0:	99 91       	ld	r25, Y+
    9df2:	9c 93       	st	X, r25
    9df4:	99 91       	ld	r25, Y+
    9df6:	9c 93       	st	X, r25
    9df8:	99 91       	ld	r25, Y+
    9dfa:	9c 93       	st	X, r25
    9dfc:	99 91       	ld	r25, Y+
    9dfe:	9c 93       	st	X, r25
    9e00:	99 91       	ld	r25, Y+
    9e02:	9c 93       	st	X, r25
    9e04:	99 91       	ld	r25, Y+
    9e06:	9c 93       	st	X, r25
    9e08:	99 91       	ld	r25, Y+
    9e0a:	9c 93       	st	X, r25
    9e0c:	99 91       	ld	r25, Y+
    9e0e:	9c 93       	st	X, r25
    9e10:	99 91       	ld	r25, Y+
    9e12:	9c 93       	st	X, r25
    9e14:	99 91       	ld	r25, Y+
    9e16:	9c 93       	st	X, r25
    9e18:	99 91       	ld	r25, Y+
    9e1a:	9c 93       	st	X, r25
    9e1c:	99 91       	ld	r25, Y+
    9e1e:	9c 93       	st	X, r25
    9e20:	99 91       	ld	r25, Y+
    9e22:	9c 93       	st	X, r25
    9e24:	99 91       	ld	r25, Y+
    9e26:	9c 93       	st	X, r25
    9e28:	99 91       	ld	r25, Y+
    9e2a:	9c 93       	st	X, r25
    9e2c:	99 91       	ld	r25, Y+
    9e2e:	9c 93       	st	X, r25
    9e30:	99 91       	ld	r25, Y+
    9e32:	9c 93       	st	X, r25
    9e34:	99 91       	ld	r25, Y+
    9e36:	9c 93       	st	X, r25
    9e38:	99 91       	ld	r25, Y+
    9e3a:	9c 93       	st	X, r25
    9e3c:	99 91       	ld	r25, Y+
    9e3e:	9c 93       	st	X, r25
    9e40:	99 91       	ld	r25, Y+
    9e42:	9c 93       	st	X, r25
    9e44:	99 91       	ld	r25, Y+
    9e46:	9c 93       	st	X, r25
    9e48:	99 91       	ld	r25, Y+
    9e4a:	9c 93       	st	X, r25
    9e4c:	99 91       	ld	r25, Y+
    9e4e:	9c 93       	st	X, r25
    9e50:	99 91       	ld	r25, Y+
    9e52:	9c 93       	st	X, r25
    9e54:	99 91       	ld	r25, Y+
    9e56:	9c 93       	st	X, r25
    9e58:	99 91       	ld	r25, Y+
    9e5a:	9c 93       	st	X, r25
    9e5c:	99 91       	ld	r25, Y+
    9e5e:	9c 93       	st	X, r25
    9e60:	99 91       	ld	r25, Y+
    9e62:	9c 93       	st	X, r25
    9e64:	99 91       	ld	r25, Y+
    9e66:	9c 93       	st	X, r25
    9e68:	99 91       	ld	r25, Y+
    9e6a:	9c 93       	st	X, r25
    9e6c:	99 91       	ld	r25, Y+
    9e6e:	9c 93       	st	X, r25
    9e70:	99 91       	ld	r25, Y+
    9e72:	9c 93       	st	X, r25
    9e74:	99 91       	ld	r25, Y+
    9e76:	9c 93       	st	X, r25
    9e78:	99 91       	ld	r25, Y+
    9e7a:	9c 93       	st	X, r25
    9e7c:	99 91       	ld	r25, Y+
    9e7e:	9c 93       	st	X, r25
    9e80:	99 91       	ld	r25, Y+
    9e82:	9c 93       	st	X, r25
    9e84:	99 91       	ld	r25, Y+
    9e86:	9c 93       	st	X, r25
    9e88:	99 91       	ld	r25, Y+
    9e8a:	9c 93       	st	X, r25
    9e8c:	99 91       	ld	r25, Y+
    9e8e:	9c 93       	st	X, r25
    9e90:	99 91       	ld	r25, Y+
    9e92:	9c 93       	st	X, r25
    9e94:	99 91       	ld	r25, Y+
    9e96:	9c 93       	st	X, r25
    9e98:	99 91       	ld	r25, Y+
    9e9a:	9c 93       	st	X, r25
    9e9c:	99 91       	ld	r25, Y+
    9e9e:	9c 93       	st	X, r25
    9ea0:	99 91       	ld	r25, Y+
    9ea2:	9c 93       	st	X, r25
    9ea4:	99 91       	ld	r25, Y+
    9ea6:	9c 93       	st	X, r25
    9ea8:	99 91       	ld	r25, Y+
    9eaa:	9c 93       	st	X, r25
    9eac:	99 91       	ld	r25, Y+
    9eae:	9c 93       	st	X, r25
    9eb0:	99 91       	ld	r25, Y+
    9eb2:	9c 93       	st	X, r25
    9eb4:	99 91       	ld	r25, Y+
    9eb6:	9c 93       	st	X, r25
    9eb8:	99 91       	ld	r25, Y+
    9eba:	9c 93       	st	X, r25
    9ebc:	99 91       	ld	r25, Y+
    9ebe:	9c 93       	st	X, r25
    9ec0:	99 91       	ld	r25, Y+
    9ec2:	9c 93       	st	X, r25
    9ec4:	99 91       	ld	r25, Y+
    9ec6:	9c 93       	st	X, r25
    9ec8:	99 91       	ld	r25, Y+
    9eca:	9c 93       	st	X, r25
    9ecc:	99 91       	ld	r25, Y+
    9ece:	9c 93       	st	X, r25
    9ed0:	99 91       	ld	r25, Y+
    9ed2:	9c 93       	st	X, r25
    9ed4:	99 91       	ld	r25, Y+
    9ed6:	9c 93       	st	X, r25
    9ed8:	99 91       	ld	r25, Y+
    9eda:	9c 93       	st	X, r25
    9edc:	99 91       	ld	r25, Y+
    9ede:	9c 93       	st	X, r25
    9ee0:	99 91       	ld	r25, Y+
    9ee2:	9c 93       	st	X, r25
    9ee4:	99 91       	ld	r25, Y+
    9ee6:	9c 93       	st	X, r25
    9ee8:	99 91       	ld	r25, Y+
    9eea:	9c 93       	st	X, r25

00009eec <L548end>:
    9eec:	be 01       	movw	r22, r28
    9eee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9ef2:	85 ff       	sbrs	r24, 5
    9ef4:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9ef8:	30 93 f4 10 	sts	0x10F4, r19	; 0x8010f4 <transmit_flush_timer>
    9efc:	3c cf       	rjmp	.-392    	; 0x9d76 <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    9efe:	2f bf       	out	0x3f, r18	; 63
    9f00:	13 cf       	rjmp	.-474    	; 0x9d28 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00009f02 <usb_serial_class::send_now()>:
    9f02:	8f b7       	in	r24, 0x3f	; 63
    9f04:	f8 94       	cli
    9f06:	90 91 78 11 	lds	r25, 0x1178	; 0x801178 <usb_configuration>
    9f0a:	99 23       	and	r25, r25
    9f0c:	61 f0       	breq	.+24     	; 0x9f26 <usb_serial_class::send_now()+0x24>
    9f0e:	90 91 f4 10 	lds	r25, 0x10F4	; 0x8010f4 <transmit_flush_timer>
    9f12:	99 23       	and	r25, r25
    9f14:	41 f0       	breq	.+16     	; 0x9f26 <usb_serial_class::send_now()+0x24>
    9f16:	94 e0       	ldi	r25, 0x04	; 4
    9f18:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    9f1c:	9a e3       	ldi	r25, 0x3A	; 58
    9f1e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    9f22:	10 92 f4 10 	sts	0x10F4, r1	; 0x8010f4 <transmit_flush_timer>
    9f26:	8f bf       	out	0x3f, r24	; 63
    9f28:	08 95       	ret

00009f2a <usb_serial_class::flush()>:
    9f2a:	eb cf       	rjmp	.-42     	; 0x9f02 <usb_serial_class::send_now()>

00009f2c <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    9f2c:	ea e6       	ldi	r30, 0x6A	; 106
    9f2e:	f1 e1       	ldi	r31, 0x11	; 17
    9f30:	11 86       	std	Z+9, r1	; 0x09
    9f32:	10 86       	std	Z+8, r1	; 0x08
    9f34:	12 82       	std	Z+2, r1	; 0x02
    9f36:	88 ee       	ldi	r24, 0xE8	; 232
    9f38:	93 e0       	ldi	r25, 0x03	; 3
    9f3a:	a0 e0       	ldi	r26, 0x00	; 0
    9f3c:	b0 e0       	ldi	r27, 0x00	; 0
    9f3e:	83 83       	std	Z+3, r24	; 0x03
    9f40:	94 83       	std	Z+4, r25	; 0x04
    9f42:	a5 83       	std	Z+5, r26	; 0x05
    9f44:	b6 83       	std	Z+6, r27	; 0x06
    9f46:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    9f48:	84 ed       	ldi	r24, 0xD4	; 212
    9f4a:	99 e0       	ldi	r25, 0x09	; 9
    9f4c:	91 83       	std	Z+1, r25	; 0x01
    9f4e:	80 83       	st	Z, r24
    9f50:	08 95       	ret

00009f52 <random(long)>:
    srandom(seed);
  }
}

long random(long howbig)
{
    9f52:	cf 92       	push	r12
    9f54:	df 92       	push	r13
    9f56:	ef 92       	push	r14
    9f58:	ff 92       	push	r15
    9f5a:	6b 01       	movw	r12, r22
    9f5c:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    9f5e:	c1 14       	cp	r12, r1
    9f60:	d1 04       	cpc	r13, r1
    9f62:	e1 04       	cpc	r14, r1
    9f64:	f1 04       	cpc	r15, r1
    9f66:	31 f0       	breq	.+12     	; 0x9f74 <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    9f68:	7a d3       	rcall	.+1780   	; 0xa65e <random>
    9f6a:	a7 01       	movw	r20, r14
    9f6c:	96 01       	movw	r18, r12
    9f6e:	ea d2       	rcall	.+1492   	; 0xa544 <__divmodsi4>
    9f70:	6b 01       	movw	r12, r22
    9f72:	7c 01       	movw	r14, r24
}
    9f74:	c7 01       	movw	r24, r14
    9f76:	b6 01       	movw	r22, r12
    9f78:	ff 90       	pop	r15
    9f7a:	ef 90       	pop	r14
    9f7c:	df 90       	pop	r13
    9f7e:	cf 90       	pop	r12
    9f80:	08 95       	ret

00009f82 <random(long, long)>:

long random(long howsmall, long howbig)
{
    9f82:	cf 92       	push	r12
    9f84:	df 92       	push	r13
    9f86:	ef 92       	push	r14
    9f88:	ff 92       	push	r15
    9f8a:	6b 01       	movw	r12, r22
    9f8c:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    9f8e:	c2 16       	cp	r12, r18
    9f90:	d3 06       	cpc	r13, r19
    9f92:	e4 06       	cpc	r14, r20
    9f94:	f5 06       	cpc	r15, r21
    9f96:	5c f4       	brge	.+22     	; 0x9fae <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    9f98:	ca 01       	movw	r24, r20
    9f9a:	b9 01       	movw	r22, r18
    9f9c:	6c 19       	sub	r22, r12
    9f9e:	7d 09       	sbc	r23, r13
    9fa0:	8e 09       	sbc	r24, r14
    9fa2:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    9fa4:	d6 df       	rcall	.-84     	; 0x9f52 <random(long)>
    9fa6:	c6 0e       	add	r12, r22
    9fa8:	d7 1e       	adc	r13, r23
    9faa:	e8 1e       	adc	r14, r24
    9fac:	f9 1e       	adc	r15, r25
}
    9fae:	c7 01       	movw	r24, r14
    9fb0:	b6 01       	movw	r22, r12
    9fb2:	ff 90       	pop	r15
    9fb4:	ef 90       	pop	r14
    9fb6:	df 90       	pop	r13
    9fb8:	cf 90       	pop	r12
    9fba:	08 95       	ret

00009fbc <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    9fbc:	4f 92       	push	r4
    9fbe:	5f 92       	push	r5
    9fc0:	6f 92       	push	r6
    9fc2:	7f 92       	push	r7
    9fc4:	af 92       	push	r10
    9fc6:	bf 92       	push	r11
    9fc8:	cf 92       	push	r12
    9fca:	df 92       	push	r13
    9fcc:	ef 92       	push	r14
    9fce:	ff 92       	push	r15
    9fd0:	0f 93       	push	r16
    9fd2:	1f 93       	push	r17
    9fd4:	cf 93       	push	r28
    9fd6:	df 93       	push	r29
    9fd8:	cd b7       	in	r28, 0x3d	; 61
    9fda:	de b7       	in	r29, 0x3e	; 62
    9fdc:	29 01       	movw	r4, r18
    9fde:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    9fe0:	9b 01       	movw	r18, r22
    9fe2:	ac 01       	movw	r20, r24
    9fe4:	24 19       	sub	r18, r4
    9fe6:	35 09       	sbc	r19, r5
    9fe8:	46 09       	sbc	r20, r6
    9fea:	57 09       	sbc	r21, r7
    9fec:	89 89       	ldd	r24, Y+17	; 0x11
    9fee:	9a 89       	ldd	r25, Y+18	; 0x12
    9ff0:	ab 89       	ldd	r26, Y+19	; 0x13
    9ff2:	bc 89       	ldd	r27, Y+20	; 0x14
    9ff4:	bc 01       	movw	r22, r24
    9ff6:	cd 01       	movw	r24, r26
    9ff8:	6a 19       	sub	r22, r10
    9ffa:	7b 09       	sbc	r23, r11
    9ffc:	8c 09       	sbc	r24, r12
    9ffe:	9d 09       	sbc	r25, r13
    a000:	49 d2       	rcall	.+1170   	; 0xa494 <__mulsi3>
    a002:	a8 01       	movw	r20, r16
    a004:	97 01       	movw	r18, r14
    a006:	24 19       	sub	r18, r4
    a008:	35 09       	sbc	r19, r5
    a00a:	46 09       	sbc	r20, r6
    a00c:	57 09       	sbc	r21, r7
    a00e:	9a d2       	rcall	.+1332   	; 0xa544 <__divmodsi4>
    a010:	ca 01       	movw	r24, r20
    a012:	b9 01       	movw	r22, r18
    a014:	6a 0d       	add	r22, r10
    a016:	7b 1d       	adc	r23, r11
    a018:	8c 1d       	adc	r24, r12
    a01a:	9d 1d       	adc	r25, r13
}
    a01c:	df 91       	pop	r29
    a01e:	cf 91       	pop	r28
    a020:	1f 91       	pop	r17
    a022:	0f 91       	pop	r16
    a024:	ff 90       	pop	r15
    a026:	ef 90       	pop	r14
    a028:	df 90       	pop	r13
    a02a:	cf 90       	pop	r12
    a02c:	bf 90       	pop	r11
    a02e:	af 90       	pop	r10
    a030:	7f 90       	pop	r7
    a032:	6f 90       	pop	r6
    a034:	5f 90       	pop	r5
    a036:	4f 90       	pop	r4
    a038:	08 95       	ret

0000a03a <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    a03a:	fc 01       	movw	r30, r24
    a03c:	80 81       	ld	r24, Z
    a03e:	91 81       	ldd	r25, Z+1	; 0x01
    a040:	0c 94 fc 45 	jmp	0x8bf8	; 0x8bf8 <free>

0000a044 <String::changeBuffer(unsigned int)>:
    a044:	0f 93       	push	r16
    a046:	1f 93       	push	r17
    a048:	cf 93       	push	r28
    a04a:	df 93       	push	r29
    a04c:	ec 01       	movw	r28, r24
    a04e:	8b 01       	movw	r16, r22
    a050:	6f 5f       	subi	r22, 0xFF	; 255
    a052:	7f 4f       	sbci	r23, 0xFF	; 255
    a054:	88 81       	ld	r24, Y
    a056:	99 81       	ldd	r25, Y+1	; 0x01
    a058:	0e 94 85 46 	call	0x8d0a	; 0x8d0a <realloc>
    a05c:	00 97       	sbiw	r24, 0x00	; 0
    a05e:	51 f0       	breq	.+20     	; 0xa074 <String::changeBuffer(unsigned int)+0x30>
    a060:	99 83       	std	Y+1, r25	; 0x01
    a062:	88 83       	st	Y, r24
    a064:	1b 83       	std	Y+3, r17	; 0x03
    a066:	0a 83       	std	Y+2, r16	; 0x02
    a068:	81 e0       	ldi	r24, 0x01	; 1
    a06a:	df 91       	pop	r29
    a06c:	cf 91       	pop	r28
    a06e:	1f 91       	pop	r17
    a070:	0f 91       	pop	r16
    a072:	08 95       	ret
    a074:	80 e0       	ldi	r24, 0x00	; 0
    a076:	f9 cf       	rjmp	.-14     	; 0xa06a <String::changeBuffer(unsigned int)+0x26>

0000a078 <String::reserve(unsigned int)>:
    a078:	cf 93       	push	r28
    a07a:	df 93       	push	r29
    a07c:	fc 01       	movw	r30, r24
    a07e:	22 81       	ldd	r18, Z+2	; 0x02
    a080:	33 81       	ldd	r19, Z+3	; 0x03
    a082:	26 17       	cp	r18, r22
    a084:	37 07       	cpc	r19, r23
    a086:	20 f0       	brcs	.+8      	; 0xa090 <String::reserve(unsigned int)+0x18>
    a088:	81 e0       	ldi	r24, 0x01	; 1
    a08a:	df 91       	pop	r29
    a08c:	cf 91       	pop	r28
    a08e:	08 95       	ret
    a090:	ec 01       	movw	r28, r24
    a092:	d8 df       	rcall	.-80     	; 0xa044 <String::changeBuffer(unsigned int)>
    a094:	88 23       	and	r24, r24
    a096:	c9 f3       	breq	.-14     	; 0xa08a <String::reserve(unsigned int)+0x12>
    a098:	8c 81       	ldd	r24, Y+4	; 0x04
    a09a:	9d 81       	ldd	r25, Y+5	; 0x05
    a09c:	89 2b       	or	r24, r25
    a09e:	a1 f7       	brne	.-24     	; 0xa088 <String::reserve(unsigned int)+0x10>
    a0a0:	e8 81       	ld	r30, Y
    a0a2:	f9 81       	ldd	r31, Y+1	; 0x01
    a0a4:	10 82       	st	Z, r1
    a0a6:	f0 cf       	rjmp	.-32     	; 0xa088 <String::reserve(unsigned int)+0x10>

0000a0a8 <String::copy(char const*, unsigned int)>:
    a0a8:	ef 92       	push	r14
    a0aa:	ff 92       	push	r15
    a0ac:	0f 93       	push	r16
    a0ae:	1f 93       	push	r17
    a0b0:	cf 93       	push	r28
    a0b2:	df 93       	push	r29
    a0b4:	ec 01       	movw	r28, r24
    a0b6:	7b 01       	movw	r14, r22
    a0b8:	8a 01       	movw	r16, r20
    a0ba:	41 15       	cp	r20, r1
    a0bc:	51 05       	cpc	r21, r1
    a0be:	79 f4       	brne	.+30     	; 0xa0de <String::copy(char const*, unsigned int)+0x36>
    a0c0:	e8 81       	ld	r30, Y
    a0c2:	f9 81       	ldd	r31, Y+1	; 0x01
    a0c4:	30 97       	sbiw	r30, 0x00	; 0
    a0c6:	09 f0       	breq	.+2      	; 0xa0ca <String::copy(char const*, unsigned int)+0x22>
    a0c8:	10 82       	st	Z, r1
    a0ca:	1d 82       	std	Y+5, r1	; 0x05
    a0cc:	1c 82       	std	Y+4, r1	; 0x04
    a0ce:	ce 01       	movw	r24, r28
    a0d0:	df 91       	pop	r29
    a0d2:	cf 91       	pop	r28
    a0d4:	1f 91       	pop	r17
    a0d6:	0f 91       	pop	r16
    a0d8:	ff 90       	pop	r15
    a0da:	ef 90       	pop	r14
    a0dc:	08 95       	ret
    a0de:	ba 01       	movw	r22, r20
    a0e0:	cb df       	rcall	.-106    	; 0xa078 <String::reserve(unsigned int)>
    a0e2:	28 81       	ld	r18, Y
    a0e4:	39 81       	ldd	r19, Y+1	; 0x01
    a0e6:	81 11       	cpse	r24, r1
    a0e8:	0b c0       	rjmp	.+22     	; 0xa100 <String::copy(char const*, unsigned int)+0x58>
    a0ea:	21 15       	cp	r18, r1
    a0ec:	31 05       	cpc	r19, r1
    a0ee:	29 f0       	breq	.+10     	; 0xa0fa <String::copy(char const*, unsigned int)+0x52>
    a0f0:	c9 01       	movw	r24, r18
    a0f2:	0e 94 fc 45 	call	0x8bf8	; 0x8bf8 <free>
    a0f6:	19 82       	std	Y+1, r1	; 0x01
    a0f8:	18 82       	st	Y, r1
    a0fa:	1b 82       	std	Y+3, r1	; 0x03
    a0fc:	1a 82       	std	Y+2, r1	; 0x02
    a0fe:	e5 cf       	rjmp	.-54     	; 0xa0ca <String::copy(char const*, unsigned int)+0x22>
    a100:	1d 83       	std	Y+5, r17	; 0x05
    a102:	0c 83       	std	Y+4, r16	; 0x04
    a104:	b7 01       	movw	r22, r14
    a106:	c9 01       	movw	r24, r18
    a108:	08 d3       	rcall	.+1552   	; 0xa71a <strcpy>
    a10a:	e1 cf       	rjmp	.-62     	; 0xa0ce <String::copy(char const*, unsigned int)+0x26>

0000a10c <String::String(char const*)>:
    a10c:	fc 01       	movw	r30, r24
    a10e:	11 82       	std	Z+1, r1	; 0x01
    a110:	10 82       	st	Z, r1
    a112:	13 82       	std	Z+3, r1	; 0x03
    a114:	12 82       	std	Z+2, r1	; 0x02
    a116:	15 82       	std	Z+5, r1	; 0x05
    a118:	14 82       	std	Z+4, r1	; 0x04
    a11a:	16 82       	std	Z+6, r1	; 0x06
    a11c:	61 15       	cp	r22, r1
    a11e:	71 05       	cpc	r23, r1
    a120:	49 f0       	breq	.+18     	; 0xa134 <String::String(char const*)+0x28>
    a122:	fb 01       	movw	r30, r22
    a124:	01 90       	ld	r0, Z+
    a126:	00 20       	and	r0, r0
    a128:	e9 f7       	brne	.-6      	; 0xa124 <String::String(char const*)+0x18>
    a12a:	31 97       	sbiw	r30, 0x01	; 1
    a12c:	af 01       	movw	r20, r30
    a12e:	46 1b       	sub	r20, r22
    a130:	57 0b       	sbc	r21, r23
    a132:	ba cf       	rjmp	.-140    	; 0xa0a8 <String::copy(char const*, unsigned int)>
    a134:	08 95       	ret

0000a136 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    a136:	0f 93       	push	r16
    a138:	1f 93       	push	r17
    a13a:	cf 93       	push	r28
    a13c:	df 93       	push	r29
	if (!bufsize || !buf) return;
    a13e:	41 15       	cp	r20, r1
    a140:	51 05       	cpc	r21, r1
    a142:	59 f0       	breq	.+22     	; 0xa15a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    a144:	61 15       	cp	r22, r1
    a146:	71 05       	cpc	r23, r1
    a148:	41 f0       	breq	.+16     	; 0xa15a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    a14a:	fc 01       	movw	r30, r24
    a14c:	04 81       	ldd	r16, Z+4	; 0x04
    a14e:	15 81       	ldd	r17, Z+5	; 0x05
    a150:	20 17       	cp	r18, r16
    a152:	31 07       	cpc	r19, r17
    a154:	38 f0       	brcs	.+14     	; 0xa164 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    a156:	fb 01       	movw	r30, r22
    a158:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    a15a:	df 91       	pop	r29
    a15c:	cf 91       	pop	r28
    a15e:	1f 91       	pop	r17
    a160:	0f 91       	pop	r16
    a162:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    a164:	41 50       	subi	r20, 0x01	; 1
    a166:	51 09       	sbc	r21, r1
    a168:	02 1b       	sub	r16, r18
    a16a:	13 0b       	sbc	r17, r19
    a16c:	40 17       	cp	r20, r16
    a16e:	51 07       	cpc	r21, r17
    a170:	08 f4       	brcc	.+2      	; 0xa174 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    a172:	8a 01       	movw	r16, r20
    a174:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    a176:	fc 01       	movw	r30, r24
    a178:	60 81       	ld	r22, Z
    a17a:	71 81       	ldd	r23, Z+1	; 0x01
    a17c:	62 0f       	add	r22, r18
    a17e:	73 1f       	adc	r23, r19
    a180:	a8 01       	movw	r20, r16
    a182:	ce 01       	movw	r24, r28
    a184:	d1 d2       	rcall	.+1442   	; 0xa728 <strncpy>
	buf[n] = 0;
    a186:	c0 0f       	add	r28, r16
    a188:	d1 1f       	adc	r29, r17
    a18a:	18 82       	st	Y, r1
    a18c:	e6 cf       	rjmp	.-52     	; 0xa15a <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

0000a18e <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    a18e:	08 95       	ret

0000a190 <__subsf3>:
    a190:	50 58       	subi	r21, 0x80	; 128

0000a192 <__addsf3>:
    a192:	bb 27       	eor	r27, r27
    a194:	aa 27       	eor	r26, r26
    a196:	0e d0       	rcall	.+28     	; 0xa1b4 <__addsf3x>
    a198:	e0 c0       	rjmp	.+448    	; 0xa35a <__fp_round>
    a19a:	d1 d0       	rcall	.+418    	; 0xa33e <__fp_pscA>
    a19c:	30 f0       	brcs	.+12     	; 0xa1aa <__addsf3+0x18>
    a19e:	d6 d0       	rcall	.+428    	; 0xa34c <__fp_pscB>
    a1a0:	20 f0       	brcs	.+8      	; 0xa1aa <__addsf3+0x18>
    a1a2:	31 f4       	brne	.+12     	; 0xa1b0 <__addsf3+0x1e>
    a1a4:	9f 3f       	cpi	r25, 0xFF	; 255
    a1a6:	11 f4       	brne	.+4      	; 0xa1ac <__addsf3+0x1a>
    a1a8:	1e f4       	brtc	.+6      	; 0xa1b0 <__addsf3+0x1e>
    a1aa:	c6 c0       	rjmp	.+396    	; 0xa338 <__fp_nan>
    a1ac:	0e f4       	brtc	.+2      	; 0xa1b0 <__addsf3+0x1e>
    a1ae:	e0 95       	com	r30
    a1b0:	e7 fb       	bst	r30, 7
    a1b2:	bc c0       	rjmp	.+376    	; 0xa32c <__fp_inf>

0000a1b4 <__addsf3x>:
    a1b4:	e9 2f       	mov	r30, r25
    a1b6:	e2 d0       	rcall	.+452    	; 0xa37c <__fp_split3>
    a1b8:	80 f3       	brcs	.-32     	; 0xa19a <__addsf3+0x8>
    a1ba:	ba 17       	cp	r27, r26
    a1bc:	62 07       	cpc	r22, r18
    a1be:	73 07       	cpc	r23, r19
    a1c0:	84 07       	cpc	r24, r20
    a1c2:	95 07       	cpc	r25, r21
    a1c4:	18 f0       	brcs	.+6      	; 0xa1cc <__addsf3x+0x18>
    a1c6:	71 f4       	brne	.+28     	; 0xa1e4 <__addsf3x+0x30>
    a1c8:	9e f5       	brtc	.+102    	; 0xa230 <__addsf3x+0x7c>
    a1ca:	fa c0       	rjmp	.+500    	; 0xa3c0 <__fp_zero>
    a1cc:	0e f4       	brtc	.+2      	; 0xa1d0 <__addsf3x+0x1c>
    a1ce:	e0 95       	com	r30
    a1d0:	0b 2e       	mov	r0, r27
    a1d2:	ba 2f       	mov	r27, r26
    a1d4:	a0 2d       	mov	r26, r0
    a1d6:	0b 01       	movw	r0, r22
    a1d8:	b9 01       	movw	r22, r18
    a1da:	90 01       	movw	r18, r0
    a1dc:	0c 01       	movw	r0, r24
    a1de:	ca 01       	movw	r24, r20
    a1e0:	a0 01       	movw	r20, r0
    a1e2:	11 24       	eor	r1, r1
    a1e4:	ff 27       	eor	r31, r31
    a1e6:	59 1b       	sub	r21, r25
    a1e8:	99 f0       	breq	.+38     	; 0xa210 <__addsf3x+0x5c>
    a1ea:	59 3f       	cpi	r21, 0xF9	; 249
    a1ec:	50 f4       	brcc	.+20     	; 0xa202 <__addsf3x+0x4e>
    a1ee:	50 3e       	cpi	r21, 0xE0	; 224
    a1f0:	68 f1       	brcs	.+90     	; 0xa24c <__addsf3x+0x98>
    a1f2:	1a 16       	cp	r1, r26
    a1f4:	f0 40       	sbci	r31, 0x00	; 0
    a1f6:	a2 2f       	mov	r26, r18
    a1f8:	23 2f       	mov	r18, r19
    a1fa:	34 2f       	mov	r19, r20
    a1fc:	44 27       	eor	r20, r20
    a1fe:	58 5f       	subi	r21, 0xF8	; 248
    a200:	f3 cf       	rjmp	.-26     	; 0xa1e8 <__addsf3x+0x34>
    a202:	46 95       	lsr	r20
    a204:	37 95       	ror	r19
    a206:	27 95       	ror	r18
    a208:	a7 95       	ror	r26
    a20a:	f0 40       	sbci	r31, 0x00	; 0
    a20c:	53 95       	inc	r21
    a20e:	c9 f7       	brne	.-14     	; 0xa202 <__addsf3x+0x4e>
    a210:	7e f4       	brtc	.+30     	; 0xa230 <__addsf3x+0x7c>
    a212:	1f 16       	cp	r1, r31
    a214:	ba 0b       	sbc	r27, r26
    a216:	62 0b       	sbc	r22, r18
    a218:	73 0b       	sbc	r23, r19
    a21a:	84 0b       	sbc	r24, r20
    a21c:	ba f0       	brmi	.+46     	; 0xa24c <__addsf3x+0x98>
    a21e:	91 50       	subi	r25, 0x01	; 1
    a220:	a1 f0       	breq	.+40     	; 0xa24a <__addsf3x+0x96>
    a222:	ff 0f       	add	r31, r31
    a224:	bb 1f       	adc	r27, r27
    a226:	66 1f       	adc	r22, r22
    a228:	77 1f       	adc	r23, r23
    a22a:	88 1f       	adc	r24, r24
    a22c:	c2 f7       	brpl	.-16     	; 0xa21e <__addsf3x+0x6a>
    a22e:	0e c0       	rjmp	.+28     	; 0xa24c <__addsf3x+0x98>
    a230:	ba 0f       	add	r27, r26
    a232:	62 1f       	adc	r22, r18
    a234:	73 1f       	adc	r23, r19
    a236:	84 1f       	adc	r24, r20
    a238:	48 f4       	brcc	.+18     	; 0xa24c <__addsf3x+0x98>
    a23a:	87 95       	ror	r24
    a23c:	77 95       	ror	r23
    a23e:	67 95       	ror	r22
    a240:	b7 95       	ror	r27
    a242:	f7 95       	ror	r31
    a244:	9e 3f       	cpi	r25, 0xFE	; 254
    a246:	08 f0       	brcs	.+2      	; 0xa24a <__addsf3x+0x96>
    a248:	b3 cf       	rjmp	.-154    	; 0xa1b0 <__addsf3+0x1e>
    a24a:	93 95       	inc	r25
    a24c:	88 0f       	add	r24, r24
    a24e:	08 f0       	brcs	.+2      	; 0xa252 <__addsf3x+0x9e>
    a250:	99 27       	eor	r25, r25
    a252:	ee 0f       	add	r30, r30
    a254:	97 95       	ror	r25
    a256:	87 95       	ror	r24
    a258:	08 95       	ret

0000a25a <__fixunssfsi>:
    a25a:	98 d0       	rcall	.+304    	; 0xa38c <__fp_splitA>
    a25c:	88 f0       	brcs	.+34     	; 0xa280 <__fixunssfsi+0x26>
    a25e:	9f 57       	subi	r25, 0x7F	; 127
    a260:	90 f0       	brcs	.+36     	; 0xa286 <__fixunssfsi+0x2c>
    a262:	b9 2f       	mov	r27, r25
    a264:	99 27       	eor	r25, r25
    a266:	b7 51       	subi	r27, 0x17	; 23
    a268:	a0 f0       	brcs	.+40     	; 0xa292 <__fixunssfsi+0x38>
    a26a:	d1 f0       	breq	.+52     	; 0xa2a0 <__fixunssfsi+0x46>
    a26c:	66 0f       	add	r22, r22
    a26e:	77 1f       	adc	r23, r23
    a270:	88 1f       	adc	r24, r24
    a272:	99 1f       	adc	r25, r25
    a274:	1a f0       	brmi	.+6      	; 0xa27c <__fixunssfsi+0x22>
    a276:	ba 95       	dec	r27
    a278:	c9 f7       	brne	.-14     	; 0xa26c <__fixunssfsi+0x12>
    a27a:	12 c0       	rjmp	.+36     	; 0xa2a0 <__fixunssfsi+0x46>
    a27c:	b1 30       	cpi	r27, 0x01	; 1
    a27e:	81 f0       	breq	.+32     	; 0xa2a0 <__fixunssfsi+0x46>
    a280:	9f d0       	rcall	.+318    	; 0xa3c0 <__fp_zero>
    a282:	b1 e0       	ldi	r27, 0x01	; 1
    a284:	08 95       	ret
    a286:	9c c0       	rjmp	.+312    	; 0xa3c0 <__fp_zero>
    a288:	67 2f       	mov	r22, r23
    a28a:	78 2f       	mov	r23, r24
    a28c:	88 27       	eor	r24, r24
    a28e:	b8 5f       	subi	r27, 0xF8	; 248
    a290:	39 f0       	breq	.+14     	; 0xa2a0 <__fixunssfsi+0x46>
    a292:	b9 3f       	cpi	r27, 0xF9	; 249
    a294:	cc f3       	brlt	.-14     	; 0xa288 <__fixunssfsi+0x2e>
    a296:	86 95       	lsr	r24
    a298:	77 95       	ror	r23
    a29a:	67 95       	ror	r22
    a29c:	b3 95       	inc	r27
    a29e:	d9 f7       	brne	.-10     	; 0xa296 <__fixunssfsi+0x3c>
    a2a0:	3e f4       	brtc	.+14     	; 0xa2b0 <__fixunssfsi+0x56>
    a2a2:	90 95       	com	r25
    a2a4:	80 95       	com	r24
    a2a6:	70 95       	com	r23
    a2a8:	61 95       	neg	r22
    a2aa:	7f 4f       	sbci	r23, 0xFF	; 255
    a2ac:	8f 4f       	sbci	r24, 0xFF	; 255
    a2ae:	9f 4f       	sbci	r25, 0xFF	; 255
    a2b0:	08 95       	ret

0000a2b2 <__floatunsisf>:
    a2b2:	e8 94       	clt
    a2b4:	09 c0       	rjmp	.+18     	; 0xa2c8 <__floatsisf+0x12>

0000a2b6 <__floatsisf>:
    a2b6:	97 fb       	bst	r25, 7
    a2b8:	3e f4       	brtc	.+14     	; 0xa2c8 <__floatsisf+0x12>
    a2ba:	90 95       	com	r25
    a2bc:	80 95       	com	r24
    a2be:	70 95       	com	r23
    a2c0:	61 95       	neg	r22
    a2c2:	7f 4f       	sbci	r23, 0xFF	; 255
    a2c4:	8f 4f       	sbci	r24, 0xFF	; 255
    a2c6:	9f 4f       	sbci	r25, 0xFF	; 255
    a2c8:	99 23       	and	r25, r25
    a2ca:	a9 f0       	breq	.+42     	; 0xa2f6 <__floatsisf+0x40>
    a2cc:	f9 2f       	mov	r31, r25
    a2ce:	96 e9       	ldi	r25, 0x96	; 150
    a2d0:	bb 27       	eor	r27, r27
    a2d2:	93 95       	inc	r25
    a2d4:	f6 95       	lsr	r31
    a2d6:	87 95       	ror	r24
    a2d8:	77 95       	ror	r23
    a2da:	67 95       	ror	r22
    a2dc:	b7 95       	ror	r27
    a2de:	f1 11       	cpse	r31, r1
    a2e0:	f8 cf       	rjmp	.-16     	; 0xa2d2 <__floatsisf+0x1c>
    a2e2:	fa f4       	brpl	.+62     	; 0xa322 <__floatsisf+0x6c>
    a2e4:	bb 0f       	add	r27, r27
    a2e6:	11 f4       	brne	.+4      	; 0xa2ec <__floatsisf+0x36>
    a2e8:	60 ff       	sbrs	r22, 0
    a2ea:	1b c0       	rjmp	.+54     	; 0xa322 <__floatsisf+0x6c>
    a2ec:	6f 5f       	subi	r22, 0xFF	; 255
    a2ee:	7f 4f       	sbci	r23, 0xFF	; 255
    a2f0:	8f 4f       	sbci	r24, 0xFF	; 255
    a2f2:	9f 4f       	sbci	r25, 0xFF	; 255
    a2f4:	16 c0       	rjmp	.+44     	; 0xa322 <__floatsisf+0x6c>
    a2f6:	88 23       	and	r24, r24
    a2f8:	11 f0       	breq	.+4      	; 0xa2fe <__floatsisf+0x48>
    a2fa:	96 e9       	ldi	r25, 0x96	; 150
    a2fc:	11 c0       	rjmp	.+34     	; 0xa320 <__floatsisf+0x6a>
    a2fe:	77 23       	and	r23, r23
    a300:	21 f0       	breq	.+8      	; 0xa30a <__floatsisf+0x54>
    a302:	9e e8       	ldi	r25, 0x8E	; 142
    a304:	87 2f       	mov	r24, r23
    a306:	76 2f       	mov	r23, r22
    a308:	05 c0       	rjmp	.+10     	; 0xa314 <__floatsisf+0x5e>
    a30a:	66 23       	and	r22, r22
    a30c:	71 f0       	breq	.+28     	; 0xa32a <__floatsisf+0x74>
    a30e:	96 e8       	ldi	r25, 0x86	; 134
    a310:	86 2f       	mov	r24, r22
    a312:	70 e0       	ldi	r23, 0x00	; 0
    a314:	60 e0       	ldi	r22, 0x00	; 0
    a316:	2a f0       	brmi	.+10     	; 0xa322 <__floatsisf+0x6c>
    a318:	9a 95       	dec	r25
    a31a:	66 0f       	add	r22, r22
    a31c:	77 1f       	adc	r23, r23
    a31e:	88 1f       	adc	r24, r24
    a320:	da f7       	brpl	.-10     	; 0xa318 <__floatsisf+0x62>
    a322:	88 0f       	add	r24, r24
    a324:	96 95       	lsr	r25
    a326:	87 95       	ror	r24
    a328:	97 f9       	bld	r25, 7
    a32a:	08 95       	ret

0000a32c <__fp_inf>:
    a32c:	97 f9       	bld	r25, 7
    a32e:	9f 67       	ori	r25, 0x7F	; 127
    a330:	80 e8       	ldi	r24, 0x80	; 128
    a332:	70 e0       	ldi	r23, 0x00	; 0
    a334:	60 e0       	ldi	r22, 0x00	; 0
    a336:	08 95       	ret

0000a338 <__fp_nan>:
    a338:	9f ef       	ldi	r25, 0xFF	; 255
    a33a:	80 ec       	ldi	r24, 0xC0	; 192
    a33c:	08 95       	ret

0000a33e <__fp_pscA>:
    a33e:	00 24       	eor	r0, r0
    a340:	0a 94       	dec	r0
    a342:	16 16       	cp	r1, r22
    a344:	17 06       	cpc	r1, r23
    a346:	18 06       	cpc	r1, r24
    a348:	09 06       	cpc	r0, r25
    a34a:	08 95       	ret

0000a34c <__fp_pscB>:
    a34c:	00 24       	eor	r0, r0
    a34e:	0a 94       	dec	r0
    a350:	12 16       	cp	r1, r18
    a352:	13 06       	cpc	r1, r19
    a354:	14 06       	cpc	r1, r20
    a356:	05 06       	cpc	r0, r21
    a358:	08 95       	ret

0000a35a <__fp_round>:
    a35a:	09 2e       	mov	r0, r25
    a35c:	03 94       	inc	r0
    a35e:	00 0c       	add	r0, r0
    a360:	11 f4       	brne	.+4      	; 0xa366 <__fp_round+0xc>
    a362:	88 23       	and	r24, r24
    a364:	52 f0       	brmi	.+20     	; 0xa37a <__fp_round+0x20>
    a366:	bb 0f       	add	r27, r27
    a368:	40 f4       	brcc	.+16     	; 0xa37a <__fp_round+0x20>
    a36a:	bf 2b       	or	r27, r31
    a36c:	11 f4       	brne	.+4      	; 0xa372 <__fp_round+0x18>
    a36e:	60 ff       	sbrs	r22, 0
    a370:	04 c0       	rjmp	.+8      	; 0xa37a <__fp_round+0x20>
    a372:	6f 5f       	subi	r22, 0xFF	; 255
    a374:	7f 4f       	sbci	r23, 0xFF	; 255
    a376:	8f 4f       	sbci	r24, 0xFF	; 255
    a378:	9f 4f       	sbci	r25, 0xFF	; 255
    a37a:	08 95       	ret

0000a37c <__fp_split3>:
    a37c:	57 fd       	sbrc	r21, 7
    a37e:	90 58       	subi	r25, 0x80	; 128
    a380:	44 0f       	add	r20, r20
    a382:	55 1f       	adc	r21, r21
    a384:	59 f0       	breq	.+22     	; 0xa39c <__fp_splitA+0x10>
    a386:	5f 3f       	cpi	r21, 0xFF	; 255
    a388:	71 f0       	breq	.+28     	; 0xa3a6 <__fp_splitA+0x1a>
    a38a:	47 95       	ror	r20

0000a38c <__fp_splitA>:
    a38c:	88 0f       	add	r24, r24
    a38e:	97 fb       	bst	r25, 7
    a390:	99 1f       	adc	r25, r25
    a392:	61 f0       	breq	.+24     	; 0xa3ac <__fp_splitA+0x20>
    a394:	9f 3f       	cpi	r25, 0xFF	; 255
    a396:	79 f0       	breq	.+30     	; 0xa3b6 <__fp_splitA+0x2a>
    a398:	87 95       	ror	r24
    a39a:	08 95       	ret
    a39c:	12 16       	cp	r1, r18
    a39e:	13 06       	cpc	r1, r19
    a3a0:	14 06       	cpc	r1, r20
    a3a2:	55 1f       	adc	r21, r21
    a3a4:	f2 cf       	rjmp	.-28     	; 0xa38a <__fp_split3+0xe>
    a3a6:	46 95       	lsr	r20
    a3a8:	f1 df       	rcall	.-30     	; 0xa38c <__fp_splitA>
    a3aa:	08 c0       	rjmp	.+16     	; 0xa3bc <__fp_splitA+0x30>
    a3ac:	16 16       	cp	r1, r22
    a3ae:	17 06       	cpc	r1, r23
    a3b0:	18 06       	cpc	r1, r24
    a3b2:	99 1f       	adc	r25, r25
    a3b4:	f1 cf       	rjmp	.-30     	; 0xa398 <__fp_splitA+0xc>
    a3b6:	86 95       	lsr	r24
    a3b8:	71 05       	cpc	r23, r1
    a3ba:	61 05       	cpc	r22, r1
    a3bc:	08 94       	sec
    a3be:	08 95       	ret

0000a3c0 <__fp_zero>:
    a3c0:	e8 94       	clt

0000a3c2 <__fp_szero>:
    a3c2:	bb 27       	eor	r27, r27
    a3c4:	66 27       	eor	r22, r22
    a3c6:	77 27       	eor	r23, r23
    a3c8:	cb 01       	movw	r24, r22
    a3ca:	97 f9       	bld	r25, 7
    a3cc:	08 95       	ret

0000a3ce <__mulsf3>:
    a3ce:	0b d0       	rcall	.+22     	; 0xa3e6 <__mulsf3x>
    a3d0:	c4 cf       	rjmp	.-120    	; 0xa35a <__fp_round>
    a3d2:	b5 df       	rcall	.-150    	; 0xa33e <__fp_pscA>
    a3d4:	28 f0       	brcs	.+10     	; 0xa3e0 <__mulsf3+0x12>
    a3d6:	ba df       	rcall	.-140    	; 0xa34c <__fp_pscB>
    a3d8:	18 f0       	brcs	.+6      	; 0xa3e0 <__mulsf3+0x12>
    a3da:	95 23       	and	r25, r21
    a3dc:	09 f0       	breq	.+2      	; 0xa3e0 <__mulsf3+0x12>
    a3de:	a6 cf       	rjmp	.-180    	; 0xa32c <__fp_inf>
    a3e0:	ab cf       	rjmp	.-170    	; 0xa338 <__fp_nan>
    a3e2:	11 24       	eor	r1, r1
    a3e4:	ee cf       	rjmp	.-36     	; 0xa3c2 <__fp_szero>

0000a3e6 <__mulsf3x>:
    a3e6:	ca df       	rcall	.-108    	; 0xa37c <__fp_split3>
    a3e8:	a0 f3       	brcs	.-24     	; 0xa3d2 <__mulsf3+0x4>

0000a3ea <__mulsf3_pse>:
    a3ea:	95 9f       	mul	r25, r21
    a3ec:	d1 f3       	breq	.-12     	; 0xa3e2 <__mulsf3+0x14>
    a3ee:	95 0f       	add	r25, r21
    a3f0:	50 e0       	ldi	r21, 0x00	; 0
    a3f2:	55 1f       	adc	r21, r21
    a3f4:	62 9f       	mul	r22, r18
    a3f6:	f0 01       	movw	r30, r0
    a3f8:	72 9f       	mul	r23, r18
    a3fa:	bb 27       	eor	r27, r27
    a3fc:	f0 0d       	add	r31, r0
    a3fe:	b1 1d       	adc	r27, r1
    a400:	63 9f       	mul	r22, r19
    a402:	aa 27       	eor	r26, r26
    a404:	f0 0d       	add	r31, r0
    a406:	b1 1d       	adc	r27, r1
    a408:	aa 1f       	adc	r26, r26
    a40a:	64 9f       	mul	r22, r20
    a40c:	66 27       	eor	r22, r22
    a40e:	b0 0d       	add	r27, r0
    a410:	a1 1d       	adc	r26, r1
    a412:	66 1f       	adc	r22, r22
    a414:	82 9f       	mul	r24, r18
    a416:	22 27       	eor	r18, r18
    a418:	b0 0d       	add	r27, r0
    a41a:	a1 1d       	adc	r26, r1
    a41c:	62 1f       	adc	r22, r18
    a41e:	73 9f       	mul	r23, r19
    a420:	b0 0d       	add	r27, r0
    a422:	a1 1d       	adc	r26, r1
    a424:	62 1f       	adc	r22, r18
    a426:	83 9f       	mul	r24, r19
    a428:	a0 0d       	add	r26, r0
    a42a:	61 1d       	adc	r22, r1
    a42c:	22 1f       	adc	r18, r18
    a42e:	74 9f       	mul	r23, r20
    a430:	33 27       	eor	r19, r19
    a432:	a0 0d       	add	r26, r0
    a434:	61 1d       	adc	r22, r1
    a436:	23 1f       	adc	r18, r19
    a438:	84 9f       	mul	r24, r20
    a43a:	60 0d       	add	r22, r0
    a43c:	21 1d       	adc	r18, r1
    a43e:	82 2f       	mov	r24, r18
    a440:	76 2f       	mov	r23, r22
    a442:	6a 2f       	mov	r22, r26
    a444:	11 24       	eor	r1, r1
    a446:	9f 57       	subi	r25, 0x7F	; 127
    a448:	50 40       	sbci	r21, 0x00	; 0
    a44a:	8a f0       	brmi	.+34     	; 0xa46e <__mulsf3_pse+0x84>
    a44c:	e1 f0       	breq	.+56     	; 0xa486 <__mulsf3_pse+0x9c>
    a44e:	88 23       	and	r24, r24
    a450:	4a f0       	brmi	.+18     	; 0xa464 <__mulsf3_pse+0x7a>
    a452:	ee 0f       	add	r30, r30
    a454:	ff 1f       	adc	r31, r31
    a456:	bb 1f       	adc	r27, r27
    a458:	66 1f       	adc	r22, r22
    a45a:	77 1f       	adc	r23, r23
    a45c:	88 1f       	adc	r24, r24
    a45e:	91 50       	subi	r25, 0x01	; 1
    a460:	50 40       	sbci	r21, 0x00	; 0
    a462:	a9 f7       	brne	.-22     	; 0xa44e <__mulsf3_pse+0x64>
    a464:	9e 3f       	cpi	r25, 0xFE	; 254
    a466:	51 05       	cpc	r21, r1
    a468:	70 f0       	brcs	.+28     	; 0xa486 <__mulsf3_pse+0x9c>
    a46a:	60 cf       	rjmp	.-320    	; 0xa32c <__fp_inf>
    a46c:	aa cf       	rjmp	.-172    	; 0xa3c2 <__fp_szero>
    a46e:	5f 3f       	cpi	r21, 0xFF	; 255
    a470:	ec f3       	brlt	.-6      	; 0xa46c <__mulsf3_pse+0x82>
    a472:	98 3e       	cpi	r25, 0xE8	; 232
    a474:	dc f3       	brlt	.-10     	; 0xa46c <__mulsf3_pse+0x82>
    a476:	86 95       	lsr	r24
    a478:	77 95       	ror	r23
    a47a:	67 95       	ror	r22
    a47c:	b7 95       	ror	r27
    a47e:	f7 95       	ror	r31
    a480:	e7 95       	ror	r30
    a482:	9f 5f       	subi	r25, 0xFF	; 255
    a484:	c1 f7       	brne	.-16     	; 0xa476 <__mulsf3_pse+0x8c>
    a486:	fe 2b       	or	r31, r30
    a488:	88 0f       	add	r24, r24
    a48a:	91 1d       	adc	r25, r1
    a48c:	96 95       	lsr	r25
    a48e:	87 95       	ror	r24
    a490:	97 f9       	bld	r25, 7
    a492:	08 95       	ret

0000a494 <__mulsi3>:
    a494:	db 01       	movw	r26, r22
    a496:	8f 93       	push	r24
    a498:	9f 93       	push	r25
    a49a:	8e d0       	rcall	.+284    	; 0xa5b8 <__muluhisi3>
    a49c:	bf 91       	pop	r27
    a49e:	af 91       	pop	r26
    a4a0:	a2 9f       	mul	r26, r18
    a4a2:	80 0d       	add	r24, r0
    a4a4:	91 1d       	adc	r25, r1
    a4a6:	a3 9f       	mul	r26, r19
    a4a8:	90 0d       	add	r25, r0
    a4aa:	b2 9f       	mul	r27, r18
    a4ac:	90 0d       	add	r25, r0
    a4ae:	11 24       	eor	r1, r1
    a4b0:	08 95       	ret

0000a4b2 <__udivmodhi4>:
    a4b2:	aa 1b       	sub	r26, r26
    a4b4:	bb 1b       	sub	r27, r27
    a4b6:	51 e1       	ldi	r21, 0x11	; 17
    a4b8:	07 c0       	rjmp	.+14     	; 0xa4c8 <__udivmodhi4_ep>

0000a4ba <__udivmodhi4_loop>:
    a4ba:	aa 1f       	adc	r26, r26
    a4bc:	bb 1f       	adc	r27, r27
    a4be:	a6 17       	cp	r26, r22
    a4c0:	b7 07       	cpc	r27, r23
    a4c2:	10 f0       	brcs	.+4      	; 0xa4c8 <__udivmodhi4_ep>
    a4c4:	a6 1b       	sub	r26, r22
    a4c6:	b7 0b       	sbc	r27, r23

0000a4c8 <__udivmodhi4_ep>:
    a4c8:	88 1f       	adc	r24, r24
    a4ca:	99 1f       	adc	r25, r25
    a4cc:	5a 95       	dec	r21
    a4ce:	a9 f7       	brne	.-22     	; 0xa4ba <__udivmodhi4_loop>
    a4d0:	80 95       	com	r24
    a4d2:	90 95       	com	r25
    a4d4:	bc 01       	movw	r22, r24
    a4d6:	cd 01       	movw	r24, r26
    a4d8:	08 95       	ret

0000a4da <__divmodhi4>:
    a4da:	97 fb       	bst	r25, 7
    a4dc:	07 2e       	mov	r0, r23
    a4de:	16 f4       	brtc	.+4      	; 0xa4e4 <__divmodhi4+0xa>
    a4e0:	00 94       	com	r0
    a4e2:	06 d0       	rcall	.+12     	; 0xa4f0 <__divmodhi4_neg1>
    a4e4:	77 fd       	sbrc	r23, 7
    a4e6:	08 d0       	rcall	.+16     	; 0xa4f8 <__divmodhi4_neg2>
    a4e8:	e4 df       	rcall	.-56     	; 0xa4b2 <__udivmodhi4>
    a4ea:	07 fc       	sbrc	r0, 7
    a4ec:	05 d0       	rcall	.+10     	; 0xa4f8 <__divmodhi4_neg2>
    a4ee:	3e f4       	brtc	.+14     	; 0xa4fe <__divmodhi4_exit>

0000a4f0 <__divmodhi4_neg1>:
    a4f0:	90 95       	com	r25
    a4f2:	81 95       	neg	r24
    a4f4:	9f 4f       	sbci	r25, 0xFF	; 255
    a4f6:	08 95       	ret

0000a4f8 <__divmodhi4_neg2>:
    a4f8:	70 95       	com	r23
    a4fa:	61 95       	neg	r22
    a4fc:	7f 4f       	sbci	r23, 0xFF	; 255

0000a4fe <__divmodhi4_exit>:
    a4fe:	08 95       	ret

0000a500 <__udivmodsi4>:
    a500:	a1 e2       	ldi	r26, 0x21	; 33
    a502:	1a 2e       	mov	r1, r26
    a504:	aa 1b       	sub	r26, r26
    a506:	bb 1b       	sub	r27, r27
    a508:	fd 01       	movw	r30, r26
    a50a:	0d c0       	rjmp	.+26     	; 0xa526 <__udivmodsi4_ep>

0000a50c <__udivmodsi4_loop>:
    a50c:	aa 1f       	adc	r26, r26
    a50e:	bb 1f       	adc	r27, r27
    a510:	ee 1f       	adc	r30, r30
    a512:	ff 1f       	adc	r31, r31
    a514:	a2 17       	cp	r26, r18
    a516:	b3 07       	cpc	r27, r19
    a518:	e4 07       	cpc	r30, r20
    a51a:	f5 07       	cpc	r31, r21
    a51c:	20 f0       	brcs	.+8      	; 0xa526 <__udivmodsi4_ep>
    a51e:	a2 1b       	sub	r26, r18
    a520:	b3 0b       	sbc	r27, r19
    a522:	e4 0b       	sbc	r30, r20
    a524:	f5 0b       	sbc	r31, r21

0000a526 <__udivmodsi4_ep>:
    a526:	66 1f       	adc	r22, r22
    a528:	77 1f       	adc	r23, r23
    a52a:	88 1f       	adc	r24, r24
    a52c:	99 1f       	adc	r25, r25
    a52e:	1a 94       	dec	r1
    a530:	69 f7       	brne	.-38     	; 0xa50c <__udivmodsi4_loop>
    a532:	60 95       	com	r22
    a534:	70 95       	com	r23
    a536:	80 95       	com	r24
    a538:	90 95       	com	r25
    a53a:	9b 01       	movw	r18, r22
    a53c:	ac 01       	movw	r20, r24
    a53e:	bd 01       	movw	r22, r26
    a540:	cf 01       	movw	r24, r30
    a542:	08 95       	ret

0000a544 <__divmodsi4>:
    a544:	05 2e       	mov	r0, r21
    a546:	97 fb       	bst	r25, 7
    a548:	16 f4       	brtc	.+4      	; 0xa54e <__divmodsi4+0xa>
    a54a:	00 94       	com	r0
    a54c:	0f d0       	rcall	.+30     	; 0xa56c <__negsi2>
    a54e:	57 fd       	sbrc	r21, 7
    a550:	05 d0       	rcall	.+10     	; 0xa55c <__divmodsi4_neg2>
    a552:	d6 df       	rcall	.-84     	; 0xa500 <__udivmodsi4>
    a554:	07 fc       	sbrc	r0, 7
    a556:	02 d0       	rcall	.+4      	; 0xa55c <__divmodsi4_neg2>
    a558:	46 f4       	brtc	.+16     	; 0xa56a <__divmodsi4_exit>
    a55a:	08 c0       	rjmp	.+16     	; 0xa56c <__negsi2>

0000a55c <__divmodsi4_neg2>:
    a55c:	50 95       	com	r21
    a55e:	40 95       	com	r20
    a560:	30 95       	com	r19
    a562:	21 95       	neg	r18
    a564:	3f 4f       	sbci	r19, 0xFF	; 255
    a566:	4f 4f       	sbci	r20, 0xFF	; 255
    a568:	5f 4f       	sbci	r21, 0xFF	; 255

0000a56a <__divmodsi4_exit>:
    a56a:	08 95       	ret

0000a56c <__negsi2>:
    a56c:	90 95       	com	r25
    a56e:	80 95       	com	r24
    a570:	70 95       	com	r23
    a572:	61 95       	neg	r22
    a574:	7f 4f       	sbci	r23, 0xFF	; 255
    a576:	8f 4f       	sbci	r24, 0xFF	; 255
    a578:	9f 4f       	sbci	r25, 0xFF	; 255
    a57a:	08 95       	ret

0000a57c <__tablejump2__>:
    a57c:	ee 0f       	add	r30, r30
    a57e:	ff 1f       	adc	r31, r31
    a580:	00 24       	eor	r0, r0
    a582:	00 1c       	adc	r0, r0
    a584:	0b be       	out	0x3b, r0	; 59
    a586:	07 90       	elpm	r0, Z+
    a588:	f6 91       	elpm	r31, Z
    a58a:	e0 2d       	mov	r30, r0
    a58c:	09 94       	ijmp

0000a58e <__umulhisi3>:
    a58e:	a2 9f       	mul	r26, r18
    a590:	b0 01       	movw	r22, r0
    a592:	b3 9f       	mul	r27, r19
    a594:	c0 01       	movw	r24, r0
    a596:	a3 9f       	mul	r26, r19
    a598:	70 0d       	add	r23, r0
    a59a:	81 1d       	adc	r24, r1
    a59c:	11 24       	eor	r1, r1
    a59e:	91 1d       	adc	r25, r1
    a5a0:	b2 9f       	mul	r27, r18
    a5a2:	70 0d       	add	r23, r0
    a5a4:	81 1d       	adc	r24, r1
    a5a6:	11 24       	eor	r1, r1
    a5a8:	91 1d       	adc	r25, r1
    a5aa:	08 95       	ret

0000a5ac <__usmulhisi3>:
    a5ac:	f0 df       	rcall	.-32     	; 0xa58e <__umulhisi3>

0000a5ae <__usmulhisi3_tail>:
    a5ae:	b7 ff       	sbrs	r27, 7
    a5b0:	08 95       	ret
    a5b2:	82 1b       	sub	r24, r18
    a5b4:	93 0b       	sbc	r25, r19
    a5b6:	08 95       	ret

0000a5b8 <__muluhisi3>:
    a5b8:	ea df       	rcall	.-44     	; 0xa58e <__umulhisi3>
    a5ba:	a5 9f       	mul	r26, r21
    a5bc:	90 0d       	add	r25, r0
    a5be:	b4 9f       	mul	r27, r20
    a5c0:	90 0d       	add	r25, r0
    a5c2:	a4 9f       	mul	r26, r20
    a5c4:	80 0d       	add	r24, r0
    a5c6:	91 1d       	adc	r25, r1
    a5c8:	11 24       	eor	r1, r1
    a5ca:	08 95       	ret

0000a5cc <random_r>:
    a5cc:	8f 92       	push	r8
    a5ce:	9f 92       	push	r9
    a5d0:	af 92       	push	r10
    a5d2:	bf 92       	push	r11
    a5d4:	cf 92       	push	r12
    a5d6:	df 92       	push	r13
    a5d8:	ef 92       	push	r14
    a5da:	ff 92       	push	r15
    a5dc:	cf 93       	push	r28
    a5de:	df 93       	push	r29
    a5e0:	ec 01       	movw	r28, r24
    a5e2:	68 81       	ld	r22, Y
    a5e4:	79 81       	ldd	r23, Y+1	; 0x01
    a5e6:	8a 81       	ldd	r24, Y+2	; 0x02
    a5e8:	9b 81       	ldd	r25, Y+3	; 0x03
    a5ea:	61 15       	cp	r22, r1
    a5ec:	71 05       	cpc	r23, r1
    a5ee:	81 05       	cpc	r24, r1
    a5f0:	91 05       	cpc	r25, r1
    a5f2:	21 f4       	brne	.+8      	; 0xa5fc <random_r+0x30>
    a5f4:	64 e2       	ldi	r22, 0x24	; 36
    a5f6:	79 ed       	ldi	r23, 0xD9	; 217
    a5f8:	8b e5       	ldi	r24, 0x5B	; 91
    a5fa:	97 e0       	ldi	r25, 0x07	; 7
    a5fc:	2d e1       	ldi	r18, 0x1D	; 29
    a5fe:	33 ef       	ldi	r19, 0xF3	; 243
    a600:	41 e0       	ldi	r20, 0x01	; 1
    a602:	50 e0       	ldi	r21, 0x00	; 0
    a604:	9f df       	rcall	.-194    	; 0xa544 <__divmodsi4>
    a606:	49 01       	movw	r8, r18
    a608:	5a 01       	movw	r10, r20
    a60a:	9b 01       	movw	r18, r22
    a60c:	ac 01       	movw	r20, r24
    a60e:	a7 ea       	ldi	r26, 0xA7	; 167
    a610:	b1 e4       	ldi	r27, 0x41	; 65
    a612:	d2 df       	rcall	.-92     	; 0xa5b8 <__muluhisi3>
    a614:	6b 01       	movw	r12, r22
    a616:	7c 01       	movw	r14, r24
    a618:	ac ee       	ldi	r26, 0xEC	; 236
    a61a:	b4 ef       	ldi	r27, 0xF4	; 244
    a61c:	a5 01       	movw	r20, r10
    a61e:	94 01       	movw	r18, r8
    a620:	94 d0       	rcall	.+296    	; 0xa74a <__mulohisi3>
    a622:	c6 0e       	add	r12, r22
    a624:	d7 1e       	adc	r13, r23
    a626:	e8 1e       	adc	r14, r24
    a628:	f9 1e       	adc	r15, r25
    a62a:	f7 fe       	sbrs	r15, 7
    a62c:	06 c0       	rjmp	.+12     	; 0xa63a <random_r+0x6e>
    a62e:	81 e0       	ldi	r24, 0x01	; 1
    a630:	c8 1a       	sub	r12, r24
    a632:	d1 08       	sbc	r13, r1
    a634:	e1 08       	sbc	r14, r1
    a636:	80 e8       	ldi	r24, 0x80	; 128
    a638:	f8 0a       	sbc	r15, r24
    a63a:	c8 82       	st	Y, r12
    a63c:	d9 82       	std	Y+1, r13	; 0x01
    a63e:	ea 82       	std	Y+2, r14	; 0x02
    a640:	fb 82       	std	Y+3, r15	; 0x03
    a642:	c7 01       	movw	r24, r14
    a644:	b6 01       	movw	r22, r12
    a646:	9f 77       	andi	r25, 0x7F	; 127
    a648:	df 91       	pop	r29
    a64a:	cf 91       	pop	r28
    a64c:	ff 90       	pop	r15
    a64e:	ef 90       	pop	r14
    a650:	df 90       	pop	r13
    a652:	cf 90       	pop	r12
    a654:	bf 90       	pop	r11
    a656:	af 90       	pop	r10
    a658:	9f 90       	pop	r9
    a65a:	8f 90       	pop	r8
    a65c:	08 95       	ret

0000a65e <random>:
    a65e:	8f 92       	push	r8
    a660:	9f 92       	push	r9
    a662:	af 92       	push	r10
    a664:	bf 92       	push	r11
    a666:	cf 92       	push	r12
    a668:	df 92       	push	r13
    a66a:	ef 92       	push	r14
    a66c:	ff 92       	push	r15
    a66e:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    a672:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    a676:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    a67a:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    a67e:	61 15       	cp	r22, r1
    a680:	71 05       	cpc	r23, r1
    a682:	81 05       	cpc	r24, r1
    a684:	91 05       	cpc	r25, r1
    a686:	21 f4       	brne	.+8      	; 0xa690 <random+0x32>
    a688:	64 e2       	ldi	r22, 0x24	; 36
    a68a:	79 ed       	ldi	r23, 0xD9	; 217
    a68c:	8b e5       	ldi	r24, 0x5B	; 91
    a68e:	97 e0       	ldi	r25, 0x07	; 7
    a690:	2d e1       	ldi	r18, 0x1D	; 29
    a692:	33 ef       	ldi	r19, 0xF3	; 243
    a694:	41 e0       	ldi	r20, 0x01	; 1
    a696:	50 e0       	ldi	r21, 0x00	; 0
    a698:	55 df       	rcall	.-342    	; 0xa544 <__divmodsi4>
    a69a:	49 01       	movw	r8, r18
    a69c:	5a 01       	movw	r10, r20
    a69e:	9b 01       	movw	r18, r22
    a6a0:	ac 01       	movw	r20, r24
    a6a2:	a7 ea       	ldi	r26, 0xA7	; 167
    a6a4:	b1 e4       	ldi	r27, 0x41	; 65
    a6a6:	88 df       	rcall	.-240    	; 0xa5b8 <__muluhisi3>
    a6a8:	6b 01       	movw	r12, r22
    a6aa:	7c 01       	movw	r14, r24
    a6ac:	ac ee       	ldi	r26, 0xEC	; 236
    a6ae:	b4 ef       	ldi	r27, 0xF4	; 244
    a6b0:	a5 01       	movw	r20, r10
    a6b2:	94 01       	movw	r18, r8
    a6b4:	4a d0       	rcall	.+148    	; 0xa74a <__mulohisi3>
    a6b6:	c6 0e       	add	r12, r22
    a6b8:	d7 1e       	adc	r13, r23
    a6ba:	e8 1e       	adc	r14, r24
    a6bc:	f9 1e       	adc	r15, r25
    a6be:	f7 fe       	sbrs	r15, 7
    a6c0:	06 c0       	rjmp	.+12     	; 0xa6ce <random+0x70>
    a6c2:	81 e0       	ldi	r24, 0x01	; 1
    a6c4:	c8 1a       	sub	r12, r24
    a6c6:	d1 08       	sbc	r13, r1
    a6c8:	e1 08       	sbc	r14, r1
    a6ca:	80 e8       	ldi	r24, 0x80	; 128
    a6cc:	f8 0a       	sbc	r15, r24
    a6ce:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    a6d2:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    a6d6:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    a6da:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    a6de:	c7 01       	movw	r24, r14
    a6e0:	b6 01       	movw	r22, r12
    a6e2:	9f 77       	andi	r25, 0x7F	; 127
    a6e4:	ff 90       	pop	r15
    a6e6:	ef 90       	pop	r14
    a6e8:	df 90       	pop	r13
    a6ea:	cf 90       	pop	r12
    a6ec:	bf 90       	pop	r11
    a6ee:	af 90       	pop	r10
    a6f0:	9f 90       	pop	r9
    a6f2:	8f 90       	pop	r8
    a6f4:	08 95       	ret

0000a6f6 <srandom>:
    a6f6:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    a6fa:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    a6fe:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    a702:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    a706:	08 95       	ret

0000a708 <memcpy>:
    a708:	fb 01       	movw	r30, r22
    a70a:	dc 01       	movw	r26, r24
    a70c:	02 c0       	rjmp	.+4      	; 0xa712 <memcpy+0xa>
    a70e:	01 90       	ld	r0, Z+
    a710:	0d 92       	st	X+, r0
    a712:	41 50       	subi	r20, 0x01	; 1
    a714:	50 40       	sbci	r21, 0x00	; 0
    a716:	d8 f7       	brcc	.-10     	; 0xa70e <memcpy+0x6>
    a718:	08 95       	ret

0000a71a <strcpy>:
    a71a:	fb 01       	movw	r30, r22
    a71c:	dc 01       	movw	r26, r24
    a71e:	01 90       	ld	r0, Z+
    a720:	0d 92       	st	X+, r0
    a722:	00 20       	and	r0, r0
    a724:	e1 f7       	brne	.-8      	; 0xa71e <strcpy+0x4>
    a726:	08 95       	ret

0000a728 <strncpy>:
    a728:	fb 01       	movw	r30, r22
    a72a:	dc 01       	movw	r26, r24
    a72c:	41 50       	subi	r20, 0x01	; 1
    a72e:	50 40       	sbci	r21, 0x00	; 0
    a730:	48 f0       	brcs	.+18     	; 0xa744 <strncpy+0x1c>
    a732:	01 90       	ld	r0, Z+
    a734:	0d 92       	st	X+, r0
    a736:	00 20       	and	r0, r0
    a738:	c9 f7       	brne	.-14     	; 0xa72c <strncpy+0x4>
    a73a:	01 c0       	rjmp	.+2      	; 0xa73e <strncpy+0x16>
    a73c:	1d 92       	st	X+, r1
    a73e:	41 50       	subi	r20, 0x01	; 1
    a740:	50 40       	sbci	r21, 0x00	; 0
    a742:	e0 f7       	brcc	.-8      	; 0xa73c <strncpy+0x14>
    a744:	08 95       	ret

0000a746 <__mulshisi3>:
    a746:	b7 ff       	sbrs	r27, 7
    a748:	37 cf       	rjmp	.-402    	; 0xa5b8 <__muluhisi3>

0000a74a <__mulohisi3>:
    a74a:	36 df       	rcall	.-404    	; 0xa5b8 <__muluhisi3>
    a74c:	82 1b       	sub	r24, r18
    a74e:	93 0b       	sbc	r25, r19
    a750:	08 95       	ret

0000a752 <__do_global_dtors>:
    a752:	16 e0       	ldi	r17, 0x06	; 6
    a754:	c5 ef       	ldi	r28, 0xF5	; 245
    a756:	d6 e0       	ldi	r29, 0x06	; 6
    a758:	03 c0       	rjmp	.+6      	; 0xa760 <__do_global_dtors+0xe>
    a75a:	fe 01       	movw	r30, r28
    a75c:	0f df       	rcall	.-482    	; 0xa57c <__tablejump2__>
    a75e:	21 96       	adiw	r28, 0x01	; 1
    a760:	c6 3f       	cpi	r28, 0xF6	; 246
    a762:	d1 07       	cpc	r29, r17
    a764:	d1 f7       	brne	.-12     	; 0xa75a <__do_global_dtors+0x8>
    a766:	f8 94       	cli

0000a768 <__stop_program>:
    a768:	ff cf       	rjmp	.-2      	; 0xa768 <__stop_program>
