
C:\Users\andre\AppData\Local\Temp\VMBuilds\LEDgit_Neomatrix\teensypp2\Release/LEDgit_Neomatrix.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
       0:	35 c4       	rjmp	.+2154   	; 0x86c <__dtors_end>
       2:	00 00       	nop
       4:	5d c4       	rjmp	.+2234   	; 0x8c0 <__bad_interrupt>
       6:	00 00       	nop
       8:	5b c4       	rjmp	.+2230   	; 0x8c0 <__bad_interrupt>
       a:	00 00       	nop
       c:	59 c4       	rjmp	.+2226   	; 0x8c0 <__bad_interrupt>
       e:	00 00       	nop
      10:	57 c4       	rjmp	.+2222   	; 0x8c0 <__bad_interrupt>
      12:	00 00       	nop
      14:	55 c4       	rjmp	.+2218   	; 0x8c0 <__bad_interrupt>
      16:	00 00       	nop
      18:	53 c4       	rjmp	.+2214   	; 0x8c0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	51 c4       	rjmp	.+2210   	; 0x8c0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	4f c4       	rjmp	.+2206   	; 0x8c0 <__bad_interrupt>
      22:	00 00       	nop
      24:	4d c4       	rjmp	.+2202   	; 0x8c0 <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 1c 3c 	jmp	0x7838	; 0x7838 <__vector_10>
      2c:	0c 94 99 3c 	jmp	0x7932	; 0x7932 <__vector_11>
      30:	47 c4       	rjmp	.+2190   	; 0x8c0 <__bad_interrupt>
      32:	00 00       	nop
      34:	45 c4       	rjmp	.+2186   	; 0x8c0 <__bad_interrupt>
      36:	00 00       	nop
      38:	43 c4       	rjmp	.+2182   	; 0x8c0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	41 c4       	rjmp	.+2178   	; 0x8c0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	3f c4       	rjmp	.+2174   	; 0x8c0 <__bad_interrupt>
      42:	00 00       	nop
      44:	3d c4       	rjmp	.+2170   	; 0x8c0 <__bad_interrupt>
      46:	00 00       	nop
      48:	3b c4       	rjmp	.+2166   	; 0x8c0 <__bad_interrupt>
      4a:	00 00       	nop
      4c:	39 c4       	rjmp	.+2162   	; 0x8c0 <__bad_interrupt>
      4e:	00 00       	nop
      50:	37 c4       	rjmp	.+2158   	; 0x8c0 <__bad_interrupt>
      52:	00 00       	nop
      54:	35 c4       	rjmp	.+2154   	; 0x8c0 <__bad_interrupt>
      56:	00 00       	nop
      58:	33 c4       	rjmp	.+2150   	; 0x8c0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	0c 94 7b 3b 	jmp	0x76f6	; 0x76f6 <__vector_23>
      60:	2f c4       	rjmp	.+2142   	; 0x8c0 <__bad_interrupt>
      62:	00 00       	nop
      64:	0c 94 d7 3e 	jmp	0x7dae	; 0x7dae <__vector_25>
      68:	0c 94 02 3f 	jmp	0x7e04	; 0x7e04 <__vector_26>
      6c:	0c 94 33 3f 	jmp	0x7e66	; 0x7e66 <__vector_27>
      70:	27 c4       	rjmp	.+2126   	; 0x8c0 <__bad_interrupt>
      72:	00 00       	nop
      74:	25 c4       	rjmp	.+2122   	; 0x8c0 <__bad_interrupt>
      76:	00 00       	nop
      78:	23 c4       	rjmp	.+2118   	; 0x8c0 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	21 c4       	rjmp	.+2114   	; 0x8c0 <__bad_interrupt>
      7e:	00 00       	nop
      80:	0c 94 98 16 	jmp	0x2d30	; 0x2d30 <__vector_32>
      84:	1d c4       	rjmp	.+2106   	; 0x8c0 <__bad_interrupt>
      86:	00 00       	nop
      88:	1b c4       	rjmp	.+2102   	; 0x8c0 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	19 c4       	rjmp	.+2098   	; 0x8c0 <__bad_interrupt>
      8e:	00 00       	nop
      90:	17 c4       	rjmp	.+2094   	; 0x8c0 <__bad_interrupt>
      92:	00 00       	nop
      94:	15 c4       	rjmp	.+2090   	; 0x8c0 <__bad_interrupt>
	...

00000098 <MatrixColors_p>:
      98:	00 10 00 00 00 30 00 00 00 50 00 00 00 70 00 00     .....0...P...p..
      a8:	00 80 00 00 00 80 00 00 00 80 00 00 19 8d 19 00     ................
      b8:	33 99 33 00 4d a6 4d 00 66 b3 66 00 80 c0 80 00     3.3.M.M.f.f.....
      c8:	99 cc 99 00 b3 d9 b3 00 cc e6 cc 00 e6 f2 e6 00     ................

000000d8 <font>:
      d8:	00 00 00 00 00 3e 5b 4f 5b 3e 3e 6b 4f 6b 3e 1c     .....>[O[>>kOk>.
      e8:	3e 7c 3e 1c 18 3c 7e 3c 18 1c 57 7d 57 1c 1c 5e     >|>..<~<..W}W..^
      f8:	7f 5e 1c 00 18 3c 18 00 ff e7 c3 e7 ff 00 18 24     .^...<.........$
     108:	18 00 ff e7 db e7 ff 30 48 3a 06 0e 26 29 79 29     .......0H:..&)y)
     118:	26 40 7f 05 05 07 40 7f 05 25 3f 5a 3c e7 3c 5a     &@....@..%?Z<.<Z
     128:	7f 3e 1c 1c 08 08 1c 1c 3e 7f 14 22 7f 22 14 5f     .>......>.."."._
     138:	5f 00 5f 5f 06 09 7f 01 7f 00 66 89 95 6a 60 60     _.__......f..j``
     148:	60 60 60 94 a2 ff a2 94 08 04 7e 04 08 10 20 7e     ```.......~... ~
     158:	20 10 08 08 2a 1c 08 08 1c 2a 08 08 1e 10 10 10      ...*....*......
     168:	10 0c 1e 0c 1e 0c 30 38 3e 38 30 06 0e 3e 0e 06     ......08>80..>..
     178:	00 00 00 00 00 00 00 5f 00 00 00 07 00 07 00 14     ......._........
     188:	7f 14 7f 14 24 2a 7f 2a 12 23 13 08 64 62 36 49     ....$*.*.#..db6I
     198:	56 20 50 00 08 07 03 00 00 1c 22 41 00 00 41 22     V P......."A..A"
     1a8:	1c 00 2a 1c 7f 1c 2a 08 08 3e 08 08 00 80 70 30     ..*...*..>....p0
     1b8:	00 08 08 08 08 08 00 00 60 60 00 20 10 08 04 02     ........``. ....
     1c8:	3e 51 49 45 3e 00 42 7f 40 00 72 49 49 49 46 21     >QIE>.B.@.rIIIF!
     1d8:	41 49 4d 33 18 14 12 7f 10 27 45 45 45 39 3c 4a     AIM3.....'EEE9<J
     1e8:	49 49 31 41 21 11 09 07 36 49 49 49 36 46 49 49     II1A!...6III6FII
     1f8:	29 1e 00 00 14 00 00 00 40 34 00 00 00 08 14 22     ).......@4....."
     208:	41 14 14 14 14 14 00 41 22 14 08 02 01 59 09 06     A......A"....Y..
     218:	3e 41 5d 59 4e 7c 12 11 12 7c 7f 49 49 49 36 3e     >A]YN|...|.III6>
     228:	41 41 41 22 7f 41 41 41 3e 7f 49 49 49 41 7f 09     AAA".AAA>.IIIA..
     238:	09 09 01 3e 41 41 51 73 7f 08 08 08 7f 00 41 7f     ...>AAQs......A.
     248:	41 00 20 40 41 3f 01 7f 08 14 22 41 7f 40 40 40     A. @A?...."A.@@@
     258:	40 7f 02 1c 02 7f 7f 04 08 10 7f 3e 41 41 41 3e     @..........>AAA>
     268:	7f 09 09 09 06 3e 41 51 21 5e 7f 09 19 29 46 26     .....>AQ!^...)F&
     278:	49 49 49 32 03 01 7f 01 03 3f 40 40 40 3f 1f 20     III2.....?@@@?. 
     288:	40 20 1f 3f 40 38 40 3f 63 14 08 14 63 03 04 78     @ .?@8@?c...c..x
     298:	04 03 61 59 49 4d 43 00 7f 41 41 41 02 04 08 10     ..aYIMC..AAA....
     2a8:	20 00 41 41 41 7f 04 02 01 02 04 40 40 40 40 40      .AAA......@@@@@
     2b8:	00 03 07 08 00 20 54 54 78 40 7f 28 44 44 38 38     ..... TTx@.(DD88
     2c8:	44 44 44 28 38 44 44 28 7f 38 54 54 54 18 00 08     DDD(8DD(.8TTT...
     2d8:	7e 09 02 18 a4 a4 9c 78 7f 08 04 04 78 00 44 7d     ~......x....x.D}
     2e8:	40 00 20 40 40 3d 00 7f 10 28 44 00 00 41 7f 40     @. @@=...(D..A.@
     2f8:	00 7c 04 78 04 78 7c 08 04 04 78 38 44 44 44 38     .|.x.x|...x8DDD8
     308:	fc 18 24 24 18 18 24 24 18 fc 7c 08 04 04 08 48     ..$$..$$..|....H
     318:	54 54 54 24 04 04 3f 44 24 3c 40 40 20 7c 1c 20     TTT$..?D$<@@ |. 
     328:	40 20 1c 3c 40 30 40 3c 44 28 10 28 44 4c 90 90     @ .<@0@<D(.(DL..
     338:	90 7c 44 64 54 4c 44 00 08 36 41 00 00 00 77 00     .|DdTLD..6A...w.
     348:	00 00 41 36 08 00 02 01 02 04 02 3c 26 23 26 3c     ..A6.......<&#&<
     358:	1e a1 a1 61 12 3a 40 40 20 7a 38 54 54 55 59 21     ...a.:@@ z8TTUY!
     368:	55 55 79 41 22 54 54 78 42 21 55 54 78 40 20 54     UUyA"TTxB!UTx@ T
     378:	55 79 40 0c 1e 52 72 12 39 55 55 55 59 39 54 54     Uy@..Rr.9UUUY9TT
     388:	54 59 39 55 54 54 58 00 00 45 7c 41 00 02 45 7d     TY9UTTX..E|A..E}
     398:	42 00 01 45 7c 40 7d 12 11 12 7d f0 28 25 28 f0     B..E|@}...}.(%(.
     3a8:	7c 54 55 45 00 20 54 54 7c 54 7c 0a 09 7f 49 32     |TUE. TT|T|...I2
     3b8:	49 49 49 32 3a 44 44 44 3a 32 4a 48 48 30 3a 41     III2:DDD:2JHH0:A
     3c8:	41 21 7a 3a 42 40 20 78 00 9d a0 a0 7d 3d 42 42     A!z:B@ x....}=BB
     3d8:	42 3d 3d 40 40 40 3d 3c 24 ff 24 24 48 7e 49 43     B==@@@=<$.$$H~IC
     3e8:	66 2b 2f fc 2f 2b ff 09 29 f6 20 c0 88 7e 09 03     f+/./+..). ..~..
     3f8:	20 54 54 79 41 00 00 44 7d 41 30 48 48 4a 32 38      TTyA..D}A0HHJ28
     408:	40 40 22 7a 00 7a 0a 0a 72 7d 0d 19 31 7d 26 29     @@"z.z..r}..1}&)
     418:	29 2f 28 26 29 29 29 26 30 48 4d 40 20 38 08 08     )/(&)))&0HM@ 8..
     428:	08 08 08 08 08 08 38 2f 10 c8 ac ba 2f 10 28 34     ......8/..../.(4
     438:	fa 00 00 7b 00 00 08 14 2a 14 22 22 14 2a 14 08     ...{....*."".*..
     448:	55 00 55 00 55 aa 55 aa 55 aa ff 55 ff 55 ff 00     U.U.U.U.U..U.U..
     458:	00 00 ff 00 10 10 10 ff 00 14 14 14 ff 00 10 10     ................
     468:	ff 00 ff 10 10 f0 10 f0 14 14 14 fc 00 14 14 f7     ................
     478:	00 ff 00 00 ff 00 ff 14 14 f4 04 fc 14 14 17 10     ................
     488:	1f 10 10 1f 10 1f 14 14 14 1f 00 10 10 10 f0 00     ................
     498:	00 00 00 1f 10 10 10 10 1f 10 10 10 10 f0 10 00     ................
     4a8:	00 00 ff 10 10 10 10 10 10 10 10 10 ff 10 00 00     ................
     4b8:	00 ff 14 00 00 ff 00 ff 00 00 1f 10 17 00 00 fc     ................
     4c8:	04 f4 14 14 17 10 17 14 14 f4 04 f4 00 00 ff 00     ................
     4d8:	f7 14 14 14 14 14 14 14 f7 00 f7 14 14 14 17 14     ................
     4e8:	10 10 1f 10 1f 14 14 14 f4 14 10 10 f0 10 f0 00     ................
     4f8:	00 1f 10 1f 00 00 00 1f 14 00 00 00 fc 14 00 00     ................
     508:	f0 10 f0 10 10 ff 10 ff 14 14 14 ff 14 10 10 10     ................
     518:	1f 00 00 00 00 f0 10 ff ff ff ff ff f0 f0 f0 f0     ................
     528:	f0 ff ff ff 00 00 00 00 00 ff ff 0f 0f 0f 0f 0f     ................
     538:	38 44 44 38 44 fc 4a 4a 4a 34 7e 02 02 06 06 02     8DD8D.JJJ4~.....
     548:	7e 02 7e 02 63 55 49 41 63 38 44 44 3c 04 40 7e     ~.~.cUIAc8DD<.@~
     558:	20 1e 20 06 02 7e 02 02 99 a5 e7 a5 99 1c 2a 49      . ..~........*I
     568:	2a 1c 4c 72 01 72 4c 30 4a 4d 4d 30 30 48 78 48     *.Lr.rL0JMM00HxH
     578:	30 bc 62 5a 46 3d 3e 49 49 49 00 7e 01 01 01 7e     0.bZF=>III.~...~
     588:	2a 2a 2a 2a 2a 44 44 5f 44 44 40 51 4a 44 40 40     *****DD_DD@QJD@@
     598:	44 4a 51 40 00 00 ff 01 03 e0 80 ff 00 00 08 08     DJQ@............
     5a8:	6b 6b 08 36 12 36 24 36 06 0f 09 0f 06 00 00 18     kk.6.6$6........
     5b8:	18 00 00 00 10 10 00 30 40 ff 01 01 00 1f 01 01     .......0@.......
     5c8:	1e 00 19 1d 17 12 00 3c 3c 3c 3c 00 00 00 00 00     .......<<<<.....

000005d8 <gamma6>:
     5d8:	00 01 02 03 04 05 06 08 09 0a 0b 0d 0e 10 12 13     ................
     5e8:	15 17 19 1b 1d 20 22 25 27 2a 2d 30 33 37 3a 3e     ..... "%'*-037:>
     5f8:	41 45 49 4d 52 56 5b 5f 64 69 6e 74 79 7f 85 8b     AEIMRV[_dinty...
     608:	91 97 9d a4 ab b2 b9 c0 c7 cf d6 de e6 ee f7 ff     ................

00000618 <gamma5>:
     618:	00 01 02 03 05 07 09 0b 0e 11 14 18 1d 22 28 2e     ............."(.
     628:	36 3d 46 4f 59 64 6f 7c 89 97 a6 b6 c7 d9 eb ff     6=FOYdo|........

00000638 <PartyColors_p>:
     638:	ab 00 55 00 7c 00 84 00 4b 00 b5 00 1b 00 e5 00     ..U.|...K.......
     648:	00 17 e8 00 00 47 b8 00 00 77 ab 00 00 ab ab 00     .....G...w......
     658:	00 55 ab 00 00 22 dd 00 0e 00 f2 00 3e 00 c2 00     .U..."......>...
     668:	71 00 8f 00 a1 00 5f 00 d0 00 2f 00 f9 07 00 00     q....._.../.....

00000678 <RainbowStripeColors_p>:
     678:	00 00 ff 00 00 00 00 00 00 55 ab 00 00 00 00 00     .........U......
     688:	00 ab ab 00 00 00 00 00 00 ff 00 00 00 00 00 00     ................
     698:	55 ab 00 00 00 00 00 00 ff 00 00 00 00 00 00 00     U...............
     6a8:	ab 00 55 00 00 00 00 00 55 00 ab 00 00 00 00 00     ..U.....U.......

000006b8 <RainbowColors_p>:
     6b8:	00 00 ff 00 00 2a d5 00 00 55 ab 00 00 7f ab 00     .....*...U......
     6c8:	00 ab ab 00 00 d5 56 00 00 ff 00 00 2a d5 00 00     ......V.....*...
     6d8:	55 ab 00 00 aa 56 00 00 ff 00 00 00 d5 00 2a 00     U....V........*.
     6e8:	ab 00 55 00 81 00 7f 00 55 00 ab 00 2b 00 d5 00     ..U.....U...+...

000006f8 <CloudColors_p>:
     6f8:	ff 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     708:	8b 00 00 00 8b 00 00 00 8b 00 00 00 8b 00 00 00     ................
     718:	ff 00 00 00 8b 00 00 00 eb ce 87 00 eb ce 87 00     ................
     728:	e6 d8 ad 00 ff ff ff 00 e6 d8 ad 00 eb ce 87 00     ................

00000738 <digital_pin_table_PGM>:
     738:	01 29 02 29 04 29 08 29 10 29 20 29 40 29 80 29     .).).).).) )@).)
     748:	01 2c 02 2c 01 26 02 26 04 26 08 26 10 26 20 26     .,.,.&.&.&.&.& &
     758:	40 26 80 26 40 2c 80 2c 01 23 02 23 04 23 08 23     @&.&@,.,.#.#.#.#
     768:	10 23 20 23 40 23 80 23 01 20 02 20 04 20 08 20     .# #@#.#. . . . 
     778:	10 20 20 20 40 20 80 20 10 2c 20 2c 01 2f 02 2f     .   @ . ., ,././
     788:	04 2f 08 2f 10 2f 20 2f 40 2f 80 2f                 ./././ /@/./

00000794 <descriptor_list>:
     794:	00 01 00 00 45 08 12 00 02 00 00 02 08 43 00 03     ....E........C..
     7a4:	00 00 fe 07 04 01 03 09 04 e4 07 18 02 03 09 04     ................
     7b4:	cc 07 16 03 03 09 04 be 07 0c                       ..........

000007be <string3>:
     7be:	0c 03 31 00 32 00 33 00 34 00 35 00 00 00           ..1.2.3.4.5...

000007cc <string2>:
     7cc:	16 03 55 00 53 00 42 00 20 00 53 00 65 00 72 00     ..U.S.B. .S.e.r.
     7dc:	69 00 61 00 6c 00 00 00                             i.a.l...

000007e4 <string1>:
     7e4:	18 03 54 00 65 00 65 00 6e 00 73 00 79 00 64 00     ..T.e.e.n.s.y.d.
     7f4:	75 00 69 00 6e 00 6f 00 00 00                       u.i.n.o...

000007fe <string0>:
     7fe:	04 03 09 04                                         ....

00000802 <config1_descriptor>:
     802:	09 02 43 00 02 01 00 c0 32 09 04 00 00 01 02 02     ..C.....2.......
     812:	01 00 05 24 00 10 01 05 24 01 00 01 04 24 02 06     ...$....$....$..
     822:	05 24 06 00 01 07 05 82 03 08 00 40 09 04 01 00     .$.........@....
     832:	02 0a 00 00 00 07 05 03 02 40 00 00 07 05 84 02     .........@......
     842:	40 00 00                                            @..

00000845 <device_descriptor>:
     845:	12 01 00 02 02 00 00 20 c0 16 83 04 72 02 01 02     ....... ....r...
     855:	03 01                                               ..

00000857 <endpoint_config_table>:
     857:	00 01 c1 02 01 80 36 01 81 36 00                    ......6..6.

00000862 <__ctors_start>:
     862:	e1 27       	eor	r30, r17
     864:	f7 36       	cpi	r31, 0x67	; 103
     866:	51 3f       	cpi	r21, 0xF1	; 241
     868:	16 42       	sbci	r17, 0x26	; 38

0000086a <__ctors_end>:
     86a:	5c 28       	or	r5, r12

0000086c <__dtors_end>:
     86c:	11 24       	eor	r1, r1
     86e:	1f be       	out	0x3f, r1	; 63
     870:	cf ef       	ldi	r28, 0xFF	; 255
     872:	d0 e2       	ldi	r29, 0x20	; 32
     874:	de bf       	out	0x3e, r29	; 62
     876:	cd bf       	out	0x3d, r28	; 61

00000878 <__do_copy_data>:
     878:	19 e0       	ldi	r17, 0x09	; 9
     87a:	a0 e0       	ldi	r26, 0x00	; 0
     87c:	b1 e0       	ldi	r27, 0x01	; 1
     87e:	e8 e7       	ldi	r30, 0x78	; 120
     880:	fc e8       	ldi	r31, 0x8C	; 140
     882:	00 e0       	ldi	r16, 0x00	; 0
     884:	0b bf       	out	0x3b, r16	; 59
     886:	02 c0       	rjmp	.+4      	; 0x88c <__do_copy_data+0x14>
     888:	07 90       	elpm	r0, Z+
     88a:	0d 92       	st	X+, r0
     88c:	a6 32       	cpi	r26, 0x26	; 38
     88e:	b1 07       	cpc	r27, r17
     890:	d9 f7       	brne	.-10     	; 0x888 <__do_copy_data+0x10>

00000892 <__do_clear_bss>:
     892:	20 e1       	ldi	r18, 0x10	; 16
     894:	a6 e2       	ldi	r26, 0x26	; 38
     896:	b9 e0       	ldi	r27, 0x09	; 9
     898:	01 c0       	rjmp	.+2      	; 0x89c <.do_clear_bss_start>

0000089a <.do_clear_bss_loop>:
     89a:	1d 92       	st	X+, r1

0000089c <.do_clear_bss_start>:
     89c:	ab 3a       	cpi	r26, 0xAB	; 171
     89e:	b2 07       	cpc	r27, r18
     8a0:	e1 f7       	brne	.-8      	; 0x89a <.do_clear_bss_loop>

000008a2 <__do_global_ctors>:
     8a2:	14 e0       	ldi	r17, 0x04	; 4
     8a4:	c5 e3       	ldi	r28, 0x35	; 53
     8a6:	d4 e0       	ldi	r29, 0x04	; 4
     8a8:	04 c0       	rjmp	.+8      	; 0x8b2 <__do_global_ctors+0x10>
     8aa:	21 97       	sbiw	r28, 0x01	; 1
     8ac:	fe 01       	movw	r30, r28
     8ae:	0e 94 45 45 	call	0x8a8a	; 0x8a8a <__tablejump2__>
     8b2:	c1 33       	cpi	r28, 0x31	; 49
     8b4:	d1 07       	cpc	r29, r17
     8b6:	c9 f7       	brne	.-14     	; 0x8aa <__do_global_ctors+0x8>
     8b8:	0e 94 62 3f 	call	0x7ec4	; 0x7ec4 <main>
     8bc:	0c 94 30 46 	jmp	0x8c60	; 0x8c60 <__do_global_dtors>

000008c0 <__bad_interrupt>:
     8c0:	9f cb       	rjmp	.-2242   	; 0x0 <__vectors>

000008c2 <CLEDController::size()>:

		// delete 1 pixel sometimes
		//if (random(0, 3) == 1) leds[random(0, anz_LEDs)] = CRGB::Black;

		FastLED.show();
	}
     8c2:	fc 01       	movw	r30, r24
     8c4:	85 85       	ldd	r24, Z+13	; 0x0d
     8c6:	96 85       	ldd	r25, Z+14	; 0x0e
     8c8:	08 95       	ret

000008ca <CLEDController::clearLeds(int)>:
     8ca:	cf 93       	push	r28
     8cc:	df 93       	push	r29
     8ce:	00 d0       	rcall	.+0      	; 0x8d0 <CLEDController::clearLeds(int)+0x6>
     8d0:	00 d0       	rcall	.+0      	; 0x8d2 <CLEDController::clearLeds(int)+0x8>
     8d2:	00 d0       	rcall	.+0      	; 0x8d4 <CLEDController::clearLeds(int)+0xa>
     8d4:	cd b7       	in	r28, 0x3d	; 61
     8d6:	de b7       	in	r29, 0x3e	; 62
     8d8:	ab 01       	movw	r20, r22
     8da:	1c 82       	std	Y+4, r1	; 0x04
     8dc:	1d 82       	std	Y+5, r1	; 0x05
     8de:	1e 82       	std	Y+6, r1	; 0x06
     8e0:	dc 01       	movw	r26, r24
     8e2:	ed 91       	ld	r30, X+
     8e4:	fc 91       	ld	r31, X
     8e6:	01 90       	ld	r0, Z+
     8e8:	f0 81       	ld	r31, Z
     8ea:	e0 2d       	mov	r30, r0
     8ec:	19 82       	std	Y+1, r1	; 0x01
     8ee:	1a 82       	std	Y+2, r1	; 0x02
     8f0:	1b 82       	std	Y+3, r1	; 0x03
     8f2:	9e 01       	movw	r18, r28
     8f4:	2f 5f       	subi	r18, 0xFF	; 255
     8f6:	3f 4f       	sbci	r19, 0xFF	; 255
     8f8:	be 01       	movw	r22, r28
     8fa:	6c 5f       	subi	r22, 0xFC	; 252
     8fc:	7f 4f       	sbci	r23, 0xFF	; 255
     8fe:	09 95       	icall
     900:	26 96       	adiw	r28, 0x06	; 6
     902:	0f b6       	in	r0, 0x3f	; 63
     904:	f8 94       	cli
     906:	de bf       	out	0x3e, r29	; 62
     908:	0f be       	out	0x3f, r0	; 63
     90a:	cd bf       	out	0x3d, r28	; 61
     90c:	df 91       	pop	r29
     90e:	cf 91       	pop	r28
     910:	08 95       	ret

00000912 <myRemapFn(unsigned int, unsigned int)>:
     912:	67 31       	cpi	r22, 0x17	; 23
     914:	71 05       	cpc	r23, r1
     916:	08 f0       	brcs	.+2      	; 0x91a <myRemapFn(unsigned int, unsigned int)+0x8>
     918:	ef c0       	rjmp	.+478    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     91a:	fb 01       	movw	r30, r22
     91c:	ee 56       	subi	r30, 0x6E	; 110
     91e:	fb 4f       	sbci	r31, 0xFB	; 251
     920:	0c 94 45 45 	jmp	0x8a8a	; 0x8a8a <__tablejump2__>
     924:	a9 04       	cpc	r10, r9
     926:	b4 04       	cpc	r11, r4
     928:	bc 04       	cpc	r11, r12
     92a:	c9 04       	cpc	r12, r9
     92c:	d4 04       	cpc	r13, r4
     92e:	db 04       	cpc	r13, r11
     930:	e2 04       	cpc	r14, r2
     932:	e9 04       	cpc	r14, r9
     934:	f3 04       	cpc	r15, r3
     936:	fd 04       	cpc	r15, r13
     938:	07 05       	cpc	r16, r7
     93a:	11 05       	cpc	r17, r1
     93c:	1b 05       	cpc	r17, r11
     93e:	25 05       	cpc	r18, r5
     940:	2f 05       	cpc	r18, r15
     942:	37 05       	cpc	r19, r7
     944:	3f 05       	cpc	r19, r15
     946:	46 05       	cpc	r20, r6
     948:	4d 05       	cpc	r20, r13
     94a:	54 05       	cpc	r21, r4
     94c:	5e 05       	cpc	r21, r14
     94e:	68 05       	cpc	r22, r8
     950:	72 05       	cpc	r23, r2
     952:	04 97       	sbiw	r24, 0x04	; 4
     954:	83 30       	cpi	r24, 0x03	; 3
     956:	91 05       	cpc	r25, r1
     958:	08 f0       	brcs	.+2      	; 0x95c <myRemapFn(unsigned int, unsigned int)+0x4a>
     95a:	ce c0       	rjmp	.+412    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     95c:	83 55       	subi	r24, 0x53	; 83
     95e:	9b 4f       	sbci	r25, 0xFB	; 251
     960:	fc 01       	movw	r30, r24
     962:	80 81       	ld	r24, Z
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	08 95       	ret
     968:	02 97       	sbiw	r24, 0x02	; 2
     96a:	86 30       	cpi	r24, 0x06	; 6
     96c:	91 05       	cpc	r25, r1
     96e:	08 f0       	brcs	.+2      	; 0x972 <myRemapFn(unsigned int, unsigned int)+0x60>
     970:	c3 c0       	rjmp	.+390    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     972:	89 55       	subi	r24, 0x59	; 89
     974:	9b 4f       	sbci	r25, 0xFB	; 251
     976:	f4 cf       	rjmp	.-24     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     978:	01 97       	sbiw	r24, 0x01	; 1
     97a:	83 31       	cpi	r24, 0x13	; 19
     97c:	91 05       	cpc	r25, r1
     97e:	08 f0       	brcs	.+2      	; 0x982 <myRemapFn(unsigned int, unsigned int)+0x70>
     980:	bb c0       	rjmp	.+374    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     982:	88 0f       	add	r24, r24
     984:	99 1f       	adc	r25, r25
     986:	fc 01       	movw	r30, r24
     988:	ef 57       	subi	r30, 0x7F	; 127
     98a:	fb 4f       	sbci	r31, 0xFB	; 251
     98c:	80 81       	ld	r24, Z
     98e:	91 81       	ldd	r25, Z+1	; 0x01
     990:	08 95       	ret
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	85 31       	cpi	r24, 0x15	; 21
     996:	91 05       	cpc	r25, r1
     998:	08 f0       	brcs	.+2      	; 0x99c <myRemapFn(unsigned int, unsigned int)+0x8a>
     99a:	ae c0       	rjmp	.+348    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     99c:	88 0f       	add	r24, r24
     99e:	99 1f       	adc	r25, r25
     9a0:	fc 01       	movw	r30, r24
     9a2:	e9 5a       	subi	r30, 0xA9	; 169
     9a4:	fb 4f       	sbci	r31, 0xFB	; 251
     9a6:	f2 cf       	rjmp	.-28     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9a8:	84 31       	cpi	r24, 0x14	; 20
     9aa:	91 05       	cpc	r25, r1
     9ac:	08 f0       	brcs	.+2      	; 0x9b0 <myRemapFn(unsigned int, unsigned int)+0x9e>
     9ae:	a4 c0       	rjmp	.+328    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9b0:	8d 5b       	subi	r24, 0xBD	; 189
     9b2:	9b 4f       	sbci	r25, 0xFB	; 251
     9b4:	d5 cf       	rjmp	.-86     	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9b6:	84 31       	cpi	r24, 0x14	; 20
     9b8:	91 05       	cpc	r25, r1
     9ba:	08 f0       	brcs	.+2      	; 0x9be <myRemapFn(unsigned int, unsigned int)+0xac>
     9bc:	9d c0       	rjmp	.+314    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9be:	81 5d       	subi	r24, 0xD1	; 209
     9c0:	9b 4f       	sbci	r25, 0xFB	; 251
     9c2:	ce cf       	rjmp	.-100    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9c4:	8f 30       	cpi	r24, 0x0F	; 15
     9c6:	91 05       	cpc	r25, r1
     9c8:	08 f0       	brcs	.+2      	; 0x9cc <myRemapFn(unsigned int, unsigned int)+0xba>
     9ca:	96 c0       	rjmp	.+300    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9cc:	80 5e       	subi	r24, 0xE0	; 224
     9ce:	9b 4f       	sbci	r25, 0xFB	; 251
     9d0:	c7 cf       	rjmp	.-114    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     9d2:	8f 30       	cpi	r24, 0x0F	; 15
     9d4:	91 05       	cpc	r25, r1
     9d6:	08 f0       	brcs	.+2      	; 0x9da <myRemapFn(unsigned int, unsigned int)+0xc8>
     9d8:	8f c0       	rjmp	.+286    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9da:	88 0f       	add	r24, r24
     9dc:	99 1f       	adc	r25, r25
     9de:	fc 01       	movw	r30, r24
     9e0:	ee 5f       	subi	r30, 0xFE	; 254
     9e2:	fb 4f       	sbci	r31, 0xFB	; 251
     9e4:	d3 cf       	rjmp	.-90     	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9e6:	8f 30       	cpi	r24, 0x0F	; 15
     9e8:	91 05       	cpc	r25, r1
     9ea:	08 f0       	brcs	.+2      	; 0x9ee <myRemapFn(unsigned int, unsigned int)+0xdc>
     9ec:	85 c0       	rjmp	.+266    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     9ee:	88 0f       	add	r24, r24
     9f0:	99 1f       	adc	r25, r25
     9f2:	fc 01       	movw	r30, r24
     9f4:	ec 51       	subi	r30, 0x1C	; 28
     9f6:	fc 4f       	sbci	r31, 0xFC	; 252
     9f8:	c9 cf       	rjmp	.-110    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     9fa:	8f 30       	cpi	r24, 0x0F	; 15
     9fc:	91 05       	cpc	r25, r1
     9fe:	08 f0       	brcs	.+2      	; 0xa02 <myRemapFn(unsigned int, unsigned int)+0xf0>
     a00:	7b c0       	rjmp	.+246    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a02:	88 0f       	add	r24, r24
     a04:	99 1f       	adc	r25, r25
     a06:	fc 01       	movw	r30, r24
     a08:	ea 53       	subi	r30, 0x3A	; 58
     a0a:	fc 4f       	sbci	r31, 0xFC	; 252
     a0c:	bf cf       	rjmp	.-130    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a0e:	8f 30       	cpi	r24, 0x0F	; 15
     a10:	91 05       	cpc	r25, r1
     a12:	08 f0       	brcs	.+2      	; 0xa16 <myRemapFn(unsigned int, unsigned int)+0x104>
     a14:	71 c0       	rjmp	.+226    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a16:	88 0f       	add	r24, r24
     a18:	99 1f       	adc	r25, r25
     a1a:	fc 01       	movw	r30, r24
     a1c:	e8 55       	subi	r30, 0x58	; 88
     a1e:	fc 4f       	sbci	r31, 0xFC	; 252
     a20:	b5 cf       	rjmp	.-150    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a22:	8f 30       	cpi	r24, 0x0F	; 15
     a24:	91 05       	cpc	r25, r1
     a26:	08 f0       	brcs	.+2      	; 0xa2a <myRemapFn(unsigned int, unsigned int)+0x118>
     a28:	67 c0       	rjmp	.+206    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a2a:	88 0f       	add	r24, r24
     a2c:	99 1f       	adc	r25, r25
     a2e:	fc 01       	movw	r30, r24
     a30:	e6 57       	subi	r30, 0x76	; 118
     a32:	fc 4f       	sbci	r31, 0xFC	; 252
     a34:	ab cf       	rjmp	.-170    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a36:	8f 30       	cpi	r24, 0x0F	; 15
     a38:	91 05       	cpc	r25, r1
     a3a:	08 f0       	brcs	.+2      	; 0xa3e <myRemapFn(unsigned int, unsigned int)+0x12c>
     a3c:	5d c0       	rjmp	.+186    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a3e:	88 0f       	add	r24, r24
     a40:	99 1f       	adc	r25, r25
     a42:	fc 01       	movw	r30, r24
     a44:	e4 59       	subi	r30, 0x94	; 148
     a46:	fc 4f       	sbci	r31, 0xFC	; 252
     a48:	a1 cf       	rjmp	.-190    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a4a:	8f 30       	cpi	r24, 0x0F	; 15
     a4c:	91 05       	cpc	r25, r1
     a4e:	08 f0       	brcs	.+2      	; 0xa52 <myRemapFn(unsigned int, unsigned int)+0x140>
     a50:	53 c0       	rjmp	.+166    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a52:	88 0f       	add	r24, r24
     a54:	99 1f       	adc	r25, r25
     a56:	fc 01       	movw	r30, r24
     a58:	e2 5b       	subi	r30, 0xB2	; 178
     a5a:	fc 4f       	sbci	r31, 0xFC	; 252
     a5c:	97 cf       	rjmp	.-210    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     a5e:	01 97       	sbiw	r24, 0x01	; 1
     a60:	8e 30       	cpi	r24, 0x0E	; 14
     a62:	91 05       	cpc	r25, r1
     a64:	08 f0       	brcs	.+2      	; 0xa68 <myRemapFn(unsigned int, unsigned int)+0x156>
     a66:	48 c0       	rjmp	.+144    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a68:	80 5c       	subi	r24, 0xC0	; 192
     a6a:	9c 4f       	sbci	r25, 0xFC	; 252
     a6c:	79 cf       	rjmp	.-270    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a6e:	02 97       	sbiw	r24, 0x02	; 2
     a70:	81 31       	cpi	r24, 0x11	; 17
     a72:	91 05       	cpc	r25, r1
     a74:	08 f0       	brcs	.+2      	; 0xa78 <myRemapFn(unsigned int, unsigned int)+0x166>
     a76:	40 c0       	rjmp	.+128    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a78:	81 5d       	subi	r24, 0xD1	; 209
     a7a:	9c 4f       	sbci	r25, 0xFC	; 252
     a7c:	71 cf       	rjmp	.-286    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a7e:	01 97       	sbiw	r24, 0x01	; 1
     a80:	82 31       	cpi	r24, 0x12	; 18
     a82:	91 05       	cpc	r25, r1
     a84:	c8 f5       	brcc	.+114    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a86:	83 5e       	subi	r24, 0xE3	; 227
     a88:	9c 4f       	sbci	r25, 0xFC	; 252
     a8a:	6a cf       	rjmp	.-300    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a8c:	01 97       	sbiw	r24, 0x01	; 1
     a8e:	83 31       	cpi	r24, 0x13	; 19
     a90:	91 05       	cpc	r25, r1
     a92:	90 f5       	brcc	.+100    	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     a94:	86 5f       	subi	r24, 0xF6	; 246
     a96:	9c 4f       	sbci	r25, 0xFC	; 252
     a98:	63 cf       	rjmp	.-314    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     a9a:	01 97       	sbiw	r24, 0x01	; 1
     a9c:	84 31       	cpi	r24, 0x14	; 20
     a9e:	91 05       	cpc	r25, r1
     aa0:	58 f5       	brcc	.+86     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aa2:	8a 50       	subi	r24, 0x0A	; 10
     aa4:	9d 4f       	sbci	r25, 0xFD	; 253
     aa6:	5c cf       	rjmp	.-328    	; 0x960 <myRemapFn(unsigned int, unsigned int)+0x4e>
     aa8:	01 97       	sbiw	r24, 0x01	; 1
     aaa:	83 31       	cpi	r24, 0x13	; 19
     aac:	91 05       	cpc	r25, r1
     aae:	20 f5       	brcc	.+72     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ab0:	88 0f       	add	r24, r24
     ab2:	99 1f       	adc	r25, r25
     ab4:	fc 01       	movw	r30, r24
     ab6:	e0 53       	subi	r30, 0x30	; 48
     ab8:	fd 4f       	sbci	r31, 0xFD	; 253
     aba:	68 cf       	rjmp	.-304    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     abc:	02 97       	sbiw	r24, 0x02	; 2
     abe:	87 30       	cpi	r24, 0x07	; 7
     ac0:	91 05       	cpc	r25, r1
     ac2:	d0 f4       	brcc	.+52     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ac4:	88 0f       	add	r24, r24
     ac6:	99 1f       	adc	r25, r25
     ac8:	fc 01       	movw	r30, r24
     aca:	ee 53       	subi	r30, 0x3E	; 62
     acc:	fd 4f       	sbci	r31, 0xFD	; 253
     ace:	5e cf       	rjmp	.-324    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ad0:	03 97       	sbiw	r24, 0x03	; 3
     ad2:	85 30       	cpi	r24, 0x05	; 5
     ad4:	91 05       	cpc	r25, r1
     ad6:	80 f4       	brcc	.+32     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     ad8:	88 0f       	add	r24, r24
     ada:	99 1f       	adc	r25, r25
     adc:	fc 01       	movw	r30, r24
     ade:	e8 54       	subi	r30, 0x48	; 72
     ae0:	fd 4f       	sbci	r31, 0xFD	; 253
     ae2:	54 cf       	rjmp	.-344    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     ae4:	04 97       	sbiw	r24, 0x04	; 4
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	91 05       	cpc	r25, r1
     aea:	30 f4       	brcc	.+12     	; 0xaf8 <myRemapFn(unsigned int, unsigned int)+0x1e6>
     aec:	88 0f       	add	r24, r24
     aee:	99 1f       	adc	r25, r25
     af0:	fc 01       	movw	r30, r24
     af2:	ee 54       	subi	r30, 0x4E	; 78
     af4:	fd 4f       	sbci	r31, 0xFD	; 253
     af6:	4a cf       	rjmp	.-364    	; 0x98c <myRemapFn(unsigned int, unsigned int)+0x7a>
     af8:	8c e2       	ldi	r24, 0x2C	; 44
     afa:	91 e0       	ldi	r25, 0x01	; 1
     afc:	08 95       	ret

00000afe <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::getMaxRefreshRate() const>:
     afe:	80 e9       	ldi	r24, 0x90	; 144
     b00:	91 e0       	ldi	r25, 0x01	; 1
     b02:	08 95       	ret

00000b04 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::init()>:
     b04:	3a 9a       	sbi	0x07, 2	; 7
     b06:	08 95       	ret

00000b08 <Print::write(char const*)>:
     b08:	fb 01       	movw	r30, r22
     b0a:	01 90       	ld	r0, Z+
     b0c:	00 20       	and	r0, r0
     b0e:	e9 f7       	brne	.-6      	; 0xb0a <Print::write(char const*)+0x2>
     b10:	31 97       	sbiw	r30, 0x01	; 1
     b12:	af 01       	movw	r20, r30
     b14:	46 1b       	sub	r20, r22
     b16:	57 0b       	sbc	r21, r23
     b18:	dc 01       	movw	r26, r24
     b1a:	ed 91       	ld	r30, X+
     b1c:	fc 91       	ld	r31, X
     b1e:	02 80       	ldd	r0, Z+2	; 0x02
     b20:	f3 81       	ldd	r31, Z+3	; 0x03
     b22:	e0 2d       	mov	r30, r0
     b24:	09 94       	ijmp

00000b26 <Print::print(char const*)>:
     b26:	f0 cf       	rjmp	.-32     	; 0xb08 <Print::write(char const*)>

00000b28 <Print::print(unsigned char)>:
     b28:	46 2f       	mov	r20, r22
     b2a:	50 e0       	ldi	r21, 0x00	; 0
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	60 e0       	ldi	r22, 0x00	; 0
     b30:	20 e0       	ldi	r18, 0x00	; 0
     b32:	0c 94 0e 40 	jmp	0x801c	; 0x801c <Print::printNumberDec(unsigned long, unsigned char)>

00000b36 <Print::println(unsigned char)>:
     b36:	0f 93       	push	r16
     b38:	1f 93       	push	r17
     b3a:	cf 93       	push	r28
     b3c:	df 93       	push	r29
     b3e:	ec 01       	movw	r28, r24
     b40:	f3 df       	rcall	.-26     	; 0xb28 <Print::print(unsigned char)>
     b42:	8c 01       	movw	r16, r24
     b44:	ce 01       	movw	r24, r28
     b46:	0e 94 f4 3f 	call	0x7fe8	; 0x7fe8 <Print::println()>
     b4a:	80 0f       	add	r24, r16
     b4c:	91 1f       	adc	r25, r17
     b4e:	df 91       	pop	r29
     b50:	cf 91       	pop	r28
     b52:	1f 91       	pop	r17
     b54:	0f 91       	pop	r16
     b56:	08 95       	ret

00000b58 <CRGBPalette16::operator=(unsigned long const (&) [16])>:
     b58:	0f 93       	push	r16
     b5a:	1f 93       	push	r17
     b5c:	dc 01       	movw	r26, r24
     b5e:	ac 01       	movw	r20, r24
     b60:	40 5d       	subi	r20, 0xD0	; 208
     b62:	5f 4f       	sbci	r21, 0xFF	; 255
     b64:	fb 01       	movw	r30, r22
     b66:	05 91       	lpm	r16, Z+
     b68:	15 91       	lpm	r17, Z+
     b6a:	25 91       	lpm	r18, Z+
     b6c:	34 91       	lpm	r19, Z
     b6e:	2c 93       	st	X, r18
     b70:	11 96       	adiw	r26, 0x01	; 1
     b72:	1c 93       	st	X, r17
     b74:	11 97       	sbiw	r26, 0x01	; 1
     b76:	12 96       	adiw	r26, 0x02	; 2
     b78:	0c 93       	st	X, r16
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	6c 5f       	subi	r22, 0xFC	; 252
     b7e:	7f 4f       	sbci	r23, 0xFF	; 255
     b80:	13 96       	adiw	r26, 0x03	; 3
     b82:	a4 17       	cp	r26, r20
     b84:	b5 07       	cpc	r27, r21
     b86:	71 f7       	brne	.-36     	; 0xb64 <CRGBPalette16::operator=(unsigned long const (&) [16])+0xc>
     b88:	1f 91       	pop	r17
     b8a:	0f 91       	pop	r16
     b8c:	08 95       	ret

00000b8e <CFastLED::show()>:
     b8e:	fc 01       	movw	r30, r24
     b90:	60 81       	ld	r22, Z
     b92:	0c 94 3f 35 	jmp	0x6a7e	; 0x6a7e <CFastLED::show(unsigned char)>

00000b96 <CFastLED::showColor(CRGB const&)>:
     b96:	fc 01       	movw	r30, r24
     b98:	40 81       	ld	r20, Z
     b9a:	0c 94 cf 35 	jmp	0x6b9e	; 0x6b9e <CFastLED::showColor(CRGB const&, unsigned char)>

00000b9e <Framebuffer_GFX::clear()>:
     b9e:	dc 01       	movw	r26, r24
     ba0:	ed 91       	ld	r30, X+
     ba2:	fc 91       	ld	r31, X
     ba4:	02 a0       	ldd	r0, Z+34	; 0x22
     ba6:	f3 a1       	ldd	r31, Z+35	; 0x23
     ba8:	e0 2d       	mov	r30, r0
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	60 e0       	ldi	r22, 0x00	; 0
     bae:	09 94       	ijmp

00000bb0 <getRandomColorValue()>:
     bb0:	24 e0       	ldi	r18, 0x04	; 4
     bb2:	30 e0       	ldi	r19, 0x00	; 0
     bb4:	40 e0       	ldi	r20, 0x00	; 0
     bb6:	50 e0       	ldi	r21, 0x00	; 0
     bb8:	61 e0       	ldi	r22, 0x01	; 1
     bba:	70 e0       	ldi	r23, 0x00	; 0
     bbc:	80 e0       	ldi	r24, 0x00	; 0
     bbe:	90 e0       	ldi	r25, 0x00	; 0
     bc0:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
     bc4:	62 30       	cpi	r22, 0x02	; 2
     bc6:	71 05       	cpc	r23, r1
     bc8:	31 f0       	breq	.+12     	; 0xbd6 <getRandomColorValue()+0x26>
     bca:	63 30       	cpi	r22, 0x03	; 3
     bcc:	71 05       	cpc	r23, r1
     bce:	31 f0       	breq	.+12     	; 0xbdc <getRandomColorValue()+0x2c>
     bd0:	90 e0       	ldi	r25, 0x00	; 0
     bd2:	80 e0       	ldi	r24, 0x00	; 0
     bd4:	08 95       	ret
     bd6:	8f e7       	ldi	r24, 0x7F	; 127
     bd8:	90 e0       	ldi	r25, 0x00	; 0
     bda:	08 95       	ret
     bdc:	8f ef       	ldi	r24, 0xFF	; 255
     bde:	90 e0       	ldi	r25, 0x00	; 0
     be0:	08 95       	ret

00000be2 <getRandomColor()>:
     be2:	27 e0       	ldi	r18, 0x07	; 7
     be4:	30 e0       	ldi	r19, 0x00	; 0
     be6:	40 e0       	ldi	r20, 0x00	; 0
     be8:	50 e0       	ldi	r21, 0x00	; 0
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	70 e0       	ldi	r23, 0x00	; 0
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
     bf6:	61 50       	subi	r22, 0x01	; 1
     bf8:	71 09       	sbc	r23, r1
     bfa:	67 30       	cpi	r22, 0x07	; 7
     bfc:	71 05       	cpc	r23, r1
     bfe:	40 f4       	brcc	.+16     	; 0xc10 <getRandomColor()+0x2e>
     c00:	66 0f       	add	r22, r22
     c02:	77 1f       	adc	r23, r23
     c04:	fb 01       	movw	r30, r22
     c06:	ec 55       	subi	r30, 0x5C	; 92
     c08:	fd 4f       	sbci	r31, 0xFD	; 253
     c0a:	80 81       	ld	r24, Z
     c0c:	91 81       	ldd	r25, Z+1	; 0x01
     c0e:	08 95       	ret
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	08 95       	ret

00000c16 <getRandomColorIncludingBlack()>:
     c16:	29 e0       	ldi	r18, 0x09	; 9
     c18:	30 e0       	ldi	r19, 0x00	; 0
     c1a:	40 e0       	ldi	r20, 0x00	; 0
     c1c:	50 e0       	ldi	r21, 0x00	; 0
     c1e:	61 e0       	ldi	r22, 0x01	; 1
     c20:	70 e0       	ldi	r23, 0x00	; 0
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
     c2a:	61 50       	subi	r22, 0x01	; 1
     c2c:	71 09       	sbc	r23, r1
     c2e:	67 30       	cpi	r22, 0x07	; 7
     c30:	71 05       	cpc	r23, r1
     c32:	40 f4       	brcc	.+16     	; 0xc44 <getRandomColorIncludingBlack()+0x2e>
     c34:	66 0f       	add	r22, r22
     c36:	77 1f       	adc	r23, r23
     c38:	fb 01       	movw	r30, r22
     c3a:	ea 56       	subi	r30, 0x6A	; 106
     c3c:	fd 4f       	sbci	r31, 0xFD	; 253
     c3e:	80 81       	ld	r24, Z
     c40:	91 81       	ldd	r25, Z+1	; 0x01
     c42:	08 95       	ret
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	08 95       	ret

00000c4a <progBlingBlingColoring(unsigned int, unsigned char)>:
     c4a:	0f 93       	push	r16
     c4c:	1f 93       	push	r17
     c4e:	cf 93       	push	r28
     c50:	df 93       	push	r29
     c52:	8c 01       	movw	r16, r24
     c54:	c6 2f       	mov	r28, r22
     c56:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     c5a:	81 11       	cpse	r24, r1
     c5c:	0e c0       	rjmp	.+28     	; 0xc7a <progBlingBlingColoring(unsigned int, unsigned char)+0x30>
     c5e:	61 e0       	ldi	r22, 0x01	; 1
     c60:	8f e0       	ldi	r24, 0x0F	; 15
     c62:	90 e1       	ldi	r25, 0x10	; 16
     c64:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
     c68:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     c6c:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     c70:	c0 93 fb 09 	sts	0x09FB, r28	; 0x8009fb <nextSongPart>
     c74:	81 e0       	ldi	r24, 0x01	; 1
     c76:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     c7a:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <progBlingBlingColoring_rounds>
     c7e:	90 91 b6 09 	lds	r25, 0x09B6	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
     c82:	89 2b       	or	r24, r25
     c84:	49 f4       	brne	.+18     	; 0xc98 <progBlingBlingColoring(unsigned int, unsigned char)+0x4e>
     c86:	94 df       	rcall	.-216    	; 0xbb0 <getRandomColorValue()>
     c88:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     c8c:	91 df       	rcall	.-222    	; 0xbb0 <getRandomColorValue()>
     c8e:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     c92:	8e df       	rcall	.-228    	; 0xbb0 <getRandomColorValue()>
     c94:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     c98:	c0 91 b7 09 	lds	r28, 0x09B7	; 0x8009b7 <b>
     c9c:	d0 91 b8 09 	lds	r29, 0x09B8	; 0x8009b8 <g>
     ca0:	10 91 b9 09 	lds	r17, 0x09B9	; 0x8009b9 <r>
     ca4:	26 e1       	ldi	r18, 0x16	; 22
     ca6:	31 e0       	ldi	r19, 0x01	; 1
     ca8:	40 e0       	ldi	r20, 0x00	; 0
     caa:	50 e0       	ldi	r21, 0x00	; 0
     cac:	60 e0       	ldi	r22, 0x00	; 0
     cae:	70 e0       	ldi	r23, 0x00	; 0
     cb0:	cb 01       	movw	r24, r22
     cb2:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
     cb6:	fb 01       	movw	r30, r22
     cb8:	ee 0f       	add	r30, r30
     cba:	ff 1f       	adc	r31, r31
     cbc:	e6 0f       	add	r30, r22
     cbe:	f7 1f       	adc	r31, r23
     cc0:	e0 5f       	subi	r30, 0xF0	; 240
     cc2:	f5 4f       	sbci	r31, 0xF5	; 245
     cc4:	10 83       	st	Z, r17
     cc6:	d1 83       	std	Z+1, r29	; 0x01
     cc8:	c2 83       	std	Z+2, r28	; 0x02
     cca:	23 e0       	ldi	r18, 0x03	; 3
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e0       	ldi	r20, 0x00	; 0
     cd0:	50 e0       	ldi	r21, 0x00	; 0
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	70 e0       	ldi	r23, 0x00	; 0
     cd6:	cb 01       	movw	r24, r22
     cd8:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
     cdc:	61 30       	cpi	r22, 0x01	; 1
     cde:	71 05       	cpc	r23, r1
     ce0:	81 05       	cpc	r24, r1
     ce2:	91 05       	cpc	r25, r1
     ce4:	99 f4       	brne	.+38     	; 0xd0c <progBlingBlingColoring(unsigned int, unsigned char)+0xc2>
     ce6:	26 e1       	ldi	r18, 0x16	; 22
     ce8:	31 e0       	ldi	r19, 0x01	; 1
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	60 e0       	ldi	r22, 0x00	; 0
     cf0:	70 e0       	ldi	r23, 0x00	; 0
     cf2:	cb 01       	movw	r24, r22
     cf4:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
     cf8:	fb 01       	movw	r30, r22
     cfa:	ee 0f       	add	r30, r30
     cfc:	ff 1f       	adc	r31, r31
     cfe:	e6 0f       	add	r30, r22
     d00:	f7 1f       	adc	r31, r23
     d02:	e0 5f       	subi	r30, 0xF0	; 240
     d04:	f5 4f       	sbci	r31, 0xF5	; 245
     d06:	10 82       	st	Z, r1
     d08:	11 82       	std	Z+1, r1	; 0x01
     d0a:	12 82       	std	Z+2, r1	; 0x02
     d0c:	8f e0       	ldi	r24, 0x0F	; 15
     d0e:	90 e1       	ldi	r25, 0x10	; 16
     d10:	3e df       	rcall	.-388    	; 0xb8e <CFastLED::show()>
     d12:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
     d16:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
     d1a:	88 39       	cpi	r24, 0x98	; 152
     d1c:	9a 43       	sbci	r25, 0x3A	; 58
     d1e:	f0 f0       	brcs	.+60     	; 0xd5c <progBlingBlingColoring(unsigned int, unsigned char)+0x112>
     d20:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
     d24:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
     d28:	84 e0       	ldi	r24, 0x04	; 4
     d2a:	0e 94 23 3a 	call	0x7446	; 0x7446 <analogRead>
     d2e:	0e 94 29 42 	call	0x8452	; 0x8452 <randomSeed(unsigned int)>
     d32:	80 91 b5 09 	lds	r24, 0x09B5	; 0x8009b5 <progBlingBlingColoring_rounds>
     d36:	90 91 b6 09 	lds	r25, 0x09B6	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
     d3a:	01 96       	adiw	r24, 0x01	; 1
     d3c:	84 30       	cpi	r24, 0x04	; 4
     d3e:	91 05       	cpc	r25, r1
     d40:	91 f0       	breq	.+36     	; 0xd66 <progBlingBlingColoring(unsigned int, unsigned char)+0x11c>
     d42:	90 93 b6 09 	sts	0x09B6, r25	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
     d46:	80 93 b5 09 	sts	0x09B5, r24	; 0x8009b5 <progBlingBlingColoring_rounds>
     d4a:	32 df       	rcall	.-412    	; 0xbb0 <getRandomColorValue()>
     d4c:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     d50:	2f df       	rcall	.-418    	; 0xbb0 <getRandomColorValue()>
     d52:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     d56:	2c df       	rcall	.-424    	; 0xbb0 <getRandomColorValue()>
     d58:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	08 95       	ret
     d66:	81 e0       	ldi	r24, 0x01	; 1
     d68:	90 e0       	ldi	r25, 0x00	; 0
     d6a:	eb cf       	rjmp	.-42     	; 0xd42 <progBlingBlingColoring(unsigned int, unsigned char)+0xf8>

00000d6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>:
     d6c:	df 92       	push	r13
     d6e:	ef 92       	push	r14
     d70:	ff 92       	push	r15
     d72:	0f 93       	push	r16
     d74:	1f 93       	push	r17
     d76:	cf 93       	push	r28
     d78:	df 93       	push	r29
     d7a:	7c 01       	movw	r14, r24
     d7c:	06 2f       	mov	r16, r22
     d7e:	c4 2f       	mov	r28, r20
     d80:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     d84:	81 11       	cpse	r24, r1
     d86:	0e c0       	rjmp	.+28     	; 0xda4 <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x38>
     d88:	61 e0       	ldi	r22, 0x01	; 1
     d8a:	8f e0       	ldi	r24, 0x0F	; 15
     d8c:	90 e1       	ldi	r25, 0x10	; 16
     d8e:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
     d92:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
     d96:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
     d9a:	c0 93 fb 09 	sts	0x09FB, r28	; 0x8009fb <nextSongPart>
     d9e:	81 e0       	ldi	r24, 0x01	; 1
     da0:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     da4:	60 e0       	ldi	r22, 0x00	; 0
     da6:	8f e0       	ldi	r24, 0x0F	; 15
     da8:	90 e1       	ldi	r25, 0x10	; 16
     daa:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
     dae:	8f ef       	ldi	r24, 0xFF	; 255
     db0:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <FastLED>
     db4:	d0 e0       	ldi	r29, 0x00	; 0
     db6:	c0 e0       	ldi	r28, 0x00	; 0
     db8:	10 e0       	ldi	r17, 0x00	; 0
     dba:	c0 17       	cp	r28, r16
     dbc:	d1 07       	cpc	r29, r17
     dbe:	dc f4       	brge	.+54     	; 0xdf6 <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x8a>
     dc0:	f7 de       	rcall	.-530    	; 0xbb0 <getRandomColorValue()>
     dc2:	f8 2e       	mov	r15, r24
     dc4:	f5 de       	rcall	.-534    	; 0xbb0 <getRandomColorValue()>
     dc6:	e8 2e       	mov	r14, r24
     dc8:	f3 de       	rcall	.-538    	; 0xbb0 <getRandomColorValue()>
     dca:	d8 2e       	mov	r13, r24
     dcc:	26 e1       	ldi	r18, 0x16	; 22
     dce:	31 e0       	ldi	r19, 0x01	; 1
     dd0:	40 e0       	ldi	r20, 0x00	; 0
     dd2:	50 e0       	ldi	r21, 0x00	; 0
     dd4:	60 e0       	ldi	r22, 0x00	; 0
     dd6:	70 e0       	ldi	r23, 0x00	; 0
     dd8:	cb 01       	movw	r24, r22
     dda:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
     dde:	fb 01       	movw	r30, r22
     de0:	ee 0f       	add	r30, r30
     de2:	ff 1f       	adc	r31, r31
     de4:	e6 0f       	add	r30, r22
     de6:	f7 1f       	adc	r31, r23
     de8:	e0 5f       	subi	r30, 0xF0	; 240
     dea:	f5 4f       	sbci	r31, 0xF5	; 245
     dec:	d0 82       	st	Z, r13
     dee:	e1 82       	std	Z+1, r14	; 0x01
     df0:	f2 82       	std	Z+2, r15	; 0x02
     df2:	21 96       	adiw	r28, 0x01	; 1
     df4:	e2 cf       	rjmp	.-60     	; 0xdba <progFastBlingBling(unsigned int, unsigned char, unsigned char)+0x4e>
     df6:	8f e0       	ldi	r24, 0x0F	; 15
     df8:	90 e1       	ldi	r25, 0x10	; 16
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	df 90       	pop	r13
     e08:	c2 ce       	rjmp	.-636    	; 0xb8e <CFastLED::show()>

00000e0a <progFullColors(unsigned int, unsigned char, unsigned int)>:
     e0a:	cf 92       	push	r12
     e0c:	df 92       	push	r13
     e0e:	ff 92       	push	r15
     e10:	0f 93       	push	r16
     e12:	1f 93       	push	r17
     e14:	cf 93       	push	r28
     e16:	df 93       	push	r29
     e18:	00 d0       	rcall	.+0      	; 0xe1a <progFullColors(unsigned int, unsigned char, unsigned int)+0x10>
     e1a:	1f 92       	push	r1
     e1c:	cd b7       	in	r28, 0x3d	; 61
     e1e:	de b7       	in	r29, 0x3e	; 62
     e20:	6c 01       	movw	r12, r24
     e22:	f6 2e       	mov	r15, r22
     e24:	8a 01       	movw	r16, r20
     e26:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     e2a:	81 11       	cpse	r24, r1
     e2c:	12 c0       	rjmp	.+36     	; 0xe52 <progFullColors(unsigned int, unsigned char, unsigned int)+0x48>
     e2e:	61 e0       	ldi	r22, 0x01	; 1
     e30:	8f e0       	ldi	r24, 0x0F	; 15
     e32:	90 e1       	ldi	r25, 0x10	; 16
     e34:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
     e38:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
     e3c:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
     e40:	f0 92 fb 09 	sts	0x09FB, r15	; 0x8009fb <nextSongPart>
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     e4a:	10 93 03 0a 	sts	0x0A03, r17	; 0x800a03 <millisCounterTimer+0x1>
     e4e:	00 93 02 0a 	sts	0x0A02, r16	; 0x800a02 <millisCounterTimer>
     e52:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
     e56:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
     e5a:	80 17       	cp	r24, r16
     e5c:	91 07       	cpc	r25, r17
     e5e:	78 f1       	brcs	.+94     	; 0xebe <progFullColors(unsigned int, unsigned char, unsigned int)+0xb4>
     e60:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
     e64:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
     e68:	a3 de       	rcall	.-698    	; 0xbb0 <getRandomColorValue()>
     e6a:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     e6e:	a0 de       	rcall	.-704    	; 0xbb0 <getRandomColorValue()>
     e70:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     e74:	9d de       	rcall	.-710    	; 0xbb0 <getRandomColorValue()>
     e76:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     e7a:	90 91 b9 09 	lds	r25, 0x09B9	; 0x8009b9 <r>
     e7e:	91 11       	cpse	r25, r1
     e80:	0f c0       	rjmp	.+30     	; 0xea0 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e82:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <g>
     e86:	91 11       	cpse	r25, r1
     e88:	0b c0       	rjmp	.+22     	; 0xea0 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e8a:	81 11       	cpse	r24, r1
     e8c:	09 c0       	rjmp	.+18     	; 0xea0 <progFullColors(unsigned int, unsigned char, unsigned int)+0x96>
     e8e:	90 de       	rcall	.-736    	; 0xbb0 <getRandomColorValue()>
     e90:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
     e94:	8d de       	rcall	.-742    	; 0xbb0 <getRandomColorValue()>
     e96:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
     e9a:	8a de       	rcall	.-748    	; 0xbb0 <getRandomColorValue()>
     e9c:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
     ea0:	80 91 b7 09 	lds	r24, 0x09B7	; 0x8009b7 <b>
     ea4:	90 91 b8 09 	lds	r25, 0x09B8	; 0x8009b8 <g>
     ea8:	20 91 b9 09 	lds	r18, 0x09B9	; 0x8009b9 <r>
     eac:	29 83       	std	Y+1, r18	; 0x01
     eae:	9a 83       	std	Y+2, r25	; 0x02
     eb0:	8b 83       	std	Y+3, r24	; 0x03
     eb2:	be 01       	movw	r22, r28
     eb4:	6f 5f       	subi	r22, 0xFF	; 255
     eb6:	7f 4f       	sbci	r23, 0xFF	; 255
     eb8:	8f e0       	ldi	r24, 0x0F	; 15
     eba:	90 e1       	ldi	r25, 0x10	; 16
     ebc:	6c de       	rcall	.-808    	; 0xb96 <CFastLED::showColor(CRGB const&)>
     ebe:	0f 90       	pop	r0
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
     ec4:	df 91       	pop	r29
     ec6:	cf 91       	pop	r28
     ec8:	1f 91       	pop	r17
     eca:	0f 91       	pop	r16
     ecc:	ff 90       	pop	r15
     ece:	df 90       	pop	r13
     ed0:	cf 90       	pop	r12
     ed2:	08 95       	ret

00000ed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>:
     ed4:	af 92       	push	r10
     ed6:	bf 92       	push	r11
     ed8:	cf 92       	push	r12
     eda:	df 92       	push	r13
     edc:	ef 92       	push	r14
     ede:	ff 92       	push	r15
     ee0:	0f 93       	push	r16
     ee2:	1f 93       	push	r17
     ee4:	cf 93       	push	r28
     ee6:	df 93       	push	r29
     ee8:	00 d0       	rcall	.+0      	; 0xeea <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x16>
     eea:	1f 92       	push	r1
     eec:	cd b7       	in	r28, 0x3d	; 61
     eee:	de b7       	in	r29, 0x3e	; 62
     ef0:	5c 01       	movw	r10, r24
     ef2:	f6 2e       	mov	r15, r22
     ef4:	6a 01       	movw	r12, r20
     ef6:	12 2f       	mov	r17, r18
     ef8:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     efc:	81 11       	cpse	r24, r1
     efe:	12 c0       	rjmp	.+36     	; 0xf24 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x50>
     f00:	61 e0       	ldi	r22, 0x01	; 1
     f02:	8f e0       	ldi	r24, 0x0F	; 15
     f04:	90 e1       	ldi	r25, 0x10	; 16
     f06:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
     f0a:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
     f0e:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
     f12:	f0 92 fb 09 	sts	0x09FB, r15	; 0x8009fb <nextSongPart>
     f16:	81 e0       	ldi	r24, 0x01	; 1
     f18:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     f1c:	d0 92 03 0a 	sts	0x0A03, r13	; 0x800a03 <millisCounterTimer+0x1>
     f20:	c0 92 02 0a 	sts	0x0A02, r12	; 0x800a02 <millisCounterTimer>
     f24:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
     f28:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
     f2c:	8c 15       	cp	r24, r12
     f2e:	9d 05       	cpc	r25, r13
     f30:	98 f0       	brcs	.+38     	; 0xf58 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>
     f32:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
     f36:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
     f3a:	80 91 05 0a 	lds	r24, 0x0A05	; 0x800a05 <progStroboIsBlack>
     f3e:	88 23       	and	r24, r24
     f40:	c9 f0       	breq	.+50     	; 0xf74 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0xa0>
     f42:	19 83       	std	Y+1, r17	; 0x01
     f44:	0a 83       	std	Y+2, r16	; 0x02
     f46:	eb 82       	std	Y+3, r14	; 0x03
     f48:	be 01       	movw	r22, r28
     f4a:	6f 5f       	subi	r22, 0xFF	; 255
     f4c:	7f 4f       	sbci	r23, 0xFF	; 255
     f4e:	8f e0       	ldi	r24, 0x0F	; 15
     f50:	90 e1       	ldi	r25, 0x10	; 16
     f52:	21 de       	rcall	.-958    	; 0xb96 <CFastLED::showColor(CRGB const&)>
     f54:	10 92 05 0a 	sts	0x0A05, r1	; 0x800a05 <progStroboIsBlack>
     f58:	0f 90       	pop	r0
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
     f5e:	df 91       	pop	r29
     f60:	cf 91       	pop	r28
     f62:	1f 91       	pop	r17
     f64:	0f 91       	pop	r16
     f66:	ff 90       	pop	r15
     f68:	ef 90       	pop	r14
     f6a:	df 90       	pop	r13
     f6c:	cf 90       	pop	r12
     f6e:	bf 90       	pop	r11
     f70:	af 90       	pop	r10
     f72:	08 95       	ret
     f74:	19 82       	std	Y+1, r1	; 0x01
     f76:	1a 82       	std	Y+2, r1	; 0x02
     f78:	1b 82       	std	Y+3, r1	; 0x03
     f7a:	be 01       	movw	r22, r28
     f7c:	6f 5f       	subi	r22, 0xFF	; 255
     f7e:	7f 4f       	sbci	r23, 0xFF	; 255
     f80:	8f e0       	ldi	r24, 0x0F	; 15
     f82:	90 e1       	ldi	r25, 0x10	; 16
     f84:	08 de       	rcall	.-1008   	; 0xb96 <CFastLED::showColor(CRGB const&)>
     f86:	81 e0       	ldi	r24, 0x01	; 1
     f88:	80 93 05 0a 	sts	0x0A05, r24	; 0x800a05 <progStroboIsBlack>
     f8c:	e5 cf       	rjmp	.-54     	; 0xf58 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)+0x84>

00000f8e <progMatrixScanner(unsigned int, unsigned char)>:
     f8e:	ef 92       	push	r14
     f90:	ff 92       	push	r15
     f92:	0f 93       	push	r16
     f94:	1f 93       	push	r17
     f96:	cf 93       	push	r28
     f98:	8c 01       	movw	r16, r24
     f9a:	c6 2f       	mov	r28, r22
     f9c:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     fa0:	81 11       	cpse	r24, r1
     fa2:	0e c0       	rjmp	.+28     	; 0xfc0 <progMatrixScanner(unsigned int, unsigned char)+0x32>
     fa4:	61 e0       	ldi	r22, 0x01	; 1
     fa6:	8f e0       	ldi	r24, 0x0F	; 15
     fa8:	90 e1       	ldi	r25, 0x10	; 16
     faa:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
     fae:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
     fb2:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
     fb6:	c0 93 fb 09 	sts	0x09FB, r28	; 0x8009fb <nextSongPart>
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
     fc0:	60 91 f3 09 	lds	r22, 0x09F3	; 0x8009f3 <zaehler>
     fc4:	70 91 f4 09 	lds	r23, 0x09F4	; 0x8009f4 <zaehler+0x1>
     fc8:	9b 01       	movw	r18, r22
     fca:	2f 5f       	subi	r18, 0xFF	; 255
     fcc:	3f 4f       	sbci	r19, 0xFF	; 255
     fce:	40 91 ee 09 	lds	r20, 0x09EE	; 0x8009ee <scannerGoesBack>
     fd2:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
     fd6:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
     fda:	41 11       	cpse	r20, r1
     fdc:	52 c0       	rjmp	.+164    	; 0x1082 <progMatrixScanner(unsigned int, unsigned char)+0xf4>
     fde:	30 93 f4 09 	sts	0x09F4, r19	; 0x8009f4 <zaehler+0x1>
     fe2:	20 93 f3 09 	sts	0x09F3, r18	; 0x8009f3 <zaehler>
     fe6:	27 31       	cpi	r18, 0x17	; 23
     fe8:	31 05       	cpc	r19, r1
     fea:	1c f0       	brlt	.+6      	; 0xff2 <progMatrixScanner(unsigned int, unsigned char)+0x64>
     fec:	21 e0       	ldi	r18, 0x01	; 1
     fee:	20 93 ee 09 	sts	0x09EE, r18	; 0x8009ee <scannerGoesBack>
     ff2:	9b 01       	movw	r18, r22
     ff4:	2d 5f       	subi	r18, 0xFD	; 253
     ff6:	3f 4f       	sbci	r19, 0xFF	; 255
     ff8:	dc 01       	movw	r26, r24
     ffa:	ed 91       	ld	r30, X+
     ffc:	fc 91       	ld	r31, X
     ffe:	00 a0       	ldd	r0, Z+32	; 0x20
    1000:	f1 a1       	ldd	r31, Z+33	; 0x21
    1002:	e0 2d       	mov	r30, r0
    1004:	e1 2c       	mov	r14, r1
    1006:	58 ef       	ldi	r21, 0xF8	; 248
    1008:	f5 2e       	mov	r15, r21
    100a:	07 e1       	ldi	r16, 0x17	; 23
    100c:	10 e0       	ldi	r17, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	40 e0       	ldi	r20, 0x00	; 0
    1012:	09 95       	icall
    1014:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1018:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    101c:	60 91 f3 09 	lds	r22, 0x09F3	; 0x8009f3 <zaehler>
    1020:	70 91 f4 09 	lds	r23, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1024:	9b 01       	movw	r18, r22
    1026:	2f 5f       	subi	r18, 0xFF	; 255
    1028:	3f 4f       	sbci	r19, 0xFF	; 255
    102a:	dc 01       	movw	r26, r24
    102c:	ed 91       	ld	r30, X+
    102e:	fc 91       	ld	r31, X
    1030:	00 a0       	ldd	r0, Z+32	; 0x20
    1032:	f1 a1       	ldd	r31, Z+33	; 0x21
    1034:	e0 2d       	mov	r30, r0
    1036:	ee 24       	eor	r14, r14
    1038:	ea 94       	dec	r14
    103a:	fe 2c       	mov	r15, r14
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	40 e0       	ldi	r20, 0x00	; 0
    1040:	09 95       	icall
    1042:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1046:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    104a:	60 91 f3 09 	lds	r22, 0x09F3	; 0x8009f3 <zaehler>
    104e:	70 91 f4 09 	lds	r23, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1052:	9b 01       	movw	r18, r22
    1054:	22 50       	subi	r18, 0x02	; 2
    1056:	31 09       	sbc	r19, r1
    1058:	65 50       	subi	r22, 0x05	; 5
    105a:	71 09       	sbc	r23, r1
    105c:	dc 01       	movw	r26, r24
    105e:	ed 91       	ld	r30, X+
    1060:	fc 91       	ld	r31, X
    1062:	00 a0       	ldd	r0, Z+32	; 0x20
    1064:	f1 a1       	ldd	r31, Z+33	; 0x21
    1066:	e0 2d       	mov	r30, r0
    1068:	f1 2c       	mov	r15, r1
    106a:	e1 2c       	mov	r14, r1
    106c:	50 e0       	ldi	r21, 0x00	; 0
    106e:	40 e0       	ldi	r20, 0x00	; 0
    1070:	09 95       	icall
    1072:	8f e0       	ldi	r24, 0x0F	; 15
    1074:	90 e1       	ldi	r25, 0x10	; 16
    1076:	cf 91       	pop	r28
    1078:	1f 91       	pop	r17
    107a:	0f 91       	pop	r16
    107c:	ff 90       	pop	r15
    107e:	ef 90       	pop	r14
    1080:	86 cd       	rjmp	.-1268   	; 0xb8e <CFastLED::show()>
    1082:	61 50       	subi	r22, 0x01	; 1
    1084:	71 09       	sbc	r23, r1
    1086:	70 93 f4 09 	sts	0x09F4, r23	; 0x8009f4 <zaehler+0x1>
    108a:	60 93 f3 09 	sts	0x09F3, r22	; 0x8009f3 <zaehler>
    108e:	6e 3f       	cpi	r22, 0xFE	; 254
    1090:	bf ef       	ldi	r27, 0xFF	; 255
    1092:	7b 07       	cpc	r23, r27
    1094:	14 f4       	brge	.+4      	; 0x109a <progMatrixScanner(unsigned int, unsigned char)+0x10c>
    1096:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <scannerGoesBack>
    109a:	dc 01       	movw	r26, r24
    109c:	ed 91       	ld	r30, X+
    109e:	fc 91       	ld	r31, X
    10a0:	00 a0       	ldd	r0, Z+32	; 0x20
    10a2:	f1 a1       	ldd	r31, Z+33	; 0x21
    10a4:	e0 2d       	mov	r30, r0
    10a6:	e1 2c       	mov	r14, r1
    10a8:	48 ef       	ldi	r20, 0xF8	; 248
    10aa:	f4 2e       	mov	r15, r20
    10ac:	07 e1       	ldi	r16, 0x17	; 23
    10ae:	10 e0       	ldi	r17, 0x00	; 0
    10b0:	50 e0       	ldi	r21, 0x00	; 0
    10b2:	40 e0       	ldi	r20, 0x00	; 0
    10b4:	09 95       	icall
    10b6:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    10ba:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    10be:	60 91 f3 09 	lds	r22, 0x09F3	; 0x8009f3 <zaehler>
    10c2:	70 91 f4 09 	lds	r23, 0x09F4	; 0x8009f4 <zaehler+0x1>
    10c6:	9b 01       	movw	r18, r22
    10c8:	2c 5f       	subi	r18, 0xFC	; 252
    10ca:	3f 4f       	sbci	r19, 0xFF	; 255
    10cc:	6e 5f       	subi	r22, 0xFE	; 254
    10ce:	7f 4f       	sbci	r23, 0xFF	; 255
    10d0:	c5 cf       	rjmp	.-118    	; 0x105c <progMatrixScanner(unsigned int, unsigned char)+0xce>

000010d2 <progStern(unsigned int, int, unsigned char)>:
    10d2:	8f 92       	push	r8
    10d4:	9f 92       	push	r9
    10d6:	af 92       	push	r10
    10d8:	bf 92       	push	r11
    10da:	cf 92       	push	r12
    10dc:	df 92       	push	r13
    10de:	ef 92       	push	r14
    10e0:	ff 92       	push	r15
    10e2:	0f 93       	push	r16
    10e4:	1f 93       	push	r17
    10e6:	cf 93       	push	r28
    10e8:	df 93       	push	r29
    10ea:	7c 01       	movw	r14, r24
    10ec:	eb 01       	movw	r28, r22
    10ee:	14 2f       	mov	r17, r20
    10f0:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    10f4:	81 11       	cpse	r24, r1
    10f6:	18 c0       	rjmp	.+48     	; 0x1128 <progStern(unsigned int, int, unsigned char)+0x56>
    10f8:	61 e0       	ldi	r22, 0x01	; 1
    10fa:	8f e0       	ldi	r24, 0x0F	; 15
    10fc:	90 e1       	ldi	r25, 0x10	; 16
    10fe:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1102:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    1106:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    110a:	10 93 fb 09 	sts	0x09FB, r17	; 0x8009fb <nextSongPart>
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1114:	66 dd       	rcall	.-1332   	; 0xbe2 <getRandomColor()>
    1116:	90 93 0e 0a 	sts	0x0A0E, r25	; 0x800a0e <col1+0x1>
    111a:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <col1>
    111e:	61 dd       	rcall	.-1342   	; 0xbe2 <getRandomColor()>
    1120:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <col2+0x1>
    1124:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <col2>
    1128:	1c 16       	cp	r1, r28
    112a:	1d 06       	cpc	r1, r29
    112c:	ac f4       	brge	.+42     	; 0x1158 <progStern(unsigned int, int, unsigned char)+0x86>
    112e:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    1132:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    1136:	8c 17       	cp	r24, r28
    1138:	9d 07       	cpc	r25, r29
    113a:	70 f0       	brcs	.+28     	; 0x1158 <progStern(unsigned int, int, unsigned char)+0x86>
    113c:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    1140:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    1144:	4e dd       	rcall	.-1380   	; 0xbe2 <getRandomColor()>
    1146:	90 93 0e 0a 	sts	0x0A0E, r25	; 0x800a0e <col1+0x1>
    114a:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <col1>
    114e:	49 dd       	rcall	.-1390   	; 0xbe2 <getRandomColor()>
    1150:	90 93 0c 0a 	sts	0x0A0C, r25	; 0x800a0c <col2+0x1>
    1154:	80 93 0b 0a 	sts	0x0A0B, r24	; 0x800a0b <col2>
    1158:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    115c:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1160:	01 96       	adiw	r24, 0x01	; 1
    1162:	8a 30       	cpi	r24, 0x0A	; 10
    1164:	91 05       	cpc	r25, r1
    1166:	0c f0       	brlt	.+2      	; 0x116a <progStern(unsigned int, int, unsigned char)+0x98>
    1168:	fc c0       	rjmp	.+504    	; 0x1362 <progStern(unsigned int, int, unsigned char)+0x290>
    116a:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    116e:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    1172:	60 e0       	ldi	r22, 0x00	; 0
    1174:	8f e0       	ldi	r24, 0x0F	; 15
    1176:	90 e1       	ldi	r25, 0x10	; 16
    1178:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    117c:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1180:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1184:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    1188:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    118c:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <col1>
    1190:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <col1+0x1>
    1194:	9a 01       	movw	r18, r20
    1196:	26 5f       	subi	r18, 0xF6	; 246
    1198:	3f 4f       	sbci	r19, 0xFF	; 255
    119a:	6a e0       	ldi	r22, 0x0A	; 10
    119c:	a6 2e       	mov	r10, r22
    119e:	b1 2c       	mov	r11, r1
    11a0:	b5 01       	movw	r22, r10
    11a2:	64 1b       	sub	r22, r20
    11a4:	75 0b       	sbc	r23, r21
    11a6:	dc 01       	movw	r26, r24
    11a8:	ed 91       	ld	r30, X+
    11aa:	fc 91       	ld	r31, X
    11ac:	04 a0       	ldd	r0, Z+36	; 0x24
    11ae:	f5 a1       	ldd	r31, Z+37	; 0x25
    11b0:	e0 2d       	mov	r30, r0
    11b2:	06 e1       	ldi	r16, 0x16	; 22
    11b4:	10 e0       	ldi	r17, 0x00	; 0
    11b6:	50 e0       	ldi	r21, 0x00	; 0
    11b8:	40 e0       	ldi	r20, 0x00	; 0
    11ba:	09 95       	icall
    11bc:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    11c0:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    11c4:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    11c8:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    11cc:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col2>
    11d0:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col2+0x1>
    11d4:	9a 01       	movw	r18, r20
    11d6:	25 5f       	subi	r18, 0xF5	; 245
    11d8:	3f 4f       	sbci	r19, 0xFF	; 255
    11da:	7b e0       	ldi	r23, 0x0B	; 11
    11dc:	87 2e       	mov	r8, r23
    11de:	91 2c       	mov	r9, r1
    11e0:	b4 01       	movw	r22, r8
    11e2:	64 1b       	sub	r22, r20
    11e4:	75 0b       	sbc	r23, r21
    11e6:	dc 01       	movw	r26, r24
    11e8:	ed 91       	ld	r30, X+
    11ea:	fc 91       	ld	r31, X
    11ec:	04 a0       	ldd	r0, Z+36	; 0x24
    11ee:	f5 a1       	ldd	r31, Z+37	; 0x25
    11f0:	e0 2d       	mov	r30, r0
    11f2:	50 e0       	ldi	r21, 0x00	; 0
    11f4:	40 e0       	ldi	r20, 0x00	; 0
    11f6:	09 95       	icall
    11f8:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    11fc:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1200:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    1204:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1208:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <col1>
    120c:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <col1+0x1>
    1210:	e6 e1       	ldi	r30, 0x16	; 22
    1212:	ce 2e       	mov	r12, r30
    1214:	d1 2c       	mov	r13, r1
    1216:	04 1b       	sub	r16, r20
    1218:	15 0b       	sbc	r17, r21
    121a:	4f 5f       	subi	r20, 0xFF	; 255
    121c:	5f 4f       	sbci	r21, 0xFF	; 255
    121e:	dc 01       	movw	r26, r24
    1220:	ed 91       	ld	r30, X+
    1222:	fc 91       	ld	r31, X
    1224:	04 a0       	ldd	r0, Z+36	; 0x24
    1226:	f5 a1       	ldd	r31, Z+37	; 0x25
    1228:	e0 2d       	mov	r30, r0
    122a:	25 e1       	ldi	r18, 0x15	; 21
    122c:	30 e0       	ldi	r19, 0x00	; 0
    122e:	70 e0       	ldi	r23, 0x00	; 0
    1230:	60 e0       	ldi	r22, 0x00	; 0
    1232:	09 95       	icall
    1234:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1238:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    123c:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    1240:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1244:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col2>
    1248:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col2+0x1>
    124c:	c5 e1       	ldi	r28, 0x15	; 21
    124e:	d0 e0       	ldi	r29, 0x00	; 0
    1250:	8e 01       	movw	r16, r28
    1252:	04 1b       	sub	r16, r20
    1254:	15 0b       	sbc	r17, r21
    1256:	dc 01       	movw	r26, r24
    1258:	ed 91       	ld	r30, X+
    125a:	fc 91       	ld	r31, X
    125c:	04 a0       	ldd	r0, Z+36	; 0x24
    125e:	f5 a1       	ldd	r31, Z+37	; 0x25
    1260:	e0 2d       	mov	r30, r0
    1262:	25 e1       	ldi	r18, 0x15	; 21
    1264:	30 e0       	ldi	r19, 0x00	; 0
    1266:	70 e0       	ldi	r23, 0x00	; 0
    1268:	60 e0       	ldi	r22, 0x00	; 0
    126a:	09 95       	icall
    126c:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1270:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1274:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    1278:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    127c:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <col1>
    1280:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <col1+0x1>
    1284:	84 01       	movw	r16, r8
    1286:	04 1b       	sub	r16, r20
    1288:	15 0b       	sbc	r17, r21
    128a:	45 5f       	subi	r20, 0xF5	; 245
    128c:	5f 4f       	sbci	r21, 0xFF	; 255
    128e:	dc 01       	movw	r26, r24
    1290:	ed 91       	ld	r30, X+
    1292:	fc 91       	ld	r31, X
    1294:	04 a0       	ldd	r0, Z+36	; 0x24
    1296:	f5 a1       	ldd	r31, Z+37	; 0x25
    1298:	e0 2d       	mov	r30, r0
    129a:	25 e1       	ldi	r18, 0x15	; 21
    129c:	30 e0       	ldi	r19, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	60 e0       	ldi	r22, 0x00	; 0
    12a2:	09 95       	icall
    12a4:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    12a8:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    12ac:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    12b0:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    12b4:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col2>
    12b8:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col2+0x1>
    12bc:	85 01       	movw	r16, r10
    12be:	04 1b       	sub	r16, r20
    12c0:	15 0b       	sbc	r17, r21
    12c2:	46 5f       	subi	r20, 0xF6	; 246
    12c4:	5f 4f       	sbci	r21, 0xFF	; 255
    12c6:	dc 01       	movw	r26, r24
    12c8:	ed 91       	ld	r30, X+
    12ca:	fc 91       	ld	r31, X
    12cc:	04 a0       	ldd	r0, Z+36	; 0x24
    12ce:	f5 a1       	ldd	r31, Z+37	; 0x25
    12d0:	e0 2d       	mov	r30, r0
    12d2:	25 e1       	ldi	r18, 0x15	; 21
    12d4:	30 e0       	ldi	r19, 0x00	; 0
    12d6:	70 e0       	ldi	r23, 0x00	; 0
    12d8:	60 e0       	ldi	r22, 0x00	; 0
    12da:	09 95       	icall
    12dc:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    12e0:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    12e4:	60 91 f3 09 	lds	r22, 0x09F3	; 0x8009f3 <zaehler>
    12e8:	70 91 f4 09 	lds	r23, 0x09F4	; 0x8009f4 <zaehler+0x1>
    12ec:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <col1>
    12f0:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <col1+0x1>
    12f4:	96 01       	movw	r18, r12
    12f6:	26 1b       	sub	r18, r22
    12f8:	37 0b       	sbc	r19, r23
    12fa:	dc 01       	movw	r26, r24
    12fc:	ed 91       	ld	r30, X+
    12fe:	fc 91       	ld	r31, X
    1300:	04 a0       	ldd	r0, Z+36	; 0x24
    1302:	f5 a1       	ldd	r31, Z+37	; 0x25
    1304:	e0 2d       	mov	r30, r0
    1306:	10 e0       	ldi	r17, 0x00	; 0
    1308:	00 e0       	ldi	r16, 0x00	; 0
    130a:	46 e1       	ldi	r20, 0x16	; 22
    130c:	50 e0       	ldi	r21, 0x00	; 0
    130e:	09 95       	icall
    1310:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1314:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1318:	60 91 f3 09 	lds	r22, 0x09F3	; 0x8009f3 <zaehler>
    131c:	70 91 f4 09 	lds	r23, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1320:	e0 90 0b 0a 	lds	r14, 0x0A0B	; 0x800a0b <col2>
    1324:	f0 90 0c 0a 	lds	r15, 0x0A0C	; 0x800a0c <col2+0x1>
    1328:	9e 01       	movw	r18, r28
    132a:	26 1b       	sub	r18, r22
    132c:	37 0b       	sbc	r19, r23
    132e:	61 50       	subi	r22, 0x01	; 1
    1330:	71 09       	sbc	r23, r1
    1332:	dc 01       	movw	r26, r24
    1334:	ed 91       	ld	r30, X+
    1336:	fc 91       	ld	r31, X
    1338:	04 a0       	ldd	r0, Z+36	; 0x24
    133a:	f5 a1       	ldd	r31, Z+37	; 0x25
    133c:	e0 2d       	mov	r30, r0
    133e:	46 e1       	ldi	r20, 0x16	; 22
    1340:	50 e0       	ldi	r21, 0x00	; 0
    1342:	09 95       	icall
    1344:	8f e0       	ldi	r24, 0x0F	; 15
    1346:	90 e1       	ldi	r25, 0x10	; 16
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	1f 91       	pop	r17
    134e:	0f 91       	pop	r16
    1350:	ff 90       	pop	r15
    1352:	ef 90       	pop	r14
    1354:	df 90       	pop	r13
    1356:	cf 90       	pop	r12
    1358:	bf 90       	pop	r11
    135a:	af 90       	pop	r10
    135c:	9f 90       	pop	r9
    135e:	8f 90       	pop	r8
    1360:	16 cc       	rjmp	.-2004   	; 0xb8e <CFastLED::show()>
    1362:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <zaehler+0x1>
    1366:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <zaehler>
    136a:	03 cf       	rjmp	.-506    	; 0x1172 <progStern(unsigned int, int, unsigned char)+0xa0>

0000136c <progStern(unsigned int, unsigned char)>:
    136c:	46 2f       	mov	r20, r22
    136e:	70 e0       	ldi	r23, 0x00	; 0
    1370:	60 e0       	ldi	r22, 0x00	; 0
    1372:	af ce       	rjmp	.-674    	; 0x10d2 <progStern(unsigned int, int, unsigned char)>

00001374 <progBlack(unsigned int, unsigned char)>:
    1374:	0f 93       	push	r16
    1376:	1f 93       	push	r17
    1378:	cf 93       	push	r28
    137a:	8c 01       	movw	r16, r24
    137c:	c6 2f       	mov	r28, r22
    137e:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1382:	81 11       	cpse	r24, r1
    1384:	0e c0       	rjmp	.+28     	; 0x13a2 <progBlack(unsigned int, unsigned char)+0x2e>
    1386:	61 e0       	ldi	r22, 0x01	; 1
    1388:	8f e0       	ldi	r24, 0x0F	; 15
    138a:	90 e1       	ldi	r25, 0x10	; 16
    138c:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1390:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1394:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1398:	c0 93 fb 09 	sts	0x09FB, r28	; 0x8009fb <nextSongPart>
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    13a2:	60 e0       	ldi	r22, 0x00	; 0
    13a4:	8f e0       	ldi	r24, 0x0F	; 15
    13a6:	90 e1       	ldi	r25, 0x10	; 16
    13a8:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    13ac:	8f e0       	ldi	r24, 0x0F	; 15
    13ae:	90 e1       	ldi	r25, 0x10	; 16
    13b0:	cf 91       	pop	r28
    13b2:	1f 91       	pop	r17
    13b4:	0f 91       	pop	r16
    13b6:	eb cb       	rjmp	.-2090   	; 0xb8e <CFastLED::show()>

000013b8 <progCircles(unsigned int, unsigned char, unsigned int)>:
    13b8:	8f 92       	push	r8
    13ba:	9f 92       	push	r9
    13bc:	af 92       	push	r10
    13be:	bf 92       	push	r11
    13c0:	cf 92       	push	r12
    13c2:	df 92       	push	r13
    13c4:	ef 92       	push	r14
    13c6:	ff 92       	push	r15
    13c8:	0f 93       	push	r16
    13ca:	1f 93       	push	r17
    13cc:	cf 93       	push	r28
    13ce:	df 93       	push	r29
    13d0:	7c 01       	movw	r14, r24
    13d2:	16 2f       	mov	r17, r22
    13d4:	ea 01       	movw	r28, r20
    13d6:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    13da:	81 11       	cpse	r24, r1
    13dc:	12 c0       	rjmp	.+36     	; 0x1402 <progCircles(unsigned int, unsigned char, unsigned int)+0x4a>
    13de:	61 e0       	ldi	r22, 0x01	; 1
    13e0:	8f e0       	ldi	r24, 0x0F	; 15
    13e2:	90 e1       	ldi	r25, 0x10	; 16
    13e4:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    13e8:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    13ec:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    13f0:	10 93 fb 09 	sts	0x09FB, r17	; 0x8009fb <nextSongPart>
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    13fa:	d0 93 03 0a 	sts	0x0A03, r29	; 0x800a03 <millisCounterTimer+0x1>
    13fe:	c0 93 02 0a 	sts	0x0A02, r28	; 0x800a02 <millisCounterTimer>
    1402:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    1406:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    140a:	8c 17       	cp	r24, r28
    140c:	9d 07       	cpc	r25, r29
    140e:	e0 f1       	brcs	.+120    	; 0x1488 <progCircles(unsigned int, unsigned char, unsigned int)+0xd0>
    1410:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    1414:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    1418:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    141c:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1420:	fa db       	rcall	.-2060   	; 0xc16 <getRandomColorIncludingBlack()>
    1422:	8c 01       	movw	r16, r24
    1424:	2a e0       	ldi	r18, 0x0A	; 10
    1426:	30 e0       	ldi	r19, 0x00	; 0
    1428:	40 e0       	ldi	r20, 0x00	; 0
    142a:	50 e0       	ldi	r21, 0x00	; 0
    142c:	63 e0       	ldi	r22, 0x03	; 3
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
    1438:	4b 01       	movw	r8, r22
    143a:	26 e1       	ldi	r18, 0x16	; 22
    143c:	30 e0       	ldi	r19, 0x00	; 0
    143e:	40 e0       	ldi	r20, 0x00	; 0
    1440:	50 e0       	ldi	r21, 0x00	; 0
    1442:	60 e0       	ldi	r22, 0x00	; 0
    1444:	70 e0       	ldi	r23, 0x00	; 0
    1446:	cb 01       	movw	r24, r22
    1448:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
    144c:	6b 01       	movw	r12, r22
    144e:	25 e1       	ldi	r18, 0x15	; 21
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	40 e0       	ldi	r20, 0x00	; 0
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	60 e0       	ldi	r22, 0x00	; 0
    1458:	70 e0       	ldi	r23, 0x00	; 0
    145a:	cb 01       	movw	r24, r22
    145c:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
    1460:	94 01       	movw	r18, r8
    1462:	a6 01       	movw	r20, r12
    1464:	ce 01       	movw	r24, r28
    1466:	0e 94 85 2d 	call	0x5b0a	; 0x5b0a <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>
    146a:	8f e0       	ldi	r24, 0x0F	; 15
    146c:	90 e1       	ldi	r25, 0x10	; 16
    146e:	df 91       	pop	r29
    1470:	cf 91       	pop	r28
    1472:	1f 91       	pop	r17
    1474:	0f 91       	pop	r16
    1476:	ff 90       	pop	r15
    1478:	ef 90       	pop	r14
    147a:	df 90       	pop	r13
    147c:	cf 90       	pop	r12
    147e:	bf 90       	pop	r11
    1480:	af 90       	pop	r10
    1482:	9f 90       	pop	r9
    1484:	8f 90       	pop	r8
    1486:	83 cb       	rjmp	.-2298   	; 0xb8e <CFastLED::show()>
    1488:	df 91       	pop	r29
    148a:	cf 91       	pop	r28
    148c:	1f 91       	pop	r17
    148e:	0f 91       	pop	r16
    1490:	ff 90       	pop	r15
    1492:	ef 90       	pop	r14
    1494:	df 90       	pop	r13
    1496:	cf 90       	pop	r12
    1498:	bf 90       	pop	r11
    149a:	af 90       	pop	r10
    149c:	9f 90       	pop	r9
    149e:	8f 90       	pop	r8
    14a0:	08 95       	ret

000014a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>:
    14a2:	cf 92       	push	r12
    14a4:	df 92       	push	r13
    14a6:	ef 92       	push	r14
    14a8:	ff 92       	push	r15
    14aa:	0f 93       	push	r16
    14ac:	1f 93       	push	r17
    14ae:	cf 93       	push	r28
    14b0:	df 93       	push	r29
    14b2:	6c 01       	movw	r12, r24
    14b4:	f6 2e       	mov	r15, r22
    14b6:	ea 01       	movw	r28, r20
    14b8:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    14bc:	81 11       	cpse	r24, r1
    14be:	12 c0       	rjmp	.+36     	; 0x14e4 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x42>
    14c0:	61 e0       	ldi	r22, 0x01	; 1
    14c2:	8f e0       	ldi	r24, 0x0F	; 15
    14c4:	90 e1       	ldi	r25, 0x10	; 16
    14c6:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    14ca:	d0 92 07 01 	sts	0x0107, r13	; 0x800107 <nextChangeMillis+0x1>
    14ce:	c0 92 06 01 	sts	0x0106, r12	; 0x800106 <nextChangeMillis>
    14d2:	f0 92 fb 09 	sts	0x09FB, r15	; 0x8009fb <nextSongPart>
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    14dc:	d0 93 03 0a 	sts	0x0A03, r29	; 0x800a03 <millisCounterTimer+0x1>
    14e0:	c0 93 02 0a 	sts	0x0A02, r28	; 0x800a02 <millisCounterTimer>
    14e4:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    14e8:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    14ec:	8c 17       	cp	r24, r28
    14ee:	9d 07       	cpc	r25, r29
    14f0:	08 f4       	brcc	.+2      	; 0x14f4 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x52>
    14f2:	72 c0       	rjmp	.+228    	; 0x15d8 <progRandomLines(unsigned int, unsigned char, unsigned int)+0x136>
    14f4:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    14f8:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    14fc:	25 e1       	ldi	r18, 0x15	; 21
    14fe:	30 e0       	ldi	r19, 0x00	; 0
    1500:	40 e0       	ldi	r20, 0x00	; 0
    1502:	50 e0       	ldi	r21, 0x00	; 0
    1504:	60 e0       	ldi	r22, 0x00	; 0
    1506:	70 e0       	ldi	r23, 0x00	; 0
    1508:	cb 01       	movw	r24, r22
    150a:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
    150e:	c6 2f       	mov	r28, r22
    1510:	25 e1       	ldi	r18, 0x15	; 21
    1512:	30 e0       	ldi	r19, 0x00	; 0
    1514:	40 e0       	ldi	r20, 0x00	; 0
    1516:	50 e0       	ldi	r21, 0x00	; 0
    1518:	60 e0       	ldi	r22, 0x00	; 0
    151a:	70 e0       	ldi	r23, 0x00	; 0
    151c:	cb 01       	movw	r24, r22
    151e:	0e 94 48 42 	call	0x8490	; 0x8490 <random(long, long)>
    1522:	c6 2e       	mov	r12, r22
    1524:	5e db       	rcall	.-2372   	; 0xbe2 <getRandomColor()>
    1526:	90 93 0e 0a 	sts	0x0A0E, r25	; 0x800a0e <col1+0x1>
    152a:	80 93 0d 0a 	sts	0x0A0D, r24	; 0x800a0d <col1>
    152e:	60 e0       	ldi	r22, 0x00	; 0
    1530:	8f e0       	ldi	r24, 0x0F	; 15
    1532:	90 e1       	ldi	r25, 0x10	; 16
    1534:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1538:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    153c:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1540:	d1 2c       	mov	r13, r1
    1542:	d0 e0       	ldi	r29, 0x00	; 0
    1544:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <col1>
    1548:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <col1+0x1>
    154c:	96 01       	movw	r18, r12
    154e:	21 50       	subi	r18, 0x01	; 1
    1550:	31 09       	sbc	r19, r1
    1552:	be 01       	movw	r22, r28
    1554:	61 50       	subi	r22, 0x01	; 1
    1556:	71 09       	sbc	r23, r1
    1558:	dc 01       	movw	r26, r24
    155a:	ed 91       	ld	r30, X+
    155c:	fc 91       	ld	r31, X
    155e:	04 a0       	ldd	r0, Z+36	; 0x24
    1560:	f5 a1       	ldd	r31, Z+37	; 0x25
    1562:	e0 2d       	mov	r30, r0
    1564:	06 e1       	ldi	r16, 0x16	; 22
    1566:	10 e0       	ldi	r17, 0x00	; 0
    1568:	50 e0       	ldi	r21, 0x00	; 0
    156a:	40 e0       	ldi	r20, 0x00	; 0
    156c:	09 95       	icall
    156e:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1572:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1576:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <col1>
    157a:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <col1+0x1>
    157e:	dc 01       	movw	r26, r24
    1580:	ed 91       	ld	r30, X+
    1582:	fc 91       	ld	r31, X
    1584:	04 a0       	ldd	r0, Z+36	; 0x24
    1586:	f5 a1       	ldd	r31, Z+37	; 0x25
    1588:	e0 2d       	mov	r30, r0
    158a:	96 01       	movw	r18, r12
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	40 e0       	ldi	r20, 0x00	; 0
    1590:	be 01       	movw	r22, r28
    1592:	09 95       	icall
    1594:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1598:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    159c:	e0 90 0d 0a 	lds	r14, 0x0A0D	; 0x800a0d <col1>
    15a0:	f0 90 0e 0a 	lds	r15, 0x0A0E	; 0x800a0e <col1+0x1>
    15a4:	96 01       	movw	r18, r12
    15a6:	2f 5f       	subi	r18, 0xFF	; 255
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	be 01       	movw	r22, r28
    15ac:	6f 5f       	subi	r22, 0xFF	; 255
    15ae:	7f 4f       	sbci	r23, 0xFF	; 255
    15b0:	dc 01       	movw	r26, r24
    15b2:	ed 91       	ld	r30, X+
    15b4:	fc 91       	ld	r31, X
    15b6:	04 a0       	ldd	r0, Z+36	; 0x24
    15b8:	f5 a1       	ldd	r31, Z+37	; 0x25
    15ba:	e0 2d       	mov	r30, r0
    15bc:	50 e0       	ldi	r21, 0x00	; 0
    15be:	40 e0       	ldi	r20, 0x00	; 0
    15c0:	09 95       	icall
    15c2:	8f e0       	ldi	r24, 0x0F	; 15
    15c4:	90 e1       	ldi	r25, 0x10	; 16
    15c6:	df 91       	pop	r29
    15c8:	cf 91       	pop	r28
    15ca:	1f 91       	pop	r17
    15cc:	0f 91       	pop	r16
    15ce:	ff 90       	pop	r15
    15d0:	ef 90       	pop	r14
    15d2:	df 90       	pop	r13
    15d4:	cf 90       	pop	r12
    15d6:	db ca       	rjmp	.-2634   	; 0xb8e <CFastLED::show()>
    15d8:	df 91       	pop	r29
    15da:	cf 91       	pop	r28
    15dc:	1f 91       	pop	r17
    15de:	0f 91       	pop	r16
    15e0:	ff 90       	pop	r15
    15e2:	ef 90       	pop	r14
    15e4:	df 90       	pop	r13
    15e6:	cf 90       	pop	r12
    15e8:	08 95       	ret

000015ea <progMovingLines(unsigned int, unsigned char)>:
    15ea:	cf 92       	push	r12
    15ec:	df 92       	push	r13
    15ee:	ef 92       	push	r14
    15f0:	ff 92       	push	r15
    15f2:	0f 93       	push	r16
    15f4:	1f 93       	push	r17
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	8c 01       	movw	r16, r24
    15fc:	c6 2f       	mov	r28, r22
    15fe:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1602:	81 11       	cpse	r24, r1
    1604:	0e c0       	rjmp	.+28     	; 0x1622 <progMovingLines(unsigned int, unsigned char)+0x38>
    1606:	61 e0       	ldi	r22, 0x01	; 1
    1608:	8f e0       	ldi	r24, 0x0F	; 15
    160a:	90 e1       	ldi	r25, 0x10	; 16
    160c:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1610:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1614:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1618:	c0 93 fb 09 	sts	0x09FB, r28	; 0x8009fb <nextSongPart>
    161c:	81 e0       	ldi	r24, 0x01	; 1
    161e:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1622:	60 e0       	ldi	r22, 0x00	; 0
    1624:	8f e0       	ldi	r24, 0x0F	; 15
    1626:	90 e1       	ldi	r25, 0x10	; 16
    1628:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    162c:	80 91 ec 09 	lds	r24, 0x09EC	; 0x8009ec <stage>
    1630:	90 91 ed 09 	lds	r25, 0x09ED	; 0x8009ed <stage+0x1>
    1634:	82 30       	cpi	r24, 0x02	; 2
    1636:	91 05       	cpc	r25, r1
    1638:	09 f4       	brne	.+2      	; 0x163c <progMovingLines(unsigned int, unsigned char)+0x52>
    163a:	59 c0       	rjmp	.+178    	; 0x16ee <progMovingLines(unsigned int, unsigned char)+0x104>
    163c:	7c f4       	brge	.+30     	; 0x165c <progMovingLines(unsigned int, unsigned char)+0x72>
    163e:	00 97       	sbiw	r24, 0x00	; 0
    1640:	39 f1       	breq	.+78     	; 0x1690 <progMovingLines(unsigned int, unsigned char)+0xa6>
    1642:	01 97       	sbiw	r24, 0x01	; 1
    1644:	e1 f1       	breq	.+120    	; 0x16be <progMovingLines(unsigned int, unsigned char)+0xd4>
    1646:	8f e0       	ldi	r24, 0x0F	; 15
    1648:	90 e1       	ldi	r25, 0x10	; 16
    164a:	df 91       	pop	r29
    164c:	cf 91       	pop	r28
    164e:	1f 91       	pop	r17
    1650:	0f 91       	pop	r16
    1652:	ff 90       	pop	r15
    1654:	ef 90       	pop	r14
    1656:	df 90       	pop	r13
    1658:	cf 90       	pop	r12
    165a:	99 ca       	rjmp	.-2766   	; 0xb8e <CFastLED::show()>
    165c:	84 30       	cpi	r24, 0x04	; 4
    165e:	91 05       	cpc	r25, r1
    1660:	09 f4       	brne	.+2      	; 0x1664 <progMovingLines(unsigned int, unsigned char)+0x7a>
    1662:	9a c0       	rjmp	.+308    	; 0x1798 <progMovingLines(unsigned int, unsigned char)+0x1ae>
    1664:	0c f4       	brge	.+2      	; 0x1668 <progMovingLines(unsigned int, unsigned char)+0x7e>
    1666:	72 c0       	rjmp	.+228    	; 0x174c <progMovingLines(unsigned int, unsigned char)+0x162>
    1668:	05 97       	sbiw	r24, 0x05	; 5
    166a:	69 f7       	brne	.-38     	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    166c:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    1670:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1674:	01 97       	sbiw	r24, 0x01	; 1
    1676:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    167a:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    167e:	18 16       	cp	r1, r24
    1680:	19 06       	cpc	r1, r25
    1682:	0c f4       	brge	.+2      	; 0x1686 <progMovingLines(unsigned int, unsigned char)+0x9c>
    1684:	9d c0       	rjmp	.+314    	; 0x17c0 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    1686:	10 92 ed 09 	sts	0x09ED, r1	; 0x8009ed <stage+0x1>
    168a:	10 92 ec 09 	sts	0x09EC, r1	; 0x8009ec <stage>
    168e:	12 c0       	rjmp	.+36     	; 0x16b4 <progMovingLines(unsigned int, unsigned char)+0xca>
    1690:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    1694:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1698:	01 96       	adiw	r24, 0x01	; 1
    169a:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    169e:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    16a2:	4a 97       	sbiw	r24, 0x1a	; 26
    16a4:	0c f4       	brge	.+2      	; 0x16a8 <progMovingLines(unsigned int, unsigned char)+0xbe>
    16a6:	61 c0       	rjmp	.+194    	; 0x176a <progMovingLines(unsigned int, unsigned char)+0x180>
    16a8:	81 e0       	ldi	r24, 0x01	; 1
    16aa:	90 e0       	ldi	r25, 0x00	; 0
    16ac:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    16b0:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    16b4:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <zaehler+0x1>
    16b8:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <zaehler>
    16bc:	c4 cf       	rjmp	.-120    	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    16be:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    16c2:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    16c6:	01 96       	adiw	r24, 0x01	; 1
    16c8:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    16cc:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    16d0:	0c 97       	sbiw	r24, 0x0c	; 12
    16d2:	14 f1       	brlt	.+68     	; 0x1718 <progMovingLines(unsigned int, unsigned char)+0x12e>
    16d4:	82 e0       	ldi	r24, 0x02	; 2
    16d6:	90 e0       	ldi	r25, 0x00	; 0
    16d8:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    16dc:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    16e0:	8c e0       	ldi	r24, 0x0C	; 12
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    16e8:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    16ec:	ac cf       	rjmp	.-168    	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    16ee:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    16f2:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    16f6:	01 97       	sbiw	r24, 0x01	; 1
    16f8:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    16fc:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    1700:	18 16       	cp	r1, r24
    1702:	19 06       	cpc	r1, r25
    1704:	4c f0       	brlt	.+18     	; 0x1718 <progMovingLines(unsigned int, unsigned char)+0x12e>
    1706:	83 e0       	ldi	r24, 0x03	; 3
    1708:	90 e0       	ldi	r25, 0x00	; 0
    170a:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    170e:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    1712:	89 e1       	ldi	r24, 0x19	; 25
    1714:	90 e0       	ldi	r25, 0x00	; 0
    1716:	e6 cf       	rjmp	.-52     	; 0x16e4 <progMovingLines(unsigned int, unsigned char)+0xfa>
    1718:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    171c:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1720:	e8 81       	ld	r30, Y
    1722:	f9 81       	ldd	r31, Y+1	; 0x01
    1724:	c4 a0       	ldd	r12, Z+36	; 0x24
    1726:	d5 a0       	ldd	r13, Z+37	; 0x25
    1728:	5c da       	rcall	.-2888   	; 0xbe2 <getRandomColor()>
    172a:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    172e:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1732:	06 e1       	ldi	r16, 0x16	; 22
    1734:	10 e0       	ldi	r17, 0x00	; 0
    1736:	04 1b       	sub	r16, r20
    1738:	15 0b       	sbc	r17, r21
    173a:	7c 01       	movw	r14, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	69 e1       	ldi	r22, 0x19	; 25
    1742:	70 e0       	ldi	r23, 0x00	; 0
    1744:	ce 01       	movw	r24, r28
    1746:	f6 01       	movw	r30, r12
    1748:	09 95       	icall
    174a:	7d cf       	rjmp	.-262    	; 0x1646 <progMovingLines(unsigned int, unsigned char)+0x5c>
    174c:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    1750:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1754:	01 97       	sbiw	r24, 0x01	; 1
    1756:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    175a:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    175e:	18 16       	cp	r1, r24
    1760:	19 06       	cpc	r1, r25
    1762:	1c f0       	brlt	.+6      	; 0x176a <progMovingLines(unsigned int, unsigned char)+0x180>
    1764:	84 e0       	ldi	r24, 0x04	; 4
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	a1 cf       	rjmp	.-190    	; 0x16ac <progMovingLines(unsigned int, unsigned char)+0xc2>
    176a:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    176e:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1772:	e8 81       	ld	r30, Y
    1774:	f9 81       	ldd	r31, Y+1	; 0x01
    1776:	c4 a0       	ldd	r12, Z+36	; 0x24
    1778:	d5 a0       	ldd	r13, Z+37	; 0x25
    177a:	33 da       	rcall	.-2970   	; 0xbe2 <getRandomColor()>
    177c:	60 91 f3 09 	lds	r22, 0x09F3	; 0x8009f3 <zaehler>
    1780:	70 91 f4 09 	lds	r23, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1784:	29 e1       	ldi	r18, 0x19	; 25
    1786:	30 e0       	ldi	r19, 0x00	; 0
    1788:	26 1b       	sub	r18, r22
    178a:	37 0b       	sbc	r19, r23
    178c:	7c 01       	movw	r14, r24
    178e:	06 e1       	ldi	r16, 0x16	; 22
    1790:	10 e0       	ldi	r17, 0x00	; 0
    1792:	50 e0       	ldi	r21, 0x00	; 0
    1794:	40 e0       	ldi	r20, 0x00	; 0
    1796:	d6 cf       	rjmp	.-84     	; 0x1744 <progMovingLines(unsigned int, unsigned char)+0x15a>
    1798:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    179c:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    17a0:	01 96       	adiw	r24, 0x01	; 1
    17a2:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    17a6:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    17aa:	0b 97       	sbiw	r24, 0x0b	; 11
    17ac:	4c f0       	brlt	.+18     	; 0x17c0 <progMovingLines(unsigned int, unsigned char)+0x1d6>
    17ae:	85 e0       	ldi	r24, 0x05	; 5
    17b0:	90 e0       	ldi	r25, 0x00	; 0
    17b2:	90 93 ed 09 	sts	0x09ED, r25	; 0x8009ed <stage+0x1>
    17b6:	80 93 ec 09 	sts	0x09EC, r24	; 0x8009ec <stage>
    17ba:	8a e0       	ldi	r24, 0x0A	; 10
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	92 cf       	rjmp	.-220    	; 0x16e4 <progMovingLines(unsigned int, unsigned char)+0xfa>
    17c0:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    17c4:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    17c8:	e8 81       	ld	r30, Y
    17ca:	f9 81       	ldd	r31, Y+1	; 0x01
    17cc:	c4 a0       	ldd	r12, Z+36	; 0x24
    17ce:	d5 a0       	ldd	r13, Z+37	; 0x25
    17d0:	08 da       	rcall	.-3056   	; 0xbe2 <getRandomColor()>
    17d2:	40 91 f3 09 	lds	r20, 0x09F3	; 0x8009f3 <zaehler>
    17d6:	50 91 f4 09 	lds	r21, 0x09F4	; 0x8009f4 <zaehler+0x1>
    17da:	06 e1       	ldi	r16, 0x16	; 22
    17dc:	10 e0       	ldi	r17, 0x00	; 0
    17de:	04 1b       	sub	r16, r20
    17e0:	15 0b       	sbc	r17, r21
    17e2:	7c 01       	movw	r14, r24
    17e4:	29 e1       	ldi	r18, 0x19	; 25
    17e6:	30 e0       	ldi	r19, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	60 e0       	ldi	r22, 0x00	; 0
    17ec:	ab cf       	rjmp	.-170    	; 0x1744 <progMovingLines(unsigned int, unsigned char)+0x15a>

000017ee <progOutline(unsigned int, unsigned char)>:
    17ee:	cf 92       	push	r12
    17f0:	df 92       	push	r13
    17f2:	ef 92       	push	r14
    17f4:	ff 92       	push	r15
    17f6:	0f 93       	push	r16
    17f8:	1f 93       	push	r17
    17fa:	cf 93       	push	r28
    17fc:	df 93       	push	r29
    17fe:	8c 01       	movw	r16, r24
    1800:	c6 2f       	mov	r28, r22
    1802:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1806:	81 11       	cpse	r24, r1
    1808:	0e c0       	rjmp	.+28     	; 0x1826 <progOutline(unsigned int, unsigned char)+0x38>
    180a:	61 e0       	ldi	r22, 0x01	; 1
    180c:	8f e0       	ldi	r24, 0x0F	; 15
    180e:	90 e1       	ldi	r25, 0x10	; 16
    1810:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1814:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1818:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    181c:	c0 93 fb 09 	sts	0x09FB, r28	; 0x8009fb <nextSongPart>
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1826:	60 e0       	ldi	r22, 0x00	; 0
    1828:	8f e0       	ldi	r24, 0x0F	; 15
    182a:	90 e1       	ldi	r25, 0x10	; 16
    182c:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1830:	80 91 ee 09 	lds	r24, 0x09EE	; 0x8009ee <scannerGoesBack>
    1834:	e0 91 f3 09 	lds	r30, 0x09F3	; 0x8009f3 <zaehler>
    1838:	f0 91 f4 09 	lds	r31, 0x09F4	; 0x8009f4 <zaehler+0x1>
    183c:	81 11       	cpse	r24, r1
    183e:	08 c1       	rjmp	.+528    	; 0x1a50 <progOutline(unsigned int, unsigned char)+0x262>
    1840:	e9 30       	cpi	r30, 0x09	; 9
    1842:	f1 05       	cpc	r31, r1
    1844:	28 f5       	brcc	.+74     	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1846:	e9 5d       	subi	r30, 0xD9	; 217
    1848:	f3 4f       	sbci	r31, 0xF3	; 243
    184a:	0c 94 45 45 	jmp	0x8a8a	; 0x8a8a <__tablejump2__>
    184e:	30 0c       	add	r3, r0
    1850:	62 0c       	add	r6, r2
    1852:	7b 0c       	add	r7, r11
    1854:	94 0c       	add	r9, r4
    1856:	ad 0c       	add	r10, r13
    1858:	c6 0c       	add	r12, r6
    185a:	de 0c       	add	r13, r14
    185c:	f7 0c       	add	r15, r7
    185e:	10 0d       	add	r17, r0
    1860:	ca ea       	ldi	r28, 0xAA	; 170
    1862:	d7 e0       	ldi	r29, 0x07	; 7
    1864:	06 e4       	ldi	r16, 0x46	; 70
    1866:	18 e0       	ldi	r17, 0x08	; 8
    1868:	e9 90       	ld	r14, Y+
    186a:	f9 90       	ld	r15, Y+
    186c:	a1 d9       	rcall	.-3262   	; 0xbb0 <getRandomColorValue()>
    186e:	d8 2e       	mov	r13, r24
    1870:	9f d9       	rcall	.-3266   	; 0xbb0 <getRandomColorValue()>
    1872:	c8 2e       	mov	r12, r24
    1874:	9d d9       	rcall	.-3270   	; 0xbb0 <getRandomColorValue()>
    1876:	f7 01       	movw	r30, r14
    1878:	ee 0f       	add	r30, r30
    187a:	ff 1f       	adc	r31, r31
    187c:	ee 0d       	add	r30, r14
    187e:	ff 1d       	adc	r31, r15
    1880:	e0 5f       	subi	r30, 0xF0	; 240
    1882:	f5 4f       	sbci	r31, 0xF5	; 245
    1884:	80 83       	st	Z, r24
    1886:	c1 82       	std	Z+1, r12	; 0x01
    1888:	d2 82       	std	Z+2, r13	; 0x02
    188a:	0c 17       	cp	r16, r28
    188c:	1d 07       	cpc	r17, r29
    188e:	61 f7       	brne	.-40     	; 0x1868 <progOutline(unsigned int, unsigned char)+0x7a>
    1890:	8f e0       	ldi	r24, 0x0F	; 15
    1892:	90 e1       	ldi	r25, 0x10	; 16
    1894:	7c d9       	rcall	.-3336   	; 0xb8e <CFastLED::show()>
    1896:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    189a:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    189e:	01 96       	adiw	r24, 0x01	; 1
    18a0:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    18a4:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    18a8:	09 97       	sbiw	r24, 0x09	; 9
    18aa:	1c f0       	brlt	.+6      	; 0x18b2 <progOutline(unsigned int, unsigned char)+0xc4>
    18ac:	81 e0       	ldi	r24, 0x01	; 1
    18ae:	80 93 ee 09 	sts	0x09EE, r24	; 0x8009ee <scannerGoesBack>
    18b2:	df 91       	pop	r29
    18b4:	cf 91       	pop	r28
    18b6:	1f 91       	pop	r17
    18b8:	0f 91       	pop	r16
    18ba:	ff 90       	pop	r15
    18bc:	ef 90       	pop	r14
    18be:	df 90       	pop	r13
    18c0:	cf 90       	pop	r12
    18c2:	08 95       	ret
    18c4:	ce e1       	ldi	r28, 0x1E	; 30
    18c6:	d7 e0       	ldi	r29, 0x07	; 7
    18c8:	0a ea       	ldi	r16, 0xAA	; 170
    18ca:	17 e0       	ldi	r17, 0x07	; 7
    18cc:	e9 90       	ld	r14, Y+
    18ce:	f9 90       	ld	r15, Y+
    18d0:	6f d9       	rcall	.-3362   	; 0xbb0 <getRandomColorValue()>
    18d2:	d8 2e       	mov	r13, r24
    18d4:	6d d9       	rcall	.-3366   	; 0xbb0 <getRandomColorValue()>
    18d6:	c8 2e       	mov	r12, r24
    18d8:	6b d9       	rcall	.-3370   	; 0xbb0 <getRandomColorValue()>
    18da:	f7 01       	movw	r30, r14
    18dc:	ee 0f       	add	r30, r30
    18de:	ff 1f       	adc	r31, r31
    18e0:	ee 0d       	add	r30, r14
    18e2:	ff 1d       	adc	r31, r15
    18e4:	e0 5f       	subi	r30, 0xF0	; 240
    18e6:	f5 4f       	sbci	r31, 0xF5	; 245
    18e8:	80 83       	st	Z, r24
    18ea:	c1 82       	std	Z+1, r12	; 0x01
    18ec:	d2 82       	std	Z+2, r13	; 0x02
    18ee:	0c 17       	cp	r16, r28
    18f0:	1d 07       	cpc	r17, r29
    18f2:	61 f7       	brne	.-40     	; 0x18cc <progOutline(unsigned int, unsigned char)+0xde>
    18f4:	cd cf       	rjmp	.-102    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    18f6:	c2 eb       	ldi	r28, 0xB2	; 178
    18f8:	d6 e0       	ldi	r29, 0x06	; 6
    18fa:	0e e1       	ldi	r16, 0x1E	; 30
    18fc:	17 e0       	ldi	r17, 0x07	; 7
    18fe:	e9 90       	ld	r14, Y+
    1900:	f9 90       	ld	r15, Y+
    1902:	56 d9       	rcall	.-3412   	; 0xbb0 <getRandomColorValue()>
    1904:	d8 2e       	mov	r13, r24
    1906:	54 d9       	rcall	.-3416   	; 0xbb0 <getRandomColorValue()>
    1908:	c8 2e       	mov	r12, r24
    190a:	52 d9       	rcall	.-3420   	; 0xbb0 <getRandomColorValue()>
    190c:	f7 01       	movw	r30, r14
    190e:	ee 0f       	add	r30, r30
    1910:	ff 1f       	adc	r31, r31
    1912:	ee 0d       	add	r30, r14
    1914:	ff 1d       	adc	r31, r15
    1916:	e0 5f       	subi	r30, 0xF0	; 240
    1918:	f5 4f       	sbci	r31, 0xF5	; 245
    191a:	80 83       	st	Z, r24
    191c:	c1 82       	std	Z+1, r12	; 0x01
    191e:	d2 82       	std	Z+2, r13	; 0x02
    1920:	0c 17       	cp	r16, r28
    1922:	1d 07       	cpc	r17, r29
    1924:	61 f7       	brne	.-40     	; 0x18fe <progOutline(unsigned int, unsigned char)+0x110>
    1926:	b4 cf       	rjmp	.-152    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1928:	c8 e6       	ldi	r28, 0x68	; 104
    192a:	d6 e0       	ldi	r29, 0x06	; 6
    192c:	02 eb       	ldi	r16, 0xB2	; 178
    192e:	16 e0       	ldi	r17, 0x06	; 6
    1930:	e9 90       	ld	r14, Y+
    1932:	f9 90       	ld	r15, Y+
    1934:	3d d9       	rcall	.-3462   	; 0xbb0 <getRandomColorValue()>
    1936:	d8 2e       	mov	r13, r24
    1938:	3b d9       	rcall	.-3466   	; 0xbb0 <getRandomColorValue()>
    193a:	c8 2e       	mov	r12, r24
    193c:	39 d9       	rcall	.-3470   	; 0xbb0 <getRandomColorValue()>
    193e:	f7 01       	movw	r30, r14
    1940:	ee 0f       	add	r30, r30
    1942:	ff 1f       	adc	r31, r31
    1944:	ee 0d       	add	r30, r14
    1946:	ff 1d       	adc	r31, r15
    1948:	e0 5f       	subi	r30, 0xF0	; 240
    194a:	f5 4f       	sbci	r31, 0xF5	; 245
    194c:	80 83       	st	Z, r24
    194e:	c1 82       	std	Z+1, r12	; 0x01
    1950:	d2 82       	std	Z+2, r13	; 0x02
    1952:	0c 17       	cp	r16, r28
    1954:	1d 07       	cpc	r17, r29
    1956:	61 f7       	brne	.-40     	; 0x1930 <progOutline(unsigned int, unsigned char)+0x142>
    1958:	9b cf       	rjmp	.-202    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    195a:	c8 e2       	ldi	r28, 0x28	; 40
    195c:	d6 e0       	ldi	r29, 0x06	; 6
    195e:	08 e6       	ldi	r16, 0x68	; 104
    1960:	16 e0       	ldi	r17, 0x06	; 6
    1962:	e9 90       	ld	r14, Y+
    1964:	f9 90       	ld	r15, Y+
    1966:	24 d9       	rcall	.-3512   	; 0xbb0 <getRandomColorValue()>
    1968:	d8 2e       	mov	r13, r24
    196a:	22 d9       	rcall	.-3516   	; 0xbb0 <getRandomColorValue()>
    196c:	c8 2e       	mov	r12, r24
    196e:	20 d9       	rcall	.-3520   	; 0xbb0 <getRandomColorValue()>
    1970:	f7 01       	movw	r30, r14
    1972:	ee 0f       	add	r30, r30
    1974:	ff 1f       	adc	r31, r31
    1976:	ee 0d       	add	r30, r14
    1978:	ff 1d       	adc	r31, r15
    197a:	e0 5f       	subi	r30, 0xF0	; 240
    197c:	f5 4f       	sbci	r31, 0xF5	; 245
    197e:	80 83       	st	Z, r24
    1980:	c1 82       	std	Z+1, r12	; 0x01
    1982:	d2 82       	std	Z+2, r13	; 0x02
    1984:	0c 17       	cp	r16, r28
    1986:	1d 07       	cpc	r17, r29
    1988:	61 f7       	brne	.-40     	; 0x1962 <progOutline(unsigned int, unsigned char)+0x174>
    198a:	82 cf       	rjmp	.-252    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    198c:	cc ee       	ldi	r28, 0xEC	; 236
    198e:	d5 e0       	ldi	r29, 0x05	; 5
    1990:	09 91       	ld	r16, Y+
    1992:	19 91       	ld	r17, Y+
    1994:	0d d9       	rcall	.-3558   	; 0xbb0 <getRandomColorValue()>
    1996:	f8 2e       	mov	r15, r24
    1998:	0b d9       	rcall	.-3562   	; 0xbb0 <getRandomColorValue()>
    199a:	e8 2e       	mov	r14, r24
    199c:	09 d9       	rcall	.-3566   	; 0xbb0 <getRandomColorValue()>
    199e:	f8 01       	movw	r30, r16
    19a0:	ee 0f       	add	r30, r30
    19a2:	ff 1f       	adc	r31, r31
    19a4:	e0 0f       	add	r30, r16
    19a6:	f1 1f       	adc	r31, r17
    19a8:	e0 5f       	subi	r30, 0xF0	; 240
    19aa:	f5 4f       	sbci	r31, 0xF5	; 245
    19ac:	80 83       	st	Z, r24
    19ae:	e1 82       	std	Z+1, r14	; 0x01
    19b0:	f2 82       	std	Z+2, r15	; 0x02
    19b2:	86 e0       	ldi	r24, 0x06	; 6
    19b4:	c8 32       	cpi	r28, 0x28	; 40
    19b6:	d8 07       	cpc	r29, r24
    19b8:	59 f7       	brne	.-42     	; 0x1990 <progOutline(unsigned int, unsigned char)+0x1a2>
    19ba:	6a cf       	rjmp	.-300    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    19bc:	c6 eb       	ldi	r28, 0xB6	; 182
    19be:	d5 e0       	ldi	r29, 0x05	; 5
    19c0:	0c ee       	ldi	r16, 0xEC	; 236
    19c2:	15 e0       	ldi	r17, 0x05	; 5
    19c4:	e9 90       	ld	r14, Y+
    19c6:	f9 90       	ld	r15, Y+
    19c8:	f3 d8       	rcall	.-3610   	; 0xbb0 <getRandomColorValue()>
    19ca:	d8 2e       	mov	r13, r24
    19cc:	f1 d8       	rcall	.-3614   	; 0xbb0 <getRandomColorValue()>
    19ce:	c8 2e       	mov	r12, r24
    19d0:	ef d8       	rcall	.-3618   	; 0xbb0 <getRandomColorValue()>
    19d2:	f7 01       	movw	r30, r14
    19d4:	ee 0f       	add	r30, r30
    19d6:	ff 1f       	adc	r31, r31
    19d8:	ee 0d       	add	r30, r14
    19da:	ff 1d       	adc	r31, r15
    19dc:	e0 5f       	subi	r30, 0xF0	; 240
    19de:	f5 4f       	sbci	r31, 0xF5	; 245
    19e0:	80 83       	st	Z, r24
    19e2:	c1 82       	std	Z+1, r12	; 0x01
    19e4:	d2 82       	std	Z+2, r13	; 0x02
    19e6:	0c 17       	cp	r16, r28
    19e8:	1d 07       	cpc	r17, r29
    19ea:	61 f7       	brne	.-40     	; 0x19c4 <progOutline(unsigned int, unsigned char)+0x1d6>
    19ec:	51 cf       	rjmp	.-350    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    19ee:	c2 e8       	ldi	r28, 0x82	; 130
    19f0:	d5 e0       	ldi	r29, 0x05	; 5
    19f2:	06 eb       	ldi	r16, 0xB6	; 182
    19f4:	15 e0       	ldi	r17, 0x05	; 5
    19f6:	e9 90       	ld	r14, Y+
    19f8:	f9 90       	ld	r15, Y+
    19fa:	da d8       	rcall	.-3660   	; 0xbb0 <getRandomColorValue()>
    19fc:	d8 2e       	mov	r13, r24
    19fe:	d8 d8       	rcall	.-3664   	; 0xbb0 <getRandomColorValue()>
    1a00:	c8 2e       	mov	r12, r24
    1a02:	d6 d8       	rcall	.-3668   	; 0xbb0 <getRandomColorValue()>
    1a04:	f7 01       	movw	r30, r14
    1a06:	ee 0f       	add	r30, r30
    1a08:	ff 1f       	adc	r31, r31
    1a0a:	ee 0d       	add	r30, r14
    1a0c:	ff 1d       	adc	r31, r15
    1a0e:	e0 5f       	subi	r30, 0xF0	; 240
    1a10:	f5 4f       	sbci	r31, 0xF5	; 245
    1a12:	80 83       	st	Z, r24
    1a14:	c1 82       	std	Z+1, r12	; 0x01
    1a16:	d2 82       	std	Z+2, r13	; 0x02
    1a18:	0c 17       	cp	r16, r28
    1a1a:	1d 07       	cpc	r17, r29
    1a1c:	61 f7       	brne	.-40     	; 0x19f6 <progOutline(unsigned int, unsigned char)+0x208>
    1a1e:	38 cf       	rjmp	.-400    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1a20:	c2 e5       	ldi	r28, 0x52	; 82
    1a22:	d5 e0       	ldi	r29, 0x05	; 5
    1a24:	09 91       	ld	r16, Y+
    1a26:	19 91       	ld	r17, Y+
    1a28:	c3 d8       	rcall	.-3706   	; 0xbb0 <getRandomColorValue()>
    1a2a:	f8 2e       	mov	r15, r24
    1a2c:	c1 d8       	rcall	.-3710   	; 0xbb0 <getRandomColorValue()>
    1a2e:	e8 2e       	mov	r14, r24
    1a30:	bf d8       	rcall	.-3714   	; 0xbb0 <getRandomColorValue()>
    1a32:	f8 01       	movw	r30, r16
    1a34:	ee 0f       	add	r30, r30
    1a36:	ff 1f       	adc	r31, r31
    1a38:	e0 0f       	add	r30, r16
    1a3a:	f1 1f       	adc	r31, r17
    1a3c:	e0 5f       	subi	r30, 0xF0	; 240
    1a3e:	f5 4f       	sbci	r31, 0xF5	; 245
    1a40:	80 83       	st	Z, r24
    1a42:	e1 82       	std	Z+1, r14	; 0x01
    1a44:	f2 82       	std	Z+2, r15	; 0x02
    1a46:	85 e0       	ldi	r24, 0x05	; 5
    1a48:	c2 38       	cpi	r28, 0x82	; 130
    1a4a:	d8 07       	cpc	r29, r24
    1a4c:	59 f7       	brne	.-42     	; 0x1a24 <progOutline(unsigned int, unsigned char)+0x236>
    1a4e:	20 cf       	rjmp	.-448    	; 0x1890 <progOutline(unsigned int, unsigned char)+0xa2>
    1a50:	e9 30       	cpi	r30, 0x09	; 9
    1a52:	f1 05       	cpc	r31, r1
    1a54:	20 f5       	brcc	.+72     	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1a56:	e1 5d       	subi	r30, 0xD1	; 209
    1a58:	f2 4f       	sbci	r31, 0xF2	; 242
    1a5a:	0c 94 45 45 	jmp	0x8a8a	; 0x8a8a <__tablejump2__>
    1a5e:	38 0d       	add	r19, r8
    1a60:	62 0d       	add	r22, r2
    1a62:	7a 0d       	add	r23, r10
    1a64:	92 0d       	add	r25, r2
    1a66:	aa 0d       	add	r26, r10
    1a68:	c2 0d       	add	r28, r2
    1a6a:	da 0d       	add	r29, r10
    1a6c:	f5 0d       	add	r31, r5
    1a6e:	10 0e       	add	r1, r16
    1a70:	ca ea       	ldi	r28, 0xAA	; 170
    1a72:	d7 e0       	ldi	r29, 0x07	; 7
    1a74:	09 91       	ld	r16, Y+
    1a76:	19 91       	ld	r17, Y+
    1a78:	9b d8       	rcall	.-3786   	; 0xbb0 <getRandomColorValue()>
    1a7a:	f8 2e       	mov	r15, r24
    1a7c:	99 d8       	rcall	.-3790   	; 0xbb0 <getRandomColorValue()>
    1a7e:	e8 2e       	mov	r14, r24
    1a80:	97 d8       	rcall	.-3794   	; 0xbb0 <getRandomColorValue()>
    1a82:	f8 01       	movw	r30, r16
    1a84:	ee 0f       	add	r30, r30
    1a86:	ff 1f       	adc	r31, r31
    1a88:	e0 0f       	add	r30, r16
    1a8a:	f1 1f       	adc	r31, r17
    1a8c:	e0 5f       	subi	r30, 0xF0	; 240
    1a8e:	f5 4f       	sbci	r31, 0xF5	; 245
    1a90:	80 83       	st	Z, r24
    1a92:	e1 82       	std	Z+1, r14	; 0x01
    1a94:	f2 82       	std	Z+2, r15	; 0x02
    1a96:	88 e0       	ldi	r24, 0x08	; 8
    1a98:	c6 34       	cpi	r28, 0x46	; 70
    1a9a:	d8 07       	cpc	r29, r24
    1a9c:	59 f7       	brne	.-42     	; 0x1a74 <progOutline(unsigned int, unsigned char)+0x286>
    1a9e:	8f e0       	ldi	r24, 0x0F	; 15
    1aa0:	90 e1       	ldi	r25, 0x10	; 16
    1aa2:	75 d8       	rcall	.-3862   	; 0xb8e <CFastLED::show()>
    1aa4:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    1aa8:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    1aac:	01 97       	sbiw	r24, 0x01	; 1
    1aae:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    1ab2:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	19 06       	cpc	r1, r25
    1aba:	0c f4       	brge	.+2      	; 0x1abe <progOutline(unsigned int, unsigned char)+0x2d0>
    1abc:	fa ce       	rjmp	.-524    	; 0x18b2 <progOutline(unsigned int, unsigned char)+0xc4>
    1abe:	10 92 ee 09 	sts	0x09EE, r1	; 0x8009ee <scannerGoesBack>
    1ac2:	f7 ce       	rjmp	.-530    	; 0x18b2 <progOutline(unsigned int, unsigned char)+0xc4>
    1ac4:	ce e1       	ldi	r28, 0x1E	; 30
    1ac6:	d7 e0       	ldi	r29, 0x07	; 7
    1ac8:	09 91       	ld	r16, Y+
    1aca:	19 91       	ld	r17, Y+
    1acc:	71 d8       	rcall	.-3870   	; 0xbb0 <getRandomColorValue()>
    1ace:	f8 2e       	mov	r15, r24
    1ad0:	6f d8       	rcall	.-3874   	; 0xbb0 <getRandomColorValue()>
    1ad2:	e8 2e       	mov	r14, r24
    1ad4:	6d d8       	rcall	.-3878   	; 0xbb0 <getRandomColorValue()>
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	ee 0f       	add	r30, r30
    1ada:	ff 1f       	adc	r31, r31
    1adc:	e0 0f       	add	r30, r16
    1ade:	f1 1f       	adc	r31, r17
    1ae0:	e0 5f       	subi	r30, 0xF0	; 240
    1ae2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ae4:	80 83       	st	Z, r24
    1ae6:	e1 82       	std	Z+1, r14	; 0x01
    1ae8:	f2 82       	std	Z+2, r15	; 0x02
    1aea:	87 e0       	ldi	r24, 0x07	; 7
    1aec:	ca 3a       	cpi	r28, 0xAA	; 170
    1aee:	d8 07       	cpc	r29, r24
    1af0:	59 f7       	brne	.-42     	; 0x1ac8 <progOutline(unsigned int, unsigned char)+0x2da>
    1af2:	d5 cf       	rjmp	.-86     	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1af4:	c2 eb       	ldi	r28, 0xB2	; 178
    1af6:	d6 e0       	ldi	r29, 0x06	; 6
    1af8:	09 91       	ld	r16, Y+
    1afa:	19 91       	ld	r17, Y+
    1afc:	59 d8       	rcall	.-3918   	; 0xbb0 <getRandomColorValue()>
    1afe:	f8 2e       	mov	r15, r24
    1b00:	57 d8       	rcall	.-3922   	; 0xbb0 <getRandomColorValue()>
    1b02:	e8 2e       	mov	r14, r24
    1b04:	55 d8       	rcall	.-3926   	; 0xbb0 <getRandomColorValue()>
    1b06:	f8 01       	movw	r30, r16
    1b08:	ee 0f       	add	r30, r30
    1b0a:	ff 1f       	adc	r31, r31
    1b0c:	e0 0f       	add	r30, r16
    1b0e:	f1 1f       	adc	r31, r17
    1b10:	e0 5f       	subi	r30, 0xF0	; 240
    1b12:	f5 4f       	sbci	r31, 0xF5	; 245
    1b14:	80 83       	st	Z, r24
    1b16:	e1 82       	std	Z+1, r14	; 0x01
    1b18:	f2 82       	std	Z+2, r15	; 0x02
    1b1a:	87 e0       	ldi	r24, 0x07	; 7
    1b1c:	ce 31       	cpi	r28, 0x1E	; 30
    1b1e:	d8 07       	cpc	r29, r24
    1b20:	59 f7       	brne	.-42     	; 0x1af8 <progOutline(unsigned int, unsigned char)+0x30a>
    1b22:	bd cf       	rjmp	.-134    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1b24:	c8 e6       	ldi	r28, 0x68	; 104
    1b26:	d6 e0       	ldi	r29, 0x06	; 6
    1b28:	09 91       	ld	r16, Y+
    1b2a:	19 91       	ld	r17, Y+
    1b2c:	41 d8       	rcall	.-3966   	; 0xbb0 <getRandomColorValue()>
    1b2e:	f8 2e       	mov	r15, r24
    1b30:	3f d8       	rcall	.-3970   	; 0xbb0 <getRandomColorValue()>
    1b32:	e8 2e       	mov	r14, r24
    1b34:	3d d8       	rcall	.-3974   	; 0xbb0 <getRandomColorValue()>
    1b36:	f8 01       	movw	r30, r16
    1b38:	ee 0f       	add	r30, r30
    1b3a:	ff 1f       	adc	r31, r31
    1b3c:	e0 0f       	add	r30, r16
    1b3e:	f1 1f       	adc	r31, r17
    1b40:	e0 5f       	subi	r30, 0xF0	; 240
    1b42:	f5 4f       	sbci	r31, 0xF5	; 245
    1b44:	80 83       	st	Z, r24
    1b46:	e1 82       	std	Z+1, r14	; 0x01
    1b48:	f2 82       	std	Z+2, r15	; 0x02
    1b4a:	86 e0       	ldi	r24, 0x06	; 6
    1b4c:	c2 3b       	cpi	r28, 0xB2	; 178
    1b4e:	d8 07       	cpc	r29, r24
    1b50:	59 f7       	brne	.-42     	; 0x1b28 <progOutline(unsigned int, unsigned char)+0x33a>
    1b52:	a5 cf       	rjmp	.-182    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1b54:	c8 e2       	ldi	r28, 0x28	; 40
    1b56:	d6 e0       	ldi	r29, 0x06	; 6
    1b58:	09 91       	ld	r16, Y+
    1b5a:	19 91       	ld	r17, Y+
    1b5c:	29 d8       	rcall	.-4014   	; 0xbb0 <getRandomColorValue()>
    1b5e:	f8 2e       	mov	r15, r24
    1b60:	27 d8       	rcall	.-4018   	; 0xbb0 <getRandomColorValue()>
    1b62:	e8 2e       	mov	r14, r24
    1b64:	25 d8       	rcall	.-4022   	; 0xbb0 <getRandomColorValue()>
    1b66:	f8 01       	movw	r30, r16
    1b68:	ee 0f       	add	r30, r30
    1b6a:	ff 1f       	adc	r31, r31
    1b6c:	e0 0f       	add	r30, r16
    1b6e:	f1 1f       	adc	r31, r17
    1b70:	e0 5f       	subi	r30, 0xF0	; 240
    1b72:	f5 4f       	sbci	r31, 0xF5	; 245
    1b74:	80 83       	st	Z, r24
    1b76:	e1 82       	std	Z+1, r14	; 0x01
    1b78:	f2 82       	std	Z+2, r15	; 0x02
    1b7a:	86 e0       	ldi	r24, 0x06	; 6
    1b7c:	c8 36       	cpi	r28, 0x68	; 104
    1b7e:	d8 07       	cpc	r29, r24
    1b80:	59 f7       	brne	.-42     	; 0x1b58 <progOutline(unsigned int, unsigned char)+0x36a>
    1b82:	8d cf       	rjmp	.-230    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1b84:	cc ee       	ldi	r28, 0xEC	; 236
    1b86:	d5 e0       	ldi	r29, 0x05	; 5
    1b88:	09 91       	ld	r16, Y+
    1b8a:	19 91       	ld	r17, Y+
    1b8c:	11 d8       	rcall	.-4062   	; 0xbb0 <getRandomColorValue()>
    1b8e:	f8 2e       	mov	r15, r24
    1b90:	0f d8       	rcall	.-4066   	; 0xbb0 <getRandomColorValue()>
    1b92:	e8 2e       	mov	r14, r24
    1b94:	0d d8       	rcall	.-4070   	; 0xbb0 <getRandomColorValue()>
    1b96:	f8 01       	movw	r30, r16
    1b98:	ee 0f       	add	r30, r30
    1b9a:	ff 1f       	adc	r31, r31
    1b9c:	e0 0f       	add	r30, r16
    1b9e:	f1 1f       	adc	r31, r17
    1ba0:	e0 5f       	subi	r30, 0xF0	; 240
    1ba2:	f5 4f       	sbci	r31, 0xF5	; 245
    1ba4:	80 83       	st	Z, r24
    1ba6:	e1 82       	std	Z+1, r14	; 0x01
    1ba8:	f2 82       	std	Z+2, r15	; 0x02
    1baa:	86 e0       	ldi	r24, 0x06	; 6
    1bac:	c8 32       	cpi	r28, 0x28	; 40
    1bae:	d8 07       	cpc	r29, r24
    1bb0:	59 f7       	brne	.-42     	; 0x1b88 <progOutline(unsigned int, unsigned char)+0x39a>
    1bb2:	75 cf       	rjmp	.-278    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1bb4:	c6 eb       	ldi	r28, 0xB6	; 182
    1bb6:	d5 e0       	ldi	r29, 0x05	; 5
    1bb8:	09 91       	ld	r16, Y+
    1bba:	19 91       	ld	r17, Y+
    1bbc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bc0:	f8 2e       	mov	r15, r24
    1bc2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bc6:	e8 2e       	mov	r14, r24
    1bc8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bcc:	f8 01       	movw	r30, r16
    1bce:	ee 0f       	add	r30, r30
    1bd0:	ff 1f       	adc	r31, r31
    1bd2:	e0 0f       	add	r30, r16
    1bd4:	f1 1f       	adc	r31, r17
    1bd6:	e0 5f       	subi	r30, 0xF0	; 240
    1bd8:	f5 4f       	sbci	r31, 0xF5	; 245
    1bda:	80 83       	st	Z, r24
    1bdc:	e1 82       	std	Z+1, r14	; 0x01
    1bde:	f2 82       	std	Z+2, r15	; 0x02
    1be0:	85 e0       	ldi	r24, 0x05	; 5
    1be2:	cc 3e       	cpi	r28, 0xEC	; 236
    1be4:	d8 07       	cpc	r29, r24
    1be6:	41 f7       	brne	.-48     	; 0x1bb8 <progOutline(unsigned int, unsigned char)+0x3ca>
    1be8:	5a cf       	rjmp	.-332    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1bea:	c2 e8       	ldi	r28, 0x82	; 130
    1bec:	d5 e0       	ldi	r29, 0x05	; 5
    1bee:	09 91       	ld	r16, Y+
    1bf0:	19 91       	ld	r17, Y+
    1bf2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bf6:	f8 2e       	mov	r15, r24
    1bf8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1bfc:	e8 2e       	mov	r14, r24
    1bfe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c02:	f8 01       	movw	r30, r16
    1c04:	ee 0f       	add	r30, r30
    1c06:	ff 1f       	adc	r31, r31
    1c08:	e0 0f       	add	r30, r16
    1c0a:	f1 1f       	adc	r31, r17
    1c0c:	e0 5f       	subi	r30, 0xF0	; 240
    1c0e:	f5 4f       	sbci	r31, 0xF5	; 245
    1c10:	80 83       	st	Z, r24
    1c12:	e1 82       	std	Z+1, r14	; 0x01
    1c14:	f2 82       	std	Z+2, r15	; 0x02
    1c16:	85 e0       	ldi	r24, 0x05	; 5
    1c18:	c6 3b       	cpi	r28, 0xB6	; 182
    1c1a:	d8 07       	cpc	r29, r24
    1c1c:	41 f7       	brne	.-48     	; 0x1bee <progOutline(unsigned int, unsigned char)+0x400>
    1c1e:	3f cf       	rjmp	.-386    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>
    1c20:	c2 e5       	ldi	r28, 0x52	; 82
    1c22:	d5 e0       	ldi	r29, 0x05	; 5
    1c24:	09 91       	ld	r16, Y+
    1c26:	19 91       	ld	r17, Y+
    1c28:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c2c:	f8 2e       	mov	r15, r24
    1c2e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c32:	e8 2e       	mov	r14, r24
    1c34:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    1c38:	f8 01       	movw	r30, r16
    1c3a:	ee 0f       	add	r30, r30
    1c3c:	ff 1f       	adc	r31, r31
    1c3e:	e0 0f       	add	r30, r16
    1c40:	f1 1f       	adc	r31, r17
    1c42:	e0 5f       	subi	r30, 0xF0	; 240
    1c44:	f5 4f       	sbci	r31, 0xF5	; 245
    1c46:	80 83       	st	Z, r24
    1c48:	e1 82       	std	Z+1, r14	; 0x01
    1c4a:	f2 82       	std	Z+2, r15	; 0x02
    1c4c:	85 e0       	ldi	r24, 0x05	; 5
    1c4e:	c2 38       	cpi	r28, 0x82	; 130
    1c50:	d8 07       	cpc	r29, r24
    1c52:	41 f7       	brne	.-48     	; 0x1c24 <progOutline(unsigned int, unsigned char)+0x436>
    1c54:	24 cf       	rjmp	.-440    	; 0x1a9e <progOutline(unsigned int, unsigned char)+0x2b0>

00001c56 <progScrollText(String, unsigned int, int, int, unsigned char)>:
    1c56:	af 92       	push	r10
    1c58:	bf 92       	push	r11
    1c5a:	cf 92       	push	r12
    1c5c:	df 92       	push	r13
    1c5e:	ef 92       	push	r14
    1c60:	ff 92       	push	r15
    1c62:	0f 93       	push	r16
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	7c 01       	movw	r14, r24
    1c6a:	5b 01       	movw	r10, r22
    1c6c:	6a 01       	movw	r12, r20
    1c6e:	e9 01       	movw	r28, r18
    1c70:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1c74:	81 11       	cpse	r24, r1
    1c76:	26 c0       	rjmp	.+76     	; 0x1cc4 <progScrollText(String, unsigned int, int, int, unsigned char)+0x6e>
    1c78:	61 e0       	ldi	r22, 0x01	; 1
    1c7a:	8f e0       	ldi	r24, 0x0F	; 15
    1c7c:	90 e1       	ldi	r25, 0x10	; 16
    1c7e:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1c82:	b0 92 07 01 	sts	0x0107, r11	; 0x800107 <nextChangeMillis+0x1>
    1c86:	a0 92 06 01 	sts	0x0106, r10	; 0x800106 <nextChangeMillis>
    1c8a:	00 93 fb 09 	sts	0x09FB, r16	; 0x8009fb <nextSongPart>
    1c8e:	81 e0       	ldi	r24, 0x01	; 1
    1c90:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1c94:	d0 92 03 0a 	sts	0x0A03, r13	; 0x800a03 <millisCounterTimer+0x1>
    1c98:	c0 92 02 0a 	sts	0x0A02, r12	; 0x800a02 <millisCounterTimer>
    1c9c:	84 e1       	ldi	r24, 0x14	; 20
    1c9e:	90 e0       	ldi	r25, 0x00	; 0
    1ca0:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1ca4:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1ca8:	d7 01       	movw	r26, r14
    1caa:	14 96       	adiw	r26, 0x04	; 4
    1cac:	2d 91       	ld	r18, X+
    1cae:	3c 91       	ld	r19, X
    1cb0:	46 e0       	ldi	r20, 0x06	; 6
    1cb2:	42 9f       	mul	r20, r18
    1cb4:	c0 01       	movw	r24, r0
    1cb6:	43 9f       	mul	r20, r19
    1cb8:	90 0d       	add	r25, r0
    1cba:	11 24       	eor	r1, r1
    1cbc:	90 93 f0 09 	sts	0x09F0, r25	; 0x8009f0 <progScrollEnde+0x1>
    1cc0:	80 93 ef 09 	sts	0x09EF, r24	; 0x8009ef <progScrollEnde>
    1cc4:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    1cc8:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    1ccc:	8c 15       	cp	r24, r12
    1cce:	9d 05       	cpc	r25, r13
    1cd0:	08 f4       	brcc	.+2      	; 0x1cd4 <progScrollText(String, unsigned int, int, int, unsigned char)+0x7e>
    1cd2:	68 c0       	rjmp	.+208    	; 0x1da4 <progScrollText(String, unsigned int, int, int, unsigned char)+0x14e>
    1cd4:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    1cd8:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    1cdc:	85 e0       	ldi	r24, 0x05	; 5
    1cde:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <FastLED>
    1ce2:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1ce6:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1cea:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1cee:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1cf2:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1cf6:	fc 01       	movw	r30, r24
    1cf8:	16 8a       	std	Z+22, r1	; 0x16
    1cfa:	61 e0       	ldi	r22, 0x01	; 1
    1cfc:	0e 94 cb 30 	call	0x6196	; 0x6196 <Adafruit_GFX::setTextSize(unsigned char)>
    1d00:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1d04:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	ed 91       	ld	r30, X+
    1d0c:	fc 91       	ld	r31, X
    1d0e:	00 8c       	ldd	r0, Z+24	; 0x18
    1d10:	f1 8d       	ldd	r31, Z+25	; 0x19
    1d12:	e0 2d       	mov	r30, r0
    1d14:	60 e0       	ldi	r22, 0x00	; 0
    1d16:	09 95       	icall
    1d18:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1d1c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1d20:	01 97       	sbiw	r24, 0x01	; 1
    1d22:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1d26:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1d2a:	20 91 ef 09 	lds	r18, 0x09EF	; 0x8009ef <progScrollEnde>
    1d2e:	30 91 f0 09 	lds	r19, 0x09F0	; 0x8009f0 <progScrollEnde+0x1>
    1d32:	31 95       	neg	r19
    1d34:	21 95       	neg	r18
    1d36:	31 09       	sbc	r19, r1
    1d38:	82 17       	cp	r24, r18
    1d3a:	93 07       	cpc	r25, r19
    1d3c:	34 f4       	brge	.+12     	; 0x1d4a <progScrollText(String, unsigned int, int, int, unsigned char)+0xf4>
    1d3e:	84 e1       	ldi	r24, 0x14	; 20
    1d40:	90 e0       	ldi	r25, 0x00	; 0
    1d42:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    1d46:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    1d4a:	0e 94 4e 43 	call	0x869c	; 0x869c <yield>
    1d4e:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1d52:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1d56:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1d5a:	e0 91 fe 0f 	lds	r30, 0x0FFE	; 0x800ffe <matrix>
    1d5e:	f0 91 ff 0f 	lds	r31, 0x0FFF	; 0x800fff <matrix+0x1>
    1d62:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <progScrollTextZaehler>
    1d66:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <progScrollTextZaehler+0x1>
    1d6a:	94 87       	std	Z+12, r25	; 0x0c
    1d6c:	83 87       	std	Z+11, r24	; 0x0b
    1d6e:	8d e0       	ldi	r24, 0x0D	; 13
    1d70:	90 e0       	ldi	r25, 0x00	; 0
    1d72:	96 87       	std	Z+14, r25	; 0x0e
    1d74:	85 87       	std	Z+13, r24	; 0x0d
    1d76:	d2 8b       	std	Z+18, r29	; 0x12
    1d78:	c1 8b       	std	Z+17, r28	; 0x11
    1d7a:	d0 8b       	std	Z+16, r29	; 0x10
    1d7c:	c7 87       	std	Z+15, r28	; 0x0f
    1d7e:	b7 01       	movw	r22, r14
    1d80:	cf 01       	movw	r24, r30
    1d82:	0e 94 9f 3f 	call	0x7f3e	; 0x7f3e <Print::print(String const&)>
    1d86:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1d8a:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1d8e:	df 91       	pop	r29
    1d90:	cf 91       	pop	r28
    1d92:	0f 91       	pop	r16
    1d94:	ff 90       	pop	r15
    1d96:	ef 90       	pop	r14
    1d98:	df 90       	pop	r13
    1d9a:	cf 90       	pop	r12
    1d9c:	bf 90       	pop	r11
    1d9e:	af 90       	pop	r10
    1da0:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <FastLED_NeoMatrix::show()>
    1da4:	df 91       	pop	r29
    1da6:	cf 91       	pop	r28
    1da8:	0f 91       	pop	r16
    1daa:	ff 90       	pop	r15
    1dac:	ef 90       	pop	r14
    1dae:	df 90       	pop	r13
    1db0:	cf 90       	pop	r12
    1db2:	bf 90       	pop	r11
    1db4:	af 90       	pop	r10
    1db6:	08 95       	ret

00001db8 <progShowROOTS(unsigned int, unsigned char)>:
    1db8:	ef 92       	push	r14
    1dba:	ff 92       	push	r15
    1dbc:	0f 93       	push	r16
    1dbe:	1f 93       	push	r17
    1dc0:	cf 93       	push	r28
    1dc2:	df 93       	push	r29
    1dc4:	8c 01       	movw	r16, r24
    1dc6:	c6 2f       	mov	r28, r22
    1dc8:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1dcc:	81 11       	cpse	r24, r1
    1dce:	0e c0       	rjmp	.+28     	; 0x1dec <progShowROOTS(unsigned int, unsigned char)+0x34>
    1dd0:	61 e0       	ldi	r22, 0x01	; 1
    1dd2:	8f e0       	ldi	r24, 0x0F	; 15
    1dd4:	90 e1       	ldi	r25, 0x10	; 16
    1dd6:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1dda:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    1dde:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    1de2:	c0 93 fb 09 	sts	0x09FB, r28	; 0x8009fb <nextSongPart>
    1de6:	81 e0       	ldi	r24, 0x01	; 1
    1de8:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1dec:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    1df0:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    1df4:	84 3f       	cpi	r24, 0xF4	; 244
    1df6:	91 40       	sbci	r25, 0x01	; 1
    1df8:	08 f4       	brcc	.+2      	; 0x1dfc <progShowROOTS(unsigned int, unsigned char)+0x44>
    1dfa:	b2 c0       	rjmp	.+356    	; 0x1f60 <progShowROOTS(unsigned int, unsigned char)+0x1a8>
    1dfc:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    1e00:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    1e04:	8f e0       	ldi	r24, 0x0F	; 15
    1e06:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <FastLED>
    1e0a:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1e0e:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1e12:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1e16:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1e1a:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1e1e:	dc 01       	movw	r26, r24
    1e20:	56 96       	adiw	r26, 0x16	; 22
    1e22:	1c 92       	st	X, r1
    1e24:	61 e0       	ldi	r22, 0x01	; 1
    1e26:	0e 94 cb 30 	call	0x6196	; 0x6196 <Adafruit_GFX::setTextSize(unsigned char)>
    1e2a:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1e2e:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1e32:	dc 01       	movw	r26, r24
    1e34:	ed 91       	ld	r30, X+
    1e36:	fc 91       	ld	r31, X
    1e38:	00 8c       	ldd	r0, Z+24	; 0x18
    1e3a:	f1 8d       	ldd	r31, Z+25	; 0x19
    1e3c:	e0 2d       	mov	r30, r0
    1e3e:	60 e0       	ldi	r22, 0x00	; 0
    1e40:	09 95       	icall
    1e42:	0e 94 4e 43 	call	0x869c	; 0x869c <yield>
    1e46:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1e4a:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1e4e:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1e52:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    1e56:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1e5a:	1c 86       	std	Y+12, r1	; 0x0c
    1e5c:	1b 86       	std	Y+11, r1	; 0x0b
    1e5e:	83 e0       	ldi	r24, 0x03	; 3
    1e60:	90 e0       	ldi	r25, 0x00	; 0
    1e62:	9e 87       	std	Y+14, r25	; 0x0e
    1e64:	8d 87       	std	Y+13, r24	; 0x0d
    1e66:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1e6a:	9a 8b       	std	Y+18, r25	; 0x12
    1e6c:	89 8b       	std	Y+17, r24	; 0x11
    1e6e:	98 8b       	std	Y+16, r25	; 0x10
    1e70:	8f 87       	std	Y+15, r24	; 0x0f
    1e72:	69 e1       	ldi	r22, 0x19	; 25
    1e74:	71 e0       	ldi	r23, 0x01	; 1
    1e76:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1e7a:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1e7e:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1e82:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    1e86:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1e8a:	1c 86       	std	Y+12, r1	; 0x0c
    1e8c:	1b 86       	std	Y+11, r1	; 0x0b
    1e8e:	88 e0       	ldi	r24, 0x08	; 8
    1e90:	90 e0       	ldi	r25, 0x00	; 0
    1e92:	9e 87       	std	Y+14, r25	; 0x0e
    1e94:	8d 87       	std	Y+13, r24	; 0x0d
    1e96:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1e9a:	9a 8b       	std	Y+18, r25	; 0x12
    1e9c:	89 8b       	std	Y+17, r24	; 0x11
    1e9e:	98 8b       	std	Y+16, r25	; 0x10
    1ea0:	8f 87       	std	Y+15, r24	; 0x0f
    1ea2:	6b e1       	ldi	r22, 0x1B	; 27
    1ea4:	71 e0       	ldi	r23, 0x01	; 1
    1ea6:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1eaa:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1eae:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1eb2:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    1eb6:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1eba:	84 e0       	ldi	r24, 0x04	; 4
    1ebc:	90 e0       	ldi	r25, 0x00	; 0
    1ebe:	9c 87       	std	Y+12, r25	; 0x0c
    1ec0:	8b 87       	std	Y+11, r24	; 0x0b
    1ec2:	0d e0       	ldi	r16, 0x0D	; 13
    1ec4:	10 e0       	ldi	r17, 0x00	; 0
    1ec6:	1e 87       	std	Y+14, r17	; 0x0e
    1ec8:	0d 87       	std	Y+13, r16	; 0x0d
    1eca:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1ece:	9a 8b       	std	Y+18, r25	; 0x12
    1ed0:	89 8b       	std	Y+17, r24	; 0x11
    1ed2:	98 8b       	std	Y+16, r25	; 0x10
    1ed4:	8f 87       	std	Y+15, r24	; 0x0f
    1ed6:	6b e1       	ldi	r22, 0x1B	; 27
    1ed8:	71 e0       	ldi	r23, 0x01	; 1
    1eda:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1ede:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1ee2:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1ee6:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    1eea:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1eee:	89 e0       	ldi	r24, 0x09	; 9
    1ef0:	90 e0       	ldi	r25, 0x00	; 0
    1ef2:	9c 87       	std	Y+12, r25	; 0x0c
    1ef4:	8b 87       	std	Y+11, r24	; 0x0b
    1ef6:	8e e0       	ldi	r24, 0x0E	; 14
    1ef8:	e8 2e       	mov	r14, r24
    1efa:	f1 2c       	mov	r15, r1
    1efc:	fe 86       	std	Y+14, r15	; 0x0e
    1efe:	ed 86       	std	Y+13, r14	; 0x0d
    1f00:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1f04:	9a 8b       	std	Y+18, r25	; 0x12
    1f06:	89 8b       	std	Y+17, r24	; 0x11
    1f08:	98 8b       	std	Y+16, r25	; 0x10
    1f0a:	8f 87       	std	Y+15, r24	; 0x0f
    1f0c:	6d e1       	ldi	r22, 0x1D	; 29
    1f0e:	71 e0       	ldi	r23, 0x01	; 1
    1f10:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1f14:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1f18:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1f1c:	c0 91 fe 0f 	lds	r28, 0x0FFE	; 0x800ffe <matrix>
    1f20:	d0 91 ff 0f 	lds	r29, 0x0FFF	; 0x800fff <matrix+0x1>
    1f24:	fc 86       	std	Y+12, r15	; 0x0c
    1f26:	eb 86       	std	Y+11, r14	; 0x0b
    1f28:	1e 87       	std	Y+14, r17	; 0x0e
    1f2a:	0d 87       	std	Y+13, r16	; 0x0d
    1f2c:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    1f30:	9a 8b       	std	Y+18, r25	; 0x12
    1f32:	89 8b       	std	Y+17, r24	; 0x11
    1f34:	98 8b       	std	Y+16, r25	; 0x10
    1f36:	8f 87       	std	Y+15, r24	; 0x0f
    1f38:	6b e4       	ldi	r22, 0x4B	; 75
    1f3a:	71 e0       	ldi	r23, 0x01	; 1
    1f3c:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1f40:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1f44:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    1f48:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1f4c:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1f50:	df 91       	pop	r29
    1f52:	cf 91       	pop	r28
    1f54:	1f 91       	pop	r17
    1f56:	0f 91       	pop	r16
    1f58:	ff 90       	pop	r15
    1f5a:	ef 90       	pop	r14
    1f5c:	0c 94 ea 30 	jmp	0x61d4	; 0x61d4 <FastLED_NeoMatrix::show()>
    1f60:	df 91       	pop	r29
    1f62:	cf 91       	pop	r28
    1f64:	1f 91       	pop	r17
    1f66:	0f 91       	pop	r16
    1f68:	ff 90       	pop	r15
    1f6a:	ef 90       	pop	r14
    1f6c:	08 95       	ret

00001f6e <progWordArray(String*, int, int, unsigned int, int, unsigned char)>:
    1f6e:	8f 92       	push	r8
    1f70:	9f 92       	push	r9
    1f72:	af 92       	push	r10
    1f74:	bf 92       	push	r11
    1f76:	cf 92       	push	r12
    1f78:	df 92       	push	r13
    1f7a:	ef 92       	push	r14
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	cf 93       	push	r28
    1f82:	df 93       	push	r29
    1f84:	ec 01       	movw	r28, r24
    1f86:	5b 01       	movw	r10, r22
    1f88:	6a 01       	movw	r12, r20
    1f8a:	49 01       	movw	r8, r18
    1f8c:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1f90:	81 11       	cpse	r24, r1
    1f92:	16 c0       	rjmp	.+44     	; 0x1fc0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x52>
    1f94:	61 e0       	ldi	r22, 0x01	; 1
    1f96:	8f e0       	ldi	r24, 0x0F	; 15
    1f98:	90 e1       	ldi	r25, 0x10	; 16
    1f9a:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    1f9e:	90 92 07 01 	sts	0x0107, r9	; 0x800107 <nextChangeMillis+0x1>
    1fa2:	80 92 06 01 	sts	0x0106, r8	; 0x800106 <nextChangeMillis>
    1fa6:	e0 92 fb 09 	sts	0x09FB, r14	; 0x8009fb <nextSongPart>
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    1fb0:	10 92 b4 09 	sts	0x09B4, r1	; 0x8009b4 <zaehlerWortArray+0x1>
    1fb4:	10 92 b3 09 	sts	0x09B3, r1	; 0x8009b3 <zaehlerWortArray>
    1fb8:	d0 92 03 0a 	sts	0x0A03, r13	; 0x800a03 <millisCounterTimer+0x1>
    1fbc:	c0 92 02 0a 	sts	0x0A02, r12	; 0x800a02 <millisCounterTimer>
    1fc0:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    1fc4:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    1fc8:	8c 15       	cp	r24, r12
    1fca:	9d 05       	cpc	r25, r13
    1fcc:	08 f4       	brcc	.+2      	; 0x1fd0 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x62>
    1fce:	5b c0       	rjmp	.+182    	; 0x2086 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1fd0:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    1fd4:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    1fd8:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <zaehlerWortArray>
    1fdc:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <zaehlerWortArray+0x1>
    1fe0:	a8 16       	cp	r10, r24
    1fe2:	b9 06       	cpc	r11, r25
    1fe4:	0c f4       	brge	.+2      	; 0x1fe8 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x7a>
    1fe6:	4f c0       	rjmp	.+158    	; 0x2086 <progWordArray(String*, int, int, unsigned int, int, unsigned char)+0x118>
    1fe8:	85 e0       	ldi	r24, 0x05	; 5
    1fea:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <FastLED>
    1fee:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1ff2:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    1ff6:	0e 94 cf 05 	call	0xb9e	; 0xb9e <Framebuffer_GFX::clear()>
    1ffa:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    1ffe:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    2002:	dc 01       	movw	r26, r24
    2004:	56 96       	adiw	r26, 0x16	; 22
    2006:	1c 92       	st	X, r1
    2008:	61 e0       	ldi	r22, 0x01	; 1
    200a:	0e 94 cb 30 	call	0x6196	; 0x6196 <Adafruit_GFX::setTextSize(unsigned char)>
    200e:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    2012:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    2016:	dc 01       	movw	r26, r24
    2018:	ed 91       	ld	r30, X+
    201a:	fc 91       	ld	r31, X
    201c:	00 8c       	ldd	r0, Z+24	; 0x18
    201e:	f1 8d       	ldd	r31, Z+25	; 0x19
    2020:	e0 2d       	mov	r30, r0
    2022:	60 e0       	ldi	r22, 0x00	; 0
    2024:	09 95       	icall
    2026:	0e 94 4e 43 	call	0x869c	; 0x869c <yield>
    202a:	e0 91 fe 0f 	lds	r30, 0x0FFE	; 0x800ffe <matrix>
    202e:	f0 91 ff 0f 	lds	r31, 0x0FFF	; 0x800fff <matrix+0x1>
    2032:	82 e0       	ldi	r24, 0x02	; 2
    2034:	90 e0       	ldi	r25, 0x00	; 0
    2036:	94 87       	std	Z+12, r25	; 0x0c
    2038:	83 87       	std	Z+11, r24	; 0x0b
    203a:	8d e0       	ldi	r24, 0x0D	; 13
    203c:	90 e0       	ldi	r25, 0x00	; 0
    203e:	96 87       	std	Z+14, r25	; 0x0e
    2040:	85 87       	std	Z+13, r24	; 0x0d
    2042:	12 8b       	std	Z+18, r17	; 0x12
    2044:	01 8b       	std	Z+17, r16	; 0x11
    2046:	10 8b       	std	Z+16, r17	; 0x10
    2048:	07 87       	std	Z+15, r16	; 0x0f
    204a:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <zaehlerWortArray>
    204e:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <zaehlerWortArray+0x1>
    2052:	27 e0       	ldi	r18, 0x07	; 7
    2054:	28 9f       	mul	r18, r24
    2056:	b0 01       	movw	r22, r0
    2058:	29 9f       	mul	r18, r25
    205a:	70 0d       	add	r23, r0
    205c:	11 24       	eor	r1, r1
    205e:	6c 0f       	add	r22, r28
    2060:	7d 1f       	adc	r23, r29
    2062:	cf 01       	movw	r24, r30
    2064:	0e 94 9f 3f 	call	0x7f3e	; 0x7f3e <Print::print(String const&)>
    2068:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    206c:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    2070:	0e 94 ea 30 	call	0x61d4	; 0x61d4 <FastLED_NeoMatrix::show()>
    2074:	80 91 b3 09 	lds	r24, 0x09B3	; 0x8009b3 <zaehlerWortArray>
    2078:	90 91 b4 09 	lds	r25, 0x09B4	; 0x8009b4 <zaehlerWortArray+0x1>
    207c:	01 96       	adiw	r24, 0x01	; 1
    207e:	90 93 b4 09 	sts	0x09B4, r25	; 0x8009b4 <zaehlerWortArray+0x1>
    2082:	80 93 b3 09 	sts	0x09B3, r24	; 0x8009b3 <zaehlerWortArray>
    2086:	df 91       	pop	r29
    2088:	cf 91       	pop	r28
    208a:	1f 91       	pop	r17
    208c:	0f 91       	pop	r16
    208e:	ef 90       	pop	r14
    2090:	df 90       	pop	r13
    2092:	cf 90       	pop	r12
    2094:	bf 90       	pop	r11
    2096:	af 90       	pop	r10
    2098:	9f 90       	pop	r9
    209a:	8f 90       	pop	r8
    209c:	08 95       	ret

0000209e <SetupTotallyRandomPalette()>:
}

// This function fills the palette with totally random colors.
void SetupTotallyRandomPalette()
    209e:	bf 92       	push	r11
    20a0:	cf 92       	push	r12
    20a2:	df 92       	push	r13
    20a4:	ef 92       	push	r14
    20a6:	ff 92       	push	r15
    20a8:	0f 93       	push	r16
    20aa:	1f 93       	push	r17
    20ac:	cf 93       	push	r28
    20ae:	df 93       	push	r29
    20b0:	00 d0       	rcall	.+0      	; 0x20b2 <SetupTotallyRandomPalette()+0x14>
    20b2:	1f 92       	push	r1
    20b4:	cd b7       	in	r28, 0x3d	; 61
    20b6:	de b7       	in	r29, 0x3e	; 62
    20b8:	0c eb       	ldi	r16, 0xBC	; 188
    20ba:	19 e0       	ldi	r17, 0x09	; 9
    20bc:	8c ee       	ldi	r24, 0xEC	; 236
    20be:	e8 2e       	mov	r14, r24
    20c0:	89 e0       	ldi	r24, 0x09	; 9
    20c2:	f8 2e       	mov	r15, r24
extern uint16_t rand16seed;// = RAND16_SEED;

/// Generate an 8-bit random number
LIB8STATIC uint8_t random8()
{
    rand16seed = (rand16seed * FASTLED_RAND16_2053) + FASTLED_RAND16_13849;
    20c4:	95 e0       	ldi	r25, 0x05	; 5
    20c6:	c9 2e       	mov	r12, r25
    20c8:	98 e0       	ldi	r25, 0x08	; 8
    20ca:	d9 2e       	mov	r13, r25
    {
    }

    /// allow construction from H, S, V
    inline CHSV( uint8_t ih, uint8_t is, uint8_t iv) __attribute__((always_inline))
        : h(ih), s(is), v(iv)
    20cc:	bb 24       	eor	r11, r11
    20ce:	ba 94       	dec	r11
    20d0:	20 91 08 01 	lds	r18, 0x0108	; 0x800108 <rand16seed>
    20d4:	30 91 09 01 	lds	r19, 0x0109	; 0x800109 <rand16seed+0x1>
    20d8:	2c 9d       	mul	r18, r12
    20da:	c0 01       	movw	r24, r0
    20dc:	2d 9d       	mul	r18, r13
    20de:	90 0d       	add	r25, r0
    20e0:	3c 9d       	mul	r19, r12
    20e2:	90 0d       	add	r25, r0
    20e4:	11 24       	eor	r1, r1
    20e6:	87 5e       	subi	r24, 0xE7	; 231
    20e8:	99 4c       	sbci	r25, 0xC9	; 201
    20ea:	8c 9d       	mul	r24, r12
    20ec:	90 01       	movw	r18, r0
    20ee:	8d 9d       	mul	r24, r13
    20f0:	30 0d       	add	r19, r0
    20f2:	9c 9d       	mul	r25, r12
    20f4:	30 0d       	add	r19, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	27 5e       	subi	r18, 0xE7	; 231
    20fa:	39 4c       	sbci	r19, 0xC9	; 201
    20fc:	30 93 09 01 	sts	0x0109, r19	; 0x800109 <rand16seed+0x1>
    2100:	20 93 08 01 	sts	0x0108, r18	; 0x800108 <rand16seed>
    // return the sum of the high and low bytes, for better
    //  mixing and non-sequential correlation
    return (uint8_t)(((uint8_t)(rand16seed & 0xFF)) +
                     ((uint8_t)(rand16seed >> 8)));
    2104:	23 0f       	add	r18, r19
    2106:	29 83       	std	Y+1, r18	; 0x01
    2108:	ba 82       	std	Y+2, r11	; 0x02
    210a:	89 0f       	add	r24, r25
    210c:	8b 83       	std	Y+3, r24	; 0x03
    }

    /// allow assignment from HSV color
	inline CRGB& operator= (const CHSV& rhs) __attribute__((always_inline))
    {
        hsv2rgb_rainbow( rhs, *this);
    210e:	b8 01       	movw	r22, r16
    2110:	ce 01       	movw	r24, r28
    2112:	01 96       	adiw	r24, 0x01	; 1
    2114:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    2118:	0d 5f       	subi	r16, 0xFD	; 253
    211a:	1f 4f       	sbci	r17, 0xFF	; 255
{
    211c:	e0 16       	cp	r14, r16
    211e:	f1 06       	cpc	r15, r17
    2120:	b9 f6       	brne	.-82     	; 0x20d0 <SetupTotallyRandomPalette()+0x32>
	for (int i = 0; i < 16; i++) {
		currentPalette[i] = CHSV(random8(), 255, random8());
	}
    2122:	0f 90       	pop	r0
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	bf 90       	pop	r11
    213a:	08 95       	ret

0000213c <SetupBlackAndWhiteStripedPalette()>:
			}
			break;
		case 8:
			anz = (sizeof(outlinePath9) / sizeof(outlinePath9[0]));
			for (int i = 0; i < anz; i++) {
				int test = outlinePath9[i];
    213c:	cf 93       	push	r28
    213e:	df 93       	push	r29
    2140:	00 d0       	rcall	.+0      	; 0x2142 <SetupBlackAndWhiteStripedPalette()+0x6>
    2142:	1f 92       	push	r1
    2144:	cd b7       	in	r28, 0x3d	; 61
    2146:	de b7       	in	r29, 0x3e	; 62
    2148:	19 82       	std	Y+1, r1	; 0x01
    214a:	1a 82       	std	Y+2, r1	; 0x02
    214c:	1b 82       	std	Y+3, r1	; 0x03
    214e:	ae 01       	movw	r20, r28
    2150:	4f 5f       	subi	r20, 0xFF	; 255
    2152:	5f 4f       	sbci	r21, 0xFF	; 255
    2154:	60 e1       	ldi	r22, 0x10	; 16
    2156:	70 e0       	ldi	r23, 0x00	; 0
    2158:	8c eb       	ldi	r24, 0xBC	; 188
    215a:	99 e0       	ldi	r25, 0x09	; 9
    215c:	0e 94 d9 33 	call	0x67b2	; 0x67b2 <fill_solid(CRGB*, int, CRGB const&)>
    2160:	ec eb       	ldi	r30, 0xBC	; 188
    2162:	f9 e0       	ldi	r31, 0x09	; 9
    2164:	8f ef       	ldi	r24, 0xFF	; 255
    2166:	80 83       	st	Z, r24
    2168:	81 83       	std	Z+1, r24	; 0x01
    216a:	82 83       	std	Z+2, r24	; 0x02
    216c:	84 87       	std	Z+12, r24	; 0x0c
    216e:	85 87       	std	Z+13, r24	; 0x0d
    2170:	86 87       	std	Z+14, r24	; 0x0e
    2172:	80 8f       	std	Z+24, r24	; 0x18
    2174:	81 8f       	std	Z+25, r24	; 0x19
    2176:	82 8f       	std	Z+26, r24	; 0x1a
    2178:	84 a3       	std	Z+36, r24	; 0x24
    217a:	85 a3       	std	Z+37, r24	; 0x25
    217c:	86 a3       	std	Z+38, r24	; 0x26
    217e:	0f 90       	pop	r0
    2180:	0f 90       	pop	r0
    2182:	0f 90       	pop	r0
    2184:	df 91       	pop	r29
    2186:	cf 91       	pop	r28
    2188:	08 95       	ret

0000218a <SetupPurpleAndGreenPalette()>:
    218a:	1f 93       	push	r17
    218c:	cf 93       	push	r28
    218e:	df 93       	push	r29
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	e6 97       	sbiw	r28, 0x36	; 54
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    21a0:	80 ec       	ldi	r24, 0xC0	; 192
    21a2:	89 83       	std	Y+1, r24	; 0x01
    21a4:	1f ef       	ldi	r17, 0xFF	; 255
    21a6:	1a 83       	std	Y+2, r17	; 0x02
    21a8:	1b 83       	std	Y+3, r17	; 0x03
    21aa:	be 01       	movw	r22, r28
    21ac:	6c 5c       	subi	r22, 0xCC	; 204
    21ae:	7f 4f       	sbci	r23, 0xFF	; 255
    21b0:	ce 01       	movw	r24, r28
    21b2:	01 96       	adiw	r24, 0x01	; 1
    21b4:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    21b8:	80 e6       	ldi	r24, 0x60	; 96
    21ba:	89 83       	std	Y+1, r24	; 0x01
    21bc:	1a 83       	std	Y+2, r17	; 0x02
    21be:	1b 83       	std	Y+3, r17	; 0x03
    21c0:	be 01       	movw	r22, r28
    21c2:	6f 5c       	subi	r22, 0xCF	; 207
    21c4:	7f 4f       	sbci	r23, 0xFF	; 255
    21c6:	ce 01       	movw	r24, r28
    21c8:	01 96       	adiw	r24, 0x01	; 1
    21ca:	0e 94 fa 36 	call	0x6df4	; 0x6df4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>
    21ce:	59 a9       	ldd	r21, Y+49	; 0x31
    21d0:	59 83       	std	Y+1, r21	; 0x01
    21d2:	4a a9       	ldd	r20, Y+50	; 0x32
    21d4:	4a 83       	std	Y+2, r20	; 0x02
    21d6:	3b a9       	ldd	r19, Y+51	; 0x33
    21d8:	3b 83       	std	Y+3, r19	; 0x03
    21da:	5c 83       	std	Y+4, r21	; 0x04
    21dc:	4d 83       	std	Y+5, r20	; 0x05
    21de:	3e 83       	std	Y+6, r19	; 0x06
    21e0:	1f 82       	std	Y+7, r1	; 0x07
    21e2:	18 86       	std	Y+8, r1	; 0x08
    21e4:	19 86       	std	Y+9, r1	; 0x09
    21e6:	1a 86       	std	Y+10, r1	; 0x0a
    21e8:	1b 86       	std	Y+11, r1	; 0x0b
    21ea:	1c 86       	std	Y+12, r1	; 0x0c
    21ec:	2c a9       	ldd	r18, Y+52	; 0x34
    21ee:	2d 87       	std	Y+13, r18	; 0x0d
    21f0:	9d a9       	ldd	r25, Y+53	; 0x35
    21f2:	9e 87       	std	Y+14, r25	; 0x0e
    21f4:	8e a9       	ldd	r24, Y+54	; 0x36
    21f6:	8f 87       	std	Y+15, r24	; 0x0f
    21f8:	28 8b       	std	Y+16, r18	; 0x10
    21fa:	99 8b       	std	Y+17, r25	; 0x11
    21fc:	8a 8b       	std	Y+18, r24	; 0x12
    21fe:	1b 8a       	std	Y+19, r1	; 0x13
    2200:	1c 8a       	std	Y+20, r1	; 0x14
    2202:	1d 8a       	std	Y+21, r1	; 0x15
    2204:	1e 8a       	std	Y+22, r1	; 0x16
    2206:	1f 8a       	std	Y+23, r1	; 0x17
    2208:	18 8e       	std	Y+24, r1	; 0x18
    220a:	59 8f       	std	Y+25, r21	; 0x19
    220c:	4a 8f       	std	Y+26, r20	; 0x1a
    220e:	3b 8f       	std	Y+27, r19	; 0x1b
    2210:	5c 8f       	std	Y+28, r21	; 0x1c
    2212:	4d 8f       	std	Y+29, r20	; 0x1d
    2214:	3e 8f       	std	Y+30, r19	; 0x1e
    2216:	1f 8e       	std	Y+31, r1	; 0x1f
    2218:	18 a2       	std	Y+32, r1	; 0x20
    221a:	19 a2       	std	Y+33, r1	; 0x21
    221c:	1a a2       	std	Y+34, r1	; 0x22
    221e:	1b a2       	std	Y+35, r1	; 0x23
    2220:	1c a2       	std	Y+36, r1	; 0x24
    2222:	2d a3       	std	Y+37, r18	; 0x25
    2224:	9e a3       	std	Y+38, r25	; 0x26
    2226:	8f a3       	std	Y+39, r24	; 0x27
    2228:	28 a7       	std	Y+40, r18	; 0x28
    222a:	99 a7       	std	Y+41, r25	; 0x29
    222c:	8a a7       	std	Y+42, r24	; 0x2a
    222e:	1b a6       	std	Y+43, r1	; 0x2b
    2230:	1c a6       	std	Y+44, r1	; 0x2c
    2232:	1d a6       	std	Y+45, r1	; 0x2d
    2234:	1e a6       	std	Y+46, r1	; 0x2e
    2236:	1f a6       	std	Y+47, r1	; 0x2f
    2238:	18 aa       	std	Y+48, r1	; 0x30
    223a:	40 e3       	ldi	r20, 0x30	; 48
    223c:	50 e0       	ldi	r21, 0x00	; 0
    223e:	be 01       	movw	r22, r28
    2240:	6f 5f       	subi	r22, 0xFF	; 255
    2242:	7f 4f       	sbci	r23, 0xFF	; 255
    2244:	8c eb       	ldi	r24, 0xBC	; 188
    2246:	99 e0       	ldi	r25, 0x09	; 9
    2248:	0e 94 c6 37 	call	0x6f8c	; 0x6f8c <memmove8>
    224c:	e6 96       	adiw	r28, 0x36	; 54
    224e:	0f b6       	in	r0, 0x3f	; 63
    2250:	f8 94       	cli
    2252:	de bf       	out	0x3e, r29	; 62
    2254:	0f be       	out	0x3f, r0	; 63
    2256:	cd bf       	out	0x3d, r28	; 61
    2258:	df 91       	pop	r29
    225a:	cf 91       	pop	r28
    225c:	1f 91       	pop	r17
    225e:	08 95       	ret

00002260 <FillLEDsFromPaletteColors(unsigned char)>:
    2260:	df 92       	push	r13
    2262:	ef 92       	push	r14
    2264:	ff 92       	push	r15
    2266:	0f 93       	push	r16
    2268:	1f 93       	push	r17
    226a:	cf 93       	push	r28
    226c:	df 93       	push	r29
    226e:	00 d0       	rcall	.+0      	; 0x2270 <FillLEDsFromPaletteColors(unsigned char)+0x10>
    2270:	1f 92       	push	r1
    2272:	cd b7       	in	r28, 0x3d	; 61
    2274:	de b7       	in	r29, 0x3e	; 62
    2276:	d8 2e       	mov	r13, r24
    2278:	80 e1       	ldi	r24, 0x10	; 16
    227a:	e8 2e       	mov	r14, r24
    227c:	8a e0       	ldi	r24, 0x0A	; 10
    227e:	f8 2e       	mov	r15, r24
    2280:	00 91 ba 09 	lds	r16, 0x09BA	; 0x8009ba <currentBlending>
    2284:	10 91 bb 09 	lds	r17, 0x09BB	; 0x8009bb <currentBlending+0x1>
    2288:	2f ef       	ldi	r18, 0xFF	; 255
    228a:	4d 2d       	mov	r20, r13
    228c:	6c eb       	ldi	r22, 0xBC	; 188
    228e:	79 e0       	ldi	r23, 0x09	; 9
    2290:	ce 01       	movw	r24, r28
    2292:	01 96       	adiw	r24, 0x01	; 1
    2294:	0e 94 ee 33 	call	0x67dc	; 0x67dc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>
    2298:	89 81       	ldd	r24, Y+1	; 0x01
    229a:	f7 01       	movw	r30, r14
    229c:	80 83       	st	Z, r24
    229e:	8a 81       	ldd	r24, Y+2	; 0x02
    22a0:	81 83       	std	Z+1, r24	; 0x01
    22a2:	8b 81       	ldd	r24, Y+3	; 0x03
    22a4:	82 83       	std	Z+2, r24	; 0x02
    22a6:	f3 e0       	ldi	r31, 0x03	; 3
    22a8:	df 0e       	add	r13, r31
    22aa:	83 e0       	ldi	r24, 0x03	; 3
    22ac:	e8 0e       	add	r14, r24
    22ae:	f1 1c       	adc	r15, r1
    22b0:	e2 e5       	ldi	r30, 0x52	; 82
    22b2:	ee 16       	cp	r14, r30
    22b4:	ed e0       	ldi	r30, 0x0D	; 13
    22b6:	fe 06       	cpc	r15, r30
    22b8:	19 f7       	brne	.-58     	; 0x2280 <FillLEDsFromPaletteColors(unsigned char)+0x20>
    22ba:	0f 90       	pop	r0
    22bc:	0f 90       	pop	r0
    22be:	0f 90       	pop	r0
    22c0:	df 91       	pop	r29
    22c2:	cf 91       	pop	r28
    22c4:	1f 91       	pop	r17
    22c6:	0f 91       	pop	r16
    22c8:	ff 90       	pop	r15
    22ca:	ef 90       	pop	r14
    22cc:	df 90       	pop	r13
    22ce:	08 95       	ret

000022d0 <progPalette(unsigned int, unsigned char, unsigned char)>:
    22d0:	0f 93       	push	r16
    22d2:	1f 93       	push	r17
    22d4:	cf 93       	push	r28
    22d6:	df 93       	push	r29
    22d8:	8c 01       	movw	r16, r24
    22da:	c6 2f       	mov	r28, r22
    22dc:	d4 2f       	mov	r29, r20
    22de:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    22e2:	81 11       	cpse	r24, r1
    22e4:	43 c0       	rjmp	.+134    	; 0x236c <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    22e6:	61 e0       	ldi	r22, 0x01	; 1
    22e8:	8f e0       	ldi	r24, 0x0F	; 15
    22ea:	90 e1       	ldi	r25, 0x10	; 16
    22ec:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    22f0:	10 93 07 01 	sts	0x0107, r17	; 0x800107 <nextChangeMillis+0x1>
    22f4:	00 93 06 01 	sts	0x0106, r16	; 0x800106 <nextChangeMillis>
    22f8:	d0 93 fb 09 	sts	0x09FB, r29	; 0x8009fb <nextSongPart>
    22fc:	81 e0       	ldi	r24, 0x01	; 1
    22fe:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    2302:	cc 30       	cpi	r28, 0x0C	; 12
    2304:	08 f0       	brcs	.+2      	; 0x2308 <progPalette(unsigned int, unsigned char, unsigned char)+0x38>
    2306:	32 c0       	rjmp	.+100    	; 0x236c <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    2308:	ec 2f       	mov	r30, r28
    230a:	f0 e0       	ldi	r31, 0x00	; 0
    230c:	e6 57       	subi	r30, 0x76	; 118
    230e:	fe 4e       	sbci	r31, 0xEE	; 238
    2310:	0c 94 45 45 	jmp	0x8a8a	; 0x8a8a <__tablejump2__>
    2314:	96 11       	cpse	r25, r6
    2316:	9d 11       	cpse	r25, r13
    2318:	a4 11       	cpse	r26, r4
    231a:	a7 11       	cpse	r26, r7
    231c:	af 11       	cpse	r26, r15
    231e:	b1 11       	cpse	r27, r1
    2320:	ce 11       	cpse	r28, r14
    2322:	d0 11       	cpse	r29, r0
    2324:	d3 11       	cpse	r29, r3
    2326:	d6 11       	cpse	r29, r6
    2328:	d9 11       	cpse	r29, r9
    232a:	dc 11       	cpse	r29, r12
    232c:	68 eb       	ldi	r22, 0xB8	; 184
    232e:	76 e0       	ldi	r23, 0x06	; 6
    2330:	8c eb       	ldi	r24, 0xBC	; 188
    2332:	99 e0       	ldi	r25, 0x09	; 9
    2334:	0e 94 ac 05 	call	0xb58	; 0xb58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2338:	0b c0       	rjmp	.+22     	; 0x2350 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    233a:	68 e7       	ldi	r22, 0x78	; 120
    233c:	76 e0       	ldi	r23, 0x06	; 6
    233e:	8c eb       	ldi	r24, 0xBC	; 188
    2340:	99 e0       	ldi	r25, 0x09	; 9
    2342:	0e 94 ac 05 	call	0xb58	; 0xb58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2346:	0e c0       	rjmp	.+28     	; 0x2364 <progPalette(unsigned int, unsigned char, unsigned char)+0x94>
    2348:	68 e7       	ldi	r22, 0x78	; 120
    234a:	76 e0       	ldi	r23, 0x06	; 6
    234c:	f1 cf       	rjmp	.-30     	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    234e:	1d df       	rcall	.-454    	; 0x218a <SetupPurpleAndGreenPalette()>
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	90 e0       	ldi	r25, 0x00	; 0
    2354:	90 93 bb 09 	sts	0x09BB, r25	; 0x8009bb <currentBlending+0x1>
    2358:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <currentBlending>
    235c:	07 c0       	rjmp	.+14     	; 0x236c <progPalette(unsigned int, unsigned char, unsigned char)+0x9c>
    235e:	9f de       	rcall	.-706    	; 0x209e <SetupTotallyRandomPalette()>
    2360:	f7 cf       	rjmp	.-18     	; 0x2350 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    2362:	ec de       	rcall	.-552    	; 0x213c <SetupBlackAndWhiteStripedPalette()>
    2364:	10 92 bb 09 	sts	0x09BB, r1	; 0x8009bb <currentBlending+0x1>
    2368:	10 92 ba 09 	sts	0x09BA, r1	; 0x8009ba <currentBlending>
    236c:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    2370:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    2374:	01 96       	adiw	r24, 0x01	; 1
    2376:	89 3e       	cpi	r24, 0xE9	; 233
    2378:	23 e0       	ldi	r18, 0x03	; 3
    237a:	92 07       	cpc	r25, r18
    237c:	04 f5       	brge	.+64     	; 0x23be <progPalette(unsigned int, unsigned char, unsigned char)+0xee>
    237e:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    2382:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    2386:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    238a:	6a df       	rcall	.-300    	; 0x2260 <FillLEDsFromPaletteColors(unsigned char)>
    238c:	8f e0       	ldi	r24, 0x0F	; 15
    238e:	90 e1       	ldi	r25, 0x10	; 16
    2390:	df 91       	pop	r29
    2392:	cf 91       	pop	r28
    2394:	1f 91       	pop	r17
    2396:	0f 91       	pop	r16
    2398:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <CFastLED::show()>
    239c:	cf de       	rcall	.-610    	; 0x213c <SetupBlackAndWhiteStripedPalette()>
    239e:	d8 cf       	rjmp	.-80     	; 0x2350 <progPalette(unsigned int, unsigned char, unsigned char)+0x80>
    23a0:	68 ef       	ldi	r22, 0xF8	; 248
    23a2:	76 e0       	ldi	r23, 0x06	; 6
    23a4:	c5 cf       	rjmp	.-118    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23a6:	68 e3       	ldi	r22, 0x38	; 56
    23a8:	76 e0       	ldi	r23, 0x06	; 6
    23aa:	c2 cf       	rjmp	.-124    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23ac:	62 e1       	ldi	r22, 0x12	; 18
    23ae:	75 e0       	ldi	r23, 0x05	; 5
    23b0:	c6 cf       	rjmp	.-116    	; 0x233e <progPalette(unsigned int, unsigned char, unsigned char)+0x6e>
    23b2:	62 e1       	ldi	r22, 0x12	; 18
    23b4:	75 e0       	ldi	r23, 0x05	; 5
    23b6:	bc cf       	rjmp	.-136    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23b8:	68 e9       	ldi	r22, 0x98	; 152
    23ba:	70 e0       	ldi	r23, 0x00	; 0
    23bc:	b9 cf       	rjmp	.-142    	; 0x2330 <progPalette(unsigned int, unsigned char, unsigned char)+0x60>
    23be:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <zaehler+0x1>
    23c2:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <zaehler>
    23c6:	df cf       	rjmp	.-66     	; 0x2386 <progPalette(unsigned int, unsigned char, unsigned char)+0xb6>

000023c8 <getMatrixColor(int)>:
    23c8:	dc 01       	movw	r26, r24
    23ca:	60 31       	cpi	r22, 0x10	; 16
    23cc:	71 05       	cpc	r23, r1
    23ce:	08 f0       	brcs	.+2      	; 0x23d2 <getMatrixColor(int)+0xa>
    23d0:	52 c0       	rjmp	.+164    	; 0x2476 <getMatrixColor(int)+0xae>
    23d2:	fb 01       	movw	r30, r22
    23d4:	e2 51       	subi	r30, 0x12	; 18
    23d6:	fe 4e       	sbci	r31, 0xEE	; 238
    23d8:	0c 94 45 45 	jmp	0x8a8a	; 0x8a8a <__tablejump2__>
    23dc:	3b 12       	cpse	r3, r27
    23de:	fe 11       	cpse	r31, r14
    23e0:	fe 11       	cpse	r31, r14
    23e2:	09 12       	cpse	r0, r25
    23e4:	0d 12       	cpse	r0, r29
    23e6:	11 12       	cpse	r1, r17
    23e8:	15 12       	cpse	r1, r21
    23ea:	19 12       	cpse	r1, r25
    23ec:	1d 12       	cpse	r1, r29
    23ee:	21 12       	cpse	r2, r17
    23f0:	25 12       	cpse	r2, r21
    23f2:	29 12       	cpse	r2, r25
    23f4:	2d 12       	cpse	r2, r29
    23f6:	2f 12       	cpse	r2, r31
    23f8:	33 12       	cpse	r3, r19
    23fa:	35 12       	cpse	r3, r21
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	8c 93       	st	X, r24
    2400:	99 e1       	ldi	r25, 0x19	; 25
    2402:	11 96       	adiw	r26, 0x01	; 1
    2404:	9c 93       	st	X, r25
    2406:	11 97       	sbiw	r26, 0x01	; 1
    2408:	12 96       	adiw	r26, 0x02	; 2
    240a:	8c 93       	st	X, r24
    240c:	12 97       	sbiw	r26, 0x02	; 2
    240e:	cd 01       	movw	r24, r26
    2410:	08 95       	ret
    2412:	81 e0       	ldi	r24, 0x01	; 1
    2414:	8c 93       	st	X, r24
    2416:	98 e2       	ldi	r25, 0x28	; 40
    2418:	f4 cf       	rjmp	.-24     	; 0x2402 <getMatrixColor(int)+0x3a>
    241a:	81 e0       	ldi	r24, 0x01	; 1
    241c:	8c 93       	st	X, r24
    241e:	90 e5       	ldi	r25, 0x50	; 80
    2420:	f0 cf       	rjmp	.-32     	; 0x2402 <getMatrixColor(int)+0x3a>
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	8c 93       	st	X, r24
    2426:	98 e7       	ldi	r25, 0x78	; 120
    2428:	ec cf       	rjmp	.-40     	; 0x2402 <getMatrixColor(int)+0x3a>
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	8c 93       	st	X, r24
    242e:	96 e9       	ldi	r25, 0x96	; 150
    2430:	e8 cf       	rjmp	.-48     	; 0x2402 <getMatrixColor(int)+0x3a>
    2432:	81 e0       	ldi	r24, 0x01	; 1
    2434:	8c 93       	st	X, r24
    2436:	98 ec       	ldi	r25, 0xC8	; 200
    2438:	e4 cf       	rjmp	.-56     	; 0x2402 <getMatrixColor(int)+0x3a>
    243a:	85 e0       	ldi	r24, 0x05	; 5
    243c:	8c 93       	st	X, r24
    243e:	9f ef       	ldi	r25, 0xFF	; 255
    2440:	e0 cf       	rjmp	.-64     	; 0x2402 <getMatrixColor(int)+0x3a>
    2442:	8a e0       	ldi	r24, 0x0A	; 10
    2444:	8c 93       	st	X, r24
    2446:	94 eb       	ldi	r25, 0xB4	; 180
    2448:	dc cf       	rjmp	.-72     	; 0x2402 <getMatrixColor(int)+0x3a>
    244a:	8a e0       	ldi	r24, 0x0A	; 10
    244c:	8c 93       	st	X, r24
    244e:	90 ea       	ldi	r25, 0xA0	; 160
    2450:	d8 cf       	rjmp	.-80     	; 0x2402 <getMatrixColor(int)+0x3a>
    2452:	84 e1       	ldi	r24, 0x14	; 20
    2454:	8c 93       	st	X, r24
    2456:	9c e8       	ldi	r25, 0x8C	; 140
    2458:	d4 cf       	rjmp	.-88     	; 0x2402 <getMatrixColor(int)+0x3a>
    245a:	8e e1       	ldi	r24, 0x1E	; 30
    245c:	e3 cf       	rjmp	.-58     	; 0x2424 <getMatrixColor(int)+0x5c>
    245e:	82 e3       	ldi	r24, 0x32	; 50
    2460:	8c 93       	st	X, r24
    2462:	94 e6       	ldi	r25, 0x64	; 100
    2464:	ce cf       	rjmp	.-100    	; 0x2402 <getMatrixColor(int)+0x3a>
    2466:	84 e6       	ldi	r24, 0x64	; 100
    2468:	e1 cf       	rjmp	.-62     	; 0x242c <getMatrixColor(int)+0x64>
    246a:	84 eb       	ldi	r24, 0xB4	; 180
    246c:	8c 93       	st	X, r24
    246e:	11 96       	adiw	r26, 0x01	; 1
    2470:	8c 93       	st	X, r24
    2472:	11 97       	sbiw	r26, 0x01	; 1
    2474:	c9 cf       	rjmp	.-110    	; 0x2408 <getMatrixColor(int)+0x40>
    2476:	1c 92       	st	X, r1
    2478:	11 96       	adiw	r26, 0x01	; 1
    247a:	1c 92       	st	X, r1
    247c:	11 97       	sbiw	r26, 0x01	; 1
    247e:	12 96       	adiw	r26, 0x02	; 2
    2480:	1c 92       	st	X, r1
    2482:	12 97       	sbiw	r26, 0x02	; 2
    2484:	c4 cf       	rjmp	.-120    	; 0x240e <getMatrixColor(int)+0x46>

00002486 <progMatrix(unsigned int, unsigned char)>:
    2486:	cf 92       	push	r12
    2488:	df 92       	push	r13
    248a:	ef 92       	push	r14
    248c:	ff 92       	push	r15
    248e:	0f 93       	push	r16
    2490:	1f 93       	push	r17
    2492:	cf 93       	push	r28
    2494:	df 93       	push	r29
    2496:	00 d0       	rcall	.+0      	; 0x2498 <progMatrix(unsigned int, unsigned char)+0x12>
    2498:	1f 92       	push	r1
    249a:	cd b7       	in	r28, 0x3d	; 61
    249c:	de b7       	in	r29, 0x3e	; 62
    249e:	7c 01       	movw	r14, r24
    24a0:	16 2f       	mov	r17, r22
    24a2:	80 91 fc 09 	lds	r24, 0x09FC	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    24a6:	81 11       	cpse	r24, r1
    24a8:	1e c0       	rjmp	.+60     	; 0x24e6 <progMatrix(unsigned int, unsigned char)+0x60>
    24aa:	61 e0       	ldi	r22, 0x01	; 1
    24ac:	8f e0       	ldi	r24, 0x0F	; 15
    24ae:	90 e1       	ldi	r25, 0x10	; 16
    24b0:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    24b4:	f0 92 07 01 	sts	0x0107, r15	; 0x800107 <nextChangeMillis+0x1>
    24b8:	e0 92 06 01 	sts	0x0106, r14	; 0x800106 <nextChangeMillis>
    24bc:	10 93 fb 09 	sts	0x09FB, r17	; 0x8009fb <nextSongPart>
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	80 93 fc 09 	sts	0x09FC, r24	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    24c6:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <zaehler+0x1>
    24ca:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <zaehler>
    24ce:	8b e1       	ldi	r24, 0x1B	; 27
    24d0:	90 e0       	ldi	r25, 0x00	; 0
    24d2:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <progMatrixZaehler+0x1>
    24d6:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <progMatrixZaehler>
    24da:	84 e6       	ldi	r24, 0x64	; 100
    24dc:	90 e0       	ldi	r25, 0x00	; 0
    24de:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <millisCounterTimer+0x1>
    24e2:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <millisCounterTimer>
    24e6:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    24ea:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    24ee:	84 36       	cpi	r24, 0x64	; 100
    24f0:	91 05       	cpc	r25, r1
    24f2:	08 f4       	brcc	.+2      	; 0x24f6 <progMatrix(unsigned int, unsigned char)+0x70>
    24f4:	f8 c3       	rjmp	.+2032   	; 0x2ce6 <progMatrix(unsigned int, unsigned char)+0x860>
    24f6:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    24fa:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    24fe:	e0 90 f3 09 	lds	r14, 0x09F3	; 0x8009f3 <zaehler>
    2502:	f0 90 f4 09 	lds	r15, 0x09F4	; 0x8009f4 <zaehler+0x1>
    2506:	00 e1       	ldi	r16, 0x10	; 16
    2508:	10 e0       	ldi	r17, 0x00	; 0
    250a:	f7 fc       	sbrc	r15, 7
    250c:	1c c0       	rjmp	.+56     	; 0x2546 <progMatrix(unsigned int, unsigned char)+0xc0>
    250e:	01 50       	subi	r16, 0x01	; 1
    2510:	11 09       	sbc	r17, r1
    2512:	02 30       	cpi	r16, 0x02	; 2
    2514:	11 05       	cpc	r17, r1
    2516:	14 f4       	brge	.+4      	; 0x251c <progMatrix(unsigned int, unsigned char)+0x96>
    2518:	10 e0       	ldi	r17, 0x00	; 0
    251a:	00 e0       	ldi	r16, 0x00	; 0
    251c:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2520:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2524:	b8 01       	movw	r22, r16
    2526:	ce 01       	movw	r24, r28
    2528:	01 96       	adiw	r24, 0x01	; 1
    252a:	4e df       	rcall	.-356    	; 0x23c8 <getMatrixColor(int)>
    252c:	9e 01       	movw	r18, r28
    252e:	2f 5f       	subi	r18, 0xFF	; 255
    2530:	3f 4f       	sbci	r19, 0xFF	; 255
    2532:	a7 01       	movw	r20, r14
    2534:	70 e0       	ldi	r23, 0x00	; 0
    2536:	60 e0       	ldi	r22, 0x00	; 0
    2538:	c6 01       	movw	r24, r12
    253a:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    253e:	81 e0       	ldi	r24, 0x01	; 1
    2540:	e8 1a       	sub	r14, r24
    2542:	f1 08       	sbc	r15, r1
    2544:	e2 cf       	rjmp	.-60     	; 0x250a <progMatrix(unsigned int, unsigned char)+0x84>
    2546:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    254a:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    254e:	04 51       	subi	r16, 0x14	; 20
    2550:	11 09       	sbc	r17, r1
    2552:	70 e1       	ldi	r23, 0x10	; 16
    2554:	e7 2e       	mov	r14, r23
    2556:	f1 2c       	mov	r15, r1
    2558:	0c 3e       	cpi	r16, 0xEC	; 236
    255a:	8f ef       	ldi	r24, 0xFF	; 255
    255c:	18 07       	cpc	r17, r24
    255e:	ec f0       	brlt	.+58     	; 0x259a <progMatrix(unsigned int, unsigned char)+0x114>
    2560:	81 e0       	ldi	r24, 0x01	; 1
    2562:	e8 1a       	sub	r14, r24
    2564:	f1 08       	sbc	r15, r1
    2566:	82 e0       	ldi	r24, 0x02	; 2
    2568:	e8 16       	cp	r14, r24
    256a:	f1 04       	cpc	r15, r1
    256c:	14 f4       	brge	.+4      	; 0x2572 <progMatrix(unsigned int, unsigned char)+0xec>
    256e:	f1 2c       	mov	r15, r1
    2570:	e1 2c       	mov	r14, r1
    2572:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2576:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    257a:	b7 01       	movw	r22, r14
    257c:	ce 01       	movw	r24, r28
    257e:	01 96       	adiw	r24, 0x01	; 1
    2580:	23 df       	rcall	.-442    	; 0x23c8 <getMatrixColor(int)>
    2582:	9e 01       	movw	r18, r28
    2584:	2f 5f       	subi	r18, 0xFF	; 255
    2586:	3f 4f       	sbci	r19, 0xFF	; 255
    2588:	a8 01       	movw	r20, r16
    258a:	62 e0       	ldi	r22, 0x02	; 2
    258c:	70 e0       	ldi	r23, 0x00	; 0
    258e:	c6 01       	movw	r24, r12
    2590:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2594:	01 50       	subi	r16, 0x01	; 1
    2596:	11 09       	sbc	r17, r1
    2598:	df cf       	rjmp	.-66     	; 0x2558 <progMatrix(unsigned int, unsigned char)+0xd2>
    259a:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    259e:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    25a2:	0f 50       	subi	r16, 0x0F	; 15
    25a4:	11 09       	sbc	r17, r1
    25a6:	60 e1       	ldi	r22, 0x10	; 16
    25a8:	e6 2e       	mov	r14, r22
    25aa:	f1 2c       	mov	r15, r1
    25ac:	01 3f       	cpi	r16, 0xF1	; 241
    25ae:	8f ef       	ldi	r24, 0xFF	; 255
    25b0:	18 07       	cpc	r17, r24
    25b2:	ec f0       	brlt	.+58     	; 0x25ee <progMatrix(unsigned int, unsigned char)+0x168>
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	e8 1a       	sub	r14, r24
    25b8:	f1 08       	sbc	r15, r1
    25ba:	82 e0       	ldi	r24, 0x02	; 2
    25bc:	e8 16       	cp	r14, r24
    25be:	f1 04       	cpc	r15, r1
    25c0:	14 f4       	brge	.+4      	; 0x25c6 <progMatrix(unsigned int, unsigned char)+0x140>
    25c2:	f1 2c       	mov	r15, r1
    25c4:	e1 2c       	mov	r14, r1
    25c6:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    25ca:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    25ce:	b7 01       	movw	r22, r14
    25d0:	ce 01       	movw	r24, r28
    25d2:	01 96       	adiw	r24, 0x01	; 1
    25d4:	f9 de       	rcall	.-526    	; 0x23c8 <getMatrixColor(int)>
    25d6:	9e 01       	movw	r18, r28
    25d8:	2f 5f       	subi	r18, 0xFF	; 255
    25da:	3f 4f       	sbci	r19, 0xFF	; 255
    25dc:	a8 01       	movw	r20, r16
    25de:	64 e0       	ldi	r22, 0x04	; 4
    25e0:	70 e0       	ldi	r23, 0x00	; 0
    25e2:	c6 01       	movw	r24, r12
    25e4:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    25e8:	01 50       	subi	r16, 0x01	; 1
    25ea:	11 09       	sbc	r17, r1
    25ec:	df cf       	rjmp	.-66     	; 0x25ac <progMatrix(unsigned int, unsigned char)+0x126>
    25ee:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    25f2:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    25f6:	08 50       	subi	r16, 0x08	; 8
    25f8:	11 09       	sbc	r17, r1
    25fa:	50 e1       	ldi	r21, 0x10	; 16
    25fc:	e5 2e       	mov	r14, r21
    25fe:	f1 2c       	mov	r15, r1
    2600:	08 3f       	cpi	r16, 0xF8	; 248
    2602:	8f ef       	ldi	r24, 0xFF	; 255
    2604:	18 07       	cpc	r17, r24
    2606:	ec f0       	brlt	.+58     	; 0x2642 <progMatrix(unsigned int, unsigned char)+0x1bc>
    2608:	81 e0       	ldi	r24, 0x01	; 1
    260a:	e8 1a       	sub	r14, r24
    260c:	f1 08       	sbc	r15, r1
    260e:	82 e0       	ldi	r24, 0x02	; 2
    2610:	e8 16       	cp	r14, r24
    2612:	f1 04       	cpc	r15, r1
    2614:	14 f4       	brge	.+4      	; 0x261a <progMatrix(unsigned int, unsigned char)+0x194>
    2616:	f1 2c       	mov	r15, r1
    2618:	e1 2c       	mov	r14, r1
    261a:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    261e:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2622:	b7 01       	movw	r22, r14
    2624:	ce 01       	movw	r24, r28
    2626:	01 96       	adiw	r24, 0x01	; 1
    2628:	cf de       	rcall	.-610    	; 0x23c8 <getMatrixColor(int)>
    262a:	9e 01       	movw	r18, r28
    262c:	2f 5f       	subi	r18, 0xFF	; 255
    262e:	3f 4f       	sbci	r19, 0xFF	; 255
    2630:	a8 01       	movw	r20, r16
    2632:	66 e0       	ldi	r22, 0x06	; 6
    2634:	70 e0       	ldi	r23, 0x00	; 0
    2636:	c6 01       	movw	r24, r12
    2638:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    263c:	01 50       	subi	r16, 0x01	; 1
    263e:	11 09       	sbc	r17, r1
    2640:	df cf       	rjmp	.-66     	; 0x2600 <progMatrix(unsigned int, unsigned char)+0x17a>
    2642:	e0 90 f3 09 	lds	r14, 0x09F3	; 0x8009f3 <zaehler>
    2646:	f0 90 f4 09 	lds	r15, 0x09F4	; 0x8009f4 <zaehler+0x1>
    264a:	00 e1       	ldi	r16, 0x10	; 16
    264c:	10 e0       	ldi	r17, 0x00	; 0
    264e:	f7 fc       	sbrc	r15, 7
    2650:	1c c0       	rjmp	.+56     	; 0x268a <progMatrix(unsigned int, unsigned char)+0x204>
    2652:	01 50       	subi	r16, 0x01	; 1
    2654:	11 09       	sbc	r17, r1
    2656:	02 30       	cpi	r16, 0x02	; 2
    2658:	11 05       	cpc	r17, r1
    265a:	14 f4       	brge	.+4      	; 0x2660 <progMatrix(unsigned int, unsigned char)+0x1da>
    265c:	10 e0       	ldi	r17, 0x00	; 0
    265e:	00 e0       	ldi	r16, 0x00	; 0
    2660:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2664:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2668:	b8 01       	movw	r22, r16
    266a:	ce 01       	movw	r24, r28
    266c:	01 96       	adiw	r24, 0x01	; 1
    266e:	ac de       	rcall	.-680    	; 0x23c8 <getMatrixColor(int)>
    2670:	9e 01       	movw	r18, r28
    2672:	2f 5f       	subi	r18, 0xFF	; 255
    2674:	3f 4f       	sbci	r19, 0xFF	; 255
    2676:	a7 01       	movw	r20, r14
    2678:	68 e0       	ldi	r22, 0x08	; 8
    267a:	70 e0       	ldi	r23, 0x00	; 0
    267c:	c6 01       	movw	r24, r12
    267e:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	e8 1a       	sub	r14, r24
    2686:	f1 08       	sbc	r15, r1
    2688:	e2 cf       	rjmp	.-60     	; 0x264e <progMatrix(unsigned int, unsigned char)+0x1c8>
    268a:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    268e:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    2692:	0e 50       	subi	r16, 0x0E	; 14
    2694:	11 09       	sbc	r17, r1
    2696:	40 e1       	ldi	r20, 0x10	; 16
    2698:	e4 2e       	mov	r14, r20
    269a:	f1 2c       	mov	r15, r1
    269c:	02 3f       	cpi	r16, 0xF2	; 242
    269e:	8f ef       	ldi	r24, 0xFF	; 255
    26a0:	18 07       	cpc	r17, r24
    26a2:	ec f0       	brlt	.+58     	; 0x26de <progMatrix(unsigned int, unsigned char)+0x258>
    26a4:	81 e0       	ldi	r24, 0x01	; 1
    26a6:	e8 1a       	sub	r14, r24
    26a8:	f1 08       	sbc	r15, r1
    26aa:	82 e0       	ldi	r24, 0x02	; 2
    26ac:	e8 16       	cp	r14, r24
    26ae:	f1 04       	cpc	r15, r1
    26b0:	14 f4       	brge	.+4      	; 0x26b6 <progMatrix(unsigned int, unsigned char)+0x230>
    26b2:	f1 2c       	mov	r15, r1
    26b4:	e1 2c       	mov	r14, r1
    26b6:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    26ba:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    26be:	b7 01       	movw	r22, r14
    26c0:	ce 01       	movw	r24, r28
    26c2:	01 96       	adiw	r24, 0x01	; 1
    26c4:	81 de       	rcall	.-766    	; 0x23c8 <getMatrixColor(int)>
    26c6:	9e 01       	movw	r18, r28
    26c8:	2f 5f       	subi	r18, 0xFF	; 255
    26ca:	3f 4f       	sbci	r19, 0xFF	; 255
    26cc:	a8 01       	movw	r20, r16
    26ce:	6a e0       	ldi	r22, 0x0A	; 10
    26d0:	70 e0       	ldi	r23, 0x00	; 0
    26d2:	c6 01       	movw	r24, r12
    26d4:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    26d8:	01 50       	subi	r16, 0x01	; 1
    26da:	11 09       	sbc	r17, r1
    26dc:	df cf       	rjmp	.-66     	; 0x269c <progMatrix(unsigned int, unsigned char)+0x216>
    26de:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    26e2:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    26e6:	05 51       	subi	r16, 0x15	; 21
    26e8:	11 09       	sbc	r17, r1
    26ea:	30 e1       	ldi	r19, 0x10	; 16
    26ec:	e3 2e       	mov	r14, r19
    26ee:	f1 2c       	mov	r15, r1
    26f0:	0b 3e       	cpi	r16, 0xEB	; 235
    26f2:	8f ef       	ldi	r24, 0xFF	; 255
    26f4:	18 07       	cpc	r17, r24
    26f6:	ec f0       	brlt	.+58     	; 0x2732 <progMatrix(unsigned int, unsigned char)+0x2ac>
    26f8:	81 e0       	ldi	r24, 0x01	; 1
    26fa:	e8 1a       	sub	r14, r24
    26fc:	f1 08       	sbc	r15, r1
    26fe:	82 e0       	ldi	r24, 0x02	; 2
    2700:	e8 16       	cp	r14, r24
    2702:	f1 04       	cpc	r15, r1
    2704:	14 f4       	brge	.+4      	; 0x270a <progMatrix(unsigned int, unsigned char)+0x284>
    2706:	f1 2c       	mov	r15, r1
    2708:	e1 2c       	mov	r14, r1
    270a:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    270e:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2712:	b7 01       	movw	r22, r14
    2714:	ce 01       	movw	r24, r28
    2716:	01 96       	adiw	r24, 0x01	; 1
    2718:	57 de       	rcall	.-850    	; 0x23c8 <getMatrixColor(int)>
    271a:	9e 01       	movw	r18, r28
    271c:	2f 5f       	subi	r18, 0xFF	; 255
    271e:	3f 4f       	sbci	r19, 0xFF	; 255
    2720:	a8 01       	movw	r20, r16
    2722:	6c e0       	ldi	r22, 0x0C	; 12
    2724:	70 e0       	ldi	r23, 0x00	; 0
    2726:	c6 01       	movw	r24, r12
    2728:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    272c:	01 50       	subi	r16, 0x01	; 1
    272e:	11 09       	sbc	r17, r1
    2730:	df cf       	rjmp	.-66     	; 0x26f0 <progMatrix(unsigned int, unsigned char)+0x26a>
    2732:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    2736:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    273a:	09 50       	subi	r16, 0x09	; 9
    273c:	11 09       	sbc	r17, r1
    273e:	20 e1       	ldi	r18, 0x10	; 16
    2740:	e2 2e       	mov	r14, r18
    2742:	f1 2c       	mov	r15, r1
    2744:	07 3f       	cpi	r16, 0xF7	; 247
    2746:	8f ef       	ldi	r24, 0xFF	; 255
    2748:	18 07       	cpc	r17, r24
    274a:	ec f0       	brlt	.+58     	; 0x2786 <progMatrix(unsigned int, unsigned char)+0x300>
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	e8 1a       	sub	r14, r24
    2750:	f1 08       	sbc	r15, r1
    2752:	82 e0       	ldi	r24, 0x02	; 2
    2754:	e8 16       	cp	r14, r24
    2756:	f1 04       	cpc	r15, r1
    2758:	14 f4       	brge	.+4      	; 0x275e <progMatrix(unsigned int, unsigned char)+0x2d8>
    275a:	f1 2c       	mov	r15, r1
    275c:	e1 2c       	mov	r14, r1
    275e:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2762:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2766:	b7 01       	movw	r22, r14
    2768:	ce 01       	movw	r24, r28
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	2d de       	rcall	.-934    	; 0x23c8 <getMatrixColor(int)>
    276e:	9e 01       	movw	r18, r28
    2770:	2f 5f       	subi	r18, 0xFF	; 255
    2772:	3f 4f       	sbci	r19, 0xFF	; 255
    2774:	a8 01       	movw	r20, r16
    2776:	6e e0       	ldi	r22, 0x0E	; 14
    2778:	70 e0       	ldi	r23, 0x00	; 0
    277a:	c6 01       	movw	r24, r12
    277c:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2780:	01 50       	subi	r16, 0x01	; 1
    2782:	11 09       	sbc	r17, r1
    2784:	df cf       	rjmp	.-66     	; 0x2744 <progMatrix(unsigned int, unsigned char)+0x2be>
    2786:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    278a:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    278e:	01 50       	subi	r16, 0x01	; 1
    2790:	11 09       	sbc	r17, r1
    2792:	90 e1       	ldi	r25, 0x10	; 16
    2794:	e9 2e       	mov	r14, r25
    2796:	f1 2c       	mov	r15, r1
    2798:	0f 3f       	cpi	r16, 0xFF	; 255
    279a:	8f ef       	ldi	r24, 0xFF	; 255
    279c:	18 07       	cpc	r17, r24
    279e:	ec f0       	brlt	.+58     	; 0x27da <progMatrix(unsigned int, unsigned char)+0x354>
    27a0:	81 e0       	ldi	r24, 0x01	; 1
    27a2:	e8 1a       	sub	r14, r24
    27a4:	f1 08       	sbc	r15, r1
    27a6:	82 e0       	ldi	r24, 0x02	; 2
    27a8:	e8 16       	cp	r14, r24
    27aa:	f1 04       	cpc	r15, r1
    27ac:	14 f4       	brge	.+4      	; 0x27b2 <progMatrix(unsigned int, unsigned char)+0x32c>
    27ae:	f1 2c       	mov	r15, r1
    27b0:	e1 2c       	mov	r14, r1
    27b2:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    27b6:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    27ba:	b7 01       	movw	r22, r14
    27bc:	ce 01       	movw	r24, r28
    27be:	01 96       	adiw	r24, 0x01	; 1
    27c0:	03 de       	rcall	.-1018   	; 0x23c8 <getMatrixColor(int)>
    27c2:	9e 01       	movw	r18, r28
    27c4:	2f 5f       	subi	r18, 0xFF	; 255
    27c6:	3f 4f       	sbci	r19, 0xFF	; 255
    27c8:	a8 01       	movw	r20, r16
    27ca:	60 e1       	ldi	r22, 0x10	; 16
    27cc:	70 e0       	ldi	r23, 0x00	; 0
    27ce:	c6 01       	movw	r24, r12
    27d0:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    27d4:	01 50       	subi	r16, 0x01	; 1
    27d6:	11 09       	sbc	r17, r1
    27d8:	df cf       	rjmp	.-66     	; 0x2798 <progMatrix(unsigned int, unsigned char)+0x312>
    27da:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    27de:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    27e2:	00 51       	subi	r16, 0x10	; 16
    27e4:	11 09       	sbc	r17, r1
    27e6:	80 e1       	ldi	r24, 0x10	; 16
    27e8:	e8 2e       	mov	r14, r24
    27ea:	f1 2c       	mov	r15, r1
    27ec:	00 3f       	cpi	r16, 0xF0	; 240
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	18 07       	cpc	r17, r24
    27f2:	ec f0       	brlt	.+58     	; 0x282e <progMatrix(unsigned int, unsigned char)+0x3a8>
    27f4:	81 e0       	ldi	r24, 0x01	; 1
    27f6:	e8 1a       	sub	r14, r24
    27f8:	f1 08       	sbc	r15, r1
    27fa:	82 e0       	ldi	r24, 0x02	; 2
    27fc:	e8 16       	cp	r14, r24
    27fe:	f1 04       	cpc	r15, r1
    2800:	14 f4       	brge	.+4      	; 0x2806 <progMatrix(unsigned int, unsigned char)+0x380>
    2802:	f1 2c       	mov	r15, r1
    2804:	e1 2c       	mov	r14, r1
    2806:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    280a:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    280e:	b7 01       	movw	r22, r14
    2810:	ce 01       	movw	r24, r28
    2812:	01 96       	adiw	r24, 0x01	; 1
    2814:	d9 dd       	rcall	.-1102   	; 0x23c8 <getMatrixColor(int)>
    2816:	9e 01       	movw	r18, r28
    2818:	2f 5f       	subi	r18, 0xFF	; 255
    281a:	3f 4f       	sbci	r19, 0xFF	; 255
    281c:	a8 01       	movw	r20, r16
    281e:	62 e1       	ldi	r22, 0x12	; 18
    2820:	70 e0       	ldi	r23, 0x00	; 0
    2822:	c6 01       	movw	r24, r12
    2824:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2828:	01 50       	subi	r16, 0x01	; 1
    282a:	11 09       	sbc	r17, r1
    282c:	df cf       	rjmp	.-66     	; 0x27ec <progMatrix(unsigned int, unsigned char)+0x366>
    282e:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    2832:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    2836:	07 51       	subi	r16, 0x17	; 23
    2838:	11 09       	sbc	r17, r1
    283a:	b0 e1       	ldi	r27, 0x10	; 16
    283c:	eb 2e       	mov	r14, r27
    283e:	f1 2c       	mov	r15, r1
    2840:	09 3e       	cpi	r16, 0xE9	; 233
    2842:	8f ef       	ldi	r24, 0xFF	; 255
    2844:	18 07       	cpc	r17, r24
    2846:	ec f0       	brlt	.+58     	; 0x2882 <progMatrix(unsigned int, unsigned char)+0x3fc>
    2848:	81 e0       	ldi	r24, 0x01	; 1
    284a:	e8 1a       	sub	r14, r24
    284c:	f1 08       	sbc	r15, r1
    284e:	82 e0       	ldi	r24, 0x02	; 2
    2850:	e8 16       	cp	r14, r24
    2852:	f1 04       	cpc	r15, r1
    2854:	14 f4       	brge	.+4      	; 0x285a <progMatrix(unsigned int, unsigned char)+0x3d4>
    2856:	f1 2c       	mov	r15, r1
    2858:	e1 2c       	mov	r14, r1
    285a:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    285e:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2862:	b7 01       	movw	r22, r14
    2864:	ce 01       	movw	r24, r28
    2866:	01 96       	adiw	r24, 0x01	; 1
    2868:	af dd       	rcall	.-1186   	; 0x23c8 <getMatrixColor(int)>
    286a:	9e 01       	movw	r18, r28
    286c:	2f 5f       	subi	r18, 0xFF	; 255
    286e:	3f 4f       	sbci	r19, 0xFF	; 255
    2870:	a8 01       	movw	r20, r16
    2872:	64 e1       	ldi	r22, 0x14	; 20
    2874:	70 e0       	ldi	r23, 0x00	; 0
    2876:	c6 01       	movw	r24, r12
    2878:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    287c:	01 50       	subi	r16, 0x01	; 1
    287e:	11 09       	sbc	r17, r1
    2880:	df cf       	rjmp	.-66     	; 0x2840 <progMatrix(unsigned int, unsigned char)+0x3ba>
    2882:	00 91 f3 09 	lds	r16, 0x09F3	; 0x8009f3 <zaehler>
    2886:	10 91 f4 09 	lds	r17, 0x09F4	; 0x8009f4 <zaehler+0x1>
    288a:	0b 50       	subi	r16, 0x0B	; 11
    288c:	11 09       	sbc	r17, r1
    288e:	a0 e1       	ldi	r26, 0x10	; 16
    2890:	ea 2e       	mov	r14, r26
    2892:	f1 2c       	mov	r15, r1
    2894:	05 3f       	cpi	r16, 0xF5	; 245
    2896:	8f ef       	ldi	r24, 0xFF	; 255
    2898:	18 07       	cpc	r17, r24
    289a:	ec f0       	brlt	.+58     	; 0x28d6 <progMatrix(unsigned int, unsigned char)+0x450>
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	e8 1a       	sub	r14, r24
    28a0:	f1 08       	sbc	r15, r1
    28a2:	82 e0       	ldi	r24, 0x02	; 2
    28a4:	e8 16       	cp	r14, r24
    28a6:	f1 04       	cpc	r15, r1
    28a8:	14 f4       	brge	.+4      	; 0x28ae <progMatrix(unsigned int, unsigned char)+0x428>
    28aa:	f1 2c       	mov	r15, r1
    28ac:	e1 2c       	mov	r14, r1
    28ae:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    28b2:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    28b6:	b7 01       	movw	r22, r14
    28b8:	ce 01       	movw	r24, r28
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	85 dd       	rcall	.-1270   	; 0x23c8 <getMatrixColor(int)>
    28be:	9e 01       	movw	r18, r28
    28c0:	2f 5f       	subi	r18, 0xFF	; 255
    28c2:	3f 4f       	sbci	r19, 0xFF	; 255
    28c4:	a8 01       	movw	r20, r16
    28c6:	66 e1       	ldi	r22, 0x16	; 22
    28c8:	70 e0       	ldi	r23, 0x00	; 0
    28ca:	c6 01       	movw	r24, r12
    28cc:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    28d0:	01 50       	subi	r16, 0x01	; 1
    28d2:	11 09       	sbc	r17, r1
    28d4:	df cf       	rjmp	.-66     	; 0x2894 <progMatrix(unsigned int, unsigned char)+0x40e>
    28d6:	e0 90 f1 09 	lds	r14, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    28da:	f0 90 f2 09 	lds	r15, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    28de:	00 e1       	ldi	r16, 0x10	; 16
    28e0:	10 e0       	ldi	r17, 0x00	; 0
    28e2:	f7 fc       	sbrc	r15, 7
    28e4:	1c c0       	rjmp	.+56     	; 0x291e <progMatrix(unsigned int, unsigned char)+0x498>
    28e6:	01 50       	subi	r16, 0x01	; 1
    28e8:	11 09       	sbc	r17, r1
    28ea:	02 30       	cpi	r16, 0x02	; 2
    28ec:	11 05       	cpc	r17, r1
    28ee:	14 f4       	brge	.+4      	; 0x28f4 <progMatrix(unsigned int, unsigned char)+0x46e>
    28f0:	10 e0       	ldi	r17, 0x00	; 0
    28f2:	00 e0       	ldi	r16, 0x00	; 0
    28f4:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    28f8:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    28fc:	b8 01       	movw	r22, r16
    28fe:	ce 01       	movw	r24, r28
    2900:	01 96       	adiw	r24, 0x01	; 1
    2902:	62 dd       	rcall	.-1340   	; 0x23c8 <getMatrixColor(int)>
    2904:	9e 01       	movw	r18, r28
    2906:	2f 5f       	subi	r18, 0xFF	; 255
    2908:	3f 4f       	sbci	r19, 0xFF	; 255
    290a:	a7 01       	movw	r20, r14
    290c:	70 e0       	ldi	r23, 0x00	; 0
    290e:	60 e0       	ldi	r22, 0x00	; 0
    2910:	c6 01       	movw	r24, r12
    2912:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2916:	81 e0       	ldi	r24, 0x01	; 1
    2918:	e8 1a       	sub	r14, r24
    291a:	f1 08       	sbc	r15, r1
    291c:	e2 cf       	rjmp	.-60     	; 0x28e2 <progMatrix(unsigned int, unsigned char)+0x45c>
    291e:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2922:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2926:	04 51       	subi	r16, 0x14	; 20
    2928:	11 09       	sbc	r17, r1
    292a:	f0 e1       	ldi	r31, 0x10	; 16
    292c:	ef 2e       	mov	r14, r31
    292e:	f1 2c       	mov	r15, r1
    2930:	0c 3e       	cpi	r16, 0xEC	; 236
    2932:	8f ef       	ldi	r24, 0xFF	; 255
    2934:	18 07       	cpc	r17, r24
    2936:	ec f0       	brlt	.+58     	; 0x2972 <progMatrix(unsigned int, unsigned char)+0x4ec>
    2938:	81 e0       	ldi	r24, 0x01	; 1
    293a:	e8 1a       	sub	r14, r24
    293c:	f1 08       	sbc	r15, r1
    293e:	82 e0       	ldi	r24, 0x02	; 2
    2940:	e8 16       	cp	r14, r24
    2942:	f1 04       	cpc	r15, r1
    2944:	14 f4       	brge	.+4      	; 0x294a <progMatrix(unsigned int, unsigned char)+0x4c4>
    2946:	f1 2c       	mov	r15, r1
    2948:	e1 2c       	mov	r14, r1
    294a:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    294e:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2952:	b7 01       	movw	r22, r14
    2954:	ce 01       	movw	r24, r28
    2956:	01 96       	adiw	r24, 0x01	; 1
    2958:	37 dd       	rcall	.-1426   	; 0x23c8 <getMatrixColor(int)>
    295a:	9e 01       	movw	r18, r28
    295c:	2f 5f       	subi	r18, 0xFF	; 255
    295e:	3f 4f       	sbci	r19, 0xFF	; 255
    2960:	a8 01       	movw	r20, r16
    2962:	61 e0       	ldi	r22, 0x01	; 1
    2964:	70 e0       	ldi	r23, 0x00	; 0
    2966:	c6 01       	movw	r24, r12
    2968:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    296c:	01 50       	subi	r16, 0x01	; 1
    296e:	11 09       	sbc	r17, r1
    2970:	df cf       	rjmp	.-66     	; 0x2930 <progMatrix(unsigned int, unsigned char)+0x4aa>
    2972:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2976:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    297a:	0f 50       	subi	r16, 0x0F	; 15
    297c:	11 09       	sbc	r17, r1
    297e:	e0 e1       	ldi	r30, 0x10	; 16
    2980:	ee 2e       	mov	r14, r30
    2982:	f1 2c       	mov	r15, r1
    2984:	01 3f       	cpi	r16, 0xF1	; 241
    2986:	8f ef       	ldi	r24, 0xFF	; 255
    2988:	18 07       	cpc	r17, r24
    298a:	ec f0       	brlt	.+58     	; 0x29c6 <progMatrix(unsigned int, unsigned char)+0x540>
    298c:	81 e0       	ldi	r24, 0x01	; 1
    298e:	e8 1a       	sub	r14, r24
    2990:	f1 08       	sbc	r15, r1
    2992:	82 e0       	ldi	r24, 0x02	; 2
    2994:	e8 16       	cp	r14, r24
    2996:	f1 04       	cpc	r15, r1
    2998:	14 f4       	brge	.+4      	; 0x299e <progMatrix(unsigned int, unsigned char)+0x518>
    299a:	f1 2c       	mov	r15, r1
    299c:	e1 2c       	mov	r14, r1
    299e:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    29a2:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    29a6:	b7 01       	movw	r22, r14
    29a8:	ce 01       	movw	r24, r28
    29aa:	01 96       	adiw	r24, 0x01	; 1
    29ac:	0d dd       	rcall	.-1510   	; 0x23c8 <getMatrixColor(int)>
    29ae:	9e 01       	movw	r18, r28
    29b0:	2f 5f       	subi	r18, 0xFF	; 255
    29b2:	3f 4f       	sbci	r19, 0xFF	; 255
    29b4:	a8 01       	movw	r20, r16
    29b6:	63 e0       	ldi	r22, 0x03	; 3
    29b8:	70 e0       	ldi	r23, 0x00	; 0
    29ba:	c6 01       	movw	r24, r12
    29bc:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    29c0:	01 50       	subi	r16, 0x01	; 1
    29c2:	11 09       	sbc	r17, r1
    29c4:	df cf       	rjmp	.-66     	; 0x2984 <progMatrix(unsigned int, unsigned char)+0x4fe>
    29c6:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    29ca:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    29ce:	08 50       	subi	r16, 0x08	; 8
    29d0:	11 09       	sbc	r17, r1
    29d2:	70 e1       	ldi	r23, 0x10	; 16
    29d4:	e7 2e       	mov	r14, r23
    29d6:	f1 2c       	mov	r15, r1
    29d8:	08 3f       	cpi	r16, 0xF8	; 248
    29da:	8f ef       	ldi	r24, 0xFF	; 255
    29dc:	18 07       	cpc	r17, r24
    29de:	ec f0       	brlt	.+58     	; 0x2a1a <progMatrix(unsigned int, unsigned char)+0x594>
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	e8 1a       	sub	r14, r24
    29e4:	f1 08       	sbc	r15, r1
    29e6:	82 e0       	ldi	r24, 0x02	; 2
    29e8:	e8 16       	cp	r14, r24
    29ea:	f1 04       	cpc	r15, r1
    29ec:	14 f4       	brge	.+4      	; 0x29f2 <progMatrix(unsigned int, unsigned char)+0x56c>
    29ee:	f1 2c       	mov	r15, r1
    29f0:	e1 2c       	mov	r14, r1
    29f2:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    29f6:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    29fa:	b7 01       	movw	r22, r14
    29fc:	ce 01       	movw	r24, r28
    29fe:	01 96       	adiw	r24, 0x01	; 1
    2a00:	e3 dc       	rcall	.-1594   	; 0x23c8 <getMatrixColor(int)>
    2a02:	9e 01       	movw	r18, r28
    2a04:	2f 5f       	subi	r18, 0xFF	; 255
    2a06:	3f 4f       	sbci	r19, 0xFF	; 255
    2a08:	a8 01       	movw	r20, r16
    2a0a:	65 e0       	ldi	r22, 0x05	; 5
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	c6 01       	movw	r24, r12
    2a10:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a14:	01 50       	subi	r16, 0x01	; 1
    2a16:	11 09       	sbc	r17, r1
    2a18:	df cf       	rjmp	.-66     	; 0x29d8 <progMatrix(unsigned int, unsigned char)+0x552>
    2a1a:	e0 90 f1 09 	lds	r14, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2a1e:	f0 90 f2 09 	lds	r15, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2a22:	00 e1       	ldi	r16, 0x10	; 16
    2a24:	10 e0       	ldi	r17, 0x00	; 0
    2a26:	f7 fc       	sbrc	r15, 7
    2a28:	1c c0       	rjmp	.+56     	; 0x2a62 <progMatrix(unsigned int, unsigned char)+0x5dc>
    2a2a:	01 50       	subi	r16, 0x01	; 1
    2a2c:	11 09       	sbc	r17, r1
    2a2e:	02 30       	cpi	r16, 0x02	; 2
    2a30:	11 05       	cpc	r17, r1
    2a32:	14 f4       	brge	.+4      	; 0x2a38 <progMatrix(unsigned int, unsigned char)+0x5b2>
    2a34:	10 e0       	ldi	r17, 0x00	; 0
    2a36:	00 e0       	ldi	r16, 0x00	; 0
    2a38:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2a3c:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2a40:	b8 01       	movw	r22, r16
    2a42:	ce 01       	movw	r24, r28
    2a44:	01 96       	adiw	r24, 0x01	; 1
    2a46:	c0 dc       	rcall	.-1664   	; 0x23c8 <getMatrixColor(int)>
    2a48:	9e 01       	movw	r18, r28
    2a4a:	2f 5f       	subi	r18, 0xFF	; 255
    2a4c:	3f 4f       	sbci	r19, 0xFF	; 255
    2a4e:	a7 01       	movw	r20, r14
    2a50:	67 e0       	ldi	r22, 0x07	; 7
    2a52:	70 e0       	ldi	r23, 0x00	; 0
    2a54:	c6 01       	movw	r24, r12
    2a56:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2a5a:	81 e0       	ldi	r24, 0x01	; 1
    2a5c:	e8 1a       	sub	r14, r24
    2a5e:	f1 08       	sbc	r15, r1
    2a60:	e2 cf       	rjmp	.-60     	; 0x2a26 <progMatrix(unsigned int, unsigned char)+0x5a0>
    2a62:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2a66:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2a6a:	0e 50       	subi	r16, 0x0E	; 14
    2a6c:	11 09       	sbc	r17, r1
    2a6e:	60 e1       	ldi	r22, 0x10	; 16
    2a70:	e6 2e       	mov	r14, r22
    2a72:	f1 2c       	mov	r15, r1
    2a74:	02 3f       	cpi	r16, 0xF2	; 242
    2a76:	8f ef       	ldi	r24, 0xFF	; 255
    2a78:	18 07       	cpc	r17, r24
    2a7a:	ec f0       	brlt	.+58     	; 0x2ab6 <progMatrix(unsigned int, unsigned char)+0x630>
    2a7c:	81 e0       	ldi	r24, 0x01	; 1
    2a7e:	e8 1a       	sub	r14, r24
    2a80:	f1 08       	sbc	r15, r1
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	e8 16       	cp	r14, r24
    2a86:	f1 04       	cpc	r15, r1
    2a88:	14 f4       	brge	.+4      	; 0x2a8e <progMatrix(unsigned int, unsigned char)+0x608>
    2a8a:	f1 2c       	mov	r15, r1
    2a8c:	e1 2c       	mov	r14, r1
    2a8e:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2a92:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2a96:	b7 01       	movw	r22, r14
    2a98:	ce 01       	movw	r24, r28
    2a9a:	01 96       	adiw	r24, 0x01	; 1
    2a9c:	95 dc       	rcall	.-1750   	; 0x23c8 <getMatrixColor(int)>
    2a9e:	9e 01       	movw	r18, r28
    2aa0:	2f 5f       	subi	r18, 0xFF	; 255
    2aa2:	3f 4f       	sbci	r19, 0xFF	; 255
    2aa4:	a8 01       	movw	r20, r16
    2aa6:	69 e0       	ldi	r22, 0x09	; 9
    2aa8:	70 e0       	ldi	r23, 0x00	; 0
    2aaa:	c6 01       	movw	r24, r12
    2aac:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ab0:	01 50       	subi	r16, 0x01	; 1
    2ab2:	11 09       	sbc	r17, r1
    2ab4:	df cf       	rjmp	.-66     	; 0x2a74 <progMatrix(unsigned int, unsigned char)+0x5ee>
    2ab6:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2aba:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2abe:	05 51       	subi	r16, 0x15	; 21
    2ac0:	11 09       	sbc	r17, r1
    2ac2:	50 e1       	ldi	r21, 0x10	; 16
    2ac4:	e5 2e       	mov	r14, r21
    2ac6:	f1 2c       	mov	r15, r1
    2ac8:	0b 3e       	cpi	r16, 0xEB	; 235
    2aca:	8f ef       	ldi	r24, 0xFF	; 255
    2acc:	18 07       	cpc	r17, r24
    2ace:	ec f0       	brlt	.+58     	; 0x2b0a <progMatrix(unsigned int, unsigned char)+0x684>
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	e8 1a       	sub	r14, r24
    2ad4:	f1 08       	sbc	r15, r1
    2ad6:	82 e0       	ldi	r24, 0x02	; 2
    2ad8:	e8 16       	cp	r14, r24
    2ada:	f1 04       	cpc	r15, r1
    2adc:	14 f4       	brge	.+4      	; 0x2ae2 <progMatrix(unsigned int, unsigned char)+0x65c>
    2ade:	f1 2c       	mov	r15, r1
    2ae0:	e1 2c       	mov	r14, r1
    2ae2:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2ae6:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2aea:	b7 01       	movw	r22, r14
    2aec:	ce 01       	movw	r24, r28
    2aee:	01 96       	adiw	r24, 0x01	; 1
    2af0:	6b dc       	rcall	.-1834   	; 0x23c8 <getMatrixColor(int)>
    2af2:	9e 01       	movw	r18, r28
    2af4:	2f 5f       	subi	r18, 0xFF	; 255
    2af6:	3f 4f       	sbci	r19, 0xFF	; 255
    2af8:	a8 01       	movw	r20, r16
    2afa:	6b e0       	ldi	r22, 0x0B	; 11
    2afc:	70 e0       	ldi	r23, 0x00	; 0
    2afe:	c6 01       	movw	r24, r12
    2b00:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b04:	01 50       	subi	r16, 0x01	; 1
    2b06:	11 09       	sbc	r17, r1
    2b08:	df cf       	rjmp	.-66     	; 0x2ac8 <progMatrix(unsigned int, unsigned char)+0x642>
    2b0a:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2b0e:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2b12:	09 50       	subi	r16, 0x09	; 9
    2b14:	11 09       	sbc	r17, r1
    2b16:	40 e1       	ldi	r20, 0x10	; 16
    2b18:	e4 2e       	mov	r14, r20
    2b1a:	f1 2c       	mov	r15, r1
    2b1c:	07 3f       	cpi	r16, 0xF7	; 247
    2b1e:	8f ef       	ldi	r24, 0xFF	; 255
    2b20:	18 07       	cpc	r17, r24
    2b22:	ec f0       	brlt	.+58     	; 0x2b5e <progMatrix(unsigned int, unsigned char)+0x6d8>
    2b24:	81 e0       	ldi	r24, 0x01	; 1
    2b26:	e8 1a       	sub	r14, r24
    2b28:	f1 08       	sbc	r15, r1
    2b2a:	82 e0       	ldi	r24, 0x02	; 2
    2b2c:	e8 16       	cp	r14, r24
    2b2e:	f1 04       	cpc	r15, r1
    2b30:	14 f4       	brge	.+4      	; 0x2b36 <progMatrix(unsigned int, unsigned char)+0x6b0>
    2b32:	f1 2c       	mov	r15, r1
    2b34:	e1 2c       	mov	r14, r1
    2b36:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2b3a:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2b3e:	b7 01       	movw	r22, r14
    2b40:	ce 01       	movw	r24, r28
    2b42:	01 96       	adiw	r24, 0x01	; 1
    2b44:	41 dc       	rcall	.-1918   	; 0x23c8 <getMatrixColor(int)>
    2b46:	9e 01       	movw	r18, r28
    2b48:	2f 5f       	subi	r18, 0xFF	; 255
    2b4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2b4c:	a8 01       	movw	r20, r16
    2b4e:	6d e0       	ldi	r22, 0x0D	; 13
    2b50:	70 e0       	ldi	r23, 0x00	; 0
    2b52:	c6 01       	movw	r24, r12
    2b54:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2b58:	01 50       	subi	r16, 0x01	; 1
    2b5a:	11 09       	sbc	r17, r1
    2b5c:	df cf       	rjmp	.-66     	; 0x2b1c <progMatrix(unsigned int, unsigned char)+0x696>
    2b5e:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2b62:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2b66:	01 50       	subi	r16, 0x01	; 1
    2b68:	11 09       	sbc	r17, r1
    2b6a:	30 e1       	ldi	r19, 0x10	; 16
    2b6c:	e3 2e       	mov	r14, r19
    2b6e:	f1 2c       	mov	r15, r1
    2b70:	0f 3f       	cpi	r16, 0xFF	; 255
    2b72:	8f ef       	ldi	r24, 0xFF	; 255
    2b74:	18 07       	cpc	r17, r24
    2b76:	ec f0       	brlt	.+58     	; 0x2bb2 <progMatrix(unsigned int, unsigned char)+0x72c>
    2b78:	81 e0       	ldi	r24, 0x01	; 1
    2b7a:	e8 1a       	sub	r14, r24
    2b7c:	f1 08       	sbc	r15, r1
    2b7e:	82 e0       	ldi	r24, 0x02	; 2
    2b80:	e8 16       	cp	r14, r24
    2b82:	f1 04       	cpc	r15, r1
    2b84:	14 f4       	brge	.+4      	; 0x2b8a <progMatrix(unsigned int, unsigned char)+0x704>
    2b86:	f1 2c       	mov	r15, r1
    2b88:	e1 2c       	mov	r14, r1
    2b8a:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2b8e:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2b92:	b7 01       	movw	r22, r14
    2b94:	ce 01       	movw	r24, r28
    2b96:	01 96       	adiw	r24, 0x01	; 1
    2b98:	17 dc       	rcall	.-2002   	; 0x23c8 <getMatrixColor(int)>
    2b9a:	9e 01       	movw	r18, r28
    2b9c:	2f 5f       	subi	r18, 0xFF	; 255
    2b9e:	3f 4f       	sbci	r19, 0xFF	; 255
    2ba0:	a8 01       	movw	r20, r16
    2ba2:	6f e0       	ldi	r22, 0x0F	; 15
    2ba4:	70 e0       	ldi	r23, 0x00	; 0
    2ba6:	c6 01       	movw	r24, r12
    2ba8:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2bac:	01 50       	subi	r16, 0x01	; 1
    2bae:	11 09       	sbc	r17, r1
    2bb0:	df cf       	rjmp	.-66     	; 0x2b70 <progMatrix(unsigned int, unsigned char)+0x6ea>
    2bb2:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2bb6:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2bba:	00 51       	subi	r16, 0x10	; 16
    2bbc:	11 09       	sbc	r17, r1
    2bbe:	20 e1       	ldi	r18, 0x10	; 16
    2bc0:	e2 2e       	mov	r14, r18
    2bc2:	f1 2c       	mov	r15, r1
    2bc4:	00 3f       	cpi	r16, 0xF0	; 240
    2bc6:	8f ef       	ldi	r24, 0xFF	; 255
    2bc8:	18 07       	cpc	r17, r24
    2bca:	ec f0       	brlt	.+58     	; 0x2c06 <progMatrix(unsigned int, unsigned char)+0x780>
    2bcc:	81 e0       	ldi	r24, 0x01	; 1
    2bce:	e8 1a       	sub	r14, r24
    2bd0:	f1 08       	sbc	r15, r1
    2bd2:	82 e0       	ldi	r24, 0x02	; 2
    2bd4:	e8 16       	cp	r14, r24
    2bd6:	f1 04       	cpc	r15, r1
    2bd8:	14 f4       	brge	.+4      	; 0x2bde <progMatrix(unsigned int, unsigned char)+0x758>
    2bda:	f1 2c       	mov	r15, r1
    2bdc:	e1 2c       	mov	r14, r1
    2bde:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2be2:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2be6:	b7 01       	movw	r22, r14
    2be8:	ce 01       	movw	r24, r28
    2bea:	01 96       	adiw	r24, 0x01	; 1
    2bec:	ed db       	rcall	.-2086   	; 0x23c8 <getMatrixColor(int)>
    2bee:	9e 01       	movw	r18, r28
    2bf0:	2f 5f       	subi	r18, 0xFF	; 255
    2bf2:	3f 4f       	sbci	r19, 0xFF	; 255
    2bf4:	a8 01       	movw	r20, r16
    2bf6:	61 e1       	ldi	r22, 0x11	; 17
    2bf8:	70 e0       	ldi	r23, 0x00	; 0
    2bfa:	c6 01       	movw	r24, r12
    2bfc:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c00:	01 50       	subi	r16, 0x01	; 1
    2c02:	11 09       	sbc	r17, r1
    2c04:	df cf       	rjmp	.-66     	; 0x2bc4 <progMatrix(unsigned int, unsigned char)+0x73e>
    2c06:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2c0a:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2c0e:	07 51       	subi	r16, 0x17	; 23
    2c10:	11 09       	sbc	r17, r1
    2c12:	90 e1       	ldi	r25, 0x10	; 16
    2c14:	e9 2e       	mov	r14, r25
    2c16:	f1 2c       	mov	r15, r1
    2c18:	09 3e       	cpi	r16, 0xE9	; 233
    2c1a:	8f ef       	ldi	r24, 0xFF	; 255
    2c1c:	18 07       	cpc	r17, r24
    2c1e:	ec f0       	brlt	.+58     	; 0x2c5a <progMatrix(unsigned int, unsigned char)+0x7d4>
    2c20:	81 e0       	ldi	r24, 0x01	; 1
    2c22:	e8 1a       	sub	r14, r24
    2c24:	f1 08       	sbc	r15, r1
    2c26:	82 e0       	ldi	r24, 0x02	; 2
    2c28:	e8 16       	cp	r14, r24
    2c2a:	f1 04       	cpc	r15, r1
    2c2c:	14 f4       	brge	.+4      	; 0x2c32 <progMatrix(unsigned int, unsigned char)+0x7ac>
    2c2e:	f1 2c       	mov	r15, r1
    2c30:	e1 2c       	mov	r14, r1
    2c32:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2c36:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2c3a:	b7 01       	movw	r22, r14
    2c3c:	ce 01       	movw	r24, r28
    2c3e:	01 96       	adiw	r24, 0x01	; 1
    2c40:	c3 db       	rcall	.-2170   	; 0x23c8 <getMatrixColor(int)>
    2c42:	9e 01       	movw	r18, r28
    2c44:	2f 5f       	subi	r18, 0xFF	; 255
    2c46:	3f 4f       	sbci	r19, 0xFF	; 255
    2c48:	a8 01       	movw	r20, r16
    2c4a:	63 e1       	ldi	r22, 0x13	; 19
    2c4c:	70 e0       	ldi	r23, 0x00	; 0
    2c4e:	c6 01       	movw	r24, r12
    2c50:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2c54:	01 50       	subi	r16, 0x01	; 1
    2c56:	11 09       	sbc	r17, r1
    2c58:	df cf       	rjmp	.-66     	; 0x2c18 <progMatrix(unsigned int, unsigned char)+0x792>
    2c5a:	00 91 f1 09 	lds	r16, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2c5e:	10 91 f2 09 	lds	r17, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2c62:	0b 50       	subi	r16, 0x0B	; 11
    2c64:	11 09       	sbc	r17, r1
    2c66:	80 e1       	ldi	r24, 0x10	; 16
    2c68:	e8 2e       	mov	r14, r24
    2c6a:	f1 2c       	mov	r15, r1
    2c6c:	05 3f       	cpi	r16, 0xF5	; 245
    2c6e:	8f ef       	ldi	r24, 0xFF	; 255
    2c70:	18 07       	cpc	r17, r24
    2c72:	ec f0       	brlt	.+58     	; 0x2cae <progMatrix(unsigned int, unsigned char)+0x828>
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	e8 1a       	sub	r14, r24
    2c78:	f1 08       	sbc	r15, r1
    2c7a:	82 e0       	ldi	r24, 0x02	; 2
    2c7c:	e8 16       	cp	r14, r24
    2c7e:	f1 04       	cpc	r15, r1
    2c80:	14 f4       	brge	.+4      	; 0x2c86 <progMatrix(unsigned int, unsigned char)+0x800>
    2c82:	f1 2c       	mov	r15, r1
    2c84:	e1 2c       	mov	r14, r1
    2c86:	c0 90 fe 0f 	lds	r12, 0x0FFE	; 0x800ffe <matrix>
    2c8a:	d0 90 ff 0f 	lds	r13, 0x0FFF	; 0x800fff <matrix+0x1>
    2c8e:	b7 01       	movw	r22, r14
    2c90:	ce 01       	movw	r24, r28
    2c92:	01 96       	adiw	r24, 0x01	; 1
    2c94:	99 db       	rcall	.-2254   	; 0x23c8 <getMatrixColor(int)>
    2c96:	9e 01       	movw	r18, r28
    2c98:	2f 5f       	subi	r18, 0xFF	; 255
    2c9a:	3f 4f       	sbci	r19, 0xFF	; 255
    2c9c:	a8 01       	movw	r20, r16
    2c9e:	65 e1       	ldi	r22, 0x15	; 21
    2ca0:	70 e0       	ldi	r23, 0x00	; 0
    2ca2:	c6 01       	movw	r24, r12
    2ca4:	0e 94 a4 33 	call	0x6748	; 0x6748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>
    2ca8:	01 50       	subi	r16, 0x01	; 1
    2caa:	11 09       	sbc	r17, r1
    2cac:	df cf       	rjmp	.-66     	; 0x2c6c <progMatrix(unsigned int, unsigned char)+0x7e6>
    2cae:	8f e0       	ldi	r24, 0x0F	; 15
    2cb0:	90 e1       	ldi	r25, 0x10	; 16
    2cb2:	0e 94 c7 05 	call	0xb8e	; 0xb8e <CFastLED::show()>
    2cb6:	80 91 f3 09 	lds	r24, 0x09F3	; 0x8009f3 <zaehler>
    2cba:	90 91 f4 09 	lds	r25, 0x09F4	; 0x8009f4 <zaehler+0x1>
    2cbe:	01 96       	adiw	r24, 0x01	; 1
    2cc0:	89 33       	cpi	r24, 0x39	; 57
    2cc2:	91 05       	cpc	r25, r1
    2cc4:	e4 f4       	brge	.+56     	; 0x2cfe <progMatrix(unsigned int, unsigned char)+0x878>
    2cc6:	90 93 f4 09 	sts	0x09F4, r25	; 0x8009f4 <zaehler+0x1>
    2cca:	80 93 f3 09 	sts	0x09F3, r24	; 0x8009f3 <zaehler>
    2cce:	80 91 f1 09 	lds	r24, 0x09F1	; 0x8009f1 <progMatrixZaehler>
    2cd2:	90 91 f2 09 	lds	r25, 0x09F2	; 0x8009f2 <progMatrixZaehler+0x1>
    2cd6:	01 96       	adiw	r24, 0x01	; 1
    2cd8:	89 33       	cpi	r24, 0x39	; 57
    2cda:	91 05       	cpc	r25, r1
    2cdc:	ac f4       	brge	.+42     	; 0x2d08 <progMatrix(unsigned int, unsigned char)+0x882>
    2cde:	90 93 f2 09 	sts	0x09F2, r25	; 0x8009f2 <progMatrixZaehler+0x1>
    2ce2:	80 93 f1 09 	sts	0x09F1, r24	; 0x8009f1 <progMatrixZaehler>
    2ce6:	0f 90       	pop	r0
    2ce8:	0f 90       	pop	r0
    2cea:	0f 90       	pop	r0
    2cec:	df 91       	pop	r29
    2cee:	cf 91       	pop	r28
    2cf0:	1f 91       	pop	r17
    2cf2:	0f 91       	pop	r16
    2cf4:	ff 90       	pop	r15
    2cf6:	ef 90       	pop	r14
    2cf8:	df 90       	pop	r13
    2cfa:	cf 90       	pop	r12
    2cfc:	08 95       	ret
    2cfe:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <zaehler+0x1>
    2d02:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <zaehler>
    2d06:	e3 cf       	rjmp	.-58     	; 0x2cce <progMatrix(unsigned int, unsigned char)+0x848>
    2d08:	10 92 f2 09 	sts	0x09F2, r1	; 0x8009f2 <progMatrixZaehler+0x1>
    2d0c:	10 92 f1 09 	sts	0x09F1, r1	; 0x8009f1 <progMatrixZaehler>
    2d10:	ea cf       	rjmp	.-44     	; 0x2ce6 <progMatrix(unsigned int, unsigned char)+0x860>

00002d12 <setupInterrupt()>:
    2d12:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2d16:	8b e0       	ldi	r24, 0x0B	; 11
    2d18:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    2d1c:	8a e6       	ldi	r24, 0x6A	; 106
    2d1e:	98 e1       	ldi	r25, 0x18	; 24
    2d20:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7e0099>
    2d24:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7e0098>
    2d28:	82 e0       	ldi	r24, 0x02	; 2
    2d2a:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    2d2e:	08 95       	ret

00002d30 <__vector_32>:
    2d30:	1f 92       	push	r1
    2d32:	0f 92       	push	r0
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	0f 92       	push	r0
    2d38:	11 24       	eor	r1, r1
    2d3a:	2f 93       	push	r18
    2d3c:	3f 93       	push	r19
    2d3e:	8f 93       	push	r24
    2d40:	9f 93       	push	r25
    2d42:	80 91 02 0a 	lds	r24, 0x0A02	; 0x800a02 <millisCounterTimer>
    2d46:	90 91 03 0a 	lds	r25, 0x0A03	; 0x800a03 <millisCounterTimer+0x1>
    2d4a:	49 96       	adiw	r24, 0x19	; 25
    2d4c:	90 93 03 0a 	sts	0x0A03, r25	; 0x800a03 <millisCounterTimer+0x1>
    2d50:	80 93 02 0a 	sts	0x0A02, r24	; 0x800a02 <millisCounterTimer>
    2d54:	80 91 fe 09 	lds	r24, 0x09FE	; 0x8009fe <millisCounterForSeconds>
    2d58:	90 91 ff 09 	lds	r25, 0x09FF	; 0x8009ff <millisCounterForSeconds+0x1>
    2d5c:	49 96       	adiw	r24, 0x19	; 25
    2d5e:	90 93 ff 09 	sts	0x09FF, r25	; 0x8009ff <millisCounterForSeconds+0x1>
    2d62:	80 93 fe 09 	sts	0x09FE, r24	; 0x8009fe <millisCounterForSeconds>
    2d66:	80 91 00 0a 	lds	r24, 0x0A00	; 0x800a00 <millisCounterForProgChange>
    2d6a:	90 91 01 0a 	lds	r25, 0x0A01	; 0x800a01 <millisCounterForProgChange+0x1>
    2d6e:	49 96       	adiw	r24, 0x19	; 25
    2d70:	90 93 01 0a 	sts	0x0A01, r25	; 0x800a01 <millisCounterForProgChange+0x1>
    2d74:	80 93 00 0a 	sts	0x0A00, r24	; 0x800a00 <millisCounterForProgChange>
    2d78:	91 e0       	ldi	r25, 0x01	; 1
    2d7a:	90 93 fd 09 	sts	0x09FD, r25	; 0x8009fd <flag_processFastLED>
    2d7e:	8b b1       	in	r24, 0x0b	; 11
    2d80:	20 e4       	ldi	r18, 0x40	; 64
    2d82:	82 27       	eor	r24, r18
    2d84:	8b b9       	out	0x0b, r24	; 11
    2d86:	20 91 fe 09 	lds	r18, 0x09FE	; 0x8009fe <millisCounterForSeconds>
    2d8a:	30 91 ff 09 	lds	r19, 0x09FF	; 0x8009ff <millisCounterForSeconds+0x1>
    2d8e:	28 3e       	cpi	r18, 0xE8	; 232
    2d90:	33 40       	sbci	r19, 0x03	; 3
    2d92:	30 f0       	brcs	.+12     	; 0x2da0 <__vector_32+0x70>
    2d94:	10 92 ff 09 	sts	0x09FF, r1	; 0x8009ff <millisCounterForSeconds+0x1>
    2d98:	10 92 fe 09 	sts	0x09FE, r1	; 0x8009fe <millisCounterForSeconds>
    2d9c:	90 93 f9 09 	sts	0x09F9, r25	; 0x8009f9 <OneSecondHasPast>
    2da0:	20 91 00 0a 	lds	r18, 0x0A00	; 0x800a00 <millisCounterForProgChange>
    2da4:	30 91 01 0a 	lds	r19, 0x0A01	; 0x800a01 <millisCounterForProgChange+0x1>
    2da8:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <nextChangeMillis>
    2dac:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <nextChangeMillis+0x1>
    2db0:	28 17       	cp	r18, r24
    2db2:	39 07       	cpc	r19, r25
    2db4:	c0 f0       	brcs	.+48     	; 0x2de6 <__vector_32+0xb6>
    2db6:	80 91 fb 09 	lds	r24, 0x09FB	; 0x8009fb <nextSongPart>
    2dba:	80 93 fa 09 	sts	0x09FA, r24	; 0x8009fa <prog>
    2dbe:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    2dc2:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    2dc6:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterForProgChange+0x1>
    2dca:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterForProgChange>
    2dce:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <zaehler+0x1>
    2dd2:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <zaehler>
    2dd6:	87 e1       	ldi	r24, 0x17	; 23
    2dd8:	90 e0       	ldi	r25, 0x00	; 0
    2dda:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <progScrollTextZaehler+0x1>
    2dde:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <progScrollTextZaehler>
    2de2:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    2de6:	9f 91       	pop	r25
    2de8:	8f 91       	pop	r24
    2dea:	3f 91       	pop	r19
    2dec:	2f 91       	pop	r18
    2dee:	0f 90       	pop	r0
    2df0:	0f be       	out	0x3f, r0	; 63
    2df2:	0f 90       	pop	r0
    2df4:	1f 90       	pop	r1
    2df6:	18 95       	reti

00002df8 <switchToSong(unsigned char)>:
    2df8:	10 92 03 0a 	sts	0x0A03, r1	; 0x800a03 <millisCounterTimer+0x1>
    2dfc:	10 92 02 0a 	sts	0x0A02, r1	; 0x800a02 <millisCounterTimer>
    2e00:	10 92 01 0a 	sts	0x0A01, r1	; 0x800a01 <millisCounterForProgChange+0x1>
    2e04:	10 92 00 0a 	sts	0x0A00, r1	; 0x800a00 <millisCounterForProgChange>
    2e08:	10 92 b6 09 	sts	0x09B6, r1	; 0x8009b6 <progBlingBlingColoring_rounds+0x1>
    2e0c:	10 92 b5 09 	sts	0x09B5, r1	; 0x8009b5 <progBlingBlingColoring_rounds>
    2e10:	10 92 b2 09 	sts	0x09B2, r1	; 0x8009b2 <progCLED_hue>
    2e14:	10 92 b1 09 	sts	0x09B1, r1	; 0x8009b1 <progCLED_counter+0x1>
    2e18:	10 92 b0 09 	sts	0x09B0, r1	; 0x8009b0 <progCLED_counter>
    2e1c:	10 92 f4 09 	sts	0x09F4, r1	; 0x8009f4 <zaehler+0x1>
    2e20:	10 92 f3 09 	sts	0x09F3, r1	; 0x8009f3 <zaehler>
    2e24:	80 93 0f 0a 	sts	0x0A0F, r24	; 0x800a0f <songID>
    2e28:	10 92 fa 09 	sts	0x09FA, r1	; 0x8009fa <prog>
    2e2c:	10 92 fc 09 	sts	0x09FC, r1	; 0x8009fc <nextChangeMillisAlreadyCalculated>
    2e30:	6f e1       	ldi	r22, 0x1F	; 31
    2e32:	71 e0       	ldi	r23, 0x01	; 1
    2e34:	8f e9       	ldi	r24, 0x9F	; 159
    2e36:	90 e1       	ldi	r25, 0x10	; 16
    2e38:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    2e3c:	8f e9       	ldi	r24, 0x9F	; 159
    2e3e:	90 e1       	ldi	r25, 0x10	; 16
    2e40:	0c 94 f4 3f 	jmp	0x7fe8	; 0x7fe8 <Print::println()>

00002e44 <setup>:
    2e44:	af 92       	push	r10
    2e46:	bf 92       	push	r11
    2e48:	cf 92       	push	r12
    2e4a:	df 92       	push	r13
    2e4c:	ef 92       	push	r14
    2e4e:	ff 92       	push	r15
    2e50:	0f 93       	push	r16
    2e52:	1f 93       	push	r17
    2e54:	cf 93       	push	r28
    2e56:	df 93       	push	r29
    2e58:	68 ee       	ldi	r22, 0xE8	; 232
    2e5a:	73 e0       	ldi	r23, 0x03	; 3
    2e5c:	80 e0       	ldi	r24, 0x00	; 0
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 bb 3b 	call	0x7776	; 0x7776 <delay>
    2e64:	4f ef       	ldi	r20, 0xFF	; 255
    2e66:	60 e4       	ldi	r22, 0x40	; 64
    2e68:	70 e0       	ldi	r23, 0x00	; 0
    2e6a:	8a e2       	ldi	r24, 0x2A	; 42
    2e6c:	90 e1       	ldi	r25, 0x10	; 16
    2e6e:	0e 94 9e 3e 	call	0x7d3c	; 0x7d3c <HardwareSerial::_begin(unsigned int, unsigned char)>
    2e72:	56 9a       	sbi	0x0a, 6	; 10
    2e74:	88 e2       	ldi	r24, 0x28	; 40
    2e76:	0e 94 23 3a 	call	0x7446	; 0x7446 <analogRead>
    2e7a:	bc 01       	movw	r22, r24
    2e7c:	99 0f       	add	r25, r25
    2e7e:	88 0b       	sbc	r24, r24
    2e80:	99 0b       	sbc	r25, r25
    2e82:	1f 92       	push	r1
    2e84:	1f 92       	push	r1
    2e86:	1f 92       	push	r1
    2e88:	28 e7       	ldi	r18, 0x78	; 120
    2e8a:	2f 93       	push	r18
    2e8c:	a1 2c       	mov	r10, r1
    2e8e:	b1 2c       	mov	r11, r1
    2e90:	65 01       	movw	r12, r10
    2e92:	ee 24       	eor	r14, r14
    2e94:	ea 94       	dec	r14
    2e96:	13 e0       	ldi	r17, 0x03	; 3
    2e98:	f1 2e       	mov	r15, r17
    2e9a:	00 e0       	ldi	r16, 0x00	; 0
    2e9c:	10 e0       	ldi	r17, 0x00	; 0
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	a9 01       	movw	r20, r18
    2ea4:	0e 94 65 42 	call	0x84ca	; 0x84ca <map(long, long, long, long, long)>
    2ea8:	60 93 06 0a 	sts	0x0A06, r22	; 0x800a06 <voltageSmooth>
    2eac:	82 e3       	ldi	r24, 0x32	; 50
    2eae:	91 e0       	ldi	r25, 0x01	; 1
    2eb0:	0e 94 68 3f 	call	0x7ed0	; 0x7ed0 <operator new(unsigned int)>
    2eb4:	ec 01       	movw	r28, r24
    2eb6:	0a e0       	ldi	r16, 0x0A	; 10
    2eb8:	27 e1       	ldi	r18, 0x17	; 23
    2eba:	30 e0       	ldi	r19, 0x00	; 0
    2ebc:	46 e1       	ldi	r20, 0x16	; 22
    2ebe:	50 e0       	ldi	r21, 0x00	; 0
    2ec0:	60 e1       	ldi	r22, 0x10	; 16
    2ec2:	7a e0       	ldi	r23, 0x0A	; 10
    2ec4:	0e 94 cd 30 	call	0x619a	; 0x619a <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>
    2ec8:	d0 93 ff 0f 	sts	0x0FFF, r29	; 0x800fff <matrix+0x1>
    2ecc:	c0 93 fe 0f 	sts	0x0FFE, r28	; 0x800ffe <matrix>
    2ed0:	80 91 27 09 	lds	r24, 0x0927	; 0x800927 <guard variable for CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    2ed4:	0f 90       	pop	r0
    2ed6:	0f 90       	pop	r0
    2ed8:	0f 90       	pop	r0
    2eda:	0f 90       	pop	r0
    2edc:	81 11       	cpse	r24, r1
    2ede:	4d c0       	rjmp	.+154    	; 0x2f7a <setup+0x136>
    2ee0:	87 e2       	ldi	r24, 0x27	; 39
    2ee2:	99 e0       	ldi	r25, 0x09	; 9
    2ee4:	0e 94 69 3f 	call	0x7ed2	; 0x7ed2 <__cxa_guard_acquire>
    2ee8:	89 2b       	or	r24, r25
    2eea:	09 f4       	brne	.+2      	; 0x2eee <setup+0xaa>
    2eec:	46 c0       	rjmp	.+140    	; 0x2f7a <setup+0x136>
    2eee:	10 92 32 09 	sts	0x0932, r1	; 0x800932 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x3>
    2ef2:	10 92 31 09 	sts	0x0931, r1	; 0x800931 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x2>
    2ef6:	8f ef       	ldi	r24, 0xFF	; 255
    2ef8:	80 93 35 09 	sts	0x0935, r24	; 0x800935 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x6>
    2efc:	80 93 36 09 	sts	0x0936, r24	; 0x800936 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x7>
    2f00:	80 93 37 09 	sts	0x0937, r24	; 0x800937 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x8>
    2f04:	80 93 38 09 	sts	0x0938, r24	; 0x800938 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x9>
    2f08:	80 93 39 09 	sts	0x0939, r24	; 0x800939 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xa>
    2f0c:	80 93 3a 09 	sts	0x093A, r24	; 0x80093a <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xb>
    2f10:	81 e0       	ldi	r24, 0x01	; 1
    2f12:	80 93 3b 09 	sts	0x093B, r24	; 0x80093b <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xc>
    2f16:	10 92 3d 09 	sts	0x093D, r1	; 0x80093d <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xe>
    2f1a:	10 92 3c 09 	sts	0x093C, r1	; 0x80093c <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xd>
    2f1e:	10 92 34 09 	sts	0x0934, r1	; 0x800934 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x5>
    2f22:	10 92 33 09 	sts	0x0933, r1	; 0x800933 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x4>
    2f26:	80 91 0d 10 	lds	r24, 0x100D	; 0x80100d <CLEDController::m_pHead>
    2f2a:	90 91 0e 10 	lds	r25, 0x100E	; 0x80100e <CLEDController::m_pHead+0x1>
    2f2e:	89 2b       	or	r24, r25
    2f30:	31 f4       	brne	.+12     	; 0x2f3e <setup+0xfa>
    2f32:	8f e2       	ldi	r24, 0x2F	; 47
    2f34:	99 e0       	ldi	r25, 0x09	; 9
    2f36:	90 93 0e 10 	sts	0x100E, r25	; 0x80100e <CLEDController::m_pHead+0x1>
    2f3a:	80 93 0d 10 	sts	0x100D, r24	; 0x80100d <CLEDController::m_pHead>
    2f3e:	e0 91 0b 10 	lds	r30, 0x100B	; 0x80100b <CLEDController::m_pTail>
    2f42:	f0 91 0c 10 	lds	r31, 0x100C	; 0x80100c <CLEDController::m_pTail+0x1>
    2f46:	30 97       	sbiw	r30, 0x00	; 0
    2f48:	21 f0       	breq	.+8      	; 0x2f52 <setup+0x10e>
    2f4a:	8f e2       	ldi	r24, 0x2F	; 47
    2f4c:	99 e0       	ldi	r25, 0x09	; 9
    2f4e:	95 83       	std	Z+5, r25	; 0x05
    2f50:	84 83       	std	Z+4, r24	; 0x04
    2f52:	8f e2       	ldi	r24, 0x2F	; 47
    2f54:	99 e0       	ldi	r25, 0x09	; 9
    2f56:	90 93 0c 10 	sts	0x100C, r25	; 0x80100c <CLEDController::m_pTail+0x1>
    2f5a:	80 93 0b 10 	sts	0x100B, r24	; 0x80100b <CLEDController::m_pTail>
    2f5e:	10 92 3f 09 	sts	0x093F, r1	; 0x80093f <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x10>
    2f62:	10 92 3e 09 	sts	0x093E, r1	; 0x80093e <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0xf>
    2f66:	84 eb       	ldi	r24, 0xB4	; 180
    2f68:	94 e0       	ldi	r25, 0x04	; 4
    2f6a:	90 93 30 09 	sts	0x0930, r25	; 0x800930 <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c+0x1>
    2f6e:	80 93 2f 09 	sts	0x092F, r24	; 0x80092f <CLEDController& CFastLED::addLeds<NEOPIXEL, (unsigned char)12>(CRGB*, int, int)::c>
    2f72:	87 e2       	ldi	r24, 0x27	; 39
    2f74:	99 e0       	ldi	r25, 0x09	; 9
    2f76:	0e 94 72 3f 	call	0x7ee4	; 0x7ee4 <__cxa_guard_release>
    2f7a:	30 e0       	ldi	r19, 0x00	; 0
    2f7c:	20 e0       	ldi	r18, 0x00	; 0
    2f7e:	4a ef       	ldi	r20, 0xFA	; 250
    2f80:	51 e0       	ldi	r21, 0x01	; 1
    2f82:	60 e1       	ldi	r22, 0x10	; 16
    2f84:	7a e0       	ldi	r23, 0x0A	; 10
    2f86:	8f e2       	ldi	r24, 0x2F	; 47
    2f88:	99 e0       	ldi	r25, 0x09	; 9
    2f8a:	0e 94 bd 36 	call	0x6d7a	; 0x6d7a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>
    2f8e:	fc 01       	movw	r30, r24
    2f90:	8f ef       	ldi	r24, 0xFF	; 255
    2f92:	86 83       	std	Z+6, r24	; 0x06
    2f94:	80 eb       	ldi	r24, 0xB0	; 176
    2f96:	87 83       	std	Z+7, r24	; 0x07
    2f98:	80 ef       	ldi	r24, 0xF0	; 240
    2f9a:	80 87       	std	Z+8, r24	; 0x08
    2f9c:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    2fa0:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    2fa4:	0e 94 44 31 	call	0x6288	; 0x6288 <Framebuffer_GFX::begin()>
    2fa8:	80 91 fe 0f 	lds	r24, 0x0FFE	; 0x800ffe <matrix>
    2fac:	90 91 ff 0f 	lds	r25, 0x0FFF	; 0x800fff <matrix+0x1>
    2fb0:	2f e0       	ldi	r18, 0x0F	; 15
    2fb2:	20 93 0f 10 	sts	0x100F, r18	; 0x80100f <FastLED>
    2fb6:	fc 01       	movw	r30, r24
    2fb8:	16 8a       	std	Z+22, r1	; 0x16
    2fba:	69 e8       	ldi	r22, 0x89	; 137
    2fbc:	74 e0       	ldi	r23, 0x04	; 4
    2fbe:	0e 94 d3 33 	call	0x67a6	; 0x67a6 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>
    2fc2:	f8 94       	cli
    2fc4:	a6 de       	rcall	.-692    	; 0x2d12 <setupInterrupt()>
    2fc6:	78 94       	sei
    2fc8:	68 eb       	ldi	r22, 0xB8	; 184
    2fca:	76 e0       	ldi	r23, 0x06	; 6
    2fcc:	8c eb       	ldi	r24, 0xBC	; 188
    2fce:	99 e0       	ldi	r25, 0x09	; 9
    2fd0:	0e 94 ac 05 	call	0xb58	; 0xb58 <CRGBPalette16::operator=(unsigned long const (&) [16])>
    2fd4:	81 e0       	ldi	r24, 0x01	; 1
    2fd6:	90 e0       	ldi	r25, 0x00	; 0
    2fd8:	90 93 bb 09 	sts	0x09BB, r25	; 0x8009bb <currentBlending+0x1>
    2fdc:	80 93 ba 09 	sts	0x09BA, r24	; 0x8009ba <currentBlending>
    2fe0:	80 e0       	ldi	r24, 0x00	; 0
    2fe2:	df 91       	pop	r29
    2fe4:	cf 91       	pop	r28
    2fe6:	1f 91       	pop	r17
    2fe8:	0f 91       	pop	r16
    2fea:	ff 90       	pop	r15
    2fec:	ef 90       	pop	r14
    2fee:	df 90       	pop	r13
    2ff0:	cf 90       	pop	r12
    2ff2:	bf 90       	pop	r11
    2ff4:	af 90       	pop	r10
    2ff6:	00 cf       	rjmp	.-512    	; 0x2df8 <switchToSong(unsigned char)>

00002ff8 <defaultLoop()>:
    2ff8:	ef 92       	push	r14
    2ffa:	ff 92       	push	r15
    2ffc:	0f 93       	push	r16
    2ffe:	1f 93       	push	r17
    3000:	cf 93       	push	r28
    3002:	df 93       	push	r29
    3004:	00 d0       	rcall	.+0      	; 0x3006 <defaultLoop()+0xe>
    3006:	00 d0       	rcall	.+0      	; 0x3008 <defaultLoop()+0x10>
    3008:	00 d0       	rcall	.+0      	; 0x300a <defaultLoop()+0x12>
    300a:	1f 92       	push	r1
    300c:	cd b7       	in	r28, 0x3d	; 61
    300e:	de b7       	in	r29, 0x3e	; 62
    3010:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    3014:	86 30       	cpi	r24, 0x06	; 6
    3016:	09 f4       	brne	.+2      	; 0x301a <defaultLoop()+0x22>
    3018:	7f c0       	rjmp	.+254    	; 0x3118 <defaultLoop()+0x120>
    301a:	18 f5       	brcc	.+70     	; 0x3062 <defaultLoop()+0x6a>
    301c:	82 30       	cpi	r24, 0x02	; 2
    301e:	09 f4       	brne	.+2      	; 0x3022 <defaultLoop()+0x2a>
    3020:	4c c0       	rjmp	.+152    	; 0x30ba <defaultLoop()+0xc2>
    3022:	90 f4       	brcc	.+36     	; 0x3048 <defaultLoop()+0x50>
    3024:	88 23       	and	r24, r24
    3026:	e1 f1       	breq	.+120    	; 0x30a0 <defaultLoop()+0xa8>
    3028:	81 30       	cpi	r24, 0x01	; 1
    302a:	09 f4       	brne	.+2      	; 0x302e <defaultLoop()+0x36>
    302c:	3e c0       	rjmp	.+124    	; 0x30aa <defaultLoop()+0xb2>
    302e:	27 96       	adiw	r28, 0x07	; 7
    3030:	0f b6       	in	r0, 0x3f	; 63
    3032:	f8 94       	cli
    3034:	de bf       	out	0x3e, r29	; 62
    3036:	0f be       	out	0x3f, r0	; 63
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	df 91       	pop	r29
    303c:	cf 91       	pop	r28
    303e:	1f 91       	pop	r17
    3040:	0f 91       	pop	r16
    3042:	ff 90       	pop	r15
    3044:	ef 90       	pop	r14
    3046:	08 95       	ret
    3048:	84 30       	cpi	r24, 0x04	; 4
    304a:	09 f4       	brne	.+2      	; 0x304e <defaultLoop()+0x56>
    304c:	5f c0       	rjmp	.+190    	; 0x310c <defaultLoop()+0x114>
    304e:	08 f4       	brcc	.+2      	; 0x3052 <defaultLoop()+0x5a>
    3050:	45 c0       	rjmp	.+138    	; 0x30dc <defaultLoop()+0xe4>
    3052:	40 ed       	ldi	r20, 0xD0	; 208
    3054:	57 e0       	ldi	r21, 0x07	; 7
    3056:	66 e0       	ldi	r22, 0x06	; 6
    3058:	88 e9       	ldi	r24, 0x98	; 152
    305a:	9a e3       	ldi	r25, 0x3A	; 58
    305c:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3060:	e6 cf       	rjmp	.-52     	; 0x302e <defaultLoop()+0x36>
    3062:	89 30       	cpi	r24, 0x09	; 9
    3064:	09 f4       	brne	.+2      	; 0x3068 <defaultLoop()+0x70>
    3066:	6b c0       	rjmp	.+214    	; 0x313e <defaultLoop()+0x146>
    3068:	60 f4       	brcc	.+24     	; 0x3082 <defaultLoop()+0x8a>
    306a:	87 30       	cpi	r24, 0x07	; 7
    306c:	09 f4       	brne	.+2      	; 0x3070 <defaultLoop()+0x78>
    306e:	5f c0       	rjmp	.+190    	; 0x312e <defaultLoop()+0x136>
    3070:	88 30       	cpi	r24, 0x08	; 8
    3072:	e9 f6       	brne	.-70     	; 0x302e <defaultLoop()+0x36>
    3074:	49 e0       	ldi	r20, 0x09	; 9
    3076:	65 e0       	ldi	r22, 0x05	; 5
    3078:	88 e9       	ldi	r24, 0x98	; 152
    307a:	9a e3       	ldi	r25, 0x3A	; 58
    307c:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3080:	d6 cf       	rjmp	.-84     	; 0x302e <defaultLoop()+0x36>
    3082:	8b 30       	cpi	r24, 0x0B	; 11
    3084:	09 f4       	brne	.+2      	; 0x3088 <defaultLoop()+0x90>
    3086:	67 c0       	rjmp	.+206    	; 0x3156 <defaultLoop()+0x15e>
    3088:	08 f4       	brcc	.+2      	; 0x308c <defaultLoop()+0x94>
    308a:	5f c0       	rjmp	.+190    	; 0x314a <defaultLoop()+0x152>
    308c:	84 36       	cpi	r24, 0x64	; 100
    308e:	79 f6       	brne	.-98     	; 0x302e <defaultLoop()+0x36>
    3090:	60 e0       	ldi	r22, 0x00	; 0
    3092:	8f e0       	ldi	r24, 0x0F	; 15
    3094:	90 e1       	ldi	r25, 0x10	; 16
    3096:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	ad de       	rcall	.-678    	; 0x2df8 <switchToSong(unsigned char)>
    309e:	c7 cf       	rjmp	.-114    	; 0x302e <defaultLoop()+0x36>
    30a0:	61 e0       	ldi	r22, 0x01	; 1
    30a2:	80 e6       	ldi	r24, 0x60	; 96
    30a4:	9a ee       	ldi	r25, 0xEA	; 234
    30a6:	ef d9       	rcall	.-3106   	; 0x2486 <progMatrix(unsigned int, unsigned char)>
    30a8:	c2 cf       	rjmp	.-124    	; 0x302e <defaultLoop()+0x36>
    30aa:	42 e0       	ldi	r20, 0x02	; 2
    30ac:	60 ea       	ldi	r22, 0xA0	; 160
    30ae:	7f e0       	ldi	r23, 0x0F	; 15
    30b0:	88 e9       	ldi	r24, 0x98	; 152
    30b2:	9a e3       	ldi	r25, 0x3A	; 58
    30b4:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    30b8:	ba cf       	rjmp	.-140    	; 0x302e <defaultLoop()+0x36>
    30ba:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    30be:	7c 01       	movw	r14, r24
    30c0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    30c4:	8c 01       	movw	r16, r24
    30c6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    30ca:	9c 01       	movw	r18, r24
    30cc:	42 e3       	ldi	r20, 0x32	; 50
    30ce:	50 e0       	ldi	r21, 0x00	; 0
    30d0:	63 e0       	ldi	r22, 0x03	; 3
    30d2:	88 e8       	ldi	r24, 0x88	; 136
    30d4:	93 e1       	ldi	r25, 0x13	; 19
    30d6:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    30da:	a9 cf       	rjmp	.-174    	; 0x302e <defaultLoop()+0x36>
    30dc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    30e0:	7c 01       	movw	r14, r24
    30e2:	65 e7       	ldi	r22, 0x75	; 117
    30e4:	72 e0       	ldi	r23, 0x02	; 2
    30e6:	ce 01       	movw	r24, r28
    30e8:	01 96       	adiw	r24, 0x01	; 1
    30ea:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    30ee:	04 e0       	ldi	r16, 0x04	; 4
    30f0:	97 01       	movw	r18, r14
    30f2:	4a e5       	ldi	r20, 0x5A	; 90
    30f4:	50 e0       	ldi	r21, 0x00	; 0
    30f6:	60 e3       	ldi	r22, 0x30	; 48
    30f8:	75 e7       	ldi	r23, 0x75	; 117
    30fa:	ce 01       	movw	r24, r28
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3102:	ce 01       	movw	r24, r28
    3104:	01 96       	adiw	r24, 0x01	; 1
    3106:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    310a:	91 cf       	rjmp	.-222    	; 0x302e <defaultLoop()+0x36>
    310c:	65 e0       	ldi	r22, 0x05	; 5
    310e:	88 e9       	ldi	r24, 0x98	; 152
    3110:	9a e3       	ldi	r25, 0x3A	; 58
    3112:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3116:	8b cf       	rjmp	.-234    	; 0x302e <defaultLoop()+0x36>
    3118:	ee 24       	eor	r14, r14
    311a:	ea 94       	dec	r14
    311c:	f1 2c       	mov	r15, r1
    311e:	0f ef       	ldi	r16, 0xFF	; 255
    3120:	10 e0       	ldi	r17, 0x00	; 0
    3122:	2f ef       	ldi	r18, 0xFF	; 255
    3124:	30 e0       	ldi	r19, 0x00	; 0
    3126:	42 e3       	ldi	r20, 0x32	; 50
    3128:	50 e0       	ldi	r21, 0x00	; 0
    312a:	67 e0       	ldi	r22, 0x07	; 7
    312c:	d2 cf       	rjmp	.-92     	; 0x30d2 <defaultLoop()+0xda>
    312e:	48 ee       	ldi	r20, 0xE8	; 232
    3130:	53 e0       	ldi	r21, 0x03	; 3
    3132:	68 e0       	ldi	r22, 0x08	; 8
    3134:	88 e9       	ldi	r24, 0x98	; 152
    3136:	9a e3       	ldi	r25, 0x3A	; 58
    3138:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    313c:	78 cf       	rjmp	.-272    	; 0x302e <defaultLoop()+0x36>
    313e:	6a e0       	ldi	r22, 0x0A	; 10
    3140:	80 e1       	ldi	r24, 0x10	; 16
    3142:	97 e2       	ldi	r25, 0x27	; 39
    3144:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <progOutline(unsigned int, unsigned char)>
    3148:	72 cf       	rjmp	.-284    	; 0x302e <defaultLoop()+0x36>
    314a:	6b e0       	ldi	r22, 0x0B	; 11
    314c:	80 e1       	ldi	r24, 0x10	; 16
    314e:	97 e2       	ldi	r25, 0x27	; 39
    3150:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3154:	6c cf       	rjmp	.-296    	; 0x302e <defaultLoop()+0x36>
    3156:	44 ef       	ldi	r20, 0xF4	; 244
    3158:	51 e0       	ldi	r21, 0x01	; 1
    315a:	64 e6       	ldi	r22, 0x64	; 100
    315c:	88 e9       	ldi	r24, 0x98	; 152
    315e:	9a e3       	ldi	r25, 0x3A	; 58
    3160:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3164:	64 cf       	rjmp	.-312    	; 0x302e <defaultLoop()+0x36>

00003166 <LearnToFly()>:
    3166:	ef 92       	push	r14
    3168:	ff 92       	push	r15
    316a:	0f 93       	push	r16
    316c:	1f 93       	push	r17
    316e:	cf 93       	push	r28
    3170:	df 93       	push	r29
    3172:	00 d0       	rcall	.+0      	; 0x3174 <LearnToFly()+0xe>
    3174:	00 d0       	rcall	.+0      	; 0x3176 <LearnToFly()+0x10>
    3176:	00 d0       	rcall	.+0      	; 0x3178 <LearnToFly()+0x12>
    3178:	1f 92       	push	r1
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
    317e:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    3182:	89 31       	cpi	r24, 0x19	; 25
    3184:	09 f4       	brne	.+2      	; 0x3188 <LearnToFly()+0x22>
    3186:	85 c0       	rjmp	.+266    	; 0x3292 <LearnToFly()+0x12c>
    3188:	38 f5       	brcc	.+78     	; 0x31d8 <LearnToFly()+0x72>
    318a:	85 30       	cpi	r24, 0x05	; 5
    318c:	09 f4       	brne	.+2      	; 0x3190 <LearnToFly()+0x2a>
    318e:	6d c0       	rjmp	.+218    	; 0x326a <LearnToFly()+0x104>
    3190:	98 f4       	brcc	.+38     	; 0x31b8 <LearnToFly()+0x52>
    3192:	88 23       	and	r24, r24
    3194:	09 f4       	brne	.+2      	; 0x3198 <LearnToFly()+0x32>
    3196:	49 c0       	rjmp	.+146    	; 0x322a <LearnToFly()+0xc4>
    3198:	82 30       	cpi	r24, 0x02	; 2
    319a:	09 f4       	brne	.+2      	; 0x319e <LearnToFly()+0x38>
    319c:	5e c0       	rjmp	.+188    	; 0x325a <LearnToFly()+0xf4>
    319e:	27 96       	adiw	r28, 0x07	; 7
    31a0:	0f b6       	in	r0, 0x3f	; 63
    31a2:	f8 94       	cli
    31a4:	de bf       	out	0x3e, r29	; 62
    31a6:	0f be       	out	0x3f, r0	; 63
    31a8:	cd bf       	out	0x3d, r28	; 61
    31aa:	df 91       	pop	r29
    31ac:	cf 91       	pop	r28
    31ae:	1f 91       	pop	r17
    31b0:	0f 91       	pop	r16
    31b2:	ff 90       	pop	r15
    31b4:	ef 90       	pop	r14
    31b6:	08 95       	ret
    31b8:	8f 30       	cpi	r24, 0x0F	; 15
    31ba:	09 f4       	brne	.+2      	; 0x31be <LearnToFly()+0x58>
    31bc:	5c c0       	rjmp	.+184    	; 0x3276 <LearnToFly()+0x110>
    31be:	84 31       	cpi	r24, 0x14	; 20
    31c0:	09 f4       	brne	.+2      	; 0x31c4 <LearnToFly()+0x5e>
    31c2:	5f c0       	rjmp	.+190    	; 0x3282 <LearnToFly()+0x11c>
    31c4:	8a 30       	cpi	r24, 0x0A	; 10
    31c6:	59 f7       	brne	.-42     	; 0x319e <LearnToFly()+0x38>
    31c8:	49 ea       	ldi	r20, 0xA9	; 169
    31ca:	51 e0       	ldi	r21, 0x01	; 1
    31cc:	6f e0       	ldi	r22, 0x0F	; 15
    31ce:	82 e8       	ldi	r24, 0x82	; 130
    31d0:	90 e6       	ldi	r25, 0x60	; 96
    31d2:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    31d6:	e3 cf       	rjmp	.-58     	; 0x319e <LearnToFly()+0x38>
    31d8:	8d 32       	cpi	r24, 0x2D	; 45
    31da:	09 f4       	brne	.+2      	; 0x31de <LearnToFly()+0x78>
    31dc:	74 c0       	rjmp	.+232    	; 0x32c6 <LearnToFly()+0x160>
    31de:	70 f4       	brcc	.+28     	; 0x31fc <LearnToFly()+0x96>
    31e0:	83 32       	cpi	r24, 0x23	; 35
    31e2:	09 f4       	brne	.+2      	; 0x31e6 <LearnToFly()+0x80>
    31e4:	5d c0       	rjmp	.+186    	; 0x32a0 <LearnToFly()+0x13a>
    31e6:	88 32       	cpi	r24, 0x28	; 40
    31e8:	09 f4       	brne	.+2      	; 0x31ec <LearnToFly()+0x86>
    31ea:	69 c0       	rjmp	.+210    	; 0x32be <LearnToFly()+0x158>
    31ec:	8e 31       	cpi	r24, 0x1E	; 30
    31ee:	b9 f6       	brne	.-82     	; 0x319e <LearnToFly()+0x38>
    31f0:	63 e2       	ldi	r22, 0x23	; 35
    31f2:	8b e4       	ldi	r24, 0x4B	; 75
    31f4:	9e e6       	ldi	r25, 0x6E	; 110
    31f6:	0e 94 25 06 	call	0xc4a	; 0xc4a <progBlingBlingColoring(unsigned int, unsigned char)>
    31fa:	d1 cf       	rjmp	.-94     	; 0x319e <LearnToFly()+0x38>
    31fc:	87 33       	cpi	r24, 0x37	; 55
    31fe:	09 f4       	brne	.+2      	; 0x3202 <LearnToFly()+0x9c>
    3200:	67 c0       	rjmp	.+206    	; 0x32d0 <LearnToFly()+0x16a>
    3202:	84 36       	cpi	r24, 0x64	; 100
    3204:	09 f4       	brne	.+2      	; 0x3208 <LearnToFly()+0xa2>
    3206:	68 c0       	rjmp	.+208    	; 0x32d8 <LearnToFly()+0x172>
    3208:	82 33       	cpi	r24, 0x32	; 50
    320a:	49 f6       	brne	.-110    	; 0x319e <LearnToFly()+0x38>
    320c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3210:	7c 01       	movw	r14, r24
    3212:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3216:	8c 01       	movw	r16, r24
    3218:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    321c:	9c 01       	movw	r18, r24
    321e:	4b e4       	ldi	r20, 0x4B	; 75
    3220:	50 e0       	ldi	r21, 0x00	; 0
    3222:	67 e3       	ldi	r22, 0x37	; 55
    3224:	86 e2       	ldi	r24, 0x26	; 38
    3226:	97 e3       	ldi	r25, 0x37	; 55
    3228:	47 c0       	rjmp	.+142    	; 0x32b8 <LearnToFly()+0x152>
    322a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    322e:	7c 01       	movw	r14, r24
    3230:	60 e3       	ldi	r22, 0x30	; 48
    3232:	71 e0       	ldi	r23, 0x01	; 1
    3234:	ce 01       	movw	r24, r28
    3236:	01 96       	adiw	r24, 0x01	; 1
    3238:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    323c:	02 e0       	ldi	r16, 0x02	; 2
    323e:	97 01       	movw	r18, r14
    3240:	4b e4       	ldi	r20, 0x4B	; 75
    3242:	50 e0       	ldi	r21, 0x00	; 0
    3244:	6c e6       	ldi	r22, 0x6C	; 108
    3246:	75 e3       	ldi	r23, 0x35	; 53
    3248:	ce 01       	movw	r24, r28
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3250:	ce 01       	movw	r24, r28
    3252:	01 96       	adiw	r24, 0x01	; 1
    3254:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    3258:	a2 cf       	rjmp	.-188    	; 0x319e <LearnToFly()+0x38>
    325a:	45 e0       	ldi	r20, 0x05	; 5
    325c:	68 eb       	ldi	r22, 0xB8	; 184
    325e:	71 e0       	ldi	r23, 0x01	; 1
    3260:	83 e9       	ldi	r24, 0x93	; 147
    3262:	9b e1       	ldi	r25, 0x1B	; 27
    3264:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    3268:	9a cf       	rjmp	.-204    	; 0x319e <LearnToFly()+0x38>
    326a:	6a e0       	ldi	r22, 0x0A	; 10
    326c:	8b e4       	ldi	r24, 0x4B	; 75
    326e:	9e e6       	ldi	r25, 0x6E	; 110
    3270:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3274:	94 cf       	rjmp	.-216    	; 0x319e <LearnToFly()+0x38>
    3276:	64 e1       	ldi	r22, 0x14	; 20
    3278:	86 e2       	ldi	r24, 0x26	; 38
    327a:	97 e3       	ldi	r25, 0x37	; 55
    327c:	0e 94 b6 09 	call	0x136c	; 0x136c <progStern(unsigned int, unsigned char)>
    3280:	8e cf       	rjmp	.-228    	; 0x319e <LearnToFly()+0x38>
    3282:	49 ea       	ldi	r20, 0xA9	; 169
    3284:	51 e0       	ldi	r21, 0x01	; 1
    3286:	69 e1       	ldi	r22, 0x19	; 25
    3288:	8b e4       	ldi	r24, 0x4B	; 75
    328a:	9e e6       	ldi	r25, 0x6E	; 110
    328c:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3290:	86 cf       	rjmp	.-244    	; 0x319e <LearnToFly()+0x38>
    3292:	4e e1       	ldi	r20, 0x1E	; 30
    3294:	65 e0       	ldi	r22, 0x05	; 5
    3296:	80 e3       	ldi	r24, 0x30	; 48
    3298:	95 e7       	ldi	r25, 0x75	; 117
    329a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    329e:	7f cf       	rjmp	.-258    	; 0x319e <LearnToFly()+0x38>
    32a0:	ee 24       	eor	r14, r14
    32a2:	ea 94       	dec	r14
    32a4:	f1 2c       	mov	r15, r1
    32a6:	0f ef       	ldi	r16, 0xFF	; 255
    32a8:	10 e0       	ldi	r17, 0x00	; 0
    32aa:	2f ef       	ldi	r18, 0xFF	; 255
    32ac:	30 e0       	ldi	r19, 0x00	; 0
    32ae:	4b e4       	ldi	r20, 0x4B	; 75
    32b0:	50 e0       	ldi	r21, 0x00	; 0
    32b2:	68 e2       	ldi	r22, 0x28	; 40
    32b4:	89 ec       	ldi	r24, 0xC9	; 201
    32b6:	9d e0       	ldi	r25, 0x0D	; 13
    32b8:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    32bc:	70 cf       	rjmp	.-288    	; 0x319e <LearnToFly()+0x38>
    32be:	49 ea       	ldi	r20, 0xA9	; 169
    32c0:	51 e0       	ldi	r21, 0x01	; 1
    32c2:	6d e2       	ldi	r22, 0x2D	; 45
    32c4:	84 cf       	rjmp	.-248    	; 0x31ce <LearnToFly()+0x68>
    32c6:	42 e3       	ldi	r20, 0x32	; 50
    32c8:	65 e0       	ldi	r22, 0x05	; 5
    32ca:	88 eb       	ldi	r24, 0xB8	; 184
    32cc:	92 e5       	ldi	r25, 0x52	; 82
    32ce:	e5 cf       	rjmp	.-54     	; 0x329a <LearnToFly()+0x134>
    32d0:	64 e6       	ldi	r22, 0x64	; 100
    32d2:	8f ef       	ldi	r24, 0xFF	; 255
    32d4:	9f ef       	ldi	r25, 0xFF	; 255
    32d6:	8f cf       	rjmp	.-226    	; 0x31f6 <LearnToFly()+0x90>
    32d8:	60 e0       	ldi	r22, 0x00	; 0
    32da:	8f e0       	ldi	r24, 0x0F	; 15
    32dc:	90 e1       	ldi	r25, 0x10	; 16
    32de:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    32e2:	80 e0       	ldi	r24, 0x00	; 0
    32e4:	89 dd       	rcall	.-1262   	; 0x2df8 <switchToSong(unsigned char)>
    32e6:	5b cf       	rjmp	.-330    	; 0x319e <LearnToFly()+0x38>

000032e8 <Castle()>:
    32e8:	ef 92       	push	r14
    32ea:	ff 92       	push	r15
    32ec:	0f 93       	push	r16
    32ee:	1f 93       	push	r17
    32f0:	cf 93       	push	r28
    32f2:	df 93       	push	r29
    32f4:	00 d0       	rcall	.+0      	; 0x32f6 <Castle()+0xe>
    32f6:	00 d0       	rcall	.+0      	; 0x32f8 <Castle()+0x10>
    32f8:	00 d0       	rcall	.+0      	; 0x32fa <Castle()+0x12>
    32fa:	1f 92       	push	r1
    32fc:	cd b7       	in	r28, 0x3d	; 61
    32fe:	de b7       	in	r29, 0x3e	; 62
    3300:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    3304:	82 33       	cpi	r24, 0x32	; 50
    3306:	09 f4       	brne	.+2      	; 0x330a <Castle()+0x22>
    3308:	e9 c0       	rjmp	.+466    	; 0x34dc <Castle()+0x1f4>
    330a:	08 f0       	brcs	.+2      	; 0x330e <Castle()+0x26>
    330c:	49 c0       	rjmp	.+146    	; 0x33a0 <Castle()+0xb8>
    330e:	84 31       	cpi	r24, 0x14	; 20
    3310:	09 f4       	brne	.+2      	; 0x3314 <Castle()+0x2c>
    3312:	c6 c0       	rjmp	.+396    	; 0x34a0 <Castle()+0x1b8>
    3314:	10 f5       	brcc	.+68     	; 0x335a <Castle()+0x72>
    3316:	85 30       	cpi	r24, 0x05	; 5
    3318:	09 f4       	brne	.+2      	; 0x331c <Castle()+0x34>
    331a:	b4 c0       	rjmp	.+360    	; 0x3484 <Castle()+0x19c>
    331c:	98 f4       	brcc	.+38     	; 0x3344 <Castle()+0x5c>
    331e:	88 23       	and	r24, r24
    3320:	09 f4       	brne	.+2      	; 0x3324 <Castle()+0x3c>
    3322:	92 c0       	rjmp	.+292    	; 0x3448 <Castle()+0x160>
    3324:	81 30       	cpi	r24, 0x01	; 1
    3326:	09 f4       	brne	.+2      	; 0x332a <Castle()+0x42>
    3328:	a7 c0       	rjmp	.+334    	; 0x3478 <Castle()+0x190>
    332a:	27 96       	adiw	r28, 0x07	; 7
    332c:	0f b6       	in	r0, 0x3f	; 63
    332e:	f8 94       	cli
    3330:	de bf       	out	0x3e, r29	; 62
    3332:	0f be       	out	0x3f, r0	; 63
    3334:	cd bf       	out	0x3d, r28	; 61
    3336:	df 91       	pop	r29
    3338:	cf 91       	pop	r28
    333a:	1f 91       	pop	r17
    333c:	0f 91       	pop	r16
    333e:	ff 90       	pop	r15
    3340:	ef 90       	pop	r14
    3342:	08 95       	ret
    3344:	8a 30       	cpi	r24, 0x0A	; 10
    3346:	09 f4       	brne	.+2      	; 0x334a <Castle()+0x62>
    3348:	a5 c0       	rjmp	.+330    	; 0x3494 <Castle()+0x1ac>
    334a:	8f 30       	cpi	r24, 0x0F	; 15
    334c:	71 f7       	brne	.-36     	; 0x332a <Castle()+0x42>
    334e:	64 e1       	ldi	r22, 0x14	; 20
    3350:	87 ee       	ldi	r24, 0xE7	; 231
    3352:	90 e4       	ldi	r25, 0x40	; 64
    3354:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    3358:	e8 cf       	rjmp	.-48     	; 0x332a <Castle()+0x42>
    335a:	83 32       	cpi	r24, 0x23	; 35
    335c:	09 f4       	brne	.+2      	; 0x3360 <Castle()+0x78>
    335e:	b6 c0       	rjmp	.+364    	; 0x34cc <Castle()+0x1e4>
    3360:	b0 f4       	brcc	.+44     	; 0x338e <Castle()+0xa6>
    3362:	89 31       	cpi	r24, 0x19	; 25
    3364:	09 f4       	brne	.+2      	; 0x3368 <Castle()+0x80>
    3366:	ac c0       	rjmp	.+344    	; 0x34c0 <Castle()+0x1d8>
    3368:	8e 31       	cpi	r24, 0x1E	; 30
    336a:	f9 f6       	brne	.-66     	; 0x332a <Castle()+0x42>
    336c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3370:	7c 01       	movw	r14, r24
    3372:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3376:	8c 01       	movw	r16, r24
    3378:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    337c:	9c 01       	movw	r18, r24
    337e:	42 e3       	ldi	r20, 0x32	; 50
    3380:	50 e0       	ldi	r21, 0x00	; 0
    3382:	63 e2       	ldi	r22, 0x23	; 35
    3384:	86 e3       	ldi	r24, 0x36	; 54
    3386:	97 e0       	ldi	r25, 0x07	; 7
    3388:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    338c:	ce cf       	rjmp	.-100    	; 0x332a <Castle()+0x42>
    338e:	88 32       	cpi	r24, 0x28	; 40
    3390:	09 f4       	brne	.+2      	; 0x3394 <Castle()+0xac>
    3392:	a2 c0       	rjmp	.+324    	; 0x34d8 <Castle()+0x1f0>
    3394:	8d 32       	cpi	r24, 0x2D	; 45
    3396:	49 f6       	brne	.-110    	; 0x332a <Castle()+0x42>
    3398:	62 e3       	ldi	r22, 0x32	; 50
    339a:	8b e7       	ldi	r24, 0x7B	; 123
    339c:	92 e3       	ldi	r25, 0x32	; 50
    339e:	da cf       	rjmp	.-76     	; 0x3354 <Castle()+0x6c>
    33a0:	86 34       	cpi	r24, 0x46	; 70
    33a2:	09 f4       	brne	.+2      	; 0x33a6 <Castle()+0xbe>
    33a4:	b6 c0       	rjmp	.+364    	; 0x3512 <Castle()+0x22a>
    33a6:	50 f5       	brcc	.+84     	; 0x33fc <Castle()+0x114>
    33a8:	8a 33       	cpi	r24, 0x3A	; 58
    33aa:	09 f4       	brne	.+2      	; 0x33ae <Castle()+0xc6>
    33ac:	a4 c0       	rjmp	.+328    	; 0x34f6 <Castle()+0x20e>
    33ae:	98 f4       	brcc	.+38     	; 0x33d6 <Castle()+0xee>
    33b0:	87 33       	cpi	r24, 0x37	; 55
    33b2:	09 f4       	brne	.+2      	; 0x33b6 <Castle()+0xce>
    33b4:	98 c0       	rjmp	.+304    	; 0x34e6 <Castle()+0x1fe>
    33b6:	88 33       	cpi	r24, 0x38	; 56
    33b8:	09 f0       	breq	.+2      	; 0x33bc <Castle()+0xd4>
    33ba:	b7 cf       	rjmp	.-146    	; 0x332a <Castle()+0x42>
    33bc:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    33c0:	7c 01       	movw	r14, r24
    33c2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    33c6:	8c 01       	movw	r16, r24
    33c8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    33cc:	9c 01       	movw	r18, r24
    33ce:	42 e3       	ldi	r20, 0x32	; 50
    33d0:	50 e0       	ldi	r21, 0x00	; 0
    33d2:	6a e3       	ldi	r22, 0x3A	; 58
    33d4:	d7 cf       	rjmp	.-82     	; 0x3384 <Castle()+0x9c>
    33d6:	8c 33       	cpi	r24, 0x3C	; 60
    33d8:	09 f4       	brne	.+2      	; 0x33dc <Castle()+0xf4>
    33da:	93 c0       	rjmp	.+294    	; 0x3502 <Castle()+0x21a>
    33dc:	81 34       	cpi	r24, 0x41	; 65
    33de:	09 f0       	breq	.+2      	; 0x33e2 <Castle()+0xfa>
    33e0:	a4 cf       	rjmp	.-184    	; 0x332a <Castle()+0x42>
    33e2:	ee 24       	eor	r14, r14
    33e4:	ea 94       	dec	r14
    33e6:	f1 2c       	mov	r15, r1
    33e8:	0f ef       	ldi	r16, 0xFF	; 255
    33ea:	10 e0       	ldi	r17, 0x00	; 0
    33ec:	2f ef       	ldi	r18, 0xFF	; 255
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	42 e3       	ldi	r20, 0x32	; 50
    33f2:	50 e0       	ldi	r21, 0x00	; 0
    33f4:	66 e4       	ldi	r22, 0x46	; 70
    33f6:	8c e6       	ldi	r24, 0x6C	; 108
    33f8:	9e e0       	ldi	r25, 0x0E	; 14
    33fa:	c6 cf       	rjmp	.-116    	; 0x3388 <Castle()+0xa0>
    33fc:	85 35       	cpi	r24, 0x55	; 85
    33fe:	09 f4       	brne	.+2      	; 0x3402 <Castle()+0x11a>
    3400:	9d c0       	rjmp	.+314    	; 0x353c <Castle()+0x254>
    3402:	98 f4       	brcc	.+38     	; 0x342a <Castle()+0x142>
    3404:	8b 34       	cpi	r24, 0x4B	; 75
    3406:	09 f4       	brne	.+2      	; 0x340a <Castle()+0x122>
    3408:	93 c0       	rjmp	.+294    	; 0x3530 <Castle()+0x248>
    340a:	80 35       	cpi	r24, 0x50	; 80
    340c:	09 f0       	breq	.+2      	; 0x3410 <Castle()+0x128>
    340e:	8d cf       	rjmp	.-230    	; 0x332a <Castle()+0x42>
    3410:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3414:	7c 01       	movw	r14, r24
    3416:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    341a:	8c 01       	movw	r16, r24
    341c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3420:	9c 01       	movw	r18, r24
    3422:	42 e3       	ldi	r20, 0x32	; 50
    3424:	50 e0       	ldi	r21, 0x00	; 0
    3426:	65 e5       	ldi	r22, 0x55	; 85
    3428:	e6 cf       	rjmp	.-52     	; 0x33f6 <Castle()+0x10e>
    342a:	8f 35       	cpi	r24, 0x5F	; 95
    342c:	09 f4       	brne	.+2      	; 0x3430 <Castle()+0x148>
    342e:	8d c0       	rjmp	.+282    	; 0x354a <Castle()+0x262>
    3430:	84 36       	cpi	r24, 0x64	; 100
    3432:	09 f4       	brne	.+2      	; 0x3436 <Castle()+0x14e>
    3434:	96 c0       	rjmp	.+300    	; 0x3562 <Castle()+0x27a>
    3436:	8a 35       	cpi	r24, 0x5A	; 90
    3438:	09 f0       	breq	.+2      	; 0x343c <Castle()+0x154>
    343a:	77 cf       	rjmp	.-274    	; 0x332a <Castle()+0x42>
    343c:	42 ec       	ldi	r20, 0xC2	; 194
    343e:	51 e0       	ldi	r21, 0x01	; 1
    3440:	6f e5       	ldi	r22, 0x5F	; 95
    3442:	87 ec       	ldi	r24, 0xC7	; 199
    3444:	9f e6       	ldi	r25, 0x6F	; 111
    3446:	23 c0       	rjmp	.+70     	; 0x348e <Castle()+0x1a6>
    3448:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    344c:	7c 01       	movw	r14, r24
    344e:	6d e4       	ldi	r22, 0x4D	; 77
    3450:	71 e0       	ldi	r23, 0x01	; 1
    3452:	ce 01       	movw	r24, r28
    3454:	01 96       	adiw	r24, 0x01	; 1
    3456:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    345a:	01 e0       	ldi	r16, 0x01	; 1
    345c:	97 01       	movw	r18, r14
    345e:	44 e6       	ldi	r20, 0x64	; 100
    3460:	50 e0       	ldi	r21, 0x00	; 0
    3462:	6b e7       	ldi	r22, 0x7B	; 123
    3464:	72 e3       	ldi	r23, 0x32	; 50
    3466:	ce 01       	movw	r24, r28
    3468:	01 96       	adiw	r24, 0x01	; 1
    346a:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    346e:	ce 01       	movw	r24, r28
    3470:	01 96       	adiw	r24, 0x01	; 1
    3472:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    3476:	59 cf       	rjmp	.-334    	; 0x332a <Castle()+0x42>
    3478:	65 e0       	ldi	r22, 0x05	; 5
    347a:	89 ed       	ldi	r24, 0xD9	; 217
    347c:	9c e1       	ldi	r25, 0x1C	; 28
    347e:	0e 94 25 06 	call	0xc4a	; 0xc4a <progBlingBlingColoring(unsigned int, unsigned char)>
    3482:	53 cf       	rjmp	.-346    	; 0x332a <Castle()+0x42>
    3484:	4d e9       	ldi	r20, 0x9D	; 157
    3486:	53 e0       	ldi	r21, 0x03	; 3
    3488:	6a e0       	ldi	r22, 0x0A	; 10
    348a:	89 ed       	ldi	r24, 0xD9	; 217
    348c:	9c e1       	ldi	r25, 0x1C	; 28
    348e:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3492:	4b cf       	rjmp	.-362    	; 0x332a <Castle()+0x42>
    3494:	6f e0       	ldi	r22, 0x0F	; 15
    3496:	82 e6       	ldi	r24, 0x62	; 98
    3498:	93 e7       	ldi	r25, 0x73	; 115
    349a:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    349e:	45 cf       	rjmp	.-374    	; 0x332a <Castle()+0x42>
    34a0:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    34a4:	59 e1       	ldi	r21, 0x19	; 25
    34a6:	e5 2e       	mov	r14, r21
    34a8:	8c 01       	movw	r16, r24
    34aa:	26 e3       	ldi	r18, 0x36	; 54
    34ac:	37 e0       	ldi	r19, 0x07	; 7
    34ae:	45 e4       	ldi	r20, 0x45	; 69
    34b0:	51 e0       	ldi	r21, 0x01	; 1
    34b2:	66 e0       	ldi	r22, 0x06	; 6
    34b4:	70 e0       	ldi	r23, 0x00	; 0
    34b6:	80 e4       	ldi	r24, 0x40	; 64
    34b8:	99 e0       	ldi	r25, 0x09	; 9
    34ba:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    34be:	35 cf       	rjmp	.-406    	; 0x332a <Castle()+0x42>
    34c0:	42 ec       	ldi	r20, 0xC2	; 194
    34c2:	51 e0       	ldi	r21, 0x01	; 1
    34c4:	6e e1       	ldi	r22, 0x1E	; 30
    34c6:	8b e7       	ldi	r24, 0x7B	; 123
    34c8:	92 e3       	ldi	r25, 0x32	; 50
    34ca:	e1 cf       	rjmp	.-62     	; 0x348e <Castle()+0x1a6>
    34cc:	42 ec       	ldi	r20, 0xC2	; 194
    34ce:	51 e0       	ldi	r21, 0x01	; 1
    34d0:	68 e2       	ldi	r22, 0x28	; 40
    34d2:	81 eb       	ldi	r24, 0xB1	; 177
    34d4:	99 e3       	ldi	r25, 0x39	; 57
    34d6:	db cf       	rjmp	.-74     	; 0x348e <Castle()+0x1a6>
    34d8:	6d e2       	ldi	r22, 0x2D	; 45
    34da:	dd cf       	rjmp	.-70     	; 0x3496 <Castle()+0x1ae>
    34dc:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    34e0:	47 e3       	ldi	r20, 0x37	; 55
    34e2:	e4 2e       	mov	r14, r20
    34e4:	e1 cf       	rjmp	.-62     	; 0x34a8 <Castle()+0x1c0>
    34e6:	42 ec       	ldi	r20, 0xC2	; 194
    34e8:	51 e0       	ldi	r21, 0x01	; 1
    34ea:	68 e3       	ldi	r22, 0x38	; 56
    34ec:	8b e7       	ldi	r24, 0x7B	; 123
    34ee:	92 e3       	ldi	r25, 0x32	; 50
    34f0:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    34f4:	1a cf       	rjmp	.-460    	; 0x332a <Castle()+0x42>
    34f6:	42 ec       	ldi	r20, 0xC2	; 194
    34f8:	51 e0       	ldi	r21, 0x01	; 1
    34fa:	6c e3       	ldi	r22, 0x3C	; 60
    34fc:	81 eb       	ldi	r24, 0xB1	; 177
    34fe:	99 e3       	ldi	r25, 0x39	; 57
    3500:	f7 cf       	rjmp	.-18     	; 0x34f0 <Castle()+0x208>
    3502:	41 e4       	ldi	r20, 0x41	; 65
    3504:	6a e3       	ldi	r22, 0x3A	; 58
    3506:	77 e0       	ldi	r23, 0x07	; 7
    3508:	86 e8       	ldi	r24, 0x86	; 134
    350a:	9d e4       	ldi	r25, 0x4D	; 77
    350c:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    3510:	0c cf       	rjmp	.-488    	; 0x332a <Castle()+0x42>
    3512:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3516:	7c 01       	movw	r14, r24
    3518:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    351c:	8c 01       	movw	r16, r24
    351e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3522:	9c 01       	movw	r18, r24
    3524:	42 e3       	ldi	r20, 0x32	; 50
    3526:	50 e0       	ldi	r21, 0x00	; 0
    3528:	6b e4       	ldi	r22, 0x4B	; 75
    352a:	80 e7       	ldi	r24, 0x70	; 112
    352c:	97 e1       	ldi	r25, 0x17	; 23
    352e:	2c cf       	rjmp	.-424    	; 0x3388 <Castle()+0xa0>
    3530:	40 e5       	ldi	r20, 0x50	; 80
    3532:	6a e3       	ldi	r22, 0x3A	; 58
    3534:	77 e0       	ldi	r23, 0x07	; 7
    3536:	81 eb       	ldi	r24, 0xB1	; 177
    3538:	99 e3       	ldi	r25, 0x39	; 57
    353a:	e8 cf       	rjmp	.-48     	; 0x350c <Castle()+0x224>
    353c:	4a e5       	ldi	r20, 0x5A	; 90
    353e:	65 e0       	ldi	r22, 0x05	; 5
    3540:	82 e6       	ldi	r24, 0x62	; 98
    3542:	93 e7       	ldi	r25, 0x73	; 115
    3544:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3548:	f0 ce       	rjmp	.-544    	; 0x332a <Castle()+0x42>
    354a:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    354e:	29 e0       	ldi	r18, 0x09	; 9
    3550:	e2 2e       	mov	r14, r18
    3552:	8c 01       	movw	r16, r24
    3554:	20 e6       	ldi	r18, 0x60	; 96
    3556:	3a ee       	ldi	r19, 0xEA	; 234
    3558:	45 e4       	ldi	r20, 0x45	; 69
    355a:	51 e0       	ldi	r21, 0x01	; 1
    355c:	64 e6       	ldi	r22, 0x64	; 100
    355e:	70 e0       	ldi	r23, 0x00	; 0
    3560:	aa cf       	rjmp	.-172    	; 0x34b6 <Castle()+0x1ce>
    3562:	60 e0       	ldi	r22, 0x00	; 0
    3564:	8f e0       	ldi	r24, 0x0F	; 15
    3566:	90 e1       	ldi	r25, 0x10	; 16
    3568:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    356c:	80 e0       	ldi	r24, 0x00	; 0
    356e:	44 dc       	rcall	.-1912   	; 0x2df8 <switchToSong(unsigned char)>
    3570:	dc ce       	rjmp	.-584    	; 0x332a <Castle()+0x42>

00003572 <TooClose()>:
    3572:	ef 92       	push	r14
    3574:	ff 92       	push	r15
    3576:	0f 93       	push	r16
    3578:	1f 93       	push	r17
    357a:	cf 93       	push	r28
    357c:	df 93       	push	r29
    357e:	00 d0       	rcall	.+0      	; 0x3580 <TooClose()+0xe>
    3580:	00 d0       	rcall	.+0      	; 0x3582 <TooClose()+0x10>
    3582:	00 d0       	rcall	.+0      	; 0x3584 <TooClose()+0x12>
    3584:	1f 92       	push	r1
    3586:	cd b7       	in	r28, 0x3d	; 61
    3588:	de b7       	in	r29, 0x3e	; 62
    358a:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    358e:	8e 31       	cpi	r24, 0x1E	; 30
    3590:	09 f4       	brne	.+2      	; 0x3594 <TooClose()+0x22>
    3592:	9f c0       	rjmp	.+318    	; 0x36d2 <TooClose()+0x160>
    3594:	f0 f5       	brcc	.+124    	; 0x3612 <TooClose()+0xa0>
    3596:	8a 30       	cpi	r24, 0x0A	; 10
    3598:	09 f4       	brne	.+2      	; 0x359c <TooClose()+0x2a>
    359a:	7d c0       	rjmp	.+250    	; 0x3696 <TooClose()+0x124>
    359c:	60 f5       	brcc	.+88     	; 0x35f6 <TooClose()+0x84>
    359e:	82 30       	cpi	r24, 0x02	; 2
    35a0:	09 f4       	brne	.+2      	; 0x35a4 <TooClose()+0x32>
    35a2:	69 c0       	rjmp	.+210    	; 0x3676 <TooClose()+0x104>
    35a4:	85 30       	cpi	r24, 0x05	; 5
    35a6:	09 f4       	brne	.+2      	; 0x35aa <TooClose()+0x38>
    35a8:	6e c0       	rjmp	.+220    	; 0x3686 <TooClose()+0x114>
    35aa:	81 11       	cpse	r24, r1
    35ac:	17 c0       	rjmp	.+46     	; 0x35dc <TooClose()+0x6a>
    35ae:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    35b2:	7c 01       	movw	r14, r24
    35b4:	6e e5       	ldi	r22, 0x5E	; 94
    35b6:	71 e0       	ldi	r23, 0x01	; 1
    35b8:	ce 01       	movw	r24, r28
    35ba:	01 96       	adiw	r24, 0x01	; 1
    35bc:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    35c0:	02 e0       	ldi	r16, 0x02	; 2
    35c2:	97 01       	movw	r18, r14
    35c4:	4b e4       	ldi	r20, 0x4B	; 75
    35c6:	50 e0       	ldi	r21, 0x00	; 0
    35c8:	61 e8       	ldi	r22, 0x81	; 129
    35ca:	7e e2       	ldi	r23, 0x2E	; 46
    35cc:	ce 01       	movw	r24, r28
    35ce:	01 96       	adiw	r24, 0x01	; 1
    35d0:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    35d4:	ce 01       	movw	r24, r28
    35d6:	01 96       	adiw	r24, 0x01	; 1
    35d8:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    35dc:	27 96       	adiw	r28, 0x07	; 7
    35de:	0f b6       	in	r0, 0x3f	; 63
    35e0:	f8 94       	cli
    35e2:	de bf       	out	0x3e, r29	; 62
    35e4:	0f be       	out	0x3f, r0	; 63
    35e6:	cd bf       	out	0x3d, r28	; 61
    35e8:	df 91       	pop	r29
    35ea:	cf 91       	pop	r28
    35ec:	1f 91       	pop	r17
    35ee:	0f 91       	pop	r16
    35f0:	ff 90       	pop	r15
    35f2:	ef 90       	pop	r14
    35f4:	08 95       	ret
    35f6:	84 31       	cpi	r24, 0x14	; 20
    35f8:	09 f4       	brne	.+2      	; 0x35fc <TooClose()+0x8a>
    35fa:	55 c0       	rjmp	.+170    	; 0x36a6 <TooClose()+0x134>
    35fc:	89 31       	cpi	r24, 0x19	; 25
    35fe:	09 f4       	brne	.+2      	; 0x3602 <TooClose()+0x90>
    3600:	58 c0       	rjmp	.+176    	; 0x36b2 <TooClose()+0x140>
    3602:	8f 30       	cpi	r24, 0x0F	; 15
    3604:	59 f7       	brne	.-42     	; 0x35dc <TooClose()+0x6a>
    3606:	46 eb       	ldi	r20, 0xB6	; 182
    3608:	53 e0       	ldi	r21, 0x03	; 3
    360a:	64 e1       	ldi	r22, 0x14	; 20
    360c:	89 e7       	ldi	r24, 0x79	; 121
    360e:	9b e3       	ldi	r25, 0x3B	; 59
    3610:	37 c0       	rjmp	.+110    	; 0x3680 <TooClose()+0x10e>
    3612:	82 33       	cpi	r24, 0x32	; 50
    3614:	09 f4       	brne	.+2      	; 0x3618 <TooClose()+0xa6>
    3616:	72 c0       	rjmp	.+228    	; 0x36fc <TooClose()+0x18a>
    3618:	b8 f4       	brcc	.+46     	; 0x3648 <TooClose()+0xd6>
    361a:	88 32       	cpi	r24, 0x28	; 40
    361c:	09 f4       	brne	.+2      	; 0x3620 <TooClose()+0xae>
    361e:	61 c0       	rjmp	.+194    	; 0x36e2 <TooClose()+0x170>
    3620:	8d 32       	cpi	r24, 0x2D	; 45
    3622:	09 f4       	brne	.+2      	; 0x3626 <TooClose()+0xb4>
    3624:	64 c0       	rjmp	.+200    	; 0x36ee <TooClose()+0x17c>
    3626:	83 32       	cpi	r24, 0x23	; 35
    3628:	c9 f6       	brne	.-78     	; 0x35dc <TooClose()+0x6a>
    362a:	ee 24       	eor	r14, r14
    362c:	ea 94       	dec	r14
    362e:	f1 2c       	mov	r15, r1
    3630:	0f ef       	ldi	r16, 0xFF	; 255
    3632:	10 e0       	ldi	r17, 0x00	; 0
    3634:	2f ef       	ldi	r18, 0xFF	; 255
    3636:	30 e0       	ldi	r19, 0x00	; 0
    3638:	4b e4       	ldi	r20, 0x4B	; 75
    363a:	50 e0       	ldi	r21, 0x00	; 0
    363c:	68 e2       	ldi	r22, 0x28	; 40
    363e:	89 e7       	ldi	r24, 0x79	; 121
    3640:	9b e3       	ldi	r25, 0x3B	; 59
    3642:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3646:	ca cf       	rjmp	.-108    	; 0x35dc <TooClose()+0x6a>
    3648:	8c 33       	cpi	r24, 0x3C	; 60
    364a:	09 f4       	brne	.+2      	; 0x364e <TooClose()+0xdc>
    364c:	5d c0       	rjmp	.+186    	; 0x3708 <TooClose()+0x196>
    364e:	84 36       	cpi	r24, 0x64	; 100
    3650:	09 f4       	brne	.+2      	; 0x3654 <TooClose()+0xe2>
    3652:	60 c0       	rjmp	.+192    	; 0x3714 <TooClose()+0x1a2>
    3654:	87 33       	cpi	r24, 0x37	; 55
    3656:	11 f6       	brne	.-124    	; 0x35dc <TooClose()+0x6a>
    3658:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    365c:	7c 01       	movw	r14, r24
    365e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3662:	8c 01       	movw	r16, r24
    3664:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3668:	9c 01       	movw	r18, r24
    366a:	4b e4       	ldi	r20, 0x4B	; 75
    366c:	50 e0       	ldi	r21, 0x00	; 0
    366e:	6c e3       	ldi	r22, 0x3C	; 60
    3670:	80 eb       	ldi	r24, 0xB0	; 176
    3672:	9d e1       	ldi	r25, 0x1D	; 29
    3674:	e6 cf       	rjmp	.-52     	; 0x3642 <TooClose()+0xd0>
    3676:	46 eb       	ldi	r20, 0xB6	; 182
    3678:	53 e0       	ldi	r21, 0x03	; 3
    367a:	65 e0       	ldi	r22, 0x05	; 5
    367c:	82 e7       	ldi	r24, 0x72	; 114
    367e:	94 e6       	ldi	r25, 0x64	; 100
    3680:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3684:	ab cf       	rjmp	.-170    	; 0x35dc <TooClose()+0x6a>
    3686:	4b ed       	ldi	r20, 0xDB	; 219
    3688:	51 e0       	ldi	r21, 0x01	; 1
    368a:	6a e0       	ldi	r22, 0x0A	; 10
    368c:	84 e8       	ldi	r24, 0x84	; 132
    368e:	92 eb       	ldi	r25, 0xB2	; 178
    3690:	0e 94 51 0a 	call	0x14a2	; 0x14a2 <progRandomLines(unsigned int, unsigned char, unsigned int)>
    3694:	a3 cf       	rjmp	.-186    	; 0x35dc <TooClose()+0x6a>
    3696:	46 eb       	ldi	r20, 0xB6	; 182
    3698:	53 e0       	ldi	r21, 0x03	; 3
    369a:	6f e0       	ldi	r22, 0x0F	; 15
    369c:	8b e0       	ldi	r24, 0x0B	; 11
    369e:	97 e7       	ldi	r25, 0x77	; 119
    36a0:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    36a4:	9b cf       	rjmp	.-202    	; 0x35dc <TooClose()+0x6a>
    36a6:	4b ed       	ldi	r20, 0xDB	; 219
    36a8:	51 e0       	ldi	r21, 0x01	; 1
    36aa:	69 e1       	ldi	r22, 0x19	; 25
    36ac:	8b e0       	ldi	r24, 0x0B	; 11
    36ae:	97 e7       	ldi	r25, 0x77	; 119
    36b0:	ef cf       	rjmp	.-34     	; 0x3690 <TooClose()+0x11e>
    36b2:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    36b6:	2e e1       	ldi	r18, 0x1E	; 30
    36b8:	e2 2e       	mov	r14, r18
    36ba:	8c 01       	movw	r16, r24
    36bc:	2b e2       	ldi	r18, 0x2B	; 43
    36be:	36 e1       	ldi	r19, 0x16	; 22
    36c0:	4b ed       	ldi	r20, 0xDB	; 219
    36c2:	51 e0       	ldi	r21, 0x01	; 1
    36c4:	6a e0       	ldi	r22, 0x0A	; 10
    36c6:	70 e0       	ldi	r23, 0x00	; 0
    36c8:	8a e6       	ldi	r24, 0x6A	; 106
    36ca:	99 e0       	ldi	r25, 0x09	; 9
    36cc:	0e 94 b7 0f 	call	0x1f6e	; 0x1f6e <progWordArray(String*, int, int, unsigned int, int, unsigned char)>
    36d0:	85 cf       	rjmp	.-246    	; 0x35dc <TooClose()+0x6a>
    36d2:	43 e2       	ldi	r20, 0x23	; 35
    36d4:	6c e6       	ldi	r22, 0x6C	; 108
    36d6:	77 e0       	ldi	r23, 0x07	; 7
    36d8:	87 ec       	ldi	r24, 0xC7	; 199
    36da:	90 e6       	ldi	r25, 0x60	; 96
    36dc:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    36e0:	7d cf       	rjmp	.-262    	; 0x35dc <TooClose()+0x6a>
    36e2:	48 eb       	ldi	r20, 0xB8	; 184
    36e4:	53 e0       	ldi	r21, 0x03	; 3
    36e6:	6d e2       	ldi	r22, 0x2D	; 45
    36e8:	89 e7       	ldi	r24, 0x79	; 121
    36ea:	9b e3       	ldi	r25, 0x3B	; 59
    36ec:	d9 cf       	rjmp	.-78     	; 0x36a0 <TooClose()+0x12e>
    36ee:	42 e3       	ldi	r20, 0x32	; 50
    36f0:	65 e0       	ldi	r22, 0x05	; 5
    36f2:	80 eb       	ldi	r24, 0xB0	; 176
    36f4:	9d e1       	ldi	r25, 0x1D	; 29
    36f6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    36fa:	70 cf       	rjmp	.-288    	; 0x35dc <TooClose()+0x6a>
    36fc:	46 eb       	ldi	r20, 0xB6	; 182
    36fe:	53 e0       	ldi	r21, 0x03	; 3
    3700:	67 e3       	ldi	r22, 0x37	; 55
    3702:	80 eb       	ldi	r24, 0xB0	; 176
    3704:	9d e1       	ldi	r25, 0x1D	; 29
    3706:	cc cf       	rjmp	.-104    	; 0x36a0 <TooClose()+0x12e>
    3708:	64 e6       	ldi	r22, 0x64	; 100
    370a:	8f ef       	ldi	r24, 0xFF	; 255
    370c:	9f ef       	ldi	r25, 0xFF	; 255
    370e:	0e 94 25 06 	call	0xc4a	; 0xc4a <progBlingBlingColoring(unsigned int, unsigned char)>
    3712:	64 cf       	rjmp	.-312    	; 0x35dc <TooClose()+0x6a>
    3714:	60 e0       	ldi	r22, 0x00	; 0
    3716:	8f e0       	ldi	r24, 0x0F	; 15
    3718:	90 e1       	ldi	r25, 0x10	; 16
    371a:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    371e:	80 e0       	ldi	r24, 0x00	; 0
    3720:	6b db       	rcall	.-2346   	; 0x2df8 <switchToSong(unsigned char)>
    3722:	5c cf       	rjmp	.-328    	; 0x35dc <TooClose()+0x6a>

00003724 <Pokerface()>:
    3724:	ef 92       	push	r14
    3726:	ff 92       	push	r15
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
    3730:	00 d0       	rcall	.+0      	; 0x3732 <Pokerface()+0xe>
    3732:	00 d0       	rcall	.+0      	; 0x3734 <Pokerface()+0x10>
    3734:	00 d0       	rcall	.+0      	; 0x3736 <Pokerface()+0x12>
    3736:	1f 92       	push	r1
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    3740:	8e 31       	cpi	r24, 0x1E	; 30
    3742:	09 f4       	brne	.+2      	; 0x3746 <Pokerface()+0x22>
    3744:	af c0       	rjmp	.+350    	; 0x38a4 <Pokerface()+0x180>
    3746:	a0 f5       	brcc	.+104    	; 0x37b0 <Pokerface()+0x8c>
    3748:	85 30       	cpi	r24, 0x05	; 5
    374a:	09 f4       	brne	.+2      	; 0x374e <Pokerface()+0x2a>
    374c:	92 c0       	rjmp	.+292    	; 0x3872 <Pokerface()+0x14e>
    374e:	b8 f4       	brcc	.+46     	; 0x377e <Pokerface()+0x5a>
    3750:	81 30       	cpi	r24, 0x01	; 1
    3752:	09 f4       	brne	.+2      	; 0x3756 <Pokerface()+0x32>
    3754:	87 c0       	rjmp	.+270    	; 0x3864 <Pokerface()+0x140>
    3756:	08 f4       	brcc	.+2      	; 0x375a <Pokerface()+0x36>
    3758:	6d c0       	rjmp	.+218    	; 0x3834 <Pokerface()+0x110>
    375a:	45 e0       	ldi	r20, 0x05	; 5
    375c:	64 e0       	ldi	r22, 0x04	; 4
    375e:	82 30       	cpi	r24, 0x02	; 2
    3760:	09 f4       	brne	.+2      	; 0x3764 <Pokerface()+0x40>
    3762:	82 c0       	rjmp	.+260    	; 0x3868 <Pokerface()+0x144>
    3764:	27 96       	adiw	r28, 0x07	; 7
    3766:	0f b6       	in	r0, 0x3f	; 63
    3768:	f8 94       	cli
    376a:	de bf       	out	0x3e, r29	; 62
    376c:	0f be       	out	0x3f, r0	; 63
    376e:	cd bf       	out	0x3d, r28	; 61
    3770:	df 91       	pop	r29
    3772:	cf 91       	pop	r28
    3774:	1f 91       	pop	r17
    3776:	0f 91       	pop	r16
    3778:	ff 90       	pop	r15
    377a:	ef 90       	pop	r14
    377c:	08 95       	ret
    377e:	8f 30       	cpi	r24, 0x0F	; 15
    3780:	09 f4       	brne	.+2      	; 0x3784 <Pokerface()+0x60>
    3782:	7b c0       	rjmp	.+246    	; 0x387a <Pokerface()+0x156>
    3784:	40 f4       	brcc	.+16     	; 0x3796 <Pokerface()+0x72>
    3786:	8a 30       	cpi	r24, 0x0A	; 10
    3788:	69 f7       	brne	.-38     	; 0x3764 <Pokerface()+0x40>
    378a:	6f e0       	ldi	r22, 0x0F	; 15
    378c:	86 e0       	ldi	r24, 0x06	; 6
    378e:	9f e3       	ldi	r25, 0x3F	; 63
    3790:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3794:	e7 cf       	rjmp	.-50     	; 0x3764 <Pokerface()+0x40>
    3796:	84 31       	cpi	r24, 0x14	; 20
    3798:	09 f4       	brne	.+2      	; 0x379c <Pokerface()+0x78>
    379a:	73 c0       	rjmp	.+230    	; 0x3882 <Pokerface()+0x15e>
    379c:	44 ef       	ldi	r20, 0xF4	; 244
    379e:	51 e0       	ldi	r21, 0x01	; 1
    37a0:	6e e1       	ldi	r22, 0x1E	; 30
    37a2:	89 31       	cpi	r24, 0x19	; 25
    37a4:	f9 f6       	brne	.-66     	; 0x3764 <Pokerface()+0x40>
    37a6:	86 e0       	ldi	r24, 0x06	; 6
    37a8:	9f e3       	ldi	r25, 0x3F	; 63
    37aa:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    37ae:	da cf       	rjmp	.-76     	; 0x3764 <Pokerface()+0x40>
    37b0:	87 33       	cpi	r24, 0x37	; 55
    37b2:	09 f4       	brne	.+2      	; 0x37b6 <Pokerface()+0x92>
    37b4:	8f c0       	rjmp	.+286    	; 0x38d4 <Pokerface()+0x1b0>
    37b6:	d0 f4       	brcc	.+52     	; 0x37ec <Pokerface()+0xc8>
    37b8:	88 32       	cpi	r24, 0x28	; 40
    37ba:	09 f4       	brne	.+2      	; 0x37be <Pokerface()+0x9a>
    37bc:	78 c0       	rjmp	.+240    	; 0x38ae <Pokerface()+0x18a>
    37be:	50 f4       	brcc	.+20     	; 0x37d4 <Pokerface()+0xb0>
    37c0:	44 ef       	ldi	r20, 0xF4	; 244
    37c2:	51 e0       	ldi	r21, 0x01	; 1
    37c4:	68 e2       	ldi	r22, 0x28	; 40
    37c6:	83 32       	cpi	r24, 0x23	; 35
    37c8:	69 f6       	brne	.-102    	; 0x3764 <Pokerface()+0x40>
    37ca:	86 e0       	ldi	r24, 0x06	; 6
    37cc:	9f e3       	ldi	r25, 0x3F	; 63
    37ce:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    37d2:	c8 cf       	rjmp	.-112    	; 0x3764 <Pokerface()+0x40>
    37d4:	8d 32       	cpi	r24, 0x2D	; 45
    37d6:	09 f4       	brne	.+2      	; 0x37da <Pokerface()+0xb6>
    37d8:	77 c0       	rjmp	.+238    	; 0x38c8 <Pokerface()+0x1a4>
    37da:	82 33       	cpi	r24, 0x32	; 50
    37dc:	19 f6       	brne	.-122    	; 0x3764 <Pokerface()+0x40>
    37de:	47 e3       	ldi	r20, 0x37	; 55
    37e0:	67 e0       	ldi	r22, 0x07	; 7
    37e2:	8d ef       	ldi	r24, 0xFD	; 253
    37e4:	9e e3       	ldi	r25, 0x3E	; 62
    37e6:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    37ea:	bc cf       	rjmp	.-136    	; 0x3764 <Pokerface()+0x40>
    37ec:	81 34       	cpi	r24, 0x41	; 65
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <Pokerface()+0xce>
    37f0:	75 c0       	rjmp	.+234    	; 0x38dc <Pokerface()+0x1b8>
    37f2:	90 f4       	brcc	.+36     	; 0x3818 <Pokerface()+0xf4>
    37f4:	8c 33       	cpi	r24, 0x3C	; 60
    37f6:	09 f0       	breq	.+2      	; 0x37fa <Pokerface()+0xd6>
    37f8:	b5 cf       	rjmp	.-150    	; 0x3764 <Pokerface()+0x40>
    37fa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    37fe:	7c 01       	movw	r14, r24
    3800:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3804:	8c 01       	movw	r16, r24
    3806:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    380a:	9c 01       	movw	r18, r24
    380c:	4b e4       	ldi	r20, 0x4B	; 75
    380e:	50 e0       	ldi	r21, 0x00	; 0
    3810:	61 e4       	ldi	r22, 0x41	; 65
    3812:	84 e4       	ldi	r24, 0x44	; 68
    3814:	9f e2       	ldi	r25, 0x2F	; 47
    3816:	43 c0       	rjmp	.+134    	; 0x389e <Pokerface()+0x17a>
    3818:	86 34       	cpi	r24, 0x46	; 70
    381a:	09 f4       	brne	.+2      	; 0x381e <Pokerface()+0xfa>
    381c:	64 c0       	rjmp	.+200    	; 0x38e6 <Pokerface()+0x1c2>
    381e:	84 36       	cpi	r24, 0x64	; 100
    3820:	09 f0       	breq	.+2      	; 0x3824 <Pokerface()+0x100>
    3822:	a0 cf       	rjmp	.-192    	; 0x3764 <Pokerface()+0x40>
    3824:	60 e0       	ldi	r22, 0x00	; 0
    3826:	8f e0       	ldi	r24, 0x0F	; 15
    3828:	90 e1       	ldi	r25, 0x10	; 16
    382a:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	e3 da       	rcall	.-2618   	; 0x2df8 <switchToSong(unsigned char)>
    3832:	98 cf       	rjmp	.-208    	; 0x3764 <Pokerface()+0x40>
    3834:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3838:	7c 01       	movw	r14, r24
    383a:	66 e7       	ldi	r22, 0x76	; 118
    383c:	71 e0       	ldi	r23, 0x01	; 1
    383e:	ce 01       	movw	r24, r28
    3840:	01 96       	adiw	r24, 0x01	; 1
    3842:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    3846:	01 e0       	ldi	r16, 0x01	; 1
    3848:	97 01       	movw	r18, r14
    384a:	4b e4       	ldi	r20, 0x4B	; 75
    384c:	50 e0       	ldi	r21, 0x00	; 0
    384e:	6e e0       	ldi	r22, 0x0E	; 14
    3850:	7d e3       	ldi	r23, 0x3D	; 61
    3852:	ce 01       	movw	r24, r28
    3854:	01 96       	adiw	r24, 0x01	; 1
    3856:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    385a:	ce 01       	movw	r24, r28
    385c:	01 96       	adiw	r24, 0x01	; 1
    385e:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    3862:	80 cf       	rjmp	.-256    	; 0x3764 <Pokerface()+0x40>
    3864:	42 e0       	ldi	r20, 0x02	; 2
    3866:	63 e0       	ldi	r22, 0x03	; 3
    3868:	83 e8       	ldi	r24, 0x83	; 131
    386a:	9f e1       	ldi	r25, 0x1F	; 31
    386c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3870:	79 cf       	rjmp	.-270    	; 0x3764 <Pokerface()+0x40>
    3872:	44 ef       	ldi	r20, 0xF4	; 244
    3874:	51 e0       	ldi	r21, 0x01	; 1
    3876:	6a e0       	ldi	r22, 0x0A	; 10
    3878:	96 cf       	rjmp	.-212    	; 0x37a6 <Pokerface()+0x82>
    387a:	44 ef       	ldi	r20, 0xF4	; 244
    387c:	51 e0       	ldi	r21, 0x01	; 1
    387e:	64 e1       	ldi	r22, 0x14	; 20
    3880:	a4 cf       	rjmp	.-184    	; 0x37ca <Pokerface()+0xa6>
    3882:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3886:	7c 01       	movw	r14, r24
    3888:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    388c:	8c 01       	movw	r16, r24
    388e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3892:	9c 01       	movw	r18, r24
    3894:	4b e4       	ldi	r20, 0x4B	; 75
    3896:	50 e0       	ldi	r21, 0x00	; 0
    3898:	69 e1       	ldi	r22, 0x19	; 25
    389a:	86 e0       	ldi	r24, 0x06	; 6
    389c:	9f e3       	ldi	r25, 0x3F	; 63
    389e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    38a2:	60 cf       	rjmp	.-320    	; 0x3764 <Pokerface()+0x40>
    38a4:	43 e2       	ldi	r20, 0x23	; 35
    38a6:	64 e0       	ldi	r22, 0x04	; 4
    38a8:	86 e0       	ldi	r24, 0x06	; 6
    38aa:	9f e3       	ldi	r25, 0x3F	; 63
    38ac:	df cf       	rjmp	.-66     	; 0x386c <Pokerface()+0x148>
    38ae:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    38b2:	7c 01       	movw	r14, r24
    38b4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    38b8:	8c 01       	movw	r16, r24
    38ba:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    38be:	9c 01       	movw	r18, r24
    38c0:	4b e4       	ldi	r20, 0x4B	; 75
    38c2:	50 e0       	ldi	r21, 0x00	; 0
    38c4:	6d e2       	ldi	r22, 0x2D	; 45
    38c6:	e9 cf       	rjmp	.-46     	; 0x389a <Pokerface()+0x176>
    38c8:	62 e3       	ldi	r22, 0x32	; 50
    38ca:	82 e7       	ldi	r24, 0x72	; 114
    38cc:	9f e1       	ldi	r25, 0x1F	; 31
    38ce:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    38d2:	48 cf       	rjmp	.-368    	; 0x3764 <Pokerface()+0x40>
    38d4:	44 ef       	ldi	r20, 0xF4	; 244
    38d6:	51 e0       	ldi	r21, 0x01	; 1
    38d8:	6c e3       	ldi	r22, 0x3C	; 60
    38da:	77 cf       	rjmp	.-274    	; 0x37ca <Pokerface()+0xa6>
    38dc:	46 e4       	ldi	r20, 0x46	; 70
    38de:	6c e0       	ldi	r22, 0x0C	; 12
    38e0:	89 eb       	ldi	r24, 0xB9	; 185
    38e2:	9f e0       	ldi	r25, 0x0F	; 15
    38e4:	80 cf       	rjmp	.-256    	; 0x37e6 <Pokerface()+0xc2>
    38e6:	64 e6       	ldi	r22, 0x64	; 100
    38e8:	80 e1       	ldi	r24, 0x10	; 16
    38ea:	97 e2       	ldi	r25, 0x27	; 39
    38ec:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    38f0:	39 cf       	rjmp	.-398    	; 0x3764 <Pokerface()+0x40>

000038f2 <UseSomebody()>:
    38f2:	ef 92       	push	r14
    38f4:	ff 92       	push	r15
    38f6:	0f 93       	push	r16
    38f8:	1f 93       	push	r17
    38fa:	cf 93       	push	r28
    38fc:	df 93       	push	r29
    38fe:	00 d0       	rcall	.+0      	; 0x3900 <UseSomebody()+0xe>
    3900:	00 d0       	rcall	.+0      	; 0x3902 <UseSomebody()+0x10>
    3902:	00 d0       	rcall	.+0      	; 0x3904 <UseSomebody()+0x12>
    3904:	1f 92       	push	r1
    3906:	cd b7       	in	r28, 0x3d	; 61
    3908:	de b7       	in	r29, 0x3e	; 62
    390a:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    390e:	84 31       	cpi	r24, 0x14	; 20
    3910:	09 f4       	brne	.+2      	; 0x3914 <UseSomebody()+0x22>
    3912:	75 c0       	rjmp	.+234    	; 0x39fe <UseSomebody()+0x10c>
    3914:	48 f5       	brcc	.+82     	; 0x3968 <UseSomebody()+0x76>
    3916:	82 30       	cpi	r24, 0x02	; 2
    3918:	09 f4       	brne	.+2      	; 0x391c <UseSomebody()+0x2a>
    391a:	5c c0       	rjmp	.+184    	; 0x39d4 <UseSomebody()+0xe2>
    391c:	a8 f4       	brcc	.+42     	; 0x3948 <UseSomebody()+0x56>
    391e:	88 23       	and	r24, r24
    3920:	09 f4       	brne	.+2      	; 0x3924 <UseSomebody()+0x32>
    3922:	40 c0       	rjmp	.+128    	; 0x39a4 <UseSomebody()+0xb2>
    3924:	42 e0       	ldi	r20, 0x02	; 2
    3926:	63 e0       	ldi	r22, 0x03	; 3
    3928:	81 30       	cpi	r24, 0x01	; 1
    392a:	09 f4       	brne	.+2      	; 0x392e <UseSomebody()+0x3c>
    392c:	7b c0       	rjmp	.+246    	; 0x3a24 <UseSomebody()+0x132>
    392e:	27 96       	adiw	r28, 0x07	; 7
    3930:	0f b6       	in	r0, 0x3f	; 63
    3932:	f8 94       	cli
    3934:	de bf       	out	0x3e, r29	; 62
    3936:	0f be       	out	0x3f, r0	; 63
    3938:	cd bf       	out	0x3d, r28	; 61
    393a:	df 91       	pop	r29
    393c:	cf 91       	pop	r28
    393e:	1f 91       	pop	r17
    3940:	0f 91       	pop	r16
    3942:	ff 90       	pop	r15
    3944:	ef 90       	pop	r14
    3946:	08 95       	ret
    3948:	8a 30       	cpi	r24, 0x0A	; 10
    394a:	09 f4       	brne	.+2      	; 0x394e <UseSomebody()+0x5c>
    394c:	4a c0       	rjmp	.+148    	; 0x39e2 <UseSomebody()+0xf0>
    394e:	8f 30       	cpi	r24, 0x0F	; 15
    3950:	09 f4       	brne	.+2      	; 0x3954 <UseSomebody()+0x62>
    3952:	4d c0       	rjmp	.+154    	; 0x39ee <UseSomebody()+0xfc>
    3954:	85 30       	cpi	r24, 0x05	; 5
    3956:	59 f7       	brne	.-42     	; 0x392e <UseSomebody()+0x3c>
    3958:	49 ea       	ldi	r20, 0xA9	; 169
    395a:	51 e0       	ldi	r21, 0x01	; 1
    395c:	6a e0       	ldi	r22, 0x0A	; 10
    395e:	82 eb       	ldi	r24, 0xB2	; 178
    3960:	9c e6       	ldi	r25, 0x6C	; 108
    3962:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3966:	e3 cf       	rjmp	.-58     	; 0x392e <UseSomebody()+0x3c>
    3968:	88 32       	cpi	r24, 0x28	; 40
    396a:	09 f4       	brne	.+2      	; 0x396e <UseSomebody()+0x7c>
    396c:	62 c0       	rjmp	.+196    	; 0x3a32 <UseSomebody()+0x140>
    396e:	60 f4       	brcc	.+24     	; 0x3988 <UseSomebody()+0x96>
    3970:	8e 31       	cpi	r24, 0x1E	; 30
    3972:	09 f4       	brne	.+2      	; 0x3976 <UseSomebody()+0x84>
    3974:	55 c0       	rjmp	.+170    	; 0x3a20 <UseSomebody()+0x12e>
    3976:	83 32       	cpi	r24, 0x23	; 35
    3978:	09 f4       	brne	.+2      	; 0x397c <UseSomebody()+0x8a>
    397a:	57 c0       	rjmp	.+174    	; 0x3a2a <UseSomebody()+0x138>
    397c:	89 31       	cpi	r24, 0x19	; 25
    397e:	b9 f6       	brne	.-82     	; 0x392e <UseSomebody()+0x3c>
    3980:	49 ea       	ldi	r20, 0xA9	; 169
    3982:	51 e0       	ldi	r21, 0x01	; 1
    3984:	6e e1       	ldi	r22, 0x1E	; 30
    3986:	eb cf       	rjmp	.-42     	; 0x395e <UseSomebody()+0x6c>
    3988:	86 34       	cpi	r24, 0x46	; 70
    398a:	09 f4       	brne	.+2      	; 0x398e <UseSomebody()+0x9c>
    398c:	61 c0       	rjmp	.+194    	; 0x3a50 <UseSomebody()+0x15e>
    398e:	84 36       	cpi	r24, 0x64	; 100
    3990:	09 f4       	brne	.+2      	; 0x3994 <UseSomebody()+0xa2>
    3992:	64 c0       	rjmp	.+200    	; 0x3a5c <UseSomebody()+0x16a>
    3994:	8d 32       	cpi	r24, 0x2D	; 45
    3996:	59 f6       	brne	.-106    	; 0x392e <UseSomebody()+0x3c>
    3998:	62 e3       	ldi	r22, 0x32	; 50
    399a:	89 e5       	ldi	r24, 0x59	; 89
    399c:	96 e3       	ldi	r25, 0x36	; 54
    399e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    39a2:	c5 cf       	rjmp	.-118    	; 0x392e <UseSomebody()+0x3c>
    39a4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    39a8:	7c 01       	movw	r14, r24
    39aa:	6d e8       	ldi	r22, 0x8D	; 141
    39ac:	71 e0       	ldi	r23, 0x01	; 1
    39ae:	ce 01       	movw	r24, r28
    39b0:	01 96       	adiw	r24, 0x01	; 1
    39b2:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    39b6:	01 e0       	ldi	r16, 0x01	; 1
    39b8:	97 01       	movw	r18, r14
    39ba:	4b e4       	ldi	r20, 0x4B	; 75
    39bc:	50 e0       	ldi	r21, 0x00	; 0
    39be:	63 ed       	ldi	r22, 0xD3	; 211
    39c0:	7f e4       	ldi	r23, 0x4F	; 79
    39c2:	ce 01       	movw	r24, r28
    39c4:	01 96       	adiw	r24, 0x01	; 1
    39c6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    39ca:	ce 01       	movw	r24, r28
    39cc:	01 96       	adiw	r24, 0x01	; 1
    39ce:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    39d2:	ad cf       	rjmp	.-166    	; 0x392e <UseSomebody()+0x3c>
    39d4:	45 e0       	ldi	r20, 0x05	; 5
    39d6:	64 e0       	ldi	r22, 0x04	; 4
    39d8:	82 eb       	ldi	r24, 0xB2	; 178
    39da:	9c e6       	ldi	r25, 0x6C	; 108
    39dc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    39e0:	a6 cf       	rjmp	.-180    	; 0x392e <UseSomebody()+0x3c>
    39e2:	6f e0       	ldi	r22, 0x0F	; 15
    39e4:	82 eb       	ldi	r24, 0xB2	; 178
    39e6:	9c e6       	ldi	r25, 0x6C	; 108
    39e8:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    39ec:	a0 cf       	rjmp	.-192    	; 0x392e <UseSomebody()+0x3c>
    39ee:	49 ea       	ldi	r20, 0xA9	; 169
    39f0:	51 e0       	ldi	r21, 0x01	; 1
    39f2:	64 e1       	ldi	r22, 0x14	; 20
    39f4:	89 e5       	ldi	r24, 0x59	; 89
    39f6:	96 e3       	ldi	r25, 0x36	; 54
    39f8:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    39fc:	98 cf       	rjmp	.-208    	; 0x392e <UseSomebody()+0x3c>
    39fe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a02:	7c 01       	movw	r14, r24
    3a04:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a08:	8c 01       	movw	r16, r24
    3a0a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a0e:	9c 01       	movw	r18, r24
    3a10:	4b e4       	ldi	r20, 0x4B	; 75
    3a12:	50 e0       	ldi	r21, 0x00	; 0
    3a14:	69 e1       	ldi	r22, 0x19	; 25
    3a16:	89 e5       	ldi	r24, 0x59	; 89
    3a18:	96 e3       	ldi	r25, 0x36	; 54
    3a1a:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3a1e:	87 cf       	rjmp	.-242    	; 0x392e <UseSomebody()+0x3c>
    3a20:	43 e2       	ldi	r20, 0x23	; 35
    3a22:	64 e0       	ldi	r22, 0x04	; 4
    3a24:	89 e5       	ldi	r24, 0x59	; 89
    3a26:	96 e3       	ldi	r25, 0x36	; 54
    3a28:	d9 cf       	rjmp	.-78     	; 0x39dc <UseSomebody()+0xea>
    3a2a:	49 ea       	ldi	r20, 0xA9	; 169
    3a2c:	51 e0       	ldi	r21, 0x01	; 1
    3a2e:	68 e2       	ldi	r22, 0x28	; 40
    3a30:	e1 cf       	rjmp	.-62     	; 0x39f4 <UseSomebody()+0x102>
    3a32:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a36:	7c 01       	movw	r14, r24
    3a38:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a3c:	8c 01       	movw	r16, r24
    3a3e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3a42:	9c 01       	movw	r18, r24
    3a44:	4b e4       	ldi	r20, 0x4B	; 75
    3a46:	50 e0       	ldi	r21, 0x00	; 0
    3a48:	6d e2       	ldi	r22, 0x2D	; 45
    3a4a:	8f ee       	ldi	r24, 0xEF	; 239
    3a4c:	93 e4       	ldi	r25, 0x43	; 67
    3a4e:	e5 cf       	rjmp	.-54     	; 0x3a1a <UseSomebody()+0x128>
    3a50:	64 e6       	ldi	r22, 0x64	; 100
    3a52:	80 e1       	ldi	r24, 0x10	; 16
    3a54:	97 e2       	ldi	r25, 0x27	; 39
    3a56:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    3a5a:	69 cf       	rjmp	.-302    	; 0x392e <UseSomebody()+0x3c>
    3a5c:	60 e0       	ldi	r22, 0x00	; 0
    3a5e:	8f e0       	ldi	r24, 0x0F	; 15
    3a60:	90 e1       	ldi	r25, 0x10	; 16
    3a62:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    3a66:	80 e0       	ldi	r24, 0x00	; 0
    3a68:	c7 d9       	rcall	.-3186   	; 0x2df8 <switchToSong(unsigned char)>
    3a6a:	61 cf       	rjmp	.-318    	; 0x392e <UseSomebody()+0x3c>

00003a6c <NoRoots()>:
    3a6c:	ef 92       	push	r14
    3a6e:	ff 92       	push	r15
    3a70:	0f 93       	push	r16
    3a72:	1f 93       	push	r17
    3a74:	cf 93       	push	r28
    3a76:	df 93       	push	r29
    3a78:	00 d0       	rcall	.+0      	; 0x3a7a <NoRoots()+0xe>
    3a7a:	00 d0       	rcall	.+0      	; 0x3a7c <NoRoots()+0x10>
    3a7c:	00 d0       	rcall	.+0      	; 0x3a7e <NoRoots()+0x12>
    3a7e:	1f 92       	push	r1
    3a80:	cd b7       	in	r28, 0x3d	; 61
    3a82:	de b7       	in	r29, 0x3e	; 62
    3a84:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    3a88:	89 31       	cpi	r24, 0x19	; 25
    3a8a:	09 f4       	brne	.+2      	; 0x3a8e <NoRoots()+0x22>
    3a8c:	de c0       	rjmp	.+444    	; 0x3c4a <NoRoots()+0x1de>
    3a8e:	08 f0       	brcs	.+2      	; 0x3a92 <NoRoots()+0x26>
    3a90:	49 c0       	rjmp	.+146    	; 0x3b24 <NoRoots()+0xb8>
    3a92:	8c 30       	cpi	r24, 0x0C	; 12
    3a94:	09 f4       	brne	.+2      	; 0x3a98 <NoRoots()+0x2c>
    3a96:	ad c0       	rjmp	.+346    	; 0x3bf2 <NoRoots()+0x186>
    3a98:	40 f5       	brcc	.+80     	; 0x3aea <NoRoots()+0x7e>
    3a9a:	82 30       	cpi	r24, 0x02	; 2
    3a9c:	09 f4       	brne	.+2      	; 0x3aa0 <NoRoots()+0x34>
    3a9e:	9a c0       	rjmp	.+308    	; 0x3bd4 <NoRoots()+0x168>
    3aa0:	a8 f4       	brcc	.+42     	; 0x3acc <NoRoots()+0x60>
    3aa2:	88 23       	and	r24, r24
    3aa4:	09 f4       	brne	.+2      	; 0x3aa8 <NoRoots()+0x3c>
    3aa6:	7e c0       	rjmp	.+252    	; 0x3ba4 <NoRoots()+0x138>
    3aa8:	42 e0       	ldi	r20, 0x02	; 2
    3aaa:	67 e0       	ldi	r22, 0x07	; 7
    3aac:	81 30       	cpi	r24, 0x01	; 1
    3aae:	09 f4       	brne	.+2      	; 0x3ab2 <NoRoots()+0x46>
    3ab0:	d2 c0       	rjmp	.+420    	; 0x3c56 <NoRoots()+0x1ea>
    3ab2:	27 96       	adiw	r28, 0x07	; 7
    3ab4:	0f b6       	in	r0, 0x3f	; 63
    3ab6:	f8 94       	cli
    3ab8:	de bf       	out	0x3e, r29	; 62
    3aba:	0f be       	out	0x3f, r0	; 63
    3abc:	cd bf       	out	0x3d, r28	; 61
    3abe:	df 91       	pop	r29
    3ac0:	cf 91       	pop	r28
    3ac2:	1f 91       	pop	r17
    3ac4:	0f 91       	pop	r16
    3ac6:	ff 90       	pop	r15
    3ac8:	ef 90       	pop	r14
    3aca:	08 95       	ret
    3acc:	8a 30       	cpi	r24, 0x0A	; 10
    3ace:	09 f4       	brne	.+2      	; 0x3ad2 <NoRoots()+0x66>
    3ad0:	84 c0       	rjmp	.+264    	; 0x3bda <NoRoots()+0x16e>
    3ad2:	08 f0       	brcs	.+2      	; 0x3ad6 <NoRoots()+0x6a>
    3ad4:	88 c0       	rjmp	.+272    	; 0x3be6 <NoRoots()+0x17a>
    3ad6:	4d e0       	ldi	r20, 0x0D	; 13
    3ad8:	52 e0       	ldi	r21, 0x02	; 2
    3ada:	6a e0       	ldi	r22, 0x0A	; 10
    3adc:	85 30       	cpi	r24, 0x05	; 5
    3ade:	49 f7       	brne	.-46     	; 0x3ab2 <NoRoots()+0x46>
    3ae0:	86 ea       	ldi	r24, 0xA6	; 166
    3ae2:	90 e4       	ldi	r25, 0x40	; 64
    3ae4:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3ae8:	e4 cf       	rjmp	.-56     	; 0x3ab2 <NoRoots()+0x46>
    3aea:	80 31       	cpi	r24, 0x10	; 16
    3aec:	09 f4       	brne	.+2      	; 0x3af0 <NoRoots()+0x84>
    3aee:	8b c0       	rjmp	.+278    	; 0x3c06 <NoRoots()+0x19a>
    3af0:	58 f4       	brcc	.+22     	; 0x3b08 <NoRoots()+0x9c>
    3af2:	8d 30       	cpi	r24, 0x0D	; 13
    3af4:	09 f4       	brne	.+2      	; 0x3af8 <NoRoots()+0x8c>
    3af6:	85 c0       	rjmp	.+266    	; 0x3c02 <NoRoots()+0x196>
    3af8:	8f 30       	cpi	r24, 0x0F	; 15
    3afa:	d9 f6       	brne	.-74     	; 0x3ab2 <NoRoots()+0x46>
    3afc:	4d e0       	ldi	r20, 0x0D	; 13
    3afe:	52 e0       	ldi	r21, 0x02	; 2
    3b00:	60 e1       	ldi	r22, 0x10	; 16
    3b02:	8c e1       	ldi	r24, 0x1C	; 28
    3b04:	9c e0       	ldi	r25, 0x0C	; 12
    3b06:	7a c0       	rjmp	.+244    	; 0x3bfc <NoRoots()+0x190>
    3b08:	82 31       	cpi	r24, 0x12	; 18
    3b0a:	09 f4       	brne	.+2      	; 0x3b0e <NoRoots()+0xa2>
    3b0c:	91 c0       	rjmp	.+290    	; 0x3c30 <NoRoots()+0x1c4>
    3b0e:	08 f4       	brcc	.+2      	; 0x3b12 <NoRoots()+0xa6>
    3b10:	8b c0       	rjmp	.+278    	; 0x3c28 <NoRoots()+0x1bc>
    3b12:	49 e1       	ldi	r20, 0x19	; 25
    3b14:	68 e0       	ldi	r22, 0x08	; 8
    3b16:	84 31       	cpi	r24, 0x14	; 20
    3b18:	61 f6       	brne	.-104    	; 0x3ab2 <NoRoots()+0x46>
    3b1a:	86 ea       	ldi	r24, 0xA6	; 166
    3b1c:	90 e4       	ldi	r25, 0x40	; 64
    3b1e:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3b22:	c7 cf       	rjmp	.-114    	; 0x3ab2 <NoRoots()+0x46>
    3b24:	8d 32       	cpi	r24, 0x2D	; 45
    3b26:	09 f4       	brne	.+2      	; 0x3b2a <NoRoots()+0xbe>
    3b28:	b7 c0       	rjmp	.+366    	; 0x3c98 <NoRoots()+0x22c>
    3b2a:	e8 f4       	brcc	.+58     	; 0x3b66 <NoRoots()+0xfa>
    3b2c:	83 32       	cpi	r24, 0x23	; 35
    3b2e:	09 f4       	brne	.+2      	; 0x3b32 <NoRoots()+0xc6>
    3b30:	95 c0       	rjmp	.+298    	; 0x3c5c <NoRoots()+0x1f0>
    3b32:	60 f4       	brcc	.+24     	; 0x3b4c <NoRoots()+0xe0>
    3b34:	8e 31       	cpi	r24, 0x1E	; 30
    3b36:	09 f4       	brne	.+2      	; 0x3b3a <NoRoots()+0xce>
    3b38:	8c c0       	rjmp	.+280    	; 0x3c52 <NoRoots()+0x1e6>
    3b3a:	4d e0       	ldi	r20, 0x0D	; 13
    3b3c:	52 e0       	ldi	r21, 0x02	; 2
    3b3e:	63 e2       	ldi	r22, 0x23	; 35
    3b40:	82 32       	cpi	r24, 0x22	; 34
    3b42:	09 f0       	breq	.+2      	; 0x3b46 <NoRoots()+0xda>
    3b44:	b6 cf       	rjmp	.-148    	; 0x3ab2 <NoRoots()+0x46>
    3b46:	83 e5       	ldi	r24, 0x53	; 83
    3b48:	90 e2       	ldi	r25, 0x20	; 32
    3b4a:	58 c0       	rjmp	.+176    	; 0x3bfc <NoRoots()+0x190>
    3b4c:	85 32       	cpi	r24, 0x25	; 37
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <NoRoots()+0xe6>
    3b50:	96 c0       	rjmp	.+300    	; 0x3c7e <NoRoots()+0x212>
    3b52:	08 f4       	brcc	.+2      	; 0x3b56 <NoRoots()+0xea>
    3b54:	90 c0       	rjmp	.+288    	; 0x3c76 <NoRoots()+0x20a>
    3b56:	88 32       	cpi	r24, 0x28	; 40
    3b58:	09 f0       	breq	.+2      	; 0x3b5c <NoRoots()+0xf0>
    3b5a:	ab cf       	rjmp	.-170    	; 0x3ab2 <NoRoots()+0x46>
    3b5c:	4d e2       	ldi	r20, 0x2D	; 45
    3b5e:	62 e0       	ldi	r22, 0x02	; 2
    3b60:	88 ea       	ldi	r24, 0xA8	; 168
    3b62:	98 e4       	ldi	r25, 0x48	; 72
    3b64:	dc cf       	rjmp	.-72     	; 0x3b1e <NoRoots()+0xb2>
    3b66:	81 33       	cpi	r24, 0x31	; 49
    3b68:	09 f4       	brne	.+2      	; 0x3b6c <NoRoots()+0x100>
    3b6a:	a4 c0       	rjmp	.+328    	; 0x3cb4 <NoRoots()+0x248>
    3b6c:	68 f4       	brcc	.+26     	; 0x3b88 <NoRoots()+0x11c>
    3b6e:	8f 32       	cpi	r24, 0x2F	; 47
    3b70:	09 f4       	brne	.+2      	; 0x3b74 <NoRoots()+0x108>
    3b72:	98 c0       	rjmp	.+304    	; 0x3ca4 <NoRoots()+0x238>
    3b74:	80 33       	cpi	r24, 0x30	; 48
    3b76:	09 f0       	breq	.+2      	; 0x3b7a <NoRoots()+0x10e>
    3b78:	9c cf       	rjmp	.-200    	; 0x3ab2 <NoRoots()+0x46>
    3b7a:	41 e3       	ldi	r20, 0x31	; 49
    3b7c:	67 e0       	ldi	r22, 0x07	; 7
    3b7e:	83 e5       	ldi	r24, 0x53	; 83
    3b80:	90 e2       	ldi	r25, 0x20	; 32
    3b82:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3b86:	95 cf       	rjmp	.-214    	; 0x3ab2 <NoRoots()+0x46>
    3b88:	86 34       	cpi	r24, 0x46	; 70
    3b8a:	09 f4       	brne	.+2      	; 0x3b8e <NoRoots()+0x122>
    3b8c:	97 c0       	rjmp	.+302    	; 0x3cbc <NoRoots()+0x250>
    3b8e:	84 36       	cpi	r24, 0x64	; 100
    3b90:	09 f4       	brne	.+2      	; 0x3b94 <NoRoots()+0x128>
    3b92:	98 c0       	rjmp	.+304    	; 0x3cc4 <NoRoots()+0x258>
    3b94:	82 33       	cpi	r24, 0x32	; 50
    3b96:	09 f0       	breq	.+2      	; 0x3b9a <NoRoots()+0x12e>
    3b98:	8c cf       	rjmp	.-232    	; 0x3ab2 <NoRoots()+0x46>
    3b9a:	46 e4       	ldi	r20, 0x46	; 70
    3b9c:	6c e0       	ldi	r22, 0x0C	; 12
    3b9e:	8a e3       	ldi	r24, 0x3A	; 58
    3ba0:	90 e2       	ldi	r25, 0x20	; 32
    3ba2:	ef cf       	rjmp	.-34     	; 0x3b82 <NoRoots()+0x116>
    3ba4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3ba8:	7c 01       	movw	r14, r24
    3baa:	6b ea       	ldi	r22, 0xAB	; 171
    3bac:	71 e0       	ldi	r23, 0x01	; 1
    3bae:	ce 01       	movw	r24, r28
    3bb0:	01 96       	adiw	r24, 0x01	; 1
    3bb2:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    3bb6:	01 e0       	ldi	r16, 0x01	; 1
    3bb8:	97 01       	movw	r18, r14
    3bba:	4b e4       	ldi	r20, 0x4B	; 75
    3bbc:	50 e0       	ldi	r21, 0x00	; 0
    3bbe:	69 e7       	ldi	r22, 0x79	; 121
    3bc0:	7e e2       	ldi	r23, 0x2E	; 46
    3bc2:	ce 01       	movw	r24, r28
    3bc4:	01 96       	adiw	r24, 0x01	; 1
    3bc6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3bca:	ce 01       	movw	r24, r28
    3bcc:	01 96       	adiw	r24, 0x01	; 1
    3bce:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    3bd2:	6f cf       	rjmp	.-290    	; 0x3ab2 <NoRoots()+0x46>
    3bd4:	45 e0       	ldi	r20, 0x05	; 5
    3bd6:	66 e0       	ldi	r22, 0x06	; 6
    3bd8:	a0 cf       	rjmp	.-192    	; 0x3b1a <NoRoots()+0xae>
    3bda:	6b e0       	ldi	r22, 0x0B	; 11
    3bdc:	86 e4       	ldi	r24, 0x46	; 70
    3bde:	9e e1       	ldi	r25, 0x1E	; 30
    3be0:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3be4:	66 cf       	rjmp	.-308    	; 0x3ab2 <NoRoots()+0x46>
    3be6:	6c e0       	ldi	r22, 0x0C	; 12
    3be8:	8e e0       	ldi	r24, 0x0E	; 14
    3bea:	96 e0       	ldi	r25, 0x06	; 6
    3bec:	0e 94 dc 0e 	call	0x1db8	; 0x1db8 <progShowROOTS(unsigned int, unsigned char)>
    3bf0:	60 cf       	rjmp	.-320    	; 0x3ab2 <NoRoots()+0x46>
    3bf2:	4d e0       	ldi	r20, 0x0D	; 13
    3bf4:	52 e0       	ldi	r21, 0x02	; 2
    3bf6:	6d e0       	ldi	r22, 0x0D	; 13
    3bf8:	8f e0       	ldi	r24, 0x0F	; 15
    3bfa:	9a e0       	ldi	r25, 0x0A	; 10
    3bfc:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3c00:	58 cf       	rjmp	.-336    	; 0x3ab2 <NoRoots()+0x46>
    3c02:	6f e0       	ldi	r22, 0x0F	; 15
    3c04:	f1 cf       	rjmp	.-30     	; 0x3be8 <NoRoots()+0x17c>
    3c06:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c0a:	7c 01       	movw	r14, r24
    3c0c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c10:	8c 01       	movw	r16, r24
    3c12:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c16:	9c 01       	movw	r18, r24
    3c18:	4b e4       	ldi	r20, 0x4B	; 75
    3c1a:	50 e0       	ldi	r21, 0x00	; 0
    3c1c:	61 e1       	ldi	r22, 0x11	; 17
    3c1e:	83 e5       	ldi	r24, 0x53	; 83
    3c20:	90 e2       	ldi	r25, 0x20	; 32
    3c22:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3c26:	45 cf       	rjmp	.-374    	; 0x3ab2 <NoRoots()+0x46>
    3c28:	4d e0       	ldi	r20, 0x0D	; 13
    3c2a:	52 e0       	ldi	r21, 0x02	; 2
    3c2c:	62 e1       	ldi	r22, 0x12	; 18
    3c2e:	8b cf       	rjmp	.-234    	; 0x3b46 <NoRoots()+0xda>
    3c30:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c34:	7c 01       	movw	r14, r24
    3c36:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c3a:	8c 01       	movw	r16, r24
    3c3c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c40:	9c 01       	movw	r18, r24
    3c42:	4b e4       	ldi	r20, 0x4B	; 75
    3c44:	50 e0       	ldi	r21, 0x00	; 0
    3c46:	64 e1       	ldi	r22, 0x14	; 20
    3c48:	ea cf       	rjmp	.-44     	; 0x3c1e <NoRoots()+0x1b2>
    3c4a:	4d e0       	ldi	r20, 0x0D	; 13
    3c4c:	52 e0       	ldi	r21, 0x02	; 2
    3c4e:	6e e1       	ldi	r22, 0x1E	; 30
    3c50:	47 cf       	rjmp	.-370    	; 0x3ae0 <NoRoots()+0x74>
    3c52:	42 e2       	ldi	r20, 0x22	; 34
    3c54:	64 e0       	ldi	r22, 0x04	; 4
    3c56:	83 e5       	ldi	r24, 0x53	; 83
    3c58:	90 e2       	ldi	r25, 0x20	; 32
    3c5a:	61 cf       	rjmp	.-318    	; 0x3b1e <NoRoots()+0xb2>
    3c5c:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c60:	7c 01       	movw	r14, r24
    3c62:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c66:	8c 01       	movw	r16, r24
    3c68:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c6c:	9c 01       	movw	r18, r24
    3c6e:	4b e4       	ldi	r20, 0x4B	; 75
    3c70:	50 e0       	ldi	r21, 0x00	; 0
    3c72:	64 e2       	ldi	r22, 0x24	; 36
    3c74:	d4 cf       	rjmp	.-88     	; 0x3c1e <NoRoots()+0x1b2>
    3c76:	4d e0       	ldi	r20, 0x0D	; 13
    3c78:	52 e0       	ldi	r21, 0x02	; 2
    3c7a:	65 e2       	ldi	r22, 0x25	; 37
    3c7c:	64 cf       	rjmp	.-312    	; 0x3b46 <NoRoots()+0xda>
    3c7e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c82:	7c 01       	movw	r14, r24
    3c84:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c88:	8c 01       	movw	r16, r24
    3c8a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3c8e:	9c 01       	movw	r18, r24
    3c90:	4b e4       	ldi	r20, 0x4B	; 75
    3c92:	50 e0       	ldi	r21, 0x00	; 0
    3c94:	68 e2       	ldi	r22, 0x28	; 40
    3c96:	c3 cf       	rjmp	.-122    	; 0x3c1e <NoRoots()+0x1b2>
    3c98:	6f e2       	ldi	r22, 0x2F	; 47
    3c9a:	86 ea       	ldi	r24, 0xA6	; 166
    3c9c:	90 e4       	ldi	r25, 0x40	; 64
    3c9e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3ca2:	07 cf       	rjmp	.-498    	; 0x3ab2 <NoRoots()+0x46>
    3ca4:	40 e3       	ldi	r20, 0x30	; 48
    3ca6:	6d e0       	ldi	r22, 0x0D	; 13
    3ca8:	72 e0       	ldi	r23, 0x02	; 2
    3caa:	83 e5       	ldi	r24, 0x53	; 83
    3cac:	90 e2       	ldi	r25, 0x20	; 32
    3cae:	0e 94 69 08 	call	0x10d2	; 0x10d2 <progStern(unsigned int, int, unsigned char)>
    3cb2:	ff ce       	rjmp	.-514    	; 0x3ab2 <NoRoots()+0x46>
    3cb4:	42 e3       	ldi	r20, 0x32	; 50
    3cb6:	6a ef       	ldi	r22, 0xFA	; 250
    3cb8:	70 e0       	ldi	r23, 0x00	; 0
    3cba:	f7 cf       	rjmp	.-18     	; 0x3caa <NoRoots()+0x23e>
    3cbc:	64 e6       	ldi	r22, 0x64	; 100
    3cbe:	80 e3       	ldi	r24, 0x30	; 48
    3cc0:	95 e7       	ldi	r25, 0x75	; 117
    3cc2:	94 cf       	rjmp	.-216    	; 0x3bec <NoRoots()+0x180>
    3cc4:	60 e0       	ldi	r22, 0x00	; 0
    3cc6:	8f e0       	ldi	r24, 0x0F	; 15
    3cc8:	90 e1       	ldi	r25, 0x10	; 16
    3cca:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	93 d8       	rcall	.-3802   	; 0x2df8 <switchToSong(unsigned char)>
    3cd2:	ef ce       	rjmp	.-546    	; 0x3ab2 <NoRoots()+0x46>

00003cd4 <Firework()>:
    3cd4:	ef 92       	push	r14
    3cd6:	ff 92       	push	r15
    3cd8:	0f 93       	push	r16
    3cda:	1f 93       	push	r17
    3cdc:	cf 93       	push	r28
    3cde:	df 93       	push	r29
    3ce0:	00 d0       	rcall	.+0      	; 0x3ce2 <Firework()+0xe>
    3ce2:	00 d0       	rcall	.+0      	; 0x3ce4 <Firework()+0x10>
    3ce4:	00 d0       	rcall	.+0      	; 0x3ce6 <Firework()+0x12>
    3ce6:	1f 92       	push	r1
    3ce8:	cd b7       	in	r28, 0x3d	; 61
    3cea:	de b7       	in	r29, 0x3e	; 62
    3cec:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    3cf0:	8e 31       	cpi	r24, 0x1E	; 30
    3cf2:	09 f4       	brne	.+2      	; 0x3cf6 <Firework()+0x22>
    3cf4:	af c0       	rjmp	.+350    	; 0x3e54 <Firework()+0x180>
    3cf6:	a0 f5       	brcc	.+104    	; 0x3d60 <Firework()+0x8c>
    3cf8:	85 30       	cpi	r24, 0x05	; 5
    3cfa:	09 f4       	brne	.+2      	; 0x3cfe <Firework()+0x2a>
    3cfc:	92 c0       	rjmp	.+292    	; 0x3e22 <Firework()+0x14e>
    3cfe:	b8 f4       	brcc	.+46     	; 0x3d2e <Firework()+0x5a>
    3d00:	81 30       	cpi	r24, 0x01	; 1
    3d02:	09 f4       	brne	.+2      	; 0x3d06 <Firework()+0x32>
    3d04:	87 c0       	rjmp	.+270    	; 0x3e14 <Firework()+0x140>
    3d06:	08 f4       	brcc	.+2      	; 0x3d0a <Firework()+0x36>
    3d08:	6d c0       	rjmp	.+218    	; 0x3de4 <Firework()+0x110>
    3d0a:	45 e0       	ldi	r20, 0x05	; 5
    3d0c:	64 e0       	ldi	r22, 0x04	; 4
    3d0e:	82 30       	cpi	r24, 0x02	; 2
    3d10:	09 f4       	brne	.+2      	; 0x3d14 <Firework()+0x40>
    3d12:	82 c0       	rjmp	.+260    	; 0x3e18 <Firework()+0x144>
    3d14:	27 96       	adiw	r28, 0x07	; 7
    3d16:	0f b6       	in	r0, 0x3f	; 63
    3d18:	f8 94       	cli
    3d1a:	de bf       	out	0x3e, r29	; 62
    3d1c:	0f be       	out	0x3f, r0	; 63
    3d1e:	cd bf       	out	0x3d, r28	; 61
    3d20:	df 91       	pop	r29
    3d22:	cf 91       	pop	r28
    3d24:	1f 91       	pop	r17
    3d26:	0f 91       	pop	r16
    3d28:	ff 90       	pop	r15
    3d2a:	ef 90       	pop	r14
    3d2c:	08 95       	ret
    3d2e:	8f 30       	cpi	r24, 0x0F	; 15
    3d30:	09 f4       	brne	.+2      	; 0x3d34 <Firework()+0x60>
    3d32:	7b c0       	rjmp	.+246    	; 0x3e2a <Firework()+0x156>
    3d34:	40 f4       	brcc	.+16     	; 0x3d46 <Firework()+0x72>
    3d36:	8a 30       	cpi	r24, 0x0A	; 10
    3d38:	69 f7       	brne	.-38     	; 0x3d14 <Firework()+0x40>
    3d3a:	6f e0       	ldi	r22, 0x0F	; 15
    3d3c:	86 e0       	ldi	r24, 0x06	; 6
    3d3e:	9f e3       	ldi	r25, 0x3F	; 63
    3d40:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3d44:	e7 cf       	rjmp	.-50     	; 0x3d14 <Firework()+0x40>
    3d46:	84 31       	cpi	r24, 0x14	; 20
    3d48:	09 f4       	brne	.+2      	; 0x3d4c <Firework()+0x78>
    3d4a:	73 c0       	rjmp	.+230    	; 0x3e32 <Firework()+0x15e>
    3d4c:	44 ef       	ldi	r20, 0xF4	; 244
    3d4e:	51 e0       	ldi	r21, 0x01	; 1
    3d50:	6e e1       	ldi	r22, 0x1E	; 30
    3d52:	89 31       	cpi	r24, 0x19	; 25
    3d54:	f9 f6       	brne	.-66     	; 0x3d14 <Firework()+0x40>
    3d56:	86 e0       	ldi	r24, 0x06	; 6
    3d58:	9f e3       	ldi	r25, 0x3F	; 63
    3d5a:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3d5e:	da cf       	rjmp	.-76     	; 0x3d14 <Firework()+0x40>
    3d60:	87 33       	cpi	r24, 0x37	; 55
    3d62:	09 f4       	brne	.+2      	; 0x3d66 <Firework()+0x92>
    3d64:	8f c0       	rjmp	.+286    	; 0x3e84 <Firework()+0x1b0>
    3d66:	d0 f4       	brcc	.+52     	; 0x3d9c <Firework()+0xc8>
    3d68:	88 32       	cpi	r24, 0x28	; 40
    3d6a:	09 f4       	brne	.+2      	; 0x3d6e <Firework()+0x9a>
    3d6c:	78 c0       	rjmp	.+240    	; 0x3e5e <Firework()+0x18a>
    3d6e:	50 f4       	brcc	.+20     	; 0x3d84 <Firework()+0xb0>
    3d70:	44 ef       	ldi	r20, 0xF4	; 244
    3d72:	51 e0       	ldi	r21, 0x01	; 1
    3d74:	68 e2       	ldi	r22, 0x28	; 40
    3d76:	83 32       	cpi	r24, 0x23	; 35
    3d78:	69 f6       	brne	.-102    	; 0x3d14 <Firework()+0x40>
    3d7a:	86 e0       	ldi	r24, 0x06	; 6
    3d7c:	9f e3       	ldi	r25, 0x3F	; 63
    3d7e:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3d82:	c8 cf       	rjmp	.-112    	; 0x3d14 <Firework()+0x40>
    3d84:	8d 32       	cpi	r24, 0x2D	; 45
    3d86:	09 f4       	brne	.+2      	; 0x3d8a <Firework()+0xb6>
    3d88:	77 c0       	rjmp	.+238    	; 0x3e78 <Firework()+0x1a4>
    3d8a:	82 33       	cpi	r24, 0x32	; 50
    3d8c:	19 f6       	brne	.-122    	; 0x3d14 <Firework()+0x40>
    3d8e:	47 e3       	ldi	r20, 0x37	; 55
    3d90:	67 e0       	ldi	r22, 0x07	; 7
    3d92:	8d ef       	ldi	r24, 0xFD	; 253
    3d94:	9e e3       	ldi	r25, 0x3E	; 62
    3d96:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3d9a:	bc cf       	rjmp	.-136    	; 0x3d14 <Firework()+0x40>
    3d9c:	81 34       	cpi	r24, 0x41	; 65
    3d9e:	09 f4       	brne	.+2      	; 0x3da2 <Firework()+0xce>
    3da0:	75 c0       	rjmp	.+234    	; 0x3e8c <Firework()+0x1b8>
    3da2:	90 f4       	brcc	.+36     	; 0x3dc8 <Firework()+0xf4>
    3da4:	8c 33       	cpi	r24, 0x3C	; 60
    3da6:	09 f0       	breq	.+2      	; 0x3daa <Firework()+0xd6>
    3da8:	b5 cf       	rjmp	.-150    	; 0x3d14 <Firework()+0x40>
    3daa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3dae:	7c 01       	movw	r14, r24
    3db0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3db4:	8c 01       	movw	r16, r24
    3db6:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3dba:	9c 01       	movw	r18, r24
    3dbc:	4b e4       	ldi	r20, 0x4B	; 75
    3dbe:	50 e0       	ldi	r21, 0x00	; 0
    3dc0:	61 e4       	ldi	r22, 0x41	; 65
    3dc2:	84 e4       	ldi	r24, 0x44	; 68
    3dc4:	9f e2       	ldi	r25, 0x2F	; 47
    3dc6:	43 c0       	rjmp	.+134    	; 0x3e4e <Firework()+0x17a>
    3dc8:	86 34       	cpi	r24, 0x46	; 70
    3dca:	09 f4       	brne	.+2      	; 0x3dce <Firework()+0xfa>
    3dcc:	64 c0       	rjmp	.+200    	; 0x3e96 <Firework()+0x1c2>
    3dce:	84 36       	cpi	r24, 0x64	; 100
    3dd0:	09 f0       	breq	.+2      	; 0x3dd4 <Firework()+0x100>
    3dd2:	a0 cf       	rjmp	.-192    	; 0x3d14 <Firework()+0x40>
    3dd4:	60 e0       	ldi	r22, 0x00	; 0
    3dd6:	8f e0       	ldi	r24, 0x0F	; 15
    3dd8:	90 e1       	ldi	r25, 0x10	; 16
    3dda:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    3dde:	80 e0       	ldi	r24, 0x00	; 0
    3de0:	0b d8       	rcall	.-4074   	; 0x2df8 <switchToSong(unsigned char)>
    3de2:	98 cf       	rjmp	.-208    	; 0x3d14 <Firework()+0x40>
    3de4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3de8:	7c 01       	movw	r14, r24
    3dea:	64 ec       	ldi	r22, 0xC4	; 196
    3dec:	71 e0       	ldi	r23, 0x01	; 1
    3dee:	ce 01       	movw	r24, r28
    3df0:	01 96       	adiw	r24, 0x01	; 1
    3df2:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    3df6:	01 e0       	ldi	r16, 0x01	; 1
    3df8:	97 01       	movw	r18, r14
    3dfa:	4b e4       	ldi	r20, 0x4B	; 75
    3dfc:	50 e0       	ldi	r21, 0x00	; 0
    3dfe:	6e e0       	ldi	r22, 0x0E	; 14
    3e00:	7d e3       	ldi	r23, 0x3D	; 61
    3e02:	ce 01       	movw	r24, r28
    3e04:	01 96       	adiw	r24, 0x01	; 1
    3e06:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3e0a:	ce 01       	movw	r24, r28
    3e0c:	01 96       	adiw	r24, 0x01	; 1
    3e0e:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    3e12:	80 cf       	rjmp	.-256    	; 0x3d14 <Firework()+0x40>
    3e14:	42 e0       	ldi	r20, 0x02	; 2
    3e16:	63 e0       	ldi	r22, 0x03	; 3
    3e18:	83 e8       	ldi	r24, 0x83	; 131
    3e1a:	9f e1       	ldi	r25, 0x1F	; 31
    3e1c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3e20:	79 cf       	rjmp	.-270    	; 0x3d14 <Firework()+0x40>
    3e22:	44 ef       	ldi	r20, 0xF4	; 244
    3e24:	51 e0       	ldi	r21, 0x01	; 1
    3e26:	6a e0       	ldi	r22, 0x0A	; 10
    3e28:	96 cf       	rjmp	.-212    	; 0x3d56 <Firework()+0x82>
    3e2a:	44 ef       	ldi	r20, 0xF4	; 244
    3e2c:	51 e0       	ldi	r21, 0x01	; 1
    3e2e:	64 e1       	ldi	r22, 0x14	; 20
    3e30:	a4 cf       	rjmp	.-184    	; 0x3d7a <Firework()+0xa6>
    3e32:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e36:	7c 01       	movw	r14, r24
    3e38:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e3c:	8c 01       	movw	r16, r24
    3e3e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e42:	9c 01       	movw	r18, r24
    3e44:	4b e4       	ldi	r20, 0x4B	; 75
    3e46:	50 e0       	ldi	r21, 0x00	; 0
    3e48:	69 e1       	ldi	r22, 0x19	; 25
    3e4a:	86 e0       	ldi	r24, 0x06	; 6
    3e4c:	9f e3       	ldi	r25, 0x3F	; 63
    3e4e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    3e52:	60 cf       	rjmp	.-320    	; 0x3d14 <Firework()+0x40>
    3e54:	43 e2       	ldi	r20, 0x23	; 35
    3e56:	64 e0       	ldi	r22, 0x04	; 4
    3e58:	86 e0       	ldi	r24, 0x06	; 6
    3e5a:	9f e3       	ldi	r25, 0x3F	; 63
    3e5c:	df cf       	rjmp	.-66     	; 0x3e1c <Firework()+0x148>
    3e5e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e62:	7c 01       	movw	r14, r24
    3e64:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e68:	8c 01       	movw	r16, r24
    3e6a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3e6e:	9c 01       	movw	r18, r24
    3e70:	4b e4       	ldi	r20, 0x4B	; 75
    3e72:	50 e0       	ldi	r21, 0x00	; 0
    3e74:	6d e2       	ldi	r22, 0x2D	; 45
    3e76:	e9 cf       	rjmp	.-46     	; 0x3e4a <Firework()+0x176>
    3e78:	62 e3       	ldi	r22, 0x32	; 50
    3e7a:	82 e7       	ldi	r24, 0x72	; 114
    3e7c:	9f e1       	ldi	r25, 0x1F	; 31
    3e7e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    3e82:	48 cf       	rjmp	.-368    	; 0x3d14 <Firework()+0x40>
    3e84:	44 ef       	ldi	r20, 0xF4	; 244
    3e86:	51 e0       	ldi	r21, 0x01	; 1
    3e88:	6c e3       	ldi	r22, 0x3C	; 60
    3e8a:	77 cf       	rjmp	.-274    	; 0x3d7a <Firework()+0xa6>
    3e8c:	46 e4       	ldi	r20, 0x46	; 70
    3e8e:	6c e0       	ldi	r22, 0x0C	; 12
    3e90:	89 eb       	ldi	r24, 0xB9	; 185
    3e92:	9f e0       	ldi	r25, 0x0F	; 15
    3e94:	80 cf       	rjmp	.-256    	; 0x3d96 <Firework()+0xc2>
    3e96:	64 e6       	ldi	r22, 0x64	; 100
    3e98:	80 e1       	ldi	r24, 0x10	; 16
    3e9a:	97 e2       	ldi	r25, 0x27	; 39
    3e9c:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    3ea0:	39 cf       	rjmp	.-398    	; 0x3d14 <Firework()+0x40>

00003ea2 <Diamonds()>:
    3ea2:	ef 92       	push	r14
    3ea4:	ff 92       	push	r15
    3ea6:	0f 93       	push	r16
    3ea8:	1f 93       	push	r17
    3eaa:	cf 93       	push	r28
    3eac:	df 93       	push	r29
    3eae:	00 d0       	rcall	.+0      	; 0x3eb0 <Diamonds()+0xe>
    3eb0:	00 d0       	rcall	.+0      	; 0x3eb2 <Diamonds()+0x10>
    3eb2:	00 d0       	rcall	.+0      	; 0x3eb4 <Diamonds()+0x12>
    3eb4:	1f 92       	push	r1
    3eb6:	cd b7       	in	r28, 0x3d	; 61
    3eb8:	de b7       	in	r29, 0x3e	; 62
    3eba:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    3ebe:	8e 31       	cpi	r24, 0x1E	; 30
    3ec0:	09 f4       	brne	.+2      	; 0x3ec4 <Diamonds()+0x22>
    3ec2:	b0 c0       	rjmp	.+352    	; 0x4024 <Diamonds()+0x182>
    3ec4:	a0 f5       	brcc	.+104    	; 0x3f2e <Diamonds()+0x8c>
    3ec6:	85 30       	cpi	r24, 0x05	; 5
    3ec8:	09 f4       	brne	.+2      	; 0x3ecc <Diamonds()+0x2a>
    3eca:	93 c0       	rjmp	.+294    	; 0x3ff2 <Diamonds()+0x150>
    3ecc:	b8 f4       	brcc	.+46     	; 0x3efc <Diamonds()+0x5a>
    3ece:	81 30       	cpi	r24, 0x01	; 1
    3ed0:	09 f4       	brne	.+2      	; 0x3ed4 <Diamonds()+0x32>
    3ed2:	88 c0       	rjmp	.+272    	; 0x3fe4 <Diamonds()+0x142>
    3ed4:	08 f4       	brcc	.+2      	; 0x3ed8 <Diamonds()+0x36>
    3ed6:	6e c0       	rjmp	.+220    	; 0x3fb4 <Diamonds()+0x112>
    3ed8:	45 e0       	ldi	r20, 0x05	; 5
    3eda:	64 e0       	ldi	r22, 0x04	; 4
    3edc:	82 30       	cpi	r24, 0x02	; 2
    3ede:	09 f4       	brne	.+2      	; 0x3ee2 <Diamonds()+0x40>
    3ee0:	83 c0       	rjmp	.+262    	; 0x3fe8 <Diamonds()+0x146>
    3ee2:	27 96       	adiw	r28, 0x07	; 7
    3ee4:	0f b6       	in	r0, 0x3f	; 63
    3ee6:	f8 94       	cli
    3ee8:	de bf       	out	0x3e, r29	; 62
    3eea:	0f be       	out	0x3f, r0	; 63
    3eec:	cd bf       	out	0x3d, r28	; 61
    3eee:	df 91       	pop	r29
    3ef0:	cf 91       	pop	r28
    3ef2:	1f 91       	pop	r17
    3ef4:	0f 91       	pop	r16
    3ef6:	ff 90       	pop	r15
    3ef8:	ef 90       	pop	r14
    3efa:	08 95       	ret
    3efc:	8f 30       	cpi	r24, 0x0F	; 15
    3efe:	09 f4       	brne	.+2      	; 0x3f02 <Diamonds()+0x60>
    3f00:	7c c0       	rjmp	.+248    	; 0x3ffa <Diamonds()+0x158>
    3f02:	40 f4       	brcc	.+16     	; 0x3f14 <Diamonds()+0x72>
    3f04:	8a 30       	cpi	r24, 0x0A	; 10
    3f06:	69 f7       	brne	.-38     	; 0x3ee2 <Diamonds()+0x40>
    3f08:	6f e0       	ldi	r22, 0x0F	; 15
    3f0a:	86 e0       	ldi	r24, 0x06	; 6
    3f0c:	9f e3       	ldi	r25, 0x3F	; 63
    3f0e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    3f12:	e7 cf       	rjmp	.-50     	; 0x3ee2 <Diamonds()+0x40>
    3f14:	84 31       	cpi	r24, 0x14	; 20
    3f16:	09 f4       	brne	.+2      	; 0x3f1a <Diamonds()+0x78>
    3f18:	74 c0       	rjmp	.+232    	; 0x4002 <Diamonds()+0x160>
    3f1a:	44 ef       	ldi	r20, 0xF4	; 244
    3f1c:	51 e0       	ldi	r21, 0x01	; 1
    3f1e:	6e e1       	ldi	r22, 0x1E	; 30
    3f20:	89 31       	cpi	r24, 0x19	; 25
    3f22:	f9 f6       	brne	.-66     	; 0x3ee2 <Diamonds()+0x40>
    3f24:	86 e0       	ldi	r24, 0x06	; 6
    3f26:	9f e3       	ldi	r25, 0x3F	; 63
    3f28:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    3f2c:	da cf       	rjmp	.-76     	; 0x3ee2 <Diamonds()+0x40>
    3f2e:	87 33       	cpi	r24, 0x37	; 55
    3f30:	09 f4       	brne	.+2      	; 0x3f34 <Diamonds()+0x92>
    3f32:	90 c0       	rjmp	.+288    	; 0x4054 <Diamonds()+0x1b2>
    3f34:	d0 f4       	brcc	.+52     	; 0x3f6a <Diamonds()+0xc8>
    3f36:	88 32       	cpi	r24, 0x28	; 40
    3f38:	09 f4       	brne	.+2      	; 0x3f3c <Diamonds()+0x9a>
    3f3a:	79 c0       	rjmp	.+242    	; 0x402e <Diamonds()+0x18c>
    3f3c:	50 f4       	brcc	.+20     	; 0x3f52 <Diamonds()+0xb0>
    3f3e:	44 ef       	ldi	r20, 0xF4	; 244
    3f40:	51 e0       	ldi	r21, 0x01	; 1
    3f42:	68 e2       	ldi	r22, 0x28	; 40
    3f44:	83 32       	cpi	r24, 0x23	; 35
    3f46:	69 f6       	brne	.-102    	; 0x3ee2 <Diamonds()+0x40>
    3f48:	86 e0       	ldi	r24, 0x06	; 6
    3f4a:	9f e3       	ldi	r25, 0x3F	; 63
    3f4c:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    3f50:	c8 cf       	rjmp	.-112    	; 0x3ee2 <Diamonds()+0x40>
    3f52:	8d 32       	cpi	r24, 0x2D	; 45
    3f54:	09 f4       	brne	.+2      	; 0x3f58 <Diamonds()+0xb6>
    3f56:	78 c0       	rjmp	.+240    	; 0x4048 <Diamonds()+0x1a6>
    3f58:	82 33       	cpi	r24, 0x32	; 50
    3f5a:	19 f6       	brne	.-122    	; 0x3ee2 <Diamonds()+0x40>
    3f5c:	47 e3       	ldi	r20, 0x37	; 55
    3f5e:	67 e0       	ldi	r22, 0x07	; 7
    3f60:	8d ef       	ldi	r24, 0xFD	; 253
    3f62:	9e e3       	ldi	r25, 0x3E	; 62
    3f64:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    3f68:	bc cf       	rjmp	.-136    	; 0x3ee2 <Diamonds()+0x40>
    3f6a:	81 34       	cpi	r24, 0x41	; 65
    3f6c:	09 f4       	brne	.+2      	; 0x3f70 <Diamonds()+0xce>
    3f6e:	76 c0       	rjmp	.+236    	; 0x405c <Diamonds()+0x1ba>
    3f70:	90 f4       	brcc	.+36     	; 0x3f96 <Diamonds()+0xf4>
    3f72:	8c 33       	cpi	r24, 0x3C	; 60
    3f74:	09 f0       	breq	.+2      	; 0x3f78 <Diamonds()+0xd6>
    3f76:	b5 cf       	rjmp	.-150    	; 0x3ee2 <Diamonds()+0x40>
    3f78:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3f7c:	7c 01       	movw	r14, r24
    3f7e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3f82:	8c 01       	movw	r16, r24
    3f84:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    3f88:	9c 01       	movw	r18, r24
    3f8a:	4b e4       	ldi	r20, 0x4B	; 75
    3f8c:	50 e0       	ldi	r21, 0x00	; 0
    3f8e:	61 e4       	ldi	r22, 0x41	; 65
    3f90:	84 e4       	ldi	r24, 0x44	; 68
    3f92:	9f e2       	ldi	r25, 0x2F	; 47
    3f94:	44 c0       	rjmp	.+136    	; 0x401e <Diamonds()+0x17c>
    3f96:	86 34       	cpi	r24, 0x46	; 70
    3f98:	09 f4       	brne	.+2      	; 0x3f9c <Diamonds()+0xfa>
    3f9a:	65 c0       	rjmp	.+202    	; 0x4066 <Diamonds()+0x1c4>
    3f9c:	84 36       	cpi	r24, 0x64	; 100
    3f9e:	09 f0       	breq	.+2      	; 0x3fa2 <Diamonds()+0x100>
    3fa0:	a0 cf       	rjmp	.-192    	; 0x3ee2 <Diamonds()+0x40>
    3fa2:	60 e0       	ldi	r22, 0x00	; 0
    3fa4:	8f e0       	ldi	r24, 0x0F	; 15
    3fa6:	90 e1       	ldi	r25, 0x10	; 16
    3fa8:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    3fac:	80 e0       	ldi	r24, 0x00	; 0
    3fae:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <switchToSong(unsigned char)>
    3fb2:	97 cf       	rjmp	.-210    	; 0x3ee2 <Diamonds()+0x40>
    3fb4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    3fb8:	7c 01       	movw	r14, r24
    3fba:	6c ed       	ldi	r22, 0xDC	; 220
    3fbc:	71 e0       	ldi	r23, 0x01	; 1
    3fbe:	ce 01       	movw	r24, r28
    3fc0:	01 96       	adiw	r24, 0x01	; 1
    3fc2:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    3fc6:	01 e0       	ldi	r16, 0x01	; 1
    3fc8:	97 01       	movw	r18, r14
    3fca:	4b e4       	ldi	r20, 0x4B	; 75
    3fcc:	50 e0       	ldi	r21, 0x00	; 0
    3fce:	6e e0       	ldi	r22, 0x0E	; 14
    3fd0:	7d e3       	ldi	r23, 0x3D	; 61
    3fd2:	ce 01       	movw	r24, r28
    3fd4:	01 96       	adiw	r24, 0x01	; 1
    3fd6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    3fda:	ce 01       	movw	r24, r28
    3fdc:	01 96       	adiw	r24, 0x01	; 1
    3fde:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    3fe2:	7f cf       	rjmp	.-258    	; 0x3ee2 <Diamonds()+0x40>
    3fe4:	42 e0       	ldi	r20, 0x02	; 2
    3fe6:	63 e0       	ldi	r22, 0x03	; 3
    3fe8:	83 e8       	ldi	r24, 0x83	; 131
    3fea:	9f e1       	ldi	r25, 0x1F	; 31
    3fec:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    3ff0:	78 cf       	rjmp	.-272    	; 0x3ee2 <Diamonds()+0x40>
    3ff2:	44 ef       	ldi	r20, 0xF4	; 244
    3ff4:	51 e0       	ldi	r21, 0x01	; 1
    3ff6:	6a e0       	ldi	r22, 0x0A	; 10
    3ff8:	95 cf       	rjmp	.-214    	; 0x3f24 <Diamonds()+0x82>
    3ffa:	44 ef       	ldi	r20, 0xF4	; 244
    3ffc:	51 e0       	ldi	r21, 0x01	; 1
    3ffe:	64 e1       	ldi	r22, 0x14	; 20
    4000:	a3 cf       	rjmp	.-186    	; 0x3f48 <Diamonds()+0xa6>
    4002:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4006:	7c 01       	movw	r14, r24
    4008:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    400c:	8c 01       	movw	r16, r24
    400e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4012:	9c 01       	movw	r18, r24
    4014:	4b e4       	ldi	r20, 0x4B	; 75
    4016:	50 e0       	ldi	r21, 0x00	; 0
    4018:	69 e1       	ldi	r22, 0x19	; 25
    401a:	86 e0       	ldi	r24, 0x06	; 6
    401c:	9f e3       	ldi	r25, 0x3F	; 63
    401e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4022:	5f cf       	rjmp	.-322    	; 0x3ee2 <Diamonds()+0x40>
    4024:	43 e2       	ldi	r20, 0x23	; 35
    4026:	64 e0       	ldi	r22, 0x04	; 4
    4028:	86 e0       	ldi	r24, 0x06	; 6
    402a:	9f e3       	ldi	r25, 0x3F	; 63
    402c:	df cf       	rjmp	.-66     	; 0x3fec <Diamonds()+0x14a>
    402e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4032:	7c 01       	movw	r14, r24
    4034:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4038:	8c 01       	movw	r16, r24
    403a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    403e:	9c 01       	movw	r18, r24
    4040:	4b e4       	ldi	r20, 0x4B	; 75
    4042:	50 e0       	ldi	r21, 0x00	; 0
    4044:	6d e2       	ldi	r22, 0x2D	; 45
    4046:	e9 cf       	rjmp	.-46     	; 0x401a <Diamonds()+0x178>
    4048:	62 e3       	ldi	r22, 0x32	; 50
    404a:	82 e7       	ldi	r24, 0x72	; 114
    404c:	9f e1       	ldi	r25, 0x1F	; 31
    404e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    4052:	47 cf       	rjmp	.-370    	; 0x3ee2 <Diamonds()+0x40>
    4054:	44 ef       	ldi	r20, 0xF4	; 244
    4056:	51 e0       	ldi	r21, 0x01	; 1
    4058:	6c e3       	ldi	r22, 0x3C	; 60
    405a:	76 cf       	rjmp	.-276    	; 0x3f48 <Diamonds()+0xa6>
    405c:	46 e4       	ldi	r20, 0x46	; 70
    405e:	6c e0       	ldi	r22, 0x0C	; 12
    4060:	89 eb       	ldi	r24, 0xB9	; 185
    4062:	9f e0       	ldi	r25, 0x0F	; 15
    4064:	7f cf       	rjmp	.-258    	; 0x3f64 <Diamonds()+0xc2>
    4066:	64 e6       	ldi	r22, 0x64	; 100
    4068:	80 e1       	ldi	r24, 0x10	; 16
    406a:	97 e2       	ldi	r25, 0x27	; 39
    406c:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    4070:	38 cf       	rjmp	.-400    	; 0x3ee2 <Diamonds()+0x40>

00004072 <SetFire()>:
    4072:	ef 92       	push	r14
    4074:	ff 92       	push	r15
    4076:	0f 93       	push	r16
    4078:	1f 93       	push	r17
    407a:	cf 93       	push	r28
    407c:	df 93       	push	r29
    407e:	00 d0       	rcall	.+0      	; 0x4080 <SetFire()+0xe>
    4080:	00 d0       	rcall	.+0      	; 0x4082 <SetFire()+0x10>
    4082:	00 d0       	rcall	.+0      	; 0x4084 <SetFire()+0x12>
    4084:	1f 92       	push	r1
    4086:	cd b7       	in	r28, 0x3d	; 61
    4088:	de b7       	in	r29, 0x3e	; 62
    408a:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    408e:	8e 31       	cpi	r24, 0x1E	; 30
    4090:	09 f4       	brne	.+2      	; 0x4094 <SetFire()+0x22>
    4092:	b0 c0       	rjmp	.+352    	; 0x41f4 <SetFire()+0x182>
    4094:	a0 f5       	brcc	.+104    	; 0x40fe <SetFire()+0x8c>
    4096:	85 30       	cpi	r24, 0x05	; 5
    4098:	09 f4       	brne	.+2      	; 0x409c <SetFire()+0x2a>
    409a:	93 c0       	rjmp	.+294    	; 0x41c2 <SetFire()+0x150>
    409c:	b8 f4       	brcc	.+46     	; 0x40cc <SetFire()+0x5a>
    409e:	81 30       	cpi	r24, 0x01	; 1
    40a0:	09 f4       	brne	.+2      	; 0x40a4 <SetFire()+0x32>
    40a2:	88 c0       	rjmp	.+272    	; 0x41b4 <SetFire()+0x142>
    40a4:	08 f4       	brcc	.+2      	; 0x40a8 <SetFire()+0x36>
    40a6:	6e c0       	rjmp	.+220    	; 0x4184 <SetFire()+0x112>
    40a8:	45 e0       	ldi	r20, 0x05	; 5
    40aa:	64 e0       	ldi	r22, 0x04	; 4
    40ac:	82 30       	cpi	r24, 0x02	; 2
    40ae:	09 f4       	brne	.+2      	; 0x40b2 <SetFire()+0x40>
    40b0:	83 c0       	rjmp	.+262    	; 0x41b8 <SetFire()+0x146>
    40b2:	27 96       	adiw	r28, 0x07	; 7
    40b4:	0f b6       	in	r0, 0x3f	; 63
    40b6:	f8 94       	cli
    40b8:	de bf       	out	0x3e, r29	; 62
    40ba:	0f be       	out	0x3f, r0	; 63
    40bc:	cd bf       	out	0x3d, r28	; 61
    40be:	df 91       	pop	r29
    40c0:	cf 91       	pop	r28
    40c2:	1f 91       	pop	r17
    40c4:	0f 91       	pop	r16
    40c6:	ff 90       	pop	r15
    40c8:	ef 90       	pop	r14
    40ca:	08 95       	ret
    40cc:	8f 30       	cpi	r24, 0x0F	; 15
    40ce:	09 f4       	brne	.+2      	; 0x40d2 <SetFire()+0x60>
    40d0:	7c c0       	rjmp	.+248    	; 0x41ca <SetFire()+0x158>
    40d2:	40 f4       	brcc	.+16     	; 0x40e4 <SetFire()+0x72>
    40d4:	8a 30       	cpi	r24, 0x0A	; 10
    40d6:	69 f7       	brne	.-38     	; 0x40b2 <SetFire()+0x40>
    40d8:	6f e0       	ldi	r22, 0x0F	; 15
    40da:	86 e0       	ldi	r24, 0x06	; 6
    40dc:	9f e3       	ldi	r25, 0x3F	; 63
    40de:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    40e2:	e7 cf       	rjmp	.-50     	; 0x40b2 <SetFire()+0x40>
    40e4:	84 31       	cpi	r24, 0x14	; 20
    40e6:	09 f4       	brne	.+2      	; 0x40ea <SetFire()+0x78>
    40e8:	74 c0       	rjmp	.+232    	; 0x41d2 <SetFire()+0x160>
    40ea:	44 ef       	ldi	r20, 0xF4	; 244
    40ec:	51 e0       	ldi	r21, 0x01	; 1
    40ee:	6e e1       	ldi	r22, 0x1E	; 30
    40f0:	89 31       	cpi	r24, 0x19	; 25
    40f2:	f9 f6       	brne	.-66     	; 0x40b2 <SetFire()+0x40>
    40f4:	86 e0       	ldi	r24, 0x06	; 6
    40f6:	9f e3       	ldi	r25, 0x3F	; 63
    40f8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    40fc:	da cf       	rjmp	.-76     	; 0x40b2 <SetFire()+0x40>
    40fe:	87 33       	cpi	r24, 0x37	; 55
    4100:	09 f4       	brne	.+2      	; 0x4104 <SetFire()+0x92>
    4102:	90 c0       	rjmp	.+288    	; 0x4224 <SetFire()+0x1b2>
    4104:	d0 f4       	brcc	.+52     	; 0x413a <SetFire()+0xc8>
    4106:	88 32       	cpi	r24, 0x28	; 40
    4108:	09 f4       	brne	.+2      	; 0x410c <SetFire()+0x9a>
    410a:	79 c0       	rjmp	.+242    	; 0x41fe <SetFire()+0x18c>
    410c:	50 f4       	brcc	.+20     	; 0x4122 <SetFire()+0xb0>
    410e:	44 ef       	ldi	r20, 0xF4	; 244
    4110:	51 e0       	ldi	r21, 0x01	; 1
    4112:	68 e2       	ldi	r22, 0x28	; 40
    4114:	83 32       	cpi	r24, 0x23	; 35
    4116:	69 f6       	brne	.-102    	; 0x40b2 <SetFire()+0x40>
    4118:	86 e0       	ldi	r24, 0x06	; 6
    411a:	9f e3       	ldi	r25, 0x3F	; 63
    411c:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    4120:	c8 cf       	rjmp	.-112    	; 0x40b2 <SetFire()+0x40>
    4122:	8d 32       	cpi	r24, 0x2D	; 45
    4124:	09 f4       	brne	.+2      	; 0x4128 <SetFire()+0xb6>
    4126:	78 c0       	rjmp	.+240    	; 0x4218 <SetFire()+0x1a6>
    4128:	82 33       	cpi	r24, 0x32	; 50
    412a:	19 f6       	brne	.-122    	; 0x40b2 <SetFire()+0x40>
    412c:	47 e3       	ldi	r20, 0x37	; 55
    412e:	67 e0       	ldi	r22, 0x07	; 7
    4130:	8d ef       	ldi	r24, 0xFD	; 253
    4132:	9e e3       	ldi	r25, 0x3E	; 62
    4134:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4138:	bc cf       	rjmp	.-136    	; 0x40b2 <SetFire()+0x40>
    413a:	81 34       	cpi	r24, 0x41	; 65
    413c:	09 f4       	brne	.+2      	; 0x4140 <SetFire()+0xce>
    413e:	76 c0       	rjmp	.+236    	; 0x422c <SetFire()+0x1ba>
    4140:	90 f4       	brcc	.+36     	; 0x4166 <SetFire()+0xf4>
    4142:	8c 33       	cpi	r24, 0x3C	; 60
    4144:	09 f0       	breq	.+2      	; 0x4148 <SetFire()+0xd6>
    4146:	b5 cf       	rjmp	.-150    	; 0x40b2 <SetFire()+0x40>
    4148:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    414c:	7c 01       	movw	r14, r24
    414e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4152:	8c 01       	movw	r16, r24
    4154:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4158:	9c 01       	movw	r18, r24
    415a:	4b e4       	ldi	r20, 0x4B	; 75
    415c:	50 e0       	ldi	r21, 0x00	; 0
    415e:	61 e4       	ldi	r22, 0x41	; 65
    4160:	84 e4       	ldi	r24, 0x44	; 68
    4162:	9f e2       	ldi	r25, 0x2F	; 47
    4164:	44 c0       	rjmp	.+136    	; 0x41ee <SetFire()+0x17c>
    4166:	86 34       	cpi	r24, 0x46	; 70
    4168:	09 f4       	brne	.+2      	; 0x416c <SetFire()+0xfa>
    416a:	65 c0       	rjmp	.+202    	; 0x4236 <SetFire()+0x1c4>
    416c:	84 36       	cpi	r24, 0x64	; 100
    416e:	09 f0       	breq	.+2      	; 0x4172 <SetFire()+0x100>
    4170:	a0 cf       	rjmp	.-192    	; 0x40b2 <SetFire()+0x40>
    4172:	60 e0       	ldi	r22, 0x00	; 0
    4174:	8f e0       	ldi	r24, 0x0F	; 15
    4176:	90 e1       	ldi	r25, 0x10	; 16
    4178:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    417c:	80 e0       	ldi	r24, 0x00	; 0
    417e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <switchToSong(unsigned char)>
    4182:	97 cf       	rjmp	.-210    	; 0x40b2 <SetFire()+0x40>
    4184:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    4188:	7c 01       	movw	r14, r24
    418a:	60 ef       	ldi	r22, 0xF0	; 240
    418c:	71 e0       	ldi	r23, 0x01	; 1
    418e:	ce 01       	movw	r24, r28
    4190:	01 96       	adiw	r24, 0x01	; 1
    4192:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    4196:	01 e0       	ldi	r16, 0x01	; 1
    4198:	97 01       	movw	r18, r14
    419a:	4b e4       	ldi	r20, 0x4B	; 75
    419c:	50 e0       	ldi	r21, 0x00	; 0
    419e:	6e e0       	ldi	r22, 0x0E	; 14
    41a0:	7d e3       	ldi	r23, 0x3D	; 61
    41a2:	ce 01       	movw	r24, r28
    41a4:	01 96       	adiw	r24, 0x01	; 1
    41a6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    41aa:	ce 01       	movw	r24, r28
    41ac:	01 96       	adiw	r24, 0x01	; 1
    41ae:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    41b2:	7f cf       	rjmp	.-258    	; 0x40b2 <SetFire()+0x40>
    41b4:	42 e0       	ldi	r20, 0x02	; 2
    41b6:	63 e0       	ldi	r22, 0x03	; 3
    41b8:	83 e8       	ldi	r24, 0x83	; 131
    41ba:	9f e1       	ldi	r25, 0x1F	; 31
    41bc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    41c0:	78 cf       	rjmp	.-272    	; 0x40b2 <SetFire()+0x40>
    41c2:	44 ef       	ldi	r20, 0xF4	; 244
    41c4:	51 e0       	ldi	r21, 0x01	; 1
    41c6:	6a e0       	ldi	r22, 0x0A	; 10
    41c8:	95 cf       	rjmp	.-214    	; 0x40f4 <SetFire()+0x82>
    41ca:	44 ef       	ldi	r20, 0xF4	; 244
    41cc:	51 e0       	ldi	r21, 0x01	; 1
    41ce:	64 e1       	ldi	r22, 0x14	; 20
    41d0:	a3 cf       	rjmp	.-186    	; 0x4118 <SetFire()+0xa6>
    41d2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    41d6:	7c 01       	movw	r14, r24
    41d8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    41dc:	8c 01       	movw	r16, r24
    41de:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    41e2:	9c 01       	movw	r18, r24
    41e4:	4b e4       	ldi	r20, 0x4B	; 75
    41e6:	50 e0       	ldi	r21, 0x00	; 0
    41e8:	69 e1       	ldi	r22, 0x19	; 25
    41ea:	86 e0       	ldi	r24, 0x06	; 6
    41ec:	9f e3       	ldi	r25, 0x3F	; 63
    41ee:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    41f2:	5f cf       	rjmp	.-322    	; 0x40b2 <SetFire()+0x40>
    41f4:	43 e2       	ldi	r20, 0x23	; 35
    41f6:	64 e0       	ldi	r22, 0x04	; 4
    41f8:	86 e0       	ldi	r24, 0x06	; 6
    41fa:	9f e3       	ldi	r25, 0x3F	; 63
    41fc:	df cf       	rjmp	.-66     	; 0x41bc <SetFire()+0x14a>
    41fe:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4202:	7c 01       	movw	r14, r24
    4204:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4208:	8c 01       	movw	r16, r24
    420a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    420e:	9c 01       	movw	r18, r24
    4210:	4b e4       	ldi	r20, 0x4B	; 75
    4212:	50 e0       	ldi	r21, 0x00	; 0
    4214:	6d e2       	ldi	r22, 0x2D	; 45
    4216:	e9 cf       	rjmp	.-46     	; 0x41ea <SetFire()+0x178>
    4218:	62 e3       	ldi	r22, 0x32	; 50
    421a:	82 e7       	ldi	r24, 0x72	; 114
    421c:	9f e1       	ldi	r25, 0x1F	; 31
    421e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    4222:	47 cf       	rjmp	.-370    	; 0x40b2 <SetFire()+0x40>
    4224:	44 ef       	ldi	r20, 0xF4	; 244
    4226:	51 e0       	ldi	r21, 0x01	; 1
    4228:	6c e3       	ldi	r22, 0x3C	; 60
    422a:	76 cf       	rjmp	.-276    	; 0x4118 <SetFire()+0xa6>
    422c:	46 e4       	ldi	r20, 0x46	; 70
    422e:	6c e0       	ldi	r22, 0x0C	; 12
    4230:	89 eb       	ldi	r24, 0xB9	; 185
    4232:	9f e0       	ldi	r25, 0x0F	; 15
    4234:	7f cf       	rjmp	.-258    	; 0x4134 <SetFire()+0xc2>
    4236:	64 e6       	ldi	r22, 0x64	; 100
    4238:	80 e1       	ldi	r24, 0x10	; 16
    423a:	97 e2       	ldi	r25, 0x27	; 39
    423c:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    4240:	38 cf       	rjmp	.-400    	; 0x40b2 <SetFire()+0x40>

00004242 <Chandelier()>:
    4242:	ef 92       	push	r14
    4244:	ff 92       	push	r15
    4246:	0f 93       	push	r16
    4248:	1f 93       	push	r17
    424a:	cf 93       	push	r28
    424c:	df 93       	push	r29
    424e:	00 d0       	rcall	.+0      	; 0x4250 <Chandelier()+0xe>
    4250:	00 d0       	rcall	.+0      	; 0x4252 <Chandelier()+0x10>
    4252:	00 d0       	rcall	.+0      	; 0x4254 <Chandelier()+0x12>
    4254:	1f 92       	push	r1
    4256:	cd b7       	in	r28, 0x3d	; 61
    4258:	de b7       	in	r29, 0x3e	; 62
    425a:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    425e:	8e 31       	cpi	r24, 0x1E	; 30
    4260:	09 f4       	brne	.+2      	; 0x4264 <Chandelier()+0x22>
    4262:	b0 c0       	rjmp	.+352    	; 0x43c4 <Chandelier()+0x182>
    4264:	a0 f5       	brcc	.+104    	; 0x42ce <Chandelier()+0x8c>
    4266:	85 30       	cpi	r24, 0x05	; 5
    4268:	09 f4       	brne	.+2      	; 0x426c <Chandelier()+0x2a>
    426a:	93 c0       	rjmp	.+294    	; 0x4392 <Chandelier()+0x150>
    426c:	b8 f4       	brcc	.+46     	; 0x429c <Chandelier()+0x5a>
    426e:	81 30       	cpi	r24, 0x01	; 1
    4270:	09 f4       	brne	.+2      	; 0x4274 <Chandelier()+0x32>
    4272:	88 c0       	rjmp	.+272    	; 0x4384 <Chandelier()+0x142>
    4274:	08 f4       	brcc	.+2      	; 0x4278 <Chandelier()+0x36>
    4276:	6e c0       	rjmp	.+220    	; 0x4354 <Chandelier()+0x112>
    4278:	45 e0       	ldi	r20, 0x05	; 5
    427a:	64 e0       	ldi	r22, 0x04	; 4
    427c:	82 30       	cpi	r24, 0x02	; 2
    427e:	09 f4       	brne	.+2      	; 0x4282 <Chandelier()+0x40>
    4280:	83 c0       	rjmp	.+262    	; 0x4388 <Chandelier()+0x146>
    4282:	27 96       	adiw	r28, 0x07	; 7
    4284:	0f b6       	in	r0, 0x3f	; 63
    4286:	f8 94       	cli
    4288:	de bf       	out	0x3e, r29	; 62
    428a:	0f be       	out	0x3f, r0	; 63
    428c:	cd bf       	out	0x3d, r28	; 61
    428e:	df 91       	pop	r29
    4290:	cf 91       	pop	r28
    4292:	1f 91       	pop	r17
    4294:	0f 91       	pop	r16
    4296:	ff 90       	pop	r15
    4298:	ef 90       	pop	r14
    429a:	08 95       	ret
    429c:	8f 30       	cpi	r24, 0x0F	; 15
    429e:	09 f4       	brne	.+2      	; 0x42a2 <Chandelier()+0x60>
    42a0:	7c c0       	rjmp	.+248    	; 0x439a <Chandelier()+0x158>
    42a2:	40 f4       	brcc	.+16     	; 0x42b4 <Chandelier()+0x72>
    42a4:	8a 30       	cpi	r24, 0x0A	; 10
    42a6:	69 f7       	brne	.-38     	; 0x4282 <Chandelier()+0x40>
    42a8:	6f e0       	ldi	r22, 0x0F	; 15
    42aa:	86 e0       	ldi	r24, 0x06	; 6
    42ac:	9f e3       	ldi	r25, 0x3F	; 63
    42ae:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    42b2:	e7 cf       	rjmp	.-50     	; 0x4282 <Chandelier()+0x40>
    42b4:	84 31       	cpi	r24, 0x14	; 20
    42b6:	09 f4       	brne	.+2      	; 0x42ba <Chandelier()+0x78>
    42b8:	74 c0       	rjmp	.+232    	; 0x43a2 <Chandelier()+0x160>
    42ba:	44 ef       	ldi	r20, 0xF4	; 244
    42bc:	51 e0       	ldi	r21, 0x01	; 1
    42be:	6e e1       	ldi	r22, 0x1E	; 30
    42c0:	89 31       	cpi	r24, 0x19	; 25
    42c2:	f9 f6       	brne	.-66     	; 0x4282 <Chandelier()+0x40>
    42c4:	86 e0       	ldi	r24, 0x06	; 6
    42c6:	9f e3       	ldi	r25, 0x3F	; 63
    42c8:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    42cc:	da cf       	rjmp	.-76     	; 0x4282 <Chandelier()+0x40>
    42ce:	87 33       	cpi	r24, 0x37	; 55
    42d0:	09 f4       	brne	.+2      	; 0x42d4 <Chandelier()+0x92>
    42d2:	90 c0       	rjmp	.+288    	; 0x43f4 <Chandelier()+0x1b2>
    42d4:	d0 f4       	brcc	.+52     	; 0x430a <Chandelier()+0xc8>
    42d6:	88 32       	cpi	r24, 0x28	; 40
    42d8:	09 f4       	brne	.+2      	; 0x42dc <Chandelier()+0x9a>
    42da:	79 c0       	rjmp	.+242    	; 0x43ce <Chandelier()+0x18c>
    42dc:	50 f4       	brcc	.+20     	; 0x42f2 <Chandelier()+0xb0>
    42de:	44 ef       	ldi	r20, 0xF4	; 244
    42e0:	51 e0       	ldi	r21, 0x01	; 1
    42e2:	68 e2       	ldi	r22, 0x28	; 40
    42e4:	83 32       	cpi	r24, 0x23	; 35
    42e6:	69 f6       	brne	.-102    	; 0x4282 <Chandelier()+0x40>
    42e8:	86 e0       	ldi	r24, 0x06	; 6
    42ea:	9f e3       	ldi	r25, 0x3F	; 63
    42ec:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    42f0:	c8 cf       	rjmp	.-112    	; 0x4282 <Chandelier()+0x40>
    42f2:	8d 32       	cpi	r24, 0x2D	; 45
    42f4:	09 f4       	brne	.+2      	; 0x42f8 <Chandelier()+0xb6>
    42f6:	78 c0       	rjmp	.+240    	; 0x43e8 <Chandelier()+0x1a6>
    42f8:	82 33       	cpi	r24, 0x32	; 50
    42fa:	19 f6       	brne	.-122    	; 0x4282 <Chandelier()+0x40>
    42fc:	47 e3       	ldi	r20, 0x37	; 55
    42fe:	67 e0       	ldi	r22, 0x07	; 7
    4300:	8d ef       	ldi	r24, 0xFD	; 253
    4302:	9e e3       	ldi	r25, 0x3E	; 62
    4304:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4308:	bc cf       	rjmp	.-136    	; 0x4282 <Chandelier()+0x40>
    430a:	81 34       	cpi	r24, 0x41	; 65
    430c:	09 f4       	brne	.+2      	; 0x4310 <Chandelier()+0xce>
    430e:	76 c0       	rjmp	.+236    	; 0x43fc <Chandelier()+0x1ba>
    4310:	90 f4       	brcc	.+36     	; 0x4336 <Chandelier()+0xf4>
    4312:	8c 33       	cpi	r24, 0x3C	; 60
    4314:	09 f0       	breq	.+2      	; 0x4318 <Chandelier()+0xd6>
    4316:	b5 cf       	rjmp	.-150    	; 0x4282 <Chandelier()+0x40>
    4318:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    431c:	7c 01       	movw	r14, r24
    431e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4322:	8c 01       	movw	r16, r24
    4324:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4328:	9c 01       	movw	r18, r24
    432a:	4b e4       	ldi	r20, 0x4B	; 75
    432c:	50 e0       	ldi	r21, 0x00	; 0
    432e:	61 e4       	ldi	r22, 0x41	; 65
    4330:	84 e4       	ldi	r24, 0x44	; 68
    4332:	9f e2       	ldi	r25, 0x2F	; 47
    4334:	44 c0       	rjmp	.+136    	; 0x43be <Chandelier()+0x17c>
    4336:	86 34       	cpi	r24, 0x46	; 70
    4338:	09 f4       	brne	.+2      	; 0x433c <Chandelier()+0xfa>
    433a:	65 c0       	rjmp	.+202    	; 0x4406 <Chandelier()+0x1c4>
    433c:	84 36       	cpi	r24, 0x64	; 100
    433e:	09 f0       	breq	.+2      	; 0x4342 <Chandelier()+0x100>
    4340:	a0 cf       	rjmp	.-192    	; 0x4282 <Chandelier()+0x40>
    4342:	60 e0       	ldi	r22, 0x00	; 0
    4344:	8f e0       	ldi	r24, 0x0F	; 15
    4346:	90 e1       	ldi	r25, 0x10	; 16
    4348:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    434c:	80 e0       	ldi	r24, 0x00	; 0
    434e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <switchToSong(unsigned char)>
    4352:	97 cf       	rjmp	.-210    	; 0x4282 <Chandelier()+0x40>
    4354:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    4358:	7c 01       	movw	r14, r24
    435a:	6e e0       	ldi	r22, 0x0E	; 14
    435c:	72 e0       	ldi	r23, 0x02	; 2
    435e:	ce 01       	movw	r24, r28
    4360:	01 96       	adiw	r24, 0x01	; 1
    4362:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    4366:	01 e0       	ldi	r16, 0x01	; 1
    4368:	97 01       	movw	r18, r14
    436a:	4b e4       	ldi	r20, 0x4B	; 75
    436c:	50 e0       	ldi	r21, 0x00	; 0
    436e:	6e e0       	ldi	r22, 0x0E	; 14
    4370:	7d e3       	ldi	r23, 0x3D	; 61
    4372:	ce 01       	movw	r24, r28
    4374:	01 96       	adiw	r24, 0x01	; 1
    4376:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    437a:	ce 01       	movw	r24, r28
    437c:	01 96       	adiw	r24, 0x01	; 1
    437e:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    4382:	7f cf       	rjmp	.-258    	; 0x4282 <Chandelier()+0x40>
    4384:	42 e0       	ldi	r20, 0x02	; 2
    4386:	63 e0       	ldi	r22, 0x03	; 3
    4388:	83 e8       	ldi	r24, 0x83	; 131
    438a:	9f e1       	ldi	r25, 0x1F	; 31
    438c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    4390:	78 cf       	rjmp	.-272    	; 0x4282 <Chandelier()+0x40>
    4392:	44 ef       	ldi	r20, 0xF4	; 244
    4394:	51 e0       	ldi	r21, 0x01	; 1
    4396:	6a e0       	ldi	r22, 0x0A	; 10
    4398:	95 cf       	rjmp	.-214    	; 0x42c4 <Chandelier()+0x82>
    439a:	44 ef       	ldi	r20, 0xF4	; 244
    439c:	51 e0       	ldi	r21, 0x01	; 1
    439e:	64 e1       	ldi	r22, 0x14	; 20
    43a0:	a3 cf       	rjmp	.-186    	; 0x42e8 <Chandelier()+0xa6>
    43a2:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    43a6:	7c 01       	movw	r14, r24
    43a8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    43ac:	8c 01       	movw	r16, r24
    43ae:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    43b2:	9c 01       	movw	r18, r24
    43b4:	4b e4       	ldi	r20, 0x4B	; 75
    43b6:	50 e0       	ldi	r21, 0x00	; 0
    43b8:	69 e1       	ldi	r22, 0x19	; 25
    43ba:	86 e0       	ldi	r24, 0x06	; 6
    43bc:	9f e3       	ldi	r25, 0x3F	; 63
    43be:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    43c2:	5f cf       	rjmp	.-322    	; 0x4282 <Chandelier()+0x40>
    43c4:	43 e2       	ldi	r20, 0x23	; 35
    43c6:	64 e0       	ldi	r22, 0x04	; 4
    43c8:	86 e0       	ldi	r24, 0x06	; 6
    43ca:	9f e3       	ldi	r25, 0x3F	; 63
    43cc:	df cf       	rjmp	.-66     	; 0x438c <Chandelier()+0x14a>
    43ce:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    43d2:	7c 01       	movw	r14, r24
    43d4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    43d8:	8c 01       	movw	r16, r24
    43da:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    43de:	9c 01       	movw	r18, r24
    43e0:	4b e4       	ldi	r20, 0x4B	; 75
    43e2:	50 e0       	ldi	r21, 0x00	; 0
    43e4:	6d e2       	ldi	r22, 0x2D	; 45
    43e6:	e9 cf       	rjmp	.-46     	; 0x43ba <Chandelier()+0x178>
    43e8:	62 e3       	ldi	r22, 0x32	; 50
    43ea:	82 e7       	ldi	r24, 0x72	; 114
    43ec:	9f e1       	ldi	r25, 0x1F	; 31
    43ee:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    43f2:	47 cf       	rjmp	.-370    	; 0x4282 <Chandelier()+0x40>
    43f4:	44 ef       	ldi	r20, 0xF4	; 244
    43f6:	51 e0       	ldi	r21, 0x01	; 1
    43f8:	6c e3       	ldi	r22, 0x3C	; 60
    43fa:	76 cf       	rjmp	.-276    	; 0x42e8 <Chandelier()+0xa6>
    43fc:	46 e4       	ldi	r20, 0x46	; 70
    43fe:	6c e0       	ldi	r22, 0x0C	; 12
    4400:	89 eb       	ldi	r24, 0xB9	; 185
    4402:	9f e0       	ldi	r25, 0x0F	; 15
    4404:	7f cf       	rjmp	.-258    	; 0x4304 <Chandelier()+0xc2>
    4406:	64 e6       	ldi	r22, 0x64	; 100
    4408:	80 e1       	ldi	r24, 0x10	; 16
    440a:	97 e2       	ldi	r25, 0x27	; 39
    440c:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    4410:	38 cf       	rjmp	.-400    	; 0x4282 <Chandelier()+0x40>

00004412 <Titanium()>:
    4412:	ef 92       	push	r14
    4414:	ff 92       	push	r15
    4416:	0f 93       	push	r16
    4418:	1f 93       	push	r17
    441a:	cf 93       	push	r28
    441c:	df 93       	push	r29
    441e:	00 d0       	rcall	.+0      	; 0x4420 <Titanium()+0xe>
    4420:	00 d0       	rcall	.+0      	; 0x4422 <Titanium()+0x10>
    4422:	00 d0       	rcall	.+0      	; 0x4424 <Titanium()+0x12>
    4424:	1f 92       	push	r1
    4426:	cd b7       	in	r28, 0x3d	; 61
    4428:	de b7       	in	r29, 0x3e	; 62
    442a:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    442e:	8e 31       	cpi	r24, 0x1E	; 30
    4430:	09 f4       	brne	.+2      	; 0x4434 <Titanium()+0x22>
    4432:	b0 c0       	rjmp	.+352    	; 0x4594 <Titanium()+0x182>
    4434:	a0 f5       	brcc	.+104    	; 0x449e <Titanium()+0x8c>
    4436:	85 30       	cpi	r24, 0x05	; 5
    4438:	09 f4       	brne	.+2      	; 0x443c <Titanium()+0x2a>
    443a:	93 c0       	rjmp	.+294    	; 0x4562 <Titanium()+0x150>
    443c:	b8 f4       	brcc	.+46     	; 0x446c <Titanium()+0x5a>
    443e:	81 30       	cpi	r24, 0x01	; 1
    4440:	09 f4       	brne	.+2      	; 0x4444 <Titanium()+0x32>
    4442:	88 c0       	rjmp	.+272    	; 0x4554 <Titanium()+0x142>
    4444:	08 f4       	brcc	.+2      	; 0x4448 <Titanium()+0x36>
    4446:	6e c0       	rjmp	.+220    	; 0x4524 <Titanium()+0x112>
    4448:	45 e0       	ldi	r20, 0x05	; 5
    444a:	64 e0       	ldi	r22, 0x04	; 4
    444c:	82 30       	cpi	r24, 0x02	; 2
    444e:	09 f4       	brne	.+2      	; 0x4452 <Titanium()+0x40>
    4450:	83 c0       	rjmp	.+262    	; 0x4558 <Titanium()+0x146>
    4452:	27 96       	adiw	r28, 0x07	; 7
    4454:	0f b6       	in	r0, 0x3f	; 63
    4456:	f8 94       	cli
    4458:	de bf       	out	0x3e, r29	; 62
    445a:	0f be       	out	0x3f, r0	; 63
    445c:	cd bf       	out	0x3d, r28	; 61
    445e:	df 91       	pop	r29
    4460:	cf 91       	pop	r28
    4462:	1f 91       	pop	r17
    4464:	0f 91       	pop	r16
    4466:	ff 90       	pop	r15
    4468:	ef 90       	pop	r14
    446a:	08 95       	ret
    446c:	8f 30       	cpi	r24, 0x0F	; 15
    446e:	09 f4       	brne	.+2      	; 0x4472 <Titanium()+0x60>
    4470:	7c c0       	rjmp	.+248    	; 0x456a <Titanium()+0x158>
    4472:	40 f4       	brcc	.+16     	; 0x4484 <Titanium()+0x72>
    4474:	8a 30       	cpi	r24, 0x0A	; 10
    4476:	69 f7       	brne	.-38     	; 0x4452 <Titanium()+0x40>
    4478:	6f e0       	ldi	r22, 0x0F	; 15
    447a:	86 e0       	ldi	r24, 0x06	; 6
    447c:	9f e3       	ldi	r25, 0x3F	; 63
    447e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    4482:	e7 cf       	rjmp	.-50     	; 0x4452 <Titanium()+0x40>
    4484:	84 31       	cpi	r24, 0x14	; 20
    4486:	09 f4       	brne	.+2      	; 0x448a <Titanium()+0x78>
    4488:	74 c0       	rjmp	.+232    	; 0x4572 <Titanium()+0x160>
    448a:	44 ef       	ldi	r20, 0xF4	; 244
    448c:	51 e0       	ldi	r21, 0x01	; 1
    448e:	6e e1       	ldi	r22, 0x1E	; 30
    4490:	89 31       	cpi	r24, 0x19	; 25
    4492:	f9 f6       	brne	.-66     	; 0x4452 <Titanium()+0x40>
    4494:	86 e0       	ldi	r24, 0x06	; 6
    4496:	9f e3       	ldi	r25, 0x3F	; 63
    4498:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    449c:	da cf       	rjmp	.-76     	; 0x4452 <Titanium()+0x40>
    449e:	87 33       	cpi	r24, 0x37	; 55
    44a0:	09 f4       	brne	.+2      	; 0x44a4 <Titanium()+0x92>
    44a2:	90 c0       	rjmp	.+288    	; 0x45c4 <Titanium()+0x1b2>
    44a4:	d0 f4       	brcc	.+52     	; 0x44da <Titanium()+0xc8>
    44a6:	88 32       	cpi	r24, 0x28	; 40
    44a8:	09 f4       	brne	.+2      	; 0x44ac <Titanium()+0x9a>
    44aa:	79 c0       	rjmp	.+242    	; 0x459e <Titanium()+0x18c>
    44ac:	50 f4       	brcc	.+20     	; 0x44c2 <Titanium()+0xb0>
    44ae:	44 ef       	ldi	r20, 0xF4	; 244
    44b0:	51 e0       	ldi	r21, 0x01	; 1
    44b2:	68 e2       	ldi	r22, 0x28	; 40
    44b4:	83 32       	cpi	r24, 0x23	; 35
    44b6:	69 f6       	brne	.-102    	; 0x4452 <Titanium()+0x40>
    44b8:	86 e0       	ldi	r24, 0x06	; 6
    44ba:	9f e3       	ldi	r25, 0x3F	; 63
    44bc:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    44c0:	c8 cf       	rjmp	.-112    	; 0x4452 <Titanium()+0x40>
    44c2:	8d 32       	cpi	r24, 0x2D	; 45
    44c4:	09 f4       	brne	.+2      	; 0x44c8 <Titanium()+0xb6>
    44c6:	78 c0       	rjmp	.+240    	; 0x45b8 <Titanium()+0x1a6>
    44c8:	82 33       	cpi	r24, 0x32	; 50
    44ca:	19 f6       	brne	.-122    	; 0x4452 <Titanium()+0x40>
    44cc:	47 e3       	ldi	r20, 0x37	; 55
    44ce:	67 e0       	ldi	r22, 0x07	; 7
    44d0:	8d ef       	ldi	r24, 0xFD	; 253
    44d2:	9e e3       	ldi	r25, 0x3E	; 62
    44d4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    44d8:	bc cf       	rjmp	.-136    	; 0x4452 <Titanium()+0x40>
    44da:	81 34       	cpi	r24, 0x41	; 65
    44dc:	09 f4       	brne	.+2      	; 0x44e0 <Titanium()+0xce>
    44de:	76 c0       	rjmp	.+236    	; 0x45cc <Titanium()+0x1ba>
    44e0:	90 f4       	brcc	.+36     	; 0x4506 <Titanium()+0xf4>
    44e2:	8c 33       	cpi	r24, 0x3C	; 60
    44e4:	09 f0       	breq	.+2      	; 0x44e8 <Titanium()+0xd6>
    44e6:	b5 cf       	rjmp	.-150    	; 0x4452 <Titanium()+0x40>
    44e8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    44ec:	7c 01       	movw	r14, r24
    44ee:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    44f2:	8c 01       	movw	r16, r24
    44f4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    44f8:	9c 01       	movw	r18, r24
    44fa:	4b e4       	ldi	r20, 0x4B	; 75
    44fc:	50 e0       	ldi	r21, 0x00	; 0
    44fe:	61 e4       	ldi	r22, 0x41	; 65
    4500:	84 e4       	ldi	r24, 0x44	; 68
    4502:	9f e2       	ldi	r25, 0x2F	; 47
    4504:	44 c0       	rjmp	.+136    	; 0x458e <Titanium()+0x17c>
    4506:	86 34       	cpi	r24, 0x46	; 70
    4508:	09 f4       	brne	.+2      	; 0x450c <Titanium()+0xfa>
    450a:	65 c0       	rjmp	.+202    	; 0x45d6 <Titanium()+0x1c4>
    450c:	84 36       	cpi	r24, 0x64	; 100
    450e:	09 f0       	breq	.+2      	; 0x4512 <Titanium()+0x100>
    4510:	a0 cf       	rjmp	.-192    	; 0x4452 <Titanium()+0x40>
    4512:	60 e0       	ldi	r22, 0x00	; 0
    4514:	8f e0       	ldi	r24, 0x0F	; 15
    4516:	90 e1       	ldi	r25, 0x10	; 16
    4518:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    451c:	80 e0       	ldi	r24, 0x00	; 0
    451e:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <switchToSong(unsigned char)>
    4522:	97 cf       	rjmp	.-210    	; 0x4452 <Titanium()+0x40>
    4524:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    4528:	7c 01       	movw	r14, r24
    452a:	60 e2       	ldi	r22, 0x20	; 32
    452c:	72 e0       	ldi	r23, 0x02	; 2
    452e:	ce 01       	movw	r24, r28
    4530:	01 96       	adiw	r24, 0x01	; 1
    4532:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    4536:	01 e0       	ldi	r16, 0x01	; 1
    4538:	97 01       	movw	r18, r14
    453a:	4b e4       	ldi	r20, 0x4B	; 75
    453c:	50 e0       	ldi	r21, 0x00	; 0
    453e:	6e e0       	ldi	r22, 0x0E	; 14
    4540:	7d e3       	ldi	r23, 0x3D	; 61
    4542:	ce 01       	movw	r24, r28
    4544:	01 96       	adiw	r24, 0x01	; 1
    4546:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    454a:	ce 01       	movw	r24, r28
    454c:	01 96       	adiw	r24, 0x01	; 1
    454e:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    4552:	7f cf       	rjmp	.-258    	; 0x4452 <Titanium()+0x40>
    4554:	42 e0       	ldi	r20, 0x02	; 2
    4556:	63 e0       	ldi	r22, 0x03	; 3
    4558:	83 e8       	ldi	r24, 0x83	; 131
    455a:	9f e1       	ldi	r25, 0x1F	; 31
    455c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    4560:	78 cf       	rjmp	.-272    	; 0x4452 <Titanium()+0x40>
    4562:	44 ef       	ldi	r20, 0xF4	; 244
    4564:	51 e0       	ldi	r21, 0x01	; 1
    4566:	6a e0       	ldi	r22, 0x0A	; 10
    4568:	95 cf       	rjmp	.-214    	; 0x4494 <Titanium()+0x82>
    456a:	44 ef       	ldi	r20, 0xF4	; 244
    456c:	51 e0       	ldi	r21, 0x01	; 1
    456e:	64 e1       	ldi	r22, 0x14	; 20
    4570:	a3 cf       	rjmp	.-186    	; 0x44b8 <Titanium()+0xa6>
    4572:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4576:	7c 01       	movw	r14, r24
    4578:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    457c:	8c 01       	movw	r16, r24
    457e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4582:	9c 01       	movw	r18, r24
    4584:	4b e4       	ldi	r20, 0x4B	; 75
    4586:	50 e0       	ldi	r21, 0x00	; 0
    4588:	69 e1       	ldi	r22, 0x19	; 25
    458a:	86 e0       	ldi	r24, 0x06	; 6
    458c:	9f e3       	ldi	r25, 0x3F	; 63
    458e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4592:	5f cf       	rjmp	.-322    	; 0x4452 <Titanium()+0x40>
    4594:	43 e2       	ldi	r20, 0x23	; 35
    4596:	64 e0       	ldi	r22, 0x04	; 4
    4598:	86 e0       	ldi	r24, 0x06	; 6
    459a:	9f e3       	ldi	r25, 0x3F	; 63
    459c:	df cf       	rjmp	.-66     	; 0x455c <Titanium()+0x14a>
    459e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    45a2:	7c 01       	movw	r14, r24
    45a4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    45a8:	8c 01       	movw	r16, r24
    45aa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    45ae:	9c 01       	movw	r18, r24
    45b0:	4b e4       	ldi	r20, 0x4B	; 75
    45b2:	50 e0       	ldi	r21, 0x00	; 0
    45b4:	6d e2       	ldi	r22, 0x2D	; 45
    45b6:	e9 cf       	rjmp	.-46     	; 0x458a <Titanium()+0x178>
    45b8:	62 e3       	ldi	r22, 0x32	; 50
    45ba:	82 e7       	ldi	r24, 0x72	; 114
    45bc:	9f e1       	ldi	r25, 0x1F	; 31
    45be:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    45c2:	47 cf       	rjmp	.-370    	; 0x4452 <Titanium()+0x40>
    45c4:	44 ef       	ldi	r20, 0xF4	; 244
    45c6:	51 e0       	ldi	r21, 0x01	; 1
    45c8:	6c e3       	ldi	r22, 0x3C	; 60
    45ca:	76 cf       	rjmp	.-276    	; 0x44b8 <Titanium()+0xa6>
    45cc:	46 e4       	ldi	r20, 0x46	; 70
    45ce:	6c e0       	ldi	r22, 0x0C	; 12
    45d0:	89 eb       	ldi	r24, 0xB9	; 185
    45d2:	9f e0       	ldi	r25, 0x0F	; 15
    45d4:	7f cf       	rjmp	.-258    	; 0x44d4 <Titanium()+0xc2>
    45d6:	64 e6       	ldi	r22, 0x64	; 100
    45d8:	80 e1       	ldi	r24, 0x10	; 16
    45da:	97 e2       	ldi	r25, 0x27	; 39
    45dc:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    45e0:	38 cf       	rjmp	.-400    	; 0x4452 <Titanium()+0x40>

000045e2 <SomeoneYouLoved()>:
    45e2:	ef 92       	push	r14
    45e4:	ff 92       	push	r15
    45e6:	0f 93       	push	r16
    45e8:	1f 93       	push	r17
    45ea:	cf 93       	push	r28
    45ec:	df 93       	push	r29
    45ee:	00 d0       	rcall	.+0      	; 0x45f0 <SomeoneYouLoved()+0xe>
    45f0:	00 d0       	rcall	.+0      	; 0x45f2 <SomeoneYouLoved()+0x10>
    45f2:	00 d0       	rcall	.+0      	; 0x45f4 <SomeoneYouLoved()+0x12>
    45f4:	1f 92       	push	r1
    45f6:	cd b7       	in	r28, 0x3d	; 61
    45f8:	de b7       	in	r29, 0x3e	; 62
    45fa:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    45fe:	8e 31       	cpi	r24, 0x1E	; 30
    4600:	09 f4       	brne	.+2      	; 0x4604 <SomeoneYouLoved()+0x22>
    4602:	b0 c0       	rjmp	.+352    	; 0x4764 <SomeoneYouLoved()+0x182>
    4604:	a0 f5       	brcc	.+104    	; 0x466e <SomeoneYouLoved()+0x8c>
    4606:	85 30       	cpi	r24, 0x05	; 5
    4608:	09 f4       	brne	.+2      	; 0x460c <SomeoneYouLoved()+0x2a>
    460a:	93 c0       	rjmp	.+294    	; 0x4732 <SomeoneYouLoved()+0x150>
    460c:	b8 f4       	brcc	.+46     	; 0x463c <SomeoneYouLoved()+0x5a>
    460e:	81 30       	cpi	r24, 0x01	; 1
    4610:	09 f4       	brne	.+2      	; 0x4614 <SomeoneYouLoved()+0x32>
    4612:	88 c0       	rjmp	.+272    	; 0x4724 <SomeoneYouLoved()+0x142>
    4614:	08 f4       	brcc	.+2      	; 0x4618 <SomeoneYouLoved()+0x36>
    4616:	6e c0       	rjmp	.+220    	; 0x46f4 <SomeoneYouLoved()+0x112>
    4618:	45 e0       	ldi	r20, 0x05	; 5
    461a:	64 e0       	ldi	r22, 0x04	; 4
    461c:	82 30       	cpi	r24, 0x02	; 2
    461e:	09 f4       	brne	.+2      	; 0x4622 <SomeoneYouLoved()+0x40>
    4620:	83 c0       	rjmp	.+262    	; 0x4728 <SomeoneYouLoved()+0x146>
    4622:	27 96       	adiw	r28, 0x07	; 7
    4624:	0f b6       	in	r0, 0x3f	; 63
    4626:	f8 94       	cli
    4628:	de bf       	out	0x3e, r29	; 62
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	cd bf       	out	0x3d, r28	; 61
    462e:	df 91       	pop	r29
    4630:	cf 91       	pop	r28
    4632:	1f 91       	pop	r17
    4634:	0f 91       	pop	r16
    4636:	ff 90       	pop	r15
    4638:	ef 90       	pop	r14
    463a:	08 95       	ret
    463c:	8f 30       	cpi	r24, 0x0F	; 15
    463e:	09 f4       	brne	.+2      	; 0x4642 <SomeoneYouLoved()+0x60>
    4640:	7c c0       	rjmp	.+248    	; 0x473a <SomeoneYouLoved()+0x158>
    4642:	40 f4       	brcc	.+16     	; 0x4654 <SomeoneYouLoved()+0x72>
    4644:	8a 30       	cpi	r24, 0x0A	; 10
    4646:	69 f7       	brne	.-38     	; 0x4622 <SomeoneYouLoved()+0x40>
    4648:	6f e0       	ldi	r22, 0x0F	; 15
    464a:	86 e0       	ldi	r24, 0x06	; 6
    464c:	9f e3       	ldi	r25, 0x3F	; 63
    464e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    4652:	e7 cf       	rjmp	.-50     	; 0x4622 <SomeoneYouLoved()+0x40>
    4654:	84 31       	cpi	r24, 0x14	; 20
    4656:	09 f4       	brne	.+2      	; 0x465a <SomeoneYouLoved()+0x78>
    4658:	74 c0       	rjmp	.+232    	; 0x4742 <SomeoneYouLoved()+0x160>
    465a:	44 ef       	ldi	r20, 0xF4	; 244
    465c:	51 e0       	ldi	r21, 0x01	; 1
    465e:	6e e1       	ldi	r22, 0x1E	; 30
    4660:	89 31       	cpi	r24, 0x19	; 25
    4662:	f9 f6       	brne	.-66     	; 0x4622 <SomeoneYouLoved()+0x40>
    4664:	86 e0       	ldi	r24, 0x06	; 6
    4666:	9f e3       	ldi	r25, 0x3F	; 63
    4668:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    466c:	da cf       	rjmp	.-76     	; 0x4622 <SomeoneYouLoved()+0x40>
    466e:	87 33       	cpi	r24, 0x37	; 55
    4670:	09 f4       	brne	.+2      	; 0x4674 <SomeoneYouLoved()+0x92>
    4672:	90 c0       	rjmp	.+288    	; 0x4794 <SomeoneYouLoved()+0x1b2>
    4674:	d0 f4       	brcc	.+52     	; 0x46aa <SomeoneYouLoved()+0xc8>
    4676:	88 32       	cpi	r24, 0x28	; 40
    4678:	09 f4       	brne	.+2      	; 0x467c <SomeoneYouLoved()+0x9a>
    467a:	79 c0       	rjmp	.+242    	; 0x476e <SomeoneYouLoved()+0x18c>
    467c:	50 f4       	brcc	.+20     	; 0x4692 <SomeoneYouLoved()+0xb0>
    467e:	44 ef       	ldi	r20, 0xF4	; 244
    4680:	51 e0       	ldi	r21, 0x01	; 1
    4682:	68 e2       	ldi	r22, 0x28	; 40
    4684:	83 32       	cpi	r24, 0x23	; 35
    4686:	69 f6       	brne	.-102    	; 0x4622 <SomeoneYouLoved()+0x40>
    4688:	86 e0       	ldi	r24, 0x06	; 6
    468a:	9f e3       	ldi	r25, 0x3F	; 63
    468c:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    4690:	c8 cf       	rjmp	.-112    	; 0x4622 <SomeoneYouLoved()+0x40>
    4692:	8d 32       	cpi	r24, 0x2D	; 45
    4694:	09 f4       	brne	.+2      	; 0x4698 <SomeoneYouLoved()+0xb6>
    4696:	78 c0       	rjmp	.+240    	; 0x4788 <SomeoneYouLoved()+0x1a6>
    4698:	82 33       	cpi	r24, 0x32	; 50
    469a:	19 f6       	brne	.-122    	; 0x4622 <SomeoneYouLoved()+0x40>
    469c:	47 e3       	ldi	r20, 0x37	; 55
    469e:	67 e0       	ldi	r22, 0x07	; 7
    46a0:	8d ef       	ldi	r24, 0xFD	; 253
    46a2:	9e e3       	ldi	r25, 0x3E	; 62
    46a4:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    46a8:	bc cf       	rjmp	.-136    	; 0x4622 <SomeoneYouLoved()+0x40>
    46aa:	81 34       	cpi	r24, 0x41	; 65
    46ac:	09 f4       	brne	.+2      	; 0x46b0 <SomeoneYouLoved()+0xce>
    46ae:	76 c0       	rjmp	.+236    	; 0x479c <SomeoneYouLoved()+0x1ba>
    46b0:	90 f4       	brcc	.+36     	; 0x46d6 <SomeoneYouLoved()+0xf4>
    46b2:	8c 33       	cpi	r24, 0x3C	; 60
    46b4:	09 f0       	breq	.+2      	; 0x46b8 <SomeoneYouLoved()+0xd6>
    46b6:	b5 cf       	rjmp	.-150    	; 0x4622 <SomeoneYouLoved()+0x40>
    46b8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    46bc:	7c 01       	movw	r14, r24
    46be:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    46c2:	8c 01       	movw	r16, r24
    46c4:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    46c8:	9c 01       	movw	r18, r24
    46ca:	4b e4       	ldi	r20, 0x4B	; 75
    46cc:	50 e0       	ldi	r21, 0x00	; 0
    46ce:	61 e4       	ldi	r22, 0x41	; 65
    46d0:	84 e4       	ldi	r24, 0x44	; 68
    46d2:	9f e2       	ldi	r25, 0x2F	; 47
    46d4:	44 c0       	rjmp	.+136    	; 0x475e <SomeoneYouLoved()+0x17c>
    46d6:	86 34       	cpi	r24, 0x46	; 70
    46d8:	09 f4       	brne	.+2      	; 0x46dc <SomeoneYouLoved()+0xfa>
    46da:	65 c0       	rjmp	.+202    	; 0x47a6 <SomeoneYouLoved()+0x1c4>
    46dc:	84 36       	cpi	r24, 0x64	; 100
    46de:	09 f0       	breq	.+2      	; 0x46e2 <SomeoneYouLoved()+0x100>
    46e0:	a0 cf       	rjmp	.-192    	; 0x4622 <SomeoneYouLoved()+0x40>
    46e2:	60 e0       	ldi	r22, 0x00	; 0
    46e4:	8f e0       	ldi	r24, 0x0F	; 15
    46e6:	90 e1       	ldi	r25, 0x10	; 16
    46e8:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    46ec:	80 e0       	ldi	r24, 0x00	; 0
    46ee:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <switchToSong(unsigned char)>
    46f2:	97 cf       	rjmp	.-210    	; 0x4622 <SomeoneYouLoved()+0x40>
    46f4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    46f8:	7c 01       	movw	r14, r24
    46fa:	69 e3       	ldi	r22, 0x39	; 57
    46fc:	72 e0       	ldi	r23, 0x02	; 2
    46fe:	ce 01       	movw	r24, r28
    4700:	01 96       	adiw	r24, 0x01	; 1
    4702:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    4706:	01 e0       	ldi	r16, 0x01	; 1
    4708:	97 01       	movw	r18, r14
    470a:	4b e4       	ldi	r20, 0x4B	; 75
    470c:	50 e0       	ldi	r21, 0x00	; 0
    470e:	6e e0       	ldi	r22, 0x0E	; 14
    4710:	7d e3       	ldi	r23, 0x3D	; 61
    4712:	ce 01       	movw	r24, r28
    4714:	01 96       	adiw	r24, 0x01	; 1
    4716:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    471a:	ce 01       	movw	r24, r28
    471c:	01 96       	adiw	r24, 0x01	; 1
    471e:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    4722:	7f cf       	rjmp	.-258    	; 0x4622 <SomeoneYouLoved()+0x40>
    4724:	42 e0       	ldi	r20, 0x02	; 2
    4726:	63 e0       	ldi	r22, 0x03	; 3
    4728:	83 e8       	ldi	r24, 0x83	; 131
    472a:	9f e1       	ldi	r25, 0x1F	; 31
    472c:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    4730:	78 cf       	rjmp	.-272    	; 0x4622 <SomeoneYouLoved()+0x40>
    4732:	44 ef       	ldi	r20, 0xF4	; 244
    4734:	51 e0       	ldi	r21, 0x01	; 1
    4736:	6a e0       	ldi	r22, 0x0A	; 10
    4738:	95 cf       	rjmp	.-214    	; 0x4664 <SomeoneYouLoved()+0x82>
    473a:	44 ef       	ldi	r20, 0xF4	; 244
    473c:	51 e0       	ldi	r21, 0x01	; 1
    473e:	64 e1       	ldi	r22, 0x14	; 20
    4740:	a3 cf       	rjmp	.-186    	; 0x4688 <SomeoneYouLoved()+0xa6>
    4742:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4746:	7c 01       	movw	r14, r24
    4748:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    474c:	8c 01       	movw	r16, r24
    474e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4752:	9c 01       	movw	r18, r24
    4754:	4b e4       	ldi	r20, 0x4B	; 75
    4756:	50 e0       	ldi	r21, 0x00	; 0
    4758:	69 e1       	ldi	r22, 0x19	; 25
    475a:	86 e0       	ldi	r24, 0x06	; 6
    475c:	9f e3       	ldi	r25, 0x3F	; 63
    475e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4762:	5f cf       	rjmp	.-322    	; 0x4622 <SomeoneYouLoved()+0x40>
    4764:	43 e2       	ldi	r20, 0x23	; 35
    4766:	64 e0       	ldi	r22, 0x04	; 4
    4768:	86 e0       	ldi	r24, 0x06	; 6
    476a:	9f e3       	ldi	r25, 0x3F	; 63
    476c:	df cf       	rjmp	.-66     	; 0x472c <SomeoneYouLoved()+0x14a>
    476e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4772:	7c 01       	movw	r14, r24
    4774:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4778:	8c 01       	movw	r16, r24
    477a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    477e:	9c 01       	movw	r18, r24
    4780:	4b e4       	ldi	r20, 0x4B	; 75
    4782:	50 e0       	ldi	r21, 0x00	; 0
    4784:	6d e2       	ldi	r22, 0x2D	; 45
    4786:	e9 cf       	rjmp	.-46     	; 0x475a <SomeoneYouLoved()+0x178>
    4788:	62 e3       	ldi	r22, 0x32	; 50
    478a:	82 e7       	ldi	r24, 0x72	; 114
    478c:	9f e1       	ldi	r25, 0x1F	; 31
    478e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    4792:	47 cf       	rjmp	.-370    	; 0x4622 <SomeoneYouLoved()+0x40>
    4794:	44 ef       	ldi	r20, 0xF4	; 244
    4796:	51 e0       	ldi	r21, 0x01	; 1
    4798:	6c e3       	ldi	r22, 0x3C	; 60
    479a:	76 cf       	rjmp	.-276    	; 0x4688 <SomeoneYouLoved()+0xa6>
    479c:	46 e4       	ldi	r20, 0x46	; 70
    479e:	6c e0       	ldi	r22, 0x0C	; 12
    47a0:	89 eb       	ldi	r24, 0xB9	; 185
    47a2:	9f e0       	ldi	r25, 0x0F	; 15
    47a4:	7f cf       	rjmp	.-258    	; 0x46a4 <SomeoneYouLoved()+0xc2>
    47a6:	64 e6       	ldi	r22, 0x64	; 100
    47a8:	80 e1       	ldi	r24, 0x10	; 16
    47aa:	97 e2       	ldi	r25, 0x27	; 39
    47ac:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    47b0:	38 cf       	rjmp	.-400    	; 0x4622 <SomeoneYouLoved()+0x40>

000047b2 <ShouldntStop()>:
    47b2:	ef 92       	push	r14
    47b4:	ff 92       	push	r15
    47b6:	0f 93       	push	r16
    47b8:	1f 93       	push	r17
    47ba:	cf 93       	push	r28
    47bc:	df 93       	push	r29
    47be:	00 d0       	rcall	.+0      	; 0x47c0 <ShouldntStop()+0xe>
    47c0:	00 d0       	rcall	.+0      	; 0x47c2 <ShouldntStop()+0x10>
    47c2:	00 d0       	rcall	.+0      	; 0x47c4 <ShouldntStop()+0x12>
    47c4:	1f 92       	push	r1
    47c6:	cd b7       	in	r28, 0x3d	; 61
    47c8:	de b7       	in	r29, 0x3e	; 62
    47ca:	80 91 fa 09 	lds	r24, 0x09FA	; 0x8009fa <prog>
    47ce:	8e 31       	cpi	r24, 0x1E	; 30
    47d0:	09 f4       	brne	.+2      	; 0x47d4 <ShouldntStop()+0x22>
    47d2:	b0 c0       	rjmp	.+352    	; 0x4934 <ShouldntStop()+0x182>
    47d4:	a0 f5       	brcc	.+104    	; 0x483e <ShouldntStop()+0x8c>
    47d6:	85 30       	cpi	r24, 0x05	; 5
    47d8:	09 f4       	brne	.+2      	; 0x47dc <ShouldntStop()+0x2a>
    47da:	93 c0       	rjmp	.+294    	; 0x4902 <ShouldntStop()+0x150>
    47dc:	b8 f4       	brcc	.+46     	; 0x480c <ShouldntStop()+0x5a>
    47de:	81 30       	cpi	r24, 0x01	; 1
    47e0:	09 f4       	brne	.+2      	; 0x47e4 <ShouldntStop()+0x32>
    47e2:	88 c0       	rjmp	.+272    	; 0x48f4 <ShouldntStop()+0x142>
    47e4:	08 f4       	brcc	.+2      	; 0x47e8 <ShouldntStop()+0x36>
    47e6:	6e c0       	rjmp	.+220    	; 0x48c4 <ShouldntStop()+0x112>
    47e8:	45 e0       	ldi	r20, 0x05	; 5
    47ea:	64 e0       	ldi	r22, 0x04	; 4
    47ec:	82 30       	cpi	r24, 0x02	; 2
    47ee:	09 f4       	brne	.+2      	; 0x47f2 <ShouldntStop()+0x40>
    47f0:	83 c0       	rjmp	.+262    	; 0x48f8 <ShouldntStop()+0x146>
    47f2:	27 96       	adiw	r28, 0x07	; 7
    47f4:	0f b6       	in	r0, 0x3f	; 63
    47f6:	f8 94       	cli
    47f8:	de bf       	out	0x3e, r29	; 62
    47fa:	0f be       	out	0x3f, r0	; 63
    47fc:	cd bf       	out	0x3d, r28	; 61
    47fe:	df 91       	pop	r29
    4800:	cf 91       	pop	r28
    4802:	1f 91       	pop	r17
    4804:	0f 91       	pop	r16
    4806:	ff 90       	pop	r15
    4808:	ef 90       	pop	r14
    480a:	08 95       	ret
    480c:	8f 30       	cpi	r24, 0x0F	; 15
    480e:	09 f4       	brne	.+2      	; 0x4812 <ShouldntStop()+0x60>
    4810:	7c c0       	rjmp	.+248    	; 0x490a <ShouldntStop()+0x158>
    4812:	40 f4       	brcc	.+16     	; 0x4824 <ShouldntStop()+0x72>
    4814:	8a 30       	cpi	r24, 0x0A	; 10
    4816:	69 f7       	brne	.-38     	; 0x47f2 <ShouldntStop()+0x40>
    4818:	6f e0       	ldi	r22, 0x0F	; 15
    481a:	86 e0       	ldi	r24, 0x06	; 6
    481c:	9f e3       	ldi	r25, 0x3F	; 63
    481e:	0e 94 f5 0a 	call	0x15ea	; 0x15ea <progMovingLines(unsigned int, unsigned char)>
    4822:	e7 cf       	rjmp	.-50     	; 0x47f2 <ShouldntStop()+0x40>
    4824:	84 31       	cpi	r24, 0x14	; 20
    4826:	09 f4       	brne	.+2      	; 0x482a <ShouldntStop()+0x78>
    4828:	74 c0       	rjmp	.+232    	; 0x4912 <ShouldntStop()+0x160>
    482a:	44 ef       	ldi	r20, 0xF4	; 244
    482c:	51 e0       	ldi	r21, 0x01	; 1
    482e:	6e e1       	ldi	r22, 0x1E	; 30
    4830:	89 31       	cpi	r24, 0x19	; 25
    4832:	f9 f6       	brne	.-66     	; 0x47f2 <ShouldntStop()+0x40>
    4834:	86 e0       	ldi	r24, 0x06	; 6
    4836:	9f e3       	ldi	r25, 0x3F	; 63
    4838:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <progCircles(unsigned int, unsigned char, unsigned int)>
    483c:	da cf       	rjmp	.-76     	; 0x47f2 <ShouldntStop()+0x40>
    483e:	87 33       	cpi	r24, 0x37	; 55
    4840:	09 f4       	brne	.+2      	; 0x4844 <ShouldntStop()+0x92>
    4842:	90 c0       	rjmp	.+288    	; 0x4964 <ShouldntStop()+0x1b2>
    4844:	d0 f4       	brcc	.+52     	; 0x487a <ShouldntStop()+0xc8>
    4846:	88 32       	cpi	r24, 0x28	; 40
    4848:	09 f4       	brne	.+2      	; 0x484c <ShouldntStop()+0x9a>
    484a:	79 c0       	rjmp	.+242    	; 0x493e <ShouldntStop()+0x18c>
    484c:	50 f4       	brcc	.+20     	; 0x4862 <ShouldntStop()+0xb0>
    484e:	44 ef       	ldi	r20, 0xF4	; 244
    4850:	51 e0       	ldi	r21, 0x01	; 1
    4852:	68 e2       	ldi	r22, 0x28	; 40
    4854:	83 32       	cpi	r24, 0x23	; 35
    4856:	69 f6       	brne	.-102    	; 0x47f2 <ShouldntStop()+0x40>
    4858:	86 e0       	ldi	r24, 0x06	; 6
    485a:	9f e3       	ldi	r25, 0x3F	; 63
    485c:	0e 94 05 07 	call	0xe0a	; 0xe0a <progFullColors(unsigned int, unsigned char, unsigned int)>
    4860:	c8 cf       	rjmp	.-112    	; 0x47f2 <ShouldntStop()+0x40>
    4862:	8d 32       	cpi	r24, 0x2D	; 45
    4864:	09 f4       	brne	.+2      	; 0x4868 <ShouldntStop()+0xb6>
    4866:	78 c0       	rjmp	.+240    	; 0x4958 <ShouldntStop()+0x1a6>
    4868:	82 33       	cpi	r24, 0x32	; 50
    486a:	19 f6       	brne	.-122    	; 0x47f2 <ShouldntStop()+0x40>
    486c:	47 e3       	ldi	r20, 0x37	; 55
    486e:	67 e0       	ldi	r22, 0x07	; 7
    4870:	8d ef       	ldi	r24, 0xFD	; 253
    4872:	9e e3       	ldi	r25, 0x3E	; 62
    4874:	0e 94 b6 06 	call	0xd6c	; 0xd6c <progFastBlingBling(unsigned int, unsigned char, unsigned char)>
    4878:	bc cf       	rjmp	.-136    	; 0x47f2 <ShouldntStop()+0x40>
    487a:	81 34       	cpi	r24, 0x41	; 65
    487c:	09 f4       	brne	.+2      	; 0x4880 <ShouldntStop()+0xce>
    487e:	76 c0       	rjmp	.+236    	; 0x496c <ShouldntStop()+0x1ba>
    4880:	90 f4       	brcc	.+36     	; 0x48a6 <ShouldntStop()+0xf4>
    4882:	8c 33       	cpi	r24, 0x3C	; 60
    4884:	09 f0       	breq	.+2      	; 0x4888 <ShouldntStop()+0xd6>
    4886:	b5 cf       	rjmp	.-150    	; 0x47f2 <ShouldntStop()+0x40>
    4888:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    488c:	7c 01       	movw	r14, r24
    488e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4892:	8c 01       	movw	r16, r24
    4894:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4898:	9c 01       	movw	r18, r24
    489a:	4b e4       	ldi	r20, 0x4B	; 75
    489c:	50 e0       	ldi	r21, 0x00	; 0
    489e:	61 e4       	ldi	r22, 0x41	; 65
    48a0:	84 e4       	ldi	r24, 0x44	; 68
    48a2:	9f e2       	ldi	r25, 0x2F	; 47
    48a4:	44 c0       	rjmp	.+136    	; 0x492e <ShouldntStop()+0x17c>
    48a6:	86 34       	cpi	r24, 0x46	; 70
    48a8:	09 f4       	brne	.+2      	; 0x48ac <ShouldntStop()+0xfa>
    48aa:	65 c0       	rjmp	.+202    	; 0x4976 <ShouldntStop()+0x1c4>
    48ac:	84 36       	cpi	r24, 0x64	; 100
    48ae:	09 f0       	breq	.+2      	; 0x48b2 <ShouldntStop()+0x100>
    48b0:	a0 cf       	rjmp	.-192    	; 0x47f2 <ShouldntStop()+0x40>
    48b2:	60 e0       	ldi	r22, 0x00	; 0
    48b4:	8f e0       	ldi	r24, 0x0F	; 15
    48b6:	90 e1       	ldi	r25, 0x10	; 16
    48b8:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    48bc:	80 e0       	ldi	r24, 0x00	; 0
    48be:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <switchToSong(unsigned char)>
    48c2:	97 cf       	rjmp	.-210    	; 0x47f2 <ShouldntStop()+0x40>
    48c4:	0e 94 f1 05 	call	0xbe2	; 0xbe2 <getRandomColor()>
    48c8:	7c 01       	movw	r14, r24
    48ca:	6c e5       	ldi	r22, 0x5C	; 92
    48cc:	72 e0       	ldi	r23, 0x02	; 2
    48ce:	ce 01       	movw	r24, r28
    48d0:	01 96       	adiw	r24, 0x01	; 1
    48d2:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    48d6:	01 e0       	ldi	r16, 0x01	; 1
    48d8:	97 01       	movw	r18, r14
    48da:	4b e4       	ldi	r20, 0x4B	; 75
    48dc:	50 e0       	ldi	r21, 0x00	; 0
    48de:	6e e0       	ldi	r22, 0x0E	; 14
    48e0:	7d e3       	ldi	r23, 0x3D	; 61
    48e2:	ce 01       	movw	r24, r28
    48e4:	01 96       	adiw	r24, 0x01	; 1
    48e6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <progScrollText(String, unsigned int, int, int, unsigned char)>
    48ea:	ce 01       	movw	r24, r28
    48ec:	01 96       	adiw	r24, 0x01	; 1
    48ee:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    48f2:	7f cf       	rjmp	.-258    	; 0x47f2 <ShouldntStop()+0x40>
    48f4:	42 e0       	ldi	r20, 0x02	; 2
    48f6:	63 e0       	ldi	r22, 0x03	; 3
    48f8:	83 e8       	ldi	r24, 0x83	; 131
    48fa:	9f e1       	ldi	r25, 0x1F	; 31
    48fc:	0e 94 68 11 	call	0x22d0	; 0x22d0 <progPalette(unsigned int, unsigned char, unsigned char)>
    4900:	78 cf       	rjmp	.-272    	; 0x47f2 <ShouldntStop()+0x40>
    4902:	44 ef       	ldi	r20, 0xF4	; 244
    4904:	51 e0       	ldi	r21, 0x01	; 1
    4906:	6a e0       	ldi	r22, 0x0A	; 10
    4908:	95 cf       	rjmp	.-214    	; 0x4834 <ShouldntStop()+0x82>
    490a:	44 ef       	ldi	r20, 0xF4	; 244
    490c:	51 e0       	ldi	r21, 0x01	; 1
    490e:	64 e1       	ldi	r22, 0x14	; 20
    4910:	a3 cf       	rjmp	.-186    	; 0x4858 <ShouldntStop()+0xa6>
    4912:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4916:	7c 01       	movw	r14, r24
    4918:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    491c:	8c 01       	movw	r16, r24
    491e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4922:	9c 01       	movw	r18, r24
    4924:	4b e4       	ldi	r20, 0x4B	; 75
    4926:	50 e0       	ldi	r21, 0x00	; 0
    4928:	69 e1       	ldi	r22, 0x19	; 25
    492a:	86 e0       	ldi	r24, 0x06	; 6
    492c:	9f e3       	ldi	r25, 0x3F	; 63
    492e:	0e 94 6a 07 	call	0xed4	; 0xed4 <progStrobo(unsigned int, unsigned char, unsigned int, int, int, int)>
    4932:	5f cf       	rjmp	.-322    	; 0x47f2 <ShouldntStop()+0x40>
    4934:	43 e2       	ldi	r20, 0x23	; 35
    4936:	64 e0       	ldi	r22, 0x04	; 4
    4938:	86 e0       	ldi	r24, 0x06	; 6
    493a:	9f e3       	ldi	r25, 0x3F	; 63
    493c:	df cf       	rjmp	.-66     	; 0x48fc <ShouldntStop()+0x14a>
    493e:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4942:	7c 01       	movw	r14, r24
    4944:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4948:	8c 01       	movw	r16, r24
    494a:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    494e:	9c 01       	movw	r18, r24
    4950:	4b e4       	ldi	r20, 0x4B	; 75
    4952:	50 e0       	ldi	r21, 0x00	; 0
    4954:	6d e2       	ldi	r22, 0x2D	; 45
    4956:	e9 cf       	rjmp	.-46     	; 0x492a <ShouldntStop()+0x178>
    4958:	62 e3       	ldi	r22, 0x32	; 50
    495a:	82 e7       	ldi	r24, 0x72	; 114
    495c:	9f e1       	ldi	r25, 0x1F	; 31
    495e:	0e 94 c7 07 	call	0xf8e	; 0xf8e <progMatrixScanner(unsigned int, unsigned char)>
    4962:	47 cf       	rjmp	.-370    	; 0x47f2 <ShouldntStop()+0x40>
    4964:	44 ef       	ldi	r20, 0xF4	; 244
    4966:	51 e0       	ldi	r21, 0x01	; 1
    4968:	6c e3       	ldi	r22, 0x3C	; 60
    496a:	76 cf       	rjmp	.-276    	; 0x4858 <ShouldntStop()+0xa6>
    496c:	46 e4       	ldi	r20, 0x46	; 70
    496e:	6c e0       	ldi	r22, 0x0C	; 12
    4970:	89 eb       	ldi	r24, 0xB9	; 185
    4972:	9f e0       	ldi	r25, 0x0F	; 15
    4974:	7f cf       	rjmp	.-258    	; 0x4874 <ShouldntStop()+0xc2>
    4976:	64 e6       	ldi	r22, 0x64	; 100
    4978:	80 e1       	ldi	r24, 0x10	; 16
    497a:	97 e2       	ldi	r25, 0x27	; 39
    497c:	0e 94 ba 09 	call	0x1374	; 0x1374 <progBlack(unsigned int, unsigned char)>
    4980:	38 cf       	rjmp	.-400    	; 0x47f2 <ShouldntStop()+0x40>

00004982 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    4982:	9f 92       	push	r9
    4984:	af 92       	push	r10
    4986:	bf 92       	push	r11
    4988:	cf 92       	push	r12
    498a:	df 92       	push	r13
    498c:	ef 92       	push	r14
    498e:	ff 92       	push	r15
    4990:	0f 93       	push	r16
    4992:	1f 93       	push	r17
    4994:	cf 93       	push	r28
    4996:	df 93       	push	r29
    4998:	fc 01       	movw	r30, r24
    499a:	c0 80       	ld	r12, Z
    499c:	d1 80       	ldd	r13, Z+1	; 0x01
    499e:	28 b1       	in	r18, 0x08	; 8
    49a0:	b2 2e       	mov	r11, r18
    49a2:	68 94       	set
    49a4:	b2 f8       	bld	r11, 2
    49a6:	98 b1       	in	r25, 0x08	; 8
    49a8:	9b 7f       	andi	r25, 0xFB	; 251
    49aa:	98 b9       	out	0x08, r25	; 8
    49ac:	62 85       	ldd	r22, Z+10	; 0x0a
    49ae:	87 81       	ldd	r24, Z+7	; 0x07
    49b0:	06 2f       	mov	r16, r22
    49b2:	08 1b       	sub	r16, r24
    49b4:	80 2f       	mov	r24, r16
    49b6:	07 83       	std	Z+7, r16	; 0x07
    49b8:	77 85       	ldd	r23, Z+15	; 0x0f
    49ba:	a2 81       	ldd	r26, Z+2	; 0x02
    49bc:	b3 81       	ldd	r27, Z+3	; 0x03
    49be:	35 85       	ldd	r19, Z+13	; 0x0d
    49c0:	44 85       	ldd	r20, Z+12	; 0x0c
    49c2:	56 85       	ldd	r21, Z+14	; 0x0e
    49c4:	99 24       	eor	r9, r9
    49c6:	93 94       	inc	r9
    49c8:	93 0e       	add	r9, r19
    49ca:	4f 5f       	subi	r20, 0xFF	; 255
    49cc:	5f 5f       	subi	r21, 0xFF	; 255
    49ce:	f6 80       	ldd	r15, Z+6	; 0x06
    49d0:	e0 84       	ldd	r14, Z+8	; 0x08
    49d2:	c1 85       	ldd	r28, Z+9	; 0x09
    49d4:	d3 85       	ldd	r29, Z+11	; 0x0b
    49d6:	f6 01       	movw	r30, r12
    49d8:	11 81       	ldd	r17, Z+1	; 0x01
    49da:	a1 2c       	mov	r10, r1
    49dc:	0a 2d       	mov	r16, r10
    49de:	2a 2d       	mov	r18, r10
    49e0:	3a 2d       	mov	r19, r10
    49e2:	31 81       	ldd	r19, Z+1	; 0x01
    49e4:	11 27       	eor	r17, r17
    49e6:	88 94       	clc
    49e8:	31 11       	cpse	r19, r1
    49ea:	38 0f       	add	r19, r24
    49ec:	08 f4       	brcc	.+2      	; 0x49f0 <L_15206>
    49ee:	3f ef       	ldi	r19, 0xFF	; 255

000049f0 <L_15206>:
    49f0:	81 95       	neg	r24
    49f2:	88 94       	clc
    49f4:	90 fc       	sbrc	r9, 0
    49f6:	13 0f       	add	r17, r19
    49f8:	17 95       	ror	r17
    49fa:	88 94       	clc
    49fc:	91 fc       	sbrc	r9, 1
    49fe:	13 0f       	add	r17, r19
    4a00:	17 95       	ror	r17
    4a02:	88 94       	clc
    4a04:	92 fc       	sbrc	r9, 2
    4a06:	13 0f       	add	r17, r19
    4a08:	17 95       	ror	r17
    4a0a:	88 94       	clc
    4a0c:	93 fc       	sbrc	r9, 3
    4a0e:	13 0f       	add	r17, r19
    4a10:	17 95       	ror	r17
    4a12:	88 94       	clc
    4a14:	94 fc       	sbrc	r9, 4
    4a16:	13 0f       	add	r17, r19
    4a18:	17 95       	ror	r17
    4a1a:	88 94       	clc
    4a1c:	95 fc       	sbrc	r9, 5
    4a1e:	13 0f       	add	r17, r19
    4a20:	17 95       	ror	r17
    4a22:	88 94       	clc
    4a24:	96 fc       	sbrc	r9, 6
    4a26:	13 0f       	add	r17, r19
    4a28:	17 95       	ror	r17
    4a2a:	88 94       	clc
    4a2c:	97 fc       	sbrc	r9, 7
    4a2e:	13 0f       	add	r17, r19
    4a30:	17 95       	ror	r17
    4a32:	88 94       	clc
    4a34:	03 2f       	mov	r16, r19
    4a36:	91 10       	cpse	r9, r1
    4a38:	01 2f       	mov	r16, r17
    4a3a:	86 0f       	add	r24, r22
    4a3c:	10 2f       	mov	r17, r16
    4a3e:	00 2c       	mov	r0, r0
    4a40:	b8 b8       	out	0x08, r11	; 8
    4a42:	00 c0       	rjmp	.+0      	; 0x4a44 <L_15206+0x54>
    4a44:	17 ff       	sbrs	r17, 7
    4a46:	98 b9       	out	0x08, r25	; 8
    4a48:	30 81       	ld	r19, Z
    4a4a:	00 27       	eor	r16, r16
    4a4c:	88 94       	clc
    4a4e:	00 c0       	rjmp	.+0      	; 0x4a50 <L_15206+0x60>
    4a50:	00 c0       	rjmp	.+0      	; 0x4a52 <L_15206+0x62>
    4a52:	00 2c       	mov	r0, r0
    4a54:	98 b9       	out	0x08, r25	; 8
    4a56:	31 11       	cpse	r19, r1
    4a58:	3f 0d       	add	r19, r15
    4a5a:	00 c0       	rjmp	.+0      	; 0x4a5c <L_15206+0x6c>
    4a5c:	00 2c       	mov	r0, r0
    4a5e:	b8 b8       	out	0x08, r11	; 8
    4a60:	00 c0       	rjmp	.+0      	; 0x4a62 <L_15206+0x72>
    4a62:	16 ff       	sbrs	r17, 6
    4a64:	98 b9       	out	0x08, r25	; 8
    4a66:	08 f4       	brcc	.+2      	; 0x4a6a <L_15739>
    4a68:	3f ef       	ldi	r19, 0xFF	; 255

00004a6a <L_15739>:
    4a6a:	f1 94       	neg	r15
    4a6c:	88 94       	clc
    4a6e:	00 c0       	rjmp	.+0      	; 0x4a70 <L_15739+0x6>
    4a70:	00 c0       	rjmp	.+0      	; 0x4a72 <L_15739+0x8>
    4a72:	00 2c       	mov	r0, r0
    4a74:	98 b9       	out	0x08, r25	; 8
    4a76:	40 fd       	sbrc	r20, 0
    4a78:	03 0f       	add	r16, r19
    4a7a:	00 c0       	rjmp	.+0      	; 0x4a7c <L_15739+0x12>
    4a7c:	00 2c       	mov	r0, r0
    4a7e:	b8 b8       	out	0x08, r11	; 8
    4a80:	00 c0       	rjmp	.+0      	; 0x4a82 <L_15739+0x18>
    4a82:	15 ff       	sbrs	r17, 5
    4a84:	98 b9       	out	0x08, r25	; 8
    4a86:	07 95       	ror	r16
    4a88:	88 94       	clc
    4a8a:	41 fd       	sbrc	r20, 1
    4a8c:	03 0f       	add	r16, r19
    4a8e:	00 c0       	rjmp	.+0      	; 0x4a90 <L_15739+0x26>
    4a90:	00 c0       	rjmp	.+0      	; 0x4a92 <L_15739+0x28>
    4a92:	00 2c       	mov	r0, r0
    4a94:	98 b9       	out	0x08, r25	; 8
    4a96:	07 95       	ror	r16
    4a98:	88 94       	clc
    4a9a:	00 c0       	rjmp	.+0      	; 0x4a9c <L_15739+0x32>
    4a9c:	00 2c       	mov	r0, r0
    4a9e:	b8 b8       	out	0x08, r11	; 8
    4aa0:	00 c0       	rjmp	.+0      	; 0x4aa2 <L_15739+0x38>
    4aa2:	14 ff       	sbrs	r17, 4
    4aa4:	98 b9       	out	0x08, r25	; 8
    4aa6:	42 fd       	sbrc	r20, 2
    4aa8:	03 0f       	add	r16, r19
    4aaa:	07 95       	ror	r16
    4aac:	88 94       	clc
    4aae:	00 c0       	rjmp	.+0      	; 0x4ab0 <L_15739+0x46>
    4ab0:	00 c0       	rjmp	.+0      	; 0x4ab2 <L_15739+0x48>
    4ab2:	00 2c       	mov	r0, r0
    4ab4:	98 b9       	out	0x08, r25	; 8
    4ab6:	43 fd       	sbrc	r20, 3
    4ab8:	03 0f       	add	r16, r19
    4aba:	00 c0       	rjmp	.+0      	; 0x4abc <L_15739+0x52>
    4abc:	00 2c       	mov	r0, r0
    4abe:	b8 b8       	out	0x08, r11	; 8
    4ac0:	00 c0       	rjmp	.+0      	; 0x4ac2 <L_15739+0x58>
    4ac2:	13 ff       	sbrs	r17, 3
    4ac4:	98 b9       	out	0x08, r25	; 8
    4ac6:	07 95       	ror	r16
    4ac8:	88 94       	clc
    4aca:	44 fd       	sbrc	r20, 4
    4acc:	03 0f       	add	r16, r19
    4ace:	00 c0       	rjmp	.+0      	; 0x4ad0 <L_15739+0x66>
    4ad0:	00 c0       	rjmp	.+0      	; 0x4ad2 <L_15739+0x68>
    4ad2:	00 2c       	mov	r0, r0
    4ad4:	98 b9       	out	0x08, r25	; 8
    4ad6:	07 95       	ror	r16
    4ad8:	88 94       	clc
    4ada:	00 c0       	rjmp	.+0      	; 0x4adc <L_15739+0x72>
    4adc:	00 2c       	mov	r0, r0
    4ade:	b8 b8       	out	0x08, r11	; 8
    4ae0:	00 c0       	rjmp	.+0      	; 0x4ae2 <L_15739+0x78>
    4ae2:	12 ff       	sbrs	r17, 2
    4ae4:	98 b9       	out	0x08, r25	; 8
    4ae6:	45 fd       	sbrc	r20, 5
    4ae8:	03 0f       	add	r16, r19
    4aea:	07 95       	ror	r16
    4aec:	88 94       	clc
    4aee:	00 c0       	rjmp	.+0      	; 0x4af0 <L_15739+0x86>
    4af0:	00 c0       	rjmp	.+0      	; 0x4af2 <L_15739+0x88>
    4af2:	00 2c       	mov	r0, r0
    4af4:	98 b9       	out	0x08, r25	; 8
    4af6:	46 fd       	sbrc	r20, 6
    4af8:	03 0f       	add	r16, r19
    4afa:	00 c0       	rjmp	.+0      	; 0x4afc <L_15739+0x92>
    4afc:	00 2c       	mov	r0, r0
    4afe:	b8 b8       	out	0x08, r11	; 8
    4b00:	00 c0       	rjmp	.+0      	; 0x4b02 <L_15739+0x98>
    4b02:	11 ff       	sbrs	r17, 1
    4b04:	98 b9       	out	0x08, r25	; 8
    4b06:	07 95       	ror	r16
    4b08:	88 94       	clc
    4b0a:	47 fd       	sbrc	r20, 7
    4b0c:	03 0f       	add	r16, r19
    4b0e:	00 c0       	rjmp	.+0      	; 0x4b10 <L_15739+0xa6>
    4b10:	00 c0       	rjmp	.+0      	; 0x4b12 <L_15739+0xa8>
    4b12:	00 2c       	mov	r0, r0
    4b14:	98 b9       	out	0x08, r25	; 8
    4b16:	07 95       	ror	r16
    4b18:	88 94       	clc
    4b1a:	00 c0       	rjmp	.+0      	; 0x4b1c <L_15739+0xb2>
    4b1c:	00 2c       	mov	r0, r0
    4b1e:	b8 b8       	out	0x08, r11	; 8
    4b20:	00 c0       	rjmp	.+0      	; 0x4b22 <L_15739+0xb8>
    4b22:	10 ff       	sbrs	r17, 0
    4b24:	98 b9       	out	0x08, r25	; 8
    4b26:	13 2f       	mov	r17, r19
    4b28:	41 11       	cpse	r20, r1
    4b2a:	10 2f       	mov	r17, r16
    4b2c:	fc 0e       	add	r15, r28
    4b2e:	00 c0       	rjmp	.+0      	; 0x4b30 <L_15739+0xc6>
    4b30:	00 c0       	rjmp	.+0      	; 0x4b32 <L_15739+0xc8>
    4b32:	00 2c       	mov	r0, r0
    4b34:	98 b9       	out	0x08, r25	; 8
    4b36:	00 c0       	rjmp	.+0      	; 0x4b38 <L_15739+0xce>
    4b38:	00 c0       	rjmp	.+0      	; 0x4b3a <L_15739+0xd0>
    4b3a:	00 2c       	mov	r0, r0
    4b3c:	b8 b8       	out	0x08, r11	; 8
    4b3e:	00 c0       	rjmp	.+0      	; 0x4b40 <L_15739+0xd6>
    4b40:	17 ff       	sbrs	r17, 7
    4b42:	98 b9       	out	0x08, r25	; 8
    4b44:	32 81       	ldd	r19, Z+2	; 0x02
    4b46:	00 27       	eor	r16, r16
    4b48:	88 94       	clc
    4b4a:	00 c0       	rjmp	.+0      	; 0x4b4c <L_15739+0xe2>
    4b4c:	00 c0       	rjmp	.+0      	; 0x4b4e <L_15739+0xe4>
    4b4e:	00 2c       	mov	r0, r0
    4b50:	98 b9       	out	0x08, r25	; 8
    4b52:	31 11       	cpse	r19, r1
    4b54:	3e 0d       	add	r19, r14
    4b56:	00 c0       	rjmp	.+0      	; 0x4b58 <L_15739+0xee>
    4b58:	00 2c       	mov	r0, r0
    4b5a:	b8 b8       	out	0x08, r11	; 8
    4b5c:	00 c0       	rjmp	.+0      	; 0x4b5e <L_15739+0xf4>
    4b5e:	16 ff       	sbrs	r17, 6
    4b60:	98 b9       	out	0x08, r25	; 8
    4b62:	08 f4       	brcc	.+2      	; 0x4b66 <L_16957>
    4b64:	3f ef       	ldi	r19, 0xFF	; 255

00004b66 <L_16957>:
    4b66:	e7 0f       	add	r30, r23
    4b68:	f1 1d       	adc	r31, r1
    4b6a:	00 c0       	rjmp	.+0      	; 0x4b6c <L_16957+0x6>
    4b6c:	00 c0       	rjmp	.+0      	; 0x4b6e <L_16957+0x8>
    4b6e:	00 2c       	mov	r0, r0
    4b70:	98 b9       	out	0x08, r25	; 8
    4b72:	50 fd       	sbrc	r21, 0
    4b74:	03 0f       	add	r16, r19
    4b76:	00 c0       	rjmp	.+0      	; 0x4b78 <L_16957+0x12>
    4b78:	00 2c       	mov	r0, r0
    4b7a:	b8 b8       	out	0x08, r11	; 8
    4b7c:	00 c0       	rjmp	.+0      	; 0x4b7e <L_16957+0x18>
    4b7e:	15 ff       	sbrs	r17, 5
    4b80:	98 b9       	out	0x08, r25	; 8
    4b82:	07 95       	ror	r16
    4b84:	88 94       	clc
    4b86:	51 fd       	sbrc	r21, 1
    4b88:	03 0f       	add	r16, r19
    4b8a:	00 c0       	rjmp	.+0      	; 0x4b8c <L_16957+0x26>
    4b8c:	00 c0       	rjmp	.+0      	; 0x4b8e <L_16957+0x28>
    4b8e:	00 2c       	mov	r0, r0
    4b90:	98 b9       	out	0x08, r25	; 8
    4b92:	07 95       	ror	r16
    4b94:	88 94       	clc
    4b96:	00 c0       	rjmp	.+0      	; 0x4b98 <L_16957+0x32>
    4b98:	00 2c       	mov	r0, r0
    4b9a:	b8 b8       	out	0x08, r11	; 8
    4b9c:	00 c0       	rjmp	.+0      	; 0x4b9e <L_16957+0x38>
    4b9e:	14 ff       	sbrs	r17, 4
    4ba0:	98 b9       	out	0x08, r25	; 8
    4ba2:	52 fd       	sbrc	r21, 2
    4ba4:	03 0f       	add	r16, r19
    4ba6:	07 95       	ror	r16
    4ba8:	88 94       	clc
    4baa:	00 c0       	rjmp	.+0      	; 0x4bac <L_16957+0x46>
    4bac:	00 c0       	rjmp	.+0      	; 0x4bae <L_16957+0x48>
    4bae:	00 2c       	mov	r0, r0
    4bb0:	98 b9       	out	0x08, r25	; 8
    4bb2:	53 fd       	sbrc	r21, 3
    4bb4:	03 0f       	add	r16, r19
    4bb6:	00 c0       	rjmp	.+0      	; 0x4bb8 <L_16957+0x52>
    4bb8:	00 2c       	mov	r0, r0
    4bba:	b8 b8       	out	0x08, r11	; 8
    4bbc:	00 c0       	rjmp	.+0      	; 0x4bbe <L_16957+0x58>
    4bbe:	13 ff       	sbrs	r17, 3
    4bc0:	98 b9       	out	0x08, r25	; 8
    4bc2:	07 95       	ror	r16
    4bc4:	88 94       	clc
    4bc6:	54 fd       	sbrc	r21, 4
    4bc8:	03 0f       	add	r16, r19
    4bca:	00 c0       	rjmp	.+0      	; 0x4bcc <L_16957+0x66>
    4bcc:	00 c0       	rjmp	.+0      	; 0x4bce <L_16957+0x68>
    4bce:	00 2c       	mov	r0, r0
    4bd0:	98 b9       	out	0x08, r25	; 8
    4bd2:	07 95       	ror	r16
    4bd4:	88 94       	clc
    4bd6:	00 c0       	rjmp	.+0      	; 0x4bd8 <L_16957+0x72>
    4bd8:	00 2c       	mov	r0, r0
    4bda:	b8 b8       	out	0x08, r11	; 8
    4bdc:	00 c0       	rjmp	.+0      	; 0x4bde <L_16957+0x78>
    4bde:	12 ff       	sbrs	r17, 2
    4be0:	98 b9       	out	0x08, r25	; 8
    4be2:	55 fd       	sbrc	r21, 5
    4be4:	03 0f       	add	r16, r19
    4be6:	07 95       	ror	r16
    4be8:	88 94       	clc
    4bea:	00 c0       	rjmp	.+0      	; 0x4bec <L_16957+0x86>
    4bec:	00 c0       	rjmp	.+0      	; 0x4bee <L_16957+0x88>
    4bee:	00 2c       	mov	r0, r0
    4bf0:	98 b9       	out	0x08, r25	; 8
    4bf2:	56 fd       	sbrc	r21, 6
    4bf4:	03 0f       	add	r16, r19
    4bf6:	00 c0       	rjmp	.+0      	; 0x4bf8 <L_16957+0x92>
    4bf8:	00 2c       	mov	r0, r0
    4bfa:	b8 b8       	out	0x08, r11	; 8
    4bfc:	00 c0       	rjmp	.+0      	; 0x4bfe <L_16957+0x98>
    4bfe:	11 ff       	sbrs	r17, 1
    4c00:	98 b9       	out	0x08, r25	; 8
    4c02:	07 95       	ror	r16
    4c04:	88 94       	clc
    4c06:	57 fd       	sbrc	r21, 7
    4c08:	03 0f       	add	r16, r19
    4c0a:	00 c0       	rjmp	.+0      	; 0x4c0c <L_16957+0xa6>
    4c0c:	00 c0       	rjmp	.+0      	; 0x4c0e <L_16957+0xa8>
    4c0e:	00 2c       	mov	r0, r0
    4c10:	98 b9       	out	0x08, r25	; 8
    4c12:	07 95       	ror	r16
    4c14:	88 94       	clc
    4c16:	00 c0       	rjmp	.+0      	; 0x4c18 <L_16957+0xb2>
    4c18:	00 2c       	mov	r0, r0
    4c1a:	b8 b8       	out	0x08, r11	; 8
    4c1c:	00 c0       	rjmp	.+0      	; 0x4c1e <L_16957+0xb8>
    4c1e:	10 ff       	sbrs	r17, 0
    4c20:	98 b9       	out	0x08, r25	; 8
    4c22:	13 2f       	mov	r17, r19
    4c24:	51 11       	cpse	r21, r1
    4c26:	10 2f       	mov	r17, r16
    4c28:	e1 94       	neg	r14
    4c2a:	00 c0       	rjmp	.+0      	; 0x4c2c <L_16957+0xc6>
    4c2c:	00 c0       	rjmp	.+0      	; 0x4c2e <L_16957+0xc8>
    4c2e:	00 2c       	mov	r0, r0
    4c30:	98 b9       	out	0x08, r25	; 8
    4c32:	ed 0e       	add	r14, r29
    4c34:	00 c0       	rjmp	.+0      	; 0x4c36 <L_16957+0xd0>
    4c36:	00 c0       	rjmp	.+0      	; 0x4c38 <L_16957+0xd2>
    4c38:	b8 b8       	out	0x08, r11	; 8
    4c3a:	00 c0       	rjmp	.+0      	; 0x4c3c <L_16957+0xd6>
    4c3c:	17 ff       	sbrs	r17, 7
    4c3e:	98 b9       	out	0x08, r25	; 8
    4c40:	31 81       	ldd	r19, Z+1	; 0x01
    4c42:	00 27       	eor	r16, r16
    4c44:	88 94       	clc
    4c46:	00 c0       	rjmp	.+0      	; 0x4c48 <L_16957+0xe2>
    4c48:	00 c0       	rjmp	.+0      	; 0x4c4a <L_16957+0xe4>
    4c4a:	00 2c       	mov	r0, r0
    4c4c:	98 b9       	out	0x08, r25	; 8
    4c4e:	31 11       	cpse	r19, r1
    4c50:	38 0f       	add	r19, r24
    4c52:	00 c0       	rjmp	.+0      	; 0x4c54 <L_16957+0xee>
    4c54:	00 2c       	mov	r0, r0
    4c56:	b8 b8       	out	0x08, r11	; 8
    4c58:	00 c0       	rjmp	.+0      	; 0x4c5a <L_16957+0xf4>
    4c5a:	16 ff       	sbrs	r17, 6
    4c5c:	98 b9       	out	0x08, r25	; 8
    4c5e:	08 f4       	brcc	.+2      	; 0x4c62 <L_18181>
    4c60:	3f ef       	ldi	r19, 0xFF	; 255

00004c62 <L_18181>:
    4c62:	81 95       	neg	r24
    4c64:	88 94       	clc
    4c66:	00 c0       	rjmp	.+0      	; 0x4c68 <L_18181+0x6>
    4c68:	00 c0       	rjmp	.+0      	; 0x4c6a <L_18181+0x8>
    4c6a:	00 2c       	mov	r0, r0
    4c6c:	98 b9       	out	0x08, r25	; 8
    4c6e:	90 fc       	sbrc	r9, 0
    4c70:	03 0f       	add	r16, r19
    4c72:	00 c0       	rjmp	.+0      	; 0x4c74 <L_18181+0x12>
    4c74:	00 2c       	mov	r0, r0
    4c76:	b8 b8       	out	0x08, r11	; 8
    4c78:	00 c0       	rjmp	.+0      	; 0x4c7a <L_18181+0x18>
    4c7a:	15 ff       	sbrs	r17, 5
    4c7c:	98 b9       	out	0x08, r25	; 8
    4c7e:	07 95       	ror	r16
    4c80:	88 94       	clc
    4c82:	91 fc       	sbrc	r9, 1
    4c84:	03 0f       	add	r16, r19
    4c86:	00 c0       	rjmp	.+0      	; 0x4c88 <L_18181+0x26>
    4c88:	00 c0       	rjmp	.+0      	; 0x4c8a <L_18181+0x28>
    4c8a:	00 2c       	mov	r0, r0
    4c8c:	98 b9       	out	0x08, r25	; 8
    4c8e:	07 95       	ror	r16
    4c90:	88 94       	clc
    4c92:	00 c0       	rjmp	.+0      	; 0x4c94 <L_18181+0x32>
    4c94:	00 2c       	mov	r0, r0
    4c96:	b8 b8       	out	0x08, r11	; 8
    4c98:	00 c0       	rjmp	.+0      	; 0x4c9a <L_18181+0x38>
    4c9a:	14 ff       	sbrs	r17, 4
    4c9c:	98 b9       	out	0x08, r25	; 8
    4c9e:	92 fc       	sbrc	r9, 2
    4ca0:	03 0f       	add	r16, r19
    4ca2:	07 95       	ror	r16
    4ca4:	88 94       	clc
    4ca6:	00 c0       	rjmp	.+0      	; 0x4ca8 <L_18181+0x46>
    4ca8:	00 c0       	rjmp	.+0      	; 0x4caa <L_18181+0x48>
    4caa:	00 2c       	mov	r0, r0
    4cac:	98 b9       	out	0x08, r25	; 8
    4cae:	93 fc       	sbrc	r9, 3
    4cb0:	03 0f       	add	r16, r19
    4cb2:	00 c0       	rjmp	.+0      	; 0x4cb4 <L_18181+0x52>
    4cb4:	00 2c       	mov	r0, r0
    4cb6:	b8 b8       	out	0x08, r11	; 8
    4cb8:	00 c0       	rjmp	.+0      	; 0x4cba <L_18181+0x58>
    4cba:	13 ff       	sbrs	r17, 3
    4cbc:	98 b9       	out	0x08, r25	; 8
    4cbe:	07 95       	ror	r16
    4cc0:	88 94       	clc
    4cc2:	94 fc       	sbrc	r9, 4
    4cc4:	03 0f       	add	r16, r19
    4cc6:	00 c0       	rjmp	.+0      	; 0x4cc8 <L_18181+0x66>
    4cc8:	00 c0       	rjmp	.+0      	; 0x4cca <L_18181+0x68>
    4cca:	00 2c       	mov	r0, r0
    4ccc:	98 b9       	out	0x08, r25	; 8
    4cce:	07 95       	ror	r16
    4cd0:	88 94       	clc
    4cd2:	00 c0       	rjmp	.+0      	; 0x4cd4 <L_18181+0x72>
    4cd4:	00 2c       	mov	r0, r0
    4cd6:	b8 b8       	out	0x08, r11	; 8
    4cd8:	00 c0       	rjmp	.+0      	; 0x4cda <L_18181+0x78>
    4cda:	12 ff       	sbrs	r17, 2
    4cdc:	98 b9       	out	0x08, r25	; 8
    4cde:	95 fc       	sbrc	r9, 5
    4ce0:	03 0f       	add	r16, r19
    4ce2:	07 95       	ror	r16
    4ce4:	88 94       	clc
    4ce6:	00 c0       	rjmp	.+0      	; 0x4ce8 <L_18181+0x86>
    4ce8:	00 c0       	rjmp	.+0      	; 0x4cea <L_18181+0x88>
    4cea:	00 2c       	mov	r0, r0
    4cec:	98 b9       	out	0x08, r25	; 8
    4cee:	96 fc       	sbrc	r9, 6
    4cf0:	03 0f       	add	r16, r19
    4cf2:	00 c0       	rjmp	.+0      	; 0x4cf4 <L_18181+0x92>
    4cf4:	00 2c       	mov	r0, r0
    4cf6:	b8 b8       	out	0x08, r11	; 8
    4cf8:	00 c0       	rjmp	.+0      	; 0x4cfa <L_18181+0x98>
    4cfa:	11 ff       	sbrs	r17, 1
    4cfc:	98 b9       	out	0x08, r25	; 8
    4cfe:	07 95       	ror	r16
    4d00:	88 94       	clc
    4d02:	97 fc       	sbrc	r9, 7
    4d04:	03 0f       	add	r16, r19
    4d06:	00 c0       	rjmp	.+0      	; 0x4d08 <L_18181+0xa6>
    4d08:	00 c0       	rjmp	.+0      	; 0x4d0a <L_18181+0xa8>
    4d0a:	00 2c       	mov	r0, r0
    4d0c:	98 b9       	out	0x08, r25	; 8
    4d0e:	07 95       	ror	r16
    4d10:	88 94       	clc
    4d12:	00 c0       	rjmp	.+0      	; 0x4d14 <L_18181+0xb2>
    4d14:	00 2c       	mov	r0, r0
    4d16:	b8 b8       	out	0x08, r11	; 8
    4d18:	00 c0       	rjmp	.+0      	; 0x4d1a <L_18181+0xb8>
    4d1a:	10 ff       	sbrs	r17, 0
    4d1c:	98 b9       	out	0x08, r25	; 8
    4d1e:	13 2f       	mov	r17, r19
    4d20:	91 10       	cpse	r9, r1
    4d22:	10 2f       	mov	r17, r16
    4d24:	86 0f       	add	r24, r22
    4d26:	00 c0       	rjmp	.+0      	; 0x4d28 <L_18181+0xc6>
    4d28:	00 c0       	rjmp	.+0      	; 0x4d2a <L_18181+0xc8>
    4d2a:	00 2c       	mov	r0, r0
    4d2c:	98 b9       	out	0x08, r25	; 8
    4d2e:	11 97       	sbiw	r26, 0x01	; 1
    4d30:	09 f0       	breq	.+2      	; 0x4d34 <L_19161>
    4d32:	86 ce       	rjmp	.-756    	; 0x4a40 <L_15206+0x50>

00004d34 <L_19161>:
    4d34:	df 91       	pop	r29
    4d36:	cf 91       	pop	r28
    4d38:	1f 91       	pop	r17
    4d3a:	0f 91       	pop	r16
    4d3c:	ff 90       	pop	r15
    4d3e:	ef 90       	pop	r14
    4d40:	df 90       	pop	r13
    4d42:	cf 90       	pop	r12
    4d44:	bf 90       	pop	r11
    4d46:	af 90       	pop	r10
    4d48:	9f 90       	pop	r9
    4d4a:	08 95       	ret

00004d4c <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)>:
    4d4c:	0f 93       	push	r16
    4d4e:	1f 93       	push	r17
    4d50:	cf 93       	push	r28
    4d52:	df 93       	push	r29
    4d54:	ec 01       	movw	r28, r24
    4d56:	8b 01       	movw	r16, r22
    4d58:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_micros>
    4d5c:	2f 85       	ldd	r18, Y+15	; 0x0f
    4d5e:	38 89       	ldd	r19, Y+16	; 0x10
    4d60:	62 1b       	sub	r22, r18
    4d62:	73 0b       	sbc	r23, r19
    4d64:	6a 30       	cpi	r22, 0x0A	; 10
    4d66:	71 05       	cpc	r23, r1
    4d68:	b8 f3       	brcs	.-18     	; 0x4d58 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xc>
    4d6a:	f8 94       	cli
    4d6c:	c8 01       	movw	r24, r16
    4d6e:	09 de       	rcall	.-1006   	; 0x4982 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showRGBInternal(PixelController<(EOrder)66, 1, 4294967295ul>&)>
    4d70:	f8 01       	movw	r30, r16
    4d72:	42 81       	ldd	r20, Z+2	; 0x02
    4d74:	53 81       	ldd	r21, Z+3	; 0x03
    4d76:	20 ee       	ldi	r18, 0xE0	; 224
    4d78:	31 e0       	ldi	r19, 0x01	; 1
    4d7a:	da 01       	movw	r26, r20
    4d7c:	0e 94 5d 45 	call	0x8aba	; 0x8aba <__usmulhisi3>
    4d80:	dc 01       	movw	r26, r24
    4d82:	cb 01       	movw	r24, r22
    4d84:	f4 e0       	ldi	r31, 0x04	; 4
    4d86:	b6 95       	lsr	r27
    4d88:	a7 95       	ror	r26
    4d8a:	97 95       	ror	r25
    4d8c:	87 95       	ror	r24
    4d8e:	fa 95       	dec	r31
    4d90:	d1 f7       	brne	.-12     	; 0x4d86 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x3a>
    4d92:	30 e0       	ldi	r19, 0x00	; 0
    4d94:	20 e0       	ldi	r18, 0x00	; 0
    4d96:	b9 01       	movw	r22, r18
    4d98:	ea e9       	ldi	r30, 0x9A	; 154
    4d9a:	4e 9f       	mul	r20, r30
    4d9c:	04 0e       	add	r0, r20
    4d9e:	61 1d       	adc	r22, r1
    4da0:	5e 9f       	mul	r21, r30
    4da2:	60 0d       	add	r22, r0
    4da4:	71 1d       	adc	r23, r1
    4da6:	11 24       	eor	r1, r1
    4da8:	65 0f       	add	r22, r21
    4daa:	71 1d       	adc	r23, r1
    4dac:	86 0f       	add	r24, r22
    4dae:	97 1f       	adc	r25, r23
    4db0:	a1 1d       	adc	r26, r1
    4db2:	b1 1d       	adc	r27, r1
    4db4:	89 3e       	cpi	r24, 0xE9	; 233
    4db6:	f3 e0       	ldi	r31, 0x03	; 3
    4db8:	9f 07       	cpc	r25, r31
    4dba:	a1 05       	cpc	r26, r1
    4dbc:	b1 05       	cpc	r27, r1
    4dbe:	08 f4       	brcc	.+2      	; 0x4dc2 <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x76>
    4dc0:	34 c0       	rjmp	.+104    	; 0x4e2a <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0xde>
    4dc2:	88 5e       	subi	r24, 0xE8	; 232
    4dc4:	93 40       	sbci	r25, 0x03	; 3
    4dc6:	a1 09       	sbc	r26, r1
    4dc8:	b1 09       	sbc	r27, r1
    4dca:	42 e0       	ldi	r20, 0x02	; 2
    4dcc:	b6 95       	lsr	r27
    4dce:	a7 95       	ror	r26
    4dd0:	97 95       	ror	r25
    4dd2:	87 95       	ror	r24
    4dd4:	4a 95       	dec	r20
    4dd6:	d1 f7       	brne	.-12     	; 0x4dcc <ClocklessController<(unsigned char)12, 4, 10, 6, (EOrder)66, 0, false, 10>::showPixels(PixelController<(EOrder)66, 1, 4294967295ul>&)+0x80>
    4dd8:	47 e0       	ldi	r20, 0x07	; 7
    4dda:	84 9f       	mul	r24, r20
    4ddc:	08 0e       	add	r0, r24
    4dde:	21 1d       	adc	r18, r1
    4de0:	94 9f       	mul	r25, r20
    4de2:	20 0d       	add	r18, r0
    4de4:	31 1d       	adc	r19, r1
    4de6:	11 24       	eor	r1, r1
    4de8:	29 0f       	add	r18, r25
    4dea:	31 1d       	adc	r19, r1
    4dec:	60 91 00 10 	lds	r22, 0x1000	; 0x801000 <gTimeErrorAccum256ths>
    4df0:	70 e0       	ldi	r23, 0x00	; 0
    4df2:	86 0f       	add	r24, r22
    4df4:	97 1f       	adc	r25, r23
    4df6:	82 0f       	add	r24, r18
    4df8:	93 1f       	adc	r25, r19
    4dfa:	40 91 1f 10 	lds	r20, 0x101F	; 0x80101f <timer0_millis_count>
    4dfe:	50 91 20 10 	lds	r21, 0x1020	; 0x801020 <timer0_millis_count+0x1>
    4e02:	60 91 21 10 	lds	r22, 0x1021	; 0x801021 <timer0_millis_count+0x2>
    4e06:	70 91 22 10 	lds	r23, 0x1022	; 0x801022 <timer0_millis_count+0x3>
    4e0a:	29 2f       	mov	r18, r25
    4e0c:	33 27       	eor	r19, r19
    4e0e:	42 0f       	add	r20, r18
    4e10:	53 1f       	adc	r21, r19
    4e12:	61 1d       	adc	r22, r1
    4e14:	71 1d       	adc	r23, r1
    4e16:	40 93 1f 10 	sts	0x101F, r20	; 0x80101f <timer0_millis_count>
    4e1a:	50 93 20 10 	sts	0x1020, r21	; 0x801020 <timer0_millis_count+0x1>
    4e1e:	60 93 21 10 	sts	0x1021, r22	; 0x801021 <timer0_millis_count+0x2>
    4e22:	70 93 22 10 	sts	0x1022, r23	; 0x801022 <timer0_millis_count+0x3>
    4e26:	80 93 00 10 	sts	0x1000, r24	; 0x801000 <gTimeErrorAccum256ths>
    4e2a:	78 94       	sei
    4e2c:	0e 94 db 3b 	call	0x77b6	; 0x77b6 <_micros>
    4e30:	78 8b       	std	Y+16, r23	; 0x10
    4e32:	6f 87       	std	Y+15, r22	; 0x0f
    4e34:	df 91       	pop	r29
    4e36:	cf 91       	pop	r28
    4e38:	1f 91       	pop	r17
    4e3a:	0f 91       	pop	r16
    4e3c:	08 95       	ret

00004e3e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>:
    4e3e:	0f 93       	push	r16
    4e40:	1f 93       	push	r17
    4e42:	cf 93       	push	r28
    4e44:	df 93       	push	r29
    4e46:	20 91 26 09 	lds	r18, 0x0926	; 0x800926 <__data_end>
    4e4a:	2f 5f       	subi	r18, 0xFF	; 255
    4e4c:	32 2f       	mov	r19, r18
    4e4e:	37 70       	andi	r19, 0x07	; 7
    4e50:	30 93 26 09 	sts	0x0926, r19	; 0x800926 <__data_end>
    4e54:	20 ff       	sbrs	r18, 0
    4e56:	2b c0       	rjmp	.+86     	; 0x4eae <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x70>
    4e58:	20 e8       	ldi	r18, 0x80	; 128
    4e5a:	31 fd       	sbrc	r19, 1
    4e5c:	20 64       	ori	r18, 0x40	; 64
    4e5e:	34 70       	andi	r19, 0x04	; 4
    4e60:	09 f0       	breq	.+2      	; 0x4e64 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x26>
    4e62:	20 62       	ori	r18, 0x20	; 32
    4e64:	20 5f       	subi	r18, 0xF0	; 240
    4e66:	fc 01       	movw	r30, r24
    4e68:	ec 01       	movw	r28, r24
    4e6a:	23 96       	adiw	r28, 0x03	; 3
    4e6c:	00 e0       	ldi	r16, 0x00	; 0
    4e6e:	11 e0       	ldi	r17, 0x01	; 1
    4e70:	64 85       	ldd	r22, Z+12	; 0x0c
    4e72:	66 23       	and	r22, r22
    4e74:	29 f0       	breq	.+10     	; 0x4e80 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x42>
    4e76:	70 e0       	ldi	r23, 0x00	; 0
    4e78:	c8 01       	movw	r24, r16
    4e7a:	0e 94 f4 44 	call	0x89e8	; 0x89e8 <__divmodhi4>
    4e7e:	6f 5f       	subi	r22, 0xFF	; 255
    4e80:	61 87       	std	Z+9, r22	; 0x09
    4e82:	32 2f       	mov	r19, r18
    4e84:	36 9f       	mul	r19, r22
    4e86:	03 0e       	add	r0, r19
    4e88:	30 e0       	ldi	r19, 0x00	; 0
    4e8a:	31 1d       	adc	r19, r1
    4e8c:	11 24       	eor	r1, r1
    4e8e:	31 11       	cpse	r19, r1
    4e90:	10 c0       	rjmp	.+32     	; 0x4eb2 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x74>
    4e92:	16 82       	std	Z+6, r1	; 0x06
    4e94:	66 23       	and	r22, r22
    4e96:	11 f0       	breq	.+4      	; 0x4e9c <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x5e>
    4e98:	61 50       	subi	r22, 0x01	; 1
    4e9a:	61 87       	std	Z+9, r22	; 0x09
    4e9c:	31 96       	adiw	r30, 0x01	; 1
    4e9e:	ec 17       	cp	r30, r28
    4ea0:	fd 07       	cpc	r31, r29
    4ea2:	31 f7       	brne	.-52     	; 0x4e70 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x32>
    4ea4:	df 91       	pop	r29
    4ea6:	cf 91       	pop	r28
    4ea8:	1f 91       	pop	r17
    4eaa:	0f 91       	pop	r16
    4eac:	08 95       	ret
    4eae:	20 e0       	ldi	r18, 0x00	; 0
    4eb0:	d4 cf       	rjmp	.-88     	; 0x4e5a <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x1c>
    4eb2:	31 50       	subi	r19, 0x01	; 1
    4eb4:	36 83       	std	Z+6, r19	; 0x06
    4eb6:	ee cf       	rjmp	.-36     	; 0x4e94 <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()+0x56>

00004eb8 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)>:
    4eb8:	0f 93       	push	r16
    4eba:	1f 93       	push	r17
    4ebc:	cf 93       	push	r28
    4ebe:	df 93       	push	r29
    4ec0:	cd b7       	in	r28, 0x3d	; 61
    4ec2:	de b7       	in	r29, 0x3e	; 62
    4ec4:	62 97       	sbiw	r28, 0x12	; 18
    4ec6:	0f b6       	in	r0, 0x3f	; 63
    4ec8:	f8 94       	cli
    4eca:	de bf       	out	0x3e, r29	; 62
    4ecc:	0f be       	out	0x3f, r0	; 63
    4ece:	cd bf       	out	0x3d, r28	; 61
    4ed0:	8c 01       	movw	r16, r24
    4ed2:	f9 01       	movw	r30, r18
    4ed4:	dc 01       	movw	r26, r24
    4ed6:	1c 96       	adiw	r26, 0x0c	; 12
    4ed8:	8c 91       	ld	r24, X
    4eda:	7a 83       	std	Y+2, r23	; 0x02
    4edc:	69 83       	std	Y+1, r22	; 0x01
    4ede:	5c 83       	std	Y+4, r21	; 0x04
    4ee0:	4b 83       	std	Y+3, r20	; 0x03
    4ee2:	5e 83       	std	Y+6, r21	; 0x06
    4ee4:	4d 83       	std	Y+5, r20	; 0x05
    4ee6:	90 81       	ld	r25, Z
    4ee8:	9d 87       	std	Y+13, r25	; 0x0d
    4eea:	91 81       	ldd	r25, Z+1	; 0x01
    4eec:	9e 87       	std	Y+14, r25	; 0x0e
    4eee:	92 81       	ldd	r25, Z+2	; 0x02
    4ef0:	9f 87       	std	Y+15, r25	; 0x0f
    4ef2:	81 30       	cpi	r24, 0x01	; 1
    4ef4:	e9 f4       	brne	.+58     	; 0x4f30 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x78>
    4ef6:	ce 01       	movw	r24, r28
    4ef8:	01 96       	adiw	r24, 0x01	; 1
    4efa:	a1 df       	rcall	.-190    	; 0x4e3e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    4efc:	83 e0       	ldi	r24, 0x03	; 3
    4efe:	88 8b       	std	Y+16, r24	; 0x10
    4f00:	1a 8a       	std	Y+18, r1	; 0x12
    4f02:	19 8a       	std	Y+17, r1	; 0x11
    4f04:	d8 01       	movw	r26, r16
    4f06:	ed 91       	ld	r30, X+
    4f08:	fc 91       	ld	r31, X
    4f0a:	04 84       	ldd	r0, Z+12	; 0x0c
    4f0c:	f5 85       	ldd	r31, Z+13	; 0x0d
    4f0e:	e0 2d       	mov	r30, r0
    4f10:	be 01       	movw	r22, r28
    4f12:	6f 5f       	subi	r22, 0xFF	; 255
    4f14:	7f 4f       	sbci	r23, 0xFF	; 255
    4f16:	c8 01       	movw	r24, r16
    4f18:	09 95       	icall
    4f1a:	62 96       	adiw	r28, 0x12	; 18
    4f1c:	0f b6       	in	r0, 0x3f	; 63
    4f1e:	f8 94       	cli
    4f20:	de bf       	out	0x3e, r29	; 62
    4f22:	0f be       	out	0x3f, r0	; 63
    4f24:	cd bf       	out	0x3d, r28	; 61
    4f26:	df 91       	pop	r29
    4f28:	cf 91       	pop	r28
    4f2a:	1f 91       	pop	r17
    4f2c:	0f 91       	pop	r16
    4f2e:	08 95       	ret
    4f30:	1c 86       	std	Y+12, r1	; 0x0c
    4f32:	1b 86       	std	Y+11, r1	; 0x0b
    4f34:	1a 86       	std	Y+10, r1	; 0x0a
    4f36:	19 86       	std	Y+9, r1	; 0x09
    4f38:	18 86       	std	Y+8, r1	; 0x08
    4f3a:	1f 82       	std	Y+7, r1	; 0x07
    4f3c:	df cf       	rjmp	.-66     	; 0x4efc <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::show(CRGB const*, int, CRGB)+0x44>

00004f3e <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)>:
    4f3e:	0f 93       	push	r16
    4f40:	1f 93       	push	r17
    4f42:	cf 93       	push	r28
    4f44:	df 93       	push	r29
    4f46:	cd b7       	in	r28, 0x3d	; 61
    4f48:	de b7       	in	r29, 0x3e	; 62
    4f4a:	62 97       	sbiw	r28, 0x12	; 18
    4f4c:	0f b6       	in	r0, 0x3f	; 63
    4f4e:	f8 94       	cli
    4f50:	de bf       	out	0x3e, r29	; 62
    4f52:	0f be       	out	0x3f, r0	; 63
    4f54:	cd bf       	out	0x3d, r28	; 61
    4f56:	8c 01       	movw	r16, r24
    4f58:	f9 01       	movw	r30, r18
    4f5a:	dc 01       	movw	r26, r24
    4f5c:	1c 96       	adiw	r26, 0x0c	; 12
    4f5e:	8c 91       	ld	r24, X
    4f60:	7a 83       	std	Y+2, r23	; 0x02
    4f62:	69 83       	std	Y+1, r22	; 0x01
    4f64:	5c 83       	std	Y+4, r21	; 0x04
    4f66:	4b 83       	std	Y+3, r20	; 0x03
    4f68:	5e 83       	std	Y+6, r21	; 0x06
    4f6a:	4d 83       	std	Y+5, r20	; 0x05
    4f6c:	90 81       	ld	r25, Z
    4f6e:	9d 87       	std	Y+13, r25	; 0x0d
    4f70:	91 81       	ldd	r25, Z+1	; 0x01
    4f72:	9e 87       	std	Y+14, r25	; 0x0e
    4f74:	92 81       	ldd	r25, Z+2	; 0x02
    4f76:	9f 87       	std	Y+15, r25	; 0x0f
    4f78:	81 30       	cpi	r24, 0x01	; 1
    4f7a:	e1 f4       	brne	.+56     	; 0x4fb4 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x76>
    4f7c:	ce 01       	movw	r24, r28
    4f7e:	01 96       	adiw	r24, 0x01	; 1
    4f80:	5e df       	rcall	.-324    	; 0x4e3e <PixelController<(EOrder)66, 1, 4294967295ul>::init_binary_dithering()>
    4f82:	18 8a       	std	Y+16, r1	; 0x10
    4f84:	1a 8a       	std	Y+18, r1	; 0x12
    4f86:	19 8a       	std	Y+17, r1	; 0x11
    4f88:	d8 01       	movw	r26, r16
    4f8a:	ed 91       	ld	r30, X+
    4f8c:	fc 91       	ld	r31, X
    4f8e:	04 84       	ldd	r0, Z+12	; 0x0c
    4f90:	f5 85       	ldd	r31, Z+13	; 0x0d
    4f92:	e0 2d       	mov	r30, r0
    4f94:	be 01       	movw	r22, r28
    4f96:	6f 5f       	subi	r22, 0xFF	; 255
    4f98:	7f 4f       	sbci	r23, 0xFF	; 255
    4f9a:	c8 01       	movw	r24, r16
    4f9c:	09 95       	icall
    4f9e:	62 96       	adiw	r28, 0x12	; 18
    4fa0:	0f b6       	in	r0, 0x3f	; 63
    4fa2:	f8 94       	cli
    4fa4:	de bf       	out	0x3e, r29	; 62
    4fa6:	0f be       	out	0x3f, r0	; 63
    4fa8:	cd bf       	out	0x3d, r28	; 61
    4faa:	df 91       	pop	r29
    4fac:	cf 91       	pop	r28
    4fae:	1f 91       	pop	r17
    4fb0:	0f 91       	pop	r16
    4fb2:	08 95       	ret
    4fb4:	1c 86       	std	Y+12, r1	; 0x0c
    4fb6:	1b 86       	std	Y+11, r1	; 0x0b
    4fb8:	1a 86       	std	Y+10, r1	; 0x0a
    4fba:	19 86       	std	Y+9, r1	; 0x09
    4fbc:	18 86       	std	Y+8, r1	; 0x08
    4fbe:	1f 82       	std	Y+7, r1	; 0x07
    4fc0:	e0 cf       	rjmp	.-64     	; 0x4f82 <CPixelLEDController<(EOrder)66, 1, 4294967295ul>::showColor(CRGB const&, int, CRGB)+0x44>

00004fc2 <_GLOBAL__sub_I_matrix>:
    4fc2:	0f b6       	in	r0, 0x3f	; 63
    4fc4:	f8 94       	cli
    4fc6:	80 91 1f 10 	lds	r24, 0x101F	; 0x80101f <timer0_millis_count>
    4fca:	90 91 20 10 	lds	r25, 0x1020	; 0x801020 <timer0_millis_count+0x1>
    4fce:	a0 91 21 10 	lds	r26, 0x1021	; 0x801021 <timer0_millis_count+0x2>
    4fd2:	b0 91 22 10 	lds	r27, 0x1022	; 0x801022 <timer0_millis_count+0x3>
    4fd6:	0f be       	out	0x3f, r0	; 63
    4fd8:	90 93 f6 09 	sts	0x09F6, r25	; 0x8009f6 <lastLEDchange+0x1>
    4fdc:	80 93 f5 09 	sts	0x09F5, r24	; 0x8009f5 <lastLEDchange>
    4fe0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4fe4:	80 93 b9 09 	sts	0x09B9, r24	; 0x8009b9 <r>
    4fe8:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4fec:	80 93 b8 09 	sts	0x09B8, r24	; 0x8009b8 <g>
    4ff0:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <getRandomColorValue()>
    4ff4:	80 93 b7 09 	sts	0x09B7, r24	; 0x8009b7 <b>
    4ff8:	6c e0       	ldi	r22, 0x0C	; 12
    4ffa:	75 e0       	ldi	r23, 0x05	; 5
    4ffc:	8a e6       	ldi	r24, 0x6A	; 106
    4ffe:	99 e0       	ldi	r25, 0x09	; 9
    5000:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5004:	67 e0       	ldi	r22, 0x07	; 7
    5006:	75 e0       	ldi	r23, 0x05	; 5
    5008:	81 e7       	ldi	r24, 0x71	; 113
    500a:	99 e0       	ldi	r25, 0x09	; 9
    500c:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5010:	65 e0       	ldi	r22, 0x05	; 5
    5012:	75 e0       	ldi	r23, 0x05	; 5
    5014:	88 e7       	ldi	r24, 0x78	; 120
    5016:	99 e0       	ldi	r25, 0x09	; 9
    5018:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    501c:	62 e0       	ldi	r22, 0x02	; 2
    501e:	75 e0       	ldi	r23, 0x05	; 5
    5020:	8f e7       	ldi	r24, 0x7F	; 127
    5022:	99 e0       	ldi	r25, 0x09	; 9
    5024:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5028:	6d ef       	ldi	r22, 0xFD	; 253
    502a:	74 e0       	ldi	r23, 0x04	; 4
    502c:	86 e8       	ldi	r24, 0x86	; 134
    502e:	99 e0       	ldi	r25, 0x09	; 9
    5030:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5034:	69 ef       	ldi	r22, 0xF9	; 249
    5036:	74 e0       	ldi	r23, 0x04	; 4
    5038:	8d e8       	ldi	r24, 0x8D	; 141
    503a:	99 e0       	ldi	r25, 0x09	; 9
    503c:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5040:	63 ef       	ldi	r22, 0xF3	; 243
    5042:	74 e0       	ldi	r23, 0x04	; 4
    5044:	84 e9       	ldi	r24, 0x94	; 148
    5046:	99 e0       	ldi	r25, 0x09	; 9
    5048:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    504c:	60 ef       	ldi	r22, 0xF0	; 240
    504e:	74 e0       	ldi	r23, 0x04	; 4
    5050:	8b e9       	ldi	r24, 0x9B	; 155
    5052:	99 e0       	ldi	r25, 0x09	; 9
    5054:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5058:	6b ee       	ldi	r22, 0xEB	; 235
    505a:	74 e0       	ldi	r23, 0x04	; 4
    505c:	82 ea       	ldi	r24, 0xA2	; 162
    505e:	99 e0       	ldi	r25, 0x09	; 9
    5060:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5064:	66 ee       	ldi	r22, 0xE6	; 230
    5066:	74 e0       	ldi	r23, 0x04	; 4
    5068:	89 ea       	ldi	r24, 0xA9	; 169
    506a:	99 e0       	ldi	r25, 0x09	; 9
    506c:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5070:	61 ee       	ldi	r22, 0xE1	; 225
    5072:	74 e0       	ldi	r23, 0x04	; 4
    5074:	80 e4       	ldi	r24, 0x40	; 64
    5076:	99 e0       	ldi	r25, 0x09	; 9
    5078:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    507c:	6a ed       	ldi	r22, 0xDA	; 218
    507e:	74 e0       	ldi	r23, 0x04	; 4
    5080:	87 e4       	ldi	r24, 0x47	; 71
    5082:	99 e0       	ldi	r25, 0x09	; 9
    5084:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5088:	61 ed       	ldi	r22, 0xD1	; 209
    508a:	74 e0       	ldi	r23, 0x04	; 4
    508c:	8e e4       	ldi	r24, 0x4E	; 78
    508e:	99 e0       	ldi	r25, 0x09	; 9
    5090:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    5094:	6d ec       	ldi	r22, 0xCD	; 205
    5096:	74 e0       	ldi	r23, 0x04	; 4
    5098:	85 e5       	ldi	r24, 0x55	; 85
    509a:	99 e0       	ldi	r25, 0x09	; 9
    509c:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    50a0:	69 ec       	ldi	r22, 0xC9	; 201
    50a2:	74 e0       	ldi	r23, 0x04	; 4
    50a4:	8c e5       	ldi	r24, 0x5C	; 92
    50a6:	99 e0       	ldi	r25, 0x09	; 9
    50a8:	0e 94 0d 43 	call	0x861a	; 0x861a <String::String(char const*)>
    50ac:	62 ec       	ldi	r22, 0xC2	; 194
    50ae:	74 e0       	ldi	r23, 0x04	; 4
    50b0:	83 e6       	ldi	r24, 0x63	; 99
    50b2:	99 e0       	ldi	r25, 0x09	; 9
    50b4:	0c 94 0d 43 	jmp	0x861a	; 0x861a <String::String(char const*)>

000050b8 <_GLOBAL__sub_D_matrix>:
    50b8:	cf 93       	push	r28
    50ba:	df 93       	push	r29
    50bc:	ca e6       	ldi	r28, 0x6A	; 106
    50be:	d9 e0       	ldi	r29, 0x09	; 9
    50c0:	27 97       	sbiw	r28, 0x07	; 7
    50c2:	ce 01       	movw	r24, r28
    50c4:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    50c8:	89 e0       	ldi	r24, 0x09	; 9
    50ca:	c0 34       	cpi	r28, 0x40	; 64
    50cc:	d8 07       	cpc	r29, r24
    50ce:	c1 f7       	brne	.-16     	; 0x50c0 <_GLOBAL__sub_D_matrix+0x8>
    50d0:	c0 eb       	ldi	r28, 0xB0	; 176
    50d2:	d9 e0       	ldi	r29, 0x09	; 9
    50d4:	27 97       	sbiw	r28, 0x07	; 7
    50d6:	ce 01       	movw	r24, r28
    50d8:	0e 94 a4 42 	call	0x8548	; 0x8548 <String::~String()>
    50dc:	89 e0       	ldi	r24, 0x09	; 9
    50de:	ca 36       	cpi	r28, 0x6A	; 106
    50e0:	d8 07       	cpc	r29, r24
    50e2:	c1 f7       	brne	.-16     	; 0x50d4 <_GLOBAL__sub_D_matrix+0x1c>
    50e4:	df 91       	pop	r29
    50e6:	cf 91       	pop	r28
    50e8:	08 95       	ret

000050ea <checkIncomingMIDI()>:
    50ea:	8a e2       	ldi	r24, 0x2A	; 42
    50ec:	90 e1       	ldi	r25, 0x10	; 16
    50ee:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <HardwareSerial::available()>
    50f2:	89 2b       	or	r24, r25
    50f4:	d9 f0       	breq	.+54     	; 0x512c <checkIncomingMIDI()+0x42>
    50f6:	8a e2       	ldi	r24, 0x2A	; 42
    50f8:	90 e1       	ldi	r25, 0x10	; 16
    50fa:	0e 94 3b 3e 	call	0x7c76	; 0x7c76 <HardwareSerial::read()>
    50fe:	80 93 0a 0a 	sts	0x0A0A, r24	; 0x800a0a <incomingMidiByte>
    5102:	68 2f       	mov	r22, r24
    5104:	8f e9       	ldi	r24, 0x9F	; 159
    5106:	90 e1       	ldi	r25, 0x10	; 16
    5108:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    510c:	60 91 0a 0a 	lds	r22, 0x0A0A	; 0x800a0a <incomingMidiByte>
    5110:	6f 3f       	cpi	r22, 0xFF	; 255
    5112:	61 f0       	breq	.+24     	; 0x512c <checkIncomingMIDI()+0x42>
    5114:	67 ff       	sbrs	r22, 7
    5116:	11 c0       	rjmp	.+34     	; 0x513a <checkIncomingMIDI()+0x50>
    5118:	60 93 09 0a 	sts	0x0A09, r22	; 0x800a09 <midiStatusByte>
    511c:	10 92 08 0a 	sts	0x0A08, r1	; 0x800a08 <midiDataByte1>
    5120:	10 92 07 0a 	sts	0x0A07, r1	; 0x800a07 <midiDataByte2>
    5124:	8f e9       	ldi	r24, 0x9F	; 159
    5126:	90 e1       	ldi	r25, 0x10	; 16
    5128:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    512c:	8a e2       	ldi	r24, 0x2A	; 42
    512e:	90 e1       	ldi	r25, 0x10	; 16
    5130:	0e 94 08 3e 	call	0x7c10	; 0x7c10 <HardwareSerial::available()>
    5134:	89 2b       	or	r24, r25
    5136:	c9 f6       	brne	.-78     	; 0x50ea <checkIncomingMIDI()>
    5138:	08 95       	ret
    513a:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <midiDataByte1>
    513e:	81 11       	cpse	r24, r1
    5140:	37 c0       	rjmp	.+110    	; 0x51b0 <checkIncomingMIDI()+0xc6>
    5142:	60 93 08 0a 	sts	0x0A08, r22	; 0x800a08 <midiDataByte1>
    5146:	60 91 09 0a 	lds	r22, 0x0A09	; 0x800a09 <midiStatusByte>
    514a:	8f e9       	ldi	r24, 0x9F	; 159
    514c:	90 e1       	ldi	r25, 0x10	; 16
    514e:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::print(unsigned char)>
    5152:	63 e8       	ldi	r22, 0x83	; 131
    5154:	72 e0       	ldi	r23, 0x02	; 2
    5156:	8f e9       	ldi	r24, 0x9F	; 159
    5158:	90 e1       	ldi	r25, 0x10	; 16
    515a:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    515e:	60 91 08 0a 	lds	r22, 0x0A08	; 0x800a08 <midiDataByte1>
    5162:	8f e9       	ldi	r24, 0x9F	; 159
    5164:	90 e1       	ldi	r25, 0x10	; 16
    5166:	0e 94 94 05 	call	0xb28	; 0xb28 <Print::print(unsigned char)>
    516a:	63 e8       	ldi	r22, 0x83	; 131
    516c:	72 e0       	ldi	r23, 0x02	; 2
    516e:	8f e9       	ldi	r24, 0x9F	; 159
    5170:	90 e1       	ldi	r25, 0x10	; 16
    5172:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    5176:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <midiDataByte2>
    517a:	8f e9       	ldi	r24, 0x9F	; 159
    517c:	90 e1       	ldi	r25, 0x10	; 16
    517e:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    5182:	80 91 09 0a 	lds	r24, 0x0A09	; 0x800a09 <midiStatusByte>
    5186:	89 3b       	cpi	r24, 0xB9	; 185
    5188:	89 f6       	brne	.-94     	; 0x512c <checkIncomingMIDI()+0x42>
    518a:	80 91 08 0a 	lds	r24, 0x0A08	; 0x800a08 <midiDataByte1>
    518e:	86 31       	cpi	r24, 0x16	; 22
    5190:	69 f6       	brne	.-102    	; 0x512c <checkIncomingMIDI()+0x42>
    5192:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <midiDataByte2>
    5196:	88 23       	and	r24, r24
    5198:	49 f2       	breq	.-110    	; 0x512c <checkIncomingMIDI()+0x42>
    519a:	0e 94 fc 16 	call	0x2df8	; 0x2df8 <switchToSong(unsigned char)>
    519e:	65 e8       	ldi	r22, 0x85	; 133
    51a0:	72 e0       	ldi	r23, 0x02	; 2
    51a2:	8f e9       	ldi	r24, 0x9F	; 159
    51a4:	90 e1       	ldi	r25, 0x10	; 16
    51a6:	0e 94 93 05 	call	0xb26	; 0xb26 <Print::print(char const*)>
    51aa:	60 91 07 0a 	lds	r22, 0x0A07	; 0x800a07 <midiDataByte2>
    51ae:	ba cf       	rjmp	.-140    	; 0x5124 <checkIncomingMIDI()+0x3a>
    51b0:	80 91 07 0a 	lds	r24, 0x0A07	; 0x800a07 <midiDataByte2>
    51b4:	81 11       	cpse	r24, r1
    51b6:	c7 cf       	rjmp	.-114    	; 0x5146 <checkIncomingMIDI()+0x5c>
    51b8:	60 93 07 0a 	sts	0x0A07, r22	; 0x800a07 <midiDataByte2>
    51bc:	c4 cf       	rjmp	.-120    	; 0x5146 <checkIncomingMIDI()+0x5c>

000051be <loop>:
    51be:	8f 92       	push	r8
    51c0:	9f 92       	push	r9
    51c2:	af 92       	push	r10
    51c4:	bf 92       	push	r11
    51c6:	cf 92       	push	r12
    51c8:	df 92       	push	r13
    51ca:	ef 92       	push	r14
    51cc:	ff 92       	push	r15
    51ce:	0f 93       	push	r16
    51d0:	1f 93       	push	r17
    51d2:	cf 93       	push	r28
    51d4:	80 91 f7 09 	lds	r24, 0x09F7	; 0x8009f7 <ISR_USART_got_a_byte>
    51d8:	88 23       	and	r24, r24
    51da:	41 f0       	breq	.+16     	; 0x51ec <loop+0x2e>
    51dc:	60 91 f8 09 	lds	r22, 0x09F8	; 0x8009f8 <ISR_received_USART_byte>
    51e0:	8f e9       	ldi	r24, 0x9F	; 159
    51e2:	90 e1       	ldi	r25, 0x10	; 16
    51e4:	0e 94 9b 05 	call	0xb36	; 0xb36 <Print::println(unsigned char)>
    51e8:	10 92 f7 09 	sts	0x09F7, r1	; 0x8009f7 <ISR_USART_got_a_byte>
    51ec:	80 91 f9 09 	lds	r24, 0x09F9	; 0x8009f9 <OneSecondHasPast>
    51f0:	88 23       	and	r24, r24
    51f2:	39 f0       	breq	.+14     	; 0x5202 <loop+0x44>
    51f4:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <secondsForVoltage>
    51f8:	8f 5f       	subi	r24, 0xFF	; 255
    51fa:	80 93 04 0a 	sts	0x0A04, r24	; 0x800a04 <secondsForVoltage>
    51fe:	10 92 f9 09 	sts	0x09F9, r1	; 0x8009f9 <OneSecondHasPast>
    5202:	80 91 04 0a 	lds	r24, 0x0A04	; 0x800a04 <secondsForVoltage>
    5206:	88 23       	and	r24, r24
    5208:	09 f4       	brne	.+2      	; 0x520c <loop+0x4e>
    520a:	46 c0       	rjmp	.+140    	; 0x5298 <loop+0xda>
    520c:	c0 91 06 0a 	lds	r28, 0x0A06	; 0x800a06 <voltageSmooth>
    5210:	10 92 04 0a 	sts	0x0A04, r1	; 0x800a04 <secondsForVoltage>
    5214:	88 e2       	ldi	r24, 0x28	; 40
    5216:	0e 94 23 3a 	call	0x7446	; 0x7446 <analogRead>
    521a:	bc 01       	movw	r22, r24
    521c:	99 0f       	add	r25, r25
    521e:	88 0b       	sbc	r24, r24
    5220:	99 0b       	sbc	r25, r25
    5222:	1f 92       	push	r1
    5224:	1f 92       	push	r1
    5226:	1f 92       	push	r1
    5228:	28 e7       	ldi	r18, 0x78	; 120
    522a:	2f 93       	push	r18
    522c:	a1 2c       	mov	r10, r1
    522e:	b1 2c       	mov	r11, r1
    5230:	65 01       	movw	r12, r10
    5232:	ee 24       	eor	r14, r14
    5234:	ea 94       	dec	r14
    5236:	13 e0       	ldi	r17, 0x03	; 3
    5238:	f1 2e       	mov	r15, r17
    523a:	00 e0       	ldi	r16, 0x00	; 0
    523c:	10 e0       	ldi	r17, 0x00	; 0
    523e:	20 e0       	ldi	r18, 0x00	; 0
    5240:	30 e0       	ldi	r19, 0x00	; 0
    5242:	a9 01       	movw	r20, r18
    5244:	0e 94 65 42 	call	0x84ca	; 0x84ca <map(long, long, long, long, long)>
    5248:	4b 01       	movw	r8, r22
    524a:	5c 01       	movw	r10, r24
    524c:	6c 2f       	mov	r22, r28
    524e:	70 e0       	ldi	r23, 0x00	; 0
    5250:	90 e0       	ldi	r25, 0x00	; 0
    5252:	80 e0       	ldi	r24, 0x00	; 0
    5254:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <__floatsisf>
    5258:	23 e3       	ldi	r18, 0x33	; 51
    525a:	33 e3       	ldi	r19, 0x33	; 51
    525c:	43 e3       	ldi	r20, 0x33	; 51
    525e:	5f e3       	ldi	r21, 0x3F	; 63
    5260:	0e 94 6e 44 	call	0x88dc	; 0x88dc <__mulsf3>
    5264:	6b 01       	movw	r12, r22
    5266:	7c 01       	movw	r14, r24
    5268:	c5 01       	movw	r24, r10
    526a:	b4 01       	movw	r22, r8
    526c:	0e 94 e2 43 	call	0x87c4	; 0x87c4 <__floatsisf>
    5270:	2a e9       	ldi	r18, 0x9A	; 154
    5272:	39 e9       	ldi	r19, 0x99	; 153
    5274:	49 e9       	ldi	r20, 0x99	; 153
    5276:	5e e3       	ldi	r21, 0x3E	; 62
    5278:	0e 94 6e 44 	call	0x88dc	; 0x88dc <__mulsf3>
    527c:	9b 01       	movw	r18, r22
    527e:	ac 01       	movw	r20, r24
    5280:	c7 01       	movw	r24, r14
    5282:	b6 01       	movw	r22, r12
    5284:	0e 94 50 43 	call	0x86a0	; 0x86a0 <__addsf3>
    5288:	0e 94 b4 43 	call	0x8768	; 0x8768 <__fixunssfsi>
    528c:	60 93 06 0a 	sts	0x0A06, r22	; 0x800a06 <voltageSmooth>
    5290:	0f 90       	pop	r0
    5292:	0f 90       	pop	r0
    5294:	0f 90       	pop	r0
    5296:	0f 90       	pop	r0
    5298:	80 91 06 0a 	lds	r24, 0x0A06	; 0x800a06 <voltageSmooth>
    529c:	87 36       	cpi	r24, 0x67	; 103
    529e:	08 f4       	brcc	.+2      	; 0x52a2 <loop+0xe4>
    52a0:	54 c0       	rjmp	.+168    	; 0x534a <loop+0x18c>
    52a2:	23 df       	rcall	.-442    	; 0x50ea <checkIncomingMIDI()>
    52a4:	80 91 fd 09 	lds	r24, 0x09FD	; 0x8009fd <flag_processFastLED>
    52a8:	88 23       	and	r24, r24
    52aa:	f9 f0       	breq	.+62     	; 0x52ea <loop+0x12c>
    52ac:	8f e0       	ldi	r24, 0x0F	; 15
    52ae:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <FastLED>
    52b2:	e0 91 0f 0a 	lds	r30, 0x0A0F	; 0x800a0f <songID>
    52b6:	ef 30       	cpi	r30, 0x0F	; 15
    52b8:	b0 f4       	brcc	.+44     	; 0x52e6 <loop+0x128>
    52ba:	f0 e0       	ldi	r31, 0x00	; 0
    52bc:	ee 59       	subi	r30, 0x9E	; 158
    52be:	f6 4d       	sbci	r31, 0xD6	; 214
    52c0:	0c 94 45 45 	jmp	0x8a8a	; 0x8a8a <__tablejump2__>
    52c4:	71 29       	or	r23, r1
    52c6:	81 29       	or	r24, r1
    52c8:	84 29       	or	r24, r4
    52ca:	87 29       	or	r24, r7
    52cc:	8a 29       	or	r24, r10
    52ce:	8d 29       	or	r24, r13
    52d0:	90 29       	or	r25, r0
    52d2:	93 29       	or	r25, r3
    52d4:	96 29       	or	r25, r6
    52d6:	99 29       	or	r25, r9
    52d8:	9c 29       	or	r25, r12
    52da:	9f 29       	or	r25, r15
    52dc:	a1 29       	or	r26, r1
    52de:	a3 29       	or	r26, r3
    52e0:	a3 29       	or	r26, r3
    52e2:	0e 94 fc 17 	call	0x2ff8	; 0x2ff8 <defaultLoop()>
    52e6:	10 92 fd 09 	sts	0x09FD, r1	; 0x8009fd <flag_processFastLED>
    52ea:	cf 91       	pop	r28
    52ec:	1f 91       	pop	r17
    52ee:	0f 91       	pop	r16
    52f0:	ff 90       	pop	r15
    52f2:	ef 90       	pop	r14
    52f4:	df 90       	pop	r13
    52f6:	cf 90       	pop	r12
    52f8:	bf 90       	pop	r11
    52fa:	af 90       	pop	r10
    52fc:	9f 90       	pop	r9
    52fe:	8f 90       	pop	r8
    5300:	08 95       	ret
    5302:	0e 94 b3 18 	call	0x3166	; 0x3166 <LearnToFly()>
    5306:	ef cf       	rjmp	.-34     	; 0x52e6 <loop+0x128>
    5308:	0e 94 74 19 	call	0x32e8	; 0x32e8 <Castle()>
    530c:	ec cf       	rjmp	.-40     	; 0x52e6 <loop+0x128>
    530e:	0e 94 b9 1a 	call	0x3572	; 0x3572 <TooClose()>
    5312:	e9 cf       	rjmp	.-46     	; 0x52e6 <loop+0x128>
    5314:	0e 94 92 1b 	call	0x3724	; 0x3724 <Pokerface()>
    5318:	e6 cf       	rjmp	.-52     	; 0x52e6 <loop+0x128>
    531a:	0e 94 79 1c 	call	0x38f2	; 0x38f2 <UseSomebody()>
    531e:	e3 cf       	rjmp	.-58     	; 0x52e6 <loop+0x128>
    5320:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <NoRoots()>
    5324:	e0 cf       	rjmp	.-64     	; 0x52e6 <loop+0x128>
    5326:	0e 94 6a 1e 	call	0x3cd4	; 0x3cd4 <Firework()>
    532a:	dd cf       	rjmp	.-70     	; 0x52e6 <loop+0x128>
    532c:	0e 94 51 1f 	call	0x3ea2	; 0x3ea2 <Diamonds()>
    5330:	da cf       	rjmp	.-76     	; 0x52e6 <loop+0x128>
    5332:	0e 94 39 20 	call	0x4072	; 0x4072 <SetFire()>
    5336:	d7 cf       	rjmp	.-82     	; 0x52e6 <loop+0x128>
    5338:	0e 94 21 21 	call	0x4242	; 0x4242 <Chandelier()>
    533c:	d4 cf       	rjmp	.-88     	; 0x52e6 <loop+0x128>
    533e:	69 d8       	rcall	.-3886   	; 0x4412 <Titanium()>
    5340:	d2 cf       	rjmp	.-92     	; 0x52e6 <loop+0x128>
    5342:	4f d9       	rcall	.-3426   	; 0x45e2 <SomeoneYouLoved()>
    5344:	d0 cf       	rjmp	.-96     	; 0x52e6 <loop+0x128>
    5346:	35 da       	rcall	.-2966   	; 0x47b2 <ShouldntStop()>
    5348:	ce cf       	rjmp	.-100    	; 0x52e6 <loop+0x128>
    534a:	60 e0       	ldi	r22, 0x00	; 0
    534c:	8f e0       	ldi	r24, 0x0F	; 15
    534e:	90 e1       	ldi	r25, 0x10	; 16
    5350:	0e 94 67 36 	call	0x6cce	; 0x6cce <CFastLED::clear(bool)>
    5354:	8f e0       	ldi	r24, 0x0F	; 15
    5356:	90 e1       	ldi	r25, 0x10	; 16
    5358:	0e 94 c7 05 	call	0xb8e	; 0xb8e <CFastLED::show()>
    535c:	64 ef       	ldi	r22, 0xF4	; 244
    535e:	71 e0       	ldi	r23, 0x01	; 1
    5360:	80 e0       	ldi	r24, 0x00	; 0
    5362:	90 e0       	ldi	r25, 0x00	; 0
    5364:	0e 94 bb 3b 	call	0x7776	; 0x7776 <delay>
    5368:	8f e0       	ldi	r24, 0x0F	; 15
    536a:	80 93 0f 10 	sts	0x100F, r24	; 0x80100f <FastLED>
    536e:	8f ef       	ldi	r24, 0xFF	; 255
    5370:	80 93 10 0a 	sts	0x0A10, r24	; 0x800a10 <leds>
    5374:	10 92 11 0a 	sts	0x0A11, r1	; 0x800a11 <leds+0x1>
    5378:	10 92 12 0a 	sts	0x0A12, r1	; 0x800a12 <leds+0x2>
    537c:	8f e0       	ldi	r24, 0x0F	; 15
    537e:	90 e1       	ldi	r25, 0x10	; 16
    5380:	0e 94 c7 05 	call	0xb8e	; 0xb8e <CFastLED::show()>
    5384:	64 ef       	ldi	r22, 0xF4	; 244
    5386:	71 e0       	ldi	r23, 0x01	; 1
    5388:	80 e0       	ldi	r24, 0x00	; 0
    538a:	90 e0       	ldi	r25, 0x00	; 0
    538c:	cf 91       	pop	r28
    538e:	1f 91       	pop	r17
    5390:	0f 91       	pop	r16
    5392:	ff 90       	pop	r15
    5394:	ef 90       	pop	r14
    5396:	df 90       	pop	r13
    5398:	cf 90       	pop	r12
    539a:	bf 90       	pop	r11
    539c:	af 90       	pop	r10
    539e:	9f 90       	pop	r9
    53a0:	8f 90       	pop	r8
    53a2:	0c 94 bb 3b 	jmp	0x7776	; 0x7776 <delay>

000053a6 <Print::availableForWrite()>:
*/
/**************************************************************************/
void Adafruit_GFX::drawChar(int16_t x, int16_t y, unsigned char c,
  uint16_t color, uint16_t bg, uint8_t size) {
    drawChar(x, y, c, color, bg, size, size);
}
    53a6:	90 e0       	ldi	r25, 0x00	; 0
    53a8:	80 e0       	ldi	r24, 0x00	; 0
    53aa:	08 95       	ret

000053ac <Print::flush()>:
    53ac:	08 95       	ret

000053ae <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)>:
    53ae:	2f 92       	push	r2
    53b0:	3f 92       	push	r3
    53b2:	4f 92       	push	r4
    53b4:	5f 92       	push	r5
    53b6:	6f 92       	push	r6
    53b8:	7f 92       	push	r7
    53ba:	8f 92       	push	r8
    53bc:	9f 92       	push	r9
    53be:	af 92       	push	r10
    53c0:	bf 92       	push	r11
    53c2:	cf 92       	push	r12
    53c4:	df 92       	push	r13
    53c6:	ef 92       	push	r14
    53c8:	ff 92       	push	r15
    53ca:	0f 93       	push	r16
    53cc:	1f 93       	push	r17
    53ce:	cf 93       	push	r28
    53d0:	df 93       	push	r29
    53d2:	00 d0       	rcall	.+0      	; 0x53d4 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x26>
    53d4:	00 d0       	rcall	.+0      	; 0x53d6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x28>
    53d6:	00 d0       	rcall	.+0      	; 0x53d8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x2a>
    53d8:	cd b7       	in	r28, 0x3d	; 61
    53da:	de b7       	in	r29, 0x3e	; 62
    53dc:	3c 01       	movw	r6, r24
    53de:	6a 01       	movw	r12, r20
    53e0:	3e 83       	std	Y+6, r19	; 0x06
    53e2:	2d 83       	std	Y+5, r18	; 0x05
    53e4:	fc 82       	std	Y+4, r15	; 0x04
    53e6:	eb 82       	std	Y+3, r14	; 0x03
    53e8:	58 01       	movw	r10, r16
    53ea:	a4 1a       	sub	r10, r20
    53ec:	b5 0a       	sbc	r11, r21
    53ee:	b7 fe       	sbrs	r11, 7
    53f0:	03 c0       	rjmp	.+6      	; 0x53f8 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x4a>
    53f2:	b1 94       	neg	r11
    53f4:	a1 94       	neg	r10
    53f6:	b1 08       	sbc	r11, r1
    53f8:	8d 80       	ldd	r8, Y+5	; 0x05
    53fa:	9e 80       	ldd	r9, Y+6	; 0x06
    53fc:	86 1a       	sub	r8, r22
    53fe:	97 0a       	sbc	r9, r23
    5400:	97 fe       	sbrs	r9, 7
    5402:	03 c0       	rjmp	.+6      	; 0x540a <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x5c>
    5404:	91 94       	neg	r9
    5406:	81 94       	neg	r8
    5408:	91 08       	sbc	r9, r1
    540a:	8a 14       	cp	r8, r10
    540c:	9b 04       	cpc	r9, r11
    540e:	5c f0       	brlt	.+22     	; 0x5426 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x78>
    5410:	90 2f       	mov	r25, r16
    5412:	81 2f       	mov	r24, r17
    5414:	0d 81       	ldd	r16, Y+5	; 0x05
    5416:	1e 81       	ldd	r17, Y+6	; 0x06
    5418:	9d 83       	std	Y+5, r25	; 0x05
    541a:	8e 83       	std	Y+6, r24	; 0x06
    541c:	9c 2d       	mov	r25, r12
    541e:	8d 2d       	mov	r24, r13
    5420:	6b 01       	movw	r12, r22
    5422:	69 2f       	mov	r22, r25
    5424:	78 2f       	mov	r23, r24
    5426:	0c 15       	cp	r16, r12
    5428:	1d 05       	cpc	r17, r13
    542a:	5c f0       	brlt	.+22     	; 0x5442 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x94>
    542c:	9d 81       	ldd	r25, Y+5	; 0x05
    542e:	8e 81       	ldd	r24, Y+6	; 0x06
    5430:	7e 83       	std	Y+6, r23	; 0x06
    5432:	6d 83       	std	Y+5, r22	; 0x05
    5434:	69 2f       	mov	r22, r25
    5436:	78 2f       	mov	r23, r24
    5438:	90 2f       	mov	r25, r16
    543a:	81 2f       	mov	r24, r17
    543c:	86 01       	movw	r16, r12
    543e:	c9 2e       	mov	r12, r25
    5440:	d8 2e       	mov	r13, r24
    5442:	16 01       	movw	r2, r12
    5444:	20 1a       	sub	r2, r16
    5446:	31 0a       	sbc	r3, r17
    5448:	2b 01       	movw	r4, r22
    544a:	2d 81       	ldd	r18, Y+5	; 0x05
    544c:	3e 81       	ldd	r19, Y+6	; 0x06
    544e:	42 1a       	sub	r4, r18
    5450:	53 0a       	sbc	r5, r19
    5452:	57 fe       	sbrs	r5, 7
    5454:	03 c0       	rjmp	.+6      	; 0x545c <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xae>
    5456:	51 94       	neg	r5
    5458:	41 94       	neg	r4
    545a:	51 08       	sbc	r5, r1
    545c:	71 01       	movw	r14, r2
    545e:	37 fe       	sbrs	r3, 7
    5460:	03 c0       	rjmp	.+6      	; 0x5468 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xba>
    5462:	3f ef       	ldi	r19, 0xFF	; 255
    5464:	e3 1a       	sub	r14, r19
    5466:	f3 0a       	sbc	r15, r19
    5468:	f5 94       	asr	r15
    546a:	e7 94       	ror	r14
    546c:	8d 81       	ldd	r24, Y+5	; 0x05
    546e:	9e 81       	ldd	r25, Y+6	; 0x06
    5470:	86 17       	cp	r24, r22
    5472:	97 07       	cpc	r25, r23
    5474:	5c f5       	brge	.+86     	; 0x54cc <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x11e>
    5476:	a1 e0       	ldi	r26, 0x01	; 1
    5478:	b0 e0       	ldi	r27, 0x00	; 0
    547a:	ba 83       	std	Y+2, r27	; 0x02
    547c:	a9 83       	std	Y+1, r26	; 0x01
    547e:	c0 16       	cp	r12, r16
    5480:	d1 06       	cpc	r13, r17
    5482:	4c f1       	brlt	.+82     	; 0x54d6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x128>
    5484:	d3 01       	movw	r26, r6
    5486:	ed 91       	ld	r30, X+
    5488:	fc 91       	ld	r31, X
    548a:	04 84       	ldd	r0, Z+12	; 0x0c
    548c:	f5 85       	ldd	r31, Z+13	; 0x0d
    548e:	e0 2d       	mov	r30, r0
    5490:	2b 81       	ldd	r18, Y+3	; 0x03
    5492:	3c 81       	ldd	r19, Y+4	; 0x04
    5494:	a8 01       	movw	r20, r16
    5496:	6d 81       	ldd	r22, Y+5	; 0x05
    5498:	7e 81       	ldd	r23, Y+6	; 0x06
    549a:	8a 14       	cp	r8, r10
    549c:	9b 04       	cpc	r9, r11
    549e:	1c f0       	brlt	.+6      	; 0x54a6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xf8>
    54a0:	4d 81       	ldd	r20, Y+5	; 0x05
    54a2:	5e 81       	ldd	r21, Y+6	; 0x06
    54a4:	b8 01       	movw	r22, r16
    54a6:	c3 01       	movw	r24, r6
    54a8:	09 95       	icall
    54aa:	e4 18       	sub	r14, r4
    54ac:	f5 08       	sbc	r15, r5
    54ae:	f7 fe       	sbrs	r15, 7
    54b0:	0a c0       	rjmp	.+20     	; 0x54c6 <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0x118>
    54b2:	2d 81       	ldd	r18, Y+5	; 0x05
    54b4:	3e 81       	ldd	r19, Y+6	; 0x06
    54b6:	89 81       	ldd	r24, Y+1	; 0x01
    54b8:	9a 81       	ldd	r25, Y+2	; 0x02
    54ba:	28 0f       	add	r18, r24
    54bc:	39 1f       	adc	r19, r25
    54be:	3e 83       	std	Y+6, r19	; 0x06
    54c0:	2d 83       	std	Y+5, r18	; 0x05
    54c2:	e2 0c       	add	r14, r2
    54c4:	f3 1c       	adc	r15, r3
    54c6:	0f 5f       	subi	r16, 0xFF	; 255
    54c8:	1f 4f       	sbci	r17, 0xFF	; 255
    54ca:	d9 cf       	rjmp	.-78     	; 0x547e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    54cc:	2f ef       	ldi	r18, 0xFF	; 255
    54ce:	3f ef       	ldi	r19, 0xFF	; 255
    54d0:	3a 83       	std	Y+2, r19	; 0x02
    54d2:	29 83       	std	Y+1, r18	; 0x01
    54d4:	d4 cf       	rjmp	.-88     	; 0x547e <Adafruit_GFX::writeLine(int, int, int, int, unsigned int)+0xd0>
    54d6:	26 96       	adiw	r28, 0x06	; 6
    54d8:	0f b6       	in	r0, 0x3f	; 63
    54da:	f8 94       	cli
    54dc:	de bf       	out	0x3e, r29	; 62
    54de:	0f be       	out	0x3f, r0	; 63
    54e0:	cd bf       	out	0x3d, r28	; 61
    54e2:	df 91       	pop	r29
    54e4:	cf 91       	pop	r28
    54e6:	1f 91       	pop	r17
    54e8:	0f 91       	pop	r16
    54ea:	ff 90       	pop	r15
    54ec:	ef 90       	pop	r14
    54ee:	df 90       	pop	r13
    54f0:	cf 90       	pop	r12
    54f2:	bf 90       	pop	r11
    54f4:	af 90       	pop	r10
    54f6:	9f 90       	pop	r9
    54f8:	8f 90       	pop	r8
    54fa:	7f 90       	pop	r7
    54fc:	6f 90       	pop	r6
    54fe:	5f 90       	pop	r5
    5500:	4f 90       	pop	r4
    5502:	3f 90       	pop	r3
    5504:	2f 90       	pop	r2
    5506:	08 95       	ret

00005508 <Adafruit_GFX::startWrite()>:
    5508:	08 95       	ret

0000550a <Adafruit_GFX::writePixel(int, int, unsigned int)>:
    550a:	dc 01       	movw	r26, r24
    550c:	ed 91       	ld	r30, X+
    550e:	fc 91       	ld	r31, X
    5510:	00 84       	ldd	r0, Z+8	; 0x08
    5512:	f1 85       	ldd	r31, Z+9	; 0x09
    5514:	e0 2d       	mov	r30, r0
    5516:	09 94       	ijmp

00005518 <Adafruit_GFX::writeFastVLine(int, int, int, unsigned int)>:
    5518:	0f 93       	push	r16
    551a:	1f 93       	push	r17
    551c:	dc 01       	movw	r26, r24
    551e:	ed 91       	ld	r30, X+
    5520:	fc 91       	ld	r31, X
    5522:	04 8c       	ldd	r0, Z+28	; 0x1c
    5524:	f5 8d       	ldd	r31, Z+29	; 0x1d
    5526:	e0 2d       	mov	r30, r0
    5528:	09 95       	icall
    552a:	1f 91       	pop	r17
    552c:	0f 91       	pop	r16
    552e:	08 95       	ret

00005530 <Adafruit_GFX::writeFastHLine(int, int, int, unsigned int)>:
    5530:	0f 93       	push	r16
    5532:	1f 93       	push	r17
    5534:	dc 01       	movw	r26, r24
    5536:	ed 91       	ld	r30, X+
    5538:	fc 91       	ld	r31, X
    553a:	06 8c       	ldd	r0, Z+30	; 0x1e
    553c:	f7 8d       	ldd	r31, Z+31	; 0x1f
    553e:	e0 2d       	mov	r30, r0
    5540:	09 95       	icall
    5542:	1f 91       	pop	r17
    5544:	0f 91       	pop	r16
    5546:	08 95       	ret

00005548 <Adafruit_GFX::writeFillRect(int, int, int, int, unsigned int)>:
    5548:	ef 92       	push	r14
    554a:	ff 92       	push	r15
    554c:	0f 93       	push	r16
    554e:	1f 93       	push	r17
    5550:	dc 01       	movw	r26, r24
    5552:	ed 91       	ld	r30, X+
    5554:	fc 91       	ld	r31, X
    5556:	00 a0       	ldd	r0, Z+32	; 0x20
    5558:	f1 a1       	ldd	r31, Z+33	; 0x21
    555a:	e0 2d       	mov	r30, r0
    555c:	09 95       	icall
    555e:	1f 91       	pop	r17
    5560:	0f 91       	pop	r16
    5562:	ff 90       	pop	r15
    5564:	ef 90       	pop	r14
    5566:	08 95       	ret

00005568 <Adafruit_GFX::drawFastVLine(int, int, int, unsigned int)>:
    5568:	8f 92       	push	r8
    556a:	9f 92       	push	r9
    556c:	af 92       	push	r10
    556e:	bf 92       	push	r11
    5570:	cf 92       	push	r12
    5572:	df 92       	push	r13
    5574:	ef 92       	push	r14
    5576:	ff 92       	push	r15
    5578:	0f 93       	push	r16
    557a:	1f 93       	push	r17
    557c:	cf 93       	push	r28
    557e:	df 93       	push	r29
    5580:	ec 01       	movw	r28, r24
    5582:	5b 01       	movw	r10, r22
    5584:	4a 01       	movw	r8, r20
    5586:	69 01       	movw	r12, r18
    5588:	78 01       	movw	r14, r16
    558a:	e8 81       	ld	r30, Y
    558c:	f9 81       	ldd	r31, Y+1	; 0x01
    558e:	02 84       	ldd	r0, Z+10	; 0x0a
    5590:	f3 85       	ldd	r31, Z+11	; 0x0b
    5592:	e0 2d       	mov	r30, r0
    5594:	09 95       	icall
    5596:	c8 0c       	add	r12, r8
    5598:	d9 1c       	adc	r13, r9
    559a:	86 01       	movw	r16, r12
    559c:	01 50       	subi	r16, 0x01	; 1
    559e:	11 09       	sbc	r17, r1
    55a0:	e8 81       	ld	r30, Y
    55a2:	f9 81       	ldd	r31, Y+1	; 0x01
    55a4:	04 88       	ldd	r0, Z+20	; 0x14
    55a6:	f5 89       	ldd	r31, Z+21	; 0x15
    55a8:	e0 2d       	mov	r30, r0
    55aa:	95 01       	movw	r18, r10
    55ac:	a4 01       	movw	r20, r8
    55ae:	b5 01       	movw	r22, r10
    55b0:	ce 01       	movw	r24, r28
    55b2:	09 95       	icall
    55b4:	e8 81       	ld	r30, Y
    55b6:	f9 81       	ldd	r31, Y+1	; 0x01
    55b8:	06 88       	ldd	r0, Z+22	; 0x16
    55ba:	f7 89       	ldd	r31, Z+23	; 0x17
    55bc:	e0 2d       	mov	r30, r0
    55be:	ce 01       	movw	r24, r28
    55c0:	df 91       	pop	r29
    55c2:	cf 91       	pop	r28
    55c4:	1f 91       	pop	r17
    55c6:	0f 91       	pop	r16
    55c8:	ff 90       	pop	r15
    55ca:	ef 90       	pop	r14
    55cc:	df 90       	pop	r13
    55ce:	cf 90       	pop	r12
    55d0:	bf 90       	pop	r11
    55d2:	af 90       	pop	r10
    55d4:	9f 90       	pop	r9
    55d6:	8f 90       	pop	r8
    55d8:	09 94       	ijmp

000055da <Adafruit_GFX::drawFastHLine(int, int, int, unsigned int)>:
    55da:	8f 92       	push	r8
    55dc:	9f 92       	push	r9
    55de:	af 92       	push	r10
    55e0:	bf 92       	push	r11
    55e2:	cf 92       	push	r12
    55e4:	df 92       	push	r13
    55e6:	ef 92       	push	r14
    55e8:	ff 92       	push	r15
    55ea:	0f 93       	push	r16
    55ec:	1f 93       	push	r17
    55ee:	cf 93       	push	r28
    55f0:	df 93       	push	r29
    55f2:	ec 01       	movw	r28, r24
    55f4:	5b 01       	movw	r10, r22
    55f6:	4a 01       	movw	r8, r20
    55f8:	69 01       	movw	r12, r18
    55fa:	e8 81       	ld	r30, Y
    55fc:	f9 81       	ldd	r31, Y+1	; 0x01
    55fe:	02 84       	ldd	r0, Z+10	; 0x0a
    5600:	f3 85       	ldd	r31, Z+11	; 0x0b
    5602:	e0 2d       	mov	r30, r0
    5604:	09 95       	icall
    5606:	95 01       	movw	r18, r10
    5608:	2c 0d       	add	r18, r12
    560a:	3d 1d       	adc	r19, r13
    560c:	21 50       	subi	r18, 0x01	; 1
    560e:	31 09       	sbc	r19, r1
    5610:	e8 81       	ld	r30, Y
    5612:	f9 81       	ldd	r31, Y+1	; 0x01
    5614:	04 88       	ldd	r0, Z+20	; 0x14
    5616:	f5 89       	ldd	r31, Z+21	; 0x15
    5618:	e0 2d       	mov	r30, r0
    561a:	78 01       	movw	r14, r16
    561c:	84 01       	movw	r16, r8
    561e:	a4 01       	movw	r20, r8
    5620:	b5 01       	movw	r22, r10
    5622:	ce 01       	movw	r24, r28
    5624:	09 95       	icall
    5626:	e8 81       	ld	r30, Y
    5628:	f9 81       	ldd	r31, Y+1	; 0x01
    562a:	06 88       	ldd	r0, Z+22	; 0x16
    562c:	f7 89       	ldd	r31, Z+23	; 0x17
    562e:	e0 2d       	mov	r30, r0
    5630:	ce 01       	movw	r24, r28
    5632:	df 91       	pop	r29
    5634:	cf 91       	pop	r28
    5636:	1f 91       	pop	r17
    5638:	0f 91       	pop	r16
    563a:	ff 90       	pop	r15
    563c:	ef 90       	pop	r14
    563e:	df 90       	pop	r13
    5640:	cf 90       	pop	r12
    5642:	bf 90       	pop	r11
    5644:	af 90       	pop	r10
    5646:	9f 90       	pop	r9
    5648:	8f 90       	pop	r8
    564a:	09 94       	ijmp

0000564c <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)>:
    564c:	4f 92       	push	r4
    564e:	5f 92       	push	r5
    5650:	6f 92       	push	r6
    5652:	7f 92       	push	r7
    5654:	8f 92       	push	r8
    5656:	9f 92       	push	r9
    5658:	af 92       	push	r10
    565a:	bf 92       	push	r11
    565c:	cf 92       	push	r12
    565e:	df 92       	push	r13
    5660:	ef 92       	push	r14
    5662:	ff 92       	push	r15
    5664:	0f 93       	push	r16
    5666:	1f 93       	push	r17
    5668:	cf 93       	push	r28
    566a:	df 93       	push	r29
    566c:	6c 01       	movw	r12, r24
    566e:	2b 01       	movw	r4, r22
    5670:	5a 01       	movw	r10, r20
    5672:	39 01       	movw	r6, r18
    5674:	48 01       	movw	r8, r16
    5676:	dc 01       	movw	r26, r24
    5678:	ed 91       	ld	r30, X+
    567a:	fc 91       	ld	r31, X
    567c:	02 84       	ldd	r0, Z+10	; 0x0a
    567e:	f3 85       	ldd	r31, Z+11	; 0x0b
    5680:	e0 2d       	mov	r30, r0
    5682:	09 95       	icall
    5684:	e2 01       	movw	r28, r4
    5686:	64 0c       	add	r6, r4
    5688:	75 1c       	adc	r7, r5
    568a:	d6 01       	movw	r26, r12
    568c:	ed 91       	ld	r30, X+
    568e:	fc 91       	ld	r31, X
    5690:	c6 15       	cp	r28, r6
    5692:	d7 05       	cpc	r29, r7
    5694:	5c f4       	brge	.+22     	; 0x56ac <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x60>
    5696:	00 88       	ldd	r0, Z+16	; 0x10
    5698:	f1 89       	ldd	r31, Z+17	; 0x11
    569a:	e0 2d       	mov	r30, r0
    569c:	87 01       	movw	r16, r14
    569e:	94 01       	movw	r18, r8
    56a0:	a5 01       	movw	r20, r10
    56a2:	be 01       	movw	r22, r28
    56a4:	c6 01       	movw	r24, r12
    56a6:	09 95       	icall
    56a8:	21 96       	adiw	r28, 0x01	; 1
    56aa:	ef cf       	rjmp	.-34     	; 0x568a <Adafruit_GFX::fillRect(int, int, int, int, unsigned int)+0x3e>
    56ac:	06 88       	ldd	r0, Z+22	; 0x16
    56ae:	f7 89       	ldd	r31, Z+23	; 0x17
    56b0:	e0 2d       	mov	r30, r0
    56b2:	c6 01       	movw	r24, r12
    56b4:	df 91       	pop	r29
    56b6:	cf 91       	pop	r28
    56b8:	1f 91       	pop	r17
    56ba:	0f 91       	pop	r16
    56bc:	ff 90       	pop	r15
    56be:	ef 90       	pop	r14
    56c0:	df 90       	pop	r13
    56c2:	cf 90       	pop	r12
    56c4:	bf 90       	pop	r11
    56c6:	af 90       	pop	r10
    56c8:	9f 90       	pop	r9
    56ca:	8f 90       	pop	r8
    56cc:	7f 90       	pop	r7
    56ce:	6f 90       	pop	r6
    56d0:	5f 90       	pop	r5
    56d2:	4f 90       	pop	r4
    56d4:	09 94       	ijmp

000056d6 <Adafruit_GFX::fillScreen(unsigned int)>:
    56d6:	ef 92       	push	r14
    56d8:	ff 92       	push	r15
    56da:	0f 93       	push	r16
    56dc:	1f 93       	push	r17
    56de:	dc 01       	movw	r26, r24
    56e0:	19 96       	adiw	r26, 0x09	; 9
    56e2:	0d 91       	ld	r16, X+
    56e4:	1c 91       	ld	r17, X
    56e6:	1a 97       	sbiw	r26, 0x0a	; 10
    56e8:	17 96       	adiw	r26, 0x07	; 7
    56ea:	2d 91       	ld	r18, X+
    56ec:	3c 91       	ld	r19, X
    56ee:	18 97       	sbiw	r26, 0x08	; 8
    56f0:	ed 91       	ld	r30, X+
    56f2:	fc 91       	ld	r31, X
    56f4:	00 a0       	ldd	r0, Z+32	; 0x20
    56f6:	f1 a1       	ldd	r31, Z+33	; 0x21
    56f8:	e0 2d       	mov	r30, r0
    56fa:	7b 01       	movw	r14, r22
    56fc:	50 e0       	ldi	r21, 0x00	; 0
    56fe:	40 e0       	ldi	r20, 0x00	; 0
    5700:	70 e0       	ldi	r23, 0x00	; 0
    5702:	60 e0       	ldi	r22, 0x00	; 0
    5704:	09 95       	icall
    5706:	1f 91       	pop	r17
    5708:	0f 91       	pop	r16
    570a:	ff 90       	pop	r15
    570c:	ef 90       	pop	r14
    570e:	08 95       	ret

00005710 <Adafruit_GFX::drawRect(int, int, int, int, unsigned int)>:
    5710:	6f 92       	push	r6
    5712:	7f 92       	push	r7
    5714:	8f 92       	push	r8
    5716:	9f 92       	push	r9
    5718:	af 92       	push	r10
    571a:	bf 92       	push	r11
    571c:	cf 92       	push	r12
    571e:	df 92       	push	r13
    5720:	ef 92       	push	r14
    5722:	ff 92       	push	r15
    5724:	0f 93       	push	r16
    5726:	1f 93       	push	r17
    5728:	cf 93       	push	r28
    572a:	df 93       	push	r29
    572c:	ec 01       	movw	r28, r24
    572e:	6b 01       	movw	r12, r22
    5730:	5a 01       	movw	r10, r20
    5732:	39 01       	movw	r6, r18
    5734:	48 01       	movw	r8, r16
    5736:	e8 81       	ld	r30, Y
    5738:	f9 81       	ldd	r31, Y+1	; 0x01
    573a:	02 84       	ldd	r0, Z+10	; 0x0a
    573c:	f3 85       	ldd	r31, Z+11	; 0x0b
    573e:	e0 2d       	mov	r30, r0
    5740:	09 95       	icall
    5742:	e8 81       	ld	r30, Y
    5744:	f9 81       	ldd	r31, Y+1	; 0x01
    5746:	02 88       	ldd	r0, Z+18	; 0x12
    5748:	f3 89       	ldd	r31, Z+19	; 0x13
    574a:	e0 2d       	mov	r30, r0
    574c:	87 01       	movw	r16, r14
    574e:	93 01       	movw	r18, r6
    5750:	a5 01       	movw	r20, r10
    5752:	b6 01       	movw	r22, r12
    5754:	ce 01       	movw	r24, r28
    5756:	09 95       	icall
    5758:	a5 01       	movw	r20, r10
    575a:	48 0d       	add	r20, r8
    575c:	59 1d       	adc	r21, r9
    575e:	41 50       	subi	r20, 0x01	; 1
    5760:	51 09       	sbc	r21, r1
    5762:	e8 81       	ld	r30, Y
    5764:	f9 81       	ldd	r31, Y+1	; 0x01
    5766:	02 88       	ldd	r0, Z+18	; 0x12
    5768:	f3 89       	ldd	r31, Z+19	; 0x13
    576a:	e0 2d       	mov	r30, r0
    576c:	93 01       	movw	r18, r6
    576e:	b6 01       	movw	r22, r12
    5770:	ce 01       	movw	r24, r28
    5772:	09 95       	icall
    5774:	e8 81       	ld	r30, Y
    5776:	f9 81       	ldd	r31, Y+1	; 0x01
    5778:	00 88       	ldd	r0, Z+16	; 0x10
    577a:	f1 89       	ldd	r31, Z+17	; 0x11
    577c:	e0 2d       	mov	r30, r0
    577e:	94 01       	movw	r18, r8
    5780:	a5 01       	movw	r20, r10
    5782:	b6 01       	movw	r22, r12
    5784:	ce 01       	movw	r24, r28
    5786:	09 95       	icall
    5788:	c6 0c       	add	r12, r6
    578a:	d7 1c       	adc	r13, r7
    578c:	b6 01       	movw	r22, r12
    578e:	61 50       	subi	r22, 0x01	; 1
    5790:	71 09       	sbc	r23, r1
    5792:	e8 81       	ld	r30, Y
    5794:	f9 81       	ldd	r31, Y+1	; 0x01
    5796:	00 88       	ldd	r0, Z+16	; 0x10
    5798:	f1 89       	ldd	r31, Z+17	; 0x11
    579a:	e0 2d       	mov	r30, r0
    579c:	94 01       	movw	r18, r8
    579e:	a5 01       	movw	r20, r10
    57a0:	ce 01       	movw	r24, r28
    57a2:	09 95       	icall
    57a4:	e8 81       	ld	r30, Y
    57a6:	f9 81       	ldd	r31, Y+1	; 0x01
    57a8:	06 88       	ldd	r0, Z+22	; 0x16
    57aa:	f7 89       	ldd	r31, Z+23	; 0x17
    57ac:	e0 2d       	mov	r30, r0
    57ae:	ce 01       	movw	r24, r28
    57b0:	df 91       	pop	r29
    57b2:	cf 91       	pop	r28
    57b4:	1f 91       	pop	r17
    57b6:	0f 91       	pop	r16
    57b8:	ff 90       	pop	r15
    57ba:	ef 90       	pop	r14
    57bc:	df 90       	pop	r13
    57be:	cf 90       	pop	r12
    57c0:	bf 90       	pop	r11
    57c2:	af 90       	pop	r10
    57c4:	9f 90       	pop	r9
    57c6:	8f 90       	pop	r8
    57c8:	7f 90       	pop	r7
    57ca:	6f 90       	pop	r6
    57cc:	09 94       	ijmp

000057ce <Adafruit_GFX::invertDisplay(bool)>:
    57ce:	08 95       	ret

000057d0 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)>:
    57d0:	6f 92       	push	r6
    57d2:	7f 92       	push	r7
    57d4:	8f 92       	push	r8
    57d6:	9f 92       	push	r9
    57d8:	af 92       	push	r10
    57da:	bf 92       	push	r11
    57dc:	cf 92       	push	r12
    57de:	df 92       	push	r13
    57e0:	ef 92       	push	r14
    57e2:	ff 92       	push	r15
    57e4:	0f 93       	push	r16
    57e6:	1f 93       	push	r17
    57e8:	cf 93       	push	r28
    57ea:	df 93       	push	r29
    57ec:	5c 01       	movw	r10, r24
    57ee:	eb 01       	movw	r28, r22
    57f0:	6a 01       	movw	r12, r20
    57f2:	49 01       	movw	r8, r18
    57f4:	38 01       	movw	r6, r16
    57f6:	87 01       	movw	r16, r14
    57f8:	dc 01       	movw	r26, r24
    57fa:	ed 91       	ld	r30, X+
    57fc:	fc 91       	ld	r31, X
    57fe:	62 17       	cp	r22, r18
    5800:	73 07       	cpc	r23, r19
    5802:	19 f5       	brne	.+70     	; 0x584a <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x7a>
    5804:	64 16       	cp	r6, r20
    5806:	75 06       	cpc	r7, r21
    5808:	2c f0       	brlt	.+10     	; 0x5814 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x44>
    580a:	96 2d       	mov	r25, r6
    580c:	87 2d       	mov	r24, r7
    580e:	3a 01       	movw	r6, r20
    5810:	c9 2e       	mov	r12, r25
    5812:	d8 2e       	mov	r13, r24
    5814:	96 01       	movw	r18, r12
    5816:	26 19       	sub	r18, r6
    5818:	37 09       	sbc	r19, r7
    581a:	2f 5f       	subi	r18, 0xFF	; 255
    581c:	3f 4f       	sbci	r19, 0xFF	; 255
    581e:	04 8c       	ldd	r0, Z+28	; 0x1c
    5820:	f5 8d       	ldd	r31, Z+29	; 0x1d
    5822:	e0 2d       	mov	r30, r0
    5824:	a3 01       	movw	r20, r6
    5826:	be 01       	movw	r22, r28
    5828:	c5 01       	movw	r24, r10
    582a:	09 95       	icall
    582c:	df 91       	pop	r29
    582e:	cf 91       	pop	r28
    5830:	1f 91       	pop	r17
    5832:	0f 91       	pop	r16
    5834:	ff 90       	pop	r15
    5836:	ef 90       	pop	r14
    5838:	df 90       	pop	r13
    583a:	cf 90       	pop	r12
    583c:	bf 90       	pop	r11
    583e:	af 90       	pop	r10
    5840:	9f 90       	pop	r9
    5842:	8f 90       	pop	r8
    5844:	7f 90       	pop	r7
    5846:	6f 90       	pop	r6
    5848:	08 95       	ret
    584a:	46 15       	cp	r20, r6
    584c:	57 05       	cpc	r21, r7
    584e:	91 f4       	brne	.+36     	; 0x5874 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0xa4>
    5850:	26 17       	cp	r18, r22
    5852:	37 07       	cpc	r19, r23
    5854:	24 f0       	brlt	.+8      	; 0x585e <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x8e>
    5856:	89 2d       	mov	r24, r9
    5858:	4b 01       	movw	r8, r22
    585a:	c2 2f       	mov	r28, r18
    585c:	d8 2f       	mov	r29, r24
    585e:	9e 01       	movw	r18, r28
    5860:	28 19       	sub	r18, r8
    5862:	39 09       	sbc	r19, r9
    5864:	2f 5f       	subi	r18, 0xFF	; 255
    5866:	3f 4f       	sbci	r19, 0xFF	; 255
    5868:	06 8c       	ldd	r0, Z+30	; 0x1e
    586a:	f7 8d       	ldd	r31, Z+31	; 0x1f
    586c:	e0 2d       	mov	r30, r0
    586e:	a6 01       	movw	r20, r12
    5870:	b4 01       	movw	r22, r8
    5872:	da cf       	rjmp	.-76     	; 0x5828 <Adafruit_GFX::drawLine(int, int, int, int, unsigned int)+0x58>
    5874:	02 84       	ldd	r0, Z+10	; 0x0a
    5876:	f3 85       	ldd	r31, Z+11	; 0x0b
    5878:	e0 2d       	mov	r30, r0
    587a:	09 95       	icall
    587c:	d5 01       	movw	r26, r10
    587e:	ed 91       	ld	r30, X+
    5880:	fc 91       	ld	r31, X
    5882:	04 88       	ldd	r0, Z+20	; 0x14
    5884:	f5 89       	ldd	r31, Z+21	; 0x15
    5886:	e0 2d       	mov	r30, r0
    5888:	83 01       	movw	r16, r6
    588a:	94 01       	movw	r18, r8
    588c:	a6 01       	movw	r20, r12
    588e:	be 01       	movw	r22, r28
    5890:	c5 01       	movw	r24, r10
    5892:	09 95       	icall
    5894:	d5 01       	movw	r26, r10
    5896:	ed 91       	ld	r30, X+
    5898:	fc 91       	ld	r31, X
    589a:	06 88       	ldd	r0, Z+22	; 0x16
    589c:	f7 89       	ldd	r31, Z+23	; 0x17
    589e:	e0 2d       	mov	r30, r0
    58a0:	c5 01       	movw	r24, r10
    58a2:	df 91       	pop	r29
    58a4:	cf 91       	pop	r28
    58a6:	1f 91       	pop	r17
    58a8:	0f 91       	pop	r16
    58aa:	ff 90       	pop	r15
    58ac:	ef 90       	pop	r14
    58ae:	df 90       	pop	r13
    58b0:	cf 90       	pop	r12
    58b2:	bf 90       	pop	r11
    58b4:	af 90       	pop	r10
    58b6:	9f 90       	pop	r9
    58b8:	8f 90       	pop	r8
    58ba:	7f 90       	pop	r7
    58bc:	6f 90       	pop	r6
    58be:	09 94       	ijmp

000058c0 <Adafruit_GFX::setRotation(unsigned char)>:
    58c0:	fc 01       	movw	r30, r24
    58c2:	63 70       	andi	r22, 0x03	; 3
    58c4:	65 8b       	std	Z+21, r22	; 0x15
    58c6:	83 81       	ldd	r24, Z+3	; 0x03
    58c8:	94 81       	ldd	r25, Z+4	; 0x04
    58ca:	25 81       	ldd	r18, Z+5	; 0x05
    58cc:	36 81       	ldd	r19, Z+6	; 0x06
    58ce:	61 30       	cpi	r22, 0x01	; 1
    58d0:	39 f0       	breq	.+14     	; 0x58e0 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    58d2:	63 30       	cpi	r22, 0x03	; 3
    58d4:	29 f0       	breq	.+10     	; 0x58e0 <Adafruit_GFX::setRotation(unsigned char)+0x20>
    58d6:	90 87       	std	Z+8, r25	; 0x08
    58d8:	87 83       	std	Z+7, r24	; 0x07
    58da:	32 87       	std	Z+10, r19	; 0x0a
    58dc:	21 87       	std	Z+9, r18	; 0x09
    58de:	08 95       	ret
    58e0:	30 87       	std	Z+8, r19	; 0x08
    58e2:	27 83       	std	Z+7, r18	; 0x07
    58e4:	92 87       	std	Z+10, r25	; 0x0a
    58e6:	81 87       	std	Z+9, r24	; 0x09
    58e8:	08 95       	ret

000058ea <Adafruit_GFX::Adafruit_GFX(int, int)>:
    58ea:	fc 01       	movw	r30, r24
    58ec:	12 82       	std	Z+2, r1	; 0x02
    58ee:	8a e4       	ldi	r24, 0x4A	; 74
    58f0:	98 e0       	ldi	r25, 0x08	; 8
    58f2:	91 83       	std	Z+1, r25	; 0x01
    58f4:	80 83       	st	Z, r24
    58f6:	74 83       	std	Z+4, r23	; 0x04
    58f8:	63 83       	std	Z+3, r22	; 0x03
    58fa:	56 83       	std	Z+6, r21	; 0x06
    58fc:	45 83       	std	Z+5, r20	; 0x05
    58fe:	70 87       	std	Z+8, r23	; 0x08
    5900:	67 83       	std	Z+7, r22	; 0x07
    5902:	52 87       	std	Z+10, r21	; 0x0a
    5904:	41 87       	std	Z+9, r20	; 0x09
    5906:	15 8a       	std	Z+21, r1	; 0x15
    5908:	14 86       	std	Z+12, r1	; 0x0c
    590a:	13 86       	std	Z+11, r1	; 0x0b
    590c:	16 86       	std	Z+14, r1	; 0x0e
    590e:	15 86       	std	Z+13, r1	; 0x0d
    5910:	81 e0       	ldi	r24, 0x01	; 1
    5912:	84 8b       	std	Z+20, r24	; 0x14
    5914:	83 8b       	std	Z+19, r24	; 0x13
    5916:	2f ef       	ldi	r18, 0xFF	; 255
    5918:	3f ef       	ldi	r19, 0xFF	; 255
    591a:	32 8b       	std	Z+18, r19	; 0x12
    591c:	21 8b       	std	Z+17, r18	; 0x11
    591e:	30 8b       	std	Z+16, r19	; 0x10
    5920:	27 87       	std	Z+15, r18	; 0x0f
    5922:	86 8b       	std	Z+22, r24	; 0x16
    5924:	17 8a       	std	Z+23, r1	; 0x17
    5926:	11 8e       	std	Z+25, r1	; 0x19
    5928:	10 8e       	std	Z+24, r1	; 0x18
    592a:	08 95       	ret

0000592c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>:
    592c:	2f 92       	push	r2
    592e:	3f 92       	push	r3
    5930:	4f 92       	push	r4
    5932:	5f 92       	push	r5
    5934:	6f 92       	push	r6
    5936:	7f 92       	push	r7
    5938:	8f 92       	push	r8
    593a:	9f 92       	push	r9
    593c:	af 92       	push	r10
    593e:	bf 92       	push	r11
    5940:	cf 92       	push	r12
    5942:	df 92       	push	r13
    5944:	ef 92       	push	r14
    5946:	ff 92       	push	r15
    5948:	0f 93       	push	r16
    594a:	1f 93       	push	r17
    594c:	cf 93       	push	r28
    594e:	df 93       	push	r29
    5950:	cd b7       	in	r28, 0x3d	; 61
    5952:	de b7       	in	r29, 0x3e	; 62
    5954:	2e 97       	sbiw	r28, 0x0e	; 14
    5956:	0f b6       	in	r0, 0x3f	; 63
    5958:	f8 94       	cli
    595a:	de bf       	out	0x3e, r29	; 62
    595c:	0f be       	out	0x3f, r0	; 63
    595e:	cd bf       	out	0x3d, r28	; 61
    5960:	5c 01       	movw	r10, r24
    5962:	2b 01       	movw	r4, r22
    5964:	5c 83       	std	Y+4, r21	; 0x04
    5966:	4b 83       	std	Y+3, r20	; 0x03
    5968:	3e 87       	std	Y+14, r19	; 0x0e
    596a:	2d 87       	std	Y+13, r18	; 0x0d
    596c:	fe 82       	std	Y+6, r15	; 0x06
    596e:	ed 82       	std	Y+5, r14	; 0x05
    5970:	16 01       	movw	r2, r12
    5972:	81 e0       	ldi	r24, 0x01	; 1
    5974:	90 e0       	ldi	r25, 0x00	; 0
    5976:	4c 01       	movw	r8, r24
    5978:	82 1a       	sub	r8, r18
    597a:	93 0a       	sbc	r9, r19
    597c:	c9 01       	movw	r24, r18
    597e:	91 95       	neg	r25
    5980:	81 95       	neg	r24
    5982:	91 09       	sbc	r25, r1
    5984:	9c 01       	movw	r18, r24
    5986:	22 0f       	add	r18, r18
    5988:	33 1f       	adc	r19, r19
    598a:	3a 83       	std	Y+2, r19	; 0x02
    598c:	29 83       	std	Y+1, r18	; 0x01
    598e:	c7 01       	movw	r24, r14
    5990:	01 96       	adiw	r24, 0x01	; 1
    5992:	98 87       	std	Y+8, r25	; 0x08
    5994:	8f 83       	std	Y+7, r24	; 0x07
    5996:	f1 2c       	mov	r15, r1
    5998:	e1 2c       	mov	r14, r1
    599a:	66 24       	eor	r6, r6
    599c:	63 94       	inc	r6
    599e:	71 2c       	mov	r7, r1
    59a0:	90 2f       	mov	r25, r16
    59a2:	91 70       	andi	r25, 0x01	; 1
    59a4:	99 87       	std	Y+9, r25	; 0x09
    59a6:	02 70       	andi	r16, 0x02	; 2
    59a8:	0a 87       	std	Y+10, r16	; 0x0a
    59aa:	da 01       	movw	r26, r20
    59ac:	11 96       	adiw	r26, 0x01	; 1
    59ae:	bc 87       	std	Y+12, r27	; 0x0c
    59b0:	ab 87       	std	Y+11, r26	; 0x0b
    59b2:	2d 85       	ldd	r18, Y+13	; 0x0d
    59b4:	3e 85       	ldd	r19, Y+14	; 0x0e
    59b6:	e2 16       	cp	r14, r18
    59b8:	f3 06       	cpc	r15, r19
    59ba:	0c f0       	brlt	.+2      	; 0x59be <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x92>
    59bc:	8d c0       	rjmp	.+282    	; 0x5ad8 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1ac>
    59be:	cd 84       	ldd	r12, Y+13	; 0x0d
    59c0:	de 84       	ldd	r13, Y+14	; 0x0e
    59c2:	97 fc       	sbrc	r9, 7
    59c4:	0b c0       	rjmp	.+22     	; 0x59dc <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xb0>
    59c6:	69 01       	movw	r12, r18
    59c8:	31 e0       	ldi	r19, 0x01	; 1
    59ca:	c3 1a       	sub	r12, r19
    59cc:	d1 08       	sbc	r13, r1
    59ce:	89 81       	ldd	r24, Y+1	; 0x01
    59d0:	9a 81       	ldd	r25, Y+2	; 0x02
    59d2:	02 96       	adiw	r24, 0x02	; 2
    59d4:	9a 83       	std	Y+2, r25	; 0x02
    59d6:	89 83       	std	Y+1, r24	; 0x01
    59d8:	88 0e       	add	r8, r24
    59da:	99 1e       	adc	r9, r25
    59dc:	9f ef       	ldi	r25, 0xFF	; 255
    59de:	e9 1a       	sub	r14, r25
    59e0:	f9 0a       	sbc	r15, r25
    59e2:	a2 e0       	ldi	r26, 0x02	; 2
    59e4:	6a 0e       	add	r6, r26
    59e6:	71 1c       	adc	r7, r1
    59e8:	86 0c       	add	r8, r6
    59ea:	97 1c       	adc	r9, r7
    59ec:	ce 14       	cp	r12, r14
    59ee:	df 04       	cpc	r13, r15
    59f0:	a4 f1       	brlt	.+104    	; 0x5a5a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    59f2:	b9 85       	ldd	r27, Y+9	; 0x09
    59f4:	bb 23       	and	r27, r27
    59f6:	b9 f0       	breq	.+46     	; 0x5a26 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0xfa>
    59f8:	96 01       	movw	r18, r12
    59fa:	22 0f       	add	r18, r18
    59fc:	33 1f       	adc	r19, r19
    59fe:	8f 81       	ldd	r24, Y+7	; 0x07
    5a00:	98 85       	ldd	r25, Y+8	; 0x08
    5a02:	28 0f       	add	r18, r24
    5a04:	39 1f       	adc	r19, r25
    5a06:	d5 01       	movw	r26, r10
    5a08:	ed 91       	ld	r30, X+
    5a0a:	fc 91       	ld	r31, X
    5a0c:	00 88       	ldd	r0, Z+16	; 0x10
    5a0e:	f1 89       	ldd	r31, Z+17	; 0x11
    5a10:	e0 2d       	mov	r30, r0
    5a12:	81 01       	movw	r16, r2
    5a14:	4b 81       	ldd	r20, Y+3	; 0x03
    5a16:	5c 81       	ldd	r21, Y+4	; 0x04
    5a18:	4c 19       	sub	r20, r12
    5a1a:	5d 09       	sbc	r21, r13
    5a1c:	b2 01       	movw	r22, r4
    5a1e:	6e 0d       	add	r22, r14
    5a20:	7f 1d       	adc	r23, r15
    5a22:	c5 01       	movw	r24, r10
    5a24:	09 95       	icall
    5a26:	ba 85       	ldd	r27, Y+10	; 0x0a
    5a28:	bb 23       	and	r27, r27
    5a2a:	b9 f0       	breq	.+46     	; 0x5a5a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x12e>
    5a2c:	96 01       	movw	r18, r12
    5a2e:	22 0f       	add	r18, r18
    5a30:	33 1f       	adc	r19, r19
    5a32:	8f 81       	ldd	r24, Y+7	; 0x07
    5a34:	98 85       	ldd	r25, Y+8	; 0x08
    5a36:	28 0f       	add	r18, r24
    5a38:	39 1f       	adc	r19, r25
    5a3a:	d5 01       	movw	r26, r10
    5a3c:	ed 91       	ld	r30, X+
    5a3e:	fc 91       	ld	r31, X
    5a40:	00 88       	ldd	r0, Z+16	; 0x10
    5a42:	f1 89       	ldd	r31, Z+17	; 0x11
    5a44:	e0 2d       	mov	r30, r0
    5a46:	81 01       	movw	r16, r2
    5a48:	4b 81       	ldd	r20, Y+3	; 0x03
    5a4a:	5c 81       	ldd	r21, Y+4	; 0x04
    5a4c:	4c 19       	sub	r20, r12
    5a4e:	5d 09       	sbc	r21, r13
    5a50:	b2 01       	movw	r22, r4
    5a52:	6e 19       	sub	r22, r14
    5a54:	7f 09       	sbc	r23, r15
    5a56:	c5 01       	movw	r24, r10
    5a58:	09 95       	icall
    5a5a:	2d 85       	ldd	r18, Y+13	; 0x0d
    5a5c:	3e 85       	ldd	r19, Y+14	; 0x0e
    5a5e:	2c 15       	cp	r18, r12
    5a60:	3d 05       	cpc	r19, r13
    5a62:	b9 f1       	breq	.+110    	; 0x5ad2 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    5a64:	39 85       	ldd	r19, Y+9	; 0x09
    5a66:	33 23       	and	r19, r19
    5a68:	c1 f0       	breq	.+48     	; 0x5a9a <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x16e>
    5a6a:	93 01       	movw	r18, r6
    5a6c:	22 50       	subi	r18, 0x02	; 2
    5a6e:	31 09       	sbc	r19, r1
    5a70:	8d 81       	ldd	r24, Y+5	; 0x05
    5a72:	9e 81       	ldd	r25, Y+6	; 0x06
    5a74:	28 0f       	add	r18, r24
    5a76:	39 1f       	adc	r19, r25
    5a78:	d5 01       	movw	r26, r10
    5a7a:	ed 91       	ld	r30, X+
    5a7c:	fc 91       	ld	r31, X
    5a7e:	00 88       	ldd	r0, Z+16	; 0x10
    5a80:	f1 89       	ldd	r31, Z+17	; 0x11
    5a82:	e0 2d       	mov	r30, r0
    5a84:	81 01       	movw	r16, r2
    5a86:	4b 85       	ldd	r20, Y+11	; 0x0b
    5a88:	5c 85       	ldd	r21, Y+12	; 0x0c
    5a8a:	4e 19       	sub	r20, r14
    5a8c:	5f 09       	sbc	r21, r15
    5a8e:	6d 85       	ldd	r22, Y+13	; 0x0d
    5a90:	7e 85       	ldd	r23, Y+14	; 0x0e
    5a92:	64 0d       	add	r22, r4
    5a94:	75 1d       	adc	r23, r5
    5a96:	c5 01       	movw	r24, r10
    5a98:	09 95       	icall
    5a9a:	ba 85       	ldd	r27, Y+10	; 0x0a
    5a9c:	bb 23       	and	r27, r27
    5a9e:	c9 f0       	breq	.+50     	; 0x5ad2 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x1a6>
    5aa0:	93 01       	movw	r18, r6
    5aa2:	22 50       	subi	r18, 0x02	; 2
    5aa4:	31 09       	sbc	r19, r1
    5aa6:	8d 81       	ldd	r24, Y+5	; 0x05
    5aa8:	9e 81       	ldd	r25, Y+6	; 0x06
    5aaa:	28 0f       	add	r18, r24
    5aac:	39 1f       	adc	r19, r25
    5aae:	b2 01       	movw	r22, r4
    5ab0:	ad 85       	ldd	r26, Y+13	; 0x0d
    5ab2:	be 85       	ldd	r27, Y+14	; 0x0e
    5ab4:	6a 1b       	sub	r22, r26
    5ab6:	7b 0b       	sbc	r23, r27
    5ab8:	d5 01       	movw	r26, r10
    5aba:	ed 91       	ld	r30, X+
    5abc:	fc 91       	ld	r31, X
    5abe:	00 88       	ldd	r0, Z+16	; 0x10
    5ac0:	f1 89       	ldd	r31, Z+17	; 0x11
    5ac2:	e0 2d       	mov	r30, r0
    5ac4:	81 01       	movw	r16, r2
    5ac6:	4b 85       	ldd	r20, Y+11	; 0x0b
    5ac8:	5c 85       	ldd	r21, Y+12	; 0x0c
    5aca:	4e 19       	sub	r20, r14
    5acc:	5f 09       	sbc	r21, r15
    5ace:	c5 01       	movw	r24, r10
    5ad0:	09 95       	icall
    5ad2:	de 86       	std	Y+14, r13	; 0x0e
    5ad4:	cd 86       	std	Y+13, r12	; 0x0d
    5ad6:	6d cf       	rjmp	.-294    	; 0x59b2 <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)+0x86>
    5ad8:	2e 96       	adiw	r28, 0x0e	; 14
    5ada:	0f b6       	in	r0, 0x3f	; 63
    5adc:	f8 94       	cli
    5ade:	de bf       	out	0x3e, r29	; 62
    5ae0:	0f be       	out	0x3f, r0	; 63
    5ae2:	cd bf       	out	0x3d, r28	; 61
    5ae4:	df 91       	pop	r29
    5ae6:	cf 91       	pop	r28
    5ae8:	1f 91       	pop	r17
    5aea:	0f 91       	pop	r16
    5aec:	ff 90       	pop	r15
    5aee:	ef 90       	pop	r14
    5af0:	df 90       	pop	r13
    5af2:	cf 90       	pop	r12
    5af4:	bf 90       	pop	r11
    5af6:	af 90       	pop	r10
    5af8:	9f 90       	pop	r9
    5afa:	8f 90       	pop	r8
    5afc:	7f 90       	pop	r7
    5afe:	6f 90       	pop	r6
    5b00:	5f 90       	pop	r5
    5b02:	4f 90       	pop	r4
    5b04:	3f 90       	pop	r3
    5b06:	2f 90       	pop	r2
    5b08:	08 95       	ret

00005b0a <Adafruit_GFX::fillCircle(int, int, int, unsigned int)>:
    5b0a:	6f 92       	push	r6
    5b0c:	7f 92       	push	r7
    5b0e:	8f 92       	push	r8
    5b10:	9f 92       	push	r9
    5b12:	af 92       	push	r10
    5b14:	bf 92       	push	r11
    5b16:	cf 92       	push	r12
    5b18:	df 92       	push	r13
    5b1a:	ef 92       	push	r14
    5b1c:	ff 92       	push	r15
    5b1e:	0f 93       	push	r16
    5b20:	1f 93       	push	r17
    5b22:	cf 93       	push	r28
    5b24:	df 93       	push	r29
    5b26:	ec 01       	movw	r28, r24
    5b28:	4b 01       	movw	r8, r22
    5b2a:	3a 01       	movw	r6, r20
    5b2c:	59 01       	movw	r10, r18
    5b2e:	68 01       	movw	r12, r16
    5b30:	e8 81       	ld	r30, Y
    5b32:	f9 81       	ldd	r31, Y+1	; 0x01
    5b34:	02 84       	ldd	r0, Z+10	; 0x0a
    5b36:	f3 85       	ldd	r31, Z+11	; 0x0b
    5b38:	e0 2d       	mov	r30, r0
    5b3a:	09 95       	icall
    5b3c:	95 01       	movw	r18, r10
    5b3e:	22 0f       	add	r18, r18
    5b40:	33 1f       	adc	r19, r19
    5b42:	2f 5f       	subi	r18, 0xFF	; 255
    5b44:	3f 4f       	sbci	r19, 0xFF	; 255
    5b46:	a3 01       	movw	r20, r6
    5b48:	4a 19       	sub	r20, r10
    5b4a:	5b 09       	sbc	r21, r11
    5b4c:	e8 81       	ld	r30, Y
    5b4e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b50:	00 88       	ldd	r0, Z+16	; 0x10
    5b52:	f1 89       	ldd	r31, Z+17	; 0x11
    5b54:	e0 2d       	mov	r30, r0
    5b56:	b4 01       	movw	r22, r8
    5b58:	ce 01       	movw	r24, r28
    5b5a:	09 95       	icall
    5b5c:	f1 2c       	mov	r15, r1
    5b5e:	e1 2c       	mov	r14, r1
    5b60:	03 e0       	ldi	r16, 0x03	; 3
    5b62:	95 01       	movw	r18, r10
    5b64:	a3 01       	movw	r20, r6
    5b66:	b4 01       	movw	r22, r8
    5b68:	ce 01       	movw	r24, r28
    5b6a:	e0 de       	rcall	.-576    	; 0x592c <Adafruit_GFX::fillCircleHelper(int, int, int, unsigned char, int, unsigned int)>
    5b6c:	e8 81       	ld	r30, Y
    5b6e:	f9 81       	ldd	r31, Y+1	; 0x01
    5b70:	06 88       	ldd	r0, Z+22	; 0x16
    5b72:	f7 89       	ldd	r31, Z+23	; 0x17
    5b74:	e0 2d       	mov	r30, r0
    5b76:	ce 01       	movw	r24, r28
    5b78:	df 91       	pop	r29
    5b7a:	cf 91       	pop	r28
    5b7c:	1f 91       	pop	r17
    5b7e:	0f 91       	pop	r16
    5b80:	ff 90       	pop	r15
    5b82:	ef 90       	pop	r14
    5b84:	df 90       	pop	r13
    5b86:	cf 90       	pop	r12
    5b88:	bf 90       	pop	r11
    5b8a:	af 90       	pop	r10
    5b8c:	9f 90       	pop	r9
    5b8e:	8f 90       	pop	r8
    5b90:	7f 90       	pop	r7
    5b92:	6f 90       	pop	r6
    5b94:	09 94       	ijmp

00005b96 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>:
    5b96:	2f 92       	push	r2
    5b98:	3f 92       	push	r3
    5b9a:	4f 92       	push	r4
    5b9c:	5f 92       	push	r5
    5b9e:	6f 92       	push	r6
    5ba0:	7f 92       	push	r7
    5ba2:	8f 92       	push	r8
    5ba4:	9f 92       	push	r9
    5ba6:	af 92       	push	r10
    5ba8:	bf 92       	push	r11
    5baa:	cf 92       	push	r12
    5bac:	df 92       	push	r13
    5bae:	ef 92       	push	r14
    5bb0:	ff 92       	push	r15
    5bb2:	0f 93       	push	r16
    5bb4:	1f 93       	push	r17
    5bb6:	cf 93       	push	r28
    5bb8:	df 93       	push	r29
    5bba:	cd b7       	in	r28, 0x3d	; 61
    5bbc:	de b7       	in	r29, 0x3e	; 62
    5bbe:	6a 97       	sbiw	r28, 0x1a	; 26
    5bc0:	0f b6       	in	r0, 0x3f	; 63
    5bc2:	f8 94       	cli
    5bc4:	de bf       	out	0x3e, r29	; 62
    5bc6:	0f be       	out	0x3f, r0	; 63
    5bc8:	cd bf       	out	0x3d, r28	; 61
    5bca:	9a 8f       	std	Y+26, r25	; 0x1a
    5bcc:	89 8f       	std	Y+25, r24	; 0x19
    5bce:	7a 83       	std	Y+2, r23	; 0x02
    5bd0:	69 83       	std	Y+1, r22	; 0x01
    5bd2:	4a 01       	movw	r8, r20
    5bd4:	d2 2e       	mov	r13, r18
    5bd6:	18 87       	std	Y+8, r17	; 0x08
    5bd8:	0f 83       	std	Y+7, r16	; 0x07
    5bda:	37 01       	movw	r6, r14
    5bdc:	bc 2c       	mov	r11, r12
    5bde:	dc 01       	movw	r26, r24
    5be0:	58 96       	adiw	r26, 0x18	; 24
    5be2:	2d 91       	ld	r18, X+
    5be4:	3c 91       	ld	r19, X
    5be6:	59 97       	sbiw	r26, 0x19	; 25
    5be8:	21 15       	cp	r18, r1
    5bea:	31 05       	cpc	r19, r1
    5bec:	09 f0       	breq	.+2      	; 0x5bf0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x5a>
    5bee:	15 c1       	rjmp	.+554    	; 0x5e1a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x284>
    5bf0:	17 96       	adiw	r26, 0x07	; 7
    5bf2:	8d 91       	ld	r24, X+
    5bf4:	9c 91       	ld	r25, X
    5bf6:	18 97       	sbiw	r26, 0x08	; 8
    5bf8:	68 17       	cp	r22, r24
    5bfa:	79 07       	cpc	r23, r25
    5bfc:	0c f0       	brlt	.+2      	; 0x5c00 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x6a>
    5bfe:	d7 c1       	rjmp	.+942    	; 0x5fae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    5c00:	19 96       	adiw	r26, 0x09	; 9
    5c02:	8d 91       	ld	r24, X+
    5c04:	9c 91       	ld	r25, X
    5c06:	48 17       	cp	r20, r24
    5c08:	59 07       	cpc	r21, r25
    5c0a:	0c f0       	brlt	.+2      	; 0x5c0e <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x78>
    5c0c:	d0 c1       	rjmp	.+928    	; 0x5fae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    5c0e:	4c 2c       	mov	r4, r12
    5c10:	51 2c       	mov	r5, r1
    5c12:	b6 e0       	ldi	r27, 0x06	; 6
    5c14:	cb 9e       	mul	r12, r27
    5c16:	60 0d       	add	r22, r0
    5c18:	71 1d       	adc	r23, r1
    5c1a:	11 24       	eor	r1, r1
    5c1c:	7c 87       	std	Y+12, r23	; 0x0c
    5c1e:	6b 87       	std	Y+11, r22	; 0x0b
    5c20:	16 16       	cp	r1, r22
    5c22:	17 06       	cpc	r1, r23
    5c24:	0c f0       	brlt	.+2      	; 0x5c28 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x92>
    5c26:	c3 c1       	rjmp	.+902    	; 0x5fae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    5c28:	ea 2d       	mov	r30, r10
    5c2a:	f0 e0       	ldi	r31, 0x00	; 0
    5c2c:	fa 87       	std	Y+10, r31	; 0x0a
    5c2e:	e9 87       	std	Y+9, r30	; 0x09
    5c30:	93 e0       	ldi	r25, 0x03	; 3
    5c32:	ee 0f       	add	r30, r30
    5c34:	ff 1f       	adc	r31, r31
    5c36:	9a 95       	dec	r25
    5c38:	e1 f7       	brne	.-8      	; 0x5c32 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x9c>
    5c3a:	f8 8b       	std	Y+16, r31	; 0x10
    5c3c:	ef 87       	std	Y+15, r30	; 0x0f
    5c3e:	cf 01       	movw	r24, r30
    5c40:	84 0f       	add	r24, r20
    5c42:	95 1f       	adc	r25, r21
    5c44:	18 16       	cp	r1, r24
    5c46:	19 06       	cpc	r1, r25
    5c48:	0c f0       	brlt	.+2      	; 0x5c4c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xb6>
    5c4a:	b1 c1       	rjmp	.+866    	; 0x5fae <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x418>
    5c4c:	a9 8d       	ldd	r26, Y+25	; 0x19
    5c4e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5c50:	57 96       	adiw	r26, 0x17	; 23
    5c52:	8c 91       	ld	r24, X
    5c54:	81 11       	cpse	r24, r1
    5c56:	04 c0       	rjmp	.+8      	; 0x5c60 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    5c58:	bf ea       	ldi	r27, 0xAF	; 175
    5c5a:	bd 15       	cp	r27, r13
    5c5c:	08 f4       	brcc	.+2      	; 0x5c60 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0xca>
    5c5e:	d3 94       	inc	r13
    5c60:	a9 8d       	ldd	r26, Y+25	; 0x19
    5c62:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5c64:	ed 91       	ld	r30, X+
    5c66:	fc 91       	ld	r31, X
    5c68:	11 97       	sbiw	r26, 0x01	; 1
    5c6a:	02 84       	ldd	r0, Z+10	; 0x0a
    5c6c:	f3 85       	ldd	r31, Z+11	; 0x0b
    5c6e:	e0 2d       	mov	r30, r0
    5c70:	cd 01       	movw	r24, r26
    5c72:	09 95       	icall
    5c74:	b5 e0       	ldi	r27, 0x05	; 5
    5c76:	db 9e       	mul	r13, r27
    5c78:	c0 01       	movw	r24, r0
    5c7a:	11 24       	eor	r1, r1
    5c7c:	e9 81       	ldd	r30, Y+1	; 0x01
    5c7e:	fa 81       	ldd	r31, Y+2	; 0x02
    5c80:	fc 83       	std	Y+4, r31	; 0x04
    5c82:	eb 83       	std	Y+3, r30	; 0x03
    5c84:	31 2c       	mov	r3, r1
    5c86:	21 2c       	mov	r2, r1
    5c88:	9c 01       	movw	r18, r24
    5c8a:	28 52       	subi	r18, 0x28	; 40
    5c8c:	3f 4f       	sbci	r19, 0xFF	; 255
    5c8e:	38 8f       	std	Y+24, r19	; 0x18
    5c90:	2f 8b       	std	Y+23, r18	; 0x17
    5c92:	4a 2d       	mov	r20, r10
    5c94:	50 e0       	ldi	r21, 0x00	; 0
    5c96:	5e 8b       	std	Y+22, r21	; 0x16
    5c98:	4d 8b       	std	Y+21, r20	; 0x15
    5c9a:	ef 89       	ldd	r30, Y+23	; 0x17
    5c9c:	f8 8d       	ldd	r31, Y+24	; 0x18
    5c9e:	e2 0d       	add	r30, r2
    5ca0:	f3 1d       	adc	r31, r3
    5ca2:	44 91       	lpm	r20, Z
    5ca4:	9e 82       	std	Y+6, r9	; 0x06
    5ca6:	8d 82       	std	Y+5, r8	; 0x05
    5ca8:	d1 2c       	mov	r13, r1
    5caa:	c1 2c       	mov	r12, r1
    5cac:	69 81       	ldd	r22, Y+1	; 0x01
    5cae:	7a 81       	ldd	r23, Y+2	; 0x02
    5cb0:	62 0d       	add	r22, r2
    5cb2:	73 1d       	adc	r23, r3
    5cb4:	7a 8b       	std	Y+18, r23	; 0x12
    5cb6:	69 8b       	std	Y+17, r22	; 0x11
    5cb8:	84 2f       	mov	r24, r20
    5cba:	90 e0       	ldi	r25, 0x00	; 0
    5cbc:	9c 8b       	std	Y+20, r25	; 0x14
    5cbe:	8b 8b       	std	Y+19, r24	; 0x13
    5cc0:	e9 8d       	ldd	r30, Y+25	; 0x19
    5cc2:	fa 8d       	ldd	r31, Y+26	; 0x1a
    5cc4:	a0 81       	ld	r26, Z
    5cc6:	b1 81       	ldd	r27, Z+1	; 0x01
    5cc8:	40 ff       	sbrs	r20, 0
    5cca:	82 c0       	rjmp	.+260    	; 0x5dd0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x23a>
    5ccc:	f1 e0       	ldi	r31, 0x01	; 1
    5cce:	bf 12       	cpse	r11, r31
    5cd0:	6f c0       	rjmp	.+222    	; 0x5db0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    5cd2:	af 12       	cpse	r10, r31
    5cd4:	6d c0       	rjmp	.+218    	; 0x5db0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x21a>
    5cd6:	1c 96       	adiw	r26, 0x0c	; 12
    5cd8:	ed 91       	ld	r30, X+
    5cda:	fc 91       	ld	r31, X
    5cdc:	2f 81       	ldd	r18, Y+7	; 0x07
    5cde:	38 85       	ldd	r19, Y+8	; 0x08
    5ce0:	a4 01       	movw	r20, r8
    5ce2:	4c 0d       	add	r20, r12
    5ce4:	5d 1d       	adc	r21, r13
    5ce6:	69 89       	ldd	r22, Y+17	; 0x11
    5ce8:	7a 89       	ldd	r23, Y+18	; 0x12
    5cea:	89 8d       	ldd	r24, Y+25	; 0x19
    5cec:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5cee:	09 95       	icall
    5cf0:	eb 89       	ldd	r30, Y+19	; 0x13
    5cf2:	fc 89       	ldd	r31, Y+20	; 0x14
    5cf4:	f5 95       	asr	r31
    5cf6:	e7 95       	ror	r30
    5cf8:	4e 2f       	mov	r20, r30
    5cfa:	5f ef       	ldi	r21, 0xFF	; 255
    5cfc:	c5 1a       	sub	r12, r21
    5cfe:	d5 0a       	sbc	r13, r21
    5d00:	6d 81       	ldd	r22, Y+5	; 0x05
    5d02:	7e 81       	ldd	r23, Y+6	; 0x06
    5d04:	8d 89       	ldd	r24, Y+21	; 0x15
    5d06:	9e 89       	ldd	r25, Y+22	; 0x16
    5d08:	68 0f       	add	r22, r24
    5d0a:	79 1f       	adc	r23, r25
    5d0c:	7e 83       	std	Y+6, r23	; 0x06
    5d0e:	6d 83       	std	Y+5, r22	; 0x05
    5d10:	98 e0       	ldi	r25, 0x08	; 8
    5d12:	c9 16       	cp	r12, r25
    5d14:	d1 04       	cpc	r13, r1
    5d16:	81 f6       	brne	.-96     	; 0x5cb8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x122>
    5d18:	af ef       	ldi	r26, 0xFF	; 255
    5d1a:	2a 1a       	sub	r2, r26
    5d1c:	3a 0a       	sbc	r3, r26
    5d1e:	eb 81       	ldd	r30, Y+3	; 0x03
    5d20:	fc 81       	ldd	r31, Y+4	; 0x04
    5d22:	e4 0d       	add	r30, r4
    5d24:	f5 1d       	adc	r31, r5
    5d26:	fc 83       	std	Y+4, r31	; 0x04
    5d28:	eb 83       	std	Y+3, r30	; 0x03
    5d2a:	f5 e0       	ldi	r31, 0x05	; 5
    5d2c:	2f 16       	cp	r2, r31
    5d2e:	31 04       	cpc	r3, r1
    5d30:	09 f0       	breq	.+2      	; 0x5d34 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x19e>
    5d32:	b3 cf       	rjmp	.-154    	; 0x5c9a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x104>
    5d34:	2f 81       	ldd	r18, Y+7	; 0x07
    5d36:	38 85       	ldd	r19, Y+8	; 0x08
    5d38:	26 15       	cp	r18, r6
    5d3a:	37 05       	cpc	r19, r7
    5d3c:	b9 f0       	breq	.+46     	; 0x5d6c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    5d3e:	a9 8d       	ldd	r26, Y+25	; 0x19
    5d40:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5d42:	ed 91       	ld	r30, X+
    5d44:	fc 91       	ld	r31, X
    5d46:	b1 e0       	ldi	r27, 0x01	; 1
    5d48:	bb 12       	cpse	r11, r27
    5d4a:	57 c0       	rjmp	.+174    	; 0x5dfa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    5d4c:	ab 12       	cpse	r10, r27
    5d4e:	55 c0       	rjmp	.+170    	; 0x5dfa <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x264>
    5d50:	69 81       	ldd	r22, Y+1	; 0x01
    5d52:	7a 81       	ldd	r23, Y+2	; 0x02
    5d54:	6b 5f       	subi	r22, 0xFB	; 251
    5d56:	7f 4f       	sbci	r23, 0xFF	; 255
    5d58:	00 88       	ldd	r0, Z+16	; 0x10
    5d5a:	f1 89       	ldd	r31, Z+17	; 0x11
    5d5c:	e0 2d       	mov	r30, r0
    5d5e:	83 01       	movw	r16, r6
    5d60:	28 e0       	ldi	r18, 0x08	; 8
    5d62:	30 e0       	ldi	r19, 0x00	; 0
    5d64:	a4 01       	movw	r20, r8
    5d66:	89 8d       	ldd	r24, Y+25	; 0x19
    5d68:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5d6a:	09 95       	icall
    5d6c:	a9 8d       	ldd	r26, Y+25	; 0x19
    5d6e:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5d70:	ed 91       	ld	r30, X+
    5d72:	fc 91       	ld	r31, X
    5d74:	11 97       	sbiw	r26, 0x01	; 1
    5d76:	06 88       	ldd	r0, Z+22	; 0x16
    5d78:	f7 89       	ldd	r31, Z+23	; 0x17
    5d7a:	e0 2d       	mov	r30, r0
    5d7c:	cd 01       	movw	r24, r26
    5d7e:	6a 96       	adiw	r28, 0x1a	; 26
    5d80:	0f b6       	in	r0, 0x3f	; 63
    5d82:	f8 94       	cli
    5d84:	de bf       	out	0x3e, r29	; 62
    5d86:	0f be       	out	0x3f, r0	; 63
    5d88:	cd bf       	out	0x3d, r28	; 61
    5d8a:	df 91       	pop	r29
    5d8c:	cf 91       	pop	r28
    5d8e:	1f 91       	pop	r17
    5d90:	0f 91       	pop	r16
    5d92:	ff 90       	pop	r15
    5d94:	ef 90       	pop	r14
    5d96:	df 90       	pop	r13
    5d98:	cf 90       	pop	r12
    5d9a:	bf 90       	pop	r11
    5d9c:	af 90       	pop	r10
    5d9e:	9f 90       	pop	r9
    5da0:	8f 90       	pop	r8
    5da2:	7f 90       	pop	r7
    5da4:	6f 90       	pop	r6
    5da6:	5f 90       	pop	r5
    5da8:	4f 90       	pop	r4
    5daa:	3f 90       	pop	r3
    5dac:	2f 90       	pop	r2
    5dae:	09 94       	ijmp
    5db0:	1e 96       	adiw	r26, 0x0e	; 14
    5db2:	ed 91       	ld	r30, X+
    5db4:	fc 91       	ld	r31, X
    5db6:	ef 80       	ldd	r14, Y+7	; 0x07
    5db8:	f8 84       	ldd	r15, Y+8	; 0x08
    5dba:	09 85       	ldd	r16, Y+9	; 0x09
    5dbc:	1a 85       	ldd	r17, Y+10	; 0x0a
    5dbe:	92 01       	movw	r18, r4
    5dc0:	4d 81       	ldd	r20, Y+5	; 0x05
    5dc2:	5e 81       	ldd	r21, Y+6	; 0x06
    5dc4:	6b 81       	ldd	r22, Y+3	; 0x03
    5dc6:	7c 81       	ldd	r23, Y+4	; 0x04
    5dc8:	89 8d       	ldd	r24, Y+25	; 0x19
    5dca:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5dcc:	09 95       	icall
    5dce:	90 cf       	rjmp	.-224    	; 0x5cf0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    5dd0:	2f 81       	ldd	r18, Y+7	; 0x07
    5dd2:	38 85       	ldd	r19, Y+8	; 0x08
    5dd4:	26 15       	cp	r18, r6
    5dd6:	37 05       	cpc	r19, r7
    5dd8:	09 f4       	brne	.+2      	; 0x5ddc <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x246>
    5dda:	8a cf       	rjmp	.-236    	; 0x5cf0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x15a>
    5ddc:	31 e0       	ldi	r19, 0x01	; 1
    5dde:	b3 12       	cpse	r11, r19
    5de0:	07 c0       	rjmp	.+14     	; 0x5df0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    5de2:	a3 12       	cpse	r10, r19
    5de4:	05 c0       	rjmp	.+10     	; 0x5df0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x25a>
    5de6:	1c 96       	adiw	r26, 0x0c	; 12
    5de8:	ed 91       	ld	r30, X+
    5dea:	fc 91       	ld	r31, X
    5dec:	93 01       	movw	r18, r6
    5dee:	78 cf       	rjmp	.-272    	; 0x5ce0 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x14a>
    5df0:	1e 96       	adiw	r26, 0x0e	; 14
    5df2:	ed 91       	ld	r30, X+
    5df4:	fc 91       	ld	r31, X
    5df6:	73 01       	movw	r14, r6
    5df8:	e0 cf       	rjmp	.-64     	; 0x5dba <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x224>
    5dfa:	6b 85       	ldd	r22, Y+11	; 0x0b
    5dfc:	7c 85       	ldd	r23, Y+12	; 0x0c
    5dfe:	64 19       	sub	r22, r4
    5e00:	75 09       	sbc	r23, r5
    5e02:	06 84       	ldd	r0, Z+14	; 0x0e
    5e04:	f7 85       	ldd	r31, Z+15	; 0x0f
    5e06:	e0 2d       	mov	r30, r0
    5e08:	73 01       	movw	r14, r6
    5e0a:	0f 85       	ldd	r16, Y+15	; 0x0f
    5e0c:	18 89       	ldd	r17, Y+16	; 0x10
    5e0e:	92 01       	movw	r18, r4
    5e10:	a4 01       	movw	r20, r8
    5e12:	89 8d       	ldd	r24, Y+25	; 0x19
    5e14:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5e16:	09 95       	icall
    5e18:	a9 cf       	rjmp	.-174    	; 0x5d6c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    5e1a:	f9 01       	movw	r30, r18
    5e1c:	34 96       	adiw	r30, 0x04	; 4
    5e1e:	94 91       	lpm	r25, Z
    5e20:	32 97       	sbiw	r30, 0x02	; 2
    5e22:	45 91       	lpm	r20, Z+
    5e24:	54 91       	lpm	r21, Z
    5e26:	d9 1a       	sub	r13, r25
    5e28:	b7 e0       	ldi	r27, 0x07	; 7
    5e2a:	db 9e       	mul	r13, r27
    5e2c:	40 0d       	add	r20, r0
    5e2e:	51 1d       	adc	r21, r1
    5e30:	11 24       	eor	r1, r1
    5e32:	f9 01       	movw	r30, r18
    5e34:	25 91       	lpm	r18, Z+
    5e36:	34 91       	lpm	r19, Z
    5e38:	3c 8b       	std	Y+20, r19	; 0x14
    5e3a:	2b 8b       	std	Y+19, r18	; 0x13
    5e3c:	fa 01       	movw	r30, r20
    5e3e:	25 90       	lpm	r2, Z+
    5e40:	34 90       	lpm	r3, Z
    5e42:	fa 01       	movw	r30, r20
    5e44:	32 96       	adiw	r30, 0x02	; 2
    5e46:	74 90       	lpm	r7, Z
    5e48:	31 96       	adiw	r30, 0x01	; 1
    5e4a:	34 91       	lpm	r19, Z
    5e4c:	39 8b       	std	Y+17, r19	; 0x11
    5e4e:	32 96       	adiw	r30, 0x02	; 2
    5e50:	64 90       	lpm	r6, Z
    5e52:	31 96       	adiw	r30, 0x01	; 1
    5e54:	44 90       	lpm	r4, Z
    5e56:	41 e0       	ldi	r20, 0x01	; 1
    5e58:	4c 15       	cp	r20, r12
    5e5a:	18 f0       	brcs	.+6      	; 0x5e62 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    5e5c:	4a 15       	cp	r20, r10
    5e5e:	08 f0       	brcs	.+2      	; 0x5e62 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2cc>
    5e60:	7f c0       	rjmp	.+254    	; 0x5f60 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3ca>
    5e62:	66 2d       	mov	r22, r6
    5e64:	06 2c       	mov	r0, r6
    5e66:	00 0c       	add	r0, r0
    5e68:	77 0b       	sbc	r23, r23
    5e6a:	7c 83       	std	Y+4, r23	; 0x04
    5e6c:	6b 83       	std	Y+3, r22	; 0x03
    5e6e:	84 2d       	mov	r24, r4
    5e70:	04 2c       	mov	r0, r4
    5e72:	00 0c       	add	r0, r0
    5e74:	99 0b       	sbc	r25, r25
    5e76:	9e 83       	std	Y+6, r25	; 0x06
    5e78:	8d 83       	std	Y+5, r24	; 0x05
    5e7a:	a9 8d       	ldd	r26, Y+25	; 0x19
    5e7c:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5e7e:	ed 91       	ld	r30, X+
    5e80:	fc 91       	ld	r31, X
    5e82:	11 97       	sbiw	r26, 0x01	; 1
    5e84:	02 84       	ldd	r0, Z+10	; 0x0a
    5e86:	f3 85       	ldd	r31, Z+11	; 0x0b
    5e88:	e0 2d       	mov	r30, r0
    5e8a:	cd 01       	movw	r24, r26
    5e8c:	09 95       	icall
    5e8e:	51 2c       	mov	r5, r1
    5e90:	d1 2c       	mov	r13, r1
    5e92:	c1 2c       	mov	r12, r1
    5e94:	ea 2d       	mov	r30, r10
    5e96:	f0 e0       	ldi	r31, 0x00	; 0
    5e98:	fa 87       	std	Y+10, r31	; 0x0a
    5e9a:	e9 87       	std	Y+9, r30	; 0x09
    5e9c:	2b 2d       	mov	r18, r11
    5e9e:	30 e0       	ldi	r19, 0x00	; 0
    5ea0:	3c 87       	std	Y+12, r19	; 0x0c
    5ea2:	2b 87       	std	Y+11, r18	; 0x0b
    5ea4:	a4 01       	movw	r20, r8
    5ea6:	44 0d       	add	r20, r4
    5ea8:	51 1d       	adc	r21, r1
    5eaa:	47 fc       	sbrc	r4, 7
    5eac:	5a 95       	dec	r21
    5eae:	58 8f       	std	Y+24, r21	; 0x18
    5eb0:	4f 8b       	std	Y+23, r20	; 0x17
    5eb2:	69 81       	ldd	r22, Y+1	; 0x01
    5eb4:	7a 81       	ldd	r23, Y+2	; 0x02
    5eb6:	66 0d       	add	r22, r6
    5eb8:	71 1d       	adc	r23, r1
    5eba:	67 fc       	sbrc	r6, 7
    5ebc:	7a 95       	dec	r23
    5ebe:	7e 87       	std	Y+14, r23	; 0x0e
    5ec0:	6d 87       	std	Y+13, r22	; 0x0d
    5ec2:	79 89       	ldd	r23, Y+17	; 0x11
    5ec4:	c7 16       	cp	r12, r23
    5ec6:	08 f0       	brcs	.+2      	; 0x5eca <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x334>
    5ec8:	51 cf       	rjmp	.-350    	; 0x5d6c <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x1d6>
    5eca:	2c 2d       	mov	r18, r12
    5ecc:	30 e0       	ldi	r19, 0x00	; 0
    5ece:	4d 81       	ldd	r20, Y+5	; 0x05
    5ed0:	5e 81       	ldd	r21, Y+6	; 0x06
    5ed2:	42 0f       	add	r20, r18
    5ed4:	53 1f       	adc	r21, r19
    5ed6:	a9 85       	ldd	r26, Y+9	; 0x09
    5ed8:	ba 85       	ldd	r27, Y+10	; 0x0a
    5eda:	4a 9f       	mul	r20, r26
    5edc:	c0 01       	movw	r24, r0
    5ede:	4b 9f       	mul	r20, r27
    5ee0:	90 0d       	add	r25, r0
    5ee2:	5a 9f       	mul	r21, r26
    5ee4:	90 0d       	add	r25, r0
    5ee6:	11 24       	eor	r1, r1
    5ee8:	fc 01       	movw	r30, r24
    5eea:	e8 0d       	add	r30, r8
    5eec:	f9 1d       	adc	r31, r9
    5eee:	f8 8b       	std	Y+16, r31	; 0x10
    5ef0:	ef 87       	std	Y+15, r30	; 0x0f
    5ef2:	85 2d       	mov	r24, r5
    5ef4:	61 2c       	mov	r6, r1
    5ef6:	4f 89       	ldd	r20, Y+23	; 0x17
    5ef8:	58 8d       	ldd	r21, Y+24	; 0x18
    5efa:	42 0f       	add	r20, r18
    5efc:	53 1f       	adc	r21, r19
    5efe:	5e 8b       	std	Y+22, r21	; 0x16
    5f00:	4d 8b       	std	Y+21, r20	; 0x15
    5f02:	67 14       	cp	r6, r7
    5f04:	08 f0       	brcs	.+2      	; 0x5f08 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x372>
    5f06:	50 c0       	rjmp	.+160    	; 0x5fa8 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x412>
    5f08:	44 24       	eor	r4, r4
    5f0a:	43 94       	inc	r4
    5f0c:	48 0e       	add	r4, r24
    5f0e:	87 70       	andi	r24, 0x07	; 7
    5f10:	41 f4       	brne	.+16     	; 0x5f22 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x38c>
    5f12:	c1 01       	movw	r24, r2
    5f14:	01 96       	adiw	r24, 0x01	; 1
    5f16:	eb 89       	ldd	r30, Y+19	; 0x13
    5f18:	fc 89       	ldd	r31, Y+20	; 0x14
    5f1a:	e2 0d       	add	r30, r2
    5f1c:	f3 1d       	adc	r31, r3
    5f1e:	d4 90       	lpm	r13, Z
    5f20:	1c 01       	movw	r2, r24
    5f22:	d7 fe       	sbrs	r13, 7
    5f24:	19 c0       	rjmp	.+50     	; 0x5f58 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    5f26:	a9 8d       	ldd	r26, Y+25	; 0x19
    5f28:	ba 8d       	ldd	r27, Y+26	; 0x1a
    5f2a:	ed 91       	ld	r30, X+
    5f2c:	fc 91       	ld	r31, X
    5f2e:	66 2d       	mov	r22, r6
    5f30:	70 e0       	ldi	r23, 0x00	; 0
    5f32:	b1 e0       	ldi	r27, 0x01	; 1
    5f34:	bb 12       	cpse	r11, r27
    5f36:	19 c0       	rjmp	.+50     	; 0x5f6a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    5f38:	ab 12       	cpse	r10, r27
    5f3a:	17 c0       	rjmp	.+46     	; 0x5f6a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3d4>
    5f3c:	2d 85       	ldd	r18, Y+13	; 0x0d
    5f3e:	3e 85       	ldd	r19, Y+14	; 0x0e
    5f40:	62 0f       	add	r22, r18
    5f42:	73 1f       	adc	r23, r19
    5f44:	04 84       	ldd	r0, Z+12	; 0x0c
    5f46:	f5 85       	ldd	r31, Z+13	; 0x0d
    5f48:	e0 2d       	mov	r30, r0
    5f4a:	2f 81       	ldd	r18, Y+7	; 0x07
    5f4c:	38 85       	ldd	r19, Y+8	; 0x08
    5f4e:	4d 89       	ldd	r20, Y+21	; 0x15
    5f50:	5e 89       	ldd	r21, Y+22	; 0x16
    5f52:	89 8d       	ldd	r24, Y+25	; 0x19
    5f54:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5f56:	09 95       	icall
    5f58:	dd 0c       	add	r13, r13
    5f5a:	63 94       	inc	r6
    5f5c:	84 2d       	mov	r24, r4
    5f5e:	d1 cf       	rjmp	.-94     	; 0x5f02 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x36c>
    5f60:	1e 82       	std	Y+6, r1	; 0x06
    5f62:	1d 82       	std	Y+5, r1	; 0x05
    5f64:	1c 82       	std	Y+4, r1	; 0x04
    5f66:	1b 82       	std	Y+3, r1	; 0x03
    5f68:	88 cf       	rjmp	.-240    	; 0x5e7a <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x2e4>
    5f6a:	4b 81       	ldd	r20, Y+3	; 0x03
    5f6c:	5c 81       	ldd	r21, Y+4	; 0x04
    5f6e:	64 0f       	add	r22, r20
    5f70:	75 1f       	adc	r23, r21
    5f72:	ab 85       	ldd	r26, Y+11	; 0x0b
    5f74:	bc 85       	ldd	r27, Y+12	; 0x0c
    5f76:	6a 9f       	mul	r22, r26
    5f78:	c0 01       	movw	r24, r0
    5f7a:	6b 9f       	mul	r22, r27
    5f7c:	90 0d       	add	r25, r0
    5f7e:	7a 9f       	mul	r23, r26
    5f80:	90 0d       	add	r25, r0
    5f82:	11 24       	eor	r1, r1
    5f84:	69 81       	ldd	r22, Y+1	; 0x01
    5f86:	7a 81       	ldd	r23, Y+2	; 0x02
    5f88:	68 0f       	add	r22, r24
    5f8a:	79 1f       	adc	r23, r25
    5f8c:	06 84       	ldd	r0, Z+14	; 0x0e
    5f8e:	f7 85       	ldd	r31, Z+15	; 0x0f
    5f90:	e0 2d       	mov	r30, r0
    5f92:	ef 80       	ldd	r14, Y+7	; 0x07
    5f94:	f8 84       	ldd	r15, Y+8	; 0x08
    5f96:	09 85       	ldd	r16, Y+9	; 0x09
    5f98:	1a 85       	ldd	r17, Y+10	; 0x0a
    5f9a:	9d 01       	movw	r18, r26
    5f9c:	4f 85       	ldd	r20, Y+15	; 0x0f
    5f9e:	58 89       	ldd	r21, Y+16	; 0x10
    5fa0:	89 8d       	ldd	r24, Y+25	; 0x19
    5fa2:	9a 8d       	ldd	r25, Y+26	; 0x1a
    5fa4:	09 95       	icall
    5fa6:	d8 cf       	rjmp	.-80     	; 0x5f58 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x3c2>
    5fa8:	57 0c       	add	r5, r7
    5faa:	c3 94       	inc	r12
    5fac:	8a cf       	rjmp	.-236    	; 0x5ec2 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)+0x32c>
    5fae:	6a 96       	adiw	r28, 0x1a	; 26
    5fb0:	0f b6       	in	r0, 0x3f	; 63
    5fb2:	f8 94       	cli
    5fb4:	de bf       	out	0x3e, r29	; 62
    5fb6:	0f be       	out	0x3f, r0	; 63
    5fb8:	cd bf       	out	0x3d, r28	; 61
    5fba:	df 91       	pop	r29
    5fbc:	cf 91       	pop	r28
    5fbe:	1f 91       	pop	r17
    5fc0:	0f 91       	pop	r16
    5fc2:	ff 90       	pop	r15
    5fc4:	ef 90       	pop	r14
    5fc6:	df 90       	pop	r13
    5fc8:	cf 90       	pop	r12
    5fca:	bf 90       	pop	r11
    5fcc:	af 90       	pop	r10
    5fce:	9f 90       	pop	r9
    5fd0:	8f 90       	pop	r8
    5fd2:	7f 90       	pop	r7
    5fd4:	6f 90       	pop	r6
    5fd6:	5f 90       	pop	r5
    5fd8:	4f 90       	pop	r4
    5fda:	3f 90       	pop	r3
    5fdc:	2f 90       	pop	r2
    5fde:	08 95       	ret

00005fe0 <Adafruit_GFX::write(unsigned char)>:
/*!
    @brief  Print one byte/character of data, used to support print()
    @param  c  The 8-bit ascii character to write
*/
/**************************************************************************/
size_t Adafruit_GFX::write(uint8_t c) {
    5fe0:	8f 92       	push	r8
    5fe2:	9f 92       	push	r9
    5fe4:	af 92       	push	r10
    5fe6:	cf 92       	push	r12
    5fe8:	ef 92       	push	r14
    5fea:	ff 92       	push	r15
    5fec:	0f 93       	push	r16
    5fee:	1f 93       	push	r17
    5ff0:	cf 93       	push	r28
    5ff2:	df 93       	push	r29
    5ff4:	ec 01       	movw	r28, r24
    5ff6:	26 2f       	mov	r18, r22
    if(!gfxFont) { // 'Classic' built-in font
    5ff8:	88 8d       	ldd	r24, Y+24	; 0x18
    5ffa:	99 8d       	ldd	r25, Y+25	; 0x19
    5ffc:	00 97       	sbiw	r24, 0x00	; 0
    5ffe:	09 f0       	breq	.+2      	; 0x6002 <Adafruit_GFX::write(unsigned char)+0x22>
    6000:	50 c0       	rjmp	.+160    	; 0x60a2 <Adafruit_GFX::write(unsigned char)+0xc2>

        if(c == '\n') {                        // Newline?
    6002:	6a 30       	cpi	r22, 0x0A	; 10
    6004:	d1 f4       	brne	.+52     	; 0x603a <Adafruit_GFX::write(unsigned char)+0x5a>
            cursor_x  = 0;                     // Reset x to zero,
    6006:	1c 86       	std	Y+12, r1	; 0x0c
    6008:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += textsize_y * 8;        // advance y one line
    600a:	8c 89       	ldd	r24, Y+20	; 0x14
    600c:	48 e0       	ldi	r20, 0x08	; 8
    600e:	84 9f       	mul	r24, r20
    6010:	90 01       	movw	r18, r0
    6012:	11 24       	eor	r1, r1
    6014:	8d 85       	ldd	r24, Y+13	; 0x0d
    6016:	9e 85       	ldd	r25, Y+14	; 0x0e
    6018:	82 0f       	add	r24, r18
    601a:	93 1f       	adc	r25, r19

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    601c:	9e 87       	std	Y+14, r25	; 0x0e
    601e:	8d 87       	std	Y+13, r24	; 0x0d
            }
        }

    }
    return 1;
}
    6020:	81 e0       	ldi	r24, 0x01	; 1
    6022:	90 e0       	ldi	r25, 0x00	; 0
    6024:	df 91       	pop	r29
    6026:	cf 91       	pop	r28
    6028:	1f 91       	pop	r17
    602a:	0f 91       	pop	r16
    602c:	ff 90       	pop	r15
    602e:	ef 90       	pop	r14
    6030:	cf 90       	pop	r12
    6032:	af 90       	pop	r10
    6034:	9f 90       	pop	r9
    6036:	8f 90       	pop	r8
    6038:	08 95       	ret
    if(!gfxFont) { // 'Classic' built-in font

        if(c == '\n') {                        // Newline?
            cursor_x  = 0;                     // Reset x to zero,
            cursor_y += textsize_y * 8;        // advance y one line
        } else if(c != '\r') {                 // Ignore carriage returns
    603a:	6d 30       	cpi	r22, 0x0D	; 13
    603c:	89 f3       	breq	.-30     	; 0x6020 <Adafruit_GFX::write(unsigned char)+0x40>
    603e:	cb 88       	ldd	r12, Y+19	; 0x13
    6040:	ac 88       	ldd	r10, Y+20	; 0x14
            if(wrap && ((cursor_x + textsize_x * 6) > _width)) { // Off right?
    6042:	8e 89       	ldd	r24, Y+22	; 0x16
    6044:	88 23       	and	r24, r24
    6046:	c1 f0       	breq	.+48     	; 0x6078 <Adafruit_GFX::write(unsigned char)+0x98>
    6048:	8b 85       	ldd	r24, Y+11	; 0x0b
    604a:	9c 85       	ldd	r25, Y+12	; 0x0c
    604c:	36 e0       	ldi	r19, 0x06	; 6
    604e:	c3 9e       	mul	r12, r19
    6050:	80 0d       	add	r24, r0
    6052:	91 1d       	adc	r25, r1
    6054:	11 24       	eor	r1, r1
    6056:	4f 81       	ldd	r20, Y+7	; 0x07
    6058:	58 85       	ldd	r21, Y+8	; 0x08
    605a:	48 17       	cp	r20, r24
    605c:	59 07       	cpc	r21, r25
    605e:	64 f4       	brge	.+24     	; 0x6078 <Adafruit_GFX::write(unsigned char)+0x98>
    6060:	4d 85       	ldd	r20, Y+13	; 0x0d
    6062:	5e 85       	ldd	r21, Y+14	; 0x0e
                cursor_x  = 0;                 // Reset x to zero,
    6064:	1c 86       	std	Y+12, r1	; 0x0c
    6066:	1b 86       	std	Y+11, r1	; 0x0b
                cursor_y += textsize_y * 8;    // advance y one line
    6068:	38 e0       	ldi	r19, 0x08	; 8
    606a:	a3 9e       	mul	r10, r19
    606c:	c0 01       	movw	r24, r0
    606e:	11 24       	eor	r1, r1
    6070:	84 0f       	add	r24, r20
    6072:	95 1f       	adc	r25, r21
    6074:	9e 87       	std	Y+14, r25	; 0x0e
    6076:	8d 87       	std	Y+13, r24	; 0x0d
            }
            drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    6078:	e9 88       	ldd	r14, Y+17	; 0x11
    607a:	fa 88       	ldd	r15, Y+18	; 0x12
    607c:	0f 85       	ldd	r16, Y+15	; 0x0f
    607e:	18 89       	ldd	r17, Y+16	; 0x10
    6080:	4d 85       	ldd	r20, Y+13	; 0x0d
    6082:	5e 85       	ldd	r21, Y+14	; 0x0e
    6084:	6b 85       	ldd	r22, Y+11	; 0x0b
    6086:	7c 85       	ldd	r23, Y+12	; 0x0c
    6088:	ce 01       	movw	r24, r28
    608a:	85 dd       	rcall	.-1270   	; 0x5b96 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
            cursor_x += textsize_x * 6;          // Advance x one char
    608c:	2b 89       	ldd	r18, Y+19	; 0x13
    608e:	8b 85       	ldd	r24, Y+11	; 0x0b
    6090:	9c 85       	ldd	r25, Y+12	; 0x0c
    6092:	46 e0       	ldi	r20, 0x06	; 6
    6094:	24 9f       	mul	r18, r20
    6096:	80 0d       	add	r24, r0
    6098:	91 1d       	adc	r25, r1
    609a:	11 24       	eor	r1, r1
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    609c:	9c 87       	std	Y+12, r25	; 0x0c
    609e:	8b 87       	std	Y+11, r24	; 0x0b
    60a0:	bf cf       	rjmp	.-130    	; 0x6020 <Adafruit_GFX::write(unsigned char)+0x40>
            cursor_x += textsize_x * 6;          // Advance x one char
        }

    } else { // Custom font

        if(c == '\n') {
    60a2:	6a 30       	cpi	r22, 0x0A	; 10
    60a4:	69 f4       	brne	.+26     	; 0x60c0 <Adafruit_GFX::write(unsigned char)+0xe0>
            cursor_x  = 0;
    60a6:	1c 86       	std	Y+12, r1	; 0x0c
    60a8:	1b 86       	std	Y+11, r1	; 0x0b
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    60aa:	fc 01       	movw	r30, r24
    60ac:	36 96       	adiw	r30, 0x06	; 6
    60ae:	e4 91       	lpm	r30, Z

    } else { // Custom font

        if(c == '\n') {
            cursor_x  = 0;
            cursor_y += (int16_t)textsize_y *
    60b0:	2c 89       	ldd	r18, Y+20	; 0x14
    60b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    60b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    60b6:	e2 9f       	mul	r30, r18
    60b8:	80 0d       	add	r24, r0
    60ba:	91 1d       	adc	r25, r1
    60bc:	11 24       	eor	r1, r1
    60be:	ae cf       	rjmp	.-164    	; 0x601c <Adafruit_GFX::write(unsigned char)+0x3c>
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
    60c0:	6d 30       	cpi	r22, 0x0D	; 13
    60c2:	09 f4       	brne	.+2      	; 0x60c6 <Adafruit_GFX::write(unsigned char)+0xe6>
    60c4:	ad cf       	rjmp	.-166    	; 0x6020 <Adafruit_GFX::write(unsigned char)+0x40>
            uint8_t first = pgm_read_byte(&gfxFont->first);
    60c6:	fc 01       	movw	r30, r24
    60c8:	34 96       	adiw	r30, 0x04	; 4
    60ca:	34 91       	lpm	r19, Z
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
    60cc:	63 17       	cp	r22, r19
    60ce:	08 f4       	brcc	.+2      	; 0x60d2 <Adafruit_GFX::write(unsigned char)+0xf2>
    60d0:	a7 cf       	rjmp	.-178    	; 0x6020 <Adafruit_GFX::write(unsigned char)+0x40>
    60d2:	31 96       	adiw	r30, 0x01	; 1
    60d4:	e4 91       	lpm	r30, Z
    60d6:	e6 17       	cp	r30, r22
    60d8:	08 f4       	brcc	.+2      	; 0x60dc <Adafruit_GFX::write(unsigned char)+0xfc>
    60da:	a2 cf       	rjmp	.-188    	; 0x6020 <Adafruit_GFX::write(unsigned char)+0x40>
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    60dc:	fc 01       	movw	r30, r24
    60de:	32 96       	adiw	r30, 0x02	; 2
    60e0:	85 90       	lpm	r8, Z+
    60e2:	94 90       	lpm	r9, Z
            cursor_y += (int16_t)textsize_y *
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
    60e4:	46 2f       	mov	r20, r22
    60e6:	43 1b       	sub	r20, r19
    60e8:	34 2f       	mov	r19, r20
#endif

inline GFXglyph * pgm_read_glyph_ptr(const GFXfont *gfxFont, uint8_t c)
{
#ifdef __AVR__
    return &(((GFXglyph *)pgm_read_pointer(&gfxFont->glyph))[c]);
    60ea:	47 e0       	ldi	r20, 0x07	; 7
    60ec:	34 9f       	mul	r19, r20
    60ee:	80 0c       	add	r8, r0
    60f0:	91 1c       	adc	r9, r1
    60f2:	11 24       	eor	r1, r1
                        (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
        } else if(c != '\r') {
            uint8_t first = pgm_read_byte(&gfxFont->first);
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
    60f4:	f4 01       	movw	r30, r8
    60f6:	32 96       	adiw	r30, 0x02	; 2
    60f8:	34 91       	lpm	r19, Z
                          h     = pgm_read_byte(&glyph->height);
    60fa:	31 96       	adiw	r30, 0x01	; 1
    60fc:	e4 91       	lpm	r30, Z
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
    60fe:	33 23       	and	r19, r19
    6100:	a1 f1       	breq	.+104    	; 0x616a <Adafruit_GFX::write(unsigned char)+0x18a>
    6102:	ee 23       	and	r30, r30
    6104:	91 f1       	breq	.+100    	; 0x616a <Adafruit_GFX::write(unsigned char)+0x18a>
    6106:	cb 88       	ldd	r12, Y+19	; 0x13
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    6108:	f4 01       	movw	r30, r8
    610a:	35 96       	adiw	r30, 0x05	; 5
    610c:	e4 91       	lpm	r30, Z
    610e:	ac 88       	ldd	r10, Y+20	; 0x14
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    6110:	4e 89       	ldd	r20, Y+22	; 0x16
    6112:	44 23       	and	r20, r20
    6114:	01 f1       	breq	.+64     	; 0x6156 <Adafruit_GFX::write(unsigned char)+0x176>
            if((c >= first) && (c <= (uint8_t)pgm_read_byte(&gfxFont->last))) {
                GFXglyph *glyph  = pgm_read_glyph_ptr(gfxFont, c - first);
                uint8_t   w     = pgm_read_byte(&glyph->width),
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
    6116:	0e 2e       	mov	r0, r30
    6118:	00 0c       	add	r0, r0
    611a:	ff 0b       	sbc	r31, r31
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
    611c:	e3 0f       	add	r30, r19
    611e:	f1 1d       	adc	r31, r1
    6120:	ce 9e       	mul	r12, r30
    6122:	a0 01       	movw	r20, r0
    6124:	cf 9e       	mul	r12, r31
    6126:	50 0d       	add	r21, r0
    6128:	11 24       	eor	r1, r1
    612a:	6b 85       	ldd	r22, Y+11	; 0x0b
    612c:	7c 85       	ldd	r23, Y+12	; 0x0c
    612e:	46 0f       	add	r20, r22
    6130:	57 1f       	adc	r21, r23
    6132:	6f 81       	ldd	r22, Y+7	; 0x07
    6134:	78 85       	ldd	r23, Y+8	; 0x08
    6136:	64 17       	cp	r22, r20
    6138:	75 07       	cpc	r23, r21
    613a:	6c f4       	brge	.+26     	; 0x6156 <Adafruit_GFX::write(unsigned char)+0x176>
    613c:	4d 85       	ldd	r20, Y+13	; 0x0d
    613e:	5e 85       	ldd	r21, Y+14	; 0x0e
                        cursor_x  = 0;
    6140:	1c 86       	std	Y+12, r1	; 0x0c
    6142:	1b 86       	std	Y+11, r1	; 0x0b
                        cursor_y += (int16_t)textsize_y *
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
    6144:	fc 01       	movw	r30, r24
    6146:	36 96       	adiw	r30, 0x06	; 6
    6148:	e4 91       	lpm	r30, Z
                          h     = pgm_read_byte(&glyph->height);
                if((w > 0) && (h > 0)) { // Is there an associated bitmap?
                    int16_t xo = (int8_t)pgm_read_byte(&glyph->xOffset); // sic
                    if(wrap && ((cursor_x + textsize_x * (xo + w)) > _width)) {
                        cursor_x  = 0;
                        cursor_y += (int16_t)textsize_y *
    614a:	ae 9e       	mul	r10, r30
    614c:	40 0d       	add	r20, r0
    614e:	51 1d       	adc	r21, r1
    6150:	11 24       	eor	r1, r1
    6152:	5e 87       	std	Y+14, r21	; 0x0e
    6154:	4d 87       	std	Y+13, r20	; 0x0d
                          (uint8_t)pgm_read_byte(&gfxFont->yAdvance);
                    }
                    drawChar(cursor_x, cursor_y, c, textcolor, textbgcolor, textsize_x, textsize_y);
    6156:	e9 88       	ldd	r14, Y+17	; 0x11
    6158:	fa 88       	ldd	r15, Y+18	; 0x12
    615a:	0f 85       	ldd	r16, Y+15	; 0x0f
    615c:	18 89       	ldd	r17, Y+16	; 0x10
    615e:	4d 85       	ldd	r20, Y+13	; 0x0d
    6160:	5e 85       	ldd	r21, Y+14	; 0x0e
    6162:	6b 85       	ldd	r22, Y+11	; 0x0b
    6164:	7c 85       	ldd	r23, Y+12	; 0x0c
    6166:	ce 01       	movw	r24, r28
    6168:	16 dd       	rcall	.-1492   	; 0x5b96 <Adafruit_GFX::drawChar(int, int, unsigned char, unsigned int, unsigned int, unsigned char, unsigned char)>
                }
                cursor_x += (uint8_t)pgm_read_byte(&glyph->xAdvance) * (int16_t)textsize_x;
    616a:	f4 01       	movw	r30, r8
    616c:	34 96       	adiw	r30, 0x04	; 4
    616e:	e4 91       	lpm	r30, Z
    6170:	2b 89       	ldd	r18, Y+19	; 0x13
    6172:	8b 85       	ldd	r24, Y+11	; 0x0b
    6174:	9c 85       	ldd	r25, Y+12	; 0x0c
    6176:	e2 9f       	mul	r30, r18
    6178:	80 0d       	add	r24, r0
    617a:	91 1d       	adc	r25, r1
    617c:	11 24       	eor	r1, r1
    617e:	8e cf       	rjmp	.-228    	; 0x609c <Adafruit_GFX::write(unsigned char)+0xbc>

00006180 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>:
    @param  s_x  Desired text width magnification level in X-axis. 1 is default
    @param  s_y  Desired text width magnification level in Y-axis. 1 is default
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s_x, uint8_t s_y) {
    textsize_x = (s_x > 0) ? s_x : 1;
    6180:	61 11       	cpse	r22, r1
    6182:	01 c0       	rjmp	.+2      	; 0x6186 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x6>
    6184:	61 e0       	ldi	r22, 0x01	; 1
    6186:	fc 01       	movw	r30, r24
    6188:	63 8b       	std	Z+19, r22	; 0x13
    textsize_y = (s_y > 0) ? s_y : 1;
    618a:	41 11       	cpse	r20, r1
    618c:	01 c0       	rjmp	.+2      	; 0x6190 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)+0x10>
    618e:	41 e0       	ldi	r20, 0x01	; 1
    6190:	fc 01       	movw	r30, r24
    6192:	44 8b       	std	Z+20, r20	; 0x14
}
    6194:	08 95       	ret

00006196 <Adafruit_GFX::setTextSize(unsigned char)>:
    @brief   Set text 'magnification' size. Each increase in s makes 1 pixel that much bigger.
    @param  s  Desired text size. 1 is default 6x8, 2 is 12x16, 3 is 18x24, etc
*/
/**************************************************************************/
void Adafruit_GFX::setTextSize(uint8_t s) {
    setTextSize(s, s);
    6196:	46 2f       	mov	r20, r22
    6198:	f3 cf       	rjmp	.-26     	; 0x6180 <Adafruit_GFX::setTextSize(unsigned char, unsigned char)>

0000619a <FastLED_NeoMatrix::FastLED_NeoMatrix(CRGB*, unsigned int, unsigned int, unsigned char)>:
    matrixWidth = mW;
    matrixHeight = mH;
    type = matrixType;
    tilesX = tX;
    tilesY = tY;
}
    619a:	ff 92       	push	r15
    619c:	0f 93       	push	r16
    619e:	1f 93       	push	r17
    61a0:	cf 93       	push	r28
    61a2:	df 93       	push	r29
    61a4:	ec 01       	movw	r28, r24
    61a6:	f0 2e       	mov	r15, r16
    61a8:	10 e0       	ldi	r17, 0x00	; 0
    61aa:	00 e0       	ldi	r16, 0x00	; 0
    61ac:	20 d0       	rcall	.+64     	; 0x61ee <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>
    61ae:	86 e7       	ldi	r24, 0x76	; 118
    61b0:	98 e0       	ldi	r25, 0x08	; 8
    61b2:	99 83       	std	Y+1, r25	; 0x01
    61b4:	88 83       	st	Y, r24
    61b6:	fe 01       	movw	r30, r28
    61b8:	e6 5e       	subi	r30, 0xE6	; 230
    61ba:	fe 4f       	sbci	r31, 0xFE	; 254
    61bc:	f0 82       	st	Z, r15
    61be:	31 96       	adiw	r30, 0x01	; 1
    61c0:	10 82       	st	Z, r1
    61c2:	c4 5e       	subi	r28, 0xE4	; 228
    61c4:	de 4f       	sbci	r29, 0xFE	; 254
    61c6:	18 82       	st	Y, r1
    61c8:	df 91       	pop	r29
    61ca:	cf 91       	pop	r28
    61cc:	1f 91       	pop	r17
    61ce:	0f 91       	pop	r16
    61d0:	ff 90       	pop	r15
    61d2:	08 95       	ret

000061d4 <FastLED_NeoMatrix::show()>:

void FastLED_NeoMatrix::show() {
  if (_show) { _show(); return; };
    61d4:	8d 5d       	subi	r24, 0xDD	; 221
    61d6:	9e 4f       	sbci	r25, 0xFE	; 254
    61d8:	dc 01       	movw	r26, r24
    61da:	ed 91       	ld	r30, X+
    61dc:	fc 91       	ld	r31, X
    61de:	30 97       	sbiw	r30, 0x00	; 0
    61e0:	09 f0       	breq	.+2      	; 0x61e4 <FastLED_NeoMatrix::show()+0x10>
    61e2:	09 94       	ijmp
	/// Update all our controllers with the current led colors, using the passed in brightness
	/// @param scale temporarily override the scale
	void show(uint8_t scale);

	/// Update all our controllers with the current led colors
	void show() { show(m_Scale); }
    61e4:	60 91 0f 10 	lds	r22, 0x100F	; 0x80100f <FastLED>
    61e8:	8f e0       	ldi	r24, 0x0F	; 15
    61ea:	90 e1       	ldi	r25, 0x10	; 16
    61ec:	48 c4       	rjmp	.+2192   	; 0x6a7e <CFastLED::show(unsigned char)>

000061ee <Framebuffer_GFX::Framebuffer_GFX(CRGB*, unsigned int, unsigned int, void (*)())>:
}

// Call without a value to reset (disable passthrough)
void Framebuffer_GFX::setPassThruColor(void) {
  passThruFlag = false;
}
    61ee:	af 92       	push	r10
    61f0:	bf 92       	push	r11
    61f2:	cf 92       	push	r12
    61f4:	df 92       	push	r13
    61f6:	ef 92       	push	r14
    61f8:	ff 92       	push	r15
    61fa:	0f 93       	push	r16
    61fc:	1f 93       	push	r17
    61fe:	cf 93       	push	r28
    6200:	df 93       	push	r29
    6202:	ec 01       	movw	r28, r24
    6204:	5b 01       	movw	r10, r22
    6206:	7a 01       	movw	r14, r20
    6208:	69 01       	movw	r12, r18
    620a:	a9 01       	movw	r20, r18
    620c:	b7 01       	movw	r22, r14
    620e:	6d db       	rcall	.-2342   	; 0x58ea <Adafruit_GFX::Adafruit_GFX(int, int)>
    6210:	89 ed       	ldi	r24, 0xD9	; 217
    6212:	98 e0       	ldi	r25, 0x08	; 8
    6214:	99 83       	std	Y+1, r25	; 0x01
    6216:	88 83       	st	Y, r24
    6218:	fe 01       	movw	r30, r28
    621a:	e3 5e       	subi	r30, 0xE3	; 227
    621c:	fe 4f       	sbci	r31, 0xFE	; 254
    621e:	f1 82       	std	Z+1, r15	; 0x01
    6220:	e0 82       	st	Z, r14
    6222:	32 96       	adiw	r30, 0x02	; 2
    6224:	d1 82       	std	Z+1, r13	; 0x01
    6226:	c0 82       	st	Z, r12
    6228:	32 96       	adiw	r30, 0x02	; 2
    622a:	80 e1       	ldi	r24, 0x10	; 16
    622c:	97 e2       	ldi	r25, 0x27	; 39
    622e:	91 83       	std	Z+1, r25	; 0x01
    6230:	80 83       	st	Z, r24
    6232:	36 96       	adiw	r30, 0x06	; 6
    6234:	11 82       	std	Z+1, r1	; 0x01
    6236:	10 82       	st	Z, r1
    6238:	3a 96       	adiw	r30, 0x0a	; 10
    623a:	10 82       	st	Z, r1
    623c:	3c 97       	sbiw	r30, 0x0c	; 12
    623e:	b1 82       	std	Z+1, r11	; 0x01
    6240:	a0 82       	st	Z, r10
    6242:	32 97       	sbiw	r30, 0x02	; 2
    6244:	11 83       	std	Z+1, r17	; 0x01
    6246:	00 83       	st	Z, r16
    6248:	39 97       	sbiw	r30, 0x09	; 9
    624a:	10 82       	st	Z, r1
    624c:	31 96       	adiw	r30, 0x01	; 1
    624e:	10 82       	st	Z, r1
    6250:	31 96       	adiw	r30, 0x01	; 1
    6252:	10 82       	st	Z, r1
    6254:	c7 5d       	subi	r28, 0xD7	; 215
    6256:	de 4f       	sbci	r29, 0xFE	; 254
    6258:	ce 9c       	mul	r12, r14
    625a:	c0 01       	movw	r24, r0
    625c:	cf 9c       	mul	r12, r15
    625e:	90 0d       	add	r25, r0
    6260:	de 9c       	mul	r13, r14
    6262:	90 0d       	add	r25, r0
    6264:	11 24       	eor	r1, r1
    6266:	b0 e0       	ldi	r27, 0x00	; 0
    6268:	a0 e0       	ldi	r26, 0x00	; 0
    626a:	88 83       	st	Y, r24
    626c:	99 83       	std	Y+1, r25	; 0x01
    626e:	aa 83       	std	Y+2, r26	; 0x02
    6270:	bb 83       	std	Y+3, r27	; 0x03
    6272:	df 91       	pop	r29
    6274:	cf 91       	pop	r28
    6276:	1f 91       	pop	r17
    6278:	0f 91       	pop	r16
    627a:	ff 90       	pop	r15
    627c:	ef 90       	pop	r14
    627e:	df 90       	pop	r13
    6280:	cf 90       	pop	r12
    6282:	bf 90       	pop	r11
    6284:	af 90       	pop	r10
    6286:	08 95       	ret

00006288 <Framebuffer_GFX::begin()>:
    6288:	cf 93       	push	r28
    628a:	df 93       	push	r29
    628c:	ec 01       	movw	r28, r24
    628e:	6e e9       	ldi	r22, 0x9E	; 158
    6290:	78 e0       	ldi	r23, 0x08	; 8
    6292:	8f e9       	ldi	r24, 0x9F	; 159
    6294:	90 e1       	ldi	r25, 0x10	; 16
    6296:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    629a:	fe 01       	movw	r30, r28
    629c:	e3 5e       	subi	r30, 0xE3	; 227
    629e:	fe 4f       	sbci	r31, 0xFE	; 254
    62a0:	40 81       	ld	r20, Z
    62a2:	51 81       	ldd	r21, Z+1	; 0x01
    62a4:	70 e0       	ldi	r23, 0x00	; 0
    62a6:	60 e0       	ldi	r22, 0x00	; 0
    62a8:	20 e0       	ldi	r18, 0x00	; 0
    62aa:	8f e9       	ldi	r24, 0x9F	; 159
    62ac:	90 e1       	ldi	r25, 0x10	; 16
    62ae:	0e 94 0e 40 	call	0x801c	; 0x801c <Print::printNumberDec(unsigned long, unsigned char)>
    62b2:	6d eb       	ldi	r22, 0xBD	; 189
    62b4:	78 e0       	ldi	r23, 0x08	; 8
    62b6:	8f e9       	ldi	r24, 0x9F	; 159
    62b8:	90 e1       	ldi	r25, 0x10	; 16
    62ba:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    62be:	fe 01       	movw	r30, r28
    62c0:	e1 5e       	subi	r30, 0xE1	; 225
    62c2:	fe 4f       	sbci	r31, 0xFE	; 254
    62c4:	40 81       	ld	r20, Z
    62c6:	51 81       	ldd	r21, Z+1	; 0x01
    62c8:	70 e0       	ldi	r23, 0x00	; 0
    62ca:	60 e0       	ldi	r22, 0x00	; 0
    62cc:	20 e0       	ldi	r18, 0x00	; 0
    62ce:	8f e9       	ldi	r24, 0x9F	; 159
    62d0:	90 e1       	ldi	r25, 0x10	; 16
    62d2:	0e 94 0e 40 	call	0x801c	; 0x801c <Print::printNumberDec(unsigned long, unsigned char)>
    62d6:	67 ec       	ldi	r22, 0xC7	; 199
    62d8:	78 e0       	ldi	r23, 0x08	; 8
    62da:	8f e9       	ldi	r24, 0x9F	; 159
    62dc:	90 e1       	ldi	r25, 0x10	; 16
    62de:	0e 94 84 05 	call	0xb08	; 0xb08 <Print::write(char const*)>
    62e2:	c7 5d       	subi	r28, 0xD7	; 215
    62e4:	de 4f       	sbci	r29, 0xFE	; 254
    62e6:	48 81       	ld	r20, Y
    62e8:	59 81       	ldd	r21, Y+1	; 0x01
    62ea:	6a 81       	ldd	r22, Y+2	; 0x02
    62ec:	7b 81       	ldd	r23, Y+3	; 0x03
    62ee:	20 e0       	ldi	r18, 0x00	; 0
    62f0:	8f e9       	ldi	r24, 0x9F	; 159
    62f2:	90 e1       	ldi	r25, 0x10	; 16
    62f4:	0e 94 0e 40 	call	0x801c	; 0x801c <Print::printNumberDec(unsigned long, unsigned char)>
    62f8:	8f e9       	ldi	r24, 0x9F	; 159
    62fa:	90 e1       	ldi	r25, 0x10	; 16
    62fc:	df 91       	pop	r29
    62fe:	cf 91       	pop	r28
    6300:	0c 94 f4 3f 	jmp	0x7fe8	; 0x7fe8 <Print::println()>

00006304 <Framebuffer_GFX::expandColor(unsigned int)>:
    6304:	fc 01       	movw	r30, r24
    6306:	ef 2f       	mov	r30, r31
    6308:	ff 27       	eor	r31, r31
    630a:	e6 95       	lsr	r30
    630c:	e6 95       	lsr	r30
    630e:	e6 95       	lsr	r30
    6310:	e8 5e       	subi	r30, 0xE8	; 232
    6312:	f9 4f       	sbci	r31, 0xF9	; 249
    6314:	24 91       	lpm	r18, Z
    6316:	fc 01       	movw	r30, r24
    6318:	35 e0       	ldi	r19, 0x05	; 5
    631a:	f6 95       	lsr	r31
    631c:	e7 95       	ror	r30
    631e:	3a 95       	dec	r19
    6320:	e1 f7       	brne	.-8      	; 0x631a <Framebuffer_GFX::expandColor(unsigned int)+0x16>
    6322:	ef 73       	andi	r30, 0x3F	; 63
    6324:	ff 27       	eor	r31, r31
    6326:	e8 52       	subi	r30, 0x28	; 40
    6328:	fa 4f       	sbci	r31, 0xFA	; 250
    632a:	64 91       	lpm	r22, Z
    632c:	8f 71       	andi	r24, 0x1F	; 31
    632e:	99 27       	eor	r25, r25
    6330:	fc 01       	movw	r30, r24
    6332:	e8 5e       	subi	r30, 0xE8	; 232
    6334:	f9 4f       	sbci	r31, 0xF9	; 249
    6336:	e4 91       	lpm	r30, Z
    6338:	70 e0       	ldi	r23, 0x00	; 0
    633a:	90 e0       	ldi	r25, 0x00	; 0
    633c:	80 e0       	ldi	r24, 0x00	; 0
    633e:	98 2f       	mov	r25, r24
    6340:	87 2f       	mov	r24, r23
    6342:	76 2f       	mov	r23, r22
    6344:	66 27       	eor	r22, r22
    6346:	82 2b       	or	r24, r18
    6348:	6e 2b       	or	r22, r30
    634a:	08 95       	ret

0000634c <Framebuffer_GFX::fillScreen(unsigned int)>:
    634c:	8f 92       	push	r8
    634e:	9f 92       	push	r9
    6350:	af 92       	push	r10
    6352:	bf 92       	push	r11
    6354:	cf 92       	push	r12
    6356:	df 92       	push	r13
    6358:	ef 92       	push	r14
    635a:	ff 92       	push	r15
    635c:	cf 93       	push	r28
    635e:	df 93       	push	r29
    6360:	ec 01       	movw	r28, r24
    6362:	cb 01       	movw	r24, r22
    6364:	fe 01       	movw	r30, r28
    6366:	ef 5c       	subi	r30, 0xCF	; 207
    6368:	fe 4f       	sbci	r31, 0xFE	; 254
    636a:	20 81       	ld	r18, Z
    636c:	22 23       	and	r18, r18
    636e:	39 f1       	breq	.+78     	; 0x63be <Framebuffer_GFX::fillScreen(unsigned int)+0x72>
    6370:	34 97       	sbiw	r30, 0x04	; 4
    6372:	60 81       	ld	r22, Z
    6374:	71 81       	ldd	r23, Z+1	; 0x01
    6376:	82 81       	ldd	r24, Z+2	; 0x02
    6378:	30 e0       	ldi	r19, 0x00	; 0
    637a:	20 e0       	ldi	r18, 0x00	; 0
    637c:	c1 2c       	mov	r12, r1
    637e:	d1 2c       	mov	r13, r1
    6380:	76 01       	movw	r14, r12
    6382:	de 01       	movw	r26, r28
    6384:	a7 5d       	subi	r26, 0xD7	; 215
    6386:	be 4f       	sbci	r27, 0xFE	; 254
    6388:	cb 5d       	subi	r28, 0xDB	; 219
    638a:	de 4f       	sbci	r29, 0xFE	; 254
    638c:	8d 90       	ld	r8, X+
    638e:	9d 90       	ld	r9, X+
    6390:	ad 90       	ld	r10, X+
    6392:	bc 90       	ld	r11, X
    6394:	13 97       	sbiw	r26, 0x03	; 3
    6396:	c8 14       	cp	r12, r8
    6398:	d9 04       	cpc	r13, r9
    639a:	ea 04       	cpc	r14, r10
    639c:	fb 04       	cpc	r15, r11
    639e:	88 f4       	brcc	.+34     	; 0x63c2 <Framebuffer_GFX::fillScreen(unsigned int)+0x76>
    63a0:	e8 81       	ld	r30, Y
    63a2:	f9 81       	ldd	r31, Y+1	; 0x01
    63a4:	e2 0f       	add	r30, r18
    63a6:	f3 1f       	adc	r31, r19
    63a8:	80 83       	st	Z, r24
    63aa:	71 83       	std	Z+1, r23	; 0x01
    63ac:	62 83       	std	Z+2, r22	; 0x02
    63ae:	9f ef       	ldi	r25, 0xFF	; 255
    63b0:	c9 1a       	sub	r12, r25
    63b2:	d9 0a       	sbc	r13, r25
    63b4:	e9 0a       	sbc	r14, r25
    63b6:	f9 0a       	sbc	r15, r25
    63b8:	2d 5f       	subi	r18, 0xFD	; 253
    63ba:	3f 4f       	sbci	r19, 0xFF	; 255
    63bc:	e7 cf       	rjmp	.-50     	; 0x638c <Framebuffer_GFX::fillScreen(unsigned int)+0x40>
    63be:	a2 df       	rcall	.-188    	; 0x6304 <Framebuffer_GFX::expandColor(unsigned int)>
    63c0:	db cf       	rjmp	.-74     	; 0x6378 <Framebuffer_GFX::fillScreen(unsigned int)+0x2c>
    63c2:	df 91       	pop	r29
    63c4:	cf 91       	pop	r28
    63c6:	ff 90       	pop	r15
    63c8:	ef 90       	pop	r14
    63ca:	df 90       	pop	r13
    63cc:	cf 90       	pop	r12
    63ce:	bf 90       	pop	r11
    63d0:	af 90       	pop	r10
    63d2:	9f 90       	pop	r9
    63d4:	8f 90       	pop	r8
    63d6:	08 95       	ret

000063d8 <Framebuffer_GFX::CRGBtoint32(CRGB)>:
    63d8:	0f 93       	push	r16
    63da:	1f 93       	push	r17
    63dc:	fc 01       	movw	r30, r24
    63de:	60 81       	ld	r22, Z
    63e0:	70 e0       	ldi	r23, 0x00	; 0
    63e2:	90 e0       	ldi	r25, 0x00	; 0
    63e4:	80 e0       	ldi	r24, 0x00	; 0
    63e6:	cb 01       	movw	r24, r22
    63e8:	77 27       	eor	r23, r23
    63ea:	66 27       	eor	r22, r22
    63ec:	01 81       	ldd	r16, Z+1	; 0x01
    63ee:	10 e0       	ldi	r17, 0x00	; 0
    63f0:	10 2f       	mov	r17, r16
    63f2:	00 27       	eor	r16, r16
    63f4:	01 2e       	mov	r0, r17
    63f6:	00 0c       	add	r0, r0
    63f8:	22 0b       	sbc	r18, r18
    63fa:	33 0b       	sbc	r19, r19
    63fc:	60 0f       	add	r22, r16
    63fe:	71 1f       	adc	r23, r17
    6400:	82 1f       	adc	r24, r18
    6402:	93 1f       	adc	r25, r19
    6404:	22 81       	ldd	r18, Z+2	; 0x02
    6406:	62 0f       	add	r22, r18
    6408:	71 1d       	adc	r23, r1
    640a:	81 1d       	adc	r24, r1
    640c:	91 1d       	adc	r25, r1
    640e:	1f 91       	pop	r17
    6410:	0f 91       	pop	r16
    6412:	08 95       	ret

00006414 <Framebuffer_GFX::XY(int, int)>:

int Framebuffer_GFX::XY(int16_t x, int16_t y) {
    6414:	6f 92       	push	r6
    6416:	7f 92       	push	r7
    6418:	9f 92       	push	r9
    641a:	af 92       	push	r10
    641c:	bf 92       	push	r11
    641e:	cf 92       	push	r12
    6420:	df 92       	push	r13
    6422:	ef 92       	push	r14
    6424:	ff 92       	push	r15
    6426:	0f 93       	push	r16
    6428:	1f 93       	push	r17
    642a:	cf 93       	push	r28
    642c:	df 93       	push	r29
    642e:	ec 01       	movw	r28, r24
    6430:	cb 01       	movw	r24, r22
    6432:	8a 01       	movw	r16, r20
  // If you send an out of bounds value, you get an special result 
  // pointing to the last pixel. It doesn't look great, but better
  // than crashing. Still, fix the upstream code.
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;
    6434:	77 fd       	sbrc	r23, 7
    6436:	0c c0       	rjmp	.+24     	; 0x6450 <Framebuffer_GFX::XY(int, int)+0x3c>
    6438:	57 fd       	sbrc	r21, 7
    643a:	0a c0       	rjmp	.+20     	; 0x6450 <Framebuffer_GFX::XY(int, int)+0x3c>
    643c:	2f 81       	ldd	r18, Y+7	; 0x07
    643e:	38 85       	ldd	r19, Y+8	; 0x08
    6440:	62 17       	cp	r22, r18
    6442:	73 07       	cpc	r23, r19
    6444:	2c f4       	brge	.+10     	; 0x6450 <Framebuffer_GFX::XY(int, int)+0x3c>
    6446:	29 85       	ldd	r18, Y+9	; 0x09
    6448:	3a 85       	ldd	r19, Y+10	; 0x0a
    644a:	42 17       	cp	r20, r18
    644c:	53 07       	cpc	r21, r19
    644e:	9c f0       	brlt	.+38     	; 0x6476 <Framebuffer_GFX::XY(int, int)+0x62>
    6450:	c7 5d       	subi	r28, 0xD7	; 215
    6452:	de 4f       	sbci	r29, 0xFE	; 254
    6454:	88 81       	ld	r24, Y
    6456:	99 81       	ldd	r25, Y+1	; 0x01
    6458:	01 97       	sbiw	r24, 0x01	; 1
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}
    645a:	df 91       	pop	r29
    645c:	cf 91       	pop	r28
    645e:	1f 91       	pop	r17
    6460:	0f 91       	pop	r16
    6462:	ff 90       	pop	r15
    6464:	ef 90       	pop	r14
    6466:	df 90       	pop	r13
    6468:	cf 90       	pop	r12
    646a:	bf 90       	pop	r11
    646c:	af 90       	pop	r10
    646e:	9f 90       	pop	r9
    6470:	7f 90       	pop	r7
    6472:	6f 90       	pop	r6
    6474:	08 95       	ret
  // DrawPixel is able to reject the write, but here we have to return an index
  // which has to be inbounds.
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return numpix-1;

  int16_t t;
  switch(rotation) {
    6476:	2d 89       	ldd	r18, Y+21	; 0x15
    6478:	22 30       	cpi	r18, 0x02	; 2
    647a:	d9 f0       	breq	.+54     	; 0x64b2 <Framebuffer_GFX::XY(int, int)+0x9e>
    647c:	23 30       	cpi	r18, 0x03	; 3
    647e:	51 f1       	breq	.+84     	; 0x64d4 <Framebuffer_GFX::XY(int, int)+0xc0>
    6480:	21 30       	cpi	r18, 0x01	; 1
    6482:	41 f4       	brne	.+16     	; 0x6494 <Framebuffer_GFX::XY(int, int)+0x80>
   case 1:
    t = x;
    x = WIDTH  - 1 - y;
    6484:	2b 81       	ldd	r18, Y+3	; 0x03
    6486:	3c 81       	ldd	r19, Y+4	; 0x04
    6488:	21 50       	subi	r18, 0x01	; 1
    648a:	31 09       	sbc	r19, r1
    648c:	24 1b       	sub	r18, r20
    648e:	35 0b       	sbc	r19, r21
    6490:	8b 01       	movw	r16, r22
    6492:	c9 01       	movw	r24, r18
    break;
  }

  int tileOffset = 0, pixelOffset;

  if(remapFn) { // Custom X/Y remapping function
    6494:	fe 01       	movw	r30, r28
    6496:	e9 5d       	subi	r30, 0xD9	; 217
    6498:	fe 4f       	sbci	r31, 0xFE	; 254
    649a:	01 90       	ld	r0, Z+
    649c:	f0 81       	ld	r31, Z
    649e:	e0 2d       	mov	r30, r0
    64a0:	30 97       	sbiw	r30, 0x00	; 0
    64a2:	09 f1       	breq	.+66     	; 0x64e6 <Framebuffer_GFX::XY(int, int)+0xd2>
    pixelOffset = (*remapFn)(x, y);
    64a4:	b8 01       	movw	r22, r16
    64a6:	09 95       	icall
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    64a8:	50 e0       	ldi	r21, 0x00	; 0
    64aa:	40 e0       	ldi	r20, 0x00	; 0
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
    64ac:	84 0f       	add	r24, r20
    64ae:	95 1f       	adc	r25, r21
    64b0:	d4 cf       	rjmp	.-88     	; 0x645a <Framebuffer_GFX::XY(int, int)+0x46>
    t = x;
    x = WIDTH  - 1 - y;
    y = t;
    break;
   case 2:
    x = WIDTH  - 1 - x;
    64b2:	2b 81       	ldd	r18, Y+3	; 0x03
    64b4:	3c 81       	ldd	r19, Y+4	; 0x04
    64b6:	21 50       	subi	r18, 0x01	; 1
    64b8:	31 09       	sbc	r19, r1
    64ba:	a9 01       	movw	r20, r18
    64bc:	46 1b       	sub	r20, r22
    64be:	57 0b       	sbc	r21, r23
    64c0:	ca 01       	movw	r24, r20
    y = HEIGHT - 1 - y;
    64c2:	2d 81       	ldd	r18, Y+5	; 0x05
    64c4:	3e 81       	ldd	r19, Y+6	; 0x06
    64c6:	21 50       	subi	r18, 0x01	; 1
    64c8:	31 09       	sbc	r19, r1
    64ca:	f9 01       	movw	r30, r18
    64cc:	e0 1b       	sub	r30, r16
    64ce:	f1 0b       	sbc	r31, r17
    64d0:	8f 01       	movw	r16, r30
    64d2:	e0 cf       	rjmp	.-64     	; 0x6494 <Framebuffer_GFX::XY(int, int)+0x80>
    break;
   case 3:
    t = x;
    x = y;
    y = HEIGHT - 1 - t;
    64d4:	2d 81       	ldd	r18, Y+5	; 0x05
    64d6:	3e 81       	ldd	r19, Y+6	; 0x06
    64d8:	21 50       	subi	r18, 0x01	; 1
    64da:	31 09       	sbc	r19, r1
    64dc:	26 1b       	sub	r18, r22
    64de:	37 0b       	sbc	r19, r23
    64e0:	ca 01       	movw	r24, r20
    64e2:	89 01       	movw	r16, r18
    64e4:	d7 cf       	rjmp	.-82     	; 0x6494 <Framebuffer_GFX::XY(int, int)+0x80>

  if(remapFn) { // Custom X/Y remapping function
    pixelOffset = (*remapFn)(x, y);
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    64e6:	fe 01       	movw	r30, r28
    64e8:	e6 5e       	subi	r30, 0xE6	; 230
    64ea:	fe 4f       	sbci	r31, 0xFE	; 254
    64ec:	d0 80       	ld	r13, Z
    64ee:	fd 2d       	mov	r31, r13
    64f0:	f3 70       	andi	r31, 0x03	; 3
    64f2:	cf 2e       	mov	r12, r31
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    64f4:	fe 01       	movw	r30, r28
    64f6:	e5 5e       	subi	r30, 0xE5	; 229
    64f8:	fe 4f       	sbci	r31, 0xFE	; 254
    64fa:	b0 80       	ld	r11, Z
    x = y;
    y = HEIGHT - 1 - t;
    break;
  }

  int tileOffset = 0, pixelOffset;
    64fc:	50 e0       	ldi	r21, 0x00	; 0
    64fe:	40 e0       	ldi	r20, 0x00	; 0
  } else {      // Standard single matrix or tiled matrices

    uint8_t  corner = type & NEO_MATRIX_CORNER;
    uint16_t minor, major, majorScale;

    if(tilesX) { // Tiled display, multiple matrices
    6500:	bb 20       	and	r11, r11
    6502:	09 f4       	brne	.+2      	; 0x6506 <Framebuffer_GFX::XY(int, int)+0xf2>
    6504:	64 c0       	rjmp	.+200    	; 0x65ce <Framebuffer_GFX::XY(int, int)+0x1ba>
      uint16_t tile;

      minor = x / matrixWidth;            // Tile # X/Y; presume row major to
    6506:	32 96       	adiw	r30, 0x02	; 2
    6508:	e0 80       	ld	r14, Z
    650a:	f1 80       	ldd	r15, Z+1	; 0x01
    650c:	b7 01       	movw	r22, r14
    650e:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__udivmodhi4>
    6512:	9b 01       	movw	r18, r22
    6514:	98 2e       	mov	r9, r24
    6516:	a9 2e       	mov	r10, r25
      major = y / matrixHeight,           // start (will swap later if needed)
    6518:	32 96       	adiw	r30, 0x02	; 2
    651a:	60 80       	ld	r6, Z
    651c:	71 80       	ldd	r7, Z+1	; 0x01
    651e:	c8 01       	movw	r24, r16
    6520:	b3 01       	movw	r22, r6
    6522:	0e 94 e0 44 	call	0x89c0	; 0x89c0 <__udivmodhi4>
    6526:	db 01       	movw	r26, r22
    6528:	58 2f       	mov	r21, r24
    652a:	49 2f       	mov	r20, r25
      x     = x - (minor * matrixWidth);  // Pixel X/Y within tile
    652c:	89 2d       	mov	r24, r9
    652e:	9a 2d       	mov	r25, r10
      y     = y - (major * matrixHeight); // (-* is less math than modulo)
    6530:	05 2f       	mov	r16, r21
    6532:	14 2f       	mov	r17, r20

      // Determine corner of entry, flip axes if needed
      if(type & NEO_TILE_RIGHT)  minor = tilesX - 1 - minor;
    6534:	d5 fe       	sbrs	r13, 5
    6536:	06 c0       	rjmp	.+12     	; 0x6544 <Framebuffer_GFX::XY(int, int)+0x130>
    6538:	4b 2d       	mov	r20, r11
    653a:	41 50       	subi	r20, 0x01	; 1
    653c:	55 0b       	sbc	r21, r21
    653e:	42 1b       	sub	r20, r18
    6540:	53 0b       	sbc	r21, r19
    6542:	9a 01       	movw	r18, r20
      if(type & NEO_TILE_BOTTOM) major = tilesY - 1 - major;
    6544:	d4 fe       	sbrs	r13, 4
    6546:	09 c0       	rjmp	.+18     	; 0x655a <Framebuffer_GFX::XY(int, int)+0x146>
    6548:	ae 01       	movw	r20, r28
    654a:	44 5e       	subi	r20, 0xE4	; 228
    654c:	5e 4f       	sbci	r21, 0xFE	; 254
    654e:	fa 01       	movw	r30, r20
    6550:	60 81       	ld	r22, Z
    6552:	61 50       	subi	r22, 0x01	; 1
    6554:	77 0b       	sbc	r23, r23
    6556:	6a 1b       	sub	r22, r26
    6558:	7b 0b       	sbc	r23, r27

      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
    655a:	d6 fc       	sbrc	r13, 6
    655c:	11 c0       	rjmp	.+34     	; 0x6580 <Framebuffer_GFX::XY(int, int)+0x16c>
        majorScale = tilesX;
    655e:	4b 2d       	mov	r20, r11
    6560:	50 e0       	ldi	r21, 0x00	; 0
    6562:	b6 2f       	mov	r27, r22
    6564:	a7 2f       	mov	r26, r23
    6566:	b9 01       	movw	r22, r18
    6568:	2b 2f       	mov	r18, r27
    656a:	3a 2f       	mov	r19, r26
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
      }

      // Determine tile number
      if((type & NEO_TILE_SEQUENCE) == NEO_TILE_PROGRESSIVE) {
    656c:	d7 fc       	sbrc	r13, 7
    656e:	0e c0       	rjmp	.+28     	; 0x658c <Framebuffer_GFX::XY(int, int)+0x178>
        // pixel math later.
        if(major & 1) {
          corner ^= NEO_MATRIX_CORNER;
          tile = (major + 1) * majorScale - 1 - minor;
        } else {
          tile =  major      * majorScale     + minor;
    6570:	24 9f       	mul	r18, r20
    6572:	d0 01       	movw	r26, r0
    6574:	25 9f       	mul	r18, r21
    6576:	b0 0d       	add	r27, r0
    6578:	34 9f       	mul	r19, r20
    657a:	b0 0d       	add	r27, r0
    657c:	11 24       	eor	r1, r1
    657e:	17 c0       	rjmp	.+46     	; 0x65ae <Framebuffer_GFX::XY(int, int)+0x19a>
      // Determine actual major axis of tiling
      if((type & NEO_TILE_AXIS) == NEO_TILE_ROWS) {
        majorScale = tilesX;
      } else {
        _swap_uint16_t(major, minor);
        majorScale = tilesY;
    6580:	de 01       	movw	r26, r28
    6582:	a4 5e       	subi	r26, 0xE4	; 228
    6584:	be 4f       	sbci	r27, 0xFE	; 254
    6586:	4c 91       	ld	r20, X
    6588:	50 e0       	ldi	r21, 0x00	; 0
    658a:	f0 cf       	rjmp	.-32     	; 0x656c <Framebuffer_GFX::XY(int, int)+0x158>
        tile = major * majorScale + minor;
      } else {
        // Zigzag; alternate rows change direction.  On these rows,
        // this also flips the starting corner of the matrix for the
        // pixel math later.
        if(major & 1) {
    658c:	20 ff       	sbrs	r18, 0
    658e:	f0 cf       	rjmp	.-32     	; 0x6570 <Framebuffer_GFX::XY(int, int)+0x15c>
          corner ^= NEO_MATRIX_CORNER;
    6590:	ad 2d       	mov	r26, r13
    6592:	a0 95       	com	r26
    6594:	a3 70       	andi	r26, 0x03	; 3
    6596:	ca 2e       	mov	r12, r26
          tile = (major + 1) * majorScale - 1 - minor;
    6598:	2f 5f       	subi	r18, 0xFF	; 255
    659a:	3f 4f       	sbci	r19, 0xFF	; 255
    659c:	24 9f       	mul	r18, r20
    659e:	d0 01       	movw	r26, r0
    65a0:	25 9f       	mul	r18, r21
    65a2:	b0 0d       	add	r27, r0
    65a4:	34 9f       	mul	r19, r20
    65a6:	b0 0d       	add	r27, r0
    65a8:	11 24       	eor	r1, r1
    65aa:	60 95       	com	r22
    65ac:	70 95       	com	r23
        } else {
          tile =  major      * majorScale     + minor;
    65ae:	6a 0f       	add	r22, r26
    65b0:	7b 1f       	adc	r23, r27
        }
      }

      // Index of first pixel in tile
      tileOffset = tile * matrixWidth * matrixHeight;
    65b2:	e6 9c       	mul	r14, r6
    65b4:	90 01       	movw	r18, r0
    65b6:	e7 9c       	mul	r14, r7
    65b8:	30 0d       	add	r19, r0
    65ba:	f6 9c       	mul	r15, r6
    65bc:	30 0d       	add	r19, r0
    65be:	11 24       	eor	r1, r1
    65c0:	26 9f       	mul	r18, r22
    65c2:	a0 01       	movw	r20, r0
    65c4:	27 9f       	mul	r18, r23
    65c6:	50 0d       	add	r21, r0
    65c8:	36 9f       	mul	r19, r22
    65ca:	50 0d       	add	r21, r0
    65cc:	11 24       	eor	r1, r1

    } // else no tiling (handle as single tile)

    // Find pixel number within tile
    minor = x; // Presume row major to start (will swap later if needed)
    major = y;
    65ce:	98 01       	movw	r18, r16

    // Determine corner of entry, flip axes if needed
    if(corner & NEO_MATRIX_RIGHT)  minor = matrixWidth  - 1 - minor;
    65d0:	6c 2d       	mov	r22, r12
    65d2:	62 70       	andi	r22, 0x02	; 2
    65d4:	59 f0       	breq	.+22     	; 0x65ec <Framebuffer_GFX::XY(int, int)+0x1d8>
    65d6:	fe 01       	movw	r30, r28
    65d8:	e3 5e       	subi	r30, 0xE3	; 227
    65da:	fe 4f       	sbci	r31, 0xFE	; 254
    65dc:	60 81       	ld	r22, Z
    65de:	71 81       	ldd	r23, Z+1	; 0x01
    65e0:	61 50       	subi	r22, 0x01	; 1
    65e2:	71 09       	sbc	r23, r1
    65e4:	fb 01       	movw	r30, r22
    65e6:	e8 1b       	sub	r30, r24
    65e8:	f9 0b       	sbc	r31, r25
    65ea:	cf 01       	movw	r24, r30
    if(corner & NEO_MATRIX_BOTTOM) major = matrixHeight - 1 - major;
    65ec:	c0 fe       	sbrs	r12, 0
    65ee:	09 c0       	rjmp	.+18     	; 0x6602 <Framebuffer_GFX::XY(int, int)+0x1ee>
    65f0:	fe 01       	movw	r30, r28
    65f2:	e1 5e       	subi	r30, 0xE1	; 225
    65f4:	fe 4f       	sbci	r31, 0xFE	; 254
    65f6:	20 81       	ld	r18, Z
    65f8:	31 81       	ldd	r19, Z+1	; 0x01
    65fa:	21 50       	subi	r18, 0x01	; 1
    65fc:	31 09       	sbc	r19, r1
    65fe:	20 1b       	sub	r18, r16
    6600:	31 0b       	sbc	r19, r17

    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
    6602:	d2 fc       	sbrc	r13, 2
    6604:	13 c0       	rjmp	.+38     	; 0x662c <Framebuffer_GFX::XY(int, int)+0x218>
      majorScale = matrixWidth;
    6606:	c3 5e       	subi	r28, 0xE3	; 227
    6608:	de 4f       	sbci	r29, 0xFE	; 254
    660a:	68 81       	ld	r22, Y
    660c:	79 81       	ldd	r23, Y+1	; 0x01
    660e:	f2 2f       	mov	r31, r18
    6610:	e3 2f       	mov	r30, r19
    6612:	9c 01       	movw	r18, r24
    6614:	8f 2f       	mov	r24, r31
    6616:	9e 2f       	mov	r25, r30
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    }

    // Determine pixel number within tile/matrix
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
    6618:	d3 fc       	sbrc	r13, 3
    661a:	0d c0       	rjmp	.+26     	; 0x6636 <Framebuffer_GFX::XY(int, int)+0x222>
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
      else          pixelOffset =  major      * majorScale     + minor;
    661c:	86 9f       	mul	r24, r22
    661e:	f0 01       	movw	r30, r0
    6620:	87 9f       	mul	r24, r23
    6622:	f0 0d       	add	r31, r0
    6624:	96 9f       	mul	r25, r22
    6626:	f0 0d       	add	r31, r0
    6628:	11 24       	eor	r1, r1
    662a:	11 c0       	rjmp	.+34     	; 0x664e <Framebuffer_GFX::XY(int, int)+0x23a>
    // Determine actual major axis of matrix
    if((type & NEO_MATRIX_AXIS) == NEO_MATRIX_ROWS) {
      majorScale = matrixWidth;
    } else {
      _swap_uint16_t(major, minor);
      majorScale = matrixHeight;
    662c:	c1 5e       	subi	r28, 0xE1	; 225
    662e:	de 4f       	sbci	r29, 0xFE	; 254
    6630:	68 81       	ld	r22, Y
    6632:	79 81       	ldd	r23, Y+1	; 0x01
    6634:	f1 cf       	rjmp	.-30     	; 0x6618 <Framebuffer_GFX::XY(int, int)+0x204>
    if((type & NEO_MATRIX_SEQUENCE) == NEO_MATRIX_PROGRESSIVE) {
      // All lines in same order
      pixelOffset = major * majorScale + minor;
    } else {
      // Zigzag; alternate rows change direction.
      if(major & 1) pixelOffset = (major + 1) * majorScale - 1 - minor;
    6636:	80 ff       	sbrs	r24, 0
    6638:	f1 cf       	rjmp	.-30     	; 0x661c <Framebuffer_GFX::XY(int, int)+0x208>
    663a:	01 96       	adiw	r24, 0x01	; 1
    663c:	86 9f       	mul	r24, r22
    663e:	f0 01       	movw	r30, r0
    6640:	87 9f       	mul	r24, r23
    6642:	f0 0d       	add	r31, r0
    6644:	96 9f       	mul	r25, r22
    6646:	f0 0d       	add	r31, r0
    6648:	11 24       	eor	r1, r1
    664a:	20 95       	com	r18
    664c:	30 95       	com	r19
      else          pixelOffset =  major      * majorScale     + minor;
    664e:	cf 01       	movw	r24, r30
    6650:	82 0f       	add	r24, r18
    6652:	93 1f       	adc	r25, r19
    6654:	2b cf       	rjmp	.-426    	; 0x64ac <Framebuffer_GFX::XY(int, int)+0x98>

00006656 <Framebuffer_GFX::drawPixel(int, int, unsigned int)>:
  Serial.println(tileOffset + pixelOffset);
#endif
  return(tileOffset + pixelOffset);
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {
    6656:	9f 92       	push	r9
    6658:	af 92       	push	r10
    665a:	bf 92       	push	r11
    665c:	cf 92       	push	r12
    665e:	df 92       	push	r13
    6660:	ef 92       	push	r14
    6662:	ff 92       	push	r15
    6664:	0f 93       	push	r16
    6666:	1f 93       	push	r17
    6668:	cf 93       	push	r28
    666a:	df 93       	push	r29
    666c:	ec 01       	movw	r28, r24

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    666e:	77 fd       	sbrc	r23, 7
    6670:	2b c0       	rjmp	.+86     	; 0x66c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    6672:	57 fd       	sbrc	r21, 7
    6674:	29 c0       	rjmp	.+82     	; 0x66c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    6676:	8f 81       	ldd	r24, Y+7	; 0x07
    6678:	98 85       	ldd	r25, Y+8	; 0x08
    667a:	68 17       	cp	r22, r24
    667c:	79 07       	cpc	r23, r25
    667e:	24 f5       	brge	.+72     	; 0x66c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    6680:	89 85       	ldd	r24, Y+9	; 0x09
    6682:	9a 85       	ldd	r25, Y+10	; 0x0a
    6684:	48 17       	cp	r20, r24
    6686:	59 07       	cpc	r21, r25
    6688:	fc f4       	brge	.+62     	; 0x66c8 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x72>
    668a:	6a 01       	movw	r12, r20
    668c:	7b 01       	movw	r14, r22

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    668e:	fe 01       	movw	r30, r28
    6690:	ef 5c       	subi	r30, 0xCF	; 207
    6692:	fe 4f       	sbci	r31, 0xFE	; 254
    6694:	80 81       	ld	r24, Z
    6696:	88 23       	and	r24, r24
    6698:	19 f1       	breq	.+70     	; 0x66e0 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x8a>
    669a:	34 97       	sbiw	r30, 0x04	; 4
    669c:	b0 80       	ld	r11, Z
    669e:	a1 80       	ldd	r10, Z+1	; 0x01
    66a0:	92 80       	ldd	r9, Z+2	; 0x02
    66a2:	fe 01       	movw	r30, r28
    66a4:	eb 5d       	subi	r30, 0xDB	; 219
    66a6:	fe 4f       	sbci	r31, 0xFE	; 254
    66a8:	00 81       	ld	r16, Z
    66aa:	11 81       	ldd	r17, Z+1	; 0x01
    66ac:	a6 01       	movw	r20, r12
    66ae:	b7 01       	movw	r22, r14
    66b0:	ce 01       	movw	r24, r28
    66b2:	b0 de       	rcall	.-672    	; 0x6414 <Framebuffer_GFX::XY(int, int)>
    66b4:	fc 01       	movw	r30, r24
    66b6:	ee 0f       	add	r30, r30
    66b8:	ff 1f       	adc	r31, r31
    66ba:	e8 0f       	add	r30, r24
    66bc:	f9 1f       	adc	r31, r25
    66be:	e0 0f       	add	r30, r16
    66c0:	f1 1f       	adc	r31, r17
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    66c2:	90 82       	st	Z, r9
        g = (colorcode >>  8) & 0xFF;
    66c4:	a1 82       	std	Z+1, r10	; 0x01
        b = (colorcode >>  0) & 0xFF;
    66c6:	b2 82       	std	Z+2, r11	; 0x02
}
    66c8:	df 91       	pop	r29
    66ca:	cf 91       	pop	r28
    66cc:	1f 91       	pop	r17
    66ce:	0f 91       	pop	r16
    66d0:	ff 90       	pop	r15
    66d2:	ef 90       	pop	r14
    66d4:	df 90       	pop	r13
    66d6:	cf 90       	pop	r12
    66d8:	bf 90       	pop	r11
    66da:	af 90       	pop	r10
    66dc:	9f 90       	pop	r9
    66de:	08 95       	ret

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint16_t color) {

  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;

  _fb[XY(x,y)] = passThruFlag ? passThruColor : expandColor(color);
    66e0:	c9 01       	movw	r24, r18
    66e2:	10 de       	rcall	.-992    	; 0x6304 <Framebuffer_GFX::expandColor(unsigned int)>
    66e4:	b6 2e       	mov	r11, r22
    66e6:	a7 2e       	mov	r10, r23
    66e8:	98 2e       	mov	r9, r24
    66ea:	db cf       	rjmp	.-74     	; 0x66a2 <Framebuffer_GFX::drawPixel(int, int, unsigned int)+0x4c>

000066ec <Framebuffer_GFX::drawPixel(int, int, unsigned long)>:
}

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, uint32_t color) {
    66ec:	ff 92       	push	r15
    66ee:	0f 93       	push	r16
    66f0:	1f 93       	push	r17
    66f2:	cf 93       	push	r28
    66f4:	df 93       	push	r29
  Serial.print(" ");
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif
  if((x < 0) || (y < 0) || (x >= _width) || (y >= _height)) return;
    66f6:	77 fd       	sbrc	r23, 7
    66f8:	21 c0       	rjmp	.+66     	; 0x673c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    66fa:	57 fd       	sbrc	r21, 7
    66fc:	1f c0       	rjmp	.+62     	; 0x673c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    66fe:	dc 01       	movw	r26, r24
    6700:	17 96       	adiw	r26, 0x07	; 7
    6702:	ed 91       	ld	r30, X+
    6704:	fc 91       	ld	r31, X
    6706:	18 97       	sbiw	r26, 0x08	; 8
    6708:	6e 17       	cp	r22, r30
    670a:	7f 07       	cpc	r23, r31
    670c:	bc f4       	brge	.+46     	; 0x673c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    670e:	19 96       	adiw	r26, 0x09	; 9
    6710:	ed 91       	ld	r30, X+
    6712:	fc 91       	ld	r31, X
    6714:	4e 17       	cp	r20, r30
    6716:	5f 07       	cpc	r21, r31
    6718:	8c f4       	brge	.+34     	; 0x673c <Framebuffer_GFX::drawPixel(int, int, unsigned long)+0x50>
    671a:	f2 2e       	mov	r15, r18
  Serial.print(y);
  Serial.print(" ");
  Serial.println(color, HEX);
#endif

  _fb[XY(x,y)] = color;
    671c:	fc 01       	movw	r30, r24
    671e:	eb 5d       	subi	r30, 0xDB	; 219
    6720:	fe 4f       	sbci	r31, 0xFE	; 254
    6722:	c0 81       	ld	r28, Z
    6724:	d1 81       	ldd	r29, Z+1	; 0x01
    6726:	76 de       	rcall	.-788    	; 0x6414 <Framebuffer_GFX::XY(int, int)>
    6728:	fc 01       	movw	r30, r24
    672a:	ee 0f       	add	r30, r30
    672c:	ff 1f       	adc	r31, r31
    672e:	e8 0f       	add	r30, r24
    6730:	f9 1f       	adc	r31, r25
    6732:	ec 0f       	add	r30, r28
    6734:	fd 1f       	adc	r31, r29
    }

    /// allow assignment from 32-bit (really 24-bit) 0xRRGGBB color code
	inline CRGB& operator= (const uint32_t colorcode) __attribute__((always_inline))
    {
        r = (colorcode >> 16) & 0xFF;
    6736:	f0 82       	st	Z, r15
        g = (colorcode >>  8) & 0xFF;
    6738:	11 83       	std	Z+1, r17	; 0x01
        b = (colorcode >>  0) & 0xFF;
    673a:	02 83       	std	Z+2, r16	; 0x02
}
    673c:	df 91       	pop	r29
    673e:	cf 91       	pop	r28
    6740:	1f 91       	pop	r17
    6742:	0f 91       	pop	r16
    6744:	ff 90       	pop	r15
    6746:	08 95       	ret

00006748 <Framebuffer_GFX::drawPixel(int, int, CRGB)>:

void Framebuffer_GFX::drawPixel(int16_t x, int16_t y, CRGB c) {
    6748:	af 92       	push	r10
    674a:	bf 92       	push	r11
    674c:	cf 92       	push	r12
    674e:	df 92       	push	r13
    6750:	ef 92       	push	r14
    6752:	ff 92       	push	r15
    6754:	0f 93       	push	r16
    6756:	1f 93       	push	r17
    6758:	cf 93       	push	r28
    675a:	df 93       	push	r29
    675c:	00 d0       	rcall	.+0      	; 0x675e <Framebuffer_GFX::drawPixel(int, int, CRGB)+0x16>
    675e:	1f 92       	push	r1
    6760:	cd b7       	in	r28, 0x3d	; 61
    6762:	de b7       	in	r29, 0x3e	; 62
    6764:	7c 01       	movw	r14, r24
    6766:	6b 01       	movw	r12, r22
    6768:	5a 01       	movw	r10, r20
    676a:	f9 01       	movw	r30, r18
    }

    /// allow copy construction
	inline CRGB(const CRGB& rhs) __attribute__((always_inline))
    {
        r = rhs.r;
    676c:	80 81       	ld	r24, Z
    676e:	89 83       	std	Y+1, r24	; 0x01
        g = rhs.g;
    6770:	81 81       	ldd	r24, Z+1	; 0x01
    6772:	8a 83       	std	Y+2, r24	; 0x02
        b = rhs.b;
    6774:	82 81       	ldd	r24, Z+2	; 0x02
    6776:	8b 83       	std	Y+3, r24	; 0x03
  drawPixel(x, y, CRGBtoint32(c));
    6778:	ce 01       	movw	r24, r28
    677a:	01 96       	adiw	r24, 0x01	; 1
    677c:	2d de       	rcall	.-934    	; 0x63d8 <Framebuffer_GFX::CRGBtoint32(CRGB)>
    677e:	8b 01       	movw	r16, r22
    6780:	9c 01       	movw	r18, r24
    6782:	a5 01       	movw	r20, r10
    6784:	b6 01       	movw	r22, r12
    6786:	c7 01       	movw	r24, r14
    6788:	b1 df       	rcall	.-158    	; 0x66ec <Framebuffer_GFX::drawPixel(int, int, unsigned long)>
}
    678a:	0f 90       	pop	r0
    678c:	0f 90       	pop	r0
    678e:	0f 90       	pop	r0
    6790:	df 91       	pop	r29
    6792:	cf 91       	pop	r28
    6794:	1f 91       	pop	r17
    6796:	0f 91       	pop	r16
    6798:	ff 90       	pop	r15
    679a:	ef 90       	pop	r14
    679c:	df 90       	pop	r13
    679e:	cf 90       	pop	r12
    67a0:	bf 90       	pop	r11
    67a2:	af 90       	pop	r10
    67a4:	08 95       	ret

000067a6 <Framebuffer_GFX::setRemapFunction(unsigned int (*)(unsigned int, unsigned int))>:
  c = passThruFlag ? passThruColor : expandColor(color);
  for (uint32_t i=0; i<numpix; i++) { _fb[i]=c; }
}

void Framebuffer_GFX::setRemapFunction(uint16_t (*fn)(uint16_t, uint16_t)) {
  remapFn = fn;
    67a6:	89 5d       	subi	r24, 0xD9	; 217
    67a8:	9e 4f       	sbci	r25, 0xFE	; 254
    67aa:	fc 01       	movw	r30, r24
    67ac:	71 83       	std	Z+1, r23	; 0x01
    67ae:	60 83       	st	Z, r22
}
    67b0:	08 95       	ret

000067b2 <fill_solid(CRGB*, int, CRGB const&)>:
        heatcolor.b = 0; // no blue

    } else {
        // we're in the coolest third
        heatcolor.r = heatramp; // ramp up red
        heatcolor.g = 0; // no green
    67b2:	da 01       	movw	r26, r20
    67b4:	fc 01       	movw	r30, r24
    67b6:	90 e0       	ldi	r25, 0x00	; 0
    67b8:	80 e0       	ldi	r24, 0x00	; 0
    67ba:	86 17       	cp	r24, r22
    67bc:	97 07       	cpc	r25, r23
    67be:	6c f4       	brge	.+26     	; 0x67da <fill_solid(CRGB*, int, CRGB const&)+0x28>
    67c0:	2c 91       	ld	r18, X
    67c2:	20 83       	st	Z, r18
    67c4:	11 96       	adiw	r26, 0x01	; 1
    67c6:	2c 91       	ld	r18, X
    67c8:	11 97       	sbiw	r26, 0x01	; 1
    67ca:	21 83       	std	Z+1, r18	; 0x01
    67cc:	12 96       	adiw	r26, 0x02	; 2
    67ce:	2c 91       	ld	r18, X
    67d0:	12 97       	sbiw	r26, 0x02	; 2
    67d2:	22 83       	std	Z+2, r18	; 0x02
    67d4:	01 96       	adiw	r24, 0x01	; 1
    67d6:	33 96       	adiw	r30, 0x03	; 3
    67d8:	f0 cf       	rjmp	.-32     	; 0x67ba <fill_solid(CRGB*, int, CRGB const&)+0x8>
    67da:	08 95       	ret

000067dc <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)>:
    return dividend;
}


CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    67dc:	0f 93       	push	r16
    67de:	1f 93       	push	r17
    67e0:	cf 93       	push	r28
    67e2:	df 93       	push	r29
    67e4:	fc 01       	movw	r30, r24
{
#if defined(__AVR__)
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    dividend /= 2;
    67e6:	84 2f       	mov	r24, r20
    67e8:	82 95       	swap	r24
    67ea:	8f 70       	andi	r24, 0x0F	; 15

CRGB ColorFromPalette( const CRGBPalette16& pal, uint8_t index, uint8_t brightness, TBlendType blendType)
{
    //      hi4 = index >> 4;
    uint8_t hi4 = lsrX4(index);
    uint8_t lo4 = index & 0x0F;
    67ec:	4f 70       	andi	r20, 0x0F	; 15
    {
        return entries[(uint8_t)x];
    }
    inline const CRGB& operator[] (int x) const __attribute__((always_inline))
    {
        return entries[(uint8_t)x];
    67ee:	eb 01       	movw	r28, r22
    
    // const CRGB* entry = &(pal[0]) + hi4;
    // since hi4 is always 0..15, hi4 * sizeof(CRGB) can be a single-byte value,
    // instead of the two byte 'int' that avr-gcc defaults to.
    // So, we multiply hi4 X sizeof(CRGB), giving hi4XsizeofCRGB;
    uint8_t hi4XsizeofCRGB = hi4 * sizeof(CRGB);
    67f0:	a8 2f       	mov	r26, r24
    67f2:	aa 0f       	add	r26, r26
    67f4:	a8 0f       	add	r26, r24
    // We then add that to a base array pointer.
    const CRGB* entry = (CRGB*)( (uint8_t*)(&(pal[0])) + hi4XsizeofCRGB);
    67f6:	a6 0f       	add	r26, r22
    67f8:	b7 2f       	mov	r27, r23
    67fa:	b1 1d       	adc	r27, r1
    
    uint8_t blend = lo4 && (blendType != NOBLEND);
    67fc:	44 23       	and	r20, r20
    67fe:	19 f0       	breq	.+6      	; 0x6806 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2a>
    6800:	31 e0       	ldi	r19, 0x01	; 1
    6802:	01 2b       	or	r16, r17
    6804:	09 f4       	brne	.+2      	; 0x6808 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x2c>
    6806:	30 e0       	ldi	r19, 0x00	; 0
    
    uint8_t red1   = entry->red;
    6808:	6c 91       	ld	r22, X
    uint8_t green1 = entry->green;
    680a:	11 96       	adiw	r26, 0x01	; 1
    680c:	5c 91       	ld	r21, X
    680e:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t blue1  = entry->blue;
    6810:	12 96       	adiw	r26, 0x02	; 2
    6812:	9c 91       	ld	r25, X
    6814:	12 97       	sbiw	r26, 0x02	; 2
    
    
    if( blend ) {
    6816:	33 23       	and	r19, r19
    6818:	09 f4       	brne	.+2      	; 0x681c <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x40>
    681a:	2a c0       	rjmp	.+84     	; 0x6870 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x94>
        
        if( hi4 == 15 ) {
    681c:	8f 30       	cpi	r24, 0x0F	; 15
    681e:	11 f0       	breq	.+4      	; 0x6824 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0x48>
            entry = &(pal[0]);
        } else {
            entry++;
    6820:	ed 01       	movw	r28, r26
    6822:	23 96       	adiw	r28, 0x03	; 3
        }
        
        uint8_t f2 = lo4 << 4;
    6824:	42 95       	swap	r20
    6826:	40 7f       	andi	r20, 0xF0	; 240
        uint8_t f1 = 255 - f2;
    6828:	74 2f       	mov	r23, r20
    682a:	70 95       	com	r23
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    682c:	67 9f       	mul	r22, r23
    682e:	06 0e       	add	r0, r22
    6830:	60 e0       	ldi	r22, 0x00	; 0
    6832:	61 1d       	adc	r22, r1
    6834:	38 81       	ld	r19, Y
    6836:	34 9f       	mul	r19, r20
    6838:	03 0e       	add	r0, r19
    683a:	30 e0       	ldi	r19, 0x00	; 0
    683c:	31 1d       	adc	r19, r1
        
        //    rgb1.nscale8(f1);
        uint8_t red2   = entry->red;
        red1   = scale8_LEAVING_R1_DIRTY( red1,   f1);
        red2   = scale8_LEAVING_R1_DIRTY( red2,   f2);
        red1   += red2;
    683e:	63 0f       	add	r22, r19
    6840:	57 9f       	mul	r21, r23
    6842:	05 0e       	add	r0, r21
    6844:	50 e0       	ldi	r21, 0x00	; 0
    6846:	51 1d       	adc	r21, r1
    6848:	39 81       	ldd	r19, Y+1	; 0x01
    684a:	34 9f       	mul	r19, r20
    684c:	03 0e       	add	r0, r19
    684e:	30 e0       	ldi	r19, 0x00	; 0
    6850:	31 1d       	adc	r19, r1

        uint8_t green2 = entry->green;
        green1 = scale8_LEAVING_R1_DIRTY( green1, f1);
        green2 = scale8_LEAVING_R1_DIRTY( green2, f2);
        green1 += green2;
    6852:	53 0f       	add	r21, r19
    6854:	39 2f       	mov	r19, r25
    6856:	37 9f       	mul	r19, r23
    6858:	03 0e       	add	r0, r19
    685a:	30 e0       	ldi	r19, 0x00	; 0
    685c:	31 1d       	adc	r19, r1
    685e:	9a 81       	ldd	r25, Y+2	; 0x02
    6860:	79 2f       	mov	r23, r25
    6862:	74 9f       	mul	r23, r20
    6864:	07 0e       	add	r0, r23
    6866:	70 e0       	ldi	r23, 0x00	; 0
    6868:	71 1d       	adc	r23, r1

        uint8_t blue2  = entry->blue;
        blue1  = scale8_LEAVING_R1_DIRTY( blue1,  f1);
        blue2  = scale8_LEAVING_R1_DIRTY( blue2,  f2);
        blue1  += blue2;
    686a:	93 2f       	mov	r25, r19
    686c:	97 0f       	add	r25, r23
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    686e:	11 24       	eor	r1, r1
        
        cleanup_R1();
    }
    
    if( brightness != 255) {
    6870:	2f 3f       	cpi	r18, 0xFF	; 255
    6872:	c1 f0       	breq	.+48     	; 0x68a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>
        if( brightness ) {
    6874:	22 23       	and	r18, r18
    6876:	f9 f0       	breq	.+62     	; 0x68b6 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xda>
            brightness++; // adjust for rounding
    6878:	2f 5f       	subi	r18, 0xFF	; 255
            // Now, since brightness is nonzero, we don't need the full scale8_video logic;
            // we can just to scale8 and then add one (unless scale8 fixed) to all nonzero inputs.
            if( red1 )   {
    687a:	66 23       	and	r22, r22
    687c:	21 f0       	breq	.+8      	; 0x6886 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xaa>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    687e:	62 9f       	mul	r22, r18
    6880:	06 0e       	add	r0, r22
    6882:	60 e0       	ldi	r22, 0x00	; 0
    6884:	61 1d       	adc	r22, r1
                red1 = scale8_LEAVING_R1_DIRTY( red1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                red1++;
#endif
            }
            if( green1 ) {
    6886:	55 23       	and	r21, r21
    6888:	21 f0       	breq	.+8      	; 0x6892 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xb6>
    688a:	52 9f       	mul	r21, r18
    688c:	05 0e       	add	r0, r21
    688e:	50 e0       	ldi	r21, 0x00	; 0
    6890:	51 1d       	adc	r21, r1
                green1 = scale8_LEAVING_R1_DIRTY( green1, brightness);
#if !(FASTLED_SCALE8_FIXED==1)
                green1++;
#endif
            }
            if( blue1 )  {
    6892:	99 23       	and	r25, r25
    6894:	31 f0       	breq	.+12     	; 0x68a2 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc6>
    6896:	39 2f       	mov	r19, r25
    6898:	32 9f       	mul	r19, r18
    689a:	03 0e       	add	r0, r19
    689c:	30 e0       	ldi	r19, 0x00	; 0
    689e:	31 1d       	adc	r19, r1
    68a0:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    68a2:	11 24       	eor	r1, r1
    {
    }

    /// allow construction from R, G, B
    inline CRGB( uint8_t ir, uint8_t ig, uint8_t ib)  __attribute__((always_inline))
        : r(ir), g(ig), b(ib)
    68a4:	60 83       	st	Z, r22
    68a6:	51 83       	std	Z+1, r21	; 0x01
    68a8:	92 83       	std	Z+2, r25	; 0x02
            blue1 = 0;
        }
    }
    
    return CRGB( red1, green1, blue1);
}
    68aa:	cf 01       	movw	r24, r30
    68ac:	df 91       	pop	r29
    68ae:	cf 91       	pop	r28
    68b0:	1f 91       	pop	r17
    68b2:	0f 91       	pop	r16
    68b4:	08 95       	ret
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
            blue1 = 0;
    68b6:	90 e0       	ldi	r25, 0x00	; 0
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
            green1 = 0;
    68b8:	50 e0       	ldi	r21, 0x00	; 0
                blue1++;
#endif
            }
            cleanup_R1();
        } else {
            red1 = 0;
    68ba:	60 e0       	ldi	r22, 0x00	; 0
    68bc:	f3 cf       	rjmp	.-26     	; 0x68a4 <ColorFromPalette(CRGBPalette16 const&, unsigned char, unsigned char, TBlendType)+0xc8>

000068be <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>:
  } else {
    m_nMinMicros = 0;
  }
}

extern "C" int atexit(void (* /*func*/ )()) { return 0; }
    68be:	7f 92       	push	r7
    68c0:	8f 92       	push	r8
    68c2:	9f 92       	push	r9
    68c4:	af 92       	push	r10
    68c6:	bf 92       	push	r11
    68c8:	cf 92       	push	r12
    68ca:	df 92       	push	r13
    68cc:	ef 92       	push	r14
    68ce:	ff 92       	push	r15
    68d0:	0f 93       	push	r16
    68d2:	1f 93       	push	r17
    68d4:	cf 93       	push	r28
    68d6:	df 93       	push	r29
    68d8:	fc 01       	movw	r30, r24
    68da:	69 01       	movw	r12, r18
    68dc:	10 82       	st	Z, r1
    68de:	11 82       	std	Z+1, r1	; 0x01
    68e0:	12 82       	std	Z+2, r1	; 0x02
    68e2:	66 23       	and	r22, r22
    68e4:	b9 f1       	breq	.+110    	; 0x6954 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x96>
    68e6:	8a 01       	movw	r16, r20
    68e8:	c1 e0       	ldi	r28, 0x01	; 1
    68ea:	d0 e0       	ldi	r29, 0x00	; 0
    68ec:	86 2e       	mov	r8, r22
    68ee:	91 2c       	mov	r9, r1
    68f0:	b1 2c       	mov	r11, r1
    68f2:	a1 2c       	mov	r10, r1
    68f4:	d8 01       	movw	r26, r16
    68f6:	2d 91       	ld	r18, X+
    68f8:	8d 01       	movw	r16, r26
    68fa:	22 23       	and	r18, r18
    68fc:	39 f1       	breq	.+78     	; 0x694c <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    68fe:	7e 01       	movw	r14, r28
    6900:	b1 e0       	ldi	r27, 0x01	; 1
    6902:	eb 1a       	sub	r14, r27
    6904:	f1 08       	sbc	r15, r1
    6906:	d6 01       	movw	r26, r12
    6908:	ae 0d       	add	r26, r14
    690a:	bf 1d       	adc	r27, r15
    690c:	7c 90       	ld	r7, X
    690e:	77 20       	and	r7, r7
    6910:	e9 f0       	breq	.+58     	; 0x694c <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x8e>
    6912:	30 e0       	ldi	r19, 0x00	; 0
    6914:	50 e0       	ldi	r21, 0x00	; 0
    6916:	40 e0       	ldi	r20, 0x00	; 0
    6918:	2f 5f       	subi	r18, 0xFF	; 255
    691a:	3f 4f       	sbci	r19, 0xFF	; 255
    691c:	4f 4f       	sbci	r20, 0xFF	; 255
    691e:	5f 4f       	sbci	r21, 0xFF	; 255
    6920:	c5 01       	movw	r24, r10
    6922:	b4 01       	movw	r22, r8
    6924:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <__mulsi3>
    6928:	9b 01       	movw	r18, r22
    692a:	ac 01       	movw	r20, r24
    692c:	87 2d       	mov	r24, r7
    692e:	90 e0       	ldi	r25, 0x00	; 0
    6930:	b0 e0       	ldi	r27, 0x00	; 0
    6932:	a0 e0       	ldi	r26, 0x00	; 0
    6934:	bc 01       	movw	r22, r24
    6936:	cd 01       	movw	r24, r26
    6938:	6f 5f       	subi	r22, 0xFF	; 255
    693a:	7f 4f       	sbci	r23, 0xFF	; 255
    693c:	8f 4f       	sbci	r24, 0xFF	; 255
    693e:	9f 4f       	sbci	r25, 0xFF	; 255
    6940:	0e 94 d1 44 	call	0x89a2	; 0x89a2 <__mulsi3>
    6944:	df 01       	movw	r26, r30
    6946:	ae 0d       	add	r26, r14
    6948:	bf 1d       	adc	r27, r15
    694a:	8c 93       	st	X, r24
    694c:	21 96       	adiw	r28, 0x01	; 1
    694e:	c4 30       	cpi	r28, 0x04	; 4
    6950:	d1 05       	cpc	r29, r1
    6952:	81 f6       	brne	.-96     	; 0x68f4 <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)+0x36>
    6954:	cf 01       	movw	r24, r30
    6956:	df 91       	pop	r29
    6958:	cf 91       	pop	r28
    695a:	1f 91       	pop	r17
    695c:	0f 91       	pop	r16
    695e:	ff 90       	pop	r15
    6960:	ef 90       	pop	r14
    6962:	df 90       	pop	r13
    6964:	cf 90       	pop	r12
    6966:	bf 90       	pop	r11
    6968:	af 90       	pop	r10
    696a:	9f 90       	pop	r9
    696c:	8f 90       	pop	r8
    696e:	7f 90       	pop	r7
    6970:	08 95       	ret

00006972 <CFastLED::CFastLED()>:
    6972:	fc 01       	movw	r30, r24
    6974:	8f ef       	ldi	r24, 0xFF	; 255
    6976:	80 83       	st	Z, r24
    6978:	12 82       	std	Z+2, r1	; 0x02
    697a:	11 82       	std	Z+1, r1	; 0x01
    697c:	14 86       	std	Z+12, r1	; 0x0c
    697e:	13 86       	std	Z+11, r1	; 0x0b
    6980:	8f ef       	ldi	r24, 0xFF	; 255
    6982:	9f ef       	ldi	r25, 0xFF	; 255
    6984:	dc 01       	movw	r26, r24
    6986:	87 83       	std	Z+7, r24	; 0x07
    6988:	90 87       	std	Z+8, r25	; 0x08
    698a:	a1 87       	std	Z+9, r26	; 0x09
    698c:	b2 87       	std	Z+10, r27	; 0x0a
    698e:	08 95       	ret

00006990 <CFastLED::clearData()>:
    6990:	cf 93       	push	r28
    6992:	df 93       	push	r29
    6994:	c0 91 0d 10 	lds	r28, 0x100D	; 0x80100d <CLEDController::m_pHead>
    6998:	d0 91 0e 10 	lds	r29, 0x100E	; 0x80100e <CLEDController::m_pHead+0x1>
    699c:	20 97       	sbiw	r28, 0x00	; 0
    699e:	89 f0       	breq	.+34     	; 0x69c2 <CFastLED::clearData()+0x32>
    69a0:	8a 81       	ldd	r24, Y+2	; 0x02
    69a2:	9b 81       	ldd	r25, Y+3	; 0x03
    69a4:	00 97       	sbiw	r24, 0x00	; 0
    69a6:	49 f0       	breq	.+18     	; 0x69ba <CFastLED::clearData()+0x2a>
    69a8:	2d 85       	ldd	r18, Y+13	; 0x0d
    69aa:	3e 85       	ldd	r19, Y+14	; 0x0e
    69ac:	a9 01       	movw	r20, r18
    69ae:	44 0f       	add	r20, r20
    69b0:	55 1f       	adc	r21, r21
    69b2:	42 0f       	add	r20, r18
    69b4:	53 1f       	adc	r21, r19
    69b6:	60 e0       	ldi	r22, 0x00	; 0
    69b8:	d0 d2       	rcall	.+1440   	; 0x6f5a <memset8>
    69ba:	0c 80       	ldd	r0, Y+4	; 0x04
    69bc:	dd 81       	ldd	r29, Y+5	; 0x05
    69be:	c0 2d       	mov	r28, r0
    69c0:	ed cf       	rjmp	.-38     	; 0x699c <CFastLED::clearData()+0xc>
    69c2:	df 91       	pop	r29
    69c4:	cf 91       	pop	r28
    69c6:	08 95       	ret

000069c8 <CFastLED::countFPS(int)>:
    69c8:	cf 92       	push	r12
    69ca:	df 92       	push	r13
    69cc:	ef 92       	push	r14
    69ce:	ff 92       	push	r15
    69d0:	cf 93       	push	r28
    69d2:	df 93       	push	r29
    69d4:	ec 01       	movw	r28, r24
    69d6:	20 91 05 10 	lds	r18, 0x1005	; 0x801005 <CFastLED::countFPS(int)::br>
    69da:	30 91 06 10 	lds	r19, 0x1006	; 0x801006 <CFastLED::countFPS(int)::br+0x1>
    69de:	c9 01       	movw	r24, r18
    69e0:	01 96       	adiw	r24, 0x01	; 1
    69e2:	90 93 06 10 	sts	0x1006, r25	; 0x801006 <CFastLED::countFPS(int)::br+0x1>
    69e6:	80 93 05 10 	sts	0x1005, r24	; 0x801005 <CFastLED::countFPS(int)::br>
    69ea:	26 17       	cp	r18, r22
    69ec:	37 07       	cpc	r19, r23
    69ee:	0c f4       	brge	.+2      	; 0x69f2 <CFastLED::countFPS(int)+0x2a>
    69f0:	3f c0       	rjmp	.+126    	; 0x6a70 <CFastLED::countFPS(int)+0xa8>
    69f2:	0f b6       	in	r0, 0x3f	; 63
    69f4:	f8 94       	cli
    69f6:	20 91 1f 10 	lds	r18, 0x101F	; 0x80101f <timer0_millis_count>
    69fa:	30 91 20 10 	lds	r19, 0x1020	; 0x801020 <timer0_millis_count+0x1>
    69fe:	40 91 21 10 	lds	r20, 0x1021	; 0x801021 <timer0_millis_count+0x2>
    6a02:	50 91 22 10 	lds	r21, 0x1022	; 0x801022 <timer0_millis_count+0x3>
    6a06:	0f be       	out	0x3f, r0	; 63
    6a08:	e8 ee       	ldi	r30, 0xE8	; 232
    6a0a:	f3 e0       	ldi	r31, 0x03	; 3
    6a0c:	8e 9f       	mul	r24, r30
    6a0e:	b0 01       	movw	r22, r0
    6a10:	8f 9f       	mul	r24, r31
    6a12:	70 0d       	add	r23, r0
    6a14:	9e 9f       	mul	r25, r30
    6a16:	70 0d       	add	r23, r0
    6a18:	11 24       	eor	r1, r1
    6a1a:	07 2e       	mov	r0, r23
    6a1c:	00 0c       	add	r0, r0
    6a1e:	88 0b       	sbc	r24, r24
    6a20:	99 0b       	sbc	r25, r25
    6a22:	c0 90 01 10 	lds	r12, 0x1001	; 0x801001 <CFastLED::countFPS(int)::lastframe>
    6a26:	d0 90 02 10 	lds	r13, 0x1002	; 0x801002 <CFastLED::countFPS(int)::lastframe+0x1>
    6a2a:	e0 90 03 10 	lds	r14, 0x1003	; 0x801003 <CFastLED::countFPS(int)::lastframe+0x2>
    6a2e:	f0 90 04 10 	lds	r15, 0x1004	; 0x801004 <CFastLED::countFPS(int)::lastframe+0x3>
    6a32:	2c 19       	sub	r18, r12
    6a34:	3d 09       	sbc	r19, r13
    6a36:	4e 09       	sbc	r20, r14
    6a38:	5f 09       	sbc	r21, r15
    6a3a:	0e 94 07 45 	call	0x8a0e	; 0x8a0e <__udivmodsi4>
    6a3e:	3a 83       	std	Y+2, r19	; 0x02
    6a40:	29 83       	std	Y+1, r18	; 0x01
    6a42:	10 92 06 10 	sts	0x1006, r1	; 0x801006 <CFastLED::countFPS(int)::br+0x1>
    6a46:	10 92 05 10 	sts	0x1005, r1	; 0x801005 <CFastLED::countFPS(int)::br>
    6a4a:	0f b6       	in	r0, 0x3f	; 63
    6a4c:	f8 94       	cli
    6a4e:	80 91 1f 10 	lds	r24, 0x101F	; 0x80101f <timer0_millis_count>
    6a52:	90 91 20 10 	lds	r25, 0x1020	; 0x801020 <timer0_millis_count+0x1>
    6a56:	a0 91 21 10 	lds	r26, 0x1021	; 0x801021 <timer0_millis_count+0x2>
    6a5a:	b0 91 22 10 	lds	r27, 0x1022	; 0x801022 <timer0_millis_count+0x3>
    6a5e:	0f be       	out	0x3f, r0	; 63
    6a60:	80 93 01 10 	sts	0x1001, r24	; 0x801001 <CFastLED::countFPS(int)::lastframe>
    6a64:	90 93 02 10 	sts	0x1002, r25	; 0x801002 <CFastLED::countFPS(int)::lastframe+0x1>
    6a68:	a0 93 03 10 	sts	0x1003, r26	; 0x801003 <CFastLED::countFPS(int)::lastframe+0x2>
    6a6c:	b0 93 04 10 	sts	0x1004, r27	; 0x801004 <CFastLED::countFPS(int)::lastframe+0x3>
    6a70:	df 91       	pop	r29
    6a72:	cf 91       	pop	r28
    6a74:	ff 90       	pop	r15
    6a76:	ef 90       	pop	r14
    6a78:	df 90       	pop	r13
    6a7a:	cf 90       	pop	r12
    6a7c:	08 95       	ret

00006a7e <CFastLED::show(unsigned char)>:
    6a7e:	8f 92       	push	r8
    6a80:	9f 92       	push	r9
    6a82:	af 92       	push	r10
    6a84:	bf 92       	push	r11
    6a86:	cf 92       	push	r12
    6a88:	df 92       	push	r13
    6a8a:	ef 92       	push	r14
    6a8c:	ff 92       	push	r15
    6a8e:	0f 93       	push	r16
    6a90:	1f 93       	push	r17
    6a92:	cf 93       	push	r28
    6a94:	df 93       	push	r29
    6a96:	00 d0       	rcall	.+0      	; 0x6a98 <CFastLED::show(unsigned char)+0x1a>
    6a98:	1f 92       	push	r1
    6a9a:	cd b7       	in	r28, 0x3d	; 61
    6a9c:	de b7       	in	r29, 0x3e	; 62
    6a9e:	7c 01       	movw	r14, r24
    6aa0:	d6 2e       	mov	r13, r22
    6aa2:	d7 01       	movw	r26, r14
    6aa4:	13 96       	adiw	r26, 0x03	; 3
    6aa6:	0d 91       	ld	r16, X+
    6aa8:	1d 91       	ld	r17, X+
    6aaa:	2d 91       	ld	r18, X+
    6aac:	3c 91       	ld	r19, X
    6aae:	16 97       	sbiw	r26, 0x06	; 6
    6ab0:	01 15       	cp	r16, r1
    6ab2:	11 05       	cpc	r17, r1
    6ab4:	21 05       	cpc	r18, r1
    6ab6:	31 05       	cpc	r19, r1
    6ab8:	91 f0       	breq	.+36     	; 0x6ade <CFastLED::show(unsigned char)+0x60>
    6aba:	7d d6       	rcall	.+3322   	; 0x77b6 <_micros>
    6abc:	80 90 07 10 	lds	r8, 0x1007	; 0x801007 <lastshow>
    6ac0:	90 90 08 10 	lds	r9, 0x1008	; 0x801008 <lastshow+0x1>
    6ac4:	a0 90 09 10 	lds	r10, 0x1009	; 0x801009 <lastshow+0x2>
    6ac8:	b0 90 0a 10 	lds	r11, 0x100A	; 0x80100a <lastshow+0x3>
    6acc:	68 19       	sub	r22, r8
    6ace:	79 09       	sbc	r23, r9
    6ad0:	8a 09       	sbc	r24, r10
    6ad2:	9b 09       	sbc	r25, r11
    6ad4:	60 17       	cp	r22, r16
    6ad6:	71 07       	cpc	r23, r17
    6ad8:	82 07       	cpc	r24, r18
    6ada:	93 07       	cpc	r25, r19
    6adc:	10 f3       	brcs	.-60     	; 0x6aa2 <CFastLED::show(unsigned char)+0x24>
    6ade:	6b d6       	rcall	.+3286   	; 0x77b6 <_micros>
    6ae0:	60 93 07 10 	sts	0x1007, r22	; 0x801007 <lastshow>
    6ae4:	70 93 08 10 	sts	0x1008, r23	; 0x801008 <lastshow+0x1>
    6ae8:	80 93 09 10 	sts	0x1009, r24	; 0x801009 <lastshow+0x2>
    6aec:	90 93 0a 10 	sts	0x100A, r25	; 0x80100a <lastshow+0x3>
    6af0:	d7 01       	movw	r26, r14
    6af2:	1b 96       	adiw	r26, 0x0b	; 11
    6af4:	ed 91       	ld	r30, X+
    6af6:	fc 91       	ld	r31, X
    6af8:	1c 97       	sbiw	r26, 0x0c	; 12
    6afa:	30 97       	sbiw	r30, 0x00	; 0
    6afc:	49 f0       	breq	.+18     	; 0x6b10 <CFastLED::show(unsigned char)+0x92>
    6afe:	17 96       	adiw	r26, 0x07	; 7
    6b00:	4d 91       	ld	r20, X+
    6b02:	5d 91       	ld	r21, X+
    6b04:	6d 91       	ld	r22, X+
    6b06:	7c 91       	ld	r23, X
    6b08:	1a 97       	sbiw	r26, 0x0a	; 10
    6b0a:	8d 2d       	mov	r24, r13
    6b0c:	09 95       	icall
    6b0e:	d8 2e       	mov	r13, r24
    6b10:	00 91 0d 10 	lds	r16, 0x100D	; 0x80100d <CLEDController::m_pHead>
    6b14:	10 91 0e 10 	lds	r17, 0x100E	; 0x80100e <CLEDController::m_pHead+0x1>
    6b18:	01 15       	cp	r16, r1
    6b1a:	11 05       	cpc	r17, r1
    6b1c:	61 f1       	breq	.+88     	; 0x6b76 <CFastLED::show(unsigned char)+0xf8>
    6b1e:	f8 01       	movw	r30, r16
    6b20:	c4 84       	ldd	r12, Z+12	; 0x0c
    6b22:	d7 01       	movw	r26, r14
    6b24:	11 96       	adiw	r26, 0x01	; 1
    6b26:	8d 91       	ld	r24, X+
    6b28:	9c 91       	ld	r25, X
    6b2a:	84 36       	cpi	r24, 0x64	; 100
    6b2c:	91 05       	cpc	r25, r1
    6b2e:	08 f4       	brcc	.+2      	; 0x6b32 <CFastLED::show(unsigned char)+0xb4>
    6b30:	14 86       	std	Z+12, r1	; 0x0c
    6b32:	d8 01       	movw	r26, r16
    6b34:	ed 91       	ld	r30, X+
    6b36:	fc 91       	ld	r31, X
    6b38:	a2 80       	ldd	r10, Z+2	; 0x02
    6b3a:	b3 80       	ldd	r11, Z+3	; 0x03
    6b3c:	98 01       	movw	r18, r16
    6b3e:	27 5f       	subi	r18, 0xF7	; 247
    6b40:	3f 4f       	sbci	r19, 0xFF	; 255
    6b42:	a8 01       	movw	r20, r16
    6b44:	4a 5f       	subi	r20, 0xFA	; 250
    6b46:	5f 4f       	sbci	r21, 0xFF	; 255
    6b48:	6d 2d       	mov	r22, r13
    6b4a:	ce 01       	movw	r24, r28
    6b4c:	01 96       	adiw	r24, 0x01	; 1
    6b4e:	b7 de       	rcall	.-658    	; 0x68be <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    6b50:	f8 01       	movw	r30, r16
    6b52:	45 85       	ldd	r20, Z+13	; 0x0d
    6b54:	56 85       	ldd	r21, Z+14	; 0x0e
    6b56:	62 81       	ldd	r22, Z+2	; 0x02
    6b58:	73 81       	ldd	r23, Z+3	; 0x03
    6b5a:	9e 01       	movw	r18, r28
    6b5c:	2f 5f       	subi	r18, 0xFF	; 255
    6b5e:	3f 4f       	sbci	r19, 0xFF	; 255
    6b60:	c8 01       	movw	r24, r16
    6b62:	f5 01       	movw	r30, r10
    6b64:	09 95       	icall
    6b66:	d8 01       	movw	r26, r16
    6b68:	1c 96       	adiw	r26, 0x0c	; 12
    6b6a:	cc 92       	st	X, r12
    6b6c:	1c 97       	sbiw	r26, 0x0c	; 12
    6b6e:	14 96       	adiw	r26, 0x04	; 4
    6b70:	0d 91       	ld	r16, X+
    6b72:	1c 91       	ld	r17, X
    6b74:	d1 cf       	rjmp	.-94     	; 0x6b18 <CFastLED::show(unsigned char)+0x9a>
    6b76:	69 e1       	ldi	r22, 0x19	; 25
    6b78:	70 e0       	ldi	r23, 0x00	; 0
    6b7a:	c7 01       	movw	r24, r14
    6b7c:	25 df       	rcall	.-438    	; 0x69c8 <CFastLED::countFPS(int)>
    6b7e:	0f 90       	pop	r0
    6b80:	0f 90       	pop	r0
    6b82:	0f 90       	pop	r0
    6b84:	df 91       	pop	r29
    6b86:	cf 91       	pop	r28
    6b88:	1f 91       	pop	r17
    6b8a:	0f 91       	pop	r16
    6b8c:	ff 90       	pop	r15
    6b8e:	ef 90       	pop	r14
    6b90:	df 90       	pop	r13
    6b92:	cf 90       	pop	r12
    6b94:	bf 90       	pop	r11
    6b96:	af 90       	pop	r10
    6b98:	9f 90       	pop	r9
    6b9a:	8f 90       	pop	r8
    6b9c:	08 95       	ret

00006b9e <CFastLED::showColor(CRGB const&, unsigned char)>:
    6b9e:	4f 92       	push	r4
    6ba0:	5f 92       	push	r5
    6ba2:	6f 92       	push	r6
    6ba4:	7f 92       	push	r7
    6ba6:	8f 92       	push	r8
    6ba8:	9f 92       	push	r9
    6baa:	af 92       	push	r10
    6bac:	bf 92       	push	r11
    6bae:	cf 92       	push	r12
    6bb0:	df 92       	push	r13
    6bb2:	ef 92       	push	r14
    6bb4:	ff 92       	push	r15
    6bb6:	0f 93       	push	r16
    6bb8:	1f 93       	push	r17
    6bba:	cf 93       	push	r28
    6bbc:	df 93       	push	r29
    6bbe:	00 d0       	rcall	.+0      	; 0x6bc0 <CFastLED::showColor(CRGB const&, unsigned char)+0x22>
    6bc0:	1f 92       	push	r1
    6bc2:	cd b7       	in	r28, 0x3d	; 61
    6bc4:	de b7       	in	r29, 0x3e	; 62
    6bc6:	7c 01       	movw	r14, r24
    6bc8:	5b 01       	movw	r10, r22
    6bca:	d4 2e       	mov	r13, r20
    6bcc:	d7 01       	movw	r26, r14
    6bce:	13 96       	adiw	r26, 0x03	; 3
    6bd0:	0d 91       	ld	r16, X+
    6bd2:	1d 91       	ld	r17, X+
    6bd4:	2d 91       	ld	r18, X+
    6bd6:	3c 91       	ld	r19, X
    6bd8:	16 97       	sbiw	r26, 0x06	; 6
    6bda:	01 15       	cp	r16, r1
    6bdc:	11 05       	cpc	r17, r1
    6bde:	21 05       	cpc	r18, r1
    6be0:	31 05       	cpc	r19, r1
    6be2:	91 f0       	breq	.+36     	; 0x6c08 <CFastLED::showColor(CRGB const&, unsigned char)+0x6a>
    6be4:	e8 d5       	rcall	.+3024   	; 0x77b6 <_micros>
    6be6:	40 90 07 10 	lds	r4, 0x1007	; 0x801007 <lastshow>
    6bea:	50 90 08 10 	lds	r5, 0x1008	; 0x801008 <lastshow+0x1>
    6bee:	60 90 09 10 	lds	r6, 0x1009	; 0x801009 <lastshow+0x2>
    6bf2:	70 90 0a 10 	lds	r7, 0x100A	; 0x80100a <lastshow+0x3>
    6bf6:	64 19       	sub	r22, r4
    6bf8:	75 09       	sbc	r23, r5
    6bfa:	86 09       	sbc	r24, r6
    6bfc:	97 09       	sbc	r25, r7
    6bfe:	60 17       	cp	r22, r16
    6c00:	71 07       	cpc	r23, r17
    6c02:	82 07       	cpc	r24, r18
    6c04:	93 07       	cpc	r25, r19
    6c06:	10 f3       	brcs	.-60     	; 0x6bcc <CFastLED::showColor(CRGB const&, unsigned char)+0x2e>
    6c08:	d6 d5       	rcall	.+2988   	; 0x77b6 <_micros>
    6c0a:	60 93 07 10 	sts	0x1007, r22	; 0x801007 <lastshow>
    6c0e:	70 93 08 10 	sts	0x1008, r23	; 0x801008 <lastshow+0x1>
    6c12:	80 93 09 10 	sts	0x1009, r24	; 0x801009 <lastshow+0x2>
    6c16:	90 93 0a 10 	sts	0x100A, r25	; 0x80100a <lastshow+0x3>
    6c1a:	d7 01       	movw	r26, r14
    6c1c:	1b 96       	adiw	r26, 0x0b	; 11
    6c1e:	ed 91       	ld	r30, X+
    6c20:	fc 91       	ld	r31, X
    6c22:	1c 97       	sbiw	r26, 0x0c	; 12
    6c24:	30 97       	sbiw	r30, 0x00	; 0
    6c26:	49 f0       	breq	.+18     	; 0x6c3a <CFastLED::showColor(CRGB const&, unsigned char)+0x9c>
    6c28:	17 96       	adiw	r26, 0x07	; 7
    6c2a:	4d 91       	ld	r20, X+
    6c2c:	5d 91       	ld	r21, X+
    6c2e:	6d 91       	ld	r22, X+
    6c30:	7c 91       	ld	r23, X
    6c32:	1a 97       	sbiw	r26, 0x0a	; 10
    6c34:	8d 2d       	mov	r24, r13
    6c36:	09 95       	icall
    6c38:	d8 2e       	mov	r13, r24
    6c3a:	00 91 0d 10 	lds	r16, 0x100D	; 0x80100d <CLEDController::m_pHead>
    6c3e:	10 91 0e 10 	lds	r17, 0x100E	; 0x80100e <CLEDController::m_pHead+0x1>
    6c42:	01 15       	cp	r16, r1
    6c44:	11 05       	cpc	r17, r1
    6c46:	59 f1       	breq	.+86     	; 0x6c9e <CFastLED::showColor(CRGB const&, unsigned char)+0x100>
    6c48:	f8 01       	movw	r30, r16
    6c4a:	c4 84       	ldd	r12, Z+12	; 0x0c
    6c4c:	d7 01       	movw	r26, r14
    6c4e:	11 96       	adiw	r26, 0x01	; 1
    6c50:	8d 91       	ld	r24, X+
    6c52:	9c 91       	ld	r25, X
    6c54:	84 36       	cpi	r24, 0x64	; 100
    6c56:	91 05       	cpc	r25, r1
    6c58:	08 f4       	brcc	.+2      	; 0x6c5c <CFastLED::showColor(CRGB const&, unsigned char)+0xbe>
    6c5a:	14 86       	std	Z+12, r1	; 0x0c
    6c5c:	d8 01       	movw	r26, r16
    6c5e:	ed 91       	ld	r30, X+
    6c60:	fc 91       	ld	r31, X
    6c62:	80 80       	ld	r8, Z
    6c64:	91 80       	ldd	r9, Z+1	; 0x01
    6c66:	98 01       	movw	r18, r16
    6c68:	27 5f       	subi	r18, 0xF7	; 247
    6c6a:	3f 4f       	sbci	r19, 0xFF	; 255
    6c6c:	a8 01       	movw	r20, r16
    6c6e:	4a 5f       	subi	r20, 0xFA	; 250
    6c70:	5f 4f       	sbci	r21, 0xFF	; 255
    6c72:	6d 2d       	mov	r22, r13
    6c74:	ce 01       	movw	r24, r28
    6c76:	01 96       	adiw	r24, 0x01	; 1
    6c78:	22 de       	rcall	.-956    	; 0x68be <CLEDController::computeAdjustment(unsigned char, CRGB const&, CRGB const&)>
    6c7a:	f8 01       	movw	r30, r16
    6c7c:	45 85       	ldd	r20, Z+13	; 0x0d
    6c7e:	56 85       	ldd	r21, Z+14	; 0x0e
    6c80:	9e 01       	movw	r18, r28
    6c82:	2f 5f       	subi	r18, 0xFF	; 255
    6c84:	3f 4f       	sbci	r19, 0xFF	; 255
    6c86:	b5 01       	movw	r22, r10
    6c88:	c8 01       	movw	r24, r16
    6c8a:	f4 01       	movw	r30, r8
    6c8c:	09 95       	icall
    6c8e:	d8 01       	movw	r26, r16
    6c90:	1c 96       	adiw	r26, 0x0c	; 12
    6c92:	cc 92       	st	X, r12
    6c94:	1c 97       	sbiw	r26, 0x0c	; 12
    6c96:	14 96       	adiw	r26, 0x04	; 4
    6c98:	0d 91       	ld	r16, X+
    6c9a:	1c 91       	ld	r17, X
    6c9c:	d2 cf       	rjmp	.-92     	; 0x6c42 <CFastLED::showColor(CRGB const&, unsigned char)+0xa4>
    6c9e:	69 e1       	ldi	r22, 0x19	; 25
    6ca0:	70 e0       	ldi	r23, 0x00	; 0
    6ca2:	c7 01       	movw	r24, r14
    6ca4:	91 de       	rcall	.-734    	; 0x69c8 <CFastLED::countFPS(int)>
    6ca6:	0f 90       	pop	r0
    6ca8:	0f 90       	pop	r0
    6caa:	0f 90       	pop	r0
    6cac:	df 91       	pop	r29
    6cae:	cf 91       	pop	r28
    6cb0:	1f 91       	pop	r17
    6cb2:	0f 91       	pop	r16
    6cb4:	ff 90       	pop	r15
    6cb6:	ef 90       	pop	r14
    6cb8:	df 90       	pop	r13
    6cba:	cf 90       	pop	r12
    6cbc:	bf 90       	pop	r11
    6cbe:	af 90       	pop	r10
    6cc0:	9f 90       	pop	r9
    6cc2:	8f 90       	pop	r8
    6cc4:	7f 90       	pop	r7
    6cc6:	6f 90       	pop	r6
    6cc8:	5f 90       	pop	r5
    6cca:	4f 90       	pop	r4
    6ccc:	08 95       	ret

00006cce <CFastLED::clear(bool)>:
    6cce:	0f 93       	push	r16
    6cd0:	1f 93       	push	r17
    6cd2:	cf 93       	push	r28
    6cd4:	df 93       	push	r29
    6cd6:	00 d0       	rcall	.+0      	; 0x6cd8 <CFastLED::clear(bool)+0xa>
    6cd8:	1f 92       	push	r1
    6cda:	cd b7       	in	r28, 0x3d	; 61
    6cdc:	de b7       	in	r29, 0x3e	; 62
    6cde:	8c 01       	movw	r16, r24
    6ce0:	66 23       	and	r22, r22
    6ce2:	41 f0       	breq	.+16     	; 0x6cf4 <CFastLED::clear(bool)+0x26>
    6ce4:	19 82       	std	Y+1, r1	; 0x01
    6ce6:	1a 82       	std	Y+2, r1	; 0x02
    6ce8:	1b 82       	std	Y+3, r1	; 0x03
    6cea:	40 e0       	ldi	r20, 0x00	; 0
    6cec:	be 01       	movw	r22, r28
    6cee:	6f 5f       	subi	r22, 0xFF	; 255
    6cf0:	7f 4f       	sbci	r23, 0xFF	; 255
    6cf2:	55 df       	rcall	.-342    	; 0x6b9e <CFastLED::showColor(CRGB const&, unsigned char)>
    6cf4:	c8 01       	movw	r24, r16
    6cf6:	4c de       	rcall	.-872    	; 0x6990 <CFastLED::clearData()>
    6cf8:	0f 90       	pop	r0
    6cfa:	0f 90       	pop	r0
    6cfc:	0f 90       	pop	r0
    6cfe:	df 91       	pop	r29
    6d00:	cf 91       	pop	r28
    6d02:	1f 91       	pop	r17
    6d04:	0f 91       	pop	r16
    6d06:	08 95       	ret

00006d08 <CFastLED::setMaxRefreshRate(unsigned int, bool)>:
    6d08:	cf 93       	push	r28
    6d0a:	df 93       	push	r29
    6d0c:	ec 01       	movw	r28, r24
    6d0e:	44 23       	and	r20, r20
    6d10:	f1 f0       	breq	.+60     	; 0x6d4e <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x46>
    6d12:	61 15       	cp	r22, r1
    6d14:	71 05       	cpc	r23, r1
    6d16:	c1 f0       	breq	.+48     	; 0x6d48 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    6d18:	9b 01       	movw	r18, r22
    6d1a:	50 e0       	ldi	r21, 0x00	; 0
    6d1c:	40 e0       	ldi	r20, 0x00	; 0
    6d1e:	60 e4       	ldi	r22, 0x40	; 64
    6d20:	72 e4       	ldi	r23, 0x42	; 66
    6d22:	8f e0       	ldi	r24, 0x0F	; 15
    6d24:	90 e0       	ldi	r25, 0x00	; 0
    6d26:	0e 94 29 45 	call	0x8a52	; 0x8a52 <__divmodsi4>
    6d2a:	8b 81       	ldd	r24, Y+3	; 0x03
    6d2c:	9c 81       	ldd	r25, Y+4	; 0x04
    6d2e:	ad 81       	ldd	r26, Y+5	; 0x05
    6d30:	be 81       	ldd	r27, Y+6	; 0x06
    6d32:	82 17       	cp	r24, r18
    6d34:	93 07       	cpc	r25, r19
    6d36:	a4 07       	cpc	r26, r20
    6d38:	b5 07       	cpc	r27, r21
    6d3a:	10 f4       	brcc	.+4      	; 0x6d40 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x38>
    6d3c:	da 01       	movw	r26, r20
    6d3e:	c9 01       	movw	r24, r18
    6d40:	8b 83       	std	Y+3, r24	; 0x03
    6d42:	9c 83       	std	Y+4, r25	; 0x04
    6d44:	ad 83       	std	Y+5, r26	; 0x05
    6d46:	be 83       	std	Y+6, r27	; 0x06
    6d48:	df 91       	pop	r29
    6d4a:	cf 91       	pop	r28
    6d4c:	08 95       	ret
    6d4e:	61 15       	cp	r22, r1
    6d50:	71 05       	cpc	r23, r1
    6d52:	71 f0       	breq	.+28     	; 0x6d70 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x68>
    6d54:	9b 01       	movw	r18, r22
    6d56:	50 e0       	ldi	r21, 0x00	; 0
    6d58:	40 e0       	ldi	r20, 0x00	; 0
    6d5a:	60 e4       	ldi	r22, 0x40	; 64
    6d5c:	72 e4       	ldi	r23, 0x42	; 66
    6d5e:	8f e0       	ldi	r24, 0x0F	; 15
    6d60:	90 e0       	ldi	r25, 0x00	; 0
    6d62:	0e 94 29 45 	call	0x8a52	; 0x8a52 <__divmodsi4>
    6d66:	2b 83       	std	Y+3, r18	; 0x03
    6d68:	3c 83       	std	Y+4, r19	; 0x04
    6d6a:	4d 83       	std	Y+5, r20	; 0x05
    6d6c:	5e 83       	std	Y+6, r21	; 0x06
    6d6e:	ec cf       	rjmp	.-40     	; 0x6d48 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>
    6d70:	1b 82       	std	Y+3, r1	; 0x03
    6d72:	1c 82       	std	Y+4, r1	; 0x04
    6d74:	1d 82       	std	Y+5, r1	; 0x05
    6d76:	1e 82       	std	Y+6, r1	; 0x06
    6d78:	e7 cf       	rjmp	.-50     	; 0x6d48 <CFastLED::setMaxRefreshRate(unsigned int, bool)+0x40>

00006d7a <CFastLED::addLeds(CLEDController*, CRGB*, int, int)>:
    6d7a:	cf 92       	push	r12
    6d7c:	df 92       	push	r13
    6d7e:	ef 92       	push	r14
    6d80:	ff 92       	push	r15
    6d82:	0f 93       	push	r16
    6d84:	1f 93       	push	r17
    6d86:	cf 93       	push	r28
    6d88:	df 93       	push	r29
    6d8a:	ec 01       	movw	r28, r24
    6d8c:	6b 01       	movw	r12, r22
    6d8e:	7a 01       	movw	r14, r20
    6d90:	10 e0       	ldi	r17, 0x00	; 0
    6d92:	00 e0       	ldi	r16, 0x00	; 0
    6d94:	12 16       	cp	r1, r18
    6d96:	13 06       	cpc	r1, r19
    6d98:	14 f4       	brge	.+4      	; 0x6d9e <CFastLED::addLeds(CLEDController*, CRGB*, int, int)+0x24>
    6d9a:	8a 01       	movw	r16, r20
    6d9c:	79 01       	movw	r14, r18
    6d9e:	e8 81       	ld	r30, Y
    6da0:	f9 81       	ldd	r31, Y+1	; 0x01
    6da2:	04 80       	ldd	r0, Z+4	; 0x04
    6da4:	f5 81       	ldd	r31, Z+5	; 0x05
    6da6:	e0 2d       	mov	r30, r0
    6da8:	ce 01       	movw	r24, r28
    6daa:	09 95       	icall
    6dac:	c8 01       	movw	r24, r16
    6dae:	88 0f       	add	r24, r24
    6db0:	99 1f       	adc	r25, r25
    6db2:	08 0f       	add	r16, r24
    6db4:	19 1f       	adc	r17, r25
    6db6:	c0 0e       	add	r12, r16
    6db8:	d1 1e       	adc	r13, r17
    6dba:	db 82       	std	Y+3, r13	; 0x03
    6dbc:	ca 82       	std	Y+2, r12	; 0x02
    6dbe:	ed 86       	std	Y+13, r14	; 0x0d
    6dc0:	fe 86       	std	Y+14, r15	; 0x0e
    6dc2:	e8 81       	ld	r30, Y
    6dc4:	f9 81       	ldd	r31, Y+1	; 0x01
    6dc6:	02 84       	ldd	r0, Z+10	; 0x0a
    6dc8:	f3 85       	ldd	r31, Z+11	; 0x0b
    6dca:	e0 2d       	mov	r30, r0
    6dcc:	ce 01       	movw	r24, r28
    6dce:	09 95       	icall
    6dd0:	41 e0       	ldi	r20, 0x01	; 1
    6dd2:	bc 01       	movw	r22, r24
    6dd4:	8f e0       	ldi	r24, 0x0F	; 15
    6dd6:	90 e1       	ldi	r25, 0x10	; 16
    6dd8:	97 df       	rcall	.-210    	; 0x6d08 <CFastLED::setMaxRefreshRate(unsigned int, bool)>
    6dda:	ce 01       	movw	r24, r28
    6ddc:	df 91       	pop	r29
    6dde:	cf 91       	pop	r28
    6de0:	1f 91       	pop	r17
    6de2:	0f 91       	pop	r16
    6de4:	ff 90       	pop	r15
    6de6:	ef 90       	pop	r14
    6de8:	df 90       	pop	r13
    6dea:	cf 90       	pop	r12
    6dec:	08 95       	ret

00006dee <_GLOBAL__sub_I_pSmartMatrix>:

FASTLED_NAMESPACE_BEGIN

void *pSmartMatrix = NULL;

CFastLED FastLED;
    6dee:	8f e0       	ldi	r24, 0x0F	; 15
    6df0:	90 e1       	ldi	r25, 0x10	; 16
    6df2:	bf cd       	rjmp	.-1154   	; 0x6972 <CFastLED::CFastLED()>

00006df4 <hsv2rgb_rainbow(CHSV const&, CRGB&)>:
#define K171 171
#define K170 170
#define K85  85

void hsv2rgb_rainbow( const CHSV& hsv, CRGB& rgb)
{
    6df4:	1f 93       	push	r17
    6df6:	dc 01       	movw	r26, r24
    6df8:	fb 01       	movw	r30, r22
    // Gscale: what to scale green down by.
    // Depends GREATLY on your particular LEDs
    const uint8_t Gscale = 0;
    
    
    uint8_t hue = hsv.hue;
    6dfa:	7c 91       	ld	r23, X
    uint8_t sat = hsv.sat;
    6dfc:	11 96       	adiw	r26, 0x01	; 1
    6dfe:	4c 91       	ld	r20, X
    6e00:	11 97       	sbiw	r26, 0x01	; 1
    uint8_t val = hsv.val;
    6e02:	12 96       	adiw	r26, 0x02	; 2
    6e04:	1c 91       	ld	r17, X
        // It's much faster and smaller to just do three single-bit shifts
        // So this business is to force that.
        offset8 <<= 1;
        asm volatile("");
        offset8 <<= 1;
        asm volatile("");
    6e06:	97 2f       	mov	r25, r23
    6e08:	99 0f       	add	r25, r25
    6e0a:	99 0f       	add	r25, r25
    6e0c:	99 0f       	add	r25, r25
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    6e0e:	35 e5       	ldi	r19, 0x55	; 85
    6e10:	29 2f       	mov	r18, r25
    6e12:	23 9f       	mul	r18, r19
    6e14:	02 0e       	add	r0, r18
    6e16:	20 e0       	ldi	r18, 0x00	; 0
    6e18:	21 1d       	adc	r18, r1
    6e1a:	11 24       	eor	r1, r1
    6e1c:	82 2f       	mov	r24, r18
    6e1e:	67 2f       	mov	r22, r23
    6e20:	60 74       	andi	r22, 0x40	; 64
    6e22:	57 2f       	mov	r21, r23
    6e24:	50 72       	andi	r21, 0x20	; 32
    
    uint8_t third = scale8( offset8, (256 / 3)); // max = 85
    
    uint8_t r, g, b;
    
    if( ! (hue & 0x80) ) {
    6e26:	77 fd       	sbrc	r23, 7
    6e28:	6f c0       	rjmp	.+222    	; 0x6f08 <L_630+0x62>
        // 0XX
        if( ! (hue & 0x40) ) {
    6e2a:	61 11       	cpse	r22, r1
    6e2c:	5b c0       	rjmp	.+182    	; 0x6ee4 <L_630+0x3e>
            // 00X
            //section 0-1
            if( ! (hue & 0x20) ) {
    6e2e:	51 11       	cpse	r21, r1
    6e30:	05 c0       	rjmp	.+10     	; 0x6e3c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x48>
                // 000
                //case 0: // R -> O
                r = K255 - third;
    6e32:	92 2f       	mov	r25, r18
    6e34:	90 95       	com	r25
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    6e36:	89 2f       	mov	r24, r25
                    g = K170 + third;
                    b = 0;
    6e38:	90 e0       	ldi	r25, 0x00	; 0
    6e3a:	04 c0       	rjmp	.+8      	; 0x6e44 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
                    g = K85 + third ;
    6e3c:	25 e5       	ldi	r18, 0x55	; 85
    6e3e:	28 0f       	add	r18, r24
                    b = 0;
    6e40:	90 e0       	ldi	r25, 0x00	; 0
                FORCE_REFERENCE(b);
            } else {
                // 001
                //case 1: // O -> Y
                if( Y1 ) {
                    r = K171;
    6e42:	8b ea       	ldi	r24, 0xAB	; 171
    if( G2 ) g = g >> 1;
    if( Gscale ) g = scale8_video_LEAVING_R1_DIRTY( g, Gscale);
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
    6e44:	4f 3f       	cpi	r20, 0xFF	; 255
    6e46:	09 f4       	brne	.+2      	; 0x6e4a <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x56>
    6e48:	24 c0       	rjmp	.+72     	; 0x6e92 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
        if( sat == 0) {
    6e4a:	44 23       	and	r20, r20
    6e4c:	09 f4       	brne	.+2      	; 0x6e50 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x5c>
    6e4e:	7d c0       	rjmp	.+250    	; 0x6f4a <L_630+0xa4>
            r = 255; b = 255; g = 255;
        } else {
            //nscale8x3_video( r, g, b, sat);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, sat);
    6e50:	88 23       	and	r24, r24
    6e52:	31 f0       	breq	.+12     	; 0x6e60 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x6c>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    6e54:	38 2f       	mov	r19, r24
    6e56:	34 9f       	mul	r19, r20
    6e58:	03 0e       	add	r0, r19
    6e5a:	30 e0       	ldi	r19, 0x00	; 0
    6e5c:	31 1d       	adc	r19, r1
    6e5e:	83 2f       	mov	r24, r19
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat);
    6e60:	22 23       	and	r18, r18
    6e62:	21 f0       	breq	.+8      	; 0x6e6c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x78>
    6e64:	24 9f       	mul	r18, r20
    6e66:	02 0e       	add	r0, r18
    6e68:	20 e0       	ldi	r18, 0x00	; 0
    6e6a:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat);
    6e6c:	99 23       	and	r25, r25
    6e6e:	31 f0       	breq	.+12     	; 0x6e7c <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x88>
    6e70:	39 2f       	mov	r19, r25
    6e72:	34 9f       	mul	r19, r20
    6e74:	03 0e       	add	r0, r19
    6e76:	30 e0       	ldi	r19, 0x00	; 0
    6e78:	31 1d       	adc	r19, r1
    6e7a:	93 2f       	mov	r25, r19
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    6e7c:	11 24       	eor	r1, r1
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, sat) + 1;
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, sat) + 1;
#endif
            cleanup_R1();
            
            uint8_t desat = 255 - sat;
    6e7e:	34 2f       	mov	r19, r20
    6e80:	30 95       	com	r19
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    6e82:	33 9f       	mul	r19, r19
    6e84:	03 0e       	add	r0, r19
    6e86:	30 e0       	ldi	r19, 0x00	; 0
    6e88:	31 1d       	adc	r19, r1
    6e8a:	11 24       	eor	r1, r1
            desat = scale8( desat, desat);
            
            uint8_t brightness_floor = desat;
            r += brightness_floor;
    6e8c:	83 0f       	add	r24, r19
            g += brightness_floor;
    6e8e:	23 0f       	add	r18, r19
            b += brightness_floor;
    6e90:	93 0f       	add	r25, r19
        }
    }
    
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
    6e92:	1f 3f       	cpi	r17, 0xFF	; 255
    6e94:	09 f4       	brne	.+2      	; 0x6e98 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0xa4>
    6e96:	21 c0       	rjmp	.+66     	; 0x6eda <L_630+0x34>
        "  breq L_%=\n\t"
        "  subi %[j], 0xFF\n\t"
        "L_%=: \n\t"
        : [j] "+a" (j)
        : [i] "a" (i), [scale] "a" (scale)
        : "r0", "r1");
    6e98:	30 e0       	ldi	r19, 0x00	; 0
    6e9a:	11 23       	and	r17, r17
    6e9c:	21 f0       	breq	.+8      	; 0x6ea6 <L_630>
    6e9e:	11 9f       	mul	r17, r17
    6ea0:	31 2d       	mov	r19, r1
    6ea2:	09 f0       	breq	.+2      	; 0x6ea6 <L_630>
    6ea4:	3f 5f       	subi	r19, 0xFF	; 255

00006ea6 <L_630>:
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
    6ea6:	33 23       	and	r19, r19
    6ea8:	09 f4       	brne	.+2      	; 0x6eac <L_630+0x6>
    6eaa:	53 c0       	rjmp	.+166    	; 0x6f52 <L_630+0xac>
            r=0; g=0; b=0;
        } else {
            // nscale8x3_video( r, g, b, val);
#if (FASTLED_SCALE8_FIXED==1)
            if( r ) r = scale8_LEAVING_R1_DIRTY( r, val);
    6eac:	88 23       	and	r24, r24
    6eae:	31 f0       	breq	.+12     	; 0x6ebc <L_630+0x16>
         /* R1 IS LEFT DIRTY HERE; YOU MUST ZERO IT OUT YOURSELF  */
         /* "clr __zero_reg__    \n\t" */

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    6eb0:	48 2f       	mov	r20, r24
    6eb2:	43 9f       	mul	r20, r19
    6eb4:	04 0e       	add	r0, r20
    6eb6:	40 e0       	ldi	r20, 0x00	; 0
    6eb8:	41 1d       	adc	r20, r1
    6eba:	84 2f       	mov	r24, r20
            if( g ) g = scale8_LEAVING_R1_DIRTY( g, val);
    6ebc:	22 23       	and	r18, r18
    6ebe:	21 f0       	breq	.+8      	; 0x6ec8 <L_630+0x22>
    6ec0:	23 9f       	mul	r18, r19
    6ec2:	02 0e       	add	r0, r18
    6ec4:	20 e0       	ldi	r18, 0x00	; 0
    6ec6:	21 1d       	adc	r18, r1
            if( b ) b = scale8_LEAVING_R1_DIRTY( b, val);
    6ec8:	99 23       	and	r25, r25
    6eca:	31 f0       	breq	.+12     	; 0x6ed8 <L_630+0x32>
    6ecc:	49 2f       	mov	r20, r25
    6ece:	43 9f       	mul	r20, r19
    6ed0:	04 0e       	add	r0, r20
    6ed2:	40 e0       	ldi	r20, 0x00	; 0
    6ed4:	41 1d       	adc	r20, r1
    6ed6:	94 2f       	mov	r25, r20
/// Clean up the r1 register after a series of *LEAVING_R1_DIRTY calls
LIB8STATIC_ALWAYS_INLINE void cleanup_R1()
{
#if CLEANUP_R1_AVRASM == 1
    // Restore r1 to "0"; it's expected to always be that
    asm volatile( "clr __zero_reg__  \n\t" : : : "r1" );
    6ed8:	11 24       	eor	r1, r1
    // It turns out that fixing it winds up costing more than
    // not fixing it.
    // To paraphrase Dr Bronner, profile! profile! profile!
    //asm volatile(  ""  :  :  : "r26", "r27" );
    //asm volatile (" movw r30, r26 \n" : : : "r30", "r31");
    rgb.r = r;
    6eda:	80 83       	st	Z, r24
    rgb.g = g;
    6edc:	21 83       	std	Z+1, r18	; 0x01
    rgb.b = b;
    6ede:	92 83       	std	Z+2, r25	; 0x02
}
    6ee0:	1f 91       	pop	r17
    6ee2:	08 95       	ret
                }
            }
        } else {
            //01X
            // section 2-3
            if( !  (hue & 0x20) ) {
    6ee4:	51 11       	cpse	r21, r1
    6ee6:	0b c0       	rjmp	.+22     	; 0x6efe <L_630+0x58>
#endif
         "clr __zero_reg__    \n\t"

         : "+a" (i)      /* writes to i */
         : "a"  (scale)  /* uses scale */
         : "r0", "r1"    /* clobbers r0, r1 */ );
    6ee8:	39 2f       	mov	r19, r25
    6eea:	2a ea       	ldi	r18, 0xAA	; 170
    6eec:	32 9f       	mul	r19, r18
    6eee:	03 0e       	add	r0, r19
    6ef0:	30 e0       	ldi	r19, 0x00	; 0
    6ef2:	31 1d       	adc	r19, r1
    6ef4:	11 24       	eor	r1, r1
                // 010
                //case 2: // Y -> G
                if( Y1 ) {
                    //uint8_t twothirds = (third << 1);
                    uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                    r = K171 - twothirds;
    6ef6:	9b ea       	ldi	r25, 0xAB	; 171
    6ef8:	93 1b       	sub	r25, r19
                    g = K170 + third;
    6efa:	28 0f       	add	r18, r24
                    b = 0;
                    FORCE_REFERENCE(b);
    6efc:	9c cf       	rjmp	.-200    	; 0x6e36 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x42>
                }
            } else {
                // 011
                // case 3: // G -> A
                r = 0;
                FORCE_REFERENCE(r);
    6efe:	90 e0       	ldi	r25, 0x00	; 0
                g = K255 - third;
    6f00:	20 95       	com	r18
                b = third;
    6f02:	98 2f       	mov	r25, r24
        if( ! (hue & 0x40) ) {
            // 10X
            if( ! ( hue & 0x20) ) {
                // 100
                //case 4: // A -> B
                r = 0;
    6f04:	80 e0       	ldi	r24, 0x00	; 0
    6f06:	9e cf       	rjmp	.-196    	; 0x6e44 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
            }
        }
    } else {
        // section 4-7
        // 1XX
        if( ! (hue & 0x40) ) {
    6f08:	61 11       	cpse	r22, r1
    6f0a:	12 c0       	rjmp	.+36     	; 0x6f30 <L_630+0x8a>
            // 10X
            if( ! ( hue & 0x20) ) {
    6f0c:	51 11       	cpse	r21, r1
    6f0e:	0c c0       	rjmp	.+24     	; 0x6f28 <L_630+0x82>
    6f10:	39 2f       	mov	r19, r25
    6f12:	2a ea       	ldi	r18, 0xAA	; 170
    6f14:	32 9f       	mul	r19, r18
    6f16:	03 0e       	add	r0, r19
    6f18:	30 e0       	ldi	r19, 0x00	; 0
    6f1a:	31 1d       	adc	r19, r1
    6f1c:	11 24       	eor	r1, r1
                //case 4: // A -> B
                r = 0;
                FORCE_REFERENCE(r);
                //uint8_t twothirds = (third << 1);
                uint8_t twothirds = scale8( offset8, ((256 * 2) / 3)); // max=170
                g = K171 - twothirds; //K170?
    6f1e:	2b ea       	ldi	r18, 0xAB	; 171
    6f20:	23 1b       	sub	r18, r19
                b = K85  + twothirds;
    6f22:	95 e5       	ldi	r25, 0x55	; 85
    6f24:	93 0f       	add	r25, r19
    6f26:	ee cf       	rjmp	.-36     	; 0x6f04 <L_630+0x5e>
                // 101
                //case 5: // B -> P
                r = third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K255 - third;
    6f28:	92 2f       	mov	r25, r18
    6f2a:	90 95       	com	r25
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
    6f2c:	20 e0       	ldi	r18, 0x00	; 0
    6f2e:	8a cf       	rjmp	.-236    	; 0x6e44 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x50>
                FORCE_REFERENCE(g);
                b = K255 - third;
                
            }
        } else {
            if( !  (hue & 0x20)  ) {
    6f30:	51 11       	cpse	r21, r1
    6f32:	06 c0       	rjmp	.+12     	; 0x6f40 <L_630+0x9a>
                // 110
                //case 6: // P -- K
                r = K85 + third;
    6f34:	25 e5       	ldi	r18, 0x55	; 85
    6f36:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
                b = K171 - third;
    6f38:	9b ea       	ldi	r25, 0xAB	; 171
                // 111
                //case 7: // K -> R
                r = K170 + third;
                g = 0;
                FORCE_REFERENCE(g);
                b = K85 - third;
    6f3a:	98 1b       	sub	r25, r24
                b = K171 - third;
                
            } else {
                // 111
                //case 7: // K -> R
                r = K170 + third;
    6f3c:	82 2f       	mov	r24, r18
    6f3e:	f6 cf       	rjmp	.-20     	; 0x6f2c <L_630+0x86>
    6f40:	2a ea       	ldi	r18, 0xAA	; 170
    6f42:	28 0f       	add	r18, r24
                g = 0;
                FORCE_REFERENCE(g);
    6f44:	90 e0       	ldi	r25, 0x00	; 0
                b = K85 - third;
    6f46:	93 2f       	mov	r25, r19
    6f48:	f8 cf       	rjmp	.-16     	; 0x6f3a <L_630+0x94>
    
    // Scale down colors if we're desaturated at all
    // and add the brightness_floor to r, g, and b.
    if( sat != 255 ) {
        if( sat == 0) {
            r = 255; b = 255; g = 255;
    6f4a:	9f ef       	ldi	r25, 0xFF	; 255
    6f4c:	2f ef       	ldi	r18, 0xFF	; 255
    6f4e:	8f ef       	ldi	r24, 0xFF	; 255
    6f50:	a0 cf       	rjmp	.-192    	; 0x6e92 <hsv2rgb_rainbow(CHSV const&, CRGB&)+0x9e>
    // Now scale everything down if we're at value < 255.
    if( val != 255 ) {
        
        val = scale8_video_LEAVING_R1_DIRTY( val, val);
        if( val == 0 ) {
            r=0; g=0; b=0;
    6f52:	90 e0       	ldi	r25, 0x00	; 0
    6f54:	20 e0       	ldi	r18, 0x00	; 0
    6f56:	80 e0       	ldi	r24, 0x00	; 0
    6f58:	c0 cf       	rjmp	.-128    	; 0x6eda <L_630+0x34>

00006f5a <memset8>:
         "  brcc Lsetloop_%=        \n\t"
         : [num] "+r" (num)
         : [ptr]  "r" (ptr),
           [val]  "r" (val)
         : "memory"
         );
    6f5a:	dc 01       	movw	r26, r24
    6f5c:	40 ff       	sbrs	r20, 0
    6f5e:	03 c0       	rjmp	.+6      	; 0x6f66 <Lseteven_8>
    6f60:	01 c0       	rjmp	.+2      	; 0x6f64 <Lsetodd_8>

00006f62 <Lsetloop_8>:
    6f62:	6d 93       	st	X+, r22

00006f64 <Lsetodd_8>:
    6f64:	6d 93       	st	X+, r22

00006f66 <Lseteven_8>:
    6f66:	42 50       	subi	r20, 0x02	; 2
    6f68:	e0 f7       	brcc	.-8      	; 0x6f62 <Lsetloop_8>
    6f6a:	50 40       	sbci	r21, 0x00	; 0
    6f6c:	d0 f7       	brcc	.-12     	; 0x6f62 <Lsetloop_8>
    return ptr;
}
    6f6e:	08 95       	ret

00006f70 <memcpy8>:
         "  brcc Lcpyloop_%=        \n\t"
         : [num] "+r" (num)
         : [src] "r" (src),
           [dst] "r" (dst)
         : "memory"
         );
    6f70:	fb 01       	movw	r30, r22
    6f72:	dc 01       	movw	r26, r24
    6f74:	40 ff       	sbrs	r20, 0
    6f76:	05 c0       	rjmp	.+10     	; 0x6f82 <Lcpyeven_23>
    6f78:	02 c0       	rjmp	.+4      	; 0x6f7e <Lcpyodd_23>

00006f7a <Lcpyloop_23>:
    6f7a:	01 90       	ld	r0, Z+
    6f7c:	0d 92       	st	X+, r0

00006f7e <Lcpyodd_23>:
    6f7e:	01 90       	ld	r0, Z+
    6f80:	0d 92       	st	X+, r0

00006f82 <Lcpyeven_23>:
    6f82:	42 50       	subi	r20, 0x02	; 2
    6f84:	d0 f7       	brcc	.-12     	; 0x6f7a <Lcpyloop_23>
    6f86:	50 40       	sbci	r21, 0x00	; 0
    6f88:	c0 f7       	brcc	.-16     	; 0x6f7a <Lcpyloop_23>
    return dst;
}
    6f8a:	08 95       	ret

00006f8c <memmove8>:

//__attribute__ ((noinline))
void * memmove8 ( void * dst, const void* src, uint16_t num )
{
    if( src > dst) {
    6f8c:	86 17       	cp	r24, r22
    6f8e:	97 07       	cpc	r25, r23
    6f90:	08 f4       	brcc	.+2      	; 0x6f94 <memmove8+0x8>
        // if src > dst then we can use the forward-stepping memcpy8
        return memcpy8( dst, src, num);
    6f92:	ee cf       	rjmp	.-36     	; 0x6f70 <memcpy8>
    } else {
        // if src < dst then we have to step backward:
        dst = (char*)dst + num;
    6f94:	84 0f       	add	r24, r20
    6f96:	95 1f       	adc	r25, r21
        src = (char*)src + num;
    6f98:	64 0f       	add	r22, r20
    6f9a:	75 1f       	adc	r23, r21
             "  brcc Lmovloop_%=        \n\t"
             : [num] "+r" (num)
             : [src] "r" (src),
               [dst] "r" (dst)
             : "memory"
             );
    6f9c:	fb 01       	movw	r30, r22
    6f9e:	dc 01       	movw	r26, r24
    6fa0:	40 ff       	sbrs	r20, 0
    6fa2:	05 c0       	rjmp	.+10     	; 0x6fae <Lmoveven_58>
    6fa4:	02 c0       	rjmp	.+4      	; 0x6faa <Lmovodd_58>

00006fa6 <Lmovloop_58>:
    6fa6:	02 90       	ld	r0, -Z
    6fa8:	0e 92       	st	-X, r0

00006faa <Lmovodd_58>:
    6faa:	02 90       	ld	r0, -Z
    6fac:	0e 92       	st	-X, r0

00006fae <Lmoveven_58>:
    6fae:	42 50       	subi	r20, 0x02	; 2
    6fb0:	d0 f7       	brcc	.-12     	; 0x6fa6 <Lmovloop_58>
    6fb2:	50 40       	sbci	r21, 0x00	; 0
    6fb4:	c0 f7       	brcc	.-16     	; 0x6fa6 <Lmovloop_58>
        return dst;
    }
}
    6fb6:	08 95       	ret

00006fb8 <malloc>:
//char *__brkval_maximum = 0;


void *
malloc(size_t len)
{
    6fb8:	0f 93       	push	r16
    6fba:	1f 93       	push	r17
    6fbc:	cf 93       	push	r28
    6fbe:	df 93       	push	r29
    6fc0:	82 30       	cpi	r24, 0x02	; 2
    6fc2:	91 05       	cpc	r25, r1
    6fc4:	10 f4       	brcc	.+4      	; 0x6fca <malloc+0x12>
    6fc6:	82 e0       	ldi	r24, 0x02	; 2
    6fc8:	90 e0       	ldi	r25, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    6fca:	e0 91 a9 10 	lds	r30, 0x10A9	; 0x8010a9 <__flp>
    6fce:	f0 91 aa 10 	lds	r31, 0x10AA	; 0x8010aa <__flp+0x1>
    6fd2:	30 e0       	ldi	r19, 0x00	; 0
    6fd4:	20 e0       	ldi	r18, 0x00	; 0


void *
malloc(size_t len)
{
	struct __freelist *fp1, *fp2, *sfp1=NULL, *sfp2=NULL;
    6fd6:	70 e0       	ldi	r23, 0x00	; 0
    6fd8:	60 e0       	ldi	r22, 0x00	; 0
    6fda:	d0 e0       	ldi	r29, 0x00	; 0
    6fdc:	c0 e0       	ldi	r28, 0x00	; 0
	 * would match exactly.  If we found one, we are done.  While
	 * walking, note down the smallest chunk we found that would
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
    6fde:	b0 e0       	ldi	r27, 0x00	; 0
    6fe0:	a0 e0       	ldi	r26, 0x00	; 0
    6fe2:	30 97       	sbiw	r30, 0x00	; 0
    6fe4:	99 f4       	brne	.+38     	; 0x700c <malloc+0x54>
	 * difference between the requested size and the size of the
	 * chunk found is large enough for another freelist entry; if
	 * not, just enlarge the request size to what we have found,
	 * and use the entire chunk.
	 */
	if (s) {
    6fe6:	21 15       	cp	r18, r1
    6fe8:	31 05       	cpc	r19, r1
    6fea:	09 f4       	brne	.+2      	; 0x6fee <malloc+0x36>
    6fec:	4a c0       	rjmp	.+148    	; 0x7082 <malloc+0xca>
		if (s - len < sizeof(struct __freelist)) {
    6fee:	28 1b       	sub	r18, r24
    6ff0:	39 0b       	sbc	r19, r25
    6ff2:	24 30       	cpi	r18, 0x04	; 4
    6ff4:	31 05       	cpc	r19, r1
    6ff6:	d8 f5       	brcc	.+118    	; 0x706e <malloc+0xb6>
    6ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    6ffa:	9b 81       	ldd	r25, Y+3	; 0x03
			/* Disconnect it from freelist and return it. */
			if (sfp2)
    6ffc:	61 15       	cp	r22, r1
    6ffe:	71 05       	cpc	r23, r1
    7000:	89 f1       	breq	.+98     	; 0x7064 <malloc+0xac>
				sfp2->nx = sfp1->nx;
    7002:	fb 01       	movw	r30, r22
    7004:	93 83       	std	Z+3, r25	; 0x03
    7006:	82 83       	std	Z+2, r24	; 0x02
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    7008:	fe 01       	movw	r30, r28
    700a:	11 c0       	rjmp	.+34     	; 0x702e <malloc+0x76>
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1->sz < len)
    700c:	40 81       	ld	r20, Z
    700e:	51 81       	ldd	r21, Z+1	; 0x01
    7010:	02 81       	ldd	r16, Z+2	; 0x02
    7012:	13 81       	ldd	r17, Z+3	; 0x03
    7014:	48 17       	cp	r20, r24
    7016:	59 07       	cpc	r21, r25
    7018:	e0 f0       	brcs	.+56     	; 0x7052 <malloc+0x9a>
			continue;
		if (fp1->sz == len) {
    701a:	48 17       	cp	r20, r24
    701c:	59 07       	cpc	r21, r25
    701e:	99 f4       	brne	.+38     	; 0x7046 <malloc+0x8e>
			/*
			 * Found it.  Disconnect the chunk from the
			 * freelist, and return it.
			 */
			if (fp2)
    7020:	10 97       	sbiw	r26, 0x00	; 0
    7022:	61 f0       	breq	.+24     	; 0x703c <malloc+0x84>
				fp2->nx = fp1->nx;
    7024:	12 96       	adiw	r26, 0x02	; 2
    7026:	0c 93       	st	X, r16
    7028:	12 97       	sbiw	r26, 0x02	; 2
    702a:	13 96       	adiw	r26, 0x03	; 3
    702c:	1c 93       	st	X, r17
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
			return &(sfp1->nx);
    702e:	32 96       	adiw	r30, 0x02	; 2
	}
	/*
	 * Step 4: There's no help, just fail. :-/
	 */
	return 0;
}
    7030:	cf 01       	movw	r24, r30
    7032:	df 91       	pop	r29
    7034:	cf 91       	pop	r28
    7036:	1f 91       	pop	r17
    7038:	0f 91       	pop	r16
    703a:	08 95       	ret
			 * freelist, and return it.
			 */
			if (fp2)
				fp2->nx = fp1->nx;
			else
				__flp = fp1->nx;
    703c:	00 93 a9 10 	sts	0x10A9, r16	; 0x8010a9 <__flp>
    7040:	10 93 aa 10 	sts	0x10AA, r17	; 0x8010aa <__flp+0x1>
    7044:	f4 cf       	rjmp	.-24     	; 0x702e <malloc+0x76>
			return &(fp1->nx);
		}
		else {
			if (s == 0 || fp1->sz < s) {
    7046:	21 15       	cp	r18, r1
    7048:	31 05       	cpc	r19, r1
    704a:	51 f0       	breq	.+20     	; 0x7060 <malloc+0xa8>
    704c:	42 17       	cp	r20, r18
    704e:	53 07       	cpc	r21, r19
    7050:	38 f0       	brcs	.+14     	; 0x7060 <malloc+0xa8>
    7052:	a9 01       	movw	r20, r18
    7054:	db 01       	movw	r26, r22
	 * still fit the request -- we need it for step 2.
	 *
	 */
	for (s = 0, fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    7056:	9a 01       	movw	r18, r20
    7058:	bd 01       	movw	r22, r26
    705a:	df 01       	movw	r26, r30
    705c:	f8 01       	movw	r30, r16
    705e:	c1 cf       	rjmp	.-126    	; 0x6fe2 <malloc+0x2a>
    7060:	ef 01       	movw	r28, r30
    7062:	f9 cf       	rjmp	.-14     	; 0x7056 <malloc+0x9e>
		if (s - len < sizeof(struct __freelist)) {
			/* Disconnect it from freelist and return it. */
			if (sfp2)
				sfp2->nx = sfp1->nx;
			else
				__flp = sfp1->nx;
    7064:	90 93 aa 10 	sts	0x10AA, r25	; 0x8010aa <__flp+0x1>
    7068:	80 93 a9 10 	sts	0x10A9, r24	; 0x8010a9 <__flp>
    706c:	cd cf       	rjmp	.-102    	; 0x7008 <malloc+0x50>
		 */
		cp = (char *)sfp1;
		s -= len;
		cp += s;
		sfp2 = (struct __freelist *)cp;
		sfp2->sz = len;
    706e:	fe 01       	movw	r30, r28
    7070:	e2 0f       	add	r30, r18
    7072:	f3 1f       	adc	r31, r19
    7074:	81 93       	st	Z+, r24
    7076:	91 93       	st	Z+, r25
		sfp1->sz = s - sizeof(size_t);
    7078:	22 50       	subi	r18, 0x02	; 2
    707a:	31 09       	sbc	r19, r1
    707c:	39 83       	std	Y+1, r19	; 0x01
    707e:	28 83       	st	Y, r18
		return &(sfp2->nx);
    7080:	d7 cf       	rjmp	.-82     	; 0x7030 <malloc+0x78>
	 * Under Unix, the "break value" was the end of the data
	 * segment as dynamically requested from the operating system.
	 * Since we don't have an operating system, just make sure
	 * that we don't collide with the stack.
	 */
	if (__brkval == 0)
    7082:	20 91 1c 10 	lds	r18, 0x101C	; 0x80101c <__brkval>
    7086:	30 91 1d 10 	lds	r19, 0x101D	; 0x80101d <__brkval+0x1>
    708a:	23 2b       	or	r18, r19
    708c:	41 f4       	brne	.+16     	; 0x709e <malloc+0xe6>
		__brkval = __malloc_heap_start;
    708e:	20 91 0c 01 	lds	r18, 0x010C	; 0x80010c <__malloc_heap_start>
    7092:	30 91 0d 01 	lds	r19, 0x010D	; 0x80010d <__malloc_heap_start+0x1>
    7096:	30 93 1d 10 	sts	0x101D, r19	; 0x80101d <__brkval+0x1>
    709a:	20 93 1c 10 	sts	0x101C, r18	; 0x80101c <__brkval>
	cp = __malloc_heap_end;
    709e:	20 91 0a 01 	lds	r18, 0x010A	; 0x80010a <__malloc_heap_end>
    70a2:	30 91 0b 01 	lds	r19, 0x010B	; 0x80010b <__malloc_heap_end+0x1>
	if (cp == 0)
    70a6:	21 15       	cp	r18, r1
    70a8:	31 05       	cpc	r19, r1
    70aa:	41 f4       	brne	.+16     	; 0x70bc <malloc+0x104>
		cp = STACK_POINTER() - __malloc_margin;
    70ac:	2d b7       	in	r18, 0x3d	; 61
    70ae:	3e b7       	in	r19, 0x3e	; 62
    70b0:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    70b4:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    70b8:	24 1b       	sub	r18, r20
    70ba:	35 0b       	sbc	r19, r21
	if (cp <= __brkval)
    70bc:	e0 91 1c 10 	lds	r30, 0x101C	; 0x80101c <__brkval>
    70c0:	f0 91 1d 10 	lds	r31, 0x101D	; 0x80101d <__brkval+0x1>
    70c4:	e2 17       	cp	r30, r18
    70c6:	f3 07       	cpc	r31, r19
    70c8:	a0 f4       	brcc	.+40     	; 0x70f2 <malloc+0x13a>
	  /*
	   * Memory exhausted.
	   */
	  return 0;
	avail = cp - __brkval;
    70ca:	2e 1b       	sub	r18, r30
    70cc:	3f 0b       	sbc	r19, r31
	/*
	 * Both tests below are needed to catch the case len >= 0xfffe.
	 */
	if (avail >= len && avail >= len + sizeof(size_t)) {
    70ce:	28 17       	cp	r18, r24
    70d0:	39 07       	cpc	r19, r25
    70d2:	78 f0       	brcs	.+30     	; 0x70f2 <malloc+0x13a>
    70d4:	ac 01       	movw	r20, r24
    70d6:	4e 5f       	subi	r20, 0xFE	; 254
    70d8:	5f 4f       	sbci	r21, 0xFF	; 255
    70da:	24 17       	cp	r18, r20
    70dc:	35 07       	cpc	r19, r21
    70de:	48 f0       	brcs	.+18     	; 0x70f2 <malloc+0x13a>
		fp1 = (struct __freelist *)__brkval;
		__brkval += len + sizeof(size_t);
    70e0:	4e 0f       	add	r20, r30
    70e2:	5f 1f       	adc	r21, r31
    70e4:	50 93 1d 10 	sts	0x101D, r21	; 0x80101d <__brkval+0x1>
    70e8:	40 93 1c 10 	sts	0x101C, r20	; 0x80101c <__brkval>
		//__brkval_maximum = __brkval;
		fp1->sz = len;
    70ec:	81 93       	st	Z+, r24
    70ee:	91 93       	st	Z+, r25
		return &(fp1->nx);
    70f0:	9f cf       	rjmp	.-194    	; 0x7030 <malloc+0x78>
		cp = STACK_POINTER() - __malloc_margin;
	if (cp <= __brkval)
	  /*
	   * Memory exhausted.
	   */
	  return 0;
    70f2:	f0 e0       	ldi	r31, 0x00	; 0
    70f4:	e0 e0       	ldi	r30, 0x00	; 0
    70f6:	9c cf       	rjmp	.-200    	; 0x7030 <malloc+0x78>

000070f8 <free>:
}


void
free(void *p)
{
    70f8:	cf 93       	push	r28
    70fa:	df 93       	push	r29
	struct __freelist *fp1, *fp2, *fpnew;
	char *cp1, *cp2, *cpnew;

	/* ISO C says free(NULL) must be a no-op */
	if (p == 0)
    70fc:	00 97       	sbiw	r24, 0x00	; 0
    70fe:	e9 f0       	breq	.+58     	; 0x713a <free+0x42>
		return;

	cpnew = p;
	cpnew -= sizeof(size_t);
    7100:	fc 01       	movw	r30, r24
    7102:	32 97       	sbiw	r30, 0x02	; 2
	fpnew = (struct __freelist *)cpnew;
	fpnew->nx = 0;
    7104:	13 82       	std	Z+3, r1	; 0x03
    7106:	12 82       	std	Z+2, r1	; 0x02
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    7108:	a0 91 a9 10 	lds	r26, 0x10A9	; 0x8010a9 <__flp>
    710c:	b0 91 aa 10 	lds	r27, 0x10AA	; 0x8010aa <__flp+0x1>
    7110:	ed 01       	movw	r28, r26
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    7112:	30 e0       	ldi	r19, 0x00	; 0
    7114:	20 e0       	ldi	r18, 0x00	; 0
	/*
	 * Trivial case first: if there's no freelist yet, our entry
	 * will be the only one on it.  If this is the last entry, we
	 * can reduce __brkval instead.
	 */
	if (__flp == 0) {
    7116:	10 97       	sbiw	r26, 0x00	; 0
    7118:	a1 f4       	brne	.+40     	; 0x7142 <free+0x4a>
		if ((char *)p + fpnew->sz == __brkval)
    711a:	20 81       	ld	r18, Z
    711c:	31 81       	ldd	r19, Z+1	; 0x01
    711e:	82 0f       	add	r24, r18
    7120:	93 1f       	adc	r25, r19
    7122:	20 91 1c 10 	lds	r18, 0x101C	; 0x80101c <__brkval>
    7126:	30 91 1d 10 	lds	r19, 0x101D	; 0x80101d <__brkval+0x1>
    712a:	28 17       	cp	r18, r24
    712c:	39 07       	cpc	r19, r25
    712e:	09 f0       	breq	.+2      	; 0x7132 <free+0x3a>
    7130:	61 c0       	rjmp	.+194    	; 0x71f4 <free+0xfc>
			__brkval = cpnew;
    7132:	f0 93 1d 10 	sts	0x101D, r31	; 0x80101d <__brkval+0x1>
    7136:	e0 93 1c 10 	sts	0x101C, r30	; 0x80101c <__brkval>
			__flp = NULL;
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
	}
}
    713a:	df 91       	pop	r29
    713c:	cf 91       	pop	r28
    713e:	08 95       	ret
    7140:	ea 01       	movw	r28, r20
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
    7142:	ce 17       	cp	r28, r30
    7144:	df 07       	cpc	r29, r31
    7146:	e8 f5       	brcc	.+122    	; 0x71c2 <free+0xca>
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
    7148:	4a 81       	ldd	r20, Y+2	; 0x02
    714a:	5b 81       	ldd	r21, Y+3	; 0x03
    714c:	9e 01       	movw	r18, r28
	/*
	 * Now, find the position where our new entry belongs onto the
	 * freelist.  Try to aggregate the chunk with adjacent chunks
	 * if possible.
	 */
	for (fp1 = __flp, fp2 = 0;
    714e:	41 15       	cp	r20, r1
    7150:	51 05       	cpc	r21, r1
    7152:	b1 f7       	brne	.-20     	; 0x7140 <free+0x48>
	 * Note that we get here either if we hit the "break" above,
	 * or if we fell off the end of the loop.  The latter means
	 * we've got a new topmost chunk.  Either way, try aggregating
	 * with the lower chunk if possible.
	 */
	fp2->nx = fpnew;
    7154:	e9 01       	movw	r28, r18
    7156:	fb 83       	std	Y+3, r31	; 0x03
    7158:	ea 83       	std	Y+2, r30	; 0x02
	cp2 = (char *)&(fp2->nx);
	if (cp2 + fp2->sz == cpnew) {
    715a:	49 91       	ld	r20, Y+
    715c:	59 91       	ld	r21, Y+
    715e:	c4 0f       	add	r28, r20
    7160:	d5 1f       	adc	r29, r21
    7162:	ec 17       	cp	r30, r28
    7164:	fd 07       	cpc	r31, r29
    7166:	61 f4       	brne	.+24     	; 0x7180 <free+0x88>
		/* lower junk adjacent, merge */
		fp2->sz += fpnew->sz + sizeof(size_t);
    7168:	80 81       	ld	r24, Z
    716a:	91 81       	ldd	r25, Z+1	; 0x01
    716c:	02 96       	adiw	r24, 0x02	; 2
    716e:	84 0f       	add	r24, r20
    7170:	95 1f       	adc	r25, r21
    7172:	e9 01       	movw	r28, r18
    7174:	99 83       	std	Y+1, r25	; 0x01
    7176:	88 83       	st	Y, r24
		fp2->nx = fpnew->nx;
    7178:	82 81       	ldd	r24, Z+2	; 0x02
    717a:	93 81       	ldd	r25, Z+3	; 0x03
    717c:	9b 83       	std	Y+3, r25	; 0x03
    717e:	8a 83       	std	Y+2, r24	; 0x02
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    7180:	f0 e0       	ldi	r31, 0x00	; 0
    7182:	e0 e0       	ldi	r30, 0x00	; 0
	     fp1->nx != 0;
    7184:	12 96       	adiw	r26, 0x02	; 2
    7186:	8d 91       	ld	r24, X+
    7188:	9c 91       	ld	r25, X
    718a:	13 97       	sbiw	r26, 0x03	; 3
		fp2->nx = fpnew->nx;
	}
	/*
	 * If there's a new topmost chunk, lower __brkval instead.
	 */
	for (fp1 = __flp, fp2 = 0;
    718c:	00 97       	sbiw	r24, 0x00	; 0
    718e:	b9 f5       	brne	.+110    	; 0x71fe <free+0x106>
	     fp1->nx != 0;
	     fp2 = fp1, fp1 = fp1->nx)
		/* advance to entry just before end of list */;
	cp2 = (char *)&(fp1->nx);
	if (cp2 + fp1->sz == __brkval) {
    7190:	2d 91       	ld	r18, X+
    7192:	3c 91       	ld	r19, X
    7194:	11 97       	sbiw	r26, 0x01	; 1
    7196:	cd 01       	movw	r24, r26
    7198:	02 96       	adiw	r24, 0x02	; 2
    719a:	82 0f       	add	r24, r18
    719c:	93 1f       	adc	r25, r19
    719e:	20 91 1c 10 	lds	r18, 0x101C	; 0x80101c <__brkval>
    71a2:	30 91 1d 10 	lds	r19, 0x101D	; 0x80101d <__brkval+0x1>
    71a6:	28 17       	cp	r18, r24
    71a8:	39 07       	cpc	r19, r25
    71aa:	39 f6       	brne	.-114    	; 0x713a <free+0x42>
		if (fp2 == NULL)
    71ac:	30 97       	sbiw	r30, 0x00	; 0
    71ae:	51 f5       	brne	.+84     	; 0x7204 <free+0x10c>
			/* Freelist is empty now. */
			__flp = NULL;
    71b0:	10 92 aa 10 	sts	0x10AA, r1	; 0x8010aa <__flp+0x1>
    71b4:	10 92 a9 10 	sts	0x10A9, r1	; 0x8010a9 <__flp>
		else
			fp2->nx = NULL;
		__brkval = cp2 - sizeof(size_t);
    71b8:	b0 93 1d 10 	sts	0x101D, r27	; 0x80101d <__brkval+0x1>
    71bc:	a0 93 1c 10 	sts	0x101C, r26	; 0x80101c <__brkval>
    71c0:	bc cf       	rjmp	.-136    	; 0x713a <free+0x42>
	     fp1;
	     fp2 = fp1, fp1 = fp1->nx) {
		if (fp1 < fpnew)
			continue;
		cp1 = (char *)fp1;
		fpnew->nx = fp1;
    71c2:	d3 83       	std	Z+3, r29	; 0x03
    71c4:	c2 83       	std	Z+2, r28	; 0x02
		if ((char *)&(fpnew->nx) + fpnew->sz == cp1) {
    71c6:	40 81       	ld	r20, Z
    71c8:	51 81       	ldd	r21, Z+1	; 0x01
    71ca:	84 0f       	add	r24, r20
    71cc:	95 1f       	adc	r25, r21
    71ce:	c8 17       	cp	r28, r24
    71d0:	d9 07       	cpc	r29, r25
    71d2:	61 f4       	brne	.+24     	; 0x71ec <free+0xf4>
			/* upper chunk adjacent, assimilate it */
			fpnew->sz += fp1->sz + sizeof(size_t);
    71d4:	4e 5f       	subi	r20, 0xFE	; 254
    71d6:	5f 4f       	sbci	r21, 0xFF	; 255
    71d8:	88 81       	ld	r24, Y
    71da:	99 81       	ldd	r25, Y+1	; 0x01
    71dc:	48 0f       	add	r20, r24
    71de:	59 1f       	adc	r21, r25
    71e0:	51 83       	std	Z+1, r21	; 0x01
    71e2:	40 83       	st	Z, r20
			fpnew->nx = fp1->nx;
    71e4:	8a 81       	ldd	r24, Y+2	; 0x02
    71e6:	9b 81       	ldd	r25, Y+3	; 0x03
    71e8:	93 83       	std	Z+3, r25	; 0x03
    71ea:	82 83       	std	Z+2, r24	; 0x02
		}
		if (fp2 == 0) {
    71ec:	21 15       	cp	r18, r1
    71ee:	31 05       	cpc	r19, r1
    71f0:	09 f0       	breq	.+2      	; 0x71f4 <free+0xfc>
    71f2:	b0 cf       	rjmp	.-160    	; 0x7154 <free+0x5c>
			/* new head of freelist */
			__flp = fpnew;
    71f4:	f0 93 aa 10 	sts	0x10AA, r31	; 0x8010aa <__flp+0x1>
    71f8:	e0 93 a9 10 	sts	0x10A9, r30	; 0x8010a9 <__flp>
			return;
    71fc:	9e cf       	rjmp	.-196    	; 0x713a <free+0x42>
    71fe:	fd 01       	movw	r30, r26
    7200:	dc 01       	movw	r26, r24
    7202:	c0 cf       	rjmp	.-128    	; 0x7184 <free+0x8c>
	if (cp2 + fp1->sz == __brkval) {
		if (fp2 == NULL)
			/* Freelist is empty now. */
			__flp = NULL;
		else
			fp2->nx = NULL;
    7204:	13 82       	std	Z+3, r1	; 0x03
    7206:	12 82       	std	Z+2, r1	; 0x02
    7208:	d7 cf       	rjmp	.-82     	; 0x71b8 <free+0xc0>

0000720a <realloc>:



void *
realloc(void *ptr, size_t len)
{
    720a:	4f 92       	push	r4
    720c:	5f 92       	push	r5
    720e:	6f 92       	push	r6
    7210:	7f 92       	push	r7
    7212:	8f 92       	push	r8
    7214:	9f 92       	push	r9
    7216:	af 92       	push	r10
    7218:	bf 92       	push	r11
    721a:	cf 92       	push	r12
    721c:	df 92       	push	r13
    721e:	ef 92       	push	r14
    7220:	ff 92       	push	r15
    7222:	0f 93       	push	r16
    7224:	1f 93       	push	r17
    7226:	cf 93       	push	r28
    7228:	df 93       	push	r29
    722a:	8c 01       	movw	r16, r24
	char *cp, *cp1;
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
    722c:	00 97       	sbiw	r24, 0x00	; 0
    722e:	91 f4       	brne	.+36     	; 0x7254 <realloc+0x4a>
		return malloc(len);
    7230:	cb 01       	movw	r24, r22
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    7232:	df 91       	pop	r29
    7234:	cf 91       	pop	r28
    7236:	1f 91       	pop	r17
    7238:	0f 91       	pop	r16
    723a:	ff 90       	pop	r15
    723c:	ef 90       	pop	r14
    723e:	df 90       	pop	r13
    7240:	cf 90       	pop	r12
    7242:	bf 90       	pop	r11
    7244:	af 90       	pop	r10
    7246:	9f 90       	pop	r9
    7248:	8f 90       	pop	r8
    724a:	7f 90       	pop	r7
    724c:	6f 90       	pop	r6
    724e:	5f 90       	pop	r5
    7250:	4f 90       	pop	r4
	void *memp;
	size_t s, incr;

	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);
    7252:	b2 ce       	rjmp	.-668    	; 0x6fb8 <malloc>

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
    7254:	fc 01       	movw	r30, r24
    7256:	e6 0f       	add	r30, r22
    7258:	f7 1f       	adc	r31, r23
	/* Trivial case, required by C standard. */
	if (ptr == 0)
		return malloc(len);

	cp1 = (char *)ptr;
	cp1 -= sizeof(size_t);
    725a:	9c 01       	movw	r18, r24
    725c:	22 50       	subi	r18, 0x02	; 2
    725e:	31 09       	sbc	r19, r1
	fp1 = (struct __freelist *)cp1;

	cp = (char *)ptr + len; /* new next pointer */
	if (cp < cp1)
    7260:	e2 17       	cp	r30, r18
    7262:	f3 07       	cpc	r31, r19
    7264:	08 f4       	brcc	.+2      	; 0x7268 <realloc+0x5e>
    7266:	a5 c0       	rjmp	.+330    	; 0x73b2 <realloc+0x1a8>
	 * we split off a chunk for the released portion, and call
	 * free() on it.  Therefore, we can only shrink if the new
	 * size is at least sizeof(struct __freelist) smaller than the
	 * previous size.
	 */
	if (len <= fp1->sz) {
    7268:	d9 01       	movw	r26, r18
    726a:	cd 91       	ld	r28, X+
    726c:	dc 91       	ld	r29, X
    726e:	11 97       	sbiw	r26, 0x01	; 1
    7270:	c6 17       	cp	r28, r22
    7272:	d7 07       	cpc	r29, r23
    7274:	18 f1       	brcs	.+70     	; 0x72bc <realloc+0xb2>
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    7276:	c5 30       	cpi	r28, 0x05	; 5
    7278:	d1 05       	cpc	r29, r1
    727a:	70 f0       	brcs	.+28     	; 0x7298 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
    727c:	ce 01       	movw	r24, r28
    727e:	04 97       	sbiw	r24, 0x04	; 4
	 * previous size.
	 */
	if (len <= fp1->sz) {
		/* The first test catches a possible unsigned int
		 * rollover condition. */
		if (fp1->sz <= sizeof(struct __freelist) ||
    7280:	86 17       	cp	r24, r22
    7282:	97 07       	cpc	r25, r23
    7284:	48 f0       	brcs	.+18     	; 0x7298 <realloc+0x8e>
		    len > fp1->sz - sizeof(struct __freelist))
			return ptr;
		fp2 = (struct __freelist *)cp;
		fp2->sz = fp1->sz - len - sizeof(size_t);
    7286:	c6 1b       	sub	r28, r22
    7288:	d7 0b       	sbc	r29, r23
    728a:	22 97       	sbiw	r28, 0x02	; 2
    728c:	c1 93       	st	Z+, r28
    728e:	d1 93       	st	Z+, r29
		fp1->sz = len;
    7290:	6d 93       	st	X+, r22
    7292:	7c 93       	st	X, r23
		free(&(fp2->nx));
    7294:	cf 01       	movw	r24, r30
    7296:	30 df       	rcall	.-416    	; 0x70f8 <free>
	if ((memp = malloc(len)) == 0)
		return 0;
	memcpy(memp, ptr, fp1->sz);
	free(ptr);
	return memp;
}
    7298:	c8 01       	movw	r24, r16
    729a:	df 91       	pop	r29
    729c:	cf 91       	pop	r28
    729e:	1f 91       	pop	r17
    72a0:	0f 91       	pop	r16
    72a2:	ff 90       	pop	r15
    72a4:	ef 90       	pop	r14
    72a6:	df 90       	pop	r13
    72a8:	cf 90       	pop	r12
    72aa:	bf 90       	pop	r11
    72ac:	af 90       	pop	r10
    72ae:	9f 90       	pop	r9
    72b0:	8f 90       	pop	r8
    72b2:	7f 90       	pop	r7
    72b4:	6f 90       	pop	r6
    72b6:	5f 90       	pop	r5
    72b8:	4f 90       	pop	r4
    72ba:	08 95       	ret

	/*
	 * If we get here, we are growing.  First, see whether there
	 * is space in the free list on top of our current chunk.
	 */
	incr = len - fp1->sz;
    72bc:	5b 01       	movw	r10, r22
    72be:	ac 1a       	sub	r10, r28
    72c0:	bd 0a       	sbc	r11, r29
	cp = (char *)ptr + fp1->sz;
    72c2:	4c 01       	movw	r8, r24
    72c4:	8c 0e       	add	r8, r28
    72c6:	9d 1e       	adc	r9, r29
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
    72c8:	a0 91 a9 10 	lds	r26, 0x10A9	; 0x8010a9 <__flp>
    72cc:	b0 91 aa 10 	lds	r27, 0x10AA	; 0x8010aa <__flp+0x1>
    72d0:	51 2c       	mov	r5, r1
    72d2:	41 2c       	mov	r4, r1
    72d4:	f1 2c       	mov	r15, r1
    72d6:	e1 2c       	mov	r14, r1
    72d8:	10 97       	sbiw	r26, 0x00	; 0
    72da:	01 f5       	brne	.+64     	; 0x731c <realloc+0x112>
	 * large enough chunk on the freelist that could be re-used
	 * (by a call to malloc() below), quickly extend the
	 * allocation area if possible, without need to copy the old
	 * data.
	 */
	if (__brkval == (char *)ptr + fp1->sz && len > s) {
    72dc:	80 91 1c 10 	lds	r24, 0x101C	; 0x80101c <__brkval>
    72e0:	90 91 1d 10 	lds	r25, 0x101D	; 0x80101d <__brkval+0x1>
    72e4:	88 15       	cp	r24, r8
    72e6:	99 05       	cpc	r25, r9
    72e8:	09 f0       	breq	.+2      	; 0x72ec <realloc+0xe2>
    72ea:	56 c0       	rjmp	.+172    	; 0x7398 <realloc+0x18e>
    72ec:	46 16       	cp	r4, r22
    72ee:	57 06       	cpc	r5, r23
    72f0:	08 f0       	brcs	.+2      	; 0x72f4 <realloc+0xea>
    72f2:	52 c0       	rjmp	.+164    	; 0x7398 <realloc+0x18e>
		cp = (char *)ptr + len;
		cp1 = STACK_POINTER() - __malloc_margin;
    72f4:	8d b7       	in	r24, 0x3d	; 61
    72f6:	9e b7       	in	r25, 0x3e	; 62
    72f8:	40 91 0e 01 	lds	r20, 0x010E	; 0x80010e <__malloc_margin>
    72fc:	50 91 0f 01 	lds	r21, 0x010F	; 0x80010f <__malloc_margin+0x1>
    7300:	84 1b       	sub	r24, r20
    7302:	95 0b       	sbc	r25, r21
		if (cp < cp1) {
    7304:	e8 17       	cp	r30, r24
    7306:	f9 07       	cpc	r31, r25
    7308:	08 f0       	brcs	.+2      	; 0x730c <realloc+0x102>
    730a:	53 c0       	rjmp	.+166    	; 0x73b2 <realloc+0x1a8>
			__brkval = cp;
    730c:	f0 93 1d 10 	sts	0x101D, r31	; 0x80101d <__brkval+0x1>
    7310:	e0 93 1c 10 	sts	0x101C, r30	; 0x80101c <__brkval>
			//__brkval_maximum = cp;
			fp1->sz = len;
    7314:	f9 01       	movw	r30, r18
    7316:	71 83       	std	Z+1, r23	; 0x01
    7318:	60 83       	st	Z, r22
			return ptr;
    731a:	be cf       	rjmp	.-132    	; 0x7298 <realloc+0x8e>
    731c:	8d 91       	ld	r24, X+
    731e:	9c 91       	ld	r25, X
    7320:	11 97       	sbiw	r26, 0x01	; 1
    7322:	12 96       	adiw	r26, 0x02	; 2
    7324:	6c 90       	ld	r6, X
    7326:	12 97       	sbiw	r26, 0x02	; 2
    7328:	13 96       	adiw	r26, 0x03	; 3
    732a:	7c 90       	ld	r7, X
    732c:	13 97       	sbiw	r26, 0x03	; 3
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
		if (fp3 == fp2 && fp3->sz + sizeof(size_t) >= incr) {
    732e:	a8 15       	cp	r26, r8
    7330:	b9 05       	cpc	r27, r9
    7332:	59 f5       	brne	.+86     	; 0x738a <realloc+0x180>
    7334:	6c 01       	movw	r12, r24
    7336:	42 e0       	ldi	r20, 0x02	; 2
    7338:	c4 0e       	add	r12, r20
    733a:	d1 1c       	adc	r13, r1
    733c:	ca 14       	cp	r12, r10
    733e:	db 04       	cpc	r13, r11
    7340:	20 f1       	brcs	.+72     	; 0x738a <realloc+0x180>
			/* found something that fits */
			if (fp3->sz + sizeof(size_t) - incr > sizeof(struct __freelist)) {
    7342:	ac 01       	movw	r20, r24
    7344:	4a 19       	sub	r20, r10
    7346:	5b 09       	sbc	r21, r11
    7348:	da 01       	movw	r26, r20
    734a:	12 96       	adiw	r26, 0x02	; 2
    734c:	15 97       	sbiw	r26, 0x05	; 5
    734e:	80 f0       	brcs	.+32     	; 0x7370 <realloc+0x166>
				/* split off a new freelist entry */
				cp = (char *)ptr + len;
				fp2 = (struct __freelist *)cp;
				fp2->nx = fp3->nx;
    7350:	62 82       	std	Z+2, r6	; 0x02
    7352:	73 82       	std	Z+3, r7	; 0x03
				fp2->sz = fp3->sz - incr;
    7354:	51 83       	std	Z+1, r21	; 0x01
    7356:	40 83       	st	Z, r20
				fp1->sz = len;
    7358:	d9 01       	movw	r26, r18
    735a:	6d 93       	st	X+, r22
    735c:	7c 93       	st	X, r23
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
				fp2 = fp3->nx;
			}
			if (ofp3)
    735e:	e1 14       	cp	r14, r1
    7360:	f1 04       	cpc	r15, r1
    7362:	71 f0       	breq	.+28     	; 0x7380 <realloc+0x176>
				ofp3->nx = fp2;
    7364:	d7 01       	movw	r26, r14
    7366:	13 96       	adiw	r26, 0x03	; 3
    7368:	fc 93       	st	X, r31
    736a:	ee 93       	st	-X, r30
    736c:	12 97       	sbiw	r26, 0x02	; 2
    736e:	94 cf       	rjmp	.-216    	; 0x7298 <realloc+0x8e>
				fp2->nx = fp3->nx;
				fp2->sz = fp3->sz - incr;
				fp1->sz = len;
			} else {
				/* it just fits, so use it entirely */
				fp1->sz += fp3->sz + sizeof(size_t);
    7370:	22 96       	adiw	r28, 0x02	; 2
    7372:	8c 0f       	add	r24, r28
    7374:	9d 1f       	adc	r25, r29
    7376:	f9 01       	movw	r30, r18
    7378:	91 83       	std	Z+1, r25	; 0x01
    737a:	80 83       	st	Z, r24
				fp2 = fp3->nx;
    737c:	f3 01       	movw	r30, r6
    737e:	ef cf       	rjmp	.-34     	; 0x735e <realloc+0x154>
			}
			if (ofp3)
				ofp3->nx = fp2;
			else
				__flp = fp2;
    7380:	f0 93 aa 10 	sts	0x10AA, r31	; 0x8010aa <__flp+0x1>
    7384:	e0 93 a9 10 	sts	0x10A9, r30	; 0x8010a9 <__flp>
    7388:	87 cf       	rjmp	.-242    	; 0x7298 <realloc+0x8e>
    738a:	48 16       	cp	r4, r24
    738c:	59 06       	cpc	r5, r25
    738e:	08 f4       	brcc	.+2      	; 0x7392 <realloc+0x188>
    7390:	2c 01       	movw	r4, r24
	incr = len - fp1->sz;
	cp = (char *)ptr + fp1->sz;
	fp2 = (struct __freelist *)cp;
	for (s = 0, ofp3 = 0, fp3 = __flp;
	     fp3;
	     ofp3 = fp3, fp3 = fp3->nx) {
    7392:	7d 01       	movw	r14, r26
    7394:	d3 01       	movw	r26, r6

	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
    7396:	a0 cf       	rjmp	.-192    	; 0x72d8 <realloc+0xce>
    7398:	cb 01       	movw	r24, r22
    739a:	0e de       	rcall	.-996    	; 0x6fb8 <malloc>
    739c:	7c 01       	movw	r14, r24
    739e:	00 97       	sbiw	r24, 0x00	; 0
    73a0:	41 f0       	breq	.+16     	; 0x73b2 <realloc+0x1a8>
		return 0;
	memcpy(memp, ptr, fp1->sz);
    73a2:	ae 01       	movw	r20, r28
    73a4:	b8 01       	movw	r22, r16
    73a6:	0e 94 0b 46 	call	0x8c16	; 0x8c16 <memcpy>
	free(ptr);
    73aa:	c8 01       	movw	r24, r16
    73ac:	a5 de       	rcall	.-694    	; 0x70f8 <free>
	return memp;
    73ae:	87 01       	movw	r16, r14
    73b0:	73 cf       	rjmp	.-282    	; 0x7298 <realloc+0x8e>
	/*
	 * Call malloc() for a new chunk, then copy over the data, and
	 * release the old region.
	 */
	if ((memp = malloc(len)) == 0)
		return 0;
    73b2:	10 e0       	ldi	r17, 0x00	; 0
    73b4:	00 e0       	ldi	r16, 0x00	; 0
    73b6:	70 cf       	rjmp	.-288    	; 0x7298 <realloc+0x8e>

000073b8 <disable_peripherals>:
uint8_t _shiftIn(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder)
{
	if (bitOrder == LSBFIRST) {
		return shiftIn_lsbFirst(dataPin, clockPin);
	} else {
		return shiftIn_msbFirst(dataPin, clockPin);
    73b8:	1d ba       	out	0x1d, r1	; 29
    73ba:	10 92 68 00 	sts	0x0068, r1	; 0x800068 <__TEXT_REGION_LENGTH__+0x7e0068>
    73be:	1c bc       	out	0x2c, r1	; 44
    73c0:	10 be       	out	0x30, r1	; 48
    73c2:	1f ba       	out	0x1f, r1	; 31
    73c4:	10 92 7a 00 	sts	0x007A, r1	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    73c8:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    73cc:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
    73d0:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
    73d4:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
    73d8:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    73dc:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    73e0:	11 b8       	out	0x01, r1	; 1
    73e2:	14 b8       	out	0x04, r1	; 4
    73e4:	17 b8       	out	0x07, r1	; 7
    73e6:	1a b8       	out	0x0a, r1	; 10
    73e8:	1d b8       	out	0x0d, r1	; 13
    73ea:	10 ba       	out	0x10, r1	; 16
    73ec:	12 b8       	out	0x02, r1	; 2
    73ee:	15 b8       	out	0x05, r1	; 5
    73f0:	18 b8       	out	0x08, r1	; 8
    73f2:	1b b8       	out	0x0b, r1	; 11
    73f4:	1e b8       	out	0x0e, r1	; 14
    73f6:	11 ba       	out	0x11, r1	; 17
    73f8:	08 95       	ret

000073fa <_init_Teensyduino_internal_>:
    73fa:	f8 94       	cli
    73fc:	e1 e6       	ldi	r30, 0x61	; 97
    73fe:	f0 e0       	ldi	r31, 0x00	; 0
    7400:	20 e8       	ldi	r18, 0x80	; 128
    7402:	20 83       	st	Z, r18
    7404:	10 82       	st	Z, r1
    7406:	83 e0       	ldi	r24, 0x03	; 3
    7408:	84 bd       	out	0x24, r24	; 36
    740a:	85 bd       	out	0x25, r24	; 37
    740c:	ee e6       	ldi	r30, 0x6E	; 110
    740e:	f0 e0       	ldi	r31, 0x00	; 0
    7410:	80 81       	ld	r24, Z
    7412:	81 60       	ori	r24, 0x01	; 1
    7414:	80 83       	st	Z, r24
    7416:	91 e0       	ldi	r25, 0x01	; 1
    7418:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    741c:	82 e0       	ldi	r24, 0x02	; 2
    741e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
    7422:	90 93 b0 00 	sts	0x00B0, r25	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7426:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    742a:	90 93 90 00 	sts	0x0090, r25	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    742e:	80 93 91 00 	sts	0x0091, r24	; 0x800091 <__TEXT_REGION_LENGTH__+0x7e0091>
    7432:	86 e8       	ldi	r24, 0x86	; 134
    7434:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    7438:	20 93 7b 00 	sts	0x007B, r18	; 0x80007b <__TEXT_REGION_LENGTH__+0x7e007b>
    743c:	10 92 7e 00 	sts	0x007E, r1	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    7440:	d9 d1       	rcall	.+946    	; 0x77f4 <usb_init>
    7442:	78 94       	sei
    7444:	08 95       	ret

00007446 <analogRead>:
    7446:	9a ed       	ldi	r25, 0xDA	; 218
    7448:	98 0f       	add	r25, r24
    744a:	98 30       	cpi	r25, 0x08	; 8
    744c:	10 f1       	brcs	.+68     	; 0x7492 <analogRead+0x4c>
    744e:	88 30       	cpi	r24, 0x08	; 8
    7450:	60 f4       	brcc	.+24     	; 0x746a <analogRead+0x24>
    7452:	90 91 7e 00 	lds	r25, 0x007E	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    7456:	21 e0       	ldi	r18, 0x01	; 1
    7458:	30 e0       	ldi	r19, 0x00	; 0
    745a:	08 2e       	mov	r0, r24
    745c:	01 c0       	rjmp	.+2      	; 0x7460 <analogRead+0x1a>
    745e:	22 0f       	add	r18, r18
    7460:	0a 94       	dec	r0
    7462:	ea f7       	brpl	.-6      	; 0x745e <analogRead+0x18>
    7464:	92 2b       	or	r25, r18
    7466:	90 93 7e 00 	sts	0x007E, r25	; 0x80007e <__TEXT_REGION_LENGTH__+0x7e007e>
    746a:	8f 71       	andi	r24, 0x1F	; 31
    746c:	90 91 10 01 	lds	r25, 0x0110	; 0x800110 <w_analog_reference>
    7470:	89 2b       	or	r24, r25
    7472:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7e007c>
    7476:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    747a:	80 64       	ori	r24, 0x40	; 64
    747c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    7480:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
    7484:	86 fd       	sbrc	r24, 6
    7486:	fc cf       	rjmp	.-8      	; 0x7480 <analogRead+0x3a>
    7488:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7e0078>
    748c:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7e0079>
    7490:	08 95       	ret
    7492:	89 2f       	mov	r24, r25
    7494:	de cf       	rjmp	.-68     	; 0x7452 <analogRead+0xc>

00007496 <_pinMode_output>:
    7496:	8e 32       	cpi	r24, 0x2E	; 46
    7498:	70 f4       	brcc	.+28     	; 0x74b6 <_pinMode_output+0x20>
    749a:	e8 e3       	ldi	r30, 0x38	; 56
    749c:	f7 e0       	ldi	r31, 0x07	; 7
    749e:	88 0f       	add	r24, r24
    74a0:	e8 0f       	add	r30, r24
    74a2:	f1 1d       	adc	r31, r1
    74a4:	25 91       	lpm	r18, Z+
    74a6:	e4 91       	lpm	r30, Z
    74a8:	f0 e0       	ldi	r31, 0x00	; 0
    74aa:	9f b7       	in	r25, 0x3f	; 63
    74ac:	f8 94       	cli
    74ae:	81 81       	ldd	r24, Z+1	; 0x01
    74b0:	82 2b       	or	r24, r18
    74b2:	81 83       	std	Z+1, r24	; 0x01
    74b4:	9f bf       	out	0x3f, r25	; 63
    74b6:	08 95       	ret

000074b8 <_digitalWrite_HIGH>:
    74b8:	ee 32       	cpi	r30, 0x2E	; 46
    74ba:	50 f4       	brcc	.+20     	; 0x74d0 <_digitalWrite_bailout>
    74bc:	ee 0f       	add	r30, r30
    74be:	e7 59       	subi	r30, 0x97	; 151
    74c0:	f5 4c       	sbci	r31, 0xC5	; 197
    74c2:	09 94       	ijmp

000074c4 <_digitalWrite_LOW>:
    74c4:	ee 32       	cpi	r30, 0x2E	; 46
    74c6:	20 f4       	brcc	.+8      	; 0x74d0 <_digitalWrite_bailout>
    74c8:	ee 0f       	add	r30, r30
    74ca:	eb 53       	subi	r30, 0x3B	; 59
    74cc:	f5 4c       	sbci	r31, 0xC5	; 197
    74ce:	09 94       	ijmp

000074d0 <_digitalWrite_bailout>:
    74d0:	08 95       	ret

000074d2 <_digitalWrite_HIGH_TABLE>:
    74d2:	58 9a       	sbi	0x0b, 0	; 11
    74d4:	b6 c0       	rjmp	.+364    	; 0x7642 <_digitalWrite_OC0B>
    74d6:	59 9a       	sbi	0x0b, 1	; 11
    74d8:	d0 c0       	rjmp	.+416    	; 0x767a <_digitalWrite_OC2B>
    74da:	5a 9a       	sbi	0x0b, 2	; 11
    74dc:	08 95       	ret
    74de:	5b 9a       	sbi	0x0b, 3	; 11
    74e0:	08 95       	ret
    74e2:	5c 9a       	sbi	0x0b, 4	; 11
    74e4:	08 95       	ret
    74e6:	5d 9a       	sbi	0x0b, 5	; 11
    74e8:	08 95       	ret
    74ea:	5e 9a       	sbi	0x0b, 6	; 11
    74ec:	08 95       	ret
    74ee:	5f 9a       	sbi	0x0b, 7	; 11
    74f0:	08 95       	ret
    74f2:	70 9a       	sbi	0x0e, 0	; 14
    74f4:	08 95       	ret
    74f6:	71 9a       	sbi	0x0e, 1	; 14
    74f8:	08 95       	ret
    74fa:	40 9a       	sbi	0x08, 0	; 8
    74fc:	08 95       	ret
    74fe:	41 9a       	sbi	0x08, 1	; 8
    7500:	08 95       	ret
    7502:	42 9a       	sbi	0x08, 2	; 8
    7504:	08 95       	ret
    7506:	43 9a       	sbi	0x08, 3	; 8
    7508:	08 95       	ret
    750a:	44 9a       	sbi	0x08, 4	; 8
    750c:	c8 c0       	rjmp	.+400    	; 0x769e <_digitalWrite_OC3C>
    750e:	45 9a       	sbi	0x08, 5	; 8
    7510:	c0 c0       	rjmp	.+384    	; 0x7692 <_digitalWrite_OC3B>
    7512:	46 9a       	sbi	0x08, 6	; 8
    7514:	b8 c0       	rjmp	.+368    	; 0x7686 <_digitalWrite_OC3A>
    7516:	47 9a       	sbi	0x08, 7	; 8
    7518:	08 95       	ret
    751a:	76 9a       	sbi	0x0e, 6	; 14
    751c:	08 95       	ret
    751e:	77 9a       	sbi	0x0e, 7	; 14
    7520:	08 95       	ret
    7522:	28 9a       	sbi	0x05, 0	; 5
    7524:	08 95       	ret
    7526:	29 9a       	sbi	0x05, 1	; 5
    7528:	08 95       	ret
    752a:	2a 9a       	sbi	0x05, 2	; 5
    752c:	08 95       	ret
    752e:	2b 9a       	sbi	0x05, 3	; 5
    7530:	08 95       	ret
    7532:	2c 9a       	sbi	0x05, 4	; 5
    7534:	9c c0       	rjmp	.+312    	; 0x766e <_digitalWrite_OC2A>
    7536:	2d 9a       	sbi	0x05, 5	; 5
    7538:	88 c0       	rjmp	.+272    	; 0x764a <_digitalWrite_OC1A>
    753a:	2e 9a       	sbi	0x05, 6	; 5
    753c:	8c c0       	rjmp	.+280    	; 0x7656 <_digitalWrite_OC1B>
    753e:	2f 9a       	sbi	0x05, 7	; 5
    7540:	90 c0       	rjmp	.+288    	; 0x7662 <_digitalWrite_OC1C>
    7542:	10 9a       	sbi	0x02, 0	; 2
    7544:	08 95       	ret
    7546:	11 9a       	sbi	0x02, 1	; 2
    7548:	08 95       	ret
    754a:	12 9a       	sbi	0x02, 2	; 2
    754c:	08 95       	ret
    754e:	13 9a       	sbi	0x02, 3	; 2
    7550:	08 95       	ret
    7552:	14 9a       	sbi	0x02, 4	; 2
    7554:	08 95       	ret
    7556:	15 9a       	sbi	0x02, 5	; 2
    7558:	08 95       	ret
    755a:	16 9a       	sbi	0x02, 6	; 2
    755c:	08 95       	ret
    755e:	17 9a       	sbi	0x02, 7	; 2
    7560:	08 95       	ret
    7562:	74 9a       	sbi	0x0e, 4	; 14
    7564:	08 95       	ret
    7566:	75 9a       	sbi	0x0e, 5	; 14
    7568:	08 95       	ret
    756a:	88 9a       	sbi	0x11, 0	; 17
    756c:	08 95       	ret
    756e:	89 9a       	sbi	0x11, 1	; 17
    7570:	08 95       	ret
    7572:	8a 9a       	sbi	0x11, 2	; 17
    7574:	08 95       	ret
    7576:	8b 9a       	sbi	0x11, 3	; 17
    7578:	08 95       	ret
    757a:	8c 9a       	sbi	0x11, 4	; 17
    757c:	08 95       	ret
    757e:	8d 9a       	sbi	0x11, 5	; 17
    7580:	08 95       	ret
    7582:	8e 9a       	sbi	0x11, 6	; 17
    7584:	08 95       	ret
    7586:	8f 9a       	sbi	0x11, 7	; 17
    7588:	08 95       	ret

0000758a <_digitalWrite_LOW_TABLE>:
    758a:	58 98       	cbi	0x0b, 0	; 11
    758c:	5a c0       	rjmp	.+180    	; 0x7642 <_digitalWrite_OC0B>
    758e:	59 98       	cbi	0x0b, 1	; 11
    7590:	74 c0       	rjmp	.+232    	; 0x767a <_digitalWrite_OC2B>
    7592:	5a 98       	cbi	0x0b, 2	; 11
    7594:	08 95       	ret
    7596:	5b 98       	cbi	0x0b, 3	; 11
    7598:	08 95       	ret
    759a:	5c 98       	cbi	0x0b, 4	; 11
    759c:	08 95       	ret
    759e:	5d 98       	cbi	0x0b, 5	; 11
    75a0:	08 95       	ret
    75a2:	5e 98       	cbi	0x0b, 6	; 11
    75a4:	08 95       	ret
    75a6:	5f 98       	cbi	0x0b, 7	; 11
    75a8:	08 95       	ret
    75aa:	70 98       	cbi	0x0e, 0	; 14
    75ac:	08 95       	ret
    75ae:	71 98       	cbi	0x0e, 1	; 14
    75b0:	08 95       	ret
    75b2:	40 98       	cbi	0x08, 0	; 8
    75b4:	08 95       	ret
    75b6:	41 98       	cbi	0x08, 1	; 8
    75b8:	08 95       	ret
    75ba:	42 98       	cbi	0x08, 2	; 8
    75bc:	08 95       	ret
    75be:	43 98       	cbi	0x08, 3	; 8
    75c0:	08 95       	ret
    75c2:	44 98       	cbi	0x08, 4	; 8
    75c4:	6c c0       	rjmp	.+216    	; 0x769e <_digitalWrite_OC3C>
    75c6:	45 98       	cbi	0x08, 5	; 8
    75c8:	64 c0       	rjmp	.+200    	; 0x7692 <_digitalWrite_OC3B>
    75ca:	46 98       	cbi	0x08, 6	; 8
    75cc:	5c c0       	rjmp	.+184    	; 0x7686 <_digitalWrite_OC3A>
    75ce:	47 98       	cbi	0x08, 7	; 8
    75d0:	08 95       	ret
    75d2:	76 98       	cbi	0x0e, 6	; 14
    75d4:	08 95       	ret
    75d6:	77 98       	cbi	0x0e, 7	; 14
    75d8:	08 95       	ret
    75da:	28 98       	cbi	0x05, 0	; 5
    75dc:	08 95       	ret
    75de:	29 98       	cbi	0x05, 1	; 5
    75e0:	08 95       	ret
    75e2:	2a 98       	cbi	0x05, 2	; 5
    75e4:	08 95       	ret
    75e6:	2b 98       	cbi	0x05, 3	; 5
    75e8:	08 95       	ret
    75ea:	2c 98       	cbi	0x05, 4	; 5
    75ec:	40 c0       	rjmp	.+128    	; 0x766e <_digitalWrite_OC2A>
    75ee:	2d 98       	cbi	0x05, 5	; 5
    75f0:	2c c0       	rjmp	.+88     	; 0x764a <_digitalWrite_OC1A>
    75f2:	2e 98       	cbi	0x05, 6	; 5
    75f4:	30 c0       	rjmp	.+96     	; 0x7656 <_digitalWrite_OC1B>
    75f6:	2f 98       	cbi	0x05, 7	; 5
    75f8:	34 c0       	rjmp	.+104    	; 0x7662 <_digitalWrite_OC1C>
    75fa:	10 98       	cbi	0x02, 0	; 2
    75fc:	08 95       	ret
    75fe:	11 98       	cbi	0x02, 1	; 2
    7600:	08 95       	ret
    7602:	12 98       	cbi	0x02, 2	; 2
    7604:	08 95       	ret
    7606:	13 98       	cbi	0x02, 3	; 2
    7608:	08 95       	ret
    760a:	14 98       	cbi	0x02, 4	; 2
    760c:	08 95       	ret
    760e:	15 98       	cbi	0x02, 5	; 2
    7610:	08 95       	ret
    7612:	16 98       	cbi	0x02, 6	; 2
    7614:	08 95       	ret
    7616:	17 98       	cbi	0x02, 7	; 2
    7618:	08 95       	ret
    761a:	74 98       	cbi	0x0e, 4	; 14
    761c:	08 95       	ret
    761e:	75 98       	cbi	0x0e, 5	; 14
    7620:	08 95       	ret
    7622:	88 98       	cbi	0x11, 0	; 17
    7624:	08 95       	ret
    7626:	89 98       	cbi	0x11, 1	; 17
    7628:	08 95       	ret
    762a:	8a 98       	cbi	0x11, 2	; 17
    762c:	08 95       	ret
    762e:	8b 98       	cbi	0x11, 3	; 17
    7630:	08 95       	ret
    7632:	8c 98       	cbi	0x11, 4	; 17
    7634:	08 95       	ret
    7636:	8d 98       	cbi	0x11, 5	; 17
    7638:	08 95       	ret
    763a:	8e 98       	cbi	0x11, 6	; 17
    763c:	08 95       	ret
    763e:	8f 98       	cbi	0x11, 7	; 17
    7640:	08 95       	ret

00007642 <_digitalWrite_OC0B>:
    7642:	e4 b5       	in	r30, 0x24	; 36
    7644:	ef 7d       	andi	r30, 0xDF	; 223
    7646:	e4 bd       	out	0x24, r30	; 36
    7648:	08 95       	ret

0000764a <_digitalWrite_OC1A>:
    764a:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    764e:	ef 77       	andi	r30, 0x7F	; 127
    7650:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7654:	08 95       	ret

00007656 <_digitalWrite_OC1B>:
    7656:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    765a:	ef 7d       	andi	r30, 0xDF	; 223
    765c:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7660:	08 95       	ret

00007662 <_digitalWrite_OC1C>:
    7662:	e0 91 80 00 	lds	r30, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    7666:	e7 7f       	andi	r30, 0xF7	; 247
    7668:	e0 93 80 00 	sts	0x0080, r30	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    766c:	08 95       	ret

0000766e <_digitalWrite_OC2A>:
    766e:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7672:	ef 77       	andi	r30, 0x7F	; 127
    7674:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7678:	08 95       	ret

0000767a <_digitalWrite_OC2B>:
    767a:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    767e:	ef 7d       	andi	r30, 0xDF	; 223
    7680:	e0 93 b0 00 	sts	0x00B0, r30	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    7684:	08 95       	ret

00007686 <_digitalWrite_OC3A>:
    7686:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    768a:	ef 77       	andi	r30, 0x7F	; 127
    768c:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    7690:	08 95       	ret

00007692 <_digitalWrite_OC3B>:
    7692:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    7696:	ef 7d       	andi	r30, 0xDF	; 223
    7698:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    769c:	08 95       	ret

0000769e <_digitalWrite_OC3C>:
    769e:	e0 91 90 00 	lds	r30, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    76a2:	e7 7f       	andi	r30, 0xF7	; 247
    76a4:	e0 93 90 00 	sts	0x0090, r30	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    76a8:	08 95       	ret

000076aa <_reboot_Teensyduino_>:
#define WDFR 3
#endif

void _reboot_Teensyduino_(void)
{
	cli();
    76aa:	f8 94       	cli
	// stop watchdog timer, if running
	MCUSR &= ~(1<<WDFR);
    76ac:	84 b7       	in	r24, 0x34	; 52
    76ae:	87 7f       	andi	r24, 0xF7	; 247
    76b0:	84 bf       	out	0x34, r24	; 52
	WDTCSR |= (1<<WDCE);
    76b2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
    76b6:	80 61       	ori	r24, 0x10	; 16
    76b8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
	WDTCSR = 0;
    76bc:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7e0060>
					"brne	L_%=_loop"	"\n\t"	// 2 (1 on last)
					: "=d" (tmp2)
					: "0" (tmp2)
				);
			} else {
				asm volatile(
    76c0:	80 e2       	ldi	r24, 0x20	; 32
    76c2:	9e e4       	ldi	r25, 0x4E	; 78

000076c4 <L_1164_loop>:
    76c4:	01 97       	sbiw	r24, 0x01	; 1
    76c6:	f1 f7       	brne	.-4      	; 0x76c4 <L_1164_loop>
	delayMicroseconds(5000);
	UDCON = 1;
    76c8:	81 e0       	ldi	r24, 0x01	; 1
    76ca:	80 93 e0 00 	sts	0x00E0, r24	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
	USBCON = (1<<FRZCLK);
    76ce:	80 e2       	ldi	r24, 0x20	; 32
    76d0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    76d4:	80 e6       	ldi	r24, 0x60	; 96
    76d6:	9a ee       	ldi	r25, 0xEA	; 234

000076d8 <L_1178_loop>:
    76d8:	01 97       	sbiw	r24, 0x01	; 1
    76da:	f1 f7       	brne	.-4      	; 0x76d8 <L_1178_loop>
	delayMicroseconds(15000);
	disable_peripherals();
    76dc:	6d de       	rcall	.-806    	; 0x73b8 <disable_peripherals>
	#elif defined(__AVR_ATmega32U4__)
	asm volatile("jmp 0x7E00");
	#elif defined(__AVR_AT90USB646__)
	asm volatile("jmp 0xFC00");
	#elif defined(__AVR_AT90USB1286__)
	asm volatile("jmp 0x1FC00");
    76de:	0c 94 00 fe 	jmp	0x1fc00	; 0x1fc00 <__EEPROM_REGION_LENGTH__+0xfc00>
    76e2:	ff cf       	rjmp	.-2      	; 0x76e2 <L_1178_loop+0xa>

000076e4 <_restart_Teensyduino_>:
	while (1) ;
}

void _restart_Teensyduino_(void)
{
	cli();
    76e4:	f8 94       	cli
	disable_peripherals();  // but leave USB intact
    76e6:	68 de       	rcall	.-816    	; 0x73b8 <disable_peripherals>
    76e8:	80 e6       	ldi	r24, 0x60	; 96
    76ea:	9a ee       	ldi	r25, 0xEA	; 234

000076ec <L_1203_loop>:
    76ec:	01 97       	sbiw	r24, 0x01	; 1
    76ee:	f1 f7       	brne	.-4      	; 0x76ec <L_1203_loop>
	delayMicroseconds(15000);
	asm volatile("jmp 0");
    76f0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
    76f4:	ff cf       	rjmp	.-2      	; 0x76f4 <L_1203_loop+0x8>

000076f6 <__vector_23>:
volatile unsigned char timer0_fract_count = 0;

void TIMER0_OVF_vect() __attribute__((naked));
void TIMER0_OVF_vect()
{
	asm volatile(
    76f6:	8f 93       	push	r24
    76f8:	8f b7       	in	r24, 0x3f	; 63
    76fa:	8f 93       	push	r24
    76fc:	80 91 1e 10 	lds	r24, 0x101E	; 0x80101e <timer0_fract_count>
    7700:	8d 5f       	subi	r24, 0xFD	; 253
    7702:	8d 37       	cpi	r24, 0x7D	; 125
    7704:	d0 f4       	brcc	.+52     	; 0x773a <L_1218_fract_roll>

00007706 <L_1218_fract_noroll>:
    7706:	80 93 1e 10 	sts	0x101E, r24	; 0x80101e <timer0_fract_count>
    770a:	80 91 1f 10 	lds	r24, 0x101F	; 0x80101f <timer0_millis_count>
    770e:	8f 5f       	subi	r24, 0xFF	; 255
    7710:	80 93 1f 10 	sts	0x101F, r24	; 0x80101f <timer0_millis_count>
    7714:	d8 f0       	brcs	.+54     	; 0x774c <L_1218_ovcount>

00007716 <L_1218_millis_inc_sext>:
    7716:	80 91 20 10 	lds	r24, 0x1020	; 0x801020 <timer0_millis_count+0x1>
    771a:	8f 4f       	sbci	r24, 0xFF	; 255
    771c:	80 93 20 10 	sts	0x1020, r24	; 0x801020 <timer0_millis_count+0x1>
    7720:	a8 f0       	brcs	.+42     	; 0x774c <L_1218_ovcount>
    7722:	80 91 21 10 	lds	r24, 0x1021	; 0x801021 <timer0_millis_count+0x2>
    7726:	8f 4f       	sbci	r24, 0xFF	; 255
    7728:	80 93 21 10 	sts	0x1021, r24	; 0x801021 <timer0_millis_count+0x2>
    772c:	78 f0       	brcs	.+30     	; 0x774c <L_1218_ovcount>
    772e:	80 91 22 10 	lds	r24, 0x1022	; 0x801022 <timer0_millis_count+0x3>
    7732:	8f 4f       	sbci	r24, 0xFF	; 255
    7734:	80 93 22 10 	sts	0x1022, r24	; 0x801022 <timer0_millis_count+0x3>
    7738:	09 c0       	rjmp	.+18     	; 0x774c <L_1218_ovcount>

0000773a <L_1218_fract_roll>:
    773a:	8d 57       	subi	r24, 0x7D	; 125
    773c:	80 93 1e 10 	sts	0x101E, r24	; 0x80101e <timer0_fract_count>
    7740:	80 91 1f 10 	lds	r24, 0x101F	; 0x80101f <timer0_millis_count>
    7744:	8e 5f       	subi	r24, 0xFE	; 254
    7746:	80 93 1f 10 	sts	0x101F, r24	; 0x80101f <timer0_millis_count>
    774a:	28 f7       	brcc	.-54     	; 0x7716 <L_1218_millis_inc_sext>

0000774c <L_1218_ovcount>:
    774c:	80 91 23 10 	lds	r24, 0x1023	; 0x801023 <timer0_micros_count>
    7750:	8c 5f       	subi	r24, 0xFC	; 252
    7752:	80 93 23 10 	sts	0x1023, r24	; 0x801023 <timer0_micros_count>
    7756:	58 f0       	brcs	.+22     	; 0x776e <L_1218_end>
    7758:	80 91 24 10 	lds	r24, 0x1024	; 0x801024 <timer0_micros_count+0x1>
    775c:	8f 4f       	sbci	r24, 0xFF	; 255
    775e:	80 93 24 10 	sts	0x1024, r24	; 0x801024 <timer0_micros_count+0x1>
    7762:	28 f0       	brcs	.+10     	; 0x776e <L_1218_end>
    7764:	80 91 25 10 	lds	r24, 0x1025	; 0x801025 <timer0_micros_count+0x2>
    7768:	8f 4f       	sbci	r24, 0xFF	; 255
    776a:	80 93 25 10 	sts	0x1025, r24	; 0x801025 <timer0_micros_count+0x2>

0000776e <L_1218_end>:
    776e:	8f 91       	pop	r24
    7770:	8f bf       	out	0x3f, r24	; 63
    7772:	8f 91       	pop	r24
    7774:	18 95       	reti

00007776 <delay>:
	);
}


void delay(uint32_t ms)
{
    7776:	cf 92       	push	r12
    7778:	df 92       	push	r13
    777a:	ef 92       	push	r14
    777c:	ff 92       	push	r15
    777e:	6b 01       	movw	r12, r22
    7780:	7c 01       	movw	r14, r24

static inline uint32_t micros(void) __attribute__((always_inline, unused));
static inline uint32_t micros(void)
{
	register uint32_t out asm("r22");
	asm volatile("call _micros" : "=d" (out) : : "r0");
    7782:	19 d0       	rcall	.+50     	; 0x77b6 <_micros>
	uint16_t start = (uint16_t)micros();
    7784:	9b 01       	movw	r18, r22

	while (ms > 0) {
    7786:	c1 14       	cp	r12, r1
    7788:	d1 04       	cpc	r13, r1
    778a:	e1 04       	cpc	r14, r1
    778c:	f1 04       	cpc	r15, r1
    778e:	29 f4       	brne	.+10     	; 0x779a <delay+0x24>
		_SLEEP_CONTROL_REG = SLEEP_MODE_IDLE;
		cli();
	} while (timer0_millis_count - start <= ms);
	sei();
#endif
}
    7790:	ff 90       	pop	r15
    7792:	ef 90       	pop	r14
    7794:	df 90       	pop	r13
    7796:	cf 90       	pop	r12
    7798:	08 95       	ret
    779a:	0d d0       	rcall	.+26     	; 0x77b6 <_micros>
void delay(uint32_t ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
		if (((uint16_t)micros() - start) >= 1000) {
    779c:	62 1b       	sub	r22, r18
    779e:	73 0b       	sbc	r23, r19
    77a0:	68 3e       	cpi	r22, 0xE8	; 232
    77a2:	73 40       	sbci	r23, 0x03	; 3
    77a4:	80 f3       	brcs	.-32     	; 0x7786 <delay+0x10>
			ms--;
    77a6:	81 e0       	ldi	r24, 0x01	; 1
    77a8:	c8 1a       	sub	r12, r24
    77aa:	d1 08       	sbc	r13, r1
    77ac:	e1 08       	sbc	r14, r1
    77ae:	f1 08       	sbc	r15, r1
			start += 1000;
    77b0:	28 51       	subi	r18, 0x18	; 24
    77b2:	3c 4f       	sbci	r19, 0xFC	; 252
    77b4:	e8 cf       	rjmp	.-48     	; 0x7786 <delay+0x10>

000077b6 <_micros>:


uint32_t _micros(void)
{
	register uint32_t out asm("r22");
	asm volatile(
    77b6:	0f b6       	in	r0, 0x3f	; 63
    77b8:	f8 94       	cli
    77ba:	66 b5       	in	r22, 0x26	; 38
    77bc:	15 b2       	in	r1, 0x15	; 21
    77be:	70 91 23 10 	lds	r23, 0x1023	; 0x801023 <timer0_micros_count>
    77c2:	80 91 24 10 	lds	r24, 0x1024	; 0x801024 <timer0_micros_count+0x1>
    77c6:	90 91 25 10 	lds	r25, 0x1025	; 0x801025 <timer0_micros_count+0x2>
    77ca:	0f be       	out	0x3f, r0	; 63
    77cc:	10 fe       	sbrs	r1, 0
    77ce:	05 c0       	rjmp	.+10     	; 0x77da <L_1296_skip>
    77d0:	6f 3f       	cpi	r22, 0xFF	; 255
    77d2:	19 f0       	breq	.+6      	; 0x77da <L_1296_skip>
    77d4:	7c 5f       	subi	r23, 0xFC	; 252
    77d6:	8f 4f       	sbci	r24, 0xFF	; 255
    77d8:	9f 4f       	sbci	r25, 0xFF	; 255

000077da <L_1296_skip>:
    77da:	11 24       	eor	r1, r1
    77dc:	00 24       	eor	r0, r0
    77de:	66 0f       	add	r22, r22
    77e0:	00 1c       	adc	r0, r0
    77e2:	66 0f       	add	r22, r22
    77e4:	00 1c       	adc	r0, r0
    77e6:	70 29       	or	r23, r0
		  "I" (_SFR_IO_ADDR(TIFR0)),
		  "I" (TOV0)
		: "r0"
	);
	return out;
}
    77e8:	08 95       	ret

000077ea <usb_wait_in_ready>:
	UDCON = 1;	// disconnect attach resistor
	USBCON = 0;	// shut off USB periperal
	PLLCSR = 0;	// shut off PLL
	usb_configuration = 0;
	usb_suspended = 1;
}
    77ea:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    77ee:	80 ff       	sbrs	r24, 0
    77f0:	fc cf       	rjmp	.-8      	; 0x77ea <usb_wait_in_ready>
    77f2:	08 95       	ret

000077f4 <usb_init>:
    77f4:	80 91 d8 00 	lds	r24, 0x00D8	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    77f8:	87 ff       	sbrs	r24, 7
    77fa:	02 c0       	rjmp	.+4      	; 0x7800 <usb_init+0xc>
    77fc:	85 ff       	sbrs	r24, 5
    77fe:	1b c0       	rjmp	.+54     	; 0x7836 <usb_init+0x42>
    7800:	81 e8       	ldi	r24, 0x81	; 129
    7802:	80 93 d7 00 	sts	0x00D7, r24	; 0x8000d7 <__TEXT_REGION_LENGTH__+0x7e00d7>
    7806:	80 ea       	ldi	r24, 0xA0	; 160
    7808:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    780c:	86 e1       	ldi	r24, 0x16	; 22
    780e:	89 bd       	out	0x29, r24	; 41
    7810:	09 b4       	in	r0, 0x29	; 41
    7812:	00 fe       	sbrs	r0, 0
    7814:	fd cf       	rjmp	.-6      	; 0x7810 <usb_init+0x1c>
    7816:	80 e9       	ldi	r24, 0x90	; 144
    7818:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
    781c:	10 92 e0 00 	sts	0x00E0, r1	; 0x8000e0 <__TEXT_REGION_LENGTH__+0x7e00e0>
    7820:	10 92 ad 10 	sts	0x10AD, r1	; 0x8010ad <usb_configuration>
    7824:	10 92 ac 10 	sts	0x10AC, r1	; 0x8010ac <usb_suspended>
    7828:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <__bss_end>
    782c:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
    7830:	8d e0       	ldi	r24, 0x0D	; 13
    7832:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
    7836:	08 95       	ret

00007838 <__vector_10>:

// USB Device Interrupt - handle all device-level events
// the transmit buffer flushing is triggered by the start of frame
//
ISR(USB_GEN_vect)
{
    7838:	1f 92       	push	r1
    783a:	0f 92       	push	r0
    783c:	0f b6       	in	r0, 0x3f	; 63
    783e:	0f 92       	push	r0
    7840:	11 24       	eor	r1, r1
    7842:	0b b6       	in	r0, 0x3b	; 59
    7844:	0f 92       	push	r0
    7846:	2f 93       	push	r18
    7848:	3f 93       	push	r19
    784a:	4f 93       	push	r20
    784c:	5f 93       	push	r21
    784e:	6f 93       	push	r22
    7850:	7f 93       	push	r23
    7852:	8f 93       	push	r24
    7854:	9f 93       	push	r25
    7856:	af 93       	push	r26
    7858:	bf 93       	push	r27
    785a:	ef 93       	push	r30
    785c:	ff 93       	push	r31
	uint8_t intbits, t;

        intbits = UDINT;
    785e:	90 91 e1 00 	lds	r25, 0x00E1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        UDINT = 0;
    7862:	10 92 e1 00 	sts	0x00E1, r1	; 0x8000e1 <__TEXT_REGION_LENGTH__+0x7e00e1>
        if (intbits & (1<<EORSTI)) {
    7866:	93 ff       	sbrs	r25, 3
    7868:	11 c0       	rjmp	.+34     	; 0x788c <__vector_10+0x54>
		// USB Reset
		UENUM = 0;
    786a:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
		UECONX = 1;
    786e:	81 e0       	ldi	r24, 0x01	; 1
    7870:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
		UECFG0X = EP_TYPE_CONTROL;
    7874:	10 92 ec 00 	sts	0x00EC, r1	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
		UECFG1X = EP_SIZE(ENDPOINT0_SIZE) | EP_SINGLE_BUFFER;
    7878:	82 e2       	ldi	r24, 0x22	; 34
    787a:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
		UEIENX = (1<<RXSTPE);
    787e:	88 e0       	ldi	r24, 0x08	; 8
    7880:	80 93 f0 00 	sts	0x00F0, r24	; 0x8000f0 <__TEXT_REGION_LENGTH__+0x7e00f0>
		usb_configuration = 0;
    7884:	10 92 ad 10 	sts	0x10AD, r1	; 0x8010ad <usb_configuration>
		cdc_line_rtsdtr = 0;
    7888:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <__bss_end>
	}
	if (intbits & (1<<SOFI)) {
    788c:	92 ff       	sbrs	r25, 2
    788e:	1d c0       	rjmp	.+58     	; 0x78ca <__vector_10+0x92>
		// Start Of Frame
		if (usb_configuration) {
    7890:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <usb_configuration>
    7894:	88 23       	and	r24, r24
    7896:	c9 f0       	breq	.+50     	; 0x78ca <__vector_10+0x92>
			t = transmit_flush_timer;
    7898:	80 91 29 10 	lds	r24, 0x1029	; 0x801029 <transmit_flush_timer>
			if (t) {
    789c:	88 23       	and	r24, r24
    789e:	59 f0       	breq	.+22     	; 0x78b6 <__vector_10+0x7e>
				transmit_flush_timer = --t;
    78a0:	81 50       	subi	r24, 0x01	; 1
    78a2:	80 93 29 10 	sts	0x1029, r24	; 0x801029 <transmit_flush_timer>
				if (!t) {
    78a6:	81 11       	cpse	r24, r1
    78a8:	06 c0       	rjmp	.+12     	; 0x78b6 <__vector_10+0x7e>
					UENUM = CDC_TX_ENDPOINT;
    78aa:	84 e0       	ldi	r24, 0x04	; 4
    78ac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
					UEINTX = 0x3A;
    78b0:	8a e3       	ldi	r24, 0x3A	; 58
    78b2:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				}
			}
			t = reboot_timer;
    78b6:	80 91 28 10 	lds	r24, 0x1028	; 0x801028 <reboot_timer>
			if (t) {
    78ba:	88 23       	and	r24, r24
    78bc:	31 f0       	breq	.+12     	; 0x78ca <__vector_10+0x92>
				reboot_timer = --t;
    78be:	81 50       	subi	r24, 0x01	; 1
    78c0:	80 93 28 10 	sts	0x1028, r24	; 0x801028 <reboot_timer>
				if (!t) _reboot_Teensyduino_();
    78c4:	81 11       	cpse	r24, r1
    78c6:	01 c0       	rjmp	.+2      	; 0x78ca <__vector_10+0x92>
    78c8:	f0 de       	rcall	.-544    	; 0x76aa <_reboot_Teensyduino_>
			}
		}
	}
	// in active state
	if (intbits & (1<<SUSPI)) {
    78ca:	90 ff       	sbrs	r25, 0
    78cc:	0c c0       	rjmp	.+24     	; 0x78e6 <__vector_10+0xae>
		// USB Suspend (inactivity for 3ms)
		UDIEN = (1<<WAKEUPE);
    78ce:	80 e1       	ldi	r24, 0x10	; 16
    78d0:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_configuration = 0;
    78d4:	10 92 ad 10 	sts	0x10AD, r1	; 0x8010ad <usb_configuration>
		usb_suspended = 1;
    78d8:	81 e0       	ldi	r24, 0x01	; 1
    78da:	80 93 ac 10 	sts	0x10AC, r24	; 0x8010ac <usb_suspended>
		#if (F_CPU >= 8000000L)
		// WAKEUPI does not work with USB clock freeze 
		// when CPU is running less than 8 MHz.
		// Is this a hardware bug?
		USB_FREEZE();			// shut off USB
    78de:	80 ea       	ldi	r24, 0xA0	; 160
    78e0:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		PLLCSR = 0;			// shut off PLL
    78e4:	19 bc       	out	0x29, r1	; 41
		// to properly meet the USB spec, current must
		// reduce to less than 2.5 mA, which means using
		// powerdown mode, but that breaks the Arduino
		// user's paradigm....
	}
	if (usb_suspended && (intbits & (1<<WAKEUPI))) {
    78e6:	80 91 ac 10 	lds	r24, 0x10AC	; 0x8010ac <usb_suspended>
    78ea:	88 23       	and	r24, r24
    78ec:	79 f0       	breq	.+30     	; 0x790c <__vector_10+0xd4>
    78ee:	94 ff       	sbrs	r25, 4
    78f0:	0d c0       	rjmp	.+26     	; 0x790c <__vector_10+0xd4>
		// USB Resume (pretty much any activity)
		#if (F_CPU >= 8000000L)
		PLL_CONFIG();
    78f2:	86 e1       	ldi	r24, 0x16	; 22
    78f4:	89 bd       	out	0x29, r24	; 41
		while (!(PLLCSR & (1<<PLOCK))) ;
    78f6:	09 b4       	in	r0, 0x29	; 41
    78f8:	00 fe       	sbrs	r0, 0
    78fa:	fd cf       	rjmp	.-6      	; 0x78f6 <__vector_10+0xbe>
		USB_CONFIG();
    78fc:	80 e9       	ldi	r24, 0x90	; 144
    78fe:	80 93 d8 00 	sts	0x00D8, r24	; 0x8000d8 <__TEXT_REGION_LENGTH__+0x7e00d8>
		#endif
		UDIEN = (1<<EORSTE)|(1<<SOFE)|(1<<SUSPE);
    7902:	8d e0       	ldi	r24, 0x0D	; 13
    7904:	80 93 e2 00 	sts	0x00E2, r24	; 0x8000e2 <__TEXT_REGION_LENGTH__+0x7e00e2>
		usb_suspended = 0;
    7908:	10 92 ac 10 	sts	0x10AC, r1	; 0x8010ac <usb_suspended>
		return;
	}
}
    790c:	ff 91       	pop	r31
    790e:	ef 91       	pop	r30
    7910:	bf 91       	pop	r27
    7912:	af 91       	pop	r26
    7914:	9f 91       	pop	r25
    7916:	8f 91       	pop	r24
    7918:	7f 91       	pop	r23
    791a:	6f 91       	pop	r22
    791c:	5f 91       	pop	r21
    791e:	4f 91       	pop	r20
    7920:	3f 91       	pop	r19
    7922:	2f 91       	pop	r18
    7924:	0f 90       	pop	r0
    7926:	0b be       	out	0x3b, r0	; 59
    7928:	0f 90       	pop	r0
    792a:	0f be       	out	0x3f, r0	; 63
    792c:	0f 90       	pop	r0
    792e:	1f 90       	pop	r1
    7930:	18 95       	reti

00007932 <__vector_11>:
// USB Endpoint Interrupt - endpoint 0 is handled here.  The
// other endpoints are manipulated by the user-callable
// functions, and the start-of-frame interrupt.
//
ISR(USB_COM_vect)
{
    7932:	1f 92       	push	r1
    7934:	0f 92       	push	r0
    7936:	0f b6       	in	r0, 0x3f	; 63
    7938:	0f 92       	push	r0
    793a:	11 24       	eor	r1, r1
    793c:	0b b6       	in	r0, 0x3b	; 59
    793e:	0f 92       	push	r0
    7940:	ef 92       	push	r14
    7942:	ff 92       	push	r15
    7944:	0f 93       	push	r16
    7946:	1f 93       	push	r17
    7948:	2f 93       	push	r18
    794a:	3f 93       	push	r19
    794c:	4f 93       	push	r20
    794e:	5f 93       	push	r21
    7950:	6f 93       	push	r22
    7952:	7f 93       	push	r23
    7954:	8f 93       	push	r24
    7956:	9f 93       	push	r25
    7958:	af 93       	push	r26
    795a:	bf 93       	push	r27
    795c:	cf 93       	push	r28
    795e:	df 93       	push	r29
    7960:	ef 93       	push	r30
    7962:	ff 93       	push	r31
	uint16_t desc_val;
	uint32_t baud;
	const uint8_t *desc_addr;
	uint8_t	desc_length;

	UENUM = 0;
    7964:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
	intbits = UEINTX;
    7968:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
	if (intbits & (1<<RXSTPI)) {
    796c:	83 ff       	sbrs	r24, 3
    796e:	20 c0       	rjmp	.+64     	; 0x79b0 <__vector_11+0x7e>
		bmRequestType = UEDATX;
    7970:	d0 91 f1 00 	lds	r29, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		bRequest = UEDATX;
    7974:	c0 91 f1 00 	lds	r28, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wValue = UEDATX;
		//wValue |= (UEDATX << 8);
		read_word_lsbfirst(wValue, UEDATX);
    7978:	e0 90 f1 00 	lds	r14, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    797c:	f0 90 f1 00 	lds	r15, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wIndex = UEDATX;
		//wIndex |= (UEDATX << 8);
		read_word_lsbfirst(wIndex, UEDATX);
    7980:	00 91 f1 00 	lds	r16, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7984:	10 91 f1 00 	lds	r17, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
    7988:	20 91 f1 00 	lds	r18, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    798c:	30 91 f1 00 	lds	r19, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
    7990:	82 ef       	ldi	r24, 0xF2	; 242
    7992:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
                if (bRequest == GET_DESCRIPTOR) {
    7996:	c6 30       	cpi	r28, 0x06	; 6
    7998:	09 f0       	breq	.+2      	; 0x799c <__vector_11+0x6a>
    799a:	5b c0       	rjmp	.+182    	; 0x7a52 <__vector_11+0x120>
			list = (const uint8_t *)descriptor_list;
    799c:	e4 e9       	ldi	r30, 0x94	; 148
    799e:	f7 e0       	ldi	r31, 0x07	; 7
					UECONX = (1<<STALLRQ)|(1<<EPEN);  //stall
					return;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    79a0:	85 91       	lpm	r24, Z+
    79a2:	95 91       	lpm	r25, Z+
				if (desc_val != wValue) {
    79a4:	e8 16       	cp	r14, r24
    79a6:	f9 06       	cpc	r15, r25
    79a8:	39 f0       	breq	.+14     	; 0x79b8 <__vector_11+0x86>
					list += sizeof(struct descriptor_list_struct)-2;
    79aa:	35 96       	adiw	r30, 0x05	; 5
    79ac:	c1 50       	subi	r28, 0x01	; 1
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
			for (i=0; ; i++) {
				if (i >= NUM_DESC_LIST) {
    79ae:	c1 f7       	brne	.-16     	; 0x79a0 <__vector_11+0x6e>
				}
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
    79b0:	81 e2       	ldi	r24, 0x21	; 33
    79b2:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    79b6:	2b c0       	rjmp	.+86     	; 0x7a0e <__vector_11+0xdc>
					list += sizeof(struct descriptor_list_struct)-2;
					continue;
				}
				//desc_val = pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_val, list);
    79b8:	85 91       	lpm	r24, Z+
    79ba:	95 91       	lpm	r25, Z+
				if (desc_val != wIndex) {
    79bc:	08 17       	cp	r16, r24
    79be:	19 07       	cpc	r17, r25
    79c0:	11 f0       	breq	.+4      	; 0x79c6 <__vector_11+0x94>
					list += sizeof(struct descriptor_list_struct)-4;
    79c2:	33 96       	adiw	r30, 0x03	; 3
					continue;
    79c4:	f3 cf       	rjmp	.-26     	; 0x79ac <__vector_11+0x7a>
				}
				//desc_addr = (const uint8_t *)pgm_read_word(list);
				//list += 2;
				pgm_read_word_postinc(desc_addr, list);
    79c6:	45 91       	lpm	r20, Z+
    79c8:	55 91       	lpm	r21, Z+
				desc_length = pgm_read_byte(list);
    79ca:	84 91       	lpm	r24, Z
				break;
			}
			len = (wLength < 256) ? wLength : 255;
    79cc:	2f 3f       	cpi	r18, 0xFF	; 255
    79ce:	31 05       	cpc	r19, r1
    79d0:	19 f0       	breq	.+6      	; 0x79d8 <__vector_11+0xa6>
    79d2:	10 f0       	brcs	.+4      	; 0x79d8 <__vector_11+0xa6>
    79d4:	2f ef       	ldi	r18, 0xFF	; 255
    79d6:	30 e0       	ldi	r19, 0x00	; 0
    79d8:	82 17       	cp	r24, r18
    79da:	08 f4       	brcc	.+2      	; 0x79de <__vector_11+0xac>
    79dc:	28 2f       	mov	r18, r24
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    79de:	3e ef       	ldi	r19, 0xFE	; 254
			if (len > desc_length) len = desc_length;
			list = desc_addr;
			do {
				// wait for host ready for IN packet
				do {
					i = UEINTX;
    79e0:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
    79e4:	98 2f       	mov	r25, r24
    79e6:	95 70       	andi	r25, 0x05	; 5
    79e8:	d9 f3       	breq	.-10     	; 0x79e0 <__vector_11+0xae>
				if (i & (1<<RXOUTI)) return;	// abort
    79ea:	82 fd       	sbrc	r24, 2
    79ec:	10 c0       	rjmp	.+32     	; 0x7a0e <__vector_11+0xdc>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
    79ee:	82 2f       	mov	r24, r18
    79f0:	21 32       	cpi	r18, 0x21	; 33
    79f2:	08 f0       	brcs	.+2      	; 0x79f6 <__vector_11+0xc4>
    79f4:	80 e2       	ldi	r24, 0x20	; 32
				for (i = n; i; i--) {
    79f6:	98 2f       	mov	r25, r24
    79f8:	91 11       	cpse	r25, r1
    79fa:	24 c0       	rjmp	.+72     	; 0x7a44 <__vector_11+0x112>
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
    79fc:	92 2f       	mov	r25, r18
    79fe:	98 1b       	sub	r25, r24
    7a00:	89 2f       	mov	r24, r25
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7a02:	30 93 e8 00 	sts	0x00E8, r19	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
				}
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
    7a06:	91 11       	cpse	r25, r1
    7a08:	1b c0       	rjmp	.+54     	; 0x7a40 <__vector_11+0x10e>
    7a0a:	20 32       	cpi	r18, 0x20	; 32
    7a0c:	c8 f4       	brcc	.+50     	; 0x7a40 <__vector_11+0x10e>
				return;
			}
		}
        }
	UECONX = (1<<STALLRQ) | (1<<EPEN);	// stall
}
    7a0e:	ff 91       	pop	r31
    7a10:	ef 91       	pop	r30
    7a12:	df 91       	pop	r29
    7a14:	cf 91       	pop	r28
    7a16:	bf 91       	pop	r27
    7a18:	af 91       	pop	r26
    7a1a:	9f 91       	pop	r25
    7a1c:	8f 91       	pop	r24
    7a1e:	7f 91       	pop	r23
    7a20:	6f 91       	pop	r22
    7a22:	5f 91       	pop	r21
    7a24:	4f 91       	pop	r20
    7a26:	3f 91       	pop	r19
    7a28:	2f 91       	pop	r18
    7a2a:	1f 91       	pop	r17
    7a2c:	0f 91       	pop	r16
    7a2e:	ff 90       	pop	r15
    7a30:	ef 90       	pop	r14
    7a32:	0f 90       	pop	r0
    7a34:	0b be       	out	0x3b, r0	; 59
    7a36:	0f 90       	pop	r0
    7a38:	0f be       	out	0x3f, r0	; 63
    7a3a:	0f 90       	pop	r0
    7a3c:	1f 90       	pop	r1
    7a3e:	18 95       	reti
		//wLength = UEDATX;
		//wLength |= (UEDATX << 8);
		read_word_lsbfirst(wLength, UEDATX);
                UEINTX = ~((1<<RXSTPI) | (1<<RXOUTI) | (1<<TXINI));
                if (bRequest == GET_DESCRIPTOR) {
			list = (const uint8_t *)descriptor_list;
    7a40:	28 2f       	mov	r18, r24
    7a42:	ce cf       	rjmp	.-100    	; 0x79e0 <__vector_11+0xae>
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
					//UEDATX = pgm_read_byte(desc_addr++);
					//pgm_read_byte_postinc(UEDATX, desc_addr);
					pgm_read_byte_postinc(UEDATX, list);
    7a44:	fa 01       	movw	r30, r20
    7a46:	45 91       	lpm	r20, Z+
    7a48:	40 93 f1 00 	sts	0x00F1, r20	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7a4c:	af 01       	movw	r20, r30
					i = UEINTX;
				} while (!(i & ((1<<TXINI)|(1<<RXOUTI))));
				if (i & (1<<RXOUTI)) return;	// abort
				// send IN packet
				n = len < ENDPOINT0_SIZE ? len : ENDPOINT0_SIZE;
				for (i = n; i; i--) {
    7a4e:	91 50       	subi	r25, 0x01	; 1
    7a50:	d3 cf       	rjmp	.-90     	; 0x79f8 <__vector_11+0xc6>
				len -= n;
				usb_send_in();
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
    7a52:	c5 30       	cpi	r28, 0x05	; 5
    7a54:	49 f4       	brne	.+18     	; 0x7a68 <__vector_11+0x136>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7a56:	8e ef       	ldi	r24, 0xFE	; 254
    7a58:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			} while (len || n == ENDPOINT0_SIZE);
			return;
                }
		if (bRequest == SET_ADDRESS) {
			usb_send_in();
			usb_wait_in_ready();
    7a5c:	c6 de       	rcall	.-628    	; 0x77ea <usb_wait_in_ready>
			UDADDR = wValue | (1<<ADDEN);
    7a5e:	8e 2d       	mov	r24, r14
    7a60:	80 68       	ori	r24, 0x80	; 128
    7a62:	80 93 e3 00 	sts	0x00E3, r24	; 0x8000e3 <__TEXT_REGION_LENGTH__+0x7e00e3>
			return;
    7a66:	d3 cf       	rjmp	.-90     	; 0x7a0e <__vector_11+0xdc>
		}
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
    7a68:	c9 30       	cpi	r28, 0x09	; 9
    7a6a:	21 f5       	brne	.+72     	; 0x7ab4 <__vector_11+0x182>
    7a6c:	d1 11       	cpse	r29, r1
    7a6e:	a0 cf       	rjmp	.-192    	; 0x79b0 <__vector_11+0x7e>
			usb_configuration = wValue;
    7a70:	e0 92 ad 10 	sts	0x10AD, r14	; 0x8010ad <usb_configuration>
			cdc_line_rtsdtr = 0;
    7a74:	10 92 ab 10 	sts	0x10AB, r1	; 0x8010ab <__bss_end>
			transmit_flush_timer = 0;
    7a78:	10 92 29 10 	sts	0x1029, r1	; 0x801029 <transmit_flush_timer>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7a7c:	8e ef       	ldi	r24, 0xFE	; 254
    7a7e:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    7a82:	81 e0       	ldi	r24, 0x01	; 1
		if (bRequest == SET_CONFIGURATION && bmRequestType == 0) {
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
    7a84:	e7 e5       	ldi	r30, 0x57	; 87
    7a86:	f8 e0       	ldi	r31, 0x08	; 8
			for (i=1; i<5; i++) {
				UENUM = i;
    7a88:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				//en = pgm_read_byte(cfg++);
				pgm_read_byte_postinc(en, cfg);
    7a8c:	95 91       	lpm	r25, Z+
				UECONX = en;
    7a8e:	90 93 eb 00 	sts	0x00EB, r25	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
				if (en) {
    7a92:	99 23       	and	r25, r25
    7a94:	31 f0       	breq	.+12     	; 0x7aa2 <__vector_11+0x170>
					//UECFG0X = pgm_read_byte(cfg++);
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
    7a96:	95 91       	lpm	r25, Z+
    7a98:	90 93 ec 00 	sts	0x00EC, r25	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7e00ec>
					pgm_read_byte_postinc(UECFG1X, cfg);
    7a9c:	95 91       	lpm	r25, Z+
    7a9e:	90 93 ed 00 	sts	0x00ED, r25	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7e00ed>
			usb_configuration = wValue;
			cdc_line_rtsdtr = 0;
			transmit_flush_timer = 0;
			usb_send_in();
			cfg = endpoint_config_table;
			for (i=1; i<5; i++) {
    7aa2:	8f 5f       	subi	r24, 0xFF	; 255
    7aa4:	85 30       	cpi	r24, 0x05	; 5
    7aa6:	81 f7       	brne	.-32     	; 0x7a88 <__vector_11+0x156>
					//UECFG1X = pgm_read_byte(cfg++);
					pgm_read_byte_postinc(UECFG0X, cfg);
					pgm_read_byte_postinc(UECFG1X, cfg);
				}
			}
        		UERST = 0x1E;
    7aa8:	8e e1       	ldi	r24, 0x1E	; 30
				UENUM = i;
				if (bRequest == SET_FEATURE) {
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
					UERST = (1 << i);
    7aaa:	80 93 ea 00 	sts	0x00EA, r24	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
					UERST = 0;
    7aae:	10 92 ea 00 	sts	0x00EA, r1	; 0x8000ea <__TEXT_REGION_LENGTH__+0x7e00ea>
    7ab2:	ad cf       	rjmp	.-166    	; 0x7a0e <__vector_11+0xdc>
			}
        		UERST = 0x1E;
        		UERST = 0;
			return;
		}
		if (bRequest == GET_CONFIGURATION && bmRequestType == 0x80) {
    7ab4:	c8 30       	cpi	r28, 0x08	; 8
    7ab6:	61 f4       	brne	.+24     	; 0x7ad0 <__vector_11+0x19e>
    7ab8:	d0 38       	cpi	r29, 0x80	; 128
    7aba:	09 f0       	breq	.+2      	; 0x7abe <__vector_11+0x18c>
			usb_wait_in_ready();
    7abc:	79 cf       	rjmp	.-270    	; 0x79b0 <__vector_11+0x7e>
    7abe:	95 de       	rcall	.-726    	; 0x77ea <usb_wait_in_ready>
			UEDATX = usb_configuration;
    7ac0:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <usb_configuration>
    7ac4:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7ac8:	8e ef       	ldi	r24, 0xFE	; 254
    7aca:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7ace:	9f cf       	rjmp	.-194    	; 0x7a0e <__vector_11+0xdc>
			usb_wait_in_ready();
			UEDATX = usb_configuration;
			usb_send_in();
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
    7ad0:	c1 32       	cpi	r28, 0x21	; 33
    7ad2:	79 f4       	brne	.+30     	; 0x7af2 <__vector_11+0x1c0>
    7ad4:	d1 3a       	cpi	r29, 0xA1	; 161
    7ad6:	09 f0       	breq	.+2      	; 0x7ada <__vector_11+0x1a8>
			usb_wait_in_ready();
    7ad8:	6b cf       	rjmp	.-298    	; 0x79b0 <__vector_11+0x7e>
    7ada:	87 de       	rcall	.-754    	; 0x77ea <usb_wait_in_ready>
			p = cdc_line_coding;
    7adc:	e1 e1       	ldi	r30, 0x11	; 17
    7ade:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				UEDATX = *p++;
    7ae0:	80 81       	ld	r24, Z
    7ae2:	80 93 f1 00 	sts	0x00F1, r24	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7ae6:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_GET_LINE_CODING /* 0x21 */ && bmRequestType == 0xA1) {
			usb_wait_in_ready();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    7ae8:	81 e0       	ldi	r24, 0x01	; 1
    7aea:	e8 31       	cpi	r30, 0x18	; 24
    7aec:	f8 07       	cpc	r31, r24
    7aee:	c1 f7       	brne	.-16     	; 0x7ae0 <__vector_11+0x1ae>
    7af0:	eb cf       	rjmp	.-42     	; 0x7ac8 <__vector_11+0x196>
				UEDATX = *p++;
			}
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
    7af2:	c0 32       	cpi	r28, 0x20	; 32
    7af4:	09 f0       	breq	.+2      	; 0x7af8 <__vector_11+0x1c6>
    7af6:	47 c0       	rjmp	.+142    	; 0x7b86 <__vector_11+0x254>
    7af8:	d1 32       	cpi	r29, 0x21	; 33
    7afa:	09 f0       	breq	.+2      	; 0x7afe <__vector_11+0x1cc>
    7afc:	59 cf       	rjmp	.-334    	; 0x79b0 <__vector_11+0x7e>
{
	UEINTX = ~(1<<TXINI);
}
static inline void usb_wait_receive_out(void)
{
	while (!(UEINTX & (1<<RXOUTI))) ;
    7afe:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b02:	82 ff       	sbrs	r24, 2
    7b04:	fc cf       	rjmp	.-8      	; 0x7afe <__vector_11+0x1cc>
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
    7b06:	e1 e1       	ldi	r30, 0x11	; 17
    7b08:	f1 e0       	ldi	r31, 0x01	; 1
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
    7b0a:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7b0e:	80 83       	st	Z, r24
    7b10:	31 96       	adiw	r30, 0x01	; 1
			return;
		}
		if (bRequest == CDC_SET_LINE_CODING /* 0x20 */ && bmRequestType == 0x21) {
			usb_wait_receive_out();
			p = cdc_line_coding;
			for (i=0; i<7; i++) {
    7b12:	91 e0       	ldi	r25, 0x01	; 1
    7b14:	e8 31       	cpi	r30, 0x18	; 24
    7b16:	f9 07       	cpc	r31, r25
    7b18:	c1 f7       	brne	.-16     	; 0x7b0a <__vector_11+0x1d8>
{
	while (!(UEINTX & (1<<RXOUTI))) ;
}
static inline void usb_ack_out(void)
{
	UEINTX = ~(1<<RXOUTI);
    7b1a:	8b ef       	ldi	r24, 0xFB	; 251
    7b1c:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7b20:	8e ef       	ldi	r24, 0xFE	; 254
    7b22:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    7b26:	30 91 11 01 	lds	r19, 0x0111	; 0x800111 <cdc_line_coding>
				| ((uint32_t)cdc_line_coding[1] << 8)
    7b2a:	40 91 12 01 	lds	r20, 0x0112	; 0x800112 <cdc_line_coding+0x1>
				| ((uint32_t)cdc_line_coding[2] << 16)
    7b2e:	80 91 13 01 	lds	r24, 0x0113	; 0x800113 <cdc_line_coding+0x2>
				| ((uint32_t)cdc_line_coding[3] << 24);
    7b32:	20 91 14 01 	lds	r18, 0x0114	; 0x800114 <cdc_line_coding+0x3>
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
    7b36:	90 e0       	ldi	r25, 0x00	; 0
    7b38:	b0 e0       	ldi	r27, 0x00	; 0
    7b3a:	a0 e0       	ldi	r26, 0x00	; 0
    7b3c:	dc 01       	movw	r26, r24
    7b3e:	99 27       	eor	r25, r25
    7b40:	88 27       	eor	r24, r24
    7b42:	94 2b       	or	r25, r20
    7b44:	83 2b       	or	r24, r19
			for (i=0; i<7; i++) {
				*p++ = UEDATX;
			}
			usb_ack_out();
			usb_send_in();
			baud = (uint32_t)cdc_line_coding[0]
    7b46:	b2 2b       	or	r27, r18
				| ((uint32_t)cdc_line_coding[1] << 8)
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
    7b48:	86 38       	cpi	r24, 0x86	; 134
    7b4a:	91 05       	cpc	r25, r1
    7b4c:	a1 05       	cpc	r26, r1
    7b4e:	b1 05       	cpc	r27, r1
    7b50:	21 f4       	brne	.+8      	; 0x7b5a <__vector_11+0x228>
    7b52:	8f e0       	ldi	r24, 0x0F	; 15
    7b54:	80 93 28 10 	sts	0x1028, r24	; 0x801028 <reboot_timer>
    7b58:	5a cf       	rjmp	.-332    	; 0x7a0e <__vector_11+0xdc>
			if (baud == 150UL) {
    7b5a:	86 39       	cpi	r24, 0x96	; 150
    7b5c:	91 05       	cpc	r25, r1
    7b5e:	a1 05       	cpc	r26, r1
    7b60:	b1 05       	cpc	r27, r1
    7b62:	09 f0       	breq	.+2      	; 0x7b66 <__vector_11+0x234>
    7b64:	54 cf       	rjmp	.-344    	; 0x7a0e <__vector_11+0xdc>
				UENUM = CDC_TX_ENDPOINT;
    7b66:	84 e0       	ldi	r24, 0x04	; 4
    7b68:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    7b6c:	9f ef       	ldi	r25, 0xFF	; 255
				| ((uint32_t)cdc_line_coding[2] << 16)
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
    7b6e:	80 91 ee 00 	lds	r24, 0x00EE	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7e00ee>
    7b72:	83 70       	andi	r24, 0x03	; 3
					UEINTX = 0xFF;
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
				}
				_restart_Teensyduino_();
    7b74:	09 f4       	brne	.+2      	; 0x7b78 <__vector_11+0x246>
    7b76:	b6 dd       	rcall	.-1172   	; 0x76e4 <_restart_Teensyduino_>
				| ((uint32_t)cdc_line_coding[3] << 24);
			if (baud == 134UL) reboot_timer = 15;
			if (baud == 150UL) {
				UENUM = CDC_TX_ENDPOINT;
				while (UESTA0X & 0x03) {
					UEINTX = 0xFF;
    7b78:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
					while (UEINTX & 0x04) /* TODO: timeout? */ ;
    7b7c:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    7b80:	82 fd       	sbrc	r24, 2
    7b82:	fc cf       	rjmp	.-8      	; 0x7b7c <__vector_11+0x24a>
    7b84:	f4 cf       	rjmp	.-24     	; 0x7b6e <__vector_11+0x23c>
				}
				_restart_Teensyduino_();
			}
			return;
		}
		if (bRequest == CDC_SET_CONTROL_LINE_STATE /* 0x22 */ && bmRequestType == 0x21) {
    7b86:	c2 32       	cpi	r28, 0x22	; 34
    7b88:	39 f4       	brne	.+14     	; 0x7b98 <__vector_11+0x266>
    7b8a:	d1 32       	cpi	r29, 0x21	; 33
    7b8c:	09 f0       	breq	.+2      	; 0x7b90 <__vector_11+0x25e>
			cdc_line_rtsdtr = wValue;
    7b8e:	10 cf       	rjmp	.-480    	; 0x79b0 <__vector_11+0x7e>
    7b90:	e0 92 ab 10 	sts	0x10AB, r14	; 0x8010ab <__bss_end>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
			usb_wait_in_ready();
    7b94:	2a de       	rcall	.-940    	; 0x77ea <usb_wait_in_ready>
    7b96:	98 cf       	rjmp	.-208    	; 0x7ac8 <__vector_11+0x196>
			cdc_line_rtsdtr = wValue;
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == CDC_SEND_BREAK /* 0x23 */ && bmRequestType == 0x21) {
    7b98:	c3 32       	cpi	r28, 0x23	; 35
    7b9a:	21 f4       	brne	.+8      	; 0x7ba4 <__vector_11+0x272>
    7b9c:	d1 32       	cpi	r29, 0x21	; 33
    7b9e:	09 f0       	breq	.+2      	; 0x7ba2 <__vector_11+0x270>
    7ba0:	07 cf       	rjmp	.-498    	; 0x79b0 <__vector_11+0x7e>
			usb_wait_in_ready();
			usb_send_in();
			return;
		}
		if (bRequest == GET_STATUS) {
    7ba2:	f8 cf       	rjmp	.-16     	; 0x7b94 <__vector_11+0x262>
    7ba4:	c1 11       	cpse	r28, r1
			usb_wait_in_ready();
    7ba6:	11 c0       	rjmp	.+34     	; 0x7bca <__vector_11+0x298>
    7ba8:	20 de       	rcall	.-960    	; 0x77ea <usb_wait_in_ready>
			i = 0;
			if (bmRequestType == 0x82) {
    7baa:	d2 38       	cpi	r29, 0x82	; 130
    7bac:	49 f4       	brne	.+18     	; 0x7bc0 <__vector_11+0x28e>
				UENUM = wIndex;
    7bae:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (UECONX & (1<<STALLRQ)) i = 1;
    7bb2:	c0 91 eb 00 	lds	r28, 0x00EB	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
    7bb6:	c5 fb       	bst	r28, 5
    7bb8:	cc 27       	eor	r28, r28
    7bba:	c0 f9       	bld	r28, 0
				UENUM = 0;
    7bbc:	10 92 e9 00 	sts	0x00E9, r1	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
			}
			UEDATX = i;
    7bc0:	c0 93 f1 00 	sts	0x00F1, r28	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
			UEDATX = 0;
    7bc4:	10 92 f1 00 	sts	0x00F1, r1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    7bc8:	7f cf       	rjmp	.-258    	; 0x7ac8 <__vector_11+0x196>
			usb_send_in();
			return;
		}
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
    7bca:	8c 2f       	mov	r24, r28
    7bcc:	8d 7f       	andi	r24, 0xFD	; 253
    7bce:	81 30       	cpi	r24, 0x01	; 1
    7bd0:	09 f0       	breq	.+2      	; 0x7bd4 <__vector_11+0x2a2>
    7bd2:	ee ce       	rjmp	.-548    	; 0x79b0 <__vector_11+0x7e>
		  && bmRequestType == 0x02 && wValue == 0) {
    7bd4:	d2 30       	cpi	r29, 0x02	; 2
    7bd6:	09 f0       	breq	.+2      	; 0x7bda <__vector_11+0x2a8>
    7bd8:	eb ce       	rjmp	.-554    	; 0x79b0 <__vector_11+0x7e>
    7bda:	ef 28       	or	r14, r15
    7bdc:	09 f0       	breq	.+2      	; 0x7be0 <__vector_11+0x2ae>
    7bde:	e8 ce       	rjmp	.-560    	; 0x79b0 <__vector_11+0x7e>
			i = wIndex & 0x7F;
    7be0:	0f 77       	andi	r16, 0x7F	; 127
			if (i >= 1 && i <= MAX_ENDPOINT) {
    7be2:	8f ef       	ldi	r24, 0xFF	; 255
    7be4:	80 0f       	add	r24, r16
    7be6:	86 30       	cpi	r24, 0x06	; 6
    7be8:	08 f0       	brcs	.+2      	; 0x7bec <__vector_11+0x2ba>
    7bea:	e2 ce       	rjmp	.-572    	; 0x79b0 <__vector_11+0x7e>
{
	while (!(UEINTX & (1<<TXINI))) ;
}
static inline void usb_send_in(void)
{
	UEINTX = ~(1<<TXINI);
    7bec:	8e ef       	ldi	r24, 0xFE	; 254
    7bee:	80 93 e8 00 	sts	0x00E8, r24	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
		if ((bRequest == CLEAR_FEATURE || bRequest == SET_FEATURE)
		  && bmRequestType == 0x02 && wValue == 0) {
			i = wIndex & 0x7F;
			if (i >= 1 && i <= MAX_ENDPOINT) {
				usb_send_in();
				UENUM = i;
    7bf2:	00 93 e9 00 	sts	0x00E9, r16	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
				if (bRequest == SET_FEATURE) {
    7bf6:	c3 30       	cpi	r28, 0x03	; 3
    7bf8:	09 f4       	brne	.+2      	; 0x7bfc <__vector_11+0x2ca>
    7bfa:	da ce       	rjmp	.-588    	; 0x79b0 <__vector_11+0x7e>
					UECONX = (1<<STALLRQ)|(1<<EPEN);
				} else {
					UECONX = (1<<STALLRQC)|(1<<RSTDT)|(1<<EPEN);
    7bfc:	89 e1       	ldi	r24, 0x19	; 25
    7bfe:	80 93 eb 00 	sts	0x00EB, r24	; 0x8000eb <__TEXT_REGION_LENGTH__+0x7e00eb>
					UERST = (1 << i);
    7c02:	81 e0       	ldi	r24, 0x01	; 1
    7c04:	90 e0       	ldi	r25, 0x00	; 0
    7c06:	01 c0       	rjmp	.+2      	; 0x7c0a <__vector_11+0x2d8>
    7c08:	88 0f       	add	r24, r24
    7c0a:	0a 95       	dec	r16
    7c0c:	ea f7       	brpl	.-6      	; 0x7c08 <__vector_11+0x2d6>
    7c0e:	4d cf       	rjmp	.-358    	; 0x7aaa <__vector_11+0x178>

00007c10 <HardwareSerial::available()>:
}

void HardwareSerial::clear()
{
	rx_buffer_head = rx_buffer_tail;
}
    7c10:	50 91 5e 10 	lds	r21, 0x105E	; 0x80105e <rx_buffer_head>
    7c14:	40 91 5d 10 	lds	r20, 0x105D	; 0x80105d <rx_buffer_tail>
    7c18:	85 2f       	mov	r24, r21
    7c1a:	90 e0       	ldi	r25, 0x00	; 0
    7c1c:	24 2f       	mov	r18, r20
    7c1e:	30 e0       	ldi	r19, 0x00	; 0
    7c20:	54 17       	cp	r21, r20
    7c22:	18 f0       	brcs	.+6      	; 0x7c2a <HardwareSerial::available()+0x1a>
    7c24:	82 1b       	sub	r24, r18
    7c26:	93 0b       	sbc	r25, r19
    7c28:	08 95       	ret
    7c2a:	80 5c       	subi	r24, 0xC0	; 192
    7c2c:	9f 4f       	sbci	r25, 0xFF	; 255
    7c2e:	fa cf       	rjmp	.-12     	; 0x7c24 <HardwareSerial::available()+0x14>

00007c30 <HardwareSerial::availableForWrite()>:
    7c30:	50 91 5e 10 	lds	r21, 0x105E	; 0x80105e <rx_buffer_head>
    7c34:	40 91 5d 10 	lds	r20, 0x105D	; 0x80105d <rx_buffer_tail>
    7c38:	25 2f       	mov	r18, r21
    7c3a:	30 e0       	ldi	r19, 0x00	; 0
    7c3c:	84 2f       	mov	r24, r20
    7c3e:	90 e0       	ldi	r25, 0x00	; 0
    7c40:	82 1b       	sub	r24, r18
    7c42:	93 0b       	sbc	r25, r19
    7c44:	54 17       	cp	r21, r20
    7c46:	10 f0       	brcs	.+4      	; 0x7c4c <HardwareSerial::availableForWrite()+0x1c>
    7c48:	87 96       	adiw	r24, 0x27	; 39
    7c4a:	08 95       	ret
    7c4c:	01 97       	sbiw	r24, 0x01	; 1
    7c4e:	08 95       	ret

00007c50 <HardwareSerial::peek()>:
    7c50:	80 91 5e 10 	lds	r24, 0x105E	; 0x80105e <rx_buffer_head>
    7c54:	e0 91 5d 10 	lds	r30, 0x105D	; 0x80105d <rx_buffer_tail>
    7c58:	8e 17       	cp	r24, r30
    7c5a:	51 f0       	breq	.+20     	; 0x7c70 <HardwareSerial::peek()+0x20>
    7c5c:	ef 5f       	subi	r30, 0xFF	; 255
    7c5e:	e0 34       	cpi	r30, 0x40	; 64
    7c60:	08 f0       	brcs	.+2      	; 0x7c64 <HardwareSerial::peek()+0x14>
    7c62:	e0 e0       	ldi	r30, 0x00	; 0
    7c64:	f0 e0       	ldi	r31, 0x00	; 0
    7c66:	e1 5a       	subi	r30, 0xA1	; 161
    7c68:	ff 4e       	sbci	r31, 0xEF	; 239
    7c6a:	80 81       	ld	r24, Z
    7c6c:	90 e0       	ldi	r25, 0x00	; 0
    7c6e:	08 95       	ret
    7c70:	8f ef       	ldi	r24, 0xFF	; 255
    7c72:	9f ef       	ldi	r25, 0xFF	; 255
    7c74:	08 95       	ret

00007c76 <HardwareSerial::read()>:
    7c76:	90 91 5e 10 	lds	r25, 0x105E	; 0x80105e <rx_buffer_head>
    7c7a:	80 91 5d 10 	lds	r24, 0x105D	; 0x80105d <rx_buffer_tail>
    7c7e:	98 17       	cp	r25, r24
    7c80:	79 f0       	breq	.+30     	; 0x7ca0 <HardwareSerial::read()+0x2a>
    7c82:	90 91 5d 10 	lds	r25, 0x105D	; 0x80105d <rx_buffer_tail>
    7c86:	9f 5f       	subi	r25, 0xFF	; 255
    7c88:	90 34       	cpi	r25, 0x40	; 64
    7c8a:	08 f0       	brcs	.+2      	; 0x7c8e <HardwareSerial::read()+0x18>
    7c8c:	90 e0       	ldi	r25, 0x00	; 0
    7c8e:	e9 2f       	mov	r30, r25
    7c90:	f0 e0       	ldi	r31, 0x00	; 0
    7c92:	e1 5a       	subi	r30, 0xA1	; 161
    7c94:	ff 4e       	sbci	r31, 0xEF	; 239
    7c96:	80 81       	ld	r24, Z
    7c98:	90 93 5d 10 	sts	0x105D, r25	; 0x80105d <rx_buffer_tail>
    7c9c:	90 e0       	ldi	r25, 0x00	; 0
    7c9e:	08 95       	ret
    7ca0:	8f ef       	ldi	r24, 0xFF	; 255
    7ca2:	9f ef       	ldi	r25, 0xFF	; 255
    7ca4:	08 95       	ret

00007ca6 <HardwareSerial::flush()>:
    7ca6:	80 91 32 10 	lds	r24, 0x1032	; 0x801032 <transmitting>
    7caa:	81 11       	cpse	r24, r1
    7cac:	fc cf       	rjmp	.-8      	; 0x7ca6 <HardwareSerial::flush()>
    7cae:	08 95       	ret

00007cb0 <HardwareSerial::write(unsigned char)>:
    7cb0:	20 91 c9 00 	lds	r18, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7cb4:	23 fd       	sbrc	r18, 3
    7cb6:	06 c0       	rjmp	.+12     	; 0x7cc4 <HardwareSerial::write(unsigned char)+0x14>
    7cb8:	21 e0       	ldi	r18, 0x01	; 1
    7cba:	fc 01       	movw	r30, r24
    7cbc:	22 83       	std	Z+2, r18	; 0x02
    7cbe:	90 e0       	ldi	r25, 0x00	; 0
    7cc0:	80 e0       	ldi	r24, 0x00	; 0
    7cc2:	08 95       	ret
    7cc4:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    7cc8:	8f 3f       	cpi	r24, 0xFF	; 255
    7cca:	41 f0       	breq	.+16     	; 0x7cdc <HardwareSerial::write(unsigned char)+0x2c>
    7ccc:	80 91 32 10 	lds	r24, 0x1032	; 0x801032 <transmitting>
    7cd0:	81 11       	cpse	r24, r1
    7cd2:	04 c0       	rjmp	.+8      	; 0x7cdc <HardwareSerial::write(unsigned char)+0x2c>
    7cd4:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
    7cd8:	f0 e0       	ldi	r31, 0x00	; 0
    7cda:	ee db       	rcall	.-2084   	; 0x74b8 <_digitalWrite_HIGH>
    7cdc:	90 91 34 10 	lds	r25, 0x1034	; 0x801034 <tx_buffer_head>
    7ce0:	80 91 33 10 	lds	r24, 0x1033	; 0x801033 <tx_buffer_tail>
    7ce4:	98 13       	cpse	r25, r24
    7ce6:	04 c0       	rjmp	.+8      	; 0x7cf0 <HardwareSerial::write(unsigned char)+0x40>
    7ce8:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    7cec:	85 fd       	sbrc	r24, 5
    7cee:	19 c0       	rjmp	.+50     	; 0x7d22 <HardwareSerial::write(unsigned char)+0x72>
    7cf0:	80 91 34 10 	lds	r24, 0x1034	; 0x801034 <tx_buffer_head>
    7cf4:	8f 5f       	subi	r24, 0xFF	; 255
    7cf6:	88 32       	cpi	r24, 0x28	; 40
    7cf8:	f8 f4       	brcc	.+62     	; 0x7d38 <HardwareSerial::write(unsigned char)+0x88>
    7cfa:	90 91 33 10 	lds	r25, 0x1033	; 0x801033 <tx_buffer_tail>
    7cfe:	98 17       	cp	r25, r24
    7d00:	e1 f3       	breq	.-8      	; 0x7cfa <HardwareSerial::write(unsigned char)+0x4a>
    7d02:	e8 2f       	mov	r30, r24
    7d04:	f0 e0       	ldi	r31, 0x00	; 0
    7d06:	eb 5c       	subi	r30, 0xCB	; 203
    7d08:	ff 4e       	sbci	r31, 0xEF	; 239
    7d0a:	60 83       	st	Z, r22
    7d0c:	91 e0       	ldi	r25, 0x01	; 1
    7d0e:	90 93 32 10 	sts	0x1032, r25	; 0x801032 <transmitting>
    7d12:	80 93 34 10 	sts	0x1034, r24	; 0x801034 <tx_buffer_head>
    7d16:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7d1a:	80 62       	ori	r24, 0x20	; 32
    7d1c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7d20:	08 c0       	rjmp	.+16     	; 0x7d32 <HardwareSerial::write(unsigned char)+0x82>
    7d22:	8f b7       	in	r24, 0x3f	; 63
    7d24:	f8 94       	cli
    7d26:	60 93 ce 00 	sts	0x00CE, r22	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
    7d2a:	91 e0       	ldi	r25, 0x01	; 1
    7d2c:	90 93 32 10 	sts	0x1032, r25	; 0x801032 <transmitting>
    7d30:	8f bf       	out	0x3f, r24	; 63
    7d32:	81 e0       	ldi	r24, 0x01	; 1
    7d34:	90 e0       	ldi	r25, 0x00	; 0
    7d36:	08 95       	ret
    7d38:	80 e0       	ldi	r24, 0x00	; 0
    7d3a:	df cf       	rjmp	.-66     	; 0x7cfa <HardwareSerial::write(unsigned char)+0x4a>

00007d3c <HardwareSerial::_begin(unsigned int, unsigned char)>:
    7d3c:	1f 93       	push	r17
    7d3e:	cf 93       	push	r28
    7d40:	df 93       	push	r29
    7d42:	eb 01       	movw	r28, r22
    7d44:	14 2f       	mov	r17, r20
    7d46:	40 93 18 01 	sts	0x0118, r20	; 0x800118 <tx_enable_pin>
    7d4a:	4f 3f       	cpi	r20, 0xFF	; 255
    7d4c:	29 f0       	breq	.+10     	; 0x7d58 <HardwareSerial::_begin(unsigned int, unsigned char)+0x1c>
    7d4e:	84 2f       	mov	r24, r20
    7d50:	a2 db       	rcall	.-2236   	; 0x7496 <_pinMode_output>
    7d52:	e1 2f       	mov	r30, r17
    7d54:	f0 e0       	ldi	r31, 0x00	; 0
    7d56:	b6 db       	rcall	.-2196   	; 0x74c4 <_digitalWrite_LOW>
    7d58:	c0 ff       	sbrs	r28, 0
    7d5a:	24 c0       	rjmp	.+72     	; 0x7da4 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    7d5c:	c1 30       	cpi	r28, 0x01	; 1
    7d5e:	80 e1       	ldi	r24, 0x10	; 16
    7d60:	d8 07       	cpc	r29, r24
    7d62:	00 f5       	brcc	.+64     	; 0x7da4 <HardwareSerial::_begin(unsigned int, unsigned char)+0x68>
    7d64:	82 e0       	ldi	r24, 0x02	; 2
    7d66:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    7d6a:	21 97       	sbiw	r28, 0x01	; 1
    7d6c:	d0 93 cd 00 	sts	0x00CD, r29	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7e00cd>
    7d70:	c0 93 cc 00 	sts	0x00CC, r28	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7e00cc>
    7d74:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7d78:	83 fd       	sbrc	r24, 3
    7d7a:	10 c0       	rjmp	.+32     	; 0x7d9c <HardwareSerial::_begin(unsigned int, unsigned char)+0x60>
    7d7c:	10 92 5e 10 	sts	0x105E, r1	; 0x80105e <rx_buffer_head>
    7d80:	10 92 5d 10 	sts	0x105D, r1	; 0x80105d <rx_buffer_tail>
    7d84:	10 92 34 10 	sts	0x1034, r1	; 0x801034 <tx_buffer_head>
    7d88:	10 92 33 10 	sts	0x1033, r1	; 0x801033 <tx_buffer_tail>
    7d8c:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <transmitting>
    7d90:	86 e0       	ldi	r24, 0x06	; 6
    7d92:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7e00ca>
    7d96:	88 ed       	ldi	r24, 0xD8	; 216
    7d98:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7d9c:	df 91       	pop	r29
    7d9e:	cf 91       	pop	r28
    7da0:	1f 91       	pop	r17
    7da2:	08 95       	ret
    7da4:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7e00c8>
    7da8:	d6 95       	lsr	r29
    7daa:	c7 95       	ror	r28
    7dac:	de cf       	rjmp	.-68     	; 0x7d6a <HardwareSerial::_begin(unsigned int, unsigned char)+0x2e>

00007dae <__vector_25>:
	return 1;
#endif
}

ISR(USART1_RX_vect)
{
    7dae:	1f 92       	push	r1
    7db0:	0f 92       	push	r0
    7db2:	0f b6       	in	r0, 0x3f	; 63
    7db4:	0f 92       	push	r0
    7db6:	11 24       	eor	r1, r1
    7db8:	0b b6       	in	r0, 0x3b	; 59
    7dba:	0f 92       	push	r0
    7dbc:	2f 93       	push	r18
    7dbe:	8f 93       	push	r24
    7dc0:	9f 93       	push	r25
    7dc2:	ef 93       	push	r30
    7dc4:	ff 93       	push	r31
	uint8_t c, i;

	c = UDR1;
    7dc6:	90 91 ce 00 	lds	r25, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
	i = rx_buffer_head + 1;
    7dca:	80 91 5e 10 	lds	r24, 0x105E	; 0x80105e <rx_buffer_head>
    7dce:	8f 5f       	subi	r24, 0xFF	; 255
	if (i >= RX_BUFFER_SIZE) i = 0;
    7dd0:	80 34       	cpi	r24, 0x40	; 64
    7dd2:	08 f0       	brcs	.+2      	; 0x7dd6 <__vector_25+0x28>
    7dd4:	80 e0       	ldi	r24, 0x00	; 0
	if (i != rx_buffer_tail) {
    7dd6:	20 91 5d 10 	lds	r18, 0x105D	; 0x80105d <rx_buffer_tail>
    7dda:	28 17       	cp	r18, r24
    7ddc:	39 f0       	breq	.+14     	; 0x7dec <__vector_25+0x3e>
		rx_buffer[i] = c;
    7dde:	e8 2f       	mov	r30, r24
    7de0:	f0 e0       	ldi	r31, 0x00	; 0
    7de2:	e1 5a       	subi	r30, 0xA1	; 161
    7de4:	ff 4e       	sbci	r31, 0xEF	; 239
    7de6:	90 83       	st	Z, r25
		rx_buffer_head = i;
    7de8:	80 93 5e 10 	sts	0x105E, r24	; 0x80105e <rx_buffer_head>
	}
}
    7dec:	ff 91       	pop	r31
    7dee:	ef 91       	pop	r30
    7df0:	9f 91       	pop	r25
    7df2:	8f 91       	pop	r24
    7df4:	2f 91       	pop	r18
    7df6:	0f 90       	pop	r0
    7df8:	0b be       	out	0x3b, r0	; 59
    7dfa:	0f 90       	pop	r0
    7dfc:	0f be       	out	0x3f, r0	; 63
    7dfe:	0f 90       	pop	r0
    7e00:	1f 90       	pop	r1
    7e02:	18 95       	reti

00007e04 <__vector_26>:

ISR(USART1_UDRE_vect)
{
    7e04:	1f 92       	push	r1
    7e06:	0f 92       	push	r0
    7e08:	0f b6       	in	r0, 0x3f	; 63
    7e0a:	0f 92       	push	r0
    7e0c:	11 24       	eor	r1, r1
    7e0e:	0b b6       	in	r0, 0x3b	; 59
    7e10:	0f 92       	push	r0
    7e12:	8f 93       	push	r24
    7e14:	9f 93       	push	r25
    7e16:	ef 93       	push	r30
    7e18:	ff 93       	push	r31
	uint8_t i;

	if (tx_buffer_head == tx_buffer_tail) {
    7e1a:	90 91 34 10 	lds	r25, 0x1034	; 0x801034 <tx_buffer_head>
    7e1e:	80 91 33 10 	lds	r24, 0x1033	; 0x801033 <tx_buffer_tail>
    7e22:	98 13       	cpse	r25, r24
    7e24:	10 c0       	rjmp	.+32     	; 0x7e46 <__vector_26+0x42>
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
    7e26:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
    7e2a:	8f 7d       	andi	r24, 0xDF	; 223
    7e2c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7e00c9>
		i = tx_buffer_tail + 1;
		if (i >= TX_BUFFER_SIZE) i = 0;
		UDR1 = tx_buffer[i];
		tx_buffer_tail = i;
	}
}
    7e30:	ff 91       	pop	r31
    7e32:	ef 91       	pop	r30
    7e34:	9f 91       	pop	r25
    7e36:	8f 91       	pop	r24
    7e38:	0f 90       	pop	r0
    7e3a:	0b be       	out	0x3b, r0	; 59
    7e3c:	0f 90       	pop	r0
    7e3e:	0f be       	out	0x3f, r0	; 63
    7e40:	0f 90       	pop	r0
    7e42:	1f 90       	pop	r1
    7e44:	18 95       	reti
	if (tx_buffer_head == tx_buffer_tail) {
		// buffer is empty, disable transmit interrupt
		//UCSR1B = (1<<RXEN1) | (1<<TXCIE1) | (1<<TXEN1) | (1<<RXCIE1);
		cbi(UCSR1B, UDRIE1);
	} else {
		i = tx_buffer_tail + 1;
    7e46:	80 91 33 10 	lds	r24, 0x1033	; 0x801033 <tx_buffer_tail>
    7e4a:	8f 5f       	subi	r24, 0xFF	; 255
		if (i >= TX_BUFFER_SIZE) i = 0;
    7e4c:	88 32       	cpi	r24, 0x28	; 40
    7e4e:	08 f0       	brcs	.+2      	; 0x7e52 <__vector_26+0x4e>
    7e50:	80 e0       	ldi	r24, 0x00	; 0
		UDR1 = tx_buffer[i];
    7e52:	e8 2f       	mov	r30, r24
    7e54:	f0 e0       	ldi	r31, 0x00	; 0
    7e56:	eb 5c       	subi	r30, 0xCB	; 203
    7e58:	ff 4e       	sbci	r31, 0xEF	; 239
    7e5a:	90 81       	ld	r25, Z
    7e5c:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7e00ce>
		tx_buffer_tail = i;
    7e60:	80 93 33 10 	sts	0x1033, r24	; 0x801033 <tx_buffer_tail>
	}
}
    7e64:	e5 cf       	rjmp	.-54     	; 0x7e30 <__vector_26+0x2c>

00007e66 <__vector_27>:

ISR(USART1_TX_vect)
{
    7e66:	1f 92       	push	r1
    7e68:	0f 92       	push	r0
    7e6a:	0f b6       	in	r0, 0x3f	; 63
    7e6c:	0f 92       	push	r0
    7e6e:	11 24       	eor	r1, r1
    7e70:	0b b6       	in	r0, 0x3b	; 59
    7e72:	0f 92       	push	r0
    7e74:	8f 93       	push	r24
    7e76:	ef 93       	push	r30
    7e78:	ff 93       	push	r31
	transmitting = 0;
    7e7a:	10 92 32 10 	sts	0x1032, r1	; 0x801032 <transmitting>
	if (tx_enable_pin < 255) {
    7e7e:	80 91 18 01 	lds	r24, 0x0118	; 0x800118 <tx_enable_pin>
    7e82:	8f 3f       	cpi	r24, 0xFF	; 255
    7e84:	21 f0       	breq	.+8      	; 0x7e8e <__vector_27+0x28>
		digitalWrite(tx_enable_pin, LOW);
    7e86:	e0 91 18 01 	lds	r30, 0x0118	; 0x800118 <tx_enable_pin>
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
			} else {
				uint16_t tmp = (pin);
    7e8a:	f0 e0       	ldi	r31, 0x00	; 0
					#else
					"call _digitalWrite_LOW"
					#endif
					: "+z" (tmp)
					: "I" (CORE_NUM_TOTAL_PINS)
				);
    7e8c:	1b db       	rcall	.-2506   	; 0x74c4 <_digitalWrite_LOW>
	}
}
    7e8e:	ff 91       	pop	r31
    7e90:	ef 91       	pop	r30
    7e92:	8f 91       	pop	r24
    7e94:	0f 90       	pop	r0
    7e96:	0b be       	out	0x3b, r0	; 59
    7e98:	0f 90       	pop	r0
    7e9a:	0f be       	out	0x3f, r0	; 63
    7e9c:	0f 90       	pop	r0
    7e9e:	1f 90       	pop	r1
    7ea0:	18 95       	reti

00007ea2 <_GLOBAL__sub_I__ZN14HardwareSerial6_beginEjh>:
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    7ea2:	ea e2       	ldi	r30, 0x2A	; 42
    7ea4:	f0 e1       	ldi	r31, 0x10	; 16
    7ea6:	12 82       	std	Z+2, r1	; 0x02
#include "Print.h"

class Stream : public Print
{
  public:
	Stream() : _timeout(1000), read_error(0) {}
    7ea8:	88 ee       	ldi	r24, 0xE8	; 232
    7eaa:	93 e0       	ldi	r25, 0x03	; 3
    7eac:	a0 e0       	ldi	r26, 0x00	; 0
    7eae:	b0 e0       	ldi	r27, 0x00	; 0
    7eb0:	83 83       	std	Z+3, r24	; 0x03
    7eb2:	94 83       	std	Z+4, r25	; 0x04
    7eb4:	a5 83       	std	Z+5, r26	; 0x05
    7eb6:	b6 83       	std	Z+6, r27	; 0x06
    7eb8:	17 82       	std	Z+7, r1	; 0x07
#define HardwareSerial_h

#include <inttypes.h>
#include "Stream.h"

class HardwareSerial : public Stream
    7eba:	85 e0       	ldi	r24, 0x05	; 5
    7ebc:	99 e0       	ldi	r25, 0x09	; 9
    7ebe:	91 83       	std	Z+1, r25	; 0x01
    7ec0:	80 83       	st	Z, r24

// Preinstantiate Objects //////////////////////////////////////////////////////

HardwareSerial Serial1;
    7ec2:	08 95       	ret

00007ec4 <main>:
#include <WProgram.h>

//int main(void) __attribute__((noreturn));
int main(void)
{
	_init_Teensyduino_internal_();
    7ec4:	9a da       	rcall	.-2764   	; 0x73fa <_init_Teensyduino_internal_>

	setup();
    7ec6:	0e 94 22 17 	call	0x2e44	; 0x2e44 <setup>
    
	while (1) {
		loop();
    7eca:	0e 94 df 28 	call	0x51be	; 0x51be <loop>
    7ece:	fd cf       	rjmp	.-6      	; 0x7eca <main+0x6>

00007ed0 <operator new(unsigned int)>:
  free(ptr);
}

int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
void __cxa_guard_abort (__guard *) {}; 
    7ed0:	73 c8       	rjmp	.-3866   	; 0x6fb8 <malloc>

00007ed2 <__cxa_guard_acquire>:
    7ed2:	fc 01       	movw	r30, r24
    7ed4:	81 e0       	ldi	r24, 0x01	; 1
    7ed6:	90 e0       	ldi	r25, 0x00	; 0
    7ed8:	20 81       	ld	r18, Z
    7eda:	22 23       	and	r18, r18
    7edc:	11 f0       	breq	.+4      	; 0x7ee2 <__cxa_guard_acquire+0x10>
    7ede:	90 e0       	ldi	r25, 0x00	; 0
    7ee0:	80 e0       	ldi	r24, 0x00	; 0
    7ee2:	08 95       	ret

00007ee4 <__cxa_guard_release>:
    7ee4:	21 e0       	ldi	r18, 0x01	; 1
    7ee6:	fc 01       	movw	r30, r24
    7ee8:	20 83       	st	Z, r18
    7eea:	08 95       	ret

00007eec <__cxa_pure_virtual>:

void __cxa_pure_virtual(void) {};
    7eec:	08 95       	ret

00007eee <Print::write(unsigned char const*, unsigned int)>:

	fdev_setup_stream(&f, printf_putchar, NULL, _FDEV_SETUP_WRITE);
	fdev_set_udata(&f, this);
	va_start(ap, format);
	return vfprintf_P(&f, (const char *)format, ap);
}
    7eee:	cf 92       	push	r12
    7ef0:	df 92       	push	r13
    7ef2:	ef 92       	push	r14
    7ef4:	ff 92       	push	r15
    7ef6:	0f 93       	push	r16
    7ef8:	1f 93       	push	r17
    7efa:	cf 93       	push	r28
    7efc:	df 93       	push	r29
    7efe:	6c 01       	movw	r12, r24
    7f00:	eb 01       	movw	r28, r22
    7f02:	7b 01       	movw	r14, r22
    7f04:	e4 0e       	add	r14, r20
    7f06:	f5 1e       	adc	r15, r21
    7f08:	10 e0       	ldi	r17, 0x00	; 0
    7f0a:	00 e0       	ldi	r16, 0x00	; 0
    7f0c:	ce 15       	cp	r28, r14
    7f0e:	df 05       	cpc	r29, r15
    7f10:	61 f0       	breq	.+24     	; 0x7f2a <Print::write(unsigned char const*, unsigned int)+0x3c>
    7f12:	69 91       	ld	r22, Y+
    7f14:	d6 01       	movw	r26, r12
    7f16:	ed 91       	ld	r30, X+
    7f18:	fc 91       	ld	r31, X
    7f1a:	01 90       	ld	r0, Z+
    7f1c:	f0 81       	ld	r31, Z
    7f1e:	e0 2d       	mov	r30, r0
    7f20:	c6 01       	movw	r24, r12
    7f22:	09 95       	icall
    7f24:	08 0f       	add	r16, r24
    7f26:	19 1f       	adc	r17, r25
    7f28:	f1 cf       	rjmp	.-30     	; 0x7f0c <Print::write(unsigned char const*, unsigned int)+0x1e>
    7f2a:	c8 01       	movw	r24, r16
    7f2c:	df 91       	pop	r29
    7f2e:	cf 91       	pop	r28
    7f30:	1f 91       	pop	r17
    7f32:	0f 91       	pop	r16
    7f34:	ff 90       	pop	r15
    7f36:	ef 90       	pop	r14
    7f38:	df 90       	pop	r13
    7f3a:	cf 90       	pop	r12
    7f3c:	08 95       	ret

00007f3e <Print::print(String const&)>:
    7f3e:	8f 92       	push	r8
    7f40:	9f 92       	push	r9
    7f42:	af 92       	push	r10
    7f44:	bf 92       	push	r11
    7f46:	cf 92       	push	r12
    7f48:	df 92       	push	r13
    7f4a:	ef 92       	push	r14
    7f4c:	ff 92       	push	r15
    7f4e:	0f 93       	push	r16
    7f50:	1f 93       	push	r17
    7f52:	cf 93       	push	r28
    7f54:	df 93       	push	r29
    7f56:	cd b7       	in	r28, 0x3d	; 61
    7f58:	de b7       	in	r29, 0x3e	; 62
    7f5a:	a1 97       	sbiw	r28, 0x21	; 33
    7f5c:	0f b6       	in	r0, 0x3f	; 63
    7f5e:	f8 94       	cli
    7f60:	de bf       	out	0x3e, r29	; 62
    7f62:	0f be       	out	0x3f, r0	; 63
    7f64:	cd bf       	out	0x3d, r28	; 61
    7f66:	5c 01       	movw	r10, r24
    7f68:	4b 01       	movw	r8, r22
    7f6a:	db 01       	movw	r26, r22
    7f6c:	14 96       	adiw	r26, 0x04	; 4
    7f6e:	0d 91       	ld	r16, X+
    7f70:	1c 91       	ld	r17, X
    7f72:	d1 2c       	mov	r13, r1
    7f74:	c1 2c       	mov	r12, r1
    7f76:	f1 2c       	mov	r15, r1
    7f78:	e1 2c       	mov	r14, r1
    7f7a:	01 15       	cp	r16, r1
    7f7c:	11 05       	cpc	r17, r1
    7f7e:	01 f1       	breq	.+64     	; 0x7fc0 <Print::print(String const&)+0x82>
    7f80:	96 01       	movw	r18, r12
    7f82:	41 e2       	ldi	r20, 0x21	; 33
    7f84:	50 e0       	ldi	r21, 0x00	; 0
    7f86:	be 01       	movw	r22, r28
    7f88:	6f 5f       	subi	r22, 0xFF	; 255
    7f8a:	7f 4f       	sbci	r23, 0xFF	; 255
    7f8c:	c4 01       	movw	r24, r8
    7f8e:	5a d3       	rcall	.+1716   	; 0x8644 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>
    7f90:	a8 01       	movw	r20, r16
    7f92:	01 32       	cpi	r16, 0x21	; 33
    7f94:	11 05       	cpc	r17, r1
    7f96:	10 f0       	brcs	.+4      	; 0x7f9c <Print::print(String const&)+0x5e>
    7f98:	40 e2       	ldi	r20, 0x20	; 32
    7f9a:	50 e0       	ldi	r21, 0x00	; 0
    7f9c:	c4 0e       	add	r12, r20
    7f9e:	d5 1e       	adc	r13, r21
    7fa0:	04 1b       	sub	r16, r20
    7fa2:	15 0b       	sbc	r17, r21
    7fa4:	d5 01       	movw	r26, r10
    7fa6:	ed 91       	ld	r30, X+
    7fa8:	fc 91       	ld	r31, X
    7faa:	02 80       	ldd	r0, Z+2	; 0x02
    7fac:	f3 81       	ldd	r31, Z+3	; 0x03
    7fae:	e0 2d       	mov	r30, r0
    7fb0:	be 01       	movw	r22, r28
    7fb2:	6f 5f       	subi	r22, 0xFF	; 255
    7fb4:	7f 4f       	sbci	r23, 0xFF	; 255
    7fb6:	c5 01       	movw	r24, r10
    7fb8:	09 95       	icall
    7fba:	e8 0e       	add	r14, r24
    7fbc:	f9 1e       	adc	r15, r25
    7fbe:	dd cf       	rjmp	.-70     	; 0x7f7a <Print::print(String const&)+0x3c>
    7fc0:	c7 01       	movw	r24, r14
    7fc2:	a1 96       	adiw	r28, 0x21	; 33
    7fc4:	0f b6       	in	r0, 0x3f	; 63
    7fc6:	f8 94       	cli
    7fc8:	de bf       	out	0x3e, r29	; 62
    7fca:	0f be       	out	0x3f, r0	; 63
    7fcc:	cd bf       	out	0x3d, r28	; 61
    7fce:	df 91       	pop	r29
    7fd0:	cf 91       	pop	r28
    7fd2:	1f 91       	pop	r17
    7fd4:	0f 91       	pop	r16
    7fd6:	ff 90       	pop	r15
    7fd8:	ef 90       	pop	r14
    7fda:	df 90       	pop	r13
    7fdc:	cf 90       	pop	r12
    7fde:	bf 90       	pop	r11
    7fe0:	af 90       	pop	r10
    7fe2:	9f 90       	pop	r9
    7fe4:	8f 90       	pop	r8
    7fe6:	08 95       	ret

00007fe8 <Print::println()>:
    7fe8:	cf 93       	push	r28
    7fea:	df 93       	push	r29
    7fec:	00 d0       	rcall	.+0      	; 0x7fee <Print::println()+0x6>
    7fee:	cd b7       	in	r28, 0x3d	; 61
    7ff0:	de b7       	in	r29, 0x3e	; 62
    7ff2:	2d e0       	ldi	r18, 0x0D	; 13
    7ff4:	29 83       	std	Y+1, r18	; 0x01
    7ff6:	2a e0       	ldi	r18, 0x0A	; 10
    7ff8:	2a 83       	std	Y+2, r18	; 0x02
    7ffa:	dc 01       	movw	r26, r24
    7ffc:	ed 91       	ld	r30, X+
    7ffe:	fc 91       	ld	r31, X
    8000:	02 80       	ldd	r0, Z+2	; 0x02
    8002:	f3 81       	ldd	r31, Z+3	; 0x03
    8004:	e0 2d       	mov	r30, r0
    8006:	42 e0       	ldi	r20, 0x02	; 2
    8008:	50 e0       	ldi	r21, 0x00	; 0
    800a:	be 01       	movw	r22, r28
    800c:	6f 5f       	subi	r22, 0xFF	; 255
    800e:	7f 4f       	sbci	r23, 0xFF	; 255
    8010:	09 95       	icall
    8012:	0f 90       	pop	r0
    8014:	0f 90       	pop	r0
    8016:	df 91       	pop	r29
    8018:	cf 91       	pop	r28
    801a:	08 95       	ret

0000801c <Print::printNumberDec(unsigned long, unsigned char)>:
uint32_t usec_print = 0;
#endif


size_t Print::printNumberDec(unsigned long n, uint8_t sign)
{
    801c:	cf 93       	push	r28
    801e:	df 93       	push	r29
    8020:	cd b7       	in	r28, 0x3d	; 61
    8022:	de b7       	in	r29, 0x3e	; 62
    8024:	2b 97       	sbiw	r28, 0x0b	; 11
    8026:	0f b6       	in	r0, 0x3f	; 63
    8028:	f8 94       	cli
    802a:	de bf       	out	0x3e, r29	; 62
    802c:	0f be       	out	0x3f, r0	; 63
    802e:	cd bf       	out	0x3d, r28	; 61
#endif

#ifdef USE_BENCHMARK_CODE
	uint32_t usec = micros();
#endif
	p = buf + (sizeof(buf));
    8030:	fe 01       	movw	r30, r28
    8032:	3c 96       	adiw	r30, 0x0c	; 12
	do {
		#if defined(USE_HACKER_DELIGHT_OPTIMIZATION)
		divmod10_asm(n, tmp32, digit);
		#elif defined(USE_STIMMER_OPTIMIZATION)
		divmod10_asm(n, digit, tmp8);
    8034:	a3 e3       	ldi	r26, 0x33	; 51
    8036:	4a 9f       	mul	r20, r26
    8038:	44 27       	eor	r20, r20
    803a:	0a 0e       	add	r0, r26
    803c:	41 1d       	adc	r20, r1
    803e:	30 2d       	mov	r19, r0
    8040:	5a 9f       	mul	r21, r26
    8042:	55 27       	eor	r21, r21
    8044:	40 0d       	add	r20, r0
    8046:	51 1d       	adc	r21, r1
    8048:	6a 9f       	mul	r22, r26
    804a:	66 27       	eor	r22, r22
    804c:	50 0d       	add	r21, r0
    804e:	61 1d       	adc	r22, r1
    8050:	7a 9f       	mul	r23, r26
    8052:	77 27       	eor	r23, r23
    8054:	60 0d       	add	r22, r0
    8056:	71 1d       	adc	r23, r1
    8058:	11 24       	eor	r1, r1
    805a:	34 0f       	add	r19, r20
    805c:	45 1f       	adc	r20, r21
    805e:	56 1f       	adc	r21, r22
    8060:	67 1f       	adc	r22, r23
    8062:	71 1d       	adc	r23, r1
    8064:	35 0f       	add	r19, r21
    8066:	46 1f       	adc	r20, r22
    8068:	57 1f       	adc	r21, r23
    806a:	61 1d       	adc	r22, r1
    806c:	71 1d       	adc	r23, r1
    806e:	37 0f       	add	r19, r23
    8070:	41 1d       	adc	r20, r1
    8072:	51 1d       	adc	r21, r1
    8074:	61 1d       	adc	r22, r1
    8076:	71 1d       	adc	r23, r1
    8078:	76 95       	lsr	r23
    807a:	67 95       	ror	r22
    807c:	57 95       	ror	r21
    807e:	47 95       	ror	r20
    8080:	37 95       	ror	r19
    8082:	aa e0       	ldi	r26, 0x0A	; 10
    8084:	3a 9f       	mul	r19, r26
    8086:	31 2d       	mov	r19, r1
    8088:	11 24       	eor	r1, r1
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    808a:	df 01       	movw	r26, r30
    808c:	30 5d       	subi	r19, 0xD0	; 208
    808e:	3e 93       	st	-X, r19
	} while (n);
    8090:	41 15       	cp	r20, r1
    8092:	51 05       	cpc	r21, r1
    8094:	61 05       	cpc	r22, r1
    8096:	71 05       	cpc	r23, r1
    8098:	09 f5       	brne	.+66     	; 0x80dc <Print::printNumberDec(unsigned long, unsigned char)+0xc0>
	if (sign) *--p = '-';
    809a:	22 23       	and	r18, r18
    809c:	41 f0       	breq	.+16     	; 0x80ae <Print::printNumberDec(unsigned long, unsigned char)+0x92>
    809e:	bd 01       	movw	r22, r26
    80a0:	61 50       	subi	r22, 0x01	; 1
    80a2:	71 09       	sbc	r23, r1
    80a4:	2d e2       	ldi	r18, 0x2D	; 45
    80a6:	db 01       	movw	r26, r22
    80a8:	2c 93       	st	X, r18
    80aa:	df 01       	movw	r26, r30
    80ac:	12 97       	sbiw	r26, 0x02	; 2
#ifdef USE_BENCHMARK_CODE
	usec_print += micros() - usec;
#endif
	return write(p, sizeof(buf) - (p - buf));
    80ae:	ae 01       	movw	r20, r28
    80b0:	4a 1b       	sub	r20, r26
    80b2:	5b 0b       	sbc	r21, r27
    80b4:	44 5f       	subi	r20, 0xF4	; 244
    80b6:	5f 4f       	sbci	r21, 0xFF	; 255
    80b8:	fc 01       	movw	r30, r24
    80ba:	20 81       	ld	r18, Z
    80bc:	31 81       	ldd	r19, Z+1	; 0x01
    80be:	f9 01       	movw	r30, r18
    80c0:	22 81       	ldd	r18, Z+2	; 0x02
    80c2:	33 81       	ldd	r19, Z+3	; 0x03
    80c4:	bd 01       	movw	r22, r26
    80c6:	f9 01       	movw	r30, r18
    80c8:	09 95       	icall
}
    80ca:	2b 96       	adiw	r28, 0x0b	; 11
    80cc:	0f b6       	in	r0, 0x3f	; 63
    80ce:	f8 94       	cli
    80d0:	de bf       	out	0x3e, r29	; 62
    80d2:	0f be       	out	0x3f, r0	; 63
    80d4:	cd bf       	out	0x3d, r28	; 61
    80d6:	df 91       	pop	r29
    80d8:	cf 91       	pop	r28
    80da:	08 95       	ret
		#else
		tmp32 = n;
		n = n / 10;
		digit = tmp32 - n * 10;
		#endif
		*--p = digit + '0';
    80dc:	fd 01       	movw	r30, r26
    80de:	aa cf       	rjmp	.-172    	; 0x8034 <Print::printNumberDec(unsigned long, unsigned char)+0x18>

000080e0 <usb_serial_class::write(unsigned char)>:
	if (usb_configuration &&
	  (cdc_line_rtsdtr & (USB_SERIAL_DTR | USB_SERIAL_RTS))) {
		return true;
	}
	return false;
}
    80e0:	cf 93       	push	r28
    80e2:	df 93       	push	r29
    80e4:	1f 92       	push	r1
    80e6:	cd b7       	in	r28, 0x3d	; 61
    80e8:	de b7       	in	r29, 0x3e	; 62
    80ea:	69 83       	std	Y+1, r22	; 0x01
    80ec:	dc 01       	movw	r26, r24
    80ee:	ed 91       	ld	r30, X+
    80f0:	fc 91       	ld	r31, X
    80f2:	02 80       	ldd	r0, Z+2	; 0x02
    80f4:	f3 81       	ldd	r31, Z+3	; 0x03
    80f6:	e0 2d       	mov	r30, r0
    80f8:	41 e0       	ldi	r20, 0x01	; 1
    80fa:	50 e0       	ldi	r21, 0x00	; 0
    80fc:	be 01       	movw	r22, r28
    80fe:	6f 5f       	subi	r22, 0xFF	; 255
    8100:	7f 4f       	sbci	r23, 0xFF	; 255
    8102:	09 95       	icall
    8104:	0f 90       	pop	r0
    8106:	df 91       	pop	r29
    8108:	cf 91       	pop	r28
    810a:	08 95       	ret

0000810c <usb_serial_class::available()>:
    810c:	fc 01       	movw	r30, r24
    810e:	8f b7       	in	r24, 0x3f	; 63
    8110:	f8 94       	cli
    8112:	90 91 ad 10 	lds	r25, 0x10AD	; 0x8010ad <usb_configuration>
    8116:	91 11       	cpse	r25, r1
    8118:	0c c0       	rjmp	.+24     	; 0x8132 <usb_serial_class::available()+0x26>
    811a:	90 e0       	ldi	r25, 0x00	; 0
    811c:	8f bf       	out	0x3f, r24	; 63
    811e:	20 85       	ldd	r18, Z+8	; 0x08
    8120:	31 85       	ldd	r19, Z+9	; 0x09
    8122:	37 fd       	sbrc	r19, 7
    8124:	03 c0       	rjmp	.+6      	; 0x812c <usb_serial_class::available()+0x20>
    8126:	9f 3f       	cpi	r25, 0xFF	; 255
    8128:	09 f0       	breq	.+2      	; 0x812c <usb_serial_class::available()+0x20>
    812a:	9f 5f       	subi	r25, 0xFF	; 255
    812c:	89 2f       	mov	r24, r25
    812e:	90 e0       	ldi	r25, 0x00	; 0
    8130:	08 95       	ret
    8132:	93 e0       	ldi	r25, 0x03	; 3
    8134:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    8138:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    813c:	91 11       	cpse	r25, r1
    813e:	ee cf       	rjmp	.-36     	; 0x811c <usb_serial_class::available()+0x10>
    8140:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8144:	22 ff       	sbrs	r18, 2
    8146:	e9 cf       	rjmp	.-46     	; 0x811a <usb_serial_class::available()+0xe>
    8148:	25 fd       	sbrc	r18, 5
    814a:	e7 cf       	rjmp	.-50     	; 0x811a <usb_serial_class::available()+0xe>
    814c:	2b e6       	ldi	r18, 0x6B	; 107
    814e:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8152:	e4 cf       	rjmp	.-56     	; 0x811c <usb_serial_class::available()+0x10>

00008154 <usb_serial_class::peek()>:
    8154:	cf 93       	push	r28
    8156:	df 93       	push	r29
    8158:	ec 01       	movw	r28, r24
    815a:	88 85       	ldd	r24, Y+8	; 0x08
    815c:	99 85       	ldd	r25, Y+9	; 0x09
    815e:	97 ff       	sbrs	r25, 7
    8160:	09 c0       	rjmp	.+18     	; 0x8174 <usb_serial_class::peek()+0x20>
    8162:	e8 81       	ld	r30, Y
    8164:	f9 81       	ldd	r31, Y+1	; 0x01
    8166:	02 84       	ldd	r0, Z+10	; 0x0a
    8168:	f3 85       	ldd	r31, Z+11	; 0x0b
    816a:	e0 2d       	mov	r30, r0
    816c:	ce 01       	movw	r24, r28
    816e:	09 95       	icall
    8170:	99 87       	std	Y+9, r25	; 0x09
    8172:	88 87       	std	Y+8, r24	; 0x08
    8174:	88 85       	ldd	r24, Y+8	; 0x08
    8176:	99 85       	ldd	r25, Y+9	; 0x09
    8178:	df 91       	pop	r29
    817a:	cf 91       	pop	r28
    817c:	08 95       	ret

0000817e <usb_serial_class::read()>:
    817e:	fc 01       	movw	r30, r24
    8180:	20 85       	ldd	r18, Z+8	; 0x08
    8182:	31 85       	ldd	r19, Z+9	; 0x09
    8184:	37 fd       	sbrc	r19, 7
    8186:	07 c0       	rjmp	.+14     	; 0x8196 <usb_serial_class::read()+0x18>
    8188:	4f ef       	ldi	r20, 0xFF	; 255
    818a:	5f ef       	ldi	r21, 0xFF	; 255
    818c:	51 87       	std	Z+9, r21	; 0x09
    818e:	40 87       	std	Z+8, r20	; 0x08
    8190:	c9 01       	movw	r24, r18
    8192:	99 27       	eor	r25, r25
    8194:	08 95       	ret
    8196:	9f b7       	in	r25, 0x3f	; 63
    8198:	f8 94       	cli
    819a:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <usb_configuration>
    819e:	81 11       	cpse	r24, r1
    81a0:	04 c0       	rjmp	.+8      	; 0x81aa <usb_serial_class::read()+0x2c>
    81a2:	9f bf       	out	0x3f, r25	; 63
    81a4:	8f ef       	ldi	r24, 0xFF	; 255
    81a6:	9f ef       	ldi	r25, 0xFF	; 255
    81a8:	08 95       	ret
    81aa:	83 e0       	ldi	r24, 0x03	; 3
    81ac:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    81b0:	2b e6       	ldi	r18, 0x6B	; 107
    81b2:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    81b6:	85 fd       	sbrc	r24, 5
    81b8:	05 c0       	rjmp	.+10     	; 0x81c4 <usb_serial_class::read()+0x46>
    81ba:	82 ff       	sbrs	r24, 2
    81bc:	f2 cf       	rjmp	.-28     	; 0x81a2 <usb_serial_class::read()+0x24>
    81be:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    81c2:	f7 cf       	rjmp	.-18     	; 0x81b2 <usb_serial_class::read()+0x34>
    81c4:	80 91 f1 00 	lds	r24, 0x00F1	; 0x8000f1 <__TEXT_REGION_LENGTH__+0x7e00f1>
    81c8:	20 91 e8 00 	lds	r18, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    81cc:	25 fd       	sbrc	r18, 5
    81ce:	03 c0       	rjmp	.+6      	; 0x81d6 <usb_serial_class::read()+0x58>
    81d0:	2b e6       	ldi	r18, 0x6B	; 107
    81d2:	20 93 e8 00 	sts	0x00E8, r18	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    81d6:	9f bf       	out	0x3f, r25	; 63
    81d8:	90 e0       	ldi	r25, 0x00	; 0
    81da:	08 95       	ret

000081dc <usb_serial_class::availableForWrite()>:
    81dc:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <usb_configuration>
    81e0:	88 23       	and	r24, r24
    81e2:	61 f0       	breq	.+24     	; 0x81fc <usb_serial_class::availableForWrite()+0x20>
    81e4:	8f b7       	in	r24, 0x3f	; 63
    81e6:	f8 94       	cli
    81e8:	94 e0       	ldi	r25, 0x04	; 4
    81ea:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    81ee:	90 91 f2 00 	lds	r25, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    81f2:	8f bf       	out	0x3f, r24	; 63
    81f4:	80 e4       	ldi	r24, 0x40	; 64
    81f6:	89 1b       	sub	r24, r25
    81f8:	90 e0       	ldi	r25, 0x00	; 0
    81fa:	08 95       	ret
    81fc:	90 e0       	ldi	r25, 0x00	; 0
    81fe:	80 e0       	ldi	r24, 0x00	; 0
    8200:	08 95       	ret

00008202 <usb_serial_class::write(unsigned char const*, unsigned int)>:
    8202:	bf 92       	push	r11
    8204:	cf 92       	push	r12
    8206:	df 92       	push	r13
    8208:	ef 92       	push	r14
    820a:	ff 92       	push	r15
    820c:	0f 93       	push	r16
    820e:	1f 93       	push	r17
    8210:	cf 93       	push	r28
    8212:	df 93       	push	r29
    8214:	7c 01       	movw	r14, r24
    8216:	80 91 ad 10 	lds	r24, 0x10AD	; 0x8010ad <usb_configuration>
    821a:	81 11       	cpse	r24, r1
    821c:	10 c0       	rjmp	.+32     	; 0x823e <usb_serial_class::write(unsigned char const*, unsigned int)+0x3c>
    821e:	81 e0       	ldi	r24, 0x01	; 1
    8220:	f7 01       	movw	r30, r14
    8222:	82 83       	std	Z+2, r24	; 0x02
    8224:	10 e0       	ldi	r17, 0x00	; 0
    8226:	00 e0       	ldi	r16, 0x00	; 0
    8228:	c8 01       	movw	r24, r16
    822a:	df 91       	pop	r29
    822c:	cf 91       	pop	r28
    822e:	1f 91       	pop	r17
    8230:	0f 91       	pop	r16
    8232:	ff 90       	pop	r15
    8234:	ef 90       	pop	r14
    8236:	df 90       	pop	r13
    8238:	cf 90       	pop	r12
    823a:	bf 90       	pop	r11
    823c:	08 95       	ret
    823e:	2f b7       	in	r18, 0x3f	; 63
    8240:	f8 94       	cli
    8242:	84 e0       	ldi	r24, 0x04	; 4
    8244:	80 93 e9 00 	sts	0x00E9, r24	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    8248:	80 91 27 10 	lds	r24, 0x1027	; 0x801027 <transmit_previous_timeout>
    824c:	88 23       	and	r24, r24
    824e:	41 f0       	breq	.+16     	; 0x8260 <usb_serial_class::write(unsigned char const*, unsigned int)+0x5e>
    8250:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8254:	85 fd       	sbrc	r24, 5
    8256:	02 c0       	rjmp	.+4      	; 0x825c <usb_serial_class::write(unsigned char const*, unsigned int)+0x5a>
    8258:	2f bf       	out	0x3f, r18	; 63
    825a:	e1 cf       	rjmp	.-62     	; 0x821e <usb_serial_class::write(unsigned char const*, unsigned int)+0x1c>
    825c:	10 92 27 10 	sts	0x1027, r1	; 0x801027 <transmit_previous_timeout>
    8260:	10 e0       	ldi	r17, 0x00	; 0
    8262:	00 e0       	ldi	r16, 0x00	; 0
    8264:	84 e0       	ldi	r24, 0x04	; 4
    8266:	d8 2e       	mov	r13, r24
    8268:	90 e4       	ldi	r25, 0x40	; 64
    826a:	c9 2e       	mov	r12, r25
    826c:	a1 ef       	ldi	r26, 0xF1	; 241
    826e:	b0 e0       	ldi	r27, 0x00	; 0
    8270:	3a e3       	ldi	r19, 0x3A	; 58
    8272:	b3 2e       	mov	r11, r19
    8274:	33 e0       	ldi	r19, 0x03	; 3
    8276:	41 15       	cp	r20, r1
    8278:	51 05       	cpc	r21, r1
    827a:	09 f4       	brne	.+2      	; 0x827e <usb_serial_class::write(unsigned char const*, unsigned int)+0x7c>
    827c:	c0 c0       	rjmp	.+384    	; 0x83fe <L548end+0x12>
    827e:	80 91 e4 00 	lds	r24, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    8282:	81 5f       	subi	r24, 0xF1	; 241
    8284:	90 91 e8 00 	lds	r25, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8288:	95 fd       	sbrc	r25, 5
    828a:	16 c0       	rjmp	.+44     	; 0x82b8 <usb_serial_class::write(unsigned char const*, unsigned int)+0xb6>
    828c:	2f bf       	out	0x3f, r18	; 63
    828e:	90 91 e4 00 	lds	r25, 0x00E4	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7e00e4>
    8292:	89 13       	cpse	r24, r25
    8294:	06 c0       	rjmp	.+12     	; 0x82a2 <usb_serial_class::write(unsigned char const*, unsigned int)+0xa0>
    8296:	81 e0       	ldi	r24, 0x01	; 1
    8298:	80 93 27 10 	sts	0x1027, r24	; 0x801027 <transmit_previous_timeout>
    829c:	f7 01       	movw	r30, r14
    829e:	82 83       	std	Z+2, r24	; 0x02
    82a0:	c3 cf       	rjmp	.-122    	; 0x8228 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>
    82a2:	90 91 ad 10 	lds	r25, 0x10AD	; 0x8010ad <usb_configuration>
    82a6:	91 11       	cpse	r25, r1
    82a8:	02 c0       	rjmp	.+4      	; 0x82ae <usb_serial_class::write(unsigned char const*, unsigned int)+0xac>
    82aa:	81 e0       	ldi	r24, 0x01	; 1
    82ac:	f7 cf       	rjmp	.-18     	; 0x829c <usb_serial_class::write(unsigned char const*, unsigned int)+0x9a>
    82ae:	2f b7       	in	r18, 0x3f	; 63
    82b0:	f8 94       	cli
    82b2:	d0 92 e9 00 	sts	0x00E9, r13	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    82b6:	e6 cf       	rjmp	.-52     	; 0x8284 <usb_serial_class::write(unsigned char const*, unsigned int)+0x82>
    82b8:	80 91 f2 00 	lds	r24, 0x00F2	; 0x8000f2 <__TEXT_REGION_LENGTH__+0x7e00f2>
    82bc:	9c 2d       	mov	r25, r12
    82be:	98 1b       	sub	r25, r24
    82c0:	94 17       	cp	r25, r20
    82c2:	15 06       	cpc	r1, r21
    82c4:	11 f0       	breq	.+4      	; 0x82ca <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    82c6:	08 f0       	brcs	.+2      	; 0x82ca <usb_serial_class::write(unsigned char const*, unsigned int)+0xc8>
    82c8:	94 2f       	mov	r25, r20
    82ca:	e9 2f       	mov	r30, r25
    82cc:	f0 e0       	ldi	r31, 0x00	; 0
    82ce:	4e 1b       	sub	r20, r30
    82d0:	5f 0b       	sbc	r21, r31
    82d2:	0e 0f       	add	r16, r30
    82d4:	1f 1f       	adc	r17, r31
    82d6:	eb 01       	movw	r28, r22

000082d8 <L548begin>:
    82d8:	e0 e4       	ldi	r30, 0x40	; 64
    82da:	e9 1b       	sub	r30, r25
    82dc:	e0 34       	cpi	r30, 0x40	; 64
    82de:	28 f4       	brcc	.+10     	; 0x82ea <L548err>
    82e0:	ee 0f       	add	r30, r30
    82e2:	ff 27       	eor	r31, r31
    82e4:	ea 58       	subi	r30, 0x8A	; 138
    82e6:	fe 4b       	sbci	r31, 0xBE	; 190
    82e8:	09 94       	ijmp

000082ea <L548err>:
    82ea:	80 c0       	rjmp	.+256    	; 0x83ec <L548end>

000082ec <L548table>:
    82ec:	99 91       	ld	r25, Y+
    82ee:	9c 93       	st	X, r25
    82f0:	99 91       	ld	r25, Y+
    82f2:	9c 93       	st	X, r25
    82f4:	99 91       	ld	r25, Y+
    82f6:	9c 93       	st	X, r25
    82f8:	99 91       	ld	r25, Y+
    82fa:	9c 93       	st	X, r25
    82fc:	99 91       	ld	r25, Y+
    82fe:	9c 93       	st	X, r25
    8300:	99 91       	ld	r25, Y+
    8302:	9c 93       	st	X, r25
    8304:	99 91       	ld	r25, Y+
    8306:	9c 93       	st	X, r25
    8308:	99 91       	ld	r25, Y+
    830a:	9c 93       	st	X, r25
    830c:	99 91       	ld	r25, Y+
    830e:	9c 93       	st	X, r25
    8310:	99 91       	ld	r25, Y+
    8312:	9c 93       	st	X, r25
    8314:	99 91       	ld	r25, Y+
    8316:	9c 93       	st	X, r25
    8318:	99 91       	ld	r25, Y+
    831a:	9c 93       	st	X, r25
    831c:	99 91       	ld	r25, Y+
    831e:	9c 93       	st	X, r25
    8320:	99 91       	ld	r25, Y+
    8322:	9c 93       	st	X, r25
    8324:	99 91       	ld	r25, Y+
    8326:	9c 93       	st	X, r25
    8328:	99 91       	ld	r25, Y+
    832a:	9c 93       	st	X, r25
    832c:	99 91       	ld	r25, Y+
    832e:	9c 93       	st	X, r25
    8330:	99 91       	ld	r25, Y+
    8332:	9c 93       	st	X, r25
    8334:	99 91       	ld	r25, Y+
    8336:	9c 93       	st	X, r25
    8338:	99 91       	ld	r25, Y+
    833a:	9c 93       	st	X, r25
    833c:	99 91       	ld	r25, Y+
    833e:	9c 93       	st	X, r25
    8340:	99 91       	ld	r25, Y+
    8342:	9c 93       	st	X, r25
    8344:	99 91       	ld	r25, Y+
    8346:	9c 93       	st	X, r25
    8348:	99 91       	ld	r25, Y+
    834a:	9c 93       	st	X, r25
    834c:	99 91       	ld	r25, Y+
    834e:	9c 93       	st	X, r25
    8350:	99 91       	ld	r25, Y+
    8352:	9c 93       	st	X, r25
    8354:	99 91       	ld	r25, Y+
    8356:	9c 93       	st	X, r25
    8358:	99 91       	ld	r25, Y+
    835a:	9c 93       	st	X, r25
    835c:	99 91       	ld	r25, Y+
    835e:	9c 93       	st	X, r25
    8360:	99 91       	ld	r25, Y+
    8362:	9c 93       	st	X, r25
    8364:	99 91       	ld	r25, Y+
    8366:	9c 93       	st	X, r25
    8368:	99 91       	ld	r25, Y+
    836a:	9c 93       	st	X, r25
    836c:	99 91       	ld	r25, Y+
    836e:	9c 93       	st	X, r25
    8370:	99 91       	ld	r25, Y+
    8372:	9c 93       	st	X, r25
    8374:	99 91       	ld	r25, Y+
    8376:	9c 93       	st	X, r25
    8378:	99 91       	ld	r25, Y+
    837a:	9c 93       	st	X, r25
    837c:	99 91       	ld	r25, Y+
    837e:	9c 93       	st	X, r25
    8380:	99 91       	ld	r25, Y+
    8382:	9c 93       	st	X, r25
    8384:	99 91       	ld	r25, Y+
    8386:	9c 93       	st	X, r25
    8388:	99 91       	ld	r25, Y+
    838a:	9c 93       	st	X, r25
    838c:	99 91       	ld	r25, Y+
    838e:	9c 93       	st	X, r25
    8390:	99 91       	ld	r25, Y+
    8392:	9c 93       	st	X, r25
    8394:	99 91       	ld	r25, Y+
    8396:	9c 93       	st	X, r25
    8398:	99 91       	ld	r25, Y+
    839a:	9c 93       	st	X, r25
    839c:	99 91       	ld	r25, Y+
    839e:	9c 93       	st	X, r25
    83a0:	99 91       	ld	r25, Y+
    83a2:	9c 93       	st	X, r25
    83a4:	99 91       	ld	r25, Y+
    83a6:	9c 93       	st	X, r25
    83a8:	99 91       	ld	r25, Y+
    83aa:	9c 93       	st	X, r25
    83ac:	99 91       	ld	r25, Y+
    83ae:	9c 93       	st	X, r25
    83b0:	99 91       	ld	r25, Y+
    83b2:	9c 93       	st	X, r25
    83b4:	99 91       	ld	r25, Y+
    83b6:	9c 93       	st	X, r25
    83b8:	99 91       	ld	r25, Y+
    83ba:	9c 93       	st	X, r25
    83bc:	99 91       	ld	r25, Y+
    83be:	9c 93       	st	X, r25
    83c0:	99 91       	ld	r25, Y+
    83c2:	9c 93       	st	X, r25
    83c4:	99 91       	ld	r25, Y+
    83c6:	9c 93       	st	X, r25
    83c8:	99 91       	ld	r25, Y+
    83ca:	9c 93       	st	X, r25
    83cc:	99 91       	ld	r25, Y+
    83ce:	9c 93       	st	X, r25
    83d0:	99 91       	ld	r25, Y+
    83d2:	9c 93       	st	X, r25
    83d4:	99 91       	ld	r25, Y+
    83d6:	9c 93       	st	X, r25
    83d8:	99 91       	ld	r25, Y+
    83da:	9c 93       	st	X, r25
    83dc:	99 91       	ld	r25, Y+
    83de:	9c 93       	st	X, r25
    83e0:	99 91       	ld	r25, Y+
    83e2:	9c 93       	st	X, r25
    83e4:	99 91       	ld	r25, Y+
    83e6:	9c 93       	st	X, r25
    83e8:	99 91       	ld	r25, Y+
    83ea:	9c 93       	st	X, r25

000083ec <L548end>:
    83ec:	be 01       	movw	r22, r28
    83ee:	80 91 e8 00 	lds	r24, 0x00E8	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    83f2:	85 ff       	sbrs	r24, 5
    83f4:	b0 92 e8 00 	sts	0x00E8, r11	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    83f8:	30 93 29 10 	sts	0x1029, r19	; 0x801029 <transmit_flush_timer>
    83fc:	3c cf       	rjmp	.-392    	; 0x8276 <usb_serial_class::write(unsigned char const*, unsigned int)+0x74>
    83fe:	2f bf       	out	0x3f, r18	; 63
    8400:	13 cf       	rjmp	.-474    	; 0x8228 <usb_serial_class::write(unsigned char const*, unsigned int)+0x26>

00008402 <usb_serial_class::send_now()>:
    8402:	8f b7       	in	r24, 0x3f	; 63
    8404:	f8 94       	cli
    8406:	90 91 ad 10 	lds	r25, 0x10AD	; 0x8010ad <usb_configuration>
    840a:	99 23       	and	r25, r25
    840c:	61 f0       	breq	.+24     	; 0x8426 <usb_serial_class::send_now()+0x24>
    840e:	90 91 29 10 	lds	r25, 0x1029	; 0x801029 <transmit_flush_timer>
    8412:	99 23       	and	r25, r25
    8414:	41 f0       	breq	.+16     	; 0x8426 <usb_serial_class::send_now()+0x24>
    8416:	94 e0       	ldi	r25, 0x04	; 4
    8418:	90 93 e9 00 	sts	0x00E9, r25	; 0x8000e9 <__TEXT_REGION_LENGTH__+0x7e00e9>
    841c:	9a e3       	ldi	r25, 0x3A	; 58
    841e:	90 93 e8 00 	sts	0x00E8, r25	; 0x8000e8 <__TEXT_REGION_LENGTH__+0x7e00e8>
    8422:	10 92 29 10 	sts	0x1029, r1	; 0x801029 <transmit_flush_timer>
    8426:	8f bf       	out	0x3f, r24	; 63
    8428:	08 95       	ret

0000842a <usb_serial_class::flush()>:
    842a:	eb cf       	rjmp	.-42     	; 0x8402 <usb_serial_class::send_now()>

0000842c <_GLOBAL__sub_I__ZN16usb_serial_class5beginEl>:



// Preinstantiate Objects //////////////////////////////////////////////////////

usb_serial_class Serial = usb_serial_class();
    842c:	ef e9       	ldi	r30, 0x9F	; 159
    842e:	f0 e1       	ldi	r31, 0x10	; 16
    8430:	11 86       	std	Z+9, r1	; 0x09
    8432:	10 86       	std	Z+8, r1	; 0x08
    8434:	12 82       	std	Z+2, r1	; 0x02
    8436:	88 ee       	ldi	r24, 0xE8	; 232
    8438:	93 e0       	ldi	r25, 0x03	; 3
    843a:	a0 e0       	ldi	r26, 0x00	; 0
    843c:	b0 e0       	ldi	r27, 0x00	; 0
    843e:	83 83       	std	Z+3, r24	; 0x03
    8440:	94 83       	std	Z+4, r25	; 0x04
    8442:	a5 83       	std	Z+5, r26	; 0x05
    8444:	b6 83       	std	Z+6, r27	; 0x06
    8446:	17 82       	std	Z+7, r1	; 0x07

#include <inttypes.h>

#include "Stream.h"

class usb_serial_class : public Stream
    8448:	87 e1       	ldi	r24, 0x17	; 23
    844a:	99 e0       	ldi	r25, 0x09	; 9
    844c:	91 83       	std	Z+1, r25	; 0x01
    844e:	80 83       	st	Z, r24
    8450:	08 95       	ret

00008452 <randomSeed(unsigned int)>:
  #include "stdlib.h"
}

void randomSeed(unsigned int seed)
{
  if (seed != 0) {
    8452:	00 97       	sbiw	r24, 0x00	; 0
    8454:	21 f0       	breq	.+8      	; 0x845e <randomSeed(unsigned int)+0xc>
    srandom(seed);
    8456:	bc 01       	movw	r22, r24
    8458:	90 e0       	ldi	r25, 0x00	; 0
    845a:	80 e0       	ldi	r24, 0x00	; 0
    845c:	d3 c3       	rjmp	.+1958   	; 0x8c04 <srandom>
  }
}
    845e:	08 95       	ret

00008460 <random(long)>:

long random(long howbig)
{
    8460:	cf 92       	push	r12
    8462:	df 92       	push	r13
    8464:	ef 92       	push	r14
    8466:	ff 92       	push	r15
    8468:	6b 01       	movw	r12, r22
    846a:	7c 01       	movw	r14, r24
  if (howbig == 0) {
    846c:	c1 14       	cp	r12, r1
    846e:	d1 04       	cpc	r13, r1
    8470:	e1 04       	cpc	r14, r1
    8472:	f1 04       	cpc	r15, r1
    8474:	31 f0       	breq	.+12     	; 0x8482 <random(long)+0x22>
    return 0;
  }
  return random() % howbig;
    8476:	7a d3       	rcall	.+1780   	; 0x8b6c <random>
    8478:	a7 01       	movw	r20, r14
    847a:	96 01       	movw	r18, r12
    847c:	ea d2       	rcall	.+1492   	; 0x8a52 <__divmodsi4>
    847e:	6b 01       	movw	r12, r22
    8480:	7c 01       	movw	r14, r24
}
    8482:	c7 01       	movw	r24, r14
    8484:	b6 01       	movw	r22, r12
    8486:	ff 90       	pop	r15
    8488:	ef 90       	pop	r14
    848a:	df 90       	pop	r13
    848c:	cf 90       	pop	r12
    848e:	08 95       	ret

00008490 <random(long, long)>:

long random(long howsmall, long howbig)
{
    8490:	cf 92       	push	r12
    8492:	df 92       	push	r13
    8494:	ef 92       	push	r14
    8496:	ff 92       	push	r15
    8498:	6b 01       	movw	r12, r22
    849a:	7c 01       	movw	r14, r24
  if (howsmall >= howbig) {
    849c:	c2 16       	cp	r12, r18
    849e:	d3 06       	cpc	r13, r19
    84a0:	e4 06       	cpc	r14, r20
    84a2:	f5 06       	cpc	r15, r21
    84a4:	5c f4       	brge	.+22     	; 0x84bc <random(long, long)+0x2c>
    return howsmall;
  }
  long diff = howbig - howsmall;
    84a6:	ca 01       	movw	r24, r20
    84a8:	b9 01       	movw	r22, r18
    84aa:	6c 19       	sub	r22, r12
    84ac:	7d 09       	sbc	r23, r13
    84ae:	8e 09       	sbc	r24, r14
    84b0:	9f 09       	sbc	r25, r15
  return random(diff) + howsmall;
    84b2:	d6 df       	rcall	.-84     	; 0x8460 <random(long)>
    84b4:	c6 0e       	add	r12, r22
    84b6:	d7 1e       	adc	r13, r23
    84b8:	e8 1e       	adc	r14, r24
    84ba:	f9 1e       	adc	r15, r25
}
    84bc:	c7 01       	movw	r24, r14
    84be:	b6 01       	movw	r22, r12
    84c0:	ff 90       	pop	r15
    84c2:	ef 90       	pop	r14
    84c4:	df 90       	pop	r13
    84c6:	cf 90       	pop	r12
    84c8:	08 95       	ret

000084ca <map(long, long, long, long, long)>:

long map(long x, long in_min, long in_max, long out_min, long out_max)
{
    84ca:	4f 92       	push	r4
    84cc:	5f 92       	push	r5
    84ce:	6f 92       	push	r6
    84d0:	7f 92       	push	r7
    84d2:	af 92       	push	r10
    84d4:	bf 92       	push	r11
    84d6:	cf 92       	push	r12
    84d8:	df 92       	push	r13
    84da:	ef 92       	push	r14
    84dc:	ff 92       	push	r15
    84de:	0f 93       	push	r16
    84e0:	1f 93       	push	r17
    84e2:	cf 93       	push	r28
    84e4:	df 93       	push	r29
    84e6:	cd b7       	in	r28, 0x3d	; 61
    84e8:	de b7       	in	r29, 0x3e	; 62
    84ea:	29 01       	movw	r4, r18
    84ec:	3a 01       	movw	r6, r20
  return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
    84ee:	9b 01       	movw	r18, r22
    84f0:	ac 01       	movw	r20, r24
    84f2:	24 19       	sub	r18, r4
    84f4:	35 09       	sbc	r19, r5
    84f6:	46 09       	sbc	r20, r6
    84f8:	57 09       	sbc	r21, r7
    84fa:	89 89       	ldd	r24, Y+17	; 0x11
    84fc:	9a 89       	ldd	r25, Y+18	; 0x12
    84fe:	ab 89       	ldd	r26, Y+19	; 0x13
    8500:	bc 89       	ldd	r27, Y+20	; 0x14
    8502:	bc 01       	movw	r22, r24
    8504:	cd 01       	movw	r24, r26
    8506:	6a 19       	sub	r22, r10
    8508:	7b 09       	sbc	r23, r11
    850a:	8c 09       	sbc	r24, r12
    850c:	9d 09       	sbc	r25, r13
    850e:	49 d2       	rcall	.+1170   	; 0x89a2 <__mulsi3>
    8510:	a8 01       	movw	r20, r16
    8512:	97 01       	movw	r18, r14
    8514:	24 19       	sub	r18, r4
    8516:	35 09       	sbc	r19, r5
    8518:	46 09       	sbc	r20, r6
    851a:	57 09       	sbc	r21, r7
    851c:	9a d2       	rcall	.+1332   	; 0x8a52 <__divmodsi4>
    851e:	ca 01       	movw	r24, r20
    8520:	b9 01       	movw	r22, r18
    8522:	6a 0d       	add	r22, r10
    8524:	7b 1d       	adc	r23, r11
    8526:	8c 1d       	adc	r24, r12
    8528:	9d 1d       	adc	r25, r13
}
    852a:	df 91       	pop	r29
    852c:	cf 91       	pop	r28
    852e:	1f 91       	pop	r17
    8530:	0f 91       	pop	r16
    8532:	ff 90       	pop	r15
    8534:	ef 90       	pop	r14
    8536:	df 90       	pop	r13
    8538:	cf 90       	pop	r12
    853a:	bf 90       	pop	r11
    853c:	af 90       	pop	r10
    853e:	7f 90       	pop	r7
    8540:	6f 90       	pop	r6
    8542:	5f 90       	pop	r5
    8544:	4f 90       	pop	r4
    8546:	08 95       	ret

00008548 <String::~String()>:
/*  Character Access                         */
/*********************************************/

char String::charAt(unsigned int loc) const
{
	return operator[](loc);
    8548:	fc 01       	movw	r30, r24
    854a:	80 81       	ld	r24, Z
    854c:	91 81       	ldd	r25, Z+1	; 0x01
    854e:	0c 94 7c 38 	jmp	0x70f8	; 0x70f8 <free>

00008552 <String::changeBuffer(unsigned int)>:
    8552:	0f 93       	push	r16
    8554:	1f 93       	push	r17
    8556:	cf 93       	push	r28
    8558:	df 93       	push	r29
    855a:	ec 01       	movw	r28, r24
    855c:	8b 01       	movw	r16, r22
    855e:	6f 5f       	subi	r22, 0xFF	; 255
    8560:	7f 4f       	sbci	r23, 0xFF	; 255
    8562:	88 81       	ld	r24, Y
    8564:	99 81       	ldd	r25, Y+1	; 0x01
    8566:	0e 94 05 39 	call	0x720a	; 0x720a <realloc>
    856a:	00 97       	sbiw	r24, 0x00	; 0
    856c:	51 f0       	breq	.+20     	; 0x8582 <String::changeBuffer(unsigned int)+0x30>
    856e:	99 83       	std	Y+1, r25	; 0x01
    8570:	88 83       	st	Y, r24
    8572:	1b 83       	std	Y+3, r17	; 0x03
    8574:	0a 83       	std	Y+2, r16	; 0x02
    8576:	81 e0       	ldi	r24, 0x01	; 1
    8578:	df 91       	pop	r29
    857a:	cf 91       	pop	r28
    857c:	1f 91       	pop	r17
    857e:	0f 91       	pop	r16
    8580:	08 95       	ret
    8582:	80 e0       	ldi	r24, 0x00	; 0
    8584:	f9 cf       	rjmp	.-14     	; 0x8578 <String::changeBuffer(unsigned int)+0x26>

00008586 <String::reserve(unsigned int)>:
    8586:	cf 93       	push	r28
    8588:	df 93       	push	r29
    858a:	fc 01       	movw	r30, r24
    858c:	22 81       	ldd	r18, Z+2	; 0x02
    858e:	33 81       	ldd	r19, Z+3	; 0x03
    8590:	26 17       	cp	r18, r22
    8592:	37 07       	cpc	r19, r23
    8594:	20 f0       	brcs	.+8      	; 0x859e <String::reserve(unsigned int)+0x18>
    8596:	81 e0       	ldi	r24, 0x01	; 1
    8598:	df 91       	pop	r29
    859a:	cf 91       	pop	r28
    859c:	08 95       	ret
    859e:	ec 01       	movw	r28, r24
    85a0:	d8 df       	rcall	.-80     	; 0x8552 <String::changeBuffer(unsigned int)>
    85a2:	88 23       	and	r24, r24
    85a4:	c9 f3       	breq	.-14     	; 0x8598 <String::reserve(unsigned int)+0x12>
    85a6:	8c 81       	ldd	r24, Y+4	; 0x04
    85a8:	9d 81       	ldd	r25, Y+5	; 0x05
    85aa:	89 2b       	or	r24, r25
    85ac:	a1 f7       	brne	.-24     	; 0x8596 <String::reserve(unsigned int)+0x10>
    85ae:	e8 81       	ld	r30, Y
    85b0:	f9 81       	ldd	r31, Y+1	; 0x01
    85b2:	10 82       	st	Z, r1
    85b4:	f0 cf       	rjmp	.-32     	; 0x8596 <String::reserve(unsigned int)+0x10>

000085b6 <String::copy(char const*, unsigned int)>:
    85b6:	ef 92       	push	r14
    85b8:	ff 92       	push	r15
    85ba:	0f 93       	push	r16
    85bc:	1f 93       	push	r17
    85be:	cf 93       	push	r28
    85c0:	df 93       	push	r29
    85c2:	ec 01       	movw	r28, r24
    85c4:	7b 01       	movw	r14, r22
    85c6:	8a 01       	movw	r16, r20
    85c8:	41 15       	cp	r20, r1
    85ca:	51 05       	cpc	r21, r1
    85cc:	79 f4       	brne	.+30     	; 0x85ec <String::copy(char const*, unsigned int)+0x36>
    85ce:	e8 81       	ld	r30, Y
    85d0:	f9 81       	ldd	r31, Y+1	; 0x01
    85d2:	30 97       	sbiw	r30, 0x00	; 0
    85d4:	09 f0       	breq	.+2      	; 0x85d8 <String::copy(char const*, unsigned int)+0x22>
    85d6:	10 82       	st	Z, r1
    85d8:	1d 82       	std	Y+5, r1	; 0x05
    85da:	1c 82       	std	Y+4, r1	; 0x04
    85dc:	ce 01       	movw	r24, r28
    85de:	df 91       	pop	r29
    85e0:	cf 91       	pop	r28
    85e2:	1f 91       	pop	r17
    85e4:	0f 91       	pop	r16
    85e6:	ff 90       	pop	r15
    85e8:	ef 90       	pop	r14
    85ea:	08 95       	ret
    85ec:	ba 01       	movw	r22, r20
    85ee:	cb df       	rcall	.-106    	; 0x8586 <String::reserve(unsigned int)>
    85f0:	28 81       	ld	r18, Y
    85f2:	39 81       	ldd	r19, Y+1	; 0x01
    85f4:	81 11       	cpse	r24, r1
    85f6:	0b c0       	rjmp	.+22     	; 0x860e <String::copy(char const*, unsigned int)+0x58>
    85f8:	21 15       	cp	r18, r1
    85fa:	31 05       	cpc	r19, r1
    85fc:	29 f0       	breq	.+10     	; 0x8608 <String::copy(char const*, unsigned int)+0x52>
    85fe:	c9 01       	movw	r24, r18
    8600:	0e 94 7c 38 	call	0x70f8	; 0x70f8 <free>
    8604:	19 82       	std	Y+1, r1	; 0x01
    8606:	18 82       	st	Y, r1
    8608:	1b 82       	std	Y+3, r1	; 0x03
    860a:	1a 82       	std	Y+2, r1	; 0x02
    860c:	e5 cf       	rjmp	.-54     	; 0x85d8 <String::copy(char const*, unsigned int)+0x22>
    860e:	1d 83       	std	Y+5, r17	; 0x05
    8610:	0c 83       	std	Y+4, r16	; 0x04
    8612:	b7 01       	movw	r22, r14
    8614:	c9 01       	movw	r24, r18
    8616:	08 d3       	rcall	.+1552   	; 0x8c28 <strcpy>
    8618:	e1 cf       	rjmp	.-62     	; 0x85dc <String::copy(char const*, unsigned int)+0x26>

0000861a <String::String(char const*)>:
    861a:	fc 01       	movw	r30, r24
    861c:	11 82       	std	Z+1, r1	; 0x01
    861e:	10 82       	st	Z, r1
    8620:	13 82       	std	Z+3, r1	; 0x03
    8622:	12 82       	std	Z+2, r1	; 0x02
    8624:	15 82       	std	Z+5, r1	; 0x05
    8626:	14 82       	std	Z+4, r1	; 0x04
    8628:	16 82       	std	Z+6, r1	; 0x06
    862a:	61 15       	cp	r22, r1
    862c:	71 05       	cpc	r23, r1
    862e:	49 f0       	breq	.+18     	; 0x8642 <String::String(char const*)+0x28>
    8630:	fb 01       	movw	r30, r22
    8632:	01 90       	ld	r0, Z+
    8634:	00 20       	and	r0, r0
    8636:	e9 f7       	brne	.-6      	; 0x8632 <String::String(char const*)+0x18>
    8638:	31 97       	sbiw	r30, 0x01	; 1
    863a:	af 01       	movw	r20, r30
    863c:	46 1b       	sub	r20, r22
    863e:	57 0b       	sbc	r21, r23
    8640:	ba cf       	rjmp	.-140    	; 0x85b6 <String::copy(char const*, unsigned int)>
    8642:	08 95       	ret

00008644 <String::getBytes(unsigned char*, unsigned int, unsigned int) const>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
    8644:	0f 93       	push	r16
    8646:	1f 93       	push	r17
    8648:	cf 93       	push	r28
    864a:	df 93       	push	r29
	if (!bufsize || !buf) return;
    864c:	41 15       	cp	r20, r1
    864e:	51 05       	cpc	r21, r1
    8650:	59 f0       	breq	.+22     	; 0x8668 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
    8652:	61 15       	cp	r22, r1
    8654:	71 05       	cpc	r23, r1
    8656:	41 f0       	breq	.+16     	; 0x8668 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>
	if (index >= len) {
    8658:	fc 01       	movw	r30, r24
    865a:	04 81       	ldd	r16, Z+4	; 0x04
    865c:	15 81       	ldd	r17, Z+5	; 0x05
    865e:	20 17       	cp	r18, r16
    8660:	31 07       	cpc	r19, r17
    8662:	38 f0       	brcs	.+14     	; 0x8672 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x2e>
		buf[0] = 0;
    8664:	fb 01       	movw	r30, r22
    8666:	10 82       	st	Z, r1
	}
	unsigned int n = bufsize - 1;
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
	buf[n] = 0;
}
    8668:	df 91       	pop	r29
    866a:	cf 91       	pop	r28
    866c:	1f 91       	pop	r17
    866e:	0f 91       	pop	r16
    8670:	08 95       	ret
	if (!bufsize || !buf) return;
	if (index >= len) {
		buf[0] = 0;
		return;
	}
	unsigned int n = bufsize - 1;
    8672:	41 50       	subi	r20, 0x01	; 1
    8674:	51 09       	sbc	r21, r1
    8676:	02 1b       	sub	r16, r18
    8678:	13 0b       	sbc	r17, r19
    867a:	40 17       	cp	r20, r16
    867c:	51 07       	cpc	r21, r17
    867e:	08 f4       	brcc	.+2      	; 0x8682 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x3e>
    8680:	8a 01       	movw	r16, r20
    8682:	eb 01       	movw	r28, r22
	if (n > len - index) n = len - index;
	strncpy((char *)buf, buffer + index, n);
    8684:	fc 01       	movw	r30, r24
    8686:	60 81       	ld	r22, Z
    8688:	71 81       	ldd	r23, Z+1	; 0x01
    868a:	62 0f       	add	r22, r18
    868c:	73 1f       	adc	r23, r19
    868e:	a8 01       	movw	r20, r16
    8690:	ce 01       	movw	r24, r28
    8692:	d1 d2       	rcall	.+1442   	; 0x8c36 <strncpy>
	buf[n] = 0;
    8694:	c0 0f       	add	r28, r16
    8696:	d1 1f       	adc	r29, r17
    8698:	18 82       	st	Y, r1
    869a:	e6 cf       	rjmp	.-52     	; 0x8668 <String::getBytes(unsigned char*, unsigned int, unsigned int) const+0x24>

0000869c <yield>:
	//if (Serial.available()) serialEvent();
	//if (Serial1.available()) serialEvent1();
	//if (Serial2.available()) serialEvent2();
	//if (Serial3.available()) serialEvent3();
	//running = 0;
};
    869c:	08 95       	ret

0000869e <__subsf3>:
    869e:	50 58       	subi	r21, 0x80	; 128

000086a0 <__addsf3>:
    86a0:	bb 27       	eor	r27, r27
    86a2:	aa 27       	eor	r26, r26
    86a4:	0e d0       	rcall	.+28     	; 0x86c2 <__addsf3x>
    86a6:	e0 c0       	rjmp	.+448    	; 0x8868 <__fp_round>
    86a8:	d1 d0       	rcall	.+418    	; 0x884c <__fp_pscA>
    86aa:	30 f0       	brcs	.+12     	; 0x86b8 <__addsf3+0x18>
    86ac:	d6 d0       	rcall	.+428    	; 0x885a <__fp_pscB>
    86ae:	20 f0       	brcs	.+8      	; 0x86b8 <__addsf3+0x18>
    86b0:	31 f4       	brne	.+12     	; 0x86be <__addsf3+0x1e>
    86b2:	9f 3f       	cpi	r25, 0xFF	; 255
    86b4:	11 f4       	brne	.+4      	; 0x86ba <__addsf3+0x1a>
    86b6:	1e f4       	brtc	.+6      	; 0x86be <__addsf3+0x1e>
    86b8:	c6 c0       	rjmp	.+396    	; 0x8846 <__fp_nan>
    86ba:	0e f4       	brtc	.+2      	; 0x86be <__addsf3+0x1e>
    86bc:	e0 95       	com	r30
    86be:	e7 fb       	bst	r30, 7
    86c0:	bc c0       	rjmp	.+376    	; 0x883a <__fp_inf>

000086c2 <__addsf3x>:
    86c2:	e9 2f       	mov	r30, r25
    86c4:	e2 d0       	rcall	.+452    	; 0x888a <__fp_split3>
    86c6:	80 f3       	brcs	.-32     	; 0x86a8 <__addsf3+0x8>
    86c8:	ba 17       	cp	r27, r26
    86ca:	62 07       	cpc	r22, r18
    86cc:	73 07       	cpc	r23, r19
    86ce:	84 07       	cpc	r24, r20
    86d0:	95 07       	cpc	r25, r21
    86d2:	18 f0       	brcs	.+6      	; 0x86da <__addsf3x+0x18>
    86d4:	71 f4       	brne	.+28     	; 0x86f2 <__addsf3x+0x30>
    86d6:	9e f5       	brtc	.+102    	; 0x873e <__addsf3x+0x7c>
    86d8:	fa c0       	rjmp	.+500    	; 0x88ce <__fp_zero>
    86da:	0e f4       	brtc	.+2      	; 0x86de <__addsf3x+0x1c>
    86dc:	e0 95       	com	r30
    86de:	0b 2e       	mov	r0, r27
    86e0:	ba 2f       	mov	r27, r26
    86e2:	a0 2d       	mov	r26, r0
    86e4:	0b 01       	movw	r0, r22
    86e6:	b9 01       	movw	r22, r18
    86e8:	90 01       	movw	r18, r0
    86ea:	0c 01       	movw	r0, r24
    86ec:	ca 01       	movw	r24, r20
    86ee:	a0 01       	movw	r20, r0
    86f0:	11 24       	eor	r1, r1
    86f2:	ff 27       	eor	r31, r31
    86f4:	59 1b       	sub	r21, r25
    86f6:	99 f0       	breq	.+38     	; 0x871e <__addsf3x+0x5c>
    86f8:	59 3f       	cpi	r21, 0xF9	; 249
    86fa:	50 f4       	brcc	.+20     	; 0x8710 <__addsf3x+0x4e>
    86fc:	50 3e       	cpi	r21, 0xE0	; 224
    86fe:	68 f1       	brcs	.+90     	; 0x875a <__addsf3x+0x98>
    8700:	1a 16       	cp	r1, r26
    8702:	f0 40       	sbci	r31, 0x00	; 0
    8704:	a2 2f       	mov	r26, r18
    8706:	23 2f       	mov	r18, r19
    8708:	34 2f       	mov	r19, r20
    870a:	44 27       	eor	r20, r20
    870c:	58 5f       	subi	r21, 0xF8	; 248
    870e:	f3 cf       	rjmp	.-26     	; 0x86f6 <__addsf3x+0x34>
    8710:	46 95       	lsr	r20
    8712:	37 95       	ror	r19
    8714:	27 95       	ror	r18
    8716:	a7 95       	ror	r26
    8718:	f0 40       	sbci	r31, 0x00	; 0
    871a:	53 95       	inc	r21
    871c:	c9 f7       	brne	.-14     	; 0x8710 <__addsf3x+0x4e>
    871e:	7e f4       	brtc	.+30     	; 0x873e <__addsf3x+0x7c>
    8720:	1f 16       	cp	r1, r31
    8722:	ba 0b       	sbc	r27, r26
    8724:	62 0b       	sbc	r22, r18
    8726:	73 0b       	sbc	r23, r19
    8728:	84 0b       	sbc	r24, r20
    872a:	ba f0       	brmi	.+46     	; 0x875a <__addsf3x+0x98>
    872c:	91 50       	subi	r25, 0x01	; 1
    872e:	a1 f0       	breq	.+40     	; 0x8758 <__addsf3x+0x96>
    8730:	ff 0f       	add	r31, r31
    8732:	bb 1f       	adc	r27, r27
    8734:	66 1f       	adc	r22, r22
    8736:	77 1f       	adc	r23, r23
    8738:	88 1f       	adc	r24, r24
    873a:	c2 f7       	brpl	.-16     	; 0x872c <__addsf3x+0x6a>
    873c:	0e c0       	rjmp	.+28     	; 0x875a <__addsf3x+0x98>
    873e:	ba 0f       	add	r27, r26
    8740:	62 1f       	adc	r22, r18
    8742:	73 1f       	adc	r23, r19
    8744:	84 1f       	adc	r24, r20
    8746:	48 f4       	brcc	.+18     	; 0x875a <__addsf3x+0x98>
    8748:	87 95       	ror	r24
    874a:	77 95       	ror	r23
    874c:	67 95       	ror	r22
    874e:	b7 95       	ror	r27
    8750:	f7 95       	ror	r31
    8752:	9e 3f       	cpi	r25, 0xFE	; 254
    8754:	08 f0       	brcs	.+2      	; 0x8758 <__addsf3x+0x96>
    8756:	b3 cf       	rjmp	.-154    	; 0x86be <__addsf3+0x1e>
    8758:	93 95       	inc	r25
    875a:	88 0f       	add	r24, r24
    875c:	08 f0       	brcs	.+2      	; 0x8760 <__addsf3x+0x9e>
    875e:	99 27       	eor	r25, r25
    8760:	ee 0f       	add	r30, r30
    8762:	97 95       	ror	r25
    8764:	87 95       	ror	r24
    8766:	08 95       	ret

00008768 <__fixunssfsi>:
    8768:	98 d0       	rcall	.+304    	; 0x889a <__fp_splitA>
    876a:	88 f0       	brcs	.+34     	; 0x878e <__fixunssfsi+0x26>
    876c:	9f 57       	subi	r25, 0x7F	; 127
    876e:	90 f0       	brcs	.+36     	; 0x8794 <__fixunssfsi+0x2c>
    8770:	b9 2f       	mov	r27, r25
    8772:	99 27       	eor	r25, r25
    8774:	b7 51       	subi	r27, 0x17	; 23
    8776:	a0 f0       	brcs	.+40     	; 0x87a0 <__fixunssfsi+0x38>
    8778:	d1 f0       	breq	.+52     	; 0x87ae <__fixunssfsi+0x46>
    877a:	66 0f       	add	r22, r22
    877c:	77 1f       	adc	r23, r23
    877e:	88 1f       	adc	r24, r24
    8780:	99 1f       	adc	r25, r25
    8782:	1a f0       	brmi	.+6      	; 0x878a <__fixunssfsi+0x22>
    8784:	ba 95       	dec	r27
    8786:	c9 f7       	brne	.-14     	; 0x877a <__fixunssfsi+0x12>
    8788:	12 c0       	rjmp	.+36     	; 0x87ae <__fixunssfsi+0x46>
    878a:	b1 30       	cpi	r27, 0x01	; 1
    878c:	81 f0       	breq	.+32     	; 0x87ae <__fixunssfsi+0x46>
    878e:	9f d0       	rcall	.+318    	; 0x88ce <__fp_zero>
    8790:	b1 e0       	ldi	r27, 0x01	; 1
    8792:	08 95       	ret
    8794:	9c c0       	rjmp	.+312    	; 0x88ce <__fp_zero>
    8796:	67 2f       	mov	r22, r23
    8798:	78 2f       	mov	r23, r24
    879a:	88 27       	eor	r24, r24
    879c:	b8 5f       	subi	r27, 0xF8	; 248
    879e:	39 f0       	breq	.+14     	; 0x87ae <__fixunssfsi+0x46>
    87a0:	b9 3f       	cpi	r27, 0xF9	; 249
    87a2:	cc f3       	brlt	.-14     	; 0x8796 <__fixunssfsi+0x2e>
    87a4:	86 95       	lsr	r24
    87a6:	77 95       	ror	r23
    87a8:	67 95       	ror	r22
    87aa:	b3 95       	inc	r27
    87ac:	d9 f7       	brne	.-10     	; 0x87a4 <__fixunssfsi+0x3c>
    87ae:	3e f4       	brtc	.+14     	; 0x87be <__fixunssfsi+0x56>
    87b0:	90 95       	com	r25
    87b2:	80 95       	com	r24
    87b4:	70 95       	com	r23
    87b6:	61 95       	neg	r22
    87b8:	7f 4f       	sbci	r23, 0xFF	; 255
    87ba:	8f 4f       	sbci	r24, 0xFF	; 255
    87bc:	9f 4f       	sbci	r25, 0xFF	; 255
    87be:	08 95       	ret

000087c0 <__floatunsisf>:
    87c0:	e8 94       	clt
    87c2:	09 c0       	rjmp	.+18     	; 0x87d6 <__floatsisf+0x12>

000087c4 <__floatsisf>:
    87c4:	97 fb       	bst	r25, 7
    87c6:	3e f4       	brtc	.+14     	; 0x87d6 <__floatsisf+0x12>
    87c8:	90 95       	com	r25
    87ca:	80 95       	com	r24
    87cc:	70 95       	com	r23
    87ce:	61 95       	neg	r22
    87d0:	7f 4f       	sbci	r23, 0xFF	; 255
    87d2:	8f 4f       	sbci	r24, 0xFF	; 255
    87d4:	9f 4f       	sbci	r25, 0xFF	; 255
    87d6:	99 23       	and	r25, r25
    87d8:	a9 f0       	breq	.+42     	; 0x8804 <__floatsisf+0x40>
    87da:	f9 2f       	mov	r31, r25
    87dc:	96 e9       	ldi	r25, 0x96	; 150
    87de:	bb 27       	eor	r27, r27
    87e0:	93 95       	inc	r25
    87e2:	f6 95       	lsr	r31
    87e4:	87 95       	ror	r24
    87e6:	77 95       	ror	r23
    87e8:	67 95       	ror	r22
    87ea:	b7 95       	ror	r27
    87ec:	f1 11       	cpse	r31, r1
    87ee:	f8 cf       	rjmp	.-16     	; 0x87e0 <__floatsisf+0x1c>
    87f0:	fa f4       	brpl	.+62     	; 0x8830 <__floatsisf+0x6c>
    87f2:	bb 0f       	add	r27, r27
    87f4:	11 f4       	brne	.+4      	; 0x87fa <__floatsisf+0x36>
    87f6:	60 ff       	sbrs	r22, 0
    87f8:	1b c0       	rjmp	.+54     	; 0x8830 <__floatsisf+0x6c>
    87fa:	6f 5f       	subi	r22, 0xFF	; 255
    87fc:	7f 4f       	sbci	r23, 0xFF	; 255
    87fe:	8f 4f       	sbci	r24, 0xFF	; 255
    8800:	9f 4f       	sbci	r25, 0xFF	; 255
    8802:	16 c0       	rjmp	.+44     	; 0x8830 <__floatsisf+0x6c>
    8804:	88 23       	and	r24, r24
    8806:	11 f0       	breq	.+4      	; 0x880c <__floatsisf+0x48>
    8808:	96 e9       	ldi	r25, 0x96	; 150
    880a:	11 c0       	rjmp	.+34     	; 0x882e <__floatsisf+0x6a>
    880c:	77 23       	and	r23, r23
    880e:	21 f0       	breq	.+8      	; 0x8818 <__floatsisf+0x54>
    8810:	9e e8       	ldi	r25, 0x8E	; 142
    8812:	87 2f       	mov	r24, r23
    8814:	76 2f       	mov	r23, r22
    8816:	05 c0       	rjmp	.+10     	; 0x8822 <__floatsisf+0x5e>
    8818:	66 23       	and	r22, r22
    881a:	71 f0       	breq	.+28     	; 0x8838 <__floatsisf+0x74>
    881c:	96 e8       	ldi	r25, 0x86	; 134
    881e:	86 2f       	mov	r24, r22
    8820:	70 e0       	ldi	r23, 0x00	; 0
    8822:	60 e0       	ldi	r22, 0x00	; 0
    8824:	2a f0       	brmi	.+10     	; 0x8830 <__floatsisf+0x6c>
    8826:	9a 95       	dec	r25
    8828:	66 0f       	add	r22, r22
    882a:	77 1f       	adc	r23, r23
    882c:	88 1f       	adc	r24, r24
    882e:	da f7       	brpl	.-10     	; 0x8826 <__floatsisf+0x62>
    8830:	88 0f       	add	r24, r24
    8832:	96 95       	lsr	r25
    8834:	87 95       	ror	r24
    8836:	97 f9       	bld	r25, 7
    8838:	08 95       	ret

0000883a <__fp_inf>:
    883a:	97 f9       	bld	r25, 7
    883c:	9f 67       	ori	r25, 0x7F	; 127
    883e:	80 e8       	ldi	r24, 0x80	; 128
    8840:	70 e0       	ldi	r23, 0x00	; 0
    8842:	60 e0       	ldi	r22, 0x00	; 0
    8844:	08 95       	ret

00008846 <__fp_nan>:
    8846:	9f ef       	ldi	r25, 0xFF	; 255
    8848:	80 ec       	ldi	r24, 0xC0	; 192
    884a:	08 95       	ret

0000884c <__fp_pscA>:
    884c:	00 24       	eor	r0, r0
    884e:	0a 94       	dec	r0
    8850:	16 16       	cp	r1, r22
    8852:	17 06       	cpc	r1, r23
    8854:	18 06       	cpc	r1, r24
    8856:	09 06       	cpc	r0, r25
    8858:	08 95       	ret

0000885a <__fp_pscB>:
    885a:	00 24       	eor	r0, r0
    885c:	0a 94       	dec	r0
    885e:	12 16       	cp	r1, r18
    8860:	13 06       	cpc	r1, r19
    8862:	14 06       	cpc	r1, r20
    8864:	05 06       	cpc	r0, r21
    8866:	08 95       	ret

00008868 <__fp_round>:
    8868:	09 2e       	mov	r0, r25
    886a:	03 94       	inc	r0
    886c:	00 0c       	add	r0, r0
    886e:	11 f4       	brne	.+4      	; 0x8874 <__fp_round+0xc>
    8870:	88 23       	and	r24, r24
    8872:	52 f0       	brmi	.+20     	; 0x8888 <__fp_round+0x20>
    8874:	bb 0f       	add	r27, r27
    8876:	40 f4       	brcc	.+16     	; 0x8888 <__fp_round+0x20>
    8878:	bf 2b       	or	r27, r31
    887a:	11 f4       	brne	.+4      	; 0x8880 <__fp_round+0x18>
    887c:	60 ff       	sbrs	r22, 0
    887e:	04 c0       	rjmp	.+8      	; 0x8888 <__fp_round+0x20>
    8880:	6f 5f       	subi	r22, 0xFF	; 255
    8882:	7f 4f       	sbci	r23, 0xFF	; 255
    8884:	8f 4f       	sbci	r24, 0xFF	; 255
    8886:	9f 4f       	sbci	r25, 0xFF	; 255
    8888:	08 95       	ret

0000888a <__fp_split3>:
    888a:	57 fd       	sbrc	r21, 7
    888c:	90 58       	subi	r25, 0x80	; 128
    888e:	44 0f       	add	r20, r20
    8890:	55 1f       	adc	r21, r21
    8892:	59 f0       	breq	.+22     	; 0x88aa <__fp_splitA+0x10>
    8894:	5f 3f       	cpi	r21, 0xFF	; 255
    8896:	71 f0       	breq	.+28     	; 0x88b4 <__fp_splitA+0x1a>
    8898:	47 95       	ror	r20

0000889a <__fp_splitA>:
    889a:	88 0f       	add	r24, r24
    889c:	97 fb       	bst	r25, 7
    889e:	99 1f       	adc	r25, r25
    88a0:	61 f0       	breq	.+24     	; 0x88ba <__fp_splitA+0x20>
    88a2:	9f 3f       	cpi	r25, 0xFF	; 255
    88a4:	79 f0       	breq	.+30     	; 0x88c4 <__fp_splitA+0x2a>
    88a6:	87 95       	ror	r24
    88a8:	08 95       	ret
    88aa:	12 16       	cp	r1, r18
    88ac:	13 06       	cpc	r1, r19
    88ae:	14 06       	cpc	r1, r20
    88b0:	55 1f       	adc	r21, r21
    88b2:	f2 cf       	rjmp	.-28     	; 0x8898 <__fp_split3+0xe>
    88b4:	46 95       	lsr	r20
    88b6:	f1 df       	rcall	.-30     	; 0x889a <__fp_splitA>
    88b8:	08 c0       	rjmp	.+16     	; 0x88ca <__fp_splitA+0x30>
    88ba:	16 16       	cp	r1, r22
    88bc:	17 06       	cpc	r1, r23
    88be:	18 06       	cpc	r1, r24
    88c0:	99 1f       	adc	r25, r25
    88c2:	f1 cf       	rjmp	.-30     	; 0x88a6 <__fp_splitA+0xc>
    88c4:	86 95       	lsr	r24
    88c6:	71 05       	cpc	r23, r1
    88c8:	61 05       	cpc	r22, r1
    88ca:	08 94       	sec
    88cc:	08 95       	ret

000088ce <__fp_zero>:
    88ce:	e8 94       	clt

000088d0 <__fp_szero>:
    88d0:	bb 27       	eor	r27, r27
    88d2:	66 27       	eor	r22, r22
    88d4:	77 27       	eor	r23, r23
    88d6:	cb 01       	movw	r24, r22
    88d8:	97 f9       	bld	r25, 7
    88da:	08 95       	ret

000088dc <__mulsf3>:
    88dc:	0b d0       	rcall	.+22     	; 0x88f4 <__mulsf3x>
    88de:	c4 cf       	rjmp	.-120    	; 0x8868 <__fp_round>
    88e0:	b5 df       	rcall	.-150    	; 0x884c <__fp_pscA>
    88e2:	28 f0       	brcs	.+10     	; 0x88ee <__mulsf3+0x12>
    88e4:	ba df       	rcall	.-140    	; 0x885a <__fp_pscB>
    88e6:	18 f0       	brcs	.+6      	; 0x88ee <__mulsf3+0x12>
    88e8:	95 23       	and	r25, r21
    88ea:	09 f0       	breq	.+2      	; 0x88ee <__mulsf3+0x12>
    88ec:	a6 cf       	rjmp	.-180    	; 0x883a <__fp_inf>
    88ee:	ab cf       	rjmp	.-170    	; 0x8846 <__fp_nan>
    88f0:	11 24       	eor	r1, r1
    88f2:	ee cf       	rjmp	.-36     	; 0x88d0 <__fp_szero>

000088f4 <__mulsf3x>:
    88f4:	ca df       	rcall	.-108    	; 0x888a <__fp_split3>
    88f6:	a0 f3       	brcs	.-24     	; 0x88e0 <__mulsf3+0x4>

000088f8 <__mulsf3_pse>:
    88f8:	95 9f       	mul	r25, r21
    88fa:	d1 f3       	breq	.-12     	; 0x88f0 <__mulsf3+0x14>
    88fc:	95 0f       	add	r25, r21
    88fe:	50 e0       	ldi	r21, 0x00	; 0
    8900:	55 1f       	adc	r21, r21
    8902:	62 9f       	mul	r22, r18
    8904:	f0 01       	movw	r30, r0
    8906:	72 9f       	mul	r23, r18
    8908:	bb 27       	eor	r27, r27
    890a:	f0 0d       	add	r31, r0
    890c:	b1 1d       	adc	r27, r1
    890e:	63 9f       	mul	r22, r19
    8910:	aa 27       	eor	r26, r26
    8912:	f0 0d       	add	r31, r0
    8914:	b1 1d       	adc	r27, r1
    8916:	aa 1f       	adc	r26, r26
    8918:	64 9f       	mul	r22, r20
    891a:	66 27       	eor	r22, r22
    891c:	b0 0d       	add	r27, r0
    891e:	a1 1d       	adc	r26, r1
    8920:	66 1f       	adc	r22, r22
    8922:	82 9f       	mul	r24, r18
    8924:	22 27       	eor	r18, r18
    8926:	b0 0d       	add	r27, r0
    8928:	a1 1d       	adc	r26, r1
    892a:	62 1f       	adc	r22, r18
    892c:	73 9f       	mul	r23, r19
    892e:	b0 0d       	add	r27, r0
    8930:	a1 1d       	adc	r26, r1
    8932:	62 1f       	adc	r22, r18
    8934:	83 9f       	mul	r24, r19
    8936:	a0 0d       	add	r26, r0
    8938:	61 1d       	adc	r22, r1
    893a:	22 1f       	adc	r18, r18
    893c:	74 9f       	mul	r23, r20
    893e:	33 27       	eor	r19, r19
    8940:	a0 0d       	add	r26, r0
    8942:	61 1d       	adc	r22, r1
    8944:	23 1f       	adc	r18, r19
    8946:	84 9f       	mul	r24, r20
    8948:	60 0d       	add	r22, r0
    894a:	21 1d       	adc	r18, r1
    894c:	82 2f       	mov	r24, r18
    894e:	76 2f       	mov	r23, r22
    8950:	6a 2f       	mov	r22, r26
    8952:	11 24       	eor	r1, r1
    8954:	9f 57       	subi	r25, 0x7F	; 127
    8956:	50 40       	sbci	r21, 0x00	; 0
    8958:	8a f0       	brmi	.+34     	; 0x897c <__mulsf3_pse+0x84>
    895a:	e1 f0       	breq	.+56     	; 0x8994 <__mulsf3_pse+0x9c>
    895c:	88 23       	and	r24, r24
    895e:	4a f0       	brmi	.+18     	; 0x8972 <__mulsf3_pse+0x7a>
    8960:	ee 0f       	add	r30, r30
    8962:	ff 1f       	adc	r31, r31
    8964:	bb 1f       	adc	r27, r27
    8966:	66 1f       	adc	r22, r22
    8968:	77 1f       	adc	r23, r23
    896a:	88 1f       	adc	r24, r24
    896c:	91 50       	subi	r25, 0x01	; 1
    896e:	50 40       	sbci	r21, 0x00	; 0
    8970:	a9 f7       	brne	.-22     	; 0x895c <__mulsf3_pse+0x64>
    8972:	9e 3f       	cpi	r25, 0xFE	; 254
    8974:	51 05       	cpc	r21, r1
    8976:	70 f0       	brcs	.+28     	; 0x8994 <__mulsf3_pse+0x9c>
    8978:	60 cf       	rjmp	.-320    	; 0x883a <__fp_inf>
    897a:	aa cf       	rjmp	.-172    	; 0x88d0 <__fp_szero>
    897c:	5f 3f       	cpi	r21, 0xFF	; 255
    897e:	ec f3       	brlt	.-6      	; 0x897a <__mulsf3_pse+0x82>
    8980:	98 3e       	cpi	r25, 0xE8	; 232
    8982:	dc f3       	brlt	.-10     	; 0x897a <__mulsf3_pse+0x82>
    8984:	86 95       	lsr	r24
    8986:	77 95       	ror	r23
    8988:	67 95       	ror	r22
    898a:	b7 95       	ror	r27
    898c:	f7 95       	ror	r31
    898e:	e7 95       	ror	r30
    8990:	9f 5f       	subi	r25, 0xFF	; 255
    8992:	c1 f7       	brne	.-16     	; 0x8984 <__mulsf3_pse+0x8c>
    8994:	fe 2b       	or	r31, r30
    8996:	88 0f       	add	r24, r24
    8998:	91 1d       	adc	r25, r1
    899a:	96 95       	lsr	r25
    899c:	87 95       	ror	r24
    899e:	97 f9       	bld	r25, 7
    89a0:	08 95       	ret

000089a2 <__mulsi3>:
    89a2:	db 01       	movw	r26, r22
    89a4:	8f 93       	push	r24
    89a6:	9f 93       	push	r25
    89a8:	8e d0       	rcall	.+284    	; 0x8ac6 <__muluhisi3>
    89aa:	bf 91       	pop	r27
    89ac:	af 91       	pop	r26
    89ae:	a2 9f       	mul	r26, r18
    89b0:	80 0d       	add	r24, r0
    89b2:	91 1d       	adc	r25, r1
    89b4:	a3 9f       	mul	r26, r19
    89b6:	90 0d       	add	r25, r0
    89b8:	b2 9f       	mul	r27, r18
    89ba:	90 0d       	add	r25, r0
    89bc:	11 24       	eor	r1, r1
    89be:	08 95       	ret

000089c0 <__udivmodhi4>:
    89c0:	aa 1b       	sub	r26, r26
    89c2:	bb 1b       	sub	r27, r27
    89c4:	51 e1       	ldi	r21, 0x11	; 17
    89c6:	07 c0       	rjmp	.+14     	; 0x89d6 <__udivmodhi4_ep>

000089c8 <__udivmodhi4_loop>:
    89c8:	aa 1f       	adc	r26, r26
    89ca:	bb 1f       	adc	r27, r27
    89cc:	a6 17       	cp	r26, r22
    89ce:	b7 07       	cpc	r27, r23
    89d0:	10 f0       	brcs	.+4      	; 0x89d6 <__udivmodhi4_ep>
    89d2:	a6 1b       	sub	r26, r22
    89d4:	b7 0b       	sbc	r27, r23

000089d6 <__udivmodhi4_ep>:
    89d6:	88 1f       	adc	r24, r24
    89d8:	99 1f       	adc	r25, r25
    89da:	5a 95       	dec	r21
    89dc:	a9 f7       	brne	.-22     	; 0x89c8 <__udivmodhi4_loop>
    89de:	80 95       	com	r24
    89e0:	90 95       	com	r25
    89e2:	bc 01       	movw	r22, r24
    89e4:	cd 01       	movw	r24, r26
    89e6:	08 95       	ret

000089e8 <__divmodhi4>:
    89e8:	97 fb       	bst	r25, 7
    89ea:	07 2e       	mov	r0, r23
    89ec:	16 f4       	brtc	.+4      	; 0x89f2 <__divmodhi4+0xa>
    89ee:	00 94       	com	r0
    89f0:	06 d0       	rcall	.+12     	; 0x89fe <__divmodhi4_neg1>
    89f2:	77 fd       	sbrc	r23, 7
    89f4:	08 d0       	rcall	.+16     	; 0x8a06 <__divmodhi4_neg2>
    89f6:	e4 df       	rcall	.-56     	; 0x89c0 <__udivmodhi4>
    89f8:	07 fc       	sbrc	r0, 7
    89fa:	05 d0       	rcall	.+10     	; 0x8a06 <__divmodhi4_neg2>
    89fc:	3e f4       	brtc	.+14     	; 0x8a0c <__divmodhi4_exit>

000089fe <__divmodhi4_neg1>:
    89fe:	90 95       	com	r25
    8a00:	81 95       	neg	r24
    8a02:	9f 4f       	sbci	r25, 0xFF	; 255
    8a04:	08 95       	ret

00008a06 <__divmodhi4_neg2>:
    8a06:	70 95       	com	r23
    8a08:	61 95       	neg	r22
    8a0a:	7f 4f       	sbci	r23, 0xFF	; 255

00008a0c <__divmodhi4_exit>:
    8a0c:	08 95       	ret

00008a0e <__udivmodsi4>:
    8a0e:	a1 e2       	ldi	r26, 0x21	; 33
    8a10:	1a 2e       	mov	r1, r26
    8a12:	aa 1b       	sub	r26, r26
    8a14:	bb 1b       	sub	r27, r27
    8a16:	fd 01       	movw	r30, r26
    8a18:	0d c0       	rjmp	.+26     	; 0x8a34 <__udivmodsi4_ep>

00008a1a <__udivmodsi4_loop>:
    8a1a:	aa 1f       	adc	r26, r26
    8a1c:	bb 1f       	adc	r27, r27
    8a1e:	ee 1f       	adc	r30, r30
    8a20:	ff 1f       	adc	r31, r31
    8a22:	a2 17       	cp	r26, r18
    8a24:	b3 07       	cpc	r27, r19
    8a26:	e4 07       	cpc	r30, r20
    8a28:	f5 07       	cpc	r31, r21
    8a2a:	20 f0       	brcs	.+8      	; 0x8a34 <__udivmodsi4_ep>
    8a2c:	a2 1b       	sub	r26, r18
    8a2e:	b3 0b       	sbc	r27, r19
    8a30:	e4 0b       	sbc	r30, r20
    8a32:	f5 0b       	sbc	r31, r21

00008a34 <__udivmodsi4_ep>:
    8a34:	66 1f       	adc	r22, r22
    8a36:	77 1f       	adc	r23, r23
    8a38:	88 1f       	adc	r24, r24
    8a3a:	99 1f       	adc	r25, r25
    8a3c:	1a 94       	dec	r1
    8a3e:	69 f7       	brne	.-38     	; 0x8a1a <__udivmodsi4_loop>
    8a40:	60 95       	com	r22
    8a42:	70 95       	com	r23
    8a44:	80 95       	com	r24
    8a46:	90 95       	com	r25
    8a48:	9b 01       	movw	r18, r22
    8a4a:	ac 01       	movw	r20, r24
    8a4c:	bd 01       	movw	r22, r26
    8a4e:	cf 01       	movw	r24, r30
    8a50:	08 95       	ret

00008a52 <__divmodsi4>:
    8a52:	05 2e       	mov	r0, r21
    8a54:	97 fb       	bst	r25, 7
    8a56:	16 f4       	brtc	.+4      	; 0x8a5c <__divmodsi4+0xa>
    8a58:	00 94       	com	r0
    8a5a:	0f d0       	rcall	.+30     	; 0x8a7a <__negsi2>
    8a5c:	57 fd       	sbrc	r21, 7
    8a5e:	05 d0       	rcall	.+10     	; 0x8a6a <__divmodsi4_neg2>
    8a60:	d6 df       	rcall	.-84     	; 0x8a0e <__udivmodsi4>
    8a62:	07 fc       	sbrc	r0, 7
    8a64:	02 d0       	rcall	.+4      	; 0x8a6a <__divmodsi4_neg2>
    8a66:	46 f4       	brtc	.+16     	; 0x8a78 <__divmodsi4_exit>
    8a68:	08 c0       	rjmp	.+16     	; 0x8a7a <__negsi2>

00008a6a <__divmodsi4_neg2>:
    8a6a:	50 95       	com	r21
    8a6c:	40 95       	com	r20
    8a6e:	30 95       	com	r19
    8a70:	21 95       	neg	r18
    8a72:	3f 4f       	sbci	r19, 0xFF	; 255
    8a74:	4f 4f       	sbci	r20, 0xFF	; 255
    8a76:	5f 4f       	sbci	r21, 0xFF	; 255

00008a78 <__divmodsi4_exit>:
    8a78:	08 95       	ret

00008a7a <__negsi2>:
    8a7a:	90 95       	com	r25
    8a7c:	80 95       	com	r24
    8a7e:	70 95       	com	r23
    8a80:	61 95       	neg	r22
    8a82:	7f 4f       	sbci	r23, 0xFF	; 255
    8a84:	8f 4f       	sbci	r24, 0xFF	; 255
    8a86:	9f 4f       	sbci	r25, 0xFF	; 255
    8a88:	08 95       	ret

00008a8a <__tablejump2__>:
    8a8a:	ee 0f       	add	r30, r30
    8a8c:	ff 1f       	adc	r31, r31
    8a8e:	00 24       	eor	r0, r0
    8a90:	00 1c       	adc	r0, r0
    8a92:	0b be       	out	0x3b, r0	; 59
    8a94:	07 90       	elpm	r0, Z+
    8a96:	f6 91       	elpm	r31, Z
    8a98:	e0 2d       	mov	r30, r0
    8a9a:	09 94       	ijmp

00008a9c <__umulhisi3>:
    8a9c:	a2 9f       	mul	r26, r18
    8a9e:	b0 01       	movw	r22, r0
    8aa0:	b3 9f       	mul	r27, r19
    8aa2:	c0 01       	movw	r24, r0
    8aa4:	a3 9f       	mul	r26, r19
    8aa6:	70 0d       	add	r23, r0
    8aa8:	81 1d       	adc	r24, r1
    8aaa:	11 24       	eor	r1, r1
    8aac:	91 1d       	adc	r25, r1
    8aae:	b2 9f       	mul	r27, r18
    8ab0:	70 0d       	add	r23, r0
    8ab2:	81 1d       	adc	r24, r1
    8ab4:	11 24       	eor	r1, r1
    8ab6:	91 1d       	adc	r25, r1
    8ab8:	08 95       	ret

00008aba <__usmulhisi3>:
    8aba:	f0 df       	rcall	.-32     	; 0x8a9c <__umulhisi3>

00008abc <__usmulhisi3_tail>:
    8abc:	b7 ff       	sbrs	r27, 7
    8abe:	08 95       	ret
    8ac0:	82 1b       	sub	r24, r18
    8ac2:	93 0b       	sbc	r25, r19
    8ac4:	08 95       	ret

00008ac6 <__muluhisi3>:
    8ac6:	ea df       	rcall	.-44     	; 0x8a9c <__umulhisi3>
    8ac8:	a5 9f       	mul	r26, r21
    8aca:	90 0d       	add	r25, r0
    8acc:	b4 9f       	mul	r27, r20
    8ace:	90 0d       	add	r25, r0
    8ad0:	a4 9f       	mul	r26, r20
    8ad2:	80 0d       	add	r24, r0
    8ad4:	91 1d       	adc	r25, r1
    8ad6:	11 24       	eor	r1, r1
    8ad8:	08 95       	ret

00008ada <random_r>:
    8ada:	8f 92       	push	r8
    8adc:	9f 92       	push	r9
    8ade:	af 92       	push	r10
    8ae0:	bf 92       	push	r11
    8ae2:	cf 92       	push	r12
    8ae4:	df 92       	push	r13
    8ae6:	ef 92       	push	r14
    8ae8:	ff 92       	push	r15
    8aea:	cf 93       	push	r28
    8aec:	df 93       	push	r29
    8aee:	ec 01       	movw	r28, r24
    8af0:	68 81       	ld	r22, Y
    8af2:	79 81       	ldd	r23, Y+1	; 0x01
    8af4:	8a 81       	ldd	r24, Y+2	; 0x02
    8af6:	9b 81       	ldd	r25, Y+3	; 0x03
    8af8:	61 15       	cp	r22, r1
    8afa:	71 05       	cpc	r23, r1
    8afc:	81 05       	cpc	r24, r1
    8afe:	91 05       	cpc	r25, r1
    8b00:	21 f4       	brne	.+8      	; 0x8b0a <random_r+0x30>
    8b02:	64 e2       	ldi	r22, 0x24	; 36
    8b04:	79 ed       	ldi	r23, 0xD9	; 217
    8b06:	8b e5       	ldi	r24, 0x5B	; 91
    8b08:	97 e0       	ldi	r25, 0x07	; 7
    8b0a:	2d e1       	ldi	r18, 0x1D	; 29
    8b0c:	33 ef       	ldi	r19, 0xF3	; 243
    8b0e:	41 e0       	ldi	r20, 0x01	; 1
    8b10:	50 e0       	ldi	r21, 0x00	; 0
    8b12:	9f df       	rcall	.-194    	; 0x8a52 <__divmodsi4>
    8b14:	49 01       	movw	r8, r18
    8b16:	5a 01       	movw	r10, r20
    8b18:	9b 01       	movw	r18, r22
    8b1a:	ac 01       	movw	r20, r24
    8b1c:	a7 ea       	ldi	r26, 0xA7	; 167
    8b1e:	b1 e4       	ldi	r27, 0x41	; 65
    8b20:	d2 df       	rcall	.-92     	; 0x8ac6 <__muluhisi3>
    8b22:	6b 01       	movw	r12, r22
    8b24:	7c 01       	movw	r14, r24
    8b26:	ac ee       	ldi	r26, 0xEC	; 236
    8b28:	b4 ef       	ldi	r27, 0xF4	; 244
    8b2a:	a5 01       	movw	r20, r10
    8b2c:	94 01       	movw	r18, r8
    8b2e:	94 d0       	rcall	.+296    	; 0x8c58 <__mulohisi3>
    8b30:	c6 0e       	add	r12, r22
    8b32:	d7 1e       	adc	r13, r23
    8b34:	e8 1e       	adc	r14, r24
    8b36:	f9 1e       	adc	r15, r25
    8b38:	f7 fe       	sbrs	r15, 7
    8b3a:	06 c0       	rjmp	.+12     	; 0x8b48 <random_r+0x6e>
    8b3c:	81 e0       	ldi	r24, 0x01	; 1
    8b3e:	c8 1a       	sub	r12, r24
    8b40:	d1 08       	sbc	r13, r1
    8b42:	e1 08       	sbc	r14, r1
    8b44:	80 e8       	ldi	r24, 0x80	; 128
    8b46:	f8 0a       	sbc	r15, r24
    8b48:	c8 82       	st	Y, r12
    8b4a:	d9 82       	std	Y+1, r13	; 0x01
    8b4c:	ea 82       	std	Y+2, r14	; 0x02
    8b4e:	fb 82       	std	Y+3, r15	; 0x03
    8b50:	c7 01       	movw	r24, r14
    8b52:	b6 01       	movw	r22, r12
    8b54:	9f 77       	andi	r25, 0x7F	; 127
    8b56:	df 91       	pop	r29
    8b58:	cf 91       	pop	r28
    8b5a:	ff 90       	pop	r15
    8b5c:	ef 90       	pop	r14
    8b5e:	df 90       	pop	r13
    8b60:	cf 90       	pop	r12
    8b62:	bf 90       	pop	r11
    8b64:	af 90       	pop	r10
    8b66:	9f 90       	pop	r9
    8b68:	8f 90       	pop	r8
    8b6a:	08 95       	ret

00008b6c <random>:
    8b6c:	8f 92       	push	r8
    8b6e:	9f 92       	push	r9
    8b70:	af 92       	push	r10
    8b72:	bf 92       	push	r11
    8b74:	cf 92       	push	r12
    8b76:	df 92       	push	r13
    8b78:	ef 92       	push	r14
    8b7a:	ff 92       	push	r15
    8b7c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__data_start>
    8b80:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__data_start+0x1>
    8b84:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__data_start+0x2>
    8b88:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__data_start+0x3>
    8b8c:	61 15       	cp	r22, r1
    8b8e:	71 05       	cpc	r23, r1
    8b90:	81 05       	cpc	r24, r1
    8b92:	91 05       	cpc	r25, r1
    8b94:	21 f4       	brne	.+8      	; 0x8b9e <random+0x32>
    8b96:	64 e2       	ldi	r22, 0x24	; 36
    8b98:	79 ed       	ldi	r23, 0xD9	; 217
    8b9a:	8b e5       	ldi	r24, 0x5B	; 91
    8b9c:	97 e0       	ldi	r25, 0x07	; 7
    8b9e:	2d e1       	ldi	r18, 0x1D	; 29
    8ba0:	33 ef       	ldi	r19, 0xF3	; 243
    8ba2:	41 e0       	ldi	r20, 0x01	; 1
    8ba4:	50 e0       	ldi	r21, 0x00	; 0
    8ba6:	55 df       	rcall	.-342    	; 0x8a52 <__divmodsi4>
    8ba8:	49 01       	movw	r8, r18
    8baa:	5a 01       	movw	r10, r20
    8bac:	9b 01       	movw	r18, r22
    8bae:	ac 01       	movw	r20, r24
    8bb0:	a7 ea       	ldi	r26, 0xA7	; 167
    8bb2:	b1 e4       	ldi	r27, 0x41	; 65
    8bb4:	88 df       	rcall	.-240    	; 0x8ac6 <__muluhisi3>
    8bb6:	6b 01       	movw	r12, r22
    8bb8:	7c 01       	movw	r14, r24
    8bba:	ac ee       	ldi	r26, 0xEC	; 236
    8bbc:	b4 ef       	ldi	r27, 0xF4	; 244
    8bbe:	a5 01       	movw	r20, r10
    8bc0:	94 01       	movw	r18, r8
    8bc2:	4a d0       	rcall	.+148    	; 0x8c58 <__mulohisi3>
    8bc4:	c6 0e       	add	r12, r22
    8bc6:	d7 1e       	adc	r13, r23
    8bc8:	e8 1e       	adc	r14, r24
    8bca:	f9 1e       	adc	r15, r25
    8bcc:	f7 fe       	sbrs	r15, 7
    8bce:	06 c0       	rjmp	.+12     	; 0x8bdc <random+0x70>
    8bd0:	81 e0       	ldi	r24, 0x01	; 1
    8bd2:	c8 1a       	sub	r12, r24
    8bd4:	d1 08       	sbc	r13, r1
    8bd6:	e1 08       	sbc	r14, r1
    8bd8:	80 e8       	ldi	r24, 0x80	; 128
    8bda:	f8 0a       	sbc	r15, r24
    8bdc:	c0 92 00 01 	sts	0x0100, r12	; 0x800100 <__data_start>
    8be0:	d0 92 01 01 	sts	0x0101, r13	; 0x800101 <__data_start+0x1>
    8be4:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <__data_start+0x2>
    8be8:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <__data_start+0x3>
    8bec:	c7 01       	movw	r24, r14
    8bee:	b6 01       	movw	r22, r12
    8bf0:	9f 77       	andi	r25, 0x7F	; 127
    8bf2:	ff 90       	pop	r15
    8bf4:	ef 90       	pop	r14
    8bf6:	df 90       	pop	r13
    8bf8:	cf 90       	pop	r12
    8bfa:	bf 90       	pop	r11
    8bfc:	af 90       	pop	r10
    8bfe:	9f 90       	pop	r9
    8c00:	8f 90       	pop	r8
    8c02:	08 95       	ret

00008c04 <srandom>:
    8c04:	60 93 00 01 	sts	0x0100, r22	; 0x800100 <__data_start>
    8c08:	70 93 01 01 	sts	0x0101, r23	; 0x800101 <__data_start+0x1>
    8c0c:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_start+0x2>
    8c10:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <__data_start+0x3>
    8c14:	08 95       	ret

00008c16 <memcpy>:
    8c16:	fb 01       	movw	r30, r22
    8c18:	dc 01       	movw	r26, r24
    8c1a:	02 c0       	rjmp	.+4      	; 0x8c20 <memcpy+0xa>
    8c1c:	01 90       	ld	r0, Z+
    8c1e:	0d 92       	st	X+, r0
    8c20:	41 50       	subi	r20, 0x01	; 1
    8c22:	50 40       	sbci	r21, 0x00	; 0
    8c24:	d8 f7       	brcc	.-10     	; 0x8c1c <memcpy+0x6>
    8c26:	08 95       	ret

00008c28 <strcpy>:
    8c28:	fb 01       	movw	r30, r22
    8c2a:	dc 01       	movw	r26, r24
    8c2c:	01 90       	ld	r0, Z+
    8c2e:	0d 92       	st	X+, r0
    8c30:	00 20       	and	r0, r0
    8c32:	e1 f7       	brne	.-8      	; 0x8c2c <strcpy+0x4>
    8c34:	08 95       	ret

00008c36 <strncpy>:
    8c36:	fb 01       	movw	r30, r22
    8c38:	dc 01       	movw	r26, r24
    8c3a:	41 50       	subi	r20, 0x01	; 1
    8c3c:	50 40       	sbci	r21, 0x00	; 0
    8c3e:	48 f0       	brcs	.+18     	; 0x8c52 <strncpy+0x1c>
    8c40:	01 90       	ld	r0, Z+
    8c42:	0d 92       	st	X+, r0
    8c44:	00 20       	and	r0, r0
    8c46:	c9 f7       	brne	.-14     	; 0x8c3a <strncpy+0x4>
    8c48:	01 c0       	rjmp	.+2      	; 0x8c4c <strncpy+0x16>
    8c4a:	1d 92       	st	X+, r1
    8c4c:	41 50       	subi	r20, 0x01	; 1
    8c4e:	50 40       	sbci	r21, 0x00	; 0
    8c50:	e0 f7       	brcc	.-8      	; 0x8c4a <strncpy+0x14>
    8c52:	08 95       	ret

00008c54 <__mulshisi3>:
    8c54:	b7 ff       	sbrs	r27, 7
    8c56:	37 cf       	rjmp	.-402    	; 0x8ac6 <__muluhisi3>

00008c58 <__mulohisi3>:
    8c58:	36 df       	rcall	.-404    	; 0x8ac6 <__muluhisi3>
    8c5a:	82 1b       	sub	r24, r18
    8c5c:	93 0b       	sbc	r25, r19
    8c5e:	08 95       	ret

00008c60 <__do_global_dtors>:
    8c60:	14 e0       	ldi	r17, 0x04	; 4
    8c62:	c5 e3       	ldi	r28, 0x35	; 53
    8c64:	d4 e0       	ldi	r29, 0x04	; 4
    8c66:	03 c0       	rjmp	.+6      	; 0x8c6e <__do_global_dtors+0xe>
    8c68:	fe 01       	movw	r30, r28
    8c6a:	0f df       	rcall	.-482    	; 0x8a8a <__tablejump2__>
    8c6c:	21 96       	adiw	r28, 0x01	; 1
    8c6e:	c6 33       	cpi	r28, 0x36	; 54
    8c70:	d1 07       	cpc	r29, r17
    8c72:	d1 f7       	brne	.-12     	; 0x8c68 <__do_global_dtors+0x8>
    8c74:	f8 94       	cli

00008c76 <__stop_program>:
    8c76:	ff cf       	rjmp	.-2      	; 0x8c76 <__stop_program>
